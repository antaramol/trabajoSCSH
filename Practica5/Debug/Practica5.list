
Practica5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013614  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001d98  080137a4  080137a4  000237a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801553c  0801553c  000300b8  2**0
                  CONTENTS
  4 .ARM          00000008  0801553c  0801553c  0002553c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08015544  08015544  000300b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08015544  08015544  00025544  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08015548  08015548  00025548  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b8  20000000  0801554c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004e74  200000b8  08015604  000300b8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004f2c  08015604  00034f2c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000300b8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000395f1  00000000  00000000  000300e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006dd9  00000000  00000000  000696d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002fc0  00000000  00000000  000704b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002d28  00000000  00000000  00073478  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000098e6  00000000  00000000  000761a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00034864  00000000  00000000  0007fa86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00117ce8  00000000  00000000  000b42ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001cbfd2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000d970  00000000  00000000  001cc024  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000b8 	.word	0x200000b8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801378c 	.word	0x0801378c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000bc 	.word	0x200000bc
 80001cc:	0801378c 	.word	0x0801378c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000584:	b480      	push	{r7}
 8000586:	b083      	sub	sp, #12
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800058c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000590:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000594:	f003 0301 	and.w	r3, r3, #1
 8000598:	2b00      	cmp	r3, #0
 800059a:	d013      	beq.n	80005c4 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 800059c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005a0:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80005a4:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d00b      	beq.n	80005c4 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80005ac:	e000      	b.n	80005b0 <ITM_SendChar+0x2c>
    {
      __NOP();
 80005ae:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80005b0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d0f9      	beq.n	80005ae <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80005ba:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005be:	687a      	ldr	r2, [r7, #4]
 80005c0:	b2d2      	uxtb	r2, r2
 80005c2:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80005c4:	687b      	ldr	r3, [r7, #4]
}
 80005c6:	4618      	mov	r0, r3
 80005c8:	370c      	adds	r7, #12
 80005ca:	46bd      	mov	sp, r7
 80005cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d0:	4770      	bx	lr
	...

080005d4 <configureTimerForRunTimeStats>:
void wifiStartTask_func(void *argument);
void mqttSubscribe_func(void *argument);

/* USER CODE BEGIN PFP */
volatile unsigned long ulHighFrequencyTimerTicks;
void configureTimerForRunTimeStats(void) {
 80005d4:	b580      	push	{r7, lr}
 80005d6:	af00      	add	r7, sp, #0
	ulHighFrequencyTimerTicks = 0;
 80005d8:	4b03      	ldr	r3, [pc, #12]	; (80005e8 <configureTimerForRunTimeStats+0x14>)
 80005da:	2200      	movs	r2, #0
 80005dc:	601a      	str	r2, [r3, #0]
	HAL_TIM_Base_Start_IT(&htim7);
 80005de:	4803      	ldr	r0, [pc, #12]	; (80005ec <configureTimerForRunTimeStats+0x18>)
 80005e0:	f007 f85e 	bl	80076a0 <HAL_TIM_Base_Start_IT>
}
 80005e4:	bf00      	nop
 80005e6:	bd80      	pop	{r7, pc}
 80005e8:	200007c8 	.word	0x200007c8
 80005ec:	20000224 	.word	0x20000224

080005f0 <getRunTimeCounterValue>:
unsigned long getRunTimeCounterValue(void) {
 80005f0:	b480      	push	{r7}
 80005f2:	af00      	add	r7, sp, #0
	return ulHighFrequencyTimerTicks;
 80005f4:	4b03      	ldr	r3, [pc, #12]	; (8000604 <getRunTimeCounterValue+0x14>)
 80005f6:	681b      	ldr	r3, [r3, #0]

}
 80005f8:	4618      	mov	r0, r3
 80005fa:	46bd      	mov	sp, r7
 80005fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000600:	4770      	bx	lr
 8000602:	bf00      	nop
 8000604:	200007c8 	.word	0x200007c8

08000608 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800060c:	f002 f8b3 	bl	8002776 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000610:	f000 f8bc 	bl	800078c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000614:	f000 fb18 	bl	8000c48 <MX_GPIO_Init>
  MX_DFSDM1_Init();
 8000618:	f000 f91c 	bl	8000854 <MX_DFSDM1_Init>
  MX_I2C2_Init();
 800061c:	f000 f952 	bl	80008c4 <MX_I2C2_Init>
  MX_QUADSPI_Init();
 8000620:	f000 f98e 	bl	8000940 <MX_QUADSPI_Init>
  MX_SPI3_Init();
 8000624:	f000 fa0e 	bl	8000a44 <MX_SPI3_Init>
  MX_USART1_UART_Init();
 8000628:	f000 fa80 	bl	8000b2c <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 800062c:	f000 faae 	bl	8000b8c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000630:	f000 fadc 	bl	8000bec <MX_USB_OTG_FS_PCD_Init>
  MX_TIM7_Init();
 8000634:	f000 fa44 	bl	8000ac0 <MX_TIM7_Init>
  MX_RTC_Init();
 8000638:	f000 f9a8 	bl	800098c <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  status_acc = BSP_ACCELERO_Init_INT();
 800063c:	f000 fcc2 	bl	8000fc4 <BSP_ACCELERO_Init_INT>
 8000640:	4603      	mov	r3, r0
 8000642:	461a      	mov	r2, r3
 8000644:	4b31      	ldr	r3, [pc, #196]	; (800070c <main+0x104>)
 8000646:	701a      	strb	r2, [r3, #0]
  if (status_acc == ACCELERO_OK){
 8000648:	4b30      	ldr	r3, [pc, #192]	; (800070c <main+0x104>)
 800064a:	781b      	ldrb	r3, [r3, #0]
 800064c:	2b00      	cmp	r3, #0
 800064e:	d102      	bne.n	8000656 <main+0x4e>
	  printf("Acelerometro inicializado\r\n");
 8000650:	482f      	ldr	r0, [pc, #188]	; (8000710 <main+0x108>)
 8000652:	f012 fa6f 	bl	8012b34 <puts>
  }

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000656:	f00e f8f5 	bl	800e844 <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of print_queue */
  print_queueHandle = osMessageQueueNew (10, sizeof(uintptr_t), &print_queue_attributes);
 800065a:	4a2e      	ldr	r2, [pc, #184]	; (8000714 <main+0x10c>)
 800065c:	2104      	movs	r1, #4
 800065e:	200a      	movs	r0, #10
 8000660:	f00e fae4 	bl	800ec2c <osMessageQueueNew>
 8000664:	4603      	mov	r3, r0
 8000666:	4a2c      	ldr	r2, [pc, #176]	; (8000718 <main+0x110>)
 8000668:	6013      	str	r3, [r2, #0]

  /* creation of receive_queue */
  receive_queueHandle = osMessageQueueNew (3, sizeof(uint8_t), &receive_queue_attributes);
 800066a:	4a2c      	ldr	r2, [pc, #176]	; (800071c <main+0x114>)
 800066c:	2101      	movs	r1, #1
 800066e:	2003      	movs	r0, #3
 8000670:	f00e fadc 	bl	800ec2c <osMessageQueueNew>
 8000674:	4603      	mov	r3, r0
 8000676:	4a2a      	ldr	r2, [pc, #168]	; (8000720 <main+0x118>)
 8000678:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of RTC_set */
  RTC_setHandle = osThreadNew(RTC_set_func, NULL, &RTC_set_attributes);
 800067a:	4a2a      	ldr	r2, [pc, #168]	; (8000724 <main+0x11c>)
 800067c:	2100      	movs	r1, #0
 800067e:	482a      	ldr	r0, [pc, #168]	; (8000728 <main+0x120>)
 8000680:	f00e f92a 	bl	800e8d8 <osThreadNew>
 8000684:	4603      	mov	r3, r0
 8000686:	4a29      	ldr	r2, [pc, #164]	; (800072c <main+0x124>)
 8000688:	6013      	str	r3, [r2, #0]

  /* creation of readAccel */
  readAccelHandle = osThreadNew(readAccel_func, NULL, &readAccel_attributes);
 800068a:	4a29      	ldr	r2, [pc, #164]	; (8000730 <main+0x128>)
 800068c:	2100      	movs	r1, #0
 800068e:	4829      	ldr	r0, [pc, #164]	; (8000734 <main+0x12c>)
 8000690:	f00e f922 	bl	800e8d8 <osThreadNew>
 8000694:	4603      	mov	r3, r0
 8000696:	4a28      	ldr	r2, [pc, #160]	; (8000738 <main+0x130>)
 8000698:	6013      	str	r3, [r2, #0]

  /* creation of printTask */
  printTaskHandle = osThreadNew(printTask_func, NULL, &printTask_attributes);
 800069a:	4a28      	ldr	r2, [pc, #160]	; (800073c <main+0x134>)
 800069c:	2100      	movs	r1, #0
 800069e:	4828      	ldr	r0, [pc, #160]	; (8000740 <main+0x138>)
 80006a0:	f00e f91a 	bl	800e8d8 <osThreadNew>
 80006a4:	4603      	mov	r3, r0
 80006a6:	4a27      	ldr	r2, [pc, #156]	; (8000744 <main+0x13c>)
 80006a8:	6013      	str	r3, [r2, #0]

  /* creation of tarea_UART */
  tarea_UARTHandle = osThreadNew(tarea_UART_func, NULL, &tarea_UART_attributes);
 80006aa:	4a27      	ldr	r2, [pc, #156]	; (8000748 <main+0x140>)
 80006ac:	2100      	movs	r1, #0
 80006ae:	4827      	ldr	r0, [pc, #156]	; (800074c <main+0x144>)
 80006b0:	f00e f912 	bl	800e8d8 <osThreadNew>
 80006b4:	4603      	mov	r3, r0
 80006b6:	4a26      	ldr	r2, [pc, #152]	; (8000750 <main+0x148>)
 80006b8:	6013      	str	r3, [r2, #0]

  /* creation of temporizador */
  temporizadorHandle = osThreadNew(temporizador_func, NULL, &temporizador_attributes);
 80006ba:	4a26      	ldr	r2, [pc, #152]	; (8000754 <main+0x14c>)
 80006bc:	2100      	movs	r1, #0
 80006be:	4826      	ldr	r0, [pc, #152]	; (8000758 <main+0x150>)
 80006c0:	f00e f90a 	bl	800e8d8 <osThreadNew>
 80006c4:	4603      	mov	r3, r0
 80006c6:	4a25      	ldr	r2, [pc, #148]	; (800075c <main+0x154>)
 80006c8:	6013      	str	r3, [r2, #0]

  /* creation of sendMQTT */
  sendMQTTHandle = osThreadNew(sendMQTT_func, NULL, &sendMQTT_attributes);
 80006ca:	4a25      	ldr	r2, [pc, #148]	; (8000760 <main+0x158>)
 80006cc:	2100      	movs	r1, #0
 80006ce:	4825      	ldr	r0, [pc, #148]	; (8000764 <main+0x15c>)
 80006d0:	f00e f902 	bl	800e8d8 <osThreadNew>
 80006d4:	4603      	mov	r3, r0
 80006d6:	4a24      	ldr	r2, [pc, #144]	; (8000768 <main+0x160>)
 80006d8:	6013      	str	r3, [r2, #0]

  /* creation of wifiStartTask */
  wifiStartTaskHandle = osThreadNew(wifiStartTask_func, NULL, &wifiStartTask_attributes);
 80006da:	4a24      	ldr	r2, [pc, #144]	; (800076c <main+0x164>)
 80006dc:	2100      	movs	r1, #0
 80006de:	4824      	ldr	r0, [pc, #144]	; (8000770 <main+0x168>)
 80006e0:	f00e f8fa 	bl	800e8d8 <osThreadNew>
 80006e4:	4603      	mov	r3, r0
 80006e6:	4a23      	ldr	r2, [pc, #140]	; (8000774 <main+0x16c>)
 80006e8:	6013      	str	r3, [r2, #0]

  /* creation of mqttSubscribe */
  mqttSubscribeHandle = osThreadNew(mqttSubscribe_func, NULL, &mqttSubscribe_attributes);
 80006ea:	4a23      	ldr	r2, [pc, #140]	; (8000778 <main+0x170>)
 80006ec:	2100      	movs	r1, #0
 80006ee:	4823      	ldr	r0, [pc, #140]	; (800077c <main+0x174>)
 80006f0:	f00e f8f2 	bl	800e8d8 <osThreadNew>
 80006f4:	4603      	mov	r3, r0
 80006f6:	4a22      	ldr	r2, [pc, #136]	; (8000780 <main+0x178>)
 80006f8:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  HAL_UART_Receive_IT(&huart1,&rec_data,1);
 80006fa:	2201      	movs	r2, #1
 80006fc:	4921      	ldr	r1, [pc, #132]	; (8000784 <main+0x17c>)
 80006fe:	4822      	ldr	r0, [pc, #136]	; (8000788 <main+0x180>)
 8000700:	f007 fba8 	bl	8007e54 <HAL_UART_Receive_IT>
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000704:	f00e f8c2 	bl	800e88c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000708:	e7fe      	b.n	8000708 <main+0x100>
 800070a:	bf00      	nop
 800070c:	200007c0 	.word	0x200007c0
 8000710:	08013890 	.word	0x08013890
 8000714:	080150bc 	.word	0x080150bc
 8000718:	200007a0 	.word	0x200007a0
 800071c:	080150d4 	.word	0x080150d4
 8000720:	200007a4 	.word	0x200007a4
 8000724:	08014f9c 	.word	0x08014f9c
 8000728:	08001225 	.word	0x08001225
 800072c:	20000780 	.word	0x20000780
 8000730:	08014fc0 	.word	0x08014fc0
 8000734:	0800153d 	.word	0x0800153d
 8000738:	20000784 	.word	0x20000784
 800073c:	08014fe4 	.word	0x08014fe4
 8000740:	08001719 	.word	0x08001719
 8000744:	20000788 	.word	0x20000788
 8000748:	08015008 	.word	0x08015008
 800074c:	08001781 	.word	0x08001781
 8000750:	2000078c 	.word	0x2000078c
 8000754:	0801502c 	.word	0x0801502c
 8000758:	080017d1 	.word	0x080017d1
 800075c:	20000790 	.word	0x20000790
 8000760:	08015050 	.word	0x08015050
 8000764:	0800180d 	.word	0x0800180d
 8000768:	20000794 	.word	0x20000794
 800076c:	08015074 	.word	0x08015074
 8000770:	080018bd 	.word	0x080018bd
 8000774:	20000798 	.word	0x20000798
 8000778:	08015098 	.word	0x08015098
 800077c:	080018ed 	.word	0x080018ed
 8000780:	2000079c 	.word	0x2000079c
 8000784:	200007cc 	.word	0x200007cc
 8000788:	20000270 	.word	0x20000270

0800078c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b096      	sub	sp, #88	; 0x58
 8000790:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000792:	f107 0314 	add.w	r3, r7, #20
 8000796:	2244      	movs	r2, #68	; 0x44
 8000798:	2100      	movs	r1, #0
 800079a:	4618      	mov	r0, r3
 800079c:	f011 fdb9 	bl	8012312 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007a0:	463b      	mov	r3, r7
 80007a2:	2200      	movs	r2, #0
 80007a4:	601a      	str	r2, [r3, #0]
 80007a6:	605a      	str	r2, [r3, #4]
 80007a8:	609a      	str	r2, [r3, #8]
 80007aa:	60da      	str	r2, [r3, #12]
 80007ac:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80007ae:	f44f 7000 	mov.w	r0, #512	; 0x200
 80007b2:	f003 fcc9 	bl	8004148 <HAL_PWREx_ControlVoltageScaling>
 80007b6:	4603      	mov	r3, r0
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d001      	beq.n	80007c0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80007bc:	f001 f8f6 	bl	80019ac <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80007c0:	f003 fca4 	bl	800410c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80007c4:	4b22      	ldr	r3, [pc, #136]	; (8000850 <SystemClock_Config+0xc4>)
 80007c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80007ca:	4a21      	ldr	r2, [pc, #132]	; (8000850 <SystemClock_Config+0xc4>)
 80007cc:	f023 0318 	bic.w	r3, r3, #24
 80007d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_LSE
 80007d4:	231c      	movs	r3, #28
 80007d6:	617b      	str	r3, [r7, #20]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80007d8:	2301      	movs	r3, #1
 80007da:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80007dc:	2301      	movs	r3, #1
 80007de:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80007e0:	2301      	movs	r3, #1
 80007e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80007e4:	2300      	movs	r3, #0
 80007e6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80007e8:	2360      	movs	r3, #96	; 0x60
 80007ea:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007ec:	2302      	movs	r3, #2
 80007ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80007f0:	2301      	movs	r3, #1
 80007f2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80007f4:	2301      	movs	r3, #1
 80007f6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 80007f8:	2328      	movs	r3, #40	; 0x28
 80007fa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80007fc:	2307      	movs	r3, #7
 80007fe:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000800:	2302      	movs	r3, #2
 8000802:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000804:	2302      	movs	r3, #2
 8000806:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000808:	f107 0314 	add.w	r3, r7, #20
 800080c:	4618      	mov	r0, r3
 800080e:	f003 fdbd 	bl	800438c <HAL_RCC_OscConfig>
 8000812:	4603      	mov	r3, r0
 8000814:	2b00      	cmp	r3, #0
 8000816:	d001      	beq.n	800081c <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000818:	f001 f8c8 	bl	80019ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800081c:	230f      	movs	r3, #15
 800081e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000820:	2303      	movs	r3, #3
 8000822:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000824:	2300      	movs	r3, #0
 8000826:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000828:	2300      	movs	r3, #0
 800082a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800082c:	2300      	movs	r3, #0
 800082e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000830:	463b      	mov	r3, r7
 8000832:	2104      	movs	r1, #4
 8000834:	4618      	mov	r0, r3
 8000836:	f004 f991 	bl	8004b5c <HAL_RCC_ClockConfig>
 800083a:	4603      	mov	r3, r0
 800083c:	2b00      	cmp	r3, #0
 800083e:	d001      	beq.n	8000844 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8000840:	f001 f8b4 	bl	80019ac <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000844:	f004 feac 	bl	80055a0 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000848:	bf00      	nop
 800084a:	3758      	adds	r7, #88	; 0x58
 800084c:	46bd      	mov	sp, r7
 800084e:	bd80      	pop	{r7, pc}
 8000850:	40021000 	.word	0x40021000

08000854 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 8000858:	4b18      	ldr	r3, [pc, #96]	; (80008bc <MX_DFSDM1_Init+0x68>)
 800085a:	4a19      	ldr	r2, [pc, #100]	; (80008c0 <MX_DFSDM1_Init+0x6c>)
 800085c:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 800085e:	4b17      	ldr	r3, [pc, #92]	; (80008bc <MX_DFSDM1_Init+0x68>)
 8000860:	2201      	movs	r2, #1
 8000862:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8000864:	4b15      	ldr	r3, [pc, #84]	; (80008bc <MX_DFSDM1_Init+0x68>)
 8000866:	2200      	movs	r2, #0
 8000868:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 800086a:	4b14      	ldr	r3, [pc, #80]	; (80008bc <MX_DFSDM1_Init+0x68>)
 800086c:	2202      	movs	r2, #2
 800086e:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000870:	4b12      	ldr	r3, [pc, #72]	; (80008bc <MX_DFSDM1_Init+0x68>)
 8000872:	2200      	movs	r2, #0
 8000874:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8000876:	4b11      	ldr	r3, [pc, #68]	; (80008bc <MX_DFSDM1_Init+0x68>)
 8000878:	2200      	movs	r2, #0
 800087a:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 800087c:	4b0f      	ldr	r3, [pc, #60]	; (80008bc <MX_DFSDM1_Init+0x68>)
 800087e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000882:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8000884:	4b0d      	ldr	r3, [pc, #52]	; (80008bc <MX_DFSDM1_Init+0x68>)
 8000886:	2200      	movs	r2, #0
 8000888:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 800088a:	4b0c      	ldr	r3, [pc, #48]	; (80008bc <MX_DFSDM1_Init+0x68>)
 800088c:	2204      	movs	r2, #4
 800088e:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000890:	4b0a      	ldr	r3, [pc, #40]	; (80008bc <MX_DFSDM1_Init+0x68>)
 8000892:	2200      	movs	r2, #0
 8000894:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 8000896:	4b09      	ldr	r3, [pc, #36]	; (80008bc <MX_DFSDM1_Init+0x68>)
 8000898:	2201      	movs	r2, #1
 800089a:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 800089c:	4b07      	ldr	r3, [pc, #28]	; (80008bc <MX_DFSDM1_Init+0x68>)
 800089e:	2200      	movs	r2, #0
 80008a0:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 80008a2:	4b06      	ldr	r3, [pc, #24]	; (80008bc <MX_DFSDM1_Init+0x68>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 80008a8:	4804      	ldr	r0, [pc, #16]	; (80008bc <MX_DFSDM1_Init+0x68>)
 80008aa:	f002 f8d5 	bl	8002a58 <HAL_DFSDM_ChannelInit>
 80008ae:	4603      	mov	r3, r0
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d001      	beq.n	80008b8 <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 80008b4:	f001 f87a 	bl	80019ac <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 80008b8:	bf00      	nop
 80008ba:	bd80      	pop	{r7, pc}
 80008bc:	200000d4 	.word	0x200000d4
 80008c0:	40016020 	.word	0x40016020

080008c4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80008c8:	4b1b      	ldr	r3, [pc, #108]	; (8000938 <MX_I2C2_Init+0x74>)
 80008ca:	4a1c      	ldr	r2, [pc, #112]	; (800093c <MX_I2C2_Init+0x78>)
 80008cc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00000E14;
 80008ce:	4b1a      	ldr	r3, [pc, #104]	; (8000938 <MX_I2C2_Init+0x74>)
 80008d0:	f640 6214 	movw	r2, #3604	; 0xe14
 80008d4:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80008d6:	4b18      	ldr	r3, [pc, #96]	; (8000938 <MX_I2C2_Init+0x74>)
 80008d8:	2200      	movs	r2, #0
 80008da:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008dc:	4b16      	ldr	r3, [pc, #88]	; (8000938 <MX_I2C2_Init+0x74>)
 80008de:	2201      	movs	r2, #1
 80008e0:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008e2:	4b15      	ldr	r3, [pc, #84]	; (8000938 <MX_I2C2_Init+0x74>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80008e8:	4b13      	ldr	r3, [pc, #76]	; (8000938 <MX_I2C2_Init+0x74>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80008ee:	4b12      	ldr	r3, [pc, #72]	; (8000938 <MX_I2C2_Init+0x74>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008f4:	4b10      	ldr	r3, [pc, #64]	; (8000938 <MX_I2C2_Init+0x74>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008fa:	4b0f      	ldr	r3, [pc, #60]	; (8000938 <MX_I2C2_Init+0x74>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000900:	480d      	ldr	r0, [pc, #52]	; (8000938 <MX_I2C2_Init+0x74>)
 8000902:	f002 fd1b 	bl	800333c <HAL_I2C_Init>
 8000906:	4603      	mov	r3, r0
 8000908:	2b00      	cmp	r3, #0
 800090a:	d001      	beq.n	8000910 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 800090c:	f001 f84e 	bl	80019ac <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000910:	2100      	movs	r1, #0
 8000912:	4809      	ldr	r0, [pc, #36]	; (8000938 <MX_I2C2_Init+0x74>)
 8000914:	f003 fa1a 	bl	8003d4c <HAL_I2CEx_ConfigAnalogFilter>
 8000918:	4603      	mov	r3, r0
 800091a:	2b00      	cmp	r3, #0
 800091c:	d001      	beq.n	8000922 <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 800091e:	f001 f845 	bl	80019ac <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000922:	2100      	movs	r1, #0
 8000924:	4804      	ldr	r0, [pc, #16]	; (8000938 <MX_I2C2_Init+0x74>)
 8000926:	f003 fa5c 	bl	8003de2 <HAL_I2CEx_ConfigDigitalFilter>
 800092a:	4603      	mov	r3, r0
 800092c:	2b00      	cmp	r3, #0
 800092e:	d001      	beq.n	8000934 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8000930:	f001 f83c 	bl	80019ac <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000934:	bf00      	nop
 8000936:	bd80      	pop	{r7, pc}
 8000938:	2000010c 	.word	0x2000010c
 800093c:	40005800 	.word	0x40005800

08000940 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8000944:	4b0f      	ldr	r3, [pc, #60]	; (8000984 <MX_QUADSPI_Init+0x44>)
 8000946:	4a10      	ldr	r2, [pc, #64]	; (8000988 <MX_QUADSPI_Init+0x48>)
 8000948:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 2;
 800094a:	4b0e      	ldr	r3, [pc, #56]	; (8000984 <MX_QUADSPI_Init+0x44>)
 800094c:	2202      	movs	r2, #2
 800094e:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8000950:	4b0c      	ldr	r3, [pc, #48]	; (8000984 <MX_QUADSPI_Init+0x44>)
 8000952:	2204      	movs	r2, #4
 8000954:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8000956:	4b0b      	ldr	r3, [pc, #44]	; (8000984 <MX_QUADSPI_Init+0x44>)
 8000958:	2210      	movs	r2, #16
 800095a:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 800095c:	4b09      	ldr	r3, [pc, #36]	; (8000984 <MX_QUADSPI_Init+0x44>)
 800095e:	2217      	movs	r2, #23
 8000960:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8000962:	4b08      	ldr	r3, [pc, #32]	; (8000984 <MX_QUADSPI_Init+0x44>)
 8000964:	2200      	movs	r2, #0
 8000966:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000968:	4b06      	ldr	r3, [pc, #24]	; (8000984 <MX_QUADSPI_Init+0x44>)
 800096a:	2200      	movs	r2, #0
 800096c:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 800096e:	4805      	ldr	r0, [pc, #20]	; (8000984 <MX_QUADSPI_Init+0x44>)
 8000970:	f003 fc50 	bl	8004214 <HAL_QSPI_Init>
 8000974:	4603      	mov	r3, r0
 8000976:	2b00      	cmp	r3, #0
 8000978:	d001      	beq.n	800097e <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 800097a:	f001 f817 	bl	80019ac <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 800097e:	bf00      	nop
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop
 8000984:	20000158 	.word	0x20000158
 8000988:	a0001000 	.word	0xa0001000

0800098c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b086      	sub	sp, #24
 8000990:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000992:	1d3b      	adds	r3, r7, #4
 8000994:	2200      	movs	r2, #0
 8000996:	601a      	str	r2, [r3, #0]
 8000998:	605a      	str	r2, [r3, #4]
 800099a:	609a      	str	r2, [r3, #8]
 800099c:	60da      	str	r2, [r3, #12]
 800099e:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80009a0:	2300      	movs	r3, #0
 80009a2:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80009a4:	4b25      	ldr	r3, [pc, #148]	; (8000a3c <MX_RTC_Init+0xb0>)
 80009a6:	4a26      	ldr	r2, [pc, #152]	; (8000a40 <MX_RTC_Init+0xb4>)
 80009a8:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80009aa:	4b24      	ldr	r3, [pc, #144]	; (8000a3c <MX_RTC_Init+0xb0>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80009b0:	4b22      	ldr	r3, [pc, #136]	; (8000a3c <MX_RTC_Init+0xb0>)
 80009b2:	227f      	movs	r2, #127	; 0x7f
 80009b4:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80009b6:	4b21      	ldr	r3, [pc, #132]	; (8000a3c <MX_RTC_Init+0xb0>)
 80009b8:	22ff      	movs	r2, #255	; 0xff
 80009ba:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80009bc:	4b1f      	ldr	r3, [pc, #124]	; (8000a3c <MX_RTC_Init+0xb0>)
 80009be:	2200      	movs	r2, #0
 80009c0:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80009c2:	4b1e      	ldr	r3, [pc, #120]	; (8000a3c <MX_RTC_Init+0xb0>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80009c8:	4b1c      	ldr	r3, [pc, #112]	; (8000a3c <MX_RTC_Init+0xb0>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80009ce:	4b1b      	ldr	r3, [pc, #108]	; (8000a3c <MX_RTC_Init+0xb0>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80009d4:	4819      	ldr	r0, [pc, #100]	; (8000a3c <MX_RTC_Init+0xb0>)
 80009d6:	f004 ffc5 	bl	8005964 <HAL_RTC_Init>
 80009da:	4603      	mov	r3, r0
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d001      	beq.n	80009e4 <MX_RTC_Init+0x58>
  {
    Error_Handler();
 80009e0:	f000 ffe4 	bl	80019ac <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 13;
 80009e4:	230d      	movs	r3, #13
 80009e6:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 1;
 80009e8:	2301      	movs	r3, #1
 80009ea:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0;
 80009ec:	2300      	movs	r3, #0
 80009ee:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80009f0:	2300      	movs	r3, #0
 80009f2:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80009f4:	2300      	movs	r3, #0
 80009f6:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 80009f8:	1d3b      	adds	r3, r7, #4
 80009fa:	2200      	movs	r2, #0
 80009fc:	4619      	mov	r1, r3
 80009fe:	480f      	ldr	r0, [pc, #60]	; (8000a3c <MX_RTC_Init+0xb0>)
 8000a00:	f005 f82b 	bl	8005a5a <HAL_RTC_SetTime>
 8000a04:	4603      	mov	r3, r0
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d001      	beq.n	8000a0e <MX_RTC_Init+0x82>
  {
    Error_Handler();
 8000a0a:	f000 ffcf 	bl	80019ac <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000a0e:	2301      	movs	r3, #1
 8000a10:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8000a12:	2301      	movs	r3, #1
 8000a14:	707b      	strb	r3, [r7, #1]
  sDate.Date = 1;
 8000a16:	2301      	movs	r3, #1
 8000a18:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8000a1e:	463b      	mov	r3, r7
 8000a20:	2200      	movs	r2, #0
 8000a22:	4619      	mov	r1, r3
 8000a24:	4805      	ldr	r0, [pc, #20]	; (8000a3c <MX_RTC_Init+0xb0>)
 8000a26:	f005 f911 	bl	8005c4c <HAL_RTC_SetDate>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d001      	beq.n	8000a34 <MX_RTC_Init+0xa8>
  {
    Error_Handler();
 8000a30:	f000 ffbc 	bl	80019ac <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000a34:	bf00      	nop
 8000a36:	3718      	adds	r7, #24
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bd80      	pop	{r7, pc}
 8000a3c:	2000019c 	.word	0x2000019c
 8000a40:	40002800 	.word	0x40002800

08000a44 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000a48:	4b1b      	ldr	r3, [pc, #108]	; (8000ab8 <MX_SPI3_Init+0x74>)
 8000a4a:	4a1c      	ldr	r2, [pc, #112]	; (8000abc <MX_SPI3_Init+0x78>)
 8000a4c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000a4e:	4b1a      	ldr	r3, [pc, #104]	; (8000ab8 <MX_SPI3_Init+0x74>)
 8000a50:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000a54:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000a56:	4b18      	ldr	r3, [pc, #96]	; (8000ab8 <MX_SPI3_Init+0x74>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8000a5c:	4b16      	ldr	r3, [pc, #88]	; (8000ab8 <MX_SPI3_Init+0x74>)
 8000a5e:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000a62:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a64:	4b14      	ldr	r3, [pc, #80]	; (8000ab8 <MX_SPI3_Init+0x74>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a6a:	4b13      	ldr	r3, [pc, #76]	; (8000ab8 <MX_SPI3_Init+0x74>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000a70:	4b11      	ldr	r3, [pc, #68]	; (8000ab8 <MX_SPI3_Init+0x74>)
 8000a72:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a76:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000a78:	4b0f      	ldr	r3, [pc, #60]	; (8000ab8 <MX_SPI3_Init+0x74>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a7e:	4b0e      	ldr	r3, [pc, #56]	; (8000ab8 <MX_SPI3_Init+0x74>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a84:	4b0c      	ldr	r3, [pc, #48]	; (8000ab8 <MX_SPI3_Init+0x74>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a8a:	4b0b      	ldr	r3, [pc, #44]	; (8000ab8 <MX_SPI3_Init+0x74>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000a90:	4b09      	ldr	r3, [pc, #36]	; (8000ab8 <MX_SPI3_Init+0x74>)
 8000a92:	2207      	movs	r2, #7
 8000a94:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000a96:	4b08      	ldr	r3, [pc, #32]	; (8000ab8 <MX_SPI3_Init+0x74>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000a9c:	4b06      	ldr	r3, [pc, #24]	; (8000ab8 <MX_SPI3_Init+0x74>)
 8000a9e:	2208      	movs	r2, #8
 8000aa0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000aa2:	4805      	ldr	r0, [pc, #20]	; (8000ab8 <MX_SPI3_Init+0x74>)
 8000aa4:	f005 fa78 	bl	8005f98 <HAL_SPI_Init>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d001      	beq.n	8000ab2 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000aae:	f000 ff7d 	bl	80019ac <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000ab2:	bf00      	nop
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	200001c0 	.word	0x200001c0
 8000abc:	40003c00 	.word	0x40003c00

08000ac0 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b084      	sub	sp, #16
 8000ac4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ac6:	1d3b      	adds	r3, r7, #4
 8000ac8:	2200      	movs	r2, #0
 8000aca:	601a      	str	r2, [r3, #0]
 8000acc:	605a      	str	r2, [r3, #4]
 8000ace:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8000ad0:	4b14      	ldr	r3, [pc, #80]	; (8000b24 <MX_TIM7_Init+0x64>)
 8000ad2:	4a15      	ldr	r2, [pc, #84]	; (8000b28 <MX_TIM7_Init+0x68>)
 8000ad4:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 8000ad6:	4b13      	ldr	r3, [pc, #76]	; (8000b24 <MX_TIM7_Init+0x64>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000adc:	4b11      	ldr	r3, [pc, #68]	; (8000b24 <MX_TIM7_Init+0x64>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 799;
 8000ae2:	4b10      	ldr	r3, [pc, #64]	; (8000b24 <MX_TIM7_Init+0x64>)
 8000ae4:	f240 321f 	movw	r2, #799	; 0x31f
 8000ae8:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000aea:	4b0e      	ldr	r3, [pc, #56]	; (8000b24 <MX_TIM7_Init+0x64>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000af0:	480c      	ldr	r0, [pc, #48]	; (8000b24 <MX_TIM7_Init+0x64>)
 8000af2:	f006 fd7e 	bl	80075f2 <HAL_TIM_Base_Init>
 8000af6:	4603      	mov	r3, r0
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d001      	beq.n	8000b00 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8000afc:	f000 ff56 	bl	80019ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b00:	2300      	movs	r3, #0
 8000b02:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b04:	2300      	movs	r3, #0
 8000b06:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000b08:	1d3b      	adds	r3, r7, #4
 8000b0a:	4619      	mov	r1, r3
 8000b0c:	4805      	ldr	r0, [pc, #20]	; (8000b24 <MX_TIM7_Init+0x64>)
 8000b0e:	f007 f819 	bl	8007b44 <HAL_TIMEx_MasterConfigSynchronization>
 8000b12:	4603      	mov	r3, r0
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d001      	beq.n	8000b1c <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8000b18:	f000 ff48 	bl	80019ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8000b1c:	bf00      	nop
 8000b1e:	3710      	adds	r7, #16
 8000b20:	46bd      	mov	sp, r7
 8000b22:	bd80      	pop	{r7, pc}
 8000b24:	20000224 	.word	0x20000224
 8000b28:	40001400 	.word	0x40001400

08000b2c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000b30:	4b14      	ldr	r3, [pc, #80]	; (8000b84 <MX_USART1_UART_Init+0x58>)
 8000b32:	4a15      	ldr	r2, [pc, #84]	; (8000b88 <MX_USART1_UART_Init+0x5c>)
 8000b34:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000b36:	4b13      	ldr	r3, [pc, #76]	; (8000b84 <MX_USART1_UART_Init+0x58>)
 8000b38:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b3c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b3e:	4b11      	ldr	r3, [pc, #68]	; (8000b84 <MX_USART1_UART_Init+0x58>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000b44:	4b0f      	ldr	r3, [pc, #60]	; (8000b84 <MX_USART1_UART_Init+0x58>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000b4a:	4b0e      	ldr	r3, [pc, #56]	; (8000b84 <MX_USART1_UART_Init+0x58>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000b50:	4b0c      	ldr	r3, [pc, #48]	; (8000b84 <MX_USART1_UART_Init+0x58>)
 8000b52:	220c      	movs	r2, #12
 8000b54:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b56:	4b0b      	ldr	r3, [pc, #44]	; (8000b84 <MX_USART1_UART_Init+0x58>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b5c:	4b09      	ldr	r3, [pc, #36]	; (8000b84 <MX_USART1_UART_Init+0x58>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b62:	4b08      	ldr	r3, [pc, #32]	; (8000b84 <MX_USART1_UART_Init+0x58>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b68:	4b06      	ldr	r3, [pc, #24]	; (8000b84 <MX_USART1_UART_Init+0x58>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000b6e:	4805      	ldr	r0, [pc, #20]	; (8000b84 <MX_USART1_UART_Init+0x58>)
 8000b70:	f007 f88e 	bl	8007c90 <HAL_UART_Init>
 8000b74:	4603      	mov	r3, r0
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d001      	beq.n	8000b7e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000b7a:	f000 ff17 	bl	80019ac <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000b7e:	bf00      	nop
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	bf00      	nop
 8000b84:	20000270 	.word	0x20000270
 8000b88:	40013800 	.word	0x40013800

08000b8c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000b90:	4b14      	ldr	r3, [pc, #80]	; (8000be4 <MX_USART3_UART_Init+0x58>)
 8000b92:	4a15      	ldr	r2, [pc, #84]	; (8000be8 <MX_USART3_UART_Init+0x5c>)
 8000b94:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000b96:	4b13      	ldr	r3, [pc, #76]	; (8000be4 <MX_USART3_UART_Init+0x58>)
 8000b98:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b9c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000b9e:	4b11      	ldr	r3, [pc, #68]	; (8000be4 <MX_USART3_UART_Init+0x58>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000ba4:	4b0f      	ldr	r3, [pc, #60]	; (8000be4 <MX_USART3_UART_Init+0x58>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000baa:	4b0e      	ldr	r3, [pc, #56]	; (8000be4 <MX_USART3_UART_Init+0x58>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000bb0:	4b0c      	ldr	r3, [pc, #48]	; (8000be4 <MX_USART3_UART_Init+0x58>)
 8000bb2:	220c      	movs	r2, #12
 8000bb4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bb6:	4b0b      	ldr	r3, [pc, #44]	; (8000be4 <MX_USART3_UART_Init+0x58>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bbc:	4b09      	ldr	r3, [pc, #36]	; (8000be4 <MX_USART3_UART_Init+0x58>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bc2:	4b08      	ldr	r3, [pc, #32]	; (8000be4 <MX_USART3_UART_Init+0x58>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000bc8:	4b06      	ldr	r3, [pc, #24]	; (8000be4 <MX_USART3_UART_Init+0x58>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000bce:	4805      	ldr	r0, [pc, #20]	; (8000be4 <MX_USART3_UART_Init+0x58>)
 8000bd0:	f007 f85e 	bl	8007c90 <HAL_UART_Init>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d001      	beq.n	8000bde <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000bda:	f000 fee7 	bl	80019ac <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000bde:	bf00      	nop
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	200002f4 	.word	0x200002f4
 8000be8:	40004800 	.word	0x40004800

08000bec <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000bf0:	4b14      	ldr	r3, [pc, #80]	; (8000c44 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000bf2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000bf6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000bf8:	4b12      	ldr	r3, [pc, #72]	; (8000c44 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000bfa:	2206      	movs	r2, #6
 8000bfc:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000bfe:	4b11      	ldr	r3, [pc, #68]	; (8000c44 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c00:	2202      	movs	r2, #2
 8000c02:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000c04:	4b0f      	ldr	r3, [pc, #60]	; (8000c44 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c06:	2202      	movs	r2, #2
 8000c08:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000c0a:	4b0e      	ldr	r3, [pc, #56]	; (8000c44 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000c10:	4b0c      	ldr	r3, [pc, #48]	; (8000c44 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000c16:	4b0b      	ldr	r3, [pc, #44]	; (8000c44 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8000c1c:	4b09      	ldr	r3, [pc, #36]	; (8000c44 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000c22:	4b08      	ldr	r3, [pc, #32]	; (8000c44 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8000c28:	4b06      	ldr	r3, [pc, #24]	; (8000c44 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000c2e:	4805      	ldr	r0, [pc, #20]	; (8000c44 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c30:	f003 f923 	bl	8003e7a <HAL_PCD_Init>
 8000c34:	4603      	mov	r3, r0
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d001      	beq.n	8000c3e <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000c3a:	f000 feb7 	bl	80019ac <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000c3e:	bf00      	nop
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	20000378 	.word	0x20000378

08000c48 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b08a      	sub	sp, #40	; 0x28
 8000c4c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c4e:	f107 0314 	add.w	r3, r7, #20
 8000c52:	2200      	movs	r2, #0
 8000c54:	601a      	str	r2, [r3, #0]
 8000c56:	605a      	str	r2, [r3, #4]
 8000c58:	609a      	str	r2, [r3, #8]
 8000c5a:	60da      	str	r2, [r3, #12]
 8000c5c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c5e:	4bbb      	ldr	r3, [pc, #748]	; (8000f4c <MX_GPIO_Init+0x304>)
 8000c60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c62:	4aba      	ldr	r2, [pc, #744]	; (8000f4c <MX_GPIO_Init+0x304>)
 8000c64:	f043 0310 	orr.w	r3, r3, #16
 8000c68:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c6a:	4bb8      	ldr	r3, [pc, #736]	; (8000f4c <MX_GPIO_Init+0x304>)
 8000c6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c6e:	f003 0310 	and.w	r3, r3, #16
 8000c72:	613b      	str	r3, [r7, #16]
 8000c74:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c76:	4bb5      	ldr	r3, [pc, #724]	; (8000f4c <MX_GPIO_Init+0x304>)
 8000c78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c7a:	4ab4      	ldr	r2, [pc, #720]	; (8000f4c <MX_GPIO_Init+0x304>)
 8000c7c:	f043 0304 	orr.w	r3, r3, #4
 8000c80:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c82:	4bb2      	ldr	r3, [pc, #712]	; (8000f4c <MX_GPIO_Init+0x304>)
 8000c84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c86:	f003 0304 	and.w	r3, r3, #4
 8000c8a:	60fb      	str	r3, [r7, #12]
 8000c8c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c8e:	4baf      	ldr	r3, [pc, #700]	; (8000f4c <MX_GPIO_Init+0x304>)
 8000c90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c92:	4aae      	ldr	r2, [pc, #696]	; (8000f4c <MX_GPIO_Init+0x304>)
 8000c94:	f043 0301 	orr.w	r3, r3, #1
 8000c98:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c9a:	4bac      	ldr	r3, [pc, #688]	; (8000f4c <MX_GPIO_Init+0x304>)
 8000c9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c9e:	f003 0301 	and.w	r3, r3, #1
 8000ca2:	60bb      	str	r3, [r7, #8]
 8000ca4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ca6:	4ba9      	ldr	r3, [pc, #676]	; (8000f4c <MX_GPIO_Init+0x304>)
 8000ca8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000caa:	4aa8      	ldr	r2, [pc, #672]	; (8000f4c <MX_GPIO_Init+0x304>)
 8000cac:	f043 0302 	orr.w	r3, r3, #2
 8000cb0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cb2:	4ba6      	ldr	r3, [pc, #664]	; (8000f4c <MX_GPIO_Init+0x304>)
 8000cb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cb6:	f003 0302 	and.w	r3, r3, #2
 8000cba:	607b      	str	r3, [r7, #4]
 8000cbc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cbe:	4ba3      	ldr	r3, [pc, #652]	; (8000f4c <MX_GPIO_Init+0x304>)
 8000cc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cc2:	4aa2      	ldr	r2, [pc, #648]	; (8000f4c <MX_GPIO_Init+0x304>)
 8000cc4:	f043 0308 	orr.w	r3, r3, #8
 8000cc8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cca:	4ba0      	ldr	r3, [pc, #640]	; (8000f4c <MX_GPIO_Init+0x304>)
 8000ccc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cce:	f003 0308 	and.w	r3, r3, #8
 8000cd2:	603b      	str	r3, [r7, #0]
 8000cd4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	f44f 718a 	mov.w	r1, #276	; 0x114
 8000cdc:	489c      	ldr	r0, [pc, #624]	; (8000f50 <MX_GPIO_Init+0x308>)
 8000cde:	f002 fafd 	bl	80032dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|LED1_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	f248 1124 	movw	r1, #33060	; 0x8124
 8000ce8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cec:	f002 faf6 	bl	80032dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	f24f 0114 	movw	r1, #61460	; 0xf014
 8000cf6:	4897      	ldr	r0, [pc, #604]	; (8000f54 <MX_GPIO_Init+0x30c>)
 8000cf8:	f002 faf0 	bl	80032dc <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	f241 0181 	movw	r1, #4225	; 0x1081
 8000d02:	4895      	ldr	r0, [pc, #596]	; (8000f58 <MX_GPIO_Init+0x310>)
 8000d04:	f002 faea 	bl	80032dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000d08:	2201      	movs	r2, #1
 8000d0a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d0e:	4892      	ldr	r0, [pc, #584]	; (8000f58 <MX_GPIO_Init+0x310>)
 8000d10:	f002 fae4 	bl	80032dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8000d14:	2200      	movs	r2, #0
 8000d16:	f44f 7110 	mov.w	r1, #576	; 0x240
 8000d1a:	4890      	ldr	r0, [pc, #576]	; (8000f5c <MX_GPIO_Init+0x314>)
 8000d1c:	f002 fade 	bl	80032dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000d20:	2201      	movs	r2, #1
 8000d22:	2101      	movs	r1, #1
 8000d24:	488a      	ldr	r0, [pc, #552]	; (8000f50 <MX_GPIO_Init+0x308>)
 8000d26:	f002 fad9 	bl	80032dc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8000d2a:	f240 1315 	movw	r3, #277	; 0x115
 8000d2e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d30:	2301      	movs	r3, #1
 8000d32:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d34:	2300      	movs	r3, #0
 8000d36:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d3c:	f107 0314 	add.w	r3, r7, #20
 8000d40:	4619      	mov	r1, r3
 8000d42:	4883      	ldr	r0, [pc, #524]	; (8000f50 <MX_GPIO_Init+0x308>)
 8000d44:	f002 f814 	bl	8002d70 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 8000d48:	236a      	movs	r3, #106	; 0x6a
 8000d4a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d4c:	4b84      	ldr	r3, [pc, #528]	; (8000f60 <MX_GPIO_Init+0x318>)
 8000d4e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d50:	2300      	movs	r3, #0
 8000d52:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d54:	f107 0314 	add.w	r3, r7, #20
 8000d58:	4619      	mov	r1, r3
 8000d5a:	487d      	ldr	r0, [pc, #500]	; (8000f50 <MX_GPIO_Init+0x308>)
 8000d5c:	f002 f808 	bl	8002d70 <HAL_GPIO_Init>

  /*Configure GPIO pins : BOTON_Pin VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = BOTON_Pin|VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8000d60:	f44f 5306 	mov.w	r3, #8576	; 0x2180
 8000d64:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d66:	4b7e      	ldr	r3, [pc, #504]	; (8000f60 <MX_GPIO_Init+0x318>)
 8000d68:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d6e:	f107 0314 	add.w	r3, r7, #20
 8000d72:	4619      	mov	r1, r3
 8000d74:	4879      	ldr	r0, [pc, #484]	; (8000f5c <MX_GPIO_Init+0x314>)
 8000d76:	f001 fffb 	bl	8002d70 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 8000d7a:	233f      	movs	r3, #63	; 0x3f
 8000d7c:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000d7e:	230b      	movs	r3, #11
 8000d80:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d82:	2300      	movs	r3, #0
 8000d84:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d86:	f107 0314 	add.w	r3, r7, #20
 8000d8a:	4619      	mov	r1, r3
 8000d8c:	4873      	ldr	r0, [pc, #460]	; (8000f5c <MX_GPIO_Init+0x314>)
 8000d8e:	f001 ffef 	bl	8002d70 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8000d92:	2303      	movs	r3, #3
 8000d94:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d96:	2302      	movs	r3, #2
 8000d98:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d9e:	2303      	movs	r3, #3
 8000da0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000da2:	2308      	movs	r3, #8
 8000da4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000da6:	f107 0314 	add.w	r3, r7, #20
 8000daa:	4619      	mov	r1, r3
 8000dac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000db0:	f001 ffde 	bl	8002d70 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin LED1_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|LED1_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 8000db4:	f248 1324 	movw	r3, #33060	; 0x8124
 8000db8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dba:	2301      	movs	r3, #1
 8000dbc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dc6:	f107 0314 	add.w	r3, r7, #20
 8000dca:	4619      	mov	r1, r3
 8000dcc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dd0:	f001 ffce 	bl	8002d70 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 8000dd4:	2308      	movs	r3, #8
 8000dd6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dd8:	2302      	movs	r3, #2
 8000dda:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000de0:	2300      	movs	r3, #0
 8000de2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000de4:	2301      	movs	r3, #1
 8000de6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 8000de8:	f107 0314 	add.w	r3, r7, #20
 8000dec:	4619      	mov	r1, r3
 8000dee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000df2:	f001 ffbd 	bl	8002d70 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D7_Pin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 8000df6:	2310      	movs	r3, #16
 8000df8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000dfa:	230b      	movs	r3, #11
 8000dfc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 8000e02:	f107 0314 	add.w	r3, r7, #20
 8000e06:	4619      	mov	r1, r3
 8000e08:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e0c:	f001 ffb0 	bl	8002d70 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D12_Pin|ARD_D11_Pin;
 8000e10:	23c0      	movs	r3, #192	; 0xc0
 8000e12:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e14:	2302      	movs	r3, #2
 8000e16:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e1c:	2303      	movs	r3, #3
 8000e1e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000e20:	2305      	movs	r3, #5
 8000e22:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e24:	f107 0314 	add.w	r3, r7, #20
 8000e28:	4619      	mov	r1, r3
 8000e2a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e2e:	f001 ff9f 	bl	8002d70 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8000e32:	2301      	movs	r3, #1
 8000e34:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e36:	4b4a      	ldr	r3, [pc, #296]	; (8000f60 <MX_GPIO_Init+0x318>)
 8000e38:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8000e3e:	f107 0314 	add.w	r3, r7, #20
 8000e42:	4619      	mov	r1, r3
 8000e44:	4843      	ldr	r0, [pc, #268]	; (8000f54 <MX_GPIO_Init+0x30c>)
 8000e46:	f001 ff93 	bl	8002d70 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8000e4a:	2302      	movs	r3, #2
 8000e4c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000e4e:	230b      	movs	r3, #11
 8000e50:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e52:	2300      	movs	r3, #0
 8000e54:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8000e56:	f107 0314 	add.w	r3, r7, #20
 8000e5a:	4619      	mov	r1, r3
 8000e5c:	483d      	ldr	r0, [pc, #244]	; (8000f54 <MX_GPIO_Init+0x30c>)
 8000e5e:	f001 ff87 	bl	8002d70 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000e62:	f24f 0314 	movw	r3, #61460	; 0xf014
 8000e66:	617b      	str	r3, [r7, #20]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e68:	2301      	movs	r3, #1
 8000e6a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e70:	2300      	movs	r3, #0
 8000e72:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e74:	f107 0314 	add.w	r3, r7, #20
 8000e78:	4619      	mov	r1, r3
 8000e7a:	4836      	ldr	r0, [pc, #216]	; (8000f54 <MX_GPIO_Init+0x30c>)
 8000e7c:	f001 ff78 	bl	8002d70 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 8000e80:	f64c 4304 	movw	r3, #52228	; 0xcc04
 8000e84:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e86:	4b36      	ldr	r3, [pc, #216]	; (8000f60 <MX_GPIO_Init+0x318>)
 8000e88:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e8e:	f107 0314 	add.w	r3, r7, #20
 8000e92:	4619      	mov	r1, r3
 8000e94:	4830      	ldr	r0, [pc, #192]	; (8000f58 <MX_GPIO_Init+0x310>)
 8000e96:	f001 ff6b 	bl	8002d70 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 8000e9a:	f243 0381 	movw	r3, #12417	; 0x3081
 8000e9e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ea0:	2301      	movs	r3, #1
 8000ea2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000eac:	f107 0314 	add.w	r3, r7, #20
 8000eb0:	4619      	mov	r1, r3
 8000eb2:	4829      	ldr	r0, [pc, #164]	; (8000f58 <MX_GPIO_Init+0x310>)
 8000eb4:	f001 ff5c 	bl	8002d70 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8000eb8:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000ebc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000eca:	f107 0314 	add.w	r3, r7, #20
 8000ece:	4619      	mov	r1, r3
 8000ed0:	4822      	ldr	r0, [pc, #136]	; (8000f5c <MX_GPIO_Init+0x314>)
 8000ed2:	f001 ff4d 	bl	8002d70 <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 8000ed6:	2302      	movs	r3, #2
 8000ed8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eda:	2302      	movs	r3, #2
 8000edc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ee2:	2303      	movs	r3, #3
 8000ee4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000ee6:	2305      	movs	r3, #5
 8000ee8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8000eea:	f107 0314 	add.w	r3, r7, #20
 8000eee:	4619      	mov	r1, r3
 8000ef0:	4819      	ldr	r0, [pc, #100]	; (8000f58 <MX_GPIO_Init+0x310>)
 8000ef2:	f001 ff3d 	bl	8002d70 <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8000ef6:	2378      	movs	r3, #120	; 0x78
 8000ef8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000efa:	2302      	movs	r3, #2
 8000efc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000efe:	2300      	movs	r3, #0
 8000f00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f02:	2303      	movs	r3, #3
 8000f04:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f06:	2307      	movs	r3, #7
 8000f08:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f0a:	f107 0314 	add.w	r3, r7, #20
 8000f0e:	4619      	mov	r1, r3
 8000f10:	4811      	ldr	r0, [pc, #68]	; (8000f58 <MX_GPIO_Init+0x310>)
 8000f12:	f001 ff2d 	bl	8002d70 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8000f16:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000f1a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f1c:	2312      	movs	r3, #18
 8000f1e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f20:	2300      	movs	r3, #0
 8000f22:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f24:	2303      	movs	r3, #3
 8000f26:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000f28:	2304      	movs	r3, #4
 8000f2a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f2c:	f107 0314 	add.w	r3, r7, #20
 8000f30:	4619      	mov	r1, r3
 8000f32:	4808      	ldr	r0, [pc, #32]	; (8000f54 <MX_GPIO_Init+0x30c>)
 8000f34:	f001 ff1c 	bl	8002d70 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 8000f38:	2200      	movs	r2, #0
 8000f3a:	2105      	movs	r1, #5
 8000f3c:	2007      	movs	r0, #7
 8000f3e:	f001 fd53 	bl	80029e8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000f42:	2007      	movs	r0, #7
 8000f44:	f001 fd6c 	bl	8002a20 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8000f48:	2200      	movs	r2, #0
 8000f4a:	e00b      	b.n	8000f64 <MX_GPIO_Init+0x31c>
 8000f4c:	40021000 	.word	0x40021000
 8000f50:	48001000 	.word	0x48001000
 8000f54:	48000400 	.word	0x48000400
 8000f58:	48000c00 	.word	0x48000c00
 8000f5c:	48000800 	.word	0x48000800
 8000f60:	10110000 	.word	0x10110000
 8000f64:	2105      	movs	r1, #5
 8000f66:	2017      	movs	r0, #23
 8000f68:	f001 fd3e 	bl	80029e8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000f6c:	2017      	movs	r0, #23
 8000f6e:	f001 fd57 	bl	8002a20 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000f72:	2200      	movs	r2, #0
 8000f74:	2105      	movs	r1, #5
 8000f76:	2028      	movs	r0, #40	; 0x28
 8000f78:	f001 fd36 	bl	80029e8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000f7c:	2028      	movs	r0, #40	; 0x28
 8000f7e:	f001 fd4f 	bl	8002a20 <HAL_NVIC_EnableIRQ>

}
 8000f82:	bf00      	nop
 8000f84:	3728      	adds	r7, #40	; 0x28
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop

08000f8c <_write>:

/* USER CODE BEGIN 4 */

int _write(int file, char *ptr, int len)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b086      	sub	sp, #24
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	60f8      	str	r0, [r7, #12]
 8000f94:	60b9      	str	r1, [r7, #8]
 8000f96:	607a      	str	r2, [r7, #4]
	int DataIdx;
	for(DataIdx=0; DataIdx<len; DataIdx++)
 8000f98:	2300      	movs	r3, #0
 8000f9a:	617b      	str	r3, [r7, #20]
 8000f9c:	e009      	b.n	8000fb2 <_write+0x26>
	{
		ITM_SendChar(*ptr++);
 8000f9e:	68bb      	ldr	r3, [r7, #8]
 8000fa0:	1c5a      	adds	r2, r3, #1
 8000fa2:	60ba      	str	r2, [r7, #8]
 8000fa4:	781b      	ldrb	r3, [r3, #0]
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f7ff faec 	bl	8000584 <ITM_SendChar>
	for(DataIdx=0; DataIdx<len; DataIdx++)
 8000fac:	697b      	ldr	r3, [r7, #20]
 8000fae:	3301      	adds	r3, #1
 8000fb0:	617b      	str	r3, [r7, #20]
 8000fb2:	697a      	ldr	r2, [r7, #20]
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	429a      	cmp	r2, r3
 8000fb8:	dbf1      	blt.n	8000f9e <_write+0x12>
	}
	return len;
 8000fba:	687b      	ldr	r3, [r7, #4]
}
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	3718      	adds	r7, #24
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}

08000fc4 <BSP_ACCELERO_Init_INT>:

ACCELERO_StatusTypeDef BSP_ACCELERO_Init_INT(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b082      	sub	sp, #8
 8000fc8:	af00      	add	r7, sp, #0
	ACCELERO_StatusTypeDef ret;
	ret = BSP_ACCELERO_Init();
 8000fca:	f008 fb4d 	bl	8009668 <BSP_ACCELERO_Init>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	71fb      	strb	r3, [r7, #7]
	if (ret == ACCELERO_OK)
 8000fd2:	79fb      	ldrb	r3, [r7, #7]
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d12f      	bne.n	8001038 <BSP_ACCELERO_Init_INT+0x74>
	{
		/* Initialize interruption*/
		uint8_t tmp;
		tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_DRDY_PULSE_CFG_G);
 8000fd8:	210b      	movs	r1, #11
 8000fda:	20d4      	movs	r0, #212	; 0xd4
 8000fdc:	f008 fb08 	bl	80095f0 <SENSOR_IO_Read>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	71bb      	strb	r3, [r7, #6]
		tmp |=0b10000000;
 8000fe4:	79bb      	ldrb	r3, [r7, #6]
 8000fe6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000fea:	71bb      	strb	r3, [r7, #6]
		SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_DRDY_PULSE_CFG_G, tmp);
 8000fec:	79bb      	ldrb	r3, [r7, #6]
 8000fee:	461a      	mov	r2, r3
 8000ff0:	210b      	movs	r1, #11
 8000ff2:	20d4      	movs	r0, #212	; 0xd4
 8000ff4:	f008 fae2 	bl	80095bc <SENSOR_IO_Write>
		tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_INT1_CTRL);
 8000ff8:	210d      	movs	r1, #13
 8000ffa:	20d4      	movs	r0, #212	; 0xd4
 8000ffc:	f008 faf8 	bl	80095f0 <SENSOR_IO_Read>
 8001000:	4603      	mov	r3, r0
 8001002:	71bb      	strb	r3, [r7, #6]
		tmp |=0b00000001;
 8001004:	79bb      	ldrb	r3, [r7, #6]
 8001006:	f043 0301 	orr.w	r3, r3, #1
 800100a:	71bb      	strb	r3, [r7, #6]
		SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_INT1_CTRL, tmp);
 800100c:	79bb      	ldrb	r3, [r7, #6]
 800100e:	461a      	mov	r2, r3
 8001010:	210d      	movs	r1, #13
 8001012:	20d4      	movs	r0, #212	; 0xd4
 8001014:	f008 fad2 	bl	80095bc <SENSOR_IO_Write>
		tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_MASTER_CONFIG);
 8001018:	211a      	movs	r1, #26
 800101a:	20d4      	movs	r0, #212	; 0xd4
 800101c:	f008 fae8 	bl	80095f0 <SENSOR_IO_Read>
 8001020:	4603      	mov	r3, r0
 8001022:	71bb      	strb	r3, [r7, #6]
		tmp |=0b10000000;
 8001024:	79bb      	ldrb	r3, [r7, #6]
 8001026:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800102a:	71bb      	strb	r3, [r7, #6]
		SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_MASTER_CONFIG, tmp);
 800102c:	79bb      	ldrb	r3, [r7, #6]
 800102e:	461a      	mov	r2, r3
 8001030:	211a      	movs	r1, #26
 8001032:	20d4      	movs	r0, #212	; 0xd4
 8001034:	f008 fac2 	bl	80095bc <SENSOR_IO_Write>
	}
	return ret;
 8001038:	79fb      	ldrb	r3, [r7, #7]
}
 800103a:	4618      	mov	r0, r3
 800103c:	3708      	adds	r7, #8
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}
	...

08001044 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b082      	sub	sp, #8
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]

	static osStatus_t estado;
	if (huart == &huart1)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	4a0c      	ldr	r2, [pc, #48]	; (8001080 <HAL_UART_RxCpltCallback+0x3c>)
 8001050:	4293      	cmp	r3, r2
 8001052:	d110      	bne.n	8001076 <HAL_UART_RxCpltCallback+0x32>
	{
		HAL_UART_Receive_IT(&huart1,&rec_data,1);
 8001054:	2201      	movs	r2, #1
 8001056:	490b      	ldr	r1, [pc, #44]	; (8001084 <HAL_UART_RxCpltCallback+0x40>)
 8001058:	4809      	ldr	r0, [pc, #36]	; (8001080 <HAL_UART_RxCpltCallback+0x3c>)
 800105a:	f006 fefb 	bl	8007e54 <HAL_UART_Receive_IT>
		printf("Recibido: %d\r\n",rec_data);
 800105e:	4b09      	ldr	r3, [pc, #36]	; (8001084 <HAL_UART_RxCpltCallback+0x40>)
 8001060:	781b      	ldrb	r3, [r3, #0]
 8001062:	4619      	mov	r1, r3
 8001064:	4808      	ldr	r0, [pc, #32]	; (8001088 <HAL_UART_RxCpltCallback+0x44>)
 8001066:	f011 fcdf 	bl	8012a28 <iprintf>
		osThreadFlagsSet(tarea_UARTHandle,0x0002U);
 800106a:	4b08      	ldr	r3, [pc, #32]	; (800108c <HAL_UART_RxCpltCallback+0x48>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	2102      	movs	r1, #2
 8001070:	4618      	mov	r0, r3
 8001072:	f00d fcf1 	bl	800ea58 <osThreadFlagsSet>
			printf("Estado: ok\r\n");
		else
			printf("Algo no va bien\r\n");
			*/
	}
}
 8001076:	bf00      	nop
 8001078:	3708      	adds	r7, #8
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	20000270 	.word	0x20000270
 8001084:	200007cc 	.word	0x200007cc
 8001088:	080138ac 	.word	0x080138ac
 800108c:	2000078c 	.word	0x2000078c

08001090 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b082      	sub	sp, #8
 8001094:	af00      	add	r7, sp, #0
 8001096:	4603      	mov	r3, r0
 8001098:	80fb      	strh	r3, [r7, #6]
	switch (GPIO_Pin)
 800109a:	88fb      	ldrh	r3, [r7, #6]
 800109c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80010a0:	d00e      	beq.n	80010c0 <HAL_GPIO_EXTI_Callback+0x30>
 80010a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80010a6:	dc18      	bgt.n	80010da <HAL_GPIO_EXTI_Callback+0x4a>
 80010a8:	2b02      	cmp	r3, #2
 80010aa:	d013      	beq.n	80010d4 <HAL_GPIO_EXTI_Callback+0x44>
 80010ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80010b0:	d113      	bne.n	80010da <HAL_GPIO_EXTI_Callback+0x4a>
	{
		case (LSM6DSL_INT1_EXTI11_Pin):
		{
			osThreadFlagsSet(readAccelHandle,0x0001U);
 80010b2:	4b0c      	ldr	r3, [pc, #48]	; (80010e4 <HAL_GPIO_EXTI_Callback+0x54>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	2101      	movs	r1, #1
 80010b8:	4618      	mov	r0, r3
 80010ba:	f00d fccd 	bl	800ea58 <osThreadFlagsSet>
			break;
 80010be:	e00d      	b.n	80010dc <HAL_GPIO_EXTI_Callback+0x4c>
		}
		case(BOTON_Pin):
		{
			printf("Ha pulsado el boton\r\n");
 80010c0:	4809      	ldr	r0, [pc, #36]	; (80010e8 <HAL_GPIO_EXTI_Callback+0x58>)
 80010c2:	f011 fd37 	bl	8012b34 <puts>
			osThreadFlagsSet(readAccelHandle,0x0002U);
 80010c6:	4b07      	ldr	r3, [pc, #28]	; (80010e4 <HAL_GPIO_EXTI_Callback+0x54>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	2102      	movs	r1, #2
 80010cc:	4618      	mov	r0, r3
 80010ce:	f00d fcc3 	bl	800ea58 <osThreadFlagsSet>
			break;
 80010d2:	e003      	b.n	80010dc <HAL_GPIO_EXTI_Callback+0x4c>
		}
		case (GPIO_PIN_1):
		{
			SPI_WIFI_ISR();
 80010d4:	f009 ff34 	bl	800af40 <SPI_WIFI_ISR>
			break;
 80010d8:	e000      	b.n	80010dc <HAL_GPIO_EXTI_Callback+0x4c>
		}
		default:
		{
		  break;
 80010da:	bf00      	nop
		}
	}
}
 80010dc:	bf00      	nop
 80010de:	3708      	adds	r7, #8
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}
 80010e4:	20000784 	.word	0x20000784
 80010e8:	080138bc 	.word	0x080138bc

080010ec <wifi_start>:

static int wifi_start(void)
{
 80010ec:	b5b0      	push	{r4, r5, r7, lr}
 80010ee:	b086      	sub	sp, #24
 80010f0:	af04      	add	r7, sp, #16
  uint8_t  MAC_Addr[6];
  printf("wifistart\r\n");
 80010f2:	481d      	ldr	r0, [pc, #116]	; (8001168 <wifi_start+0x7c>)
 80010f4:	f011 fd1e 	bl	8012b34 <puts>
 /*Initialize and use WIFI module */
  if(WIFI_Init() ==  WIFI_STATUS_OK)
 80010f8:	f009 ff32 	bl	800af60 <WIFI_Init>
 80010fc:	4603      	mov	r3, r0
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d129      	bne.n	8001156 <wifi_start+0x6a>
  {
	printf("xddddddd\r\n");
 8001102:	481a      	ldr	r0, [pc, #104]	; (800116c <wifi_start+0x80>)
 8001104:	f011 fd16 	bl	8012b34 <puts>
    printf(("ES-WIFI Initialized.\r\n"));
 8001108:	4819      	ldr	r0, [pc, #100]	; (8001170 <wifi_start+0x84>)
 800110a:	f011 fd13 	bl	8012b34 <puts>
    if(WIFI_GetMAC_Address(MAC_Addr) == WIFI_STATUS_OK)
 800110e:	463b      	mov	r3, r7
 8001110:	4618      	mov	r0, r3
 8001112:	f009 ff73 	bl	800affc <WIFI_GetMAC_Address>
 8001116:	4603      	mov	r3, r0
 8001118:	2b00      	cmp	r3, #0
 800111a:	d116      	bne.n	800114a <wifi_start+0x5e>
    {
      printf("MAC asignada\r\n");
 800111c:	4815      	ldr	r0, [pc, #84]	; (8001174 <wifi_start+0x88>)
 800111e:	f011 fd09 	bl	8012b34 <puts>
      printf("> eS-WiFi module MAC Address : %02X:%02X:%02X:%02X:%02X:%02X\r\n",
               MAC_Addr[0],
 8001122:	783b      	ldrb	r3, [r7, #0]
      printf("> eS-WiFi module MAC Address : %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 8001124:	4618      	mov	r0, r3
               MAC_Addr[1],
 8001126:	787b      	ldrb	r3, [r7, #1]
      printf("> eS-WiFi module MAC Address : %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 8001128:	461c      	mov	r4, r3
               MAC_Addr[2],
 800112a:	78bb      	ldrb	r3, [r7, #2]
      printf("> eS-WiFi module MAC Address : %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800112c:	461d      	mov	r5, r3
               MAC_Addr[3],
 800112e:	78fb      	ldrb	r3, [r7, #3]
               MAC_Addr[4],
 8001130:	793a      	ldrb	r2, [r7, #4]
               MAC_Addr[5]);
 8001132:	7979      	ldrb	r1, [r7, #5]
      printf("> eS-WiFi module MAC Address : %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 8001134:	9102      	str	r1, [sp, #8]
 8001136:	9201      	str	r2, [sp, #4]
 8001138:	9300      	str	r3, [sp, #0]
 800113a:	462b      	mov	r3, r5
 800113c:	4622      	mov	r2, r4
 800113e:	4601      	mov	r1, r0
 8001140:	480d      	ldr	r0, [pc, #52]	; (8001178 <wifi_start+0x8c>)
 8001142:	f011 fc71 	bl	8012a28 <iprintf>
  else
  {
	printf("Errorfifi\r\n");
    return -1;
  }
  return 0;
 8001146:	2300      	movs	r3, #0
 8001148:	e00a      	b.n	8001160 <wifi_start+0x74>
      printf("> ERROR : CANNOT get MAC address\r\n");
 800114a:	480c      	ldr	r0, [pc, #48]	; (800117c <wifi_start+0x90>)
 800114c:	f011 fcf2 	bl	8012b34 <puts>
      return -1;
 8001150:	f04f 33ff 	mov.w	r3, #4294967295
 8001154:	e004      	b.n	8001160 <wifi_start+0x74>
	printf("Errorfifi\r\n");
 8001156:	480a      	ldr	r0, [pc, #40]	; (8001180 <wifi_start+0x94>)
 8001158:	f011 fcec 	bl	8012b34 <puts>
    return -1;
 800115c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001160:	4618      	mov	r0, r3
 8001162:	3708      	adds	r7, #8
 8001164:	46bd      	mov	sp, r7
 8001166:	bdb0      	pop	{r4, r5, r7, pc}
 8001168:	080138d4 	.word	0x080138d4
 800116c:	080138e0 	.word	0x080138e0
 8001170:	080138ec 	.word	0x080138ec
 8001174:	08013904 	.word	0x08013904
 8001178:	08013914 	.word	0x08013914
 800117c:	08013954 	.word	0x08013954
 8001180:	08013978 	.word	0x08013978

08001184 <wifi_connect>:

int wifi_connect(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b082      	sub	sp, #8
 8001188:	af02      	add	r7, sp, #8

  wifi_start();
 800118a:	f7ff ffaf 	bl	80010ec <wifi_start>

  printf("Connecting to %s\r\n",SSID);
 800118e:	4919      	ldr	r1, [pc, #100]	; (80011f4 <wifi_connect+0x70>)
 8001190:	4819      	ldr	r0, [pc, #100]	; (80011f8 <wifi_connect+0x74>)
 8001192:	f011 fc49 	bl	8012a28 <iprintf>
  if( WIFI_Connect(SSID, PASSWORD, WIFISECURITY) == WIFI_STATUS_OK)
 8001196:	2200      	movs	r2, #0
 8001198:	4918      	ldr	r1, [pc, #96]	; (80011fc <wifi_connect+0x78>)
 800119a:	4816      	ldr	r0, [pc, #88]	; (80011f4 <wifi_connect+0x70>)
 800119c:	f009 ff0c 	bl	800afb8 <WIFI_Connect>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d11d      	bne.n	80011e2 <wifi_connect+0x5e>
  {
    if(WIFI_GetIP_Address(IP_Addr) == WIFI_STATUS_OK)
 80011a6:	4816      	ldr	r0, [pc, #88]	; (8001200 <wifi_connect+0x7c>)
 80011a8:	f009 ff3e 	bl	800b028 <WIFI_GetIP_Address>
 80011ac:	4603      	mov	r3, r0
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d111      	bne.n	80011d6 <wifi_connect+0x52>
    {
      printf("> es-wifi module connected: got IP Address : %d.%d.%d.%d\r\n",
               IP_Addr[0],
 80011b2:	4b13      	ldr	r3, [pc, #76]	; (8001200 <wifi_connect+0x7c>)
 80011b4:	781b      	ldrb	r3, [r3, #0]
      printf("> es-wifi module connected: got IP Address : %d.%d.%d.%d\r\n",
 80011b6:	4619      	mov	r1, r3
               IP_Addr[1],
 80011b8:	4b11      	ldr	r3, [pc, #68]	; (8001200 <wifi_connect+0x7c>)
 80011ba:	785b      	ldrb	r3, [r3, #1]
      printf("> es-wifi module connected: got IP Address : %d.%d.%d.%d\r\n",
 80011bc:	461a      	mov	r2, r3
               IP_Addr[2],
 80011be:	4b10      	ldr	r3, [pc, #64]	; (8001200 <wifi_connect+0x7c>)
 80011c0:	789b      	ldrb	r3, [r3, #2]
      printf("> es-wifi module connected: got IP Address : %d.%d.%d.%d\r\n",
 80011c2:	4618      	mov	r0, r3
               IP_Addr[3]);
 80011c4:	4b0e      	ldr	r3, [pc, #56]	; (8001200 <wifi_connect+0x7c>)
 80011c6:	78db      	ldrb	r3, [r3, #3]
      printf("> es-wifi module connected: got IP Address : %d.%d.%d.%d\r\n",
 80011c8:	9300      	str	r3, [sp, #0]
 80011ca:	4603      	mov	r3, r0
 80011cc:	480d      	ldr	r0, [pc, #52]	; (8001204 <wifi_connect+0x80>)
 80011ce:	f011 fc2b 	bl	8012a28 <iprintf>
  else
  {
		 printf("ERROR : es-wifi module NOT connected\n");
     return -1;
  }
  return 0;
 80011d2:	2300      	movs	r3, #0
 80011d4:	e00a      	b.n	80011ec <wifi_connect+0x68>
		  printf(" ERROR : es-wifi module CANNOT get IP address\r\n");
 80011d6:	480c      	ldr	r0, [pc, #48]	; (8001208 <wifi_connect+0x84>)
 80011d8:	f011 fcac 	bl	8012b34 <puts>
      return -1;
 80011dc:	f04f 33ff 	mov.w	r3, #4294967295
 80011e0:	e004      	b.n	80011ec <wifi_connect+0x68>
		 printf("ERROR : es-wifi module NOT connected\n");
 80011e2:	480a      	ldr	r0, [pc, #40]	; (800120c <wifi_connect+0x88>)
 80011e4:	f011 fca6 	bl	8012b34 <puts>
     return -1;
 80011e8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80011ec:	4618      	mov	r0, r3
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	08013984 	.word	0x08013984
 80011f8:	08013994 	.word	0x08013994
 80011fc:	080139a8 	.word	0x080139a8
 8001200:	200007c4 	.word	0x200007c4
 8001204:	080139b4 	.word	0x080139b4
 8001208:	080139f0 	.word	0x080139f0
 800120c:	08013a20 	.word	0x08013a20

08001210 <SPI3_IRQHandler>:
  * @brief  SPI3 line detection callback.
  * @param  None
  * @retval None
  */
void SPI3_IRQHandler(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	af00      	add	r7, sp, #0
  HAL_SPI_IRQHandler(&hspi);
 8001214:	4802      	ldr	r0, [pc, #8]	; (8001220 <SPI3_IRQHandler+0x10>)
 8001216:	f005 fcbb 	bl	8006b90 <HAL_SPI_IRQHandler>
}
 800121a:	bf00      	nop
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	20000c90 	.word	0x20000c90

08001224 <RTC_set_func>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_RTC_set_func */
void RTC_set_func(void *argument)
{
 8001224:	b5b0      	push	{r4, r5, r7, lr}
 8001226:	b09e      	sub	sp, #120	; 0x78
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	uint8_t recibido[3];
	//uint32_t flag_rec;
	osStatus_t estado;
	uint32_t return_wait = 0U;
 800122c:	2300      	movs	r3, #0
 800122e:	66bb      	str	r3, [r7, #104]	; 0x68

	uint16_t num_usuario;
	uint8_t to_change[6];
	const char* msg_hora_ok = "\r\nHora cambiada correctamente\r\n";
 8001230:	4bae      	ldr	r3, [pc, #696]	; (80014ec <RTC_set_func+0x2c8>)
 8001232:	657b      	str	r3, [r7, #84]	; 0x54
	const char* msg_fecha_ok = "Fecha cambiada correctamente\r\n";
 8001234:	4bae      	ldr	r3, [pc, #696]	; (80014f0 <RTC_set_func+0x2cc>)
 8001236:	653b      	str	r3, [r7, #80]	; 0x50
	const char* msg_error = "\r\nERROR: Valor no válido\r\n";
 8001238:	4bae      	ldr	r3, [pc, #696]	; (80014f4 <RTC_set_func+0x2d0>)
 800123a:	64fb      	str	r3, [r7, #76]	; 0x4c
	const char* msg_rtc1 = "\r\n\r\n========================\r\n"
 800123c:	4bae      	ldr	r3, [pc, #696]	; (80014f8 <RTC_set_func+0x2d4>)
 800123e:	64bb      	str	r3, [r7, #72]	; 0x48
	"| Configurar rtc |\r\n"
	"========================\r\n\r\n";
	const char* msg[6] = {
 8001240:	4bae      	ldr	r3, [pc, #696]	; (80014fc <RTC_set_func+0x2d8>)
 8001242:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8001246:	461d      	mov	r5, r3
 8001248:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800124a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800124c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001250:	e884 0003 	stmia.w	r4, {r0, r1}
	"Hora (0-23): ", "\r\nMinuto (0-59): ","\r\nSegundo (0-59): ","\r\nDía (1-31): ","\r\nMes (1-12): ",
	"\r\nAño (0-99): "};
	uint8_t limit[6][2] = {{0,23},{0,59},{0,59},{1,31},{1,12},{0,99}};
 8001254:	4aaa      	ldr	r2, [pc, #680]	; (8001500 <RTC_set_func+0x2dc>)
 8001256:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800125a:	ca07      	ldmia	r2, {r0, r1, r2}
 800125c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	//uint8_t *toChange[6] = {&GetTime.Hours, &GetTime.Minutes, &GetTime.Seconds, &GetDate.Date,&GetDate.Month, &GetDate.Year};

	printf("Empieza el bucle\r\n");
 8001260:	48a8      	ldr	r0, [pc, #672]	; (8001504 <RTC_set_func+0x2e0>)
 8001262:	f011 fc67 	bl	8012b34 <puts>
	estado = osMessageQueuePut(print_queueHandle, &msg_rtc1, 0, pdMS_TO_TICKS(500));
 8001266:	4ba8      	ldr	r3, [pc, #672]	; (8001508 <RTC_set_func+0x2e4>)
 8001268:	6818      	ldr	r0, [r3, #0]
 800126a:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800126e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001272:	2200      	movs	r2, #0
 8001274:	f00d fd4e 	bl	800ed14 <osMessageQueuePut>
 8001278:	6678      	str	r0, [r7, #100]	; 0x64
	int i,j = 0;
 800127a:	2300      	movs	r3, #0
 800127c:	66fb      	str	r3, [r7, #108]	; 0x6c
	for (i=0;i<6;){
 800127e:	2300      	movs	r3, #0
 8001280:	673b      	str	r3, [r7, #112]	; 0x70
 8001282:	e0d8      	b.n	8001436 <RTC_set_func+0x212>
		estado = osMessageQueuePut(print_queueHandle, &msg[i], 0, pdMS_TO_TICKS(500));
 8001284:	4ba0      	ldr	r3, [pc, #640]	; (8001508 <RTC_set_func+0x2e4>)
 8001286:	6818      	ldr	r0, [r3, #0]
 8001288:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800128c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800128e:	009b      	lsls	r3, r3, #2
 8001290:	18d1      	adds	r1, r2, r3
 8001292:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001296:	2200      	movs	r2, #0
 8001298:	f00d fd3c 	bl	800ed14 <osMessageQueuePut>
 800129c:	6678      	str	r0, [r7, #100]	; 0x64
		printf("Esperando a que ser reciba el dato\r\n");
 800129e:	489b      	ldr	r0, [pc, #620]	; (800150c <RTC_set_func+0x2e8>)
 80012a0:	f011 fc48 	bl	8012b34 <puts>

		for (j=0;j<3;j++){
 80012a4:	2300      	movs	r3, #0
 80012a6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80012a8:	e022      	b.n	80012f0 <RTC_set_func+0xcc>
			estado = osMessageQueueGet(receive_queueHandle, &recibido[j], NULL, osWaitForever);
 80012aa:	4b99      	ldr	r3, [pc, #612]	; (8001510 <RTC_set_func+0x2ec>)
 80012ac:	6818      	ldr	r0, [r3, #0]
 80012ae:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80012b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80012b4:	18d1      	adds	r1, r2, r3
 80012b6:	f04f 33ff 	mov.w	r3, #4294967295
 80012ba:	2200      	movs	r2, #0
 80012bc:	f00d fd8a 	bl	800edd4 <osMessageQueueGet>
 80012c0:	6678      	str	r0, [r7, #100]	; 0x64
			printf("De la cola: %c\r\n",recibido[j]);
 80012c2:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80012c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80012c8:	4413      	add	r3, r2
 80012ca:	781b      	ldrb	r3, [r3, #0]
 80012cc:	4619      	mov	r1, r3
 80012ce:	4891      	ldr	r0, [pc, #580]	; (8001514 <RTC_set_func+0x2f0>)
 80012d0:	f011 fbaa 	bl	8012a28 <iprintf>
			if(recibido[j]==13){
 80012d4:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80012d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80012da:	4413      	add	r3, r2
 80012dc:	781b      	ldrb	r3, [r3, #0]
 80012de:	2b0d      	cmp	r3, #13
 80012e0:	d103      	bne.n	80012ea <RTC_set_func+0xc6>
				printf("Ha pulsado intro\r\n");
 80012e2:	488d      	ldr	r0, [pc, #564]	; (8001518 <RTC_set_func+0x2f4>)
 80012e4:	f011 fc26 	bl	8012b34 <puts>
				break;
 80012e8:	e005      	b.n	80012f6 <RTC_set_func+0xd2>
		for (j=0;j<3;j++){
 80012ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80012ec:	3301      	adds	r3, #1
 80012ee:	66fb      	str	r3, [r7, #108]	; 0x6c
 80012f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80012f2:	2b02      	cmp	r3, #2
 80012f4:	ddd9      	ble.n	80012aa <RTC_set_func+0x86>
			}
		}
		printf("%d\r\n",j);
 80012f6:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80012f8:	4888      	ldr	r0, [pc, #544]	; (800151c <RTC_set_func+0x2f8>)
 80012fa:	f011 fb95 	bl	8012a28 <iprintf>
		switch(j){
 80012fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001300:	2b03      	cmp	r3, #3
 8001302:	d84a      	bhi.n	800139a <RTC_set_func+0x176>
 8001304:	a201      	add	r2, pc, #4	; (adr r2, 800130c <RTC_set_func+0xe8>)
 8001306:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800130a:	bf00      	nop
 800130c:	0800131d 	.word	0x0800131d
 8001310:	08001325 	.word	0x08001325
 8001314:	08001333 	.word	0x08001333
 8001318:	08001357 	.word	0x08001357
		case 0:
			num_usuario=0;
 800131c:	2300      	movs	r3, #0
 800131e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
			break;
 8001322:	e03a      	b.n	800139a <RTC_set_func+0x176>
		case 1:
			num_usuario = recibido[0]-48;
 8001324:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 8001328:	b29b      	uxth	r3, r3
 800132a:	3b30      	subs	r3, #48	; 0x30
 800132c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
			//i++;
			break;
 8001330:	e033      	b.n	800139a <RTC_set_func+0x176>
		case 2:
			num_usuario = 10*(recibido[0]-48)+recibido[1]-48;
 8001332:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 8001336:	3b30      	subs	r3, #48	; 0x30
 8001338:	b29b      	uxth	r3, r3
 800133a:	461a      	mov	r2, r3
 800133c:	0092      	lsls	r2, r2, #2
 800133e:	4413      	add	r3, r2
 8001340:	005b      	lsls	r3, r3, #1
 8001342:	b29a      	uxth	r2, r3
 8001344:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
 8001348:	b29b      	uxth	r3, r3
 800134a:	4413      	add	r3, r2
 800134c:	b29b      	uxth	r3, r3
 800134e:	3b30      	subs	r3, #48	; 0x30
 8001350:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
			//i++;
			break;
 8001354:	e021      	b.n	800139a <RTC_set_func+0x176>
		case 3:
			num_usuario = 100*(recibido[0]-48)+10*(recibido[1]-48)+recibido[2]-48;
 8001356:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 800135a:	3b30      	subs	r3, #48	; 0x30
 800135c:	b29b      	uxth	r3, r3
 800135e:	461a      	mov	r2, r3
 8001360:	0092      	lsls	r2, r2, #2
 8001362:	4413      	add	r3, r2
 8001364:	461a      	mov	r2, r3
 8001366:	0091      	lsls	r1, r2, #2
 8001368:	461a      	mov	r2, r3
 800136a:	460b      	mov	r3, r1
 800136c:	4413      	add	r3, r2
 800136e:	009b      	lsls	r3, r3, #2
 8001370:	b29a      	uxth	r2, r3
 8001372:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
 8001376:	3b30      	subs	r3, #48	; 0x30
 8001378:	b29b      	uxth	r3, r3
 800137a:	4619      	mov	r1, r3
 800137c:	0089      	lsls	r1, r1, #2
 800137e:	440b      	add	r3, r1
 8001380:	005b      	lsls	r3, r3, #1
 8001382:	b29b      	uxth	r3, r3
 8001384:	4413      	add	r3, r2
 8001386:	b29a      	uxth	r2, r3
 8001388:	f897 3062 	ldrb.w	r3, [r7, #98]	; 0x62
 800138c:	b29b      	uxth	r3, r3
 800138e:	4413      	add	r3, r2
 8001390:	b29b      	uxth	r3, r3
 8001392:	3b30      	subs	r3, #48	; 0x30
 8001394:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
			break;
 8001398:	bf00      	nop
		}
		printf("Numero: %d\r\n",num_usuario);
 800139a:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 800139e:	4619      	mov	r1, r3
 80013a0:	485f      	ldr	r0, [pc, #380]	; (8001520 <RTC_set_func+0x2fc>)
 80013a2:	f011 fb41 	bl	8012a28 <iprintf>
		printf("Rango: %d-%d\r\n",limit[i][0],limit[i][1]);
 80013a6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80013a8:	005b      	lsls	r3, r3, #1
 80013aa:	3378      	adds	r3, #120	; 0x78
 80013ac:	443b      	add	r3, r7
 80013ae:	f813 3c54 	ldrb.w	r3, [r3, #-84]
 80013b2:	4619      	mov	r1, r3
 80013b4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80013b6:	005b      	lsls	r3, r3, #1
 80013b8:	3378      	adds	r3, #120	; 0x78
 80013ba:	443b      	add	r3, r7
 80013bc:	f813 3c53 	ldrb.w	r3, [r3, #-83]
 80013c0:	461a      	mov	r2, r3
 80013c2:	4858      	ldr	r0, [pc, #352]	; (8001524 <RTC_set_func+0x300>)
 80013c4:	f011 fb30 	bl	8012a28 <iprintf>
		if (num_usuario<limit[i][0] || num_usuario>limit[i][1]){
 80013c8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80013ca:	005b      	lsls	r3, r3, #1
 80013cc:	3378      	adds	r3, #120	; 0x78
 80013ce:	443b      	add	r3, r7
 80013d0:	f813 3c54 	ldrb.w	r3, [r3, #-84]
 80013d4:	b29b      	uxth	r3, r3
 80013d6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80013da:	429a      	cmp	r2, r3
 80013dc:	d30a      	bcc.n	80013f4 <RTC_set_func+0x1d0>
 80013de:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80013e0:	005b      	lsls	r3, r3, #1
 80013e2:	3378      	adds	r3, #120	; 0x78
 80013e4:	443b      	add	r3, r7
 80013e6:	f813 3c53 	ldrb.w	r3, [r3, #-83]
 80013ea:	b29b      	uxth	r3, r3
 80013ec:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80013f0:	429a      	cmp	r2, r3
 80013f2:	d914      	bls.n	800141e <RTC_set_func+0x1fa>
			estado = osMessageQueuePut(print_queueHandle, &msg_error, 0, pdMS_TO_TICKS(500));
 80013f4:	4b44      	ldr	r3, [pc, #272]	; (8001508 <RTC_set_func+0x2e4>)
 80013f6:	6818      	ldr	r0, [r3, #0]
 80013f8:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 80013fc:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001400:	2200      	movs	r2, #0
 8001402:	f00d fc87 	bl	800ed14 <osMessageQueuePut>
 8001406:	6678      	str	r0, [r7, #100]	; 0x64
			if (estado == osOK)
 8001408:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800140a:	2b00      	cmp	r3, #0
 800140c:	d103      	bne.n	8001416 <RTC_set_func+0x1f2>
				printf("Enviado valor erroneo\r\n");
 800140e:	4846      	ldr	r0, [pc, #280]	; (8001528 <RTC_set_func+0x304>)
 8001410:	f011 fb90 	bl	8012b34 <puts>
 8001414:	e00f      	b.n	8001436 <RTC_set_func+0x212>
			else
				printf("Algo no va bien\r\n");
 8001416:	4845      	ldr	r0, [pc, #276]	; (800152c <RTC_set_func+0x308>)
 8001418:	f011 fb8c 	bl	8012b34 <puts>
			if (estado == osOK)
 800141c:	e00b      	b.n	8001436 <RTC_set_func+0x212>
		}else{
			to_change[i]=num_usuario;
 800141e:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8001422:	b2d9      	uxtb	r1, r3
 8001424:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8001428:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800142a:	4413      	add	r3, r2
 800142c:	460a      	mov	r2, r1
 800142e:	701a      	strb	r2, [r3, #0]
			i++;
 8001430:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001432:	3301      	adds	r3, #1
 8001434:	673b      	str	r3, [r7, #112]	; 0x70
	for (i=0;i<6;){
 8001436:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001438:	2b05      	cmp	r3, #5
 800143a:	f77f af23 	ble.w	8001284 <RTC_set_func+0x60>
		}

	}

	RTC_TimeTypeDef sTime = {0};
 800143e:	f107 0310 	add.w	r3, r7, #16
 8001442:	2200      	movs	r2, #0
 8001444:	601a      	str	r2, [r3, #0]
 8001446:	605a      	str	r2, [r3, #4]
 8001448:	609a      	str	r2, [r3, #8]
 800144a:	60da      	str	r2, [r3, #12]
 800144c:	611a      	str	r2, [r3, #16]
	RTC_DateTypeDef sDate = {0};
 800144e:	2300      	movs	r3, #0
 8001450:	60fb      	str	r3, [r7, #12]

	sTime.Hours = to_change[0];
 8001452:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 8001456:	743b      	strb	r3, [r7, #16]
	sTime.Minutes = to_change[1];
 8001458:	f897 3059 	ldrb.w	r3, [r7, #89]	; 0x59
 800145c:	747b      	strb	r3, [r7, #17]
	sTime.Seconds = to_change[2];
 800145e:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 8001462:	74bb      	strb	r3, [r7, #18]

	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8001464:	f107 0310 	add.w	r3, r7, #16
 8001468:	2200      	movs	r2, #0
 800146a:	4619      	mov	r1, r3
 800146c:	4830      	ldr	r0, [pc, #192]	; (8001530 <RTC_set_func+0x30c>)
 800146e:	f004 faf4 	bl	8005a5a <HAL_RTC_SetTime>
 8001472:	4603      	mov	r3, r0
 8001474:	2b00      	cmp	r3, #0
 8001476:	d001      	beq.n	800147c <RTC_set_func+0x258>
	  {
	    Error_Handler();
 8001478:	f000 fa98 	bl	80019ac <Error_Handler>
	  }

	osMessageQueuePut(print_queueHandle, &msg_hora_ok, 0, pdMS_TO_TICKS(500));
 800147c:	4b22      	ldr	r3, [pc, #136]	; (8001508 <RTC_set_func+0x2e4>)
 800147e:	6818      	ldr	r0, [r3, #0]
 8001480:	f107 0154 	add.w	r1, r7, #84	; 0x54
 8001484:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001488:	2200      	movs	r2, #0
 800148a:	f00d fc43 	bl	800ed14 <osMessageQueuePut>

	sDate.Date = to_change[3];
 800148e:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8001492:	73bb      	strb	r3, [r7, #14]
	sDate.Month = to_change[4];
 8001494:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8001498:	737b      	strb	r3, [r7, #13]
	sDate.Year = to_change[5];
 800149a:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 800149e:	73fb      	strb	r3, [r7, #15]
	printf("Anio: %d\r\n",to_change[5]);
 80014a0:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 80014a4:	4619      	mov	r1, r3
 80014a6:	4823      	ldr	r0, [pc, #140]	; (8001534 <RTC_set_func+0x310>)
 80014a8:	f011 fabe 	bl	8012a28 <iprintf>
	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 80014ac:	f107 030c 	add.w	r3, r7, #12
 80014b0:	2200      	movs	r2, #0
 80014b2:	4619      	mov	r1, r3
 80014b4:	481e      	ldr	r0, [pc, #120]	; (8001530 <RTC_set_func+0x30c>)
 80014b6:	f004 fbc9 	bl	8005c4c <HAL_RTC_SetDate>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d001      	beq.n	80014c4 <RTC_set_func+0x2a0>
	{
		Error_Handler();
 80014c0:	f000 fa74 	bl	80019ac <Error_Handler>
	}

	osMessageQueuePut(print_queueHandle, &msg_fecha_ok, 0, pdMS_TO_TICKS(500));
 80014c4:	4b10      	ldr	r3, [pc, #64]	; (8001508 <RTC_set_func+0x2e4>)
 80014c6:	6818      	ldr	r0, [r3, #0]
 80014c8:	f107 0150 	add.w	r1, r7, #80	; 0x50
 80014cc:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80014d0:	2200      	movs	r2, #0
 80014d2:	f00d fc1f 	bl	800ed14 <osMessageQueuePut>

	osThreadFlagsSet(wifiStartTaskHandle,0x0001U);
 80014d6:	4b18      	ldr	r3, [pc, #96]	; (8001538 <RTC_set_func+0x314>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	2101      	movs	r1, #1
 80014dc:	4618      	mov	r0, r3
 80014de:	f00d fabb 	bl	800ea58 <osThreadFlagsSet>

  /* Infinite loop */
  for(;;)
  {

	  osDelay(pdMS_TO_TICKS(1000));
 80014e2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80014e6:	f00d fb86 	bl	800ebf6 <osDelay>
 80014ea:	e7fa      	b.n	80014e2 <RTC_set_func+0x2be>
 80014ec:	08013a48 	.word	0x08013a48
 80014f0:	08013a68 	.word	0x08013a68
 80014f4:	08013a88 	.word	0x08013a88
 80014f8:	08013aa4 	.word	0x08013aa4
 80014fc:	08013bb4 	.word	0x08013bb4
 8001500:	08013bcc 	.word	0x08013bcc
 8001504:	08013af4 	.word	0x08013af4
 8001508:	200007a0 	.word	0x200007a0
 800150c:	08013b08 	.word	0x08013b08
 8001510:	200007a4 	.word	0x200007a4
 8001514:	08013b2c 	.word	0x08013b2c
 8001518:	08013b40 	.word	0x08013b40
 800151c:	08013b54 	.word	0x08013b54
 8001520:	08013b5c 	.word	0x08013b5c
 8001524:	08013b6c 	.word	0x08013b6c
 8001528:	08013b7c 	.word	0x08013b7c
 800152c:	08013b94 	.word	0x08013b94
 8001530:	2000019c 	.word	0x2000019c
 8001534:	08013ba8 	.word	0x08013ba8
 8001538:	20000798 	.word	0x20000798

0800153c <readAccel_func>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_readAccel_func */
void readAccel_func(void *argument)
{
 800153c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800153e:	b0b1      	sub	sp, #196	; 0xc4
 8001540:	af08      	add	r7, sp, #32
 8001542:	60f8      	str	r0, [r7, #12]
  /* USER CODE BEGIN readAccel_func */
	osStatus_t estado;
  //char mensaje[]  = "Hola mundo\r\n";
	char mensaje[100];
	char *p_mensaje = mensaje;
 8001544:	f107 0320 	add.w	r3, r7, #32
 8001548:	61fb      	str	r3, [r7, #28]

	//uint32_t nticks = 0;
	int16_t DataXYZ[3];
	int16_t *pDataXYZ = DataXYZ;
 800154a:	f107 0314 	add.w	r3, r7, #20
 800154e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98


	uint8_t horas,minutos,segundos,dia,mes,anio = 0;
 8001552:	2300      	movs	r3, #0
 8001554:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
	uint32_t return_wait = 0U;
 8001558:	2300      	movs	r3, #0
 800155a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

	uint16_t iter; // Se usa para iterar en 64 o 1024 aceleraciones
	uint16_t max_iter;

	printf("ReadAccel task esperando\r\n");
 800155e:	485f      	ldr	r0, [pc, #380]	; (80016dc <readAccel_func+0x1a0>)
 8001560:	f011 fae8 	bl	8012b34 <puts>
	// Esperamos que el usuario configure el RTC y que el acelerometro este activo
	return_wait = osThreadFlagsWait(0x0003U, osFlagsWaitAll, osWaitForever);
 8001564:	f04f 32ff 	mov.w	r2, #4294967295
 8001568:	2101      	movs	r1, #1
 800156a:	2003      	movs	r0, #3
 800156c:	f00d fac2 	bl	800eaf4 <osThreadFlagsWait>
 8001570:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90

	//Activamos el temporizador
	osThreadFlagsSet(temporizadorHandle,0x0001U);
 8001574:	4b5a      	ldr	r3, [pc, #360]	; (80016e0 <readAccel_func+0x1a4>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	2101      	movs	r1, #1
 800157a:	4618      	mov	r0, r3
 800157c:	f00d fa6c 	bl	800ea58 <osThreadFlagsSet>

	//Terminamos la tarea de configuracion del RTC
	osThreadTerminate(RTC_setHandle);
 8001580:	4b58      	ldr	r3, [pc, #352]	; (80016e4 <readAccel_func+0x1a8>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	4618      	mov	r0, r3
 8001586:	f00d fa39 	bl	800e9fc <osThreadTerminate>
	osThreadTerminate(printTaskHandle);
 800158a:	4b57      	ldr	r3, [pc, #348]	; (80016e8 <readAccel_func+0x1ac>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	4618      	mov	r0, r3
 8001590:	f00d fa34 	bl	800e9fc <osThreadTerminate>
	osMessageQueueReset(print_queueHandle);
 8001594:	4b55      	ldr	r3, [pc, #340]	; (80016ec <readAccel_func+0x1b0>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	4618      	mov	r0, r3
 800159a:	f00d fcae 	bl	800eefa <osMessageQueueReset>

	printf("ReadAccel task se inicia\r\n");
 800159e:	4854      	ldr	r0, [pc, #336]	; (80016f0 <readAccel_func+0x1b4>)
 80015a0:	f011 fac8 	bl	8012b34 <puts>


	/* Infinite loop */
	for(;;)
	{
		if (modo_continuo){
 80015a4:	4b53      	ldr	r3, [pc, #332]	; (80016f4 <readAccel_func+0x1b8>)
 80015a6:	781b      	ldrb	r3, [r3, #0]
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d00a      	beq.n	80015c2 <readAccel_func+0x86>
			max_iter = MUESTRAS_CONTINUO;
 80015ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80015b0:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
			osThreadFlagsSet(sendMQTTHandle,MODO_CONTINUO);
 80015b4:	4b50      	ldr	r3, [pc, #320]	; (80016f8 <readAccel_func+0x1bc>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	2102      	movs	r1, #2
 80015ba:	4618      	mov	r0, r3
 80015bc:	f00d fa4c 	bl	800ea58 <osThreadFlagsSet>
 80015c0:	e008      	b.n	80015d4 <readAccel_func+0x98>
		}else{
			max_iter = MUESTRAS_NORMAL;
 80015c2:	2340      	movs	r3, #64	; 0x40
 80015c4:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
			osThreadFlagsSet(sendMQTTHandle,MODO_NORMAL);
 80015c8:	4b4b      	ldr	r3, [pc, #300]	; (80016f8 <readAccel_func+0x1bc>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	2101      	movs	r1, #1
 80015ce:	4618      	mov	r0, r3
 80015d0:	f00d fa42 	bl	800ea58 <osThreadFlagsSet>
		}

		for (iter=0 ; iter<max_iter ; iter++){
 80015d4:	2300      	movs	r3, #0
 80015d6:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
 80015da:	e060      	b.n	800169e <readAccel_func+0x162>
			BSP_ACCELERO_AccGetXYZ(pDataXYZ);
 80015dc:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 80015e0:	f008 f880 	bl	80096e4 <BSP_ACCELERO_AccGetXYZ>
			//printf("Tick: %ld	Eje x: %d	Eje y: %d	Eje z: %d\r\n",nticks,DataXYZ[0],DataXYZ[1],DataXYZ[2]);

			//printf("Lectura accel realizada\r\n");
			HAL_RTC_GetTime(&hrtc, &GetTime, RTC_FORMAT_BIN);
 80015e4:	2200      	movs	r2, #0
 80015e6:	4945      	ldr	r1, [pc, #276]	; (80016fc <readAccel_func+0x1c0>)
 80015e8:	4845      	ldr	r0, [pc, #276]	; (8001700 <readAccel_func+0x1c4>)
 80015ea:	f004 fad3 	bl	8005b94 <HAL_RTC_GetTime>
			horas = GetTime.Hours;
 80015ee:	4b43      	ldr	r3, [pc, #268]	; (80016fc <readAccel_func+0x1c0>)
 80015f0:	781b      	ldrb	r3, [r3, #0]
 80015f2:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
			minutos = GetTime.Minutes;
 80015f6:	4b41      	ldr	r3, [pc, #260]	; (80016fc <readAccel_func+0x1c0>)
 80015f8:	785b      	ldrb	r3, [r3, #1]
 80015fa:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
			segundos = GetTime.Seconds;
 80015fe:	4b3f      	ldr	r3, [pc, #252]	; (80016fc <readAccel_func+0x1c0>)
 8001600:	789b      	ldrb	r3, [r3, #2]
 8001602:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d

			HAL_RTC_GetDate(&hrtc, &GetDate, RTC_FORMAT_BIN);
 8001606:	2200      	movs	r2, #0
 8001608:	493e      	ldr	r1, [pc, #248]	; (8001704 <readAccel_func+0x1c8>)
 800160a:	483d      	ldr	r0, [pc, #244]	; (8001700 <readAccel_func+0x1c4>)
 800160c:	f004 fba5 	bl	8005d5a <HAL_RTC_GetDate>
			anio = GetDate.Year;
 8001610:	4b3c      	ldr	r3, [pc, #240]	; (8001704 <readAccel_func+0x1c8>)
 8001612:	78db      	ldrb	r3, [r3, #3]
 8001614:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
			dia = GetDate.Date;
 8001618:	4b3a      	ldr	r3, [pc, #232]	; (8001704 <readAccel_func+0x1c8>)
 800161a:	789b      	ldrb	r3, [r3, #2]
 800161c:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
			mes = GetDate.Month;
 8001620:	4b38      	ldr	r3, [pc, #224]	; (8001704 <readAccel_func+0x1c8>)
 8001622:	785b      	ldrb	r3, [r3, #1]
 8001624:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b

			//printf("Anio: %d\r\n",anio);
			//printf("Lectura fecha realizada\r\n");
			//printf("fecha: %d/%d/%d hora: %d:%d:%d temp: %d.%02d grados\r\n",dia,mes,anio,horas,minutos,segundos,tmpInt1,tmpInt2);
			//snprintf(mensaje,100,"fecha: %d/%d/%d hora: %d:%d:%d Eje x: %d	Eje y: %d	Eje z: %d\r\n",dia,mes,anio+2000,horas,minutos,segundos,DataXYZ[0],DataXYZ[1],DataXYZ[2]);
			snprintf(mensaje,100,"%d,%d,%d,%d,%d,%d,%d,%d,%d\r\n",dia,mes,anio+2000,horas,minutos,segundos,DataXYZ[0],DataXYZ[1],DataXYZ[2]);
 8001628:	f897 608c 	ldrb.w	r6, [r7, #140]	; 0x8c
 800162c:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 8001630:	60bb      	str	r3, [r7, #8]
 8001632:	f897 2097 	ldrb.w	r2, [r7, #151]	; 0x97
 8001636:	f502 62fa 	add.w	r2, r2, #2000	; 0x7d0
 800163a:	f897 108f 	ldrb.w	r1, [r7, #143]	; 0x8f
 800163e:	f897 008e 	ldrb.w	r0, [r7, #142]	; 0x8e
 8001642:	f897 408d 	ldrb.w	r4, [r7, #141]	; 0x8d
 8001646:	f9b7 5014 	ldrsh.w	r5, [r7, #20]
 800164a:	607d      	str	r5, [r7, #4]
 800164c:	f9b7 5016 	ldrsh.w	r5, [r7, #22]
 8001650:	603d      	str	r5, [r7, #0]
 8001652:	f9b7 5018 	ldrsh.w	r5, [r7, #24]
 8001656:	462b      	mov	r3, r5
 8001658:	f107 0520 	add.w	r5, r7, #32
 800165c:	9307      	str	r3, [sp, #28]
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	9306      	str	r3, [sp, #24]
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	9305      	str	r3, [sp, #20]
 8001666:	9404      	str	r4, [sp, #16]
 8001668:	9003      	str	r0, [sp, #12]
 800166a:	9102      	str	r1, [sp, #8]
 800166c:	9201      	str	r2, [sp, #4]
 800166e:	68bb      	ldr	r3, [r7, #8]
 8001670:	9300      	str	r3, [sp, #0]
 8001672:	4633      	mov	r3, r6
 8001674:	4a24      	ldr	r2, [pc, #144]	; (8001708 <readAccel_func+0x1cc>)
 8001676:	2164      	movs	r1, #100	; 0x64
 8001678:	4628      	mov	r0, r5
 800167a:	f011 fadd 	bl	8012c38 <sniprintf>



			//printf("MENSAJE: %s\r\n",mensaje);
			estado = osMessageQueuePut(print_queueHandle, &p_mensaje, 0, pdMS_TO_TICKS(500));
 800167e:	4b1b      	ldr	r3, [pc, #108]	; (80016ec <readAccel_func+0x1b0>)
 8001680:	6818      	ldr	r0, [r3, #0]
 8001682:	f107 011c 	add.w	r1, r7, #28
 8001686:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800168a:	2200      	movs	r2, #0
 800168c:	f00d fb42 	bl	800ed14 <osMessageQueuePut>
 8001690:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
		for (iter=0 ; iter<max_iter ; iter++){
 8001694:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8001698:	3301      	adds	r3, #1
 800169a:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
 800169e:	f8b7 209e 	ldrh.w	r2, [r7, #158]	; 0x9e
 80016a2:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 80016a6:	429a      	cmp	r2, r3
 80016a8:	d398      	bcc.n	80015dc <readAccel_func+0xa0>
				printf("Timeout agotado 1\r\n");
			}*/

		}

		printf("Se han leido todas las aceleraciones, esperamos media hora o hasta que alguien pulse el boton\r\n");
 80016aa:	4818      	ldr	r0, [pc, #96]	; (800170c <readAccel_func+0x1d0>)
 80016ac:	f011 fa42 	bl	8012b34 <puts>
		return_wait = osThreadFlagsWait(0x0006U, osFlagsWaitAny, osWaitForever); //espera media hora o que alguien pulse el boton
 80016b0:	f04f 32ff 	mov.w	r2, #4294967295
 80016b4:	2100      	movs	r1, #0
 80016b6:	2006      	movs	r0, #6
 80016b8:	f00d fa1c 	bl	800eaf4 <osThreadFlagsWait>
 80016bc:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
		if(return_wait == osFlagsErrorTimeout){
 80016c0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80016c4:	f113 0f02 	cmn.w	r3, #2
 80016c8:	d103      	bne.n	80016d2 <readAccel_func+0x196>
			printf("Ha pasado media hora\r\n");
 80016ca:	4811      	ldr	r0, [pc, #68]	; (8001710 <readAccel_func+0x1d4>)
 80016cc:	f011 fa32 	bl	8012b34 <puts>
 80016d0:	e768      	b.n	80015a4 <readAccel_func+0x68>
		}
		else {
			printf("El usuario quiere enviar aceleraciones\r\n");
 80016d2:	4810      	ldr	r0, [pc, #64]	; (8001714 <readAccel_func+0x1d8>)
 80016d4:	f011 fa2e 	bl	8012b34 <puts>
		if (modo_continuo){
 80016d8:	e764      	b.n	80015a4 <readAccel_func+0x68>
 80016da:	bf00      	nop
 80016dc:	08013bd8 	.word	0x08013bd8
 80016e0:	20000790 	.word	0x20000790
 80016e4:	20000780 	.word	0x20000780
 80016e8:	20000788 	.word	0x20000788
 80016ec:	200007a0 	.word	0x200007a0
 80016f0:	08013bf4 	.word	0x08013bf4
 80016f4:	200007c1 	.word	0x200007c1
 80016f8:	20000794 	.word	0x20000794
 80016fc:	200007ac 	.word	0x200007ac
 8001700:	2000019c 	.word	0x2000019c
 8001704:	200007a8 	.word	0x200007a8
 8001708:	08013c10 	.word	0x08013c10
 800170c:	08013c30 	.word	0x08013c30
 8001710:	08013c90 	.word	0x08013c90
 8001714:	08013ca8 	.word	0x08013ca8

08001718 <printTask_func>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_printTask_func */
void printTask_func(void *argument)
{
 8001718:	b590      	push	{r4, r7, lr}
 800171a:	b085      	sub	sp, #20
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
	uintptr_t mensaje;
	osStatus_t estado;
  /* Infinite loop */
  for(;;)
  {
	  estado = osMessageQueueGet(print_queueHandle, &mensaje, NULL, osWaitForever);
 8001720:	4b13      	ldr	r3, [pc, #76]	; (8001770 <printTask_func+0x58>)
 8001722:	6818      	ldr	r0, [r3, #0]
 8001724:	f107 0108 	add.w	r1, r7, #8
 8001728:	f04f 33ff 	mov.w	r3, #4294967295
 800172c:	2200      	movs	r2, #0
 800172e:	f00d fb51 	bl	800edd4 <osMessageQueueGet>
 8001732:	60f8      	str	r0, [r7, #12]
	  //printf("Se ha recibido algo en print task\r\n");
	  //printf("Mensaje print task: %s\r\n",mensaje);
	  //printf("Longitud: %d",strlen((char*)mensaje));
	  if (estado == osOK)
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	2b00      	cmp	r3, #0
 8001738:	d10d      	bne.n	8001756 <printTask_func+0x3e>
	  {
		  //printf("%s",(char*)mensaje);
		  HAL_UART_Transmit(&huart1, (uint8_t*)mensaje, strlen(mensaje),10);
 800173a:	68bb      	ldr	r3, [r7, #8]
 800173c:	461c      	mov	r4, r3
 800173e:	68bb      	ldr	r3, [r7, #8]
 8001740:	4618      	mov	r0, r3
 8001742:	f7fe fd45 	bl	80001d0 <strlen>
 8001746:	4603      	mov	r3, r0
 8001748:	b29a      	uxth	r2, r3
 800174a:	230a      	movs	r3, #10
 800174c:	4621      	mov	r1, r4
 800174e:	4809      	ldr	r0, [pc, #36]	; (8001774 <printTask_func+0x5c>)
 8001750:	f006 faec 	bl	8007d2c <HAL_UART_Transmit>
 8001754:	e7e4      	b.n	8001720 <printTask_func+0x8>
	  }
	  else if (estado == osErrorTimeout)
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	f113 0f02 	cmn.w	r3, #2
 800175c:	d103      	bne.n	8001766 <printTask_func+0x4e>
	  {
		  printf("Timeout printTask\r\n");
 800175e:	4806      	ldr	r0, [pc, #24]	; (8001778 <printTask_func+0x60>)
 8001760:	f011 f9e8 	bl	8012b34 <puts>
 8001764:	e7dc      	b.n	8001720 <printTask_func+0x8>
	  }
	  else
	  {
		  printf("Error en la tarea print\r\n");
 8001766:	4805      	ldr	r0, [pc, #20]	; (800177c <printTask_func+0x64>)
 8001768:	f011 f9e4 	bl	8012b34 <puts>
	  estado = osMessageQueueGet(print_queueHandle, &mensaje, NULL, osWaitForever);
 800176c:	e7d8      	b.n	8001720 <printTask_func+0x8>
 800176e:	bf00      	nop
 8001770:	200007a0 	.word	0x200007a0
 8001774:	20000270 	.word	0x20000270
 8001778:	08013cd0 	.word	0x08013cd0
 800177c:	08013ce4 	.word	0x08013ce4

08001780 <tarea_UART_func>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_tarea_UART_func */
void tarea_UART_func(void *argument)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b084      	sub	sp, #16
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN tarea_UART_func */
	osStatus_t estado;
	uint32_t return_wait = 0U;
 8001788:	2300      	movs	r3, #0
 800178a:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
	  return_wait = osThreadFlagsWait(0x0002U, osFlagsWaitAny, osWaitForever);
 800178c:	f04f 32ff 	mov.w	r2, #4294967295
 8001790:	2100      	movs	r1, #0
 8001792:	2002      	movs	r0, #2
 8001794:	f00d f9ae 	bl	800eaf4 <osThreadFlagsWait>
 8001798:	60f8      	str	r0, [r7, #12]
	  estado = osMessageQueuePut(receive_queueHandle, &rec_data,0,pdMS_TO_TICKS(200));
 800179a:	4b09      	ldr	r3, [pc, #36]	; (80017c0 <tarea_UART_func+0x40>)
 800179c:	6818      	ldr	r0, [r3, #0]
 800179e:	23c8      	movs	r3, #200	; 0xc8
 80017a0:	2200      	movs	r2, #0
 80017a2:	4908      	ldr	r1, [pc, #32]	; (80017c4 <tarea_UART_func+0x44>)
 80017a4:	f00d fab6 	bl	800ed14 <osMessageQueuePut>
 80017a8:	60b8      	str	r0, [r7, #8]
	  if (estado == osOK)
 80017aa:	68bb      	ldr	r3, [r7, #8]
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d103      	bne.n	80017b8 <tarea_UART_func+0x38>
		  printf("Estado: ok\r\n");
 80017b0:	4805      	ldr	r0, [pc, #20]	; (80017c8 <tarea_UART_func+0x48>)
 80017b2:	f011 f9bf 	bl	8012b34 <puts>
 80017b6:	e7e9      	b.n	800178c <tarea_UART_func+0xc>
	  else
		  printf("Algo no va bien\r\n");
 80017b8:	4804      	ldr	r0, [pc, #16]	; (80017cc <tarea_UART_func+0x4c>)
 80017ba:	f011 f9bb 	bl	8012b34 <puts>
	  return_wait = osThreadFlagsWait(0x0002U, osFlagsWaitAny, osWaitForever);
 80017be:	e7e5      	b.n	800178c <tarea_UART_func+0xc>
 80017c0:	200007a4 	.word	0x200007a4
 80017c4:	200007cc 	.word	0x200007cc
 80017c8:	08013d00 	.word	0x08013d00
 80017cc:	08013b94 	.word	0x08013b94

080017d0 <temporizador_func>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_temporizador_func */
void temporizador_func(void *argument)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b082      	sub	sp, #8
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN temporizador_func */
	osThreadFlagsWait(0x0001U, osFlagsWaitAll, osWaitForever);
 80017d8:	f04f 32ff 	mov.w	r2, #4294967295
 80017dc:	2101      	movs	r1, #1
 80017de:	2001      	movs	r0, #1
 80017e0:	f00d f988 	bl	800eaf4 <osThreadFlagsWait>
	printf("Temporizador activado\r\n");
 80017e4:	4806      	ldr	r0, [pc, #24]	; (8001800 <temporizador_func+0x30>)
 80017e6:	f011 f9a5 	bl	8012b34 <puts>
  /* Infinite loop */
  for(;;)
  {
    osDelay(pdMS_TO_TICKS(1000000)); //Periodo en ms con el que se mandan las aceleraciones
 80017ea:	4806      	ldr	r0, [pc, #24]	; (8001804 <temporizador_func+0x34>)
 80017ec:	f00d fa03 	bl	800ebf6 <osDelay>
    osThreadFlagsSet(readAccelHandle,0x0004U);
 80017f0:	4b05      	ldr	r3, [pc, #20]	; (8001808 <temporizador_func+0x38>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	2104      	movs	r1, #4
 80017f6:	4618      	mov	r0, r3
 80017f8:	f00d f92e 	bl	800ea58 <osThreadFlagsSet>
    osDelay(pdMS_TO_TICKS(1000000)); //Periodo en ms con el que se mandan las aceleraciones
 80017fc:	e7f5      	b.n	80017ea <temporizador_func+0x1a>
 80017fe:	bf00      	nop
 8001800:	08013d0c 	.word	0x08013d0c
 8001804:	000f4240 	.word	0x000f4240
 8001808:	20000784 	.word	0x20000784

0800180c <sendMQTT_func>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_sendMQTT_func */
void sendMQTT_func(void *argument)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b08a      	sub	sp, #40	; 0x28
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN sendMQTT_func */
	uint32_t return_wait = 0U;
 8001814:	2300      	movs	r3, #0
 8001816:	623b      	str	r3, [r7, #32]
	uint16_t max_iter;

	char payLoad[16];


	osThreadFlagsWait(0x0001U, osFlagsWaitAny, osWaitForever);
 8001818:	f04f 32ff 	mov.w	r2, #4294967295
 800181c:	2100      	movs	r1, #0
 800181e:	2001      	movs	r0, #1
 8001820:	f00d f968 	bl	800eaf4 <osThreadFlagsWait>


  /* Infinite loop */
  for(;;)
  {
	  return_wait = osThreadFlagsWait(MODO_NORMAL | MODO_CONTINUO, osFlagsWaitAny, osWaitForever);
 8001824:	f04f 32ff 	mov.w	r2, #4294967295
 8001828:	2100      	movs	r1, #0
 800182a:	2003      	movs	r0, #3
 800182c:	f00d f962 	bl	800eaf4 <osThreadFlagsWait>
 8001830:	6238      	str	r0, [r7, #32]
	  if(return_wait == MODO_NORMAL){
 8001832:	6a3b      	ldr	r3, [r7, #32]
 8001834:	2b01      	cmp	r3, #1
 8001836:	d105      	bne.n	8001844 <sendMQTT_func+0x38>
		  printf("Vamos a recibir 64 aceleraciones\r\n");
 8001838:	481b      	ldr	r0, [pc, #108]	; (80018a8 <sendMQTT_func+0x9c>)
 800183a:	f011 f97b 	bl	8012b34 <puts>
		  max_iter = MUESTRAS_NORMAL;
 800183e:	2340      	movs	r3, #64	; 0x40
 8001840:	84bb      	strh	r3, [r7, #36]	; 0x24
 8001842:	e008      	b.n	8001856 <sendMQTT_func+0x4a>

	  }
	  else if(return_wait == MODO_CONTINUO){
 8001844:	6a3b      	ldr	r3, [r7, #32]
 8001846:	2b02      	cmp	r3, #2
 8001848:	d105      	bne.n	8001856 <sendMQTT_func+0x4a>
		  printf("Vamos a recibir 1024 aceleraciones\r\n");
 800184a:	4818      	ldr	r0, [pc, #96]	; (80018ac <sendMQTT_func+0xa0>)
 800184c:	f011 f972 	bl	8012b34 <puts>
		  max_iter = MUESTRAS_CONTINUO;
 8001850:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001854:	84bb      	strh	r3, [r7, #36]	; 0x24
	  }
	  for (iter=0;iter<max_iter;iter++){
 8001856:	2300      	movs	r3, #0
 8001858:	84fb      	strh	r3, [r7, #38]	; 0x26
 800185a:	e016      	b.n	800188a <sendMQTT_func+0x7e>
		  estado = osMessageQueueGet(print_queueHandle, &mensaje, NULL, osWaitForever);
 800185c:	4b14      	ldr	r3, [pc, #80]	; (80018b0 <sendMQTT_func+0xa4>)
 800185e:	6818      	ldr	r0, [r3, #0]
 8001860:	f107 0118 	add.w	r1, r7, #24
 8001864:	f04f 33ff 	mov.w	r3, #4294967295
 8001868:	2200      	movs	r2, #0
 800186a:	f00d fab3 	bl	800edd4 <osMessageQueueGet>
 800186e:	61f8      	str	r0, [r7, #28]

		  if (estado == osOK)
 8001870:	69fb      	ldr	r3, [r7, #28]
 8001872:	2b00      	cmp	r3, #0
 8001874:	d106      	bne.n	8001884 <sendMQTT_func+0x78>
		  {
			  //printf("%s",(char*)mensaje);
			  //HAL_UART_Transmit(&huart1, (uint8_t*)mensaje, strlen(mensaje),10);
			  sprintf(payLoad,"%s",mensaje);
 8001876:	69ba      	ldr	r2, [r7, #24]
 8001878:	f107 0308 	add.w	r3, r7, #8
 800187c:	490d      	ldr	r1, [pc, #52]	; (80018b4 <sendMQTT_func+0xa8>)
 800187e:	4618      	mov	r0, r3
 8001880:	f011 fa0e 	bl	8012ca0 <siprintf>
	  for (iter=0;iter<max_iter;iter++){
 8001884:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001886:	3301      	adds	r3, #1
 8001888:	84fb      	strh	r3, [r7, #38]	; 0x26
 800188a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800188c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800188e:	429a      	cmp	r2, r3
 8001890:	d3e4      	bcc.n	800185c <sendMQTT_func+0x50>
//			  prvMQTTPublishToTopic(&xMQTTContext,pcTempTopic,payLoad);
		  }
	  }
	  printf("Espacio en la cola: %d\r\n",osMessageQueueGetSpace(print_queueHandle));
 8001892:	4b07      	ldr	r3, [pc, #28]	; (80018b0 <sendMQTT_func+0xa4>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	4618      	mov	r0, r3
 8001898:	f00d fafa 	bl	800ee90 <osMessageQueueGetSpace>
 800189c:	4603      	mov	r3, r0
 800189e:	4619      	mov	r1, r3
 80018a0:	4805      	ldr	r0, [pc, #20]	; (80018b8 <sendMQTT_func+0xac>)
 80018a2:	f011 f8c1 	bl	8012a28 <iprintf>
	  return_wait = osThreadFlagsWait(MODO_NORMAL | MODO_CONTINUO, osFlagsWaitAny, osWaitForever);
 80018a6:	e7bd      	b.n	8001824 <sendMQTT_func+0x18>
 80018a8:	08013d24 	.word	0x08013d24
 80018ac:	08013d48 	.word	0x08013d48
 80018b0:	200007a0 	.word	0x200007a0
 80018b4:	08013d6c 	.word	0x08013d6c
 80018b8:	08013d70 	.word	0x08013d70

080018bc <wifiStartTask_func>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_wifiStartTask_func */
void wifiStartTask_func(void *argument)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b082      	sub	sp, #8
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN wifiStartTask_func */
	osThreadFlagsWait(0x0001U, osFlagsWaitAny, osWaitForever);
 80018c4:	f04f 32ff 	mov.w	r2, #4294967295
 80018c8:	2100      	movs	r1, #0
 80018ca:	2001      	movs	r0, #1
 80018cc:	f00d f912 	bl	800eaf4 <osThreadFlagsWait>
	wifi_connect();
 80018d0:	f7ff fc58 	bl	8001184 <wifi_connect>
//	MQTT_context_Init();

	osThreadFlagsSet(mqttSubscribeHandle,0x0001U);
 80018d4:	4b04      	ldr	r3, [pc, #16]	; (80018e8 <wifiStartTask_func+0x2c>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	2101      	movs	r1, #1
 80018da:	4618      	mov	r0, r3
 80018dc:	f00d f8bc 	bl	800ea58 <osThreadFlagsSet>
//	osThreadFlagsSet(sendMQTTHandle,0x0001U);
//	osThreadFlagsSet(readAccelHandle,0x0002U);
  /* Infinite loop */
  for(;;)
  {
	  osDelay(pdMS_TO_TICKS(1));
 80018e0:	2001      	movs	r0, #1
 80018e2:	f00d f988 	bl	800ebf6 <osDelay>
 80018e6:	e7fb      	b.n	80018e0 <wifiStartTask_func+0x24>
 80018e8:	2000079c 	.word	0x2000079c

080018ec <mqttSubscribe_func>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_mqttSubscribe_func */
void mqttSubscribe_func(void *argument)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b09c      	sub	sp, #112	; 0x70
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN mqttSubscribe_func */

	osThreadFlagsWait(0x0001U, osFlagsWaitAny, osWaitForever);
 80018f4:	f04f 32ff 	mov.w	r2, #4294967295
 80018f8:	2100      	movs	r1, #0
 80018fa:	2001      	movs	r0, #1
 80018fc:	f00d f8fa 	bl	800eaf4 <osThreadFlagsWait>

	const uint32_t ulMaxPublishCount = 5UL;
 8001900:	2305      	movs	r3, #5
 8001902:	66fb      	str	r3, [r7, #108]	; 0x6c
	NetworkContext_t xNetworkContext = { 0 };
 8001904:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001908:	2200      	movs	r2, #0
 800190a:	601a      	str	r2, [r3, #0]
 800190c:	605a      	str	r2, [r3, #4]
	MQTTStatus_t xMQTTStatus;
	TransportStatus_t xNetworkStatus;

	/* Attempt to connect to the MQTT broker. The socket is returned in
	* the network context structure. */
	xNetworkStatus = prvConnectToServer( &xNetworkContext, SOCKETSUBS );
 800190e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001912:	2101      	movs	r1, #1
 8001914:	4618      	mov	r0, r3
 8001916:	f000 f84f 	bl	80019b8 <prvConnectToServer>
 800191a:	4603      	mov	r3, r0
 800191c:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
	printf("Mitad de la definicion mqtt\r\n");
 8001920:	4816      	ldr	r0, [pc, #88]	; (800197c <mqttSubscribe_func+0x90>)
 8001922:	f011 f907 	bl	8012b34 <puts>
	configASSERT( xNetworkStatus == PLAINTEXT_TRANSPORT_SUCCESS );
 8001926:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800192a:	2b01      	cmp	r3, #1
 800192c:	d00a      	beq.n	8001944 <mqttSubscribe_func+0x58>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800192e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001932:	f383 8811 	msr	BASEPRI, r3
 8001936:	f3bf 8f6f 	isb	sy
 800193a:	f3bf 8f4f 	dsb	sy
 800193e:	667b      	str	r3, [r7, #100]	; 0x64
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8001940:	bf00      	nop
 8001942:	e7fe      	b.n	8001942 <mqttSubscribe_func+0x56>
	//LOG(("Trying to create an MQTT connection\n"));
	prvCreateMQTTConnectionWithBroker( &xMQTTContext, &xNetworkContext );
 8001944:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8001948:	f107 030c 	add.w	r3, r7, #12
 800194c:	4611      	mov	r1, r2
 800194e:	4618      	mov	r0, r3
 8001950:	f000 f87e 	bl	8001a50 <prvCreateMQTTConnectionWithBroker>
	prvMQTTSubscribeToTopic(&xMQTTContext,pcTempTopic2);
 8001954:	f107 030c 	add.w	r3, r7, #12
 8001958:	4909      	ldr	r1, [pc, #36]	; (8001980 <mqttSubscribe_func+0x94>)
 800195a:	4618      	mov	r0, r3
 800195c:	f000 f8f4 	bl	8001b48 <prvMQTTSubscribeToTopic>
	printf("Contexto mqtt inicializado\r\n");
 8001960:	4808      	ldr	r0, [pc, #32]	; (8001984 <mqttSubscribe_func+0x98>)
 8001962:	f011 f8e7 	bl	8012b34 <puts>


  /* Infinite loop */
  for(;;)
  {
    osDelay(pdMS_TO_TICKS(1000));
 8001966:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800196a:	f00d f944 	bl	800ebf6 <osDelay>
	MQTT_ProcessLoop(&xMQTTContext);
 800196e:	f107 030c 	add.w	r3, r7, #12
 8001972:	4618      	mov	r0, r3
 8001974:	f00b f82b 	bl	800c9ce <MQTT_ProcessLoop>
    osDelay(pdMS_TO_TICKS(1000));
 8001978:	e7f5      	b.n	8001966 <mqttSubscribe_func+0x7a>
 800197a:	bf00      	nop
 800197c:	08013d8c 	.word	0x08013d8c
 8001980:	08013dac 	.word	0x08013dac
 8001984:	08013dc8 	.word	0x08013dc8

08001988 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b082      	sub	sp, #8
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4a04      	ldr	r2, [pc, #16]	; (80019a8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001996:	4293      	cmp	r3, r2
 8001998:	d101      	bne.n	800199e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800199a:	f000 ff05 	bl	80027a8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800199e:	bf00      	nop
 80019a0:	3708      	adds	r7, #8
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	40001000 	.word	0x40001000

080019ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019ac:	b480      	push	{r7}
 80019ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019b0:	b672      	cpsid	i
}
 80019b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019b4:	e7fe      	b.n	80019b4 <Error_Handler+0x8>
	...

080019b8 <prvConnectToServer>:
 */
static uint32_t ulGlobalEntryTimeMs;


TransportStatus_t prvConnectToServer( NetworkContext_t * pxNetworkContext, uint8_t socket )
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b086      	sub	sp, #24
 80019bc:	af02      	add	r7, sp, #8
 80019be:	6078      	str	r0, [r7, #4]
 80019c0:	460b      	mov	r3, r1
 80019c2:	70fb      	strb	r3, [r7, #3]
   TransportStatus_t xNetworkStatus;
   uint8_t ret;
   uint8_t ipaddr[4]=MQTT_BROKER_ENDPOINT_IP;
 80019c4:	4b1d      	ldr	r3, [pc, #116]	; (8001a3c <prvConnectToServer+0x84>)
 80019c6:	60bb      	str	r3, [r7, #8]

    /* Attempt to connect to MQTT broker. */
    do
    {
        /* Establish a TCP connection with the MQTT broker. */
        LOG( ( "Create a TCP connection to %s:%d.\n",
 80019c8:	f240 725b 	movw	r2, #1883	; 0x75b
 80019cc:	491c      	ldr	r1, [pc, #112]	; (8001a40 <prvConnectToServer+0x88>)
 80019ce:	481d      	ldr	r0, [pc, #116]	; (8001a44 <prvConnectToServer+0x8c>)
 80019d0:	f011 f82a 	bl	8012a28 <iprintf>
                   MQTT_BROKER_ENDPOINT,
                   MQTT_BROKER_PORT ) );
        ret=WIFI_OpenClientConnection(socket, WIFI_TCP_PROTOCOL, "mqtt", ipaddr , MQTT_BROKER_PORT, 0);
 80019d4:	78f8      	ldrb	r0, [r7, #3]
 80019d6:	f107 0308 	add.w	r3, r7, #8
 80019da:	2200      	movs	r2, #0
 80019dc:	9201      	str	r2, [sp, #4]
 80019de:	f240 725b 	movw	r2, #1883	; 0x75b
 80019e2:	9200      	str	r2, [sp, #0]
 80019e4:	4a18      	ldr	r2, [pc, #96]	; (8001a48 <prvConnectToServer+0x90>)
 80019e6:	2100      	movs	r1, #0
 80019e8:	f009 fb3a 	bl	800b060 <WIFI_OpenClientConnection>
 80019ec:	4603      	mov	r3, r0
 80019ee:	73bb      	strb	r3, [r7, #14]
		if(ret!=WIFI_STATUS_OK) {
 80019f0:	7bbb      	ldrb	r3, [r7, #14]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d009      	beq.n	8001a0a <prvConnectToServer+0x52>
			LOG(("Error in opening MQTT connection: %d\n",ret));
 80019f6:	7bbb      	ldrb	r3, [r7, #14]
 80019f8:	4619      	mov	r1, r3
 80019fa:	4814      	ldr	r0, [pc, #80]	; (8001a4c <prvConnectToServer+0x94>)
 80019fc:	f011 f814 	bl	8012a28 <iprintf>
			osDelay(pdMS_TO_TICKS(10000));
 8001a00:	f242 7010 	movw	r0, #10000	; 0x2710
 8001a04:	f00d f8f7 	bl	800ebf6 <osDelay>
 8001a08:	e00f      	b.n	8001a2a <prvConnectToServer+0x72>
		} else {
	        pxNetworkContext->socket = socket;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	78fa      	ldrb	r2, [r7, #3]
 8001a0e:	701a      	strb	r2, [r3, #0]
	        pxNetworkContext->socket_open=1;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	2201      	movs	r2, #1
 8001a14:	705a      	strb	r2, [r3, #1]
	        memcpy(pxNetworkContext->ipaddr,ipaddr,4*sizeof(uint8_t));
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	3302      	adds	r3, #2
 8001a1a:	68ba      	ldr	r2, [r7, #8]
 8001a1c:	601a      	str	r2, [r3, #0]
	        pxNetworkContext->remote_port=MQTT_BROKER_PORT;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	f240 725b 	movw	r2, #1883	; 0x75b
 8001a24:	80da      	strh	r2, [r3, #6]
	        xNetworkStatus = PLAINTEXT_TRANSPORT_SUCCESS;
 8001a26:	2301      	movs	r3, #1
 8001a28:	73fb      	strb	r3, [r7, #15]
		}


    } while( ( xNetworkStatus != PLAINTEXT_TRANSPORT_SUCCESS ) );
 8001a2a:	7bfb      	ldrb	r3, [r7, #15]
 8001a2c:	2b01      	cmp	r3, #1
 8001a2e:	d1cb      	bne.n	80019c8 <prvConnectToServer+0x10>

    return PLAINTEXT_TRANSPORT_SUCCESS;
 8001a30:	2301      	movs	r3, #1
}
 8001a32:	4618      	mov	r0, r3
 8001a34:	3710      	adds	r7, #16
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	bf00      	nop
 8001a3c:	5e5d795b 	.word	0x5e5d795b
 8001a40:	08013dfc 	.word	0x08013dfc
 8001a44:	08013e10 	.word	0x08013e10
 8001a48:	08013e34 	.word	0x08013e34
 8001a4c:	08013e3c 	.word	0x08013e3c

08001a50 <prvCreateMQTTConnectionWithBroker>:

void prvCreateMQTTConnectionWithBroker( MQTTContext_t * pxMQTTContext,
                                               NetworkContext_t * pxNetworkContext )
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b094      	sub	sp, #80	; 0x50
 8001a54:	af02      	add	r7, sp, #8
 8001a56:	6078      	str	r0, [r7, #4]
 8001a58:	6039      	str	r1, [r7, #0]
    MQTTConnectInfo_t xConnectInfo;
    bool xSessionPresent;
    TransportInterface_t xTransport;

    /* Fill in Transport Interface send and receive function pointers. */
    init_transport_from_socket( pxNetworkContext->socket, 1,
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	7818      	ldrb	r0, [r3, #0]
 8001a5e:	f107 030c 	add.w	r3, r7, #12
 8001a62:	683a      	ldr	r2, [r7, #0]
 8001a64:	2101      	movs	r1, #1
 8001a66:	f00c fe83 	bl	800e770 <init_transport_from_socket>
                                     pxNetworkContext,
                                     &xTransport );
    /* Initialize MQTT library. */
    xResult = MQTT_Init( pxMQTTContext,
 8001a6a:	f107 010c 	add.w	r1, r7, #12
 8001a6e:	4b30      	ldr	r3, [pc, #192]	; (8001b30 <prvCreateMQTTConnectionWithBroker+0xe0>)
 8001a70:	9300      	str	r3, [sp, #0]
 8001a72:	4b30      	ldr	r3, [pc, #192]	; (8001b34 <prvCreateMQTTConnectionWithBroker+0xe4>)
 8001a74:	4a30      	ldr	r2, [pc, #192]	; (8001b38 <prvCreateMQTTConnectionWithBroker+0xe8>)
 8001a76:	6878      	ldr	r0, [r7, #4]
 8001a78:	f00a fe62 	bl	800c740 <MQTT_Init>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
                         &xTransport,
                         prvGetTimeMs,
                         prvEventCallback,
                         &xBuffer );

    configASSERT( xResult == MQTTSuccess );
 8001a82:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d00a      	beq.n	8001aa0 <prvCreateMQTTConnectionWithBroker+0x50>
	__asm volatile
 8001a8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a8e:	f383 8811 	msr	BASEPRI, r3
 8001a92:	f3bf 8f6f 	isb	sy
 8001a96:	f3bf 8f4f 	dsb	sy
 8001a9a:	643b      	str	r3, [r7, #64]	; 0x40
}
 8001a9c:	bf00      	nop
 8001a9e:	e7fe      	b.n	8001a9e <prvCreateMQTTConnectionWithBroker+0x4e>
    LOG(("MQTT initialized\n"));
 8001aa0:	4826      	ldr	r0, [pc, #152]	; (8001b3c <prvCreateMQTTConnectionWithBroker+0xec>)
 8001aa2:	f011 f847 	bl	8012b34 <puts>

    /* Many fields not used in this demo so start with everything at 0. */
    ( void ) memset( ( void * ) &xConnectInfo, 0x00, sizeof( xConnectInfo ) );
 8001aa6:	f107 0320 	add.w	r3, r7, #32
 8001aaa:	221c      	movs	r2, #28
 8001aac:	2100      	movs	r1, #0
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f010 fc2f 	bl	8012312 <memset>

    /* Start with a clean session i.e. direct the MQTT broker to discard any
     * previous session data. Also, establishing a connection with clean
     * session will ensure that the broker does not store any data when this
     * client gets disconnected. */
    xConnectInfo.cleanSession = true;
 8001ab4:	2301      	movs	r3, #1
 8001ab6:	f887 3020 	strb.w	r3, [r7, #32]

    /* The client identifier is used to uniquely identify this MQTT client to
     * the MQTT broker. In a production device the identifier can be something
     * unique, such as a device serial number. */
    xConnectInfo.pClientIdentifier = MQTTCLIENT_IDENTIFIER;
 8001aba:	4b21      	ldr	r3, [pc, #132]	; (8001b40 <prvCreateMQTTConnectionWithBroker+0xf0>)
 8001abc:	627b      	str	r3, [r7, #36]	; 0x24
    xConnectInfo.clientIdentifierLength = ( uint16_t ) strlen(
 8001abe:	2317      	movs	r3, #23
 8001ac0:	853b      	strh	r3, [r7, #40]	; 0x28
                                                  MQTTCLIENT_IDENTIFIER );
    xConnectInfo.pUserName=mqttUserName;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	62fb      	str	r3, [r7, #44]	; 0x2c
    xConnectInfo.userNameLength=strlen(mqttUserName);
 8001ac6:	2000      	movs	r0, #0
 8001ac8:	f7fe fb82 	bl	80001d0 <strlen>
 8001acc:	4603      	mov	r3, r0
 8001ace:	b29b      	uxth	r3, r3
 8001ad0:	863b      	strh	r3, [r7, #48]	; 0x30
    xConnectInfo.pPassword=mqttPass;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	637b      	str	r3, [r7, #52]	; 0x34
    xConnectInfo.passwordLength=strlen(mqttPass);
 8001ad6:	2000      	movs	r0, #0
 8001ad8:	f7fe fb7a 	bl	80001d0 <strlen>
 8001adc:	4603      	mov	r3, r0
 8001ade:	b29b      	uxth	r3, r3
 8001ae0:	873b      	strh	r3, [r7, #56]	; 0x38

    /* Set MQTT keep-alive period. It is the responsibility of the application
     * to ensure that the interval between Control Packets being sent does not
     * exceed the Keep Alive value.  In the absence of sending any other
     * Control Packets, the Client MUST send a PINGREQ Packet. */
    xConnectInfo.keepAliveSeconds = 60U;;
 8001ae2:	233c      	movs	r3, #60	; 0x3c
 8001ae4:	847b      	strh	r3, [r7, #34]	; 0x22

    /* Send MQTT CONNECT packet to broker. LWT is not used in this demo, so it
     * is passed as NULL. */
    xResult = MQTT_Connect( pxMQTTContext,
 8001ae6:	f107 0120 	add.w	r1, r7, #32
 8001aea:	f107 031f 	add.w	r3, r7, #31
 8001aee:	9300      	str	r3, [sp, #0]
 8001af0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001af4:	2200      	movs	r2, #0
 8001af6:	6878      	ldr	r0, [r7, #4]
 8001af8:	f00a fe77 	bl	800c7ea <MQTT_Connect>
 8001afc:	4603      	mov	r3, r0
 8001afe:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
                            &xConnectInfo,
                            NULL,
                            1000U,
                            &xSessionPresent );
    configASSERT( xResult == MQTTSuccess );
 8001b02:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d00a      	beq.n	8001b20 <prvCreateMQTTConnectionWithBroker+0xd0>
	__asm volatile
 8001b0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b0e:	f383 8811 	msr	BASEPRI, r3
 8001b12:	f3bf 8f6f 	isb	sy
 8001b16:	f3bf 8f4f 	dsb	sy
 8001b1a:	63fb      	str	r3, [r7, #60]	; 0x3c
}
 8001b1c:	bf00      	nop
 8001b1e:	e7fe      	b.n	8001b1e <prvCreateMQTTConnectionWithBroker+0xce>
    LOG(("MQTT connected to broker\n"));
 8001b20:	4808      	ldr	r0, [pc, #32]	; (8001b44 <prvCreateMQTTConnectionWithBroker+0xf4>)
 8001b22:	f011 f807 	bl	8012b34 <puts>

}
 8001b26:	bf00      	nop
 8001b28:	3748      	adds	r7, #72	; 0x48
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	20000000 	.word	0x20000000
 8001b34:	08001cf9 	.word	0x08001cf9
 8001b38:	08001cc9 	.word	0x08001cc9
 8001b3c:	08013e64 	.word	0x08013e64
 8001b40:	08013e78 	.word	0x08013e78
 8001b44:	08013e90 	.word	0x08013e90

08001b48 <prvMQTTSubscribeToTopic>:
    if(xResult==MQTTSuccess) LOG(("Published to topic %s: %s\n",topic,payload));
    //configASSERT( xResult == MQTTSuccess );
}

void prvMQTTSubscribeToTopic( MQTTContext_t * pxMQTTContext, char * topic )
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b086      	sub	sp, #24
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
 8001b50:	6039      	str	r1, [r7, #0]
    MQTTStatus_t xResult = MQTTSuccess;
 8001b52:	2300      	movs	r3, #0
 8001b54:	75fb      	strb	r3, [r7, #23]
    MQTTSubscribeInfo_t xMQTTSubscription[ TOPIC_COUNT ];
    bool xFailedSubscribeToTopic = false;
 8001b56:	2300      	movs	r3, #0
 8001b58:	75bb      	strb	r3, [r7, #22]

    /* Some fields not used by this demo so start with everything at 0. */
    ( void ) memset( ( void * ) &xMQTTSubscription, 0x00, sizeof( xMQTTSubscription ) );
 8001b5a:	f107 0308 	add.w	r3, r7, #8
 8001b5e:	220c      	movs	r2, #12
 8001b60:	2100      	movs	r1, #0
 8001b62:	4618      	mov	r0, r3
 8001b64:	f010 fbd5 	bl	8012312 <memset>

    /* Each packet requires a unique ID. */
    usSubscribePacketIdentifier = MQTT_GetPacketId( pxMQTTContext );
 8001b68:	6878      	ldr	r0, [r7, #4]
 8001b6a:	f00a ff50 	bl	800ca0e <MQTT_GetPacketId>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	461a      	mov	r2, r3
 8001b72:	4b1e      	ldr	r3, [pc, #120]	; (8001bec <prvMQTTSubscribeToTopic+0xa4>)
 8001b74:	801a      	strh	r2, [r3, #0]

    /* Subscribe to the pcExampleTopic topic filter. This example subscribes
     * to only one topic and uses QoS0. */
    xMQTTSubscription[ 0 ].qos = MQTTQoS0;
 8001b76:	2300      	movs	r3, #0
 8001b78:	723b      	strb	r3, [r7, #8]
    xMQTTSubscription[ 0 ].pTopicFilter = topic;
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	60fb      	str	r3, [r7, #12]
    xMQTTSubscription[ 0 ].topicFilterLength = strlen( topic );
 8001b7e:	6838      	ldr	r0, [r7, #0]
 8001b80:	f7fe fb26 	bl	80001d0 <strlen>
 8001b84:	4603      	mov	r3, r0
 8001b86:	b29b      	uxth	r3, r3
 8001b88:	823b      	strh	r3, [r7, #16]
    do
    {
        /* The client is already connected to the broker. Subscribe to the topic
         * as specified in pcExampleTopic by sending a subscribe packet then
         * waiting for a subscribe acknowledgment (SUBACK). */
        xResult = MQTT_Subscribe( pxMQTTContext,
 8001b8a:	4b18      	ldr	r3, [pc, #96]	; (8001bec <prvMQTTSubscribeToTopic+0xa4>)
 8001b8c:	881b      	ldrh	r3, [r3, #0]
 8001b8e:	f107 0108 	add.w	r1, r7, #8
 8001b92:	2201      	movs	r2, #1
 8001b94:	6878      	ldr	r0, [r7, #4]
 8001b96:	f00a fea0 	bl	800c8da <MQTT_Subscribe>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	75fb      	strb	r3, [r7, #23]
                                  xMQTTSubscription,
                                  1, /* Only subscribing to one topic. */
                                  usSubscribePacketIdentifier );
        if(xResult==MQTTSuccess) LOG(("Subscription to %s, result: %d, success\n",topic,xResult));
 8001b9e:	7dfb      	ldrb	r3, [r7, #23]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d106      	bne.n	8001bb2 <prvMQTTSubscribeToTopic+0x6a>
 8001ba4:	7dfb      	ldrb	r3, [r7, #23]
 8001ba6:	461a      	mov	r2, r3
 8001ba8:	6839      	ldr	r1, [r7, #0]
 8001baa:	4811      	ldr	r0, [pc, #68]	; (8001bf0 <prvMQTTSubscribeToTopic+0xa8>)
 8001bac:	f010 ff3c 	bl	8012a28 <iprintf>
 8001bb0:	e005      	b.n	8001bbe <prvMQTTSubscribeToTopic+0x76>
        else LOG(("Subscription to %s, result: %d, failed\n",topic,xResult));
 8001bb2:	7dfb      	ldrb	r3, [r7, #23]
 8001bb4:	461a      	mov	r2, r3
 8001bb6:	6839      	ldr	r1, [r7, #0]
 8001bb8:	480e      	ldr	r0, [pc, #56]	; (8001bf4 <prvMQTTSubscribeToTopic+0xac>)
 8001bba:	f010 ff35 	bl	8012a28 <iprintf>
         * packet.  This demo uses the generic packet processing function
         * everywhere to highlight this fact. Note there is a separate demo that
         * shows how to use coreMQTT in a thread safe way – in which case the
         * MQTT protocol runs in the background and this call is not required. */
        /* For version 1.1.0: xResult = MQTT_ProcessLoop( pxMQTTContext, 1000 ); */
        xResult = MQTT_ProcessLoop( pxMQTTContext );
 8001bbe:	6878      	ldr	r0, [r7, #4]
 8001bc0:	f00a ff05 	bl	800c9ce <MQTT_ProcessLoop>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	75fb      	strb	r3, [r7, #23]
        //configASSERT( xResult == MQTTSuccess );

        /* Reset flag before checking suback responses. */
        xFailedSubscribeToTopic = false;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	75bb      	strb	r3, [r7, #22]
         * #xTopicFilterContext is updated in the event callback (shown in a
         * code block below) to reflect the status of the SUBACK sent by the
         * broker. It represents either the QoS level granted by the server upon
         * subscription, or acknowledgment of server rejection of the
         * subscription request. */
        if( xTopicFilterContext[0].xSubAckStatus == MQTTSubAckFailure )
 8001bcc:	4b0a      	ldr	r3, [pc, #40]	; (8001bf8 <prvMQTTSubscribeToTopic+0xb0>)
 8001bce:	791b      	ldrb	r3, [r3, #4]
 8001bd0:	2b80      	cmp	r3, #128	; 0x80
 8001bd2:	d102      	bne.n	8001bda <prvMQTTSubscribeToTopic+0x92>
        {
            xFailedSubscribeToTopic = true;
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	75bb      	strb	r3, [r7, #22]
            break;
 8001bd8:	e003      	b.n	8001be2 <prvMQTTSubscribeToTopic+0x9a>
        }

    } while( xFailedSubscribeToTopic == true  );
 8001bda:	7dbb      	ldrb	r3, [r7, #22]
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d1d4      	bne.n	8001b8a <prvMQTTSubscribeToTopic+0x42>
}
 8001be0:	bf00      	nop
 8001be2:	bf00      	nop
 8001be4:	3718      	adds	r7, #24
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}
 8001bea:	bf00      	nop
 8001bec:	20000bb8 	.word	0x20000bb8
 8001bf0:	08013ec8 	.word	0x08013ec8
 8001bf4:	08013ef4 	.word	0x08013ef4
 8001bf8:	20000008 	.word	0x20000008

08001bfc <prvMQTTProcessIncomingPublish>:

void prvMQTTProcessIncomingPublish( MQTTPublishInfo_t *pxPublishInfo )
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b0c2      	sub	sp, #264	; 0x108
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001c06:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001c0a:	6018      	str	r0, [r3, #0]
	char buffer1[128];
	char buffer2[128];
    const char * pTopicName;

	// pPayload no termina en \0, hay que copiarlo en un buffer para imprimirlo. Lo mismo con pTopicName
	memcpy(buffer1,pxPublishInfo->pPayload,min(127,pxPublishInfo->payloadLength));
 8001c0c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001c10:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	68d9      	ldr	r1, [r3, #12]
 8001c18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001c1c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	691b      	ldr	r3, [r3, #16]
 8001c24:	2b7f      	cmp	r3, #127	; 0x7f
 8001c26:	bf28      	it	cs
 8001c28:	237f      	movcs	r3, #127	; 0x7f
 8001c2a:	461a      	mov	r2, r3
 8001c2c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001c30:	4618      	mov	r0, r3
 8001c32:	f010 fb46 	bl	80122c2 <memcpy>
	buffer1[min(1023,pxPublishInfo->payloadLength)]='\0';
 8001c36:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001c3a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	691b      	ldr	r3, [r3, #16]
 8001c42:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8001c46:	4293      	cmp	r3, r2
 8001c48:	bf28      	it	cs
 8001c4a:	4613      	movcs	r3, r2
 8001c4c:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8001c50:	443b      	add	r3, r7
 8001c52:	2200      	movs	r2, #0
 8001c54:	f803 2c80 	strb.w	r2, [r3, #-128]
	memcpy(buffer2,pxPublishInfo->pTopicName,min(127,pxPublishInfo->topicNameLength));
 8001c58:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001c5c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	6859      	ldr	r1, [r3, #4]
 8001c64:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001c68:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	891b      	ldrh	r3, [r3, #8]
 8001c70:	2b7f      	cmp	r3, #127	; 0x7f
 8001c72:	bf28      	it	cs
 8001c74:	237f      	movcs	r3, #127	; 0x7f
 8001c76:	b29b      	uxth	r3, r3
 8001c78:	461a      	mov	r2, r3
 8001c7a:	f107 0308 	add.w	r3, r7, #8
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f010 fb1f 	bl	80122c2 <memcpy>
	buffer2[min(1023,pxPublishInfo->topicNameLength)]='\0';
 8001c84:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001c88:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	891b      	ldrh	r3, [r3, #8]
 8001c90:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8001c94:	4293      	cmp	r3, r2
 8001c96:	bf28      	it	cs
 8001c98:	4613      	movcs	r3, r2
 8001c9a:	b29b      	uxth	r3, r3
 8001c9c:	461a      	mov	r2, r3
 8001c9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001ca2:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001ca6:	2100      	movs	r1, #0
 8001ca8:	5499      	strb	r1, [r3, r2]

	printf("Topic \"%s\": publicado \"%s\"\n",buffer2,buffer1);
 8001caa:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001cae:	f107 0308 	add.w	r3, r7, #8
 8001cb2:	4619      	mov	r1, r3
 8001cb4:	4803      	ldr	r0, [pc, #12]	; (8001cc4 <prvMQTTProcessIncomingPublish+0xc8>)
 8001cb6:	f010 feb7 	bl	8012a28 <iprintf>

  // Actuar localmente sobre los LEDs o alguna otra cosa
	//if(buffer1[0]=='1') BSP_LED_On(LED2);
	//if(buffer1[0]=='0') BSP_LED_Off(LED2);

}
 8001cba:	bf00      	nop
 8001cbc:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bd80      	pop	{r7, pc}
 8001cc4:	08013f1c 	.word	0x08013f1c

08001cc8 <prvGetTimeMs>:

uint32_t prvGetTimeMs( void )
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b082      	sub	sp, #8
 8001ccc:	af00      	add	r7, sp, #0
#define MILLISECONDS_PER_TICK                             ( 1000 / configTICK_RATE_HZ )
    TickType_t xTickCount = 0;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	607b      	str	r3, [r7, #4]
    uint32_t ulTimeMs = 0UL;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	603b      	str	r3, [r7, #0]

    /* Get the current tick count. */
    xTickCount = xTaskGetTickCount();
 8001cd6:	f00e fbcb 	bl	8010470 <xTaskGetTickCount>
 8001cda:	6078      	str	r0, [r7, #4]

    /* Convert the ticks to milliseconds. */
    ulTimeMs = ( uint32_t ) xTickCount * MILLISECONDS_PER_TICK;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	603b      	str	r3, [r7, #0]

    /* Reduce ulGlobalEntryTimeMs from obtained time so as to always return the
     * elapsed time in the application. */
    ulTimeMs = ( uint32_t ) ( ulTimeMs - ulGlobalEntryTimeMs );
 8001ce0:	4b04      	ldr	r3, [pc, #16]	; (8001cf4 <prvGetTimeMs+0x2c>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	683a      	ldr	r2, [r7, #0]
 8001ce6:	1ad3      	subs	r3, r2, r3
 8001ce8:	603b      	str	r3, [r7, #0]

    return ulTimeMs;
 8001cea:	683b      	ldr	r3, [r7, #0]
}
 8001cec:	4618      	mov	r0, r3
 8001cee:	3708      	adds	r7, #8
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bd80      	pop	{r7, pc}
 8001cf4:	20000bbc 	.word	0x20000bbc

08001cf8 <prvEventCallback>:

void prvEventCallback( MQTTContext_t * pxMQTTContext,
                              MQTTPacketInfo_t * pxPacketInfo,
                              MQTTDeserializedInfo_t * pxDeserializedInfo )
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b084      	sub	sp, #16
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	60f8      	str	r0, [r7, #12]
 8001d00:	60b9      	str	r1, [r7, #8]
 8001d02:	607a      	str	r2, [r7, #4]
    /* The MQTT context is not used for this demo. */
    ( void ) pxMQTTContext;

    if( ( pxPacketInfo->type & 0xF0U ) == MQTT_PACKET_TYPE_PUBLISH )
 8001d04:	68bb      	ldr	r3, [r7, #8]
 8001d06:	781b      	ldrb	r3, [r3, #0]
 8001d08:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001d0c:	2b30      	cmp	r3, #48	; 0x30
 8001d0e:	d104      	bne.n	8001d1a <prvEventCallback+0x22>
    {
    	// procesar un paquete PUBLISH recibido,
    	//por ejemplo llamando a la función prvMQTTProcessIncomingPublish, que hay que desarrollar
      prvMQTTProcessIncomingPublish( pxDeserializedInfo->pPublishInfo );
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	4618      	mov	r0, r3
 8001d16:	f7ff ff71 	bl	8001bfc <prvMQTTProcessIncomingPublish>
    {
       // también se podría hacer algo con otros paquetes si fuera necesario
    	 //prvMQTTProcessResponse( pxPacketInfo, pxDeserializedInfo->packetIdentifier );
    }

}
 8001d1a:	bf00      	nop
 8001d1c:	3710      	adds	r7, #16
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}
	...

08001d24 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b082      	sub	sp, #8
 8001d28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d2a:	4b11      	ldr	r3, [pc, #68]	; (8001d70 <HAL_MspInit+0x4c>)
 8001d2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d2e:	4a10      	ldr	r2, [pc, #64]	; (8001d70 <HAL_MspInit+0x4c>)
 8001d30:	f043 0301 	orr.w	r3, r3, #1
 8001d34:	6613      	str	r3, [r2, #96]	; 0x60
 8001d36:	4b0e      	ldr	r3, [pc, #56]	; (8001d70 <HAL_MspInit+0x4c>)
 8001d38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d3a:	f003 0301 	and.w	r3, r3, #1
 8001d3e:	607b      	str	r3, [r7, #4]
 8001d40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d42:	4b0b      	ldr	r3, [pc, #44]	; (8001d70 <HAL_MspInit+0x4c>)
 8001d44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d46:	4a0a      	ldr	r2, [pc, #40]	; (8001d70 <HAL_MspInit+0x4c>)
 8001d48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d4c:	6593      	str	r3, [r2, #88]	; 0x58
 8001d4e:	4b08      	ldr	r3, [pc, #32]	; (8001d70 <HAL_MspInit+0x4c>)
 8001d50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d56:	603b      	str	r3, [r7, #0]
 8001d58:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	210f      	movs	r1, #15
 8001d5e:	f06f 0001 	mvn.w	r0, #1
 8001d62:	f000 fe41 	bl	80029e8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d66:	bf00      	nop
 8001d68:	3708      	adds	r7, #8
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bd80      	pop	{r7, pc}
 8001d6e:	bf00      	nop
 8001d70:	40021000 	.word	0x40021000

08001d74 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b0ac      	sub	sp, #176	; 0xb0
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d7c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001d80:	2200      	movs	r2, #0
 8001d82:	601a      	str	r2, [r3, #0]
 8001d84:	605a      	str	r2, [r3, #4]
 8001d86:	609a      	str	r2, [r3, #8]
 8001d88:	60da      	str	r2, [r3, #12]
 8001d8a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001d8c:	f107 0314 	add.w	r3, r7, #20
 8001d90:	2288      	movs	r2, #136	; 0x88
 8001d92:	2100      	movs	r1, #0
 8001d94:	4618      	mov	r0, r3
 8001d96:	f010 fabc 	bl	8012312 <memset>
  if(DFSDM1_Init == 0)
 8001d9a:	4b25      	ldr	r3, [pc, #148]	; (8001e30 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d142      	bne.n	8001e28 <HAL_DFSDM_ChannelMspInit+0xb4>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8001da2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001da6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8001da8:	2300      	movs	r3, #0
 8001daa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001dae:	f107 0314 	add.w	r3, r7, #20
 8001db2:	4618      	mov	r0, r3
 8001db4:	f003 f90a 	bl	8004fcc <HAL_RCCEx_PeriphCLKConfig>
 8001db8:	4603      	mov	r3, r0
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d001      	beq.n	8001dc2 <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 8001dbe:	f7ff fdf5 	bl	80019ac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8001dc2:	4b1c      	ldr	r3, [pc, #112]	; (8001e34 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001dc4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001dc6:	4a1b      	ldr	r2, [pc, #108]	; (8001e34 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001dc8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001dcc:	6613      	str	r3, [r2, #96]	; 0x60
 8001dce:	4b19      	ldr	r3, [pc, #100]	; (8001e34 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001dd0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001dd2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001dd6:	613b      	str	r3, [r7, #16]
 8001dd8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001dda:	4b16      	ldr	r3, [pc, #88]	; (8001e34 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001ddc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dde:	4a15      	ldr	r2, [pc, #84]	; (8001e34 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001de0:	f043 0310 	orr.w	r3, r3, #16
 8001de4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001de6:	4b13      	ldr	r3, [pc, #76]	; (8001e34 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001de8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dea:	f003 0310 	and.w	r3, r3, #16
 8001dee:	60fb      	str	r3, [r7, #12]
 8001df0:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 8001df2:	f44f 7320 	mov.w	r3, #640	; 0x280
 8001df6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dfa:	2302      	movs	r3, #2
 8001dfc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e00:	2300      	movs	r3, #0
 8001e02:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e06:	2300      	movs	r3, #0
 8001e08:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8001e0c:	2306      	movs	r3, #6
 8001e0e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001e12:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001e16:	4619      	mov	r1, r3
 8001e18:	4807      	ldr	r0, [pc, #28]	; (8001e38 <HAL_DFSDM_ChannelMspInit+0xc4>)
 8001e1a:	f000 ffa9 	bl	8002d70 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8001e1e:	4b04      	ldr	r3, [pc, #16]	; (8001e30 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	3301      	adds	r3, #1
 8001e24:	4a02      	ldr	r2, [pc, #8]	; (8001e30 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8001e26:	6013      	str	r3, [r2, #0]
  }

}
 8001e28:	bf00      	nop
 8001e2a:	37b0      	adds	r7, #176	; 0xb0
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bd80      	pop	{r7, pc}
 8001e30:	20000bc0 	.word	0x20000bc0
 8001e34:	40021000 	.word	0x40021000
 8001e38:	48001000 	.word	0x48001000

08001e3c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b0ac      	sub	sp, #176	; 0xb0
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e44:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001e48:	2200      	movs	r2, #0
 8001e4a:	601a      	str	r2, [r3, #0]
 8001e4c:	605a      	str	r2, [r3, #4]
 8001e4e:	609a      	str	r2, [r3, #8]
 8001e50:	60da      	str	r2, [r3, #12]
 8001e52:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001e54:	f107 0314 	add.w	r3, r7, #20
 8001e58:	2288      	movs	r2, #136	; 0x88
 8001e5a:	2100      	movs	r1, #0
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	f010 fa58 	bl	8012312 <memset>
  if(hi2c->Instance==I2C2)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	4a21      	ldr	r2, [pc, #132]	; (8001eec <HAL_I2C_MspInit+0xb0>)
 8001e68:	4293      	cmp	r3, r2
 8001e6a:	d13b      	bne.n	8001ee4 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001e6c:	2380      	movs	r3, #128	; 0x80
 8001e6e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001e70:	2300      	movs	r3, #0
 8001e72:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e74:	f107 0314 	add.w	r3, r7, #20
 8001e78:	4618      	mov	r0, r3
 8001e7a:	f003 f8a7 	bl	8004fcc <HAL_RCCEx_PeriphCLKConfig>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d001      	beq.n	8001e88 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001e84:	f7ff fd92 	bl	80019ac <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e88:	4b19      	ldr	r3, [pc, #100]	; (8001ef0 <HAL_I2C_MspInit+0xb4>)
 8001e8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e8c:	4a18      	ldr	r2, [pc, #96]	; (8001ef0 <HAL_I2C_MspInit+0xb4>)
 8001e8e:	f043 0302 	orr.w	r3, r3, #2
 8001e92:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e94:	4b16      	ldr	r3, [pc, #88]	; (8001ef0 <HAL_I2C_MspInit+0xb4>)
 8001e96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e98:	f003 0302 	and.w	r3, r3, #2
 8001e9c:	613b      	str	r3, [r7, #16]
 8001e9e:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8001ea0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001ea4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ea8:	2312      	movs	r3, #18
 8001eaa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001eb4:	2303      	movs	r3, #3
 8001eb6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001eba:	2304      	movs	r3, #4
 8001ebc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ec0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001ec4:	4619      	mov	r1, r3
 8001ec6:	480b      	ldr	r0, [pc, #44]	; (8001ef4 <HAL_I2C_MspInit+0xb8>)
 8001ec8:	f000 ff52 	bl	8002d70 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001ecc:	4b08      	ldr	r3, [pc, #32]	; (8001ef0 <HAL_I2C_MspInit+0xb4>)
 8001ece:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ed0:	4a07      	ldr	r2, [pc, #28]	; (8001ef0 <HAL_I2C_MspInit+0xb4>)
 8001ed2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001ed6:	6593      	str	r3, [r2, #88]	; 0x58
 8001ed8:	4b05      	ldr	r3, [pc, #20]	; (8001ef0 <HAL_I2C_MspInit+0xb4>)
 8001eda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001edc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ee0:	60fb      	str	r3, [r7, #12]
 8001ee2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001ee4:	bf00      	nop
 8001ee6:	37b0      	adds	r7, #176	; 0xb0
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bd80      	pop	{r7, pc}
 8001eec:	40005800 	.word	0x40005800
 8001ef0:	40021000 	.word	0x40021000
 8001ef4:	48000400 	.word	0x48000400

08001ef8 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b082      	sub	sp, #8
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C2)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4a0b      	ldr	r2, [pc, #44]	; (8001f34 <HAL_I2C_MspDeInit+0x3c>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d10f      	bne.n	8001f2a <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 8001f0a:	4b0b      	ldr	r3, [pc, #44]	; (8001f38 <HAL_I2C_MspDeInit+0x40>)
 8001f0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f0e:	4a0a      	ldr	r2, [pc, #40]	; (8001f38 <HAL_I2C_MspDeInit+0x40>)
 8001f10:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001f14:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    HAL_GPIO_DeInit(INTERNAL_I2C2_SCL_GPIO_Port, INTERNAL_I2C2_SCL_Pin);
 8001f16:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f1a:	4808      	ldr	r0, [pc, #32]	; (8001f3c <HAL_I2C_MspDeInit+0x44>)
 8001f1c:	f001 f8d2 	bl	80030c4 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(INTERNAL_I2C2_SDA_GPIO_Port, INTERNAL_I2C2_SDA_Pin);
 8001f20:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f24:	4805      	ldr	r0, [pc, #20]	; (8001f3c <HAL_I2C_MspDeInit+0x44>)
 8001f26:	f001 f8cd 	bl	80030c4 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 8001f2a:	bf00      	nop
 8001f2c:	3708      	adds	r7, #8
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}
 8001f32:	bf00      	nop
 8001f34:	40005800 	.word	0x40005800
 8001f38:	40021000 	.word	0x40021000
 8001f3c:	48000400 	.word	0x48000400

08001f40 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b08a      	sub	sp, #40	; 0x28
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f48:	f107 0314 	add.w	r3, r7, #20
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	601a      	str	r2, [r3, #0]
 8001f50:	605a      	str	r2, [r3, #4]
 8001f52:	609a      	str	r2, [r3, #8]
 8001f54:	60da      	str	r2, [r3, #12]
 8001f56:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4a17      	ldr	r2, [pc, #92]	; (8001fbc <HAL_QSPI_MspInit+0x7c>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d128      	bne.n	8001fb4 <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001f62:	4b17      	ldr	r3, [pc, #92]	; (8001fc0 <HAL_QSPI_MspInit+0x80>)
 8001f64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f66:	4a16      	ldr	r2, [pc, #88]	; (8001fc0 <HAL_QSPI_MspInit+0x80>)
 8001f68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f6c:	6513      	str	r3, [r2, #80]	; 0x50
 8001f6e:	4b14      	ldr	r3, [pc, #80]	; (8001fc0 <HAL_QSPI_MspInit+0x80>)
 8001f70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f76:	613b      	str	r3, [r7, #16]
 8001f78:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001f7a:	4b11      	ldr	r3, [pc, #68]	; (8001fc0 <HAL_QSPI_MspInit+0x80>)
 8001f7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f7e:	4a10      	ldr	r2, [pc, #64]	; (8001fc0 <HAL_QSPI_MspInit+0x80>)
 8001f80:	f043 0310 	orr.w	r3, r3, #16
 8001f84:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f86:	4b0e      	ldr	r3, [pc, #56]	; (8001fc0 <HAL_QSPI_MspInit+0x80>)
 8001f88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f8a:	f003 0310 	and.w	r3, r3, #16
 8001f8e:	60fb      	str	r3, [r7, #12]
 8001f90:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 8001f92:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8001f96:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f98:	2302      	movs	r3, #2
 8001f9a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fa0:	2303      	movs	r3, #3
 8001fa2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001fa4:	230a      	movs	r3, #10
 8001fa6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001fa8:	f107 0314 	add.w	r3, r7, #20
 8001fac:	4619      	mov	r1, r3
 8001fae:	4805      	ldr	r0, [pc, #20]	; (8001fc4 <HAL_QSPI_MspInit+0x84>)
 8001fb0:	f000 fede 	bl	8002d70 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8001fb4:	bf00      	nop
 8001fb6:	3728      	adds	r7, #40	; 0x28
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bd80      	pop	{r7, pc}
 8001fbc:	a0001000 	.word	0xa0001000
 8001fc0:	40021000 	.word	0x40021000
 8001fc4:	48001000 	.word	0x48001000

08001fc8 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b0a4      	sub	sp, #144	; 0x90
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001fd0:	f107 0308 	add.w	r3, r7, #8
 8001fd4:	2288      	movs	r2, #136	; 0x88
 8001fd6:	2100      	movs	r1, #0
 8001fd8:	4618      	mov	r0, r3
 8001fda:	f010 f99a 	bl	8012312 <memset>
  if(hrtc->Instance==RTC)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4a10      	ldr	r2, [pc, #64]	; (8002024 <HAL_RTC_MspInit+0x5c>)
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d118      	bne.n	800201a <HAL_RTC_MspInit+0x52>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001fe8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001fec:	60bb      	str	r3, [r7, #8]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001fee:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ff2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ff6:	f107 0308 	add.w	r3, r7, #8
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	f002 ffe6 	bl	8004fcc <HAL_RCCEx_PeriphCLKConfig>
 8002000:	4603      	mov	r3, r0
 8002002:	2b00      	cmp	r3, #0
 8002004:	d001      	beq.n	800200a <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8002006:	f7ff fcd1 	bl	80019ac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800200a:	4b07      	ldr	r3, [pc, #28]	; (8002028 <HAL_RTC_MspInit+0x60>)
 800200c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002010:	4a05      	ldr	r2, [pc, #20]	; (8002028 <HAL_RTC_MspInit+0x60>)
 8002012:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002016:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800201a:	bf00      	nop
 800201c:	3790      	adds	r7, #144	; 0x90
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}
 8002022:	bf00      	nop
 8002024:	40002800 	.word	0x40002800
 8002028:	40021000 	.word	0x40021000

0800202c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b08a      	sub	sp, #40	; 0x28
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002034:	f107 0314 	add.w	r3, r7, #20
 8002038:	2200      	movs	r2, #0
 800203a:	601a      	str	r2, [r3, #0]
 800203c:	605a      	str	r2, [r3, #4]
 800203e:	609a      	str	r2, [r3, #8]
 8002040:	60da      	str	r2, [r3, #12]
 8002042:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4a1b      	ldr	r2, [pc, #108]	; (80020b8 <HAL_SPI_MspInit+0x8c>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d130      	bne.n	80020b0 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800204e:	4b1b      	ldr	r3, [pc, #108]	; (80020bc <HAL_SPI_MspInit+0x90>)
 8002050:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002052:	4a1a      	ldr	r2, [pc, #104]	; (80020bc <HAL_SPI_MspInit+0x90>)
 8002054:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002058:	6593      	str	r3, [r2, #88]	; 0x58
 800205a:	4b18      	ldr	r3, [pc, #96]	; (80020bc <HAL_SPI_MspInit+0x90>)
 800205c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800205e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002062:	613b      	str	r3, [r7, #16]
 8002064:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002066:	4b15      	ldr	r3, [pc, #84]	; (80020bc <HAL_SPI_MspInit+0x90>)
 8002068:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800206a:	4a14      	ldr	r2, [pc, #80]	; (80020bc <HAL_SPI_MspInit+0x90>)
 800206c:	f043 0304 	orr.w	r3, r3, #4
 8002070:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002072:	4b12      	ldr	r3, [pc, #72]	; (80020bc <HAL_SPI_MspInit+0x90>)
 8002074:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002076:	f003 0304 	and.w	r3, r3, #4
 800207a:	60fb      	str	r3, [r7, #12]
 800207c:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 800207e:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8002082:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002084:	2302      	movs	r3, #2
 8002086:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002088:	2300      	movs	r3, #0
 800208a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800208c:	2303      	movs	r3, #3
 800208e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002090:	2306      	movs	r3, #6
 8002092:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002094:	f107 0314 	add.w	r3, r7, #20
 8002098:	4619      	mov	r1, r3
 800209a:	4809      	ldr	r0, [pc, #36]	; (80020c0 <HAL_SPI_MspInit+0x94>)
 800209c:	f000 fe68 	bl	8002d70 <HAL_GPIO_Init>

    /* SPI3 interrupt Init */
    HAL_NVIC_SetPriority(SPI3_IRQn, 5, 0);
 80020a0:	2200      	movs	r2, #0
 80020a2:	2105      	movs	r1, #5
 80020a4:	2033      	movs	r0, #51	; 0x33
 80020a6:	f000 fc9f 	bl	80029e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 80020aa:	2033      	movs	r0, #51	; 0x33
 80020ac:	f000 fcb8 	bl	8002a20 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80020b0:	bf00      	nop
 80020b2:	3728      	adds	r7, #40	; 0x28
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bd80      	pop	{r7, pc}
 80020b8:	40003c00 	.word	0x40003c00
 80020bc:	40021000 	.word	0x40021000
 80020c0:	48000800 	.word	0x48000800

080020c4 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b082      	sub	sp, #8
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI3)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4a0a      	ldr	r2, [pc, #40]	; (80020fc <HAL_SPI_MspDeInit+0x38>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d10d      	bne.n	80020f2 <HAL_SPI_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN SPI3_MspDeInit 0 */

  /* USER CODE END SPI3_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI3_CLK_DISABLE();
 80020d6:	4b0a      	ldr	r3, [pc, #40]	; (8002100 <HAL_SPI_MspDeInit+0x3c>)
 80020d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020da:	4a09      	ldr	r2, [pc, #36]	; (8002100 <HAL_SPI_MspDeInit+0x3c>)
 80020dc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80020e0:	6593      	str	r3, [r2, #88]	; 0x58
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    HAL_GPIO_DeInit(GPIOC, INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin);
 80020e2:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 80020e6:	4807      	ldr	r0, [pc, #28]	; (8002104 <HAL_SPI_MspDeInit+0x40>)
 80020e8:	f000 ffec 	bl	80030c4 <HAL_GPIO_DeInit>

    /* SPI3 interrupt DeInit */
    HAL_NVIC_DisableIRQ(SPI3_IRQn);
 80020ec:	2033      	movs	r0, #51	; 0x33
 80020ee:	f000 fca5 	bl	8002a3c <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN SPI3_MspDeInit 1 */

  /* USER CODE END SPI3_MspDeInit 1 */
  }

}
 80020f2:	bf00      	nop
 80020f4:	3708      	adds	r7, #8
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}
 80020fa:	bf00      	nop
 80020fc:	40003c00 	.word	0x40003c00
 8002100:	40021000 	.word	0x40021000
 8002104:	48000800 	.word	0x48000800

08002108 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b084      	sub	sp, #16
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4a0d      	ldr	r2, [pc, #52]	; (800214c <HAL_TIM_Base_MspInit+0x44>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d113      	bne.n	8002142 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 800211a:	4b0d      	ldr	r3, [pc, #52]	; (8002150 <HAL_TIM_Base_MspInit+0x48>)
 800211c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800211e:	4a0c      	ldr	r2, [pc, #48]	; (8002150 <HAL_TIM_Base_MspInit+0x48>)
 8002120:	f043 0320 	orr.w	r3, r3, #32
 8002124:	6593      	str	r3, [r2, #88]	; 0x58
 8002126:	4b0a      	ldr	r3, [pc, #40]	; (8002150 <HAL_TIM_Base_MspInit+0x48>)
 8002128:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800212a:	f003 0320 	and.w	r3, r3, #32
 800212e:	60fb      	str	r3, [r7, #12]
 8002130:	68fb      	ldr	r3, [r7, #12]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 5, 0);
 8002132:	2200      	movs	r2, #0
 8002134:	2105      	movs	r1, #5
 8002136:	2037      	movs	r0, #55	; 0x37
 8002138:	f000 fc56 	bl	80029e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800213c:	2037      	movs	r0, #55	; 0x37
 800213e:	f000 fc6f 	bl	8002a20 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8002142:	bf00      	nop
 8002144:	3710      	adds	r7, #16
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}
 800214a:	bf00      	nop
 800214c:	40001400 	.word	0x40001400
 8002150:	40021000 	.word	0x40021000

08002154 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b0ae      	sub	sp, #184	; 0xb8
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800215c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002160:	2200      	movs	r2, #0
 8002162:	601a      	str	r2, [r3, #0]
 8002164:	605a      	str	r2, [r3, #4]
 8002166:	609a      	str	r2, [r3, #8]
 8002168:	60da      	str	r2, [r3, #12]
 800216a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800216c:	f107 031c 	add.w	r3, r7, #28
 8002170:	2288      	movs	r2, #136	; 0x88
 8002172:	2100      	movs	r1, #0
 8002174:	4618      	mov	r0, r3
 8002176:	f010 f8cc 	bl	8012312 <memset>
  if(huart->Instance==USART1)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4a46      	ldr	r2, [pc, #280]	; (8002298 <HAL_UART_MspInit+0x144>)
 8002180:	4293      	cmp	r3, r2
 8002182:	d143      	bne.n	800220c <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002184:	2301      	movs	r3, #1
 8002186:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002188:	2300      	movs	r3, #0
 800218a:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800218c:	f107 031c 	add.w	r3, r7, #28
 8002190:	4618      	mov	r0, r3
 8002192:	f002 ff1b 	bl	8004fcc <HAL_RCCEx_PeriphCLKConfig>
 8002196:	4603      	mov	r3, r0
 8002198:	2b00      	cmp	r3, #0
 800219a:	d001      	beq.n	80021a0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800219c:	f7ff fc06 	bl	80019ac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80021a0:	4b3e      	ldr	r3, [pc, #248]	; (800229c <HAL_UART_MspInit+0x148>)
 80021a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021a4:	4a3d      	ldr	r2, [pc, #244]	; (800229c <HAL_UART_MspInit+0x148>)
 80021a6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021aa:	6613      	str	r3, [r2, #96]	; 0x60
 80021ac:	4b3b      	ldr	r3, [pc, #236]	; (800229c <HAL_UART_MspInit+0x148>)
 80021ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021b4:	61bb      	str	r3, [r7, #24]
 80021b6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021b8:	4b38      	ldr	r3, [pc, #224]	; (800229c <HAL_UART_MspInit+0x148>)
 80021ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021bc:	4a37      	ldr	r2, [pc, #220]	; (800229c <HAL_UART_MspInit+0x148>)
 80021be:	f043 0302 	orr.w	r3, r3, #2
 80021c2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80021c4:	4b35      	ldr	r3, [pc, #212]	; (800229c <HAL_UART_MspInit+0x148>)
 80021c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021c8:	f003 0302 	and.w	r3, r3, #2
 80021cc:	617b      	str	r3, [r7, #20]
 80021ce:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 80021d0:	23c0      	movs	r3, #192	; 0xc0
 80021d2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021d6:	2302      	movs	r3, #2
 80021d8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021dc:	2300      	movs	r3, #0
 80021de:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021e2:	2303      	movs	r3, #3
 80021e4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80021e8:	2307      	movs	r3, #7
 80021ea:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021ee:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80021f2:	4619      	mov	r1, r3
 80021f4:	482a      	ldr	r0, [pc, #168]	; (80022a0 <HAL_UART_MspInit+0x14c>)
 80021f6:	f000 fdbb 	bl	8002d70 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80021fa:	2200      	movs	r2, #0
 80021fc:	2105      	movs	r1, #5
 80021fe:	2025      	movs	r0, #37	; 0x25
 8002200:	f000 fbf2 	bl	80029e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002204:	2025      	movs	r0, #37	; 0x25
 8002206:	f000 fc0b 	bl	8002a20 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800220a:	e040      	b.n	800228e <HAL_UART_MspInit+0x13a>
  else if(huart->Instance==USART3)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4a24      	ldr	r2, [pc, #144]	; (80022a4 <HAL_UART_MspInit+0x150>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d13b      	bne.n	800228e <HAL_UART_MspInit+0x13a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002216:	2304      	movs	r3, #4
 8002218:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800221a:	2300      	movs	r3, #0
 800221c:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800221e:	f107 031c 	add.w	r3, r7, #28
 8002222:	4618      	mov	r0, r3
 8002224:	f002 fed2 	bl	8004fcc <HAL_RCCEx_PeriphCLKConfig>
 8002228:	4603      	mov	r3, r0
 800222a:	2b00      	cmp	r3, #0
 800222c:	d001      	beq.n	8002232 <HAL_UART_MspInit+0xde>
      Error_Handler();
 800222e:	f7ff fbbd 	bl	80019ac <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002232:	4b1a      	ldr	r3, [pc, #104]	; (800229c <HAL_UART_MspInit+0x148>)
 8002234:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002236:	4a19      	ldr	r2, [pc, #100]	; (800229c <HAL_UART_MspInit+0x148>)
 8002238:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800223c:	6593      	str	r3, [r2, #88]	; 0x58
 800223e:	4b17      	ldr	r3, [pc, #92]	; (800229c <HAL_UART_MspInit+0x148>)
 8002240:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002242:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002246:	613b      	str	r3, [r7, #16]
 8002248:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800224a:	4b14      	ldr	r3, [pc, #80]	; (800229c <HAL_UART_MspInit+0x148>)
 800224c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800224e:	4a13      	ldr	r2, [pc, #76]	; (800229c <HAL_UART_MspInit+0x148>)
 8002250:	f043 0308 	orr.w	r3, r3, #8
 8002254:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002256:	4b11      	ldr	r3, [pc, #68]	; (800229c <HAL_UART_MspInit+0x148>)
 8002258:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800225a:	f003 0308 	and.w	r3, r3, #8
 800225e:	60fb      	str	r3, [r7, #12]
 8002260:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 8002262:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002266:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800226a:	2302      	movs	r3, #2
 800226c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002270:	2300      	movs	r3, #0
 8002272:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002276:	2303      	movs	r3, #3
 8002278:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800227c:	2307      	movs	r3, #7
 800227e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002282:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002286:	4619      	mov	r1, r3
 8002288:	4807      	ldr	r0, [pc, #28]	; (80022a8 <HAL_UART_MspInit+0x154>)
 800228a:	f000 fd71 	bl	8002d70 <HAL_GPIO_Init>
}
 800228e:	bf00      	nop
 8002290:	37b8      	adds	r7, #184	; 0xb8
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}
 8002296:	bf00      	nop
 8002298:	40013800 	.word	0x40013800
 800229c:	40021000 	.word	0x40021000
 80022a0:	48000400 	.word	0x48000400
 80022a4:	40004800 	.word	0x40004800
 80022a8:	48000c00 	.word	0x48000c00

080022ac <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b0ac      	sub	sp, #176	; 0xb0
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022b4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80022b8:	2200      	movs	r2, #0
 80022ba:	601a      	str	r2, [r3, #0]
 80022bc:	605a      	str	r2, [r3, #4]
 80022be:	609a      	str	r2, [r3, #8]
 80022c0:	60da      	str	r2, [r3, #12]
 80022c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80022c4:	f107 0314 	add.w	r3, r7, #20
 80022c8:	2288      	movs	r2, #136	; 0x88
 80022ca:	2100      	movs	r1, #0
 80022cc:	4618      	mov	r0, r3
 80022ce:	f010 f820 	bl	8012312 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80022da:	d17c      	bne.n	80023d6 <HAL_PCD_MspInit+0x12a>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80022dc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80022e0:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 80022e2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80022e6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80022ea:	2301      	movs	r3, #1
 80022ec:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80022ee:	2301      	movs	r3, #1
 80022f0:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 80022f2:	2318      	movs	r3, #24
 80022f4:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80022f6:	2307      	movs	r3, #7
 80022f8:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80022fa:	2302      	movs	r3, #2
 80022fc:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80022fe:	2302      	movs	r3, #2
 8002300:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8002302:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002306:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002308:	f107 0314 	add.w	r3, r7, #20
 800230c:	4618      	mov	r0, r3
 800230e:	f002 fe5d 	bl	8004fcc <HAL_RCCEx_PeriphCLKConfig>
 8002312:	4603      	mov	r3, r0
 8002314:	2b00      	cmp	r3, #0
 8002316:	d001      	beq.n	800231c <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 8002318:	f7ff fb48 	bl	80019ac <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800231c:	4b30      	ldr	r3, [pc, #192]	; (80023e0 <HAL_PCD_MspInit+0x134>)
 800231e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002320:	4a2f      	ldr	r2, [pc, #188]	; (80023e0 <HAL_PCD_MspInit+0x134>)
 8002322:	f043 0301 	orr.w	r3, r3, #1
 8002326:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002328:	4b2d      	ldr	r3, [pc, #180]	; (80023e0 <HAL_PCD_MspInit+0x134>)
 800232a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800232c:	f003 0301 	and.w	r3, r3, #1
 8002330:	613b      	str	r3, [r7, #16]
 8002332:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 8002334:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002338:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800233c:	2300      	movs	r3, #0
 800233e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002342:	2300      	movs	r3, #0
 8002344:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002348:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800234c:	4619      	mov	r1, r3
 800234e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002352:	f000 fd0d 	bl	8002d70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8002356:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800235a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800235e:	2302      	movs	r3, #2
 8002360:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002364:	2300      	movs	r3, #0
 8002366:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800236a:	2303      	movs	r3, #3
 800236c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002370:	230a      	movs	r3, #10
 8002372:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002376:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800237a:	4619      	mov	r1, r3
 800237c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002380:	f000 fcf6 	bl	8002d70 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8002384:	4b16      	ldr	r3, [pc, #88]	; (80023e0 <HAL_PCD_MspInit+0x134>)
 8002386:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002388:	4a15      	ldr	r2, [pc, #84]	; (80023e0 <HAL_PCD_MspInit+0x134>)
 800238a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800238e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002390:	4b13      	ldr	r3, [pc, #76]	; (80023e0 <HAL_PCD_MspInit+0x134>)
 8002392:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002394:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002398:	60fb      	str	r3, [r7, #12]
 800239a:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800239c:	4b10      	ldr	r3, [pc, #64]	; (80023e0 <HAL_PCD_MspInit+0x134>)
 800239e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d114      	bne.n	80023d2 <HAL_PCD_MspInit+0x126>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023a8:	4b0d      	ldr	r3, [pc, #52]	; (80023e0 <HAL_PCD_MspInit+0x134>)
 80023aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023ac:	4a0c      	ldr	r2, [pc, #48]	; (80023e0 <HAL_PCD_MspInit+0x134>)
 80023ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023b2:	6593      	str	r3, [r2, #88]	; 0x58
 80023b4:	4b0a      	ldr	r3, [pc, #40]	; (80023e0 <HAL_PCD_MspInit+0x134>)
 80023b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023bc:	60bb      	str	r3, [r7, #8]
 80023be:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 80023c0:	f001 ff18 	bl	80041f4 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 80023c4:	4b06      	ldr	r3, [pc, #24]	; (80023e0 <HAL_PCD_MspInit+0x134>)
 80023c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023c8:	4a05      	ldr	r2, [pc, #20]	; (80023e0 <HAL_PCD_MspInit+0x134>)
 80023ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023ce:	6593      	str	r3, [r2, #88]	; 0x58
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80023d0:	e001      	b.n	80023d6 <HAL_PCD_MspInit+0x12a>
      HAL_PWREx_EnableVddUSB();
 80023d2:	f001 ff0f 	bl	80041f4 <HAL_PWREx_EnableVddUSB>
}
 80023d6:	bf00      	nop
 80023d8:	37b0      	adds	r7, #176	; 0xb0
 80023da:	46bd      	mov	sp, r7
 80023dc:	bd80      	pop	{r7, pc}
 80023de:	bf00      	nop
 80023e0:	40021000 	.word	0x40021000

080023e4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b08e      	sub	sp, #56	; 0x38
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80023ec:	2300      	movs	r3, #0
 80023ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80023f2:	4b34      	ldr	r3, [pc, #208]	; (80024c4 <HAL_InitTick+0xe0>)
 80023f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023f6:	4a33      	ldr	r2, [pc, #204]	; (80024c4 <HAL_InitTick+0xe0>)
 80023f8:	f043 0310 	orr.w	r3, r3, #16
 80023fc:	6593      	str	r3, [r2, #88]	; 0x58
 80023fe:	4b31      	ldr	r3, [pc, #196]	; (80024c4 <HAL_InitTick+0xe0>)
 8002400:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002402:	f003 0310 	and.w	r3, r3, #16
 8002406:	60fb      	str	r3, [r7, #12]
 8002408:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800240a:	f107 0210 	add.w	r2, r7, #16
 800240e:	f107 0314 	add.w	r3, r7, #20
 8002412:	4611      	mov	r1, r2
 8002414:	4618      	mov	r0, r3
 8002416:	f002 fd47 	bl	8004ea8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800241a:	6a3b      	ldr	r3, [r7, #32]
 800241c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800241e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002420:	2b00      	cmp	r3, #0
 8002422:	d103      	bne.n	800242c <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002424:	f002 fd14 	bl	8004e50 <HAL_RCC_GetPCLK1Freq>
 8002428:	6378      	str	r0, [r7, #52]	; 0x34
 800242a:	e004      	b.n	8002436 <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800242c:	f002 fd10 	bl	8004e50 <HAL_RCC_GetPCLK1Freq>
 8002430:	4603      	mov	r3, r0
 8002432:	005b      	lsls	r3, r3, #1
 8002434:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002436:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002438:	4a23      	ldr	r2, [pc, #140]	; (80024c8 <HAL_InitTick+0xe4>)
 800243a:	fba2 2303 	umull	r2, r3, r2, r3
 800243e:	0c9b      	lsrs	r3, r3, #18
 8002440:	3b01      	subs	r3, #1
 8002442:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002444:	4b21      	ldr	r3, [pc, #132]	; (80024cc <HAL_InitTick+0xe8>)
 8002446:	4a22      	ldr	r2, [pc, #136]	; (80024d0 <HAL_InitTick+0xec>)
 8002448:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800244a:	4b20      	ldr	r3, [pc, #128]	; (80024cc <HAL_InitTick+0xe8>)
 800244c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002450:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002452:	4a1e      	ldr	r2, [pc, #120]	; (80024cc <HAL_InitTick+0xe8>)
 8002454:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002456:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002458:	4b1c      	ldr	r3, [pc, #112]	; (80024cc <HAL_InitTick+0xe8>)
 800245a:	2200      	movs	r2, #0
 800245c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800245e:	4b1b      	ldr	r3, [pc, #108]	; (80024cc <HAL_InitTick+0xe8>)
 8002460:	2200      	movs	r2, #0
 8002462:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002464:	4b19      	ldr	r3, [pc, #100]	; (80024cc <HAL_InitTick+0xe8>)
 8002466:	2200      	movs	r2, #0
 8002468:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 800246a:	4818      	ldr	r0, [pc, #96]	; (80024cc <HAL_InitTick+0xe8>)
 800246c:	f005 f8c1 	bl	80075f2 <HAL_TIM_Base_Init>
 8002470:	4603      	mov	r3, r0
 8002472:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8002476:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800247a:	2b00      	cmp	r3, #0
 800247c:	d11b      	bne.n	80024b6 <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 800247e:	4813      	ldr	r0, [pc, #76]	; (80024cc <HAL_InitTick+0xe8>)
 8002480:	f005 f90e 	bl	80076a0 <HAL_TIM_Base_Start_IT>
 8002484:	4603      	mov	r3, r0
 8002486:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 800248a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800248e:	2b00      	cmp	r3, #0
 8002490:	d111      	bne.n	80024b6 <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002492:	2036      	movs	r0, #54	; 0x36
 8002494:	f000 fac4 	bl	8002a20 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2b0f      	cmp	r3, #15
 800249c:	d808      	bhi.n	80024b0 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 800249e:	2200      	movs	r2, #0
 80024a0:	6879      	ldr	r1, [r7, #4]
 80024a2:	2036      	movs	r0, #54	; 0x36
 80024a4:	f000 faa0 	bl	80029e8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80024a8:	4a0a      	ldr	r2, [pc, #40]	; (80024d4 <HAL_InitTick+0xf0>)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6013      	str	r3, [r2, #0]
 80024ae:	e002      	b.n	80024b6 <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 80024b0:	2301      	movs	r3, #1
 80024b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80024b6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80024ba:	4618      	mov	r0, r3
 80024bc:	3738      	adds	r7, #56	; 0x38
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}
 80024c2:	bf00      	nop
 80024c4:	40021000 	.word	0x40021000
 80024c8:	431bde83 	.word	0x431bde83
 80024cc:	20000bc4 	.word	0x20000bc4
 80024d0:	40001000 	.word	0x40001000
 80024d4:	20000014 	.word	0x20000014

080024d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80024d8:	b480      	push	{r7}
 80024da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80024dc:	e7fe      	b.n	80024dc <NMI_Handler+0x4>

080024de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80024de:	b480      	push	{r7}
 80024e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80024e2:	e7fe      	b.n	80024e2 <HardFault_Handler+0x4>

080024e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80024e4:	b480      	push	{r7}
 80024e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80024e8:	e7fe      	b.n	80024e8 <MemManage_Handler+0x4>

080024ea <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80024ea:	b480      	push	{r7}
 80024ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80024ee:	e7fe      	b.n	80024ee <BusFault_Handler+0x4>

080024f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80024f0:	b480      	push	{r7}
 80024f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80024f4:	e7fe      	b.n	80024f4 <UsageFault_Handler+0x4>

080024f6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80024f6:	b480      	push	{r7}
 80024f8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80024fa:	bf00      	nop
 80024fc:	46bd      	mov	sp, r7
 80024fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002502:	4770      	bx	lr

08002504 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ISM43362_DRDY_EXTI1_Pin);
 8002508:	2002      	movs	r0, #2
 800250a:	f000 feff 	bl	800330c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 800250e:	bf00      	nop
 8002510:	bd80      	pop	{r7, pc}

08002512 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002512:	b580      	push	{r7, lr}
 8002514:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 8002516:	2020      	movs	r0, #32
 8002518:	f000 fef8 	bl	800330c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SPBTLE_RF_IRQ_EXTI6_Pin);
 800251c:	2040      	movs	r0, #64	; 0x40
 800251e:	f000 fef5 	bl	800330c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 8002522:	2080      	movs	r0, #128	; 0x80
 8002524:	f000 fef2 	bl	800330c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 8002528:	f44f 7080 	mov.w	r0, #256	; 0x100
 800252c:	f000 feee 	bl	800330c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002530:	bf00      	nop
 8002532:	bd80      	pop	{r7, pc}

08002534 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002538:	4802      	ldr	r0, [pc, #8]	; (8002544 <USART1_IRQHandler+0x10>)
 800253a:	f005 fccf 	bl	8007edc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800253e:	bf00      	nop
 8002540:	bd80      	pop	{r7, pc}
 8002542:	bf00      	nop
 8002544:	20000270 	.word	0x20000270

08002548 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI0_Pin);
 800254c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002550:	f000 fedc 	bl	800330c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 8002554:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8002558:	f000 fed8 	bl	800330c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BOTON_Pin);
 800255c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002560:	f000 fed4 	bl	800330c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 8002564:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002568:	f000 fed0 	bl	800330c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 800256c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002570:	f000 fecc 	bl	800330c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002574:	bf00      	nop
 8002576:	bd80      	pop	{r7, pc}

08002578 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800257c:	4802      	ldr	r0, [pc, #8]	; (8002588 <TIM6_DAC_IRQHandler+0x10>)
 800257e:	f005 f8ff 	bl	8007780 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002582:	bf00      	nop
 8002584:	bd80      	pop	{r7, pc}
 8002586:	bf00      	nop
 8002588:	20000bc4 	.word	0x20000bc4

0800258c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */
  ulHighFrequencyTimerTicks++;
 8002590:	4b04      	ldr	r3, [pc, #16]	; (80025a4 <TIM7_IRQHandler+0x18>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	3301      	adds	r3, #1
 8002596:	4a03      	ldr	r2, [pc, #12]	; (80025a4 <TIM7_IRQHandler+0x18>)
 8002598:	6013      	str	r3, [r2, #0]
  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 800259a:	4803      	ldr	r0, [pc, #12]	; (80025a8 <TIM7_IRQHandler+0x1c>)
 800259c:	f005 f8f0 	bl	8007780 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80025a0:	bf00      	nop
 80025a2:	bd80      	pop	{r7, pc}
 80025a4:	200007c8 	.word	0x200007c8
 80025a8:	20000224 	.word	0x20000224

080025ac <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80025ac:	b480      	push	{r7}
 80025ae:	af00      	add	r7, sp, #0
  return 1;
 80025b0:	2301      	movs	r3, #1
}
 80025b2:	4618      	mov	r0, r3
 80025b4:	46bd      	mov	sp, r7
 80025b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ba:	4770      	bx	lr

080025bc <_kill>:

int _kill(int pid, int sig)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b082      	sub	sp, #8
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
 80025c4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80025c6:	f00f fd37 	bl	8012038 <__errno>
 80025ca:	4603      	mov	r3, r0
 80025cc:	2216      	movs	r2, #22
 80025ce:	601a      	str	r2, [r3, #0]
  return -1;
 80025d0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80025d4:	4618      	mov	r0, r3
 80025d6:	3708      	adds	r7, #8
 80025d8:	46bd      	mov	sp, r7
 80025da:	bd80      	pop	{r7, pc}

080025dc <_exit>:

void _exit (int status)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b082      	sub	sp, #8
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80025e4:	f04f 31ff 	mov.w	r1, #4294967295
 80025e8:	6878      	ldr	r0, [r7, #4]
 80025ea:	f7ff ffe7 	bl	80025bc <_kill>
  while (1) {}    /* Make sure we hang here */
 80025ee:	e7fe      	b.n	80025ee <_exit+0x12>

080025f0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b086      	sub	sp, #24
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	60f8      	str	r0, [r7, #12]
 80025f8:	60b9      	str	r1, [r7, #8]
 80025fa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025fc:	2300      	movs	r3, #0
 80025fe:	617b      	str	r3, [r7, #20]
 8002600:	e00a      	b.n	8002618 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002602:	f3af 8000 	nop.w
 8002606:	4601      	mov	r1, r0
 8002608:	68bb      	ldr	r3, [r7, #8]
 800260a:	1c5a      	adds	r2, r3, #1
 800260c:	60ba      	str	r2, [r7, #8]
 800260e:	b2ca      	uxtb	r2, r1
 8002610:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002612:	697b      	ldr	r3, [r7, #20]
 8002614:	3301      	adds	r3, #1
 8002616:	617b      	str	r3, [r7, #20]
 8002618:	697a      	ldr	r2, [r7, #20]
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	429a      	cmp	r2, r3
 800261e:	dbf0      	blt.n	8002602 <_read+0x12>
  }

  return len;
 8002620:	687b      	ldr	r3, [r7, #4]
}
 8002622:	4618      	mov	r0, r3
 8002624:	3718      	adds	r7, #24
 8002626:	46bd      	mov	sp, r7
 8002628:	bd80      	pop	{r7, pc}

0800262a <_close>:
  }
  return len;
}

int _close(int file)
{
 800262a:	b480      	push	{r7}
 800262c:	b083      	sub	sp, #12
 800262e:	af00      	add	r7, sp, #0
 8002630:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002632:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002636:	4618      	mov	r0, r3
 8002638:	370c      	adds	r7, #12
 800263a:	46bd      	mov	sp, r7
 800263c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002640:	4770      	bx	lr

08002642 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002642:	b480      	push	{r7}
 8002644:	b083      	sub	sp, #12
 8002646:	af00      	add	r7, sp, #0
 8002648:	6078      	str	r0, [r7, #4]
 800264a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002652:	605a      	str	r2, [r3, #4]
  return 0;
 8002654:	2300      	movs	r3, #0
}
 8002656:	4618      	mov	r0, r3
 8002658:	370c      	adds	r7, #12
 800265a:	46bd      	mov	sp, r7
 800265c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002660:	4770      	bx	lr

08002662 <_isatty>:

int _isatty(int file)
{
 8002662:	b480      	push	{r7}
 8002664:	b083      	sub	sp, #12
 8002666:	af00      	add	r7, sp, #0
 8002668:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800266a:	2301      	movs	r3, #1
}
 800266c:	4618      	mov	r0, r3
 800266e:	370c      	adds	r7, #12
 8002670:	46bd      	mov	sp, r7
 8002672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002676:	4770      	bx	lr

08002678 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002678:	b480      	push	{r7}
 800267a:	b085      	sub	sp, #20
 800267c:	af00      	add	r7, sp, #0
 800267e:	60f8      	str	r0, [r7, #12]
 8002680:	60b9      	str	r1, [r7, #8]
 8002682:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002684:	2300      	movs	r3, #0
}
 8002686:	4618      	mov	r0, r3
 8002688:	3714      	adds	r7, #20
 800268a:	46bd      	mov	sp, r7
 800268c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002690:	4770      	bx	lr
	...

08002694 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b086      	sub	sp, #24
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800269c:	4a14      	ldr	r2, [pc, #80]	; (80026f0 <_sbrk+0x5c>)
 800269e:	4b15      	ldr	r3, [pc, #84]	; (80026f4 <_sbrk+0x60>)
 80026a0:	1ad3      	subs	r3, r2, r3
 80026a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80026a4:	697b      	ldr	r3, [r7, #20]
 80026a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80026a8:	4b13      	ldr	r3, [pc, #76]	; (80026f8 <_sbrk+0x64>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d102      	bne.n	80026b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80026b0:	4b11      	ldr	r3, [pc, #68]	; (80026f8 <_sbrk+0x64>)
 80026b2:	4a12      	ldr	r2, [pc, #72]	; (80026fc <_sbrk+0x68>)
 80026b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80026b6:	4b10      	ldr	r3, [pc, #64]	; (80026f8 <_sbrk+0x64>)
 80026b8:	681a      	ldr	r2, [r3, #0]
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	4413      	add	r3, r2
 80026be:	693a      	ldr	r2, [r7, #16]
 80026c0:	429a      	cmp	r2, r3
 80026c2:	d207      	bcs.n	80026d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80026c4:	f00f fcb8 	bl	8012038 <__errno>
 80026c8:	4603      	mov	r3, r0
 80026ca:	220c      	movs	r2, #12
 80026cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80026ce:	f04f 33ff 	mov.w	r3, #4294967295
 80026d2:	e009      	b.n	80026e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80026d4:	4b08      	ldr	r3, [pc, #32]	; (80026f8 <_sbrk+0x64>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80026da:	4b07      	ldr	r3, [pc, #28]	; (80026f8 <_sbrk+0x64>)
 80026dc:	681a      	ldr	r2, [r3, #0]
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	4413      	add	r3, r2
 80026e2:	4a05      	ldr	r2, [pc, #20]	; (80026f8 <_sbrk+0x64>)
 80026e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80026e6:	68fb      	ldr	r3, [r7, #12]
}
 80026e8:	4618      	mov	r0, r3
 80026ea:	3718      	adds	r7, #24
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bd80      	pop	{r7, pc}
 80026f0:	20018000 	.word	0x20018000
 80026f4:	00000400 	.word	0x00000400
 80026f8:	20000c10 	.word	0x20000c10
 80026fc:	20004f30 	.word	0x20004f30

08002700 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002700:	b480      	push	{r7}
 8002702:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002704:	4b06      	ldr	r3, [pc, #24]	; (8002720 <SystemInit+0x20>)
 8002706:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800270a:	4a05      	ldr	r2, [pc, #20]	; (8002720 <SystemInit+0x20>)
 800270c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002710:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002714:	bf00      	nop
 8002716:	46bd      	mov	sp, r7
 8002718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271c:	4770      	bx	lr
 800271e:	bf00      	nop
 8002720:	e000ed00 	.word	0xe000ed00

08002724 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002724:	f8df d034 	ldr.w	sp, [pc, #52]	; 800275c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002728:	f7ff ffea 	bl	8002700 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800272c:	480c      	ldr	r0, [pc, #48]	; (8002760 <LoopForever+0x6>)
  ldr r1, =_edata
 800272e:	490d      	ldr	r1, [pc, #52]	; (8002764 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002730:	4a0d      	ldr	r2, [pc, #52]	; (8002768 <LoopForever+0xe>)
  movs r3, #0
 8002732:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002734:	e002      	b.n	800273c <LoopCopyDataInit>

08002736 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002736:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002738:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800273a:	3304      	adds	r3, #4

0800273c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800273c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800273e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002740:	d3f9      	bcc.n	8002736 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002742:	4a0a      	ldr	r2, [pc, #40]	; (800276c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002744:	4c0a      	ldr	r4, [pc, #40]	; (8002770 <LoopForever+0x16>)
  movs r3, #0
 8002746:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002748:	e001      	b.n	800274e <LoopFillZerobss>

0800274a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800274a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800274c:	3204      	adds	r2, #4

0800274e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800274e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002750:	d3fb      	bcc.n	800274a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002752:	f00f fd7f 	bl	8012254 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002756:	f7fd ff57 	bl	8000608 <main>

0800275a <LoopForever>:

LoopForever:
    b LoopForever
 800275a:	e7fe      	b.n	800275a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800275c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002760:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002764:	200000b8 	.word	0x200000b8
  ldr r2, =_sidata
 8002768:	0801554c 	.word	0x0801554c
  ldr r2, =_sbss
 800276c:	200000b8 	.word	0x200000b8
  ldr r4, =_ebss
 8002770:	20004f2c 	.word	0x20004f2c

08002774 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002774:	e7fe      	b.n	8002774 <ADC1_2_IRQHandler>

08002776 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002776:	b580      	push	{r7, lr}
 8002778:	b082      	sub	sp, #8
 800277a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800277c:	2300      	movs	r3, #0
 800277e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002780:	2003      	movs	r0, #3
 8002782:	f000 f926 	bl	80029d2 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002786:	200f      	movs	r0, #15
 8002788:	f7ff fe2c 	bl	80023e4 <HAL_InitTick>
 800278c:	4603      	mov	r3, r0
 800278e:	2b00      	cmp	r3, #0
 8002790:	d002      	beq.n	8002798 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002792:	2301      	movs	r3, #1
 8002794:	71fb      	strb	r3, [r7, #7]
 8002796:	e001      	b.n	800279c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002798:	f7ff fac4 	bl	8001d24 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800279c:	79fb      	ldrb	r3, [r7, #7]
}
 800279e:	4618      	mov	r0, r3
 80027a0:	3708      	adds	r7, #8
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bd80      	pop	{r7, pc}
	...

080027a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80027a8:	b480      	push	{r7}
 80027aa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80027ac:	4b06      	ldr	r3, [pc, #24]	; (80027c8 <HAL_IncTick+0x20>)
 80027ae:	781b      	ldrb	r3, [r3, #0]
 80027b0:	461a      	mov	r2, r3
 80027b2:	4b06      	ldr	r3, [pc, #24]	; (80027cc <HAL_IncTick+0x24>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4413      	add	r3, r2
 80027b8:	4a04      	ldr	r2, [pc, #16]	; (80027cc <HAL_IncTick+0x24>)
 80027ba:	6013      	str	r3, [r2, #0]
}
 80027bc:	bf00      	nop
 80027be:	46bd      	mov	sp, r7
 80027c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c4:	4770      	bx	lr
 80027c6:	bf00      	nop
 80027c8:	20000018 	.word	0x20000018
 80027cc:	20000c14 	.word	0x20000c14

080027d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80027d0:	b480      	push	{r7}
 80027d2:	af00      	add	r7, sp, #0
  return uwTick;
 80027d4:	4b03      	ldr	r3, [pc, #12]	; (80027e4 <HAL_GetTick+0x14>)
 80027d6:	681b      	ldr	r3, [r3, #0]
}
 80027d8:	4618      	mov	r0, r3
 80027da:	46bd      	mov	sp, r7
 80027dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e0:	4770      	bx	lr
 80027e2:	bf00      	nop
 80027e4:	20000c14 	.word	0x20000c14

080027e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b084      	sub	sp, #16
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80027f0:	f7ff ffee 	bl	80027d0 <HAL_GetTick>
 80027f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002800:	d005      	beq.n	800280e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002802:	4b0a      	ldr	r3, [pc, #40]	; (800282c <HAL_Delay+0x44>)
 8002804:	781b      	ldrb	r3, [r3, #0]
 8002806:	461a      	mov	r2, r3
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	4413      	add	r3, r2
 800280c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800280e:	bf00      	nop
 8002810:	f7ff ffde 	bl	80027d0 <HAL_GetTick>
 8002814:	4602      	mov	r2, r0
 8002816:	68bb      	ldr	r3, [r7, #8]
 8002818:	1ad3      	subs	r3, r2, r3
 800281a:	68fa      	ldr	r2, [r7, #12]
 800281c:	429a      	cmp	r2, r3
 800281e:	d8f7      	bhi.n	8002810 <HAL_Delay+0x28>
  {
  }
}
 8002820:	bf00      	nop
 8002822:	bf00      	nop
 8002824:	3710      	adds	r7, #16
 8002826:	46bd      	mov	sp, r7
 8002828:	bd80      	pop	{r7, pc}
 800282a:	bf00      	nop
 800282c:	20000018 	.word	0x20000018

08002830 <__NVIC_SetPriorityGrouping>:
{
 8002830:	b480      	push	{r7}
 8002832:	b085      	sub	sp, #20
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	f003 0307 	and.w	r3, r3, #7
 800283e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002840:	4b0c      	ldr	r3, [pc, #48]	; (8002874 <__NVIC_SetPriorityGrouping+0x44>)
 8002842:	68db      	ldr	r3, [r3, #12]
 8002844:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002846:	68ba      	ldr	r2, [r7, #8]
 8002848:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800284c:	4013      	ands	r3, r2
 800284e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002854:	68bb      	ldr	r3, [r7, #8]
 8002856:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002858:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800285c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002860:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002862:	4a04      	ldr	r2, [pc, #16]	; (8002874 <__NVIC_SetPriorityGrouping+0x44>)
 8002864:	68bb      	ldr	r3, [r7, #8]
 8002866:	60d3      	str	r3, [r2, #12]
}
 8002868:	bf00      	nop
 800286a:	3714      	adds	r7, #20
 800286c:	46bd      	mov	sp, r7
 800286e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002872:	4770      	bx	lr
 8002874:	e000ed00 	.word	0xe000ed00

08002878 <__NVIC_GetPriorityGrouping>:
{
 8002878:	b480      	push	{r7}
 800287a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800287c:	4b04      	ldr	r3, [pc, #16]	; (8002890 <__NVIC_GetPriorityGrouping+0x18>)
 800287e:	68db      	ldr	r3, [r3, #12]
 8002880:	0a1b      	lsrs	r3, r3, #8
 8002882:	f003 0307 	and.w	r3, r3, #7
}
 8002886:	4618      	mov	r0, r3
 8002888:	46bd      	mov	sp, r7
 800288a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288e:	4770      	bx	lr
 8002890:	e000ed00 	.word	0xe000ed00

08002894 <__NVIC_EnableIRQ>:
{
 8002894:	b480      	push	{r7}
 8002896:	b083      	sub	sp, #12
 8002898:	af00      	add	r7, sp, #0
 800289a:	4603      	mov	r3, r0
 800289c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800289e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	db0b      	blt.n	80028be <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80028a6:	79fb      	ldrb	r3, [r7, #7]
 80028a8:	f003 021f 	and.w	r2, r3, #31
 80028ac:	4907      	ldr	r1, [pc, #28]	; (80028cc <__NVIC_EnableIRQ+0x38>)
 80028ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028b2:	095b      	lsrs	r3, r3, #5
 80028b4:	2001      	movs	r0, #1
 80028b6:	fa00 f202 	lsl.w	r2, r0, r2
 80028ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80028be:	bf00      	nop
 80028c0:	370c      	adds	r7, #12
 80028c2:	46bd      	mov	sp, r7
 80028c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c8:	4770      	bx	lr
 80028ca:	bf00      	nop
 80028cc:	e000e100 	.word	0xe000e100

080028d0 <__NVIC_DisableIRQ>:
{
 80028d0:	b480      	push	{r7}
 80028d2:	b083      	sub	sp, #12
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	4603      	mov	r3, r0
 80028d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	db12      	blt.n	8002908 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80028e2:	79fb      	ldrb	r3, [r7, #7]
 80028e4:	f003 021f 	and.w	r2, r3, #31
 80028e8:	490a      	ldr	r1, [pc, #40]	; (8002914 <__NVIC_DisableIRQ+0x44>)
 80028ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028ee:	095b      	lsrs	r3, r3, #5
 80028f0:	2001      	movs	r0, #1
 80028f2:	fa00 f202 	lsl.w	r2, r0, r2
 80028f6:	3320      	adds	r3, #32
 80028f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80028fc:	f3bf 8f4f 	dsb	sy
}
 8002900:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002902:	f3bf 8f6f 	isb	sy
}
 8002906:	bf00      	nop
}
 8002908:	bf00      	nop
 800290a:	370c      	adds	r7, #12
 800290c:	46bd      	mov	sp, r7
 800290e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002912:	4770      	bx	lr
 8002914:	e000e100 	.word	0xe000e100

08002918 <__NVIC_SetPriority>:
{
 8002918:	b480      	push	{r7}
 800291a:	b083      	sub	sp, #12
 800291c:	af00      	add	r7, sp, #0
 800291e:	4603      	mov	r3, r0
 8002920:	6039      	str	r1, [r7, #0]
 8002922:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002924:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002928:	2b00      	cmp	r3, #0
 800292a:	db0a      	blt.n	8002942 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	b2da      	uxtb	r2, r3
 8002930:	490c      	ldr	r1, [pc, #48]	; (8002964 <__NVIC_SetPriority+0x4c>)
 8002932:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002936:	0112      	lsls	r2, r2, #4
 8002938:	b2d2      	uxtb	r2, r2
 800293a:	440b      	add	r3, r1
 800293c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002940:	e00a      	b.n	8002958 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	b2da      	uxtb	r2, r3
 8002946:	4908      	ldr	r1, [pc, #32]	; (8002968 <__NVIC_SetPriority+0x50>)
 8002948:	79fb      	ldrb	r3, [r7, #7]
 800294a:	f003 030f 	and.w	r3, r3, #15
 800294e:	3b04      	subs	r3, #4
 8002950:	0112      	lsls	r2, r2, #4
 8002952:	b2d2      	uxtb	r2, r2
 8002954:	440b      	add	r3, r1
 8002956:	761a      	strb	r2, [r3, #24]
}
 8002958:	bf00      	nop
 800295a:	370c      	adds	r7, #12
 800295c:	46bd      	mov	sp, r7
 800295e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002962:	4770      	bx	lr
 8002964:	e000e100 	.word	0xe000e100
 8002968:	e000ed00 	.word	0xe000ed00

0800296c <NVIC_EncodePriority>:
{
 800296c:	b480      	push	{r7}
 800296e:	b089      	sub	sp, #36	; 0x24
 8002970:	af00      	add	r7, sp, #0
 8002972:	60f8      	str	r0, [r7, #12]
 8002974:	60b9      	str	r1, [r7, #8]
 8002976:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	f003 0307 	and.w	r3, r3, #7
 800297e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002980:	69fb      	ldr	r3, [r7, #28]
 8002982:	f1c3 0307 	rsb	r3, r3, #7
 8002986:	2b04      	cmp	r3, #4
 8002988:	bf28      	it	cs
 800298a:	2304      	movcs	r3, #4
 800298c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800298e:	69fb      	ldr	r3, [r7, #28]
 8002990:	3304      	adds	r3, #4
 8002992:	2b06      	cmp	r3, #6
 8002994:	d902      	bls.n	800299c <NVIC_EncodePriority+0x30>
 8002996:	69fb      	ldr	r3, [r7, #28]
 8002998:	3b03      	subs	r3, #3
 800299a:	e000      	b.n	800299e <NVIC_EncodePriority+0x32>
 800299c:	2300      	movs	r3, #0
 800299e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029a0:	f04f 32ff 	mov.w	r2, #4294967295
 80029a4:	69bb      	ldr	r3, [r7, #24]
 80029a6:	fa02 f303 	lsl.w	r3, r2, r3
 80029aa:	43da      	mvns	r2, r3
 80029ac:	68bb      	ldr	r3, [r7, #8]
 80029ae:	401a      	ands	r2, r3
 80029b0:	697b      	ldr	r3, [r7, #20]
 80029b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80029b4:	f04f 31ff 	mov.w	r1, #4294967295
 80029b8:	697b      	ldr	r3, [r7, #20]
 80029ba:	fa01 f303 	lsl.w	r3, r1, r3
 80029be:	43d9      	mvns	r1, r3
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029c4:	4313      	orrs	r3, r2
}
 80029c6:	4618      	mov	r0, r3
 80029c8:	3724      	adds	r7, #36	; 0x24
 80029ca:	46bd      	mov	sp, r7
 80029cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d0:	4770      	bx	lr

080029d2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029d2:	b580      	push	{r7, lr}
 80029d4:	b082      	sub	sp, #8
 80029d6:	af00      	add	r7, sp, #0
 80029d8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80029da:	6878      	ldr	r0, [r7, #4]
 80029dc:	f7ff ff28 	bl	8002830 <__NVIC_SetPriorityGrouping>
}
 80029e0:	bf00      	nop
 80029e2:	3708      	adds	r7, #8
 80029e4:	46bd      	mov	sp, r7
 80029e6:	bd80      	pop	{r7, pc}

080029e8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b086      	sub	sp, #24
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	4603      	mov	r3, r0
 80029f0:	60b9      	str	r1, [r7, #8]
 80029f2:	607a      	str	r2, [r7, #4]
 80029f4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80029f6:	2300      	movs	r3, #0
 80029f8:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80029fa:	f7ff ff3d 	bl	8002878 <__NVIC_GetPriorityGrouping>
 80029fe:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a00:	687a      	ldr	r2, [r7, #4]
 8002a02:	68b9      	ldr	r1, [r7, #8]
 8002a04:	6978      	ldr	r0, [r7, #20]
 8002a06:	f7ff ffb1 	bl	800296c <NVIC_EncodePriority>
 8002a0a:	4602      	mov	r2, r0
 8002a0c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a10:	4611      	mov	r1, r2
 8002a12:	4618      	mov	r0, r3
 8002a14:	f7ff ff80 	bl	8002918 <__NVIC_SetPriority>
}
 8002a18:	bf00      	nop
 8002a1a:	3718      	adds	r7, #24
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	bd80      	pop	{r7, pc}

08002a20 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b082      	sub	sp, #8
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	4603      	mov	r3, r0
 8002a28:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a2e:	4618      	mov	r0, r3
 8002a30:	f7ff ff30 	bl	8002894 <__NVIC_EnableIRQ>
}
 8002a34:	bf00      	nop
 8002a36:	3708      	adds	r7, #8
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	bd80      	pop	{r7, pc}

08002a3c <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b082      	sub	sp, #8
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	4603      	mov	r3, r0
 8002a44:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002a46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	f7ff ff40 	bl	80028d0 <__NVIC_DisableIRQ>
}
 8002a50:	bf00      	nop
 8002a52:	3708      	adds	r7, #8
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bd80      	pop	{r7, pc}

08002a58 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b082      	sub	sp, #8
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d101      	bne.n	8002a6a <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8002a66:	2301      	movs	r3, #1
 8002a68:	e0ac      	b.n	8002bc4 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4618      	mov	r0, r3
 8002a70:	f000 f8b2 	bl	8002bd8 <DFSDM_GetChannelFromInstance>
 8002a74:	4603      	mov	r3, r0
 8002a76:	4a55      	ldr	r2, [pc, #340]	; (8002bcc <HAL_DFSDM_ChannelInit+0x174>)
 8002a78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d001      	beq.n	8002a84 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8002a80:	2301      	movs	r3, #1
 8002a82:	e09f      	b.n	8002bc4 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8002a84:	6878      	ldr	r0, [r7, #4]
 8002a86:	f7ff f975 	bl	8001d74 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8002a8a:	4b51      	ldr	r3, [pc, #324]	; (8002bd0 <HAL_DFSDM_ChannelInit+0x178>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	3301      	adds	r3, #1
 8002a90:	4a4f      	ldr	r2, [pc, #316]	; (8002bd0 <HAL_DFSDM_ChannelInit+0x178>)
 8002a92:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8002a94:	4b4e      	ldr	r3, [pc, #312]	; (8002bd0 <HAL_DFSDM_ChannelInit+0x178>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	2b01      	cmp	r3, #1
 8002a9a:	d125      	bne.n	8002ae8 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8002a9c:	4b4d      	ldr	r3, [pc, #308]	; (8002bd4 <HAL_DFSDM_ChannelInit+0x17c>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4a4c      	ldr	r2, [pc, #304]	; (8002bd4 <HAL_DFSDM_ChannelInit+0x17c>)
 8002aa2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002aa6:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8002aa8:	4b4a      	ldr	r3, [pc, #296]	; (8002bd4 <HAL_DFSDM_ChannelInit+0x17c>)
 8002aaa:	681a      	ldr	r2, [r3, #0]
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	689b      	ldr	r3, [r3, #8]
 8002ab0:	4948      	ldr	r1, [pc, #288]	; (8002bd4 <HAL_DFSDM_ChannelInit+0x17c>)
 8002ab2:	4313      	orrs	r3, r2
 8002ab4:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8002ab6:	4b47      	ldr	r3, [pc, #284]	; (8002bd4 <HAL_DFSDM_ChannelInit+0x17c>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4a46      	ldr	r2, [pc, #280]	; (8002bd4 <HAL_DFSDM_ChannelInit+0x17c>)
 8002abc:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8002ac0:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	791b      	ldrb	r3, [r3, #4]
 8002ac6:	2b01      	cmp	r3, #1
 8002ac8:	d108      	bne.n	8002adc <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8002aca:	4b42      	ldr	r3, [pc, #264]	; (8002bd4 <HAL_DFSDM_ChannelInit+0x17c>)
 8002acc:	681a      	ldr	r2, [r3, #0]
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	68db      	ldr	r3, [r3, #12]
 8002ad2:	3b01      	subs	r3, #1
 8002ad4:	041b      	lsls	r3, r3, #16
 8002ad6:	493f      	ldr	r1, [pc, #252]	; (8002bd4 <HAL_DFSDM_ChannelInit+0x17c>)
 8002ad8:	4313      	orrs	r3, r2
 8002ada:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8002adc:	4b3d      	ldr	r3, [pc, #244]	; (8002bd4 <HAL_DFSDM_ChannelInit+0x17c>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4a3c      	ldr	r2, [pc, #240]	; (8002bd4 <HAL_DFSDM_ChannelInit+0x17c>)
 8002ae2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002ae6:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	681a      	ldr	r2, [r3, #0]
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 8002af6:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	6819      	ldr	r1, [r3, #0]
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8002b06:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8002b0c:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	430a      	orrs	r2, r1
 8002b14:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	681a      	ldr	r2, [r3, #0]
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f022 020f 	bic.w	r2, r2, #15
 8002b24:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	6819      	ldr	r1, [r3, #0]
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8002b34:	431a      	orrs	r2, r3
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	430a      	orrs	r2, r1
 8002b3c:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	689a      	ldr	r2, [r3, #8]
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8002b4c:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	6899      	ldr	r1, [r3, #8]
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b5c:	3b01      	subs	r3, #1
 8002b5e:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8002b60:	431a      	orrs	r2, r3
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	430a      	orrs	r2, r1
 8002b68:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	685a      	ldr	r2, [r3, #4]
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f002 0207 	and.w	r2, r2, #7
 8002b78:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	6859      	ldr	r1, [r3, #4]
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b84:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b8a:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8002b8c:	431a      	orrs	r2, r3
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	430a      	orrs	r2, r1
 8002b94:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	681a      	ldr	r2, [r3, #0]
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002ba4:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2201      	movs	r2, #1
 8002baa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	f000 f810 	bl	8002bd8 <DFSDM_GetChannelFromInstance>
 8002bb8:	4602      	mov	r2, r0
 8002bba:	4904      	ldr	r1, [pc, #16]	; (8002bcc <HAL_DFSDM_ChannelInit+0x174>)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 8002bc2:	2300      	movs	r3, #0
}
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	3708      	adds	r7, #8
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	bd80      	pop	{r7, pc}
 8002bcc:	20000c1c 	.word	0x20000c1c
 8002bd0:	20000c18 	.word	0x20000c18
 8002bd4:	40016000 	.word	0x40016000

08002bd8 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	b085      	sub	sp, #20
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	4a1c      	ldr	r2, [pc, #112]	; (8002c54 <DFSDM_GetChannelFromInstance+0x7c>)
 8002be4:	4293      	cmp	r3, r2
 8002be6:	d102      	bne.n	8002bee <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8002be8:	2300      	movs	r3, #0
 8002bea:	60fb      	str	r3, [r7, #12]
 8002bec:	e02b      	b.n	8002c46 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	4a19      	ldr	r2, [pc, #100]	; (8002c58 <DFSDM_GetChannelFromInstance+0x80>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d102      	bne.n	8002bfc <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	60fb      	str	r3, [r7, #12]
 8002bfa:	e024      	b.n	8002c46 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	4a17      	ldr	r2, [pc, #92]	; (8002c5c <DFSDM_GetChannelFromInstance+0x84>)
 8002c00:	4293      	cmp	r3, r2
 8002c02:	d102      	bne.n	8002c0a <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8002c04:	2302      	movs	r3, #2
 8002c06:	60fb      	str	r3, [r7, #12]
 8002c08:	e01d      	b.n	8002c46 <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	4a14      	ldr	r2, [pc, #80]	; (8002c60 <DFSDM_GetChannelFromInstance+0x88>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d102      	bne.n	8002c18 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 8002c12:	2304      	movs	r3, #4
 8002c14:	60fb      	str	r3, [r7, #12]
 8002c16:	e016      	b.n	8002c46 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	4a12      	ldr	r2, [pc, #72]	; (8002c64 <DFSDM_GetChannelFromInstance+0x8c>)
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	d102      	bne.n	8002c26 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8002c20:	2305      	movs	r3, #5
 8002c22:	60fb      	str	r3, [r7, #12]
 8002c24:	e00f      	b.n	8002c46 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	4a0f      	ldr	r2, [pc, #60]	; (8002c68 <DFSDM_GetChannelFromInstance+0x90>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d102      	bne.n	8002c34 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 8002c2e:	2306      	movs	r3, #6
 8002c30:	60fb      	str	r3, [r7, #12]
 8002c32:	e008      	b.n	8002c46 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	4a0d      	ldr	r2, [pc, #52]	; (8002c6c <DFSDM_GetChannelFromInstance+0x94>)
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d102      	bne.n	8002c42 <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8002c3c:	2307      	movs	r3, #7
 8002c3e:	60fb      	str	r3, [r7, #12]
 8002c40:	e001      	b.n	8002c46 <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 8002c42:	2303      	movs	r3, #3
 8002c44:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8002c46:	68fb      	ldr	r3, [r7, #12]
}
 8002c48:	4618      	mov	r0, r3
 8002c4a:	3714      	adds	r7, #20
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c52:	4770      	bx	lr
 8002c54:	40016000 	.word	0x40016000
 8002c58:	40016020 	.word	0x40016020
 8002c5c:	40016040 	.word	0x40016040
 8002c60:	40016080 	.word	0x40016080
 8002c64:	400160a0 	.word	0x400160a0
 8002c68:	400160c0 	.word	0x400160c0
 8002c6c:	400160e0 	.word	0x400160e0

08002c70 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002c70:	b480      	push	{r7}
 8002c72:	b085      	sub	sp, #20
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c78:	2300      	movs	r3, #0
 8002c7a:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002c82:	b2db      	uxtb	r3, r3
 8002c84:	2b02      	cmp	r3, #2
 8002c86:	d008      	beq.n	8002c9a <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2204      	movs	r2, #4
 8002c8c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2200      	movs	r2, #0
 8002c92:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002c96:	2301      	movs	r3, #1
 8002c98:	e022      	b.n	8002ce0 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	681a      	ldr	r2, [r3, #0]
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f022 020e 	bic.w	r2, r2, #14
 8002ca8:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	681a      	ldr	r2, [r3, #0]
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f022 0201 	bic.w	r2, r2, #1
 8002cb8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cbe:	f003 021c 	and.w	r2, r3, #28
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cc6:	2101      	movs	r1, #1
 8002cc8:	fa01 f202 	lsl.w	r2, r1, r2
 8002ccc:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2201      	movs	r2, #1
 8002cd2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2200      	movs	r2, #0
 8002cda:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8002cde:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	3714      	adds	r7, #20
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cea:	4770      	bx	lr

08002cec <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b084      	sub	sp, #16
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002cfe:	b2db      	uxtb	r3, r3
 8002d00:	2b02      	cmp	r3, #2
 8002d02:	d005      	beq.n	8002d10 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2204      	movs	r2, #4
 8002d08:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	73fb      	strb	r3, [r7, #15]
 8002d0e:	e029      	b.n	8002d64 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	681a      	ldr	r2, [r3, #0]
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f022 020e 	bic.w	r2, r2, #14
 8002d1e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	681a      	ldr	r2, [r3, #0]
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f022 0201 	bic.w	r2, r2, #1
 8002d2e:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d34:	f003 021c 	and.w	r2, r3, #28
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d3c:	2101      	movs	r1, #1
 8002d3e:	fa01 f202 	lsl.w	r2, r1, r2
 8002d42:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2201      	movs	r2, #1
 8002d48:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2200      	movs	r2, #0
 8002d50:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d003      	beq.n	8002d64 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d60:	6878      	ldr	r0, [r7, #4]
 8002d62:	4798      	blx	r3
    }
  }
  return status;
 8002d64:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d66:	4618      	mov	r0, r3
 8002d68:	3710      	adds	r7, #16
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bd80      	pop	{r7, pc}
	...

08002d70 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d70:	b480      	push	{r7}
 8002d72:	b087      	sub	sp, #28
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
 8002d78:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d7e:	e17f      	b.n	8003080 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	681a      	ldr	r2, [r3, #0]
 8002d84:	2101      	movs	r1, #1
 8002d86:	697b      	ldr	r3, [r7, #20]
 8002d88:	fa01 f303 	lsl.w	r3, r1, r3
 8002d8c:	4013      	ands	r3, r2
 8002d8e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	f000 8171 	beq.w	800307a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	2b01      	cmp	r3, #1
 8002d9e:	d00b      	beq.n	8002db8 <HAL_GPIO_Init+0x48>
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	2b02      	cmp	r3, #2
 8002da6:	d007      	beq.n	8002db8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002dac:	2b11      	cmp	r3, #17
 8002dae:	d003      	beq.n	8002db8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	2b12      	cmp	r3, #18
 8002db6:	d130      	bne.n	8002e1a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	689b      	ldr	r3, [r3, #8]
 8002dbc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002dbe:	697b      	ldr	r3, [r7, #20]
 8002dc0:	005b      	lsls	r3, r3, #1
 8002dc2:	2203      	movs	r2, #3
 8002dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc8:	43db      	mvns	r3, r3
 8002dca:	693a      	ldr	r2, [r7, #16]
 8002dcc:	4013      	ands	r3, r2
 8002dce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	68da      	ldr	r2, [r3, #12]
 8002dd4:	697b      	ldr	r3, [r7, #20]
 8002dd6:	005b      	lsls	r3, r3, #1
 8002dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ddc:	693a      	ldr	r2, [r7, #16]
 8002dde:	4313      	orrs	r3, r2
 8002de0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	693a      	ldr	r2, [r7, #16]
 8002de6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002dee:	2201      	movs	r2, #1
 8002df0:	697b      	ldr	r3, [r7, #20]
 8002df2:	fa02 f303 	lsl.w	r3, r2, r3
 8002df6:	43db      	mvns	r3, r3
 8002df8:	693a      	ldr	r2, [r7, #16]
 8002dfa:	4013      	ands	r3, r2
 8002dfc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	091b      	lsrs	r3, r3, #4
 8002e04:	f003 0201 	and.w	r2, r3, #1
 8002e08:	697b      	ldr	r3, [r7, #20]
 8002e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e0e:	693a      	ldr	r2, [r7, #16]
 8002e10:	4313      	orrs	r3, r2
 8002e12:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	693a      	ldr	r2, [r7, #16]
 8002e18:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	f003 0303 	and.w	r3, r3, #3
 8002e22:	2b03      	cmp	r3, #3
 8002e24:	d118      	bne.n	8002e58 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e2a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002e2c:	2201      	movs	r2, #1
 8002e2e:	697b      	ldr	r3, [r7, #20]
 8002e30:	fa02 f303 	lsl.w	r3, r2, r3
 8002e34:	43db      	mvns	r3, r3
 8002e36:	693a      	ldr	r2, [r7, #16]
 8002e38:	4013      	ands	r3, r2
 8002e3a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	08db      	lsrs	r3, r3, #3
 8002e42:	f003 0201 	and.w	r2, r3, #1
 8002e46:	697b      	ldr	r3, [r7, #20]
 8002e48:	fa02 f303 	lsl.w	r3, r2, r3
 8002e4c:	693a      	ldr	r2, [r7, #16]
 8002e4e:	4313      	orrs	r3, r2
 8002e50:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	693a      	ldr	r2, [r7, #16]
 8002e56:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	68db      	ldr	r3, [r3, #12]
 8002e5c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002e5e:	697b      	ldr	r3, [r7, #20]
 8002e60:	005b      	lsls	r3, r3, #1
 8002e62:	2203      	movs	r2, #3
 8002e64:	fa02 f303 	lsl.w	r3, r2, r3
 8002e68:	43db      	mvns	r3, r3
 8002e6a:	693a      	ldr	r2, [r7, #16]
 8002e6c:	4013      	ands	r3, r2
 8002e6e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	689a      	ldr	r2, [r3, #8]
 8002e74:	697b      	ldr	r3, [r7, #20]
 8002e76:	005b      	lsls	r3, r3, #1
 8002e78:	fa02 f303 	lsl.w	r3, r2, r3
 8002e7c:	693a      	ldr	r2, [r7, #16]
 8002e7e:	4313      	orrs	r3, r2
 8002e80:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	693a      	ldr	r2, [r7, #16]
 8002e86:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	685b      	ldr	r3, [r3, #4]
 8002e8c:	2b02      	cmp	r3, #2
 8002e8e:	d003      	beq.n	8002e98 <HAL_GPIO_Init+0x128>
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	2b12      	cmp	r3, #18
 8002e96:	d123      	bne.n	8002ee0 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002e98:	697b      	ldr	r3, [r7, #20]
 8002e9a:	08da      	lsrs	r2, r3, #3
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	3208      	adds	r2, #8
 8002ea0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ea4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002ea6:	697b      	ldr	r3, [r7, #20]
 8002ea8:	f003 0307 	and.w	r3, r3, #7
 8002eac:	009b      	lsls	r3, r3, #2
 8002eae:	220f      	movs	r2, #15
 8002eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb4:	43db      	mvns	r3, r3
 8002eb6:	693a      	ldr	r2, [r7, #16]
 8002eb8:	4013      	ands	r3, r2
 8002eba:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	691a      	ldr	r2, [r3, #16]
 8002ec0:	697b      	ldr	r3, [r7, #20]
 8002ec2:	f003 0307 	and.w	r3, r3, #7
 8002ec6:	009b      	lsls	r3, r3, #2
 8002ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ecc:	693a      	ldr	r2, [r7, #16]
 8002ece:	4313      	orrs	r3, r2
 8002ed0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002ed2:	697b      	ldr	r3, [r7, #20]
 8002ed4:	08da      	lsrs	r2, r3, #3
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	3208      	adds	r2, #8
 8002eda:	6939      	ldr	r1, [r7, #16]
 8002edc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002ee6:	697b      	ldr	r3, [r7, #20]
 8002ee8:	005b      	lsls	r3, r3, #1
 8002eea:	2203      	movs	r2, #3
 8002eec:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef0:	43db      	mvns	r3, r3
 8002ef2:	693a      	ldr	r2, [r7, #16]
 8002ef4:	4013      	ands	r3, r2
 8002ef6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	f003 0203 	and.w	r2, r3, #3
 8002f00:	697b      	ldr	r3, [r7, #20]
 8002f02:	005b      	lsls	r3, r3, #1
 8002f04:	fa02 f303 	lsl.w	r3, r2, r3
 8002f08:	693a      	ldr	r2, [r7, #16]
 8002f0a:	4313      	orrs	r3, r2
 8002f0c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	693a      	ldr	r2, [r7, #16]
 8002f12:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	685b      	ldr	r3, [r3, #4]
 8002f18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	f000 80ac 	beq.w	800307a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f22:	4b5f      	ldr	r3, [pc, #380]	; (80030a0 <HAL_GPIO_Init+0x330>)
 8002f24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f26:	4a5e      	ldr	r2, [pc, #376]	; (80030a0 <HAL_GPIO_Init+0x330>)
 8002f28:	f043 0301 	orr.w	r3, r3, #1
 8002f2c:	6613      	str	r3, [r2, #96]	; 0x60
 8002f2e:	4b5c      	ldr	r3, [pc, #368]	; (80030a0 <HAL_GPIO_Init+0x330>)
 8002f30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f32:	f003 0301 	and.w	r3, r3, #1
 8002f36:	60bb      	str	r3, [r7, #8]
 8002f38:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002f3a:	4a5a      	ldr	r2, [pc, #360]	; (80030a4 <HAL_GPIO_Init+0x334>)
 8002f3c:	697b      	ldr	r3, [r7, #20]
 8002f3e:	089b      	lsrs	r3, r3, #2
 8002f40:	3302      	adds	r3, #2
 8002f42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f46:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002f48:	697b      	ldr	r3, [r7, #20]
 8002f4a:	f003 0303 	and.w	r3, r3, #3
 8002f4e:	009b      	lsls	r3, r3, #2
 8002f50:	220f      	movs	r2, #15
 8002f52:	fa02 f303 	lsl.w	r3, r2, r3
 8002f56:	43db      	mvns	r3, r3
 8002f58:	693a      	ldr	r2, [r7, #16]
 8002f5a:	4013      	ands	r3, r2
 8002f5c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002f64:	d025      	beq.n	8002fb2 <HAL_GPIO_Init+0x242>
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	4a4f      	ldr	r2, [pc, #316]	; (80030a8 <HAL_GPIO_Init+0x338>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d01f      	beq.n	8002fae <HAL_GPIO_Init+0x23e>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	4a4e      	ldr	r2, [pc, #312]	; (80030ac <HAL_GPIO_Init+0x33c>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d019      	beq.n	8002faa <HAL_GPIO_Init+0x23a>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	4a4d      	ldr	r2, [pc, #308]	; (80030b0 <HAL_GPIO_Init+0x340>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d013      	beq.n	8002fa6 <HAL_GPIO_Init+0x236>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	4a4c      	ldr	r2, [pc, #304]	; (80030b4 <HAL_GPIO_Init+0x344>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d00d      	beq.n	8002fa2 <HAL_GPIO_Init+0x232>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	4a4b      	ldr	r2, [pc, #300]	; (80030b8 <HAL_GPIO_Init+0x348>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d007      	beq.n	8002f9e <HAL_GPIO_Init+0x22e>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	4a4a      	ldr	r2, [pc, #296]	; (80030bc <HAL_GPIO_Init+0x34c>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d101      	bne.n	8002f9a <HAL_GPIO_Init+0x22a>
 8002f96:	2306      	movs	r3, #6
 8002f98:	e00c      	b.n	8002fb4 <HAL_GPIO_Init+0x244>
 8002f9a:	2307      	movs	r3, #7
 8002f9c:	e00a      	b.n	8002fb4 <HAL_GPIO_Init+0x244>
 8002f9e:	2305      	movs	r3, #5
 8002fa0:	e008      	b.n	8002fb4 <HAL_GPIO_Init+0x244>
 8002fa2:	2304      	movs	r3, #4
 8002fa4:	e006      	b.n	8002fb4 <HAL_GPIO_Init+0x244>
 8002fa6:	2303      	movs	r3, #3
 8002fa8:	e004      	b.n	8002fb4 <HAL_GPIO_Init+0x244>
 8002faa:	2302      	movs	r3, #2
 8002fac:	e002      	b.n	8002fb4 <HAL_GPIO_Init+0x244>
 8002fae:	2301      	movs	r3, #1
 8002fb0:	e000      	b.n	8002fb4 <HAL_GPIO_Init+0x244>
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	697a      	ldr	r2, [r7, #20]
 8002fb6:	f002 0203 	and.w	r2, r2, #3
 8002fba:	0092      	lsls	r2, r2, #2
 8002fbc:	4093      	lsls	r3, r2
 8002fbe:	693a      	ldr	r2, [r7, #16]
 8002fc0:	4313      	orrs	r3, r2
 8002fc2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002fc4:	4937      	ldr	r1, [pc, #220]	; (80030a4 <HAL_GPIO_Init+0x334>)
 8002fc6:	697b      	ldr	r3, [r7, #20]
 8002fc8:	089b      	lsrs	r3, r3, #2
 8002fca:	3302      	adds	r3, #2
 8002fcc:	693a      	ldr	r2, [r7, #16]
 8002fce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002fd2:	4b3b      	ldr	r3, [pc, #236]	; (80030c0 <HAL_GPIO_Init+0x350>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	43db      	mvns	r3, r3
 8002fdc:	693a      	ldr	r2, [r7, #16]
 8002fde:	4013      	ands	r3, r2
 8002fe0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d003      	beq.n	8002ff6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002fee:	693a      	ldr	r2, [r7, #16]
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	4313      	orrs	r3, r2
 8002ff4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002ff6:	4a32      	ldr	r2, [pc, #200]	; (80030c0 <HAL_GPIO_Init+0x350>)
 8002ff8:	693b      	ldr	r3, [r7, #16]
 8002ffa:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8002ffc:	4b30      	ldr	r3, [pc, #192]	; (80030c0 <HAL_GPIO_Init+0x350>)
 8002ffe:	685b      	ldr	r3, [r3, #4]
 8003000:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	43db      	mvns	r3, r3
 8003006:	693a      	ldr	r2, [r7, #16]
 8003008:	4013      	ands	r3, r2
 800300a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	685b      	ldr	r3, [r3, #4]
 8003010:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003014:	2b00      	cmp	r3, #0
 8003016:	d003      	beq.n	8003020 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003018:	693a      	ldr	r2, [r7, #16]
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	4313      	orrs	r3, r2
 800301e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003020:	4a27      	ldr	r2, [pc, #156]	; (80030c0 <HAL_GPIO_Init+0x350>)
 8003022:	693b      	ldr	r3, [r7, #16]
 8003024:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003026:	4b26      	ldr	r3, [pc, #152]	; (80030c0 <HAL_GPIO_Init+0x350>)
 8003028:	689b      	ldr	r3, [r3, #8]
 800302a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	43db      	mvns	r3, r3
 8003030:	693a      	ldr	r2, [r7, #16]
 8003032:	4013      	ands	r3, r2
 8003034:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	685b      	ldr	r3, [r3, #4]
 800303a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800303e:	2b00      	cmp	r3, #0
 8003040:	d003      	beq.n	800304a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8003042:	693a      	ldr	r2, [r7, #16]
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	4313      	orrs	r3, r2
 8003048:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800304a:	4a1d      	ldr	r2, [pc, #116]	; (80030c0 <HAL_GPIO_Init+0x350>)
 800304c:	693b      	ldr	r3, [r7, #16]
 800304e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003050:	4b1b      	ldr	r3, [pc, #108]	; (80030c0 <HAL_GPIO_Init+0x350>)
 8003052:	68db      	ldr	r3, [r3, #12]
 8003054:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	43db      	mvns	r3, r3
 800305a:	693a      	ldr	r2, [r7, #16]
 800305c:	4013      	ands	r3, r2
 800305e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003068:	2b00      	cmp	r3, #0
 800306a:	d003      	beq.n	8003074 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800306c:	693a      	ldr	r2, [r7, #16]
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	4313      	orrs	r3, r2
 8003072:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003074:	4a12      	ldr	r2, [pc, #72]	; (80030c0 <HAL_GPIO_Init+0x350>)
 8003076:	693b      	ldr	r3, [r7, #16]
 8003078:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800307a:	697b      	ldr	r3, [r7, #20]
 800307c:	3301      	adds	r3, #1
 800307e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	681a      	ldr	r2, [r3, #0]
 8003084:	697b      	ldr	r3, [r7, #20]
 8003086:	fa22 f303 	lsr.w	r3, r2, r3
 800308a:	2b00      	cmp	r3, #0
 800308c:	f47f ae78 	bne.w	8002d80 <HAL_GPIO_Init+0x10>
  }
}
 8003090:	bf00      	nop
 8003092:	bf00      	nop
 8003094:	371c      	adds	r7, #28
 8003096:	46bd      	mov	sp, r7
 8003098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309c:	4770      	bx	lr
 800309e:	bf00      	nop
 80030a0:	40021000 	.word	0x40021000
 80030a4:	40010000 	.word	0x40010000
 80030a8:	48000400 	.word	0x48000400
 80030ac:	48000800 	.word	0x48000800
 80030b0:	48000c00 	.word	0x48000c00
 80030b4:	48001000 	.word	0x48001000
 80030b8:	48001400 	.word	0x48001400
 80030bc:	48001800 	.word	0x48001800
 80030c0:	40010400 	.word	0x40010400

080030c4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80030c4:	b480      	push	{r7}
 80030c6:	b087      	sub	sp, #28
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
 80030cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80030ce:	2300      	movs	r3, #0
 80030d0:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 80030d2:	e0cd      	b.n	8003270 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80030d4:	2201      	movs	r2, #1
 80030d6:	697b      	ldr	r3, [r7, #20]
 80030d8:	fa02 f303 	lsl.w	r3, r2, r3
 80030dc:	683a      	ldr	r2, [r7, #0]
 80030de:	4013      	ands	r3, r2
 80030e0:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 80030e2:	693b      	ldr	r3, [r7, #16]
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	f000 80c0 	beq.w	800326a <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 80030ea:	4a68      	ldr	r2, [pc, #416]	; (800328c <HAL_GPIO_DeInit+0x1c8>)
 80030ec:	697b      	ldr	r3, [r7, #20]
 80030ee:	089b      	lsrs	r3, r3, #2
 80030f0:	3302      	adds	r3, #2
 80030f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030f6:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 80030f8:	697b      	ldr	r3, [r7, #20]
 80030fa:	f003 0303 	and.w	r3, r3, #3
 80030fe:	009b      	lsls	r3, r3, #2
 8003100:	220f      	movs	r2, #15
 8003102:	fa02 f303 	lsl.w	r3, r2, r3
 8003106:	68fa      	ldr	r2, [r7, #12]
 8003108:	4013      	ands	r3, r2
 800310a:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003112:	d025      	beq.n	8003160 <HAL_GPIO_DeInit+0x9c>
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	4a5e      	ldr	r2, [pc, #376]	; (8003290 <HAL_GPIO_DeInit+0x1cc>)
 8003118:	4293      	cmp	r3, r2
 800311a:	d01f      	beq.n	800315c <HAL_GPIO_DeInit+0x98>
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	4a5d      	ldr	r2, [pc, #372]	; (8003294 <HAL_GPIO_DeInit+0x1d0>)
 8003120:	4293      	cmp	r3, r2
 8003122:	d019      	beq.n	8003158 <HAL_GPIO_DeInit+0x94>
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	4a5c      	ldr	r2, [pc, #368]	; (8003298 <HAL_GPIO_DeInit+0x1d4>)
 8003128:	4293      	cmp	r3, r2
 800312a:	d013      	beq.n	8003154 <HAL_GPIO_DeInit+0x90>
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	4a5b      	ldr	r2, [pc, #364]	; (800329c <HAL_GPIO_DeInit+0x1d8>)
 8003130:	4293      	cmp	r3, r2
 8003132:	d00d      	beq.n	8003150 <HAL_GPIO_DeInit+0x8c>
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	4a5a      	ldr	r2, [pc, #360]	; (80032a0 <HAL_GPIO_DeInit+0x1dc>)
 8003138:	4293      	cmp	r3, r2
 800313a:	d007      	beq.n	800314c <HAL_GPIO_DeInit+0x88>
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	4a59      	ldr	r2, [pc, #356]	; (80032a4 <HAL_GPIO_DeInit+0x1e0>)
 8003140:	4293      	cmp	r3, r2
 8003142:	d101      	bne.n	8003148 <HAL_GPIO_DeInit+0x84>
 8003144:	2306      	movs	r3, #6
 8003146:	e00c      	b.n	8003162 <HAL_GPIO_DeInit+0x9e>
 8003148:	2307      	movs	r3, #7
 800314a:	e00a      	b.n	8003162 <HAL_GPIO_DeInit+0x9e>
 800314c:	2305      	movs	r3, #5
 800314e:	e008      	b.n	8003162 <HAL_GPIO_DeInit+0x9e>
 8003150:	2304      	movs	r3, #4
 8003152:	e006      	b.n	8003162 <HAL_GPIO_DeInit+0x9e>
 8003154:	2303      	movs	r3, #3
 8003156:	e004      	b.n	8003162 <HAL_GPIO_DeInit+0x9e>
 8003158:	2302      	movs	r3, #2
 800315a:	e002      	b.n	8003162 <HAL_GPIO_DeInit+0x9e>
 800315c:	2301      	movs	r3, #1
 800315e:	e000      	b.n	8003162 <HAL_GPIO_DeInit+0x9e>
 8003160:	2300      	movs	r3, #0
 8003162:	697a      	ldr	r2, [r7, #20]
 8003164:	f002 0203 	and.w	r2, r2, #3
 8003168:	0092      	lsls	r2, r2, #2
 800316a:	4093      	lsls	r3, r2
 800316c:	68fa      	ldr	r2, [r7, #12]
 800316e:	429a      	cmp	r2, r3
 8003170:	d132      	bne.n	80031d8 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8003172:	4b4d      	ldr	r3, [pc, #308]	; (80032a8 <HAL_GPIO_DeInit+0x1e4>)
 8003174:	681a      	ldr	r2, [r3, #0]
 8003176:	693b      	ldr	r3, [r7, #16]
 8003178:	43db      	mvns	r3, r3
 800317a:	494b      	ldr	r1, [pc, #300]	; (80032a8 <HAL_GPIO_DeInit+0x1e4>)
 800317c:	4013      	ands	r3, r2
 800317e:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8003180:	4b49      	ldr	r3, [pc, #292]	; (80032a8 <HAL_GPIO_DeInit+0x1e4>)
 8003182:	685a      	ldr	r2, [r3, #4]
 8003184:	693b      	ldr	r3, [r7, #16]
 8003186:	43db      	mvns	r3, r3
 8003188:	4947      	ldr	r1, [pc, #284]	; (80032a8 <HAL_GPIO_DeInit+0x1e4>)
 800318a:	4013      	ands	r3, r2
 800318c:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 800318e:	4b46      	ldr	r3, [pc, #280]	; (80032a8 <HAL_GPIO_DeInit+0x1e4>)
 8003190:	689a      	ldr	r2, [r3, #8]
 8003192:	693b      	ldr	r3, [r7, #16]
 8003194:	43db      	mvns	r3, r3
 8003196:	4944      	ldr	r1, [pc, #272]	; (80032a8 <HAL_GPIO_DeInit+0x1e4>)
 8003198:	4013      	ands	r3, r2
 800319a:	608b      	str	r3, [r1, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 800319c:	4b42      	ldr	r3, [pc, #264]	; (80032a8 <HAL_GPIO_DeInit+0x1e4>)
 800319e:	68da      	ldr	r2, [r3, #12]
 80031a0:	693b      	ldr	r3, [r7, #16]
 80031a2:	43db      	mvns	r3, r3
 80031a4:	4940      	ldr	r1, [pc, #256]	; (80032a8 <HAL_GPIO_DeInit+0x1e4>)
 80031a6:	4013      	ands	r3, r2
 80031a8:	60cb      	str	r3, [r1, #12]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 80031aa:	697b      	ldr	r3, [r7, #20]
 80031ac:	f003 0303 	and.w	r3, r3, #3
 80031b0:	009b      	lsls	r3, r3, #2
 80031b2:	220f      	movs	r2, #15
 80031b4:	fa02 f303 	lsl.w	r3, r2, r3
 80031b8:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 80031ba:	4a34      	ldr	r2, [pc, #208]	; (800328c <HAL_GPIO_DeInit+0x1c8>)
 80031bc:	697b      	ldr	r3, [r7, #20]
 80031be:	089b      	lsrs	r3, r3, #2
 80031c0:	3302      	adds	r3, #2
 80031c2:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	43da      	mvns	r2, r3
 80031ca:	4830      	ldr	r0, [pc, #192]	; (800328c <HAL_GPIO_DeInit+0x1c8>)
 80031cc:	697b      	ldr	r3, [r7, #20]
 80031ce:	089b      	lsrs	r3, r3, #2
 80031d0:	400a      	ands	r2, r1
 80031d2:	3302      	adds	r3, #2
 80031d4:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681a      	ldr	r2, [r3, #0]
 80031dc:	697b      	ldr	r3, [r7, #20]
 80031de:	005b      	lsls	r3, r3, #1
 80031e0:	2103      	movs	r1, #3
 80031e2:	fa01 f303 	lsl.w	r3, r1, r3
 80031e6:	431a      	orrs	r2, r3
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 80031ec:	697b      	ldr	r3, [r7, #20]
 80031ee:	08da      	lsrs	r2, r3, #3
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	3208      	adds	r2, #8
 80031f4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80031f8:	697b      	ldr	r3, [r7, #20]
 80031fa:	f003 0307 	and.w	r3, r3, #7
 80031fe:	009b      	lsls	r3, r3, #2
 8003200:	220f      	movs	r2, #15
 8003202:	fa02 f303 	lsl.w	r3, r2, r3
 8003206:	43db      	mvns	r3, r3
 8003208:	697a      	ldr	r2, [r7, #20]
 800320a:	08d2      	lsrs	r2, r2, #3
 800320c:	4019      	ands	r1, r3
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	3208      	adds	r2, #8
 8003212:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	689a      	ldr	r2, [r3, #8]
 800321a:	697b      	ldr	r3, [r7, #20]
 800321c:	005b      	lsls	r3, r3, #1
 800321e:	2103      	movs	r1, #3
 8003220:	fa01 f303 	lsl.w	r3, r1, r3
 8003224:	43db      	mvns	r3, r3
 8003226:	401a      	ands	r2, r3
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	685a      	ldr	r2, [r3, #4]
 8003230:	2101      	movs	r1, #1
 8003232:	697b      	ldr	r3, [r7, #20]
 8003234:	fa01 f303 	lsl.w	r3, r1, r3
 8003238:	43db      	mvns	r3, r3
 800323a:	401a      	ands	r2, r3
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	68da      	ldr	r2, [r3, #12]
 8003244:	697b      	ldr	r3, [r7, #20]
 8003246:	005b      	lsls	r3, r3, #1
 8003248:	2103      	movs	r1, #3
 800324a:	fa01 f303 	lsl.w	r3, r1, r3
 800324e:	43db      	mvns	r3, r3
 8003250:	401a      	ands	r2, r3
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800325a:	2101      	movs	r1, #1
 800325c:	697b      	ldr	r3, [r7, #20]
 800325e:	fa01 f303 	lsl.w	r3, r1, r3
 8003262:	43db      	mvns	r3, r3
 8003264:	401a      	ands	r2, r3
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 800326a:	697b      	ldr	r3, [r7, #20]
 800326c:	3301      	adds	r3, #1
 800326e:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8003270:	683a      	ldr	r2, [r7, #0]
 8003272:	697b      	ldr	r3, [r7, #20]
 8003274:	fa22 f303 	lsr.w	r3, r2, r3
 8003278:	2b00      	cmp	r3, #0
 800327a:	f47f af2b 	bne.w	80030d4 <HAL_GPIO_DeInit+0x10>
  }
}
 800327e:	bf00      	nop
 8003280:	bf00      	nop
 8003282:	371c      	adds	r7, #28
 8003284:	46bd      	mov	sp, r7
 8003286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328a:	4770      	bx	lr
 800328c:	40010000 	.word	0x40010000
 8003290:	48000400 	.word	0x48000400
 8003294:	48000800 	.word	0x48000800
 8003298:	48000c00 	.word	0x48000c00
 800329c:	48001000 	.word	0x48001000
 80032a0:	48001400 	.word	0x48001400
 80032a4:	48001800 	.word	0x48001800
 80032a8:	40010400 	.word	0x40010400

080032ac <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80032ac:	b480      	push	{r7}
 80032ae:	b085      	sub	sp, #20
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
 80032b4:	460b      	mov	r3, r1
 80032b6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	691a      	ldr	r2, [r3, #16]
 80032bc:	887b      	ldrh	r3, [r7, #2]
 80032be:	4013      	ands	r3, r2
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d002      	beq.n	80032ca <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80032c4:	2301      	movs	r3, #1
 80032c6:	73fb      	strb	r3, [r7, #15]
 80032c8:	e001      	b.n	80032ce <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80032ca:	2300      	movs	r3, #0
 80032cc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80032ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80032d0:	4618      	mov	r0, r3
 80032d2:	3714      	adds	r7, #20
 80032d4:	46bd      	mov	sp, r7
 80032d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032da:	4770      	bx	lr

080032dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80032dc:	b480      	push	{r7}
 80032de:	b083      	sub	sp, #12
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
 80032e4:	460b      	mov	r3, r1
 80032e6:	807b      	strh	r3, [r7, #2]
 80032e8:	4613      	mov	r3, r2
 80032ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80032ec:	787b      	ldrb	r3, [r7, #1]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d003      	beq.n	80032fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80032f2:	887a      	ldrh	r2, [r7, #2]
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80032f8:	e002      	b.n	8003300 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80032fa:	887a      	ldrh	r2, [r7, #2]
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003300:	bf00      	nop
 8003302:	370c      	adds	r7, #12
 8003304:	46bd      	mov	sp, r7
 8003306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330a:	4770      	bx	lr

0800330c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b082      	sub	sp, #8
 8003310:	af00      	add	r7, sp, #0
 8003312:	4603      	mov	r3, r0
 8003314:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003316:	4b08      	ldr	r3, [pc, #32]	; (8003338 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003318:	695a      	ldr	r2, [r3, #20]
 800331a:	88fb      	ldrh	r3, [r7, #6]
 800331c:	4013      	ands	r3, r2
 800331e:	2b00      	cmp	r3, #0
 8003320:	d006      	beq.n	8003330 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003322:	4a05      	ldr	r2, [pc, #20]	; (8003338 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003324:	88fb      	ldrh	r3, [r7, #6]
 8003326:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003328:	88fb      	ldrh	r3, [r7, #6]
 800332a:	4618      	mov	r0, r3
 800332c:	f7fd feb0 	bl	8001090 <HAL_GPIO_EXTI_Callback>
  }
}
 8003330:	bf00      	nop
 8003332:	3708      	adds	r7, #8
 8003334:	46bd      	mov	sp, r7
 8003336:	bd80      	pop	{r7, pc}
 8003338:	40010400 	.word	0x40010400

0800333c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b082      	sub	sp, #8
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d101      	bne.n	800334e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800334a:	2301      	movs	r3, #1
 800334c:	e081      	b.n	8003452 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003354:	b2db      	uxtb	r3, r3
 8003356:	2b00      	cmp	r3, #0
 8003358:	d106      	bne.n	8003368 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	2200      	movs	r2, #0
 800335e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003362:	6878      	ldr	r0, [r7, #4]
 8003364:	f7fe fd6a 	bl	8001e3c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2224      	movs	r2, #36	; 0x24
 800336c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	681a      	ldr	r2, [r3, #0]
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f022 0201 	bic.w	r2, r2, #1
 800337e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	685a      	ldr	r2, [r3, #4]
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800338c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	689a      	ldr	r2, [r3, #8]
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800339c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	68db      	ldr	r3, [r3, #12]
 80033a2:	2b01      	cmp	r3, #1
 80033a4:	d107      	bne.n	80033b6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	689a      	ldr	r2, [r3, #8]
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80033b2:	609a      	str	r2, [r3, #8]
 80033b4:	e006      	b.n	80033c4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	689a      	ldr	r2, [r3, #8]
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80033c2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	68db      	ldr	r3, [r3, #12]
 80033c8:	2b02      	cmp	r3, #2
 80033ca:	d104      	bne.n	80033d6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80033d4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	687a      	ldr	r2, [r7, #4]
 80033de:	6812      	ldr	r2, [r2, #0]
 80033e0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80033e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80033e8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	68da      	ldr	r2, [r3, #12]
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80033f8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	691a      	ldr	r2, [r3, #16]
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	695b      	ldr	r3, [r3, #20]
 8003402:	ea42 0103 	orr.w	r1, r2, r3
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	699b      	ldr	r3, [r3, #24]
 800340a:	021a      	lsls	r2, r3, #8
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	430a      	orrs	r2, r1
 8003412:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	69d9      	ldr	r1, [r3, #28]
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6a1a      	ldr	r2, [r3, #32]
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	430a      	orrs	r2, r1
 8003422:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	681a      	ldr	r2, [r3, #0]
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f042 0201 	orr.w	r2, r2, #1
 8003432:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2200      	movs	r2, #0
 8003438:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2220      	movs	r2, #32
 800343e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2200      	movs	r2, #0
 8003446:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2200      	movs	r2, #0
 800344c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003450:	2300      	movs	r3, #0
}
 8003452:	4618      	mov	r0, r3
 8003454:	3708      	adds	r7, #8
 8003456:	46bd      	mov	sp, r7
 8003458:	bd80      	pop	{r7, pc}

0800345a <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800345a:	b580      	push	{r7, lr}
 800345c:	b082      	sub	sp, #8
 800345e:	af00      	add	r7, sp, #0
 8003460:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d101      	bne.n	800346c <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8003468:	2301      	movs	r3, #1
 800346a:	e021      	b.n	80034b0 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2224      	movs	r2, #36	; 0x24
 8003470:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	681a      	ldr	r2, [r3, #0]
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f022 0201 	bic.w	r2, r2, #1
 8003482:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8003484:	6878      	ldr	r0, [r7, #4]
 8003486:	f7fe fd37 	bl	8001ef8 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2200      	movs	r2, #0
 800348e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2200      	movs	r2, #0
 8003494:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2200      	movs	r2, #0
 800349c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2200      	movs	r2, #0
 80034a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2200      	movs	r2, #0
 80034aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80034ae:	2300      	movs	r3, #0
}
 80034b0:	4618      	mov	r0, r3
 80034b2:	3708      	adds	r7, #8
 80034b4:	46bd      	mov	sp, r7
 80034b6:	bd80      	pop	{r7, pc}

080034b8 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b088      	sub	sp, #32
 80034bc:	af02      	add	r7, sp, #8
 80034be:	60f8      	str	r0, [r7, #12]
 80034c0:	4608      	mov	r0, r1
 80034c2:	4611      	mov	r1, r2
 80034c4:	461a      	mov	r2, r3
 80034c6:	4603      	mov	r3, r0
 80034c8:	817b      	strh	r3, [r7, #10]
 80034ca:	460b      	mov	r3, r1
 80034cc:	813b      	strh	r3, [r7, #8]
 80034ce:	4613      	mov	r3, r2
 80034d0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80034d8:	b2db      	uxtb	r3, r3
 80034da:	2b20      	cmp	r3, #32
 80034dc:	f040 80f9 	bne.w	80036d2 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80034e0:	6a3b      	ldr	r3, [r7, #32]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d002      	beq.n	80034ec <HAL_I2C_Mem_Write+0x34>
 80034e6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d105      	bne.n	80034f8 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80034f2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80034f4:	2301      	movs	r3, #1
 80034f6:	e0ed      	b.n	80036d4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80034fe:	2b01      	cmp	r3, #1
 8003500:	d101      	bne.n	8003506 <HAL_I2C_Mem_Write+0x4e>
 8003502:	2302      	movs	r3, #2
 8003504:	e0e6      	b.n	80036d4 <HAL_I2C_Mem_Write+0x21c>
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	2201      	movs	r2, #1
 800350a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800350e:	f7ff f95f 	bl	80027d0 <HAL_GetTick>
 8003512:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003514:	697b      	ldr	r3, [r7, #20]
 8003516:	9300      	str	r3, [sp, #0]
 8003518:	2319      	movs	r3, #25
 800351a:	2201      	movs	r2, #1
 800351c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003520:	68f8      	ldr	r0, [r7, #12]
 8003522:	f000 fac3 	bl	8003aac <I2C_WaitOnFlagUntilTimeout>
 8003526:	4603      	mov	r3, r0
 8003528:	2b00      	cmp	r3, #0
 800352a:	d001      	beq.n	8003530 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800352c:	2301      	movs	r3, #1
 800352e:	e0d1      	b.n	80036d4 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	2221      	movs	r2, #33	; 0x21
 8003534:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	2240      	movs	r2, #64	; 0x40
 800353c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	2200      	movs	r2, #0
 8003544:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	6a3a      	ldr	r2, [r7, #32]
 800354a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003550:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	2200      	movs	r2, #0
 8003556:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003558:	88f8      	ldrh	r0, [r7, #6]
 800355a:	893a      	ldrh	r2, [r7, #8]
 800355c:	8979      	ldrh	r1, [r7, #10]
 800355e:	697b      	ldr	r3, [r7, #20]
 8003560:	9301      	str	r3, [sp, #4]
 8003562:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003564:	9300      	str	r3, [sp, #0]
 8003566:	4603      	mov	r3, r0
 8003568:	68f8      	ldr	r0, [r7, #12]
 800356a:	f000 f9d3 	bl	8003914 <I2C_RequestMemoryWrite>
 800356e:	4603      	mov	r3, r0
 8003570:	2b00      	cmp	r3, #0
 8003572:	d005      	beq.n	8003580 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	2200      	movs	r2, #0
 8003578:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800357c:	2301      	movs	r3, #1
 800357e:	e0a9      	b.n	80036d4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003584:	b29b      	uxth	r3, r3
 8003586:	2bff      	cmp	r3, #255	; 0xff
 8003588:	d90e      	bls.n	80035a8 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	22ff      	movs	r2, #255	; 0xff
 800358e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003594:	b2da      	uxtb	r2, r3
 8003596:	8979      	ldrh	r1, [r7, #10]
 8003598:	2300      	movs	r3, #0
 800359a:	9300      	str	r3, [sp, #0]
 800359c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80035a0:	68f8      	ldr	r0, [r7, #12]
 80035a2:	f000 fba5 	bl	8003cf0 <I2C_TransferConfig>
 80035a6:	e00f      	b.n	80035c8 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035ac:	b29a      	uxth	r2, r3
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035b6:	b2da      	uxtb	r2, r3
 80035b8:	8979      	ldrh	r1, [r7, #10]
 80035ba:	2300      	movs	r3, #0
 80035bc:	9300      	str	r3, [sp, #0]
 80035be:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80035c2:	68f8      	ldr	r0, [r7, #12]
 80035c4:	f000 fb94 	bl	8003cf0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80035c8:	697a      	ldr	r2, [r7, #20]
 80035ca:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80035cc:	68f8      	ldr	r0, [r7, #12]
 80035ce:	f000 faad 	bl	8003b2c <I2C_WaitOnTXISFlagUntilTimeout>
 80035d2:	4603      	mov	r3, r0
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d001      	beq.n	80035dc <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80035d8:	2301      	movs	r3, #1
 80035da:	e07b      	b.n	80036d4 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035e0:	781a      	ldrb	r2, [r3, #0]
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ec:	1c5a      	adds	r2, r3, #1
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035f6:	b29b      	uxth	r3, r3
 80035f8:	3b01      	subs	r3, #1
 80035fa:	b29a      	uxth	r2, r3
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003604:	3b01      	subs	r3, #1
 8003606:	b29a      	uxth	r2, r3
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003610:	b29b      	uxth	r3, r3
 8003612:	2b00      	cmp	r3, #0
 8003614:	d034      	beq.n	8003680 <HAL_I2C_Mem_Write+0x1c8>
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800361a:	2b00      	cmp	r3, #0
 800361c:	d130      	bne.n	8003680 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800361e:	697b      	ldr	r3, [r7, #20]
 8003620:	9300      	str	r3, [sp, #0]
 8003622:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003624:	2200      	movs	r2, #0
 8003626:	2180      	movs	r1, #128	; 0x80
 8003628:	68f8      	ldr	r0, [r7, #12]
 800362a:	f000 fa3f 	bl	8003aac <I2C_WaitOnFlagUntilTimeout>
 800362e:	4603      	mov	r3, r0
 8003630:	2b00      	cmp	r3, #0
 8003632:	d001      	beq.n	8003638 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003634:	2301      	movs	r3, #1
 8003636:	e04d      	b.n	80036d4 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800363c:	b29b      	uxth	r3, r3
 800363e:	2bff      	cmp	r3, #255	; 0xff
 8003640:	d90e      	bls.n	8003660 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	22ff      	movs	r2, #255	; 0xff
 8003646:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800364c:	b2da      	uxtb	r2, r3
 800364e:	8979      	ldrh	r1, [r7, #10]
 8003650:	2300      	movs	r3, #0
 8003652:	9300      	str	r3, [sp, #0]
 8003654:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003658:	68f8      	ldr	r0, [r7, #12]
 800365a:	f000 fb49 	bl	8003cf0 <I2C_TransferConfig>
 800365e:	e00f      	b.n	8003680 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003664:	b29a      	uxth	r2, r3
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800366e:	b2da      	uxtb	r2, r3
 8003670:	8979      	ldrh	r1, [r7, #10]
 8003672:	2300      	movs	r3, #0
 8003674:	9300      	str	r3, [sp, #0]
 8003676:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800367a:	68f8      	ldr	r0, [r7, #12]
 800367c:	f000 fb38 	bl	8003cf0 <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003684:	b29b      	uxth	r3, r3
 8003686:	2b00      	cmp	r3, #0
 8003688:	d19e      	bne.n	80035c8 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800368a:	697a      	ldr	r2, [r7, #20]
 800368c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800368e:	68f8      	ldr	r0, [r7, #12]
 8003690:	f000 fa8c 	bl	8003bac <I2C_WaitOnSTOPFlagUntilTimeout>
 8003694:	4603      	mov	r3, r0
 8003696:	2b00      	cmp	r3, #0
 8003698:	d001      	beq.n	800369e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800369a:	2301      	movs	r3, #1
 800369c:	e01a      	b.n	80036d4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	2220      	movs	r2, #32
 80036a4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	6859      	ldr	r1, [r3, #4]
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681a      	ldr	r2, [r3, #0]
 80036b0:	4b0a      	ldr	r3, [pc, #40]	; (80036dc <HAL_I2C_Mem_Write+0x224>)
 80036b2:	400b      	ands	r3, r1
 80036b4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	2220      	movs	r2, #32
 80036ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	2200      	movs	r2, #0
 80036c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	2200      	movs	r2, #0
 80036ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80036ce:	2300      	movs	r3, #0
 80036d0:	e000      	b.n	80036d4 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80036d2:	2302      	movs	r3, #2
  }
}
 80036d4:	4618      	mov	r0, r3
 80036d6:	3718      	adds	r7, #24
 80036d8:	46bd      	mov	sp, r7
 80036da:	bd80      	pop	{r7, pc}
 80036dc:	fe00e800 	.word	0xfe00e800

080036e0 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b088      	sub	sp, #32
 80036e4:	af02      	add	r7, sp, #8
 80036e6:	60f8      	str	r0, [r7, #12]
 80036e8:	4608      	mov	r0, r1
 80036ea:	4611      	mov	r1, r2
 80036ec:	461a      	mov	r2, r3
 80036ee:	4603      	mov	r3, r0
 80036f0:	817b      	strh	r3, [r7, #10]
 80036f2:	460b      	mov	r3, r1
 80036f4:	813b      	strh	r3, [r7, #8]
 80036f6:	4613      	mov	r3, r2
 80036f8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003700:	b2db      	uxtb	r3, r3
 8003702:	2b20      	cmp	r3, #32
 8003704:	f040 80fd 	bne.w	8003902 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8003708:	6a3b      	ldr	r3, [r7, #32]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d002      	beq.n	8003714 <HAL_I2C_Mem_Read+0x34>
 800370e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003710:	2b00      	cmp	r3, #0
 8003712:	d105      	bne.n	8003720 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	f44f 7200 	mov.w	r2, #512	; 0x200
 800371a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800371c:	2301      	movs	r3, #1
 800371e:	e0f1      	b.n	8003904 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003726:	2b01      	cmp	r3, #1
 8003728:	d101      	bne.n	800372e <HAL_I2C_Mem_Read+0x4e>
 800372a:	2302      	movs	r3, #2
 800372c:	e0ea      	b.n	8003904 <HAL_I2C_Mem_Read+0x224>
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	2201      	movs	r2, #1
 8003732:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003736:	f7ff f84b 	bl	80027d0 <HAL_GetTick>
 800373a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800373c:	697b      	ldr	r3, [r7, #20]
 800373e:	9300      	str	r3, [sp, #0]
 8003740:	2319      	movs	r3, #25
 8003742:	2201      	movs	r2, #1
 8003744:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003748:	68f8      	ldr	r0, [r7, #12]
 800374a:	f000 f9af 	bl	8003aac <I2C_WaitOnFlagUntilTimeout>
 800374e:	4603      	mov	r3, r0
 8003750:	2b00      	cmp	r3, #0
 8003752:	d001      	beq.n	8003758 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8003754:	2301      	movs	r3, #1
 8003756:	e0d5      	b.n	8003904 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	2222      	movs	r2, #34	; 0x22
 800375c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	2240      	movs	r2, #64	; 0x40
 8003764:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	2200      	movs	r2, #0
 800376c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	6a3a      	ldr	r2, [r7, #32]
 8003772:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003778:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	2200      	movs	r2, #0
 800377e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003780:	88f8      	ldrh	r0, [r7, #6]
 8003782:	893a      	ldrh	r2, [r7, #8]
 8003784:	8979      	ldrh	r1, [r7, #10]
 8003786:	697b      	ldr	r3, [r7, #20]
 8003788:	9301      	str	r3, [sp, #4]
 800378a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800378c:	9300      	str	r3, [sp, #0]
 800378e:	4603      	mov	r3, r0
 8003790:	68f8      	ldr	r0, [r7, #12]
 8003792:	f000 f913 	bl	80039bc <I2C_RequestMemoryRead>
 8003796:	4603      	mov	r3, r0
 8003798:	2b00      	cmp	r3, #0
 800379a:	d005      	beq.n	80037a8 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	2200      	movs	r2, #0
 80037a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80037a4:	2301      	movs	r3, #1
 80037a6:	e0ad      	b.n	8003904 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037ac:	b29b      	uxth	r3, r3
 80037ae:	2bff      	cmp	r3, #255	; 0xff
 80037b0:	d90e      	bls.n	80037d0 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	22ff      	movs	r2, #255	; 0xff
 80037b6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037bc:	b2da      	uxtb	r2, r3
 80037be:	8979      	ldrh	r1, [r7, #10]
 80037c0:	4b52      	ldr	r3, [pc, #328]	; (800390c <HAL_I2C_Mem_Read+0x22c>)
 80037c2:	9300      	str	r3, [sp, #0]
 80037c4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80037c8:	68f8      	ldr	r0, [r7, #12]
 80037ca:	f000 fa91 	bl	8003cf0 <I2C_TransferConfig>
 80037ce:	e00f      	b.n	80037f0 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037d4:	b29a      	uxth	r2, r3
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037de:	b2da      	uxtb	r2, r3
 80037e0:	8979      	ldrh	r1, [r7, #10]
 80037e2:	4b4a      	ldr	r3, [pc, #296]	; (800390c <HAL_I2C_Mem_Read+0x22c>)
 80037e4:	9300      	str	r3, [sp, #0]
 80037e6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80037ea:	68f8      	ldr	r0, [r7, #12]
 80037ec:	f000 fa80 	bl	8003cf0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80037f0:	697b      	ldr	r3, [r7, #20]
 80037f2:	9300      	str	r3, [sp, #0]
 80037f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037f6:	2200      	movs	r2, #0
 80037f8:	2104      	movs	r1, #4
 80037fa:	68f8      	ldr	r0, [r7, #12]
 80037fc:	f000 f956 	bl	8003aac <I2C_WaitOnFlagUntilTimeout>
 8003800:	4603      	mov	r3, r0
 8003802:	2b00      	cmp	r3, #0
 8003804:	d001      	beq.n	800380a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8003806:	2301      	movs	r3, #1
 8003808:	e07c      	b.n	8003904 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003814:	b2d2      	uxtb	r2, r2
 8003816:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800381c:	1c5a      	adds	r2, r3, #1
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003826:	3b01      	subs	r3, #1
 8003828:	b29a      	uxth	r2, r3
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003832:	b29b      	uxth	r3, r3
 8003834:	3b01      	subs	r3, #1
 8003836:	b29a      	uxth	r2, r3
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003840:	b29b      	uxth	r3, r3
 8003842:	2b00      	cmp	r3, #0
 8003844:	d034      	beq.n	80038b0 <HAL_I2C_Mem_Read+0x1d0>
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800384a:	2b00      	cmp	r3, #0
 800384c:	d130      	bne.n	80038b0 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800384e:	697b      	ldr	r3, [r7, #20]
 8003850:	9300      	str	r3, [sp, #0]
 8003852:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003854:	2200      	movs	r2, #0
 8003856:	2180      	movs	r1, #128	; 0x80
 8003858:	68f8      	ldr	r0, [r7, #12]
 800385a:	f000 f927 	bl	8003aac <I2C_WaitOnFlagUntilTimeout>
 800385e:	4603      	mov	r3, r0
 8003860:	2b00      	cmp	r3, #0
 8003862:	d001      	beq.n	8003868 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003864:	2301      	movs	r3, #1
 8003866:	e04d      	b.n	8003904 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800386c:	b29b      	uxth	r3, r3
 800386e:	2bff      	cmp	r3, #255	; 0xff
 8003870:	d90e      	bls.n	8003890 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	22ff      	movs	r2, #255	; 0xff
 8003876:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800387c:	b2da      	uxtb	r2, r3
 800387e:	8979      	ldrh	r1, [r7, #10]
 8003880:	2300      	movs	r3, #0
 8003882:	9300      	str	r3, [sp, #0]
 8003884:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003888:	68f8      	ldr	r0, [r7, #12]
 800388a:	f000 fa31 	bl	8003cf0 <I2C_TransferConfig>
 800388e:	e00f      	b.n	80038b0 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003894:	b29a      	uxth	r2, r3
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800389e:	b2da      	uxtb	r2, r3
 80038a0:	8979      	ldrh	r1, [r7, #10]
 80038a2:	2300      	movs	r3, #0
 80038a4:	9300      	str	r3, [sp, #0]
 80038a6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80038aa:	68f8      	ldr	r0, [r7, #12]
 80038ac:	f000 fa20 	bl	8003cf0 <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038b4:	b29b      	uxth	r3, r3
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d19a      	bne.n	80037f0 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80038ba:	697a      	ldr	r2, [r7, #20]
 80038bc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80038be:	68f8      	ldr	r0, [r7, #12]
 80038c0:	f000 f974 	bl	8003bac <I2C_WaitOnSTOPFlagUntilTimeout>
 80038c4:	4603      	mov	r3, r0
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d001      	beq.n	80038ce <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80038ca:	2301      	movs	r3, #1
 80038cc:	e01a      	b.n	8003904 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	2220      	movs	r2, #32
 80038d4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	6859      	ldr	r1, [r3, #4]
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681a      	ldr	r2, [r3, #0]
 80038e0:	4b0b      	ldr	r3, [pc, #44]	; (8003910 <HAL_I2C_Mem_Read+0x230>)
 80038e2:	400b      	ands	r3, r1
 80038e4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	2220      	movs	r2, #32
 80038ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	2200      	movs	r2, #0
 80038f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	2200      	movs	r2, #0
 80038fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80038fe:	2300      	movs	r3, #0
 8003900:	e000      	b.n	8003904 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8003902:	2302      	movs	r3, #2
  }
}
 8003904:	4618      	mov	r0, r3
 8003906:	3718      	adds	r7, #24
 8003908:	46bd      	mov	sp, r7
 800390a:	bd80      	pop	{r7, pc}
 800390c:	80002400 	.word	0x80002400
 8003910:	fe00e800 	.word	0xfe00e800

08003914 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b086      	sub	sp, #24
 8003918:	af02      	add	r7, sp, #8
 800391a:	60f8      	str	r0, [r7, #12]
 800391c:	4608      	mov	r0, r1
 800391e:	4611      	mov	r1, r2
 8003920:	461a      	mov	r2, r3
 8003922:	4603      	mov	r3, r0
 8003924:	817b      	strh	r3, [r7, #10]
 8003926:	460b      	mov	r3, r1
 8003928:	813b      	strh	r3, [r7, #8]
 800392a:	4613      	mov	r3, r2
 800392c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800392e:	88fb      	ldrh	r3, [r7, #6]
 8003930:	b2da      	uxtb	r2, r3
 8003932:	8979      	ldrh	r1, [r7, #10]
 8003934:	4b20      	ldr	r3, [pc, #128]	; (80039b8 <I2C_RequestMemoryWrite+0xa4>)
 8003936:	9300      	str	r3, [sp, #0]
 8003938:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800393c:	68f8      	ldr	r0, [r7, #12]
 800393e:	f000 f9d7 	bl	8003cf0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003942:	69fa      	ldr	r2, [r7, #28]
 8003944:	69b9      	ldr	r1, [r7, #24]
 8003946:	68f8      	ldr	r0, [r7, #12]
 8003948:	f000 f8f0 	bl	8003b2c <I2C_WaitOnTXISFlagUntilTimeout>
 800394c:	4603      	mov	r3, r0
 800394e:	2b00      	cmp	r3, #0
 8003950:	d001      	beq.n	8003956 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8003952:	2301      	movs	r3, #1
 8003954:	e02c      	b.n	80039b0 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003956:	88fb      	ldrh	r3, [r7, #6]
 8003958:	2b01      	cmp	r3, #1
 800395a:	d105      	bne.n	8003968 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800395c:	893b      	ldrh	r3, [r7, #8]
 800395e:	b2da      	uxtb	r2, r3
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	629a      	str	r2, [r3, #40]	; 0x28
 8003966:	e015      	b.n	8003994 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003968:	893b      	ldrh	r3, [r7, #8]
 800396a:	0a1b      	lsrs	r3, r3, #8
 800396c:	b29b      	uxth	r3, r3
 800396e:	b2da      	uxtb	r2, r3
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003976:	69fa      	ldr	r2, [r7, #28]
 8003978:	69b9      	ldr	r1, [r7, #24]
 800397a:	68f8      	ldr	r0, [r7, #12]
 800397c:	f000 f8d6 	bl	8003b2c <I2C_WaitOnTXISFlagUntilTimeout>
 8003980:	4603      	mov	r3, r0
 8003982:	2b00      	cmp	r3, #0
 8003984:	d001      	beq.n	800398a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8003986:	2301      	movs	r3, #1
 8003988:	e012      	b.n	80039b0 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800398a:	893b      	ldrh	r3, [r7, #8]
 800398c:	b2da      	uxtb	r2, r3
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003994:	69fb      	ldr	r3, [r7, #28]
 8003996:	9300      	str	r3, [sp, #0]
 8003998:	69bb      	ldr	r3, [r7, #24]
 800399a:	2200      	movs	r2, #0
 800399c:	2180      	movs	r1, #128	; 0x80
 800399e:	68f8      	ldr	r0, [r7, #12]
 80039a0:	f000 f884 	bl	8003aac <I2C_WaitOnFlagUntilTimeout>
 80039a4:	4603      	mov	r3, r0
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d001      	beq.n	80039ae <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80039aa:	2301      	movs	r3, #1
 80039ac:	e000      	b.n	80039b0 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80039ae:	2300      	movs	r3, #0
}
 80039b0:	4618      	mov	r0, r3
 80039b2:	3710      	adds	r7, #16
 80039b4:	46bd      	mov	sp, r7
 80039b6:	bd80      	pop	{r7, pc}
 80039b8:	80002000 	.word	0x80002000

080039bc <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b086      	sub	sp, #24
 80039c0:	af02      	add	r7, sp, #8
 80039c2:	60f8      	str	r0, [r7, #12]
 80039c4:	4608      	mov	r0, r1
 80039c6:	4611      	mov	r1, r2
 80039c8:	461a      	mov	r2, r3
 80039ca:	4603      	mov	r3, r0
 80039cc:	817b      	strh	r3, [r7, #10]
 80039ce:	460b      	mov	r3, r1
 80039d0:	813b      	strh	r3, [r7, #8]
 80039d2:	4613      	mov	r3, r2
 80039d4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80039d6:	88fb      	ldrh	r3, [r7, #6]
 80039d8:	b2da      	uxtb	r2, r3
 80039da:	8979      	ldrh	r1, [r7, #10]
 80039dc:	4b20      	ldr	r3, [pc, #128]	; (8003a60 <I2C_RequestMemoryRead+0xa4>)
 80039de:	9300      	str	r3, [sp, #0]
 80039e0:	2300      	movs	r3, #0
 80039e2:	68f8      	ldr	r0, [r7, #12]
 80039e4:	f000 f984 	bl	8003cf0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80039e8:	69fa      	ldr	r2, [r7, #28]
 80039ea:	69b9      	ldr	r1, [r7, #24]
 80039ec:	68f8      	ldr	r0, [r7, #12]
 80039ee:	f000 f89d 	bl	8003b2c <I2C_WaitOnTXISFlagUntilTimeout>
 80039f2:	4603      	mov	r3, r0
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d001      	beq.n	80039fc <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80039f8:	2301      	movs	r3, #1
 80039fa:	e02c      	b.n	8003a56 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80039fc:	88fb      	ldrh	r3, [r7, #6]
 80039fe:	2b01      	cmp	r3, #1
 8003a00:	d105      	bne.n	8003a0e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003a02:	893b      	ldrh	r3, [r7, #8]
 8003a04:	b2da      	uxtb	r2, r3
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	629a      	str	r2, [r3, #40]	; 0x28
 8003a0c:	e015      	b.n	8003a3a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003a0e:	893b      	ldrh	r3, [r7, #8]
 8003a10:	0a1b      	lsrs	r3, r3, #8
 8003a12:	b29b      	uxth	r3, r3
 8003a14:	b2da      	uxtb	r2, r3
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a1c:	69fa      	ldr	r2, [r7, #28]
 8003a1e:	69b9      	ldr	r1, [r7, #24]
 8003a20:	68f8      	ldr	r0, [r7, #12]
 8003a22:	f000 f883 	bl	8003b2c <I2C_WaitOnTXISFlagUntilTimeout>
 8003a26:	4603      	mov	r3, r0
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d001      	beq.n	8003a30 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	e012      	b.n	8003a56 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003a30:	893b      	ldrh	r3, [r7, #8]
 8003a32:	b2da      	uxtb	r2, r3
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003a3a:	69fb      	ldr	r3, [r7, #28]
 8003a3c:	9300      	str	r3, [sp, #0]
 8003a3e:	69bb      	ldr	r3, [r7, #24]
 8003a40:	2200      	movs	r2, #0
 8003a42:	2140      	movs	r1, #64	; 0x40
 8003a44:	68f8      	ldr	r0, [r7, #12]
 8003a46:	f000 f831 	bl	8003aac <I2C_WaitOnFlagUntilTimeout>
 8003a4a:	4603      	mov	r3, r0
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d001      	beq.n	8003a54 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003a50:	2301      	movs	r3, #1
 8003a52:	e000      	b.n	8003a56 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003a54:	2300      	movs	r3, #0
}
 8003a56:	4618      	mov	r0, r3
 8003a58:	3710      	adds	r7, #16
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	bd80      	pop	{r7, pc}
 8003a5e:	bf00      	nop
 8003a60:	80002000 	.word	0x80002000

08003a64 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003a64:	b480      	push	{r7}
 8003a66:	b083      	sub	sp, #12
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	699b      	ldr	r3, [r3, #24]
 8003a72:	f003 0302 	and.w	r3, r3, #2
 8003a76:	2b02      	cmp	r3, #2
 8003a78:	d103      	bne.n	8003a82 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	2200      	movs	r2, #0
 8003a80:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	699b      	ldr	r3, [r3, #24]
 8003a88:	f003 0301 	and.w	r3, r3, #1
 8003a8c:	2b01      	cmp	r3, #1
 8003a8e:	d007      	beq.n	8003aa0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	699a      	ldr	r2, [r3, #24]
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f042 0201 	orr.w	r2, r2, #1
 8003a9e:	619a      	str	r2, [r3, #24]
  }
}
 8003aa0:	bf00      	nop
 8003aa2:	370c      	adds	r7, #12
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aaa:	4770      	bx	lr

08003aac <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b084      	sub	sp, #16
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	60f8      	str	r0, [r7, #12]
 8003ab4:	60b9      	str	r1, [r7, #8]
 8003ab6:	603b      	str	r3, [r7, #0]
 8003ab8:	4613      	mov	r3, r2
 8003aba:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003abc:	e022      	b.n	8003b04 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ac4:	d01e      	beq.n	8003b04 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ac6:	f7fe fe83 	bl	80027d0 <HAL_GetTick>
 8003aca:	4602      	mov	r2, r0
 8003acc:	69bb      	ldr	r3, [r7, #24]
 8003ace:	1ad3      	subs	r3, r2, r3
 8003ad0:	683a      	ldr	r2, [r7, #0]
 8003ad2:	429a      	cmp	r2, r3
 8003ad4:	d302      	bcc.n	8003adc <I2C_WaitOnFlagUntilTimeout+0x30>
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d113      	bne.n	8003b04 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ae0:	f043 0220 	orr.w	r2, r3, #32
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	2220      	movs	r2, #32
 8003aec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	2200      	movs	r2, #0
 8003af4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	2200      	movs	r2, #0
 8003afc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003b00:	2301      	movs	r3, #1
 8003b02:	e00f      	b.n	8003b24 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	699a      	ldr	r2, [r3, #24]
 8003b0a:	68bb      	ldr	r3, [r7, #8]
 8003b0c:	4013      	ands	r3, r2
 8003b0e:	68ba      	ldr	r2, [r7, #8]
 8003b10:	429a      	cmp	r2, r3
 8003b12:	bf0c      	ite	eq
 8003b14:	2301      	moveq	r3, #1
 8003b16:	2300      	movne	r3, #0
 8003b18:	b2db      	uxtb	r3, r3
 8003b1a:	461a      	mov	r2, r3
 8003b1c:	79fb      	ldrb	r3, [r7, #7]
 8003b1e:	429a      	cmp	r2, r3
 8003b20:	d0cd      	beq.n	8003abe <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003b22:	2300      	movs	r3, #0
}
 8003b24:	4618      	mov	r0, r3
 8003b26:	3710      	adds	r7, #16
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	bd80      	pop	{r7, pc}

08003b2c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b084      	sub	sp, #16
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	60f8      	str	r0, [r7, #12]
 8003b34:	60b9      	str	r1, [r7, #8]
 8003b36:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003b38:	e02c      	b.n	8003b94 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b3a:	687a      	ldr	r2, [r7, #4]
 8003b3c:	68b9      	ldr	r1, [r7, #8]
 8003b3e:	68f8      	ldr	r0, [r7, #12]
 8003b40:	f000 f870 	bl	8003c24 <I2C_IsAcknowledgeFailed>
 8003b44:	4603      	mov	r3, r0
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d001      	beq.n	8003b4e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	e02a      	b.n	8003ba4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b4e:	68bb      	ldr	r3, [r7, #8]
 8003b50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b54:	d01e      	beq.n	8003b94 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b56:	f7fe fe3b 	bl	80027d0 <HAL_GetTick>
 8003b5a:	4602      	mov	r2, r0
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	1ad3      	subs	r3, r2, r3
 8003b60:	68ba      	ldr	r2, [r7, #8]
 8003b62:	429a      	cmp	r2, r3
 8003b64:	d302      	bcc.n	8003b6c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003b66:	68bb      	ldr	r3, [r7, #8]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d113      	bne.n	8003b94 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b70:	f043 0220 	orr.w	r2, r3, #32
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	2220      	movs	r2, #32
 8003b7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	2200      	movs	r2, #0
 8003b84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003b90:	2301      	movs	r3, #1
 8003b92:	e007      	b.n	8003ba4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	699b      	ldr	r3, [r3, #24]
 8003b9a:	f003 0302 	and.w	r3, r3, #2
 8003b9e:	2b02      	cmp	r3, #2
 8003ba0:	d1cb      	bne.n	8003b3a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003ba2:	2300      	movs	r3, #0
}
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	3710      	adds	r7, #16
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	bd80      	pop	{r7, pc}

08003bac <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b084      	sub	sp, #16
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	60f8      	str	r0, [r7, #12]
 8003bb4:	60b9      	str	r1, [r7, #8]
 8003bb6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003bb8:	e028      	b.n	8003c0c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003bba:	687a      	ldr	r2, [r7, #4]
 8003bbc:	68b9      	ldr	r1, [r7, #8]
 8003bbe:	68f8      	ldr	r0, [r7, #12]
 8003bc0:	f000 f830 	bl	8003c24 <I2C_IsAcknowledgeFailed>
 8003bc4:	4603      	mov	r3, r0
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d001      	beq.n	8003bce <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003bca:	2301      	movs	r3, #1
 8003bcc:	e026      	b.n	8003c1c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bce:	f7fe fdff 	bl	80027d0 <HAL_GetTick>
 8003bd2:	4602      	mov	r2, r0
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	1ad3      	subs	r3, r2, r3
 8003bd8:	68ba      	ldr	r2, [r7, #8]
 8003bda:	429a      	cmp	r2, r3
 8003bdc:	d302      	bcc.n	8003be4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003bde:	68bb      	ldr	r3, [r7, #8]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d113      	bne.n	8003c0c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003be8:	f043 0220 	orr.w	r2, r3, #32
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	2220      	movs	r2, #32
 8003bf4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	2200      	movs	r2, #0
 8003c04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003c08:	2301      	movs	r3, #1
 8003c0a:	e007      	b.n	8003c1c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	699b      	ldr	r3, [r3, #24]
 8003c12:	f003 0320 	and.w	r3, r3, #32
 8003c16:	2b20      	cmp	r3, #32
 8003c18:	d1cf      	bne.n	8003bba <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003c1a:	2300      	movs	r3, #0
}
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	3710      	adds	r7, #16
 8003c20:	46bd      	mov	sp, r7
 8003c22:	bd80      	pop	{r7, pc}

08003c24 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b084      	sub	sp, #16
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	60f8      	str	r0, [r7, #12]
 8003c2c:	60b9      	str	r1, [r7, #8]
 8003c2e:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	699b      	ldr	r3, [r3, #24]
 8003c36:	f003 0310 	and.w	r3, r3, #16
 8003c3a:	2b10      	cmp	r3, #16
 8003c3c:	d151      	bne.n	8003ce2 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003c3e:	e022      	b.n	8003c86 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003c40:	68bb      	ldr	r3, [r7, #8]
 8003c42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c46:	d01e      	beq.n	8003c86 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c48:	f7fe fdc2 	bl	80027d0 <HAL_GetTick>
 8003c4c:	4602      	mov	r2, r0
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	1ad3      	subs	r3, r2, r3
 8003c52:	68ba      	ldr	r2, [r7, #8]
 8003c54:	429a      	cmp	r2, r3
 8003c56:	d302      	bcc.n	8003c5e <I2C_IsAcknowledgeFailed+0x3a>
 8003c58:	68bb      	ldr	r3, [r7, #8]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d113      	bne.n	8003c86 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c62:	f043 0220 	orr.w	r2, r3, #32
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	2220      	movs	r2, #32
 8003c6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	2200      	movs	r2, #0
 8003c76:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8003c82:	2301      	movs	r3, #1
 8003c84:	e02e      	b.n	8003ce4 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	699b      	ldr	r3, [r3, #24]
 8003c8c:	f003 0320 	and.w	r3, r3, #32
 8003c90:	2b20      	cmp	r3, #32
 8003c92:	d1d5      	bne.n	8003c40 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	2210      	movs	r2, #16
 8003c9a:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	2220      	movs	r2, #32
 8003ca2:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003ca4:	68f8      	ldr	r0, [r7, #12]
 8003ca6:	f7ff fedd 	bl	8003a64 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	6859      	ldr	r1, [r3, #4]
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681a      	ldr	r2, [r3, #0]
 8003cb4:	4b0d      	ldr	r3, [pc, #52]	; (8003cec <I2C_IsAcknowledgeFailed+0xc8>)
 8003cb6:	400b      	ands	r3, r1
 8003cb8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cbe:	f043 0204 	orr.w	r2, r3, #4
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	2220      	movs	r2, #32
 8003cca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	2200      	movs	r2, #0
 8003cda:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8003cde:	2301      	movs	r3, #1
 8003ce0:	e000      	b.n	8003ce4 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8003ce2:	2300      	movs	r3, #0
}
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	3710      	adds	r7, #16
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	bd80      	pop	{r7, pc}
 8003cec:	fe00e800 	.word	0xfe00e800

08003cf0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003cf0:	b480      	push	{r7}
 8003cf2:	b085      	sub	sp, #20
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	60f8      	str	r0, [r7, #12]
 8003cf8:	607b      	str	r3, [r7, #4]
 8003cfa:	460b      	mov	r3, r1
 8003cfc:	817b      	strh	r3, [r7, #10]
 8003cfe:	4613      	mov	r3, r2
 8003d00:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	685a      	ldr	r2, [r3, #4]
 8003d08:	69bb      	ldr	r3, [r7, #24]
 8003d0a:	0d5b      	lsrs	r3, r3, #21
 8003d0c:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003d10:	4b0d      	ldr	r3, [pc, #52]	; (8003d48 <I2C_TransferConfig+0x58>)
 8003d12:	430b      	orrs	r3, r1
 8003d14:	43db      	mvns	r3, r3
 8003d16:	ea02 0103 	and.w	r1, r2, r3
 8003d1a:	897b      	ldrh	r3, [r7, #10]
 8003d1c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003d20:	7a7b      	ldrb	r3, [r7, #9]
 8003d22:	041b      	lsls	r3, r3, #16
 8003d24:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003d28:	431a      	orrs	r2, r3
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	431a      	orrs	r2, r3
 8003d2e:	69bb      	ldr	r3, [r7, #24]
 8003d30:	431a      	orrs	r2, r3
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	430a      	orrs	r2, r1
 8003d38:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8003d3a:	bf00      	nop
 8003d3c:	3714      	adds	r7, #20
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d44:	4770      	bx	lr
 8003d46:	bf00      	nop
 8003d48:	03ff63ff 	.word	0x03ff63ff

08003d4c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003d4c:	b480      	push	{r7}
 8003d4e:	b083      	sub	sp, #12
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
 8003d54:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d5c:	b2db      	uxtb	r3, r3
 8003d5e:	2b20      	cmp	r3, #32
 8003d60:	d138      	bne.n	8003dd4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003d68:	2b01      	cmp	r3, #1
 8003d6a:	d101      	bne.n	8003d70 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003d6c:	2302      	movs	r3, #2
 8003d6e:	e032      	b.n	8003dd6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2201      	movs	r2, #1
 8003d74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2224      	movs	r2, #36	; 0x24
 8003d7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	681a      	ldr	r2, [r3, #0]
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f022 0201 	bic.w	r2, r2, #1
 8003d8e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	681a      	ldr	r2, [r3, #0]
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003d9e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	6819      	ldr	r1, [r3, #0]
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	683a      	ldr	r2, [r7, #0]
 8003dac:	430a      	orrs	r2, r1
 8003dae:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	681a      	ldr	r2, [r3, #0]
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f042 0201 	orr.w	r2, r2, #1
 8003dbe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2220      	movs	r2, #32
 8003dc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2200      	movs	r2, #0
 8003dcc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	e000      	b.n	8003dd6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003dd4:	2302      	movs	r3, #2
  }
}
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	370c      	adds	r7, #12
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de0:	4770      	bx	lr

08003de2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003de2:	b480      	push	{r7}
 8003de4:	b085      	sub	sp, #20
 8003de6:	af00      	add	r7, sp, #0
 8003de8:	6078      	str	r0, [r7, #4]
 8003dea:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003df2:	b2db      	uxtb	r3, r3
 8003df4:	2b20      	cmp	r3, #32
 8003df6:	d139      	bne.n	8003e6c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003dfe:	2b01      	cmp	r3, #1
 8003e00:	d101      	bne.n	8003e06 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003e02:	2302      	movs	r3, #2
 8003e04:	e033      	b.n	8003e6e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	2201      	movs	r2, #1
 8003e0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	2224      	movs	r2, #36	; 0x24
 8003e12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	681a      	ldr	r2, [r3, #0]
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f022 0201 	bic.w	r2, r2, #1
 8003e24:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003e34:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	021b      	lsls	r3, r3, #8
 8003e3a:	68fa      	ldr	r2, [r7, #12]
 8003e3c:	4313      	orrs	r3, r2
 8003e3e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	68fa      	ldr	r2, [r7, #12]
 8003e46:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	681a      	ldr	r2, [r3, #0]
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f042 0201 	orr.w	r2, r2, #1
 8003e56:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2220      	movs	r2, #32
 8003e5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2200      	movs	r2, #0
 8003e64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003e68:	2300      	movs	r3, #0
 8003e6a:	e000      	b.n	8003e6e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003e6c:	2302      	movs	r3, #2
  }
}
 8003e6e:	4618      	mov	r0, r3
 8003e70:	3714      	adds	r7, #20
 8003e72:	46bd      	mov	sp, r7
 8003e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e78:	4770      	bx	lr

08003e7a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003e7a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e7c:	b08f      	sub	sp, #60	; 0x3c
 8003e7e:	af0a      	add	r7, sp, #40	; 0x28
 8003e80:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d101      	bne.n	8003e8c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003e88:	2301      	movs	r3, #1
 8003e8a:	e116      	b.n	80040ba <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8003e98:	b2db      	uxtb	r3, r3
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d106      	bne.n	8003eac <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003ea6:	6878      	ldr	r0, [r7, #4]
 8003ea8:	f7fe fa00 	bl	80022ac <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2203      	movs	r2, #3
 8003eb0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003eb4:	68bb      	ldr	r3, [r7, #8]
 8003eb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003eb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d102      	bne.n	8003ec6 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	4618      	mov	r0, r3
 8003ecc:	f005 f83e 	bl	8008f4c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	603b      	str	r3, [r7, #0]
 8003ed6:	687e      	ldr	r6, [r7, #4]
 8003ed8:	466d      	mov	r5, sp
 8003eda:	f106 0410 	add.w	r4, r6, #16
 8003ede:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003ee0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003ee2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003ee4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003ee6:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003eea:	e885 0003 	stmia.w	r5, {r0, r1}
 8003eee:	1d33      	adds	r3, r6, #4
 8003ef0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003ef2:	6838      	ldr	r0, [r7, #0]
 8003ef4:	f004 fffe 	bl	8008ef4 <USB_CoreInit>
 8003ef8:	4603      	mov	r3, r0
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d005      	beq.n	8003f0a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2202      	movs	r2, #2
 8003f02:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003f06:	2301      	movs	r3, #1
 8003f08:	e0d7      	b.n	80040ba <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	2100      	movs	r1, #0
 8003f10:	4618      	mov	r0, r3
 8003f12:	f005 f82c 	bl	8008f6e <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003f16:	2300      	movs	r3, #0
 8003f18:	73fb      	strb	r3, [r7, #15]
 8003f1a:	e04a      	b.n	8003fb2 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003f1c:	7bfa      	ldrb	r2, [r7, #15]
 8003f1e:	6879      	ldr	r1, [r7, #4]
 8003f20:	4613      	mov	r3, r2
 8003f22:	00db      	lsls	r3, r3, #3
 8003f24:	1a9b      	subs	r3, r3, r2
 8003f26:	009b      	lsls	r3, r3, #2
 8003f28:	440b      	add	r3, r1
 8003f2a:	333d      	adds	r3, #61	; 0x3d
 8003f2c:	2201      	movs	r2, #1
 8003f2e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003f30:	7bfa      	ldrb	r2, [r7, #15]
 8003f32:	6879      	ldr	r1, [r7, #4]
 8003f34:	4613      	mov	r3, r2
 8003f36:	00db      	lsls	r3, r3, #3
 8003f38:	1a9b      	subs	r3, r3, r2
 8003f3a:	009b      	lsls	r3, r3, #2
 8003f3c:	440b      	add	r3, r1
 8003f3e:	333c      	adds	r3, #60	; 0x3c
 8003f40:	7bfa      	ldrb	r2, [r7, #15]
 8003f42:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003f44:	7bfa      	ldrb	r2, [r7, #15]
 8003f46:	7bfb      	ldrb	r3, [r7, #15]
 8003f48:	b298      	uxth	r0, r3
 8003f4a:	6879      	ldr	r1, [r7, #4]
 8003f4c:	4613      	mov	r3, r2
 8003f4e:	00db      	lsls	r3, r3, #3
 8003f50:	1a9b      	subs	r3, r3, r2
 8003f52:	009b      	lsls	r3, r3, #2
 8003f54:	440b      	add	r3, r1
 8003f56:	3342      	adds	r3, #66	; 0x42
 8003f58:	4602      	mov	r2, r0
 8003f5a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003f5c:	7bfa      	ldrb	r2, [r7, #15]
 8003f5e:	6879      	ldr	r1, [r7, #4]
 8003f60:	4613      	mov	r3, r2
 8003f62:	00db      	lsls	r3, r3, #3
 8003f64:	1a9b      	subs	r3, r3, r2
 8003f66:	009b      	lsls	r3, r3, #2
 8003f68:	440b      	add	r3, r1
 8003f6a:	333f      	adds	r3, #63	; 0x3f
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003f70:	7bfa      	ldrb	r2, [r7, #15]
 8003f72:	6879      	ldr	r1, [r7, #4]
 8003f74:	4613      	mov	r3, r2
 8003f76:	00db      	lsls	r3, r3, #3
 8003f78:	1a9b      	subs	r3, r3, r2
 8003f7a:	009b      	lsls	r3, r3, #2
 8003f7c:	440b      	add	r3, r1
 8003f7e:	3344      	adds	r3, #68	; 0x44
 8003f80:	2200      	movs	r2, #0
 8003f82:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003f84:	7bfa      	ldrb	r2, [r7, #15]
 8003f86:	6879      	ldr	r1, [r7, #4]
 8003f88:	4613      	mov	r3, r2
 8003f8a:	00db      	lsls	r3, r3, #3
 8003f8c:	1a9b      	subs	r3, r3, r2
 8003f8e:	009b      	lsls	r3, r3, #2
 8003f90:	440b      	add	r3, r1
 8003f92:	3348      	adds	r3, #72	; 0x48
 8003f94:	2200      	movs	r2, #0
 8003f96:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003f98:	7bfa      	ldrb	r2, [r7, #15]
 8003f9a:	6879      	ldr	r1, [r7, #4]
 8003f9c:	4613      	mov	r3, r2
 8003f9e:	00db      	lsls	r3, r3, #3
 8003fa0:	1a9b      	subs	r3, r3, r2
 8003fa2:	009b      	lsls	r3, r3, #2
 8003fa4:	440b      	add	r3, r1
 8003fa6:	3350      	adds	r3, #80	; 0x50
 8003fa8:	2200      	movs	r2, #0
 8003faa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003fac:	7bfb      	ldrb	r3, [r7, #15]
 8003fae:	3301      	adds	r3, #1
 8003fb0:	73fb      	strb	r3, [r7, #15]
 8003fb2:	7bfa      	ldrb	r2, [r7, #15]
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	685b      	ldr	r3, [r3, #4]
 8003fb8:	429a      	cmp	r2, r3
 8003fba:	d3af      	bcc.n	8003f1c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	73fb      	strb	r3, [r7, #15]
 8003fc0:	e044      	b.n	800404c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003fc2:	7bfa      	ldrb	r2, [r7, #15]
 8003fc4:	6879      	ldr	r1, [r7, #4]
 8003fc6:	4613      	mov	r3, r2
 8003fc8:	00db      	lsls	r3, r3, #3
 8003fca:	1a9b      	subs	r3, r3, r2
 8003fcc:	009b      	lsls	r3, r3, #2
 8003fce:	440b      	add	r3, r1
 8003fd0:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003fd8:	7bfa      	ldrb	r2, [r7, #15]
 8003fda:	6879      	ldr	r1, [r7, #4]
 8003fdc:	4613      	mov	r3, r2
 8003fde:	00db      	lsls	r3, r3, #3
 8003fe0:	1a9b      	subs	r3, r3, r2
 8003fe2:	009b      	lsls	r3, r3, #2
 8003fe4:	440b      	add	r3, r1
 8003fe6:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8003fea:	7bfa      	ldrb	r2, [r7, #15]
 8003fec:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003fee:	7bfa      	ldrb	r2, [r7, #15]
 8003ff0:	6879      	ldr	r1, [r7, #4]
 8003ff2:	4613      	mov	r3, r2
 8003ff4:	00db      	lsls	r3, r3, #3
 8003ff6:	1a9b      	subs	r3, r3, r2
 8003ff8:	009b      	lsls	r3, r3, #2
 8003ffa:	440b      	add	r3, r1
 8003ffc:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8004000:	2200      	movs	r2, #0
 8004002:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004004:	7bfa      	ldrb	r2, [r7, #15]
 8004006:	6879      	ldr	r1, [r7, #4]
 8004008:	4613      	mov	r3, r2
 800400a:	00db      	lsls	r3, r3, #3
 800400c:	1a9b      	subs	r3, r3, r2
 800400e:	009b      	lsls	r3, r3, #2
 8004010:	440b      	add	r3, r1
 8004012:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004016:	2200      	movs	r2, #0
 8004018:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800401a:	7bfa      	ldrb	r2, [r7, #15]
 800401c:	6879      	ldr	r1, [r7, #4]
 800401e:	4613      	mov	r3, r2
 8004020:	00db      	lsls	r3, r3, #3
 8004022:	1a9b      	subs	r3, r3, r2
 8004024:	009b      	lsls	r3, r3, #2
 8004026:	440b      	add	r3, r1
 8004028:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800402c:	2200      	movs	r2, #0
 800402e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004030:	7bfa      	ldrb	r2, [r7, #15]
 8004032:	6879      	ldr	r1, [r7, #4]
 8004034:	4613      	mov	r3, r2
 8004036:	00db      	lsls	r3, r3, #3
 8004038:	1a9b      	subs	r3, r3, r2
 800403a:	009b      	lsls	r3, r3, #2
 800403c:	440b      	add	r3, r1
 800403e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8004042:	2200      	movs	r2, #0
 8004044:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004046:	7bfb      	ldrb	r3, [r7, #15]
 8004048:	3301      	adds	r3, #1
 800404a:	73fb      	strb	r3, [r7, #15]
 800404c:	7bfa      	ldrb	r2, [r7, #15]
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	685b      	ldr	r3, [r3, #4]
 8004052:	429a      	cmp	r2, r3
 8004054:	d3b5      	bcc.n	8003fc2 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	603b      	str	r3, [r7, #0]
 800405c:	687e      	ldr	r6, [r7, #4]
 800405e:	466d      	mov	r5, sp
 8004060:	f106 0410 	add.w	r4, r6, #16
 8004064:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004066:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004068:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800406a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800406c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004070:	e885 0003 	stmia.w	r5, {r0, r1}
 8004074:	1d33      	adds	r3, r6, #4
 8004076:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004078:	6838      	ldr	r0, [r7, #0]
 800407a:	f004 ffa3 	bl	8008fc4 <USB_DevInit>
 800407e:	4603      	mov	r3, r0
 8004080:	2b00      	cmp	r3, #0
 8004082:	d005      	beq.n	8004090 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2202      	movs	r2, #2
 8004088:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800408c:	2301      	movs	r3, #1
 800408e:	e014      	b.n	80040ba <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2200      	movs	r2, #0
 8004094:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2201      	movs	r2, #1
 800409c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040a4:	2b01      	cmp	r3, #1
 80040a6:	d102      	bne.n	80040ae <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80040a8:	6878      	ldr	r0, [r7, #4]
 80040aa:	f000 f80a 	bl	80040c2 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	4618      	mov	r0, r3
 80040b4:	f005 f933 	bl	800931e <USB_DevDisconnect>

  return HAL_OK;
 80040b8:	2300      	movs	r3, #0
}
 80040ba:	4618      	mov	r0, r3
 80040bc:	3714      	adds	r7, #20
 80040be:	46bd      	mov	sp, r7
 80040c0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080040c2 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80040c2:	b480      	push	{r7}
 80040c4:	b085      	sub	sp, #20
 80040c6:	af00      	add	r7, sp, #0
 80040c8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2201      	movs	r2, #1
 80040d4:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2200      	movs	r2, #0
 80040dc:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	699b      	ldr	r3, [r3, #24]
 80040e4:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040f4:	f043 0303 	orr.w	r3, r3, #3
 80040f8:	68fa      	ldr	r2, [r7, #12]
 80040fa:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80040fc:	2300      	movs	r3, #0
}
 80040fe:	4618      	mov	r0, r3
 8004100:	3714      	adds	r7, #20
 8004102:	46bd      	mov	sp, r7
 8004104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004108:	4770      	bx	lr
	...

0800410c <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800410c:	b480      	push	{r7}
 800410e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004110:	4b05      	ldr	r3, [pc, #20]	; (8004128 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	4a04      	ldr	r2, [pc, #16]	; (8004128 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004116:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800411a:	6013      	str	r3, [r2, #0]
}
 800411c:	bf00      	nop
 800411e:	46bd      	mov	sp, r7
 8004120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004124:	4770      	bx	lr
 8004126:	bf00      	nop
 8004128:	40007000 	.word	0x40007000

0800412c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800412c:	b480      	push	{r7}
 800412e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004130:	4b04      	ldr	r3, [pc, #16]	; (8004144 <HAL_PWREx_GetVoltageRange+0x18>)
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8004138:	4618      	mov	r0, r3
 800413a:	46bd      	mov	sp, r7
 800413c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004140:	4770      	bx	lr
 8004142:	bf00      	nop
 8004144:	40007000 	.word	0x40007000

08004148 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004148:	b480      	push	{r7}
 800414a:	b085      	sub	sp, #20
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004156:	d130      	bne.n	80041ba <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004158:	4b23      	ldr	r3, [pc, #140]	; (80041e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004160:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004164:	d038      	beq.n	80041d8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004166:	4b20      	ldr	r3, [pc, #128]	; (80041e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800416e:	4a1e      	ldr	r2, [pc, #120]	; (80041e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004170:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004174:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004176:	4b1d      	ldr	r3, [pc, #116]	; (80041ec <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	2232      	movs	r2, #50	; 0x32
 800417c:	fb02 f303 	mul.w	r3, r2, r3
 8004180:	4a1b      	ldr	r2, [pc, #108]	; (80041f0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004182:	fba2 2303 	umull	r2, r3, r2, r3
 8004186:	0c9b      	lsrs	r3, r3, #18
 8004188:	3301      	adds	r3, #1
 800418a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800418c:	e002      	b.n	8004194 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	3b01      	subs	r3, #1
 8004192:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004194:	4b14      	ldr	r3, [pc, #80]	; (80041e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004196:	695b      	ldr	r3, [r3, #20]
 8004198:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800419c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041a0:	d102      	bne.n	80041a8 <HAL_PWREx_ControlVoltageScaling+0x60>
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d1f2      	bne.n	800418e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80041a8:	4b0f      	ldr	r3, [pc, #60]	; (80041e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80041aa:	695b      	ldr	r3, [r3, #20]
 80041ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041b4:	d110      	bne.n	80041d8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80041b6:	2303      	movs	r3, #3
 80041b8:	e00f      	b.n	80041da <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80041ba:	4b0b      	ldr	r3, [pc, #44]	; (80041e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80041c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041c6:	d007      	beq.n	80041d8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80041c8:	4b07      	ldr	r3, [pc, #28]	; (80041e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80041d0:	4a05      	ldr	r2, [pc, #20]	; (80041e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80041d2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80041d6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80041d8:	2300      	movs	r3, #0
}
 80041da:	4618      	mov	r0, r3
 80041dc:	3714      	adds	r7, #20
 80041de:	46bd      	mov	sp, r7
 80041e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e4:	4770      	bx	lr
 80041e6:	bf00      	nop
 80041e8:	40007000 	.word	0x40007000
 80041ec:	20000010 	.word	0x20000010
 80041f0:	431bde83 	.word	0x431bde83

080041f4 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80041f4:	b480      	push	{r7}
 80041f6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 80041f8:	4b05      	ldr	r3, [pc, #20]	; (8004210 <HAL_PWREx_EnableVddUSB+0x1c>)
 80041fa:	685b      	ldr	r3, [r3, #4]
 80041fc:	4a04      	ldr	r2, [pc, #16]	; (8004210 <HAL_PWREx_EnableVddUSB+0x1c>)
 80041fe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004202:	6053      	str	r3, [r2, #4]
}
 8004204:	bf00      	nop
 8004206:	46bd      	mov	sp, r7
 8004208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420c:	4770      	bx	lr
 800420e:	bf00      	nop
 8004210:	40007000 	.word	0x40007000

08004214 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8004214:	b580      	push	{r7, lr}
 8004216:	b086      	sub	sp, #24
 8004218:	af02      	add	r7, sp, #8
 800421a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800421c:	f7fe fad8 	bl	80027d0 <HAL_GetTick>
 8004220:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	2b00      	cmp	r3, #0
 8004226:	d101      	bne.n	800422c <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8004228:	2301      	movs	r3, #1
 800422a:	e063      	b.n	80042f4 <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004232:	b2db      	uxtb	r3, r3
 8004234:	2b00      	cmp	r3, #0
 8004236:	d10b      	bne.n	8004250 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2200      	movs	r2, #0
 800423c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8004240:	6878      	ldr	r0, [r7, #4]
 8004242:	f7fd fe7d 	bl	8001f40 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8004246:	f241 3188 	movw	r1, #5000	; 0x1388
 800424a:	6878      	ldr	r0, [r7, #4]
 800424c:	f000 f858 	bl	8004300 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	689b      	ldr	r3, [r3, #8]
 800425e:	3b01      	subs	r3, #1
 8004260:	021a      	lsls	r2, r3, #8
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	430a      	orrs	r2, r1
 8004268:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800426e:	9300      	str	r3, [sp, #0]
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	2200      	movs	r2, #0
 8004274:	2120      	movs	r1, #32
 8004276:	6878      	ldr	r0, [r7, #4]
 8004278:	f000 f850 	bl	800431c <QSPI_WaitFlagStateUntilTimeout>
 800427c:	4603      	mov	r3, r0
 800427e:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8004280:	7afb      	ldrb	r3, [r7, #11]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d131      	bne.n	80042ea <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004290:	f023 0310 	bic.w	r3, r3, #16
 8004294:	687a      	ldr	r2, [r7, #4]
 8004296:	6852      	ldr	r2, [r2, #4]
 8004298:	0611      	lsls	r1, r2, #24
 800429a:	687a      	ldr	r2, [r7, #4]
 800429c:	68d2      	ldr	r2, [r2, #12]
 800429e:	4311      	orrs	r1, r2
 80042a0:	687a      	ldr	r2, [r7, #4]
 80042a2:	6812      	ldr	r2, [r2, #0]
 80042a4:	430b      	orrs	r3, r1
 80042a6:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	685a      	ldr	r2, [r3, #4]
 80042ae:	4b13      	ldr	r3, [pc, #76]	; (80042fc <HAL_QSPI_Init+0xe8>)
 80042b0:	4013      	ands	r3, r2
 80042b2:	687a      	ldr	r2, [r7, #4]
 80042b4:	6912      	ldr	r2, [r2, #16]
 80042b6:	0411      	lsls	r1, r2, #16
 80042b8:	687a      	ldr	r2, [r7, #4]
 80042ba:	6952      	ldr	r2, [r2, #20]
 80042bc:	4311      	orrs	r1, r2
 80042be:	687a      	ldr	r2, [r7, #4]
 80042c0:	6992      	ldr	r2, [r2, #24]
 80042c2:	4311      	orrs	r1, r2
 80042c4:	687a      	ldr	r2, [r7, #4]
 80042c6:	6812      	ldr	r2, [r2, #0]
 80042c8:	430b      	orrs	r3, r1
 80042ca:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	681a      	ldr	r2, [r3, #0]
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f042 0201 	orr.w	r2, r2, #1
 80042da:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2200      	movs	r2, #0
 80042e0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2201      	movs	r2, #1
 80042e6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	2200      	movs	r2, #0
 80042ee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 80042f2:	7afb      	ldrb	r3, [r7, #11]
}
 80042f4:	4618      	mov	r0, r3
 80042f6:	3710      	adds	r7, #16
 80042f8:	46bd      	mov	sp, r7
 80042fa:	bd80      	pop	{r7, pc}
 80042fc:	ffe0f8fe 	.word	0xffe0f8fe

08004300 <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8004300:	b480      	push	{r7}
 8004302:	b083      	sub	sp, #12
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
 8004308:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	683a      	ldr	r2, [r7, #0]
 800430e:	641a      	str	r2, [r3, #64]	; 0x40
}
 8004310:	bf00      	nop
 8004312:	370c      	adds	r7, #12
 8004314:	46bd      	mov	sp, r7
 8004316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431a:	4770      	bx	lr

0800431c <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b084      	sub	sp, #16
 8004320:	af00      	add	r7, sp, #0
 8004322:	60f8      	str	r0, [r7, #12]
 8004324:	60b9      	str	r1, [r7, #8]
 8004326:	603b      	str	r3, [r7, #0]
 8004328:	4613      	mov	r3, r2
 800432a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800432c:	e01a      	b.n	8004364 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800432e:	69bb      	ldr	r3, [r7, #24]
 8004330:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004334:	d016      	beq.n	8004364 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004336:	f7fe fa4b 	bl	80027d0 <HAL_GetTick>
 800433a:	4602      	mov	r2, r0
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	1ad3      	subs	r3, r2, r3
 8004340:	69ba      	ldr	r2, [r7, #24]
 8004342:	429a      	cmp	r2, r3
 8004344:	d302      	bcc.n	800434c <QSPI_WaitFlagStateUntilTimeout+0x30>
 8004346:	69bb      	ldr	r3, [r7, #24]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d10b      	bne.n	8004364 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	2204      	movs	r2, #4
 8004350:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004358:	f043 0201 	orr.w	r2, r3, #1
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	63da      	str	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004360:	2301      	movs	r3, #1
 8004362:	e00e      	b.n	8004382 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	689a      	ldr	r2, [r3, #8]
 800436a:	68bb      	ldr	r3, [r7, #8]
 800436c:	4013      	ands	r3, r2
 800436e:	2b00      	cmp	r3, #0
 8004370:	bf14      	ite	ne
 8004372:	2301      	movne	r3, #1
 8004374:	2300      	moveq	r3, #0
 8004376:	b2db      	uxtb	r3, r3
 8004378:	461a      	mov	r2, r3
 800437a:	79fb      	ldrb	r3, [r7, #7]
 800437c:	429a      	cmp	r2, r3
 800437e:	d1d6      	bne.n	800432e <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004380:	2300      	movs	r3, #0
}
 8004382:	4618      	mov	r0, r3
 8004384:	3710      	adds	r7, #16
 8004386:	46bd      	mov	sp, r7
 8004388:	bd80      	pop	{r7, pc}
	...

0800438c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800438c:	b580      	push	{r7, lr}
 800438e:	b088      	sub	sp, #32
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2b00      	cmp	r3, #0
 8004398:	d101      	bne.n	800439e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800439a:	2301      	movs	r3, #1
 800439c:	e3d8      	b.n	8004b50 <HAL_RCC_OscConfig+0x7c4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800439e:	4b97      	ldr	r3, [pc, #604]	; (80045fc <HAL_RCC_OscConfig+0x270>)
 80043a0:	689b      	ldr	r3, [r3, #8]
 80043a2:	f003 030c 	and.w	r3, r3, #12
 80043a6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80043a8:	4b94      	ldr	r3, [pc, #592]	; (80045fc <HAL_RCC_OscConfig+0x270>)
 80043aa:	68db      	ldr	r3, [r3, #12]
 80043ac:	f003 0303 	and.w	r3, r3, #3
 80043b0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f003 0310 	and.w	r3, r3, #16
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	f000 80e4 	beq.w	8004588 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80043c0:	69bb      	ldr	r3, [r7, #24]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d007      	beq.n	80043d6 <HAL_RCC_OscConfig+0x4a>
 80043c6:	69bb      	ldr	r3, [r7, #24]
 80043c8:	2b0c      	cmp	r3, #12
 80043ca:	f040 808b 	bne.w	80044e4 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80043ce:	697b      	ldr	r3, [r7, #20]
 80043d0:	2b01      	cmp	r3, #1
 80043d2:	f040 8087 	bne.w	80044e4 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80043d6:	4b89      	ldr	r3, [pc, #548]	; (80045fc <HAL_RCC_OscConfig+0x270>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f003 0302 	and.w	r3, r3, #2
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d005      	beq.n	80043ee <HAL_RCC_OscConfig+0x62>
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	699b      	ldr	r3, [r3, #24]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d101      	bne.n	80043ee <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80043ea:	2301      	movs	r3, #1
 80043ec:	e3b0      	b.n	8004b50 <HAL_RCC_OscConfig+0x7c4>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6a1a      	ldr	r2, [r3, #32]
 80043f2:	4b82      	ldr	r3, [pc, #520]	; (80045fc <HAL_RCC_OscConfig+0x270>)
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f003 0308 	and.w	r3, r3, #8
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d004      	beq.n	8004408 <HAL_RCC_OscConfig+0x7c>
 80043fe:	4b7f      	ldr	r3, [pc, #508]	; (80045fc <HAL_RCC_OscConfig+0x270>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004406:	e005      	b.n	8004414 <HAL_RCC_OscConfig+0x88>
 8004408:	4b7c      	ldr	r3, [pc, #496]	; (80045fc <HAL_RCC_OscConfig+0x270>)
 800440a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800440e:	091b      	lsrs	r3, r3, #4
 8004410:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004414:	4293      	cmp	r3, r2
 8004416:	d223      	bcs.n	8004460 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6a1b      	ldr	r3, [r3, #32]
 800441c:	4618      	mov	r0, r3
 800441e:	f000 fd75 	bl	8004f0c <RCC_SetFlashLatencyFromMSIRange>
 8004422:	4603      	mov	r3, r0
 8004424:	2b00      	cmp	r3, #0
 8004426:	d001      	beq.n	800442c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8004428:	2301      	movs	r3, #1
 800442a:	e391      	b.n	8004b50 <HAL_RCC_OscConfig+0x7c4>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800442c:	4b73      	ldr	r3, [pc, #460]	; (80045fc <HAL_RCC_OscConfig+0x270>)
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4a72      	ldr	r2, [pc, #456]	; (80045fc <HAL_RCC_OscConfig+0x270>)
 8004432:	f043 0308 	orr.w	r3, r3, #8
 8004436:	6013      	str	r3, [r2, #0]
 8004438:	4b70      	ldr	r3, [pc, #448]	; (80045fc <HAL_RCC_OscConfig+0x270>)
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6a1b      	ldr	r3, [r3, #32]
 8004444:	496d      	ldr	r1, [pc, #436]	; (80045fc <HAL_RCC_OscConfig+0x270>)
 8004446:	4313      	orrs	r3, r2
 8004448:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800444a:	4b6c      	ldr	r3, [pc, #432]	; (80045fc <HAL_RCC_OscConfig+0x270>)
 800444c:	685b      	ldr	r3, [r3, #4]
 800444e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	69db      	ldr	r3, [r3, #28]
 8004456:	021b      	lsls	r3, r3, #8
 8004458:	4968      	ldr	r1, [pc, #416]	; (80045fc <HAL_RCC_OscConfig+0x270>)
 800445a:	4313      	orrs	r3, r2
 800445c:	604b      	str	r3, [r1, #4]
 800445e:	e025      	b.n	80044ac <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004460:	4b66      	ldr	r3, [pc, #408]	; (80045fc <HAL_RCC_OscConfig+0x270>)
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	4a65      	ldr	r2, [pc, #404]	; (80045fc <HAL_RCC_OscConfig+0x270>)
 8004466:	f043 0308 	orr.w	r3, r3, #8
 800446a:	6013      	str	r3, [r2, #0]
 800446c:	4b63      	ldr	r3, [pc, #396]	; (80045fc <HAL_RCC_OscConfig+0x270>)
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6a1b      	ldr	r3, [r3, #32]
 8004478:	4960      	ldr	r1, [pc, #384]	; (80045fc <HAL_RCC_OscConfig+0x270>)
 800447a:	4313      	orrs	r3, r2
 800447c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800447e:	4b5f      	ldr	r3, [pc, #380]	; (80045fc <HAL_RCC_OscConfig+0x270>)
 8004480:	685b      	ldr	r3, [r3, #4]
 8004482:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	69db      	ldr	r3, [r3, #28]
 800448a:	021b      	lsls	r3, r3, #8
 800448c:	495b      	ldr	r1, [pc, #364]	; (80045fc <HAL_RCC_OscConfig+0x270>)
 800448e:	4313      	orrs	r3, r2
 8004490:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004492:	69bb      	ldr	r3, [r7, #24]
 8004494:	2b00      	cmp	r3, #0
 8004496:	d109      	bne.n	80044ac <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6a1b      	ldr	r3, [r3, #32]
 800449c:	4618      	mov	r0, r3
 800449e:	f000 fd35 	bl	8004f0c <RCC_SetFlashLatencyFromMSIRange>
 80044a2:	4603      	mov	r3, r0
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d001      	beq.n	80044ac <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80044a8:	2301      	movs	r3, #1
 80044aa:	e351      	b.n	8004b50 <HAL_RCC_OscConfig+0x7c4>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80044ac:	f000 fc38 	bl	8004d20 <HAL_RCC_GetSysClockFreq>
 80044b0:	4602      	mov	r2, r0
 80044b2:	4b52      	ldr	r3, [pc, #328]	; (80045fc <HAL_RCC_OscConfig+0x270>)
 80044b4:	689b      	ldr	r3, [r3, #8]
 80044b6:	091b      	lsrs	r3, r3, #4
 80044b8:	f003 030f 	and.w	r3, r3, #15
 80044bc:	4950      	ldr	r1, [pc, #320]	; (8004600 <HAL_RCC_OscConfig+0x274>)
 80044be:	5ccb      	ldrb	r3, [r1, r3]
 80044c0:	f003 031f 	and.w	r3, r3, #31
 80044c4:	fa22 f303 	lsr.w	r3, r2, r3
 80044c8:	4a4e      	ldr	r2, [pc, #312]	; (8004604 <HAL_RCC_OscConfig+0x278>)
 80044ca:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80044cc:	4b4e      	ldr	r3, [pc, #312]	; (8004608 <HAL_RCC_OscConfig+0x27c>)
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	4618      	mov	r0, r3
 80044d2:	f7fd ff87 	bl	80023e4 <HAL_InitTick>
 80044d6:	4603      	mov	r3, r0
 80044d8:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80044da:	7bfb      	ldrb	r3, [r7, #15]
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d052      	beq.n	8004586 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80044e0:	7bfb      	ldrb	r3, [r7, #15]
 80044e2:	e335      	b.n	8004b50 <HAL_RCC_OscConfig+0x7c4>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	699b      	ldr	r3, [r3, #24]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d032      	beq.n	8004552 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80044ec:	4b43      	ldr	r3, [pc, #268]	; (80045fc <HAL_RCC_OscConfig+0x270>)
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	4a42      	ldr	r2, [pc, #264]	; (80045fc <HAL_RCC_OscConfig+0x270>)
 80044f2:	f043 0301 	orr.w	r3, r3, #1
 80044f6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80044f8:	f7fe f96a 	bl	80027d0 <HAL_GetTick>
 80044fc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80044fe:	e008      	b.n	8004512 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004500:	f7fe f966 	bl	80027d0 <HAL_GetTick>
 8004504:	4602      	mov	r2, r0
 8004506:	693b      	ldr	r3, [r7, #16]
 8004508:	1ad3      	subs	r3, r2, r3
 800450a:	2b02      	cmp	r3, #2
 800450c:	d901      	bls.n	8004512 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800450e:	2303      	movs	r3, #3
 8004510:	e31e      	b.n	8004b50 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004512:	4b3a      	ldr	r3, [pc, #232]	; (80045fc <HAL_RCC_OscConfig+0x270>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f003 0302 	and.w	r3, r3, #2
 800451a:	2b00      	cmp	r3, #0
 800451c:	d0f0      	beq.n	8004500 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800451e:	4b37      	ldr	r3, [pc, #220]	; (80045fc <HAL_RCC_OscConfig+0x270>)
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	4a36      	ldr	r2, [pc, #216]	; (80045fc <HAL_RCC_OscConfig+0x270>)
 8004524:	f043 0308 	orr.w	r3, r3, #8
 8004528:	6013      	str	r3, [r2, #0]
 800452a:	4b34      	ldr	r3, [pc, #208]	; (80045fc <HAL_RCC_OscConfig+0x270>)
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6a1b      	ldr	r3, [r3, #32]
 8004536:	4931      	ldr	r1, [pc, #196]	; (80045fc <HAL_RCC_OscConfig+0x270>)
 8004538:	4313      	orrs	r3, r2
 800453a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800453c:	4b2f      	ldr	r3, [pc, #188]	; (80045fc <HAL_RCC_OscConfig+0x270>)
 800453e:	685b      	ldr	r3, [r3, #4]
 8004540:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	69db      	ldr	r3, [r3, #28]
 8004548:	021b      	lsls	r3, r3, #8
 800454a:	492c      	ldr	r1, [pc, #176]	; (80045fc <HAL_RCC_OscConfig+0x270>)
 800454c:	4313      	orrs	r3, r2
 800454e:	604b      	str	r3, [r1, #4]
 8004550:	e01a      	b.n	8004588 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004552:	4b2a      	ldr	r3, [pc, #168]	; (80045fc <HAL_RCC_OscConfig+0x270>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	4a29      	ldr	r2, [pc, #164]	; (80045fc <HAL_RCC_OscConfig+0x270>)
 8004558:	f023 0301 	bic.w	r3, r3, #1
 800455c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800455e:	f7fe f937 	bl	80027d0 <HAL_GetTick>
 8004562:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004564:	e008      	b.n	8004578 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004566:	f7fe f933 	bl	80027d0 <HAL_GetTick>
 800456a:	4602      	mov	r2, r0
 800456c:	693b      	ldr	r3, [r7, #16]
 800456e:	1ad3      	subs	r3, r2, r3
 8004570:	2b02      	cmp	r3, #2
 8004572:	d901      	bls.n	8004578 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8004574:	2303      	movs	r3, #3
 8004576:	e2eb      	b.n	8004b50 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004578:	4b20      	ldr	r3, [pc, #128]	; (80045fc <HAL_RCC_OscConfig+0x270>)
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f003 0302 	and.w	r3, r3, #2
 8004580:	2b00      	cmp	r3, #0
 8004582:	d1f0      	bne.n	8004566 <HAL_RCC_OscConfig+0x1da>
 8004584:	e000      	b.n	8004588 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004586:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f003 0301 	and.w	r3, r3, #1
 8004590:	2b00      	cmp	r3, #0
 8004592:	d074      	beq.n	800467e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004594:	69bb      	ldr	r3, [r7, #24]
 8004596:	2b08      	cmp	r3, #8
 8004598:	d005      	beq.n	80045a6 <HAL_RCC_OscConfig+0x21a>
 800459a:	69bb      	ldr	r3, [r7, #24]
 800459c:	2b0c      	cmp	r3, #12
 800459e:	d10e      	bne.n	80045be <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80045a0:	697b      	ldr	r3, [r7, #20]
 80045a2:	2b03      	cmp	r3, #3
 80045a4:	d10b      	bne.n	80045be <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045a6:	4b15      	ldr	r3, [pc, #84]	; (80045fc <HAL_RCC_OscConfig+0x270>)
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d064      	beq.n	800467c <HAL_RCC_OscConfig+0x2f0>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	685b      	ldr	r3, [r3, #4]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d160      	bne.n	800467c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80045ba:	2301      	movs	r3, #1
 80045bc:	e2c8      	b.n	8004b50 <HAL_RCC_OscConfig+0x7c4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	685b      	ldr	r3, [r3, #4]
 80045c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045c6:	d106      	bne.n	80045d6 <HAL_RCC_OscConfig+0x24a>
 80045c8:	4b0c      	ldr	r3, [pc, #48]	; (80045fc <HAL_RCC_OscConfig+0x270>)
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	4a0b      	ldr	r2, [pc, #44]	; (80045fc <HAL_RCC_OscConfig+0x270>)
 80045ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045d2:	6013      	str	r3, [r2, #0]
 80045d4:	e026      	b.n	8004624 <HAL_RCC_OscConfig+0x298>
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	685b      	ldr	r3, [r3, #4]
 80045da:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80045de:	d115      	bne.n	800460c <HAL_RCC_OscConfig+0x280>
 80045e0:	4b06      	ldr	r3, [pc, #24]	; (80045fc <HAL_RCC_OscConfig+0x270>)
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	4a05      	ldr	r2, [pc, #20]	; (80045fc <HAL_RCC_OscConfig+0x270>)
 80045e6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80045ea:	6013      	str	r3, [r2, #0]
 80045ec:	4b03      	ldr	r3, [pc, #12]	; (80045fc <HAL_RCC_OscConfig+0x270>)
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	4a02      	ldr	r2, [pc, #8]	; (80045fc <HAL_RCC_OscConfig+0x270>)
 80045f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045f6:	6013      	str	r3, [r2, #0]
 80045f8:	e014      	b.n	8004624 <HAL_RCC_OscConfig+0x298>
 80045fa:	bf00      	nop
 80045fc:	40021000 	.word	0x40021000
 8004600:	080150ec 	.word	0x080150ec
 8004604:	20000010 	.word	0x20000010
 8004608:	20000014 	.word	0x20000014
 800460c:	4ba0      	ldr	r3, [pc, #640]	; (8004890 <HAL_RCC_OscConfig+0x504>)
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	4a9f      	ldr	r2, [pc, #636]	; (8004890 <HAL_RCC_OscConfig+0x504>)
 8004612:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004616:	6013      	str	r3, [r2, #0]
 8004618:	4b9d      	ldr	r3, [pc, #628]	; (8004890 <HAL_RCC_OscConfig+0x504>)
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	4a9c      	ldr	r2, [pc, #624]	; (8004890 <HAL_RCC_OscConfig+0x504>)
 800461e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004622:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	685b      	ldr	r3, [r3, #4]
 8004628:	2b00      	cmp	r3, #0
 800462a:	d013      	beq.n	8004654 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800462c:	f7fe f8d0 	bl	80027d0 <HAL_GetTick>
 8004630:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004632:	e008      	b.n	8004646 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004634:	f7fe f8cc 	bl	80027d0 <HAL_GetTick>
 8004638:	4602      	mov	r2, r0
 800463a:	693b      	ldr	r3, [r7, #16]
 800463c:	1ad3      	subs	r3, r2, r3
 800463e:	2b64      	cmp	r3, #100	; 0x64
 8004640:	d901      	bls.n	8004646 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004642:	2303      	movs	r3, #3
 8004644:	e284      	b.n	8004b50 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004646:	4b92      	ldr	r3, [pc, #584]	; (8004890 <HAL_RCC_OscConfig+0x504>)
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800464e:	2b00      	cmp	r3, #0
 8004650:	d0f0      	beq.n	8004634 <HAL_RCC_OscConfig+0x2a8>
 8004652:	e014      	b.n	800467e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004654:	f7fe f8bc 	bl	80027d0 <HAL_GetTick>
 8004658:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800465a:	e008      	b.n	800466e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800465c:	f7fe f8b8 	bl	80027d0 <HAL_GetTick>
 8004660:	4602      	mov	r2, r0
 8004662:	693b      	ldr	r3, [r7, #16]
 8004664:	1ad3      	subs	r3, r2, r3
 8004666:	2b64      	cmp	r3, #100	; 0x64
 8004668:	d901      	bls.n	800466e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800466a:	2303      	movs	r3, #3
 800466c:	e270      	b.n	8004b50 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800466e:	4b88      	ldr	r3, [pc, #544]	; (8004890 <HAL_RCC_OscConfig+0x504>)
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004676:	2b00      	cmp	r3, #0
 8004678:	d1f0      	bne.n	800465c <HAL_RCC_OscConfig+0x2d0>
 800467a:	e000      	b.n	800467e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800467c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f003 0302 	and.w	r3, r3, #2
 8004686:	2b00      	cmp	r3, #0
 8004688:	d060      	beq.n	800474c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800468a:	69bb      	ldr	r3, [r7, #24]
 800468c:	2b04      	cmp	r3, #4
 800468e:	d005      	beq.n	800469c <HAL_RCC_OscConfig+0x310>
 8004690:	69bb      	ldr	r3, [r7, #24]
 8004692:	2b0c      	cmp	r3, #12
 8004694:	d119      	bne.n	80046ca <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004696:	697b      	ldr	r3, [r7, #20]
 8004698:	2b02      	cmp	r3, #2
 800469a:	d116      	bne.n	80046ca <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800469c:	4b7c      	ldr	r3, [pc, #496]	; (8004890 <HAL_RCC_OscConfig+0x504>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d005      	beq.n	80046b4 <HAL_RCC_OscConfig+0x328>
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	68db      	ldr	r3, [r3, #12]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d101      	bne.n	80046b4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80046b0:	2301      	movs	r3, #1
 80046b2:	e24d      	b.n	8004b50 <HAL_RCC_OscConfig+0x7c4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046b4:	4b76      	ldr	r3, [pc, #472]	; (8004890 <HAL_RCC_OscConfig+0x504>)
 80046b6:	685b      	ldr	r3, [r3, #4]
 80046b8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	691b      	ldr	r3, [r3, #16]
 80046c0:	061b      	lsls	r3, r3, #24
 80046c2:	4973      	ldr	r1, [pc, #460]	; (8004890 <HAL_RCC_OscConfig+0x504>)
 80046c4:	4313      	orrs	r3, r2
 80046c6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80046c8:	e040      	b.n	800474c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	68db      	ldr	r3, [r3, #12]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d023      	beq.n	800471a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80046d2:	4b6f      	ldr	r3, [pc, #444]	; (8004890 <HAL_RCC_OscConfig+0x504>)
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	4a6e      	ldr	r2, [pc, #440]	; (8004890 <HAL_RCC_OscConfig+0x504>)
 80046d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046de:	f7fe f877 	bl	80027d0 <HAL_GetTick>
 80046e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80046e4:	e008      	b.n	80046f8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80046e6:	f7fe f873 	bl	80027d0 <HAL_GetTick>
 80046ea:	4602      	mov	r2, r0
 80046ec:	693b      	ldr	r3, [r7, #16]
 80046ee:	1ad3      	subs	r3, r2, r3
 80046f0:	2b02      	cmp	r3, #2
 80046f2:	d901      	bls.n	80046f8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80046f4:	2303      	movs	r3, #3
 80046f6:	e22b      	b.n	8004b50 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80046f8:	4b65      	ldr	r3, [pc, #404]	; (8004890 <HAL_RCC_OscConfig+0x504>)
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004700:	2b00      	cmp	r3, #0
 8004702:	d0f0      	beq.n	80046e6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004704:	4b62      	ldr	r3, [pc, #392]	; (8004890 <HAL_RCC_OscConfig+0x504>)
 8004706:	685b      	ldr	r3, [r3, #4]
 8004708:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	691b      	ldr	r3, [r3, #16]
 8004710:	061b      	lsls	r3, r3, #24
 8004712:	495f      	ldr	r1, [pc, #380]	; (8004890 <HAL_RCC_OscConfig+0x504>)
 8004714:	4313      	orrs	r3, r2
 8004716:	604b      	str	r3, [r1, #4]
 8004718:	e018      	b.n	800474c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800471a:	4b5d      	ldr	r3, [pc, #372]	; (8004890 <HAL_RCC_OscConfig+0x504>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	4a5c      	ldr	r2, [pc, #368]	; (8004890 <HAL_RCC_OscConfig+0x504>)
 8004720:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004724:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004726:	f7fe f853 	bl	80027d0 <HAL_GetTick>
 800472a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800472c:	e008      	b.n	8004740 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800472e:	f7fe f84f 	bl	80027d0 <HAL_GetTick>
 8004732:	4602      	mov	r2, r0
 8004734:	693b      	ldr	r3, [r7, #16]
 8004736:	1ad3      	subs	r3, r2, r3
 8004738:	2b02      	cmp	r3, #2
 800473a:	d901      	bls.n	8004740 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800473c:	2303      	movs	r3, #3
 800473e:	e207      	b.n	8004b50 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004740:	4b53      	ldr	r3, [pc, #332]	; (8004890 <HAL_RCC_OscConfig+0x504>)
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004748:	2b00      	cmp	r3, #0
 800474a:	d1f0      	bne.n	800472e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f003 0308 	and.w	r3, r3, #8
 8004754:	2b00      	cmp	r3, #0
 8004756:	d03c      	beq.n	80047d2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	695b      	ldr	r3, [r3, #20]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d01c      	beq.n	800479a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004760:	4b4b      	ldr	r3, [pc, #300]	; (8004890 <HAL_RCC_OscConfig+0x504>)
 8004762:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004766:	4a4a      	ldr	r2, [pc, #296]	; (8004890 <HAL_RCC_OscConfig+0x504>)
 8004768:	f043 0301 	orr.w	r3, r3, #1
 800476c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004770:	f7fe f82e 	bl	80027d0 <HAL_GetTick>
 8004774:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004776:	e008      	b.n	800478a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004778:	f7fe f82a 	bl	80027d0 <HAL_GetTick>
 800477c:	4602      	mov	r2, r0
 800477e:	693b      	ldr	r3, [r7, #16]
 8004780:	1ad3      	subs	r3, r2, r3
 8004782:	2b02      	cmp	r3, #2
 8004784:	d901      	bls.n	800478a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004786:	2303      	movs	r3, #3
 8004788:	e1e2      	b.n	8004b50 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800478a:	4b41      	ldr	r3, [pc, #260]	; (8004890 <HAL_RCC_OscConfig+0x504>)
 800478c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004790:	f003 0302 	and.w	r3, r3, #2
 8004794:	2b00      	cmp	r3, #0
 8004796:	d0ef      	beq.n	8004778 <HAL_RCC_OscConfig+0x3ec>
 8004798:	e01b      	b.n	80047d2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800479a:	4b3d      	ldr	r3, [pc, #244]	; (8004890 <HAL_RCC_OscConfig+0x504>)
 800479c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80047a0:	4a3b      	ldr	r2, [pc, #236]	; (8004890 <HAL_RCC_OscConfig+0x504>)
 80047a2:	f023 0301 	bic.w	r3, r3, #1
 80047a6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047aa:	f7fe f811 	bl	80027d0 <HAL_GetTick>
 80047ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80047b0:	e008      	b.n	80047c4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80047b2:	f7fe f80d 	bl	80027d0 <HAL_GetTick>
 80047b6:	4602      	mov	r2, r0
 80047b8:	693b      	ldr	r3, [r7, #16]
 80047ba:	1ad3      	subs	r3, r2, r3
 80047bc:	2b02      	cmp	r3, #2
 80047be:	d901      	bls.n	80047c4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80047c0:	2303      	movs	r3, #3
 80047c2:	e1c5      	b.n	8004b50 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80047c4:	4b32      	ldr	r3, [pc, #200]	; (8004890 <HAL_RCC_OscConfig+0x504>)
 80047c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80047ca:	f003 0302 	and.w	r3, r3, #2
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d1ef      	bne.n	80047b2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f003 0304 	and.w	r3, r3, #4
 80047da:	2b00      	cmp	r3, #0
 80047dc:	f000 80a6 	beq.w	800492c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80047e0:	2300      	movs	r3, #0
 80047e2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80047e4:	4b2a      	ldr	r3, [pc, #168]	; (8004890 <HAL_RCC_OscConfig+0x504>)
 80047e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d10d      	bne.n	800480c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80047f0:	4b27      	ldr	r3, [pc, #156]	; (8004890 <HAL_RCC_OscConfig+0x504>)
 80047f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047f4:	4a26      	ldr	r2, [pc, #152]	; (8004890 <HAL_RCC_OscConfig+0x504>)
 80047f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047fa:	6593      	str	r3, [r2, #88]	; 0x58
 80047fc:	4b24      	ldr	r3, [pc, #144]	; (8004890 <HAL_RCC_OscConfig+0x504>)
 80047fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004800:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004804:	60bb      	str	r3, [r7, #8]
 8004806:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004808:	2301      	movs	r3, #1
 800480a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800480c:	4b21      	ldr	r3, [pc, #132]	; (8004894 <HAL_RCC_OscConfig+0x508>)
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004814:	2b00      	cmp	r3, #0
 8004816:	d118      	bne.n	800484a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004818:	4b1e      	ldr	r3, [pc, #120]	; (8004894 <HAL_RCC_OscConfig+0x508>)
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	4a1d      	ldr	r2, [pc, #116]	; (8004894 <HAL_RCC_OscConfig+0x508>)
 800481e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004822:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004824:	f7fd ffd4 	bl	80027d0 <HAL_GetTick>
 8004828:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800482a:	e008      	b.n	800483e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800482c:	f7fd ffd0 	bl	80027d0 <HAL_GetTick>
 8004830:	4602      	mov	r2, r0
 8004832:	693b      	ldr	r3, [r7, #16]
 8004834:	1ad3      	subs	r3, r2, r3
 8004836:	2b02      	cmp	r3, #2
 8004838:	d901      	bls.n	800483e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800483a:	2303      	movs	r3, #3
 800483c:	e188      	b.n	8004b50 <HAL_RCC_OscConfig+0x7c4>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800483e:	4b15      	ldr	r3, [pc, #84]	; (8004894 <HAL_RCC_OscConfig+0x508>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004846:	2b00      	cmp	r3, #0
 8004848:	d0f0      	beq.n	800482c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	689b      	ldr	r3, [r3, #8]
 800484e:	2b01      	cmp	r3, #1
 8004850:	d108      	bne.n	8004864 <HAL_RCC_OscConfig+0x4d8>
 8004852:	4b0f      	ldr	r3, [pc, #60]	; (8004890 <HAL_RCC_OscConfig+0x504>)
 8004854:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004858:	4a0d      	ldr	r2, [pc, #52]	; (8004890 <HAL_RCC_OscConfig+0x504>)
 800485a:	f043 0301 	orr.w	r3, r3, #1
 800485e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004862:	e029      	b.n	80048b8 <HAL_RCC_OscConfig+0x52c>
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	689b      	ldr	r3, [r3, #8]
 8004868:	2b05      	cmp	r3, #5
 800486a:	d115      	bne.n	8004898 <HAL_RCC_OscConfig+0x50c>
 800486c:	4b08      	ldr	r3, [pc, #32]	; (8004890 <HAL_RCC_OscConfig+0x504>)
 800486e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004872:	4a07      	ldr	r2, [pc, #28]	; (8004890 <HAL_RCC_OscConfig+0x504>)
 8004874:	f043 0304 	orr.w	r3, r3, #4
 8004878:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800487c:	4b04      	ldr	r3, [pc, #16]	; (8004890 <HAL_RCC_OscConfig+0x504>)
 800487e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004882:	4a03      	ldr	r2, [pc, #12]	; (8004890 <HAL_RCC_OscConfig+0x504>)
 8004884:	f043 0301 	orr.w	r3, r3, #1
 8004888:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800488c:	e014      	b.n	80048b8 <HAL_RCC_OscConfig+0x52c>
 800488e:	bf00      	nop
 8004890:	40021000 	.word	0x40021000
 8004894:	40007000 	.word	0x40007000
 8004898:	4b91      	ldr	r3, [pc, #580]	; (8004ae0 <HAL_RCC_OscConfig+0x754>)
 800489a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800489e:	4a90      	ldr	r2, [pc, #576]	; (8004ae0 <HAL_RCC_OscConfig+0x754>)
 80048a0:	f023 0301 	bic.w	r3, r3, #1
 80048a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80048a8:	4b8d      	ldr	r3, [pc, #564]	; (8004ae0 <HAL_RCC_OscConfig+0x754>)
 80048aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048ae:	4a8c      	ldr	r2, [pc, #560]	; (8004ae0 <HAL_RCC_OscConfig+0x754>)
 80048b0:	f023 0304 	bic.w	r3, r3, #4
 80048b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	689b      	ldr	r3, [r3, #8]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d016      	beq.n	80048ee <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048c0:	f7fd ff86 	bl	80027d0 <HAL_GetTick>
 80048c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80048c6:	e00a      	b.n	80048de <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048c8:	f7fd ff82 	bl	80027d0 <HAL_GetTick>
 80048cc:	4602      	mov	r2, r0
 80048ce:	693b      	ldr	r3, [r7, #16]
 80048d0:	1ad3      	subs	r3, r2, r3
 80048d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d901      	bls.n	80048de <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80048da:	2303      	movs	r3, #3
 80048dc:	e138      	b.n	8004b50 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80048de:	4b80      	ldr	r3, [pc, #512]	; (8004ae0 <HAL_RCC_OscConfig+0x754>)
 80048e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048e4:	f003 0302 	and.w	r3, r3, #2
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d0ed      	beq.n	80048c8 <HAL_RCC_OscConfig+0x53c>
 80048ec:	e015      	b.n	800491a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048ee:	f7fd ff6f 	bl	80027d0 <HAL_GetTick>
 80048f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80048f4:	e00a      	b.n	800490c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048f6:	f7fd ff6b 	bl	80027d0 <HAL_GetTick>
 80048fa:	4602      	mov	r2, r0
 80048fc:	693b      	ldr	r3, [r7, #16]
 80048fe:	1ad3      	subs	r3, r2, r3
 8004900:	f241 3288 	movw	r2, #5000	; 0x1388
 8004904:	4293      	cmp	r3, r2
 8004906:	d901      	bls.n	800490c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004908:	2303      	movs	r3, #3
 800490a:	e121      	b.n	8004b50 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800490c:	4b74      	ldr	r3, [pc, #464]	; (8004ae0 <HAL_RCC_OscConfig+0x754>)
 800490e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004912:	f003 0302 	and.w	r3, r3, #2
 8004916:	2b00      	cmp	r3, #0
 8004918:	d1ed      	bne.n	80048f6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800491a:	7ffb      	ldrb	r3, [r7, #31]
 800491c:	2b01      	cmp	r3, #1
 800491e:	d105      	bne.n	800492c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004920:	4b6f      	ldr	r3, [pc, #444]	; (8004ae0 <HAL_RCC_OscConfig+0x754>)
 8004922:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004924:	4a6e      	ldr	r2, [pc, #440]	; (8004ae0 <HAL_RCC_OscConfig+0x754>)
 8004926:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800492a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004930:	2b00      	cmp	r3, #0
 8004932:	f000 810c 	beq.w	8004b4e <HAL_RCC_OscConfig+0x7c2>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800493a:	2b02      	cmp	r3, #2
 800493c:	f040 80d4 	bne.w	8004ae8 <HAL_RCC_OscConfig+0x75c>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004940:	4b67      	ldr	r3, [pc, #412]	; (8004ae0 <HAL_RCC_OscConfig+0x754>)
 8004942:	68db      	ldr	r3, [r3, #12]
 8004944:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004946:	697b      	ldr	r3, [r7, #20]
 8004948:	f003 0203 	and.w	r2, r3, #3
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004950:	429a      	cmp	r2, r3
 8004952:	d130      	bne.n	80049b6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004954:	697b      	ldr	r3, [r7, #20]
 8004956:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800495e:	3b01      	subs	r3, #1
 8004960:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004962:	429a      	cmp	r2, r3
 8004964:	d127      	bne.n	80049b6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004966:	697b      	ldr	r3, [r7, #20]
 8004968:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004970:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004972:	429a      	cmp	r2, r3
 8004974:	d11f      	bne.n	80049b6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004976:	697b      	ldr	r3, [r7, #20]
 8004978:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800497c:	687a      	ldr	r2, [r7, #4]
 800497e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004980:	2a07      	cmp	r2, #7
 8004982:	bf14      	ite	ne
 8004984:	2201      	movne	r2, #1
 8004986:	2200      	moveq	r2, #0
 8004988:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800498a:	4293      	cmp	r3, r2
 800498c:	d113      	bne.n	80049b6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800498e:	697b      	ldr	r3, [r7, #20]
 8004990:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004998:	085b      	lsrs	r3, r3, #1
 800499a:	3b01      	subs	r3, #1
 800499c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800499e:	429a      	cmp	r2, r3
 80049a0:	d109      	bne.n	80049b6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80049a2:	697b      	ldr	r3, [r7, #20]
 80049a4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ac:	085b      	lsrs	r3, r3, #1
 80049ae:	3b01      	subs	r3, #1
 80049b0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80049b2:	429a      	cmp	r2, r3
 80049b4:	d06e      	beq.n	8004a94 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80049b6:	69bb      	ldr	r3, [r7, #24]
 80049b8:	2b0c      	cmp	r3, #12
 80049ba:	d069      	beq.n	8004a90 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80049bc:	4b48      	ldr	r3, [pc, #288]	; (8004ae0 <HAL_RCC_OscConfig+0x754>)
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d105      	bne.n	80049d4 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80049c8:	4b45      	ldr	r3, [pc, #276]	; (8004ae0 <HAL_RCC_OscConfig+0x754>)
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d001      	beq.n	80049d8 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80049d4:	2301      	movs	r3, #1
 80049d6:	e0bb      	b.n	8004b50 <HAL_RCC_OscConfig+0x7c4>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80049d8:	4b41      	ldr	r3, [pc, #260]	; (8004ae0 <HAL_RCC_OscConfig+0x754>)
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	4a40      	ldr	r2, [pc, #256]	; (8004ae0 <HAL_RCC_OscConfig+0x754>)
 80049de:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80049e2:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80049e4:	f7fd fef4 	bl	80027d0 <HAL_GetTick>
 80049e8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80049ea:	e008      	b.n	80049fe <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049ec:	f7fd fef0 	bl	80027d0 <HAL_GetTick>
 80049f0:	4602      	mov	r2, r0
 80049f2:	693b      	ldr	r3, [r7, #16]
 80049f4:	1ad3      	subs	r3, r2, r3
 80049f6:	2b02      	cmp	r3, #2
 80049f8:	d901      	bls.n	80049fe <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80049fa:	2303      	movs	r3, #3
 80049fc:	e0a8      	b.n	8004b50 <HAL_RCC_OscConfig+0x7c4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80049fe:	4b38      	ldr	r3, [pc, #224]	; (8004ae0 <HAL_RCC_OscConfig+0x754>)
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d1f0      	bne.n	80049ec <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004a0a:	4b35      	ldr	r3, [pc, #212]	; (8004ae0 <HAL_RCC_OscConfig+0x754>)
 8004a0c:	68da      	ldr	r2, [r3, #12]
 8004a0e:	4b35      	ldr	r3, [pc, #212]	; (8004ae4 <HAL_RCC_OscConfig+0x758>)
 8004a10:	4013      	ands	r3, r2
 8004a12:	687a      	ldr	r2, [r7, #4]
 8004a14:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004a16:	687a      	ldr	r2, [r7, #4]
 8004a18:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004a1a:	3a01      	subs	r2, #1
 8004a1c:	0112      	lsls	r2, r2, #4
 8004a1e:	4311      	orrs	r1, r2
 8004a20:	687a      	ldr	r2, [r7, #4]
 8004a22:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004a24:	0212      	lsls	r2, r2, #8
 8004a26:	4311      	orrs	r1, r2
 8004a28:	687a      	ldr	r2, [r7, #4]
 8004a2a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004a2c:	0852      	lsrs	r2, r2, #1
 8004a2e:	3a01      	subs	r2, #1
 8004a30:	0552      	lsls	r2, r2, #21
 8004a32:	4311      	orrs	r1, r2
 8004a34:	687a      	ldr	r2, [r7, #4]
 8004a36:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004a38:	0852      	lsrs	r2, r2, #1
 8004a3a:	3a01      	subs	r2, #1
 8004a3c:	0652      	lsls	r2, r2, #25
 8004a3e:	4311      	orrs	r1, r2
 8004a40:	687a      	ldr	r2, [r7, #4]
 8004a42:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004a44:	0912      	lsrs	r2, r2, #4
 8004a46:	0452      	lsls	r2, r2, #17
 8004a48:	430a      	orrs	r2, r1
 8004a4a:	4925      	ldr	r1, [pc, #148]	; (8004ae0 <HAL_RCC_OscConfig+0x754>)
 8004a4c:	4313      	orrs	r3, r2
 8004a4e:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004a50:	4b23      	ldr	r3, [pc, #140]	; (8004ae0 <HAL_RCC_OscConfig+0x754>)
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	4a22      	ldr	r2, [pc, #136]	; (8004ae0 <HAL_RCC_OscConfig+0x754>)
 8004a56:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004a5a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004a5c:	4b20      	ldr	r3, [pc, #128]	; (8004ae0 <HAL_RCC_OscConfig+0x754>)
 8004a5e:	68db      	ldr	r3, [r3, #12]
 8004a60:	4a1f      	ldr	r2, [pc, #124]	; (8004ae0 <HAL_RCC_OscConfig+0x754>)
 8004a62:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004a66:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004a68:	f7fd feb2 	bl	80027d0 <HAL_GetTick>
 8004a6c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a6e:	e008      	b.n	8004a82 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a70:	f7fd feae 	bl	80027d0 <HAL_GetTick>
 8004a74:	4602      	mov	r2, r0
 8004a76:	693b      	ldr	r3, [r7, #16]
 8004a78:	1ad3      	subs	r3, r2, r3
 8004a7a:	2b02      	cmp	r3, #2
 8004a7c:	d901      	bls.n	8004a82 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8004a7e:	2303      	movs	r3, #3
 8004a80:	e066      	b.n	8004b50 <HAL_RCC_OscConfig+0x7c4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a82:	4b17      	ldr	r3, [pc, #92]	; (8004ae0 <HAL_RCC_OscConfig+0x754>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d0f0      	beq.n	8004a70 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004a8e:	e05e      	b.n	8004b4e <HAL_RCC_OscConfig+0x7c2>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004a90:	2301      	movs	r3, #1
 8004a92:	e05d      	b.n	8004b50 <HAL_RCC_OscConfig+0x7c4>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a94:	4b12      	ldr	r3, [pc, #72]	; (8004ae0 <HAL_RCC_OscConfig+0x754>)
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d156      	bne.n	8004b4e <HAL_RCC_OscConfig+0x7c2>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004aa0:	4b0f      	ldr	r3, [pc, #60]	; (8004ae0 <HAL_RCC_OscConfig+0x754>)
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	4a0e      	ldr	r2, [pc, #56]	; (8004ae0 <HAL_RCC_OscConfig+0x754>)
 8004aa6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004aaa:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004aac:	4b0c      	ldr	r3, [pc, #48]	; (8004ae0 <HAL_RCC_OscConfig+0x754>)
 8004aae:	68db      	ldr	r3, [r3, #12]
 8004ab0:	4a0b      	ldr	r2, [pc, #44]	; (8004ae0 <HAL_RCC_OscConfig+0x754>)
 8004ab2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004ab6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004ab8:	f7fd fe8a 	bl	80027d0 <HAL_GetTick>
 8004abc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004abe:	e008      	b.n	8004ad2 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ac0:	f7fd fe86 	bl	80027d0 <HAL_GetTick>
 8004ac4:	4602      	mov	r2, r0
 8004ac6:	693b      	ldr	r3, [r7, #16]
 8004ac8:	1ad3      	subs	r3, r2, r3
 8004aca:	2b02      	cmp	r3, #2
 8004acc:	d901      	bls.n	8004ad2 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8004ace:	2303      	movs	r3, #3
 8004ad0:	e03e      	b.n	8004b50 <HAL_RCC_OscConfig+0x7c4>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004ad2:	4b03      	ldr	r3, [pc, #12]	; (8004ae0 <HAL_RCC_OscConfig+0x754>)
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d0f0      	beq.n	8004ac0 <HAL_RCC_OscConfig+0x734>
 8004ade:	e036      	b.n	8004b4e <HAL_RCC_OscConfig+0x7c2>
 8004ae0:	40021000 	.word	0x40021000
 8004ae4:	f99d808c 	.word	0xf99d808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004ae8:	69bb      	ldr	r3, [r7, #24]
 8004aea:	2b0c      	cmp	r3, #12
 8004aec:	d02d      	beq.n	8004b4a <HAL_RCC_OscConfig+0x7be>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004aee:	4b1a      	ldr	r3, [pc, #104]	; (8004b58 <HAL_RCC_OscConfig+0x7cc>)
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	4a19      	ldr	r2, [pc, #100]	; (8004b58 <HAL_RCC_OscConfig+0x7cc>)
 8004af4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004af8:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8004afa:	4b17      	ldr	r3, [pc, #92]	; (8004b58 <HAL_RCC_OscConfig+0x7cc>)
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d105      	bne.n	8004b12 <HAL_RCC_OscConfig+0x786>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004b06:	4b14      	ldr	r3, [pc, #80]	; (8004b58 <HAL_RCC_OscConfig+0x7cc>)
 8004b08:	68db      	ldr	r3, [r3, #12]
 8004b0a:	4a13      	ldr	r2, [pc, #76]	; (8004b58 <HAL_RCC_OscConfig+0x7cc>)
 8004b0c:	f023 0303 	bic.w	r3, r3, #3
 8004b10:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004b12:	4b11      	ldr	r3, [pc, #68]	; (8004b58 <HAL_RCC_OscConfig+0x7cc>)
 8004b14:	68db      	ldr	r3, [r3, #12]
 8004b16:	4a10      	ldr	r2, [pc, #64]	; (8004b58 <HAL_RCC_OscConfig+0x7cc>)
 8004b18:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004b1c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b20:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b22:	f7fd fe55 	bl	80027d0 <HAL_GetTick>
 8004b26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b28:	e008      	b.n	8004b3c <HAL_RCC_OscConfig+0x7b0>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b2a:	f7fd fe51 	bl	80027d0 <HAL_GetTick>
 8004b2e:	4602      	mov	r2, r0
 8004b30:	693b      	ldr	r3, [r7, #16]
 8004b32:	1ad3      	subs	r3, r2, r3
 8004b34:	2b02      	cmp	r3, #2
 8004b36:	d901      	bls.n	8004b3c <HAL_RCC_OscConfig+0x7b0>
          {
            return HAL_TIMEOUT;
 8004b38:	2303      	movs	r3, #3
 8004b3a:	e009      	b.n	8004b50 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b3c:	4b06      	ldr	r3, [pc, #24]	; (8004b58 <HAL_RCC_OscConfig+0x7cc>)
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d1f0      	bne.n	8004b2a <HAL_RCC_OscConfig+0x79e>
 8004b48:	e001      	b.n	8004b4e <HAL_RCC_OscConfig+0x7c2>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004b4a:	2301      	movs	r3, #1
 8004b4c:	e000      	b.n	8004b50 <HAL_RCC_OscConfig+0x7c4>
      }
    }
  }
  return HAL_OK;
 8004b4e:	2300      	movs	r3, #0
}
 8004b50:	4618      	mov	r0, r3
 8004b52:	3720      	adds	r7, #32
 8004b54:	46bd      	mov	sp, r7
 8004b56:	bd80      	pop	{r7, pc}
 8004b58:	40021000 	.word	0x40021000

08004b5c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b084      	sub	sp, #16
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
 8004b64:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d101      	bne.n	8004b70 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004b6c:	2301      	movs	r3, #1
 8004b6e:	e0c8      	b.n	8004d02 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004b70:	4b66      	ldr	r3, [pc, #408]	; (8004d0c <HAL_RCC_ClockConfig+0x1b0>)
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f003 0307 	and.w	r3, r3, #7
 8004b78:	683a      	ldr	r2, [r7, #0]
 8004b7a:	429a      	cmp	r2, r3
 8004b7c:	d910      	bls.n	8004ba0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b7e:	4b63      	ldr	r3, [pc, #396]	; (8004d0c <HAL_RCC_ClockConfig+0x1b0>)
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f023 0207 	bic.w	r2, r3, #7
 8004b86:	4961      	ldr	r1, [pc, #388]	; (8004d0c <HAL_RCC_ClockConfig+0x1b0>)
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	4313      	orrs	r3, r2
 8004b8c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b8e:	4b5f      	ldr	r3, [pc, #380]	; (8004d0c <HAL_RCC_ClockConfig+0x1b0>)
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f003 0307 	and.w	r3, r3, #7
 8004b96:	683a      	ldr	r2, [r7, #0]
 8004b98:	429a      	cmp	r2, r3
 8004b9a:	d001      	beq.n	8004ba0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004b9c:	2301      	movs	r3, #1
 8004b9e:	e0b0      	b.n	8004d02 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f003 0301 	and.w	r3, r3, #1
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d04c      	beq.n	8004c46 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	685b      	ldr	r3, [r3, #4]
 8004bb0:	2b03      	cmp	r3, #3
 8004bb2:	d107      	bne.n	8004bc4 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004bb4:	4b56      	ldr	r3, [pc, #344]	; (8004d10 <HAL_RCC_ClockConfig+0x1b4>)
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d121      	bne.n	8004c04 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8004bc0:	2301      	movs	r3, #1
 8004bc2:	e09e      	b.n	8004d02 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	685b      	ldr	r3, [r3, #4]
 8004bc8:	2b02      	cmp	r3, #2
 8004bca:	d107      	bne.n	8004bdc <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004bcc:	4b50      	ldr	r3, [pc, #320]	; (8004d10 <HAL_RCC_ClockConfig+0x1b4>)
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d115      	bne.n	8004c04 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004bd8:	2301      	movs	r3, #1
 8004bda:	e092      	b.n	8004d02 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	685b      	ldr	r3, [r3, #4]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d107      	bne.n	8004bf4 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004be4:	4b4a      	ldr	r3, [pc, #296]	; (8004d10 <HAL_RCC_ClockConfig+0x1b4>)
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f003 0302 	and.w	r3, r3, #2
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d109      	bne.n	8004c04 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004bf0:	2301      	movs	r3, #1
 8004bf2:	e086      	b.n	8004d02 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004bf4:	4b46      	ldr	r3, [pc, #280]	; (8004d10 <HAL_RCC_ClockConfig+0x1b4>)
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d101      	bne.n	8004c04 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004c00:	2301      	movs	r3, #1
 8004c02:	e07e      	b.n	8004d02 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004c04:	4b42      	ldr	r3, [pc, #264]	; (8004d10 <HAL_RCC_ClockConfig+0x1b4>)
 8004c06:	689b      	ldr	r3, [r3, #8]
 8004c08:	f023 0203 	bic.w	r2, r3, #3
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	685b      	ldr	r3, [r3, #4]
 8004c10:	493f      	ldr	r1, [pc, #252]	; (8004d10 <HAL_RCC_ClockConfig+0x1b4>)
 8004c12:	4313      	orrs	r3, r2
 8004c14:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c16:	f7fd fddb 	bl	80027d0 <HAL_GetTick>
 8004c1a:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c1c:	e00a      	b.n	8004c34 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c1e:	f7fd fdd7 	bl	80027d0 <HAL_GetTick>
 8004c22:	4602      	mov	r2, r0
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	1ad3      	subs	r3, r2, r3
 8004c28:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c2c:	4293      	cmp	r3, r2
 8004c2e:	d901      	bls.n	8004c34 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8004c30:	2303      	movs	r3, #3
 8004c32:	e066      	b.n	8004d02 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c34:	4b36      	ldr	r3, [pc, #216]	; (8004d10 <HAL_RCC_ClockConfig+0x1b4>)
 8004c36:	689b      	ldr	r3, [r3, #8]
 8004c38:	f003 020c 	and.w	r2, r3, #12
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	685b      	ldr	r3, [r3, #4]
 8004c40:	009b      	lsls	r3, r3, #2
 8004c42:	429a      	cmp	r2, r3
 8004c44:	d1eb      	bne.n	8004c1e <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f003 0302 	and.w	r3, r3, #2
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d008      	beq.n	8004c64 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c52:	4b2f      	ldr	r3, [pc, #188]	; (8004d10 <HAL_RCC_ClockConfig+0x1b4>)
 8004c54:	689b      	ldr	r3, [r3, #8]
 8004c56:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	689b      	ldr	r3, [r3, #8]
 8004c5e:	492c      	ldr	r1, [pc, #176]	; (8004d10 <HAL_RCC_ClockConfig+0x1b4>)
 8004c60:	4313      	orrs	r3, r2
 8004c62:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004c64:	4b29      	ldr	r3, [pc, #164]	; (8004d0c <HAL_RCC_ClockConfig+0x1b0>)
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f003 0307 	and.w	r3, r3, #7
 8004c6c:	683a      	ldr	r2, [r7, #0]
 8004c6e:	429a      	cmp	r2, r3
 8004c70:	d210      	bcs.n	8004c94 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c72:	4b26      	ldr	r3, [pc, #152]	; (8004d0c <HAL_RCC_ClockConfig+0x1b0>)
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f023 0207 	bic.w	r2, r3, #7
 8004c7a:	4924      	ldr	r1, [pc, #144]	; (8004d0c <HAL_RCC_ClockConfig+0x1b0>)
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	4313      	orrs	r3, r2
 8004c80:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c82:	4b22      	ldr	r3, [pc, #136]	; (8004d0c <HAL_RCC_ClockConfig+0x1b0>)
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f003 0307 	and.w	r3, r3, #7
 8004c8a:	683a      	ldr	r2, [r7, #0]
 8004c8c:	429a      	cmp	r2, r3
 8004c8e:	d001      	beq.n	8004c94 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8004c90:	2301      	movs	r3, #1
 8004c92:	e036      	b.n	8004d02 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f003 0304 	and.w	r3, r3, #4
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d008      	beq.n	8004cb2 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004ca0:	4b1b      	ldr	r3, [pc, #108]	; (8004d10 <HAL_RCC_ClockConfig+0x1b4>)
 8004ca2:	689b      	ldr	r3, [r3, #8]
 8004ca4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	68db      	ldr	r3, [r3, #12]
 8004cac:	4918      	ldr	r1, [pc, #96]	; (8004d10 <HAL_RCC_ClockConfig+0x1b4>)
 8004cae:	4313      	orrs	r3, r2
 8004cb0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f003 0308 	and.w	r3, r3, #8
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d009      	beq.n	8004cd2 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004cbe:	4b14      	ldr	r3, [pc, #80]	; (8004d10 <HAL_RCC_ClockConfig+0x1b4>)
 8004cc0:	689b      	ldr	r3, [r3, #8]
 8004cc2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	691b      	ldr	r3, [r3, #16]
 8004cca:	00db      	lsls	r3, r3, #3
 8004ccc:	4910      	ldr	r1, [pc, #64]	; (8004d10 <HAL_RCC_ClockConfig+0x1b4>)
 8004cce:	4313      	orrs	r3, r2
 8004cd0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004cd2:	f000 f825 	bl	8004d20 <HAL_RCC_GetSysClockFreq>
 8004cd6:	4602      	mov	r2, r0
 8004cd8:	4b0d      	ldr	r3, [pc, #52]	; (8004d10 <HAL_RCC_ClockConfig+0x1b4>)
 8004cda:	689b      	ldr	r3, [r3, #8]
 8004cdc:	091b      	lsrs	r3, r3, #4
 8004cde:	f003 030f 	and.w	r3, r3, #15
 8004ce2:	490c      	ldr	r1, [pc, #48]	; (8004d14 <HAL_RCC_ClockConfig+0x1b8>)
 8004ce4:	5ccb      	ldrb	r3, [r1, r3]
 8004ce6:	f003 031f 	and.w	r3, r3, #31
 8004cea:	fa22 f303 	lsr.w	r3, r2, r3
 8004cee:	4a0a      	ldr	r2, [pc, #40]	; (8004d18 <HAL_RCC_ClockConfig+0x1bc>)
 8004cf0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004cf2:	4b0a      	ldr	r3, [pc, #40]	; (8004d1c <HAL_RCC_ClockConfig+0x1c0>)
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	f7fd fb74 	bl	80023e4 <HAL_InitTick>
 8004cfc:	4603      	mov	r3, r0
 8004cfe:	72fb      	strb	r3, [r7, #11]

  return status;
 8004d00:	7afb      	ldrb	r3, [r7, #11]
}
 8004d02:	4618      	mov	r0, r3
 8004d04:	3710      	adds	r7, #16
 8004d06:	46bd      	mov	sp, r7
 8004d08:	bd80      	pop	{r7, pc}
 8004d0a:	bf00      	nop
 8004d0c:	40022000 	.word	0x40022000
 8004d10:	40021000 	.word	0x40021000
 8004d14:	080150ec 	.word	0x080150ec
 8004d18:	20000010 	.word	0x20000010
 8004d1c:	20000014 	.word	0x20000014

08004d20 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004d20:	b480      	push	{r7}
 8004d22:	b089      	sub	sp, #36	; 0x24
 8004d24:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004d26:	2300      	movs	r3, #0
 8004d28:	61fb      	str	r3, [r7, #28]
 8004d2a:	2300      	movs	r3, #0
 8004d2c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004d2e:	4b3e      	ldr	r3, [pc, #248]	; (8004e28 <HAL_RCC_GetSysClockFreq+0x108>)
 8004d30:	689b      	ldr	r3, [r3, #8]
 8004d32:	f003 030c 	and.w	r3, r3, #12
 8004d36:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004d38:	4b3b      	ldr	r3, [pc, #236]	; (8004e28 <HAL_RCC_GetSysClockFreq+0x108>)
 8004d3a:	68db      	ldr	r3, [r3, #12]
 8004d3c:	f003 0303 	and.w	r3, r3, #3
 8004d40:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004d42:	693b      	ldr	r3, [r7, #16]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d005      	beq.n	8004d54 <HAL_RCC_GetSysClockFreq+0x34>
 8004d48:	693b      	ldr	r3, [r7, #16]
 8004d4a:	2b0c      	cmp	r3, #12
 8004d4c:	d121      	bne.n	8004d92 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	2b01      	cmp	r3, #1
 8004d52:	d11e      	bne.n	8004d92 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004d54:	4b34      	ldr	r3, [pc, #208]	; (8004e28 <HAL_RCC_GetSysClockFreq+0x108>)
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f003 0308 	and.w	r3, r3, #8
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d107      	bne.n	8004d70 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004d60:	4b31      	ldr	r3, [pc, #196]	; (8004e28 <HAL_RCC_GetSysClockFreq+0x108>)
 8004d62:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004d66:	0a1b      	lsrs	r3, r3, #8
 8004d68:	f003 030f 	and.w	r3, r3, #15
 8004d6c:	61fb      	str	r3, [r7, #28]
 8004d6e:	e005      	b.n	8004d7c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004d70:	4b2d      	ldr	r3, [pc, #180]	; (8004e28 <HAL_RCC_GetSysClockFreq+0x108>)
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	091b      	lsrs	r3, r3, #4
 8004d76:	f003 030f 	and.w	r3, r3, #15
 8004d7a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004d7c:	4a2b      	ldr	r2, [pc, #172]	; (8004e2c <HAL_RCC_GetSysClockFreq+0x10c>)
 8004d7e:	69fb      	ldr	r3, [r7, #28]
 8004d80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d84:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004d86:	693b      	ldr	r3, [r7, #16]
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d10d      	bne.n	8004da8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004d8c:	69fb      	ldr	r3, [r7, #28]
 8004d8e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004d90:	e00a      	b.n	8004da8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004d92:	693b      	ldr	r3, [r7, #16]
 8004d94:	2b04      	cmp	r3, #4
 8004d96:	d102      	bne.n	8004d9e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004d98:	4b25      	ldr	r3, [pc, #148]	; (8004e30 <HAL_RCC_GetSysClockFreq+0x110>)
 8004d9a:	61bb      	str	r3, [r7, #24]
 8004d9c:	e004      	b.n	8004da8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004d9e:	693b      	ldr	r3, [r7, #16]
 8004da0:	2b08      	cmp	r3, #8
 8004da2:	d101      	bne.n	8004da8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004da4:	4b23      	ldr	r3, [pc, #140]	; (8004e34 <HAL_RCC_GetSysClockFreq+0x114>)
 8004da6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004da8:	693b      	ldr	r3, [r7, #16]
 8004daa:	2b0c      	cmp	r3, #12
 8004dac:	d134      	bne.n	8004e18 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004dae:	4b1e      	ldr	r3, [pc, #120]	; (8004e28 <HAL_RCC_GetSysClockFreq+0x108>)
 8004db0:	68db      	ldr	r3, [r3, #12]
 8004db2:	f003 0303 	and.w	r3, r3, #3
 8004db6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004db8:	68bb      	ldr	r3, [r7, #8]
 8004dba:	2b02      	cmp	r3, #2
 8004dbc:	d003      	beq.n	8004dc6 <HAL_RCC_GetSysClockFreq+0xa6>
 8004dbe:	68bb      	ldr	r3, [r7, #8]
 8004dc0:	2b03      	cmp	r3, #3
 8004dc2:	d003      	beq.n	8004dcc <HAL_RCC_GetSysClockFreq+0xac>
 8004dc4:	e005      	b.n	8004dd2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004dc6:	4b1a      	ldr	r3, [pc, #104]	; (8004e30 <HAL_RCC_GetSysClockFreq+0x110>)
 8004dc8:	617b      	str	r3, [r7, #20]
      break;
 8004dca:	e005      	b.n	8004dd8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004dcc:	4b19      	ldr	r3, [pc, #100]	; (8004e34 <HAL_RCC_GetSysClockFreq+0x114>)
 8004dce:	617b      	str	r3, [r7, #20]
      break;
 8004dd0:	e002      	b.n	8004dd8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004dd2:	69fb      	ldr	r3, [r7, #28]
 8004dd4:	617b      	str	r3, [r7, #20]
      break;
 8004dd6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004dd8:	4b13      	ldr	r3, [pc, #76]	; (8004e28 <HAL_RCC_GetSysClockFreq+0x108>)
 8004dda:	68db      	ldr	r3, [r3, #12]
 8004ddc:	091b      	lsrs	r3, r3, #4
 8004dde:	f003 0307 	and.w	r3, r3, #7
 8004de2:	3301      	adds	r3, #1
 8004de4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004de6:	4b10      	ldr	r3, [pc, #64]	; (8004e28 <HAL_RCC_GetSysClockFreq+0x108>)
 8004de8:	68db      	ldr	r3, [r3, #12]
 8004dea:	0a1b      	lsrs	r3, r3, #8
 8004dec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004df0:	697a      	ldr	r2, [r7, #20]
 8004df2:	fb03 f202 	mul.w	r2, r3, r2
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dfc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004dfe:	4b0a      	ldr	r3, [pc, #40]	; (8004e28 <HAL_RCC_GetSysClockFreq+0x108>)
 8004e00:	68db      	ldr	r3, [r3, #12]
 8004e02:	0e5b      	lsrs	r3, r3, #25
 8004e04:	f003 0303 	and.w	r3, r3, #3
 8004e08:	3301      	adds	r3, #1
 8004e0a:	005b      	lsls	r3, r3, #1
 8004e0c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004e0e:	697a      	ldr	r2, [r7, #20]
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e16:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004e18:	69bb      	ldr	r3, [r7, #24]
}
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	3724      	adds	r7, #36	; 0x24
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e24:	4770      	bx	lr
 8004e26:	bf00      	nop
 8004e28:	40021000 	.word	0x40021000
 8004e2c:	08015104 	.word	0x08015104
 8004e30:	00f42400 	.word	0x00f42400
 8004e34:	007a1200 	.word	0x007a1200

08004e38 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004e38:	b480      	push	{r7}
 8004e3a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004e3c:	4b03      	ldr	r3, [pc, #12]	; (8004e4c <HAL_RCC_GetHCLKFreq+0x14>)
 8004e3e:	681b      	ldr	r3, [r3, #0]
}
 8004e40:	4618      	mov	r0, r3
 8004e42:	46bd      	mov	sp, r7
 8004e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e48:	4770      	bx	lr
 8004e4a:	bf00      	nop
 8004e4c:	20000010 	.word	0x20000010

08004e50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004e50:	b580      	push	{r7, lr}
 8004e52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004e54:	f7ff fff0 	bl	8004e38 <HAL_RCC_GetHCLKFreq>
 8004e58:	4602      	mov	r2, r0
 8004e5a:	4b06      	ldr	r3, [pc, #24]	; (8004e74 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004e5c:	689b      	ldr	r3, [r3, #8]
 8004e5e:	0a1b      	lsrs	r3, r3, #8
 8004e60:	f003 0307 	and.w	r3, r3, #7
 8004e64:	4904      	ldr	r1, [pc, #16]	; (8004e78 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004e66:	5ccb      	ldrb	r3, [r1, r3]
 8004e68:	f003 031f 	and.w	r3, r3, #31
 8004e6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e70:	4618      	mov	r0, r3
 8004e72:	bd80      	pop	{r7, pc}
 8004e74:	40021000 	.word	0x40021000
 8004e78:	080150fc 	.word	0x080150fc

08004e7c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004e80:	f7ff ffda 	bl	8004e38 <HAL_RCC_GetHCLKFreq>
 8004e84:	4602      	mov	r2, r0
 8004e86:	4b06      	ldr	r3, [pc, #24]	; (8004ea0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004e88:	689b      	ldr	r3, [r3, #8]
 8004e8a:	0adb      	lsrs	r3, r3, #11
 8004e8c:	f003 0307 	and.w	r3, r3, #7
 8004e90:	4904      	ldr	r1, [pc, #16]	; (8004ea4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004e92:	5ccb      	ldrb	r3, [r1, r3]
 8004e94:	f003 031f 	and.w	r3, r3, #31
 8004e98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	bd80      	pop	{r7, pc}
 8004ea0:	40021000 	.word	0x40021000
 8004ea4:	080150fc 	.word	0x080150fc

08004ea8 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004ea8:	b480      	push	{r7}
 8004eaa:	b083      	sub	sp, #12
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
 8004eb0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	220f      	movs	r2, #15
 8004eb6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8004eb8:	4b12      	ldr	r3, [pc, #72]	; (8004f04 <HAL_RCC_GetClockConfig+0x5c>)
 8004eba:	689b      	ldr	r3, [r3, #8]
 8004ebc:	f003 0203 	and.w	r2, r3, #3
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8004ec4:	4b0f      	ldr	r3, [pc, #60]	; (8004f04 <HAL_RCC_GetClockConfig+0x5c>)
 8004ec6:	689b      	ldr	r3, [r3, #8]
 8004ec8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8004ed0:	4b0c      	ldr	r3, [pc, #48]	; (8004f04 <HAL_RCC_GetClockConfig+0x5c>)
 8004ed2:	689b      	ldr	r3, [r3, #8]
 8004ed4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8004edc:	4b09      	ldr	r3, [pc, #36]	; (8004f04 <HAL_RCC_GetClockConfig+0x5c>)
 8004ede:	689b      	ldr	r3, [r3, #8]
 8004ee0:	08db      	lsrs	r3, r3, #3
 8004ee2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8004eea:	4b07      	ldr	r3, [pc, #28]	; (8004f08 <HAL_RCC_GetClockConfig+0x60>)
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f003 0207 	and.w	r2, r3, #7
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	601a      	str	r2, [r3, #0]
}
 8004ef6:	bf00      	nop
 8004ef8:	370c      	adds	r7, #12
 8004efa:	46bd      	mov	sp, r7
 8004efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f00:	4770      	bx	lr
 8004f02:	bf00      	nop
 8004f04:	40021000 	.word	0x40021000
 8004f08:	40022000 	.word	0x40022000

08004f0c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b086      	sub	sp, #24
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004f14:	2300      	movs	r3, #0
 8004f16:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004f18:	4b2a      	ldr	r3, [pc, #168]	; (8004fc4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004f1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d003      	beq.n	8004f2c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004f24:	f7ff f902 	bl	800412c <HAL_PWREx_GetVoltageRange>
 8004f28:	6178      	str	r0, [r7, #20]
 8004f2a:	e014      	b.n	8004f56 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004f2c:	4b25      	ldr	r3, [pc, #148]	; (8004fc4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004f2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f30:	4a24      	ldr	r2, [pc, #144]	; (8004fc4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004f32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f36:	6593      	str	r3, [r2, #88]	; 0x58
 8004f38:	4b22      	ldr	r3, [pc, #136]	; (8004fc4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004f3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f40:	60fb      	str	r3, [r7, #12]
 8004f42:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004f44:	f7ff f8f2 	bl	800412c <HAL_PWREx_GetVoltageRange>
 8004f48:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004f4a:	4b1e      	ldr	r3, [pc, #120]	; (8004fc4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004f4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f4e:	4a1d      	ldr	r2, [pc, #116]	; (8004fc4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004f50:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f54:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004f56:	697b      	ldr	r3, [r7, #20]
 8004f58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f5c:	d10b      	bne.n	8004f76 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2b80      	cmp	r3, #128	; 0x80
 8004f62:	d919      	bls.n	8004f98 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2ba0      	cmp	r3, #160	; 0xa0
 8004f68:	d902      	bls.n	8004f70 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004f6a:	2302      	movs	r3, #2
 8004f6c:	613b      	str	r3, [r7, #16]
 8004f6e:	e013      	b.n	8004f98 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004f70:	2301      	movs	r3, #1
 8004f72:	613b      	str	r3, [r7, #16]
 8004f74:	e010      	b.n	8004f98 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	2b80      	cmp	r3, #128	; 0x80
 8004f7a:	d902      	bls.n	8004f82 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004f7c:	2303      	movs	r3, #3
 8004f7e:	613b      	str	r3, [r7, #16]
 8004f80:	e00a      	b.n	8004f98 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	2b80      	cmp	r3, #128	; 0x80
 8004f86:	d102      	bne.n	8004f8e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004f88:	2302      	movs	r3, #2
 8004f8a:	613b      	str	r3, [r7, #16]
 8004f8c:	e004      	b.n	8004f98 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	2b70      	cmp	r3, #112	; 0x70
 8004f92:	d101      	bne.n	8004f98 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004f94:	2301      	movs	r3, #1
 8004f96:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004f98:	4b0b      	ldr	r3, [pc, #44]	; (8004fc8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f023 0207 	bic.w	r2, r3, #7
 8004fa0:	4909      	ldr	r1, [pc, #36]	; (8004fc8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004fa2:	693b      	ldr	r3, [r7, #16]
 8004fa4:	4313      	orrs	r3, r2
 8004fa6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004fa8:	4b07      	ldr	r3, [pc, #28]	; (8004fc8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f003 0307 	and.w	r3, r3, #7
 8004fb0:	693a      	ldr	r2, [r7, #16]
 8004fb2:	429a      	cmp	r2, r3
 8004fb4:	d001      	beq.n	8004fba <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004fb6:	2301      	movs	r3, #1
 8004fb8:	e000      	b.n	8004fbc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004fba:	2300      	movs	r3, #0
}
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	3718      	adds	r7, #24
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	bd80      	pop	{r7, pc}
 8004fc4:	40021000 	.word	0x40021000
 8004fc8:	40022000 	.word	0x40022000

08004fcc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b086      	sub	sp, #24
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004fd8:	2300      	movs	r3, #0
 8004fda:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d041      	beq.n	800506c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004fec:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004ff0:	d02a      	beq.n	8005048 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004ff2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004ff6:	d824      	bhi.n	8005042 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004ff8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004ffc:	d008      	beq.n	8005010 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004ffe:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005002:	d81e      	bhi.n	8005042 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005004:	2b00      	cmp	r3, #0
 8005006:	d00a      	beq.n	800501e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8005008:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800500c:	d010      	beq.n	8005030 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800500e:	e018      	b.n	8005042 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005010:	4b86      	ldr	r3, [pc, #536]	; (800522c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005012:	68db      	ldr	r3, [r3, #12]
 8005014:	4a85      	ldr	r2, [pc, #532]	; (800522c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005016:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800501a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800501c:	e015      	b.n	800504a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	3304      	adds	r3, #4
 8005022:	2100      	movs	r1, #0
 8005024:	4618      	mov	r0, r3
 8005026:	f000 facb 	bl	80055c0 <RCCEx_PLLSAI1_Config>
 800502a:	4603      	mov	r3, r0
 800502c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800502e:	e00c      	b.n	800504a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	3320      	adds	r3, #32
 8005034:	2100      	movs	r1, #0
 8005036:	4618      	mov	r0, r3
 8005038:	f000 fbb6 	bl	80057a8 <RCCEx_PLLSAI2_Config>
 800503c:	4603      	mov	r3, r0
 800503e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005040:	e003      	b.n	800504a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005042:	2301      	movs	r3, #1
 8005044:	74fb      	strb	r3, [r7, #19]
      break;
 8005046:	e000      	b.n	800504a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8005048:	bf00      	nop
    }

    if(ret == HAL_OK)
 800504a:	7cfb      	ldrb	r3, [r7, #19]
 800504c:	2b00      	cmp	r3, #0
 800504e:	d10b      	bne.n	8005068 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005050:	4b76      	ldr	r3, [pc, #472]	; (800522c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005052:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005056:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800505e:	4973      	ldr	r1, [pc, #460]	; (800522c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005060:	4313      	orrs	r3, r2
 8005062:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005066:	e001      	b.n	800506c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005068:	7cfb      	ldrb	r3, [r7, #19]
 800506a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005074:	2b00      	cmp	r3, #0
 8005076:	d041      	beq.n	80050fc <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800507c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005080:	d02a      	beq.n	80050d8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8005082:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005086:	d824      	bhi.n	80050d2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005088:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800508c:	d008      	beq.n	80050a0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800508e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005092:	d81e      	bhi.n	80050d2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005094:	2b00      	cmp	r3, #0
 8005096:	d00a      	beq.n	80050ae <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8005098:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800509c:	d010      	beq.n	80050c0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800509e:	e018      	b.n	80050d2 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80050a0:	4b62      	ldr	r3, [pc, #392]	; (800522c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80050a2:	68db      	ldr	r3, [r3, #12]
 80050a4:	4a61      	ldr	r2, [pc, #388]	; (800522c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80050a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80050aa:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80050ac:	e015      	b.n	80050da <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	3304      	adds	r3, #4
 80050b2:	2100      	movs	r1, #0
 80050b4:	4618      	mov	r0, r3
 80050b6:	f000 fa83 	bl	80055c0 <RCCEx_PLLSAI1_Config>
 80050ba:	4603      	mov	r3, r0
 80050bc:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80050be:	e00c      	b.n	80050da <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	3320      	adds	r3, #32
 80050c4:	2100      	movs	r1, #0
 80050c6:	4618      	mov	r0, r3
 80050c8:	f000 fb6e 	bl	80057a8 <RCCEx_PLLSAI2_Config>
 80050cc:	4603      	mov	r3, r0
 80050ce:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80050d0:	e003      	b.n	80050da <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80050d2:	2301      	movs	r3, #1
 80050d4:	74fb      	strb	r3, [r7, #19]
      break;
 80050d6:	e000      	b.n	80050da <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80050d8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80050da:	7cfb      	ldrb	r3, [r7, #19]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d10b      	bne.n	80050f8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80050e0:	4b52      	ldr	r3, [pc, #328]	; (800522c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80050e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050e6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80050ee:	494f      	ldr	r1, [pc, #316]	; (800522c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80050f0:	4313      	orrs	r3, r2
 80050f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80050f6:	e001      	b.n	80050fc <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050f8:	7cfb      	ldrb	r3, [r7, #19]
 80050fa:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005104:	2b00      	cmp	r3, #0
 8005106:	f000 80a0 	beq.w	800524a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800510a:	2300      	movs	r3, #0
 800510c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800510e:	4b47      	ldr	r3, [pc, #284]	; (800522c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005110:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005112:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005116:	2b00      	cmp	r3, #0
 8005118:	d101      	bne.n	800511e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800511a:	2301      	movs	r3, #1
 800511c:	e000      	b.n	8005120 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800511e:	2300      	movs	r3, #0
 8005120:	2b00      	cmp	r3, #0
 8005122:	d00d      	beq.n	8005140 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005124:	4b41      	ldr	r3, [pc, #260]	; (800522c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005126:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005128:	4a40      	ldr	r2, [pc, #256]	; (800522c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800512a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800512e:	6593      	str	r3, [r2, #88]	; 0x58
 8005130:	4b3e      	ldr	r3, [pc, #248]	; (800522c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005132:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005134:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005138:	60bb      	str	r3, [r7, #8]
 800513a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800513c:	2301      	movs	r3, #1
 800513e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005140:	4b3b      	ldr	r3, [pc, #236]	; (8005230 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	4a3a      	ldr	r2, [pc, #232]	; (8005230 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005146:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800514a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800514c:	f7fd fb40 	bl	80027d0 <HAL_GetTick>
 8005150:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005152:	e009      	b.n	8005168 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005154:	f7fd fb3c 	bl	80027d0 <HAL_GetTick>
 8005158:	4602      	mov	r2, r0
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	1ad3      	subs	r3, r2, r3
 800515e:	2b02      	cmp	r3, #2
 8005160:	d902      	bls.n	8005168 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8005162:	2303      	movs	r3, #3
 8005164:	74fb      	strb	r3, [r7, #19]
        break;
 8005166:	e005      	b.n	8005174 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005168:	4b31      	ldr	r3, [pc, #196]	; (8005230 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005170:	2b00      	cmp	r3, #0
 8005172:	d0ef      	beq.n	8005154 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8005174:	7cfb      	ldrb	r3, [r7, #19]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d15c      	bne.n	8005234 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800517a:	4b2c      	ldr	r3, [pc, #176]	; (800522c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800517c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005180:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005184:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005186:	697b      	ldr	r3, [r7, #20]
 8005188:	2b00      	cmp	r3, #0
 800518a:	d01f      	beq.n	80051cc <HAL_RCCEx_PeriphCLKConfig+0x200>
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005192:	697a      	ldr	r2, [r7, #20]
 8005194:	429a      	cmp	r2, r3
 8005196:	d019      	beq.n	80051cc <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005198:	4b24      	ldr	r3, [pc, #144]	; (800522c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800519a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800519e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051a2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80051a4:	4b21      	ldr	r3, [pc, #132]	; (800522c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80051a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051aa:	4a20      	ldr	r2, [pc, #128]	; (800522c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80051ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80051b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80051b4:	4b1d      	ldr	r3, [pc, #116]	; (800522c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80051b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051ba:	4a1c      	ldr	r2, [pc, #112]	; (800522c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80051bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80051c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80051c4:	4a19      	ldr	r2, [pc, #100]	; (800522c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80051c6:	697b      	ldr	r3, [r7, #20]
 80051c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80051cc:	697b      	ldr	r3, [r7, #20]
 80051ce:	f003 0301 	and.w	r3, r3, #1
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d016      	beq.n	8005204 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051d6:	f7fd fafb 	bl	80027d0 <HAL_GetTick>
 80051da:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80051dc:	e00b      	b.n	80051f6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80051de:	f7fd faf7 	bl	80027d0 <HAL_GetTick>
 80051e2:	4602      	mov	r2, r0
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	1ad3      	subs	r3, r2, r3
 80051e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80051ec:	4293      	cmp	r3, r2
 80051ee:	d902      	bls.n	80051f6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80051f0:	2303      	movs	r3, #3
 80051f2:	74fb      	strb	r3, [r7, #19]
            break;
 80051f4:	e006      	b.n	8005204 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80051f6:	4b0d      	ldr	r3, [pc, #52]	; (800522c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80051f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051fc:	f003 0302 	and.w	r3, r3, #2
 8005200:	2b00      	cmp	r3, #0
 8005202:	d0ec      	beq.n	80051de <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8005204:	7cfb      	ldrb	r3, [r7, #19]
 8005206:	2b00      	cmp	r3, #0
 8005208:	d10c      	bne.n	8005224 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800520a:	4b08      	ldr	r3, [pc, #32]	; (800522c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800520c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005210:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800521a:	4904      	ldr	r1, [pc, #16]	; (800522c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800521c:	4313      	orrs	r3, r2
 800521e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005222:	e009      	b.n	8005238 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005224:	7cfb      	ldrb	r3, [r7, #19]
 8005226:	74bb      	strb	r3, [r7, #18]
 8005228:	e006      	b.n	8005238 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800522a:	bf00      	nop
 800522c:	40021000 	.word	0x40021000
 8005230:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005234:	7cfb      	ldrb	r3, [r7, #19]
 8005236:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005238:	7c7b      	ldrb	r3, [r7, #17]
 800523a:	2b01      	cmp	r3, #1
 800523c:	d105      	bne.n	800524a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800523e:	4b9e      	ldr	r3, [pc, #632]	; (80054b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005240:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005242:	4a9d      	ldr	r2, [pc, #628]	; (80054b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005244:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005248:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f003 0301 	and.w	r3, r3, #1
 8005252:	2b00      	cmp	r3, #0
 8005254:	d00a      	beq.n	800526c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005256:	4b98      	ldr	r3, [pc, #608]	; (80054b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005258:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800525c:	f023 0203 	bic.w	r2, r3, #3
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005264:	4994      	ldr	r1, [pc, #592]	; (80054b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005266:	4313      	orrs	r3, r2
 8005268:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f003 0302 	and.w	r3, r3, #2
 8005274:	2b00      	cmp	r3, #0
 8005276:	d00a      	beq.n	800528e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005278:	4b8f      	ldr	r3, [pc, #572]	; (80054b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800527a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800527e:	f023 020c 	bic.w	r2, r3, #12
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005286:	498c      	ldr	r1, [pc, #560]	; (80054b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005288:	4313      	orrs	r3, r2
 800528a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f003 0304 	and.w	r3, r3, #4
 8005296:	2b00      	cmp	r3, #0
 8005298:	d00a      	beq.n	80052b0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800529a:	4b87      	ldr	r3, [pc, #540]	; (80054b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800529c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052a0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052a8:	4983      	ldr	r1, [pc, #524]	; (80054b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052aa:	4313      	orrs	r3, r2
 80052ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f003 0308 	and.w	r3, r3, #8
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d00a      	beq.n	80052d2 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80052bc:	4b7e      	ldr	r3, [pc, #504]	; (80054b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052c2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052ca:	497b      	ldr	r1, [pc, #492]	; (80054b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052cc:	4313      	orrs	r3, r2
 80052ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f003 0310 	and.w	r3, r3, #16
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d00a      	beq.n	80052f4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80052de:	4b76      	ldr	r3, [pc, #472]	; (80054b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052e4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80052ec:	4972      	ldr	r1, [pc, #456]	; (80054b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052ee:	4313      	orrs	r3, r2
 80052f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f003 0320 	and.w	r3, r3, #32
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d00a      	beq.n	8005316 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005300:	4b6d      	ldr	r3, [pc, #436]	; (80054b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005302:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005306:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800530e:	496a      	ldr	r1, [pc, #424]	; (80054b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005310:	4313      	orrs	r3, r2
 8005312:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800531e:	2b00      	cmp	r3, #0
 8005320:	d00a      	beq.n	8005338 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005322:	4b65      	ldr	r3, [pc, #404]	; (80054b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005324:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005328:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005330:	4961      	ldr	r1, [pc, #388]	; (80054b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005332:	4313      	orrs	r3, r2
 8005334:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005340:	2b00      	cmp	r3, #0
 8005342:	d00a      	beq.n	800535a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005344:	4b5c      	ldr	r3, [pc, #368]	; (80054b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005346:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800534a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005352:	4959      	ldr	r1, [pc, #356]	; (80054b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005354:	4313      	orrs	r3, r2
 8005356:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005362:	2b00      	cmp	r3, #0
 8005364:	d00a      	beq.n	800537c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005366:	4b54      	ldr	r3, [pc, #336]	; (80054b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005368:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800536c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005374:	4950      	ldr	r1, [pc, #320]	; (80054b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005376:	4313      	orrs	r3, r2
 8005378:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005384:	2b00      	cmp	r3, #0
 8005386:	d00a      	beq.n	800539e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005388:	4b4b      	ldr	r3, [pc, #300]	; (80054b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800538a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800538e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005396:	4948      	ldr	r1, [pc, #288]	; (80054b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005398:	4313      	orrs	r3, r2
 800539a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d00a      	beq.n	80053c0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80053aa:	4b43      	ldr	r3, [pc, #268]	; (80054b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053b0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053b8:	493f      	ldr	r1, [pc, #252]	; (80054b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053ba:	4313      	orrs	r3, r2
 80053bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d028      	beq.n	800541e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80053cc:	4b3a      	ldr	r3, [pc, #232]	; (80054b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053d2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80053da:	4937      	ldr	r1, [pc, #220]	; (80054b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053dc:	4313      	orrs	r3, r2
 80053de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80053e6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80053ea:	d106      	bne.n	80053fa <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80053ec:	4b32      	ldr	r3, [pc, #200]	; (80054b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053ee:	68db      	ldr	r3, [r3, #12]
 80053f0:	4a31      	ldr	r2, [pc, #196]	; (80054b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80053f6:	60d3      	str	r3, [r2, #12]
 80053f8:	e011      	b.n	800541e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80053fe:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005402:	d10c      	bne.n	800541e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	3304      	adds	r3, #4
 8005408:	2101      	movs	r1, #1
 800540a:	4618      	mov	r0, r3
 800540c:	f000 f8d8 	bl	80055c0 <RCCEx_PLLSAI1_Config>
 8005410:	4603      	mov	r3, r0
 8005412:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005414:	7cfb      	ldrb	r3, [r7, #19]
 8005416:	2b00      	cmp	r3, #0
 8005418:	d001      	beq.n	800541e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800541a:	7cfb      	ldrb	r3, [r7, #19]
 800541c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005426:	2b00      	cmp	r3, #0
 8005428:	d028      	beq.n	800547c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800542a:	4b23      	ldr	r3, [pc, #140]	; (80054b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800542c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005430:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005438:	491f      	ldr	r1, [pc, #124]	; (80054b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800543a:	4313      	orrs	r3, r2
 800543c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005444:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005448:	d106      	bne.n	8005458 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800544a:	4b1b      	ldr	r3, [pc, #108]	; (80054b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800544c:	68db      	ldr	r3, [r3, #12]
 800544e:	4a1a      	ldr	r2, [pc, #104]	; (80054b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005450:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005454:	60d3      	str	r3, [r2, #12]
 8005456:	e011      	b.n	800547c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800545c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005460:	d10c      	bne.n	800547c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	3304      	adds	r3, #4
 8005466:	2101      	movs	r1, #1
 8005468:	4618      	mov	r0, r3
 800546a:	f000 f8a9 	bl	80055c0 <RCCEx_PLLSAI1_Config>
 800546e:	4603      	mov	r3, r0
 8005470:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005472:	7cfb      	ldrb	r3, [r7, #19]
 8005474:	2b00      	cmp	r3, #0
 8005476:	d001      	beq.n	800547c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8005478:	7cfb      	ldrb	r3, [r7, #19]
 800547a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005484:	2b00      	cmp	r3, #0
 8005486:	d02b      	beq.n	80054e0 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005488:	4b0b      	ldr	r3, [pc, #44]	; (80054b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800548a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800548e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005496:	4908      	ldr	r1, [pc, #32]	; (80054b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005498:	4313      	orrs	r3, r2
 800549a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80054a2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80054a6:	d109      	bne.n	80054bc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80054a8:	4b03      	ldr	r3, [pc, #12]	; (80054b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054aa:	68db      	ldr	r3, [r3, #12]
 80054ac:	4a02      	ldr	r2, [pc, #8]	; (80054b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80054b2:	60d3      	str	r3, [r2, #12]
 80054b4:	e014      	b.n	80054e0 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80054b6:	bf00      	nop
 80054b8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80054c0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80054c4:	d10c      	bne.n	80054e0 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	3304      	adds	r3, #4
 80054ca:	2101      	movs	r1, #1
 80054cc:	4618      	mov	r0, r3
 80054ce:	f000 f877 	bl	80055c0 <RCCEx_PLLSAI1_Config>
 80054d2:	4603      	mov	r3, r0
 80054d4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80054d6:	7cfb      	ldrb	r3, [r7, #19]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d001      	beq.n	80054e0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80054dc:	7cfb      	ldrb	r3, [r7, #19]
 80054de:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d02f      	beq.n	800554c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80054ec:	4b2b      	ldr	r3, [pc, #172]	; (800559c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80054ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054f2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80054fa:	4928      	ldr	r1, [pc, #160]	; (800559c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80054fc:	4313      	orrs	r3, r2
 80054fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005506:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800550a:	d10d      	bne.n	8005528 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	3304      	adds	r3, #4
 8005510:	2102      	movs	r1, #2
 8005512:	4618      	mov	r0, r3
 8005514:	f000 f854 	bl	80055c0 <RCCEx_PLLSAI1_Config>
 8005518:	4603      	mov	r3, r0
 800551a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800551c:	7cfb      	ldrb	r3, [r7, #19]
 800551e:	2b00      	cmp	r3, #0
 8005520:	d014      	beq.n	800554c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005522:	7cfb      	ldrb	r3, [r7, #19]
 8005524:	74bb      	strb	r3, [r7, #18]
 8005526:	e011      	b.n	800554c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800552c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005530:	d10c      	bne.n	800554c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	3320      	adds	r3, #32
 8005536:	2102      	movs	r1, #2
 8005538:	4618      	mov	r0, r3
 800553a:	f000 f935 	bl	80057a8 <RCCEx_PLLSAI2_Config>
 800553e:	4603      	mov	r3, r0
 8005540:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005542:	7cfb      	ldrb	r3, [r7, #19]
 8005544:	2b00      	cmp	r3, #0
 8005546:	d001      	beq.n	800554c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005548:	7cfb      	ldrb	r3, [r7, #19]
 800554a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005554:	2b00      	cmp	r3, #0
 8005556:	d00a      	beq.n	800556e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005558:	4b10      	ldr	r3, [pc, #64]	; (800559c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800555a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800555e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005566:	490d      	ldr	r1, [pc, #52]	; (800559c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005568:	4313      	orrs	r3, r2
 800556a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005576:	2b00      	cmp	r3, #0
 8005578:	d00b      	beq.n	8005592 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800557a:	4b08      	ldr	r3, [pc, #32]	; (800559c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800557c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005580:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800558a:	4904      	ldr	r1, [pc, #16]	; (800559c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800558c:	4313      	orrs	r3, r2
 800558e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005592:	7cbb      	ldrb	r3, [r7, #18]
}
 8005594:	4618      	mov	r0, r3
 8005596:	3718      	adds	r7, #24
 8005598:	46bd      	mov	sp, r7
 800559a:	bd80      	pop	{r7, pc}
 800559c:	40021000 	.word	0x40021000

080055a0 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80055a0:	b480      	push	{r7}
 80055a2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80055a4:	4b05      	ldr	r3, [pc, #20]	; (80055bc <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	4a04      	ldr	r2, [pc, #16]	; (80055bc <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80055aa:	f043 0304 	orr.w	r3, r3, #4
 80055ae:	6013      	str	r3, [r2, #0]
}
 80055b0:	bf00      	nop
 80055b2:	46bd      	mov	sp, r7
 80055b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b8:	4770      	bx	lr
 80055ba:	bf00      	nop
 80055bc:	40021000 	.word	0x40021000

080055c0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80055c0:	b580      	push	{r7, lr}
 80055c2:	b084      	sub	sp, #16
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]
 80055c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80055ca:	2300      	movs	r3, #0
 80055cc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80055ce:	4b75      	ldr	r3, [pc, #468]	; (80057a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80055d0:	68db      	ldr	r3, [r3, #12]
 80055d2:	f003 0303 	and.w	r3, r3, #3
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d018      	beq.n	800560c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80055da:	4b72      	ldr	r3, [pc, #456]	; (80057a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80055dc:	68db      	ldr	r3, [r3, #12]
 80055de:	f003 0203 	and.w	r2, r3, #3
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	429a      	cmp	r2, r3
 80055e8:	d10d      	bne.n	8005606 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
       ||
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d009      	beq.n	8005606 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80055f2:	4b6c      	ldr	r3, [pc, #432]	; (80057a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80055f4:	68db      	ldr	r3, [r3, #12]
 80055f6:	091b      	lsrs	r3, r3, #4
 80055f8:	f003 0307 	and.w	r3, r3, #7
 80055fc:	1c5a      	adds	r2, r3, #1
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	685b      	ldr	r3, [r3, #4]
       ||
 8005602:	429a      	cmp	r2, r3
 8005604:	d047      	beq.n	8005696 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005606:	2301      	movs	r3, #1
 8005608:	73fb      	strb	r3, [r7, #15]
 800560a:	e044      	b.n	8005696 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	2b03      	cmp	r3, #3
 8005612:	d018      	beq.n	8005646 <RCCEx_PLLSAI1_Config+0x86>
 8005614:	2b03      	cmp	r3, #3
 8005616:	d825      	bhi.n	8005664 <RCCEx_PLLSAI1_Config+0xa4>
 8005618:	2b01      	cmp	r3, #1
 800561a:	d002      	beq.n	8005622 <RCCEx_PLLSAI1_Config+0x62>
 800561c:	2b02      	cmp	r3, #2
 800561e:	d009      	beq.n	8005634 <RCCEx_PLLSAI1_Config+0x74>
 8005620:	e020      	b.n	8005664 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005622:	4b60      	ldr	r3, [pc, #384]	; (80057a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f003 0302 	and.w	r3, r3, #2
 800562a:	2b00      	cmp	r3, #0
 800562c:	d11d      	bne.n	800566a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800562e:	2301      	movs	r3, #1
 8005630:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005632:	e01a      	b.n	800566a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005634:	4b5b      	ldr	r3, [pc, #364]	; (80057a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800563c:	2b00      	cmp	r3, #0
 800563e:	d116      	bne.n	800566e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005640:	2301      	movs	r3, #1
 8005642:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005644:	e013      	b.n	800566e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005646:	4b57      	ldr	r3, [pc, #348]	; (80057a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800564e:	2b00      	cmp	r3, #0
 8005650:	d10f      	bne.n	8005672 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005652:	4b54      	ldr	r3, [pc, #336]	; (80057a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800565a:	2b00      	cmp	r3, #0
 800565c:	d109      	bne.n	8005672 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800565e:	2301      	movs	r3, #1
 8005660:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005662:	e006      	b.n	8005672 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005664:	2301      	movs	r3, #1
 8005666:	73fb      	strb	r3, [r7, #15]
      break;
 8005668:	e004      	b.n	8005674 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800566a:	bf00      	nop
 800566c:	e002      	b.n	8005674 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800566e:	bf00      	nop
 8005670:	e000      	b.n	8005674 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005672:	bf00      	nop
    }

    if(status == HAL_OK)
 8005674:	7bfb      	ldrb	r3, [r7, #15]
 8005676:	2b00      	cmp	r3, #0
 8005678:	d10d      	bne.n	8005696 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800567a:	4b4a      	ldr	r3, [pc, #296]	; (80057a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800567c:	68db      	ldr	r3, [r3, #12]
 800567e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6819      	ldr	r1, [r3, #0]
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	685b      	ldr	r3, [r3, #4]
 800568a:	3b01      	subs	r3, #1
 800568c:	011b      	lsls	r3, r3, #4
 800568e:	430b      	orrs	r3, r1
 8005690:	4944      	ldr	r1, [pc, #272]	; (80057a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005692:	4313      	orrs	r3, r2
 8005694:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005696:	7bfb      	ldrb	r3, [r7, #15]
 8005698:	2b00      	cmp	r3, #0
 800569a:	d17d      	bne.n	8005798 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800569c:	4b41      	ldr	r3, [pc, #260]	; (80057a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	4a40      	ldr	r2, [pc, #256]	; (80057a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80056a2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80056a6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80056a8:	f7fd f892 	bl	80027d0 <HAL_GetTick>
 80056ac:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80056ae:	e009      	b.n	80056c4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80056b0:	f7fd f88e 	bl	80027d0 <HAL_GetTick>
 80056b4:	4602      	mov	r2, r0
 80056b6:	68bb      	ldr	r3, [r7, #8]
 80056b8:	1ad3      	subs	r3, r2, r3
 80056ba:	2b02      	cmp	r3, #2
 80056bc:	d902      	bls.n	80056c4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80056be:	2303      	movs	r3, #3
 80056c0:	73fb      	strb	r3, [r7, #15]
        break;
 80056c2:	e005      	b.n	80056d0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80056c4:	4b37      	ldr	r3, [pc, #220]	; (80057a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d1ef      	bne.n	80056b0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80056d0:	7bfb      	ldrb	r3, [r7, #15]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d160      	bne.n	8005798 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80056d6:	683b      	ldr	r3, [r7, #0]
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d111      	bne.n	8005700 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80056dc:	4b31      	ldr	r3, [pc, #196]	; (80057a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80056de:	691b      	ldr	r3, [r3, #16]
 80056e0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80056e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80056e8:	687a      	ldr	r2, [r7, #4]
 80056ea:	6892      	ldr	r2, [r2, #8]
 80056ec:	0211      	lsls	r1, r2, #8
 80056ee:	687a      	ldr	r2, [r7, #4]
 80056f0:	68d2      	ldr	r2, [r2, #12]
 80056f2:	0912      	lsrs	r2, r2, #4
 80056f4:	0452      	lsls	r2, r2, #17
 80056f6:	430a      	orrs	r2, r1
 80056f8:	492a      	ldr	r1, [pc, #168]	; (80057a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80056fa:	4313      	orrs	r3, r2
 80056fc:	610b      	str	r3, [r1, #16]
 80056fe:	e027      	b.n	8005750 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005700:	683b      	ldr	r3, [r7, #0]
 8005702:	2b01      	cmp	r3, #1
 8005704:	d112      	bne.n	800572c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005706:	4b27      	ldr	r3, [pc, #156]	; (80057a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005708:	691b      	ldr	r3, [r3, #16]
 800570a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800570e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005712:	687a      	ldr	r2, [r7, #4]
 8005714:	6892      	ldr	r2, [r2, #8]
 8005716:	0211      	lsls	r1, r2, #8
 8005718:	687a      	ldr	r2, [r7, #4]
 800571a:	6912      	ldr	r2, [r2, #16]
 800571c:	0852      	lsrs	r2, r2, #1
 800571e:	3a01      	subs	r2, #1
 8005720:	0552      	lsls	r2, r2, #21
 8005722:	430a      	orrs	r2, r1
 8005724:	491f      	ldr	r1, [pc, #124]	; (80057a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005726:	4313      	orrs	r3, r2
 8005728:	610b      	str	r3, [r1, #16]
 800572a:	e011      	b.n	8005750 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800572c:	4b1d      	ldr	r3, [pc, #116]	; (80057a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800572e:	691b      	ldr	r3, [r3, #16]
 8005730:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005734:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005738:	687a      	ldr	r2, [r7, #4]
 800573a:	6892      	ldr	r2, [r2, #8]
 800573c:	0211      	lsls	r1, r2, #8
 800573e:	687a      	ldr	r2, [r7, #4]
 8005740:	6952      	ldr	r2, [r2, #20]
 8005742:	0852      	lsrs	r2, r2, #1
 8005744:	3a01      	subs	r2, #1
 8005746:	0652      	lsls	r2, r2, #25
 8005748:	430a      	orrs	r2, r1
 800574a:	4916      	ldr	r1, [pc, #88]	; (80057a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800574c:	4313      	orrs	r3, r2
 800574e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005750:	4b14      	ldr	r3, [pc, #80]	; (80057a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	4a13      	ldr	r2, [pc, #76]	; (80057a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005756:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800575a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800575c:	f7fd f838 	bl	80027d0 <HAL_GetTick>
 8005760:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005762:	e009      	b.n	8005778 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005764:	f7fd f834 	bl	80027d0 <HAL_GetTick>
 8005768:	4602      	mov	r2, r0
 800576a:	68bb      	ldr	r3, [r7, #8]
 800576c:	1ad3      	subs	r3, r2, r3
 800576e:	2b02      	cmp	r3, #2
 8005770:	d902      	bls.n	8005778 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8005772:	2303      	movs	r3, #3
 8005774:	73fb      	strb	r3, [r7, #15]
          break;
 8005776:	e005      	b.n	8005784 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005778:	4b0a      	ldr	r3, [pc, #40]	; (80057a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005780:	2b00      	cmp	r3, #0
 8005782:	d0ef      	beq.n	8005764 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8005784:	7bfb      	ldrb	r3, [r7, #15]
 8005786:	2b00      	cmp	r3, #0
 8005788:	d106      	bne.n	8005798 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800578a:	4b06      	ldr	r3, [pc, #24]	; (80057a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800578c:	691a      	ldr	r2, [r3, #16]
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	699b      	ldr	r3, [r3, #24]
 8005792:	4904      	ldr	r1, [pc, #16]	; (80057a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005794:	4313      	orrs	r3, r2
 8005796:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005798:	7bfb      	ldrb	r3, [r7, #15]
}
 800579a:	4618      	mov	r0, r3
 800579c:	3710      	adds	r7, #16
 800579e:	46bd      	mov	sp, r7
 80057a0:	bd80      	pop	{r7, pc}
 80057a2:	bf00      	nop
 80057a4:	40021000 	.word	0x40021000

080057a8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80057a8:	b580      	push	{r7, lr}
 80057aa:	b084      	sub	sp, #16
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
 80057b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80057b2:	2300      	movs	r3, #0
 80057b4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80057b6:	4b6a      	ldr	r3, [pc, #424]	; (8005960 <RCCEx_PLLSAI2_Config+0x1b8>)
 80057b8:	68db      	ldr	r3, [r3, #12]
 80057ba:	f003 0303 	and.w	r3, r3, #3
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d018      	beq.n	80057f4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80057c2:	4b67      	ldr	r3, [pc, #412]	; (8005960 <RCCEx_PLLSAI2_Config+0x1b8>)
 80057c4:	68db      	ldr	r3, [r3, #12]
 80057c6:	f003 0203 	and.w	r2, r3, #3
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	429a      	cmp	r2, r3
 80057d0:	d10d      	bne.n	80057ee <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
       ||
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d009      	beq.n	80057ee <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80057da:	4b61      	ldr	r3, [pc, #388]	; (8005960 <RCCEx_PLLSAI2_Config+0x1b8>)
 80057dc:	68db      	ldr	r3, [r3, #12]
 80057de:	091b      	lsrs	r3, r3, #4
 80057e0:	f003 0307 	and.w	r3, r3, #7
 80057e4:	1c5a      	adds	r2, r3, #1
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	685b      	ldr	r3, [r3, #4]
       ||
 80057ea:	429a      	cmp	r2, r3
 80057ec:	d047      	beq.n	800587e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80057ee:	2301      	movs	r3, #1
 80057f0:	73fb      	strb	r3, [r7, #15]
 80057f2:	e044      	b.n	800587e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	2b03      	cmp	r3, #3
 80057fa:	d018      	beq.n	800582e <RCCEx_PLLSAI2_Config+0x86>
 80057fc:	2b03      	cmp	r3, #3
 80057fe:	d825      	bhi.n	800584c <RCCEx_PLLSAI2_Config+0xa4>
 8005800:	2b01      	cmp	r3, #1
 8005802:	d002      	beq.n	800580a <RCCEx_PLLSAI2_Config+0x62>
 8005804:	2b02      	cmp	r3, #2
 8005806:	d009      	beq.n	800581c <RCCEx_PLLSAI2_Config+0x74>
 8005808:	e020      	b.n	800584c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800580a:	4b55      	ldr	r3, [pc, #340]	; (8005960 <RCCEx_PLLSAI2_Config+0x1b8>)
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f003 0302 	and.w	r3, r3, #2
 8005812:	2b00      	cmp	r3, #0
 8005814:	d11d      	bne.n	8005852 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8005816:	2301      	movs	r3, #1
 8005818:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800581a:	e01a      	b.n	8005852 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800581c:	4b50      	ldr	r3, [pc, #320]	; (8005960 <RCCEx_PLLSAI2_Config+0x1b8>)
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005824:	2b00      	cmp	r3, #0
 8005826:	d116      	bne.n	8005856 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8005828:	2301      	movs	r3, #1
 800582a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800582c:	e013      	b.n	8005856 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800582e:	4b4c      	ldr	r3, [pc, #304]	; (8005960 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005836:	2b00      	cmp	r3, #0
 8005838:	d10f      	bne.n	800585a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800583a:	4b49      	ldr	r3, [pc, #292]	; (8005960 <RCCEx_PLLSAI2_Config+0x1b8>)
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005842:	2b00      	cmp	r3, #0
 8005844:	d109      	bne.n	800585a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8005846:	2301      	movs	r3, #1
 8005848:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800584a:	e006      	b.n	800585a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800584c:	2301      	movs	r3, #1
 800584e:	73fb      	strb	r3, [r7, #15]
      break;
 8005850:	e004      	b.n	800585c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005852:	bf00      	nop
 8005854:	e002      	b.n	800585c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005856:	bf00      	nop
 8005858:	e000      	b.n	800585c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800585a:	bf00      	nop
    }

    if(status == HAL_OK)
 800585c:	7bfb      	ldrb	r3, [r7, #15]
 800585e:	2b00      	cmp	r3, #0
 8005860:	d10d      	bne.n	800587e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005862:	4b3f      	ldr	r3, [pc, #252]	; (8005960 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005864:	68db      	ldr	r3, [r3, #12]
 8005866:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	6819      	ldr	r1, [r3, #0]
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	685b      	ldr	r3, [r3, #4]
 8005872:	3b01      	subs	r3, #1
 8005874:	011b      	lsls	r3, r3, #4
 8005876:	430b      	orrs	r3, r1
 8005878:	4939      	ldr	r1, [pc, #228]	; (8005960 <RCCEx_PLLSAI2_Config+0x1b8>)
 800587a:	4313      	orrs	r3, r2
 800587c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800587e:	7bfb      	ldrb	r3, [r7, #15]
 8005880:	2b00      	cmp	r3, #0
 8005882:	d167      	bne.n	8005954 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005884:	4b36      	ldr	r3, [pc, #216]	; (8005960 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	4a35      	ldr	r2, [pc, #212]	; (8005960 <RCCEx_PLLSAI2_Config+0x1b8>)
 800588a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800588e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005890:	f7fc ff9e 	bl	80027d0 <HAL_GetTick>
 8005894:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005896:	e009      	b.n	80058ac <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005898:	f7fc ff9a 	bl	80027d0 <HAL_GetTick>
 800589c:	4602      	mov	r2, r0
 800589e:	68bb      	ldr	r3, [r7, #8]
 80058a0:	1ad3      	subs	r3, r2, r3
 80058a2:	2b02      	cmp	r3, #2
 80058a4:	d902      	bls.n	80058ac <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80058a6:	2303      	movs	r3, #3
 80058a8:	73fb      	strb	r3, [r7, #15]
        break;
 80058aa:	e005      	b.n	80058b8 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80058ac:	4b2c      	ldr	r3, [pc, #176]	; (8005960 <RCCEx_PLLSAI2_Config+0x1b8>)
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d1ef      	bne.n	8005898 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80058b8:	7bfb      	ldrb	r3, [r7, #15]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d14a      	bne.n	8005954 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d111      	bne.n	80058e8 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80058c4:	4b26      	ldr	r3, [pc, #152]	; (8005960 <RCCEx_PLLSAI2_Config+0x1b8>)
 80058c6:	695b      	ldr	r3, [r3, #20]
 80058c8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80058cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80058d0:	687a      	ldr	r2, [r7, #4]
 80058d2:	6892      	ldr	r2, [r2, #8]
 80058d4:	0211      	lsls	r1, r2, #8
 80058d6:	687a      	ldr	r2, [r7, #4]
 80058d8:	68d2      	ldr	r2, [r2, #12]
 80058da:	0912      	lsrs	r2, r2, #4
 80058dc:	0452      	lsls	r2, r2, #17
 80058de:	430a      	orrs	r2, r1
 80058e0:	491f      	ldr	r1, [pc, #124]	; (8005960 <RCCEx_PLLSAI2_Config+0x1b8>)
 80058e2:	4313      	orrs	r3, r2
 80058e4:	614b      	str	r3, [r1, #20]
 80058e6:	e011      	b.n	800590c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80058e8:	4b1d      	ldr	r3, [pc, #116]	; (8005960 <RCCEx_PLLSAI2_Config+0x1b8>)
 80058ea:	695b      	ldr	r3, [r3, #20]
 80058ec:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80058f0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80058f4:	687a      	ldr	r2, [r7, #4]
 80058f6:	6892      	ldr	r2, [r2, #8]
 80058f8:	0211      	lsls	r1, r2, #8
 80058fa:	687a      	ldr	r2, [r7, #4]
 80058fc:	6912      	ldr	r2, [r2, #16]
 80058fe:	0852      	lsrs	r2, r2, #1
 8005900:	3a01      	subs	r2, #1
 8005902:	0652      	lsls	r2, r2, #25
 8005904:	430a      	orrs	r2, r1
 8005906:	4916      	ldr	r1, [pc, #88]	; (8005960 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005908:	4313      	orrs	r3, r2
 800590a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800590c:	4b14      	ldr	r3, [pc, #80]	; (8005960 <RCCEx_PLLSAI2_Config+0x1b8>)
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	4a13      	ldr	r2, [pc, #76]	; (8005960 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005912:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005916:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005918:	f7fc ff5a 	bl	80027d0 <HAL_GetTick>
 800591c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800591e:	e009      	b.n	8005934 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005920:	f7fc ff56 	bl	80027d0 <HAL_GetTick>
 8005924:	4602      	mov	r2, r0
 8005926:	68bb      	ldr	r3, [r7, #8]
 8005928:	1ad3      	subs	r3, r2, r3
 800592a:	2b02      	cmp	r3, #2
 800592c:	d902      	bls.n	8005934 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800592e:	2303      	movs	r3, #3
 8005930:	73fb      	strb	r3, [r7, #15]
          break;
 8005932:	e005      	b.n	8005940 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005934:	4b0a      	ldr	r3, [pc, #40]	; (8005960 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800593c:	2b00      	cmp	r3, #0
 800593e:	d0ef      	beq.n	8005920 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8005940:	7bfb      	ldrb	r3, [r7, #15]
 8005942:	2b00      	cmp	r3, #0
 8005944:	d106      	bne.n	8005954 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005946:	4b06      	ldr	r3, [pc, #24]	; (8005960 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005948:	695a      	ldr	r2, [r3, #20]
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	695b      	ldr	r3, [r3, #20]
 800594e:	4904      	ldr	r1, [pc, #16]	; (8005960 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005950:	4313      	orrs	r3, r2
 8005952:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005954:	7bfb      	ldrb	r3, [r7, #15]
}
 8005956:	4618      	mov	r0, r3
 8005958:	3710      	adds	r7, #16
 800595a:	46bd      	mov	sp, r7
 800595c:	bd80      	pop	{r7, pc}
 800595e:	bf00      	nop
 8005960:	40021000 	.word	0x40021000

08005964 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005964:	b580      	push	{r7, lr}
 8005966:	b084      	sub	sp, #16
 8005968:	af00      	add	r7, sp, #0
 800596a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800596c:	2301      	movs	r3, #1
 800596e:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2b00      	cmp	r3, #0
 8005974:	d06c      	beq.n	8005a50 <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800597c:	b2db      	uxtb	r3, r3
 800597e:	2b00      	cmp	r3, #0
 8005980:	d106      	bne.n	8005990 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	2200      	movs	r2, #0
 8005986:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800598a:	6878      	ldr	r0, [r7, #4]
 800598c:	f7fc fb1c 	bl	8001fc8 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2202      	movs	r2, #2
 8005994:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	22ca      	movs	r2, #202	; 0xca
 800599e:	625a      	str	r2, [r3, #36]	; 0x24
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	2253      	movs	r2, #83	; 0x53
 80059a6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80059a8:	6878      	ldr	r0, [r7, #4]
 80059aa:	f000 fa49 	bl	8005e40 <RTC_EnterInitMode>
 80059ae:	4603      	mov	r3, r0
 80059b0:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 80059b2:	7bfb      	ldrb	r3, [r7, #15]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d14b      	bne.n	8005a50 <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	689b      	ldr	r3, [r3, #8]
 80059be:	687a      	ldr	r2, [r7, #4]
 80059c0:	6812      	ldr	r2, [r2, #0]
 80059c2:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80059c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80059ca:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	6899      	ldr	r1, [r3, #8]
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	685a      	ldr	r2, [r3, #4]
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	691b      	ldr	r3, [r3, #16]
 80059da:	431a      	orrs	r2, r3
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	699b      	ldr	r3, [r3, #24]
 80059e0:	431a      	orrs	r2, r3
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	430a      	orrs	r2, r1
 80059e8:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	687a      	ldr	r2, [r7, #4]
 80059f0:	68d2      	ldr	r2, [r2, #12]
 80059f2:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	6919      	ldr	r1, [r3, #16]
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	689b      	ldr	r3, [r3, #8]
 80059fe:	041a      	lsls	r2, r3, #16
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	430a      	orrs	r2, r1
 8005a06:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8005a08:	6878      	ldr	r0, [r7, #4]
 8005a0a:	f000 fa4d 	bl	8005ea8 <RTC_ExitInitMode>
 8005a0e:	4603      	mov	r3, r0
 8005a10:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8005a12:	7bfb      	ldrb	r3, [r7, #15]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d11b      	bne.n	8005a50 <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f022 0203 	bic.w	r2, r2, #3
 8005a26:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	69da      	ldr	r2, [r3, #28]
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	695b      	ldr	r3, [r3, #20]
 8005a36:	431a      	orrs	r2, r3
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	430a      	orrs	r2, r1
 8005a3e:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	22ff      	movs	r2, #255	; 0xff
 8005a46:	625a      	str	r2, [r3, #36]	; 0x24

          hrtc->State = HAL_RTC_STATE_READY;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2201      	movs	r2, #1
 8005a4c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 8005a50:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a52:	4618      	mov	r0, r3
 8005a54:	3710      	adds	r7, #16
 8005a56:	46bd      	mov	sp, r7
 8005a58:	bd80      	pop	{r7, pc}

08005a5a <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005a5a:	b590      	push	{r4, r7, lr}
 8005a5c:	b087      	sub	sp, #28
 8005a5e:	af00      	add	r7, sp, #0
 8005a60:	60f8      	str	r0, [r7, #12]
 8005a62:	60b9      	str	r1, [r7, #8]
 8005a64:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005a6c:	2b01      	cmp	r3, #1
 8005a6e:	d101      	bne.n	8005a74 <HAL_RTC_SetTime+0x1a>
 8005a70:	2302      	movs	r3, #2
 8005a72:	e08b      	b.n	8005b8c <HAL_RTC_SetTime+0x132>
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	2201      	movs	r2, #1
 8005a78:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	2202      	movs	r2, #2
 8005a80:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	22ca      	movs	r2, #202	; 0xca
 8005a8a:	625a      	str	r2, [r3, #36]	; 0x24
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	2253      	movs	r2, #83	; 0x53
 8005a92:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005a94:	68f8      	ldr	r0, [r7, #12]
 8005a96:	f000 f9d3 	bl	8005e40 <RTC_EnterInitMode>
 8005a9a:	4603      	mov	r3, r0
 8005a9c:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8005a9e:	7cfb      	ldrb	r3, [r7, #19]
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d163      	bne.n	8005b6c <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d126      	bne.n	8005af8 <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	689b      	ldr	r3, [r3, #8]
 8005ab0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d102      	bne.n	8005abe <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8005ab8:	68bb      	ldr	r3, [r7, #8]
 8005aba:	2200      	movs	r2, #0
 8005abc:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005abe:	68bb      	ldr	r3, [r7, #8]
 8005ac0:	781b      	ldrb	r3, [r3, #0]
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	f000 fa2e 	bl	8005f24 <RTC_ByteToBcd2>
 8005ac8:	4603      	mov	r3, r0
 8005aca:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005acc:	68bb      	ldr	r3, [r7, #8]
 8005ace:	785b      	ldrb	r3, [r3, #1]
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	f000 fa27 	bl	8005f24 <RTC_ByteToBcd2>
 8005ad6:	4603      	mov	r3, r0
 8005ad8:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005ada:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8005adc:	68bb      	ldr	r3, [r7, #8]
 8005ade:	789b      	ldrb	r3, [r3, #2]
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	f000 fa1f 	bl	8005f24 <RTC_ByteToBcd2>
 8005ae6:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005ae8:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8005aec:	68bb      	ldr	r3, [r7, #8]
 8005aee:	78db      	ldrb	r3, [r3, #3]
 8005af0:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005af2:	4313      	orrs	r3, r2
 8005af4:	617b      	str	r3, [r7, #20]
 8005af6:	e018      	b.n	8005b2a <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	689b      	ldr	r3, [r3, #8]
 8005afe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d102      	bne.n	8005b0c <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8005b06:	68bb      	ldr	r3, [r7, #8]
 8005b08:	2200      	movs	r2, #0
 8005b0a:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005b0c:	68bb      	ldr	r3, [r7, #8]
 8005b0e:	781b      	ldrb	r3, [r3, #0]
 8005b10:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005b12:	68bb      	ldr	r3, [r7, #8]
 8005b14:	785b      	ldrb	r3, [r3, #1]
 8005b16:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005b18:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8005b1a:	68ba      	ldr	r2, [r7, #8]
 8005b1c:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005b1e:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8005b20:	68bb      	ldr	r3, [r7, #8]
 8005b22:	78db      	ldrb	r3, [r3, #3]
 8005b24:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005b26:	4313      	orrs	r3, r2
 8005b28:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	681a      	ldr	r2, [r3, #0]
 8005b2e:	697b      	ldr	r3, [r7, #20]
 8005b30:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8005b34:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005b38:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	689a      	ldr	r2, [r3, #8]
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005b48:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	6899      	ldr	r1, [r3, #8]
 8005b50:	68bb      	ldr	r3, [r7, #8]
 8005b52:	68da      	ldr	r2, [r3, #12]
 8005b54:	68bb      	ldr	r3, [r7, #8]
 8005b56:	691b      	ldr	r3, [r3, #16]
 8005b58:	431a      	orrs	r2, r3
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	430a      	orrs	r2, r1
 8005b60:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005b62:	68f8      	ldr	r0, [r7, #12]
 8005b64:	f000 f9a0 	bl	8005ea8 <RTC_ExitInitMode>
 8005b68:	4603      	mov	r3, r0
 8005b6a:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	22ff      	movs	r2, #255	; 0xff
 8005b72:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8005b74:	7cfb      	ldrb	r3, [r7, #19]
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d103      	bne.n	8005b82 <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	2201      	movs	r2, #1
 8005b7e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	2200      	movs	r2, #0
 8005b86:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8005b8a:	7cfb      	ldrb	r3, [r7, #19]
}
 8005b8c:	4618      	mov	r0, r3
 8005b8e:	371c      	adds	r7, #28
 8005b90:	46bd      	mov	sp, r7
 8005b92:	bd90      	pop	{r4, r7, pc}

08005b94 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005b94:	b580      	push	{r7, lr}
 8005b96:	b086      	sub	sp, #24
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	60f8      	str	r0, [r7, #12]
 8005b9c:	60b9      	str	r1, [r7, #8]
 8005b9e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005ba6:	68bb      	ldr	r3, [r7, #8]
 8005ba8:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	691b      	ldr	r3, [r3, #16]
 8005bb0:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8005bb4:	68bb      	ldr	r3, [r7, #8]
 8005bb6:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8005bc2:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005bc6:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8005bc8:	697b      	ldr	r3, [r7, #20]
 8005bca:	0c1b      	lsrs	r3, r3, #16
 8005bcc:	b2db      	uxtb	r3, r3
 8005bce:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005bd2:	b2da      	uxtb	r2, r3
 8005bd4:	68bb      	ldr	r3, [r7, #8]
 8005bd6:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8005bd8:	697b      	ldr	r3, [r7, #20]
 8005bda:	0a1b      	lsrs	r3, r3, #8
 8005bdc:	b2db      	uxtb	r3, r3
 8005bde:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005be2:	b2da      	uxtb	r2, r3
 8005be4:	68bb      	ldr	r3, [r7, #8]
 8005be6:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8005be8:	697b      	ldr	r3, [r7, #20]
 8005bea:	b2db      	uxtb	r3, r3
 8005bec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005bf0:	b2da      	uxtb	r2, r3
 8005bf2:	68bb      	ldr	r3, [r7, #8]
 8005bf4:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8005bf6:	697b      	ldr	r3, [r7, #20]
 8005bf8:	0d9b      	lsrs	r3, r3, #22
 8005bfa:	b2db      	uxtb	r3, r3
 8005bfc:	f003 0301 	and.w	r3, r3, #1
 8005c00:	b2da      	uxtb	r2, r3
 8005c02:	68bb      	ldr	r3, [r7, #8]
 8005c04:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d11a      	bne.n	8005c42 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8005c0c:	68bb      	ldr	r3, [r7, #8]
 8005c0e:	781b      	ldrb	r3, [r3, #0]
 8005c10:	4618      	mov	r0, r3
 8005c12:	f000 f9a7 	bl	8005f64 <RTC_Bcd2ToByte>
 8005c16:	4603      	mov	r3, r0
 8005c18:	461a      	mov	r2, r3
 8005c1a:	68bb      	ldr	r3, [r7, #8]
 8005c1c:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8005c1e:	68bb      	ldr	r3, [r7, #8]
 8005c20:	785b      	ldrb	r3, [r3, #1]
 8005c22:	4618      	mov	r0, r3
 8005c24:	f000 f99e 	bl	8005f64 <RTC_Bcd2ToByte>
 8005c28:	4603      	mov	r3, r0
 8005c2a:	461a      	mov	r2, r3
 8005c2c:	68bb      	ldr	r3, [r7, #8]
 8005c2e:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8005c30:	68bb      	ldr	r3, [r7, #8]
 8005c32:	789b      	ldrb	r3, [r3, #2]
 8005c34:	4618      	mov	r0, r3
 8005c36:	f000 f995 	bl	8005f64 <RTC_Bcd2ToByte>
 8005c3a:	4603      	mov	r3, r0
 8005c3c:	461a      	mov	r2, r3
 8005c3e:	68bb      	ldr	r3, [r7, #8]
 8005c40:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8005c42:	2300      	movs	r3, #0
}
 8005c44:	4618      	mov	r0, r3
 8005c46:	3718      	adds	r7, #24
 8005c48:	46bd      	mov	sp, r7
 8005c4a:	bd80      	pop	{r7, pc}

08005c4c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005c4c:	b590      	push	{r4, r7, lr}
 8005c4e:	b087      	sub	sp, #28
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	60f8      	str	r0, [r7, #12]
 8005c54:	60b9      	str	r1, [r7, #8]
 8005c56:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005c5e:	2b01      	cmp	r3, #1
 8005c60:	d101      	bne.n	8005c66 <HAL_RTC_SetDate+0x1a>
 8005c62:	2302      	movs	r3, #2
 8005c64:	e075      	b.n	8005d52 <HAL_RTC_SetDate+0x106>
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	2201      	movs	r2, #1
 8005c6a:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	2202      	movs	r2, #2
 8005c72:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d10e      	bne.n	8005c9a <HAL_RTC_SetDate+0x4e>
 8005c7c:	68bb      	ldr	r3, [r7, #8]
 8005c7e:	785b      	ldrb	r3, [r3, #1]
 8005c80:	f003 0310 	and.w	r3, r3, #16
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d008      	beq.n	8005c9a <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8005c88:	68bb      	ldr	r3, [r7, #8]
 8005c8a:	785b      	ldrb	r3, [r3, #1]
 8005c8c:	f023 0310 	bic.w	r3, r3, #16
 8005c90:	b2db      	uxtb	r3, r3
 8005c92:	330a      	adds	r3, #10
 8005c94:	b2da      	uxtb	r2, r3
 8005c96:	68bb      	ldr	r3, [r7, #8]
 8005c98:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d11c      	bne.n	8005cda <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8005ca0:	68bb      	ldr	r3, [r7, #8]
 8005ca2:	78db      	ldrb	r3, [r3, #3]
 8005ca4:	4618      	mov	r0, r3
 8005ca6:	f000 f93d 	bl	8005f24 <RTC_ByteToBcd2>
 8005caa:	4603      	mov	r3, r0
 8005cac:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005cae:	68bb      	ldr	r3, [r7, #8]
 8005cb0:	785b      	ldrb	r3, [r3, #1]
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	f000 f936 	bl	8005f24 <RTC_ByteToBcd2>
 8005cb8:	4603      	mov	r3, r0
 8005cba:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8005cbc:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8005cbe:	68bb      	ldr	r3, [r7, #8]
 8005cc0:	789b      	ldrb	r3, [r3, #2]
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	f000 f92e 	bl	8005f24 <RTC_ByteToBcd2>
 8005cc8:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005cca:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8005cce:	68bb      	ldr	r3, [r7, #8]
 8005cd0:	781b      	ldrb	r3, [r3, #0]
 8005cd2:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8005cd4:	4313      	orrs	r3, r2
 8005cd6:	617b      	str	r3, [r7, #20]
 8005cd8:	e00e      	b.n	8005cf8 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8005cda:	68bb      	ldr	r3, [r7, #8]
 8005cdc:	78db      	ldrb	r3, [r3, #3]
 8005cde:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8005ce0:	68bb      	ldr	r3, [r7, #8]
 8005ce2:	785b      	ldrb	r3, [r3, #1]
 8005ce4:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8005ce6:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8005ce8:	68ba      	ldr	r2, [r7, #8]
 8005cea:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8005cec:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8005cee:	68bb      	ldr	r3, [r7, #8]
 8005cf0:	781b      	ldrb	r3, [r3, #0]
 8005cf2:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8005cf4:	4313      	orrs	r3, r2
 8005cf6:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	22ca      	movs	r2, #202	; 0xca
 8005cfe:	625a      	str	r2, [r3, #36]	; 0x24
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	2253      	movs	r2, #83	; 0x53
 8005d06:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005d08:	68f8      	ldr	r0, [r7, #12]
 8005d0a:	f000 f899 	bl	8005e40 <RTC_EnterInitMode>
 8005d0e:	4603      	mov	r3, r0
 8005d10:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8005d12:	7cfb      	ldrb	r3, [r7, #19]
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d10c      	bne.n	8005d32 <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	681a      	ldr	r2, [r3, #0]
 8005d1c:	697b      	ldr	r3, [r7, #20]
 8005d1e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005d22:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005d26:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005d28:	68f8      	ldr	r0, [r7, #12]
 8005d2a:	f000 f8bd 	bl	8005ea8 <RTC_ExitInitMode>
 8005d2e:	4603      	mov	r3, r0
 8005d30:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	22ff      	movs	r2, #255	; 0xff
 8005d38:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8005d3a:	7cfb      	ldrb	r3, [r7, #19]
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d103      	bne.n	8005d48 <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	2201      	movs	r2, #1
 8005d44:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	2200      	movs	r2, #0
 8005d4c:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8005d50:	7cfb      	ldrb	r3, [r7, #19]
}
 8005d52:	4618      	mov	r0, r3
 8005d54:	371c      	adds	r7, #28
 8005d56:	46bd      	mov	sp, r7
 8005d58:	bd90      	pop	{r4, r7, pc}

08005d5a <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005d5a:	b580      	push	{r7, lr}
 8005d5c:	b086      	sub	sp, #24
 8005d5e:	af00      	add	r7, sp, #0
 8005d60:	60f8      	str	r0, [r7, #12]
 8005d62:	60b9      	str	r1, [r7, #8]
 8005d64:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	685b      	ldr	r3, [r3, #4]
 8005d6c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005d70:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005d74:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8005d76:	697b      	ldr	r3, [r7, #20]
 8005d78:	0c1b      	lsrs	r3, r3, #16
 8005d7a:	b2da      	uxtb	r2, r3
 8005d7c:	68bb      	ldr	r3, [r7, #8]
 8005d7e:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8005d80:	697b      	ldr	r3, [r7, #20]
 8005d82:	0a1b      	lsrs	r3, r3, #8
 8005d84:	b2db      	uxtb	r3, r3
 8005d86:	f003 031f 	and.w	r3, r3, #31
 8005d8a:	b2da      	uxtb	r2, r3
 8005d8c:	68bb      	ldr	r3, [r7, #8]
 8005d8e:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8005d90:	697b      	ldr	r3, [r7, #20]
 8005d92:	b2db      	uxtb	r3, r3
 8005d94:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005d98:	b2da      	uxtb	r2, r3
 8005d9a:	68bb      	ldr	r3, [r7, #8]
 8005d9c:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8005d9e:	697b      	ldr	r3, [r7, #20]
 8005da0:	0b5b      	lsrs	r3, r3, #13
 8005da2:	b2db      	uxtb	r3, r3
 8005da4:	f003 0307 	and.w	r3, r3, #7
 8005da8:	b2da      	uxtb	r2, r3
 8005daa:	68bb      	ldr	r3, [r7, #8]
 8005dac:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d11a      	bne.n	8005dea <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8005db4:	68bb      	ldr	r3, [r7, #8]
 8005db6:	78db      	ldrb	r3, [r3, #3]
 8005db8:	4618      	mov	r0, r3
 8005dba:	f000 f8d3 	bl	8005f64 <RTC_Bcd2ToByte>
 8005dbe:	4603      	mov	r3, r0
 8005dc0:	461a      	mov	r2, r3
 8005dc2:	68bb      	ldr	r3, [r7, #8]
 8005dc4:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8005dc6:	68bb      	ldr	r3, [r7, #8]
 8005dc8:	785b      	ldrb	r3, [r3, #1]
 8005dca:	4618      	mov	r0, r3
 8005dcc:	f000 f8ca 	bl	8005f64 <RTC_Bcd2ToByte>
 8005dd0:	4603      	mov	r3, r0
 8005dd2:	461a      	mov	r2, r3
 8005dd4:	68bb      	ldr	r3, [r7, #8]
 8005dd6:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8005dd8:	68bb      	ldr	r3, [r7, #8]
 8005dda:	789b      	ldrb	r3, [r3, #2]
 8005ddc:	4618      	mov	r0, r3
 8005dde:	f000 f8c1 	bl	8005f64 <RTC_Bcd2ToByte>
 8005de2:	4603      	mov	r3, r0
 8005de4:	461a      	mov	r2, r3
 8005de6:	68bb      	ldr	r3, [r7, #8]
 8005de8:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8005dea:	2300      	movs	r3, #0
}
 8005dec:	4618      	mov	r0, r3
 8005dee:	3718      	adds	r7, #24
 8005df0:	46bd      	mov	sp, r7
 8005df2:	bd80      	pop	{r7, pc}

08005df4 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005df4:	b580      	push	{r7, lr}
 8005df6:	b084      	sub	sp, #16
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	68da      	ldr	r2, [r3, #12]
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005e0a:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 8005e0c:	f7fc fce0 	bl	80027d0 <HAL_GetTick>
 8005e10:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005e12:	e009      	b.n	8005e28 <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005e14:	f7fc fcdc 	bl	80027d0 <HAL_GetTick>
 8005e18:	4602      	mov	r2, r0
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	1ad3      	subs	r3, r2, r3
 8005e1e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005e22:	d901      	bls.n	8005e28 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8005e24:	2303      	movs	r3, #3
 8005e26:	e007      	b.n	8005e38 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	68db      	ldr	r3, [r3, #12]
 8005e2e:	f003 0320 	and.w	r3, r3, #32
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d0ee      	beq.n	8005e14 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8005e36:	2300      	movs	r3, #0
}
 8005e38:	4618      	mov	r0, r3
 8005e3a:	3710      	adds	r7, #16
 8005e3c:	46bd      	mov	sp, r7
 8005e3e:	bd80      	pop	{r7, pc}

08005e40 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005e40:	b580      	push	{r7, lr}
 8005e42:	b084      	sub	sp, #16
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005e48:	2300      	movs	r3, #0
 8005e4a:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	68db      	ldr	r3, [r3, #12]
 8005e52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d120      	bne.n	8005e9c <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	f04f 32ff 	mov.w	r2, #4294967295
 8005e62:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8005e64:	f7fc fcb4 	bl	80027d0 <HAL_GetTick>
 8005e68:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8005e6a:	e00d      	b.n	8005e88 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8005e6c:	f7fc fcb0 	bl	80027d0 <HAL_GetTick>
 8005e70:	4602      	mov	r2, r0
 8005e72:	68bb      	ldr	r3, [r7, #8]
 8005e74:	1ad3      	subs	r3, r2, r3
 8005e76:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005e7a:	d905      	bls.n	8005e88 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8005e7c:	2303      	movs	r3, #3
 8005e7e:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2203      	movs	r2, #3
 8005e84:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	68db      	ldr	r3, [r3, #12]
 8005e8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d102      	bne.n	8005e9c <RTC_EnterInitMode+0x5c>
 8005e96:	7bfb      	ldrb	r3, [r7, #15]
 8005e98:	2b03      	cmp	r3, #3
 8005e9a:	d1e7      	bne.n	8005e6c <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8005e9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e9e:	4618      	mov	r0, r3
 8005ea0:	3710      	adds	r7, #16
 8005ea2:	46bd      	mov	sp, r7
 8005ea4:	bd80      	pop	{r7, pc}
	...

08005ea8 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005ea8:	b580      	push	{r7, lr}
 8005eaa:	b084      	sub	sp, #16
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005eb0:	2300      	movs	r3, #0
 8005eb2:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8005eb4:	4b1a      	ldr	r3, [pc, #104]	; (8005f20 <RTC_ExitInitMode+0x78>)
 8005eb6:	68db      	ldr	r3, [r3, #12]
 8005eb8:	4a19      	ldr	r2, [pc, #100]	; (8005f20 <RTC_ExitInitMode+0x78>)
 8005eba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005ebe:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8005ec0:	4b17      	ldr	r3, [pc, #92]	; (8005f20 <RTC_ExitInitMode+0x78>)
 8005ec2:	689b      	ldr	r3, [r3, #8]
 8005ec4:	f003 0320 	and.w	r3, r3, #32
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d10c      	bne.n	8005ee6 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005ecc:	6878      	ldr	r0, [r7, #4]
 8005ece:	f7ff ff91 	bl	8005df4 <HAL_RTC_WaitForSynchro>
 8005ed2:	4603      	mov	r3, r0
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d01e      	beq.n	8005f16 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2203      	movs	r2, #3
 8005edc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8005ee0:	2303      	movs	r3, #3
 8005ee2:	73fb      	strb	r3, [r7, #15]
 8005ee4:	e017      	b.n	8005f16 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8005ee6:	4b0e      	ldr	r3, [pc, #56]	; (8005f20 <RTC_ExitInitMode+0x78>)
 8005ee8:	689b      	ldr	r3, [r3, #8]
 8005eea:	4a0d      	ldr	r2, [pc, #52]	; (8005f20 <RTC_ExitInitMode+0x78>)
 8005eec:	f023 0320 	bic.w	r3, r3, #32
 8005ef0:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005ef2:	6878      	ldr	r0, [r7, #4]
 8005ef4:	f7ff ff7e 	bl	8005df4 <HAL_RTC_WaitForSynchro>
 8005ef8:	4603      	mov	r3, r0
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d005      	beq.n	8005f0a <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	2203      	movs	r2, #3
 8005f02:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8005f06:	2303      	movs	r3, #3
 8005f08:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8005f0a:	4b05      	ldr	r3, [pc, #20]	; (8005f20 <RTC_ExitInitMode+0x78>)
 8005f0c:	689b      	ldr	r3, [r3, #8]
 8005f0e:	4a04      	ldr	r2, [pc, #16]	; (8005f20 <RTC_ExitInitMode+0x78>)
 8005f10:	f043 0320 	orr.w	r3, r3, #32
 8005f14:	6093      	str	r3, [r2, #8]
  }

  return status;
 8005f16:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f18:	4618      	mov	r0, r3
 8005f1a:	3710      	adds	r7, #16
 8005f1c:	46bd      	mov	sp, r7
 8005f1e:	bd80      	pop	{r7, pc}
 8005f20:	40002800 	.word	0x40002800

08005f24 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8005f24:	b480      	push	{r7}
 8005f26:	b085      	sub	sp, #20
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	4603      	mov	r3, r0
 8005f2c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8005f2e:	2300      	movs	r3, #0
 8005f30:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 8005f32:	79fb      	ldrb	r3, [r7, #7]
 8005f34:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 8005f36:	e005      	b.n	8005f44 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	3301      	adds	r3, #1
 8005f3c:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 8005f3e:	7afb      	ldrb	r3, [r7, #11]
 8005f40:	3b0a      	subs	r3, #10
 8005f42:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 8005f44:	7afb      	ldrb	r3, [r7, #11]
 8005f46:	2b09      	cmp	r3, #9
 8005f48:	d8f6      	bhi.n	8005f38 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	b2db      	uxtb	r3, r3
 8005f4e:	011b      	lsls	r3, r3, #4
 8005f50:	b2da      	uxtb	r2, r3
 8005f52:	7afb      	ldrb	r3, [r7, #11]
 8005f54:	4313      	orrs	r3, r2
 8005f56:	b2db      	uxtb	r3, r3
}
 8005f58:	4618      	mov	r0, r3
 8005f5a:	3714      	adds	r7, #20
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f62:	4770      	bx	lr

08005f64 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8005f64:	b480      	push	{r7}
 8005f66:	b085      	sub	sp, #20
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	4603      	mov	r3, r0
 8005f6c:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 8005f6e:	79fb      	ldrb	r3, [r7, #7]
 8005f70:	091b      	lsrs	r3, r3, #4
 8005f72:	b2db      	uxtb	r3, r3
 8005f74:	461a      	mov	r2, r3
 8005f76:	0092      	lsls	r2, r2, #2
 8005f78:	4413      	add	r3, r2
 8005f7a:	005b      	lsls	r3, r3, #1
 8005f7c:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 8005f7e:	79fb      	ldrb	r3, [r7, #7]
 8005f80:	f003 030f 	and.w	r3, r3, #15
 8005f84:	b2da      	uxtb	r2, r3
 8005f86:	7bfb      	ldrb	r3, [r7, #15]
 8005f88:	4413      	add	r3, r2
 8005f8a:	b2db      	uxtb	r3, r3
}
 8005f8c:	4618      	mov	r0, r3
 8005f8e:	3714      	adds	r7, #20
 8005f90:	46bd      	mov	sp, r7
 8005f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f96:	4770      	bx	lr

08005f98 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005f98:	b580      	push	{r7, lr}
 8005f9a:	b084      	sub	sp, #16
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d101      	bne.n	8005faa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005fa6:	2301      	movs	r3, #1
 8005fa8:	e095      	b.n	80060d6 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d108      	bne.n	8005fc4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	685b      	ldr	r3, [r3, #4]
 8005fb6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005fba:	d009      	beq.n	8005fd0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2200      	movs	r2, #0
 8005fc0:	61da      	str	r2, [r3, #28]
 8005fc2:	e005      	b.n	8005fd0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2200      	movs	r2, #0
 8005fc8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	2200      	movs	r2, #0
 8005fce:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2200      	movs	r2, #0
 8005fd4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005fdc:	b2db      	uxtb	r3, r3
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d106      	bne.n	8005ff0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005fea:	6878      	ldr	r0, [r7, #4]
 8005fec:	f7fc f81e 	bl	800202c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2202      	movs	r2, #2
 8005ff4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	681a      	ldr	r2, [r3, #0]
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006006:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	68db      	ldr	r3, [r3, #12]
 800600c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006010:	d902      	bls.n	8006018 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006012:	2300      	movs	r3, #0
 8006014:	60fb      	str	r3, [r7, #12]
 8006016:	e002      	b.n	800601e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006018:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800601c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	68db      	ldr	r3, [r3, #12]
 8006022:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8006026:	d007      	beq.n	8006038 <HAL_SPI_Init+0xa0>
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	68db      	ldr	r3, [r3, #12]
 800602c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006030:	d002      	beq.n	8006038 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	2200      	movs	r2, #0
 8006036:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	685b      	ldr	r3, [r3, #4]
 800603c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	689b      	ldr	r3, [r3, #8]
 8006044:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006048:	431a      	orrs	r2, r3
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	691b      	ldr	r3, [r3, #16]
 800604e:	f003 0302 	and.w	r3, r3, #2
 8006052:	431a      	orrs	r2, r3
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	695b      	ldr	r3, [r3, #20]
 8006058:	f003 0301 	and.w	r3, r3, #1
 800605c:	431a      	orrs	r2, r3
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	699b      	ldr	r3, [r3, #24]
 8006062:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006066:	431a      	orrs	r2, r3
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	69db      	ldr	r3, [r3, #28]
 800606c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006070:	431a      	orrs	r2, r3
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	6a1b      	ldr	r3, [r3, #32]
 8006076:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800607a:	ea42 0103 	orr.w	r1, r2, r3
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006082:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	430a      	orrs	r2, r1
 800608c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	699b      	ldr	r3, [r3, #24]
 8006092:	0c1b      	lsrs	r3, r3, #16
 8006094:	f003 0204 	and.w	r2, r3, #4
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800609c:	f003 0310 	and.w	r3, r3, #16
 80060a0:	431a      	orrs	r2, r3
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060a6:	f003 0308 	and.w	r3, r3, #8
 80060aa:	431a      	orrs	r2, r3
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	68db      	ldr	r3, [r3, #12]
 80060b0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80060b4:	ea42 0103 	orr.w	r1, r2, r3
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	430a      	orrs	r2, r1
 80060c4:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	2200      	movs	r2, #0
 80060ca:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	2201      	movs	r2, #1
 80060d0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80060d4:	2300      	movs	r3, #0
}
 80060d6:	4618      	mov	r0, r3
 80060d8:	3710      	adds	r7, #16
 80060da:	46bd      	mov	sp, r7
 80060dc:	bd80      	pop	{r7, pc}

080060de <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 80060de:	b580      	push	{r7, lr}
 80060e0:	b082      	sub	sp, #8
 80060e2:	af00      	add	r7, sp, #0
 80060e4:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d101      	bne.n	80060f0 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 80060ec:	2301      	movs	r3, #1
 80060ee:	e01a      	b.n	8006126 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	2202      	movs	r2, #2
 80060f4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	681a      	ldr	r2, [r3, #0]
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006106:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8006108:	6878      	ldr	r0, [r7, #4]
 800610a:	f7fb ffdb 	bl	80020c4 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	2200      	movs	r2, #0
 8006112:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_RESET;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	2200      	movs	r2, #0
 8006118:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	2200      	movs	r2, #0
 8006120:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  return HAL_OK;
 8006124:	2300      	movs	r3, #0
}
 8006126:	4618      	mov	r0, r3
 8006128:	3708      	adds	r7, #8
 800612a:	46bd      	mov	sp, r7
 800612c:	bd80      	pop	{r7, pc}

0800612e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800612e:	b580      	push	{r7, lr}
 8006130:	b088      	sub	sp, #32
 8006132:	af02      	add	r7, sp, #8
 8006134:	60f8      	str	r0, [r7, #12]
 8006136:	60b9      	str	r1, [r7, #8]
 8006138:	603b      	str	r3, [r7, #0]
 800613a:	4613      	mov	r3, r2
 800613c:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800613e:	2300      	movs	r3, #0
 8006140:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	685b      	ldr	r3, [r3, #4]
 8006146:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800614a:	d112      	bne.n	8006172 <HAL_SPI_Receive+0x44>
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	689b      	ldr	r3, [r3, #8]
 8006150:	2b00      	cmp	r3, #0
 8006152:	d10e      	bne.n	8006172 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	2204      	movs	r2, #4
 8006158:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800615c:	88fa      	ldrh	r2, [r7, #6]
 800615e:	683b      	ldr	r3, [r7, #0]
 8006160:	9300      	str	r3, [sp, #0]
 8006162:	4613      	mov	r3, r2
 8006164:	68ba      	ldr	r2, [r7, #8]
 8006166:	68b9      	ldr	r1, [r7, #8]
 8006168:	68f8      	ldr	r0, [r7, #12]
 800616a:	f000 f910 	bl	800638e <HAL_SPI_TransmitReceive>
 800616e:	4603      	mov	r3, r0
 8006170:	e109      	b.n	8006386 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006178:	2b01      	cmp	r3, #1
 800617a:	d101      	bne.n	8006180 <HAL_SPI_Receive+0x52>
 800617c:	2302      	movs	r3, #2
 800617e:	e102      	b.n	8006386 <HAL_SPI_Receive+0x258>
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	2201      	movs	r2, #1
 8006184:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006188:	f7fc fb22 	bl	80027d0 <HAL_GetTick>
 800618c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006194:	b2db      	uxtb	r3, r3
 8006196:	2b01      	cmp	r3, #1
 8006198:	d002      	beq.n	80061a0 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800619a:	2302      	movs	r3, #2
 800619c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800619e:	e0e9      	b.n	8006374 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 80061a0:	68bb      	ldr	r3, [r7, #8]
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d002      	beq.n	80061ac <HAL_SPI_Receive+0x7e>
 80061a6:	88fb      	ldrh	r3, [r7, #6]
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d102      	bne.n	80061b2 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80061ac:	2301      	movs	r3, #1
 80061ae:	75fb      	strb	r3, [r7, #23]
    goto error;
 80061b0:	e0e0      	b.n	8006374 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	2204      	movs	r2, #4
 80061b6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	2200      	movs	r2, #0
 80061be:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	68ba      	ldr	r2, [r7, #8]
 80061c4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	88fa      	ldrh	r2, [r7, #6]
 80061ca:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	88fa      	ldrh	r2, [r7, #6]
 80061d2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	2200      	movs	r2, #0
 80061da:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	2200      	movs	r2, #0
 80061e0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	2200      	movs	r2, #0
 80061e6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	2200      	movs	r2, #0
 80061ec:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	2200      	movs	r2, #0
 80061f2:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	68db      	ldr	r3, [r3, #12]
 80061f8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80061fc:	d908      	bls.n	8006210 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	685a      	ldr	r2, [r3, #4]
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800620c:	605a      	str	r2, [r3, #4]
 800620e:	e007      	b.n	8006220 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	685a      	ldr	r2, [r3, #4]
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800621e:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	689b      	ldr	r3, [r3, #8]
 8006224:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006228:	d10f      	bne.n	800624a <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	681a      	ldr	r2, [r3, #0]
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006238:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	681a      	ldr	r2, [r3, #0]
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006248:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006254:	2b40      	cmp	r3, #64	; 0x40
 8006256:	d007      	beq.n	8006268 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	681a      	ldr	r2, [r3, #0]
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006266:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	68db      	ldr	r3, [r3, #12]
 800626c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006270:	d867      	bhi.n	8006342 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8006272:	e030      	b.n	80062d6 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	689b      	ldr	r3, [r3, #8]
 800627a:	f003 0301 	and.w	r3, r3, #1
 800627e:	2b01      	cmp	r3, #1
 8006280:	d117      	bne.n	80062b2 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	f103 020c 	add.w	r2, r3, #12
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800628e:	7812      	ldrb	r2, [r2, #0]
 8006290:	b2d2      	uxtb	r2, r2
 8006292:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006298:	1c5a      	adds	r2, r3, #1
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80062a4:	b29b      	uxth	r3, r3
 80062a6:	3b01      	subs	r3, #1
 80062a8:	b29a      	uxth	r2, r3
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80062b0:	e011      	b.n	80062d6 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80062b2:	f7fc fa8d 	bl	80027d0 <HAL_GetTick>
 80062b6:	4602      	mov	r2, r0
 80062b8:	693b      	ldr	r3, [r7, #16]
 80062ba:	1ad3      	subs	r3, r2, r3
 80062bc:	683a      	ldr	r2, [r7, #0]
 80062be:	429a      	cmp	r2, r3
 80062c0:	d803      	bhi.n	80062ca <HAL_SPI_Receive+0x19c>
 80062c2:	683b      	ldr	r3, [r7, #0]
 80062c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062c8:	d102      	bne.n	80062d0 <HAL_SPI_Receive+0x1a2>
 80062ca:	683b      	ldr	r3, [r7, #0]
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d102      	bne.n	80062d6 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 80062d0:	2303      	movs	r3, #3
 80062d2:	75fb      	strb	r3, [r7, #23]
          goto error;
 80062d4:	e04e      	b.n	8006374 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80062dc:	b29b      	uxth	r3, r3
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d1c8      	bne.n	8006274 <HAL_SPI_Receive+0x146>
 80062e2:	e034      	b.n	800634e <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	689b      	ldr	r3, [r3, #8]
 80062ea:	f003 0301 	and.w	r3, r3, #1
 80062ee:	2b01      	cmp	r3, #1
 80062f0:	d115      	bne.n	800631e <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	68da      	ldr	r2, [r3, #12]
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062fc:	b292      	uxth	r2, r2
 80062fe:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006304:	1c9a      	adds	r2, r3, #2
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006310:	b29b      	uxth	r3, r3
 8006312:	3b01      	subs	r3, #1
 8006314:	b29a      	uxth	r2, r3
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800631c:	e011      	b.n	8006342 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800631e:	f7fc fa57 	bl	80027d0 <HAL_GetTick>
 8006322:	4602      	mov	r2, r0
 8006324:	693b      	ldr	r3, [r7, #16]
 8006326:	1ad3      	subs	r3, r2, r3
 8006328:	683a      	ldr	r2, [r7, #0]
 800632a:	429a      	cmp	r2, r3
 800632c:	d803      	bhi.n	8006336 <HAL_SPI_Receive+0x208>
 800632e:	683b      	ldr	r3, [r7, #0]
 8006330:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006334:	d102      	bne.n	800633c <HAL_SPI_Receive+0x20e>
 8006336:	683b      	ldr	r3, [r7, #0]
 8006338:	2b00      	cmp	r3, #0
 800633a:	d102      	bne.n	8006342 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 800633c:	2303      	movs	r3, #3
 800633e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006340:	e018      	b.n	8006374 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006348:	b29b      	uxth	r3, r3
 800634a:	2b00      	cmp	r3, #0
 800634c:	d1ca      	bne.n	80062e4 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800634e:	693a      	ldr	r2, [r7, #16]
 8006350:	6839      	ldr	r1, [r7, #0]
 8006352:	68f8      	ldr	r0, [r7, #12]
 8006354:	f000 fffe 	bl	8007354 <SPI_EndRxTransaction>
 8006358:	4603      	mov	r3, r0
 800635a:	2b00      	cmp	r3, #0
 800635c:	d002      	beq.n	8006364 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	2220      	movs	r2, #32
 8006362:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006368:	2b00      	cmp	r3, #0
 800636a:	d002      	beq.n	8006372 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 800636c:	2301      	movs	r3, #1
 800636e:	75fb      	strb	r3, [r7, #23]
 8006370:	e000      	b.n	8006374 <HAL_SPI_Receive+0x246>
  }

error :
 8006372:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	2201      	movs	r2, #1
 8006378:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	2200      	movs	r2, #0
 8006380:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006384:	7dfb      	ldrb	r3, [r7, #23]
}
 8006386:	4618      	mov	r0, r3
 8006388:	3718      	adds	r7, #24
 800638a:	46bd      	mov	sp, r7
 800638c:	bd80      	pop	{r7, pc}

0800638e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800638e:	b580      	push	{r7, lr}
 8006390:	b08a      	sub	sp, #40	; 0x28
 8006392:	af00      	add	r7, sp, #0
 8006394:	60f8      	str	r0, [r7, #12]
 8006396:	60b9      	str	r1, [r7, #8]
 8006398:	607a      	str	r2, [r7, #4]
 800639a:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800639c:	2301      	movs	r3, #1
 800639e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80063a0:	2300      	movs	r3, #0
 80063a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80063ac:	2b01      	cmp	r3, #1
 80063ae:	d101      	bne.n	80063b4 <HAL_SPI_TransmitReceive+0x26>
 80063b0:	2302      	movs	r3, #2
 80063b2:	e1fb      	b.n	80067ac <HAL_SPI_TransmitReceive+0x41e>
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	2201      	movs	r2, #1
 80063b8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80063bc:	f7fc fa08 	bl	80027d0 <HAL_GetTick>
 80063c0:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80063c8:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	685b      	ldr	r3, [r3, #4]
 80063ce:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80063d0:	887b      	ldrh	r3, [r7, #2]
 80063d2:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80063d4:	887b      	ldrh	r3, [r7, #2]
 80063d6:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80063d8:	7efb      	ldrb	r3, [r7, #27]
 80063da:	2b01      	cmp	r3, #1
 80063dc:	d00e      	beq.n	80063fc <HAL_SPI_TransmitReceive+0x6e>
 80063de:	697b      	ldr	r3, [r7, #20]
 80063e0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80063e4:	d106      	bne.n	80063f4 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	689b      	ldr	r3, [r3, #8]
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d102      	bne.n	80063f4 <HAL_SPI_TransmitReceive+0x66>
 80063ee:	7efb      	ldrb	r3, [r7, #27]
 80063f0:	2b04      	cmp	r3, #4
 80063f2:	d003      	beq.n	80063fc <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80063f4:	2302      	movs	r3, #2
 80063f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80063fa:	e1cd      	b.n	8006798 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80063fc:	68bb      	ldr	r3, [r7, #8]
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d005      	beq.n	800640e <HAL_SPI_TransmitReceive+0x80>
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	2b00      	cmp	r3, #0
 8006406:	d002      	beq.n	800640e <HAL_SPI_TransmitReceive+0x80>
 8006408:	887b      	ldrh	r3, [r7, #2]
 800640a:	2b00      	cmp	r3, #0
 800640c:	d103      	bne.n	8006416 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800640e:	2301      	movs	r3, #1
 8006410:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8006414:	e1c0      	b.n	8006798 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800641c:	b2db      	uxtb	r3, r3
 800641e:	2b04      	cmp	r3, #4
 8006420:	d003      	beq.n	800642a <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	2205      	movs	r2, #5
 8006426:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	2200      	movs	r2, #0
 800642e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	687a      	ldr	r2, [r7, #4]
 8006434:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	887a      	ldrh	r2, [r7, #2]
 800643a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	887a      	ldrh	r2, [r7, #2]
 8006442:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	68ba      	ldr	r2, [r7, #8]
 800644a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	887a      	ldrh	r2, [r7, #2]
 8006450:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	887a      	ldrh	r2, [r7, #2]
 8006456:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	2200      	movs	r2, #0
 800645c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	2200      	movs	r2, #0
 8006462:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	68db      	ldr	r3, [r3, #12]
 8006468:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800646c:	d802      	bhi.n	8006474 <HAL_SPI_TransmitReceive+0xe6>
 800646e:	8a3b      	ldrh	r3, [r7, #16]
 8006470:	2b01      	cmp	r3, #1
 8006472:	d908      	bls.n	8006486 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	685a      	ldr	r2, [r3, #4]
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006482:	605a      	str	r2, [r3, #4]
 8006484:	e007      	b.n	8006496 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	685a      	ldr	r2, [r3, #4]
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006494:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064a0:	2b40      	cmp	r3, #64	; 0x40
 80064a2:	d007      	beq.n	80064b4 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	681a      	ldr	r2, [r3, #0]
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80064b2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	68db      	ldr	r3, [r3, #12]
 80064b8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80064bc:	d97c      	bls.n	80065b8 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	685b      	ldr	r3, [r3, #4]
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d002      	beq.n	80064cc <HAL_SPI_TransmitReceive+0x13e>
 80064c6:	8a7b      	ldrh	r3, [r7, #18]
 80064c8:	2b01      	cmp	r3, #1
 80064ca:	d169      	bne.n	80065a0 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064d0:	881a      	ldrh	r2, [r3, #0]
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064dc:	1c9a      	adds	r2, r3, #2
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80064e6:	b29b      	uxth	r3, r3
 80064e8:	3b01      	subs	r3, #1
 80064ea:	b29a      	uxth	r2, r3
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80064f0:	e056      	b.n	80065a0 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	689b      	ldr	r3, [r3, #8]
 80064f8:	f003 0302 	and.w	r3, r3, #2
 80064fc:	2b02      	cmp	r3, #2
 80064fe:	d11b      	bne.n	8006538 <HAL_SPI_TransmitReceive+0x1aa>
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006504:	b29b      	uxth	r3, r3
 8006506:	2b00      	cmp	r3, #0
 8006508:	d016      	beq.n	8006538 <HAL_SPI_TransmitReceive+0x1aa>
 800650a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800650c:	2b01      	cmp	r3, #1
 800650e:	d113      	bne.n	8006538 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006514:	881a      	ldrh	r2, [r3, #0]
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006520:	1c9a      	adds	r2, r3, #2
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800652a:	b29b      	uxth	r3, r3
 800652c:	3b01      	subs	r3, #1
 800652e:	b29a      	uxth	r2, r3
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006534:	2300      	movs	r3, #0
 8006536:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	689b      	ldr	r3, [r3, #8]
 800653e:	f003 0301 	and.w	r3, r3, #1
 8006542:	2b01      	cmp	r3, #1
 8006544:	d11c      	bne.n	8006580 <HAL_SPI_TransmitReceive+0x1f2>
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800654c:	b29b      	uxth	r3, r3
 800654e:	2b00      	cmp	r3, #0
 8006550:	d016      	beq.n	8006580 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	68da      	ldr	r2, [r3, #12]
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800655c:	b292      	uxth	r2, r2
 800655e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006564:	1c9a      	adds	r2, r3, #2
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006570:	b29b      	uxth	r3, r3
 8006572:	3b01      	subs	r3, #1
 8006574:	b29a      	uxth	r2, r3
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800657c:	2301      	movs	r3, #1
 800657e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006580:	f7fc f926 	bl	80027d0 <HAL_GetTick>
 8006584:	4602      	mov	r2, r0
 8006586:	69fb      	ldr	r3, [r7, #28]
 8006588:	1ad3      	subs	r3, r2, r3
 800658a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800658c:	429a      	cmp	r2, r3
 800658e:	d807      	bhi.n	80065a0 <HAL_SPI_TransmitReceive+0x212>
 8006590:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006592:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006596:	d003      	beq.n	80065a0 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8006598:	2303      	movs	r3, #3
 800659a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800659e:	e0fb      	b.n	8006798 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80065a4:	b29b      	uxth	r3, r3
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d1a3      	bne.n	80064f2 <HAL_SPI_TransmitReceive+0x164>
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80065b0:	b29b      	uxth	r3, r3
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d19d      	bne.n	80064f2 <HAL_SPI_TransmitReceive+0x164>
 80065b6:	e0df      	b.n	8006778 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	685b      	ldr	r3, [r3, #4]
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d003      	beq.n	80065c8 <HAL_SPI_TransmitReceive+0x23a>
 80065c0:	8a7b      	ldrh	r3, [r7, #18]
 80065c2:	2b01      	cmp	r3, #1
 80065c4:	f040 80cb 	bne.w	800675e <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80065cc:	b29b      	uxth	r3, r3
 80065ce:	2b01      	cmp	r3, #1
 80065d0:	d912      	bls.n	80065f8 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065d6:	881a      	ldrh	r2, [r3, #0]
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065e2:	1c9a      	adds	r2, r3, #2
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80065ec:	b29b      	uxth	r3, r3
 80065ee:	3b02      	subs	r3, #2
 80065f0:	b29a      	uxth	r2, r3
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80065f6:	e0b2      	b.n	800675e <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	330c      	adds	r3, #12
 8006602:	7812      	ldrb	r2, [r2, #0]
 8006604:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800660a:	1c5a      	adds	r2, r3, #1
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006614:	b29b      	uxth	r3, r3
 8006616:	3b01      	subs	r3, #1
 8006618:	b29a      	uxth	r2, r3
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800661e:	e09e      	b.n	800675e <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	689b      	ldr	r3, [r3, #8]
 8006626:	f003 0302 	and.w	r3, r3, #2
 800662a:	2b02      	cmp	r3, #2
 800662c:	d134      	bne.n	8006698 <HAL_SPI_TransmitReceive+0x30a>
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006632:	b29b      	uxth	r3, r3
 8006634:	2b00      	cmp	r3, #0
 8006636:	d02f      	beq.n	8006698 <HAL_SPI_TransmitReceive+0x30a>
 8006638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800663a:	2b01      	cmp	r3, #1
 800663c:	d12c      	bne.n	8006698 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006642:	b29b      	uxth	r3, r3
 8006644:	2b01      	cmp	r3, #1
 8006646:	d912      	bls.n	800666e <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800664c:	881a      	ldrh	r2, [r3, #0]
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006658:	1c9a      	adds	r2, r3, #2
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006662:	b29b      	uxth	r3, r3
 8006664:	3b02      	subs	r3, #2
 8006666:	b29a      	uxth	r2, r3
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800666c:	e012      	b.n	8006694 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	330c      	adds	r3, #12
 8006678:	7812      	ldrb	r2, [r2, #0]
 800667a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006680:	1c5a      	adds	r2, r3, #1
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800668a:	b29b      	uxth	r3, r3
 800668c:	3b01      	subs	r3, #1
 800668e:	b29a      	uxth	r2, r3
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006694:	2300      	movs	r3, #0
 8006696:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	689b      	ldr	r3, [r3, #8]
 800669e:	f003 0301 	and.w	r3, r3, #1
 80066a2:	2b01      	cmp	r3, #1
 80066a4:	d148      	bne.n	8006738 <HAL_SPI_TransmitReceive+0x3aa>
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80066ac:	b29b      	uxth	r3, r3
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d042      	beq.n	8006738 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80066b8:	b29b      	uxth	r3, r3
 80066ba:	2b01      	cmp	r3, #1
 80066bc:	d923      	bls.n	8006706 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	68da      	ldr	r2, [r3, #12]
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066c8:	b292      	uxth	r2, r2
 80066ca:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066d0:	1c9a      	adds	r2, r3, #2
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80066dc:	b29b      	uxth	r3, r3
 80066de:	3b02      	subs	r3, #2
 80066e0:	b29a      	uxth	r2, r3
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80066ee:	b29b      	uxth	r3, r3
 80066f0:	2b01      	cmp	r3, #1
 80066f2:	d81f      	bhi.n	8006734 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	685a      	ldr	r2, [r3, #4]
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006702:	605a      	str	r2, [r3, #4]
 8006704:	e016      	b.n	8006734 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	f103 020c 	add.w	r2, r3, #12
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006712:	7812      	ldrb	r2, [r2, #0]
 8006714:	b2d2      	uxtb	r2, r2
 8006716:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800671c:	1c5a      	adds	r2, r3, #1
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006728:	b29b      	uxth	r3, r3
 800672a:	3b01      	subs	r3, #1
 800672c:	b29a      	uxth	r2, r3
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006734:	2301      	movs	r3, #1
 8006736:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006738:	f7fc f84a 	bl	80027d0 <HAL_GetTick>
 800673c:	4602      	mov	r2, r0
 800673e:	69fb      	ldr	r3, [r7, #28]
 8006740:	1ad3      	subs	r3, r2, r3
 8006742:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006744:	429a      	cmp	r2, r3
 8006746:	d803      	bhi.n	8006750 <HAL_SPI_TransmitReceive+0x3c2>
 8006748:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800674a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800674e:	d102      	bne.n	8006756 <HAL_SPI_TransmitReceive+0x3c8>
 8006750:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006752:	2b00      	cmp	r3, #0
 8006754:	d103      	bne.n	800675e <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8006756:	2303      	movs	r3, #3
 8006758:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800675c:	e01c      	b.n	8006798 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006762:	b29b      	uxth	r3, r3
 8006764:	2b00      	cmp	r3, #0
 8006766:	f47f af5b 	bne.w	8006620 <HAL_SPI_TransmitReceive+0x292>
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006770:	b29b      	uxth	r3, r3
 8006772:	2b00      	cmp	r3, #0
 8006774:	f47f af54 	bne.w	8006620 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006778:	69fa      	ldr	r2, [r7, #28]
 800677a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800677c:	68f8      	ldr	r0, [r7, #12]
 800677e:	f000 fe41 	bl	8007404 <SPI_EndRxTxTransaction>
 8006782:	4603      	mov	r3, r0
 8006784:	2b00      	cmp	r3, #0
 8006786:	d006      	beq.n	8006796 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8006788:	2301      	movs	r3, #1
 800678a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	2220      	movs	r2, #32
 8006792:	661a      	str	r2, [r3, #96]	; 0x60
 8006794:	e000      	b.n	8006798 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8006796:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	2201      	movs	r2, #1
 800679c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	2200      	movs	r2, #0
 80067a4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80067a8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80067ac:	4618      	mov	r0, r3
 80067ae:	3728      	adds	r7, #40	; 0x28
 80067b0:	46bd      	mov	sp, r7
 80067b2:	bd80      	pop	{r7, pc}

080067b4 <HAL_SPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80067b4:	b480      	push	{r7}
 80067b6:	b087      	sub	sp, #28
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	60f8      	str	r0, [r7, #12]
 80067bc:	60b9      	str	r1, [r7, #8]
 80067be:	4613      	mov	r3, r2
 80067c0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80067c2:	2300      	movs	r3, #0
 80067c4:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80067cc:	2b01      	cmp	r3, #1
 80067ce:	d101      	bne.n	80067d4 <HAL_SPI_Transmit_IT+0x20>
 80067d0:	2302      	movs	r3, #2
 80067d2:	e072      	b.n	80068ba <HAL_SPI_Transmit_IT+0x106>
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	2201      	movs	r2, #1
 80067d8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if ((pData == NULL) || (Size == 0U))
 80067dc:	68bb      	ldr	r3, [r7, #8]
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d002      	beq.n	80067e8 <HAL_SPI_Transmit_IT+0x34>
 80067e2:	88fb      	ldrh	r3, [r7, #6]
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d102      	bne.n	80067ee <HAL_SPI_Transmit_IT+0x3a>
  {
    errorcode = HAL_ERROR;
 80067e8:	2301      	movs	r3, #1
 80067ea:	75fb      	strb	r3, [r7, #23]
    goto error;
 80067ec:	e060      	b.n	80068b0 <HAL_SPI_Transmit_IT+0xfc>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80067f4:	b2db      	uxtb	r3, r3
 80067f6:	2b01      	cmp	r3, #1
 80067f8:	d002      	beq.n	8006800 <HAL_SPI_Transmit_IT+0x4c>
  {
    errorcode = HAL_BUSY;
 80067fa:	2302      	movs	r3, #2
 80067fc:	75fb      	strb	r3, [r7, #23]
    goto error;
 80067fe:	e057      	b.n	80068b0 <HAL_SPI_Transmit_IT+0xfc>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	2203      	movs	r2, #3
 8006804:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	2200      	movs	r2, #0
 800680c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	68ba      	ldr	r2, [r7, #8]
 8006812:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	88fa      	ldrh	r2, [r7, #6]
 8006818:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	88fa      	ldrh	r2, [r7, #6]
 800681e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	2200      	movs	r2, #0
 8006824:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	2200      	movs	r2, #0
 800682a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	2200      	movs	r2, #0
 8006832:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxISR       = NULL;
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	2200      	movs	r2, #0
 800683a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	68db      	ldr	r3, [r3, #12]
 8006840:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006844:	d903      	bls.n	800684e <HAL_SPI_Transmit_IT+0x9a>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	4a1f      	ldr	r2, [pc, #124]	; (80068c8 <HAL_SPI_Transmit_IT+0x114>)
 800684a:	651a      	str	r2, [r3, #80]	; 0x50
 800684c:	e002      	b.n	8006854 <HAL_SPI_Transmit_IT+0xa0>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	4a1e      	ldr	r2, [pc, #120]	; (80068cc <HAL_SPI_Transmit_IT+0x118>)
 8006852:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	689b      	ldr	r3, [r3, #8]
 8006858:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800685c:	d10f      	bne.n	800687e <HAL_SPI_Transmit_IT+0xca>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	681a      	ldr	r2, [r3, #0]
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800686c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	681a      	ldr	r2, [r3, #0]
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800687c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	685a      	ldr	r2, [r3, #4]
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
 800688c:	605a      	str	r2, [r3, #4]


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006898:	2b40      	cmp	r3, #64	; 0x40
 800689a:	d008      	beq.n	80068ae <HAL_SPI_Transmit_IT+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	681a      	ldr	r2, [r3, #0]
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80068aa:	601a      	str	r2, [r3, #0]
 80068ac:	e000      	b.n	80068b0 <HAL_SPI_Transmit_IT+0xfc>
  }

error :
 80068ae:	bf00      	nop
  __HAL_UNLOCK(hspi);
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	2200      	movs	r2, #0
 80068b4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80068b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80068ba:	4618      	mov	r0, r3
 80068bc:	371c      	adds	r7, #28
 80068be:	46bd      	mov	sp, r7
 80068c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c4:	4770      	bx	lr
 80068c6:	bf00      	nop
 80068c8:	080070db 	.word	0x080070db
 80068cc:	08007095 	.word	0x08007095

080068d0 <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80068d0:	b580      	push	{r7, lr}
 80068d2:	b086      	sub	sp, #24
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	60f8      	str	r0, [r7, #12]
 80068d8:	60b9      	str	r1, [r7, #8]
 80068da:	4613      	mov	r3, r2
 80068dc:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80068de:	2300      	movs	r3, #0
 80068e0:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	689b      	ldr	r3, [r3, #8]
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d110      	bne.n	800690c <HAL_SPI_Receive_IT+0x3c>
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	685b      	ldr	r3, [r3, #4]
 80068ee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80068f2:	d10b      	bne.n	800690c <HAL_SPI_Receive_IT+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	2204      	movs	r2, #4
 80068f8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 80068fc:	88fb      	ldrh	r3, [r7, #6]
 80068fe:	68ba      	ldr	r2, [r7, #8]
 8006900:	68b9      	ldr	r1, [r7, #8]
 8006902:	68f8      	ldr	r0, [r7, #12]
 8006904:	f000 f894 	bl	8006a30 <HAL_SPI_TransmitReceive_IT>
 8006908:	4603      	mov	r3, r0
 800690a:	e089      	b.n	8006a20 <HAL_SPI_Receive_IT+0x150>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006912:	2b01      	cmp	r3, #1
 8006914:	d101      	bne.n	800691a <HAL_SPI_Receive_IT+0x4a>
 8006916:	2302      	movs	r3, #2
 8006918:	e082      	b.n	8006a20 <HAL_SPI_Receive_IT+0x150>
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	2201      	movs	r2, #1
 800691e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006928:	b2db      	uxtb	r3, r3
 800692a:	2b01      	cmp	r3, #1
 800692c:	d002      	beq.n	8006934 <HAL_SPI_Receive_IT+0x64>
  {
    errorcode = HAL_BUSY;
 800692e:	2302      	movs	r3, #2
 8006930:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006932:	e070      	b.n	8006a16 <HAL_SPI_Receive_IT+0x146>
  }

  if ((pData == NULL) || (Size == 0U))
 8006934:	68bb      	ldr	r3, [r7, #8]
 8006936:	2b00      	cmp	r3, #0
 8006938:	d002      	beq.n	8006940 <HAL_SPI_Receive_IT+0x70>
 800693a:	88fb      	ldrh	r3, [r7, #6]
 800693c:	2b00      	cmp	r3, #0
 800693e:	d102      	bne.n	8006946 <HAL_SPI_Receive_IT+0x76>
  {
    errorcode = HAL_ERROR;
 8006940:	2301      	movs	r3, #1
 8006942:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006944:	e067      	b.n	8006a16 <HAL_SPI_Receive_IT+0x146>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	2204      	movs	r2, #4
 800694a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	2200      	movs	r2, #0
 8006952:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	68ba      	ldr	r2, [r7, #8]
 8006958:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	88fa      	ldrh	r2, [r7, #6]
 800695e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	88fa      	ldrh	r2, [r7, #6]
 8006966:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	2200      	movs	r2, #0
 800696e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	2200      	movs	r2, #0
 8006974:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	2200      	movs	r2, #0
 800697a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	2200      	movs	r2, #0
 8006980:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check the data size to adapt Rx threshold and the set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	68db      	ldr	r3, [r3, #12]
 8006986:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800698a:	d90b      	bls.n	80069a4 <HAL_SPI_Receive_IT+0xd4>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	685a      	ldr	r2, [r3, #4]
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800699a:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_16BIT;
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	4a22      	ldr	r2, [pc, #136]	; (8006a28 <HAL_SPI_Receive_IT+0x158>)
 80069a0:	64da      	str	r2, [r3, #76]	; 0x4c
 80069a2:	e00a      	b.n	80069ba <HAL_SPI_Receive_IT+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	685a      	ldr	r2, [r3, #4]
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80069b2:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_8BIT;
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	4a1d      	ldr	r2, [pc, #116]	; (8006a2c <HAL_SPI_Receive_IT+0x15c>)
 80069b8:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	689b      	ldr	r3, [r3, #8]
 80069be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80069c2:	d10f      	bne.n	80069e4 <HAL_SPI_Receive_IT+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	681a      	ldr	r2, [r3, #0]
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80069d2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	681a      	ldr	r2, [r3, #0]
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80069e2:	601a      	str	r2, [r3, #0]
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	685a      	ldr	r2, [r3, #4]
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 80069f2:	605a      	str	r2, [r3, #4]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069fe:	2b40      	cmp	r3, #64	; 0x40
 8006a00:	d008      	beq.n	8006a14 <HAL_SPI_Receive_IT+0x144>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	681a      	ldr	r2, [r3, #0]
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006a10:	601a      	str	r2, [r3, #0]
 8006a12:	e000      	b.n	8006a16 <HAL_SPI_Receive_IT+0x146>
  }

error :
 8006a14:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	2200      	movs	r2, #0
 8006a1a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006a1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a20:	4618      	mov	r0, r3
 8006a22:	3718      	adds	r7, #24
 8006a24:	46bd      	mov	sp, r7
 8006a26:	bd80      	pop	{r7, pc}
 8006a28:	08007049 	.word	0x08007049
 8006a2c:	08006ff9 	.word	0x08006ff9

08006a30 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 8006a30:	b480      	push	{r7}
 8006a32:	b087      	sub	sp, #28
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	60f8      	str	r0, [r7, #12]
 8006a38:	60b9      	str	r1, [r7, #8]
 8006a3a:	607a      	str	r2, [r7, #4]
 8006a3c:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006a3e:	2300      	movs	r3, #0
 8006a40:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006a48:	2b01      	cmp	r3, #1
 8006a4a:	d101      	bne.n	8006a50 <HAL_SPI_TransmitReceive_IT+0x20>
 8006a4c:	2302      	movs	r3, #2
 8006a4e:	e091      	b.n	8006b74 <HAL_SPI_TransmitReceive_IT+0x144>
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	2201      	movs	r2, #1
 8006a54:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006a5e:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	685b      	ldr	r3, [r3, #4]
 8006a64:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006a66:	7dbb      	ldrb	r3, [r7, #22]
 8006a68:	2b01      	cmp	r3, #1
 8006a6a:	d00d      	beq.n	8006a88 <HAL_SPI_TransmitReceive_IT+0x58>
 8006a6c:	693b      	ldr	r3, [r7, #16]
 8006a6e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006a72:	d106      	bne.n	8006a82 <HAL_SPI_TransmitReceive_IT+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	689b      	ldr	r3, [r3, #8]
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d102      	bne.n	8006a82 <HAL_SPI_TransmitReceive_IT+0x52>
 8006a7c:	7dbb      	ldrb	r3, [r7, #22]
 8006a7e:	2b04      	cmp	r3, #4
 8006a80:	d002      	beq.n	8006a88 <HAL_SPI_TransmitReceive_IT+0x58>
  {
    errorcode = HAL_BUSY;
 8006a82:	2302      	movs	r3, #2
 8006a84:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006a86:	e070      	b.n	8006b6a <HAL_SPI_TransmitReceive_IT+0x13a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006a88:	68bb      	ldr	r3, [r7, #8]
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d005      	beq.n	8006a9a <HAL_SPI_TransmitReceive_IT+0x6a>
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d002      	beq.n	8006a9a <HAL_SPI_TransmitReceive_IT+0x6a>
 8006a94:	887b      	ldrh	r3, [r7, #2]
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d102      	bne.n	8006aa0 <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_ERROR;
 8006a9a:	2301      	movs	r3, #1
 8006a9c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006a9e:	e064      	b.n	8006b6a <HAL_SPI_TransmitReceive_IT+0x13a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006aa6:	b2db      	uxtb	r3, r3
 8006aa8:	2b04      	cmp	r3, #4
 8006aaa:	d003      	beq.n	8006ab4 <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	2205      	movs	r2, #5
 8006ab0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	2200      	movs	r2, #0
 8006ab8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	68ba      	ldr	r2, [r7, #8]
 8006abe:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	887a      	ldrh	r2, [r7, #2]
 8006ac4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	887a      	ldrh	r2, [r7, #2]
 8006aca:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	687a      	ldr	r2, [r7, #4]
 8006ad0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	887a      	ldrh	r2, [r7, #2]
 8006ad6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	887a      	ldrh	r2, [r7, #2]
 8006ade:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	68db      	ldr	r3, [r3, #12]
 8006ae6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006aea:	d906      	bls.n	8006afa <HAL_SPI_TransmitReceive_IT+0xca>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	4a24      	ldr	r2, [pc, #144]	; (8006b80 <HAL_SPI_TransmitReceive_IT+0x150>)
 8006af0:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	4a23      	ldr	r2, [pc, #140]	; (8006b84 <HAL_SPI_TransmitReceive_IT+0x154>)
 8006af6:	651a      	str	r2, [r3, #80]	; 0x50
 8006af8:	e005      	b.n	8006b06 <HAL_SPI_TransmitReceive_IT+0xd6>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	4a22      	ldr	r2, [pc, #136]	; (8006b88 <HAL_SPI_TransmitReceive_IT+0x158>)
 8006afe:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	4a22      	ldr	r2, [pc, #136]	; (8006b8c <HAL_SPI_TransmitReceive_IT+0x15c>)
 8006b04:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Check if packing mode is enabled and if there is more than 2 data to receive */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	68db      	ldr	r3, [r3, #12]
 8006b0a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006b0e:	d802      	bhi.n	8006b16 <HAL_SPI_TransmitReceive_IT+0xe6>
 8006b10:	887b      	ldrh	r3, [r7, #2]
 8006b12:	2b01      	cmp	r3, #1
 8006b14:	d908      	bls.n	8006b28 <HAL_SPI_TransmitReceive_IT+0xf8>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	685a      	ldr	r2, [r3, #4]
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006b24:	605a      	str	r2, [r3, #4]
 8006b26:	e007      	b.n	8006b38 <HAL_SPI_TransmitReceive_IT+0x108>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	685a      	ldr	r2, [r3, #4]
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006b36:	605a      	str	r2, [r3, #4]
  }

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	685a      	ldr	r2, [r3, #4]
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 8006b46:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b52:	2b40      	cmp	r3, #64	; 0x40
 8006b54:	d008      	beq.n	8006b68 <HAL_SPI_TransmitReceive_IT+0x138>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	681a      	ldr	r2, [r3, #0]
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006b64:	601a      	str	r2, [r3, #0]
 8006b66:	e000      	b.n	8006b6a <HAL_SPI_TransmitReceive_IT+0x13a>
  }

error :
 8006b68:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	2200      	movs	r2, #0
 8006b6e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006b72:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b74:	4618      	mov	r0, r3
 8006b76:	371c      	adds	r7, #28
 8006b78:	46bd      	mov	sp, r7
 8006b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7e:	4770      	bx	lr
 8006b80:	08006f33 	.word	0x08006f33
 8006b84:	08006f99 	.word	0x08006f99
 8006b88:	08006de3 	.word	0x08006de3
 8006b8c:	08006ea1 	.word	0x08006ea1

08006b90 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8006b90:	b580      	push	{r7, lr}
 8006b92:	b088      	sub	sp, #32
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	685b      	ldr	r3, [r3, #4]
 8006b9e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	689b      	ldr	r3, [r3, #8]
 8006ba6:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006ba8:	69bb      	ldr	r3, [r7, #24]
 8006baa:	099b      	lsrs	r3, r3, #6
 8006bac:	f003 0301 	and.w	r3, r3, #1
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d10f      	bne.n	8006bd4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006bb4:	69bb      	ldr	r3, [r7, #24]
 8006bb6:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d00a      	beq.n	8006bd4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006bbe:	69fb      	ldr	r3, [r7, #28]
 8006bc0:	099b      	lsrs	r3, r3, #6
 8006bc2:	f003 0301 	and.w	r3, r3, #1
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d004      	beq.n	8006bd4 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006bce:	6878      	ldr	r0, [r7, #4]
 8006bd0:	4798      	blx	r3
    return;
 8006bd2:	e0d7      	b.n	8006d84 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8006bd4:	69bb      	ldr	r3, [r7, #24]
 8006bd6:	085b      	lsrs	r3, r3, #1
 8006bd8:	f003 0301 	and.w	r3, r3, #1
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d00a      	beq.n	8006bf6 <HAL_SPI_IRQHandler+0x66>
 8006be0:	69fb      	ldr	r3, [r7, #28]
 8006be2:	09db      	lsrs	r3, r3, #7
 8006be4:	f003 0301 	and.w	r3, r3, #1
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d004      	beq.n	8006bf6 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006bf0:	6878      	ldr	r0, [r7, #4]
 8006bf2:	4798      	blx	r3
    return;
 8006bf4:	e0c6      	b.n	8006d84 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006bf6:	69bb      	ldr	r3, [r7, #24]
 8006bf8:	095b      	lsrs	r3, r3, #5
 8006bfa:	f003 0301 	and.w	r3, r3, #1
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d10c      	bne.n	8006c1c <HAL_SPI_IRQHandler+0x8c>
 8006c02:	69bb      	ldr	r3, [r7, #24]
 8006c04:	099b      	lsrs	r3, r3, #6
 8006c06:	f003 0301 	and.w	r3, r3, #1
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d106      	bne.n	8006c1c <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8006c0e:	69bb      	ldr	r3, [r7, #24]
 8006c10:	0a1b      	lsrs	r3, r3, #8
 8006c12:	f003 0301 	and.w	r3, r3, #1
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	f000 80b4 	beq.w	8006d84 <HAL_SPI_IRQHandler+0x1f4>
 8006c1c:	69fb      	ldr	r3, [r7, #28]
 8006c1e:	095b      	lsrs	r3, r3, #5
 8006c20:	f003 0301 	and.w	r3, r3, #1
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	f000 80ad 	beq.w	8006d84 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006c2a:	69bb      	ldr	r3, [r7, #24]
 8006c2c:	099b      	lsrs	r3, r3, #6
 8006c2e:	f003 0301 	and.w	r3, r3, #1
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d023      	beq.n	8006c7e <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006c3c:	b2db      	uxtb	r3, r3
 8006c3e:	2b03      	cmp	r3, #3
 8006c40:	d011      	beq.n	8006c66 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c46:	f043 0204 	orr.w	r2, r3, #4
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006c4e:	2300      	movs	r3, #0
 8006c50:	617b      	str	r3, [r7, #20]
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	68db      	ldr	r3, [r3, #12]
 8006c58:	617b      	str	r3, [r7, #20]
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	689b      	ldr	r3, [r3, #8]
 8006c60:	617b      	str	r3, [r7, #20]
 8006c62:	697b      	ldr	r3, [r7, #20]
 8006c64:	e00b      	b.n	8006c7e <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006c66:	2300      	movs	r3, #0
 8006c68:	613b      	str	r3, [r7, #16]
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	68db      	ldr	r3, [r3, #12]
 8006c70:	613b      	str	r3, [r7, #16]
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	689b      	ldr	r3, [r3, #8]
 8006c78:	613b      	str	r3, [r7, #16]
 8006c7a:	693b      	ldr	r3, [r7, #16]
        return;
 8006c7c:	e082      	b.n	8006d84 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8006c7e:	69bb      	ldr	r3, [r7, #24]
 8006c80:	095b      	lsrs	r3, r3, #5
 8006c82:	f003 0301 	and.w	r3, r3, #1
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d014      	beq.n	8006cb4 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c8e:	f043 0201 	orr.w	r2, r3, #1
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006c96:	2300      	movs	r3, #0
 8006c98:	60fb      	str	r3, [r7, #12]
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	689b      	ldr	r3, [r3, #8]
 8006ca0:	60fb      	str	r3, [r7, #12]
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	681a      	ldr	r2, [r3, #0]
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006cb0:	601a      	str	r2, [r3, #0]
 8006cb2:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8006cb4:	69bb      	ldr	r3, [r7, #24]
 8006cb6:	0a1b      	lsrs	r3, r3, #8
 8006cb8:	f003 0301 	and.w	r3, r3, #1
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d00c      	beq.n	8006cda <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006cc4:	f043 0208 	orr.w	r2, r3, #8
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006ccc:	2300      	movs	r3, #0
 8006cce:	60bb      	str	r3, [r7, #8]
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	689b      	ldr	r3, [r3, #8]
 8006cd6:	60bb      	str	r3, [r7, #8]
 8006cd8:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d04f      	beq.n	8006d82 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	685a      	ldr	r2, [r3, #4]
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006cf0:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	2201      	movs	r2, #1
 8006cf6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8006cfa:	69fb      	ldr	r3, [r7, #28]
 8006cfc:	f003 0302 	and.w	r3, r3, #2
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d104      	bne.n	8006d0e <HAL_SPI_IRQHandler+0x17e>
 8006d04:	69fb      	ldr	r3, [r7, #28]
 8006d06:	f003 0301 	and.w	r3, r3, #1
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d034      	beq.n	8006d78 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	685a      	ldr	r2, [r3, #4]
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	f022 0203 	bic.w	r2, r2, #3
 8006d1c:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d011      	beq.n	8006d4a <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d2a:	4a18      	ldr	r2, [pc, #96]	; (8006d8c <HAL_SPI_IRQHandler+0x1fc>)
 8006d2c:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d32:	4618      	mov	r0, r3
 8006d34:	f7fb ffda 	bl	8002cec <HAL_DMA_Abort_IT>
 8006d38:	4603      	mov	r3, r0
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d005      	beq.n	8006d4a <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d42:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d016      	beq.n	8006d80 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d56:	4a0d      	ldr	r2, [pc, #52]	; (8006d8c <HAL_SPI_IRQHandler+0x1fc>)
 8006d58:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d5e:	4618      	mov	r0, r3
 8006d60:	f7fb ffc4 	bl	8002cec <HAL_DMA_Abort_IT>
 8006d64:	4603      	mov	r3, r0
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d00a      	beq.n	8006d80 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d6e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8006d76:	e003      	b.n	8006d80 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8006d78:	6878      	ldr	r0, [r7, #4]
 8006d7a:	f000 f813 	bl	8006da4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8006d7e:	e000      	b.n	8006d82 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8006d80:	bf00      	nop
    return;
 8006d82:	bf00      	nop
  }
}
 8006d84:	3720      	adds	r7, #32
 8006d86:	46bd      	mov	sp, r7
 8006d88:	bd80      	pop	{r7, pc}
 8006d8a:	bf00      	nop
 8006d8c:	08006db9 	.word	0x08006db9

08006d90 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006d90:	b480      	push	{r7}
 8006d92:	b083      	sub	sp, #12
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8006d98:	bf00      	nop
 8006d9a:	370c      	adds	r7, #12
 8006d9c:	46bd      	mov	sp, r7
 8006d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da2:	4770      	bx	lr

08006da4 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8006da4:	b480      	push	{r7}
 8006da6:	b083      	sub	sp, #12
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8006dac:	bf00      	nop
 8006dae:	370c      	adds	r7, #12
 8006db0:	46bd      	mov	sp, r7
 8006db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db6:	4770      	bx	lr

08006db8 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006db8:	b580      	push	{r7, lr}
 8006dba:	b084      	sub	sp, #16
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dc4:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	2200      	movs	r2, #0
 8006dca:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	2200      	movs	r2, #0
 8006dd2:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8006dd4:	68f8      	ldr	r0, [r7, #12]
 8006dd6:	f7ff ffe5 	bl	8006da4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006dda:	bf00      	nop
 8006ddc:	3710      	adds	r7, #16
 8006dde:	46bd      	mov	sp, r7
 8006de0:	bd80      	pop	{r7, pc}

08006de2 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8006de2:	b580      	push	{r7, lr}
 8006de4:	b082      	sub	sp, #8
 8006de6:	af00      	add	r7, sp, #0
 8006de8:	6078      	str	r0, [r7, #4]
  /* Receive data in packing mode */
  if (hspi->RxXferCount > 1U)
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006df0:	b29b      	uxth	r3, r3
 8006df2:	2b01      	cmp	r3, #1
 8006df4:	d923      	bls.n	8006e3e <SPI_2linesRxISR_8BIT+0x5c>
  {
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	68da      	ldr	r2, [r3, #12]
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e00:	b292      	uxth	r2, r2
 8006e02:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e08:	1c9a      	adds	r2, r3, #2
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount -= 2U;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006e14:	b29b      	uxth	r3, r3
 8006e16:	3b02      	subs	r3, #2
 8006e18:	b29a      	uxth	r2, r3
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    if (hspi->RxXferCount == 1U)
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006e26:	b29b      	uxth	r3, r3
 8006e28:	2b01      	cmp	r3, #1
 8006e2a:	d11f      	bne.n	8006e6c <SPI_2linesRxISR_8BIT+0x8a>
    {
      /* Set RX Fifo threshold according the reception data length: 8bit */
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	685a      	ldr	r2, [r3, #4]
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006e3a:	605a      	str	r2, [r3, #4]
 8006e3c:	e016      	b.n	8006e6c <SPI_2linesRxISR_8BIT+0x8a>
    }
  }
  /* Receive data in 8 Bit mode */
  else
  {
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	f103 020c 	add.w	r2, r3, #12
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e4a:	7812      	ldrb	r2, [r2, #0]
 8006e4c:	b2d2      	uxtb	r2, r2
 8006e4e:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e54:	1c5a      	adds	r2, r3, #1
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount--;
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006e60:	b29b      	uxth	r3, r3
 8006e62:	3b01      	subs	r3, #1
 8006e64:	b29a      	uxth	r2, r3
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  }

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006e72:	b29b      	uxth	r3, r3
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d10f      	bne.n	8006e98 <SPI_2linesRxISR_8BIT+0xb6>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	685a      	ldr	r2, [r3, #4]
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006e86:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006e8c:	b29b      	uxth	r3, r3
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d102      	bne.n	8006e98 <SPI_2linesRxISR_8BIT+0xb6>
    {
      SPI_CloseRxTx_ISR(hspi);
 8006e92:	6878      	ldr	r0, [r7, #4]
 8006e94:	f000 fafc 	bl	8007490 <SPI_CloseRxTx_ISR>
    }
  }
}
 8006e98:	bf00      	nop
 8006e9a:	3708      	adds	r7, #8
 8006e9c:	46bd      	mov	sp, r7
 8006e9e:	bd80      	pop	{r7, pc}

08006ea0 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8006ea0:	b580      	push	{r7, lr}
 8006ea2:	b082      	sub	sp, #8
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	6078      	str	r0, [r7, #4]
  /* Transmit data in packing Bit mode */
  if (hspi->TxXferCount >= 2U)
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006eac:	b29b      	uxth	r3, r3
 8006eae:	2b01      	cmp	r3, #1
 8006eb0:	d912      	bls.n	8006ed8 <SPI_2linesTxISR_8BIT+0x38>
  {
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006eb6:	881a      	ldrh	r2, [r3, #0]
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ec2:	1c9a      	adds	r2, r3, #2
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount -= 2U;
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ecc:	b29b      	uxth	r3, r3
 8006ece:	3b02      	subs	r3, #2
 8006ed0:	b29a      	uxth	r2, r3
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006ed6:	e012      	b.n	8006efe <SPI_2linesTxISR_8BIT+0x5e>
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	330c      	adds	r3, #12
 8006ee2:	7812      	ldrb	r2, [r2, #0]
 8006ee4:	701a      	strb	r2, [r3, #0]
    hspi->pTxBuffPtr++;
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006eea:	1c5a      	adds	r2, r3, #1
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount--;
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ef4:	b29b      	uxth	r3, r3
 8006ef6:	3b01      	subs	r3, #1
 8006ef8:	b29a      	uxth	r2, r3
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	87da      	strh	r2, [r3, #62]	; 0x3e
  }

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006f02:	b29b      	uxth	r3, r3
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d110      	bne.n	8006f2a <SPI_2linesTxISR_8BIT+0x8a>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	685a      	ldr	r2, [r3, #4]
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006f16:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006f1e:	b29b      	uxth	r3, r3
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d102      	bne.n	8006f2a <SPI_2linesTxISR_8BIT+0x8a>
    {
      SPI_CloseRxTx_ISR(hspi);
 8006f24:	6878      	ldr	r0, [r7, #4]
 8006f26:	f000 fab3 	bl	8007490 <SPI_CloseRxTx_ISR>
    }
  }
}
 8006f2a:	bf00      	nop
 8006f2c:	3708      	adds	r7, #8
 8006f2e:	46bd      	mov	sp, r7
 8006f30:	bd80      	pop	{r7, pc}

08006f32 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8006f32:	b580      	push	{r7, lr}
 8006f34:	b082      	sub	sp, #8
 8006f36:	af00      	add	r7, sp, #0
 8006f38:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	68da      	ldr	r2, [r3, #12]
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f44:	b292      	uxth	r2, r2
 8006f46:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f4c:	1c9a      	adds	r2, r3, #2
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006f58:	b29b      	uxth	r3, r3
 8006f5a:	3b01      	subs	r3, #1
 8006f5c:	b29a      	uxth	r2, r3
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  if (hspi->RxXferCount == 0U)
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006f6a:	b29b      	uxth	r3, r3
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d10f      	bne.n	8006f90 <SPI_2linesRxISR_16BIT+0x5e>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	685a      	ldr	r2, [r3, #4]
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006f7e:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006f84:	b29b      	uxth	r3, r3
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d102      	bne.n	8006f90 <SPI_2linesRxISR_16BIT+0x5e>
    {
      SPI_CloseRxTx_ISR(hspi);
 8006f8a:	6878      	ldr	r0, [r7, #4]
 8006f8c:	f000 fa80 	bl	8007490 <SPI_CloseRxTx_ISR>
    }
  }
}
 8006f90:	bf00      	nop
 8006f92:	3708      	adds	r7, #8
 8006f94:	46bd      	mov	sp, r7
 8006f96:	bd80      	pop	{r7, pc}

08006f98 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8006f98:	b580      	push	{r7, lr}
 8006f9a:	b082      	sub	sp, #8
 8006f9c:	af00      	add	r7, sp, #0
 8006f9e:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fa4:	881a      	ldrh	r2, [r3, #0]
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fb0:	1c9a      	adds	r2, r3, #2
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006fba:	b29b      	uxth	r3, r3
 8006fbc:	3b01      	subs	r3, #1
 8006fbe:	b29a      	uxth	r2, r3
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006fc8:	b29b      	uxth	r3, r3
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d110      	bne.n	8006ff0 <SPI_2linesTxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	685a      	ldr	r2, [r3, #4]
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006fdc:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006fe4:	b29b      	uxth	r3, r3
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d102      	bne.n	8006ff0 <SPI_2linesTxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 8006fea:	6878      	ldr	r0, [r7, #4]
 8006fec:	f000 fa50 	bl	8007490 <SPI_CloseRxTx_ISR>
    }
  }
}
 8006ff0:	bf00      	nop
 8006ff2:	3708      	adds	r7, #8
 8006ff4:	46bd      	mov	sp, r7
 8006ff6:	bd80      	pop	{r7, pc}

08006ff8 <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8006ff8:	b580      	push	{r7, lr}
 8006ffa:	b082      	sub	sp, #8
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	f103 020c 	add.w	r2, r3, #12
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800700c:	7812      	ldrb	r2, [r2, #0]
 800700e:	b2d2      	uxtb	r2, r2
 8007010:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007016:	1c5a      	adds	r2, r3, #1
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007022:	b29b      	uxth	r3, r3
 8007024:	3b01      	subs	r3, #1
 8007026:	b29a      	uxth	r2, r3
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007034:	b29b      	uxth	r3, r3
 8007036:	2b00      	cmp	r3, #0
 8007038:	d102      	bne.n	8007040 <SPI_RxISR_8BIT+0x48>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 800703a:	6878      	ldr	r0, [r7, #4]
 800703c:	f000 fa6a 	bl	8007514 <SPI_CloseRx_ISR>
  }
}
 8007040:	bf00      	nop
 8007042:	3708      	adds	r7, #8
 8007044:	46bd      	mov	sp, r7
 8007046:	bd80      	pop	{r7, pc}

08007048 <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8007048:	b580      	push	{r7, lr}
 800704a:	b082      	sub	sp, #8
 800704c:	af00      	add	r7, sp, #0
 800704e:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	68da      	ldr	r2, [r3, #12]
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800705a:	b292      	uxth	r2, r2
 800705c:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007062:	1c9a      	adds	r2, r3, #2
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800706e:	b29b      	uxth	r3, r3
 8007070:	3b01      	subs	r3, #1
 8007072:	b29a      	uxth	r2, r3
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007080:	b29b      	uxth	r3, r3
 8007082:	2b00      	cmp	r3, #0
 8007084:	d102      	bne.n	800708c <SPI_RxISR_16BIT+0x44>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8007086:	6878      	ldr	r0, [r7, #4]
 8007088:	f000 fa44 	bl	8007514 <SPI_CloseRx_ISR>
  }
}
 800708c:	bf00      	nop
 800708e:	3708      	adds	r7, #8
 8007090:	46bd      	mov	sp, r7
 8007092:	bd80      	pop	{r7, pc}

08007094 <SPI_TxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8007094:	b580      	push	{r7, lr}
 8007096:	b082      	sub	sp, #8
 8007098:	af00      	add	r7, sp, #0
 800709a:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	330c      	adds	r3, #12
 80070a6:	7812      	ldrb	r2, [r2, #0]
 80070a8:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070ae:	1c5a      	adds	r2, r3, #1
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80070b8:	b29b      	uxth	r3, r3
 80070ba:	3b01      	subs	r3, #1
 80070bc:	b29a      	uxth	r2, r3
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->TxXferCount == 0U)
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80070c6:	b29b      	uxth	r3, r3
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d102      	bne.n	80070d2 <SPI_TxISR_8BIT+0x3e>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 80070cc:	6878      	ldr	r0, [r7, #4]
 80070ce:	f000 fa51 	bl	8007574 <SPI_CloseTx_ISR>
  }
}
 80070d2:	bf00      	nop
 80070d4:	3708      	adds	r7, #8
 80070d6:	46bd      	mov	sp, r7
 80070d8:	bd80      	pop	{r7, pc}

080070da <SPI_TxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80070da:	b580      	push	{r7, lr}
 80070dc:	b082      	sub	sp, #8
 80070de:	af00      	add	r7, sp, #0
 80070e0:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070e6:	881a      	ldrh	r2, [r3, #0]
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070f2:	1c9a      	adds	r2, r3, #2
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80070fc:	b29b      	uxth	r3, r3
 80070fe:	3b01      	subs	r3, #1
 8007100:	b29a      	uxth	r2, r3
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->TxXferCount == 0U)
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800710a:	b29b      	uxth	r3, r3
 800710c:	2b00      	cmp	r3, #0
 800710e:	d102      	bne.n	8007116 <SPI_TxISR_16BIT+0x3c>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8007110:	6878      	ldr	r0, [r7, #4]
 8007112:	f000 fa2f 	bl	8007574 <SPI_CloseTx_ISR>
  }
}
 8007116:	bf00      	nop
 8007118:	3708      	adds	r7, #8
 800711a:	46bd      	mov	sp, r7
 800711c:	bd80      	pop	{r7, pc}
	...

08007120 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007120:	b580      	push	{r7, lr}
 8007122:	b088      	sub	sp, #32
 8007124:	af00      	add	r7, sp, #0
 8007126:	60f8      	str	r0, [r7, #12]
 8007128:	60b9      	str	r1, [r7, #8]
 800712a:	603b      	str	r3, [r7, #0]
 800712c:	4613      	mov	r3, r2
 800712e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007130:	f7fb fb4e 	bl	80027d0 <HAL_GetTick>
 8007134:	4602      	mov	r2, r0
 8007136:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007138:	1a9b      	subs	r3, r3, r2
 800713a:	683a      	ldr	r2, [r7, #0]
 800713c:	4413      	add	r3, r2
 800713e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007140:	f7fb fb46 	bl	80027d0 <HAL_GetTick>
 8007144:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007146:	4b39      	ldr	r3, [pc, #228]	; (800722c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	015b      	lsls	r3, r3, #5
 800714c:	0d1b      	lsrs	r3, r3, #20
 800714e:	69fa      	ldr	r2, [r7, #28]
 8007150:	fb02 f303 	mul.w	r3, r2, r3
 8007154:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007156:	e054      	b.n	8007202 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007158:	683b      	ldr	r3, [r7, #0]
 800715a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800715e:	d050      	beq.n	8007202 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007160:	f7fb fb36 	bl	80027d0 <HAL_GetTick>
 8007164:	4602      	mov	r2, r0
 8007166:	69bb      	ldr	r3, [r7, #24]
 8007168:	1ad3      	subs	r3, r2, r3
 800716a:	69fa      	ldr	r2, [r7, #28]
 800716c:	429a      	cmp	r2, r3
 800716e:	d902      	bls.n	8007176 <SPI_WaitFlagStateUntilTimeout+0x56>
 8007170:	69fb      	ldr	r3, [r7, #28]
 8007172:	2b00      	cmp	r3, #0
 8007174:	d13d      	bne.n	80071f2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	685a      	ldr	r2, [r3, #4]
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007184:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	685b      	ldr	r3, [r3, #4]
 800718a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800718e:	d111      	bne.n	80071b4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	689b      	ldr	r3, [r3, #8]
 8007194:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007198:	d004      	beq.n	80071a4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	689b      	ldr	r3, [r3, #8]
 800719e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80071a2:	d107      	bne.n	80071b4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	681a      	ldr	r2, [r3, #0]
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80071b2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80071bc:	d10f      	bne.n	80071de <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	681a      	ldr	r2, [r3, #0]
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80071cc:	601a      	str	r2, [r3, #0]
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	681a      	ldr	r2, [r3, #0]
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80071dc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	2201      	movs	r2, #1
 80071e2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	2200      	movs	r2, #0
 80071ea:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80071ee:	2303      	movs	r3, #3
 80071f0:	e017      	b.n	8007222 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80071f2:	697b      	ldr	r3, [r7, #20]
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d101      	bne.n	80071fc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80071f8:	2300      	movs	r3, #0
 80071fa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80071fc:	697b      	ldr	r3, [r7, #20]
 80071fe:	3b01      	subs	r3, #1
 8007200:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	689a      	ldr	r2, [r3, #8]
 8007208:	68bb      	ldr	r3, [r7, #8]
 800720a:	4013      	ands	r3, r2
 800720c:	68ba      	ldr	r2, [r7, #8]
 800720e:	429a      	cmp	r2, r3
 8007210:	bf0c      	ite	eq
 8007212:	2301      	moveq	r3, #1
 8007214:	2300      	movne	r3, #0
 8007216:	b2db      	uxtb	r3, r3
 8007218:	461a      	mov	r2, r3
 800721a:	79fb      	ldrb	r3, [r7, #7]
 800721c:	429a      	cmp	r2, r3
 800721e:	d19b      	bne.n	8007158 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007220:	2300      	movs	r3, #0
}
 8007222:	4618      	mov	r0, r3
 8007224:	3720      	adds	r7, #32
 8007226:	46bd      	mov	sp, r7
 8007228:	bd80      	pop	{r7, pc}
 800722a:	bf00      	nop
 800722c:	20000010 	.word	0x20000010

08007230 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007230:	b580      	push	{r7, lr}
 8007232:	b088      	sub	sp, #32
 8007234:	af00      	add	r7, sp, #0
 8007236:	60f8      	str	r0, [r7, #12]
 8007238:	60b9      	str	r1, [r7, #8]
 800723a:	607a      	str	r2, [r7, #4]
 800723c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800723e:	f7fb fac7 	bl	80027d0 <HAL_GetTick>
 8007242:	4602      	mov	r2, r0
 8007244:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007246:	1a9b      	subs	r3, r3, r2
 8007248:	683a      	ldr	r2, [r7, #0]
 800724a:	4413      	add	r3, r2
 800724c:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800724e:	f7fb fabf 	bl	80027d0 <HAL_GetTick>
 8007252:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8007254:	4b3e      	ldr	r3, [pc, #248]	; (8007350 <SPI_WaitFifoStateUntilTimeout+0x120>)
 8007256:	681a      	ldr	r2, [r3, #0]
 8007258:	4613      	mov	r3, r2
 800725a:	009b      	lsls	r3, r3, #2
 800725c:	4413      	add	r3, r2
 800725e:	00da      	lsls	r2, r3, #3
 8007260:	1ad3      	subs	r3, r2, r3
 8007262:	0d1b      	lsrs	r3, r3, #20
 8007264:	69fa      	ldr	r2, [r7, #28]
 8007266:	fb02 f303 	mul.w	r3, r2, r3
 800726a:	613b      	str	r3, [r7, #16]

  while ((hspi->Instance->SR & Fifo) != State)
 800726c:	e062      	b.n	8007334 <SPI_WaitFifoStateUntilTimeout+0x104>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800726e:	68bb      	ldr	r3, [r7, #8]
 8007270:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8007274:	d109      	bne.n	800728a <SPI_WaitFifoStateUntilTimeout+0x5a>
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	2b00      	cmp	r3, #0
 800727a:	d106      	bne.n	800728a <SPI_WaitFifoStateUntilTimeout+0x5a>
    {
      /* Flush Data Register by a blank read */
      tmpreg = READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	330c      	adds	r3, #12
 8007282:	781b      	ldrb	r3, [r3, #0]
 8007284:	b2db      	uxtb	r3, r3
 8007286:	617b      	str	r3, [r7, #20]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 8007288:	697b      	ldr	r3, [r7, #20]
    }

    if (Timeout != HAL_MAX_DELAY)
 800728a:	683b      	ldr	r3, [r7, #0]
 800728c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007290:	d050      	beq.n	8007334 <SPI_WaitFifoStateUntilTimeout+0x104>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007292:	f7fb fa9d 	bl	80027d0 <HAL_GetTick>
 8007296:	4602      	mov	r2, r0
 8007298:	69bb      	ldr	r3, [r7, #24]
 800729a:	1ad3      	subs	r3, r2, r3
 800729c:	69fa      	ldr	r2, [r7, #28]
 800729e:	429a      	cmp	r2, r3
 80072a0:	d902      	bls.n	80072a8 <SPI_WaitFifoStateUntilTimeout+0x78>
 80072a2:	69fb      	ldr	r3, [r7, #28]
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d13d      	bne.n	8007324 <SPI_WaitFifoStateUntilTimeout+0xf4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	685a      	ldr	r2, [r3, #4]
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80072b6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	685b      	ldr	r3, [r3, #4]
 80072bc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80072c0:	d111      	bne.n	80072e6 <SPI_WaitFifoStateUntilTimeout+0xb6>
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	689b      	ldr	r3, [r3, #8]
 80072c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80072ca:	d004      	beq.n	80072d6 <SPI_WaitFifoStateUntilTimeout+0xa6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	689b      	ldr	r3, [r3, #8]
 80072d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80072d4:	d107      	bne.n	80072e6 <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	681a      	ldr	r2, [r3, #0]
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80072e4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80072ee:	d10f      	bne.n	8007310 <SPI_WaitFifoStateUntilTimeout+0xe0>
        {
          SPI_RESET_CRC(hspi);
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	681a      	ldr	r2, [r3, #0]
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80072fe:	601a      	str	r2, [r3, #0]
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	681a      	ldr	r2, [r3, #0]
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800730e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	2201      	movs	r2, #1
 8007314:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	2200      	movs	r2, #0
 800731c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8007320:	2303      	movs	r3, #3
 8007322:	e010      	b.n	8007346 <SPI_WaitFifoStateUntilTimeout+0x116>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8007324:	693b      	ldr	r3, [r7, #16]
 8007326:	2b00      	cmp	r3, #0
 8007328:	d101      	bne.n	800732e <SPI_WaitFifoStateUntilTimeout+0xfe>
      {
        tmp_timeout = 0U;
 800732a:	2300      	movs	r3, #0
 800732c:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 800732e:	693b      	ldr	r3, [r7, #16]
 8007330:	3b01      	subs	r3, #1
 8007332:	613b      	str	r3, [r7, #16]
  while ((hspi->Instance->SR & Fifo) != State)
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	689a      	ldr	r2, [r3, #8]
 800733a:	68bb      	ldr	r3, [r7, #8]
 800733c:	4013      	ands	r3, r2
 800733e:	687a      	ldr	r2, [r7, #4]
 8007340:	429a      	cmp	r2, r3
 8007342:	d194      	bne.n	800726e <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 8007344:	2300      	movs	r3, #0
}
 8007346:	4618      	mov	r0, r3
 8007348:	3720      	adds	r7, #32
 800734a:	46bd      	mov	sp, r7
 800734c:	bd80      	pop	{r7, pc}
 800734e:	bf00      	nop
 8007350:	20000010 	.word	0x20000010

08007354 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007354:	b580      	push	{r7, lr}
 8007356:	b086      	sub	sp, #24
 8007358:	af02      	add	r7, sp, #8
 800735a:	60f8      	str	r0, [r7, #12]
 800735c:	60b9      	str	r1, [r7, #8]
 800735e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	685b      	ldr	r3, [r3, #4]
 8007364:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007368:	d111      	bne.n	800738e <SPI_EndRxTransaction+0x3a>
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	689b      	ldr	r3, [r3, #8]
 800736e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007372:	d004      	beq.n	800737e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	689b      	ldr	r3, [r3, #8]
 8007378:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800737c:	d107      	bne.n	800738e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	681a      	ldr	r2, [r3, #0]
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800738c:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	9300      	str	r3, [sp, #0]
 8007392:	68bb      	ldr	r3, [r7, #8]
 8007394:	2200      	movs	r2, #0
 8007396:	2180      	movs	r1, #128	; 0x80
 8007398:	68f8      	ldr	r0, [r7, #12]
 800739a:	f7ff fec1 	bl	8007120 <SPI_WaitFlagStateUntilTimeout>
 800739e:	4603      	mov	r3, r0
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d007      	beq.n	80073b4 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80073a8:	f043 0220 	orr.w	r2, r3, #32
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80073b0:	2303      	movs	r3, #3
 80073b2:	e023      	b.n	80073fc <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	685b      	ldr	r3, [r3, #4]
 80073b8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80073bc:	d11d      	bne.n	80073fa <SPI_EndRxTransaction+0xa6>
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	689b      	ldr	r3, [r3, #8]
 80073c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80073c6:	d004      	beq.n	80073d2 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	689b      	ldr	r3, [r3, #8]
 80073cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80073d0:	d113      	bne.n	80073fa <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	9300      	str	r3, [sp, #0]
 80073d6:	68bb      	ldr	r3, [r7, #8]
 80073d8:	2200      	movs	r2, #0
 80073da:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80073de:	68f8      	ldr	r0, [r7, #12]
 80073e0:	f7ff ff26 	bl	8007230 <SPI_WaitFifoStateUntilTimeout>
 80073e4:	4603      	mov	r3, r0
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d007      	beq.n	80073fa <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80073ee:	f043 0220 	orr.w	r2, r3, #32
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80073f6:	2303      	movs	r3, #3
 80073f8:	e000      	b.n	80073fc <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 80073fa:	2300      	movs	r3, #0
}
 80073fc:	4618      	mov	r0, r3
 80073fe:	3710      	adds	r7, #16
 8007400:	46bd      	mov	sp, r7
 8007402:	bd80      	pop	{r7, pc}

08007404 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007404:	b580      	push	{r7, lr}
 8007406:	b086      	sub	sp, #24
 8007408:	af02      	add	r7, sp, #8
 800740a:	60f8      	str	r0, [r7, #12]
 800740c:	60b9      	str	r1, [r7, #8]
 800740e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	9300      	str	r3, [sp, #0]
 8007414:	68bb      	ldr	r3, [r7, #8]
 8007416:	2200      	movs	r2, #0
 8007418:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800741c:	68f8      	ldr	r0, [r7, #12]
 800741e:	f7ff ff07 	bl	8007230 <SPI_WaitFifoStateUntilTimeout>
 8007422:	4603      	mov	r3, r0
 8007424:	2b00      	cmp	r3, #0
 8007426:	d007      	beq.n	8007438 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800742c:	f043 0220 	orr.w	r2, r3, #32
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007434:	2303      	movs	r3, #3
 8007436:	e027      	b.n	8007488 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	9300      	str	r3, [sp, #0]
 800743c:	68bb      	ldr	r3, [r7, #8]
 800743e:	2200      	movs	r2, #0
 8007440:	2180      	movs	r1, #128	; 0x80
 8007442:	68f8      	ldr	r0, [r7, #12]
 8007444:	f7ff fe6c 	bl	8007120 <SPI_WaitFlagStateUntilTimeout>
 8007448:	4603      	mov	r3, r0
 800744a:	2b00      	cmp	r3, #0
 800744c:	d007      	beq.n	800745e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007452:	f043 0220 	orr.w	r2, r3, #32
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800745a:	2303      	movs	r3, #3
 800745c:	e014      	b.n	8007488 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	9300      	str	r3, [sp, #0]
 8007462:	68bb      	ldr	r3, [r7, #8]
 8007464:	2200      	movs	r2, #0
 8007466:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800746a:	68f8      	ldr	r0, [r7, #12]
 800746c:	f7ff fee0 	bl	8007230 <SPI_WaitFifoStateUntilTimeout>
 8007470:	4603      	mov	r3, r0
 8007472:	2b00      	cmp	r3, #0
 8007474:	d007      	beq.n	8007486 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800747a:	f043 0220 	orr.w	r2, r3, #32
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007482:	2303      	movs	r3, #3
 8007484:	e000      	b.n	8007488 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8007486:	2300      	movs	r3, #0
}
 8007488:	4618      	mov	r0, r3
 800748a:	3710      	adds	r7, #16
 800748c:	46bd      	mov	sp, r7
 800748e:	bd80      	pop	{r7, pc}

08007490 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 8007490:	b580      	push	{r7, lr}
 8007492:	b084      	sub	sp, #16
 8007494:	af00      	add	r7, sp, #0
 8007496:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007498:	f7fb f99a 	bl	80027d0 <HAL_GetTick>
 800749c:	60f8      	str	r0, [r7, #12]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	685a      	ldr	r2, [r3, #4]
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	f022 0220 	bic.w	r2, r2, #32
 80074ac:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80074ae:	68fa      	ldr	r2, [r7, #12]
 80074b0:	2164      	movs	r1, #100	; 0x64
 80074b2:	6878      	ldr	r0, [r7, #4]
 80074b4:	f7ff ffa6 	bl	8007404 <SPI_EndRxTxTransaction>
 80074b8:	4603      	mov	r3, r0
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d005      	beq.n	80074ca <SPI_CloseRxTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80074c2:	f043 0220 	orr.w	r2, r3, #32
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	661a      	str	r2, [r3, #96]	; 0x60
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d115      	bne.n	80074fe <SPI_CloseRxTx_ISR+0x6e>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80074d8:	b2db      	uxtb	r3, r3
 80074da:	2b04      	cmp	r3, #4
 80074dc:	d107      	bne.n	80074ee <SPI_CloseRxTx_ISR+0x5e>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	2201      	movs	r2, #1
 80074e2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 80074e6:	6878      	ldr	r0, [r7, #4]
 80074e8:	f003 fd02 	bl	800aef0 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 80074ec:	e00e      	b.n	800750c <SPI_CloseRxTx_ISR+0x7c>
        hspi->State = HAL_SPI_STATE_READY;
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	2201      	movs	r2, #1
 80074f2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        HAL_SPI_TxRxCpltCallback(hspi);
 80074f6:	6878      	ldr	r0, [r7, #4]
 80074f8:	f7ff fc4a 	bl	8006d90 <HAL_SPI_TxRxCpltCallback>
}
 80074fc:	e006      	b.n	800750c <SPI_CloseRxTx_ISR+0x7c>
      hspi->State = HAL_SPI_STATE_READY;
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	2201      	movs	r2, #1
 8007502:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      HAL_SPI_ErrorCallback(hspi);
 8007506:	6878      	ldr	r0, [r7, #4]
 8007508:	f7ff fc4c 	bl	8006da4 <HAL_SPI_ErrorCallback>
}
 800750c:	bf00      	nop
 800750e:	3710      	adds	r7, #16
 8007510:	46bd      	mov	sp, r7
 8007512:	bd80      	pop	{r7, pc}

08007514 <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 8007514:	b580      	push	{r7, lr}
 8007516:	b082      	sub	sp, #8
 8007518:	af00      	add	r7, sp, #0
 800751a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	685a      	ldr	r2, [r3, #4]
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800752a:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 800752c:	f7fb f950 	bl	80027d0 <HAL_GetTick>
 8007530:	4603      	mov	r3, r0
 8007532:	461a      	mov	r2, r3
 8007534:	2164      	movs	r1, #100	; 0x64
 8007536:	6878      	ldr	r0, [r7, #4]
 8007538:	f7ff ff0c 	bl	8007354 <SPI_EndRxTransaction>
 800753c:	4603      	mov	r3, r0
 800753e:	2b00      	cmp	r3, #0
 8007540:	d005      	beq.n	800754e <SPI_CloseRx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007546:	f043 0220 	orr.w	r2, r3, #32
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	661a      	str	r2, [r3, #96]	; 0x60
  }
  hspi->State = HAL_SPI_STATE_READY;
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	2201      	movs	r2, #1
 8007552:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800755a:	2b00      	cmp	r3, #0
 800755c:	d103      	bne.n	8007566 <SPI_CloseRx_ISR+0x52>
    {
      /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 800755e:	6878      	ldr	r0, [r7, #4]
 8007560:	f003 fcc6 	bl	800aef0 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8007564:	e002      	b.n	800756c <SPI_CloseRx_ISR+0x58>
      HAL_SPI_ErrorCallback(hspi);
 8007566:	6878      	ldr	r0, [r7, #4]
 8007568:	f7ff fc1c 	bl	8006da4 <HAL_SPI_ErrorCallback>
}
 800756c:	bf00      	nop
 800756e:	3708      	adds	r7, #8
 8007570:	46bd      	mov	sp, r7
 8007572:	bd80      	pop	{r7, pc}

08007574 <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 8007574:	b580      	push	{r7, lr}
 8007576:	b084      	sub	sp, #16
 8007578:	af00      	add	r7, sp, #0
 800757a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800757c:	f7fb f928 	bl	80027d0 <HAL_GetTick>
 8007580:	60f8      	str	r0, [r7, #12]

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	685a      	ldr	r2, [r3, #4]
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007590:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8007592:	68fa      	ldr	r2, [r7, #12]
 8007594:	2164      	movs	r1, #100	; 0x64
 8007596:	6878      	ldr	r0, [r7, #4]
 8007598:	f7ff ff34 	bl	8007404 <SPI_EndRxTxTransaction>
 800759c:	4603      	mov	r3, r0
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d005      	beq.n	80075ae <SPI_CloseTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80075a6:	f043 0220 	orr.w	r2, r3, #32
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	689b      	ldr	r3, [r3, #8]
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d10a      	bne.n	80075cc <SPI_CloseTx_ISR+0x58>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80075b6:	2300      	movs	r3, #0
 80075b8:	60bb      	str	r3, [r7, #8]
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	68db      	ldr	r3, [r3, #12]
 80075c0:	60bb      	str	r3, [r7, #8]
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	689b      	ldr	r3, [r3, #8]
 80075c8:	60bb      	str	r3, [r7, #8]
 80075ca:	68bb      	ldr	r3, [r7, #8]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	2201      	movs	r2, #1
 80075d0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d003      	beq.n	80075e4 <SPI_CloseTx_ISR+0x70>
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 80075dc:	6878      	ldr	r0, [r7, #4]
 80075de:	f7ff fbe1 	bl	8006da4 <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 80075e2:	e002      	b.n	80075ea <SPI_CloseTx_ISR+0x76>
    HAL_SPI_TxCpltCallback(hspi);
 80075e4:	6878      	ldr	r0, [r7, #4]
 80075e6:	f003 fc97 	bl	800af18 <HAL_SPI_TxCpltCallback>
}
 80075ea:	bf00      	nop
 80075ec:	3710      	adds	r7, #16
 80075ee:	46bd      	mov	sp, r7
 80075f0:	bd80      	pop	{r7, pc}

080075f2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80075f2:	b580      	push	{r7, lr}
 80075f4:	b082      	sub	sp, #8
 80075f6:	af00      	add	r7, sp, #0
 80075f8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d101      	bne.n	8007604 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007600:	2301      	movs	r3, #1
 8007602:	e049      	b.n	8007698 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800760a:	b2db      	uxtb	r3, r3
 800760c:	2b00      	cmp	r3, #0
 800760e:	d106      	bne.n	800761e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	2200      	movs	r2, #0
 8007614:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007618:	6878      	ldr	r0, [r7, #4]
 800761a:	f7fa fd75 	bl	8002108 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	2202      	movs	r2, #2
 8007622:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681a      	ldr	r2, [r3, #0]
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	3304      	adds	r3, #4
 800762e:	4619      	mov	r1, r3
 8007630:	4610      	mov	r0, r2
 8007632:	f000 f9ed 	bl	8007a10 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	2201      	movs	r2, #1
 800763a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	2201      	movs	r2, #1
 8007642:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	2201      	movs	r2, #1
 800764a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	2201      	movs	r2, #1
 8007652:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	2201      	movs	r2, #1
 800765a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	2201      	movs	r2, #1
 8007662:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	2201      	movs	r2, #1
 800766a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	2201      	movs	r2, #1
 8007672:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	2201      	movs	r2, #1
 800767a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	2201      	movs	r2, #1
 8007682:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	2201      	movs	r2, #1
 800768a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	2201      	movs	r2, #1
 8007692:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007696:	2300      	movs	r3, #0
}
 8007698:	4618      	mov	r0, r3
 800769a:	3708      	adds	r7, #8
 800769c:	46bd      	mov	sp, r7
 800769e:	bd80      	pop	{r7, pc}

080076a0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80076a0:	b480      	push	{r7}
 80076a2:	b085      	sub	sp, #20
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80076ae:	b2db      	uxtb	r3, r3
 80076b0:	2b01      	cmp	r3, #1
 80076b2:	d001      	beq.n	80076b8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80076b4:	2301      	movs	r3, #1
 80076b6:	e04f      	b.n	8007758 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	2202      	movs	r2, #2
 80076bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	68da      	ldr	r2, [r3, #12]
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	f042 0201 	orr.w	r2, r2, #1
 80076ce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	4a23      	ldr	r2, [pc, #140]	; (8007764 <HAL_TIM_Base_Start_IT+0xc4>)
 80076d6:	4293      	cmp	r3, r2
 80076d8:	d01d      	beq.n	8007716 <HAL_TIM_Base_Start_IT+0x76>
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80076e2:	d018      	beq.n	8007716 <HAL_TIM_Base_Start_IT+0x76>
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	4a1f      	ldr	r2, [pc, #124]	; (8007768 <HAL_TIM_Base_Start_IT+0xc8>)
 80076ea:	4293      	cmp	r3, r2
 80076ec:	d013      	beq.n	8007716 <HAL_TIM_Base_Start_IT+0x76>
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	4a1e      	ldr	r2, [pc, #120]	; (800776c <HAL_TIM_Base_Start_IT+0xcc>)
 80076f4:	4293      	cmp	r3, r2
 80076f6:	d00e      	beq.n	8007716 <HAL_TIM_Base_Start_IT+0x76>
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	4a1c      	ldr	r2, [pc, #112]	; (8007770 <HAL_TIM_Base_Start_IT+0xd0>)
 80076fe:	4293      	cmp	r3, r2
 8007700:	d009      	beq.n	8007716 <HAL_TIM_Base_Start_IT+0x76>
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	4a1b      	ldr	r2, [pc, #108]	; (8007774 <HAL_TIM_Base_Start_IT+0xd4>)
 8007708:	4293      	cmp	r3, r2
 800770a:	d004      	beq.n	8007716 <HAL_TIM_Base_Start_IT+0x76>
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	4a19      	ldr	r2, [pc, #100]	; (8007778 <HAL_TIM_Base_Start_IT+0xd8>)
 8007712:	4293      	cmp	r3, r2
 8007714:	d115      	bne.n	8007742 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	689a      	ldr	r2, [r3, #8]
 800771c:	4b17      	ldr	r3, [pc, #92]	; (800777c <HAL_TIM_Base_Start_IT+0xdc>)
 800771e:	4013      	ands	r3, r2
 8007720:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	2b06      	cmp	r3, #6
 8007726:	d015      	beq.n	8007754 <HAL_TIM_Base_Start_IT+0xb4>
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800772e:	d011      	beq.n	8007754 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	681a      	ldr	r2, [r3, #0]
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	f042 0201 	orr.w	r2, r2, #1
 800773e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007740:	e008      	b.n	8007754 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	681a      	ldr	r2, [r3, #0]
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	f042 0201 	orr.w	r2, r2, #1
 8007750:	601a      	str	r2, [r3, #0]
 8007752:	e000      	b.n	8007756 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007754:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007756:	2300      	movs	r3, #0
}
 8007758:	4618      	mov	r0, r3
 800775a:	3714      	adds	r7, #20
 800775c:	46bd      	mov	sp, r7
 800775e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007762:	4770      	bx	lr
 8007764:	40012c00 	.word	0x40012c00
 8007768:	40000400 	.word	0x40000400
 800776c:	40000800 	.word	0x40000800
 8007770:	40000c00 	.word	0x40000c00
 8007774:	40013400 	.word	0x40013400
 8007778:	40014000 	.word	0x40014000
 800777c:	00010007 	.word	0x00010007

08007780 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007780:	b580      	push	{r7, lr}
 8007782:	b082      	sub	sp, #8
 8007784:	af00      	add	r7, sp, #0
 8007786:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	691b      	ldr	r3, [r3, #16]
 800778e:	f003 0302 	and.w	r3, r3, #2
 8007792:	2b02      	cmp	r3, #2
 8007794:	d122      	bne.n	80077dc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	68db      	ldr	r3, [r3, #12]
 800779c:	f003 0302 	and.w	r3, r3, #2
 80077a0:	2b02      	cmp	r3, #2
 80077a2:	d11b      	bne.n	80077dc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	f06f 0202 	mvn.w	r2, #2
 80077ac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	2201      	movs	r2, #1
 80077b2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	699b      	ldr	r3, [r3, #24]
 80077ba:	f003 0303 	and.w	r3, r3, #3
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d003      	beq.n	80077ca <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80077c2:	6878      	ldr	r0, [r7, #4]
 80077c4:	f000 f905 	bl	80079d2 <HAL_TIM_IC_CaptureCallback>
 80077c8:	e005      	b.n	80077d6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80077ca:	6878      	ldr	r0, [r7, #4]
 80077cc:	f000 f8f7 	bl	80079be <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80077d0:	6878      	ldr	r0, [r7, #4]
 80077d2:	f000 f908 	bl	80079e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	2200      	movs	r2, #0
 80077da:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	691b      	ldr	r3, [r3, #16]
 80077e2:	f003 0304 	and.w	r3, r3, #4
 80077e6:	2b04      	cmp	r3, #4
 80077e8:	d122      	bne.n	8007830 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	68db      	ldr	r3, [r3, #12]
 80077f0:	f003 0304 	and.w	r3, r3, #4
 80077f4:	2b04      	cmp	r3, #4
 80077f6:	d11b      	bne.n	8007830 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	f06f 0204 	mvn.w	r2, #4
 8007800:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	2202      	movs	r2, #2
 8007806:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	699b      	ldr	r3, [r3, #24]
 800780e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007812:	2b00      	cmp	r3, #0
 8007814:	d003      	beq.n	800781e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007816:	6878      	ldr	r0, [r7, #4]
 8007818:	f000 f8db 	bl	80079d2 <HAL_TIM_IC_CaptureCallback>
 800781c:	e005      	b.n	800782a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800781e:	6878      	ldr	r0, [r7, #4]
 8007820:	f000 f8cd 	bl	80079be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007824:	6878      	ldr	r0, [r7, #4]
 8007826:	f000 f8de 	bl	80079e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	2200      	movs	r2, #0
 800782e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	691b      	ldr	r3, [r3, #16]
 8007836:	f003 0308 	and.w	r3, r3, #8
 800783a:	2b08      	cmp	r3, #8
 800783c:	d122      	bne.n	8007884 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	68db      	ldr	r3, [r3, #12]
 8007844:	f003 0308 	and.w	r3, r3, #8
 8007848:	2b08      	cmp	r3, #8
 800784a:	d11b      	bne.n	8007884 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	f06f 0208 	mvn.w	r2, #8
 8007854:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	2204      	movs	r2, #4
 800785a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	69db      	ldr	r3, [r3, #28]
 8007862:	f003 0303 	and.w	r3, r3, #3
 8007866:	2b00      	cmp	r3, #0
 8007868:	d003      	beq.n	8007872 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800786a:	6878      	ldr	r0, [r7, #4]
 800786c:	f000 f8b1 	bl	80079d2 <HAL_TIM_IC_CaptureCallback>
 8007870:	e005      	b.n	800787e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007872:	6878      	ldr	r0, [r7, #4]
 8007874:	f000 f8a3 	bl	80079be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007878:	6878      	ldr	r0, [r7, #4]
 800787a:	f000 f8b4 	bl	80079e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	2200      	movs	r2, #0
 8007882:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	691b      	ldr	r3, [r3, #16]
 800788a:	f003 0310 	and.w	r3, r3, #16
 800788e:	2b10      	cmp	r3, #16
 8007890:	d122      	bne.n	80078d8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	68db      	ldr	r3, [r3, #12]
 8007898:	f003 0310 	and.w	r3, r3, #16
 800789c:	2b10      	cmp	r3, #16
 800789e:	d11b      	bne.n	80078d8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	f06f 0210 	mvn.w	r2, #16
 80078a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	2208      	movs	r2, #8
 80078ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	69db      	ldr	r3, [r3, #28]
 80078b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d003      	beq.n	80078c6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80078be:	6878      	ldr	r0, [r7, #4]
 80078c0:	f000 f887 	bl	80079d2 <HAL_TIM_IC_CaptureCallback>
 80078c4:	e005      	b.n	80078d2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80078c6:	6878      	ldr	r0, [r7, #4]
 80078c8:	f000 f879 	bl	80079be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80078cc:	6878      	ldr	r0, [r7, #4]
 80078ce:	f000 f88a 	bl	80079e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	2200      	movs	r2, #0
 80078d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	691b      	ldr	r3, [r3, #16]
 80078de:	f003 0301 	and.w	r3, r3, #1
 80078e2:	2b01      	cmp	r3, #1
 80078e4:	d10e      	bne.n	8007904 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	68db      	ldr	r3, [r3, #12]
 80078ec:	f003 0301 	and.w	r3, r3, #1
 80078f0:	2b01      	cmp	r3, #1
 80078f2:	d107      	bne.n	8007904 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	f06f 0201 	mvn.w	r2, #1
 80078fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80078fe:	6878      	ldr	r0, [r7, #4]
 8007900:	f7fa f842 	bl	8001988 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	691b      	ldr	r3, [r3, #16]
 800790a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800790e:	2b80      	cmp	r3, #128	; 0x80
 8007910:	d10e      	bne.n	8007930 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	68db      	ldr	r3, [r3, #12]
 8007918:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800791c:	2b80      	cmp	r3, #128	; 0x80
 800791e:	d107      	bne.n	8007930 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007928:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800792a:	6878      	ldr	r0, [r7, #4]
 800792c:	f000 f99c 	bl	8007c68 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	691b      	ldr	r3, [r3, #16]
 8007936:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800793a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800793e:	d10e      	bne.n	800795e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	68db      	ldr	r3, [r3, #12]
 8007946:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800794a:	2b80      	cmp	r3, #128	; 0x80
 800794c:	d107      	bne.n	800795e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007956:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007958:	6878      	ldr	r0, [r7, #4]
 800795a:	f000 f98f 	bl	8007c7c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	691b      	ldr	r3, [r3, #16]
 8007964:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007968:	2b40      	cmp	r3, #64	; 0x40
 800796a:	d10e      	bne.n	800798a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	68db      	ldr	r3, [r3, #12]
 8007972:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007976:	2b40      	cmp	r3, #64	; 0x40
 8007978:	d107      	bne.n	800798a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007982:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007984:	6878      	ldr	r0, [r7, #4]
 8007986:	f000 f838 	bl	80079fa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	691b      	ldr	r3, [r3, #16]
 8007990:	f003 0320 	and.w	r3, r3, #32
 8007994:	2b20      	cmp	r3, #32
 8007996:	d10e      	bne.n	80079b6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	68db      	ldr	r3, [r3, #12]
 800799e:	f003 0320 	and.w	r3, r3, #32
 80079a2:	2b20      	cmp	r3, #32
 80079a4:	d107      	bne.n	80079b6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	f06f 0220 	mvn.w	r2, #32
 80079ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80079b0:	6878      	ldr	r0, [r7, #4]
 80079b2:	f000 f94f 	bl	8007c54 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80079b6:	bf00      	nop
 80079b8:	3708      	adds	r7, #8
 80079ba:	46bd      	mov	sp, r7
 80079bc:	bd80      	pop	{r7, pc}

080079be <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80079be:	b480      	push	{r7}
 80079c0:	b083      	sub	sp, #12
 80079c2:	af00      	add	r7, sp, #0
 80079c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80079c6:	bf00      	nop
 80079c8:	370c      	adds	r7, #12
 80079ca:	46bd      	mov	sp, r7
 80079cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d0:	4770      	bx	lr

080079d2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80079d2:	b480      	push	{r7}
 80079d4:	b083      	sub	sp, #12
 80079d6:	af00      	add	r7, sp, #0
 80079d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80079da:	bf00      	nop
 80079dc:	370c      	adds	r7, #12
 80079de:	46bd      	mov	sp, r7
 80079e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e4:	4770      	bx	lr

080079e6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80079e6:	b480      	push	{r7}
 80079e8:	b083      	sub	sp, #12
 80079ea:	af00      	add	r7, sp, #0
 80079ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80079ee:	bf00      	nop
 80079f0:	370c      	adds	r7, #12
 80079f2:	46bd      	mov	sp, r7
 80079f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f8:	4770      	bx	lr

080079fa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80079fa:	b480      	push	{r7}
 80079fc:	b083      	sub	sp, #12
 80079fe:	af00      	add	r7, sp, #0
 8007a00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007a02:	bf00      	nop
 8007a04:	370c      	adds	r7, #12
 8007a06:	46bd      	mov	sp, r7
 8007a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a0c:	4770      	bx	lr
	...

08007a10 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007a10:	b480      	push	{r7}
 8007a12:	b085      	sub	sp, #20
 8007a14:	af00      	add	r7, sp, #0
 8007a16:	6078      	str	r0, [r7, #4]
 8007a18:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	4a40      	ldr	r2, [pc, #256]	; (8007b24 <TIM_Base_SetConfig+0x114>)
 8007a24:	4293      	cmp	r3, r2
 8007a26:	d013      	beq.n	8007a50 <TIM_Base_SetConfig+0x40>
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a2e:	d00f      	beq.n	8007a50 <TIM_Base_SetConfig+0x40>
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	4a3d      	ldr	r2, [pc, #244]	; (8007b28 <TIM_Base_SetConfig+0x118>)
 8007a34:	4293      	cmp	r3, r2
 8007a36:	d00b      	beq.n	8007a50 <TIM_Base_SetConfig+0x40>
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	4a3c      	ldr	r2, [pc, #240]	; (8007b2c <TIM_Base_SetConfig+0x11c>)
 8007a3c:	4293      	cmp	r3, r2
 8007a3e:	d007      	beq.n	8007a50 <TIM_Base_SetConfig+0x40>
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	4a3b      	ldr	r2, [pc, #236]	; (8007b30 <TIM_Base_SetConfig+0x120>)
 8007a44:	4293      	cmp	r3, r2
 8007a46:	d003      	beq.n	8007a50 <TIM_Base_SetConfig+0x40>
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	4a3a      	ldr	r2, [pc, #232]	; (8007b34 <TIM_Base_SetConfig+0x124>)
 8007a4c:	4293      	cmp	r3, r2
 8007a4e:	d108      	bne.n	8007a62 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a56:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007a58:	683b      	ldr	r3, [r7, #0]
 8007a5a:	685b      	ldr	r3, [r3, #4]
 8007a5c:	68fa      	ldr	r2, [r7, #12]
 8007a5e:	4313      	orrs	r3, r2
 8007a60:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	4a2f      	ldr	r2, [pc, #188]	; (8007b24 <TIM_Base_SetConfig+0x114>)
 8007a66:	4293      	cmp	r3, r2
 8007a68:	d01f      	beq.n	8007aaa <TIM_Base_SetConfig+0x9a>
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a70:	d01b      	beq.n	8007aaa <TIM_Base_SetConfig+0x9a>
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	4a2c      	ldr	r2, [pc, #176]	; (8007b28 <TIM_Base_SetConfig+0x118>)
 8007a76:	4293      	cmp	r3, r2
 8007a78:	d017      	beq.n	8007aaa <TIM_Base_SetConfig+0x9a>
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	4a2b      	ldr	r2, [pc, #172]	; (8007b2c <TIM_Base_SetConfig+0x11c>)
 8007a7e:	4293      	cmp	r3, r2
 8007a80:	d013      	beq.n	8007aaa <TIM_Base_SetConfig+0x9a>
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	4a2a      	ldr	r2, [pc, #168]	; (8007b30 <TIM_Base_SetConfig+0x120>)
 8007a86:	4293      	cmp	r3, r2
 8007a88:	d00f      	beq.n	8007aaa <TIM_Base_SetConfig+0x9a>
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	4a29      	ldr	r2, [pc, #164]	; (8007b34 <TIM_Base_SetConfig+0x124>)
 8007a8e:	4293      	cmp	r3, r2
 8007a90:	d00b      	beq.n	8007aaa <TIM_Base_SetConfig+0x9a>
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	4a28      	ldr	r2, [pc, #160]	; (8007b38 <TIM_Base_SetConfig+0x128>)
 8007a96:	4293      	cmp	r3, r2
 8007a98:	d007      	beq.n	8007aaa <TIM_Base_SetConfig+0x9a>
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	4a27      	ldr	r2, [pc, #156]	; (8007b3c <TIM_Base_SetConfig+0x12c>)
 8007a9e:	4293      	cmp	r3, r2
 8007aa0:	d003      	beq.n	8007aaa <TIM_Base_SetConfig+0x9a>
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	4a26      	ldr	r2, [pc, #152]	; (8007b40 <TIM_Base_SetConfig+0x130>)
 8007aa6:	4293      	cmp	r3, r2
 8007aa8:	d108      	bne.n	8007abc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007ab0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007ab2:	683b      	ldr	r3, [r7, #0]
 8007ab4:	68db      	ldr	r3, [r3, #12]
 8007ab6:	68fa      	ldr	r2, [r7, #12]
 8007ab8:	4313      	orrs	r3, r2
 8007aba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007ac2:	683b      	ldr	r3, [r7, #0]
 8007ac4:	695b      	ldr	r3, [r3, #20]
 8007ac6:	4313      	orrs	r3, r2
 8007ac8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	68fa      	ldr	r2, [r7, #12]
 8007ace:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007ad0:	683b      	ldr	r3, [r7, #0]
 8007ad2:	689a      	ldr	r2, [r3, #8]
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007ad8:	683b      	ldr	r3, [r7, #0]
 8007ada:	681a      	ldr	r2, [r3, #0]
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	4a10      	ldr	r2, [pc, #64]	; (8007b24 <TIM_Base_SetConfig+0x114>)
 8007ae4:	4293      	cmp	r3, r2
 8007ae6:	d00f      	beq.n	8007b08 <TIM_Base_SetConfig+0xf8>
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	4a12      	ldr	r2, [pc, #72]	; (8007b34 <TIM_Base_SetConfig+0x124>)
 8007aec:	4293      	cmp	r3, r2
 8007aee:	d00b      	beq.n	8007b08 <TIM_Base_SetConfig+0xf8>
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	4a11      	ldr	r2, [pc, #68]	; (8007b38 <TIM_Base_SetConfig+0x128>)
 8007af4:	4293      	cmp	r3, r2
 8007af6:	d007      	beq.n	8007b08 <TIM_Base_SetConfig+0xf8>
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	4a10      	ldr	r2, [pc, #64]	; (8007b3c <TIM_Base_SetConfig+0x12c>)
 8007afc:	4293      	cmp	r3, r2
 8007afe:	d003      	beq.n	8007b08 <TIM_Base_SetConfig+0xf8>
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	4a0f      	ldr	r2, [pc, #60]	; (8007b40 <TIM_Base_SetConfig+0x130>)
 8007b04:	4293      	cmp	r3, r2
 8007b06:	d103      	bne.n	8007b10 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007b08:	683b      	ldr	r3, [r7, #0]
 8007b0a:	691a      	ldr	r2, [r3, #16]
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	2201      	movs	r2, #1
 8007b14:	615a      	str	r2, [r3, #20]
}
 8007b16:	bf00      	nop
 8007b18:	3714      	adds	r7, #20
 8007b1a:	46bd      	mov	sp, r7
 8007b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b20:	4770      	bx	lr
 8007b22:	bf00      	nop
 8007b24:	40012c00 	.word	0x40012c00
 8007b28:	40000400 	.word	0x40000400
 8007b2c:	40000800 	.word	0x40000800
 8007b30:	40000c00 	.word	0x40000c00
 8007b34:	40013400 	.word	0x40013400
 8007b38:	40014000 	.word	0x40014000
 8007b3c:	40014400 	.word	0x40014400
 8007b40:	40014800 	.word	0x40014800

08007b44 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007b44:	b480      	push	{r7}
 8007b46:	b085      	sub	sp, #20
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	6078      	str	r0, [r7, #4]
 8007b4c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007b54:	2b01      	cmp	r3, #1
 8007b56:	d101      	bne.n	8007b5c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007b58:	2302      	movs	r3, #2
 8007b5a:	e068      	b.n	8007c2e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	2201      	movs	r2, #1
 8007b60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	2202      	movs	r2, #2
 8007b68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	685b      	ldr	r3, [r3, #4]
 8007b72:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	689b      	ldr	r3, [r3, #8]
 8007b7a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	4a2e      	ldr	r2, [pc, #184]	; (8007c3c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8007b82:	4293      	cmp	r3, r2
 8007b84:	d004      	beq.n	8007b90 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	4a2d      	ldr	r2, [pc, #180]	; (8007c40 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007b8c:	4293      	cmp	r3, r2
 8007b8e:	d108      	bne.n	8007ba2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007b96:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007b98:	683b      	ldr	r3, [r7, #0]
 8007b9a:	685b      	ldr	r3, [r3, #4]
 8007b9c:	68fa      	ldr	r2, [r7, #12]
 8007b9e:	4313      	orrs	r3, r2
 8007ba0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ba8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007baa:	683b      	ldr	r3, [r7, #0]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	68fa      	ldr	r2, [r7, #12]
 8007bb0:	4313      	orrs	r3, r2
 8007bb2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	68fa      	ldr	r2, [r7, #12]
 8007bba:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	4a1e      	ldr	r2, [pc, #120]	; (8007c3c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8007bc2:	4293      	cmp	r3, r2
 8007bc4:	d01d      	beq.n	8007c02 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007bce:	d018      	beq.n	8007c02 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	4a1b      	ldr	r2, [pc, #108]	; (8007c44 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007bd6:	4293      	cmp	r3, r2
 8007bd8:	d013      	beq.n	8007c02 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	4a1a      	ldr	r2, [pc, #104]	; (8007c48 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007be0:	4293      	cmp	r3, r2
 8007be2:	d00e      	beq.n	8007c02 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	4a18      	ldr	r2, [pc, #96]	; (8007c4c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007bea:	4293      	cmp	r3, r2
 8007bec:	d009      	beq.n	8007c02 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	4a13      	ldr	r2, [pc, #76]	; (8007c40 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007bf4:	4293      	cmp	r3, r2
 8007bf6:	d004      	beq.n	8007c02 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	4a14      	ldr	r2, [pc, #80]	; (8007c50 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8007bfe:	4293      	cmp	r3, r2
 8007c00:	d10c      	bne.n	8007c1c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007c02:	68bb      	ldr	r3, [r7, #8]
 8007c04:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007c08:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007c0a:	683b      	ldr	r3, [r7, #0]
 8007c0c:	689b      	ldr	r3, [r3, #8]
 8007c0e:	68ba      	ldr	r2, [r7, #8]
 8007c10:	4313      	orrs	r3, r2
 8007c12:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	68ba      	ldr	r2, [r7, #8]
 8007c1a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	2201      	movs	r2, #1
 8007c20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	2200      	movs	r2, #0
 8007c28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007c2c:	2300      	movs	r3, #0
}
 8007c2e:	4618      	mov	r0, r3
 8007c30:	3714      	adds	r7, #20
 8007c32:	46bd      	mov	sp, r7
 8007c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c38:	4770      	bx	lr
 8007c3a:	bf00      	nop
 8007c3c:	40012c00 	.word	0x40012c00
 8007c40:	40013400 	.word	0x40013400
 8007c44:	40000400 	.word	0x40000400
 8007c48:	40000800 	.word	0x40000800
 8007c4c:	40000c00 	.word	0x40000c00
 8007c50:	40014000 	.word	0x40014000

08007c54 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007c54:	b480      	push	{r7}
 8007c56:	b083      	sub	sp, #12
 8007c58:	af00      	add	r7, sp, #0
 8007c5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007c5c:	bf00      	nop
 8007c5e:	370c      	adds	r7, #12
 8007c60:	46bd      	mov	sp, r7
 8007c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c66:	4770      	bx	lr

08007c68 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007c68:	b480      	push	{r7}
 8007c6a:	b083      	sub	sp, #12
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007c70:	bf00      	nop
 8007c72:	370c      	adds	r7, #12
 8007c74:	46bd      	mov	sp, r7
 8007c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c7a:	4770      	bx	lr

08007c7c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007c7c:	b480      	push	{r7}
 8007c7e:	b083      	sub	sp, #12
 8007c80:	af00      	add	r7, sp, #0
 8007c82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007c84:	bf00      	nop
 8007c86:	370c      	adds	r7, #12
 8007c88:	46bd      	mov	sp, r7
 8007c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c8e:	4770      	bx	lr

08007c90 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007c90:	b580      	push	{r7, lr}
 8007c92:	b082      	sub	sp, #8
 8007c94:	af00      	add	r7, sp, #0
 8007c96:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d101      	bne.n	8007ca2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007c9e:	2301      	movs	r3, #1
 8007ca0:	e040      	b.n	8007d24 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d106      	bne.n	8007cb8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	2200      	movs	r2, #0
 8007cae:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007cb2:	6878      	ldr	r0, [r7, #4]
 8007cb4:	f7fa fa4e 	bl	8002154 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	2224      	movs	r2, #36	; 0x24
 8007cbc:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	681a      	ldr	r2, [r3, #0]
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	f022 0201 	bic.w	r2, r2, #1
 8007ccc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007cce:	6878      	ldr	r0, [r7, #4]
 8007cd0:	f000 fb26 	bl	8008320 <UART_SetConfig>
 8007cd4:	4603      	mov	r3, r0
 8007cd6:	2b01      	cmp	r3, #1
 8007cd8:	d101      	bne.n	8007cde <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8007cda:	2301      	movs	r3, #1
 8007cdc:	e022      	b.n	8007d24 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d002      	beq.n	8007cec <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8007ce6:	6878      	ldr	r0, [r7, #4]
 8007ce8:	f000 fdd4 	bl	8008894 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	685a      	ldr	r2, [r3, #4]
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007cfa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	689a      	ldr	r2, [r3, #8]
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007d0a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	681a      	ldr	r2, [r3, #0]
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	f042 0201 	orr.w	r2, r2, #1
 8007d1a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007d1c:	6878      	ldr	r0, [r7, #4]
 8007d1e:	f000 fe5b 	bl	80089d8 <UART_CheckIdleState>
 8007d22:	4603      	mov	r3, r0
}
 8007d24:	4618      	mov	r0, r3
 8007d26:	3708      	adds	r7, #8
 8007d28:	46bd      	mov	sp, r7
 8007d2a:	bd80      	pop	{r7, pc}

08007d2c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007d2c:	b580      	push	{r7, lr}
 8007d2e:	b08a      	sub	sp, #40	; 0x28
 8007d30:	af02      	add	r7, sp, #8
 8007d32:	60f8      	str	r0, [r7, #12]
 8007d34:	60b9      	str	r1, [r7, #8]
 8007d36:	603b      	str	r3, [r7, #0]
 8007d38:	4613      	mov	r3, r2
 8007d3a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007d40:	2b20      	cmp	r3, #32
 8007d42:	f040 8082 	bne.w	8007e4a <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8007d46:	68bb      	ldr	r3, [r7, #8]
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d002      	beq.n	8007d52 <HAL_UART_Transmit+0x26>
 8007d4c:	88fb      	ldrh	r3, [r7, #6]
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d101      	bne.n	8007d56 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8007d52:	2301      	movs	r3, #1
 8007d54:	e07a      	b.n	8007e4c <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8007d5c:	2b01      	cmp	r3, #1
 8007d5e:	d101      	bne.n	8007d64 <HAL_UART_Transmit+0x38>
 8007d60:	2302      	movs	r3, #2
 8007d62:	e073      	b.n	8007e4c <HAL_UART_Transmit+0x120>
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	2201      	movs	r2, #1
 8007d68:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	2200      	movs	r2, #0
 8007d70:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	2221      	movs	r2, #33	; 0x21
 8007d78:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007d7a:	f7fa fd29 	bl	80027d0 <HAL_GetTick>
 8007d7e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	88fa      	ldrh	r2, [r7, #6]
 8007d84:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	88fa      	ldrh	r2, [r7, #6]
 8007d8c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	689b      	ldr	r3, [r3, #8]
 8007d94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d98:	d108      	bne.n	8007dac <HAL_UART_Transmit+0x80>
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	691b      	ldr	r3, [r3, #16]
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d104      	bne.n	8007dac <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8007da2:	2300      	movs	r3, #0
 8007da4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007da6:	68bb      	ldr	r3, [r7, #8]
 8007da8:	61bb      	str	r3, [r7, #24]
 8007daa:	e003      	b.n	8007db4 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8007dac:	68bb      	ldr	r3, [r7, #8]
 8007dae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007db0:	2300      	movs	r3, #0
 8007db2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	2200      	movs	r2, #0
 8007db8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8007dbc:	e02d      	b.n	8007e1a <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007dbe:	683b      	ldr	r3, [r7, #0]
 8007dc0:	9300      	str	r3, [sp, #0]
 8007dc2:	697b      	ldr	r3, [r7, #20]
 8007dc4:	2200      	movs	r2, #0
 8007dc6:	2180      	movs	r1, #128	; 0x80
 8007dc8:	68f8      	ldr	r0, [r7, #12]
 8007dca:	f000 fe4e 	bl	8008a6a <UART_WaitOnFlagUntilTimeout>
 8007dce:	4603      	mov	r3, r0
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d001      	beq.n	8007dd8 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8007dd4:	2303      	movs	r3, #3
 8007dd6:	e039      	b.n	8007e4c <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8007dd8:	69fb      	ldr	r3, [r7, #28]
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d10b      	bne.n	8007df6 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007dde:	69bb      	ldr	r3, [r7, #24]
 8007de0:	881a      	ldrh	r2, [r3, #0]
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007dea:	b292      	uxth	r2, r2
 8007dec:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007dee:	69bb      	ldr	r3, [r7, #24]
 8007df0:	3302      	adds	r3, #2
 8007df2:	61bb      	str	r3, [r7, #24]
 8007df4:	e008      	b.n	8007e08 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007df6:	69fb      	ldr	r3, [r7, #28]
 8007df8:	781a      	ldrb	r2, [r3, #0]
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	b292      	uxth	r2, r2
 8007e00:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007e02:	69fb      	ldr	r3, [r7, #28]
 8007e04:	3301      	adds	r3, #1
 8007e06:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007e0e:	b29b      	uxth	r3, r3
 8007e10:	3b01      	subs	r3, #1
 8007e12:	b29a      	uxth	r2, r3
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007e20:	b29b      	uxth	r3, r3
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d1cb      	bne.n	8007dbe <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007e26:	683b      	ldr	r3, [r7, #0]
 8007e28:	9300      	str	r3, [sp, #0]
 8007e2a:	697b      	ldr	r3, [r7, #20]
 8007e2c:	2200      	movs	r2, #0
 8007e2e:	2140      	movs	r1, #64	; 0x40
 8007e30:	68f8      	ldr	r0, [r7, #12]
 8007e32:	f000 fe1a 	bl	8008a6a <UART_WaitOnFlagUntilTimeout>
 8007e36:	4603      	mov	r3, r0
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d001      	beq.n	8007e40 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8007e3c:	2303      	movs	r3, #3
 8007e3e:	e005      	b.n	8007e4c <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	2220      	movs	r2, #32
 8007e44:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8007e46:	2300      	movs	r3, #0
 8007e48:	e000      	b.n	8007e4c <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8007e4a:	2302      	movs	r3, #2
  }
}
 8007e4c:	4618      	mov	r0, r3
 8007e4e:	3720      	adds	r7, #32
 8007e50:	46bd      	mov	sp, r7
 8007e52:	bd80      	pop	{r7, pc}

08007e54 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007e54:	b580      	push	{r7, lr}
 8007e56:	b084      	sub	sp, #16
 8007e58:	af00      	add	r7, sp, #0
 8007e5a:	60f8      	str	r0, [r7, #12]
 8007e5c:	60b9      	str	r1, [r7, #8]
 8007e5e:	4613      	mov	r3, r2
 8007e60:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007e66:	2b20      	cmp	r3, #32
 8007e68:	d131      	bne.n	8007ece <HAL_UART_Receive_IT+0x7a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007e6a:	68bb      	ldr	r3, [r7, #8]
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d002      	beq.n	8007e76 <HAL_UART_Receive_IT+0x22>
 8007e70:	88fb      	ldrh	r3, [r7, #6]
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d101      	bne.n	8007e7a <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8007e76:	2301      	movs	r3, #1
 8007e78:	e02a      	b.n	8007ed0 <HAL_UART_Receive_IT+0x7c>
    }

    __HAL_LOCK(huart);
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8007e80:	2b01      	cmp	r3, #1
 8007e82:	d101      	bne.n	8007e88 <HAL_UART_Receive_IT+0x34>
 8007e84:	2302      	movs	r3, #2
 8007e86:	e023      	b.n	8007ed0 <HAL_UART_Receive_IT+0x7c>
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	2201      	movs	r2, #1
 8007e8c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	2200      	movs	r2, #0
 8007e94:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	4a0f      	ldr	r2, [pc, #60]	; (8007ed8 <HAL_UART_Receive_IT+0x84>)
 8007e9c:	4293      	cmp	r3, r2
 8007e9e:	d00e      	beq.n	8007ebe <HAL_UART_Receive_IT+0x6a>
    {
      /* Check that USART RTOEN bit is set */
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	685b      	ldr	r3, [r3, #4]
 8007ea6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d007      	beq.n	8007ebe <HAL_UART_Receive_IT+0x6a>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	681a      	ldr	r2, [r3, #0]
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8007ebc:	601a      	str	r2, [r3, #0]
      }
    }

    return(UART_Start_Receive_IT(huart, pData, Size));
 8007ebe:	88fb      	ldrh	r3, [r7, #6]
 8007ec0:	461a      	mov	r2, r3
 8007ec2:	68b9      	ldr	r1, [r7, #8]
 8007ec4:	68f8      	ldr	r0, [r7, #12]
 8007ec6:	f000 fe4d 	bl	8008b64 <UART_Start_Receive_IT>
 8007eca:	4603      	mov	r3, r0
 8007ecc:	e000      	b.n	8007ed0 <HAL_UART_Receive_IT+0x7c>
  }
  else
  {
    return HAL_BUSY;
 8007ece:	2302      	movs	r3, #2
  }
}
 8007ed0:	4618      	mov	r0, r3
 8007ed2:	3710      	adds	r7, #16
 8007ed4:	46bd      	mov	sp, r7
 8007ed6:	bd80      	pop	{r7, pc}
 8007ed8:	40008000 	.word	0x40008000

08007edc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007edc:	b580      	push	{r7, lr}
 8007ede:	b088      	sub	sp, #32
 8007ee0:	af00      	add	r7, sp, #0
 8007ee2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	69db      	ldr	r3, [r3, #28]
 8007eea:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	689b      	ldr	r3, [r3, #8]
 8007efa:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007efc:	69fa      	ldr	r2, [r7, #28]
 8007efe:	f640 030f 	movw	r3, #2063	; 0x80f
 8007f02:	4013      	ands	r3, r2
 8007f04:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8007f06:	693b      	ldr	r3, [r7, #16]
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d113      	bne.n	8007f34 <HAL_UART_IRQHandler+0x58>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8007f0c:	69fb      	ldr	r3, [r7, #28]
 8007f0e:	f003 0320 	and.w	r3, r3, #32
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d00e      	beq.n	8007f34 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007f16:	69bb      	ldr	r3, [r7, #24]
 8007f18:	f003 0320 	and.w	r3, r3, #32
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d009      	beq.n	8007f34 <HAL_UART_IRQHandler+0x58>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	f000 81cf 	beq.w	80082c8 <HAL_UART_IRQHandler+0x3ec>
      {
        huart->RxISR(huart);
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007f2e:	6878      	ldr	r0, [r7, #4]
 8007f30:	4798      	blx	r3
      }
      return;
 8007f32:	e1c9      	b.n	80082c8 <HAL_UART_IRQHandler+0x3ec>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8007f34:	693b      	ldr	r3, [r7, #16]
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	f000 80e8 	beq.w	800810c <HAL_UART_IRQHandler+0x230>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8007f3c:	697b      	ldr	r3, [r7, #20]
 8007f3e:	f003 0301 	and.w	r3, r3, #1
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d105      	bne.n	8007f52 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8007f46:	69ba      	ldr	r2, [r7, #24]
 8007f48:	4b6e      	ldr	r3, [pc, #440]	; (8008104 <HAL_UART_IRQHandler+0x228>)
 8007f4a:	4013      	ands	r3, r2
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	f000 80dd 	beq.w	800810c <HAL_UART_IRQHandler+0x230>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007f52:	69fb      	ldr	r3, [r7, #28]
 8007f54:	f003 0301 	and.w	r3, r3, #1
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d010      	beq.n	8007f7e <HAL_UART_IRQHandler+0xa2>
 8007f5c:	69bb      	ldr	r3, [r7, #24]
 8007f5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d00b      	beq.n	8007f7e <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	2201      	movs	r2, #1
 8007f6c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007f74:	f043 0201 	orr.w	r2, r3, #1
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007f7e:	69fb      	ldr	r3, [r7, #28]
 8007f80:	f003 0302 	and.w	r3, r3, #2
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d010      	beq.n	8007faa <HAL_UART_IRQHandler+0xce>
 8007f88:	697b      	ldr	r3, [r7, #20]
 8007f8a:	f003 0301 	and.w	r3, r3, #1
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d00b      	beq.n	8007faa <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	2202      	movs	r2, #2
 8007f98:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007fa0:	f043 0204 	orr.w	r2, r3, #4
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007faa:	69fb      	ldr	r3, [r7, #28]
 8007fac:	f003 0304 	and.w	r3, r3, #4
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d010      	beq.n	8007fd6 <HAL_UART_IRQHandler+0xfa>
 8007fb4:	697b      	ldr	r3, [r7, #20]
 8007fb6:	f003 0301 	and.w	r3, r3, #1
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d00b      	beq.n	8007fd6 <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	2204      	movs	r2, #4
 8007fc4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007fcc:	f043 0202 	orr.w	r2, r3, #2
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007fd6:	69fb      	ldr	r3, [r7, #28]
 8007fd8:	f003 0308 	and.w	r3, r3, #8
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d015      	beq.n	800800c <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007fe0:	69bb      	ldr	r3, [r7, #24]
 8007fe2:	f003 0320 	and.w	r3, r3, #32
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d104      	bne.n	8007ff4 <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8007fea:	697b      	ldr	r3, [r7, #20]
 8007fec:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d00b      	beq.n	800800c <HAL_UART_IRQHandler+0x130>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	2208      	movs	r2, #8
 8007ffa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008002:	f043 0208 	orr.w	r2, r3, #8
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800800c:	69fb      	ldr	r3, [r7, #28]
 800800e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008012:	2b00      	cmp	r3, #0
 8008014:	d011      	beq.n	800803a <HAL_UART_IRQHandler+0x15e>
 8008016:	69bb      	ldr	r3, [r7, #24]
 8008018:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800801c:	2b00      	cmp	r3, #0
 800801e:	d00c      	beq.n	800803a <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008028:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008030:	f043 0220 	orr.w	r2, r3, #32
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008040:	2b00      	cmp	r3, #0
 8008042:	f000 8143 	beq.w	80082cc <HAL_UART_IRQHandler+0x3f0>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8008046:	69fb      	ldr	r3, [r7, #28]
 8008048:	f003 0320 	and.w	r3, r3, #32
 800804c:	2b00      	cmp	r3, #0
 800804e:	d00c      	beq.n	800806a <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008050:	69bb      	ldr	r3, [r7, #24]
 8008052:	f003 0320 	and.w	r3, r3, #32
 8008056:	2b00      	cmp	r3, #0
 8008058:	d007      	beq.n	800806a <HAL_UART_IRQHandler+0x18e>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800805e:	2b00      	cmp	r3, #0
 8008060:	d003      	beq.n	800806a <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008066:	6878      	ldr	r0, [r7, #4]
 8008068:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008070:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	689b      	ldr	r3, [r3, #8]
 8008078:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800807c:	2b40      	cmp	r3, #64	; 0x40
 800807e:	d004      	beq.n	800808a <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008086:	2b00      	cmp	r3, #0
 8008088:	d031      	beq.n	80080ee <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800808a:	6878      	ldr	r0, [r7, #4]
 800808c:	f000 fdf2 	bl	8008c74 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	689b      	ldr	r3, [r3, #8]
 8008096:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800809a:	2b40      	cmp	r3, #64	; 0x40
 800809c:	d123      	bne.n	80080e6 <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	689a      	ldr	r2, [r3, #8]
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80080ac:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d013      	beq.n	80080de <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080ba:	4a13      	ldr	r2, [pc, #76]	; (8008108 <HAL_UART_IRQHandler+0x22c>)
 80080bc:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080c2:	4618      	mov	r0, r3
 80080c4:	f7fa fe12 	bl	8002cec <HAL_DMA_Abort_IT>
 80080c8:	4603      	mov	r3, r0
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d017      	beq.n	80080fe <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080d4:	687a      	ldr	r2, [r7, #4]
 80080d6:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80080d8:	4610      	mov	r0, r2
 80080da:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80080dc:	e00f      	b.n	80080fe <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80080de:	6878      	ldr	r0, [r7, #4]
 80080e0:	f000 f908 	bl	80082f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80080e4:	e00b      	b.n	80080fe <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80080e6:	6878      	ldr	r0, [r7, #4]
 80080e8:	f000 f904 	bl	80082f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80080ec:	e007      	b.n	80080fe <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80080ee:	6878      	ldr	r0, [r7, #4]
 80080f0:	f000 f900 	bl	80082f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	2200      	movs	r2, #0
 80080f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 80080fc:	e0e6      	b.n	80082cc <HAL_UART_IRQHandler+0x3f0>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80080fe:	bf00      	nop
    return;
 8008100:	e0e4      	b.n	80082cc <HAL_UART_IRQHandler+0x3f0>
 8008102:	bf00      	nop
 8008104:	04000120 	.word	0x04000120
 8008108:	08008cd3 	.word	0x08008cd3

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008110:	2b01      	cmp	r3, #1
 8008112:	f040 80a5 	bne.w	8008260 <HAL_UART_IRQHandler+0x384>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 8008116:	69fb      	ldr	r3, [r7, #28]
 8008118:	f003 0310 	and.w	r3, r3, #16
 800811c:	2b00      	cmp	r3, #0
 800811e:	f000 809f 	beq.w	8008260 <HAL_UART_IRQHandler+0x384>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8008122:	69bb      	ldr	r3, [r7, #24]
 8008124:	f003 0310 	and.w	r3, r3, #16
 8008128:	2b00      	cmp	r3, #0
 800812a:	f000 8099 	beq.w	8008260 <HAL_UART_IRQHandler+0x384>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	2210      	movs	r2, #16
 8008134:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	689b      	ldr	r3, [r3, #8]
 800813c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008140:	2b40      	cmp	r3, #64	; 0x40
 8008142:	d154      	bne.n	80081ee <HAL_UART_IRQHandler+0x312>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	685b      	ldr	r3, [r3, #4]
 800814c:	813b      	strh	r3, [r7, #8]
      if (  (nb_remaining_rx_data > 0U)
 800814e:	893b      	ldrh	r3, [r7, #8]
 8008150:	2b00      	cmp	r3, #0
 8008152:	f000 80bd 	beq.w	80082d0 <HAL_UART_IRQHandler+0x3f4>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800815c:	893a      	ldrh	r2, [r7, #8]
 800815e:	429a      	cmp	r2, r3
 8008160:	f080 80b6 	bcs.w	80082d0 <HAL_UART_IRQHandler+0x3f4>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	893a      	ldrh	r2, [r7, #8]
 8008168:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	f003 0320 	and.w	r3, r3, #32
 8008178:	2b00      	cmp	r3, #0
 800817a:	d12a      	bne.n	80081d2 <HAL_UART_IRQHandler+0x2f6>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	681a      	ldr	r2, [r3, #0]
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800818a:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	689a      	ldr	r2, [r3, #8]
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	f022 0201 	bic.w	r2, r2, #1
 800819a:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	689a      	ldr	r2, [r3, #8]
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80081aa:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	2220      	movs	r2, #32
 80081b0:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	2200      	movs	r2, #0
 80081b6:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	681a      	ldr	r2, [r3, #0]
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	f022 0210 	bic.w	r2, r2, #16
 80081c6:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081cc:	4618      	mov	r0, r3
 80081ce:	f7fa fd4f 	bl	8002c70 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80081de:	b29b      	uxth	r3, r3
 80081e0:	1ad3      	subs	r3, r2, r3
 80081e2:	b29b      	uxth	r3, r3
 80081e4:	4619      	mov	r1, r3
 80081e6:	6878      	ldr	r0, [r7, #4]
 80081e8:	f000 f88e 	bl	8008308 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80081ec:	e070      	b.n	80082d0 <HAL_UART_IRQHandler+0x3f4>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80081fa:	b29b      	uxth	r3, r3
 80081fc:	1ad3      	subs	r3, r2, r3
 80081fe:	817b      	strh	r3, [r7, #10]
      if (  (huart->RxXferCount > 0U)
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008206:	b29b      	uxth	r3, r3
 8008208:	2b00      	cmp	r3, #0
 800820a:	d063      	beq.n	80082d4 <HAL_UART_IRQHandler+0x3f8>
          &&(nb_rx_data > 0U) )
 800820c:	897b      	ldrh	r3, [r7, #10]
 800820e:	2b00      	cmp	r3, #0
 8008210:	d060      	beq.n	80082d4 <HAL_UART_IRQHandler+0x3f8>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	681a      	ldr	r2, [r3, #0]
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008220:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	689a      	ldr	r2, [r3, #8]
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	f022 0201 	bic.w	r2, r2, #1
 8008230:	609a      	str	r2, [r3, #8]
#endif

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	2220      	movs	r2, #32
 8008236:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	2200      	movs	r2, #0
 800823c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	2200      	movs	r2, #0
 8008242:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	681a      	ldr	r2, [r3, #0]
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	f022 0210 	bic.w	r2, r2, #16
 8008252:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008254:	897b      	ldrh	r3, [r7, #10]
 8008256:	4619      	mov	r1, r3
 8008258:	6878      	ldr	r0, [r7, #4]
 800825a:	f000 f855 	bl	8008308 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800825e:	e039      	b.n	80082d4 <HAL_UART_IRQHandler+0x3f8>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008260:	69fb      	ldr	r3, [r7, #28]
 8008262:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008266:	2b00      	cmp	r3, #0
 8008268:	d00d      	beq.n	8008286 <HAL_UART_IRQHandler+0x3aa>
 800826a:	697b      	ldr	r3, [r7, #20]
 800826c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008270:	2b00      	cmp	r3, #0
 8008272:	d008      	beq.n	8008286 <HAL_UART_IRQHandler+0x3aa>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800827c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800827e:	6878      	ldr	r0, [r7, #4]
 8008280:	f000 fe2e 	bl	8008ee0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008284:	e029      	b.n	80082da <HAL_UART_IRQHandler+0x3fe>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8008286:	69fb      	ldr	r3, [r7, #28]
 8008288:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800828c:	2b00      	cmp	r3, #0
 800828e:	d00d      	beq.n	80082ac <HAL_UART_IRQHandler+0x3d0>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8008290:	69bb      	ldr	r3, [r7, #24]
 8008292:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008296:	2b00      	cmp	r3, #0
 8008298:	d008      	beq.n	80082ac <HAL_UART_IRQHandler+0x3d0>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d01a      	beq.n	80082d8 <HAL_UART_IRQHandler+0x3fc>
    {
      huart->TxISR(huart);
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80082a6:	6878      	ldr	r0, [r7, #4]
 80082a8:	4798      	blx	r3
    }
    return;
 80082aa:	e015      	b.n	80082d8 <HAL_UART_IRQHandler+0x3fc>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80082ac:	69fb      	ldr	r3, [r7, #28]
 80082ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d011      	beq.n	80082da <HAL_UART_IRQHandler+0x3fe>
 80082b6:	69bb      	ldr	r3, [r7, #24]
 80082b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d00c      	beq.n	80082da <HAL_UART_IRQHandler+0x3fe>
  {
    UART_EndTransmit_IT(huart);
 80082c0:	6878      	ldr	r0, [r7, #4]
 80082c2:	f000 fd1c 	bl	8008cfe <UART_EndTransmit_IT>
    return;
 80082c6:	e008      	b.n	80082da <HAL_UART_IRQHandler+0x3fe>
      return;
 80082c8:	bf00      	nop
 80082ca:	e006      	b.n	80082da <HAL_UART_IRQHandler+0x3fe>
    return;
 80082cc:	bf00      	nop
 80082ce:	e004      	b.n	80082da <HAL_UART_IRQHandler+0x3fe>
      return;
 80082d0:	bf00      	nop
 80082d2:	e002      	b.n	80082da <HAL_UART_IRQHandler+0x3fe>
      return;
 80082d4:	bf00      	nop
 80082d6:	e000      	b.n	80082da <HAL_UART_IRQHandler+0x3fe>
    return;
 80082d8:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80082da:	3720      	adds	r7, #32
 80082dc:	46bd      	mov	sp, r7
 80082de:	bd80      	pop	{r7, pc}

080082e0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80082e0:	b480      	push	{r7}
 80082e2:	b083      	sub	sp, #12
 80082e4:	af00      	add	r7, sp, #0
 80082e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80082e8:	bf00      	nop
 80082ea:	370c      	adds	r7, #12
 80082ec:	46bd      	mov	sp, r7
 80082ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f2:	4770      	bx	lr

080082f4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80082f4:	b480      	push	{r7}
 80082f6:	b083      	sub	sp, #12
 80082f8:	af00      	add	r7, sp, #0
 80082fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80082fc:	bf00      	nop
 80082fe:	370c      	adds	r7, #12
 8008300:	46bd      	mov	sp, r7
 8008302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008306:	4770      	bx	lr

08008308 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008308:	b480      	push	{r7}
 800830a:	b083      	sub	sp, #12
 800830c:	af00      	add	r7, sp, #0
 800830e:	6078      	str	r0, [r7, #4]
 8008310:	460b      	mov	r3, r1
 8008312:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008314:	bf00      	nop
 8008316:	370c      	adds	r7, #12
 8008318:	46bd      	mov	sp, r7
 800831a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800831e:	4770      	bx	lr

08008320 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008320:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008324:	b08a      	sub	sp, #40	; 0x28
 8008326:	af00      	add	r7, sp, #0
 8008328:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800832a:	2300      	movs	r3, #0
 800832c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	689a      	ldr	r2, [r3, #8]
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	691b      	ldr	r3, [r3, #16]
 8008338:	431a      	orrs	r2, r3
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	695b      	ldr	r3, [r3, #20]
 800833e:	431a      	orrs	r2, r3
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	69db      	ldr	r3, [r3, #28]
 8008344:	4313      	orrs	r3, r2
 8008346:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	681a      	ldr	r2, [r3, #0]
 800834e:	4ba4      	ldr	r3, [pc, #656]	; (80085e0 <UART_SetConfig+0x2c0>)
 8008350:	4013      	ands	r3, r2
 8008352:	68fa      	ldr	r2, [r7, #12]
 8008354:	6812      	ldr	r2, [r2, #0]
 8008356:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008358:	430b      	orrs	r3, r1
 800835a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	685b      	ldr	r3, [r3, #4]
 8008362:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	68da      	ldr	r2, [r3, #12]
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	430a      	orrs	r2, r1
 8008370:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	699b      	ldr	r3, [r3, #24]
 8008376:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	4a99      	ldr	r2, [pc, #612]	; (80085e4 <UART_SetConfig+0x2c4>)
 800837e:	4293      	cmp	r3, r2
 8008380:	d004      	beq.n	800838c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	6a1b      	ldr	r3, [r3, #32]
 8008386:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008388:	4313      	orrs	r3, r2
 800838a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	689b      	ldr	r3, [r3, #8]
 8008392:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800839c:	430a      	orrs	r2, r1
 800839e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	4a90      	ldr	r2, [pc, #576]	; (80085e8 <UART_SetConfig+0x2c8>)
 80083a6:	4293      	cmp	r3, r2
 80083a8:	d126      	bne.n	80083f8 <UART_SetConfig+0xd8>
 80083aa:	4b90      	ldr	r3, [pc, #576]	; (80085ec <UART_SetConfig+0x2cc>)
 80083ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80083b0:	f003 0303 	and.w	r3, r3, #3
 80083b4:	2b03      	cmp	r3, #3
 80083b6:	d81b      	bhi.n	80083f0 <UART_SetConfig+0xd0>
 80083b8:	a201      	add	r2, pc, #4	; (adr r2, 80083c0 <UART_SetConfig+0xa0>)
 80083ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083be:	bf00      	nop
 80083c0:	080083d1 	.word	0x080083d1
 80083c4:	080083e1 	.word	0x080083e1
 80083c8:	080083d9 	.word	0x080083d9
 80083cc:	080083e9 	.word	0x080083e9
 80083d0:	2301      	movs	r3, #1
 80083d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80083d6:	e116      	b.n	8008606 <UART_SetConfig+0x2e6>
 80083d8:	2302      	movs	r3, #2
 80083da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80083de:	e112      	b.n	8008606 <UART_SetConfig+0x2e6>
 80083e0:	2304      	movs	r3, #4
 80083e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80083e6:	e10e      	b.n	8008606 <UART_SetConfig+0x2e6>
 80083e8:	2308      	movs	r3, #8
 80083ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80083ee:	e10a      	b.n	8008606 <UART_SetConfig+0x2e6>
 80083f0:	2310      	movs	r3, #16
 80083f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80083f6:	e106      	b.n	8008606 <UART_SetConfig+0x2e6>
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	4a7c      	ldr	r2, [pc, #496]	; (80085f0 <UART_SetConfig+0x2d0>)
 80083fe:	4293      	cmp	r3, r2
 8008400:	d138      	bne.n	8008474 <UART_SetConfig+0x154>
 8008402:	4b7a      	ldr	r3, [pc, #488]	; (80085ec <UART_SetConfig+0x2cc>)
 8008404:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008408:	f003 030c 	and.w	r3, r3, #12
 800840c:	2b0c      	cmp	r3, #12
 800840e:	d82d      	bhi.n	800846c <UART_SetConfig+0x14c>
 8008410:	a201      	add	r2, pc, #4	; (adr r2, 8008418 <UART_SetConfig+0xf8>)
 8008412:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008416:	bf00      	nop
 8008418:	0800844d 	.word	0x0800844d
 800841c:	0800846d 	.word	0x0800846d
 8008420:	0800846d 	.word	0x0800846d
 8008424:	0800846d 	.word	0x0800846d
 8008428:	0800845d 	.word	0x0800845d
 800842c:	0800846d 	.word	0x0800846d
 8008430:	0800846d 	.word	0x0800846d
 8008434:	0800846d 	.word	0x0800846d
 8008438:	08008455 	.word	0x08008455
 800843c:	0800846d 	.word	0x0800846d
 8008440:	0800846d 	.word	0x0800846d
 8008444:	0800846d 	.word	0x0800846d
 8008448:	08008465 	.word	0x08008465
 800844c:	2300      	movs	r3, #0
 800844e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008452:	e0d8      	b.n	8008606 <UART_SetConfig+0x2e6>
 8008454:	2302      	movs	r3, #2
 8008456:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800845a:	e0d4      	b.n	8008606 <UART_SetConfig+0x2e6>
 800845c:	2304      	movs	r3, #4
 800845e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008462:	e0d0      	b.n	8008606 <UART_SetConfig+0x2e6>
 8008464:	2308      	movs	r3, #8
 8008466:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800846a:	e0cc      	b.n	8008606 <UART_SetConfig+0x2e6>
 800846c:	2310      	movs	r3, #16
 800846e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008472:	e0c8      	b.n	8008606 <UART_SetConfig+0x2e6>
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	4a5e      	ldr	r2, [pc, #376]	; (80085f4 <UART_SetConfig+0x2d4>)
 800847a:	4293      	cmp	r3, r2
 800847c:	d125      	bne.n	80084ca <UART_SetConfig+0x1aa>
 800847e:	4b5b      	ldr	r3, [pc, #364]	; (80085ec <UART_SetConfig+0x2cc>)
 8008480:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008484:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008488:	2b30      	cmp	r3, #48	; 0x30
 800848a:	d016      	beq.n	80084ba <UART_SetConfig+0x19a>
 800848c:	2b30      	cmp	r3, #48	; 0x30
 800848e:	d818      	bhi.n	80084c2 <UART_SetConfig+0x1a2>
 8008490:	2b20      	cmp	r3, #32
 8008492:	d00a      	beq.n	80084aa <UART_SetConfig+0x18a>
 8008494:	2b20      	cmp	r3, #32
 8008496:	d814      	bhi.n	80084c2 <UART_SetConfig+0x1a2>
 8008498:	2b00      	cmp	r3, #0
 800849a:	d002      	beq.n	80084a2 <UART_SetConfig+0x182>
 800849c:	2b10      	cmp	r3, #16
 800849e:	d008      	beq.n	80084b2 <UART_SetConfig+0x192>
 80084a0:	e00f      	b.n	80084c2 <UART_SetConfig+0x1a2>
 80084a2:	2300      	movs	r3, #0
 80084a4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80084a8:	e0ad      	b.n	8008606 <UART_SetConfig+0x2e6>
 80084aa:	2302      	movs	r3, #2
 80084ac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80084b0:	e0a9      	b.n	8008606 <UART_SetConfig+0x2e6>
 80084b2:	2304      	movs	r3, #4
 80084b4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80084b8:	e0a5      	b.n	8008606 <UART_SetConfig+0x2e6>
 80084ba:	2308      	movs	r3, #8
 80084bc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80084c0:	e0a1      	b.n	8008606 <UART_SetConfig+0x2e6>
 80084c2:	2310      	movs	r3, #16
 80084c4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80084c8:	e09d      	b.n	8008606 <UART_SetConfig+0x2e6>
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	4a4a      	ldr	r2, [pc, #296]	; (80085f8 <UART_SetConfig+0x2d8>)
 80084d0:	4293      	cmp	r3, r2
 80084d2:	d125      	bne.n	8008520 <UART_SetConfig+0x200>
 80084d4:	4b45      	ldr	r3, [pc, #276]	; (80085ec <UART_SetConfig+0x2cc>)
 80084d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80084da:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80084de:	2bc0      	cmp	r3, #192	; 0xc0
 80084e0:	d016      	beq.n	8008510 <UART_SetConfig+0x1f0>
 80084e2:	2bc0      	cmp	r3, #192	; 0xc0
 80084e4:	d818      	bhi.n	8008518 <UART_SetConfig+0x1f8>
 80084e6:	2b80      	cmp	r3, #128	; 0x80
 80084e8:	d00a      	beq.n	8008500 <UART_SetConfig+0x1e0>
 80084ea:	2b80      	cmp	r3, #128	; 0x80
 80084ec:	d814      	bhi.n	8008518 <UART_SetConfig+0x1f8>
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d002      	beq.n	80084f8 <UART_SetConfig+0x1d8>
 80084f2:	2b40      	cmp	r3, #64	; 0x40
 80084f4:	d008      	beq.n	8008508 <UART_SetConfig+0x1e8>
 80084f6:	e00f      	b.n	8008518 <UART_SetConfig+0x1f8>
 80084f8:	2300      	movs	r3, #0
 80084fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80084fe:	e082      	b.n	8008606 <UART_SetConfig+0x2e6>
 8008500:	2302      	movs	r3, #2
 8008502:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008506:	e07e      	b.n	8008606 <UART_SetConfig+0x2e6>
 8008508:	2304      	movs	r3, #4
 800850a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800850e:	e07a      	b.n	8008606 <UART_SetConfig+0x2e6>
 8008510:	2308      	movs	r3, #8
 8008512:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008516:	e076      	b.n	8008606 <UART_SetConfig+0x2e6>
 8008518:	2310      	movs	r3, #16
 800851a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800851e:	e072      	b.n	8008606 <UART_SetConfig+0x2e6>
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	4a35      	ldr	r2, [pc, #212]	; (80085fc <UART_SetConfig+0x2dc>)
 8008526:	4293      	cmp	r3, r2
 8008528:	d12a      	bne.n	8008580 <UART_SetConfig+0x260>
 800852a:	4b30      	ldr	r3, [pc, #192]	; (80085ec <UART_SetConfig+0x2cc>)
 800852c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008530:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008534:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008538:	d01a      	beq.n	8008570 <UART_SetConfig+0x250>
 800853a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800853e:	d81b      	bhi.n	8008578 <UART_SetConfig+0x258>
 8008540:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008544:	d00c      	beq.n	8008560 <UART_SetConfig+0x240>
 8008546:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800854a:	d815      	bhi.n	8008578 <UART_SetConfig+0x258>
 800854c:	2b00      	cmp	r3, #0
 800854e:	d003      	beq.n	8008558 <UART_SetConfig+0x238>
 8008550:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008554:	d008      	beq.n	8008568 <UART_SetConfig+0x248>
 8008556:	e00f      	b.n	8008578 <UART_SetConfig+0x258>
 8008558:	2300      	movs	r3, #0
 800855a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800855e:	e052      	b.n	8008606 <UART_SetConfig+0x2e6>
 8008560:	2302      	movs	r3, #2
 8008562:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008566:	e04e      	b.n	8008606 <UART_SetConfig+0x2e6>
 8008568:	2304      	movs	r3, #4
 800856a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800856e:	e04a      	b.n	8008606 <UART_SetConfig+0x2e6>
 8008570:	2308      	movs	r3, #8
 8008572:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008576:	e046      	b.n	8008606 <UART_SetConfig+0x2e6>
 8008578:	2310      	movs	r3, #16
 800857a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800857e:	e042      	b.n	8008606 <UART_SetConfig+0x2e6>
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	4a17      	ldr	r2, [pc, #92]	; (80085e4 <UART_SetConfig+0x2c4>)
 8008586:	4293      	cmp	r3, r2
 8008588:	d13a      	bne.n	8008600 <UART_SetConfig+0x2e0>
 800858a:	4b18      	ldr	r3, [pc, #96]	; (80085ec <UART_SetConfig+0x2cc>)
 800858c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008590:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008594:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008598:	d01a      	beq.n	80085d0 <UART_SetConfig+0x2b0>
 800859a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800859e:	d81b      	bhi.n	80085d8 <UART_SetConfig+0x2b8>
 80085a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80085a4:	d00c      	beq.n	80085c0 <UART_SetConfig+0x2a0>
 80085a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80085aa:	d815      	bhi.n	80085d8 <UART_SetConfig+0x2b8>
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d003      	beq.n	80085b8 <UART_SetConfig+0x298>
 80085b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80085b4:	d008      	beq.n	80085c8 <UART_SetConfig+0x2a8>
 80085b6:	e00f      	b.n	80085d8 <UART_SetConfig+0x2b8>
 80085b8:	2300      	movs	r3, #0
 80085ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80085be:	e022      	b.n	8008606 <UART_SetConfig+0x2e6>
 80085c0:	2302      	movs	r3, #2
 80085c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80085c6:	e01e      	b.n	8008606 <UART_SetConfig+0x2e6>
 80085c8:	2304      	movs	r3, #4
 80085ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80085ce:	e01a      	b.n	8008606 <UART_SetConfig+0x2e6>
 80085d0:	2308      	movs	r3, #8
 80085d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80085d6:	e016      	b.n	8008606 <UART_SetConfig+0x2e6>
 80085d8:	2310      	movs	r3, #16
 80085da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80085de:	e012      	b.n	8008606 <UART_SetConfig+0x2e6>
 80085e0:	efff69f3 	.word	0xefff69f3
 80085e4:	40008000 	.word	0x40008000
 80085e8:	40013800 	.word	0x40013800
 80085ec:	40021000 	.word	0x40021000
 80085f0:	40004400 	.word	0x40004400
 80085f4:	40004800 	.word	0x40004800
 80085f8:	40004c00 	.word	0x40004c00
 80085fc:	40005000 	.word	0x40005000
 8008600:	2310      	movs	r3, #16
 8008602:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	4aa0      	ldr	r2, [pc, #640]	; (800888c <UART_SetConfig+0x56c>)
 800860c:	4293      	cmp	r3, r2
 800860e:	d17a      	bne.n	8008706 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008610:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008614:	2b08      	cmp	r3, #8
 8008616:	d824      	bhi.n	8008662 <UART_SetConfig+0x342>
 8008618:	a201      	add	r2, pc, #4	; (adr r2, 8008620 <UART_SetConfig+0x300>)
 800861a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800861e:	bf00      	nop
 8008620:	08008645 	.word	0x08008645
 8008624:	08008663 	.word	0x08008663
 8008628:	0800864d 	.word	0x0800864d
 800862c:	08008663 	.word	0x08008663
 8008630:	08008653 	.word	0x08008653
 8008634:	08008663 	.word	0x08008663
 8008638:	08008663 	.word	0x08008663
 800863c:	08008663 	.word	0x08008663
 8008640:	0800865b 	.word	0x0800865b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008644:	f7fc fc04 	bl	8004e50 <HAL_RCC_GetPCLK1Freq>
 8008648:	61f8      	str	r0, [r7, #28]
        break;
 800864a:	e010      	b.n	800866e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800864c:	4b90      	ldr	r3, [pc, #576]	; (8008890 <UART_SetConfig+0x570>)
 800864e:	61fb      	str	r3, [r7, #28]
        break;
 8008650:	e00d      	b.n	800866e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008652:	f7fc fb65 	bl	8004d20 <HAL_RCC_GetSysClockFreq>
 8008656:	61f8      	str	r0, [r7, #28]
        break;
 8008658:	e009      	b.n	800866e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800865a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800865e:	61fb      	str	r3, [r7, #28]
        break;
 8008660:	e005      	b.n	800866e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8008662:	2300      	movs	r3, #0
 8008664:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8008666:	2301      	movs	r3, #1
 8008668:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800866c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800866e:	69fb      	ldr	r3, [r7, #28]
 8008670:	2b00      	cmp	r3, #0
 8008672:	f000 80fd 	beq.w	8008870 <UART_SetConfig+0x550>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	685a      	ldr	r2, [r3, #4]
 800867a:	4613      	mov	r3, r2
 800867c:	005b      	lsls	r3, r3, #1
 800867e:	4413      	add	r3, r2
 8008680:	69fa      	ldr	r2, [r7, #28]
 8008682:	429a      	cmp	r2, r3
 8008684:	d305      	bcc.n	8008692 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	685b      	ldr	r3, [r3, #4]
 800868a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800868c:	69fa      	ldr	r2, [r7, #28]
 800868e:	429a      	cmp	r2, r3
 8008690:	d903      	bls.n	800869a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8008692:	2301      	movs	r3, #1
 8008694:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8008698:	e0ea      	b.n	8008870 <UART_SetConfig+0x550>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800869a:	69fb      	ldr	r3, [r7, #28]
 800869c:	2200      	movs	r2, #0
 800869e:	461c      	mov	r4, r3
 80086a0:	4615      	mov	r5, r2
 80086a2:	f04f 0200 	mov.w	r2, #0
 80086a6:	f04f 0300 	mov.w	r3, #0
 80086aa:	022b      	lsls	r3, r5, #8
 80086ac:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80086b0:	0222      	lsls	r2, r4, #8
 80086b2:	68f9      	ldr	r1, [r7, #12]
 80086b4:	6849      	ldr	r1, [r1, #4]
 80086b6:	0849      	lsrs	r1, r1, #1
 80086b8:	2000      	movs	r0, #0
 80086ba:	4688      	mov	r8, r1
 80086bc:	4681      	mov	r9, r0
 80086be:	eb12 0a08 	adds.w	sl, r2, r8
 80086c2:	eb43 0b09 	adc.w	fp, r3, r9
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	685b      	ldr	r3, [r3, #4]
 80086ca:	2200      	movs	r2, #0
 80086cc:	603b      	str	r3, [r7, #0]
 80086ce:	607a      	str	r2, [r7, #4]
 80086d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80086d4:	4650      	mov	r0, sl
 80086d6:	4659      	mov	r1, fp
 80086d8:	f7f7 fdd2 	bl	8000280 <__aeabi_uldivmod>
 80086dc:	4602      	mov	r2, r0
 80086de:	460b      	mov	r3, r1
 80086e0:	4613      	mov	r3, r2
 80086e2:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80086e4:	69bb      	ldr	r3, [r7, #24]
 80086e6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80086ea:	d308      	bcc.n	80086fe <UART_SetConfig+0x3de>
 80086ec:	69bb      	ldr	r3, [r7, #24]
 80086ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80086f2:	d204      	bcs.n	80086fe <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	69ba      	ldr	r2, [r7, #24]
 80086fa:	60da      	str	r2, [r3, #12]
 80086fc:	e0b8      	b.n	8008870 <UART_SetConfig+0x550>
        }
        else
        {
          ret = HAL_ERROR;
 80086fe:	2301      	movs	r3, #1
 8008700:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8008704:	e0b4      	b.n	8008870 <UART_SetConfig+0x550>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	69db      	ldr	r3, [r3, #28]
 800870a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800870e:	d15f      	bne.n	80087d0 <UART_SetConfig+0x4b0>
  {
    switch (clocksource)
 8008710:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008714:	2b08      	cmp	r3, #8
 8008716:	d828      	bhi.n	800876a <UART_SetConfig+0x44a>
 8008718:	a201      	add	r2, pc, #4	; (adr r2, 8008720 <UART_SetConfig+0x400>)
 800871a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800871e:	bf00      	nop
 8008720:	08008745 	.word	0x08008745
 8008724:	0800874d 	.word	0x0800874d
 8008728:	08008755 	.word	0x08008755
 800872c:	0800876b 	.word	0x0800876b
 8008730:	0800875b 	.word	0x0800875b
 8008734:	0800876b 	.word	0x0800876b
 8008738:	0800876b 	.word	0x0800876b
 800873c:	0800876b 	.word	0x0800876b
 8008740:	08008763 	.word	0x08008763
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008744:	f7fc fb84 	bl	8004e50 <HAL_RCC_GetPCLK1Freq>
 8008748:	61f8      	str	r0, [r7, #28]
        break;
 800874a:	e014      	b.n	8008776 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800874c:	f7fc fb96 	bl	8004e7c <HAL_RCC_GetPCLK2Freq>
 8008750:	61f8      	str	r0, [r7, #28]
        break;
 8008752:	e010      	b.n	8008776 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008754:	4b4e      	ldr	r3, [pc, #312]	; (8008890 <UART_SetConfig+0x570>)
 8008756:	61fb      	str	r3, [r7, #28]
        break;
 8008758:	e00d      	b.n	8008776 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800875a:	f7fc fae1 	bl	8004d20 <HAL_RCC_GetSysClockFreq>
 800875e:	61f8      	str	r0, [r7, #28]
        break;
 8008760:	e009      	b.n	8008776 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008762:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008766:	61fb      	str	r3, [r7, #28]
        break;
 8008768:	e005      	b.n	8008776 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800876a:	2300      	movs	r3, #0
 800876c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800876e:	2301      	movs	r3, #1
 8008770:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8008774:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008776:	69fb      	ldr	r3, [r7, #28]
 8008778:	2b00      	cmp	r3, #0
 800877a:	d079      	beq.n	8008870 <UART_SetConfig+0x550>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800877c:	69fb      	ldr	r3, [r7, #28]
 800877e:	005a      	lsls	r2, r3, #1
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	685b      	ldr	r3, [r3, #4]
 8008784:	085b      	lsrs	r3, r3, #1
 8008786:	441a      	add	r2, r3
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	685b      	ldr	r3, [r3, #4]
 800878c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008790:	b29b      	uxth	r3, r3
 8008792:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008794:	69bb      	ldr	r3, [r7, #24]
 8008796:	2b0f      	cmp	r3, #15
 8008798:	d916      	bls.n	80087c8 <UART_SetConfig+0x4a8>
 800879a:	69bb      	ldr	r3, [r7, #24]
 800879c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80087a0:	d212      	bcs.n	80087c8 <UART_SetConfig+0x4a8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80087a2:	69bb      	ldr	r3, [r7, #24]
 80087a4:	b29b      	uxth	r3, r3
 80087a6:	f023 030f 	bic.w	r3, r3, #15
 80087aa:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80087ac:	69bb      	ldr	r3, [r7, #24]
 80087ae:	085b      	lsrs	r3, r3, #1
 80087b0:	b29b      	uxth	r3, r3
 80087b2:	f003 0307 	and.w	r3, r3, #7
 80087b6:	b29a      	uxth	r2, r3
 80087b8:	8afb      	ldrh	r3, [r7, #22]
 80087ba:	4313      	orrs	r3, r2
 80087bc:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	8afa      	ldrh	r2, [r7, #22]
 80087c4:	60da      	str	r2, [r3, #12]
 80087c6:	e053      	b.n	8008870 <UART_SetConfig+0x550>
      }
      else
      {
        ret = HAL_ERROR;
 80087c8:	2301      	movs	r3, #1
 80087ca:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80087ce:	e04f      	b.n	8008870 <UART_SetConfig+0x550>
      }
    }
  }
  else
  {
    switch (clocksource)
 80087d0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80087d4:	2b08      	cmp	r3, #8
 80087d6:	d828      	bhi.n	800882a <UART_SetConfig+0x50a>
 80087d8:	a201      	add	r2, pc, #4	; (adr r2, 80087e0 <UART_SetConfig+0x4c0>)
 80087da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087de:	bf00      	nop
 80087e0:	08008805 	.word	0x08008805
 80087e4:	0800880d 	.word	0x0800880d
 80087e8:	08008815 	.word	0x08008815
 80087ec:	0800882b 	.word	0x0800882b
 80087f0:	0800881b 	.word	0x0800881b
 80087f4:	0800882b 	.word	0x0800882b
 80087f8:	0800882b 	.word	0x0800882b
 80087fc:	0800882b 	.word	0x0800882b
 8008800:	08008823 	.word	0x08008823
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008804:	f7fc fb24 	bl	8004e50 <HAL_RCC_GetPCLK1Freq>
 8008808:	61f8      	str	r0, [r7, #28]
        break;
 800880a:	e014      	b.n	8008836 <UART_SetConfig+0x516>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800880c:	f7fc fb36 	bl	8004e7c <HAL_RCC_GetPCLK2Freq>
 8008810:	61f8      	str	r0, [r7, #28]
        break;
 8008812:	e010      	b.n	8008836 <UART_SetConfig+0x516>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008814:	4b1e      	ldr	r3, [pc, #120]	; (8008890 <UART_SetConfig+0x570>)
 8008816:	61fb      	str	r3, [r7, #28]
        break;
 8008818:	e00d      	b.n	8008836 <UART_SetConfig+0x516>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800881a:	f7fc fa81 	bl	8004d20 <HAL_RCC_GetSysClockFreq>
 800881e:	61f8      	str	r0, [r7, #28]
        break;
 8008820:	e009      	b.n	8008836 <UART_SetConfig+0x516>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008822:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008826:	61fb      	str	r3, [r7, #28]
        break;
 8008828:	e005      	b.n	8008836 <UART_SetConfig+0x516>
      default:
        pclk = 0U;
 800882a:	2300      	movs	r3, #0
 800882c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800882e:	2301      	movs	r3, #1
 8008830:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8008834:	bf00      	nop
    }

    if (pclk != 0U)
 8008836:	69fb      	ldr	r3, [r7, #28]
 8008838:	2b00      	cmp	r3, #0
 800883a:	d019      	beq.n	8008870 <UART_SetConfig+0x550>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	685b      	ldr	r3, [r3, #4]
 8008840:	085a      	lsrs	r2, r3, #1
 8008842:	69fb      	ldr	r3, [r7, #28]
 8008844:	441a      	add	r2, r3
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	685b      	ldr	r3, [r3, #4]
 800884a:	fbb2 f3f3 	udiv	r3, r2, r3
 800884e:	b29b      	uxth	r3, r3
 8008850:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008852:	69bb      	ldr	r3, [r7, #24]
 8008854:	2b0f      	cmp	r3, #15
 8008856:	d908      	bls.n	800886a <UART_SetConfig+0x54a>
 8008858:	69bb      	ldr	r3, [r7, #24]
 800885a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800885e:	d204      	bcs.n	800886a <UART_SetConfig+0x54a>
      {
        huart->Instance->BRR = usartdiv;
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	69ba      	ldr	r2, [r7, #24]
 8008866:	60da      	str	r2, [r3, #12]
 8008868:	e002      	b.n	8008870 <UART_SetConfig+0x550>
      }
      else
      {
        ret = HAL_ERROR;
 800886a:	2301      	movs	r3, #1
 800886c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	2200      	movs	r2, #0
 8008874:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	2200      	movs	r2, #0
 800887a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800887c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8008880:	4618      	mov	r0, r3
 8008882:	3728      	adds	r7, #40	; 0x28
 8008884:	46bd      	mov	sp, r7
 8008886:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800888a:	bf00      	nop
 800888c:	40008000 	.word	0x40008000
 8008890:	00f42400 	.word	0x00f42400

08008894 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008894:	b480      	push	{r7}
 8008896:	b083      	sub	sp, #12
 8008898:	af00      	add	r7, sp, #0
 800889a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088a0:	f003 0301 	and.w	r3, r3, #1
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d00a      	beq.n	80088be <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	685b      	ldr	r3, [r3, #4]
 80088ae:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	430a      	orrs	r2, r1
 80088bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088c2:	f003 0302 	and.w	r3, r3, #2
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d00a      	beq.n	80088e0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	685b      	ldr	r3, [r3, #4]
 80088d0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	430a      	orrs	r2, r1
 80088de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088e4:	f003 0304 	and.w	r3, r3, #4
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d00a      	beq.n	8008902 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	685b      	ldr	r3, [r3, #4]
 80088f2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	430a      	orrs	r2, r1
 8008900:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008906:	f003 0308 	and.w	r3, r3, #8
 800890a:	2b00      	cmp	r3, #0
 800890c:	d00a      	beq.n	8008924 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	685b      	ldr	r3, [r3, #4]
 8008914:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	430a      	orrs	r2, r1
 8008922:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008928:	f003 0310 	and.w	r3, r3, #16
 800892c:	2b00      	cmp	r3, #0
 800892e:	d00a      	beq.n	8008946 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	689b      	ldr	r3, [r3, #8]
 8008936:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	430a      	orrs	r2, r1
 8008944:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800894a:	f003 0320 	and.w	r3, r3, #32
 800894e:	2b00      	cmp	r3, #0
 8008950:	d00a      	beq.n	8008968 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	689b      	ldr	r3, [r3, #8]
 8008958:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	430a      	orrs	r2, r1
 8008966:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800896c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008970:	2b00      	cmp	r3, #0
 8008972:	d01a      	beq.n	80089aa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	685b      	ldr	r3, [r3, #4]
 800897a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	430a      	orrs	r2, r1
 8008988:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800898e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008992:	d10a      	bne.n	80089aa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	685b      	ldr	r3, [r3, #4]
 800899a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	430a      	orrs	r2, r1
 80089a8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d00a      	beq.n	80089cc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	685b      	ldr	r3, [r3, #4]
 80089bc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	430a      	orrs	r2, r1
 80089ca:	605a      	str	r2, [r3, #4]
  }
}
 80089cc:	bf00      	nop
 80089ce:	370c      	adds	r7, #12
 80089d0:	46bd      	mov	sp, r7
 80089d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d6:	4770      	bx	lr

080089d8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80089d8:	b580      	push	{r7, lr}
 80089da:	b086      	sub	sp, #24
 80089dc:	af02      	add	r7, sp, #8
 80089de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	2200      	movs	r2, #0
 80089e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80089e8:	f7f9 fef2 	bl	80027d0 <HAL_GetTick>
 80089ec:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	f003 0308 	and.w	r3, r3, #8
 80089f8:	2b08      	cmp	r3, #8
 80089fa:	d10e      	bne.n	8008a1a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80089fc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008a00:	9300      	str	r3, [sp, #0]
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	2200      	movs	r2, #0
 8008a06:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008a0a:	6878      	ldr	r0, [r7, #4]
 8008a0c:	f000 f82d 	bl	8008a6a <UART_WaitOnFlagUntilTimeout>
 8008a10:	4603      	mov	r3, r0
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d001      	beq.n	8008a1a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008a16:	2303      	movs	r3, #3
 8008a18:	e023      	b.n	8008a62 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	f003 0304 	and.w	r3, r3, #4
 8008a24:	2b04      	cmp	r3, #4
 8008a26:	d10e      	bne.n	8008a46 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008a28:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008a2c:	9300      	str	r3, [sp, #0]
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	2200      	movs	r2, #0
 8008a32:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008a36:	6878      	ldr	r0, [r7, #4]
 8008a38:	f000 f817 	bl	8008a6a <UART_WaitOnFlagUntilTimeout>
 8008a3c:	4603      	mov	r3, r0
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d001      	beq.n	8008a46 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008a42:	2303      	movs	r3, #3
 8008a44:	e00d      	b.n	8008a62 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	2220      	movs	r2, #32
 8008a4a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	2220      	movs	r2, #32
 8008a50:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	2200      	movs	r2, #0
 8008a56:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	2200      	movs	r2, #0
 8008a5c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8008a60:	2300      	movs	r3, #0
}
 8008a62:	4618      	mov	r0, r3
 8008a64:	3710      	adds	r7, #16
 8008a66:	46bd      	mov	sp, r7
 8008a68:	bd80      	pop	{r7, pc}

08008a6a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008a6a:	b580      	push	{r7, lr}
 8008a6c:	b084      	sub	sp, #16
 8008a6e:	af00      	add	r7, sp, #0
 8008a70:	60f8      	str	r0, [r7, #12]
 8008a72:	60b9      	str	r1, [r7, #8]
 8008a74:	603b      	str	r3, [r7, #0]
 8008a76:	4613      	mov	r3, r2
 8008a78:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008a7a:	e05e      	b.n	8008b3a <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008a7c:	69bb      	ldr	r3, [r7, #24]
 8008a7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a82:	d05a      	beq.n	8008b3a <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008a84:	f7f9 fea4 	bl	80027d0 <HAL_GetTick>
 8008a88:	4602      	mov	r2, r0
 8008a8a:	683b      	ldr	r3, [r7, #0]
 8008a8c:	1ad3      	subs	r3, r2, r3
 8008a8e:	69ba      	ldr	r2, [r7, #24]
 8008a90:	429a      	cmp	r2, r3
 8008a92:	d302      	bcc.n	8008a9a <UART_WaitOnFlagUntilTimeout+0x30>
 8008a94:	69bb      	ldr	r3, [r7, #24]
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d11b      	bne.n	8008ad2 <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	681a      	ldr	r2, [r3, #0]
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008aa8:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	689a      	ldr	r2, [r3, #8]
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	f022 0201 	bic.w	r2, r2, #1
 8008ab8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	2220      	movs	r2, #32
 8008abe:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	2220      	movs	r2, #32
 8008ac4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	2200      	movs	r2, #0
 8008aca:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8008ace:	2303      	movs	r3, #3
 8008ad0:	e043      	b.n	8008b5a <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	f003 0304 	and.w	r3, r3, #4
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d02c      	beq.n	8008b3a <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	69db      	ldr	r3, [r3, #28]
 8008ae6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008aea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008aee:	d124      	bne.n	8008b3a <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008af8:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	681a      	ldr	r2, [r3, #0]
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008b08:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	689a      	ldr	r2, [r3, #8]
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	f022 0201 	bic.w	r2, r2, #1
 8008b18:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	2220      	movs	r2, #32
 8008b1e:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	2220      	movs	r2, #32
 8008b24:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	2220      	movs	r2, #32
 8008b2a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	2200      	movs	r2, #0
 8008b32:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8008b36:	2303      	movs	r3, #3
 8008b38:	e00f      	b.n	8008b5a <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	69da      	ldr	r2, [r3, #28]
 8008b40:	68bb      	ldr	r3, [r7, #8]
 8008b42:	4013      	ands	r3, r2
 8008b44:	68ba      	ldr	r2, [r7, #8]
 8008b46:	429a      	cmp	r2, r3
 8008b48:	bf0c      	ite	eq
 8008b4a:	2301      	moveq	r3, #1
 8008b4c:	2300      	movne	r3, #0
 8008b4e:	b2db      	uxtb	r3, r3
 8008b50:	461a      	mov	r2, r3
 8008b52:	79fb      	ldrb	r3, [r7, #7]
 8008b54:	429a      	cmp	r2, r3
 8008b56:	d091      	beq.n	8008a7c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008b58:	2300      	movs	r3, #0
}
 8008b5a:	4618      	mov	r0, r3
 8008b5c:	3710      	adds	r7, #16
 8008b5e:	46bd      	mov	sp, r7
 8008b60:	bd80      	pop	{r7, pc}
	...

08008b64 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008b64:	b480      	push	{r7}
 8008b66:	b085      	sub	sp, #20
 8008b68:	af00      	add	r7, sp, #0
 8008b6a:	60f8      	str	r0, [r7, #12]
 8008b6c:	60b9      	str	r1, [r7, #8]
 8008b6e:	4613      	mov	r3, r2
 8008b70:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	68ba      	ldr	r2, [r7, #8]
 8008b76:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	88fa      	ldrh	r2, [r7, #6]
 8008b7c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	88fa      	ldrh	r2, [r7, #6]
 8008b84:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	2200      	movs	r2, #0
 8008b8c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	689b      	ldr	r3, [r3, #8]
 8008b92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008b96:	d10e      	bne.n	8008bb6 <UART_Start_Receive_IT+0x52>
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	691b      	ldr	r3, [r3, #16]
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d105      	bne.n	8008bac <UART_Start_Receive_IT+0x48>
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	f240 12ff 	movw	r2, #511	; 0x1ff
 8008ba6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008baa:	e02d      	b.n	8008c08 <UART_Start_Receive_IT+0xa4>
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	22ff      	movs	r2, #255	; 0xff
 8008bb0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008bb4:	e028      	b.n	8008c08 <UART_Start_Receive_IT+0xa4>
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	689b      	ldr	r3, [r3, #8]
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d10d      	bne.n	8008bda <UART_Start_Receive_IT+0x76>
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	691b      	ldr	r3, [r3, #16]
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d104      	bne.n	8008bd0 <UART_Start_Receive_IT+0x6c>
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	22ff      	movs	r2, #255	; 0xff
 8008bca:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008bce:	e01b      	b.n	8008c08 <UART_Start_Receive_IT+0xa4>
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	227f      	movs	r2, #127	; 0x7f
 8008bd4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008bd8:	e016      	b.n	8008c08 <UART_Start_Receive_IT+0xa4>
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	689b      	ldr	r3, [r3, #8]
 8008bde:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008be2:	d10d      	bne.n	8008c00 <UART_Start_Receive_IT+0x9c>
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	691b      	ldr	r3, [r3, #16]
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d104      	bne.n	8008bf6 <UART_Start_Receive_IT+0x92>
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	227f      	movs	r2, #127	; 0x7f
 8008bf0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008bf4:	e008      	b.n	8008c08 <UART_Start_Receive_IT+0xa4>
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	223f      	movs	r2, #63	; 0x3f
 8008bfa:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008bfe:	e003      	b.n	8008c08 <UART_Start_Receive_IT+0xa4>
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	2200      	movs	r2, #0
 8008c04:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	2200      	movs	r2, #0
 8008c0c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	2222      	movs	r2, #34	; 0x22
 8008c14:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	689a      	ldr	r2, [r3, #8]
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	f042 0201 	orr.w	r2, r2, #1
 8008c24:	609a      	str	r2, [r3, #8]
    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	689b      	ldr	r3, [r3, #8]
 8008c2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008c2e:	d107      	bne.n	8008c40 <UART_Start_Receive_IT+0xdc>
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	691b      	ldr	r3, [r3, #16]
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d103      	bne.n	8008c40 <UART_Start_Receive_IT+0xdc>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	4a0c      	ldr	r2, [pc, #48]	; (8008c6c <UART_Start_Receive_IT+0x108>)
 8008c3c:	665a      	str	r2, [r3, #100]	; 0x64
 8008c3e:	e002      	b.n	8008c46 <UART_Start_Receive_IT+0xe2>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	4a0b      	ldr	r2, [pc, #44]	; (8008c70 <UART_Start_Receive_IT+0x10c>)
 8008c44:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	2200      	movs	r2, #0
 8008c4a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	681a      	ldr	r2, [r3, #0]
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8008c5c:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8008c5e:	2300      	movs	r3, #0
}
 8008c60:	4618      	mov	r0, r3
 8008c62:	3714      	adds	r7, #20
 8008c64:	46bd      	mov	sp, r7
 8008c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c6a:	4770      	bx	lr
 8008c6c:	08008e09 	.word	0x08008e09
 8008c70:	08008d31 	.word	0x08008d31

08008c74 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008c74:	b480      	push	{r7}
 8008c76:	b083      	sub	sp, #12
 8008c78:	af00      	add	r7, sp, #0
 8008c7a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	681a      	ldr	r2, [r3, #0]
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008c8a:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	689a      	ldr	r2, [r3, #8]
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	f022 0201 	bic.w	r2, r2, #1
 8008c9a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008ca0:	2b01      	cmp	r3, #1
 8008ca2:	d107      	bne.n	8008cb4 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	681a      	ldr	r2, [r3, #0]
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	f022 0210 	bic.w	r2, r2, #16
 8008cb2:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	2220      	movs	r2, #32
 8008cb8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	2200      	movs	r2, #0
 8008cbe:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	2200      	movs	r2, #0
 8008cc4:	665a      	str	r2, [r3, #100]	; 0x64
}
 8008cc6:	bf00      	nop
 8008cc8:	370c      	adds	r7, #12
 8008cca:	46bd      	mov	sp, r7
 8008ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd0:	4770      	bx	lr

08008cd2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008cd2:	b580      	push	{r7, lr}
 8008cd4:	b084      	sub	sp, #16
 8008cd6:	af00      	add	r7, sp, #0
 8008cd8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cde:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	2200      	movs	r2, #0
 8008ce4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	2200      	movs	r2, #0
 8008cec:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008cf0:	68f8      	ldr	r0, [r7, #12]
 8008cf2:	f7ff faff 	bl	80082f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008cf6:	bf00      	nop
 8008cf8:	3710      	adds	r7, #16
 8008cfa:	46bd      	mov	sp, r7
 8008cfc:	bd80      	pop	{r7, pc}

08008cfe <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008cfe:	b580      	push	{r7, lr}
 8008d00:	b082      	sub	sp, #8
 8008d02:	af00      	add	r7, sp, #0
 8008d04:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	681a      	ldr	r2, [r3, #0]
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008d14:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	2220      	movs	r2, #32
 8008d1a:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	2200      	movs	r2, #0
 8008d20:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008d22:	6878      	ldr	r0, [r7, #4]
 8008d24:	f7ff fadc 	bl	80082e0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008d28:	bf00      	nop
 8008d2a:	3708      	adds	r7, #8
 8008d2c:	46bd      	mov	sp, r7
 8008d2e:	bd80      	pop	{r7, pc}

08008d30 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008d30:	b580      	push	{r7, lr}
 8008d32:	b084      	sub	sp, #16
 8008d34:	af00      	add	r7, sp, #0
 8008d36:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008d3e:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008d44:	2b22      	cmp	r3, #34	; 0x22
 8008d46:	d151      	bne.n	8008dec <UART_RxISR_8BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8008d4e:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008d50:	89bb      	ldrh	r3, [r7, #12]
 8008d52:	b2d9      	uxtb	r1, r3
 8008d54:	89fb      	ldrh	r3, [r7, #14]
 8008d56:	b2da      	uxtb	r2, r3
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d5c:	400a      	ands	r2, r1
 8008d5e:	b2d2      	uxtb	r2, r2
 8008d60:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d66:	1c5a      	adds	r2, r3, #1
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008d72:	b29b      	uxth	r3, r3
 8008d74:	3b01      	subs	r3, #1
 8008d76:	b29a      	uxth	r2, r3
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008d84:	b29b      	uxth	r3, r3
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d13a      	bne.n	8008e00 <UART_RxISR_8BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	681a      	ldr	r2, [r3, #0]
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008d98:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	689a      	ldr	r2, [r3, #8]
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	f022 0201 	bic.w	r2, r2, #1
 8008da8:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	2220      	movs	r2, #32
 8008dae:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	2200      	movs	r2, #0
 8008db4:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008dba:	2b01      	cmp	r3, #1
 8008dbc:	d10f      	bne.n	8008dde <UART_RxISR_8BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	681a      	ldr	r2, [r3, #0]
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	f022 0210 	bic.w	r2, r2, #16
 8008dcc:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008dd4:	4619      	mov	r1, r3
 8008dd6:	6878      	ldr	r0, [r7, #4]
 8008dd8:	f7ff fa96 	bl	8008308 <HAL_UARTEx_RxEventCallback>
 8008ddc:	e002      	b.n	8008de4 <UART_RxISR_8BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008dde:	6878      	ldr	r0, [r7, #4]
 8008de0:	f7f8 f930 	bl	8001044 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	2200      	movs	r2, #0
 8008de8:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008dea:	e009      	b.n	8008e00 <UART_RxISR_8BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	8b1b      	ldrh	r3, [r3, #24]
 8008df2:	b29a      	uxth	r2, r3
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	f042 0208 	orr.w	r2, r2, #8
 8008dfc:	b292      	uxth	r2, r2
 8008dfe:	831a      	strh	r2, [r3, #24]
}
 8008e00:	bf00      	nop
 8008e02:	3710      	adds	r7, #16
 8008e04:	46bd      	mov	sp, r7
 8008e06:	bd80      	pop	{r7, pc}

08008e08 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008e08:	b580      	push	{r7, lr}
 8008e0a:	b084      	sub	sp, #16
 8008e0c:	af00      	add	r7, sp, #0
 8008e0e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008e16:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008e1c:	2b22      	cmp	r3, #34	; 0x22
 8008e1e:	d151      	bne.n	8008ec4 <UART_RxISR_16BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8008e26:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e2c:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8008e2e:	89ba      	ldrh	r2, [r7, #12]
 8008e30:	89fb      	ldrh	r3, [r7, #14]
 8008e32:	4013      	ands	r3, r2
 8008e34:	b29a      	uxth	r2, r3
 8008e36:	68bb      	ldr	r3, [r7, #8]
 8008e38:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e3e:	1c9a      	adds	r2, r3, #2
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008e4a:	b29b      	uxth	r3, r3
 8008e4c:	3b01      	subs	r3, #1
 8008e4e:	b29a      	uxth	r2, r3
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008e5c:	b29b      	uxth	r3, r3
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d13a      	bne.n	8008ed8 <UART_RxISR_16BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	681a      	ldr	r2, [r3, #0]
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008e70:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	689a      	ldr	r2, [r3, #8]
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	f022 0201 	bic.w	r2, r2, #1
 8008e80:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	2220      	movs	r2, #32
 8008e86:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	2200      	movs	r2, #0
 8008e8c:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008e92:	2b01      	cmp	r3, #1
 8008e94:	d10f      	bne.n	8008eb6 <UART_RxISR_16BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	681a      	ldr	r2, [r3, #0]
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	f022 0210 	bic.w	r2, r2, #16
 8008ea4:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008eac:	4619      	mov	r1, r3
 8008eae:	6878      	ldr	r0, [r7, #4]
 8008eb0:	f7ff fa2a 	bl	8008308 <HAL_UARTEx_RxEventCallback>
 8008eb4:	e002      	b.n	8008ebc <UART_RxISR_16BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008eb6:	6878      	ldr	r0, [r7, #4]
 8008eb8:	f7f8 f8c4 	bl	8001044 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	2200      	movs	r2, #0
 8008ec0:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008ec2:	e009      	b.n	8008ed8 <UART_RxISR_16BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	8b1b      	ldrh	r3, [r3, #24]
 8008eca:	b29a      	uxth	r2, r3
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	f042 0208 	orr.w	r2, r2, #8
 8008ed4:	b292      	uxth	r2, r2
 8008ed6:	831a      	strh	r2, [r3, #24]
}
 8008ed8:	bf00      	nop
 8008eda:	3710      	adds	r7, #16
 8008edc:	46bd      	mov	sp, r7
 8008ede:	bd80      	pop	{r7, pc}

08008ee0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008ee0:	b480      	push	{r7}
 8008ee2:	b083      	sub	sp, #12
 8008ee4:	af00      	add	r7, sp, #0
 8008ee6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008ee8:	bf00      	nop
 8008eea:	370c      	adds	r7, #12
 8008eec:	46bd      	mov	sp, r7
 8008eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef2:	4770      	bx	lr

08008ef4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008ef4:	b084      	sub	sp, #16
 8008ef6:	b580      	push	{r7, lr}
 8008ef8:	b084      	sub	sp, #16
 8008efa:	af00      	add	r7, sp, #0
 8008efc:	6078      	str	r0, [r7, #4]
 8008efe:	f107 001c 	add.w	r0, r7, #28
 8008f02:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;


  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	68db      	ldr	r3, [r3, #12]
 8008f0a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8008f12:	6878      	ldr	r0, [r7, #4]
 8008f14:	f000 fa24 	bl	8009360 <USB_CoreReset>
 8008f18:	4603      	mov	r3, r0
 8008f1a:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8008f1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d106      	bne.n	8008f30 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f26:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	639a      	str	r2, [r3, #56]	; 0x38
 8008f2e:	e005      	b.n	8008f3c <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f34:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 8008f3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f3e:	4618      	mov	r0, r3
 8008f40:	3710      	adds	r7, #16
 8008f42:	46bd      	mov	sp, r7
 8008f44:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008f48:	b004      	add	sp, #16
 8008f4a:	4770      	bx	lr

08008f4c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008f4c:	b480      	push	{r7}
 8008f4e:	b083      	sub	sp, #12
 8008f50:	af00      	add	r7, sp, #0
 8008f52:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	689b      	ldr	r3, [r3, #8]
 8008f58:	f023 0201 	bic.w	r2, r3, #1
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008f60:	2300      	movs	r3, #0
}
 8008f62:	4618      	mov	r0, r3
 8008f64:	370c      	adds	r7, #12
 8008f66:	46bd      	mov	sp, r7
 8008f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f6c:	4770      	bx	lr

08008f6e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8008f6e:	b580      	push	{r7, lr}
 8008f70:	b082      	sub	sp, #8
 8008f72:	af00      	add	r7, sp, #0
 8008f74:	6078      	str	r0, [r7, #4]
 8008f76:	460b      	mov	r3, r1
 8008f78:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	68db      	ldr	r3, [r3, #12]
 8008f7e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008f86:	78fb      	ldrb	r3, [r7, #3]
 8008f88:	2b01      	cmp	r3, #1
 8008f8a:	d106      	bne.n	8008f9a <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	68db      	ldr	r3, [r3, #12]
 8008f90:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	60da      	str	r2, [r3, #12]
 8008f98:	e00b      	b.n	8008fb2 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8008f9a:	78fb      	ldrb	r3, [r7, #3]
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d106      	bne.n	8008fae <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	68db      	ldr	r3, [r3, #12]
 8008fa4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	60da      	str	r2, [r3, #12]
 8008fac:	e001      	b.n	8008fb2 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8008fae:	2301      	movs	r3, #1
 8008fb0:	e003      	b.n	8008fba <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8008fb2:	2032      	movs	r0, #50	; 0x32
 8008fb4:	f7f9 fc18 	bl	80027e8 <HAL_Delay>

  return HAL_OK;
 8008fb8:	2300      	movs	r3, #0
}
 8008fba:	4618      	mov	r0, r3
 8008fbc:	3708      	adds	r7, #8
 8008fbe:	46bd      	mov	sp, r7
 8008fc0:	bd80      	pop	{r7, pc}
	...

08008fc4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008fc4:	b084      	sub	sp, #16
 8008fc6:	b580      	push	{r7, lr}
 8008fc8:	b086      	sub	sp, #24
 8008fca:	af00      	add	r7, sp, #0
 8008fcc:	6078      	str	r0, [r7, #4]
 8008fce:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8008fd2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008fd6:	2300      	movs	r3, #0
 8008fd8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8008fde:	2300      	movs	r3, #0
 8008fe0:	613b      	str	r3, [r7, #16]
 8008fe2:	e009      	b.n	8008ff8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008fe4:	687a      	ldr	r2, [r7, #4]
 8008fe6:	693b      	ldr	r3, [r7, #16]
 8008fe8:	3340      	adds	r3, #64	; 0x40
 8008fea:	009b      	lsls	r3, r3, #2
 8008fec:	4413      	add	r3, r2
 8008fee:	2200      	movs	r2, #0
 8008ff0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8008ff2:	693b      	ldr	r3, [r7, #16]
 8008ff4:	3301      	adds	r3, #1
 8008ff6:	613b      	str	r3, [r7, #16]
 8008ff8:	693b      	ldr	r3, [r7, #16]
 8008ffa:	2b0e      	cmp	r3, #14
 8008ffc:	d9f2      	bls.n	8008fe4 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8008ffe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009000:	2b00      	cmp	r3, #0
 8009002:	d11c      	bne.n	800903e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800900a:	685b      	ldr	r3, [r3, #4]
 800900c:	68fa      	ldr	r2, [r7, #12]
 800900e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009012:	f043 0302 	orr.w	r3, r3, #2
 8009016:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800901c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	601a      	str	r2, [r3, #0]
 800903c:	e005      	b.n	800904a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009042:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009050:	461a      	mov	r2, r3
 8009052:	2300      	movs	r3, #0
 8009054:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800905c:	4619      	mov	r1, r3
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009064:	461a      	mov	r2, r3
 8009066:	680b      	ldr	r3, [r1, #0]
 8009068:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800906a:	2103      	movs	r1, #3
 800906c:	6878      	ldr	r0, [r7, #4]
 800906e:	f000 f93d 	bl	80092ec <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009072:	2110      	movs	r1, #16
 8009074:	6878      	ldr	r0, [r7, #4]
 8009076:	f000 f8f1 	bl	800925c <USB_FlushTxFifo>
 800907a:	4603      	mov	r3, r0
 800907c:	2b00      	cmp	r3, #0
 800907e:	d001      	beq.n	8009084 <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 8009080:	2301      	movs	r3, #1
 8009082:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009084:	6878      	ldr	r0, [r7, #4]
 8009086:	f000 f90f 	bl	80092a8 <USB_FlushRxFifo>
 800908a:	4603      	mov	r3, r0
 800908c:	2b00      	cmp	r3, #0
 800908e:	d001      	beq.n	8009094 <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 8009090:	2301      	movs	r3, #1
 8009092:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800909a:	461a      	mov	r2, r3
 800909c:	2300      	movs	r3, #0
 800909e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80090a6:	461a      	mov	r2, r3
 80090a8:	2300      	movs	r3, #0
 80090aa:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80090b2:	461a      	mov	r2, r3
 80090b4:	2300      	movs	r3, #0
 80090b6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80090b8:	2300      	movs	r3, #0
 80090ba:	613b      	str	r3, [r7, #16]
 80090bc:	e043      	b.n	8009146 <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80090be:	693b      	ldr	r3, [r7, #16]
 80090c0:	015a      	lsls	r2, r3, #5
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	4413      	add	r3, r2
 80090c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80090d0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80090d4:	d118      	bne.n	8009108 <USB_DevInit+0x144>
    {
      if (i == 0U)
 80090d6:	693b      	ldr	r3, [r7, #16]
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d10a      	bne.n	80090f2 <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80090dc:	693b      	ldr	r3, [r7, #16]
 80090de:	015a      	lsls	r2, r3, #5
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	4413      	add	r3, r2
 80090e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80090e8:	461a      	mov	r2, r3
 80090ea:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80090ee:	6013      	str	r3, [r2, #0]
 80090f0:	e013      	b.n	800911a <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80090f2:	693b      	ldr	r3, [r7, #16]
 80090f4:	015a      	lsls	r2, r3, #5
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	4413      	add	r3, r2
 80090fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80090fe:	461a      	mov	r2, r3
 8009100:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009104:	6013      	str	r3, [r2, #0]
 8009106:	e008      	b.n	800911a <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8009108:	693b      	ldr	r3, [r7, #16]
 800910a:	015a      	lsls	r2, r3, #5
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	4413      	add	r3, r2
 8009110:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009114:	461a      	mov	r2, r3
 8009116:	2300      	movs	r3, #0
 8009118:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800911a:	693b      	ldr	r3, [r7, #16]
 800911c:	015a      	lsls	r2, r3, #5
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	4413      	add	r3, r2
 8009122:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009126:	461a      	mov	r2, r3
 8009128:	2300      	movs	r3, #0
 800912a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800912c:	693b      	ldr	r3, [r7, #16]
 800912e:	015a      	lsls	r2, r3, #5
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	4413      	add	r3, r2
 8009134:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009138:	461a      	mov	r2, r3
 800913a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800913e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009140:	693b      	ldr	r3, [r7, #16]
 8009142:	3301      	adds	r3, #1
 8009144:	613b      	str	r3, [r7, #16]
 8009146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009148:	693a      	ldr	r2, [r7, #16]
 800914a:	429a      	cmp	r2, r3
 800914c:	d3b7      	bcc.n	80090be <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800914e:	2300      	movs	r3, #0
 8009150:	613b      	str	r3, [r7, #16]
 8009152:	e043      	b.n	80091dc <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009154:	693b      	ldr	r3, [r7, #16]
 8009156:	015a      	lsls	r2, r3, #5
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	4413      	add	r3, r2
 800915c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009166:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800916a:	d118      	bne.n	800919e <USB_DevInit+0x1da>
    {
      if (i == 0U)
 800916c:	693b      	ldr	r3, [r7, #16]
 800916e:	2b00      	cmp	r3, #0
 8009170:	d10a      	bne.n	8009188 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8009172:	693b      	ldr	r3, [r7, #16]
 8009174:	015a      	lsls	r2, r3, #5
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	4413      	add	r3, r2
 800917a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800917e:	461a      	mov	r2, r3
 8009180:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009184:	6013      	str	r3, [r2, #0]
 8009186:	e013      	b.n	80091b0 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8009188:	693b      	ldr	r3, [r7, #16]
 800918a:	015a      	lsls	r2, r3, #5
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	4413      	add	r3, r2
 8009190:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009194:	461a      	mov	r2, r3
 8009196:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800919a:	6013      	str	r3, [r2, #0]
 800919c:	e008      	b.n	80091b0 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800919e:	693b      	ldr	r3, [r7, #16]
 80091a0:	015a      	lsls	r2, r3, #5
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	4413      	add	r3, r2
 80091a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80091aa:	461a      	mov	r2, r3
 80091ac:	2300      	movs	r3, #0
 80091ae:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80091b0:	693b      	ldr	r3, [r7, #16]
 80091b2:	015a      	lsls	r2, r3, #5
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	4413      	add	r3, r2
 80091b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80091bc:	461a      	mov	r2, r3
 80091be:	2300      	movs	r3, #0
 80091c0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80091c2:	693b      	ldr	r3, [r7, #16]
 80091c4:	015a      	lsls	r2, r3, #5
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	4413      	add	r3, r2
 80091ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80091ce:	461a      	mov	r2, r3
 80091d0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80091d4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80091d6:	693b      	ldr	r3, [r7, #16]
 80091d8:	3301      	adds	r3, #1
 80091da:	613b      	str	r3, [r7, #16]
 80091dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091de:	693a      	ldr	r2, [r7, #16]
 80091e0:	429a      	cmp	r2, r3
 80091e2:	d3b7      	bcc.n	8009154 <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80091ea:	691b      	ldr	r3, [r3, #16]
 80091ec:	68fa      	ldr	r2, [r7, #12]
 80091ee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80091f2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80091f6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	2200      	movs	r2, #0
 80091fc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8009204:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	699b      	ldr	r3, [r3, #24]
 800920a:	f043 0210 	orr.w	r2, r3, #16
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	699a      	ldr	r2, [r3, #24]
 8009216:	4b10      	ldr	r3, [pc, #64]	; (8009258 <USB_DevInit+0x294>)
 8009218:	4313      	orrs	r3, r2
 800921a:	687a      	ldr	r2, [r7, #4]
 800921c:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800921e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009220:	2b00      	cmp	r3, #0
 8009222:	d005      	beq.n	8009230 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	699b      	ldr	r3, [r3, #24]
 8009228:	f043 0208 	orr.w	r2, r3, #8
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8009230:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009232:	2b01      	cmp	r3, #1
 8009234:	d107      	bne.n	8009246 <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	699b      	ldr	r3, [r3, #24]
 800923a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800923e:	f043 0304 	orr.w	r3, r3, #4
 8009242:	687a      	ldr	r2, [r7, #4]
 8009244:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8009246:	7dfb      	ldrb	r3, [r7, #23]
}
 8009248:	4618      	mov	r0, r3
 800924a:	3718      	adds	r7, #24
 800924c:	46bd      	mov	sp, r7
 800924e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009252:	b004      	add	sp, #16
 8009254:	4770      	bx	lr
 8009256:	bf00      	nop
 8009258:	803c3800 	.word	0x803c3800

0800925c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800925c:	b480      	push	{r7}
 800925e:	b085      	sub	sp, #20
 8009260:	af00      	add	r7, sp, #0
 8009262:	6078      	str	r0, [r7, #4]
 8009264:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8009266:	2300      	movs	r3, #0
 8009268:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800926a:	683b      	ldr	r3, [r7, #0]
 800926c:	019b      	lsls	r3, r3, #6
 800926e:	f043 0220 	orr.w	r2, r3, #32
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	3301      	adds	r3, #1
 800927a:	60fb      	str	r3, [r7, #12]
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	4a09      	ldr	r2, [pc, #36]	; (80092a4 <USB_FlushTxFifo+0x48>)
 8009280:	4293      	cmp	r3, r2
 8009282:	d901      	bls.n	8009288 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8009284:	2303      	movs	r3, #3
 8009286:	e006      	b.n	8009296 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	691b      	ldr	r3, [r3, #16]
 800928c:	f003 0320 	and.w	r3, r3, #32
 8009290:	2b20      	cmp	r3, #32
 8009292:	d0f0      	beq.n	8009276 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8009294:	2300      	movs	r3, #0
}
 8009296:	4618      	mov	r0, r3
 8009298:	3714      	adds	r7, #20
 800929a:	46bd      	mov	sp, r7
 800929c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092a0:	4770      	bx	lr
 80092a2:	bf00      	nop
 80092a4:	00030d40 	.word	0x00030d40

080092a8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80092a8:	b480      	push	{r7}
 80092aa:	b085      	sub	sp, #20
 80092ac:	af00      	add	r7, sp, #0
 80092ae:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80092b0:	2300      	movs	r3, #0
 80092b2:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	2210      	movs	r2, #16
 80092b8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	3301      	adds	r3, #1
 80092be:	60fb      	str	r3, [r7, #12]
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	4a09      	ldr	r2, [pc, #36]	; (80092e8 <USB_FlushRxFifo+0x40>)
 80092c4:	4293      	cmp	r3, r2
 80092c6:	d901      	bls.n	80092cc <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80092c8:	2303      	movs	r3, #3
 80092ca:	e006      	b.n	80092da <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	691b      	ldr	r3, [r3, #16]
 80092d0:	f003 0310 	and.w	r3, r3, #16
 80092d4:	2b10      	cmp	r3, #16
 80092d6:	d0f0      	beq.n	80092ba <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80092d8:	2300      	movs	r3, #0
}
 80092da:	4618      	mov	r0, r3
 80092dc:	3714      	adds	r7, #20
 80092de:	46bd      	mov	sp, r7
 80092e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092e4:	4770      	bx	lr
 80092e6:	bf00      	nop
 80092e8:	00030d40 	.word	0x00030d40

080092ec <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80092ec:	b480      	push	{r7}
 80092ee:	b085      	sub	sp, #20
 80092f0:	af00      	add	r7, sp, #0
 80092f2:	6078      	str	r0, [r7, #4]
 80092f4:	460b      	mov	r3, r1
 80092f6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009302:	681a      	ldr	r2, [r3, #0]
 8009304:	78fb      	ldrb	r3, [r7, #3]
 8009306:	68f9      	ldr	r1, [r7, #12]
 8009308:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800930c:	4313      	orrs	r3, r2
 800930e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8009310:	2300      	movs	r3, #0
}
 8009312:	4618      	mov	r0, r3
 8009314:	3714      	adds	r7, #20
 8009316:	46bd      	mov	sp, r7
 8009318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800931c:	4770      	bx	lr

0800931e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800931e:	b480      	push	{r7}
 8009320:	b085      	sub	sp, #20
 8009322:	af00      	add	r7, sp, #0
 8009324:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	68fa      	ldr	r2, [r7, #12]
 8009334:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009338:	f023 0303 	bic.w	r3, r3, #3
 800933c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009344:	685b      	ldr	r3, [r3, #4]
 8009346:	68fa      	ldr	r2, [r7, #12]
 8009348:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800934c:	f043 0302 	orr.w	r3, r3, #2
 8009350:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009352:	2300      	movs	r3, #0
}
 8009354:	4618      	mov	r0, r3
 8009356:	3714      	adds	r7, #20
 8009358:	46bd      	mov	sp, r7
 800935a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800935e:	4770      	bx	lr

08009360 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009360:	b480      	push	{r7}
 8009362:	b085      	sub	sp, #20
 8009364:	af00      	add	r7, sp, #0
 8009366:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8009368:	2300      	movs	r3, #0
 800936a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	3301      	adds	r3, #1
 8009370:	60fb      	str	r3, [r7, #12]
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	4a13      	ldr	r2, [pc, #76]	; (80093c4 <USB_CoreReset+0x64>)
 8009376:	4293      	cmp	r3, r2
 8009378:	d901      	bls.n	800937e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800937a:	2303      	movs	r3, #3
 800937c:	e01b      	b.n	80093b6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	691b      	ldr	r3, [r3, #16]
 8009382:	2b00      	cmp	r3, #0
 8009384:	daf2      	bge.n	800936c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8009386:	2300      	movs	r3, #0
 8009388:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	691b      	ldr	r3, [r3, #16]
 800938e:	f043 0201 	orr.w	r2, r3, #1
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	3301      	adds	r3, #1
 800939a:	60fb      	str	r3, [r7, #12]
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	4a09      	ldr	r2, [pc, #36]	; (80093c4 <USB_CoreReset+0x64>)
 80093a0:	4293      	cmp	r3, r2
 80093a2:	d901      	bls.n	80093a8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80093a4:	2303      	movs	r3, #3
 80093a6:	e006      	b.n	80093b6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	691b      	ldr	r3, [r3, #16]
 80093ac:	f003 0301 	and.w	r3, r3, #1
 80093b0:	2b01      	cmp	r3, #1
 80093b2:	d0f0      	beq.n	8009396 <USB_CoreReset+0x36>

  return HAL_OK;
 80093b4:	2300      	movs	r3, #0
}
 80093b6:	4618      	mov	r0, r3
 80093b8:	3714      	adds	r7, #20
 80093ba:	46bd      	mov	sp, r7
 80093bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093c0:	4770      	bx	lr
 80093c2:	bf00      	nop
 80093c4:	00030d40 	.word	0x00030d40

080093c8 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 80093c8:	b580      	push	{r7, lr}
 80093ca:	b08a      	sub	sp, #40	; 0x28
 80093cc:	af00      	add	r7, sp, #0
 80093ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 80093d0:	4b27      	ldr	r3, [pc, #156]	; (8009470 <I2Cx_MspInit+0xa8>)
 80093d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80093d4:	4a26      	ldr	r2, [pc, #152]	; (8009470 <I2Cx_MspInit+0xa8>)
 80093d6:	f043 0302 	orr.w	r3, r3, #2
 80093da:	64d3      	str	r3, [r2, #76]	; 0x4c
 80093dc:	4b24      	ldr	r3, [pc, #144]	; (8009470 <I2Cx_MspInit+0xa8>)
 80093de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80093e0:	f003 0302 	and.w	r3, r3, #2
 80093e4:	613b      	str	r3, [r7, #16]
 80093e6:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 80093e8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80093ec:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 80093ee:	2312      	movs	r3, #18
 80093f0:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 80093f2:	2301      	movs	r3, #1
 80093f4:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80093f6:	2303      	movs	r3, #3
 80093f8:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 80093fa:	2304      	movs	r3, #4
 80093fc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80093fe:	f107 0314 	add.w	r3, r7, #20
 8009402:	4619      	mov	r1, r3
 8009404:	481b      	ldr	r0, [pc, #108]	; (8009474 <I2Cx_MspInit+0xac>)
 8009406:	f7f9 fcb3 	bl	8002d70 <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800940a:	f107 0314 	add.w	r3, r7, #20
 800940e:	4619      	mov	r1, r3
 8009410:	4818      	ldr	r0, [pc, #96]	; (8009474 <I2Cx_MspInit+0xac>)
 8009412:	f7f9 fcad 	bl	8002d70 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 8009416:	4b16      	ldr	r3, [pc, #88]	; (8009470 <I2Cx_MspInit+0xa8>)
 8009418:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800941a:	4a15      	ldr	r2, [pc, #84]	; (8009470 <I2Cx_MspInit+0xa8>)
 800941c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8009420:	6593      	str	r3, [r2, #88]	; 0x58
 8009422:	4b13      	ldr	r3, [pc, #76]	; (8009470 <I2Cx_MspInit+0xa8>)
 8009424:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009426:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800942a:	60fb      	str	r3, [r7, #12]
 800942c:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 800942e:	4b10      	ldr	r3, [pc, #64]	; (8009470 <I2Cx_MspInit+0xa8>)
 8009430:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009432:	4a0f      	ldr	r2, [pc, #60]	; (8009470 <I2Cx_MspInit+0xa8>)
 8009434:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8009438:	6393      	str	r3, [r2, #56]	; 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 800943a:	4b0d      	ldr	r3, [pc, #52]	; (8009470 <I2Cx_MspInit+0xa8>)
 800943c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800943e:	4a0c      	ldr	r2, [pc, #48]	; (8009470 <I2Cx_MspInit+0xa8>)
 8009440:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8009444:	6393      	str	r3, [r2, #56]	; 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 8009446:	2200      	movs	r2, #0
 8009448:	210f      	movs	r1, #15
 800944a:	2021      	movs	r0, #33	; 0x21
 800944c:	f7f9 facc 	bl	80029e8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8009450:	2021      	movs	r0, #33	; 0x21
 8009452:	f7f9 fae5 	bl	8002a20 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 8009456:	2200      	movs	r2, #0
 8009458:	210f      	movs	r1, #15
 800945a:	2022      	movs	r0, #34	; 0x22
 800945c:	f7f9 fac4 	bl	80029e8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 8009460:	2022      	movs	r0, #34	; 0x22
 8009462:	f7f9 fadd 	bl	8002a20 <HAL_NVIC_EnableIRQ>
}
 8009466:	bf00      	nop
 8009468:	3728      	adds	r7, #40	; 0x28
 800946a:	46bd      	mov	sp, r7
 800946c:	bd80      	pop	{r7, pc}
 800946e:	bf00      	nop
 8009470:	40021000 	.word	0x40021000
 8009474:	48000400 	.word	0x48000400

08009478 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8009478:	b580      	push	{r7, lr}
 800947a:	b082      	sub	sp, #8
 800947c:	af00      	add	r7, sp, #0
 800947e:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	4a12      	ldr	r2, [pc, #72]	; (80094cc <I2Cx_Init+0x54>)
 8009484:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	4a11      	ldr	r2, [pc, #68]	; (80094d0 <I2Cx_Init+0x58>)
 800948a:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	2200      	movs	r2, #0
 8009490:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	2201      	movs	r2, #1
 8009496:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	2200      	movs	r2, #0
 800949c:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	2200      	movs	r2, #0
 80094a2:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	2200      	movs	r2, #0
 80094a8:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	2200      	movs	r2, #0
 80094ae:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 80094b0:	6878      	ldr	r0, [r7, #4]
 80094b2:	f7ff ff89 	bl	80093c8 <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 80094b6:	6878      	ldr	r0, [r7, #4]
 80094b8:	f7f9 ff40 	bl	800333c <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 80094bc:	2100      	movs	r1, #0
 80094be:	6878      	ldr	r0, [r7, #4]
 80094c0:	f7fa fc44 	bl	8003d4c <HAL_I2CEx_ConfigAnalogFilter>
}
 80094c4:	bf00      	nop
 80094c6:	3708      	adds	r7, #8
 80094c8:	46bd      	mov	sp, r7
 80094ca:	bd80      	pop	{r7, pc}
 80094cc:	40005800 	.word	0x40005800
 80094d0:	00702681 	.word	0x00702681

080094d4 <I2Cx_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 80094d4:	b580      	push	{r7, lr}
 80094d6:	b08a      	sub	sp, #40	; 0x28
 80094d8:	af04      	add	r7, sp, #16
 80094da:	60f8      	str	r0, [r7, #12]
 80094dc:	4608      	mov	r0, r1
 80094de:	4611      	mov	r1, r2
 80094e0:	461a      	mov	r2, r3
 80094e2:	4603      	mov	r3, r0
 80094e4:	72fb      	strb	r3, [r7, #11]
 80094e6:	460b      	mov	r3, r1
 80094e8:	813b      	strh	r3, [r7, #8]
 80094ea:	4613      	mov	r3, r2
 80094ec:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80094ee:	2300      	movs	r3, #0
 80094f0:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80094f2:	7afb      	ldrb	r3, [r7, #11]
 80094f4:	b299      	uxth	r1, r3
 80094f6:	88f8      	ldrh	r0, [r7, #6]
 80094f8:	893a      	ldrh	r2, [r7, #8]
 80094fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80094fe:	9302      	str	r3, [sp, #8]
 8009500:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009502:	9301      	str	r3, [sp, #4]
 8009504:	6a3b      	ldr	r3, [r7, #32]
 8009506:	9300      	str	r3, [sp, #0]
 8009508:	4603      	mov	r3, r0
 800950a:	68f8      	ldr	r0, [r7, #12]
 800950c:	f7fa f8e8 	bl	80036e0 <HAL_I2C_Mem_Read>
 8009510:	4603      	mov	r3, r0
 8009512:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8009514:	7dfb      	ldrb	r3, [r7, #23]
 8009516:	2b00      	cmp	r3, #0
 8009518:	d004      	beq.n	8009524 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 800951a:	7afb      	ldrb	r3, [r7, #11]
 800951c:	4619      	mov	r1, r3
 800951e:	68f8      	ldr	r0, [r7, #12]
 8009520:	f000 f832 	bl	8009588 <I2Cx_Error>
  }
  return status;
 8009524:	7dfb      	ldrb	r3, [r7, #23]
}
 8009526:	4618      	mov	r0, r3
 8009528:	3718      	adds	r7, #24
 800952a:	46bd      	mov	sp, r7
 800952c:	bd80      	pop	{r7, pc}

0800952e <I2Cx_WriteMultiple>:
  * @param  Buffer  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 800952e:	b580      	push	{r7, lr}
 8009530:	b08a      	sub	sp, #40	; 0x28
 8009532:	af04      	add	r7, sp, #16
 8009534:	60f8      	str	r0, [r7, #12]
 8009536:	4608      	mov	r0, r1
 8009538:	4611      	mov	r1, r2
 800953a:	461a      	mov	r2, r3
 800953c:	4603      	mov	r3, r0
 800953e:	72fb      	strb	r3, [r7, #11]
 8009540:	460b      	mov	r3, r1
 8009542:	813b      	strh	r3, [r7, #8]
 8009544:	4613      	mov	r3, r2
 8009546:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8009548:	2300      	movs	r3, #0
 800954a:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800954c:	7afb      	ldrb	r3, [r7, #11]
 800954e:	b299      	uxth	r1, r3
 8009550:	88f8      	ldrh	r0, [r7, #6]
 8009552:	893a      	ldrh	r2, [r7, #8]
 8009554:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8009558:	9302      	str	r3, [sp, #8]
 800955a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800955c:	9301      	str	r3, [sp, #4]
 800955e:	6a3b      	ldr	r3, [r7, #32]
 8009560:	9300      	str	r3, [sp, #0]
 8009562:	4603      	mov	r3, r0
 8009564:	68f8      	ldr	r0, [r7, #12]
 8009566:	f7f9 ffa7 	bl	80034b8 <HAL_I2C_Mem_Write>
 800956a:	4603      	mov	r3, r0
 800956c:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 800956e:	7dfb      	ldrb	r3, [r7, #23]
 8009570:	2b00      	cmp	r3, #0
 8009572:	d004      	beq.n	800957e <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8009574:	7afb      	ldrb	r3, [r7, #11]
 8009576:	4619      	mov	r1, r3
 8009578:	68f8      	ldr	r0, [r7, #12]
 800957a:	f000 f805 	bl	8009588 <I2Cx_Error>
  }
  return status;
 800957e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009580:	4618      	mov	r0, r3
 8009582:	3718      	adds	r7, #24
 8009584:	46bd      	mov	sp, r7
 8009586:	bd80      	pop	{r7, pc}

08009588 <I2Cx_Error>:
  * @param  i2c_handler  I2C handler
  * @param  Addr  I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8009588:	b580      	push	{r7, lr}
 800958a:	b082      	sub	sp, #8
 800958c:	af00      	add	r7, sp, #0
 800958e:	6078      	str	r0, [r7, #4]
 8009590:	460b      	mov	r3, r1
 8009592:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8009594:	6878      	ldr	r0, [r7, #4]
 8009596:	f7f9 ff60 	bl	800345a <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 800959a:	6878      	ldr	r0, [r7, #4]
 800959c:	f7ff ff6c 	bl	8009478 <I2Cx_Init>
}
 80095a0:	bf00      	nop
 80095a2:	3708      	adds	r7, #8
 80095a4:	46bd      	mov	sp, r7
 80095a6:	bd80      	pop	{r7, pc}

080095a8 <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 80095a8:	b580      	push	{r7, lr}
 80095aa:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 80095ac:	4802      	ldr	r0, [pc, #8]	; (80095b8 <SENSOR_IO_Init+0x10>)
 80095ae:	f7ff ff63 	bl	8009478 <I2Cx_Init>
}
 80095b2:	bf00      	nop
 80095b4:	bd80      	pop	{r7, pc}
 80095b6:	bf00      	nop
 80095b8:	20000c3c 	.word	0x20000c3c

080095bc <SENSOR_IO_Write>:
  * @param  Reg  Reg address
  * @param  Value  Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 80095bc:	b580      	push	{r7, lr}
 80095be:	b084      	sub	sp, #16
 80095c0:	af02      	add	r7, sp, #8
 80095c2:	4603      	mov	r3, r0
 80095c4:	71fb      	strb	r3, [r7, #7]
 80095c6:	460b      	mov	r3, r1
 80095c8:	71bb      	strb	r3, [r7, #6]
 80095ca:	4613      	mov	r3, r2
 80095cc:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 80095ce:	79bb      	ldrb	r3, [r7, #6]
 80095d0:	b29a      	uxth	r2, r3
 80095d2:	79f9      	ldrb	r1, [r7, #7]
 80095d4:	2301      	movs	r3, #1
 80095d6:	9301      	str	r3, [sp, #4]
 80095d8:	1d7b      	adds	r3, r7, #5
 80095da:	9300      	str	r3, [sp, #0]
 80095dc:	2301      	movs	r3, #1
 80095de:	4803      	ldr	r0, [pc, #12]	; (80095ec <SENSOR_IO_Write+0x30>)
 80095e0:	f7ff ffa5 	bl	800952e <I2Cx_WriteMultiple>
}
 80095e4:	bf00      	nop
 80095e6:	3708      	adds	r7, #8
 80095e8:	46bd      	mov	sp, r7
 80095ea:	bd80      	pop	{r7, pc}
 80095ec:	20000c3c 	.word	0x20000c3c

080095f0 <SENSOR_IO_Read>:
  * @param  Addr  I2C address
  * @param  Reg  Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 80095f0:	b580      	push	{r7, lr}
 80095f2:	b086      	sub	sp, #24
 80095f4:	af02      	add	r7, sp, #8
 80095f6:	4603      	mov	r3, r0
 80095f8:	460a      	mov	r2, r1
 80095fa:	71fb      	strb	r3, [r7, #7]
 80095fc:	4613      	mov	r3, r2
 80095fe:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 8009600:	2300      	movs	r3, #0
 8009602:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8009604:	79bb      	ldrb	r3, [r7, #6]
 8009606:	b29a      	uxth	r2, r3
 8009608:	79f9      	ldrb	r1, [r7, #7]
 800960a:	2301      	movs	r3, #1
 800960c:	9301      	str	r3, [sp, #4]
 800960e:	f107 030f 	add.w	r3, r7, #15
 8009612:	9300      	str	r3, [sp, #0]
 8009614:	2301      	movs	r3, #1
 8009616:	4804      	ldr	r0, [pc, #16]	; (8009628 <SENSOR_IO_Read+0x38>)
 8009618:	f7ff ff5c 	bl	80094d4 <I2Cx_ReadMultiple>

  return read_value;
 800961c:	7bfb      	ldrb	r3, [r7, #15]
}
 800961e:	4618      	mov	r0, r3
 8009620:	3710      	adds	r7, #16
 8009622:	46bd      	mov	sp, r7
 8009624:	bd80      	pop	{r7, pc}
 8009626:	bf00      	nop
 8009628:	20000c3c 	.word	0x20000c3c

0800962c <SENSOR_IO_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 800962c:	b580      	push	{r7, lr}
 800962e:	b084      	sub	sp, #16
 8009630:	af02      	add	r7, sp, #8
 8009632:	603a      	str	r2, [r7, #0]
 8009634:	461a      	mov	r2, r3
 8009636:	4603      	mov	r3, r0
 8009638:	71fb      	strb	r3, [r7, #7]
 800963a:	460b      	mov	r3, r1
 800963c:	71bb      	strb	r3, [r7, #6]
 800963e:	4613      	mov	r3, r2
 8009640:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 8009642:	79bb      	ldrb	r3, [r7, #6]
 8009644:	b29a      	uxth	r2, r3
 8009646:	79f9      	ldrb	r1, [r7, #7]
 8009648:	88bb      	ldrh	r3, [r7, #4]
 800964a:	9301      	str	r3, [sp, #4]
 800964c:	683b      	ldr	r3, [r7, #0]
 800964e:	9300      	str	r3, [sp, #0]
 8009650:	2301      	movs	r3, #1
 8009652:	4804      	ldr	r0, [pc, #16]	; (8009664 <SENSOR_IO_ReadMultiple+0x38>)
 8009654:	f7ff ff3e 	bl	80094d4 <I2Cx_ReadMultiple>
 8009658:	4603      	mov	r3, r0
 800965a:	b29b      	uxth	r3, r3
}
 800965c:	4618      	mov	r0, r3
 800965e:	3708      	adds	r7, #8
 8009660:	46bd      	mov	sp, r7
 8009662:	bd80      	pop	{r7, pc}
 8009664:	20000c3c 	.word	0x20000c3c

08009668 <BSP_ACCELERO_Init>:
/**
  * @brief  Initialize the ACCELERO.
  * @retval ACCELERO_OK or ACCELERO_ERROR
  */
ACCELERO_StatusTypeDef BSP_ACCELERO_Init(void)
{  
 8009668:	b580      	push	{r7, lr}
 800966a:	b084      	sub	sp, #16
 800966c:	af00      	add	r7, sp, #0
  ACCELERO_StatusTypeDef ret = ACCELERO_OK;
 800966e:	2300      	movs	r3, #0
 8009670:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 8009672:	2300      	movs	r3, #0
 8009674:	81bb      	strh	r3, [r7, #12]
  ACCELERO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslAccDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 8009676:	4b19      	ldr	r3, [pc, #100]	; (80096dc <BSP_ACCELERO_Init+0x74>)
 8009678:	689b      	ldr	r3, [r3, #8]
 800967a:	4798      	blx	r3
 800967c:	4603      	mov	r3, r0
 800967e:	2b6a      	cmp	r3, #106	; 0x6a
 8009680:	d002      	beq.n	8009688 <BSP_ACCELERO_Init+0x20>
  {
    ret = ACCELERO_ERROR;
 8009682:	2301      	movs	r3, #1
 8009684:	73fb      	strb	r3, [r7, #15]
 8009686:	e024      	b.n	80096d2 <BSP_ACCELERO_Init+0x6a>
  }
  else
  {
    /* Initialize the ACCELERO accelerometer driver structure */
    AccelerometerDrv = &Lsm6dslAccDrv;
 8009688:	4b15      	ldr	r3, [pc, #84]	; (80096e0 <BSP_ACCELERO_Init+0x78>)
 800968a:	4a14      	ldr	r2, [pc, #80]	; (80096dc <BSP_ACCELERO_Init+0x74>)
 800968c:	601a      	str	r2, [r3, #0]
  
    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the ACCELERO accelerometer structure */
    LSM6DSL_InitStructure.AccOutput_DataRate = LSM6DSL_ODR_52Hz;
 800968e:	2330      	movs	r3, #48	; 0x30
 8009690:	717b      	strb	r3, [r7, #5]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 8009692:	2300      	movs	r3, #0
 8009694:	71bb      	strb	r3, [r7, #6]
    LSM6DSL_InitStructure.AccFull_Scale = LSM6DSL_ACC_FULLSCALE_2G;
 8009696:	2300      	movs	r3, #0
 8009698:	72bb      	strb	r3, [r7, #10]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 800969a:	2340      	movs	r3, #64	; 0x40
 800969c:	723b      	strb	r3, [r7, #8]
    LSM6DSL_InitStructure.High_Resolution = 0;
 800969e:	2300      	movs	r3, #0
 80096a0:	71fb      	strb	r3, [r7, #7]
    LSM6DSL_InitStructure.Communication_Mode = 0;
 80096a2:	2300      	movs	r3, #0
 80096a4:	72fb      	strb	r3, [r7, #11]
        
    /* Configure MEMS: data rate, full scale  */
    ctrl =  (LSM6DSL_InitStructure.AccOutput_DataRate | LSM6DSL_InitStructure.AccFull_Scale);
 80096a6:	797a      	ldrb	r2, [r7, #5]
 80096a8:	7abb      	ldrb	r3, [r7, #10]
 80096aa:	4313      	orrs	r3, r2
 80096ac:	b2db      	uxtb	r3, r3
 80096ae:	81bb      	strh	r3, [r7, #12]
    
    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);
 80096b0:	7a3b      	ldrb	r3, [r7, #8]
 80096b2:	f043 0304 	orr.w	r3, r3, #4
 80096b6:	b2db      	uxtb	r3, r3
 80096b8:	021b      	lsls	r3, r3, #8
 80096ba:	b21a      	sxth	r2, r3
 80096bc:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80096c0:	4313      	orrs	r3, r2
 80096c2:	b21b      	sxth	r3, r3
 80096c4:	81bb      	strh	r3, [r7, #12]

    /* Configure the ACCELERO accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 80096c6:	4b06      	ldr	r3, [pc, #24]	; (80096e0 <BSP_ACCELERO_Init+0x78>)
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	89ba      	ldrh	r2, [r7, #12]
 80096ce:	4610      	mov	r0, r2
 80096d0:	4798      	blx	r3
  }  

  return ret;
 80096d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80096d4:	4618      	mov	r0, r3
 80096d6:	3710      	adds	r7, #16
 80096d8:	46bd      	mov	sp, r7
 80096da:	bd80      	pop	{r7, pc}
 80096dc:	2000001c 	.word	0x2000001c
 80096e0:	20000c88 	.word	0x20000c88

080096e4 <BSP_ACCELERO_AccGetXYZ>:
  * @param  pDataXYZ Pointer on 3 angular accelerations table with  
  *                  pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis
  * @retval None
  */
void BSP_ACCELERO_AccGetXYZ(int16_t *pDataXYZ)
{
 80096e4:	b580      	push	{r7, lr}
 80096e6:	b082      	sub	sp, #8
 80096e8:	af00      	add	r7, sp, #0
 80096ea:	6078      	str	r0, [r7, #4]
  if(AccelerometerDrv != NULL)
 80096ec:	4b08      	ldr	r3, [pc, #32]	; (8009710 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d009      	beq.n	8009708 <BSP_ACCELERO_AccGetXYZ+0x24>
  {
    if(AccelerometerDrv->GetXYZ != NULL)
 80096f4:	4b06      	ldr	r3, [pc, #24]	; (8009710 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d004      	beq.n	8009708 <BSP_ACCELERO_AccGetXYZ+0x24>
    {   
      AccelerometerDrv->GetXYZ(pDataXYZ);
 80096fe:	4b04      	ldr	r3, [pc, #16]	; (8009710 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009704:	6878      	ldr	r0, [r7, #4]
 8009706:	4798      	blx	r3
    }
  }
}
 8009708:	bf00      	nop
 800970a:	3708      	adds	r7, #8
 800970c:	46bd      	mov	sp, r7
 800970e:	bd80      	pop	{r7, pc}
 8009710:	20000c88 	.word	0x20000c88

08009714 <LSM6DSL_AccInit>:
/**
  * @brief  Set LSM6DSL Accelerometer Initialization.
  * @param  InitStruct: Init parameters
  */
void LSM6DSL_AccInit(uint16_t InitStruct)
{  
 8009714:	b580      	push	{r7, lr}
 8009716:	b084      	sub	sp, #16
 8009718:	af00      	add	r7, sp, #0
 800971a:	4603      	mov	r3, r0
 800971c:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 800971e:	2300      	movs	r3, #0
 8009720:	73fb      	strb	r3, [r7, #15]
  uint8_t tmp;

  /* Read CTRL1_XL */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8009722:	2110      	movs	r1, #16
 8009724:	20d4      	movs	r0, #212	; 0xd4
 8009726:	f7ff ff63 	bl	80095f0 <SENSOR_IO_Read>
 800972a:	4603      	mov	r3, r0
 800972c:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL1_XL register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
 800972e:	88fb      	ldrh	r3, [r7, #6]
 8009730:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0xFC);
 8009732:	7bbb      	ldrb	r3, [r7, #14]
 8009734:	f003 0303 	and.w	r3, r3, #3
 8009738:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl;
 800973a:	7bba      	ldrb	r2, [r7, #14]
 800973c:	7bfb      	ldrb	r3, [r7, #15]
 800973e:	4313      	orrs	r3, r2
 8009740:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, tmp);
 8009742:	7bbb      	ldrb	r3, [r7, #14]
 8009744:	461a      	mov	r2, r3
 8009746:	2110      	movs	r1, #16
 8009748:	20d4      	movs	r0, #212	; 0xd4
 800974a:	f7ff ff37 	bl	80095bc <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 800974e:	2112      	movs	r1, #18
 8009750:	20d4      	movs	r0, #212	; 0xd4
 8009752:	f7ff ff4d 	bl	80095f0 <SENSOR_IO_Read>
 8009756:	4603      	mov	r3, r0
 8009758:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
 800975a:	88fb      	ldrh	r3, [r7, #6]
 800975c:	0a1b      	lsrs	r3, r3, #8
 800975e:	b29b      	uxth	r3, r3
 8009760:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0x44);
 8009762:	7bbb      	ldrb	r3, [r7, #14]
 8009764:	f023 0344 	bic.w	r3, r3, #68	; 0x44
 8009768:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl; 
 800976a:	7bba      	ldrb	r2, [r7, #14]
 800976c:	7bfb      	ldrb	r3, [r7, #15]
 800976e:	4313      	orrs	r3, r2
 8009770:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 8009772:	7bbb      	ldrb	r3, [r7, #14]
 8009774:	461a      	mov	r2, r3
 8009776:	2112      	movs	r1, #18
 8009778:	20d4      	movs	r0, #212	; 0xd4
 800977a:	f7ff ff1f 	bl	80095bc <SENSOR_IO_Write>
}
 800977e:	bf00      	nop
 8009780:	3710      	adds	r7, #16
 8009782:	46bd      	mov	sp, r7
 8009784:	bd80      	pop	{r7, pc}

08009786 <LSM6DSL_AccDeInit>:

/**
  * @brief  LSM6DSL Accelerometer De-initialization.
  */
void LSM6DSL_AccDeInit(void)
{
 8009786:	b580      	push	{r7, lr}
 8009788:	b082      	sub	sp, #8
 800978a:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 800978c:	2300      	movs	r3, #0
 800978e:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8009790:	2110      	movs	r1, #16
 8009792:	20d4      	movs	r0, #212	; 0xd4
 8009794:	f7ff ff2c 	bl	80095f0 <SENSOR_IO_Read>
 8009798:	4603      	mov	r3, r0
 800979a:	71fb      	strb	r3, [r7, #7]

  /* Clear ODR bits */
  ctrl &= ~(LSM6DSL_ODR_BITPOSITION);
 800979c:	79fb      	ldrb	r3, [r7, #7]
 800979e:	f003 030f 	and.w	r3, r3, #15
 80097a2:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, ctrl);
 80097a4:	79fb      	ldrb	r3, [r7, #7]
 80097a6:	461a      	mov	r2, r3
 80097a8:	2110      	movs	r1, #16
 80097aa:	20d4      	movs	r0, #212	; 0xd4
 80097ac:	f7ff ff06 	bl	80095bc <SENSOR_IO_Write>
}
 80097b0:	bf00      	nop
 80097b2:	3708      	adds	r7, #8
 80097b4:	46bd      	mov	sp, r7
 80097b6:	bd80      	pop	{r7, pc}

080097b8 <LSM6DSL_AccReadID>:
/**
  * @brief  Read LSM6DSL ID.
  * @retval ID 
  */
uint8_t LSM6DSL_AccReadID(void)
{  
 80097b8:	b580      	push	{r7, lr}
 80097ba:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();
 80097bc:	f7ff fef4 	bl	80095a8 <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return (SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG));
 80097c0:	210f      	movs	r1, #15
 80097c2:	20d4      	movs	r0, #212	; 0xd4
 80097c4:	f7ff ff14 	bl	80095f0 <SENSOR_IO_Read>
 80097c8:	4603      	mov	r3, r0
}
 80097ca:	4618      	mov	r0, r3
 80097cc:	bd80      	pop	{r7, pc}

080097ce <LSM6DSL_AccLowPower>:
/**
  * @brief  Set/Unset Accelerometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LSM6DSL_AccLowPower(uint16_t status)
{
 80097ce:	b580      	push	{r7, lr}
 80097d0:	b084      	sub	sp, #16
 80097d2:	af00      	add	r7, sp, #0
 80097d4:	4603      	mov	r3, r0
 80097d6:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 80097d8:	2300      	movs	r3, #0
 80097da:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL6_C value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C);
 80097dc:	2115      	movs	r1, #21
 80097de:	20d4      	movs	r0, #212	; 0xd4
 80097e0:	f7ff ff06 	bl	80095f0 <SENSOR_IO_Read>
 80097e4:	4603      	mov	r3, r0
 80097e6:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x10);
 80097e8:	7bfb      	ldrb	r3, [r7, #15]
 80097ea:	f023 0310 	bic.w	r3, r3, #16
 80097ee:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 80097f0:	88fb      	ldrh	r3, [r7, #6]
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d003      	beq.n	80097fe <LSM6DSL_AccLowPower+0x30>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_ENABLED;
 80097f6:	7bfb      	ldrb	r3, [r7, #15]
 80097f8:	f043 0310 	orr.w	r3, r3, #16
 80097fc:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C, ctrl);
 80097fe:	7bfb      	ldrb	r3, [r7, #15]
 8009800:	461a      	mov	r2, r3
 8009802:	2115      	movs	r1, #21
 8009804:	20d4      	movs	r0, #212	; 0xd4
 8009806:	f7ff fed9 	bl	80095bc <SENSOR_IO_Write>
}
 800980a:	bf00      	nop
 800980c:	3710      	adds	r7, #16
 800980e:	46bd      	mov	sp, r7
 8009810:	bd80      	pop	{r7, pc}
	...

08009814 <LSM6DSL_AccReadXYZ>:
/**
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  */
void LSM6DSL_AccReadXYZ(int16_t* pData)
{
 8009814:	b580      	push	{r7, lr}
 8009816:	b088      	sub	sp, #32
 8009818:	af00      	add	r7, sp, #0
 800981a:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlx= 0;
 800981c:	2300      	movs	r3, #0
 800981e:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 8009820:	2300      	movs	r3, #0
 8009822:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 8009824:	f04f 0300 	mov.w	r3, #0
 8009828:	61bb      	str	r3, [r7, #24]
  
  /* Read the acceleration control register content */
  ctrlx = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 800982a:	2110      	movs	r1, #16
 800982c:	20d4      	movs	r0, #212	; 0xd4
 800982e:	f7ff fedf 	bl	80095f0 <SENSOR_IO_Read>
 8009832:	4603      	mov	r3, r0
 8009834:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_XL, buffer, 6);
 8009836:	f107 0208 	add.w	r2, r7, #8
 800983a:	2306      	movs	r3, #6
 800983c:	2128      	movs	r1, #40	; 0x28
 800983e:	20d4      	movs	r0, #212	; 0xd4
 8009840:	f7ff fef4 	bl	800962c <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 8009844:	2300      	movs	r3, #0
 8009846:	77fb      	strb	r3, [r7, #31]
 8009848:	e01c      	b.n	8009884 <LSM6DSL_AccReadXYZ+0x70>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 800984a:	7ffb      	ldrb	r3, [r7, #31]
 800984c:	005b      	lsls	r3, r3, #1
 800984e:	3301      	adds	r3, #1
 8009850:	3320      	adds	r3, #32
 8009852:	443b      	add	r3, r7
 8009854:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8009858:	b29b      	uxth	r3, r3
 800985a:	021b      	lsls	r3, r3, #8
 800985c:	b29a      	uxth	r2, r3
 800985e:	7ffb      	ldrb	r3, [r7, #31]
 8009860:	005b      	lsls	r3, r3, #1
 8009862:	3320      	adds	r3, #32
 8009864:	443b      	add	r3, r7
 8009866:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 800986a:	b29b      	uxth	r3, r3
 800986c:	4413      	add	r3, r2
 800986e:	b29a      	uxth	r2, r3
 8009870:	7ffb      	ldrb	r3, [r7, #31]
 8009872:	b212      	sxth	r2, r2
 8009874:	005b      	lsls	r3, r3, #1
 8009876:	3320      	adds	r3, #32
 8009878:	443b      	add	r3, r7
 800987a:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 800987e:	7ffb      	ldrb	r3, [r7, #31]
 8009880:	3301      	adds	r3, #1
 8009882:	77fb      	strb	r3, [r7, #31]
 8009884:	7ffb      	ldrb	r3, [r7, #31]
 8009886:	2b02      	cmp	r3, #2
 8009888:	d9df      	bls.n	800984a <LSM6DSL_AccReadXYZ+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL1_XL */
  switch(ctrlx & 0x0C)
 800988a:	7dfb      	ldrb	r3, [r7, #23]
 800988c:	f003 030c 	and.w	r3, r3, #12
 8009890:	2b0c      	cmp	r3, #12
 8009892:	d829      	bhi.n	80098e8 <LSM6DSL_AccReadXYZ+0xd4>
 8009894:	a201      	add	r2, pc, #4	; (adr r2, 800989c <LSM6DSL_AccReadXYZ+0x88>)
 8009896:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800989a:	bf00      	nop
 800989c:	080098d1 	.word	0x080098d1
 80098a0:	080098e9 	.word	0x080098e9
 80098a4:	080098e9 	.word	0x080098e9
 80098a8:	080098e9 	.word	0x080098e9
 80098ac:	080098e3 	.word	0x080098e3
 80098b0:	080098e9 	.word	0x080098e9
 80098b4:	080098e9 	.word	0x080098e9
 80098b8:	080098e9 	.word	0x080098e9
 80098bc:	080098d7 	.word	0x080098d7
 80098c0:	080098e9 	.word	0x080098e9
 80098c4:	080098e9 	.word	0x080098e9
 80098c8:	080098e9 	.word	0x080098e9
 80098cc:	080098dd 	.word	0x080098dd
  {
  case LSM6DSL_ACC_FULLSCALE_2G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_2G;
 80098d0:	4b18      	ldr	r3, [pc, #96]	; (8009934 <LSM6DSL_AccReadXYZ+0x120>)
 80098d2:	61bb      	str	r3, [r7, #24]
    break;
 80098d4:	e008      	b.n	80098e8 <LSM6DSL_AccReadXYZ+0xd4>
  case LSM6DSL_ACC_FULLSCALE_4G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_4G;
 80098d6:	4b18      	ldr	r3, [pc, #96]	; (8009938 <LSM6DSL_AccReadXYZ+0x124>)
 80098d8:	61bb      	str	r3, [r7, #24]
    break;
 80098da:	e005      	b.n	80098e8 <LSM6DSL_AccReadXYZ+0xd4>
  case LSM6DSL_ACC_FULLSCALE_8G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_8G;
 80098dc:	4b17      	ldr	r3, [pc, #92]	; (800993c <LSM6DSL_AccReadXYZ+0x128>)
 80098de:	61bb      	str	r3, [r7, #24]
    break;
 80098e0:	e002      	b.n	80098e8 <LSM6DSL_AccReadXYZ+0xd4>
  case LSM6DSL_ACC_FULLSCALE_16G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_16G;
 80098e2:	4b17      	ldr	r3, [pc, #92]	; (8009940 <LSM6DSL_AccReadXYZ+0x12c>)
 80098e4:	61bb      	str	r3, [r7, #24]
    break;    
 80098e6:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 80098e8:	2300      	movs	r3, #0
 80098ea:	77fb      	strb	r3, [r7, #31]
 80098ec:	e01a      	b.n	8009924 <LSM6DSL_AccReadXYZ+0x110>
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 80098ee:	7ffb      	ldrb	r3, [r7, #31]
 80098f0:	005b      	lsls	r3, r3, #1
 80098f2:	3320      	adds	r3, #32
 80098f4:	443b      	add	r3, r7
 80098f6:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 80098fa:	ee07 3a90 	vmov	s15, r3
 80098fe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009902:	edd7 7a06 	vldr	s15, [r7, #24]
 8009906:	ee67 7a27 	vmul.f32	s15, s14, s15
 800990a:	7ffb      	ldrb	r3, [r7, #31]
 800990c:	005b      	lsls	r3, r3, #1
 800990e:	687a      	ldr	r2, [r7, #4]
 8009910:	4413      	add	r3, r2
 8009912:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009916:	ee17 2a90 	vmov	r2, s15
 800991a:	b212      	sxth	r2, r2
 800991c:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 800991e:	7ffb      	ldrb	r3, [r7, #31]
 8009920:	3301      	adds	r3, #1
 8009922:	77fb      	strb	r3, [r7, #31]
 8009924:	7ffb      	ldrb	r3, [r7, #31]
 8009926:	2b02      	cmp	r3, #2
 8009928:	d9e1      	bls.n	80098ee <LSM6DSL_AccReadXYZ+0xda>
  }
}
 800992a:	bf00      	nop
 800992c:	bf00      	nop
 800992e:	3720      	adds	r7, #32
 8009930:	46bd      	mov	sp, r7
 8009932:	bd80      	pop	{r7, pc}
 8009934:	3d79db23 	.word	0x3d79db23
 8009938:	3df9db23 	.word	0x3df9db23
 800993c:	3e79db23 	.word	0x3e79db23
 8009940:	3ef9db23 	.word	0x3ef9db23

08009944 <Hex2Num>:
  * @param  a: character to convert
  * @retval integer value.
  */

static  uint8_t Hex2Num(char a)
{
 8009944:	b480      	push	{r7}
 8009946:	b083      	sub	sp, #12
 8009948:	af00      	add	r7, sp, #0
 800994a:	4603      	mov	r3, r0
 800994c:	71fb      	strb	r3, [r7, #7]
    if (a >= '0' && a <= '9') {                             /* Char is num */
 800994e:	79fb      	ldrb	r3, [r7, #7]
 8009950:	2b2f      	cmp	r3, #47	; 0x2f
 8009952:	d906      	bls.n	8009962 <Hex2Num+0x1e>
 8009954:	79fb      	ldrb	r3, [r7, #7]
 8009956:	2b39      	cmp	r3, #57	; 0x39
 8009958:	d803      	bhi.n	8009962 <Hex2Num+0x1e>
        return a - '0';
 800995a:	79fb      	ldrb	r3, [r7, #7]
 800995c:	3b30      	subs	r3, #48	; 0x30
 800995e:	b2db      	uxtb	r3, r3
 8009960:	e014      	b.n	800998c <Hex2Num+0x48>
    } else if (a >= 'a' && a <= 'f') {                      /* Char is lowercase character A - Z (hex) */
 8009962:	79fb      	ldrb	r3, [r7, #7]
 8009964:	2b60      	cmp	r3, #96	; 0x60
 8009966:	d906      	bls.n	8009976 <Hex2Num+0x32>
 8009968:	79fb      	ldrb	r3, [r7, #7]
 800996a:	2b66      	cmp	r3, #102	; 0x66
 800996c:	d803      	bhi.n	8009976 <Hex2Num+0x32>
        return (a - 'a') + 10;
 800996e:	79fb      	ldrb	r3, [r7, #7]
 8009970:	3b57      	subs	r3, #87	; 0x57
 8009972:	b2db      	uxtb	r3, r3
 8009974:	e00a      	b.n	800998c <Hex2Num+0x48>
    } else if (a >= 'A' && a <= 'F') {                      /* Char is uppercase character A - Z (hex) */
 8009976:	79fb      	ldrb	r3, [r7, #7]
 8009978:	2b40      	cmp	r3, #64	; 0x40
 800997a:	d906      	bls.n	800998a <Hex2Num+0x46>
 800997c:	79fb      	ldrb	r3, [r7, #7]
 800997e:	2b46      	cmp	r3, #70	; 0x46
 8009980:	d803      	bhi.n	800998a <Hex2Num+0x46>
        return (a - 'A') + 10;
 8009982:	79fb      	ldrb	r3, [r7, #7]
 8009984:	3b37      	subs	r3, #55	; 0x37
 8009986:	b2db      	uxtb	r3, r3
 8009988:	e000      	b.n	800998c <Hex2Num+0x48>
    }

    return 0;
 800998a:	2300      	movs	r3, #0
}
 800998c:	4618      	mov	r0, r3
 800998e:	370c      	adds	r7, #12
 8009990:	46bd      	mov	sp, r7
 8009992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009996:	4770      	bx	lr

08009998 <ParseHexNumber>:
  * @param  ptr: pointer to string
  * @param  cnt: pointer to the number of parsed digit
  * @retval Hex value.
  */
static uint32_t ParseHexNumber(char* ptr, uint8_t* cnt)
{
 8009998:	b580      	push	{r7, lr}
 800999a:	b084      	sub	sp, #16
 800999c:	af00      	add	r7, sp, #0
 800999e:	6078      	str	r0, [r7, #4]
 80099a0:	6039      	str	r1, [r7, #0]
    uint32_t sum = 0;
 80099a2:	2300      	movs	r3, #0
 80099a4:	60fb      	str	r3, [r7, #12]
    uint8_t i = 0;
 80099a6:	2300      	movs	r3, #0
 80099a8:	72fb      	strb	r3, [r7, #11]

    while (CHARISHEXNUM(*ptr)) {                    		/* Parse number */
 80099aa:	e012      	b.n	80099d2 <ParseHexNumber+0x3a>
        sum <<= 4;
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	011b      	lsls	r3, r3, #4
 80099b0:	60fb      	str	r3, [r7, #12]
        sum += Hex2Num(*ptr);
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	781b      	ldrb	r3, [r3, #0]
 80099b6:	4618      	mov	r0, r3
 80099b8:	f7ff ffc4 	bl	8009944 <Hex2Num>
 80099bc:	4603      	mov	r3, r0
 80099be:	461a      	mov	r2, r3
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	4413      	add	r3, r2
 80099c4:	60fb      	str	r3, [r7, #12]
        ptr++;
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	3301      	adds	r3, #1
 80099ca:	607b      	str	r3, [r7, #4]
        i++;
 80099cc:	7afb      	ldrb	r3, [r7, #11]
 80099ce:	3301      	adds	r3, #1
 80099d0:	72fb      	strb	r3, [r7, #11]
    while (CHARISHEXNUM(*ptr)) {                    		/* Parse number */
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	781b      	ldrb	r3, [r3, #0]
 80099d6:	2b2f      	cmp	r3, #47	; 0x2f
 80099d8:	d903      	bls.n	80099e2 <ParseHexNumber+0x4a>
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	781b      	ldrb	r3, [r3, #0]
 80099de:	2b39      	cmp	r3, #57	; 0x39
 80099e0:	d9e4      	bls.n	80099ac <ParseHexNumber+0x14>
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	781b      	ldrb	r3, [r3, #0]
 80099e6:	2b60      	cmp	r3, #96	; 0x60
 80099e8:	d903      	bls.n	80099f2 <ParseHexNumber+0x5a>
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	781b      	ldrb	r3, [r3, #0]
 80099ee:	2b66      	cmp	r3, #102	; 0x66
 80099f0:	d9dc      	bls.n	80099ac <ParseHexNumber+0x14>
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	781b      	ldrb	r3, [r3, #0]
 80099f6:	2b40      	cmp	r3, #64	; 0x40
 80099f8:	d903      	bls.n	8009a02 <ParseHexNumber+0x6a>
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	781b      	ldrb	r3, [r3, #0]
 80099fe:	2b46      	cmp	r3, #70	; 0x46
 8009a00:	d9d4      	bls.n	80099ac <ParseHexNumber+0x14>
    }

    if (cnt != NULL) {                               		/* Save number of characters used for number */
 8009a02:	683b      	ldr	r3, [r7, #0]
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d002      	beq.n	8009a0e <ParseHexNumber+0x76>
        *cnt = i;
 8009a08:	683b      	ldr	r3, [r7, #0]
 8009a0a:	7afa      	ldrb	r2, [r7, #11]
 8009a0c:	701a      	strb	r2, [r3, #0]
    }
    return sum;                                        		/* Return number */
 8009a0e:	68fb      	ldr	r3, [r7, #12]
}
 8009a10:	4618      	mov	r0, r3
 8009a12:	3710      	adds	r7, #16
 8009a14:	46bd      	mov	sp, r7
 8009a16:	bd80      	pop	{r7, pc}

08009a18 <ParseNumber>:
  * @param  ptr: pointer to string
  * @param  cnt: pointer to the number of parsed digit
  * @retval integer value.
  */
static int32_t ParseNumber(char* ptr, uint8_t* cnt)
{
 8009a18:	b480      	push	{r7}
 8009a1a:	b085      	sub	sp, #20
 8009a1c:	af00      	add	r7, sp, #0
 8009a1e:	6078      	str	r0, [r7, #4]
 8009a20:	6039      	str	r1, [r7, #0]
    uint8_t minus = 0, i = 0;
 8009a22:	2300      	movs	r3, #0
 8009a24:	73fb      	strb	r3, [r7, #15]
 8009a26:	2300      	movs	r3, #0
 8009a28:	73bb      	strb	r3, [r7, #14]
    int32_t sum = 0;
 8009a2a:	2300      	movs	r3, #0
 8009a2c:	60bb      	str	r3, [r7, #8]

    if (*ptr == '-') {                                		/* Check for minus character */
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	781b      	ldrb	r3, [r3, #0]
 8009a32:	2b2d      	cmp	r3, #45	; 0x2d
 8009a34:	d119      	bne.n	8009a6a <ParseNumber+0x52>
        minus = 1;
 8009a36:	2301      	movs	r3, #1
 8009a38:	73fb      	strb	r3, [r7, #15]
        ptr++;
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	3301      	adds	r3, #1
 8009a3e:	607b      	str	r3, [r7, #4]
        i++;
 8009a40:	7bbb      	ldrb	r3, [r7, #14]
 8009a42:	3301      	adds	r3, #1
 8009a44:	73bb      	strb	r3, [r7, #14]
    }
    while (CHARISNUM(*ptr)) {                        		/* Parse number */
 8009a46:	e010      	b.n	8009a6a <ParseNumber+0x52>
        sum = 10 * sum + CHAR2NUM(*ptr);
 8009a48:	68ba      	ldr	r2, [r7, #8]
 8009a4a:	4613      	mov	r3, r2
 8009a4c:	009b      	lsls	r3, r3, #2
 8009a4e:	4413      	add	r3, r2
 8009a50:	005b      	lsls	r3, r3, #1
 8009a52:	461a      	mov	r2, r3
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	781b      	ldrb	r3, [r3, #0]
 8009a58:	3b30      	subs	r3, #48	; 0x30
 8009a5a:	4413      	add	r3, r2
 8009a5c:	60bb      	str	r3, [r7, #8]
        ptr++;
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	3301      	adds	r3, #1
 8009a62:	607b      	str	r3, [r7, #4]
        i++;
 8009a64:	7bbb      	ldrb	r3, [r7, #14]
 8009a66:	3301      	adds	r3, #1
 8009a68:	73bb      	strb	r3, [r7, #14]
    while (CHARISNUM(*ptr)) {                        		/* Parse number */
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	781b      	ldrb	r3, [r3, #0]
 8009a6e:	2b2f      	cmp	r3, #47	; 0x2f
 8009a70:	d903      	bls.n	8009a7a <ParseNumber+0x62>
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	781b      	ldrb	r3, [r3, #0]
 8009a76:	2b39      	cmp	r3, #57	; 0x39
 8009a78:	d9e6      	bls.n	8009a48 <ParseNumber+0x30>
    }
    if (cnt != NULL) {                                		/* Save number of characters used for number */
 8009a7a:	683b      	ldr	r3, [r7, #0]
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d002      	beq.n	8009a86 <ParseNumber+0x6e>
        *cnt = i;
 8009a80:	683b      	ldr	r3, [r7, #0]
 8009a82:	7bba      	ldrb	r2, [r7, #14]
 8009a84:	701a      	strb	r2, [r3, #0]
    }
    if (minus) {                                    		/* Minus detected */
 8009a86:	7bfb      	ldrb	r3, [r7, #15]
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d002      	beq.n	8009a92 <ParseNumber+0x7a>
        return 0 - sum;
 8009a8c:	68bb      	ldr	r3, [r7, #8]
 8009a8e:	425b      	negs	r3, r3
 8009a90:	e000      	b.n	8009a94 <ParseNumber+0x7c>
    }
    return sum;                                       		/* Return number */
 8009a92:	68bb      	ldr	r3, [r7, #8]
}
 8009a94:	4618      	mov	r0, r3
 8009a96:	3714      	adds	r7, #20
 8009a98:	46bd      	mov	sp, r7
 8009a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a9e:	4770      	bx	lr

08009aa0 <ParseMAC>:
  * @param  ptr: pointer to string
  * @param  arr: pointer to MAC array
  * @retval None.
  */
static void ParseMAC(char* ptr, uint8_t* arr)
{
 8009aa0:	b580      	push	{r7, lr}
 8009aa2:	b084      	sub	sp, #16
 8009aa4:	af00      	add	r7, sp, #0
 8009aa6:	6078      	str	r0, [r7, #4]
 8009aa8:	6039      	str	r1, [r7, #0]
  uint8_t hexnum = 0, hexcnt;
 8009aaa:	2300      	movs	r3, #0
 8009aac:	73fb      	strb	r3, [r7, #15]

  while(* ptr) {
 8009aae:	e019      	b.n	8009ae4 <ParseMAC+0x44>
    hexcnt = 1;
 8009ab0:	2301      	movs	r3, #1
 8009ab2:	73bb      	strb	r3, [r7, #14]
    if(*ptr != ':')
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	781b      	ldrb	r3, [r3, #0]
 8009ab8:	2b3a      	cmp	r3, #58	; 0x3a
 8009aba:	d00e      	beq.n	8009ada <ParseMAC+0x3a>
    {
      arr[hexnum++] = ParseHexNumber(ptr, &hexcnt);
 8009abc:	f107 030e 	add.w	r3, r7, #14
 8009ac0:	4619      	mov	r1, r3
 8009ac2:	6878      	ldr	r0, [r7, #4]
 8009ac4:	f7ff ff68 	bl	8009998 <ParseHexNumber>
 8009ac8:	4601      	mov	r1, r0
 8009aca:	7bfb      	ldrb	r3, [r7, #15]
 8009acc:	1c5a      	adds	r2, r3, #1
 8009ace:	73fa      	strb	r2, [r7, #15]
 8009ad0:	461a      	mov	r2, r3
 8009ad2:	683b      	ldr	r3, [r7, #0]
 8009ad4:	4413      	add	r3, r2
 8009ad6:	b2ca      	uxtb	r2, r1
 8009ad8:	701a      	strb	r2, [r3, #0]
    }
    ptr = ptr + hexcnt;
 8009ada:	7bbb      	ldrb	r3, [r7, #14]
 8009adc:	461a      	mov	r2, r3
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	4413      	add	r3, r2
 8009ae2:	607b      	str	r3, [r7, #4]
  while(* ptr) {
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	781b      	ldrb	r3, [r3, #0]
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d1e1      	bne.n	8009ab0 <ParseMAC+0x10>
  }
}
 8009aec:	bf00      	nop
 8009aee:	bf00      	nop
 8009af0:	3710      	adds	r7, #16
 8009af2:	46bd      	mov	sp, r7
 8009af4:	bd80      	pop	{r7, pc}

08009af6 <ParseIP>:
  * @param  ptr: pointer to string
  * @param  arr: pointer to IP array
  * @retval None.
  */
static  void ParseIP(char* ptr, uint8_t* arr)
{
 8009af6:	b580      	push	{r7, lr}
 8009af8:	b084      	sub	sp, #16
 8009afa:	af00      	add	r7, sp, #0
 8009afc:	6078      	str	r0, [r7, #4]
 8009afe:	6039      	str	r1, [r7, #0]
  uint8_t hexnum = 0, hexcnt;
 8009b00:	2300      	movs	r3, #0
 8009b02:	73fb      	strb	r3, [r7, #15]

  while(* ptr) {
 8009b04:	e019      	b.n	8009b3a <ParseIP+0x44>
    hexcnt = 1;
 8009b06:	2301      	movs	r3, #1
 8009b08:	73bb      	strb	r3, [r7, #14]
    if(*ptr != '.')
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	781b      	ldrb	r3, [r3, #0]
 8009b0e:	2b2e      	cmp	r3, #46	; 0x2e
 8009b10:	d00e      	beq.n	8009b30 <ParseIP+0x3a>
    {
      arr[hexnum++] = ParseNumber(ptr, &hexcnt);
 8009b12:	f107 030e 	add.w	r3, r7, #14
 8009b16:	4619      	mov	r1, r3
 8009b18:	6878      	ldr	r0, [r7, #4]
 8009b1a:	f7ff ff7d 	bl	8009a18 <ParseNumber>
 8009b1e:	4601      	mov	r1, r0
 8009b20:	7bfb      	ldrb	r3, [r7, #15]
 8009b22:	1c5a      	adds	r2, r3, #1
 8009b24:	73fa      	strb	r2, [r7, #15]
 8009b26:	461a      	mov	r2, r3
 8009b28:	683b      	ldr	r3, [r7, #0]
 8009b2a:	4413      	add	r3, r2
 8009b2c:	b2ca      	uxtb	r2, r1
 8009b2e:	701a      	strb	r2, [r3, #0]
    }
    ptr = ptr + hexcnt;
 8009b30:	7bbb      	ldrb	r3, [r7, #14]
 8009b32:	461a      	mov	r2, r3
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	4413      	add	r3, r2
 8009b38:	607b      	str	r3, [r7, #4]
  while(* ptr) {
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	781b      	ldrb	r3, [r3, #0]
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d1e1      	bne.n	8009b06 <ParseIP+0x10>
  }
}
 8009b42:	bf00      	nop
 8009b44:	bf00      	nop
 8009b46:	3710      	adds	r7, #16
 8009b48:	46bd      	mov	sp, r7
 8009b4a:	bd80      	pop	{r7, pc}

08009b4c <AT_ParseInfo>:
  * @param  Obj: pointer to module handle
  * @param  ptr: pointer to string
  * @retval None.
  */
static void AT_ParseInfo(ES_WIFIObject_t *Obj,uint8_t *pdata)
{
 8009b4c:	b580      	push	{r7, lr}
 8009b4e:	b084      	sub	sp, #16
 8009b50:	af00      	add	r7, sp, #0
 8009b52:	6078      	str	r0, [r7, #4]
 8009b54:	6039      	str	r1, [r7, #0]
  char *ptr;
  uint8_t num = 0;
 8009b56:	2300      	movs	r3, #0
 8009b58:	72fb      	strb	r3, [r7, #11]

  ptr = strtok((char *)pdata + 2, ",");
 8009b5a:	683b      	ldr	r3, [r7, #0]
 8009b5c:	3302      	adds	r3, #2
 8009b5e:	4934      	ldr	r1, [pc, #208]	; (8009c30 <AT_ParseInfo+0xe4>)
 8009b60:	4618      	mov	r0, r3
 8009b62:	f009 f929 	bl	8012db8 <strtok>
 8009b66:	60f8      	str	r0, [r7, #12]

  while (ptr != NULL){
 8009b68:	e05a      	b.n	8009c20 <AT_ParseInfo+0xd4>
    switch (num++) {
 8009b6a:	7afb      	ldrb	r3, [r7, #11]
 8009b6c:	1c5a      	adds	r2, r3, #1
 8009b6e:	72fa      	strb	r2, [r7, #11]
 8009b70:	2b06      	cmp	r3, #6
 8009b72:	d84f      	bhi.n	8009c14 <AT_ParseInfo+0xc8>
 8009b74:	a201      	add	r2, pc, #4	; (adr r2, 8009b7c <AT_ParseInfo+0x30>)
 8009b76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b7a:	bf00      	nop
 8009b7c:	08009b99 	.word	0x08009b99
 8009b80:	08009ba7 	.word	0x08009ba7
 8009b84:	08009bb7 	.word	0x08009bb7
 8009b88:	08009bc7 	.word	0x08009bc7
 8009b8c:	08009bd7 	.word	0x08009bd7
 8009b90:	08009be7 	.word	0x08009be7
 8009b94:	08009bfb 	.word	0x08009bfb
    case 0:
      strncpy((char *)Obj->Product_ID,  ptr, ES_WIFI_PRODUCT_ID_SIZE);
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	2220      	movs	r2, #32
 8009b9c:	68f9      	ldr	r1, [r7, #12]
 8009b9e:	4618      	mov	r0, r3
 8009ba0:	f009 f8e1 	bl	8012d66 <strncpy>
      break;
 8009ba4:	e037      	b.n	8009c16 <AT_ParseInfo+0xca>

    case 1:
      strncpy((char *)Obj->FW_Rev,  ptr, ES_WIFI_FW_REV_SIZE );
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	3320      	adds	r3, #32
 8009baa:	2218      	movs	r2, #24
 8009bac:	68f9      	ldr	r1, [r7, #12]
 8009bae:	4618      	mov	r0, r3
 8009bb0:	f009 f8d9 	bl	8012d66 <strncpy>
      break;
 8009bb4:	e02f      	b.n	8009c16 <AT_ParseInfo+0xca>

    case 2:
      strncpy((char *)Obj->API_Rev,  ptr, ES_WIFI_API_REV_SIZE);
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	3338      	adds	r3, #56	; 0x38
 8009bba:	2210      	movs	r2, #16
 8009bbc:	68f9      	ldr	r1, [r7, #12]
 8009bbe:	4618      	mov	r0, r3
 8009bc0:	f009 f8d1 	bl	8012d66 <strncpy>
      break;
 8009bc4:	e027      	b.n	8009c16 <AT_ParseInfo+0xca>

    case 3:
      strncpy((char *)Obj->Stack_Rev,  ptr, ES_WIFI_STACK_REV_SIZE);
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	3348      	adds	r3, #72	; 0x48
 8009bca:	2210      	movs	r2, #16
 8009bcc:	68f9      	ldr	r1, [r7, #12]
 8009bce:	4618      	mov	r0, r3
 8009bd0:	f009 f8c9 	bl	8012d66 <strncpy>
      break;
 8009bd4:	e01f      	b.n	8009c16 <AT_ParseInfo+0xca>

    case 4:
      strncpy((char *)Obj->RTOS_Rev,  ptr, ES_WIFI_RTOS_REV_SIZE);
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	3358      	adds	r3, #88	; 0x58
 8009bda:	2210      	movs	r2, #16
 8009bdc:	68f9      	ldr	r1, [r7, #12]
 8009bde:	4618      	mov	r0, r3
 8009be0:	f009 f8c1 	bl	8012d66 <strncpy>
      break;
 8009be4:	e017      	b.n	8009c16 <AT_ParseInfo+0xca>

    case 5:
      Obj->CPU_Clock = ParseNumber(ptr, NULL);
 8009be6:	2100      	movs	r1, #0
 8009be8:	68f8      	ldr	r0, [r7, #12]
 8009bea:	f7ff ff15 	bl	8009a18 <ParseNumber>
 8009bee:	4603      	mov	r3, r0
 8009bf0:	461a      	mov	r2, r3
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      break;
 8009bf8:	e00d      	b.n	8009c16 <AT_ParseInfo+0xca>

    case 6:
      ptr = strtok(ptr, "\r");
 8009bfa:	490e      	ldr	r1, [pc, #56]	; (8009c34 <AT_ParseInfo+0xe8>)
 8009bfc:	68f8      	ldr	r0, [r7, #12]
 8009bfe:	f009 f8db 	bl	8012db8 <strtok>
 8009c02:	60f8      	str	r0, [r7, #12]
      strncpy((char *)Obj->Product_Name,  ptr, ES_WIFI_PRODUCT_NAME_SIZE);
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	3368      	adds	r3, #104	; 0x68
 8009c08:	2220      	movs	r2, #32
 8009c0a:	68f9      	ldr	r1, [r7, #12]
 8009c0c:	4618      	mov	r0, r3
 8009c0e:	f009 f8aa 	bl	8012d66 <strncpy>
      break;
 8009c12:	e000      	b.n	8009c16 <AT_ParseInfo+0xca>

    default: break;
 8009c14:	bf00      	nop
    }
    ptr = strtok(NULL, ",");
 8009c16:	4906      	ldr	r1, [pc, #24]	; (8009c30 <AT_ParseInfo+0xe4>)
 8009c18:	2000      	movs	r0, #0
 8009c1a:	f009 f8cd 	bl	8012db8 <strtok>
 8009c1e:	60f8      	str	r0, [r7, #12]
  while (ptr != NULL){
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d1a1      	bne.n	8009b6a <AT_ParseInfo+0x1e>
  }
}
 8009c26:	bf00      	nop
 8009c28:	bf00      	nop
 8009c2a:	3710      	adds	r7, #16
 8009c2c:	46bd      	mov	sp, r7
 8009c2e:	bd80      	pop	{r7, pc}
 8009c30:	08014024 	.word	0x08014024
 8009c34:	08014028 	.word	0x08014028

08009c38 <AT_ParseConnSettings>:
  * @param  NetSettings: settings
  * @param  pdata: pointer to data
  * @retval None.
  */
static void AT_ParseConnSettings(char *pdata, ES_WIFI_Network_t *NetSettings)
{
 8009c38:	b580      	push	{r7, lr}
 8009c3a:	b084      	sub	sp, #16
 8009c3c:	af00      	add	r7, sp, #0
 8009c3e:	6078      	str	r0, [r7, #4]
 8009c40:	6039      	str	r1, [r7, #0]
  uint8_t num = 0;
 8009c42:	2300      	movs	r3, #0
 8009c44:	73fb      	strb	r3, [r7, #15]
  char *ptr;

  ptr = strtok(pdata + 2, ",");
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	3302      	adds	r3, #2
 8009c4a:	4952      	ldr	r1, [pc, #328]	; (8009d94 <AT_ParseConnSettings+0x15c>)
 8009c4c:	4618      	mov	r0, r3
 8009c4e:	f009 f8b3 	bl	8012db8 <strtok>
 8009c52:	60b8      	str	r0, [r7, #8]

  while (ptr != NULL) {
 8009c54:	e095      	b.n	8009d82 <AT_ParseConnSettings+0x14a>
    switch (num++) {
 8009c56:	7bfb      	ldrb	r3, [r7, #15]
 8009c58:	1c5a      	adds	r2, r3, #1
 8009c5a:	73fa      	strb	r2, [r7, #15]
 8009c5c:	2b0b      	cmp	r3, #11
 8009c5e:	d87f      	bhi.n	8009d60 <AT_ParseConnSettings+0x128>
 8009c60:	a201      	add	r2, pc, #4	; (adr r2, 8009c68 <AT_ParseConnSettings+0x30>)
 8009c62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c66:	bf00      	nop
 8009c68:	08009c99 	.word	0x08009c99
 8009c6c:	08009ca7 	.word	0x08009ca7
 8009c70:	08009cb7 	.word	0x08009cb7
 8009c74:	08009ccb 	.word	0x08009ccb
 8009c78:	08009cdf 	.word	0x08009cdf
 8009c7c:	08009cf3 	.word	0x08009cf3
 8009c80:	08009d01 	.word	0x08009d01
 8009c84:	08009d0f 	.word	0x08009d0f
 8009c88:	08009d1d 	.word	0x08009d1d
 8009c8c:	08009d2b 	.word	0x08009d2b
 8009c90:	08009d39 	.word	0x08009d39
 8009c94:	08009d4d 	.word	0x08009d4d
    case 0:
      strncpy((char *)NetSettings->SSID,  ptr, ES_WIFI_MAX_SSID_NAME_SIZE + 1);
 8009c98:	683b      	ldr	r3, [r7, #0]
 8009c9a:	2221      	movs	r2, #33	; 0x21
 8009c9c:	68b9      	ldr	r1, [r7, #8]
 8009c9e:	4618      	mov	r0, r3
 8009ca0:	f009 f861 	bl	8012d66 <strncpy>
      break;
 8009ca4:	e05d      	b.n	8009d62 <AT_ParseConnSettings+0x12a>

    case 1:
      strncpy((char *)NetSettings->pswd,  ptr, ES_WIFI_MAX_PSWD_NAME_SIZE + 1);
 8009ca6:	683b      	ldr	r3, [r7, #0]
 8009ca8:	3321      	adds	r3, #33	; 0x21
 8009caa:	2221      	movs	r2, #33	; 0x21
 8009cac:	68b9      	ldr	r1, [r7, #8]
 8009cae:	4618      	mov	r0, r3
 8009cb0:	f009 f859 	bl	8012d66 <strncpy>
      break;
 8009cb4:	e055      	b.n	8009d62 <AT_ParseConnSettings+0x12a>

    case 2:
        NetSettings->Security = (ES_WIFI_SecurityType_t)ParseNumber(ptr, NULL);
 8009cb6:	2100      	movs	r1, #0
 8009cb8:	68b8      	ldr	r0, [r7, #8]
 8009cba:	f7ff fead 	bl	8009a18 <ParseNumber>
 8009cbe:	4603      	mov	r3, r0
 8009cc0:	b2da      	uxtb	r2, r3
 8009cc2:	683b      	ldr	r3, [r7, #0]
 8009cc4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        break;
 8009cc8:	e04b      	b.n	8009d62 <AT_ParseConnSettings+0x12a>

    case 3:
      NetSettings->DHCP_IsEnabled = ParseNumber(ptr, NULL);
 8009cca:	2100      	movs	r1, #0
 8009ccc:	68b8      	ldr	r0, [r7, #8]
 8009cce:	f7ff fea3 	bl	8009a18 <ParseNumber>
 8009cd2:	4603      	mov	r3, r0
 8009cd4:	b2da      	uxtb	r2, r3
 8009cd6:	683b      	ldr	r3, [r7, #0]
 8009cd8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      break;
 8009cdc:	e041      	b.n	8009d62 <AT_ParseConnSettings+0x12a>

    case 4:
      NetSettings->IP_Ver = (ES_WIFI_IPVer_t)ParseNumber(ptr, NULL);
 8009cde:	2100      	movs	r1, #0
 8009ce0:	68b8      	ldr	r0, [r7, #8]
 8009ce2:	f7ff fe99 	bl	8009a18 <ParseNumber>
 8009ce6:	4603      	mov	r3, r0
 8009ce8:	b2da      	uxtb	r2, r3
 8009cea:	683b      	ldr	r3, [r7, #0]
 8009cec:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
      break;
 8009cf0:	e037      	b.n	8009d62 <AT_ParseConnSettings+0x12a>

    case 5:
      ParseIP(ptr, NetSettings->IP_Addr);
 8009cf2:	683b      	ldr	r3, [r7, #0]
 8009cf4:	3348      	adds	r3, #72	; 0x48
 8009cf6:	4619      	mov	r1, r3
 8009cf8:	68b8      	ldr	r0, [r7, #8]
 8009cfa:	f7ff fefc 	bl	8009af6 <ParseIP>
      break;
 8009cfe:	e030      	b.n	8009d62 <AT_ParseConnSettings+0x12a>

    case 6:
      ParseIP(ptr, NetSettings->IP_Mask);
 8009d00:	683b      	ldr	r3, [r7, #0]
 8009d02:	334c      	adds	r3, #76	; 0x4c
 8009d04:	4619      	mov	r1, r3
 8009d06:	68b8      	ldr	r0, [r7, #8]
 8009d08:	f7ff fef5 	bl	8009af6 <ParseIP>
      break;
 8009d0c:	e029      	b.n	8009d62 <AT_ParseConnSettings+0x12a>

    case 7:
      ParseIP(ptr, NetSettings->Gateway_Addr);
 8009d0e:	683b      	ldr	r3, [r7, #0]
 8009d10:	3350      	adds	r3, #80	; 0x50
 8009d12:	4619      	mov	r1, r3
 8009d14:	68b8      	ldr	r0, [r7, #8]
 8009d16:	f7ff feee 	bl	8009af6 <ParseIP>
      break;
 8009d1a:	e022      	b.n	8009d62 <AT_ParseConnSettings+0x12a>

    case 8:
      ParseIP(ptr, NetSettings->DNS1);
 8009d1c:	683b      	ldr	r3, [r7, #0]
 8009d1e:	3354      	adds	r3, #84	; 0x54
 8009d20:	4619      	mov	r1, r3
 8009d22:	68b8      	ldr	r0, [r7, #8]
 8009d24:	f7ff fee7 	bl	8009af6 <ParseIP>
      break;
 8009d28:	e01b      	b.n	8009d62 <AT_ParseConnSettings+0x12a>

    case 9:
      ParseIP(ptr, NetSettings->DNS2);
 8009d2a:	683b      	ldr	r3, [r7, #0]
 8009d2c:	3358      	adds	r3, #88	; 0x58
 8009d2e:	4619      	mov	r1, r3
 8009d30:	68b8      	ldr	r0, [r7, #8]
 8009d32:	f7ff fee0 	bl	8009af6 <ParseIP>
      break;
 8009d36:	e014      	b.n	8009d62 <AT_ParseConnSettings+0x12a>

    case 10:
      NetSettings->JoinRetries = ParseNumber(ptr, NULL);
 8009d38:	2100      	movs	r1, #0
 8009d3a:	68b8      	ldr	r0, [r7, #8]
 8009d3c:	f7ff fe6c 	bl	8009a18 <ParseNumber>
 8009d40:	4603      	mov	r3, r0
 8009d42:	b2da      	uxtb	r2, r3
 8009d44:	683b      	ldr	r3, [r7, #0]
 8009d46:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      break;
 8009d4a:	e00a      	b.n	8009d62 <AT_ParseConnSettings+0x12a>

    case 11:
      NetSettings->AutoConnect = ParseNumber(ptr, NULL);
 8009d4c:	2100      	movs	r1, #0
 8009d4e:	68b8      	ldr	r0, [r7, #8]
 8009d50:	f7ff fe62 	bl	8009a18 <ParseNumber>
 8009d54:	4603      	mov	r3, r0
 8009d56:	b2da      	uxtb	r2, r3
 8009d58:	683b      	ldr	r3, [r7, #0]
 8009d5a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
      break;
 8009d5e:	e000      	b.n	8009d62 <AT_ParseConnSettings+0x12a>

    default:
      break;
 8009d60:	bf00      	nop
    }
    ptr = strtok(NULL, ",");
 8009d62:	490c      	ldr	r1, [pc, #48]	; (8009d94 <AT_ParseConnSettings+0x15c>)
 8009d64:	2000      	movs	r0, #0
 8009d66:	f009 f827 	bl	8012db8 <strtok>
 8009d6a:	60b8      	str	r0, [r7, #8]
    if ((ptr != NULL) && (ptr[-1] == ','))
 8009d6c:	68bb      	ldr	r3, [r7, #8]
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d007      	beq.n	8009d82 <AT_ParseConnSettings+0x14a>
 8009d72:	68bb      	ldr	r3, [r7, #8]
 8009d74:	3b01      	subs	r3, #1
 8009d76:	781b      	ldrb	r3, [r3, #0]
 8009d78:	2b2c      	cmp	r3, #44	; 0x2c
 8009d7a:	d102      	bne.n	8009d82 <AT_ParseConnSettings+0x14a>
    { /* Ignore empty fields */
      num++;
 8009d7c:	7bfb      	ldrb	r3, [r7, #15]
 8009d7e:	3301      	adds	r3, #1
 8009d80:	73fb      	strb	r3, [r7, #15]
  while (ptr != NULL) {
 8009d82:	68bb      	ldr	r3, [r7, #8]
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	f47f af66 	bne.w	8009c56 <AT_ParseConnSettings+0x1e>
    }
  }
}
 8009d8a:	bf00      	nop
 8009d8c:	bf00      	nop
 8009d8e:	3710      	adds	r7, #16
 8009d90:	46bd      	mov	sp, r7
 8009d92:	bd80      	pop	{r7, pc}
 8009d94:	08014024 	.word	0x08014024

08009d98 <AT_ParseIsConnected>:
  * @param  pdata: pointer to data
  * @param  isConnected: pointer to result
  * @retval None.
  */
static void AT_ParseIsConnected(char *pdata, uint8_t *isConnected)
{
 8009d98:	b480      	push	{r7}
 8009d9a:	b083      	sub	sp, #12
 8009d9c:	af00      	add	r7, sp, #0
 8009d9e:	6078      	str	r0, [r7, #4]
 8009da0:	6039      	str	r1, [r7, #0]
  *isConnected = (pdata[2] == '1') ? 1 : 0;
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	3302      	adds	r3, #2
 8009da6:	781b      	ldrb	r3, [r3, #0]
 8009da8:	2b31      	cmp	r3, #49	; 0x31
 8009daa:	bf0c      	ite	eq
 8009dac:	2301      	moveq	r3, #1
 8009dae:	2300      	movne	r3, #0
 8009db0:	b2db      	uxtb	r3, r3
 8009db2:	461a      	mov	r2, r3
 8009db4:	683b      	ldr	r3, [r7, #0]
 8009db6:	701a      	strb	r2, [r3, #0]
}
 8009db8:	bf00      	nop
 8009dba:	370c      	adds	r7, #12
 8009dbc:	46bd      	mov	sp, r7
 8009dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dc2:	4770      	bx	lr

08009dc4 <AT_ExecuteCommand>:
  * @param  cmd: pointer to command string
  * @param  pdata: pointer to returned data
  * @retval Operation Status.
  */
static ES_WIFI_Status_t AT_ExecuteCommand(ES_WIFIObject_t *Obj, uint8_t* cmd, uint8_t *pdata)
{
 8009dc4:	b590      	push	{r4, r7, lr}
 8009dc6:	b087      	sub	sp, #28
 8009dc8:	af00      	add	r7, sp, #0
 8009dca:	60f8      	str	r0, [r7, #12]
 8009dcc:	60b9      	str	r1, [r7, #8]
 8009dce:	607a      	str	r2, [r7, #4]
  int ret = 0;
 8009dd0:	2300      	movs	r3, #0
 8009dd2:	613b      	str	r3, [r7, #16]
  int16_t recv_len = 0;
 8009dd4:	2300      	movs	r3, #0
 8009dd6:	82fb      	strh	r3, [r7, #22]
  LOCK_WIFI();

  ret = Obj->fops.IO_Send(cmd, strlen((char*)cmd), Obj->Timeout);
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	f8d3 4120 	ldr.w	r4, [r3, #288]	; 0x120
 8009dde:	68b8      	ldr	r0, [r7, #8]
 8009de0:	f7f6 f9f6 	bl	80001d0 <strlen>
 8009de4:	4603      	mov	r3, r0
 8009de6:	b299      	uxth	r1, r3
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	; 0x8f8
 8009dee:	461a      	mov	r2, r3
 8009df0:	68b8      	ldr	r0, [r7, #8]
 8009df2:	47a0      	blx	r4
 8009df4:	4603      	mov	r3, r0
 8009df6:	613b      	str	r3, [r7, #16]

  if( ret > 0)
 8009df8:	693b      	ldr	r3, [r7, #16]
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	dd3e      	ble.n	8009e7c <AT_ExecuteCommand+0xb8>
  {
    recv_len = Obj->fops.IO_Receive(pdata, ES_WIFI_DATA_SIZE, Obj->Timeout);
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8009e04:	68fa      	ldr	r2, [r7, #12]
 8009e06:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	; 0x8f8
 8009e0a:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8009e0e:	6878      	ldr	r0, [r7, #4]
 8009e10:	4798      	blx	r3
 8009e12:	4603      	mov	r3, r0
 8009e14:	82fb      	strh	r3, [r7, #22]
    if((recv_len > 0) && (recv_len <= ES_WIFI_DATA_SIZE))
 8009e16:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	dd27      	ble.n	8009e6e <AT_ExecuteCommand+0xaa>
 8009e1e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8009e22:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8009e26:	dc22      	bgt.n	8009e6e <AT_ExecuteCommand+0xaa>
    {
      if (recv_len == ES_WIFI_DATA_SIZE)
 8009e28:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8009e2c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8009e30:	d105      	bne.n	8009e3e <AT_ExecuteCommand+0x7a>
      {
        // ES_WIFI_DATA_SIZE maybe too small !!
        recv_len--;
 8009e32:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8009e36:	b29b      	uxth	r3, r3
 8009e38:	3b01      	subs	r3, #1
 8009e3a:	b29b      	uxth	r3, r3
 8009e3c:	82fb      	strh	r3, [r7, #22]
      }
      *(pdata + recv_len) = 0;
 8009e3e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8009e42:	687a      	ldr	r2, [r7, #4]
 8009e44:	4413      	add	r3, r2
 8009e46:	2200      	movs	r2, #0
 8009e48:	701a      	strb	r2, [r3, #0]
      if(strstr((char *)pdata, AT_OK_STRING))
 8009e4a:	490f      	ldr	r1, [pc, #60]	; (8009e88 <AT_ExecuteCommand+0xc4>)
 8009e4c:	6878      	ldr	r0, [r7, #4]
 8009e4e:	f008 ff9d 	bl	8012d8c <strstr>
 8009e52:	4603      	mov	r3, r0
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d001      	beq.n	8009e5c <AT_ExecuteCommand+0x98>
      {
        UNLOCK_WIFI();
        return ES_WIFI_STATUS_OK;
 8009e58:	2300      	movs	r3, #0
 8009e5a:	e010      	b.n	8009e7e <AT_ExecuteCommand+0xba>
      }
      else if(strstr((char *)pdata, AT_ERROR_STRING))
 8009e5c:	490b      	ldr	r1, [pc, #44]	; (8009e8c <AT_ExecuteCommand+0xc8>)
 8009e5e:	6878      	ldr	r0, [r7, #4]
 8009e60:	f008 ff94 	bl	8012d8c <strstr>
 8009e64:	4603      	mov	r3, r0
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d001      	beq.n	8009e6e <AT_ExecuteCommand+0xaa>
      {
        UNLOCK_WIFI();
        return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 8009e6a:	2305      	movs	r3, #5
 8009e6c:	e007      	b.n	8009e7e <AT_ExecuteCommand+0xba>
      }
    }
    if (recv_len == ES_WIFI_ERROR_STUFFING_FOREVER )
 8009e6e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8009e72:	f113 0f04 	cmn.w	r3, #4
 8009e76:	d101      	bne.n	8009e7c <AT_ExecuteCommand+0xb8>
    {
      UNLOCK_WIFI();
      return ES_WIFI_STATUS_MODULE_CRASH;
 8009e78:	2306      	movs	r3, #6
 8009e7a:	e000      	b.n	8009e7e <AT_ExecuteCommand+0xba>
    }
  }
  UNLOCK_WIFI();
  return ES_WIFI_STATUS_IO_ERROR;
 8009e7c:	2304      	movs	r3, #4
}
 8009e7e:	4618      	mov	r0, r3
 8009e80:	371c      	adds	r7, #28
 8009e82:	46bd      	mov	sp, r7
 8009e84:	bd90      	pop	{r4, r7, pc}
 8009e86:	bf00      	nop
 8009e88:	08014038 	.word	0x08014038
 8009e8c:	08014044 	.word	0x08014044

08009e90 <AT_RequestSendData>:
  * @param  pdata: pointer to returned data
  * @retval Operation Status.
  */

static ES_WIFI_Status_t AT_RequestSendData(ES_WIFIObject_t *Obj, uint8_t* cmd, uint8_t *pcmd_data, uint16_t len, uint8_t *pdata)
{
 8009e90:	b580      	push	{r7, lr}
 8009e92:	b086      	sub	sp, #24
 8009e94:	af00      	add	r7, sp, #0
 8009e96:	60f8      	str	r0, [r7, #12]
 8009e98:	60b9      	str	r1, [r7, #8]
 8009e9a:	607a      	str	r2, [r7, #4]
 8009e9c:	807b      	strh	r3, [r7, #2]
  int16_t send_len = 0;
 8009e9e:	2300      	movs	r3, #0
 8009ea0:	82fb      	strh	r3, [r7, #22]
  int16_t recv_len = 0;
 8009ea2:	2300      	movs	r3, #0
 8009ea4:	82bb      	strh	r3, [r7, #20]
  uint16_t cmd_len = 0;
 8009ea6:	2300      	movs	r3, #0
 8009ea8:	827b      	strh	r3, [r7, #18]
  uint16_t n ;

  LOCK_WIFI();
  cmd_len = strlen((char*)cmd);
 8009eaa:	68b8      	ldr	r0, [r7, #8]
 8009eac:	f7f6 f990 	bl	80001d0 <strlen>
 8009eb0:	4603      	mov	r3, r0
 8009eb2:	827b      	strh	r3, [r7, #18]

  /* can send only even number of byte on first send */
  if (cmd_len & 1) return ES_WIFI_STATUS_ERROR;
 8009eb4:	8a7b      	ldrh	r3, [r7, #18]
 8009eb6:	f003 0301 	and.w	r3, r3, #1
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d001      	beq.n	8009ec2 <AT_RequestSendData+0x32>
 8009ebe:	2302      	movs	r3, #2
 8009ec0:	e053      	b.n	8009f6a <AT_RequestSendData+0xda>
  n=Obj->fops.IO_Send(cmd, cmd_len, Obj->Timeout);
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 8009ec8:	68fa      	ldr	r2, [r7, #12]
 8009eca:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	; 0x8f8
 8009ece:	8a79      	ldrh	r1, [r7, #18]
 8009ed0:	68b8      	ldr	r0, [r7, #8]
 8009ed2:	4798      	blx	r3
 8009ed4:	4603      	mov	r3, r0
 8009ed6:	823b      	strh	r3, [r7, #16]
  if (n == cmd_len)
 8009ed8:	8a3a      	ldrh	r2, [r7, #16]
 8009eda:	8a7b      	ldrh	r3, [r7, #18]
 8009edc:	429a      	cmp	r2, r3
 8009ede:	d143      	bne.n	8009f68 <AT_RequestSendData+0xd8>
  {
    send_len = Obj->fops.IO_Send(pcmd_data, len, Obj->Timeout);
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 8009ee6:	68fa      	ldr	r2, [r7, #12]
 8009ee8:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	; 0x8f8
 8009eec:	8879      	ldrh	r1, [r7, #2]
 8009eee:	6878      	ldr	r0, [r7, #4]
 8009ef0:	4798      	blx	r3
 8009ef2:	4603      	mov	r3, r0
 8009ef4:	82fb      	strh	r3, [r7, #22]
    if (send_len == len)
 8009ef6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8009efa:	887b      	ldrh	r3, [r7, #2]
 8009efc:	429a      	cmp	r2, r3
 8009efe:	d131      	bne.n	8009f64 <AT_RequestSendData+0xd4>
    {
      recv_len = Obj->fops.IO_Receive(pdata, 0, Obj->Timeout);
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8009f06:	68fa      	ldr	r2, [r7, #12]
 8009f08:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	; 0x8f8
 8009f0c:	2100      	movs	r1, #0
 8009f0e:	6a38      	ldr	r0, [r7, #32]
 8009f10:	4798      	blx	r3
 8009f12:	4603      	mov	r3, r0
 8009f14:	82bb      	strh	r3, [r7, #20]
      if (recv_len > 0)
 8009f16:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	dd19      	ble.n	8009f52 <AT_RequestSendData+0xc2>
      {
        *(pdata+recv_len) = 0;
 8009f1e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8009f22:	6a3a      	ldr	r2, [r7, #32]
 8009f24:	4413      	add	r3, r2
 8009f26:	2200      	movs	r2, #0
 8009f28:	701a      	strb	r2, [r3, #0]
        if(strstr((char *)pdata, AT_OK_STRING))
 8009f2a:	4912      	ldr	r1, [pc, #72]	; (8009f74 <AT_RequestSendData+0xe4>)
 8009f2c:	6a38      	ldr	r0, [r7, #32]
 8009f2e:	f008 ff2d 	bl	8012d8c <strstr>
 8009f32:	4603      	mov	r3, r0
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d001      	beq.n	8009f3c <AT_RequestSendData+0xac>
        {
          UNLOCK_WIFI();
          return ES_WIFI_STATUS_OK;
 8009f38:	2300      	movs	r3, #0
 8009f3a:	e016      	b.n	8009f6a <AT_RequestSendData+0xda>
        }
        else if(strstr((char *)pdata, AT_ERROR_STRING))
 8009f3c:	490e      	ldr	r1, [pc, #56]	; (8009f78 <AT_RequestSendData+0xe8>)
 8009f3e:	6a38      	ldr	r0, [r7, #32]
 8009f40:	f008 ff24 	bl	8012d8c <strstr>
 8009f44:	4603      	mov	r3, r0
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d001      	beq.n	8009f4e <AT_RequestSendData+0xbe>
        {
          UNLOCK_WIFI();
          return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 8009f4a:	2305      	movs	r3, #5
 8009f4c:	e00d      	b.n	8009f6a <AT_RequestSendData+0xda>
        }
        else
        {
          UNLOCK_WIFI();
          return ES_WIFI_STATUS_ERROR;
 8009f4e:	2302      	movs	r3, #2
 8009f50:	e00b      	b.n	8009f6a <AT_RequestSendData+0xda>
        }
      }
      UNLOCK_WIFI();
      if (recv_len == ES_WIFI_ERROR_STUFFING_FOREVER )
 8009f52:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8009f56:	f113 0f04 	cmn.w	r3, #4
 8009f5a:	d101      	bne.n	8009f60 <AT_RequestSendData+0xd0>
      {
        return ES_WIFI_STATUS_MODULE_CRASH;
 8009f5c:	2306      	movs	r3, #6
 8009f5e:	e004      	b.n	8009f6a <AT_RequestSendData+0xda>
      }
      return ES_WIFI_STATUS_ERROR;
 8009f60:	2302      	movs	r3, #2
 8009f62:	e002      	b.n	8009f6a <AT_RequestSendData+0xda>
    }
    else
    {
      return ES_WIFI_STATUS_ERROR;
 8009f64:	2302      	movs	r3, #2
 8009f66:	e000      	b.n	8009f6a <AT_RequestSendData+0xda>
    }
  }
  return ES_WIFI_STATUS_IO_ERROR;
 8009f68:	2304      	movs	r3, #4
}
 8009f6a:	4618      	mov	r0, r3
 8009f6c:	3718      	adds	r7, #24
 8009f6e:	46bd      	mov	sp, r7
 8009f70:	bd80      	pop	{r7, pc}
 8009f72:	bf00      	nop
 8009f74:	08014038 	.word	0x08014038
 8009f78:	08014044 	.word	0x08014044

08009f7c <AT_RequestReceiveData>:
  * @param  Reqlen : requested Data length.
  * @param  ReadData : pointer to received data length.
  * @retval Operation Status.
  */
static ES_WIFI_Status_t AT_RequestReceiveData(ES_WIFIObject_t *Obj, uint8_t* cmd, char *pdata, uint16_t Reqlen, uint16_t *ReadData)
{
 8009f7c:	b590      	push	{r4, r7, lr}
 8009f7e:	b087      	sub	sp, #28
 8009f80:	af00      	add	r7, sp, #0
 8009f82:	60f8      	str	r0, [r7, #12]
 8009f84:	60b9      	str	r1, [r7, #8]
 8009f86:	607a      	str	r2, [r7, #4]
 8009f88:	807b      	strh	r3, [r7, #2]
  int len;
  uint8_t *p=Obj->CmdData;
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8009f90:	613b      	str	r3, [r7, #16]

  LOCK_WIFI();
  if(Obj->fops.IO_Send(cmd, strlen((char*)cmd), Obj->Timeout) > 0)
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	f8d3 4120 	ldr.w	r4, [r3, #288]	; 0x120
 8009f98:	68b8      	ldr	r0, [r7, #8]
 8009f9a:	f7f6 f919 	bl	80001d0 <strlen>
 8009f9e:	4603      	mov	r3, r0
 8009fa0:	b299      	uxth	r1, r3
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	; 0x8f8
 8009fa8:	461a      	mov	r2, r3
 8009faa:	68b8      	ldr	r0, [r7, #8]
 8009fac:	47a0      	blx	r4
 8009fae:	4603      	mov	r3, r0
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	dd6f      	ble.n	800a094 <AT_RequestReceiveData+0x118>
  {
    len = Obj->fops.IO_Receive(p, 0 , Obj->Timeout);
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8009fba:	68fa      	ldr	r2, [r7, #12]
 8009fbc:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	; 0x8f8
 8009fc0:	2100      	movs	r1, #0
 8009fc2:	6938      	ldr	r0, [r7, #16]
 8009fc4:	4798      	blx	r3
 8009fc6:	4603      	mov	r3, r0
 8009fc8:	617b      	str	r3, [r7, #20]
    if ((p[0]!='\r') || (p[1]!='\n'))
 8009fca:	693b      	ldr	r3, [r7, #16]
 8009fcc:	781b      	ldrb	r3, [r3, #0]
 8009fce:	2b0d      	cmp	r3, #13
 8009fd0:	d104      	bne.n	8009fdc <AT_RequestReceiveData+0x60>
 8009fd2:	693b      	ldr	r3, [r7, #16]
 8009fd4:	3301      	adds	r3, #1
 8009fd6:	781b      	ldrb	r3, [r3, #0]
 8009fd8:	2b0a      	cmp	r3, #10
 8009fda:	d001      	beq.n	8009fe0 <AT_RequestReceiveData+0x64>
    {
     return  ES_WIFI_STATUS_IO_ERROR;
 8009fdc:	2304      	movs	r3, #4
 8009fde:	e05a      	b.n	800a096 <AT_RequestReceiveData+0x11a>
    }
    len-=2;
 8009fe0:	697b      	ldr	r3, [r7, #20]
 8009fe2:	3b02      	subs	r3, #2
 8009fe4:	617b      	str	r3, [r7, #20]
    p+=2;
 8009fe6:	693b      	ldr	r3, [r7, #16]
 8009fe8:	3302      	adds	r3, #2
 8009fea:	613b      	str	r3, [r7, #16]
    if (len >= AT_OK_STRING_LEN)
 8009fec:	697b      	ldr	r3, [r7, #20]
 8009fee:	2b07      	cmp	r3, #7
 8009ff0:	d94a      	bls.n	800a088 <AT_RequestReceiveData+0x10c>
    {
     while(len && (p[len-1]==0x15)) len--;
 8009ff2:	e002      	b.n	8009ffa <AT_RequestReceiveData+0x7e>
 8009ff4:	697b      	ldr	r3, [r7, #20]
 8009ff6:	3b01      	subs	r3, #1
 8009ff8:	617b      	str	r3, [r7, #20]
 8009ffa:	697b      	ldr	r3, [r7, #20]
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	d006      	beq.n	800a00e <AT_RequestReceiveData+0x92>
 800a000:	697b      	ldr	r3, [r7, #20]
 800a002:	3b01      	subs	r3, #1
 800a004:	693a      	ldr	r2, [r7, #16]
 800a006:	4413      	add	r3, r2
 800a008:	781b      	ldrb	r3, [r3, #0]
 800a00a:	2b15      	cmp	r3, #21
 800a00c:	d0f2      	beq.n	8009ff4 <AT_RequestReceiveData+0x78>
     p[len] = '\0';
 800a00e:	697b      	ldr	r3, [r7, #20]
 800a010:	693a      	ldr	r2, [r7, #16]
 800a012:	4413      	add	r3, r2
 800a014:	2200      	movs	r2, #0
 800a016:	701a      	strb	r2, [r3, #0]
     if(strstr( (char*) p + len - AT_OK_STRING_LEN, AT_OK_STRING))
 800a018:	697b      	ldr	r3, [r7, #20]
 800a01a:	3b08      	subs	r3, #8
 800a01c:	693a      	ldr	r2, [r7, #16]
 800a01e:	4413      	add	r3, r2
 800a020:	491f      	ldr	r1, [pc, #124]	; (800a0a0 <AT_RequestReceiveData+0x124>)
 800a022:	4618      	mov	r0, r3
 800a024:	f008 feb2 	bl	8012d8c <strstr>
 800a028:	4603      	mov	r3, r0
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d016      	beq.n	800a05c <AT_RequestReceiveData+0xe0>
     {
       *ReadData = len - AT_OK_STRING_LEN;
 800a02e:	697b      	ldr	r3, [r7, #20]
 800a030:	b29b      	uxth	r3, r3
 800a032:	3b08      	subs	r3, #8
 800a034:	b29a      	uxth	r2, r3
 800a036:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a038:	801a      	strh	r2, [r3, #0]
	   if (*ReadData > Reqlen)
 800a03a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a03c:	881b      	ldrh	r3, [r3, #0]
 800a03e:	887a      	ldrh	r2, [r7, #2]
 800a040:	429a      	cmp	r2, r3
 800a042:	d202      	bcs.n	800a04a <AT_RequestReceiveData+0xce>
       {
         *ReadData = Reqlen;
 800a044:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a046:	887a      	ldrh	r2, [r7, #2]
 800a048:	801a      	strh	r2, [r3, #0]
       }
       memcpy(pdata, p, *ReadData);
 800a04a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a04c:	881b      	ldrh	r3, [r3, #0]
 800a04e:	461a      	mov	r2, r3
 800a050:	6939      	ldr	r1, [r7, #16]
 800a052:	6878      	ldr	r0, [r7, #4]
 800a054:	f008 f935 	bl	80122c2 <memcpy>
       UNLOCK_WIFI();
       return ES_WIFI_STATUS_OK;
 800a058:	2300      	movs	r3, #0
 800a05a:	e01c      	b.n	800a096 <AT_RequestReceiveData+0x11a>
     }
     else if(memcmp((char *)p + len - AT_DELIMETER_LEN , AT_DELIMETER_STRING, AT_DELIMETER_LEN) == 0)
 800a05c:	697b      	ldr	r3, [r7, #20]
 800a05e:	3b04      	subs	r3, #4
 800a060:	693a      	ldr	r2, [r7, #16]
 800a062:	4413      	add	r3, r2
 800a064:	2204      	movs	r2, #4
 800a066:	490f      	ldr	r1, [pc, #60]	; (800a0a4 <AT_RequestReceiveData+0x128>)
 800a068:	4618      	mov	r0, r3
 800a06a:	f008 f91a 	bl	80122a2 <memcmp>
 800a06e:	4603      	mov	r3, r0
 800a070:	2b00      	cmp	r3, #0
 800a072:	d104      	bne.n	800a07e <AT_RequestReceiveData+0x102>
     {
       *ReadData = 0;
 800a074:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a076:	2200      	movs	r2, #0
 800a078:	801a      	strh	r2, [r3, #0]
       UNLOCK_WIFI();
       return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 800a07a:	2305      	movs	r3, #5
 800a07c:	e00b      	b.n	800a096 <AT_RequestReceiveData+0x11a>
     }

     UNLOCK_WIFI();
     *ReadData = 0;
 800a07e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a080:	2200      	movs	r2, #0
 800a082:	801a      	strh	r2, [r3, #0]
     return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 800a084:	2305      	movs	r3, #5
 800a086:	e006      	b.n	800a096 <AT_RequestReceiveData+0x11a>
   }
   if (len == ES_WIFI_ERROR_STUFFING_FOREVER )
 800a088:	697b      	ldr	r3, [r7, #20]
 800a08a:	f113 0f04 	cmn.w	r3, #4
 800a08e:	d101      	bne.n	800a094 <AT_RequestReceiveData+0x118>
   {
     UNLOCK_WIFI();
     return ES_WIFI_STATUS_MODULE_CRASH;
 800a090:	2306      	movs	r3, #6
 800a092:	e000      	b.n	800a096 <AT_RequestReceiveData+0x11a>
   }
  }
  UNLOCK_WIFI();
  return ES_WIFI_STATUS_IO_ERROR;
 800a094:	2304      	movs	r3, #4
}
 800a096:	4618      	mov	r0, r3
 800a098:	371c      	adds	r7, #28
 800a09a:	46bd      	mov	sp, r7
 800a09c:	bd90      	pop	{r4, r7, pc}
 800a09e:	bf00      	nop
 800a0a0:	08014038 	.word	0x08014038
 800a0a4:	0801404c 	.word	0x0801404c

0800a0a8 <ES_WIFI_Init>:
  * @brief  Initialize WIFI module.
  * @param  Obj: pointer to module handle
  * @retval Operation Status.
  */
ES_WIFI_Status_t  ES_WIFI_Init(ES_WIFIObject_t *Obj)
{
 800a0a8:	b580      	push	{r7, lr}
 800a0aa:	b084      	sub	sp, #16
 800a0ac:	af00      	add	r7, sp, #0
 800a0ae:	6078      	str	r0, [r7, #4]
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
 800a0b0:	2302      	movs	r3, #2
 800a0b2:	73fb      	strb	r3, [r7, #15]

  LOCK_WIFI();

  Obj->Timeout = ES_WIFI_TIMEOUT;
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	f247 5230 	movw	r2, #30000	; 0x7530
 800a0ba:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8

  if (Obj->fops.IO_Init(ES_WIFI_INIT) == 0)
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800a0c4:	2000      	movs	r0, #0
 800a0c6:	4798      	blx	r3
 800a0c8:	4603      	mov	r3, r0
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	d113      	bne.n	800a0f6 <ES_WIFI_Init+0x4e>
  {
    ret = AT_ExecuteCommand(Obj,(uint8_t*)"I?\r\n", Obj->CmdData);
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a0d4:	461a      	mov	r2, r3
 800a0d6:	490a      	ldr	r1, [pc, #40]	; (800a100 <ES_WIFI_Init+0x58>)
 800a0d8:	6878      	ldr	r0, [r7, #4]
 800a0da:	f7ff fe73 	bl	8009dc4 <AT_ExecuteCommand>
 800a0de:	4603      	mov	r3, r0
 800a0e0:	73fb      	strb	r3, [r7, #15]

    if(ret == ES_WIFI_STATUS_OK)
 800a0e2:	7bfb      	ldrb	r3, [r7, #15]
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d106      	bne.n	800a0f6 <ES_WIFI_Init+0x4e>
    {
      AT_ParseInfo (Obj, Obj->CmdData);
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a0ee:	4619      	mov	r1, r3
 800a0f0:	6878      	ldr	r0, [r7, #4]
 800a0f2:	f7ff fd2b 	bl	8009b4c <AT_ParseInfo>
    }
  }
  UNLOCK_WIFI();
  return ret;
 800a0f6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0f8:	4618      	mov	r0, r3
 800a0fa:	3710      	adds	r7, #16
 800a0fc:	46bd      	mov	sp, r7
 800a0fe:	bd80      	pop	{r7, pc}
 800a100:	08014054 	.word	0x08014054

0800a104 <ES_WIFI_RegisterBusIO>:
ES_WIFI_Status_t  ES_WIFI_RegisterBusIO(ES_WIFIObject_t *Obj, IO_Init_Func IO_Init,
                                                              IO_DeInit_Func  IO_DeInit,
                                                              IO_Delay_Func   IO_Delay,
                                                              IO_Send_Func    IO_Send,
                                                              IO_Receive_Func  IO_Receive)
{
 800a104:	b480      	push	{r7}
 800a106:	b085      	sub	sp, #20
 800a108:	af00      	add	r7, sp, #0
 800a10a:	60f8      	str	r0, [r7, #12]
 800a10c:	60b9      	str	r1, [r7, #8]
 800a10e:	607a      	str	r2, [r7, #4]
 800a110:	603b      	str	r3, [r7, #0]
  if(!Obj || !IO_Init || !IO_DeInit || !IO_Send || !IO_Receive)
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	2b00      	cmp	r3, #0
 800a116:	d00b      	beq.n	800a130 <ES_WIFI_RegisterBusIO+0x2c>
 800a118:	68bb      	ldr	r3, [r7, #8]
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d008      	beq.n	800a130 <ES_WIFI_RegisterBusIO+0x2c>
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	2b00      	cmp	r3, #0
 800a122:	d005      	beq.n	800a130 <ES_WIFI_RegisterBusIO+0x2c>
 800a124:	69bb      	ldr	r3, [r7, #24]
 800a126:	2b00      	cmp	r3, #0
 800a128:	d002      	beq.n	800a130 <ES_WIFI_RegisterBusIO+0x2c>
 800a12a:	69fb      	ldr	r3, [r7, #28]
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d101      	bne.n	800a134 <ES_WIFI_RegisterBusIO+0x30>
  {
    return ES_WIFI_STATUS_ERROR;
 800a130:	2302      	movs	r3, #2
 800a132:	e014      	b.n	800a15e <ES_WIFI_RegisterBusIO+0x5a>
  }

  Obj->fops.IO_Init = IO_Init;
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	68ba      	ldr	r2, [r7, #8]
 800a138:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
  Obj->fops.IO_DeInit = IO_DeInit;
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	687a      	ldr	r2, [r7, #4]
 800a140:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
  Obj->fops.IO_Send = IO_Send;
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	69ba      	ldr	r2, [r7, #24]
 800a148:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
  Obj->fops.IO_Receive = IO_Receive;
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	69fa      	ldr	r2, [r7, #28]
 800a150:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
  Obj->fops.IO_Delay = IO_Delay;
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	683a      	ldr	r2, [r7, #0]
 800a158:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  return ES_WIFI_STATUS_OK;
 800a15c:	2300      	movs	r3, #0
}
 800a15e:	4618      	mov	r0, r3
 800a160:	3714      	adds	r7, #20
 800a162:	46bd      	mov	sp, r7
 800a164:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a168:	4770      	bx	lr
	...

0800a16c <ES_WIFI_Connect>:
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_Connect(ES_WIFIObject_t *Obj, const char* SSID,
                                         const char* Password,
                                         ES_WIFI_SecurityType_t SecType)
{
 800a16c:	b580      	push	{r7, lr}
 800a16e:	b086      	sub	sp, #24
 800a170:	af00      	add	r7, sp, #0
 800a172:	60f8      	str	r0, [r7, #12]
 800a174:	60b9      	str	r1, [r7, #8]
 800a176:	607a      	str	r2, [r7, #4]
 800a178:	70fb      	strb	r3, [r7, #3]
  ES_WIFI_Status_t ret;
  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"C1=%s\r", SSID);
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a180:	68ba      	ldr	r2, [r7, #8]
 800a182:	4932      	ldr	r1, [pc, #200]	; (800a24c <ES_WIFI_Connect+0xe0>)
 800a184:	4618      	mov	r0, r3
 800a186:	f008 fd8b 	bl	8012ca0 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800a190:	68fb      	ldr	r3, [r7, #12]
 800a192:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a196:	461a      	mov	r2, r3
 800a198:	68f8      	ldr	r0, [r7, #12]
 800a19a:	f7ff fe13 	bl	8009dc4 <AT_ExecuteCommand>
 800a19e:	4603      	mov	r3, r0
 800a1a0:	75fb      	strb	r3, [r7, #23]
  if(ret == ES_WIFI_STATUS_OK)
 800a1a2:	7dfb      	ldrb	r3, [r7, #23]
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d14b      	bne.n	800a240 <ES_WIFI_Connect+0xd4>
  {
    sprintf((char*)Obj->CmdData,"C2=%s\r", Password);
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a1ae:	687a      	ldr	r2, [r7, #4]
 800a1b0:	4927      	ldr	r1, [pc, #156]	; (800a250 <ES_WIFI_Connect+0xe4>)
 800a1b2:	4618      	mov	r0, r3
 800a1b4:	f008 fd74 	bl	8012ca0 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a1c4:	461a      	mov	r2, r3
 800a1c6:	68f8      	ldr	r0, [r7, #12]
 800a1c8:	f7ff fdfc 	bl	8009dc4 <AT_ExecuteCommand>
 800a1cc:	4603      	mov	r3, r0
 800a1ce:	75fb      	strb	r3, [r7, #23]

    if(ret == ES_WIFI_STATUS_OK)
 800a1d0:	7dfb      	ldrb	r3, [r7, #23]
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d134      	bne.n	800a240 <ES_WIFI_Connect+0xd4>
    {
      Obj->Security = SecType;
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	78fa      	ldrb	r2, [r7, #3]
 800a1da:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
      sprintf((char*)Obj->CmdData,"C3=%d\r", (uint8_t)SecType);
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a1e4:	78fa      	ldrb	r2, [r7, #3]
 800a1e6:	491b      	ldr	r1, [pc, #108]	; (800a254 <ES_WIFI_Connect+0xe8>)
 800a1e8:	4618      	mov	r0, r3
 800a1ea:	f008 fd59 	bl	8012ca0 <siprintf>
      ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a1fa:	461a      	mov	r2, r3
 800a1fc:	68f8      	ldr	r0, [r7, #12]
 800a1fe:	f7ff fde1 	bl	8009dc4 <AT_ExecuteCommand>
 800a202:	4603      	mov	r3, r0
 800a204:	75fb      	strb	r3, [r7, #23]

      if(ret == ES_WIFI_STATUS_OK)
 800a206:	7dfb      	ldrb	r3, [r7, #23]
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d119      	bne.n	800a240 <ES_WIFI_Connect+0xd4>
      {
        sprintf((char*)Obj->CmdData,"C0\r");
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a212:	4911      	ldr	r1, [pc, #68]	; (800a258 <ES_WIFI_Connect+0xec>)
 800a214:	4618      	mov	r0, r3
 800a216:	f008 fd43 	bl	8012ca0 <siprintf>
        ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a226:	461a      	mov	r2, r3
 800a228:	68f8      	ldr	r0, [r7, #12]
 800a22a:	f7ff fdcb 	bl	8009dc4 <AT_ExecuteCommand>
 800a22e:	4603      	mov	r3, r0
 800a230:	75fb      	strb	r3, [r7, #23]
        if(ret == ES_WIFI_STATUS_OK)
 800a232:	7dfb      	ldrb	r3, [r7, #23]
 800a234:	2b00      	cmp	r3, #0
 800a236:	d103      	bne.n	800a240 <ES_WIFI_Connect+0xd4>
        {
           Obj->NetSettings.IsConnected = 1;
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	2201      	movs	r2, #1
 800a23c:	f883 20d2 	strb.w	r2, [r3, #210]	; 0xd2
        }
      }
    }
  }
  UNLOCK_WIFI();
  return ret;
 800a240:	7dfb      	ldrb	r3, [r7, #23]
}
 800a242:	4618      	mov	r0, r3
 800a244:	3718      	adds	r7, #24
 800a246:	46bd      	mov	sp, r7
 800a248:	bd80      	pop	{r7, pc}
 800a24a:	bf00      	nop
 800a24c:	0801406c 	.word	0x0801406c
 800a250:	08014074 	.word	0x08014074
 800a254:	0801407c 	.word	0x0801407c
 800a258:	08014084 	.word	0x08014084

0800a25c <ES_WIFI_IsConnected>:
/**
  * @brief  Check whether the module is connected to an access point.
  * @retval Operation Status.
  */
uint8_t ES_WIFI_IsConnected(ES_WIFIObject_t *Obj)
{
 800a25c:	b580      	push	{r7, lr}
 800a25e:	b084      	sub	sp, #16
 800a260:	af00      	add	r7, sp, #0
 800a262:	6078      	str	r0, [r7, #4]
  ES_WIFI_Status_t ret ;
  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"CS\r");
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a26a:	4911      	ldr	r1, [pc, #68]	; (800a2b0 <ES_WIFI_IsConnected+0x54>)
 800a26c:	4618      	mov	r0, r3
 800a26e:	f008 fd17 	bl	8012ca0 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a27e:	461a      	mov	r2, r3
 800a280:	6878      	ldr	r0, [r7, #4]
 800a282:	f7ff fd9f 	bl	8009dc4 <AT_ExecuteCommand>
 800a286:	4603      	mov	r3, r0
 800a288:	73fb      	strb	r3, [r7, #15]
  if(ret == ES_WIFI_STATUS_OK)
 800a28a:	7bfb      	ldrb	r3, [r7, #15]
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	d108      	bne.n	800a2a2 <ES_WIFI_IsConnected+0x46>
  {
    AT_ParseIsConnected((char *)Obj->CmdData, &(Obj->NetSettings.IsConnected));
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	f503 7294 	add.w	r2, r3, #296	; 0x128
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	33d2      	adds	r3, #210	; 0xd2
 800a29a:	4619      	mov	r1, r3
 800a29c:	4610      	mov	r0, r2
 800a29e:	f7ff fd7b 	bl	8009d98 <AT_ParseIsConnected>
  }
  UNLOCK_WIFI();
  return Obj->NetSettings.IsConnected;
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	f893 30d2 	ldrb.w	r3, [r3, #210]	; 0xd2
}
 800a2a8:	4618      	mov	r0, r3
 800a2aa:	3710      	adds	r7, #16
 800a2ac:	46bd      	mov	sp, r7
 800a2ae:	bd80      	pop	{r7, pc}
 800a2b0:	08014088 	.word	0x08014088

0800a2b4 <ES_WIFI_GetNetworkSettings>:
  * @param  Obj: pointer to module handle
  * @param  Pointer to network setting structure.
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_GetNetworkSettings(ES_WIFIObject_t *Obj)
{
 800a2b4:	b580      	push	{r7, lr}
 800a2b6:	b084      	sub	sp, #16
 800a2b8:	af00      	add	r7, sp, #0
 800a2ba:	6078      	str	r0, [r7, #4]
  ES_WIFI_Status_t ret;
  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"C?\r");
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a2c2:	4910      	ldr	r1, [pc, #64]	; (800a304 <ES_WIFI_GetNetworkSettings+0x50>)
 800a2c4:	4618      	mov	r0, r3
 800a2c6:	f008 fceb 	bl	8012ca0 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a2d6:	461a      	mov	r2, r3
 800a2d8:	6878      	ldr	r0, [r7, #4]
 800a2da:	f7ff fd73 	bl	8009dc4 <AT_ExecuteCommand>
 800a2de:	4603      	mov	r3, r0
 800a2e0:	73fb      	strb	r3, [r7, #15]

  if(ret == ES_WIFI_STATUS_OK)
 800a2e2:	7bfb      	ldrb	r3, [r7, #15]
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d108      	bne.n	800a2fa <ES_WIFI_GetNetworkSettings+0x46>
  {
     AT_ParseConnSettings((char *)Obj->CmdData, &Obj->NetSettings);
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	f503 7294 	add.w	r2, r3, #296	; 0x128
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	338d      	adds	r3, #141	; 0x8d
 800a2f2:	4619      	mov	r1, r3
 800a2f4:	4610      	mov	r0, r2
 800a2f6:	f7ff fc9f 	bl	8009c38 <AT_ParseConnSettings>
  }

  UNLOCK_WIFI();
  return ret;
 800a2fa:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2fc:	4618      	mov	r0, r3
 800a2fe:	3710      	adds	r7, #16
 800a300:	46bd      	mov	sp, r7
 800a302:	bd80      	pop	{r7, pc}
 800a304:	08014090 	.word	0x08014090

0800a308 <ES_WIFI_GetMACAddress>:
  * @param  Obj: pointer to module handle
  * @param  mac: pointer to the MAC address array.
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_GetMACAddress(ES_WIFIObject_t *Obj, uint8_t *mac)
{
 800a308:	b580      	push	{r7, lr}
 800a30a:	b084      	sub	sp, #16
 800a30c:	af00      	add	r7, sp, #0
 800a30e:	6078      	str	r0, [r7, #4]
 800a310:	6039      	str	r1, [r7, #0]
  ES_WIFI_Status_t ret ;
  char *ptr;
  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"Z5\r");
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a318:	4912      	ldr	r1, [pc, #72]	; (800a364 <ES_WIFI_GetMACAddress+0x5c>)
 800a31a:	4618      	mov	r0, r3
 800a31c:	f008 fcc0 	bl	8012ca0 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a32c:	461a      	mov	r2, r3
 800a32e:	6878      	ldr	r0, [r7, #4]
 800a330:	f7ff fd48 	bl	8009dc4 <AT_ExecuteCommand>
 800a334:	4603      	mov	r3, r0
 800a336:	73fb      	strb	r3, [r7, #15]
  if(ret == ES_WIFI_STATUS_OK)
 800a338:	7bfb      	ldrb	r3, [r7, #15]
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	d10c      	bne.n	800a358 <ES_WIFI_GetMACAddress+0x50>
  {
    ptr = strtok((char *)(Obj->CmdData + 2), "\r\n");
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a344:	3302      	adds	r3, #2
 800a346:	4908      	ldr	r1, [pc, #32]	; (800a368 <ES_WIFI_GetMACAddress+0x60>)
 800a348:	4618      	mov	r0, r3
 800a34a:	f008 fd35 	bl	8012db8 <strtok>
 800a34e:	60b8      	str	r0, [r7, #8]
    ParseMAC(ptr, mac) ;
 800a350:	6839      	ldr	r1, [r7, #0]
 800a352:	68b8      	ldr	r0, [r7, #8]
 800a354:	f7ff fba4 	bl	8009aa0 <ParseMAC>
  }
  UNLOCK_WIFI();
  return ret;
 800a358:	7bfb      	ldrb	r3, [r7, #15]
}
 800a35a:	4618      	mov	r0, r3
 800a35c:	3710      	adds	r7, #16
 800a35e:	46bd      	mov	sp, r7
 800a360:	bd80      	pop	{r7, pc}
 800a362:	bf00      	nop
 800a364:	080140e0 	.word	0x080140e0
 800a368:	080140e4 	.word	0x080140e4

0800a36c <ES_WIFI_StartClientConnection>:
  * @param  Obj: pointer to module handle
  * @param  conn: pointer to the connection structure
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_StartClientConnection(ES_WIFIObject_t *Obj, ES_WIFI_Conn_t *conn)
{
 800a36c:	b590      	push	{r4, r7, lr}
 800a36e:	b087      	sub	sp, #28
 800a370:	af02      	add	r7, sp, #8
 800a372:	6078      	str	r0, [r7, #4]
 800a374:	6039      	str	r1, [r7, #0]
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_OK;
 800a376:	2300      	movs	r3, #0
 800a378:	73fb      	strb	r3, [r7, #15]

  if ( ((conn->Type == ES_WIFI_TCP_CONNECTION) || (conn->Type == ES_WIFI_TCP_SSL_CONNECTION)) && (conn->RemotePort == 0) ) return ES_WIFI_STATUS_ERROR;
 800a37a:	683b      	ldr	r3, [r7, #0]
 800a37c:	781b      	ldrb	r3, [r3, #0]
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d003      	beq.n	800a38a <ES_WIFI_StartClientConnection+0x1e>
 800a382:	683b      	ldr	r3, [r7, #0]
 800a384:	781b      	ldrb	r3, [r3, #0]
 800a386:	2b03      	cmp	r3, #3
 800a388:	d105      	bne.n	800a396 <ES_WIFI_StartClientConnection+0x2a>
 800a38a:	683b      	ldr	r3, [r7, #0]
 800a38c:	885b      	ldrh	r3, [r3, #2]
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d101      	bne.n	800a396 <ES_WIFI_StartClientConnection+0x2a>
 800a392:	2302      	movs	r3, #2
 800a394:	e0c1      	b.n	800a51a <ES_WIFI_StartClientConnection+0x1ae>

  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"P0=%d\r", conn->Number);
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	f503 7094 	add.w	r0, r3, #296	; 0x128
 800a39c:	683b      	ldr	r3, [r7, #0]
 800a39e:	785b      	ldrb	r3, [r3, #1]
 800a3a0:	461a      	mov	r2, r3
 800a3a2:	4960      	ldr	r1, [pc, #384]	; (800a524 <ES_WIFI_StartClientConnection+0x1b8>)
 800a3a4:	f008 fc7c 	bl	8012ca0 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a3b4:	461a      	mov	r2, r3
 800a3b6:	6878      	ldr	r0, [r7, #4]
 800a3b8:	f7ff fd04 	bl	8009dc4 <AT_ExecuteCommand>
 800a3bc:	4603      	mov	r3, r0
 800a3be:	73fb      	strb	r3, [r7, #15]

  if (ret == ES_WIFI_STATUS_OK)
 800a3c0:	7bfb      	ldrb	r3, [r7, #15]
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d114      	bne.n	800a3f0 <ES_WIFI_StartClientConnection+0x84>
  {
    sprintf((char*)Obj->CmdData,"P1=%d\r", conn->Type);
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	f503 7094 	add.w	r0, r3, #296	; 0x128
 800a3cc:	683b      	ldr	r3, [r7, #0]
 800a3ce:	781b      	ldrb	r3, [r3, #0]
 800a3d0:	461a      	mov	r2, r3
 800a3d2:	4955      	ldr	r1, [pc, #340]	; (800a528 <ES_WIFI_StartClientConnection+0x1bc>)
 800a3d4:	f008 fc64 	bl	8012ca0 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a3e4:	461a      	mov	r2, r3
 800a3e6:	6878      	ldr	r0, [r7, #4]
 800a3e8:	f7ff fcec 	bl	8009dc4 <AT_ExecuteCommand>
 800a3ec:	4603      	mov	r3, r0
 800a3ee:	73fb      	strb	r3, [r7, #15]
  }

  if (ret == ES_WIFI_STATUS_OK)
 800a3f0:	7bfb      	ldrb	r3, [r7, #15]
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d114      	bne.n	800a420 <ES_WIFI_StartClientConnection+0xb4>
  {
    sprintf((char*)Obj->CmdData,"P2=%d\r", conn->LocalPort);
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	f503 7094 	add.w	r0, r3, #296	; 0x128
 800a3fc:	683b      	ldr	r3, [r7, #0]
 800a3fe:	889b      	ldrh	r3, [r3, #4]
 800a400:	461a      	mov	r2, r3
 800a402:	494a      	ldr	r1, [pc, #296]	; (800a52c <ES_WIFI_StartClientConnection+0x1c0>)
 800a404:	f008 fc4c 	bl	8012ca0 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a414:	461a      	mov	r2, r3
 800a416:	6878      	ldr	r0, [r7, #4]
 800a418:	f7ff fcd4 	bl	8009dc4 <AT_ExecuteCommand>
 800a41c:	4603      	mov	r3, r0
 800a41e:	73fb      	strb	r3, [r7, #15]
  }

  if ((ret == ES_WIFI_STATUS_OK)&& ((conn->Type == ES_WIFI_TCP_CONNECTION) || (conn->Type == ES_WIFI_TCP_SSL_CONNECTION)))
 800a420:	7bfb      	ldrb	r3, [r7, #15]
 800a422:	2b00      	cmp	r3, #0
 800a424:	d11c      	bne.n	800a460 <ES_WIFI_StartClientConnection+0xf4>
 800a426:	683b      	ldr	r3, [r7, #0]
 800a428:	781b      	ldrb	r3, [r3, #0]
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d003      	beq.n	800a436 <ES_WIFI_StartClientConnection+0xca>
 800a42e:	683b      	ldr	r3, [r7, #0]
 800a430:	781b      	ldrb	r3, [r3, #0]
 800a432:	2b03      	cmp	r3, #3
 800a434:	d114      	bne.n	800a460 <ES_WIFI_StartClientConnection+0xf4>
  {
    sprintf((char*)Obj->CmdData,"P4=%d\r", conn->RemotePort);
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	f503 7094 	add.w	r0, r3, #296	; 0x128
 800a43c:	683b      	ldr	r3, [r7, #0]
 800a43e:	885b      	ldrh	r3, [r3, #2]
 800a440:	461a      	mov	r2, r3
 800a442:	493b      	ldr	r1, [pc, #236]	; (800a530 <ES_WIFI_StartClientConnection+0x1c4>)
 800a444:	f008 fc2c 	bl	8012ca0 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a454:	461a      	mov	r2, r3
 800a456:	6878      	ldr	r0, [r7, #4]
 800a458:	f7ff fcb4 	bl	8009dc4 <AT_ExecuteCommand>
 800a45c:	4603      	mov	r3, r0
 800a45e:	73fb      	strb	r3, [r7, #15]
  }

  if ((ret == ES_WIFI_STATUS_OK) && ((conn->Type == ES_WIFI_TCP_CONNECTION) || (conn->Type == ES_WIFI_TCP_SSL_CONNECTION)))
 800a460:	7bfb      	ldrb	r3, [r7, #15]
 800a462:	2b00      	cmp	r3, #0
 800a464:	d128      	bne.n	800a4b8 <ES_WIFI_StartClientConnection+0x14c>
 800a466:	683b      	ldr	r3, [r7, #0]
 800a468:	781b      	ldrb	r3, [r3, #0]
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d003      	beq.n	800a476 <ES_WIFI_StartClientConnection+0x10a>
 800a46e:	683b      	ldr	r3, [r7, #0]
 800a470:	781b      	ldrb	r3, [r3, #0]
 800a472:	2b03      	cmp	r3, #3
 800a474:	d120      	bne.n	800a4b8 <ES_WIFI_StartClientConnection+0x14c>
  {
    sprintf((char*)Obj->CmdData,"P3=%d.%d.%d.%d\r", conn->RemoteIP[0],conn->RemoteIP[1],
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	f503 7094 	add.w	r0, r3, #296	; 0x128
 800a47c:	683b      	ldr	r3, [r7, #0]
 800a47e:	799b      	ldrb	r3, [r3, #6]
 800a480:	4619      	mov	r1, r3
 800a482:	683b      	ldr	r3, [r7, #0]
 800a484:	79db      	ldrb	r3, [r3, #7]
 800a486:	461c      	mov	r4, r3
            conn->RemoteIP[2],conn->RemoteIP[3]);
 800a488:	683b      	ldr	r3, [r7, #0]
 800a48a:	7a1b      	ldrb	r3, [r3, #8]
    sprintf((char*)Obj->CmdData,"P3=%d.%d.%d.%d\r", conn->RemoteIP[0],conn->RemoteIP[1],
 800a48c:	461a      	mov	r2, r3
            conn->RemoteIP[2],conn->RemoteIP[3]);
 800a48e:	683b      	ldr	r3, [r7, #0]
 800a490:	7a5b      	ldrb	r3, [r3, #9]
    sprintf((char*)Obj->CmdData,"P3=%d.%d.%d.%d\r", conn->RemoteIP[0],conn->RemoteIP[1],
 800a492:	9301      	str	r3, [sp, #4]
 800a494:	9200      	str	r2, [sp, #0]
 800a496:	4623      	mov	r3, r4
 800a498:	460a      	mov	r2, r1
 800a49a:	4926      	ldr	r1, [pc, #152]	; (800a534 <ES_WIFI_StartClientConnection+0x1c8>)
 800a49c:	f008 fc00 	bl	8012ca0 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a4ac:	461a      	mov	r2, r3
 800a4ae:	6878      	ldr	r0, [r7, #4]
 800a4b0:	f7ff fc88 	bl	8009dc4 <AT_ExecuteCommand>
 800a4b4:	4603      	mov	r3, r0
 800a4b6:	73fb      	strb	r3, [r7, #15]
  }

  if ((ret == ES_WIFI_STATUS_OK) && (conn->Type == ES_WIFI_TCP_SSL_CONNECTION))
 800a4b8:	7bfb      	ldrb	r3, [r7, #15]
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d116      	bne.n	800a4ec <ES_WIFI_StartClientConnection+0x180>
 800a4be:	683b      	ldr	r3, [r7, #0]
 800a4c0:	781b      	ldrb	r3, [r3, #0]
 800a4c2:	2b03      	cmp	r3, #3
 800a4c4:	d112      	bne.n	800a4ec <ES_WIFI_StartClientConnection+0x180>
  {
    sprintf((char*)Obj->CmdData,"P9=2\r");
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a4cc:	491a      	ldr	r1, [pc, #104]	; (800a538 <ES_WIFI_StartClientConnection+0x1cc>)
 800a4ce:	4618      	mov	r0, r3
 800a4d0:	f008 fbe6 	bl	8012ca0 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a4e0:	461a      	mov	r2, r3
 800a4e2:	6878      	ldr	r0, [r7, #4]
 800a4e4:	f7ff fc6e 	bl	8009dc4 <AT_ExecuteCommand>
 800a4e8:	4603      	mov	r3, r0
 800a4ea:	73fb      	strb	r3, [r7, #15]
  }

  if (ret == ES_WIFI_STATUS_OK)
 800a4ec:	7bfb      	ldrb	r3, [r7, #15]
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d112      	bne.n	800a518 <ES_WIFI_StartClientConnection+0x1ac>
  {
    sprintf((char*)Obj->CmdData,"P6=1\r");
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a4f8:	4910      	ldr	r1, [pc, #64]	; (800a53c <ES_WIFI_StartClientConnection+0x1d0>)
 800a4fa:	4618      	mov	r0, r3
 800a4fc:	f008 fbd0 	bl	8012ca0 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a50c:	461a      	mov	r2, r3
 800a50e:	6878      	ldr	r0, [r7, #4]
 800a510:	f7ff fc58 	bl	8009dc4 <AT_ExecuteCommand>
 800a514:	4603      	mov	r3, r0
 800a516:	73fb      	strb	r3, [r7, #15]
  }

  UNLOCK_WIFI();
  return ret;
 800a518:	7bfb      	ldrb	r3, [r7, #15]
}
 800a51a:	4618      	mov	r0, r3
 800a51c:	3714      	adds	r7, #20
 800a51e:	46bd      	mov	sp, r7
 800a520:	bd90      	pop	{r4, r7, pc}
 800a522:	bf00      	nop
 800a524:	08014148 	.word	0x08014148
 800a528:	08014150 	.word	0x08014150
 800a52c:	08014158 	.word	0x08014158
 800a530:	08014160 	.word	0x08014160
 800a534:	08014168 	.word	0x08014168
 800a538:	08014178 	.word	0x08014178
 800a53c:	08014180 	.word	0x08014180

0800a540 <ES_WIFI_SendData>:
  * @param  pdata: pointer to data
  * @param  len : length of the data to be sent
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_SendData(ES_WIFIObject_t *Obj, uint8_t Socket, uint8_t *pdata, uint16_t Reqlen , uint16_t *SentLen , uint32_t Timeout)
{
 800a540:	b580      	push	{r7, lr}
 800a542:	b088      	sub	sp, #32
 800a544:	af02      	add	r7, sp, #8
 800a546:	60f8      	str	r0, [r7, #12]
 800a548:	607a      	str	r2, [r7, #4]
 800a54a:	461a      	mov	r2, r3
 800a54c:	460b      	mov	r3, r1
 800a54e:	72fb      	strb	r3, [r7, #11]
 800a550:	4613      	mov	r3, r2
 800a552:	813b      	strh	r3, [r7, #8]
  uint32_t wkgTimeOut;

  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
 800a554:	2302      	movs	r3, #2
 800a556:	74fb      	strb	r3, [r7, #19]

  if (Timeout == 0)
 800a558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d102      	bne.n	800a564 <ES_WIFI_SendData+0x24>
  {
    wkgTimeOut = NET_DEFAULT_NOBLOCKING_WRITE_TIMEOUT;
 800a55e:	2301      	movs	r3, #1
 800a560:	617b      	str	r3, [r7, #20]
 800a562:	e001      	b.n	800a568 <ES_WIFI_SendData+0x28>
  }
  else
  {
    wkgTimeOut = Timeout;
 800a564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a566:	617b      	str	r3, [r7, #20]
  }

  LOCK_WIFI();
  if(Reqlen >= ES_WIFI_PAYLOAD_SIZE ) Reqlen= ES_WIFI_PAYLOAD_SIZE;
 800a568:	893b      	ldrh	r3, [r7, #8]
 800a56a:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 800a56e:	d302      	bcc.n	800a576 <ES_WIFI_SendData+0x36>
 800a570:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 800a574:	813b      	strh	r3, [r7, #8]

  *SentLen = Reqlen;
 800a576:	6a3b      	ldr	r3, [r7, #32]
 800a578:	893a      	ldrh	r2, [r7, #8]
 800a57a:	801a      	strh	r2, [r3, #0]
  sprintf((char*)Obj->CmdData,"P0=%d\r", Socket);
 800a57c:	68fb      	ldr	r3, [r7, #12]
 800a57e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a582:	7afa      	ldrb	r2, [r7, #11]
 800a584:	4942      	ldr	r1, [pc, #264]	; (800a690 <ES_WIFI_SendData+0x150>)
 800a586:	4618      	mov	r0, r3
 800a588:	f008 fb8a 	bl	8012ca0 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a598:	461a      	mov	r2, r3
 800a59a:	68f8      	ldr	r0, [r7, #12]
 800a59c:	f7ff fc12 	bl	8009dc4 <AT_ExecuteCommand>
 800a5a0:	4603      	mov	r3, r0
 800a5a2:	74fb      	strb	r3, [r7, #19]
  if(ret == ES_WIFI_STATUS_OK)
 800a5a4:	7cfb      	ldrb	r3, [r7, #19]
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	d15e      	bne.n	800a668 <ES_WIFI_SendData+0x128>
  {
    sprintf((char*)Obj->CmdData,"S2=%lu\r",wkgTimeOut);
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a5b0:	697a      	ldr	r2, [r7, #20]
 800a5b2:	4938      	ldr	r1, [pc, #224]	; (800a694 <ES_WIFI_SendData+0x154>)
 800a5b4:	4618      	mov	r0, r3
 800a5b6:	f008 fb73 	bl	8012ca0 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a5c6:	461a      	mov	r2, r3
 800a5c8:	68f8      	ldr	r0, [r7, #12]
 800a5ca:	f7ff fbfb 	bl	8009dc4 <AT_ExecuteCommand>
 800a5ce:	4603      	mov	r3, r0
 800a5d0:	74fb      	strb	r3, [r7, #19]

    if(ret == ES_WIFI_STATUS_OK)
 800a5d2:	7cfb      	ldrb	r3, [r7, #19]
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	d13d      	bne.n	800a654 <ES_WIFI_SendData+0x114>
    {
      sprintf((char *)Obj->CmdData,"S3=%04d\r",Reqlen);
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a5de:	893a      	ldrh	r2, [r7, #8]
 800a5e0:	492d      	ldr	r1, [pc, #180]	; (800a698 <ES_WIFI_SendData+0x158>)
 800a5e2:	4618      	mov	r0, r3
 800a5e4:	f008 fb5c 	bl	8012ca0 <siprintf>
      ret = AT_RequestSendData(Obj, Obj->CmdData, pdata, Reqlen, Obj->CmdData);
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a5f4:	893a      	ldrh	r2, [r7, #8]
 800a5f6:	9300      	str	r3, [sp, #0]
 800a5f8:	4613      	mov	r3, r2
 800a5fa:	687a      	ldr	r2, [r7, #4]
 800a5fc:	68f8      	ldr	r0, [r7, #12]
 800a5fe:	f7ff fc47 	bl	8009e90 <AT_RequestSendData>
 800a602:	4603      	mov	r3, r0
 800a604:	74fb      	strb	r3, [r7, #19]

      if(ret == ES_WIFI_STATUS_OK)
 800a606:	7cfb      	ldrb	r3, [r7, #19]
 800a608:	2b00      	cmp	r3, #0
 800a60a:	d119      	bne.n	800a640 <ES_WIFI_SendData+0x100>
      {
        if(strstr((char *)Obj->CmdData,"-1\r\n"))
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a612:	4922      	ldr	r1, [pc, #136]	; (800a69c <ES_WIFI_SendData+0x15c>)
 800a614:	4618      	mov	r0, r3
 800a616:	f008 fbb9 	bl	8012d8c <strstr>
 800a61a:	4603      	mov	r3, r0
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d02c      	beq.n	800a67a <ES_WIFI_SendData+0x13a>
        {
          DEBUG("Send Data detect error %s\n", (char *)Obj->CmdData);
 800a620:	f640 0267 	movw	r2, #2151	; 0x867
 800a624:	491e      	ldr	r1, [pc, #120]	; (800a6a0 <ES_WIFI_SendData+0x160>)
 800a626:	481f      	ldr	r0, [pc, #124]	; (800a6a4 <ES_WIFI_SendData+0x164>)
 800a628:	f008 f9fe 	bl	8012a28 <iprintf>
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a632:	4619      	mov	r1, r3
 800a634:	481c      	ldr	r0, [pc, #112]	; (800a6a8 <ES_WIFI_SendData+0x168>)
 800a636:	f008 f9f7 	bl	8012a28 <iprintf>
          ret = ES_WIFI_STATUS_ERROR;
 800a63a:	2302      	movs	r3, #2
 800a63c:	74fb      	strb	r3, [r7, #19]
 800a63e:	e01c      	b.n	800a67a <ES_WIFI_SendData+0x13a>
        }
      }
      else
      {
        DEBUG("Send Data command failed\n");
 800a640:	f640 026d 	movw	r2, #2157	; 0x86d
 800a644:	4916      	ldr	r1, [pc, #88]	; (800a6a0 <ES_WIFI_SendData+0x160>)
 800a646:	4817      	ldr	r0, [pc, #92]	; (800a6a4 <ES_WIFI_SendData+0x164>)
 800a648:	f008 f9ee 	bl	8012a28 <iprintf>
 800a64c:	4817      	ldr	r0, [pc, #92]	; (800a6ac <ES_WIFI_SendData+0x16c>)
 800a64e:	f008 fa71 	bl	8012b34 <puts>
 800a652:	e012      	b.n	800a67a <ES_WIFI_SendData+0x13a>
      }
    }
    else
    {
      DEBUG("S2 command failed\n");
 800a654:	f640 0272 	movw	r2, #2162	; 0x872
 800a658:	4911      	ldr	r1, [pc, #68]	; (800a6a0 <ES_WIFI_SendData+0x160>)
 800a65a:	4812      	ldr	r0, [pc, #72]	; (800a6a4 <ES_WIFI_SendData+0x164>)
 800a65c:	f008 f9e4 	bl	8012a28 <iprintf>
 800a660:	4813      	ldr	r0, [pc, #76]	; (800a6b0 <ES_WIFI_SendData+0x170>)
 800a662:	f008 fa67 	bl	8012b34 <puts>
 800a666:	e008      	b.n	800a67a <ES_WIFI_SendData+0x13a>
    }
  }
  else
  {
   DEBUG("P0 command failed\n");
 800a668:	f640 0277 	movw	r2, #2167	; 0x877
 800a66c:	490c      	ldr	r1, [pc, #48]	; (800a6a0 <ES_WIFI_SendData+0x160>)
 800a66e:	480d      	ldr	r0, [pc, #52]	; (800a6a4 <ES_WIFI_SendData+0x164>)
 800a670:	f008 f9da 	bl	8012a28 <iprintf>
 800a674:	480f      	ldr	r0, [pc, #60]	; (800a6b4 <ES_WIFI_SendData+0x174>)
 800a676:	f008 fa5d 	bl	8012b34 <puts>
  }

  if (ret == ES_WIFI_STATUS_ERROR)
 800a67a:	7cfb      	ldrb	r3, [r7, #19]
 800a67c:	2b02      	cmp	r3, #2
 800a67e:	d102      	bne.n	800a686 <ES_WIFI_SendData+0x146>
  {
    *SentLen = 0;
 800a680:	6a3b      	ldr	r3, [r7, #32]
 800a682:	2200      	movs	r2, #0
 800a684:	801a      	strh	r2, [r3, #0]
  }
  UNLOCK_WIFI();
  return ret;
 800a686:	7cfb      	ldrb	r3, [r7, #19]
}
 800a688:	4618      	mov	r0, r3
 800a68a:	3718      	adds	r7, #24
 800a68c:	46bd      	mov	sp, r7
 800a68e:	bd80      	pop	{r7, pc}
 800a690:	08014148 	.word	0x08014148
 800a694:	0801430c 	.word	0x0801430c
 800a698:	08014314 	.word	0x08014314
 800a69c:	08014320 	.word	0x08014320
 800a6a0:	080141d8 	.word	0x080141d8
 800a6a4:	08014200 	.word	0x08014200
 800a6a8:	08014328 	.word	0x08014328
 800a6ac:	08014344 	.word	0x08014344
 800a6b0:	08014360 	.word	0x08014360
 800a6b4:	08014374 	.word	0x08014374

0800a6b8 <ES_WIFI_ReceiveData>:
  * @param  pdata: pointer to data
  * @param  len : pointer to the length of the data to be received
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_ReceiveData(ES_WIFIObject_t *Obj, uint8_t Socket, uint8_t *pdata, uint16_t Reqlen, uint16_t *Receivedlen, uint32_t Timeout)
{
 800a6b8:	b580      	push	{r7, lr}
 800a6ba:	b088      	sub	sp, #32
 800a6bc:	af02      	add	r7, sp, #8
 800a6be:	60f8      	str	r0, [r7, #12]
 800a6c0:	607a      	str	r2, [r7, #4]
 800a6c2:	461a      	mov	r2, r3
 800a6c4:	460b      	mov	r3, r1
 800a6c6:	72fb      	strb	r3, [r7, #11]
 800a6c8:	4613      	mov	r3, r2
 800a6ca:	813b      	strh	r3, [r7, #8]
  uint32_t wkgTimeOut;

  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
 800a6cc:	2302      	movs	r3, #2
 800a6ce:	74fb      	strb	r3, [r7, #19]

  if (Timeout == 0)
 800a6d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d102      	bne.n	800a6dc <ES_WIFI_ReceiveData+0x24>
  {
    wkgTimeOut = NET_DEFAULT_NOBLOCKING_READ_TIMEOUT;
 800a6d6:	2301      	movs	r3, #1
 800a6d8:	617b      	str	r3, [r7, #20]
 800a6da:	e001      	b.n	800a6e0 <ES_WIFI_ReceiveData+0x28>
  }
  else
  {
    wkgTimeOut = Timeout;
 800a6dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6de:	617b      	str	r3, [r7, #20]
  }

  LOCK_WIFI();

  if(Reqlen <= ES_WIFI_PAYLOAD_SIZE )
 800a6e0:	893b      	ldrh	r3, [r7, #8]
 800a6e2:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 800a6e6:	f200 808b 	bhi.w	800a800 <ES_WIFI_ReceiveData+0x148>
  {
    sprintf((char*)Obj->CmdData,"P0=%d\r", Socket);
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a6f0:	7afa      	ldrb	r2, [r7, #11]
 800a6f2:	4946      	ldr	r1, [pc, #280]	; (800a80c <ES_WIFI_ReceiveData+0x154>)
 800a6f4:	4618      	mov	r0, r3
 800a6f6:	f008 fad3 	bl	8012ca0 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a706:	461a      	mov	r2, r3
 800a708:	68f8      	ldr	r0, [r7, #12]
 800a70a:	f7ff fb5b 	bl	8009dc4 <AT_ExecuteCommand>
 800a70e:	4603      	mov	r3, r0
 800a710:	74fb      	strb	r3, [r7, #19]

    if(ret == ES_WIFI_STATUS_OK)
 800a712:	7cfb      	ldrb	r3, [r7, #19]
 800a714:	2b00      	cmp	r3, #0
 800a716:	d165      	bne.n	800a7e4 <ES_WIFI_ReceiveData+0x12c>
    {
      sprintf((char*)Obj->CmdData,"R1=%d\r", Reqlen);
 800a718:	68fb      	ldr	r3, [r7, #12]
 800a71a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a71e:	893a      	ldrh	r2, [r7, #8]
 800a720:	493b      	ldr	r1, [pc, #236]	; (800a810 <ES_WIFI_ReceiveData+0x158>)
 800a722:	4618      	mov	r0, r3
 800a724:	f008 fabc 	bl	8012ca0 <siprintf>
      ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800a728:	68fb      	ldr	r3, [r7, #12]
 800a72a:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800a72e:	68fb      	ldr	r3, [r7, #12]
 800a730:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a734:	461a      	mov	r2, r3
 800a736:	68f8      	ldr	r0, [r7, #12]
 800a738:	f7ff fb44 	bl	8009dc4 <AT_ExecuteCommand>
 800a73c:	4603      	mov	r3, r0
 800a73e:	74fb      	strb	r3, [r7, #19]
      if(ret == ES_WIFI_STATUS_OK)
 800a740:	7cfb      	ldrb	r3, [r7, #19]
 800a742:	2b00      	cmp	r3, #0
 800a744:	d141      	bne.n	800a7ca <ES_WIFI_ReceiveData+0x112>
      {
        sprintf((char*)Obj->CmdData,"R2=%lu\r", wkgTimeOut);
 800a746:	68fb      	ldr	r3, [r7, #12]
 800a748:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a74c:	697a      	ldr	r2, [r7, #20]
 800a74e:	4931      	ldr	r1, [pc, #196]	; (800a814 <ES_WIFI_ReceiveData+0x15c>)
 800a750:	4618      	mov	r0, r3
 800a752:	f008 faa5 	bl	8012ca0 <siprintf>
        ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800a756:	68fb      	ldr	r3, [r7, #12]
 800a758:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a762:	461a      	mov	r2, r3
 800a764:	68f8      	ldr	r0, [r7, #12]
 800a766:	f7ff fb2d 	bl	8009dc4 <AT_ExecuteCommand>
 800a76a:	4603      	mov	r3, r0
 800a76c:	74fb      	strb	r3, [r7, #19]
        if(ret == ES_WIFI_STATUS_OK)
 800a76e:	7cfb      	ldrb	r3, [r7, #19]
 800a770:	2b00      	cmp	r3, #0
 800a772:	d120      	bne.n	800a7b6 <ES_WIFI_ReceiveData+0xfe>
        {
          sprintf((char*)Obj->CmdData,"R0\r");
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a77a:	4927      	ldr	r1, [pc, #156]	; (800a818 <ES_WIFI_ReceiveData+0x160>)
 800a77c:	4618      	mov	r0, r3
 800a77e:	f008 fa8f 	bl	8012ca0 <siprintf>
          ret = AT_RequestReceiveData(Obj, Obj->CmdData, (char *)pdata, Reqlen, Receivedlen);
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800a788:	893a      	ldrh	r2, [r7, #8]
 800a78a:	6a3b      	ldr	r3, [r7, #32]
 800a78c:	9300      	str	r3, [sp, #0]
 800a78e:	4613      	mov	r3, r2
 800a790:	687a      	ldr	r2, [r7, #4]
 800a792:	68f8      	ldr	r0, [r7, #12]
 800a794:	f7ff fbf2 	bl	8009f7c <AT_RequestReceiveData>
 800a798:	4603      	mov	r3, r0
 800a79a:	74fb      	strb	r3, [r7, #19]
          if (ret != ES_WIFI_STATUS_OK)
 800a79c:	7cfb      	ldrb	r3, [r7, #19]
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	d02e      	beq.n	800a800 <ES_WIFI_ReceiveData+0x148>
          {
            DEBUG("AT_RequestReceiveData  failed\n");
 800a7a2:	f640 1208 	movw	r2, #2312	; 0x908
 800a7a6:	491d      	ldr	r1, [pc, #116]	; (800a81c <ES_WIFI_ReceiveData+0x164>)
 800a7a8:	481d      	ldr	r0, [pc, #116]	; (800a820 <ES_WIFI_ReceiveData+0x168>)
 800a7aa:	f008 f93d 	bl	8012a28 <iprintf>
 800a7ae:	481d      	ldr	r0, [pc, #116]	; (800a824 <ES_WIFI_ReceiveData+0x16c>)
 800a7b0:	f008 f9c0 	bl	8012b34 <puts>
 800a7b4:	e024      	b.n	800a800 <ES_WIFI_ReceiveData+0x148>
          }
        }
        else
        {
         DEBUG("setting timeout failed\n");
 800a7b6:	f640 120d 	movw	r2, #2317	; 0x90d
 800a7ba:	4918      	ldr	r1, [pc, #96]	; (800a81c <ES_WIFI_ReceiveData+0x164>)
 800a7bc:	4818      	ldr	r0, [pc, #96]	; (800a820 <ES_WIFI_ReceiveData+0x168>)
 800a7be:	f008 f933 	bl	8012a28 <iprintf>
 800a7c2:	4819      	ldr	r0, [pc, #100]	; (800a828 <ES_WIFI_ReceiveData+0x170>)
 800a7c4:	f008 f9b6 	bl	8012b34 <puts>
 800a7c8:	e01a      	b.n	800a800 <ES_WIFI_ReceiveData+0x148>
        }
      }
      else
      {
        DEBUG("setting requested len failed\n");
 800a7ca:	f640 1212 	movw	r2, #2322	; 0x912
 800a7ce:	4913      	ldr	r1, [pc, #76]	; (800a81c <ES_WIFI_ReceiveData+0x164>)
 800a7d0:	4813      	ldr	r0, [pc, #76]	; (800a820 <ES_WIFI_ReceiveData+0x168>)
 800a7d2:	f008 f929 	bl	8012a28 <iprintf>
 800a7d6:	4815      	ldr	r0, [pc, #84]	; (800a82c <ES_WIFI_ReceiveData+0x174>)
 800a7d8:	f008 f9ac 	bl	8012b34 <puts>
        *Receivedlen = 0;
 800a7dc:	6a3b      	ldr	r3, [r7, #32]
 800a7de:	2200      	movs	r2, #0
 800a7e0:	801a      	strh	r2, [r3, #0]
 800a7e2:	e00d      	b.n	800a800 <ES_WIFI_ReceiveData+0x148>
      }
    }
    else
    {
      DEBUG("setting socket for read failed\n");
 800a7e4:	f640 1218 	movw	r2, #2328	; 0x918
 800a7e8:	490c      	ldr	r1, [pc, #48]	; (800a81c <ES_WIFI_ReceiveData+0x164>)
 800a7ea:	480d      	ldr	r0, [pc, #52]	; (800a820 <ES_WIFI_ReceiveData+0x168>)
 800a7ec:	f008 f91c 	bl	8012a28 <iprintf>
 800a7f0:	480f      	ldr	r0, [pc, #60]	; (800a830 <ES_WIFI_ReceiveData+0x178>)
 800a7f2:	f008 f99f 	bl	8012b34 <puts>
      issue15++;
 800a7f6:	4b0f      	ldr	r3, [pc, #60]	; (800a834 <ES_WIFI_ReceiveData+0x17c>)
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	3301      	adds	r3, #1
 800a7fc:	4a0d      	ldr	r2, [pc, #52]	; (800a834 <ES_WIFI_ReceiveData+0x17c>)
 800a7fe:	6013      	str	r3, [r2, #0]
    }
  }
  UNLOCK_WIFI();
  return ret;
 800a800:	7cfb      	ldrb	r3, [r7, #19]
}
 800a802:	4618      	mov	r0, r3
 800a804:	3718      	adds	r7, #24
 800a806:	46bd      	mov	sp, r7
 800a808:	bd80      	pop	{r7, pc}
 800a80a:	bf00      	nop
 800a80c:	08014148 	.word	0x08014148
 800a810:	08014398 	.word	0x08014398
 800a814:	080143a0 	.word	0x080143a0
 800a818:	080143a8 	.word	0x080143a8
 800a81c:	080141d8 	.word	0x080141d8
 800a820:	08014200 	.word	0x08014200
 800a824:	080143ac 	.word	0x080143ac
 800a828:	080143cc 	.word	0x080143cc
 800a82c:	080143e4 	.word	0x080143e4
 800a830:	08014404 	.word	0x08014404
 800a834:	20000c8c 	.word	0x20000c8c

0800a838 <SPI_WIFI_MspInit>:
  * @brief  Initialize SPI MSP
  * @param  hspi: SPI handle
  * @retval None
  */
void SPI_WIFI_MspInit(SPI_HandleTypeDef* hspi)
{
 800a838:	b580      	push	{r7, lr}
 800a83a:	b08c      	sub	sp, #48	; 0x30
 800a83c:	af00      	add	r7, sp, #0
 800a83e:	6078      	str	r0, [r7, #4]
  
  GPIO_InitTypeDef GPIO_Init;
  
  __HAL_RCC_SPI3_CLK_ENABLE();
 800a840:	4b56      	ldr	r3, [pc, #344]	; (800a99c <SPI_WIFI_MspInit+0x164>)
 800a842:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a844:	4a55      	ldr	r2, [pc, #340]	; (800a99c <SPI_WIFI_MspInit+0x164>)
 800a846:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a84a:	6593      	str	r3, [r2, #88]	; 0x58
 800a84c:	4b53      	ldr	r3, [pc, #332]	; (800a99c <SPI_WIFI_MspInit+0x164>)
 800a84e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a850:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a854:	61bb      	str	r3, [r7, #24]
 800a856:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a858:	4b50      	ldr	r3, [pc, #320]	; (800a99c <SPI_WIFI_MspInit+0x164>)
 800a85a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a85c:	4a4f      	ldr	r2, [pc, #316]	; (800a99c <SPI_WIFI_MspInit+0x164>)
 800a85e:	f043 0302 	orr.w	r3, r3, #2
 800a862:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a864:	4b4d      	ldr	r3, [pc, #308]	; (800a99c <SPI_WIFI_MspInit+0x164>)
 800a866:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a868:	f003 0302 	and.w	r3, r3, #2
 800a86c:	617b      	str	r3, [r7, #20]
 800a86e:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800a870:	4b4a      	ldr	r3, [pc, #296]	; (800a99c <SPI_WIFI_MspInit+0x164>)
 800a872:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a874:	4a49      	ldr	r2, [pc, #292]	; (800a99c <SPI_WIFI_MspInit+0x164>)
 800a876:	f043 0304 	orr.w	r3, r3, #4
 800a87a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a87c:	4b47      	ldr	r3, [pc, #284]	; (800a99c <SPI_WIFI_MspInit+0x164>)
 800a87e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a880:	f003 0304 	and.w	r3, r3, #4
 800a884:	613b      	str	r3, [r7, #16]
 800a886:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800a888:	4b44      	ldr	r3, [pc, #272]	; (800a99c <SPI_WIFI_MspInit+0x164>)
 800a88a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a88c:	4a43      	ldr	r2, [pc, #268]	; (800a99c <SPI_WIFI_MspInit+0x164>)
 800a88e:	f043 0310 	orr.w	r3, r3, #16
 800a892:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a894:	4b41      	ldr	r3, [pc, #260]	; (800a99c <SPI_WIFI_MspInit+0x164>)
 800a896:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a898:	f003 0310 	and.w	r3, r3, #16
 800a89c:	60fb      	str	r3, [r7, #12]
 800a89e:	68fb      	ldr	r3, [r7, #12]
    
  /* configure Wake up pin */
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13, GPIO_PIN_RESET );
 800a8a0:	2200      	movs	r2, #0
 800a8a2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800a8a6:	483e      	ldr	r0, [pc, #248]	; (800a9a0 <SPI_WIFI_MspInit+0x168>)
 800a8a8:	f7f8 fd18 	bl	80032dc <HAL_GPIO_WritePin>
  GPIO_Init.Pin       = GPIO_PIN_13;
 800a8ac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a8b0:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 800a8b2:	2301      	movs	r3, #1
 800a8b4:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 800a8b6:	2300      	movs	r3, #0
 800a8b8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 800a8ba:	2300      	movs	r3, #0
 800a8bc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_Init );
 800a8be:	f107 031c 	add.w	r3, r7, #28
 800a8c2:	4619      	mov	r1, r3
 800a8c4:	4836      	ldr	r0, [pc, #216]	; (800a9a0 <SPI_WIFI_MspInit+0x168>)
 800a8c6:	f7f8 fa53 	bl	8002d70 <HAL_GPIO_Init>

  /* configure Data ready pin */
  GPIO_Init.Pin       = GPIO_PIN_1;
 800a8ca:	2302      	movs	r3, #2
 800a8cc:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_IT_RISING;
 800a8ce:	4b35      	ldr	r3, [pc, #212]	; (800a9a4 <SPI_WIFI_MspInit+0x16c>)
 800a8d0:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 800a8d2:	2300      	movs	r3, #0
 800a8d4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 800a8d6:	2300      	movs	r3, #0
 800a8d8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_Init );
 800a8da:	f107 031c 	add.w	r3, r7, #28
 800a8de:	4619      	mov	r1, r3
 800a8e0:	4831      	ldr	r0, [pc, #196]	; (800a9a8 <SPI_WIFI_MspInit+0x170>)
 800a8e2:	f7f8 fa45 	bl	8002d70 <HAL_GPIO_Init>

  /* configure Reset pin */
  GPIO_Init.Pin       = GPIO_PIN_8;
 800a8e6:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a8ea:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 800a8ec:	2301      	movs	r3, #1
 800a8ee:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 800a8f0:	2300      	movs	r3, #0
 800a8f2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 800a8f4:	2300      	movs	r3, #0
 800a8f6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_Init.Alternate = 0;
 800a8f8:	2300      	movs	r3, #0
 800a8fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_Init );
 800a8fc:	f107 031c 	add.w	r3, r7, #28
 800a900:	4619      	mov	r1, r3
 800a902:	4829      	ldr	r0, [pc, #164]	; (800a9a8 <SPI_WIFI_MspInit+0x170>)
 800a904:	f7f8 fa34 	bl	8002d70 <HAL_GPIO_Init>
  
  /* configure SPI NSS pin pin */
  HAL_GPIO_WritePin( GPIOE , GPIO_PIN_0, GPIO_PIN_SET );
 800a908:	2201      	movs	r2, #1
 800a90a:	2101      	movs	r1, #1
 800a90c:	4826      	ldr	r0, [pc, #152]	; (800a9a8 <SPI_WIFI_MspInit+0x170>)
 800a90e:	f7f8 fce5 	bl	80032dc <HAL_GPIO_WritePin>
  GPIO_Init.Pin       =  GPIO_PIN_0;
 800a912:	2301      	movs	r3, #1
 800a914:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 800a916:	2301      	movs	r3, #1
 800a918:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 800a91a:	2300      	movs	r3, #0
 800a91c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 800a91e:	2301      	movs	r3, #1
 800a920:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init( GPIOE, &GPIO_Init );
 800a922:	f107 031c 	add.w	r3, r7, #28
 800a926:	4619      	mov	r1, r3
 800a928:	481f      	ldr	r0, [pc, #124]	; (800a9a8 <SPI_WIFI_MspInit+0x170>)
 800a92a:	f7f8 fa21 	bl	8002d70 <HAL_GPIO_Init>
  
  /* configure SPI CLK pin */
  GPIO_Init.Pin       =  GPIO_PIN_10;
 800a92e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a932:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 800a934:	2302      	movs	r3, #2
 800a936:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 800a938:	2300      	movs	r3, #0
 800a93a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 800a93c:	2301      	movs	r3, #1
 800a93e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 800a940:	2306      	movs	r3, #6
 800a942:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_Init );
 800a944:	f107 031c 	add.w	r3, r7, #28
 800a948:	4619      	mov	r1, r3
 800a94a:	4818      	ldr	r0, [pc, #96]	; (800a9ac <SPI_WIFI_MspInit+0x174>)
 800a94c:	f7f8 fa10 	bl	8002d70 <HAL_GPIO_Init>
  
  /* configure SPI MOSI pin */
  GPIO_Init.Pin       = GPIO_PIN_12;
 800a950:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a954:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 800a956:	2302      	movs	r3, #2
 800a958:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 800a95a:	2300      	movs	r3, #0
 800a95c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 800a95e:	2301      	movs	r3, #1
 800a960:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 800a962:	2306      	movs	r3, #6
 800a964:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init( GPIOC, &GPIO_Init );
 800a966:	f107 031c 	add.w	r3, r7, #28
 800a96a:	4619      	mov	r1, r3
 800a96c:	480f      	ldr	r0, [pc, #60]	; (800a9ac <SPI_WIFI_MspInit+0x174>)
 800a96e:	f7f8 f9ff 	bl	8002d70 <HAL_GPIO_Init>
  
  /* configure SPI MISO pin */
  GPIO_Init.Pin       = GPIO_PIN_11;
 800a972:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a976:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 800a978:	2302      	movs	r3, #2
 800a97a:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_PULLUP;
 800a97c:	2301      	movs	r3, #1
 800a97e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 800a980:	2301      	movs	r3, #1
 800a982:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 800a984:	2306      	movs	r3, #6
 800a986:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init( GPIOC,&GPIO_Init );
 800a988:	f107 031c 	add.w	r3, r7, #28
 800a98c:	4619      	mov	r1, r3
 800a98e:	4807      	ldr	r0, [pc, #28]	; (800a9ac <SPI_WIFI_MspInit+0x174>)
 800a990:	f7f8 f9ee 	bl	8002d70 <HAL_GPIO_Init>
}
 800a994:	bf00      	nop
 800a996:	3730      	adds	r7, #48	; 0x30
 800a998:	46bd      	mov	sp, r7
 800a99a:	bd80      	pop	{r7, pc}
 800a99c:	40021000 	.word	0x40021000
 800a9a0:	48000400 	.word	0x48000400
 800a9a4:	10110000 	.word	0x10110000
 800a9a8:	48001000 	.word	0x48001000
 800a9ac:	48000800 	.word	0x48000800

0800a9b0 <SPI_WIFI_Init>:
  * @brief  Initialize the SPI3
  * @param  None
  * @retval None
  */
int8_t SPI_WIFI_Init(uint16_t mode)
{
 800a9b0:	b580      	push	{r7, lr}
 800a9b2:	b084      	sub	sp, #16
 800a9b4:	af00      	add	r7, sp, #0
 800a9b6:	4603      	mov	r3, r0
 800a9b8:	80fb      	strh	r3, [r7, #6]
  int8_t  rc=0;
 800a9ba:	2300      	movs	r3, #0
 800a9bc:	73fb      	strb	r3, [r7, #15]
  
  if (mode == ES_WIFI_INIT)
 800a9be:	88fb      	ldrh	r3, [r7, #6]
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	d145      	bne.n	800aa50 <SPI_WIFI_Init+0xa0>
  {
    hspi.Instance               = SPI3;
 800a9c4:	4b27      	ldr	r3, [pc, #156]	; (800aa64 <SPI_WIFI_Init+0xb4>)
 800a9c6:	4a28      	ldr	r2, [pc, #160]	; (800aa68 <SPI_WIFI_Init+0xb8>)
 800a9c8:	601a      	str	r2, [r3, #0]
    SPI_WIFI_MspInit(&hspi);
 800a9ca:	4826      	ldr	r0, [pc, #152]	; (800aa64 <SPI_WIFI_Init+0xb4>)
 800a9cc:	f7ff ff34 	bl	800a838 <SPI_WIFI_MspInit>
  
    hspi.Init.Mode              = SPI_MODE_MASTER;
 800a9d0:	4b24      	ldr	r3, [pc, #144]	; (800aa64 <SPI_WIFI_Init+0xb4>)
 800a9d2:	f44f 7282 	mov.w	r2, #260	; 0x104
 800a9d6:	605a      	str	r2, [r3, #4]
    hspi.Init.Direction         = SPI_DIRECTION_2LINES;
 800a9d8:	4b22      	ldr	r3, [pc, #136]	; (800aa64 <SPI_WIFI_Init+0xb4>)
 800a9da:	2200      	movs	r2, #0
 800a9dc:	609a      	str	r2, [r3, #8]
    hspi.Init.DataSize          = SPI_DATASIZE_16BIT;
 800a9de:	4b21      	ldr	r3, [pc, #132]	; (800aa64 <SPI_WIFI_Init+0xb4>)
 800a9e0:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 800a9e4:	60da      	str	r2, [r3, #12]
    hspi.Init.CLKPolarity       = SPI_POLARITY_LOW;
 800a9e6:	4b1f      	ldr	r3, [pc, #124]	; (800aa64 <SPI_WIFI_Init+0xb4>)
 800a9e8:	2200      	movs	r2, #0
 800a9ea:	611a      	str	r2, [r3, #16]
    hspi.Init.CLKPhase          = SPI_PHASE_1EDGE;
 800a9ec:	4b1d      	ldr	r3, [pc, #116]	; (800aa64 <SPI_WIFI_Init+0xb4>)
 800a9ee:	2200      	movs	r2, #0
 800a9f0:	615a      	str	r2, [r3, #20]
    hspi.Init.NSS               = SPI_NSS_SOFT;
 800a9f2:	4b1c      	ldr	r3, [pc, #112]	; (800aa64 <SPI_WIFI_Init+0xb4>)
 800a9f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a9f8:	619a      	str	r2, [r3, #24]
    hspi.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8; /* 80/8= 10MHz (Inventek WIFI module supports up to 20MHz)*/
 800a9fa:	4b1a      	ldr	r3, [pc, #104]	; (800aa64 <SPI_WIFI_Init+0xb4>)
 800a9fc:	2210      	movs	r2, #16
 800a9fe:	61da      	str	r2, [r3, #28]
    hspi.Init.FirstBit          = SPI_FIRSTBIT_MSB;
 800aa00:	4b18      	ldr	r3, [pc, #96]	; (800aa64 <SPI_WIFI_Init+0xb4>)
 800aa02:	2200      	movs	r2, #0
 800aa04:	621a      	str	r2, [r3, #32]
    hspi.Init.TIMode            = SPI_TIMODE_DISABLE;
 800aa06:	4b17      	ldr	r3, [pc, #92]	; (800aa64 <SPI_WIFI_Init+0xb4>)
 800aa08:	2200      	movs	r2, #0
 800aa0a:	625a      	str	r2, [r3, #36]	; 0x24
    hspi.Init.CRCCalculation    = SPI_CRCCALCULATION_DISABLE;
 800aa0c:	4b15      	ldr	r3, [pc, #84]	; (800aa64 <SPI_WIFI_Init+0xb4>)
 800aa0e:	2200      	movs	r2, #0
 800aa10:	629a      	str	r2, [r3, #40]	; 0x28
    hspi.Init.CRCPolynomial     = 0;
 800aa12:	4b14      	ldr	r3, [pc, #80]	; (800aa64 <SPI_WIFI_Init+0xb4>)
 800aa14:	2200      	movs	r2, #0
 800aa16:	62da      	str	r2, [r3, #44]	; 0x2c
  
    if(HAL_SPI_Init( &hspi ) != HAL_OK)
 800aa18:	4812      	ldr	r0, [pc, #72]	; (800aa64 <SPI_WIFI_Init+0xb4>)
 800aa1a:	f7fb fabd 	bl	8005f98 <HAL_SPI_Init>
 800aa1e:	4603      	mov	r3, r0
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	d002      	beq.n	800aa2a <SPI_WIFI_Init+0x7a>
    {
      return -1;
 800aa24:	f04f 33ff 	mov.w	r3, #4294967295
 800aa28:	e018      	b.n	800aa5c <SPI_WIFI_Init+0xac>
    }

     /* Enable Interrupt for Data Ready pin , GPIO_PIN1 */
     HAL_NVIC_SetPriority((IRQn_Type)EXTI1_IRQn, SPI_INTERFACE_PRIO, 0x00);
 800aa2a:	2200      	movs	r2, #0
 800aa2c:	2100      	movs	r1, #0
 800aa2e:	2007      	movs	r0, #7
 800aa30:	f7f7 ffda 	bl	80029e8 <HAL_NVIC_SetPriority>
     HAL_NVIC_EnableIRQ((IRQn_Type)EXTI1_IRQn);
 800aa34:	2007      	movs	r0, #7
 800aa36:	f7f7 fff3 	bl	8002a20 <HAL_NVIC_EnableIRQ>
     
     /* Enable Interrupt for SPI tx and rx */
     HAL_NVIC_SetPriority((IRQn_Type)SPI3_IRQn, SPI_INTERFACE_PRIO, 0);
 800aa3a:	2200      	movs	r2, #0
 800aa3c:	2100      	movs	r1, #0
 800aa3e:	2033      	movs	r0, #51	; 0x33
 800aa40:	f7f7 ffd2 	bl	80029e8 <HAL_NVIC_SetPriority>
     HAL_NVIC_EnableIRQ((IRQn_Type)SPI3_IRQn);
 800aa44:	2033      	movs	r0, #51	; 0x33
 800aa46:	f7f7 ffeb 	bl	8002a20 <HAL_NVIC_EnableIRQ>
    SEM_WAIT(spi_rx_sem, 1);
    SEM_WAIT(spi_tx_sem, 1);

#endif
    /* first call used for calibration */
    SPI_WIFI_DelayUs(10);
 800aa4a:	200a      	movs	r0, #10
 800aa4c:	f000 f9fe 	bl	800ae4c <SPI_WIFI_DelayUs>
  }
  
  rc= SPI_WIFI_ResetModule();
 800aa50:	f000 f80c 	bl	800aa6c <SPI_WIFI_ResetModule>
 800aa54:	4603      	mov	r3, r0
 800aa56:	73fb      	strb	r3, [r7, #15]

  return rc;
 800aa58:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800aa5c:	4618      	mov	r0, r3
 800aa5e:	3710      	adds	r7, #16
 800aa60:	46bd      	mov	sp, r7
 800aa62:	bd80      	pop	{r7, pc}
 800aa64:	20000c90 	.word	0x20000c90
 800aa68:	40003c00 	.word	0x40003c00

0800aa6c <SPI_WIFI_ResetModule>:


int8_t SPI_WIFI_ResetModule(void)
{
 800aa6c:	b580      	push	{r7, lr}
 800aa6e:	b084      	sub	sp, #16
 800aa70:	af00      	add	r7, sp, #0
  uint32_t tickstart = HAL_GetTick();
 800aa72:	f7f7 fead 	bl	80027d0 <HAL_GetTick>
 800aa76:	60b8      	str	r0, [r7, #8]
  uint8_t Prompt[6];
  uint8_t count = 0;
 800aa78:	2300      	movs	r3, #0
 800aa7a:	73fb      	strb	r3, [r7, #15]
  HAL_StatusTypeDef  Status;
 
  WIFI_RESET_MODULE();
 800aa7c:	2200      	movs	r2, #0
 800aa7e:	f44f 7180 	mov.w	r1, #256	; 0x100
 800aa82:	4830      	ldr	r0, [pc, #192]	; (800ab44 <SPI_WIFI_ResetModule+0xd8>)
 800aa84:	f7f8 fc2a 	bl	80032dc <HAL_GPIO_WritePin>
 800aa88:	200a      	movs	r0, #10
 800aa8a:	f7f7 fead 	bl	80027e8 <HAL_Delay>
 800aa8e:	2201      	movs	r2, #1
 800aa90:	f44f 7180 	mov.w	r1, #256	; 0x100
 800aa94:	482b      	ldr	r0, [pc, #172]	; (800ab44 <SPI_WIFI_ResetModule+0xd8>)
 800aa96:	f7f8 fc21 	bl	80032dc <HAL_GPIO_WritePin>
 800aa9a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800aa9e:	f7f7 fea3 	bl	80027e8 <HAL_Delay>
  WIFI_ENABLE_NSS(); 
 800aaa2:	2200      	movs	r2, #0
 800aaa4:	2101      	movs	r1, #1
 800aaa6:	4827      	ldr	r0, [pc, #156]	; (800ab44 <SPI_WIFI_ResetModule+0xd8>)
 800aaa8:	f7f8 fc18 	bl	80032dc <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(15);
 800aaac:	200f      	movs	r0, #15
 800aaae:	f000 f9cd 	bl	800ae4c <SPI_WIFI_DelayUs>
 
  while (WIFI_IS_CMDDATA_READY())
 800aab2:	e020      	b.n	800aaf6 <SPI_WIFI_ResetModule+0x8a>
  {
    Status = HAL_SPI_Receive(&hspi , &Prompt[count], 1, 0xFFFF);
 800aab4:	7bfb      	ldrb	r3, [r7, #15]
 800aab6:	463a      	mov	r2, r7
 800aab8:	18d1      	adds	r1, r2, r3
 800aaba:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800aabe:	2201      	movs	r2, #1
 800aac0:	4821      	ldr	r0, [pc, #132]	; (800ab48 <SPI_WIFI_ResetModule+0xdc>)
 800aac2:	f7fb fb34 	bl	800612e <HAL_SPI_Receive>
 800aac6:	4603      	mov	r3, r0
 800aac8:	71fb      	strb	r3, [r7, #7]
    count += 2;
 800aaca:	7bfb      	ldrb	r3, [r7, #15]
 800aacc:	3302      	adds	r3, #2
 800aace:	73fb      	strb	r3, [r7, #15]
    if(((HAL_GetTick() - tickstart ) > 0xFFFF) || (Status != HAL_OK))
 800aad0:	f7f7 fe7e 	bl	80027d0 <HAL_GetTick>
 800aad4:	4602      	mov	r2, r0
 800aad6:	68bb      	ldr	r3, [r7, #8]
 800aad8:	1ad3      	subs	r3, r2, r3
 800aada:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aade:	d202      	bcs.n	800aae6 <SPI_WIFI_ResetModule+0x7a>
 800aae0:	79fb      	ldrb	r3, [r7, #7]
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	d007      	beq.n	800aaf6 <SPI_WIFI_ResetModule+0x8a>
    {
      WIFI_DISABLE_NSS();
 800aae6:	2201      	movs	r2, #1
 800aae8:	2101      	movs	r1, #1
 800aaea:	4816      	ldr	r0, [pc, #88]	; (800ab44 <SPI_WIFI_ResetModule+0xd8>)
 800aaec:	f7f8 fbf6 	bl	80032dc <HAL_GPIO_WritePin>
      return -1;
 800aaf0:	f04f 33ff 	mov.w	r3, #4294967295
 800aaf4:	e021      	b.n	800ab3a <SPI_WIFI_ResetModule+0xce>
  while (WIFI_IS_CMDDATA_READY())
 800aaf6:	2102      	movs	r1, #2
 800aaf8:	4812      	ldr	r0, [pc, #72]	; (800ab44 <SPI_WIFI_ResetModule+0xd8>)
 800aafa:	f7f8 fbd7 	bl	80032ac <HAL_GPIO_ReadPin>
 800aafe:	4603      	mov	r3, r0
 800ab00:	2b01      	cmp	r3, #1
 800ab02:	d0d7      	beq.n	800aab4 <SPI_WIFI_ResetModule+0x48>
    }    
  }
  
  WIFI_DISABLE_NSS();
 800ab04:	2201      	movs	r2, #1
 800ab06:	2101      	movs	r1, #1
 800ab08:	480e      	ldr	r0, [pc, #56]	; (800ab44 <SPI_WIFI_ResetModule+0xd8>)
 800ab0a:	f7f8 fbe7 	bl	80032dc <HAL_GPIO_WritePin>
  if((Prompt[0] != 0x15) ||(Prompt[1] != 0x15) ||(Prompt[2] != '\r')||
 800ab0e:	783b      	ldrb	r3, [r7, #0]
 800ab10:	2b15      	cmp	r3, #21
 800ab12:	d10e      	bne.n	800ab32 <SPI_WIFI_ResetModule+0xc6>
 800ab14:	787b      	ldrb	r3, [r7, #1]
 800ab16:	2b15      	cmp	r3, #21
 800ab18:	d10b      	bne.n	800ab32 <SPI_WIFI_ResetModule+0xc6>
 800ab1a:	78bb      	ldrb	r3, [r7, #2]
 800ab1c:	2b0d      	cmp	r3, #13
 800ab1e:	d108      	bne.n	800ab32 <SPI_WIFI_ResetModule+0xc6>
       (Prompt[3] != '\n') ||(Prompt[4] != '>') ||(Prompt[5] != ' '))
 800ab20:	78fb      	ldrb	r3, [r7, #3]
  if((Prompt[0] != 0x15) ||(Prompt[1] != 0x15) ||(Prompt[2] != '\r')||
 800ab22:	2b0a      	cmp	r3, #10
 800ab24:	d105      	bne.n	800ab32 <SPI_WIFI_ResetModule+0xc6>
       (Prompt[3] != '\n') ||(Prompt[4] != '>') ||(Prompt[5] != ' '))
 800ab26:	793b      	ldrb	r3, [r7, #4]
 800ab28:	2b3e      	cmp	r3, #62	; 0x3e
 800ab2a:	d102      	bne.n	800ab32 <SPI_WIFI_ResetModule+0xc6>
 800ab2c:	797b      	ldrb	r3, [r7, #5]
 800ab2e:	2b20      	cmp	r3, #32
 800ab30:	d002      	beq.n	800ab38 <SPI_WIFI_ResetModule+0xcc>
  {
    return -1;
 800ab32:	f04f 33ff 	mov.w	r3, #4294967295
 800ab36:	e000      	b.n	800ab3a <SPI_WIFI_ResetModule+0xce>
  }    
  return 0;
 800ab38:	2300      	movs	r3, #0
}
 800ab3a:	4618      	mov	r0, r3
 800ab3c:	3710      	adds	r7, #16
 800ab3e:	46bd      	mov	sp, r7
 800ab40:	bd80      	pop	{r7, pc}
 800ab42:	bf00      	nop
 800ab44:	48001000 	.word	0x48001000
 800ab48:	20000c90 	.word	0x20000c90

0800ab4c <SPI_WIFI_DeInit>:
  * @brief  DeInitialize the SPI
  * @param  None
  * @retval None
  */
int8_t SPI_WIFI_DeInit(void)
{
 800ab4c:	b580      	push	{r7, lr}
 800ab4e:	af00      	add	r7, sp, #0
  HAL_SPI_DeInit( &hspi );
 800ab50:	4802      	ldr	r0, [pc, #8]	; (800ab5c <SPI_WIFI_DeInit+0x10>)
 800ab52:	f7fb fac4 	bl	80060de <HAL_SPI_DeInit>
  osMutexDelete(es_wifi_mutex);
  osSemaphoreDelete(spi_tx_sem);
  osSemaphoreDelete(spi_rx_sem);
  osSemaphoreDelete(cmddata_rdy_rising_sem);
#endif
  return 0;
 800ab56:	2300      	movs	r3, #0
}
 800ab58:	4618      	mov	r0, r3
 800ab5a:	bd80      	pop	{r7, pc}
 800ab5c:	20000c90 	.word	0x20000c90

0800ab60 <wait_cmddata_rdy_high>:
  * @param  timeout : send timeout in mS
  * @retval Length of received data (payload)
  */

int wait_cmddata_rdy_high(int timeout)
{
 800ab60:	b580      	push	{r7, lr}
 800ab62:	b084      	sub	sp, #16
 800ab64:	af00      	add	r7, sp, #0
 800ab66:	6078      	str	r0, [r7, #4]
  int tickstart = HAL_GetTick();
 800ab68:	f7f7 fe32 	bl	80027d0 <HAL_GetTick>
 800ab6c:	4603      	mov	r3, r0
 800ab6e:	60fb      	str	r3, [r7, #12]
  while (WIFI_IS_CMDDATA_READY()==0)
 800ab70:	e00a      	b.n	800ab88 <wait_cmddata_rdy_high+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 800ab72:	f7f7 fe2d 	bl	80027d0 <HAL_GetTick>
 800ab76:	4602      	mov	r2, r0
 800ab78:	68fb      	ldr	r3, [r7, #12]
 800ab7a:	1ad2      	subs	r2, r2, r3
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	429a      	cmp	r2, r3
 800ab80:	d902      	bls.n	800ab88 <wait_cmddata_rdy_high+0x28>
    {
      return -1;
 800ab82:	f04f 33ff 	mov.w	r3, #4294967295
 800ab86:	e007      	b.n	800ab98 <wait_cmddata_rdy_high+0x38>
  while (WIFI_IS_CMDDATA_READY()==0)
 800ab88:	2102      	movs	r1, #2
 800ab8a:	4805      	ldr	r0, [pc, #20]	; (800aba0 <wait_cmddata_rdy_high+0x40>)
 800ab8c:	f7f8 fb8e 	bl	80032ac <HAL_GPIO_ReadPin>
 800ab90:	4603      	mov	r3, r0
 800ab92:	2b01      	cmp	r3, #1
 800ab94:	d1ed      	bne.n	800ab72 <wait_cmddata_rdy_high+0x12>
    }
  }
  return 0;
 800ab96:	2300      	movs	r3, #0
}
 800ab98:	4618      	mov	r0, r3
 800ab9a:	3710      	adds	r7, #16
 800ab9c:	46bd      	mov	sp, r7
 800ab9e:	bd80      	pop	{r7, pc}
 800aba0:	48001000 	.word	0x48001000

0800aba4 <wait_cmddata_rdy_rising_event>:



int wait_cmddata_rdy_rising_event(int timeout)
{
 800aba4:	b580      	push	{r7, lr}
 800aba6:	b084      	sub	sp, #16
 800aba8:	af00      	add	r7, sp, #0
 800abaa:	6078      	str	r0, [r7, #4]
#ifdef SEM_WAIT
   return SEM_WAIT(cmddata_rdy_rising_sem, timeout);
#else
  int tickstart = HAL_GetTick();
 800abac:	f7f7 fe10 	bl	80027d0 <HAL_GetTick>
 800abb0:	4603      	mov	r3, r0
 800abb2:	60fb      	str	r3, [r7, #12]
  while (cmddata_rdy_rising_event==1)
 800abb4:	e00a      	b.n	800abcc <wait_cmddata_rdy_rising_event+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 800abb6:	f7f7 fe0b 	bl	80027d0 <HAL_GetTick>
 800abba:	4602      	mov	r2, r0
 800abbc:	68fb      	ldr	r3, [r7, #12]
 800abbe:	1ad2      	subs	r2, r2, r3
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	429a      	cmp	r2, r3
 800abc4:	d902      	bls.n	800abcc <wait_cmddata_rdy_rising_event+0x28>
    {
      return -1;
 800abc6:	f04f 33ff 	mov.w	r3, #4294967295
 800abca:	e004      	b.n	800abd6 <wait_cmddata_rdy_rising_event+0x32>
  while (cmddata_rdy_rising_event==1)
 800abcc:	4b04      	ldr	r3, [pc, #16]	; (800abe0 <wait_cmddata_rdy_rising_event+0x3c>)
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	2b01      	cmp	r3, #1
 800abd2:	d0f0      	beq.n	800abb6 <wait_cmddata_rdy_rising_event+0x12>
    }
  }
  return 0;
 800abd4:	2300      	movs	r3, #0
#endif
}
 800abd6:	4618      	mov	r0, r3
 800abd8:	3710      	adds	r7, #16
 800abda:	46bd      	mov	sp, r7
 800abdc:	bd80      	pop	{r7, pc}
 800abde:	bf00      	nop
 800abe0:	20000cfc 	.word	0x20000cfc

0800abe4 <wait_spi_rx_event>:

int wait_spi_rx_event(int timeout)
{
 800abe4:	b580      	push	{r7, lr}
 800abe6:	b084      	sub	sp, #16
 800abe8:	af00      	add	r7, sp, #0
 800abea:	6078      	str	r0, [r7, #4]
#ifdef SEM_WAIT
   return SEM_WAIT(spi_rx_sem, timeout);
#else
  int tickstart = HAL_GetTick();
 800abec:	f7f7 fdf0 	bl	80027d0 <HAL_GetTick>
 800abf0:	4603      	mov	r3, r0
 800abf2:	60fb      	str	r3, [r7, #12]
  while (spi_rx_event==1)
 800abf4:	e00a      	b.n	800ac0c <wait_spi_rx_event+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 800abf6:	f7f7 fdeb 	bl	80027d0 <HAL_GetTick>
 800abfa:	4602      	mov	r2, r0
 800abfc:	68fb      	ldr	r3, [r7, #12]
 800abfe:	1ad2      	subs	r2, r2, r3
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	429a      	cmp	r2, r3
 800ac04:	d902      	bls.n	800ac0c <wait_spi_rx_event+0x28>
    {
      return -1;
 800ac06:	f04f 33ff 	mov.w	r3, #4294967295
 800ac0a:	e004      	b.n	800ac16 <wait_spi_rx_event+0x32>
  while (spi_rx_event==1)
 800ac0c:	4b04      	ldr	r3, [pc, #16]	; (800ac20 <wait_spi_rx_event+0x3c>)
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	2b01      	cmp	r3, #1
 800ac12:	d0f0      	beq.n	800abf6 <wait_spi_rx_event+0x12>
    }
  }
  return 0;
 800ac14:	2300      	movs	r3, #0
#endif
}
 800ac16:	4618      	mov	r0, r3
 800ac18:	3710      	adds	r7, #16
 800ac1a:	46bd      	mov	sp, r7
 800ac1c:	bd80      	pop	{r7, pc}
 800ac1e:	bf00      	nop
 800ac20:	20000cf4 	.word	0x20000cf4

0800ac24 <wait_spi_tx_event>:

int wait_spi_tx_event(int timeout)
{
 800ac24:	b580      	push	{r7, lr}
 800ac26:	b084      	sub	sp, #16
 800ac28:	af00      	add	r7, sp, #0
 800ac2a:	6078      	str	r0, [r7, #4]
#ifdef SEM_WAIT
   return SEM_WAIT(spi_tx_sem, timeout);
#else
  int tickstart = HAL_GetTick();
 800ac2c:	f7f7 fdd0 	bl	80027d0 <HAL_GetTick>
 800ac30:	4603      	mov	r3, r0
 800ac32:	60fb      	str	r3, [r7, #12]
  while (spi_tx_event==1)
 800ac34:	e00a      	b.n	800ac4c <wait_spi_tx_event+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 800ac36:	f7f7 fdcb 	bl	80027d0 <HAL_GetTick>
 800ac3a:	4602      	mov	r2, r0
 800ac3c:	68fb      	ldr	r3, [r7, #12]
 800ac3e:	1ad2      	subs	r2, r2, r3
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	429a      	cmp	r2, r3
 800ac44:	d902      	bls.n	800ac4c <wait_spi_tx_event+0x28>
    {
      return -1;
 800ac46:	f04f 33ff 	mov.w	r3, #4294967295
 800ac4a:	e004      	b.n	800ac56 <wait_spi_tx_event+0x32>
  while (spi_tx_event==1)
 800ac4c:	4b04      	ldr	r3, [pc, #16]	; (800ac60 <wait_spi_tx_event+0x3c>)
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	2b01      	cmp	r3, #1
 800ac52:	d0f0      	beq.n	800ac36 <wait_spi_tx_event+0x12>
    }
  }
  return 0;
 800ac54:	2300      	movs	r3, #0
#endif
}
 800ac56:	4618      	mov	r0, r3
 800ac58:	3710      	adds	r7, #16
 800ac5a:	46bd      	mov	sp, r7
 800ac5c:	bd80      	pop	{r7, pc}
 800ac5e:	bf00      	nop
 800ac60:	20000cf8 	.word	0x20000cf8

0800ac64 <SPI_WIFI_ReceiveData>:



int16_t SPI_WIFI_ReceiveData(uint8_t *pData, uint16_t len, uint32_t timeout)
{
 800ac64:	b580      	push	{r7, lr}
 800ac66:	b086      	sub	sp, #24
 800ac68:	af00      	add	r7, sp, #0
 800ac6a:	60f8      	str	r0, [r7, #12]
 800ac6c:	460b      	mov	r3, r1
 800ac6e:	607a      	str	r2, [r7, #4]
 800ac70:	817b      	strh	r3, [r7, #10]
  int16_t length = 0;
 800ac72:	2300      	movs	r3, #0
 800ac74:	82fb      	strh	r3, [r7, #22]
  uint8_t tmp[2];
  
  WIFI_DISABLE_NSS();
 800ac76:	2201      	movs	r2, #1
 800ac78:	2101      	movs	r1, #1
 800ac7a:	4834      	ldr	r0, [pc, #208]	; (800ad4c <SPI_WIFI_ReceiveData+0xe8>)
 800ac7c:	f7f8 fb2e 	bl	80032dc <HAL_GPIO_WritePin>
  UNLOCK_SPI();
  SPI_WIFI_DelayUs(3);
 800ac80:	2003      	movs	r0, #3
 800ac82:	f000 f8e3 	bl	800ae4c <SPI_WIFI_DelayUs>


  if (wait_cmddata_rdy_rising_event(timeout)<0)
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	4618      	mov	r0, r3
 800ac8a:	f7ff ff8b 	bl	800aba4 <wait_cmddata_rdy_rising_event>
 800ac8e:	4603      	mov	r3, r0
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	da02      	bge.n	800ac9a <SPI_WIFI_ReceiveData+0x36>
  {
      return ES_WIFI_ERROR_WAITING_DRDY_FALLING;
 800ac94:	f06f 0302 	mvn.w	r3, #2
 800ac98:	e054      	b.n	800ad44 <SPI_WIFI_ReceiveData+0xe0>
  }

  LOCK_SPI();
  WIFI_ENABLE_NSS();
 800ac9a:	2200      	movs	r2, #0
 800ac9c:	2101      	movs	r1, #1
 800ac9e:	482b      	ldr	r0, [pc, #172]	; (800ad4c <SPI_WIFI_ReceiveData+0xe8>)
 800aca0:	f7f8 fb1c 	bl	80032dc <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(15);
 800aca4:	200f      	movs	r0, #15
 800aca6:	f000 f8d1 	bl	800ae4c <SPI_WIFI_DelayUs>
  while (WIFI_IS_CMDDATA_READY())
 800acaa:	e03d      	b.n	800ad28 <SPI_WIFI_ReceiveData+0xc4>
  {
    if((length < len) || (!len))
 800acac:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800acb0:	897b      	ldrh	r3, [r7, #10]
 800acb2:	429a      	cmp	r2, r3
 800acb4:	db02      	blt.n	800acbc <SPI_WIFI_ReceiveData+0x58>
 800acb6:	897b      	ldrh	r3, [r7, #10]
 800acb8:	2b00      	cmp	r3, #0
 800acba:	d13c      	bne.n	800ad36 <SPI_WIFI_ReceiveData+0xd2>
    {
      spi_rx_event=1;
 800acbc:	4b24      	ldr	r3, [pc, #144]	; (800ad50 <SPI_WIFI_ReceiveData+0xec>)
 800acbe:	2201      	movs	r2, #1
 800acc0:	601a      	str	r2, [r3, #0]
      if (HAL_SPI_Receive_IT(&hspi, tmp, 1) != HAL_OK) {
 800acc2:	f107 0314 	add.w	r3, r7, #20
 800acc6:	2201      	movs	r2, #1
 800acc8:	4619      	mov	r1, r3
 800acca:	4822      	ldr	r0, [pc, #136]	; (800ad54 <SPI_WIFI_ReceiveData+0xf0>)
 800accc:	f7fb fe00 	bl	80068d0 <HAL_SPI_Receive_IT>
 800acd0:	4603      	mov	r3, r0
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	d007      	beq.n	800ace6 <SPI_WIFI_ReceiveData+0x82>
        WIFI_DISABLE_NSS();
 800acd6:	2201      	movs	r2, #1
 800acd8:	2101      	movs	r1, #1
 800acda:	481c      	ldr	r0, [pc, #112]	; (800ad4c <SPI_WIFI_ReceiveData+0xe8>)
 800acdc:	f7f8 fafe 	bl	80032dc <HAL_GPIO_WritePin>
        UNLOCK_SPI();
        return ES_WIFI_ERROR_SPI_FAILED;
 800ace0:	f04f 33ff 	mov.w	r3, #4294967295
 800ace4:	e02e      	b.n	800ad44 <SPI_WIFI_ReceiveData+0xe0>
      }
  
      wait_spi_rx_event(timeout);
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	4618      	mov	r0, r3
 800acea:	f7ff ff7b 	bl	800abe4 <wait_spi_rx_event>

      pData[0] = tmp[0];
 800acee:	7d3a      	ldrb	r2, [r7, #20]
 800acf0:	68fb      	ldr	r3, [r7, #12]
 800acf2:	701a      	strb	r2, [r3, #0]
      pData[1] = tmp[1];
 800acf4:	68fb      	ldr	r3, [r7, #12]
 800acf6:	3301      	adds	r3, #1
 800acf8:	7d7a      	ldrb	r2, [r7, #21]
 800acfa:	701a      	strb	r2, [r3, #0]
      length += 2;
 800acfc:	8afb      	ldrh	r3, [r7, #22]
 800acfe:	3302      	adds	r3, #2
 800ad00:	b29b      	uxth	r3, r3
 800ad02:	82fb      	strh	r3, [r7, #22]
      pData  += 2;
 800ad04:	68fb      	ldr	r3, [r7, #12]
 800ad06:	3302      	adds	r3, #2
 800ad08:	60fb      	str	r3, [r7, #12]
      
      if (length >= ES_WIFI_DATA_SIZE) {
 800ad0a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800ad0e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800ad12:	db09      	blt.n	800ad28 <SPI_WIFI_ReceiveData+0xc4>
        WIFI_DISABLE_NSS();
 800ad14:	2201      	movs	r2, #1
 800ad16:	2101      	movs	r1, #1
 800ad18:	480c      	ldr	r0, [pc, #48]	; (800ad4c <SPI_WIFI_ReceiveData+0xe8>)
 800ad1a:	f7f8 fadf 	bl	80032dc <HAL_GPIO_WritePin>
        SPI_WIFI_ResetModule();
 800ad1e:	f7ff fea5 	bl	800aa6c <SPI_WIFI_ResetModule>
        UNLOCK_SPI();
        return ES_WIFI_ERROR_STUFFING_FOREVER;
 800ad22:	f06f 0303 	mvn.w	r3, #3
 800ad26:	e00d      	b.n	800ad44 <SPI_WIFI_ReceiveData+0xe0>
  while (WIFI_IS_CMDDATA_READY())
 800ad28:	2102      	movs	r1, #2
 800ad2a:	4808      	ldr	r0, [pc, #32]	; (800ad4c <SPI_WIFI_ReceiveData+0xe8>)
 800ad2c:	f7f8 fabe 	bl	80032ac <HAL_GPIO_ReadPin>
 800ad30:	4603      	mov	r3, r0
 800ad32:	2b01      	cmp	r3, #1
 800ad34:	d0ba      	beq.n	800acac <SPI_WIFI_ReceiveData+0x48>
    else
    {
      break;
    }
  }
  WIFI_DISABLE_NSS();
 800ad36:	2201      	movs	r2, #1
 800ad38:	2101      	movs	r1, #1
 800ad3a:	4804      	ldr	r0, [pc, #16]	; (800ad4c <SPI_WIFI_ReceiveData+0xe8>)
 800ad3c:	f7f8 face 	bl	80032dc <HAL_GPIO_WritePin>
  UNLOCK_SPI();
  return length;
 800ad40:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 800ad44:	4618      	mov	r0, r3
 800ad46:	3718      	adds	r7, #24
 800ad48:	46bd      	mov	sp, r7
 800ad4a:	bd80      	pop	{r7, pc}
 800ad4c:	48001000 	.word	0x48001000
 800ad50:	20000cf4 	.word	0x20000cf4
 800ad54:	20000c90 	.word	0x20000c90

0800ad58 <SPI_WIFI_SendData>:
  * @param  len : Data length
  * @param  timeout : send timeout in mS
  * @retval Length of sent data
  */
int16_t SPI_WIFI_SendData( uint8_t *pdata,  uint16_t len, uint32_t timeout)
{
 800ad58:	b580      	push	{r7, lr}
 800ad5a:	b086      	sub	sp, #24
 800ad5c:	af00      	add	r7, sp, #0
 800ad5e:	60f8      	str	r0, [r7, #12]
 800ad60:	460b      	mov	r3, r1
 800ad62:	607a      	str	r2, [r7, #4]
 800ad64:	817b      	strh	r3, [r7, #10]
  uint8_t Padding[2];
  
  if (wait_cmddata_rdy_high(timeout)<0)
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	4618      	mov	r0, r3
 800ad6a:	f7ff fef9 	bl	800ab60 <wait_cmddata_rdy_high>
 800ad6e:	4603      	mov	r3, r0
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	da02      	bge.n	800ad7a <SPI_WIFI_SendData+0x22>
  {
    return ES_WIFI_ERROR_SPI_FAILED;
 800ad74:	f04f 33ff 	mov.w	r3, #4294967295
 800ad78:	e04f      	b.n	800ae1a <SPI_WIFI_SendData+0xc2>
  }
    
  /* arm to detect rising event */
  cmddata_rdy_rising_event=1;
 800ad7a:	4b2a      	ldr	r3, [pc, #168]	; (800ae24 <SPI_WIFI_SendData+0xcc>)
 800ad7c:	2201      	movs	r2, #1
 800ad7e:	601a      	str	r2, [r3, #0]
  LOCK_SPI();
  WIFI_ENABLE_NSS();
 800ad80:	2200      	movs	r2, #0
 800ad82:	2101      	movs	r1, #1
 800ad84:	4828      	ldr	r0, [pc, #160]	; (800ae28 <SPI_WIFI_SendData+0xd0>)
 800ad86:	f7f8 faa9 	bl	80032dc <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(15);
 800ad8a:	200f      	movs	r0, #15
 800ad8c:	f000 f85e 	bl	800ae4c <SPI_WIFI_DelayUs>
  if (len > 1)
 800ad90:	897b      	ldrh	r3, [r7, #10]
 800ad92:	2b01      	cmp	r3, #1
 800ad94:	d919      	bls.n	800adca <SPI_WIFI_SendData+0x72>
  {
    spi_tx_event=1;
 800ad96:	4b25      	ldr	r3, [pc, #148]	; (800ae2c <SPI_WIFI_SendData+0xd4>)
 800ad98:	2201      	movs	r2, #1
 800ad9a:	601a      	str	r2, [r3, #0]
    if( HAL_SPI_Transmit_IT(&hspi, (uint8_t *)pdata , len/2) != HAL_OK)
 800ad9c:	897b      	ldrh	r3, [r7, #10]
 800ad9e:	085b      	lsrs	r3, r3, #1
 800ada0:	b29b      	uxth	r3, r3
 800ada2:	461a      	mov	r2, r3
 800ada4:	68f9      	ldr	r1, [r7, #12]
 800ada6:	4822      	ldr	r0, [pc, #136]	; (800ae30 <SPI_WIFI_SendData+0xd8>)
 800ada8:	f7fb fd04 	bl	80067b4 <HAL_SPI_Transmit_IT>
 800adac:	4603      	mov	r3, r0
 800adae:	2b00      	cmp	r3, #0
 800adb0:	d007      	beq.n	800adc2 <SPI_WIFI_SendData+0x6a>
    {
      WIFI_DISABLE_NSS();
 800adb2:	2201      	movs	r2, #1
 800adb4:	2101      	movs	r1, #1
 800adb6:	481c      	ldr	r0, [pc, #112]	; (800ae28 <SPI_WIFI_SendData+0xd0>)
 800adb8:	f7f8 fa90 	bl	80032dc <HAL_GPIO_WritePin>
      UNLOCK_SPI();
      return ES_WIFI_ERROR_SPI_FAILED;
 800adbc:	f04f 33ff 	mov.w	r3, #4294967295
 800adc0:	e02b      	b.n	800ae1a <SPI_WIFI_SendData+0xc2>
    }
    wait_spi_tx_event(timeout);
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	4618      	mov	r0, r3
 800adc6:	f7ff ff2d 	bl	800ac24 <wait_spi_tx_event>
  }
  
  if ( len & 1)
 800adca:	897b      	ldrh	r3, [r7, #10]
 800adcc:	f003 0301 	and.w	r3, r3, #1
 800add0:	2b00      	cmp	r3, #0
 800add2:	d020      	beq.n	800ae16 <SPI_WIFI_SendData+0xbe>
  {
    Padding[0] = pdata[len-1];
 800add4:	897b      	ldrh	r3, [r7, #10]
 800add6:	3b01      	subs	r3, #1
 800add8:	68fa      	ldr	r2, [r7, #12]
 800adda:	4413      	add	r3, r2
 800addc:	781b      	ldrb	r3, [r3, #0]
 800adde:	753b      	strb	r3, [r7, #20]
    Padding[1] = '\n';
 800ade0:	230a      	movs	r3, #10
 800ade2:	757b      	strb	r3, [r7, #21]

    spi_tx_event=1;
 800ade4:	4b11      	ldr	r3, [pc, #68]	; (800ae2c <SPI_WIFI_SendData+0xd4>)
 800ade6:	2201      	movs	r2, #1
 800ade8:	601a      	str	r2, [r3, #0]
    if( HAL_SPI_Transmit_IT(&hspi, Padding, 1) != HAL_OK)
 800adea:	f107 0314 	add.w	r3, r7, #20
 800adee:	2201      	movs	r2, #1
 800adf0:	4619      	mov	r1, r3
 800adf2:	480f      	ldr	r0, [pc, #60]	; (800ae30 <SPI_WIFI_SendData+0xd8>)
 800adf4:	f7fb fcde 	bl	80067b4 <HAL_SPI_Transmit_IT>
 800adf8:	4603      	mov	r3, r0
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	d007      	beq.n	800ae0e <SPI_WIFI_SendData+0xb6>
    {
      WIFI_DISABLE_NSS();
 800adfe:	2201      	movs	r2, #1
 800ae00:	2101      	movs	r1, #1
 800ae02:	4809      	ldr	r0, [pc, #36]	; (800ae28 <SPI_WIFI_SendData+0xd0>)
 800ae04:	f7f8 fa6a 	bl	80032dc <HAL_GPIO_WritePin>
      UNLOCK_SPI();
      return ES_WIFI_ERROR_SPI_FAILED;
 800ae08:	f04f 33ff 	mov.w	r3, #4294967295
 800ae0c:	e005      	b.n	800ae1a <SPI_WIFI_SendData+0xc2>
    }  
    wait_spi_tx_event(timeout);
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	4618      	mov	r0, r3
 800ae12:	f7ff ff07 	bl	800ac24 <wait_spi_tx_event>
    
  }
  return len;
 800ae16:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
}
 800ae1a:	4618      	mov	r0, r3
 800ae1c:	3718      	adds	r7, #24
 800ae1e:	46bd      	mov	sp, r7
 800ae20:	bd80      	pop	{r7, pc}
 800ae22:	bf00      	nop
 800ae24:	20000cfc 	.word	0x20000cfc
 800ae28:	48001000 	.word	0x48001000
 800ae2c:	20000cf8 	.word	0x20000cf8
 800ae30:	20000c90 	.word	0x20000c90

0800ae34 <SPI_WIFI_Delay>:
  * @brief  Delay
  * @param  Delay in ms
  * @retval None
  */
void SPI_WIFI_Delay(uint32_t Delay)
{
 800ae34:	b580      	push	{r7, lr}
 800ae36:	b082      	sub	sp, #8
 800ae38:	af00      	add	r7, sp, #0
 800ae3a:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800ae3c:	6878      	ldr	r0, [r7, #4]
 800ae3e:	f7f7 fcd3 	bl	80027e8 <HAL_Delay>
}
 800ae42:	bf00      	nop
 800ae44:	3708      	adds	r7, #8
 800ae46:	46bd      	mov	sp, r7
 800ae48:	bd80      	pop	{r7, pc}
	...

0800ae4c <SPI_WIFI_DelayUs>:
   * @brief  Delay
  * @param  Delay in us
  * @retval None
  */
void SPI_WIFI_DelayUs(uint32_t n)
{
 800ae4c:	b580      	push	{r7, lr}
 800ae4e:	b086      	sub	sp, #24
 800ae50:	af00      	add	r7, sp, #0
 800ae52:	6078      	str	r0, [r7, #4]
  volatile        uint32_t ct = 0;
 800ae54:	2300      	movs	r3, #0
 800ae56:	60bb      	str	r3, [r7, #8]
  uint32_t        loop_per_us = 0;
 800ae58:	2300      	movs	r3, #0
 800ae5a:	617b      	str	r3, [r7, #20]
  static uint32_t cycle_per_loop = 0;

  /* calibration happen on first call for a duration of 1 ms * nbcycle per loop */
  /* 10 cycle for STM32L4 */
  if (cycle_per_loop == 0 ) 
 800ae5c:	4b20      	ldr	r3, [pc, #128]	; (800aee0 <SPI_WIFI_DelayUs+0x94>)
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d122      	bne.n	800aeaa <SPI_WIFI_DelayUs+0x5e>
  {
     uint32_t cycle_per_ms = (SystemCoreClock/1000UL);
 800ae64:	4b1f      	ldr	r3, [pc, #124]	; (800aee4 <SPI_WIFI_DelayUs+0x98>)
 800ae66:	681b      	ldr	r3, [r3, #0]
 800ae68:	4a1f      	ldr	r2, [pc, #124]	; (800aee8 <SPI_WIFI_DelayUs+0x9c>)
 800ae6a:	fba2 2303 	umull	r2, r3, r2, r3
 800ae6e:	099b      	lsrs	r3, r3, #6
 800ae70:	613b      	str	r3, [r7, #16]
     uint32_t t = 0;
 800ae72:	2300      	movs	r3, #0
 800ae74:	60fb      	str	r3, [r7, #12]
     ct = cycle_per_ms;
 800ae76:	693b      	ldr	r3, [r7, #16]
 800ae78:	60bb      	str	r3, [r7, #8]
     t = HAL_GetTick();
 800ae7a:	f7f7 fca9 	bl	80027d0 <HAL_GetTick>
 800ae7e:	60f8      	str	r0, [r7, #12]
     while(ct) ct--;
 800ae80:	e002      	b.n	800ae88 <SPI_WIFI_DelayUs+0x3c>
 800ae82:	68bb      	ldr	r3, [r7, #8]
 800ae84:	3b01      	subs	r3, #1
 800ae86:	60bb      	str	r3, [r7, #8]
 800ae88:	68bb      	ldr	r3, [r7, #8]
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	d1f9      	bne.n	800ae82 <SPI_WIFI_DelayUs+0x36>
     cycle_per_loop = HAL_GetTick()-t;
 800ae8e:	f7f7 fc9f 	bl	80027d0 <HAL_GetTick>
 800ae92:	4602      	mov	r2, r0
 800ae94:	68fb      	ldr	r3, [r7, #12]
 800ae96:	1ad3      	subs	r3, r2, r3
 800ae98:	4a11      	ldr	r2, [pc, #68]	; (800aee0 <SPI_WIFI_DelayUs+0x94>)
 800ae9a:	6013      	str	r3, [r2, #0]
     if (cycle_per_loop == 0) cycle_per_loop = 1;
 800ae9c:	4b10      	ldr	r3, [pc, #64]	; (800aee0 <SPI_WIFI_DelayUs+0x94>)
 800ae9e:	681b      	ldr	r3, [r3, #0]
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	d102      	bne.n	800aeaa <SPI_WIFI_DelayUs+0x5e>
 800aea4:	4b0e      	ldr	r3, [pc, #56]	; (800aee0 <SPI_WIFI_DelayUs+0x94>)
 800aea6:	2201      	movs	r2, #1
 800aea8:	601a      	str	r2, [r3, #0]
  }

  loop_per_us = SystemCoreClock/1000000UL/cycle_per_loop;
 800aeaa:	4b0e      	ldr	r3, [pc, #56]	; (800aee4 <SPI_WIFI_DelayUs+0x98>)
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	4a0f      	ldr	r2, [pc, #60]	; (800aeec <SPI_WIFI_DelayUs+0xa0>)
 800aeb0:	fba2 2303 	umull	r2, r3, r2, r3
 800aeb4:	0c9a      	lsrs	r2, r3, #18
 800aeb6:	4b0a      	ldr	r3, [pc, #40]	; (800aee0 <SPI_WIFI_DelayUs+0x94>)
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	fbb2 f3f3 	udiv	r3, r2, r3
 800aebe:	617b      	str	r3, [r7, #20]
  ct = n * loop_per_us;
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	697a      	ldr	r2, [r7, #20]
 800aec4:	fb02 f303 	mul.w	r3, r2, r3
 800aec8:	60bb      	str	r3, [r7, #8]
  while(ct) ct--;
 800aeca:	e002      	b.n	800aed2 <SPI_WIFI_DelayUs+0x86>
 800aecc:	68bb      	ldr	r3, [r7, #8]
 800aece:	3b01      	subs	r3, #1
 800aed0:	60bb      	str	r3, [r7, #8]
 800aed2:	68bb      	ldr	r3, [r7, #8]
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	d1f9      	bne.n	800aecc <SPI_WIFI_DelayUs+0x80>
  return;
 800aed8:	bf00      	nop
}
 800aeda:	3718      	adds	r7, #24
 800aedc:	46bd      	mov	sp, r7
 800aede:	bd80      	pop	{r7, pc}
 800aee0:	20000d00 	.word	0x20000d00
 800aee4:	20000010 	.word	0x20000010
 800aee8:	10624dd3 	.word	0x10624dd3
 800aeec:	431bde83 	.word	0x431bde83

0800aef0 <HAL_SPI_RxCpltCallback>:
  *               the configuration information for SPI module.
  * @retval None
  */

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800aef0:	b480      	push	{r7}
 800aef2:	b083      	sub	sp, #12
 800aef4:	af00      	add	r7, sp, #0
 800aef6:	6078      	str	r0, [r7, #4]
  if (spi_rx_event)
 800aef8:	4b06      	ldr	r3, [pc, #24]	; (800af14 <HAL_SPI_RxCpltCallback+0x24>)
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	d002      	beq.n	800af06 <HAL_SPI_RxCpltCallback+0x16>
  {
    SEM_SIGNAL(spi_rx_sem);
    spi_rx_event = 0;
 800af00:	4b04      	ldr	r3, [pc, #16]	; (800af14 <HAL_SPI_RxCpltCallback+0x24>)
 800af02:	2200      	movs	r2, #0
 800af04:	601a      	str	r2, [r3, #0]
  }
}
 800af06:	bf00      	nop
 800af08:	370c      	adds	r7, #12
 800af0a:	46bd      	mov	sp, r7
 800af0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af10:	4770      	bx	lr
 800af12:	bf00      	nop
 800af14:	20000cf4 	.word	0x20000cf4

0800af18 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800af18:	b480      	push	{r7}
 800af1a:	b083      	sub	sp, #12
 800af1c:	af00      	add	r7, sp, #0
 800af1e:	6078      	str	r0, [r7, #4]
  if (spi_tx_event)
 800af20:	4b06      	ldr	r3, [pc, #24]	; (800af3c <HAL_SPI_TxCpltCallback+0x24>)
 800af22:	681b      	ldr	r3, [r3, #0]
 800af24:	2b00      	cmp	r3, #0
 800af26:	d002      	beq.n	800af2e <HAL_SPI_TxCpltCallback+0x16>
  {
    SEM_SIGNAL(spi_tx_sem);
    spi_tx_event = 0;
 800af28:	4b04      	ldr	r3, [pc, #16]	; (800af3c <HAL_SPI_TxCpltCallback+0x24>)
 800af2a:	2200      	movs	r2, #0
 800af2c:	601a      	str	r2, [r3, #0]
  }
}
 800af2e:	bf00      	nop
 800af30:	370c      	adds	r7, #12
 800af32:	46bd      	mov	sp, r7
 800af34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af38:	4770      	bx	lr
 800af3a:	bf00      	nop
 800af3c:	20000cf8 	.word	0x20000cf8

0800af40 <SPI_WIFI_ISR>:
  * @brief  Interrupt handler for  Data RDY signal
  * @param  None
  * @retval None
  */
void    SPI_WIFI_ISR(void)
{
 800af40:	b480      	push	{r7}
 800af42:	af00      	add	r7, sp, #0
   if (cmddata_rdy_rising_event==1)  
 800af44:	4b05      	ldr	r3, [pc, #20]	; (800af5c <SPI_WIFI_ISR+0x1c>)
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	2b01      	cmp	r3, #1
 800af4a:	d102      	bne.n	800af52 <SPI_WIFI_ISR+0x12>
   {
     SEM_SIGNAL(cmddata_rdy_rising_sem);
     cmddata_rdy_rising_event = 0;
 800af4c:	4b03      	ldr	r3, [pc, #12]	; (800af5c <SPI_WIFI_ISR+0x1c>)
 800af4e:	2200      	movs	r2, #0
 800af50:	601a      	str	r2, [r3, #0]
   }
}
 800af52:	bf00      	nop
 800af54:	46bd      	mov	sp, r7
 800af56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af5a:	4770      	bx	lr
 800af5c:	20000cfc 	.word	0x20000cfc

0800af60 <WIFI_Init>:
  * @brief  Initialize the WIFI core
  * @param  None
  * @retval Operation status
  */
WIFI_Status_t WIFI_Init(void)
{
 800af60:	b580      	push	{r7, lr}
 800af62:	b084      	sub	sp, #16
 800af64:	af02      	add	r7, sp, #8
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 800af66:	2301      	movs	r3, #1
 800af68:	71fb      	strb	r3, [r7, #7]
  
  if(ES_WIFI_RegisterBusIO(&EsWifiObj,
 800af6a:	4b0d      	ldr	r3, [pc, #52]	; (800afa0 <WIFI_Init+0x40>)
 800af6c:	9301      	str	r3, [sp, #4]
 800af6e:	4b0d      	ldr	r3, [pc, #52]	; (800afa4 <WIFI_Init+0x44>)
 800af70:	9300      	str	r3, [sp, #0]
 800af72:	4b0d      	ldr	r3, [pc, #52]	; (800afa8 <WIFI_Init+0x48>)
 800af74:	4a0d      	ldr	r2, [pc, #52]	; (800afac <WIFI_Init+0x4c>)
 800af76:	490e      	ldr	r1, [pc, #56]	; (800afb0 <WIFI_Init+0x50>)
 800af78:	480e      	ldr	r0, [pc, #56]	; (800afb4 <WIFI_Init+0x54>)
 800af7a:	f7ff f8c3 	bl	800a104 <ES_WIFI_RegisterBusIO>
 800af7e:	4603      	mov	r3, r0
 800af80:	2b00      	cmp	r3, #0
 800af82:	d107      	bne.n	800af94 <WIFI_Init+0x34>
                           SPI_WIFI_DeInit,
                           SPI_WIFI_Delay,
                           SPI_WIFI_SendData,
                           SPI_WIFI_ReceiveData) == ES_WIFI_STATUS_OK)
  {
    if(ES_WIFI_Init(&EsWifiObj) == ES_WIFI_STATUS_OK)
 800af84:	480b      	ldr	r0, [pc, #44]	; (800afb4 <WIFI_Init+0x54>)
 800af86:	f7ff f88f 	bl	800a0a8 <ES_WIFI_Init>
 800af8a:	4603      	mov	r3, r0
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	d101      	bne.n	800af94 <WIFI_Init+0x34>
    {
      ret = WIFI_STATUS_OK;
 800af90:	2300      	movs	r3, #0
 800af92:	71fb      	strb	r3, [r7, #7]
    }
  }
  return ret;
 800af94:	79fb      	ldrb	r3, [r7, #7]
}
 800af96:	4618      	mov	r0, r3
 800af98:	3708      	adds	r7, #8
 800af9a:	46bd      	mov	sp, r7
 800af9c:	bd80      	pop	{r7, pc}
 800af9e:	bf00      	nop
 800afa0:	0800ac65 	.word	0x0800ac65
 800afa4:	0800ad59 	.word	0x0800ad59
 800afa8:	0800ae35 	.word	0x0800ae35
 800afac:	0800ab4d 	.word	0x0800ab4d
 800afb0:	0800a9b1 	.word	0x0800a9b1
 800afb4:	20000d04 	.word	0x20000d04

0800afb8 <WIFI_Connect>:
  */
WIFI_Status_t WIFI_Connect(
                             const char* SSID,
                             const char* Password,
                             WIFI_Ecn_t ecn)
{
 800afb8:	b580      	push	{r7, lr}
 800afba:	b086      	sub	sp, #24
 800afbc:	af00      	add	r7, sp, #0
 800afbe:	60f8      	str	r0, [r7, #12]
 800afc0:	60b9      	str	r1, [r7, #8]
 800afc2:	4613      	mov	r3, r2
 800afc4:	71fb      	strb	r3, [r7, #7]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 800afc6:	2301      	movs	r3, #1
 800afc8:	75fb      	strb	r3, [r7, #23]

  if(ES_WIFI_Connect(&EsWifiObj, SSID, Password, (ES_WIFI_SecurityType_t) ecn) == ES_WIFI_STATUS_OK)
 800afca:	79fb      	ldrb	r3, [r7, #7]
 800afcc:	68ba      	ldr	r2, [r7, #8]
 800afce:	68f9      	ldr	r1, [r7, #12]
 800afd0:	4809      	ldr	r0, [pc, #36]	; (800aff8 <WIFI_Connect+0x40>)
 800afd2:	f7ff f8cb 	bl	800a16c <ES_WIFI_Connect>
 800afd6:	4603      	mov	r3, r0
 800afd8:	2b00      	cmp	r3, #0
 800afda:	d107      	bne.n	800afec <WIFI_Connect+0x34>
  {
    if(ES_WIFI_GetNetworkSettings(&EsWifiObj) == ES_WIFI_STATUS_OK)
 800afdc:	4806      	ldr	r0, [pc, #24]	; (800aff8 <WIFI_Connect+0x40>)
 800afde:	f7ff f969 	bl	800a2b4 <ES_WIFI_GetNetworkSettings>
 800afe2:	4603      	mov	r3, r0
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	d101      	bne.n	800afec <WIFI_Connect+0x34>
    {
       ret = WIFI_STATUS_OK;
 800afe8:	2300      	movs	r3, #0
 800afea:	75fb      	strb	r3, [r7, #23]
    }
  }
  return ret;
 800afec:	7dfb      	ldrb	r3, [r7, #23]
}
 800afee:	4618      	mov	r0, r3
 800aff0:	3718      	adds	r7, #24
 800aff2:	46bd      	mov	sp, r7
 800aff4:	bd80      	pop	{r7, pc}
 800aff6:	bf00      	nop
 800aff8:	20000d04 	.word	0x20000d04

0800affc <WIFI_GetMAC_Address>:
/**
  * @brief  This function retrieves the WiFi interface's MAC address.
  * @retval Operation Status.
  */
WIFI_Status_t WIFI_GetMAC_Address(uint8_t  *mac)
{
 800affc:	b580      	push	{r7, lr}
 800affe:	b084      	sub	sp, #16
 800b000:	af00      	add	r7, sp, #0
 800b002:	6078      	str	r0, [r7, #4]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 800b004:	2301      	movs	r3, #1
 800b006:	73fb      	strb	r3, [r7, #15]
  
  if(ES_WIFI_GetMACAddress(&EsWifiObj, mac) == ES_WIFI_STATUS_OK)
 800b008:	6879      	ldr	r1, [r7, #4]
 800b00a:	4806      	ldr	r0, [pc, #24]	; (800b024 <WIFI_GetMAC_Address+0x28>)
 800b00c:	f7ff f97c 	bl	800a308 <ES_WIFI_GetMACAddress>
 800b010:	4603      	mov	r3, r0
 800b012:	2b00      	cmp	r3, #0
 800b014:	d101      	bne.n	800b01a <WIFI_GetMAC_Address+0x1e>
  {
    ret = WIFI_STATUS_OK;
 800b016:	2300      	movs	r3, #0
 800b018:	73fb      	strb	r3, [r7, #15]
  }
  return ret;
 800b01a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b01c:	4618      	mov	r0, r3
 800b01e:	3710      	adds	r7, #16
 800b020:	46bd      	mov	sp, r7
 800b022:	bd80      	pop	{r7, pc}
 800b024:	20000d04 	.word	0x20000d04

0800b028 <WIFI_GetIP_Address>:
/**
  * @brief  This function retrieves the WiFi interface's IP address.
  * @retval Operation Status.
  */
WIFI_Status_t WIFI_GetIP_Address (uint8_t  *ipaddr)
{
 800b028:	b580      	push	{r7, lr}
 800b02a:	b084      	sub	sp, #16
 800b02c:	af00      	add	r7, sp, #0
 800b02e:	6078      	str	r0, [r7, #4]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 800b030:	2301      	movs	r3, #1
 800b032:	73fb      	strb	r3, [r7, #15]
  
  if (ES_WIFI_IsConnected(&EsWifiObj) == 1)
 800b034:	4809      	ldr	r0, [pc, #36]	; (800b05c <WIFI_GetIP_Address+0x34>)
 800b036:	f7ff f911 	bl	800a25c <ES_WIFI_IsConnected>
 800b03a:	4603      	mov	r3, r0
 800b03c:	2b01      	cmp	r3, #1
 800b03e:	d107      	bne.n	800b050 <WIFI_GetIP_Address+0x28>
 800b040:	4b06      	ldr	r3, [pc, #24]	; (800b05c <WIFI_GetIP_Address+0x34>)
 800b042:	f8d3 30d5 	ldr.w	r3, [r3, #213]	; 0xd5
 800b046:	461a      	mov	r2, r3
  {
    memcpy(ipaddr, EsWifiObj.NetSettings.IP_Addr, 4);
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	601a      	str	r2, [r3, #0]
    ret = WIFI_STATUS_OK;
 800b04c:	2300      	movs	r3, #0
 800b04e:	73fb      	strb	r3, [r7, #15]
  }
  return ret;
 800b050:	7bfb      	ldrb	r3, [r7, #15]
}
 800b052:	4618      	mov	r0, r3
 800b054:	3710      	adds	r7, #16
 800b056:	46bd      	mov	sp, r7
 800b058:	bd80      	pop	{r7, pc}
 800b05a:	bf00      	nop
 800b05c:	20000d04 	.word	0x20000d04

0800b060 <WIFI_OpenClientConnection>:
  * @param  port : Remote port
  * @param  local_port : Local port
  * @retval Operation status
  */
WIFI_Status_t WIFI_OpenClientConnection(uint32_t socket, WIFI_Protocol_t type, const char *name, uint8_t *ipaddr, uint16_t port, uint16_t local_port)
{
 800b060:	b580      	push	{r7, lr}
 800b062:	b08a      	sub	sp, #40	; 0x28
 800b064:	af00      	add	r7, sp, #0
 800b066:	60f8      	str	r0, [r7, #12]
 800b068:	607a      	str	r2, [r7, #4]
 800b06a:	603b      	str	r3, [r7, #0]
 800b06c:	460b      	mov	r3, r1
 800b06e:	72fb      	strb	r3, [r7, #11]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 800b070:	2301      	movs	r3, #1
 800b072:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  ES_WIFI_Conn_t conn;
  
  conn.Number = socket;
 800b076:	68fb      	ldr	r3, [r7, #12]
 800b078:	b2db      	uxtb	r3, r3
 800b07a:	747b      	strb	r3, [r7, #17]
  conn.RemotePort = port;
 800b07c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800b07e:	827b      	strh	r3, [r7, #18]
  conn.LocalPort = local_port;
 800b080:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800b082:	82bb      	strh	r3, [r7, #20]
  conn.Type = (type == WIFI_TCP_PROTOCOL)? ES_WIFI_TCP_CONNECTION : ES_WIFI_UDP_CONNECTION;
 800b084:	7afb      	ldrb	r3, [r7, #11]
 800b086:	2b00      	cmp	r3, #0
 800b088:	bf14      	ite	ne
 800b08a:	2301      	movne	r3, #1
 800b08c:	2300      	moveq	r3, #0
 800b08e:	b2db      	uxtb	r3, r3
 800b090:	743b      	strb	r3, [r7, #16]
  conn.RemoteIP[0] = ipaddr[0];
 800b092:	683b      	ldr	r3, [r7, #0]
 800b094:	781b      	ldrb	r3, [r3, #0]
 800b096:	75bb      	strb	r3, [r7, #22]
  conn.RemoteIP[1] = ipaddr[1];
 800b098:	683b      	ldr	r3, [r7, #0]
 800b09a:	785b      	ldrb	r3, [r3, #1]
 800b09c:	75fb      	strb	r3, [r7, #23]
  conn.RemoteIP[2] = ipaddr[2];
 800b09e:	683b      	ldr	r3, [r7, #0]
 800b0a0:	789b      	ldrb	r3, [r3, #2]
 800b0a2:	763b      	strb	r3, [r7, #24]
  conn.RemoteIP[3] = ipaddr[3];
 800b0a4:	683b      	ldr	r3, [r7, #0]
 800b0a6:	78db      	ldrb	r3, [r3, #3]
 800b0a8:	767b      	strb	r3, [r7, #25]
  if(ES_WIFI_StartClientConnection(&EsWifiObj, &conn)== ES_WIFI_STATUS_OK)
 800b0aa:	f107 0310 	add.w	r3, r7, #16
 800b0ae:	4619      	mov	r1, r3
 800b0b0:	4807      	ldr	r0, [pc, #28]	; (800b0d0 <WIFI_OpenClientConnection+0x70>)
 800b0b2:	f7ff f95b 	bl	800a36c <ES_WIFI_StartClientConnection>
 800b0b6:	4603      	mov	r3, r0
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	d102      	bne.n	800b0c2 <WIFI_OpenClientConnection+0x62>
  {
    ret = WIFI_STATUS_OK;
 800b0bc:	2300      	movs	r3, #0
 800b0be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  return ret;
 800b0c2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800b0c6:	4618      	mov	r0, r3
 800b0c8:	3728      	adds	r7, #40	; 0x28
 800b0ca:	46bd      	mov	sp, r7
 800b0cc:	bd80      	pop	{r7, pc}
 800b0ce:	bf00      	nop
 800b0d0:	20000d04 	.word	0x20000d04

0800b0d4 <sendMessageVector>:
/*-----------------------------------------------------------*/

static int32_t sendMessageVector( MQTTContext_t * pContext,
                                  TransportOutVector_t * pIoVec,
                                  size_t ioVecCount )
{
 800b0d4:	b580      	push	{r7, lr}
 800b0d6:	b08a      	sub	sp, #40	; 0x28
 800b0d8:	af00      	add	r7, sp, #0
 800b0da:	60f8      	str	r0, [r7, #12]
 800b0dc:	60b9      	str	r1, [r7, #8]
 800b0de:	607a      	str	r2, [r7, #4]
    int32_t sendResult;
    uint32_t timeoutMs;
    TransportOutVector_t * pIoVectIterator;
    size_t vectorsToBeSent = ioVecCount;
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	61fb      	str	r3, [r7, #28]
    size_t bytesToSend = 0U;
 800b0e4:	2300      	movs	r3, #0
 800b0e6:	61bb      	str	r3, [r7, #24]
    int32_t bytesSentOrError = 0;
 800b0e8:	2300      	movs	r3, #0
 800b0ea:	617b      	str	r3, [r7, #20]

    assert( pContext != NULL );
 800b0ec:	68fb      	ldr	r3, [r7, #12]
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	d106      	bne.n	800b100 <sendMessageVector+0x2c>
 800b0f2:	4b64      	ldr	r3, [pc, #400]	; (800b284 <sendMessageVector+0x1b0>)
 800b0f4:	4a64      	ldr	r2, [pc, #400]	; (800b288 <sendMessageVector+0x1b4>)
 800b0f6:	f240 21f2 	movw	r1, #754	; 0x2f2
 800b0fa:	4864      	ldr	r0, [pc, #400]	; (800b28c <sendMessageVector+0x1b8>)
 800b0fc:	f006 ff7e 	bl	8011ffc <__assert_func>
    assert( pIoVec != NULL );
 800b100:	68bb      	ldr	r3, [r7, #8]
 800b102:	2b00      	cmp	r3, #0
 800b104:	d106      	bne.n	800b114 <sendMessageVector+0x40>
 800b106:	4b62      	ldr	r3, [pc, #392]	; (800b290 <sendMessageVector+0x1bc>)
 800b108:	4a5f      	ldr	r2, [pc, #380]	; (800b288 <sendMessageVector+0x1b4>)
 800b10a:	f240 21f3 	movw	r1, #755	; 0x2f3
 800b10e:	485f      	ldr	r0, [pc, #380]	; (800b28c <sendMessageVector+0x1b8>)
 800b110:	f006 ff74 	bl	8011ffc <__assert_func>
    assert( pContext->getTime != NULL );
 800b114:	68fb      	ldr	r3, [r7, #12]
 800b116:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b118:	2b00      	cmp	r3, #0
 800b11a:	d106      	bne.n	800b12a <sendMessageVector+0x56>
 800b11c:	4b5d      	ldr	r3, [pc, #372]	; (800b294 <sendMessageVector+0x1c0>)
 800b11e:	4a5a      	ldr	r2, [pc, #360]	; (800b288 <sendMessageVector+0x1b4>)
 800b120:	f44f 713d 	mov.w	r1, #756	; 0x2f4
 800b124:	4859      	ldr	r0, [pc, #356]	; (800b28c <sendMessageVector+0x1b8>)
 800b126:	f006 ff69 	bl	8011ffc <__assert_func>
    /* Send must always be defined */
    assert( pContext->transportInterface.send != NULL );
 800b12a:	68fb      	ldr	r3, [r7, #12]
 800b12c:	695b      	ldr	r3, [r3, #20]
 800b12e:	2b00      	cmp	r3, #0
 800b130:	d106      	bne.n	800b140 <sendMessageVector+0x6c>
 800b132:	4b59      	ldr	r3, [pc, #356]	; (800b298 <sendMessageVector+0x1c4>)
 800b134:	4a54      	ldr	r2, [pc, #336]	; (800b288 <sendMessageVector+0x1b4>)
 800b136:	f240 21f6 	movw	r1, #758	; 0x2f6
 800b13a:	4854      	ldr	r0, [pc, #336]	; (800b28c <sendMessageVector+0x1b8>)
 800b13c:	f006 ff5e 	bl	8011ffc <__assert_func>

    /* Count the total number of bytes to be sent as outlined in the vector. */
    for( pIoVectIterator = pIoVec; pIoVectIterator <= &( pIoVec[ ioVecCount - 1U ] ); pIoVectIterator++ )
 800b140:	68bb      	ldr	r3, [r7, #8]
 800b142:	623b      	str	r3, [r7, #32]
 800b144:	e007      	b.n	800b156 <sendMessageVector+0x82>
    {
        bytesToSend += pIoVectIterator->iov_len;
 800b146:	6a3b      	ldr	r3, [r7, #32]
 800b148:	685b      	ldr	r3, [r3, #4]
 800b14a:	69ba      	ldr	r2, [r7, #24]
 800b14c:	4413      	add	r3, r2
 800b14e:	61bb      	str	r3, [r7, #24]
    for( pIoVectIterator = pIoVec; pIoVectIterator <= &( pIoVec[ ioVecCount - 1U ] ); pIoVectIterator++ )
 800b150:	6a3b      	ldr	r3, [r7, #32]
 800b152:	3308      	adds	r3, #8
 800b154:	623b      	str	r3, [r7, #32]
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800b15c:	3b01      	subs	r3, #1
 800b15e:	00db      	lsls	r3, r3, #3
 800b160:	68ba      	ldr	r2, [r7, #8]
 800b162:	4413      	add	r3, r2
 800b164:	6a3a      	ldr	r2, [r7, #32]
 800b166:	429a      	cmp	r2, r3
 800b168:	d9ed      	bls.n	800b146 <sendMessageVector+0x72>
    }

    /* Reset the iterator to point to the first entry in the array. */
    pIoVectIterator = pIoVec;
 800b16a:	68bb      	ldr	r3, [r7, #8]
 800b16c:	623b      	str	r3, [r7, #32]

    /* Set the timeout. */
    timeoutMs = pContext->getTime() + MQTT_SEND_TIMEOUT_MS;
 800b16e:	68fb      	ldr	r3, [r7, #12]
 800b170:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b172:	4798      	blx	r3
 800b174:	4603      	mov	r3, r0
 800b176:	f503 439c 	add.w	r3, r3, #19968	; 0x4e00
 800b17a:	3320      	adds	r3, #32
 800b17c:	613b      	str	r3, [r7, #16]

    while( ( bytesSentOrError < ( int32_t ) bytesToSend ) && ( bytesSentOrError >= 0 ) )
 800b17e:	e073      	b.n	800b268 <sendMessageVector+0x194>
    {
        if( pContext->transportInterface.writev != NULL )
 800b180:	68fb      	ldr	r3, [r7, #12]
 800b182:	699b      	ldr	r3, [r3, #24]
 800b184:	2b00      	cmp	r3, #0
 800b186:	d008      	beq.n	800b19a <sendMessageVector+0xc6>
        {
            sendResult = pContext->transportInterface.writev( pContext->transportInterface.pNetworkContext,
 800b188:	68fb      	ldr	r3, [r7, #12]
 800b18a:	699b      	ldr	r3, [r3, #24]
 800b18c:	68fa      	ldr	r2, [r7, #12]
 800b18e:	69d0      	ldr	r0, [r2, #28]
 800b190:	69fa      	ldr	r2, [r7, #28]
 800b192:	6a39      	ldr	r1, [r7, #32]
 800b194:	4798      	blx	r3
 800b196:	6278      	str	r0, [r7, #36]	; 0x24
 800b198:	e009      	b.n	800b1ae <sendMessageVector+0xda>
                                                              pIoVectIterator,
                                                              vectorsToBeSent );
        }
        else
        {
            sendResult = pContext->transportInterface.send( pContext->transportInterface.pNetworkContext,
 800b19a:	68fb      	ldr	r3, [r7, #12]
 800b19c:	695b      	ldr	r3, [r3, #20]
 800b19e:	68fa      	ldr	r2, [r7, #12]
 800b1a0:	69d0      	ldr	r0, [r2, #28]
 800b1a2:	6a3a      	ldr	r2, [r7, #32]
 800b1a4:	6811      	ldr	r1, [r2, #0]
 800b1a6:	6a3a      	ldr	r2, [r7, #32]
 800b1a8:	6852      	ldr	r2, [r2, #4]
 800b1aa:	4798      	blx	r3
 800b1ac:	6278      	str	r0, [r7, #36]	; 0x24
                                                            pIoVectIterator->iov_base,
                                                            pIoVectIterator->iov_len );
        }

        if( sendResult > 0 )
 800b1ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	dd17      	ble.n	800b1e4 <sendMessageVector+0x110>
        {
            /* It is a bug in the application's transport send implementation if
             * more bytes than expected are sent. */
            assert( sendResult <= ( ( int32_t ) bytesToSend - bytesSentOrError ) );
 800b1b4:	69ba      	ldr	r2, [r7, #24]
 800b1b6:	697b      	ldr	r3, [r7, #20]
 800b1b8:	1ad3      	subs	r3, r2, r3
 800b1ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b1bc:	429a      	cmp	r2, r3
 800b1be:	dd06      	ble.n	800b1ce <sendMessageVector+0xfa>
 800b1c0:	4b36      	ldr	r3, [pc, #216]	; (800b29c <sendMessageVector+0x1c8>)
 800b1c2:	4a31      	ldr	r2, [pc, #196]	; (800b288 <sendMessageVector+0x1b4>)
 800b1c4:	f240 3117 	movw	r1, #791	; 0x317
 800b1c8:	4830      	ldr	r0, [pc, #192]	; (800b28c <sendMessageVector+0x1b8>)
 800b1ca:	f006 ff17 	bl	8011ffc <__assert_func>

            bytesSentOrError += sendResult;
 800b1ce:	697a      	ldr	r2, [r7, #20]
 800b1d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1d2:	4413      	add	r3, r2
 800b1d4:	617b      	str	r3, [r7, #20]

            /* Set last transmission time. */
            pContext->lastPacketTxTime = pContext->getTime();
 800b1d6:	68fb      	ldr	r3, [r7, #12]
 800b1d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1da:	4798      	blx	r3
 800b1dc:	4602      	mov	r2, r0
 800b1de:	68fb      	ldr	r3, [r7, #12]
 800b1e0:	635a      	str	r2, [r3, #52]	; 0x34
 800b1e2:	e004      	b.n	800b1ee <sendMessageVector+0x11a>

            LogDebug( ( "sendMessageVector: Bytes Sent=%ld, Bytes Remaining=%lu",
                        ( long int ) sendResult,
                        ( unsigned long ) ( bytesToSend - ( size_t ) bytesSentOrError ) ) );
        }
        else if( sendResult < 0 )
 800b1e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1e6:	2b00      	cmp	r3, #0
 800b1e8:	da01      	bge.n	800b1ee <sendMessageVector+0x11a>
        {
            bytesSentOrError = sendResult;
 800b1ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1ec:	617b      	str	r3, [r7, #20]
        {
            /* MISRA Empty body */
        }

        /* Check for timeout. */
        if( pContext->getTime() >= timeoutMs )
 800b1ee:	68fb      	ldr	r3, [r7, #12]
 800b1f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1f2:	4798      	blx	r3
 800b1f4:	4602      	mov	r2, r0
 800b1f6:	693b      	ldr	r3, [r7, #16]
 800b1f8:	4293      	cmp	r3, r2
 800b1fa:	d93d      	bls.n	800b278 <sendMessageVector+0x1a4>
            LogError( ( "sendMessageVector: Unable to send packet: Timed out." ) );
            break;
        }

        /* Update the send pointer to the correct vector and offset. */
        while( ( pIoVectIterator <= &( pIoVec[ ioVecCount - 1U ] ) ) &&
 800b1fc:	e00b      	b.n	800b216 <sendMessageVector+0x142>
               ( sendResult >= ( int32_t ) pIoVectIterator->iov_len ) )
        {
            sendResult -= ( int32_t ) pIoVectIterator->iov_len;
 800b1fe:	6a3b      	ldr	r3, [r7, #32]
 800b200:	685b      	ldr	r3, [r3, #4]
 800b202:	461a      	mov	r2, r3
 800b204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b206:	1a9b      	subs	r3, r3, r2
 800b208:	627b      	str	r3, [r7, #36]	; 0x24
            pIoVectIterator++;
 800b20a:	6a3b      	ldr	r3, [r7, #32]
 800b20c:	3308      	adds	r3, #8
 800b20e:	623b      	str	r3, [r7, #32]
            /* Update the number of vector which are yet to be sent. */
            vectorsToBeSent--;
 800b210:	69fb      	ldr	r3, [r7, #28]
 800b212:	3b01      	subs	r3, #1
 800b214:	61fb      	str	r3, [r7, #28]
        while( ( pIoVectIterator <= &( pIoVec[ ioVecCount - 1U ] ) ) &&
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800b21c:	3b01      	subs	r3, #1
 800b21e:	00db      	lsls	r3, r3, #3
 800b220:	68ba      	ldr	r2, [r7, #8]
 800b222:	4413      	add	r3, r2
 800b224:	6a3a      	ldr	r2, [r7, #32]
 800b226:	429a      	cmp	r2, r3
 800b228:	d805      	bhi.n	800b236 <sendMessageVector+0x162>
               ( sendResult >= ( int32_t ) pIoVectIterator->iov_len ) )
 800b22a:	6a3b      	ldr	r3, [r7, #32]
 800b22c:	685b      	ldr	r3, [r3, #4]
 800b22e:	461a      	mov	r2, r3
        while( ( pIoVectIterator <= &( pIoVec[ ioVecCount - 1U ] ) ) &&
 800b230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b232:	4293      	cmp	r3, r2
 800b234:	dae3      	bge.n	800b1fe <sendMessageVector+0x12a>
        }

        /* Some of the bytes from this vector were sent as well, update the length
         * and the pointer to data in this vector. */
        if( ( sendResult > 0 ) &&
 800b236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b238:	2b00      	cmp	r3, #0
 800b23a:	dd15      	ble.n	800b268 <sendMessageVector+0x194>
            ( pIoVectIterator <= &( pIoVec[ ioVecCount - 1U ] ) ) )
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800b242:	3b01      	subs	r3, #1
 800b244:	00db      	lsls	r3, r3, #3
 800b246:	68ba      	ldr	r2, [r7, #8]
 800b248:	4413      	add	r3, r2
        if( ( sendResult > 0 ) &&
 800b24a:	6a3a      	ldr	r2, [r7, #32]
 800b24c:	429a      	cmp	r2, r3
 800b24e:	d80b      	bhi.n	800b268 <sendMessageVector+0x194>
        {
            pIoVectIterator->iov_base = ( const void * ) &( ( ( const uint8_t * ) pIoVectIterator->iov_base )[ sendResult ] );
 800b250:	6a3b      	ldr	r3, [r7, #32]
 800b252:	681a      	ldr	r2, [r3, #0]
 800b254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b256:	441a      	add	r2, r3
 800b258:	6a3b      	ldr	r3, [r7, #32]
 800b25a:	601a      	str	r2, [r3, #0]
            pIoVectIterator->iov_len -= ( size_t ) sendResult;
 800b25c:	6a3b      	ldr	r3, [r7, #32]
 800b25e:	685a      	ldr	r2, [r3, #4]
 800b260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b262:	1ad2      	subs	r2, r2, r3
 800b264:	6a3b      	ldr	r3, [r7, #32]
 800b266:	605a      	str	r2, [r3, #4]
    while( ( bytesSentOrError < ( int32_t ) bytesToSend ) && ( bytesSentOrError >= 0 ) )
 800b268:	69bb      	ldr	r3, [r7, #24]
 800b26a:	697a      	ldr	r2, [r7, #20]
 800b26c:	429a      	cmp	r2, r3
 800b26e:	da04      	bge.n	800b27a <sendMessageVector+0x1a6>
 800b270:	697b      	ldr	r3, [r7, #20]
 800b272:	2b00      	cmp	r3, #0
 800b274:	da84      	bge.n	800b180 <sendMessageVector+0xac>
 800b276:	e000      	b.n	800b27a <sendMessageVector+0x1a6>
            break;
 800b278:	bf00      	nop
        }
    }

    return bytesSentOrError;
 800b27a:	697b      	ldr	r3, [r7, #20]
}
 800b27c:	4618      	mov	r0, r3
 800b27e:	3728      	adds	r7, #40	; 0x28
 800b280:	46bd      	mov	sp, r7
 800b282:	bd80      	pop	{r7, pc}
 800b284:	080145ac 	.word	0x080145ac
 800b288:	08015134 	.word	0x08015134
 800b28c:	080144d0 	.word	0x080144d0
 800b290:	080145c0 	.word	0x080145c0
 800b294:	080145d0 	.word	0x080145d0
 800b298:	080145ec 	.word	0x080145ec
 800b29c:	08014618 	.word	0x08014618

0800b2a0 <sendBuffer>:

static int32_t sendBuffer( MQTTContext_t * pContext,
                           const uint8_t * pBufferToSend,
                           size_t bytesToSend )
{
 800b2a0:	b580      	push	{r7, lr}
 800b2a2:	b088      	sub	sp, #32
 800b2a4:	af00      	add	r7, sp, #0
 800b2a6:	60f8      	str	r0, [r7, #12]
 800b2a8:	60b9      	str	r1, [r7, #8]
 800b2aa:	607a      	str	r2, [r7, #4]
    int32_t sendResult;
    uint32_t timeoutMs;
    int32_t bytesSentOrError = 0;
 800b2ac:	2300      	movs	r3, #0
 800b2ae:	61fb      	str	r3, [r7, #28]
    const uint8_t * pIndex = pBufferToSend;
 800b2b0:	68bb      	ldr	r3, [r7, #8]
 800b2b2:	61bb      	str	r3, [r7, #24]

    assert( pContext != NULL );
 800b2b4:	68fb      	ldr	r3, [r7, #12]
 800b2b6:	2b00      	cmp	r3, #0
 800b2b8:	d106      	bne.n	800b2c8 <sendBuffer+0x28>
 800b2ba:	4b39      	ldr	r3, [pc, #228]	; (800b3a0 <sendBuffer+0x100>)
 800b2bc:	4a39      	ldr	r2, [pc, #228]	; (800b3a4 <sendBuffer+0x104>)
 800b2be:	f240 3153 	movw	r1, #851	; 0x353
 800b2c2:	4839      	ldr	r0, [pc, #228]	; (800b3a8 <sendBuffer+0x108>)
 800b2c4:	f006 fe9a 	bl	8011ffc <__assert_func>
    assert( pContext->getTime != NULL );
 800b2c8:	68fb      	ldr	r3, [r7, #12]
 800b2ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	d106      	bne.n	800b2de <sendBuffer+0x3e>
 800b2d0:	4b36      	ldr	r3, [pc, #216]	; (800b3ac <sendBuffer+0x10c>)
 800b2d2:	4a34      	ldr	r2, [pc, #208]	; (800b3a4 <sendBuffer+0x104>)
 800b2d4:	f44f 7155 	mov.w	r1, #852	; 0x354
 800b2d8:	4833      	ldr	r0, [pc, #204]	; (800b3a8 <sendBuffer+0x108>)
 800b2da:	f006 fe8f 	bl	8011ffc <__assert_func>
    assert( pContext->transportInterface.send != NULL );
 800b2de:	68fb      	ldr	r3, [r7, #12]
 800b2e0:	695b      	ldr	r3, [r3, #20]
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	d106      	bne.n	800b2f4 <sendBuffer+0x54>
 800b2e6:	4b32      	ldr	r3, [pc, #200]	; (800b3b0 <sendBuffer+0x110>)
 800b2e8:	4a2e      	ldr	r2, [pc, #184]	; (800b3a4 <sendBuffer+0x104>)
 800b2ea:	f240 3155 	movw	r1, #853	; 0x355
 800b2ee:	482e      	ldr	r0, [pc, #184]	; (800b3a8 <sendBuffer+0x108>)
 800b2f0:	f006 fe84 	bl	8011ffc <__assert_func>
    assert( pIndex != NULL );
 800b2f4:	69bb      	ldr	r3, [r7, #24]
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	d106      	bne.n	800b308 <sendBuffer+0x68>
 800b2fa:	4b2e      	ldr	r3, [pc, #184]	; (800b3b4 <sendBuffer+0x114>)
 800b2fc:	4a29      	ldr	r2, [pc, #164]	; (800b3a4 <sendBuffer+0x104>)
 800b2fe:	f240 3156 	movw	r1, #854	; 0x356
 800b302:	4829      	ldr	r0, [pc, #164]	; (800b3a8 <sendBuffer+0x108>)
 800b304:	f006 fe7a 	bl	8011ffc <__assert_func>

    /* Set the timeout. */
    timeoutMs = pContext->getTime() + MQTT_SEND_TIMEOUT_MS;
 800b308:	68fb      	ldr	r3, [r7, #12]
 800b30a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b30c:	4798      	blx	r3
 800b30e:	4603      	mov	r3, r0
 800b310:	f503 439c 	add.w	r3, r3, #19968	; 0x4e00
 800b314:	3320      	adds	r3, #32
 800b316:	617b      	str	r3, [r7, #20]

    while( ( bytesSentOrError < ( int32_t ) bytesToSend ) && ( bytesSentOrError >= 0 ) )
 800b318:	e034      	b.n	800b384 <sendBuffer+0xe4>
    {
        sendResult = pContext->transportInterface.send( pContext->transportInterface.pNetworkContext,
 800b31a:	68fb      	ldr	r3, [r7, #12]
 800b31c:	695b      	ldr	r3, [r3, #20]
 800b31e:	68fa      	ldr	r2, [r7, #12]
 800b320:	69d0      	ldr	r0, [r2, #28]
                                                        pIndex,
                                                        bytesToSend - ( size_t ) bytesSentOrError );
 800b322:	69fa      	ldr	r2, [r7, #28]
        sendResult = pContext->transportInterface.send( pContext->transportInterface.pNetworkContext,
 800b324:	6879      	ldr	r1, [r7, #4]
 800b326:	1a8a      	subs	r2, r1, r2
 800b328:	69b9      	ldr	r1, [r7, #24]
 800b32a:	4798      	blx	r3
 800b32c:	6138      	str	r0, [r7, #16]

        if( sendResult > 0 )
 800b32e:	693b      	ldr	r3, [r7, #16]
 800b330:	2b00      	cmp	r3, #0
 800b332:	dd1b      	ble.n	800b36c <sendBuffer+0xcc>
        {
            /* It is a bug in the application's transport send implementation if
             * more bytes than expected are sent. */
            assert( sendResult <= ( ( int32_t ) bytesToSend - bytesSentOrError ) );
 800b334:	687a      	ldr	r2, [r7, #4]
 800b336:	69fb      	ldr	r3, [r7, #28]
 800b338:	1ad3      	subs	r3, r2, r3
 800b33a:	693a      	ldr	r2, [r7, #16]
 800b33c:	429a      	cmp	r2, r3
 800b33e:	dd06      	ble.n	800b34e <sendBuffer+0xae>
 800b340:	4b1d      	ldr	r3, [pc, #116]	; (800b3b8 <sendBuffer+0x118>)
 800b342:	4a18      	ldr	r2, [pc, #96]	; (800b3a4 <sendBuffer+0x104>)
 800b344:	f240 3165 	movw	r1, #869	; 0x365
 800b348:	4817      	ldr	r0, [pc, #92]	; (800b3a8 <sendBuffer+0x108>)
 800b34a:	f006 fe57 	bl	8011ffc <__assert_func>

            bytesSentOrError += sendResult;
 800b34e:	69fa      	ldr	r2, [r7, #28]
 800b350:	693b      	ldr	r3, [r7, #16]
 800b352:	4413      	add	r3, r2
 800b354:	61fb      	str	r3, [r7, #28]
            pIndex = &pIndex[ sendResult ];
 800b356:	693b      	ldr	r3, [r7, #16]
 800b358:	69ba      	ldr	r2, [r7, #24]
 800b35a:	4413      	add	r3, r2
 800b35c:	61bb      	str	r3, [r7, #24]

            /* Set last transmission time. */
            pContext->lastPacketTxTime = pContext->getTime();
 800b35e:	68fb      	ldr	r3, [r7, #12]
 800b360:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b362:	4798      	blx	r3
 800b364:	4602      	mov	r2, r0
 800b366:	68fb      	ldr	r3, [r7, #12]
 800b368:	635a      	str	r2, [r3, #52]	; 0x34
 800b36a:	e004      	b.n	800b376 <sendBuffer+0xd6>

            LogDebug( ( "sendBuffer: Bytes Sent=%ld, Bytes Remaining=%lu",
                        ( long int ) sendResult,
                        ( unsigned long ) ( bytesToSend - ( size_t ) bytesSentOrError ) ) );
        }
        else if( sendResult < 0 )
 800b36c:	693b      	ldr	r3, [r7, #16]
 800b36e:	2b00      	cmp	r3, #0
 800b370:	da01      	bge.n	800b376 <sendBuffer+0xd6>
        {
            bytesSentOrError = sendResult;
 800b372:	693b      	ldr	r3, [r7, #16]
 800b374:	61fb      	str	r3, [r7, #28]
        {
            /* MISRA Empty body */
        }

        /* Check for timeout. */
        if( pContext->getTime() >= timeoutMs )
 800b376:	68fb      	ldr	r3, [r7, #12]
 800b378:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b37a:	4798      	blx	r3
 800b37c:	4602      	mov	r2, r0
 800b37e:	697b      	ldr	r3, [r7, #20]
 800b380:	4293      	cmp	r3, r2
 800b382:	d907      	bls.n	800b394 <sendBuffer+0xf4>
    while( ( bytesSentOrError < ( int32_t ) bytesToSend ) && ( bytesSentOrError >= 0 ) )
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	69fa      	ldr	r2, [r7, #28]
 800b388:	429a      	cmp	r2, r3
 800b38a:	da04      	bge.n	800b396 <sendBuffer+0xf6>
 800b38c:	69fb      	ldr	r3, [r7, #28]
 800b38e:	2b00      	cmp	r3, #0
 800b390:	dac3      	bge.n	800b31a <sendBuffer+0x7a>
 800b392:	e000      	b.n	800b396 <sendBuffer+0xf6>
        {
            LogError( ( "sendBuffer: Unable to send packet: Timed out." ) );
            break;
 800b394:	bf00      	nop
        }
    }

    return bytesSentOrError;
 800b396:	69fb      	ldr	r3, [r7, #28]
}
 800b398:	4618      	mov	r0, r3
 800b39a:	3720      	adds	r7, #32
 800b39c:	46bd      	mov	sp, r7
 800b39e:	bd80      	pop	{r7, pc}
 800b3a0:	080145ac 	.word	0x080145ac
 800b3a4:	08015148 	.word	0x08015148
 800b3a8:	080144d0 	.word	0x080144d0
 800b3ac:	080145d0 	.word	0x080145d0
 800b3b0:	080145ec 	.word	0x080145ec
 800b3b4:	08014658 	.word	0x08014658
 800b3b8:	08014618 	.word	0x08014618

0800b3bc <calculateElapsedTime>:

/*-----------------------------------------------------------*/

static uint32_t calculateElapsedTime( uint32_t later,
                                      uint32_t start )
{
 800b3bc:	b480      	push	{r7}
 800b3be:	b083      	sub	sp, #12
 800b3c0:	af00      	add	r7, sp, #0
 800b3c2:	6078      	str	r0, [r7, #4]
 800b3c4:	6039      	str	r1, [r7, #0]
    return later - start;
 800b3c6:	687a      	ldr	r2, [r7, #4]
 800b3c8:	683b      	ldr	r3, [r7, #0]
 800b3ca:	1ad3      	subs	r3, r2, r3
}
 800b3cc:	4618      	mov	r0, r3
 800b3ce:	370c      	adds	r7, #12
 800b3d0:	46bd      	mov	sp, r7
 800b3d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3d6:	4770      	bx	lr

0800b3d8 <getAckFromPacketType>:

/*-----------------------------------------------------------*/

static MQTTPubAckType_t getAckFromPacketType( uint8_t packetType )
{
 800b3d8:	b580      	push	{r7, lr}
 800b3da:	b084      	sub	sp, #16
 800b3dc:	af00      	add	r7, sp, #0
 800b3de:	4603      	mov	r3, r0
 800b3e0:	71fb      	strb	r3, [r7, #7]
    MQTTPubAckType_t ackType = MQTTPuback;
 800b3e2:	2300      	movs	r3, #0
 800b3e4:	73fb      	strb	r3, [r7, #15]

    switch( packetType )
 800b3e6:	79fb      	ldrb	r3, [r7, #7]
 800b3e8:	2b62      	cmp	r3, #98	; 0x62
 800b3ea:	d00c      	beq.n	800b406 <getAckFromPacketType+0x2e>
 800b3ec:	2b62      	cmp	r3, #98	; 0x62
 800b3ee:	dc0d      	bgt.n	800b40c <getAckFromPacketType+0x34>
 800b3f0:	2b40      	cmp	r3, #64	; 0x40
 800b3f2:	d002      	beq.n	800b3fa <getAckFromPacketType+0x22>
 800b3f4:	2b50      	cmp	r3, #80	; 0x50
 800b3f6:	d003      	beq.n	800b400 <getAckFromPacketType+0x28>
 800b3f8:	e008      	b.n	800b40c <getAckFromPacketType+0x34>
    {
        case MQTT_PACKET_TYPE_PUBACK:
            ackType = MQTTPuback;
 800b3fa:	2300      	movs	r3, #0
 800b3fc:	73fb      	strb	r3, [r7, #15]
            break;
 800b3fe:	e012      	b.n	800b426 <getAckFromPacketType+0x4e>

        case MQTT_PACKET_TYPE_PUBREC:
            ackType = MQTTPubrec;
 800b400:	2301      	movs	r3, #1
 800b402:	73fb      	strb	r3, [r7, #15]
            break;
 800b404:	e00f      	b.n	800b426 <getAckFromPacketType+0x4e>

        case MQTT_PACKET_TYPE_PUBREL:
            ackType = MQTTPubrel;
 800b406:	2302      	movs	r3, #2
 800b408:	73fb      	strb	r3, [r7, #15]
            break;
 800b40a:	e00c      	b.n	800b426 <getAckFromPacketType+0x4e>
        case MQTT_PACKET_TYPE_PUBCOMP:
        default:

            /* This function is only called after checking the type is one of
             * the above four values, so packet type must be PUBCOMP here. */
            assert( packetType == MQTT_PACKET_TYPE_PUBCOMP );
 800b40c:	79fb      	ldrb	r3, [r7, #7]
 800b40e:	2b70      	cmp	r3, #112	; 0x70
 800b410:	d006      	beq.n	800b420 <getAckFromPacketType+0x48>
 800b412:	4b07      	ldr	r3, [pc, #28]	; (800b430 <getAckFromPacketType+0x58>)
 800b414:	4a07      	ldr	r2, [pc, #28]	; (800b434 <getAckFromPacketType+0x5c>)
 800b416:	f240 31a7 	movw	r1, #935	; 0x3a7
 800b41a:	4807      	ldr	r0, [pc, #28]	; (800b438 <getAckFromPacketType+0x60>)
 800b41c:	f006 fdee 	bl	8011ffc <__assert_func>
            ackType = MQTTPubcomp;
 800b420:	2303      	movs	r3, #3
 800b422:	73fb      	strb	r3, [r7, #15]
            break;
 800b424:	bf00      	nop
    }

    return ackType;
 800b426:	7bfb      	ldrb	r3, [r7, #15]
}
 800b428:	4618      	mov	r0, r3
 800b42a:	3710      	adds	r7, #16
 800b42c:	46bd      	mov	sp, r7
 800b42e:	bd80      	pop	{r7, pc}
 800b430:	08014668 	.word	0x08014668
 800b434:	08015154 	.word	0x08015154
 800b438:	080144d0 	.word	0x080144d0

0800b43c <recvExact>:

/*-----------------------------------------------------------*/

static int32_t recvExact( const MQTTContext_t * pContext,
                          size_t bytesToRecv )
{
 800b43c:	b580      	push	{r7, lr}
 800b43e:	b08c      	sub	sp, #48	; 0x30
 800b440:	af00      	add	r7, sp, #0
 800b442:	6078      	str	r0, [r7, #4]
 800b444:	6039      	str	r1, [r7, #0]
    uint8_t * pIndex = NULL;
 800b446:	2300      	movs	r3, #0
 800b448:	62fb      	str	r3, [r7, #44]	; 0x2c
    size_t bytesRemaining = bytesToRecv;
 800b44a:	683b      	ldr	r3, [r7, #0]
 800b44c:	62bb      	str	r3, [r7, #40]	; 0x28
    int32_t totalBytesRecvd = 0, bytesRecvd;
 800b44e:	2300      	movs	r3, #0
 800b450:	627b      	str	r3, [r7, #36]	; 0x24
    uint32_t lastDataRecvTimeMs = 0U, timeSinceLastRecvMs = 0U;
 800b452:	2300      	movs	r3, #0
 800b454:	623b      	str	r3, [r7, #32]
 800b456:	2300      	movs	r3, #0
 800b458:	61bb      	str	r3, [r7, #24]
    TransportRecv_t recvFunc = NULL;
 800b45a:	2300      	movs	r3, #0
 800b45c:	617b      	str	r3, [r7, #20]
    MQTTGetCurrentTimeFunc_t getTimeStampMs = NULL;
 800b45e:	2300      	movs	r3, #0
 800b460:	613b      	str	r3, [r7, #16]
    bool receiveError = false;
 800b462:	2300      	movs	r3, #0
 800b464:	77fb      	strb	r3, [r7, #31]

    assert( pContext != NULL );
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	2b00      	cmp	r3, #0
 800b46a:	d106      	bne.n	800b47a <recvExact+0x3e>
 800b46c:	4b44      	ldr	r3, [pc, #272]	; (800b580 <recvExact+0x144>)
 800b46e:	4a45      	ldr	r2, [pc, #276]	; (800b584 <recvExact+0x148>)
 800b470:	f44f 716f 	mov.w	r1, #956	; 0x3bc
 800b474:	4844      	ldr	r0, [pc, #272]	; (800b588 <recvExact+0x14c>)
 800b476:	f006 fdc1 	bl	8011ffc <__assert_func>
    assert( bytesToRecv <= pContext->networkBuffer.size );
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b47e:	683a      	ldr	r2, [r7, #0]
 800b480:	429a      	cmp	r2, r3
 800b482:	d906      	bls.n	800b492 <recvExact+0x56>
 800b484:	4b41      	ldr	r3, [pc, #260]	; (800b58c <recvExact+0x150>)
 800b486:	4a3f      	ldr	r2, [pc, #252]	; (800b584 <recvExact+0x148>)
 800b488:	f240 31bd 	movw	r1, #957	; 0x3bd
 800b48c:	483e      	ldr	r0, [pc, #248]	; (800b588 <recvExact+0x14c>)
 800b48e:	f006 fdb5 	bl	8011ffc <__assert_func>
    assert( pContext->getTime != NULL );
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b496:	2b00      	cmp	r3, #0
 800b498:	d106      	bne.n	800b4a8 <recvExact+0x6c>
 800b49a:	4b3d      	ldr	r3, [pc, #244]	; (800b590 <recvExact+0x154>)
 800b49c:	4a39      	ldr	r2, [pc, #228]	; (800b584 <recvExact+0x148>)
 800b49e:	f240 31be 	movw	r1, #958	; 0x3be
 800b4a2:	4839      	ldr	r0, [pc, #228]	; (800b588 <recvExact+0x14c>)
 800b4a4:	f006 fdaa 	bl	8011ffc <__assert_func>
    assert( pContext->transportInterface.recv != NULL );
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	691b      	ldr	r3, [r3, #16]
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	d106      	bne.n	800b4be <recvExact+0x82>
 800b4b0:	4b38      	ldr	r3, [pc, #224]	; (800b594 <recvExact+0x158>)
 800b4b2:	4a34      	ldr	r2, [pc, #208]	; (800b584 <recvExact+0x148>)
 800b4b4:	f240 31bf 	movw	r1, #959	; 0x3bf
 800b4b8:	4833      	ldr	r0, [pc, #204]	; (800b588 <recvExact+0x14c>)
 800b4ba:	f006 fd9f 	bl	8011ffc <__assert_func>
    assert( pContext->networkBuffer.pBuffer != NULL );
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	6a1b      	ldr	r3, [r3, #32]
 800b4c2:	2b00      	cmp	r3, #0
 800b4c4:	d106      	bne.n	800b4d4 <recvExact+0x98>
 800b4c6:	4b34      	ldr	r3, [pc, #208]	; (800b598 <recvExact+0x15c>)
 800b4c8:	4a2e      	ldr	r2, [pc, #184]	; (800b584 <recvExact+0x148>)
 800b4ca:	f44f 7170 	mov.w	r1, #960	; 0x3c0
 800b4ce:	482e      	ldr	r0, [pc, #184]	; (800b588 <recvExact+0x14c>)
 800b4d0:	f006 fd94 	bl	8011ffc <__assert_func>

    pIndex = pContext->networkBuffer.pBuffer;
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	6a1b      	ldr	r3, [r3, #32]
 800b4d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    recvFunc = pContext->transportInterface.recv;
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	691b      	ldr	r3, [r3, #16]
 800b4de:	617b      	str	r3, [r7, #20]
    getTimeStampMs = pContext->getTime;
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4e4:	613b      	str	r3, [r7, #16]

    /* Part of the MQTT packet has been read before calling this function. */
    lastDataRecvTimeMs = getTimeStampMs();
 800b4e6:	693b      	ldr	r3, [r7, #16]
 800b4e8:	4798      	blx	r3
 800b4ea:	6238      	str	r0, [r7, #32]

    while( ( bytesRemaining > 0U ) && ( receiveError == false ) )
 800b4ec:	e039      	b.n	800b562 <recvExact+0x126>
    {
        bytesRecvd = recvFunc( pContext->transportInterface.pNetworkContext,
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	69d8      	ldr	r0, [r3, #28]
 800b4f2:	697b      	ldr	r3, [r7, #20]
 800b4f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b4f6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b4f8:	4798      	blx	r3
 800b4fa:	60f8      	str	r0, [r7, #12]
                               pIndex,
                               bytesRemaining );

        if( bytesRecvd < 0 )
 800b4fc:	68fb      	ldr	r3, [r7, #12]
 800b4fe:	2b00      	cmp	r3, #0
 800b500:	da04      	bge.n	800b50c <recvExact+0xd0>
        {
            LogError( ( "Network error while receiving packet: ReturnCode=%ld.",
                        ( long int ) bytesRecvd ) );
            totalBytesRecvd = bytesRecvd;
 800b502:	68fb      	ldr	r3, [r7, #12]
 800b504:	627b      	str	r3, [r7, #36]	; 0x24
            receiveError = true;
 800b506:	2301      	movs	r3, #1
 800b508:	77fb      	strb	r3, [r7, #31]
 800b50a:	e02a      	b.n	800b562 <recvExact+0x126>
        }
        else if( bytesRecvd > 0 )
 800b50c:	68fb      	ldr	r3, [r7, #12]
 800b50e:	2b00      	cmp	r3, #0
 800b510:	dd1a      	ble.n	800b548 <recvExact+0x10c>
        {
            /* Reset the starting time as we have received some data from the network. */
            lastDataRecvTimeMs = getTimeStampMs();
 800b512:	693b      	ldr	r3, [r7, #16]
 800b514:	4798      	blx	r3
 800b516:	6238      	str	r0, [r7, #32]
            /* It is a bug in the application's transport receive implementation
             * if more bytes than expected are received. To avoid a possible
             * overflow in converting bytesRemaining from unsigned to signed,
             * this assert must exist after the check for bytesRecvd being
             * negative. */
            assert( ( size_t ) bytesRecvd <= bytesRemaining );
 800b518:	68fb      	ldr	r3, [r7, #12]
 800b51a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b51c:	429a      	cmp	r2, r3
 800b51e:	d206      	bcs.n	800b52e <recvExact+0xf2>
 800b520:	4b1e      	ldr	r3, [pc, #120]	; (800b59c <recvExact+0x160>)
 800b522:	4a18      	ldr	r2, [pc, #96]	; (800b584 <recvExact+0x148>)
 800b524:	f44f 7178 	mov.w	r1, #992	; 0x3e0
 800b528:	4817      	ldr	r0, [pc, #92]	; (800b588 <recvExact+0x14c>)
 800b52a:	f006 fd67 	bl	8011ffc <__assert_func>

            bytesRemaining -= ( size_t ) bytesRecvd;
 800b52e:	68fb      	ldr	r3, [r7, #12]
 800b530:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b532:	1ad3      	subs	r3, r2, r3
 800b534:	62bb      	str	r3, [r7, #40]	; 0x28
            totalBytesRecvd += ( int32_t ) bytesRecvd;
 800b536:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b538:	68fb      	ldr	r3, [r7, #12]
 800b53a:	4413      	add	r3, r2
 800b53c:	627b      	str	r3, [r7, #36]	; 0x24
            /* Increment the index. */
            pIndex = &pIndex[ bytesRecvd ];
 800b53e:	68fb      	ldr	r3, [r7, #12]
 800b540:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b542:	4413      	add	r3, r2
 800b544:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b546:	e00c      	b.n	800b562 <recvExact+0x126>
                        ( long int ) totalBytesRecvd ) );
        }
        else
        {
            /* No bytes were read from the network. */
            timeSinceLastRecvMs = calculateElapsedTime( getTimeStampMs(), lastDataRecvTimeMs );
 800b548:	693b      	ldr	r3, [r7, #16]
 800b54a:	4798      	blx	r3
 800b54c:	4603      	mov	r3, r0
 800b54e:	6a39      	ldr	r1, [r7, #32]
 800b550:	4618      	mov	r0, r3
 800b552:	f7ff ff33 	bl	800b3bc <calculateElapsedTime>
 800b556:	61b8      	str	r0, [r7, #24]

            /* Check for timeout if we have been waiting to receive any byte on the network. */
            if( timeSinceLastRecvMs >= MQTT_RECV_POLLING_TIMEOUT_MS )
 800b558:	69bb      	ldr	r3, [r7, #24]
 800b55a:	2b09      	cmp	r3, #9
 800b55c:	d901      	bls.n	800b562 <recvExact+0x126>
            {
                LogError( ( "Unable to receive packet: Timed out in transport recv." ) );
                receiveError = true;
 800b55e:	2301      	movs	r3, #1
 800b560:	77fb      	strb	r3, [r7, #31]
    while( ( bytesRemaining > 0U ) && ( receiveError == false ) )
 800b562:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b564:	2b00      	cmp	r3, #0
 800b566:	d005      	beq.n	800b574 <recvExact+0x138>
 800b568:	7ffb      	ldrb	r3, [r7, #31]
 800b56a:	f083 0301 	eor.w	r3, r3, #1
 800b56e:	b2db      	uxtb	r3, r3
 800b570:	2b00      	cmp	r3, #0
 800b572:	d1bc      	bne.n	800b4ee <recvExact+0xb2>
            }
        }
    }

    return totalBytesRecvd;
 800b574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b576:	4618      	mov	r0, r3
 800b578:	3730      	adds	r7, #48	; 0x30
 800b57a:	46bd      	mov	sp, r7
 800b57c:	bd80      	pop	{r7, pc}
 800b57e:	bf00      	nop
 800b580:	080145ac 	.word	0x080145ac
 800b584:	0801516c 	.word	0x0801516c
 800b588:	080144d0 	.word	0x080144d0
 800b58c:	08014690 	.word	0x08014690
 800b590:	080145d0 	.word	0x080145d0
 800b594:	080146bc 	.word	0x080146bc
 800b598:	080146e8 	.word	0x080146e8
 800b59c:	08014710 	.word	0x08014710

0800b5a0 <discardPacket>:
/*-----------------------------------------------------------*/

static MQTTStatus_t discardPacket( const MQTTContext_t * pContext,
                                   size_t remainingLength,
                                   uint32_t timeoutMs )
{
 800b5a0:	b580      	push	{r7, lr}
 800b5a2:	b08c      	sub	sp, #48	; 0x30
 800b5a4:	af00      	add	r7, sp, #0
 800b5a6:	60f8      	str	r0, [r7, #12]
 800b5a8:	60b9      	str	r1, [r7, #8]
 800b5aa:	607a      	str	r2, [r7, #4]
    MQTTStatus_t status = MQTTRecvFailed;
 800b5ac:	2304      	movs	r3, #4
 800b5ae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    int32_t bytesReceived = 0;
 800b5b2:	2300      	movs	r3, #0
 800b5b4:	61fb      	str	r3, [r7, #28]
    size_t bytesToReceive = 0U;
 800b5b6:	2300      	movs	r3, #0
 800b5b8:	62bb      	str	r3, [r7, #40]	; 0x28
    uint32_t totalBytesReceived = 0U;
 800b5ba:	2300      	movs	r3, #0
 800b5bc:	627b      	str	r3, [r7, #36]	; 0x24
    uint32_t entryTimeMs = 0U;
 800b5be:	2300      	movs	r3, #0
 800b5c0:	61bb      	str	r3, [r7, #24]
    uint32_t elapsedTimeMs = 0U;
 800b5c2:	2300      	movs	r3, #0
 800b5c4:	617b      	str	r3, [r7, #20]
    MQTTGetCurrentTimeFunc_t getTimeStampMs = NULL;
 800b5c6:	2300      	movs	r3, #0
 800b5c8:	613b      	str	r3, [r7, #16]
    bool receiveError = false;
 800b5ca:	2300      	movs	r3, #0
 800b5cc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

    assert( pContext != NULL );
 800b5d0:	68fb      	ldr	r3, [r7, #12]
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	d106      	bne.n	800b5e4 <discardPacket+0x44>
 800b5d6:	4b2f      	ldr	r3, [pc, #188]	; (800b694 <discardPacket+0xf4>)
 800b5d8:	4a2f      	ldr	r2, [pc, #188]	; (800b698 <discardPacket+0xf8>)
 800b5da:	f240 410b 	movw	r1, #1035	; 0x40b
 800b5de:	482f      	ldr	r0, [pc, #188]	; (800b69c <discardPacket+0xfc>)
 800b5e0:	f006 fd0c 	bl	8011ffc <__assert_func>
    assert( pContext->getTime != NULL );
 800b5e4:	68fb      	ldr	r3, [r7, #12]
 800b5e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	d106      	bne.n	800b5fa <discardPacket+0x5a>
 800b5ec:	4b2c      	ldr	r3, [pc, #176]	; (800b6a0 <discardPacket+0x100>)
 800b5ee:	4a2a      	ldr	r2, [pc, #168]	; (800b698 <discardPacket+0xf8>)
 800b5f0:	f240 410c 	movw	r1, #1036	; 0x40c
 800b5f4:	4829      	ldr	r0, [pc, #164]	; (800b69c <discardPacket+0xfc>)
 800b5f6:	f006 fd01 	bl	8011ffc <__assert_func>

    bytesToReceive = pContext->networkBuffer.size;
 800b5fa:	68fb      	ldr	r3, [r7, #12]
 800b5fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5fe:	62bb      	str	r3, [r7, #40]	; 0x28
    getTimeStampMs = pContext->getTime;
 800b600:	68fb      	ldr	r3, [r7, #12]
 800b602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b604:	613b      	str	r3, [r7, #16]

    entryTimeMs = getTimeStampMs();
 800b606:	693b      	ldr	r3, [r7, #16]
 800b608:	4798      	blx	r3
 800b60a:	61b8      	str	r0, [r7, #24]

    while( ( totalBytesReceived < remainingLength ) && ( receiveError == false ) )
 800b60c:	e029      	b.n	800b662 <discardPacket+0xc2>
    {
        if( ( remainingLength - totalBytesReceived ) < bytesToReceive )
 800b60e:	68ba      	ldr	r2, [r7, #8]
 800b610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b612:	1ad3      	subs	r3, r2, r3
 800b614:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b616:	429a      	cmp	r2, r3
 800b618:	d903      	bls.n	800b622 <discardPacket+0x82>
        {
            bytesToReceive = remainingLength - totalBytesReceived;
 800b61a:	68ba      	ldr	r2, [r7, #8]
 800b61c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b61e:	1ad3      	subs	r3, r2, r3
 800b620:	62bb      	str	r3, [r7, #40]	; 0x28
        }

        bytesReceived = recvExact( pContext, bytesToReceive );
 800b622:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b624:	68f8      	ldr	r0, [r7, #12]
 800b626:	f7ff ff09 	bl	800b43c <recvExact>
 800b62a:	61f8      	str	r0, [r7, #28]

        if( bytesReceived != ( int32_t ) bytesToReceive )
 800b62c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b62e:	69fa      	ldr	r2, [r7, #28]
 800b630:	429a      	cmp	r2, r3
 800b632:	d003      	beq.n	800b63c <discardPacket+0x9c>
        {
            LogError( ( "Receive error while discarding packet."
                        "ReceivedBytes=%ld, ExpectedBytes=%lu.",
                        ( long int ) bytesReceived,
                        ( unsigned long ) bytesToReceive ) );
            receiveError = true;
 800b634:	2301      	movs	r3, #1
 800b636:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b63a:	e012      	b.n	800b662 <discardPacket+0xc2>
        }
        else
        {
            totalBytesReceived += ( uint32_t ) bytesReceived;
 800b63c:	69fb      	ldr	r3, [r7, #28]
 800b63e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b640:	4413      	add	r3, r2
 800b642:	627b      	str	r3, [r7, #36]	; 0x24

            elapsedTimeMs = calculateElapsedTime( getTimeStampMs(), entryTimeMs );
 800b644:	693b      	ldr	r3, [r7, #16]
 800b646:	4798      	blx	r3
 800b648:	4603      	mov	r3, r0
 800b64a:	69b9      	ldr	r1, [r7, #24]
 800b64c:	4618      	mov	r0, r3
 800b64e:	f7ff feb5 	bl	800b3bc <calculateElapsedTime>
 800b652:	6178      	str	r0, [r7, #20]

            /* Check for timeout. */
            if( elapsedTimeMs >= timeoutMs )
 800b654:	697a      	ldr	r2, [r7, #20]
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	429a      	cmp	r2, r3
 800b65a:	d302      	bcc.n	800b662 <discardPacket+0xc2>
            {
                LogError( ( "Time expired while discarding packet." ) );
                receiveError = true;
 800b65c:	2301      	movs	r3, #1
 800b65e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while( ( totalBytesReceived < remainingLength ) && ( receiveError == false ) )
 800b662:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b664:	68bb      	ldr	r3, [r7, #8]
 800b666:	429a      	cmp	r2, r3
 800b668:	d206      	bcs.n	800b678 <discardPacket+0xd8>
 800b66a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b66e:	f083 0301 	eor.w	r3, r3, #1
 800b672:	b2db      	uxtb	r3, r3
 800b674:	2b00      	cmp	r3, #0
 800b676:	d1ca      	bne.n	800b60e <discardPacket+0x6e>
            }
        }
    }

    if( totalBytesReceived == remainingLength )
 800b678:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b67a:	68bb      	ldr	r3, [r7, #8]
 800b67c:	429a      	cmp	r2, r3
 800b67e:	d102      	bne.n	800b686 <discardPacket+0xe6>
    {
        LogError( ( "Dumped packet. DumpedBytes=%lu.",
                    ( unsigned long ) totalBytesReceived ) );
        /* Packet dumped, so no data is available. */
        status = MQTTNoDataAvailable;
 800b680:	2307      	movs	r3, #7
 800b682:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }

    return status;
 800b686:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800b68a:	4618      	mov	r0, r3
 800b68c:	3730      	adds	r7, #48	; 0x30
 800b68e:	46bd      	mov	sp, r7
 800b690:	bd80      	pop	{r7, pc}
 800b692:	bf00      	nop
 800b694:	080145ac 	.word	0x080145ac
 800b698:	08015178 	.word	0x08015178
 800b69c:	080144d0 	.word	0x080144d0
 800b6a0:	080145d0 	.word	0x080145d0

0800b6a4 <discardStoredPacket>:

/*-----------------------------------------------------------*/

static MQTTStatus_t discardStoredPacket( MQTTContext_t * pContext,
                                         const MQTTPacketInfo_t * pPacketInfo )
{
 800b6a4:	b580      	push	{r7, lr}
 800b6a6:	b08a      	sub	sp, #40	; 0x28
 800b6a8:	af00      	add	r7, sp, #0
 800b6aa:	6078      	str	r0, [r7, #4]
 800b6ac:	6039      	str	r1, [r7, #0]
    MQTTStatus_t status = MQTTRecvFailed;
 800b6ae:	2304      	movs	r3, #4
 800b6b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    int32_t bytesReceived = 0;
 800b6b4:	2300      	movs	r3, #0
 800b6b6:	617b      	str	r3, [r7, #20]
    size_t bytesToReceive = 0U;
 800b6b8:	2300      	movs	r3, #0
 800b6ba:	623b      	str	r3, [r7, #32]
    uint32_t totalBytesReceived = 0U;
 800b6bc:	2300      	movs	r3, #0
 800b6be:	61fb      	str	r3, [r7, #28]
    bool receiveError = false;
 800b6c0:	2300      	movs	r3, #0
 800b6c2:	76fb      	strb	r3, [r7, #27]
    size_t mqttPacketSize = 0;
 800b6c4:	2300      	movs	r3, #0
 800b6c6:	613b      	str	r3, [r7, #16]
    size_t remainingLength;

    assert( pContext != NULL );
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	2b00      	cmp	r3, #0
 800b6cc:	d106      	bne.n	800b6dc <discardStoredPacket+0x38>
 800b6ce:	4b34      	ldr	r3, [pc, #208]	; (800b7a0 <discardStoredPacket+0xfc>)
 800b6d0:	4a34      	ldr	r2, [pc, #208]	; (800b7a4 <discardStoredPacket+0x100>)
 800b6d2:	f240 414b 	movw	r1, #1099	; 0x44b
 800b6d6:	4834      	ldr	r0, [pc, #208]	; (800b7a8 <discardStoredPacket+0x104>)
 800b6d8:	f006 fc90 	bl	8011ffc <__assert_func>
    assert( pPacketInfo != NULL );
 800b6dc:	683b      	ldr	r3, [r7, #0]
 800b6de:	2b00      	cmp	r3, #0
 800b6e0:	d106      	bne.n	800b6f0 <discardStoredPacket+0x4c>
 800b6e2:	4b32      	ldr	r3, [pc, #200]	; (800b7ac <discardStoredPacket+0x108>)
 800b6e4:	4a2f      	ldr	r2, [pc, #188]	; (800b7a4 <discardStoredPacket+0x100>)
 800b6e6:	f240 414c 	movw	r1, #1100	; 0x44c
 800b6ea:	482f      	ldr	r0, [pc, #188]	; (800b7a8 <discardStoredPacket+0x104>)
 800b6ec:	f006 fc86 	bl	8011ffc <__assert_func>

    mqttPacketSize = pPacketInfo->remainingLength + pPacketInfo->headerLength;
 800b6f0:	683b      	ldr	r3, [r7, #0]
 800b6f2:	689a      	ldr	r2, [r3, #8]
 800b6f4:	683b      	ldr	r3, [r7, #0]
 800b6f6:	68db      	ldr	r3, [r3, #12]
 800b6f8:	4413      	add	r3, r2
 800b6fa:	613b      	str	r3, [r7, #16]

    /* Assert that the packet being discarded is bigger than the
     * receive buffer. */
    assert( mqttPacketSize > pContext->networkBuffer.size );
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b700:	693a      	ldr	r2, [r7, #16]
 800b702:	429a      	cmp	r2, r3
 800b704:	d806      	bhi.n	800b714 <discardStoredPacket+0x70>
 800b706:	4b2a      	ldr	r3, [pc, #168]	; (800b7b0 <discardStoredPacket+0x10c>)
 800b708:	4a26      	ldr	r2, [pc, #152]	; (800b7a4 <discardStoredPacket+0x100>)
 800b70a:	f240 4152 	movw	r1, #1106	; 0x452
 800b70e:	4826      	ldr	r0, [pc, #152]	; (800b7a8 <discardStoredPacket+0x104>)
 800b710:	f006 fc74 	bl	8011ffc <__assert_func>

    /* Discard these many bytes at a time. */
    bytesToReceive = pContext->networkBuffer.size;
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b718:	623b      	str	r3, [r7, #32]

    /* Number of bytes depicted by 'index' have already been received. */
    remainingLength = mqttPacketSize - pContext->index;
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b71e:	693a      	ldr	r2, [r7, #16]
 800b720:	1ad3      	subs	r3, r2, r3
 800b722:	60fb      	str	r3, [r7, #12]

    while( ( totalBytesReceived < remainingLength ) && ( receiveError == false ) )
 800b724:	e019      	b.n	800b75a <discardStoredPacket+0xb6>
    {
        if( ( remainingLength - totalBytesReceived ) < bytesToReceive )
 800b726:	68fa      	ldr	r2, [r7, #12]
 800b728:	69fb      	ldr	r3, [r7, #28]
 800b72a:	1ad3      	subs	r3, r2, r3
 800b72c:	6a3a      	ldr	r2, [r7, #32]
 800b72e:	429a      	cmp	r2, r3
 800b730:	d903      	bls.n	800b73a <discardStoredPacket+0x96>
        {
            bytesToReceive = remainingLength - totalBytesReceived;
 800b732:	68fa      	ldr	r2, [r7, #12]
 800b734:	69fb      	ldr	r3, [r7, #28]
 800b736:	1ad3      	subs	r3, r2, r3
 800b738:	623b      	str	r3, [r7, #32]
        }

        bytesReceived = recvExact( pContext, bytesToReceive );
 800b73a:	6a39      	ldr	r1, [r7, #32]
 800b73c:	6878      	ldr	r0, [r7, #4]
 800b73e:	f7ff fe7d 	bl	800b43c <recvExact>
 800b742:	6178      	str	r0, [r7, #20]

        if( bytesReceived != ( int32_t ) bytesToReceive )
 800b744:	6a3b      	ldr	r3, [r7, #32]
 800b746:	697a      	ldr	r2, [r7, #20]
 800b748:	429a      	cmp	r2, r3
 800b74a:	d002      	beq.n	800b752 <discardStoredPacket+0xae>
        {
            LogError( ( "Receive error while discarding packet."
                        "ReceivedBytes=%ld, ExpectedBytes=%lu.",
                        ( long int ) bytesReceived,
                        ( unsigned long ) bytesToReceive ) );
            receiveError = true;
 800b74c:	2301      	movs	r3, #1
 800b74e:	76fb      	strb	r3, [r7, #27]
 800b750:	e003      	b.n	800b75a <discardStoredPacket+0xb6>
        }
        else
        {
            totalBytesReceived += ( uint32_t ) bytesReceived;
 800b752:	697b      	ldr	r3, [r7, #20]
 800b754:	69fa      	ldr	r2, [r7, #28]
 800b756:	4413      	add	r3, r2
 800b758:	61fb      	str	r3, [r7, #28]
    while( ( totalBytesReceived < remainingLength ) && ( receiveError == false ) )
 800b75a:	69fa      	ldr	r2, [r7, #28]
 800b75c:	68fb      	ldr	r3, [r7, #12]
 800b75e:	429a      	cmp	r2, r3
 800b760:	d205      	bcs.n	800b76e <discardStoredPacket+0xca>
 800b762:	7efb      	ldrb	r3, [r7, #27]
 800b764:	f083 0301 	eor.w	r3, r3, #1
 800b768:	b2db      	uxtb	r3, r3
 800b76a:	2b00      	cmp	r3, #0
 800b76c:	d1db      	bne.n	800b726 <discardStoredPacket+0x82>
        }
    }

    if( totalBytesReceived == remainingLength )
 800b76e:	69fa      	ldr	r2, [r7, #28]
 800b770:	68fb      	ldr	r3, [r7, #12]
 800b772:	429a      	cmp	r2, r3
 800b774:	d102      	bne.n	800b77c <discardStoredPacket+0xd8>
    {
        LogError( ( "Dumped packet. DumpedBytes=%lu.",
                    ( unsigned long ) totalBytesReceived ) );
        /* Packet dumped, so no data is available. */
        status = MQTTNoDataAvailable;
 800b776:	2307      	movs	r3, #7
 800b778:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* Clear the buffer */
    ( void ) memset( pContext->networkBuffer.pBuffer,
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	6a18      	ldr	r0, [r3, #32]
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b784:	461a      	mov	r2, r3
 800b786:	2100      	movs	r1, #0
 800b788:	f006 fdc3 	bl	8012312 <memset>
                     0,
                     pContext->networkBuffer.size );

    /* Reset the index. */
    pContext->index = 0;
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	2200      	movs	r2, #0
 800b790:	641a      	str	r2, [r3, #64]	; 0x40

    return status;
 800b792:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800b796:	4618      	mov	r0, r3
 800b798:	3728      	adds	r7, #40	; 0x28
 800b79a:	46bd      	mov	sp, r7
 800b79c:	bd80      	pop	{r7, pc}
 800b79e:	bf00      	nop
 800b7a0:	080145ac 	.word	0x080145ac
 800b7a4:	08015188 	.word	0x08015188
 800b7a8:	080144d0 	.word	0x080144d0
 800b7ac:	08014738 	.word	0x08014738
 800b7b0:	0801474c 	.word	0x0801474c

0800b7b4 <receivePacket>:
/*-----------------------------------------------------------*/

static MQTTStatus_t receivePacket( const MQTTContext_t * pContext,
                                   MQTTPacketInfo_t incomingPacket,
                                   uint32_t remainingTimeMs )
{
 800b7b4:	b084      	sub	sp, #16
 800b7b6:	b580      	push	{r7, lr}
 800b7b8:	b086      	sub	sp, #24
 800b7ba:	af00      	add	r7, sp, #0
 800b7bc:	6078      	str	r0, [r7, #4]
 800b7be:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800b7c2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    MQTTStatus_t status = MQTTSuccess;
 800b7c6:	2300      	movs	r3, #0
 800b7c8:	75fb      	strb	r3, [r7, #23]
    int32_t bytesReceived = 0;
 800b7ca:	2300      	movs	r3, #0
 800b7cc:	613b      	str	r3, [r7, #16]
    size_t bytesToReceive = 0U;
 800b7ce:	2300      	movs	r3, #0
 800b7d0:	60fb      	str	r3, [r7, #12]

    assert( pContext != NULL );
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	d106      	bne.n	800b7e6 <receivePacket+0x32>
 800b7d8:	4b1a      	ldr	r3, [pc, #104]	; (800b844 <receivePacket+0x90>)
 800b7da:	4a1b      	ldr	r2, [pc, #108]	; (800b848 <receivePacket+0x94>)
 800b7dc:	f240 418e 	movw	r1, #1166	; 0x48e
 800b7e0:	481a      	ldr	r0, [pc, #104]	; (800b84c <receivePacket+0x98>)
 800b7e2:	f006 fc0b 	bl	8011ffc <__assert_func>
    assert( pContext->networkBuffer.pBuffer != NULL );
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	6a1b      	ldr	r3, [r3, #32]
 800b7ea:	2b00      	cmp	r3, #0
 800b7ec:	d106      	bne.n	800b7fc <receivePacket+0x48>
 800b7ee:	4b18      	ldr	r3, [pc, #96]	; (800b850 <receivePacket+0x9c>)
 800b7f0:	4a15      	ldr	r2, [pc, #84]	; (800b848 <receivePacket+0x94>)
 800b7f2:	f240 418f 	movw	r1, #1167	; 0x48f
 800b7f6:	4815      	ldr	r0, [pc, #84]	; (800b84c <receivePacket+0x98>)
 800b7f8:	f006 fc00 	bl	8011ffc <__assert_func>

    if( incomingPacket.remainingLength > pContext->networkBuffer.size )
 800b7fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b802:	429a      	cmp	r2, r3
 800b804:	d908      	bls.n	800b818 <receivePacket+0x64>
        LogError( ( "Incoming packet will be dumped: "
                    "Packet length exceeds network buffer size."
                    "PacketSize=%lu, NetworkBufferSize=%lu.",
                    ( unsigned long ) incomingPacket.remainingLength,
                    ( unsigned long ) pContext->networkBuffer.size ) );
        status = discardPacket( pContext,
 800b806:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b808:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b80a:	4619      	mov	r1, r3
 800b80c:	6878      	ldr	r0, [r7, #4]
 800b80e:	f7ff fec7 	bl	800b5a0 <discardPacket>
 800b812:	4603      	mov	r3, r0
 800b814:	75fb      	strb	r3, [r7, #23]
 800b816:	e00c      	b.n	800b832 <receivePacket+0x7e>
                                incomingPacket.remainingLength,
                                remainingTimeMs );
    }
    else
    {
        bytesToReceive = incomingPacket.remainingLength;
 800b818:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b81a:	60fb      	str	r3, [r7, #12]
        bytesReceived = recvExact( pContext, bytesToReceive );
 800b81c:	68f9      	ldr	r1, [r7, #12]
 800b81e:	6878      	ldr	r0, [r7, #4]
 800b820:	f7ff fe0c 	bl	800b43c <recvExact>
 800b824:	6138      	str	r0, [r7, #16]

        if( bytesReceived == ( int32_t ) bytesToReceive )
 800b826:	68fb      	ldr	r3, [r7, #12]
 800b828:	693a      	ldr	r2, [r7, #16]
 800b82a:	429a      	cmp	r2, r3
 800b82c:	d001      	beq.n	800b832 <receivePacket+0x7e>
        {
            LogError( ( "Packet reception failed. ReceivedBytes=%ld, "
                        "ExpectedBytes=%lu.",
                        ( long int ) bytesReceived,
                        ( unsigned long ) bytesToReceive ) );
            status = MQTTRecvFailed;
 800b82e:	2304      	movs	r3, #4
 800b830:	75fb      	strb	r3, [r7, #23]
        }
    }

    return status;
 800b832:	7dfb      	ldrb	r3, [r7, #23]
}
 800b834:	4618      	mov	r0, r3
 800b836:	3718      	adds	r7, #24
 800b838:	46bd      	mov	sp, r7
 800b83a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b83e:	b004      	add	sp, #16
 800b840:	4770      	bx	lr
 800b842:	bf00      	nop
 800b844:	080145ac 	.word	0x080145ac
 800b848:	0801519c 	.word	0x0801519c
 800b84c:	080144d0 	.word	0x080144d0
 800b850:	080146e8 	.word	0x080146e8

0800b854 <getAckTypeToSend>:

/*-----------------------------------------------------------*/

static uint8_t getAckTypeToSend( MQTTPublishState_t state )
{
 800b854:	b480      	push	{r7}
 800b856:	b085      	sub	sp, #20
 800b858:	af00      	add	r7, sp, #0
 800b85a:	4603      	mov	r3, r0
 800b85c:	71fb      	strb	r3, [r7, #7]
    uint8_t packetTypeByte = 0U;
 800b85e:	2300      	movs	r3, #0
 800b860:	73fb      	strb	r3, [r7, #15]

    switch( state )
 800b862:	79fb      	ldrb	r3, [r7, #7]
 800b864:	3b02      	subs	r3, #2
 800b866:	2b03      	cmp	r3, #3
 800b868:	d816      	bhi.n	800b898 <getAckTypeToSend+0x44>
 800b86a:	a201      	add	r2, pc, #4	; (adr r2, 800b870 <getAckTypeToSend+0x1c>)
 800b86c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b870:	0800b881 	.word	0x0800b881
 800b874:	0800b887 	.word	0x0800b887
 800b878:	0800b88d 	.word	0x0800b88d
 800b87c:	0800b893 	.word	0x0800b893
    {
        case MQTTPubAckSend:
            packetTypeByte = MQTT_PACKET_TYPE_PUBACK;
 800b880:	2340      	movs	r3, #64	; 0x40
 800b882:	73fb      	strb	r3, [r7, #15]
            break;
 800b884:	e009      	b.n	800b89a <getAckTypeToSend+0x46>

        case MQTTPubRecSend:
            packetTypeByte = MQTT_PACKET_TYPE_PUBREC;
 800b886:	2350      	movs	r3, #80	; 0x50
 800b888:	73fb      	strb	r3, [r7, #15]
            break;
 800b88a:	e006      	b.n	800b89a <getAckTypeToSend+0x46>

        case MQTTPubRelSend:
            packetTypeByte = MQTT_PACKET_TYPE_PUBREL;
 800b88c:	2362      	movs	r3, #98	; 0x62
 800b88e:	73fb      	strb	r3, [r7, #15]
            break;
 800b890:	e003      	b.n	800b89a <getAckTypeToSend+0x46>

        case MQTTPubCompSend:
            packetTypeByte = MQTT_PACKET_TYPE_PUBCOMP;
 800b892:	2370      	movs	r3, #112	; 0x70
 800b894:	73fb      	strb	r3, [r7, #15]
            break;
 800b896:	e000      	b.n	800b89a <getAckTypeToSend+0x46>
        case MQTTPublishDone:
        case MQTTPublishSend:
        case MQTTStateNull:
        default:
            /* Take no action for states that do not require sending an ack. */
            break;
 800b898:	bf00      	nop
    }

    return packetTypeByte;
 800b89a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b89c:	4618      	mov	r0, r3
 800b89e:	3714      	adds	r7, #20
 800b8a0:	46bd      	mov	sp, r7
 800b8a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8a6:	4770      	bx	lr

0800b8a8 <sendPublishAcks>:
/*-----------------------------------------------------------*/

static MQTTStatus_t sendPublishAcks( MQTTContext_t * pContext,
                                     uint16_t packetId,
                                     MQTTPublishState_t publishState )
{
 800b8a8:	b580      	push	{r7, lr}
 800b8aa:	b08a      	sub	sp, #40	; 0x28
 800b8ac:	af02      	add	r7, sp, #8
 800b8ae:	6078      	str	r0, [r7, #4]
 800b8b0:	460b      	mov	r3, r1
 800b8b2:	807b      	strh	r3, [r7, #2]
 800b8b4:	4613      	mov	r3, r2
 800b8b6:	707b      	strb	r3, [r7, #1]
    MQTTStatus_t status = MQTTSuccess;
 800b8b8:	2300      	movs	r3, #0
 800b8ba:	77fb      	strb	r3, [r7, #31]
    MQTTPublishState_t newState = MQTTStateNull;
 800b8bc:	2300      	movs	r3, #0
 800b8be:	757b      	strb	r3, [r7, #21]
    int32_t sendResult = 0;
 800b8c0:	2300      	movs	r3, #0
 800b8c2:	61bb      	str	r3, [r7, #24]
    uint8_t packetTypeByte = 0U;
 800b8c4:	2300      	movs	r3, #0
 800b8c6:	75fb      	strb	r3, [r7, #23]
    MQTTPubAckType_t packetType;
    MQTTFixedBuffer_t localBuffer;
    uint8_t pubAckPacket[ MQTT_PUBLISH_ACK_PACKET_SIZE ];

    localBuffer.pBuffer = pubAckPacket;
 800b8c8:	f107 0308 	add.w	r3, r7, #8
 800b8cc:	60fb      	str	r3, [r7, #12]
    localBuffer.size = MQTT_PUBLISH_ACK_PACKET_SIZE;
 800b8ce:	2304      	movs	r3, #4
 800b8d0:	613b      	str	r3, [r7, #16]

    assert( pContext != NULL );
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	d106      	bne.n	800b8e6 <sendPublishAcks+0x3e>
 800b8d8:	4b21      	ldr	r3, [pc, #132]	; (800b960 <sendPublishAcks+0xb8>)
 800b8da:	4a22      	ldr	r2, [pc, #136]	; (800b964 <sendPublishAcks+0xbc>)
 800b8dc:	f240 41ec 	movw	r1, #1260	; 0x4ec
 800b8e0:	4821      	ldr	r0, [pc, #132]	; (800b968 <sendPublishAcks+0xc0>)
 800b8e2:	f006 fb8b 	bl	8011ffc <__assert_func>

    packetTypeByte = getAckTypeToSend( publishState );
 800b8e6:	787b      	ldrb	r3, [r7, #1]
 800b8e8:	4618      	mov	r0, r3
 800b8ea:	f7ff ffb3 	bl	800b854 <getAckTypeToSend>
 800b8ee:	4603      	mov	r3, r0
 800b8f0:	75fb      	strb	r3, [r7, #23]

    if( packetTypeByte != 0U )
 800b8f2:	7dfb      	ldrb	r3, [r7, #23]
 800b8f4:	2b00      	cmp	r3, #0
 800b8f6:	d02d      	beq.n	800b954 <sendPublishAcks+0xac>
    {
        packetType = getAckFromPacketType( packetTypeByte );
 800b8f8:	7dfb      	ldrb	r3, [r7, #23]
 800b8fa:	4618      	mov	r0, r3
 800b8fc:	f7ff fd6c 	bl	800b3d8 <getAckFromPacketType>
 800b900:	4603      	mov	r3, r0
 800b902:	75bb      	strb	r3, [r7, #22]

        status = MQTT_SerializeAck( &localBuffer,
 800b904:	887a      	ldrh	r2, [r7, #2]
 800b906:	7df9      	ldrb	r1, [r7, #23]
 800b908:	f107 030c 	add.w	r3, r7, #12
 800b90c:	4618      	mov	r0, r3
 800b90e:	f001 febc 	bl	800d68a <MQTT_SerializeAck>
 800b912:	4603      	mov	r3, r0
 800b914:	77fb      	strb	r3, [r7, #31]
                                    packetTypeByte,
                                    packetId );

        if( status == MQTTSuccess )
 800b916:	7ffb      	ldrb	r3, [r7, #31]
 800b918:	2b00      	cmp	r3, #0
 800b91a:	d106      	bne.n	800b92a <sendPublishAcks+0x82>
            MQTT_PRE_SEND_HOOK( pContext );

            /* Here, we are not using the vector approach for efficiency. There is just one buffer
             * to be sent which can be achieved with a normal send call. */
            sendResult = sendBuffer( pContext,
                                     localBuffer.pBuffer,
 800b91c:	68fb      	ldr	r3, [r7, #12]
            sendResult = sendBuffer( pContext,
 800b91e:	2204      	movs	r2, #4
 800b920:	4619      	mov	r1, r3
 800b922:	6878      	ldr	r0, [r7, #4]
 800b924:	f7ff fcbc 	bl	800b2a0 <sendBuffer>
 800b928:	61b8      	str	r0, [r7, #24]
                                     MQTT_PUBLISH_ACK_PACKET_SIZE );

            MQTT_POST_SEND_HOOK( pContext );
        }

        if( sendResult == ( int32_t ) MQTT_PUBLISH_ACK_PACKET_SIZE )
 800b92a:	69bb      	ldr	r3, [r7, #24]
 800b92c:	2b04      	cmp	r3, #4
 800b92e:	d10f      	bne.n	800b950 <sendPublishAcks+0xa8>
        {
            pContext->controlPacketSent = true;
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	2201      	movs	r2, #1
 800b934:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

            MQTT_PRE_STATE_UPDATE_HOOK( pContext );

            status = MQTT_UpdateStateAck( pContext,
 800b938:	7dba      	ldrb	r2, [r7, #22]
 800b93a:	8879      	ldrh	r1, [r7, #2]
 800b93c:	f107 0315 	add.w	r3, r7, #21
 800b940:	9300      	str	r3, [sp, #0]
 800b942:	2300      	movs	r3, #0
 800b944:	6878      	ldr	r0, [r7, #4]
 800b946:	f002 fd41 	bl	800e3cc <MQTT_UpdateStateAck>
 800b94a:	4603      	mov	r3, r0
 800b94c:	77fb      	strb	r3, [r7, #31]
 800b94e:	e001      	b.n	800b954 <sendPublishAcks+0xac>
        {
            LogError( ( "Failed to send ACK packet: PacketType=%02x, SentBytes=%ld, "
                        "PacketSize=%lu.",
                        ( unsigned int ) packetTypeByte, ( long int ) sendResult,
                        MQTT_PUBLISH_ACK_PACKET_SIZE ) );
            status = MQTTSendFailed;
 800b950:	2303      	movs	r3, #3
 800b952:	77fb      	strb	r3, [r7, #31]
        }
    }

    return status;
 800b954:	7ffb      	ldrb	r3, [r7, #31]
}
 800b956:	4618      	mov	r0, r3
 800b958:	3720      	adds	r7, #32
 800b95a:	46bd      	mov	sp, r7
 800b95c:	bd80      	pop	{r7, pc}
 800b95e:	bf00      	nop
 800b960:	080145ac 	.word	0x080145ac
 800b964:	080151ac 	.word	0x080151ac
 800b968:	080144d0 	.word	0x080144d0

0800b96c <handleKeepAlive>:

/*-----------------------------------------------------------*/

static MQTTStatus_t handleKeepAlive( MQTTContext_t * pContext )
{
 800b96c:	b580      	push	{r7, lr}
 800b96e:	b086      	sub	sp, #24
 800b970:	af00      	add	r7, sp, #0
 800b972:	6078      	str	r0, [r7, #4]
    MQTTStatus_t status = MQTTSuccess;
 800b974:	2300      	movs	r3, #0
 800b976:	75fb      	strb	r3, [r7, #23]
    uint32_t now = 0U;
 800b978:	2300      	movs	r3, #0
 800b97a:	60fb      	str	r3, [r7, #12]
    uint32_t packetTxTimeoutMs = 0U;
 800b97c:	2300      	movs	r3, #0
 800b97e:	613b      	str	r3, [r7, #16]

    assert( pContext != NULL );
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	2b00      	cmp	r3, #0
 800b984:	d106      	bne.n	800b994 <handleKeepAlive+0x28>
 800b986:	4b33      	ldr	r3, [pc, #204]	; (800ba54 <handleKeepAlive+0xe8>)
 800b988:	4a33      	ldr	r2, [pc, #204]	; (800ba58 <handleKeepAlive+0xec>)
 800b98a:	f240 512e 	movw	r1, #1326	; 0x52e
 800b98e:	4833      	ldr	r0, [pc, #204]	; (800ba5c <handleKeepAlive+0xf0>)
 800b990:	f006 fb34 	bl	8011ffc <__assert_func>
    assert( pContext->getTime != NULL );
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b998:	2b00      	cmp	r3, #0
 800b99a:	d106      	bne.n	800b9aa <handleKeepAlive+0x3e>
 800b99c:	4b30      	ldr	r3, [pc, #192]	; (800ba60 <handleKeepAlive+0xf4>)
 800b99e:	4a2e      	ldr	r2, [pc, #184]	; (800ba58 <handleKeepAlive+0xec>)
 800b9a0:	f240 512f 	movw	r1, #1327	; 0x52f
 800b9a4:	482d      	ldr	r0, [pc, #180]	; (800ba5c <handleKeepAlive+0xf0>)
 800b9a6:	f006 fb29 	bl	8011ffc <__assert_func>

    now = pContext->getTime();
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9ae:	4798      	blx	r3
 800b9b0:	60f8      	str	r0, [r7, #12]

    packetTxTimeoutMs = 1000U * ( uint32_t ) pContext->keepAliveIntervalSec;
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800b9b8:	461a      	mov	r2, r3
 800b9ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b9be:	fb02 f303 	mul.w	r3, r2, r3
 800b9c2:	613b      	str	r3, [r7, #16]

    if( PACKET_TX_TIMEOUT_MS < packetTxTimeoutMs )
 800b9c4:	693b      	ldr	r3, [r7, #16]
 800b9c6:	f247 5230 	movw	r2, #30000	; 0x7530
 800b9ca:	4293      	cmp	r3, r2
 800b9cc:	d902      	bls.n	800b9d4 <handleKeepAlive+0x68>
    {
        packetTxTimeoutMs = PACKET_TX_TIMEOUT_MS;
 800b9ce:	f247 5330 	movw	r3, #30000	; 0x7530
 800b9d2:	613b      	str	r3, [r7, #16]
    }

    /* If keep alive interval is 0, it is disabled. */
    if( pContext->waitingForPingResp == true )
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	d00d      	beq.n	800b9fa <handleKeepAlive+0x8e>
    {
        /* Has time expired? */
        if( calculateElapsedTime( now, pContext->pingReqSendTimeMs ) >
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b9e2:	4619      	mov	r1, r3
 800b9e4:	68f8      	ldr	r0, [r7, #12]
 800b9e6:	f7ff fce9 	bl	800b3bc <calculateElapsedTime>
 800b9ea:	4603      	mov	r3, r0
 800b9ec:	f241 3288 	movw	r2, #5000	; 0x1388
 800b9f0:	4293      	cmp	r3, r2
 800b9f2:	d929      	bls.n	800ba48 <handleKeepAlive+0xdc>
            MQTT_PINGRESP_TIMEOUT_MS )
        {
            status = MQTTKeepAliveTimeout;
 800b9f4:	230a      	movs	r3, #10
 800b9f6:	75fb      	strb	r3, [r7, #23]
 800b9f8:	e026      	b.n	800ba48 <handleKeepAlive+0xdc>
        }
    }
    else
    {
        if( ( packetTxTimeoutMs != 0U ) && ( calculateElapsedTime( now, pContext->lastPacketTxTime ) >= packetTxTimeoutMs ) )
 800b9fa:	693b      	ldr	r3, [r7, #16]
 800b9fc:	2b00      	cmp	r3, #0
 800b9fe:	d00f      	beq.n	800ba20 <handleKeepAlive+0xb4>
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ba04:	4619      	mov	r1, r3
 800ba06:	68f8      	ldr	r0, [r7, #12]
 800ba08:	f7ff fcd8 	bl	800b3bc <calculateElapsedTime>
 800ba0c:	4602      	mov	r2, r0
 800ba0e:	693b      	ldr	r3, [r7, #16]
 800ba10:	4293      	cmp	r3, r2
 800ba12:	d805      	bhi.n	800ba20 <handleKeepAlive+0xb4>
        {
            status = MQTT_Ping( pContext );
 800ba14:	6878      	ldr	r0, [r7, #4]
 800ba16:	f000 ff93 	bl	800c940 <MQTT_Ping>
 800ba1a:	4603      	mov	r3, r0
 800ba1c:	75fb      	strb	r3, [r7, #23]
 800ba1e:	e013      	b.n	800ba48 <handleKeepAlive+0xdc>
        }
        else
        {
            const uint32_t timeElapsed = calculateElapsedTime( now, pContext->lastPacketRxTime );
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba24:	4619      	mov	r1, r3
 800ba26:	68f8      	ldr	r0, [r7, #12]
 800ba28:	f7ff fcc8 	bl	800b3bc <calculateElapsedTime>
 800ba2c:	60b8      	str	r0, [r7, #8]

            if( ( timeElapsed != 0U ) && ( timeElapsed >= PACKET_RX_TIMEOUT_MS ) )
 800ba2e:	68bb      	ldr	r3, [r7, #8]
 800ba30:	2b00      	cmp	r3, #0
 800ba32:	d009      	beq.n	800ba48 <handleKeepAlive+0xdc>
 800ba34:	68bb      	ldr	r3, [r7, #8]
 800ba36:	f247 522f 	movw	r2, #29999	; 0x752f
 800ba3a:	4293      	cmp	r3, r2
 800ba3c:	d904      	bls.n	800ba48 <handleKeepAlive+0xdc>
            {
                status = MQTT_Ping( pContext );
 800ba3e:	6878      	ldr	r0, [r7, #4]
 800ba40:	f000 ff7e 	bl	800c940 <MQTT_Ping>
 800ba44:	4603      	mov	r3, r0
 800ba46:	75fb      	strb	r3, [r7, #23]
            }
        }
    }

    return status;
 800ba48:	7dfb      	ldrb	r3, [r7, #23]
}
 800ba4a:	4618      	mov	r0, r3
 800ba4c:	3718      	adds	r7, #24
 800ba4e:	46bd      	mov	sp, r7
 800ba50:	bd80      	pop	{r7, pc}
 800ba52:	bf00      	nop
 800ba54:	080145ac 	.word	0x080145ac
 800ba58:	080151bc 	.word	0x080151bc
 800ba5c:	080144d0 	.word	0x080144d0
 800ba60:	080145d0 	.word	0x080145d0

0800ba64 <handleIncomingPublish>:

/*-----------------------------------------------------------*/

static MQTTStatus_t handleIncomingPublish( MQTTContext_t * pContext,
                                           MQTTPacketInfo_t * pIncomingPacket )
{
 800ba64:	b580      	push	{r7, lr}
 800ba66:	b08e      	sub	sp, #56	; 0x38
 800ba68:	af02      	add	r7, sp, #8
 800ba6a:	6078      	str	r0, [r7, #4]
 800ba6c:	6039      	str	r1, [r7, #0]
    MQTTStatus_t status = MQTTBadParameter;
 800ba6e:	2301      	movs	r3, #1
 800ba70:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    MQTTPublishState_t publishRecordState = MQTTStateNull;
 800ba74:	2300      	movs	r3, #0
 800ba76:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    uint16_t packetIdentifier = 0U;
 800ba7a:	2300      	movs	r3, #0
 800ba7c:	857b      	strh	r3, [r7, #42]	; 0x2a
    MQTTPublishInfo_t publishInfo;
    MQTTDeserializedInfo_t deserializedInfo;
    bool duplicatePublish = false;
 800ba7e:	2300      	movs	r3, #0
 800ba80:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

    assert( pContext != NULL );
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	d106      	bne.n	800ba98 <handleIncomingPublish+0x34>
 800ba8a:	4b43      	ldr	r3, [pc, #268]	; (800bb98 <handleIncomingPublish+0x134>)
 800ba8c:	4a43      	ldr	r2, [pc, #268]	; (800bb9c <handleIncomingPublish+0x138>)
 800ba8e:	f240 5164 	movw	r1, #1380	; 0x564
 800ba92:	4843      	ldr	r0, [pc, #268]	; (800bba0 <handleIncomingPublish+0x13c>)
 800ba94:	f006 fab2 	bl	8011ffc <__assert_func>
    assert( pIncomingPacket != NULL );
 800ba98:	683b      	ldr	r3, [r7, #0]
 800ba9a:	2b00      	cmp	r3, #0
 800ba9c:	d106      	bne.n	800baac <handleIncomingPublish+0x48>
 800ba9e:	4b41      	ldr	r3, [pc, #260]	; (800bba4 <handleIncomingPublish+0x140>)
 800baa0:	4a3e      	ldr	r2, [pc, #248]	; (800bb9c <handleIncomingPublish+0x138>)
 800baa2:	f240 5165 	movw	r1, #1381	; 0x565
 800baa6:	483e      	ldr	r0, [pc, #248]	; (800bba0 <handleIncomingPublish+0x13c>)
 800baa8:	f006 faa8 	bl	8011ffc <__assert_func>
    assert( pContext->appCallback != NULL );
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bab0:	2b00      	cmp	r3, #0
 800bab2:	d106      	bne.n	800bac2 <handleIncomingPublish+0x5e>
 800bab4:	4b3c      	ldr	r3, [pc, #240]	; (800bba8 <handleIncomingPublish+0x144>)
 800bab6:	4a39      	ldr	r2, [pc, #228]	; (800bb9c <handleIncomingPublish+0x138>)
 800bab8:	f240 5166 	movw	r1, #1382	; 0x566
 800babc:	4838      	ldr	r0, [pc, #224]	; (800bba0 <handleIncomingPublish+0x13c>)
 800babe:	f006 fa9d 	bl	8011ffc <__assert_func>

    status = MQTT_DeserializePublish( pIncomingPacket, &packetIdentifier, &publishInfo );
 800bac2:	f107 0214 	add.w	r2, r7, #20
 800bac6:	f107 032a 	add.w	r3, r7, #42	; 0x2a
 800baca:	4619      	mov	r1, r3
 800bacc:	6838      	ldr	r0, [r7, #0]
 800bace:	f001 fe73 	bl	800d7b8 <MQTT_DeserializePublish>
 800bad2:	4603      	mov	r3, r0
 800bad4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    LogInfo( ( "De-serialized incoming PUBLISH packet: DeserializerResult=%s.",
               MQTT_Status_strerror( status ) ) );

    if( ( status == MQTTSuccess ) &&
 800bad8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800badc:	2b00      	cmp	r3, #0
 800bade:	d109      	bne.n	800baf4 <handleIncomingPublish+0x90>
        ( pContext->incomingPublishRecords == NULL ) &&
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	685b      	ldr	r3, [r3, #4]
    if( ( status == MQTTSuccess ) &&
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	d105      	bne.n	800baf4 <handleIncomingPublish+0x90>
        ( publishInfo.qos > MQTTQoS0 ) )
 800bae8:	7d3b      	ldrb	r3, [r7, #20]
        ( pContext->incomingPublishRecords == NULL ) &&
 800baea:	2b00      	cmp	r3, #0
 800baec:	d002      	beq.n	800baf4 <handleIncomingPublish+0x90>
    {
        LogError( ( "Incoming publish has QoS > MQTTQoS0 but incoming "
                    "publish records have not been initialized. Dropping the "
                    "incoming publish. Please call MQTT_InitStatefulQoS to enable "
                    "use of QoS1 and QoS2 publishes." ) );
        status = MQTTRecvFailed;
 800baee:	2304      	movs	r3, #4
 800baf0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }

    if( status == MQTTSuccess )
 800baf4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800baf8:	2b00      	cmp	r3, #0
 800bafa:	d122      	bne.n	800bb42 <handleIncomingPublish+0xde>
    {
        MQTT_PRE_STATE_UPDATE_HOOK( pContext );

        status = MQTT_UpdateStatePublish( pContext,
 800bafc:	8d79      	ldrh	r1, [r7, #42]	; 0x2a
 800bafe:	7d3a      	ldrb	r2, [r7, #20]
 800bb00:	f107 032d 	add.w	r3, r7, #45	; 0x2d
 800bb04:	9300      	str	r3, [sp, #0]
 800bb06:	4613      	mov	r3, r2
 800bb08:	2201      	movs	r2, #1
 800bb0a:	6878      	ldr	r0, [r7, #4]
 800bb0c:	f002 fbeb 	bl	800e2e6 <MQTT_UpdateStatePublish>
 800bb10:	4603      	mov	r3, r0
 800bb12:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                                          publishInfo.qos,
                                          &publishRecordState );

        MQTT_POST_STATE_UPDATE_HOOK( pContext );

        if( status == MQTTSuccess )
 800bb16:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bb1a:	2b00      	cmp	r3, #0
 800bb1c:	d011      	beq.n	800bb42 <handleIncomingPublish+0xde>
         *       sending out a duplicate publish with dup flag set, when a
         *       session is reestablished. It can result in a collision in
         *       state engine. This will be handled by ignoring the
         *       #MQTTStateCollision status from the state engine. The publish
         *       data is not passed to the application. */
        else if( status == MQTTStateCollision )
 800bb1e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bb22:	2b09      	cmp	r3, #9
 800bb24:	d10d      	bne.n	800bb42 <handleIncomingPublish+0xde>
        {
            status = MQTTSuccess;
 800bb26:	2300      	movs	r3, #0
 800bb28:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            duplicatePublish = true;
 800bb2c:	2301      	movs	r3, #1
 800bb2e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

            /* Calculate the state for the ack packet that needs to be sent out
             * for the duplicate incoming publish. */
            publishRecordState = MQTT_CalculateStatePublish( MQTT_RECEIVE,
 800bb32:	7d3b      	ldrb	r3, [r7, #20]
 800bb34:	4619      	mov	r1, r3
 800bb36:	2001      	movs	r0, #1
 800bb38:	f002 fba6 	bl	800e288 <MQTT_CalculateStatePublish>
 800bb3c:	4603      	mov	r3, r0
 800bb3e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
                        ( unsigned short ) packetIdentifier,
                        MQTT_Status_strerror( status ) ) );
        }
    }

    if( status == MQTTSuccess )
 800bb42:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bb46:	2b00      	cmp	r3, #0
 800bb48:	d11f      	bne.n	800bb8a <handleIncomingPublish+0x126>
    {
        /* Set fields of deserialized struct. */
        deserializedInfo.packetIdentifier = packetIdentifier;
 800bb4a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800bb4c:	813b      	strh	r3, [r7, #8]
        deserializedInfo.pPublishInfo = &publishInfo;
 800bb4e:	f107 0314 	add.w	r3, r7, #20
 800bb52:	60fb      	str	r3, [r7, #12]
        deserializedInfo.deserializationResult = status;
 800bb54:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bb58:	743b      	strb	r3, [r7, #16]

        /* Invoke application callback to hand the buffer over to application
         * before sending acks.
         * Application callback will be invoked for all publishes, except for
         * duplicate incoming publishes. */
        if( duplicatePublish == false )
 800bb5a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800bb5e:	f083 0301 	eor.w	r3, r3, #1
 800bb62:	b2db      	uxtb	r3, r3
 800bb64:	2b00      	cmp	r3, #0
 800bb66:	d006      	beq.n	800bb76 <handleIncomingPublish+0x112>
        {
            pContext->appCallback( pContext,
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bb6c:	f107 0208 	add.w	r2, r7, #8
 800bb70:	6839      	ldr	r1, [r7, #0]
 800bb72:	6878      	ldr	r0, [r7, #4]
 800bb74:	4798      	blx	r3
                                   pIncomingPacket,
                                   &deserializedInfo );
        }

        /* Send PUBACK or PUBREC if necessary. */
        status = sendPublishAcks( pContext,
 800bb76:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800bb78:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 800bb7c:	4619      	mov	r1, r3
 800bb7e:	6878      	ldr	r0, [r7, #4]
 800bb80:	f7ff fe92 	bl	800b8a8 <sendPublishAcks>
 800bb84:	4603      	mov	r3, r0
 800bb86:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                                  packetIdentifier,
                                  publishRecordState );
    }

    return status;
 800bb8a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800bb8e:	4618      	mov	r0, r3
 800bb90:	3730      	adds	r7, #48	; 0x30
 800bb92:	46bd      	mov	sp, r7
 800bb94:	bd80      	pop	{r7, pc}
 800bb96:	bf00      	nop
 800bb98:	080145ac 	.word	0x080145ac
 800bb9c:	080151cc 	.word	0x080151cc
 800bba0:	080144d0 	.word	0x080144d0
 800bba4:	0801477c 	.word	0x0801477c
 800bba8:	08014794 	.word	0x08014794

0800bbac <handlePublishAcks>:

/*-----------------------------------------------------------*/

static MQTTStatus_t handlePublishAcks( MQTTContext_t * pContext,
                                       MQTTPacketInfo_t * pIncomingPacket )
{
 800bbac:	b580      	push	{r7, lr}
 800bbae:	b08a      	sub	sp, #40	; 0x28
 800bbb0:	af02      	add	r7, sp, #8
 800bbb2:	6078      	str	r0, [r7, #4]
 800bbb4:	6039      	str	r1, [r7, #0]
    MQTTStatus_t status = MQTTBadResponse;
 800bbb6:	2305      	movs	r3, #5
 800bbb8:	77fb      	strb	r3, [r7, #31]
    MQTTPublishState_t publishRecordState = MQTTStateNull;
 800bbba:	2300      	movs	r3, #0
 800bbbc:	75bb      	strb	r3, [r7, #22]
    uint16_t packetIdentifier;
    MQTTPubAckType_t ackType;
    MQTTEventCallback_t appCallback;
    MQTTDeserializedInfo_t deserializedInfo;

    assert( pContext != NULL );
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	d106      	bne.n	800bbd2 <handlePublishAcks+0x26>
 800bbc4:	4b2c      	ldr	r3, [pc, #176]	; (800bc78 <handlePublishAcks+0xcc>)
 800bbc6:	4a2d      	ldr	r2, [pc, #180]	; (800bc7c <handlePublishAcks+0xd0>)
 800bbc8:	f240 51e5 	movw	r1, #1509	; 0x5e5
 800bbcc:	482c      	ldr	r0, [pc, #176]	; (800bc80 <handlePublishAcks+0xd4>)
 800bbce:	f006 fa15 	bl	8011ffc <__assert_func>
    assert( pIncomingPacket != NULL );
 800bbd2:	683b      	ldr	r3, [r7, #0]
 800bbd4:	2b00      	cmp	r3, #0
 800bbd6:	d106      	bne.n	800bbe6 <handlePublishAcks+0x3a>
 800bbd8:	4b2a      	ldr	r3, [pc, #168]	; (800bc84 <handlePublishAcks+0xd8>)
 800bbda:	4a28      	ldr	r2, [pc, #160]	; (800bc7c <handlePublishAcks+0xd0>)
 800bbdc:	f240 51e6 	movw	r1, #1510	; 0x5e6
 800bbe0:	4827      	ldr	r0, [pc, #156]	; (800bc80 <handlePublishAcks+0xd4>)
 800bbe2:	f006 fa0b 	bl	8011ffc <__assert_func>
    assert( pContext->appCallback != NULL );
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bbea:	2b00      	cmp	r3, #0
 800bbec:	d106      	bne.n	800bbfc <handlePublishAcks+0x50>
 800bbee:	4b26      	ldr	r3, [pc, #152]	; (800bc88 <handlePublishAcks+0xdc>)
 800bbf0:	4a22      	ldr	r2, [pc, #136]	; (800bc7c <handlePublishAcks+0xd0>)
 800bbf2:	f240 51e7 	movw	r1, #1511	; 0x5e7
 800bbf6:	4822      	ldr	r0, [pc, #136]	; (800bc80 <handlePublishAcks+0xd4>)
 800bbf8:	f006 fa00 	bl	8011ffc <__assert_func>

    appCallback = pContext->appCallback;
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc00:	61bb      	str	r3, [r7, #24]

    ackType = getAckFromPacketType( pIncomingPacket->type );
 800bc02:	683b      	ldr	r3, [r7, #0]
 800bc04:	781b      	ldrb	r3, [r3, #0]
 800bc06:	4618      	mov	r0, r3
 800bc08:	f7ff fbe6 	bl	800b3d8 <getAckFromPacketType>
 800bc0c:	4603      	mov	r3, r0
 800bc0e:	75fb      	strb	r3, [r7, #23]
    status = MQTT_DeserializeAck( pIncomingPacket, &packetIdentifier, NULL );
 800bc10:	f107 0314 	add.w	r3, r7, #20
 800bc14:	2200      	movs	r2, #0
 800bc16:	4619      	mov	r1, r3
 800bc18:	6838      	ldr	r0, [r7, #0]
 800bc1a:	f001 fdfd 	bl	800d818 <MQTT_DeserializeAck>
 800bc1e:	4603      	mov	r3, r0
 800bc20:	77fb      	strb	r3, [r7, #31]
    LogInfo( ( "Ack packet deserialized with result: %s.",
               MQTT_Status_strerror( status ) ) );

    if( status == MQTTSuccess )
 800bc22:	7ffb      	ldrb	r3, [r7, #31]
 800bc24:	2b00      	cmp	r3, #0
 800bc26:	d10a      	bne.n	800bc3e <handlePublishAcks+0x92>
    {
        MQTT_PRE_STATE_UPDATE_HOOK( pContext );

        status = MQTT_UpdateStateAck( pContext,
 800bc28:	8ab9      	ldrh	r1, [r7, #20]
 800bc2a:	7dfa      	ldrb	r2, [r7, #23]
 800bc2c:	f107 0316 	add.w	r3, r7, #22
 800bc30:	9300      	str	r3, [sp, #0]
 800bc32:	2301      	movs	r3, #1
 800bc34:	6878      	ldr	r0, [r7, #4]
 800bc36:	f002 fbc9 	bl	800e3cc <MQTT_UpdateStateAck>
 800bc3a:	4603      	mov	r3, r0
 800bc3c:	77fb      	strb	r3, [r7, #31]
                        ( unsigned short ) packetIdentifier,
                        MQTT_Status_strerror( status ) ) );
        }
    }

    if( status == MQTTSuccess )
 800bc3e:	7ffb      	ldrb	r3, [r7, #31]
 800bc40:	2b00      	cmp	r3, #0
 800bc42:	d113      	bne.n	800bc6c <handlePublishAcks+0xc0>
    {
        /* Set fields of deserialized struct. */
        deserializedInfo.packetIdentifier = packetIdentifier;
 800bc44:	8abb      	ldrh	r3, [r7, #20]
 800bc46:	813b      	strh	r3, [r7, #8]
        deserializedInfo.deserializationResult = status;
 800bc48:	7ffb      	ldrb	r3, [r7, #31]
 800bc4a:	743b      	strb	r3, [r7, #16]
        deserializedInfo.pPublishInfo = NULL;
 800bc4c:	2300      	movs	r3, #0
 800bc4e:	60fb      	str	r3, [r7, #12]

        /* Invoke application callback to hand the buffer over to application
         * before sending acks. */
        appCallback( pContext, pIncomingPacket, &deserializedInfo );
 800bc50:	f107 0208 	add.w	r2, r7, #8
 800bc54:	69bb      	ldr	r3, [r7, #24]
 800bc56:	6839      	ldr	r1, [r7, #0]
 800bc58:	6878      	ldr	r0, [r7, #4]
 800bc5a:	4798      	blx	r3

        /* Send PUBREL or PUBCOMP if necessary. */
        status = sendPublishAcks( pContext,
 800bc5c:	8abb      	ldrh	r3, [r7, #20]
 800bc5e:	7dba      	ldrb	r2, [r7, #22]
 800bc60:	4619      	mov	r1, r3
 800bc62:	6878      	ldr	r0, [r7, #4]
 800bc64:	f7ff fe20 	bl	800b8a8 <sendPublishAcks>
 800bc68:	4603      	mov	r3, r0
 800bc6a:	77fb      	strb	r3, [r7, #31]
                                  packetIdentifier,
                                  publishRecordState );
    }

    return status;
 800bc6c:	7ffb      	ldrb	r3, [r7, #31]
}
 800bc6e:	4618      	mov	r0, r3
 800bc70:	3720      	adds	r7, #32
 800bc72:	46bd      	mov	sp, r7
 800bc74:	bd80      	pop	{r7, pc}
 800bc76:	bf00      	nop
 800bc78:	080145ac 	.word	0x080145ac
 800bc7c:	080151e4 	.word	0x080151e4
 800bc80:	080144d0 	.word	0x080144d0
 800bc84:	0801477c 	.word	0x0801477c
 800bc88:	08014794 	.word	0x08014794

0800bc8c <handleIncomingAck>:
/*-----------------------------------------------------------*/

static MQTTStatus_t handleIncomingAck( MQTTContext_t * pContext,
                                       MQTTPacketInfo_t * pIncomingPacket,
                                       bool manageKeepAlive )
{
 800bc8c:	b580      	push	{r7, lr}
 800bc8e:	b08a      	sub	sp, #40	; 0x28
 800bc90:	af00      	add	r7, sp, #0
 800bc92:	60f8      	str	r0, [r7, #12]
 800bc94:	60b9      	str	r1, [r7, #8]
 800bc96:	4613      	mov	r3, r2
 800bc98:	71fb      	strb	r3, [r7, #7]
    MQTTStatus_t status = MQTTBadResponse;
 800bc9a:	2305      	movs	r3, #5
 800bc9c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    uint16_t packetIdentifier = MQTT_PACKET_ID_INVALID;
 800bca0:	2300      	movs	r3, #0
 800bca2:	83fb      	strh	r3, [r7, #30]
    /* We should always invoke the app callback unless we receive a PINGRESP
     * and are managing keep alive, or if we receive an unknown packet. We
     * initialize this to false since the callback must be invoked before
     * sending any PUBREL or PUBCOMP. However, for other cases, we invoke it
     * at the end to reduce the complexity of this function. */
    bool invokeAppCallback = false;
 800bca4:	2300      	movs	r3, #0
 800bca6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    MQTTEventCallback_t appCallback = NULL;
 800bcaa:	2300      	movs	r3, #0
 800bcac:	623b      	str	r3, [r7, #32]

    assert( pContext != NULL );
 800bcae:	68fb      	ldr	r3, [r7, #12]
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	d106      	bne.n	800bcc2 <handleIncomingAck+0x36>
 800bcb4:	4b54      	ldr	r3, [pc, #336]	; (800be08 <handleIncomingAck+0x17c>)
 800bcb6:	4a55      	ldr	r2, [pc, #340]	; (800be0c <handleIncomingAck+0x180>)
 800bcb8:	f44f 61c6 	mov.w	r1, #1584	; 0x630
 800bcbc:	4854      	ldr	r0, [pc, #336]	; (800be10 <handleIncomingAck+0x184>)
 800bcbe:	f006 f99d 	bl	8011ffc <__assert_func>
    assert( pIncomingPacket != NULL );
 800bcc2:	68bb      	ldr	r3, [r7, #8]
 800bcc4:	2b00      	cmp	r3, #0
 800bcc6:	d106      	bne.n	800bcd6 <handleIncomingAck+0x4a>
 800bcc8:	4b52      	ldr	r3, [pc, #328]	; (800be14 <handleIncomingAck+0x188>)
 800bcca:	4a50      	ldr	r2, [pc, #320]	; (800be0c <handleIncomingAck+0x180>)
 800bccc:	f240 6131 	movw	r1, #1585	; 0x631
 800bcd0:	484f      	ldr	r0, [pc, #316]	; (800be10 <handleIncomingAck+0x184>)
 800bcd2:	f006 f993 	bl	8011ffc <__assert_func>
    assert( pContext->appCallback != NULL );
 800bcd6:	68fb      	ldr	r3, [r7, #12]
 800bcd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bcda:	2b00      	cmp	r3, #0
 800bcdc:	d106      	bne.n	800bcec <handleIncomingAck+0x60>
 800bcde:	4b4e      	ldr	r3, [pc, #312]	; (800be18 <handleIncomingAck+0x18c>)
 800bce0:	4a4a      	ldr	r2, [pc, #296]	; (800be0c <handleIncomingAck+0x180>)
 800bce2:	f240 6132 	movw	r1, #1586	; 0x632
 800bce6:	484a      	ldr	r0, [pc, #296]	; (800be10 <handleIncomingAck+0x184>)
 800bce8:	f006 f988 	bl	8011ffc <__assert_func>

    appCallback = pContext->appCallback;
 800bcec:	68fb      	ldr	r3, [r7, #12]
 800bcee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bcf0:	623b      	str	r3, [r7, #32]

    LogDebug( ( "Received packet of type %02x.",
                ( unsigned int ) pIncomingPacket->type ) );

    switch( pIncomingPacket->type )
 800bcf2:	68bb      	ldr	r3, [r7, #8]
 800bcf4:	781b      	ldrb	r3, [r3, #0]
 800bcf6:	2bd0      	cmp	r3, #208	; 0xd0
 800bcf8:	d01d      	beq.n	800bd36 <handleIncomingAck+0xaa>
 800bcfa:	2bd0      	cmp	r3, #208	; 0xd0
 800bcfc:	dc64      	bgt.n	800bdc8 <handleIncomingAck+0x13c>
 800bcfe:	2bb0      	cmp	r3, #176	; 0xb0
 800bd00:	d044      	beq.n	800bd8c <handleIncomingAck+0x100>
 800bd02:	2bb0      	cmp	r3, #176	; 0xb0
 800bd04:	dc60      	bgt.n	800bdc8 <handleIncomingAck+0x13c>
 800bd06:	2b90      	cmp	r3, #144	; 0x90
 800bd08:	d040      	beq.n	800bd8c <handleIncomingAck+0x100>
 800bd0a:	2b90      	cmp	r3, #144	; 0x90
 800bd0c:	dc5c      	bgt.n	800bdc8 <handleIncomingAck+0x13c>
 800bd0e:	2b70      	cmp	r3, #112	; 0x70
 800bd10:	d009      	beq.n	800bd26 <handleIncomingAck+0x9a>
 800bd12:	2b70      	cmp	r3, #112	; 0x70
 800bd14:	dc58      	bgt.n	800bdc8 <handleIncomingAck+0x13c>
 800bd16:	2b62      	cmp	r3, #98	; 0x62
 800bd18:	d005      	beq.n	800bd26 <handleIncomingAck+0x9a>
 800bd1a:	2b62      	cmp	r3, #98	; 0x62
 800bd1c:	dc54      	bgt.n	800bdc8 <handleIncomingAck+0x13c>
 800bd1e:	2b40      	cmp	r3, #64	; 0x40
 800bd20:	d001      	beq.n	800bd26 <handleIncomingAck+0x9a>
 800bd22:	2b50      	cmp	r3, #80	; 0x50
 800bd24:	d150      	bne.n	800bdc8 <handleIncomingAck+0x13c>
        case MQTT_PACKET_TYPE_PUBREC:
        case MQTT_PACKET_TYPE_PUBREL:
        case MQTT_PACKET_TYPE_PUBCOMP:

            /* Handle all the publish acks. The app callback is invoked here. */
            status = handlePublishAcks( pContext, pIncomingPacket );
 800bd26:	68b9      	ldr	r1, [r7, #8]
 800bd28:	68f8      	ldr	r0, [r7, #12]
 800bd2a:	f7ff ff3f 	bl	800bbac <handlePublishAcks>
 800bd2e:	4603      	mov	r3, r0
 800bd30:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

            break;
 800bd34:	e04d      	b.n	800bdd2 <handleIncomingAck+0x146>

        case MQTT_PACKET_TYPE_PINGRESP:
            status = MQTT_DeserializeAck( pIncomingPacket, &packetIdentifier, NULL );
 800bd36:	f107 031e 	add.w	r3, r7, #30
 800bd3a:	2200      	movs	r2, #0
 800bd3c:	4619      	mov	r1, r3
 800bd3e:	68b8      	ldr	r0, [r7, #8]
 800bd40:	f001 fd6a 	bl	800d818 <MQTT_DeserializeAck>
 800bd44:	4603      	mov	r3, r0
 800bd46:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            invokeAppCallback = ( status == MQTTSuccess ) && !manageKeepAlive;
 800bd4a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bd4e:	2b00      	cmp	r3, #0
 800bd50:	d107      	bne.n	800bd62 <handleIncomingAck+0xd6>
 800bd52:	79fb      	ldrb	r3, [r7, #7]
 800bd54:	f083 0301 	eor.w	r3, r3, #1
 800bd58:	b2db      	uxtb	r3, r3
 800bd5a:	2b00      	cmp	r3, #0
 800bd5c:	d001      	beq.n	800bd62 <handleIncomingAck+0xd6>
 800bd5e:	2301      	movs	r3, #1
 800bd60:	e000      	b.n	800bd64 <handleIncomingAck+0xd8>
 800bd62:	2300      	movs	r3, #0
 800bd64:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800bd68:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800bd6c:	f003 0301 	and.w	r3, r3, #1
 800bd70:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

            if( ( status == MQTTSuccess ) && ( manageKeepAlive == true ) )
 800bd74:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	d129      	bne.n	800bdd0 <handleIncomingAck+0x144>
 800bd7c:	79fb      	ldrb	r3, [r7, #7]
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	d026      	beq.n	800bdd0 <handleIncomingAck+0x144>
            {
                pContext->waitingForPingResp = false;
 800bd82:	68fb      	ldr	r3, [r7, #12]
 800bd84:	2200      	movs	r2, #0
 800bd86:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            }

            break;
 800bd8a:	e021      	b.n	800bdd0 <handleIncomingAck+0x144>

        case MQTT_PACKET_TYPE_SUBACK:
        case MQTT_PACKET_TYPE_UNSUBACK:
            /* Deserialize and give these to the app provided callback. */
            status = MQTT_DeserializeAck( pIncomingPacket, &packetIdentifier, NULL );
 800bd8c:	f107 031e 	add.w	r3, r7, #30
 800bd90:	2200      	movs	r2, #0
 800bd92:	4619      	mov	r1, r3
 800bd94:	68b8      	ldr	r0, [r7, #8]
 800bd96:	f001 fd3f 	bl	800d818 <MQTT_DeserializeAck>
 800bd9a:	4603      	mov	r3, r0
 800bd9c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            invokeAppCallback = ( status == MQTTSuccess ) || ( status == MQTTServerRefused );
 800bda0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bda4:	2b00      	cmp	r3, #0
 800bda6:	d003      	beq.n	800bdb0 <handleIncomingAck+0x124>
 800bda8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bdac:	2b06      	cmp	r3, #6
 800bdae:	d101      	bne.n	800bdb4 <handleIncomingAck+0x128>
 800bdb0:	2301      	movs	r3, #1
 800bdb2:	e000      	b.n	800bdb6 <handleIncomingAck+0x12a>
 800bdb4:	2300      	movs	r3, #0
 800bdb6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800bdba:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800bdbe:	f003 0301 	and.w	r3, r3, #1
 800bdc2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            break;
 800bdc6:	e004      	b.n	800bdd2 <handleIncomingAck+0x146>

        default:
            /* Bad response from the server. */
            LogError( ( "Unexpected packet type from server: PacketType=%02x.",
                        ( unsigned int ) pIncomingPacket->type ) );
            status = MQTTBadResponse;
 800bdc8:	2305      	movs	r3, #5
 800bdca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800bdce:	e000      	b.n	800bdd2 <handleIncomingAck+0x146>
            break;
 800bdd0:	bf00      	nop
    }

    if( invokeAppCallback == true )
 800bdd2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800bdd6:	2b00      	cmp	r3, #0
 800bdd8:	d00f      	beq.n	800bdfa <handleIncomingAck+0x16e>
    {
        /* Set fields of deserialized struct. */
        deserializedInfo.packetIdentifier = packetIdentifier;
 800bdda:	8bfb      	ldrh	r3, [r7, #30]
 800bddc:	823b      	strh	r3, [r7, #16]
        deserializedInfo.deserializationResult = status;
 800bdde:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bde2:	763b      	strb	r3, [r7, #24]
        deserializedInfo.pPublishInfo = NULL;
 800bde4:	2300      	movs	r3, #0
 800bde6:	617b      	str	r3, [r7, #20]
        appCallback( pContext, pIncomingPacket, &deserializedInfo );
 800bde8:	f107 0210 	add.w	r2, r7, #16
 800bdec:	6a3b      	ldr	r3, [r7, #32]
 800bdee:	68b9      	ldr	r1, [r7, #8]
 800bdf0:	68f8      	ldr	r0, [r7, #12]
 800bdf2:	4798      	blx	r3
        /* In case a SUBACK indicated refusal, reset the status to continue the loop. */
        status = MQTTSuccess;
 800bdf4:	2300      	movs	r3, #0
 800bdf6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    return status;
 800bdfa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800bdfe:	4618      	mov	r0, r3
 800be00:	3728      	adds	r7, #40	; 0x28
 800be02:	46bd      	mov	sp, r7
 800be04:	bd80      	pop	{r7, pc}
 800be06:	bf00      	nop
 800be08:	080145ac 	.word	0x080145ac
 800be0c:	080151f8 	.word	0x080151f8
 800be10:	080144d0 	.word	0x080144d0
 800be14:	0801477c 	.word	0x0801477c
 800be18:	08014794 	.word	0x08014794

0800be1c <receiveSingleIteration>:
/*-----------------------------------------------------------*/

static MQTTStatus_t receiveSingleIteration( MQTTContext_t * pContext,
                                            bool manageKeepAlive )
{
 800be1c:	b590      	push	{r4, r7, lr}
 800be1e:	b08b      	sub	sp, #44	; 0x2c
 800be20:	af00      	add	r7, sp, #0
 800be22:	6078      	str	r0, [r7, #4]
 800be24:	460b      	mov	r3, r1
 800be26:	70fb      	strb	r3, [r7, #3]
    MQTTStatus_t status = MQTTSuccess;
 800be28:	2300      	movs	r3, #0
 800be2a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    MQTTPacketInfo_t incomingPacket = { 0 };
 800be2e:	f107 0308 	add.w	r3, r7, #8
 800be32:	2200      	movs	r2, #0
 800be34:	601a      	str	r2, [r3, #0]
 800be36:	605a      	str	r2, [r3, #4]
 800be38:	609a      	str	r2, [r3, #8]
 800be3a:	60da      	str	r2, [r3, #12]
    int32_t recvBytes;
    size_t totalMQTTPacketLength = 0;
 800be3c:	2300      	movs	r3, #0
 800be3e:	623b      	str	r3, [r7, #32]

    assert( pContext != NULL );
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	2b00      	cmp	r3, #0
 800be44:	d106      	bne.n	800be54 <receiveSingleIteration+0x38>
 800be46:	4b67      	ldr	r3, [pc, #412]	; (800bfe4 <receiveSingleIteration+0x1c8>)
 800be48:	4a67      	ldr	r2, [pc, #412]	; (800bfe8 <receiveSingleIteration+0x1cc>)
 800be4a:	f240 6176 	movw	r1, #1654	; 0x676
 800be4e:	4867      	ldr	r0, [pc, #412]	; (800bfec <receiveSingleIteration+0x1d0>)
 800be50:	f006 f8d4 	bl	8011ffc <__assert_func>
    assert( pContext->networkBuffer.pBuffer != NULL );
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	6a1b      	ldr	r3, [r3, #32]
 800be58:	2b00      	cmp	r3, #0
 800be5a:	d106      	bne.n	800be6a <receiveSingleIteration+0x4e>
 800be5c:	4b64      	ldr	r3, [pc, #400]	; (800bff0 <receiveSingleIteration+0x1d4>)
 800be5e:	4a62      	ldr	r2, [pc, #392]	; (800bfe8 <receiveSingleIteration+0x1cc>)
 800be60:	f240 6177 	movw	r1, #1655	; 0x677
 800be64:	4861      	ldr	r0, [pc, #388]	; (800bfec <receiveSingleIteration+0x1d0>)
 800be66:	f006 f8c9 	bl	8011ffc <__assert_func>

    /* Read as many bytes as possible into the network buffer. */
    recvBytes = pContext->transportInterface.recv( pContext->transportInterface.pNetworkContext,
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	691b      	ldr	r3, [r3, #16]
 800be6e:	687a      	ldr	r2, [r7, #4]
 800be70:	69d0      	ldr	r0, [r2, #28]
                                                   &( pContext->networkBuffer.pBuffer[ pContext->index ] ),
 800be72:	687a      	ldr	r2, [r7, #4]
 800be74:	6a11      	ldr	r1, [r2, #32]
 800be76:	687a      	ldr	r2, [r7, #4]
 800be78:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800be7a:	188c      	adds	r4, r1, r2
                                                   pContext->networkBuffer.size - pContext->index );
 800be7c:	687a      	ldr	r2, [r7, #4]
 800be7e:	6a51      	ldr	r1, [r2, #36]	; 0x24
 800be80:	687a      	ldr	r2, [r7, #4]
 800be82:	6c12      	ldr	r2, [r2, #64]	; 0x40
    recvBytes = pContext->transportInterface.recv( pContext->transportInterface.pNetworkContext,
 800be84:	1a8a      	subs	r2, r1, r2
 800be86:	4621      	mov	r1, r4
 800be88:	4798      	blx	r3
 800be8a:	61f8      	str	r0, [r7, #28]

    if( recvBytes < 0 )
 800be8c:	69fb      	ldr	r3, [r7, #28]
 800be8e:	2b00      	cmp	r3, #0
 800be90:	da03      	bge.n	800be9a <receiveSingleIteration+0x7e>
    {
        /* The receive function has failed. Bubble up the error up to the user. */
        status = MQTTRecvFailed;
 800be92:	2304      	movs	r3, #4
 800be94:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800be98:	e020      	b.n	800bedc <receiveSingleIteration+0xc0>
    }
    else if( ( recvBytes == 0 ) && ( pContext->index == 0U ) )
 800be9a:	69fb      	ldr	r3, [r7, #28]
 800be9c:	2b00      	cmp	r3, #0
 800be9e:	d107      	bne.n	800beb0 <receiveSingleIteration+0x94>
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bea4:	2b00      	cmp	r3, #0
 800bea6:	d103      	bne.n	800beb0 <receiveSingleIteration+0x94>
    {
        /* No more bytes available since the last read and neither is anything in
         * the buffer. */
        status = MQTTNoDataAvailable;
 800bea8:	2307      	movs	r3, #7
 800beaa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800beae:	e015      	b.n	800bedc <receiveSingleIteration+0xc0>
    /* Either something was received, or there is still data to be processed in the
     * buffer, or both. */
    else
    {
        /* Update the number of bytes in the MQTT fixed buffer. */
        pContext->index += ( size_t ) recvBytes;
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800beb4:	69fb      	ldr	r3, [r7, #28]
 800beb6:	441a      	add	r2, r3
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	641a      	str	r2, [r3, #64]	; 0x40

        status = MQTT_ProcessIncomingPacketTypeAndLength( pContext->networkBuffer.pBuffer,
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	6a18      	ldr	r0, [r3, #32]
                                                          &pContext->index,
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	3340      	adds	r3, #64	; 0x40
        status = MQTT_ProcessIncomingPacketTypeAndLength( pContext->networkBuffer.pBuffer,
 800bec4:	f107 0208 	add.w	r2, r7, #8
 800bec8:	4619      	mov	r1, r3
 800beca:	f001 fd5e 	bl	800d98a <MQTT_ProcessIncomingPacketTypeAndLength>
 800bece:	4603      	mov	r3, r0
 800bed0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                                                          &incomingPacket );

        totalMQTTPacketLength = incomingPacket.remainingLength + incomingPacket.headerLength;
 800bed4:	693a      	ldr	r2, [r7, #16]
 800bed6:	697b      	ldr	r3, [r7, #20]
 800bed8:	4413      	add	r3, r2
 800beda:	623b      	str	r3, [r7, #32]
    }

    /* No data was received, check for keep alive timeout. */
    if( recvBytes == 0 )
 800bedc:	69fb      	ldr	r3, [r7, #28]
 800bede:	2b00      	cmp	r3, #0
 800bee0:	d112      	bne.n	800bf08 <receiveSingleIteration+0xec>
    {
        if( manageKeepAlive == true )
 800bee2:	78fb      	ldrb	r3, [r7, #3]
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	d00f      	beq.n	800bf08 <receiveSingleIteration+0xec>
        {
            /* Keep the copy of the status to be reset later. */
            MQTTStatus_t statusCopy = status;
 800bee8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800beec:	76fb      	strb	r3, [r7, #27]

            /* Assign status so an error can be bubbled up to application,
             * but reset it on success. */
            status = handleKeepAlive( pContext );
 800beee:	6878      	ldr	r0, [r7, #4]
 800bef0:	f7ff fd3c 	bl	800b96c <handleKeepAlive>
 800bef4:	4603      	mov	r3, r0
 800bef6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

            if( status == MQTTSuccess )
 800befa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800befe:	2b00      	cmp	r3, #0
 800bf00:	d102      	bne.n	800bf08 <receiveSingleIteration+0xec>
            {
                /* Reset the status. */
                status = statusCopy;
 800bf02:	7efb      	ldrb	r3, [r7, #27]
 800bf04:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            }
        }
    }

    /* Check whether there is data available before processing the packet further. */
    if( ( status == MQTTNeedMoreBytes ) || ( status == MQTTNoDataAvailable ) )
 800bf08:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bf0c:	2b0b      	cmp	r3, #11
 800bf0e:	d01e      	beq.n	800bf4e <receiveSingleIteration+0x132>
 800bf10:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bf14:	2b07      	cmp	r3, #7
 800bf16:	d01a      	beq.n	800bf4e <receiveSingleIteration+0x132>
    {
        /* Do nothing as there is nothing to be processed right now. The proper
         * error code will be bubbled up to the user. */
    }
    /* Any other error code. */
    else if( status != MQTTSuccess )
 800bf18:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bf1c:	2b00      	cmp	r3, #0
 800bf1e:	d116      	bne.n	800bf4e <receiveSingleIteration+0x132>
    {
        LogError( ( "Call to receiveSingleIteration failed. Status=%s",
                    MQTT_Status_strerror( status ) ) );
    }
    /* If the MQTT Packet size is bigger than the buffer itself. */
    else if( totalMQTTPacketLength > pContext->networkBuffer.size )
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf24:	6a3a      	ldr	r2, [r7, #32]
 800bf26:	429a      	cmp	r2, r3
 800bf28:	d909      	bls.n	800bf3e <receiveSingleIteration+0x122>
    {
        /* Discard the packet from the receive buffer and drain the pending
         * data from the socket buffer. */
        status = discardStoredPacket( pContext,
 800bf2a:	f107 0308 	add.w	r3, r7, #8
 800bf2e:	4619      	mov	r1, r3
 800bf30:	6878      	ldr	r0, [r7, #4]
 800bf32:	f7ff fbb7 	bl	800b6a4 <discardStoredPacket>
 800bf36:	4603      	mov	r3, r0
 800bf38:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800bf3c:	e007      	b.n	800bf4e <receiveSingleIteration+0x132>
                                      &incomingPacket );
    }
    /* If the total packet is of more length than the bytes we have available. */
    else if( totalMQTTPacketLength > pContext->index )
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf42:	6a3a      	ldr	r2, [r7, #32]
 800bf44:	429a      	cmp	r2, r3
 800bf46:	d902      	bls.n	800bf4e <receiveSingleIteration+0x132>
    {
        status = MQTTNeedMoreBytes;
 800bf48:	230b      	movs	r3, #11
 800bf4a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    {
        /* MISRA else. */
    }

    /* Handle received packet. If incomplete data was read then this will not execute. */
    if( status == MQTTSuccess )
 800bf4e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bf52:	2b00      	cmp	r3, #0
 800bf54:	d138      	bne.n	800bfc8 <receiveSingleIteration+0x1ac>
    {
        incomingPacket.pRemainingData = &pContext->networkBuffer.pBuffer[ incomingPacket.headerLength ];
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	6a1a      	ldr	r2, [r3, #32]
 800bf5a:	697b      	ldr	r3, [r7, #20]
 800bf5c:	4413      	add	r3, r2
 800bf5e:	60fb      	str	r3, [r7, #12]

        /* PUBLISH packets allow flags in the lower four bits. For other
         * packet types, they are reserved. */
        if( ( incomingPacket.type & 0xF0U ) == MQTT_PACKET_TYPE_PUBLISH )
 800bf60:	7a3b      	ldrb	r3, [r7, #8]
 800bf62:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bf66:	2b30      	cmp	r3, #48	; 0x30
 800bf68:	d109      	bne.n	800bf7e <receiveSingleIteration+0x162>
        {
            status = handleIncomingPublish( pContext, &incomingPacket );
 800bf6a:	f107 0308 	add.w	r3, r7, #8
 800bf6e:	4619      	mov	r1, r3
 800bf70:	6878      	ldr	r0, [r7, #4]
 800bf72:	f7ff fd77 	bl	800ba64 <handleIncomingPublish>
 800bf76:	4603      	mov	r3, r0
 800bf78:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800bf7c:	e009      	b.n	800bf92 <receiveSingleIteration+0x176>
        }
        else
        {
            status = handleIncomingAck( pContext, &incomingPacket, manageKeepAlive );
 800bf7e:	78fa      	ldrb	r2, [r7, #3]
 800bf80:	f107 0308 	add.w	r3, r7, #8
 800bf84:	4619      	mov	r1, r3
 800bf86:	6878      	ldr	r0, [r7, #4]
 800bf88:	f7ff fe80 	bl	800bc8c <handleIncomingAck>
 800bf8c:	4603      	mov	r3, r0
 800bf8e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }

        /* Update the index to reflect the remaining bytes in the buffer.  */
        pContext->index -= totalMQTTPacketLength;
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800bf96:	6a3b      	ldr	r3, [r7, #32]
 800bf98:	1ad2      	subs	r2, r2, r3
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Move the remaining bytes to the front of the buffer. */
        ( void ) memmove( pContext->networkBuffer.pBuffer,
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	6a18      	ldr	r0, [r3, #32]
                          &( pContext->networkBuffer.pBuffer[ totalMQTTPacketLength ] ),
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	6a1a      	ldr	r2, [r3, #32]
 800bfa6:	6a3b      	ldr	r3, [r7, #32]
 800bfa8:	18d1      	adds	r1, r2, r3
        ( void ) memmove( pContext->networkBuffer.pBuffer,
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bfae:	461a      	mov	r2, r3
 800bfb0:	f006 f995 	bl	80122de <memmove>
                          pContext->index );

        if( status == MQTTSuccess )
 800bfb4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	d105      	bne.n	800bfc8 <receiveSingleIteration+0x1ac>
        {
            pContext->lastPacketRxTime = pContext->getTime();
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bfc0:	4798      	blx	r3
 800bfc2:	4602      	mov	r2, r0
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	639a      	str	r2, [r3, #56]	; 0x38
        }
    }

    if( status == MQTTNoDataAvailable )
 800bfc8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bfcc:	2b07      	cmp	r3, #7
 800bfce:	d102      	bne.n	800bfd6 <receiveSingleIteration+0x1ba>
    {
        /* No data available is not an error. Reset to MQTTSuccess so the
         * return code will indicate success. */
        status = MQTTSuccess;
 800bfd0:	2300      	movs	r3, #0
 800bfd2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    return status;
 800bfd6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800bfda:	4618      	mov	r0, r3
 800bfdc:	372c      	adds	r7, #44	; 0x2c
 800bfde:	46bd      	mov	sp, r7
 800bfe0:	bd90      	pop	{r4, r7, pc}
 800bfe2:	bf00      	nop
 800bfe4:	080145ac 	.word	0x080145ac
 800bfe8:	0801520c 	.word	0x0801520c
 800bfec:	080144d0 	.word	0x080144d0
 800bff0:	080146e8 	.word	0x080146e8

0800bff4 <validateSubscribeUnsubscribeParams>:

static MQTTStatus_t validateSubscribeUnsubscribeParams( const MQTTContext_t * pContext,
                                                        const MQTTSubscribeInfo_t * pSubscriptionList,
                                                        size_t subscriptionCount,
                                                        uint16_t packetId )
{
 800bff4:	b480      	push	{r7}
 800bff6:	b087      	sub	sp, #28
 800bff8:	af00      	add	r7, sp, #0
 800bffa:	60f8      	str	r0, [r7, #12]
 800bffc:	60b9      	str	r1, [r7, #8]
 800bffe:	607a      	str	r2, [r7, #4]
 800c000:	807b      	strh	r3, [r7, #2]
    MQTTStatus_t status = MQTTSuccess;
 800c002:	2300      	movs	r3, #0
 800c004:	75fb      	strb	r3, [r7, #23]
    size_t iterator;

    /* Validate all the parameters. */
    if( ( pContext == NULL ) || ( pSubscriptionList == NULL ) )
 800c006:	68fb      	ldr	r3, [r7, #12]
 800c008:	2b00      	cmp	r3, #0
 800c00a:	d002      	beq.n	800c012 <validateSubscribeUnsubscribeParams+0x1e>
 800c00c:	68bb      	ldr	r3, [r7, #8]
 800c00e:	2b00      	cmp	r3, #0
 800c010:	d102      	bne.n	800c018 <validateSubscribeUnsubscribeParams+0x24>
    {
        LogError( ( "Argument cannot be NULL: pContext=%p, "
                    "pSubscriptionList=%p.",
                    ( void * ) pContext,
                    ( void * ) pSubscriptionList ) );
        status = MQTTBadParameter;
 800c012:	2301      	movs	r3, #1
 800c014:	75fb      	strb	r3, [r7, #23]
 800c016:	e020      	b.n	800c05a <validateSubscribeUnsubscribeParams+0x66>
    }
    else if( subscriptionCount == 0UL )
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	2b00      	cmp	r3, #0
 800c01c:	d102      	bne.n	800c024 <validateSubscribeUnsubscribeParams+0x30>
    {
        LogError( ( "Subscription count is 0." ) );
        status = MQTTBadParameter;
 800c01e:	2301      	movs	r3, #1
 800c020:	75fb      	strb	r3, [r7, #23]
 800c022:	e01a      	b.n	800c05a <validateSubscribeUnsubscribeParams+0x66>
    }
    else if( packetId == 0U )
 800c024:	887b      	ldrh	r3, [r7, #2]
 800c026:	2b00      	cmp	r3, #0
 800c028:	d102      	bne.n	800c030 <validateSubscribeUnsubscribeParams+0x3c>
    {
        LogError( ( "Packet Id for subscription packet is 0." ) );
        status = MQTTBadParameter;
 800c02a:	2301      	movs	r3, #1
 800c02c:	75fb      	strb	r3, [r7, #23]
 800c02e:	e014      	b.n	800c05a <validateSubscribeUnsubscribeParams+0x66>
    }
    else
    {
        if( pContext->incomingPublishRecords == NULL )
 800c030:	68fb      	ldr	r3, [r7, #12]
 800c032:	685b      	ldr	r3, [r3, #4]
 800c034:	2b00      	cmp	r3, #0
 800c036:	d110      	bne.n	800c05a <validateSubscribeUnsubscribeParams+0x66>
        {
            for( iterator = 0; iterator < subscriptionCount; iterator++ )
 800c038:	2300      	movs	r3, #0
 800c03a:	613b      	str	r3, [r7, #16]
 800c03c:	e009      	b.n	800c052 <validateSubscribeUnsubscribeParams+0x5e>
            {
                if( pSubscriptionList->qos > MQTTQoS0 )
 800c03e:	68bb      	ldr	r3, [r7, #8]
 800c040:	781b      	ldrb	r3, [r3, #0]
 800c042:	2b00      	cmp	r3, #0
 800c044:	d002      	beq.n	800c04c <validateSubscribeUnsubscribeParams+0x58>
                {
                    LogError( ( "The incoming publish record list is not "
                                "initialised for QoS1/QoS2 records. Please call "
                                " MQTT_InitStatefulQoS to enable use of QoS1 and "
                                " QoS2 packets." ) );
                    status = MQTTBadParameter;
 800c046:	2301      	movs	r3, #1
 800c048:	75fb      	strb	r3, [r7, #23]
                    break;
 800c04a:	e006      	b.n	800c05a <validateSubscribeUnsubscribeParams+0x66>
            for( iterator = 0; iterator < subscriptionCount; iterator++ )
 800c04c:	693b      	ldr	r3, [r7, #16]
 800c04e:	3301      	adds	r3, #1
 800c050:	613b      	str	r3, [r7, #16]
 800c052:	693a      	ldr	r2, [r7, #16]
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	429a      	cmp	r2, r3
 800c058:	d3f1      	bcc.n	800c03e <validateSubscribeUnsubscribeParams+0x4a>
                }
            }
        }
    }

    return status;
 800c05a:	7dfb      	ldrb	r3, [r7, #23]
}
 800c05c:	4618      	mov	r0, r3
 800c05e:	371c      	adds	r7, #28
 800c060:	46bd      	mov	sp, r7
 800c062:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c066:	4770      	bx	lr

0800c068 <addEncodedStringToVector>:
static size_t addEncodedStringToVector( uint8_t serailizedLength[ 2 ],
                                        const char * const string,
                                        uint16_t length,
                                        TransportOutVector_t * iterator,
                                        size_t * updatedLength )
{
 800c068:	b580      	push	{r7, lr}
 800c06a:	b088      	sub	sp, #32
 800c06c:	af00      	add	r7, sp, #0
 800c06e:	60f8      	str	r0, [r7, #12]
 800c070:	60b9      	str	r1, [r7, #8]
 800c072:	603b      	str	r3, [r7, #0]
 800c074:	4613      	mov	r3, r2
 800c076:	80fb      	strh	r3, [r7, #6]
    size_t packetLength = 0U;
 800c078:	2300      	movs	r3, #0
 800c07a:	61fb      	str	r3, [r7, #28]
    const size_t seralizedLengthFieldSize = 2U;
 800c07c:	2302      	movs	r3, #2
 800c07e:	617b      	str	r3, [r7, #20]
    TransportOutVector_t * pLocalIterator = iterator;
 800c080:	683b      	ldr	r3, [r7, #0]
 800c082:	613b      	str	r3, [r7, #16]
    /* This function always adds 2 vectors. */
    size_t vectorsAdded = 0U;
 800c084:	2300      	movs	r3, #0
 800c086:	61bb      	str	r3, [r7, #24]

    /* When length is non-zero, the string must be non-NULL. */
    assert( ( length != 0U ) == ( string != NULL ) );
 800c088:	88fb      	ldrh	r3, [r7, #6]
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	bf0c      	ite	eq
 800c08e:	2301      	moveq	r3, #1
 800c090:	2300      	movne	r3, #0
 800c092:	b2da      	uxtb	r2, r3
 800c094:	68bb      	ldr	r3, [r7, #8]
 800c096:	2b00      	cmp	r3, #0
 800c098:	bf14      	ite	ne
 800c09a:	2301      	movne	r3, #1
 800c09c:	2300      	moveq	r3, #0
 800c09e:	b2db      	uxtb	r3, r3
 800c0a0:	4053      	eors	r3, r2
 800c0a2:	b2db      	uxtb	r3, r3
 800c0a4:	2b00      	cmp	r3, #0
 800c0a6:	d106      	bne.n	800c0b6 <addEncodedStringToVector+0x4e>
 800c0a8:	4b1e      	ldr	r3, [pc, #120]	; (800c124 <addEncodedStringToVector+0xbc>)
 800c0aa:	4a1f      	ldr	r2, [pc, #124]	; (800c128 <addEncodedStringToVector+0xc0>)
 800c0ac:	f240 7139 	movw	r1, #1849	; 0x739
 800c0b0:	481e      	ldr	r0, [pc, #120]	; (800c12c <addEncodedStringToVector+0xc4>)
 800c0b2:	f005 ffa3 	bl	8011ffc <__assert_func>

    serailizedLength[ 0 ] = ( ( uint8_t ) ( ( length ) >> 8 ) );
 800c0b6:	88fb      	ldrh	r3, [r7, #6]
 800c0b8:	0a1b      	lsrs	r3, r3, #8
 800c0ba:	b29b      	uxth	r3, r3
 800c0bc:	b2da      	uxtb	r2, r3
 800c0be:	68fb      	ldr	r3, [r7, #12]
 800c0c0:	701a      	strb	r2, [r3, #0]
    serailizedLength[ 1 ] = ( ( uint8_t ) ( ( length ) & 0x00ffU ) );
 800c0c2:	68fb      	ldr	r3, [r7, #12]
 800c0c4:	3301      	adds	r3, #1
 800c0c6:	88fa      	ldrh	r2, [r7, #6]
 800c0c8:	b2d2      	uxtb	r2, r2
 800c0ca:	701a      	strb	r2, [r3, #0]

    /* Add the serialized length of the string first. */
    pLocalIterator[ 0 ].iov_base = serailizedLength;
 800c0cc:	693b      	ldr	r3, [r7, #16]
 800c0ce:	68fa      	ldr	r2, [r7, #12]
 800c0d0:	601a      	str	r2, [r3, #0]
    pLocalIterator[ 0 ].iov_len = seralizedLengthFieldSize;
 800c0d2:	693b      	ldr	r3, [r7, #16]
 800c0d4:	697a      	ldr	r2, [r7, #20]
 800c0d6:	605a      	str	r2, [r3, #4]
    vectorsAdded++;
 800c0d8:	69bb      	ldr	r3, [r7, #24]
 800c0da:	3301      	adds	r3, #1
 800c0dc:	61bb      	str	r3, [r7, #24]
    packetLength = seralizedLengthFieldSize;
 800c0de:	697b      	ldr	r3, [r7, #20]
 800c0e0:	61fb      	str	r3, [r7, #28]

    /* Sometimes the string can be NULL that is, of 0 length. In that case,
     * only the length field should be encoded in the vector. */
    if( ( string != NULL ) && ( length != 0U ) )
 800c0e2:	68bb      	ldr	r3, [r7, #8]
 800c0e4:	2b00      	cmp	r3, #0
 800c0e6:	d011      	beq.n	800c10c <addEncodedStringToVector+0xa4>
 800c0e8:	88fb      	ldrh	r3, [r7, #6]
 800c0ea:	2b00      	cmp	r3, #0
 800c0ec:	d00e      	beq.n	800c10c <addEncodedStringToVector+0xa4>
    {
        /* Then add the pointer to the string itself. */
        pLocalIterator[ 1 ].iov_base = string;
 800c0ee:	693b      	ldr	r3, [r7, #16]
 800c0f0:	3308      	adds	r3, #8
 800c0f2:	68ba      	ldr	r2, [r7, #8]
 800c0f4:	601a      	str	r2, [r3, #0]
        pLocalIterator[ 1 ].iov_len = length;
 800c0f6:	693b      	ldr	r3, [r7, #16]
 800c0f8:	3308      	adds	r3, #8
 800c0fa:	88fa      	ldrh	r2, [r7, #6]
 800c0fc:	605a      	str	r2, [r3, #4]
        vectorsAdded++;
 800c0fe:	69bb      	ldr	r3, [r7, #24]
 800c100:	3301      	adds	r3, #1
 800c102:	61bb      	str	r3, [r7, #24]
        packetLength += length;
 800c104:	88fb      	ldrh	r3, [r7, #6]
 800c106:	69fa      	ldr	r2, [r7, #28]
 800c108:	4413      	add	r3, r2
 800c10a:	61fb      	str	r3, [r7, #28]
    }

    ( *updatedLength ) = ( *updatedLength ) + packetLength;
 800c10c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c10e:	681a      	ldr	r2, [r3, #0]
 800c110:	69fb      	ldr	r3, [r7, #28]
 800c112:	441a      	add	r2, r3
 800c114:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c116:	601a      	str	r2, [r3, #0]

    return vectorsAdded;
 800c118:	69bb      	ldr	r3, [r7, #24]
}
 800c11a:	4618      	mov	r0, r3
 800c11c:	3720      	adds	r7, #32
 800c11e:	46bd      	mov	sp, r7
 800c120:	bd80      	pop	{r7, pc}
 800c122:	bf00      	nop
 800c124:	080147b4 	.word	0x080147b4
 800c128:	08015224 	.word	0x08015224
 800c12c:	080144d0 	.word	0x080144d0

0800c130 <sendSubscribeWithoutCopy>:
static MQTTStatus_t sendSubscribeWithoutCopy( MQTTContext_t * pContext,
                                              const MQTTSubscribeInfo_t * pSubscriptionList,
                                              size_t subscriptionCount,
                                              uint16_t packetId,
                                              size_t remainingLength )
{
 800c130:	b580      	push	{r7, lr}
 800c132:	b09c      	sub	sp, #112	; 0x70
 800c134:	af02      	add	r7, sp, #8
 800c136:	60f8      	str	r0, [r7, #12]
 800c138:	60b9      	str	r1, [r7, #8]
 800c13a:	607a      	str	r2, [r7, #4]
 800c13c:	807b      	strh	r3, [r7, #2]
    MQTTStatus_t status = MQTTSuccess;
 800c13e:	2300      	movs	r3, #0
 800c140:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
    uint8_t subscribeheader[ 7 ];
    uint8_t * pIndex;
    TransportOutVector_t pIoVector[ MQTT_SUB_UNSUB_MAX_VECTORS ];
    TransportOutVector_t * pIterator;
    uint8_t serializedTopicFieldLength[ MQTT_SUB_UNSUB_MAX_VECTORS ][ 2 ];
    size_t totalPacketLength = 0U;
 800c144:	2300      	movs	r3, #0
 800c146:	617b      	str	r3, [r7, #20]
    size_t ioVectorLength = 0U;
 800c148:	2300      	movs	r3, #0
 800c14a:	65fb      	str	r3, [r7, #92]	; 0x5c
    size_t subscriptionsSent = 0U;
 800c14c:	2300      	movs	r3, #0
 800c14e:	65bb      	str	r3, [r7, #88]	; 0x58
    /* For subscribe, only three vector slots are required per topic string. */
    const size_t subscriptionStringVectorSlots = 3U;
 800c150:	2303      	movs	r3, #3
 800c152:	653b      	str	r3, [r7, #80]	; 0x50
    size_t vectorsAdded;
    size_t topicFieldLengthIndex;

    /* The vector array should be at least three element long as the topic
     * string needs these many vector elements to be stored. */
    assert( MQTT_SUB_UNSUB_MAX_VECTORS >= subscriptionStringVectorSlots );
 800c154:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c156:	2b04      	cmp	r3, #4
 800c158:	d906      	bls.n	800c168 <sendSubscribeWithoutCopy+0x38>
 800c15a:	4b4f      	ldr	r3, [pc, #316]	; (800c298 <sendSubscribeWithoutCopy+0x168>)
 800c15c:	4a4f      	ldr	r2, [pc, #316]	; (800c29c <sendSubscribeWithoutCopy+0x16c>)
 800c15e:	f240 716c 	movw	r1, #1900	; 0x76c
 800c162:	484f      	ldr	r0, [pc, #316]	; (800c2a0 <sendSubscribeWithoutCopy+0x170>)
 800c164:	f005 ff4a 	bl	8011ffc <__assert_func>

    pIndex = subscribeheader;
 800c168:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800c16c:	64fb      	str	r3, [r7, #76]	; 0x4c
    pIterator = pIoVector;
 800c16e:	f107 0320 	add.w	r3, r7, #32
 800c172:	663b      	str	r3, [r7, #96]	; 0x60

    pIndex = MQTT_SerializeSubscribeHeader( remainingLength,
 800c174:	887b      	ldrh	r3, [r7, #2]
 800c176:	461a      	mov	r2, r3
 800c178:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800c17a:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800c17c:	f001 fa5e 	bl	800d63c <MQTT_SerializeSubscribeHeader>
 800c180:	64f8      	str	r0, [r7, #76]	; 0x4c
                                            pIndex,
                                            packetId );

    /* The header is to be sent first. */
    pIterator->iov_base = subscribeheader;
 800c182:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c184:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800c188:	601a      	str	r2, [r3, #0]
    /* More details at: https://github.com/FreeRTOS/coreMQTT/blob/main/MISRA.md#rule-182 */
    /* More details at: https://github.com/FreeRTOS/coreMQTT/blob/main/MISRA.md#rule-108 */
    /* coverity[misra_c_2012_rule_18_2_violation] */
    /* coverity[misra_c_2012_rule_10_8_violation] */
    pIterator->iov_len = ( size_t ) ( pIndex - subscribeheader );
 800c18a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800c18e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c190:	1ad3      	subs	r3, r2, r3
 800c192:	461a      	mov	r2, r3
 800c194:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c196:	605a      	str	r2, [r3, #4]
    totalPacketLength += pIterator->iov_len;
 800c198:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c19a:	685a      	ldr	r2, [r3, #4]
 800c19c:	697b      	ldr	r3, [r7, #20]
 800c19e:	4413      	add	r3, r2
 800c1a0:	617b      	str	r3, [r7, #20]
    pIterator++;
 800c1a2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c1a4:	3308      	adds	r3, #8
 800c1a6:	663b      	str	r3, [r7, #96]	; 0x60
    ioVectorLength++;
 800c1a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c1aa:	3301      	adds	r3, #1
 800c1ac:	65fb      	str	r3, [r7, #92]	; 0x5c

    while( ( status == MQTTSuccess ) && ( subscriptionsSent < subscriptionCount ) )
 800c1ae:	e065      	b.n	800c27c <sendSubscribeWithoutCopy+0x14c>
    {
        /* Reset the index for next iteration. */
        topicFieldLengthIndex = 0;
 800c1b0:	2300      	movs	r3, #0
 800c1b2:	657b      	str	r3, [r7, #84]	; 0x54

        /* Check whether the subscription topic (with QoS) will fit in the
         * given vector. */
        while( ( ioVectorLength <= ( MQTT_SUB_UNSUB_MAX_VECTORS - subscriptionStringVectorSlots ) ) &&
 800c1b4:	e043      	b.n	800c23e <sendSubscribeWithoutCopy+0x10e>
               ( subscriptionsSent < subscriptionCount ) )
        {
            /* The topic filter gets sent next. */
            vectorsAdded = addEncodedStringToVector( serializedTopicFieldLength[ topicFieldLengthIndex ],
 800c1b6:	f107 0218 	add.w	r2, r7, #24
 800c1ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c1bc:	005b      	lsls	r3, r3, #1
 800c1be:	18d0      	adds	r0, r2, r3
                                                     pSubscriptionList[ subscriptionsSent ].pTopicFilter,
 800c1c0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c1c2:	4613      	mov	r3, r2
 800c1c4:	005b      	lsls	r3, r3, #1
 800c1c6:	4413      	add	r3, r2
 800c1c8:	009b      	lsls	r3, r3, #2
 800c1ca:	461a      	mov	r2, r3
 800c1cc:	68bb      	ldr	r3, [r7, #8]
 800c1ce:	4413      	add	r3, r2
            vectorsAdded = addEncodedStringToVector( serializedTopicFieldLength[ topicFieldLengthIndex ],
 800c1d0:	6859      	ldr	r1, [r3, #4]
                                                     pSubscriptionList[ subscriptionsSent ].topicFilterLength,
 800c1d2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c1d4:	4613      	mov	r3, r2
 800c1d6:	005b      	lsls	r3, r3, #1
 800c1d8:	4413      	add	r3, r2
 800c1da:	009b      	lsls	r3, r3, #2
 800c1dc:	461a      	mov	r2, r3
 800c1de:	68bb      	ldr	r3, [r7, #8]
 800c1e0:	4413      	add	r3, r2
            vectorsAdded = addEncodedStringToVector( serializedTopicFieldLength[ topicFieldLengthIndex ],
 800c1e2:	891a      	ldrh	r2, [r3, #8]
 800c1e4:	f107 0314 	add.w	r3, r7, #20
 800c1e8:	9300      	str	r3, [sp, #0]
 800c1ea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c1ec:	f7ff ff3c 	bl	800c068 <addEncodedStringToVector>
 800c1f0:	64b8      	str	r0, [r7, #72]	; 0x48
                                                     pIterator,
                                                     &totalPacketLength );

            /* Update the pointer after the above operation. */
            pIterator = &pIterator[ vectorsAdded ];
 800c1f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c1f4:	00db      	lsls	r3, r3, #3
 800c1f6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c1f8:	4413      	add	r3, r2
 800c1fa:	663b      	str	r3, [r7, #96]	; 0x60

            /* Lastly, the QoS gets sent. */
            pIterator->iov_base = &( pSubscriptionList[ subscriptionsSent ].qos );
 800c1fc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c1fe:	4613      	mov	r3, r2
 800c200:	005b      	lsls	r3, r3, #1
 800c202:	4413      	add	r3, r2
 800c204:	009b      	lsls	r3, r3, #2
 800c206:	461a      	mov	r2, r3
 800c208:	68bb      	ldr	r3, [r7, #8]
 800c20a:	4413      	add	r3, r2
 800c20c:	461a      	mov	r2, r3
 800c20e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c210:	601a      	str	r2, [r3, #0]
            pIterator->iov_len = 1U;
 800c212:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c214:	2201      	movs	r2, #1
 800c216:	605a      	str	r2, [r3, #4]
            totalPacketLength += pIterator->iov_len;
 800c218:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c21a:	685a      	ldr	r2, [r3, #4]
 800c21c:	697b      	ldr	r3, [r7, #20]
 800c21e:	4413      	add	r3, r2
 800c220:	617b      	str	r3, [r7, #20]

            /* Increment the pointer. */
            pIterator++;
 800c222:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c224:	3308      	adds	r3, #8
 800c226:	663b      	str	r3, [r7, #96]	; 0x60

            /* Two slots get used by the topic string length and topic string.
             * One slot gets used by the quality of service. */
            ioVectorLength += vectorsAdded + 1U;
 800c228:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c22a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c22c:	4413      	add	r3, r2
 800c22e:	3301      	adds	r3, #1
 800c230:	65fb      	str	r3, [r7, #92]	; 0x5c

            subscriptionsSent++;
 800c232:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c234:	3301      	adds	r3, #1
 800c236:	65bb      	str	r3, [r7, #88]	; 0x58

            /* The index needs to be updated for next iteration. */
            topicFieldLengthIndex++;
 800c238:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c23a:	3301      	adds	r3, #1
 800c23c:	657b      	str	r3, [r7, #84]	; 0x54
        while( ( ioVectorLength <= ( MQTT_SUB_UNSUB_MAX_VECTORS - subscriptionStringVectorSlots ) ) &&
 800c23e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c240:	f1c3 0304 	rsb	r3, r3, #4
 800c244:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c246:	429a      	cmp	r2, r3
 800c248:	d803      	bhi.n	800c252 <sendSubscribeWithoutCopy+0x122>
 800c24a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	429a      	cmp	r2, r3
 800c250:	d3b1      	bcc.n	800c1b6 <sendSubscribeWithoutCopy+0x86>
        }

        if( sendMessageVector( pContext,
 800c252:	f107 0320 	add.w	r3, r7, #32
 800c256:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c258:	4619      	mov	r1, r3
 800c25a:	68f8      	ldr	r0, [r7, #12]
 800c25c:	f7fe ff3a 	bl	800b0d4 <sendMessageVector>
 800c260:	4603      	mov	r3, r0
                               pIoVector,
                               ioVectorLength ) != ( int32_t ) totalPacketLength )
 800c262:	697a      	ldr	r2, [r7, #20]
        if( sendMessageVector( pContext,
 800c264:	4293      	cmp	r3, r2
 800c266:	d002      	beq.n	800c26e <sendSubscribeWithoutCopy+0x13e>
        {
            status = MQTTSendFailed;
 800c268:	2303      	movs	r3, #3
 800c26a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        }

        /* Update the iterator for the next potential loop iteration. */
        pIterator = pIoVector;
 800c26e:	f107 0320 	add.w	r3, r7, #32
 800c272:	663b      	str	r3, [r7, #96]	; 0x60
        /* Reset the vector length for the next potential loop iteration. */
        ioVectorLength = 0U;
 800c274:	2300      	movs	r3, #0
 800c276:	65fb      	str	r3, [r7, #92]	; 0x5c
        /* Reset the packet length for the next potential loop iteration. */
        totalPacketLength = 0U;
 800c278:	2300      	movs	r3, #0
 800c27a:	617b      	str	r3, [r7, #20]
    while( ( status == MQTTSuccess ) && ( subscriptionsSent < subscriptionCount ) )
 800c27c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800c280:	2b00      	cmp	r3, #0
 800c282:	d103      	bne.n	800c28c <sendSubscribeWithoutCopy+0x15c>
 800c284:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	429a      	cmp	r2, r3
 800c28a:	d391      	bcc.n	800c1b0 <sendSubscribeWithoutCopy+0x80>
    }

    return status;
 800c28c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800c290:	4618      	mov	r0, r3
 800c292:	3768      	adds	r7, #104	; 0x68
 800c294:	46bd      	mov	sp, r7
 800c296:	bd80      	pop	{r7, pc}
 800c298:	080147dc 	.word	0x080147dc
 800c29c:	08015240 	.word	0x08015240
 800c2a0:	080144d0 	.word	0x080144d0

0800c2a4 <sendConnectWithoutCopy>:

static MQTTStatus_t sendConnectWithoutCopy( MQTTContext_t * pContext,
                                            const MQTTConnectInfo_t * pConnectInfo,
                                            const MQTTPublishInfo_t * pWillInfo,
                                            size_t remainingLength )
{
 800c2a4:	b580      	push	{r7, lr}
 800c2a6:	b0ac      	sub	sp, #176	; 0xb0
 800c2a8:	af02      	add	r7, sp, #8
 800c2aa:	60f8      	str	r0, [r7, #12]
 800c2ac:	60b9      	str	r1, [r7, #8]
 800c2ae:	607a      	str	r2, [r7, #4]
 800c2b0:	603b      	str	r3, [r7, #0]
    MQTTStatus_t status = MQTTSuccess;
 800c2b2:	2300      	movs	r3, #0
 800c2b4:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
    TransportOutVector_t * iterator;
    size_t ioVectorLength = 0U;
 800c2b8:	2300      	movs	r3, #0
 800c2ba:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    size_t totalMessageLength = 0U;
 800c2be:	2300      	movs	r3, #0
 800c2c0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    int32_t bytesSentOrError;

    /* Connect packet header can be of maximum 15 bytes. */
    uint8_t connectPacketHeader[ 15 ];
    uint8_t * pIndex = connectPacketHeader;
 800c2c4:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800c2c8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    uint8_t serializedPayloadLength[ 2 ];
    uint8_t serializedUsernameLength[ 2 ];
    uint8_t serializedPasswordLength[ 2 ];
    size_t vectorsAdded;

    iterator = pIoVector;
 800c2cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c2d0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

    /* Validate arguments. */
    if( ( pWillInfo != NULL ) && ( pWillInfo->pTopicName == NULL ) )
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	2b00      	cmp	r3, #0
 800c2d8:	d007      	beq.n	800c2ea <sendConnectWithoutCopy+0x46>
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	685b      	ldr	r3, [r3, #4]
 800c2de:	2b00      	cmp	r3, #0
 800c2e0:	d103      	bne.n	800c2ea <sendConnectWithoutCopy+0x46>
    {
        LogError( ( "pWillInfo->pTopicName cannot be NULL if Will is present." ) );
        status = MQTTBadParameter;
 800c2e2:	2301      	movs	r3, #1
 800c2e4:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 800c2e8:	e0ec      	b.n	800c4c4 <sendConnectWithoutCopy+0x220>
    }
    else
    {
        pIndex = MQTT_SerializeConnectFixedHeader( pIndex,
 800c2ea:	683b      	ldr	r3, [r7, #0]
 800c2ec:	687a      	ldr	r2, [r7, #4]
 800c2ee:	68b9      	ldr	r1, [r7, #8]
 800c2f0:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 800c2f4:	f001 f894 	bl	800d420 <MQTT_SerializeConnectFixedHeader>
 800c2f8:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98
                                                   pConnectInfo,
                                                   pWillInfo,
                                                   remainingLength );

        assert( ( pIndex - connectPacketHeader ) <= 15 );
 800c2fc:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800c300:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800c304:	1ad3      	subs	r3, r2, r3
 800c306:	2b0f      	cmp	r3, #15
 800c308:	dd06      	ble.n	800c318 <sendConnectWithoutCopy+0x74>
 800c30a:	4b71      	ldr	r3, [pc, #452]	; (800c4d0 <sendConnectWithoutCopy+0x22c>)
 800c30c:	4a71      	ldr	r2, [pc, #452]	; (800c4d4 <sendConnectWithoutCopy+0x230>)
 800c30e:	f640 0172 	movw	r1, #2162	; 0x872
 800c312:	4871      	ldr	r0, [pc, #452]	; (800c4d8 <sendConnectWithoutCopy+0x234>)
 800c314:	f005 fe72 	bl	8011ffc <__assert_func>

        /* The header gets sent first. */
        iterator->iov_base = connectPacketHeader;
 800c318:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c31c:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 800c320:	601a      	str	r2, [r3, #0]
        /* More details at: https://github.com/FreeRTOS/coreMQTT/blob/main/MISRA.md#rule-182 */
        /* More details at: https://github.com/FreeRTOS/coreMQTT/blob/main/MISRA.md#rule-108 */
        /* coverity[misra_c_2012_rule_18_2_violation] */
        /* coverity[misra_c_2012_rule_10_8_violation] */
        iterator->iov_len = ( size_t ) ( pIndex - connectPacketHeader );
 800c322:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800c326:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800c32a:	1ad3      	subs	r3, r2, r3
 800c32c:	461a      	mov	r2, r3
 800c32e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c332:	605a      	str	r2, [r3, #4]
        totalMessageLength += iterator->iov_len;
 800c334:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c338:	685a      	ldr	r2, [r3, #4]
 800c33a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c33e:	4413      	add	r3, r2
 800c340:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
        iterator++;
 800c344:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c348:	3308      	adds	r3, #8
 800c34a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        ioVectorLength++;
 800c34e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c352:	3301      	adds	r3, #1
 800c354:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

        /* Serialize the client ID. */
        vectorsAdded = addEncodedStringToVector( serializedClientIDLength,
 800c358:	68bb      	ldr	r3, [r7, #8]
 800c35a:	6859      	ldr	r1, [r3, #4]
 800c35c:	68bb      	ldr	r3, [r7, #8]
 800c35e:	891a      	ldrh	r2, [r3, #8]
 800c360:	f107 0020 	add.w	r0, r7, #32
 800c364:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800c368:	9300      	str	r3, [sp, #0]
 800c36a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c36e:	f7ff fe7b 	bl	800c068 <addEncodedStringToVector>
 800c372:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
                                                 pConnectInfo->clientIdentifierLength,
                                                 iterator,
                                                 &totalMessageLength );

        /* Update the iterator to point to the next empty slot. */
        iterator = &iterator[ vectorsAdded ];
 800c376:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800c37a:	00db      	lsls	r3, r3, #3
 800c37c:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800c380:	4413      	add	r3, r2
 800c382:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        ioVectorLength += vectorsAdded;
 800c386:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800c38a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800c38e:	4413      	add	r3, r2
 800c390:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

        if( pWillInfo != NULL )
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	2b00      	cmp	r3, #0
 800c398:	d03c      	beq.n	800c414 <sendConnectWithoutCopy+0x170>
        {
            /* Serialize the topic. */
            vectorsAdded = addEncodedStringToVector( serializedTopicLength,
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	6859      	ldr	r1, [r3, #4]
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	891a      	ldrh	r2, [r3, #8]
 800c3a2:	f107 001c 	add.w	r0, r7, #28
 800c3a6:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800c3aa:	9300      	str	r3, [sp, #0]
 800c3ac:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c3b0:	f7ff fe5a 	bl	800c068 <addEncodedStringToVector>
 800c3b4:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
                                                     pWillInfo->topicNameLength,
                                                     iterator,
                                                     &totalMessageLength );

            /* Update the iterator to point to the next empty slot. */
            iterator = &iterator[ vectorsAdded ];
 800c3b8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800c3bc:	00db      	lsls	r3, r3, #3
 800c3be:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800c3c2:	4413      	add	r3, r2
 800c3c4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
            ioVectorLength += vectorsAdded;
 800c3c8:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800c3cc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800c3d0:	4413      	add	r3, r2
 800c3d2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c


            /* Serialize the payload. Payload of last will and testament can be NULL. */
            vectorsAdded = addEncodedStringToVector( serializedPayloadLength,
                                                     pWillInfo->pPayload,
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	68d9      	ldr	r1, [r3, #12]
                                                     ( uint16_t ) pWillInfo->payloadLength,
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	691b      	ldr	r3, [r3, #16]
            vectorsAdded = addEncodedStringToVector( serializedPayloadLength,
 800c3de:	b29a      	uxth	r2, r3
 800c3e0:	f107 0018 	add.w	r0, r7, #24
 800c3e4:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800c3e8:	9300      	str	r3, [sp, #0]
 800c3ea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c3ee:	f7ff fe3b 	bl	800c068 <addEncodedStringToVector>
 800c3f2:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
                                                     iterator,
                                                     &totalMessageLength );

            /* Update the iterator to point to the next empty slot. */
            iterator = &iterator[ vectorsAdded ];
 800c3f6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800c3fa:	00db      	lsls	r3, r3, #3
 800c3fc:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800c400:	4413      	add	r3, r2
 800c402:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
            ioVectorLength += vectorsAdded;
 800c406:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800c40a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800c40e:	4413      	add	r3, r2
 800c410:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        }

        /* Encode the user name if provided. */
        if( pConnectInfo->pUserName != NULL )
 800c414:	68bb      	ldr	r3, [r7, #8]
 800c416:	68db      	ldr	r3, [r3, #12]
 800c418:	2b00      	cmp	r3, #0
 800c41a:	d01d      	beq.n	800c458 <sendConnectWithoutCopy+0x1b4>
        {
            /* Serialize the user name string. */
            vectorsAdded = addEncodedStringToVector( serializedUsernameLength,
 800c41c:	68bb      	ldr	r3, [r7, #8]
 800c41e:	68d9      	ldr	r1, [r3, #12]
 800c420:	68bb      	ldr	r3, [r7, #8]
 800c422:	8a1a      	ldrh	r2, [r3, #16]
 800c424:	f107 0014 	add.w	r0, r7, #20
 800c428:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800c42c:	9300      	str	r3, [sp, #0]
 800c42e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c432:	f7ff fe19 	bl	800c068 <addEncodedStringToVector>
 800c436:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
                                                     pConnectInfo->userNameLength,
                                                     iterator,
                                                     &totalMessageLength );

            /* Update the iterator to point to the next empty slot. */
            iterator = &iterator[ vectorsAdded ];
 800c43a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800c43e:	00db      	lsls	r3, r3, #3
 800c440:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800c444:	4413      	add	r3, r2
 800c446:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
            ioVectorLength += vectorsAdded;
 800c44a:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800c44e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800c452:	4413      	add	r3, r2
 800c454:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        }

        /* Encode the password if provided. */
        if( pConnectInfo->pPassword != NULL )
 800c458:	68bb      	ldr	r3, [r7, #8]
 800c45a:	695b      	ldr	r3, [r3, #20]
 800c45c:	2b00      	cmp	r3, #0
 800c45e:	d01d      	beq.n	800c49c <sendConnectWithoutCopy+0x1f8>
        {
            /* Serialize the user name string. */
            vectorsAdded = addEncodedStringToVector( serializedPasswordLength,
 800c460:	68bb      	ldr	r3, [r7, #8]
 800c462:	6959      	ldr	r1, [r3, #20]
 800c464:	68bb      	ldr	r3, [r7, #8]
 800c466:	8b1a      	ldrh	r2, [r3, #24]
 800c468:	f107 0010 	add.w	r0, r7, #16
 800c46c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800c470:	9300      	str	r3, [sp, #0]
 800c472:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c476:	f7ff fdf7 	bl	800c068 <addEncodedStringToVector>
 800c47a:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
                                                     pConnectInfo->pPassword,
                                                     pConnectInfo->passwordLength,
                                                     iterator,
                                                     &totalMessageLength );
            /* Update the iterator to point to the next empty slot. */
            iterator = &iterator[ vectorsAdded ];
 800c47e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800c482:	00db      	lsls	r3, r3, #3
 800c484:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800c488:	4413      	add	r3, r2
 800c48a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
            ioVectorLength += vectorsAdded;
 800c48e:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800c492:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800c496:	4413      	add	r3, r2
 800c498:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        }

        bytesSentOrError = sendMessageVector( pContext, pIoVector, ioVectorLength );
 800c49c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c4a0:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800c4a4:	4619      	mov	r1, r3
 800c4a6:	68f8      	ldr	r0, [r7, #12]
 800c4a8:	f7fe fe14 	bl	800b0d4 <sendMessageVector>
 800c4ac:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90

        if( bytesSentOrError != ( int32_t ) totalMessageLength )
 800c4b0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c4b4:	461a      	mov	r2, r3
 800c4b6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c4ba:	4293      	cmp	r3, r2
 800c4bc:	d002      	beq.n	800c4c4 <sendConnectWithoutCopy+0x220>
        {
            status = MQTTSendFailed;
 800c4be:	2303      	movs	r3, #3
 800c4c0:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
        }
    }

    return status;
 800c4c4:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
}
 800c4c8:	4618      	mov	r0, r3
 800c4ca:	37a8      	adds	r7, #168	; 0xa8
 800c4cc:	46bd      	mov	sp, r7
 800c4ce:	bd80      	pop	{r7, pc}
 800c4d0:	08014854 	.word	0x08014854
 800c4d4:	0801525c 	.word	0x0801525c
 800c4d8:	080144d0 	.word	0x080144d0

0800c4dc <receiveConnack>:
static MQTTStatus_t receiveConnack( const MQTTContext_t * pContext,
                                    uint32_t timeoutMs,
                                    bool cleanSession,
                                    MQTTPacketInfo_t * pIncomingPacket,
                                    bool * pSessionPresent )
{
 800c4dc:	b580      	push	{r7, lr}
 800c4de:	b08c      	sub	sp, #48	; 0x30
 800c4e0:	af02      	add	r7, sp, #8
 800c4e2:	60f8      	str	r0, [r7, #12]
 800c4e4:	60b9      	str	r1, [r7, #8]
 800c4e6:	603b      	str	r3, [r7, #0]
 800c4e8:	4613      	mov	r3, r2
 800c4ea:	71fb      	strb	r3, [r7, #7]
    MQTTStatus_t status = MQTTSuccess;
 800c4ec:	2300      	movs	r3, #0
 800c4ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    MQTTGetCurrentTimeFunc_t getTimeStamp = NULL;
 800c4f2:	2300      	movs	r3, #0
 800c4f4:	61bb      	str	r3, [r7, #24]
    uint32_t entryTimeMs = 0U, remainingTimeMs = 0U, timeTakenMs = 0U;
 800c4f6:	2300      	movs	r3, #0
 800c4f8:	617b      	str	r3, [r7, #20]
 800c4fa:	2300      	movs	r3, #0
 800c4fc:	623b      	str	r3, [r7, #32]
 800c4fe:	2300      	movs	r3, #0
 800c500:	613b      	str	r3, [r7, #16]
    bool breakFromLoop = false;
 800c502:	2300      	movs	r3, #0
 800c504:	77fb      	strb	r3, [r7, #31]
    uint16_t loopCount = 0U;
 800c506:	2300      	movs	r3, #0
 800c508:	83bb      	strh	r3, [r7, #28]

    assert( pContext != NULL );
 800c50a:	68fb      	ldr	r3, [r7, #12]
 800c50c:	2b00      	cmp	r3, #0
 800c50e:	d106      	bne.n	800c51e <receiveConnack+0x42>
 800c510:	4b4e      	ldr	r3, [pc, #312]	; (800c64c <receiveConnack+0x170>)
 800c512:	4a4f      	ldr	r2, [pc, #316]	; (800c650 <receiveConnack+0x174>)
 800c514:	f640 01da 	movw	r1, #2266	; 0x8da
 800c518:	484e      	ldr	r0, [pc, #312]	; (800c654 <receiveConnack+0x178>)
 800c51a:	f005 fd6f 	bl	8011ffc <__assert_func>
    assert( pIncomingPacket != NULL );
 800c51e:	683b      	ldr	r3, [r7, #0]
 800c520:	2b00      	cmp	r3, #0
 800c522:	d106      	bne.n	800c532 <receiveConnack+0x56>
 800c524:	4b4c      	ldr	r3, [pc, #304]	; (800c658 <receiveConnack+0x17c>)
 800c526:	4a4a      	ldr	r2, [pc, #296]	; (800c650 <receiveConnack+0x174>)
 800c528:	f640 01db 	movw	r1, #2267	; 0x8db
 800c52c:	4849      	ldr	r0, [pc, #292]	; (800c654 <receiveConnack+0x178>)
 800c52e:	f005 fd65 	bl	8011ffc <__assert_func>
    assert( pContext->getTime != NULL );
 800c532:	68fb      	ldr	r3, [r7, #12]
 800c534:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c536:	2b00      	cmp	r3, #0
 800c538:	d106      	bne.n	800c548 <receiveConnack+0x6c>
 800c53a:	4b48      	ldr	r3, [pc, #288]	; (800c65c <receiveConnack+0x180>)
 800c53c:	4a44      	ldr	r2, [pc, #272]	; (800c650 <receiveConnack+0x174>)
 800c53e:	f640 01dc 	movw	r1, #2268	; 0x8dc
 800c542:	4844      	ldr	r0, [pc, #272]	; (800c654 <receiveConnack+0x178>)
 800c544:	f005 fd5a 	bl	8011ffc <__assert_func>

    getTimeStamp = pContext->getTime;
 800c548:	68fb      	ldr	r3, [r7, #12]
 800c54a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c54c:	61bb      	str	r3, [r7, #24]

    /* Get the entry time for the function. */
    entryTimeMs = getTimeStamp();
 800c54e:	69bb      	ldr	r3, [r7, #24]
 800c550:	4798      	blx	r3
 800c552:	6178      	str	r0, [r7, #20]
    {
        /* Transport read for incoming CONNACK packet type and length.
         * MQTT_GetIncomingPacketTypeAndLength is a blocking call and it is
         * returned after a transport receive timeout, an error, or a successful
         * receive of packet type and length. */
        status = MQTT_GetIncomingPacketTypeAndLength( pContext->transportInterface.recv,
 800c554:	68fb      	ldr	r3, [r7, #12]
 800c556:	6918      	ldr	r0, [r3, #16]
 800c558:	68fb      	ldr	r3, [r7, #12]
 800c55a:	69db      	ldr	r3, [r3, #28]
 800c55c:	683a      	ldr	r2, [r7, #0]
 800c55e:	4619      	mov	r1, r3
 800c560:	f001 f9cd 	bl	800d8fe <MQTT_GetIncomingPacketTypeAndLength>
 800c564:	4603      	mov	r3, r0
 800c566:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
         * 2. If timeoutMs is 0:
         *    Loop times out based on the maximum number of retries config
         *    MQTT_MAX_CONNACK_RECEIVE_RETRY_COUNT. This config will control
         *    maximum the number of retry attempts to read the CONNACK packet.
         *    A value of 0 for the config will try once to read CONNACK. */
        if( timeoutMs > 0U )
 800c56a:	68bb      	ldr	r3, [r7, #8]
 800c56c:	2b00      	cmp	r3, #0
 800c56e:	d00e      	beq.n	800c58e <receiveConnack+0xb2>
        {
            breakFromLoop = calculateElapsedTime( getTimeStamp(), entryTimeMs ) >= timeoutMs;
 800c570:	69bb      	ldr	r3, [r7, #24]
 800c572:	4798      	blx	r3
 800c574:	4603      	mov	r3, r0
 800c576:	6979      	ldr	r1, [r7, #20]
 800c578:	4618      	mov	r0, r3
 800c57a:	f7fe ff1f 	bl	800b3bc <calculateElapsedTime>
 800c57e:	4602      	mov	r2, r0
 800c580:	68bb      	ldr	r3, [r7, #8]
 800c582:	4293      	cmp	r3, r2
 800c584:	bf94      	ite	ls
 800c586:	2301      	movls	r3, #1
 800c588:	2300      	movhi	r3, #0
 800c58a:	77fb      	strb	r3, [r7, #31]
 800c58c:	e008      	b.n	800c5a0 <receiveConnack+0xc4>
        }
        else
        {
            breakFromLoop = loopCount >= MQTT_MAX_CONNACK_RECEIVE_RETRY_COUNT;
 800c58e:	8bbb      	ldrh	r3, [r7, #28]
 800c590:	2b04      	cmp	r3, #4
 800c592:	bf8c      	ite	hi
 800c594:	2301      	movhi	r3, #1
 800c596:	2300      	movls	r3, #0
 800c598:	77fb      	strb	r3, [r7, #31]
            loopCount++;
 800c59a:	8bbb      	ldrh	r3, [r7, #28]
 800c59c:	3301      	adds	r3, #1
 800c59e:	83bb      	strh	r3, [r7, #28]
        }

        /* Loop until there is data to read or if we have exceeded the timeout/retries. */
    } while( ( status == MQTTNoDataAvailable ) && ( breakFromLoop == false ) );
 800c5a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c5a4:	2b07      	cmp	r3, #7
 800c5a6:	d105      	bne.n	800c5b4 <receiveConnack+0xd8>
 800c5a8:	7ffb      	ldrb	r3, [r7, #31]
 800c5aa:	f083 0301 	eor.w	r3, r3, #1
 800c5ae:	b2db      	uxtb	r3, r3
 800c5b0:	2b00      	cmp	r3, #0
 800c5b2:	d1cf      	bne.n	800c554 <receiveConnack+0x78>

    if( status == MQTTSuccess )
 800c5b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c5b8:	2b00      	cmp	r3, #0
 800c5ba:	d123      	bne.n	800c604 <receiveConnack+0x128>
    {
        /* Time taken in this function so far. */
        timeTakenMs = calculateElapsedTime( getTimeStamp(), entryTimeMs );
 800c5bc:	69bb      	ldr	r3, [r7, #24]
 800c5be:	4798      	blx	r3
 800c5c0:	4603      	mov	r3, r0
 800c5c2:	6979      	ldr	r1, [r7, #20]
 800c5c4:	4618      	mov	r0, r3
 800c5c6:	f7fe fef9 	bl	800b3bc <calculateElapsedTime>
 800c5ca:	6138      	str	r0, [r7, #16]

        if( timeTakenMs < timeoutMs )
 800c5cc:	693a      	ldr	r2, [r7, #16]
 800c5ce:	68bb      	ldr	r3, [r7, #8]
 800c5d0:	429a      	cmp	r2, r3
 800c5d2:	d203      	bcs.n	800c5dc <receiveConnack+0x100>
        {
            /* Calculate remaining time for receiving the remainder of
             * the packet. */
            remainingTimeMs = timeoutMs - timeTakenMs;
 800c5d4:	68ba      	ldr	r2, [r7, #8]
 800c5d6:	693b      	ldr	r3, [r7, #16]
 800c5d8:	1ad3      	subs	r3, r2, r3
 800c5da:	623b      	str	r3, [r7, #32]
         * Invoking receivePacket with remainingTime as 0 would attempt to
         * recv from network once. If using retries, the remainder of the
         * CONNACK packet is tried to be read only once. Reading once would be
         * good as the packet type and remaining length was already read. Hence,
         * the probability of the remaining 2 bytes available to read is very high. */
        if( pIncomingPacket->type == MQTT_PACKET_TYPE_CONNACK )
 800c5dc:	683b      	ldr	r3, [r7, #0]
 800c5de:	781b      	ldrb	r3, [r3, #0]
 800c5e0:	2b20      	cmp	r3, #32
 800c5e2:	d10c      	bne.n	800c5fe <receiveConnack+0x122>
        {
            status = receivePacket( pContext,
 800c5e4:	683b      	ldr	r3, [r7, #0]
 800c5e6:	6a3a      	ldr	r2, [r7, #32]
 800c5e8:	9201      	str	r2, [sp, #4]
 800c5ea:	68da      	ldr	r2, [r3, #12]
 800c5ec:	9200      	str	r2, [sp, #0]
 800c5ee:	cb0e      	ldmia	r3, {r1, r2, r3}
 800c5f0:	68f8      	ldr	r0, [r7, #12]
 800c5f2:	f7ff f8df 	bl	800b7b4 <receivePacket>
 800c5f6:	4603      	mov	r3, r0
 800c5f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c5fc:	e002      	b.n	800c604 <receiveConnack+0x128>
        {
            LogError( ( "Incorrect packet type %X received while expecting"
                        " CONNACK(%X).",
                        ( unsigned int ) pIncomingPacket->type,
                        MQTT_PACKET_TYPE_CONNACK ) );
            status = MQTTBadResponse;
 800c5fe:	2305      	movs	r3, #5
 800c600:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
    }

    if( status == MQTTSuccess )
 800c604:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c608:	2b00      	cmp	r3, #0
 800c60a:	d10b      	bne.n	800c624 <receiveConnack+0x148>
    {
        /* Update the packet info pointer to the buffer read. */
        pIncomingPacket->pRemainingData = pContext->networkBuffer.pBuffer;
 800c60c:	68fb      	ldr	r3, [r7, #12]
 800c60e:	6a1a      	ldr	r2, [r3, #32]
 800c610:	683b      	ldr	r3, [r7, #0]
 800c612:	605a      	str	r2, [r3, #4]

        /* Deserialize CONNACK. */
        status = MQTT_DeserializeAck( pIncomingPacket, NULL, pSessionPresent );
 800c614:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c616:	2100      	movs	r1, #0
 800c618:	6838      	ldr	r0, [r7, #0]
 800c61a:	f001 f8fd 	bl	800d818 <MQTT_DeserializeAck>
 800c61e:	4603      	mov	r3, r0
 800c620:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If a clean session is requested, a session present should not be set by
     * broker. */
    if( status == MQTTSuccess )
 800c624:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c628:	2b00      	cmp	r3, #0
 800c62a:	d109      	bne.n	800c640 <receiveConnack+0x164>
    {
        if( ( cleanSession == true ) && ( *pSessionPresent == true ) )
 800c62c:	79fb      	ldrb	r3, [r7, #7]
 800c62e:	2b00      	cmp	r3, #0
 800c630:	d006      	beq.n	800c640 <receiveConnack+0x164>
 800c632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c634:	781b      	ldrb	r3, [r3, #0]
 800c636:	2b00      	cmp	r3, #0
 800c638:	d002      	beq.n	800c640 <receiveConnack+0x164>
        {
            LogError( ( "Unexpected session present flag in CONNACK response from broker."
                        " CONNECT request with clean session was made with broker." ) );
            status = MQTTBadResponse;
 800c63a:	2305      	movs	r3, #5
 800c63c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    {
        LogError( ( "CONNACK recv failed with status = %s.",
                    MQTT_Status_strerror( status ) ) );
    }

    return status;
 800c640:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800c644:	4618      	mov	r0, r3
 800c646:	3728      	adds	r7, #40	; 0x28
 800c648:	46bd      	mov	sp, r7
 800c64a:	bd80      	pop	{r7, pc}
 800c64c:	080145ac 	.word	0x080145ac
 800c650:	08015274 	.word	0x08015274
 800c654:	080144d0 	.word	0x080144d0
 800c658:	0801477c 	.word	0x0801477c
 800c65c:	080145d0 	.word	0x080145d0

0800c660 <handleSessionResumption>:

/*-----------------------------------------------------------*/

static MQTTStatus_t handleSessionResumption( MQTTContext_t * pContext,
                                             bool sessionPresent )
{
 800c660:	b580      	push	{r7, lr}
 800c662:	b086      	sub	sp, #24
 800c664:	af00      	add	r7, sp, #0
 800c666:	6078      	str	r0, [r7, #4]
 800c668:	460b      	mov	r3, r1
 800c66a:	70fb      	strb	r3, [r7, #3]
    MQTTStatus_t status = MQTTSuccess;
 800c66c:	2300      	movs	r3, #0
 800c66e:	75fb      	strb	r3, [r7, #23]
    MQTTStateCursor_t cursor = MQTT_STATE_CURSOR_INITIALIZER;
 800c670:	2300      	movs	r3, #0
 800c672:	613b      	str	r3, [r7, #16]
    uint16_t packetId = MQTT_PACKET_ID_INVALID;
 800c674:	2300      	movs	r3, #0
 800c676:	82bb      	strh	r3, [r7, #20]
    MQTTPublishState_t state = MQTTStateNull;
 800c678:	2300      	movs	r3, #0
 800c67a:	73fb      	strb	r3, [r7, #15]

    assert( pContext != NULL );
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	2b00      	cmp	r3, #0
 800c680:	d106      	bne.n	800c690 <handleSessionResumption+0x30>
 800c682:	4b2c      	ldr	r3, [pc, #176]	; (800c734 <handleSessionResumption+0xd4>)
 800c684:	4a2c      	ldr	r2, [pc, #176]	; (800c738 <handleSessionResumption+0xd8>)
 800c686:	f640 1152 	movw	r1, #2386	; 0x952
 800c68a:	482c      	ldr	r0, [pc, #176]	; (800c73c <handleSessionResumption+0xdc>)
 800c68c:	f005 fcb6 	bl	8011ffc <__assert_func>

    /* Reset the index and clear the buffer when a new session is established. */
    pContext->index = 0;
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	2200      	movs	r2, #0
 800c694:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) memset( pContext->networkBuffer.pBuffer, 0, pContext->networkBuffer.size );
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	6a18      	ldr	r0, [r3, #32]
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c69e:	461a      	mov	r2, r3
 800c6a0:	2100      	movs	r1, #0
 800c6a2:	f005 fe36 	bl	8012312 <memset>

    if( sessionPresent == true )
 800c6a6:	78fb      	ldrb	r3, [r7, #3]
 800c6a8:	2b00      	cmp	r3, #0
 800c6aa:	d023      	beq.n	800c6f4 <handleSessionResumption+0x94>
    {
        /* Get the next packet ID for which a PUBREL need to be resent. */
        packetId = MQTT_PubrelToResend( pContext, &cursor, &state );
 800c6ac:	f107 020f 	add.w	r2, r7, #15
 800c6b0:	f107 0310 	add.w	r3, r7, #16
 800c6b4:	4619      	mov	r1, r3
 800c6b6:	6878      	ldr	r0, [r7, #4]
 800c6b8:	f001 ff03 	bl	800e4c2 <MQTT_PubrelToResend>
 800c6bc:	4603      	mov	r3, r0
 800c6be:	82bb      	strh	r3, [r7, #20]

        /* Resend all the PUBREL acks after session is reestablished. */
        while( ( packetId != MQTT_PACKET_ID_INVALID ) &&
 800c6c0:	e011      	b.n	800c6e6 <handleSessionResumption+0x86>
               ( status == MQTTSuccess ) )
        {
            status = sendPublishAcks( pContext, packetId, state );
 800c6c2:	7bfa      	ldrb	r2, [r7, #15]
 800c6c4:	8abb      	ldrh	r3, [r7, #20]
 800c6c6:	4619      	mov	r1, r3
 800c6c8:	6878      	ldr	r0, [r7, #4]
 800c6ca:	f7ff f8ed 	bl	800b8a8 <sendPublishAcks>
 800c6ce:	4603      	mov	r3, r0
 800c6d0:	75fb      	strb	r3, [r7, #23]

            packetId = MQTT_PubrelToResend( pContext, &cursor, &state );
 800c6d2:	f107 020f 	add.w	r2, r7, #15
 800c6d6:	f107 0310 	add.w	r3, r7, #16
 800c6da:	4619      	mov	r1, r3
 800c6dc:	6878      	ldr	r0, [r7, #4]
 800c6de:	f001 fef0 	bl	800e4c2 <MQTT_PubrelToResend>
 800c6e2:	4603      	mov	r3, r0
 800c6e4:	82bb      	strh	r3, [r7, #20]
        while( ( packetId != MQTT_PACKET_ID_INVALID ) &&
 800c6e6:	8abb      	ldrh	r3, [r7, #20]
 800c6e8:	2b00      	cmp	r3, #0
 800c6ea:	d01d      	beq.n	800c728 <handleSessionResumption+0xc8>
 800c6ec:	7dfb      	ldrb	r3, [r7, #23]
 800c6ee:	2b00      	cmp	r3, #0
 800c6f0:	d0e7      	beq.n	800c6c2 <handleSessionResumption+0x62>
 800c6f2:	e019      	b.n	800c728 <handleSessionResumption+0xc8>
        }
    }
    else
    {
        /* Clear any existing records if a new session is established. */
        if( pContext->outgoingPublishRecordMaxCount > 0U )
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	689b      	ldr	r3, [r3, #8]
 800c6f8:	2b00      	cmp	r3, #0
 800c6fa:	d008      	beq.n	800c70e <handleSessionResumption+0xae>
        {
            ( void ) memset( pContext->outgoingPublishRecords,
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	6818      	ldr	r0, [r3, #0]
                             0x00,
                             pContext->outgoingPublishRecordMaxCount * sizeof( *pContext->outgoingPublishRecords ) );
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	689b      	ldr	r3, [r3, #8]
            ( void ) memset( pContext->outgoingPublishRecords,
 800c704:	009b      	lsls	r3, r3, #2
 800c706:	461a      	mov	r2, r3
 800c708:	2100      	movs	r1, #0
 800c70a:	f005 fe02 	bl	8012312 <memset>
        }

        if( pContext->incomingPublishRecordMaxCount > 0U )
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	68db      	ldr	r3, [r3, #12]
 800c712:	2b00      	cmp	r3, #0
 800c714:	d008      	beq.n	800c728 <handleSessionResumption+0xc8>
        {
            ( void ) memset( pContext->incomingPublishRecords,
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	6858      	ldr	r0, [r3, #4]
                             0x00,
                             pContext->incomingPublishRecordMaxCount * sizeof( *pContext->incomingPublishRecords ) );
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	68db      	ldr	r3, [r3, #12]
            ( void ) memset( pContext->incomingPublishRecords,
 800c71e:	009b      	lsls	r3, r3, #2
 800c720:	461a      	mov	r2, r3
 800c722:	2100      	movs	r1, #0
 800c724:	f005 fdf5 	bl	8012312 <memset>
        }
    }

    return status;
 800c728:	7dfb      	ldrb	r3, [r7, #23]
}
 800c72a:	4618      	mov	r0, r3
 800c72c:	3718      	adds	r7, #24
 800c72e:	46bd      	mov	sp, r7
 800c730:	bd80      	pop	{r7, pc}
 800c732:	bf00      	nop
 800c734:	080145ac 	.word	0x080145ac
 800c738:	08015284 	.word	0x08015284
 800c73c:	080144d0 	.word	0x080144d0

0800c740 <MQTT_Init>:
MQTTStatus_t MQTT_Init( MQTTContext_t * pContext,
                        const TransportInterface_t * pTransportInterface,
                        MQTTGetCurrentTimeFunc_t getTimeFunction,
                        MQTTEventCallback_t userCallback,
                        const MQTTFixedBuffer_t * pNetworkBuffer )
{
 800c740:	b590      	push	{r4, r7, lr}
 800c742:	b087      	sub	sp, #28
 800c744:	af00      	add	r7, sp, #0
 800c746:	60f8      	str	r0, [r7, #12]
 800c748:	60b9      	str	r1, [r7, #8]
 800c74a:	607a      	str	r2, [r7, #4]
 800c74c:	603b      	str	r3, [r7, #0]
    MQTTStatus_t status = MQTTSuccess;
 800c74e:	2300      	movs	r3, #0
 800c750:	75fb      	strb	r3, [r7, #23]

    /* Validate arguments. */
    if( ( pContext == NULL ) || ( pTransportInterface == NULL ) ||
 800c752:	68fb      	ldr	r3, [r7, #12]
 800c754:	2b00      	cmp	r3, #0
 800c756:	d005      	beq.n	800c764 <MQTT_Init+0x24>
 800c758:	68bb      	ldr	r3, [r7, #8]
 800c75a:	2b00      	cmp	r3, #0
 800c75c:	d002      	beq.n	800c764 <MQTT_Init+0x24>
 800c75e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c760:	2b00      	cmp	r3, #0
 800c762:	d102      	bne.n	800c76a <MQTT_Init+0x2a>
                    "pTransportInterface=%p, "
                    "pNetworkBuffer=%p",
                    ( void * ) pContext,
                    ( void * ) pTransportInterface,
                    ( void * ) pNetworkBuffer ) );
        status = MQTTBadParameter;
 800c764:	2301      	movs	r3, #1
 800c766:	75fb      	strb	r3, [r7, #23]
 800c768:	e03a      	b.n	800c7e0 <MQTT_Init+0xa0>
    }
    else if( getTimeFunction == NULL )
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	2b00      	cmp	r3, #0
 800c76e:	d102      	bne.n	800c776 <MQTT_Init+0x36>
    {
        LogError( ( "Invalid parameter: getTimeFunction is NULL" ) );
        status = MQTTBadParameter;
 800c770:	2301      	movs	r3, #1
 800c772:	75fb      	strb	r3, [r7, #23]
 800c774:	e034      	b.n	800c7e0 <MQTT_Init+0xa0>
    }
    else if( userCallback == NULL )
 800c776:	683b      	ldr	r3, [r7, #0]
 800c778:	2b00      	cmp	r3, #0
 800c77a:	d102      	bne.n	800c782 <MQTT_Init+0x42>
    {
        LogError( ( "Invalid parameter: userCallback is NULL" ) );
        status = MQTTBadParameter;
 800c77c:	2301      	movs	r3, #1
 800c77e:	75fb      	strb	r3, [r7, #23]
 800c780:	e02e      	b.n	800c7e0 <MQTT_Init+0xa0>
    }
    else if( pTransportInterface->recv == NULL )
 800c782:	68bb      	ldr	r3, [r7, #8]
 800c784:	681b      	ldr	r3, [r3, #0]
 800c786:	2b00      	cmp	r3, #0
 800c788:	d102      	bne.n	800c790 <MQTT_Init+0x50>
    {
        LogError( ( "Invalid parameter: pTransportInterface->recv is NULL" ) );
        status = MQTTBadParameter;
 800c78a:	2301      	movs	r3, #1
 800c78c:	75fb      	strb	r3, [r7, #23]
 800c78e:	e027      	b.n	800c7e0 <MQTT_Init+0xa0>
    }
    else if( pTransportInterface->send == NULL )
 800c790:	68bb      	ldr	r3, [r7, #8]
 800c792:	685b      	ldr	r3, [r3, #4]
 800c794:	2b00      	cmp	r3, #0
 800c796:	d102      	bne.n	800c79e <MQTT_Init+0x5e>
    {
        LogError( ( "Invalid parameter: pTransportInterface->send is NULL" ) );
        status = MQTTBadParameter;
 800c798:	2301      	movs	r3, #1
 800c79a:	75fb      	strb	r3, [r7, #23]
 800c79c:	e020      	b.n	800c7e0 <MQTT_Init+0xa0>
    }
    else
    {
        ( void ) memset( pContext, 0x00, sizeof( MQTTContext_t ) );
 800c79e:	2250      	movs	r2, #80	; 0x50
 800c7a0:	2100      	movs	r1, #0
 800c7a2:	68f8      	ldr	r0, [r7, #12]
 800c7a4:	f005 fdb5 	bl	8012312 <memset>

        pContext->connectStatus = MQTTNotConnected;
 800c7a8:	68fb      	ldr	r3, [r7, #12]
 800c7aa:	2200      	movs	r2, #0
 800c7ac:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
        pContext->transportInterface = *pTransportInterface;
 800c7b0:	68fb      	ldr	r3, [r7, #12]
 800c7b2:	68ba      	ldr	r2, [r7, #8]
 800c7b4:	f103 0410 	add.w	r4, r3, #16
 800c7b8:	4613      	mov	r3, r2
 800c7ba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800c7bc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        pContext->getTime = getTimeFunction;
 800c7c0:	68fb      	ldr	r3, [r7, #12]
 800c7c2:	687a      	ldr	r2, [r7, #4]
 800c7c4:	62da      	str	r2, [r3, #44]	; 0x2c
        pContext->appCallback = userCallback;
 800c7c6:	68fb      	ldr	r3, [r7, #12]
 800c7c8:	683a      	ldr	r2, [r7, #0]
 800c7ca:	631a      	str	r2, [r3, #48]	; 0x30
        pContext->networkBuffer = *pNetworkBuffer;
 800c7cc:	68fb      	ldr	r3, [r7, #12]
 800c7ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c7d0:	3320      	adds	r3, #32
 800c7d2:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c7d6:	e883 0003 	stmia.w	r3, {r0, r1}

        /* Zero is not a valid packet ID per MQTT spec. Start from 1. */
        pContext->nextPacketId = 1;
 800c7da:	68fb      	ldr	r3, [r7, #12]
 800c7dc:	2201      	movs	r2, #1
 800c7de:	851a      	strh	r2, [r3, #40]	; 0x28
    }

    return status;
 800c7e0:	7dfb      	ldrb	r3, [r7, #23]
}
 800c7e2:	4618      	mov	r0, r3
 800c7e4:	371c      	adds	r7, #28
 800c7e6:	46bd      	mov	sp, r7
 800c7e8:	bd90      	pop	{r4, r7, pc}

0800c7ea <MQTT_Connect>:
MQTTStatus_t MQTT_Connect( MQTTContext_t * pContext,
                           const MQTTConnectInfo_t * pConnectInfo,
                           const MQTTPublishInfo_t * pWillInfo,
                           uint32_t timeoutMs,
                           bool * pSessionPresent )
{
 800c7ea:	b580      	push	{r7, lr}
 800c7ec:	b08e      	sub	sp, #56	; 0x38
 800c7ee:	af02      	add	r7, sp, #8
 800c7f0:	60f8      	str	r0, [r7, #12]
 800c7f2:	60b9      	str	r1, [r7, #8]
 800c7f4:	607a      	str	r2, [r7, #4]
 800c7f6:	603b      	str	r3, [r7, #0]
    size_t remainingLength = 0UL, packetSize = 0UL;
 800c7f8:	2300      	movs	r3, #0
 800c7fa:	62bb      	str	r3, [r7, #40]	; 0x28
 800c7fc:	2300      	movs	r3, #0
 800c7fe:	627b      	str	r3, [r7, #36]	; 0x24
    MQTTStatus_t status = MQTTSuccess;
 800c800:	2300      	movs	r3, #0
 800c802:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    MQTTPacketInfo_t incomingPacket = { 0 };
 800c806:	f107 0314 	add.w	r3, r7, #20
 800c80a:	2200      	movs	r2, #0
 800c80c:	601a      	str	r2, [r3, #0]
 800c80e:	605a      	str	r2, [r3, #4]
 800c810:	609a      	str	r2, [r3, #8]
 800c812:	60da      	str	r2, [r3, #12]

    incomingPacket.type = ( uint8_t ) 0;
 800c814:	2300      	movs	r3, #0
 800c816:	753b      	strb	r3, [r7, #20]

    if( ( pContext == NULL ) || ( pConnectInfo == NULL ) || ( pSessionPresent == NULL ) )
 800c818:	68fb      	ldr	r3, [r7, #12]
 800c81a:	2b00      	cmp	r3, #0
 800c81c:	d005      	beq.n	800c82a <MQTT_Connect+0x40>
 800c81e:	68bb      	ldr	r3, [r7, #8]
 800c820:	2b00      	cmp	r3, #0
 800c822:	d002      	beq.n	800c82a <MQTT_Connect+0x40>
 800c824:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c826:	2b00      	cmp	r3, #0
 800c828:	d102      	bne.n	800c830 <MQTT_Connect+0x46>
        LogError( ( "Argument cannot be NULL: pContext=%p, "
                    "pConnectInfo=%p, pSessionPresent=%p.",
                    ( void * ) pContext,
                    ( void * ) pConnectInfo,
                    ( void * ) pSessionPresent ) );
        status = MQTTBadParameter;
 800c82a:	2301      	movs	r3, #1
 800c82c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }

    if( status == MQTTSuccess )
 800c830:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c834:	2b00      	cmp	r3, #0
 800c836:	d10a      	bne.n	800c84e <MQTT_Connect+0x64>
    {
        /* Get MQTT connect packet size and remaining length. */
        status = MQTT_GetConnectPacketSize( pConnectInfo,
 800c838:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c83c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800c840:	6879      	ldr	r1, [r7, #4]
 800c842:	68b8      	ldr	r0, [r7, #8]
 800c844:	f000 fe64 	bl	800d510 <MQTT_GetConnectPacketSize>
 800c848:	4603      	mov	r3, r0
 800c84a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        LogDebug( ( "CONNECT packet size is %lu and remaining length is %lu.",
                    ( unsigned long ) packetSize,
                    ( unsigned long ) remainingLength ) );
    }

    if( status == MQTTSuccess )
 800c84e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c852:	2b00      	cmp	r3, #0
 800c854:	d108      	bne.n	800c868 <MQTT_Connect+0x7e>
    {
        MQTT_PRE_SEND_HOOK( pContext );

        status = sendConnectWithoutCopy( pContext,
 800c856:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c858:	687a      	ldr	r2, [r7, #4]
 800c85a:	68b9      	ldr	r1, [r7, #8]
 800c85c:	68f8      	ldr	r0, [r7, #12]
 800c85e:	f7ff fd21 	bl	800c2a4 <sendConnectWithoutCopy>
 800c862:	4603      	mov	r3, r0
 800c864:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

        MQTT_POST_SEND_HOOK( pContext );
    }

    /* Read CONNACK from transport layer. */
    if( status == MQTTSuccess )
 800c868:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c86c:	2b00      	cmp	r3, #0
 800c86e:	d10d      	bne.n	800c88c <MQTT_Connect+0xa2>
    {
        status = receiveConnack( pContext,
 800c870:	68bb      	ldr	r3, [r7, #8]
 800c872:	781a      	ldrb	r2, [r3, #0]
 800c874:	f107 0114 	add.w	r1, r7, #20
 800c878:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c87a:	9300      	str	r3, [sp, #0]
 800c87c:	460b      	mov	r3, r1
 800c87e:	6839      	ldr	r1, [r7, #0]
 800c880:	68f8      	ldr	r0, [r7, #12]
 800c882:	f7ff fe2b 	bl	800c4dc <receiveConnack>
 800c886:	4603      	mov	r3, r0
 800c888:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                                 pConnectInfo->cleanSession,
                                 &incomingPacket,
                                 pSessionPresent );
    }

    if( status == MQTTSuccess )
 800c88c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c890:	2b00      	cmp	r3, #0
 800c892:	d108      	bne.n	800c8a6 <MQTT_Connect+0xbc>
    {
        /* Resend PUBRELs when reestablishing a session, or clear records for new sessions. */
        status = handleSessionResumption( pContext, *pSessionPresent );
 800c894:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c896:	781b      	ldrb	r3, [r3, #0]
 800c898:	4619      	mov	r1, r3
 800c89a:	68f8      	ldr	r0, [r7, #12]
 800c89c:	f7ff fee0 	bl	800c660 <handleSessionResumption>
 800c8a0:	4603      	mov	r3, r0
 800c8a2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }

    if( status == MQTTSuccess )
 800c8a6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c8aa:	2b00      	cmp	r3, #0
 800c8ac:	d10f      	bne.n	800c8ce <MQTT_Connect+0xe4>
    {
        LogInfo( ( "MQTT connection established with the broker." ) );
        pContext->connectStatus = MQTTConnected;
 800c8ae:	68fb      	ldr	r3, [r7, #12]
 800c8b0:	2201      	movs	r2, #1
 800c8b2:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
        /* Initialize keep-alive fields after a successful connection. */
        pContext->keepAliveIntervalSec = pConnectInfo->keepAliveSeconds;
 800c8b6:	68bb      	ldr	r3, [r7, #8]
 800c8b8:	885a      	ldrh	r2, [r3, #2]
 800c8ba:	68fb      	ldr	r3, [r7, #12]
 800c8bc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
        pContext->waitingForPingResp = false;
 800c8c0:	68fb      	ldr	r3, [r7, #12]
 800c8c2:	2200      	movs	r2, #0
 800c8c4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        pContext->pingReqSendTimeMs = 0U;
 800c8c8:	68fb      	ldr	r3, [r7, #12]
 800c8ca:	2200      	movs	r2, #0
 800c8cc:	649a      	str	r2, [r3, #72]	; 0x48
    {
        LogError( ( "MQTT connection failed with status = %s.",
                    MQTT_Status_strerror( status ) ) );
    }

    return status;
 800c8ce:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800c8d2:	4618      	mov	r0, r3
 800c8d4:	3730      	adds	r7, #48	; 0x30
 800c8d6:	46bd      	mov	sp, r7
 800c8d8:	bd80      	pop	{r7, pc}

0800c8da <MQTT_Subscribe>:

MQTTStatus_t MQTT_Subscribe( MQTTContext_t * pContext,
                             const MQTTSubscribeInfo_t * pSubscriptionList,
                             size_t subscriptionCount,
                             uint16_t packetId )
{
 800c8da:	b580      	push	{r7, lr}
 800c8dc:	b08a      	sub	sp, #40	; 0x28
 800c8de:	af02      	add	r7, sp, #8
 800c8e0:	60f8      	str	r0, [r7, #12]
 800c8e2:	60b9      	str	r1, [r7, #8]
 800c8e4:	607a      	str	r2, [r7, #4]
 800c8e6:	807b      	strh	r3, [r7, #2]
    size_t remainingLength = 0UL, packetSize = 0UL;
 800c8e8:	2300      	movs	r3, #0
 800c8ea:	61bb      	str	r3, [r7, #24]
 800c8ec:	2300      	movs	r3, #0
 800c8ee:	617b      	str	r3, [r7, #20]

    /* Validate arguments. */
    MQTTStatus_t status = validateSubscribeUnsubscribeParams( pContext,
 800c8f0:	887b      	ldrh	r3, [r7, #2]
 800c8f2:	687a      	ldr	r2, [r7, #4]
 800c8f4:	68b9      	ldr	r1, [r7, #8]
 800c8f6:	68f8      	ldr	r0, [r7, #12]
 800c8f8:	f7ff fb7c 	bl	800bff4 <validateSubscribeUnsubscribeParams>
 800c8fc:	4603      	mov	r3, r0
 800c8fe:	77fb      	strb	r3, [r7, #31]
                                                              pSubscriptionList,
                                                              subscriptionCount,
                                                              packetId );

    if( status == MQTTSuccess )
 800c900:	7ffb      	ldrb	r3, [r7, #31]
 800c902:	2b00      	cmp	r3, #0
 800c904:	d109      	bne.n	800c91a <MQTT_Subscribe+0x40>
    {
        /* Get the remaining length and packet size.*/
        status = MQTT_GetSubscribePacketSize( pSubscriptionList,
 800c906:	f107 0314 	add.w	r3, r7, #20
 800c90a:	f107 0218 	add.w	r2, r7, #24
 800c90e:	6879      	ldr	r1, [r7, #4]
 800c910:	68b8      	ldr	r0, [r7, #8]
 800c912:	f000 fe69 	bl	800d5e8 <MQTT_GetSubscribePacketSize>
 800c916:	4603      	mov	r3, r0
 800c918:	77fb      	strb	r3, [r7, #31]
        LogDebug( ( "SUBSCRIBE packet size is %lu and remaining length is %lu.",
                    ( unsigned long ) packetSize,
                    ( unsigned long ) remainingLength ) );
    }

    if( status == MQTTSuccess )
 800c91a:	7ffb      	ldrb	r3, [r7, #31]
 800c91c:	2b00      	cmp	r3, #0
 800c91e:	d10a      	bne.n	800c936 <MQTT_Subscribe+0x5c>
    {
        MQTT_PRE_SEND_HOOK( pContext );

        /* Send MQTT SUBSCRIBE packet. */
        status = sendSubscribeWithoutCopy( pContext,
 800c920:	69bb      	ldr	r3, [r7, #24]
 800c922:	887a      	ldrh	r2, [r7, #2]
 800c924:	9300      	str	r3, [sp, #0]
 800c926:	4613      	mov	r3, r2
 800c928:	687a      	ldr	r2, [r7, #4]
 800c92a:	68b9      	ldr	r1, [r7, #8]
 800c92c:	68f8      	ldr	r0, [r7, #12]
 800c92e:	f7ff fbff 	bl	800c130 <sendSubscribeWithoutCopy>
 800c932:	4603      	mov	r3, r0
 800c934:	77fb      	strb	r3, [r7, #31]
                                           remainingLength );

        MQTT_POST_SEND_HOOK( pContext );
    }

    return status;
 800c936:	7ffb      	ldrb	r3, [r7, #31]
}
 800c938:	4618      	mov	r0, r3
 800c93a:	3720      	adds	r7, #32
 800c93c:	46bd      	mov	sp, r7
 800c93e:	bd80      	pop	{r7, pc}

0800c940 <MQTT_Ping>:
}

/*-----------------------------------------------------------*/

MQTTStatus_t MQTT_Ping( MQTTContext_t * pContext )
{
 800c940:	b580      	push	{r7, lr}
 800c942:	b088      	sub	sp, #32
 800c944:	af00      	add	r7, sp, #0
 800c946:	6078      	str	r0, [r7, #4]
    int32_t sendResult = 0;
 800c948:	2300      	movs	r3, #0
 800c94a:	61bb      	str	r3, [r7, #24]
    MQTTStatus_t status = MQTTSuccess;
 800c94c:	2300      	movs	r3, #0
 800c94e:	77fb      	strb	r3, [r7, #31]
    size_t packetSize = 0U;
 800c950:	2300      	movs	r3, #0
 800c952:	617b      	str	r3, [r7, #20]
    /* MQTT ping packets are of fixed length. */
    uint8_t pingreqPacket[ 2U ];
    MQTTFixedBuffer_t localBuffer;

    localBuffer.pBuffer = pingreqPacket;
 800c954:	f107 0310 	add.w	r3, r7, #16
 800c958:	60bb      	str	r3, [r7, #8]
    localBuffer.size = 2U;
 800c95a:	2302      	movs	r3, #2
 800c95c:	60fb      	str	r3, [r7, #12]

    if( pContext == NULL )
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	2b00      	cmp	r3, #0
 800c962:	d101      	bne.n	800c968 <MQTT_Ping+0x28>
    {
        LogError( ( "pContext is NULL." ) );
        status = MQTTBadParameter;
 800c964:	2301      	movs	r3, #1
 800c966:	77fb      	strb	r3, [r7, #31]
    }

    if( status == MQTTSuccess )
 800c968:	7ffb      	ldrb	r3, [r7, #31]
 800c96a:	2b00      	cmp	r3, #0
 800c96c:	d106      	bne.n	800c97c <MQTT_Ping+0x3c>
    {
        /* Get MQTT PINGREQ packet size. */
        status = MQTT_GetPingreqPacketSize( &packetSize );
 800c96e:	f107 0314 	add.w	r3, r7, #20
 800c972:	4618      	mov	r0, r3
 800c974:	f000 fedc 	bl	800d730 <MQTT_GetPingreqPacketSize>
 800c978:	4603      	mov	r3, r0
 800c97a:	77fb      	strb	r3, [r7, #31]
        {
            LogError( ( "Failed to get the PINGREQ packet size." ) );
        }
    }

    if( status == MQTTSuccess )
 800c97c:	7ffb      	ldrb	r3, [r7, #31]
 800c97e:	2b00      	cmp	r3, #0
 800c980:	d106      	bne.n	800c990 <MQTT_Ping+0x50>
    {
        /* Serialize MQTT PINGREQ. */
        status = MQTT_SerializePingreq( &localBuffer );
 800c982:	f107 0308 	add.w	r3, r7, #8
 800c986:	4618      	mov	r0, r3
 800c988:	f000 fee8 	bl	800d75c <MQTT_SerializePingreq>
 800c98c:	4603      	mov	r3, r0
 800c98e:	77fb      	strb	r3, [r7, #31]
    }

    if( status == MQTTSuccess )
 800c990:	7ffb      	ldrb	r3, [r7, #31]
 800c992:	2b00      	cmp	r3, #0
 800c994:	d116      	bne.n	800c9c4 <MQTT_Ping+0x84>
        /* Send the serialized PINGREQ packet to transport layer.
         * Here, we do not use the vectored IO approach for efficiency as the
         * Ping packet does not have numerous fields which need to be copied
         * from the user provided buffers. Thus it can be sent directly. */
        sendResult = sendBuffer( pContext,
                                 localBuffer.pBuffer,
 800c996:	68bb      	ldr	r3, [r7, #8]
        sendResult = sendBuffer( pContext,
 800c998:	2202      	movs	r2, #2
 800c99a:	4619      	mov	r1, r3
 800c99c:	6878      	ldr	r0, [r7, #4]
 800c99e:	f7fe fc7f 	bl	800b2a0 <sendBuffer>
 800c9a2:	61b8      	str	r0, [r7, #24]

        /* Give the mutex away. */
        MQTT_POST_SEND_HOOK( pContext );

        /* It is an error to not send the entire PINGREQ packet. */
        if( sendResult < ( int32_t ) packetSize )
 800c9a4:	697b      	ldr	r3, [r7, #20]
 800c9a6:	461a      	mov	r2, r3
 800c9a8:	69bb      	ldr	r3, [r7, #24]
 800c9aa:	4293      	cmp	r3, r2
 800c9ac:	da02      	bge.n	800c9b4 <MQTT_Ping+0x74>
        {
            LogError( ( "Transport send failed for PINGREQ packet." ) );
            status = MQTTSendFailed;
 800c9ae:	2303      	movs	r3, #3
 800c9b0:	77fb      	strb	r3, [r7, #31]
 800c9b2:	e007      	b.n	800c9c4 <MQTT_Ping+0x84>
        }
        else
        {
            pContext->pingReqSendTimeMs = pContext->lastPacketTxTime;
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	649a      	str	r2, [r3, #72]	; 0x48
            pContext->waitingForPingResp = true;
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	2201      	movs	r2, #1
 800c9c0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            LogDebug( ( "Sent %ld bytes of PINGREQ packet.",
                        ( long int ) sendResult ) );
        }
    }

    return status;
 800c9c4:	7ffb      	ldrb	r3, [r7, #31]
}
 800c9c6:	4618      	mov	r0, r3
 800c9c8:	3720      	adds	r7, #32
 800c9ca:	46bd      	mov	sp, r7
 800c9cc:	bd80      	pop	{r7, pc}

0800c9ce <MQTT_ProcessLoop>:
}

/*-----------------------------------------------------------*/

MQTTStatus_t MQTT_ProcessLoop( MQTTContext_t * pContext )
{
 800c9ce:	b580      	push	{r7, lr}
 800c9d0:	b084      	sub	sp, #16
 800c9d2:	af00      	add	r7, sp, #0
 800c9d4:	6078      	str	r0, [r7, #4]
    MQTTStatus_t status = MQTTBadParameter;
 800c9d6:	2301      	movs	r3, #1
 800c9d8:	73fb      	strb	r3, [r7, #15]

    if( pContext == NULL )
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	2b00      	cmp	r3, #0
 800c9de:	d011      	beq.n	800ca04 <MQTT_ProcessLoop+0x36>
    {
        LogError( ( "Invalid input parameter: MQTT Context cannot be NULL." ) );
    }
    else if( pContext->getTime == NULL )
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c9e4:	2b00      	cmp	r3, #0
 800c9e6:	d00d      	beq.n	800ca04 <MQTT_ProcessLoop+0x36>
    {
        LogError( ( "Invalid input parameter: MQTT Context must have valid getTime." ) );
    }
    else if( pContext->networkBuffer.pBuffer == NULL )
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	6a1b      	ldr	r3, [r3, #32]
 800c9ec:	2b00      	cmp	r3, #0
 800c9ee:	d009      	beq.n	800ca04 <MQTT_ProcessLoop+0x36>
    {
        LogError( ( "Invalid input parameter: The MQTT context's networkBuffer must not be NULL." ) );
    }
    else
    {
        pContext->controlPacketSent = false;
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	2200      	movs	r2, #0
 800c9f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        status = receiveSingleIteration( pContext, true );
 800c9f8:	2101      	movs	r1, #1
 800c9fa:	6878      	ldr	r0, [r7, #4]
 800c9fc:	f7ff fa0e 	bl	800be1c <receiveSingleIteration>
 800ca00:	4603      	mov	r3, r0
 800ca02:	73fb      	strb	r3, [r7, #15]
    }

    return status;
 800ca04:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca06:	4618      	mov	r0, r3
 800ca08:	3710      	adds	r7, #16
 800ca0a:	46bd      	mov	sp, r7
 800ca0c:	bd80      	pop	{r7, pc}

0800ca0e <MQTT_GetPacketId>:
}

/*-----------------------------------------------------------*/

uint16_t MQTT_GetPacketId( MQTTContext_t * pContext )
{
 800ca0e:	b480      	push	{r7}
 800ca10:	b085      	sub	sp, #20
 800ca12:	af00      	add	r7, sp, #0
 800ca14:	6078      	str	r0, [r7, #4]
    uint16_t packetId = 0U;
 800ca16:	2300      	movs	r3, #0
 800ca18:	81fb      	strh	r3, [r7, #14]

    if( pContext != NULL )
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	2b00      	cmp	r3, #0
 800ca1e:	d012      	beq.n	800ca46 <MQTT_GetPacketId+0x38>
    {
        MQTT_PRE_STATE_UPDATE_HOOK( pContext );

        packetId = pContext->nextPacketId;
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ca24:	81fb      	strh	r3, [r7, #14]

        /* A packet ID of zero is not a valid packet ID. When the max ID
         * is reached the next one should start at 1. */
        if( pContext->nextPacketId == ( uint16_t ) UINT16_MAX )
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ca2a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ca2e:	4293      	cmp	r3, r2
 800ca30:	d103      	bne.n	800ca3a <MQTT_GetPacketId+0x2c>
        {
            pContext->nextPacketId = 1;
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	2201      	movs	r2, #1
 800ca36:	851a      	strh	r2, [r3, #40]	; 0x28
 800ca38:	e005      	b.n	800ca46 <MQTT_GetPacketId+0x38>
        }
        else
        {
            pContext->nextPacketId++;
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ca3e:	3301      	adds	r3, #1
 800ca40:	b29a      	uxth	r2, r3
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	851a      	strh	r2, [r3, #40]	; 0x28
        }

        MQTT_POST_STATE_UPDATE_HOOK( pContext );
    }

    return packetId;
 800ca46:	89fb      	ldrh	r3, [r7, #14]
}
 800ca48:	4618      	mov	r0, r3
 800ca4a:	3714      	adds	r7, #20
 800ca4c:	46bd      	mov	sp, r7
 800ca4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca52:	4770      	bx	lr

0800ca54 <remainingLengthEncodedSize>:
static MQTTStatus_t deserializePingresp( const MQTTPacketInfo_t * pPingresp );

/*-----------------------------------------------------------*/

static size_t remainingLengthEncodedSize( size_t length )
{
 800ca54:	b480      	push	{r7}
 800ca56:	b085      	sub	sp, #20
 800ca58:	af00      	add	r7, sp, #0
 800ca5a:	6078      	str	r0, [r7, #4]

    /* Determine how many bytes are needed to encode length.
     * The values below are taken from the MQTT 3.1.1 spec. */

    /* 1 byte is needed to encode lengths between 0 and 127. */
    if( length < 128U )
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	2b7f      	cmp	r3, #127	; 0x7f
 800ca60:	d802      	bhi.n	800ca68 <remainingLengthEncodedSize+0x14>
    {
        encodedSize = 1U;
 800ca62:	2301      	movs	r3, #1
 800ca64:	60fb      	str	r3, [r7, #12]
 800ca66:	e00f      	b.n	800ca88 <remainingLengthEncodedSize+0x34>
    }
    /* 2 bytes are needed to encode lengths between 128 and 16,383. */
    else if( length < 16384U )
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ca6e:	d202      	bcs.n	800ca76 <remainingLengthEncodedSize+0x22>
    {
        encodedSize = 2U;
 800ca70:	2302      	movs	r3, #2
 800ca72:	60fb      	str	r3, [r7, #12]
 800ca74:	e008      	b.n	800ca88 <remainingLengthEncodedSize+0x34>
    }
    /* 3 bytes are needed to encode lengths between 16,384 and 2,097,151. */
    else if( length < 2097152U )
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ca7c:	d202      	bcs.n	800ca84 <remainingLengthEncodedSize+0x30>
    {
        encodedSize = 3U;
 800ca7e:	2303      	movs	r3, #3
 800ca80:	60fb      	str	r3, [r7, #12]
 800ca82:	e001      	b.n	800ca88 <remainingLengthEncodedSize+0x34>
    }
    /* 4 bytes are needed to encode lengths between 2,097,152 and 268,435,455. */
    else
    {
        encodedSize = 4U;
 800ca84:	2304      	movs	r3, #4
 800ca86:	60fb      	str	r3, [r7, #12]

    LogDebug( ( "Encoded size for length %lu is %lu bytes.",
                ( unsigned long ) length,
                ( unsigned long ) encodedSize ) );

    return encodedSize;
 800ca88:	68fb      	ldr	r3, [r7, #12]
}
 800ca8a:	4618      	mov	r0, r3
 800ca8c:	3714      	adds	r7, #20
 800ca8e:	46bd      	mov	sp, r7
 800ca90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca94:	4770      	bx	lr
	...

0800ca98 <encodeRemainingLength>:

/*-----------------------------------------------------------*/

static uint8_t * encodeRemainingLength( uint8_t * pDestination,
                                        size_t length )
{
 800ca98:	b580      	push	{r7, lr}
 800ca9a:	b086      	sub	sp, #24
 800ca9c:	af00      	add	r7, sp, #0
 800ca9e:	6078      	str	r0, [r7, #4]
 800caa0:	6039      	str	r1, [r7, #0]
    uint8_t lengthByte;
    uint8_t * pLengthEnd = NULL;
 800caa2:	2300      	movs	r3, #0
 800caa4:	613b      	str	r3, [r7, #16]
    size_t remainingLength = length;
 800caa6:	683b      	ldr	r3, [r7, #0]
 800caa8:	60fb      	str	r3, [r7, #12]

    assert( pDestination != NULL );
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	2b00      	cmp	r3, #0
 800caae:	d106      	bne.n	800cabe <encodeRemainingLength+0x26>
 800cab0:	4b12      	ldr	r3, [pc, #72]	; (800cafc <encodeRemainingLength+0x64>)
 800cab2:	4a13      	ldr	r2, [pc, #76]	; (800cb00 <encodeRemainingLength+0x68>)
 800cab4:	f240 11f1 	movw	r1, #497	; 0x1f1
 800cab8:	4812      	ldr	r0, [pc, #72]	; (800cb04 <encodeRemainingLength+0x6c>)
 800caba:	f005 fa9f 	bl	8011ffc <__assert_func>

    pLengthEnd = pDestination;
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	613b      	str	r3, [r7, #16]

    /* This algorithm is copied from the MQTT v3.1.1 spec. */
    do
    {
        lengthByte = ( uint8_t ) ( remainingLength % 128U );
 800cac2:	68fb      	ldr	r3, [r7, #12]
 800cac4:	b2db      	uxtb	r3, r3
 800cac6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800caca:	75fb      	strb	r3, [r7, #23]
        remainingLength = remainingLength / 128U;
 800cacc:	68fb      	ldr	r3, [r7, #12]
 800cace:	09db      	lsrs	r3, r3, #7
 800cad0:	60fb      	str	r3, [r7, #12]

        /* Set the high bit of this byte, indicating that there's more data. */
        if( remainingLength > 0U )
 800cad2:	68fb      	ldr	r3, [r7, #12]
 800cad4:	2b00      	cmp	r3, #0
 800cad6:	d003      	beq.n	800cae0 <encodeRemainingLength+0x48>
        {
            UINT8_SET_BIT( lengthByte, 7 );
 800cad8:	7dfb      	ldrb	r3, [r7, #23]
 800cada:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800cade:	75fb      	strb	r3, [r7, #23]
        }

        /* Output a single encoded byte. */
        *pLengthEnd = lengthByte;
 800cae0:	693b      	ldr	r3, [r7, #16]
 800cae2:	7dfa      	ldrb	r2, [r7, #23]
 800cae4:	701a      	strb	r2, [r3, #0]
        pLengthEnd++;
 800cae6:	693b      	ldr	r3, [r7, #16]
 800cae8:	3301      	adds	r3, #1
 800caea:	613b      	str	r3, [r7, #16]
    } while( remainingLength > 0U );
 800caec:	68fb      	ldr	r3, [r7, #12]
 800caee:	2b00      	cmp	r3, #0
 800caf0:	d1e7      	bne.n	800cac2 <encodeRemainingLength+0x2a>

    return pLengthEnd;
 800caf2:	693b      	ldr	r3, [r7, #16]
}
 800caf4:	4618      	mov	r0, r3
 800caf6:	3718      	adds	r7, #24
 800caf8:	46bd      	mov	sp, r7
 800cafa:	bd80      	pop	{r7, pc}
 800cafc:	08014a54 	.word	0x08014a54
 800cb00:	0801529c 	.word	0x0801529c
 800cb04:	08014a6c 	.word	0x08014a6c

0800cb08 <encodeString>:
/*-----------------------------------------------------------*/

static uint8_t * encodeString( uint8_t * pDestination,
                               const char * pSource,
                               uint16_t sourceLength )
{
 800cb08:	b580      	push	{r7, lr}
 800cb0a:	b086      	sub	sp, #24
 800cb0c:	af00      	add	r7, sp, #0
 800cb0e:	60f8      	str	r0, [r7, #12]
 800cb10:	60b9      	str	r1, [r7, #8]
 800cb12:	4613      	mov	r3, r2
 800cb14:	80fb      	strh	r3, [r7, #6]
    uint8_t * pBuffer = NULL;
 800cb16:	2300      	movs	r3, #0
 800cb18:	617b      	str	r3, [r7, #20]

    /* Typecast const char * typed source buffer to const uint8_t *.
     * This is to use same type buffers in memcpy. */
    const uint8_t * pSourceBuffer = ( const uint8_t * ) pSource;
 800cb1a:	68bb      	ldr	r3, [r7, #8]
 800cb1c:	613b      	str	r3, [r7, #16]

    assert( pDestination != NULL );
 800cb1e:	68fb      	ldr	r3, [r7, #12]
 800cb20:	2b00      	cmp	r3, #0
 800cb22:	d106      	bne.n	800cb32 <encodeString+0x2a>
 800cb24:	4b15      	ldr	r3, [pc, #84]	; (800cb7c <encodeString+0x74>)
 800cb26:	4a16      	ldr	r2, [pc, #88]	; (800cb80 <encodeString+0x78>)
 800cb28:	f240 2115 	movw	r1, #533	; 0x215
 800cb2c:	4815      	ldr	r0, [pc, #84]	; (800cb84 <encodeString+0x7c>)
 800cb2e:	f005 fa65 	bl	8011ffc <__assert_func>

    pBuffer = pDestination;
 800cb32:	68fb      	ldr	r3, [r7, #12]
 800cb34:	617b      	str	r3, [r7, #20]

    /* The first byte of a UTF-8 string is the high byte of the string length. */
    *pBuffer = UINT16_HIGH_BYTE( sourceLength );
 800cb36:	88fb      	ldrh	r3, [r7, #6]
 800cb38:	0a1b      	lsrs	r3, r3, #8
 800cb3a:	b29b      	uxth	r3, r3
 800cb3c:	b2da      	uxtb	r2, r3
 800cb3e:	697b      	ldr	r3, [r7, #20]
 800cb40:	701a      	strb	r2, [r3, #0]
    pBuffer++;
 800cb42:	697b      	ldr	r3, [r7, #20]
 800cb44:	3301      	adds	r3, #1
 800cb46:	617b      	str	r3, [r7, #20]

    /* The second byte of a UTF-8 string is the low byte of the string length. */
    *pBuffer = UINT16_LOW_BYTE( sourceLength );
 800cb48:	88fb      	ldrh	r3, [r7, #6]
 800cb4a:	b2da      	uxtb	r2, r3
 800cb4c:	697b      	ldr	r3, [r7, #20]
 800cb4e:	701a      	strb	r2, [r3, #0]
    pBuffer++;
 800cb50:	697b      	ldr	r3, [r7, #20]
 800cb52:	3301      	adds	r3, #1
 800cb54:	617b      	str	r3, [r7, #20]

    /* Copy the string into pBuffer. */
    if( pSourceBuffer != NULL )
 800cb56:	693b      	ldr	r3, [r7, #16]
 800cb58:	2b00      	cmp	r3, #0
 800cb5a:	d005      	beq.n	800cb68 <encodeString+0x60>
    {
        ( void ) memcpy( pBuffer, pSourceBuffer, sourceLength );
 800cb5c:	88fb      	ldrh	r3, [r7, #6]
 800cb5e:	461a      	mov	r2, r3
 800cb60:	6939      	ldr	r1, [r7, #16]
 800cb62:	6978      	ldr	r0, [r7, #20]
 800cb64:	f005 fbad 	bl	80122c2 <memcpy>
    }

    /* Return the pointer to the end of the encoded string. */
    pBuffer = &pBuffer[ sourceLength ];
 800cb68:	88fb      	ldrh	r3, [r7, #6]
 800cb6a:	697a      	ldr	r2, [r7, #20]
 800cb6c:	4413      	add	r3, r2
 800cb6e:	617b      	str	r3, [r7, #20]

    return pBuffer;
 800cb70:	697b      	ldr	r3, [r7, #20]
}
 800cb72:	4618      	mov	r0, r3
 800cb74:	3718      	adds	r7, #24
 800cb76:	46bd      	mov	sp, r7
 800cb78:	bd80      	pop	{r7, pc}
 800cb7a:	bf00      	nop
 800cb7c:	08014a54 	.word	0x08014a54
 800cb80:	080152b4 	.word	0x080152b4
 800cb84:	08014a6c 	.word	0x08014a6c

0800cb88 <getRemainingLength>:
    assert( ( ( size_t ) ( pIndex - pFixedBuffer->pBuffer ) ) <= pFixedBuffer->size );
}

static size_t getRemainingLength( TransportRecv_t recvFunc,
                                  NetworkContext_t * pNetworkContext )
{
 800cb88:	b580      	push	{r7, lr}
 800cb8a:	b088      	sub	sp, #32
 800cb8c:	af00      	add	r7, sp, #0
 800cb8e:	6078      	str	r0, [r7, #4]
 800cb90:	6039      	str	r1, [r7, #0]
    size_t remainingLength = 0, multiplier = 1, bytesDecoded = 0, expectedSize = 0;
 800cb92:	2300      	movs	r3, #0
 800cb94:	61fb      	str	r3, [r7, #28]
 800cb96:	2301      	movs	r3, #1
 800cb98:	61bb      	str	r3, [r7, #24]
 800cb9a:	2300      	movs	r3, #0
 800cb9c:	617b      	str	r3, [r7, #20]
 800cb9e:	2300      	movs	r3, #0
 800cba0:	613b      	str	r3, [r7, #16]
    uint8_t encodedByte = 0;
 800cba2:	2300      	movs	r3, #0
 800cba4:	72fb      	strb	r3, [r7, #11]
    int32_t bytesReceived = 0;
 800cba6:	2300      	movs	r3, #0
 800cba8:	60fb      	str	r3, [r7, #12]

    /* This algorithm is copied from the MQTT v3.1.1 spec. */
    do
    {
        if( multiplier > 2097152U ) /* 128 ^ 3 */
 800cbaa:	69bb      	ldr	r3, [r7, #24]
 800cbac:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800cbb0:	d903      	bls.n	800cbba <getRemainingLength+0x32>
        {
            remainingLength = MQTT_REMAINING_LENGTH_INVALID;
 800cbb2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800cbb6:	61fb      	str	r3, [r7, #28]
 800cbb8:	e01c      	b.n	800cbf4 <getRemainingLength+0x6c>
        }
        else
        {
            bytesReceived = recvFunc( pNetworkContext, &encodedByte, 1U );
 800cbba:	f107 010b 	add.w	r1, r7, #11
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	2201      	movs	r2, #1
 800cbc2:	6838      	ldr	r0, [r7, #0]
 800cbc4:	4798      	blx	r3
 800cbc6:	60f8      	str	r0, [r7, #12]

            if( bytesReceived == 1 )
 800cbc8:	68fb      	ldr	r3, [r7, #12]
 800cbca:	2b01      	cmp	r3, #1
 800cbcc:	d10f      	bne.n	800cbee <getRemainingLength+0x66>
            {
                remainingLength += ( ( size_t ) encodedByte & 0x7FU ) * multiplier;
 800cbce:	7afb      	ldrb	r3, [r7, #11]
 800cbd0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cbd4:	69ba      	ldr	r2, [r7, #24]
 800cbd6:	fb02 f303 	mul.w	r3, r2, r3
 800cbda:	69fa      	ldr	r2, [r7, #28]
 800cbdc:	4413      	add	r3, r2
 800cbde:	61fb      	str	r3, [r7, #28]
                multiplier *= 128U;
 800cbe0:	69bb      	ldr	r3, [r7, #24]
 800cbe2:	01db      	lsls	r3, r3, #7
 800cbe4:	61bb      	str	r3, [r7, #24]
                bytesDecoded++;
 800cbe6:	697b      	ldr	r3, [r7, #20]
 800cbe8:	3301      	adds	r3, #1
 800cbea:	617b      	str	r3, [r7, #20]
 800cbec:	e002      	b.n	800cbf4 <getRemainingLength+0x6c>
            }
            else
            {
                remainingLength = MQTT_REMAINING_LENGTH_INVALID;
 800cbee:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800cbf2:	61fb      	str	r3, [r7, #28]
            }
        }

        if( remainingLength == MQTT_REMAINING_LENGTH_INVALID )
 800cbf4:	69fb      	ldr	r3, [r7, #28]
 800cbf6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cbfa:	d004      	beq.n	800cc06 <getRemainingLength+0x7e>
        {
            break;
        }
    } while( ( encodedByte & 0x80U ) != 0U );
 800cbfc:	7afb      	ldrb	r3, [r7, #11]
 800cbfe:	b25b      	sxtb	r3, r3
 800cc00:	2b00      	cmp	r3, #0
 800cc02:	dbd2      	blt.n	800cbaa <getRemainingLength+0x22>
 800cc04:	e000      	b.n	800cc08 <getRemainingLength+0x80>
            break;
 800cc06:	bf00      	nop

    /* Check that the decoded remaining length conforms to the MQTT specification. */
    if( remainingLength != MQTT_REMAINING_LENGTH_INVALID )
 800cc08:	69fb      	ldr	r3, [r7, #28]
 800cc0a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cc0e:	d00a      	beq.n	800cc26 <getRemainingLength+0x9e>
    {
        expectedSize = remainingLengthEncodedSize( remainingLength );
 800cc10:	69f8      	ldr	r0, [r7, #28]
 800cc12:	f7ff ff1f 	bl	800ca54 <remainingLengthEncodedSize>
 800cc16:	6138      	str	r0, [r7, #16]

        if( bytesDecoded != expectedSize )
 800cc18:	697a      	ldr	r2, [r7, #20]
 800cc1a:	693b      	ldr	r3, [r7, #16]
 800cc1c:	429a      	cmp	r2, r3
 800cc1e:	d002      	beq.n	800cc26 <getRemainingLength+0x9e>
        {
            remainingLength = MQTT_REMAINING_LENGTH_INVALID;
 800cc20:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800cc24:	61fb      	str	r3, [r7, #28]
        }
    }

    return remainingLength;
 800cc26:	69fb      	ldr	r3, [r7, #28]
}
 800cc28:	4618      	mov	r0, r3
 800cc2a:	3720      	adds	r7, #32
 800cc2c:	46bd      	mov	sp, r7
 800cc2e:	bd80      	pop	{r7, pc}

0800cc30 <processRemainingLength>:
/*-----------------------------------------------------------*/

static MQTTStatus_t processRemainingLength( const uint8_t * pBuffer,
                                            const size_t * pIndex,
                                            MQTTPacketInfo_t * pIncomingPacket )
{
 800cc30:	b580      	push	{r7, lr}
 800cc32:	b08a      	sub	sp, #40	; 0x28
 800cc34:	af00      	add	r7, sp, #0
 800cc36:	60f8      	str	r0, [r7, #12]
 800cc38:	60b9      	str	r1, [r7, #8]
 800cc3a:	607a      	str	r2, [r7, #4]
    size_t remainingLength = 0;
 800cc3c:	2300      	movs	r3, #0
 800cc3e:	627b      	str	r3, [r7, #36]	; 0x24
    size_t multiplier = 1;
 800cc40:	2301      	movs	r3, #1
 800cc42:	623b      	str	r3, [r7, #32]
    size_t bytesDecoded = 0;
 800cc44:	2300      	movs	r3, #0
 800cc46:	61fb      	str	r3, [r7, #28]
    size_t expectedSize = 0;
 800cc48:	2300      	movs	r3, #0
 800cc4a:	617b      	str	r3, [r7, #20]
    uint8_t encodedByte = 0;
 800cc4c:	2300      	movs	r3, #0
 800cc4e:	76fb      	strb	r3, [r7, #27]
    MQTTStatus_t status = MQTTSuccess;
 800cc50:	2300      	movs	r3, #0
 800cc52:	76bb      	strb	r3, [r7, #26]

    /* This algorithm is copied from the MQTT v3.1.1 spec. */
    do
    {
        if( multiplier > 2097152U ) /* 128 ^ 3 */
 800cc54:	6a3b      	ldr	r3, [r7, #32]
 800cc56:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800cc5a:	d905      	bls.n	800cc68 <processRemainingLength+0x38>
        {
            remainingLength = MQTT_REMAINING_LENGTH_INVALID;
 800cc5c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800cc60:	627b      	str	r3, [r7, #36]	; 0x24

            LogError( ( "Invalid remaining length in the packet.\n" ) );

            status = MQTTBadResponse;
 800cc62:	2305      	movs	r3, #5
 800cc64:	76bb      	strb	r3, [r7, #26]
 800cc66:	e01d      	b.n	800cca4 <processRemainingLength+0x74>
        }
        else
        {
            if( *pIndex > ( bytesDecoded + 1U ) )
 800cc68:	68bb      	ldr	r3, [r7, #8]
 800cc6a:	681a      	ldr	r2, [r3, #0]
 800cc6c:	69fb      	ldr	r3, [r7, #28]
 800cc6e:	3301      	adds	r3, #1
 800cc70:	429a      	cmp	r2, r3
 800cc72:	d915      	bls.n	800cca0 <processRemainingLength+0x70>
            {
                /* Get the next byte. It is at the next position after the bytes
                 * decoded till now since the header of one byte was read before. */
                encodedByte = pBuffer[ bytesDecoded + 1U ];
 800cc74:	69fb      	ldr	r3, [r7, #28]
 800cc76:	3301      	adds	r3, #1
 800cc78:	68fa      	ldr	r2, [r7, #12]
 800cc7a:	4413      	add	r3, r2
 800cc7c:	781b      	ldrb	r3, [r3, #0]
 800cc7e:	76fb      	strb	r3, [r7, #27]

                remainingLength += ( ( size_t ) encodedByte & 0x7FU ) * multiplier;
 800cc80:	7efb      	ldrb	r3, [r7, #27]
 800cc82:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cc86:	6a3a      	ldr	r2, [r7, #32]
 800cc88:	fb02 f303 	mul.w	r3, r2, r3
 800cc8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cc8e:	4413      	add	r3, r2
 800cc90:	627b      	str	r3, [r7, #36]	; 0x24
                multiplier *= 128U;
 800cc92:	6a3b      	ldr	r3, [r7, #32]
 800cc94:	01db      	lsls	r3, r3, #7
 800cc96:	623b      	str	r3, [r7, #32]
                bytesDecoded++;
 800cc98:	69fb      	ldr	r3, [r7, #28]
 800cc9a:	3301      	adds	r3, #1
 800cc9c:	61fb      	str	r3, [r7, #28]
 800cc9e:	e001      	b.n	800cca4 <processRemainingLength+0x74>
            }
            else
            {
                status = MQTTNeedMoreBytes;
 800cca0:	230b      	movs	r3, #11
 800cca2:	76bb      	strb	r3, [r7, #26]
            }
        }

        /* If the response is incorrect, or no more data is available, then
         * break out of the loop. */
        if( ( remainingLength == MQTT_REMAINING_LENGTH_INVALID ) ||
 800cca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cca6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ccaa:	d006      	beq.n	800ccba <processRemainingLength+0x8a>
 800ccac:	7ebb      	ldrb	r3, [r7, #26]
 800ccae:	2b00      	cmp	r3, #0
 800ccb0:	d103      	bne.n	800ccba <processRemainingLength+0x8a>
            ( status != MQTTSuccess ) )
        {
            break;
        }
    } while( ( encodedByte & 0x80U ) != 0U );
 800ccb2:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800ccb6:	2b00      	cmp	r3, #0
 800ccb8:	dbcc      	blt.n	800cc54 <processRemainingLength+0x24>

    if( status == MQTTSuccess )
 800ccba:	7ebb      	ldrb	r3, [r7, #26]
 800ccbc:	2b00      	cmp	r3, #0
 800ccbe:	d111      	bne.n	800cce4 <processRemainingLength+0xb4>
    {
        /* Check that the decoded remaining length conforms to the MQTT specification. */
        expectedSize = remainingLengthEncodedSize( remainingLength );
 800ccc0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ccc2:	f7ff fec7 	bl	800ca54 <remainingLengthEncodedSize>
 800ccc6:	6178      	str	r0, [r7, #20]

        if( bytesDecoded != expectedSize )
 800ccc8:	69fa      	ldr	r2, [r7, #28]
 800ccca:	697b      	ldr	r3, [r7, #20]
 800cccc:	429a      	cmp	r2, r3
 800ccce:	d002      	beq.n	800ccd6 <processRemainingLength+0xa6>
        {
            LogError( ( "Expected and actual length of decoded bytes do not match.\n" ) );
            status = MQTTBadResponse;
 800ccd0:	2305      	movs	r3, #5
 800ccd2:	76bb      	strb	r3, [r7, #26]
 800ccd4:	e006      	b.n	800cce4 <processRemainingLength+0xb4>
        }
        else
        {
            pIncomingPacket->remainingLength = remainingLength;
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ccda:	609a      	str	r2, [r3, #8]
            pIncomingPacket->headerLength = bytesDecoded + 1U;
 800ccdc:	69fb      	ldr	r3, [r7, #28]
 800ccde:	1c5a      	adds	r2, r3, #1
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	60da      	str	r2, [r3, #12]
        }
    }

    return status;
 800cce4:	7ebb      	ldrb	r3, [r7, #26]
}
 800cce6:	4618      	mov	r0, r3
 800cce8:	3728      	adds	r7, #40	; 0x28
 800ccea:	46bd      	mov	sp, r7
 800ccec:	bd80      	pop	{r7, pc}

0800ccee <incomingPacketValid>:

/*-----------------------------------------------------------*/

static bool incomingPacketValid( uint8_t packetType )
{
 800ccee:	b480      	push	{r7}
 800ccf0:	b085      	sub	sp, #20
 800ccf2:	af00      	add	r7, sp, #0
 800ccf4:	4603      	mov	r3, r0
 800ccf6:	71fb      	strb	r3, [r7, #7]
    bool status = false;
 800ccf8:	2300      	movs	r3, #0
 800ccfa:	73fb      	strb	r3, [r7, #15]

    /* Check packet type. Mask out lower bits to ignore flags. */
    switch( packetType & 0xF0U )
 800ccfc:	79fb      	ldrb	r3, [r7, #7]
 800ccfe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800cd02:	2bd0      	cmp	r3, #208	; 0xd0
 800cd04:	d01d      	beq.n	800cd42 <incomingPacketValid+0x54>
 800cd06:	2bd0      	cmp	r3, #208	; 0xd0
 800cd08:	d826      	bhi.n	800cd58 <incomingPacketValid+0x6a>
 800cd0a:	2bb0      	cmp	r3, #176	; 0xb0
 800cd0c:	d019      	beq.n	800cd42 <incomingPacketValid+0x54>
 800cd0e:	2bb0      	cmp	r3, #176	; 0xb0
 800cd10:	d822      	bhi.n	800cd58 <incomingPacketValid+0x6a>
 800cd12:	2b90      	cmp	r3, #144	; 0x90
 800cd14:	d015      	beq.n	800cd42 <incomingPacketValid+0x54>
 800cd16:	2b90      	cmp	r3, #144	; 0x90
 800cd18:	d81e      	bhi.n	800cd58 <incomingPacketValid+0x6a>
 800cd1a:	2b70      	cmp	r3, #112	; 0x70
 800cd1c:	d011      	beq.n	800cd42 <incomingPacketValid+0x54>
 800cd1e:	2b70      	cmp	r3, #112	; 0x70
 800cd20:	d81a      	bhi.n	800cd58 <incomingPacketValid+0x6a>
 800cd22:	2b60      	cmp	r3, #96	; 0x60
 800cd24:	d010      	beq.n	800cd48 <incomingPacketValid+0x5a>
 800cd26:	2b60      	cmp	r3, #96	; 0x60
 800cd28:	d816      	bhi.n	800cd58 <incomingPacketValid+0x6a>
 800cd2a:	2b50      	cmp	r3, #80	; 0x50
 800cd2c:	d009      	beq.n	800cd42 <incomingPacketValid+0x54>
 800cd2e:	2b50      	cmp	r3, #80	; 0x50
 800cd30:	d812      	bhi.n	800cd58 <incomingPacketValid+0x6a>
 800cd32:	2b40      	cmp	r3, #64	; 0x40
 800cd34:	d005      	beq.n	800cd42 <incomingPacketValid+0x54>
 800cd36:	2b40      	cmp	r3, #64	; 0x40
 800cd38:	d80e      	bhi.n	800cd58 <incomingPacketValid+0x6a>
 800cd3a:	2b20      	cmp	r3, #32
 800cd3c:	d001      	beq.n	800cd42 <incomingPacketValid+0x54>
 800cd3e:	2b30      	cmp	r3, #48	; 0x30
 800cd40:	d10a      	bne.n	800cd58 <incomingPacketValid+0x6a>
        case MQTT_PACKET_TYPE_PUBREC:
        case MQTT_PACKET_TYPE_PUBCOMP:
        case MQTT_PACKET_TYPE_SUBACK:
        case MQTT_PACKET_TYPE_UNSUBACK:
        case MQTT_PACKET_TYPE_PINGRESP:
            status = true;
 800cd42:	2301      	movs	r3, #1
 800cd44:	73fb      	strb	r3, [r7, #15]
            break;
 800cd46:	e00a      	b.n	800cd5e <incomingPacketValid+0x70>

        case ( MQTT_PACKET_TYPE_PUBREL & 0xF0U ):

            /* The second bit of a PUBREL must be set. */
            if( ( packetType & 0x02U ) > 0U )
 800cd48:	79fb      	ldrb	r3, [r7, #7]
 800cd4a:	f003 0302 	and.w	r3, r3, #2
 800cd4e:	2b00      	cmp	r3, #0
 800cd50:	d004      	beq.n	800cd5c <incomingPacketValid+0x6e>
            {
                status = true;
 800cd52:	2301      	movs	r3, #1
 800cd54:	73fb      	strb	r3, [r7, #15]
            }

            break;
 800cd56:	e001      	b.n	800cd5c <incomingPacketValid+0x6e>

        /* Any other packet type is invalid. */
        default:
            LogWarn( ( "Incoming packet invalid: Packet type=%u.",
                       ( unsigned int ) packetType ) );
            break;
 800cd58:	bf00      	nop
 800cd5a:	e000      	b.n	800cd5e <incomingPacketValid+0x70>
            break;
 800cd5c:	bf00      	nop
    }

    return status;
 800cd5e:	7bfb      	ldrb	r3, [r7, #15]
}
 800cd60:	4618      	mov	r0, r3
 800cd62:	3714      	adds	r7, #20
 800cd64:	46bd      	mov	sp, r7
 800cd66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd6a:	4770      	bx	lr

0800cd6c <checkPublishRemainingLength>:
/*-----------------------------------------------------------*/

static MQTTStatus_t checkPublishRemainingLength( size_t remainingLength,
                                                 MQTTQoS_t qos,
                                                 size_t qos0Minimum )
{
 800cd6c:	b480      	push	{r7}
 800cd6e:	b087      	sub	sp, #28
 800cd70:	af00      	add	r7, sp, #0
 800cd72:	60f8      	str	r0, [r7, #12]
 800cd74:	460b      	mov	r3, r1
 800cd76:	607a      	str	r2, [r7, #4]
 800cd78:	72fb      	strb	r3, [r7, #11]
    MQTTStatus_t status = MQTTSuccess;
 800cd7a:	2300      	movs	r3, #0
 800cd7c:	75fb      	strb	r3, [r7, #23]

    /* Sanity checks for "Remaining length". */
    if( qos == MQTTQoS0 )
 800cd7e:	7afb      	ldrb	r3, [r7, #11]
 800cd80:	2b00      	cmp	r3, #0
 800cd82:	d106      	bne.n	800cd92 <checkPublishRemainingLength+0x26>
    {
        /* Check that the "Remaining length" is greater than the minimum. */
        if( remainingLength < qos0Minimum )
 800cd84:	68fa      	ldr	r2, [r7, #12]
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	429a      	cmp	r2, r3
 800cd8a:	d209      	bcs.n	800cda0 <checkPublishRemainingLength+0x34>
        {
            LogError( ( "QoS 0 PUBLISH cannot have a remaining length less than %lu.",
                        ( unsigned long ) qos0Minimum ) );

            status = MQTTBadResponse;
 800cd8c:	2305      	movs	r3, #5
 800cd8e:	75fb      	strb	r3, [r7, #23]
 800cd90:	e006      	b.n	800cda0 <checkPublishRemainingLength+0x34>
    else
    {
        /* Check that the "Remaining length" is greater than the minimum. For
         * QoS 1 or 2, this will be two bytes greater than for QoS 0 due to the
         * packet identifier. */
        if( remainingLength < ( qos0Minimum + 2U ) )
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	3302      	adds	r3, #2
 800cd96:	68fa      	ldr	r2, [r7, #12]
 800cd98:	429a      	cmp	r2, r3
 800cd9a:	d201      	bcs.n	800cda0 <checkPublishRemainingLength+0x34>
        {
            LogError( ( "QoS 1 or 2 PUBLISH cannot have a remaining length less than %lu.",
                        ( unsigned long ) ( qos0Minimum + 2U ) ) );

            status = MQTTBadResponse;
 800cd9c:	2305      	movs	r3, #5
 800cd9e:	75fb      	strb	r3, [r7, #23]
        }
    }

    return status;
 800cda0:	7dfb      	ldrb	r3, [r7, #23]
}
 800cda2:	4618      	mov	r0, r3
 800cda4:	371c      	adds	r7, #28
 800cda6:	46bd      	mov	sp, r7
 800cda8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdac:	4770      	bx	lr
	...

0800cdb0 <processPublishFlags>:

/*-----------------------------------------------------------*/

static MQTTStatus_t processPublishFlags( uint8_t publishFlags,
                                         MQTTPublishInfo_t * pPublishInfo )
{
 800cdb0:	b580      	push	{r7, lr}
 800cdb2:	b084      	sub	sp, #16
 800cdb4:	af00      	add	r7, sp, #0
 800cdb6:	4603      	mov	r3, r0
 800cdb8:	6039      	str	r1, [r7, #0]
 800cdba:	71fb      	strb	r3, [r7, #7]
    MQTTStatus_t status = MQTTSuccess;
 800cdbc:	2300      	movs	r3, #0
 800cdbe:	73fb      	strb	r3, [r7, #15]

    assert( pPublishInfo != NULL );
 800cdc0:	683b      	ldr	r3, [r7, #0]
 800cdc2:	2b00      	cmp	r3, #0
 800cdc4:	d106      	bne.n	800cdd4 <processPublishFlags+0x24>
 800cdc6:	4b20      	ldr	r3, [pc, #128]	; (800ce48 <processPublishFlags+0x98>)
 800cdc8:	4a20      	ldr	r2, [pc, #128]	; (800ce4c <processPublishFlags+0x9c>)
 800cdca:	f240 31ef 	movw	r1, #1007	; 0x3ef
 800cdce:	4820      	ldr	r0, [pc, #128]	; (800ce50 <processPublishFlags+0xa0>)
 800cdd0:	f005 f914 	bl	8011ffc <__assert_func>

    /* Check for QoS 2. */
    if( UINT8_CHECK_BIT( publishFlags, MQTT_PUBLISH_FLAG_QOS2 ) )
 800cdd4:	79fb      	ldrb	r3, [r7, #7]
 800cdd6:	f003 0304 	and.w	r3, r3, #4
 800cdda:	2b00      	cmp	r3, #0
 800cddc:	d00b      	beq.n	800cdf6 <processPublishFlags+0x46>
    {
        /* PUBLISH packet is invalid if both QoS 1 and QoS 2 bits are set. */
        if( UINT8_CHECK_BIT( publishFlags, MQTT_PUBLISH_FLAG_QOS1 ) )
 800cdde:	79fb      	ldrb	r3, [r7, #7]
 800cde0:	f003 0302 	and.w	r3, r3, #2
 800cde4:	2b00      	cmp	r3, #0
 800cde6:	d002      	beq.n	800cdee <processPublishFlags+0x3e>
        {
            LogError( ( "Bad QoS: 3." ) );

            status = MQTTBadResponse;
 800cde8:	2305      	movs	r3, #5
 800cdea:	73fb      	strb	r3, [r7, #15]
 800cdec:	e00f      	b.n	800ce0e <processPublishFlags+0x5e>
        }
        else
        {
            pPublishInfo->qos = MQTTQoS2;
 800cdee:	683b      	ldr	r3, [r7, #0]
 800cdf0:	2202      	movs	r2, #2
 800cdf2:	701a      	strb	r2, [r3, #0]
 800cdf4:	e00b      	b.n	800ce0e <processPublishFlags+0x5e>
        }
    }
    /* Check for QoS 1. */
    else if( UINT8_CHECK_BIT( publishFlags, MQTT_PUBLISH_FLAG_QOS1 ) )
 800cdf6:	79fb      	ldrb	r3, [r7, #7]
 800cdf8:	f003 0302 	and.w	r3, r3, #2
 800cdfc:	2b00      	cmp	r3, #0
 800cdfe:	d003      	beq.n	800ce08 <processPublishFlags+0x58>
    {
        pPublishInfo->qos = MQTTQoS1;
 800ce00:	683b      	ldr	r3, [r7, #0]
 800ce02:	2201      	movs	r2, #1
 800ce04:	701a      	strb	r2, [r3, #0]
 800ce06:	e002      	b.n	800ce0e <processPublishFlags+0x5e>
    }
    /* If the PUBLISH isn't QoS 1 or 2, then it's QoS 0. */
    else
    {
        pPublishInfo->qos = MQTTQoS0;
 800ce08:	683b      	ldr	r3, [r7, #0]
 800ce0a:	2200      	movs	r2, #0
 800ce0c:	701a      	strb	r2, [r3, #0]
    }

    if( status == MQTTSuccess )
 800ce0e:	7bfb      	ldrb	r3, [r7, #15]
 800ce10:	2b00      	cmp	r3, #0
 800ce12:	d113      	bne.n	800ce3c <processPublishFlags+0x8c>
    {
        LogDebug( ( "QoS is %d.", ( int ) pPublishInfo->qos ) );

        /* Parse the Retain bit. */
        pPublishInfo->retain = UINT8_CHECK_BIT( publishFlags, MQTT_PUBLISH_FLAG_RETAIN );
 800ce14:	79fb      	ldrb	r3, [r7, #7]
 800ce16:	f003 0301 	and.w	r3, r3, #1
 800ce1a:	2b00      	cmp	r3, #0
 800ce1c:	bf14      	ite	ne
 800ce1e:	2301      	movne	r3, #1
 800ce20:	2300      	moveq	r3, #0
 800ce22:	b2da      	uxtb	r2, r3
 800ce24:	683b      	ldr	r3, [r7, #0]
 800ce26:	705a      	strb	r2, [r3, #1]

        LogDebug( ( "Retain bit is %d.", ( int ) pPublishInfo->retain ) );

        /* Parse the DUP bit. */
        pPublishInfo->dup = UINT8_CHECK_BIT( publishFlags, MQTT_PUBLISH_FLAG_DUP );
 800ce28:	79fb      	ldrb	r3, [r7, #7]
 800ce2a:	f003 0308 	and.w	r3, r3, #8
 800ce2e:	2b00      	cmp	r3, #0
 800ce30:	bf14      	ite	ne
 800ce32:	2301      	movne	r3, #1
 800ce34:	2300      	moveq	r3, #0
 800ce36:	b2da      	uxtb	r2, r3
 800ce38:	683b      	ldr	r3, [r7, #0]
 800ce3a:	709a      	strb	r2, [r3, #2]

        LogDebug( ( "DUP bit is %d.", ( int ) pPublishInfo->dup ) );
    }

    return status;
 800ce3c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce3e:	4618      	mov	r0, r3
 800ce40:	3710      	adds	r7, #16
 800ce42:	46bd      	mov	sp, r7
 800ce44:	bd80      	pop	{r7, pc}
 800ce46:	bf00      	nop
 800ce48:	08014aa0 	.word	0x08014aa0
 800ce4c:	080152c4 	.word	0x080152c4
 800ce50:	08014a6c 	.word	0x08014a6c

0800ce54 <logConnackResponse>:

/*-----------------------------------------------------------*/

static void logConnackResponse( uint8_t responseCode )
{
 800ce54:	b5b0      	push	{r4, r5, r7, lr}
 800ce56:	b088      	sub	sp, #32
 800ce58:	af00      	add	r7, sp, #0
 800ce5a:	4603      	mov	r3, r0
 800ce5c:	71fb      	strb	r3, [r7, #7]
    const char * const pConnackResponses[ 6 ] =
 800ce5e:	4b0c      	ldr	r3, [pc, #48]	; (800ce90 <logConnackResponse+0x3c>)
 800ce60:	f107 0408 	add.w	r4, r7, #8
 800ce64:	461d      	mov	r5, r3
 800ce66:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ce68:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ce6a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800ce6e:	e884 0003 	stmia.w	r4, {r0, r1}

    /* Avoid unused parameter warning when assert and logs are disabled. */
    ( void ) responseCode;
    ( void ) pConnackResponses;

    assert( responseCode <= 5U );
 800ce72:	79fb      	ldrb	r3, [r7, #7]
 800ce74:	2b05      	cmp	r3, #5
 800ce76:	d906      	bls.n	800ce86 <logConnackResponse+0x32>
 800ce78:	4b06      	ldr	r3, [pc, #24]	; (800ce94 <logConnackResponse+0x40>)
 800ce7a:	4a07      	ldr	r2, [pc, #28]	; (800ce98 <logConnackResponse+0x44>)
 800ce7c:	f240 412f 	movw	r1, #1071	; 0x42f
 800ce80:	4806      	ldr	r0, [pc, #24]	; (800ce9c <logConnackResponse+0x48>)
 800ce82:	f005 f8bb 	bl	8011ffc <__assert_func>
    else
    {
        /* Log an error based on the CONNACK response code. */
        LogError( ( "%s", pConnackResponses[ responseCode ] ) );
    }
}
 800ce86:	bf00      	nop
 800ce88:	3720      	adds	r7, #32
 800ce8a:	46bd      	mov	sp, r7
 800ce8c:	bdb0      	pop	{r4, r5, r7, pc}
 800ce8e:	bf00      	nop
 800ce90:	08014c00 	.word	0x08014c00
 800ce94:	08014bec 	.word	0x08014bec
 800ce98:	080152d8 	.word	0x080152d8
 800ce9c:	08014a6c 	.word	0x08014a6c

0800cea0 <deserializeConnack>:

/*-----------------------------------------------------------*/

static MQTTStatus_t deserializeConnack( const MQTTPacketInfo_t * pConnack,
                                        bool * pSessionPresent )
{
 800cea0:	b580      	push	{r7, lr}
 800cea2:	b084      	sub	sp, #16
 800cea4:	af00      	add	r7, sp, #0
 800cea6:	6078      	str	r0, [r7, #4]
 800cea8:	6039      	str	r1, [r7, #0]
    MQTTStatus_t status = MQTTSuccess;
 800ceaa:	2300      	movs	r3, #0
 800ceac:	73fb      	strb	r3, [r7, #15]
    const uint8_t * pRemainingData = NULL;
 800ceae:	2300      	movs	r3, #0
 800ceb0:	60bb      	str	r3, [r7, #8]

    assert( pConnack != NULL );
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	2b00      	cmp	r3, #0
 800ceb6:	d106      	bne.n	800cec6 <deserializeConnack+0x26>
 800ceb8:	4b2a      	ldr	r3, [pc, #168]	; (800cf64 <deserializeConnack+0xc4>)
 800ceba:	4a2b      	ldr	r2, [pc, #172]	; (800cf68 <deserializeConnack+0xc8>)
 800cebc:	f240 4145 	movw	r1, #1093	; 0x445
 800cec0:	482a      	ldr	r0, [pc, #168]	; (800cf6c <deserializeConnack+0xcc>)
 800cec2:	f005 f89b 	bl	8011ffc <__assert_func>
    assert( pSessionPresent != NULL );
 800cec6:	683b      	ldr	r3, [r7, #0]
 800cec8:	2b00      	cmp	r3, #0
 800ceca:	d106      	bne.n	800ceda <deserializeConnack+0x3a>
 800cecc:	4b28      	ldr	r3, [pc, #160]	; (800cf70 <deserializeConnack+0xd0>)
 800cece:	4a26      	ldr	r2, [pc, #152]	; (800cf68 <deserializeConnack+0xc8>)
 800ced0:	f240 4146 	movw	r1, #1094	; 0x446
 800ced4:	4825      	ldr	r0, [pc, #148]	; (800cf6c <deserializeConnack+0xcc>)
 800ced6:	f005 f891 	bl	8011ffc <__assert_func>
    pRemainingData = pConnack->pRemainingData;
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	685b      	ldr	r3, [r3, #4]
 800cede:	60bb      	str	r3, [r7, #8]

    /* According to MQTT 3.1.1, the second byte of CONNACK must specify a
     * "Remaining length" of 2. */
    if( pConnack->remainingLength != MQTT_PACKET_CONNACK_REMAINING_LENGTH )
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	689b      	ldr	r3, [r3, #8]
 800cee4:	2b02      	cmp	r3, #2
 800cee6:	d002      	beq.n	800ceee <deserializeConnack+0x4e>
    {
        LogError( ( "CONNACK does not have remaining length of %u.",
                    ( unsigned int ) MQTT_PACKET_CONNACK_REMAINING_LENGTH ) );

        status = MQTTBadResponse;
 800cee8:	2305      	movs	r3, #5
 800ceea:	73fb      	strb	r3, [r7, #15]
 800ceec:	e01d      	b.n	800cf2a <deserializeConnack+0x8a>
    }

    /* Check the reserved bits in CONNACK. The high 7 bits of the third byte
     * in CONNACK must be 0. */
    else if( ( pRemainingData[ 0 ] | 0x01U ) != 0x01U )
 800ceee:	68bb      	ldr	r3, [r7, #8]
 800cef0:	781b      	ldrb	r3, [r3, #0]
 800cef2:	f043 0301 	orr.w	r3, r3, #1
 800cef6:	b2db      	uxtb	r3, r3
 800cef8:	2b01      	cmp	r3, #1
 800cefa:	d002      	beq.n	800cf02 <deserializeConnack+0x62>
    {
        LogError( ( "Reserved bits in CONNACK incorrect." ) );

        status = MQTTBadResponse;
 800cefc:	2305      	movs	r3, #5
 800cefe:	73fb      	strb	r3, [r7, #15]
 800cf00:	e013      	b.n	800cf2a <deserializeConnack+0x8a>
    }
    else
    {
        /* Determine if the "Session Present" bit is set. This is the lowest bit of
         * the third byte in CONNACK. */
        if( ( pRemainingData[ 0 ] & MQTT_PACKET_CONNACK_SESSION_PRESENT_MASK )
 800cf02:	68bb      	ldr	r3, [r7, #8]
 800cf04:	781b      	ldrb	r3, [r3, #0]
 800cf06:	f003 0301 	and.w	r3, r3, #1
 800cf0a:	2b00      	cmp	r3, #0
 800cf0c:	d00a      	beq.n	800cf24 <deserializeConnack+0x84>
            == MQTT_PACKET_CONNACK_SESSION_PRESENT_MASK )
        {
            LogDebug( ( "CONNACK session present bit set." ) );
            *pSessionPresent = true;
 800cf0e:	683b      	ldr	r3, [r7, #0]
 800cf10:	2201      	movs	r2, #1
 800cf12:	701a      	strb	r2, [r3, #0]

            /* MQTT 3.1.1 specifies that the fourth byte in CONNACK must be 0 if the
             * "Session Present" bit is set. */
            if( pRemainingData[ 1 ] != 0U )
 800cf14:	68bb      	ldr	r3, [r7, #8]
 800cf16:	3301      	adds	r3, #1
 800cf18:	781b      	ldrb	r3, [r3, #0]
 800cf1a:	2b00      	cmp	r3, #0
 800cf1c:	d005      	beq.n	800cf2a <deserializeConnack+0x8a>
            {
                LogError( ( "Session Present bit is set, but connect return code in CONNACK is %u (nonzero).",
                            ( unsigned int ) pRemainingData[ 1 ] ) );
                status = MQTTBadResponse;
 800cf1e:	2305      	movs	r3, #5
 800cf20:	73fb      	strb	r3, [r7, #15]
 800cf22:	e002      	b.n	800cf2a <deserializeConnack+0x8a>
            }
        }
        else
        {
            LogDebug( ( "CONNACK session present bit not set." ) );
            *pSessionPresent = false;
 800cf24:	683b      	ldr	r3, [r7, #0]
 800cf26:	2200      	movs	r2, #0
 800cf28:	701a      	strb	r2, [r3, #0]
        }
    }

    if( status == MQTTSuccess )
 800cf2a:	7bfb      	ldrb	r3, [r7, #15]
 800cf2c:	2b00      	cmp	r3, #0
 800cf2e:	d114      	bne.n	800cf5a <deserializeConnack+0xba>
    {
        /* In MQTT 3.1.1, only values 0 through 5 are valid CONNACK response codes. */
        if( pRemainingData[ 1 ] > 5U )
 800cf30:	68bb      	ldr	r3, [r7, #8]
 800cf32:	3301      	adds	r3, #1
 800cf34:	781b      	ldrb	r3, [r3, #0]
 800cf36:	2b05      	cmp	r3, #5
 800cf38:	d902      	bls.n	800cf40 <deserializeConnack+0xa0>
        {
            LogError( ( "CONNACK response %u is invalid.",
                        ( unsigned int ) pRemainingData[ 1 ] ) );

            status = MQTTBadResponse;
 800cf3a:	2305      	movs	r3, #5
 800cf3c:	73fb      	strb	r3, [r7, #15]
 800cf3e:	e00c      	b.n	800cf5a <deserializeConnack+0xba>
        }
        else
        {
            /* Print the appropriate message for the CONNACK response code if logs are
             * enabled. */
            logConnackResponse( pRemainingData[ 1 ] );
 800cf40:	68bb      	ldr	r3, [r7, #8]
 800cf42:	3301      	adds	r3, #1
 800cf44:	781b      	ldrb	r3, [r3, #0]
 800cf46:	4618      	mov	r0, r3
 800cf48:	f7ff ff84 	bl	800ce54 <logConnackResponse>

            /* A nonzero CONNACK response code means the connection was refused. */
            if( pRemainingData[ 1 ] > 0U )
 800cf4c:	68bb      	ldr	r3, [r7, #8]
 800cf4e:	3301      	adds	r3, #1
 800cf50:	781b      	ldrb	r3, [r3, #0]
 800cf52:	2b00      	cmp	r3, #0
 800cf54:	d001      	beq.n	800cf5a <deserializeConnack+0xba>
            {
                status = MQTTServerRefused;
 800cf56:	2306      	movs	r3, #6
 800cf58:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return status;
 800cf5a:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf5c:	4618      	mov	r0, r3
 800cf5e:	3710      	adds	r7, #16
 800cf60:	46bd      	mov	sp, r7
 800cf62:	bd80      	pop	{r7, pc}
 800cf64:	08014c18 	.word	0x08014c18
 800cf68:	080152ec 	.word	0x080152ec
 800cf6c:	08014a6c 	.word	0x08014a6c
 800cf70:	08014c2c 	.word	0x08014c2c

0800cf74 <calculateSubscriptionPacketSize>:
static MQTTStatus_t calculateSubscriptionPacketSize( const MQTTSubscribeInfo_t * pSubscriptionList,
                                                     size_t subscriptionCount,
                                                     size_t * pRemainingLength,
                                                     size_t * pPacketSize,
                                                     MQTTSubscriptionType_t subscriptionType )
{
 800cf74:	b580      	push	{r7, lr}
 800cf76:	b088      	sub	sp, #32
 800cf78:	af00      	add	r7, sp, #0
 800cf7a:	60f8      	str	r0, [r7, #12]
 800cf7c:	60b9      	str	r1, [r7, #8]
 800cf7e:	607a      	str	r2, [r7, #4]
 800cf80:	603b      	str	r3, [r7, #0]
    MQTTStatus_t status = MQTTSuccess;
 800cf82:	2300      	movs	r3, #0
 800cf84:	77fb      	strb	r3, [r7, #31]
    size_t i = 0, packetSize = 0;
 800cf86:	2300      	movs	r3, #0
 800cf88:	61bb      	str	r3, [r7, #24]
 800cf8a:	2300      	movs	r3, #0
 800cf8c:	617b      	str	r3, [r7, #20]

    assert( pSubscriptionList != NULL );
 800cf8e:	68fb      	ldr	r3, [r7, #12]
 800cf90:	2b00      	cmp	r3, #0
 800cf92:	d106      	bne.n	800cfa2 <calculateSubscriptionPacketSize+0x2e>
 800cf94:	4b3d      	ldr	r3, [pc, #244]	; (800d08c <calculateSubscriptionPacketSize+0x118>)
 800cf96:	4a3e      	ldr	r2, [pc, #248]	; (800d090 <calculateSubscriptionPacketSize+0x11c>)
 800cf98:	f240 419b 	movw	r1, #1179	; 0x49b
 800cf9c:	483d      	ldr	r0, [pc, #244]	; (800d094 <calculateSubscriptionPacketSize+0x120>)
 800cf9e:	f005 f82d 	bl	8011ffc <__assert_func>
    assert( subscriptionCount != 0U );
 800cfa2:	68bb      	ldr	r3, [r7, #8]
 800cfa4:	2b00      	cmp	r3, #0
 800cfa6:	d106      	bne.n	800cfb6 <calculateSubscriptionPacketSize+0x42>
 800cfa8:	4b3b      	ldr	r3, [pc, #236]	; (800d098 <calculateSubscriptionPacketSize+0x124>)
 800cfaa:	4a39      	ldr	r2, [pc, #228]	; (800d090 <calculateSubscriptionPacketSize+0x11c>)
 800cfac:	f240 419c 	movw	r1, #1180	; 0x49c
 800cfb0:	4838      	ldr	r0, [pc, #224]	; (800d094 <calculateSubscriptionPacketSize+0x120>)
 800cfb2:	f005 f823 	bl	8011ffc <__assert_func>
    assert( pRemainingLength != NULL );
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	2b00      	cmp	r3, #0
 800cfba:	d106      	bne.n	800cfca <calculateSubscriptionPacketSize+0x56>
 800cfbc:	4b37      	ldr	r3, [pc, #220]	; (800d09c <calculateSubscriptionPacketSize+0x128>)
 800cfbe:	4a34      	ldr	r2, [pc, #208]	; (800d090 <calculateSubscriptionPacketSize+0x11c>)
 800cfc0:	f240 419d 	movw	r1, #1181	; 0x49d
 800cfc4:	4833      	ldr	r0, [pc, #204]	; (800d094 <calculateSubscriptionPacketSize+0x120>)
 800cfc6:	f005 f819 	bl	8011ffc <__assert_func>
    assert( pPacketSize != NULL );
 800cfca:	683b      	ldr	r3, [r7, #0]
 800cfcc:	2b00      	cmp	r3, #0
 800cfce:	d106      	bne.n	800cfde <calculateSubscriptionPacketSize+0x6a>
 800cfd0:	4b33      	ldr	r3, [pc, #204]	; (800d0a0 <calculateSubscriptionPacketSize+0x12c>)
 800cfd2:	4a2f      	ldr	r2, [pc, #188]	; (800d090 <calculateSubscriptionPacketSize+0x11c>)
 800cfd4:	f240 419e 	movw	r1, #1182	; 0x49e
 800cfd8:	482e      	ldr	r0, [pc, #184]	; (800d094 <calculateSubscriptionPacketSize+0x120>)
 800cfda:	f005 f80f 	bl	8011ffc <__assert_func>

    /* The variable header of a subscription packet consists of a 2-byte packet
     * identifier. */
    packetSize += sizeof( uint16_t );
 800cfde:	697b      	ldr	r3, [r7, #20]
 800cfe0:	3302      	adds	r3, #2
 800cfe2:	617b      	str	r3, [r7, #20]

    /* Sum the lengths of all subscription topic filters; add 1 byte for each
     * subscription's QoS if type is MQTT_SUBSCRIBE. */
    for( i = 0; i < subscriptionCount; i++ )
 800cfe4:	2300      	movs	r3, #0
 800cfe6:	61bb      	str	r3, [r7, #24]
 800cfe8:	e02f      	b.n	800d04a <calculateSubscriptionPacketSize+0xd6>
    {
        /* Add the length of the topic filter. MQTT strings are prepended
         * with 2 byte string length field. Hence 2 bytes are added to size. */
        packetSize += pSubscriptionList[ i ].topicFilterLength + sizeof( uint16_t );
 800cfea:	69ba      	ldr	r2, [r7, #24]
 800cfec:	4613      	mov	r3, r2
 800cfee:	005b      	lsls	r3, r3, #1
 800cff0:	4413      	add	r3, r2
 800cff2:	009b      	lsls	r3, r3, #2
 800cff4:	461a      	mov	r2, r3
 800cff6:	68fb      	ldr	r3, [r7, #12]
 800cff8:	4413      	add	r3, r2
 800cffa:	891b      	ldrh	r3, [r3, #8]
 800cffc:	461a      	mov	r2, r3
 800cffe:	697b      	ldr	r3, [r7, #20]
 800d000:	4413      	add	r3, r2
 800d002:	3302      	adds	r3, #2
 800d004:	617b      	str	r3, [r7, #20]

        /* Only SUBSCRIBE packets include the QoS. */
        if( subscriptionType == MQTT_SUBSCRIBE )
 800d006:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800d00a:	2b00      	cmp	r3, #0
 800d00c:	d102      	bne.n	800d014 <calculateSubscriptionPacketSize+0xa0>
        {
            packetSize += 1U;
 800d00e:	697b      	ldr	r3, [r7, #20]
 800d010:	3301      	adds	r3, #1
 800d012:	617b      	str	r3, [r7, #20]
        }

        /* Validate each topic filter. */
        if( ( pSubscriptionList[ i ].topicFilterLength == 0U ) ||
 800d014:	69ba      	ldr	r2, [r7, #24]
 800d016:	4613      	mov	r3, r2
 800d018:	005b      	lsls	r3, r3, #1
 800d01a:	4413      	add	r3, r2
 800d01c:	009b      	lsls	r3, r3, #2
 800d01e:	461a      	mov	r2, r3
 800d020:	68fb      	ldr	r3, [r7, #12]
 800d022:	4413      	add	r3, r2
 800d024:	891b      	ldrh	r3, [r3, #8]
 800d026:	2b00      	cmp	r3, #0
 800d028:	d00a      	beq.n	800d040 <calculateSubscriptionPacketSize+0xcc>
            ( pSubscriptionList[ i ].pTopicFilter == NULL ) )
 800d02a:	69ba      	ldr	r2, [r7, #24]
 800d02c:	4613      	mov	r3, r2
 800d02e:	005b      	lsls	r3, r3, #1
 800d030:	4413      	add	r3, r2
 800d032:	009b      	lsls	r3, r3, #2
 800d034:	461a      	mov	r2, r3
 800d036:	68fb      	ldr	r3, [r7, #12]
 800d038:	4413      	add	r3, r2
 800d03a:	685b      	ldr	r3, [r3, #4]
        if( ( pSubscriptionList[ i ].topicFilterLength == 0U ) ||
 800d03c:	2b00      	cmp	r3, #0
 800d03e:	d101      	bne.n	800d044 <calculateSubscriptionPacketSize+0xd0>
        {
            status = MQTTBadParameter;
 800d040:	2301      	movs	r3, #1
 800d042:	77fb      	strb	r3, [r7, #31]
    for( i = 0; i < subscriptionCount; i++ )
 800d044:	69bb      	ldr	r3, [r7, #24]
 800d046:	3301      	adds	r3, #1
 800d048:	61bb      	str	r3, [r7, #24]
 800d04a:	69ba      	ldr	r2, [r7, #24]
 800d04c:	68bb      	ldr	r3, [r7, #8]
 800d04e:	429a      	cmp	r2, r3
 800d050:	d3cb      	bcc.n	800cfea <calculateSubscriptionPacketSize+0x76>
    }

    /* At this point, the "Remaining length" has been calculated. Return error
     * if the "Remaining length" exceeds what is allowed by MQTT 3.1.1. Otherwise,
     * set the output parameter.*/
    if( packetSize > MQTT_MAX_REMAINING_LENGTH )
 800d052:	697b      	ldr	r3, [r7, #20]
 800d054:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d058:	d301      	bcc.n	800d05e <calculateSubscriptionPacketSize+0xea>
    {
        LogError( ( "Subscription packet length of %lu exceeds"
                    "the MQTT 3.1.1 maximum packet length of %lu.",
                    ( unsigned long ) packetSize,
                    MQTT_MAX_REMAINING_LENGTH ) );
        status = MQTTBadParameter;
 800d05a:	2301      	movs	r3, #1
 800d05c:	77fb      	strb	r3, [r7, #31]
    }

    if( status == MQTTSuccess )
 800d05e:	7ffb      	ldrb	r3, [r7, #31]
 800d060:	2b00      	cmp	r3, #0
 800d062:	d10d      	bne.n	800d080 <calculateSubscriptionPacketSize+0x10c>
    {
        *pRemainingLength = packetSize;
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	697a      	ldr	r2, [r7, #20]
 800d068:	601a      	str	r2, [r3, #0]

        /* Calculate the full size of the subscription packet by adding
         * number of bytes required to encode the "Remaining length" field
         * plus 1 byte for the "Packet type" field. */
        packetSize += 1U + remainingLengthEncodedSize( packetSize );
 800d06a:	6978      	ldr	r0, [r7, #20]
 800d06c:	f7ff fcf2 	bl	800ca54 <remainingLengthEncodedSize>
 800d070:	4603      	mov	r3, r0
 800d072:	3301      	adds	r3, #1
 800d074:	697a      	ldr	r2, [r7, #20]
 800d076:	4413      	add	r3, r2
 800d078:	617b      	str	r3, [r7, #20]

        /*Set the pPacketSize output parameter. */
        *pPacketSize = packetSize;
 800d07a:	683b      	ldr	r3, [r7, #0]
 800d07c:	697a      	ldr	r2, [r7, #20]
 800d07e:	601a      	str	r2, [r3, #0]

    LogDebug( ( "Subscription packet remaining length=%lu and packet size=%lu.",
                ( unsigned long ) *pRemainingLength,
                ( unsigned long ) *pPacketSize ) );

    return status;
 800d080:	7ffb      	ldrb	r3, [r7, #31]
}
 800d082:	4618      	mov	r0, r3
 800d084:	3720      	adds	r7, #32
 800d086:	46bd      	mov	sp, r7
 800d088:	bd80      	pop	{r7, pc}
 800d08a:	bf00      	nop
 800d08c:	08014c44 	.word	0x08014c44
 800d090:	08015300 	.word	0x08015300
 800d094:	08014a6c 	.word	0x08014a6c
 800d098:	08014c60 	.word	0x08014c60
 800d09c:	08014ab8 	.word	0x08014ab8
 800d0a0:	08014ad4 	.word	0x08014ad4

0800d0a4 <readSubackStatus>:

/*-----------------------------------------------------------*/

static MQTTStatus_t readSubackStatus( size_t statusCount,
                                      const uint8_t * pStatusStart )
{
 800d0a4:	b580      	push	{r7, lr}
 800d0a6:	b086      	sub	sp, #24
 800d0a8:	af00      	add	r7, sp, #0
 800d0aa:	6078      	str	r0, [r7, #4]
 800d0ac:	6039      	str	r1, [r7, #0]
    MQTTStatus_t status = MQTTSuccess;
 800d0ae:	2300      	movs	r3, #0
 800d0b0:	75fb      	strb	r3, [r7, #23]
    uint8_t subscriptionStatus = 0;
 800d0b2:	2300      	movs	r3, #0
 800d0b4:	73fb      	strb	r3, [r7, #15]
    size_t i = 0;
 800d0b6:	2300      	movs	r3, #0
 800d0b8:	613b      	str	r3, [r7, #16]

    assert( pStatusStart != NULL );
 800d0ba:	683b      	ldr	r3, [r7, #0]
 800d0bc:	2b00      	cmp	r3, #0
 800d0be:	d106      	bne.n	800d0ce <readSubackStatus+0x2a>
 800d0c0:	4b17      	ldr	r3, [pc, #92]	; (800d120 <readSubackStatus+0x7c>)
 800d0c2:	4a18      	ldr	r2, [pc, #96]	; (800d124 <readSubackStatus+0x80>)
 800d0c4:	f240 41e7 	movw	r1, #1255	; 0x4e7
 800d0c8:	4817      	ldr	r0, [pc, #92]	; (800d128 <readSubackStatus+0x84>)
 800d0ca:	f004 ff97 	bl	8011ffc <__assert_func>

    /* Iterate through each status byte in the SUBACK packet. */
    for( i = 0; i < statusCount; i++ )
 800d0ce:	2300      	movs	r3, #0
 800d0d0:	613b      	str	r3, [r7, #16]
 800d0d2:	e019      	b.n	800d108 <readSubackStatus+0x64>
    {
        /* Read a single status byte in SUBACK. */
        subscriptionStatus = pStatusStart[ i ];
 800d0d4:	683a      	ldr	r2, [r7, #0]
 800d0d6:	693b      	ldr	r3, [r7, #16]
 800d0d8:	4413      	add	r3, r2
 800d0da:	781b      	ldrb	r3, [r3, #0]
 800d0dc:	73fb      	strb	r3, [r7, #15]

        /* MQTT 3.1.1 defines the following values as status codes. */
        switch( subscriptionStatus )
 800d0de:	7bfb      	ldrb	r3, [r7, #15]
 800d0e0:	2b02      	cmp	r3, #2
 800d0e2:	dc02      	bgt.n	800d0ea <readSubackStatus+0x46>
 800d0e4:	2b00      	cmp	r3, #0
 800d0e6:	da08      	bge.n	800d0fa <readSubackStatus+0x56>
 800d0e8:	e004      	b.n	800d0f4 <readSubackStatus+0x50>
 800d0ea:	2b80      	cmp	r3, #128	; 0x80
 800d0ec:	d102      	bne.n	800d0f4 <readSubackStatus+0x50>
            case 0x80:

                LogWarn( ( "Topic filter %lu refused.", ( unsigned long ) i ) );

                /* Application should remove subscription from the list */
                status = MQTTServerRefused;
 800d0ee:	2306      	movs	r3, #6
 800d0f0:	75fb      	strb	r3, [r7, #23]

                break;
 800d0f2:	e003      	b.n	800d0fc <readSubackStatus+0x58>

            default:
                LogError( ( "Bad SUBSCRIBE status %u.",
                            ( unsigned int ) subscriptionStatus ) );

                status = MQTTBadResponse;
 800d0f4:	2305      	movs	r3, #5
 800d0f6:	75fb      	strb	r3, [r7, #23]

                break;
 800d0f8:	e000      	b.n	800d0fc <readSubackStatus+0x58>
                break;
 800d0fa:	bf00      	nop
        }

        /* Stop parsing the subscription statuses if a bad response was received. */
        if( status == MQTTBadResponse )
 800d0fc:	7dfb      	ldrb	r3, [r7, #23]
 800d0fe:	2b05      	cmp	r3, #5
 800d100:	d007      	beq.n	800d112 <readSubackStatus+0x6e>
    for( i = 0; i < statusCount; i++ )
 800d102:	693b      	ldr	r3, [r7, #16]
 800d104:	3301      	adds	r3, #1
 800d106:	613b      	str	r3, [r7, #16]
 800d108:	693a      	ldr	r2, [r7, #16]
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	429a      	cmp	r2, r3
 800d10e:	d3e1      	bcc.n	800d0d4 <readSubackStatus+0x30>
 800d110:	e000      	b.n	800d114 <readSubackStatus+0x70>
        {
            break;
 800d112:	bf00      	nop
        }
    }

    return status;
 800d114:	7dfb      	ldrb	r3, [r7, #23]
}
 800d116:	4618      	mov	r0, r3
 800d118:	3718      	adds	r7, #24
 800d11a:	46bd      	mov	sp, r7
 800d11c:	bd80      	pop	{r7, pc}
 800d11e:	bf00      	nop
 800d120:	08014c78 	.word	0x08014c78
 800d124:	08015320 	.word	0x08015320
 800d128:	08014a6c 	.word	0x08014a6c

0800d12c <deserializeSuback>:

/*-----------------------------------------------------------*/

static MQTTStatus_t deserializeSuback( const MQTTPacketInfo_t * pSuback,
                                       uint16_t * pPacketIdentifier )
{
 800d12c:	b580      	push	{r7, lr}
 800d12e:	b086      	sub	sp, #24
 800d130:	af00      	add	r7, sp, #0
 800d132:	6078      	str	r0, [r7, #4]
 800d134:	6039      	str	r1, [r7, #0]
    MQTTStatus_t status = MQTTSuccess;
 800d136:	2300      	movs	r3, #0
 800d138:	75fb      	strb	r3, [r7, #23]
    size_t remainingLength;
    const uint8_t * pVariableHeader = NULL;
 800d13a:	2300      	movs	r3, #0
 800d13c:	613b      	str	r3, [r7, #16]

    assert( pSuback != NULL );
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	2b00      	cmp	r3, #0
 800d142:	d106      	bne.n	800d152 <deserializeSuback+0x26>
 800d144:	4b1f      	ldr	r3, [pc, #124]	; (800d1c4 <deserializeSuback+0x98>)
 800d146:	4a20      	ldr	r2, [pc, #128]	; (800d1c8 <deserializeSuback+0x9c>)
 800d148:	f44f 61a4 	mov.w	r1, #1312	; 0x520
 800d14c:	481f      	ldr	r0, [pc, #124]	; (800d1cc <deserializeSuback+0xa0>)
 800d14e:	f004 ff55 	bl	8011ffc <__assert_func>
    assert( pPacketIdentifier != NULL );
 800d152:	683b      	ldr	r3, [r7, #0]
 800d154:	2b00      	cmp	r3, #0
 800d156:	d106      	bne.n	800d166 <deserializeSuback+0x3a>
 800d158:	4b1d      	ldr	r3, [pc, #116]	; (800d1d0 <deserializeSuback+0xa4>)
 800d15a:	4a1b      	ldr	r2, [pc, #108]	; (800d1c8 <deserializeSuback+0x9c>)
 800d15c:	f240 5121 	movw	r1, #1313	; 0x521
 800d160:	481a      	ldr	r0, [pc, #104]	; (800d1cc <deserializeSuback+0xa0>)
 800d162:	f004 ff4b 	bl	8011ffc <__assert_func>

    remainingLength = pSuback->remainingLength;
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	689b      	ldr	r3, [r3, #8]
 800d16a:	60fb      	str	r3, [r7, #12]
    pVariableHeader = pSuback->pRemainingData;
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	685b      	ldr	r3, [r3, #4]
 800d170:	613b      	str	r3, [r7, #16]

    /* A SUBACK must have a remaining length of at least 3 to accommodate the
     * packet identifier and at least 1 return code. */
    if( remainingLength < 3U )
 800d172:	68fb      	ldr	r3, [r7, #12]
 800d174:	2b02      	cmp	r3, #2
 800d176:	d802      	bhi.n	800d17e <deserializeSuback+0x52>
    {
        LogError( ( "SUBACK cannot have a remaining length less than 3." ) );
        status = MQTTBadResponse;
 800d178:	2305      	movs	r3, #5
 800d17a:	75fb      	strb	r3, [r7, #23]
 800d17c:	e01d      	b.n	800d1ba <deserializeSuback+0x8e>
    }
    else
    {
        /* Extract the packet identifier (first 2 bytes of variable header) from SUBACK. */
        *pPacketIdentifier = UINT16_DECODE( pVariableHeader );
 800d17e:	693b      	ldr	r3, [r7, #16]
 800d180:	781b      	ldrb	r3, [r3, #0]
 800d182:	021b      	lsls	r3, r3, #8
 800d184:	b21a      	sxth	r2, r3
 800d186:	693b      	ldr	r3, [r7, #16]
 800d188:	3301      	adds	r3, #1
 800d18a:	781b      	ldrb	r3, [r3, #0]
 800d18c:	b21b      	sxth	r3, r3
 800d18e:	4313      	orrs	r3, r2
 800d190:	b21b      	sxth	r3, r3
 800d192:	b29a      	uxth	r2, r3
 800d194:	683b      	ldr	r3, [r7, #0]
 800d196:	801a      	strh	r2, [r3, #0]

        LogDebug( ( "Packet identifier %hu.",
                    ( unsigned short ) *pPacketIdentifier ) );

        if( *pPacketIdentifier == 0U )
 800d198:	683b      	ldr	r3, [r7, #0]
 800d19a:	881b      	ldrh	r3, [r3, #0]
 800d19c:	2b00      	cmp	r3, #0
 800d19e:	d102      	bne.n	800d1a6 <deserializeSuback+0x7a>
        {
            status = MQTTBadResponse;
 800d1a0:	2305      	movs	r3, #5
 800d1a2:	75fb      	strb	r3, [r7, #23]
 800d1a4:	e009      	b.n	800d1ba <deserializeSuback+0x8e>
        }
        else
        {
            status = readSubackStatus( remainingLength - sizeof( uint16_t ),
 800d1a6:	68fb      	ldr	r3, [r7, #12]
 800d1a8:	1e9a      	subs	r2, r3, #2
 800d1aa:	693b      	ldr	r3, [r7, #16]
 800d1ac:	3302      	adds	r3, #2
 800d1ae:	4619      	mov	r1, r3
 800d1b0:	4610      	mov	r0, r2
 800d1b2:	f7ff ff77 	bl	800d0a4 <readSubackStatus>
 800d1b6:	4603      	mov	r3, r0
 800d1b8:	75fb      	strb	r3, [r7, #23]
                                       &pVariableHeader[ sizeof( uint16_t ) ] );
        }
    }

    return status;
 800d1ba:	7dfb      	ldrb	r3, [r7, #23]
}
 800d1bc:	4618      	mov	r0, r3
 800d1be:	3718      	adds	r7, #24
 800d1c0:	46bd      	mov	sp, r7
 800d1c2:	bd80      	pop	{r7, pc}
 800d1c4:	08014c90 	.word	0x08014c90
 800d1c8:	08015334 	.word	0x08015334
 800d1cc:	08014a6c 	.word	0x08014a6c
 800d1d0:	08014ca0 	.word	0x08014ca0

0800d1d4 <deserializePublish>:
/*-----------------------------------------------------------*/

static MQTTStatus_t deserializePublish( const MQTTPacketInfo_t * pIncomingPacket,
                                        uint16_t * pPacketId,
                                        MQTTPublishInfo_t * pPublishInfo )
{
 800d1d4:	b580      	push	{r7, lr}
 800d1d6:	b088      	sub	sp, #32
 800d1d8:	af00      	add	r7, sp, #0
 800d1da:	60f8      	str	r0, [r7, #12]
 800d1dc:	60b9      	str	r1, [r7, #8]
 800d1de:	607a      	str	r2, [r7, #4]
    MQTTStatus_t status = MQTTSuccess;
 800d1e0:	2300      	movs	r3, #0
 800d1e2:	77fb      	strb	r3, [r7, #31]
    const uint8_t * pVariableHeader, * pPacketIdentifierHigh = NULL;
 800d1e4:	2300      	movs	r3, #0
 800d1e6:	61bb      	str	r3, [r7, #24]

    assert( pIncomingPacket != NULL );
 800d1e8:	68fb      	ldr	r3, [r7, #12]
 800d1ea:	2b00      	cmp	r3, #0
 800d1ec:	d106      	bne.n	800d1fc <deserializePublish+0x28>
 800d1ee:	4b53      	ldr	r3, [pc, #332]	; (800d33c <deserializePublish+0x168>)
 800d1f0:	4a53      	ldr	r2, [pc, #332]	; (800d340 <deserializePublish+0x16c>)
 800d1f2:	f240 5185 	movw	r1, #1413	; 0x585
 800d1f6:	4853      	ldr	r0, [pc, #332]	; (800d344 <deserializePublish+0x170>)
 800d1f8:	f004 ff00 	bl	8011ffc <__assert_func>
    assert( pPacketId != NULL );
 800d1fc:	68bb      	ldr	r3, [r7, #8]
 800d1fe:	2b00      	cmp	r3, #0
 800d200:	d106      	bne.n	800d210 <deserializePublish+0x3c>
 800d202:	4b51      	ldr	r3, [pc, #324]	; (800d348 <deserializePublish+0x174>)
 800d204:	4a4e      	ldr	r2, [pc, #312]	; (800d340 <deserializePublish+0x16c>)
 800d206:	f240 5186 	movw	r1, #1414	; 0x586
 800d20a:	484e      	ldr	r0, [pc, #312]	; (800d344 <deserializePublish+0x170>)
 800d20c:	f004 fef6 	bl	8011ffc <__assert_func>
    assert( pPublishInfo != NULL );
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	2b00      	cmp	r3, #0
 800d214:	d106      	bne.n	800d224 <deserializePublish+0x50>
 800d216:	4b4d      	ldr	r3, [pc, #308]	; (800d34c <deserializePublish+0x178>)
 800d218:	4a49      	ldr	r2, [pc, #292]	; (800d340 <deserializePublish+0x16c>)
 800d21a:	f240 5187 	movw	r1, #1415	; 0x587
 800d21e:	4849      	ldr	r0, [pc, #292]	; (800d344 <deserializePublish+0x170>)
 800d220:	f004 feec 	bl	8011ffc <__assert_func>
    assert( pIncomingPacket->pRemainingData != NULL );
 800d224:	68fb      	ldr	r3, [r7, #12]
 800d226:	685b      	ldr	r3, [r3, #4]
 800d228:	2b00      	cmp	r3, #0
 800d22a:	d106      	bne.n	800d23a <deserializePublish+0x66>
 800d22c:	4b48      	ldr	r3, [pc, #288]	; (800d350 <deserializePublish+0x17c>)
 800d22e:	4a44      	ldr	r2, [pc, #272]	; (800d340 <deserializePublish+0x16c>)
 800d230:	f44f 61b1 	mov.w	r1, #1416	; 0x588
 800d234:	4843      	ldr	r0, [pc, #268]	; (800d344 <deserializePublish+0x170>)
 800d236:	f004 fee1 	bl	8011ffc <__assert_func>

    pVariableHeader = pIncomingPacket->pRemainingData;
 800d23a:	68fb      	ldr	r3, [r7, #12]
 800d23c:	685b      	ldr	r3, [r3, #4]
 800d23e:	617b      	str	r3, [r7, #20]
    /* The flags are the lower 4 bits of the first byte in PUBLISH. */
    status = processPublishFlags( ( pIncomingPacket->type & 0x0FU ), pPublishInfo );
 800d240:	68fb      	ldr	r3, [r7, #12]
 800d242:	781b      	ldrb	r3, [r3, #0]
 800d244:	f003 030f 	and.w	r3, r3, #15
 800d248:	b2db      	uxtb	r3, r3
 800d24a:	6879      	ldr	r1, [r7, #4]
 800d24c:	4618      	mov	r0, r3
 800d24e:	f7ff fdaf 	bl	800cdb0 <processPublishFlags>
 800d252:	4603      	mov	r3, r0
 800d254:	77fb      	strb	r3, [r7, #31]

    if( status == MQTTSuccess )
 800d256:	7ffb      	ldrb	r3, [r7, #31]
 800d258:	2b00      	cmp	r3, #0
 800d25a:	d109      	bne.n	800d270 <deserializePublish+0x9c>
        /* Sanity checks for "Remaining length". A QoS 0 PUBLISH  must have a remaining
         * length of at least 3 to accommodate topic name length (2 bytes) and topic
         * name (at least 1 byte). A QoS 1 or 2 PUBLISH must have a remaining length of
         * at least 5 for the packet identifier in addition to the topic name length and
         * topic name. */
        status = checkPublishRemainingLength( pIncomingPacket->remainingLength,
 800d25c:	68fb      	ldr	r3, [r7, #12]
 800d25e:	6898      	ldr	r0, [r3, #8]
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	781b      	ldrb	r3, [r3, #0]
 800d264:	2203      	movs	r2, #3
 800d266:	4619      	mov	r1, r3
 800d268:	f7ff fd80 	bl	800cd6c <checkPublishRemainingLength>
 800d26c:	4603      	mov	r3, r0
 800d26e:	77fb      	strb	r3, [r7, #31]
                                              pPublishInfo->qos,
                                              MQTT_MIN_PUBLISH_REMAINING_LENGTH_QOS0 );
    }

    if( status == MQTTSuccess )
 800d270:	7ffb      	ldrb	r3, [r7, #31]
 800d272:	2b00      	cmp	r3, #0
 800d274:	d118      	bne.n	800d2a8 <deserializePublish+0xd4>
    {
        /* Extract the topic name starting from the first byte of the variable header.
         * The topic name string starts at byte 3 in the variable header. */
        pPublishInfo->topicNameLength = UINT16_DECODE( pVariableHeader );
 800d276:	697b      	ldr	r3, [r7, #20]
 800d278:	781b      	ldrb	r3, [r3, #0]
 800d27a:	021b      	lsls	r3, r3, #8
 800d27c:	b21a      	sxth	r2, r3
 800d27e:	697b      	ldr	r3, [r7, #20]
 800d280:	3301      	adds	r3, #1
 800d282:	781b      	ldrb	r3, [r3, #0]
 800d284:	b21b      	sxth	r3, r3
 800d286:	4313      	orrs	r3, r2
 800d288:	b21b      	sxth	r3, r3
 800d28a:	b29a      	uxth	r2, r3
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	811a      	strh	r2, [r3, #8]

        /* Sanity checks for topic name length and "Remaining length". The remaining
         * length must be at least as large as the variable length header. */
        status = checkPublishRemainingLength( pIncomingPacket->remainingLength,
 800d290:	68fb      	ldr	r3, [r7, #12]
 800d292:	6898      	ldr	r0, [r3, #8]
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	7819      	ldrb	r1, [r3, #0]
                                              pPublishInfo->qos,
                                              pPublishInfo->topicNameLength + sizeof( uint16_t ) );
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	891b      	ldrh	r3, [r3, #8]
        status = checkPublishRemainingLength( pIncomingPacket->remainingLength,
 800d29c:	3302      	adds	r3, #2
 800d29e:	461a      	mov	r2, r3
 800d2a0:	f7ff fd64 	bl	800cd6c <checkPublishRemainingLength>
 800d2a4:	4603      	mov	r3, r0
 800d2a6:	77fb      	strb	r3, [r7, #31]
    }

    if( status == MQTTSuccess )
 800d2a8:	7ffb      	ldrb	r3, [r7, #31]
 800d2aa:	2b00      	cmp	r3, #0
 800d2ac:	d123      	bne.n	800d2f6 <deserializePublish+0x122>
    {
        /* Parse the topic. */
        pPublishInfo->pTopicName = ( const char * ) ( &pVariableHeader[ sizeof( uint16_t ) ] );
 800d2ae:	697b      	ldr	r3, [r7, #20]
 800d2b0:	1c9a      	adds	r2, r3, #2
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	605a      	str	r2, [r3, #4]
        LogDebug( ( "Topic name length: %hu.", ( unsigned short ) pPublishInfo->topicNameLength ) );

        /* Extract the packet identifier for QoS 1 or 2 PUBLISH packets. Packet
         * identifier starts immediately after the topic name. */
        pPacketIdentifierHigh = ( const uint8_t * ) ( &pPublishInfo->pTopicName[ pPublishInfo->topicNameLength ] );
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	685b      	ldr	r3, [r3, #4]
 800d2ba:	687a      	ldr	r2, [r7, #4]
 800d2bc:	8912      	ldrh	r2, [r2, #8]
 800d2be:	4413      	add	r3, r2
 800d2c0:	61bb      	str	r3, [r7, #24]

        if( pPublishInfo->qos > MQTTQoS0 )
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	781b      	ldrb	r3, [r3, #0]
 800d2c6:	2b00      	cmp	r3, #0
 800d2c8:	d015      	beq.n	800d2f6 <deserializePublish+0x122>
        {
            *pPacketId = UINT16_DECODE( pPacketIdentifierHigh );
 800d2ca:	69bb      	ldr	r3, [r7, #24]
 800d2cc:	781b      	ldrb	r3, [r3, #0]
 800d2ce:	021b      	lsls	r3, r3, #8
 800d2d0:	b21a      	sxth	r2, r3
 800d2d2:	69bb      	ldr	r3, [r7, #24]
 800d2d4:	3301      	adds	r3, #1
 800d2d6:	781b      	ldrb	r3, [r3, #0]
 800d2d8:	b21b      	sxth	r3, r3
 800d2da:	4313      	orrs	r3, r2
 800d2dc:	b21b      	sxth	r3, r3
 800d2de:	b29a      	uxth	r2, r3
 800d2e0:	68bb      	ldr	r3, [r7, #8]
 800d2e2:	801a      	strh	r2, [r3, #0]

            LogDebug( ( "Packet identifier %hu.",
                        ( unsigned short ) *pPacketId ) );

            /* Advance pointer two bytes to start of payload as in the QoS 0 case. */
            pPacketIdentifierHigh = &pPacketIdentifierHigh[ sizeof( uint16_t ) ];
 800d2e4:	69bb      	ldr	r3, [r7, #24]
 800d2e6:	3302      	adds	r3, #2
 800d2e8:	61bb      	str	r3, [r7, #24]

            /* Packet identifier cannot be 0. */
            if( *pPacketId == 0U )
 800d2ea:	68bb      	ldr	r3, [r7, #8]
 800d2ec:	881b      	ldrh	r3, [r3, #0]
 800d2ee:	2b00      	cmp	r3, #0
 800d2f0:	d101      	bne.n	800d2f6 <deserializePublish+0x122>
            {
                LogError( ( "Packet identifier cannot be 0." ) );
                status = MQTTBadResponse;
 800d2f2:	2305      	movs	r3, #5
 800d2f4:	77fb      	strb	r3, [r7, #31]
            }
        }
    }

    if( status == MQTTSuccess )
 800d2f6:	7ffb      	ldrb	r3, [r7, #31]
 800d2f8:	2b00      	cmp	r3, #0
 800d2fa:	d119      	bne.n	800d330 <deserializePublish+0x15c>
    {
        /* Calculate the length of the payload. QoS 1 or 2 PUBLISH packets contain
         * a packet identifier, but QoS 0 PUBLISH packets do not. */
        pPublishInfo->payloadLength = pIncomingPacket->remainingLength - pPublishInfo->topicNameLength - sizeof( uint16_t );
 800d2fc:	68fb      	ldr	r3, [r7, #12]
 800d2fe:	689b      	ldr	r3, [r3, #8]
 800d300:	687a      	ldr	r2, [r7, #4]
 800d302:	8912      	ldrh	r2, [r2, #8]
 800d304:	1a9b      	subs	r3, r3, r2
 800d306:	1e9a      	subs	r2, r3, #2
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	611a      	str	r2, [r3, #16]

        if( pPublishInfo->qos != MQTTQoS0 )
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	781b      	ldrb	r3, [r3, #0]
 800d310:	2b00      	cmp	r3, #0
 800d312:	d004      	beq.n	800d31e <deserializePublish+0x14a>
        {
            /* Two more bytes for the packet identifier. */
            pPublishInfo->payloadLength -= sizeof( uint16_t );
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	691b      	ldr	r3, [r3, #16]
 800d318:	1e9a      	subs	r2, r3, #2
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	611a      	str	r2, [r3, #16]
        }

        /* Set payload if it exists. */
        pPublishInfo->pPayload = ( pPublishInfo->payloadLength != 0U ) ? pPacketIdentifierHigh : NULL;
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	691b      	ldr	r3, [r3, #16]
 800d322:	2b00      	cmp	r3, #0
 800d324:	d001      	beq.n	800d32a <deserializePublish+0x156>
 800d326:	69bb      	ldr	r3, [r7, #24]
 800d328:	e000      	b.n	800d32c <deserializePublish+0x158>
 800d32a:	2300      	movs	r3, #0
 800d32c:	687a      	ldr	r2, [r7, #4]
 800d32e:	60d3      	str	r3, [r2, #12]

        LogDebug( ( "Payload length %lu.",
                    ( unsigned long ) pPublishInfo->payloadLength ) );
    }

    return status;
 800d330:	7ffb      	ldrb	r3, [r7, #31]
}
 800d332:	4618      	mov	r0, r3
 800d334:	3720      	adds	r7, #32
 800d336:	46bd      	mov	sp, r7
 800d338:	bd80      	pop	{r7, pc}
 800d33a:	bf00      	nop
 800d33c:	08014cbc 	.word	0x08014cbc
 800d340:	08015348 	.word	0x08015348
 800d344:	08014a6c 	.word	0x08014a6c
 800d348:	08014cd4 	.word	0x08014cd4
 800d34c:	08014aa0 	.word	0x08014aa0
 800d350:	08014ce8 	.word	0x08014ce8

0800d354 <deserializeSimpleAck>:

/*-----------------------------------------------------------*/

static MQTTStatus_t deserializeSimpleAck( const MQTTPacketInfo_t * pAck,
                                          uint16_t * pPacketIdentifier )
{
 800d354:	b580      	push	{r7, lr}
 800d356:	b084      	sub	sp, #16
 800d358:	af00      	add	r7, sp, #0
 800d35a:	6078      	str	r0, [r7, #4]
 800d35c:	6039      	str	r1, [r7, #0]
    MQTTStatus_t status = MQTTSuccess;
 800d35e:	2300      	movs	r3, #0
 800d360:	73fb      	strb	r3, [r7, #15]

    assert( pAck != NULL );
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	2b00      	cmp	r3, #0
 800d366:	d106      	bne.n	800d376 <deserializeSimpleAck+0x22>
 800d368:	4b18      	ldr	r3, [pc, #96]	; (800d3cc <deserializeSimpleAck+0x78>)
 800d36a:	4a19      	ldr	r2, [pc, #100]	; (800d3d0 <deserializeSimpleAck+0x7c>)
 800d36c:	f240 51e1 	movw	r1, #1505	; 0x5e1
 800d370:	4818      	ldr	r0, [pc, #96]	; (800d3d4 <deserializeSimpleAck+0x80>)
 800d372:	f004 fe43 	bl	8011ffc <__assert_func>
    assert( pPacketIdentifier != NULL );
 800d376:	683b      	ldr	r3, [r7, #0]
 800d378:	2b00      	cmp	r3, #0
 800d37a:	d106      	bne.n	800d38a <deserializeSimpleAck+0x36>
 800d37c:	4b16      	ldr	r3, [pc, #88]	; (800d3d8 <deserializeSimpleAck+0x84>)
 800d37e:	4a14      	ldr	r2, [pc, #80]	; (800d3d0 <deserializeSimpleAck+0x7c>)
 800d380:	f240 51e2 	movw	r1, #1506	; 0x5e2
 800d384:	4813      	ldr	r0, [pc, #76]	; (800d3d4 <deserializeSimpleAck+0x80>)
 800d386:	f004 fe39 	bl	8011ffc <__assert_func>

    /* Check that the "Remaining length" of the received ACK is 2. */
    if( pAck->remainingLength != MQTT_PACKET_SIMPLE_ACK_REMAINING_LENGTH )
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	689b      	ldr	r3, [r3, #8]
 800d38e:	2b02      	cmp	r3, #2
 800d390:	d002      	beq.n	800d398 <deserializeSimpleAck+0x44>
    {
        LogError( ( "ACK does not have remaining length of %u.",
                    ( unsigned int ) MQTT_PACKET_SIMPLE_ACK_REMAINING_LENGTH ) );

        status = MQTTBadResponse;
 800d392:	2305      	movs	r3, #5
 800d394:	73fb      	strb	r3, [r7, #15]
 800d396:	e014      	b.n	800d3c2 <deserializeSimpleAck+0x6e>
    }
    else
    {
        /* Extract the packet identifier (third and fourth bytes) from ACK. */
        *pPacketIdentifier = UINT16_DECODE( pAck->pRemainingData );
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	685b      	ldr	r3, [r3, #4]
 800d39c:	781b      	ldrb	r3, [r3, #0]
 800d39e:	021b      	lsls	r3, r3, #8
 800d3a0:	b21a      	sxth	r2, r3
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	685b      	ldr	r3, [r3, #4]
 800d3a6:	3301      	adds	r3, #1
 800d3a8:	781b      	ldrb	r3, [r3, #0]
 800d3aa:	b21b      	sxth	r3, r3
 800d3ac:	4313      	orrs	r3, r2
 800d3ae:	b21b      	sxth	r3, r3
 800d3b0:	b29a      	uxth	r2, r3
 800d3b2:	683b      	ldr	r3, [r7, #0]
 800d3b4:	801a      	strh	r2, [r3, #0]

        LogDebug( ( "Packet identifier %hu.",
                    ( unsigned short ) *pPacketIdentifier ) );

        /* Packet identifier cannot be 0. */
        if( *pPacketIdentifier == 0U )
 800d3b6:	683b      	ldr	r3, [r7, #0]
 800d3b8:	881b      	ldrh	r3, [r3, #0]
 800d3ba:	2b00      	cmp	r3, #0
 800d3bc:	d101      	bne.n	800d3c2 <deserializeSimpleAck+0x6e>
        {
            LogError( ( "Packet identifier cannot be 0." ) );
            status = MQTTBadResponse;
 800d3be:	2305      	movs	r3, #5
 800d3c0:	73fb      	strb	r3, [r7, #15]
        }
    }

    return status;
 800d3c2:	7bfb      	ldrb	r3, [r7, #15]
}
 800d3c4:	4618      	mov	r0, r3
 800d3c6:	3710      	adds	r7, #16
 800d3c8:	46bd      	mov	sp, r7
 800d3ca:	bd80      	pop	{r7, pc}
 800d3cc:	08014d10 	.word	0x08014d10
 800d3d0:	0801535c 	.word	0x0801535c
 800d3d4:	08014a6c 	.word	0x08014a6c
 800d3d8:	08014ca0 	.word	0x08014ca0

0800d3dc <deserializePingresp>:

/*-----------------------------------------------------------*/

static MQTTStatus_t deserializePingresp( const MQTTPacketInfo_t * pPingresp )
{
 800d3dc:	b580      	push	{r7, lr}
 800d3de:	b084      	sub	sp, #16
 800d3e0:	af00      	add	r7, sp, #0
 800d3e2:	6078      	str	r0, [r7, #4]
    MQTTStatus_t status = MQTTSuccess;
 800d3e4:	2300      	movs	r3, #0
 800d3e6:	73fb      	strb	r3, [r7, #15]

    assert( pPingresp != NULL );
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	2b00      	cmp	r3, #0
 800d3ec:	d106      	bne.n	800d3fc <deserializePingresp+0x20>
 800d3ee:	4b09      	ldr	r3, [pc, #36]	; (800d414 <deserializePingresp+0x38>)
 800d3f0:	4a09      	ldr	r2, [pc, #36]	; (800d418 <deserializePingresp+0x3c>)
 800d3f2:	f240 6105 	movw	r1, #1541	; 0x605
 800d3f6:	4809      	ldr	r0, [pc, #36]	; (800d41c <deserializePingresp+0x40>)
 800d3f8:	f004 fe00 	bl	8011ffc <__assert_func>

    /* Check the "Remaining length" (second byte) of the received PINGRESP is 0. */
    if( pPingresp->remainingLength != MQTT_PACKET_PINGRESP_REMAINING_LENGTH )
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	689b      	ldr	r3, [r3, #8]
 800d400:	2b00      	cmp	r3, #0
 800d402:	d001      	beq.n	800d408 <deserializePingresp+0x2c>
    {
        LogError( ( "PINGRESP does not have remaining length of %u.",
                    MQTT_PACKET_PINGRESP_REMAINING_LENGTH ) );

        status = MQTTBadResponse;
 800d404:	2305      	movs	r3, #5
 800d406:	73fb      	strb	r3, [r7, #15]
    }

    return status;
 800d408:	7bfb      	ldrb	r3, [r7, #15]
}
 800d40a:	4618      	mov	r0, r3
 800d40c:	3710      	adds	r7, #16
 800d40e:	46bd      	mov	sp, r7
 800d410:	bd80      	pop	{r7, pc}
 800d412:	bf00      	nop
 800d414:	08014d20 	.word	0x08014d20
 800d418:	08015374 	.word	0x08015374
 800d41c:	08014a6c 	.word	0x08014a6c

0800d420 <MQTT_SerializeConnectFixedHeader>:

uint8_t * MQTT_SerializeConnectFixedHeader( uint8_t * pIndex,
                                            const MQTTConnectInfo_t * pConnectInfo,
                                            const MQTTPublishInfo_t * pWillInfo,
                                            size_t remainingLength )
{
 800d420:	b580      	push	{r7, lr}
 800d422:	b086      	sub	sp, #24
 800d424:	af00      	add	r7, sp, #0
 800d426:	60f8      	str	r0, [r7, #12]
 800d428:	60b9      	str	r1, [r7, #8]
 800d42a:	607a      	str	r2, [r7, #4]
 800d42c:	603b      	str	r3, [r7, #0]
    uint8_t * pIndexLocal = pIndex;
 800d42e:	68fb      	ldr	r3, [r7, #12]
 800d430:	613b      	str	r3, [r7, #16]
    uint8_t connectFlags = 0U;
 800d432:	2300      	movs	r3, #0
 800d434:	75fb      	strb	r3, [r7, #23]

    /* The first byte in the CONNECT packet is the control packet type. */
    *pIndexLocal = MQTT_PACKET_TYPE_CONNECT;
 800d436:	693b      	ldr	r3, [r7, #16]
 800d438:	2210      	movs	r2, #16
 800d43a:	701a      	strb	r2, [r3, #0]
    pIndexLocal++;
 800d43c:	693b      	ldr	r3, [r7, #16]
 800d43e:	3301      	adds	r3, #1
 800d440:	613b      	str	r3, [r7, #16]

    /* The remaining length of the CONNECT packet is encoded starting from the
     * second byte. The remaining length does not include the length of the fixed
     * header or the encoding of the remaining length. */
    pIndexLocal = encodeRemainingLength( pIndexLocal, remainingLength );
 800d442:	6839      	ldr	r1, [r7, #0]
 800d444:	6938      	ldr	r0, [r7, #16]
 800d446:	f7ff fb27 	bl	800ca98 <encodeRemainingLength>
 800d44a:	6138      	str	r0, [r7, #16]

    /* The string "MQTT" is placed at the beginning of the CONNECT packet's variable
     * header. This string is 4 bytes long. */
    pIndexLocal = encodeString( pIndexLocal, "MQTT", 4 );
 800d44c:	2204      	movs	r2, #4
 800d44e:	492f      	ldr	r1, [pc, #188]	; (800d50c <MQTT_SerializeConnectFixedHeader+0xec>)
 800d450:	6938      	ldr	r0, [r7, #16]
 800d452:	f7ff fb59 	bl	800cb08 <encodeString>
 800d456:	6138      	str	r0, [r7, #16]

    /* The MQTT protocol version is the second field of the variable header. */
    *pIndexLocal = MQTT_VERSION_3_1_1;
 800d458:	693b      	ldr	r3, [r7, #16]
 800d45a:	2204      	movs	r2, #4
 800d45c:	701a      	strb	r2, [r3, #0]
    pIndexLocal++;
 800d45e:	693b      	ldr	r3, [r7, #16]
 800d460:	3301      	adds	r3, #1
 800d462:	613b      	str	r3, [r7, #16]

    /* Set the clean session flag if needed. */
    if( pConnectInfo->cleanSession == true )
 800d464:	68bb      	ldr	r3, [r7, #8]
 800d466:	781b      	ldrb	r3, [r3, #0]
 800d468:	2b00      	cmp	r3, #0
 800d46a:	d003      	beq.n	800d474 <MQTT_SerializeConnectFixedHeader+0x54>
    {
        UINT8_SET_BIT( connectFlags, MQTT_CONNECT_FLAG_CLEAN );
 800d46c:	7dfb      	ldrb	r3, [r7, #23]
 800d46e:	f043 0302 	orr.w	r3, r3, #2
 800d472:	75fb      	strb	r3, [r7, #23]
    }

    /* Set the flags for username and password if provided. */
    if( pConnectInfo->pUserName != NULL )
 800d474:	68bb      	ldr	r3, [r7, #8]
 800d476:	68db      	ldr	r3, [r3, #12]
 800d478:	2b00      	cmp	r3, #0
 800d47a:	d003      	beq.n	800d484 <MQTT_SerializeConnectFixedHeader+0x64>
    {
        UINT8_SET_BIT( connectFlags, MQTT_CONNECT_FLAG_USERNAME );
 800d47c:	7dfb      	ldrb	r3, [r7, #23]
 800d47e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800d482:	75fb      	strb	r3, [r7, #23]
    }

    if( pConnectInfo->pPassword != NULL )
 800d484:	68bb      	ldr	r3, [r7, #8]
 800d486:	695b      	ldr	r3, [r3, #20]
 800d488:	2b00      	cmp	r3, #0
 800d48a:	d003      	beq.n	800d494 <MQTT_SerializeConnectFixedHeader+0x74>
    {
        UINT8_SET_BIT( connectFlags, MQTT_CONNECT_FLAG_PASSWORD );
 800d48c:	7dfb      	ldrb	r3, [r7, #23]
 800d48e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d492:	75fb      	strb	r3, [r7, #23]
    }

    /* Set will flag if a Last Will and Testament is provided. */
    if( pWillInfo != NULL )
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	2b00      	cmp	r3, #0
 800d498:	d01c      	beq.n	800d4d4 <MQTT_SerializeConnectFixedHeader+0xb4>
    {
        UINT8_SET_BIT( connectFlags, MQTT_CONNECT_FLAG_WILL );
 800d49a:	7dfb      	ldrb	r3, [r7, #23]
 800d49c:	f043 0304 	orr.w	r3, r3, #4
 800d4a0:	75fb      	strb	r3, [r7, #23]

        /* Flags only need to be changed for Will QoS 1 or 2. */
        if( pWillInfo->qos == MQTTQoS1 )
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	781b      	ldrb	r3, [r3, #0]
 800d4a6:	2b01      	cmp	r3, #1
 800d4a8:	d104      	bne.n	800d4b4 <MQTT_SerializeConnectFixedHeader+0x94>
        {
            UINT8_SET_BIT( connectFlags, MQTT_CONNECT_FLAG_WILL_QOS1 );
 800d4aa:	7dfb      	ldrb	r3, [r7, #23]
 800d4ac:	f043 0308 	orr.w	r3, r3, #8
 800d4b0:	75fb      	strb	r3, [r7, #23]
 800d4b2:	e007      	b.n	800d4c4 <MQTT_SerializeConnectFixedHeader+0xa4>
        }
        else if( pWillInfo->qos == MQTTQoS2 )
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	781b      	ldrb	r3, [r3, #0]
 800d4b8:	2b02      	cmp	r3, #2
 800d4ba:	d103      	bne.n	800d4c4 <MQTT_SerializeConnectFixedHeader+0xa4>
        {
            UINT8_SET_BIT( connectFlags, MQTT_CONNECT_FLAG_WILL_QOS2 );
 800d4bc:	7dfb      	ldrb	r3, [r7, #23]
 800d4be:	f043 0310 	orr.w	r3, r3, #16
 800d4c2:	75fb      	strb	r3, [r7, #23]
        else
        {
            /* Empty else MISRA 15.7 */
        }

        if( pWillInfo->retain == true )
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	785b      	ldrb	r3, [r3, #1]
 800d4c8:	2b00      	cmp	r3, #0
 800d4ca:	d003      	beq.n	800d4d4 <MQTT_SerializeConnectFixedHeader+0xb4>
        {
            UINT8_SET_BIT( connectFlags, MQTT_CONNECT_FLAG_WILL_RETAIN );
 800d4cc:	7dfb      	ldrb	r3, [r7, #23]
 800d4ce:	f043 0320 	orr.w	r3, r3, #32
 800d4d2:	75fb      	strb	r3, [r7, #23]
        }
    }

    *pIndexLocal = connectFlags;
 800d4d4:	693b      	ldr	r3, [r7, #16]
 800d4d6:	7dfa      	ldrb	r2, [r7, #23]
 800d4d8:	701a      	strb	r2, [r3, #0]
    pIndexLocal++;
 800d4da:	693b      	ldr	r3, [r7, #16]
 800d4dc:	3301      	adds	r3, #1
 800d4de:	613b      	str	r3, [r7, #16]

    /* Write the 2 bytes of the keep alive interval into the CONNECT packet. */
    pIndexLocal[ 0 ] = UINT16_HIGH_BYTE( pConnectInfo->keepAliveSeconds );
 800d4e0:	68bb      	ldr	r3, [r7, #8]
 800d4e2:	885b      	ldrh	r3, [r3, #2]
 800d4e4:	0a1b      	lsrs	r3, r3, #8
 800d4e6:	b29b      	uxth	r3, r3
 800d4e8:	b2da      	uxtb	r2, r3
 800d4ea:	693b      	ldr	r3, [r7, #16]
 800d4ec:	701a      	strb	r2, [r3, #0]
    pIndexLocal[ 1 ] = UINT16_LOW_BYTE( pConnectInfo->keepAliveSeconds );
 800d4ee:	68bb      	ldr	r3, [r7, #8]
 800d4f0:	885a      	ldrh	r2, [r3, #2]
 800d4f2:	693b      	ldr	r3, [r7, #16]
 800d4f4:	3301      	adds	r3, #1
 800d4f6:	b2d2      	uxtb	r2, r2
 800d4f8:	701a      	strb	r2, [r3, #0]
    pIndexLocal = &pIndexLocal[ 2 ];
 800d4fa:	693b      	ldr	r3, [r7, #16]
 800d4fc:	3302      	adds	r3, #2
 800d4fe:	613b      	str	r3, [r7, #16]

    return pIndexLocal;
 800d500:	693b      	ldr	r3, [r7, #16]
}
 800d502:	4618      	mov	r0, r3
 800d504:	3718      	adds	r7, #24
 800d506:	46bd      	mov	sp, r7
 800d508:	bd80      	pop	{r7, pc}
 800d50a:	bf00      	nop
 800d50c:	08014d34 	.word	0x08014d34

0800d510 <MQTT_GetConnectPacketSize>:

MQTTStatus_t MQTT_GetConnectPacketSize( const MQTTConnectInfo_t * pConnectInfo,
                                        const MQTTPublishInfo_t * pWillInfo,
                                        size_t * pRemainingLength,
                                        size_t * pPacketSize )
{
 800d510:	b580      	push	{r7, lr}
 800d512:	b088      	sub	sp, #32
 800d514:	af00      	add	r7, sp, #0
 800d516:	60f8      	str	r0, [r7, #12]
 800d518:	60b9      	str	r1, [r7, #8]
 800d51a:	607a      	str	r2, [r7, #4]
 800d51c:	603b      	str	r3, [r7, #0]
    MQTTStatus_t status = MQTTSuccess;
 800d51e:	2300      	movs	r3, #0
 800d520:	77fb      	strb	r3, [r7, #31]
    size_t remainingLength;

    /* The CONNECT packet will always include a 10-byte variable header. */
    size_t connectPacketSize = MQTT_PACKET_CONNECT_HEADER_SIZE;
 800d522:	230a      	movs	r3, #10
 800d524:	61bb      	str	r3, [r7, #24]

    /* Validate arguments. */
    if( ( pConnectInfo == NULL ) || ( pRemainingLength == NULL ) ||
 800d526:	68fb      	ldr	r3, [r7, #12]
 800d528:	2b00      	cmp	r3, #0
 800d52a:	d005      	beq.n	800d538 <MQTT_GetConnectPacketSize+0x28>
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	2b00      	cmp	r3, #0
 800d530:	d002      	beq.n	800d538 <MQTT_GetConnectPacketSize+0x28>
 800d532:	683b      	ldr	r3, [r7, #0]
 800d534:	2b00      	cmp	r3, #0
 800d536:	d102      	bne.n	800d53e <MQTT_GetConnectPacketSize+0x2e>
        LogError( ( "Argument cannot be NULL: pConnectInfo=%p, "
                    "pRemainingLength=%p, pPacketSize=%p.",
                    ( void * ) pConnectInfo,
                    ( void * ) pRemainingLength,
                    ( void * ) pPacketSize ) );
        status = MQTTBadParameter;
 800d538:	2301      	movs	r3, #1
 800d53a:	77fb      	strb	r3, [r7, #31]
 800d53c:	e04f      	b.n	800d5de <MQTT_GetConnectPacketSize+0xce>
    }
    else if( ( pConnectInfo->clientIdentifierLength == 0U ) || ( pConnectInfo->pClientIdentifier == NULL ) )
 800d53e:	68fb      	ldr	r3, [r7, #12]
 800d540:	891b      	ldrh	r3, [r3, #8]
 800d542:	2b00      	cmp	r3, #0
 800d544:	d003      	beq.n	800d54e <MQTT_GetConnectPacketSize+0x3e>
 800d546:	68fb      	ldr	r3, [r7, #12]
 800d548:	685b      	ldr	r3, [r3, #4]
 800d54a:	2b00      	cmp	r3, #0
 800d54c:	d102      	bne.n	800d554 <MQTT_GetConnectPacketSize+0x44>
    {
        LogError( ( "Mqtt_GetConnectPacketSize() client identifier must be set." ) );
        status = MQTTBadParameter;
 800d54e:	2301      	movs	r3, #1
 800d550:	77fb      	strb	r3, [r7, #31]
 800d552:	e044      	b.n	800d5de <MQTT_GetConnectPacketSize+0xce>
    }
    else if( ( pWillInfo != NULL ) && ( pWillInfo->payloadLength > ( size_t ) UINT16_MAX ) )
 800d554:	68bb      	ldr	r3, [r7, #8]
 800d556:	2b00      	cmp	r3, #0
 800d558:	d007      	beq.n	800d56a <MQTT_GetConnectPacketSize+0x5a>
 800d55a:	68bb      	ldr	r3, [r7, #8]
 800d55c:	691b      	ldr	r3, [r3, #16]
 800d55e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d562:	d302      	bcc.n	800d56a <MQTT_GetConnectPacketSize+0x5a>
         * packet will never be larger than 327699 bytes. */
        LogError( ( "The Will Message length must not exceed %d. "
                    "pWillInfo->payloadLength=%lu.",
                    UINT16_MAX,
                    ( unsigned long ) pWillInfo->payloadLength ) );
        status = MQTTBadParameter;
 800d564:	2301      	movs	r3, #1
 800d566:	77fb      	strb	r3, [r7, #31]
 800d568:	e039      	b.n	800d5de <MQTT_GetConnectPacketSize+0xce>
    }
    else
    {
        /* Add the length of the client identifier. */
        connectPacketSize += pConnectInfo->clientIdentifierLength + sizeof( uint16_t );
 800d56a:	68fb      	ldr	r3, [r7, #12]
 800d56c:	891b      	ldrh	r3, [r3, #8]
 800d56e:	461a      	mov	r2, r3
 800d570:	69bb      	ldr	r3, [r7, #24]
 800d572:	4413      	add	r3, r2
 800d574:	3302      	adds	r3, #2
 800d576:	61bb      	str	r3, [r7, #24]

        /* Add the lengths of the will message and topic name if provided. */
        if( pWillInfo != NULL )
 800d578:	68bb      	ldr	r3, [r7, #8]
 800d57a:	2b00      	cmp	r3, #0
 800d57c:	d009      	beq.n	800d592 <MQTT_GetConnectPacketSize+0x82>
        {
            connectPacketSize += pWillInfo->topicNameLength + sizeof( uint16_t ) +
 800d57e:	68bb      	ldr	r3, [r7, #8]
 800d580:	891b      	ldrh	r3, [r3, #8]
 800d582:	461a      	mov	r2, r3
                                 pWillInfo->payloadLength + sizeof( uint16_t );
 800d584:	68bb      	ldr	r3, [r7, #8]
 800d586:	691b      	ldr	r3, [r3, #16]
            connectPacketSize += pWillInfo->topicNameLength + sizeof( uint16_t ) +
 800d588:	441a      	add	r2, r3
 800d58a:	69bb      	ldr	r3, [r7, #24]
 800d58c:	4413      	add	r3, r2
 800d58e:	3304      	adds	r3, #4
 800d590:	61bb      	str	r3, [r7, #24]
        }

        /* Add the lengths of the user name and password if provided. */
        if( pConnectInfo->pUserName != NULL )
 800d592:	68fb      	ldr	r3, [r7, #12]
 800d594:	68db      	ldr	r3, [r3, #12]
 800d596:	2b00      	cmp	r3, #0
 800d598:	d006      	beq.n	800d5a8 <MQTT_GetConnectPacketSize+0x98>
        {
            connectPacketSize += pConnectInfo->userNameLength + sizeof( uint16_t );
 800d59a:	68fb      	ldr	r3, [r7, #12]
 800d59c:	8a1b      	ldrh	r3, [r3, #16]
 800d59e:	461a      	mov	r2, r3
 800d5a0:	69bb      	ldr	r3, [r7, #24]
 800d5a2:	4413      	add	r3, r2
 800d5a4:	3302      	adds	r3, #2
 800d5a6:	61bb      	str	r3, [r7, #24]
        }

        if( pConnectInfo->pPassword != NULL )
 800d5a8:	68fb      	ldr	r3, [r7, #12]
 800d5aa:	695b      	ldr	r3, [r3, #20]
 800d5ac:	2b00      	cmp	r3, #0
 800d5ae:	d006      	beq.n	800d5be <MQTT_GetConnectPacketSize+0xae>
        {
            connectPacketSize += pConnectInfo->passwordLength + sizeof( uint16_t );
 800d5b0:	68fb      	ldr	r3, [r7, #12]
 800d5b2:	8b1b      	ldrh	r3, [r3, #24]
 800d5b4:	461a      	mov	r2, r3
 800d5b6:	69bb      	ldr	r3, [r7, #24]
 800d5b8:	4413      	add	r3, r2
 800d5ba:	3302      	adds	r3, #2
 800d5bc:	61bb      	str	r3, [r7, #24]
        }

        /* At this point, the "Remaining Length" field of the MQTT CONNECT packet has
         * been calculated. */
        remainingLength = connectPacketSize;
 800d5be:	69bb      	ldr	r3, [r7, #24]
 800d5c0:	617b      	str	r3, [r7, #20]

        /* Calculate the full size of the MQTT CONNECT packet by adding the size of
         * the "Remaining Length" field plus 1 byte for the "Packet Type" field. */
        connectPacketSize += 1U + remainingLengthEncodedSize( connectPacketSize );
 800d5c2:	69b8      	ldr	r0, [r7, #24]
 800d5c4:	f7ff fa46 	bl	800ca54 <remainingLengthEncodedSize>
 800d5c8:	4603      	mov	r3, r0
 800d5ca:	3301      	adds	r3, #1
 800d5cc:	69ba      	ldr	r2, [r7, #24]
 800d5ce:	4413      	add	r3, r2
 800d5d0:	61bb      	str	r3, [r7, #24]
         * (maximum username length) 65535 + (encoded length) 2 +
         * (maximum password length) 65535 + (encoded length) 2 +
         * (packet type field length) 1 +
         * (CONNECT packet encoded length) 3 = 327699 */

        *pRemainingLength = remainingLength;
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	697a      	ldr	r2, [r7, #20]
 800d5d6:	601a      	str	r2, [r3, #0]
        *pPacketSize = connectPacketSize;
 800d5d8:	683b      	ldr	r3, [r7, #0]
 800d5da:	69ba      	ldr	r2, [r7, #24]
 800d5dc:	601a      	str	r2, [r3, #0]
        LogDebug( ( "CONNECT packet remaining length=%lu and packet size=%lu.",
                    ( unsigned long ) *pRemainingLength,
                    ( unsigned long ) *pPacketSize ) );
    }

    return status;
 800d5de:	7ffb      	ldrb	r3, [r7, #31]
}
 800d5e0:	4618      	mov	r0, r3
 800d5e2:	3720      	adds	r7, #32
 800d5e4:	46bd      	mov	sp, r7
 800d5e6:	bd80      	pop	{r7, pc}

0800d5e8 <MQTT_GetSubscribePacketSize>:

MQTTStatus_t MQTT_GetSubscribePacketSize( const MQTTSubscribeInfo_t * pSubscriptionList,
                                          size_t subscriptionCount,
                                          size_t * pRemainingLength,
                                          size_t * pPacketSize )
{
 800d5e8:	b580      	push	{r7, lr}
 800d5ea:	b088      	sub	sp, #32
 800d5ec:	af02      	add	r7, sp, #8
 800d5ee:	60f8      	str	r0, [r7, #12]
 800d5f0:	60b9      	str	r1, [r7, #8]
 800d5f2:	607a      	str	r2, [r7, #4]
 800d5f4:	603b      	str	r3, [r7, #0]
    MQTTStatus_t status = MQTTSuccess;
 800d5f6:	2300      	movs	r3, #0
 800d5f8:	75fb      	strb	r3, [r7, #23]

    /* Validate parameters. */
    if( ( pSubscriptionList == NULL ) || ( pRemainingLength == NULL ) ||
 800d5fa:	68fb      	ldr	r3, [r7, #12]
 800d5fc:	2b00      	cmp	r3, #0
 800d5fe:	d005      	beq.n	800d60c <MQTT_GetSubscribePacketSize+0x24>
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	2b00      	cmp	r3, #0
 800d604:	d002      	beq.n	800d60c <MQTT_GetSubscribePacketSize+0x24>
 800d606:	683b      	ldr	r3, [r7, #0]
 800d608:	2b00      	cmp	r3, #0
 800d60a:	d102      	bne.n	800d612 <MQTT_GetSubscribePacketSize+0x2a>
        LogError( ( "Argument cannot be NULL: pSubscriptionList=%p, "
                    "pRemainingLength=%p, pPacketSize=%p.",
                    ( void * ) pSubscriptionList,
                    ( void * ) pRemainingLength,
                    ( void * ) pPacketSize ) );
        status = MQTTBadParameter;
 800d60c:	2301      	movs	r3, #1
 800d60e:	75fb      	strb	r3, [r7, #23]
 800d610:	e00f      	b.n	800d632 <MQTT_GetSubscribePacketSize+0x4a>
    }
    else if( subscriptionCount == 0U )
 800d612:	68bb      	ldr	r3, [r7, #8]
 800d614:	2b00      	cmp	r3, #0
 800d616:	d102      	bne.n	800d61e <MQTT_GetSubscribePacketSize+0x36>
    {
        LogError( ( "subscriptionCount is 0." ) );
        status = MQTTBadParameter;
 800d618:	2301      	movs	r3, #1
 800d61a:	75fb      	strb	r3, [r7, #23]
 800d61c:	e009      	b.n	800d632 <MQTT_GetSubscribePacketSize+0x4a>
    }
    else
    {
        /* Calculate the MQTT SUBSCRIBE packet size. */
        status = calculateSubscriptionPacketSize( pSubscriptionList,
 800d61e:	2300      	movs	r3, #0
 800d620:	9300      	str	r3, [sp, #0]
 800d622:	683b      	ldr	r3, [r7, #0]
 800d624:	687a      	ldr	r2, [r7, #4]
 800d626:	68b9      	ldr	r1, [r7, #8]
 800d628:	68f8      	ldr	r0, [r7, #12]
 800d62a:	f7ff fca3 	bl	800cf74 <calculateSubscriptionPacketSize>
 800d62e:	4603      	mov	r3, r0
 800d630:	75fb      	strb	r3, [r7, #23]
                                                  pRemainingLength,
                                                  pPacketSize,
                                                  MQTT_SUBSCRIBE );
    }

    return status;
 800d632:	7dfb      	ldrb	r3, [r7, #23]
}
 800d634:	4618      	mov	r0, r3
 800d636:	3718      	adds	r7, #24
 800d638:	46bd      	mov	sp, r7
 800d63a:	bd80      	pop	{r7, pc}

0800d63c <MQTT_SerializeSubscribeHeader>:
/*-----------------------------------------------------------*/

uint8_t * MQTT_SerializeSubscribeHeader( size_t remainingLength,
                                         uint8_t * pIndex,
                                         uint16_t packetId )
{
 800d63c:	b580      	push	{r7, lr}
 800d63e:	b086      	sub	sp, #24
 800d640:	af00      	add	r7, sp, #0
 800d642:	60f8      	str	r0, [r7, #12]
 800d644:	60b9      	str	r1, [r7, #8]
 800d646:	4613      	mov	r3, r2
 800d648:	80fb      	strh	r3, [r7, #6]
    uint8_t * pIterator = pIndex;
 800d64a:	68bb      	ldr	r3, [r7, #8]
 800d64c:	617b      	str	r3, [r7, #20]

    /* The first byte in SUBSCRIBE is the packet type. */
    *pIterator = MQTT_PACKET_TYPE_SUBSCRIBE;
 800d64e:	697b      	ldr	r3, [r7, #20]
 800d650:	2282      	movs	r2, #130	; 0x82
 800d652:	701a      	strb	r2, [r3, #0]
    pIterator++;
 800d654:	697b      	ldr	r3, [r7, #20]
 800d656:	3301      	adds	r3, #1
 800d658:	617b      	str	r3, [r7, #20]

    /* Encode the "Remaining length" starting from the second byte. */
    pIterator = encodeRemainingLength( pIterator, remainingLength );
 800d65a:	68f9      	ldr	r1, [r7, #12]
 800d65c:	6978      	ldr	r0, [r7, #20]
 800d65e:	f7ff fa1b 	bl	800ca98 <encodeRemainingLength>
 800d662:	6178      	str	r0, [r7, #20]

    /* Place the packet identifier into the SUBSCRIBE packet. */
    pIterator[ 0 ] = UINT16_HIGH_BYTE( packetId );
 800d664:	88fb      	ldrh	r3, [r7, #6]
 800d666:	0a1b      	lsrs	r3, r3, #8
 800d668:	b29b      	uxth	r3, r3
 800d66a:	b2da      	uxtb	r2, r3
 800d66c:	697b      	ldr	r3, [r7, #20]
 800d66e:	701a      	strb	r2, [r3, #0]
    pIterator[ 1 ] = UINT16_LOW_BYTE( packetId );
 800d670:	697b      	ldr	r3, [r7, #20]
 800d672:	3301      	adds	r3, #1
 800d674:	88fa      	ldrh	r2, [r7, #6]
 800d676:	b2d2      	uxtb	r2, r2
 800d678:	701a      	strb	r2, [r3, #0]
    /* Advance the pointer. */
    pIterator = &pIterator[ 2 ];
 800d67a:	697b      	ldr	r3, [r7, #20]
 800d67c:	3302      	adds	r3, #2
 800d67e:	617b      	str	r3, [r7, #20]

    return pIterator;
 800d680:	697b      	ldr	r3, [r7, #20]
}
 800d682:	4618      	mov	r0, r3
 800d684:	3718      	adds	r7, #24
 800d686:	46bd      	mov	sp, r7
 800d688:	bd80      	pop	{r7, pc}

0800d68a <MQTT_SerializeAck>:
/*-----------------------------------------------------------*/

MQTTStatus_t MQTT_SerializeAck( const MQTTFixedBuffer_t * pFixedBuffer,
                                uint8_t packetType,
                                uint16_t packetId )
{
 800d68a:	b480      	push	{r7}
 800d68c:	b085      	sub	sp, #20
 800d68e:	af00      	add	r7, sp, #0
 800d690:	6078      	str	r0, [r7, #4]
 800d692:	460b      	mov	r3, r1
 800d694:	70fb      	strb	r3, [r7, #3]
 800d696:	4613      	mov	r3, r2
 800d698:	803b      	strh	r3, [r7, #0]
    MQTTStatus_t status = MQTTSuccess;
 800d69a:	2300      	movs	r3, #0
 800d69c:	73fb      	strb	r3, [r7, #15]

    if( pFixedBuffer == NULL )
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	2b00      	cmp	r3, #0
 800d6a2:	d102      	bne.n	800d6aa <MQTT_SerializeAck+0x20>
    {
        LogError( ( "Provided buffer is NULL." ) );
        status = MQTTBadParameter;
 800d6a4:	2301      	movs	r3, #1
 800d6a6:	73fb      	strb	r3, [r7, #15]
 800d6a8:	e03b      	b.n	800d722 <MQTT_SerializeAck+0x98>
    }
    else if( pFixedBuffer->pBuffer == NULL )
 800d6aa:	687b      	ldr	r3, [r7, #4]
 800d6ac:	681b      	ldr	r3, [r3, #0]
 800d6ae:	2b00      	cmp	r3, #0
 800d6b0:	d102      	bne.n	800d6b8 <MQTT_SerializeAck+0x2e>
    {
        LogError( ( "pFixedBuffer->pBuffer cannot be NULL." ) );
        status = MQTTBadParameter;
 800d6b2:	2301      	movs	r3, #1
 800d6b4:	73fb      	strb	r3, [r7, #15]
 800d6b6:	e034      	b.n	800d722 <MQTT_SerializeAck+0x98>
    }
    /* The buffer must be able to fit 4 bytes for the packet. */
    else if( pFixedBuffer->size < MQTT_PUBLISH_ACK_PACKET_SIZE )
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	685b      	ldr	r3, [r3, #4]
 800d6bc:	2b03      	cmp	r3, #3
 800d6be:	d802      	bhi.n	800d6c6 <MQTT_SerializeAck+0x3c>
    {
        LogError( ( "Insufficient memory for packet." ) );
        status = MQTTNoMemory;
 800d6c0:	2302      	movs	r3, #2
 800d6c2:	73fb      	strb	r3, [r7, #15]
 800d6c4:	e02d      	b.n	800d722 <MQTT_SerializeAck+0x98>
    }
    else if( packetId == 0U )
 800d6c6:	883b      	ldrh	r3, [r7, #0]
 800d6c8:	2b00      	cmp	r3, #0
 800d6ca:	d102      	bne.n	800d6d2 <MQTT_SerializeAck+0x48>
    {
        LogError( ( "Packet ID cannot be 0." ) );
        status = MQTTBadParameter;
 800d6cc:	2301      	movs	r3, #1
 800d6ce:	73fb      	strb	r3, [r7, #15]
 800d6d0:	e027      	b.n	800d722 <MQTT_SerializeAck+0x98>
    }
    else
    {
        switch( packetType )
 800d6d2:	78fb      	ldrb	r3, [r7, #3]
 800d6d4:	2b70      	cmp	r3, #112	; 0x70
 800d6d6:	d009      	beq.n	800d6ec <MQTT_SerializeAck+0x62>
 800d6d8:	2b70      	cmp	r3, #112	; 0x70
 800d6da:	dc1f      	bgt.n	800d71c <MQTT_SerializeAck+0x92>
 800d6dc:	2b62      	cmp	r3, #98	; 0x62
 800d6de:	d005      	beq.n	800d6ec <MQTT_SerializeAck+0x62>
 800d6e0:	2b62      	cmp	r3, #98	; 0x62
 800d6e2:	dc1b      	bgt.n	800d71c <MQTT_SerializeAck+0x92>
 800d6e4:	2b40      	cmp	r3, #64	; 0x40
 800d6e6:	d001      	beq.n	800d6ec <MQTT_SerializeAck+0x62>
 800d6e8:	2b50      	cmp	r3, #80	; 0x50
 800d6ea:	d117      	bne.n	800d71c <MQTT_SerializeAck+0x92>
            /* Only publish acks are serialized by the client. */
            case MQTT_PACKET_TYPE_PUBACK:
            case MQTT_PACKET_TYPE_PUBREC:
            case MQTT_PACKET_TYPE_PUBREL:
            case MQTT_PACKET_TYPE_PUBCOMP:
                pFixedBuffer->pBuffer[ 0 ] = packetType;
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	681b      	ldr	r3, [r3, #0]
 800d6f0:	78fa      	ldrb	r2, [r7, #3]
 800d6f2:	701a      	strb	r2, [r3, #0]
                pFixedBuffer->pBuffer[ 1 ] = MQTT_PACKET_SIMPLE_ACK_REMAINING_LENGTH;
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	681b      	ldr	r3, [r3, #0]
 800d6f8:	3301      	adds	r3, #1
 800d6fa:	2202      	movs	r2, #2
 800d6fc:	701a      	strb	r2, [r3, #0]
                pFixedBuffer->pBuffer[ 2 ] = UINT16_HIGH_BYTE( packetId );
 800d6fe:	883b      	ldrh	r3, [r7, #0]
 800d700:	0a1b      	lsrs	r3, r3, #8
 800d702:	b29a      	uxth	r2, r3
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	681b      	ldr	r3, [r3, #0]
 800d708:	3302      	adds	r3, #2
 800d70a:	b2d2      	uxtb	r2, r2
 800d70c:	701a      	strb	r2, [r3, #0]
                pFixedBuffer->pBuffer[ 3 ] = UINT16_LOW_BYTE( packetId );
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	681b      	ldr	r3, [r3, #0]
 800d712:	3303      	adds	r3, #3
 800d714:	883a      	ldrh	r2, [r7, #0]
 800d716:	b2d2      	uxtb	r2, r2
 800d718:	701a      	strb	r2, [r3, #0]
                break;
 800d71a:	e002      	b.n	800d722 <MQTT_SerializeAck+0x98>

            default:
                LogError( ( "Packet type is not a publish ACK: Packet type=%02x",
                            ( unsigned int ) packetType ) );
                status = MQTTBadParameter;
 800d71c:	2301      	movs	r3, #1
 800d71e:	73fb      	strb	r3, [r7, #15]
                break;
 800d720:	bf00      	nop
        }
    }

    return status;
 800d722:	7bfb      	ldrb	r3, [r7, #15]
}
 800d724:	4618      	mov	r0, r3
 800d726:	3714      	adds	r7, #20
 800d728:	46bd      	mov	sp, r7
 800d72a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d72e:	4770      	bx	lr

0800d730 <MQTT_GetPingreqPacketSize>:
}

/*-----------------------------------------------------------*/

MQTTStatus_t MQTT_GetPingreqPacketSize( size_t * pPacketSize )
{
 800d730:	b480      	push	{r7}
 800d732:	b085      	sub	sp, #20
 800d734:	af00      	add	r7, sp, #0
 800d736:	6078      	str	r0, [r7, #4]
    MQTTStatus_t status = MQTTSuccess;
 800d738:	2300      	movs	r3, #0
 800d73a:	73fb      	strb	r3, [r7, #15]

    if( pPacketSize == NULL )
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	2b00      	cmp	r3, #0
 800d740:	d102      	bne.n	800d748 <MQTT_GetPingreqPacketSize+0x18>
    {
        LogError( ( "pPacketSize is NULL." ) );
        status = MQTTBadParameter;
 800d742:	2301      	movs	r3, #1
 800d744:	73fb      	strb	r3, [r7, #15]
 800d746:	e002      	b.n	800d74e <MQTT_GetPingreqPacketSize+0x1e>
    }
    else
    {
        /* MQTT PINGREQ packets always have the same size. */
        *pPacketSize = MQTT_PACKET_PINGREQ_SIZE;
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	2202      	movs	r2, #2
 800d74c:	601a      	str	r2, [r3, #0]
    }

    return status;
 800d74e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d750:	4618      	mov	r0, r3
 800d752:	3714      	adds	r7, #20
 800d754:	46bd      	mov	sp, r7
 800d756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d75a:	4770      	bx	lr

0800d75c <MQTT_SerializePingreq>:

/*-----------------------------------------------------------*/

MQTTStatus_t MQTT_SerializePingreq( const MQTTFixedBuffer_t * pFixedBuffer )
{
 800d75c:	b480      	push	{r7}
 800d75e:	b085      	sub	sp, #20
 800d760:	af00      	add	r7, sp, #0
 800d762:	6078      	str	r0, [r7, #4]
    MQTTStatus_t status = MQTTSuccess;
 800d764:	2300      	movs	r3, #0
 800d766:	73fb      	strb	r3, [r7, #15]

    if( pFixedBuffer == NULL )
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	2b00      	cmp	r3, #0
 800d76c:	d102      	bne.n	800d774 <MQTT_SerializePingreq+0x18>
    {
        LogError( ( "pFixedBuffer is NULL." ) );
        status = MQTTBadParameter;
 800d76e:	2301      	movs	r3, #1
 800d770:	73fb      	strb	r3, [r7, #15]
 800d772:	e005      	b.n	800d780 <MQTT_SerializePingreq+0x24>
    }
    else if( pFixedBuffer->pBuffer == NULL )
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	681b      	ldr	r3, [r3, #0]
 800d778:	2b00      	cmp	r3, #0
 800d77a:	d101      	bne.n	800d780 <MQTT_SerializePingreq+0x24>
    {
        LogError( ( "pFixedBuffer->pBuffer cannot be NULL." ) );
        status = MQTTBadParameter;
 800d77c:	2301      	movs	r3, #1
 800d77e:	73fb      	strb	r3, [r7, #15]
    else
    {
        /* Empty else MISRA 15.7 */
    }

    if( status == MQTTSuccess )
 800d780:	7bfb      	ldrb	r3, [r7, #15]
 800d782:	2b00      	cmp	r3, #0
 800d784:	d105      	bne.n	800d792 <MQTT_SerializePingreq+0x36>
    {
        if( pFixedBuffer->size < MQTT_PACKET_PINGREQ_SIZE )
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	685b      	ldr	r3, [r3, #4]
 800d78a:	2b01      	cmp	r3, #1
 800d78c:	d801      	bhi.n	800d792 <MQTT_SerializePingreq+0x36>
        {
            LogError( ( "Buffer size of %lu is not sufficient to hold "
                        "serialized PINGREQ packet of size of %lu.",
                        ( unsigned long ) pFixedBuffer->size,
                        MQTT_PACKET_PINGREQ_SIZE ) );
            status = MQTTNoMemory;
 800d78e:	2302      	movs	r3, #2
 800d790:	73fb      	strb	r3, [r7, #15]
        }
    }

    if( status == MQTTSuccess )
 800d792:	7bfb      	ldrb	r3, [r7, #15]
 800d794:	2b00      	cmp	r3, #0
 800d796:	d108      	bne.n	800d7aa <MQTT_SerializePingreq+0x4e>
    {
        /* Ping request packets are always the same. */
        pFixedBuffer->pBuffer[ 0 ] = MQTT_PACKET_TYPE_PINGREQ;
 800d798:	687b      	ldr	r3, [r7, #4]
 800d79a:	681b      	ldr	r3, [r3, #0]
 800d79c:	22c0      	movs	r2, #192	; 0xc0
 800d79e:	701a      	strb	r2, [r3, #0]
        pFixedBuffer->pBuffer[ 1 ] = 0x00;
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	681b      	ldr	r3, [r3, #0]
 800d7a4:	3301      	adds	r3, #1
 800d7a6:	2200      	movs	r2, #0
 800d7a8:	701a      	strb	r2, [r3, #0]
    }

    return status;
 800d7aa:	7bfb      	ldrb	r3, [r7, #15]
}
 800d7ac:	4618      	mov	r0, r3
 800d7ae:	3714      	adds	r7, #20
 800d7b0:	46bd      	mov	sp, r7
 800d7b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7b6:	4770      	bx	lr

0800d7b8 <MQTT_DeserializePublish>:
/*-----------------------------------------------------------*/

MQTTStatus_t MQTT_DeserializePublish( const MQTTPacketInfo_t * pIncomingPacket,
                                      uint16_t * pPacketId,
                                      MQTTPublishInfo_t * pPublishInfo )
{
 800d7b8:	b580      	push	{r7, lr}
 800d7ba:	b086      	sub	sp, #24
 800d7bc:	af00      	add	r7, sp, #0
 800d7be:	60f8      	str	r0, [r7, #12]
 800d7c0:	60b9      	str	r1, [r7, #8]
 800d7c2:	607a      	str	r2, [r7, #4]
    MQTTStatus_t status = MQTTSuccess;
 800d7c4:	2300      	movs	r3, #0
 800d7c6:	75fb      	strb	r3, [r7, #23]

    if( ( pIncomingPacket == NULL ) || ( pPacketId == NULL ) || ( pPublishInfo == NULL ) )
 800d7c8:	68fb      	ldr	r3, [r7, #12]
 800d7ca:	2b00      	cmp	r3, #0
 800d7cc:	d005      	beq.n	800d7da <MQTT_DeserializePublish+0x22>
 800d7ce:	68bb      	ldr	r3, [r7, #8]
 800d7d0:	2b00      	cmp	r3, #0
 800d7d2:	d002      	beq.n	800d7da <MQTT_DeserializePublish+0x22>
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	2b00      	cmp	r3, #0
 800d7d8:	d102      	bne.n	800d7e0 <MQTT_DeserializePublish+0x28>
        LogError( ( "Argument cannot be NULL: pIncomingPacket=%p, "
                    "pPacketId=%p, pPublishInfo=%p",
                    ( void * ) pIncomingPacket,
                    ( void * ) pPacketId,
                    ( void * ) pPublishInfo ) );
        status = MQTTBadParameter;
 800d7da:	2301      	movs	r3, #1
 800d7dc:	75fb      	strb	r3, [r7, #23]
 800d7de:	e016      	b.n	800d80e <MQTT_DeserializePublish+0x56>
    }
    else if( ( pIncomingPacket->type & 0xF0U ) != MQTT_PACKET_TYPE_PUBLISH )
 800d7e0:	68fb      	ldr	r3, [r7, #12]
 800d7e2:	781b      	ldrb	r3, [r3, #0]
 800d7e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d7e8:	2b30      	cmp	r3, #48	; 0x30
 800d7ea:	d002      	beq.n	800d7f2 <MQTT_DeserializePublish+0x3a>
    {
        LogError( ( "Packet is not publish. Packet type: %02x.",
                    ( unsigned int ) pIncomingPacket->type ) );
        status = MQTTBadParameter;
 800d7ec:	2301      	movs	r3, #1
 800d7ee:	75fb      	strb	r3, [r7, #23]
 800d7f0:	e00d      	b.n	800d80e <MQTT_DeserializePublish+0x56>
    }
    else if( pIncomingPacket->pRemainingData == NULL )
 800d7f2:	68fb      	ldr	r3, [r7, #12]
 800d7f4:	685b      	ldr	r3, [r3, #4]
 800d7f6:	2b00      	cmp	r3, #0
 800d7f8:	d102      	bne.n	800d800 <MQTT_DeserializePublish+0x48>
    {
        LogError( ( "Argument cannot be NULL: "
                    "pIncomingPacket->pRemainingData is NULL." ) );
        status = MQTTBadParameter;
 800d7fa:	2301      	movs	r3, #1
 800d7fc:	75fb      	strb	r3, [r7, #23]
 800d7fe:	e006      	b.n	800d80e <MQTT_DeserializePublish+0x56>
    }
    else
    {
        status = deserializePublish( pIncomingPacket, pPacketId, pPublishInfo );
 800d800:	687a      	ldr	r2, [r7, #4]
 800d802:	68b9      	ldr	r1, [r7, #8]
 800d804:	68f8      	ldr	r0, [r7, #12]
 800d806:	f7ff fce5 	bl	800d1d4 <deserializePublish>
 800d80a:	4603      	mov	r3, r0
 800d80c:	75fb      	strb	r3, [r7, #23]
    }

    return status;
 800d80e:	7dfb      	ldrb	r3, [r7, #23]
}
 800d810:	4618      	mov	r0, r3
 800d812:	3718      	adds	r7, #24
 800d814:	46bd      	mov	sp, r7
 800d816:	bd80      	pop	{r7, pc}

0800d818 <MQTT_DeserializeAck>:
/*-----------------------------------------------------------*/

MQTTStatus_t MQTT_DeserializeAck( const MQTTPacketInfo_t * pIncomingPacket,
                                  uint16_t * pPacketId,
                                  bool * pSessionPresent )
{
 800d818:	b580      	push	{r7, lr}
 800d81a:	b086      	sub	sp, #24
 800d81c:	af00      	add	r7, sp, #0
 800d81e:	60f8      	str	r0, [r7, #12]
 800d820:	60b9      	str	r1, [r7, #8]
 800d822:	607a      	str	r2, [r7, #4]
    MQTTStatus_t status = MQTTSuccess;
 800d824:	2300      	movs	r3, #0
 800d826:	75fb      	strb	r3, [r7, #23]

    if( pIncomingPacket == NULL )
 800d828:	68fb      	ldr	r3, [r7, #12]
 800d82a:	2b00      	cmp	r3, #0
 800d82c:	d102      	bne.n	800d834 <MQTT_DeserializeAck+0x1c>
    {
        LogError( ( "pIncomingPacket cannot be NULL." ) );
        status = MQTTBadParameter;
 800d82e:	2301      	movs	r3, #1
 800d830:	75fb      	strb	r3, [r7, #23]
 800d832:	e05f      	b.n	800d8f4 <MQTT_DeserializeAck+0xdc>
    }

    /* Pointer for packet identifier cannot be NULL for packets other than
     * CONNACK and PINGRESP. */
    else if( ( pPacketId == NULL ) &&
 800d834:	68bb      	ldr	r3, [r7, #8]
 800d836:	2b00      	cmp	r3, #0
 800d838:	d10a      	bne.n	800d850 <MQTT_DeserializeAck+0x38>
             ( ( pIncomingPacket->type != MQTT_PACKET_TYPE_CONNACK ) &&
 800d83a:	68fb      	ldr	r3, [r7, #12]
 800d83c:	781b      	ldrb	r3, [r3, #0]
    else if( ( pPacketId == NULL ) &&
 800d83e:	2b20      	cmp	r3, #32
 800d840:	d006      	beq.n	800d850 <MQTT_DeserializeAck+0x38>
               ( pIncomingPacket->type != MQTT_PACKET_TYPE_PINGRESP ) ) )
 800d842:	68fb      	ldr	r3, [r7, #12]
 800d844:	781b      	ldrb	r3, [r3, #0]
             ( ( pIncomingPacket->type != MQTT_PACKET_TYPE_CONNACK ) &&
 800d846:	2bd0      	cmp	r3, #208	; 0xd0
 800d848:	d002      	beq.n	800d850 <MQTT_DeserializeAck+0x38>
    {
        LogError( ( "pPacketId cannot be NULL for packet type %02x.",
                    ( unsigned int ) pIncomingPacket->type ) );
        status = MQTTBadParameter;
 800d84a:	2301      	movs	r3, #1
 800d84c:	75fb      	strb	r3, [r7, #23]
 800d84e:	e051      	b.n	800d8f4 <MQTT_DeserializeAck+0xdc>
    }
    /* Pointer for session present cannot be NULL for CONNACK. */
    else if( ( pSessionPresent == NULL ) &&
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	2b00      	cmp	r3, #0
 800d854:	d106      	bne.n	800d864 <MQTT_DeserializeAck+0x4c>
             ( pIncomingPacket->type == MQTT_PACKET_TYPE_CONNACK ) )
 800d856:	68fb      	ldr	r3, [r7, #12]
 800d858:	781b      	ldrb	r3, [r3, #0]
    else if( ( pSessionPresent == NULL ) &&
 800d85a:	2b20      	cmp	r3, #32
 800d85c:	d102      	bne.n	800d864 <MQTT_DeserializeAck+0x4c>
    {
        LogError( ( "pSessionPresent cannot be NULL for CONNACK packet." ) );
        status = MQTTBadParameter;
 800d85e:	2301      	movs	r3, #1
 800d860:	75fb      	strb	r3, [r7, #23]
 800d862:	e047      	b.n	800d8f4 <MQTT_DeserializeAck+0xdc>
    }

    /* Pointer for remaining data cannot be NULL for packets other
     * than PINGRESP. */
    else if( ( pIncomingPacket->pRemainingData == NULL ) &&
 800d864:	68fb      	ldr	r3, [r7, #12]
 800d866:	685b      	ldr	r3, [r3, #4]
 800d868:	2b00      	cmp	r3, #0
 800d86a:	d106      	bne.n	800d87a <MQTT_DeserializeAck+0x62>
             ( pIncomingPacket->type != MQTT_PACKET_TYPE_PINGRESP ) )
 800d86c:	68fb      	ldr	r3, [r7, #12]
 800d86e:	781b      	ldrb	r3, [r3, #0]
    else if( ( pIncomingPacket->pRemainingData == NULL ) &&
 800d870:	2bd0      	cmp	r3, #208	; 0xd0
 800d872:	d002      	beq.n	800d87a <MQTT_DeserializeAck+0x62>
    {
        LogError( ( "Remaining data of incoming packet is NULL." ) );
        status = MQTTBadParameter;
 800d874:	2301      	movs	r3, #1
 800d876:	75fb      	strb	r3, [r7, #23]
 800d878:	e03c      	b.n	800d8f4 <MQTT_DeserializeAck+0xdc>
    }
    else
    {
        /* Make sure response packet is a valid ack. */
        switch( pIncomingPacket->type )
 800d87a:	68fb      	ldr	r3, [r7, #12]
 800d87c:	781b      	ldrb	r3, [r3, #0]
 800d87e:	2bd0      	cmp	r3, #208	; 0xd0
 800d880:	d028      	beq.n	800d8d4 <MQTT_DeserializeAck+0xbc>
 800d882:	2bd0      	cmp	r3, #208	; 0xd0
 800d884:	dc33      	bgt.n	800d8ee <MQTT_DeserializeAck+0xd6>
 800d886:	2bb0      	cmp	r3, #176	; 0xb0
 800d888:	d02a      	beq.n	800d8e0 <MQTT_DeserializeAck+0xc8>
 800d88a:	2bb0      	cmp	r3, #176	; 0xb0
 800d88c:	dc2f      	bgt.n	800d8ee <MQTT_DeserializeAck+0xd6>
 800d88e:	2b90      	cmp	r3, #144	; 0x90
 800d890:	d019      	beq.n	800d8c6 <MQTT_DeserializeAck+0xae>
 800d892:	2b90      	cmp	r3, #144	; 0x90
 800d894:	dc2b      	bgt.n	800d8ee <MQTT_DeserializeAck+0xd6>
 800d896:	2b70      	cmp	r3, #112	; 0x70
 800d898:	d022      	beq.n	800d8e0 <MQTT_DeserializeAck+0xc8>
 800d89a:	2b70      	cmp	r3, #112	; 0x70
 800d89c:	dc27      	bgt.n	800d8ee <MQTT_DeserializeAck+0xd6>
 800d89e:	2b62      	cmp	r3, #98	; 0x62
 800d8a0:	d01e      	beq.n	800d8e0 <MQTT_DeserializeAck+0xc8>
 800d8a2:	2b62      	cmp	r3, #98	; 0x62
 800d8a4:	dc23      	bgt.n	800d8ee <MQTT_DeserializeAck+0xd6>
 800d8a6:	2b50      	cmp	r3, #80	; 0x50
 800d8a8:	d01a      	beq.n	800d8e0 <MQTT_DeserializeAck+0xc8>
 800d8aa:	2b50      	cmp	r3, #80	; 0x50
 800d8ac:	dc1f      	bgt.n	800d8ee <MQTT_DeserializeAck+0xd6>
 800d8ae:	2b20      	cmp	r3, #32
 800d8b0:	d002      	beq.n	800d8b8 <MQTT_DeserializeAck+0xa0>
 800d8b2:	2b40      	cmp	r3, #64	; 0x40
 800d8b4:	d014      	beq.n	800d8e0 <MQTT_DeserializeAck+0xc8>
 800d8b6:	e01a      	b.n	800d8ee <MQTT_DeserializeAck+0xd6>
        {
            case MQTT_PACKET_TYPE_CONNACK:
                status = deserializeConnack( pIncomingPacket, pSessionPresent );
 800d8b8:	6879      	ldr	r1, [r7, #4]
 800d8ba:	68f8      	ldr	r0, [r7, #12]
 800d8bc:	f7ff faf0 	bl	800cea0 <deserializeConnack>
 800d8c0:	4603      	mov	r3, r0
 800d8c2:	75fb      	strb	r3, [r7, #23]
                break;
 800d8c4:	e016      	b.n	800d8f4 <MQTT_DeserializeAck+0xdc>

            case MQTT_PACKET_TYPE_SUBACK:
                status = deserializeSuback( pIncomingPacket, pPacketId );
 800d8c6:	68b9      	ldr	r1, [r7, #8]
 800d8c8:	68f8      	ldr	r0, [r7, #12]
 800d8ca:	f7ff fc2f 	bl	800d12c <deserializeSuback>
 800d8ce:	4603      	mov	r3, r0
 800d8d0:	75fb      	strb	r3, [r7, #23]
                break;
 800d8d2:	e00f      	b.n	800d8f4 <MQTT_DeserializeAck+0xdc>

            case MQTT_PACKET_TYPE_PINGRESP:
                status = deserializePingresp( pIncomingPacket );
 800d8d4:	68f8      	ldr	r0, [r7, #12]
 800d8d6:	f7ff fd81 	bl	800d3dc <deserializePingresp>
 800d8da:	4603      	mov	r3, r0
 800d8dc:	75fb      	strb	r3, [r7, #23]
                break;
 800d8de:	e009      	b.n	800d8f4 <MQTT_DeserializeAck+0xdc>
            case MQTT_PACKET_TYPE_UNSUBACK:
            case MQTT_PACKET_TYPE_PUBACK:
            case MQTT_PACKET_TYPE_PUBREC:
            case MQTT_PACKET_TYPE_PUBREL:
            case MQTT_PACKET_TYPE_PUBCOMP:
                status = deserializeSimpleAck( pIncomingPacket, pPacketId );
 800d8e0:	68b9      	ldr	r1, [r7, #8]
 800d8e2:	68f8      	ldr	r0, [r7, #12]
 800d8e4:	f7ff fd36 	bl	800d354 <deserializeSimpleAck>
 800d8e8:	4603      	mov	r3, r0
 800d8ea:	75fb      	strb	r3, [r7, #23]
                break;
 800d8ec:	e002      	b.n	800d8f4 <MQTT_DeserializeAck+0xdc>

            /* Any other packet type is invalid. */
            default:
                LogError( ( "IotMqtt_DeserializeResponse() called with unknown packet type:(%02x).",
                            ( unsigned int ) pIncomingPacket->type ) );
                status = MQTTBadResponse;
 800d8ee:	2305      	movs	r3, #5
 800d8f0:	75fb      	strb	r3, [r7, #23]
                break;
 800d8f2:	bf00      	nop
        }
    }

    return status;
 800d8f4:	7dfb      	ldrb	r3, [r7, #23]
}
 800d8f6:	4618      	mov	r0, r3
 800d8f8:	3718      	adds	r7, #24
 800d8fa:	46bd      	mov	sp, r7
 800d8fc:	bd80      	pop	{r7, pc}

0800d8fe <MQTT_GetIncomingPacketTypeAndLength>:
/*-----------------------------------------------------------*/

MQTTStatus_t MQTT_GetIncomingPacketTypeAndLength( TransportRecv_t readFunc,
                                                  NetworkContext_t * pNetworkContext,
                                                  MQTTPacketInfo_t * pIncomingPacket )
{
 800d8fe:	b580      	push	{r7, lr}
 800d900:	b086      	sub	sp, #24
 800d902:	af00      	add	r7, sp, #0
 800d904:	60f8      	str	r0, [r7, #12]
 800d906:	60b9      	str	r1, [r7, #8]
 800d908:	607a      	str	r2, [r7, #4]
    MQTTStatus_t status = MQTTSuccess;
 800d90a:	2300      	movs	r3, #0
 800d90c:	75fb      	strb	r3, [r7, #23]
    int32_t bytesReceived = 0;
 800d90e:	2300      	movs	r3, #0
 800d910:	613b      	str	r3, [r7, #16]

    if( pIncomingPacket == NULL )
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	2b00      	cmp	r3, #0
 800d916:	d102      	bne.n	800d91e <MQTT_GetIncomingPacketTypeAndLength+0x20>
    {
        LogError( ( "Invalid parameter: pIncomingPacket is NULL." ) );
        status = MQTTBadParameter;
 800d918:	2301      	movs	r3, #1
 800d91a:	75fb      	strb	r3, [r7, #23]
 800d91c:	e005      	b.n	800d92a <MQTT_GetIncomingPacketTypeAndLength+0x2c>
    }
    else
    {
        /* Read a single byte. */
        bytesReceived = readFunc( pNetworkContext,
                                  &( pIncomingPacket->type ),
 800d91e:	6879      	ldr	r1, [r7, #4]
        bytesReceived = readFunc( pNetworkContext,
 800d920:	68fb      	ldr	r3, [r7, #12]
 800d922:	2201      	movs	r2, #1
 800d924:	68b8      	ldr	r0, [r7, #8]
 800d926:	4798      	blx	r3
 800d928:	6138      	str	r0, [r7, #16]
                                  1U );
    }

    if( bytesReceived == 1 )
 800d92a:	693b      	ldr	r3, [r7, #16]
 800d92c:	2b01      	cmp	r3, #1
 800d92e:	d119      	bne.n	800d964 <MQTT_GetIncomingPacketTypeAndLength+0x66>
    {
        /* Check validity. */
        if( incomingPacketValid( pIncomingPacket->type ) == true )
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	781b      	ldrb	r3, [r3, #0]
 800d934:	4618      	mov	r0, r3
 800d936:	f7ff f9da 	bl	800ccee <incomingPacketValid>
 800d93a:	4603      	mov	r3, r0
 800d93c:	2b00      	cmp	r3, #0
 800d93e:	d00e      	beq.n	800d95e <MQTT_GetIncomingPacketTypeAndLength+0x60>
        {
            pIncomingPacket->remainingLength = getRemainingLength( readFunc,
 800d940:	68b9      	ldr	r1, [r7, #8]
 800d942:	68f8      	ldr	r0, [r7, #12]
 800d944:	f7ff f920 	bl	800cb88 <getRemainingLength>
 800d948:	4602      	mov	r2, r0
 800d94a:	687b      	ldr	r3, [r7, #4]
 800d94c:	609a      	str	r2, [r3, #8]
                                                                   pNetworkContext );

            if( pIncomingPacket->remainingLength == MQTT_REMAINING_LENGTH_INVALID )
 800d94e:	687b      	ldr	r3, [r7, #4]
 800d950:	689b      	ldr	r3, [r3, #8]
 800d952:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d956:	d113      	bne.n	800d980 <MQTT_GetIncomingPacketTypeAndLength+0x82>
            {
                LogError( ( "Incoming packet remaining length invalid." ) );
                status = MQTTBadResponse;
 800d958:	2305      	movs	r3, #5
 800d95a:	75fb      	strb	r3, [r7, #23]
 800d95c:	e010      	b.n	800d980 <MQTT_GetIncomingPacketTypeAndLength+0x82>
        }
        else
        {
            LogError( ( "Incoming packet invalid: Packet type=%u.",
                        ( unsigned int ) pIncomingPacket->type ) );
            status = MQTTBadResponse;
 800d95e:	2305      	movs	r3, #5
 800d960:	75fb      	strb	r3, [r7, #23]
 800d962:	e00d      	b.n	800d980 <MQTT_GetIncomingPacketTypeAndLength+0x82>
        }
    }
    else if( ( status != MQTTBadParameter ) && ( bytesReceived == 0 ) )
 800d964:	7dfb      	ldrb	r3, [r7, #23]
 800d966:	2b01      	cmp	r3, #1
 800d968:	d005      	beq.n	800d976 <MQTT_GetIncomingPacketTypeAndLength+0x78>
 800d96a:	693b      	ldr	r3, [r7, #16]
 800d96c:	2b00      	cmp	r3, #0
 800d96e:	d102      	bne.n	800d976 <MQTT_GetIncomingPacketTypeAndLength+0x78>
    {
        status = MQTTNoDataAvailable;
 800d970:	2307      	movs	r3, #7
 800d972:	75fb      	strb	r3, [r7, #23]
 800d974:	e004      	b.n	800d980 <MQTT_GetIncomingPacketTypeAndLength+0x82>
    }

    /* If the input packet was valid, then any other number of bytes received is
     * a failure. */
    else if( status != MQTTBadParameter )
 800d976:	7dfb      	ldrb	r3, [r7, #23]
 800d978:	2b01      	cmp	r3, #1
 800d97a:	d001      	beq.n	800d980 <MQTT_GetIncomingPacketTypeAndLength+0x82>
    {
        LogError( ( "A single byte was not read from the transport: "
                    "transportStatus=%ld.",
                    ( long int ) bytesReceived ) );
        status = MQTTRecvFailed;
 800d97c:	2304      	movs	r3, #4
 800d97e:	75fb      	strb	r3, [r7, #23]
    else
    {
        /* Empty else MISRA 15.7 */
    }

    return status;
 800d980:	7dfb      	ldrb	r3, [r7, #23]
}
 800d982:	4618      	mov	r0, r3
 800d984:	3718      	adds	r7, #24
 800d986:	46bd      	mov	sp, r7
 800d988:	bd80      	pop	{r7, pc}

0800d98a <MQTT_ProcessIncomingPacketTypeAndLength>:
/*-----------------------------------------------------------*/

MQTTStatus_t MQTT_ProcessIncomingPacketTypeAndLength( const uint8_t * pBuffer,
                                                      const size_t * pIndex,
                                                      MQTTPacketInfo_t * pIncomingPacket )
{
 800d98a:	b580      	push	{r7, lr}
 800d98c:	b086      	sub	sp, #24
 800d98e:	af00      	add	r7, sp, #0
 800d990:	60f8      	str	r0, [r7, #12]
 800d992:	60b9      	str	r1, [r7, #8]
 800d994:	607a      	str	r2, [r7, #4]
    MQTTStatus_t status = MQTTSuccess;
 800d996:	2300      	movs	r3, #0
 800d998:	75fb      	strb	r3, [r7, #23]

    if( pIncomingPacket == NULL )
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	2b00      	cmp	r3, #0
 800d99e:	d102      	bne.n	800d9a6 <MQTT_ProcessIncomingPacketTypeAndLength+0x1c>
    {
        LogError( ( "Invalid parameter: pIncomingPacket is NULL." ) );
        status = MQTTBadParameter;
 800d9a0:	2301      	movs	r3, #1
 800d9a2:	75fb      	strb	r3, [r7, #23]
 800d9a4:	e016      	b.n	800d9d4 <MQTT_ProcessIncomingPacketTypeAndLength+0x4a>
    }
    else if( pIndex == NULL )
 800d9a6:	68bb      	ldr	r3, [r7, #8]
 800d9a8:	2b00      	cmp	r3, #0
 800d9aa:	d102      	bne.n	800d9b2 <MQTT_ProcessIncomingPacketTypeAndLength+0x28>
    {
        LogError( ( "Invalid parameter: pIndex is NULL." ) );
        status = MQTTBadParameter;
 800d9ac:	2301      	movs	r3, #1
 800d9ae:	75fb      	strb	r3, [r7, #23]
 800d9b0:	e010      	b.n	800d9d4 <MQTT_ProcessIncomingPacketTypeAndLength+0x4a>
    }
    else if( pBuffer == NULL )
 800d9b2:	68fb      	ldr	r3, [r7, #12]
 800d9b4:	2b00      	cmp	r3, #0
 800d9b6:	d102      	bne.n	800d9be <MQTT_ProcessIncomingPacketTypeAndLength+0x34>
    {
        LogError( ( "Invalid parameter: pBuffer is NULL." ) );
        status = MQTTBadParameter;
 800d9b8:	2301      	movs	r3, #1
 800d9ba:	75fb      	strb	r3, [r7, #23]
 800d9bc:	e00a      	b.n	800d9d4 <MQTT_ProcessIncomingPacketTypeAndLength+0x4a>
    }
    /* There should be at least one byte in the buffer */
    else if( *pIndex < 1U )
 800d9be:	68bb      	ldr	r3, [r7, #8]
 800d9c0:	681b      	ldr	r3, [r3, #0]
 800d9c2:	2b00      	cmp	r3, #0
 800d9c4:	d102      	bne.n	800d9cc <MQTT_ProcessIncomingPacketTypeAndLength+0x42>
    {
        /* No data is available. There are 0 bytes received from the network
         * receive function. */
        status = MQTTNoDataAvailable;
 800d9c6:	2307      	movs	r3, #7
 800d9c8:	75fb      	strb	r3, [r7, #23]
 800d9ca:	e003      	b.n	800d9d4 <MQTT_ProcessIncomingPacketTypeAndLength+0x4a>
    }
    else
    {
        /* At least one byte is present which should be deciphered. */
        pIncomingPacket->type = pBuffer[ 0 ];
 800d9cc:	68fb      	ldr	r3, [r7, #12]
 800d9ce:	781a      	ldrb	r2, [r3, #0]
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	701a      	strb	r2, [r3, #0]
    }

    if( status == MQTTSuccess )
 800d9d4:	7dfb      	ldrb	r3, [r7, #23]
 800d9d6:	2b00      	cmp	r3, #0
 800d9d8:	d111      	bne.n	800d9fe <MQTT_ProcessIncomingPacketTypeAndLength+0x74>
    {
        /* Check validity. */
        if( incomingPacketValid( pIncomingPacket->type ) == true )
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	781b      	ldrb	r3, [r3, #0]
 800d9de:	4618      	mov	r0, r3
 800d9e0:	f7ff f985 	bl	800ccee <incomingPacketValid>
 800d9e4:	4603      	mov	r3, r0
 800d9e6:	2b00      	cmp	r3, #0
 800d9e8:	d007      	beq.n	800d9fa <MQTT_ProcessIncomingPacketTypeAndLength+0x70>
        {
            status = processRemainingLength( pBuffer,
 800d9ea:	687a      	ldr	r2, [r7, #4]
 800d9ec:	68b9      	ldr	r1, [r7, #8]
 800d9ee:	68f8      	ldr	r0, [r7, #12]
 800d9f0:	f7ff f91e 	bl	800cc30 <processRemainingLength>
 800d9f4:	4603      	mov	r3, r0
 800d9f6:	75fb      	strb	r3, [r7, #23]
 800d9f8:	e001      	b.n	800d9fe <MQTT_ProcessIncomingPacketTypeAndLength+0x74>
        }
        else
        {
            LogError( ( "Incoming packet invalid: Packet type=%u.",
                        ( unsigned int ) pIncomingPacket->type ) );
            status = MQTTBadResponse;
 800d9fa:	2305      	movs	r3, #5
 800d9fc:	75fb      	strb	r3, [r7, #23]
        }
    }

    return status;
 800d9fe:	7dfb      	ldrb	r3, [r7, #23]
}
 800da00:	4618      	mov	r0, r3
 800da02:	3718      	adds	r7, #24
 800da04:	46bd      	mov	sp, r7
 800da06:	bd80      	pop	{r7, pc}

0800da08 <validateTransitionPublish>:

static bool validateTransitionPublish( MQTTPublishState_t currentState,
                                       MQTTPublishState_t newState,
                                       MQTTStateOperation_t opType,
                                       MQTTQoS_t qos )
{
 800da08:	b490      	push	{r4, r7}
 800da0a:	b084      	sub	sp, #16
 800da0c:	af00      	add	r7, sp, #0
 800da0e:	4604      	mov	r4, r0
 800da10:	4608      	mov	r0, r1
 800da12:	4611      	mov	r1, r2
 800da14:	461a      	mov	r2, r3
 800da16:	4623      	mov	r3, r4
 800da18:	71fb      	strb	r3, [r7, #7]
 800da1a:	4603      	mov	r3, r0
 800da1c:	71bb      	strb	r3, [r7, #6]
 800da1e:	460b      	mov	r3, r1
 800da20:	717b      	strb	r3, [r7, #5]
 800da22:	4613      	mov	r3, r2
 800da24:	713b      	strb	r3, [r7, #4]
    bool isValid = false;
 800da26:	2300      	movs	r3, #0
 800da28:	73fb      	strb	r3, [r7, #15]

    switch( currentState )
 800da2a:	79fb      	ldrb	r3, [r7, #7]
 800da2c:	2b07      	cmp	r3, #7
 800da2e:	d848      	bhi.n	800dac2 <validateTransitionPublish+0xba>
 800da30:	a201      	add	r2, pc, #4	; (adr r2, 800da38 <validateTransitionPublish+0x30>)
 800da32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da36:	bf00      	nop
 800da38:	0800da59 	.word	0x0800da59
 800da3c:	0800da7d 	.word	0x0800da7d
 800da40:	0800dac3 	.word	0x0800dac3
 800da44:	0800dac3 	.word	0x0800dac3
 800da48:	0800dac3 	.word	0x0800dac3
 800da4c:	0800dac3 	.word	0x0800dac3
 800da50:	0800daa7 	.word	0x0800daa7
 800da54:	0800dab5 	.word	0x0800dab5
    {
        case MQTTStateNull:

            /* Transitions from null occur when storing a new entry into the record. */
            if( opType == MQTT_RECEIVE )
 800da58:	797b      	ldrb	r3, [r7, #5]
 800da5a:	2b01      	cmp	r3, #1
 800da5c:	d133      	bne.n	800dac6 <validateTransitionPublish+0xbe>
            {
                isValid = ( newState == MQTTPubAckSend ) || ( newState == MQTTPubRecSend );
 800da5e:	79bb      	ldrb	r3, [r7, #6]
 800da60:	2b02      	cmp	r3, #2
 800da62:	d002      	beq.n	800da6a <validateTransitionPublish+0x62>
 800da64:	79bb      	ldrb	r3, [r7, #6]
 800da66:	2b03      	cmp	r3, #3
 800da68:	d101      	bne.n	800da6e <validateTransitionPublish+0x66>
 800da6a:	2301      	movs	r3, #1
 800da6c:	e000      	b.n	800da70 <validateTransitionPublish+0x68>
 800da6e:	2300      	movs	r3, #0
 800da70:	73fb      	strb	r3, [r7, #15]
 800da72:	7bfb      	ldrb	r3, [r7, #15]
 800da74:	f003 0301 	and.w	r3, r3, #1
 800da78:	73fb      	strb	r3, [r7, #15]
            }

            break;
 800da7a:	e024      	b.n	800dac6 <validateTransitionPublish+0xbe>

        case MQTTPublishSend:

            /* Outgoing publish. All such publishes start in this state due to
             * the reserve operation. */
            switch( qos )
 800da7c:	793b      	ldrb	r3, [r7, #4]
 800da7e:	2b01      	cmp	r3, #1
 800da80:	d002      	beq.n	800da88 <validateTransitionPublish+0x80>
 800da82:	2b02      	cmp	r3, #2
 800da84:	d007      	beq.n	800da96 <validateTransitionPublish+0x8e>
                    break;

                case MQTTQoS0:
                default:
                    /* QoS 0 is checked before calling this function. */
                    break;
 800da86:	e00d      	b.n	800daa4 <validateTransitionPublish+0x9c>
                    isValid = newState == MQTTPubAckPending;
 800da88:	79bb      	ldrb	r3, [r7, #6]
 800da8a:	2b06      	cmp	r3, #6
 800da8c:	bf0c      	ite	eq
 800da8e:	2301      	moveq	r3, #1
 800da90:	2300      	movne	r3, #0
 800da92:	73fb      	strb	r3, [r7, #15]
                    break;
 800da94:	e006      	b.n	800daa4 <validateTransitionPublish+0x9c>
                    isValid = newState == MQTTPubRecPending;
 800da96:	79bb      	ldrb	r3, [r7, #6]
 800da98:	2b07      	cmp	r3, #7
 800da9a:	bf0c      	ite	eq
 800da9c:	2301      	moveq	r3, #1
 800da9e:	2300      	movne	r3, #0
 800daa0:	73fb      	strb	r3, [r7, #15]
                    break;
 800daa2:	bf00      	nop
            }

            break;
 800daa4:	e010      	b.n	800dac8 <validateTransitionPublish+0xc0>
         * reestablished. */
        case MQTTPubAckPending:

            /* When a session is reestablished, outgoing QoS1 publishes in state
             * #MQTTPubAckPending can be resent. The state remains the same. */
            isValid = newState == MQTTPubAckPending;
 800daa6:	79bb      	ldrb	r3, [r7, #6]
 800daa8:	2b06      	cmp	r3, #6
 800daaa:	bf0c      	ite	eq
 800daac:	2301      	moveq	r3, #1
 800daae:	2300      	movne	r3, #0
 800dab0:	73fb      	strb	r3, [r7, #15]

            break;
 800dab2:	e009      	b.n	800dac8 <validateTransitionPublish+0xc0>

        case MQTTPubRecPending:

            /* When a session is reestablished, outgoing QoS2 publishes in state
             * #MQTTPubRecPending can be resent. The state remains the same. */
            isValid = newState == MQTTPubRecPending;
 800dab4:	79bb      	ldrb	r3, [r7, #6]
 800dab6:	2b07      	cmp	r3, #7
 800dab8:	bf0c      	ite	eq
 800daba:	2301      	moveq	r3, #1
 800dabc:	2300      	movne	r3, #0
 800dabe:	73fb      	strb	r3, [r7, #15]

            break;
 800dac0:	e002      	b.n	800dac8 <validateTransitionPublish+0xc0>
        case MQTTPubRelPending:
        case MQTTPubRelSend:
        case MQTTPublishDone:
        default:
            /* For a PUBLISH, we should not start from any other state. */
            break;
 800dac2:	bf00      	nop
 800dac4:	e000      	b.n	800dac8 <validateTransitionPublish+0xc0>
            break;
 800dac6:	bf00      	nop
    }

    return isValid;
 800dac8:	7bfb      	ldrb	r3, [r7, #15]
}
 800daca:	4618      	mov	r0, r3
 800dacc:	3710      	adds	r7, #16
 800dace:	46bd      	mov	sp, r7
 800dad0:	bc90      	pop	{r4, r7}
 800dad2:	4770      	bx	lr

0800dad4 <validateTransitionAck>:

/*-----------------------------------------------------------*/

static bool validateTransitionAck( MQTTPublishState_t currentState,
                                   MQTTPublishState_t newState )
{
 800dad4:	b480      	push	{r7}
 800dad6:	b085      	sub	sp, #20
 800dad8:	af00      	add	r7, sp, #0
 800dada:	4603      	mov	r3, r0
 800dadc:	460a      	mov	r2, r1
 800dade:	71fb      	strb	r3, [r7, #7]
 800dae0:	4613      	mov	r3, r2
 800dae2:	71bb      	strb	r3, [r7, #6]
    bool isValid = false;
 800dae4:	2300      	movs	r3, #0
 800dae6:	73fb      	strb	r3, [r7, #15]

    switch( currentState )
 800dae8:	79fb      	ldrb	r3, [r7, #7]
 800daea:	3b02      	subs	r3, #2
 800daec:	2b07      	cmp	r3, #7
 800daee:	d85c      	bhi.n	800dbaa <validateTransitionAck+0xd6>
 800daf0:	a201      	add	r2, pc, #4	; (adr r2, 800daf8 <validateTransitionAck+0x24>)
 800daf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800daf6:	bf00      	nop
 800daf8:	0800db19 	.word	0x0800db19
 800dafc:	0800db27 	.word	0x0800db27
 800db00:	0800db7f 	.word	0x0800db7f
 800db04:	0800db53 	.word	0x0800db53
 800db08:	0800db19 	.word	0x0800db19
 800db0c:	0800db71 	.word	0x0800db71
 800db10:	0800db35 	.word	0x0800db35
 800db14:	0800db8d 	.word	0x0800db8d
    {
        case MQTTPubAckSend:
        /* Incoming publish, QoS 1. */
        case MQTTPubAckPending:
            /* Outgoing publish, QoS 1. */
            isValid = newState == MQTTPublishDone;
 800db18:	79bb      	ldrb	r3, [r7, #6]
 800db1a:	2b0a      	cmp	r3, #10
 800db1c:	bf0c      	ite	eq
 800db1e:	2301      	moveq	r3, #1
 800db20:	2300      	movne	r3, #0
 800db22:	73fb      	strb	r3, [r7, #15]
            break;
 800db24:	e042      	b.n	800dbac <validateTransitionAck+0xd8>

        case MQTTPubRecSend:
            /* Incoming publish, QoS 2. */
            isValid = newState == MQTTPubRelPending;
 800db26:	79bb      	ldrb	r3, [r7, #6]
 800db28:	2b08      	cmp	r3, #8
 800db2a:	bf0c      	ite	eq
 800db2c:	2301      	moveq	r3, #1
 800db2e:	2300      	movne	r3, #0
 800db30:	73fb      	strb	r3, [r7, #15]
            break;
 800db32:	e03b      	b.n	800dbac <validateTransitionAck+0xd8>
             *    5. MQTT broker resent the un-acked publish.
             *    6. Publish is received when publish record state is in
             *       MQTTPubRelPending.
             *    7. Sending out a PUBREC will result in this transition
             *       to the same state. */
            isValid = ( newState == MQTTPubCompSend ) ||
 800db34:	79bb      	ldrb	r3, [r7, #6]
 800db36:	2b05      	cmp	r3, #5
 800db38:	d002      	beq.n	800db40 <validateTransitionAck+0x6c>
 800db3a:	79bb      	ldrb	r3, [r7, #6]
 800db3c:	2b08      	cmp	r3, #8
 800db3e:	d101      	bne.n	800db44 <validateTransitionAck+0x70>
 800db40:	2301      	movs	r3, #1
 800db42:	e000      	b.n	800db46 <validateTransitionAck+0x72>
 800db44:	2300      	movs	r3, #0
 800db46:	73fb      	strb	r3, [r7, #15]
 800db48:	7bfb      	ldrb	r3, [r7, #15]
 800db4a:	f003 0301 	and.w	r3, r3, #1
 800db4e:	73fb      	strb	r3, [r7, #15]
                      ( newState == MQTTPubRelPending );
            break;
 800db50:	e02c      	b.n	800dbac <validateTransitionAck+0xd8>
             *       for an incoming PUBREL.
             *    2. Reestablished an MQTT session.
             *    3. MQTT broker resent the un-acked PUBREL.
             *    4. Receiving the PUBREL again will result in this transition
             *       to the same state. */
            isValid = ( newState == MQTTPublishDone ) ||
 800db52:	79bb      	ldrb	r3, [r7, #6]
 800db54:	2b0a      	cmp	r3, #10
 800db56:	d002      	beq.n	800db5e <validateTransitionAck+0x8a>
 800db58:	79bb      	ldrb	r3, [r7, #6]
 800db5a:	2b05      	cmp	r3, #5
 800db5c:	d101      	bne.n	800db62 <validateTransitionAck+0x8e>
 800db5e:	2301      	movs	r3, #1
 800db60:	e000      	b.n	800db64 <validateTransitionAck+0x90>
 800db62:	2300      	movs	r3, #0
 800db64:	73fb      	strb	r3, [r7, #15]
 800db66:	7bfb      	ldrb	r3, [r7, #15]
 800db68:	f003 0301 	and.w	r3, r3, #1
 800db6c:	73fb      	strb	r3, [r7, #15]
                      ( newState == MQTTPubCompSend );
            break;
 800db6e:	e01d      	b.n	800dbac <validateTransitionAck+0xd8>

        case MQTTPubRecPending:
            /* Outgoing publish, Qos 2. */
            isValid = newState == MQTTPubRelSend;
 800db70:	79bb      	ldrb	r3, [r7, #6]
 800db72:	2b04      	cmp	r3, #4
 800db74:	bf0c      	ite	eq
 800db76:	2301      	moveq	r3, #1
 800db78:	2300      	movne	r3, #0
 800db7a:	73fb      	strb	r3, [r7, #15]
            break;
 800db7c:	e016      	b.n	800dbac <validateTransitionAck+0xd8>

        case MQTTPubRelSend:
            /* Outgoing publish, Qos 2. */
            isValid = newState == MQTTPubCompPending;
 800db7e:	79bb      	ldrb	r3, [r7, #6]
 800db80:	2b09      	cmp	r3, #9
 800db82:	bf0c      	ite	eq
 800db84:	2301      	moveq	r3, #1
 800db86:	2300      	movne	r3, #0
 800db88:	73fb      	strb	r3, [r7, #15]
            break;
 800db8a:	e00f      	b.n	800dbac <validateTransitionAck+0xd8>
             *    1. A TCP connection failure happened before receiving a PUBCOMP
             *       for an outgoing PUBREL.
             *    2. An MQTT session is reestablished.
             *    3. Resending the un-acked PUBREL results in this transition
             *       to the same state. */
            isValid = ( newState == MQTTPublishDone ) ||
 800db8c:	79bb      	ldrb	r3, [r7, #6]
 800db8e:	2b0a      	cmp	r3, #10
 800db90:	d002      	beq.n	800db98 <validateTransitionAck+0xc4>
 800db92:	79bb      	ldrb	r3, [r7, #6]
 800db94:	2b09      	cmp	r3, #9
 800db96:	d101      	bne.n	800db9c <validateTransitionAck+0xc8>
 800db98:	2301      	movs	r3, #1
 800db9a:	e000      	b.n	800db9e <validateTransitionAck+0xca>
 800db9c:	2300      	movs	r3, #0
 800db9e:	73fb      	strb	r3, [r7, #15]
 800dba0:	7bfb      	ldrb	r3, [r7, #15]
 800dba2:	f003 0301 	and.w	r3, r3, #1
 800dba6:	73fb      	strb	r3, [r7, #15]
                      ( newState == MQTTPubCompPending );
            break;
 800dba8:	e000      	b.n	800dbac <validateTransitionAck+0xd8>
        /* If an ack was sent/received we shouldn't have been in this state. */
        case MQTTStateNull:
        /* If an ack was sent/received the record should exist. */
        default:
            /* Invalid. */
            break;
 800dbaa:	bf00      	nop
    }

    return isValid;
 800dbac:	7bfb      	ldrb	r3, [r7, #15]
}
 800dbae:	4618      	mov	r0, r3
 800dbb0:	3714      	adds	r7, #20
 800dbb2:	46bd      	mov	sp, r7
 800dbb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbb8:	4770      	bx	lr
 800dbba:	bf00      	nop

0800dbbc <isPublishOutgoing>:

/*-----------------------------------------------------------*/

static bool isPublishOutgoing( MQTTPubAckType_t packetType,
                               MQTTStateOperation_t opType )
{
 800dbbc:	b480      	push	{r7}
 800dbbe:	b085      	sub	sp, #20
 800dbc0:	af00      	add	r7, sp, #0
 800dbc2:	4603      	mov	r3, r0
 800dbc4:	460a      	mov	r2, r1
 800dbc6:	71fb      	strb	r3, [r7, #7]
 800dbc8:	4613      	mov	r3, r2
 800dbca:	71bb      	strb	r3, [r7, #6]
    bool isOutgoing = false;
 800dbcc:	2300      	movs	r3, #0
 800dbce:	73fb      	strb	r3, [r7, #15]

    switch( packetType )
 800dbd0:	79fb      	ldrb	r3, [r7, #7]
 800dbd2:	2b03      	cmp	r3, #3
 800dbd4:	d009      	beq.n	800dbea <isPublishOutgoing+0x2e>
 800dbd6:	2b03      	cmp	r3, #3
 800dbd8:	dc15      	bgt.n	800dc06 <isPublishOutgoing+0x4a>
 800dbda:	2b01      	cmp	r3, #1
 800dbdc:	dc02      	bgt.n	800dbe4 <isPublishOutgoing+0x28>
 800dbde:	2b00      	cmp	r3, #0
 800dbe0:	da03      	bge.n	800dbea <isPublishOutgoing+0x2e>
            isOutgoing = opType == MQTT_SEND;
            break;

        default:
            /* No other ack type. */
            break;
 800dbe2:	e010      	b.n	800dc06 <isPublishOutgoing+0x4a>
    switch( packetType )
 800dbe4:	2b02      	cmp	r3, #2
 800dbe6:	d007      	beq.n	800dbf8 <isPublishOutgoing+0x3c>
            break;
 800dbe8:	e00d      	b.n	800dc06 <isPublishOutgoing+0x4a>
            isOutgoing = opType == MQTT_RECEIVE;
 800dbea:	79bb      	ldrb	r3, [r7, #6]
 800dbec:	2b01      	cmp	r3, #1
 800dbee:	bf0c      	ite	eq
 800dbf0:	2301      	moveq	r3, #1
 800dbf2:	2300      	movne	r3, #0
 800dbf4:	73fb      	strb	r3, [r7, #15]
            break;
 800dbf6:	e007      	b.n	800dc08 <isPublishOutgoing+0x4c>
            isOutgoing = opType == MQTT_SEND;
 800dbf8:	79bb      	ldrb	r3, [r7, #6]
 800dbfa:	2b00      	cmp	r3, #0
 800dbfc:	bf0c      	ite	eq
 800dbfe:	2301      	moveq	r3, #1
 800dc00:	2300      	movne	r3, #0
 800dc02:	73fb      	strb	r3, [r7, #15]
            break;
 800dc04:	e000      	b.n	800dc08 <isPublishOutgoing+0x4c>
            break;
 800dc06:	bf00      	nop
    }

    return isOutgoing;
 800dc08:	7bfb      	ldrb	r3, [r7, #15]
}
 800dc0a:	4618      	mov	r0, r3
 800dc0c:	3714      	adds	r7, #20
 800dc0e:	46bd      	mov	sp, r7
 800dc10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc14:	4770      	bx	lr
	...

0800dc18 <findInRecord>:
static size_t findInRecord( const MQTTPubAckInfo_t * records,
                            size_t recordCount,
                            uint16_t packetId,
                            MQTTQoS_t * pQos,
                            MQTTPublishState_t * pCurrentState )
{
 800dc18:	b580      	push	{r7, lr}
 800dc1a:	b086      	sub	sp, #24
 800dc1c:	af00      	add	r7, sp, #0
 800dc1e:	60f8      	str	r0, [r7, #12]
 800dc20:	60b9      	str	r1, [r7, #8]
 800dc22:	603b      	str	r3, [r7, #0]
 800dc24:	4613      	mov	r3, r2
 800dc26:	80fb      	strh	r3, [r7, #6]
    size_t index = 0;
 800dc28:	2300      	movs	r3, #0
 800dc2a:	617b      	str	r3, [r7, #20]

    assert( packetId != MQTT_PACKET_ID_INVALID );
 800dc2c:	88fb      	ldrh	r3, [r7, #6]
 800dc2e:	2b00      	cmp	r3, #0
 800dc30:	d106      	bne.n	800dc40 <findInRecord+0x28>
 800dc32:	4b1b      	ldr	r3, [pc, #108]	; (800dca0 <findInRecord+0x88>)
 800dc34:	4a1b      	ldr	r2, [pc, #108]	; (800dca4 <findInRecord+0x8c>)
 800dc36:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
 800dc3a:	481b      	ldr	r0, [pc, #108]	; (800dca8 <findInRecord+0x90>)
 800dc3c:	f004 f9de 	bl	8011ffc <__assert_func>

    *pCurrentState = MQTTStateNull;
 800dc40:	6a3b      	ldr	r3, [r7, #32]
 800dc42:	2200      	movs	r2, #0
 800dc44:	701a      	strb	r2, [r3, #0]

    for( index = 0; index < recordCount; index++ )
 800dc46:	2300      	movs	r3, #0
 800dc48:	617b      	str	r3, [r7, #20]
 800dc4a:	e019      	b.n	800dc80 <findInRecord+0x68>
    {
        if( records[ index ].packetId == packetId )
 800dc4c:	697b      	ldr	r3, [r7, #20]
 800dc4e:	009b      	lsls	r3, r3, #2
 800dc50:	68fa      	ldr	r2, [r7, #12]
 800dc52:	4413      	add	r3, r2
 800dc54:	881b      	ldrh	r3, [r3, #0]
 800dc56:	88fa      	ldrh	r2, [r7, #6]
 800dc58:	429a      	cmp	r2, r3
 800dc5a:	d10e      	bne.n	800dc7a <findInRecord+0x62>
        {
            *pQos = records[ index ].qos;
 800dc5c:	697b      	ldr	r3, [r7, #20]
 800dc5e:	009b      	lsls	r3, r3, #2
 800dc60:	68fa      	ldr	r2, [r7, #12]
 800dc62:	4413      	add	r3, r2
 800dc64:	789a      	ldrb	r2, [r3, #2]
 800dc66:	683b      	ldr	r3, [r7, #0]
 800dc68:	701a      	strb	r2, [r3, #0]
            *pCurrentState = records[ index ].publishState;
 800dc6a:	697b      	ldr	r3, [r7, #20]
 800dc6c:	009b      	lsls	r3, r3, #2
 800dc6e:	68fa      	ldr	r2, [r7, #12]
 800dc70:	4413      	add	r3, r2
 800dc72:	78da      	ldrb	r2, [r3, #3]
 800dc74:	6a3b      	ldr	r3, [r7, #32]
 800dc76:	701a      	strb	r2, [r3, #0]
            break;
 800dc78:	e006      	b.n	800dc88 <findInRecord+0x70>
    for( index = 0; index < recordCount; index++ )
 800dc7a:	697b      	ldr	r3, [r7, #20]
 800dc7c:	3301      	adds	r3, #1
 800dc7e:	617b      	str	r3, [r7, #20]
 800dc80:	697a      	ldr	r2, [r7, #20]
 800dc82:	68bb      	ldr	r3, [r7, #8]
 800dc84:	429a      	cmp	r2, r3
 800dc86:	d3e1      	bcc.n	800dc4c <findInRecord+0x34>
        }
    }

    if( index == recordCount )
 800dc88:	697a      	ldr	r2, [r7, #20]
 800dc8a:	68bb      	ldr	r3, [r7, #8]
 800dc8c:	429a      	cmp	r2, r3
 800dc8e:	d102      	bne.n	800dc96 <findInRecord+0x7e>
    {
        index = MQTT_INVALID_STATE_COUNT;
 800dc90:	2300      	movs	r3, #0
 800dc92:	43db      	mvns	r3, r3
 800dc94:	617b      	str	r3, [r7, #20]
    }

    return index;
 800dc96:	697b      	ldr	r3, [r7, #20]
}
 800dc98:	4618      	mov	r0, r3
 800dc9a:	3718      	adds	r7, #24
 800dc9c:	46bd      	mov	sp, r7
 800dc9e:	bd80      	pop	{r7, pc}
 800dca0:	08014d54 	.word	0x08014d54
 800dca4:	08015388 	.word	0x08015388
 800dca8:	08014d78 	.word	0x08014d78

0800dcac <compactRecords>:

/*-----------------------------------------------------------*/

static void compactRecords( MQTTPubAckInfo_t * records,
                            size_t recordCount )
{
 800dcac:	b580      	push	{r7, lr}
 800dcae:	b084      	sub	sp, #16
 800dcb0:	af00      	add	r7, sp, #0
 800dcb2:	6078      	str	r0, [r7, #4]
 800dcb4:	6039      	str	r1, [r7, #0]
    size_t index = 0;
 800dcb6:	2300      	movs	r3, #0
 800dcb8:	60fb      	str	r3, [r7, #12]
    size_t emptyIndex = MQTT_INVALID_STATE_COUNT;
 800dcba:	2300      	movs	r3, #0
 800dcbc:	43db      	mvns	r3, r3
 800dcbe:	60bb      	str	r3, [r7, #8]

    assert( records != NULL );
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	2b00      	cmp	r3, #0
 800dcc4:	d150      	bne.n	800dd68 <compactRecords+0xbc>
 800dcc6:	4b2d      	ldr	r3, [pc, #180]	; (800dd7c <compactRecords+0xd0>)
 800dcc8:	4a2d      	ldr	r2, [pc, #180]	; (800dd80 <compactRecords+0xd4>)
 800dcca:	f44f 71f3 	mov.w	r1, #486	; 0x1e6
 800dcce:	482d      	ldr	r0, [pc, #180]	; (800dd84 <compactRecords+0xd8>)
 800dcd0:	f004 f994 	bl	8011ffc <__assert_func>

    /* Find the empty spots and fill those with non empty values. */
    for( ; index < recordCount; index++ )
    {
        /* Find the first empty spot. */
        if( records[ index ].packetId == MQTT_PACKET_ID_INVALID )
 800dcd4:	68fb      	ldr	r3, [r7, #12]
 800dcd6:	009b      	lsls	r3, r3, #2
 800dcd8:	687a      	ldr	r2, [r7, #4]
 800dcda:	4413      	add	r3, r2
 800dcdc:	881b      	ldrh	r3, [r3, #0]
 800dcde:	2b00      	cmp	r3, #0
 800dce0:	d107      	bne.n	800dcf2 <compactRecords+0x46>
        {
            if( emptyIndex == MQTT_INVALID_STATE_COUNT )
 800dce2:	2300      	movs	r3, #0
 800dce4:	43db      	mvns	r3, r3
 800dce6:	68ba      	ldr	r2, [r7, #8]
 800dce8:	429a      	cmp	r2, r3
 800dcea:	d13a      	bne.n	800dd62 <compactRecords+0xb6>
            {
                emptyIndex = index;
 800dcec:	68fb      	ldr	r3, [r7, #12]
 800dcee:	60bb      	str	r3, [r7, #8]
 800dcf0:	e037      	b.n	800dd62 <compactRecords+0xb6>
            }
        }
        else
        {
            if( emptyIndex != MQTT_INVALID_STATE_COUNT )
 800dcf2:	2300      	movs	r3, #0
 800dcf4:	43db      	mvns	r3, r3
 800dcf6:	68ba      	ldr	r2, [r7, #8]
 800dcf8:	429a      	cmp	r2, r3
 800dcfa:	d032      	beq.n	800dd62 <compactRecords+0xb6>
            {
                /* Copy over the contents at non empty index to empty index. */
                records[ emptyIndex ].packetId = records[ index ].packetId;
 800dcfc:	68fb      	ldr	r3, [r7, #12]
 800dcfe:	009b      	lsls	r3, r3, #2
 800dd00:	687a      	ldr	r2, [r7, #4]
 800dd02:	441a      	add	r2, r3
 800dd04:	68bb      	ldr	r3, [r7, #8]
 800dd06:	009b      	lsls	r3, r3, #2
 800dd08:	6879      	ldr	r1, [r7, #4]
 800dd0a:	440b      	add	r3, r1
 800dd0c:	8812      	ldrh	r2, [r2, #0]
 800dd0e:	801a      	strh	r2, [r3, #0]
                records[ emptyIndex ].qos = records[ index ].qos;
 800dd10:	68fb      	ldr	r3, [r7, #12]
 800dd12:	009b      	lsls	r3, r3, #2
 800dd14:	687a      	ldr	r2, [r7, #4]
 800dd16:	441a      	add	r2, r3
 800dd18:	68bb      	ldr	r3, [r7, #8]
 800dd1a:	009b      	lsls	r3, r3, #2
 800dd1c:	6879      	ldr	r1, [r7, #4]
 800dd1e:	440b      	add	r3, r1
 800dd20:	7892      	ldrb	r2, [r2, #2]
 800dd22:	709a      	strb	r2, [r3, #2]
                records[ emptyIndex ].publishState = records[ index ].publishState;
 800dd24:	68fb      	ldr	r3, [r7, #12]
 800dd26:	009b      	lsls	r3, r3, #2
 800dd28:	687a      	ldr	r2, [r7, #4]
 800dd2a:	441a      	add	r2, r3
 800dd2c:	68bb      	ldr	r3, [r7, #8]
 800dd2e:	009b      	lsls	r3, r3, #2
 800dd30:	6879      	ldr	r1, [r7, #4]
 800dd32:	440b      	add	r3, r1
 800dd34:	78d2      	ldrb	r2, [r2, #3]
 800dd36:	70da      	strb	r2, [r3, #3]

                /* Mark the record at current non empty index as invalid. */
                records[ index ].packetId = MQTT_PACKET_ID_INVALID;
 800dd38:	68fb      	ldr	r3, [r7, #12]
 800dd3a:	009b      	lsls	r3, r3, #2
 800dd3c:	687a      	ldr	r2, [r7, #4]
 800dd3e:	4413      	add	r3, r2
 800dd40:	2200      	movs	r2, #0
 800dd42:	801a      	strh	r2, [r3, #0]
                records[ index ].qos = MQTTQoS0;
 800dd44:	68fb      	ldr	r3, [r7, #12]
 800dd46:	009b      	lsls	r3, r3, #2
 800dd48:	687a      	ldr	r2, [r7, #4]
 800dd4a:	4413      	add	r3, r2
 800dd4c:	2200      	movs	r2, #0
 800dd4e:	709a      	strb	r2, [r3, #2]
                records[ index ].publishState = MQTTStateNull;
 800dd50:	68fb      	ldr	r3, [r7, #12]
 800dd52:	009b      	lsls	r3, r3, #2
 800dd54:	687a      	ldr	r2, [r7, #4]
 800dd56:	4413      	add	r3, r2
 800dd58:	2200      	movs	r2, #0
 800dd5a:	70da      	strb	r2, [r3, #3]

                /* Advance the emptyIndex. */
                emptyIndex++;
 800dd5c:	68bb      	ldr	r3, [r7, #8]
 800dd5e:	3301      	adds	r3, #1
 800dd60:	60bb      	str	r3, [r7, #8]
    for( ; index < recordCount; index++ )
 800dd62:	68fb      	ldr	r3, [r7, #12]
 800dd64:	3301      	adds	r3, #1
 800dd66:	60fb      	str	r3, [r7, #12]
 800dd68:	68fa      	ldr	r2, [r7, #12]
 800dd6a:	683b      	ldr	r3, [r7, #0]
 800dd6c:	429a      	cmp	r2, r3
 800dd6e:	d3b1      	bcc.n	800dcd4 <compactRecords+0x28>
            }
        }
    }
}
 800dd70:	bf00      	nop
 800dd72:	bf00      	nop
 800dd74:	3710      	adds	r7, #16
 800dd76:	46bd      	mov	sp, r7
 800dd78:	bd80      	pop	{r7, pc}
 800dd7a:	bf00      	nop
 800dd7c:	08014da8 	.word	0x08014da8
 800dd80:	08015398 	.word	0x08015398
 800dd84:	08014d78 	.word	0x08014d78

0800dd88 <addRecord>:
static MQTTStatus_t addRecord( MQTTPubAckInfo_t * records,
                               size_t recordCount,
                               uint16_t packetId,
                               MQTTQoS_t qos,
                               MQTTPublishState_t publishState )
{
 800dd88:	b580      	push	{r7, lr}
 800dd8a:	b088      	sub	sp, #32
 800dd8c:	af00      	add	r7, sp, #0
 800dd8e:	60f8      	str	r0, [r7, #12]
 800dd90:	60b9      	str	r1, [r7, #8]
 800dd92:	4611      	mov	r1, r2
 800dd94:	461a      	mov	r2, r3
 800dd96:	460b      	mov	r3, r1
 800dd98:	80fb      	strh	r3, [r7, #6]
 800dd9a:	4613      	mov	r3, r2
 800dd9c:	717b      	strb	r3, [r7, #5]
    MQTTStatus_t status = MQTTNoMemory;
 800dd9e:	2302      	movs	r3, #2
 800dda0:	77fb      	strb	r3, [r7, #31]
    int32_t index = 0;
 800dda2:	2300      	movs	r3, #0
 800dda4:	61bb      	str	r3, [r7, #24]
    size_t availableIndex = recordCount;
 800dda6:	68bb      	ldr	r3, [r7, #8]
 800dda8:	617b      	str	r3, [r7, #20]
    bool validEntryFound = false;
 800ddaa:	2300      	movs	r3, #0
 800ddac:	74fb      	strb	r3, [r7, #19]

    assert( packetId != MQTT_PACKET_ID_INVALID );
 800ddae:	88fb      	ldrh	r3, [r7, #6]
 800ddb0:	2b00      	cmp	r3, #0
 800ddb2:	d106      	bne.n	800ddc2 <addRecord+0x3a>
 800ddb4:	4b32      	ldr	r3, [pc, #200]	; (800de80 <addRecord+0xf8>)
 800ddb6:	4a33      	ldr	r2, [pc, #204]	; (800de84 <addRecord+0xfc>)
 800ddb8:	f240 2115 	movw	r1, #533	; 0x215
 800ddbc:	4832      	ldr	r0, [pc, #200]	; (800de88 <addRecord+0x100>)
 800ddbe:	f004 f91d 	bl	8011ffc <__assert_func>
    assert( qos != MQTTQoS0 );
 800ddc2:	797b      	ldrb	r3, [r7, #5]
 800ddc4:	2b00      	cmp	r3, #0
 800ddc6:	d106      	bne.n	800ddd6 <addRecord+0x4e>
 800ddc8:	4b30      	ldr	r3, [pc, #192]	; (800de8c <addRecord+0x104>)
 800ddca:	4a2e      	ldr	r2, [pc, #184]	; (800de84 <addRecord+0xfc>)
 800ddcc:	f240 2116 	movw	r1, #534	; 0x216
 800ddd0:	482d      	ldr	r0, [pc, #180]	; (800de88 <addRecord+0x100>)
 800ddd2:	f004 f913 	bl	8011ffc <__assert_func>

    /* Check if we have to compact the records. This is known by checking if
     * the last spot in the array is filled. */
    if( records[ recordCount - 1U ].packetId != MQTT_PACKET_ID_INVALID )
 800ddd6:	68bb      	ldr	r3, [r7, #8]
 800ddd8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800dddc:	3b01      	subs	r3, #1
 800ddde:	009b      	lsls	r3, r3, #2
 800dde0:	68fa      	ldr	r2, [r7, #12]
 800dde2:	4413      	add	r3, r2
 800dde4:	881b      	ldrh	r3, [r3, #0]
 800dde6:	2b00      	cmp	r3, #0
 800dde8:	d003      	beq.n	800ddf2 <addRecord+0x6a>
    {
        compactRecords( records, recordCount );
 800ddea:	68b9      	ldr	r1, [r7, #8]
 800ddec:	68f8      	ldr	r0, [r7, #12]
 800ddee:	f7ff ff5d 	bl	800dcac <compactRecords>

    /* Start from end so first available index will be populated.
     * Available index is always found after the last element in the records.
     * This is to make sure the relative order of the records in order to meet
     * the message ordering requirement of MQTT spec 3.1.1. */
    for( index = ( ( int32_t ) recordCount - 1 ); index >= 0; index-- )
 800ddf2:	68bb      	ldr	r3, [r7, #8]
 800ddf4:	3b01      	subs	r3, #1
 800ddf6:	61bb      	str	r3, [r7, #24]
 800ddf8:	e021      	b.n	800de3e <addRecord+0xb6>
    {
        /* Available index is only found after packet at the highest index. */
        if( records[ index ].packetId == MQTT_PACKET_ID_INVALID )
 800ddfa:	69bb      	ldr	r3, [r7, #24]
 800ddfc:	009b      	lsls	r3, r3, #2
 800ddfe:	68fa      	ldr	r2, [r7, #12]
 800de00:	4413      	add	r3, r2
 800de02:	881b      	ldrh	r3, [r3, #0]
 800de04:	2b00      	cmp	r3, #0
 800de06:	d108      	bne.n	800de1a <addRecord+0x92>
        {
            if( validEntryFound == false )
 800de08:	7cfb      	ldrb	r3, [r7, #19]
 800de0a:	f083 0301 	eor.w	r3, r3, #1
 800de0e:	b2db      	uxtb	r3, r3
 800de10:	2b00      	cmp	r3, #0
 800de12:	d011      	beq.n	800de38 <addRecord+0xb0>
            {
                availableIndex = ( size_t ) index;
 800de14:	69bb      	ldr	r3, [r7, #24]
 800de16:	617b      	str	r3, [r7, #20]
 800de18:	e00e      	b.n	800de38 <addRecord+0xb0>
            }
        }
        else
        {
            /* A non-empty spot found in the records. */
            validEntryFound = true;
 800de1a:	2301      	movs	r3, #1
 800de1c:	74fb      	strb	r3, [r7, #19]

            if( records[ index ].packetId == packetId )
 800de1e:	69bb      	ldr	r3, [r7, #24]
 800de20:	009b      	lsls	r3, r3, #2
 800de22:	68fa      	ldr	r2, [r7, #12]
 800de24:	4413      	add	r3, r2
 800de26:	881b      	ldrh	r3, [r3, #0]
 800de28:	88fa      	ldrh	r2, [r7, #6]
 800de2a:	429a      	cmp	r2, r3
 800de2c:	d104      	bne.n	800de38 <addRecord+0xb0>
                /* Collision. */
                LogError( ( "Collision when adding PacketID=%u at index=%d.",
                            ( unsigned int ) packetId,
                            ( int ) index ) );

                status = MQTTStateCollision;
 800de2e:	2309      	movs	r3, #9
 800de30:	77fb      	strb	r3, [r7, #31]
                availableIndex = recordCount;
 800de32:	68bb      	ldr	r3, [r7, #8]
 800de34:	617b      	str	r3, [r7, #20]
                break;
 800de36:	e005      	b.n	800de44 <addRecord+0xbc>
    for( index = ( ( int32_t ) recordCount - 1 ); index >= 0; index-- )
 800de38:	69bb      	ldr	r3, [r7, #24]
 800de3a:	3b01      	subs	r3, #1
 800de3c:	61bb      	str	r3, [r7, #24]
 800de3e:	69bb      	ldr	r3, [r7, #24]
 800de40:	2b00      	cmp	r3, #0
 800de42:	dada      	bge.n	800ddfa <addRecord+0x72>
            }
        }
    }

    if( availableIndex < recordCount )
 800de44:	697a      	ldr	r2, [r7, #20]
 800de46:	68bb      	ldr	r3, [r7, #8]
 800de48:	429a      	cmp	r2, r3
 800de4a:	d214      	bcs.n	800de76 <addRecord+0xee>
    {
        records[ availableIndex ].packetId = packetId;
 800de4c:	697b      	ldr	r3, [r7, #20]
 800de4e:	009b      	lsls	r3, r3, #2
 800de50:	68fa      	ldr	r2, [r7, #12]
 800de52:	4413      	add	r3, r2
 800de54:	88fa      	ldrh	r2, [r7, #6]
 800de56:	801a      	strh	r2, [r3, #0]
        records[ availableIndex ].qos = qos;
 800de58:	697b      	ldr	r3, [r7, #20]
 800de5a:	009b      	lsls	r3, r3, #2
 800de5c:	68fa      	ldr	r2, [r7, #12]
 800de5e:	4413      	add	r3, r2
 800de60:	797a      	ldrb	r2, [r7, #5]
 800de62:	709a      	strb	r2, [r3, #2]
        records[ availableIndex ].publishState = publishState;
 800de64:	697b      	ldr	r3, [r7, #20]
 800de66:	009b      	lsls	r3, r3, #2
 800de68:	68fa      	ldr	r2, [r7, #12]
 800de6a:	4413      	add	r3, r2
 800de6c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800de70:	70da      	strb	r2, [r3, #3]
        status = MQTTSuccess;
 800de72:	2300      	movs	r3, #0
 800de74:	77fb      	strb	r3, [r7, #31]
    }

    return status;
 800de76:	7ffb      	ldrb	r3, [r7, #31]
}
 800de78:	4618      	mov	r0, r3
 800de7a:	3720      	adds	r7, #32
 800de7c:	46bd      	mov	sp, r7
 800de7e:	bd80      	pop	{r7, pc}
 800de80:	08014d54 	.word	0x08014d54
 800de84:	080153a8 	.word	0x080153a8
 800de88:	08014d78 	.word	0x08014d78
 800de8c:	08014db8 	.word	0x08014db8

0800de90 <updateRecord>:

static void updateRecord( MQTTPubAckInfo_t * records,
                          size_t recordIndex,
                          MQTTPublishState_t newState,
                          bool shouldDelete )
{
 800de90:	b580      	push	{r7, lr}
 800de92:	b084      	sub	sp, #16
 800de94:	af00      	add	r7, sp, #0
 800de96:	60f8      	str	r0, [r7, #12]
 800de98:	60b9      	str	r1, [r7, #8]
 800de9a:	4611      	mov	r1, r2
 800de9c:	461a      	mov	r2, r3
 800de9e:	460b      	mov	r3, r1
 800dea0:	71fb      	strb	r3, [r7, #7]
 800dea2:	4613      	mov	r3, r2
 800dea4:	71bb      	strb	r3, [r7, #6]
    assert( records != NULL );
 800dea6:	68fb      	ldr	r3, [r7, #12]
 800dea8:	2b00      	cmp	r3, #0
 800deaa:	d106      	bne.n	800deba <updateRecord+0x2a>
 800deac:	4b13      	ldr	r3, [pc, #76]	; (800defc <updateRecord+0x6c>)
 800deae:	4a14      	ldr	r2, [pc, #80]	; (800df00 <updateRecord+0x70>)
 800deb0:	f240 2152 	movw	r1, #594	; 0x252
 800deb4:	4813      	ldr	r0, [pc, #76]	; (800df04 <updateRecord+0x74>)
 800deb6:	f004 f8a1 	bl	8011ffc <__assert_func>

    if( shouldDelete == true )
 800deba:	79bb      	ldrb	r3, [r7, #6]
 800debc:	2b00      	cmp	r3, #0
 800debe:	d012      	beq.n	800dee6 <updateRecord+0x56>
    {
        /* Mark the record as invalid. */
        records[ recordIndex ].packetId = MQTT_PACKET_ID_INVALID;
 800dec0:	68bb      	ldr	r3, [r7, #8]
 800dec2:	009b      	lsls	r3, r3, #2
 800dec4:	68fa      	ldr	r2, [r7, #12]
 800dec6:	4413      	add	r3, r2
 800dec8:	2200      	movs	r2, #0
 800deca:	801a      	strh	r2, [r3, #0]
        records[ recordIndex ].qos = MQTTQoS0;
 800decc:	68bb      	ldr	r3, [r7, #8]
 800dece:	009b      	lsls	r3, r3, #2
 800ded0:	68fa      	ldr	r2, [r7, #12]
 800ded2:	4413      	add	r3, r2
 800ded4:	2200      	movs	r2, #0
 800ded6:	709a      	strb	r2, [r3, #2]
        records[ recordIndex ].publishState = MQTTStateNull;
 800ded8:	68bb      	ldr	r3, [r7, #8]
 800deda:	009b      	lsls	r3, r3, #2
 800dedc:	68fa      	ldr	r2, [r7, #12]
 800dede:	4413      	add	r3, r2
 800dee0:	2200      	movs	r2, #0
 800dee2:	70da      	strb	r2, [r3, #3]
    }
    else
    {
        records[ recordIndex ].publishState = newState;
    }
}
 800dee4:	e005      	b.n	800def2 <updateRecord+0x62>
        records[ recordIndex ].publishState = newState;
 800dee6:	68bb      	ldr	r3, [r7, #8]
 800dee8:	009b      	lsls	r3, r3, #2
 800deea:	68fa      	ldr	r2, [r7, #12]
 800deec:	4413      	add	r3, r2
 800deee:	79fa      	ldrb	r2, [r7, #7]
 800def0:	70da      	strb	r2, [r3, #3]
}
 800def2:	bf00      	nop
 800def4:	3710      	adds	r7, #16
 800def6:	46bd      	mov	sp, r7
 800def8:	bd80      	pop	{r7, pc}
 800defa:	bf00      	nop
 800defc:	08014da8 	.word	0x08014da8
 800df00:	080153b4 	.word	0x080153b4
 800df04:	08014d78 	.word	0x08014d78

0800df08 <stateSelect>:
/*-----------------------------------------------------------*/

static uint16_t stateSelect( const MQTTContext_t * pMqttContext,
                             uint16_t searchStates,
                             MQTTStateCursor_t * pCursor )
{
 800df08:	b580      	push	{r7, lr}
 800df0a:	b088      	sub	sp, #32
 800df0c:	af00      	add	r7, sp, #0
 800df0e:	60f8      	str	r0, [r7, #12]
 800df10:	460b      	mov	r3, r1
 800df12:	607a      	str	r2, [r7, #4]
 800df14:	817b      	strh	r3, [r7, #10]
    uint16_t packetId = MQTT_PACKET_ID_INVALID;
 800df16:	2300      	movs	r3, #0
 800df18:	83fb      	strh	r3, [r7, #30]
    uint16_t outgoingStates = 0U;
 800df1a:	2300      	movs	r3, #0
 800df1c:	83bb      	strh	r3, [r7, #28]
    const MQTTPubAckInfo_t * records = NULL;
 800df1e:	2300      	movs	r3, #0
 800df20:	61bb      	str	r3, [r7, #24]
    size_t maxCount;
    bool stateCheck = false;
 800df22:	2300      	movs	r3, #0
 800df24:	75fb      	strb	r3, [r7, #23]

    assert( pMqttContext != NULL );
 800df26:	68fb      	ldr	r3, [r7, #12]
 800df28:	2b00      	cmp	r3, #0
 800df2a:	d106      	bne.n	800df3a <stateSelect+0x32>
 800df2c:	4b43      	ldr	r3, [pc, #268]	; (800e03c <stateSelect+0x134>)
 800df2e:	4a44      	ldr	r2, [pc, #272]	; (800e040 <stateSelect+0x138>)
 800df30:	f240 216d 	movw	r1, #621	; 0x26d
 800df34:	4843      	ldr	r0, [pc, #268]	; (800e044 <stateSelect+0x13c>)
 800df36:	f004 f861 	bl	8011ffc <__assert_func>
    assert( searchStates != 0U );
 800df3a:	897b      	ldrh	r3, [r7, #10]
 800df3c:	2b00      	cmp	r3, #0
 800df3e:	d106      	bne.n	800df4e <stateSelect+0x46>
 800df40:	4b41      	ldr	r3, [pc, #260]	; (800e048 <stateSelect+0x140>)
 800df42:	4a3f      	ldr	r2, [pc, #252]	; (800e040 <stateSelect+0x138>)
 800df44:	f240 216e 	movw	r1, #622	; 0x26e
 800df48:	483e      	ldr	r0, [pc, #248]	; (800e044 <stateSelect+0x13c>)
 800df4a:	f004 f857 	bl	8011ffc <__assert_func>
    assert( pCursor != NULL );
 800df4e:	687b      	ldr	r3, [r7, #4]
 800df50:	2b00      	cmp	r3, #0
 800df52:	d106      	bne.n	800df62 <stateSelect+0x5a>
 800df54:	4b3d      	ldr	r3, [pc, #244]	; (800e04c <stateSelect+0x144>)
 800df56:	4a3a      	ldr	r2, [pc, #232]	; (800e040 <stateSelect+0x138>)
 800df58:	f240 216f 	movw	r1, #623	; 0x26f
 800df5c:	4839      	ldr	r0, [pc, #228]	; (800e044 <stateSelect+0x13c>)
 800df5e:	f004 f84d 	bl	8011ffc <__assert_func>

    /* Create a bit map with all the outgoing publish states. */
    UINT16_SET_BIT( outgoingStates, MQTTPublishSend );
 800df62:	8bbb      	ldrh	r3, [r7, #28]
 800df64:	f043 0302 	orr.w	r3, r3, #2
 800df68:	83bb      	strh	r3, [r7, #28]
    UINT16_SET_BIT( outgoingStates, MQTTPubAckPending );
 800df6a:	8bbb      	ldrh	r3, [r7, #28]
 800df6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800df70:	83bb      	strh	r3, [r7, #28]
    UINT16_SET_BIT( outgoingStates, MQTTPubRecPending );
 800df72:	8bbb      	ldrh	r3, [r7, #28]
 800df74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800df78:	83bb      	strh	r3, [r7, #28]
    UINT16_SET_BIT( outgoingStates, MQTTPubRelSend );
 800df7a:	8bbb      	ldrh	r3, [r7, #28]
 800df7c:	f043 0310 	orr.w	r3, r3, #16
 800df80:	83bb      	strh	r3, [r7, #28]
    UINT16_SET_BIT( outgoingStates, MQTTPubCompPending );
 800df82:	8bbb      	ldrh	r3, [r7, #28]
 800df84:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800df88:	83bb      	strh	r3, [r7, #28]

    /* Only outgoing publish records need to be searched. */
    assert( ( outgoingStates & searchStates ) > 0U );
 800df8a:	8bba      	ldrh	r2, [r7, #28]
 800df8c:	897b      	ldrh	r3, [r7, #10]
 800df8e:	4013      	ands	r3, r2
 800df90:	b29b      	uxth	r3, r3
 800df92:	2b00      	cmp	r3, #0
 800df94:	d106      	bne.n	800dfa4 <stateSelect+0x9c>
 800df96:	4b2e      	ldr	r3, [pc, #184]	; (800e050 <stateSelect+0x148>)
 800df98:	4a29      	ldr	r2, [pc, #164]	; (800e040 <stateSelect+0x138>)
 800df9a:	f240 2179 	movw	r1, #633	; 0x279
 800df9e:	4829      	ldr	r0, [pc, #164]	; (800e044 <stateSelect+0x13c>)
 800dfa0:	f004 f82c 	bl	8011ffc <__assert_func>
    assert( ( ~outgoingStates & searchStates ) == 0U );
 800dfa4:	8bbb      	ldrh	r3, [r7, #28]
 800dfa6:	43da      	mvns	r2, r3
 800dfa8:	897b      	ldrh	r3, [r7, #10]
 800dfaa:	4013      	ands	r3, r2
 800dfac:	2b00      	cmp	r3, #0
 800dfae:	d006      	beq.n	800dfbe <stateSelect+0xb6>
 800dfb0:	4b28      	ldr	r3, [pc, #160]	; (800e054 <stateSelect+0x14c>)
 800dfb2:	4a23      	ldr	r2, [pc, #140]	; (800e040 <stateSelect+0x138>)
 800dfb4:	f240 217a 	movw	r1, #634	; 0x27a
 800dfb8:	4822      	ldr	r0, [pc, #136]	; (800e044 <stateSelect+0x13c>)
 800dfba:	f004 f81f 	bl	8011ffc <__assert_func>

    records = pMqttContext->outgoingPublishRecords;
 800dfbe:	68fb      	ldr	r3, [r7, #12]
 800dfc0:	681b      	ldr	r3, [r3, #0]
 800dfc2:	61bb      	str	r3, [r7, #24]
    maxCount = pMqttContext->outgoingPublishRecordMaxCount;
 800dfc4:	68fb      	ldr	r3, [r7, #12]
 800dfc6:	689b      	ldr	r3, [r3, #8]
 800dfc8:	613b      	str	r3, [r7, #16]

    while( *pCursor < maxCount )
 800dfca:	e02d      	b.n	800e028 <stateSelect+0x120>
    {
        /* Check if any of the search states are present. */
        stateCheck = UINT16_CHECK_BIT( searchStates, records[ *pCursor ].publishState );
 800dfcc:	897a      	ldrh	r2, [r7, #10]
 800dfce:	687b      	ldr	r3, [r7, #4]
 800dfd0:	681b      	ldr	r3, [r3, #0]
 800dfd2:	009b      	lsls	r3, r3, #2
 800dfd4:	69b9      	ldr	r1, [r7, #24]
 800dfd6:	440b      	add	r3, r1
 800dfd8:	78db      	ldrb	r3, [r3, #3]
 800dfda:	4619      	mov	r1, r3
 800dfdc:	2301      	movs	r3, #1
 800dfde:	408b      	lsls	r3, r1
 800dfe0:	401a      	ands	r2, r3
 800dfe2:	687b      	ldr	r3, [r7, #4]
 800dfe4:	681b      	ldr	r3, [r3, #0]
 800dfe6:	009b      	lsls	r3, r3, #2
 800dfe8:	69b9      	ldr	r1, [r7, #24]
 800dfea:	440b      	add	r3, r1
 800dfec:	78db      	ldrb	r3, [r3, #3]
 800dfee:	4619      	mov	r1, r3
 800dff0:	2301      	movs	r3, #1
 800dff2:	408b      	lsls	r3, r1
 800dff4:	429a      	cmp	r2, r3
 800dff6:	bf0c      	ite	eq
 800dff8:	2301      	moveq	r3, #1
 800dffa:	2300      	movne	r3, #0
 800dffc:	75fb      	strb	r3, [r7, #23]

        if( stateCheck == true )
 800dffe:	7dfb      	ldrb	r3, [r7, #23]
 800e000:	2b00      	cmp	r3, #0
 800e002:	d00c      	beq.n	800e01e <stateSelect+0x116>
        {
            packetId = records[ *pCursor ].packetId;
 800e004:	687b      	ldr	r3, [r7, #4]
 800e006:	681b      	ldr	r3, [r3, #0]
 800e008:	009b      	lsls	r3, r3, #2
 800e00a:	69ba      	ldr	r2, [r7, #24]
 800e00c:	4413      	add	r3, r2
 800e00e:	881b      	ldrh	r3, [r3, #0]
 800e010:	83fb      	strh	r3, [r7, #30]
            ( *pCursor )++;
 800e012:	687b      	ldr	r3, [r7, #4]
 800e014:	681b      	ldr	r3, [r3, #0]
 800e016:	1c5a      	adds	r2, r3, #1
 800e018:	687b      	ldr	r3, [r7, #4]
 800e01a:	601a      	str	r2, [r3, #0]
            break;
 800e01c:	e009      	b.n	800e032 <stateSelect+0x12a>
        }

        ( *pCursor )++;
 800e01e:	687b      	ldr	r3, [r7, #4]
 800e020:	681b      	ldr	r3, [r3, #0]
 800e022:	1c5a      	adds	r2, r3, #1
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	601a      	str	r2, [r3, #0]
    while( *pCursor < maxCount )
 800e028:	687b      	ldr	r3, [r7, #4]
 800e02a:	681b      	ldr	r3, [r3, #0]
 800e02c:	693a      	ldr	r2, [r7, #16]
 800e02e:	429a      	cmp	r2, r3
 800e030:	d8cc      	bhi.n	800dfcc <stateSelect+0xc4>
    }

    return packetId;
 800e032:	8bfb      	ldrh	r3, [r7, #30]
}
 800e034:	4618      	mov	r0, r3
 800e036:	3720      	adds	r7, #32
 800e038:	46bd      	mov	sp, r7
 800e03a:	bd80      	pop	{r7, pc}
 800e03c:	08014dc8 	.word	0x08014dc8
 800e040:	080153c4 	.word	0x080153c4
 800e044:	08014d78 	.word	0x08014d78
 800e048:	08014de0 	.word	0x08014de0
 800e04c:	08014df4 	.word	0x08014df4
 800e050:	08014e04 	.word	0x08014e04
 800e054:	08014e2c 	.word	0x08014e2c

0800e058 <MQTT_CalculateStateAck>:
/*-----------------------------------------------------------*/

MQTTPublishState_t MQTT_CalculateStateAck( MQTTPubAckType_t packetType,
                                           MQTTStateOperation_t opType,
                                           MQTTQoS_t qos )
{
 800e058:	b480      	push	{r7}
 800e05a:	b085      	sub	sp, #20
 800e05c:	af00      	add	r7, sp, #0
 800e05e:	4603      	mov	r3, r0
 800e060:	71fb      	strb	r3, [r7, #7]
 800e062:	460b      	mov	r3, r1
 800e064:	71bb      	strb	r3, [r7, #6]
 800e066:	4613      	mov	r3, r2
 800e068:	717b      	strb	r3, [r7, #5]
    MQTTPublishState_t calculatedState = MQTTStateNull;
 800e06a:	2300      	movs	r3, #0
 800e06c:	73fb      	strb	r3, [r7, #15]
    /* There are more QoS2 cases than QoS1, so initialize to that. */
    bool qosValid = qos == MQTTQoS2;
 800e06e:	797b      	ldrb	r3, [r7, #5]
 800e070:	2b02      	cmp	r3, #2
 800e072:	bf0c      	ite	eq
 800e074:	2301      	moveq	r3, #1
 800e076:	2300      	movne	r3, #0
 800e078:	73bb      	strb	r3, [r7, #14]

    switch( packetType )
 800e07a:	79fb      	ldrb	r3, [r7, #7]
 800e07c:	2b03      	cmp	r3, #3
 800e07e:	d827      	bhi.n	800e0d0 <MQTT_CalculateStateAck+0x78>
 800e080:	a201      	add	r2, pc, #4	; (adr r2, 800e088 <MQTT_CalculateStateAck+0x30>)
 800e082:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e086:	bf00      	nop
 800e088:	0800e099 	.word	0x0800e099
 800e08c:	0800e0ab 	.word	0x0800e0ab
 800e090:	0800e0bb 	.word	0x0800e0bb
 800e094:	0800e0cb 	.word	0x0800e0cb
    {
        case MQTTPuback:
            qosValid = qos == MQTTQoS1;
 800e098:	797b      	ldrb	r3, [r7, #5]
 800e09a:	2b01      	cmp	r3, #1
 800e09c:	bf0c      	ite	eq
 800e09e:	2301      	moveq	r3, #1
 800e0a0:	2300      	movne	r3, #0
 800e0a2:	73bb      	strb	r3, [r7, #14]
            calculatedState = MQTTPublishDone;
 800e0a4:	230a      	movs	r3, #10
 800e0a6:	73fb      	strb	r3, [r7, #15]
            break;
 800e0a8:	e013      	b.n	800e0d2 <MQTT_CalculateStateAck+0x7a>

        case MQTTPubrec:

            /* Incoming publish: send PUBREC, PUBREL pending.
             * Outgoing publish: receive PUBREC, send PUBREL. */
            calculatedState = ( opType == MQTT_SEND ) ? MQTTPubRelPending : MQTTPubRelSend;
 800e0aa:	79bb      	ldrb	r3, [r7, #6]
 800e0ac:	2b00      	cmp	r3, #0
 800e0ae:	d101      	bne.n	800e0b4 <MQTT_CalculateStateAck+0x5c>
 800e0b0:	2308      	movs	r3, #8
 800e0b2:	e000      	b.n	800e0b6 <MQTT_CalculateStateAck+0x5e>
 800e0b4:	2304      	movs	r3, #4
 800e0b6:	73fb      	strb	r3, [r7, #15]
            break;
 800e0b8:	e00b      	b.n	800e0d2 <MQTT_CalculateStateAck+0x7a>

        case MQTTPubrel:

            /* Incoming publish: receive PUBREL, send PUBCOMP.
             * Outgoing publish: send PUBREL, PUBCOMP pending. */
            calculatedState = ( opType == MQTT_SEND ) ? MQTTPubCompPending : MQTTPubCompSend;
 800e0ba:	79bb      	ldrb	r3, [r7, #6]
 800e0bc:	2b00      	cmp	r3, #0
 800e0be:	d101      	bne.n	800e0c4 <MQTT_CalculateStateAck+0x6c>
 800e0c0:	2309      	movs	r3, #9
 800e0c2:	e000      	b.n	800e0c6 <MQTT_CalculateStateAck+0x6e>
 800e0c4:	2305      	movs	r3, #5
 800e0c6:	73fb      	strb	r3, [r7, #15]
            break;
 800e0c8:	e003      	b.n	800e0d2 <MQTT_CalculateStateAck+0x7a>

        case MQTTPubcomp:
            calculatedState = MQTTPublishDone;
 800e0ca:	230a      	movs	r3, #10
 800e0cc:	73fb      	strb	r3, [r7, #15]
            break;
 800e0ce:	e000      	b.n	800e0d2 <MQTT_CalculateStateAck+0x7a>

        default:
            /* No other ack type. */
            break;
 800e0d0:	bf00      	nop
    }

    /* Sanity check, make sure ack and QoS agree. */
    if( qosValid == false )
 800e0d2:	7bbb      	ldrb	r3, [r7, #14]
 800e0d4:	f083 0301 	eor.w	r3, r3, #1
 800e0d8:	b2db      	uxtb	r3, r3
 800e0da:	2b00      	cmp	r3, #0
 800e0dc:	d001      	beq.n	800e0e2 <MQTT_CalculateStateAck+0x8a>
    {
        calculatedState = MQTTStateNull;
 800e0de:	2300      	movs	r3, #0
 800e0e0:	73fb      	strb	r3, [r7, #15]
    }

    return calculatedState;
 800e0e2:	7bfb      	ldrb	r3, [r7, #15]
}
 800e0e4:	4618      	mov	r0, r3
 800e0e6:	3714      	adds	r7, #20
 800e0e8:	46bd      	mov	sp, r7
 800e0ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0ee:	4770      	bx	lr

0800e0f0 <updateStateAck>:
                                    size_t maxRecordCount,
                                    size_t recordIndex,
                                    uint16_t packetId,
                                    MQTTPublishState_t currentState,
                                    MQTTPublishState_t newState )
{
 800e0f0:	b580      	push	{r7, lr}
 800e0f2:	b088      	sub	sp, #32
 800e0f4:	af02      	add	r7, sp, #8
 800e0f6:	60f8      	str	r0, [r7, #12]
 800e0f8:	60b9      	str	r1, [r7, #8]
 800e0fa:	607a      	str	r2, [r7, #4]
 800e0fc:	807b      	strh	r3, [r7, #2]
    MQTTStatus_t status = MQTTIllegalState;
 800e0fe:	2308      	movs	r3, #8
 800e100:	75fb      	strb	r3, [r7, #23]
    bool shouldDeleteRecord = false;
 800e102:	2300      	movs	r3, #0
 800e104:	75bb      	strb	r3, [r7, #22]
    bool isTransitionValid = false;
 800e106:	2300      	movs	r3, #0
 800e108:	757b      	strb	r3, [r7, #21]

    assert( records != NULL );
 800e10a:	68fb      	ldr	r3, [r7, #12]
 800e10c:	2b00      	cmp	r3, #0
 800e10e:	d106      	bne.n	800e11e <updateStateAck+0x2e>
 800e110:	4b22      	ldr	r3, [pc, #136]	; (800e19c <updateStateAck+0xac>)
 800e112:	4a23      	ldr	r2, [pc, #140]	; (800e1a0 <updateStateAck+0xb0>)
 800e114:	f240 21cf 	movw	r1, #719	; 0x2cf
 800e118:	4822      	ldr	r0, [pc, #136]	; (800e1a4 <updateStateAck+0xb4>)
 800e11a:	f003 ff6f 	bl	8011ffc <__assert_func>

    /* Record to be deleted if the state transition is completed or if a PUBREC
     * is received for an outgoing QoS2 publish. When a PUBREC is received,
     * record is deleted and added back to the end of the records to maintain
     * ordering for PUBRELs. */
    shouldDeleteRecord = ( newState == MQTTPublishDone ) || ( newState == MQTTPubRelSend );
 800e11e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800e122:	2b0a      	cmp	r3, #10
 800e124:	d003      	beq.n	800e12e <updateStateAck+0x3e>
 800e126:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800e12a:	2b04      	cmp	r3, #4
 800e12c:	d101      	bne.n	800e132 <updateStateAck+0x42>
 800e12e:	2301      	movs	r3, #1
 800e130:	e000      	b.n	800e134 <updateStateAck+0x44>
 800e132:	2300      	movs	r3, #0
 800e134:	75bb      	strb	r3, [r7, #22]
 800e136:	7dbb      	ldrb	r3, [r7, #22]
 800e138:	f003 0301 	and.w	r3, r3, #1
 800e13c:	75bb      	strb	r3, [r7, #22]
    isTransitionValid = validateTransitionAck( currentState, newState );
 800e13e:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800e142:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e146:	4611      	mov	r1, r2
 800e148:	4618      	mov	r0, r3
 800e14a:	f7ff fcc3 	bl	800dad4 <validateTransitionAck>
 800e14e:	4603      	mov	r3, r0
 800e150:	757b      	strb	r3, [r7, #21]

    if( isTransitionValid == true )
 800e152:	7d7b      	ldrb	r3, [r7, #21]
 800e154:	2b00      	cmp	r3, #0
 800e156:	d01c      	beq.n	800e192 <updateStateAck+0xa2>
    {
        status = MQTTSuccess;
 800e158:	2300      	movs	r3, #0
 800e15a:	75fb      	strb	r3, [r7, #23]

        /* Update record for acks. When sending or receiving acks for packets that
         * are resent during a session reestablishment, the new state and
         * current state can be the same. No update of record required in that case. */
        if( currentState != newState )
 800e15c:	f897 2020 	ldrb.w	r2, [r7, #32]
 800e160:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800e164:	429a      	cmp	r2, r3
 800e166:	d014      	beq.n	800e192 <updateStateAck+0xa2>
        {
            updateRecord( records,
 800e168:	7dbb      	ldrb	r3, [r7, #22]
 800e16a:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800e16e:	6879      	ldr	r1, [r7, #4]
 800e170:	68f8      	ldr	r0, [r7, #12]
 800e172:	f7ff fe8d 	bl	800de90 <updateRecord>

            /* For QoS2 messages, in order to preserve the message ordering, when
             * a PUBREC is received for an outgoing publish, the record should be
             * moved to the last. This move will help preserve the order in which
             * a PUBREL needs to be resent in case of a session reestablishment. */
            if( newState == MQTTPubRelSend )
 800e176:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800e17a:	2b04      	cmp	r3, #4
 800e17c:	d109      	bne.n	800e192 <updateStateAck+0xa2>
            {
                status = addRecord( records,
 800e17e:	887a      	ldrh	r2, [r7, #2]
 800e180:	2304      	movs	r3, #4
 800e182:	9300      	str	r3, [sp, #0]
 800e184:	2302      	movs	r3, #2
 800e186:	68b9      	ldr	r1, [r7, #8]
 800e188:	68f8      	ldr	r0, [r7, #12]
 800e18a:	f7ff fdfd 	bl	800dd88 <addRecord>
 800e18e:	4603      	mov	r3, r0
 800e190:	75fb      	strb	r3, [r7, #23]
        LogError( ( "Invalid transition from state %s to state %s.",
                    MQTT_State_strerror( currentState ),
                    MQTT_State_strerror( newState ) ) );
    }

    return status;
 800e192:	7dfb      	ldrb	r3, [r7, #23]
}
 800e194:	4618      	mov	r0, r3
 800e196:	3718      	adds	r7, #24
 800e198:	46bd      	mov	sp, r7
 800e19a:	bd80      	pop	{r7, pc}
 800e19c:	08014da8 	.word	0x08014da8
 800e1a0:	080153d0 	.word	0x080153d0
 800e1a4:	08014d78 	.word	0x08014d78

0800e1a8 <updateStatePublish>:
                                        uint16_t packetId,
                                        MQTTStateOperation_t opType,
                                        MQTTQoS_t qos,
                                        MQTTPublishState_t currentState,
                                        MQTTPublishState_t newState )
{
 800e1a8:	b590      	push	{r4, r7, lr}
 800e1aa:	b089      	sub	sp, #36	; 0x24
 800e1ac:	af02      	add	r7, sp, #8
 800e1ae:	60f8      	str	r0, [r7, #12]
 800e1b0:	60b9      	str	r1, [r7, #8]
 800e1b2:	4611      	mov	r1, r2
 800e1b4:	461a      	mov	r2, r3
 800e1b6:	460b      	mov	r3, r1
 800e1b8:	80fb      	strh	r3, [r7, #6]
 800e1ba:	4613      	mov	r3, r2
 800e1bc:	717b      	strb	r3, [r7, #5]
    MQTTStatus_t status = MQTTSuccess;
 800e1be:	2300      	movs	r3, #0
 800e1c0:	75fb      	strb	r3, [r7, #23]
    bool isTransitionValid = false;
 800e1c2:	2300      	movs	r3, #0
 800e1c4:	75bb      	strb	r3, [r7, #22]

    assert( pMqttContext != NULL );
 800e1c6:	68fb      	ldr	r3, [r7, #12]
 800e1c8:	2b00      	cmp	r3, #0
 800e1ca:	d106      	bne.n	800e1da <updateStatePublish+0x32>
 800e1cc:	4b29      	ldr	r3, [pc, #164]	; (800e274 <updateStatePublish+0xcc>)
 800e1ce:	4a2a      	ldr	r2, [pc, #168]	; (800e278 <updateStatePublish+0xd0>)
 800e1d0:	f44f 7143 	mov.w	r1, #780	; 0x30c
 800e1d4:	4829      	ldr	r0, [pc, #164]	; (800e27c <updateStatePublish+0xd4>)
 800e1d6:	f003 ff11 	bl	8011ffc <__assert_func>
    assert( packetId != MQTT_PACKET_ID_INVALID );
 800e1da:	88fb      	ldrh	r3, [r7, #6]
 800e1dc:	2b00      	cmp	r3, #0
 800e1de:	d106      	bne.n	800e1ee <updateStatePublish+0x46>
 800e1e0:	4b27      	ldr	r3, [pc, #156]	; (800e280 <updateStatePublish+0xd8>)
 800e1e2:	4a25      	ldr	r2, [pc, #148]	; (800e278 <updateStatePublish+0xd0>)
 800e1e4:	f240 310d 	movw	r1, #781	; 0x30d
 800e1e8:	4824      	ldr	r0, [pc, #144]	; (800e27c <updateStatePublish+0xd4>)
 800e1ea:	f003 ff07 	bl	8011ffc <__assert_func>
    assert( qos != MQTTQoS0 );
 800e1ee:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800e1f2:	2b00      	cmp	r3, #0
 800e1f4:	d106      	bne.n	800e204 <updateStatePublish+0x5c>
 800e1f6:	4b23      	ldr	r3, [pc, #140]	; (800e284 <updateStatePublish+0xdc>)
 800e1f8:	4a1f      	ldr	r2, [pc, #124]	; (800e278 <updateStatePublish+0xd0>)
 800e1fa:	f240 310e 	movw	r1, #782	; 0x30e
 800e1fe:	481f      	ldr	r0, [pc, #124]	; (800e27c <updateStatePublish+0xd4>)
 800e200:	f003 fefc 	bl	8011ffc <__assert_func>

    /* This will always succeed for an incoming publish. This is due to the fact
     * that the passed in currentState must be MQTTStateNull, since
     * #MQTT_UpdateStatePublish does not perform a lookup for receives. */
    isTransitionValid = validateTransitionPublish( currentState, newState, opType, qos );
 800e204:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800e208:	797a      	ldrb	r2, [r7, #5]
 800e20a:	f897 1030 	ldrb.w	r1, [r7, #48]	; 0x30
 800e20e:	f897 002c 	ldrb.w	r0, [r7, #44]	; 0x2c
 800e212:	f7ff fbf9 	bl	800da08 <validateTransitionPublish>
 800e216:	4603      	mov	r3, r0
 800e218:	75bb      	strb	r3, [r7, #22]

    if( isTransitionValid == true )
 800e21a:	7dbb      	ldrb	r3, [r7, #22]
 800e21c:	2b00      	cmp	r3, #0
 800e21e:	d021      	beq.n	800e264 <updateStatePublish+0xbc>
    {
        /* addRecord will check for collisions. */
        if( opType == MQTT_RECEIVE )
 800e220:	797b      	ldrb	r3, [r7, #5]
 800e222:	2b01      	cmp	r3, #1
 800e224:	d10f      	bne.n	800e246 <updateStatePublish+0x9e>
        {
            status = addRecord( pMqttContext->incomingPublishRecords,
 800e226:	68fb      	ldr	r3, [r7, #12]
 800e228:	6858      	ldr	r0, [r3, #4]
 800e22a:	68fb      	ldr	r3, [r7, #12]
 800e22c:	68d9      	ldr	r1, [r3, #12]
 800e22e:	f897 4028 	ldrb.w	r4, [r7, #40]	; 0x28
 800e232:	88fa      	ldrh	r2, [r7, #6]
 800e234:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800e238:	9300      	str	r3, [sp, #0]
 800e23a:	4623      	mov	r3, r4
 800e23c:	f7ff fda4 	bl	800dd88 <addRecord>
 800e240:	4603      	mov	r3, r0
 800e242:	75fb      	strb	r3, [r7, #23]
 800e244:	e010      	b.n	800e268 <updateStatePublish+0xc0>
        /* Send operation. */
        else
        {
            /* Skip updating record when publish is resend and no state
             * update is required. */
            if( currentState != newState )
 800e246:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800e24a:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800e24e:	429a      	cmp	r2, r3
 800e250:	d00a      	beq.n	800e268 <updateStatePublish+0xc0>
            {
                updateRecord( pMqttContext->outgoingPublishRecords,
 800e252:	68fb      	ldr	r3, [r7, #12]
 800e254:	6818      	ldr	r0, [r3, #0]
 800e256:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 800e25a:	2300      	movs	r3, #0
 800e25c:	68b9      	ldr	r1, [r7, #8]
 800e25e:	f7ff fe17 	bl	800de90 <updateRecord>
 800e262:	e001      	b.n	800e268 <updateStatePublish+0xc0>
            }
        }
    }
    else
    {
        status = MQTTIllegalState;
 800e264:	2308      	movs	r3, #8
 800e266:	75fb      	strb	r3, [r7, #23]
        LogError( ( "Invalid transition from state %s to state %s.",
                    MQTT_State_strerror( currentState ),
                    MQTT_State_strerror( newState ) ) );
    }

    return status;
 800e268:	7dfb      	ldrb	r3, [r7, #23]
}
 800e26a:	4618      	mov	r0, r3
 800e26c:	371c      	adds	r7, #28
 800e26e:	46bd      	mov	sp, r7
 800e270:	bd90      	pop	{r4, r7, pc}
 800e272:	bf00      	nop
 800e274:	08014dc8 	.word	0x08014dc8
 800e278:	080153e0 	.word	0x080153e0
 800e27c:	08014d78 	.word	0x08014d78
 800e280:	08014d54 	.word	0x08014d54
 800e284:	08014db8 	.word	0x08014db8

0800e288 <MQTT_CalculateStatePublish>:

/*-----------------------------------------------------------*/

MQTTPublishState_t MQTT_CalculateStatePublish( MQTTStateOperation_t opType,
                                               MQTTQoS_t qos )
{
 800e288:	b480      	push	{r7}
 800e28a:	b085      	sub	sp, #20
 800e28c:	af00      	add	r7, sp, #0
 800e28e:	4603      	mov	r3, r0
 800e290:	460a      	mov	r2, r1
 800e292:	71fb      	strb	r3, [r7, #7]
 800e294:	4613      	mov	r3, r2
 800e296:	71bb      	strb	r3, [r7, #6]
    MQTTPublishState_t calculatedState = MQTTStateNull;
 800e298:	2300      	movs	r3, #0
 800e29a:	73fb      	strb	r3, [r7, #15]

    switch( qos )
 800e29c:	79bb      	ldrb	r3, [r7, #6]
 800e29e:	2b02      	cmp	r3, #2
 800e2a0:	d011      	beq.n	800e2c6 <MQTT_CalculateStatePublish+0x3e>
 800e2a2:	2b02      	cmp	r3, #2
 800e2a4:	dc17      	bgt.n	800e2d6 <MQTT_CalculateStatePublish+0x4e>
 800e2a6:	2b00      	cmp	r3, #0
 800e2a8:	d002      	beq.n	800e2b0 <MQTT_CalculateStatePublish+0x28>
 800e2aa:	2b01      	cmp	r3, #1
 800e2ac:	d003      	beq.n	800e2b6 <MQTT_CalculateStatePublish+0x2e>
            calculatedState = ( opType == MQTT_SEND ) ? MQTTPubRecPending : MQTTPubRecSend;
            break;

        default:
            /* No other QoS values. */
            break;
 800e2ae:	e012      	b.n	800e2d6 <MQTT_CalculateStatePublish+0x4e>
            calculatedState = MQTTPublishDone;
 800e2b0:	230a      	movs	r3, #10
 800e2b2:	73fb      	strb	r3, [r7, #15]
            break;
 800e2b4:	e010      	b.n	800e2d8 <MQTT_CalculateStatePublish+0x50>
            calculatedState = ( opType == MQTT_SEND ) ? MQTTPubAckPending : MQTTPubAckSend;
 800e2b6:	79fb      	ldrb	r3, [r7, #7]
 800e2b8:	2b00      	cmp	r3, #0
 800e2ba:	d101      	bne.n	800e2c0 <MQTT_CalculateStatePublish+0x38>
 800e2bc:	2306      	movs	r3, #6
 800e2be:	e000      	b.n	800e2c2 <MQTT_CalculateStatePublish+0x3a>
 800e2c0:	2302      	movs	r3, #2
 800e2c2:	73fb      	strb	r3, [r7, #15]
            break;
 800e2c4:	e008      	b.n	800e2d8 <MQTT_CalculateStatePublish+0x50>
            calculatedState = ( opType == MQTT_SEND ) ? MQTTPubRecPending : MQTTPubRecSend;
 800e2c6:	79fb      	ldrb	r3, [r7, #7]
 800e2c8:	2b00      	cmp	r3, #0
 800e2ca:	d101      	bne.n	800e2d0 <MQTT_CalculateStatePublish+0x48>
 800e2cc:	2307      	movs	r3, #7
 800e2ce:	e000      	b.n	800e2d2 <MQTT_CalculateStatePublish+0x4a>
 800e2d0:	2303      	movs	r3, #3
 800e2d2:	73fb      	strb	r3, [r7, #15]
            break;
 800e2d4:	e000      	b.n	800e2d8 <MQTT_CalculateStatePublish+0x50>
            break;
 800e2d6:	bf00      	nop
    }

    return calculatedState;
 800e2d8:	7bfb      	ldrb	r3, [r7, #15]
}
 800e2da:	4618      	mov	r0, r3
 800e2dc:	3714      	adds	r7, #20
 800e2de:	46bd      	mov	sp, r7
 800e2e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2e4:	4770      	bx	lr

0800e2e6 <MQTT_UpdateStatePublish>:
MQTTStatus_t MQTT_UpdateStatePublish( const MQTTContext_t * pMqttContext,
                                      uint16_t packetId,
                                      MQTTStateOperation_t opType,
                                      MQTTQoS_t qos,
                                      MQTTPublishState_t * pNewState )
{
 800e2e6:	b590      	push	{r4, r7, lr}
 800e2e8:	b08b      	sub	sp, #44	; 0x2c
 800e2ea:	af04      	add	r7, sp, #16
 800e2ec:	6078      	str	r0, [r7, #4]
 800e2ee:	4608      	mov	r0, r1
 800e2f0:	4611      	mov	r1, r2
 800e2f2:	461a      	mov	r2, r3
 800e2f4:	4603      	mov	r3, r0
 800e2f6:	807b      	strh	r3, [r7, #2]
 800e2f8:	460b      	mov	r3, r1
 800e2fa:	707b      	strb	r3, [r7, #1]
 800e2fc:	4613      	mov	r3, r2
 800e2fe:	703b      	strb	r3, [r7, #0]
    MQTTPublishState_t newState = MQTTStateNull;
 800e300:	2300      	movs	r3, #0
 800e302:	73fb      	strb	r3, [r7, #15]
    MQTTPublishState_t currentState = MQTTStateNull;
 800e304:	2300      	movs	r3, #0
 800e306:	73bb      	strb	r3, [r7, #14]
    MQTTStatus_t mqttStatus = MQTTSuccess;
 800e308:	2300      	movs	r3, #0
 800e30a:	75fb      	strb	r3, [r7, #23]
    size_t recordIndex = MQTT_INVALID_STATE_COUNT;
 800e30c:	2300      	movs	r3, #0
 800e30e:	43db      	mvns	r3, r3
 800e310:	613b      	str	r3, [r7, #16]
    MQTTQoS_t foundQoS = MQTTQoS0;
 800e312:	2300      	movs	r3, #0
 800e314:	737b      	strb	r3, [r7, #13]

    if( ( pMqttContext == NULL ) || ( pNewState == NULL ) )
 800e316:	687b      	ldr	r3, [r7, #4]
 800e318:	2b00      	cmp	r3, #0
 800e31a:	d002      	beq.n	800e322 <MQTT_UpdateStatePublish+0x3c>
 800e31c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e31e:	2b00      	cmp	r3, #0
 800e320:	d102      	bne.n	800e328 <MQTT_UpdateStatePublish+0x42>
    {
        LogError( ( "Argument cannot be NULL: pMqttContext=%p, pNewState=%p",
                    ( void * ) pMqttContext,
                    ( void * ) pNewState ) );

        mqttStatus = MQTTBadParameter;
 800e322:	2301      	movs	r3, #1
 800e324:	75fb      	strb	r3, [r7, #23]
 800e326:	e028      	b.n	800e37a <MQTT_UpdateStatePublish+0x94>
    }
    else if( qos == MQTTQoS0 )
 800e328:	783b      	ldrb	r3, [r7, #0]
 800e32a:	2b00      	cmp	r3, #0
 800e32c:	d103      	bne.n	800e336 <MQTT_UpdateStatePublish+0x50>
    {
        /* QoS 0 publish. Do nothing. */
        *pNewState = MQTTPublishDone;
 800e32e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e330:	220a      	movs	r2, #10
 800e332:	701a      	strb	r2, [r3, #0]
 800e334:	e021      	b.n	800e37a <MQTT_UpdateStatePublish+0x94>
    }
    else if( packetId == MQTT_PACKET_ID_INVALID )
 800e336:	887b      	ldrh	r3, [r7, #2]
 800e338:	2b00      	cmp	r3, #0
 800e33a:	d102      	bne.n	800e342 <MQTT_UpdateStatePublish+0x5c>
    {
        /* Publishes > QoS 0 need a valid packet ID. */
        mqttStatus = MQTTBadParameter;
 800e33c:	2301      	movs	r3, #1
 800e33e:	75fb      	strb	r3, [r7, #23]
 800e340:	e01b      	b.n	800e37a <MQTT_UpdateStatePublish+0x94>
    }
    else if( opType == MQTT_SEND )
 800e342:	787b      	ldrb	r3, [r7, #1]
 800e344:	2b00      	cmp	r3, #0
 800e346:	d118      	bne.n	800e37a <MQTT_UpdateStatePublish+0x94>
    {
        /* Search record for entry so we can check QoS. */
        recordIndex = findInRecord( pMqttContext->outgoingPublishRecords,
 800e348:	687b      	ldr	r3, [r7, #4]
 800e34a:	6818      	ldr	r0, [r3, #0]
 800e34c:	687b      	ldr	r3, [r7, #4]
 800e34e:	6899      	ldr	r1, [r3, #8]
 800e350:	f107 040d 	add.w	r4, r7, #13
 800e354:	887a      	ldrh	r2, [r7, #2]
 800e356:	f107 030e 	add.w	r3, r7, #14
 800e35a:	9300      	str	r3, [sp, #0]
 800e35c:	4623      	mov	r3, r4
 800e35e:	f7ff fc5b 	bl	800dc18 <findInRecord>
 800e362:	6138      	str	r0, [r7, #16]
                                    pMqttContext->outgoingPublishRecordMaxCount,
                                    packetId,
                                    &foundQoS,
                                    &currentState );

        if( ( recordIndex == MQTT_INVALID_STATE_COUNT ) || ( foundQoS != qos ) )
 800e364:	2300      	movs	r3, #0
 800e366:	43db      	mvns	r3, r3
 800e368:	693a      	ldr	r2, [r7, #16]
 800e36a:	429a      	cmp	r2, r3
 800e36c:	d003      	beq.n	800e376 <MQTT_UpdateStatePublish+0x90>
 800e36e:	7b7b      	ldrb	r3, [r7, #13]
 800e370:	783a      	ldrb	r2, [r7, #0]
 800e372:	429a      	cmp	r2, r3
 800e374:	d001      	beq.n	800e37a <MQTT_UpdateStatePublish+0x94>
        {
            /* Entry should match with supplied QoS. */
            mqttStatus = MQTTBadParameter;
 800e376:	2301      	movs	r3, #1
 800e378:	75fb      	strb	r3, [r7, #23]
    else
    {
        /* QoS 1 or 2 receive. Nothing to be done. */
    }

    if( ( qos != MQTTQoS0 ) && ( mqttStatus == MQTTSuccess ) )
 800e37a:	783b      	ldrb	r3, [r7, #0]
 800e37c:	2b00      	cmp	r3, #0
 800e37e:	d020      	beq.n	800e3c2 <MQTT_UpdateStatePublish+0xdc>
 800e380:	7dfb      	ldrb	r3, [r7, #23]
 800e382:	2b00      	cmp	r3, #0
 800e384:	d11d      	bne.n	800e3c2 <MQTT_UpdateStatePublish+0xdc>
    {
        newState = MQTT_CalculateStatePublish( opType, qos );
 800e386:	783a      	ldrb	r2, [r7, #0]
 800e388:	787b      	ldrb	r3, [r7, #1]
 800e38a:	4611      	mov	r1, r2
 800e38c:	4618      	mov	r0, r3
 800e38e:	f7ff ff7b 	bl	800e288 <MQTT_CalculateStatePublish>
 800e392:	4603      	mov	r3, r0
 800e394:	73fb      	strb	r3, [r7, #15]
        /* Validate state transition and update state records. */
        mqttStatus = updateStatePublish( pMqttContext,
 800e396:	7bbb      	ldrb	r3, [r7, #14]
 800e398:	7878      	ldrb	r0, [r7, #1]
 800e39a:	8879      	ldrh	r1, [r7, #2]
 800e39c:	7bfa      	ldrb	r2, [r7, #15]
 800e39e:	9202      	str	r2, [sp, #8]
 800e3a0:	9301      	str	r3, [sp, #4]
 800e3a2:	783b      	ldrb	r3, [r7, #0]
 800e3a4:	9300      	str	r3, [sp, #0]
 800e3a6:	4603      	mov	r3, r0
 800e3a8:	460a      	mov	r2, r1
 800e3aa:	6939      	ldr	r1, [r7, #16]
 800e3ac:	6878      	ldr	r0, [r7, #4]
 800e3ae:	f7ff fefb 	bl	800e1a8 <updateStatePublish>
 800e3b2:	4603      	mov	r3, r0
 800e3b4:	75fb      	strb	r3, [r7, #23]
                                         qos,
                                         currentState,
                                         newState );

        /* Update output parameter on success. */
        if( mqttStatus == MQTTSuccess )
 800e3b6:	7dfb      	ldrb	r3, [r7, #23]
 800e3b8:	2b00      	cmp	r3, #0
 800e3ba:	d102      	bne.n	800e3c2 <MQTT_UpdateStatePublish+0xdc>
        {
            *pNewState = newState;
 800e3bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3be:	7bfa      	ldrb	r2, [r7, #15]
 800e3c0:	701a      	strb	r2, [r3, #0]
        }
    }

    return mqttStatus;
 800e3c2:	7dfb      	ldrb	r3, [r7, #23]
}
 800e3c4:	4618      	mov	r0, r3
 800e3c6:	371c      	adds	r7, #28
 800e3c8:	46bd      	mov	sp, r7
 800e3ca:	bd90      	pop	{r4, r7, pc}

0800e3cc <MQTT_UpdateStateAck>:
MQTTStatus_t MQTT_UpdateStateAck( const MQTTContext_t * pMqttContext,
                                  uint16_t packetId,
                                  MQTTPubAckType_t packetType,
                                  MQTTStateOperation_t opType,
                                  MQTTPublishState_t * pNewState )
{
 800e3cc:	b580      	push	{r7, lr}
 800e3ce:	b08a      	sub	sp, #40	; 0x28
 800e3d0:	af02      	add	r7, sp, #8
 800e3d2:	6078      	str	r0, [r7, #4]
 800e3d4:	4608      	mov	r0, r1
 800e3d6:	4611      	mov	r1, r2
 800e3d8:	461a      	mov	r2, r3
 800e3da:	4603      	mov	r3, r0
 800e3dc:	807b      	strh	r3, [r7, #2]
 800e3de:	460b      	mov	r3, r1
 800e3e0:	707b      	strb	r3, [r7, #1]
 800e3e2:	4613      	mov	r3, r2
 800e3e4:	703b      	strb	r3, [r7, #0]
    MQTTPublishState_t newState = MQTTStateNull;
 800e3e6:	2300      	movs	r3, #0
 800e3e8:	74bb      	strb	r3, [r7, #18]
    MQTTPublishState_t currentState = MQTTStateNull;
 800e3ea:	2300      	movs	r3, #0
 800e3ec:	743b      	strb	r3, [r7, #16]
    bool isOutgoingPublish = isPublishOutgoing( packetType, opType );
 800e3ee:	783a      	ldrb	r2, [r7, #0]
 800e3f0:	787b      	ldrb	r3, [r7, #1]
 800e3f2:	4611      	mov	r1, r2
 800e3f4:	4618      	mov	r0, r3
 800e3f6:	f7ff fbe1 	bl	800dbbc <isPublishOutgoing>
 800e3fa:	4603      	mov	r3, r0
 800e3fc:	747b      	strb	r3, [r7, #17]
    MQTTQoS_t qos = MQTTQoS0;
 800e3fe:	2300      	movs	r3, #0
 800e400:	73fb      	strb	r3, [r7, #15]
    size_t maxRecordCount = MQTT_INVALID_STATE_COUNT;
 800e402:	2300      	movs	r3, #0
 800e404:	43db      	mvns	r3, r3
 800e406:	61fb      	str	r3, [r7, #28]
    size_t recordIndex = MQTT_INVALID_STATE_COUNT;
 800e408:	2300      	movs	r3, #0
 800e40a:	43db      	mvns	r3, r3
 800e40c:	61bb      	str	r3, [r7, #24]

    MQTTPubAckInfo_t * records = NULL;
 800e40e:	2300      	movs	r3, #0
 800e410:	617b      	str	r3, [r7, #20]
    MQTTStatus_t status = MQTTBadResponse;
 800e412:	2305      	movs	r3, #5
 800e414:	74fb      	strb	r3, [r7, #19]

    if( ( pMqttContext == NULL ) || ( pNewState == NULL ) )
 800e416:	687b      	ldr	r3, [r7, #4]
 800e418:	2b00      	cmp	r3, #0
 800e41a:	d002      	beq.n	800e422 <MQTT_UpdateStateAck+0x56>
 800e41c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e41e:	2b00      	cmp	r3, #0
 800e420:	d102      	bne.n	800e428 <MQTT_UpdateStateAck+0x5c>
    {
        LogError( ( "Argument cannot be NULL: pMqttContext=%p, pNewState=%p.",
                    ( void * ) pMqttContext,
                    ( void * ) pNewState ) );
        status = MQTTBadParameter;
 800e422:	2301      	movs	r3, #1
 800e424:	74fb      	strb	r3, [r7, #19]
 800e426:	e027      	b.n	800e478 <MQTT_UpdateStateAck+0xac>
    }
    else if( packetId == MQTT_PACKET_ID_INVALID )
 800e428:	887b      	ldrh	r3, [r7, #2]
 800e42a:	2b00      	cmp	r3, #0
 800e42c:	d102      	bne.n	800e434 <MQTT_UpdateStateAck+0x68>
    {
        LogError( ( "Packet ID must be nonzero." ) );
        status = MQTTBadParameter;
 800e42e:	2301      	movs	r3, #1
 800e430:	74fb      	strb	r3, [r7, #19]
 800e432:	e021      	b.n	800e478 <MQTT_UpdateStateAck+0xac>
    }
    else if( packetType > MQTTPubcomp )
 800e434:	787b      	ldrb	r3, [r7, #1]
 800e436:	2b03      	cmp	r3, #3
 800e438:	d902      	bls.n	800e440 <MQTT_UpdateStateAck+0x74>
    {
        LogError( ( "Invalid packet type %u.", ( unsigned int ) packetType ) );
        status = MQTTBadParameter;
 800e43a:	2301      	movs	r3, #1
 800e43c:	74fb      	strb	r3, [r7, #19]
 800e43e:	e01b      	b.n	800e478 <MQTT_UpdateStateAck+0xac>
    }
    else
    {
        if( isOutgoingPublish == true )
 800e440:	7c7b      	ldrb	r3, [r7, #17]
 800e442:	2b00      	cmp	r3, #0
 800e444:	d006      	beq.n	800e454 <MQTT_UpdateStateAck+0x88>
        {
            records = pMqttContext->outgoingPublishRecords;
 800e446:	687b      	ldr	r3, [r7, #4]
 800e448:	681b      	ldr	r3, [r3, #0]
 800e44a:	617b      	str	r3, [r7, #20]
            maxRecordCount = pMqttContext->outgoingPublishRecordMaxCount;
 800e44c:	687b      	ldr	r3, [r7, #4]
 800e44e:	689b      	ldr	r3, [r3, #8]
 800e450:	61fb      	str	r3, [r7, #28]
 800e452:	e005      	b.n	800e460 <MQTT_UpdateStateAck+0x94>
        }
        else
        {
            records = pMqttContext->incomingPublishRecords;
 800e454:	687b      	ldr	r3, [r7, #4]
 800e456:	685b      	ldr	r3, [r3, #4]
 800e458:	617b      	str	r3, [r7, #20]
            maxRecordCount = pMqttContext->incomingPublishRecordMaxCount;
 800e45a:	687b      	ldr	r3, [r7, #4]
 800e45c:	68db      	ldr	r3, [r3, #12]
 800e45e:	61fb      	str	r3, [r7, #28]
        }

        recordIndex = findInRecord( records,
 800e460:	f107 010f 	add.w	r1, r7, #15
 800e464:	887a      	ldrh	r2, [r7, #2]
 800e466:	f107 0310 	add.w	r3, r7, #16
 800e46a:	9300      	str	r3, [sp, #0]
 800e46c:	460b      	mov	r3, r1
 800e46e:	69f9      	ldr	r1, [r7, #28]
 800e470:	6978      	ldr	r0, [r7, #20]
 800e472:	f7ff fbd1 	bl	800dc18 <findInRecord>
 800e476:	61b8      	str	r0, [r7, #24]
                                    packetId,
                                    &qos,
                                    &currentState );
    }

    if( recordIndex != MQTT_INVALID_STATE_COUNT )
 800e478:	2300      	movs	r3, #0
 800e47a:	43db      	mvns	r3, r3
 800e47c:	69ba      	ldr	r2, [r7, #24]
 800e47e:	429a      	cmp	r2, r3
 800e480:	d01a      	beq.n	800e4b8 <MQTT_UpdateStateAck+0xec>
    {
        newState = MQTT_CalculateStateAck( packetType, opType, qos );
 800e482:	7bfa      	ldrb	r2, [r7, #15]
 800e484:	7839      	ldrb	r1, [r7, #0]
 800e486:	787b      	ldrb	r3, [r7, #1]
 800e488:	4618      	mov	r0, r3
 800e48a:	f7ff fde5 	bl	800e058 <MQTT_CalculateStateAck>
 800e48e:	4603      	mov	r3, r0
 800e490:	74bb      	strb	r3, [r7, #18]

        /* Validate state transition and update state record. */
        status = updateStateAck( records,
 800e492:	7c3b      	ldrb	r3, [r7, #16]
 800e494:	8879      	ldrh	r1, [r7, #2]
 800e496:	7cba      	ldrb	r2, [r7, #18]
 800e498:	9201      	str	r2, [sp, #4]
 800e49a:	9300      	str	r3, [sp, #0]
 800e49c:	460b      	mov	r3, r1
 800e49e:	69ba      	ldr	r2, [r7, #24]
 800e4a0:	69f9      	ldr	r1, [r7, #28]
 800e4a2:	6978      	ldr	r0, [r7, #20]
 800e4a4:	f7ff fe24 	bl	800e0f0 <updateStateAck>
 800e4a8:	4603      	mov	r3, r0
 800e4aa:	74fb      	strb	r3, [r7, #19]
                                 packetId,
                                 currentState,
                                 newState );

        /* Update the output parameter. */
        if( status == MQTTSuccess )
 800e4ac:	7cfb      	ldrb	r3, [r7, #19]
 800e4ae:	2b00      	cmp	r3, #0
 800e4b0:	d102      	bne.n	800e4b8 <MQTT_UpdateStateAck+0xec>
        {
            *pNewState = newState;
 800e4b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4b4:	7cba      	ldrb	r2, [r7, #18]
 800e4b6:	701a      	strb	r2, [r3, #0]
    {
        LogError( ( "No matching record found for publish: PacketId=%u.",
                    ( unsigned int ) packetId ) );
    }

    return status;
 800e4b8:	7cfb      	ldrb	r3, [r7, #19]
}
 800e4ba:	4618      	mov	r0, r3
 800e4bc:	3720      	adds	r7, #32
 800e4be:	46bd      	mov	sp, r7
 800e4c0:	bd80      	pop	{r7, pc}

0800e4c2 <MQTT_PubrelToResend>:
/*-----------------------------------------------------------*/

uint16_t MQTT_PubrelToResend( const MQTTContext_t * pMqttContext,
                              MQTTStateCursor_t * pCursor,
                              MQTTPublishState_t * pState )
{
 800e4c2:	b580      	push	{r7, lr}
 800e4c4:	b086      	sub	sp, #24
 800e4c6:	af00      	add	r7, sp, #0
 800e4c8:	60f8      	str	r0, [r7, #12]
 800e4ca:	60b9      	str	r1, [r7, #8]
 800e4cc:	607a      	str	r2, [r7, #4]
    uint16_t packetId = MQTT_PACKET_ID_INVALID;
 800e4ce:	2300      	movs	r3, #0
 800e4d0:	82fb      	strh	r3, [r7, #22]
    uint16_t searchStates = 0U;
 800e4d2:	2300      	movs	r3, #0
 800e4d4:	82bb      	strh	r3, [r7, #20]

    /* Validate arguments. */
    if( ( pMqttContext == NULL ) || ( pCursor == NULL ) || ( pState == NULL ) )
 800e4d6:	68fb      	ldr	r3, [r7, #12]
 800e4d8:	2b00      	cmp	r3, #0
 800e4da:	d01b      	beq.n	800e514 <MQTT_PubrelToResend+0x52>
 800e4dc:	68bb      	ldr	r3, [r7, #8]
 800e4de:	2b00      	cmp	r3, #0
 800e4e0:	d018      	beq.n	800e514 <MQTT_PubrelToResend+0x52>
 800e4e2:	687b      	ldr	r3, [r7, #4]
 800e4e4:	2b00      	cmp	r3, #0
 800e4e6:	d015      	beq.n	800e514 <MQTT_PubrelToResend+0x52>
    }
    else
    {
        /* PUBREL for packets in state #MQTTPubCompPending and #MQTTPubRelSend
         * would need to be resent when a session is reestablished.*/
        UINT16_SET_BIT( searchStates, MQTTPubCompPending );
 800e4e8:	8abb      	ldrh	r3, [r7, #20]
 800e4ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800e4ee:	82bb      	strh	r3, [r7, #20]
        UINT16_SET_BIT( searchStates, MQTTPubRelSend );
 800e4f0:	8abb      	ldrh	r3, [r7, #20]
 800e4f2:	f043 0310 	orr.w	r3, r3, #16
 800e4f6:	82bb      	strh	r3, [r7, #20]
        packetId = stateSelect( pMqttContext, searchStates, pCursor );
 800e4f8:	8abb      	ldrh	r3, [r7, #20]
 800e4fa:	68ba      	ldr	r2, [r7, #8]
 800e4fc:	4619      	mov	r1, r3
 800e4fe:	68f8      	ldr	r0, [r7, #12]
 800e500:	f7ff fd02 	bl	800df08 <stateSelect>
 800e504:	4603      	mov	r3, r0
 800e506:	82fb      	strh	r3, [r7, #22]

        /* The state needs to be in #MQTTPubRelSend for sending PUBREL. */
        if( packetId != MQTT_PACKET_ID_INVALID )
 800e508:	8afb      	ldrh	r3, [r7, #22]
 800e50a:	2b00      	cmp	r3, #0
 800e50c:	d002      	beq.n	800e514 <MQTT_PubrelToResend+0x52>
        {
            *pState = MQTTPubRelSend;
 800e50e:	687b      	ldr	r3, [r7, #4]
 800e510:	2204      	movs	r2, #4
 800e512:	701a      	strb	r2, [r3, #0]
        }
    }

    return packetId;
 800e514:	8afb      	ldrh	r3, [r7, #22]
}
 800e516:	4618      	mov	r0, r3
 800e518:	3718      	adds	r7, #24
 800e51a:	46bd      	mov	sp, r7
 800e51c:	bd80      	pop	{r7, pc}
	...

0800e520 <transport_recv>:
#define min(a,b) ((a) < (b) ? (a) : (b))

int32_t transport_recv( NetworkContext_t * pNetworkContext,
                        void * pBuffer,
                        size_t bytesToRecv )
{
 800e520:	b580      	push	{r7, lr}
 800e522:	f5ad 6d87 	sub.w	sp, sp, #1080	; 0x438
 800e526:	af02      	add	r7, sp, #8
 800e528:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800e52c:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 800e530:	6018      	str	r0, [r3, #0]
 800e532:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800e536:	f5a3 6385 	sub.w	r3, r3, #1064	; 0x428
 800e53a:	6019      	str	r1, [r3, #0]
 800e53c:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800e540:	f2a3 432c 	subw	r3, r3, #1068	; 0x42c
 800e544:	601a      	str	r2, [r3, #0]
    int32_t socketStatus = 1;
 800e546:	2301      	movs	r3, #1
 800e548:	f8c7 342c 	str.w	r3, [r7, #1068]	; 0x42c
    uint16_t recvlen;
	uint8_t recvdata[1024];

    ES_WIFI_Conn_t conn;

	conn.Number = pNetworkContext->socket;
 800e54c:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800e550:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 800e554:	681b      	ldr	r3, [r3, #0]
 800e556:	781a      	ldrb	r2, [r3, #0]
 800e558:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800e55c:	f2a3 431c 	subw	r3, r3, #1052	; 0x41c
 800e560:	705a      	strb	r2, [r3, #1]
	conn.RemotePort = pNetworkContext->remote_port;
 800e562:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800e566:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 800e56a:	681b      	ldr	r3, [r3, #0]
 800e56c:	88da      	ldrh	r2, [r3, #6]
 800e56e:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800e572:	f2a3 431c 	subw	r3, r3, #1052	; 0x41c
 800e576:	805a      	strh	r2, [r3, #2]
	conn.LocalPort = 0;
 800e578:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800e57c:	f2a3 431c 	subw	r3, r3, #1052	; 0x41c
 800e580:	2200      	movs	r2, #0
 800e582:	809a      	strh	r2, [r3, #4]
	conn.Type = ES_WIFI_TCP_CONNECTION;
 800e584:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800e588:	f2a3 431c 	subw	r3, r3, #1052	; 0x41c
 800e58c:	2200      	movs	r2, #0
 800e58e:	701a      	strb	r2, [r3, #0]
	conn.RemoteIP[0] = pNetworkContext->ipaddr[0];
 800e590:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800e594:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 800e598:	681b      	ldr	r3, [r3, #0]
 800e59a:	789a      	ldrb	r2, [r3, #2]
 800e59c:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800e5a0:	f2a3 431c 	subw	r3, r3, #1052	; 0x41c
 800e5a4:	719a      	strb	r2, [r3, #6]
	conn.RemoteIP[1] = pNetworkContext->ipaddr[1];
 800e5a6:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800e5aa:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 800e5ae:	681b      	ldr	r3, [r3, #0]
 800e5b0:	78da      	ldrb	r2, [r3, #3]
 800e5b2:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800e5b6:	f2a3 431c 	subw	r3, r3, #1052	; 0x41c
 800e5ba:	71da      	strb	r2, [r3, #7]
	conn.RemoteIP[2] = pNetworkContext->ipaddr[2];
 800e5bc:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800e5c0:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 800e5c4:	681b      	ldr	r3, [r3, #0]
 800e5c6:	791a      	ldrb	r2, [r3, #4]
 800e5c8:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800e5cc:	f2a3 431c 	subw	r3, r3, #1052	; 0x41c
 800e5d0:	721a      	strb	r2, [r3, #8]
	conn.RemoteIP[3] = pNetworkContext->ipaddr[3];
 800e5d2:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800e5d6:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 800e5da:	681b      	ldr	r3, [r3, #0]
 800e5dc:	795a      	ldrb	r2, [r3, #5]
 800e5de:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800e5e2:	f2a3 431c 	subw	r3, r3, #1052	; 0x41c
 800e5e6:	725a      	strb	r2, [r3, #9]

    if(!pNetworkContext->socket_open) {
 800e5e8:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800e5ec:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 800e5f0:	681b      	ldr	r3, [r3, #0]
 800e5f2:	785b      	ldrb	r3, [r3, #1]
 800e5f4:	2b00      	cmp	r3, #0
 800e5f6:	d115      	bne.n	800e624 <transport_recv+0x104>
    	ret=ES_WIFI_StartClientConnection(&EsWifiObj, &conn);
 800e5f8:	f107 0314 	add.w	r3, r7, #20
 800e5fc:	4619      	mov	r1, r3
 800e5fe:	482a      	ldr	r0, [pc, #168]	; (800e6a8 <transport_recv+0x188>)
 800e600:	f7fb feb4 	bl	800a36c <ES_WIFI_StartClientConnection>
 800e604:	4603      	mov	r3, r0
 800e606:	f887 342b 	strb.w	r3, [r7, #1067]	; 0x42b

		if(ret!=ES_WIFI_STATUS_OK) {
 800e60a:	f897 342b 	ldrb.w	r3, [r7, #1067]	; 0x42b
 800e60e:	2b00      	cmp	r3, #0
 800e610:	d001      	beq.n	800e616 <transport_recv+0xf6>
			return 0;
 800e612:	2300      	movs	r3, #0
 800e614:	e042      	b.n	800e69c <transport_recv+0x17c>
		} else {
			pNetworkContext->socket_open=1;
 800e616:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800e61a:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 800e61e:	681b      	ldr	r3, [r3, #0]
 800e620:	2201      	movs	r2, #1
 800e622:	705a      	strb	r2, [r3, #1]
		}
    }

	ret=ES_WIFI_ReceiveData(&EsWifiObj,pNetworkContext->socket, pBuffer, bytesToRecv, &recvlen, 1000);
 800e624:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800e628:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 800e62c:	681b      	ldr	r3, [r3, #0]
 800e62e:	7819      	ldrb	r1, [r3, #0]
 800e630:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800e634:	f2a3 432c 	subw	r3, r3, #1068	; 0x42c
 800e638:	681b      	ldr	r3, [r3, #0]
 800e63a:	b298      	uxth	r0, r3
 800e63c:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800e640:	f5a3 6285 	sub.w	r2, r3, #1064	; 0x428
 800e644:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800e648:	9301      	str	r3, [sp, #4]
 800e64a:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800e64e:	9300      	str	r3, [sp, #0]
 800e650:	4603      	mov	r3, r0
 800e652:	6812      	ldr	r2, [r2, #0]
 800e654:	4814      	ldr	r0, [pc, #80]	; (800e6a8 <transport_recv+0x188>)
 800e656:	f7fc f82f 	bl	800a6b8 <ES_WIFI_ReceiveData>
 800e65a:	4603      	mov	r3, r0
 800e65c:	f887 342b 	strb.w	r3, [r7, #1067]	; 0x42b
	if(ret!=WIFI_STATUS_OK) {
 800e660:	f897 342b 	ldrb.w	r3, [r7, #1067]	; 0x42b
 800e664:	2b00      	cmp	r3, #0
 800e666:	d00a      	beq.n	800e67e <transport_recv+0x15e>
		socketStatus=0;
 800e668:	2300      	movs	r3, #0
 800e66a:	f8c7 342c 	str.w	r3, [r7, #1068]	; 0x42c
		pNetworkContext->socket_open=0;
 800e66e:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800e672:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 800e676:	681b      	ldr	r3, [r3, #0]
 800e678:	2200      	movs	r2, #0
 800e67a:	705a      	strb	r2, [r3, #1]
 800e67c:	e00c      	b.n	800e698 <transport_recv+0x178>
	} else {
		//log_transport('R',pBuffer,recvlen);
		recvdata[recvlen]=0;
 800e67e:	f8b7 3428 	ldrh.w	r3, [r7, #1064]	; 0x428
 800e682:	461a      	mov	r2, r3
 800e684:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800e688:	f5a3 6381 	sub.w	r3, r3, #1032	; 0x408
 800e68c:	2100      	movs	r1, #0
 800e68e:	5499      	strb	r1, [r3, r2]
		socketStatus=recvlen;
 800e690:	f8b7 3428 	ldrh.w	r3, [r7, #1064]	; 0x428
 800e694:	f8c7 342c 	str.w	r3, [r7, #1068]	; 0x42c
	}

    return socketStatus;
 800e698:	f8d7 342c 	ldr.w	r3, [r7, #1068]	; 0x42c
}
 800e69c:	4618      	mov	r0, r3
 800e69e:	f507 6786 	add.w	r7, r7, #1072	; 0x430
 800e6a2:	46bd      	mov	sp, r7
 800e6a4:	bd80      	pop	{r7, pc}
 800e6a6:	bf00      	nop
 800e6a8:	20000d04 	.word	0x20000d04

0800e6ac <transport_send>:

int32_t transport_send( NetworkContext_t * pNetworkContext,
                        const void * pBuffer,
                        size_t bytesToSend )
{
 800e6ac:	b580      	push	{r7, lr}
 800e6ae:	b08e      	sub	sp, #56	; 0x38
 800e6b0:	af02      	add	r7, sp, #8
 800e6b2:	60f8      	str	r0, [r7, #12]
 800e6b4:	60b9      	str	r1, [r7, #8]
 800e6b6:	607a      	str	r2, [r7, #4]
    int32_t socketStatus=0;
 800e6b8:	2300      	movs	r3, #0
 800e6ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    int16_t datasent;
    uint8_t ret;

    ES_WIFI_Conn_t conn;

	conn.Number = pNetworkContext->socket;
 800e6bc:	68fb      	ldr	r3, [r7, #12]
 800e6be:	781b      	ldrb	r3, [r3, #0]
 800e6c0:	757b      	strb	r3, [r7, #21]
	conn.RemotePort = pNetworkContext->remote_port;
 800e6c2:	68fb      	ldr	r3, [r7, #12]
 800e6c4:	88db      	ldrh	r3, [r3, #6]
 800e6c6:	82fb      	strh	r3, [r7, #22]
	conn.LocalPort = 0;
 800e6c8:	2300      	movs	r3, #0
 800e6ca:	833b      	strh	r3, [r7, #24]
	conn.Type = ES_WIFI_TCP_CONNECTION;
 800e6cc:	2300      	movs	r3, #0
 800e6ce:	753b      	strb	r3, [r7, #20]
	conn.RemoteIP[0] = pNetworkContext->ipaddr[0];
 800e6d0:	68fb      	ldr	r3, [r7, #12]
 800e6d2:	789b      	ldrb	r3, [r3, #2]
 800e6d4:	76bb      	strb	r3, [r7, #26]
	conn.RemoteIP[1] = pNetworkContext->ipaddr[1];
 800e6d6:	68fb      	ldr	r3, [r7, #12]
 800e6d8:	78db      	ldrb	r3, [r3, #3]
 800e6da:	76fb      	strb	r3, [r7, #27]
	conn.RemoteIP[2] = pNetworkContext->ipaddr[2];
 800e6dc:	68fb      	ldr	r3, [r7, #12]
 800e6de:	791b      	ldrb	r3, [r3, #4]
 800e6e0:	773b      	strb	r3, [r7, #28]
	conn.RemoteIP[3] = pNetworkContext->ipaddr[3];
 800e6e2:	68fb      	ldr	r3, [r7, #12]
 800e6e4:	795b      	ldrb	r3, [r3, #5]
 800e6e6:	777b      	strb	r3, [r7, #29]

    if(!pNetworkContext->socket_open) {
 800e6e8:	68fb      	ldr	r3, [r7, #12]
 800e6ea:	785b      	ldrb	r3, [r3, #1]
 800e6ec:	2b00      	cmp	r3, #0
 800e6ee:	d111      	bne.n	800e714 <transport_send+0x68>
    	ret=ES_WIFI_StartClientConnection(&EsWifiObj, &conn);
 800e6f0:	f107 0314 	add.w	r3, r7, #20
 800e6f4:	4619      	mov	r1, r3
 800e6f6:	481c      	ldr	r0, [pc, #112]	; (800e768 <transport_send+0xbc>)
 800e6f8:	f7fb fe38 	bl	800a36c <ES_WIFI_StartClientConnection>
 800e6fc:	4603      	mov	r3, r0
 800e6fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

		if(ret!=ES_WIFI_STATUS_OK) {
 800e702:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800e706:	2b00      	cmp	r3, #0
 800e708:	d001      	beq.n	800e70e <transport_send+0x62>
			return 0;
 800e70a:	2300      	movs	r3, #0
 800e70c:	e027      	b.n	800e75e <transport_send+0xb2>
		} else {
			pNetworkContext->socket_open=1;
 800e70e:	68fb      	ldr	r3, [r7, #12]
 800e710:	2201      	movs	r2, #1
 800e712:	705a      	strb	r2, [r3, #1]
		}
    }

	ret=ES_WIFI_SendData(&EsWifiObj,pNetworkContext->socket,pBuffer,bytesToSend,&datasent,1000);
 800e714:	68fb      	ldr	r3, [r7, #12]
 800e716:	7819      	ldrb	r1, [r3, #0]
 800e718:	687b      	ldr	r3, [r7, #4]
 800e71a:	b29a      	uxth	r2, r3
 800e71c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800e720:	9301      	str	r3, [sp, #4]
 800e722:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800e726:	9300      	str	r3, [sp, #0]
 800e728:	4613      	mov	r3, r2
 800e72a:	68ba      	ldr	r2, [r7, #8]
 800e72c:	480e      	ldr	r0, [pc, #56]	; (800e768 <transport_send+0xbc>)
 800e72e:	f7fb ff07 	bl	800a540 <ES_WIFI_SendData>
 800e732:	4603      	mov	r3, r0
 800e734:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	//log_transport('S',pBuffer,bytesToSend);
	if(ret!=ES_WIFI_STATUS_OK) {
 800e738:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800e73c:	2b00      	cmp	r3, #0
 800e73e:	d00a      	beq.n	800e756 <transport_send+0xaa>
		pNetworkContext->socket_open=0;
 800e740:	68fb      	ldr	r3, [r7, #12]
 800e742:	2200      	movs	r2, #0
 800e744:	705a      	strb	r2, [r3, #1]
		printf("Error in sending data: %d\n",ret);
 800e746:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800e74a:	4619      	mov	r1, r3
 800e74c:	4807      	ldr	r0, [pc, #28]	; (800e76c <transport_send+0xc0>)
 800e74e:	f004 f96b 	bl	8012a28 <iprintf>
		return 0;
 800e752:	2300      	movs	r3, #0
 800e754:	e003      	b.n	800e75e <transport_send+0xb2>
	} else {
		socketStatus=datasent;
 800e756:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800e75a:	62fb      	str	r3, [r7, #44]	; 0x2c
	}

    return socketStatus;
 800e75c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800e75e:	4618      	mov	r0, r3
 800e760:	3730      	adds	r7, #48	; 0x30
 800e762:	46bd      	mov	sp, r7
 800e764:	bd80      	pop	{r7, pc}
 800e766:	bf00      	nop
 800e768:	20000d04 	.word	0x20000d04
 800e76c:	08014f2c 	.word	0x08014f2c

0800e770 <init_transport_from_socket>:

/* Populating the TransportInterface_t structure with the definitions above. */
void init_transport_from_socket( uint8_t tcpSocket, uint8_t socketOpen,
                                 NetworkContext_t * pNetworkContext,
                                 TransportInterface_t * pTransport )
{
 800e770:	b480      	push	{r7}
 800e772:	b085      	sub	sp, #20
 800e774:	af00      	add	r7, sp, #0
 800e776:	60ba      	str	r2, [r7, #8]
 800e778:	607b      	str	r3, [r7, #4]
 800e77a:	4603      	mov	r3, r0
 800e77c:	73fb      	strb	r3, [r7, #15]
 800e77e:	460b      	mov	r3, r1
 800e780:	73bb      	strb	r3, [r7, #14]
    pNetworkContext->socket = tcpSocket;
 800e782:	68bb      	ldr	r3, [r7, #8]
 800e784:	7bfa      	ldrb	r2, [r7, #15]
 800e786:	701a      	strb	r2, [r3, #0]
    pNetworkContext->socket_open=socketOpen;
 800e788:	68bb      	ldr	r3, [r7, #8]
 800e78a:	7bba      	ldrb	r2, [r7, #14]
 800e78c:	705a      	strb	r2, [r3, #1]
    pTransport->recv = transport_recv;
 800e78e:	687b      	ldr	r3, [r7, #4]
 800e790:	4a08      	ldr	r2, [pc, #32]	; (800e7b4 <init_transport_from_socket+0x44>)
 800e792:	601a      	str	r2, [r3, #0]
    pTransport->send = transport_send;
 800e794:	687b      	ldr	r3, [r7, #4]
 800e796:	4a08      	ldr	r2, [pc, #32]	; (800e7b8 <init_transport_from_socket+0x48>)
 800e798:	605a      	str	r2, [r3, #4]
    // We don't implement transport vector function
    pTransport->writev=NULL;
 800e79a:	687b      	ldr	r3, [r7, #4]
 800e79c:	2200      	movs	r2, #0
 800e79e:	609a      	str	r2, [r3, #8]
    pTransport->pNetworkContext = pNetworkContext;
 800e7a0:	687b      	ldr	r3, [r7, #4]
 800e7a2:	68ba      	ldr	r2, [r7, #8]
 800e7a4:	60da      	str	r2, [r3, #12]
}
 800e7a6:	bf00      	nop
 800e7a8:	3714      	adds	r7, #20
 800e7aa:	46bd      	mov	sp, r7
 800e7ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7b0:	4770      	bx	lr
 800e7b2:	bf00      	nop
 800e7b4:	0800e521 	.word	0x0800e521
 800e7b8:	0800e6ad 	.word	0x0800e6ad

0800e7bc <__NVIC_SetPriority>:
{
 800e7bc:	b480      	push	{r7}
 800e7be:	b083      	sub	sp, #12
 800e7c0:	af00      	add	r7, sp, #0
 800e7c2:	4603      	mov	r3, r0
 800e7c4:	6039      	str	r1, [r7, #0]
 800e7c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800e7c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e7cc:	2b00      	cmp	r3, #0
 800e7ce:	db0a      	blt.n	800e7e6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800e7d0:	683b      	ldr	r3, [r7, #0]
 800e7d2:	b2da      	uxtb	r2, r3
 800e7d4:	490c      	ldr	r1, [pc, #48]	; (800e808 <__NVIC_SetPriority+0x4c>)
 800e7d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e7da:	0112      	lsls	r2, r2, #4
 800e7dc:	b2d2      	uxtb	r2, r2
 800e7de:	440b      	add	r3, r1
 800e7e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800e7e4:	e00a      	b.n	800e7fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800e7e6:	683b      	ldr	r3, [r7, #0]
 800e7e8:	b2da      	uxtb	r2, r3
 800e7ea:	4908      	ldr	r1, [pc, #32]	; (800e80c <__NVIC_SetPriority+0x50>)
 800e7ec:	79fb      	ldrb	r3, [r7, #7]
 800e7ee:	f003 030f 	and.w	r3, r3, #15
 800e7f2:	3b04      	subs	r3, #4
 800e7f4:	0112      	lsls	r2, r2, #4
 800e7f6:	b2d2      	uxtb	r2, r2
 800e7f8:	440b      	add	r3, r1
 800e7fa:	761a      	strb	r2, [r3, #24]
}
 800e7fc:	bf00      	nop
 800e7fe:	370c      	adds	r7, #12
 800e800:	46bd      	mov	sp, r7
 800e802:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e806:	4770      	bx	lr
 800e808:	e000e100 	.word	0xe000e100
 800e80c:	e000ed00 	.word	0xe000ed00

0800e810 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800e810:	b580      	push	{r7, lr}
 800e812:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800e814:	4b05      	ldr	r3, [pc, #20]	; (800e82c <SysTick_Handler+0x1c>)
 800e816:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800e818:	f002 f986 	bl	8010b28 <xTaskGetSchedulerState>
 800e81c:	4603      	mov	r3, r0
 800e81e:	2b01      	cmp	r3, #1
 800e820:	d001      	beq.n	800e826 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800e822:	f003 f971 	bl	8011b08 <xPortSysTickHandler>
  }
}
 800e826:	bf00      	nop
 800e828:	bd80      	pop	{r7, pc}
 800e82a:	bf00      	nop
 800e82c:	e000e010 	.word	0xe000e010

0800e830 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800e830:	b580      	push	{r7, lr}
 800e832:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800e834:	2100      	movs	r1, #0
 800e836:	f06f 0004 	mvn.w	r0, #4
 800e83a:	f7ff ffbf 	bl	800e7bc <__NVIC_SetPriority>
#endif
}
 800e83e:	bf00      	nop
 800e840:	bd80      	pop	{r7, pc}
	...

0800e844 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800e844:	b480      	push	{r7}
 800e846:	b083      	sub	sp, #12
 800e848:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e84a:	f3ef 8305 	mrs	r3, IPSR
 800e84e:	603b      	str	r3, [r7, #0]
  return(result);
 800e850:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800e852:	2b00      	cmp	r3, #0
 800e854:	d003      	beq.n	800e85e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800e856:	f06f 0305 	mvn.w	r3, #5
 800e85a:	607b      	str	r3, [r7, #4]
 800e85c:	e00c      	b.n	800e878 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800e85e:	4b0a      	ldr	r3, [pc, #40]	; (800e888 <osKernelInitialize+0x44>)
 800e860:	681b      	ldr	r3, [r3, #0]
 800e862:	2b00      	cmp	r3, #0
 800e864:	d105      	bne.n	800e872 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800e866:	4b08      	ldr	r3, [pc, #32]	; (800e888 <osKernelInitialize+0x44>)
 800e868:	2201      	movs	r2, #1
 800e86a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800e86c:	2300      	movs	r3, #0
 800e86e:	607b      	str	r3, [r7, #4]
 800e870:	e002      	b.n	800e878 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800e872:	f04f 33ff 	mov.w	r3, #4294967295
 800e876:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800e878:	687b      	ldr	r3, [r7, #4]
}
 800e87a:	4618      	mov	r0, r3
 800e87c:	370c      	adds	r7, #12
 800e87e:	46bd      	mov	sp, r7
 800e880:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e884:	4770      	bx	lr
 800e886:	bf00      	nop
 800e888:	20001604 	.word	0x20001604

0800e88c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800e88c:	b580      	push	{r7, lr}
 800e88e:	b082      	sub	sp, #8
 800e890:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e892:	f3ef 8305 	mrs	r3, IPSR
 800e896:	603b      	str	r3, [r7, #0]
  return(result);
 800e898:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800e89a:	2b00      	cmp	r3, #0
 800e89c:	d003      	beq.n	800e8a6 <osKernelStart+0x1a>
    stat = osErrorISR;
 800e89e:	f06f 0305 	mvn.w	r3, #5
 800e8a2:	607b      	str	r3, [r7, #4]
 800e8a4:	e010      	b.n	800e8c8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800e8a6:	4b0b      	ldr	r3, [pc, #44]	; (800e8d4 <osKernelStart+0x48>)
 800e8a8:	681b      	ldr	r3, [r3, #0]
 800e8aa:	2b01      	cmp	r3, #1
 800e8ac:	d109      	bne.n	800e8c2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800e8ae:	f7ff ffbf 	bl	800e830 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800e8b2:	4b08      	ldr	r3, [pc, #32]	; (800e8d4 <osKernelStart+0x48>)
 800e8b4:	2202      	movs	r2, #2
 800e8b6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800e8b8:	f001 fcbc 	bl	8010234 <vTaskStartScheduler>
      stat = osOK;
 800e8bc:	2300      	movs	r3, #0
 800e8be:	607b      	str	r3, [r7, #4]
 800e8c0:	e002      	b.n	800e8c8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800e8c2:	f04f 33ff 	mov.w	r3, #4294967295
 800e8c6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800e8c8:	687b      	ldr	r3, [r7, #4]
}
 800e8ca:	4618      	mov	r0, r3
 800e8cc:	3708      	adds	r7, #8
 800e8ce:	46bd      	mov	sp, r7
 800e8d0:	bd80      	pop	{r7, pc}
 800e8d2:	bf00      	nop
 800e8d4:	20001604 	.word	0x20001604

0800e8d8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800e8d8:	b580      	push	{r7, lr}
 800e8da:	b08e      	sub	sp, #56	; 0x38
 800e8dc:	af04      	add	r7, sp, #16
 800e8de:	60f8      	str	r0, [r7, #12]
 800e8e0:	60b9      	str	r1, [r7, #8]
 800e8e2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800e8e4:	2300      	movs	r3, #0
 800e8e6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e8e8:	f3ef 8305 	mrs	r3, IPSR
 800e8ec:	617b      	str	r3, [r7, #20]
  return(result);
 800e8ee:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800e8f0:	2b00      	cmp	r3, #0
 800e8f2:	d17e      	bne.n	800e9f2 <osThreadNew+0x11a>
 800e8f4:	68fb      	ldr	r3, [r7, #12]
 800e8f6:	2b00      	cmp	r3, #0
 800e8f8:	d07b      	beq.n	800e9f2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800e8fa:	2380      	movs	r3, #128	; 0x80
 800e8fc:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800e8fe:	2318      	movs	r3, #24
 800e900:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800e902:	2300      	movs	r3, #0
 800e904:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800e906:	f04f 33ff 	mov.w	r3, #4294967295
 800e90a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800e90c:	687b      	ldr	r3, [r7, #4]
 800e90e:	2b00      	cmp	r3, #0
 800e910:	d045      	beq.n	800e99e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800e912:	687b      	ldr	r3, [r7, #4]
 800e914:	681b      	ldr	r3, [r3, #0]
 800e916:	2b00      	cmp	r3, #0
 800e918:	d002      	beq.n	800e920 <osThreadNew+0x48>
        name = attr->name;
 800e91a:	687b      	ldr	r3, [r7, #4]
 800e91c:	681b      	ldr	r3, [r3, #0]
 800e91e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800e920:	687b      	ldr	r3, [r7, #4]
 800e922:	699b      	ldr	r3, [r3, #24]
 800e924:	2b00      	cmp	r3, #0
 800e926:	d002      	beq.n	800e92e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800e928:	687b      	ldr	r3, [r7, #4]
 800e92a:	699b      	ldr	r3, [r3, #24]
 800e92c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800e92e:	69fb      	ldr	r3, [r7, #28]
 800e930:	2b00      	cmp	r3, #0
 800e932:	d008      	beq.n	800e946 <osThreadNew+0x6e>
 800e934:	69fb      	ldr	r3, [r7, #28]
 800e936:	2b38      	cmp	r3, #56	; 0x38
 800e938:	d805      	bhi.n	800e946 <osThreadNew+0x6e>
 800e93a:	687b      	ldr	r3, [r7, #4]
 800e93c:	685b      	ldr	r3, [r3, #4]
 800e93e:	f003 0301 	and.w	r3, r3, #1
 800e942:	2b00      	cmp	r3, #0
 800e944:	d001      	beq.n	800e94a <osThreadNew+0x72>
        return (NULL);
 800e946:	2300      	movs	r3, #0
 800e948:	e054      	b.n	800e9f4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800e94a:	687b      	ldr	r3, [r7, #4]
 800e94c:	695b      	ldr	r3, [r3, #20]
 800e94e:	2b00      	cmp	r3, #0
 800e950:	d003      	beq.n	800e95a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800e952:	687b      	ldr	r3, [r7, #4]
 800e954:	695b      	ldr	r3, [r3, #20]
 800e956:	089b      	lsrs	r3, r3, #2
 800e958:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800e95a:	687b      	ldr	r3, [r7, #4]
 800e95c:	689b      	ldr	r3, [r3, #8]
 800e95e:	2b00      	cmp	r3, #0
 800e960:	d00e      	beq.n	800e980 <osThreadNew+0xa8>
 800e962:	687b      	ldr	r3, [r7, #4]
 800e964:	68db      	ldr	r3, [r3, #12]
 800e966:	2bbf      	cmp	r3, #191	; 0xbf
 800e968:	d90a      	bls.n	800e980 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800e96a:	687b      	ldr	r3, [r7, #4]
 800e96c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800e96e:	2b00      	cmp	r3, #0
 800e970:	d006      	beq.n	800e980 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800e972:	687b      	ldr	r3, [r7, #4]
 800e974:	695b      	ldr	r3, [r3, #20]
 800e976:	2b00      	cmp	r3, #0
 800e978:	d002      	beq.n	800e980 <osThreadNew+0xa8>
        mem = 1;
 800e97a:	2301      	movs	r3, #1
 800e97c:	61bb      	str	r3, [r7, #24]
 800e97e:	e010      	b.n	800e9a2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800e980:	687b      	ldr	r3, [r7, #4]
 800e982:	689b      	ldr	r3, [r3, #8]
 800e984:	2b00      	cmp	r3, #0
 800e986:	d10c      	bne.n	800e9a2 <osThreadNew+0xca>
 800e988:	687b      	ldr	r3, [r7, #4]
 800e98a:	68db      	ldr	r3, [r3, #12]
 800e98c:	2b00      	cmp	r3, #0
 800e98e:	d108      	bne.n	800e9a2 <osThreadNew+0xca>
 800e990:	687b      	ldr	r3, [r7, #4]
 800e992:	691b      	ldr	r3, [r3, #16]
 800e994:	2b00      	cmp	r3, #0
 800e996:	d104      	bne.n	800e9a2 <osThreadNew+0xca>
          mem = 0;
 800e998:	2300      	movs	r3, #0
 800e99a:	61bb      	str	r3, [r7, #24]
 800e99c:	e001      	b.n	800e9a2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800e99e:	2300      	movs	r3, #0
 800e9a0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800e9a2:	69bb      	ldr	r3, [r7, #24]
 800e9a4:	2b01      	cmp	r3, #1
 800e9a6:	d110      	bne.n	800e9ca <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800e9a8:	687b      	ldr	r3, [r7, #4]
 800e9aa:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800e9ac:	687a      	ldr	r2, [r7, #4]
 800e9ae:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800e9b0:	9202      	str	r2, [sp, #8]
 800e9b2:	9301      	str	r3, [sp, #4]
 800e9b4:	69fb      	ldr	r3, [r7, #28]
 800e9b6:	9300      	str	r3, [sp, #0]
 800e9b8:	68bb      	ldr	r3, [r7, #8]
 800e9ba:	6a3a      	ldr	r2, [r7, #32]
 800e9bc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e9be:	68f8      	ldr	r0, [r7, #12]
 800e9c0:	f001 f970 	bl	800fca4 <xTaskCreateStatic>
 800e9c4:	4603      	mov	r3, r0
 800e9c6:	613b      	str	r3, [r7, #16]
 800e9c8:	e013      	b.n	800e9f2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800e9ca:	69bb      	ldr	r3, [r7, #24]
 800e9cc:	2b00      	cmp	r3, #0
 800e9ce:	d110      	bne.n	800e9f2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800e9d0:	6a3b      	ldr	r3, [r7, #32]
 800e9d2:	b29a      	uxth	r2, r3
 800e9d4:	f107 0310 	add.w	r3, r7, #16
 800e9d8:	9301      	str	r3, [sp, #4]
 800e9da:	69fb      	ldr	r3, [r7, #28]
 800e9dc:	9300      	str	r3, [sp, #0]
 800e9de:	68bb      	ldr	r3, [r7, #8]
 800e9e0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e9e2:	68f8      	ldr	r0, [r7, #12]
 800e9e4:	f001 f9bb 	bl	800fd5e <xTaskCreate>
 800e9e8:	4603      	mov	r3, r0
 800e9ea:	2b01      	cmp	r3, #1
 800e9ec:	d001      	beq.n	800e9f2 <osThreadNew+0x11a>
            hTask = NULL;
 800e9ee:	2300      	movs	r3, #0
 800e9f0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800e9f2:	693b      	ldr	r3, [r7, #16]
}
 800e9f4:	4618      	mov	r0, r3
 800e9f6:	3728      	adds	r7, #40	; 0x28
 800e9f8:	46bd      	mov	sp, r7
 800e9fa:	bd80      	pop	{r7, pc}

0800e9fc <osThreadTerminate>:
  vTaskDelete (NULL);
#endif
  for (;;);
}

osStatus_t osThreadTerminate (osThreadId_t thread_id) {
 800e9fc:	b580      	push	{r7, lr}
 800e9fe:	b086      	sub	sp, #24
 800ea00:	af00      	add	r7, sp, #0
 800ea02:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 800ea04:	687b      	ldr	r3, [r7, #4]
 800ea06:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ea08:	f3ef 8305 	mrs	r3, IPSR
 800ea0c:	60bb      	str	r3, [r7, #8]
  return(result);
 800ea0e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;
#ifndef USE_FreeRTOS_HEAP_1
  eTaskState tstate;

  if (IS_IRQ()) {
 800ea10:	2b00      	cmp	r3, #0
 800ea12:	d003      	beq.n	800ea1c <osThreadTerminate+0x20>
    stat = osErrorISR;
 800ea14:	f06f 0305 	mvn.w	r3, #5
 800ea18:	617b      	str	r3, [r7, #20]
 800ea1a:	e017      	b.n	800ea4c <osThreadTerminate+0x50>
  }
  else if (hTask == NULL) {
 800ea1c:	693b      	ldr	r3, [r7, #16]
 800ea1e:	2b00      	cmp	r3, #0
 800ea20:	d103      	bne.n	800ea2a <osThreadTerminate+0x2e>
    stat = osErrorParameter;
 800ea22:	f06f 0303 	mvn.w	r3, #3
 800ea26:	617b      	str	r3, [r7, #20]
 800ea28:	e010      	b.n	800ea4c <osThreadTerminate+0x50>
  }
  else {
    tstate = eTaskGetState (hTask);
 800ea2a:	6938      	ldr	r0, [r7, #16]
 800ea2c:	f001 fb9c 	bl	8010168 <eTaskGetState>
 800ea30:	4603      	mov	r3, r0
 800ea32:	73fb      	strb	r3, [r7, #15]

    if (tstate != eDeleted) {
 800ea34:	7bfb      	ldrb	r3, [r7, #15]
 800ea36:	2b04      	cmp	r3, #4
 800ea38:	d005      	beq.n	800ea46 <osThreadTerminate+0x4a>
      stat = osOK;
 800ea3a:	2300      	movs	r3, #0
 800ea3c:	617b      	str	r3, [r7, #20]
      vTaskDelete (hTask);
 800ea3e:	6938      	ldr	r0, [r7, #16]
 800ea40:	f001 faec 	bl	801001c <vTaskDelete>
 800ea44:	e002      	b.n	800ea4c <osThreadTerminate+0x50>
    } else {
      stat = osErrorResource;
 800ea46:	f06f 0302 	mvn.w	r3, #2
 800ea4a:	617b      	str	r3, [r7, #20]
  }
#else
  stat = osError;
#endif

  return (stat);
 800ea4c:	697b      	ldr	r3, [r7, #20]
}
 800ea4e:	4618      	mov	r0, r3
 800ea50:	3718      	adds	r7, #24
 800ea52:	46bd      	mov	sp, r7
 800ea54:	bd80      	pop	{r7, pc}
	...

0800ea58 <osThreadFlagsSet>:
  return (count);
}
#endif /* (configUSE_OS2_THREAD_ENUMERATE == 1) */

#if (configUSE_OS2_THREAD_FLAGS == 1)
uint32_t osThreadFlagsSet (osThreadId_t thread_id, uint32_t flags) {
 800ea58:	b580      	push	{r7, lr}
 800ea5a:	b088      	sub	sp, #32
 800ea5c:	af02      	add	r7, sp, #8
 800ea5e:	6078      	str	r0, [r7, #4]
 800ea60:	6039      	str	r1, [r7, #0]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 800ea62:	687b      	ldr	r3, [r7, #4]
 800ea64:	617b      	str	r3, [r7, #20]
  uint32_t rflags;
  BaseType_t yield;

  if ((hTask == NULL) || ((flags & THREAD_FLAGS_INVALID_BITS) != 0U)) {
 800ea66:	697b      	ldr	r3, [r7, #20]
 800ea68:	2b00      	cmp	r3, #0
 800ea6a:	d002      	beq.n	800ea72 <osThreadFlagsSet+0x1a>
 800ea6c:	683b      	ldr	r3, [r7, #0]
 800ea6e:	2b00      	cmp	r3, #0
 800ea70:	da03      	bge.n	800ea7a <osThreadFlagsSet+0x22>
    rflags = (uint32_t)osErrorParameter;
 800ea72:	f06f 0303 	mvn.w	r3, #3
 800ea76:	60fb      	str	r3, [r7, #12]
 800ea78:	e035      	b.n	800eae6 <osThreadFlagsSet+0x8e>
  }
  else {
    rflags = (uint32_t)osError;
 800ea7a:	f04f 33ff 	mov.w	r3, #4294967295
 800ea7e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ea80:	f3ef 8305 	mrs	r3, IPSR
 800ea84:	613b      	str	r3, [r7, #16]
  return(result);
 800ea86:	693b      	ldr	r3, [r7, #16]

    if (IS_IRQ()) {
 800ea88:	2b00      	cmp	r3, #0
 800ea8a:	d01f      	beq.n	800eacc <osThreadFlagsSet+0x74>
      yield = pdFALSE;
 800ea8c:	2300      	movs	r3, #0
 800ea8e:	60bb      	str	r3, [r7, #8]

      (void)xTaskNotifyFromISR (hTask, flags, eSetBits, &yield);
 800ea90:	f107 0308 	add.w	r3, r7, #8
 800ea94:	9300      	str	r3, [sp, #0]
 800ea96:	2300      	movs	r3, #0
 800ea98:	2201      	movs	r2, #1
 800ea9a:	6839      	ldr	r1, [r7, #0]
 800ea9c:	6978      	ldr	r0, [r7, #20]
 800ea9e:	f002 f9ed 	bl	8010e7c <xTaskGenericNotifyFromISR>
      (void)xTaskNotifyAndQueryFromISR (hTask, 0, eNoAction, &rflags, NULL);
 800eaa2:	f107 030c 	add.w	r3, r7, #12
 800eaa6:	2200      	movs	r2, #0
 800eaa8:	9200      	str	r2, [sp, #0]
 800eaaa:	2200      	movs	r2, #0
 800eaac:	2100      	movs	r1, #0
 800eaae:	6978      	ldr	r0, [r7, #20]
 800eab0:	f002 f9e4 	bl	8010e7c <xTaskGenericNotifyFromISR>

      portYIELD_FROM_ISR (yield);
 800eab4:	68bb      	ldr	r3, [r7, #8]
 800eab6:	2b00      	cmp	r3, #0
 800eab8:	d015      	beq.n	800eae6 <osThreadFlagsSet+0x8e>
 800eaba:	4b0d      	ldr	r3, [pc, #52]	; (800eaf0 <osThreadFlagsSet+0x98>)
 800eabc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800eac0:	601a      	str	r2, [r3, #0]
 800eac2:	f3bf 8f4f 	dsb	sy
 800eac6:	f3bf 8f6f 	isb	sy
 800eaca:	e00c      	b.n	800eae6 <osThreadFlagsSet+0x8e>
    }
    else {
      (void)xTaskNotify (hTask, flags, eSetBits);
 800eacc:	2300      	movs	r3, #0
 800eace:	2201      	movs	r2, #1
 800ead0:	6839      	ldr	r1, [r7, #0]
 800ead2:	6978      	ldr	r0, [r7, #20]
 800ead4:	f002 f914 	bl	8010d00 <xTaskGenericNotify>
      (void)xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags);
 800ead8:	f107 030c 	add.w	r3, r7, #12
 800eadc:	2200      	movs	r2, #0
 800eade:	2100      	movs	r1, #0
 800eae0:	6978      	ldr	r0, [r7, #20]
 800eae2:	f002 f90d 	bl	8010d00 <xTaskGenericNotify>
    }
  }
  /* Return flags after setting */
  return (rflags);
 800eae6:	68fb      	ldr	r3, [r7, #12]
}
 800eae8:	4618      	mov	r0, r3
 800eaea:	3718      	adds	r7, #24
 800eaec:	46bd      	mov	sp, r7
 800eaee:	bd80      	pop	{r7, pc}
 800eaf0:	e000ed04 	.word	0xe000ed04

0800eaf4 <osThreadFlagsWait>:
  }

  return (rflags);
}

uint32_t osThreadFlagsWait (uint32_t flags, uint32_t options, uint32_t timeout) {
 800eaf4:	b580      	push	{r7, lr}
 800eaf6:	b08c      	sub	sp, #48	; 0x30
 800eaf8:	af00      	add	r7, sp, #0
 800eafa:	60f8      	str	r0, [r7, #12]
 800eafc:	60b9      	str	r1, [r7, #8]
 800eafe:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800eb00:	f3ef 8305 	mrs	r3, IPSR
 800eb04:	617b      	str	r3, [r7, #20]
  return(result);
 800eb06:	697b      	ldr	r3, [r7, #20]
  uint32_t rflags, nval;
  uint32_t clear;
  TickType_t t0, td, tout;
  BaseType_t rval;

  if (IS_IRQ()) {
 800eb08:	2b00      	cmp	r3, #0
 800eb0a:	d003      	beq.n	800eb14 <osThreadFlagsWait+0x20>
    rflags = (uint32_t)osErrorISR;
 800eb0c:	f06f 0305 	mvn.w	r3, #5
 800eb10:	62fb      	str	r3, [r7, #44]	; 0x2c
 800eb12:	e06b      	b.n	800ebec <osThreadFlagsWait+0xf8>
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 800eb14:	68fb      	ldr	r3, [r7, #12]
 800eb16:	2b00      	cmp	r3, #0
 800eb18:	da03      	bge.n	800eb22 <osThreadFlagsWait+0x2e>
    rflags = (uint32_t)osErrorParameter;
 800eb1a:	f06f 0303 	mvn.w	r3, #3
 800eb1e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800eb20:	e064      	b.n	800ebec <osThreadFlagsWait+0xf8>
  }
  else {
    if ((options & osFlagsNoClear) == osFlagsNoClear) {
 800eb22:	68bb      	ldr	r3, [r7, #8]
 800eb24:	f003 0302 	and.w	r3, r3, #2
 800eb28:	2b00      	cmp	r3, #0
 800eb2a:	d002      	beq.n	800eb32 <osThreadFlagsWait+0x3e>
      clear = 0U;
 800eb2c:	2300      	movs	r3, #0
 800eb2e:	62bb      	str	r3, [r7, #40]	; 0x28
 800eb30:	e001      	b.n	800eb36 <osThreadFlagsWait+0x42>
    } else {
      clear = flags;
 800eb32:	68fb      	ldr	r3, [r7, #12]
 800eb34:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    rflags = 0U;
 800eb36:	2300      	movs	r3, #0
 800eb38:	62fb      	str	r3, [r7, #44]	; 0x2c
    tout   = timeout;
 800eb3a:	687b      	ldr	r3, [r7, #4]
 800eb3c:	627b      	str	r3, [r7, #36]	; 0x24

    t0 = xTaskGetTickCount();
 800eb3e:	f001 fc97 	bl	8010470 <xTaskGetTickCount>
 800eb42:	6238      	str	r0, [r7, #32]
    do {
      rval = xTaskNotifyWait (0, clear, &nval, tout);
 800eb44:	f107 0210 	add.w	r2, r7, #16
 800eb48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb4a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800eb4c:	2000      	movs	r0, #0
 800eb4e:	f002 f877 	bl	8010c40 <xTaskNotifyWait>
 800eb52:	61f8      	str	r0, [r7, #28]

      if (rval == pdPASS) {
 800eb54:	69fb      	ldr	r3, [r7, #28]
 800eb56:	2b01      	cmp	r3, #1
 800eb58:	d137      	bne.n	800ebca <osThreadFlagsWait+0xd6>
        rflags &= flags;
 800eb5a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800eb5c:	68fb      	ldr	r3, [r7, #12]
 800eb5e:	4013      	ands	r3, r2
 800eb60:	62fb      	str	r3, [r7, #44]	; 0x2c
        rflags |= nval;
 800eb62:	693b      	ldr	r3, [r7, #16]
 800eb64:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800eb66:	4313      	orrs	r3, r2
 800eb68:	62fb      	str	r3, [r7, #44]	; 0x2c

        if ((options & osFlagsWaitAll) == osFlagsWaitAll) {
 800eb6a:	68bb      	ldr	r3, [r7, #8]
 800eb6c:	f003 0301 	and.w	r3, r3, #1
 800eb70:	2b00      	cmp	r3, #0
 800eb72:	d00c      	beq.n	800eb8e <osThreadFlagsWait+0x9a>
          if ((flags & rflags) == flags) {
 800eb74:	68fa      	ldr	r2, [r7, #12]
 800eb76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb78:	4013      	ands	r3, r2
 800eb7a:	68fa      	ldr	r2, [r7, #12]
 800eb7c:	429a      	cmp	r2, r3
 800eb7e:	d032      	beq.n	800ebe6 <osThreadFlagsWait+0xf2>
            break;
          } else {
            if (timeout == 0U) {
 800eb80:	687b      	ldr	r3, [r7, #4]
 800eb82:	2b00      	cmp	r3, #0
 800eb84:	d10f      	bne.n	800eba6 <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 800eb86:	f06f 0302 	mvn.w	r3, #2
 800eb8a:	62fb      	str	r3, [r7, #44]	; 0x2c
              break;
 800eb8c:	e02e      	b.n	800ebec <osThreadFlagsWait+0xf8>
            }
          }
        }
        else {
          if ((flags & rflags) != 0) {
 800eb8e:	68fa      	ldr	r2, [r7, #12]
 800eb90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb92:	4013      	ands	r3, r2
 800eb94:	2b00      	cmp	r3, #0
 800eb96:	d128      	bne.n	800ebea <osThreadFlagsWait+0xf6>
            break;
          } else {
            if (timeout == 0U) {
 800eb98:	687b      	ldr	r3, [r7, #4]
 800eb9a:	2b00      	cmp	r3, #0
 800eb9c:	d103      	bne.n	800eba6 <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 800eb9e:	f06f 0302 	mvn.w	r3, #2
 800eba2:	62fb      	str	r3, [r7, #44]	; 0x2c
              break;
 800eba4:	e022      	b.n	800ebec <osThreadFlagsWait+0xf8>
            }
          }
        }

        /* Update timeout */
        td = xTaskGetTickCount() - t0;
 800eba6:	f001 fc63 	bl	8010470 <xTaskGetTickCount>
 800ebaa:	4602      	mov	r2, r0
 800ebac:	6a3b      	ldr	r3, [r7, #32]
 800ebae:	1ad3      	subs	r3, r2, r3
 800ebb0:	61bb      	str	r3, [r7, #24]

        if (td > tout) {
 800ebb2:	69ba      	ldr	r2, [r7, #24]
 800ebb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebb6:	429a      	cmp	r2, r3
 800ebb8:	d902      	bls.n	800ebc0 <osThreadFlagsWait+0xcc>
          tout  = 0;
 800ebba:	2300      	movs	r3, #0
 800ebbc:	627b      	str	r3, [r7, #36]	; 0x24
 800ebbe:	e00e      	b.n	800ebde <osThreadFlagsWait+0xea>
        } else {
          tout -= td;
 800ebc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ebc2:	69bb      	ldr	r3, [r7, #24]
 800ebc4:	1ad3      	subs	r3, r2, r3
 800ebc6:	627b      	str	r3, [r7, #36]	; 0x24
 800ebc8:	e009      	b.n	800ebde <osThreadFlagsWait+0xea>
        }
      }
      else {
        if (timeout == 0) {
 800ebca:	687b      	ldr	r3, [r7, #4]
 800ebcc:	2b00      	cmp	r3, #0
 800ebce:	d103      	bne.n	800ebd8 <osThreadFlagsWait+0xe4>
          rflags = (uint32_t)osErrorResource;
 800ebd0:	f06f 0302 	mvn.w	r3, #2
 800ebd4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ebd6:	e002      	b.n	800ebde <osThreadFlagsWait+0xea>
        } else {
          rflags = (uint32_t)osErrorTimeout;
 800ebd8:	f06f 0301 	mvn.w	r3, #1
 800ebdc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
      }
    }
    while (rval != pdFAIL);
 800ebde:	69fb      	ldr	r3, [r7, #28]
 800ebe0:	2b00      	cmp	r3, #0
 800ebe2:	d1af      	bne.n	800eb44 <osThreadFlagsWait+0x50>
 800ebe4:	e002      	b.n	800ebec <osThreadFlagsWait+0xf8>
            break;
 800ebe6:	bf00      	nop
 800ebe8:	e000      	b.n	800ebec <osThreadFlagsWait+0xf8>
            break;
 800ebea:	bf00      	nop
  }

  /* Return flags before clearing */
  return (rflags);
 800ebec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800ebee:	4618      	mov	r0, r3
 800ebf0:	3730      	adds	r7, #48	; 0x30
 800ebf2:	46bd      	mov	sp, r7
 800ebf4:	bd80      	pop	{r7, pc}

0800ebf6 <osDelay>:
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800ebf6:	b580      	push	{r7, lr}
 800ebf8:	b084      	sub	sp, #16
 800ebfa:	af00      	add	r7, sp, #0
 800ebfc:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ebfe:	f3ef 8305 	mrs	r3, IPSR
 800ec02:	60bb      	str	r3, [r7, #8]
  return(result);
 800ec04:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ec06:	2b00      	cmp	r3, #0
 800ec08:	d003      	beq.n	800ec12 <osDelay+0x1c>
    stat = osErrorISR;
 800ec0a:	f06f 0305 	mvn.w	r3, #5
 800ec0e:	60fb      	str	r3, [r7, #12]
 800ec10:	e007      	b.n	800ec22 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800ec12:	2300      	movs	r3, #0
 800ec14:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800ec16:	687b      	ldr	r3, [r7, #4]
 800ec18:	2b00      	cmp	r3, #0
 800ec1a:	d002      	beq.n	800ec22 <osDelay+0x2c>
      vTaskDelay(ticks);
 800ec1c:	6878      	ldr	r0, [r7, #4]
 800ec1e:	f001 fa6f 	bl	8010100 <vTaskDelay>
    }
  }

  return (stat);
 800ec22:	68fb      	ldr	r3, [r7, #12]
}
 800ec24:	4618      	mov	r0, r3
 800ec26:	3710      	adds	r7, #16
 800ec28:	46bd      	mov	sp, r7
 800ec2a:	bd80      	pop	{r7, pc}

0800ec2c <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800ec2c:	b580      	push	{r7, lr}
 800ec2e:	b08a      	sub	sp, #40	; 0x28
 800ec30:	af02      	add	r7, sp, #8
 800ec32:	60f8      	str	r0, [r7, #12]
 800ec34:	60b9      	str	r1, [r7, #8]
 800ec36:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800ec38:	2300      	movs	r3, #0
 800ec3a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ec3c:	f3ef 8305 	mrs	r3, IPSR
 800ec40:	613b      	str	r3, [r7, #16]
  return(result);
 800ec42:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800ec44:	2b00      	cmp	r3, #0
 800ec46:	d15f      	bne.n	800ed08 <osMessageQueueNew+0xdc>
 800ec48:	68fb      	ldr	r3, [r7, #12]
 800ec4a:	2b00      	cmp	r3, #0
 800ec4c:	d05c      	beq.n	800ed08 <osMessageQueueNew+0xdc>
 800ec4e:	68bb      	ldr	r3, [r7, #8]
 800ec50:	2b00      	cmp	r3, #0
 800ec52:	d059      	beq.n	800ed08 <osMessageQueueNew+0xdc>
    mem = -1;
 800ec54:	f04f 33ff 	mov.w	r3, #4294967295
 800ec58:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800ec5a:	687b      	ldr	r3, [r7, #4]
 800ec5c:	2b00      	cmp	r3, #0
 800ec5e:	d029      	beq.n	800ecb4 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800ec60:	687b      	ldr	r3, [r7, #4]
 800ec62:	689b      	ldr	r3, [r3, #8]
 800ec64:	2b00      	cmp	r3, #0
 800ec66:	d012      	beq.n	800ec8e <osMessageQueueNew+0x62>
 800ec68:	687b      	ldr	r3, [r7, #4]
 800ec6a:	68db      	ldr	r3, [r3, #12]
 800ec6c:	2b4f      	cmp	r3, #79	; 0x4f
 800ec6e:	d90e      	bls.n	800ec8e <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800ec70:	687b      	ldr	r3, [r7, #4]
 800ec72:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800ec74:	2b00      	cmp	r3, #0
 800ec76:	d00a      	beq.n	800ec8e <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800ec78:	687b      	ldr	r3, [r7, #4]
 800ec7a:	695a      	ldr	r2, [r3, #20]
 800ec7c:	68fb      	ldr	r3, [r7, #12]
 800ec7e:	68b9      	ldr	r1, [r7, #8]
 800ec80:	fb01 f303 	mul.w	r3, r1, r3
 800ec84:	429a      	cmp	r2, r3
 800ec86:	d302      	bcc.n	800ec8e <osMessageQueueNew+0x62>
        mem = 1;
 800ec88:	2301      	movs	r3, #1
 800ec8a:	61bb      	str	r3, [r7, #24]
 800ec8c:	e014      	b.n	800ecb8 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800ec8e:	687b      	ldr	r3, [r7, #4]
 800ec90:	689b      	ldr	r3, [r3, #8]
 800ec92:	2b00      	cmp	r3, #0
 800ec94:	d110      	bne.n	800ecb8 <osMessageQueueNew+0x8c>
 800ec96:	687b      	ldr	r3, [r7, #4]
 800ec98:	68db      	ldr	r3, [r3, #12]
 800ec9a:	2b00      	cmp	r3, #0
 800ec9c:	d10c      	bne.n	800ecb8 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800ec9e:	687b      	ldr	r3, [r7, #4]
 800eca0:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800eca2:	2b00      	cmp	r3, #0
 800eca4:	d108      	bne.n	800ecb8 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800eca6:	687b      	ldr	r3, [r7, #4]
 800eca8:	695b      	ldr	r3, [r3, #20]
 800ecaa:	2b00      	cmp	r3, #0
 800ecac:	d104      	bne.n	800ecb8 <osMessageQueueNew+0x8c>
          mem = 0;
 800ecae:	2300      	movs	r3, #0
 800ecb0:	61bb      	str	r3, [r7, #24]
 800ecb2:	e001      	b.n	800ecb8 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800ecb4:	2300      	movs	r3, #0
 800ecb6:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800ecb8:	69bb      	ldr	r3, [r7, #24]
 800ecba:	2b01      	cmp	r3, #1
 800ecbc:	d10b      	bne.n	800ecd6 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800ecbe:	687b      	ldr	r3, [r7, #4]
 800ecc0:	691a      	ldr	r2, [r3, #16]
 800ecc2:	687b      	ldr	r3, [r7, #4]
 800ecc4:	689b      	ldr	r3, [r3, #8]
 800ecc6:	2100      	movs	r1, #0
 800ecc8:	9100      	str	r1, [sp, #0]
 800ecca:	68b9      	ldr	r1, [r7, #8]
 800eccc:	68f8      	ldr	r0, [r7, #12]
 800ecce:	f000 fa87 	bl	800f1e0 <xQueueGenericCreateStatic>
 800ecd2:	61f8      	str	r0, [r7, #28]
 800ecd4:	e008      	b.n	800ece8 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800ecd6:	69bb      	ldr	r3, [r7, #24]
 800ecd8:	2b00      	cmp	r3, #0
 800ecda:	d105      	bne.n	800ece8 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800ecdc:	2200      	movs	r2, #0
 800ecde:	68b9      	ldr	r1, [r7, #8]
 800ece0:	68f8      	ldr	r0, [r7, #12]
 800ece2:	f000 faf5 	bl	800f2d0 <xQueueGenericCreate>
 800ece6:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800ece8:	69fb      	ldr	r3, [r7, #28]
 800ecea:	2b00      	cmp	r3, #0
 800ecec:	d00c      	beq.n	800ed08 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800ecee:	687b      	ldr	r3, [r7, #4]
 800ecf0:	2b00      	cmp	r3, #0
 800ecf2:	d003      	beq.n	800ecfc <osMessageQueueNew+0xd0>
        name = attr->name;
 800ecf4:	687b      	ldr	r3, [r7, #4]
 800ecf6:	681b      	ldr	r3, [r3, #0]
 800ecf8:	617b      	str	r3, [r7, #20]
 800ecfa:	e001      	b.n	800ed00 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800ecfc:	2300      	movs	r3, #0
 800ecfe:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800ed00:	6979      	ldr	r1, [r7, #20]
 800ed02:	69f8      	ldr	r0, [r7, #28]
 800ed04:	f000 ff70 	bl	800fbe8 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800ed08:	69fb      	ldr	r3, [r7, #28]
}
 800ed0a:	4618      	mov	r0, r3
 800ed0c:	3720      	adds	r7, #32
 800ed0e:	46bd      	mov	sp, r7
 800ed10:	bd80      	pop	{r7, pc}
	...

0800ed14 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800ed14:	b580      	push	{r7, lr}
 800ed16:	b088      	sub	sp, #32
 800ed18:	af00      	add	r7, sp, #0
 800ed1a:	60f8      	str	r0, [r7, #12]
 800ed1c:	60b9      	str	r1, [r7, #8]
 800ed1e:	603b      	str	r3, [r7, #0]
 800ed20:	4613      	mov	r3, r2
 800ed22:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800ed24:	68fb      	ldr	r3, [r7, #12]
 800ed26:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800ed28:	2300      	movs	r3, #0
 800ed2a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ed2c:	f3ef 8305 	mrs	r3, IPSR
 800ed30:	617b      	str	r3, [r7, #20]
  return(result);
 800ed32:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800ed34:	2b00      	cmp	r3, #0
 800ed36:	d028      	beq.n	800ed8a <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800ed38:	69bb      	ldr	r3, [r7, #24]
 800ed3a:	2b00      	cmp	r3, #0
 800ed3c:	d005      	beq.n	800ed4a <osMessageQueuePut+0x36>
 800ed3e:	68bb      	ldr	r3, [r7, #8]
 800ed40:	2b00      	cmp	r3, #0
 800ed42:	d002      	beq.n	800ed4a <osMessageQueuePut+0x36>
 800ed44:	683b      	ldr	r3, [r7, #0]
 800ed46:	2b00      	cmp	r3, #0
 800ed48:	d003      	beq.n	800ed52 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800ed4a:	f06f 0303 	mvn.w	r3, #3
 800ed4e:	61fb      	str	r3, [r7, #28]
 800ed50:	e038      	b.n	800edc4 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800ed52:	2300      	movs	r3, #0
 800ed54:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800ed56:	f107 0210 	add.w	r2, r7, #16
 800ed5a:	2300      	movs	r3, #0
 800ed5c:	68b9      	ldr	r1, [r7, #8]
 800ed5e:	69b8      	ldr	r0, [r7, #24]
 800ed60:	f000 fc12 	bl	800f588 <xQueueGenericSendFromISR>
 800ed64:	4603      	mov	r3, r0
 800ed66:	2b01      	cmp	r3, #1
 800ed68:	d003      	beq.n	800ed72 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800ed6a:	f06f 0302 	mvn.w	r3, #2
 800ed6e:	61fb      	str	r3, [r7, #28]
 800ed70:	e028      	b.n	800edc4 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800ed72:	693b      	ldr	r3, [r7, #16]
 800ed74:	2b00      	cmp	r3, #0
 800ed76:	d025      	beq.n	800edc4 <osMessageQueuePut+0xb0>
 800ed78:	4b15      	ldr	r3, [pc, #84]	; (800edd0 <osMessageQueuePut+0xbc>)
 800ed7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ed7e:	601a      	str	r2, [r3, #0]
 800ed80:	f3bf 8f4f 	dsb	sy
 800ed84:	f3bf 8f6f 	isb	sy
 800ed88:	e01c      	b.n	800edc4 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800ed8a:	69bb      	ldr	r3, [r7, #24]
 800ed8c:	2b00      	cmp	r3, #0
 800ed8e:	d002      	beq.n	800ed96 <osMessageQueuePut+0x82>
 800ed90:	68bb      	ldr	r3, [r7, #8]
 800ed92:	2b00      	cmp	r3, #0
 800ed94:	d103      	bne.n	800ed9e <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800ed96:	f06f 0303 	mvn.w	r3, #3
 800ed9a:	61fb      	str	r3, [r7, #28]
 800ed9c:	e012      	b.n	800edc4 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800ed9e:	2300      	movs	r3, #0
 800eda0:	683a      	ldr	r2, [r7, #0]
 800eda2:	68b9      	ldr	r1, [r7, #8]
 800eda4:	69b8      	ldr	r0, [r7, #24]
 800eda6:	f000 faf1 	bl	800f38c <xQueueGenericSend>
 800edaa:	4603      	mov	r3, r0
 800edac:	2b01      	cmp	r3, #1
 800edae:	d009      	beq.n	800edc4 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800edb0:	683b      	ldr	r3, [r7, #0]
 800edb2:	2b00      	cmp	r3, #0
 800edb4:	d003      	beq.n	800edbe <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800edb6:	f06f 0301 	mvn.w	r3, #1
 800edba:	61fb      	str	r3, [r7, #28]
 800edbc:	e002      	b.n	800edc4 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800edbe:	f06f 0302 	mvn.w	r3, #2
 800edc2:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800edc4:	69fb      	ldr	r3, [r7, #28]
}
 800edc6:	4618      	mov	r0, r3
 800edc8:	3720      	adds	r7, #32
 800edca:	46bd      	mov	sp, r7
 800edcc:	bd80      	pop	{r7, pc}
 800edce:	bf00      	nop
 800edd0:	e000ed04 	.word	0xe000ed04

0800edd4 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800edd4:	b580      	push	{r7, lr}
 800edd6:	b088      	sub	sp, #32
 800edd8:	af00      	add	r7, sp, #0
 800edda:	60f8      	str	r0, [r7, #12]
 800eddc:	60b9      	str	r1, [r7, #8]
 800edde:	607a      	str	r2, [r7, #4]
 800ede0:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800ede2:	68fb      	ldr	r3, [r7, #12]
 800ede4:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800ede6:	2300      	movs	r3, #0
 800ede8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800edea:	f3ef 8305 	mrs	r3, IPSR
 800edee:	617b      	str	r3, [r7, #20]
  return(result);
 800edf0:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800edf2:	2b00      	cmp	r3, #0
 800edf4:	d028      	beq.n	800ee48 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800edf6:	69bb      	ldr	r3, [r7, #24]
 800edf8:	2b00      	cmp	r3, #0
 800edfa:	d005      	beq.n	800ee08 <osMessageQueueGet+0x34>
 800edfc:	68bb      	ldr	r3, [r7, #8]
 800edfe:	2b00      	cmp	r3, #0
 800ee00:	d002      	beq.n	800ee08 <osMessageQueueGet+0x34>
 800ee02:	683b      	ldr	r3, [r7, #0]
 800ee04:	2b00      	cmp	r3, #0
 800ee06:	d003      	beq.n	800ee10 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800ee08:	f06f 0303 	mvn.w	r3, #3
 800ee0c:	61fb      	str	r3, [r7, #28]
 800ee0e:	e037      	b.n	800ee80 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800ee10:	2300      	movs	r3, #0
 800ee12:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800ee14:	f107 0310 	add.w	r3, r7, #16
 800ee18:	461a      	mov	r2, r3
 800ee1a:	68b9      	ldr	r1, [r7, #8]
 800ee1c:	69b8      	ldr	r0, [r7, #24]
 800ee1e:	f000 fd2f 	bl	800f880 <xQueueReceiveFromISR>
 800ee22:	4603      	mov	r3, r0
 800ee24:	2b01      	cmp	r3, #1
 800ee26:	d003      	beq.n	800ee30 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800ee28:	f06f 0302 	mvn.w	r3, #2
 800ee2c:	61fb      	str	r3, [r7, #28]
 800ee2e:	e027      	b.n	800ee80 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800ee30:	693b      	ldr	r3, [r7, #16]
 800ee32:	2b00      	cmp	r3, #0
 800ee34:	d024      	beq.n	800ee80 <osMessageQueueGet+0xac>
 800ee36:	4b15      	ldr	r3, [pc, #84]	; (800ee8c <osMessageQueueGet+0xb8>)
 800ee38:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ee3c:	601a      	str	r2, [r3, #0]
 800ee3e:	f3bf 8f4f 	dsb	sy
 800ee42:	f3bf 8f6f 	isb	sy
 800ee46:	e01b      	b.n	800ee80 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800ee48:	69bb      	ldr	r3, [r7, #24]
 800ee4a:	2b00      	cmp	r3, #0
 800ee4c:	d002      	beq.n	800ee54 <osMessageQueueGet+0x80>
 800ee4e:	68bb      	ldr	r3, [r7, #8]
 800ee50:	2b00      	cmp	r3, #0
 800ee52:	d103      	bne.n	800ee5c <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800ee54:	f06f 0303 	mvn.w	r3, #3
 800ee58:	61fb      	str	r3, [r7, #28]
 800ee5a:	e011      	b.n	800ee80 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800ee5c:	683a      	ldr	r2, [r7, #0]
 800ee5e:	68b9      	ldr	r1, [r7, #8]
 800ee60:	69b8      	ldr	r0, [r7, #24]
 800ee62:	f000 fc2d 	bl	800f6c0 <xQueueReceive>
 800ee66:	4603      	mov	r3, r0
 800ee68:	2b01      	cmp	r3, #1
 800ee6a:	d009      	beq.n	800ee80 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800ee6c:	683b      	ldr	r3, [r7, #0]
 800ee6e:	2b00      	cmp	r3, #0
 800ee70:	d003      	beq.n	800ee7a <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800ee72:	f06f 0301 	mvn.w	r3, #1
 800ee76:	61fb      	str	r3, [r7, #28]
 800ee78:	e002      	b.n	800ee80 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800ee7a:	f06f 0302 	mvn.w	r3, #2
 800ee7e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800ee80:	69fb      	ldr	r3, [r7, #28]
}
 800ee82:	4618      	mov	r0, r3
 800ee84:	3720      	adds	r7, #32
 800ee86:	46bd      	mov	sp, r7
 800ee88:	bd80      	pop	{r7, pc}
 800ee8a:	bf00      	nop
 800ee8c:	e000ed04 	.word	0xe000ed04

0800ee90 <osMessageQueueGetSpace>:
  }

  return ((uint32_t)count);
}

uint32_t osMessageQueueGetSpace (osMessageQueueId_t mq_id) {
 800ee90:	b580      	push	{r7, lr}
 800ee92:	b08a      	sub	sp, #40	; 0x28
 800ee94:	af00      	add	r7, sp, #0
 800ee96:	6078      	str	r0, [r7, #4]
  StaticQueue_t *mq = (StaticQueue_t *)mq_id;
 800ee98:	687b      	ldr	r3, [r7, #4]
 800ee9a:	623b      	str	r3, [r7, #32]
  uint32_t space;
  uint32_t isrm;

  if (mq == NULL) {
 800ee9c:	6a3b      	ldr	r3, [r7, #32]
 800ee9e:	2b00      	cmp	r3, #0
 800eea0:	d102      	bne.n	800eea8 <osMessageQueueGetSpace+0x18>
    space = 0U;
 800eea2:	2300      	movs	r3, #0
 800eea4:	627b      	str	r3, [r7, #36]	; 0x24
 800eea6:	e023      	b.n	800eef0 <osMessageQueueGetSpace+0x60>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800eea8:	f3ef 8305 	mrs	r3, IPSR
 800eeac:	61bb      	str	r3, [r7, #24]
  return(result);
 800eeae:	69bb      	ldr	r3, [r7, #24]
  }
  else if (IS_IRQ()) {
 800eeb0:	2b00      	cmp	r3, #0
 800eeb2:	d019      	beq.n	800eee8 <osMessageQueueGetSpace+0x58>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800eeb4:	f3ef 8211 	mrs	r2, BASEPRI
 800eeb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eebc:	f383 8811 	msr	BASEPRI, r3
 800eec0:	f3bf 8f6f 	isb	sy
 800eec4:	f3bf 8f4f 	dsb	sy
 800eec8:	613a      	str	r2, [r7, #16]
 800eeca:	60fb      	str	r3, [r7, #12]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800eecc:	693b      	ldr	r3, [r7, #16]
    isrm = taskENTER_CRITICAL_FROM_ISR();
 800eece:	61fb      	str	r3, [r7, #28]

    /* space = pxQueue->uxLength - pxQueue->uxMessagesWaiting; */
    space = mq->uxDummy4[1] - mq->uxDummy4[0];
 800eed0:	6a3b      	ldr	r3, [r7, #32]
 800eed2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800eed4:	6a3b      	ldr	r3, [r7, #32]
 800eed6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eed8:	1ad3      	subs	r3, r2, r3
 800eeda:	627b      	str	r3, [r7, #36]	; 0x24
 800eedc:	69fb      	ldr	r3, [r7, #28]
 800eede:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800eee0:	697b      	ldr	r3, [r7, #20]
 800eee2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800eee6:	e003      	b.n	800eef0 <osMessageQueueGetSpace+0x60>

    taskEXIT_CRITICAL_FROM_ISR(isrm);
  }
  else {
    space = (uint32_t)uxQueueSpacesAvailable ((QueueHandle_t)mq);
 800eee8:	6a38      	ldr	r0, [r7, #32]
 800eeea:	f000 fd49 	bl	800f980 <uxQueueSpacesAvailable>
 800eeee:	6278      	str	r0, [r7, #36]	; 0x24
  }

  return (space);
 800eef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800eef2:	4618      	mov	r0, r3
 800eef4:	3728      	adds	r7, #40	; 0x28
 800eef6:	46bd      	mov	sp, r7
 800eef8:	bd80      	pop	{r7, pc}

0800eefa <osMessageQueueReset>:

osStatus_t osMessageQueueReset (osMessageQueueId_t mq_id) {
 800eefa:	b580      	push	{r7, lr}
 800eefc:	b086      	sub	sp, #24
 800eefe:	af00      	add	r7, sp, #0
 800ef00:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800ef02:	687b      	ldr	r3, [r7, #4]
 800ef04:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ef06:	f3ef 8305 	mrs	r3, IPSR
 800ef0a:	60fb      	str	r3, [r7, #12]
  return(result);
 800ef0c:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ef0e:	2b00      	cmp	r3, #0
 800ef10:	d003      	beq.n	800ef1a <osMessageQueueReset+0x20>
    stat = osErrorISR;
 800ef12:	f06f 0305 	mvn.w	r3, #5
 800ef16:	617b      	str	r3, [r7, #20]
 800ef18:	e00c      	b.n	800ef34 <osMessageQueueReset+0x3a>
  }
  else if (hQueue == NULL) {
 800ef1a:	693b      	ldr	r3, [r7, #16]
 800ef1c:	2b00      	cmp	r3, #0
 800ef1e:	d103      	bne.n	800ef28 <osMessageQueueReset+0x2e>
    stat = osErrorParameter;
 800ef20:	f06f 0303 	mvn.w	r3, #3
 800ef24:	617b      	str	r3, [r7, #20]
 800ef26:	e005      	b.n	800ef34 <osMessageQueueReset+0x3a>
  }
  else {
    stat = osOK;
 800ef28:	2300      	movs	r3, #0
 800ef2a:	617b      	str	r3, [r7, #20]
    (void)xQueueReset (hQueue);
 800ef2c:	2100      	movs	r1, #0
 800ef2e:	6938      	ldr	r0, [r7, #16]
 800ef30:	f000 f8ee 	bl	800f110 <xQueueGenericReset>
  }

  return (stat);
 800ef34:	697b      	ldr	r3, [r7, #20]
}
 800ef36:	4618      	mov	r0, r3
 800ef38:	3718      	adds	r7, #24
 800ef3a:	46bd      	mov	sp, r7
 800ef3c:	bd80      	pop	{r7, pc}
	...

0800ef40 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800ef40:	b480      	push	{r7}
 800ef42:	b085      	sub	sp, #20
 800ef44:	af00      	add	r7, sp, #0
 800ef46:	60f8      	str	r0, [r7, #12]
 800ef48:	60b9      	str	r1, [r7, #8]
 800ef4a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800ef4c:	68fb      	ldr	r3, [r7, #12]
 800ef4e:	4a07      	ldr	r2, [pc, #28]	; (800ef6c <vApplicationGetIdleTaskMemory+0x2c>)
 800ef50:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800ef52:	68bb      	ldr	r3, [r7, #8]
 800ef54:	4a06      	ldr	r2, [pc, #24]	; (800ef70 <vApplicationGetIdleTaskMemory+0x30>)
 800ef56:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800ef58:	687b      	ldr	r3, [r7, #4]
 800ef5a:	2280      	movs	r2, #128	; 0x80
 800ef5c:	601a      	str	r2, [r3, #0]
}
 800ef5e:	bf00      	nop
 800ef60:	3714      	adds	r7, #20
 800ef62:	46bd      	mov	sp, r7
 800ef64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef68:	4770      	bx	lr
 800ef6a:	bf00      	nop
 800ef6c:	20001608 	.word	0x20001608
 800ef70:	200016c8 	.word	0x200016c8

0800ef74 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800ef74:	b480      	push	{r7}
 800ef76:	b085      	sub	sp, #20
 800ef78:	af00      	add	r7, sp, #0
 800ef7a:	60f8      	str	r0, [r7, #12]
 800ef7c:	60b9      	str	r1, [r7, #8]
 800ef7e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800ef80:	68fb      	ldr	r3, [r7, #12]
 800ef82:	4a07      	ldr	r2, [pc, #28]	; (800efa0 <vApplicationGetTimerTaskMemory+0x2c>)
 800ef84:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800ef86:	68bb      	ldr	r3, [r7, #8]
 800ef88:	4a06      	ldr	r2, [pc, #24]	; (800efa4 <vApplicationGetTimerTaskMemory+0x30>)
 800ef8a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800ef8c:	687b      	ldr	r3, [r7, #4]
 800ef8e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ef92:	601a      	str	r2, [r3, #0]
}
 800ef94:	bf00      	nop
 800ef96:	3714      	adds	r7, #20
 800ef98:	46bd      	mov	sp, r7
 800ef9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef9e:	4770      	bx	lr
 800efa0:	200018c8 	.word	0x200018c8
 800efa4:	20001988 	.word	0x20001988

0800efa8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800efa8:	b480      	push	{r7}
 800efaa:	b083      	sub	sp, #12
 800efac:	af00      	add	r7, sp, #0
 800efae:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800efb0:	687b      	ldr	r3, [r7, #4]
 800efb2:	f103 0208 	add.w	r2, r3, #8
 800efb6:	687b      	ldr	r3, [r7, #4]
 800efb8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800efba:	687b      	ldr	r3, [r7, #4]
 800efbc:	f04f 32ff 	mov.w	r2, #4294967295
 800efc0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800efc2:	687b      	ldr	r3, [r7, #4]
 800efc4:	f103 0208 	add.w	r2, r3, #8
 800efc8:	687b      	ldr	r3, [r7, #4]
 800efca:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800efcc:	687b      	ldr	r3, [r7, #4]
 800efce:	f103 0208 	add.w	r2, r3, #8
 800efd2:	687b      	ldr	r3, [r7, #4]
 800efd4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800efd6:	687b      	ldr	r3, [r7, #4]
 800efd8:	2200      	movs	r2, #0
 800efda:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800efdc:	bf00      	nop
 800efde:	370c      	adds	r7, #12
 800efe0:	46bd      	mov	sp, r7
 800efe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efe6:	4770      	bx	lr

0800efe8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800efe8:	b480      	push	{r7}
 800efea:	b083      	sub	sp, #12
 800efec:	af00      	add	r7, sp, #0
 800efee:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800eff0:	687b      	ldr	r3, [r7, #4]
 800eff2:	2200      	movs	r2, #0
 800eff4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800eff6:	bf00      	nop
 800eff8:	370c      	adds	r7, #12
 800effa:	46bd      	mov	sp, r7
 800effc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f000:	4770      	bx	lr

0800f002 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800f002:	b480      	push	{r7}
 800f004:	b085      	sub	sp, #20
 800f006:	af00      	add	r7, sp, #0
 800f008:	6078      	str	r0, [r7, #4]
 800f00a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800f00c:	687b      	ldr	r3, [r7, #4]
 800f00e:	685b      	ldr	r3, [r3, #4]
 800f010:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800f012:	683b      	ldr	r3, [r7, #0]
 800f014:	68fa      	ldr	r2, [r7, #12]
 800f016:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800f018:	68fb      	ldr	r3, [r7, #12]
 800f01a:	689a      	ldr	r2, [r3, #8]
 800f01c:	683b      	ldr	r3, [r7, #0]
 800f01e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800f020:	68fb      	ldr	r3, [r7, #12]
 800f022:	689b      	ldr	r3, [r3, #8]
 800f024:	683a      	ldr	r2, [r7, #0]
 800f026:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800f028:	68fb      	ldr	r3, [r7, #12]
 800f02a:	683a      	ldr	r2, [r7, #0]
 800f02c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800f02e:	683b      	ldr	r3, [r7, #0]
 800f030:	687a      	ldr	r2, [r7, #4]
 800f032:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800f034:	687b      	ldr	r3, [r7, #4]
 800f036:	681b      	ldr	r3, [r3, #0]
 800f038:	1c5a      	adds	r2, r3, #1
 800f03a:	687b      	ldr	r3, [r7, #4]
 800f03c:	601a      	str	r2, [r3, #0]
}
 800f03e:	bf00      	nop
 800f040:	3714      	adds	r7, #20
 800f042:	46bd      	mov	sp, r7
 800f044:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f048:	4770      	bx	lr

0800f04a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800f04a:	b480      	push	{r7}
 800f04c:	b085      	sub	sp, #20
 800f04e:	af00      	add	r7, sp, #0
 800f050:	6078      	str	r0, [r7, #4]
 800f052:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800f054:	683b      	ldr	r3, [r7, #0]
 800f056:	681b      	ldr	r3, [r3, #0]
 800f058:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800f05a:	68bb      	ldr	r3, [r7, #8]
 800f05c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f060:	d103      	bne.n	800f06a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800f062:	687b      	ldr	r3, [r7, #4]
 800f064:	691b      	ldr	r3, [r3, #16]
 800f066:	60fb      	str	r3, [r7, #12]
 800f068:	e00c      	b.n	800f084 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800f06a:	687b      	ldr	r3, [r7, #4]
 800f06c:	3308      	adds	r3, #8
 800f06e:	60fb      	str	r3, [r7, #12]
 800f070:	e002      	b.n	800f078 <vListInsert+0x2e>
 800f072:	68fb      	ldr	r3, [r7, #12]
 800f074:	685b      	ldr	r3, [r3, #4]
 800f076:	60fb      	str	r3, [r7, #12]
 800f078:	68fb      	ldr	r3, [r7, #12]
 800f07a:	685b      	ldr	r3, [r3, #4]
 800f07c:	681b      	ldr	r3, [r3, #0]
 800f07e:	68ba      	ldr	r2, [r7, #8]
 800f080:	429a      	cmp	r2, r3
 800f082:	d2f6      	bcs.n	800f072 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800f084:	68fb      	ldr	r3, [r7, #12]
 800f086:	685a      	ldr	r2, [r3, #4]
 800f088:	683b      	ldr	r3, [r7, #0]
 800f08a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800f08c:	683b      	ldr	r3, [r7, #0]
 800f08e:	685b      	ldr	r3, [r3, #4]
 800f090:	683a      	ldr	r2, [r7, #0]
 800f092:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800f094:	683b      	ldr	r3, [r7, #0]
 800f096:	68fa      	ldr	r2, [r7, #12]
 800f098:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800f09a:	68fb      	ldr	r3, [r7, #12]
 800f09c:	683a      	ldr	r2, [r7, #0]
 800f09e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800f0a0:	683b      	ldr	r3, [r7, #0]
 800f0a2:	687a      	ldr	r2, [r7, #4]
 800f0a4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800f0a6:	687b      	ldr	r3, [r7, #4]
 800f0a8:	681b      	ldr	r3, [r3, #0]
 800f0aa:	1c5a      	adds	r2, r3, #1
 800f0ac:	687b      	ldr	r3, [r7, #4]
 800f0ae:	601a      	str	r2, [r3, #0]
}
 800f0b0:	bf00      	nop
 800f0b2:	3714      	adds	r7, #20
 800f0b4:	46bd      	mov	sp, r7
 800f0b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0ba:	4770      	bx	lr

0800f0bc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800f0bc:	b480      	push	{r7}
 800f0be:	b085      	sub	sp, #20
 800f0c0:	af00      	add	r7, sp, #0
 800f0c2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800f0c4:	687b      	ldr	r3, [r7, #4]
 800f0c6:	691b      	ldr	r3, [r3, #16]
 800f0c8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800f0ca:	687b      	ldr	r3, [r7, #4]
 800f0cc:	685b      	ldr	r3, [r3, #4]
 800f0ce:	687a      	ldr	r2, [r7, #4]
 800f0d0:	6892      	ldr	r2, [r2, #8]
 800f0d2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800f0d4:	687b      	ldr	r3, [r7, #4]
 800f0d6:	689b      	ldr	r3, [r3, #8]
 800f0d8:	687a      	ldr	r2, [r7, #4]
 800f0da:	6852      	ldr	r2, [r2, #4]
 800f0dc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800f0de:	68fb      	ldr	r3, [r7, #12]
 800f0e0:	685b      	ldr	r3, [r3, #4]
 800f0e2:	687a      	ldr	r2, [r7, #4]
 800f0e4:	429a      	cmp	r2, r3
 800f0e6:	d103      	bne.n	800f0f0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800f0e8:	687b      	ldr	r3, [r7, #4]
 800f0ea:	689a      	ldr	r2, [r3, #8]
 800f0ec:	68fb      	ldr	r3, [r7, #12]
 800f0ee:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800f0f0:	687b      	ldr	r3, [r7, #4]
 800f0f2:	2200      	movs	r2, #0
 800f0f4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800f0f6:	68fb      	ldr	r3, [r7, #12]
 800f0f8:	681b      	ldr	r3, [r3, #0]
 800f0fa:	1e5a      	subs	r2, r3, #1
 800f0fc:	68fb      	ldr	r3, [r7, #12]
 800f0fe:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800f100:	68fb      	ldr	r3, [r7, #12]
 800f102:	681b      	ldr	r3, [r3, #0]
}
 800f104:	4618      	mov	r0, r3
 800f106:	3714      	adds	r7, #20
 800f108:	46bd      	mov	sp, r7
 800f10a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f10e:	4770      	bx	lr

0800f110 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800f110:	b580      	push	{r7, lr}
 800f112:	b084      	sub	sp, #16
 800f114:	af00      	add	r7, sp, #0
 800f116:	6078      	str	r0, [r7, #4]
 800f118:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800f11a:	687b      	ldr	r3, [r7, #4]
 800f11c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800f11e:	68fb      	ldr	r3, [r7, #12]
 800f120:	2b00      	cmp	r3, #0
 800f122:	d10a      	bne.n	800f13a <xQueueGenericReset+0x2a>
	__asm volatile
 800f124:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f128:	f383 8811 	msr	BASEPRI, r3
 800f12c:	f3bf 8f6f 	isb	sy
 800f130:	f3bf 8f4f 	dsb	sy
 800f134:	60bb      	str	r3, [r7, #8]
}
 800f136:	bf00      	nop
 800f138:	e7fe      	b.n	800f138 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800f13a:	f002 fc53 	bl	80119e4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f13e:	68fb      	ldr	r3, [r7, #12]
 800f140:	681a      	ldr	r2, [r3, #0]
 800f142:	68fb      	ldr	r3, [r7, #12]
 800f144:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f146:	68f9      	ldr	r1, [r7, #12]
 800f148:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800f14a:	fb01 f303 	mul.w	r3, r1, r3
 800f14e:	441a      	add	r2, r3
 800f150:	68fb      	ldr	r3, [r7, #12]
 800f152:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800f154:	68fb      	ldr	r3, [r7, #12]
 800f156:	2200      	movs	r2, #0
 800f158:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800f15a:	68fb      	ldr	r3, [r7, #12]
 800f15c:	681a      	ldr	r2, [r3, #0]
 800f15e:	68fb      	ldr	r3, [r7, #12]
 800f160:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f162:	68fb      	ldr	r3, [r7, #12]
 800f164:	681a      	ldr	r2, [r3, #0]
 800f166:	68fb      	ldr	r3, [r7, #12]
 800f168:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f16a:	3b01      	subs	r3, #1
 800f16c:	68f9      	ldr	r1, [r7, #12]
 800f16e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800f170:	fb01 f303 	mul.w	r3, r1, r3
 800f174:	441a      	add	r2, r3
 800f176:	68fb      	ldr	r3, [r7, #12]
 800f178:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800f17a:	68fb      	ldr	r3, [r7, #12]
 800f17c:	22ff      	movs	r2, #255	; 0xff
 800f17e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800f182:	68fb      	ldr	r3, [r7, #12]
 800f184:	22ff      	movs	r2, #255	; 0xff
 800f186:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800f18a:	683b      	ldr	r3, [r7, #0]
 800f18c:	2b00      	cmp	r3, #0
 800f18e:	d114      	bne.n	800f1ba <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f190:	68fb      	ldr	r3, [r7, #12]
 800f192:	691b      	ldr	r3, [r3, #16]
 800f194:	2b00      	cmp	r3, #0
 800f196:	d01a      	beq.n	800f1ce <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f198:	68fb      	ldr	r3, [r7, #12]
 800f19a:	3310      	adds	r3, #16
 800f19c:	4618      	mov	r0, r3
 800f19e:	f001 fb01 	bl	80107a4 <xTaskRemoveFromEventList>
 800f1a2:	4603      	mov	r3, r0
 800f1a4:	2b00      	cmp	r3, #0
 800f1a6:	d012      	beq.n	800f1ce <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800f1a8:	4b0c      	ldr	r3, [pc, #48]	; (800f1dc <xQueueGenericReset+0xcc>)
 800f1aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f1ae:	601a      	str	r2, [r3, #0]
 800f1b0:	f3bf 8f4f 	dsb	sy
 800f1b4:	f3bf 8f6f 	isb	sy
 800f1b8:	e009      	b.n	800f1ce <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800f1ba:	68fb      	ldr	r3, [r7, #12]
 800f1bc:	3310      	adds	r3, #16
 800f1be:	4618      	mov	r0, r3
 800f1c0:	f7ff fef2 	bl	800efa8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800f1c4:	68fb      	ldr	r3, [r7, #12]
 800f1c6:	3324      	adds	r3, #36	; 0x24
 800f1c8:	4618      	mov	r0, r3
 800f1ca:	f7ff feed 	bl	800efa8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800f1ce:	f002 fc39 	bl	8011a44 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800f1d2:	2301      	movs	r3, #1
}
 800f1d4:	4618      	mov	r0, r3
 800f1d6:	3710      	adds	r7, #16
 800f1d8:	46bd      	mov	sp, r7
 800f1da:	bd80      	pop	{r7, pc}
 800f1dc:	e000ed04 	.word	0xe000ed04

0800f1e0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800f1e0:	b580      	push	{r7, lr}
 800f1e2:	b08e      	sub	sp, #56	; 0x38
 800f1e4:	af02      	add	r7, sp, #8
 800f1e6:	60f8      	str	r0, [r7, #12]
 800f1e8:	60b9      	str	r1, [r7, #8]
 800f1ea:	607a      	str	r2, [r7, #4]
 800f1ec:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800f1ee:	68fb      	ldr	r3, [r7, #12]
 800f1f0:	2b00      	cmp	r3, #0
 800f1f2:	d10a      	bne.n	800f20a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800f1f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f1f8:	f383 8811 	msr	BASEPRI, r3
 800f1fc:	f3bf 8f6f 	isb	sy
 800f200:	f3bf 8f4f 	dsb	sy
 800f204:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800f206:	bf00      	nop
 800f208:	e7fe      	b.n	800f208 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800f20a:	683b      	ldr	r3, [r7, #0]
 800f20c:	2b00      	cmp	r3, #0
 800f20e:	d10a      	bne.n	800f226 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800f210:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f214:	f383 8811 	msr	BASEPRI, r3
 800f218:	f3bf 8f6f 	isb	sy
 800f21c:	f3bf 8f4f 	dsb	sy
 800f220:	627b      	str	r3, [r7, #36]	; 0x24
}
 800f222:	bf00      	nop
 800f224:	e7fe      	b.n	800f224 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800f226:	687b      	ldr	r3, [r7, #4]
 800f228:	2b00      	cmp	r3, #0
 800f22a:	d002      	beq.n	800f232 <xQueueGenericCreateStatic+0x52>
 800f22c:	68bb      	ldr	r3, [r7, #8]
 800f22e:	2b00      	cmp	r3, #0
 800f230:	d001      	beq.n	800f236 <xQueueGenericCreateStatic+0x56>
 800f232:	2301      	movs	r3, #1
 800f234:	e000      	b.n	800f238 <xQueueGenericCreateStatic+0x58>
 800f236:	2300      	movs	r3, #0
 800f238:	2b00      	cmp	r3, #0
 800f23a:	d10a      	bne.n	800f252 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800f23c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f240:	f383 8811 	msr	BASEPRI, r3
 800f244:	f3bf 8f6f 	isb	sy
 800f248:	f3bf 8f4f 	dsb	sy
 800f24c:	623b      	str	r3, [r7, #32]
}
 800f24e:	bf00      	nop
 800f250:	e7fe      	b.n	800f250 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800f252:	687b      	ldr	r3, [r7, #4]
 800f254:	2b00      	cmp	r3, #0
 800f256:	d102      	bne.n	800f25e <xQueueGenericCreateStatic+0x7e>
 800f258:	68bb      	ldr	r3, [r7, #8]
 800f25a:	2b00      	cmp	r3, #0
 800f25c:	d101      	bne.n	800f262 <xQueueGenericCreateStatic+0x82>
 800f25e:	2301      	movs	r3, #1
 800f260:	e000      	b.n	800f264 <xQueueGenericCreateStatic+0x84>
 800f262:	2300      	movs	r3, #0
 800f264:	2b00      	cmp	r3, #0
 800f266:	d10a      	bne.n	800f27e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800f268:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f26c:	f383 8811 	msr	BASEPRI, r3
 800f270:	f3bf 8f6f 	isb	sy
 800f274:	f3bf 8f4f 	dsb	sy
 800f278:	61fb      	str	r3, [r7, #28]
}
 800f27a:	bf00      	nop
 800f27c:	e7fe      	b.n	800f27c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800f27e:	2350      	movs	r3, #80	; 0x50
 800f280:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800f282:	697b      	ldr	r3, [r7, #20]
 800f284:	2b50      	cmp	r3, #80	; 0x50
 800f286:	d00a      	beq.n	800f29e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800f288:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f28c:	f383 8811 	msr	BASEPRI, r3
 800f290:	f3bf 8f6f 	isb	sy
 800f294:	f3bf 8f4f 	dsb	sy
 800f298:	61bb      	str	r3, [r7, #24]
}
 800f29a:	bf00      	nop
 800f29c:	e7fe      	b.n	800f29c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800f29e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800f2a0:	683b      	ldr	r3, [r7, #0]
 800f2a2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800f2a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2a6:	2b00      	cmp	r3, #0
 800f2a8:	d00d      	beq.n	800f2c6 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800f2aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2ac:	2201      	movs	r2, #1
 800f2ae:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800f2b2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800f2b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2b8:	9300      	str	r3, [sp, #0]
 800f2ba:	4613      	mov	r3, r2
 800f2bc:	687a      	ldr	r2, [r7, #4]
 800f2be:	68b9      	ldr	r1, [r7, #8]
 800f2c0:	68f8      	ldr	r0, [r7, #12]
 800f2c2:	f000 f83f 	bl	800f344 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800f2c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800f2c8:	4618      	mov	r0, r3
 800f2ca:	3730      	adds	r7, #48	; 0x30
 800f2cc:	46bd      	mov	sp, r7
 800f2ce:	bd80      	pop	{r7, pc}

0800f2d0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800f2d0:	b580      	push	{r7, lr}
 800f2d2:	b08a      	sub	sp, #40	; 0x28
 800f2d4:	af02      	add	r7, sp, #8
 800f2d6:	60f8      	str	r0, [r7, #12]
 800f2d8:	60b9      	str	r1, [r7, #8]
 800f2da:	4613      	mov	r3, r2
 800f2dc:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800f2de:	68fb      	ldr	r3, [r7, #12]
 800f2e0:	2b00      	cmp	r3, #0
 800f2e2:	d10a      	bne.n	800f2fa <xQueueGenericCreate+0x2a>
	__asm volatile
 800f2e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f2e8:	f383 8811 	msr	BASEPRI, r3
 800f2ec:	f3bf 8f6f 	isb	sy
 800f2f0:	f3bf 8f4f 	dsb	sy
 800f2f4:	613b      	str	r3, [r7, #16]
}
 800f2f6:	bf00      	nop
 800f2f8:	e7fe      	b.n	800f2f8 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f2fa:	68fb      	ldr	r3, [r7, #12]
 800f2fc:	68ba      	ldr	r2, [r7, #8]
 800f2fe:	fb02 f303 	mul.w	r3, r2, r3
 800f302:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800f304:	69fb      	ldr	r3, [r7, #28]
 800f306:	3350      	adds	r3, #80	; 0x50
 800f308:	4618      	mov	r0, r3
 800f30a:	f002 fc8d 	bl	8011c28 <pvPortMalloc>
 800f30e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800f310:	69bb      	ldr	r3, [r7, #24]
 800f312:	2b00      	cmp	r3, #0
 800f314:	d011      	beq.n	800f33a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800f316:	69bb      	ldr	r3, [r7, #24]
 800f318:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f31a:	697b      	ldr	r3, [r7, #20]
 800f31c:	3350      	adds	r3, #80	; 0x50
 800f31e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800f320:	69bb      	ldr	r3, [r7, #24]
 800f322:	2200      	movs	r2, #0
 800f324:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800f328:	79fa      	ldrb	r2, [r7, #7]
 800f32a:	69bb      	ldr	r3, [r7, #24]
 800f32c:	9300      	str	r3, [sp, #0]
 800f32e:	4613      	mov	r3, r2
 800f330:	697a      	ldr	r2, [r7, #20]
 800f332:	68b9      	ldr	r1, [r7, #8]
 800f334:	68f8      	ldr	r0, [r7, #12]
 800f336:	f000 f805 	bl	800f344 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800f33a:	69bb      	ldr	r3, [r7, #24]
	}
 800f33c:	4618      	mov	r0, r3
 800f33e:	3720      	adds	r7, #32
 800f340:	46bd      	mov	sp, r7
 800f342:	bd80      	pop	{r7, pc}

0800f344 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800f344:	b580      	push	{r7, lr}
 800f346:	b084      	sub	sp, #16
 800f348:	af00      	add	r7, sp, #0
 800f34a:	60f8      	str	r0, [r7, #12]
 800f34c:	60b9      	str	r1, [r7, #8]
 800f34e:	607a      	str	r2, [r7, #4]
 800f350:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800f352:	68bb      	ldr	r3, [r7, #8]
 800f354:	2b00      	cmp	r3, #0
 800f356:	d103      	bne.n	800f360 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800f358:	69bb      	ldr	r3, [r7, #24]
 800f35a:	69ba      	ldr	r2, [r7, #24]
 800f35c:	601a      	str	r2, [r3, #0]
 800f35e:	e002      	b.n	800f366 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800f360:	69bb      	ldr	r3, [r7, #24]
 800f362:	687a      	ldr	r2, [r7, #4]
 800f364:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800f366:	69bb      	ldr	r3, [r7, #24]
 800f368:	68fa      	ldr	r2, [r7, #12]
 800f36a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800f36c:	69bb      	ldr	r3, [r7, #24]
 800f36e:	68ba      	ldr	r2, [r7, #8]
 800f370:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800f372:	2101      	movs	r1, #1
 800f374:	69b8      	ldr	r0, [r7, #24]
 800f376:	f7ff fecb 	bl	800f110 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800f37a:	69bb      	ldr	r3, [r7, #24]
 800f37c:	78fa      	ldrb	r2, [r7, #3]
 800f37e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800f382:	bf00      	nop
 800f384:	3710      	adds	r7, #16
 800f386:	46bd      	mov	sp, r7
 800f388:	bd80      	pop	{r7, pc}
	...

0800f38c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800f38c:	b580      	push	{r7, lr}
 800f38e:	b08e      	sub	sp, #56	; 0x38
 800f390:	af00      	add	r7, sp, #0
 800f392:	60f8      	str	r0, [r7, #12]
 800f394:	60b9      	str	r1, [r7, #8]
 800f396:	607a      	str	r2, [r7, #4]
 800f398:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800f39a:	2300      	movs	r3, #0
 800f39c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800f39e:	68fb      	ldr	r3, [r7, #12]
 800f3a0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800f3a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3a4:	2b00      	cmp	r3, #0
 800f3a6:	d10a      	bne.n	800f3be <xQueueGenericSend+0x32>
	__asm volatile
 800f3a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f3ac:	f383 8811 	msr	BASEPRI, r3
 800f3b0:	f3bf 8f6f 	isb	sy
 800f3b4:	f3bf 8f4f 	dsb	sy
 800f3b8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800f3ba:	bf00      	nop
 800f3bc:	e7fe      	b.n	800f3bc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f3be:	68bb      	ldr	r3, [r7, #8]
 800f3c0:	2b00      	cmp	r3, #0
 800f3c2:	d103      	bne.n	800f3cc <xQueueGenericSend+0x40>
 800f3c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f3c8:	2b00      	cmp	r3, #0
 800f3ca:	d101      	bne.n	800f3d0 <xQueueGenericSend+0x44>
 800f3cc:	2301      	movs	r3, #1
 800f3ce:	e000      	b.n	800f3d2 <xQueueGenericSend+0x46>
 800f3d0:	2300      	movs	r3, #0
 800f3d2:	2b00      	cmp	r3, #0
 800f3d4:	d10a      	bne.n	800f3ec <xQueueGenericSend+0x60>
	__asm volatile
 800f3d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f3da:	f383 8811 	msr	BASEPRI, r3
 800f3de:	f3bf 8f6f 	isb	sy
 800f3e2:	f3bf 8f4f 	dsb	sy
 800f3e6:	627b      	str	r3, [r7, #36]	; 0x24
}
 800f3e8:	bf00      	nop
 800f3ea:	e7fe      	b.n	800f3ea <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800f3ec:	683b      	ldr	r3, [r7, #0]
 800f3ee:	2b02      	cmp	r3, #2
 800f3f0:	d103      	bne.n	800f3fa <xQueueGenericSend+0x6e>
 800f3f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f3f6:	2b01      	cmp	r3, #1
 800f3f8:	d101      	bne.n	800f3fe <xQueueGenericSend+0x72>
 800f3fa:	2301      	movs	r3, #1
 800f3fc:	e000      	b.n	800f400 <xQueueGenericSend+0x74>
 800f3fe:	2300      	movs	r3, #0
 800f400:	2b00      	cmp	r3, #0
 800f402:	d10a      	bne.n	800f41a <xQueueGenericSend+0x8e>
	__asm volatile
 800f404:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f408:	f383 8811 	msr	BASEPRI, r3
 800f40c:	f3bf 8f6f 	isb	sy
 800f410:	f3bf 8f4f 	dsb	sy
 800f414:	623b      	str	r3, [r7, #32]
}
 800f416:	bf00      	nop
 800f418:	e7fe      	b.n	800f418 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f41a:	f001 fb85 	bl	8010b28 <xTaskGetSchedulerState>
 800f41e:	4603      	mov	r3, r0
 800f420:	2b00      	cmp	r3, #0
 800f422:	d102      	bne.n	800f42a <xQueueGenericSend+0x9e>
 800f424:	687b      	ldr	r3, [r7, #4]
 800f426:	2b00      	cmp	r3, #0
 800f428:	d101      	bne.n	800f42e <xQueueGenericSend+0xa2>
 800f42a:	2301      	movs	r3, #1
 800f42c:	e000      	b.n	800f430 <xQueueGenericSend+0xa4>
 800f42e:	2300      	movs	r3, #0
 800f430:	2b00      	cmp	r3, #0
 800f432:	d10a      	bne.n	800f44a <xQueueGenericSend+0xbe>
	__asm volatile
 800f434:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f438:	f383 8811 	msr	BASEPRI, r3
 800f43c:	f3bf 8f6f 	isb	sy
 800f440:	f3bf 8f4f 	dsb	sy
 800f444:	61fb      	str	r3, [r7, #28]
}
 800f446:	bf00      	nop
 800f448:	e7fe      	b.n	800f448 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800f44a:	f002 facb 	bl	80119e4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800f44e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f450:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f452:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f454:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f456:	429a      	cmp	r2, r3
 800f458:	d302      	bcc.n	800f460 <xQueueGenericSend+0xd4>
 800f45a:	683b      	ldr	r3, [r7, #0]
 800f45c:	2b02      	cmp	r3, #2
 800f45e:	d129      	bne.n	800f4b4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800f460:	683a      	ldr	r2, [r7, #0]
 800f462:	68b9      	ldr	r1, [r7, #8]
 800f464:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f466:	f000 faae 	bl	800f9c6 <prvCopyDataToQueue>
 800f46a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f46c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f46e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f470:	2b00      	cmp	r3, #0
 800f472:	d010      	beq.n	800f496 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f474:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f476:	3324      	adds	r3, #36	; 0x24
 800f478:	4618      	mov	r0, r3
 800f47a:	f001 f993 	bl	80107a4 <xTaskRemoveFromEventList>
 800f47e:	4603      	mov	r3, r0
 800f480:	2b00      	cmp	r3, #0
 800f482:	d013      	beq.n	800f4ac <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800f484:	4b3f      	ldr	r3, [pc, #252]	; (800f584 <xQueueGenericSend+0x1f8>)
 800f486:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f48a:	601a      	str	r2, [r3, #0]
 800f48c:	f3bf 8f4f 	dsb	sy
 800f490:	f3bf 8f6f 	isb	sy
 800f494:	e00a      	b.n	800f4ac <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800f496:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f498:	2b00      	cmp	r3, #0
 800f49a:	d007      	beq.n	800f4ac <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800f49c:	4b39      	ldr	r3, [pc, #228]	; (800f584 <xQueueGenericSend+0x1f8>)
 800f49e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f4a2:	601a      	str	r2, [r3, #0]
 800f4a4:	f3bf 8f4f 	dsb	sy
 800f4a8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800f4ac:	f002 faca 	bl	8011a44 <vPortExitCritical>
				return pdPASS;
 800f4b0:	2301      	movs	r3, #1
 800f4b2:	e063      	b.n	800f57c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800f4b4:	687b      	ldr	r3, [r7, #4]
 800f4b6:	2b00      	cmp	r3, #0
 800f4b8:	d103      	bne.n	800f4c2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800f4ba:	f002 fac3 	bl	8011a44 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800f4be:	2300      	movs	r3, #0
 800f4c0:	e05c      	b.n	800f57c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800f4c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f4c4:	2b00      	cmp	r3, #0
 800f4c6:	d106      	bne.n	800f4d6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800f4c8:	f107 0314 	add.w	r3, r7, #20
 800f4cc:	4618      	mov	r0, r3
 800f4ce:	f001 f9cd 	bl	801086c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800f4d2:	2301      	movs	r3, #1
 800f4d4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800f4d6:	f002 fab5 	bl	8011a44 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800f4da:	f000 ff1d 	bl	8010318 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f4de:	f002 fa81 	bl	80119e4 <vPortEnterCritical>
 800f4e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4e4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f4e8:	b25b      	sxtb	r3, r3
 800f4ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f4ee:	d103      	bne.n	800f4f8 <xQueueGenericSend+0x16c>
 800f4f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4f2:	2200      	movs	r2, #0
 800f4f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f4f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4fa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f4fe:	b25b      	sxtb	r3, r3
 800f500:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f504:	d103      	bne.n	800f50e <xQueueGenericSend+0x182>
 800f506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f508:	2200      	movs	r2, #0
 800f50a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f50e:	f002 fa99 	bl	8011a44 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f512:	1d3a      	adds	r2, r7, #4
 800f514:	f107 0314 	add.w	r3, r7, #20
 800f518:	4611      	mov	r1, r2
 800f51a:	4618      	mov	r0, r3
 800f51c:	f001 f9bc 	bl	8010898 <xTaskCheckForTimeOut>
 800f520:	4603      	mov	r3, r0
 800f522:	2b00      	cmp	r3, #0
 800f524:	d124      	bne.n	800f570 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800f526:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f528:	f000 fb45 	bl	800fbb6 <prvIsQueueFull>
 800f52c:	4603      	mov	r3, r0
 800f52e:	2b00      	cmp	r3, #0
 800f530:	d018      	beq.n	800f564 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800f532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f534:	3310      	adds	r3, #16
 800f536:	687a      	ldr	r2, [r7, #4]
 800f538:	4611      	mov	r1, r2
 800f53a:	4618      	mov	r0, r3
 800f53c:	f001 f8e2 	bl	8010704 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800f540:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f542:	f000 fad0 	bl	800fae6 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800f546:	f000 fef5 	bl	8010334 <xTaskResumeAll>
 800f54a:	4603      	mov	r3, r0
 800f54c:	2b00      	cmp	r3, #0
 800f54e:	f47f af7c 	bne.w	800f44a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800f552:	4b0c      	ldr	r3, [pc, #48]	; (800f584 <xQueueGenericSend+0x1f8>)
 800f554:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f558:	601a      	str	r2, [r3, #0]
 800f55a:	f3bf 8f4f 	dsb	sy
 800f55e:	f3bf 8f6f 	isb	sy
 800f562:	e772      	b.n	800f44a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800f564:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f566:	f000 fabe 	bl	800fae6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f56a:	f000 fee3 	bl	8010334 <xTaskResumeAll>
 800f56e:	e76c      	b.n	800f44a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800f570:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f572:	f000 fab8 	bl	800fae6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f576:	f000 fedd 	bl	8010334 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800f57a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800f57c:	4618      	mov	r0, r3
 800f57e:	3738      	adds	r7, #56	; 0x38
 800f580:	46bd      	mov	sp, r7
 800f582:	bd80      	pop	{r7, pc}
 800f584:	e000ed04 	.word	0xe000ed04

0800f588 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800f588:	b580      	push	{r7, lr}
 800f58a:	b090      	sub	sp, #64	; 0x40
 800f58c:	af00      	add	r7, sp, #0
 800f58e:	60f8      	str	r0, [r7, #12]
 800f590:	60b9      	str	r1, [r7, #8]
 800f592:	607a      	str	r2, [r7, #4]
 800f594:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800f596:	68fb      	ldr	r3, [r7, #12]
 800f598:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800f59a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f59c:	2b00      	cmp	r3, #0
 800f59e:	d10a      	bne.n	800f5b6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800f5a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f5a4:	f383 8811 	msr	BASEPRI, r3
 800f5a8:	f3bf 8f6f 	isb	sy
 800f5ac:	f3bf 8f4f 	dsb	sy
 800f5b0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800f5b2:	bf00      	nop
 800f5b4:	e7fe      	b.n	800f5b4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f5b6:	68bb      	ldr	r3, [r7, #8]
 800f5b8:	2b00      	cmp	r3, #0
 800f5ba:	d103      	bne.n	800f5c4 <xQueueGenericSendFromISR+0x3c>
 800f5bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f5c0:	2b00      	cmp	r3, #0
 800f5c2:	d101      	bne.n	800f5c8 <xQueueGenericSendFromISR+0x40>
 800f5c4:	2301      	movs	r3, #1
 800f5c6:	e000      	b.n	800f5ca <xQueueGenericSendFromISR+0x42>
 800f5c8:	2300      	movs	r3, #0
 800f5ca:	2b00      	cmp	r3, #0
 800f5cc:	d10a      	bne.n	800f5e4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800f5ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f5d2:	f383 8811 	msr	BASEPRI, r3
 800f5d6:	f3bf 8f6f 	isb	sy
 800f5da:	f3bf 8f4f 	dsb	sy
 800f5de:	627b      	str	r3, [r7, #36]	; 0x24
}
 800f5e0:	bf00      	nop
 800f5e2:	e7fe      	b.n	800f5e2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800f5e4:	683b      	ldr	r3, [r7, #0]
 800f5e6:	2b02      	cmp	r3, #2
 800f5e8:	d103      	bne.n	800f5f2 <xQueueGenericSendFromISR+0x6a>
 800f5ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f5ee:	2b01      	cmp	r3, #1
 800f5f0:	d101      	bne.n	800f5f6 <xQueueGenericSendFromISR+0x6e>
 800f5f2:	2301      	movs	r3, #1
 800f5f4:	e000      	b.n	800f5f8 <xQueueGenericSendFromISR+0x70>
 800f5f6:	2300      	movs	r3, #0
 800f5f8:	2b00      	cmp	r3, #0
 800f5fa:	d10a      	bne.n	800f612 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800f5fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f600:	f383 8811 	msr	BASEPRI, r3
 800f604:	f3bf 8f6f 	isb	sy
 800f608:	f3bf 8f4f 	dsb	sy
 800f60c:	623b      	str	r3, [r7, #32]
}
 800f60e:	bf00      	nop
 800f610:	e7fe      	b.n	800f610 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800f612:	f002 fac9 	bl	8011ba8 <vPortValidateInterruptPriority>
	__asm volatile
 800f616:	f3ef 8211 	mrs	r2, BASEPRI
 800f61a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f61e:	f383 8811 	msr	BASEPRI, r3
 800f622:	f3bf 8f6f 	isb	sy
 800f626:	f3bf 8f4f 	dsb	sy
 800f62a:	61fa      	str	r2, [r7, #28]
 800f62c:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 800f62e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800f630:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800f632:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f634:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f636:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f638:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f63a:	429a      	cmp	r2, r3
 800f63c:	d302      	bcc.n	800f644 <xQueueGenericSendFromISR+0xbc>
 800f63e:	683b      	ldr	r3, [r7, #0]
 800f640:	2b02      	cmp	r3, #2
 800f642:	d12f      	bne.n	800f6a4 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800f644:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f646:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f64a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f64e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f650:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f652:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800f654:	683a      	ldr	r2, [r7, #0]
 800f656:	68b9      	ldr	r1, [r7, #8]
 800f658:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800f65a:	f000 f9b4 	bl	800f9c6 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800f65e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800f662:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f666:	d112      	bne.n	800f68e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f668:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f66a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f66c:	2b00      	cmp	r3, #0
 800f66e:	d016      	beq.n	800f69e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f670:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f672:	3324      	adds	r3, #36	; 0x24
 800f674:	4618      	mov	r0, r3
 800f676:	f001 f895 	bl	80107a4 <xTaskRemoveFromEventList>
 800f67a:	4603      	mov	r3, r0
 800f67c:	2b00      	cmp	r3, #0
 800f67e:	d00e      	beq.n	800f69e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800f680:	687b      	ldr	r3, [r7, #4]
 800f682:	2b00      	cmp	r3, #0
 800f684:	d00b      	beq.n	800f69e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800f686:	687b      	ldr	r3, [r7, #4]
 800f688:	2201      	movs	r2, #1
 800f68a:	601a      	str	r2, [r3, #0]
 800f68c:	e007      	b.n	800f69e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800f68e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800f692:	3301      	adds	r3, #1
 800f694:	b2db      	uxtb	r3, r3
 800f696:	b25a      	sxtb	r2, r3
 800f698:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f69a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800f69e:	2301      	movs	r3, #1
 800f6a0:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800f6a2:	e001      	b.n	800f6a8 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800f6a4:	2300      	movs	r3, #0
 800f6a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f6a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f6aa:	617b      	str	r3, [r7, #20]
	__asm volatile
 800f6ac:	697b      	ldr	r3, [r7, #20]
 800f6ae:	f383 8811 	msr	BASEPRI, r3
}
 800f6b2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800f6b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800f6b6:	4618      	mov	r0, r3
 800f6b8:	3740      	adds	r7, #64	; 0x40
 800f6ba:	46bd      	mov	sp, r7
 800f6bc:	bd80      	pop	{r7, pc}
	...

0800f6c0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800f6c0:	b580      	push	{r7, lr}
 800f6c2:	b08c      	sub	sp, #48	; 0x30
 800f6c4:	af00      	add	r7, sp, #0
 800f6c6:	60f8      	str	r0, [r7, #12]
 800f6c8:	60b9      	str	r1, [r7, #8]
 800f6ca:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800f6cc:	2300      	movs	r3, #0
 800f6ce:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800f6d0:	68fb      	ldr	r3, [r7, #12]
 800f6d2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800f6d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f6d6:	2b00      	cmp	r3, #0
 800f6d8:	d10a      	bne.n	800f6f0 <xQueueReceive+0x30>
	__asm volatile
 800f6da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f6de:	f383 8811 	msr	BASEPRI, r3
 800f6e2:	f3bf 8f6f 	isb	sy
 800f6e6:	f3bf 8f4f 	dsb	sy
 800f6ea:	623b      	str	r3, [r7, #32]
}
 800f6ec:	bf00      	nop
 800f6ee:	e7fe      	b.n	800f6ee <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f6f0:	68bb      	ldr	r3, [r7, #8]
 800f6f2:	2b00      	cmp	r3, #0
 800f6f4:	d103      	bne.n	800f6fe <xQueueReceive+0x3e>
 800f6f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f6f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f6fa:	2b00      	cmp	r3, #0
 800f6fc:	d101      	bne.n	800f702 <xQueueReceive+0x42>
 800f6fe:	2301      	movs	r3, #1
 800f700:	e000      	b.n	800f704 <xQueueReceive+0x44>
 800f702:	2300      	movs	r3, #0
 800f704:	2b00      	cmp	r3, #0
 800f706:	d10a      	bne.n	800f71e <xQueueReceive+0x5e>
	__asm volatile
 800f708:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f70c:	f383 8811 	msr	BASEPRI, r3
 800f710:	f3bf 8f6f 	isb	sy
 800f714:	f3bf 8f4f 	dsb	sy
 800f718:	61fb      	str	r3, [r7, #28]
}
 800f71a:	bf00      	nop
 800f71c:	e7fe      	b.n	800f71c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f71e:	f001 fa03 	bl	8010b28 <xTaskGetSchedulerState>
 800f722:	4603      	mov	r3, r0
 800f724:	2b00      	cmp	r3, #0
 800f726:	d102      	bne.n	800f72e <xQueueReceive+0x6e>
 800f728:	687b      	ldr	r3, [r7, #4]
 800f72a:	2b00      	cmp	r3, #0
 800f72c:	d101      	bne.n	800f732 <xQueueReceive+0x72>
 800f72e:	2301      	movs	r3, #1
 800f730:	e000      	b.n	800f734 <xQueueReceive+0x74>
 800f732:	2300      	movs	r3, #0
 800f734:	2b00      	cmp	r3, #0
 800f736:	d10a      	bne.n	800f74e <xQueueReceive+0x8e>
	__asm volatile
 800f738:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f73c:	f383 8811 	msr	BASEPRI, r3
 800f740:	f3bf 8f6f 	isb	sy
 800f744:	f3bf 8f4f 	dsb	sy
 800f748:	61bb      	str	r3, [r7, #24]
}
 800f74a:	bf00      	nop
 800f74c:	e7fe      	b.n	800f74c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800f74e:	f002 f949 	bl	80119e4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f752:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f754:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f756:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f75a:	2b00      	cmp	r3, #0
 800f75c:	d01f      	beq.n	800f79e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800f75e:	68b9      	ldr	r1, [r7, #8]
 800f760:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f762:	f000 f99a 	bl	800fa9a <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800f766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f768:	1e5a      	subs	r2, r3, #1
 800f76a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f76c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f76e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f770:	691b      	ldr	r3, [r3, #16]
 800f772:	2b00      	cmp	r3, #0
 800f774:	d00f      	beq.n	800f796 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f776:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f778:	3310      	adds	r3, #16
 800f77a:	4618      	mov	r0, r3
 800f77c:	f001 f812 	bl	80107a4 <xTaskRemoveFromEventList>
 800f780:	4603      	mov	r3, r0
 800f782:	2b00      	cmp	r3, #0
 800f784:	d007      	beq.n	800f796 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800f786:	4b3d      	ldr	r3, [pc, #244]	; (800f87c <xQueueReceive+0x1bc>)
 800f788:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f78c:	601a      	str	r2, [r3, #0]
 800f78e:	f3bf 8f4f 	dsb	sy
 800f792:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800f796:	f002 f955 	bl	8011a44 <vPortExitCritical>
				return pdPASS;
 800f79a:	2301      	movs	r3, #1
 800f79c:	e069      	b.n	800f872 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800f79e:	687b      	ldr	r3, [r7, #4]
 800f7a0:	2b00      	cmp	r3, #0
 800f7a2:	d103      	bne.n	800f7ac <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800f7a4:	f002 f94e 	bl	8011a44 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800f7a8:	2300      	movs	r3, #0
 800f7aa:	e062      	b.n	800f872 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800f7ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f7ae:	2b00      	cmp	r3, #0
 800f7b0:	d106      	bne.n	800f7c0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800f7b2:	f107 0310 	add.w	r3, r7, #16
 800f7b6:	4618      	mov	r0, r3
 800f7b8:	f001 f858 	bl	801086c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800f7bc:	2301      	movs	r3, #1
 800f7be:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800f7c0:	f002 f940 	bl	8011a44 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800f7c4:	f000 fda8 	bl	8010318 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f7c8:	f002 f90c 	bl	80119e4 <vPortEnterCritical>
 800f7cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f7ce:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f7d2:	b25b      	sxtb	r3, r3
 800f7d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f7d8:	d103      	bne.n	800f7e2 <xQueueReceive+0x122>
 800f7da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f7dc:	2200      	movs	r2, #0
 800f7de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f7e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f7e4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f7e8:	b25b      	sxtb	r3, r3
 800f7ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f7ee:	d103      	bne.n	800f7f8 <xQueueReceive+0x138>
 800f7f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f7f2:	2200      	movs	r2, #0
 800f7f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f7f8:	f002 f924 	bl	8011a44 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f7fc:	1d3a      	adds	r2, r7, #4
 800f7fe:	f107 0310 	add.w	r3, r7, #16
 800f802:	4611      	mov	r1, r2
 800f804:	4618      	mov	r0, r3
 800f806:	f001 f847 	bl	8010898 <xTaskCheckForTimeOut>
 800f80a:	4603      	mov	r3, r0
 800f80c:	2b00      	cmp	r3, #0
 800f80e:	d123      	bne.n	800f858 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f810:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f812:	f000 f9ba 	bl	800fb8a <prvIsQueueEmpty>
 800f816:	4603      	mov	r3, r0
 800f818:	2b00      	cmp	r3, #0
 800f81a:	d017      	beq.n	800f84c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800f81c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f81e:	3324      	adds	r3, #36	; 0x24
 800f820:	687a      	ldr	r2, [r7, #4]
 800f822:	4611      	mov	r1, r2
 800f824:	4618      	mov	r0, r3
 800f826:	f000 ff6d 	bl	8010704 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800f82a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f82c:	f000 f95b 	bl	800fae6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800f830:	f000 fd80 	bl	8010334 <xTaskResumeAll>
 800f834:	4603      	mov	r3, r0
 800f836:	2b00      	cmp	r3, #0
 800f838:	d189      	bne.n	800f74e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800f83a:	4b10      	ldr	r3, [pc, #64]	; (800f87c <xQueueReceive+0x1bc>)
 800f83c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f840:	601a      	str	r2, [r3, #0]
 800f842:	f3bf 8f4f 	dsb	sy
 800f846:	f3bf 8f6f 	isb	sy
 800f84a:	e780      	b.n	800f74e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800f84c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f84e:	f000 f94a 	bl	800fae6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f852:	f000 fd6f 	bl	8010334 <xTaskResumeAll>
 800f856:	e77a      	b.n	800f74e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800f858:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f85a:	f000 f944 	bl	800fae6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f85e:	f000 fd69 	bl	8010334 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f862:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f864:	f000 f991 	bl	800fb8a <prvIsQueueEmpty>
 800f868:	4603      	mov	r3, r0
 800f86a:	2b00      	cmp	r3, #0
 800f86c:	f43f af6f 	beq.w	800f74e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800f870:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800f872:	4618      	mov	r0, r3
 800f874:	3730      	adds	r7, #48	; 0x30
 800f876:	46bd      	mov	sp, r7
 800f878:	bd80      	pop	{r7, pc}
 800f87a:	bf00      	nop
 800f87c:	e000ed04 	.word	0xe000ed04

0800f880 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800f880:	b580      	push	{r7, lr}
 800f882:	b08e      	sub	sp, #56	; 0x38
 800f884:	af00      	add	r7, sp, #0
 800f886:	60f8      	str	r0, [r7, #12]
 800f888:	60b9      	str	r1, [r7, #8]
 800f88a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800f88c:	68fb      	ldr	r3, [r7, #12]
 800f88e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800f890:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f892:	2b00      	cmp	r3, #0
 800f894:	d10a      	bne.n	800f8ac <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800f896:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f89a:	f383 8811 	msr	BASEPRI, r3
 800f89e:	f3bf 8f6f 	isb	sy
 800f8a2:	f3bf 8f4f 	dsb	sy
 800f8a6:	623b      	str	r3, [r7, #32]
}
 800f8a8:	bf00      	nop
 800f8aa:	e7fe      	b.n	800f8aa <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f8ac:	68bb      	ldr	r3, [r7, #8]
 800f8ae:	2b00      	cmp	r3, #0
 800f8b0:	d103      	bne.n	800f8ba <xQueueReceiveFromISR+0x3a>
 800f8b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f8b6:	2b00      	cmp	r3, #0
 800f8b8:	d101      	bne.n	800f8be <xQueueReceiveFromISR+0x3e>
 800f8ba:	2301      	movs	r3, #1
 800f8bc:	e000      	b.n	800f8c0 <xQueueReceiveFromISR+0x40>
 800f8be:	2300      	movs	r3, #0
 800f8c0:	2b00      	cmp	r3, #0
 800f8c2:	d10a      	bne.n	800f8da <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800f8c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f8c8:	f383 8811 	msr	BASEPRI, r3
 800f8cc:	f3bf 8f6f 	isb	sy
 800f8d0:	f3bf 8f4f 	dsb	sy
 800f8d4:	61fb      	str	r3, [r7, #28]
}
 800f8d6:	bf00      	nop
 800f8d8:	e7fe      	b.n	800f8d8 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800f8da:	f002 f965 	bl	8011ba8 <vPortValidateInterruptPriority>
	__asm volatile
 800f8de:	f3ef 8211 	mrs	r2, BASEPRI
 800f8e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f8e6:	f383 8811 	msr	BASEPRI, r3
 800f8ea:	f3bf 8f6f 	isb	sy
 800f8ee:	f3bf 8f4f 	dsb	sy
 800f8f2:	61ba      	str	r2, [r7, #24]
 800f8f4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800f8f6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800f8f8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f8fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f8fe:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f900:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f902:	2b00      	cmp	r3, #0
 800f904:	d02f      	beq.n	800f966 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800f906:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f908:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f90c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800f910:	68b9      	ldr	r1, [r7, #8]
 800f912:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f914:	f000 f8c1 	bl	800fa9a <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800f918:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f91a:	1e5a      	subs	r2, r3, #1
 800f91c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f91e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800f920:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800f924:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f928:	d112      	bne.n	800f950 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f92a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f92c:	691b      	ldr	r3, [r3, #16]
 800f92e:	2b00      	cmp	r3, #0
 800f930:	d016      	beq.n	800f960 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f932:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f934:	3310      	adds	r3, #16
 800f936:	4618      	mov	r0, r3
 800f938:	f000 ff34 	bl	80107a4 <xTaskRemoveFromEventList>
 800f93c:	4603      	mov	r3, r0
 800f93e:	2b00      	cmp	r3, #0
 800f940:	d00e      	beq.n	800f960 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800f942:	687b      	ldr	r3, [r7, #4]
 800f944:	2b00      	cmp	r3, #0
 800f946:	d00b      	beq.n	800f960 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800f948:	687b      	ldr	r3, [r7, #4]
 800f94a:	2201      	movs	r2, #1
 800f94c:	601a      	str	r2, [r3, #0]
 800f94e:	e007      	b.n	800f960 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800f950:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f954:	3301      	adds	r3, #1
 800f956:	b2db      	uxtb	r3, r3
 800f958:	b25a      	sxtb	r2, r3
 800f95a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f95c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800f960:	2301      	movs	r3, #1
 800f962:	637b      	str	r3, [r7, #52]	; 0x34
 800f964:	e001      	b.n	800f96a <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800f966:	2300      	movs	r3, #0
 800f968:	637b      	str	r3, [r7, #52]	; 0x34
 800f96a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f96c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800f96e:	693b      	ldr	r3, [r7, #16]
 800f970:	f383 8811 	msr	BASEPRI, r3
}
 800f974:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800f976:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800f978:	4618      	mov	r0, r3
 800f97a:	3738      	adds	r7, #56	; 0x38
 800f97c:	46bd      	mov	sp, r7
 800f97e:	bd80      	pop	{r7, pc}

0800f980 <uxQueueSpacesAvailable>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueSpacesAvailable( const QueueHandle_t xQueue )
{
 800f980:	b580      	push	{r7, lr}
 800f982:	b086      	sub	sp, #24
 800f984:	af00      	add	r7, sp, #0
 800f986:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 800f988:	687b      	ldr	r3, [r7, #4]
 800f98a:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 800f98c:	697b      	ldr	r3, [r7, #20]
 800f98e:	2b00      	cmp	r3, #0
 800f990:	d10a      	bne.n	800f9a8 <uxQueueSpacesAvailable+0x28>
	__asm volatile
 800f992:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f996:	f383 8811 	msr	BASEPRI, r3
 800f99a:	f3bf 8f6f 	isb	sy
 800f99e:	f3bf 8f4f 	dsb	sy
 800f9a2:	60fb      	str	r3, [r7, #12]
}
 800f9a4:	bf00      	nop
 800f9a6:	e7fe      	b.n	800f9a6 <uxQueueSpacesAvailable+0x26>

	taskENTER_CRITICAL();
 800f9a8:	f002 f81c 	bl	80119e4 <vPortEnterCritical>
	{
		uxReturn = pxQueue->uxLength - pxQueue->uxMessagesWaiting;
 800f9ac:	697b      	ldr	r3, [r7, #20]
 800f9ae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800f9b0:	697b      	ldr	r3, [r7, #20]
 800f9b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f9b4:	1ad3      	subs	r3, r2, r3
 800f9b6:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 800f9b8:	f002 f844 	bl	8011a44 <vPortExitCritical>

	return uxReturn;
 800f9bc:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800f9be:	4618      	mov	r0, r3
 800f9c0:	3718      	adds	r7, #24
 800f9c2:	46bd      	mov	sp, r7
 800f9c4:	bd80      	pop	{r7, pc}

0800f9c6 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800f9c6:	b580      	push	{r7, lr}
 800f9c8:	b086      	sub	sp, #24
 800f9ca:	af00      	add	r7, sp, #0
 800f9cc:	60f8      	str	r0, [r7, #12]
 800f9ce:	60b9      	str	r1, [r7, #8]
 800f9d0:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800f9d2:	2300      	movs	r3, #0
 800f9d4:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f9d6:	68fb      	ldr	r3, [r7, #12]
 800f9d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f9da:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800f9dc:	68fb      	ldr	r3, [r7, #12]
 800f9de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f9e0:	2b00      	cmp	r3, #0
 800f9e2:	d10d      	bne.n	800fa00 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f9e4:	68fb      	ldr	r3, [r7, #12]
 800f9e6:	681b      	ldr	r3, [r3, #0]
 800f9e8:	2b00      	cmp	r3, #0
 800f9ea:	d14d      	bne.n	800fa88 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800f9ec:	68fb      	ldr	r3, [r7, #12]
 800f9ee:	689b      	ldr	r3, [r3, #8]
 800f9f0:	4618      	mov	r0, r3
 800f9f2:	f001 f8b7 	bl	8010b64 <xTaskPriorityDisinherit>
 800f9f6:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800f9f8:	68fb      	ldr	r3, [r7, #12]
 800f9fa:	2200      	movs	r2, #0
 800f9fc:	609a      	str	r2, [r3, #8]
 800f9fe:	e043      	b.n	800fa88 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800fa00:	687b      	ldr	r3, [r7, #4]
 800fa02:	2b00      	cmp	r3, #0
 800fa04:	d119      	bne.n	800fa3a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800fa06:	68fb      	ldr	r3, [r7, #12]
 800fa08:	6858      	ldr	r0, [r3, #4]
 800fa0a:	68fb      	ldr	r3, [r7, #12]
 800fa0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fa0e:	461a      	mov	r2, r3
 800fa10:	68b9      	ldr	r1, [r7, #8]
 800fa12:	f002 fc56 	bl	80122c2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800fa16:	68fb      	ldr	r3, [r7, #12]
 800fa18:	685a      	ldr	r2, [r3, #4]
 800fa1a:	68fb      	ldr	r3, [r7, #12]
 800fa1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fa1e:	441a      	add	r2, r3
 800fa20:	68fb      	ldr	r3, [r7, #12]
 800fa22:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800fa24:	68fb      	ldr	r3, [r7, #12]
 800fa26:	685a      	ldr	r2, [r3, #4]
 800fa28:	68fb      	ldr	r3, [r7, #12]
 800fa2a:	689b      	ldr	r3, [r3, #8]
 800fa2c:	429a      	cmp	r2, r3
 800fa2e:	d32b      	bcc.n	800fa88 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800fa30:	68fb      	ldr	r3, [r7, #12]
 800fa32:	681a      	ldr	r2, [r3, #0]
 800fa34:	68fb      	ldr	r3, [r7, #12]
 800fa36:	605a      	str	r2, [r3, #4]
 800fa38:	e026      	b.n	800fa88 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800fa3a:	68fb      	ldr	r3, [r7, #12]
 800fa3c:	68d8      	ldr	r0, [r3, #12]
 800fa3e:	68fb      	ldr	r3, [r7, #12]
 800fa40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fa42:	461a      	mov	r2, r3
 800fa44:	68b9      	ldr	r1, [r7, #8]
 800fa46:	f002 fc3c 	bl	80122c2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800fa4a:	68fb      	ldr	r3, [r7, #12]
 800fa4c:	68da      	ldr	r2, [r3, #12]
 800fa4e:	68fb      	ldr	r3, [r7, #12]
 800fa50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fa52:	425b      	negs	r3, r3
 800fa54:	441a      	add	r2, r3
 800fa56:	68fb      	ldr	r3, [r7, #12]
 800fa58:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800fa5a:	68fb      	ldr	r3, [r7, #12]
 800fa5c:	68da      	ldr	r2, [r3, #12]
 800fa5e:	68fb      	ldr	r3, [r7, #12]
 800fa60:	681b      	ldr	r3, [r3, #0]
 800fa62:	429a      	cmp	r2, r3
 800fa64:	d207      	bcs.n	800fa76 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800fa66:	68fb      	ldr	r3, [r7, #12]
 800fa68:	689a      	ldr	r2, [r3, #8]
 800fa6a:	68fb      	ldr	r3, [r7, #12]
 800fa6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fa6e:	425b      	negs	r3, r3
 800fa70:	441a      	add	r2, r3
 800fa72:	68fb      	ldr	r3, [r7, #12]
 800fa74:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800fa76:	687b      	ldr	r3, [r7, #4]
 800fa78:	2b02      	cmp	r3, #2
 800fa7a:	d105      	bne.n	800fa88 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800fa7c:	693b      	ldr	r3, [r7, #16]
 800fa7e:	2b00      	cmp	r3, #0
 800fa80:	d002      	beq.n	800fa88 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800fa82:	693b      	ldr	r3, [r7, #16]
 800fa84:	3b01      	subs	r3, #1
 800fa86:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800fa88:	693b      	ldr	r3, [r7, #16]
 800fa8a:	1c5a      	adds	r2, r3, #1
 800fa8c:	68fb      	ldr	r3, [r7, #12]
 800fa8e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800fa90:	697b      	ldr	r3, [r7, #20]
}
 800fa92:	4618      	mov	r0, r3
 800fa94:	3718      	adds	r7, #24
 800fa96:	46bd      	mov	sp, r7
 800fa98:	bd80      	pop	{r7, pc}

0800fa9a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800fa9a:	b580      	push	{r7, lr}
 800fa9c:	b082      	sub	sp, #8
 800fa9e:	af00      	add	r7, sp, #0
 800faa0:	6078      	str	r0, [r7, #4]
 800faa2:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800faa4:	687b      	ldr	r3, [r7, #4]
 800faa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800faa8:	2b00      	cmp	r3, #0
 800faaa:	d018      	beq.n	800fade <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800faac:	687b      	ldr	r3, [r7, #4]
 800faae:	68da      	ldr	r2, [r3, #12]
 800fab0:	687b      	ldr	r3, [r7, #4]
 800fab2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fab4:	441a      	add	r2, r3
 800fab6:	687b      	ldr	r3, [r7, #4]
 800fab8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800faba:	687b      	ldr	r3, [r7, #4]
 800fabc:	68da      	ldr	r2, [r3, #12]
 800fabe:	687b      	ldr	r3, [r7, #4]
 800fac0:	689b      	ldr	r3, [r3, #8]
 800fac2:	429a      	cmp	r2, r3
 800fac4:	d303      	bcc.n	800face <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800fac6:	687b      	ldr	r3, [r7, #4]
 800fac8:	681a      	ldr	r2, [r3, #0]
 800faca:	687b      	ldr	r3, [r7, #4]
 800facc:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800face:	687b      	ldr	r3, [r7, #4]
 800fad0:	68d9      	ldr	r1, [r3, #12]
 800fad2:	687b      	ldr	r3, [r7, #4]
 800fad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fad6:	461a      	mov	r2, r3
 800fad8:	6838      	ldr	r0, [r7, #0]
 800fada:	f002 fbf2 	bl	80122c2 <memcpy>
	}
}
 800fade:	bf00      	nop
 800fae0:	3708      	adds	r7, #8
 800fae2:	46bd      	mov	sp, r7
 800fae4:	bd80      	pop	{r7, pc}

0800fae6 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800fae6:	b580      	push	{r7, lr}
 800fae8:	b084      	sub	sp, #16
 800faea:	af00      	add	r7, sp, #0
 800faec:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800faee:	f001 ff79 	bl	80119e4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800faf2:	687b      	ldr	r3, [r7, #4]
 800faf4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800faf8:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800fafa:	e011      	b.n	800fb20 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800fafc:	687b      	ldr	r3, [r7, #4]
 800fafe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fb00:	2b00      	cmp	r3, #0
 800fb02:	d012      	beq.n	800fb2a <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800fb04:	687b      	ldr	r3, [r7, #4]
 800fb06:	3324      	adds	r3, #36	; 0x24
 800fb08:	4618      	mov	r0, r3
 800fb0a:	f000 fe4b 	bl	80107a4 <xTaskRemoveFromEventList>
 800fb0e:	4603      	mov	r3, r0
 800fb10:	2b00      	cmp	r3, #0
 800fb12:	d001      	beq.n	800fb18 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800fb14:	f000 ff22 	bl	801095c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800fb18:	7bfb      	ldrb	r3, [r7, #15]
 800fb1a:	3b01      	subs	r3, #1
 800fb1c:	b2db      	uxtb	r3, r3
 800fb1e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800fb20:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fb24:	2b00      	cmp	r3, #0
 800fb26:	dce9      	bgt.n	800fafc <prvUnlockQueue+0x16>
 800fb28:	e000      	b.n	800fb2c <prvUnlockQueue+0x46>
					break;
 800fb2a:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800fb2c:	687b      	ldr	r3, [r7, #4]
 800fb2e:	22ff      	movs	r2, #255	; 0xff
 800fb30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800fb34:	f001 ff86 	bl	8011a44 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800fb38:	f001 ff54 	bl	80119e4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800fb3c:	687b      	ldr	r3, [r7, #4]
 800fb3e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800fb42:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800fb44:	e011      	b.n	800fb6a <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800fb46:	687b      	ldr	r3, [r7, #4]
 800fb48:	691b      	ldr	r3, [r3, #16]
 800fb4a:	2b00      	cmp	r3, #0
 800fb4c:	d012      	beq.n	800fb74 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800fb4e:	687b      	ldr	r3, [r7, #4]
 800fb50:	3310      	adds	r3, #16
 800fb52:	4618      	mov	r0, r3
 800fb54:	f000 fe26 	bl	80107a4 <xTaskRemoveFromEventList>
 800fb58:	4603      	mov	r3, r0
 800fb5a:	2b00      	cmp	r3, #0
 800fb5c:	d001      	beq.n	800fb62 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800fb5e:	f000 fefd 	bl	801095c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800fb62:	7bbb      	ldrb	r3, [r7, #14]
 800fb64:	3b01      	subs	r3, #1
 800fb66:	b2db      	uxtb	r3, r3
 800fb68:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800fb6a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800fb6e:	2b00      	cmp	r3, #0
 800fb70:	dce9      	bgt.n	800fb46 <prvUnlockQueue+0x60>
 800fb72:	e000      	b.n	800fb76 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800fb74:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800fb76:	687b      	ldr	r3, [r7, #4]
 800fb78:	22ff      	movs	r2, #255	; 0xff
 800fb7a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800fb7e:	f001 ff61 	bl	8011a44 <vPortExitCritical>
}
 800fb82:	bf00      	nop
 800fb84:	3710      	adds	r7, #16
 800fb86:	46bd      	mov	sp, r7
 800fb88:	bd80      	pop	{r7, pc}

0800fb8a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800fb8a:	b580      	push	{r7, lr}
 800fb8c:	b084      	sub	sp, #16
 800fb8e:	af00      	add	r7, sp, #0
 800fb90:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800fb92:	f001 ff27 	bl	80119e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800fb96:	687b      	ldr	r3, [r7, #4]
 800fb98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fb9a:	2b00      	cmp	r3, #0
 800fb9c:	d102      	bne.n	800fba4 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800fb9e:	2301      	movs	r3, #1
 800fba0:	60fb      	str	r3, [r7, #12]
 800fba2:	e001      	b.n	800fba8 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800fba4:	2300      	movs	r3, #0
 800fba6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800fba8:	f001 ff4c 	bl	8011a44 <vPortExitCritical>

	return xReturn;
 800fbac:	68fb      	ldr	r3, [r7, #12]
}
 800fbae:	4618      	mov	r0, r3
 800fbb0:	3710      	adds	r7, #16
 800fbb2:	46bd      	mov	sp, r7
 800fbb4:	bd80      	pop	{r7, pc}

0800fbb6 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800fbb6:	b580      	push	{r7, lr}
 800fbb8:	b084      	sub	sp, #16
 800fbba:	af00      	add	r7, sp, #0
 800fbbc:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800fbbe:	f001 ff11 	bl	80119e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800fbc2:	687b      	ldr	r3, [r7, #4]
 800fbc4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800fbc6:	687b      	ldr	r3, [r7, #4]
 800fbc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fbca:	429a      	cmp	r2, r3
 800fbcc:	d102      	bne.n	800fbd4 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800fbce:	2301      	movs	r3, #1
 800fbd0:	60fb      	str	r3, [r7, #12]
 800fbd2:	e001      	b.n	800fbd8 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800fbd4:	2300      	movs	r3, #0
 800fbd6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800fbd8:	f001 ff34 	bl	8011a44 <vPortExitCritical>

	return xReturn;
 800fbdc:	68fb      	ldr	r3, [r7, #12]
}
 800fbde:	4618      	mov	r0, r3
 800fbe0:	3710      	adds	r7, #16
 800fbe2:	46bd      	mov	sp, r7
 800fbe4:	bd80      	pop	{r7, pc}
	...

0800fbe8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800fbe8:	b480      	push	{r7}
 800fbea:	b085      	sub	sp, #20
 800fbec:	af00      	add	r7, sp, #0
 800fbee:	6078      	str	r0, [r7, #4]
 800fbf0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800fbf2:	2300      	movs	r3, #0
 800fbf4:	60fb      	str	r3, [r7, #12]
 800fbf6:	e014      	b.n	800fc22 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800fbf8:	4a0f      	ldr	r2, [pc, #60]	; (800fc38 <vQueueAddToRegistry+0x50>)
 800fbfa:	68fb      	ldr	r3, [r7, #12]
 800fbfc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800fc00:	2b00      	cmp	r3, #0
 800fc02:	d10b      	bne.n	800fc1c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800fc04:	490c      	ldr	r1, [pc, #48]	; (800fc38 <vQueueAddToRegistry+0x50>)
 800fc06:	68fb      	ldr	r3, [r7, #12]
 800fc08:	683a      	ldr	r2, [r7, #0]
 800fc0a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800fc0e:	4a0a      	ldr	r2, [pc, #40]	; (800fc38 <vQueueAddToRegistry+0x50>)
 800fc10:	68fb      	ldr	r3, [r7, #12]
 800fc12:	00db      	lsls	r3, r3, #3
 800fc14:	4413      	add	r3, r2
 800fc16:	687a      	ldr	r2, [r7, #4]
 800fc18:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800fc1a:	e006      	b.n	800fc2a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800fc1c:	68fb      	ldr	r3, [r7, #12]
 800fc1e:	3301      	adds	r3, #1
 800fc20:	60fb      	str	r3, [r7, #12]
 800fc22:	68fb      	ldr	r3, [r7, #12]
 800fc24:	2b07      	cmp	r3, #7
 800fc26:	d9e7      	bls.n	800fbf8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800fc28:	bf00      	nop
 800fc2a:	bf00      	nop
 800fc2c:	3714      	adds	r7, #20
 800fc2e:	46bd      	mov	sp, r7
 800fc30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc34:	4770      	bx	lr
 800fc36:	bf00      	nop
 800fc38:	20001d88 	.word	0x20001d88

0800fc3c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800fc3c:	b580      	push	{r7, lr}
 800fc3e:	b086      	sub	sp, #24
 800fc40:	af00      	add	r7, sp, #0
 800fc42:	60f8      	str	r0, [r7, #12]
 800fc44:	60b9      	str	r1, [r7, #8]
 800fc46:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800fc48:	68fb      	ldr	r3, [r7, #12]
 800fc4a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800fc4c:	f001 feca 	bl	80119e4 <vPortEnterCritical>
 800fc50:	697b      	ldr	r3, [r7, #20]
 800fc52:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800fc56:	b25b      	sxtb	r3, r3
 800fc58:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fc5c:	d103      	bne.n	800fc66 <vQueueWaitForMessageRestricted+0x2a>
 800fc5e:	697b      	ldr	r3, [r7, #20]
 800fc60:	2200      	movs	r2, #0
 800fc62:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800fc66:	697b      	ldr	r3, [r7, #20]
 800fc68:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800fc6c:	b25b      	sxtb	r3, r3
 800fc6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fc72:	d103      	bne.n	800fc7c <vQueueWaitForMessageRestricted+0x40>
 800fc74:	697b      	ldr	r3, [r7, #20]
 800fc76:	2200      	movs	r2, #0
 800fc78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800fc7c:	f001 fee2 	bl	8011a44 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800fc80:	697b      	ldr	r3, [r7, #20]
 800fc82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fc84:	2b00      	cmp	r3, #0
 800fc86:	d106      	bne.n	800fc96 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800fc88:	697b      	ldr	r3, [r7, #20]
 800fc8a:	3324      	adds	r3, #36	; 0x24
 800fc8c:	687a      	ldr	r2, [r7, #4]
 800fc8e:	68b9      	ldr	r1, [r7, #8]
 800fc90:	4618      	mov	r0, r3
 800fc92:	f000 fd5b 	bl	801074c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800fc96:	6978      	ldr	r0, [r7, #20]
 800fc98:	f7ff ff25 	bl	800fae6 <prvUnlockQueue>
	}
 800fc9c:	bf00      	nop
 800fc9e:	3718      	adds	r7, #24
 800fca0:	46bd      	mov	sp, r7
 800fca2:	bd80      	pop	{r7, pc}

0800fca4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800fca4:	b580      	push	{r7, lr}
 800fca6:	b08e      	sub	sp, #56	; 0x38
 800fca8:	af04      	add	r7, sp, #16
 800fcaa:	60f8      	str	r0, [r7, #12]
 800fcac:	60b9      	str	r1, [r7, #8]
 800fcae:	607a      	str	r2, [r7, #4]
 800fcb0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800fcb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fcb4:	2b00      	cmp	r3, #0
 800fcb6:	d10a      	bne.n	800fcce <xTaskCreateStatic+0x2a>
	__asm volatile
 800fcb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fcbc:	f383 8811 	msr	BASEPRI, r3
 800fcc0:	f3bf 8f6f 	isb	sy
 800fcc4:	f3bf 8f4f 	dsb	sy
 800fcc8:	623b      	str	r3, [r7, #32]
}
 800fcca:	bf00      	nop
 800fccc:	e7fe      	b.n	800fccc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800fcce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fcd0:	2b00      	cmp	r3, #0
 800fcd2:	d10a      	bne.n	800fcea <xTaskCreateStatic+0x46>
	__asm volatile
 800fcd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fcd8:	f383 8811 	msr	BASEPRI, r3
 800fcdc:	f3bf 8f6f 	isb	sy
 800fce0:	f3bf 8f4f 	dsb	sy
 800fce4:	61fb      	str	r3, [r7, #28]
}
 800fce6:	bf00      	nop
 800fce8:	e7fe      	b.n	800fce8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800fcea:	23c0      	movs	r3, #192	; 0xc0
 800fcec:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800fcee:	693b      	ldr	r3, [r7, #16]
 800fcf0:	2bc0      	cmp	r3, #192	; 0xc0
 800fcf2:	d00a      	beq.n	800fd0a <xTaskCreateStatic+0x66>
	__asm volatile
 800fcf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fcf8:	f383 8811 	msr	BASEPRI, r3
 800fcfc:	f3bf 8f6f 	isb	sy
 800fd00:	f3bf 8f4f 	dsb	sy
 800fd04:	61bb      	str	r3, [r7, #24]
}
 800fd06:	bf00      	nop
 800fd08:	e7fe      	b.n	800fd08 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800fd0a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800fd0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd0e:	2b00      	cmp	r3, #0
 800fd10:	d01e      	beq.n	800fd50 <xTaskCreateStatic+0xac>
 800fd12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fd14:	2b00      	cmp	r3, #0
 800fd16:	d01b      	beq.n	800fd50 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800fd18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd1a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800fd1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd1e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fd20:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800fd22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd24:	2202      	movs	r2, #2
 800fd26:	f883 20bd 	strb.w	r2, [r3, #189]	; 0xbd
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800fd2a:	2300      	movs	r3, #0
 800fd2c:	9303      	str	r3, [sp, #12]
 800fd2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd30:	9302      	str	r3, [sp, #8]
 800fd32:	f107 0314 	add.w	r3, r7, #20
 800fd36:	9301      	str	r3, [sp, #4]
 800fd38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd3a:	9300      	str	r3, [sp, #0]
 800fd3c:	683b      	ldr	r3, [r7, #0]
 800fd3e:	687a      	ldr	r2, [r7, #4]
 800fd40:	68b9      	ldr	r1, [r7, #8]
 800fd42:	68f8      	ldr	r0, [r7, #12]
 800fd44:	f000 f850 	bl	800fde8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800fd48:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800fd4a:	f000 f8f7 	bl	800ff3c <prvAddNewTaskToReadyList>
 800fd4e:	e001      	b.n	800fd54 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800fd50:	2300      	movs	r3, #0
 800fd52:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800fd54:	697b      	ldr	r3, [r7, #20]
	}
 800fd56:	4618      	mov	r0, r3
 800fd58:	3728      	adds	r7, #40	; 0x28
 800fd5a:	46bd      	mov	sp, r7
 800fd5c:	bd80      	pop	{r7, pc}

0800fd5e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800fd5e:	b580      	push	{r7, lr}
 800fd60:	b08c      	sub	sp, #48	; 0x30
 800fd62:	af04      	add	r7, sp, #16
 800fd64:	60f8      	str	r0, [r7, #12]
 800fd66:	60b9      	str	r1, [r7, #8]
 800fd68:	603b      	str	r3, [r7, #0]
 800fd6a:	4613      	mov	r3, r2
 800fd6c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800fd6e:	88fb      	ldrh	r3, [r7, #6]
 800fd70:	009b      	lsls	r3, r3, #2
 800fd72:	4618      	mov	r0, r3
 800fd74:	f001 ff58 	bl	8011c28 <pvPortMalloc>
 800fd78:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800fd7a:	697b      	ldr	r3, [r7, #20]
 800fd7c:	2b00      	cmp	r3, #0
 800fd7e:	d00e      	beq.n	800fd9e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800fd80:	20c0      	movs	r0, #192	; 0xc0
 800fd82:	f001 ff51 	bl	8011c28 <pvPortMalloc>
 800fd86:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800fd88:	69fb      	ldr	r3, [r7, #28]
 800fd8a:	2b00      	cmp	r3, #0
 800fd8c:	d003      	beq.n	800fd96 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800fd8e:	69fb      	ldr	r3, [r7, #28]
 800fd90:	697a      	ldr	r2, [r7, #20]
 800fd92:	631a      	str	r2, [r3, #48]	; 0x30
 800fd94:	e005      	b.n	800fda2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800fd96:	6978      	ldr	r0, [r7, #20]
 800fd98:	f002 f812 	bl	8011dc0 <vPortFree>
 800fd9c:	e001      	b.n	800fda2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800fd9e:	2300      	movs	r3, #0
 800fda0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800fda2:	69fb      	ldr	r3, [r7, #28]
 800fda4:	2b00      	cmp	r3, #0
 800fda6:	d017      	beq.n	800fdd8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800fda8:	69fb      	ldr	r3, [r7, #28]
 800fdaa:	2200      	movs	r2, #0
 800fdac:	f883 20bd 	strb.w	r2, [r3, #189]	; 0xbd
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800fdb0:	88fa      	ldrh	r2, [r7, #6]
 800fdb2:	2300      	movs	r3, #0
 800fdb4:	9303      	str	r3, [sp, #12]
 800fdb6:	69fb      	ldr	r3, [r7, #28]
 800fdb8:	9302      	str	r3, [sp, #8]
 800fdba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fdbc:	9301      	str	r3, [sp, #4]
 800fdbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fdc0:	9300      	str	r3, [sp, #0]
 800fdc2:	683b      	ldr	r3, [r7, #0]
 800fdc4:	68b9      	ldr	r1, [r7, #8]
 800fdc6:	68f8      	ldr	r0, [r7, #12]
 800fdc8:	f000 f80e 	bl	800fde8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800fdcc:	69f8      	ldr	r0, [r7, #28]
 800fdce:	f000 f8b5 	bl	800ff3c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800fdd2:	2301      	movs	r3, #1
 800fdd4:	61bb      	str	r3, [r7, #24]
 800fdd6:	e002      	b.n	800fdde <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800fdd8:	f04f 33ff 	mov.w	r3, #4294967295
 800fddc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800fdde:	69bb      	ldr	r3, [r7, #24]
	}
 800fde0:	4618      	mov	r0, r3
 800fde2:	3720      	adds	r7, #32
 800fde4:	46bd      	mov	sp, r7
 800fde6:	bd80      	pop	{r7, pc}

0800fde8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800fde8:	b580      	push	{r7, lr}
 800fdea:	b088      	sub	sp, #32
 800fdec:	af00      	add	r7, sp, #0
 800fdee:	60f8      	str	r0, [r7, #12]
 800fdf0:	60b9      	str	r1, [r7, #8]
 800fdf2:	607a      	str	r2, [r7, #4]
 800fdf4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800fdf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fdf8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800fdfa:	687b      	ldr	r3, [r7, #4]
 800fdfc:	009b      	lsls	r3, r3, #2
 800fdfe:	461a      	mov	r2, r3
 800fe00:	21a5      	movs	r1, #165	; 0xa5
 800fe02:	f002 fa86 	bl	8012312 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800fe06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe08:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800fe0a:	687b      	ldr	r3, [r7, #4]
 800fe0c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800fe10:	3b01      	subs	r3, #1
 800fe12:	009b      	lsls	r3, r3, #2
 800fe14:	4413      	add	r3, r2
 800fe16:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800fe18:	69bb      	ldr	r3, [r7, #24]
 800fe1a:	f023 0307 	bic.w	r3, r3, #7
 800fe1e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800fe20:	69bb      	ldr	r3, [r7, #24]
 800fe22:	f003 0307 	and.w	r3, r3, #7
 800fe26:	2b00      	cmp	r3, #0
 800fe28:	d00a      	beq.n	800fe40 <prvInitialiseNewTask+0x58>
	__asm volatile
 800fe2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe2e:	f383 8811 	msr	BASEPRI, r3
 800fe32:	f3bf 8f6f 	isb	sy
 800fe36:	f3bf 8f4f 	dsb	sy
 800fe3a:	617b      	str	r3, [r7, #20]
}
 800fe3c:	bf00      	nop
 800fe3e:	e7fe      	b.n	800fe3e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800fe40:	68bb      	ldr	r3, [r7, #8]
 800fe42:	2b00      	cmp	r3, #0
 800fe44:	d01f      	beq.n	800fe86 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800fe46:	2300      	movs	r3, #0
 800fe48:	61fb      	str	r3, [r7, #28]
 800fe4a:	e012      	b.n	800fe72 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800fe4c:	68ba      	ldr	r2, [r7, #8]
 800fe4e:	69fb      	ldr	r3, [r7, #28]
 800fe50:	4413      	add	r3, r2
 800fe52:	7819      	ldrb	r1, [r3, #0]
 800fe54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fe56:	69fb      	ldr	r3, [r7, #28]
 800fe58:	4413      	add	r3, r2
 800fe5a:	3334      	adds	r3, #52	; 0x34
 800fe5c:	460a      	mov	r2, r1
 800fe5e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800fe60:	68ba      	ldr	r2, [r7, #8]
 800fe62:	69fb      	ldr	r3, [r7, #28]
 800fe64:	4413      	add	r3, r2
 800fe66:	781b      	ldrb	r3, [r3, #0]
 800fe68:	2b00      	cmp	r3, #0
 800fe6a:	d006      	beq.n	800fe7a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800fe6c:	69fb      	ldr	r3, [r7, #28]
 800fe6e:	3301      	adds	r3, #1
 800fe70:	61fb      	str	r3, [r7, #28]
 800fe72:	69fb      	ldr	r3, [r7, #28]
 800fe74:	2b0f      	cmp	r3, #15
 800fe76:	d9e9      	bls.n	800fe4c <prvInitialiseNewTask+0x64>
 800fe78:	e000      	b.n	800fe7c <prvInitialiseNewTask+0x94>
			{
				break;
 800fe7a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800fe7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe7e:	2200      	movs	r2, #0
 800fe80:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800fe84:	e003      	b.n	800fe8e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800fe86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe88:	2200      	movs	r2, #0
 800fe8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800fe8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe90:	2b37      	cmp	r3, #55	; 0x37
 800fe92:	d901      	bls.n	800fe98 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800fe94:	2337      	movs	r3, #55	; 0x37
 800fe96:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800fe98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe9a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fe9c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800fe9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fea0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fea2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800fea4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fea6:	2200      	movs	r2, #0
 800fea8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800feaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800feac:	3304      	adds	r3, #4
 800feae:	4618      	mov	r0, r3
 800feb0:	f7ff f89a 	bl	800efe8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800feb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800feb6:	3318      	adds	r3, #24
 800feb8:	4618      	mov	r0, r3
 800feba:	f7ff f895 	bl	800efe8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800febe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fec0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fec2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fec4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fec6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800feca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fecc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800fece:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fed0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fed2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 800fed4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fed6:	2200      	movs	r2, #0
 800fed8:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800feda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fedc:	2200      	movs	r2, #0
 800fede:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800fee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fee4:	2200      	movs	r2, #0
 800fee6:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800feea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800feec:	3358      	adds	r3, #88	; 0x58
 800feee:	2260      	movs	r2, #96	; 0x60
 800fef0:	2100      	movs	r1, #0
 800fef2:	4618      	mov	r0, r3
 800fef4:	f002 fa0d 	bl	8012312 <memset>
 800fef8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fefa:	4a0d      	ldr	r2, [pc, #52]	; (800ff30 <prvInitialiseNewTask+0x148>)
 800fefc:	65da      	str	r2, [r3, #92]	; 0x5c
 800fefe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff00:	4a0c      	ldr	r2, [pc, #48]	; (800ff34 <prvInitialiseNewTask+0x14c>)
 800ff02:	661a      	str	r2, [r3, #96]	; 0x60
 800ff04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff06:	4a0c      	ldr	r2, [pc, #48]	; (800ff38 <prvInitialiseNewTask+0x150>)
 800ff08:	665a      	str	r2, [r3, #100]	; 0x64
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800ff0a:	683a      	ldr	r2, [r7, #0]
 800ff0c:	68f9      	ldr	r1, [r7, #12]
 800ff0e:	69b8      	ldr	r0, [r7, #24]
 800ff10:	f001 fc3a 	bl	8011788 <pxPortInitialiseStack>
 800ff14:	4602      	mov	r2, r0
 800ff16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff18:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800ff1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff1c:	2b00      	cmp	r3, #0
 800ff1e:	d002      	beq.n	800ff26 <prvInitialiseNewTask+0x13e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800ff20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff22:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ff24:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ff26:	bf00      	nop
 800ff28:	3720      	adds	r7, #32
 800ff2a:	46bd      	mov	sp, r7
 800ff2c:	bd80      	pop	{r7, pc}
 800ff2e:	bf00      	nop
 800ff30:	08015450 	.word	0x08015450
 800ff34:	08015470 	.word	0x08015470
 800ff38:	08015430 	.word	0x08015430

0800ff3c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800ff3c:	b580      	push	{r7, lr}
 800ff3e:	b082      	sub	sp, #8
 800ff40:	af00      	add	r7, sp, #0
 800ff42:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800ff44:	f001 fd4e 	bl	80119e4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800ff48:	4b2d      	ldr	r3, [pc, #180]	; (8010000 <prvAddNewTaskToReadyList+0xc4>)
 800ff4a:	681b      	ldr	r3, [r3, #0]
 800ff4c:	3301      	adds	r3, #1
 800ff4e:	4a2c      	ldr	r2, [pc, #176]	; (8010000 <prvAddNewTaskToReadyList+0xc4>)
 800ff50:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800ff52:	4b2c      	ldr	r3, [pc, #176]	; (8010004 <prvAddNewTaskToReadyList+0xc8>)
 800ff54:	681b      	ldr	r3, [r3, #0]
 800ff56:	2b00      	cmp	r3, #0
 800ff58:	d109      	bne.n	800ff6e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800ff5a:	4a2a      	ldr	r2, [pc, #168]	; (8010004 <prvAddNewTaskToReadyList+0xc8>)
 800ff5c:	687b      	ldr	r3, [r7, #4]
 800ff5e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800ff60:	4b27      	ldr	r3, [pc, #156]	; (8010000 <prvAddNewTaskToReadyList+0xc4>)
 800ff62:	681b      	ldr	r3, [r3, #0]
 800ff64:	2b01      	cmp	r3, #1
 800ff66:	d110      	bne.n	800ff8a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800ff68:	f000 fd1c 	bl	80109a4 <prvInitialiseTaskLists>
 800ff6c:	e00d      	b.n	800ff8a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800ff6e:	4b26      	ldr	r3, [pc, #152]	; (8010008 <prvAddNewTaskToReadyList+0xcc>)
 800ff70:	681b      	ldr	r3, [r3, #0]
 800ff72:	2b00      	cmp	r3, #0
 800ff74:	d109      	bne.n	800ff8a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800ff76:	4b23      	ldr	r3, [pc, #140]	; (8010004 <prvAddNewTaskToReadyList+0xc8>)
 800ff78:	681b      	ldr	r3, [r3, #0]
 800ff7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ff7c:	687b      	ldr	r3, [r7, #4]
 800ff7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ff80:	429a      	cmp	r2, r3
 800ff82:	d802      	bhi.n	800ff8a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800ff84:	4a1f      	ldr	r2, [pc, #124]	; (8010004 <prvAddNewTaskToReadyList+0xc8>)
 800ff86:	687b      	ldr	r3, [r7, #4]
 800ff88:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800ff8a:	4b20      	ldr	r3, [pc, #128]	; (801000c <prvAddNewTaskToReadyList+0xd0>)
 800ff8c:	681b      	ldr	r3, [r3, #0]
 800ff8e:	3301      	adds	r3, #1
 800ff90:	4a1e      	ldr	r2, [pc, #120]	; (801000c <prvAddNewTaskToReadyList+0xd0>)
 800ff92:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800ff94:	4b1d      	ldr	r3, [pc, #116]	; (801000c <prvAddNewTaskToReadyList+0xd0>)
 800ff96:	681a      	ldr	r2, [r3, #0]
 800ff98:	687b      	ldr	r3, [r7, #4]
 800ff9a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800ff9c:	687b      	ldr	r3, [r7, #4]
 800ff9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ffa0:	4b1b      	ldr	r3, [pc, #108]	; (8010010 <prvAddNewTaskToReadyList+0xd4>)
 800ffa2:	681b      	ldr	r3, [r3, #0]
 800ffa4:	429a      	cmp	r2, r3
 800ffa6:	d903      	bls.n	800ffb0 <prvAddNewTaskToReadyList+0x74>
 800ffa8:	687b      	ldr	r3, [r7, #4]
 800ffaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ffac:	4a18      	ldr	r2, [pc, #96]	; (8010010 <prvAddNewTaskToReadyList+0xd4>)
 800ffae:	6013      	str	r3, [r2, #0]
 800ffb0:	687b      	ldr	r3, [r7, #4]
 800ffb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ffb4:	4613      	mov	r3, r2
 800ffb6:	009b      	lsls	r3, r3, #2
 800ffb8:	4413      	add	r3, r2
 800ffba:	009b      	lsls	r3, r3, #2
 800ffbc:	4a15      	ldr	r2, [pc, #84]	; (8010014 <prvAddNewTaskToReadyList+0xd8>)
 800ffbe:	441a      	add	r2, r3
 800ffc0:	687b      	ldr	r3, [r7, #4]
 800ffc2:	3304      	adds	r3, #4
 800ffc4:	4619      	mov	r1, r3
 800ffc6:	4610      	mov	r0, r2
 800ffc8:	f7ff f81b 	bl	800f002 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800ffcc:	f001 fd3a 	bl	8011a44 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800ffd0:	4b0d      	ldr	r3, [pc, #52]	; (8010008 <prvAddNewTaskToReadyList+0xcc>)
 800ffd2:	681b      	ldr	r3, [r3, #0]
 800ffd4:	2b00      	cmp	r3, #0
 800ffd6:	d00e      	beq.n	800fff6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800ffd8:	4b0a      	ldr	r3, [pc, #40]	; (8010004 <prvAddNewTaskToReadyList+0xc8>)
 800ffda:	681b      	ldr	r3, [r3, #0]
 800ffdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ffde:	687b      	ldr	r3, [r7, #4]
 800ffe0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ffe2:	429a      	cmp	r2, r3
 800ffe4:	d207      	bcs.n	800fff6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800ffe6:	4b0c      	ldr	r3, [pc, #48]	; (8010018 <prvAddNewTaskToReadyList+0xdc>)
 800ffe8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ffec:	601a      	str	r2, [r3, #0]
 800ffee:	f3bf 8f4f 	dsb	sy
 800fff2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800fff6:	bf00      	nop
 800fff8:	3708      	adds	r7, #8
 800fffa:	46bd      	mov	sp, r7
 800fffc:	bd80      	pop	{r7, pc}
 800fffe:	bf00      	nop
 8010000:	2000229c 	.word	0x2000229c
 8010004:	20001dc8 	.word	0x20001dc8
 8010008:	200022a8 	.word	0x200022a8
 801000c:	200022b8 	.word	0x200022b8
 8010010:	200022a4 	.word	0x200022a4
 8010014:	20001dcc 	.word	0x20001dcc
 8010018:	e000ed04 	.word	0xe000ed04

0801001c <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 801001c:	b580      	push	{r7, lr}
 801001e:	b084      	sub	sp, #16
 8010020:	af00      	add	r7, sp, #0
 8010022:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8010024:	f001 fcde 	bl	80119e4 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8010028:	687b      	ldr	r3, [r7, #4]
 801002a:	2b00      	cmp	r3, #0
 801002c:	d102      	bne.n	8010034 <vTaskDelete+0x18>
 801002e:	4b2c      	ldr	r3, [pc, #176]	; (80100e0 <vTaskDelete+0xc4>)
 8010030:	681b      	ldr	r3, [r3, #0]
 8010032:	e000      	b.n	8010036 <vTaskDelete+0x1a>
 8010034:	687b      	ldr	r3, [r7, #4]
 8010036:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010038:	68fb      	ldr	r3, [r7, #12]
 801003a:	3304      	adds	r3, #4
 801003c:	4618      	mov	r0, r3
 801003e:	f7ff f83d 	bl	800f0bc <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8010042:	68fb      	ldr	r3, [r7, #12]
 8010044:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010046:	2b00      	cmp	r3, #0
 8010048:	d004      	beq.n	8010054 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801004a:	68fb      	ldr	r3, [r7, #12]
 801004c:	3318      	adds	r3, #24
 801004e:	4618      	mov	r0, r3
 8010050:	f7ff f834 	bl	800f0bc <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8010054:	4b23      	ldr	r3, [pc, #140]	; (80100e4 <vTaskDelete+0xc8>)
 8010056:	681b      	ldr	r3, [r3, #0]
 8010058:	3301      	adds	r3, #1
 801005a:	4a22      	ldr	r2, [pc, #136]	; (80100e4 <vTaskDelete+0xc8>)
 801005c:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 801005e:	4b20      	ldr	r3, [pc, #128]	; (80100e0 <vTaskDelete+0xc4>)
 8010060:	681b      	ldr	r3, [r3, #0]
 8010062:	68fa      	ldr	r2, [r7, #12]
 8010064:	429a      	cmp	r2, r3
 8010066:	d10b      	bne.n	8010080 <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8010068:	68fb      	ldr	r3, [r7, #12]
 801006a:	3304      	adds	r3, #4
 801006c:	4619      	mov	r1, r3
 801006e:	481e      	ldr	r0, [pc, #120]	; (80100e8 <vTaskDelete+0xcc>)
 8010070:	f7fe ffc7 	bl	800f002 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8010074:	4b1d      	ldr	r3, [pc, #116]	; (80100ec <vTaskDelete+0xd0>)
 8010076:	681b      	ldr	r3, [r3, #0]
 8010078:	3301      	adds	r3, #1
 801007a:	4a1c      	ldr	r2, [pc, #112]	; (80100ec <vTaskDelete+0xd0>)
 801007c:	6013      	str	r3, [r2, #0]
 801007e:	e009      	b.n	8010094 <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8010080:	4b1b      	ldr	r3, [pc, #108]	; (80100f0 <vTaskDelete+0xd4>)
 8010082:	681b      	ldr	r3, [r3, #0]
 8010084:	3b01      	subs	r3, #1
 8010086:	4a1a      	ldr	r2, [pc, #104]	; (80100f0 <vTaskDelete+0xd4>)
 8010088:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 801008a:	68f8      	ldr	r0, [r7, #12]
 801008c:	f000 fcf8 	bl	8010a80 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8010090:	f000 fd2a 	bl	8010ae8 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 8010094:	f001 fcd6 	bl	8011a44 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8010098:	4b16      	ldr	r3, [pc, #88]	; (80100f4 <vTaskDelete+0xd8>)
 801009a:	681b      	ldr	r3, [r3, #0]
 801009c:	2b00      	cmp	r3, #0
 801009e:	d01b      	beq.n	80100d8 <vTaskDelete+0xbc>
		{
			if( pxTCB == pxCurrentTCB )
 80100a0:	4b0f      	ldr	r3, [pc, #60]	; (80100e0 <vTaskDelete+0xc4>)
 80100a2:	681b      	ldr	r3, [r3, #0]
 80100a4:	68fa      	ldr	r2, [r7, #12]
 80100a6:	429a      	cmp	r2, r3
 80100a8:	d116      	bne.n	80100d8 <vTaskDelete+0xbc>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 80100aa:	4b13      	ldr	r3, [pc, #76]	; (80100f8 <vTaskDelete+0xdc>)
 80100ac:	681b      	ldr	r3, [r3, #0]
 80100ae:	2b00      	cmp	r3, #0
 80100b0:	d00a      	beq.n	80100c8 <vTaskDelete+0xac>
	__asm volatile
 80100b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80100b6:	f383 8811 	msr	BASEPRI, r3
 80100ba:	f3bf 8f6f 	isb	sy
 80100be:	f3bf 8f4f 	dsb	sy
 80100c2:	60bb      	str	r3, [r7, #8]
}
 80100c4:	bf00      	nop
 80100c6:	e7fe      	b.n	80100c6 <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 80100c8:	4b0c      	ldr	r3, [pc, #48]	; (80100fc <vTaskDelete+0xe0>)
 80100ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80100ce:	601a      	str	r2, [r3, #0]
 80100d0:	f3bf 8f4f 	dsb	sy
 80100d4:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80100d8:	bf00      	nop
 80100da:	3710      	adds	r7, #16
 80100dc:	46bd      	mov	sp, r7
 80100de:	bd80      	pop	{r7, pc}
 80100e0:	20001dc8 	.word	0x20001dc8
 80100e4:	200022b8 	.word	0x200022b8
 80100e8:	20002270 	.word	0x20002270
 80100ec:	20002284 	.word	0x20002284
 80100f0:	2000229c 	.word	0x2000229c
 80100f4:	200022a8 	.word	0x200022a8
 80100f8:	200022c4 	.word	0x200022c4
 80100fc:	e000ed04 	.word	0xe000ed04

08010100 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8010100:	b580      	push	{r7, lr}
 8010102:	b084      	sub	sp, #16
 8010104:	af00      	add	r7, sp, #0
 8010106:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8010108:	2300      	movs	r3, #0
 801010a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 801010c:	687b      	ldr	r3, [r7, #4]
 801010e:	2b00      	cmp	r3, #0
 8010110:	d017      	beq.n	8010142 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8010112:	4b13      	ldr	r3, [pc, #76]	; (8010160 <vTaskDelay+0x60>)
 8010114:	681b      	ldr	r3, [r3, #0]
 8010116:	2b00      	cmp	r3, #0
 8010118:	d00a      	beq.n	8010130 <vTaskDelay+0x30>
	__asm volatile
 801011a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801011e:	f383 8811 	msr	BASEPRI, r3
 8010122:	f3bf 8f6f 	isb	sy
 8010126:	f3bf 8f4f 	dsb	sy
 801012a:	60bb      	str	r3, [r7, #8]
}
 801012c:	bf00      	nop
 801012e:	e7fe      	b.n	801012e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8010130:	f000 f8f2 	bl	8010318 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8010134:	2100      	movs	r1, #0
 8010136:	6878      	ldr	r0, [r7, #4]
 8010138:	f000 ff84 	bl	8011044 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 801013c:	f000 f8fa 	bl	8010334 <xTaskResumeAll>
 8010140:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8010142:	68fb      	ldr	r3, [r7, #12]
 8010144:	2b00      	cmp	r3, #0
 8010146:	d107      	bne.n	8010158 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8010148:	4b06      	ldr	r3, [pc, #24]	; (8010164 <vTaskDelay+0x64>)
 801014a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801014e:	601a      	str	r2, [r3, #0]
 8010150:	f3bf 8f4f 	dsb	sy
 8010154:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8010158:	bf00      	nop
 801015a:	3710      	adds	r7, #16
 801015c:	46bd      	mov	sp, r7
 801015e:	bd80      	pop	{r7, pc}
 8010160:	200022c4 	.word	0x200022c4
 8010164:	e000ed04 	.word	0xe000ed04

08010168 <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 8010168:	b580      	push	{r7, lr}
 801016a:	b088      	sub	sp, #32
 801016c:	af00      	add	r7, sp, #0
 801016e:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
	const TCB_t * const pxTCB = xTask;
 8010170:	687b      	ldr	r3, [r7, #4]
 8010172:	61bb      	str	r3, [r7, #24]

		configASSERT( pxTCB );
 8010174:	69bb      	ldr	r3, [r7, #24]
 8010176:	2b00      	cmp	r3, #0
 8010178:	d10a      	bne.n	8010190 <eTaskGetState+0x28>
	__asm volatile
 801017a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801017e:	f383 8811 	msr	BASEPRI, r3
 8010182:	f3bf 8f6f 	isb	sy
 8010186:	f3bf 8f4f 	dsb	sy
 801018a:	60bb      	str	r3, [r7, #8]
}
 801018c:	bf00      	nop
 801018e:	e7fe      	b.n	801018e <eTaskGetState+0x26>

		if( pxTCB == pxCurrentTCB )
 8010190:	4b23      	ldr	r3, [pc, #140]	; (8010220 <eTaskGetState+0xb8>)
 8010192:	681b      	ldr	r3, [r3, #0]
 8010194:	69ba      	ldr	r2, [r7, #24]
 8010196:	429a      	cmp	r2, r3
 8010198:	d102      	bne.n	80101a0 <eTaskGetState+0x38>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 801019a:	2300      	movs	r3, #0
 801019c:	77fb      	strb	r3, [r7, #31]
 801019e:	e03a      	b.n	8010216 <eTaskGetState+0xae>
		}
		else
		{
			taskENTER_CRITICAL();
 80101a0:	f001 fc20 	bl	80119e4 <vPortEnterCritical>
			{
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 80101a4:	69bb      	ldr	r3, [r7, #24]
 80101a6:	695b      	ldr	r3, [r3, #20]
 80101a8:	617b      	str	r3, [r7, #20]
				pxDelayedList = pxDelayedTaskList;
 80101aa:	4b1e      	ldr	r3, [pc, #120]	; (8010224 <eTaskGetState+0xbc>)
 80101ac:	681b      	ldr	r3, [r3, #0]
 80101ae:	613b      	str	r3, [r7, #16]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 80101b0:	4b1d      	ldr	r3, [pc, #116]	; (8010228 <eTaskGetState+0xc0>)
 80101b2:	681b      	ldr	r3, [r3, #0]
 80101b4:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 80101b6:	f001 fc45 	bl	8011a44 <vPortExitCritical>

			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 80101ba:	697a      	ldr	r2, [r7, #20]
 80101bc:	693b      	ldr	r3, [r7, #16]
 80101be:	429a      	cmp	r2, r3
 80101c0:	d003      	beq.n	80101ca <eTaskGetState+0x62>
 80101c2:	697a      	ldr	r2, [r7, #20]
 80101c4:	68fb      	ldr	r3, [r7, #12]
 80101c6:	429a      	cmp	r2, r3
 80101c8:	d102      	bne.n	80101d0 <eTaskGetState+0x68>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 80101ca:	2302      	movs	r3, #2
 80101cc:	77fb      	strb	r3, [r7, #31]
 80101ce:	e022      	b.n	8010216 <eTaskGetState+0xae>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 80101d0:	697b      	ldr	r3, [r7, #20]
 80101d2:	4a16      	ldr	r2, [pc, #88]	; (801022c <eTaskGetState+0xc4>)
 80101d4:	4293      	cmp	r3, r2
 80101d6:	d112      	bne.n	80101fe <eTaskGetState+0x96>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it blocked
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 80101d8:	69bb      	ldr	r3, [r7, #24]
 80101da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80101dc:	2b00      	cmp	r3, #0
 80101de:	d10b      	bne.n	80101f8 <eTaskGetState+0x90>
						{
							/* The task does not appear on the event list item of
							and of the RTOS objects, but could still be in the
							blocked state if it is waiting on its notification
							rather than waiting on an object. */
							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 80101e0:	69bb      	ldr	r3, [r7, #24]
 80101e2:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 80101e6:	b2db      	uxtb	r3, r3
 80101e8:	2b01      	cmp	r3, #1
 80101ea:	d102      	bne.n	80101f2 <eTaskGetState+0x8a>
							{
								eReturn = eBlocked;
 80101ec:	2302      	movs	r3, #2
 80101ee:	77fb      	strb	r3, [r7, #31]
 80101f0:	e011      	b.n	8010216 <eTaskGetState+0xae>
							}
							else
							{
								eReturn = eSuspended;
 80101f2:	2303      	movs	r3, #3
 80101f4:	77fb      	strb	r3, [r7, #31]
 80101f6:	e00e      	b.n	8010216 <eTaskGetState+0xae>
						}
						#endif
					}
					else
					{
						eReturn = eBlocked;
 80101f8:	2302      	movs	r3, #2
 80101fa:	77fb      	strb	r3, [r7, #31]
 80101fc:	e00b      	b.n	8010216 <eTaskGetState+0xae>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 80101fe:	697b      	ldr	r3, [r7, #20]
 8010200:	4a0b      	ldr	r2, [pc, #44]	; (8010230 <eTaskGetState+0xc8>)
 8010202:	4293      	cmp	r3, r2
 8010204:	d002      	beq.n	801020c <eTaskGetState+0xa4>
 8010206:	697b      	ldr	r3, [r7, #20]
 8010208:	2b00      	cmp	r3, #0
 801020a:	d102      	bne.n	8010212 <eTaskGetState+0xaa>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 801020c:	2304      	movs	r3, #4
 801020e:	77fb      	strb	r3, [r7, #31]
 8010210:	e001      	b.n	8010216 <eTaskGetState+0xae>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 8010212:	2301      	movs	r3, #1
 8010214:	77fb      	strb	r3, [r7, #31]
			}
		}

		return eReturn;
 8010216:	7ffb      	ldrb	r3, [r7, #31]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8010218:	4618      	mov	r0, r3
 801021a:	3720      	adds	r7, #32
 801021c:	46bd      	mov	sp, r7
 801021e:	bd80      	pop	{r7, pc}
 8010220:	20001dc8 	.word	0x20001dc8
 8010224:	20002254 	.word	0x20002254
 8010228:	20002258 	.word	0x20002258
 801022c:	20002288 	.word	0x20002288
 8010230:	20002270 	.word	0x20002270

08010234 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8010234:	b580      	push	{r7, lr}
 8010236:	b08a      	sub	sp, #40	; 0x28
 8010238:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 801023a:	2300      	movs	r3, #0
 801023c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 801023e:	2300      	movs	r3, #0
 8010240:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8010242:	463a      	mov	r2, r7
 8010244:	1d39      	adds	r1, r7, #4
 8010246:	f107 0308 	add.w	r3, r7, #8
 801024a:	4618      	mov	r0, r3
 801024c:	f7fe fe78 	bl	800ef40 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8010250:	6839      	ldr	r1, [r7, #0]
 8010252:	687b      	ldr	r3, [r7, #4]
 8010254:	68ba      	ldr	r2, [r7, #8]
 8010256:	9202      	str	r2, [sp, #8]
 8010258:	9301      	str	r3, [sp, #4]
 801025a:	2300      	movs	r3, #0
 801025c:	9300      	str	r3, [sp, #0]
 801025e:	2300      	movs	r3, #0
 8010260:	460a      	mov	r2, r1
 8010262:	4925      	ldr	r1, [pc, #148]	; (80102f8 <vTaskStartScheduler+0xc4>)
 8010264:	4825      	ldr	r0, [pc, #148]	; (80102fc <vTaskStartScheduler+0xc8>)
 8010266:	f7ff fd1d 	bl	800fca4 <xTaskCreateStatic>
 801026a:	4603      	mov	r3, r0
 801026c:	4a24      	ldr	r2, [pc, #144]	; (8010300 <vTaskStartScheduler+0xcc>)
 801026e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8010270:	4b23      	ldr	r3, [pc, #140]	; (8010300 <vTaskStartScheduler+0xcc>)
 8010272:	681b      	ldr	r3, [r3, #0]
 8010274:	2b00      	cmp	r3, #0
 8010276:	d002      	beq.n	801027e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8010278:	2301      	movs	r3, #1
 801027a:	617b      	str	r3, [r7, #20]
 801027c:	e001      	b.n	8010282 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 801027e:	2300      	movs	r3, #0
 8010280:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8010282:	697b      	ldr	r3, [r7, #20]
 8010284:	2b01      	cmp	r3, #1
 8010286:	d102      	bne.n	801028e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8010288:	f000 ff30 	bl	80110ec <xTimerCreateTimerTask>
 801028c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 801028e:	697b      	ldr	r3, [r7, #20]
 8010290:	2b01      	cmp	r3, #1
 8010292:	d11d      	bne.n	80102d0 <vTaskStartScheduler+0x9c>
	__asm volatile
 8010294:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010298:	f383 8811 	msr	BASEPRI, r3
 801029c:	f3bf 8f6f 	isb	sy
 80102a0:	f3bf 8f4f 	dsb	sy
 80102a4:	613b      	str	r3, [r7, #16]
}
 80102a6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80102a8:	4b16      	ldr	r3, [pc, #88]	; (8010304 <vTaskStartScheduler+0xd0>)
 80102aa:	681b      	ldr	r3, [r3, #0]
 80102ac:	3358      	adds	r3, #88	; 0x58
 80102ae:	4a16      	ldr	r2, [pc, #88]	; (8010308 <vTaskStartScheduler+0xd4>)
 80102b0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80102b2:	4b16      	ldr	r3, [pc, #88]	; (801030c <vTaskStartScheduler+0xd8>)
 80102b4:	f04f 32ff 	mov.w	r2, #4294967295
 80102b8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80102ba:	4b15      	ldr	r3, [pc, #84]	; (8010310 <vTaskStartScheduler+0xdc>)
 80102bc:	2201      	movs	r2, #1
 80102be:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80102c0:	4b14      	ldr	r3, [pc, #80]	; (8010314 <vTaskStartScheduler+0xe0>)
 80102c2:	2200      	movs	r2, #0
 80102c4:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 80102c6:	f7f0 f985 	bl	80005d4 <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80102ca:	f001 fae9 	bl	80118a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80102ce:	e00e      	b.n	80102ee <vTaskStartScheduler+0xba>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80102d0:	697b      	ldr	r3, [r7, #20]
 80102d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80102d6:	d10a      	bne.n	80102ee <vTaskStartScheduler+0xba>
	__asm volatile
 80102d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80102dc:	f383 8811 	msr	BASEPRI, r3
 80102e0:	f3bf 8f6f 	isb	sy
 80102e4:	f3bf 8f4f 	dsb	sy
 80102e8:	60fb      	str	r3, [r7, #12]
}
 80102ea:	bf00      	nop
 80102ec:	e7fe      	b.n	80102ec <vTaskStartScheduler+0xb8>
}
 80102ee:	bf00      	nop
 80102f0:	3718      	adds	r7, #24
 80102f2:	46bd      	mov	sp, r7
 80102f4:	bd80      	pop	{r7, pc}
 80102f6:	bf00      	nop
 80102f8:	08014f5c 	.word	0x08014f5c
 80102fc:	08010975 	.word	0x08010975
 8010300:	200022c0 	.word	0x200022c0
 8010304:	20001dc8 	.word	0x20001dc8
 8010308:	20000054 	.word	0x20000054
 801030c:	200022bc 	.word	0x200022bc
 8010310:	200022a8 	.word	0x200022a8
 8010314:	200022a0 	.word	0x200022a0

08010318 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8010318:	b480      	push	{r7}
 801031a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 801031c:	4b04      	ldr	r3, [pc, #16]	; (8010330 <vTaskSuspendAll+0x18>)
 801031e:	681b      	ldr	r3, [r3, #0]
 8010320:	3301      	adds	r3, #1
 8010322:	4a03      	ldr	r2, [pc, #12]	; (8010330 <vTaskSuspendAll+0x18>)
 8010324:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8010326:	bf00      	nop
 8010328:	46bd      	mov	sp, r7
 801032a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801032e:	4770      	bx	lr
 8010330:	200022c4 	.word	0x200022c4

08010334 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8010334:	b580      	push	{r7, lr}
 8010336:	b084      	sub	sp, #16
 8010338:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 801033a:	2300      	movs	r3, #0
 801033c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 801033e:	2300      	movs	r3, #0
 8010340:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8010342:	4b42      	ldr	r3, [pc, #264]	; (801044c <xTaskResumeAll+0x118>)
 8010344:	681b      	ldr	r3, [r3, #0]
 8010346:	2b00      	cmp	r3, #0
 8010348:	d10a      	bne.n	8010360 <xTaskResumeAll+0x2c>
	__asm volatile
 801034a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801034e:	f383 8811 	msr	BASEPRI, r3
 8010352:	f3bf 8f6f 	isb	sy
 8010356:	f3bf 8f4f 	dsb	sy
 801035a:	603b      	str	r3, [r7, #0]
}
 801035c:	bf00      	nop
 801035e:	e7fe      	b.n	801035e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8010360:	f001 fb40 	bl	80119e4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8010364:	4b39      	ldr	r3, [pc, #228]	; (801044c <xTaskResumeAll+0x118>)
 8010366:	681b      	ldr	r3, [r3, #0]
 8010368:	3b01      	subs	r3, #1
 801036a:	4a38      	ldr	r2, [pc, #224]	; (801044c <xTaskResumeAll+0x118>)
 801036c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801036e:	4b37      	ldr	r3, [pc, #220]	; (801044c <xTaskResumeAll+0x118>)
 8010370:	681b      	ldr	r3, [r3, #0]
 8010372:	2b00      	cmp	r3, #0
 8010374:	d162      	bne.n	801043c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8010376:	4b36      	ldr	r3, [pc, #216]	; (8010450 <xTaskResumeAll+0x11c>)
 8010378:	681b      	ldr	r3, [r3, #0]
 801037a:	2b00      	cmp	r3, #0
 801037c:	d05e      	beq.n	801043c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801037e:	e02f      	b.n	80103e0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010380:	4b34      	ldr	r3, [pc, #208]	; (8010454 <xTaskResumeAll+0x120>)
 8010382:	68db      	ldr	r3, [r3, #12]
 8010384:	68db      	ldr	r3, [r3, #12]
 8010386:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8010388:	68fb      	ldr	r3, [r7, #12]
 801038a:	3318      	adds	r3, #24
 801038c:	4618      	mov	r0, r3
 801038e:	f7fe fe95 	bl	800f0bc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010392:	68fb      	ldr	r3, [r7, #12]
 8010394:	3304      	adds	r3, #4
 8010396:	4618      	mov	r0, r3
 8010398:	f7fe fe90 	bl	800f0bc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 801039c:	68fb      	ldr	r3, [r7, #12]
 801039e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80103a0:	4b2d      	ldr	r3, [pc, #180]	; (8010458 <xTaskResumeAll+0x124>)
 80103a2:	681b      	ldr	r3, [r3, #0]
 80103a4:	429a      	cmp	r2, r3
 80103a6:	d903      	bls.n	80103b0 <xTaskResumeAll+0x7c>
 80103a8:	68fb      	ldr	r3, [r7, #12]
 80103aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80103ac:	4a2a      	ldr	r2, [pc, #168]	; (8010458 <xTaskResumeAll+0x124>)
 80103ae:	6013      	str	r3, [r2, #0]
 80103b0:	68fb      	ldr	r3, [r7, #12]
 80103b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80103b4:	4613      	mov	r3, r2
 80103b6:	009b      	lsls	r3, r3, #2
 80103b8:	4413      	add	r3, r2
 80103ba:	009b      	lsls	r3, r3, #2
 80103bc:	4a27      	ldr	r2, [pc, #156]	; (801045c <xTaskResumeAll+0x128>)
 80103be:	441a      	add	r2, r3
 80103c0:	68fb      	ldr	r3, [r7, #12]
 80103c2:	3304      	adds	r3, #4
 80103c4:	4619      	mov	r1, r3
 80103c6:	4610      	mov	r0, r2
 80103c8:	f7fe fe1b 	bl	800f002 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80103cc:	68fb      	ldr	r3, [r7, #12]
 80103ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80103d0:	4b23      	ldr	r3, [pc, #140]	; (8010460 <xTaskResumeAll+0x12c>)
 80103d2:	681b      	ldr	r3, [r3, #0]
 80103d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80103d6:	429a      	cmp	r2, r3
 80103d8:	d302      	bcc.n	80103e0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80103da:	4b22      	ldr	r3, [pc, #136]	; (8010464 <xTaskResumeAll+0x130>)
 80103dc:	2201      	movs	r2, #1
 80103de:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80103e0:	4b1c      	ldr	r3, [pc, #112]	; (8010454 <xTaskResumeAll+0x120>)
 80103e2:	681b      	ldr	r3, [r3, #0]
 80103e4:	2b00      	cmp	r3, #0
 80103e6:	d1cb      	bne.n	8010380 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80103e8:	68fb      	ldr	r3, [r7, #12]
 80103ea:	2b00      	cmp	r3, #0
 80103ec:	d001      	beq.n	80103f2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80103ee:	f000 fb7b 	bl	8010ae8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80103f2:	4b1d      	ldr	r3, [pc, #116]	; (8010468 <xTaskResumeAll+0x134>)
 80103f4:	681b      	ldr	r3, [r3, #0]
 80103f6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80103f8:	687b      	ldr	r3, [r7, #4]
 80103fa:	2b00      	cmp	r3, #0
 80103fc:	d010      	beq.n	8010420 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80103fe:	f000 f847 	bl	8010490 <xTaskIncrementTick>
 8010402:	4603      	mov	r3, r0
 8010404:	2b00      	cmp	r3, #0
 8010406:	d002      	beq.n	801040e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8010408:	4b16      	ldr	r3, [pc, #88]	; (8010464 <xTaskResumeAll+0x130>)
 801040a:	2201      	movs	r2, #1
 801040c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 801040e:	687b      	ldr	r3, [r7, #4]
 8010410:	3b01      	subs	r3, #1
 8010412:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8010414:	687b      	ldr	r3, [r7, #4]
 8010416:	2b00      	cmp	r3, #0
 8010418:	d1f1      	bne.n	80103fe <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 801041a:	4b13      	ldr	r3, [pc, #76]	; (8010468 <xTaskResumeAll+0x134>)
 801041c:	2200      	movs	r2, #0
 801041e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8010420:	4b10      	ldr	r3, [pc, #64]	; (8010464 <xTaskResumeAll+0x130>)
 8010422:	681b      	ldr	r3, [r3, #0]
 8010424:	2b00      	cmp	r3, #0
 8010426:	d009      	beq.n	801043c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8010428:	2301      	movs	r3, #1
 801042a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 801042c:	4b0f      	ldr	r3, [pc, #60]	; (801046c <xTaskResumeAll+0x138>)
 801042e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010432:	601a      	str	r2, [r3, #0]
 8010434:	f3bf 8f4f 	dsb	sy
 8010438:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801043c:	f001 fb02 	bl	8011a44 <vPortExitCritical>

	return xAlreadyYielded;
 8010440:	68bb      	ldr	r3, [r7, #8]
}
 8010442:	4618      	mov	r0, r3
 8010444:	3710      	adds	r7, #16
 8010446:	46bd      	mov	sp, r7
 8010448:	bd80      	pop	{r7, pc}
 801044a:	bf00      	nop
 801044c:	200022c4 	.word	0x200022c4
 8010450:	2000229c 	.word	0x2000229c
 8010454:	2000225c 	.word	0x2000225c
 8010458:	200022a4 	.word	0x200022a4
 801045c:	20001dcc 	.word	0x20001dcc
 8010460:	20001dc8 	.word	0x20001dc8
 8010464:	200022b0 	.word	0x200022b0
 8010468:	200022ac 	.word	0x200022ac
 801046c:	e000ed04 	.word	0xe000ed04

08010470 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8010470:	b480      	push	{r7}
 8010472:	b083      	sub	sp, #12
 8010474:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8010476:	4b05      	ldr	r3, [pc, #20]	; (801048c <xTaskGetTickCount+0x1c>)
 8010478:	681b      	ldr	r3, [r3, #0]
 801047a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 801047c:	687b      	ldr	r3, [r7, #4]
}
 801047e:	4618      	mov	r0, r3
 8010480:	370c      	adds	r7, #12
 8010482:	46bd      	mov	sp, r7
 8010484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010488:	4770      	bx	lr
 801048a:	bf00      	nop
 801048c:	200022a0 	.word	0x200022a0

08010490 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8010490:	b580      	push	{r7, lr}
 8010492:	b086      	sub	sp, #24
 8010494:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8010496:	2300      	movs	r3, #0
 8010498:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801049a:	4b4f      	ldr	r3, [pc, #316]	; (80105d8 <xTaskIncrementTick+0x148>)
 801049c:	681b      	ldr	r3, [r3, #0]
 801049e:	2b00      	cmp	r3, #0
 80104a0:	f040 808f 	bne.w	80105c2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80104a4:	4b4d      	ldr	r3, [pc, #308]	; (80105dc <xTaskIncrementTick+0x14c>)
 80104a6:	681b      	ldr	r3, [r3, #0]
 80104a8:	3301      	adds	r3, #1
 80104aa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80104ac:	4a4b      	ldr	r2, [pc, #300]	; (80105dc <xTaskIncrementTick+0x14c>)
 80104ae:	693b      	ldr	r3, [r7, #16]
 80104b0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80104b2:	693b      	ldr	r3, [r7, #16]
 80104b4:	2b00      	cmp	r3, #0
 80104b6:	d120      	bne.n	80104fa <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80104b8:	4b49      	ldr	r3, [pc, #292]	; (80105e0 <xTaskIncrementTick+0x150>)
 80104ba:	681b      	ldr	r3, [r3, #0]
 80104bc:	681b      	ldr	r3, [r3, #0]
 80104be:	2b00      	cmp	r3, #0
 80104c0:	d00a      	beq.n	80104d8 <xTaskIncrementTick+0x48>
	__asm volatile
 80104c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80104c6:	f383 8811 	msr	BASEPRI, r3
 80104ca:	f3bf 8f6f 	isb	sy
 80104ce:	f3bf 8f4f 	dsb	sy
 80104d2:	603b      	str	r3, [r7, #0]
}
 80104d4:	bf00      	nop
 80104d6:	e7fe      	b.n	80104d6 <xTaskIncrementTick+0x46>
 80104d8:	4b41      	ldr	r3, [pc, #260]	; (80105e0 <xTaskIncrementTick+0x150>)
 80104da:	681b      	ldr	r3, [r3, #0]
 80104dc:	60fb      	str	r3, [r7, #12]
 80104de:	4b41      	ldr	r3, [pc, #260]	; (80105e4 <xTaskIncrementTick+0x154>)
 80104e0:	681b      	ldr	r3, [r3, #0]
 80104e2:	4a3f      	ldr	r2, [pc, #252]	; (80105e0 <xTaskIncrementTick+0x150>)
 80104e4:	6013      	str	r3, [r2, #0]
 80104e6:	4a3f      	ldr	r2, [pc, #252]	; (80105e4 <xTaskIncrementTick+0x154>)
 80104e8:	68fb      	ldr	r3, [r7, #12]
 80104ea:	6013      	str	r3, [r2, #0]
 80104ec:	4b3e      	ldr	r3, [pc, #248]	; (80105e8 <xTaskIncrementTick+0x158>)
 80104ee:	681b      	ldr	r3, [r3, #0]
 80104f0:	3301      	adds	r3, #1
 80104f2:	4a3d      	ldr	r2, [pc, #244]	; (80105e8 <xTaskIncrementTick+0x158>)
 80104f4:	6013      	str	r3, [r2, #0]
 80104f6:	f000 faf7 	bl	8010ae8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80104fa:	4b3c      	ldr	r3, [pc, #240]	; (80105ec <xTaskIncrementTick+0x15c>)
 80104fc:	681b      	ldr	r3, [r3, #0]
 80104fe:	693a      	ldr	r2, [r7, #16]
 8010500:	429a      	cmp	r2, r3
 8010502:	d349      	bcc.n	8010598 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010504:	4b36      	ldr	r3, [pc, #216]	; (80105e0 <xTaskIncrementTick+0x150>)
 8010506:	681b      	ldr	r3, [r3, #0]
 8010508:	681b      	ldr	r3, [r3, #0]
 801050a:	2b00      	cmp	r3, #0
 801050c:	d104      	bne.n	8010518 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801050e:	4b37      	ldr	r3, [pc, #220]	; (80105ec <xTaskIncrementTick+0x15c>)
 8010510:	f04f 32ff 	mov.w	r2, #4294967295
 8010514:	601a      	str	r2, [r3, #0]
					break;
 8010516:	e03f      	b.n	8010598 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010518:	4b31      	ldr	r3, [pc, #196]	; (80105e0 <xTaskIncrementTick+0x150>)
 801051a:	681b      	ldr	r3, [r3, #0]
 801051c:	68db      	ldr	r3, [r3, #12]
 801051e:	68db      	ldr	r3, [r3, #12]
 8010520:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8010522:	68bb      	ldr	r3, [r7, #8]
 8010524:	685b      	ldr	r3, [r3, #4]
 8010526:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8010528:	693a      	ldr	r2, [r7, #16]
 801052a:	687b      	ldr	r3, [r7, #4]
 801052c:	429a      	cmp	r2, r3
 801052e:	d203      	bcs.n	8010538 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8010530:	4a2e      	ldr	r2, [pc, #184]	; (80105ec <xTaskIncrementTick+0x15c>)
 8010532:	687b      	ldr	r3, [r7, #4]
 8010534:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8010536:	e02f      	b.n	8010598 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010538:	68bb      	ldr	r3, [r7, #8]
 801053a:	3304      	adds	r3, #4
 801053c:	4618      	mov	r0, r3
 801053e:	f7fe fdbd 	bl	800f0bc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8010542:	68bb      	ldr	r3, [r7, #8]
 8010544:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010546:	2b00      	cmp	r3, #0
 8010548:	d004      	beq.n	8010554 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801054a:	68bb      	ldr	r3, [r7, #8]
 801054c:	3318      	adds	r3, #24
 801054e:	4618      	mov	r0, r3
 8010550:	f7fe fdb4 	bl	800f0bc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8010554:	68bb      	ldr	r3, [r7, #8]
 8010556:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010558:	4b25      	ldr	r3, [pc, #148]	; (80105f0 <xTaskIncrementTick+0x160>)
 801055a:	681b      	ldr	r3, [r3, #0]
 801055c:	429a      	cmp	r2, r3
 801055e:	d903      	bls.n	8010568 <xTaskIncrementTick+0xd8>
 8010560:	68bb      	ldr	r3, [r7, #8]
 8010562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010564:	4a22      	ldr	r2, [pc, #136]	; (80105f0 <xTaskIncrementTick+0x160>)
 8010566:	6013      	str	r3, [r2, #0]
 8010568:	68bb      	ldr	r3, [r7, #8]
 801056a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801056c:	4613      	mov	r3, r2
 801056e:	009b      	lsls	r3, r3, #2
 8010570:	4413      	add	r3, r2
 8010572:	009b      	lsls	r3, r3, #2
 8010574:	4a1f      	ldr	r2, [pc, #124]	; (80105f4 <xTaskIncrementTick+0x164>)
 8010576:	441a      	add	r2, r3
 8010578:	68bb      	ldr	r3, [r7, #8]
 801057a:	3304      	adds	r3, #4
 801057c:	4619      	mov	r1, r3
 801057e:	4610      	mov	r0, r2
 8010580:	f7fe fd3f 	bl	800f002 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8010584:	68bb      	ldr	r3, [r7, #8]
 8010586:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010588:	4b1b      	ldr	r3, [pc, #108]	; (80105f8 <xTaskIncrementTick+0x168>)
 801058a:	681b      	ldr	r3, [r3, #0]
 801058c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801058e:	429a      	cmp	r2, r3
 8010590:	d3b8      	bcc.n	8010504 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8010592:	2301      	movs	r3, #1
 8010594:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010596:	e7b5      	b.n	8010504 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8010598:	4b17      	ldr	r3, [pc, #92]	; (80105f8 <xTaskIncrementTick+0x168>)
 801059a:	681b      	ldr	r3, [r3, #0]
 801059c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801059e:	4915      	ldr	r1, [pc, #84]	; (80105f4 <xTaskIncrementTick+0x164>)
 80105a0:	4613      	mov	r3, r2
 80105a2:	009b      	lsls	r3, r3, #2
 80105a4:	4413      	add	r3, r2
 80105a6:	009b      	lsls	r3, r3, #2
 80105a8:	440b      	add	r3, r1
 80105aa:	681b      	ldr	r3, [r3, #0]
 80105ac:	2b01      	cmp	r3, #1
 80105ae:	d901      	bls.n	80105b4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80105b0:	2301      	movs	r3, #1
 80105b2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80105b4:	4b11      	ldr	r3, [pc, #68]	; (80105fc <xTaskIncrementTick+0x16c>)
 80105b6:	681b      	ldr	r3, [r3, #0]
 80105b8:	2b00      	cmp	r3, #0
 80105ba:	d007      	beq.n	80105cc <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80105bc:	2301      	movs	r3, #1
 80105be:	617b      	str	r3, [r7, #20]
 80105c0:	e004      	b.n	80105cc <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80105c2:	4b0f      	ldr	r3, [pc, #60]	; (8010600 <xTaskIncrementTick+0x170>)
 80105c4:	681b      	ldr	r3, [r3, #0]
 80105c6:	3301      	adds	r3, #1
 80105c8:	4a0d      	ldr	r2, [pc, #52]	; (8010600 <xTaskIncrementTick+0x170>)
 80105ca:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80105cc:	697b      	ldr	r3, [r7, #20]
}
 80105ce:	4618      	mov	r0, r3
 80105d0:	3718      	adds	r7, #24
 80105d2:	46bd      	mov	sp, r7
 80105d4:	bd80      	pop	{r7, pc}
 80105d6:	bf00      	nop
 80105d8:	200022c4 	.word	0x200022c4
 80105dc:	200022a0 	.word	0x200022a0
 80105e0:	20002254 	.word	0x20002254
 80105e4:	20002258 	.word	0x20002258
 80105e8:	200022b4 	.word	0x200022b4
 80105ec:	200022bc 	.word	0x200022bc
 80105f0:	200022a4 	.word	0x200022a4
 80105f4:	20001dcc 	.word	0x20001dcc
 80105f8:	20001dc8 	.word	0x20001dc8
 80105fc:	200022b0 	.word	0x200022b0
 8010600:	200022ac 	.word	0x200022ac

08010604 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8010604:	b580      	push	{r7, lr}
 8010606:	b084      	sub	sp, #16
 8010608:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 801060a:	4b36      	ldr	r3, [pc, #216]	; (80106e4 <vTaskSwitchContext+0xe0>)
 801060c:	681b      	ldr	r3, [r3, #0]
 801060e:	2b00      	cmp	r3, #0
 8010610:	d003      	beq.n	801061a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8010612:	4b35      	ldr	r3, [pc, #212]	; (80106e8 <vTaskSwitchContext+0xe4>)
 8010614:	2201      	movs	r2, #1
 8010616:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8010618:	e05f      	b.n	80106da <vTaskSwitchContext+0xd6>
		xYieldPending = pdFALSE;
 801061a:	4b33      	ldr	r3, [pc, #204]	; (80106e8 <vTaskSwitchContext+0xe4>)
 801061c:	2200      	movs	r2, #0
 801061e:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8010620:	f7ef ffe6 	bl	80005f0 <getRunTimeCounterValue>
 8010624:	4603      	mov	r3, r0
 8010626:	4a31      	ldr	r2, [pc, #196]	; (80106ec <vTaskSwitchContext+0xe8>)
 8010628:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 801062a:	4b30      	ldr	r3, [pc, #192]	; (80106ec <vTaskSwitchContext+0xe8>)
 801062c:	681a      	ldr	r2, [r3, #0]
 801062e:	4b30      	ldr	r3, [pc, #192]	; (80106f0 <vTaskSwitchContext+0xec>)
 8010630:	681b      	ldr	r3, [r3, #0]
 8010632:	429a      	cmp	r2, r3
 8010634:	d909      	bls.n	801064a <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 8010636:	4b2f      	ldr	r3, [pc, #188]	; (80106f4 <vTaskSwitchContext+0xf0>)
 8010638:	681b      	ldr	r3, [r3, #0]
 801063a:	6d59      	ldr	r1, [r3, #84]	; 0x54
 801063c:	4a2b      	ldr	r2, [pc, #172]	; (80106ec <vTaskSwitchContext+0xe8>)
 801063e:	6810      	ldr	r0, [r2, #0]
 8010640:	4a2b      	ldr	r2, [pc, #172]	; (80106f0 <vTaskSwitchContext+0xec>)
 8010642:	6812      	ldr	r2, [r2, #0]
 8010644:	1a82      	subs	r2, r0, r2
 8010646:	440a      	add	r2, r1
 8010648:	655a      	str	r2, [r3, #84]	; 0x54
			ulTaskSwitchedInTime = ulTotalRunTime;
 801064a:	4b28      	ldr	r3, [pc, #160]	; (80106ec <vTaskSwitchContext+0xe8>)
 801064c:	681b      	ldr	r3, [r3, #0]
 801064e:	4a28      	ldr	r2, [pc, #160]	; (80106f0 <vTaskSwitchContext+0xec>)
 8010650:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010652:	4b29      	ldr	r3, [pc, #164]	; (80106f8 <vTaskSwitchContext+0xf4>)
 8010654:	681b      	ldr	r3, [r3, #0]
 8010656:	60fb      	str	r3, [r7, #12]
 8010658:	e010      	b.n	801067c <vTaskSwitchContext+0x78>
 801065a:	68fb      	ldr	r3, [r7, #12]
 801065c:	2b00      	cmp	r3, #0
 801065e:	d10a      	bne.n	8010676 <vTaskSwitchContext+0x72>
	__asm volatile
 8010660:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010664:	f383 8811 	msr	BASEPRI, r3
 8010668:	f3bf 8f6f 	isb	sy
 801066c:	f3bf 8f4f 	dsb	sy
 8010670:	607b      	str	r3, [r7, #4]
}
 8010672:	bf00      	nop
 8010674:	e7fe      	b.n	8010674 <vTaskSwitchContext+0x70>
 8010676:	68fb      	ldr	r3, [r7, #12]
 8010678:	3b01      	subs	r3, #1
 801067a:	60fb      	str	r3, [r7, #12]
 801067c:	491f      	ldr	r1, [pc, #124]	; (80106fc <vTaskSwitchContext+0xf8>)
 801067e:	68fa      	ldr	r2, [r7, #12]
 8010680:	4613      	mov	r3, r2
 8010682:	009b      	lsls	r3, r3, #2
 8010684:	4413      	add	r3, r2
 8010686:	009b      	lsls	r3, r3, #2
 8010688:	440b      	add	r3, r1
 801068a:	681b      	ldr	r3, [r3, #0]
 801068c:	2b00      	cmp	r3, #0
 801068e:	d0e4      	beq.n	801065a <vTaskSwitchContext+0x56>
 8010690:	68fa      	ldr	r2, [r7, #12]
 8010692:	4613      	mov	r3, r2
 8010694:	009b      	lsls	r3, r3, #2
 8010696:	4413      	add	r3, r2
 8010698:	009b      	lsls	r3, r3, #2
 801069a:	4a18      	ldr	r2, [pc, #96]	; (80106fc <vTaskSwitchContext+0xf8>)
 801069c:	4413      	add	r3, r2
 801069e:	60bb      	str	r3, [r7, #8]
 80106a0:	68bb      	ldr	r3, [r7, #8]
 80106a2:	685b      	ldr	r3, [r3, #4]
 80106a4:	685a      	ldr	r2, [r3, #4]
 80106a6:	68bb      	ldr	r3, [r7, #8]
 80106a8:	605a      	str	r2, [r3, #4]
 80106aa:	68bb      	ldr	r3, [r7, #8]
 80106ac:	685a      	ldr	r2, [r3, #4]
 80106ae:	68bb      	ldr	r3, [r7, #8]
 80106b0:	3308      	adds	r3, #8
 80106b2:	429a      	cmp	r2, r3
 80106b4:	d104      	bne.n	80106c0 <vTaskSwitchContext+0xbc>
 80106b6:	68bb      	ldr	r3, [r7, #8]
 80106b8:	685b      	ldr	r3, [r3, #4]
 80106ba:	685a      	ldr	r2, [r3, #4]
 80106bc:	68bb      	ldr	r3, [r7, #8]
 80106be:	605a      	str	r2, [r3, #4]
 80106c0:	68bb      	ldr	r3, [r7, #8]
 80106c2:	685b      	ldr	r3, [r3, #4]
 80106c4:	68db      	ldr	r3, [r3, #12]
 80106c6:	4a0b      	ldr	r2, [pc, #44]	; (80106f4 <vTaskSwitchContext+0xf0>)
 80106c8:	6013      	str	r3, [r2, #0]
 80106ca:	4a0b      	ldr	r2, [pc, #44]	; (80106f8 <vTaskSwitchContext+0xf4>)
 80106cc:	68fb      	ldr	r3, [r7, #12]
 80106ce:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80106d0:	4b08      	ldr	r3, [pc, #32]	; (80106f4 <vTaskSwitchContext+0xf0>)
 80106d2:	681b      	ldr	r3, [r3, #0]
 80106d4:	3358      	adds	r3, #88	; 0x58
 80106d6:	4a0a      	ldr	r2, [pc, #40]	; (8010700 <vTaskSwitchContext+0xfc>)
 80106d8:	6013      	str	r3, [r2, #0]
}
 80106da:	bf00      	nop
 80106dc:	3710      	adds	r7, #16
 80106de:	46bd      	mov	sp, r7
 80106e0:	bd80      	pop	{r7, pc}
 80106e2:	bf00      	nop
 80106e4:	200022c4 	.word	0x200022c4
 80106e8:	200022b0 	.word	0x200022b0
 80106ec:	200022cc 	.word	0x200022cc
 80106f0:	200022c8 	.word	0x200022c8
 80106f4:	20001dc8 	.word	0x20001dc8
 80106f8:	200022a4 	.word	0x200022a4
 80106fc:	20001dcc 	.word	0x20001dcc
 8010700:	20000054 	.word	0x20000054

08010704 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8010704:	b580      	push	{r7, lr}
 8010706:	b084      	sub	sp, #16
 8010708:	af00      	add	r7, sp, #0
 801070a:	6078      	str	r0, [r7, #4]
 801070c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 801070e:	687b      	ldr	r3, [r7, #4]
 8010710:	2b00      	cmp	r3, #0
 8010712:	d10a      	bne.n	801072a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8010714:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010718:	f383 8811 	msr	BASEPRI, r3
 801071c:	f3bf 8f6f 	isb	sy
 8010720:	f3bf 8f4f 	dsb	sy
 8010724:	60fb      	str	r3, [r7, #12]
}
 8010726:	bf00      	nop
 8010728:	e7fe      	b.n	8010728 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801072a:	4b07      	ldr	r3, [pc, #28]	; (8010748 <vTaskPlaceOnEventList+0x44>)
 801072c:	681b      	ldr	r3, [r3, #0]
 801072e:	3318      	adds	r3, #24
 8010730:	4619      	mov	r1, r3
 8010732:	6878      	ldr	r0, [r7, #4]
 8010734:	f7fe fc89 	bl	800f04a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8010738:	2101      	movs	r1, #1
 801073a:	6838      	ldr	r0, [r7, #0]
 801073c:	f000 fc82 	bl	8011044 <prvAddCurrentTaskToDelayedList>
}
 8010740:	bf00      	nop
 8010742:	3710      	adds	r7, #16
 8010744:	46bd      	mov	sp, r7
 8010746:	bd80      	pop	{r7, pc}
 8010748:	20001dc8 	.word	0x20001dc8

0801074c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 801074c:	b580      	push	{r7, lr}
 801074e:	b086      	sub	sp, #24
 8010750:	af00      	add	r7, sp, #0
 8010752:	60f8      	str	r0, [r7, #12]
 8010754:	60b9      	str	r1, [r7, #8]
 8010756:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8010758:	68fb      	ldr	r3, [r7, #12]
 801075a:	2b00      	cmp	r3, #0
 801075c:	d10a      	bne.n	8010774 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 801075e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010762:	f383 8811 	msr	BASEPRI, r3
 8010766:	f3bf 8f6f 	isb	sy
 801076a:	f3bf 8f4f 	dsb	sy
 801076e:	617b      	str	r3, [r7, #20]
}
 8010770:	bf00      	nop
 8010772:	e7fe      	b.n	8010772 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8010774:	4b0a      	ldr	r3, [pc, #40]	; (80107a0 <vTaskPlaceOnEventListRestricted+0x54>)
 8010776:	681b      	ldr	r3, [r3, #0]
 8010778:	3318      	adds	r3, #24
 801077a:	4619      	mov	r1, r3
 801077c:	68f8      	ldr	r0, [r7, #12]
 801077e:	f7fe fc40 	bl	800f002 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8010782:	687b      	ldr	r3, [r7, #4]
 8010784:	2b00      	cmp	r3, #0
 8010786:	d002      	beq.n	801078e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8010788:	f04f 33ff 	mov.w	r3, #4294967295
 801078c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 801078e:	6879      	ldr	r1, [r7, #4]
 8010790:	68b8      	ldr	r0, [r7, #8]
 8010792:	f000 fc57 	bl	8011044 <prvAddCurrentTaskToDelayedList>
	}
 8010796:	bf00      	nop
 8010798:	3718      	adds	r7, #24
 801079a:	46bd      	mov	sp, r7
 801079c:	bd80      	pop	{r7, pc}
 801079e:	bf00      	nop
 80107a0:	20001dc8 	.word	0x20001dc8

080107a4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80107a4:	b580      	push	{r7, lr}
 80107a6:	b086      	sub	sp, #24
 80107a8:	af00      	add	r7, sp, #0
 80107aa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80107ac:	687b      	ldr	r3, [r7, #4]
 80107ae:	68db      	ldr	r3, [r3, #12]
 80107b0:	68db      	ldr	r3, [r3, #12]
 80107b2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80107b4:	693b      	ldr	r3, [r7, #16]
 80107b6:	2b00      	cmp	r3, #0
 80107b8:	d10a      	bne.n	80107d0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80107ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80107be:	f383 8811 	msr	BASEPRI, r3
 80107c2:	f3bf 8f6f 	isb	sy
 80107c6:	f3bf 8f4f 	dsb	sy
 80107ca:	60fb      	str	r3, [r7, #12]
}
 80107cc:	bf00      	nop
 80107ce:	e7fe      	b.n	80107ce <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80107d0:	693b      	ldr	r3, [r7, #16]
 80107d2:	3318      	adds	r3, #24
 80107d4:	4618      	mov	r0, r3
 80107d6:	f7fe fc71 	bl	800f0bc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80107da:	4b1e      	ldr	r3, [pc, #120]	; (8010854 <xTaskRemoveFromEventList+0xb0>)
 80107dc:	681b      	ldr	r3, [r3, #0]
 80107de:	2b00      	cmp	r3, #0
 80107e0:	d11d      	bne.n	801081e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80107e2:	693b      	ldr	r3, [r7, #16]
 80107e4:	3304      	adds	r3, #4
 80107e6:	4618      	mov	r0, r3
 80107e8:	f7fe fc68 	bl	800f0bc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80107ec:	693b      	ldr	r3, [r7, #16]
 80107ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80107f0:	4b19      	ldr	r3, [pc, #100]	; (8010858 <xTaskRemoveFromEventList+0xb4>)
 80107f2:	681b      	ldr	r3, [r3, #0]
 80107f4:	429a      	cmp	r2, r3
 80107f6:	d903      	bls.n	8010800 <xTaskRemoveFromEventList+0x5c>
 80107f8:	693b      	ldr	r3, [r7, #16]
 80107fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80107fc:	4a16      	ldr	r2, [pc, #88]	; (8010858 <xTaskRemoveFromEventList+0xb4>)
 80107fe:	6013      	str	r3, [r2, #0]
 8010800:	693b      	ldr	r3, [r7, #16]
 8010802:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010804:	4613      	mov	r3, r2
 8010806:	009b      	lsls	r3, r3, #2
 8010808:	4413      	add	r3, r2
 801080a:	009b      	lsls	r3, r3, #2
 801080c:	4a13      	ldr	r2, [pc, #76]	; (801085c <xTaskRemoveFromEventList+0xb8>)
 801080e:	441a      	add	r2, r3
 8010810:	693b      	ldr	r3, [r7, #16]
 8010812:	3304      	adds	r3, #4
 8010814:	4619      	mov	r1, r3
 8010816:	4610      	mov	r0, r2
 8010818:	f7fe fbf3 	bl	800f002 <vListInsertEnd>
 801081c:	e005      	b.n	801082a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 801081e:	693b      	ldr	r3, [r7, #16]
 8010820:	3318      	adds	r3, #24
 8010822:	4619      	mov	r1, r3
 8010824:	480e      	ldr	r0, [pc, #56]	; (8010860 <xTaskRemoveFromEventList+0xbc>)
 8010826:	f7fe fbec 	bl	800f002 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 801082a:	693b      	ldr	r3, [r7, #16]
 801082c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801082e:	4b0d      	ldr	r3, [pc, #52]	; (8010864 <xTaskRemoveFromEventList+0xc0>)
 8010830:	681b      	ldr	r3, [r3, #0]
 8010832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010834:	429a      	cmp	r2, r3
 8010836:	d905      	bls.n	8010844 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8010838:	2301      	movs	r3, #1
 801083a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 801083c:	4b0a      	ldr	r3, [pc, #40]	; (8010868 <xTaskRemoveFromEventList+0xc4>)
 801083e:	2201      	movs	r2, #1
 8010840:	601a      	str	r2, [r3, #0]
 8010842:	e001      	b.n	8010848 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8010844:	2300      	movs	r3, #0
 8010846:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8010848:	697b      	ldr	r3, [r7, #20]
}
 801084a:	4618      	mov	r0, r3
 801084c:	3718      	adds	r7, #24
 801084e:	46bd      	mov	sp, r7
 8010850:	bd80      	pop	{r7, pc}
 8010852:	bf00      	nop
 8010854:	200022c4 	.word	0x200022c4
 8010858:	200022a4 	.word	0x200022a4
 801085c:	20001dcc 	.word	0x20001dcc
 8010860:	2000225c 	.word	0x2000225c
 8010864:	20001dc8 	.word	0x20001dc8
 8010868:	200022b0 	.word	0x200022b0

0801086c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 801086c:	b480      	push	{r7}
 801086e:	b083      	sub	sp, #12
 8010870:	af00      	add	r7, sp, #0
 8010872:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8010874:	4b06      	ldr	r3, [pc, #24]	; (8010890 <vTaskInternalSetTimeOutState+0x24>)
 8010876:	681a      	ldr	r2, [r3, #0]
 8010878:	687b      	ldr	r3, [r7, #4]
 801087a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 801087c:	4b05      	ldr	r3, [pc, #20]	; (8010894 <vTaskInternalSetTimeOutState+0x28>)
 801087e:	681a      	ldr	r2, [r3, #0]
 8010880:	687b      	ldr	r3, [r7, #4]
 8010882:	605a      	str	r2, [r3, #4]
}
 8010884:	bf00      	nop
 8010886:	370c      	adds	r7, #12
 8010888:	46bd      	mov	sp, r7
 801088a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801088e:	4770      	bx	lr
 8010890:	200022b4 	.word	0x200022b4
 8010894:	200022a0 	.word	0x200022a0

08010898 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8010898:	b580      	push	{r7, lr}
 801089a:	b088      	sub	sp, #32
 801089c:	af00      	add	r7, sp, #0
 801089e:	6078      	str	r0, [r7, #4]
 80108a0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80108a2:	687b      	ldr	r3, [r7, #4]
 80108a4:	2b00      	cmp	r3, #0
 80108a6:	d10a      	bne.n	80108be <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80108a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80108ac:	f383 8811 	msr	BASEPRI, r3
 80108b0:	f3bf 8f6f 	isb	sy
 80108b4:	f3bf 8f4f 	dsb	sy
 80108b8:	613b      	str	r3, [r7, #16]
}
 80108ba:	bf00      	nop
 80108bc:	e7fe      	b.n	80108bc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80108be:	683b      	ldr	r3, [r7, #0]
 80108c0:	2b00      	cmp	r3, #0
 80108c2:	d10a      	bne.n	80108da <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80108c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80108c8:	f383 8811 	msr	BASEPRI, r3
 80108cc:	f3bf 8f6f 	isb	sy
 80108d0:	f3bf 8f4f 	dsb	sy
 80108d4:	60fb      	str	r3, [r7, #12]
}
 80108d6:	bf00      	nop
 80108d8:	e7fe      	b.n	80108d8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80108da:	f001 f883 	bl	80119e4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80108de:	4b1d      	ldr	r3, [pc, #116]	; (8010954 <xTaskCheckForTimeOut+0xbc>)
 80108e0:	681b      	ldr	r3, [r3, #0]
 80108e2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80108e4:	687b      	ldr	r3, [r7, #4]
 80108e6:	685b      	ldr	r3, [r3, #4]
 80108e8:	69ba      	ldr	r2, [r7, #24]
 80108ea:	1ad3      	subs	r3, r2, r3
 80108ec:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80108ee:	683b      	ldr	r3, [r7, #0]
 80108f0:	681b      	ldr	r3, [r3, #0]
 80108f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80108f6:	d102      	bne.n	80108fe <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80108f8:	2300      	movs	r3, #0
 80108fa:	61fb      	str	r3, [r7, #28]
 80108fc:	e023      	b.n	8010946 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80108fe:	687b      	ldr	r3, [r7, #4]
 8010900:	681a      	ldr	r2, [r3, #0]
 8010902:	4b15      	ldr	r3, [pc, #84]	; (8010958 <xTaskCheckForTimeOut+0xc0>)
 8010904:	681b      	ldr	r3, [r3, #0]
 8010906:	429a      	cmp	r2, r3
 8010908:	d007      	beq.n	801091a <xTaskCheckForTimeOut+0x82>
 801090a:	687b      	ldr	r3, [r7, #4]
 801090c:	685b      	ldr	r3, [r3, #4]
 801090e:	69ba      	ldr	r2, [r7, #24]
 8010910:	429a      	cmp	r2, r3
 8010912:	d302      	bcc.n	801091a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8010914:	2301      	movs	r3, #1
 8010916:	61fb      	str	r3, [r7, #28]
 8010918:	e015      	b.n	8010946 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 801091a:	683b      	ldr	r3, [r7, #0]
 801091c:	681b      	ldr	r3, [r3, #0]
 801091e:	697a      	ldr	r2, [r7, #20]
 8010920:	429a      	cmp	r2, r3
 8010922:	d20b      	bcs.n	801093c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8010924:	683b      	ldr	r3, [r7, #0]
 8010926:	681a      	ldr	r2, [r3, #0]
 8010928:	697b      	ldr	r3, [r7, #20]
 801092a:	1ad2      	subs	r2, r2, r3
 801092c:	683b      	ldr	r3, [r7, #0]
 801092e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8010930:	6878      	ldr	r0, [r7, #4]
 8010932:	f7ff ff9b 	bl	801086c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8010936:	2300      	movs	r3, #0
 8010938:	61fb      	str	r3, [r7, #28]
 801093a:	e004      	b.n	8010946 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 801093c:	683b      	ldr	r3, [r7, #0]
 801093e:	2200      	movs	r2, #0
 8010940:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8010942:	2301      	movs	r3, #1
 8010944:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8010946:	f001 f87d 	bl	8011a44 <vPortExitCritical>

	return xReturn;
 801094a:	69fb      	ldr	r3, [r7, #28]
}
 801094c:	4618      	mov	r0, r3
 801094e:	3720      	adds	r7, #32
 8010950:	46bd      	mov	sp, r7
 8010952:	bd80      	pop	{r7, pc}
 8010954:	200022a0 	.word	0x200022a0
 8010958:	200022b4 	.word	0x200022b4

0801095c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 801095c:	b480      	push	{r7}
 801095e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8010960:	4b03      	ldr	r3, [pc, #12]	; (8010970 <vTaskMissedYield+0x14>)
 8010962:	2201      	movs	r2, #1
 8010964:	601a      	str	r2, [r3, #0]
}
 8010966:	bf00      	nop
 8010968:	46bd      	mov	sp, r7
 801096a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801096e:	4770      	bx	lr
 8010970:	200022b0 	.word	0x200022b0

08010974 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8010974:	b580      	push	{r7, lr}
 8010976:	b082      	sub	sp, #8
 8010978:	af00      	add	r7, sp, #0
 801097a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 801097c:	f000 f852 	bl	8010a24 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8010980:	4b06      	ldr	r3, [pc, #24]	; (801099c <prvIdleTask+0x28>)
 8010982:	681b      	ldr	r3, [r3, #0]
 8010984:	2b01      	cmp	r3, #1
 8010986:	d9f9      	bls.n	801097c <prvIdleTask+0x8>
			{
				taskYIELD();
 8010988:	4b05      	ldr	r3, [pc, #20]	; (80109a0 <prvIdleTask+0x2c>)
 801098a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801098e:	601a      	str	r2, [r3, #0]
 8010990:	f3bf 8f4f 	dsb	sy
 8010994:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8010998:	e7f0      	b.n	801097c <prvIdleTask+0x8>
 801099a:	bf00      	nop
 801099c:	20001dcc 	.word	0x20001dcc
 80109a0:	e000ed04 	.word	0xe000ed04

080109a4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80109a4:	b580      	push	{r7, lr}
 80109a6:	b082      	sub	sp, #8
 80109a8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80109aa:	2300      	movs	r3, #0
 80109ac:	607b      	str	r3, [r7, #4]
 80109ae:	e00c      	b.n	80109ca <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80109b0:	687a      	ldr	r2, [r7, #4]
 80109b2:	4613      	mov	r3, r2
 80109b4:	009b      	lsls	r3, r3, #2
 80109b6:	4413      	add	r3, r2
 80109b8:	009b      	lsls	r3, r3, #2
 80109ba:	4a12      	ldr	r2, [pc, #72]	; (8010a04 <prvInitialiseTaskLists+0x60>)
 80109bc:	4413      	add	r3, r2
 80109be:	4618      	mov	r0, r3
 80109c0:	f7fe faf2 	bl	800efa8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80109c4:	687b      	ldr	r3, [r7, #4]
 80109c6:	3301      	adds	r3, #1
 80109c8:	607b      	str	r3, [r7, #4]
 80109ca:	687b      	ldr	r3, [r7, #4]
 80109cc:	2b37      	cmp	r3, #55	; 0x37
 80109ce:	d9ef      	bls.n	80109b0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80109d0:	480d      	ldr	r0, [pc, #52]	; (8010a08 <prvInitialiseTaskLists+0x64>)
 80109d2:	f7fe fae9 	bl	800efa8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80109d6:	480d      	ldr	r0, [pc, #52]	; (8010a0c <prvInitialiseTaskLists+0x68>)
 80109d8:	f7fe fae6 	bl	800efa8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80109dc:	480c      	ldr	r0, [pc, #48]	; (8010a10 <prvInitialiseTaskLists+0x6c>)
 80109de:	f7fe fae3 	bl	800efa8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80109e2:	480c      	ldr	r0, [pc, #48]	; (8010a14 <prvInitialiseTaskLists+0x70>)
 80109e4:	f7fe fae0 	bl	800efa8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80109e8:	480b      	ldr	r0, [pc, #44]	; (8010a18 <prvInitialiseTaskLists+0x74>)
 80109ea:	f7fe fadd 	bl	800efa8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80109ee:	4b0b      	ldr	r3, [pc, #44]	; (8010a1c <prvInitialiseTaskLists+0x78>)
 80109f0:	4a05      	ldr	r2, [pc, #20]	; (8010a08 <prvInitialiseTaskLists+0x64>)
 80109f2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80109f4:	4b0a      	ldr	r3, [pc, #40]	; (8010a20 <prvInitialiseTaskLists+0x7c>)
 80109f6:	4a05      	ldr	r2, [pc, #20]	; (8010a0c <prvInitialiseTaskLists+0x68>)
 80109f8:	601a      	str	r2, [r3, #0]
}
 80109fa:	bf00      	nop
 80109fc:	3708      	adds	r7, #8
 80109fe:	46bd      	mov	sp, r7
 8010a00:	bd80      	pop	{r7, pc}
 8010a02:	bf00      	nop
 8010a04:	20001dcc 	.word	0x20001dcc
 8010a08:	2000222c 	.word	0x2000222c
 8010a0c:	20002240 	.word	0x20002240
 8010a10:	2000225c 	.word	0x2000225c
 8010a14:	20002270 	.word	0x20002270
 8010a18:	20002288 	.word	0x20002288
 8010a1c:	20002254 	.word	0x20002254
 8010a20:	20002258 	.word	0x20002258

08010a24 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8010a24:	b580      	push	{r7, lr}
 8010a26:	b082      	sub	sp, #8
 8010a28:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8010a2a:	e019      	b.n	8010a60 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8010a2c:	f000 ffda 	bl	80119e4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010a30:	4b10      	ldr	r3, [pc, #64]	; (8010a74 <prvCheckTasksWaitingTermination+0x50>)
 8010a32:	68db      	ldr	r3, [r3, #12]
 8010a34:	68db      	ldr	r3, [r3, #12]
 8010a36:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010a38:	687b      	ldr	r3, [r7, #4]
 8010a3a:	3304      	adds	r3, #4
 8010a3c:	4618      	mov	r0, r3
 8010a3e:	f7fe fb3d 	bl	800f0bc <uxListRemove>
				--uxCurrentNumberOfTasks;
 8010a42:	4b0d      	ldr	r3, [pc, #52]	; (8010a78 <prvCheckTasksWaitingTermination+0x54>)
 8010a44:	681b      	ldr	r3, [r3, #0]
 8010a46:	3b01      	subs	r3, #1
 8010a48:	4a0b      	ldr	r2, [pc, #44]	; (8010a78 <prvCheckTasksWaitingTermination+0x54>)
 8010a4a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8010a4c:	4b0b      	ldr	r3, [pc, #44]	; (8010a7c <prvCheckTasksWaitingTermination+0x58>)
 8010a4e:	681b      	ldr	r3, [r3, #0]
 8010a50:	3b01      	subs	r3, #1
 8010a52:	4a0a      	ldr	r2, [pc, #40]	; (8010a7c <prvCheckTasksWaitingTermination+0x58>)
 8010a54:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8010a56:	f000 fff5 	bl	8011a44 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8010a5a:	6878      	ldr	r0, [r7, #4]
 8010a5c:	f000 f810 	bl	8010a80 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8010a60:	4b06      	ldr	r3, [pc, #24]	; (8010a7c <prvCheckTasksWaitingTermination+0x58>)
 8010a62:	681b      	ldr	r3, [r3, #0]
 8010a64:	2b00      	cmp	r3, #0
 8010a66:	d1e1      	bne.n	8010a2c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8010a68:	bf00      	nop
 8010a6a:	bf00      	nop
 8010a6c:	3708      	adds	r7, #8
 8010a6e:	46bd      	mov	sp, r7
 8010a70:	bd80      	pop	{r7, pc}
 8010a72:	bf00      	nop
 8010a74:	20002270 	.word	0x20002270
 8010a78:	2000229c 	.word	0x2000229c
 8010a7c:	20002284 	.word	0x20002284

08010a80 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8010a80:	b580      	push	{r7, lr}
 8010a82:	b084      	sub	sp, #16
 8010a84:	af00      	add	r7, sp, #0
 8010a86:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8010a88:	687b      	ldr	r3, [r7, #4]
 8010a8a:	3358      	adds	r3, #88	; 0x58
 8010a8c:	4618      	mov	r0, r3
 8010a8e:	f002 f867 	bl	8012b60 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8010a92:	687b      	ldr	r3, [r7, #4]
 8010a94:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 8010a98:	2b00      	cmp	r3, #0
 8010a9a:	d108      	bne.n	8010aae <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8010a9c:	687b      	ldr	r3, [r7, #4]
 8010a9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010aa0:	4618      	mov	r0, r3
 8010aa2:	f001 f98d 	bl	8011dc0 <vPortFree>
				vPortFree( pxTCB );
 8010aa6:	6878      	ldr	r0, [r7, #4]
 8010aa8:	f001 f98a 	bl	8011dc0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8010aac:	e018      	b.n	8010ae0 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8010aae:	687b      	ldr	r3, [r7, #4]
 8010ab0:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 8010ab4:	2b01      	cmp	r3, #1
 8010ab6:	d103      	bne.n	8010ac0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8010ab8:	6878      	ldr	r0, [r7, #4]
 8010aba:	f001 f981 	bl	8011dc0 <vPortFree>
	}
 8010abe:	e00f      	b.n	8010ae0 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8010ac0:	687b      	ldr	r3, [r7, #4]
 8010ac2:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 8010ac6:	2b02      	cmp	r3, #2
 8010ac8:	d00a      	beq.n	8010ae0 <prvDeleteTCB+0x60>
	__asm volatile
 8010aca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ace:	f383 8811 	msr	BASEPRI, r3
 8010ad2:	f3bf 8f6f 	isb	sy
 8010ad6:	f3bf 8f4f 	dsb	sy
 8010ada:	60fb      	str	r3, [r7, #12]
}
 8010adc:	bf00      	nop
 8010ade:	e7fe      	b.n	8010ade <prvDeleteTCB+0x5e>
	}
 8010ae0:	bf00      	nop
 8010ae2:	3710      	adds	r7, #16
 8010ae4:	46bd      	mov	sp, r7
 8010ae6:	bd80      	pop	{r7, pc}

08010ae8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8010ae8:	b480      	push	{r7}
 8010aea:	b083      	sub	sp, #12
 8010aec:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010aee:	4b0c      	ldr	r3, [pc, #48]	; (8010b20 <prvResetNextTaskUnblockTime+0x38>)
 8010af0:	681b      	ldr	r3, [r3, #0]
 8010af2:	681b      	ldr	r3, [r3, #0]
 8010af4:	2b00      	cmp	r3, #0
 8010af6:	d104      	bne.n	8010b02 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8010af8:	4b0a      	ldr	r3, [pc, #40]	; (8010b24 <prvResetNextTaskUnblockTime+0x3c>)
 8010afa:	f04f 32ff 	mov.w	r2, #4294967295
 8010afe:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8010b00:	e008      	b.n	8010b14 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010b02:	4b07      	ldr	r3, [pc, #28]	; (8010b20 <prvResetNextTaskUnblockTime+0x38>)
 8010b04:	681b      	ldr	r3, [r3, #0]
 8010b06:	68db      	ldr	r3, [r3, #12]
 8010b08:	68db      	ldr	r3, [r3, #12]
 8010b0a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8010b0c:	687b      	ldr	r3, [r7, #4]
 8010b0e:	685b      	ldr	r3, [r3, #4]
 8010b10:	4a04      	ldr	r2, [pc, #16]	; (8010b24 <prvResetNextTaskUnblockTime+0x3c>)
 8010b12:	6013      	str	r3, [r2, #0]
}
 8010b14:	bf00      	nop
 8010b16:	370c      	adds	r7, #12
 8010b18:	46bd      	mov	sp, r7
 8010b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b1e:	4770      	bx	lr
 8010b20:	20002254 	.word	0x20002254
 8010b24:	200022bc 	.word	0x200022bc

08010b28 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8010b28:	b480      	push	{r7}
 8010b2a:	b083      	sub	sp, #12
 8010b2c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8010b2e:	4b0b      	ldr	r3, [pc, #44]	; (8010b5c <xTaskGetSchedulerState+0x34>)
 8010b30:	681b      	ldr	r3, [r3, #0]
 8010b32:	2b00      	cmp	r3, #0
 8010b34:	d102      	bne.n	8010b3c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8010b36:	2301      	movs	r3, #1
 8010b38:	607b      	str	r3, [r7, #4]
 8010b3a:	e008      	b.n	8010b4e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010b3c:	4b08      	ldr	r3, [pc, #32]	; (8010b60 <xTaskGetSchedulerState+0x38>)
 8010b3e:	681b      	ldr	r3, [r3, #0]
 8010b40:	2b00      	cmp	r3, #0
 8010b42:	d102      	bne.n	8010b4a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8010b44:	2302      	movs	r3, #2
 8010b46:	607b      	str	r3, [r7, #4]
 8010b48:	e001      	b.n	8010b4e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8010b4a:	2300      	movs	r3, #0
 8010b4c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8010b4e:	687b      	ldr	r3, [r7, #4]
	}
 8010b50:	4618      	mov	r0, r3
 8010b52:	370c      	adds	r7, #12
 8010b54:	46bd      	mov	sp, r7
 8010b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b5a:	4770      	bx	lr
 8010b5c:	200022a8 	.word	0x200022a8
 8010b60:	200022c4 	.word	0x200022c4

08010b64 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8010b64:	b580      	push	{r7, lr}
 8010b66:	b086      	sub	sp, #24
 8010b68:	af00      	add	r7, sp, #0
 8010b6a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8010b6c:	687b      	ldr	r3, [r7, #4]
 8010b6e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8010b70:	2300      	movs	r3, #0
 8010b72:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8010b74:	687b      	ldr	r3, [r7, #4]
 8010b76:	2b00      	cmp	r3, #0
 8010b78:	d056      	beq.n	8010c28 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8010b7a:	4b2e      	ldr	r3, [pc, #184]	; (8010c34 <xTaskPriorityDisinherit+0xd0>)
 8010b7c:	681b      	ldr	r3, [r3, #0]
 8010b7e:	693a      	ldr	r2, [r7, #16]
 8010b80:	429a      	cmp	r2, r3
 8010b82:	d00a      	beq.n	8010b9a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8010b84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b88:	f383 8811 	msr	BASEPRI, r3
 8010b8c:	f3bf 8f6f 	isb	sy
 8010b90:	f3bf 8f4f 	dsb	sy
 8010b94:	60fb      	str	r3, [r7, #12]
}
 8010b96:	bf00      	nop
 8010b98:	e7fe      	b.n	8010b98 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8010b9a:	693b      	ldr	r3, [r7, #16]
 8010b9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010b9e:	2b00      	cmp	r3, #0
 8010ba0:	d10a      	bne.n	8010bb8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8010ba2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ba6:	f383 8811 	msr	BASEPRI, r3
 8010baa:	f3bf 8f6f 	isb	sy
 8010bae:	f3bf 8f4f 	dsb	sy
 8010bb2:	60bb      	str	r3, [r7, #8]
}
 8010bb4:	bf00      	nop
 8010bb6:	e7fe      	b.n	8010bb6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8010bb8:	693b      	ldr	r3, [r7, #16]
 8010bba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010bbc:	1e5a      	subs	r2, r3, #1
 8010bbe:	693b      	ldr	r3, [r7, #16]
 8010bc0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8010bc2:	693b      	ldr	r3, [r7, #16]
 8010bc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010bc6:	693b      	ldr	r3, [r7, #16]
 8010bc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010bca:	429a      	cmp	r2, r3
 8010bcc:	d02c      	beq.n	8010c28 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8010bce:	693b      	ldr	r3, [r7, #16]
 8010bd0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010bd2:	2b00      	cmp	r3, #0
 8010bd4:	d128      	bne.n	8010c28 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010bd6:	693b      	ldr	r3, [r7, #16]
 8010bd8:	3304      	adds	r3, #4
 8010bda:	4618      	mov	r0, r3
 8010bdc:	f7fe fa6e 	bl	800f0bc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8010be0:	693b      	ldr	r3, [r7, #16]
 8010be2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8010be4:	693b      	ldr	r3, [r7, #16]
 8010be6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010be8:	693b      	ldr	r3, [r7, #16]
 8010bea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010bec:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8010bf0:	693b      	ldr	r3, [r7, #16]
 8010bf2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8010bf4:	693b      	ldr	r3, [r7, #16]
 8010bf6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010bf8:	4b0f      	ldr	r3, [pc, #60]	; (8010c38 <xTaskPriorityDisinherit+0xd4>)
 8010bfa:	681b      	ldr	r3, [r3, #0]
 8010bfc:	429a      	cmp	r2, r3
 8010bfe:	d903      	bls.n	8010c08 <xTaskPriorityDisinherit+0xa4>
 8010c00:	693b      	ldr	r3, [r7, #16]
 8010c02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010c04:	4a0c      	ldr	r2, [pc, #48]	; (8010c38 <xTaskPriorityDisinherit+0xd4>)
 8010c06:	6013      	str	r3, [r2, #0]
 8010c08:	693b      	ldr	r3, [r7, #16]
 8010c0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010c0c:	4613      	mov	r3, r2
 8010c0e:	009b      	lsls	r3, r3, #2
 8010c10:	4413      	add	r3, r2
 8010c12:	009b      	lsls	r3, r3, #2
 8010c14:	4a09      	ldr	r2, [pc, #36]	; (8010c3c <xTaskPriorityDisinherit+0xd8>)
 8010c16:	441a      	add	r2, r3
 8010c18:	693b      	ldr	r3, [r7, #16]
 8010c1a:	3304      	adds	r3, #4
 8010c1c:	4619      	mov	r1, r3
 8010c1e:	4610      	mov	r0, r2
 8010c20:	f7fe f9ef 	bl	800f002 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8010c24:	2301      	movs	r3, #1
 8010c26:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8010c28:	697b      	ldr	r3, [r7, #20]
	}
 8010c2a:	4618      	mov	r0, r3
 8010c2c:	3718      	adds	r7, #24
 8010c2e:	46bd      	mov	sp, r7
 8010c30:	bd80      	pop	{r7, pc}
 8010c32:	bf00      	nop
 8010c34:	20001dc8 	.word	0x20001dc8
 8010c38:	200022a4 	.word	0x200022a4
 8010c3c:	20001dcc 	.word	0x20001dcc

08010c40 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8010c40:	b580      	push	{r7, lr}
 8010c42:	b086      	sub	sp, #24
 8010c44:	af00      	add	r7, sp, #0
 8010c46:	60f8      	str	r0, [r7, #12]
 8010c48:	60b9      	str	r1, [r7, #8]
 8010c4a:	607a      	str	r2, [r7, #4]
 8010c4c:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8010c4e:	f000 fec9 	bl	80119e4 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8010c52:	4b29      	ldr	r3, [pc, #164]	; (8010cf8 <xTaskNotifyWait+0xb8>)
 8010c54:	681b      	ldr	r3, [r3, #0]
 8010c56:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 8010c5a:	b2db      	uxtb	r3, r3
 8010c5c:	2b02      	cmp	r3, #2
 8010c5e:	d01c      	beq.n	8010c9a <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8010c60:	4b25      	ldr	r3, [pc, #148]	; (8010cf8 <xTaskNotifyWait+0xb8>)
 8010c62:	681b      	ldr	r3, [r3, #0]
 8010c64:	f8d3 10b8 	ldr.w	r1, [r3, #184]	; 0xb8
 8010c68:	68fa      	ldr	r2, [r7, #12]
 8010c6a:	43d2      	mvns	r2, r2
 8010c6c:	400a      	ands	r2, r1
 8010c6e:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8010c72:	4b21      	ldr	r3, [pc, #132]	; (8010cf8 <xTaskNotifyWait+0xb8>)
 8010c74:	681b      	ldr	r3, [r3, #0]
 8010c76:	2201      	movs	r2, #1
 8010c78:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc

				if( xTicksToWait > ( TickType_t ) 0 )
 8010c7c:	683b      	ldr	r3, [r7, #0]
 8010c7e:	2b00      	cmp	r3, #0
 8010c80:	d00b      	beq.n	8010c9a <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8010c82:	2101      	movs	r1, #1
 8010c84:	6838      	ldr	r0, [r7, #0]
 8010c86:	f000 f9dd 	bl	8011044 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8010c8a:	4b1c      	ldr	r3, [pc, #112]	; (8010cfc <xTaskNotifyWait+0xbc>)
 8010c8c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010c90:	601a      	str	r2, [r3, #0]
 8010c92:	f3bf 8f4f 	dsb	sy
 8010c96:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8010c9a:	f000 fed3 	bl	8011a44 <vPortExitCritical>

		taskENTER_CRITICAL();
 8010c9e:	f000 fea1 	bl	80119e4 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 8010ca2:	687b      	ldr	r3, [r7, #4]
 8010ca4:	2b00      	cmp	r3, #0
 8010ca6:	d005      	beq.n	8010cb4 <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8010ca8:	4b13      	ldr	r3, [pc, #76]	; (8010cf8 <xTaskNotifyWait+0xb8>)
 8010caa:	681b      	ldr	r3, [r3, #0]
 8010cac:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 8010cb0:	687b      	ldr	r3, [r7, #4]
 8010cb2:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8010cb4:	4b10      	ldr	r3, [pc, #64]	; (8010cf8 <xTaskNotifyWait+0xb8>)
 8010cb6:	681b      	ldr	r3, [r3, #0]
 8010cb8:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 8010cbc:	b2db      	uxtb	r3, r3
 8010cbe:	2b02      	cmp	r3, #2
 8010cc0:	d002      	beq.n	8010cc8 <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 8010cc2:	2300      	movs	r3, #0
 8010cc4:	617b      	str	r3, [r7, #20]
 8010cc6:	e00a      	b.n	8010cde <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8010cc8:	4b0b      	ldr	r3, [pc, #44]	; (8010cf8 <xTaskNotifyWait+0xb8>)
 8010cca:	681b      	ldr	r3, [r3, #0]
 8010ccc:	f8d3 10b8 	ldr.w	r1, [r3, #184]	; 0xb8
 8010cd0:	68ba      	ldr	r2, [r7, #8]
 8010cd2:	43d2      	mvns	r2, r2
 8010cd4:	400a      	ands	r2, r1
 8010cd6:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
				xReturn = pdTRUE;
 8010cda:	2301      	movs	r3, #1
 8010cdc:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8010cde:	4b06      	ldr	r3, [pc, #24]	; (8010cf8 <xTaskNotifyWait+0xb8>)
 8010ce0:	681b      	ldr	r3, [r3, #0]
 8010ce2:	2200      	movs	r2, #0
 8010ce4:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
		}
		taskEXIT_CRITICAL();
 8010ce8:	f000 feac 	bl	8011a44 <vPortExitCritical>

		return xReturn;
 8010cec:	697b      	ldr	r3, [r7, #20]
	}
 8010cee:	4618      	mov	r0, r3
 8010cf0:	3718      	adds	r7, #24
 8010cf2:	46bd      	mov	sp, r7
 8010cf4:	bd80      	pop	{r7, pc}
 8010cf6:	bf00      	nop
 8010cf8:	20001dc8 	.word	0x20001dc8
 8010cfc:	e000ed04 	.word	0xe000ed04

08010d00 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8010d00:	b580      	push	{r7, lr}
 8010d02:	b08a      	sub	sp, #40	; 0x28
 8010d04:	af00      	add	r7, sp, #0
 8010d06:	60f8      	str	r0, [r7, #12]
 8010d08:	60b9      	str	r1, [r7, #8]
 8010d0a:	603b      	str	r3, [r7, #0]
 8010d0c:	4613      	mov	r3, r2
 8010d0e:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8010d10:	2301      	movs	r3, #1
 8010d12:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8010d14:	68fb      	ldr	r3, [r7, #12]
 8010d16:	2b00      	cmp	r3, #0
 8010d18:	d10a      	bne.n	8010d30 <xTaskGenericNotify+0x30>
	__asm volatile
 8010d1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d1e:	f383 8811 	msr	BASEPRI, r3
 8010d22:	f3bf 8f6f 	isb	sy
 8010d26:	f3bf 8f4f 	dsb	sy
 8010d2a:	61bb      	str	r3, [r7, #24]
}
 8010d2c:	bf00      	nop
 8010d2e:	e7fe      	b.n	8010d2e <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 8010d30:	68fb      	ldr	r3, [r7, #12]
 8010d32:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 8010d34:	f000 fe56 	bl	80119e4 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8010d38:	683b      	ldr	r3, [r7, #0]
 8010d3a:	2b00      	cmp	r3, #0
 8010d3c:	d004      	beq.n	8010d48 <xTaskGenericNotify+0x48>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8010d3e:	6a3b      	ldr	r3, [r7, #32]
 8010d40:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 8010d44:	683b      	ldr	r3, [r7, #0]
 8010d46:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8010d48:	6a3b      	ldr	r3, [r7, #32]
 8010d4a:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 8010d4e:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8010d50:	6a3b      	ldr	r3, [r7, #32]
 8010d52:	2202      	movs	r2, #2
 8010d54:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc

			switch( eAction )
 8010d58:	79fb      	ldrb	r3, [r7, #7]
 8010d5a:	2b04      	cmp	r3, #4
 8010d5c:	d82d      	bhi.n	8010dba <xTaskGenericNotify+0xba>
 8010d5e:	a201      	add	r2, pc, #4	; (adr r2, 8010d64 <xTaskGenericNotify+0x64>)
 8010d60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010d64:	08010ddd 	.word	0x08010ddd
 8010d68:	08010d79 	.word	0x08010d79
 8010d6c:	08010d8b 	.word	0x08010d8b
 8010d70:	08010d9b 	.word	0x08010d9b
 8010d74:	08010da5 	.word	0x08010da5
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8010d78:	6a3b      	ldr	r3, [r7, #32]
 8010d7a:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 8010d7e:	68bb      	ldr	r3, [r7, #8]
 8010d80:	431a      	orrs	r2, r3
 8010d82:	6a3b      	ldr	r3, [r7, #32]
 8010d84:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
					break;
 8010d88:	e02b      	b.n	8010de2 <xTaskGenericNotify+0xe2>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8010d8a:	6a3b      	ldr	r3, [r7, #32]
 8010d8c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8010d90:	1c5a      	adds	r2, r3, #1
 8010d92:	6a3b      	ldr	r3, [r7, #32]
 8010d94:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
					break;
 8010d98:	e023      	b.n	8010de2 <xTaskGenericNotify+0xe2>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8010d9a:	6a3b      	ldr	r3, [r7, #32]
 8010d9c:	68ba      	ldr	r2, [r7, #8]
 8010d9e:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
					break;
 8010da2:	e01e      	b.n	8010de2 <xTaskGenericNotify+0xe2>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8010da4:	7ffb      	ldrb	r3, [r7, #31]
 8010da6:	2b02      	cmp	r3, #2
 8010da8:	d004      	beq.n	8010db4 <xTaskGenericNotify+0xb4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8010daa:	6a3b      	ldr	r3, [r7, #32]
 8010dac:	68ba      	ldr	r2, [r7, #8]
 8010dae:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8010db2:	e016      	b.n	8010de2 <xTaskGenericNotify+0xe2>
						xReturn = pdFAIL;
 8010db4:	2300      	movs	r3, #0
 8010db6:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 8010db8:	e013      	b.n	8010de2 <xTaskGenericNotify+0xe2>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8010dba:	6a3b      	ldr	r3, [r7, #32]
 8010dbc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8010dc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010dc4:	d00c      	beq.n	8010de0 <xTaskGenericNotify+0xe0>
	__asm volatile
 8010dc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010dca:	f383 8811 	msr	BASEPRI, r3
 8010dce:	f3bf 8f6f 	isb	sy
 8010dd2:	f3bf 8f4f 	dsb	sy
 8010dd6:	617b      	str	r3, [r7, #20]
}
 8010dd8:	bf00      	nop
 8010dda:	e7fe      	b.n	8010dda <xTaskGenericNotify+0xda>
					break;
 8010ddc:	bf00      	nop
 8010dde:	e000      	b.n	8010de2 <xTaskGenericNotify+0xe2>

					break;
 8010de0:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8010de2:	7ffb      	ldrb	r3, [r7, #31]
 8010de4:	2b01      	cmp	r3, #1
 8010de6:	d13a      	bne.n	8010e5e <xTaskGenericNotify+0x15e>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010de8:	6a3b      	ldr	r3, [r7, #32]
 8010dea:	3304      	adds	r3, #4
 8010dec:	4618      	mov	r0, r3
 8010dee:	f7fe f965 	bl	800f0bc <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8010df2:	6a3b      	ldr	r3, [r7, #32]
 8010df4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010df6:	4b1d      	ldr	r3, [pc, #116]	; (8010e6c <xTaskGenericNotify+0x16c>)
 8010df8:	681b      	ldr	r3, [r3, #0]
 8010dfa:	429a      	cmp	r2, r3
 8010dfc:	d903      	bls.n	8010e06 <xTaskGenericNotify+0x106>
 8010dfe:	6a3b      	ldr	r3, [r7, #32]
 8010e00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010e02:	4a1a      	ldr	r2, [pc, #104]	; (8010e6c <xTaskGenericNotify+0x16c>)
 8010e04:	6013      	str	r3, [r2, #0]
 8010e06:	6a3b      	ldr	r3, [r7, #32]
 8010e08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010e0a:	4613      	mov	r3, r2
 8010e0c:	009b      	lsls	r3, r3, #2
 8010e0e:	4413      	add	r3, r2
 8010e10:	009b      	lsls	r3, r3, #2
 8010e12:	4a17      	ldr	r2, [pc, #92]	; (8010e70 <xTaskGenericNotify+0x170>)
 8010e14:	441a      	add	r2, r3
 8010e16:	6a3b      	ldr	r3, [r7, #32]
 8010e18:	3304      	adds	r3, #4
 8010e1a:	4619      	mov	r1, r3
 8010e1c:	4610      	mov	r0, r2
 8010e1e:	f7fe f8f0 	bl	800f002 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8010e22:	6a3b      	ldr	r3, [r7, #32]
 8010e24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010e26:	2b00      	cmp	r3, #0
 8010e28:	d00a      	beq.n	8010e40 <xTaskGenericNotify+0x140>
	__asm volatile
 8010e2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e2e:	f383 8811 	msr	BASEPRI, r3
 8010e32:	f3bf 8f6f 	isb	sy
 8010e36:	f3bf 8f4f 	dsb	sy
 8010e3a:	613b      	str	r3, [r7, #16]
}
 8010e3c:	bf00      	nop
 8010e3e:	e7fe      	b.n	8010e3e <xTaskGenericNotify+0x13e>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8010e40:	6a3b      	ldr	r3, [r7, #32]
 8010e42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010e44:	4b0b      	ldr	r3, [pc, #44]	; (8010e74 <xTaskGenericNotify+0x174>)
 8010e46:	681b      	ldr	r3, [r3, #0]
 8010e48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010e4a:	429a      	cmp	r2, r3
 8010e4c:	d907      	bls.n	8010e5e <xTaskGenericNotify+0x15e>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8010e4e:	4b0a      	ldr	r3, [pc, #40]	; (8010e78 <xTaskGenericNotify+0x178>)
 8010e50:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010e54:	601a      	str	r2, [r3, #0]
 8010e56:	f3bf 8f4f 	dsb	sy
 8010e5a:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8010e5e:	f000 fdf1 	bl	8011a44 <vPortExitCritical>

		return xReturn;
 8010e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8010e64:	4618      	mov	r0, r3
 8010e66:	3728      	adds	r7, #40	; 0x28
 8010e68:	46bd      	mov	sp, r7
 8010e6a:	bd80      	pop	{r7, pc}
 8010e6c:	200022a4 	.word	0x200022a4
 8010e70:	20001dcc 	.word	0x20001dcc
 8010e74:	20001dc8 	.word	0x20001dc8
 8010e78:	e000ed04 	.word	0xe000ed04

08010e7c <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8010e7c:	b580      	push	{r7, lr}
 8010e7e:	b08e      	sub	sp, #56	; 0x38
 8010e80:	af00      	add	r7, sp, #0
 8010e82:	60f8      	str	r0, [r7, #12]
 8010e84:	60b9      	str	r1, [r7, #8]
 8010e86:	603b      	str	r3, [r7, #0]
 8010e88:	4613      	mov	r3, r2
 8010e8a:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8010e8c:	2301      	movs	r3, #1
 8010e8e:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8010e90:	68fb      	ldr	r3, [r7, #12]
 8010e92:	2b00      	cmp	r3, #0
 8010e94:	d10a      	bne.n	8010eac <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 8010e96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e9a:	f383 8811 	msr	BASEPRI, r3
 8010e9e:	f3bf 8f6f 	isb	sy
 8010ea2:	f3bf 8f4f 	dsb	sy
 8010ea6:	627b      	str	r3, [r7, #36]	; 0x24
}
 8010ea8:	bf00      	nop
 8010eaa:	e7fe      	b.n	8010eaa <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8010eac:	f000 fe7c 	bl	8011ba8 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 8010eb0:	68fb      	ldr	r3, [r7, #12]
 8010eb2:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 8010eb4:	f3ef 8211 	mrs	r2, BASEPRI
 8010eb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ebc:	f383 8811 	msr	BASEPRI, r3
 8010ec0:	f3bf 8f6f 	isb	sy
 8010ec4:	f3bf 8f4f 	dsb	sy
 8010ec8:	623a      	str	r2, [r7, #32]
 8010eca:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 8010ecc:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8010ece:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 8010ed0:	683b      	ldr	r3, [r7, #0]
 8010ed2:	2b00      	cmp	r3, #0
 8010ed4:	d004      	beq.n	8010ee0 <xTaskGenericNotifyFromISR+0x64>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8010ed6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ed8:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 8010edc:	683b      	ldr	r3, [r7, #0]
 8010ede:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8010ee0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ee2:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 8010ee6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8010eea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010eec:	2202      	movs	r2, #2
 8010eee:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc

			switch( eAction )
 8010ef2:	79fb      	ldrb	r3, [r7, #7]
 8010ef4:	2b04      	cmp	r3, #4
 8010ef6:	d82f      	bhi.n	8010f58 <xTaskGenericNotifyFromISR+0xdc>
 8010ef8:	a201      	add	r2, pc, #4	; (adr r2, 8010f00 <xTaskGenericNotifyFromISR+0x84>)
 8010efa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010efe:	bf00      	nop
 8010f00:	08010f7b 	.word	0x08010f7b
 8010f04:	08010f15 	.word	0x08010f15
 8010f08:	08010f27 	.word	0x08010f27
 8010f0c:	08010f37 	.word	0x08010f37
 8010f10:	08010f41 	.word	0x08010f41
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8010f14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f16:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 8010f1a:	68bb      	ldr	r3, [r7, #8]
 8010f1c:	431a      	orrs	r2, r3
 8010f1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f20:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
					break;
 8010f24:	e02c      	b.n	8010f80 <xTaskGenericNotifyFromISR+0x104>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8010f26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f28:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8010f2c:	1c5a      	adds	r2, r3, #1
 8010f2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f30:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
					break;
 8010f34:	e024      	b.n	8010f80 <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8010f36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f38:	68ba      	ldr	r2, [r7, #8]
 8010f3a:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
					break;
 8010f3e:	e01f      	b.n	8010f80 <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8010f40:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8010f44:	2b02      	cmp	r3, #2
 8010f46:	d004      	beq.n	8010f52 <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8010f48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f4a:	68ba      	ldr	r2, [r7, #8]
 8010f4c:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8010f50:	e016      	b.n	8010f80 <xTaskGenericNotifyFromISR+0x104>
						xReturn = pdFAIL;
 8010f52:	2300      	movs	r3, #0
 8010f54:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 8010f56:	e013      	b.n	8010f80 <xTaskGenericNotifyFromISR+0x104>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8010f58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f5a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8010f5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010f62:	d00c      	beq.n	8010f7e <xTaskGenericNotifyFromISR+0x102>
	__asm volatile
 8010f64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f68:	f383 8811 	msr	BASEPRI, r3
 8010f6c:	f3bf 8f6f 	isb	sy
 8010f70:	f3bf 8f4f 	dsb	sy
 8010f74:	61bb      	str	r3, [r7, #24]
}
 8010f76:	bf00      	nop
 8010f78:	e7fe      	b.n	8010f78 <xTaskGenericNotifyFromISR+0xfc>
					break;
 8010f7a:	bf00      	nop
 8010f7c:	e000      	b.n	8010f80 <xTaskGenericNotifyFromISR+0x104>
					break;
 8010f7e:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8010f80:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8010f84:	2b01      	cmp	r3, #1
 8010f86:	d146      	bne.n	8011016 <xTaskGenericNotifyFromISR+0x19a>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8010f88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010f8c:	2b00      	cmp	r3, #0
 8010f8e:	d00a      	beq.n	8010fa6 <xTaskGenericNotifyFromISR+0x12a>
	__asm volatile
 8010f90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f94:	f383 8811 	msr	BASEPRI, r3
 8010f98:	f3bf 8f6f 	isb	sy
 8010f9c:	f3bf 8f4f 	dsb	sy
 8010fa0:	617b      	str	r3, [r7, #20]
}
 8010fa2:	bf00      	nop
 8010fa4:	e7fe      	b.n	8010fa4 <xTaskGenericNotifyFromISR+0x128>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010fa6:	4b21      	ldr	r3, [pc, #132]	; (801102c <xTaskGenericNotifyFromISR+0x1b0>)
 8010fa8:	681b      	ldr	r3, [r3, #0]
 8010faa:	2b00      	cmp	r3, #0
 8010fac:	d11d      	bne.n	8010fea <xTaskGenericNotifyFromISR+0x16e>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010fae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010fb0:	3304      	adds	r3, #4
 8010fb2:	4618      	mov	r0, r3
 8010fb4:	f7fe f882 	bl	800f0bc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8010fb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010fba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010fbc:	4b1c      	ldr	r3, [pc, #112]	; (8011030 <xTaskGenericNotifyFromISR+0x1b4>)
 8010fbe:	681b      	ldr	r3, [r3, #0]
 8010fc0:	429a      	cmp	r2, r3
 8010fc2:	d903      	bls.n	8010fcc <xTaskGenericNotifyFromISR+0x150>
 8010fc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010fc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010fc8:	4a19      	ldr	r2, [pc, #100]	; (8011030 <xTaskGenericNotifyFromISR+0x1b4>)
 8010fca:	6013      	str	r3, [r2, #0]
 8010fcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010fce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010fd0:	4613      	mov	r3, r2
 8010fd2:	009b      	lsls	r3, r3, #2
 8010fd4:	4413      	add	r3, r2
 8010fd6:	009b      	lsls	r3, r3, #2
 8010fd8:	4a16      	ldr	r2, [pc, #88]	; (8011034 <xTaskGenericNotifyFromISR+0x1b8>)
 8010fda:	441a      	add	r2, r3
 8010fdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010fde:	3304      	adds	r3, #4
 8010fe0:	4619      	mov	r1, r3
 8010fe2:	4610      	mov	r0, r2
 8010fe4:	f7fe f80d 	bl	800f002 <vListInsertEnd>
 8010fe8:	e005      	b.n	8010ff6 <xTaskGenericNotifyFromISR+0x17a>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8010fea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010fec:	3318      	adds	r3, #24
 8010fee:	4619      	mov	r1, r3
 8010ff0:	4811      	ldr	r0, [pc, #68]	; (8011038 <xTaskGenericNotifyFromISR+0x1bc>)
 8010ff2:	f7fe f806 	bl	800f002 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8010ff6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ff8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010ffa:	4b10      	ldr	r3, [pc, #64]	; (801103c <xTaskGenericNotifyFromISR+0x1c0>)
 8010ffc:	681b      	ldr	r3, [r3, #0]
 8010ffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011000:	429a      	cmp	r2, r3
 8011002:	d908      	bls.n	8011016 <xTaskGenericNotifyFromISR+0x19a>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8011004:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011006:	2b00      	cmp	r3, #0
 8011008:	d002      	beq.n	8011010 <xTaskGenericNotifyFromISR+0x194>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 801100a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801100c:	2201      	movs	r2, #1
 801100e:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8011010:	4b0b      	ldr	r3, [pc, #44]	; (8011040 <xTaskGenericNotifyFromISR+0x1c4>)
 8011012:	2201      	movs	r2, #1
 8011014:	601a      	str	r2, [r3, #0]
 8011016:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011018:	613b      	str	r3, [r7, #16]
	__asm volatile
 801101a:	693b      	ldr	r3, [r7, #16]
 801101c:	f383 8811 	msr	BASEPRI, r3
}
 8011020:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 8011022:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 8011024:	4618      	mov	r0, r3
 8011026:	3738      	adds	r7, #56	; 0x38
 8011028:	46bd      	mov	sp, r7
 801102a:	bd80      	pop	{r7, pc}
 801102c:	200022c4 	.word	0x200022c4
 8011030:	200022a4 	.word	0x200022a4
 8011034:	20001dcc 	.word	0x20001dcc
 8011038:	2000225c 	.word	0x2000225c
 801103c:	20001dc8 	.word	0x20001dc8
 8011040:	200022b0 	.word	0x200022b0

08011044 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8011044:	b580      	push	{r7, lr}
 8011046:	b084      	sub	sp, #16
 8011048:	af00      	add	r7, sp, #0
 801104a:	6078      	str	r0, [r7, #4]
 801104c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 801104e:	4b21      	ldr	r3, [pc, #132]	; (80110d4 <prvAddCurrentTaskToDelayedList+0x90>)
 8011050:	681b      	ldr	r3, [r3, #0]
 8011052:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011054:	4b20      	ldr	r3, [pc, #128]	; (80110d8 <prvAddCurrentTaskToDelayedList+0x94>)
 8011056:	681b      	ldr	r3, [r3, #0]
 8011058:	3304      	adds	r3, #4
 801105a:	4618      	mov	r0, r3
 801105c:	f7fe f82e 	bl	800f0bc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8011060:	687b      	ldr	r3, [r7, #4]
 8011062:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011066:	d10a      	bne.n	801107e <prvAddCurrentTaskToDelayedList+0x3a>
 8011068:	683b      	ldr	r3, [r7, #0]
 801106a:	2b00      	cmp	r3, #0
 801106c:	d007      	beq.n	801107e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801106e:	4b1a      	ldr	r3, [pc, #104]	; (80110d8 <prvAddCurrentTaskToDelayedList+0x94>)
 8011070:	681b      	ldr	r3, [r3, #0]
 8011072:	3304      	adds	r3, #4
 8011074:	4619      	mov	r1, r3
 8011076:	4819      	ldr	r0, [pc, #100]	; (80110dc <prvAddCurrentTaskToDelayedList+0x98>)
 8011078:	f7fd ffc3 	bl	800f002 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 801107c:	e026      	b.n	80110cc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 801107e:	68fa      	ldr	r2, [r7, #12]
 8011080:	687b      	ldr	r3, [r7, #4]
 8011082:	4413      	add	r3, r2
 8011084:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8011086:	4b14      	ldr	r3, [pc, #80]	; (80110d8 <prvAddCurrentTaskToDelayedList+0x94>)
 8011088:	681b      	ldr	r3, [r3, #0]
 801108a:	68ba      	ldr	r2, [r7, #8]
 801108c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 801108e:	68ba      	ldr	r2, [r7, #8]
 8011090:	68fb      	ldr	r3, [r7, #12]
 8011092:	429a      	cmp	r2, r3
 8011094:	d209      	bcs.n	80110aa <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011096:	4b12      	ldr	r3, [pc, #72]	; (80110e0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8011098:	681a      	ldr	r2, [r3, #0]
 801109a:	4b0f      	ldr	r3, [pc, #60]	; (80110d8 <prvAddCurrentTaskToDelayedList+0x94>)
 801109c:	681b      	ldr	r3, [r3, #0]
 801109e:	3304      	adds	r3, #4
 80110a0:	4619      	mov	r1, r3
 80110a2:	4610      	mov	r0, r2
 80110a4:	f7fd ffd1 	bl	800f04a <vListInsert>
}
 80110a8:	e010      	b.n	80110cc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80110aa:	4b0e      	ldr	r3, [pc, #56]	; (80110e4 <prvAddCurrentTaskToDelayedList+0xa0>)
 80110ac:	681a      	ldr	r2, [r3, #0]
 80110ae:	4b0a      	ldr	r3, [pc, #40]	; (80110d8 <prvAddCurrentTaskToDelayedList+0x94>)
 80110b0:	681b      	ldr	r3, [r3, #0]
 80110b2:	3304      	adds	r3, #4
 80110b4:	4619      	mov	r1, r3
 80110b6:	4610      	mov	r0, r2
 80110b8:	f7fd ffc7 	bl	800f04a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80110bc:	4b0a      	ldr	r3, [pc, #40]	; (80110e8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80110be:	681b      	ldr	r3, [r3, #0]
 80110c0:	68ba      	ldr	r2, [r7, #8]
 80110c2:	429a      	cmp	r2, r3
 80110c4:	d202      	bcs.n	80110cc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80110c6:	4a08      	ldr	r2, [pc, #32]	; (80110e8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80110c8:	68bb      	ldr	r3, [r7, #8]
 80110ca:	6013      	str	r3, [r2, #0]
}
 80110cc:	bf00      	nop
 80110ce:	3710      	adds	r7, #16
 80110d0:	46bd      	mov	sp, r7
 80110d2:	bd80      	pop	{r7, pc}
 80110d4:	200022a0 	.word	0x200022a0
 80110d8:	20001dc8 	.word	0x20001dc8
 80110dc:	20002288 	.word	0x20002288
 80110e0:	20002258 	.word	0x20002258
 80110e4:	20002254 	.word	0x20002254
 80110e8:	200022bc 	.word	0x200022bc

080110ec <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80110ec:	b580      	push	{r7, lr}
 80110ee:	b08a      	sub	sp, #40	; 0x28
 80110f0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80110f2:	2300      	movs	r3, #0
 80110f4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80110f6:	f000 fb07 	bl	8011708 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80110fa:	4b1c      	ldr	r3, [pc, #112]	; (801116c <xTimerCreateTimerTask+0x80>)
 80110fc:	681b      	ldr	r3, [r3, #0]
 80110fe:	2b00      	cmp	r3, #0
 8011100:	d021      	beq.n	8011146 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8011102:	2300      	movs	r3, #0
 8011104:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8011106:	2300      	movs	r3, #0
 8011108:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 801110a:	1d3a      	adds	r2, r7, #4
 801110c:	f107 0108 	add.w	r1, r7, #8
 8011110:	f107 030c 	add.w	r3, r7, #12
 8011114:	4618      	mov	r0, r3
 8011116:	f7fd ff2d 	bl	800ef74 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 801111a:	6879      	ldr	r1, [r7, #4]
 801111c:	68bb      	ldr	r3, [r7, #8]
 801111e:	68fa      	ldr	r2, [r7, #12]
 8011120:	9202      	str	r2, [sp, #8]
 8011122:	9301      	str	r3, [sp, #4]
 8011124:	2302      	movs	r3, #2
 8011126:	9300      	str	r3, [sp, #0]
 8011128:	2300      	movs	r3, #0
 801112a:	460a      	mov	r2, r1
 801112c:	4910      	ldr	r1, [pc, #64]	; (8011170 <xTimerCreateTimerTask+0x84>)
 801112e:	4811      	ldr	r0, [pc, #68]	; (8011174 <xTimerCreateTimerTask+0x88>)
 8011130:	f7fe fdb8 	bl	800fca4 <xTaskCreateStatic>
 8011134:	4603      	mov	r3, r0
 8011136:	4a10      	ldr	r2, [pc, #64]	; (8011178 <xTimerCreateTimerTask+0x8c>)
 8011138:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 801113a:	4b0f      	ldr	r3, [pc, #60]	; (8011178 <xTimerCreateTimerTask+0x8c>)
 801113c:	681b      	ldr	r3, [r3, #0]
 801113e:	2b00      	cmp	r3, #0
 8011140:	d001      	beq.n	8011146 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8011142:	2301      	movs	r3, #1
 8011144:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8011146:	697b      	ldr	r3, [r7, #20]
 8011148:	2b00      	cmp	r3, #0
 801114a:	d10a      	bne.n	8011162 <xTimerCreateTimerTask+0x76>
	__asm volatile
 801114c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011150:	f383 8811 	msr	BASEPRI, r3
 8011154:	f3bf 8f6f 	isb	sy
 8011158:	f3bf 8f4f 	dsb	sy
 801115c:	613b      	str	r3, [r7, #16]
}
 801115e:	bf00      	nop
 8011160:	e7fe      	b.n	8011160 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8011162:	697b      	ldr	r3, [r7, #20]
}
 8011164:	4618      	mov	r0, r3
 8011166:	3718      	adds	r7, #24
 8011168:	46bd      	mov	sp, r7
 801116a:	bd80      	pop	{r7, pc}
 801116c:	20002300 	.word	0x20002300
 8011170:	08014f8c 	.word	0x08014f8c
 8011174:	080112b1 	.word	0x080112b1
 8011178:	20002304 	.word	0x20002304

0801117c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 801117c:	b580      	push	{r7, lr}
 801117e:	b08a      	sub	sp, #40	; 0x28
 8011180:	af00      	add	r7, sp, #0
 8011182:	60f8      	str	r0, [r7, #12]
 8011184:	60b9      	str	r1, [r7, #8]
 8011186:	607a      	str	r2, [r7, #4]
 8011188:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 801118a:	2300      	movs	r3, #0
 801118c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 801118e:	68fb      	ldr	r3, [r7, #12]
 8011190:	2b00      	cmp	r3, #0
 8011192:	d10a      	bne.n	80111aa <xTimerGenericCommand+0x2e>
	__asm volatile
 8011194:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011198:	f383 8811 	msr	BASEPRI, r3
 801119c:	f3bf 8f6f 	isb	sy
 80111a0:	f3bf 8f4f 	dsb	sy
 80111a4:	623b      	str	r3, [r7, #32]
}
 80111a6:	bf00      	nop
 80111a8:	e7fe      	b.n	80111a8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80111aa:	4b1a      	ldr	r3, [pc, #104]	; (8011214 <xTimerGenericCommand+0x98>)
 80111ac:	681b      	ldr	r3, [r3, #0]
 80111ae:	2b00      	cmp	r3, #0
 80111b0:	d02a      	beq.n	8011208 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80111b2:	68bb      	ldr	r3, [r7, #8]
 80111b4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80111b6:	687b      	ldr	r3, [r7, #4]
 80111b8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80111ba:	68fb      	ldr	r3, [r7, #12]
 80111bc:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80111be:	68bb      	ldr	r3, [r7, #8]
 80111c0:	2b05      	cmp	r3, #5
 80111c2:	dc18      	bgt.n	80111f6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80111c4:	f7ff fcb0 	bl	8010b28 <xTaskGetSchedulerState>
 80111c8:	4603      	mov	r3, r0
 80111ca:	2b02      	cmp	r3, #2
 80111cc:	d109      	bne.n	80111e2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80111ce:	4b11      	ldr	r3, [pc, #68]	; (8011214 <xTimerGenericCommand+0x98>)
 80111d0:	6818      	ldr	r0, [r3, #0]
 80111d2:	f107 0110 	add.w	r1, r7, #16
 80111d6:	2300      	movs	r3, #0
 80111d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80111da:	f7fe f8d7 	bl	800f38c <xQueueGenericSend>
 80111de:	6278      	str	r0, [r7, #36]	; 0x24
 80111e0:	e012      	b.n	8011208 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80111e2:	4b0c      	ldr	r3, [pc, #48]	; (8011214 <xTimerGenericCommand+0x98>)
 80111e4:	6818      	ldr	r0, [r3, #0]
 80111e6:	f107 0110 	add.w	r1, r7, #16
 80111ea:	2300      	movs	r3, #0
 80111ec:	2200      	movs	r2, #0
 80111ee:	f7fe f8cd 	bl	800f38c <xQueueGenericSend>
 80111f2:	6278      	str	r0, [r7, #36]	; 0x24
 80111f4:	e008      	b.n	8011208 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80111f6:	4b07      	ldr	r3, [pc, #28]	; (8011214 <xTimerGenericCommand+0x98>)
 80111f8:	6818      	ldr	r0, [r3, #0]
 80111fa:	f107 0110 	add.w	r1, r7, #16
 80111fe:	2300      	movs	r3, #0
 8011200:	683a      	ldr	r2, [r7, #0]
 8011202:	f7fe f9c1 	bl	800f588 <xQueueGenericSendFromISR>
 8011206:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8011208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801120a:	4618      	mov	r0, r3
 801120c:	3728      	adds	r7, #40	; 0x28
 801120e:	46bd      	mov	sp, r7
 8011210:	bd80      	pop	{r7, pc}
 8011212:	bf00      	nop
 8011214:	20002300 	.word	0x20002300

08011218 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8011218:	b580      	push	{r7, lr}
 801121a:	b088      	sub	sp, #32
 801121c:	af02      	add	r7, sp, #8
 801121e:	6078      	str	r0, [r7, #4]
 8011220:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011222:	4b22      	ldr	r3, [pc, #136]	; (80112ac <prvProcessExpiredTimer+0x94>)
 8011224:	681b      	ldr	r3, [r3, #0]
 8011226:	68db      	ldr	r3, [r3, #12]
 8011228:	68db      	ldr	r3, [r3, #12]
 801122a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801122c:	697b      	ldr	r3, [r7, #20]
 801122e:	3304      	adds	r3, #4
 8011230:	4618      	mov	r0, r3
 8011232:	f7fd ff43 	bl	800f0bc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8011236:	697b      	ldr	r3, [r7, #20]
 8011238:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801123c:	f003 0304 	and.w	r3, r3, #4
 8011240:	2b00      	cmp	r3, #0
 8011242:	d022      	beq.n	801128a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8011244:	697b      	ldr	r3, [r7, #20]
 8011246:	699a      	ldr	r2, [r3, #24]
 8011248:	687b      	ldr	r3, [r7, #4]
 801124a:	18d1      	adds	r1, r2, r3
 801124c:	687b      	ldr	r3, [r7, #4]
 801124e:	683a      	ldr	r2, [r7, #0]
 8011250:	6978      	ldr	r0, [r7, #20]
 8011252:	f000 f8d1 	bl	80113f8 <prvInsertTimerInActiveList>
 8011256:	4603      	mov	r3, r0
 8011258:	2b00      	cmp	r3, #0
 801125a:	d01f      	beq.n	801129c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801125c:	2300      	movs	r3, #0
 801125e:	9300      	str	r3, [sp, #0]
 8011260:	2300      	movs	r3, #0
 8011262:	687a      	ldr	r2, [r7, #4]
 8011264:	2100      	movs	r1, #0
 8011266:	6978      	ldr	r0, [r7, #20]
 8011268:	f7ff ff88 	bl	801117c <xTimerGenericCommand>
 801126c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 801126e:	693b      	ldr	r3, [r7, #16]
 8011270:	2b00      	cmp	r3, #0
 8011272:	d113      	bne.n	801129c <prvProcessExpiredTimer+0x84>
	__asm volatile
 8011274:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011278:	f383 8811 	msr	BASEPRI, r3
 801127c:	f3bf 8f6f 	isb	sy
 8011280:	f3bf 8f4f 	dsb	sy
 8011284:	60fb      	str	r3, [r7, #12]
}
 8011286:	bf00      	nop
 8011288:	e7fe      	b.n	8011288 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801128a:	697b      	ldr	r3, [r7, #20]
 801128c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011290:	f023 0301 	bic.w	r3, r3, #1
 8011294:	b2da      	uxtb	r2, r3
 8011296:	697b      	ldr	r3, [r7, #20]
 8011298:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801129c:	697b      	ldr	r3, [r7, #20]
 801129e:	6a1b      	ldr	r3, [r3, #32]
 80112a0:	6978      	ldr	r0, [r7, #20]
 80112a2:	4798      	blx	r3
}
 80112a4:	bf00      	nop
 80112a6:	3718      	adds	r7, #24
 80112a8:	46bd      	mov	sp, r7
 80112aa:	bd80      	pop	{r7, pc}
 80112ac:	200022f8 	.word	0x200022f8

080112b0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80112b0:	b580      	push	{r7, lr}
 80112b2:	b084      	sub	sp, #16
 80112b4:	af00      	add	r7, sp, #0
 80112b6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80112b8:	f107 0308 	add.w	r3, r7, #8
 80112bc:	4618      	mov	r0, r3
 80112be:	f000 f857 	bl	8011370 <prvGetNextExpireTime>
 80112c2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80112c4:	68bb      	ldr	r3, [r7, #8]
 80112c6:	4619      	mov	r1, r3
 80112c8:	68f8      	ldr	r0, [r7, #12]
 80112ca:	f000 f803 	bl	80112d4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80112ce:	f000 f8d5 	bl	801147c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80112d2:	e7f1      	b.n	80112b8 <prvTimerTask+0x8>

080112d4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80112d4:	b580      	push	{r7, lr}
 80112d6:	b084      	sub	sp, #16
 80112d8:	af00      	add	r7, sp, #0
 80112da:	6078      	str	r0, [r7, #4]
 80112dc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80112de:	f7ff f81b 	bl	8010318 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80112e2:	f107 0308 	add.w	r3, r7, #8
 80112e6:	4618      	mov	r0, r3
 80112e8:	f000 f866 	bl	80113b8 <prvSampleTimeNow>
 80112ec:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80112ee:	68bb      	ldr	r3, [r7, #8]
 80112f0:	2b00      	cmp	r3, #0
 80112f2:	d130      	bne.n	8011356 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80112f4:	683b      	ldr	r3, [r7, #0]
 80112f6:	2b00      	cmp	r3, #0
 80112f8:	d10a      	bne.n	8011310 <prvProcessTimerOrBlockTask+0x3c>
 80112fa:	687a      	ldr	r2, [r7, #4]
 80112fc:	68fb      	ldr	r3, [r7, #12]
 80112fe:	429a      	cmp	r2, r3
 8011300:	d806      	bhi.n	8011310 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8011302:	f7ff f817 	bl	8010334 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8011306:	68f9      	ldr	r1, [r7, #12]
 8011308:	6878      	ldr	r0, [r7, #4]
 801130a:	f7ff ff85 	bl	8011218 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 801130e:	e024      	b.n	801135a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8011310:	683b      	ldr	r3, [r7, #0]
 8011312:	2b00      	cmp	r3, #0
 8011314:	d008      	beq.n	8011328 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8011316:	4b13      	ldr	r3, [pc, #76]	; (8011364 <prvProcessTimerOrBlockTask+0x90>)
 8011318:	681b      	ldr	r3, [r3, #0]
 801131a:	681b      	ldr	r3, [r3, #0]
 801131c:	2b00      	cmp	r3, #0
 801131e:	d101      	bne.n	8011324 <prvProcessTimerOrBlockTask+0x50>
 8011320:	2301      	movs	r3, #1
 8011322:	e000      	b.n	8011326 <prvProcessTimerOrBlockTask+0x52>
 8011324:	2300      	movs	r3, #0
 8011326:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8011328:	4b0f      	ldr	r3, [pc, #60]	; (8011368 <prvProcessTimerOrBlockTask+0x94>)
 801132a:	6818      	ldr	r0, [r3, #0]
 801132c:	687a      	ldr	r2, [r7, #4]
 801132e:	68fb      	ldr	r3, [r7, #12]
 8011330:	1ad3      	subs	r3, r2, r3
 8011332:	683a      	ldr	r2, [r7, #0]
 8011334:	4619      	mov	r1, r3
 8011336:	f7fe fc81 	bl	800fc3c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 801133a:	f7fe fffb 	bl	8010334 <xTaskResumeAll>
 801133e:	4603      	mov	r3, r0
 8011340:	2b00      	cmp	r3, #0
 8011342:	d10a      	bne.n	801135a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8011344:	4b09      	ldr	r3, [pc, #36]	; (801136c <prvProcessTimerOrBlockTask+0x98>)
 8011346:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801134a:	601a      	str	r2, [r3, #0]
 801134c:	f3bf 8f4f 	dsb	sy
 8011350:	f3bf 8f6f 	isb	sy
}
 8011354:	e001      	b.n	801135a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8011356:	f7fe ffed 	bl	8010334 <xTaskResumeAll>
}
 801135a:	bf00      	nop
 801135c:	3710      	adds	r7, #16
 801135e:	46bd      	mov	sp, r7
 8011360:	bd80      	pop	{r7, pc}
 8011362:	bf00      	nop
 8011364:	200022fc 	.word	0x200022fc
 8011368:	20002300 	.word	0x20002300
 801136c:	e000ed04 	.word	0xe000ed04

08011370 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8011370:	b480      	push	{r7}
 8011372:	b085      	sub	sp, #20
 8011374:	af00      	add	r7, sp, #0
 8011376:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8011378:	4b0e      	ldr	r3, [pc, #56]	; (80113b4 <prvGetNextExpireTime+0x44>)
 801137a:	681b      	ldr	r3, [r3, #0]
 801137c:	681b      	ldr	r3, [r3, #0]
 801137e:	2b00      	cmp	r3, #0
 8011380:	d101      	bne.n	8011386 <prvGetNextExpireTime+0x16>
 8011382:	2201      	movs	r2, #1
 8011384:	e000      	b.n	8011388 <prvGetNextExpireTime+0x18>
 8011386:	2200      	movs	r2, #0
 8011388:	687b      	ldr	r3, [r7, #4]
 801138a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 801138c:	687b      	ldr	r3, [r7, #4]
 801138e:	681b      	ldr	r3, [r3, #0]
 8011390:	2b00      	cmp	r3, #0
 8011392:	d105      	bne.n	80113a0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8011394:	4b07      	ldr	r3, [pc, #28]	; (80113b4 <prvGetNextExpireTime+0x44>)
 8011396:	681b      	ldr	r3, [r3, #0]
 8011398:	68db      	ldr	r3, [r3, #12]
 801139a:	681b      	ldr	r3, [r3, #0]
 801139c:	60fb      	str	r3, [r7, #12]
 801139e:	e001      	b.n	80113a4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80113a0:	2300      	movs	r3, #0
 80113a2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80113a4:	68fb      	ldr	r3, [r7, #12]
}
 80113a6:	4618      	mov	r0, r3
 80113a8:	3714      	adds	r7, #20
 80113aa:	46bd      	mov	sp, r7
 80113ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113b0:	4770      	bx	lr
 80113b2:	bf00      	nop
 80113b4:	200022f8 	.word	0x200022f8

080113b8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80113b8:	b580      	push	{r7, lr}
 80113ba:	b084      	sub	sp, #16
 80113bc:	af00      	add	r7, sp, #0
 80113be:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80113c0:	f7ff f856 	bl	8010470 <xTaskGetTickCount>
 80113c4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80113c6:	4b0b      	ldr	r3, [pc, #44]	; (80113f4 <prvSampleTimeNow+0x3c>)
 80113c8:	681b      	ldr	r3, [r3, #0]
 80113ca:	68fa      	ldr	r2, [r7, #12]
 80113cc:	429a      	cmp	r2, r3
 80113ce:	d205      	bcs.n	80113dc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80113d0:	f000 f936 	bl	8011640 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80113d4:	687b      	ldr	r3, [r7, #4]
 80113d6:	2201      	movs	r2, #1
 80113d8:	601a      	str	r2, [r3, #0]
 80113da:	e002      	b.n	80113e2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80113dc:	687b      	ldr	r3, [r7, #4]
 80113de:	2200      	movs	r2, #0
 80113e0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80113e2:	4a04      	ldr	r2, [pc, #16]	; (80113f4 <prvSampleTimeNow+0x3c>)
 80113e4:	68fb      	ldr	r3, [r7, #12]
 80113e6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80113e8:	68fb      	ldr	r3, [r7, #12]
}
 80113ea:	4618      	mov	r0, r3
 80113ec:	3710      	adds	r7, #16
 80113ee:	46bd      	mov	sp, r7
 80113f0:	bd80      	pop	{r7, pc}
 80113f2:	bf00      	nop
 80113f4:	20002308 	.word	0x20002308

080113f8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80113f8:	b580      	push	{r7, lr}
 80113fa:	b086      	sub	sp, #24
 80113fc:	af00      	add	r7, sp, #0
 80113fe:	60f8      	str	r0, [r7, #12]
 8011400:	60b9      	str	r1, [r7, #8]
 8011402:	607a      	str	r2, [r7, #4]
 8011404:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8011406:	2300      	movs	r3, #0
 8011408:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 801140a:	68fb      	ldr	r3, [r7, #12]
 801140c:	68ba      	ldr	r2, [r7, #8]
 801140e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8011410:	68fb      	ldr	r3, [r7, #12]
 8011412:	68fa      	ldr	r2, [r7, #12]
 8011414:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8011416:	68ba      	ldr	r2, [r7, #8]
 8011418:	687b      	ldr	r3, [r7, #4]
 801141a:	429a      	cmp	r2, r3
 801141c:	d812      	bhi.n	8011444 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801141e:	687a      	ldr	r2, [r7, #4]
 8011420:	683b      	ldr	r3, [r7, #0]
 8011422:	1ad2      	subs	r2, r2, r3
 8011424:	68fb      	ldr	r3, [r7, #12]
 8011426:	699b      	ldr	r3, [r3, #24]
 8011428:	429a      	cmp	r2, r3
 801142a:	d302      	bcc.n	8011432 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 801142c:	2301      	movs	r3, #1
 801142e:	617b      	str	r3, [r7, #20]
 8011430:	e01b      	b.n	801146a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8011432:	4b10      	ldr	r3, [pc, #64]	; (8011474 <prvInsertTimerInActiveList+0x7c>)
 8011434:	681a      	ldr	r2, [r3, #0]
 8011436:	68fb      	ldr	r3, [r7, #12]
 8011438:	3304      	adds	r3, #4
 801143a:	4619      	mov	r1, r3
 801143c:	4610      	mov	r0, r2
 801143e:	f7fd fe04 	bl	800f04a <vListInsert>
 8011442:	e012      	b.n	801146a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8011444:	687a      	ldr	r2, [r7, #4]
 8011446:	683b      	ldr	r3, [r7, #0]
 8011448:	429a      	cmp	r2, r3
 801144a:	d206      	bcs.n	801145a <prvInsertTimerInActiveList+0x62>
 801144c:	68ba      	ldr	r2, [r7, #8]
 801144e:	683b      	ldr	r3, [r7, #0]
 8011450:	429a      	cmp	r2, r3
 8011452:	d302      	bcc.n	801145a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8011454:	2301      	movs	r3, #1
 8011456:	617b      	str	r3, [r7, #20]
 8011458:	e007      	b.n	801146a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801145a:	4b07      	ldr	r3, [pc, #28]	; (8011478 <prvInsertTimerInActiveList+0x80>)
 801145c:	681a      	ldr	r2, [r3, #0]
 801145e:	68fb      	ldr	r3, [r7, #12]
 8011460:	3304      	adds	r3, #4
 8011462:	4619      	mov	r1, r3
 8011464:	4610      	mov	r0, r2
 8011466:	f7fd fdf0 	bl	800f04a <vListInsert>
		}
	}

	return xProcessTimerNow;
 801146a:	697b      	ldr	r3, [r7, #20]
}
 801146c:	4618      	mov	r0, r3
 801146e:	3718      	adds	r7, #24
 8011470:	46bd      	mov	sp, r7
 8011472:	bd80      	pop	{r7, pc}
 8011474:	200022fc 	.word	0x200022fc
 8011478:	200022f8 	.word	0x200022f8

0801147c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 801147c:	b580      	push	{r7, lr}
 801147e:	b08e      	sub	sp, #56	; 0x38
 8011480:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8011482:	e0ca      	b.n	801161a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8011484:	687b      	ldr	r3, [r7, #4]
 8011486:	2b00      	cmp	r3, #0
 8011488:	da18      	bge.n	80114bc <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 801148a:	1d3b      	adds	r3, r7, #4
 801148c:	3304      	adds	r3, #4
 801148e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8011490:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011492:	2b00      	cmp	r3, #0
 8011494:	d10a      	bne.n	80114ac <prvProcessReceivedCommands+0x30>
	__asm volatile
 8011496:	f04f 0350 	mov.w	r3, #80	; 0x50
 801149a:	f383 8811 	msr	BASEPRI, r3
 801149e:	f3bf 8f6f 	isb	sy
 80114a2:	f3bf 8f4f 	dsb	sy
 80114a6:	61fb      	str	r3, [r7, #28]
}
 80114a8:	bf00      	nop
 80114aa:	e7fe      	b.n	80114aa <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80114ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80114ae:	681b      	ldr	r3, [r3, #0]
 80114b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80114b2:	6850      	ldr	r0, [r2, #4]
 80114b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80114b6:	6892      	ldr	r2, [r2, #8]
 80114b8:	4611      	mov	r1, r2
 80114ba:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80114bc:	687b      	ldr	r3, [r7, #4]
 80114be:	2b00      	cmp	r3, #0
 80114c0:	f2c0 80aa 	blt.w	8011618 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80114c4:	68fb      	ldr	r3, [r7, #12]
 80114c6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80114c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80114ca:	695b      	ldr	r3, [r3, #20]
 80114cc:	2b00      	cmp	r3, #0
 80114ce:	d004      	beq.n	80114da <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80114d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80114d2:	3304      	adds	r3, #4
 80114d4:	4618      	mov	r0, r3
 80114d6:	f7fd fdf1 	bl	800f0bc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80114da:	463b      	mov	r3, r7
 80114dc:	4618      	mov	r0, r3
 80114de:	f7ff ff6b 	bl	80113b8 <prvSampleTimeNow>
 80114e2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80114e4:	687b      	ldr	r3, [r7, #4]
 80114e6:	2b09      	cmp	r3, #9
 80114e8:	f200 8097 	bhi.w	801161a <prvProcessReceivedCommands+0x19e>
 80114ec:	a201      	add	r2, pc, #4	; (adr r2, 80114f4 <prvProcessReceivedCommands+0x78>)
 80114ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80114f2:	bf00      	nop
 80114f4:	0801151d 	.word	0x0801151d
 80114f8:	0801151d 	.word	0x0801151d
 80114fc:	0801151d 	.word	0x0801151d
 8011500:	08011591 	.word	0x08011591
 8011504:	080115a5 	.word	0x080115a5
 8011508:	080115ef 	.word	0x080115ef
 801150c:	0801151d 	.word	0x0801151d
 8011510:	0801151d 	.word	0x0801151d
 8011514:	08011591 	.word	0x08011591
 8011518:	080115a5 	.word	0x080115a5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801151c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801151e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011522:	f043 0301 	orr.w	r3, r3, #1
 8011526:	b2da      	uxtb	r2, r3
 8011528:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801152a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 801152e:	68ba      	ldr	r2, [r7, #8]
 8011530:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011532:	699b      	ldr	r3, [r3, #24]
 8011534:	18d1      	adds	r1, r2, r3
 8011536:	68bb      	ldr	r3, [r7, #8]
 8011538:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801153a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801153c:	f7ff ff5c 	bl	80113f8 <prvInsertTimerInActiveList>
 8011540:	4603      	mov	r3, r0
 8011542:	2b00      	cmp	r3, #0
 8011544:	d069      	beq.n	801161a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8011546:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011548:	6a1b      	ldr	r3, [r3, #32]
 801154a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801154c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801154e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011550:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011554:	f003 0304 	and.w	r3, r3, #4
 8011558:	2b00      	cmp	r3, #0
 801155a:	d05e      	beq.n	801161a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 801155c:	68ba      	ldr	r2, [r7, #8]
 801155e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011560:	699b      	ldr	r3, [r3, #24]
 8011562:	441a      	add	r2, r3
 8011564:	2300      	movs	r3, #0
 8011566:	9300      	str	r3, [sp, #0]
 8011568:	2300      	movs	r3, #0
 801156a:	2100      	movs	r1, #0
 801156c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801156e:	f7ff fe05 	bl	801117c <xTimerGenericCommand>
 8011572:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8011574:	6a3b      	ldr	r3, [r7, #32]
 8011576:	2b00      	cmp	r3, #0
 8011578:	d14f      	bne.n	801161a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 801157a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801157e:	f383 8811 	msr	BASEPRI, r3
 8011582:	f3bf 8f6f 	isb	sy
 8011586:	f3bf 8f4f 	dsb	sy
 801158a:	61bb      	str	r3, [r7, #24]
}
 801158c:	bf00      	nop
 801158e:	e7fe      	b.n	801158e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8011590:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011592:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011596:	f023 0301 	bic.w	r3, r3, #1
 801159a:	b2da      	uxtb	r2, r3
 801159c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801159e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80115a2:	e03a      	b.n	801161a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80115a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80115a6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80115aa:	f043 0301 	orr.w	r3, r3, #1
 80115ae:	b2da      	uxtb	r2, r3
 80115b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80115b2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80115b6:	68ba      	ldr	r2, [r7, #8]
 80115b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80115ba:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80115bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80115be:	699b      	ldr	r3, [r3, #24]
 80115c0:	2b00      	cmp	r3, #0
 80115c2:	d10a      	bne.n	80115da <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80115c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80115c8:	f383 8811 	msr	BASEPRI, r3
 80115cc:	f3bf 8f6f 	isb	sy
 80115d0:	f3bf 8f4f 	dsb	sy
 80115d4:	617b      	str	r3, [r7, #20]
}
 80115d6:	bf00      	nop
 80115d8:	e7fe      	b.n	80115d8 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80115da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80115dc:	699a      	ldr	r2, [r3, #24]
 80115de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80115e0:	18d1      	adds	r1, r2, r3
 80115e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80115e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80115e6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80115e8:	f7ff ff06 	bl	80113f8 <prvInsertTimerInActiveList>
					break;
 80115ec:	e015      	b.n	801161a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80115ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80115f0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80115f4:	f003 0302 	and.w	r3, r3, #2
 80115f8:	2b00      	cmp	r3, #0
 80115fa:	d103      	bne.n	8011604 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80115fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80115fe:	f000 fbdf 	bl	8011dc0 <vPortFree>
 8011602:	e00a      	b.n	801161a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8011604:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011606:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801160a:	f023 0301 	bic.w	r3, r3, #1
 801160e:	b2da      	uxtb	r2, r3
 8011610:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011612:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8011616:	e000      	b.n	801161a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8011618:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801161a:	4b08      	ldr	r3, [pc, #32]	; (801163c <prvProcessReceivedCommands+0x1c0>)
 801161c:	681b      	ldr	r3, [r3, #0]
 801161e:	1d39      	adds	r1, r7, #4
 8011620:	2200      	movs	r2, #0
 8011622:	4618      	mov	r0, r3
 8011624:	f7fe f84c 	bl	800f6c0 <xQueueReceive>
 8011628:	4603      	mov	r3, r0
 801162a:	2b00      	cmp	r3, #0
 801162c:	f47f af2a 	bne.w	8011484 <prvProcessReceivedCommands+0x8>
	}
}
 8011630:	bf00      	nop
 8011632:	bf00      	nop
 8011634:	3730      	adds	r7, #48	; 0x30
 8011636:	46bd      	mov	sp, r7
 8011638:	bd80      	pop	{r7, pc}
 801163a:	bf00      	nop
 801163c:	20002300 	.word	0x20002300

08011640 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8011640:	b580      	push	{r7, lr}
 8011642:	b088      	sub	sp, #32
 8011644:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8011646:	e048      	b.n	80116da <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8011648:	4b2d      	ldr	r3, [pc, #180]	; (8011700 <prvSwitchTimerLists+0xc0>)
 801164a:	681b      	ldr	r3, [r3, #0]
 801164c:	68db      	ldr	r3, [r3, #12]
 801164e:	681b      	ldr	r3, [r3, #0]
 8011650:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011652:	4b2b      	ldr	r3, [pc, #172]	; (8011700 <prvSwitchTimerLists+0xc0>)
 8011654:	681b      	ldr	r3, [r3, #0]
 8011656:	68db      	ldr	r3, [r3, #12]
 8011658:	68db      	ldr	r3, [r3, #12]
 801165a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801165c:	68fb      	ldr	r3, [r7, #12]
 801165e:	3304      	adds	r3, #4
 8011660:	4618      	mov	r0, r3
 8011662:	f7fd fd2b 	bl	800f0bc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8011666:	68fb      	ldr	r3, [r7, #12]
 8011668:	6a1b      	ldr	r3, [r3, #32]
 801166a:	68f8      	ldr	r0, [r7, #12]
 801166c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801166e:	68fb      	ldr	r3, [r7, #12]
 8011670:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011674:	f003 0304 	and.w	r3, r3, #4
 8011678:	2b00      	cmp	r3, #0
 801167a:	d02e      	beq.n	80116da <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 801167c:	68fb      	ldr	r3, [r7, #12]
 801167e:	699b      	ldr	r3, [r3, #24]
 8011680:	693a      	ldr	r2, [r7, #16]
 8011682:	4413      	add	r3, r2
 8011684:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8011686:	68ba      	ldr	r2, [r7, #8]
 8011688:	693b      	ldr	r3, [r7, #16]
 801168a:	429a      	cmp	r2, r3
 801168c:	d90e      	bls.n	80116ac <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 801168e:	68fb      	ldr	r3, [r7, #12]
 8011690:	68ba      	ldr	r2, [r7, #8]
 8011692:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8011694:	68fb      	ldr	r3, [r7, #12]
 8011696:	68fa      	ldr	r2, [r7, #12]
 8011698:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801169a:	4b19      	ldr	r3, [pc, #100]	; (8011700 <prvSwitchTimerLists+0xc0>)
 801169c:	681a      	ldr	r2, [r3, #0]
 801169e:	68fb      	ldr	r3, [r7, #12]
 80116a0:	3304      	adds	r3, #4
 80116a2:	4619      	mov	r1, r3
 80116a4:	4610      	mov	r0, r2
 80116a6:	f7fd fcd0 	bl	800f04a <vListInsert>
 80116aa:	e016      	b.n	80116da <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80116ac:	2300      	movs	r3, #0
 80116ae:	9300      	str	r3, [sp, #0]
 80116b0:	2300      	movs	r3, #0
 80116b2:	693a      	ldr	r2, [r7, #16]
 80116b4:	2100      	movs	r1, #0
 80116b6:	68f8      	ldr	r0, [r7, #12]
 80116b8:	f7ff fd60 	bl	801117c <xTimerGenericCommand>
 80116bc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80116be:	687b      	ldr	r3, [r7, #4]
 80116c0:	2b00      	cmp	r3, #0
 80116c2:	d10a      	bne.n	80116da <prvSwitchTimerLists+0x9a>
	__asm volatile
 80116c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80116c8:	f383 8811 	msr	BASEPRI, r3
 80116cc:	f3bf 8f6f 	isb	sy
 80116d0:	f3bf 8f4f 	dsb	sy
 80116d4:	603b      	str	r3, [r7, #0]
}
 80116d6:	bf00      	nop
 80116d8:	e7fe      	b.n	80116d8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80116da:	4b09      	ldr	r3, [pc, #36]	; (8011700 <prvSwitchTimerLists+0xc0>)
 80116dc:	681b      	ldr	r3, [r3, #0]
 80116de:	681b      	ldr	r3, [r3, #0]
 80116e0:	2b00      	cmp	r3, #0
 80116e2:	d1b1      	bne.n	8011648 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80116e4:	4b06      	ldr	r3, [pc, #24]	; (8011700 <prvSwitchTimerLists+0xc0>)
 80116e6:	681b      	ldr	r3, [r3, #0]
 80116e8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80116ea:	4b06      	ldr	r3, [pc, #24]	; (8011704 <prvSwitchTimerLists+0xc4>)
 80116ec:	681b      	ldr	r3, [r3, #0]
 80116ee:	4a04      	ldr	r2, [pc, #16]	; (8011700 <prvSwitchTimerLists+0xc0>)
 80116f0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80116f2:	4a04      	ldr	r2, [pc, #16]	; (8011704 <prvSwitchTimerLists+0xc4>)
 80116f4:	697b      	ldr	r3, [r7, #20]
 80116f6:	6013      	str	r3, [r2, #0]
}
 80116f8:	bf00      	nop
 80116fa:	3718      	adds	r7, #24
 80116fc:	46bd      	mov	sp, r7
 80116fe:	bd80      	pop	{r7, pc}
 8011700:	200022f8 	.word	0x200022f8
 8011704:	200022fc 	.word	0x200022fc

08011708 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8011708:	b580      	push	{r7, lr}
 801170a:	b082      	sub	sp, #8
 801170c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 801170e:	f000 f969 	bl	80119e4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8011712:	4b15      	ldr	r3, [pc, #84]	; (8011768 <prvCheckForValidListAndQueue+0x60>)
 8011714:	681b      	ldr	r3, [r3, #0]
 8011716:	2b00      	cmp	r3, #0
 8011718:	d120      	bne.n	801175c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 801171a:	4814      	ldr	r0, [pc, #80]	; (801176c <prvCheckForValidListAndQueue+0x64>)
 801171c:	f7fd fc44 	bl	800efa8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8011720:	4813      	ldr	r0, [pc, #76]	; (8011770 <prvCheckForValidListAndQueue+0x68>)
 8011722:	f7fd fc41 	bl	800efa8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8011726:	4b13      	ldr	r3, [pc, #76]	; (8011774 <prvCheckForValidListAndQueue+0x6c>)
 8011728:	4a10      	ldr	r2, [pc, #64]	; (801176c <prvCheckForValidListAndQueue+0x64>)
 801172a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 801172c:	4b12      	ldr	r3, [pc, #72]	; (8011778 <prvCheckForValidListAndQueue+0x70>)
 801172e:	4a10      	ldr	r2, [pc, #64]	; (8011770 <prvCheckForValidListAndQueue+0x68>)
 8011730:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8011732:	2300      	movs	r3, #0
 8011734:	9300      	str	r3, [sp, #0]
 8011736:	4b11      	ldr	r3, [pc, #68]	; (801177c <prvCheckForValidListAndQueue+0x74>)
 8011738:	4a11      	ldr	r2, [pc, #68]	; (8011780 <prvCheckForValidListAndQueue+0x78>)
 801173a:	2110      	movs	r1, #16
 801173c:	200a      	movs	r0, #10
 801173e:	f7fd fd4f 	bl	800f1e0 <xQueueGenericCreateStatic>
 8011742:	4603      	mov	r3, r0
 8011744:	4a08      	ldr	r2, [pc, #32]	; (8011768 <prvCheckForValidListAndQueue+0x60>)
 8011746:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8011748:	4b07      	ldr	r3, [pc, #28]	; (8011768 <prvCheckForValidListAndQueue+0x60>)
 801174a:	681b      	ldr	r3, [r3, #0]
 801174c:	2b00      	cmp	r3, #0
 801174e:	d005      	beq.n	801175c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8011750:	4b05      	ldr	r3, [pc, #20]	; (8011768 <prvCheckForValidListAndQueue+0x60>)
 8011752:	681b      	ldr	r3, [r3, #0]
 8011754:	490b      	ldr	r1, [pc, #44]	; (8011784 <prvCheckForValidListAndQueue+0x7c>)
 8011756:	4618      	mov	r0, r3
 8011758:	f7fe fa46 	bl	800fbe8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801175c:	f000 f972 	bl	8011a44 <vPortExitCritical>
}
 8011760:	bf00      	nop
 8011762:	46bd      	mov	sp, r7
 8011764:	bd80      	pop	{r7, pc}
 8011766:	bf00      	nop
 8011768:	20002300 	.word	0x20002300
 801176c:	200022d0 	.word	0x200022d0
 8011770:	200022e4 	.word	0x200022e4
 8011774:	200022f8 	.word	0x200022f8
 8011778:	200022fc 	.word	0x200022fc
 801177c:	200023ac 	.word	0x200023ac
 8011780:	2000230c 	.word	0x2000230c
 8011784:	08014f94 	.word	0x08014f94

08011788 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8011788:	b480      	push	{r7}
 801178a:	b085      	sub	sp, #20
 801178c:	af00      	add	r7, sp, #0
 801178e:	60f8      	str	r0, [r7, #12]
 8011790:	60b9      	str	r1, [r7, #8]
 8011792:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8011794:	68fb      	ldr	r3, [r7, #12]
 8011796:	3b04      	subs	r3, #4
 8011798:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801179a:	68fb      	ldr	r3, [r7, #12]
 801179c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80117a0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80117a2:	68fb      	ldr	r3, [r7, #12]
 80117a4:	3b04      	subs	r3, #4
 80117a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80117a8:	68bb      	ldr	r3, [r7, #8]
 80117aa:	f023 0201 	bic.w	r2, r3, #1
 80117ae:	68fb      	ldr	r3, [r7, #12]
 80117b0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80117b2:	68fb      	ldr	r3, [r7, #12]
 80117b4:	3b04      	subs	r3, #4
 80117b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80117b8:	4a0c      	ldr	r2, [pc, #48]	; (80117ec <pxPortInitialiseStack+0x64>)
 80117ba:	68fb      	ldr	r3, [r7, #12]
 80117bc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80117be:	68fb      	ldr	r3, [r7, #12]
 80117c0:	3b14      	subs	r3, #20
 80117c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80117c4:	687a      	ldr	r2, [r7, #4]
 80117c6:	68fb      	ldr	r3, [r7, #12]
 80117c8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80117ca:	68fb      	ldr	r3, [r7, #12]
 80117cc:	3b04      	subs	r3, #4
 80117ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80117d0:	68fb      	ldr	r3, [r7, #12]
 80117d2:	f06f 0202 	mvn.w	r2, #2
 80117d6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80117d8:	68fb      	ldr	r3, [r7, #12]
 80117da:	3b20      	subs	r3, #32
 80117dc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80117de:	68fb      	ldr	r3, [r7, #12]
}
 80117e0:	4618      	mov	r0, r3
 80117e2:	3714      	adds	r7, #20
 80117e4:	46bd      	mov	sp, r7
 80117e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117ea:	4770      	bx	lr
 80117ec:	080117f1 	.word	0x080117f1

080117f0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80117f0:	b480      	push	{r7}
 80117f2:	b085      	sub	sp, #20
 80117f4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80117f6:	2300      	movs	r3, #0
 80117f8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80117fa:	4b12      	ldr	r3, [pc, #72]	; (8011844 <prvTaskExitError+0x54>)
 80117fc:	681b      	ldr	r3, [r3, #0]
 80117fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011802:	d00a      	beq.n	801181a <prvTaskExitError+0x2a>
	__asm volatile
 8011804:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011808:	f383 8811 	msr	BASEPRI, r3
 801180c:	f3bf 8f6f 	isb	sy
 8011810:	f3bf 8f4f 	dsb	sy
 8011814:	60fb      	str	r3, [r7, #12]
}
 8011816:	bf00      	nop
 8011818:	e7fe      	b.n	8011818 <prvTaskExitError+0x28>
	__asm volatile
 801181a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801181e:	f383 8811 	msr	BASEPRI, r3
 8011822:	f3bf 8f6f 	isb	sy
 8011826:	f3bf 8f4f 	dsb	sy
 801182a:	60bb      	str	r3, [r7, #8]
}
 801182c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 801182e:	bf00      	nop
 8011830:	687b      	ldr	r3, [r7, #4]
 8011832:	2b00      	cmp	r3, #0
 8011834:	d0fc      	beq.n	8011830 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8011836:	bf00      	nop
 8011838:	bf00      	nop
 801183a:	3714      	adds	r7, #20
 801183c:	46bd      	mov	sp, r7
 801183e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011842:	4770      	bx	lr
 8011844:	20000050 	.word	0x20000050
	...

08011850 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8011850:	4b07      	ldr	r3, [pc, #28]	; (8011870 <pxCurrentTCBConst2>)
 8011852:	6819      	ldr	r1, [r3, #0]
 8011854:	6808      	ldr	r0, [r1, #0]
 8011856:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801185a:	f380 8809 	msr	PSP, r0
 801185e:	f3bf 8f6f 	isb	sy
 8011862:	f04f 0000 	mov.w	r0, #0
 8011866:	f380 8811 	msr	BASEPRI, r0
 801186a:	4770      	bx	lr
 801186c:	f3af 8000 	nop.w

08011870 <pxCurrentTCBConst2>:
 8011870:	20001dc8 	.word	0x20001dc8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8011874:	bf00      	nop
 8011876:	bf00      	nop

08011878 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8011878:	4808      	ldr	r0, [pc, #32]	; (801189c <prvPortStartFirstTask+0x24>)
 801187a:	6800      	ldr	r0, [r0, #0]
 801187c:	6800      	ldr	r0, [r0, #0]
 801187e:	f380 8808 	msr	MSP, r0
 8011882:	f04f 0000 	mov.w	r0, #0
 8011886:	f380 8814 	msr	CONTROL, r0
 801188a:	b662      	cpsie	i
 801188c:	b661      	cpsie	f
 801188e:	f3bf 8f4f 	dsb	sy
 8011892:	f3bf 8f6f 	isb	sy
 8011896:	df00      	svc	0
 8011898:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801189a:	bf00      	nop
 801189c:	e000ed08 	.word	0xe000ed08

080118a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80118a0:	b580      	push	{r7, lr}
 80118a2:	b086      	sub	sp, #24
 80118a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80118a6:	4b46      	ldr	r3, [pc, #280]	; (80119c0 <xPortStartScheduler+0x120>)
 80118a8:	681b      	ldr	r3, [r3, #0]
 80118aa:	4a46      	ldr	r2, [pc, #280]	; (80119c4 <xPortStartScheduler+0x124>)
 80118ac:	4293      	cmp	r3, r2
 80118ae:	d10a      	bne.n	80118c6 <xPortStartScheduler+0x26>
	__asm volatile
 80118b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80118b4:	f383 8811 	msr	BASEPRI, r3
 80118b8:	f3bf 8f6f 	isb	sy
 80118bc:	f3bf 8f4f 	dsb	sy
 80118c0:	613b      	str	r3, [r7, #16]
}
 80118c2:	bf00      	nop
 80118c4:	e7fe      	b.n	80118c4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80118c6:	4b3e      	ldr	r3, [pc, #248]	; (80119c0 <xPortStartScheduler+0x120>)
 80118c8:	681b      	ldr	r3, [r3, #0]
 80118ca:	4a3f      	ldr	r2, [pc, #252]	; (80119c8 <xPortStartScheduler+0x128>)
 80118cc:	4293      	cmp	r3, r2
 80118ce:	d10a      	bne.n	80118e6 <xPortStartScheduler+0x46>
	__asm volatile
 80118d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80118d4:	f383 8811 	msr	BASEPRI, r3
 80118d8:	f3bf 8f6f 	isb	sy
 80118dc:	f3bf 8f4f 	dsb	sy
 80118e0:	60fb      	str	r3, [r7, #12]
}
 80118e2:	bf00      	nop
 80118e4:	e7fe      	b.n	80118e4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80118e6:	4b39      	ldr	r3, [pc, #228]	; (80119cc <xPortStartScheduler+0x12c>)
 80118e8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80118ea:	697b      	ldr	r3, [r7, #20]
 80118ec:	781b      	ldrb	r3, [r3, #0]
 80118ee:	b2db      	uxtb	r3, r3
 80118f0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80118f2:	697b      	ldr	r3, [r7, #20]
 80118f4:	22ff      	movs	r2, #255	; 0xff
 80118f6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80118f8:	697b      	ldr	r3, [r7, #20]
 80118fa:	781b      	ldrb	r3, [r3, #0]
 80118fc:	b2db      	uxtb	r3, r3
 80118fe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8011900:	78fb      	ldrb	r3, [r7, #3]
 8011902:	b2db      	uxtb	r3, r3
 8011904:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8011908:	b2da      	uxtb	r2, r3
 801190a:	4b31      	ldr	r3, [pc, #196]	; (80119d0 <xPortStartScheduler+0x130>)
 801190c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801190e:	4b31      	ldr	r3, [pc, #196]	; (80119d4 <xPortStartScheduler+0x134>)
 8011910:	2207      	movs	r2, #7
 8011912:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8011914:	e009      	b.n	801192a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8011916:	4b2f      	ldr	r3, [pc, #188]	; (80119d4 <xPortStartScheduler+0x134>)
 8011918:	681b      	ldr	r3, [r3, #0]
 801191a:	3b01      	subs	r3, #1
 801191c:	4a2d      	ldr	r2, [pc, #180]	; (80119d4 <xPortStartScheduler+0x134>)
 801191e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8011920:	78fb      	ldrb	r3, [r7, #3]
 8011922:	b2db      	uxtb	r3, r3
 8011924:	005b      	lsls	r3, r3, #1
 8011926:	b2db      	uxtb	r3, r3
 8011928:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801192a:	78fb      	ldrb	r3, [r7, #3]
 801192c:	b2db      	uxtb	r3, r3
 801192e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011932:	2b80      	cmp	r3, #128	; 0x80
 8011934:	d0ef      	beq.n	8011916 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8011936:	4b27      	ldr	r3, [pc, #156]	; (80119d4 <xPortStartScheduler+0x134>)
 8011938:	681b      	ldr	r3, [r3, #0]
 801193a:	f1c3 0307 	rsb	r3, r3, #7
 801193e:	2b04      	cmp	r3, #4
 8011940:	d00a      	beq.n	8011958 <xPortStartScheduler+0xb8>
	__asm volatile
 8011942:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011946:	f383 8811 	msr	BASEPRI, r3
 801194a:	f3bf 8f6f 	isb	sy
 801194e:	f3bf 8f4f 	dsb	sy
 8011952:	60bb      	str	r3, [r7, #8]
}
 8011954:	bf00      	nop
 8011956:	e7fe      	b.n	8011956 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8011958:	4b1e      	ldr	r3, [pc, #120]	; (80119d4 <xPortStartScheduler+0x134>)
 801195a:	681b      	ldr	r3, [r3, #0]
 801195c:	021b      	lsls	r3, r3, #8
 801195e:	4a1d      	ldr	r2, [pc, #116]	; (80119d4 <xPortStartScheduler+0x134>)
 8011960:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8011962:	4b1c      	ldr	r3, [pc, #112]	; (80119d4 <xPortStartScheduler+0x134>)
 8011964:	681b      	ldr	r3, [r3, #0]
 8011966:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801196a:	4a1a      	ldr	r2, [pc, #104]	; (80119d4 <xPortStartScheduler+0x134>)
 801196c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 801196e:	687b      	ldr	r3, [r7, #4]
 8011970:	b2da      	uxtb	r2, r3
 8011972:	697b      	ldr	r3, [r7, #20]
 8011974:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8011976:	4b18      	ldr	r3, [pc, #96]	; (80119d8 <xPortStartScheduler+0x138>)
 8011978:	681b      	ldr	r3, [r3, #0]
 801197a:	4a17      	ldr	r2, [pc, #92]	; (80119d8 <xPortStartScheduler+0x138>)
 801197c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8011980:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8011982:	4b15      	ldr	r3, [pc, #84]	; (80119d8 <xPortStartScheduler+0x138>)
 8011984:	681b      	ldr	r3, [r3, #0]
 8011986:	4a14      	ldr	r2, [pc, #80]	; (80119d8 <xPortStartScheduler+0x138>)
 8011988:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 801198c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 801198e:	f000 f8dd 	bl	8011b4c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8011992:	4b12      	ldr	r3, [pc, #72]	; (80119dc <xPortStartScheduler+0x13c>)
 8011994:	2200      	movs	r2, #0
 8011996:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8011998:	f000 f8fc 	bl	8011b94 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801199c:	4b10      	ldr	r3, [pc, #64]	; (80119e0 <xPortStartScheduler+0x140>)
 801199e:	681b      	ldr	r3, [r3, #0]
 80119a0:	4a0f      	ldr	r2, [pc, #60]	; (80119e0 <xPortStartScheduler+0x140>)
 80119a2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80119a6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80119a8:	f7ff ff66 	bl	8011878 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80119ac:	f7fe fe2a 	bl	8010604 <vTaskSwitchContext>
	prvTaskExitError();
 80119b0:	f7ff ff1e 	bl	80117f0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80119b4:	2300      	movs	r3, #0
}
 80119b6:	4618      	mov	r0, r3
 80119b8:	3718      	adds	r7, #24
 80119ba:	46bd      	mov	sp, r7
 80119bc:	bd80      	pop	{r7, pc}
 80119be:	bf00      	nop
 80119c0:	e000ed00 	.word	0xe000ed00
 80119c4:	410fc271 	.word	0x410fc271
 80119c8:	410fc270 	.word	0x410fc270
 80119cc:	e000e400 	.word	0xe000e400
 80119d0:	200023fc 	.word	0x200023fc
 80119d4:	20002400 	.word	0x20002400
 80119d8:	e000ed20 	.word	0xe000ed20
 80119dc:	20000050 	.word	0x20000050
 80119e0:	e000ef34 	.word	0xe000ef34

080119e4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80119e4:	b480      	push	{r7}
 80119e6:	b083      	sub	sp, #12
 80119e8:	af00      	add	r7, sp, #0
	__asm volatile
 80119ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80119ee:	f383 8811 	msr	BASEPRI, r3
 80119f2:	f3bf 8f6f 	isb	sy
 80119f6:	f3bf 8f4f 	dsb	sy
 80119fa:	607b      	str	r3, [r7, #4]
}
 80119fc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80119fe:	4b0f      	ldr	r3, [pc, #60]	; (8011a3c <vPortEnterCritical+0x58>)
 8011a00:	681b      	ldr	r3, [r3, #0]
 8011a02:	3301      	adds	r3, #1
 8011a04:	4a0d      	ldr	r2, [pc, #52]	; (8011a3c <vPortEnterCritical+0x58>)
 8011a06:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8011a08:	4b0c      	ldr	r3, [pc, #48]	; (8011a3c <vPortEnterCritical+0x58>)
 8011a0a:	681b      	ldr	r3, [r3, #0]
 8011a0c:	2b01      	cmp	r3, #1
 8011a0e:	d10f      	bne.n	8011a30 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8011a10:	4b0b      	ldr	r3, [pc, #44]	; (8011a40 <vPortEnterCritical+0x5c>)
 8011a12:	681b      	ldr	r3, [r3, #0]
 8011a14:	b2db      	uxtb	r3, r3
 8011a16:	2b00      	cmp	r3, #0
 8011a18:	d00a      	beq.n	8011a30 <vPortEnterCritical+0x4c>
	__asm volatile
 8011a1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011a1e:	f383 8811 	msr	BASEPRI, r3
 8011a22:	f3bf 8f6f 	isb	sy
 8011a26:	f3bf 8f4f 	dsb	sy
 8011a2a:	603b      	str	r3, [r7, #0]
}
 8011a2c:	bf00      	nop
 8011a2e:	e7fe      	b.n	8011a2e <vPortEnterCritical+0x4a>
	}
}
 8011a30:	bf00      	nop
 8011a32:	370c      	adds	r7, #12
 8011a34:	46bd      	mov	sp, r7
 8011a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a3a:	4770      	bx	lr
 8011a3c:	20000050 	.word	0x20000050
 8011a40:	e000ed04 	.word	0xe000ed04

08011a44 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8011a44:	b480      	push	{r7}
 8011a46:	b083      	sub	sp, #12
 8011a48:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8011a4a:	4b12      	ldr	r3, [pc, #72]	; (8011a94 <vPortExitCritical+0x50>)
 8011a4c:	681b      	ldr	r3, [r3, #0]
 8011a4e:	2b00      	cmp	r3, #0
 8011a50:	d10a      	bne.n	8011a68 <vPortExitCritical+0x24>
	__asm volatile
 8011a52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011a56:	f383 8811 	msr	BASEPRI, r3
 8011a5a:	f3bf 8f6f 	isb	sy
 8011a5e:	f3bf 8f4f 	dsb	sy
 8011a62:	607b      	str	r3, [r7, #4]
}
 8011a64:	bf00      	nop
 8011a66:	e7fe      	b.n	8011a66 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8011a68:	4b0a      	ldr	r3, [pc, #40]	; (8011a94 <vPortExitCritical+0x50>)
 8011a6a:	681b      	ldr	r3, [r3, #0]
 8011a6c:	3b01      	subs	r3, #1
 8011a6e:	4a09      	ldr	r2, [pc, #36]	; (8011a94 <vPortExitCritical+0x50>)
 8011a70:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8011a72:	4b08      	ldr	r3, [pc, #32]	; (8011a94 <vPortExitCritical+0x50>)
 8011a74:	681b      	ldr	r3, [r3, #0]
 8011a76:	2b00      	cmp	r3, #0
 8011a78:	d105      	bne.n	8011a86 <vPortExitCritical+0x42>
 8011a7a:	2300      	movs	r3, #0
 8011a7c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8011a7e:	683b      	ldr	r3, [r7, #0]
 8011a80:	f383 8811 	msr	BASEPRI, r3
}
 8011a84:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8011a86:	bf00      	nop
 8011a88:	370c      	adds	r7, #12
 8011a8a:	46bd      	mov	sp, r7
 8011a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a90:	4770      	bx	lr
 8011a92:	bf00      	nop
 8011a94:	20000050 	.word	0x20000050
	...

08011aa0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8011aa0:	f3ef 8009 	mrs	r0, PSP
 8011aa4:	f3bf 8f6f 	isb	sy
 8011aa8:	4b15      	ldr	r3, [pc, #84]	; (8011b00 <pxCurrentTCBConst>)
 8011aaa:	681a      	ldr	r2, [r3, #0]
 8011aac:	f01e 0f10 	tst.w	lr, #16
 8011ab0:	bf08      	it	eq
 8011ab2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8011ab6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011aba:	6010      	str	r0, [r2, #0]
 8011abc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8011ac0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8011ac4:	f380 8811 	msr	BASEPRI, r0
 8011ac8:	f3bf 8f4f 	dsb	sy
 8011acc:	f3bf 8f6f 	isb	sy
 8011ad0:	f7fe fd98 	bl	8010604 <vTaskSwitchContext>
 8011ad4:	f04f 0000 	mov.w	r0, #0
 8011ad8:	f380 8811 	msr	BASEPRI, r0
 8011adc:	bc09      	pop	{r0, r3}
 8011ade:	6819      	ldr	r1, [r3, #0]
 8011ae0:	6808      	ldr	r0, [r1, #0]
 8011ae2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011ae6:	f01e 0f10 	tst.w	lr, #16
 8011aea:	bf08      	it	eq
 8011aec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8011af0:	f380 8809 	msr	PSP, r0
 8011af4:	f3bf 8f6f 	isb	sy
 8011af8:	4770      	bx	lr
 8011afa:	bf00      	nop
 8011afc:	f3af 8000 	nop.w

08011b00 <pxCurrentTCBConst>:
 8011b00:	20001dc8 	.word	0x20001dc8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8011b04:	bf00      	nop
 8011b06:	bf00      	nop

08011b08 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8011b08:	b580      	push	{r7, lr}
 8011b0a:	b082      	sub	sp, #8
 8011b0c:	af00      	add	r7, sp, #0
	__asm volatile
 8011b0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011b12:	f383 8811 	msr	BASEPRI, r3
 8011b16:	f3bf 8f6f 	isb	sy
 8011b1a:	f3bf 8f4f 	dsb	sy
 8011b1e:	607b      	str	r3, [r7, #4]
}
 8011b20:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8011b22:	f7fe fcb5 	bl	8010490 <xTaskIncrementTick>
 8011b26:	4603      	mov	r3, r0
 8011b28:	2b00      	cmp	r3, #0
 8011b2a:	d003      	beq.n	8011b34 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8011b2c:	4b06      	ldr	r3, [pc, #24]	; (8011b48 <xPortSysTickHandler+0x40>)
 8011b2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011b32:	601a      	str	r2, [r3, #0]
 8011b34:	2300      	movs	r3, #0
 8011b36:	603b      	str	r3, [r7, #0]
	__asm volatile
 8011b38:	683b      	ldr	r3, [r7, #0]
 8011b3a:	f383 8811 	msr	BASEPRI, r3
}
 8011b3e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8011b40:	bf00      	nop
 8011b42:	3708      	adds	r7, #8
 8011b44:	46bd      	mov	sp, r7
 8011b46:	bd80      	pop	{r7, pc}
 8011b48:	e000ed04 	.word	0xe000ed04

08011b4c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8011b4c:	b480      	push	{r7}
 8011b4e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8011b50:	4b0b      	ldr	r3, [pc, #44]	; (8011b80 <vPortSetupTimerInterrupt+0x34>)
 8011b52:	2200      	movs	r2, #0
 8011b54:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8011b56:	4b0b      	ldr	r3, [pc, #44]	; (8011b84 <vPortSetupTimerInterrupt+0x38>)
 8011b58:	2200      	movs	r2, #0
 8011b5a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8011b5c:	4b0a      	ldr	r3, [pc, #40]	; (8011b88 <vPortSetupTimerInterrupt+0x3c>)
 8011b5e:	681b      	ldr	r3, [r3, #0]
 8011b60:	4a0a      	ldr	r2, [pc, #40]	; (8011b8c <vPortSetupTimerInterrupt+0x40>)
 8011b62:	fba2 2303 	umull	r2, r3, r2, r3
 8011b66:	099b      	lsrs	r3, r3, #6
 8011b68:	4a09      	ldr	r2, [pc, #36]	; (8011b90 <vPortSetupTimerInterrupt+0x44>)
 8011b6a:	3b01      	subs	r3, #1
 8011b6c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8011b6e:	4b04      	ldr	r3, [pc, #16]	; (8011b80 <vPortSetupTimerInterrupt+0x34>)
 8011b70:	2207      	movs	r2, #7
 8011b72:	601a      	str	r2, [r3, #0]
}
 8011b74:	bf00      	nop
 8011b76:	46bd      	mov	sp, r7
 8011b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b7c:	4770      	bx	lr
 8011b7e:	bf00      	nop
 8011b80:	e000e010 	.word	0xe000e010
 8011b84:	e000e018 	.word	0xe000e018
 8011b88:	20000010 	.word	0x20000010
 8011b8c:	10624dd3 	.word	0x10624dd3
 8011b90:	e000e014 	.word	0xe000e014

08011b94 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8011b94:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8011ba4 <vPortEnableVFP+0x10>
 8011b98:	6801      	ldr	r1, [r0, #0]
 8011b9a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8011b9e:	6001      	str	r1, [r0, #0]
 8011ba0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8011ba2:	bf00      	nop
 8011ba4:	e000ed88 	.word	0xe000ed88

08011ba8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8011ba8:	b480      	push	{r7}
 8011baa:	b085      	sub	sp, #20
 8011bac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8011bae:	f3ef 8305 	mrs	r3, IPSR
 8011bb2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8011bb4:	68fb      	ldr	r3, [r7, #12]
 8011bb6:	2b0f      	cmp	r3, #15
 8011bb8:	d914      	bls.n	8011be4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8011bba:	4a17      	ldr	r2, [pc, #92]	; (8011c18 <vPortValidateInterruptPriority+0x70>)
 8011bbc:	68fb      	ldr	r3, [r7, #12]
 8011bbe:	4413      	add	r3, r2
 8011bc0:	781b      	ldrb	r3, [r3, #0]
 8011bc2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8011bc4:	4b15      	ldr	r3, [pc, #84]	; (8011c1c <vPortValidateInterruptPriority+0x74>)
 8011bc6:	781b      	ldrb	r3, [r3, #0]
 8011bc8:	7afa      	ldrb	r2, [r7, #11]
 8011bca:	429a      	cmp	r2, r3
 8011bcc:	d20a      	bcs.n	8011be4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8011bce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011bd2:	f383 8811 	msr	BASEPRI, r3
 8011bd6:	f3bf 8f6f 	isb	sy
 8011bda:	f3bf 8f4f 	dsb	sy
 8011bde:	607b      	str	r3, [r7, #4]
}
 8011be0:	bf00      	nop
 8011be2:	e7fe      	b.n	8011be2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8011be4:	4b0e      	ldr	r3, [pc, #56]	; (8011c20 <vPortValidateInterruptPriority+0x78>)
 8011be6:	681b      	ldr	r3, [r3, #0]
 8011be8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8011bec:	4b0d      	ldr	r3, [pc, #52]	; (8011c24 <vPortValidateInterruptPriority+0x7c>)
 8011bee:	681b      	ldr	r3, [r3, #0]
 8011bf0:	429a      	cmp	r2, r3
 8011bf2:	d90a      	bls.n	8011c0a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8011bf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011bf8:	f383 8811 	msr	BASEPRI, r3
 8011bfc:	f3bf 8f6f 	isb	sy
 8011c00:	f3bf 8f4f 	dsb	sy
 8011c04:	603b      	str	r3, [r7, #0]
}
 8011c06:	bf00      	nop
 8011c08:	e7fe      	b.n	8011c08 <vPortValidateInterruptPriority+0x60>
	}
 8011c0a:	bf00      	nop
 8011c0c:	3714      	adds	r7, #20
 8011c0e:	46bd      	mov	sp, r7
 8011c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c14:	4770      	bx	lr
 8011c16:	bf00      	nop
 8011c18:	e000e3f0 	.word	0xe000e3f0
 8011c1c:	200023fc 	.word	0x200023fc
 8011c20:	e000ed0c 	.word	0xe000ed0c
 8011c24:	20002400 	.word	0x20002400

08011c28 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8011c28:	b580      	push	{r7, lr}
 8011c2a:	b08a      	sub	sp, #40	; 0x28
 8011c2c:	af00      	add	r7, sp, #0
 8011c2e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8011c30:	2300      	movs	r3, #0
 8011c32:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8011c34:	f7fe fb70 	bl	8010318 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8011c38:	4b5b      	ldr	r3, [pc, #364]	; (8011da8 <pvPortMalloc+0x180>)
 8011c3a:	681b      	ldr	r3, [r3, #0]
 8011c3c:	2b00      	cmp	r3, #0
 8011c3e:	d101      	bne.n	8011c44 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8011c40:	f000 f920 	bl	8011e84 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8011c44:	4b59      	ldr	r3, [pc, #356]	; (8011dac <pvPortMalloc+0x184>)
 8011c46:	681a      	ldr	r2, [r3, #0]
 8011c48:	687b      	ldr	r3, [r7, #4]
 8011c4a:	4013      	ands	r3, r2
 8011c4c:	2b00      	cmp	r3, #0
 8011c4e:	f040 8093 	bne.w	8011d78 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8011c52:	687b      	ldr	r3, [r7, #4]
 8011c54:	2b00      	cmp	r3, #0
 8011c56:	d01d      	beq.n	8011c94 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8011c58:	2208      	movs	r2, #8
 8011c5a:	687b      	ldr	r3, [r7, #4]
 8011c5c:	4413      	add	r3, r2
 8011c5e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8011c60:	687b      	ldr	r3, [r7, #4]
 8011c62:	f003 0307 	and.w	r3, r3, #7
 8011c66:	2b00      	cmp	r3, #0
 8011c68:	d014      	beq.n	8011c94 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8011c6a:	687b      	ldr	r3, [r7, #4]
 8011c6c:	f023 0307 	bic.w	r3, r3, #7
 8011c70:	3308      	adds	r3, #8
 8011c72:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8011c74:	687b      	ldr	r3, [r7, #4]
 8011c76:	f003 0307 	and.w	r3, r3, #7
 8011c7a:	2b00      	cmp	r3, #0
 8011c7c:	d00a      	beq.n	8011c94 <pvPortMalloc+0x6c>
	__asm volatile
 8011c7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011c82:	f383 8811 	msr	BASEPRI, r3
 8011c86:	f3bf 8f6f 	isb	sy
 8011c8a:	f3bf 8f4f 	dsb	sy
 8011c8e:	617b      	str	r3, [r7, #20]
}
 8011c90:	bf00      	nop
 8011c92:	e7fe      	b.n	8011c92 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8011c94:	687b      	ldr	r3, [r7, #4]
 8011c96:	2b00      	cmp	r3, #0
 8011c98:	d06e      	beq.n	8011d78 <pvPortMalloc+0x150>
 8011c9a:	4b45      	ldr	r3, [pc, #276]	; (8011db0 <pvPortMalloc+0x188>)
 8011c9c:	681b      	ldr	r3, [r3, #0]
 8011c9e:	687a      	ldr	r2, [r7, #4]
 8011ca0:	429a      	cmp	r2, r3
 8011ca2:	d869      	bhi.n	8011d78 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8011ca4:	4b43      	ldr	r3, [pc, #268]	; (8011db4 <pvPortMalloc+0x18c>)
 8011ca6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8011ca8:	4b42      	ldr	r3, [pc, #264]	; (8011db4 <pvPortMalloc+0x18c>)
 8011caa:	681b      	ldr	r3, [r3, #0]
 8011cac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8011cae:	e004      	b.n	8011cba <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8011cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011cb2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8011cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011cb6:	681b      	ldr	r3, [r3, #0]
 8011cb8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8011cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011cbc:	685b      	ldr	r3, [r3, #4]
 8011cbe:	687a      	ldr	r2, [r7, #4]
 8011cc0:	429a      	cmp	r2, r3
 8011cc2:	d903      	bls.n	8011ccc <pvPortMalloc+0xa4>
 8011cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011cc6:	681b      	ldr	r3, [r3, #0]
 8011cc8:	2b00      	cmp	r3, #0
 8011cca:	d1f1      	bne.n	8011cb0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8011ccc:	4b36      	ldr	r3, [pc, #216]	; (8011da8 <pvPortMalloc+0x180>)
 8011cce:	681b      	ldr	r3, [r3, #0]
 8011cd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011cd2:	429a      	cmp	r2, r3
 8011cd4:	d050      	beq.n	8011d78 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8011cd6:	6a3b      	ldr	r3, [r7, #32]
 8011cd8:	681b      	ldr	r3, [r3, #0]
 8011cda:	2208      	movs	r2, #8
 8011cdc:	4413      	add	r3, r2
 8011cde:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8011ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ce2:	681a      	ldr	r2, [r3, #0]
 8011ce4:	6a3b      	ldr	r3, [r7, #32]
 8011ce6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8011ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011cea:	685a      	ldr	r2, [r3, #4]
 8011cec:	687b      	ldr	r3, [r7, #4]
 8011cee:	1ad2      	subs	r2, r2, r3
 8011cf0:	2308      	movs	r3, #8
 8011cf2:	005b      	lsls	r3, r3, #1
 8011cf4:	429a      	cmp	r2, r3
 8011cf6:	d91f      	bls.n	8011d38 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8011cf8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011cfa:	687b      	ldr	r3, [r7, #4]
 8011cfc:	4413      	add	r3, r2
 8011cfe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8011d00:	69bb      	ldr	r3, [r7, #24]
 8011d02:	f003 0307 	and.w	r3, r3, #7
 8011d06:	2b00      	cmp	r3, #0
 8011d08:	d00a      	beq.n	8011d20 <pvPortMalloc+0xf8>
	__asm volatile
 8011d0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011d0e:	f383 8811 	msr	BASEPRI, r3
 8011d12:	f3bf 8f6f 	isb	sy
 8011d16:	f3bf 8f4f 	dsb	sy
 8011d1a:	613b      	str	r3, [r7, #16]
}
 8011d1c:	bf00      	nop
 8011d1e:	e7fe      	b.n	8011d1e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8011d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d22:	685a      	ldr	r2, [r3, #4]
 8011d24:	687b      	ldr	r3, [r7, #4]
 8011d26:	1ad2      	subs	r2, r2, r3
 8011d28:	69bb      	ldr	r3, [r7, #24]
 8011d2a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8011d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d2e:	687a      	ldr	r2, [r7, #4]
 8011d30:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8011d32:	69b8      	ldr	r0, [r7, #24]
 8011d34:	f000 f908 	bl	8011f48 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8011d38:	4b1d      	ldr	r3, [pc, #116]	; (8011db0 <pvPortMalloc+0x188>)
 8011d3a:	681a      	ldr	r2, [r3, #0]
 8011d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d3e:	685b      	ldr	r3, [r3, #4]
 8011d40:	1ad3      	subs	r3, r2, r3
 8011d42:	4a1b      	ldr	r2, [pc, #108]	; (8011db0 <pvPortMalloc+0x188>)
 8011d44:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8011d46:	4b1a      	ldr	r3, [pc, #104]	; (8011db0 <pvPortMalloc+0x188>)
 8011d48:	681a      	ldr	r2, [r3, #0]
 8011d4a:	4b1b      	ldr	r3, [pc, #108]	; (8011db8 <pvPortMalloc+0x190>)
 8011d4c:	681b      	ldr	r3, [r3, #0]
 8011d4e:	429a      	cmp	r2, r3
 8011d50:	d203      	bcs.n	8011d5a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8011d52:	4b17      	ldr	r3, [pc, #92]	; (8011db0 <pvPortMalloc+0x188>)
 8011d54:	681b      	ldr	r3, [r3, #0]
 8011d56:	4a18      	ldr	r2, [pc, #96]	; (8011db8 <pvPortMalloc+0x190>)
 8011d58:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8011d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d5c:	685a      	ldr	r2, [r3, #4]
 8011d5e:	4b13      	ldr	r3, [pc, #76]	; (8011dac <pvPortMalloc+0x184>)
 8011d60:	681b      	ldr	r3, [r3, #0]
 8011d62:	431a      	orrs	r2, r3
 8011d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d66:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8011d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d6a:	2200      	movs	r2, #0
 8011d6c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8011d6e:	4b13      	ldr	r3, [pc, #76]	; (8011dbc <pvPortMalloc+0x194>)
 8011d70:	681b      	ldr	r3, [r3, #0]
 8011d72:	3301      	adds	r3, #1
 8011d74:	4a11      	ldr	r2, [pc, #68]	; (8011dbc <pvPortMalloc+0x194>)
 8011d76:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8011d78:	f7fe fadc 	bl	8010334 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8011d7c:	69fb      	ldr	r3, [r7, #28]
 8011d7e:	f003 0307 	and.w	r3, r3, #7
 8011d82:	2b00      	cmp	r3, #0
 8011d84:	d00a      	beq.n	8011d9c <pvPortMalloc+0x174>
	__asm volatile
 8011d86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011d8a:	f383 8811 	msr	BASEPRI, r3
 8011d8e:	f3bf 8f6f 	isb	sy
 8011d92:	f3bf 8f4f 	dsb	sy
 8011d96:	60fb      	str	r3, [r7, #12]
}
 8011d98:	bf00      	nop
 8011d9a:	e7fe      	b.n	8011d9a <pvPortMalloc+0x172>
	return pvReturn;
 8011d9c:	69fb      	ldr	r3, [r7, #28]
}
 8011d9e:	4618      	mov	r0, r3
 8011da0:	3728      	adds	r7, #40	; 0x28
 8011da2:	46bd      	mov	sp, r7
 8011da4:	bd80      	pop	{r7, pc}
 8011da6:	bf00      	nop
 8011da8:	20004f04 	.word	0x20004f04
 8011dac:	20004f18 	.word	0x20004f18
 8011db0:	20004f08 	.word	0x20004f08
 8011db4:	20004efc 	.word	0x20004efc
 8011db8:	20004f0c 	.word	0x20004f0c
 8011dbc:	20004f10 	.word	0x20004f10

08011dc0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8011dc0:	b580      	push	{r7, lr}
 8011dc2:	b086      	sub	sp, #24
 8011dc4:	af00      	add	r7, sp, #0
 8011dc6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8011dc8:	687b      	ldr	r3, [r7, #4]
 8011dca:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8011dcc:	687b      	ldr	r3, [r7, #4]
 8011dce:	2b00      	cmp	r3, #0
 8011dd0:	d04d      	beq.n	8011e6e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8011dd2:	2308      	movs	r3, #8
 8011dd4:	425b      	negs	r3, r3
 8011dd6:	697a      	ldr	r2, [r7, #20]
 8011dd8:	4413      	add	r3, r2
 8011dda:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8011ddc:	697b      	ldr	r3, [r7, #20]
 8011dde:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8011de0:	693b      	ldr	r3, [r7, #16]
 8011de2:	685a      	ldr	r2, [r3, #4]
 8011de4:	4b24      	ldr	r3, [pc, #144]	; (8011e78 <vPortFree+0xb8>)
 8011de6:	681b      	ldr	r3, [r3, #0]
 8011de8:	4013      	ands	r3, r2
 8011dea:	2b00      	cmp	r3, #0
 8011dec:	d10a      	bne.n	8011e04 <vPortFree+0x44>
	__asm volatile
 8011dee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011df2:	f383 8811 	msr	BASEPRI, r3
 8011df6:	f3bf 8f6f 	isb	sy
 8011dfa:	f3bf 8f4f 	dsb	sy
 8011dfe:	60fb      	str	r3, [r7, #12]
}
 8011e00:	bf00      	nop
 8011e02:	e7fe      	b.n	8011e02 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8011e04:	693b      	ldr	r3, [r7, #16]
 8011e06:	681b      	ldr	r3, [r3, #0]
 8011e08:	2b00      	cmp	r3, #0
 8011e0a:	d00a      	beq.n	8011e22 <vPortFree+0x62>
	__asm volatile
 8011e0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011e10:	f383 8811 	msr	BASEPRI, r3
 8011e14:	f3bf 8f6f 	isb	sy
 8011e18:	f3bf 8f4f 	dsb	sy
 8011e1c:	60bb      	str	r3, [r7, #8]
}
 8011e1e:	bf00      	nop
 8011e20:	e7fe      	b.n	8011e20 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8011e22:	693b      	ldr	r3, [r7, #16]
 8011e24:	685a      	ldr	r2, [r3, #4]
 8011e26:	4b14      	ldr	r3, [pc, #80]	; (8011e78 <vPortFree+0xb8>)
 8011e28:	681b      	ldr	r3, [r3, #0]
 8011e2a:	4013      	ands	r3, r2
 8011e2c:	2b00      	cmp	r3, #0
 8011e2e:	d01e      	beq.n	8011e6e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8011e30:	693b      	ldr	r3, [r7, #16]
 8011e32:	681b      	ldr	r3, [r3, #0]
 8011e34:	2b00      	cmp	r3, #0
 8011e36:	d11a      	bne.n	8011e6e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8011e38:	693b      	ldr	r3, [r7, #16]
 8011e3a:	685a      	ldr	r2, [r3, #4]
 8011e3c:	4b0e      	ldr	r3, [pc, #56]	; (8011e78 <vPortFree+0xb8>)
 8011e3e:	681b      	ldr	r3, [r3, #0]
 8011e40:	43db      	mvns	r3, r3
 8011e42:	401a      	ands	r2, r3
 8011e44:	693b      	ldr	r3, [r7, #16]
 8011e46:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8011e48:	f7fe fa66 	bl	8010318 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8011e4c:	693b      	ldr	r3, [r7, #16]
 8011e4e:	685a      	ldr	r2, [r3, #4]
 8011e50:	4b0a      	ldr	r3, [pc, #40]	; (8011e7c <vPortFree+0xbc>)
 8011e52:	681b      	ldr	r3, [r3, #0]
 8011e54:	4413      	add	r3, r2
 8011e56:	4a09      	ldr	r2, [pc, #36]	; (8011e7c <vPortFree+0xbc>)
 8011e58:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8011e5a:	6938      	ldr	r0, [r7, #16]
 8011e5c:	f000 f874 	bl	8011f48 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8011e60:	4b07      	ldr	r3, [pc, #28]	; (8011e80 <vPortFree+0xc0>)
 8011e62:	681b      	ldr	r3, [r3, #0]
 8011e64:	3301      	adds	r3, #1
 8011e66:	4a06      	ldr	r2, [pc, #24]	; (8011e80 <vPortFree+0xc0>)
 8011e68:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8011e6a:	f7fe fa63 	bl	8010334 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8011e6e:	bf00      	nop
 8011e70:	3718      	adds	r7, #24
 8011e72:	46bd      	mov	sp, r7
 8011e74:	bd80      	pop	{r7, pc}
 8011e76:	bf00      	nop
 8011e78:	20004f18 	.word	0x20004f18
 8011e7c:	20004f08 	.word	0x20004f08
 8011e80:	20004f14 	.word	0x20004f14

08011e84 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8011e84:	b480      	push	{r7}
 8011e86:	b085      	sub	sp, #20
 8011e88:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8011e8a:	f642 23f8 	movw	r3, #11000	; 0x2af8
 8011e8e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8011e90:	4b27      	ldr	r3, [pc, #156]	; (8011f30 <prvHeapInit+0xac>)
 8011e92:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8011e94:	68fb      	ldr	r3, [r7, #12]
 8011e96:	f003 0307 	and.w	r3, r3, #7
 8011e9a:	2b00      	cmp	r3, #0
 8011e9c:	d00c      	beq.n	8011eb8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8011e9e:	68fb      	ldr	r3, [r7, #12]
 8011ea0:	3307      	adds	r3, #7
 8011ea2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8011ea4:	68fb      	ldr	r3, [r7, #12]
 8011ea6:	f023 0307 	bic.w	r3, r3, #7
 8011eaa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8011eac:	68ba      	ldr	r2, [r7, #8]
 8011eae:	68fb      	ldr	r3, [r7, #12]
 8011eb0:	1ad3      	subs	r3, r2, r3
 8011eb2:	4a1f      	ldr	r2, [pc, #124]	; (8011f30 <prvHeapInit+0xac>)
 8011eb4:	4413      	add	r3, r2
 8011eb6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8011eb8:	68fb      	ldr	r3, [r7, #12]
 8011eba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8011ebc:	4a1d      	ldr	r2, [pc, #116]	; (8011f34 <prvHeapInit+0xb0>)
 8011ebe:	687b      	ldr	r3, [r7, #4]
 8011ec0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8011ec2:	4b1c      	ldr	r3, [pc, #112]	; (8011f34 <prvHeapInit+0xb0>)
 8011ec4:	2200      	movs	r2, #0
 8011ec6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8011ec8:	687b      	ldr	r3, [r7, #4]
 8011eca:	68ba      	ldr	r2, [r7, #8]
 8011ecc:	4413      	add	r3, r2
 8011ece:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8011ed0:	2208      	movs	r2, #8
 8011ed2:	68fb      	ldr	r3, [r7, #12]
 8011ed4:	1a9b      	subs	r3, r3, r2
 8011ed6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8011ed8:	68fb      	ldr	r3, [r7, #12]
 8011eda:	f023 0307 	bic.w	r3, r3, #7
 8011ede:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8011ee0:	68fb      	ldr	r3, [r7, #12]
 8011ee2:	4a15      	ldr	r2, [pc, #84]	; (8011f38 <prvHeapInit+0xb4>)
 8011ee4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8011ee6:	4b14      	ldr	r3, [pc, #80]	; (8011f38 <prvHeapInit+0xb4>)
 8011ee8:	681b      	ldr	r3, [r3, #0]
 8011eea:	2200      	movs	r2, #0
 8011eec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8011eee:	4b12      	ldr	r3, [pc, #72]	; (8011f38 <prvHeapInit+0xb4>)
 8011ef0:	681b      	ldr	r3, [r3, #0]
 8011ef2:	2200      	movs	r2, #0
 8011ef4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8011ef6:	687b      	ldr	r3, [r7, #4]
 8011ef8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8011efa:	683b      	ldr	r3, [r7, #0]
 8011efc:	68fa      	ldr	r2, [r7, #12]
 8011efe:	1ad2      	subs	r2, r2, r3
 8011f00:	683b      	ldr	r3, [r7, #0]
 8011f02:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8011f04:	4b0c      	ldr	r3, [pc, #48]	; (8011f38 <prvHeapInit+0xb4>)
 8011f06:	681a      	ldr	r2, [r3, #0]
 8011f08:	683b      	ldr	r3, [r7, #0]
 8011f0a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8011f0c:	683b      	ldr	r3, [r7, #0]
 8011f0e:	685b      	ldr	r3, [r3, #4]
 8011f10:	4a0a      	ldr	r2, [pc, #40]	; (8011f3c <prvHeapInit+0xb8>)
 8011f12:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8011f14:	683b      	ldr	r3, [r7, #0]
 8011f16:	685b      	ldr	r3, [r3, #4]
 8011f18:	4a09      	ldr	r2, [pc, #36]	; (8011f40 <prvHeapInit+0xbc>)
 8011f1a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8011f1c:	4b09      	ldr	r3, [pc, #36]	; (8011f44 <prvHeapInit+0xc0>)
 8011f1e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8011f22:	601a      	str	r2, [r3, #0]
}
 8011f24:	bf00      	nop
 8011f26:	3714      	adds	r7, #20
 8011f28:	46bd      	mov	sp, r7
 8011f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f2e:	4770      	bx	lr
 8011f30:	20002404 	.word	0x20002404
 8011f34:	20004efc 	.word	0x20004efc
 8011f38:	20004f04 	.word	0x20004f04
 8011f3c:	20004f0c 	.word	0x20004f0c
 8011f40:	20004f08 	.word	0x20004f08
 8011f44:	20004f18 	.word	0x20004f18

08011f48 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8011f48:	b480      	push	{r7}
 8011f4a:	b085      	sub	sp, #20
 8011f4c:	af00      	add	r7, sp, #0
 8011f4e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8011f50:	4b28      	ldr	r3, [pc, #160]	; (8011ff4 <prvInsertBlockIntoFreeList+0xac>)
 8011f52:	60fb      	str	r3, [r7, #12]
 8011f54:	e002      	b.n	8011f5c <prvInsertBlockIntoFreeList+0x14>
 8011f56:	68fb      	ldr	r3, [r7, #12]
 8011f58:	681b      	ldr	r3, [r3, #0]
 8011f5a:	60fb      	str	r3, [r7, #12]
 8011f5c:	68fb      	ldr	r3, [r7, #12]
 8011f5e:	681b      	ldr	r3, [r3, #0]
 8011f60:	687a      	ldr	r2, [r7, #4]
 8011f62:	429a      	cmp	r2, r3
 8011f64:	d8f7      	bhi.n	8011f56 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8011f66:	68fb      	ldr	r3, [r7, #12]
 8011f68:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8011f6a:	68fb      	ldr	r3, [r7, #12]
 8011f6c:	685b      	ldr	r3, [r3, #4]
 8011f6e:	68ba      	ldr	r2, [r7, #8]
 8011f70:	4413      	add	r3, r2
 8011f72:	687a      	ldr	r2, [r7, #4]
 8011f74:	429a      	cmp	r2, r3
 8011f76:	d108      	bne.n	8011f8a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8011f78:	68fb      	ldr	r3, [r7, #12]
 8011f7a:	685a      	ldr	r2, [r3, #4]
 8011f7c:	687b      	ldr	r3, [r7, #4]
 8011f7e:	685b      	ldr	r3, [r3, #4]
 8011f80:	441a      	add	r2, r3
 8011f82:	68fb      	ldr	r3, [r7, #12]
 8011f84:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8011f86:	68fb      	ldr	r3, [r7, #12]
 8011f88:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8011f8a:	687b      	ldr	r3, [r7, #4]
 8011f8c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8011f8e:	687b      	ldr	r3, [r7, #4]
 8011f90:	685b      	ldr	r3, [r3, #4]
 8011f92:	68ba      	ldr	r2, [r7, #8]
 8011f94:	441a      	add	r2, r3
 8011f96:	68fb      	ldr	r3, [r7, #12]
 8011f98:	681b      	ldr	r3, [r3, #0]
 8011f9a:	429a      	cmp	r2, r3
 8011f9c:	d118      	bne.n	8011fd0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8011f9e:	68fb      	ldr	r3, [r7, #12]
 8011fa0:	681a      	ldr	r2, [r3, #0]
 8011fa2:	4b15      	ldr	r3, [pc, #84]	; (8011ff8 <prvInsertBlockIntoFreeList+0xb0>)
 8011fa4:	681b      	ldr	r3, [r3, #0]
 8011fa6:	429a      	cmp	r2, r3
 8011fa8:	d00d      	beq.n	8011fc6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8011faa:	687b      	ldr	r3, [r7, #4]
 8011fac:	685a      	ldr	r2, [r3, #4]
 8011fae:	68fb      	ldr	r3, [r7, #12]
 8011fb0:	681b      	ldr	r3, [r3, #0]
 8011fb2:	685b      	ldr	r3, [r3, #4]
 8011fb4:	441a      	add	r2, r3
 8011fb6:	687b      	ldr	r3, [r7, #4]
 8011fb8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8011fba:	68fb      	ldr	r3, [r7, #12]
 8011fbc:	681b      	ldr	r3, [r3, #0]
 8011fbe:	681a      	ldr	r2, [r3, #0]
 8011fc0:	687b      	ldr	r3, [r7, #4]
 8011fc2:	601a      	str	r2, [r3, #0]
 8011fc4:	e008      	b.n	8011fd8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8011fc6:	4b0c      	ldr	r3, [pc, #48]	; (8011ff8 <prvInsertBlockIntoFreeList+0xb0>)
 8011fc8:	681a      	ldr	r2, [r3, #0]
 8011fca:	687b      	ldr	r3, [r7, #4]
 8011fcc:	601a      	str	r2, [r3, #0]
 8011fce:	e003      	b.n	8011fd8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8011fd0:	68fb      	ldr	r3, [r7, #12]
 8011fd2:	681a      	ldr	r2, [r3, #0]
 8011fd4:	687b      	ldr	r3, [r7, #4]
 8011fd6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8011fd8:	68fa      	ldr	r2, [r7, #12]
 8011fda:	687b      	ldr	r3, [r7, #4]
 8011fdc:	429a      	cmp	r2, r3
 8011fde:	d002      	beq.n	8011fe6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8011fe0:	68fb      	ldr	r3, [r7, #12]
 8011fe2:	687a      	ldr	r2, [r7, #4]
 8011fe4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8011fe6:	bf00      	nop
 8011fe8:	3714      	adds	r7, #20
 8011fea:	46bd      	mov	sp, r7
 8011fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ff0:	4770      	bx	lr
 8011ff2:	bf00      	nop
 8011ff4:	20004efc 	.word	0x20004efc
 8011ff8:	20004f04 	.word	0x20004f04

08011ffc <__assert_func>:
 8011ffc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011ffe:	4614      	mov	r4, r2
 8012000:	461a      	mov	r2, r3
 8012002:	4b09      	ldr	r3, [pc, #36]	; (8012028 <__assert_func+0x2c>)
 8012004:	681b      	ldr	r3, [r3, #0]
 8012006:	4605      	mov	r5, r0
 8012008:	68d8      	ldr	r0, [r3, #12]
 801200a:	b14c      	cbz	r4, 8012020 <__assert_func+0x24>
 801200c:	4b07      	ldr	r3, [pc, #28]	; (801202c <__assert_func+0x30>)
 801200e:	9100      	str	r1, [sp, #0]
 8012010:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8012014:	4906      	ldr	r1, [pc, #24]	; (8012030 <__assert_func+0x34>)
 8012016:	462b      	mov	r3, r5
 8012018:	f000 f8ea 	bl	80121f0 <fiprintf>
 801201c:	f000 fffa 	bl	8013014 <abort>
 8012020:	4b04      	ldr	r3, [pc, #16]	; (8012034 <__assert_func+0x38>)
 8012022:	461c      	mov	r4, r3
 8012024:	e7f3      	b.n	801200e <__assert_func+0x12>
 8012026:	bf00      	nop
 8012028:	20000054 	.word	0x20000054
 801202c:	080153f3 	.word	0x080153f3
 8012030:	08015400 	.word	0x08015400
 8012034:	0801542e 	.word	0x0801542e

08012038 <__errno>:
 8012038:	4b01      	ldr	r3, [pc, #4]	; (8012040 <__errno+0x8>)
 801203a:	6818      	ldr	r0, [r3, #0]
 801203c:	4770      	bx	lr
 801203e:	bf00      	nop
 8012040:	20000054 	.word	0x20000054

08012044 <std>:
 8012044:	2300      	movs	r3, #0
 8012046:	b510      	push	{r4, lr}
 8012048:	4604      	mov	r4, r0
 801204a:	e9c0 3300 	strd	r3, r3, [r0]
 801204e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8012052:	6083      	str	r3, [r0, #8]
 8012054:	8181      	strh	r1, [r0, #12]
 8012056:	6643      	str	r3, [r0, #100]	; 0x64
 8012058:	81c2      	strh	r2, [r0, #14]
 801205a:	6183      	str	r3, [r0, #24]
 801205c:	4619      	mov	r1, r3
 801205e:	2208      	movs	r2, #8
 8012060:	305c      	adds	r0, #92	; 0x5c
 8012062:	f000 f956 	bl	8012312 <memset>
 8012066:	4b05      	ldr	r3, [pc, #20]	; (801207c <std+0x38>)
 8012068:	6263      	str	r3, [r4, #36]	; 0x24
 801206a:	4b05      	ldr	r3, [pc, #20]	; (8012080 <std+0x3c>)
 801206c:	62a3      	str	r3, [r4, #40]	; 0x28
 801206e:	4b05      	ldr	r3, [pc, #20]	; (8012084 <std+0x40>)
 8012070:	62e3      	str	r3, [r4, #44]	; 0x2c
 8012072:	4b05      	ldr	r3, [pc, #20]	; (8012088 <std+0x44>)
 8012074:	6224      	str	r4, [r4, #32]
 8012076:	6323      	str	r3, [r4, #48]	; 0x30
 8012078:	bd10      	pop	{r4, pc}
 801207a:	bf00      	nop
 801207c:	08012ce1 	.word	0x08012ce1
 8012080:	08012d03 	.word	0x08012d03
 8012084:	08012d3b 	.word	0x08012d3b
 8012088:	08012d5f 	.word	0x08012d5f

0801208c <_cleanup_r>:
 801208c:	4901      	ldr	r1, [pc, #4]	; (8012094 <_cleanup_r+0x8>)
 801208e:	f000 b8c1 	b.w	8012214 <_fwalk_reent>
 8012092:	bf00      	nop
 8012094:	08013151 	.word	0x08013151

08012098 <__sfmoreglue>:
 8012098:	b570      	push	{r4, r5, r6, lr}
 801209a:	2268      	movs	r2, #104	; 0x68
 801209c:	1e4d      	subs	r5, r1, #1
 801209e:	4355      	muls	r5, r2
 80120a0:	460e      	mov	r6, r1
 80120a2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80120a6:	f000 f95d 	bl	8012364 <_malloc_r>
 80120aa:	4604      	mov	r4, r0
 80120ac:	b140      	cbz	r0, 80120c0 <__sfmoreglue+0x28>
 80120ae:	2100      	movs	r1, #0
 80120b0:	e9c0 1600 	strd	r1, r6, [r0]
 80120b4:	300c      	adds	r0, #12
 80120b6:	60a0      	str	r0, [r4, #8]
 80120b8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80120bc:	f000 f929 	bl	8012312 <memset>
 80120c0:	4620      	mov	r0, r4
 80120c2:	bd70      	pop	{r4, r5, r6, pc}

080120c4 <__sfp_lock_acquire>:
 80120c4:	4801      	ldr	r0, [pc, #4]	; (80120cc <__sfp_lock_acquire+0x8>)
 80120c6:	f000 b8ea 	b.w	801229e <__retarget_lock_acquire_recursive>
 80120ca:	bf00      	nop
 80120cc:	20004f1d 	.word	0x20004f1d

080120d0 <__sfp_lock_release>:
 80120d0:	4801      	ldr	r0, [pc, #4]	; (80120d8 <__sfp_lock_release+0x8>)
 80120d2:	f000 b8e5 	b.w	80122a0 <__retarget_lock_release_recursive>
 80120d6:	bf00      	nop
 80120d8:	20004f1d 	.word	0x20004f1d

080120dc <__sinit_lock_acquire>:
 80120dc:	4801      	ldr	r0, [pc, #4]	; (80120e4 <__sinit_lock_acquire+0x8>)
 80120de:	f000 b8de 	b.w	801229e <__retarget_lock_acquire_recursive>
 80120e2:	bf00      	nop
 80120e4:	20004f1e 	.word	0x20004f1e

080120e8 <__sinit_lock_release>:
 80120e8:	4801      	ldr	r0, [pc, #4]	; (80120f0 <__sinit_lock_release+0x8>)
 80120ea:	f000 b8d9 	b.w	80122a0 <__retarget_lock_release_recursive>
 80120ee:	bf00      	nop
 80120f0:	20004f1e 	.word	0x20004f1e

080120f4 <__sinit>:
 80120f4:	b510      	push	{r4, lr}
 80120f6:	4604      	mov	r4, r0
 80120f8:	f7ff fff0 	bl	80120dc <__sinit_lock_acquire>
 80120fc:	69a3      	ldr	r3, [r4, #24]
 80120fe:	b11b      	cbz	r3, 8012108 <__sinit+0x14>
 8012100:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012104:	f7ff bff0 	b.w	80120e8 <__sinit_lock_release>
 8012108:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801210c:	6523      	str	r3, [r4, #80]	; 0x50
 801210e:	4b13      	ldr	r3, [pc, #76]	; (801215c <__sinit+0x68>)
 8012110:	4a13      	ldr	r2, [pc, #76]	; (8012160 <__sinit+0x6c>)
 8012112:	681b      	ldr	r3, [r3, #0]
 8012114:	62a2      	str	r2, [r4, #40]	; 0x28
 8012116:	42a3      	cmp	r3, r4
 8012118:	bf04      	itt	eq
 801211a:	2301      	moveq	r3, #1
 801211c:	61a3      	streq	r3, [r4, #24]
 801211e:	4620      	mov	r0, r4
 8012120:	f000 f820 	bl	8012164 <__sfp>
 8012124:	6060      	str	r0, [r4, #4]
 8012126:	4620      	mov	r0, r4
 8012128:	f000 f81c 	bl	8012164 <__sfp>
 801212c:	60a0      	str	r0, [r4, #8]
 801212e:	4620      	mov	r0, r4
 8012130:	f000 f818 	bl	8012164 <__sfp>
 8012134:	2200      	movs	r2, #0
 8012136:	60e0      	str	r0, [r4, #12]
 8012138:	2104      	movs	r1, #4
 801213a:	6860      	ldr	r0, [r4, #4]
 801213c:	f7ff ff82 	bl	8012044 <std>
 8012140:	68a0      	ldr	r0, [r4, #8]
 8012142:	2201      	movs	r2, #1
 8012144:	2109      	movs	r1, #9
 8012146:	f7ff ff7d 	bl	8012044 <std>
 801214a:	68e0      	ldr	r0, [r4, #12]
 801214c:	2202      	movs	r2, #2
 801214e:	2112      	movs	r1, #18
 8012150:	f7ff ff78 	bl	8012044 <std>
 8012154:	2301      	movs	r3, #1
 8012156:	61a3      	str	r3, [r4, #24]
 8012158:	e7d2      	b.n	8012100 <__sinit+0xc>
 801215a:	bf00      	nop
 801215c:	08015490 	.word	0x08015490
 8012160:	0801208d 	.word	0x0801208d

08012164 <__sfp>:
 8012164:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012166:	4607      	mov	r7, r0
 8012168:	f7ff ffac 	bl	80120c4 <__sfp_lock_acquire>
 801216c:	4b1e      	ldr	r3, [pc, #120]	; (80121e8 <__sfp+0x84>)
 801216e:	681e      	ldr	r6, [r3, #0]
 8012170:	69b3      	ldr	r3, [r6, #24]
 8012172:	b913      	cbnz	r3, 801217a <__sfp+0x16>
 8012174:	4630      	mov	r0, r6
 8012176:	f7ff ffbd 	bl	80120f4 <__sinit>
 801217a:	3648      	adds	r6, #72	; 0x48
 801217c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8012180:	3b01      	subs	r3, #1
 8012182:	d503      	bpl.n	801218c <__sfp+0x28>
 8012184:	6833      	ldr	r3, [r6, #0]
 8012186:	b30b      	cbz	r3, 80121cc <__sfp+0x68>
 8012188:	6836      	ldr	r6, [r6, #0]
 801218a:	e7f7      	b.n	801217c <__sfp+0x18>
 801218c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8012190:	b9d5      	cbnz	r5, 80121c8 <__sfp+0x64>
 8012192:	4b16      	ldr	r3, [pc, #88]	; (80121ec <__sfp+0x88>)
 8012194:	60e3      	str	r3, [r4, #12]
 8012196:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801219a:	6665      	str	r5, [r4, #100]	; 0x64
 801219c:	f000 f87e 	bl	801229c <__retarget_lock_init_recursive>
 80121a0:	f7ff ff96 	bl	80120d0 <__sfp_lock_release>
 80121a4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80121a8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80121ac:	6025      	str	r5, [r4, #0]
 80121ae:	61a5      	str	r5, [r4, #24]
 80121b0:	2208      	movs	r2, #8
 80121b2:	4629      	mov	r1, r5
 80121b4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80121b8:	f000 f8ab 	bl	8012312 <memset>
 80121bc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80121c0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80121c4:	4620      	mov	r0, r4
 80121c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80121c8:	3468      	adds	r4, #104	; 0x68
 80121ca:	e7d9      	b.n	8012180 <__sfp+0x1c>
 80121cc:	2104      	movs	r1, #4
 80121ce:	4638      	mov	r0, r7
 80121d0:	f7ff ff62 	bl	8012098 <__sfmoreglue>
 80121d4:	4604      	mov	r4, r0
 80121d6:	6030      	str	r0, [r6, #0]
 80121d8:	2800      	cmp	r0, #0
 80121da:	d1d5      	bne.n	8012188 <__sfp+0x24>
 80121dc:	f7ff ff78 	bl	80120d0 <__sfp_lock_release>
 80121e0:	230c      	movs	r3, #12
 80121e2:	603b      	str	r3, [r7, #0]
 80121e4:	e7ee      	b.n	80121c4 <__sfp+0x60>
 80121e6:	bf00      	nop
 80121e8:	08015490 	.word	0x08015490
 80121ec:	ffff0001 	.word	0xffff0001

080121f0 <fiprintf>:
 80121f0:	b40e      	push	{r1, r2, r3}
 80121f2:	b503      	push	{r0, r1, lr}
 80121f4:	4601      	mov	r1, r0
 80121f6:	ab03      	add	r3, sp, #12
 80121f8:	4805      	ldr	r0, [pc, #20]	; (8012210 <fiprintf+0x20>)
 80121fa:	f853 2b04 	ldr.w	r2, [r3], #4
 80121fe:	6800      	ldr	r0, [r0, #0]
 8012200:	9301      	str	r3, [sp, #4]
 8012202:	f000 f94d 	bl	80124a0 <_vfiprintf_r>
 8012206:	b002      	add	sp, #8
 8012208:	f85d eb04 	ldr.w	lr, [sp], #4
 801220c:	b003      	add	sp, #12
 801220e:	4770      	bx	lr
 8012210:	20000054 	.word	0x20000054

08012214 <_fwalk_reent>:
 8012214:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012218:	4606      	mov	r6, r0
 801221a:	4688      	mov	r8, r1
 801221c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8012220:	2700      	movs	r7, #0
 8012222:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8012226:	f1b9 0901 	subs.w	r9, r9, #1
 801222a:	d505      	bpl.n	8012238 <_fwalk_reent+0x24>
 801222c:	6824      	ldr	r4, [r4, #0]
 801222e:	2c00      	cmp	r4, #0
 8012230:	d1f7      	bne.n	8012222 <_fwalk_reent+0xe>
 8012232:	4638      	mov	r0, r7
 8012234:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012238:	89ab      	ldrh	r3, [r5, #12]
 801223a:	2b01      	cmp	r3, #1
 801223c:	d907      	bls.n	801224e <_fwalk_reent+0x3a>
 801223e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8012242:	3301      	adds	r3, #1
 8012244:	d003      	beq.n	801224e <_fwalk_reent+0x3a>
 8012246:	4629      	mov	r1, r5
 8012248:	4630      	mov	r0, r6
 801224a:	47c0      	blx	r8
 801224c:	4307      	orrs	r7, r0
 801224e:	3568      	adds	r5, #104	; 0x68
 8012250:	e7e9      	b.n	8012226 <_fwalk_reent+0x12>
	...

08012254 <__libc_init_array>:
 8012254:	b570      	push	{r4, r5, r6, lr}
 8012256:	4d0d      	ldr	r5, [pc, #52]	; (801228c <__libc_init_array+0x38>)
 8012258:	4c0d      	ldr	r4, [pc, #52]	; (8012290 <__libc_init_array+0x3c>)
 801225a:	1b64      	subs	r4, r4, r5
 801225c:	10a4      	asrs	r4, r4, #2
 801225e:	2600      	movs	r6, #0
 8012260:	42a6      	cmp	r6, r4
 8012262:	d109      	bne.n	8012278 <__libc_init_array+0x24>
 8012264:	4d0b      	ldr	r5, [pc, #44]	; (8012294 <__libc_init_array+0x40>)
 8012266:	4c0c      	ldr	r4, [pc, #48]	; (8012298 <__libc_init_array+0x44>)
 8012268:	f001 fa90 	bl	801378c <_init>
 801226c:	1b64      	subs	r4, r4, r5
 801226e:	10a4      	asrs	r4, r4, #2
 8012270:	2600      	movs	r6, #0
 8012272:	42a6      	cmp	r6, r4
 8012274:	d105      	bne.n	8012282 <__libc_init_array+0x2e>
 8012276:	bd70      	pop	{r4, r5, r6, pc}
 8012278:	f855 3b04 	ldr.w	r3, [r5], #4
 801227c:	4798      	blx	r3
 801227e:	3601      	adds	r6, #1
 8012280:	e7ee      	b.n	8012260 <__libc_init_array+0xc>
 8012282:	f855 3b04 	ldr.w	r3, [r5], #4
 8012286:	4798      	blx	r3
 8012288:	3601      	adds	r6, #1
 801228a:	e7f2      	b.n	8012272 <__libc_init_array+0x1e>
 801228c:	08015544 	.word	0x08015544
 8012290:	08015544 	.word	0x08015544
 8012294:	08015544 	.word	0x08015544
 8012298:	08015548 	.word	0x08015548

0801229c <__retarget_lock_init_recursive>:
 801229c:	4770      	bx	lr

0801229e <__retarget_lock_acquire_recursive>:
 801229e:	4770      	bx	lr

080122a0 <__retarget_lock_release_recursive>:
 80122a0:	4770      	bx	lr

080122a2 <memcmp>:
 80122a2:	b510      	push	{r4, lr}
 80122a4:	3901      	subs	r1, #1
 80122a6:	4402      	add	r2, r0
 80122a8:	4290      	cmp	r0, r2
 80122aa:	d101      	bne.n	80122b0 <memcmp+0xe>
 80122ac:	2000      	movs	r0, #0
 80122ae:	e005      	b.n	80122bc <memcmp+0x1a>
 80122b0:	7803      	ldrb	r3, [r0, #0]
 80122b2:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80122b6:	42a3      	cmp	r3, r4
 80122b8:	d001      	beq.n	80122be <memcmp+0x1c>
 80122ba:	1b18      	subs	r0, r3, r4
 80122bc:	bd10      	pop	{r4, pc}
 80122be:	3001      	adds	r0, #1
 80122c0:	e7f2      	b.n	80122a8 <memcmp+0x6>

080122c2 <memcpy>:
 80122c2:	440a      	add	r2, r1
 80122c4:	4291      	cmp	r1, r2
 80122c6:	f100 33ff 	add.w	r3, r0, #4294967295
 80122ca:	d100      	bne.n	80122ce <memcpy+0xc>
 80122cc:	4770      	bx	lr
 80122ce:	b510      	push	{r4, lr}
 80122d0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80122d4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80122d8:	4291      	cmp	r1, r2
 80122da:	d1f9      	bne.n	80122d0 <memcpy+0xe>
 80122dc:	bd10      	pop	{r4, pc}

080122de <memmove>:
 80122de:	4288      	cmp	r0, r1
 80122e0:	b510      	push	{r4, lr}
 80122e2:	eb01 0402 	add.w	r4, r1, r2
 80122e6:	d902      	bls.n	80122ee <memmove+0x10>
 80122e8:	4284      	cmp	r4, r0
 80122ea:	4623      	mov	r3, r4
 80122ec:	d807      	bhi.n	80122fe <memmove+0x20>
 80122ee:	1e43      	subs	r3, r0, #1
 80122f0:	42a1      	cmp	r1, r4
 80122f2:	d008      	beq.n	8012306 <memmove+0x28>
 80122f4:	f811 2b01 	ldrb.w	r2, [r1], #1
 80122f8:	f803 2f01 	strb.w	r2, [r3, #1]!
 80122fc:	e7f8      	b.n	80122f0 <memmove+0x12>
 80122fe:	4402      	add	r2, r0
 8012300:	4601      	mov	r1, r0
 8012302:	428a      	cmp	r2, r1
 8012304:	d100      	bne.n	8012308 <memmove+0x2a>
 8012306:	bd10      	pop	{r4, pc}
 8012308:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801230c:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8012310:	e7f7      	b.n	8012302 <memmove+0x24>

08012312 <memset>:
 8012312:	4402      	add	r2, r0
 8012314:	4603      	mov	r3, r0
 8012316:	4293      	cmp	r3, r2
 8012318:	d100      	bne.n	801231c <memset+0xa>
 801231a:	4770      	bx	lr
 801231c:	f803 1b01 	strb.w	r1, [r3], #1
 8012320:	e7f9      	b.n	8012316 <memset+0x4>
	...

08012324 <sbrk_aligned>:
 8012324:	b570      	push	{r4, r5, r6, lr}
 8012326:	4e0e      	ldr	r6, [pc, #56]	; (8012360 <sbrk_aligned+0x3c>)
 8012328:	460c      	mov	r4, r1
 801232a:	6831      	ldr	r1, [r6, #0]
 801232c:	4605      	mov	r5, r0
 801232e:	b911      	cbnz	r1, 8012336 <sbrk_aligned+0x12>
 8012330:	f000 fc72 	bl	8012c18 <_sbrk_r>
 8012334:	6030      	str	r0, [r6, #0]
 8012336:	4621      	mov	r1, r4
 8012338:	4628      	mov	r0, r5
 801233a:	f000 fc6d 	bl	8012c18 <_sbrk_r>
 801233e:	1c43      	adds	r3, r0, #1
 8012340:	d00a      	beq.n	8012358 <sbrk_aligned+0x34>
 8012342:	1cc4      	adds	r4, r0, #3
 8012344:	f024 0403 	bic.w	r4, r4, #3
 8012348:	42a0      	cmp	r0, r4
 801234a:	d007      	beq.n	801235c <sbrk_aligned+0x38>
 801234c:	1a21      	subs	r1, r4, r0
 801234e:	4628      	mov	r0, r5
 8012350:	f000 fc62 	bl	8012c18 <_sbrk_r>
 8012354:	3001      	adds	r0, #1
 8012356:	d101      	bne.n	801235c <sbrk_aligned+0x38>
 8012358:	f04f 34ff 	mov.w	r4, #4294967295
 801235c:	4620      	mov	r0, r4
 801235e:	bd70      	pop	{r4, r5, r6, pc}
 8012360:	20004f24 	.word	0x20004f24

08012364 <_malloc_r>:
 8012364:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012368:	1ccd      	adds	r5, r1, #3
 801236a:	f025 0503 	bic.w	r5, r5, #3
 801236e:	3508      	adds	r5, #8
 8012370:	2d0c      	cmp	r5, #12
 8012372:	bf38      	it	cc
 8012374:	250c      	movcc	r5, #12
 8012376:	2d00      	cmp	r5, #0
 8012378:	4607      	mov	r7, r0
 801237a:	db01      	blt.n	8012380 <_malloc_r+0x1c>
 801237c:	42a9      	cmp	r1, r5
 801237e:	d905      	bls.n	801238c <_malloc_r+0x28>
 8012380:	230c      	movs	r3, #12
 8012382:	603b      	str	r3, [r7, #0]
 8012384:	2600      	movs	r6, #0
 8012386:	4630      	mov	r0, r6
 8012388:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801238c:	4e2e      	ldr	r6, [pc, #184]	; (8012448 <_malloc_r+0xe4>)
 801238e:	f000 ff9b 	bl	80132c8 <__malloc_lock>
 8012392:	6833      	ldr	r3, [r6, #0]
 8012394:	461c      	mov	r4, r3
 8012396:	bb34      	cbnz	r4, 80123e6 <_malloc_r+0x82>
 8012398:	4629      	mov	r1, r5
 801239a:	4638      	mov	r0, r7
 801239c:	f7ff ffc2 	bl	8012324 <sbrk_aligned>
 80123a0:	1c43      	adds	r3, r0, #1
 80123a2:	4604      	mov	r4, r0
 80123a4:	d14d      	bne.n	8012442 <_malloc_r+0xde>
 80123a6:	6834      	ldr	r4, [r6, #0]
 80123a8:	4626      	mov	r6, r4
 80123aa:	2e00      	cmp	r6, #0
 80123ac:	d140      	bne.n	8012430 <_malloc_r+0xcc>
 80123ae:	6823      	ldr	r3, [r4, #0]
 80123b0:	4631      	mov	r1, r6
 80123b2:	4638      	mov	r0, r7
 80123b4:	eb04 0803 	add.w	r8, r4, r3
 80123b8:	f000 fc2e 	bl	8012c18 <_sbrk_r>
 80123bc:	4580      	cmp	r8, r0
 80123be:	d13a      	bne.n	8012436 <_malloc_r+0xd2>
 80123c0:	6821      	ldr	r1, [r4, #0]
 80123c2:	3503      	adds	r5, #3
 80123c4:	1a6d      	subs	r5, r5, r1
 80123c6:	f025 0503 	bic.w	r5, r5, #3
 80123ca:	3508      	adds	r5, #8
 80123cc:	2d0c      	cmp	r5, #12
 80123ce:	bf38      	it	cc
 80123d0:	250c      	movcc	r5, #12
 80123d2:	4629      	mov	r1, r5
 80123d4:	4638      	mov	r0, r7
 80123d6:	f7ff ffa5 	bl	8012324 <sbrk_aligned>
 80123da:	3001      	adds	r0, #1
 80123dc:	d02b      	beq.n	8012436 <_malloc_r+0xd2>
 80123de:	6823      	ldr	r3, [r4, #0]
 80123e0:	442b      	add	r3, r5
 80123e2:	6023      	str	r3, [r4, #0]
 80123e4:	e00e      	b.n	8012404 <_malloc_r+0xa0>
 80123e6:	6822      	ldr	r2, [r4, #0]
 80123e8:	1b52      	subs	r2, r2, r5
 80123ea:	d41e      	bmi.n	801242a <_malloc_r+0xc6>
 80123ec:	2a0b      	cmp	r2, #11
 80123ee:	d916      	bls.n	801241e <_malloc_r+0xba>
 80123f0:	1961      	adds	r1, r4, r5
 80123f2:	42a3      	cmp	r3, r4
 80123f4:	6025      	str	r5, [r4, #0]
 80123f6:	bf18      	it	ne
 80123f8:	6059      	strne	r1, [r3, #4]
 80123fa:	6863      	ldr	r3, [r4, #4]
 80123fc:	bf08      	it	eq
 80123fe:	6031      	streq	r1, [r6, #0]
 8012400:	5162      	str	r2, [r4, r5]
 8012402:	604b      	str	r3, [r1, #4]
 8012404:	4638      	mov	r0, r7
 8012406:	f104 060b 	add.w	r6, r4, #11
 801240a:	f000 ff63 	bl	80132d4 <__malloc_unlock>
 801240e:	f026 0607 	bic.w	r6, r6, #7
 8012412:	1d23      	adds	r3, r4, #4
 8012414:	1af2      	subs	r2, r6, r3
 8012416:	d0b6      	beq.n	8012386 <_malloc_r+0x22>
 8012418:	1b9b      	subs	r3, r3, r6
 801241a:	50a3      	str	r3, [r4, r2]
 801241c:	e7b3      	b.n	8012386 <_malloc_r+0x22>
 801241e:	6862      	ldr	r2, [r4, #4]
 8012420:	42a3      	cmp	r3, r4
 8012422:	bf0c      	ite	eq
 8012424:	6032      	streq	r2, [r6, #0]
 8012426:	605a      	strne	r2, [r3, #4]
 8012428:	e7ec      	b.n	8012404 <_malloc_r+0xa0>
 801242a:	4623      	mov	r3, r4
 801242c:	6864      	ldr	r4, [r4, #4]
 801242e:	e7b2      	b.n	8012396 <_malloc_r+0x32>
 8012430:	4634      	mov	r4, r6
 8012432:	6876      	ldr	r6, [r6, #4]
 8012434:	e7b9      	b.n	80123aa <_malloc_r+0x46>
 8012436:	230c      	movs	r3, #12
 8012438:	603b      	str	r3, [r7, #0]
 801243a:	4638      	mov	r0, r7
 801243c:	f000 ff4a 	bl	80132d4 <__malloc_unlock>
 8012440:	e7a1      	b.n	8012386 <_malloc_r+0x22>
 8012442:	6025      	str	r5, [r4, #0]
 8012444:	e7de      	b.n	8012404 <_malloc_r+0xa0>
 8012446:	bf00      	nop
 8012448:	20004f20 	.word	0x20004f20

0801244c <__sfputc_r>:
 801244c:	6893      	ldr	r3, [r2, #8]
 801244e:	3b01      	subs	r3, #1
 8012450:	2b00      	cmp	r3, #0
 8012452:	b410      	push	{r4}
 8012454:	6093      	str	r3, [r2, #8]
 8012456:	da08      	bge.n	801246a <__sfputc_r+0x1e>
 8012458:	6994      	ldr	r4, [r2, #24]
 801245a:	42a3      	cmp	r3, r4
 801245c:	db01      	blt.n	8012462 <__sfputc_r+0x16>
 801245e:	290a      	cmp	r1, #10
 8012460:	d103      	bne.n	801246a <__sfputc_r+0x1e>
 8012462:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012466:	f000 bd03 	b.w	8012e70 <__swbuf_r>
 801246a:	6813      	ldr	r3, [r2, #0]
 801246c:	1c58      	adds	r0, r3, #1
 801246e:	6010      	str	r0, [r2, #0]
 8012470:	7019      	strb	r1, [r3, #0]
 8012472:	4608      	mov	r0, r1
 8012474:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012478:	4770      	bx	lr

0801247a <__sfputs_r>:
 801247a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801247c:	4606      	mov	r6, r0
 801247e:	460f      	mov	r7, r1
 8012480:	4614      	mov	r4, r2
 8012482:	18d5      	adds	r5, r2, r3
 8012484:	42ac      	cmp	r4, r5
 8012486:	d101      	bne.n	801248c <__sfputs_r+0x12>
 8012488:	2000      	movs	r0, #0
 801248a:	e007      	b.n	801249c <__sfputs_r+0x22>
 801248c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012490:	463a      	mov	r2, r7
 8012492:	4630      	mov	r0, r6
 8012494:	f7ff ffda 	bl	801244c <__sfputc_r>
 8012498:	1c43      	adds	r3, r0, #1
 801249a:	d1f3      	bne.n	8012484 <__sfputs_r+0xa>
 801249c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080124a0 <_vfiprintf_r>:
 80124a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80124a4:	460d      	mov	r5, r1
 80124a6:	b09d      	sub	sp, #116	; 0x74
 80124a8:	4614      	mov	r4, r2
 80124aa:	4698      	mov	r8, r3
 80124ac:	4606      	mov	r6, r0
 80124ae:	b118      	cbz	r0, 80124b8 <_vfiprintf_r+0x18>
 80124b0:	6983      	ldr	r3, [r0, #24]
 80124b2:	b90b      	cbnz	r3, 80124b8 <_vfiprintf_r+0x18>
 80124b4:	f7ff fe1e 	bl	80120f4 <__sinit>
 80124b8:	4b89      	ldr	r3, [pc, #548]	; (80126e0 <_vfiprintf_r+0x240>)
 80124ba:	429d      	cmp	r5, r3
 80124bc:	d11b      	bne.n	80124f6 <_vfiprintf_r+0x56>
 80124be:	6875      	ldr	r5, [r6, #4]
 80124c0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80124c2:	07d9      	lsls	r1, r3, #31
 80124c4:	d405      	bmi.n	80124d2 <_vfiprintf_r+0x32>
 80124c6:	89ab      	ldrh	r3, [r5, #12]
 80124c8:	059a      	lsls	r2, r3, #22
 80124ca:	d402      	bmi.n	80124d2 <_vfiprintf_r+0x32>
 80124cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80124ce:	f7ff fee6 	bl	801229e <__retarget_lock_acquire_recursive>
 80124d2:	89ab      	ldrh	r3, [r5, #12]
 80124d4:	071b      	lsls	r3, r3, #28
 80124d6:	d501      	bpl.n	80124dc <_vfiprintf_r+0x3c>
 80124d8:	692b      	ldr	r3, [r5, #16]
 80124da:	b9eb      	cbnz	r3, 8012518 <_vfiprintf_r+0x78>
 80124dc:	4629      	mov	r1, r5
 80124de:	4630      	mov	r0, r6
 80124e0:	f000 fd2a 	bl	8012f38 <__swsetup_r>
 80124e4:	b1c0      	cbz	r0, 8012518 <_vfiprintf_r+0x78>
 80124e6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80124e8:	07dc      	lsls	r4, r3, #31
 80124ea:	d50e      	bpl.n	801250a <_vfiprintf_r+0x6a>
 80124ec:	f04f 30ff 	mov.w	r0, #4294967295
 80124f0:	b01d      	add	sp, #116	; 0x74
 80124f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80124f6:	4b7b      	ldr	r3, [pc, #492]	; (80126e4 <_vfiprintf_r+0x244>)
 80124f8:	429d      	cmp	r5, r3
 80124fa:	d101      	bne.n	8012500 <_vfiprintf_r+0x60>
 80124fc:	68b5      	ldr	r5, [r6, #8]
 80124fe:	e7df      	b.n	80124c0 <_vfiprintf_r+0x20>
 8012500:	4b79      	ldr	r3, [pc, #484]	; (80126e8 <_vfiprintf_r+0x248>)
 8012502:	429d      	cmp	r5, r3
 8012504:	bf08      	it	eq
 8012506:	68f5      	ldreq	r5, [r6, #12]
 8012508:	e7da      	b.n	80124c0 <_vfiprintf_r+0x20>
 801250a:	89ab      	ldrh	r3, [r5, #12]
 801250c:	0598      	lsls	r0, r3, #22
 801250e:	d4ed      	bmi.n	80124ec <_vfiprintf_r+0x4c>
 8012510:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012512:	f7ff fec5 	bl	80122a0 <__retarget_lock_release_recursive>
 8012516:	e7e9      	b.n	80124ec <_vfiprintf_r+0x4c>
 8012518:	2300      	movs	r3, #0
 801251a:	9309      	str	r3, [sp, #36]	; 0x24
 801251c:	2320      	movs	r3, #32
 801251e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012522:	f8cd 800c 	str.w	r8, [sp, #12]
 8012526:	2330      	movs	r3, #48	; 0x30
 8012528:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80126ec <_vfiprintf_r+0x24c>
 801252c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012530:	f04f 0901 	mov.w	r9, #1
 8012534:	4623      	mov	r3, r4
 8012536:	469a      	mov	sl, r3
 8012538:	f813 2b01 	ldrb.w	r2, [r3], #1
 801253c:	b10a      	cbz	r2, 8012542 <_vfiprintf_r+0xa2>
 801253e:	2a25      	cmp	r2, #37	; 0x25
 8012540:	d1f9      	bne.n	8012536 <_vfiprintf_r+0x96>
 8012542:	ebba 0b04 	subs.w	fp, sl, r4
 8012546:	d00b      	beq.n	8012560 <_vfiprintf_r+0xc0>
 8012548:	465b      	mov	r3, fp
 801254a:	4622      	mov	r2, r4
 801254c:	4629      	mov	r1, r5
 801254e:	4630      	mov	r0, r6
 8012550:	f7ff ff93 	bl	801247a <__sfputs_r>
 8012554:	3001      	adds	r0, #1
 8012556:	f000 80aa 	beq.w	80126ae <_vfiprintf_r+0x20e>
 801255a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801255c:	445a      	add	r2, fp
 801255e:	9209      	str	r2, [sp, #36]	; 0x24
 8012560:	f89a 3000 	ldrb.w	r3, [sl]
 8012564:	2b00      	cmp	r3, #0
 8012566:	f000 80a2 	beq.w	80126ae <_vfiprintf_r+0x20e>
 801256a:	2300      	movs	r3, #0
 801256c:	f04f 32ff 	mov.w	r2, #4294967295
 8012570:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012574:	f10a 0a01 	add.w	sl, sl, #1
 8012578:	9304      	str	r3, [sp, #16]
 801257a:	9307      	str	r3, [sp, #28]
 801257c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012580:	931a      	str	r3, [sp, #104]	; 0x68
 8012582:	4654      	mov	r4, sl
 8012584:	2205      	movs	r2, #5
 8012586:	f814 1b01 	ldrb.w	r1, [r4], #1
 801258a:	4858      	ldr	r0, [pc, #352]	; (80126ec <_vfiprintf_r+0x24c>)
 801258c:	f7ed fe28 	bl	80001e0 <memchr>
 8012590:	9a04      	ldr	r2, [sp, #16]
 8012592:	b9d8      	cbnz	r0, 80125cc <_vfiprintf_r+0x12c>
 8012594:	06d1      	lsls	r1, r2, #27
 8012596:	bf44      	itt	mi
 8012598:	2320      	movmi	r3, #32
 801259a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801259e:	0713      	lsls	r3, r2, #28
 80125a0:	bf44      	itt	mi
 80125a2:	232b      	movmi	r3, #43	; 0x2b
 80125a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80125a8:	f89a 3000 	ldrb.w	r3, [sl]
 80125ac:	2b2a      	cmp	r3, #42	; 0x2a
 80125ae:	d015      	beq.n	80125dc <_vfiprintf_r+0x13c>
 80125b0:	9a07      	ldr	r2, [sp, #28]
 80125b2:	4654      	mov	r4, sl
 80125b4:	2000      	movs	r0, #0
 80125b6:	f04f 0c0a 	mov.w	ip, #10
 80125ba:	4621      	mov	r1, r4
 80125bc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80125c0:	3b30      	subs	r3, #48	; 0x30
 80125c2:	2b09      	cmp	r3, #9
 80125c4:	d94e      	bls.n	8012664 <_vfiprintf_r+0x1c4>
 80125c6:	b1b0      	cbz	r0, 80125f6 <_vfiprintf_r+0x156>
 80125c8:	9207      	str	r2, [sp, #28]
 80125ca:	e014      	b.n	80125f6 <_vfiprintf_r+0x156>
 80125cc:	eba0 0308 	sub.w	r3, r0, r8
 80125d0:	fa09 f303 	lsl.w	r3, r9, r3
 80125d4:	4313      	orrs	r3, r2
 80125d6:	9304      	str	r3, [sp, #16]
 80125d8:	46a2      	mov	sl, r4
 80125da:	e7d2      	b.n	8012582 <_vfiprintf_r+0xe2>
 80125dc:	9b03      	ldr	r3, [sp, #12]
 80125de:	1d19      	adds	r1, r3, #4
 80125e0:	681b      	ldr	r3, [r3, #0]
 80125e2:	9103      	str	r1, [sp, #12]
 80125e4:	2b00      	cmp	r3, #0
 80125e6:	bfbb      	ittet	lt
 80125e8:	425b      	neglt	r3, r3
 80125ea:	f042 0202 	orrlt.w	r2, r2, #2
 80125ee:	9307      	strge	r3, [sp, #28]
 80125f0:	9307      	strlt	r3, [sp, #28]
 80125f2:	bfb8      	it	lt
 80125f4:	9204      	strlt	r2, [sp, #16]
 80125f6:	7823      	ldrb	r3, [r4, #0]
 80125f8:	2b2e      	cmp	r3, #46	; 0x2e
 80125fa:	d10c      	bne.n	8012616 <_vfiprintf_r+0x176>
 80125fc:	7863      	ldrb	r3, [r4, #1]
 80125fe:	2b2a      	cmp	r3, #42	; 0x2a
 8012600:	d135      	bne.n	801266e <_vfiprintf_r+0x1ce>
 8012602:	9b03      	ldr	r3, [sp, #12]
 8012604:	1d1a      	adds	r2, r3, #4
 8012606:	681b      	ldr	r3, [r3, #0]
 8012608:	9203      	str	r2, [sp, #12]
 801260a:	2b00      	cmp	r3, #0
 801260c:	bfb8      	it	lt
 801260e:	f04f 33ff 	movlt.w	r3, #4294967295
 8012612:	3402      	adds	r4, #2
 8012614:	9305      	str	r3, [sp, #20]
 8012616:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80126fc <_vfiprintf_r+0x25c>
 801261a:	7821      	ldrb	r1, [r4, #0]
 801261c:	2203      	movs	r2, #3
 801261e:	4650      	mov	r0, sl
 8012620:	f7ed fdde 	bl	80001e0 <memchr>
 8012624:	b140      	cbz	r0, 8012638 <_vfiprintf_r+0x198>
 8012626:	2340      	movs	r3, #64	; 0x40
 8012628:	eba0 000a 	sub.w	r0, r0, sl
 801262c:	fa03 f000 	lsl.w	r0, r3, r0
 8012630:	9b04      	ldr	r3, [sp, #16]
 8012632:	4303      	orrs	r3, r0
 8012634:	3401      	adds	r4, #1
 8012636:	9304      	str	r3, [sp, #16]
 8012638:	f814 1b01 	ldrb.w	r1, [r4], #1
 801263c:	482c      	ldr	r0, [pc, #176]	; (80126f0 <_vfiprintf_r+0x250>)
 801263e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012642:	2206      	movs	r2, #6
 8012644:	f7ed fdcc 	bl	80001e0 <memchr>
 8012648:	2800      	cmp	r0, #0
 801264a:	d03f      	beq.n	80126cc <_vfiprintf_r+0x22c>
 801264c:	4b29      	ldr	r3, [pc, #164]	; (80126f4 <_vfiprintf_r+0x254>)
 801264e:	bb1b      	cbnz	r3, 8012698 <_vfiprintf_r+0x1f8>
 8012650:	9b03      	ldr	r3, [sp, #12]
 8012652:	3307      	adds	r3, #7
 8012654:	f023 0307 	bic.w	r3, r3, #7
 8012658:	3308      	adds	r3, #8
 801265a:	9303      	str	r3, [sp, #12]
 801265c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801265e:	443b      	add	r3, r7
 8012660:	9309      	str	r3, [sp, #36]	; 0x24
 8012662:	e767      	b.n	8012534 <_vfiprintf_r+0x94>
 8012664:	fb0c 3202 	mla	r2, ip, r2, r3
 8012668:	460c      	mov	r4, r1
 801266a:	2001      	movs	r0, #1
 801266c:	e7a5      	b.n	80125ba <_vfiprintf_r+0x11a>
 801266e:	2300      	movs	r3, #0
 8012670:	3401      	adds	r4, #1
 8012672:	9305      	str	r3, [sp, #20]
 8012674:	4619      	mov	r1, r3
 8012676:	f04f 0c0a 	mov.w	ip, #10
 801267a:	4620      	mov	r0, r4
 801267c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012680:	3a30      	subs	r2, #48	; 0x30
 8012682:	2a09      	cmp	r2, #9
 8012684:	d903      	bls.n	801268e <_vfiprintf_r+0x1ee>
 8012686:	2b00      	cmp	r3, #0
 8012688:	d0c5      	beq.n	8012616 <_vfiprintf_r+0x176>
 801268a:	9105      	str	r1, [sp, #20]
 801268c:	e7c3      	b.n	8012616 <_vfiprintf_r+0x176>
 801268e:	fb0c 2101 	mla	r1, ip, r1, r2
 8012692:	4604      	mov	r4, r0
 8012694:	2301      	movs	r3, #1
 8012696:	e7f0      	b.n	801267a <_vfiprintf_r+0x1da>
 8012698:	ab03      	add	r3, sp, #12
 801269a:	9300      	str	r3, [sp, #0]
 801269c:	462a      	mov	r2, r5
 801269e:	4b16      	ldr	r3, [pc, #88]	; (80126f8 <_vfiprintf_r+0x258>)
 80126a0:	a904      	add	r1, sp, #16
 80126a2:	4630      	mov	r0, r6
 80126a4:	f3af 8000 	nop.w
 80126a8:	4607      	mov	r7, r0
 80126aa:	1c78      	adds	r0, r7, #1
 80126ac:	d1d6      	bne.n	801265c <_vfiprintf_r+0x1bc>
 80126ae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80126b0:	07d9      	lsls	r1, r3, #31
 80126b2:	d405      	bmi.n	80126c0 <_vfiprintf_r+0x220>
 80126b4:	89ab      	ldrh	r3, [r5, #12]
 80126b6:	059a      	lsls	r2, r3, #22
 80126b8:	d402      	bmi.n	80126c0 <_vfiprintf_r+0x220>
 80126ba:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80126bc:	f7ff fdf0 	bl	80122a0 <__retarget_lock_release_recursive>
 80126c0:	89ab      	ldrh	r3, [r5, #12]
 80126c2:	065b      	lsls	r3, r3, #25
 80126c4:	f53f af12 	bmi.w	80124ec <_vfiprintf_r+0x4c>
 80126c8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80126ca:	e711      	b.n	80124f0 <_vfiprintf_r+0x50>
 80126cc:	ab03      	add	r3, sp, #12
 80126ce:	9300      	str	r3, [sp, #0]
 80126d0:	462a      	mov	r2, r5
 80126d2:	4b09      	ldr	r3, [pc, #36]	; (80126f8 <_vfiprintf_r+0x258>)
 80126d4:	a904      	add	r1, sp, #16
 80126d6:	4630      	mov	r0, r6
 80126d8:	f000 f880 	bl	80127dc <_printf_i>
 80126dc:	e7e4      	b.n	80126a8 <_vfiprintf_r+0x208>
 80126de:	bf00      	nop
 80126e0:	08015450 	.word	0x08015450
 80126e4:	08015470 	.word	0x08015470
 80126e8:	08015430 	.word	0x08015430
 80126ec:	08015494 	.word	0x08015494
 80126f0:	0801549e 	.word	0x0801549e
 80126f4:	00000000 	.word	0x00000000
 80126f8:	0801247b 	.word	0x0801247b
 80126fc:	0801549a 	.word	0x0801549a

08012700 <_printf_common>:
 8012700:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012704:	4616      	mov	r6, r2
 8012706:	4699      	mov	r9, r3
 8012708:	688a      	ldr	r2, [r1, #8]
 801270a:	690b      	ldr	r3, [r1, #16]
 801270c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8012710:	4293      	cmp	r3, r2
 8012712:	bfb8      	it	lt
 8012714:	4613      	movlt	r3, r2
 8012716:	6033      	str	r3, [r6, #0]
 8012718:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801271c:	4607      	mov	r7, r0
 801271e:	460c      	mov	r4, r1
 8012720:	b10a      	cbz	r2, 8012726 <_printf_common+0x26>
 8012722:	3301      	adds	r3, #1
 8012724:	6033      	str	r3, [r6, #0]
 8012726:	6823      	ldr	r3, [r4, #0]
 8012728:	0699      	lsls	r1, r3, #26
 801272a:	bf42      	ittt	mi
 801272c:	6833      	ldrmi	r3, [r6, #0]
 801272e:	3302      	addmi	r3, #2
 8012730:	6033      	strmi	r3, [r6, #0]
 8012732:	6825      	ldr	r5, [r4, #0]
 8012734:	f015 0506 	ands.w	r5, r5, #6
 8012738:	d106      	bne.n	8012748 <_printf_common+0x48>
 801273a:	f104 0a19 	add.w	sl, r4, #25
 801273e:	68e3      	ldr	r3, [r4, #12]
 8012740:	6832      	ldr	r2, [r6, #0]
 8012742:	1a9b      	subs	r3, r3, r2
 8012744:	42ab      	cmp	r3, r5
 8012746:	dc26      	bgt.n	8012796 <_printf_common+0x96>
 8012748:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801274c:	1e13      	subs	r3, r2, #0
 801274e:	6822      	ldr	r2, [r4, #0]
 8012750:	bf18      	it	ne
 8012752:	2301      	movne	r3, #1
 8012754:	0692      	lsls	r2, r2, #26
 8012756:	d42b      	bmi.n	80127b0 <_printf_common+0xb0>
 8012758:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801275c:	4649      	mov	r1, r9
 801275e:	4638      	mov	r0, r7
 8012760:	47c0      	blx	r8
 8012762:	3001      	adds	r0, #1
 8012764:	d01e      	beq.n	80127a4 <_printf_common+0xa4>
 8012766:	6823      	ldr	r3, [r4, #0]
 8012768:	68e5      	ldr	r5, [r4, #12]
 801276a:	6832      	ldr	r2, [r6, #0]
 801276c:	f003 0306 	and.w	r3, r3, #6
 8012770:	2b04      	cmp	r3, #4
 8012772:	bf08      	it	eq
 8012774:	1aad      	subeq	r5, r5, r2
 8012776:	68a3      	ldr	r3, [r4, #8]
 8012778:	6922      	ldr	r2, [r4, #16]
 801277a:	bf0c      	ite	eq
 801277c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8012780:	2500      	movne	r5, #0
 8012782:	4293      	cmp	r3, r2
 8012784:	bfc4      	itt	gt
 8012786:	1a9b      	subgt	r3, r3, r2
 8012788:	18ed      	addgt	r5, r5, r3
 801278a:	2600      	movs	r6, #0
 801278c:	341a      	adds	r4, #26
 801278e:	42b5      	cmp	r5, r6
 8012790:	d11a      	bne.n	80127c8 <_printf_common+0xc8>
 8012792:	2000      	movs	r0, #0
 8012794:	e008      	b.n	80127a8 <_printf_common+0xa8>
 8012796:	2301      	movs	r3, #1
 8012798:	4652      	mov	r2, sl
 801279a:	4649      	mov	r1, r9
 801279c:	4638      	mov	r0, r7
 801279e:	47c0      	blx	r8
 80127a0:	3001      	adds	r0, #1
 80127a2:	d103      	bne.n	80127ac <_printf_common+0xac>
 80127a4:	f04f 30ff 	mov.w	r0, #4294967295
 80127a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80127ac:	3501      	adds	r5, #1
 80127ae:	e7c6      	b.n	801273e <_printf_common+0x3e>
 80127b0:	18e1      	adds	r1, r4, r3
 80127b2:	1c5a      	adds	r2, r3, #1
 80127b4:	2030      	movs	r0, #48	; 0x30
 80127b6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80127ba:	4422      	add	r2, r4
 80127bc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80127c0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80127c4:	3302      	adds	r3, #2
 80127c6:	e7c7      	b.n	8012758 <_printf_common+0x58>
 80127c8:	2301      	movs	r3, #1
 80127ca:	4622      	mov	r2, r4
 80127cc:	4649      	mov	r1, r9
 80127ce:	4638      	mov	r0, r7
 80127d0:	47c0      	blx	r8
 80127d2:	3001      	adds	r0, #1
 80127d4:	d0e6      	beq.n	80127a4 <_printf_common+0xa4>
 80127d6:	3601      	adds	r6, #1
 80127d8:	e7d9      	b.n	801278e <_printf_common+0x8e>
	...

080127dc <_printf_i>:
 80127dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80127e0:	7e0f      	ldrb	r7, [r1, #24]
 80127e2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80127e4:	2f78      	cmp	r7, #120	; 0x78
 80127e6:	4691      	mov	r9, r2
 80127e8:	4680      	mov	r8, r0
 80127ea:	460c      	mov	r4, r1
 80127ec:	469a      	mov	sl, r3
 80127ee:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80127f2:	d807      	bhi.n	8012804 <_printf_i+0x28>
 80127f4:	2f62      	cmp	r7, #98	; 0x62
 80127f6:	d80a      	bhi.n	801280e <_printf_i+0x32>
 80127f8:	2f00      	cmp	r7, #0
 80127fa:	f000 80d8 	beq.w	80129ae <_printf_i+0x1d2>
 80127fe:	2f58      	cmp	r7, #88	; 0x58
 8012800:	f000 80a3 	beq.w	801294a <_printf_i+0x16e>
 8012804:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012808:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801280c:	e03a      	b.n	8012884 <_printf_i+0xa8>
 801280e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8012812:	2b15      	cmp	r3, #21
 8012814:	d8f6      	bhi.n	8012804 <_printf_i+0x28>
 8012816:	a101      	add	r1, pc, #4	; (adr r1, 801281c <_printf_i+0x40>)
 8012818:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801281c:	08012875 	.word	0x08012875
 8012820:	08012889 	.word	0x08012889
 8012824:	08012805 	.word	0x08012805
 8012828:	08012805 	.word	0x08012805
 801282c:	08012805 	.word	0x08012805
 8012830:	08012805 	.word	0x08012805
 8012834:	08012889 	.word	0x08012889
 8012838:	08012805 	.word	0x08012805
 801283c:	08012805 	.word	0x08012805
 8012840:	08012805 	.word	0x08012805
 8012844:	08012805 	.word	0x08012805
 8012848:	08012995 	.word	0x08012995
 801284c:	080128b9 	.word	0x080128b9
 8012850:	08012977 	.word	0x08012977
 8012854:	08012805 	.word	0x08012805
 8012858:	08012805 	.word	0x08012805
 801285c:	080129b7 	.word	0x080129b7
 8012860:	08012805 	.word	0x08012805
 8012864:	080128b9 	.word	0x080128b9
 8012868:	08012805 	.word	0x08012805
 801286c:	08012805 	.word	0x08012805
 8012870:	0801297f 	.word	0x0801297f
 8012874:	682b      	ldr	r3, [r5, #0]
 8012876:	1d1a      	adds	r2, r3, #4
 8012878:	681b      	ldr	r3, [r3, #0]
 801287a:	602a      	str	r2, [r5, #0]
 801287c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012880:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8012884:	2301      	movs	r3, #1
 8012886:	e0a3      	b.n	80129d0 <_printf_i+0x1f4>
 8012888:	6820      	ldr	r0, [r4, #0]
 801288a:	6829      	ldr	r1, [r5, #0]
 801288c:	0606      	lsls	r6, r0, #24
 801288e:	f101 0304 	add.w	r3, r1, #4
 8012892:	d50a      	bpl.n	80128aa <_printf_i+0xce>
 8012894:	680e      	ldr	r6, [r1, #0]
 8012896:	602b      	str	r3, [r5, #0]
 8012898:	2e00      	cmp	r6, #0
 801289a:	da03      	bge.n	80128a4 <_printf_i+0xc8>
 801289c:	232d      	movs	r3, #45	; 0x2d
 801289e:	4276      	negs	r6, r6
 80128a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80128a4:	485e      	ldr	r0, [pc, #376]	; (8012a20 <_printf_i+0x244>)
 80128a6:	230a      	movs	r3, #10
 80128a8:	e019      	b.n	80128de <_printf_i+0x102>
 80128aa:	680e      	ldr	r6, [r1, #0]
 80128ac:	602b      	str	r3, [r5, #0]
 80128ae:	f010 0f40 	tst.w	r0, #64	; 0x40
 80128b2:	bf18      	it	ne
 80128b4:	b236      	sxthne	r6, r6
 80128b6:	e7ef      	b.n	8012898 <_printf_i+0xbc>
 80128b8:	682b      	ldr	r3, [r5, #0]
 80128ba:	6820      	ldr	r0, [r4, #0]
 80128bc:	1d19      	adds	r1, r3, #4
 80128be:	6029      	str	r1, [r5, #0]
 80128c0:	0601      	lsls	r1, r0, #24
 80128c2:	d501      	bpl.n	80128c8 <_printf_i+0xec>
 80128c4:	681e      	ldr	r6, [r3, #0]
 80128c6:	e002      	b.n	80128ce <_printf_i+0xf2>
 80128c8:	0646      	lsls	r6, r0, #25
 80128ca:	d5fb      	bpl.n	80128c4 <_printf_i+0xe8>
 80128cc:	881e      	ldrh	r6, [r3, #0]
 80128ce:	4854      	ldr	r0, [pc, #336]	; (8012a20 <_printf_i+0x244>)
 80128d0:	2f6f      	cmp	r7, #111	; 0x6f
 80128d2:	bf0c      	ite	eq
 80128d4:	2308      	moveq	r3, #8
 80128d6:	230a      	movne	r3, #10
 80128d8:	2100      	movs	r1, #0
 80128da:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80128de:	6865      	ldr	r5, [r4, #4]
 80128e0:	60a5      	str	r5, [r4, #8]
 80128e2:	2d00      	cmp	r5, #0
 80128e4:	bfa2      	ittt	ge
 80128e6:	6821      	ldrge	r1, [r4, #0]
 80128e8:	f021 0104 	bicge.w	r1, r1, #4
 80128ec:	6021      	strge	r1, [r4, #0]
 80128ee:	b90e      	cbnz	r6, 80128f4 <_printf_i+0x118>
 80128f0:	2d00      	cmp	r5, #0
 80128f2:	d04d      	beq.n	8012990 <_printf_i+0x1b4>
 80128f4:	4615      	mov	r5, r2
 80128f6:	fbb6 f1f3 	udiv	r1, r6, r3
 80128fa:	fb03 6711 	mls	r7, r3, r1, r6
 80128fe:	5dc7      	ldrb	r7, [r0, r7]
 8012900:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8012904:	4637      	mov	r7, r6
 8012906:	42bb      	cmp	r3, r7
 8012908:	460e      	mov	r6, r1
 801290a:	d9f4      	bls.n	80128f6 <_printf_i+0x11a>
 801290c:	2b08      	cmp	r3, #8
 801290e:	d10b      	bne.n	8012928 <_printf_i+0x14c>
 8012910:	6823      	ldr	r3, [r4, #0]
 8012912:	07de      	lsls	r6, r3, #31
 8012914:	d508      	bpl.n	8012928 <_printf_i+0x14c>
 8012916:	6923      	ldr	r3, [r4, #16]
 8012918:	6861      	ldr	r1, [r4, #4]
 801291a:	4299      	cmp	r1, r3
 801291c:	bfde      	ittt	le
 801291e:	2330      	movle	r3, #48	; 0x30
 8012920:	f805 3c01 	strble.w	r3, [r5, #-1]
 8012924:	f105 35ff 	addle.w	r5, r5, #4294967295
 8012928:	1b52      	subs	r2, r2, r5
 801292a:	6122      	str	r2, [r4, #16]
 801292c:	f8cd a000 	str.w	sl, [sp]
 8012930:	464b      	mov	r3, r9
 8012932:	aa03      	add	r2, sp, #12
 8012934:	4621      	mov	r1, r4
 8012936:	4640      	mov	r0, r8
 8012938:	f7ff fee2 	bl	8012700 <_printf_common>
 801293c:	3001      	adds	r0, #1
 801293e:	d14c      	bne.n	80129da <_printf_i+0x1fe>
 8012940:	f04f 30ff 	mov.w	r0, #4294967295
 8012944:	b004      	add	sp, #16
 8012946:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801294a:	4835      	ldr	r0, [pc, #212]	; (8012a20 <_printf_i+0x244>)
 801294c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8012950:	6829      	ldr	r1, [r5, #0]
 8012952:	6823      	ldr	r3, [r4, #0]
 8012954:	f851 6b04 	ldr.w	r6, [r1], #4
 8012958:	6029      	str	r1, [r5, #0]
 801295a:	061d      	lsls	r5, r3, #24
 801295c:	d514      	bpl.n	8012988 <_printf_i+0x1ac>
 801295e:	07df      	lsls	r7, r3, #31
 8012960:	bf44      	itt	mi
 8012962:	f043 0320 	orrmi.w	r3, r3, #32
 8012966:	6023      	strmi	r3, [r4, #0]
 8012968:	b91e      	cbnz	r6, 8012972 <_printf_i+0x196>
 801296a:	6823      	ldr	r3, [r4, #0]
 801296c:	f023 0320 	bic.w	r3, r3, #32
 8012970:	6023      	str	r3, [r4, #0]
 8012972:	2310      	movs	r3, #16
 8012974:	e7b0      	b.n	80128d8 <_printf_i+0xfc>
 8012976:	6823      	ldr	r3, [r4, #0]
 8012978:	f043 0320 	orr.w	r3, r3, #32
 801297c:	6023      	str	r3, [r4, #0]
 801297e:	2378      	movs	r3, #120	; 0x78
 8012980:	4828      	ldr	r0, [pc, #160]	; (8012a24 <_printf_i+0x248>)
 8012982:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8012986:	e7e3      	b.n	8012950 <_printf_i+0x174>
 8012988:	0659      	lsls	r1, r3, #25
 801298a:	bf48      	it	mi
 801298c:	b2b6      	uxthmi	r6, r6
 801298e:	e7e6      	b.n	801295e <_printf_i+0x182>
 8012990:	4615      	mov	r5, r2
 8012992:	e7bb      	b.n	801290c <_printf_i+0x130>
 8012994:	682b      	ldr	r3, [r5, #0]
 8012996:	6826      	ldr	r6, [r4, #0]
 8012998:	6961      	ldr	r1, [r4, #20]
 801299a:	1d18      	adds	r0, r3, #4
 801299c:	6028      	str	r0, [r5, #0]
 801299e:	0635      	lsls	r5, r6, #24
 80129a0:	681b      	ldr	r3, [r3, #0]
 80129a2:	d501      	bpl.n	80129a8 <_printf_i+0x1cc>
 80129a4:	6019      	str	r1, [r3, #0]
 80129a6:	e002      	b.n	80129ae <_printf_i+0x1d2>
 80129a8:	0670      	lsls	r0, r6, #25
 80129aa:	d5fb      	bpl.n	80129a4 <_printf_i+0x1c8>
 80129ac:	8019      	strh	r1, [r3, #0]
 80129ae:	2300      	movs	r3, #0
 80129b0:	6123      	str	r3, [r4, #16]
 80129b2:	4615      	mov	r5, r2
 80129b4:	e7ba      	b.n	801292c <_printf_i+0x150>
 80129b6:	682b      	ldr	r3, [r5, #0]
 80129b8:	1d1a      	adds	r2, r3, #4
 80129ba:	602a      	str	r2, [r5, #0]
 80129bc:	681d      	ldr	r5, [r3, #0]
 80129be:	6862      	ldr	r2, [r4, #4]
 80129c0:	2100      	movs	r1, #0
 80129c2:	4628      	mov	r0, r5
 80129c4:	f7ed fc0c 	bl	80001e0 <memchr>
 80129c8:	b108      	cbz	r0, 80129ce <_printf_i+0x1f2>
 80129ca:	1b40      	subs	r0, r0, r5
 80129cc:	6060      	str	r0, [r4, #4]
 80129ce:	6863      	ldr	r3, [r4, #4]
 80129d0:	6123      	str	r3, [r4, #16]
 80129d2:	2300      	movs	r3, #0
 80129d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80129d8:	e7a8      	b.n	801292c <_printf_i+0x150>
 80129da:	6923      	ldr	r3, [r4, #16]
 80129dc:	462a      	mov	r2, r5
 80129de:	4649      	mov	r1, r9
 80129e0:	4640      	mov	r0, r8
 80129e2:	47d0      	blx	sl
 80129e4:	3001      	adds	r0, #1
 80129e6:	d0ab      	beq.n	8012940 <_printf_i+0x164>
 80129e8:	6823      	ldr	r3, [r4, #0]
 80129ea:	079b      	lsls	r3, r3, #30
 80129ec:	d413      	bmi.n	8012a16 <_printf_i+0x23a>
 80129ee:	68e0      	ldr	r0, [r4, #12]
 80129f0:	9b03      	ldr	r3, [sp, #12]
 80129f2:	4298      	cmp	r0, r3
 80129f4:	bfb8      	it	lt
 80129f6:	4618      	movlt	r0, r3
 80129f8:	e7a4      	b.n	8012944 <_printf_i+0x168>
 80129fa:	2301      	movs	r3, #1
 80129fc:	4632      	mov	r2, r6
 80129fe:	4649      	mov	r1, r9
 8012a00:	4640      	mov	r0, r8
 8012a02:	47d0      	blx	sl
 8012a04:	3001      	adds	r0, #1
 8012a06:	d09b      	beq.n	8012940 <_printf_i+0x164>
 8012a08:	3501      	adds	r5, #1
 8012a0a:	68e3      	ldr	r3, [r4, #12]
 8012a0c:	9903      	ldr	r1, [sp, #12]
 8012a0e:	1a5b      	subs	r3, r3, r1
 8012a10:	42ab      	cmp	r3, r5
 8012a12:	dcf2      	bgt.n	80129fa <_printf_i+0x21e>
 8012a14:	e7eb      	b.n	80129ee <_printf_i+0x212>
 8012a16:	2500      	movs	r5, #0
 8012a18:	f104 0619 	add.w	r6, r4, #25
 8012a1c:	e7f5      	b.n	8012a0a <_printf_i+0x22e>
 8012a1e:	bf00      	nop
 8012a20:	080154a5 	.word	0x080154a5
 8012a24:	080154b6 	.word	0x080154b6

08012a28 <iprintf>:
 8012a28:	b40f      	push	{r0, r1, r2, r3}
 8012a2a:	4b0a      	ldr	r3, [pc, #40]	; (8012a54 <iprintf+0x2c>)
 8012a2c:	b513      	push	{r0, r1, r4, lr}
 8012a2e:	681c      	ldr	r4, [r3, #0]
 8012a30:	b124      	cbz	r4, 8012a3c <iprintf+0x14>
 8012a32:	69a3      	ldr	r3, [r4, #24]
 8012a34:	b913      	cbnz	r3, 8012a3c <iprintf+0x14>
 8012a36:	4620      	mov	r0, r4
 8012a38:	f7ff fb5c 	bl	80120f4 <__sinit>
 8012a3c:	ab05      	add	r3, sp, #20
 8012a3e:	9a04      	ldr	r2, [sp, #16]
 8012a40:	68a1      	ldr	r1, [r4, #8]
 8012a42:	9301      	str	r3, [sp, #4]
 8012a44:	4620      	mov	r0, r4
 8012a46:	f7ff fd2b 	bl	80124a0 <_vfiprintf_r>
 8012a4a:	b002      	add	sp, #8
 8012a4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012a50:	b004      	add	sp, #16
 8012a52:	4770      	bx	lr
 8012a54:	20000054 	.word	0x20000054

08012a58 <_puts_r>:
 8012a58:	b570      	push	{r4, r5, r6, lr}
 8012a5a:	460e      	mov	r6, r1
 8012a5c:	4605      	mov	r5, r0
 8012a5e:	b118      	cbz	r0, 8012a68 <_puts_r+0x10>
 8012a60:	6983      	ldr	r3, [r0, #24]
 8012a62:	b90b      	cbnz	r3, 8012a68 <_puts_r+0x10>
 8012a64:	f7ff fb46 	bl	80120f4 <__sinit>
 8012a68:	69ab      	ldr	r3, [r5, #24]
 8012a6a:	68ac      	ldr	r4, [r5, #8]
 8012a6c:	b913      	cbnz	r3, 8012a74 <_puts_r+0x1c>
 8012a6e:	4628      	mov	r0, r5
 8012a70:	f7ff fb40 	bl	80120f4 <__sinit>
 8012a74:	4b2c      	ldr	r3, [pc, #176]	; (8012b28 <_puts_r+0xd0>)
 8012a76:	429c      	cmp	r4, r3
 8012a78:	d120      	bne.n	8012abc <_puts_r+0x64>
 8012a7a:	686c      	ldr	r4, [r5, #4]
 8012a7c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012a7e:	07db      	lsls	r3, r3, #31
 8012a80:	d405      	bmi.n	8012a8e <_puts_r+0x36>
 8012a82:	89a3      	ldrh	r3, [r4, #12]
 8012a84:	0598      	lsls	r0, r3, #22
 8012a86:	d402      	bmi.n	8012a8e <_puts_r+0x36>
 8012a88:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012a8a:	f7ff fc08 	bl	801229e <__retarget_lock_acquire_recursive>
 8012a8e:	89a3      	ldrh	r3, [r4, #12]
 8012a90:	0719      	lsls	r1, r3, #28
 8012a92:	d51d      	bpl.n	8012ad0 <_puts_r+0x78>
 8012a94:	6923      	ldr	r3, [r4, #16]
 8012a96:	b1db      	cbz	r3, 8012ad0 <_puts_r+0x78>
 8012a98:	3e01      	subs	r6, #1
 8012a9a:	68a3      	ldr	r3, [r4, #8]
 8012a9c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8012aa0:	3b01      	subs	r3, #1
 8012aa2:	60a3      	str	r3, [r4, #8]
 8012aa4:	bb39      	cbnz	r1, 8012af6 <_puts_r+0x9e>
 8012aa6:	2b00      	cmp	r3, #0
 8012aa8:	da38      	bge.n	8012b1c <_puts_r+0xc4>
 8012aaa:	4622      	mov	r2, r4
 8012aac:	210a      	movs	r1, #10
 8012aae:	4628      	mov	r0, r5
 8012ab0:	f000 f9de 	bl	8012e70 <__swbuf_r>
 8012ab4:	3001      	adds	r0, #1
 8012ab6:	d011      	beq.n	8012adc <_puts_r+0x84>
 8012ab8:	250a      	movs	r5, #10
 8012aba:	e011      	b.n	8012ae0 <_puts_r+0x88>
 8012abc:	4b1b      	ldr	r3, [pc, #108]	; (8012b2c <_puts_r+0xd4>)
 8012abe:	429c      	cmp	r4, r3
 8012ac0:	d101      	bne.n	8012ac6 <_puts_r+0x6e>
 8012ac2:	68ac      	ldr	r4, [r5, #8]
 8012ac4:	e7da      	b.n	8012a7c <_puts_r+0x24>
 8012ac6:	4b1a      	ldr	r3, [pc, #104]	; (8012b30 <_puts_r+0xd8>)
 8012ac8:	429c      	cmp	r4, r3
 8012aca:	bf08      	it	eq
 8012acc:	68ec      	ldreq	r4, [r5, #12]
 8012ace:	e7d5      	b.n	8012a7c <_puts_r+0x24>
 8012ad0:	4621      	mov	r1, r4
 8012ad2:	4628      	mov	r0, r5
 8012ad4:	f000 fa30 	bl	8012f38 <__swsetup_r>
 8012ad8:	2800      	cmp	r0, #0
 8012ada:	d0dd      	beq.n	8012a98 <_puts_r+0x40>
 8012adc:	f04f 35ff 	mov.w	r5, #4294967295
 8012ae0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012ae2:	07da      	lsls	r2, r3, #31
 8012ae4:	d405      	bmi.n	8012af2 <_puts_r+0x9a>
 8012ae6:	89a3      	ldrh	r3, [r4, #12]
 8012ae8:	059b      	lsls	r3, r3, #22
 8012aea:	d402      	bmi.n	8012af2 <_puts_r+0x9a>
 8012aec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012aee:	f7ff fbd7 	bl	80122a0 <__retarget_lock_release_recursive>
 8012af2:	4628      	mov	r0, r5
 8012af4:	bd70      	pop	{r4, r5, r6, pc}
 8012af6:	2b00      	cmp	r3, #0
 8012af8:	da04      	bge.n	8012b04 <_puts_r+0xac>
 8012afa:	69a2      	ldr	r2, [r4, #24]
 8012afc:	429a      	cmp	r2, r3
 8012afe:	dc06      	bgt.n	8012b0e <_puts_r+0xb6>
 8012b00:	290a      	cmp	r1, #10
 8012b02:	d004      	beq.n	8012b0e <_puts_r+0xb6>
 8012b04:	6823      	ldr	r3, [r4, #0]
 8012b06:	1c5a      	adds	r2, r3, #1
 8012b08:	6022      	str	r2, [r4, #0]
 8012b0a:	7019      	strb	r1, [r3, #0]
 8012b0c:	e7c5      	b.n	8012a9a <_puts_r+0x42>
 8012b0e:	4622      	mov	r2, r4
 8012b10:	4628      	mov	r0, r5
 8012b12:	f000 f9ad 	bl	8012e70 <__swbuf_r>
 8012b16:	3001      	adds	r0, #1
 8012b18:	d1bf      	bne.n	8012a9a <_puts_r+0x42>
 8012b1a:	e7df      	b.n	8012adc <_puts_r+0x84>
 8012b1c:	6823      	ldr	r3, [r4, #0]
 8012b1e:	250a      	movs	r5, #10
 8012b20:	1c5a      	adds	r2, r3, #1
 8012b22:	6022      	str	r2, [r4, #0]
 8012b24:	701d      	strb	r5, [r3, #0]
 8012b26:	e7db      	b.n	8012ae0 <_puts_r+0x88>
 8012b28:	08015450 	.word	0x08015450
 8012b2c:	08015470 	.word	0x08015470
 8012b30:	08015430 	.word	0x08015430

08012b34 <puts>:
 8012b34:	4b02      	ldr	r3, [pc, #8]	; (8012b40 <puts+0xc>)
 8012b36:	4601      	mov	r1, r0
 8012b38:	6818      	ldr	r0, [r3, #0]
 8012b3a:	f7ff bf8d 	b.w	8012a58 <_puts_r>
 8012b3e:	bf00      	nop
 8012b40:	20000054 	.word	0x20000054

08012b44 <cleanup_glue>:
 8012b44:	b538      	push	{r3, r4, r5, lr}
 8012b46:	460c      	mov	r4, r1
 8012b48:	6809      	ldr	r1, [r1, #0]
 8012b4a:	4605      	mov	r5, r0
 8012b4c:	b109      	cbz	r1, 8012b52 <cleanup_glue+0xe>
 8012b4e:	f7ff fff9 	bl	8012b44 <cleanup_glue>
 8012b52:	4621      	mov	r1, r4
 8012b54:	4628      	mov	r0, r5
 8012b56:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012b5a:	f000 bbc1 	b.w	80132e0 <_free_r>
	...

08012b60 <_reclaim_reent>:
 8012b60:	4b2c      	ldr	r3, [pc, #176]	; (8012c14 <_reclaim_reent+0xb4>)
 8012b62:	681b      	ldr	r3, [r3, #0]
 8012b64:	4283      	cmp	r3, r0
 8012b66:	b570      	push	{r4, r5, r6, lr}
 8012b68:	4604      	mov	r4, r0
 8012b6a:	d051      	beq.n	8012c10 <_reclaim_reent+0xb0>
 8012b6c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8012b6e:	b143      	cbz	r3, 8012b82 <_reclaim_reent+0x22>
 8012b70:	68db      	ldr	r3, [r3, #12]
 8012b72:	2b00      	cmp	r3, #0
 8012b74:	d14a      	bne.n	8012c0c <_reclaim_reent+0xac>
 8012b76:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012b78:	6819      	ldr	r1, [r3, #0]
 8012b7a:	b111      	cbz	r1, 8012b82 <_reclaim_reent+0x22>
 8012b7c:	4620      	mov	r0, r4
 8012b7e:	f000 fbaf 	bl	80132e0 <_free_r>
 8012b82:	6961      	ldr	r1, [r4, #20]
 8012b84:	b111      	cbz	r1, 8012b8c <_reclaim_reent+0x2c>
 8012b86:	4620      	mov	r0, r4
 8012b88:	f000 fbaa 	bl	80132e0 <_free_r>
 8012b8c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8012b8e:	b111      	cbz	r1, 8012b96 <_reclaim_reent+0x36>
 8012b90:	4620      	mov	r0, r4
 8012b92:	f000 fba5 	bl	80132e0 <_free_r>
 8012b96:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8012b98:	b111      	cbz	r1, 8012ba0 <_reclaim_reent+0x40>
 8012b9a:	4620      	mov	r0, r4
 8012b9c:	f000 fba0 	bl	80132e0 <_free_r>
 8012ba0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8012ba2:	b111      	cbz	r1, 8012baa <_reclaim_reent+0x4a>
 8012ba4:	4620      	mov	r0, r4
 8012ba6:	f000 fb9b 	bl	80132e0 <_free_r>
 8012baa:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8012bac:	b111      	cbz	r1, 8012bb4 <_reclaim_reent+0x54>
 8012bae:	4620      	mov	r0, r4
 8012bb0:	f000 fb96 	bl	80132e0 <_free_r>
 8012bb4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8012bb6:	b111      	cbz	r1, 8012bbe <_reclaim_reent+0x5e>
 8012bb8:	4620      	mov	r0, r4
 8012bba:	f000 fb91 	bl	80132e0 <_free_r>
 8012bbe:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8012bc0:	b111      	cbz	r1, 8012bc8 <_reclaim_reent+0x68>
 8012bc2:	4620      	mov	r0, r4
 8012bc4:	f000 fb8c 	bl	80132e0 <_free_r>
 8012bc8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012bca:	b111      	cbz	r1, 8012bd2 <_reclaim_reent+0x72>
 8012bcc:	4620      	mov	r0, r4
 8012bce:	f000 fb87 	bl	80132e0 <_free_r>
 8012bd2:	69a3      	ldr	r3, [r4, #24]
 8012bd4:	b1e3      	cbz	r3, 8012c10 <_reclaim_reent+0xb0>
 8012bd6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8012bd8:	4620      	mov	r0, r4
 8012bda:	4798      	blx	r3
 8012bdc:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8012bde:	b1b9      	cbz	r1, 8012c10 <_reclaim_reent+0xb0>
 8012be0:	4620      	mov	r0, r4
 8012be2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012be6:	f7ff bfad 	b.w	8012b44 <cleanup_glue>
 8012bea:	5949      	ldr	r1, [r1, r5]
 8012bec:	b941      	cbnz	r1, 8012c00 <_reclaim_reent+0xa0>
 8012bee:	3504      	adds	r5, #4
 8012bf0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012bf2:	2d80      	cmp	r5, #128	; 0x80
 8012bf4:	68d9      	ldr	r1, [r3, #12]
 8012bf6:	d1f8      	bne.n	8012bea <_reclaim_reent+0x8a>
 8012bf8:	4620      	mov	r0, r4
 8012bfa:	f000 fb71 	bl	80132e0 <_free_r>
 8012bfe:	e7ba      	b.n	8012b76 <_reclaim_reent+0x16>
 8012c00:	680e      	ldr	r6, [r1, #0]
 8012c02:	4620      	mov	r0, r4
 8012c04:	f000 fb6c 	bl	80132e0 <_free_r>
 8012c08:	4631      	mov	r1, r6
 8012c0a:	e7ef      	b.n	8012bec <_reclaim_reent+0x8c>
 8012c0c:	2500      	movs	r5, #0
 8012c0e:	e7ef      	b.n	8012bf0 <_reclaim_reent+0x90>
 8012c10:	bd70      	pop	{r4, r5, r6, pc}
 8012c12:	bf00      	nop
 8012c14:	20000054 	.word	0x20000054

08012c18 <_sbrk_r>:
 8012c18:	b538      	push	{r3, r4, r5, lr}
 8012c1a:	4d06      	ldr	r5, [pc, #24]	; (8012c34 <_sbrk_r+0x1c>)
 8012c1c:	2300      	movs	r3, #0
 8012c1e:	4604      	mov	r4, r0
 8012c20:	4608      	mov	r0, r1
 8012c22:	602b      	str	r3, [r5, #0]
 8012c24:	f7ef fd36 	bl	8002694 <_sbrk>
 8012c28:	1c43      	adds	r3, r0, #1
 8012c2a:	d102      	bne.n	8012c32 <_sbrk_r+0x1a>
 8012c2c:	682b      	ldr	r3, [r5, #0]
 8012c2e:	b103      	cbz	r3, 8012c32 <_sbrk_r+0x1a>
 8012c30:	6023      	str	r3, [r4, #0]
 8012c32:	bd38      	pop	{r3, r4, r5, pc}
 8012c34:	20004f28 	.word	0x20004f28

08012c38 <sniprintf>:
 8012c38:	b40c      	push	{r2, r3}
 8012c3a:	b530      	push	{r4, r5, lr}
 8012c3c:	4b17      	ldr	r3, [pc, #92]	; (8012c9c <sniprintf+0x64>)
 8012c3e:	1e0c      	subs	r4, r1, #0
 8012c40:	681d      	ldr	r5, [r3, #0]
 8012c42:	b09d      	sub	sp, #116	; 0x74
 8012c44:	da08      	bge.n	8012c58 <sniprintf+0x20>
 8012c46:	238b      	movs	r3, #139	; 0x8b
 8012c48:	602b      	str	r3, [r5, #0]
 8012c4a:	f04f 30ff 	mov.w	r0, #4294967295
 8012c4e:	b01d      	add	sp, #116	; 0x74
 8012c50:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012c54:	b002      	add	sp, #8
 8012c56:	4770      	bx	lr
 8012c58:	f44f 7302 	mov.w	r3, #520	; 0x208
 8012c5c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8012c60:	bf14      	ite	ne
 8012c62:	f104 33ff 	addne.w	r3, r4, #4294967295
 8012c66:	4623      	moveq	r3, r4
 8012c68:	9304      	str	r3, [sp, #16]
 8012c6a:	9307      	str	r3, [sp, #28]
 8012c6c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8012c70:	9002      	str	r0, [sp, #8]
 8012c72:	9006      	str	r0, [sp, #24]
 8012c74:	f8ad 3016 	strh.w	r3, [sp, #22]
 8012c78:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8012c7a:	ab21      	add	r3, sp, #132	; 0x84
 8012c7c:	a902      	add	r1, sp, #8
 8012c7e:	4628      	mov	r0, r5
 8012c80:	9301      	str	r3, [sp, #4]
 8012c82:	f000 fc03 	bl	801348c <_svfiprintf_r>
 8012c86:	1c43      	adds	r3, r0, #1
 8012c88:	bfbc      	itt	lt
 8012c8a:	238b      	movlt	r3, #139	; 0x8b
 8012c8c:	602b      	strlt	r3, [r5, #0]
 8012c8e:	2c00      	cmp	r4, #0
 8012c90:	d0dd      	beq.n	8012c4e <sniprintf+0x16>
 8012c92:	9b02      	ldr	r3, [sp, #8]
 8012c94:	2200      	movs	r2, #0
 8012c96:	701a      	strb	r2, [r3, #0]
 8012c98:	e7d9      	b.n	8012c4e <sniprintf+0x16>
 8012c9a:	bf00      	nop
 8012c9c:	20000054 	.word	0x20000054

08012ca0 <siprintf>:
 8012ca0:	b40e      	push	{r1, r2, r3}
 8012ca2:	b500      	push	{lr}
 8012ca4:	b09c      	sub	sp, #112	; 0x70
 8012ca6:	ab1d      	add	r3, sp, #116	; 0x74
 8012ca8:	9002      	str	r0, [sp, #8]
 8012caa:	9006      	str	r0, [sp, #24]
 8012cac:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8012cb0:	4809      	ldr	r0, [pc, #36]	; (8012cd8 <siprintf+0x38>)
 8012cb2:	9107      	str	r1, [sp, #28]
 8012cb4:	9104      	str	r1, [sp, #16]
 8012cb6:	4909      	ldr	r1, [pc, #36]	; (8012cdc <siprintf+0x3c>)
 8012cb8:	f853 2b04 	ldr.w	r2, [r3], #4
 8012cbc:	9105      	str	r1, [sp, #20]
 8012cbe:	6800      	ldr	r0, [r0, #0]
 8012cc0:	9301      	str	r3, [sp, #4]
 8012cc2:	a902      	add	r1, sp, #8
 8012cc4:	f000 fbe2 	bl	801348c <_svfiprintf_r>
 8012cc8:	9b02      	ldr	r3, [sp, #8]
 8012cca:	2200      	movs	r2, #0
 8012ccc:	701a      	strb	r2, [r3, #0]
 8012cce:	b01c      	add	sp, #112	; 0x70
 8012cd0:	f85d eb04 	ldr.w	lr, [sp], #4
 8012cd4:	b003      	add	sp, #12
 8012cd6:	4770      	bx	lr
 8012cd8:	20000054 	.word	0x20000054
 8012cdc:	ffff0208 	.word	0xffff0208

08012ce0 <__sread>:
 8012ce0:	b510      	push	{r4, lr}
 8012ce2:	460c      	mov	r4, r1
 8012ce4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012ce8:	f000 fcd0 	bl	801368c <_read_r>
 8012cec:	2800      	cmp	r0, #0
 8012cee:	bfab      	itete	ge
 8012cf0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8012cf2:	89a3      	ldrhlt	r3, [r4, #12]
 8012cf4:	181b      	addge	r3, r3, r0
 8012cf6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8012cfa:	bfac      	ite	ge
 8012cfc:	6563      	strge	r3, [r4, #84]	; 0x54
 8012cfe:	81a3      	strhlt	r3, [r4, #12]
 8012d00:	bd10      	pop	{r4, pc}

08012d02 <__swrite>:
 8012d02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012d06:	461f      	mov	r7, r3
 8012d08:	898b      	ldrh	r3, [r1, #12]
 8012d0a:	05db      	lsls	r3, r3, #23
 8012d0c:	4605      	mov	r5, r0
 8012d0e:	460c      	mov	r4, r1
 8012d10:	4616      	mov	r6, r2
 8012d12:	d505      	bpl.n	8012d20 <__swrite+0x1e>
 8012d14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012d18:	2302      	movs	r3, #2
 8012d1a:	2200      	movs	r2, #0
 8012d1c:	f000 fa54 	bl	80131c8 <_lseek_r>
 8012d20:	89a3      	ldrh	r3, [r4, #12]
 8012d22:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012d26:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8012d2a:	81a3      	strh	r3, [r4, #12]
 8012d2c:	4632      	mov	r2, r6
 8012d2e:	463b      	mov	r3, r7
 8012d30:	4628      	mov	r0, r5
 8012d32:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012d36:	f000 b8ed 	b.w	8012f14 <_write_r>

08012d3a <__sseek>:
 8012d3a:	b510      	push	{r4, lr}
 8012d3c:	460c      	mov	r4, r1
 8012d3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012d42:	f000 fa41 	bl	80131c8 <_lseek_r>
 8012d46:	1c43      	adds	r3, r0, #1
 8012d48:	89a3      	ldrh	r3, [r4, #12]
 8012d4a:	bf15      	itete	ne
 8012d4c:	6560      	strne	r0, [r4, #84]	; 0x54
 8012d4e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8012d52:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8012d56:	81a3      	strheq	r3, [r4, #12]
 8012d58:	bf18      	it	ne
 8012d5a:	81a3      	strhne	r3, [r4, #12]
 8012d5c:	bd10      	pop	{r4, pc}

08012d5e <__sclose>:
 8012d5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012d62:	f000 b95f 	b.w	8013024 <_close_r>

08012d66 <strncpy>:
 8012d66:	b510      	push	{r4, lr}
 8012d68:	3901      	subs	r1, #1
 8012d6a:	4603      	mov	r3, r0
 8012d6c:	b132      	cbz	r2, 8012d7c <strncpy+0x16>
 8012d6e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8012d72:	f803 4b01 	strb.w	r4, [r3], #1
 8012d76:	3a01      	subs	r2, #1
 8012d78:	2c00      	cmp	r4, #0
 8012d7a:	d1f7      	bne.n	8012d6c <strncpy+0x6>
 8012d7c:	441a      	add	r2, r3
 8012d7e:	2100      	movs	r1, #0
 8012d80:	4293      	cmp	r3, r2
 8012d82:	d100      	bne.n	8012d86 <strncpy+0x20>
 8012d84:	bd10      	pop	{r4, pc}
 8012d86:	f803 1b01 	strb.w	r1, [r3], #1
 8012d8a:	e7f9      	b.n	8012d80 <strncpy+0x1a>

08012d8c <strstr>:
 8012d8c:	780a      	ldrb	r2, [r1, #0]
 8012d8e:	b570      	push	{r4, r5, r6, lr}
 8012d90:	b96a      	cbnz	r2, 8012dae <strstr+0x22>
 8012d92:	bd70      	pop	{r4, r5, r6, pc}
 8012d94:	429a      	cmp	r2, r3
 8012d96:	d109      	bne.n	8012dac <strstr+0x20>
 8012d98:	460c      	mov	r4, r1
 8012d9a:	4605      	mov	r5, r0
 8012d9c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8012da0:	2b00      	cmp	r3, #0
 8012da2:	d0f6      	beq.n	8012d92 <strstr+0x6>
 8012da4:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8012da8:	429e      	cmp	r6, r3
 8012daa:	d0f7      	beq.n	8012d9c <strstr+0x10>
 8012dac:	3001      	adds	r0, #1
 8012dae:	7803      	ldrb	r3, [r0, #0]
 8012db0:	2b00      	cmp	r3, #0
 8012db2:	d1ef      	bne.n	8012d94 <strstr+0x8>
 8012db4:	4618      	mov	r0, r3
 8012db6:	e7ec      	b.n	8012d92 <strstr+0x6>

08012db8 <strtok>:
 8012db8:	4b16      	ldr	r3, [pc, #88]	; (8012e14 <strtok+0x5c>)
 8012dba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8012dbc:	681e      	ldr	r6, [r3, #0]
 8012dbe:	6db4      	ldr	r4, [r6, #88]	; 0x58
 8012dc0:	4605      	mov	r5, r0
 8012dc2:	b9fc      	cbnz	r4, 8012e04 <strtok+0x4c>
 8012dc4:	2050      	movs	r0, #80	; 0x50
 8012dc6:	9101      	str	r1, [sp, #4]
 8012dc8:	f000 fa76 	bl	80132b8 <malloc>
 8012dcc:	9901      	ldr	r1, [sp, #4]
 8012dce:	65b0      	str	r0, [r6, #88]	; 0x58
 8012dd0:	4602      	mov	r2, r0
 8012dd2:	b920      	cbnz	r0, 8012dde <strtok+0x26>
 8012dd4:	4b10      	ldr	r3, [pc, #64]	; (8012e18 <strtok+0x60>)
 8012dd6:	4811      	ldr	r0, [pc, #68]	; (8012e1c <strtok+0x64>)
 8012dd8:	2157      	movs	r1, #87	; 0x57
 8012dda:	f7ff f90f 	bl	8011ffc <__assert_func>
 8012dde:	e9c0 4400 	strd	r4, r4, [r0]
 8012de2:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8012de6:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8012dea:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8012dee:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8012df2:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8012df6:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8012dfa:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8012dfe:	6184      	str	r4, [r0, #24]
 8012e00:	7704      	strb	r4, [r0, #28]
 8012e02:	6244      	str	r4, [r0, #36]	; 0x24
 8012e04:	6db2      	ldr	r2, [r6, #88]	; 0x58
 8012e06:	2301      	movs	r3, #1
 8012e08:	4628      	mov	r0, r5
 8012e0a:	b002      	add	sp, #8
 8012e0c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012e10:	f000 b806 	b.w	8012e20 <__strtok_r>
 8012e14:	20000054 	.word	0x20000054
 8012e18:	080154c7 	.word	0x080154c7
 8012e1c:	080154de 	.word	0x080154de

08012e20 <__strtok_r>:
 8012e20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012e22:	b908      	cbnz	r0, 8012e28 <__strtok_r+0x8>
 8012e24:	6810      	ldr	r0, [r2, #0]
 8012e26:	b188      	cbz	r0, 8012e4c <__strtok_r+0x2c>
 8012e28:	4604      	mov	r4, r0
 8012e2a:	4620      	mov	r0, r4
 8012e2c:	f814 5b01 	ldrb.w	r5, [r4], #1
 8012e30:	460f      	mov	r7, r1
 8012e32:	f817 6b01 	ldrb.w	r6, [r7], #1
 8012e36:	b91e      	cbnz	r6, 8012e40 <__strtok_r+0x20>
 8012e38:	b965      	cbnz	r5, 8012e54 <__strtok_r+0x34>
 8012e3a:	6015      	str	r5, [r2, #0]
 8012e3c:	4628      	mov	r0, r5
 8012e3e:	e005      	b.n	8012e4c <__strtok_r+0x2c>
 8012e40:	42b5      	cmp	r5, r6
 8012e42:	d1f6      	bne.n	8012e32 <__strtok_r+0x12>
 8012e44:	2b00      	cmp	r3, #0
 8012e46:	d1f0      	bne.n	8012e2a <__strtok_r+0xa>
 8012e48:	6014      	str	r4, [r2, #0]
 8012e4a:	7003      	strb	r3, [r0, #0]
 8012e4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012e4e:	461c      	mov	r4, r3
 8012e50:	e00c      	b.n	8012e6c <__strtok_r+0x4c>
 8012e52:	b915      	cbnz	r5, 8012e5a <__strtok_r+0x3a>
 8012e54:	f814 3b01 	ldrb.w	r3, [r4], #1
 8012e58:	460e      	mov	r6, r1
 8012e5a:	f816 5b01 	ldrb.w	r5, [r6], #1
 8012e5e:	42ab      	cmp	r3, r5
 8012e60:	d1f7      	bne.n	8012e52 <__strtok_r+0x32>
 8012e62:	2b00      	cmp	r3, #0
 8012e64:	d0f3      	beq.n	8012e4e <__strtok_r+0x2e>
 8012e66:	2300      	movs	r3, #0
 8012e68:	f804 3c01 	strb.w	r3, [r4, #-1]
 8012e6c:	6014      	str	r4, [r2, #0]
 8012e6e:	e7ed      	b.n	8012e4c <__strtok_r+0x2c>

08012e70 <__swbuf_r>:
 8012e70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012e72:	460e      	mov	r6, r1
 8012e74:	4614      	mov	r4, r2
 8012e76:	4605      	mov	r5, r0
 8012e78:	b118      	cbz	r0, 8012e82 <__swbuf_r+0x12>
 8012e7a:	6983      	ldr	r3, [r0, #24]
 8012e7c:	b90b      	cbnz	r3, 8012e82 <__swbuf_r+0x12>
 8012e7e:	f7ff f939 	bl	80120f4 <__sinit>
 8012e82:	4b21      	ldr	r3, [pc, #132]	; (8012f08 <__swbuf_r+0x98>)
 8012e84:	429c      	cmp	r4, r3
 8012e86:	d12b      	bne.n	8012ee0 <__swbuf_r+0x70>
 8012e88:	686c      	ldr	r4, [r5, #4]
 8012e8a:	69a3      	ldr	r3, [r4, #24]
 8012e8c:	60a3      	str	r3, [r4, #8]
 8012e8e:	89a3      	ldrh	r3, [r4, #12]
 8012e90:	071a      	lsls	r2, r3, #28
 8012e92:	d52f      	bpl.n	8012ef4 <__swbuf_r+0x84>
 8012e94:	6923      	ldr	r3, [r4, #16]
 8012e96:	b36b      	cbz	r3, 8012ef4 <__swbuf_r+0x84>
 8012e98:	6923      	ldr	r3, [r4, #16]
 8012e9a:	6820      	ldr	r0, [r4, #0]
 8012e9c:	1ac0      	subs	r0, r0, r3
 8012e9e:	6963      	ldr	r3, [r4, #20]
 8012ea0:	b2f6      	uxtb	r6, r6
 8012ea2:	4283      	cmp	r3, r0
 8012ea4:	4637      	mov	r7, r6
 8012ea6:	dc04      	bgt.n	8012eb2 <__swbuf_r+0x42>
 8012ea8:	4621      	mov	r1, r4
 8012eaa:	4628      	mov	r0, r5
 8012eac:	f000 f950 	bl	8013150 <_fflush_r>
 8012eb0:	bb30      	cbnz	r0, 8012f00 <__swbuf_r+0x90>
 8012eb2:	68a3      	ldr	r3, [r4, #8]
 8012eb4:	3b01      	subs	r3, #1
 8012eb6:	60a3      	str	r3, [r4, #8]
 8012eb8:	6823      	ldr	r3, [r4, #0]
 8012eba:	1c5a      	adds	r2, r3, #1
 8012ebc:	6022      	str	r2, [r4, #0]
 8012ebe:	701e      	strb	r6, [r3, #0]
 8012ec0:	6963      	ldr	r3, [r4, #20]
 8012ec2:	3001      	adds	r0, #1
 8012ec4:	4283      	cmp	r3, r0
 8012ec6:	d004      	beq.n	8012ed2 <__swbuf_r+0x62>
 8012ec8:	89a3      	ldrh	r3, [r4, #12]
 8012eca:	07db      	lsls	r3, r3, #31
 8012ecc:	d506      	bpl.n	8012edc <__swbuf_r+0x6c>
 8012ece:	2e0a      	cmp	r6, #10
 8012ed0:	d104      	bne.n	8012edc <__swbuf_r+0x6c>
 8012ed2:	4621      	mov	r1, r4
 8012ed4:	4628      	mov	r0, r5
 8012ed6:	f000 f93b 	bl	8013150 <_fflush_r>
 8012eda:	b988      	cbnz	r0, 8012f00 <__swbuf_r+0x90>
 8012edc:	4638      	mov	r0, r7
 8012ede:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012ee0:	4b0a      	ldr	r3, [pc, #40]	; (8012f0c <__swbuf_r+0x9c>)
 8012ee2:	429c      	cmp	r4, r3
 8012ee4:	d101      	bne.n	8012eea <__swbuf_r+0x7a>
 8012ee6:	68ac      	ldr	r4, [r5, #8]
 8012ee8:	e7cf      	b.n	8012e8a <__swbuf_r+0x1a>
 8012eea:	4b09      	ldr	r3, [pc, #36]	; (8012f10 <__swbuf_r+0xa0>)
 8012eec:	429c      	cmp	r4, r3
 8012eee:	bf08      	it	eq
 8012ef0:	68ec      	ldreq	r4, [r5, #12]
 8012ef2:	e7ca      	b.n	8012e8a <__swbuf_r+0x1a>
 8012ef4:	4621      	mov	r1, r4
 8012ef6:	4628      	mov	r0, r5
 8012ef8:	f000 f81e 	bl	8012f38 <__swsetup_r>
 8012efc:	2800      	cmp	r0, #0
 8012efe:	d0cb      	beq.n	8012e98 <__swbuf_r+0x28>
 8012f00:	f04f 37ff 	mov.w	r7, #4294967295
 8012f04:	e7ea      	b.n	8012edc <__swbuf_r+0x6c>
 8012f06:	bf00      	nop
 8012f08:	08015450 	.word	0x08015450
 8012f0c:	08015470 	.word	0x08015470
 8012f10:	08015430 	.word	0x08015430

08012f14 <_write_r>:
 8012f14:	b538      	push	{r3, r4, r5, lr}
 8012f16:	4d07      	ldr	r5, [pc, #28]	; (8012f34 <_write_r+0x20>)
 8012f18:	4604      	mov	r4, r0
 8012f1a:	4608      	mov	r0, r1
 8012f1c:	4611      	mov	r1, r2
 8012f1e:	2200      	movs	r2, #0
 8012f20:	602a      	str	r2, [r5, #0]
 8012f22:	461a      	mov	r2, r3
 8012f24:	f7ee f832 	bl	8000f8c <_write>
 8012f28:	1c43      	adds	r3, r0, #1
 8012f2a:	d102      	bne.n	8012f32 <_write_r+0x1e>
 8012f2c:	682b      	ldr	r3, [r5, #0]
 8012f2e:	b103      	cbz	r3, 8012f32 <_write_r+0x1e>
 8012f30:	6023      	str	r3, [r4, #0]
 8012f32:	bd38      	pop	{r3, r4, r5, pc}
 8012f34:	20004f28 	.word	0x20004f28

08012f38 <__swsetup_r>:
 8012f38:	4b32      	ldr	r3, [pc, #200]	; (8013004 <__swsetup_r+0xcc>)
 8012f3a:	b570      	push	{r4, r5, r6, lr}
 8012f3c:	681d      	ldr	r5, [r3, #0]
 8012f3e:	4606      	mov	r6, r0
 8012f40:	460c      	mov	r4, r1
 8012f42:	b125      	cbz	r5, 8012f4e <__swsetup_r+0x16>
 8012f44:	69ab      	ldr	r3, [r5, #24]
 8012f46:	b913      	cbnz	r3, 8012f4e <__swsetup_r+0x16>
 8012f48:	4628      	mov	r0, r5
 8012f4a:	f7ff f8d3 	bl	80120f4 <__sinit>
 8012f4e:	4b2e      	ldr	r3, [pc, #184]	; (8013008 <__swsetup_r+0xd0>)
 8012f50:	429c      	cmp	r4, r3
 8012f52:	d10f      	bne.n	8012f74 <__swsetup_r+0x3c>
 8012f54:	686c      	ldr	r4, [r5, #4]
 8012f56:	89a3      	ldrh	r3, [r4, #12]
 8012f58:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012f5c:	0719      	lsls	r1, r3, #28
 8012f5e:	d42c      	bmi.n	8012fba <__swsetup_r+0x82>
 8012f60:	06dd      	lsls	r5, r3, #27
 8012f62:	d411      	bmi.n	8012f88 <__swsetup_r+0x50>
 8012f64:	2309      	movs	r3, #9
 8012f66:	6033      	str	r3, [r6, #0]
 8012f68:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8012f6c:	81a3      	strh	r3, [r4, #12]
 8012f6e:	f04f 30ff 	mov.w	r0, #4294967295
 8012f72:	e03e      	b.n	8012ff2 <__swsetup_r+0xba>
 8012f74:	4b25      	ldr	r3, [pc, #148]	; (801300c <__swsetup_r+0xd4>)
 8012f76:	429c      	cmp	r4, r3
 8012f78:	d101      	bne.n	8012f7e <__swsetup_r+0x46>
 8012f7a:	68ac      	ldr	r4, [r5, #8]
 8012f7c:	e7eb      	b.n	8012f56 <__swsetup_r+0x1e>
 8012f7e:	4b24      	ldr	r3, [pc, #144]	; (8013010 <__swsetup_r+0xd8>)
 8012f80:	429c      	cmp	r4, r3
 8012f82:	bf08      	it	eq
 8012f84:	68ec      	ldreq	r4, [r5, #12]
 8012f86:	e7e6      	b.n	8012f56 <__swsetup_r+0x1e>
 8012f88:	0758      	lsls	r0, r3, #29
 8012f8a:	d512      	bpl.n	8012fb2 <__swsetup_r+0x7a>
 8012f8c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012f8e:	b141      	cbz	r1, 8012fa2 <__swsetup_r+0x6a>
 8012f90:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012f94:	4299      	cmp	r1, r3
 8012f96:	d002      	beq.n	8012f9e <__swsetup_r+0x66>
 8012f98:	4630      	mov	r0, r6
 8012f9a:	f000 f9a1 	bl	80132e0 <_free_r>
 8012f9e:	2300      	movs	r3, #0
 8012fa0:	6363      	str	r3, [r4, #52]	; 0x34
 8012fa2:	89a3      	ldrh	r3, [r4, #12]
 8012fa4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8012fa8:	81a3      	strh	r3, [r4, #12]
 8012faa:	2300      	movs	r3, #0
 8012fac:	6063      	str	r3, [r4, #4]
 8012fae:	6923      	ldr	r3, [r4, #16]
 8012fb0:	6023      	str	r3, [r4, #0]
 8012fb2:	89a3      	ldrh	r3, [r4, #12]
 8012fb4:	f043 0308 	orr.w	r3, r3, #8
 8012fb8:	81a3      	strh	r3, [r4, #12]
 8012fba:	6923      	ldr	r3, [r4, #16]
 8012fbc:	b94b      	cbnz	r3, 8012fd2 <__swsetup_r+0x9a>
 8012fbe:	89a3      	ldrh	r3, [r4, #12]
 8012fc0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8012fc4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012fc8:	d003      	beq.n	8012fd2 <__swsetup_r+0x9a>
 8012fca:	4621      	mov	r1, r4
 8012fcc:	4630      	mov	r0, r6
 8012fce:	f000 f933 	bl	8013238 <__smakebuf_r>
 8012fd2:	89a0      	ldrh	r0, [r4, #12]
 8012fd4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012fd8:	f010 0301 	ands.w	r3, r0, #1
 8012fdc:	d00a      	beq.n	8012ff4 <__swsetup_r+0xbc>
 8012fde:	2300      	movs	r3, #0
 8012fe0:	60a3      	str	r3, [r4, #8]
 8012fe2:	6963      	ldr	r3, [r4, #20]
 8012fe4:	425b      	negs	r3, r3
 8012fe6:	61a3      	str	r3, [r4, #24]
 8012fe8:	6923      	ldr	r3, [r4, #16]
 8012fea:	b943      	cbnz	r3, 8012ffe <__swsetup_r+0xc6>
 8012fec:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8012ff0:	d1ba      	bne.n	8012f68 <__swsetup_r+0x30>
 8012ff2:	bd70      	pop	{r4, r5, r6, pc}
 8012ff4:	0781      	lsls	r1, r0, #30
 8012ff6:	bf58      	it	pl
 8012ff8:	6963      	ldrpl	r3, [r4, #20]
 8012ffa:	60a3      	str	r3, [r4, #8]
 8012ffc:	e7f4      	b.n	8012fe8 <__swsetup_r+0xb0>
 8012ffe:	2000      	movs	r0, #0
 8013000:	e7f7      	b.n	8012ff2 <__swsetup_r+0xba>
 8013002:	bf00      	nop
 8013004:	20000054 	.word	0x20000054
 8013008:	08015450 	.word	0x08015450
 801300c:	08015470 	.word	0x08015470
 8013010:	08015430 	.word	0x08015430

08013014 <abort>:
 8013014:	b508      	push	{r3, lr}
 8013016:	2006      	movs	r0, #6
 8013018:	f000 fb72 	bl	8013700 <raise>
 801301c:	2001      	movs	r0, #1
 801301e:	f7ef fadd 	bl	80025dc <_exit>
	...

08013024 <_close_r>:
 8013024:	b538      	push	{r3, r4, r5, lr}
 8013026:	4d06      	ldr	r5, [pc, #24]	; (8013040 <_close_r+0x1c>)
 8013028:	2300      	movs	r3, #0
 801302a:	4604      	mov	r4, r0
 801302c:	4608      	mov	r0, r1
 801302e:	602b      	str	r3, [r5, #0]
 8013030:	f7ef fafb 	bl	800262a <_close>
 8013034:	1c43      	adds	r3, r0, #1
 8013036:	d102      	bne.n	801303e <_close_r+0x1a>
 8013038:	682b      	ldr	r3, [r5, #0]
 801303a:	b103      	cbz	r3, 801303e <_close_r+0x1a>
 801303c:	6023      	str	r3, [r4, #0]
 801303e:	bd38      	pop	{r3, r4, r5, pc}
 8013040:	20004f28 	.word	0x20004f28

08013044 <__sflush_r>:
 8013044:	898a      	ldrh	r2, [r1, #12]
 8013046:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801304a:	4605      	mov	r5, r0
 801304c:	0710      	lsls	r0, r2, #28
 801304e:	460c      	mov	r4, r1
 8013050:	d458      	bmi.n	8013104 <__sflush_r+0xc0>
 8013052:	684b      	ldr	r3, [r1, #4]
 8013054:	2b00      	cmp	r3, #0
 8013056:	dc05      	bgt.n	8013064 <__sflush_r+0x20>
 8013058:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801305a:	2b00      	cmp	r3, #0
 801305c:	dc02      	bgt.n	8013064 <__sflush_r+0x20>
 801305e:	2000      	movs	r0, #0
 8013060:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013064:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013066:	2e00      	cmp	r6, #0
 8013068:	d0f9      	beq.n	801305e <__sflush_r+0x1a>
 801306a:	2300      	movs	r3, #0
 801306c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8013070:	682f      	ldr	r7, [r5, #0]
 8013072:	602b      	str	r3, [r5, #0]
 8013074:	d032      	beq.n	80130dc <__sflush_r+0x98>
 8013076:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8013078:	89a3      	ldrh	r3, [r4, #12]
 801307a:	075a      	lsls	r2, r3, #29
 801307c:	d505      	bpl.n	801308a <__sflush_r+0x46>
 801307e:	6863      	ldr	r3, [r4, #4]
 8013080:	1ac0      	subs	r0, r0, r3
 8013082:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8013084:	b10b      	cbz	r3, 801308a <__sflush_r+0x46>
 8013086:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8013088:	1ac0      	subs	r0, r0, r3
 801308a:	2300      	movs	r3, #0
 801308c:	4602      	mov	r2, r0
 801308e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013090:	6a21      	ldr	r1, [r4, #32]
 8013092:	4628      	mov	r0, r5
 8013094:	47b0      	blx	r6
 8013096:	1c43      	adds	r3, r0, #1
 8013098:	89a3      	ldrh	r3, [r4, #12]
 801309a:	d106      	bne.n	80130aa <__sflush_r+0x66>
 801309c:	6829      	ldr	r1, [r5, #0]
 801309e:	291d      	cmp	r1, #29
 80130a0:	d82c      	bhi.n	80130fc <__sflush_r+0xb8>
 80130a2:	4a2a      	ldr	r2, [pc, #168]	; (801314c <__sflush_r+0x108>)
 80130a4:	40ca      	lsrs	r2, r1
 80130a6:	07d6      	lsls	r6, r2, #31
 80130a8:	d528      	bpl.n	80130fc <__sflush_r+0xb8>
 80130aa:	2200      	movs	r2, #0
 80130ac:	6062      	str	r2, [r4, #4]
 80130ae:	04d9      	lsls	r1, r3, #19
 80130b0:	6922      	ldr	r2, [r4, #16]
 80130b2:	6022      	str	r2, [r4, #0]
 80130b4:	d504      	bpl.n	80130c0 <__sflush_r+0x7c>
 80130b6:	1c42      	adds	r2, r0, #1
 80130b8:	d101      	bne.n	80130be <__sflush_r+0x7a>
 80130ba:	682b      	ldr	r3, [r5, #0]
 80130bc:	b903      	cbnz	r3, 80130c0 <__sflush_r+0x7c>
 80130be:	6560      	str	r0, [r4, #84]	; 0x54
 80130c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80130c2:	602f      	str	r7, [r5, #0]
 80130c4:	2900      	cmp	r1, #0
 80130c6:	d0ca      	beq.n	801305e <__sflush_r+0x1a>
 80130c8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80130cc:	4299      	cmp	r1, r3
 80130ce:	d002      	beq.n	80130d6 <__sflush_r+0x92>
 80130d0:	4628      	mov	r0, r5
 80130d2:	f000 f905 	bl	80132e0 <_free_r>
 80130d6:	2000      	movs	r0, #0
 80130d8:	6360      	str	r0, [r4, #52]	; 0x34
 80130da:	e7c1      	b.n	8013060 <__sflush_r+0x1c>
 80130dc:	6a21      	ldr	r1, [r4, #32]
 80130de:	2301      	movs	r3, #1
 80130e0:	4628      	mov	r0, r5
 80130e2:	47b0      	blx	r6
 80130e4:	1c41      	adds	r1, r0, #1
 80130e6:	d1c7      	bne.n	8013078 <__sflush_r+0x34>
 80130e8:	682b      	ldr	r3, [r5, #0]
 80130ea:	2b00      	cmp	r3, #0
 80130ec:	d0c4      	beq.n	8013078 <__sflush_r+0x34>
 80130ee:	2b1d      	cmp	r3, #29
 80130f0:	d001      	beq.n	80130f6 <__sflush_r+0xb2>
 80130f2:	2b16      	cmp	r3, #22
 80130f4:	d101      	bne.n	80130fa <__sflush_r+0xb6>
 80130f6:	602f      	str	r7, [r5, #0]
 80130f8:	e7b1      	b.n	801305e <__sflush_r+0x1a>
 80130fa:	89a3      	ldrh	r3, [r4, #12]
 80130fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013100:	81a3      	strh	r3, [r4, #12]
 8013102:	e7ad      	b.n	8013060 <__sflush_r+0x1c>
 8013104:	690f      	ldr	r7, [r1, #16]
 8013106:	2f00      	cmp	r7, #0
 8013108:	d0a9      	beq.n	801305e <__sflush_r+0x1a>
 801310a:	0793      	lsls	r3, r2, #30
 801310c:	680e      	ldr	r6, [r1, #0]
 801310e:	bf08      	it	eq
 8013110:	694b      	ldreq	r3, [r1, #20]
 8013112:	600f      	str	r7, [r1, #0]
 8013114:	bf18      	it	ne
 8013116:	2300      	movne	r3, #0
 8013118:	eba6 0807 	sub.w	r8, r6, r7
 801311c:	608b      	str	r3, [r1, #8]
 801311e:	f1b8 0f00 	cmp.w	r8, #0
 8013122:	dd9c      	ble.n	801305e <__sflush_r+0x1a>
 8013124:	6a21      	ldr	r1, [r4, #32]
 8013126:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8013128:	4643      	mov	r3, r8
 801312a:	463a      	mov	r2, r7
 801312c:	4628      	mov	r0, r5
 801312e:	47b0      	blx	r6
 8013130:	2800      	cmp	r0, #0
 8013132:	dc06      	bgt.n	8013142 <__sflush_r+0xfe>
 8013134:	89a3      	ldrh	r3, [r4, #12]
 8013136:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801313a:	81a3      	strh	r3, [r4, #12]
 801313c:	f04f 30ff 	mov.w	r0, #4294967295
 8013140:	e78e      	b.n	8013060 <__sflush_r+0x1c>
 8013142:	4407      	add	r7, r0
 8013144:	eba8 0800 	sub.w	r8, r8, r0
 8013148:	e7e9      	b.n	801311e <__sflush_r+0xda>
 801314a:	bf00      	nop
 801314c:	20400001 	.word	0x20400001

08013150 <_fflush_r>:
 8013150:	b538      	push	{r3, r4, r5, lr}
 8013152:	690b      	ldr	r3, [r1, #16]
 8013154:	4605      	mov	r5, r0
 8013156:	460c      	mov	r4, r1
 8013158:	b913      	cbnz	r3, 8013160 <_fflush_r+0x10>
 801315a:	2500      	movs	r5, #0
 801315c:	4628      	mov	r0, r5
 801315e:	bd38      	pop	{r3, r4, r5, pc}
 8013160:	b118      	cbz	r0, 801316a <_fflush_r+0x1a>
 8013162:	6983      	ldr	r3, [r0, #24]
 8013164:	b90b      	cbnz	r3, 801316a <_fflush_r+0x1a>
 8013166:	f7fe ffc5 	bl	80120f4 <__sinit>
 801316a:	4b14      	ldr	r3, [pc, #80]	; (80131bc <_fflush_r+0x6c>)
 801316c:	429c      	cmp	r4, r3
 801316e:	d11b      	bne.n	80131a8 <_fflush_r+0x58>
 8013170:	686c      	ldr	r4, [r5, #4]
 8013172:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013176:	2b00      	cmp	r3, #0
 8013178:	d0ef      	beq.n	801315a <_fflush_r+0xa>
 801317a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801317c:	07d0      	lsls	r0, r2, #31
 801317e:	d404      	bmi.n	801318a <_fflush_r+0x3a>
 8013180:	0599      	lsls	r1, r3, #22
 8013182:	d402      	bmi.n	801318a <_fflush_r+0x3a>
 8013184:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013186:	f7ff f88a 	bl	801229e <__retarget_lock_acquire_recursive>
 801318a:	4628      	mov	r0, r5
 801318c:	4621      	mov	r1, r4
 801318e:	f7ff ff59 	bl	8013044 <__sflush_r>
 8013192:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013194:	07da      	lsls	r2, r3, #31
 8013196:	4605      	mov	r5, r0
 8013198:	d4e0      	bmi.n	801315c <_fflush_r+0xc>
 801319a:	89a3      	ldrh	r3, [r4, #12]
 801319c:	059b      	lsls	r3, r3, #22
 801319e:	d4dd      	bmi.n	801315c <_fflush_r+0xc>
 80131a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80131a2:	f7ff f87d 	bl	80122a0 <__retarget_lock_release_recursive>
 80131a6:	e7d9      	b.n	801315c <_fflush_r+0xc>
 80131a8:	4b05      	ldr	r3, [pc, #20]	; (80131c0 <_fflush_r+0x70>)
 80131aa:	429c      	cmp	r4, r3
 80131ac:	d101      	bne.n	80131b2 <_fflush_r+0x62>
 80131ae:	68ac      	ldr	r4, [r5, #8]
 80131b0:	e7df      	b.n	8013172 <_fflush_r+0x22>
 80131b2:	4b04      	ldr	r3, [pc, #16]	; (80131c4 <_fflush_r+0x74>)
 80131b4:	429c      	cmp	r4, r3
 80131b6:	bf08      	it	eq
 80131b8:	68ec      	ldreq	r4, [r5, #12]
 80131ba:	e7da      	b.n	8013172 <_fflush_r+0x22>
 80131bc:	08015450 	.word	0x08015450
 80131c0:	08015470 	.word	0x08015470
 80131c4:	08015430 	.word	0x08015430

080131c8 <_lseek_r>:
 80131c8:	b538      	push	{r3, r4, r5, lr}
 80131ca:	4d07      	ldr	r5, [pc, #28]	; (80131e8 <_lseek_r+0x20>)
 80131cc:	4604      	mov	r4, r0
 80131ce:	4608      	mov	r0, r1
 80131d0:	4611      	mov	r1, r2
 80131d2:	2200      	movs	r2, #0
 80131d4:	602a      	str	r2, [r5, #0]
 80131d6:	461a      	mov	r2, r3
 80131d8:	f7ef fa4e 	bl	8002678 <_lseek>
 80131dc:	1c43      	adds	r3, r0, #1
 80131de:	d102      	bne.n	80131e6 <_lseek_r+0x1e>
 80131e0:	682b      	ldr	r3, [r5, #0]
 80131e2:	b103      	cbz	r3, 80131e6 <_lseek_r+0x1e>
 80131e4:	6023      	str	r3, [r4, #0]
 80131e6:	bd38      	pop	{r3, r4, r5, pc}
 80131e8:	20004f28 	.word	0x20004f28

080131ec <__swhatbuf_r>:
 80131ec:	b570      	push	{r4, r5, r6, lr}
 80131ee:	460e      	mov	r6, r1
 80131f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80131f4:	2900      	cmp	r1, #0
 80131f6:	b096      	sub	sp, #88	; 0x58
 80131f8:	4614      	mov	r4, r2
 80131fa:	461d      	mov	r5, r3
 80131fc:	da08      	bge.n	8013210 <__swhatbuf_r+0x24>
 80131fe:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8013202:	2200      	movs	r2, #0
 8013204:	602a      	str	r2, [r5, #0]
 8013206:	061a      	lsls	r2, r3, #24
 8013208:	d410      	bmi.n	801322c <__swhatbuf_r+0x40>
 801320a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801320e:	e00e      	b.n	801322e <__swhatbuf_r+0x42>
 8013210:	466a      	mov	r2, sp
 8013212:	f000 fa91 	bl	8013738 <_fstat_r>
 8013216:	2800      	cmp	r0, #0
 8013218:	dbf1      	blt.n	80131fe <__swhatbuf_r+0x12>
 801321a:	9a01      	ldr	r2, [sp, #4]
 801321c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8013220:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8013224:	425a      	negs	r2, r3
 8013226:	415a      	adcs	r2, r3
 8013228:	602a      	str	r2, [r5, #0]
 801322a:	e7ee      	b.n	801320a <__swhatbuf_r+0x1e>
 801322c:	2340      	movs	r3, #64	; 0x40
 801322e:	2000      	movs	r0, #0
 8013230:	6023      	str	r3, [r4, #0]
 8013232:	b016      	add	sp, #88	; 0x58
 8013234:	bd70      	pop	{r4, r5, r6, pc}
	...

08013238 <__smakebuf_r>:
 8013238:	898b      	ldrh	r3, [r1, #12]
 801323a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801323c:	079d      	lsls	r5, r3, #30
 801323e:	4606      	mov	r6, r0
 8013240:	460c      	mov	r4, r1
 8013242:	d507      	bpl.n	8013254 <__smakebuf_r+0x1c>
 8013244:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8013248:	6023      	str	r3, [r4, #0]
 801324a:	6123      	str	r3, [r4, #16]
 801324c:	2301      	movs	r3, #1
 801324e:	6163      	str	r3, [r4, #20]
 8013250:	b002      	add	sp, #8
 8013252:	bd70      	pop	{r4, r5, r6, pc}
 8013254:	ab01      	add	r3, sp, #4
 8013256:	466a      	mov	r2, sp
 8013258:	f7ff ffc8 	bl	80131ec <__swhatbuf_r>
 801325c:	9900      	ldr	r1, [sp, #0]
 801325e:	4605      	mov	r5, r0
 8013260:	4630      	mov	r0, r6
 8013262:	f7ff f87f 	bl	8012364 <_malloc_r>
 8013266:	b948      	cbnz	r0, 801327c <__smakebuf_r+0x44>
 8013268:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801326c:	059a      	lsls	r2, r3, #22
 801326e:	d4ef      	bmi.n	8013250 <__smakebuf_r+0x18>
 8013270:	f023 0303 	bic.w	r3, r3, #3
 8013274:	f043 0302 	orr.w	r3, r3, #2
 8013278:	81a3      	strh	r3, [r4, #12]
 801327a:	e7e3      	b.n	8013244 <__smakebuf_r+0xc>
 801327c:	4b0d      	ldr	r3, [pc, #52]	; (80132b4 <__smakebuf_r+0x7c>)
 801327e:	62b3      	str	r3, [r6, #40]	; 0x28
 8013280:	89a3      	ldrh	r3, [r4, #12]
 8013282:	6020      	str	r0, [r4, #0]
 8013284:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013288:	81a3      	strh	r3, [r4, #12]
 801328a:	9b00      	ldr	r3, [sp, #0]
 801328c:	6163      	str	r3, [r4, #20]
 801328e:	9b01      	ldr	r3, [sp, #4]
 8013290:	6120      	str	r0, [r4, #16]
 8013292:	b15b      	cbz	r3, 80132ac <__smakebuf_r+0x74>
 8013294:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013298:	4630      	mov	r0, r6
 801329a:	f000 fa5f 	bl	801375c <_isatty_r>
 801329e:	b128      	cbz	r0, 80132ac <__smakebuf_r+0x74>
 80132a0:	89a3      	ldrh	r3, [r4, #12]
 80132a2:	f023 0303 	bic.w	r3, r3, #3
 80132a6:	f043 0301 	orr.w	r3, r3, #1
 80132aa:	81a3      	strh	r3, [r4, #12]
 80132ac:	89a0      	ldrh	r0, [r4, #12]
 80132ae:	4305      	orrs	r5, r0
 80132b0:	81a5      	strh	r5, [r4, #12]
 80132b2:	e7cd      	b.n	8013250 <__smakebuf_r+0x18>
 80132b4:	0801208d 	.word	0x0801208d

080132b8 <malloc>:
 80132b8:	4b02      	ldr	r3, [pc, #8]	; (80132c4 <malloc+0xc>)
 80132ba:	4601      	mov	r1, r0
 80132bc:	6818      	ldr	r0, [r3, #0]
 80132be:	f7ff b851 	b.w	8012364 <_malloc_r>
 80132c2:	bf00      	nop
 80132c4:	20000054 	.word	0x20000054

080132c8 <__malloc_lock>:
 80132c8:	4801      	ldr	r0, [pc, #4]	; (80132d0 <__malloc_lock+0x8>)
 80132ca:	f7fe bfe8 	b.w	801229e <__retarget_lock_acquire_recursive>
 80132ce:	bf00      	nop
 80132d0:	20004f1c 	.word	0x20004f1c

080132d4 <__malloc_unlock>:
 80132d4:	4801      	ldr	r0, [pc, #4]	; (80132dc <__malloc_unlock+0x8>)
 80132d6:	f7fe bfe3 	b.w	80122a0 <__retarget_lock_release_recursive>
 80132da:	bf00      	nop
 80132dc:	20004f1c 	.word	0x20004f1c

080132e0 <_free_r>:
 80132e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80132e2:	2900      	cmp	r1, #0
 80132e4:	d044      	beq.n	8013370 <_free_r+0x90>
 80132e6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80132ea:	9001      	str	r0, [sp, #4]
 80132ec:	2b00      	cmp	r3, #0
 80132ee:	f1a1 0404 	sub.w	r4, r1, #4
 80132f2:	bfb8      	it	lt
 80132f4:	18e4      	addlt	r4, r4, r3
 80132f6:	f7ff ffe7 	bl	80132c8 <__malloc_lock>
 80132fa:	4a1e      	ldr	r2, [pc, #120]	; (8013374 <_free_r+0x94>)
 80132fc:	9801      	ldr	r0, [sp, #4]
 80132fe:	6813      	ldr	r3, [r2, #0]
 8013300:	b933      	cbnz	r3, 8013310 <_free_r+0x30>
 8013302:	6063      	str	r3, [r4, #4]
 8013304:	6014      	str	r4, [r2, #0]
 8013306:	b003      	add	sp, #12
 8013308:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801330c:	f7ff bfe2 	b.w	80132d4 <__malloc_unlock>
 8013310:	42a3      	cmp	r3, r4
 8013312:	d908      	bls.n	8013326 <_free_r+0x46>
 8013314:	6825      	ldr	r5, [r4, #0]
 8013316:	1961      	adds	r1, r4, r5
 8013318:	428b      	cmp	r3, r1
 801331a:	bf01      	itttt	eq
 801331c:	6819      	ldreq	r1, [r3, #0]
 801331e:	685b      	ldreq	r3, [r3, #4]
 8013320:	1949      	addeq	r1, r1, r5
 8013322:	6021      	streq	r1, [r4, #0]
 8013324:	e7ed      	b.n	8013302 <_free_r+0x22>
 8013326:	461a      	mov	r2, r3
 8013328:	685b      	ldr	r3, [r3, #4]
 801332a:	b10b      	cbz	r3, 8013330 <_free_r+0x50>
 801332c:	42a3      	cmp	r3, r4
 801332e:	d9fa      	bls.n	8013326 <_free_r+0x46>
 8013330:	6811      	ldr	r1, [r2, #0]
 8013332:	1855      	adds	r5, r2, r1
 8013334:	42a5      	cmp	r5, r4
 8013336:	d10b      	bne.n	8013350 <_free_r+0x70>
 8013338:	6824      	ldr	r4, [r4, #0]
 801333a:	4421      	add	r1, r4
 801333c:	1854      	adds	r4, r2, r1
 801333e:	42a3      	cmp	r3, r4
 8013340:	6011      	str	r1, [r2, #0]
 8013342:	d1e0      	bne.n	8013306 <_free_r+0x26>
 8013344:	681c      	ldr	r4, [r3, #0]
 8013346:	685b      	ldr	r3, [r3, #4]
 8013348:	6053      	str	r3, [r2, #4]
 801334a:	4421      	add	r1, r4
 801334c:	6011      	str	r1, [r2, #0]
 801334e:	e7da      	b.n	8013306 <_free_r+0x26>
 8013350:	d902      	bls.n	8013358 <_free_r+0x78>
 8013352:	230c      	movs	r3, #12
 8013354:	6003      	str	r3, [r0, #0]
 8013356:	e7d6      	b.n	8013306 <_free_r+0x26>
 8013358:	6825      	ldr	r5, [r4, #0]
 801335a:	1961      	adds	r1, r4, r5
 801335c:	428b      	cmp	r3, r1
 801335e:	bf04      	itt	eq
 8013360:	6819      	ldreq	r1, [r3, #0]
 8013362:	685b      	ldreq	r3, [r3, #4]
 8013364:	6063      	str	r3, [r4, #4]
 8013366:	bf04      	itt	eq
 8013368:	1949      	addeq	r1, r1, r5
 801336a:	6021      	streq	r1, [r4, #0]
 801336c:	6054      	str	r4, [r2, #4]
 801336e:	e7ca      	b.n	8013306 <_free_r+0x26>
 8013370:	b003      	add	sp, #12
 8013372:	bd30      	pop	{r4, r5, pc}
 8013374:	20004f20 	.word	0x20004f20

08013378 <_realloc_r>:
 8013378:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801337c:	4680      	mov	r8, r0
 801337e:	4614      	mov	r4, r2
 8013380:	460e      	mov	r6, r1
 8013382:	b921      	cbnz	r1, 801338e <_realloc_r+0x16>
 8013384:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013388:	4611      	mov	r1, r2
 801338a:	f7fe bfeb 	b.w	8012364 <_malloc_r>
 801338e:	b92a      	cbnz	r2, 801339c <_realloc_r+0x24>
 8013390:	f7ff ffa6 	bl	80132e0 <_free_r>
 8013394:	4625      	mov	r5, r4
 8013396:	4628      	mov	r0, r5
 8013398:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801339c:	f000 f9ee 	bl	801377c <_malloc_usable_size_r>
 80133a0:	4284      	cmp	r4, r0
 80133a2:	4607      	mov	r7, r0
 80133a4:	d802      	bhi.n	80133ac <_realloc_r+0x34>
 80133a6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80133aa:	d812      	bhi.n	80133d2 <_realloc_r+0x5a>
 80133ac:	4621      	mov	r1, r4
 80133ae:	4640      	mov	r0, r8
 80133b0:	f7fe ffd8 	bl	8012364 <_malloc_r>
 80133b4:	4605      	mov	r5, r0
 80133b6:	2800      	cmp	r0, #0
 80133b8:	d0ed      	beq.n	8013396 <_realloc_r+0x1e>
 80133ba:	42bc      	cmp	r4, r7
 80133bc:	4622      	mov	r2, r4
 80133be:	4631      	mov	r1, r6
 80133c0:	bf28      	it	cs
 80133c2:	463a      	movcs	r2, r7
 80133c4:	f7fe ff7d 	bl	80122c2 <memcpy>
 80133c8:	4631      	mov	r1, r6
 80133ca:	4640      	mov	r0, r8
 80133cc:	f7ff ff88 	bl	80132e0 <_free_r>
 80133d0:	e7e1      	b.n	8013396 <_realloc_r+0x1e>
 80133d2:	4635      	mov	r5, r6
 80133d4:	e7df      	b.n	8013396 <_realloc_r+0x1e>

080133d6 <__ssputs_r>:
 80133d6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80133da:	688e      	ldr	r6, [r1, #8]
 80133dc:	429e      	cmp	r6, r3
 80133de:	4682      	mov	sl, r0
 80133e0:	460c      	mov	r4, r1
 80133e2:	4690      	mov	r8, r2
 80133e4:	461f      	mov	r7, r3
 80133e6:	d838      	bhi.n	801345a <__ssputs_r+0x84>
 80133e8:	898a      	ldrh	r2, [r1, #12]
 80133ea:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80133ee:	d032      	beq.n	8013456 <__ssputs_r+0x80>
 80133f0:	6825      	ldr	r5, [r4, #0]
 80133f2:	6909      	ldr	r1, [r1, #16]
 80133f4:	eba5 0901 	sub.w	r9, r5, r1
 80133f8:	6965      	ldr	r5, [r4, #20]
 80133fa:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80133fe:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8013402:	3301      	adds	r3, #1
 8013404:	444b      	add	r3, r9
 8013406:	106d      	asrs	r5, r5, #1
 8013408:	429d      	cmp	r5, r3
 801340a:	bf38      	it	cc
 801340c:	461d      	movcc	r5, r3
 801340e:	0553      	lsls	r3, r2, #21
 8013410:	d531      	bpl.n	8013476 <__ssputs_r+0xa0>
 8013412:	4629      	mov	r1, r5
 8013414:	f7fe ffa6 	bl	8012364 <_malloc_r>
 8013418:	4606      	mov	r6, r0
 801341a:	b950      	cbnz	r0, 8013432 <__ssputs_r+0x5c>
 801341c:	230c      	movs	r3, #12
 801341e:	f8ca 3000 	str.w	r3, [sl]
 8013422:	89a3      	ldrh	r3, [r4, #12]
 8013424:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013428:	81a3      	strh	r3, [r4, #12]
 801342a:	f04f 30ff 	mov.w	r0, #4294967295
 801342e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013432:	6921      	ldr	r1, [r4, #16]
 8013434:	464a      	mov	r2, r9
 8013436:	f7fe ff44 	bl	80122c2 <memcpy>
 801343a:	89a3      	ldrh	r3, [r4, #12]
 801343c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8013440:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013444:	81a3      	strh	r3, [r4, #12]
 8013446:	6126      	str	r6, [r4, #16]
 8013448:	6165      	str	r5, [r4, #20]
 801344a:	444e      	add	r6, r9
 801344c:	eba5 0509 	sub.w	r5, r5, r9
 8013450:	6026      	str	r6, [r4, #0]
 8013452:	60a5      	str	r5, [r4, #8]
 8013454:	463e      	mov	r6, r7
 8013456:	42be      	cmp	r6, r7
 8013458:	d900      	bls.n	801345c <__ssputs_r+0x86>
 801345a:	463e      	mov	r6, r7
 801345c:	6820      	ldr	r0, [r4, #0]
 801345e:	4632      	mov	r2, r6
 8013460:	4641      	mov	r1, r8
 8013462:	f7fe ff3c 	bl	80122de <memmove>
 8013466:	68a3      	ldr	r3, [r4, #8]
 8013468:	1b9b      	subs	r3, r3, r6
 801346a:	60a3      	str	r3, [r4, #8]
 801346c:	6823      	ldr	r3, [r4, #0]
 801346e:	4433      	add	r3, r6
 8013470:	6023      	str	r3, [r4, #0]
 8013472:	2000      	movs	r0, #0
 8013474:	e7db      	b.n	801342e <__ssputs_r+0x58>
 8013476:	462a      	mov	r2, r5
 8013478:	f7ff ff7e 	bl	8013378 <_realloc_r>
 801347c:	4606      	mov	r6, r0
 801347e:	2800      	cmp	r0, #0
 8013480:	d1e1      	bne.n	8013446 <__ssputs_r+0x70>
 8013482:	6921      	ldr	r1, [r4, #16]
 8013484:	4650      	mov	r0, sl
 8013486:	f7ff ff2b 	bl	80132e0 <_free_r>
 801348a:	e7c7      	b.n	801341c <__ssputs_r+0x46>

0801348c <_svfiprintf_r>:
 801348c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013490:	4698      	mov	r8, r3
 8013492:	898b      	ldrh	r3, [r1, #12]
 8013494:	061b      	lsls	r3, r3, #24
 8013496:	b09d      	sub	sp, #116	; 0x74
 8013498:	4607      	mov	r7, r0
 801349a:	460d      	mov	r5, r1
 801349c:	4614      	mov	r4, r2
 801349e:	d50e      	bpl.n	80134be <_svfiprintf_r+0x32>
 80134a0:	690b      	ldr	r3, [r1, #16]
 80134a2:	b963      	cbnz	r3, 80134be <_svfiprintf_r+0x32>
 80134a4:	2140      	movs	r1, #64	; 0x40
 80134a6:	f7fe ff5d 	bl	8012364 <_malloc_r>
 80134aa:	6028      	str	r0, [r5, #0]
 80134ac:	6128      	str	r0, [r5, #16]
 80134ae:	b920      	cbnz	r0, 80134ba <_svfiprintf_r+0x2e>
 80134b0:	230c      	movs	r3, #12
 80134b2:	603b      	str	r3, [r7, #0]
 80134b4:	f04f 30ff 	mov.w	r0, #4294967295
 80134b8:	e0d1      	b.n	801365e <_svfiprintf_r+0x1d2>
 80134ba:	2340      	movs	r3, #64	; 0x40
 80134bc:	616b      	str	r3, [r5, #20]
 80134be:	2300      	movs	r3, #0
 80134c0:	9309      	str	r3, [sp, #36]	; 0x24
 80134c2:	2320      	movs	r3, #32
 80134c4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80134c8:	f8cd 800c 	str.w	r8, [sp, #12]
 80134cc:	2330      	movs	r3, #48	; 0x30
 80134ce:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8013678 <_svfiprintf_r+0x1ec>
 80134d2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80134d6:	f04f 0901 	mov.w	r9, #1
 80134da:	4623      	mov	r3, r4
 80134dc:	469a      	mov	sl, r3
 80134de:	f813 2b01 	ldrb.w	r2, [r3], #1
 80134e2:	b10a      	cbz	r2, 80134e8 <_svfiprintf_r+0x5c>
 80134e4:	2a25      	cmp	r2, #37	; 0x25
 80134e6:	d1f9      	bne.n	80134dc <_svfiprintf_r+0x50>
 80134e8:	ebba 0b04 	subs.w	fp, sl, r4
 80134ec:	d00b      	beq.n	8013506 <_svfiprintf_r+0x7a>
 80134ee:	465b      	mov	r3, fp
 80134f0:	4622      	mov	r2, r4
 80134f2:	4629      	mov	r1, r5
 80134f4:	4638      	mov	r0, r7
 80134f6:	f7ff ff6e 	bl	80133d6 <__ssputs_r>
 80134fa:	3001      	adds	r0, #1
 80134fc:	f000 80aa 	beq.w	8013654 <_svfiprintf_r+0x1c8>
 8013500:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013502:	445a      	add	r2, fp
 8013504:	9209      	str	r2, [sp, #36]	; 0x24
 8013506:	f89a 3000 	ldrb.w	r3, [sl]
 801350a:	2b00      	cmp	r3, #0
 801350c:	f000 80a2 	beq.w	8013654 <_svfiprintf_r+0x1c8>
 8013510:	2300      	movs	r3, #0
 8013512:	f04f 32ff 	mov.w	r2, #4294967295
 8013516:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801351a:	f10a 0a01 	add.w	sl, sl, #1
 801351e:	9304      	str	r3, [sp, #16]
 8013520:	9307      	str	r3, [sp, #28]
 8013522:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8013526:	931a      	str	r3, [sp, #104]	; 0x68
 8013528:	4654      	mov	r4, sl
 801352a:	2205      	movs	r2, #5
 801352c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013530:	4851      	ldr	r0, [pc, #324]	; (8013678 <_svfiprintf_r+0x1ec>)
 8013532:	f7ec fe55 	bl	80001e0 <memchr>
 8013536:	9a04      	ldr	r2, [sp, #16]
 8013538:	b9d8      	cbnz	r0, 8013572 <_svfiprintf_r+0xe6>
 801353a:	06d0      	lsls	r0, r2, #27
 801353c:	bf44      	itt	mi
 801353e:	2320      	movmi	r3, #32
 8013540:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013544:	0711      	lsls	r1, r2, #28
 8013546:	bf44      	itt	mi
 8013548:	232b      	movmi	r3, #43	; 0x2b
 801354a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801354e:	f89a 3000 	ldrb.w	r3, [sl]
 8013552:	2b2a      	cmp	r3, #42	; 0x2a
 8013554:	d015      	beq.n	8013582 <_svfiprintf_r+0xf6>
 8013556:	9a07      	ldr	r2, [sp, #28]
 8013558:	4654      	mov	r4, sl
 801355a:	2000      	movs	r0, #0
 801355c:	f04f 0c0a 	mov.w	ip, #10
 8013560:	4621      	mov	r1, r4
 8013562:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013566:	3b30      	subs	r3, #48	; 0x30
 8013568:	2b09      	cmp	r3, #9
 801356a:	d94e      	bls.n	801360a <_svfiprintf_r+0x17e>
 801356c:	b1b0      	cbz	r0, 801359c <_svfiprintf_r+0x110>
 801356e:	9207      	str	r2, [sp, #28]
 8013570:	e014      	b.n	801359c <_svfiprintf_r+0x110>
 8013572:	eba0 0308 	sub.w	r3, r0, r8
 8013576:	fa09 f303 	lsl.w	r3, r9, r3
 801357a:	4313      	orrs	r3, r2
 801357c:	9304      	str	r3, [sp, #16]
 801357e:	46a2      	mov	sl, r4
 8013580:	e7d2      	b.n	8013528 <_svfiprintf_r+0x9c>
 8013582:	9b03      	ldr	r3, [sp, #12]
 8013584:	1d19      	adds	r1, r3, #4
 8013586:	681b      	ldr	r3, [r3, #0]
 8013588:	9103      	str	r1, [sp, #12]
 801358a:	2b00      	cmp	r3, #0
 801358c:	bfbb      	ittet	lt
 801358e:	425b      	neglt	r3, r3
 8013590:	f042 0202 	orrlt.w	r2, r2, #2
 8013594:	9307      	strge	r3, [sp, #28]
 8013596:	9307      	strlt	r3, [sp, #28]
 8013598:	bfb8      	it	lt
 801359a:	9204      	strlt	r2, [sp, #16]
 801359c:	7823      	ldrb	r3, [r4, #0]
 801359e:	2b2e      	cmp	r3, #46	; 0x2e
 80135a0:	d10c      	bne.n	80135bc <_svfiprintf_r+0x130>
 80135a2:	7863      	ldrb	r3, [r4, #1]
 80135a4:	2b2a      	cmp	r3, #42	; 0x2a
 80135a6:	d135      	bne.n	8013614 <_svfiprintf_r+0x188>
 80135a8:	9b03      	ldr	r3, [sp, #12]
 80135aa:	1d1a      	adds	r2, r3, #4
 80135ac:	681b      	ldr	r3, [r3, #0]
 80135ae:	9203      	str	r2, [sp, #12]
 80135b0:	2b00      	cmp	r3, #0
 80135b2:	bfb8      	it	lt
 80135b4:	f04f 33ff 	movlt.w	r3, #4294967295
 80135b8:	3402      	adds	r4, #2
 80135ba:	9305      	str	r3, [sp, #20]
 80135bc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8013688 <_svfiprintf_r+0x1fc>
 80135c0:	7821      	ldrb	r1, [r4, #0]
 80135c2:	2203      	movs	r2, #3
 80135c4:	4650      	mov	r0, sl
 80135c6:	f7ec fe0b 	bl	80001e0 <memchr>
 80135ca:	b140      	cbz	r0, 80135de <_svfiprintf_r+0x152>
 80135cc:	2340      	movs	r3, #64	; 0x40
 80135ce:	eba0 000a 	sub.w	r0, r0, sl
 80135d2:	fa03 f000 	lsl.w	r0, r3, r0
 80135d6:	9b04      	ldr	r3, [sp, #16]
 80135d8:	4303      	orrs	r3, r0
 80135da:	3401      	adds	r4, #1
 80135dc:	9304      	str	r3, [sp, #16]
 80135de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80135e2:	4826      	ldr	r0, [pc, #152]	; (801367c <_svfiprintf_r+0x1f0>)
 80135e4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80135e8:	2206      	movs	r2, #6
 80135ea:	f7ec fdf9 	bl	80001e0 <memchr>
 80135ee:	2800      	cmp	r0, #0
 80135f0:	d038      	beq.n	8013664 <_svfiprintf_r+0x1d8>
 80135f2:	4b23      	ldr	r3, [pc, #140]	; (8013680 <_svfiprintf_r+0x1f4>)
 80135f4:	bb1b      	cbnz	r3, 801363e <_svfiprintf_r+0x1b2>
 80135f6:	9b03      	ldr	r3, [sp, #12]
 80135f8:	3307      	adds	r3, #7
 80135fa:	f023 0307 	bic.w	r3, r3, #7
 80135fe:	3308      	adds	r3, #8
 8013600:	9303      	str	r3, [sp, #12]
 8013602:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013604:	4433      	add	r3, r6
 8013606:	9309      	str	r3, [sp, #36]	; 0x24
 8013608:	e767      	b.n	80134da <_svfiprintf_r+0x4e>
 801360a:	fb0c 3202 	mla	r2, ip, r2, r3
 801360e:	460c      	mov	r4, r1
 8013610:	2001      	movs	r0, #1
 8013612:	e7a5      	b.n	8013560 <_svfiprintf_r+0xd4>
 8013614:	2300      	movs	r3, #0
 8013616:	3401      	adds	r4, #1
 8013618:	9305      	str	r3, [sp, #20]
 801361a:	4619      	mov	r1, r3
 801361c:	f04f 0c0a 	mov.w	ip, #10
 8013620:	4620      	mov	r0, r4
 8013622:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013626:	3a30      	subs	r2, #48	; 0x30
 8013628:	2a09      	cmp	r2, #9
 801362a:	d903      	bls.n	8013634 <_svfiprintf_r+0x1a8>
 801362c:	2b00      	cmp	r3, #0
 801362e:	d0c5      	beq.n	80135bc <_svfiprintf_r+0x130>
 8013630:	9105      	str	r1, [sp, #20]
 8013632:	e7c3      	b.n	80135bc <_svfiprintf_r+0x130>
 8013634:	fb0c 2101 	mla	r1, ip, r1, r2
 8013638:	4604      	mov	r4, r0
 801363a:	2301      	movs	r3, #1
 801363c:	e7f0      	b.n	8013620 <_svfiprintf_r+0x194>
 801363e:	ab03      	add	r3, sp, #12
 8013640:	9300      	str	r3, [sp, #0]
 8013642:	462a      	mov	r2, r5
 8013644:	4b0f      	ldr	r3, [pc, #60]	; (8013684 <_svfiprintf_r+0x1f8>)
 8013646:	a904      	add	r1, sp, #16
 8013648:	4638      	mov	r0, r7
 801364a:	f3af 8000 	nop.w
 801364e:	1c42      	adds	r2, r0, #1
 8013650:	4606      	mov	r6, r0
 8013652:	d1d6      	bne.n	8013602 <_svfiprintf_r+0x176>
 8013654:	89ab      	ldrh	r3, [r5, #12]
 8013656:	065b      	lsls	r3, r3, #25
 8013658:	f53f af2c 	bmi.w	80134b4 <_svfiprintf_r+0x28>
 801365c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801365e:	b01d      	add	sp, #116	; 0x74
 8013660:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013664:	ab03      	add	r3, sp, #12
 8013666:	9300      	str	r3, [sp, #0]
 8013668:	462a      	mov	r2, r5
 801366a:	4b06      	ldr	r3, [pc, #24]	; (8013684 <_svfiprintf_r+0x1f8>)
 801366c:	a904      	add	r1, sp, #16
 801366e:	4638      	mov	r0, r7
 8013670:	f7ff f8b4 	bl	80127dc <_printf_i>
 8013674:	e7eb      	b.n	801364e <_svfiprintf_r+0x1c2>
 8013676:	bf00      	nop
 8013678:	08015494 	.word	0x08015494
 801367c:	0801549e 	.word	0x0801549e
 8013680:	00000000 	.word	0x00000000
 8013684:	080133d7 	.word	0x080133d7
 8013688:	0801549a 	.word	0x0801549a

0801368c <_read_r>:
 801368c:	b538      	push	{r3, r4, r5, lr}
 801368e:	4d07      	ldr	r5, [pc, #28]	; (80136ac <_read_r+0x20>)
 8013690:	4604      	mov	r4, r0
 8013692:	4608      	mov	r0, r1
 8013694:	4611      	mov	r1, r2
 8013696:	2200      	movs	r2, #0
 8013698:	602a      	str	r2, [r5, #0]
 801369a:	461a      	mov	r2, r3
 801369c:	f7ee ffa8 	bl	80025f0 <_read>
 80136a0:	1c43      	adds	r3, r0, #1
 80136a2:	d102      	bne.n	80136aa <_read_r+0x1e>
 80136a4:	682b      	ldr	r3, [r5, #0]
 80136a6:	b103      	cbz	r3, 80136aa <_read_r+0x1e>
 80136a8:	6023      	str	r3, [r4, #0]
 80136aa:	bd38      	pop	{r3, r4, r5, pc}
 80136ac:	20004f28 	.word	0x20004f28

080136b0 <_raise_r>:
 80136b0:	291f      	cmp	r1, #31
 80136b2:	b538      	push	{r3, r4, r5, lr}
 80136b4:	4604      	mov	r4, r0
 80136b6:	460d      	mov	r5, r1
 80136b8:	d904      	bls.n	80136c4 <_raise_r+0x14>
 80136ba:	2316      	movs	r3, #22
 80136bc:	6003      	str	r3, [r0, #0]
 80136be:	f04f 30ff 	mov.w	r0, #4294967295
 80136c2:	bd38      	pop	{r3, r4, r5, pc}
 80136c4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80136c6:	b112      	cbz	r2, 80136ce <_raise_r+0x1e>
 80136c8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80136cc:	b94b      	cbnz	r3, 80136e2 <_raise_r+0x32>
 80136ce:	4620      	mov	r0, r4
 80136d0:	f000 f830 	bl	8013734 <_getpid_r>
 80136d4:	462a      	mov	r2, r5
 80136d6:	4601      	mov	r1, r0
 80136d8:	4620      	mov	r0, r4
 80136da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80136de:	f000 b817 	b.w	8013710 <_kill_r>
 80136e2:	2b01      	cmp	r3, #1
 80136e4:	d00a      	beq.n	80136fc <_raise_r+0x4c>
 80136e6:	1c59      	adds	r1, r3, #1
 80136e8:	d103      	bne.n	80136f2 <_raise_r+0x42>
 80136ea:	2316      	movs	r3, #22
 80136ec:	6003      	str	r3, [r0, #0]
 80136ee:	2001      	movs	r0, #1
 80136f0:	e7e7      	b.n	80136c2 <_raise_r+0x12>
 80136f2:	2400      	movs	r4, #0
 80136f4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80136f8:	4628      	mov	r0, r5
 80136fa:	4798      	blx	r3
 80136fc:	2000      	movs	r0, #0
 80136fe:	e7e0      	b.n	80136c2 <_raise_r+0x12>

08013700 <raise>:
 8013700:	4b02      	ldr	r3, [pc, #8]	; (801370c <raise+0xc>)
 8013702:	4601      	mov	r1, r0
 8013704:	6818      	ldr	r0, [r3, #0]
 8013706:	f7ff bfd3 	b.w	80136b0 <_raise_r>
 801370a:	bf00      	nop
 801370c:	20000054 	.word	0x20000054

08013710 <_kill_r>:
 8013710:	b538      	push	{r3, r4, r5, lr}
 8013712:	4d07      	ldr	r5, [pc, #28]	; (8013730 <_kill_r+0x20>)
 8013714:	2300      	movs	r3, #0
 8013716:	4604      	mov	r4, r0
 8013718:	4608      	mov	r0, r1
 801371a:	4611      	mov	r1, r2
 801371c:	602b      	str	r3, [r5, #0]
 801371e:	f7ee ff4d 	bl	80025bc <_kill>
 8013722:	1c43      	adds	r3, r0, #1
 8013724:	d102      	bne.n	801372c <_kill_r+0x1c>
 8013726:	682b      	ldr	r3, [r5, #0]
 8013728:	b103      	cbz	r3, 801372c <_kill_r+0x1c>
 801372a:	6023      	str	r3, [r4, #0]
 801372c:	bd38      	pop	{r3, r4, r5, pc}
 801372e:	bf00      	nop
 8013730:	20004f28 	.word	0x20004f28

08013734 <_getpid_r>:
 8013734:	f7ee bf3a 	b.w	80025ac <_getpid>

08013738 <_fstat_r>:
 8013738:	b538      	push	{r3, r4, r5, lr}
 801373a:	4d07      	ldr	r5, [pc, #28]	; (8013758 <_fstat_r+0x20>)
 801373c:	2300      	movs	r3, #0
 801373e:	4604      	mov	r4, r0
 8013740:	4608      	mov	r0, r1
 8013742:	4611      	mov	r1, r2
 8013744:	602b      	str	r3, [r5, #0]
 8013746:	f7ee ff7c 	bl	8002642 <_fstat>
 801374a:	1c43      	adds	r3, r0, #1
 801374c:	d102      	bne.n	8013754 <_fstat_r+0x1c>
 801374e:	682b      	ldr	r3, [r5, #0]
 8013750:	b103      	cbz	r3, 8013754 <_fstat_r+0x1c>
 8013752:	6023      	str	r3, [r4, #0]
 8013754:	bd38      	pop	{r3, r4, r5, pc}
 8013756:	bf00      	nop
 8013758:	20004f28 	.word	0x20004f28

0801375c <_isatty_r>:
 801375c:	b538      	push	{r3, r4, r5, lr}
 801375e:	4d06      	ldr	r5, [pc, #24]	; (8013778 <_isatty_r+0x1c>)
 8013760:	2300      	movs	r3, #0
 8013762:	4604      	mov	r4, r0
 8013764:	4608      	mov	r0, r1
 8013766:	602b      	str	r3, [r5, #0]
 8013768:	f7ee ff7b 	bl	8002662 <_isatty>
 801376c:	1c43      	adds	r3, r0, #1
 801376e:	d102      	bne.n	8013776 <_isatty_r+0x1a>
 8013770:	682b      	ldr	r3, [r5, #0]
 8013772:	b103      	cbz	r3, 8013776 <_isatty_r+0x1a>
 8013774:	6023      	str	r3, [r4, #0]
 8013776:	bd38      	pop	{r3, r4, r5, pc}
 8013778:	20004f28 	.word	0x20004f28

0801377c <_malloc_usable_size_r>:
 801377c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013780:	1f18      	subs	r0, r3, #4
 8013782:	2b00      	cmp	r3, #0
 8013784:	bfbc      	itt	lt
 8013786:	580b      	ldrlt	r3, [r1, r0]
 8013788:	18c0      	addlt	r0, r0, r3
 801378a:	4770      	bx	lr

0801378c <_init>:
 801378c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801378e:	bf00      	nop
 8013790:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013792:	bc08      	pop	{r3}
 8013794:	469e      	mov	lr, r3
 8013796:	4770      	bx	lr

08013798 <_fini>:
 8013798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801379a:	bf00      	nop
 801379c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801379e:	bc08      	pop	{r3}
 80137a0:	469e      	mov	lr, r3
 80137a2:	4770      	bx	lr
