
Practica5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000129b4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001ce4  08012b44  08012b44  00022b44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014828  08014828  000300b4  2**0
                  CONTENTS
  4 .ARM          00000008  08014828  08014828  00024828  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08014830  08014830  000300b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08014830  08014830  00024830  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08014834  08014834  00024834  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b4  20000000  08014838  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004a84  200000b4  080148ec  000300b4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004b38  080148ec  00034b38  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000300b4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000395cb  00000000  00000000  000300e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006dd9  00000000  00000000  000696af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002fb8  00000000  00000000  00070488  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002d20  00000000  00000000  00073440  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000098e0  00000000  00000000  00076160  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0003488e  00000000  00000000  0007fa40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00117ca3  00000000  00000000  000b42ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001cbf71  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000d950  00000000  00000000  001cbfc4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000b4 	.word	0x200000b4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08012b2c 	.word	0x08012b2c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000b8 	.word	0x200000b8
 80001cc:	08012b2c 	.word	0x08012b2c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000584:	b480      	push	{r7}
 8000586:	b083      	sub	sp, #12
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800058c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000590:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000594:	f003 0301 	and.w	r3, r3, #1
 8000598:	2b00      	cmp	r3, #0
 800059a:	d013      	beq.n	80005c4 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 800059c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005a0:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80005a4:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d00b      	beq.n	80005c4 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80005ac:	e000      	b.n	80005b0 <ITM_SendChar+0x2c>
    {
      __NOP();
 80005ae:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80005b0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d0f9      	beq.n	80005ae <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80005ba:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005be:	687a      	ldr	r2, [r7, #4]
 80005c0:	b2d2      	uxtb	r2, r2
 80005c2:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80005c4:	687b      	ldr	r3, [r7, #4]
}
 80005c6:	4618      	mov	r0, r3
 80005c8:	370c      	adds	r7, #12
 80005ca:	46bd      	mov	sp, r7
 80005cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d0:	4770      	bx	lr
	...

080005d4 <configureTimerForRunTimeStats>:
void sendMQTT_func(void *argument);
void wifiStartTask_func(void *argument);

/* USER CODE BEGIN PFP */
volatile unsigned long ulHighFrequencyTimerTicks;
void configureTimerForRunTimeStats(void) {
 80005d4:	b580      	push	{r7, lr}
 80005d6:	af00      	add	r7, sp, #0
	ulHighFrequencyTimerTicks = 0;
 80005d8:	4b03      	ldr	r3, [pc, #12]	; (80005e8 <configureTimerForRunTimeStats+0x14>)
 80005da:	2200      	movs	r2, #0
 80005dc:	601a      	str	r2, [r3, #0]
	HAL_TIM_Base_Start_IT(&htim7);
 80005de:	4803      	ldr	r0, [pc, #12]	; (80005ec <configureTimerForRunTimeStats+0x18>)
 80005e0:	f007 f84c 	bl	800767c <HAL_TIM_Base_Start_IT>
}
 80005e4:	bf00      	nop
 80005e6:	bd80      	pop	{r7, pc}
 80005e8:	200007c0 	.word	0x200007c0
 80005ec:	20000220 	.word	0x20000220

080005f0 <getRunTimeCounterValue>:
unsigned long getRunTimeCounterValue(void) {
 80005f0:	b480      	push	{r7}
 80005f2:	af00      	add	r7, sp, #0
	return ulHighFrequencyTimerTicks;
 80005f4:	4b03      	ldr	r3, [pc, #12]	; (8000604 <getRunTimeCounterValue+0x14>)
 80005f6:	681b      	ldr	r3, [r3, #0]

}
 80005f8:	4618      	mov	r0, r3
 80005fa:	46bd      	mov	sp, r7
 80005fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000600:	4770      	bx	lr
 8000602:	bf00      	nop
 8000604:	200007c0 	.word	0x200007c0

08000608 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800060c:	f002 f8a1 	bl	8002752 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000610:	f000 f8ae 	bl	8000770 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000614:	f000 fb0a 	bl	8000c2c <MX_GPIO_Init>
  MX_DFSDM1_Init();
 8000618:	f000 f90e 	bl	8000838 <MX_DFSDM1_Init>
  MX_I2C2_Init();
 800061c:	f000 f944 	bl	80008a8 <MX_I2C2_Init>
  MX_QUADSPI_Init();
 8000620:	f000 f980 	bl	8000924 <MX_QUADSPI_Init>
  MX_SPI3_Init();
 8000624:	f000 fa00 	bl	8000a28 <MX_SPI3_Init>
  MX_USART1_UART_Init();
 8000628:	f000 fa72 	bl	8000b10 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 800062c:	f000 faa0 	bl	8000b70 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000630:	f000 face 	bl	8000bd0 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM7_Init();
 8000634:	f000 fa36 	bl	8000aa4 <MX_TIM7_Init>
  MX_RTC_Init();
 8000638:	f000 f99a 	bl	8000970 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  status_acc = BSP_ACCELERO_Init_INT();
 800063c:	f000 fcb4 	bl	8000fa8 <BSP_ACCELERO_Init_INT>
 8000640:	4603      	mov	r3, r0
 8000642:	461a      	mov	r2, r3
 8000644:	4b2d      	ldr	r3, [pc, #180]	; (80006fc <main+0xf4>)
 8000646:	701a      	strb	r2, [r3, #0]
  if (status_acc == ACCELERO_OK){
 8000648:	4b2c      	ldr	r3, [pc, #176]	; (80006fc <main+0xf4>)
 800064a:	781b      	ldrb	r3, [r3, #0]
 800064c:	2b00      	cmp	r3, #0
 800064e:	d102      	bne.n	8000656 <main+0x4e>
	  printf("Acelerometro inicializado\r\n");
 8000650:	482b      	ldr	r0, [pc, #172]	; (8000700 <main+0xf8>)
 8000652:	f011 fc3f 	bl	8011ed4 <puts>
  }

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000656:	f00d fac3 	bl	800dbe0 <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of print_queue */
  print_queueHandle = osMessageQueueNew (10, sizeof(uintptr_t), &print_queue_attributes);
 800065a:	4a2a      	ldr	r2, [pc, #168]	; (8000704 <main+0xfc>)
 800065c:	2104      	movs	r1, #4
 800065e:	200a      	movs	r0, #10
 8000660:	f00d fcb2 	bl	800dfc8 <osMessageQueueNew>
 8000664:	4603      	mov	r3, r0
 8000666:	4a28      	ldr	r2, [pc, #160]	; (8000708 <main+0x100>)
 8000668:	6013      	str	r3, [r2, #0]

  /* creation of receive_queue */
  receive_queueHandle = osMessageQueueNew (3, sizeof(uint8_t), &receive_queue_attributes);
 800066a:	4a28      	ldr	r2, [pc, #160]	; (800070c <main+0x104>)
 800066c:	2101      	movs	r1, #1
 800066e:	2003      	movs	r0, #3
 8000670:	f00d fcaa 	bl	800dfc8 <osMessageQueueNew>
 8000674:	4603      	mov	r3, r0
 8000676:	4a26      	ldr	r2, [pc, #152]	; (8000710 <main+0x108>)
 8000678:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of RTC_set */
  RTC_setHandle = osThreadNew(RTC_set_func, NULL, &RTC_set_attributes);
 800067a:	4a26      	ldr	r2, [pc, #152]	; (8000714 <main+0x10c>)
 800067c:	2100      	movs	r1, #0
 800067e:	4826      	ldr	r0, [pc, #152]	; (8000718 <main+0x110>)
 8000680:	f00d faf8 	bl	800dc74 <osThreadNew>
 8000684:	4603      	mov	r3, r0
 8000686:	4a25      	ldr	r2, [pc, #148]	; (800071c <main+0x114>)
 8000688:	6013      	str	r3, [r2, #0]

  /* creation of readAccel */
  readAccelHandle = osThreadNew(readAccel_func, NULL, &readAccel_attributes);
 800068a:	4a25      	ldr	r2, [pc, #148]	; (8000720 <main+0x118>)
 800068c:	2100      	movs	r1, #0
 800068e:	4825      	ldr	r0, [pc, #148]	; (8000724 <main+0x11c>)
 8000690:	f00d faf0 	bl	800dc74 <osThreadNew>
 8000694:	4603      	mov	r3, r0
 8000696:	4a24      	ldr	r2, [pc, #144]	; (8000728 <main+0x120>)
 8000698:	6013      	str	r3, [r2, #0]

  /* creation of printTask */
  printTaskHandle = osThreadNew(printTask_func, NULL, &printTask_attributes);
 800069a:	4a24      	ldr	r2, [pc, #144]	; (800072c <main+0x124>)
 800069c:	2100      	movs	r1, #0
 800069e:	4824      	ldr	r0, [pc, #144]	; (8000730 <main+0x128>)
 80006a0:	f00d fae8 	bl	800dc74 <osThreadNew>
 80006a4:	4603      	mov	r3, r0
 80006a6:	4a23      	ldr	r2, [pc, #140]	; (8000734 <main+0x12c>)
 80006a8:	6013      	str	r3, [r2, #0]

  /* creation of tarea_UART */
  tarea_UARTHandle = osThreadNew(tarea_UART_func, NULL, &tarea_UART_attributes);
 80006aa:	4a23      	ldr	r2, [pc, #140]	; (8000738 <main+0x130>)
 80006ac:	2100      	movs	r1, #0
 80006ae:	4823      	ldr	r0, [pc, #140]	; (800073c <main+0x134>)
 80006b0:	f00d fae0 	bl	800dc74 <osThreadNew>
 80006b4:	4603      	mov	r3, r0
 80006b6:	4a22      	ldr	r2, [pc, #136]	; (8000740 <main+0x138>)
 80006b8:	6013      	str	r3, [r2, #0]

  /* creation of temporizador */
  temporizadorHandle = osThreadNew(temporizador_func, NULL, &temporizador_attributes);
 80006ba:	4a22      	ldr	r2, [pc, #136]	; (8000744 <main+0x13c>)
 80006bc:	2100      	movs	r1, #0
 80006be:	4822      	ldr	r0, [pc, #136]	; (8000748 <main+0x140>)
 80006c0:	f00d fad8 	bl	800dc74 <osThreadNew>
 80006c4:	4603      	mov	r3, r0
 80006c6:	4a21      	ldr	r2, [pc, #132]	; (800074c <main+0x144>)
 80006c8:	6013      	str	r3, [r2, #0]

  /* creation of sendMQTT */
  sendMQTTHandle = osThreadNew(sendMQTT_func, NULL, &sendMQTT_attributes);
 80006ca:	4a21      	ldr	r2, [pc, #132]	; (8000750 <main+0x148>)
 80006cc:	2100      	movs	r1, #0
 80006ce:	4821      	ldr	r0, [pc, #132]	; (8000754 <main+0x14c>)
 80006d0:	f00d fad0 	bl	800dc74 <osThreadNew>
 80006d4:	4603      	mov	r3, r0
 80006d6:	4a20      	ldr	r2, [pc, #128]	; (8000758 <main+0x150>)
 80006d8:	6013      	str	r3, [r2, #0]

  /* creation of wifiStartTask */
  wifiStartTaskHandle = osThreadNew(wifiStartTask_func, NULL, &wifiStartTask_attributes);
 80006da:	4a20      	ldr	r2, [pc, #128]	; (800075c <main+0x154>)
 80006dc:	2100      	movs	r1, #0
 80006de:	4820      	ldr	r0, [pc, #128]	; (8000760 <main+0x158>)
 80006e0:	f00d fac8 	bl	800dc74 <osThreadNew>
 80006e4:	4603      	mov	r3, r0
 80006e6:	4a1f      	ldr	r2, [pc, #124]	; (8000764 <main+0x15c>)
 80006e8:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  HAL_UART_Receive_IT(&huart1,&rec_data,1);
 80006ea:	2201      	movs	r2, #1
 80006ec:	491e      	ldr	r1, [pc, #120]	; (8000768 <main+0x160>)
 80006ee:	481f      	ldr	r0, [pc, #124]	; (800076c <main+0x164>)
 80006f0:	f007 fb9e 	bl	8007e30 <HAL_UART_Receive_IT>
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80006f4:	f00d fa98 	bl	800dc28 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006f8:	e7fe      	b.n	80006f8 <main+0xf0>
 80006fa:	bf00      	nop
 80006fc:	200007b8 	.word	0x200007b8
 8000700:	08012c20 	.word	0x08012c20
 8000704:	0801446c 	.word	0x0801446c
 8000708:	20000798 	.word	0x20000798
 800070c:	08014484 	.word	0x08014484
 8000710:	2000079c 	.word	0x2000079c
 8000714:	08014370 	.word	0x08014370
 8000718:	08001209 	.word	0x08001209
 800071c:	2000077c 	.word	0x2000077c
 8000720:	08014394 	.word	0x08014394
 8000724:	08001521 	.word	0x08001521
 8000728:	20000780 	.word	0x20000780
 800072c:	080143b8 	.word	0x080143b8
 8000730:	080016fd 	.word	0x080016fd
 8000734:	20000784 	.word	0x20000784
 8000738:	080143dc 	.word	0x080143dc
 800073c:	08001765 	.word	0x08001765
 8000740:	20000788 	.word	0x20000788
 8000744:	08014400 	.word	0x08014400
 8000748:	080017b5 	.word	0x080017b5
 800074c:	2000078c 	.word	0x2000078c
 8000750:	08014424 	.word	0x08014424
 8000754:	080017f1 	.word	0x080017f1
 8000758:	20000790 	.word	0x20000790
 800075c:	08014448 	.word	0x08014448
 8000760:	0800195d 	.word	0x0800195d
 8000764:	20000794 	.word	0x20000794
 8000768:	200007c4 	.word	0x200007c4
 800076c:	2000026c 	.word	0x2000026c

08000770 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b096      	sub	sp, #88	; 0x58
 8000774:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000776:	f107 0314 	add.w	r3, r7, #20
 800077a:	2244      	movs	r2, #68	; 0x44
 800077c:	2100      	movs	r1, #0
 800077e:	4618      	mov	r0, r3
 8000780:	f010 ff97 	bl	80116b2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000784:	463b      	mov	r3, r7
 8000786:	2200      	movs	r2, #0
 8000788:	601a      	str	r2, [r3, #0]
 800078a:	605a      	str	r2, [r3, #4]
 800078c:	609a      	str	r2, [r3, #8]
 800078e:	60da      	str	r2, [r3, #12]
 8000790:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000792:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000796:	f003 fcc5 	bl	8004124 <HAL_PWREx_ControlVoltageScaling>
 800079a:	4603      	mov	r3, r0
 800079c:	2b00      	cmp	r3, #0
 800079e:	d001      	beq.n	80007a4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80007a0:	f001 f906 	bl	80019b0 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80007a4:	f003 fca0 	bl	80040e8 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80007a8:	4b22      	ldr	r3, [pc, #136]	; (8000834 <SystemClock_Config+0xc4>)
 80007aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80007ae:	4a21      	ldr	r2, [pc, #132]	; (8000834 <SystemClock_Config+0xc4>)
 80007b0:	f023 0318 	bic.w	r3, r3, #24
 80007b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_LSE
 80007b8:	231c      	movs	r3, #28
 80007ba:	617b      	str	r3, [r7, #20]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80007bc:	2301      	movs	r3, #1
 80007be:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80007c0:	2301      	movs	r3, #1
 80007c2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80007c4:	2301      	movs	r3, #1
 80007c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80007c8:	2300      	movs	r3, #0
 80007ca:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80007cc:	2360      	movs	r3, #96	; 0x60
 80007ce:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007d0:	2302      	movs	r3, #2
 80007d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80007d4:	2301      	movs	r3, #1
 80007d6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80007d8:	2301      	movs	r3, #1
 80007da:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 80007dc:	2328      	movs	r3, #40	; 0x28
 80007de:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80007e0:	2307      	movs	r3, #7
 80007e2:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80007e4:	2302      	movs	r3, #2
 80007e6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80007e8:	2302      	movs	r3, #2
 80007ea:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007ec:	f107 0314 	add.w	r3, r7, #20
 80007f0:	4618      	mov	r0, r3
 80007f2:	f003 fdb9 	bl	8004368 <HAL_RCC_OscConfig>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d001      	beq.n	8000800 <SystemClock_Config+0x90>
  {
    Error_Handler();
 80007fc:	f001 f8d8 	bl	80019b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000800:	230f      	movs	r3, #15
 8000802:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000804:	2303      	movs	r3, #3
 8000806:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000808:	2300      	movs	r3, #0
 800080a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800080c:	2300      	movs	r3, #0
 800080e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000810:	2300      	movs	r3, #0
 8000812:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000814:	463b      	mov	r3, r7
 8000816:	2104      	movs	r1, #4
 8000818:	4618      	mov	r0, r3
 800081a:	f004 f98d 	bl	8004b38 <HAL_RCC_ClockConfig>
 800081e:	4603      	mov	r3, r0
 8000820:	2b00      	cmp	r3, #0
 8000822:	d001      	beq.n	8000828 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8000824:	f001 f8c4 	bl	80019b0 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000828:	f004 fea8 	bl	800557c <HAL_RCCEx_EnableMSIPLLMode>
}
 800082c:	bf00      	nop
 800082e:	3758      	adds	r7, #88	; 0x58
 8000830:	46bd      	mov	sp, r7
 8000832:	bd80      	pop	{r7, pc}
 8000834:	40021000 	.word	0x40021000

08000838 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 800083c:	4b18      	ldr	r3, [pc, #96]	; (80008a0 <MX_DFSDM1_Init+0x68>)
 800083e:	4a19      	ldr	r2, [pc, #100]	; (80008a4 <MX_DFSDM1_Init+0x6c>)
 8000840:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 8000842:	4b17      	ldr	r3, [pc, #92]	; (80008a0 <MX_DFSDM1_Init+0x68>)
 8000844:	2201      	movs	r2, #1
 8000846:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8000848:	4b15      	ldr	r3, [pc, #84]	; (80008a0 <MX_DFSDM1_Init+0x68>)
 800084a:	2200      	movs	r2, #0
 800084c:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 800084e:	4b14      	ldr	r3, [pc, #80]	; (80008a0 <MX_DFSDM1_Init+0x68>)
 8000850:	2202      	movs	r2, #2
 8000852:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000854:	4b12      	ldr	r3, [pc, #72]	; (80008a0 <MX_DFSDM1_Init+0x68>)
 8000856:	2200      	movs	r2, #0
 8000858:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 800085a:	4b11      	ldr	r3, [pc, #68]	; (80008a0 <MX_DFSDM1_Init+0x68>)
 800085c:	2200      	movs	r2, #0
 800085e:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 8000860:	4b0f      	ldr	r3, [pc, #60]	; (80008a0 <MX_DFSDM1_Init+0x68>)
 8000862:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000866:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8000868:	4b0d      	ldr	r3, [pc, #52]	; (80008a0 <MX_DFSDM1_Init+0x68>)
 800086a:	2200      	movs	r2, #0
 800086c:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 800086e:	4b0c      	ldr	r3, [pc, #48]	; (80008a0 <MX_DFSDM1_Init+0x68>)
 8000870:	2204      	movs	r2, #4
 8000872:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000874:	4b0a      	ldr	r3, [pc, #40]	; (80008a0 <MX_DFSDM1_Init+0x68>)
 8000876:	2200      	movs	r2, #0
 8000878:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 800087a:	4b09      	ldr	r3, [pc, #36]	; (80008a0 <MX_DFSDM1_Init+0x68>)
 800087c:	2201      	movs	r2, #1
 800087e:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 8000880:	4b07      	ldr	r3, [pc, #28]	; (80008a0 <MX_DFSDM1_Init+0x68>)
 8000882:	2200      	movs	r2, #0
 8000884:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 8000886:	4b06      	ldr	r3, [pc, #24]	; (80008a0 <MX_DFSDM1_Init+0x68>)
 8000888:	2200      	movs	r2, #0
 800088a:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 800088c:	4804      	ldr	r0, [pc, #16]	; (80008a0 <MX_DFSDM1_Init+0x68>)
 800088e:	f002 f8d1 	bl	8002a34 <HAL_DFSDM_ChannelInit>
 8000892:	4603      	mov	r3, r0
 8000894:	2b00      	cmp	r3, #0
 8000896:	d001      	beq.n	800089c <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 8000898:	f001 f88a 	bl	80019b0 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 800089c:	bf00      	nop
 800089e:	bd80      	pop	{r7, pc}
 80008a0:	200000d0 	.word	0x200000d0
 80008a4:	40016020 	.word	0x40016020

080008a8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80008ac:	4b1b      	ldr	r3, [pc, #108]	; (800091c <MX_I2C2_Init+0x74>)
 80008ae:	4a1c      	ldr	r2, [pc, #112]	; (8000920 <MX_I2C2_Init+0x78>)
 80008b0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00000E14;
 80008b2:	4b1a      	ldr	r3, [pc, #104]	; (800091c <MX_I2C2_Init+0x74>)
 80008b4:	f640 6214 	movw	r2, #3604	; 0xe14
 80008b8:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80008ba:	4b18      	ldr	r3, [pc, #96]	; (800091c <MX_I2C2_Init+0x74>)
 80008bc:	2200      	movs	r2, #0
 80008be:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008c0:	4b16      	ldr	r3, [pc, #88]	; (800091c <MX_I2C2_Init+0x74>)
 80008c2:	2201      	movs	r2, #1
 80008c4:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008c6:	4b15      	ldr	r3, [pc, #84]	; (800091c <MX_I2C2_Init+0x74>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80008cc:	4b13      	ldr	r3, [pc, #76]	; (800091c <MX_I2C2_Init+0x74>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80008d2:	4b12      	ldr	r3, [pc, #72]	; (800091c <MX_I2C2_Init+0x74>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008d8:	4b10      	ldr	r3, [pc, #64]	; (800091c <MX_I2C2_Init+0x74>)
 80008da:	2200      	movs	r2, #0
 80008dc:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008de:	4b0f      	ldr	r3, [pc, #60]	; (800091c <MX_I2C2_Init+0x74>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80008e4:	480d      	ldr	r0, [pc, #52]	; (800091c <MX_I2C2_Init+0x74>)
 80008e6:	f002 fd17 	bl	8003318 <HAL_I2C_Init>
 80008ea:	4603      	mov	r3, r0
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d001      	beq.n	80008f4 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80008f0:	f001 f85e 	bl	80019b0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80008f4:	2100      	movs	r1, #0
 80008f6:	4809      	ldr	r0, [pc, #36]	; (800091c <MX_I2C2_Init+0x74>)
 80008f8:	f003 fa16 	bl	8003d28 <HAL_I2CEx_ConfigAnalogFilter>
 80008fc:	4603      	mov	r3, r0
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d001      	beq.n	8000906 <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 8000902:	f001 f855 	bl	80019b0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000906:	2100      	movs	r1, #0
 8000908:	4804      	ldr	r0, [pc, #16]	; (800091c <MX_I2C2_Init+0x74>)
 800090a:	f003 fa58 	bl	8003dbe <HAL_I2CEx_ConfigDigitalFilter>
 800090e:	4603      	mov	r3, r0
 8000910:	2b00      	cmp	r3, #0
 8000912:	d001      	beq.n	8000918 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8000914:	f001 f84c 	bl	80019b0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000918:	bf00      	nop
 800091a:	bd80      	pop	{r7, pc}
 800091c:	20000108 	.word	0x20000108
 8000920:	40005800 	.word	0x40005800

08000924 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8000928:	4b0f      	ldr	r3, [pc, #60]	; (8000968 <MX_QUADSPI_Init+0x44>)
 800092a:	4a10      	ldr	r2, [pc, #64]	; (800096c <MX_QUADSPI_Init+0x48>)
 800092c:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 2;
 800092e:	4b0e      	ldr	r3, [pc, #56]	; (8000968 <MX_QUADSPI_Init+0x44>)
 8000930:	2202      	movs	r2, #2
 8000932:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8000934:	4b0c      	ldr	r3, [pc, #48]	; (8000968 <MX_QUADSPI_Init+0x44>)
 8000936:	2204      	movs	r2, #4
 8000938:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 800093a:	4b0b      	ldr	r3, [pc, #44]	; (8000968 <MX_QUADSPI_Init+0x44>)
 800093c:	2210      	movs	r2, #16
 800093e:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 8000940:	4b09      	ldr	r3, [pc, #36]	; (8000968 <MX_QUADSPI_Init+0x44>)
 8000942:	2217      	movs	r2, #23
 8000944:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8000946:	4b08      	ldr	r3, [pc, #32]	; (8000968 <MX_QUADSPI_Init+0x44>)
 8000948:	2200      	movs	r2, #0
 800094a:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 800094c:	4b06      	ldr	r3, [pc, #24]	; (8000968 <MX_QUADSPI_Init+0x44>)
 800094e:	2200      	movs	r2, #0
 8000950:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000952:	4805      	ldr	r0, [pc, #20]	; (8000968 <MX_QUADSPI_Init+0x44>)
 8000954:	f003 fc4c 	bl	80041f0 <HAL_QSPI_Init>
 8000958:	4603      	mov	r3, r0
 800095a:	2b00      	cmp	r3, #0
 800095c:	d001      	beq.n	8000962 <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 800095e:	f001 f827 	bl	80019b0 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8000962:	bf00      	nop
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	20000154 	.word	0x20000154
 800096c:	a0001000 	.word	0xa0001000

08000970 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b086      	sub	sp, #24
 8000974:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000976:	1d3b      	adds	r3, r7, #4
 8000978:	2200      	movs	r2, #0
 800097a:	601a      	str	r2, [r3, #0]
 800097c:	605a      	str	r2, [r3, #4]
 800097e:	609a      	str	r2, [r3, #8]
 8000980:	60da      	str	r2, [r3, #12]
 8000982:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000984:	2300      	movs	r3, #0
 8000986:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000988:	4b25      	ldr	r3, [pc, #148]	; (8000a20 <MX_RTC_Init+0xb0>)
 800098a:	4a26      	ldr	r2, [pc, #152]	; (8000a24 <MX_RTC_Init+0xb4>)
 800098c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800098e:	4b24      	ldr	r3, [pc, #144]	; (8000a20 <MX_RTC_Init+0xb0>)
 8000990:	2200      	movs	r2, #0
 8000992:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000994:	4b22      	ldr	r3, [pc, #136]	; (8000a20 <MX_RTC_Init+0xb0>)
 8000996:	227f      	movs	r2, #127	; 0x7f
 8000998:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800099a:	4b21      	ldr	r3, [pc, #132]	; (8000a20 <MX_RTC_Init+0xb0>)
 800099c:	22ff      	movs	r2, #255	; 0xff
 800099e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80009a0:	4b1f      	ldr	r3, [pc, #124]	; (8000a20 <MX_RTC_Init+0xb0>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80009a6:	4b1e      	ldr	r3, [pc, #120]	; (8000a20 <MX_RTC_Init+0xb0>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80009ac:	4b1c      	ldr	r3, [pc, #112]	; (8000a20 <MX_RTC_Init+0xb0>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80009b2:	4b1b      	ldr	r3, [pc, #108]	; (8000a20 <MX_RTC_Init+0xb0>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80009b8:	4819      	ldr	r0, [pc, #100]	; (8000a20 <MX_RTC_Init+0xb0>)
 80009ba:	f004 ffc1 	bl	8005940 <HAL_RTC_Init>
 80009be:	4603      	mov	r3, r0
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d001      	beq.n	80009c8 <MX_RTC_Init+0x58>
  {
    Error_Handler();
 80009c4:	f000 fff4 	bl	80019b0 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 13;
 80009c8:	230d      	movs	r3, #13
 80009ca:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 1;
 80009cc:	2301      	movs	r3, #1
 80009ce:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0;
 80009d0:	2300      	movs	r3, #0
 80009d2:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80009d4:	2300      	movs	r3, #0
 80009d6:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80009d8:	2300      	movs	r3, #0
 80009da:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 80009dc:	1d3b      	adds	r3, r7, #4
 80009de:	2200      	movs	r2, #0
 80009e0:	4619      	mov	r1, r3
 80009e2:	480f      	ldr	r0, [pc, #60]	; (8000a20 <MX_RTC_Init+0xb0>)
 80009e4:	f005 f827 	bl	8005a36 <HAL_RTC_SetTime>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d001      	beq.n	80009f2 <MX_RTC_Init+0x82>
  {
    Error_Handler();
 80009ee:	f000 ffdf 	bl	80019b0 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80009f2:	2301      	movs	r3, #1
 80009f4:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 80009f6:	2301      	movs	r3, #1
 80009f8:	707b      	strb	r3, [r7, #1]
  sDate.Date = 1;
 80009fa:	2301      	movs	r3, #1
 80009fc:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0;
 80009fe:	2300      	movs	r3, #0
 8000a00:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8000a02:	463b      	mov	r3, r7
 8000a04:	2200      	movs	r2, #0
 8000a06:	4619      	mov	r1, r3
 8000a08:	4805      	ldr	r0, [pc, #20]	; (8000a20 <MX_RTC_Init+0xb0>)
 8000a0a:	f005 f90d 	bl	8005c28 <HAL_RTC_SetDate>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d001      	beq.n	8000a18 <MX_RTC_Init+0xa8>
  {
    Error_Handler();
 8000a14:	f000 ffcc 	bl	80019b0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000a18:	bf00      	nop
 8000a1a:	3718      	adds	r7, #24
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bd80      	pop	{r7, pc}
 8000a20:	20000198 	.word	0x20000198
 8000a24:	40002800 	.word	0x40002800

08000a28 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000a2c:	4b1b      	ldr	r3, [pc, #108]	; (8000a9c <MX_SPI3_Init+0x74>)
 8000a2e:	4a1c      	ldr	r2, [pc, #112]	; (8000aa0 <MX_SPI3_Init+0x78>)
 8000a30:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000a32:	4b1a      	ldr	r3, [pc, #104]	; (8000a9c <MX_SPI3_Init+0x74>)
 8000a34:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000a38:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000a3a:	4b18      	ldr	r3, [pc, #96]	; (8000a9c <MX_SPI3_Init+0x74>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8000a40:	4b16      	ldr	r3, [pc, #88]	; (8000a9c <MX_SPI3_Init+0x74>)
 8000a42:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000a46:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a48:	4b14      	ldr	r3, [pc, #80]	; (8000a9c <MX_SPI3_Init+0x74>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a4e:	4b13      	ldr	r3, [pc, #76]	; (8000a9c <MX_SPI3_Init+0x74>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000a54:	4b11      	ldr	r3, [pc, #68]	; (8000a9c <MX_SPI3_Init+0x74>)
 8000a56:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a5a:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000a5c:	4b0f      	ldr	r3, [pc, #60]	; (8000a9c <MX_SPI3_Init+0x74>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a62:	4b0e      	ldr	r3, [pc, #56]	; (8000a9c <MX_SPI3_Init+0x74>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a68:	4b0c      	ldr	r3, [pc, #48]	; (8000a9c <MX_SPI3_Init+0x74>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a6e:	4b0b      	ldr	r3, [pc, #44]	; (8000a9c <MX_SPI3_Init+0x74>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000a74:	4b09      	ldr	r3, [pc, #36]	; (8000a9c <MX_SPI3_Init+0x74>)
 8000a76:	2207      	movs	r2, #7
 8000a78:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000a7a:	4b08      	ldr	r3, [pc, #32]	; (8000a9c <MX_SPI3_Init+0x74>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000a80:	4b06      	ldr	r3, [pc, #24]	; (8000a9c <MX_SPI3_Init+0x74>)
 8000a82:	2208      	movs	r2, #8
 8000a84:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000a86:	4805      	ldr	r0, [pc, #20]	; (8000a9c <MX_SPI3_Init+0x74>)
 8000a88:	f005 fa74 	bl	8005f74 <HAL_SPI_Init>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d001      	beq.n	8000a96 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000a92:	f000 ff8d 	bl	80019b0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000a96:	bf00      	nop
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	200001bc 	.word	0x200001bc
 8000aa0:	40003c00 	.word	0x40003c00

08000aa4 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b084      	sub	sp, #16
 8000aa8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000aaa:	1d3b      	adds	r3, r7, #4
 8000aac:	2200      	movs	r2, #0
 8000aae:	601a      	str	r2, [r3, #0]
 8000ab0:	605a      	str	r2, [r3, #4]
 8000ab2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8000ab4:	4b14      	ldr	r3, [pc, #80]	; (8000b08 <MX_TIM7_Init+0x64>)
 8000ab6:	4a15      	ldr	r2, [pc, #84]	; (8000b0c <MX_TIM7_Init+0x68>)
 8000ab8:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 8000aba:	4b13      	ldr	r3, [pc, #76]	; (8000b08 <MX_TIM7_Init+0x64>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ac0:	4b11      	ldr	r3, [pc, #68]	; (8000b08 <MX_TIM7_Init+0x64>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 799;
 8000ac6:	4b10      	ldr	r3, [pc, #64]	; (8000b08 <MX_TIM7_Init+0x64>)
 8000ac8:	f240 321f 	movw	r2, #799	; 0x31f
 8000acc:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ace:	4b0e      	ldr	r3, [pc, #56]	; (8000b08 <MX_TIM7_Init+0x64>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000ad4:	480c      	ldr	r0, [pc, #48]	; (8000b08 <MX_TIM7_Init+0x64>)
 8000ad6:	f006 fd7a 	bl	80075ce <HAL_TIM_Base_Init>
 8000ada:	4603      	mov	r3, r0
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d001      	beq.n	8000ae4 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8000ae0:	f000 ff66 	bl	80019b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000aec:	1d3b      	adds	r3, r7, #4
 8000aee:	4619      	mov	r1, r3
 8000af0:	4805      	ldr	r0, [pc, #20]	; (8000b08 <MX_TIM7_Init+0x64>)
 8000af2:	f007 f815 	bl	8007b20 <HAL_TIMEx_MasterConfigSynchronization>
 8000af6:	4603      	mov	r3, r0
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d001      	beq.n	8000b00 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8000afc:	f000 ff58 	bl	80019b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8000b00:	bf00      	nop
 8000b02:	3710      	adds	r7, #16
 8000b04:	46bd      	mov	sp, r7
 8000b06:	bd80      	pop	{r7, pc}
 8000b08:	20000220 	.word	0x20000220
 8000b0c:	40001400 	.word	0x40001400

08000b10 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000b14:	4b14      	ldr	r3, [pc, #80]	; (8000b68 <MX_USART1_UART_Init+0x58>)
 8000b16:	4a15      	ldr	r2, [pc, #84]	; (8000b6c <MX_USART1_UART_Init+0x5c>)
 8000b18:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000b1a:	4b13      	ldr	r3, [pc, #76]	; (8000b68 <MX_USART1_UART_Init+0x58>)
 8000b1c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b20:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b22:	4b11      	ldr	r3, [pc, #68]	; (8000b68 <MX_USART1_UART_Init+0x58>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000b28:	4b0f      	ldr	r3, [pc, #60]	; (8000b68 <MX_USART1_UART_Init+0x58>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000b2e:	4b0e      	ldr	r3, [pc, #56]	; (8000b68 <MX_USART1_UART_Init+0x58>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000b34:	4b0c      	ldr	r3, [pc, #48]	; (8000b68 <MX_USART1_UART_Init+0x58>)
 8000b36:	220c      	movs	r2, #12
 8000b38:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b3a:	4b0b      	ldr	r3, [pc, #44]	; (8000b68 <MX_USART1_UART_Init+0x58>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b40:	4b09      	ldr	r3, [pc, #36]	; (8000b68 <MX_USART1_UART_Init+0x58>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b46:	4b08      	ldr	r3, [pc, #32]	; (8000b68 <MX_USART1_UART_Init+0x58>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b4c:	4b06      	ldr	r3, [pc, #24]	; (8000b68 <MX_USART1_UART_Init+0x58>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000b52:	4805      	ldr	r0, [pc, #20]	; (8000b68 <MX_USART1_UART_Init+0x58>)
 8000b54:	f007 f88a 	bl	8007c6c <HAL_UART_Init>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d001      	beq.n	8000b62 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000b5e:	f000 ff27 	bl	80019b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000b62:	bf00      	nop
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	2000026c 	.word	0x2000026c
 8000b6c:	40013800 	.word	0x40013800

08000b70 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000b74:	4b14      	ldr	r3, [pc, #80]	; (8000bc8 <MX_USART3_UART_Init+0x58>)
 8000b76:	4a15      	ldr	r2, [pc, #84]	; (8000bcc <MX_USART3_UART_Init+0x5c>)
 8000b78:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000b7a:	4b13      	ldr	r3, [pc, #76]	; (8000bc8 <MX_USART3_UART_Init+0x58>)
 8000b7c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b80:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000b82:	4b11      	ldr	r3, [pc, #68]	; (8000bc8 <MX_USART3_UART_Init+0x58>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000b88:	4b0f      	ldr	r3, [pc, #60]	; (8000bc8 <MX_USART3_UART_Init+0x58>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000b8e:	4b0e      	ldr	r3, [pc, #56]	; (8000bc8 <MX_USART3_UART_Init+0x58>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000b94:	4b0c      	ldr	r3, [pc, #48]	; (8000bc8 <MX_USART3_UART_Init+0x58>)
 8000b96:	220c      	movs	r2, #12
 8000b98:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b9a:	4b0b      	ldr	r3, [pc, #44]	; (8000bc8 <MX_USART3_UART_Init+0x58>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ba0:	4b09      	ldr	r3, [pc, #36]	; (8000bc8 <MX_USART3_UART_Init+0x58>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ba6:	4b08      	ldr	r3, [pc, #32]	; (8000bc8 <MX_USART3_UART_Init+0x58>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000bac:	4b06      	ldr	r3, [pc, #24]	; (8000bc8 <MX_USART3_UART_Init+0x58>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000bb2:	4805      	ldr	r0, [pc, #20]	; (8000bc8 <MX_USART3_UART_Init+0x58>)
 8000bb4:	f007 f85a 	bl	8007c6c <HAL_UART_Init>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d001      	beq.n	8000bc2 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000bbe:	f000 fef7 	bl	80019b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000bc2:	bf00      	nop
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	200002f0 	.word	0x200002f0
 8000bcc:	40004800 	.word	0x40004800

08000bd0 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000bd4:	4b14      	ldr	r3, [pc, #80]	; (8000c28 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000bd6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000bda:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000bdc:	4b12      	ldr	r3, [pc, #72]	; (8000c28 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000bde:	2206      	movs	r2, #6
 8000be0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000be2:	4b11      	ldr	r3, [pc, #68]	; (8000c28 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000be4:	2202      	movs	r2, #2
 8000be6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000be8:	4b0f      	ldr	r3, [pc, #60]	; (8000c28 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000bea:	2202      	movs	r2, #2
 8000bec:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000bee:	4b0e      	ldr	r3, [pc, #56]	; (8000c28 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000bf4:	4b0c      	ldr	r3, [pc, #48]	; (8000c28 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000bfa:	4b0b      	ldr	r3, [pc, #44]	; (8000c28 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8000c00:	4b09      	ldr	r3, [pc, #36]	; (8000c28 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000c06:	4b08      	ldr	r3, [pc, #32]	; (8000c28 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8000c0c:	4b06      	ldr	r3, [pc, #24]	; (8000c28 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000c12:	4805      	ldr	r0, [pc, #20]	; (8000c28 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c14:	f003 f91f 	bl	8003e56 <HAL_PCD_Init>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d001      	beq.n	8000c22 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000c1e:	f000 fec7 	bl	80019b0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000c22:	bf00      	nop
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	20000374 	.word	0x20000374

08000c2c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b08a      	sub	sp, #40	; 0x28
 8000c30:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c32:	f107 0314 	add.w	r3, r7, #20
 8000c36:	2200      	movs	r2, #0
 8000c38:	601a      	str	r2, [r3, #0]
 8000c3a:	605a      	str	r2, [r3, #4]
 8000c3c:	609a      	str	r2, [r3, #8]
 8000c3e:	60da      	str	r2, [r3, #12]
 8000c40:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c42:	4bbb      	ldr	r3, [pc, #748]	; (8000f30 <MX_GPIO_Init+0x304>)
 8000c44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c46:	4aba      	ldr	r2, [pc, #744]	; (8000f30 <MX_GPIO_Init+0x304>)
 8000c48:	f043 0310 	orr.w	r3, r3, #16
 8000c4c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c4e:	4bb8      	ldr	r3, [pc, #736]	; (8000f30 <MX_GPIO_Init+0x304>)
 8000c50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c52:	f003 0310 	and.w	r3, r3, #16
 8000c56:	613b      	str	r3, [r7, #16]
 8000c58:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c5a:	4bb5      	ldr	r3, [pc, #724]	; (8000f30 <MX_GPIO_Init+0x304>)
 8000c5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c5e:	4ab4      	ldr	r2, [pc, #720]	; (8000f30 <MX_GPIO_Init+0x304>)
 8000c60:	f043 0304 	orr.w	r3, r3, #4
 8000c64:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c66:	4bb2      	ldr	r3, [pc, #712]	; (8000f30 <MX_GPIO_Init+0x304>)
 8000c68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c6a:	f003 0304 	and.w	r3, r3, #4
 8000c6e:	60fb      	str	r3, [r7, #12]
 8000c70:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c72:	4baf      	ldr	r3, [pc, #700]	; (8000f30 <MX_GPIO_Init+0x304>)
 8000c74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c76:	4aae      	ldr	r2, [pc, #696]	; (8000f30 <MX_GPIO_Init+0x304>)
 8000c78:	f043 0301 	orr.w	r3, r3, #1
 8000c7c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c7e:	4bac      	ldr	r3, [pc, #688]	; (8000f30 <MX_GPIO_Init+0x304>)
 8000c80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c82:	f003 0301 	and.w	r3, r3, #1
 8000c86:	60bb      	str	r3, [r7, #8]
 8000c88:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c8a:	4ba9      	ldr	r3, [pc, #676]	; (8000f30 <MX_GPIO_Init+0x304>)
 8000c8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c8e:	4aa8      	ldr	r2, [pc, #672]	; (8000f30 <MX_GPIO_Init+0x304>)
 8000c90:	f043 0302 	orr.w	r3, r3, #2
 8000c94:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c96:	4ba6      	ldr	r3, [pc, #664]	; (8000f30 <MX_GPIO_Init+0x304>)
 8000c98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c9a:	f003 0302 	and.w	r3, r3, #2
 8000c9e:	607b      	str	r3, [r7, #4]
 8000ca0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ca2:	4ba3      	ldr	r3, [pc, #652]	; (8000f30 <MX_GPIO_Init+0x304>)
 8000ca4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ca6:	4aa2      	ldr	r2, [pc, #648]	; (8000f30 <MX_GPIO_Init+0x304>)
 8000ca8:	f043 0308 	orr.w	r3, r3, #8
 8000cac:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cae:	4ba0      	ldr	r3, [pc, #640]	; (8000f30 <MX_GPIO_Init+0x304>)
 8000cb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cb2:	f003 0308 	and.w	r3, r3, #8
 8000cb6:	603b      	str	r3, [r7, #0]
 8000cb8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 8000cba:	2200      	movs	r2, #0
 8000cbc:	f44f 718a 	mov.w	r1, #276	; 0x114
 8000cc0:	489c      	ldr	r0, [pc, #624]	; (8000f34 <MX_GPIO_Init+0x308>)
 8000cc2:	f002 faf9 	bl	80032b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|LED1_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	f248 1124 	movw	r1, #33060	; 0x8124
 8000ccc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cd0:	f002 faf2 	bl	80032b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	f24f 0114 	movw	r1, #61460	; 0xf014
 8000cda:	4897      	ldr	r0, [pc, #604]	; (8000f38 <MX_GPIO_Init+0x30c>)
 8000cdc:	f002 faec 	bl	80032b8 <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	f241 0181 	movw	r1, #4225	; 0x1081
 8000ce6:	4895      	ldr	r0, [pc, #596]	; (8000f3c <MX_GPIO_Init+0x310>)
 8000ce8:	f002 fae6 	bl	80032b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000cec:	2201      	movs	r2, #1
 8000cee:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000cf2:	4892      	ldr	r0, [pc, #584]	; (8000f3c <MX_GPIO_Init+0x310>)
 8000cf4:	f002 fae0 	bl	80032b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	f44f 7110 	mov.w	r1, #576	; 0x240
 8000cfe:	4890      	ldr	r0, [pc, #576]	; (8000f40 <MX_GPIO_Init+0x314>)
 8000d00:	f002 fada 	bl	80032b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000d04:	2201      	movs	r2, #1
 8000d06:	2101      	movs	r1, #1
 8000d08:	488a      	ldr	r0, [pc, #552]	; (8000f34 <MX_GPIO_Init+0x308>)
 8000d0a:	f002 fad5 	bl	80032b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8000d0e:	f240 1315 	movw	r3, #277	; 0x115
 8000d12:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d14:	2301      	movs	r3, #1
 8000d16:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d20:	f107 0314 	add.w	r3, r7, #20
 8000d24:	4619      	mov	r1, r3
 8000d26:	4883      	ldr	r0, [pc, #524]	; (8000f34 <MX_GPIO_Init+0x308>)
 8000d28:	f002 f810 	bl	8002d4c <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 8000d2c:	236a      	movs	r3, #106	; 0x6a
 8000d2e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d30:	4b84      	ldr	r3, [pc, #528]	; (8000f44 <MX_GPIO_Init+0x318>)
 8000d32:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d34:	2300      	movs	r3, #0
 8000d36:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d38:	f107 0314 	add.w	r3, r7, #20
 8000d3c:	4619      	mov	r1, r3
 8000d3e:	487d      	ldr	r0, [pc, #500]	; (8000f34 <MX_GPIO_Init+0x308>)
 8000d40:	f002 f804 	bl	8002d4c <HAL_GPIO_Init>

  /*Configure GPIO pins : BOTON_Pin VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = BOTON_Pin|VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8000d44:	f44f 5306 	mov.w	r3, #8576	; 0x2180
 8000d48:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d4a:	4b7e      	ldr	r3, [pc, #504]	; (8000f44 <MX_GPIO_Init+0x318>)
 8000d4c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d52:	f107 0314 	add.w	r3, r7, #20
 8000d56:	4619      	mov	r1, r3
 8000d58:	4879      	ldr	r0, [pc, #484]	; (8000f40 <MX_GPIO_Init+0x314>)
 8000d5a:	f001 fff7 	bl	8002d4c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 8000d5e:	233f      	movs	r3, #63	; 0x3f
 8000d60:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000d62:	230b      	movs	r3, #11
 8000d64:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d66:	2300      	movs	r3, #0
 8000d68:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d6a:	f107 0314 	add.w	r3, r7, #20
 8000d6e:	4619      	mov	r1, r3
 8000d70:	4873      	ldr	r0, [pc, #460]	; (8000f40 <MX_GPIO_Init+0x314>)
 8000d72:	f001 ffeb 	bl	8002d4c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8000d76:	2303      	movs	r3, #3
 8000d78:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d7a:	2302      	movs	r3, #2
 8000d7c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d82:	2303      	movs	r3, #3
 8000d84:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000d86:	2308      	movs	r3, #8
 8000d88:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d8a:	f107 0314 	add.w	r3, r7, #20
 8000d8e:	4619      	mov	r1, r3
 8000d90:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d94:	f001 ffda 	bl	8002d4c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin LED1_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|LED1_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 8000d98:	f248 1324 	movw	r3, #33060	; 0x8124
 8000d9c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d9e:	2301      	movs	r3, #1
 8000da0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da2:	2300      	movs	r3, #0
 8000da4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000da6:	2300      	movs	r3, #0
 8000da8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000daa:	f107 0314 	add.w	r3, r7, #20
 8000dae:	4619      	mov	r1, r3
 8000db0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000db4:	f001 ffca 	bl	8002d4c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 8000db8:	2308      	movs	r3, #8
 8000dba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dbc:	2302      	movs	r3, #2
 8000dbe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000dc8:	2301      	movs	r3, #1
 8000dca:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 8000dcc:	f107 0314 	add.w	r3, r7, #20
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dd6:	f001 ffb9 	bl	8002d4c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D7_Pin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 8000dda:	2310      	movs	r3, #16
 8000ddc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000dde:	230b      	movs	r3, #11
 8000de0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de2:	2300      	movs	r3, #0
 8000de4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 8000de6:	f107 0314 	add.w	r3, r7, #20
 8000dea:	4619      	mov	r1, r3
 8000dec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000df0:	f001 ffac 	bl	8002d4c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D12_Pin|ARD_D11_Pin;
 8000df4:	23c0      	movs	r3, #192	; 0xc0
 8000df6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000df8:	2302      	movs	r3, #2
 8000dfa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e00:	2303      	movs	r3, #3
 8000e02:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000e04:	2305      	movs	r3, #5
 8000e06:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e08:	f107 0314 	add.w	r3, r7, #20
 8000e0c:	4619      	mov	r1, r3
 8000e0e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e12:	f001 ff9b 	bl	8002d4c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8000e16:	2301      	movs	r3, #1
 8000e18:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e1a:	4b4a      	ldr	r3, [pc, #296]	; (8000f44 <MX_GPIO_Init+0x318>)
 8000e1c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8000e22:	f107 0314 	add.w	r3, r7, #20
 8000e26:	4619      	mov	r1, r3
 8000e28:	4843      	ldr	r0, [pc, #268]	; (8000f38 <MX_GPIO_Init+0x30c>)
 8000e2a:	f001 ff8f 	bl	8002d4c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8000e2e:	2302      	movs	r3, #2
 8000e30:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000e32:	230b      	movs	r3, #11
 8000e34:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e36:	2300      	movs	r3, #0
 8000e38:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8000e3a:	f107 0314 	add.w	r3, r7, #20
 8000e3e:	4619      	mov	r1, r3
 8000e40:	483d      	ldr	r0, [pc, #244]	; (8000f38 <MX_GPIO_Init+0x30c>)
 8000e42:	f001 ff83 	bl	8002d4c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000e46:	f24f 0314 	movw	r3, #61460	; 0xf014
 8000e4a:	617b      	str	r3, [r7, #20]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e4c:	2301      	movs	r3, #1
 8000e4e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e50:	2300      	movs	r3, #0
 8000e52:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e54:	2300      	movs	r3, #0
 8000e56:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e58:	f107 0314 	add.w	r3, r7, #20
 8000e5c:	4619      	mov	r1, r3
 8000e5e:	4836      	ldr	r0, [pc, #216]	; (8000f38 <MX_GPIO_Init+0x30c>)
 8000e60:	f001 ff74 	bl	8002d4c <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 8000e64:	f64c 4304 	movw	r3, #52228	; 0xcc04
 8000e68:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e6a:	4b36      	ldr	r3, [pc, #216]	; (8000f44 <MX_GPIO_Init+0x318>)
 8000e6c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e72:	f107 0314 	add.w	r3, r7, #20
 8000e76:	4619      	mov	r1, r3
 8000e78:	4830      	ldr	r0, [pc, #192]	; (8000f3c <MX_GPIO_Init+0x310>)
 8000e7a:	f001 ff67 	bl	8002d4c <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 8000e7e:	f243 0381 	movw	r3, #12417	; 0x3081
 8000e82:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e84:	2301      	movs	r3, #1
 8000e86:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e90:	f107 0314 	add.w	r3, r7, #20
 8000e94:	4619      	mov	r1, r3
 8000e96:	4829      	ldr	r0, [pc, #164]	; (8000f3c <MX_GPIO_Init+0x310>)
 8000e98:	f001 ff58 	bl	8002d4c <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8000e9c:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000ea0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ea2:	2301      	movs	r3, #1
 8000ea4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000eae:	f107 0314 	add.w	r3, r7, #20
 8000eb2:	4619      	mov	r1, r3
 8000eb4:	4822      	ldr	r0, [pc, #136]	; (8000f40 <MX_GPIO_Init+0x314>)
 8000eb6:	f001 ff49 	bl	8002d4c <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 8000eba:	2302      	movs	r3, #2
 8000ebc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ebe:	2302      	movs	r3, #2
 8000ec0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ec6:	2303      	movs	r3, #3
 8000ec8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000eca:	2305      	movs	r3, #5
 8000ecc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8000ece:	f107 0314 	add.w	r3, r7, #20
 8000ed2:	4619      	mov	r1, r3
 8000ed4:	4819      	ldr	r0, [pc, #100]	; (8000f3c <MX_GPIO_Init+0x310>)
 8000ed6:	f001 ff39 	bl	8002d4c <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8000eda:	2378      	movs	r3, #120	; 0x78
 8000edc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ede:	2302      	movs	r3, #2
 8000ee0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ee6:	2303      	movs	r3, #3
 8000ee8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000eea:	2307      	movs	r3, #7
 8000eec:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000eee:	f107 0314 	add.w	r3, r7, #20
 8000ef2:	4619      	mov	r1, r3
 8000ef4:	4811      	ldr	r0, [pc, #68]	; (8000f3c <MX_GPIO_Init+0x310>)
 8000ef6:	f001 ff29 	bl	8002d4c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8000efa:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000efe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f00:	2312      	movs	r3, #18
 8000f02:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f04:	2300      	movs	r3, #0
 8000f06:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f08:	2303      	movs	r3, #3
 8000f0a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000f0c:	2304      	movs	r3, #4
 8000f0e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f10:	f107 0314 	add.w	r3, r7, #20
 8000f14:	4619      	mov	r1, r3
 8000f16:	4808      	ldr	r0, [pc, #32]	; (8000f38 <MX_GPIO_Init+0x30c>)
 8000f18:	f001 ff18 	bl	8002d4c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	2105      	movs	r1, #5
 8000f20:	2007      	movs	r0, #7
 8000f22:	f001 fd4f 	bl	80029c4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000f26:	2007      	movs	r0, #7
 8000f28:	f001 fd68 	bl	80029fc <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	e00b      	b.n	8000f48 <MX_GPIO_Init+0x31c>
 8000f30:	40021000 	.word	0x40021000
 8000f34:	48001000 	.word	0x48001000
 8000f38:	48000400 	.word	0x48000400
 8000f3c:	48000c00 	.word	0x48000c00
 8000f40:	48000800 	.word	0x48000800
 8000f44:	10110000 	.word	0x10110000
 8000f48:	2105      	movs	r1, #5
 8000f4a:	2017      	movs	r0, #23
 8000f4c:	f001 fd3a 	bl	80029c4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000f50:	2017      	movs	r0, #23
 8000f52:	f001 fd53 	bl	80029fc <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000f56:	2200      	movs	r2, #0
 8000f58:	2105      	movs	r1, #5
 8000f5a:	2028      	movs	r0, #40	; 0x28
 8000f5c:	f001 fd32 	bl	80029c4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000f60:	2028      	movs	r0, #40	; 0x28
 8000f62:	f001 fd4b 	bl	80029fc <HAL_NVIC_EnableIRQ>

}
 8000f66:	bf00      	nop
 8000f68:	3728      	adds	r7, #40	; 0x28
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop

08000f70 <_write>:

/* USER CODE BEGIN 4 */

int _write(int file, char *ptr, int len)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b086      	sub	sp, #24
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	60f8      	str	r0, [r7, #12]
 8000f78:	60b9      	str	r1, [r7, #8]
 8000f7a:	607a      	str	r2, [r7, #4]
	int DataIdx;
	for(DataIdx=0; DataIdx<len; DataIdx++)
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	617b      	str	r3, [r7, #20]
 8000f80:	e009      	b.n	8000f96 <_write+0x26>
	{
		ITM_SendChar(*ptr++);
 8000f82:	68bb      	ldr	r3, [r7, #8]
 8000f84:	1c5a      	adds	r2, r3, #1
 8000f86:	60ba      	str	r2, [r7, #8]
 8000f88:	781b      	ldrb	r3, [r3, #0]
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f7ff fafa 	bl	8000584 <ITM_SendChar>
	for(DataIdx=0; DataIdx<len; DataIdx++)
 8000f90:	697b      	ldr	r3, [r7, #20]
 8000f92:	3301      	adds	r3, #1
 8000f94:	617b      	str	r3, [r7, #20]
 8000f96:	697a      	ldr	r2, [r7, #20]
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	429a      	cmp	r2, r3
 8000f9c:	dbf1      	blt.n	8000f82 <_write+0x12>
	}
	return len;
 8000f9e:	687b      	ldr	r3, [r7, #4]
}
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	3718      	adds	r7, #24
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}

08000fa8 <BSP_ACCELERO_Init_INT>:

ACCELERO_StatusTypeDef BSP_ACCELERO_Init_INT(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b082      	sub	sp, #8
 8000fac:	af00      	add	r7, sp, #0
	ACCELERO_StatusTypeDef ret;
	ret = BSP_ACCELERO_Init();
 8000fae:	f008 fb75 	bl	800969c <BSP_ACCELERO_Init>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	71fb      	strb	r3, [r7, #7]
	if (ret == ACCELERO_OK)
 8000fb6:	79fb      	ldrb	r3, [r7, #7]
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d12f      	bne.n	800101c <BSP_ACCELERO_Init_INT+0x74>
	{
		/* Initialize interruption*/
		uint8_t tmp;
		tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_DRDY_PULSE_CFG_G);
 8000fbc:	210b      	movs	r1, #11
 8000fbe:	20d4      	movs	r0, #212	; 0xd4
 8000fc0:	f008 fb30 	bl	8009624 <SENSOR_IO_Read>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	71bb      	strb	r3, [r7, #6]
		tmp |=0b10000000;
 8000fc8:	79bb      	ldrb	r3, [r7, #6]
 8000fca:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000fce:	71bb      	strb	r3, [r7, #6]
		SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_DRDY_PULSE_CFG_G, tmp);
 8000fd0:	79bb      	ldrb	r3, [r7, #6]
 8000fd2:	461a      	mov	r2, r3
 8000fd4:	210b      	movs	r1, #11
 8000fd6:	20d4      	movs	r0, #212	; 0xd4
 8000fd8:	f008 fb0a 	bl	80095f0 <SENSOR_IO_Write>
		tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_INT1_CTRL);
 8000fdc:	210d      	movs	r1, #13
 8000fde:	20d4      	movs	r0, #212	; 0xd4
 8000fe0:	f008 fb20 	bl	8009624 <SENSOR_IO_Read>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	71bb      	strb	r3, [r7, #6]
		tmp |=0b00000001;
 8000fe8:	79bb      	ldrb	r3, [r7, #6]
 8000fea:	f043 0301 	orr.w	r3, r3, #1
 8000fee:	71bb      	strb	r3, [r7, #6]
		SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_INT1_CTRL, tmp);
 8000ff0:	79bb      	ldrb	r3, [r7, #6]
 8000ff2:	461a      	mov	r2, r3
 8000ff4:	210d      	movs	r1, #13
 8000ff6:	20d4      	movs	r0, #212	; 0xd4
 8000ff8:	f008 fafa 	bl	80095f0 <SENSOR_IO_Write>
		tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_MASTER_CONFIG);
 8000ffc:	211a      	movs	r1, #26
 8000ffe:	20d4      	movs	r0, #212	; 0xd4
 8001000:	f008 fb10 	bl	8009624 <SENSOR_IO_Read>
 8001004:	4603      	mov	r3, r0
 8001006:	71bb      	strb	r3, [r7, #6]
		tmp |=0b10000000;
 8001008:	79bb      	ldrb	r3, [r7, #6]
 800100a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800100e:	71bb      	strb	r3, [r7, #6]
		SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_MASTER_CONFIG, tmp);
 8001010:	79bb      	ldrb	r3, [r7, #6]
 8001012:	461a      	mov	r2, r3
 8001014:	211a      	movs	r1, #26
 8001016:	20d4      	movs	r0, #212	; 0xd4
 8001018:	f008 faea 	bl	80095f0 <SENSOR_IO_Write>
	}
	return ret;
 800101c:	79fb      	ldrb	r3, [r7, #7]
}
 800101e:	4618      	mov	r0, r3
 8001020:	3708      	adds	r7, #8
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
	...

08001028 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b082      	sub	sp, #8
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]

	static osStatus_t estado;
	if (huart == &huart1)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	4a0c      	ldr	r2, [pc, #48]	; (8001064 <HAL_UART_RxCpltCallback+0x3c>)
 8001034:	4293      	cmp	r3, r2
 8001036:	d110      	bne.n	800105a <HAL_UART_RxCpltCallback+0x32>
	{
		HAL_UART_Receive_IT(&huart1,&rec_data,1);
 8001038:	2201      	movs	r2, #1
 800103a:	490b      	ldr	r1, [pc, #44]	; (8001068 <HAL_UART_RxCpltCallback+0x40>)
 800103c:	4809      	ldr	r0, [pc, #36]	; (8001064 <HAL_UART_RxCpltCallback+0x3c>)
 800103e:	f006 fef7 	bl	8007e30 <HAL_UART_Receive_IT>
		printf("Recibido: %d\r\n",rec_data);
 8001042:	4b09      	ldr	r3, [pc, #36]	; (8001068 <HAL_UART_RxCpltCallback+0x40>)
 8001044:	781b      	ldrb	r3, [r3, #0]
 8001046:	4619      	mov	r1, r3
 8001048:	4808      	ldr	r0, [pc, #32]	; (800106c <HAL_UART_RxCpltCallback+0x44>)
 800104a:	f010 febd 	bl	8011dc8 <iprintf>
		osThreadFlagsSet(tarea_UARTHandle,0x0002U);
 800104e:	4b08      	ldr	r3, [pc, #32]	; (8001070 <HAL_UART_RxCpltCallback+0x48>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	2102      	movs	r1, #2
 8001054:	4618      	mov	r0, r3
 8001056:	f00c fecd 	bl	800ddf4 <osThreadFlagsSet>
			printf("Estado: ok\r\n");
		else
			printf("Algo no va bien\r\n");
			*/
	}
}
 800105a:	bf00      	nop
 800105c:	3708      	adds	r7, #8
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	2000026c 	.word	0x2000026c
 8001068:	200007c4 	.word	0x200007c4
 800106c:	08012c3c 	.word	0x08012c3c
 8001070:	20000788 	.word	0x20000788

08001074 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b082      	sub	sp, #8
 8001078:	af00      	add	r7, sp, #0
 800107a:	4603      	mov	r3, r0
 800107c:	80fb      	strh	r3, [r7, #6]
	switch (GPIO_Pin)
 800107e:	88fb      	ldrh	r3, [r7, #6]
 8001080:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001084:	d00e      	beq.n	80010a4 <HAL_GPIO_EXTI_Callback+0x30>
 8001086:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800108a:	dc18      	bgt.n	80010be <HAL_GPIO_EXTI_Callback+0x4a>
 800108c:	2b02      	cmp	r3, #2
 800108e:	d013      	beq.n	80010b8 <HAL_GPIO_EXTI_Callback+0x44>
 8001090:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001094:	d113      	bne.n	80010be <HAL_GPIO_EXTI_Callback+0x4a>
	{
		case (LSM6DSL_INT1_EXTI11_Pin):
		{
			osThreadFlagsSet(readAccelHandle,0x0001U);
 8001096:	4b0c      	ldr	r3, [pc, #48]	; (80010c8 <HAL_GPIO_EXTI_Callback+0x54>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	2101      	movs	r1, #1
 800109c:	4618      	mov	r0, r3
 800109e:	f00c fea9 	bl	800ddf4 <osThreadFlagsSet>
			break;
 80010a2:	e00d      	b.n	80010c0 <HAL_GPIO_EXTI_Callback+0x4c>
		}
		case(BOTON_Pin):
		{
			printf("Ha pulsado el boton\r\n");
 80010a4:	4809      	ldr	r0, [pc, #36]	; (80010cc <HAL_GPIO_EXTI_Callback+0x58>)
 80010a6:	f010 ff15 	bl	8011ed4 <puts>
			osThreadFlagsSet(readAccelHandle,0x0002U);
 80010aa:	4b07      	ldr	r3, [pc, #28]	; (80010c8 <HAL_GPIO_EXTI_Callback+0x54>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	2102      	movs	r1, #2
 80010b0:	4618      	mov	r0, r3
 80010b2:	f00c fe9f 	bl	800ddf4 <osThreadFlagsSet>
			break;
 80010b6:	e003      	b.n	80010c0 <HAL_GPIO_EXTI_Callback+0x4c>
		}
		case (GPIO_PIN_1):
		{
			SPI_WIFI_ISR();
 80010b8:	f009 ff5c 	bl	800af74 <SPI_WIFI_ISR>
			break;
 80010bc:	e000      	b.n	80010c0 <HAL_GPIO_EXTI_Callback+0x4c>
		}
		default:
		{
		  break;
 80010be:	bf00      	nop
		}
	}
}
 80010c0:	bf00      	nop
 80010c2:	3708      	adds	r7, #8
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	20000780 	.word	0x20000780
 80010cc:	08012c4c 	.word	0x08012c4c

080010d0 <wifi_start>:

static int wifi_start(void)
{
 80010d0:	b5b0      	push	{r4, r5, r7, lr}
 80010d2:	b086      	sub	sp, #24
 80010d4:	af04      	add	r7, sp, #16
  uint8_t  MAC_Addr[6];
  printf("wifistart\r\n");
 80010d6:	481d      	ldr	r0, [pc, #116]	; (800114c <wifi_start+0x7c>)
 80010d8:	f010 fefc 	bl	8011ed4 <puts>
 /*Initialize and use WIFI module */
  if(WIFI_Init() ==  WIFI_STATUS_OK)
 80010dc:	f009 ff5a 	bl	800af94 <WIFI_Init>
 80010e0:	4603      	mov	r3, r0
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d129      	bne.n	800113a <wifi_start+0x6a>
  {
	printf("xddddddd\r\n");
 80010e6:	481a      	ldr	r0, [pc, #104]	; (8001150 <wifi_start+0x80>)
 80010e8:	f010 fef4 	bl	8011ed4 <puts>
    printf(("ES-WIFI Initialized.\r\n"));
 80010ec:	4819      	ldr	r0, [pc, #100]	; (8001154 <wifi_start+0x84>)
 80010ee:	f010 fef1 	bl	8011ed4 <puts>
    if(WIFI_GetMAC_Address(MAC_Addr) == WIFI_STATUS_OK)
 80010f2:	463b      	mov	r3, r7
 80010f4:	4618      	mov	r0, r3
 80010f6:	f009 ff9b 	bl	800b030 <WIFI_GetMAC_Address>
 80010fa:	4603      	mov	r3, r0
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d116      	bne.n	800112e <wifi_start+0x5e>
    {
      printf("MAC asignada\r\n");
 8001100:	4815      	ldr	r0, [pc, #84]	; (8001158 <wifi_start+0x88>)
 8001102:	f010 fee7 	bl	8011ed4 <puts>
      printf("> eS-WiFi module MAC Address : %02X:%02X:%02X:%02X:%02X:%02X\r\n",
               MAC_Addr[0],
 8001106:	783b      	ldrb	r3, [r7, #0]
      printf("> eS-WiFi module MAC Address : %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 8001108:	4618      	mov	r0, r3
               MAC_Addr[1],
 800110a:	787b      	ldrb	r3, [r7, #1]
      printf("> eS-WiFi module MAC Address : %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800110c:	461c      	mov	r4, r3
               MAC_Addr[2],
 800110e:	78bb      	ldrb	r3, [r7, #2]
      printf("> eS-WiFi module MAC Address : %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 8001110:	461d      	mov	r5, r3
               MAC_Addr[3],
 8001112:	78fb      	ldrb	r3, [r7, #3]
               MAC_Addr[4],
 8001114:	793a      	ldrb	r2, [r7, #4]
               MAC_Addr[5]);
 8001116:	7979      	ldrb	r1, [r7, #5]
      printf("> eS-WiFi module MAC Address : %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 8001118:	9102      	str	r1, [sp, #8]
 800111a:	9201      	str	r2, [sp, #4]
 800111c:	9300      	str	r3, [sp, #0]
 800111e:	462b      	mov	r3, r5
 8001120:	4622      	mov	r2, r4
 8001122:	4601      	mov	r1, r0
 8001124:	480d      	ldr	r0, [pc, #52]	; (800115c <wifi_start+0x8c>)
 8001126:	f010 fe4f 	bl	8011dc8 <iprintf>
  else
  {
	printf("Errorfifi\r\n");
    return -1;
  }
  return 0;
 800112a:	2300      	movs	r3, #0
 800112c:	e00a      	b.n	8001144 <wifi_start+0x74>
      printf("> ERROR : CANNOT get MAC address\r\n");
 800112e:	480c      	ldr	r0, [pc, #48]	; (8001160 <wifi_start+0x90>)
 8001130:	f010 fed0 	bl	8011ed4 <puts>
      return -1;
 8001134:	f04f 33ff 	mov.w	r3, #4294967295
 8001138:	e004      	b.n	8001144 <wifi_start+0x74>
	printf("Errorfifi\r\n");
 800113a:	480a      	ldr	r0, [pc, #40]	; (8001164 <wifi_start+0x94>)
 800113c:	f010 feca 	bl	8011ed4 <puts>
    return -1;
 8001140:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001144:	4618      	mov	r0, r3
 8001146:	3708      	adds	r7, #8
 8001148:	46bd      	mov	sp, r7
 800114a:	bdb0      	pop	{r4, r5, r7, pc}
 800114c:	08012c64 	.word	0x08012c64
 8001150:	08012c70 	.word	0x08012c70
 8001154:	08012c7c 	.word	0x08012c7c
 8001158:	08012c94 	.word	0x08012c94
 800115c:	08012ca4 	.word	0x08012ca4
 8001160:	08012ce4 	.word	0x08012ce4
 8001164:	08012d08 	.word	0x08012d08

08001168 <wifi_connect>:

int wifi_connect(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b082      	sub	sp, #8
 800116c:	af02      	add	r7, sp, #8

  wifi_start();
 800116e:	f7ff ffaf 	bl	80010d0 <wifi_start>

  printf("Connecting to %s\r\n",SSID);
 8001172:	4919      	ldr	r1, [pc, #100]	; (80011d8 <wifi_connect+0x70>)
 8001174:	4819      	ldr	r0, [pc, #100]	; (80011dc <wifi_connect+0x74>)
 8001176:	f010 fe27 	bl	8011dc8 <iprintf>
  if( WIFI_Connect(SSID, PASSWORD, WIFISECURITY) == WIFI_STATUS_OK)
 800117a:	2203      	movs	r2, #3
 800117c:	4918      	ldr	r1, [pc, #96]	; (80011e0 <wifi_connect+0x78>)
 800117e:	4816      	ldr	r0, [pc, #88]	; (80011d8 <wifi_connect+0x70>)
 8001180:	f009 ff34 	bl	800afec <WIFI_Connect>
 8001184:	4603      	mov	r3, r0
 8001186:	2b00      	cmp	r3, #0
 8001188:	d11d      	bne.n	80011c6 <wifi_connect+0x5e>
  {
    if(WIFI_GetIP_Address(IP_Addr) == WIFI_STATUS_OK)
 800118a:	4816      	ldr	r0, [pc, #88]	; (80011e4 <wifi_connect+0x7c>)
 800118c:	f009 ff66 	bl	800b05c <WIFI_GetIP_Address>
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	d111      	bne.n	80011ba <wifi_connect+0x52>
    {
      printf("> es-wifi module connected: got IP Address : %d.%d.%d.%d\r\n",
               IP_Addr[0],
 8001196:	4b13      	ldr	r3, [pc, #76]	; (80011e4 <wifi_connect+0x7c>)
 8001198:	781b      	ldrb	r3, [r3, #0]
      printf("> es-wifi module connected: got IP Address : %d.%d.%d.%d\r\n",
 800119a:	4619      	mov	r1, r3
               IP_Addr[1],
 800119c:	4b11      	ldr	r3, [pc, #68]	; (80011e4 <wifi_connect+0x7c>)
 800119e:	785b      	ldrb	r3, [r3, #1]
      printf("> es-wifi module connected: got IP Address : %d.%d.%d.%d\r\n",
 80011a0:	461a      	mov	r2, r3
               IP_Addr[2],
 80011a2:	4b10      	ldr	r3, [pc, #64]	; (80011e4 <wifi_connect+0x7c>)
 80011a4:	789b      	ldrb	r3, [r3, #2]
      printf("> es-wifi module connected: got IP Address : %d.%d.%d.%d\r\n",
 80011a6:	4618      	mov	r0, r3
               IP_Addr[3]);
 80011a8:	4b0e      	ldr	r3, [pc, #56]	; (80011e4 <wifi_connect+0x7c>)
 80011aa:	78db      	ldrb	r3, [r3, #3]
      printf("> es-wifi module connected: got IP Address : %d.%d.%d.%d\r\n",
 80011ac:	9300      	str	r3, [sp, #0]
 80011ae:	4603      	mov	r3, r0
 80011b0:	480d      	ldr	r0, [pc, #52]	; (80011e8 <wifi_connect+0x80>)
 80011b2:	f010 fe09 	bl	8011dc8 <iprintf>
  else
  {
		 printf("ERROR : es-wifi module NOT connected\n");
     return -1;
  }
  return 0;
 80011b6:	2300      	movs	r3, #0
 80011b8:	e00a      	b.n	80011d0 <wifi_connect+0x68>
		  printf(" ERROR : es-wifi module CANNOT get IP address\r\n");
 80011ba:	480c      	ldr	r0, [pc, #48]	; (80011ec <wifi_connect+0x84>)
 80011bc:	f010 fe8a 	bl	8011ed4 <puts>
      return -1;
 80011c0:	f04f 33ff 	mov.w	r3, #4294967295
 80011c4:	e004      	b.n	80011d0 <wifi_connect+0x68>
		 printf("ERROR : es-wifi module NOT connected\n");
 80011c6:	480a      	ldr	r0, [pc, #40]	; (80011f0 <wifi_connect+0x88>)
 80011c8:	f010 fe84 	bl	8011ed4 <puts>
     return -1;
 80011cc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80011d0:	4618      	mov	r0, r3
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	08012d14 	.word	0x08012d14
 80011dc:	08012d24 	.word	0x08012d24
 80011e0:	08012d38 	.word	0x08012d38
 80011e4:	200007bc 	.word	0x200007bc
 80011e8:	08012d44 	.word	0x08012d44
 80011ec:	08012d80 	.word	0x08012d80
 80011f0:	08012db0 	.word	0x08012db0

080011f4 <SPI3_IRQHandler>:
  * @brief  SPI3 line detection callback.
  * @param  None
  * @retval None
  */
void SPI3_IRQHandler(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	af00      	add	r7, sp, #0
  HAL_SPI_IRQHandler(&hspi);
 80011f8:	4802      	ldr	r0, [pc, #8]	; (8001204 <SPI3_IRQHandler+0x10>)
 80011fa:	f005 fcb7 	bl	8006b6c <HAL_SPI_IRQHandler>
}
 80011fe:	bf00      	nop
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	20000c84 	.word	0x20000c84

08001208 <RTC_set_func>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_RTC_set_func */
void RTC_set_func(void *argument)
{
 8001208:	b5b0      	push	{r4, r5, r7, lr}
 800120a:	b09e      	sub	sp, #120	; 0x78
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	uint8_t recibido[3];
	//uint32_t flag_rec;
	osStatus_t estado;
	uint32_t return_wait = 0U;
 8001210:	2300      	movs	r3, #0
 8001212:	66bb      	str	r3, [r7, #104]	; 0x68

	uint16_t num_usuario;
	uint8_t to_change[6];
	const char* msg_hora_ok = "\r\nHora cambiada correctamente\r\n";
 8001214:	4bae      	ldr	r3, [pc, #696]	; (80014d0 <RTC_set_func+0x2c8>)
 8001216:	657b      	str	r3, [r7, #84]	; 0x54
	const char* msg_fecha_ok = "Fecha cambiada correctamente\r\n";
 8001218:	4bae      	ldr	r3, [pc, #696]	; (80014d4 <RTC_set_func+0x2cc>)
 800121a:	653b      	str	r3, [r7, #80]	; 0x50
	const char* msg_error = "\r\nERROR: Valor no válido\r\n";
 800121c:	4bae      	ldr	r3, [pc, #696]	; (80014d8 <RTC_set_func+0x2d0>)
 800121e:	64fb      	str	r3, [r7, #76]	; 0x4c
	const char* msg_rtc1 = "\r\n\r\n========================\r\n"
 8001220:	4bae      	ldr	r3, [pc, #696]	; (80014dc <RTC_set_func+0x2d4>)
 8001222:	64bb      	str	r3, [r7, #72]	; 0x48
	"| Configurar rtc |\r\n"
	"========================\r\n\r\n";
	const char* msg[6] = {
 8001224:	4bae      	ldr	r3, [pc, #696]	; (80014e0 <RTC_set_func+0x2d8>)
 8001226:	f107 0430 	add.w	r4, r7, #48	; 0x30
 800122a:	461d      	mov	r5, r3
 800122c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800122e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001230:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001234:	e884 0003 	stmia.w	r4, {r0, r1}
	"Hora (0-23): ", "\r\nMinuto (0-59): ","\r\nSegundo (0-59): ","\r\nDía (1-31): ","\r\nMes (1-12): ",
	"\r\nAño (0-99): "};
	uint8_t limit[6][2] = {{0,23},{0,59},{0,59},{1,31},{1,12},{0,99}};
 8001238:	4aaa      	ldr	r2, [pc, #680]	; (80014e4 <RTC_set_func+0x2dc>)
 800123a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800123e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001240:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	//uint8_t *toChange[6] = {&GetTime.Hours, &GetTime.Minutes, &GetTime.Seconds, &GetDate.Date,&GetDate.Month, &GetDate.Year};

	printf("Empieza el bucle\r\n");
 8001244:	48a8      	ldr	r0, [pc, #672]	; (80014e8 <RTC_set_func+0x2e0>)
 8001246:	f010 fe45 	bl	8011ed4 <puts>
	estado = osMessageQueuePut(print_queueHandle, &msg_rtc1, 0, pdMS_TO_TICKS(500));
 800124a:	4ba8      	ldr	r3, [pc, #672]	; (80014ec <RTC_set_func+0x2e4>)
 800124c:	6818      	ldr	r0, [r3, #0]
 800124e:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8001252:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001256:	2200      	movs	r2, #0
 8001258:	f00c ff2a 	bl	800e0b0 <osMessageQueuePut>
 800125c:	6678      	str	r0, [r7, #100]	; 0x64
	int i,j = 0;
 800125e:	2300      	movs	r3, #0
 8001260:	66fb      	str	r3, [r7, #108]	; 0x6c
	for (i=0;i<6;){
 8001262:	2300      	movs	r3, #0
 8001264:	673b      	str	r3, [r7, #112]	; 0x70
 8001266:	e0d8      	b.n	800141a <RTC_set_func+0x212>
		estado = osMessageQueuePut(print_queueHandle, &msg[i], 0, pdMS_TO_TICKS(500));
 8001268:	4ba0      	ldr	r3, [pc, #640]	; (80014ec <RTC_set_func+0x2e4>)
 800126a:	6818      	ldr	r0, [r3, #0]
 800126c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001270:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001272:	009b      	lsls	r3, r3, #2
 8001274:	18d1      	adds	r1, r2, r3
 8001276:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800127a:	2200      	movs	r2, #0
 800127c:	f00c ff18 	bl	800e0b0 <osMessageQueuePut>
 8001280:	6678      	str	r0, [r7, #100]	; 0x64
		printf("Esperando a que ser reciba el dato\r\n");
 8001282:	489b      	ldr	r0, [pc, #620]	; (80014f0 <RTC_set_func+0x2e8>)
 8001284:	f010 fe26 	bl	8011ed4 <puts>

		for (j=0;j<3;j++){
 8001288:	2300      	movs	r3, #0
 800128a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800128c:	e022      	b.n	80012d4 <RTC_set_func+0xcc>
			estado = osMessageQueueGet(receive_queueHandle, &recibido[j], NULL, osWaitForever);
 800128e:	4b99      	ldr	r3, [pc, #612]	; (80014f4 <RTC_set_func+0x2ec>)
 8001290:	6818      	ldr	r0, [r3, #0]
 8001292:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001296:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001298:	18d1      	adds	r1, r2, r3
 800129a:	f04f 33ff 	mov.w	r3, #4294967295
 800129e:	2200      	movs	r2, #0
 80012a0:	f00c ff66 	bl	800e170 <osMessageQueueGet>
 80012a4:	6678      	str	r0, [r7, #100]	; 0x64
			printf("De la cola: %c\r\n",recibido[j]);
 80012a6:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80012aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80012ac:	4413      	add	r3, r2
 80012ae:	781b      	ldrb	r3, [r3, #0]
 80012b0:	4619      	mov	r1, r3
 80012b2:	4891      	ldr	r0, [pc, #580]	; (80014f8 <RTC_set_func+0x2f0>)
 80012b4:	f010 fd88 	bl	8011dc8 <iprintf>
			if(recibido[j]==13){
 80012b8:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80012bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80012be:	4413      	add	r3, r2
 80012c0:	781b      	ldrb	r3, [r3, #0]
 80012c2:	2b0d      	cmp	r3, #13
 80012c4:	d103      	bne.n	80012ce <RTC_set_func+0xc6>
				printf("Ha pulsado intro\r\n");
 80012c6:	488d      	ldr	r0, [pc, #564]	; (80014fc <RTC_set_func+0x2f4>)
 80012c8:	f010 fe04 	bl	8011ed4 <puts>
				break;
 80012cc:	e005      	b.n	80012da <RTC_set_func+0xd2>
		for (j=0;j<3;j++){
 80012ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80012d0:	3301      	adds	r3, #1
 80012d2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80012d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80012d6:	2b02      	cmp	r3, #2
 80012d8:	ddd9      	ble.n	800128e <RTC_set_func+0x86>
			}
		}
		printf("%d\r\n",j);
 80012da:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80012dc:	4888      	ldr	r0, [pc, #544]	; (8001500 <RTC_set_func+0x2f8>)
 80012de:	f010 fd73 	bl	8011dc8 <iprintf>
		switch(j){
 80012e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80012e4:	2b03      	cmp	r3, #3
 80012e6:	d84a      	bhi.n	800137e <RTC_set_func+0x176>
 80012e8:	a201      	add	r2, pc, #4	; (adr r2, 80012f0 <RTC_set_func+0xe8>)
 80012ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012ee:	bf00      	nop
 80012f0:	08001301 	.word	0x08001301
 80012f4:	08001309 	.word	0x08001309
 80012f8:	08001317 	.word	0x08001317
 80012fc:	0800133b 	.word	0x0800133b
		case 0:
			num_usuario=0;
 8001300:	2300      	movs	r3, #0
 8001302:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
			break;
 8001306:	e03a      	b.n	800137e <RTC_set_func+0x176>
		case 1:
			num_usuario = recibido[0]-48;
 8001308:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 800130c:	b29b      	uxth	r3, r3
 800130e:	3b30      	subs	r3, #48	; 0x30
 8001310:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
			//i++;
			break;
 8001314:	e033      	b.n	800137e <RTC_set_func+0x176>
		case 2:
			num_usuario = 10*(recibido[0]-48)+recibido[1]-48;
 8001316:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 800131a:	3b30      	subs	r3, #48	; 0x30
 800131c:	b29b      	uxth	r3, r3
 800131e:	461a      	mov	r2, r3
 8001320:	0092      	lsls	r2, r2, #2
 8001322:	4413      	add	r3, r2
 8001324:	005b      	lsls	r3, r3, #1
 8001326:	b29a      	uxth	r2, r3
 8001328:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
 800132c:	b29b      	uxth	r3, r3
 800132e:	4413      	add	r3, r2
 8001330:	b29b      	uxth	r3, r3
 8001332:	3b30      	subs	r3, #48	; 0x30
 8001334:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
			//i++;
			break;
 8001338:	e021      	b.n	800137e <RTC_set_func+0x176>
		case 3:
			num_usuario = 100*(recibido[0]-48)+10*(recibido[1]-48)+recibido[2]-48;
 800133a:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 800133e:	3b30      	subs	r3, #48	; 0x30
 8001340:	b29b      	uxth	r3, r3
 8001342:	461a      	mov	r2, r3
 8001344:	0092      	lsls	r2, r2, #2
 8001346:	4413      	add	r3, r2
 8001348:	461a      	mov	r2, r3
 800134a:	0091      	lsls	r1, r2, #2
 800134c:	461a      	mov	r2, r3
 800134e:	460b      	mov	r3, r1
 8001350:	4413      	add	r3, r2
 8001352:	009b      	lsls	r3, r3, #2
 8001354:	b29a      	uxth	r2, r3
 8001356:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
 800135a:	3b30      	subs	r3, #48	; 0x30
 800135c:	b29b      	uxth	r3, r3
 800135e:	4619      	mov	r1, r3
 8001360:	0089      	lsls	r1, r1, #2
 8001362:	440b      	add	r3, r1
 8001364:	005b      	lsls	r3, r3, #1
 8001366:	b29b      	uxth	r3, r3
 8001368:	4413      	add	r3, r2
 800136a:	b29a      	uxth	r2, r3
 800136c:	f897 3062 	ldrb.w	r3, [r7, #98]	; 0x62
 8001370:	b29b      	uxth	r3, r3
 8001372:	4413      	add	r3, r2
 8001374:	b29b      	uxth	r3, r3
 8001376:	3b30      	subs	r3, #48	; 0x30
 8001378:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
			break;
 800137c:	bf00      	nop
		}
		printf("Numero: %d\r\n",num_usuario);
 800137e:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8001382:	4619      	mov	r1, r3
 8001384:	485f      	ldr	r0, [pc, #380]	; (8001504 <RTC_set_func+0x2fc>)
 8001386:	f010 fd1f 	bl	8011dc8 <iprintf>
		printf("Rango: %d-%d\r\n",limit[i][0],limit[i][1]);
 800138a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800138c:	005b      	lsls	r3, r3, #1
 800138e:	3378      	adds	r3, #120	; 0x78
 8001390:	443b      	add	r3, r7
 8001392:	f813 3c54 	ldrb.w	r3, [r3, #-84]
 8001396:	4619      	mov	r1, r3
 8001398:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800139a:	005b      	lsls	r3, r3, #1
 800139c:	3378      	adds	r3, #120	; 0x78
 800139e:	443b      	add	r3, r7
 80013a0:	f813 3c53 	ldrb.w	r3, [r3, #-83]
 80013a4:	461a      	mov	r2, r3
 80013a6:	4858      	ldr	r0, [pc, #352]	; (8001508 <RTC_set_func+0x300>)
 80013a8:	f010 fd0e 	bl	8011dc8 <iprintf>
		if (num_usuario<limit[i][0] || num_usuario>limit[i][1]){
 80013ac:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80013ae:	005b      	lsls	r3, r3, #1
 80013b0:	3378      	adds	r3, #120	; 0x78
 80013b2:	443b      	add	r3, r7
 80013b4:	f813 3c54 	ldrb.w	r3, [r3, #-84]
 80013b8:	b29b      	uxth	r3, r3
 80013ba:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80013be:	429a      	cmp	r2, r3
 80013c0:	d30a      	bcc.n	80013d8 <RTC_set_func+0x1d0>
 80013c2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80013c4:	005b      	lsls	r3, r3, #1
 80013c6:	3378      	adds	r3, #120	; 0x78
 80013c8:	443b      	add	r3, r7
 80013ca:	f813 3c53 	ldrb.w	r3, [r3, #-83]
 80013ce:	b29b      	uxth	r3, r3
 80013d0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80013d4:	429a      	cmp	r2, r3
 80013d6:	d914      	bls.n	8001402 <RTC_set_func+0x1fa>
			estado = osMessageQueuePut(print_queueHandle, &msg_error, 0, pdMS_TO_TICKS(500));
 80013d8:	4b44      	ldr	r3, [pc, #272]	; (80014ec <RTC_set_func+0x2e4>)
 80013da:	6818      	ldr	r0, [r3, #0]
 80013dc:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 80013e0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80013e4:	2200      	movs	r2, #0
 80013e6:	f00c fe63 	bl	800e0b0 <osMessageQueuePut>
 80013ea:	6678      	str	r0, [r7, #100]	; 0x64
			if (estado == osOK)
 80013ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d103      	bne.n	80013fa <RTC_set_func+0x1f2>
				printf("Enviado valor erroneo\r\n");
 80013f2:	4846      	ldr	r0, [pc, #280]	; (800150c <RTC_set_func+0x304>)
 80013f4:	f010 fd6e 	bl	8011ed4 <puts>
 80013f8:	e00f      	b.n	800141a <RTC_set_func+0x212>
			else
				printf("Algo no va bien\r\n");
 80013fa:	4845      	ldr	r0, [pc, #276]	; (8001510 <RTC_set_func+0x308>)
 80013fc:	f010 fd6a 	bl	8011ed4 <puts>
			if (estado == osOK)
 8001400:	e00b      	b.n	800141a <RTC_set_func+0x212>
		}else{
			to_change[i]=num_usuario;
 8001402:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8001406:	b2d9      	uxtb	r1, r3
 8001408:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800140c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800140e:	4413      	add	r3, r2
 8001410:	460a      	mov	r2, r1
 8001412:	701a      	strb	r2, [r3, #0]
			i++;
 8001414:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001416:	3301      	adds	r3, #1
 8001418:	673b      	str	r3, [r7, #112]	; 0x70
	for (i=0;i<6;){
 800141a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800141c:	2b05      	cmp	r3, #5
 800141e:	f77f af23 	ble.w	8001268 <RTC_set_func+0x60>
		}

	}

	RTC_TimeTypeDef sTime = {0};
 8001422:	f107 0310 	add.w	r3, r7, #16
 8001426:	2200      	movs	r2, #0
 8001428:	601a      	str	r2, [r3, #0]
 800142a:	605a      	str	r2, [r3, #4]
 800142c:	609a      	str	r2, [r3, #8]
 800142e:	60da      	str	r2, [r3, #12]
 8001430:	611a      	str	r2, [r3, #16]
	RTC_DateTypeDef sDate = {0};
 8001432:	2300      	movs	r3, #0
 8001434:	60fb      	str	r3, [r7, #12]

	sTime.Hours = to_change[0];
 8001436:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 800143a:	743b      	strb	r3, [r7, #16]
	sTime.Minutes = to_change[1];
 800143c:	f897 3059 	ldrb.w	r3, [r7, #89]	; 0x59
 8001440:	747b      	strb	r3, [r7, #17]
	sTime.Seconds = to_change[2];
 8001442:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 8001446:	74bb      	strb	r3, [r7, #18]

	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8001448:	f107 0310 	add.w	r3, r7, #16
 800144c:	2200      	movs	r2, #0
 800144e:	4619      	mov	r1, r3
 8001450:	4830      	ldr	r0, [pc, #192]	; (8001514 <RTC_set_func+0x30c>)
 8001452:	f004 faf0 	bl	8005a36 <HAL_RTC_SetTime>
 8001456:	4603      	mov	r3, r0
 8001458:	2b00      	cmp	r3, #0
 800145a:	d001      	beq.n	8001460 <RTC_set_func+0x258>
	  {
	    Error_Handler();
 800145c:	f000 faa8 	bl	80019b0 <Error_Handler>
	  }

	osMessageQueuePut(print_queueHandle, &msg_hora_ok, 0, pdMS_TO_TICKS(500));
 8001460:	4b22      	ldr	r3, [pc, #136]	; (80014ec <RTC_set_func+0x2e4>)
 8001462:	6818      	ldr	r0, [r3, #0]
 8001464:	f107 0154 	add.w	r1, r7, #84	; 0x54
 8001468:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800146c:	2200      	movs	r2, #0
 800146e:	f00c fe1f 	bl	800e0b0 <osMessageQueuePut>

	sDate.Date = to_change[3];
 8001472:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8001476:	73bb      	strb	r3, [r7, #14]
	sDate.Month = to_change[4];
 8001478:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 800147c:	737b      	strb	r3, [r7, #13]
	sDate.Year = to_change[5];
 800147e:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 8001482:	73fb      	strb	r3, [r7, #15]
	printf("Anio: %d\r\n",to_change[5]);
 8001484:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 8001488:	4619      	mov	r1, r3
 800148a:	4823      	ldr	r0, [pc, #140]	; (8001518 <RTC_set_func+0x310>)
 800148c:	f010 fc9c 	bl	8011dc8 <iprintf>
	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8001490:	f107 030c 	add.w	r3, r7, #12
 8001494:	2200      	movs	r2, #0
 8001496:	4619      	mov	r1, r3
 8001498:	481e      	ldr	r0, [pc, #120]	; (8001514 <RTC_set_func+0x30c>)
 800149a:	f004 fbc5 	bl	8005c28 <HAL_RTC_SetDate>
 800149e:	4603      	mov	r3, r0
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d001      	beq.n	80014a8 <RTC_set_func+0x2a0>
	{
		Error_Handler();
 80014a4:	f000 fa84 	bl	80019b0 <Error_Handler>
	}

	osMessageQueuePut(print_queueHandle, &msg_fecha_ok, 0, pdMS_TO_TICKS(500));
 80014a8:	4b10      	ldr	r3, [pc, #64]	; (80014ec <RTC_set_func+0x2e4>)
 80014aa:	6818      	ldr	r0, [r3, #0]
 80014ac:	f107 0150 	add.w	r1, r7, #80	; 0x50
 80014b0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80014b4:	2200      	movs	r2, #0
 80014b6:	f00c fdfb 	bl	800e0b0 <osMessageQueuePut>

	osThreadFlagsSet(wifiStartTaskHandle,0x0001U);
 80014ba:	4b18      	ldr	r3, [pc, #96]	; (800151c <RTC_set_func+0x314>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	2101      	movs	r1, #1
 80014c0:	4618      	mov	r0, r3
 80014c2:	f00c fc97 	bl	800ddf4 <osThreadFlagsSet>

  /* Infinite loop */
  for(;;)
  {

	  osDelay(pdMS_TO_TICKS(1000));
 80014c6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80014ca:	f00c fd62 	bl	800df92 <osDelay>
 80014ce:	e7fa      	b.n	80014c6 <RTC_set_func+0x2be>
 80014d0:	08012dd8 	.word	0x08012dd8
 80014d4:	08012df8 	.word	0x08012df8
 80014d8:	08012e18 	.word	0x08012e18
 80014dc:	08012e34 	.word	0x08012e34
 80014e0:	08012f44 	.word	0x08012f44
 80014e4:	08012f5c 	.word	0x08012f5c
 80014e8:	08012e84 	.word	0x08012e84
 80014ec:	20000798 	.word	0x20000798
 80014f0:	08012e98 	.word	0x08012e98
 80014f4:	2000079c 	.word	0x2000079c
 80014f8:	08012ebc 	.word	0x08012ebc
 80014fc:	08012ed0 	.word	0x08012ed0
 8001500:	08012ee4 	.word	0x08012ee4
 8001504:	08012eec 	.word	0x08012eec
 8001508:	08012efc 	.word	0x08012efc
 800150c:	08012f0c 	.word	0x08012f0c
 8001510:	08012f24 	.word	0x08012f24
 8001514:	20000198 	.word	0x20000198
 8001518:	08012f38 	.word	0x08012f38
 800151c:	20000794 	.word	0x20000794

08001520 <readAccel_func>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_readAccel_func */
void readAccel_func(void *argument)
{
 8001520:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001522:	b0b1      	sub	sp, #196	; 0xc4
 8001524:	af08      	add	r7, sp, #32
 8001526:	60f8      	str	r0, [r7, #12]
  /* USER CODE BEGIN readAccel_func */
	osStatus_t estado;
  //char mensaje[]  = "Hola mundo\r\n";
	char mensaje[100];
	char *p_mensaje = mensaje;
 8001528:	f107 0320 	add.w	r3, r7, #32
 800152c:	61fb      	str	r3, [r7, #28]

	//uint32_t nticks = 0;
	int16_t DataXYZ[3];
	int16_t *pDataXYZ = DataXYZ;
 800152e:	f107 0314 	add.w	r3, r7, #20
 8001532:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98


	uint8_t horas,minutos,segundos,dia,mes,anio = 0;
 8001536:	2300      	movs	r3, #0
 8001538:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
	uint32_t return_wait = 0U;
 800153c:	2300      	movs	r3, #0
 800153e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

	uint16_t iter; // Se usa para iterar en 64 o 1024 aceleraciones
	uint16_t max_iter;

	printf("ReadAccel task esperando\r\n");
 8001542:	485f      	ldr	r0, [pc, #380]	; (80016c0 <readAccel_func+0x1a0>)
 8001544:	f010 fcc6 	bl	8011ed4 <puts>
	// Esperamos que el usuario configure el RTC y que el acelerometro este activo
	return_wait = osThreadFlagsWait(0x0003U, osFlagsWaitAll, osWaitForever);
 8001548:	f04f 32ff 	mov.w	r2, #4294967295
 800154c:	2101      	movs	r1, #1
 800154e:	2003      	movs	r0, #3
 8001550:	f00c fc9e 	bl	800de90 <osThreadFlagsWait>
 8001554:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90

	//Activamos el temporizador
	osThreadFlagsSet(temporizadorHandle,0x0001U);
 8001558:	4b5a      	ldr	r3, [pc, #360]	; (80016c4 <readAccel_func+0x1a4>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	2101      	movs	r1, #1
 800155e:	4618      	mov	r0, r3
 8001560:	f00c fc48 	bl	800ddf4 <osThreadFlagsSet>

	//Terminamos la tarea de configuracion del RTC
	osThreadTerminate(RTC_setHandle);
 8001564:	4b58      	ldr	r3, [pc, #352]	; (80016c8 <readAccel_func+0x1a8>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4618      	mov	r0, r3
 800156a:	f00c fc15 	bl	800dd98 <osThreadTerminate>
	osThreadTerminate(printTaskHandle);
 800156e:	4b57      	ldr	r3, [pc, #348]	; (80016cc <readAccel_func+0x1ac>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	4618      	mov	r0, r3
 8001574:	f00c fc10 	bl	800dd98 <osThreadTerminate>
	osMessageQueueReset(print_queueHandle);
 8001578:	4b55      	ldr	r3, [pc, #340]	; (80016d0 <readAccel_func+0x1b0>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	4618      	mov	r0, r3
 800157e:	f00c fe8a 	bl	800e296 <osMessageQueueReset>

	printf("ReadAccel task se inicia\r\n");
 8001582:	4854      	ldr	r0, [pc, #336]	; (80016d4 <readAccel_func+0x1b4>)
 8001584:	f010 fca6 	bl	8011ed4 <puts>


	/* Infinite loop */
	for(;;)
	{
		if (modo_continuo){
 8001588:	4b53      	ldr	r3, [pc, #332]	; (80016d8 <readAccel_func+0x1b8>)
 800158a:	781b      	ldrb	r3, [r3, #0]
 800158c:	2b00      	cmp	r3, #0
 800158e:	d00a      	beq.n	80015a6 <readAccel_func+0x86>
			max_iter = MUESTRAS_CONTINUO;
 8001590:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001594:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
			osThreadFlagsSet(sendMQTTHandle,MODO_CONTINUO);
 8001598:	4b50      	ldr	r3, [pc, #320]	; (80016dc <readAccel_func+0x1bc>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	2102      	movs	r1, #2
 800159e:	4618      	mov	r0, r3
 80015a0:	f00c fc28 	bl	800ddf4 <osThreadFlagsSet>
 80015a4:	e008      	b.n	80015b8 <readAccel_func+0x98>
		}else{
			max_iter = MUESTRAS_NORMAL;
 80015a6:	2340      	movs	r3, #64	; 0x40
 80015a8:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
			osThreadFlagsSet(sendMQTTHandle,MODO_NORMAL);
 80015ac:	4b4b      	ldr	r3, [pc, #300]	; (80016dc <readAccel_func+0x1bc>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	2101      	movs	r1, #1
 80015b2:	4618      	mov	r0, r3
 80015b4:	f00c fc1e 	bl	800ddf4 <osThreadFlagsSet>
		}

		for (iter=0 ; iter<max_iter ; iter++){
 80015b8:	2300      	movs	r3, #0
 80015ba:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
 80015be:	e060      	b.n	8001682 <readAccel_func+0x162>
			BSP_ACCELERO_AccGetXYZ(pDataXYZ);
 80015c0:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 80015c4:	f008 f8a8 	bl	8009718 <BSP_ACCELERO_AccGetXYZ>
			//printf("Tick: %ld	Eje x: %d	Eje y: %d	Eje z: %d\r\n",nticks,DataXYZ[0],DataXYZ[1],DataXYZ[2]);

			//printf("Lectura accel realizada\r\n");
			HAL_RTC_GetTime(&hrtc, &GetTime, RTC_FORMAT_BIN);
 80015c8:	2200      	movs	r2, #0
 80015ca:	4945      	ldr	r1, [pc, #276]	; (80016e0 <readAccel_func+0x1c0>)
 80015cc:	4845      	ldr	r0, [pc, #276]	; (80016e4 <readAccel_func+0x1c4>)
 80015ce:	f004 facf 	bl	8005b70 <HAL_RTC_GetTime>
			horas = GetTime.Hours;
 80015d2:	4b43      	ldr	r3, [pc, #268]	; (80016e0 <readAccel_func+0x1c0>)
 80015d4:	781b      	ldrb	r3, [r3, #0]
 80015d6:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
			minutos = GetTime.Minutes;
 80015da:	4b41      	ldr	r3, [pc, #260]	; (80016e0 <readAccel_func+0x1c0>)
 80015dc:	785b      	ldrb	r3, [r3, #1]
 80015de:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
			segundos = GetTime.Seconds;
 80015e2:	4b3f      	ldr	r3, [pc, #252]	; (80016e0 <readAccel_func+0x1c0>)
 80015e4:	789b      	ldrb	r3, [r3, #2]
 80015e6:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d

			HAL_RTC_GetDate(&hrtc, &GetDate, RTC_FORMAT_BIN);
 80015ea:	2200      	movs	r2, #0
 80015ec:	493e      	ldr	r1, [pc, #248]	; (80016e8 <readAccel_func+0x1c8>)
 80015ee:	483d      	ldr	r0, [pc, #244]	; (80016e4 <readAccel_func+0x1c4>)
 80015f0:	f004 fba1 	bl	8005d36 <HAL_RTC_GetDate>
			anio = GetDate.Year;
 80015f4:	4b3c      	ldr	r3, [pc, #240]	; (80016e8 <readAccel_func+0x1c8>)
 80015f6:	78db      	ldrb	r3, [r3, #3]
 80015f8:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
			dia = GetDate.Date;
 80015fc:	4b3a      	ldr	r3, [pc, #232]	; (80016e8 <readAccel_func+0x1c8>)
 80015fe:	789b      	ldrb	r3, [r3, #2]
 8001600:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
			mes = GetDate.Month;
 8001604:	4b38      	ldr	r3, [pc, #224]	; (80016e8 <readAccel_func+0x1c8>)
 8001606:	785b      	ldrb	r3, [r3, #1]
 8001608:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b

			//printf("Anio: %d\r\n",anio);
			//printf("Lectura fecha realizada\r\n");
			//printf("fecha: %d/%d/%d hora: %d:%d:%d temp: %d.%02d grados\r\n",dia,mes,anio,horas,minutos,segundos,tmpInt1,tmpInt2);
			//snprintf(mensaje,100,"fecha: %d/%d/%d hora: %d:%d:%d Eje x: %d	Eje y: %d	Eje z: %d\r\n",dia,mes,anio+2000,horas,minutos,segundos,DataXYZ[0],DataXYZ[1],DataXYZ[2]);
			snprintf(mensaje,100,"%d,%d,%d,%d,%d,%d,%d,%d,%d\r\n",dia,mes,anio+2000,horas,minutos,segundos,DataXYZ[0],DataXYZ[1],DataXYZ[2]);
 800160c:	f897 608c 	ldrb.w	r6, [r7, #140]	; 0x8c
 8001610:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 8001614:	60bb      	str	r3, [r7, #8]
 8001616:	f897 2097 	ldrb.w	r2, [r7, #151]	; 0x97
 800161a:	f502 62fa 	add.w	r2, r2, #2000	; 0x7d0
 800161e:	f897 108f 	ldrb.w	r1, [r7, #143]	; 0x8f
 8001622:	f897 008e 	ldrb.w	r0, [r7, #142]	; 0x8e
 8001626:	f897 408d 	ldrb.w	r4, [r7, #141]	; 0x8d
 800162a:	f9b7 5014 	ldrsh.w	r5, [r7, #20]
 800162e:	607d      	str	r5, [r7, #4]
 8001630:	f9b7 5016 	ldrsh.w	r5, [r7, #22]
 8001634:	603d      	str	r5, [r7, #0]
 8001636:	f9b7 5018 	ldrsh.w	r5, [r7, #24]
 800163a:	462b      	mov	r3, r5
 800163c:	f107 0520 	add.w	r5, r7, #32
 8001640:	9307      	str	r3, [sp, #28]
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	9306      	str	r3, [sp, #24]
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	9305      	str	r3, [sp, #20]
 800164a:	9404      	str	r4, [sp, #16]
 800164c:	9003      	str	r0, [sp, #12]
 800164e:	9102      	str	r1, [sp, #8]
 8001650:	9201      	str	r2, [sp, #4]
 8001652:	68bb      	ldr	r3, [r7, #8]
 8001654:	9300      	str	r3, [sp, #0]
 8001656:	4633      	mov	r3, r6
 8001658:	4a24      	ldr	r2, [pc, #144]	; (80016ec <readAccel_func+0x1cc>)
 800165a:	2164      	movs	r1, #100	; 0x64
 800165c:	4628      	mov	r0, r5
 800165e:	f010 fcbb 	bl	8011fd8 <sniprintf>



			//printf("MENSAJE: %s\r\n",mensaje);
			estado = osMessageQueuePut(print_queueHandle, &p_mensaje, 0, pdMS_TO_TICKS(500));
 8001662:	4b1b      	ldr	r3, [pc, #108]	; (80016d0 <readAccel_func+0x1b0>)
 8001664:	6818      	ldr	r0, [r3, #0]
 8001666:	f107 011c 	add.w	r1, r7, #28
 800166a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800166e:	2200      	movs	r2, #0
 8001670:	f00c fd1e 	bl	800e0b0 <osMessageQueuePut>
 8001674:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
		for (iter=0 ; iter<max_iter ; iter++){
 8001678:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 800167c:	3301      	adds	r3, #1
 800167e:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
 8001682:	f8b7 209e 	ldrh.w	r2, [r7, #158]	; 0x9e
 8001686:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800168a:	429a      	cmp	r2, r3
 800168c:	d398      	bcc.n	80015c0 <readAccel_func+0xa0>
				printf("Timeout agotado 1\r\n");
			}*/

		}

		printf("Se han leido todas las aceleraciones, esperamos media hora o hasta que alguien pulse el boton\r\n");
 800168e:	4818      	ldr	r0, [pc, #96]	; (80016f0 <readAccel_func+0x1d0>)
 8001690:	f010 fc20 	bl	8011ed4 <puts>
		return_wait = osThreadFlagsWait(0x0006U, osFlagsWaitAny, osWaitForever); //espera media hora o que alguien pulse el boton
 8001694:	f04f 32ff 	mov.w	r2, #4294967295
 8001698:	2100      	movs	r1, #0
 800169a:	2006      	movs	r0, #6
 800169c:	f00c fbf8 	bl	800de90 <osThreadFlagsWait>
 80016a0:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
		if(return_wait == osFlagsErrorTimeout){
 80016a4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80016a8:	f113 0f02 	cmn.w	r3, #2
 80016ac:	d103      	bne.n	80016b6 <readAccel_func+0x196>
			printf("Ha pasado media hora\r\n");
 80016ae:	4811      	ldr	r0, [pc, #68]	; (80016f4 <readAccel_func+0x1d4>)
 80016b0:	f010 fc10 	bl	8011ed4 <puts>
 80016b4:	e768      	b.n	8001588 <readAccel_func+0x68>
		}
		else {
			printf("El usuario quiere enviar aceleraciones\r\n");
 80016b6:	4810      	ldr	r0, [pc, #64]	; (80016f8 <readAccel_func+0x1d8>)
 80016b8:	f010 fc0c 	bl	8011ed4 <puts>
		if (modo_continuo){
 80016bc:	e764      	b.n	8001588 <readAccel_func+0x68>
 80016be:	bf00      	nop
 80016c0:	08012f68 	.word	0x08012f68
 80016c4:	2000078c 	.word	0x2000078c
 80016c8:	2000077c 	.word	0x2000077c
 80016cc:	20000784 	.word	0x20000784
 80016d0:	20000798 	.word	0x20000798
 80016d4:	08012f84 	.word	0x08012f84
 80016d8:	200007b9 	.word	0x200007b9
 80016dc:	20000790 	.word	0x20000790
 80016e0:	200007a4 	.word	0x200007a4
 80016e4:	20000198 	.word	0x20000198
 80016e8:	200007a0 	.word	0x200007a0
 80016ec:	08012fa0 	.word	0x08012fa0
 80016f0:	08012fc0 	.word	0x08012fc0
 80016f4:	08013020 	.word	0x08013020
 80016f8:	08013038 	.word	0x08013038

080016fc <printTask_func>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_printTask_func */
void printTask_func(void *argument)
{
 80016fc:	b590      	push	{r4, r7, lr}
 80016fe:	b085      	sub	sp, #20
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
	uintptr_t mensaje;
	osStatus_t estado;
  /* Infinite loop */
  for(;;)
  {
	  estado = osMessageQueueGet(print_queueHandle, &mensaje, NULL, osWaitForever);
 8001704:	4b13      	ldr	r3, [pc, #76]	; (8001754 <printTask_func+0x58>)
 8001706:	6818      	ldr	r0, [r3, #0]
 8001708:	f107 0108 	add.w	r1, r7, #8
 800170c:	f04f 33ff 	mov.w	r3, #4294967295
 8001710:	2200      	movs	r2, #0
 8001712:	f00c fd2d 	bl	800e170 <osMessageQueueGet>
 8001716:	60f8      	str	r0, [r7, #12]
	  //printf("Se ha recibido algo en print task\r\n");
	  //printf("Mensaje print task: %s\r\n",mensaje);
	  //printf("Longitud: %d",strlen((char*)mensaje));
	  if (estado == osOK)
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	2b00      	cmp	r3, #0
 800171c:	d10d      	bne.n	800173a <printTask_func+0x3e>
	  {
		  //printf("%s",(char*)mensaje);
		  HAL_UART_Transmit(&huart1, (uint8_t*)mensaje, strlen(mensaje),10);
 800171e:	68bb      	ldr	r3, [r7, #8]
 8001720:	461c      	mov	r4, r3
 8001722:	68bb      	ldr	r3, [r7, #8]
 8001724:	4618      	mov	r0, r3
 8001726:	f7fe fd53 	bl	80001d0 <strlen>
 800172a:	4603      	mov	r3, r0
 800172c:	b29a      	uxth	r2, r3
 800172e:	230a      	movs	r3, #10
 8001730:	4621      	mov	r1, r4
 8001732:	4809      	ldr	r0, [pc, #36]	; (8001758 <printTask_func+0x5c>)
 8001734:	f006 fae8 	bl	8007d08 <HAL_UART_Transmit>
 8001738:	e7e4      	b.n	8001704 <printTask_func+0x8>
	  }
	  else if (estado == osErrorTimeout)
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	f113 0f02 	cmn.w	r3, #2
 8001740:	d103      	bne.n	800174a <printTask_func+0x4e>
	  {
		  printf("Timeout printTask\r\n");
 8001742:	4806      	ldr	r0, [pc, #24]	; (800175c <printTask_func+0x60>)
 8001744:	f010 fbc6 	bl	8011ed4 <puts>
 8001748:	e7dc      	b.n	8001704 <printTask_func+0x8>
	  }
	  else
	  {
		  printf("Error en la tarea print\r\n");
 800174a:	4805      	ldr	r0, [pc, #20]	; (8001760 <printTask_func+0x64>)
 800174c:	f010 fbc2 	bl	8011ed4 <puts>
	  estado = osMessageQueueGet(print_queueHandle, &mensaje, NULL, osWaitForever);
 8001750:	e7d8      	b.n	8001704 <printTask_func+0x8>
 8001752:	bf00      	nop
 8001754:	20000798 	.word	0x20000798
 8001758:	2000026c 	.word	0x2000026c
 800175c:	08013060 	.word	0x08013060
 8001760:	08013074 	.word	0x08013074

08001764 <tarea_UART_func>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_tarea_UART_func */
void tarea_UART_func(void *argument)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b084      	sub	sp, #16
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN tarea_UART_func */
	osStatus_t estado;
	uint32_t return_wait = 0U;
 800176c:	2300      	movs	r3, #0
 800176e:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
	  return_wait = osThreadFlagsWait(0x0002U, osFlagsWaitAny, osWaitForever);
 8001770:	f04f 32ff 	mov.w	r2, #4294967295
 8001774:	2100      	movs	r1, #0
 8001776:	2002      	movs	r0, #2
 8001778:	f00c fb8a 	bl	800de90 <osThreadFlagsWait>
 800177c:	60f8      	str	r0, [r7, #12]
	  estado = osMessageQueuePut(receive_queueHandle, &rec_data,0,pdMS_TO_TICKS(200));
 800177e:	4b09      	ldr	r3, [pc, #36]	; (80017a4 <tarea_UART_func+0x40>)
 8001780:	6818      	ldr	r0, [r3, #0]
 8001782:	23c8      	movs	r3, #200	; 0xc8
 8001784:	2200      	movs	r2, #0
 8001786:	4908      	ldr	r1, [pc, #32]	; (80017a8 <tarea_UART_func+0x44>)
 8001788:	f00c fc92 	bl	800e0b0 <osMessageQueuePut>
 800178c:	60b8      	str	r0, [r7, #8]
	  if (estado == osOK)
 800178e:	68bb      	ldr	r3, [r7, #8]
 8001790:	2b00      	cmp	r3, #0
 8001792:	d103      	bne.n	800179c <tarea_UART_func+0x38>
		  printf("Estado: ok\r\n");
 8001794:	4805      	ldr	r0, [pc, #20]	; (80017ac <tarea_UART_func+0x48>)
 8001796:	f010 fb9d 	bl	8011ed4 <puts>
 800179a:	e7e9      	b.n	8001770 <tarea_UART_func+0xc>
	  else
		  printf("Algo no va bien\r\n");
 800179c:	4804      	ldr	r0, [pc, #16]	; (80017b0 <tarea_UART_func+0x4c>)
 800179e:	f010 fb99 	bl	8011ed4 <puts>
	  return_wait = osThreadFlagsWait(0x0002U, osFlagsWaitAny, osWaitForever);
 80017a2:	e7e5      	b.n	8001770 <tarea_UART_func+0xc>
 80017a4:	2000079c 	.word	0x2000079c
 80017a8:	200007c4 	.word	0x200007c4
 80017ac:	08013090 	.word	0x08013090
 80017b0:	08012f24 	.word	0x08012f24

080017b4 <temporizador_func>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_temporizador_func */
void temporizador_func(void *argument)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b082      	sub	sp, #8
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN temporizador_func */
	osThreadFlagsWait(0x0001U, osFlagsWaitAll, osWaitForever);
 80017bc:	f04f 32ff 	mov.w	r2, #4294967295
 80017c0:	2101      	movs	r1, #1
 80017c2:	2001      	movs	r0, #1
 80017c4:	f00c fb64 	bl	800de90 <osThreadFlagsWait>
	printf("Temporizador activado\r\n");
 80017c8:	4806      	ldr	r0, [pc, #24]	; (80017e4 <temporizador_func+0x30>)
 80017ca:	f010 fb83 	bl	8011ed4 <puts>
  /* Infinite loop */
  for(;;)
  {
    osDelay(pdMS_TO_TICKS(1000000)); //Periodo en ms con el que se mandan las aceleraciones
 80017ce:	4806      	ldr	r0, [pc, #24]	; (80017e8 <temporizador_func+0x34>)
 80017d0:	f00c fbdf 	bl	800df92 <osDelay>
    osThreadFlagsSet(readAccelHandle,0x0004U);
 80017d4:	4b05      	ldr	r3, [pc, #20]	; (80017ec <temporizador_func+0x38>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	2104      	movs	r1, #4
 80017da:	4618      	mov	r0, r3
 80017dc:	f00c fb0a 	bl	800ddf4 <osThreadFlagsSet>
    osDelay(pdMS_TO_TICKS(1000000)); //Periodo en ms con el que se mandan las aceleraciones
 80017e0:	e7f5      	b.n	80017ce <temporizador_func+0x1a>
 80017e2:	bf00      	nop
 80017e4:	0801309c 	.word	0x0801309c
 80017e8:	000f4240 	.word	0x000f4240
 80017ec:	20000780 	.word	0x20000780

080017f0 <sendMQTT_func>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_sendMQTT_func */
void sendMQTT_func(void *argument)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b0a4      	sub	sp, #144	; 0x90
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN sendMQTT_func */
	uint32_t return_wait = 0U;
 80017f8:	2300      	movs	r3, #0
 80017fa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	uintptr_t mensaje;

	uint16_t iter;
	uint16_t max_iter;

	printf("Definimos mqtt\r\n");
 80017fe:	484b      	ldr	r0, [pc, #300]	; (800192c <sendMQTT_func+0x13c>)
 8001800:	f010 fb68 	bl	8011ed4 <puts>

	const uint32_t ulMaxPublishCount = 5UL;
 8001804:	2305      	movs	r3, #5
 8001806:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	NetworkContext_t xNetworkContext = { 0 };
 800180a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800180e:	2200      	movs	r2, #0
 8001810:	601a      	str	r2, [r3, #0]
 8001812:	605a      	str	r2, [r3, #4]
	MQTTContext_t xMQTTContext;
	MQTTStatus_t xMQTTStatus;
	TransportStatus_t xNetworkStatus;
	char payLoad[16];

	printf("Esperamos a que este conectado al wifi\r\n");
 8001814:	4846      	ldr	r0, [pc, #280]	; (8001930 <sendMQTT_func+0x140>)
 8001816:	f010 fb5d 	bl	8011ed4 <puts>
	osThreadFlagsWait(0x0001U, osFlagsWaitAny, osWaitForever);
 800181a:	f04f 32ff 	mov.w	r2, #4294967295
 800181e:	2100      	movs	r1, #0
 8001820:	2001      	movs	r0, #1
 8001822:	f00c fb35 	bl	800de90 <osThreadFlagsWait>
	printf("Ya se ha conectado al wifi\r\n");
 8001826:	4843      	ldr	r0, [pc, #268]	; (8001934 <sendMQTT_func+0x144>)
 8001828:	f010 fb54 	bl	8011ed4 <puts>

	/* Attempt to connect to the MQTT broker. The socket is returned in
	* the network context structure. */
	xNetworkStatus = prvConnectToServer( &xNetworkContext );
 800182c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001830:	4618      	mov	r0, r3
 8001832:	f000 f8c3 	bl	80019bc <prvConnectToServer>
 8001836:	4603      	mov	r3, r0
 8001838:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
	printf("Mitad de la definicion mqtt\r\n");
 800183c:	483e      	ldr	r0, [pc, #248]	; (8001938 <sendMQTT_func+0x148>)
 800183e:	f010 fb49 	bl	8011ed4 <puts>
	configASSERT( xNetworkStatus == PLAINTEXT_TRANSPORT_SUCCESS );
 8001842:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8001846:	2b01      	cmp	r3, #1
 8001848:	d00a      	beq.n	8001860 <sendMQTT_func+0x70>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800184a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800184e:	f383 8811 	msr	BASEPRI, r3
 8001852:	f3bf 8f6f 	isb	sy
 8001856:	f3bf 8f4f 	dsb	sy
 800185a:	67bb      	str	r3, [r7, #120]	; 0x78
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800185c:	bf00      	nop
 800185e:	e7fe      	b.n	800185e <sendMQTT_func+0x6e>
	//LOG(("Trying to create an MQTT connection\n"));
	prvCreateMQTTConnectionWithBroker( &xMQTTContext, &xNetworkContext );
 8001860:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8001864:	f107 031c 	add.w	r3, r7, #28
 8001868:	4611      	mov	r1, r2
 800186a:	4618      	mov	r0, r3
 800186c:	f000 f8f0 	bl	8001a50 <prvCreateMQTTConnectionWithBroker>
	printf("Definido mqtt\r\n");
 8001870:	4832      	ldr	r0, [pc, #200]	; (800193c <sendMQTT_func+0x14c>)
 8001872:	f010 fb2f 	bl	8011ed4 <puts>

	osThreadFlagsSet(readAccelHandle,0x0002U);
 8001876:	4b32      	ldr	r3, [pc, #200]	; (8001940 <sendMQTT_func+0x150>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	2102      	movs	r1, #2
 800187c:	4618      	mov	r0, r3
 800187e:	f00c fab9 	bl	800ddf4 <osThreadFlagsSet>


  /* Infinite loop */
  for(;;)
  {
	  return_wait = osThreadFlagsWait(MODO_NORMAL | MODO_CONTINUO, osFlagsWaitAny, osWaitForever);
 8001882:	f04f 32ff 	mov.w	r2, #4294967295
 8001886:	2100      	movs	r1, #0
 8001888:	2003      	movs	r0, #3
 800188a:	f00c fb01 	bl	800de90 <osThreadFlagsWait>
 800188e:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
	  if(return_wait == MODO_NORMAL){
 8001892:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001896:	2b01      	cmp	r3, #1
 8001898:	d106      	bne.n	80018a8 <sendMQTT_func+0xb8>
		  printf("Vamos a recibir 64 aceleraciones\r\n");
 800189a:	482a      	ldr	r0, [pc, #168]	; (8001944 <sendMQTT_func+0x154>)
 800189c:	f010 fb1a 	bl	8011ed4 <puts>
		  max_iter = MUESTRAS_NORMAL;
 80018a0:	2340      	movs	r3, #64	; 0x40
 80018a2:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 80018a6:	e00a      	b.n	80018be <sendMQTT_func+0xce>

	  }
	  else if(return_wait == MODO_CONTINUO){
 80018a8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80018ac:	2b02      	cmp	r3, #2
 80018ae:	d106      	bne.n	80018be <sendMQTT_func+0xce>
		  printf("Vamos a recibir 1024 aceleraciones\r\n");
 80018b0:	4825      	ldr	r0, [pc, #148]	; (8001948 <sendMQTT_func+0x158>)
 80018b2:	f010 fb0f 	bl	8011ed4 <puts>
		  max_iter = MUESTRAS_CONTINUO;
 80018b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80018ba:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
	  }
	  for (iter=0;iter<max_iter;iter++){
 80018be:	2300      	movs	r3, #0
 80018c0:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 80018c4:	e020      	b.n	8001908 <sendMQTT_func+0x118>
		  estado = osMessageQueueGet(print_queueHandle, &mensaje, NULL, osWaitForever);
 80018c6:	4b21      	ldr	r3, [pc, #132]	; (800194c <sendMQTT_func+0x15c>)
 80018c8:	6818      	ldr	r0, [r3, #0]
 80018ca:	f107 0174 	add.w	r1, r7, #116	; 0x74
 80018ce:	f04f 33ff 	mov.w	r3, #4294967295
 80018d2:	2200      	movs	r2, #0
 80018d4:	f00c fc4c 	bl	800e170 <osMessageQueueGet>
 80018d8:	67f8      	str	r0, [r7, #124]	; 0x7c

		  if (estado == osOK)
 80018da:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d10e      	bne.n	80018fe <sendMQTT_func+0x10e>
		  {
			  //printf("%s",(char*)mensaje);
			  //HAL_UART_Transmit(&huart1, (uint8_t*)mensaje, strlen(mensaje),10);
			  sprintf(payLoad,"%s",mensaje);
 80018e0:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80018e2:	f107 030c 	add.w	r3, r7, #12
 80018e6:	491a      	ldr	r1, [pc, #104]	; (8001950 <sendMQTT_func+0x160>)
 80018e8:	4618      	mov	r0, r3
 80018ea:	f010 fba9 	bl	8012040 <siprintf>
			  prvMQTTPublishToTopic(&xMQTTContext,pcTempTopic,payLoad);
 80018ee:	f107 020c 	add.w	r2, r7, #12
 80018f2:	f107 031c 	add.w	r3, r7, #28
 80018f6:	4917      	ldr	r1, [pc, #92]	; (8001954 <sendMQTT_func+0x164>)
 80018f8:	4618      	mov	r0, r3
 80018fa:	f000 f925 	bl	8001b48 <prvMQTTPublishToTopic>
	  for (iter=0;iter<max_iter;iter++){
 80018fe:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8001902:	3301      	adds	r3, #1
 8001904:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8001908:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 800190c:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8001910:	429a      	cmp	r2, r3
 8001912:	d3d8      	bcc.n	80018c6 <sendMQTT_func+0xd6>
		  }
	  }
	  printf("Espacio en la cola: %d\r\n",osMessageQueueGetSpace(print_queueHandle));
 8001914:	4b0d      	ldr	r3, [pc, #52]	; (800194c <sendMQTT_func+0x15c>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4618      	mov	r0, r3
 800191a:	f00c fc87 	bl	800e22c <osMessageQueueGetSpace>
 800191e:	4603      	mov	r3, r0
 8001920:	4619      	mov	r1, r3
 8001922:	480d      	ldr	r0, [pc, #52]	; (8001958 <sendMQTT_func+0x168>)
 8001924:	f010 fa50 	bl	8011dc8 <iprintf>
	  return_wait = osThreadFlagsWait(MODO_NORMAL | MODO_CONTINUO, osFlagsWaitAny, osWaitForever);
 8001928:	e7ab      	b.n	8001882 <sendMQTT_func+0x92>
 800192a:	bf00      	nop
 800192c:	080130b4 	.word	0x080130b4
 8001930:	080130c4 	.word	0x080130c4
 8001934:	080130ec 	.word	0x080130ec
 8001938:	08013108 	.word	0x08013108
 800193c:	08013128 	.word	0x08013128
 8001940:	20000780 	.word	0x20000780
 8001944:	08013138 	.word	0x08013138
 8001948:	0801315c 	.word	0x0801315c
 800194c:	20000798 	.word	0x20000798
 8001950:	08013180 	.word	0x08013180
 8001954:	08013184 	.word	0x08013184
 8001958:	0801319c 	.word	0x0801319c

0800195c <wifiStartTask_func>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_wifiStartTask_func */
void wifiStartTask_func(void *argument)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b082      	sub	sp, #8
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN wifiStartTask_func */
	osThreadFlagsWait(0x0001U, osFlagsWaitAny, osWaitForever);
 8001964:	f04f 32ff 	mov.w	r2, #4294967295
 8001968:	2100      	movs	r1, #0
 800196a:	2001      	movs	r0, #1
 800196c:	f00c fa90 	bl	800de90 <osThreadFlagsWait>
	wifi_connect();
 8001970:	f7ff fbfa 	bl	8001168 <wifi_connect>
	osThreadFlagsSet(sendMQTTHandle,0x0001U);
 8001974:	4b04      	ldr	r3, [pc, #16]	; (8001988 <wifiStartTask_func+0x2c>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	2101      	movs	r1, #1
 800197a:	4618      	mov	r0, r3
 800197c:	f00c fa3a 	bl	800ddf4 <osThreadFlagsSet>
  /* Infinite loop */
  for(;;)
  {
	  osDelay(pdMS_TO_TICKS(1));
 8001980:	2001      	movs	r0, #1
 8001982:	f00c fb06 	bl	800df92 <osDelay>
 8001986:	e7fb      	b.n	8001980 <wifiStartTask_func+0x24>
 8001988:	20000790 	.word	0x20000790

0800198c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b082      	sub	sp, #8
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4a04      	ldr	r2, [pc, #16]	; (80019ac <HAL_TIM_PeriodElapsedCallback+0x20>)
 800199a:	4293      	cmp	r3, r2
 800199c:	d101      	bne.n	80019a2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800199e:	f000 fef1 	bl	8002784 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80019a2:	bf00      	nop
 80019a4:	3708      	adds	r7, #8
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop
 80019ac:	40001000 	.word	0x40001000

080019b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019b0:	b480      	push	{r7}
 80019b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019b4:	b672      	cpsid	i
}
 80019b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019b8:	e7fe      	b.n	80019b8 <Error_Handler+0x8>
	...

080019bc <prvConnectToServer>:
 */
static uint32_t ulGlobalEntryTimeMs;


TransportStatus_t prvConnectToServer( NetworkContext_t * pxNetworkContext )
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b086      	sub	sp, #24
 80019c0:	af02      	add	r7, sp, #8
 80019c2:	6078      	str	r0, [r7, #4]
   TransportStatus_t xNetworkStatus;
   uint8_t ret;
   uint8_t ipaddr[4]=MQTT_BROKER_ENDPOINT_IP;
 80019c4:	4b1d      	ldr	r3, [pc, #116]	; (8001a3c <prvConnectToServer+0x80>)
 80019c6:	60bb      	str	r3, [r7, #8]

    /* Attempt to connect to MQTT broker. */
    do
    {
        /* Establish a TCP connection with the MQTT broker. */
        LOG( ( "Create a TCP connection to %s:%d.\n",
 80019c8:	f240 725b 	movw	r2, #1883	; 0x75b
 80019cc:	491c      	ldr	r1, [pc, #112]	; (8001a40 <prvConnectToServer+0x84>)
 80019ce:	481d      	ldr	r0, [pc, #116]	; (8001a44 <prvConnectToServer+0x88>)
 80019d0:	f010 f9fa 	bl	8011dc8 <iprintf>
                   MQTT_BROKER_ENDPOINT,
                   MQTT_BROKER_PORT ) );
        ret=WIFI_OpenClientConnection(SOCKET, WIFI_TCP_PROTOCOL, "mqtt", ipaddr , MQTT_BROKER_PORT, 0);
 80019d4:	f107 0308 	add.w	r3, r7, #8
 80019d8:	2200      	movs	r2, #0
 80019da:	9201      	str	r2, [sp, #4]
 80019dc:	f240 725b 	movw	r2, #1883	; 0x75b
 80019e0:	9200      	str	r2, [sp, #0]
 80019e2:	4a19      	ldr	r2, [pc, #100]	; (8001a48 <prvConnectToServer+0x8c>)
 80019e4:	2100      	movs	r1, #0
 80019e6:	2000      	movs	r0, #0
 80019e8:	f009 fb54 	bl	800b094 <WIFI_OpenClientConnection>
 80019ec:	4603      	mov	r3, r0
 80019ee:	73bb      	strb	r3, [r7, #14]
		if(ret!=WIFI_STATUS_OK) {
 80019f0:	7bbb      	ldrb	r3, [r7, #14]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d009      	beq.n	8001a0a <prvConnectToServer+0x4e>
			LOG(("Error in opening MQTT connection: %d\n",ret));
 80019f6:	7bbb      	ldrb	r3, [r7, #14]
 80019f8:	4619      	mov	r1, r3
 80019fa:	4814      	ldr	r0, [pc, #80]	; (8001a4c <prvConnectToServer+0x90>)
 80019fc:	f010 f9e4 	bl	8011dc8 <iprintf>
			osDelay(pdMS_TO_TICKS(10000));
 8001a00:	f242 7010 	movw	r0, #10000	; 0x2710
 8001a04:	f00c fac5 	bl	800df92 <osDelay>
 8001a08:	e00f      	b.n	8001a2a <prvConnectToServer+0x6e>
		} else {
	        pxNetworkContext->socket = SOCKET;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	701a      	strb	r2, [r3, #0]
	        pxNetworkContext->socket_open=1;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	2201      	movs	r2, #1
 8001a14:	705a      	strb	r2, [r3, #1]
	        memcpy(pxNetworkContext->ipaddr,ipaddr,4*sizeof(uint8_t));
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	3302      	adds	r3, #2
 8001a1a:	68ba      	ldr	r2, [r7, #8]
 8001a1c:	601a      	str	r2, [r3, #0]
	        pxNetworkContext->remote_port=MQTT_BROKER_PORT;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	f240 725b 	movw	r2, #1883	; 0x75b
 8001a24:	80da      	strh	r2, [r3, #6]
	        xNetworkStatus = PLAINTEXT_TRANSPORT_SUCCESS;
 8001a26:	2301      	movs	r3, #1
 8001a28:	73fb      	strb	r3, [r7, #15]
		}


    } while( ( xNetworkStatus != PLAINTEXT_TRANSPORT_SUCCESS ) );
 8001a2a:	7bfb      	ldrb	r3, [r7, #15]
 8001a2c:	2b01      	cmp	r3, #1
 8001a2e:	d1cb      	bne.n	80019c8 <prvConnectToServer+0xc>

    return PLAINTEXT_TRANSPORT_SUCCESS;
 8001a30:	2301      	movs	r3, #1
}
 8001a32:	4618      	mov	r0, r3
 8001a34:	3710      	adds	r7, #16
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	bf00      	nop
 8001a3c:	5e5d795b 	.word	0x5e5d795b
 8001a40:	080131d0 	.word	0x080131d0
 8001a44:	080131e4 	.word	0x080131e4
 8001a48:	08013208 	.word	0x08013208
 8001a4c:	08013210 	.word	0x08013210

08001a50 <prvCreateMQTTConnectionWithBroker>:

void prvCreateMQTTConnectionWithBroker( MQTTContext_t * pxMQTTContext,
                                               NetworkContext_t * pxNetworkContext )
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b094      	sub	sp, #80	; 0x50
 8001a54:	af02      	add	r7, sp, #8
 8001a56:	6078      	str	r0, [r7, #4]
 8001a58:	6039      	str	r1, [r7, #0]
    MQTTConnectInfo_t xConnectInfo;
    bool xSessionPresent;
    TransportInterface_t xTransport;

    /* Fill in Transport Interface send and receive function pointers. */
    init_transport_from_socket( pxNetworkContext->socket, 1,
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	7818      	ldrb	r0, [r3, #0]
 8001a5e:	f107 030c 	add.w	r3, r7, #12
 8001a62:	683a      	ldr	r2, [r7, #0]
 8001a64:	2101      	movs	r1, #1
 8001a66:	f00c f851 	bl	800db0c <init_transport_from_socket>
                                     pxNetworkContext,
                                     &xTransport );
    /* Initialize MQTT library. */
    xResult = MQTT_Init( pxMQTTContext,
 8001a6a:	f107 010c 	add.w	r1, r7, #12
 8001a6e:	4b30      	ldr	r3, [pc, #192]	; (8001b30 <prvCreateMQTTConnectionWithBroker+0xe0>)
 8001a70:	9300      	str	r3, [sp, #0]
 8001a72:	4b30      	ldr	r3, [pc, #192]	; (8001b34 <prvCreateMQTTConnectionWithBroker+0xe4>)
 8001a74:	4a30      	ldr	r2, [pc, #192]	; (8001b38 <prvCreateMQTTConnectionWithBroker+0xe8>)
 8001a76:	6878      	ldr	r0, [r7, #4]
 8001a78:	f00a fa6a 	bl	800bf50 <MQTT_Init>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
                         &xTransport,
                         prvGetTimeMs,
                         prvEventCallback,
                         &xBuffer );

    configASSERT( xResult == MQTTSuccess );
 8001a82:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d00a      	beq.n	8001aa0 <prvCreateMQTTConnectionWithBroker+0x50>
	__asm volatile
 8001a8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a8e:	f383 8811 	msr	BASEPRI, r3
 8001a92:	f3bf 8f6f 	isb	sy
 8001a96:	f3bf 8f4f 	dsb	sy
 8001a9a:	643b      	str	r3, [r7, #64]	; 0x40
}
 8001a9c:	bf00      	nop
 8001a9e:	e7fe      	b.n	8001a9e <prvCreateMQTTConnectionWithBroker+0x4e>
    LOG(("MQTT initialized\n"));
 8001aa0:	4826      	ldr	r0, [pc, #152]	; (8001b3c <prvCreateMQTTConnectionWithBroker+0xec>)
 8001aa2:	f010 fa17 	bl	8011ed4 <puts>

    /* Many fields not used in this demo so start with everything at 0. */
    ( void ) memset( ( void * ) &xConnectInfo, 0x00, sizeof( xConnectInfo ) );
 8001aa6:	f107 0320 	add.w	r3, r7, #32
 8001aaa:	221c      	movs	r2, #28
 8001aac:	2100      	movs	r1, #0
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f00f fdff 	bl	80116b2 <memset>

    /* Start with a clean session i.e. direct the MQTT broker to discard any
     * previous session data. Also, establishing a connection with clean
     * session will ensure that the broker does not store any data when this
     * client gets disconnected. */
    xConnectInfo.cleanSession = true;
 8001ab4:	2301      	movs	r3, #1
 8001ab6:	f887 3020 	strb.w	r3, [r7, #32]

    /* The client identifier is used to uniquely identify this MQTT client to
     * the MQTT broker. In a production device the identifier can be something
     * unique, such as a device serial number. */
    xConnectInfo.pClientIdentifier = MQTTCLIENT_IDENTIFIER;
 8001aba:	4b21      	ldr	r3, [pc, #132]	; (8001b40 <prvCreateMQTTConnectionWithBroker+0xf0>)
 8001abc:	627b      	str	r3, [r7, #36]	; 0x24
    xConnectInfo.clientIdentifierLength = ( uint16_t ) strlen(
 8001abe:	2317      	movs	r3, #23
 8001ac0:	853b      	strh	r3, [r7, #40]	; 0x28
                                                  MQTTCLIENT_IDENTIFIER );
    xConnectInfo.pUserName=mqttUserName;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	62fb      	str	r3, [r7, #44]	; 0x2c
    xConnectInfo.userNameLength=strlen(mqttUserName);
 8001ac6:	2000      	movs	r0, #0
 8001ac8:	f7fe fb82 	bl	80001d0 <strlen>
 8001acc:	4603      	mov	r3, r0
 8001ace:	b29b      	uxth	r3, r3
 8001ad0:	863b      	strh	r3, [r7, #48]	; 0x30
    xConnectInfo.pPassword=mqttPass;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	637b      	str	r3, [r7, #52]	; 0x34
    xConnectInfo.passwordLength=strlen(mqttPass);
 8001ad6:	2000      	movs	r0, #0
 8001ad8:	f7fe fb7a 	bl	80001d0 <strlen>
 8001adc:	4603      	mov	r3, r0
 8001ade:	b29b      	uxth	r3, r3
 8001ae0:	873b      	strh	r3, [r7, #56]	; 0x38

    /* Set MQTT keep-alive period. It is the responsibility of the application
     * to ensure that the interval between Control Packets being sent does not
     * exceed the Keep Alive value.  In the absence of sending any other
     * Control Packets, the Client MUST send a PINGREQ Packet. */
    xConnectInfo.keepAliveSeconds = 60U;;
 8001ae2:	233c      	movs	r3, #60	; 0x3c
 8001ae4:	847b      	strh	r3, [r7, #34]	; 0x22

    /* Send MQTT CONNECT packet to broker. LWT is not used in this demo, so it
     * is passed as NULL. */
    xResult = MQTT_Connect( pxMQTTContext,
 8001ae6:	f107 0120 	add.w	r1, r7, #32
 8001aea:	f107 031f 	add.w	r3, r7, #31
 8001aee:	9300      	str	r3, [sp, #0]
 8001af0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001af4:	2200      	movs	r2, #0
 8001af6:	6878      	ldr	r0, [r7, #4]
 8001af8:	f00a fa7f 	bl	800bffa <MQTT_Connect>
 8001afc:	4603      	mov	r3, r0
 8001afe:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
                            &xConnectInfo,
                            NULL,
                            1000U,
                            &xSessionPresent );
    configASSERT( xResult == MQTTSuccess );
 8001b02:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d00a      	beq.n	8001b20 <prvCreateMQTTConnectionWithBroker+0xd0>
	__asm volatile
 8001b0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b0e:	f383 8811 	msr	BASEPRI, r3
 8001b12:	f3bf 8f6f 	isb	sy
 8001b16:	f3bf 8f4f 	dsb	sy
 8001b1a:	63fb      	str	r3, [r7, #60]	; 0x3c
}
 8001b1c:	bf00      	nop
 8001b1e:	e7fe      	b.n	8001b1e <prvCreateMQTTConnectionWithBroker+0xce>
    LOG(("MQTT connected to broker\n"));
 8001b20:	4808      	ldr	r0, [pc, #32]	; (8001b44 <prvCreateMQTTConnectionWithBroker+0xf4>)
 8001b22:	f010 f9d7 	bl	8011ed4 <puts>

}
 8001b26:	bf00      	nop
 8001b28:	3748      	adds	r7, #72	; 0x48
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	20000000 	.word	0x20000000
 8001b34:	08001cd5 	.word	0x08001cd5
 8001b38:	08001ca5 	.word	0x08001ca5
 8001b3c:	08013238 	.word	0x08013238
 8001b40:	0801324c 	.word	0x0801324c
 8001b44:	08013264 	.word	0x08013264

08001b48 <prvMQTTPublishToTopic>:

void prvMQTTPublishToTopic( MQTTContext_t * pxMQTTContext, char * topic, void * payload )
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b08a      	sub	sp, #40	; 0x28
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	60f8      	str	r0, [r7, #12]
 8001b50:	60b9      	str	r1, [r7, #8]
 8001b52:	607a      	str	r2, [r7, #4]
    MQTTStatus_t xResult;
    MQTTPublishInfo_t xMQTTPublishInfo;

    /* Some fields are not used by this demo so start with everything at 0. */
    ( void ) memset( ( void * ) &xMQTTPublishInfo, 0x00, sizeof(
 8001b54:	f107 0310 	add.w	r3, r7, #16
 8001b58:	2214      	movs	r2, #20
 8001b5a:	2100      	movs	r1, #0
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f00f fda8 	bl	80116b2 <memset>
                                                        xMQTTPublishInfo ) );

    /* This demo uses QoS0. */
    xMQTTPublishInfo.qos = MQTTQoS0;
 8001b62:	2300      	movs	r3, #0
 8001b64:	743b      	strb	r3, [r7, #16]
    xMQTTPublishInfo.retain = false;
 8001b66:	2300      	movs	r3, #0
 8001b68:	747b      	strb	r3, [r7, #17]
    xMQTTPublishInfo.pTopicName = topic;
 8001b6a:	68bb      	ldr	r3, [r7, #8]
 8001b6c:	617b      	str	r3, [r7, #20]
    xMQTTPublishInfo.topicNameLength = ( uint16_t ) strlen( topic );
 8001b6e:	68b8      	ldr	r0, [r7, #8]
 8001b70:	f7fe fb2e 	bl	80001d0 <strlen>
 8001b74:	4603      	mov	r3, r0
 8001b76:	b29b      	uxth	r3, r3
 8001b78:	833b      	strh	r3, [r7, #24]
    xMQTTPublishInfo.pPayload = payload;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	61fb      	str	r3, [r7, #28]
    xMQTTPublishInfo.payloadLength = strlen( payload );
 8001b7e:	6878      	ldr	r0, [r7, #4]
 8001b80:	f7fe fb26 	bl	80001d0 <strlen>
 8001b84:	4603      	mov	r3, r0
 8001b86:	623b      	str	r3, [r7, #32]

    /* Send PUBLISH packet. Packet ID is not used for a QoS0 publish. */
    xResult = MQTT_Publish( pxMQTTContext, &xMQTTPublishInfo, 0U );
 8001b88:	f107 0310 	add.w	r3, r7, #16
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	4619      	mov	r1, r3
 8001b90:	68f8      	ldr	r0, [r7, #12]
 8001b92:	f00a faaa 	bl	800c0ea <MQTT_Publish>
 8001b96:	4603      	mov	r3, r0
 8001b98:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if(xResult==MQTTSuccess) LOG(("Published to topic %s: %s\n",topic,payload));
 8001b9c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d104      	bne.n	8001bae <prvMQTTPublishToTopic+0x66>
 8001ba4:	687a      	ldr	r2, [r7, #4]
 8001ba6:	68b9      	ldr	r1, [r7, #8]
 8001ba8:	4803      	ldr	r0, [pc, #12]	; (8001bb8 <prvMQTTPublishToTopic+0x70>)
 8001baa:	f010 f90d 	bl	8011dc8 <iprintf>
    //configASSERT( xResult == MQTTSuccess );
}
 8001bae:	bf00      	nop
 8001bb0:	3728      	adds	r7, #40	; 0x28
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	bf00      	nop
 8001bb8:	08013280 	.word	0x08013280

08001bbc <prvMQTTProcessIncomingPublish>:

    } while( xFailedSubscribeToTopic == true  );
}

void prvMQTTProcessIncomingPublish( MQTTPublishInfo_t *pxPublishInfo )
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b0c2      	sub	sp, #264	; 0x108
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001bc6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001bca:	6018      	str	r0, [r3, #0]
	char buffer1[128];
	char buffer2[128];
    const char * pTopicName;

	// pPayload no termina en \0, hay que copiarlo en un buffer para imprimirlo. Lo mismo con pTopicName
	memcpy(buffer1,pxPublishInfo->pPayload,min(127,pxPublishInfo->payloadLength));
 8001bcc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001bd0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	68d9      	ldr	r1, [r3, #12]
 8001bd8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001bdc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	691b      	ldr	r3, [r3, #16]
 8001be4:	2b7f      	cmp	r3, #127	; 0x7f
 8001be6:	bf28      	it	cs
 8001be8:	237f      	movcs	r3, #127	; 0x7f
 8001bea:	461a      	mov	r2, r3
 8001bec:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	f00f fd36 	bl	8011662 <memcpy>
	buffer1[min(1023,pxPublishInfo->payloadLength)]='\0';
 8001bf6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001bfa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	691b      	ldr	r3, [r3, #16]
 8001c02:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8001c06:	4293      	cmp	r3, r2
 8001c08:	bf28      	it	cs
 8001c0a:	4613      	movcs	r3, r2
 8001c0c:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8001c10:	443b      	add	r3, r7
 8001c12:	2200      	movs	r2, #0
 8001c14:	f803 2c80 	strb.w	r2, [r3, #-128]
	memcpy(buffer2,pxPublishInfo->pTopicName,min(127,pxPublishInfo->topicNameLength));
 8001c18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001c1c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	6859      	ldr	r1, [r3, #4]
 8001c24:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001c28:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	891b      	ldrh	r3, [r3, #8]
 8001c30:	2b7f      	cmp	r3, #127	; 0x7f
 8001c32:	bf28      	it	cs
 8001c34:	237f      	movcs	r3, #127	; 0x7f
 8001c36:	b29b      	uxth	r3, r3
 8001c38:	461a      	mov	r2, r3
 8001c3a:	f107 0308 	add.w	r3, r7, #8
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f00f fd0f 	bl	8011662 <memcpy>
	buffer2[min(1023,pxPublishInfo->topicNameLength)]='\0';
 8001c44:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001c48:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	891b      	ldrh	r3, [r3, #8]
 8001c50:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8001c54:	4293      	cmp	r3, r2
 8001c56:	bf28      	it	cs
 8001c58:	4613      	movcs	r3, r2
 8001c5a:	b29b      	uxth	r3, r3
 8001c5c:	461a      	mov	r2, r3
 8001c5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001c62:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001c66:	2100      	movs	r1, #0
 8001c68:	5499      	strb	r1, [r3, r2]

	LOG(("Topic \"%s\": publicado \"%s\"\n",buffer2,buffer1));
 8001c6a:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001c6e:	f107 0308 	add.w	r3, r7, #8
 8001c72:	4619      	mov	r1, r3
 8001c74:	480a      	ldr	r0, [pc, #40]	; (8001ca0 <prvMQTTProcessIncomingPublish+0xe4>)
 8001c76:	f010 f8a7 	bl	8011dc8 <iprintf>

  // Actuar localmente sobre los LEDs o alguna otra cosa
	if(buffer1[0]=='1') BSP_LED_On(LED2);
 8001c7a:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 8001c7e:	2b31      	cmp	r3, #49	; 0x31
 8001c80:	d102      	bne.n	8001c88 <prvMQTTProcessIncomingPublish+0xcc>
 8001c82:	2000      	movs	r0, #0
 8001c84:	f007 fb8e 	bl	80093a4 <BSP_LED_On>
	if(buffer1[0]=='0') BSP_LED_Off(LED2);
 8001c88:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 8001c8c:	2b30      	cmp	r3, #48	; 0x30
 8001c8e:	d102      	bne.n	8001c96 <prvMQTTProcessIncomingPublish+0xda>
 8001c90:	2000      	movs	r0, #0
 8001c92:	f007 fb9d 	bl	80093d0 <BSP_LED_Off>

}
 8001c96:	bf00      	nop
 8001c98:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bd80      	pop	{r7, pc}
 8001ca0:	080132f0 	.word	0x080132f0

08001ca4 <prvGetTimeMs>:

uint32_t prvGetTimeMs( void )
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b082      	sub	sp, #8
 8001ca8:	af00      	add	r7, sp, #0
#define MILLISECONDS_PER_TICK                             ( 1000 / configTICK_RATE_HZ )
    TickType_t xTickCount = 0;
 8001caa:	2300      	movs	r3, #0
 8001cac:	607b      	str	r3, [r7, #4]
    uint32_t ulTimeMs = 0UL;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	603b      	str	r3, [r7, #0]

    /* Get the current tick count. */
    xTickCount = xTaskGetTickCount();
 8001cb2:	f00d fdab 	bl	800f80c <xTaskGetTickCount>
 8001cb6:	6078      	str	r0, [r7, #4]

    /* Convert the ticks to milliseconds. */
    ulTimeMs = ( uint32_t ) xTickCount * MILLISECONDS_PER_TICK;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	603b      	str	r3, [r7, #0]

    /* Reduce ulGlobalEntryTimeMs from obtained time so as to always return the
     * elapsed time in the application. */
    ulTimeMs = ( uint32_t ) ( ulTimeMs - ulGlobalEntryTimeMs );
 8001cbc:	4b04      	ldr	r3, [pc, #16]	; (8001cd0 <prvGetTimeMs+0x2c>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	683a      	ldr	r2, [r7, #0]
 8001cc2:	1ad3      	subs	r3, r2, r3
 8001cc4:	603b      	str	r3, [r7, #0]

    return ulTimeMs;
 8001cc6:	683b      	ldr	r3, [r7, #0]
}
 8001cc8:	4618      	mov	r0, r3
 8001cca:	3708      	adds	r7, #8
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bd80      	pop	{r7, pc}
 8001cd0:	20000bb0 	.word	0x20000bb0

08001cd4 <prvEventCallback>:

void prvEventCallback( MQTTContext_t * pxMQTTContext,
                              MQTTPacketInfo_t * pxPacketInfo,
                              MQTTDeserializedInfo_t * pxDeserializedInfo )
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b084      	sub	sp, #16
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	60f8      	str	r0, [r7, #12]
 8001cdc:	60b9      	str	r1, [r7, #8]
 8001cde:	607a      	str	r2, [r7, #4]
    /* The MQTT context is not used for this demo. */
    ( void ) pxMQTTContext;

    if( ( pxPacketInfo->type & 0xF0U ) == MQTT_PACKET_TYPE_PUBLISH )
 8001ce0:	68bb      	ldr	r3, [r7, #8]
 8001ce2:	781b      	ldrb	r3, [r3, #0]
 8001ce4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001ce8:	2b30      	cmp	r3, #48	; 0x30
 8001cea:	d104      	bne.n	8001cf6 <prvEventCallback+0x22>
    {
    	// procesar un paquete PUBLISH recibido,
    	//por ejemplo llamando a la función prvMQTTProcessIncomingPublish, que hay que desarrollar
      prvMQTTProcessIncomingPublish( pxDeserializedInfo->pPublishInfo );
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	f7ff ff63 	bl	8001bbc <prvMQTTProcessIncomingPublish>
    {
       // también se podría hacer algo con otros paquetes si fuera necesario
    	 //prvMQTTProcessResponse( pxPacketInfo, pxDeserializedInfo->packetIdentifier );
    }

}
 8001cf6:	bf00      	nop
 8001cf8:	3710      	adds	r7, #16
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}
	...

08001d00 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b082      	sub	sp, #8
 8001d04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d06:	4b11      	ldr	r3, [pc, #68]	; (8001d4c <HAL_MspInit+0x4c>)
 8001d08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d0a:	4a10      	ldr	r2, [pc, #64]	; (8001d4c <HAL_MspInit+0x4c>)
 8001d0c:	f043 0301 	orr.w	r3, r3, #1
 8001d10:	6613      	str	r3, [r2, #96]	; 0x60
 8001d12:	4b0e      	ldr	r3, [pc, #56]	; (8001d4c <HAL_MspInit+0x4c>)
 8001d14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d16:	f003 0301 	and.w	r3, r3, #1
 8001d1a:	607b      	str	r3, [r7, #4]
 8001d1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d1e:	4b0b      	ldr	r3, [pc, #44]	; (8001d4c <HAL_MspInit+0x4c>)
 8001d20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d22:	4a0a      	ldr	r2, [pc, #40]	; (8001d4c <HAL_MspInit+0x4c>)
 8001d24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d28:	6593      	str	r3, [r2, #88]	; 0x58
 8001d2a:	4b08      	ldr	r3, [pc, #32]	; (8001d4c <HAL_MspInit+0x4c>)
 8001d2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d32:	603b      	str	r3, [r7, #0]
 8001d34:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001d36:	2200      	movs	r2, #0
 8001d38:	210f      	movs	r1, #15
 8001d3a:	f06f 0001 	mvn.w	r0, #1
 8001d3e:	f000 fe41 	bl	80029c4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d42:	bf00      	nop
 8001d44:	3708      	adds	r7, #8
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}
 8001d4a:	bf00      	nop
 8001d4c:	40021000 	.word	0x40021000

08001d50 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b0ac      	sub	sp, #176	; 0xb0
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d58:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	601a      	str	r2, [r3, #0]
 8001d60:	605a      	str	r2, [r3, #4]
 8001d62:	609a      	str	r2, [r3, #8]
 8001d64:	60da      	str	r2, [r3, #12]
 8001d66:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001d68:	f107 0314 	add.w	r3, r7, #20
 8001d6c:	2288      	movs	r2, #136	; 0x88
 8001d6e:	2100      	movs	r1, #0
 8001d70:	4618      	mov	r0, r3
 8001d72:	f00f fc9e 	bl	80116b2 <memset>
  if(DFSDM1_Init == 0)
 8001d76:	4b25      	ldr	r3, [pc, #148]	; (8001e0c <HAL_DFSDM_ChannelMspInit+0xbc>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d142      	bne.n	8001e04 <HAL_DFSDM_ChannelMspInit+0xb4>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8001d7e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001d82:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8001d84:	2300      	movs	r3, #0
 8001d86:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d8a:	f107 0314 	add.w	r3, r7, #20
 8001d8e:	4618      	mov	r0, r3
 8001d90:	f003 f90a 	bl	8004fa8 <HAL_RCCEx_PeriphCLKConfig>
 8001d94:	4603      	mov	r3, r0
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d001      	beq.n	8001d9e <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 8001d9a:	f7ff fe09 	bl	80019b0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8001d9e:	4b1c      	ldr	r3, [pc, #112]	; (8001e10 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001da0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001da2:	4a1b      	ldr	r2, [pc, #108]	; (8001e10 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001da4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001da8:	6613      	str	r3, [r2, #96]	; 0x60
 8001daa:	4b19      	ldr	r3, [pc, #100]	; (8001e10 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001dac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001dae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001db2:	613b      	str	r3, [r7, #16]
 8001db4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001db6:	4b16      	ldr	r3, [pc, #88]	; (8001e10 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001db8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dba:	4a15      	ldr	r2, [pc, #84]	; (8001e10 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001dbc:	f043 0310 	orr.w	r3, r3, #16
 8001dc0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001dc2:	4b13      	ldr	r3, [pc, #76]	; (8001e10 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001dc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dc6:	f003 0310 	and.w	r3, r3, #16
 8001dca:	60fb      	str	r3, [r7, #12]
 8001dcc:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 8001dce:	f44f 7320 	mov.w	r3, #640	; 0x280
 8001dd2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dd6:	2302      	movs	r3, #2
 8001dd8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001de2:	2300      	movs	r3, #0
 8001de4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8001de8:	2306      	movs	r3, #6
 8001dea:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001dee:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001df2:	4619      	mov	r1, r3
 8001df4:	4807      	ldr	r0, [pc, #28]	; (8001e14 <HAL_DFSDM_ChannelMspInit+0xc4>)
 8001df6:	f000 ffa9 	bl	8002d4c <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8001dfa:	4b04      	ldr	r3, [pc, #16]	; (8001e0c <HAL_DFSDM_ChannelMspInit+0xbc>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	3301      	adds	r3, #1
 8001e00:	4a02      	ldr	r2, [pc, #8]	; (8001e0c <HAL_DFSDM_ChannelMspInit+0xbc>)
 8001e02:	6013      	str	r3, [r2, #0]
  }

}
 8001e04:	bf00      	nop
 8001e06:	37b0      	adds	r7, #176	; 0xb0
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bd80      	pop	{r7, pc}
 8001e0c:	20000bb4 	.word	0x20000bb4
 8001e10:	40021000 	.word	0x40021000
 8001e14:	48001000 	.word	0x48001000

08001e18 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b0ac      	sub	sp, #176	; 0xb0
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e20:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001e24:	2200      	movs	r2, #0
 8001e26:	601a      	str	r2, [r3, #0]
 8001e28:	605a      	str	r2, [r3, #4]
 8001e2a:	609a      	str	r2, [r3, #8]
 8001e2c:	60da      	str	r2, [r3, #12]
 8001e2e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001e30:	f107 0314 	add.w	r3, r7, #20
 8001e34:	2288      	movs	r2, #136	; 0x88
 8001e36:	2100      	movs	r1, #0
 8001e38:	4618      	mov	r0, r3
 8001e3a:	f00f fc3a 	bl	80116b2 <memset>
  if(hi2c->Instance==I2C2)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4a21      	ldr	r2, [pc, #132]	; (8001ec8 <HAL_I2C_MspInit+0xb0>)
 8001e44:	4293      	cmp	r3, r2
 8001e46:	d13b      	bne.n	8001ec0 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001e48:	2380      	movs	r3, #128	; 0x80
 8001e4a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e50:	f107 0314 	add.w	r3, r7, #20
 8001e54:	4618      	mov	r0, r3
 8001e56:	f003 f8a7 	bl	8004fa8 <HAL_RCCEx_PeriphCLKConfig>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d001      	beq.n	8001e64 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001e60:	f7ff fda6 	bl	80019b0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e64:	4b19      	ldr	r3, [pc, #100]	; (8001ecc <HAL_I2C_MspInit+0xb4>)
 8001e66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e68:	4a18      	ldr	r2, [pc, #96]	; (8001ecc <HAL_I2C_MspInit+0xb4>)
 8001e6a:	f043 0302 	orr.w	r3, r3, #2
 8001e6e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e70:	4b16      	ldr	r3, [pc, #88]	; (8001ecc <HAL_I2C_MspInit+0xb4>)
 8001e72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e74:	f003 0302 	and.w	r3, r3, #2
 8001e78:	613b      	str	r3, [r7, #16]
 8001e7a:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8001e7c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001e80:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e84:	2312      	movs	r3, #18
 8001e86:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e90:	2303      	movs	r3, #3
 8001e92:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001e96:	2304      	movs	r3, #4
 8001e98:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e9c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001ea0:	4619      	mov	r1, r3
 8001ea2:	480b      	ldr	r0, [pc, #44]	; (8001ed0 <HAL_I2C_MspInit+0xb8>)
 8001ea4:	f000 ff52 	bl	8002d4c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001ea8:	4b08      	ldr	r3, [pc, #32]	; (8001ecc <HAL_I2C_MspInit+0xb4>)
 8001eaa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eac:	4a07      	ldr	r2, [pc, #28]	; (8001ecc <HAL_I2C_MspInit+0xb4>)
 8001eae:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001eb2:	6593      	str	r3, [r2, #88]	; 0x58
 8001eb4:	4b05      	ldr	r3, [pc, #20]	; (8001ecc <HAL_I2C_MspInit+0xb4>)
 8001eb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eb8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ebc:	60fb      	str	r3, [r7, #12]
 8001ebe:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001ec0:	bf00      	nop
 8001ec2:	37b0      	adds	r7, #176	; 0xb0
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bd80      	pop	{r7, pc}
 8001ec8:	40005800 	.word	0x40005800
 8001ecc:	40021000 	.word	0x40021000
 8001ed0:	48000400 	.word	0x48000400

08001ed4 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b082      	sub	sp, #8
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C2)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4a0b      	ldr	r2, [pc, #44]	; (8001f10 <HAL_I2C_MspDeInit+0x3c>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d10f      	bne.n	8001f06 <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 8001ee6:	4b0b      	ldr	r3, [pc, #44]	; (8001f14 <HAL_I2C_MspDeInit+0x40>)
 8001ee8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eea:	4a0a      	ldr	r2, [pc, #40]	; (8001f14 <HAL_I2C_MspDeInit+0x40>)
 8001eec:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001ef0:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    HAL_GPIO_DeInit(INTERNAL_I2C2_SCL_GPIO_Port, INTERNAL_I2C2_SCL_Pin);
 8001ef2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001ef6:	4808      	ldr	r0, [pc, #32]	; (8001f18 <HAL_I2C_MspDeInit+0x44>)
 8001ef8:	f001 f8d2 	bl	80030a0 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(INTERNAL_I2C2_SDA_GPIO_Port, INTERNAL_I2C2_SDA_Pin);
 8001efc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f00:	4805      	ldr	r0, [pc, #20]	; (8001f18 <HAL_I2C_MspDeInit+0x44>)
 8001f02:	f001 f8cd 	bl	80030a0 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 8001f06:	bf00      	nop
 8001f08:	3708      	adds	r7, #8
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}
 8001f0e:	bf00      	nop
 8001f10:	40005800 	.word	0x40005800
 8001f14:	40021000 	.word	0x40021000
 8001f18:	48000400 	.word	0x48000400

08001f1c <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b08a      	sub	sp, #40	; 0x28
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f24:	f107 0314 	add.w	r3, r7, #20
 8001f28:	2200      	movs	r2, #0
 8001f2a:	601a      	str	r2, [r3, #0]
 8001f2c:	605a      	str	r2, [r3, #4]
 8001f2e:	609a      	str	r2, [r3, #8]
 8001f30:	60da      	str	r2, [r3, #12]
 8001f32:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4a17      	ldr	r2, [pc, #92]	; (8001f98 <HAL_QSPI_MspInit+0x7c>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d128      	bne.n	8001f90 <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001f3e:	4b17      	ldr	r3, [pc, #92]	; (8001f9c <HAL_QSPI_MspInit+0x80>)
 8001f40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f42:	4a16      	ldr	r2, [pc, #88]	; (8001f9c <HAL_QSPI_MspInit+0x80>)
 8001f44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f48:	6513      	str	r3, [r2, #80]	; 0x50
 8001f4a:	4b14      	ldr	r3, [pc, #80]	; (8001f9c <HAL_QSPI_MspInit+0x80>)
 8001f4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f52:	613b      	str	r3, [r7, #16]
 8001f54:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001f56:	4b11      	ldr	r3, [pc, #68]	; (8001f9c <HAL_QSPI_MspInit+0x80>)
 8001f58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f5a:	4a10      	ldr	r2, [pc, #64]	; (8001f9c <HAL_QSPI_MspInit+0x80>)
 8001f5c:	f043 0310 	orr.w	r3, r3, #16
 8001f60:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f62:	4b0e      	ldr	r3, [pc, #56]	; (8001f9c <HAL_QSPI_MspInit+0x80>)
 8001f64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f66:	f003 0310 	and.w	r3, r3, #16
 8001f6a:	60fb      	str	r3, [r7, #12]
 8001f6c:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 8001f6e:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8001f72:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f74:	2302      	movs	r3, #2
 8001f76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f78:	2300      	movs	r3, #0
 8001f7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f7c:	2303      	movs	r3, #3
 8001f7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001f80:	230a      	movs	r3, #10
 8001f82:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001f84:	f107 0314 	add.w	r3, r7, #20
 8001f88:	4619      	mov	r1, r3
 8001f8a:	4805      	ldr	r0, [pc, #20]	; (8001fa0 <HAL_QSPI_MspInit+0x84>)
 8001f8c:	f000 fede 	bl	8002d4c <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8001f90:	bf00      	nop
 8001f92:	3728      	adds	r7, #40	; 0x28
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bd80      	pop	{r7, pc}
 8001f98:	a0001000 	.word	0xa0001000
 8001f9c:	40021000 	.word	0x40021000
 8001fa0:	48001000 	.word	0x48001000

08001fa4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b0a4      	sub	sp, #144	; 0x90
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001fac:	f107 0308 	add.w	r3, r7, #8
 8001fb0:	2288      	movs	r2, #136	; 0x88
 8001fb2:	2100      	movs	r1, #0
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	f00f fb7c 	bl	80116b2 <memset>
  if(hrtc->Instance==RTC)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4a10      	ldr	r2, [pc, #64]	; (8002000 <HAL_RTC_MspInit+0x5c>)
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	d118      	bne.n	8001ff6 <HAL_RTC_MspInit+0x52>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001fc4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001fc8:	60bb      	str	r3, [r7, #8]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001fca:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001fce:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001fd2:	f107 0308 	add.w	r3, r7, #8
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	f002 ffe6 	bl	8004fa8 <HAL_RCCEx_PeriphCLKConfig>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d001      	beq.n	8001fe6 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8001fe2:	f7ff fce5 	bl	80019b0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001fe6:	4b07      	ldr	r3, [pc, #28]	; (8002004 <HAL_RTC_MspInit+0x60>)
 8001fe8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fec:	4a05      	ldr	r2, [pc, #20]	; (8002004 <HAL_RTC_MspInit+0x60>)
 8001fee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ff2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001ff6:	bf00      	nop
 8001ff8:	3790      	adds	r7, #144	; 0x90
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}
 8001ffe:	bf00      	nop
 8002000:	40002800 	.word	0x40002800
 8002004:	40021000 	.word	0x40021000

08002008 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b08a      	sub	sp, #40	; 0x28
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002010:	f107 0314 	add.w	r3, r7, #20
 8002014:	2200      	movs	r2, #0
 8002016:	601a      	str	r2, [r3, #0]
 8002018:	605a      	str	r2, [r3, #4]
 800201a:	609a      	str	r2, [r3, #8]
 800201c:	60da      	str	r2, [r3, #12]
 800201e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4a1b      	ldr	r2, [pc, #108]	; (8002094 <HAL_SPI_MspInit+0x8c>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d130      	bne.n	800208c <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800202a:	4b1b      	ldr	r3, [pc, #108]	; (8002098 <HAL_SPI_MspInit+0x90>)
 800202c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800202e:	4a1a      	ldr	r2, [pc, #104]	; (8002098 <HAL_SPI_MspInit+0x90>)
 8002030:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002034:	6593      	str	r3, [r2, #88]	; 0x58
 8002036:	4b18      	ldr	r3, [pc, #96]	; (8002098 <HAL_SPI_MspInit+0x90>)
 8002038:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800203a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800203e:	613b      	str	r3, [r7, #16]
 8002040:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002042:	4b15      	ldr	r3, [pc, #84]	; (8002098 <HAL_SPI_MspInit+0x90>)
 8002044:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002046:	4a14      	ldr	r2, [pc, #80]	; (8002098 <HAL_SPI_MspInit+0x90>)
 8002048:	f043 0304 	orr.w	r3, r3, #4
 800204c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800204e:	4b12      	ldr	r3, [pc, #72]	; (8002098 <HAL_SPI_MspInit+0x90>)
 8002050:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002052:	f003 0304 	and.w	r3, r3, #4
 8002056:	60fb      	str	r3, [r7, #12]
 8002058:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 800205a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800205e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002060:	2302      	movs	r3, #2
 8002062:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002064:	2300      	movs	r3, #0
 8002066:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002068:	2303      	movs	r3, #3
 800206a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800206c:	2306      	movs	r3, #6
 800206e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002070:	f107 0314 	add.w	r3, r7, #20
 8002074:	4619      	mov	r1, r3
 8002076:	4809      	ldr	r0, [pc, #36]	; (800209c <HAL_SPI_MspInit+0x94>)
 8002078:	f000 fe68 	bl	8002d4c <HAL_GPIO_Init>

    /* SPI3 interrupt Init */
    HAL_NVIC_SetPriority(SPI3_IRQn, 5, 0);
 800207c:	2200      	movs	r2, #0
 800207e:	2105      	movs	r1, #5
 8002080:	2033      	movs	r0, #51	; 0x33
 8002082:	f000 fc9f 	bl	80029c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8002086:	2033      	movs	r0, #51	; 0x33
 8002088:	f000 fcb8 	bl	80029fc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800208c:	bf00      	nop
 800208e:	3728      	adds	r7, #40	; 0x28
 8002090:	46bd      	mov	sp, r7
 8002092:	bd80      	pop	{r7, pc}
 8002094:	40003c00 	.word	0x40003c00
 8002098:	40021000 	.word	0x40021000
 800209c:	48000800 	.word	0x48000800

080020a0 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b082      	sub	sp, #8
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI3)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4a0a      	ldr	r2, [pc, #40]	; (80020d8 <HAL_SPI_MspDeInit+0x38>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d10d      	bne.n	80020ce <HAL_SPI_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN SPI3_MspDeInit 0 */

  /* USER CODE END SPI3_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI3_CLK_DISABLE();
 80020b2:	4b0a      	ldr	r3, [pc, #40]	; (80020dc <HAL_SPI_MspDeInit+0x3c>)
 80020b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020b6:	4a09      	ldr	r2, [pc, #36]	; (80020dc <HAL_SPI_MspDeInit+0x3c>)
 80020b8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80020bc:	6593      	str	r3, [r2, #88]	; 0x58
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    HAL_GPIO_DeInit(GPIOC, INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin);
 80020be:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 80020c2:	4807      	ldr	r0, [pc, #28]	; (80020e0 <HAL_SPI_MspDeInit+0x40>)
 80020c4:	f000 ffec 	bl	80030a0 <HAL_GPIO_DeInit>

    /* SPI3 interrupt DeInit */
    HAL_NVIC_DisableIRQ(SPI3_IRQn);
 80020c8:	2033      	movs	r0, #51	; 0x33
 80020ca:	f000 fca5 	bl	8002a18 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN SPI3_MspDeInit 1 */

  /* USER CODE END SPI3_MspDeInit 1 */
  }

}
 80020ce:	bf00      	nop
 80020d0:	3708      	adds	r7, #8
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd80      	pop	{r7, pc}
 80020d6:	bf00      	nop
 80020d8:	40003c00 	.word	0x40003c00
 80020dc:	40021000 	.word	0x40021000
 80020e0:	48000800 	.word	0x48000800

080020e4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b084      	sub	sp, #16
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4a0d      	ldr	r2, [pc, #52]	; (8002128 <HAL_TIM_Base_MspInit+0x44>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d113      	bne.n	800211e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 80020f6:	4b0d      	ldr	r3, [pc, #52]	; (800212c <HAL_TIM_Base_MspInit+0x48>)
 80020f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020fa:	4a0c      	ldr	r2, [pc, #48]	; (800212c <HAL_TIM_Base_MspInit+0x48>)
 80020fc:	f043 0320 	orr.w	r3, r3, #32
 8002100:	6593      	str	r3, [r2, #88]	; 0x58
 8002102:	4b0a      	ldr	r3, [pc, #40]	; (800212c <HAL_TIM_Base_MspInit+0x48>)
 8002104:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002106:	f003 0320 	and.w	r3, r3, #32
 800210a:	60fb      	str	r3, [r7, #12]
 800210c:	68fb      	ldr	r3, [r7, #12]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 5, 0);
 800210e:	2200      	movs	r2, #0
 8002110:	2105      	movs	r1, #5
 8002112:	2037      	movs	r0, #55	; 0x37
 8002114:	f000 fc56 	bl	80029c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8002118:	2037      	movs	r0, #55	; 0x37
 800211a:	f000 fc6f 	bl	80029fc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 800211e:	bf00      	nop
 8002120:	3710      	adds	r7, #16
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}
 8002126:	bf00      	nop
 8002128:	40001400 	.word	0x40001400
 800212c:	40021000 	.word	0x40021000

08002130 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b0ae      	sub	sp, #184	; 0xb8
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002138:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800213c:	2200      	movs	r2, #0
 800213e:	601a      	str	r2, [r3, #0]
 8002140:	605a      	str	r2, [r3, #4]
 8002142:	609a      	str	r2, [r3, #8]
 8002144:	60da      	str	r2, [r3, #12]
 8002146:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002148:	f107 031c 	add.w	r3, r7, #28
 800214c:	2288      	movs	r2, #136	; 0x88
 800214e:	2100      	movs	r1, #0
 8002150:	4618      	mov	r0, r3
 8002152:	f00f faae 	bl	80116b2 <memset>
  if(huart->Instance==USART1)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	4a46      	ldr	r2, [pc, #280]	; (8002274 <HAL_UART_MspInit+0x144>)
 800215c:	4293      	cmp	r3, r2
 800215e:	d143      	bne.n	80021e8 <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002160:	2301      	movs	r3, #1
 8002162:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002164:	2300      	movs	r3, #0
 8002166:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002168:	f107 031c 	add.w	r3, r7, #28
 800216c:	4618      	mov	r0, r3
 800216e:	f002 ff1b 	bl	8004fa8 <HAL_RCCEx_PeriphCLKConfig>
 8002172:	4603      	mov	r3, r0
 8002174:	2b00      	cmp	r3, #0
 8002176:	d001      	beq.n	800217c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002178:	f7ff fc1a 	bl	80019b0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800217c:	4b3e      	ldr	r3, [pc, #248]	; (8002278 <HAL_UART_MspInit+0x148>)
 800217e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002180:	4a3d      	ldr	r2, [pc, #244]	; (8002278 <HAL_UART_MspInit+0x148>)
 8002182:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002186:	6613      	str	r3, [r2, #96]	; 0x60
 8002188:	4b3b      	ldr	r3, [pc, #236]	; (8002278 <HAL_UART_MspInit+0x148>)
 800218a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800218c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002190:	61bb      	str	r3, [r7, #24]
 8002192:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002194:	4b38      	ldr	r3, [pc, #224]	; (8002278 <HAL_UART_MspInit+0x148>)
 8002196:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002198:	4a37      	ldr	r2, [pc, #220]	; (8002278 <HAL_UART_MspInit+0x148>)
 800219a:	f043 0302 	orr.w	r3, r3, #2
 800219e:	64d3      	str	r3, [r2, #76]	; 0x4c
 80021a0:	4b35      	ldr	r3, [pc, #212]	; (8002278 <HAL_UART_MspInit+0x148>)
 80021a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021a4:	f003 0302 	and.w	r3, r3, #2
 80021a8:	617b      	str	r3, [r7, #20]
 80021aa:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 80021ac:	23c0      	movs	r3, #192	; 0xc0
 80021ae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021b2:	2302      	movs	r3, #2
 80021b4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021b8:	2300      	movs	r3, #0
 80021ba:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021be:	2303      	movs	r3, #3
 80021c0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80021c4:	2307      	movs	r3, #7
 80021c6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021ca:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80021ce:	4619      	mov	r1, r3
 80021d0:	482a      	ldr	r0, [pc, #168]	; (800227c <HAL_UART_MspInit+0x14c>)
 80021d2:	f000 fdbb 	bl	8002d4c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80021d6:	2200      	movs	r2, #0
 80021d8:	2105      	movs	r1, #5
 80021da:	2025      	movs	r0, #37	; 0x25
 80021dc:	f000 fbf2 	bl	80029c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80021e0:	2025      	movs	r0, #37	; 0x25
 80021e2:	f000 fc0b 	bl	80029fc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80021e6:	e040      	b.n	800226a <HAL_UART_MspInit+0x13a>
  else if(huart->Instance==USART3)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4a24      	ldr	r2, [pc, #144]	; (8002280 <HAL_UART_MspInit+0x150>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d13b      	bne.n	800226a <HAL_UART_MspInit+0x13a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80021f2:	2304      	movs	r3, #4
 80021f4:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80021f6:	2300      	movs	r3, #0
 80021f8:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80021fa:	f107 031c 	add.w	r3, r7, #28
 80021fe:	4618      	mov	r0, r3
 8002200:	f002 fed2 	bl	8004fa8 <HAL_RCCEx_PeriphCLKConfig>
 8002204:	4603      	mov	r3, r0
 8002206:	2b00      	cmp	r3, #0
 8002208:	d001      	beq.n	800220e <HAL_UART_MspInit+0xde>
      Error_Handler();
 800220a:	f7ff fbd1 	bl	80019b0 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800220e:	4b1a      	ldr	r3, [pc, #104]	; (8002278 <HAL_UART_MspInit+0x148>)
 8002210:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002212:	4a19      	ldr	r2, [pc, #100]	; (8002278 <HAL_UART_MspInit+0x148>)
 8002214:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002218:	6593      	str	r3, [r2, #88]	; 0x58
 800221a:	4b17      	ldr	r3, [pc, #92]	; (8002278 <HAL_UART_MspInit+0x148>)
 800221c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800221e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002222:	613b      	str	r3, [r7, #16]
 8002224:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002226:	4b14      	ldr	r3, [pc, #80]	; (8002278 <HAL_UART_MspInit+0x148>)
 8002228:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800222a:	4a13      	ldr	r2, [pc, #76]	; (8002278 <HAL_UART_MspInit+0x148>)
 800222c:	f043 0308 	orr.w	r3, r3, #8
 8002230:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002232:	4b11      	ldr	r3, [pc, #68]	; (8002278 <HAL_UART_MspInit+0x148>)
 8002234:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002236:	f003 0308 	and.w	r3, r3, #8
 800223a:	60fb      	str	r3, [r7, #12]
 800223c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 800223e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002242:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002246:	2302      	movs	r3, #2
 8002248:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800224c:	2300      	movs	r3, #0
 800224e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002252:	2303      	movs	r3, #3
 8002254:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002258:	2307      	movs	r3, #7
 800225a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800225e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002262:	4619      	mov	r1, r3
 8002264:	4807      	ldr	r0, [pc, #28]	; (8002284 <HAL_UART_MspInit+0x154>)
 8002266:	f000 fd71 	bl	8002d4c <HAL_GPIO_Init>
}
 800226a:	bf00      	nop
 800226c:	37b8      	adds	r7, #184	; 0xb8
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}
 8002272:	bf00      	nop
 8002274:	40013800 	.word	0x40013800
 8002278:	40021000 	.word	0x40021000
 800227c:	48000400 	.word	0x48000400
 8002280:	40004800 	.word	0x40004800
 8002284:	48000c00 	.word	0x48000c00

08002288 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b0ac      	sub	sp, #176	; 0xb0
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002290:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002294:	2200      	movs	r2, #0
 8002296:	601a      	str	r2, [r3, #0]
 8002298:	605a      	str	r2, [r3, #4]
 800229a:	609a      	str	r2, [r3, #8]
 800229c:	60da      	str	r2, [r3, #12]
 800229e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80022a0:	f107 0314 	add.w	r3, r7, #20
 80022a4:	2288      	movs	r2, #136	; 0x88
 80022a6:	2100      	movs	r1, #0
 80022a8:	4618      	mov	r0, r3
 80022aa:	f00f fa02 	bl	80116b2 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80022b6:	d17c      	bne.n	80023b2 <HAL_PCD_MspInit+0x12a>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80022b8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80022bc:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 80022be:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80022c2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80022c6:	2301      	movs	r3, #1
 80022c8:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80022ca:	2301      	movs	r3, #1
 80022cc:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 80022ce:	2318      	movs	r3, #24
 80022d0:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80022d2:	2307      	movs	r3, #7
 80022d4:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80022d6:	2302      	movs	r3, #2
 80022d8:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80022da:	2302      	movs	r3, #2
 80022dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 80022de:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80022e2:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80022e4:	f107 0314 	add.w	r3, r7, #20
 80022e8:	4618      	mov	r0, r3
 80022ea:	f002 fe5d 	bl	8004fa8 <HAL_RCCEx_PeriphCLKConfig>
 80022ee:	4603      	mov	r3, r0
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d001      	beq.n	80022f8 <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 80022f4:	f7ff fb5c 	bl	80019b0 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022f8:	4b30      	ldr	r3, [pc, #192]	; (80023bc <HAL_PCD_MspInit+0x134>)
 80022fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022fc:	4a2f      	ldr	r2, [pc, #188]	; (80023bc <HAL_PCD_MspInit+0x134>)
 80022fe:	f043 0301 	orr.w	r3, r3, #1
 8002302:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002304:	4b2d      	ldr	r3, [pc, #180]	; (80023bc <HAL_PCD_MspInit+0x134>)
 8002306:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002308:	f003 0301 	and.w	r3, r3, #1
 800230c:	613b      	str	r3, [r7, #16]
 800230e:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 8002310:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002314:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002318:	2300      	movs	r3, #0
 800231a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800231e:	2300      	movs	r3, #0
 8002320:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002324:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002328:	4619      	mov	r1, r3
 800232a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800232e:	f000 fd0d 	bl	8002d4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8002332:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8002336:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800233a:	2302      	movs	r3, #2
 800233c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002340:	2300      	movs	r3, #0
 8002342:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002346:	2303      	movs	r3, #3
 8002348:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800234c:	230a      	movs	r3, #10
 800234e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002352:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002356:	4619      	mov	r1, r3
 8002358:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800235c:	f000 fcf6 	bl	8002d4c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8002360:	4b16      	ldr	r3, [pc, #88]	; (80023bc <HAL_PCD_MspInit+0x134>)
 8002362:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002364:	4a15      	ldr	r2, [pc, #84]	; (80023bc <HAL_PCD_MspInit+0x134>)
 8002366:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800236a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800236c:	4b13      	ldr	r3, [pc, #76]	; (80023bc <HAL_PCD_MspInit+0x134>)
 800236e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002370:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002374:	60fb      	str	r3, [r7, #12]
 8002376:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002378:	4b10      	ldr	r3, [pc, #64]	; (80023bc <HAL_PCD_MspInit+0x134>)
 800237a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800237c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002380:	2b00      	cmp	r3, #0
 8002382:	d114      	bne.n	80023ae <HAL_PCD_MspInit+0x126>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002384:	4b0d      	ldr	r3, [pc, #52]	; (80023bc <HAL_PCD_MspInit+0x134>)
 8002386:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002388:	4a0c      	ldr	r2, [pc, #48]	; (80023bc <HAL_PCD_MspInit+0x134>)
 800238a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800238e:	6593      	str	r3, [r2, #88]	; 0x58
 8002390:	4b0a      	ldr	r3, [pc, #40]	; (80023bc <HAL_PCD_MspInit+0x134>)
 8002392:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002394:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002398:	60bb      	str	r3, [r7, #8]
 800239a:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 800239c:	f001 ff18 	bl	80041d0 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 80023a0:	4b06      	ldr	r3, [pc, #24]	; (80023bc <HAL_PCD_MspInit+0x134>)
 80023a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023a4:	4a05      	ldr	r2, [pc, #20]	; (80023bc <HAL_PCD_MspInit+0x134>)
 80023a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023aa:	6593      	str	r3, [r2, #88]	; 0x58
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80023ac:	e001      	b.n	80023b2 <HAL_PCD_MspInit+0x12a>
      HAL_PWREx_EnableVddUSB();
 80023ae:	f001 ff0f 	bl	80041d0 <HAL_PWREx_EnableVddUSB>
}
 80023b2:	bf00      	nop
 80023b4:	37b0      	adds	r7, #176	; 0xb0
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bd80      	pop	{r7, pc}
 80023ba:	bf00      	nop
 80023bc:	40021000 	.word	0x40021000

080023c0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b08e      	sub	sp, #56	; 0x38
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80023c8:	2300      	movs	r3, #0
 80023ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80023ce:	4b34      	ldr	r3, [pc, #208]	; (80024a0 <HAL_InitTick+0xe0>)
 80023d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023d2:	4a33      	ldr	r2, [pc, #204]	; (80024a0 <HAL_InitTick+0xe0>)
 80023d4:	f043 0310 	orr.w	r3, r3, #16
 80023d8:	6593      	str	r3, [r2, #88]	; 0x58
 80023da:	4b31      	ldr	r3, [pc, #196]	; (80024a0 <HAL_InitTick+0xe0>)
 80023dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023de:	f003 0310 	and.w	r3, r3, #16
 80023e2:	60fb      	str	r3, [r7, #12]
 80023e4:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80023e6:	f107 0210 	add.w	r2, r7, #16
 80023ea:	f107 0314 	add.w	r3, r7, #20
 80023ee:	4611      	mov	r1, r2
 80023f0:	4618      	mov	r0, r3
 80023f2:	f002 fd47 	bl	8004e84 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80023f6:	6a3b      	ldr	r3, [r7, #32]
 80023f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80023fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d103      	bne.n	8002408 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002400:	f002 fd14 	bl	8004e2c <HAL_RCC_GetPCLK1Freq>
 8002404:	6378      	str	r0, [r7, #52]	; 0x34
 8002406:	e004      	b.n	8002412 <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002408:	f002 fd10 	bl	8004e2c <HAL_RCC_GetPCLK1Freq>
 800240c:	4603      	mov	r3, r0
 800240e:	005b      	lsls	r3, r3, #1
 8002410:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002412:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002414:	4a23      	ldr	r2, [pc, #140]	; (80024a4 <HAL_InitTick+0xe4>)
 8002416:	fba2 2303 	umull	r2, r3, r2, r3
 800241a:	0c9b      	lsrs	r3, r3, #18
 800241c:	3b01      	subs	r3, #1
 800241e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002420:	4b21      	ldr	r3, [pc, #132]	; (80024a8 <HAL_InitTick+0xe8>)
 8002422:	4a22      	ldr	r2, [pc, #136]	; (80024ac <HAL_InitTick+0xec>)
 8002424:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002426:	4b20      	ldr	r3, [pc, #128]	; (80024a8 <HAL_InitTick+0xe8>)
 8002428:	f240 32e7 	movw	r2, #999	; 0x3e7
 800242c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800242e:	4a1e      	ldr	r2, [pc, #120]	; (80024a8 <HAL_InitTick+0xe8>)
 8002430:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002432:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002434:	4b1c      	ldr	r3, [pc, #112]	; (80024a8 <HAL_InitTick+0xe8>)
 8002436:	2200      	movs	r2, #0
 8002438:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800243a:	4b1b      	ldr	r3, [pc, #108]	; (80024a8 <HAL_InitTick+0xe8>)
 800243c:	2200      	movs	r2, #0
 800243e:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002440:	4b19      	ldr	r3, [pc, #100]	; (80024a8 <HAL_InitTick+0xe8>)
 8002442:	2200      	movs	r2, #0
 8002444:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8002446:	4818      	ldr	r0, [pc, #96]	; (80024a8 <HAL_InitTick+0xe8>)
 8002448:	f005 f8c1 	bl	80075ce <HAL_TIM_Base_Init>
 800244c:	4603      	mov	r3, r0
 800244e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8002452:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002456:	2b00      	cmp	r3, #0
 8002458:	d11b      	bne.n	8002492 <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 800245a:	4813      	ldr	r0, [pc, #76]	; (80024a8 <HAL_InitTick+0xe8>)
 800245c:	f005 f90e 	bl	800767c <HAL_TIM_Base_Start_IT>
 8002460:	4603      	mov	r3, r0
 8002462:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8002466:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800246a:	2b00      	cmp	r3, #0
 800246c:	d111      	bne.n	8002492 <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800246e:	2036      	movs	r0, #54	; 0x36
 8002470:	f000 fac4 	bl	80029fc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2b0f      	cmp	r3, #15
 8002478:	d808      	bhi.n	800248c <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 800247a:	2200      	movs	r2, #0
 800247c:	6879      	ldr	r1, [r7, #4]
 800247e:	2036      	movs	r0, #54	; 0x36
 8002480:	f000 faa0 	bl	80029c4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002484:	4a0a      	ldr	r2, [pc, #40]	; (80024b0 <HAL_InitTick+0xf0>)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6013      	str	r3, [r2, #0]
 800248a:	e002      	b.n	8002492 <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 800248c:	2301      	movs	r3, #1
 800248e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8002492:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8002496:	4618      	mov	r0, r3
 8002498:	3738      	adds	r7, #56	; 0x38
 800249a:	46bd      	mov	sp, r7
 800249c:	bd80      	pop	{r7, pc}
 800249e:	bf00      	nop
 80024a0:	40021000 	.word	0x40021000
 80024a4:	431bde83 	.word	0x431bde83
 80024a8:	20000bb8 	.word	0x20000bb8
 80024ac:	40001000 	.word	0x40001000
 80024b0:	2000000c 	.word	0x2000000c

080024b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80024b4:	b480      	push	{r7}
 80024b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80024b8:	e7fe      	b.n	80024b8 <NMI_Handler+0x4>

080024ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80024ba:	b480      	push	{r7}
 80024bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80024be:	e7fe      	b.n	80024be <HardFault_Handler+0x4>

080024c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80024c0:	b480      	push	{r7}
 80024c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80024c4:	e7fe      	b.n	80024c4 <MemManage_Handler+0x4>

080024c6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80024c6:	b480      	push	{r7}
 80024c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80024ca:	e7fe      	b.n	80024ca <BusFault_Handler+0x4>

080024cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80024cc:	b480      	push	{r7}
 80024ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80024d0:	e7fe      	b.n	80024d0 <UsageFault_Handler+0x4>

080024d2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80024d2:	b480      	push	{r7}
 80024d4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80024d6:	bf00      	nop
 80024d8:	46bd      	mov	sp, r7
 80024da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024de:	4770      	bx	lr

080024e0 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ISM43362_DRDY_EXTI1_Pin);
 80024e4:	2002      	movs	r0, #2
 80024e6:	f000 feff 	bl	80032e8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80024ea:	bf00      	nop
 80024ec:	bd80      	pop	{r7, pc}

080024ee <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80024ee:	b580      	push	{r7, lr}
 80024f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 80024f2:	2020      	movs	r0, #32
 80024f4:	f000 fef8 	bl	80032e8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SPBTLE_RF_IRQ_EXTI6_Pin);
 80024f8:	2040      	movs	r0, #64	; 0x40
 80024fa:	f000 fef5 	bl	80032e8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 80024fe:	2080      	movs	r0, #128	; 0x80
 8002500:	f000 fef2 	bl	80032e8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 8002504:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002508:	f000 feee 	bl	80032e8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800250c:	bf00      	nop
 800250e:	bd80      	pop	{r7, pc}

08002510 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002514:	4802      	ldr	r0, [pc, #8]	; (8002520 <USART1_IRQHandler+0x10>)
 8002516:	f005 fccf 	bl	8007eb8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800251a:	bf00      	nop
 800251c:	bd80      	pop	{r7, pc}
 800251e:	bf00      	nop
 8002520:	2000026c 	.word	0x2000026c

08002524 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI0_Pin);
 8002528:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800252c:	f000 fedc 	bl	80032e8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 8002530:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8002534:	f000 fed8 	bl	80032e8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BOTON_Pin);
 8002538:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800253c:	f000 fed4 	bl	80032e8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 8002540:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002544:	f000 fed0 	bl	80032e8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 8002548:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800254c:	f000 fecc 	bl	80032e8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002550:	bf00      	nop
 8002552:	bd80      	pop	{r7, pc}

08002554 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002558:	4802      	ldr	r0, [pc, #8]	; (8002564 <TIM6_DAC_IRQHandler+0x10>)
 800255a:	f005 f8ff 	bl	800775c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800255e:	bf00      	nop
 8002560:	bd80      	pop	{r7, pc}
 8002562:	bf00      	nop
 8002564:	20000bb8 	.word	0x20000bb8

08002568 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */
  ulHighFrequencyTimerTicks++;
 800256c:	4b04      	ldr	r3, [pc, #16]	; (8002580 <TIM7_IRQHandler+0x18>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	3301      	adds	r3, #1
 8002572:	4a03      	ldr	r2, [pc, #12]	; (8002580 <TIM7_IRQHandler+0x18>)
 8002574:	6013      	str	r3, [r2, #0]
  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002576:	4803      	ldr	r0, [pc, #12]	; (8002584 <TIM7_IRQHandler+0x1c>)
 8002578:	f005 f8f0 	bl	800775c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800257c:	bf00      	nop
 800257e:	bd80      	pop	{r7, pc}
 8002580:	200007c0 	.word	0x200007c0
 8002584:	20000220 	.word	0x20000220

08002588 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002588:	b480      	push	{r7}
 800258a:	af00      	add	r7, sp, #0
  return 1;
 800258c:	2301      	movs	r3, #1
}
 800258e:	4618      	mov	r0, r3
 8002590:	46bd      	mov	sp, r7
 8002592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002596:	4770      	bx	lr

08002598 <_kill>:

int _kill(int pid, int sig)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b082      	sub	sp, #8
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
 80025a0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80025a2:	f00e ff19 	bl	80113d8 <__errno>
 80025a6:	4603      	mov	r3, r0
 80025a8:	2216      	movs	r2, #22
 80025aa:	601a      	str	r2, [r3, #0]
  return -1;
 80025ac:	f04f 33ff 	mov.w	r3, #4294967295
}
 80025b0:	4618      	mov	r0, r3
 80025b2:	3708      	adds	r7, #8
 80025b4:	46bd      	mov	sp, r7
 80025b6:	bd80      	pop	{r7, pc}

080025b8 <_exit>:

void _exit (int status)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b082      	sub	sp, #8
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80025c0:	f04f 31ff 	mov.w	r1, #4294967295
 80025c4:	6878      	ldr	r0, [r7, #4]
 80025c6:	f7ff ffe7 	bl	8002598 <_kill>
  while (1) {}    /* Make sure we hang here */
 80025ca:	e7fe      	b.n	80025ca <_exit+0x12>

080025cc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b086      	sub	sp, #24
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	60f8      	str	r0, [r7, #12]
 80025d4:	60b9      	str	r1, [r7, #8]
 80025d6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025d8:	2300      	movs	r3, #0
 80025da:	617b      	str	r3, [r7, #20]
 80025dc:	e00a      	b.n	80025f4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80025de:	f3af 8000 	nop.w
 80025e2:	4601      	mov	r1, r0
 80025e4:	68bb      	ldr	r3, [r7, #8]
 80025e6:	1c5a      	adds	r2, r3, #1
 80025e8:	60ba      	str	r2, [r7, #8]
 80025ea:	b2ca      	uxtb	r2, r1
 80025ec:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025ee:	697b      	ldr	r3, [r7, #20]
 80025f0:	3301      	adds	r3, #1
 80025f2:	617b      	str	r3, [r7, #20]
 80025f4:	697a      	ldr	r2, [r7, #20]
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	429a      	cmp	r2, r3
 80025fa:	dbf0      	blt.n	80025de <_read+0x12>
  }

  return len;
 80025fc:	687b      	ldr	r3, [r7, #4]
}
 80025fe:	4618      	mov	r0, r3
 8002600:	3718      	adds	r7, #24
 8002602:	46bd      	mov	sp, r7
 8002604:	bd80      	pop	{r7, pc}

08002606 <_close>:
  }
  return len;
}

int _close(int file)
{
 8002606:	b480      	push	{r7}
 8002608:	b083      	sub	sp, #12
 800260a:	af00      	add	r7, sp, #0
 800260c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800260e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002612:	4618      	mov	r0, r3
 8002614:	370c      	adds	r7, #12
 8002616:	46bd      	mov	sp, r7
 8002618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261c:	4770      	bx	lr

0800261e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800261e:	b480      	push	{r7}
 8002620:	b083      	sub	sp, #12
 8002622:	af00      	add	r7, sp, #0
 8002624:	6078      	str	r0, [r7, #4]
 8002626:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800262e:	605a      	str	r2, [r3, #4]
  return 0;
 8002630:	2300      	movs	r3, #0
}
 8002632:	4618      	mov	r0, r3
 8002634:	370c      	adds	r7, #12
 8002636:	46bd      	mov	sp, r7
 8002638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263c:	4770      	bx	lr

0800263e <_isatty>:

int _isatty(int file)
{
 800263e:	b480      	push	{r7}
 8002640:	b083      	sub	sp, #12
 8002642:	af00      	add	r7, sp, #0
 8002644:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002646:	2301      	movs	r3, #1
}
 8002648:	4618      	mov	r0, r3
 800264a:	370c      	adds	r7, #12
 800264c:	46bd      	mov	sp, r7
 800264e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002652:	4770      	bx	lr

08002654 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002654:	b480      	push	{r7}
 8002656:	b085      	sub	sp, #20
 8002658:	af00      	add	r7, sp, #0
 800265a:	60f8      	str	r0, [r7, #12]
 800265c:	60b9      	str	r1, [r7, #8]
 800265e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002660:	2300      	movs	r3, #0
}
 8002662:	4618      	mov	r0, r3
 8002664:	3714      	adds	r7, #20
 8002666:	46bd      	mov	sp, r7
 8002668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266c:	4770      	bx	lr
	...

08002670 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b086      	sub	sp, #24
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002678:	4a14      	ldr	r2, [pc, #80]	; (80026cc <_sbrk+0x5c>)
 800267a:	4b15      	ldr	r3, [pc, #84]	; (80026d0 <_sbrk+0x60>)
 800267c:	1ad3      	subs	r3, r2, r3
 800267e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002680:	697b      	ldr	r3, [r7, #20]
 8002682:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002684:	4b13      	ldr	r3, [pc, #76]	; (80026d4 <_sbrk+0x64>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d102      	bne.n	8002692 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800268c:	4b11      	ldr	r3, [pc, #68]	; (80026d4 <_sbrk+0x64>)
 800268e:	4a12      	ldr	r2, [pc, #72]	; (80026d8 <_sbrk+0x68>)
 8002690:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002692:	4b10      	ldr	r3, [pc, #64]	; (80026d4 <_sbrk+0x64>)
 8002694:	681a      	ldr	r2, [r3, #0]
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	4413      	add	r3, r2
 800269a:	693a      	ldr	r2, [r7, #16]
 800269c:	429a      	cmp	r2, r3
 800269e:	d207      	bcs.n	80026b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80026a0:	f00e fe9a 	bl	80113d8 <__errno>
 80026a4:	4603      	mov	r3, r0
 80026a6:	220c      	movs	r2, #12
 80026a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80026aa:	f04f 33ff 	mov.w	r3, #4294967295
 80026ae:	e009      	b.n	80026c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80026b0:	4b08      	ldr	r3, [pc, #32]	; (80026d4 <_sbrk+0x64>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80026b6:	4b07      	ldr	r3, [pc, #28]	; (80026d4 <_sbrk+0x64>)
 80026b8:	681a      	ldr	r2, [r3, #0]
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	4413      	add	r3, r2
 80026be:	4a05      	ldr	r2, [pc, #20]	; (80026d4 <_sbrk+0x64>)
 80026c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80026c2:	68fb      	ldr	r3, [r7, #12]
}
 80026c4:	4618      	mov	r0, r3
 80026c6:	3718      	adds	r7, #24
 80026c8:	46bd      	mov	sp, r7
 80026ca:	bd80      	pop	{r7, pc}
 80026cc:	20018000 	.word	0x20018000
 80026d0:	00000400 	.word	0x00000400
 80026d4:	20000c04 	.word	0x20000c04
 80026d8:	20004b38 	.word	0x20004b38

080026dc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80026dc:	b480      	push	{r7}
 80026de:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80026e0:	4b06      	ldr	r3, [pc, #24]	; (80026fc <SystemInit+0x20>)
 80026e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026e6:	4a05      	ldr	r2, [pc, #20]	; (80026fc <SystemInit+0x20>)
 80026e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80026ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80026f0:	bf00      	nop
 80026f2:	46bd      	mov	sp, r7
 80026f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f8:	4770      	bx	lr
 80026fa:	bf00      	nop
 80026fc:	e000ed00 	.word	0xe000ed00

08002700 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002700:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002738 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002704:	f7ff ffea 	bl	80026dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002708:	480c      	ldr	r0, [pc, #48]	; (800273c <LoopForever+0x6>)
  ldr r1, =_edata
 800270a:	490d      	ldr	r1, [pc, #52]	; (8002740 <LoopForever+0xa>)
  ldr r2, =_sidata
 800270c:	4a0d      	ldr	r2, [pc, #52]	; (8002744 <LoopForever+0xe>)
  movs r3, #0
 800270e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002710:	e002      	b.n	8002718 <LoopCopyDataInit>

08002712 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002712:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002714:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002716:	3304      	adds	r3, #4

08002718 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002718:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800271a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800271c:	d3f9      	bcc.n	8002712 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800271e:	4a0a      	ldr	r2, [pc, #40]	; (8002748 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002720:	4c0a      	ldr	r4, [pc, #40]	; (800274c <LoopForever+0x16>)
  movs r3, #0
 8002722:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002724:	e001      	b.n	800272a <LoopFillZerobss>

08002726 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002726:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002728:	3204      	adds	r2, #4

0800272a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800272a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800272c:	d3fb      	bcc.n	8002726 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800272e:	f00e ff61 	bl	80115f4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002732:	f7fd ff69 	bl	8000608 <main>

08002736 <LoopForever>:

LoopForever:
    b LoopForever
 8002736:	e7fe      	b.n	8002736 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002738:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800273c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002740:	200000b4 	.word	0x200000b4
  ldr r2, =_sidata
 8002744:	08014838 	.word	0x08014838
  ldr r2, =_sbss
 8002748:	200000b4 	.word	0x200000b4
  ldr r4, =_ebss
 800274c:	20004b38 	.word	0x20004b38

08002750 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002750:	e7fe      	b.n	8002750 <ADC1_2_IRQHandler>

08002752 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002752:	b580      	push	{r7, lr}
 8002754:	b082      	sub	sp, #8
 8002756:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002758:	2300      	movs	r3, #0
 800275a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800275c:	2003      	movs	r0, #3
 800275e:	f000 f926 	bl	80029ae <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002762:	200f      	movs	r0, #15
 8002764:	f7ff fe2c 	bl	80023c0 <HAL_InitTick>
 8002768:	4603      	mov	r3, r0
 800276a:	2b00      	cmp	r3, #0
 800276c:	d002      	beq.n	8002774 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800276e:	2301      	movs	r3, #1
 8002770:	71fb      	strb	r3, [r7, #7]
 8002772:	e001      	b.n	8002778 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002774:	f7ff fac4 	bl	8001d00 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002778:	79fb      	ldrb	r3, [r7, #7]
}
 800277a:	4618      	mov	r0, r3
 800277c:	3708      	adds	r7, #8
 800277e:	46bd      	mov	sp, r7
 8002780:	bd80      	pop	{r7, pc}
	...

08002784 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002784:	b480      	push	{r7}
 8002786:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002788:	4b06      	ldr	r3, [pc, #24]	; (80027a4 <HAL_IncTick+0x20>)
 800278a:	781b      	ldrb	r3, [r3, #0]
 800278c:	461a      	mov	r2, r3
 800278e:	4b06      	ldr	r3, [pc, #24]	; (80027a8 <HAL_IncTick+0x24>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	4413      	add	r3, r2
 8002794:	4a04      	ldr	r2, [pc, #16]	; (80027a8 <HAL_IncTick+0x24>)
 8002796:	6013      	str	r3, [r2, #0]
}
 8002798:	bf00      	nop
 800279a:	46bd      	mov	sp, r7
 800279c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a0:	4770      	bx	lr
 80027a2:	bf00      	nop
 80027a4:	20000010 	.word	0x20000010
 80027a8:	20000c08 	.word	0x20000c08

080027ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80027ac:	b480      	push	{r7}
 80027ae:	af00      	add	r7, sp, #0
  return uwTick;
 80027b0:	4b03      	ldr	r3, [pc, #12]	; (80027c0 <HAL_GetTick+0x14>)
 80027b2:	681b      	ldr	r3, [r3, #0]
}
 80027b4:	4618      	mov	r0, r3
 80027b6:	46bd      	mov	sp, r7
 80027b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027bc:	4770      	bx	lr
 80027be:	bf00      	nop
 80027c0:	20000c08 	.word	0x20000c08

080027c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b084      	sub	sp, #16
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80027cc:	f7ff ffee 	bl	80027ac <HAL_GetTick>
 80027d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027dc:	d005      	beq.n	80027ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80027de:	4b0a      	ldr	r3, [pc, #40]	; (8002808 <HAL_Delay+0x44>)
 80027e0:	781b      	ldrb	r3, [r3, #0]
 80027e2:	461a      	mov	r2, r3
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	4413      	add	r3, r2
 80027e8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80027ea:	bf00      	nop
 80027ec:	f7ff ffde 	bl	80027ac <HAL_GetTick>
 80027f0:	4602      	mov	r2, r0
 80027f2:	68bb      	ldr	r3, [r7, #8]
 80027f4:	1ad3      	subs	r3, r2, r3
 80027f6:	68fa      	ldr	r2, [r7, #12]
 80027f8:	429a      	cmp	r2, r3
 80027fa:	d8f7      	bhi.n	80027ec <HAL_Delay+0x28>
  {
  }
}
 80027fc:	bf00      	nop
 80027fe:	bf00      	nop
 8002800:	3710      	adds	r7, #16
 8002802:	46bd      	mov	sp, r7
 8002804:	bd80      	pop	{r7, pc}
 8002806:	bf00      	nop
 8002808:	20000010 	.word	0x20000010

0800280c <__NVIC_SetPriorityGrouping>:
{
 800280c:	b480      	push	{r7}
 800280e:	b085      	sub	sp, #20
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	f003 0307 	and.w	r3, r3, #7
 800281a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800281c:	4b0c      	ldr	r3, [pc, #48]	; (8002850 <__NVIC_SetPriorityGrouping+0x44>)
 800281e:	68db      	ldr	r3, [r3, #12]
 8002820:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002822:	68ba      	ldr	r2, [r7, #8]
 8002824:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002828:	4013      	ands	r3, r2
 800282a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002830:	68bb      	ldr	r3, [r7, #8]
 8002832:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002834:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002838:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800283c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800283e:	4a04      	ldr	r2, [pc, #16]	; (8002850 <__NVIC_SetPriorityGrouping+0x44>)
 8002840:	68bb      	ldr	r3, [r7, #8]
 8002842:	60d3      	str	r3, [r2, #12]
}
 8002844:	bf00      	nop
 8002846:	3714      	adds	r7, #20
 8002848:	46bd      	mov	sp, r7
 800284a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284e:	4770      	bx	lr
 8002850:	e000ed00 	.word	0xe000ed00

08002854 <__NVIC_GetPriorityGrouping>:
{
 8002854:	b480      	push	{r7}
 8002856:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002858:	4b04      	ldr	r3, [pc, #16]	; (800286c <__NVIC_GetPriorityGrouping+0x18>)
 800285a:	68db      	ldr	r3, [r3, #12]
 800285c:	0a1b      	lsrs	r3, r3, #8
 800285e:	f003 0307 	and.w	r3, r3, #7
}
 8002862:	4618      	mov	r0, r3
 8002864:	46bd      	mov	sp, r7
 8002866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286a:	4770      	bx	lr
 800286c:	e000ed00 	.word	0xe000ed00

08002870 <__NVIC_EnableIRQ>:
{
 8002870:	b480      	push	{r7}
 8002872:	b083      	sub	sp, #12
 8002874:	af00      	add	r7, sp, #0
 8002876:	4603      	mov	r3, r0
 8002878:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800287a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800287e:	2b00      	cmp	r3, #0
 8002880:	db0b      	blt.n	800289a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002882:	79fb      	ldrb	r3, [r7, #7]
 8002884:	f003 021f 	and.w	r2, r3, #31
 8002888:	4907      	ldr	r1, [pc, #28]	; (80028a8 <__NVIC_EnableIRQ+0x38>)
 800288a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800288e:	095b      	lsrs	r3, r3, #5
 8002890:	2001      	movs	r0, #1
 8002892:	fa00 f202 	lsl.w	r2, r0, r2
 8002896:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800289a:	bf00      	nop
 800289c:	370c      	adds	r7, #12
 800289e:	46bd      	mov	sp, r7
 80028a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a4:	4770      	bx	lr
 80028a6:	bf00      	nop
 80028a8:	e000e100 	.word	0xe000e100

080028ac <__NVIC_DisableIRQ>:
{
 80028ac:	b480      	push	{r7}
 80028ae:	b083      	sub	sp, #12
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	4603      	mov	r3, r0
 80028b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	db12      	blt.n	80028e4 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80028be:	79fb      	ldrb	r3, [r7, #7]
 80028c0:	f003 021f 	and.w	r2, r3, #31
 80028c4:	490a      	ldr	r1, [pc, #40]	; (80028f0 <__NVIC_DisableIRQ+0x44>)
 80028c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028ca:	095b      	lsrs	r3, r3, #5
 80028cc:	2001      	movs	r0, #1
 80028ce:	fa00 f202 	lsl.w	r2, r0, r2
 80028d2:	3320      	adds	r3, #32
 80028d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80028d8:	f3bf 8f4f 	dsb	sy
}
 80028dc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80028de:	f3bf 8f6f 	isb	sy
}
 80028e2:	bf00      	nop
}
 80028e4:	bf00      	nop
 80028e6:	370c      	adds	r7, #12
 80028e8:	46bd      	mov	sp, r7
 80028ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ee:	4770      	bx	lr
 80028f0:	e000e100 	.word	0xe000e100

080028f4 <__NVIC_SetPriority>:
{
 80028f4:	b480      	push	{r7}
 80028f6:	b083      	sub	sp, #12
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	4603      	mov	r3, r0
 80028fc:	6039      	str	r1, [r7, #0]
 80028fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002900:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002904:	2b00      	cmp	r3, #0
 8002906:	db0a      	blt.n	800291e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	b2da      	uxtb	r2, r3
 800290c:	490c      	ldr	r1, [pc, #48]	; (8002940 <__NVIC_SetPriority+0x4c>)
 800290e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002912:	0112      	lsls	r2, r2, #4
 8002914:	b2d2      	uxtb	r2, r2
 8002916:	440b      	add	r3, r1
 8002918:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800291c:	e00a      	b.n	8002934 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	b2da      	uxtb	r2, r3
 8002922:	4908      	ldr	r1, [pc, #32]	; (8002944 <__NVIC_SetPriority+0x50>)
 8002924:	79fb      	ldrb	r3, [r7, #7]
 8002926:	f003 030f 	and.w	r3, r3, #15
 800292a:	3b04      	subs	r3, #4
 800292c:	0112      	lsls	r2, r2, #4
 800292e:	b2d2      	uxtb	r2, r2
 8002930:	440b      	add	r3, r1
 8002932:	761a      	strb	r2, [r3, #24]
}
 8002934:	bf00      	nop
 8002936:	370c      	adds	r7, #12
 8002938:	46bd      	mov	sp, r7
 800293a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293e:	4770      	bx	lr
 8002940:	e000e100 	.word	0xe000e100
 8002944:	e000ed00 	.word	0xe000ed00

08002948 <NVIC_EncodePriority>:
{
 8002948:	b480      	push	{r7}
 800294a:	b089      	sub	sp, #36	; 0x24
 800294c:	af00      	add	r7, sp, #0
 800294e:	60f8      	str	r0, [r7, #12]
 8002950:	60b9      	str	r1, [r7, #8]
 8002952:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	f003 0307 	and.w	r3, r3, #7
 800295a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800295c:	69fb      	ldr	r3, [r7, #28]
 800295e:	f1c3 0307 	rsb	r3, r3, #7
 8002962:	2b04      	cmp	r3, #4
 8002964:	bf28      	it	cs
 8002966:	2304      	movcs	r3, #4
 8002968:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800296a:	69fb      	ldr	r3, [r7, #28]
 800296c:	3304      	adds	r3, #4
 800296e:	2b06      	cmp	r3, #6
 8002970:	d902      	bls.n	8002978 <NVIC_EncodePriority+0x30>
 8002972:	69fb      	ldr	r3, [r7, #28]
 8002974:	3b03      	subs	r3, #3
 8002976:	e000      	b.n	800297a <NVIC_EncodePriority+0x32>
 8002978:	2300      	movs	r3, #0
 800297a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800297c:	f04f 32ff 	mov.w	r2, #4294967295
 8002980:	69bb      	ldr	r3, [r7, #24]
 8002982:	fa02 f303 	lsl.w	r3, r2, r3
 8002986:	43da      	mvns	r2, r3
 8002988:	68bb      	ldr	r3, [r7, #8]
 800298a:	401a      	ands	r2, r3
 800298c:	697b      	ldr	r3, [r7, #20]
 800298e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002990:	f04f 31ff 	mov.w	r1, #4294967295
 8002994:	697b      	ldr	r3, [r7, #20]
 8002996:	fa01 f303 	lsl.w	r3, r1, r3
 800299a:	43d9      	mvns	r1, r3
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029a0:	4313      	orrs	r3, r2
}
 80029a2:	4618      	mov	r0, r3
 80029a4:	3724      	adds	r7, #36	; 0x24
 80029a6:	46bd      	mov	sp, r7
 80029a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ac:	4770      	bx	lr

080029ae <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029ae:	b580      	push	{r7, lr}
 80029b0:	b082      	sub	sp, #8
 80029b2:	af00      	add	r7, sp, #0
 80029b4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80029b6:	6878      	ldr	r0, [r7, #4]
 80029b8:	f7ff ff28 	bl	800280c <__NVIC_SetPriorityGrouping>
}
 80029bc:	bf00      	nop
 80029be:	3708      	adds	r7, #8
 80029c0:	46bd      	mov	sp, r7
 80029c2:	bd80      	pop	{r7, pc}

080029c4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b086      	sub	sp, #24
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	4603      	mov	r3, r0
 80029cc:	60b9      	str	r1, [r7, #8]
 80029ce:	607a      	str	r2, [r7, #4]
 80029d0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80029d2:	2300      	movs	r3, #0
 80029d4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80029d6:	f7ff ff3d 	bl	8002854 <__NVIC_GetPriorityGrouping>
 80029da:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80029dc:	687a      	ldr	r2, [r7, #4]
 80029de:	68b9      	ldr	r1, [r7, #8]
 80029e0:	6978      	ldr	r0, [r7, #20]
 80029e2:	f7ff ffb1 	bl	8002948 <NVIC_EncodePriority>
 80029e6:	4602      	mov	r2, r0
 80029e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029ec:	4611      	mov	r1, r2
 80029ee:	4618      	mov	r0, r3
 80029f0:	f7ff ff80 	bl	80028f4 <__NVIC_SetPriority>
}
 80029f4:	bf00      	nop
 80029f6:	3718      	adds	r7, #24
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bd80      	pop	{r7, pc}

080029fc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b082      	sub	sp, #8
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	4603      	mov	r3, r0
 8002a04:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	f7ff ff30 	bl	8002870 <__NVIC_EnableIRQ>
}
 8002a10:	bf00      	nop
 8002a12:	3708      	adds	r7, #8
 8002a14:	46bd      	mov	sp, r7
 8002a16:	bd80      	pop	{r7, pc}

08002a18 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b082      	sub	sp, #8
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	4603      	mov	r3, r0
 8002a20:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002a22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a26:	4618      	mov	r0, r3
 8002a28:	f7ff ff40 	bl	80028ac <__NVIC_DisableIRQ>
}
 8002a2c:	bf00      	nop
 8002a2e:	3708      	adds	r7, #8
 8002a30:	46bd      	mov	sp, r7
 8002a32:	bd80      	pop	{r7, pc}

08002a34 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b082      	sub	sp, #8
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d101      	bne.n	8002a46 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8002a42:	2301      	movs	r3, #1
 8002a44:	e0ac      	b.n	8002ba0 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	f000 f8b2 	bl	8002bb4 <DFSDM_GetChannelFromInstance>
 8002a50:	4603      	mov	r3, r0
 8002a52:	4a55      	ldr	r2, [pc, #340]	; (8002ba8 <HAL_DFSDM_ChannelInit+0x174>)
 8002a54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d001      	beq.n	8002a60 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	e09f      	b.n	8002ba0 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8002a60:	6878      	ldr	r0, [r7, #4]
 8002a62:	f7ff f975 	bl	8001d50 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8002a66:	4b51      	ldr	r3, [pc, #324]	; (8002bac <HAL_DFSDM_ChannelInit+0x178>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	3301      	adds	r3, #1
 8002a6c:	4a4f      	ldr	r2, [pc, #316]	; (8002bac <HAL_DFSDM_ChannelInit+0x178>)
 8002a6e:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8002a70:	4b4e      	ldr	r3, [pc, #312]	; (8002bac <HAL_DFSDM_ChannelInit+0x178>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	2b01      	cmp	r3, #1
 8002a76:	d125      	bne.n	8002ac4 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8002a78:	4b4d      	ldr	r3, [pc, #308]	; (8002bb0 <HAL_DFSDM_ChannelInit+0x17c>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4a4c      	ldr	r2, [pc, #304]	; (8002bb0 <HAL_DFSDM_ChannelInit+0x17c>)
 8002a7e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002a82:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8002a84:	4b4a      	ldr	r3, [pc, #296]	; (8002bb0 <HAL_DFSDM_ChannelInit+0x17c>)
 8002a86:	681a      	ldr	r2, [r3, #0]
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	689b      	ldr	r3, [r3, #8]
 8002a8c:	4948      	ldr	r1, [pc, #288]	; (8002bb0 <HAL_DFSDM_ChannelInit+0x17c>)
 8002a8e:	4313      	orrs	r3, r2
 8002a90:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8002a92:	4b47      	ldr	r3, [pc, #284]	; (8002bb0 <HAL_DFSDM_ChannelInit+0x17c>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4a46      	ldr	r2, [pc, #280]	; (8002bb0 <HAL_DFSDM_ChannelInit+0x17c>)
 8002a98:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8002a9c:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	791b      	ldrb	r3, [r3, #4]
 8002aa2:	2b01      	cmp	r3, #1
 8002aa4:	d108      	bne.n	8002ab8 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8002aa6:	4b42      	ldr	r3, [pc, #264]	; (8002bb0 <HAL_DFSDM_ChannelInit+0x17c>)
 8002aa8:	681a      	ldr	r2, [r3, #0]
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	68db      	ldr	r3, [r3, #12]
 8002aae:	3b01      	subs	r3, #1
 8002ab0:	041b      	lsls	r3, r3, #16
 8002ab2:	493f      	ldr	r1, [pc, #252]	; (8002bb0 <HAL_DFSDM_ChannelInit+0x17c>)
 8002ab4:	4313      	orrs	r3, r2
 8002ab6:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8002ab8:	4b3d      	ldr	r3, [pc, #244]	; (8002bb0 <HAL_DFSDM_ChannelInit+0x17c>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4a3c      	ldr	r2, [pc, #240]	; (8002bb0 <HAL_DFSDM_ChannelInit+0x17c>)
 8002abe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002ac2:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	681a      	ldr	r2, [r3, #0]
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 8002ad2:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	6819      	ldr	r1, [r3, #0]
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8002ae2:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8002ae8:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	430a      	orrs	r2, r1
 8002af0:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	681a      	ldr	r2, [r3, #0]
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f022 020f 	bic.w	r2, r2, #15
 8002b00:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	6819      	ldr	r1, [r3, #0]
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8002b10:	431a      	orrs	r2, r3
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	430a      	orrs	r2, r1
 8002b18:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	689a      	ldr	r2, [r3, #8]
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8002b28:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	6899      	ldr	r1, [r3, #8]
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b38:	3b01      	subs	r3, #1
 8002b3a:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8002b3c:	431a      	orrs	r2, r3
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	430a      	orrs	r2, r1
 8002b44:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	685a      	ldr	r2, [r3, #4]
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f002 0207 	and.w	r2, r2, #7
 8002b54:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	6859      	ldr	r1, [r3, #4]
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b60:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b66:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8002b68:	431a      	orrs	r2, r3
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	430a      	orrs	r2, r1
 8002b70:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	681a      	ldr	r2, [r3, #0]
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002b80:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2201      	movs	r2, #1
 8002b86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4618      	mov	r0, r3
 8002b90:	f000 f810 	bl	8002bb4 <DFSDM_GetChannelFromInstance>
 8002b94:	4602      	mov	r2, r0
 8002b96:	4904      	ldr	r1, [pc, #16]	; (8002ba8 <HAL_DFSDM_ChannelInit+0x174>)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 8002b9e:	2300      	movs	r3, #0
}
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	3708      	adds	r7, #8
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	bd80      	pop	{r7, pc}
 8002ba8:	20000c10 	.word	0x20000c10
 8002bac:	20000c0c 	.word	0x20000c0c
 8002bb0:	40016000 	.word	0x40016000

08002bb4 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	b085      	sub	sp, #20
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	4a1c      	ldr	r2, [pc, #112]	; (8002c30 <DFSDM_GetChannelFromInstance+0x7c>)
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d102      	bne.n	8002bca <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	60fb      	str	r3, [r7, #12]
 8002bc8:	e02b      	b.n	8002c22 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	4a19      	ldr	r2, [pc, #100]	; (8002c34 <DFSDM_GetChannelFromInstance+0x80>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d102      	bne.n	8002bd8 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	60fb      	str	r3, [r7, #12]
 8002bd6:	e024      	b.n	8002c22 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	4a17      	ldr	r2, [pc, #92]	; (8002c38 <DFSDM_GetChannelFromInstance+0x84>)
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	d102      	bne.n	8002be6 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8002be0:	2302      	movs	r3, #2
 8002be2:	60fb      	str	r3, [r7, #12]
 8002be4:	e01d      	b.n	8002c22 <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	4a14      	ldr	r2, [pc, #80]	; (8002c3c <DFSDM_GetChannelFromInstance+0x88>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d102      	bne.n	8002bf4 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 8002bee:	2304      	movs	r3, #4
 8002bf0:	60fb      	str	r3, [r7, #12]
 8002bf2:	e016      	b.n	8002c22 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	4a12      	ldr	r2, [pc, #72]	; (8002c40 <DFSDM_GetChannelFromInstance+0x8c>)
 8002bf8:	4293      	cmp	r3, r2
 8002bfa:	d102      	bne.n	8002c02 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8002bfc:	2305      	movs	r3, #5
 8002bfe:	60fb      	str	r3, [r7, #12]
 8002c00:	e00f      	b.n	8002c22 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	4a0f      	ldr	r2, [pc, #60]	; (8002c44 <DFSDM_GetChannelFromInstance+0x90>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d102      	bne.n	8002c10 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 8002c0a:	2306      	movs	r3, #6
 8002c0c:	60fb      	str	r3, [r7, #12]
 8002c0e:	e008      	b.n	8002c22 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	4a0d      	ldr	r2, [pc, #52]	; (8002c48 <DFSDM_GetChannelFromInstance+0x94>)
 8002c14:	4293      	cmp	r3, r2
 8002c16:	d102      	bne.n	8002c1e <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8002c18:	2307      	movs	r3, #7
 8002c1a:	60fb      	str	r3, [r7, #12]
 8002c1c:	e001      	b.n	8002c22 <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 8002c1e:	2303      	movs	r3, #3
 8002c20:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8002c22:	68fb      	ldr	r3, [r7, #12]
}
 8002c24:	4618      	mov	r0, r3
 8002c26:	3714      	adds	r7, #20
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2e:	4770      	bx	lr
 8002c30:	40016000 	.word	0x40016000
 8002c34:	40016020 	.word	0x40016020
 8002c38:	40016040 	.word	0x40016040
 8002c3c:	40016080 	.word	0x40016080
 8002c40:	400160a0 	.word	0x400160a0
 8002c44:	400160c0 	.word	0x400160c0
 8002c48:	400160e0 	.word	0x400160e0

08002c4c <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	b085      	sub	sp, #20
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c54:	2300      	movs	r3, #0
 8002c56:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002c5e:	b2db      	uxtb	r3, r3
 8002c60:	2b02      	cmp	r3, #2
 8002c62:	d008      	beq.n	8002c76 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2204      	movs	r2, #4
 8002c68:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002c72:	2301      	movs	r3, #1
 8002c74:	e022      	b.n	8002cbc <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	681a      	ldr	r2, [r3, #0]
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f022 020e 	bic.w	r2, r2, #14
 8002c84:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	681a      	ldr	r2, [r3, #0]
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f022 0201 	bic.w	r2, r2, #1
 8002c94:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c9a:	f003 021c 	and.w	r2, r3, #28
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca2:	2101      	movs	r1, #1
 8002ca4:	fa01 f202 	lsl.w	r2, r1, r2
 8002ca8:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2201      	movs	r2, #1
 8002cae:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8002cba:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	3714      	adds	r7, #20
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc6:	4770      	bx	lr

08002cc8 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b084      	sub	sp, #16
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002cda:	b2db      	uxtb	r3, r3
 8002cdc:	2b02      	cmp	r3, #2
 8002cde:	d005      	beq.n	8002cec <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2204      	movs	r2, #4
 8002ce4:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	73fb      	strb	r3, [r7, #15]
 8002cea:	e029      	b.n	8002d40 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	681a      	ldr	r2, [r3, #0]
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f022 020e 	bic.w	r2, r2, #14
 8002cfa:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	681a      	ldr	r2, [r3, #0]
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f022 0201 	bic.w	r2, r2, #1
 8002d0a:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d10:	f003 021c 	and.w	r2, r3, #28
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d18:	2101      	movs	r1, #1
 8002d1a:	fa01 f202 	lsl.w	r2, r1, r2
 8002d1e:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2201      	movs	r2, #1
 8002d24:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d003      	beq.n	8002d40 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d3c:	6878      	ldr	r0, [r7, #4]
 8002d3e:	4798      	blx	r3
    }
  }
  return status;
 8002d40:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d42:	4618      	mov	r0, r3
 8002d44:	3710      	adds	r7, #16
 8002d46:	46bd      	mov	sp, r7
 8002d48:	bd80      	pop	{r7, pc}
	...

08002d4c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	b087      	sub	sp, #28
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
 8002d54:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002d56:	2300      	movs	r3, #0
 8002d58:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d5a:	e17f      	b.n	800305c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	681a      	ldr	r2, [r3, #0]
 8002d60:	2101      	movs	r1, #1
 8002d62:	697b      	ldr	r3, [r7, #20]
 8002d64:	fa01 f303 	lsl.w	r3, r1, r3
 8002d68:	4013      	ands	r3, r2
 8002d6a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	f000 8171 	beq.w	8003056 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	2b01      	cmp	r3, #1
 8002d7a:	d00b      	beq.n	8002d94 <HAL_GPIO_Init+0x48>
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	2b02      	cmp	r3, #2
 8002d82:	d007      	beq.n	8002d94 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002d88:	2b11      	cmp	r3, #17
 8002d8a:	d003      	beq.n	8002d94 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	685b      	ldr	r3, [r3, #4]
 8002d90:	2b12      	cmp	r3, #18
 8002d92:	d130      	bne.n	8002df6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	689b      	ldr	r3, [r3, #8]
 8002d98:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002d9a:	697b      	ldr	r3, [r7, #20]
 8002d9c:	005b      	lsls	r3, r3, #1
 8002d9e:	2203      	movs	r2, #3
 8002da0:	fa02 f303 	lsl.w	r3, r2, r3
 8002da4:	43db      	mvns	r3, r3
 8002da6:	693a      	ldr	r2, [r7, #16]
 8002da8:	4013      	ands	r3, r2
 8002daa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	68da      	ldr	r2, [r3, #12]
 8002db0:	697b      	ldr	r3, [r7, #20]
 8002db2:	005b      	lsls	r3, r3, #1
 8002db4:	fa02 f303 	lsl.w	r3, r2, r3
 8002db8:	693a      	ldr	r2, [r7, #16]
 8002dba:	4313      	orrs	r3, r2
 8002dbc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	693a      	ldr	r2, [r7, #16]
 8002dc2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002dca:	2201      	movs	r2, #1
 8002dcc:	697b      	ldr	r3, [r7, #20]
 8002dce:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd2:	43db      	mvns	r3, r3
 8002dd4:	693a      	ldr	r2, [r7, #16]
 8002dd6:	4013      	ands	r3, r2
 8002dd8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	091b      	lsrs	r3, r3, #4
 8002de0:	f003 0201 	and.w	r2, r3, #1
 8002de4:	697b      	ldr	r3, [r7, #20]
 8002de6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dea:	693a      	ldr	r2, [r7, #16]
 8002dec:	4313      	orrs	r3, r2
 8002dee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	693a      	ldr	r2, [r7, #16]
 8002df4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	f003 0303 	and.w	r3, r3, #3
 8002dfe:	2b03      	cmp	r3, #3
 8002e00:	d118      	bne.n	8002e34 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e06:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002e08:	2201      	movs	r2, #1
 8002e0a:	697b      	ldr	r3, [r7, #20]
 8002e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e10:	43db      	mvns	r3, r3
 8002e12:	693a      	ldr	r2, [r7, #16]
 8002e14:	4013      	ands	r3, r2
 8002e16:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	08db      	lsrs	r3, r3, #3
 8002e1e:	f003 0201 	and.w	r2, r3, #1
 8002e22:	697b      	ldr	r3, [r7, #20]
 8002e24:	fa02 f303 	lsl.w	r3, r2, r3
 8002e28:	693a      	ldr	r2, [r7, #16]
 8002e2a:	4313      	orrs	r3, r2
 8002e2c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	693a      	ldr	r2, [r7, #16]
 8002e32:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	68db      	ldr	r3, [r3, #12]
 8002e38:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002e3a:	697b      	ldr	r3, [r7, #20]
 8002e3c:	005b      	lsls	r3, r3, #1
 8002e3e:	2203      	movs	r2, #3
 8002e40:	fa02 f303 	lsl.w	r3, r2, r3
 8002e44:	43db      	mvns	r3, r3
 8002e46:	693a      	ldr	r2, [r7, #16]
 8002e48:	4013      	ands	r3, r2
 8002e4a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	689a      	ldr	r2, [r3, #8]
 8002e50:	697b      	ldr	r3, [r7, #20]
 8002e52:	005b      	lsls	r3, r3, #1
 8002e54:	fa02 f303 	lsl.w	r3, r2, r3
 8002e58:	693a      	ldr	r2, [r7, #16]
 8002e5a:	4313      	orrs	r3, r2
 8002e5c:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	693a      	ldr	r2, [r7, #16]
 8002e62:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	2b02      	cmp	r3, #2
 8002e6a:	d003      	beq.n	8002e74 <HAL_GPIO_Init+0x128>
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	685b      	ldr	r3, [r3, #4]
 8002e70:	2b12      	cmp	r3, #18
 8002e72:	d123      	bne.n	8002ebc <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002e74:	697b      	ldr	r3, [r7, #20]
 8002e76:	08da      	lsrs	r2, r3, #3
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	3208      	adds	r2, #8
 8002e7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e80:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002e82:	697b      	ldr	r3, [r7, #20]
 8002e84:	f003 0307 	and.w	r3, r3, #7
 8002e88:	009b      	lsls	r3, r3, #2
 8002e8a:	220f      	movs	r2, #15
 8002e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e90:	43db      	mvns	r3, r3
 8002e92:	693a      	ldr	r2, [r7, #16]
 8002e94:	4013      	ands	r3, r2
 8002e96:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	691a      	ldr	r2, [r3, #16]
 8002e9c:	697b      	ldr	r3, [r7, #20]
 8002e9e:	f003 0307 	and.w	r3, r3, #7
 8002ea2:	009b      	lsls	r3, r3, #2
 8002ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea8:	693a      	ldr	r2, [r7, #16]
 8002eaa:	4313      	orrs	r3, r2
 8002eac:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002eae:	697b      	ldr	r3, [r7, #20]
 8002eb0:	08da      	lsrs	r2, r3, #3
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	3208      	adds	r2, #8
 8002eb6:	6939      	ldr	r1, [r7, #16]
 8002eb8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002ec2:	697b      	ldr	r3, [r7, #20]
 8002ec4:	005b      	lsls	r3, r3, #1
 8002ec6:	2203      	movs	r2, #3
 8002ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ecc:	43db      	mvns	r3, r3
 8002ece:	693a      	ldr	r2, [r7, #16]
 8002ed0:	4013      	ands	r3, r2
 8002ed2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	685b      	ldr	r3, [r3, #4]
 8002ed8:	f003 0203 	and.w	r2, r3, #3
 8002edc:	697b      	ldr	r3, [r7, #20]
 8002ede:	005b      	lsls	r3, r3, #1
 8002ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee4:	693a      	ldr	r2, [r7, #16]
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	693a      	ldr	r2, [r7, #16]
 8002eee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	f000 80ac 	beq.w	8003056 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002efe:	4b5f      	ldr	r3, [pc, #380]	; (800307c <HAL_GPIO_Init+0x330>)
 8002f00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f02:	4a5e      	ldr	r2, [pc, #376]	; (800307c <HAL_GPIO_Init+0x330>)
 8002f04:	f043 0301 	orr.w	r3, r3, #1
 8002f08:	6613      	str	r3, [r2, #96]	; 0x60
 8002f0a:	4b5c      	ldr	r3, [pc, #368]	; (800307c <HAL_GPIO_Init+0x330>)
 8002f0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f0e:	f003 0301 	and.w	r3, r3, #1
 8002f12:	60bb      	str	r3, [r7, #8]
 8002f14:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002f16:	4a5a      	ldr	r2, [pc, #360]	; (8003080 <HAL_GPIO_Init+0x334>)
 8002f18:	697b      	ldr	r3, [r7, #20]
 8002f1a:	089b      	lsrs	r3, r3, #2
 8002f1c:	3302      	adds	r3, #2
 8002f1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f22:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002f24:	697b      	ldr	r3, [r7, #20]
 8002f26:	f003 0303 	and.w	r3, r3, #3
 8002f2a:	009b      	lsls	r3, r3, #2
 8002f2c:	220f      	movs	r2, #15
 8002f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f32:	43db      	mvns	r3, r3
 8002f34:	693a      	ldr	r2, [r7, #16]
 8002f36:	4013      	ands	r3, r2
 8002f38:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002f40:	d025      	beq.n	8002f8e <HAL_GPIO_Init+0x242>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	4a4f      	ldr	r2, [pc, #316]	; (8003084 <HAL_GPIO_Init+0x338>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d01f      	beq.n	8002f8a <HAL_GPIO_Init+0x23e>
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	4a4e      	ldr	r2, [pc, #312]	; (8003088 <HAL_GPIO_Init+0x33c>)
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d019      	beq.n	8002f86 <HAL_GPIO_Init+0x23a>
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	4a4d      	ldr	r2, [pc, #308]	; (800308c <HAL_GPIO_Init+0x340>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d013      	beq.n	8002f82 <HAL_GPIO_Init+0x236>
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	4a4c      	ldr	r2, [pc, #304]	; (8003090 <HAL_GPIO_Init+0x344>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d00d      	beq.n	8002f7e <HAL_GPIO_Init+0x232>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	4a4b      	ldr	r2, [pc, #300]	; (8003094 <HAL_GPIO_Init+0x348>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d007      	beq.n	8002f7a <HAL_GPIO_Init+0x22e>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	4a4a      	ldr	r2, [pc, #296]	; (8003098 <HAL_GPIO_Init+0x34c>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d101      	bne.n	8002f76 <HAL_GPIO_Init+0x22a>
 8002f72:	2306      	movs	r3, #6
 8002f74:	e00c      	b.n	8002f90 <HAL_GPIO_Init+0x244>
 8002f76:	2307      	movs	r3, #7
 8002f78:	e00a      	b.n	8002f90 <HAL_GPIO_Init+0x244>
 8002f7a:	2305      	movs	r3, #5
 8002f7c:	e008      	b.n	8002f90 <HAL_GPIO_Init+0x244>
 8002f7e:	2304      	movs	r3, #4
 8002f80:	e006      	b.n	8002f90 <HAL_GPIO_Init+0x244>
 8002f82:	2303      	movs	r3, #3
 8002f84:	e004      	b.n	8002f90 <HAL_GPIO_Init+0x244>
 8002f86:	2302      	movs	r3, #2
 8002f88:	e002      	b.n	8002f90 <HAL_GPIO_Init+0x244>
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	e000      	b.n	8002f90 <HAL_GPIO_Init+0x244>
 8002f8e:	2300      	movs	r3, #0
 8002f90:	697a      	ldr	r2, [r7, #20]
 8002f92:	f002 0203 	and.w	r2, r2, #3
 8002f96:	0092      	lsls	r2, r2, #2
 8002f98:	4093      	lsls	r3, r2
 8002f9a:	693a      	ldr	r2, [r7, #16]
 8002f9c:	4313      	orrs	r3, r2
 8002f9e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002fa0:	4937      	ldr	r1, [pc, #220]	; (8003080 <HAL_GPIO_Init+0x334>)
 8002fa2:	697b      	ldr	r3, [r7, #20]
 8002fa4:	089b      	lsrs	r3, r3, #2
 8002fa6:	3302      	adds	r3, #2
 8002fa8:	693a      	ldr	r2, [r7, #16]
 8002faa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002fae:	4b3b      	ldr	r3, [pc, #236]	; (800309c <HAL_GPIO_Init+0x350>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	43db      	mvns	r3, r3
 8002fb8:	693a      	ldr	r2, [r7, #16]
 8002fba:	4013      	ands	r3, r2
 8002fbc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d003      	beq.n	8002fd2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002fca:	693a      	ldr	r2, [r7, #16]
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	4313      	orrs	r3, r2
 8002fd0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002fd2:	4a32      	ldr	r2, [pc, #200]	; (800309c <HAL_GPIO_Init+0x350>)
 8002fd4:	693b      	ldr	r3, [r7, #16]
 8002fd6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8002fd8:	4b30      	ldr	r3, [pc, #192]	; (800309c <HAL_GPIO_Init+0x350>)
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	43db      	mvns	r3, r3
 8002fe2:	693a      	ldr	r2, [r7, #16]
 8002fe4:	4013      	ands	r3, r2
 8002fe6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d003      	beq.n	8002ffc <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002ff4:	693a      	ldr	r2, [r7, #16]
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	4313      	orrs	r3, r2
 8002ffa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002ffc:	4a27      	ldr	r2, [pc, #156]	; (800309c <HAL_GPIO_Init+0x350>)
 8002ffe:	693b      	ldr	r3, [r7, #16]
 8003000:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003002:	4b26      	ldr	r3, [pc, #152]	; (800309c <HAL_GPIO_Init+0x350>)
 8003004:	689b      	ldr	r3, [r3, #8]
 8003006:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	43db      	mvns	r3, r3
 800300c:	693a      	ldr	r2, [r7, #16]
 800300e:	4013      	ands	r3, r2
 8003010:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800301a:	2b00      	cmp	r3, #0
 800301c:	d003      	beq.n	8003026 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800301e:	693a      	ldr	r2, [r7, #16]
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	4313      	orrs	r3, r2
 8003024:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003026:	4a1d      	ldr	r2, [pc, #116]	; (800309c <HAL_GPIO_Init+0x350>)
 8003028:	693b      	ldr	r3, [r7, #16]
 800302a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800302c:	4b1b      	ldr	r3, [pc, #108]	; (800309c <HAL_GPIO_Init+0x350>)
 800302e:	68db      	ldr	r3, [r3, #12]
 8003030:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	43db      	mvns	r3, r3
 8003036:	693a      	ldr	r2, [r7, #16]
 8003038:	4013      	ands	r3, r2
 800303a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003044:	2b00      	cmp	r3, #0
 8003046:	d003      	beq.n	8003050 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003048:	693a      	ldr	r2, [r7, #16]
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	4313      	orrs	r3, r2
 800304e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003050:	4a12      	ldr	r2, [pc, #72]	; (800309c <HAL_GPIO_Init+0x350>)
 8003052:	693b      	ldr	r3, [r7, #16]
 8003054:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8003056:	697b      	ldr	r3, [r7, #20]
 8003058:	3301      	adds	r3, #1
 800305a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	681a      	ldr	r2, [r3, #0]
 8003060:	697b      	ldr	r3, [r7, #20]
 8003062:	fa22 f303 	lsr.w	r3, r2, r3
 8003066:	2b00      	cmp	r3, #0
 8003068:	f47f ae78 	bne.w	8002d5c <HAL_GPIO_Init+0x10>
  }
}
 800306c:	bf00      	nop
 800306e:	bf00      	nop
 8003070:	371c      	adds	r7, #28
 8003072:	46bd      	mov	sp, r7
 8003074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003078:	4770      	bx	lr
 800307a:	bf00      	nop
 800307c:	40021000 	.word	0x40021000
 8003080:	40010000 	.word	0x40010000
 8003084:	48000400 	.word	0x48000400
 8003088:	48000800 	.word	0x48000800
 800308c:	48000c00 	.word	0x48000c00
 8003090:	48001000 	.word	0x48001000
 8003094:	48001400 	.word	0x48001400
 8003098:	48001800 	.word	0x48001800
 800309c:	40010400 	.word	0x40010400

080030a0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80030a0:	b480      	push	{r7}
 80030a2:	b087      	sub	sp, #28
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
 80030a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80030aa:	2300      	movs	r3, #0
 80030ac:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 80030ae:	e0cd      	b.n	800324c <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80030b0:	2201      	movs	r2, #1
 80030b2:	697b      	ldr	r3, [r7, #20]
 80030b4:	fa02 f303 	lsl.w	r3, r2, r3
 80030b8:	683a      	ldr	r2, [r7, #0]
 80030ba:	4013      	ands	r3, r2
 80030bc:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 80030be:	693b      	ldr	r3, [r7, #16]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	f000 80c0 	beq.w	8003246 <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 80030c6:	4a68      	ldr	r2, [pc, #416]	; (8003268 <HAL_GPIO_DeInit+0x1c8>)
 80030c8:	697b      	ldr	r3, [r7, #20]
 80030ca:	089b      	lsrs	r3, r3, #2
 80030cc:	3302      	adds	r3, #2
 80030ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030d2:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 80030d4:	697b      	ldr	r3, [r7, #20]
 80030d6:	f003 0303 	and.w	r3, r3, #3
 80030da:	009b      	lsls	r3, r3, #2
 80030dc:	220f      	movs	r2, #15
 80030de:	fa02 f303 	lsl.w	r3, r2, r3
 80030e2:	68fa      	ldr	r2, [r7, #12]
 80030e4:	4013      	ands	r3, r2
 80030e6:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80030ee:	d025      	beq.n	800313c <HAL_GPIO_DeInit+0x9c>
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	4a5e      	ldr	r2, [pc, #376]	; (800326c <HAL_GPIO_DeInit+0x1cc>)
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d01f      	beq.n	8003138 <HAL_GPIO_DeInit+0x98>
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	4a5d      	ldr	r2, [pc, #372]	; (8003270 <HAL_GPIO_DeInit+0x1d0>)
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d019      	beq.n	8003134 <HAL_GPIO_DeInit+0x94>
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	4a5c      	ldr	r2, [pc, #368]	; (8003274 <HAL_GPIO_DeInit+0x1d4>)
 8003104:	4293      	cmp	r3, r2
 8003106:	d013      	beq.n	8003130 <HAL_GPIO_DeInit+0x90>
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	4a5b      	ldr	r2, [pc, #364]	; (8003278 <HAL_GPIO_DeInit+0x1d8>)
 800310c:	4293      	cmp	r3, r2
 800310e:	d00d      	beq.n	800312c <HAL_GPIO_DeInit+0x8c>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	4a5a      	ldr	r2, [pc, #360]	; (800327c <HAL_GPIO_DeInit+0x1dc>)
 8003114:	4293      	cmp	r3, r2
 8003116:	d007      	beq.n	8003128 <HAL_GPIO_DeInit+0x88>
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	4a59      	ldr	r2, [pc, #356]	; (8003280 <HAL_GPIO_DeInit+0x1e0>)
 800311c:	4293      	cmp	r3, r2
 800311e:	d101      	bne.n	8003124 <HAL_GPIO_DeInit+0x84>
 8003120:	2306      	movs	r3, #6
 8003122:	e00c      	b.n	800313e <HAL_GPIO_DeInit+0x9e>
 8003124:	2307      	movs	r3, #7
 8003126:	e00a      	b.n	800313e <HAL_GPIO_DeInit+0x9e>
 8003128:	2305      	movs	r3, #5
 800312a:	e008      	b.n	800313e <HAL_GPIO_DeInit+0x9e>
 800312c:	2304      	movs	r3, #4
 800312e:	e006      	b.n	800313e <HAL_GPIO_DeInit+0x9e>
 8003130:	2303      	movs	r3, #3
 8003132:	e004      	b.n	800313e <HAL_GPIO_DeInit+0x9e>
 8003134:	2302      	movs	r3, #2
 8003136:	e002      	b.n	800313e <HAL_GPIO_DeInit+0x9e>
 8003138:	2301      	movs	r3, #1
 800313a:	e000      	b.n	800313e <HAL_GPIO_DeInit+0x9e>
 800313c:	2300      	movs	r3, #0
 800313e:	697a      	ldr	r2, [r7, #20]
 8003140:	f002 0203 	and.w	r2, r2, #3
 8003144:	0092      	lsls	r2, r2, #2
 8003146:	4093      	lsls	r3, r2
 8003148:	68fa      	ldr	r2, [r7, #12]
 800314a:	429a      	cmp	r2, r3
 800314c:	d132      	bne.n	80031b4 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 800314e:	4b4d      	ldr	r3, [pc, #308]	; (8003284 <HAL_GPIO_DeInit+0x1e4>)
 8003150:	681a      	ldr	r2, [r3, #0]
 8003152:	693b      	ldr	r3, [r7, #16]
 8003154:	43db      	mvns	r3, r3
 8003156:	494b      	ldr	r1, [pc, #300]	; (8003284 <HAL_GPIO_DeInit+0x1e4>)
 8003158:	4013      	ands	r3, r2
 800315a:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 800315c:	4b49      	ldr	r3, [pc, #292]	; (8003284 <HAL_GPIO_DeInit+0x1e4>)
 800315e:	685a      	ldr	r2, [r3, #4]
 8003160:	693b      	ldr	r3, [r7, #16]
 8003162:	43db      	mvns	r3, r3
 8003164:	4947      	ldr	r1, [pc, #284]	; (8003284 <HAL_GPIO_DeInit+0x1e4>)
 8003166:	4013      	ands	r3, r2
 8003168:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 800316a:	4b46      	ldr	r3, [pc, #280]	; (8003284 <HAL_GPIO_DeInit+0x1e4>)
 800316c:	689a      	ldr	r2, [r3, #8]
 800316e:	693b      	ldr	r3, [r7, #16]
 8003170:	43db      	mvns	r3, r3
 8003172:	4944      	ldr	r1, [pc, #272]	; (8003284 <HAL_GPIO_DeInit+0x1e4>)
 8003174:	4013      	ands	r3, r2
 8003176:	608b      	str	r3, [r1, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 8003178:	4b42      	ldr	r3, [pc, #264]	; (8003284 <HAL_GPIO_DeInit+0x1e4>)
 800317a:	68da      	ldr	r2, [r3, #12]
 800317c:	693b      	ldr	r3, [r7, #16]
 800317e:	43db      	mvns	r3, r3
 8003180:	4940      	ldr	r1, [pc, #256]	; (8003284 <HAL_GPIO_DeInit+0x1e4>)
 8003182:	4013      	ands	r3, r2
 8003184:	60cb      	str	r3, [r1, #12]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8003186:	697b      	ldr	r3, [r7, #20]
 8003188:	f003 0303 	and.w	r3, r3, #3
 800318c:	009b      	lsls	r3, r3, #2
 800318e:	220f      	movs	r2, #15
 8003190:	fa02 f303 	lsl.w	r3, r2, r3
 8003194:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8003196:	4a34      	ldr	r2, [pc, #208]	; (8003268 <HAL_GPIO_DeInit+0x1c8>)
 8003198:	697b      	ldr	r3, [r7, #20]
 800319a:	089b      	lsrs	r3, r3, #2
 800319c:	3302      	adds	r3, #2
 800319e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	43da      	mvns	r2, r3
 80031a6:	4830      	ldr	r0, [pc, #192]	; (8003268 <HAL_GPIO_DeInit+0x1c8>)
 80031a8:	697b      	ldr	r3, [r7, #20]
 80031aa:	089b      	lsrs	r3, r3, #2
 80031ac:	400a      	ands	r2, r1
 80031ae:	3302      	adds	r3, #2
 80031b0:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681a      	ldr	r2, [r3, #0]
 80031b8:	697b      	ldr	r3, [r7, #20]
 80031ba:	005b      	lsls	r3, r3, #1
 80031bc:	2103      	movs	r1, #3
 80031be:	fa01 f303 	lsl.w	r3, r1, r3
 80031c2:	431a      	orrs	r2, r3
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 80031c8:	697b      	ldr	r3, [r7, #20]
 80031ca:	08da      	lsrs	r2, r3, #3
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	3208      	adds	r2, #8
 80031d0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80031d4:	697b      	ldr	r3, [r7, #20]
 80031d6:	f003 0307 	and.w	r3, r3, #7
 80031da:	009b      	lsls	r3, r3, #2
 80031dc:	220f      	movs	r2, #15
 80031de:	fa02 f303 	lsl.w	r3, r2, r3
 80031e2:	43db      	mvns	r3, r3
 80031e4:	697a      	ldr	r2, [r7, #20]
 80031e6:	08d2      	lsrs	r2, r2, #3
 80031e8:	4019      	ands	r1, r3
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	3208      	adds	r2, #8
 80031ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	689a      	ldr	r2, [r3, #8]
 80031f6:	697b      	ldr	r3, [r7, #20]
 80031f8:	005b      	lsls	r3, r3, #1
 80031fa:	2103      	movs	r1, #3
 80031fc:	fa01 f303 	lsl.w	r3, r1, r3
 8003200:	43db      	mvns	r3, r3
 8003202:	401a      	ands	r2, r3
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	685a      	ldr	r2, [r3, #4]
 800320c:	2101      	movs	r1, #1
 800320e:	697b      	ldr	r3, [r7, #20]
 8003210:	fa01 f303 	lsl.w	r3, r1, r3
 8003214:	43db      	mvns	r3, r3
 8003216:	401a      	ands	r2, r3
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	68da      	ldr	r2, [r3, #12]
 8003220:	697b      	ldr	r3, [r7, #20]
 8003222:	005b      	lsls	r3, r3, #1
 8003224:	2103      	movs	r1, #3
 8003226:	fa01 f303 	lsl.w	r3, r1, r3
 800322a:	43db      	mvns	r3, r3
 800322c:	401a      	ands	r2, r3
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003236:	2101      	movs	r1, #1
 8003238:	697b      	ldr	r3, [r7, #20]
 800323a:	fa01 f303 	lsl.w	r3, r1, r3
 800323e:	43db      	mvns	r3, r3
 8003240:	401a      	ands	r2, r3
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8003246:	697b      	ldr	r3, [r7, #20]
 8003248:	3301      	adds	r3, #1
 800324a:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 800324c:	683a      	ldr	r2, [r7, #0]
 800324e:	697b      	ldr	r3, [r7, #20]
 8003250:	fa22 f303 	lsr.w	r3, r2, r3
 8003254:	2b00      	cmp	r3, #0
 8003256:	f47f af2b 	bne.w	80030b0 <HAL_GPIO_DeInit+0x10>
  }
}
 800325a:	bf00      	nop
 800325c:	bf00      	nop
 800325e:	371c      	adds	r7, #28
 8003260:	46bd      	mov	sp, r7
 8003262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003266:	4770      	bx	lr
 8003268:	40010000 	.word	0x40010000
 800326c:	48000400 	.word	0x48000400
 8003270:	48000800 	.word	0x48000800
 8003274:	48000c00 	.word	0x48000c00
 8003278:	48001000 	.word	0x48001000
 800327c:	48001400 	.word	0x48001400
 8003280:	48001800 	.word	0x48001800
 8003284:	40010400 	.word	0x40010400

08003288 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003288:	b480      	push	{r7}
 800328a:	b085      	sub	sp, #20
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
 8003290:	460b      	mov	r3, r1
 8003292:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	691a      	ldr	r2, [r3, #16]
 8003298:	887b      	ldrh	r3, [r7, #2]
 800329a:	4013      	ands	r3, r2
 800329c:	2b00      	cmp	r3, #0
 800329e:	d002      	beq.n	80032a6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80032a0:	2301      	movs	r3, #1
 80032a2:	73fb      	strb	r3, [r7, #15]
 80032a4:	e001      	b.n	80032aa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80032a6:	2300      	movs	r3, #0
 80032a8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80032aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80032ac:	4618      	mov	r0, r3
 80032ae:	3714      	adds	r7, #20
 80032b0:	46bd      	mov	sp, r7
 80032b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b6:	4770      	bx	lr

080032b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80032b8:	b480      	push	{r7}
 80032ba:	b083      	sub	sp, #12
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
 80032c0:	460b      	mov	r3, r1
 80032c2:	807b      	strh	r3, [r7, #2]
 80032c4:	4613      	mov	r3, r2
 80032c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80032c8:	787b      	ldrb	r3, [r7, #1]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d003      	beq.n	80032d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80032ce:	887a      	ldrh	r2, [r7, #2]
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80032d4:	e002      	b.n	80032dc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80032d6:	887a      	ldrh	r2, [r7, #2]
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	629a      	str	r2, [r3, #40]	; 0x28
}
 80032dc:	bf00      	nop
 80032de:	370c      	adds	r7, #12
 80032e0:	46bd      	mov	sp, r7
 80032e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e6:	4770      	bx	lr

080032e8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b082      	sub	sp, #8
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	4603      	mov	r3, r0
 80032f0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80032f2:	4b08      	ldr	r3, [pc, #32]	; (8003314 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80032f4:	695a      	ldr	r2, [r3, #20]
 80032f6:	88fb      	ldrh	r3, [r7, #6]
 80032f8:	4013      	ands	r3, r2
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d006      	beq.n	800330c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80032fe:	4a05      	ldr	r2, [pc, #20]	; (8003314 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003300:	88fb      	ldrh	r3, [r7, #6]
 8003302:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003304:	88fb      	ldrh	r3, [r7, #6]
 8003306:	4618      	mov	r0, r3
 8003308:	f7fd feb4 	bl	8001074 <HAL_GPIO_EXTI_Callback>
  }
}
 800330c:	bf00      	nop
 800330e:	3708      	adds	r7, #8
 8003310:	46bd      	mov	sp, r7
 8003312:	bd80      	pop	{r7, pc}
 8003314:	40010400 	.word	0x40010400

08003318 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b082      	sub	sp, #8
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d101      	bne.n	800332a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003326:	2301      	movs	r3, #1
 8003328:	e081      	b.n	800342e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003330:	b2db      	uxtb	r3, r3
 8003332:	2b00      	cmp	r3, #0
 8003334:	d106      	bne.n	8003344 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2200      	movs	r2, #0
 800333a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800333e:	6878      	ldr	r0, [r7, #4]
 8003340:	f7fe fd6a 	bl	8001e18 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2224      	movs	r2, #36	; 0x24
 8003348:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	681a      	ldr	r2, [r3, #0]
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f022 0201 	bic.w	r2, r2, #1
 800335a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	685a      	ldr	r2, [r3, #4]
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003368:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	689a      	ldr	r2, [r3, #8]
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003378:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	68db      	ldr	r3, [r3, #12]
 800337e:	2b01      	cmp	r3, #1
 8003380:	d107      	bne.n	8003392 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	689a      	ldr	r2, [r3, #8]
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800338e:	609a      	str	r2, [r3, #8]
 8003390:	e006      	b.n	80033a0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	689a      	ldr	r2, [r3, #8]
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800339e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	68db      	ldr	r3, [r3, #12]
 80033a4:	2b02      	cmp	r3, #2
 80033a6:	d104      	bne.n	80033b2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80033b0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	687a      	ldr	r2, [r7, #4]
 80033ba:	6812      	ldr	r2, [r2, #0]
 80033bc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80033c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80033c4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	68da      	ldr	r2, [r3, #12]
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80033d4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	691a      	ldr	r2, [r3, #16]
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	695b      	ldr	r3, [r3, #20]
 80033de:	ea42 0103 	orr.w	r1, r2, r3
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	699b      	ldr	r3, [r3, #24]
 80033e6:	021a      	lsls	r2, r3, #8
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	430a      	orrs	r2, r1
 80033ee:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	69d9      	ldr	r1, [r3, #28]
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6a1a      	ldr	r2, [r3, #32]
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	430a      	orrs	r2, r1
 80033fe:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	681a      	ldr	r2, [r3, #0]
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f042 0201 	orr.w	r2, r2, #1
 800340e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2200      	movs	r2, #0
 8003414:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2220      	movs	r2, #32
 800341a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2200      	movs	r2, #0
 8003422:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2200      	movs	r2, #0
 8003428:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800342c:	2300      	movs	r3, #0
}
 800342e:	4618      	mov	r0, r3
 8003430:	3708      	adds	r7, #8
 8003432:	46bd      	mov	sp, r7
 8003434:	bd80      	pop	{r7, pc}

08003436 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8003436:	b580      	push	{r7, lr}
 8003438:	b082      	sub	sp, #8
 800343a:	af00      	add	r7, sp, #0
 800343c:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2b00      	cmp	r3, #0
 8003442:	d101      	bne.n	8003448 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8003444:	2301      	movs	r3, #1
 8003446:	e021      	b.n	800348c <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2224      	movs	r2, #36	; 0x24
 800344c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	681a      	ldr	r2, [r3, #0]
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f022 0201 	bic.w	r2, r2, #1
 800345e:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8003460:	6878      	ldr	r0, [r7, #4]
 8003462:	f7fe fd37 	bl	8001ed4 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2200      	movs	r2, #0
 800346a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2200      	movs	r2, #0
 8003470:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2200      	movs	r2, #0
 8003478:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2200      	movs	r2, #0
 800347e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2200      	movs	r2, #0
 8003486:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800348a:	2300      	movs	r3, #0
}
 800348c:	4618      	mov	r0, r3
 800348e:	3708      	adds	r7, #8
 8003490:	46bd      	mov	sp, r7
 8003492:	bd80      	pop	{r7, pc}

08003494 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	b088      	sub	sp, #32
 8003498:	af02      	add	r7, sp, #8
 800349a:	60f8      	str	r0, [r7, #12]
 800349c:	4608      	mov	r0, r1
 800349e:	4611      	mov	r1, r2
 80034a0:	461a      	mov	r2, r3
 80034a2:	4603      	mov	r3, r0
 80034a4:	817b      	strh	r3, [r7, #10]
 80034a6:	460b      	mov	r3, r1
 80034a8:	813b      	strh	r3, [r7, #8]
 80034aa:	4613      	mov	r3, r2
 80034ac:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80034b4:	b2db      	uxtb	r3, r3
 80034b6:	2b20      	cmp	r3, #32
 80034b8:	f040 80f9 	bne.w	80036ae <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80034bc:	6a3b      	ldr	r3, [r7, #32]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d002      	beq.n	80034c8 <HAL_I2C_Mem_Write+0x34>
 80034c2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d105      	bne.n	80034d4 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80034ce:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80034d0:	2301      	movs	r3, #1
 80034d2:	e0ed      	b.n	80036b0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80034da:	2b01      	cmp	r3, #1
 80034dc:	d101      	bne.n	80034e2 <HAL_I2C_Mem_Write+0x4e>
 80034de:	2302      	movs	r3, #2
 80034e0:	e0e6      	b.n	80036b0 <HAL_I2C_Mem_Write+0x21c>
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	2201      	movs	r2, #1
 80034e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80034ea:	f7ff f95f 	bl	80027ac <HAL_GetTick>
 80034ee:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80034f0:	697b      	ldr	r3, [r7, #20]
 80034f2:	9300      	str	r3, [sp, #0]
 80034f4:	2319      	movs	r3, #25
 80034f6:	2201      	movs	r2, #1
 80034f8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80034fc:	68f8      	ldr	r0, [r7, #12]
 80034fe:	f000 fac3 	bl	8003a88 <I2C_WaitOnFlagUntilTimeout>
 8003502:	4603      	mov	r3, r0
 8003504:	2b00      	cmp	r3, #0
 8003506:	d001      	beq.n	800350c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003508:	2301      	movs	r3, #1
 800350a:	e0d1      	b.n	80036b0 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	2221      	movs	r2, #33	; 0x21
 8003510:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	2240      	movs	r2, #64	; 0x40
 8003518:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	2200      	movs	r2, #0
 8003520:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	6a3a      	ldr	r2, [r7, #32]
 8003526:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800352c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	2200      	movs	r2, #0
 8003532:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003534:	88f8      	ldrh	r0, [r7, #6]
 8003536:	893a      	ldrh	r2, [r7, #8]
 8003538:	8979      	ldrh	r1, [r7, #10]
 800353a:	697b      	ldr	r3, [r7, #20]
 800353c:	9301      	str	r3, [sp, #4]
 800353e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003540:	9300      	str	r3, [sp, #0]
 8003542:	4603      	mov	r3, r0
 8003544:	68f8      	ldr	r0, [r7, #12]
 8003546:	f000 f9d3 	bl	80038f0 <I2C_RequestMemoryWrite>
 800354a:	4603      	mov	r3, r0
 800354c:	2b00      	cmp	r3, #0
 800354e:	d005      	beq.n	800355c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	2200      	movs	r2, #0
 8003554:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003558:	2301      	movs	r3, #1
 800355a:	e0a9      	b.n	80036b0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003560:	b29b      	uxth	r3, r3
 8003562:	2bff      	cmp	r3, #255	; 0xff
 8003564:	d90e      	bls.n	8003584 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	22ff      	movs	r2, #255	; 0xff
 800356a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003570:	b2da      	uxtb	r2, r3
 8003572:	8979      	ldrh	r1, [r7, #10]
 8003574:	2300      	movs	r3, #0
 8003576:	9300      	str	r3, [sp, #0]
 8003578:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800357c:	68f8      	ldr	r0, [r7, #12]
 800357e:	f000 fba5 	bl	8003ccc <I2C_TransferConfig>
 8003582:	e00f      	b.n	80035a4 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003588:	b29a      	uxth	r2, r3
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003592:	b2da      	uxtb	r2, r3
 8003594:	8979      	ldrh	r1, [r7, #10]
 8003596:	2300      	movs	r3, #0
 8003598:	9300      	str	r3, [sp, #0]
 800359a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800359e:	68f8      	ldr	r0, [r7, #12]
 80035a0:	f000 fb94 	bl	8003ccc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80035a4:	697a      	ldr	r2, [r7, #20]
 80035a6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80035a8:	68f8      	ldr	r0, [r7, #12]
 80035aa:	f000 faad 	bl	8003b08 <I2C_WaitOnTXISFlagUntilTimeout>
 80035ae:	4603      	mov	r3, r0
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d001      	beq.n	80035b8 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80035b4:	2301      	movs	r3, #1
 80035b6:	e07b      	b.n	80036b0 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035bc:	781a      	ldrb	r2, [r3, #0]
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035c8:	1c5a      	adds	r2, r3, #1
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035d2:	b29b      	uxth	r3, r3
 80035d4:	3b01      	subs	r3, #1
 80035d6:	b29a      	uxth	r2, r3
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035e0:	3b01      	subs	r3, #1
 80035e2:	b29a      	uxth	r2, r3
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035ec:	b29b      	uxth	r3, r3
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d034      	beq.n	800365c <HAL_I2C_Mem_Write+0x1c8>
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d130      	bne.n	800365c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80035fa:	697b      	ldr	r3, [r7, #20]
 80035fc:	9300      	str	r3, [sp, #0]
 80035fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003600:	2200      	movs	r2, #0
 8003602:	2180      	movs	r1, #128	; 0x80
 8003604:	68f8      	ldr	r0, [r7, #12]
 8003606:	f000 fa3f 	bl	8003a88 <I2C_WaitOnFlagUntilTimeout>
 800360a:	4603      	mov	r3, r0
 800360c:	2b00      	cmp	r3, #0
 800360e:	d001      	beq.n	8003614 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003610:	2301      	movs	r3, #1
 8003612:	e04d      	b.n	80036b0 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003618:	b29b      	uxth	r3, r3
 800361a:	2bff      	cmp	r3, #255	; 0xff
 800361c:	d90e      	bls.n	800363c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	22ff      	movs	r2, #255	; 0xff
 8003622:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003628:	b2da      	uxtb	r2, r3
 800362a:	8979      	ldrh	r1, [r7, #10]
 800362c:	2300      	movs	r3, #0
 800362e:	9300      	str	r3, [sp, #0]
 8003630:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003634:	68f8      	ldr	r0, [r7, #12]
 8003636:	f000 fb49 	bl	8003ccc <I2C_TransferConfig>
 800363a:	e00f      	b.n	800365c <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003640:	b29a      	uxth	r2, r3
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800364a:	b2da      	uxtb	r2, r3
 800364c:	8979      	ldrh	r1, [r7, #10]
 800364e:	2300      	movs	r3, #0
 8003650:	9300      	str	r3, [sp, #0]
 8003652:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003656:	68f8      	ldr	r0, [r7, #12]
 8003658:	f000 fb38 	bl	8003ccc <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003660:	b29b      	uxth	r3, r3
 8003662:	2b00      	cmp	r3, #0
 8003664:	d19e      	bne.n	80035a4 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003666:	697a      	ldr	r2, [r7, #20]
 8003668:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800366a:	68f8      	ldr	r0, [r7, #12]
 800366c:	f000 fa8c 	bl	8003b88 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003670:	4603      	mov	r3, r0
 8003672:	2b00      	cmp	r3, #0
 8003674:	d001      	beq.n	800367a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8003676:	2301      	movs	r3, #1
 8003678:	e01a      	b.n	80036b0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	2220      	movs	r2, #32
 8003680:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	6859      	ldr	r1, [r3, #4]
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681a      	ldr	r2, [r3, #0]
 800368c:	4b0a      	ldr	r3, [pc, #40]	; (80036b8 <HAL_I2C_Mem_Write+0x224>)
 800368e:	400b      	ands	r3, r1
 8003690:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	2220      	movs	r2, #32
 8003696:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	2200      	movs	r2, #0
 800369e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	2200      	movs	r2, #0
 80036a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80036aa:	2300      	movs	r3, #0
 80036ac:	e000      	b.n	80036b0 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80036ae:	2302      	movs	r3, #2
  }
}
 80036b0:	4618      	mov	r0, r3
 80036b2:	3718      	adds	r7, #24
 80036b4:	46bd      	mov	sp, r7
 80036b6:	bd80      	pop	{r7, pc}
 80036b8:	fe00e800 	.word	0xfe00e800

080036bc <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b088      	sub	sp, #32
 80036c0:	af02      	add	r7, sp, #8
 80036c2:	60f8      	str	r0, [r7, #12]
 80036c4:	4608      	mov	r0, r1
 80036c6:	4611      	mov	r1, r2
 80036c8:	461a      	mov	r2, r3
 80036ca:	4603      	mov	r3, r0
 80036cc:	817b      	strh	r3, [r7, #10]
 80036ce:	460b      	mov	r3, r1
 80036d0:	813b      	strh	r3, [r7, #8]
 80036d2:	4613      	mov	r3, r2
 80036d4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80036dc:	b2db      	uxtb	r3, r3
 80036de:	2b20      	cmp	r3, #32
 80036e0:	f040 80fd 	bne.w	80038de <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80036e4:	6a3b      	ldr	r3, [r7, #32]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d002      	beq.n	80036f0 <HAL_I2C_Mem_Read+0x34>
 80036ea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d105      	bne.n	80036fc <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80036f6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80036f8:	2301      	movs	r3, #1
 80036fa:	e0f1      	b.n	80038e0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003702:	2b01      	cmp	r3, #1
 8003704:	d101      	bne.n	800370a <HAL_I2C_Mem_Read+0x4e>
 8003706:	2302      	movs	r3, #2
 8003708:	e0ea      	b.n	80038e0 <HAL_I2C_Mem_Read+0x224>
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	2201      	movs	r2, #1
 800370e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003712:	f7ff f84b 	bl	80027ac <HAL_GetTick>
 8003716:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003718:	697b      	ldr	r3, [r7, #20]
 800371a:	9300      	str	r3, [sp, #0]
 800371c:	2319      	movs	r3, #25
 800371e:	2201      	movs	r2, #1
 8003720:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003724:	68f8      	ldr	r0, [r7, #12]
 8003726:	f000 f9af 	bl	8003a88 <I2C_WaitOnFlagUntilTimeout>
 800372a:	4603      	mov	r3, r0
 800372c:	2b00      	cmp	r3, #0
 800372e:	d001      	beq.n	8003734 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8003730:	2301      	movs	r3, #1
 8003732:	e0d5      	b.n	80038e0 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	2222      	movs	r2, #34	; 0x22
 8003738:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	2240      	movs	r2, #64	; 0x40
 8003740:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	2200      	movs	r2, #0
 8003748:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	6a3a      	ldr	r2, [r7, #32]
 800374e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003754:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	2200      	movs	r2, #0
 800375a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800375c:	88f8      	ldrh	r0, [r7, #6]
 800375e:	893a      	ldrh	r2, [r7, #8]
 8003760:	8979      	ldrh	r1, [r7, #10]
 8003762:	697b      	ldr	r3, [r7, #20]
 8003764:	9301      	str	r3, [sp, #4]
 8003766:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003768:	9300      	str	r3, [sp, #0]
 800376a:	4603      	mov	r3, r0
 800376c:	68f8      	ldr	r0, [r7, #12]
 800376e:	f000 f913 	bl	8003998 <I2C_RequestMemoryRead>
 8003772:	4603      	mov	r3, r0
 8003774:	2b00      	cmp	r3, #0
 8003776:	d005      	beq.n	8003784 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	2200      	movs	r2, #0
 800377c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003780:	2301      	movs	r3, #1
 8003782:	e0ad      	b.n	80038e0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003788:	b29b      	uxth	r3, r3
 800378a:	2bff      	cmp	r3, #255	; 0xff
 800378c:	d90e      	bls.n	80037ac <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	22ff      	movs	r2, #255	; 0xff
 8003792:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003798:	b2da      	uxtb	r2, r3
 800379a:	8979      	ldrh	r1, [r7, #10]
 800379c:	4b52      	ldr	r3, [pc, #328]	; (80038e8 <HAL_I2C_Mem_Read+0x22c>)
 800379e:	9300      	str	r3, [sp, #0]
 80037a0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80037a4:	68f8      	ldr	r0, [r7, #12]
 80037a6:	f000 fa91 	bl	8003ccc <I2C_TransferConfig>
 80037aa:	e00f      	b.n	80037cc <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037b0:	b29a      	uxth	r2, r3
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037ba:	b2da      	uxtb	r2, r3
 80037bc:	8979      	ldrh	r1, [r7, #10]
 80037be:	4b4a      	ldr	r3, [pc, #296]	; (80038e8 <HAL_I2C_Mem_Read+0x22c>)
 80037c0:	9300      	str	r3, [sp, #0]
 80037c2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80037c6:	68f8      	ldr	r0, [r7, #12]
 80037c8:	f000 fa80 	bl	8003ccc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80037cc:	697b      	ldr	r3, [r7, #20]
 80037ce:	9300      	str	r3, [sp, #0]
 80037d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037d2:	2200      	movs	r2, #0
 80037d4:	2104      	movs	r1, #4
 80037d6:	68f8      	ldr	r0, [r7, #12]
 80037d8:	f000 f956 	bl	8003a88 <I2C_WaitOnFlagUntilTimeout>
 80037dc:	4603      	mov	r3, r0
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d001      	beq.n	80037e6 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80037e2:	2301      	movs	r3, #1
 80037e4:	e07c      	b.n	80038e0 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037f0:	b2d2      	uxtb	r2, r2
 80037f2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037f8:	1c5a      	adds	r2, r3, #1
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003802:	3b01      	subs	r3, #1
 8003804:	b29a      	uxth	r2, r3
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800380e:	b29b      	uxth	r3, r3
 8003810:	3b01      	subs	r3, #1
 8003812:	b29a      	uxth	r2, r3
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800381c:	b29b      	uxth	r3, r3
 800381e:	2b00      	cmp	r3, #0
 8003820:	d034      	beq.n	800388c <HAL_I2C_Mem_Read+0x1d0>
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003826:	2b00      	cmp	r3, #0
 8003828:	d130      	bne.n	800388c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800382a:	697b      	ldr	r3, [r7, #20]
 800382c:	9300      	str	r3, [sp, #0]
 800382e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003830:	2200      	movs	r2, #0
 8003832:	2180      	movs	r1, #128	; 0x80
 8003834:	68f8      	ldr	r0, [r7, #12]
 8003836:	f000 f927 	bl	8003a88 <I2C_WaitOnFlagUntilTimeout>
 800383a:	4603      	mov	r3, r0
 800383c:	2b00      	cmp	r3, #0
 800383e:	d001      	beq.n	8003844 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003840:	2301      	movs	r3, #1
 8003842:	e04d      	b.n	80038e0 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003848:	b29b      	uxth	r3, r3
 800384a:	2bff      	cmp	r3, #255	; 0xff
 800384c:	d90e      	bls.n	800386c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	22ff      	movs	r2, #255	; 0xff
 8003852:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003858:	b2da      	uxtb	r2, r3
 800385a:	8979      	ldrh	r1, [r7, #10]
 800385c:	2300      	movs	r3, #0
 800385e:	9300      	str	r3, [sp, #0]
 8003860:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003864:	68f8      	ldr	r0, [r7, #12]
 8003866:	f000 fa31 	bl	8003ccc <I2C_TransferConfig>
 800386a:	e00f      	b.n	800388c <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003870:	b29a      	uxth	r2, r3
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800387a:	b2da      	uxtb	r2, r3
 800387c:	8979      	ldrh	r1, [r7, #10]
 800387e:	2300      	movs	r3, #0
 8003880:	9300      	str	r3, [sp, #0]
 8003882:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003886:	68f8      	ldr	r0, [r7, #12]
 8003888:	f000 fa20 	bl	8003ccc <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003890:	b29b      	uxth	r3, r3
 8003892:	2b00      	cmp	r3, #0
 8003894:	d19a      	bne.n	80037cc <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003896:	697a      	ldr	r2, [r7, #20]
 8003898:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800389a:	68f8      	ldr	r0, [r7, #12]
 800389c:	f000 f974 	bl	8003b88 <I2C_WaitOnSTOPFlagUntilTimeout>
 80038a0:	4603      	mov	r3, r0
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d001      	beq.n	80038aa <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80038a6:	2301      	movs	r3, #1
 80038a8:	e01a      	b.n	80038e0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	2220      	movs	r2, #32
 80038b0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	6859      	ldr	r1, [r3, #4]
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	681a      	ldr	r2, [r3, #0]
 80038bc:	4b0b      	ldr	r3, [pc, #44]	; (80038ec <HAL_I2C_Mem_Read+0x230>)
 80038be:	400b      	ands	r3, r1
 80038c0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	2220      	movs	r2, #32
 80038c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	2200      	movs	r2, #0
 80038ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	2200      	movs	r2, #0
 80038d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80038da:	2300      	movs	r3, #0
 80038dc:	e000      	b.n	80038e0 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80038de:	2302      	movs	r3, #2
  }
}
 80038e0:	4618      	mov	r0, r3
 80038e2:	3718      	adds	r7, #24
 80038e4:	46bd      	mov	sp, r7
 80038e6:	bd80      	pop	{r7, pc}
 80038e8:	80002400 	.word	0x80002400
 80038ec:	fe00e800 	.word	0xfe00e800

080038f0 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b086      	sub	sp, #24
 80038f4:	af02      	add	r7, sp, #8
 80038f6:	60f8      	str	r0, [r7, #12]
 80038f8:	4608      	mov	r0, r1
 80038fa:	4611      	mov	r1, r2
 80038fc:	461a      	mov	r2, r3
 80038fe:	4603      	mov	r3, r0
 8003900:	817b      	strh	r3, [r7, #10]
 8003902:	460b      	mov	r3, r1
 8003904:	813b      	strh	r3, [r7, #8]
 8003906:	4613      	mov	r3, r2
 8003908:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800390a:	88fb      	ldrh	r3, [r7, #6]
 800390c:	b2da      	uxtb	r2, r3
 800390e:	8979      	ldrh	r1, [r7, #10]
 8003910:	4b20      	ldr	r3, [pc, #128]	; (8003994 <I2C_RequestMemoryWrite+0xa4>)
 8003912:	9300      	str	r3, [sp, #0]
 8003914:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003918:	68f8      	ldr	r0, [r7, #12]
 800391a:	f000 f9d7 	bl	8003ccc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800391e:	69fa      	ldr	r2, [r7, #28]
 8003920:	69b9      	ldr	r1, [r7, #24]
 8003922:	68f8      	ldr	r0, [r7, #12]
 8003924:	f000 f8f0 	bl	8003b08 <I2C_WaitOnTXISFlagUntilTimeout>
 8003928:	4603      	mov	r3, r0
 800392a:	2b00      	cmp	r3, #0
 800392c:	d001      	beq.n	8003932 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800392e:	2301      	movs	r3, #1
 8003930:	e02c      	b.n	800398c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003932:	88fb      	ldrh	r3, [r7, #6]
 8003934:	2b01      	cmp	r3, #1
 8003936:	d105      	bne.n	8003944 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003938:	893b      	ldrh	r3, [r7, #8]
 800393a:	b2da      	uxtb	r2, r3
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	629a      	str	r2, [r3, #40]	; 0x28
 8003942:	e015      	b.n	8003970 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003944:	893b      	ldrh	r3, [r7, #8]
 8003946:	0a1b      	lsrs	r3, r3, #8
 8003948:	b29b      	uxth	r3, r3
 800394a:	b2da      	uxtb	r2, r3
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003952:	69fa      	ldr	r2, [r7, #28]
 8003954:	69b9      	ldr	r1, [r7, #24]
 8003956:	68f8      	ldr	r0, [r7, #12]
 8003958:	f000 f8d6 	bl	8003b08 <I2C_WaitOnTXISFlagUntilTimeout>
 800395c:	4603      	mov	r3, r0
 800395e:	2b00      	cmp	r3, #0
 8003960:	d001      	beq.n	8003966 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8003962:	2301      	movs	r3, #1
 8003964:	e012      	b.n	800398c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003966:	893b      	ldrh	r3, [r7, #8]
 8003968:	b2da      	uxtb	r2, r3
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003970:	69fb      	ldr	r3, [r7, #28]
 8003972:	9300      	str	r3, [sp, #0]
 8003974:	69bb      	ldr	r3, [r7, #24]
 8003976:	2200      	movs	r2, #0
 8003978:	2180      	movs	r1, #128	; 0x80
 800397a:	68f8      	ldr	r0, [r7, #12]
 800397c:	f000 f884 	bl	8003a88 <I2C_WaitOnFlagUntilTimeout>
 8003980:	4603      	mov	r3, r0
 8003982:	2b00      	cmp	r3, #0
 8003984:	d001      	beq.n	800398a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8003986:	2301      	movs	r3, #1
 8003988:	e000      	b.n	800398c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800398a:	2300      	movs	r3, #0
}
 800398c:	4618      	mov	r0, r3
 800398e:	3710      	adds	r7, #16
 8003990:	46bd      	mov	sp, r7
 8003992:	bd80      	pop	{r7, pc}
 8003994:	80002000 	.word	0x80002000

08003998 <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b086      	sub	sp, #24
 800399c:	af02      	add	r7, sp, #8
 800399e:	60f8      	str	r0, [r7, #12]
 80039a0:	4608      	mov	r0, r1
 80039a2:	4611      	mov	r1, r2
 80039a4:	461a      	mov	r2, r3
 80039a6:	4603      	mov	r3, r0
 80039a8:	817b      	strh	r3, [r7, #10]
 80039aa:	460b      	mov	r3, r1
 80039ac:	813b      	strh	r3, [r7, #8]
 80039ae:	4613      	mov	r3, r2
 80039b0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80039b2:	88fb      	ldrh	r3, [r7, #6]
 80039b4:	b2da      	uxtb	r2, r3
 80039b6:	8979      	ldrh	r1, [r7, #10]
 80039b8:	4b20      	ldr	r3, [pc, #128]	; (8003a3c <I2C_RequestMemoryRead+0xa4>)
 80039ba:	9300      	str	r3, [sp, #0]
 80039bc:	2300      	movs	r3, #0
 80039be:	68f8      	ldr	r0, [r7, #12]
 80039c0:	f000 f984 	bl	8003ccc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80039c4:	69fa      	ldr	r2, [r7, #28]
 80039c6:	69b9      	ldr	r1, [r7, #24]
 80039c8:	68f8      	ldr	r0, [r7, #12]
 80039ca:	f000 f89d 	bl	8003b08 <I2C_WaitOnTXISFlagUntilTimeout>
 80039ce:	4603      	mov	r3, r0
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d001      	beq.n	80039d8 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80039d4:	2301      	movs	r3, #1
 80039d6:	e02c      	b.n	8003a32 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80039d8:	88fb      	ldrh	r3, [r7, #6]
 80039da:	2b01      	cmp	r3, #1
 80039dc:	d105      	bne.n	80039ea <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80039de:	893b      	ldrh	r3, [r7, #8]
 80039e0:	b2da      	uxtb	r2, r3
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	629a      	str	r2, [r3, #40]	; 0x28
 80039e8:	e015      	b.n	8003a16 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80039ea:	893b      	ldrh	r3, [r7, #8]
 80039ec:	0a1b      	lsrs	r3, r3, #8
 80039ee:	b29b      	uxth	r3, r3
 80039f0:	b2da      	uxtb	r2, r3
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80039f8:	69fa      	ldr	r2, [r7, #28]
 80039fa:	69b9      	ldr	r1, [r7, #24]
 80039fc:	68f8      	ldr	r0, [r7, #12]
 80039fe:	f000 f883 	bl	8003b08 <I2C_WaitOnTXISFlagUntilTimeout>
 8003a02:	4603      	mov	r3, r0
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d001      	beq.n	8003a0c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003a08:	2301      	movs	r3, #1
 8003a0a:	e012      	b.n	8003a32 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003a0c:	893b      	ldrh	r3, [r7, #8]
 8003a0e:	b2da      	uxtb	r2, r3
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003a16:	69fb      	ldr	r3, [r7, #28]
 8003a18:	9300      	str	r3, [sp, #0]
 8003a1a:	69bb      	ldr	r3, [r7, #24]
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	2140      	movs	r1, #64	; 0x40
 8003a20:	68f8      	ldr	r0, [r7, #12]
 8003a22:	f000 f831 	bl	8003a88 <I2C_WaitOnFlagUntilTimeout>
 8003a26:	4603      	mov	r3, r0
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d001      	beq.n	8003a30 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	e000      	b.n	8003a32 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003a30:	2300      	movs	r3, #0
}
 8003a32:	4618      	mov	r0, r3
 8003a34:	3710      	adds	r7, #16
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bd80      	pop	{r7, pc}
 8003a3a:	bf00      	nop
 8003a3c:	80002000 	.word	0x80002000

08003a40 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003a40:	b480      	push	{r7}
 8003a42:	b083      	sub	sp, #12
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	699b      	ldr	r3, [r3, #24]
 8003a4e:	f003 0302 	and.w	r3, r3, #2
 8003a52:	2b02      	cmp	r3, #2
 8003a54:	d103      	bne.n	8003a5e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	699b      	ldr	r3, [r3, #24]
 8003a64:	f003 0301 	and.w	r3, r3, #1
 8003a68:	2b01      	cmp	r3, #1
 8003a6a:	d007      	beq.n	8003a7c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	699a      	ldr	r2, [r3, #24]
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f042 0201 	orr.w	r2, r2, #1
 8003a7a:	619a      	str	r2, [r3, #24]
  }
}
 8003a7c:	bf00      	nop
 8003a7e:	370c      	adds	r7, #12
 8003a80:	46bd      	mov	sp, r7
 8003a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a86:	4770      	bx	lr

08003a88 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b084      	sub	sp, #16
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	60f8      	str	r0, [r7, #12]
 8003a90:	60b9      	str	r1, [r7, #8]
 8003a92:	603b      	str	r3, [r7, #0]
 8003a94:	4613      	mov	r3, r2
 8003a96:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003a98:	e022      	b.n	8003ae0 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003aa0:	d01e      	beq.n	8003ae0 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003aa2:	f7fe fe83 	bl	80027ac <HAL_GetTick>
 8003aa6:	4602      	mov	r2, r0
 8003aa8:	69bb      	ldr	r3, [r7, #24]
 8003aaa:	1ad3      	subs	r3, r2, r3
 8003aac:	683a      	ldr	r2, [r7, #0]
 8003aae:	429a      	cmp	r2, r3
 8003ab0:	d302      	bcc.n	8003ab8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d113      	bne.n	8003ae0 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003abc:	f043 0220 	orr.w	r2, r3, #32
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	2220      	movs	r2, #32
 8003ac8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	2200      	movs	r2, #0
 8003ad0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003adc:	2301      	movs	r3, #1
 8003ade:	e00f      	b.n	8003b00 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	699a      	ldr	r2, [r3, #24]
 8003ae6:	68bb      	ldr	r3, [r7, #8]
 8003ae8:	4013      	ands	r3, r2
 8003aea:	68ba      	ldr	r2, [r7, #8]
 8003aec:	429a      	cmp	r2, r3
 8003aee:	bf0c      	ite	eq
 8003af0:	2301      	moveq	r3, #1
 8003af2:	2300      	movne	r3, #0
 8003af4:	b2db      	uxtb	r3, r3
 8003af6:	461a      	mov	r2, r3
 8003af8:	79fb      	ldrb	r3, [r7, #7]
 8003afa:	429a      	cmp	r2, r3
 8003afc:	d0cd      	beq.n	8003a9a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003afe:	2300      	movs	r3, #0
}
 8003b00:	4618      	mov	r0, r3
 8003b02:	3710      	adds	r7, #16
 8003b04:	46bd      	mov	sp, r7
 8003b06:	bd80      	pop	{r7, pc}

08003b08 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b084      	sub	sp, #16
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	60f8      	str	r0, [r7, #12]
 8003b10:	60b9      	str	r1, [r7, #8]
 8003b12:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003b14:	e02c      	b.n	8003b70 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b16:	687a      	ldr	r2, [r7, #4]
 8003b18:	68b9      	ldr	r1, [r7, #8]
 8003b1a:	68f8      	ldr	r0, [r7, #12]
 8003b1c:	f000 f870 	bl	8003c00 <I2C_IsAcknowledgeFailed>
 8003b20:	4603      	mov	r3, r0
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d001      	beq.n	8003b2a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003b26:	2301      	movs	r3, #1
 8003b28:	e02a      	b.n	8003b80 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b2a:	68bb      	ldr	r3, [r7, #8]
 8003b2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b30:	d01e      	beq.n	8003b70 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b32:	f7fe fe3b 	bl	80027ac <HAL_GetTick>
 8003b36:	4602      	mov	r2, r0
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	1ad3      	subs	r3, r2, r3
 8003b3c:	68ba      	ldr	r2, [r7, #8]
 8003b3e:	429a      	cmp	r2, r3
 8003b40:	d302      	bcc.n	8003b48 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003b42:	68bb      	ldr	r3, [r7, #8]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d113      	bne.n	8003b70 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b4c:	f043 0220 	orr.w	r2, r3, #32
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	2220      	movs	r2, #32
 8003b58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	2200      	movs	r2, #0
 8003b60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	2200      	movs	r2, #0
 8003b68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003b6c:	2301      	movs	r3, #1
 8003b6e:	e007      	b.n	8003b80 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	699b      	ldr	r3, [r3, #24]
 8003b76:	f003 0302 	and.w	r3, r3, #2
 8003b7a:	2b02      	cmp	r3, #2
 8003b7c:	d1cb      	bne.n	8003b16 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003b7e:	2300      	movs	r3, #0
}
 8003b80:	4618      	mov	r0, r3
 8003b82:	3710      	adds	r7, #16
 8003b84:	46bd      	mov	sp, r7
 8003b86:	bd80      	pop	{r7, pc}

08003b88 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b084      	sub	sp, #16
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	60f8      	str	r0, [r7, #12]
 8003b90:	60b9      	str	r1, [r7, #8]
 8003b92:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003b94:	e028      	b.n	8003be8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b96:	687a      	ldr	r2, [r7, #4]
 8003b98:	68b9      	ldr	r1, [r7, #8]
 8003b9a:	68f8      	ldr	r0, [r7, #12]
 8003b9c:	f000 f830 	bl	8003c00 <I2C_IsAcknowledgeFailed>
 8003ba0:	4603      	mov	r3, r0
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d001      	beq.n	8003baa <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	e026      	b.n	8003bf8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003baa:	f7fe fdff 	bl	80027ac <HAL_GetTick>
 8003bae:	4602      	mov	r2, r0
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	1ad3      	subs	r3, r2, r3
 8003bb4:	68ba      	ldr	r2, [r7, #8]
 8003bb6:	429a      	cmp	r2, r3
 8003bb8:	d302      	bcc.n	8003bc0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003bba:	68bb      	ldr	r3, [r7, #8]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d113      	bne.n	8003be8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bc4:	f043 0220 	orr.w	r2, r3, #32
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	2220      	movs	r2, #32
 8003bd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	2200      	movs	r2, #0
 8003be0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003be4:	2301      	movs	r3, #1
 8003be6:	e007      	b.n	8003bf8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	699b      	ldr	r3, [r3, #24]
 8003bee:	f003 0320 	and.w	r3, r3, #32
 8003bf2:	2b20      	cmp	r3, #32
 8003bf4:	d1cf      	bne.n	8003b96 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003bf6:	2300      	movs	r3, #0
}
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	3710      	adds	r7, #16
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	bd80      	pop	{r7, pc}

08003c00 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b084      	sub	sp, #16
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	60f8      	str	r0, [r7, #12]
 8003c08:	60b9      	str	r1, [r7, #8]
 8003c0a:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	699b      	ldr	r3, [r3, #24]
 8003c12:	f003 0310 	and.w	r3, r3, #16
 8003c16:	2b10      	cmp	r3, #16
 8003c18:	d151      	bne.n	8003cbe <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003c1a:	e022      	b.n	8003c62 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003c1c:	68bb      	ldr	r3, [r7, #8]
 8003c1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c22:	d01e      	beq.n	8003c62 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c24:	f7fe fdc2 	bl	80027ac <HAL_GetTick>
 8003c28:	4602      	mov	r2, r0
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	1ad3      	subs	r3, r2, r3
 8003c2e:	68ba      	ldr	r2, [r7, #8]
 8003c30:	429a      	cmp	r2, r3
 8003c32:	d302      	bcc.n	8003c3a <I2C_IsAcknowledgeFailed+0x3a>
 8003c34:	68bb      	ldr	r3, [r7, #8]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d113      	bne.n	8003c62 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c3e:	f043 0220 	orr.w	r2, r3, #32
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	2220      	movs	r2, #32
 8003c4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	2200      	movs	r2, #0
 8003c52:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	2200      	movs	r2, #0
 8003c5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8003c5e:	2301      	movs	r3, #1
 8003c60:	e02e      	b.n	8003cc0 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	699b      	ldr	r3, [r3, #24]
 8003c68:	f003 0320 	and.w	r3, r3, #32
 8003c6c:	2b20      	cmp	r3, #32
 8003c6e:	d1d5      	bne.n	8003c1c <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	2210      	movs	r2, #16
 8003c76:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	2220      	movs	r2, #32
 8003c7e:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003c80:	68f8      	ldr	r0, [r7, #12]
 8003c82:	f7ff fedd 	bl	8003a40 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	6859      	ldr	r1, [r3, #4]
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	681a      	ldr	r2, [r3, #0]
 8003c90:	4b0d      	ldr	r3, [pc, #52]	; (8003cc8 <I2C_IsAcknowledgeFailed+0xc8>)
 8003c92:	400b      	ands	r3, r1
 8003c94:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c9a:	f043 0204 	orr.w	r2, r3, #4
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	2220      	movs	r2, #32
 8003ca6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	2200      	movs	r2, #0
 8003cae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8003cba:	2301      	movs	r3, #1
 8003cbc:	e000      	b.n	8003cc0 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8003cbe:	2300      	movs	r3, #0
}
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	3710      	adds	r7, #16
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	bd80      	pop	{r7, pc}
 8003cc8:	fe00e800 	.word	0xfe00e800

08003ccc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003ccc:	b480      	push	{r7}
 8003cce:	b085      	sub	sp, #20
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	60f8      	str	r0, [r7, #12]
 8003cd4:	607b      	str	r3, [r7, #4]
 8003cd6:	460b      	mov	r3, r1
 8003cd8:	817b      	strh	r3, [r7, #10]
 8003cda:	4613      	mov	r3, r2
 8003cdc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	685a      	ldr	r2, [r3, #4]
 8003ce4:	69bb      	ldr	r3, [r7, #24]
 8003ce6:	0d5b      	lsrs	r3, r3, #21
 8003ce8:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003cec:	4b0d      	ldr	r3, [pc, #52]	; (8003d24 <I2C_TransferConfig+0x58>)
 8003cee:	430b      	orrs	r3, r1
 8003cf0:	43db      	mvns	r3, r3
 8003cf2:	ea02 0103 	and.w	r1, r2, r3
 8003cf6:	897b      	ldrh	r3, [r7, #10]
 8003cf8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003cfc:	7a7b      	ldrb	r3, [r7, #9]
 8003cfe:	041b      	lsls	r3, r3, #16
 8003d00:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003d04:	431a      	orrs	r2, r3
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	431a      	orrs	r2, r3
 8003d0a:	69bb      	ldr	r3, [r7, #24]
 8003d0c:	431a      	orrs	r2, r3
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	430a      	orrs	r2, r1
 8003d14:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8003d16:	bf00      	nop
 8003d18:	3714      	adds	r7, #20
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d20:	4770      	bx	lr
 8003d22:	bf00      	nop
 8003d24:	03ff63ff 	.word	0x03ff63ff

08003d28 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003d28:	b480      	push	{r7}
 8003d2a:	b083      	sub	sp, #12
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
 8003d30:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d38:	b2db      	uxtb	r3, r3
 8003d3a:	2b20      	cmp	r3, #32
 8003d3c:	d138      	bne.n	8003db0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003d44:	2b01      	cmp	r3, #1
 8003d46:	d101      	bne.n	8003d4c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003d48:	2302      	movs	r3, #2
 8003d4a:	e032      	b.n	8003db2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2201      	movs	r2, #1
 8003d50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2224      	movs	r2, #36	; 0x24
 8003d58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	681a      	ldr	r2, [r3, #0]
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f022 0201 	bic.w	r2, r2, #1
 8003d6a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	681a      	ldr	r2, [r3, #0]
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003d7a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	6819      	ldr	r1, [r3, #0]
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	683a      	ldr	r2, [r7, #0]
 8003d88:	430a      	orrs	r2, r1
 8003d8a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	681a      	ldr	r2, [r3, #0]
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f042 0201 	orr.w	r2, r2, #1
 8003d9a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2220      	movs	r2, #32
 8003da0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2200      	movs	r2, #0
 8003da8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003dac:	2300      	movs	r3, #0
 8003dae:	e000      	b.n	8003db2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003db0:	2302      	movs	r3, #2
  }
}
 8003db2:	4618      	mov	r0, r3
 8003db4:	370c      	adds	r7, #12
 8003db6:	46bd      	mov	sp, r7
 8003db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbc:	4770      	bx	lr

08003dbe <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003dbe:	b480      	push	{r7}
 8003dc0:	b085      	sub	sp, #20
 8003dc2:	af00      	add	r7, sp, #0
 8003dc4:	6078      	str	r0, [r7, #4]
 8003dc6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003dce:	b2db      	uxtb	r3, r3
 8003dd0:	2b20      	cmp	r3, #32
 8003dd2:	d139      	bne.n	8003e48 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003dda:	2b01      	cmp	r3, #1
 8003ddc:	d101      	bne.n	8003de2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003dde:	2302      	movs	r3, #2
 8003de0:	e033      	b.n	8003e4a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	2201      	movs	r2, #1
 8003de6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2224      	movs	r2, #36	; 0x24
 8003dee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	681a      	ldr	r2, [r3, #0]
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f022 0201 	bic.w	r2, r2, #1
 8003e00:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003e10:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	021b      	lsls	r3, r3, #8
 8003e16:	68fa      	ldr	r2, [r7, #12]
 8003e18:	4313      	orrs	r3, r2
 8003e1a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	68fa      	ldr	r2, [r7, #12]
 8003e22:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	681a      	ldr	r2, [r3, #0]
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f042 0201 	orr.w	r2, r2, #1
 8003e32:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2220      	movs	r2, #32
 8003e38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2200      	movs	r2, #0
 8003e40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003e44:	2300      	movs	r3, #0
 8003e46:	e000      	b.n	8003e4a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003e48:	2302      	movs	r3, #2
  }
}
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	3714      	adds	r7, #20
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e54:	4770      	bx	lr

08003e56 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003e56:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e58:	b08f      	sub	sp, #60	; 0x3c
 8003e5a:	af0a      	add	r7, sp, #40	; 0x28
 8003e5c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d101      	bne.n	8003e68 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003e64:	2301      	movs	r3, #1
 8003e66:	e116      	b.n	8004096 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8003e74:	b2db      	uxtb	r3, r3
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d106      	bne.n	8003e88 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003e82:	6878      	ldr	r0, [r7, #4]
 8003e84:	f7fe fa00 	bl	8002288 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2203      	movs	r2, #3
 8003e8c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003e90:	68bb      	ldr	r3, [r7, #8]
 8003e92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d102      	bne.n	8003ea2 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	f005 f83e 	bl	8008f28 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	603b      	str	r3, [r7, #0]
 8003eb2:	687e      	ldr	r6, [r7, #4]
 8003eb4:	466d      	mov	r5, sp
 8003eb6:	f106 0410 	add.w	r4, r6, #16
 8003eba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003ebc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003ebe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003ec0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003ec2:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003ec6:	e885 0003 	stmia.w	r5, {r0, r1}
 8003eca:	1d33      	adds	r3, r6, #4
 8003ecc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003ece:	6838      	ldr	r0, [r7, #0]
 8003ed0:	f004 fffe 	bl	8008ed0 <USB_CoreInit>
 8003ed4:	4603      	mov	r3, r0
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d005      	beq.n	8003ee6 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2202      	movs	r2, #2
 8003ede:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	e0d7      	b.n	8004096 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	2100      	movs	r1, #0
 8003eec:	4618      	mov	r0, r3
 8003eee:	f005 f82c 	bl	8008f4a <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	73fb      	strb	r3, [r7, #15]
 8003ef6:	e04a      	b.n	8003f8e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003ef8:	7bfa      	ldrb	r2, [r7, #15]
 8003efa:	6879      	ldr	r1, [r7, #4]
 8003efc:	4613      	mov	r3, r2
 8003efe:	00db      	lsls	r3, r3, #3
 8003f00:	1a9b      	subs	r3, r3, r2
 8003f02:	009b      	lsls	r3, r3, #2
 8003f04:	440b      	add	r3, r1
 8003f06:	333d      	adds	r3, #61	; 0x3d
 8003f08:	2201      	movs	r2, #1
 8003f0a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003f0c:	7bfa      	ldrb	r2, [r7, #15]
 8003f0e:	6879      	ldr	r1, [r7, #4]
 8003f10:	4613      	mov	r3, r2
 8003f12:	00db      	lsls	r3, r3, #3
 8003f14:	1a9b      	subs	r3, r3, r2
 8003f16:	009b      	lsls	r3, r3, #2
 8003f18:	440b      	add	r3, r1
 8003f1a:	333c      	adds	r3, #60	; 0x3c
 8003f1c:	7bfa      	ldrb	r2, [r7, #15]
 8003f1e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003f20:	7bfa      	ldrb	r2, [r7, #15]
 8003f22:	7bfb      	ldrb	r3, [r7, #15]
 8003f24:	b298      	uxth	r0, r3
 8003f26:	6879      	ldr	r1, [r7, #4]
 8003f28:	4613      	mov	r3, r2
 8003f2a:	00db      	lsls	r3, r3, #3
 8003f2c:	1a9b      	subs	r3, r3, r2
 8003f2e:	009b      	lsls	r3, r3, #2
 8003f30:	440b      	add	r3, r1
 8003f32:	3342      	adds	r3, #66	; 0x42
 8003f34:	4602      	mov	r2, r0
 8003f36:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003f38:	7bfa      	ldrb	r2, [r7, #15]
 8003f3a:	6879      	ldr	r1, [r7, #4]
 8003f3c:	4613      	mov	r3, r2
 8003f3e:	00db      	lsls	r3, r3, #3
 8003f40:	1a9b      	subs	r3, r3, r2
 8003f42:	009b      	lsls	r3, r3, #2
 8003f44:	440b      	add	r3, r1
 8003f46:	333f      	adds	r3, #63	; 0x3f
 8003f48:	2200      	movs	r2, #0
 8003f4a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003f4c:	7bfa      	ldrb	r2, [r7, #15]
 8003f4e:	6879      	ldr	r1, [r7, #4]
 8003f50:	4613      	mov	r3, r2
 8003f52:	00db      	lsls	r3, r3, #3
 8003f54:	1a9b      	subs	r3, r3, r2
 8003f56:	009b      	lsls	r3, r3, #2
 8003f58:	440b      	add	r3, r1
 8003f5a:	3344      	adds	r3, #68	; 0x44
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003f60:	7bfa      	ldrb	r2, [r7, #15]
 8003f62:	6879      	ldr	r1, [r7, #4]
 8003f64:	4613      	mov	r3, r2
 8003f66:	00db      	lsls	r3, r3, #3
 8003f68:	1a9b      	subs	r3, r3, r2
 8003f6a:	009b      	lsls	r3, r3, #2
 8003f6c:	440b      	add	r3, r1
 8003f6e:	3348      	adds	r3, #72	; 0x48
 8003f70:	2200      	movs	r2, #0
 8003f72:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003f74:	7bfa      	ldrb	r2, [r7, #15]
 8003f76:	6879      	ldr	r1, [r7, #4]
 8003f78:	4613      	mov	r3, r2
 8003f7a:	00db      	lsls	r3, r3, #3
 8003f7c:	1a9b      	subs	r3, r3, r2
 8003f7e:	009b      	lsls	r3, r3, #2
 8003f80:	440b      	add	r3, r1
 8003f82:	3350      	adds	r3, #80	; 0x50
 8003f84:	2200      	movs	r2, #0
 8003f86:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003f88:	7bfb      	ldrb	r3, [r7, #15]
 8003f8a:	3301      	adds	r3, #1
 8003f8c:	73fb      	strb	r3, [r7, #15]
 8003f8e:	7bfa      	ldrb	r2, [r7, #15]
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	685b      	ldr	r3, [r3, #4]
 8003f94:	429a      	cmp	r2, r3
 8003f96:	d3af      	bcc.n	8003ef8 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003f98:	2300      	movs	r3, #0
 8003f9a:	73fb      	strb	r3, [r7, #15]
 8003f9c:	e044      	b.n	8004028 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003f9e:	7bfa      	ldrb	r2, [r7, #15]
 8003fa0:	6879      	ldr	r1, [r7, #4]
 8003fa2:	4613      	mov	r3, r2
 8003fa4:	00db      	lsls	r3, r3, #3
 8003fa6:	1a9b      	subs	r3, r3, r2
 8003fa8:	009b      	lsls	r3, r3, #2
 8003faa:	440b      	add	r3, r1
 8003fac:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003fb4:	7bfa      	ldrb	r2, [r7, #15]
 8003fb6:	6879      	ldr	r1, [r7, #4]
 8003fb8:	4613      	mov	r3, r2
 8003fba:	00db      	lsls	r3, r3, #3
 8003fbc:	1a9b      	subs	r3, r3, r2
 8003fbe:	009b      	lsls	r3, r3, #2
 8003fc0:	440b      	add	r3, r1
 8003fc2:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8003fc6:	7bfa      	ldrb	r2, [r7, #15]
 8003fc8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003fca:	7bfa      	ldrb	r2, [r7, #15]
 8003fcc:	6879      	ldr	r1, [r7, #4]
 8003fce:	4613      	mov	r3, r2
 8003fd0:	00db      	lsls	r3, r3, #3
 8003fd2:	1a9b      	subs	r3, r3, r2
 8003fd4:	009b      	lsls	r3, r3, #2
 8003fd6:	440b      	add	r3, r1
 8003fd8:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8003fdc:	2200      	movs	r2, #0
 8003fde:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003fe0:	7bfa      	ldrb	r2, [r7, #15]
 8003fe2:	6879      	ldr	r1, [r7, #4]
 8003fe4:	4613      	mov	r3, r2
 8003fe6:	00db      	lsls	r3, r3, #3
 8003fe8:	1a9b      	subs	r3, r3, r2
 8003fea:	009b      	lsls	r3, r3, #2
 8003fec:	440b      	add	r3, r1
 8003fee:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003ff6:	7bfa      	ldrb	r2, [r7, #15]
 8003ff8:	6879      	ldr	r1, [r7, #4]
 8003ffa:	4613      	mov	r3, r2
 8003ffc:	00db      	lsls	r3, r3, #3
 8003ffe:	1a9b      	subs	r3, r3, r2
 8004000:	009b      	lsls	r3, r3, #2
 8004002:	440b      	add	r3, r1
 8004004:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004008:	2200      	movs	r2, #0
 800400a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800400c:	7bfa      	ldrb	r2, [r7, #15]
 800400e:	6879      	ldr	r1, [r7, #4]
 8004010:	4613      	mov	r3, r2
 8004012:	00db      	lsls	r3, r3, #3
 8004014:	1a9b      	subs	r3, r3, r2
 8004016:	009b      	lsls	r3, r3, #2
 8004018:	440b      	add	r3, r1
 800401a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800401e:	2200      	movs	r2, #0
 8004020:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004022:	7bfb      	ldrb	r3, [r7, #15]
 8004024:	3301      	adds	r3, #1
 8004026:	73fb      	strb	r3, [r7, #15]
 8004028:	7bfa      	ldrb	r2, [r7, #15]
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	685b      	ldr	r3, [r3, #4]
 800402e:	429a      	cmp	r2, r3
 8004030:	d3b5      	bcc.n	8003f9e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	603b      	str	r3, [r7, #0]
 8004038:	687e      	ldr	r6, [r7, #4]
 800403a:	466d      	mov	r5, sp
 800403c:	f106 0410 	add.w	r4, r6, #16
 8004040:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004042:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004044:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004046:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004048:	e894 0003 	ldmia.w	r4, {r0, r1}
 800404c:	e885 0003 	stmia.w	r5, {r0, r1}
 8004050:	1d33      	adds	r3, r6, #4
 8004052:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004054:	6838      	ldr	r0, [r7, #0]
 8004056:	f004 ffa3 	bl	8008fa0 <USB_DevInit>
 800405a:	4603      	mov	r3, r0
 800405c:	2b00      	cmp	r3, #0
 800405e:	d005      	beq.n	800406c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2202      	movs	r2, #2
 8004064:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8004068:	2301      	movs	r3, #1
 800406a:	e014      	b.n	8004096 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2200      	movs	r2, #0
 8004070:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2201      	movs	r2, #1
 8004078:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004080:	2b01      	cmp	r3, #1
 8004082:	d102      	bne.n	800408a <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004084:	6878      	ldr	r0, [r7, #4]
 8004086:	f000 f80a 	bl	800409e <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	4618      	mov	r0, r3
 8004090:	f005 f933 	bl	80092fa <USB_DevDisconnect>

  return HAL_OK;
 8004094:	2300      	movs	r3, #0
}
 8004096:	4618      	mov	r0, r3
 8004098:	3714      	adds	r7, #20
 800409a:	46bd      	mov	sp, r7
 800409c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800409e <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800409e:	b480      	push	{r7}
 80040a0:	b085      	sub	sp, #20
 80040a2:	af00      	add	r7, sp, #0
 80040a4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2201      	movs	r2, #1
 80040b0:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2200      	movs	r2, #0
 80040b8:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	699b      	ldr	r3, [r3, #24]
 80040c0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040d0:	f043 0303 	orr.w	r3, r3, #3
 80040d4:	68fa      	ldr	r2, [r7, #12]
 80040d6:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80040d8:	2300      	movs	r3, #0
}
 80040da:	4618      	mov	r0, r3
 80040dc:	3714      	adds	r7, #20
 80040de:	46bd      	mov	sp, r7
 80040e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e4:	4770      	bx	lr
	...

080040e8 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80040e8:	b480      	push	{r7}
 80040ea:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80040ec:	4b05      	ldr	r3, [pc, #20]	; (8004104 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	4a04      	ldr	r2, [pc, #16]	; (8004104 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80040f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040f6:	6013      	str	r3, [r2, #0]
}
 80040f8:	bf00      	nop
 80040fa:	46bd      	mov	sp, r7
 80040fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004100:	4770      	bx	lr
 8004102:	bf00      	nop
 8004104:	40007000 	.word	0x40007000

08004108 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004108:	b480      	push	{r7}
 800410a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800410c:	4b04      	ldr	r3, [pc, #16]	; (8004120 <HAL_PWREx_GetVoltageRange+0x18>)
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8004114:	4618      	mov	r0, r3
 8004116:	46bd      	mov	sp, r7
 8004118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411c:	4770      	bx	lr
 800411e:	bf00      	nop
 8004120:	40007000 	.word	0x40007000

08004124 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004124:	b480      	push	{r7}
 8004126:	b085      	sub	sp, #20
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004132:	d130      	bne.n	8004196 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004134:	4b23      	ldr	r3, [pc, #140]	; (80041c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800413c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004140:	d038      	beq.n	80041b4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004142:	4b20      	ldr	r3, [pc, #128]	; (80041c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800414a:	4a1e      	ldr	r2, [pc, #120]	; (80041c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800414c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004150:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004152:	4b1d      	ldr	r3, [pc, #116]	; (80041c8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	2232      	movs	r2, #50	; 0x32
 8004158:	fb02 f303 	mul.w	r3, r2, r3
 800415c:	4a1b      	ldr	r2, [pc, #108]	; (80041cc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800415e:	fba2 2303 	umull	r2, r3, r2, r3
 8004162:	0c9b      	lsrs	r3, r3, #18
 8004164:	3301      	adds	r3, #1
 8004166:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004168:	e002      	b.n	8004170 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	3b01      	subs	r3, #1
 800416e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004170:	4b14      	ldr	r3, [pc, #80]	; (80041c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004172:	695b      	ldr	r3, [r3, #20]
 8004174:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004178:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800417c:	d102      	bne.n	8004184 <HAL_PWREx_ControlVoltageScaling+0x60>
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	2b00      	cmp	r3, #0
 8004182:	d1f2      	bne.n	800416a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004184:	4b0f      	ldr	r3, [pc, #60]	; (80041c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004186:	695b      	ldr	r3, [r3, #20]
 8004188:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800418c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004190:	d110      	bne.n	80041b4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004192:	2303      	movs	r3, #3
 8004194:	e00f      	b.n	80041b6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004196:	4b0b      	ldr	r3, [pc, #44]	; (80041c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800419e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041a2:	d007      	beq.n	80041b4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80041a4:	4b07      	ldr	r3, [pc, #28]	; (80041c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80041ac:	4a05      	ldr	r2, [pc, #20]	; (80041c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80041ae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80041b2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80041b4:	2300      	movs	r3, #0
}
 80041b6:	4618      	mov	r0, r3
 80041b8:	3714      	adds	r7, #20
 80041ba:	46bd      	mov	sp, r7
 80041bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c0:	4770      	bx	lr
 80041c2:	bf00      	nop
 80041c4:	40007000 	.word	0x40007000
 80041c8:	20000008 	.word	0x20000008
 80041cc:	431bde83 	.word	0x431bde83

080041d0 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80041d0:	b480      	push	{r7}
 80041d2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 80041d4:	4b05      	ldr	r3, [pc, #20]	; (80041ec <HAL_PWREx_EnableVddUSB+0x1c>)
 80041d6:	685b      	ldr	r3, [r3, #4]
 80041d8:	4a04      	ldr	r2, [pc, #16]	; (80041ec <HAL_PWREx_EnableVddUSB+0x1c>)
 80041da:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80041de:	6053      	str	r3, [r2, #4]
}
 80041e0:	bf00      	nop
 80041e2:	46bd      	mov	sp, r7
 80041e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e8:	4770      	bx	lr
 80041ea:	bf00      	nop
 80041ec:	40007000 	.word	0x40007000

080041f0 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b086      	sub	sp, #24
 80041f4:	af02      	add	r7, sp, #8
 80041f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80041f8:	f7fe fad8 	bl	80027ac <HAL_GetTick>
 80041fc:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d101      	bne.n	8004208 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8004204:	2301      	movs	r3, #1
 8004206:	e063      	b.n	80042d0 <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800420e:	b2db      	uxtb	r3, r3
 8004210:	2b00      	cmp	r3, #0
 8004212:	d10b      	bne.n	800422c <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2200      	movs	r2, #0
 8004218:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 800421c:	6878      	ldr	r0, [r7, #4]
 800421e:	f7fd fe7d 	bl	8001f1c <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8004222:	f241 3188 	movw	r1, #5000	; 0x1388
 8004226:	6878      	ldr	r0, [r7, #4]
 8004228:	f000 f858 	bl	80042dc <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	689b      	ldr	r3, [r3, #8]
 800423a:	3b01      	subs	r3, #1
 800423c:	021a      	lsls	r2, r3, #8
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	430a      	orrs	r2, r1
 8004244:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800424a:	9300      	str	r3, [sp, #0]
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	2200      	movs	r2, #0
 8004250:	2120      	movs	r1, #32
 8004252:	6878      	ldr	r0, [r7, #4]
 8004254:	f000 f850 	bl	80042f8 <QSPI_WaitFlagStateUntilTimeout>
 8004258:	4603      	mov	r3, r0
 800425a:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 800425c:	7afb      	ldrb	r3, [r7, #11]
 800425e:	2b00      	cmp	r3, #0
 8004260:	d131      	bne.n	80042c6 <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800426c:	f023 0310 	bic.w	r3, r3, #16
 8004270:	687a      	ldr	r2, [r7, #4]
 8004272:	6852      	ldr	r2, [r2, #4]
 8004274:	0611      	lsls	r1, r2, #24
 8004276:	687a      	ldr	r2, [r7, #4]
 8004278:	68d2      	ldr	r2, [r2, #12]
 800427a:	4311      	orrs	r1, r2
 800427c:	687a      	ldr	r2, [r7, #4]
 800427e:	6812      	ldr	r2, [r2, #0]
 8004280:	430b      	orrs	r3, r1
 8004282:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	685a      	ldr	r2, [r3, #4]
 800428a:	4b13      	ldr	r3, [pc, #76]	; (80042d8 <HAL_QSPI_Init+0xe8>)
 800428c:	4013      	ands	r3, r2
 800428e:	687a      	ldr	r2, [r7, #4]
 8004290:	6912      	ldr	r2, [r2, #16]
 8004292:	0411      	lsls	r1, r2, #16
 8004294:	687a      	ldr	r2, [r7, #4]
 8004296:	6952      	ldr	r2, [r2, #20]
 8004298:	4311      	orrs	r1, r2
 800429a:	687a      	ldr	r2, [r7, #4]
 800429c:	6992      	ldr	r2, [r2, #24]
 800429e:	4311      	orrs	r1, r2
 80042a0:	687a      	ldr	r2, [r7, #4]
 80042a2:	6812      	ldr	r2, [r2, #0]
 80042a4:	430b      	orrs	r3, r1
 80042a6:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	681a      	ldr	r2, [r3, #0]
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f042 0201 	orr.w	r2, r2, #1
 80042b6:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2200      	movs	r2, #0
 80042bc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	2201      	movs	r2, #1
 80042c2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	2200      	movs	r2, #0
 80042ca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 80042ce:	7afb      	ldrb	r3, [r7, #11]
}
 80042d0:	4618      	mov	r0, r3
 80042d2:	3710      	adds	r7, #16
 80042d4:	46bd      	mov	sp, r7
 80042d6:	bd80      	pop	{r7, pc}
 80042d8:	ffe0f8fe 	.word	0xffe0f8fe

080042dc <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 80042dc:	b480      	push	{r7}
 80042de:	b083      	sub	sp, #12
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
 80042e4:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	683a      	ldr	r2, [r7, #0]
 80042ea:	641a      	str	r2, [r3, #64]	; 0x40
}
 80042ec:	bf00      	nop
 80042ee:	370c      	adds	r7, #12
 80042f0:	46bd      	mov	sp, r7
 80042f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f6:	4770      	bx	lr

080042f8 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b084      	sub	sp, #16
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	60f8      	str	r0, [r7, #12]
 8004300:	60b9      	str	r1, [r7, #8]
 8004302:	603b      	str	r3, [r7, #0]
 8004304:	4613      	mov	r3, r2
 8004306:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8004308:	e01a      	b.n	8004340 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800430a:	69bb      	ldr	r3, [r7, #24]
 800430c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004310:	d016      	beq.n	8004340 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004312:	f7fe fa4b 	bl	80027ac <HAL_GetTick>
 8004316:	4602      	mov	r2, r0
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	1ad3      	subs	r3, r2, r3
 800431c:	69ba      	ldr	r2, [r7, #24]
 800431e:	429a      	cmp	r2, r3
 8004320:	d302      	bcc.n	8004328 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8004322:	69bb      	ldr	r3, [r7, #24]
 8004324:	2b00      	cmp	r3, #0
 8004326:	d10b      	bne.n	8004340 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	2204      	movs	r2, #4
 800432c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004334:	f043 0201 	orr.w	r2, r3, #1
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	63da      	str	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800433c:	2301      	movs	r3, #1
 800433e:	e00e      	b.n	800435e <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	689a      	ldr	r2, [r3, #8]
 8004346:	68bb      	ldr	r3, [r7, #8]
 8004348:	4013      	ands	r3, r2
 800434a:	2b00      	cmp	r3, #0
 800434c:	bf14      	ite	ne
 800434e:	2301      	movne	r3, #1
 8004350:	2300      	moveq	r3, #0
 8004352:	b2db      	uxtb	r3, r3
 8004354:	461a      	mov	r2, r3
 8004356:	79fb      	ldrb	r3, [r7, #7]
 8004358:	429a      	cmp	r2, r3
 800435a:	d1d6      	bne.n	800430a <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800435c:	2300      	movs	r3, #0
}
 800435e:	4618      	mov	r0, r3
 8004360:	3710      	adds	r7, #16
 8004362:	46bd      	mov	sp, r7
 8004364:	bd80      	pop	{r7, pc}
	...

08004368 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	b088      	sub	sp, #32
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d101      	bne.n	800437a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004376:	2301      	movs	r3, #1
 8004378:	e3d8      	b.n	8004b2c <HAL_RCC_OscConfig+0x7c4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800437a:	4b97      	ldr	r3, [pc, #604]	; (80045d8 <HAL_RCC_OscConfig+0x270>)
 800437c:	689b      	ldr	r3, [r3, #8]
 800437e:	f003 030c 	and.w	r3, r3, #12
 8004382:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004384:	4b94      	ldr	r3, [pc, #592]	; (80045d8 <HAL_RCC_OscConfig+0x270>)
 8004386:	68db      	ldr	r3, [r3, #12]
 8004388:	f003 0303 	and.w	r3, r3, #3
 800438c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f003 0310 	and.w	r3, r3, #16
 8004396:	2b00      	cmp	r3, #0
 8004398:	f000 80e4 	beq.w	8004564 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800439c:	69bb      	ldr	r3, [r7, #24]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d007      	beq.n	80043b2 <HAL_RCC_OscConfig+0x4a>
 80043a2:	69bb      	ldr	r3, [r7, #24]
 80043a4:	2b0c      	cmp	r3, #12
 80043a6:	f040 808b 	bne.w	80044c0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80043aa:	697b      	ldr	r3, [r7, #20]
 80043ac:	2b01      	cmp	r3, #1
 80043ae:	f040 8087 	bne.w	80044c0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80043b2:	4b89      	ldr	r3, [pc, #548]	; (80045d8 <HAL_RCC_OscConfig+0x270>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f003 0302 	and.w	r3, r3, #2
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d005      	beq.n	80043ca <HAL_RCC_OscConfig+0x62>
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	699b      	ldr	r3, [r3, #24]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d101      	bne.n	80043ca <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80043c6:	2301      	movs	r3, #1
 80043c8:	e3b0      	b.n	8004b2c <HAL_RCC_OscConfig+0x7c4>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6a1a      	ldr	r2, [r3, #32]
 80043ce:	4b82      	ldr	r3, [pc, #520]	; (80045d8 <HAL_RCC_OscConfig+0x270>)
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f003 0308 	and.w	r3, r3, #8
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d004      	beq.n	80043e4 <HAL_RCC_OscConfig+0x7c>
 80043da:	4b7f      	ldr	r3, [pc, #508]	; (80045d8 <HAL_RCC_OscConfig+0x270>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80043e2:	e005      	b.n	80043f0 <HAL_RCC_OscConfig+0x88>
 80043e4:	4b7c      	ldr	r3, [pc, #496]	; (80045d8 <HAL_RCC_OscConfig+0x270>)
 80043e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80043ea:	091b      	lsrs	r3, r3, #4
 80043ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80043f0:	4293      	cmp	r3, r2
 80043f2:	d223      	bcs.n	800443c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6a1b      	ldr	r3, [r3, #32]
 80043f8:	4618      	mov	r0, r3
 80043fa:	f000 fd75 	bl	8004ee8 <RCC_SetFlashLatencyFromMSIRange>
 80043fe:	4603      	mov	r3, r0
 8004400:	2b00      	cmp	r3, #0
 8004402:	d001      	beq.n	8004408 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8004404:	2301      	movs	r3, #1
 8004406:	e391      	b.n	8004b2c <HAL_RCC_OscConfig+0x7c4>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004408:	4b73      	ldr	r3, [pc, #460]	; (80045d8 <HAL_RCC_OscConfig+0x270>)
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	4a72      	ldr	r2, [pc, #456]	; (80045d8 <HAL_RCC_OscConfig+0x270>)
 800440e:	f043 0308 	orr.w	r3, r3, #8
 8004412:	6013      	str	r3, [r2, #0]
 8004414:	4b70      	ldr	r3, [pc, #448]	; (80045d8 <HAL_RCC_OscConfig+0x270>)
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6a1b      	ldr	r3, [r3, #32]
 8004420:	496d      	ldr	r1, [pc, #436]	; (80045d8 <HAL_RCC_OscConfig+0x270>)
 8004422:	4313      	orrs	r3, r2
 8004424:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004426:	4b6c      	ldr	r3, [pc, #432]	; (80045d8 <HAL_RCC_OscConfig+0x270>)
 8004428:	685b      	ldr	r3, [r3, #4]
 800442a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	69db      	ldr	r3, [r3, #28]
 8004432:	021b      	lsls	r3, r3, #8
 8004434:	4968      	ldr	r1, [pc, #416]	; (80045d8 <HAL_RCC_OscConfig+0x270>)
 8004436:	4313      	orrs	r3, r2
 8004438:	604b      	str	r3, [r1, #4]
 800443a:	e025      	b.n	8004488 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800443c:	4b66      	ldr	r3, [pc, #408]	; (80045d8 <HAL_RCC_OscConfig+0x270>)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	4a65      	ldr	r2, [pc, #404]	; (80045d8 <HAL_RCC_OscConfig+0x270>)
 8004442:	f043 0308 	orr.w	r3, r3, #8
 8004446:	6013      	str	r3, [r2, #0]
 8004448:	4b63      	ldr	r3, [pc, #396]	; (80045d8 <HAL_RCC_OscConfig+0x270>)
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6a1b      	ldr	r3, [r3, #32]
 8004454:	4960      	ldr	r1, [pc, #384]	; (80045d8 <HAL_RCC_OscConfig+0x270>)
 8004456:	4313      	orrs	r3, r2
 8004458:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800445a:	4b5f      	ldr	r3, [pc, #380]	; (80045d8 <HAL_RCC_OscConfig+0x270>)
 800445c:	685b      	ldr	r3, [r3, #4]
 800445e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	69db      	ldr	r3, [r3, #28]
 8004466:	021b      	lsls	r3, r3, #8
 8004468:	495b      	ldr	r1, [pc, #364]	; (80045d8 <HAL_RCC_OscConfig+0x270>)
 800446a:	4313      	orrs	r3, r2
 800446c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800446e:	69bb      	ldr	r3, [r7, #24]
 8004470:	2b00      	cmp	r3, #0
 8004472:	d109      	bne.n	8004488 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6a1b      	ldr	r3, [r3, #32]
 8004478:	4618      	mov	r0, r3
 800447a:	f000 fd35 	bl	8004ee8 <RCC_SetFlashLatencyFromMSIRange>
 800447e:	4603      	mov	r3, r0
 8004480:	2b00      	cmp	r3, #0
 8004482:	d001      	beq.n	8004488 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8004484:	2301      	movs	r3, #1
 8004486:	e351      	b.n	8004b2c <HAL_RCC_OscConfig+0x7c4>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004488:	f000 fc38 	bl	8004cfc <HAL_RCC_GetSysClockFreq>
 800448c:	4602      	mov	r2, r0
 800448e:	4b52      	ldr	r3, [pc, #328]	; (80045d8 <HAL_RCC_OscConfig+0x270>)
 8004490:	689b      	ldr	r3, [r3, #8]
 8004492:	091b      	lsrs	r3, r3, #4
 8004494:	f003 030f 	and.w	r3, r3, #15
 8004498:	4950      	ldr	r1, [pc, #320]	; (80045dc <HAL_RCC_OscConfig+0x274>)
 800449a:	5ccb      	ldrb	r3, [r1, r3]
 800449c:	f003 031f 	and.w	r3, r3, #31
 80044a0:	fa22 f303 	lsr.w	r3, r2, r3
 80044a4:	4a4e      	ldr	r2, [pc, #312]	; (80045e0 <HAL_RCC_OscConfig+0x278>)
 80044a6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80044a8:	4b4e      	ldr	r3, [pc, #312]	; (80045e4 <HAL_RCC_OscConfig+0x27c>)
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	4618      	mov	r0, r3
 80044ae:	f7fd ff87 	bl	80023c0 <HAL_InitTick>
 80044b2:	4603      	mov	r3, r0
 80044b4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80044b6:	7bfb      	ldrb	r3, [r7, #15]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d052      	beq.n	8004562 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80044bc:	7bfb      	ldrb	r3, [r7, #15]
 80044be:	e335      	b.n	8004b2c <HAL_RCC_OscConfig+0x7c4>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	699b      	ldr	r3, [r3, #24]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d032      	beq.n	800452e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80044c8:	4b43      	ldr	r3, [pc, #268]	; (80045d8 <HAL_RCC_OscConfig+0x270>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	4a42      	ldr	r2, [pc, #264]	; (80045d8 <HAL_RCC_OscConfig+0x270>)
 80044ce:	f043 0301 	orr.w	r3, r3, #1
 80044d2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80044d4:	f7fe f96a 	bl	80027ac <HAL_GetTick>
 80044d8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80044da:	e008      	b.n	80044ee <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80044dc:	f7fe f966 	bl	80027ac <HAL_GetTick>
 80044e0:	4602      	mov	r2, r0
 80044e2:	693b      	ldr	r3, [r7, #16]
 80044e4:	1ad3      	subs	r3, r2, r3
 80044e6:	2b02      	cmp	r3, #2
 80044e8:	d901      	bls.n	80044ee <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80044ea:	2303      	movs	r3, #3
 80044ec:	e31e      	b.n	8004b2c <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80044ee:	4b3a      	ldr	r3, [pc, #232]	; (80045d8 <HAL_RCC_OscConfig+0x270>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f003 0302 	and.w	r3, r3, #2
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d0f0      	beq.n	80044dc <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80044fa:	4b37      	ldr	r3, [pc, #220]	; (80045d8 <HAL_RCC_OscConfig+0x270>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	4a36      	ldr	r2, [pc, #216]	; (80045d8 <HAL_RCC_OscConfig+0x270>)
 8004500:	f043 0308 	orr.w	r3, r3, #8
 8004504:	6013      	str	r3, [r2, #0]
 8004506:	4b34      	ldr	r3, [pc, #208]	; (80045d8 <HAL_RCC_OscConfig+0x270>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6a1b      	ldr	r3, [r3, #32]
 8004512:	4931      	ldr	r1, [pc, #196]	; (80045d8 <HAL_RCC_OscConfig+0x270>)
 8004514:	4313      	orrs	r3, r2
 8004516:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004518:	4b2f      	ldr	r3, [pc, #188]	; (80045d8 <HAL_RCC_OscConfig+0x270>)
 800451a:	685b      	ldr	r3, [r3, #4]
 800451c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	69db      	ldr	r3, [r3, #28]
 8004524:	021b      	lsls	r3, r3, #8
 8004526:	492c      	ldr	r1, [pc, #176]	; (80045d8 <HAL_RCC_OscConfig+0x270>)
 8004528:	4313      	orrs	r3, r2
 800452a:	604b      	str	r3, [r1, #4]
 800452c:	e01a      	b.n	8004564 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800452e:	4b2a      	ldr	r3, [pc, #168]	; (80045d8 <HAL_RCC_OscConfig+0x270>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	4a29      	ldr	r2, [pc, #164]	; (80045d8 <HAL_RCC_OscConfig+0x270>)
 8004534:	f023 0301 	bic.w	r3, r3, #1
 8004538:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800453a:	f7fe f937 	bl	80027ac <HAL_GetTick>
 800453e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004540:	e008      	b.n	8004554 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004542:	f7fe f933 	bl	80027ac <HAL_GetTick>
 8004546:	4602      	mov	r2, r0
 8004548:	693b      	ldr	r3, [r7, #16]
 800454a:	1ad3      	subs	r3, r2, r3
 800454c:	2b02      	cmp	r3, #2
 800454e:	d901      	bls.n	8004554 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8004550:	2303      	movs	r3, #3
 8004552:	e2eb      	b.n	8004b2c <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004554:	4b20      	ldr	r3, [pc, #128]	; (80045d8 <HAL_RCC_OscConfig+0x270>)
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f003 0302 	and.w	r3, r3, #2
 800455c:	2b00      	cmp	r3, #0
 800455e:	d1f0      	bne.n	8004542 <HAL_RCC_OscConfig+0x1da>
 8004560:	e000      	b.n	8004564 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004562:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f003 0301 	and.w	r3, r3, #1
 800456c:	2b00      	cmp	r3, #0
 800456e:	d074      	beq.n	800465a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004570:	69bb      	ldr	r3, [r7, #24]
 8004572:	2b08      	cmp	r3, #8
 8004574:	d005      	beq.n	8004582 <HAL_RCC_OscConfig+0x21a>
 8004576:	69bb      	ldr	r3, [r7, #24]
 8004578:	2b0c      	cmp	r3, #12
 800457a:	d10e      	bne.n	800459a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800457c:	697b      	ldr	r3, [r7, #20]
 800457e:	2b03      	cmp	r3, #3
 8004580:	d10b      	bne.n	800459a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004582:	4b15      	ldr	r3, [pc, #84]	; (80045d8 <HAL_RCC_OscConfig+0x270>)
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800458a:	2b00      	cmp	r3, #0
 800458c:	d064      	beq.n	8004658 <HAL_RCC_OscConfig+0x2f0>
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	685b      	ldr	r3, [r3, #4]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d160      	bne.n	8004658 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004596:	2301      	movs	r3, #1
 8004598:	e2c8      	b.n	8004b2c <HAL_RCC_OscConfig+0x7c4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	685b      	ldr	r3, [r3, #4]
 800459e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045a2:	d106      	bne.n	80045b2 <HAL_RCC_OscConfig+0x24a>
 80045a4:	4b0c      	ldr	r3, [pc, #48]	; (80045d8 <HAL_RCC_OscConfig+0x270>)
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	4a0b      	ldr	r2, [pc, #44]	; (80045d8 <HAL_RCC_OscConfig+0x270>)
 80045aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045ae:	6013      	str	r3, [r2, #0]
 80045b0:	e026      	b.n	8004600 <HAL_RCC_OscConfig+0x298>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	685b      	ldr	r3, [r3, #4]
 80045b6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80045ba:	d115      	bne.n	80045e8 <HAL_RCC_OscConfig+0x280>
 80045bc:	4b06      	ldr	r3, [pc, #24]	; (80045d8 <HAL_RCC_OscConfig+0x270>)
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	4a05      	ldr	r2, [pc, #20]	; (80045d8 <HAL_RCC_OscConfig+0x270>)
 80045c2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80045c6:	6013      	str	r3, [r2, #0]
 80045c8:	4b03      	ldr	r3, [pc, #12]	; (80045d8 <HAL_RCC_OscConfig+0x270>)
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	4a02      	ldr	r2, [pc, #8]	; (80045d8 <HAL_RCC_OscConfig+0x270>)
 80045ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045d2:	6013      	str	r3, [r2, #0]
 80045d4:	e014      	b.n	8004600 <HAL_RCC_OscConfig+0x298>
 80045d6:	bf00      	nop
 80045d8:	40021000 	.word	0x40021000
 80045dc:	0801449c 	.word	0x0801449c
 80045e0:	20000008 	.word	0x20000008
 80045e4:	2000000c 	.word	0x2000000c
 80045e8:	4ba0      	ldr	r3, [pc, #640]	; (800486c <HAL_RCC_OscConfig+0x504>)
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	4a9f      	ldr	r2, [pc, #636]	; (800486c <HAL_RCC_OscConfig+0x504>)
 80045ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80045f2:	6013      	str	r3, [r2, #0]
 80045f4:	4b9d      	ldr	r3, [pc, #628]	; (800486c <HAL_RCC_OscConfig+0x504>)
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	4a9c      	ldr	r2, [pc, #624]	; (800486c <HAL_RCC_OscConfig+0x504>)
 80045fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80045fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	685b      	ldr	r3, [r3, #4]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d013      	beq.n	8004630 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004608:	f7fe f8d0 	bl	80027ac <HAL_GetTick>
 800460c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800460e:	e008      	b.n	8004622 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004610:	f7fe f8cc 	bl	80027ac <HAL_GetTick>
 8004614:	4602      	mov	r2, r0
 8004616:	693b      	ldr	r3, [r7, #16]
 8004618:	1ad3      	subs	r3, r2, r3
 800461a:	2b64      	cmp	r3, #100	; 0x64
 800461c:	d901      	bls.n	8004622 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800461e:	2303      	movs	r3, #3
 8004620:	e284      	b.n	8004b2c <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004622:	4b92      	ldr	r3, [pc, #584]	; (800486c <HAL_RCC_OscConfig+0x504>)
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800462a:	2b00      	cmp	r3, #0
 800462c:	d0f0      	beq.n	8004610 <HAL_RCC_OscConfig+0x2a8>
 800462e:	e014      	b.n	800465a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004630:	f7fe f8bc 	bl	80027ac <HAL_GetTick>
 8004634:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004636:	e008      	b.n	800464a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004638:	f7fe f8b8 	bl	80027ac <HAL_GetTick>
 800463c:	4602      	mov	r2, r0
 800463e:	693b      	ldr	r3, [r7, #16]
 8004640:	1ad3      	subs	r3, r2, r3
 8004642:	2b64      	cmp	r3, #100	; 0x64
 8004644:	d901      	bls.n	800464a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004646:	2303      	movs	r3, #3
 8004648:	e270      	b.n	8004b2c <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800464a:	4b88      	ldr	r3, [pc, #544]	; (800486c <HAL_RCC_OscConfig+0x504>)
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004652:	2b00      	cmp	r3, #0
 8004654:	d1f0      	bne.n	8004638 <HAL_RCC_OscConfig+0x2d0>
 8004656:	e000      	b.n	800465a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004658:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f003 0302 	and.w	r3, r3, #2
 8004662:	2b00      	cmp	r3, #0
 8004664:	d060      	beq.n	8004728 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004666:	69bb      	ldr	r3, [r7, #24]
 8004668:	2b04      	cmp	r3, #4
 800466a:	d005      	beq.n	8004678 <HAL_RCC_OscConfig+0x310>
 800466c:	69bb      	ldr	r3, [r7, #24]
 800466e:	2b0c      	cmp	r3, #12
 8004670:	d119      	bne.n	80046a6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004672:	697b      	ldr	r3, [r7, #20]
 8004674:	2b02      	cmp	r3, #2
 8004676:	d116      	bne.n	80046a6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004678:	4b7c      	ldr	r3, [pc, #496]	; (800486c <HAL_RCC_OscConfig+0x504>)
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004680:	2b00      	cmp	r3, #0
 8004682:	d005      	beq.n	8004690 <HAL_RCC_OscConfig+0x328>
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	68db      	ldr	r3, [r3, #12]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d101      	bne.n	8004690 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800468c:	2301      	movs	r3, #1
 800468e:	e24d      	b.n	8004b2c <HAL_RCC_OscConfig+0x7c4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004690:	4b76      	ldr	r3, [pc, #472]	; (800486c <HAL_RCC_OscConfig+0x504>)
 8004692:	685b      	ldr	r3, [r3, #4]
 8004694:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	691b      	ldr	r3, [r3, #16]
 800469c:	061b      	lsls	r3, r3, #24
 800469e:	4973      	ldr	r1, [pc, #460]	; (800486c <HAL_RCC_OscConfig+0x504>)
 80046a0:	4313      	orrs	r3, r2
 80046a2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80046a4:	e040      	b.n	8004728 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	68db      	ldr	r3, [r3, #12]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d023      	beq.n	80046f6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80046ae:	4b6f      	ldr	r3, [pc, #444]	; (800486c <HAL_RCC_OscConfig+0x504>)
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	4a6e      	ldr	r2, [pc, #440]	; (800486c <HAL_RCC_OscConfig+0x504>)
 80046b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046ba:	f7fe f877 	bl	80027ac <HAL_GetTick>
 80046be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80046c0:	e008      	b.n	80046d4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80046c2:	f7fe f873 	bl	80027ac <HAL_GetTick>
 80046c6:	4602      	mov	r2, r0
 80046c8:	693b      	ldr	r3, [r7, #16]
 80046ca:	1ad3      	subs	r3, r2, r3
 80046cc:	2b02      	cmp	r3, #2
 80046ce:	d901      	bls.n	80046d4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80046d0:	2303      	movs	r3, #3
 80046d2:	e22b      	b.n	8004b2c <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80046d4:	4b65      	ldr	r3, [pc, #404]	; (800486c <HAL_RCC_OscConfig+0x504>)
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d0f0      	beq.n	80046c2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046e0:	4b62      	ldr	r3, [pc, #392]	; (800486c <HAL_RCC_OscConfig+0x504>)
 80046e2:	685b      	ldr	r3, [r3, #4]
 80046e4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	691b      	ldr	r3, [r3, #16]
 80046ec:	061b      	lsls	r3, r3, #24
 80046ee:	495f      	ldr	r1, [pc, #380]	; (800486c <HAL_RCC_OscConfig+0x504>)
 80046f0:	4313      	orrs	r3, r2
 80046f2:	604b      	str	r3, [r1, #4]
 80046f4:	e018      	b.n	8004728 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80046f6:	4b5d      	ldr	r3, [pc, #372]	; (800486c <HAL_RCC_OscConfig+0x504>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	4a5c      	ldr	r2, [pc, #368]	; (800486c <HAL_RCC_OscConfig+0x504>)
 80046fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004700:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004702:	f7fe f853 	bl	80027ac <HAL_GetTick>
 8004706:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004708:	e008      	b.n	800471c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800470a:	f7fe f84f 	bl	80027ac <HAL_GetTick>
 800470e:	4602      	mov	r2, r0
 8004710:	693b      	ldr	r3, [r7, #16]
 8004712:	1ad3      	subs	r3, r2, r3
 8004714:	2b02      	cmp	r3, #2
 8004716:	d901      	bls.n	800471c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004718:	2303      	movs	r3, #3
 800471a:	e207      	b.n	8004b2c <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800471c:	4b53      	ldr	r3, [pc, #332]	; (800486c <HAL_RCC_OscConfig+0x504>)
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004724:	2b00      	cmp	r3, #0
 8004726:	d1f0      	bne.n	800470a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f003 0308 	and.w	r3, r3, #8
 8004730:	2b00      	cmp	r3, #0
 8004732:	d03c      	beq.n	80047ae <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	695b      	ldr	r3, [r3, #20]
 8004738:	2b00      	cmp	r3, #0
 800473a:	d01c      	beq.n	8004776 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800473c:	4b4b      	ldr	r3, [pc, #300]	; (800486c <HAL_RCC_OscConfig+0x504>)
 800473e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004742:	4a4a      	ldr	r2, [pc, #296]	; (800486c <HAL_RCC_OscConfig+0x504>)
 8004744:	f043 0301 	orr.w	r3, r3, #1
 8004748:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800474c:	f7fe f82e 	bl	80027ac <HAL_GetTick>
 8004750:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004752:	e008      	b.n	8004766 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004754:	f7fe f82a 	bl	80027ac <HAL_GetTick>
 8004758:	4602      	mov	r2, r0
 800475a:	693b      	ldr	r3, [r7, #16]
 800475c:	1ad3      	subs	r3, r2, r3
 800475e:	2b02      	cmp	r3, #2
 8004760:	d901      	bls.n	8004766 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004762:	2303      	movs	r3, #3
 8004764:	e1e2      	b.n	8004b2c <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004766:	4b41      	ldr	r3, [pc, #260]	; (800486c <HAL_RCC_OscConfig+0x504>)
 8004768:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800476c:	f003 0302 	and.w	r3, r3, #2
 8004770:	2b00      	cmp	r3, #0
 8004772:	d0ef      	beq.n	8004754 <HAL_RCC_OscConfig+0x3ec>
 8004774:	e01b      	b.n	80047ae <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004776:	4b3d      	ldr	r3, [pc, #244]	; (800486c <HAL_RCC_OscConfig+0x504>)
 8004778:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800477c:	4a3b      	ldr	r2, [pc, #236]	; (800486c <HAL_RCC_OscConfig+0x504>)
 800477e:	f023 0301 	bic.w	r3, r3, #1
 8004782:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004786:	f7fe f811 	bl	80027ac <HAL_GetTick>
 800478a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800478c:	e008      	b.n	80047a0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800478e:	f7fe f80d 	bl	80027ac <HAL_GetTick>
 8004792:	4602      	mov	r2, r0
 8004794:	693b      	ldr	r3, [r7, #16]
 8004796:	1ad3      	subs	r3, r2, r3
 8004798:	2b02      	cmp	r3, #2
 800479a:	d901      	bls.n	80047a0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800479c:	2303      	movs	r3, #3
 800479e:	e1c5      	b.n	8004b2c <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80047a0:	4b32      	ldr	r3, [pc, #200]	; (800486c <HAL_RCC_OscConfig+0x504>)
 80047a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80047a6:	f003 0302 	and.w	r3, r3, #2
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d1ef      	bne.n	800478e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f003 0304 	and.w	r3, r3, #4
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	f000 80a6 	beq.w	8004908 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80047bc:	2300      	movs	r3, #0
 80047be:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80047c0:	4b2a      	ldr	r3, [pc, #168]	; (800486c <HAL_RCC_OscConfig+0x504>)
 80047c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d10d      	bne.n	80047e8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80047cc:	4b27      	ldr	r3, [pc, #156]	; (800486c <HAL_RCC_OscConfig+0x504>)
 80047ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047d0:	4a26      	ldr	r2, [pc, #152]	; (800486c <HAL_RCC_OscConfig+0x504>)
 80047d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047d6:	6593      	str	r3, [r2, #88]	; 0x58
 80047d8:	4b24      	ldr	r3, [pc, #144]	; (800486c <HAL_RCC_OscConfig+0x504>)
 80047da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047e0:	60bb      	str	r3, [r7, #8]
 80047e2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80047e4:	2301      	movs	r3, #1
 80047e6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80047e8:	4b21      	ldr	r3, [pc, #132]	; (8004870 <HAL_RCC_OscConfig+0x508>)
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d118      	bne.n	8004826 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80047f4:	4b1e      	ldr	r3, [pc, #120]	; (8004870 <HAL_RCC_OscConfig+0x508>)
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	4a1d      	ldr	r2, [pc, #116]	; (8004870 <HAL_RCC_OscConfig+0x508>)
 80047fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047fe:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004800:	f7fd ffd4 	bl	80027ac <HAL_GetTick>
 8004804:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004806:	e008      	b.n	800481a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004808:	f7fd ffd0 	bl	80027ac <HAL_GetTick>
 800480c:	4602      	mov	r2, r0
 800480e:	693b      	ldr	r3, [r7, #16]
 8004810:	1ad3      	subs	r3, r2, r3
 8004812:	2b02      	cmp	r3, #2
 8004814:	d901      	bls.n	800481a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004816:	2303      	movs	r3, #3
 8004818:	e188      	b.n	8004b2c <HAL_RCC_OscConfig+0x7c4>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800481a:	4b15      	ldr	r3, [pc, #84]	; (8004870 <HAL_RCC_OscConfig+0x508>)
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004822:	2b00      	cmp	r3, #0
 8004824:	d0f0      	beq.n	8004808 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	689b      	ldr	r3, [r3, #8]
 800482a:	2b01      	cmp	r3, #1
 800482c:	d108      	bne.n	8004840 <HAL_RCC_OscConfig+0x4d8>
 800482e:	4b0f      	ldr	r3, [pc, #60]	; (800486c <HAL_RCC_OscConfig+0x504>)
 8004830:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004834:	4a0d      	ldr	r2, [pc, #52]	; (800486c <HAL_RCC_OscConfig+0x504>)
 8004836:	f043 0301 	orr.w	r3, r3, #1
 800483a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800483e:	e029      	b.n	8004894 <HAL_RCC_OscConfig+0x52c>
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	689b      	ldr	r3, [r3, #8]
 8004844:	2b05      	cmp	r3, #5
 8004846:	d115      	bne.n	8004874 <HAL_RCC_OscConfig+0x50c>
 8004848:	4b08      	ldr	r3, [pc, #32]	; (800486c <HAL_RCC_OscConfig+0x504>)
 800484a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800484e:	4a07      	ldr	r2, [pc, #28]	; (800486c <HAL_RCC_OscConfig+0x504>)
 8004850:	f043 0304 	orr.w	r3, r3, #4
 8004854:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004858:	4b04      	ldr	r3, [pc, #16]	; (800486c <HAL_RCC_OscConfig+0x504>)
 800485a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800485e:	4a03      	ldr	r2, [pc, #12]	; (800486c <HAL_RCC_OscConfig+0x504>)
 8004860:	f043 0301 	orr.w	r3, r3, #1
 8004864:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004868:	e014      	b.n	8004894 <HAL_RCC_OscConfig+0x52c>
 800486a:	bf00      	nop
 800486c:	40021000 	.word	0x40021000
 8004870:	40007000 	.word	0x40007000
 8004874:	4b91      	ldr	r3, [pc, #580]	; (8004abc <HAL_RCC_OscConfig+0x754>)
 8004876:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800487a:	4a90      	ldr	r2, [pc, #576]	; (8004abc <HAL_RCC_OscConfig+0x754>)
 800487c:	f023 0301 	bic.w	r3, r3, #1
 8004880:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004884:	4b8d      	ldr	r3, [pc, #564]	; (8004abc <HAL_RCC_OscConfig+0x754>)
 8004886:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800488a:	4a8c      	ldr	r2, [pc, #560]	; (8004abc <HAL_RCC_OscConfig+0x754>)
 800488c:	f023 0304 	bic.w	r3, r3, #4
 8004890:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	689b      	ldr	r3, [r3, #8]
 8004898:	2b00      	cmp	r3, #0
 800489a:	d016      	beq.n	80048ca <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800489c:	f7fd ff86 	bl	80027ac <HAL_GetTick>
 80048a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80048a2:	e00a      	b.n	80048ba <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048a4:	f7fd ff82 	bl	80027ac <HAL_GetTick>
 80048a8:	4602      	mov	r2, r0
 80048aa:	693b      	ldr	r3, [r7, #16]
 80048ac:	1ad3      	subs	r3, r2, r3
 80048ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d901      	bls.n	80048ba <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80048b6:	2303      	movs	r3, #3
 80048b8:	e138      	b.n	8004b2c <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80048ba:	4b80      	ldr	r3, [pc, #512]	; (8004abc <HAL_RCC_OscConfig+0x754>)
 80048bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048c0:	f003 0302 	and.w	r3, r3, #2
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d0ed      	beq.n	80048a4 <HAL_RCC_OscConfig+0x53c>
 80048c8:	e015      	b.n	80048f6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048ca:	f7fd ff6f 	bl	80027ac <HAL_GetTick>
 80048ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80048d0:	e00a      	b.n	80048e8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048d2:	f7fd ff6b 	bl	80027ac <HAL_GetTick>
 80048d6:	4602      	mov	r2, r0
 80048d8:	693b      	ldr	r3, [r7, #16]
 80048da:	1ad3      	subs	r3, r2, r3
 80048dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80048e0:	4293      	cmp	r3, r2
 80048e2:	d901      	bls.n	80048e8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80048e4:	2303      	movs	r3, #3
 80048e6:	e121      	b.n	8004b2c <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80048e8:	4b74      	ldr	r3, [pc, #464]	; (8004abc <HAL_RCC_OscConfig+0x754>)
 80048ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048ee:	f003 0302 	and.w	r3, r3, #2
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d1ed      	bne.n	80048d2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80048f6:	7ffb      	ldrb	r3, [r7, #31]
 80048f8:	2b01      	cmp	r3, #1
 80048fa:	d105      	bne.n	8004908 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80048fc:	4b6f      	ldr	r3, [pc, #444]	; (8004abc <HAL_RCC_OscConfig+0x754>)
 80048fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004900:	4a6e      	ldr	r2, [pc, #440]	; (8004abc <HAL_RCC_OscConfig+0x754>)
 8004902:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004906:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800490c:	2b00      	cmp	r3, #0
 800490e:	f000 810c 	beq.w	8004b2a <HAL_RCC_OscConfig+0x7c2>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004916:	2b02      	cmp	r3, #2
 8004918:	f040 80d4 	bne.w	8004ac4 <HAL_RCC_OscConfig+0x75c>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800491c:	4b67      	ldr	r3, [pc, #412]	; (8004abc <HAL_RCC_OscConfig+0x754>)
 800491e:	68db      	ldr	r3, [r3, #12]
 8004920:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004922:	697b      	ldr	r3, [r7, #20]
 8004924:	f003 0203 	and.w	r2, r3, #3
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800492c:	429a      	cmp	r2, r3
 800492e:	d130      	bne.n	8004992 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004930:	697b      	ldr	r3, [r7, #20]
 8004932:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800493a:	3b01      	subs	r3, #1
 800493c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800493e:	429a      	cmp	r2, r3
 8004940:	d127      	bne.n	8004992 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004942:	697b      	ldr	r3, [r7, #20]
 8004944:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800494c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800494e:	429a      	cmp	r2, r3
 8004950:	d11f      	bne.n	8004992 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004952:	697b      	ldr	r3, [r7, #20]
 8004954:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004958:	687a      	ldr	r2, [r7, #4]
 800495a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800495c:	2a07      	cmp	r2, #7
 800495e:	bf14      	ite	ne
 8004960:	2201      	movne	r2, #1
 8004962:	2200      	moveq	r2, #0
 8004964:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004966:	4293      	cmp	r3, r2
 8004968:	d113      	bne.n	8004992 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800496a:	697b      	ldr	r3, [r7, #20]
 800496c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004974:	085b      	lsrs	r3, r3, #1
 8004976:	3b01      	subs	r3, #1
 8004978:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800497a:	429a      	cmp	r2, r3
 800497c:	d109      	bne.n	8004992 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800497e:	697b      	ldr	r3, [r7, #20]
 8004980:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004988:	085b      	lsrs	r3, r3, #1
 800498a:	3b01      	subs	r3, #1
 800498c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800498e:	429a      	cmp	r2, r3
 8004990:	d06e      	beq.n	8004a70 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004992:	69bb      	ldr	r3, [r7, #24]
 8004994:	2b0c      	cmp	r3, #12
 8004996:	d069      	beq.n	8004a6c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004998:	4b48      	ldr	r3, [pc, #288]	; (8004abc <HAL_RCC_OscConfig+0x754>)
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d105      	bne.n	80049b0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80049a4:	4b45      	ldr	r3, [pc, #276]	; (8004abc <HAL_RCC_OscConfig+0x754>)
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d001      	beq.n	80049b4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80049b0:	2301      	movs	r3, #1
 80049b2:	e0bb      	b.n	8004b2c <HAL_RCC_OscConfig+0x7c4>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80049b4:	4b41      	ldr	r3, [pc, #260]	; (8004abc <HAL_RCC_OscConfig+0x754>)
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	4a40      	ldr	r2, [pc, #256]	; (8004abc <HAL_RCC_OscConfig+0x754>)
 80049ba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80049be:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80049c0:	f7fd fef4 	bl	80027ac <HAL_GetTick>
 80049c4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80049c6:	e008      	b.n	80049da <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049c8:	f7fd fef0 	bl	80027ac <HAL_GetTick>
 80049cc:	4602      	mov	r2, r0
 80049ce:	693b      	ldr	r3, [r7, #16]
 80049d0:	1ad3      	subs	r3, r2, r3
 80049d2:	2b02      	cmp	r3, #2
 80049d4:	d901      	bls.n	80049da <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80049d6:	2303      	movs	r3, #3
 80049d8:	e0a8      	b.n	8004b2c <HAL_RCC_OscConfig+0x7c4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80049da:	4b38      	ldr	r3, [pc, #224]	; (8004abc <HAL_RCC_OscConfig+0x754>)
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d1f0      	bne.n	80049c8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80049e6:	4b35      	ldr	r3, [pc, #212]	; (8004abc <HAL_RCC_OscConfig+0x754>)
 80049e8:	68da      	ldr	r2, [r3, #12]
 80049ea:	4b35      	ldr	r3, [pc, #212]	; (8004ac0 <HAL_RCC_OscConfig+0x758>)
 80049ec:	4013      	ands	r3, r2
 80049ee:	687a      	ldr	r2, [r7, #4]
 80049f0:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80049f2:	687a      	ldr	r2, [r7, #4]
 80049f4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80049f6:	3a01      	subs	r2, #1
 80049f8:	0112      	lsls	r2, r2, #4
 80049fa:	4311      	orrs	r1, r2
 80049fc:	687a      	ldr	r2, [r7, #4]
 80049fe:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004a00:	0212      	lsls	r2, r2, #8
 8004a02:	4311      	orrs	r1, r2
 8004a04:	687a      	ldr	r2, [r7, #4]
 8004a06:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004a08:	0852      	lsrs	r2, r2, #1
 8004a0a:	3a01      	subs	r2, #1
 8004a0c:	0552      	lsls	r2, r2, #21
 8004a0e:	4311      	orrs	r1, r2
 8004a10:	687a      	ldr	r2, [r7, #4]
 8004a12:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004a14:	0852      	lsrs	r2, r2, #1
 8004a16:	3a01      	subs	r2, #1
 8004a18:	0652      	lsls	r2, r2, #25
 8004a1a:	4311      	orrs	r1, r2
 8004a1c:	687a      	ldr	r2, [r7, #4]
 8004a1e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004a20:	0912      	lsrs	r2, r2, #4
 8004a22:	0452      	lsls	r2, r2, #17
 8004a24:	430a      	orrs	r2, r1
 8004a26:	4925      	ldr	r1, [pc, #148]	; (8004abc <HAL_RCC_OscConfig+0x754>)
 8004a28:	4313      	orrs	r3, r2
 8004a2a:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004a2c:	4b23      	ldr	r3, [pc, #140]	; (8004abc <HAL_RCC_OscConfig+0x754>)
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	4a22      	ldr	r2, [pc, #136]	; (8004abc <HAL_RCC_OscConfig+0x754>)
 8004a32:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004a36:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004a38:	4b20      	ldr	r3, [pc, #128]	; (8004abc <HAL_RCC_OscConfig+0x754>)
 8004a3a:	68db      	ldr	r3, [r3, #12]
 8004a3c:	4a1f      	ldr	r2, [pc, #124]	; (8004abc <HAL_RCC_OscConfig+0x754>)
 8004a3e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004a42:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004a44:	f7fd feb2 	bl	80027ac <HAL_GetTick>
 8004a48:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a4a:	e008      	b.n	8004a5e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a4c:	f7fd feae 	bl	80027ac <HAL_GetTick>
 8004a50:	4602      	mov	r2, r0
 8004a52:	693b      	ldr	r3, [r7, #16]
 8004a54:	1ad3      	subs	r3, r2, r3
 8004a56:	2b02      	cmp	r3, #2
 8004a58:	d901      	bls.n	8004a5e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8004a5a:	2303      	movs	r3, #3
 8004a5c:	e066      	b.n	8004b2c <HAL_RCC_OscConfig+0x7c4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a5e:	4b17      	ldr	r3, [pc, #92]	; (8004abc <HAL_RCC_OscConfig+0x754>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d0f0      	beq.n	8004a4c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004a6a:	e05e      	b.n	8004b2a <HAL_RCC_OscConfig+0x7c2>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004a6c:	2301      	movs	r3, #1
 8004a6e:	e05d      	b.n	8004b2c <HAL_RCC_OscConfig+0x7c4>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a70:	4b12      	ldr	r3, [pc, #72]	; (8004abc <HAL_RCC_OscConfig+0x754>)
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d156      	bne.n	8004b2a <HAL_RCC_OscConfig+0x7c2>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004a7c:	4b0f      	ldr	r3, [pc, #60]	; (8004abc <HAL_RCC_OscConfig+0x754>)
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	4a0e      	ldr	r2, [pc, #56]	; (8004abc <HAL_RCC_OscConfig+0x754>)
 8004a82:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004a86:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004a88:	4b0c      	ldr	r3, [pc, #48]	; (8004abc <HAL_RCC_OscConfig+0x754>)
 8004a8a:	68db      	ldr	r3, [r3, #12]
 8004a8c:	4a0b      	ldr	r2, [pc, #44]	; (8004abc <HAL_RCC_OscConfig+0x754>)
 8004a8e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004a92:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004a94:	f7fd fe8a 	bl	80027ac <HAL_GetTick>
 8004a98:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a9a:	e008      	b.n	8004aae <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a9c:	f7fd fe86 	bl	80027ac <HAL_GetTick>
 8004aa0:	4602      	mov	r2, r0
 8004aa2:	693b      	ldr	r3, [r7, #16]
 8004aa4:	1ad3      	subs	r3, r2, r3
 8004aa6:	2b02      	cmp	r3, #2
 8004aa8:	d901      	bls.n	8004aae <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8004aaa:	2303      	movs	r3, #3
 8004aac:	e03e      	b.n	8004b2c <HAL_RCC_OscConfig+0x7c4>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004aae:	4b03      	ldr	r3, [pc, #12]	; (8004abc <HAL_RCC_OscConfig+0x754>)
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d0f0      	beq.n	8004a9c <HAL_RCC_OscConfig+0x734>
 8004aba:	e036      	b.n	8004b2a <HAL_RCC_OscConfig+0x7c2>
 8004abc:	40021000 	.word	0x40021000
 8004ac0:	f99d808c 	.word	0xf99d808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004ac4:	69bb      	ldr	r3, [r7, #24]
 8004ac6:	2b0c      	cmp	r3, #12
 8004ac8:	d02d      	beq.n	8004b26 <HAL_RCC_OscConfig+0x7be>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004aca:	4b1a      	ldr	r3, [pc, #104]	; (8004b34 <HAL_RCC_OscConfig+0x7cc>)
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	4a19      	ldr	r2, [pc, #100]	; (8004b34 <HAL_RCC_OscConfig+0x7cc>)
 8004ad0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004ad4:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8004ad6:	4b17      	ldr	r3, [pc, #92]	; (8004b34 <HAL_RCC_OscConfig+0x7cc>)
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d105      	bne.n	8004aee <HAL_RCC_OscConfig+0x786>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004ae2:	4b14      	ldr	r3, [pc, #80]	; (8004b34 <HAL_RCC_OscConfig+0x7cc>)
 8004ae4:	68db      	ldr	r3, [r3, #12]
 8004ae6:	4a13      	ldr	r2, [pc, #76]	; (8004b34 <HAL_RCC_OscConfig+0x7cc>)
 8004ae8:	f023 0303 	bic.w	r3, r3, #3
 8004aec:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004aee:	4b11      	ldr	r3, [pc, #68]	; (8004b34 <HAL_RCC_OscConfig+0x7cc>)
 8004af0:	68db      	ldr	r3, [r3, #12]
 8004af2:	4a10      	ldr	r2, [pc, #64]	; (8004b34 <HAL_RCC_OscConfig+0x7cc>)
 8004af4:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004af8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004afc:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004afe:	f7fd fe55 	bl	80027ac <HAL_GetTick>
 8004b02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b04:	e008      	b.n	8004b18 <HAL_RCC_OscConfig+0x7b0>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b06:	f7fd fe51 	bl	80027ac <HAL_GetTick>
 8004b0a:	4602      	mov	r2, r0
 8004b0c:	693b      	ldr	r3, [r7, #16]
 8004b0e:	1ad3      	subs	r3, r2, r3
 8004b10:	2b02      	cmp	r3, #2
 8004b12:	d901      	bls.n	8004b18 <HAL_RCC_OscConfig+0x7b0>
          {
            return HAL_TIMEOUT;
 8004b14:	2303      	movs	r3, #3
 8004b16:	e009      	b.n	8004b2c <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b18:	4b06      	ldr	r3, [pc, #24]	; (8004b34 <HAL_RCC_OscConfig+0x7cc>)
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d1f0      	bne.n	8004b06 <HAL_RCC_OscConfig+0x79e>
 8004b24:	e001      	b.n	8004b2a <HAL_RCC_OscConfig+0x7c2>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004b26:	2301      	movs	r3, #1
 8004b28:	e000      	b.n	8004b2c <HAL_RCC_OscConfig+0x7c4>
      }
    }
  }
  return HAL_OK;
 8004b2a:	2300      	movs	r3, #0
}
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	3720      	adds	r7, #32
 8004b30:	46bd      	mov	sp, r7
 8004b32:	bd80      	pop	{r7, pc}
 8004b34:	40021000 	.word	0x40021000

08004b38 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	b084      	sub	sp, #16
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
 8004b40:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d101      	bne.n	8004b4c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004b48:	2301      	movs	r3, #1
 8004b4a:	e0c8      	b.n	8004cde <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004b4c:	4b66      	ldr	r3, [pc, #408]	; (8004ce8 <HAL_RCC_ClockConfig+0x1b0>)
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f003 0307 	and.w	r3, r3, #7
 8004b54:	683a      	ldr	r2, [r7, #0]
 8004b56:	429a      	cmp	r2, r3
 8004b58:	d910      	bls.n	8004b7c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b5a:	4b63      	ldr	r3, [pc, #396]	; (8004ce8 <HAL_RCC_ClockConfig+0x1b0>)
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f023 0207 	bic.w	r2, r3, #7
 8004b62:	4961      	ldr	r1, [pc, #388]	; (8004ce8 <HAL_RCC_ClockConfig+0x1b0>)
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	4313      	orrs	r3, r2
 8004b68:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b6a:	4b5f      	ldr	r3, [pc, #380]	; (8004ce8 <HAL_RCC_ClockConfig+0x1b0>)
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f003 0307 	and.w	r3, r3, #7
 8004b72:	683a      	ldr	r2, [r7, #0]
 8004b74:	429a      	cmp	r2, r3
 8004b76:	d001      	beq.n	8004b7c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004b78:	2301      	movs	r3, #1
 8004b7a:	e0b0      	b.n	8004cde <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f003 0301 	and.w	r3, r3, #1
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d04c      	beq.n	8004c22 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	685b      	ldr	r3, [r3, #4]
 8004b8c:	2b03      	cmp	r3, #3
 8004b8e:	d107      	bne.n	8004ba0 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b90:	4b56      	ldr	r3, [pc, #344]	; (8004cec <HAL_RCC_ClockConfig+0x1b4>)
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d121      	bne.n	8004be0 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8004b9c:	2301      	movs	r3, #1
 8004b9e:	e09e      	b.n	8004cde <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	685b      	ldr	r3, [r3, #4]
 8004ba4:	2b02      	cmp	r3, #2
 8004ba6:	d107      	bne.n	8004bb8 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004ba8:	4b50      	ldr	r3, [pc, #320]	; (8004cec <HAL_RCC_ClockConfig+0x1b4>)
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d115      	bne.n	8004be0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004bb4:	2301      	movs	r3, #1
 8004bb6:	e092      	b.n	8004cde <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	685b      	ldr	r3, [r3, #4]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d107      	bne.n	8004bd0 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004bc0:	4b4a      	ldr	r3, [pc, #296]	; (8004cec <HAL_RCC_ClockConfig+0x1b4>)
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f003 0302 	and.w	r3, r3, #2
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d109      	bne.n	8004be0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004bcc:	2301      	movs	r3, #1
 8004bce:	e086      	b.n	8004cde <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004bd0:	4b46      	ldr	r3, [pc, #280]	; (8004cec <HAL_RCC_ClockConfig+0x1b4>)
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d101      	bne.n	8004be0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004bdc:	2301      	movs	r3, #1
 8004bde:	e07e      	b.n	8004cde <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004be0:	4b42      	ldr	r3, [pc, #264]	; (8004cec <HAL_RCC_ClockConfig+0x1b4>)
 8004be2:	689b      	ldr	r3, [r3, #8]
 8004be4:	f023 0203 	bic.w	r2, r3, #3
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	685b      	ldr	r3, [r3, #4]
 8004bec:	493f      	ldr	r1, [pc, #252]	; (8004cec <HAL_RCC_ClockConfig+0x1b4>)
 8004bee:	4313      	orrs	r3, r2
 8004bf0:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004bf2:	f7fd fddb 	bl	80027ac <HAL_GetTick>
 8004bf6:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004bf8:	e00a      	b.n	8004c10 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004bfa:	f7fd fdd7 	bl	80027ac <HAL_GetTick>
 8004bfe:	4602      	mov	r2, r0
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	1ad3      	subs	r3, r2, r3
 8004c04:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	d901      	bls.n	8004c10 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8004c0c:	2303      	movs	r3, #3
 8004c0e:	e066      	b.n	8004cde <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c10:	4b36      	ldr	r3, [pc, #216]	; (8004cec <HAL_RCC_ClockConfig+0x1b4>)
 8004c12:	689b      	ldr	r3, [r3, #8]
 8004c14:	f003 020c 	and.w	r2, r3, #12
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	685b      	ldr	r3, [r3, #4]
 8004c1c:	009b      	lsls	r3, r3, #2
 8004c1e:	429a      	cmp	r2, r3
 8004c20:	d1eb      	bne.n	8004bfa <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f003 0302 	and.w	r3, r3, #2
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d008      	beq.n	8004c40 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c2e:	4b2f      	ldr	r3, [pc, #188]	; (8004cec <HAL_RCC_ClockConfig+0x1b4>)
 8004c30:	689b      	ldr	r3, [r3, #8]
 8004c32:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	689b      	ldr	r3, [r3, #8]
 8004c3a:	492c      	ldr	r1, [pc, #176]	; (8004cec <HAL_RCC_ClockConfig+0x1b4>)
 8004c3c:	4313      	orrs	r3, r2
 8004c3e:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004c40:	4b29      	ldr	r3, [pc, #164]	; (8004ce8 <HAL_RCC_ClockConfig+0x1b0>)
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f003 0307 	and.w	r3, r3, #7
 8004c48:	683a      	ldr	r2, [r7, #0]
 8004c4a:	429a      	cmp	r2, r3
 8004c4c:	d210      	bcs.n	8004c70 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c4e:	4b26      	ldr	r3, [pc, #152]	; (8004ce8 <HAL_RCC_ClockConfig+0x1b0>)
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f023 0207 	bic.w	r2, r3, #7
 8004c56:	4924      	ldr	r1, [pc, #144]	; (8004ce8 <HAL_RCC_ClockConfig+0x1b0>)
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	4313      	orrs	r3, r2
 8004c5c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c5e:	4b22      	ldr	r3, [pc, #136]	; (8004ce8 <HAL_RCC_ClockConfig+0x1b0>)
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f003 0307 	and.w	r3, r3, #7
 8004c66:	683a      	ldr	r2, [r7, #0]
 8004c68:	429a      	cmp	r2, r3
 8004c6a:	d001      	beq.n	8004c70 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8004c6c:	2301      	movs	r3, #1
 8004c6e:	e036      	b.n	8004cde <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f003 0304 	and.w	r3, r3, #4
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d008      	beq.n	8004c8e <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004c7c:	4b1b      	ldr	r3, [pc, #108]	; (8004cec <HAL_RCC_ClockConfig+0x1b4>)
 8004c7e:	689b      	ldr	r3, [r3, #8]
 8004c80:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	68db      	ldr	r3, [r3, #12]
 8004c88:	4918      	ldr	r1, [pc, #96]	; (8004cec <HAL_RCC_ClockConfig+0x1b4>)
 8004c8a:	4313      	orrs	r3, r2
 8004c8c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f003 0308 	and.w	r3, r3, #8
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d009      	beq.n	8004cae <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004c9a:	4b14      	ldr	r3, [pc, #80]	; (8004cec <HAL_RCC_ClockConfig+0x1b4>)
 8004c9c:	689b      	ldr	r3, [r3, #8]
 8004c9e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	691b      	ldr	r3, [r3, #16]
 8004ca6:	00db      	lsls	r3, r3, #3
 8004ca8:	4910      	ldr	r1, [pc, #64]	; (8004cec <HAL_RCC_ClockConfig+0x1b4>)
 8004caa:	4313      	orrs	r3, r2
 8004cac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004cae:	f000 f825 	bl	8004cfc <HAL_RCC_GetSysClockFreq>
 8004cb2:	4602      	mov	r2, r0
 8004cb4:	4b0d      	ldr	r3, [pc, #52]	; (8004cec <HAL_RCC_ClockConfig+0x1b4>)
 8004cb6:	689b      	ldr	r3, [r3, #8]
 8004cb8:	091b      	lsrs	r3, r3, #4
 8004cba:	f003 030f 	and.w	r3, r3, #15
 8004cbe:	490c      	ldr	r1, [pc, #48]	; (8004cf0 <HAL_RCC_ClockConfig+0x1b8>)
 8004cc0:	5ccb      	ldrb	r3, [r1, r3]
 8004cc2:	f003 031f 	and.w	r3, r3, #31
 8004cc6:	fa22 f303 	lsr.w	r3, r2, r3
 8004cca:	4a0a      	ldr	r2, [pc, #40]	; (8004cf4 <HAL_RCC_ClockConfig+0x1bc>)
 8004ccc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004cce:	4b0a      	ldr	r3, [pc, #40]	; (8004cf8 <HAL_RCC_ClockConfig+0x1c0>)
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	f7fd fb74 	bl	80023c0 <HAL_InitTick>
 8004cd8:	4603      	mov	r3, r0
 8004cda:	72fb      	strb	r3, [r7, #11]

  return status;
 8004cdc:	7afb      	ldrb	r3, [r7, #11]
}
 8004cde:	4618      	mov	r0, r3
 8004ce0:	3710      	adds	r7, #16
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	bd80      	pop	{r7, pc}
 8004ce6:	bf00      	nop
 8004ce8:	40022000 	.word	0x40022000
 8004cec:	40021000 	.word	0x40021000
 8004cf0:	0801449c 	.word	0x0801449c
 8004cf4:	20000008 	.word	0x20000008
 8004cf8:	2000000c 	.word	0x2000000c

08004cfc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004cfc:	b480      	push	{r7}
 8004cfe:	b089      	sub	sp, #36	; 0x24
 8004d00:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004d02:	2300      	movs	r3, #0
 8004d04:	61fb      	str	r3, [r7, #28]
 8004d06:	2300      	movs	r3, #0
 8004d08:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004d0a:	4b3e      	ldr	r3, [pc, #248]	; (8004e04 <HAL_RCC_GetSysClockFreq+0x108>)
 8004d0c:	689b      	ldr	r3, [r3, #8]
 8004d0e:	f003 030c 	and.w	r3, r3, #12
 8004d12:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004d14:	4b3b      	ldr	r3, [pc, #236]	; (8004e04 <HAL_RCC_GetSysClockFreq+0x108>)
 8004d16:	68db      	ldr	r3, [r3, #12]
 8004d18:	f003 0303 	and.w	r3, r3, #3
 8004d1c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004d1e:	693b      	ldr	r3, [r7, #16]
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d005      	beq.n	8004d30 <HAL_RCC_GetSysClockFreq+0x34>
 8004d24:	693b      	ldr	r3, [r7, #16]
 8004d26:	2b0c      	cmp	r3, #12
 8004d28:	d121      	bne.n	8004d6e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	2b01      	cmp	r3, #1
 8004d2e:	d11e      	bne.n	8004d6e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004d30:	4b34      	ldr	r3, [pc, #208]	; (8004e04 <HAL_RCC_GetSysClockFreq+0x108>)
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f003 0308 	and.w	r3, r3, #8
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d107      	bne.n	8004d4c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004d3c:	4b31      	ldr	r3, [pc, #196]	; (8004e04 <HAL_RCC_GetSysClockFreq+0x108>)
 8004d3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004d42:	0a1b      	lsrs	r3, r3, #8
 8004d44:	f003 030f 	and.w	r3, r3, #15
 8004d48:	61fb      	str	r3, [r7, #28]
 8004d4a:	e005      	b.n	8004d58 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004d4c:	4b2d      	ldr	r3, [pc, #180]	; (8004e04 <HAL_RCC_GetSysClockFreq+0x108>)
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	091b      	lsrs	r3, r3, #4
 8004d52:	f003 030f 	and.w	r3, r3, #15
 8004d56:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004d58:	4a2b      	ldr	r2, [pc, #172]	; (8004e08 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004d5a:	69fb      	ldr	r3, [r7, #28]
 8004d5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d60:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004d62:	693b      	ldr	r3, [r7, #16]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d10d      	bne.n	8004d84 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004d68:	69fb      	ldr	r3, [r7, #28]
 8004d6a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004d6c:	e00a      	b.n	8004d84 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004d6e:	693b      	ldr	r3, [r7, #16]
 8004d70:	2b04      	cmp	r3, #4
 8004d72:	d102      	bne.n	8004d7a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004d74:	4b25      	ldr	r3, [pc, #148]	; (8004e0c <HAL_RCC_GetSysClockFreq+0x110>)
 8004d76:	61bb      	str	r3, [r7, #24]
 8004d78:	e004      	b.n	8004d84 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004d7a:	693b      	ldr	r3, [r7, #16]
 8004d7c:	2b08      	cmp	r3, #8
 8004d7e:	d101      	bne.n	8004d84 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004d80:	4b23      	ldr	r3, [pc, #140]	; (8004e10 <HAL_RCC_GetSysClockFreq+0x114>)
 8004d82:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004d84:	693b      	ldr	r3, [r7, #16]
 8004d86:	2b0c      	cmp	r3, #12
 8004d88:	d134      	bne.n	8004df4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004d8a:	4b1e      	ldr	r3, [pc, #120]	; (8004e04 <HAL_RCC_GetSysClockFreq+0x108>)
 8004d8c:	68db      	ldr	r3, [r3, #12]
 8004d8e:	f003 0303 	and.w	r3, r3, #3
 8004d92:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004d94:	68bb      	ldr	r3, [r7, #8]
 8004d96:	2b02      	cmp	r3, #2
 8004d98:	d003      	beq.n	8004da2 <HAL_RCC_GetSysClockFreq+0xa6>
 8004d9a:	68bb      	ldr	r3, [r7, #8]
 8004d9c:	2b03      	cmp	r3, #3
 8004d9e:	d003      	beq.n	8004da8 <HAL_RCC_GetSysClockFreq+0xac>
 8004da0:	e005      	b.n	8004dae <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004da2:	4b1a      	ldr	r3, [pc, #104]	; (8004e0c <HAL_RCC_GetSysClockFreq+0x110>)
 8004da4:	617b      	str	r3, [r7, #20]
      break;
 8004da6:	e005      	b.n	8004db4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004da8:	4b19      	ldr	r3, [pc, #100]	; (8004e10 <HAL_RCC_GetSysClockFreq+0x114>)
 8004daa:	617b      	str	r3, [r7, #20]
      break;
 8004dac:	e002      	b.n	8004db4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004dae:	69fb      	ldr	r3, [r7, #28]
 8004db0:	617b      	str	r3, [r7, #20]
      break;
 8004db2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004db4:	4b13      	ldr	r3, [pc, #76]	; (8004e04 <HAL_RCC_GetSysClockFreq+0x108>)
 8004db6:	68db      	ldr	r3, [r3, #12]
 8004db8:	091b      	lsrs	r3, r3, #4
 8004dba:	f003 0307 	and.w	r3, r3, #7
 8004dbe:	3301      	adds	r3, #1
 8004dc0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004dc2:	4b10      	ldr	r3, [pc, #64]	; (8004e04 <HAL_RCC_GetSysClockFreq+0x108>)
 8004dc4:	68db      	ldr	r3, [r3, #12]
 8004dc6:	0a1b      	lsrs	r3, r3, #8
 8004dc8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004dcc:	697a      	ldr	r2, [r7, #20]
 8004dce:	fb03 f202 	mul.w	r2, r3, r2
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dd8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004dda:	4b0a      	ldr	r3, [pc, #40]	; (8004e04 <HAL_RCC_GetSysClockFreq+0x108>)
 8004ddc:	68db      	ldr	r3, [r3, #12]
 8004dde:	0e5b      	lsrs	r3, r3, #25
 8004de0:	f003 0303 	and.w	r3, r3, #3
 8004de4:	3301      	adds	r3, #1
 8004de6:	005b      	lsls	r3, r3, #1
 8004de8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004dea:	697a      	ldr	r2, [r7, #20]
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	fbb2 f3f3 	udiv	r3, r2, r3
 8004df2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004df4:	69bb      	ldr	r3, [r7, #24]
}
 8004df6:	4618      	mov	r0, r3
 8004df8:	3724      	adds	r7, #36	; 0x24
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e00:	4770      	bx	lr
 8004e02:	bf00      	nop
 8004e04:	40021000 	.word	0x40021000
 8004e08:	080144b4 	.word	0x080144b4
 8004e0c:	00f42400 	.word	0x00f42400
 8004e10:	007a1200 	.word	0x007a1200

08004e14 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004e14:	b480      	push	{r7}
 8004e16:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004e18:	4b03      	ldr	r3, [pc, #12]	; (8004e28 <HAL_RCC_GetHCLKFreq+0x14>)
 8004e1a:	681b      	ldr	r3, [r3, #0]
}
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e24:	4770      	bx	lr
 8004e26:	bf00      	nop
 8004e28:	20000008 	.word	0x20000008

08004e2c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004e30:	f7ff fff0 	bl	8004e14 <HAL_RCC_GetHCLKFreq>
 8004e34:	4602      	mov	r2, r0
 8004e36:	4b06      	ldr	r3, [pc, #24]	; (8004e50 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004e38:	689b      	ldr	r3, [r3, #8]
 8004e3a:	0a1b      	lsrs	r3, r3, #8
 8004e3c:	f003 0307 	and.w	r3, r3, #7
 8004e40:	4904      	ldr	r1, [pc, #16]	; (8004e54 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004e42:	5ccb      	ldrb	r3, [r1, r3]
 8004e44:	f003 031f 	and.w	r3, r3, #31
 8004e48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	bd80      	pop	{r7, pc}
 8004e50:	40021000 	.word	0x40021000
 8004e54:	080144ac 	.word	0x080144ac

08004e58 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004e5c:	f7ff ffda 	bl	8004e14 <HAL_RCC_GetHCLKFreq>
 8004e60:	4602      	mov	r2, r0
 8004e62:	4b06      	ldr	r3, [pc, #24]	; (8004e7c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004e64:	689b      	ldr	r3, [r3, #8]
 8004e66:	0adb      	lsrs	r3, r3, #11
 8004e68:	f003 0307 	and.w	r3, r3, #7
 8004e6c:	4904      	ldr	r1, [pc, #16]	; (8004e80 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004e6e:	5ccb      	ldrb	r3, [r1, r3]
 8004e70:	f003 031f 	and.w	r3, r3, #31
 8004e74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e78:	4618      	mov	r0, r3
 8004e7a:	bd80      	pop	{r7, pc}
 8004e7c:	40021000 	.word	0x40021000
 8004e80:	080144ac 	.word	0x080144ac

08004e84 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004e84:	b480      	push	{r7}
 8004e86:	b083      	sub	sp, #12
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
 8004e8c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	220f      	movs	r2, #15
 8004e92:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8004e94:	4b12      	ldr	r3, [pc, #72]	; (8004ee0 <HAL_RCC_GetClockConfig+0x5c>)
 8004e96:	689b      	ldr	r3, [r3, #8]
 8004e98:	f003 0203 	and.w	r2, r3, #3
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8004ea0:	4b0f      	ldr	r3, [pc, #60]	; (8004ee0 <HAL_RCC_GetClockConfig+0x5c>)
 8004ea2:	689b      	ldr	r3, [r3, #8]
 8004ea4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8004eac:	4b0c      	ldr	r3, [pc, #48]	; (8004ee0 <HAL_RCC_GetClockConfig+0x5c>)
 8004eae:	689b      	ldr	r3, [r3, #8]
 8004eb0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8004eb8:	4b09      	ldr	r3, [pc, #36]	; (8004ee0 <HAL_RCC_GetClockConfig+0x5c>)
 8004eba:	689b      	ldr	r3, [r3, #8]
 8004ebc:	08db      	lsrs	r3, r3, #3
 8004ebe:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8004ec6:	4b07      	ldr	r3, [pc, #28]	; (8004ee4 <HAL_RCC_GetClockConfig+0x60>)
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f003 0207 	and.w	r2, r3, #7
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	601a      	str	r2, [r3, #0]
}
 8004ed2:	bf00      	nop
 8004ed4:	370c      	adds	r7, #12
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004edc:	4770      	bx	lr
 8004ede:	bf00      	nop
 8004ee0:	40021000 	.word	0x40021000
 8004ee4:	40022000 	.word	0x40022000

08004ee8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b086      	sub	sp, #24
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004ef0:	2300      	movs	r3, #0
 8004ef2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004ef4:	4b2a      	ldr	r3, [pc, #168]	; (8004fa0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004ef6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ef8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d003      	beq.n	8004f08 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004f00:	f7ff f902 	bl	8004108 <HAL_PWREx_GetVoltageRange>
 8004f04:	6178      	str	r0, [r7, #20]
 8004f06:	e014      	b.n	8004f32 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004f08:	4b25      	ldr	r3, [pc, #148]	; (8004fa0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004f0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f0c:	4a24      	ldr	r2, [pc, #144]	; (8004fa0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004f0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f12:	6593      	str	r3, [r2, #88]	; 0x58
 8004f14:	4b22      	ldr	r3, [pc, #136]	; (8004fa0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004f16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f1c:	60fb      	str	r3, [r7, #12]
 8004f1e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004f20:	f7ff f8f2 	bl	8004108 <HAL_PWREx_GetVoltageRange>
 8004f24:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004f26:	4b1e      	ldr	r3, [pc, #120]	; (8004fa0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004f28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f2a:	4a1d      	ldr	r2, [pc, #116]	; (8004fa0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004f2c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f30:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004f32:	697b      	ldr	r3, [r7, #20]
 8004f34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f38:	d10b      	bne.n	8004f52 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	2b80      	cmp	r3, #128	; 0x80
 8004f3e:	d919      	bls.n	8004f74 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2ba0      	cmp	r3, #160	; 0xa0
 8004f44:	d902      	bls.n	8004f4c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004f46:	2302      	movs	r3, #2
 8004f48:	613b      	str	r3, [r7, #16]
 8004f4a:	e013      	b.n	8004f74 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004f4c:	2301      	movs	r3, #1
 8004f4e:	613b      	str	r3, [r7, #16]
 8004f50:	e010      	b.n	8004f74 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	2b80      	cmp	r3, #128	; 0x80
 8004f56:	d902      	bls.n	8004f5e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004f58:	2303      	movs	r3, #3
 8004f5a:	613b      	str	r3, [r7, #16]
 8004f5c:	e00a      	b.n	8004f74 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2b80      	cmp	r3, #128	; 0x80
 8004f62:	d102      	bne.n	8004f6a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004f64:	2302      	movs	r3, #2
 8004f66:	613b      	str	r3, [r7, #16]
 8004f68:	e004      	b.n	8004f74 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	2b70      	cmp	r3, #112	; 0x70
 8004f6e:	d101      	bne.n	8004f74 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004f70:	2301      	movs	r3, #1
 8004f72:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004f74:	4b0b      	ldr	r3, [pc, #44]	; (8004fa4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f023 0207 	bic.w	r2, r3, #7
 8004f7c:	4909      	ldr	r1, [pc, #36]	; (8004fa4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004f7e:	693b      	ldr	r3, [r7, #16]
 8004f80:	4313      	orrs	r3, r2
 8004f82:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004f84:	4b07      	ldr	r3, [pc, #28]	; (8004fa4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f003 0307 	and.w	r3, r3, #7
 8004f8c:	693a      	ldr	r2, [r7, #16]
 8004f8e:	429a      	cmp	r2, r3
 8004f90:	d001      	beq.n	8004f96 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004f92:	2301      	movs	r3, #1
 8004f94:	e000      	b.n	8004f98 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004f96:	2300      	movs	r3, #0
}
 8004f98:	4618      	mov	r0, r3
 8004f9a:	3718      	adds	r7, #24
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	bd80      	pop	{r7, pc}
 8004fa0:	40021000 	.word	0x40021000
 8004fa4:	40022000 	.word	0x40022000

08004fa8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	b086      	sub	sp, #24
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d041      	beq.n	8005048 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004fc8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004fcc:	d02a      	beq.n	8005024 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004fce:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004fd2:	d824      	bhi.n	800501e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004fd4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004fd8:	d008      	beq.n	8004fec <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004fda:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004fde:	d81e      	bhi.n	800501e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d00a      	beq.n	8004ffa <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004fe4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004fe8:	d010      	beq.n	800500c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004fea:	e018      	b.n	800501e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004fec:	4b86      	ldr	r3, [pc, #536]	; (8005208 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004fee:	68db      	ldr	r3, [r3, #12]
 8004ff0:	4a85      	ldr	r2, [pc, #532]	; (8005208 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ff2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ff6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004ff8:	e015      	b.n	8005026 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	3304      	adds	r3, #4
 8004ffe:	2100      	movs	r1, #0
 8005000:	4618      	mov	r0, r3
 8005002:	f000 facb 	bl	800559c <RCCEx_PLLSAI1_Config>
 8005006:	4603      	mov	r3, r0
 8005008:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800500a:	e00c      	b.n	8005026 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	3320      	adds	r3, #32
 8005010:	2100      	movs	r1, #0
 8005012:	4618      	mov	r0, r3
 8005014:	f000 fbb6 	bl	8005784 <RCCEx_PLLSAI2_Config>
 8005018:	4603      	mov	r3, r0
 800501a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800501c:	e003      	b.n	8005026 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800501e:	2301      	movs	r3, #1
 8005020:	74fb      	strb	r3, [r7, #19]
      break;
 8005022:	e000      	b.n	8005026 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8005024:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005026:	7cfb      	ldrb	r3, [r7, #19]
 8005028:	2b00      	cmp	r3, #0
 800502a:	d10b      	bne.n	8005044 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800502c:	4b76      	ldr	r3, [pc, #472]	; (8005208 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800502e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005032:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800503a:	4973      	ldr	r1, [pc, #460]	; (8005208 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800503c:	4313      	orrs	r3, r2
 800503e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005042:	e001      	b.n	8005048 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005044:	7cfb      	ldrb	r3, [r7, #19]
 8005046:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005050:	2b00      	cmp	r3, #0
 8005052:	d041      	beq.n	80050d8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005058:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800505c:	d02a      	beq.n	80050b4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800505e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005062:	d824      	bhi.n	80050ae <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005064:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005068:	d008      	beq.n	800507c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800506a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800506e:	d81e      	bhi.n	80050ae <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005070:	2b00      	cmp	r3, #0
 8005072:	d00a      	beq.n	800508a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8005074:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005078:	d010      	beq.n	800509c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800507a:	e018      	b.n	80050ae <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800507c:	4b62      	ldr	r3, [pc, #392]	; (8005208 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800507e:	68db      	ldr	r3, [r3, #12]
 8005080:	4a61      	ldr	r2, [pc, #388]	; (8005208 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005082:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005086:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005088:	e015      	b.n	80050b6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	3304      	adds	r3, #4
 800508e:	2100      	movs	r1, #0
 8005090:	4618      	mov	r0, r3
 8005092:	f000 fa83 	bl	800559c <RCCEx_PLLSAI1_Config>
 8005096:	4603      	mov	r3, r0
 8005098:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800509a:	e00c      	b.n	80050b6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	3320      	adds	r3, #32
 80050a0:	2100      	movs	r1, #0
 80050a2:	4618      	mov	r0, r3
 80050a4:	f000 fb6e 	bl	8005784 <RCCEx_PLLSAI2_Config>
 80050a8:	4603      	mov	r3, r0
 80050aa:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80050ac:	e003      	b.n	80050b6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80050ae:	2301      	movs	r3, #1
 80050b0:	74fb      	strb	r3, [r7, #19]
      break;
 80050b2:	e000      	b.n	80050b6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80050b4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80050b6:	7cfb      	ldrb	r3, [r7, #19]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d10b      	bne.n	80050d4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80050bc:	4b52      	ldr	r3, [pc, #328]	; (8005208 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80050be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050c2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80050ca:	494f      	ldr	r1, [pc, #316]	; (8005208 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80050cc:	4313      	orrs	r3, r2
 80050ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80050d2:	e001      	b.n	80050d8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050d4:	7cfb      	ldrb	r3, [r7, #19]
 80050d6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	f000 80a0 	beq.w	8005226 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80050e6:	2300      	movs	r3, #0
 80050e8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80050ea:	4b47      	ldr	r3, [pc, #284]	; (8005208 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80050ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d101      	bne.n	80050fa <HAL_RCCEx_PeriphCLKConfig+0x152>
 80050f6:	2301      	movs	r3, #1
 80050f8:	e000      	b.n	80050fc <HAL_RCCEx_PeriphCLKConfig+0x154>
 80050fa:	2300      	movs	r3, #0
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d00d      	beq.n	800511c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005100:	4b41      	ldr	r3, [pc, #260]	; (8005208 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005102:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005104:	4a40      	ldr	r2, [pc, #256]	; (8005208 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005106:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800510a:	6593      	str	r3, [r2, #88]	; 0x58
 800510c:	4b3e      	ldr	r3, [pc, #248]	; (8005208 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800510e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005110:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005114:	60bb      	str	r3, [r7, #8]
 8005116:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005118:	2301      	movs	r3, #1
 800511a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800511c:	4b3b      	ldr	r3, [pc, #236]	; (800520c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	4a3a      	ldr	r2, [pc, #232]	; (800520c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005122:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005126:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005128:	f7fd fb40 	bl	80027ac <HAL_GetTick>
 800512c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800512e:	e009      	b.n	8005144 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005130:	f7fd fb3c 	bl	80027ac <HAL_GetTick>
 8005134:	4602      	mov	r2, r0
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	1ad3      	subs	r3, r2, r3
 800513a:	2b02      	cmp	r3, #2
 800513c:	d902      	bls.n	8005144 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800513e:	2303      	movs	r3, #3
 8005140:	74fb      	strb	r3, [r7, #19]
        break;
 8005142:	e005      	b.n	8005150 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005144:	4b31      	ldr	r3, [pc, #196]	; (800520c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800514c:	2b00      	cmp	r3, #0
 800514e:	d0ef      	beq.n	8005130 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8005150:	7cfb      	ldrb	r3, [r7, #19]
 8005152:	2b00      	cmp	r3, #0
 8005154:	d15c      	bne.n	8005210 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005156:	4b2c      	ldr	r3, [pc, #176]	; (8005208 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005158:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800515c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005160:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005162:	697b      	ldr	r3, [r7, #20]
 8005164:	2b00      	cmp	r3, #0
 8005166:	d01f      	beq.n	80051a8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800516e:	697a      	ldr	r2, [r7, #20]
 8005170:	429a      	cmp	r2, r3
 8005172:	d019      	beq.n	80051a8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005174:	4b24      	ldr	r3, [pc, #144]	; (8005208 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005176:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800517a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800517e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005180:	4b21      	ldr	r3, [pc, #132]	; (8005208 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005182:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005186:	4a20      	ldr	r2, [pc, #128]	; (8005208 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005188:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800518c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005190:	4b1d      	ldr	r3, [pc, #116]	; (8005208 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005192:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005196:	4a1c      	ldr	r2, [pc, #112]	; (8005208 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005198:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800519c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80051a0:	4a19      	ldr	r2, [pc, #100]	; (8005208 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80051a2:	697b      	ldr	r3, [r7, #20]
 80051a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80051a8:	697b      	ldr	r3, [r7, #20]
 80051aa:	f003 0301 	and.w	r3, r3, #1
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d016      	beq.n	80051e0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051b2:	f7fd fafb 	bl	80027ac <HAL_GetTick>
 80051b6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80051b8:	e00b      	b.n	80051d2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80051ba:	f7fd faf7 	bl	80027ac <HAL_GetTick>
 80051be:	4602      	mov	r2, r0
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	1ad3      	subs	r3, r2, r3
 80051c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80051c8:	4293      	cmp	r3, r2
 80051ca:	d902      	bls.n	80051d2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80051cc:	2303      	movs	r3, #3
 80051ce:	74fb      	strb	r3, [r7, #19]
            break;
 80051d0:	e006      	b.n	80051e0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80051d2:	4b0d      	ldr	r3, [pc, #52]	; (8005208 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80051d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051d8:	f003 0302 	and.w	r3, r3, #2
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d0ec      	beq.n	80051ba <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80051e0:	7cfb      	ldrb	r3, [r7, #19]
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d10c      	bne.n	8005200 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80051e6:	4b08      	ldr	r3, [pc, #32]	; (8005208 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80051e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051ec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80051f6:	4904      	ldr	r1, [pc, #16]	; (8005208 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80051f8:	4313      	orrs	r3, r2
 80051fa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80051fe:	e009      	b.n	8005214 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005200:	7cfb      	ldrb	r3, [r7, #19]
 8005202:	74bb      	strb	r3, [r7, #18]
 8005204:	e006      	b.n	8005214 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8005206:	bf00      	nop
 8005208:	40021000 	.word	0x40021000
 800520c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005210:	7cfb      	ldrb	r3, [r7, #19]
 8005212:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005214:	7c7b      	ldrb	r3, [r7, #17]
 8005216:	2b01      	cmp	r3, #1
 8005218:	d105      	bne.n	8005226 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800521a:	4b9e      	ldr	r3, [pc, #632]	; (8005494 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800521c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800521e:	4a9d      	ldr	r2, [pc, #628]	; (8005494 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005220:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005224:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f003 0301 	and.w	r3, r3, #1
 800522e:	2b00      	cmp	r3, #0
 8005230:	d00a      	beq.n	8005248 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005232:	4b98      	ldr	r3, [pc, #608]	; (8005494 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005234:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005238:	f023 0203 	bic.w	r2, r3, #3
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005240:	4994      	ldr	r1, [pc, #592]	; (8005494 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005242:	4313      	orrs	r3, r2
 8005244:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f003 0302 	and.w	r3, r3, #2
 8005250:	2b00      	cmp	r3, #0
 8005252:	d00a      	beq.n	800526a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005254:	4b8f      	ldr	r3, [pc, #572]	; (8005494 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005256:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800525a:	f023 020c 	bic.w	r2, r3, #12
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005262:	498c      	ldr	r1, [pc, #560]	; (8005494 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005264:	4313      	orrs	r3, r2
 8005266:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f003 0304 	and.w	r3, r3, #4
 8005272:	2b00      	cmp	r3, #0
 8005274:	d00a      	beq.n	800528c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005276:	4b87      	ldr	r3, [pc, #540]	; (8005494 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005278:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800527c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005284:	4983      	ldr	r1, [pc, #524]	; (8005494 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005286:	4313      	orrs	r3, r2
 8005288:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f003 0308 	and.w	r3, r3, #8
 8005294:	2b00      	cmp	r3, #0
 8005296:	d00a      	beq.n	80052ae <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005298:	4b7e      	ldr	r3, [pc, #504]	; (8005494 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800529a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800529e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052a6:	497b      	ldr	r1, [pc, #492]	; (8005494 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052a8:	4313      	orrs	r3, r2
 80052aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f003 0310 	and.w	r3, r3, #16
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d00a      	beq.n	80052d0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80052ba:	4b76      	ldr	r3, [pc, #472]	; (8005494 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052c0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80052c8:	4972      	ldr	r1, [pc, #456]	; (8005494 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052ca:	4313      	orrs	r3, r2
 80052cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f003 0320 	and.w	r3, r3, #32
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d00a      	beq.n	80052f2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80052dc:	4b6d      	ldr	r3, [pc, #436]	; (8005494 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052e2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052ea:	496a      	ldr	r1, [pc, #424]	; (8005494 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052ec:	4313      	orrs	r3, r2
 80052ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d00a      	beq.n	8005314 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80052fe:	4b65      	ldr	r3, [pc, #404]	; (8005494 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005300:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005304:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800530c:	4961      	ldr	r1, [pc, #388]	; (8005494 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800530e:	4313      	orrs	r3, r2
 8005310:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800531c:	2b00      	cmp	r3, #0
 800531e:	d00a      	beq.n	8005336 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005320:	4b5c      	ldr	r3, [pc, #368]	; (8005494 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005322:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005326:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800532e:	4959      	ldr	r1, [pc, #356]	; (8005494 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005330:	4313      	orrs	r3, r2
 8005332:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800533e:	2b00      	cmp	r3, #0
 8005340:	d00a      	beq.n	8005358 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005342:	4b54      	ldr	r3, [pc, #336]	; (8005494 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005344:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005348:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005350:	4950      	ldr	r1, [pc, #320]	; (8005494 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005352:	4313      	orrs	r3, r2
 8005354:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005360:	2b00      	cmp	r3, #0
 8005362:	d00a      	beq.n	800537a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005364:	4b4b      	ldr	r3, [pc, #300]	; (8005494 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005366:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800536a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005372:	4948      	ldr	r1, [pc, #288]	; (8005494 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005374:	4313      	orrs	r3, r2
 8005376:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005382:	2b00      	cmp	r3, #0
 8005384:	d00a      	beq.n	800539c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005386:	4b43      	ldr	r3, [pc, #268]	; (8005494 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005388:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800538c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005394:	493f      	ldr	r1, [pc, #252]	; (8005494 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005396:	4313      	orrs	r3, r2
 8005398:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d028      	beq.n	80053fa <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80053a8:	4b3a      	ldr	r3, [pc, #232]	; (8005494 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053ae:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80053b6:	4937      	ldr	r1, [pc, #220]	; (8005494 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053b8:	4313      	orrs	r3, r2
 80053ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80053c2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80053c6:	d106      	bne.n	80053d6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80053c8:	4b32      	ldr	r3, [pc, #200]	; (8005494 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053ca:	68db      	ldr	r3, [r3, #12]
 80053cc:	4a31      	ldr	r2, [pc, #196]	; (8005494 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053ce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80053d2:	60d3      	str	r3, [r2, #12]
 80053d4:	e011      	b.n	80053fa <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80053da:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80053de:	d10c      	bne.n	80053fa <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	3304      	adds	r3, #4
 80053e4:	2101      	movs	r1, #1
 80053e6:	4618      	mov	r0, r3
 80053e8:	f000 f8d8 	bl	800559c <RCCEx_PLLSAI1_Config>
 80053ec:	4603      	mov	r3, r0
 80053ee:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80053f0:	7cfb      	ldrb	r3, [r7, #19]
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d001      	beq.n	80053fa <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80053f6:	7cfb      	ldrb	r3, [r7, #19]
 80053f8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005402:	2b00      	cmp	r3, #0
 8005404:	d028      	beq.n	8005458 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005406:	4b23      	ldr	r3, [pc, #140]	; (8005494 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005408:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800540c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005414:	491f      	ldr	r1, [pc, #124]	; (8005494 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005416:	4313      	orrs	r3, r2
 8005418:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005420:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005424:	d106      	bne.n	8005434 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005426:	4b1b      	ldr	r3, [pc, #108]	; (8005494 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005428:	68db      	ldr	r3, [r3, #12]
 800542a:	4a1a      	ldr	r2, [pc, #104]	; (8005494 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800542c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005430:	60d3      	str	r3, [r2, #12]
 8005432:	e011      	b.n	8005458 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005438:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800543c:	d10c      	bne.n	8005458 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	3304      	adds	r3, #4
 8005442:	2101      	movs	r1, #1
 8005444:	4618      	mov	r0, r3
 8005446:	f000 f8a9 	bl	800559c <RCCEx_PLLSAI1_Config>
 800544a:	4603      	mov	r3, r0
 800544c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800544e:	7cfb      	ldrb	r3, [r7, #19]
 8005450:	2b00      	cmp	r3, #0
 8005452:	d001      	beq.n	8005458 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8005454:	7cfb      	ldrb	r3, [r7, #19]
 8005456:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005460:	2b00      	cmp	r3, #0
 8005462:	d02b      	beq.n	80054bc <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005464:	4b0b      	ldr	r3, [pc, #44]	; (8005494 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005466:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800546a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005472:	4908      	ldr	r1, [pc, #32]	; (8005494 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005474:	4313      	orrs	r3, r2
 8005476:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800547e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005482:	d109      	bne.n	8005498 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005484:	4b03      	ldr	r3, [pc, #12]	; (8005494 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005486:	68db      	ldr	r3, [r3, #12]
 8005488:	4a02      	ldr	r2, [pc, #8]	; (8005494 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800548a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800548e:	60d3      	str	r3, [r2, #12]
 8005490:	e014      	b.n	80054bc <HAL_RCCEx_PeriphCLKConfig+0x514>
 8005492:	bf00      	nop
 8005494:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800549c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80054a0:	d10c      	bne.n	80054bc <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	3304      	adds	r3, #4
 80054a6:	2101      	movs	r1, #1
 80054a8:	4618      	mov	r0, r3
 80054aa:	f000 f877 	bl	800559c <RCCEx_PLLSAI1_Config>
 80054ae:	4603      	mov	r3, r0
 80054b0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80054b2:	7cfb      	ldrb	r3, [r7, #19]
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d001      	beq.n	80054bc <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80054b8:	7cfb      	ldrb	r3, [r7, #19]
 80054ba:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d02f      	beq.n	8005528 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80054c8:	4b2b      	ldr	r3, [pc, #172]	; (8005578 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80054ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054ce:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80054d6:	4928      	ldr	r1, [pc, #160]	; (8005578 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80054d8:	4313      	orrs	r3, r2
 80054da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80054e2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80054e6:	d10d      	bne.n	8005504 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	3304      	adds	r3, #4
 80054ec:	2102      	movs	r1, #2
 80054ee:	4618      	mov	r0, r3
 80054f0:	f000 f854 	bl	800559c <RCCEx_PLLSAI1_Config>
 80054f4:	4603      	mov	r3, r0
 80054f6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80054f8:	7cfb      	ldrb	r3, [r7, #19]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d014      	beq.n	8005528 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80054fe:	7cfb      	ldrb	r3, [r7, #19]
 8005500:	74bb      	strb	r3, [r7, #18]
 8005502:	e011      	b.n	8005528 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005508:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800550c:	d10c      	bne.n	8005528 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	3320      	adds	r3, #32
 8005512:	2102      	movs	r1, #2
 8005514:	4618      	mov	r0, r3
 8005516:	f000 f935 	bl	8005784 <RCCEx_PLLSAI2_Config>
 800551a:	4603      	mov	r3, r0
 800551c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800551e:	7cfb      	ldrb	r3, [r7, #19]
 8005520:	2b00      	cmp	r3, #0
 8005522:	d001      	beq.n	8005528 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005524:	7cfb      	ldrb	r3, [r7, #19]
 8005526:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005530:	2b00      	cmp	r3, #0
 8005532:	d00a      	beq.n	800554a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005534:	4b10      	ldr	r3, [pc, #64]	; (8005578 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005536:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800553a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005542:	490d      	ldr	r1, [pc, #52]	; (8005578 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005544:	4313      	orrs	r3, r2
 8005546:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005552:	2b00      	cmp	r3, #0
 8005554:	d00b      	beq.n	800556e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005556:	4b08      	ldr	r3, [pc, #32]	; (8005578 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005558:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800555c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005566:	4904      	ldr	r1, [pc, #16]	; (8005578 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005568:	4313      	orrs	r3, r2
 800556a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800556e:	7cbb      	ldrb	r3, [r7, #18]
}
 8005570:	4618      	mov	r0, r3
 8005572:	3718      	adds	r7, #24
 8005574:	46bd      	mov	sp, r7
 8005576:	bd80      	pop	{r7, pc}
 8005578:	40021000 	.word	0x40021000

0800557c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 800557c:	b480      	push	{r7}
 800557e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8005580:	4b05      	ldr	r3, [pc, #20]	; (8005598 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	4a04      	ldr	r2, [pc, #16]	; (8005598 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8005586:	f043 0304 	orr.w	r3, r3, #4
 800558a:	6013      	str	r3, [r2, #0]
}
 800558c:	bf00      	nop
 800558e:	46bd      	mov	sp, r7
 8005590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005594:	4770      	bx	lr
 8005596:	bf00      	nop
 8005598:	40021000 	.word	0x40021000

0800559c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800559c:	b580      	push	{r7, lr}
 800559e:	b084      	sub	sp, #16
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]
 80055a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80055a6:	2300      	movs	r3, #0
 80055a8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80055aa:	4b75      	ldr	r3, [pc, #468]	; (8005780 <RCCEx_PLLSAI1_Config+0x1e4>)
 80055ac:	68db      	ldr	r3, [r3, #12]
 80055ae:	f003 0303 	and.w	r3, r3, #3
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d018      	beq.n	80055e8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80055b6:	4b72      	ldr	r3, [pc, #456]	; (8005780 <RCCEx_PLLSAI1_Config+0x1e4>)
 80055b8:	68db      	ldr	r3, [r3, #12]
 80055ba:	f003 0203 	and.w	r2, r3, #3
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	429a      	cmp	r2, r3
 80055c4:	d10d      	bne.n	80055e2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
       ||
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d009      	beq.n	80055e2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80055ce:	4b6c      	ldr	r3, [pc, #432]	; (8005780 <RCCEx_PLLSAI1_Config+0x1e4>)
 80055d0:	68db      	ldr	r3, [r3, #12]
 80055d2:	091b      	lsrs	r3, r3, #4
 80055d4:	f003 0307 	and.w	r3, r3, #7
 80055d8:	1c5a      	adds	r2, r3, #1
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	685b      	ldr	r3, [r3, #4]
       ||
 80055de:	429a      	cmp	r2, r3
 80055e0:	d047      	beq.n	8005672 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80055e2:	2301      	movs	r3, #1
 80055e4:	73fb      	strb	r3, [r7, #15]
 80055e6:	e044      	b.n	8005672 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	2b03      	cmp	r3, #3
 80055ee:	d018      	beq.n	8005622 <RCCEx_PLLSAI1_Config+0x86>
 80055f0:	2b03      	cmp	r3, #3
 80055f2:	d825      	bhi.n	8005640 <RCCEx_PLLSAI1_Config+0xa4>
 80055f4:	2b01      	cmp	r3, #1
 80055f6:	d002      	beq.n	80055fe <RCCEx_PLLSAI1_Config+0x62>
 80055f8:	2b02      	cmp	r3, #2
 80055fa:	d009      	beq.n	8005610 <RCCEx_PLLSAI1_Config+0x74>
 80055fc:	e020      	b.n	8005640 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80055fe:	4b60      	ldr	r3, [pc, #384]	; (8005780 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f003 0302 	and.w	r3, r3, #2
 8005606:	2b00      	cmp	r3, #0
 8005608:	d11d      	bne.n	8005646 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800560a:	2301      	movs	r3, #1
 800560c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800560e:	e01a      	b.n	8005646 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005610:	4b5b      	ldr	r3, [pc, #364]	; (8005780 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005618:	2b00      	cmp	r3, #0
 800561a:	d116      	bne.n	800564a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800561c:	2301      	movs	r3, #1
 800561e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005620:	e013      	b.n	800564a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005622:	4b57      	ldr	r3, [pc, #348]	; (8005780 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800562a:	2b00      	cmp	r3, #0
 800562c:	d10f      	bne.n	800564e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800562e:	4b54      	ldr	r3, [pc, #336]	; (8005780 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005636:	2b00      	cmp	r3, #0
 8005638:	d109      	bne.n	800564e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800563a:	2301      	movs	r3, #1
 800563c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800563e:	e006      	b.n	800564e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005640:	2301      	movs	r3, #1
 8005642:	73fb      	strb	r3, [r7, #15]
      break;
 8005644:	e004      	b.n	8005650 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005646:	bf00      	nop
 8005648:	e002      	b.n	8005650 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800564a:	bf00      	nop
 800564c:	e000      	b.n	8005650 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800564e:	bf00      	nop
    }

    if(status == HAL_OK)
 8005650:	7bfb      	ldrb	r3, [r7, #15]
 8005652:	2b00      	cmp	r3, #0
 8005654:	d10d      	bne.n	8005672 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005656:	4b4a      	ldr	r3, [pc, #296]	; (8005780 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005658:	68db      	ldr	r3, [r3, #12]
 800565a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	6819      	ldr	r1, [r3, #0]
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	685b      	ldr	r3, [r3, #4]
 8005666:	3b01      	subs	r3, #1
 8005668:	011b      	lsls	r3, r3, #4
 800566a:	430b      	orrs	r3, r1
 800566c:	4944      	ldr	r1, [pc, #272]	; (8005780 <RCCEx_PLLSAI1_Config+0x1e4>)
 800566e:	4313      	orrs	r3, r2
 8005670:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005672:	7bfb      	ldrb	r3, [r7, #15]
 8005674:	2b00      	cmp	r3, #0
 8005676:	d17d      	bne.n	8005774 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005678:	4b41      	ldr	r3, [pc, #260]	; (8005780 <RCCEx_PLLSAI1_Config+0x1e4>)
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	4a40      	ldr	r2, [pc, #256]	; (8005780 <RCCEx_PLLSAI1_Config+0x1e4>)
 800567e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005682:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005684:	f7fd f892 	bl	80027ac <HAL_GetTick>
 8005688:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800568a:	e009      	b.n	80056a0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800568c:	f7fd f88e 	bl	80027ac <HAL_GetTick>
 8005690:	4602      	mov	r2, r0
 8005692:	68bb      	ldr	r3, [r7, #8]
 8005694:	1ad3      	subs	r3, r2, r3
 8005696:	2b02      	cmp	r3, #2
 8005698:	d902      	bls.n	80056a0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800569a:	2303      	movs	r3, #3
 800569c:	73fb      	strb	r3, [r7, #15]
        break;
 800569e:	e005      	b.n	80056ac <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80056a0:	4b37      	ldr	r3, [pc, #220]	; (8005780 <RCCEx_PLLSAI1_Config+0x1e4>)
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d1ef      	bne.n	800568c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80056ac:	7bfb      	ldrb	r3, [r7, #15]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d160      	bne.n	8005774 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80056b2:	683b      	ldr	r3, [r7, #0]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d111      	bne.n	80056dc <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80056b8:	4b31      	ldr	r3, [pc, #196]	; (8005780 <RCCEx_PLLSAI1_Config+0x1e4>)
 80056ba:	691b      	ldr	r3, [r3, #16]
 80056bc:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80056c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80056c4:	687a      	ldr	r2, [r7, #4]
 80056c6:	6892      	ldr	r2, [r2, #8]
 80056c8:	0211      	lsls	r1, r2, #8
 80056ca:	687a      	ldr	r2, [r7, #4]
 80056cc:	68d2      	ldr	r2, [r2, #12]
 80056ce:	0912      	lsrs	r2, r2, #4
 80056d0:	0452      	lsls	r2, r2, #17
 80056d2:	430a      	orrs	r2, r1
 80056d4:	492a      	ldr	r1, [pc, #168]	; (8005780 <RCCEx_PLLSAI1_Config+0x1e4>)
 80056d6:	4313      	orrs	r3, r2
 80056d8:	610b      	str	r3, [r1, #16]
 80056da:	e027      	b.n	800572c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80056dc:	683b      	ldr	r3, [r7, #0]
 80056de:	2b01      	cmp	r3, #1
 80056e0:	d112      	bne.n	8005708 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80056e2:	4b27      	ldr	r3, [pc, #156]	; (8005780 <RCCEx_PLLSAI1_Config+0x1e4>)
 80056e4:	691b      	ldr	r3, [r3, #16]
 80056e6:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80056ea:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80056ee:	687a      	ldr	r2, [r7, #4]
 80056f0:	6892      	ldr	r2, [r2, #8]
 80056f2:	0211      	lsls	r1, r2, #8
 80056f4:	687a      	ldr	r2, [r7, #4]
 80056f6:	6912      	ldr	r2, [r2, #16]
 80056f8:	0852      	lsrs	r2, r2, #1
 80056fa:	3a01      	subs	r2, #1
 80056fc:	0552      	lsls	r2, r2, #21
 80056fe:	430a      	orrs	r2, r1
 8005700:	491f      	ldr	r1, [pc, #124]	; (8005780 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005702:	4313      	orrs	r3, r2
 8005704:	610b      	str	r3, [r1, #16]
 8005706:	e011      	b.n	800572c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005708:	4b1d      	ldr	r3, [pc, #116]	; (8005780 <RCCEx_PLLSAI1_Config+0x1e4>)
 800570a:	691b      	ldr	r3, [r3, #16]
 800570c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005710:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005714:	687a      	ldr	r2, [r7, #4]
 8005716:	6892      	ldr	r2, [r2, #8]
 8005718:	0211      	lsls	r1, r2, #8
 800571a:	687a      	ldr	r2, [r7, #4]
 800571c:	6952      	ldr	r2, [r2, #20]
 800571e:	0852      	lsrs	r2, r2, #1
 8005720:	3a01      	subs	r2, #1
 8005722:	0652      	lsls	r2, r2, #25
 8005724:	430a      	orrs	r2, r1
 8005726:	4916      	ldr	r1, [pc, #88]	; (8005780 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005728:	4313      	orrs	r3, r2
 800572a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800572c:	4b14      	ldr	r3, [pc, #80]	; (8005780 <RCCEx_PLLSAI1_Config+0x1e4>)
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	4a13      	ldr	r2, [pc, #76]	; (8005780 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005732:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005736:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005738:	f7fd f838 	bl	80027ac <HAL_GetTick>
 800573c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800573e:	e009      	b.n	8005754 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005740:	f7fd f834 	bl	80027ac <HAL_GetTick>
 8005744:	4602      	mov	r2, r0
 8005746:	68bb      	ldr	r3, [r7, #8]
 8005748:	1ad3      	subs	r3, r2, r3
 800574a:	2b02      	cmp	r3, #2
 800574c:	d902      	bls.n	8005754 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800574e:	2303      	movs	r3, #3
 8005750:	73fb      	strb	r3, [r7, #15]
          break;
 8005752:	e005      	b.n	8005760 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005754:	4b0a      	ldr	r3, [pc, #40]	; (8005780 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800575c:	2b00      	cmp	r3, #0
 800575e:	d0ef      	beq.n	8005740 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8005760:	7bfb      	ldrb	r3, [r7, #15]
 8005762:	2b00      	cmp	r3, #0
 8005764:	d106      	bne.n	8005774 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005766:	4b06      	ldr	r3, [pc, #24]	; (8005780 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005768:	691a      	ldr	r2, [r3, #16]
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	699b      	ldr	r3, [r3, #24]
 800576e:	4904      	ldr	r1, [pc, #16]	; (8005780 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005770:	4313      	orrs	r3, r2
 8005772:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005774:	7bfb      	ldrb	r3, [r7, #15]
}
 8005776:	4618      	mov	r0, r3
 8005778:	3710      	adds	r7, #16
 800577a:	46bd      	mov	sp, r7
 800577c:	bd80      	pop	{r7, pc}
 800577e:	bf00      	nop
 8005780:	40021000 	.word	0x40021000

08005784 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005784:	b580      	push	{r7, lr}
 8005786:	b084      	sub	sp, #16
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]
 800578c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800578e:	2300      	movs	r3, #0
 8005790:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005792:	4b6a      	ldr	r3, [pc, #424]	; (800593c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005794:	68db      	ldr	r3, [r3, #12]
 8005796:	f003 0303 	and.w	r3, r3, #3
 800579a:	2b00      	cmp	r3, #0
 800579c:	d018      	beq.n	80057d0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800579e:	4b67      	ldr	r3, [pc, #412]	; (800593c <RCCEx_PLLSAI2_Config+0x1b8>)
 80057a0:	68db      	ldr	r3, [r3, #12]
 80057a2:	f003 0203 	and.w	r2, r3, #3
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	429a      	cmp	r2, r3
 80057ac:	d10d      	bne.n	80057ca <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
       ||
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d009      	beq.n	80057ca <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80057b6:	4b61      	ldr	r3, [pc, #388]	; (800593c <RCCEx_PLLSAI2_Config+0x1b8>)
 80057b8:	68db      	ldr	r3, [r3, #12]
 80057ba:	091b      	lsrs	r3, r3, #4
 80057bc:	f003 0307 	and.w	r3, r3, #7
 80057c0:	1c5a      	adds	r2, r3, #1
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	685b      	ldr	r3, [r3, #4]
       ||
 80057c6:	429a      	cmp	r2, r3
 80057c8:	d047      	beq.n	800585a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80057ca:	2301      	movs	r3, #1
 80057cc:	73fb      	strb	r3, [r7, #15]
 80057ce:	e044      	b.n	800585a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	2b03      	cmp	r3, #3
 80057d6:	d018      	beq.n	800580a <RCCEx_PLLSAI2_Config+0x86>
 80057d8:	2b03      	cmp	r3, #3
 80057da:	d825      	bhi.n	8005828 <RCCEx_PLLSAI2_Config+0xa4>
 80057dc:	2b01      	cmp	r3, #1
 80057de:	d002      	beq.n	80057e6 <RCCEx_PLLSAI2_Config+0x62>
 80057e0:	2b02      	cmp	r3, #2
 80057e2:	d009      	beq.n	80057f8 <RCCEx_PLLSAI2_Config+0x74>
 80057e4:	e020      	b.n	8005828 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80057e6:	4b55      	ldr	r3, [pc, #340]	; (800593c <RCCEx_PLLSAI2_Config+0x1b8>)
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f003 0302 	and.w	r3, r3, #2
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d11d      	bne.n	800582e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80057f2:	2301      	movs	r3, #1
 80057f4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80057f6:	e01a      	b.n	800582e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80057f8:	4b50      	ldr	r3, [pc, #320]	; (800593c <RCCEx_PLLSAI2_Config+0x1b8>)
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005800:	2b00      	cmp	r3, #0
 8005802:	d116      	bne.n	8005832 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8005804:	2301      	movs	r3, #1
 8005806:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005808:	e013      	b.n	8005832 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800580a:	4b4c      	ldr	r3, [pc, #304]	; (800593c <RCCEx_PLLSAI2_Config+0x1b8>)
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005812:	2b00      	cmp	r3, #0
 8005814:	d10f      	bne.n	8005836 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005816:	4b49      	ldr	r3, [pc, #292]	; (800593c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800581e:	2b00      	cmp	r3, #0
 8005820:	d109      	bne.n	8005836 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8005822:	2301      	movs	r3, #1
 8005824:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005826:	e006      	b.n	8005836 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005828:	2301      	movs	r3, #1
 800582a:	73fb      	strb	r3, [r7, #15]
      break;
 800582c:	e004      	b.n	8005838 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800582e:	bf00      	nop
 8005830:	e002      	b.n	8005838 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005832:	bf00      	nop
 8005834:	e000      	b.n	8005838 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005836:	bf00      	nop
    }

    if(status == HAL_OK)
 8005838:	7bfb      	ldrb	r3, [r7, #15]
 800583a:	2b00      	cmp	r3, #0
 800583c:	d10d      	bne.n	800585a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800583e:	4b3f      	ldr	r3, [pc, #252]	; (800593c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005840:	68db      	ldr	r3, [r3, #12]
 8005842:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	6819      	ldr	r1, [r3, #0]
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	685b      	ldr	r3, [r3, #4]
 800584e:	3b01      	subs	r3, #1
 8005850:	011b      	lsls	r3, r3, #4
 8005852:	430b      	orrs	r3, r1
 8005854:	4939      	ldr	r1, [pc, #228]	; (800593c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005856:	4313      	orrs	r3, r2
 8005858:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800585a:	7bfb      	ldrb	r3, [r7, #15]
 800585c:	2b00      	cmp	r3, #0
 800585e:	d167      	bne.n	8005930 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005860:	4b36      	ldr	r3, [pc, #216]	; (800593c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	4a35      	ldr	r2, [pc, #212]	; (800593c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005866:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800586a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800586c:	f7fc ff9e 	bl	80027ac <HAL_GetTick>
 8005870:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005872:	e009      	b.n	8005888 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005874:	f7fc ff9a 	bl	80027ac <HAL_GetTick>
 8005878:	4602      	mov	r2, r0
 800587a:	68bb      	ldr	r3, [r7, #8]
 800587c:	1ad3      	subs	r3, r2, r3
 800587e:	2b02      	cmp	r3, #2
 8005880:	d902      	bls.n	8005888 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005882:	2303      	movs	r3, #3
 8005884:	73fb      	strb	r3, [r7, #15]
        break;
 8005886:	e005      	b.n	8005894 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005888:	4b2c      	ldr	r3, [pc, #176]	; (800593c <RCCEx_PLLSAI2_Config+0x1b8>)
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005890:	2b00      	cmp	r3, #0
 8005892:	d1ef      	bne.n	8005874 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005894:	7bfb      	ldrb	r3, [r7, #15]
 8005896:	2b00      	cmp	r3, #0
 8005898:	d14a      	bne.n	8005930 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800589a:	683b      	ldr	r3, [r7, #0]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d111      	bne.n	80058c4 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80058a0:	4b26      	ldr	r3, [pc, #152]	; (800593c <RCCEx_PLLSAI2_Config+0x1b8>)
 80058a2:	695b      	ldr	r3, [r3, #20]
 80058a4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80058a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80058ac:	687a      	ldr	r2, [r7, #4]
 80058ae:	6892      	ldr	r2, [r2, #8]
 80058b0:	0211      	lsls	r1, r2, #8
 80058b2:	687a      	ldr	r2, [r7, #4]
 80058b4:	68d2      	ldr	r2, [r2, #12]
 80058b6:	0912      	lsrs	r2, r2, #4
 80058b8:	0452      	lsls	r2, r2, #17
 80058ba:	430a      	orrs	r2, r1
 80058bc:	491f      	ldr	r1, [pc, #124]	; (800593c <RCCEx_PLLSAI2_Config+0x1b8>)
 80058be:	4313      	orrs	r3, r2
 80058c0:	614b      	str	r3, [r1, #20]
 80058c2:	e011      	b.n	80058e8 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80058c4:	4b1d      	ldr	r3, [pc, #116]	; (800593c <RCCEx_PLLSAI2_Config+0x1b8>)
 80058c6:	695b      	ldr	r3, [r3, #20]
 80058c8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80058cc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80058d0:	687a      	ldr	r2, [r7, #4]
 80058d2:	6892      	ldr	r2, [r2, #8]
 80058d4:	0211      	lsls	r1, r2, #8
 80058d6:	687a      	ldr	r2, [r7, #4]
 80058d8:	6912      	ldr	r2, [r2, #16]
 80058da:	0852      	lsrs	r2, r2, #1
 80058dc:	3a01      	subs	r2, #1
 80058de:	0652      	lsls	r2, r2, #25
 80058e0:	430a      	orrs	r2, r1
 80058e2:	4916      	ldr	r1, [pc, #88]	; (800593c <RCCEx_PLLSAI2_Config+0x1b8>)
 80058e4:	4313      	orrs	r3, r2
 80058e6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80058e8:	4b14      	ldr	r3, [pc, #80]	; (800593c <RCCEx_PLLSAI2_Config+0x1b8>)
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	4a13      	ldr	r2, [pc, #76]	; (800593c <RCCEx_PLLSAI2_Config+0x1b8>)
 80058ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80058f2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058f4:	f7fc ff5a 	bl	80027ac <HAL_GetTick>
 80058f8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80058fa:	e009      	b.n	8005910 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80058fc:	f7fc ff56 	bl	80027ac <HAL_GetTick>
 8005900:	4602      	mov	r2, r0
 8005902:	68bb      	ldr	r3, [r7, #8]
 8005904:	1ad3      	subs	r3, r2, r3
 8005906:	2b02      	cmp	r3, #2
 8005908:	d902      	bls.n	8005910 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800590a:	2303      	movs	r3, #3
 800590c:	73fb      	strb	r3, [r7, #15]
          break;
 800590e:	e005      	b.n	800591c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005910:	4b0a      	ldr	r3, [pc, #40]	; (800593c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005918:	2b00      	cmp	r3, #0
 800591a:	d0ef      	beq.n	80058fc <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800591c:	7bfb      	ldrb	r3, [r7, #15]
 800591e:	2b00      	cmp	r3, #0
 8005920:	d106      	bne.n	8005930 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005922:	4b06      	ldr	r3, [pc, #24]	; (800593c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005924:	695a      	ldr	r2, [r3, #20]
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	695b      	ldr	r3, [r3, #20]
 800592a:	4904      	ldr	r1, [pc, #16]	; (800593c <RCCEx_PLLSAI2_Config+0x1b8>)
 800592c:	4313      	orrs	r3, r2
 800592e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005930:	7bfb      	ldrb	r3, [r7, #15]
}
 8005932:	4618      	mov	r0, r3
 8005934:	3710      	adds	r7, #16
 8005936:	46bd      	mov	sp, r7
 8005938:	bd80      	pop	{r7, pc}
 800593a:	bf00      	nop
 800593c:	40021000 	.word	0x40021000

08005940 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005940:	b580      	push	{r7, lr}
 8005942:	b084      	sub	sp, #16
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005948:	2301      	movs	r3, #1
 800594a:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2b00      	cmp	r3, #0
 8005950:	d06c      	beq.n	8005a2c <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005958:	b2db      	uxtb	r3, r3
 800595a:	2b00      	cmp	r3, #0
 800595c:	d106      	bne.n	800596c <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	2200      	movs	r2, #0
 8005962:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8005966:	6878      	ldr	r0, [r7, #4]
 8005968:	f7fc fb1c 	bl	8001fa4 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2202      	movs	r2, #2
 8005970:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	22ca      	movs	r2, #202	; 0xca
 800597a:	625a      	str	r2, [r3, #36]	; 0x24
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	2253      	movs	r2, #83	; 0x53
 8005982:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8005984:	6878      	ldr	r0, [r7, #4]
 8005986:	f000 fa49 	bl	8005e1c <RTC_EnterInitMode>
 800598a:	4603      	mov	r3, r0
 800598c:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800598e:	7bfb      	ldrb	r3, [r7, #15]
 8005990:	2b00      	cmp	r3, #0
 8005992:	d14b      	bne.n	8005a2c <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	689b      	ldr	r3, [r3, #8]
 800599a:	687a      	ldr	r2, [r7, #4]
 800599c:	6812      	ldr	r2, [r2, #0]
 800599e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80059a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80059a6:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	6899      	ldr	r1, [r3, #8]
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	685a      	ldr	r2, [r3, #4]
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	691b      	ldr	r3, [r3, #16]
 80059b6:	431a      	orrs	r2, r3
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	699b      	ldr	r3, [r3, #24]
 80059bc:	431a      	orrs	r2, r3
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	430a      	orrs	r2, r1
 80059c4:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	687a      	ldr	r2, [r7, #4]
 80059cc:	68d2      	ldr	r2, [r2, #12]
 80059ce:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	6919      	ldr	r1, [r3, #16]
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	689b      	ldr	r3, [r3, #8]
 80059da:	041a      	lsls	r2, r3, #16
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	430a      	orrs	r2, r1
 80059e2:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80059e4:	6878      	ldr	r0, [r7, #4]
 80059e6:	f000 fa4d 	bl	8005e84 <RTC_ExitInitMode>
 80059ea:	4603      	mov	r3, r0
 80059ec:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 80059ee:	7bfb      	ldrb	r3, [r7, #15]
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d11b      	bne.n	8005a2c <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f022 0203 	bic.w	r2, r2, #3
 8005a02:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	69da      	ldr	r2, [r3, #28]
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	695b      	ldr	r3, [r3, #20]
 8005a12:	431a      	orrs	r2, r3
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	430a      	orrs	r2, r1
 8005a1a:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	22ff      	movs	r2, #255	; 0xff
 8005a22:	625a      	str	r2, [r3, #36]	; 0x24

          hrtc->State = HAL_RTC_STATE_READY;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2201      	movs	r2, #1
 8005a28:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 8005a2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a2e:	4618      	mov	r0, r3
 8005a30:	3710      	adds	r7, #16
 8005a32:	46bd      	mov	sp, r7
 8005a34:	bd80      	pop	{r7, pc}

08005a36 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005a36:	b590      	push	{r4, r7, lr}
 8005a38:	b087      	sub	sp, #28
 8005a3a:	af00      	add	r7, sp, #0
 8005a3c:	60f8      	str	r0, [r7, #12]
 8005a3e:	60b9      	str	r1, [r7, #8]
 8005a40:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005a48:	2b01      	cmp	r3, #1
 8005a4a:	d101      	bne.n	8005a50 <HAL_RTC_SetTime+0x1a>
 8005a4c:	2302      	movs	r3, #2
 8005a4e:	e08b      	b.n	8005b68 <HAL_RTC_SetTime+0x132>
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	2201      	movs	r2, #1
 8005a54:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	2202      	movs	r2, #2
 8005a5c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	22ca      	movs	r2, #202	; 0xca
 8005a66:	625a      	str	r2, [r3, #36]	; 0x24
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	2253      	movs	r2, #83	; 0x53
 8005a6e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005a70:	68f8      	ldr	r0, [r7, #12]
 8005a72:	f000 f9d3 	bl	8005e1c <RTC_EnterInitMode>
 8005a76:	4603      	mov	r3, r0
 8005a78:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8005a7a:	7cfb      	ldrb	r3, [r7, #19]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d163      	bne.n	8005b48 <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d126      	bne.n	8005ad4 <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	689b      	ldr	r3, [r3, #8]
 8005a8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d102      	bne.n	8005a9a <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8005a94:	68bb      	ldr	r3, [r7, #8]
 8005a96:	2200      	movs	r2, #0
 8005a98:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005a9a:	68bb      	ldr	r3, [r7, #8]
 8005a9c:	781b      	ldrb	r3, [r3, #0]
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	f000 fa2e 	bl	8005f00 <RTC_ByteToBcd2>
 8005aa4:	4603      	mov	r3, r0
 8005aa6:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005aa8:	68bb      	ldr	r3, [r7, #8]
 8005aaa:	785b      	ldrb	r3, [r3, #1]
 8005aac:	4618      	mov	r0, r3
 8005aae:	f000 fa27 	bl	8005f00 <RTC_ByteToBcd2>
 8005ab2:	4603      	mov	r3, r0
 8005ab4:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005ab6:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8005ab8:	68bb      	ldr	r3, [r7, #8]
 8005aba:	789b      	ldrb	r3, [r3, #2]
 8005abc:	4618      	mov	r0, r3
 8005abe:	f000 fa1f 	bl	8005f00 <RTC_ByteToBcd2>
 8005ac2:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005ac4:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8005ac8:	68bb      	ldr	r3, [r7, #8]
 8005aca:	78db      	ldrb	r3, [r3, #3]
 8005acc:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005ace:	4313      	orrs	r3, r2
 8005ad0:	617b      	str	r3, [r7, #20]
 8005ad2:	e018      	b.n	8005b06 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	689b      	ldr	r3, [r3, #8]
 8005ada:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d102      	bne.n	8005ae8 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8005ae2:	68bb      	ldr	r3, [r7, #8]
 8005ae4:	2200      	movs	r2, #0
 8005ae6:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005ae8:	68bb      	ldr	r3, [r7, #8]
 8005aea:	781b      	ldrb	r3, [r3, #0]
 8005aec:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005aee:	68bb      	ldr	r3, [r7, #8]
 8005af0:	785b      	ldrb	r3, [r3, #1]
 8005af2:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005af4:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8005af6:	68ba      	ldr	r2, [r7, #8]
 8005af8:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005afa:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8005afc:	68bb      	ldr	r3, [r7, #8]
 8005afe:	78db      	ldrb	r3, [r3, #3]
 8005b00:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005b02:	4313      	orrs	r3, r2
 8005b04:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	681a      	ldr	r2, [r3, #0]
 8005b0a:	697b      	ldr	r3, [r7, #20]
 8005b0c:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8005b10:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005b14:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	689a      	ldr	r2, [r3, #8]
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005b24:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	6899      	ldr	r1, [r3, #8]
 8005b2c:	68bb      	ldr	r3, [r7, #8]
 8005b2e:	68da      	ldr	r2, [r3, #12]
 8005b30:	68bb      	ldr	r3, [r7, #8]
 8005b32:	691b      	ldr	r3, [r3, #16]
 8005b34:	431a      	orrs	r2, r3
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	430a      	orrs	r2, r1
 8005b3c:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005b3e:	68f8      	ldr	r0, [r7, #12]
 8005b40:	f000 f9a0 	bl	8005e84 <RTC_ExitInitMode>
 8005b44:	4603      	mov	r3, r0
 8005b46:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	22ff      	movs	r2, #255	; 0xff
 8005b4e:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8005b50:	7cfb      	ldrb	r3, [r7, #19]
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d103      	bne.n	8005b5e <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	2201      	movs	r2, #1
 8005b5a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	2200      	movs	r2, #0
 8005b62:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8005b66:	7cfb      	ldrb	r3, [r7, #19]
}
 8005b68:	4618      	mov	r0, r3
 8005b6a:	371c      	adds	r7, #28
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	bd90      	pop	{r4, r7, pc}

08005b70 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005b70:	b580      	push	{r7, lr}
 8005b72:	b086      	sub	sp, #24
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	60f8      	str	r0, [r7, #12]
 8005b78:	60b9      	str	r1, [r7, #8]
 8005b7a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005b82:	68bb      	ldr	r3, [r7, #8]
 8005b84:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	691b      	ldr	r3, [r3, #16]
 8005b8c:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8005b90:	68bb      	ldr	r3, [r7, #8]
 8005b92:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8005b9e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005ba2:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8005ba4:	697b      	ldr	r3, [r7, #20]
 8005ba6:	0c1b      	lsrs	r3, r3, #16
 8005ba8:	b2db      	uxtb	r3, r3
 8005baa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005bae:	b2da      	uxtb	r2, r3
 8005bb0:	68bb      	ldr	r3, [r7, #8]
 8005bb2:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8005bb4:	697b      	ldr	r3, [r7, #20]
 8005bb6:	0a1b      	lsrs	r3, r3, #8
 8005bb8:	b2db      	uxtb	r3, r3
 8005bba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005bbe:	b2da      	uxtb	r2, r3
 8005bc0:	68bb      	ldr	r3, [r7, #8]
 8005bc2:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8005bc4:	697b      	ldr	r3, [r7, #20]
 8005bc6:	b2db      	uxtb	r3, r3
 8005bc8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005bcc:	b2da      	uxtb	r2, r3
 8005bce:	68bb      	ldr	r3, [r7, #8]
 8005bd0:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8005bd2:	697b      	ldr	r3, [r7, #20]
 8005bd4:	0d9b      	lsrs	r3, r3, #22
 8005bd6:	b2db      	uxtb	r3, r3
 8005bd8:	f003 0301 	and.w	r3, r3, #1
 8005bdc:	b2da      	uxtb	r2, r3
 8005bde:	68bb      	ldr	r3, [r7, #8]
 8005be0:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d11a      	bne.n	8005c1e <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8005be8:	68bb      	ldr	r3, [r7, #8]
 8005bea:	781b      	ldrb	r3, [r3, #0]
 8005bec:	4618      	mov	r0, r3
 8005bee:	f000 f9a7 	bl	8005f40 <RTC_Bcd2ToByte>
 8005bf2:	4603      	mov	r3, r0
 8005bf4:	461a      	mov	r2, r3
 8005bf6:	68bb      	ldr	r3, [r7, #8]
 8005bf8:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8005bfa:	68bb      	ldr	r3, [r7, #8]
 8005bfc:	785b      	ldrb	r3, [r3, #1]
 8005bfe:	4618      	mov	r0, r3
 8005c00:	f000 f99e 	bl	8005f40 <RTC_Bcd2ToByte>
 8005c04:	4603      	mov	r3, r0
 8005c06:	461a      	mov	r2, r3
 8005c08:	68bb      	ldr	r3, [r7, #8]
 8005c0a:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8005c0c:	68bb      	ldr	r3, [r7, #8]
 8005c0e:	789b      	ldrb	r3, [r3, #2]
 8005c10:	4618      	mov	r0, r3
 8005c12:	f000 f995 	bl	8005f40 <RTC_Bcd2ToByte>
 8005c16:	4603      	mov	r3, r0
 8005c18:	461a      	mov	r2, r3
 8005c1a:	68bb      	ldr	r3, [r7, #8]
 8005c1c:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8005c1e:	2300      	movs	r3, #0
}
 8005c20:	4618      	mov	r0, r3
 8005c22:	3718      	adds	r7, #24
 8005c24:	46bd      	mov	sp, r7
 8005c26:	bd80      	pop	{r7, pc}

08005c28 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005c28:	b590      	push	{r4, r7, lr}
 8005c2a:	b087      	sub	sp, #28
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	60f8      	str	r0, [r7, #12]
 8005c30:	60b9      	str	r1, [r7, #8]
 8005c32:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005c3a:	2b01      	cmp	r3, #1
 8005c3c:	d101      	bne.n	8005c42 <HAL_RTC_SetDate+0x1a>
 8005c3e:	2302      	movs	r3, #2
 8005c40:	e075      	b.n	8005d2e <HAL_RTC_SetDate+0x106>
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	2201      	movs	r2, #1
 8005c46:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	2202      	movs	r2, #2
 8005c4e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d10e      	bne.n	8005c76 <HAL_RTC_SetDate+0x4e>
 8005c58:	68bb      	ldr	r3, [r7, #8]
 8005c5a:	785b      	ldrb	r3, [r3, #1]
 8005c5c:	f003 0310 	and.w	r3, r3, #16
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d008      	beq.n	8005c76 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8005c64:	68bb      	ldr	r3, [r7, #8]
 8005c66:	785b      	ldrb	r3, [r3, #1]
 8005c68:	f023 0310 	bic.w	r3, r3, #16
 8005c6c:	b2db      	uxtb	r3, r3
 8005c6e:	330a      	adds	r3, #10
 8005c70:	b2da      	uxtb	r2, r3
 8005c72:	68bb      	ldr	r3, [r7, #8]
 8005c74:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d11c      	bne.n	8005cb6 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8005c7c:	68bb      	ldr	r3, [r7, #8]
 8005c7e:	78db      	ldrb	r3, [r3, #3]
 8005c80:	4618      	mov	r0, r3
 8005c82:	f000 f93d 	bl	8005f00 <RTC_ByteToBcd2>
 8005c86:	4603      	mov	r3, r0
 8005c88:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005c8a:	68bb      	ldr	r3, [r7, #8]
 8005c8c:	785b      	ldrb	r3, [r3, #1]
 8005c8e:	4618      	mov	r0, r3
 8005c90:	f000 f936 	bl	8005f00 <RTC_ByteToBcd2>
 8005c94:	4603      	mov	r3, r0
 8005c96:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8005c98:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8005c9a:	68bb      	ldr	r3, [r7, #8]
 8005c9c:	789b      	ldrb	r3, [r3, #2]
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	f000 f92e 	bl	8005f00 <RTC_ByteToBcd2>
 8005ca4:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005ca6:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8005caa:	68bb      	ldr	r3, [r7, #8]
 8005cac:	781b      	ldrb	r3, [r3, #0]
 8005cae:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8005cb0:	4313      	orrs	r3, r2
 8005cb2:	617b      	str	r3, [r7, #20]
 8005cb4:	e00e      	b.n	8005cd4 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8005cb6:	68bb      	ldr	r3, [r7, #8]
 8005cb8:	78db      	ldrb	r3, [r3, #3]
 8005cba:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8005cbc:	68bb      	ldr	r3, [r7, #8]
 8005cbe:	785b      	ldrb	r3, [r3, #1]
 8005cc0:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8005cc2:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8005cc4:	68ba      	ldr	r2, [r7, #8]
 8005cc6:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8005cc8:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8005cca:	68bb      	ldr	r3, [r7, #8]
 8005ccc:	781b      	ldrb	r3, [r3, #0]
 8005cce:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8005cd0:	4313      	orrs	r3, r2
 8005cd2:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	22ca      	movs	r2, #202	; 0xca
 8005cda:	625a      	str	r2, [r3, #36]	; 0x24
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	2253      	movs	r2, #83	; 0x53
 8005ce2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005ce4:	68f8      	ldr	r0, [r7, #12]
 8005ce6:	f000 f899 	bl	8005e1c <RTC_EnterInitMode>
 8005cea:	4603      	mov	r3, r0
 8005cec:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8005cee:	7cfb      	ldrb	r3, [r7, #19]
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d10c      	bne.n	8005d0e <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	681a      	ldr	r2, [r3, #0]
 8005cf8:	697b      	ldr	r3, [r7, #20]
 8005cfa:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005cfe:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005d02:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005d04:	68f8      	ldr	r0, [r7, #12]
 8005d06:	f000 f8bd 	bl	8005e84 <RTC_ExitInitMode>
 8005d0a:	4603      	mov	r3, r0
 8005d0c:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	22ff      	movs	r2, #255	; 0xff
 8005d14:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8005d16:	7cfb      	ldrb	r3, [r7, #19]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d103      	bne.n	8005d24 <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	2201      	movs	r2, #1
 8005d20:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	2200      	movs	r2, #0
 8005d28:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8005d2c:	7cfb      	ldrb	r3, [r7, #19]
}
 8005d2e:	4618      	mov	r0, r3
 8005d30:	371c      	adds	r7, #28
 8005d32:	46bd      	mov	sp, r7
 8005d34:	bd90      	pop	{r4, r7, pc}

08005d36 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005d36:	b580      	push	{r7, lr}
 8005d38:	b086      	sub	sp, #24
 8005d3a:	af00      	add	r7, sp, #0
 8005d3c:	60f8      	str	r0, [r7, #12]
 8005d3e:	60b9      	str	r1, [r7, #8]
 8005d40:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	685b      	ldr	r3, [r3, #4]
 8005d48:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005d4c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005d50:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8005d52:	697b      	ldr	r3, [r7, #20]
 8005d54:	0c1b      	lsrs	r3, r3, #16
 8005d56:	b2da      	uxtb	r2, r3
 8005d58:	68bb      	ldr	r3, [r7, #8]
 8005d5a:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8005d5c:	697b      	ldr	r3, [r7, #20]
 8005d5e:	0a1b      	lsrs	r3, r3, #8
 8005d60:	b2db      	uxtb	r3, r3
 8005d62:	f003 031f 	and.w	r3, r3, #31
 8005d66:	b2da      	uxtb	r2, r3
 8005d68:	68bb      	ldr	r3, [r7, #8]
 8005d6a:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8005d6c:	697b      	ldr	r3, [r7, #20]
 8005d6e:	b2db      	uxtb	r3, r3
 8005d70:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005d74:	b2da      	uxtb	r2, r3
 8005d76:	68bb      	ldr	r3, [r7, #8]
 8005d78:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8005d7a:	697b      	ldr	r3, [r7, #20]
 8005d7c:	0b5b      	lsrs	r3, r3, #13
 8005d7e:	b2db      	uxtb	r3, r3
 8005d80:	f003 0307 	and.w	r3, r3, #7
 8005d84:	b2da      	uxtb	r2, r3
 8005d86:	68bb      	ldr	r3, [r7, #8]
 8005d88:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d11a      	bne.n	8005dc6 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8005d90:	68bb      	ldr	r3, [r7, #8]
 8005d92:	78db      	ldrb	r3, [r3, #3]
 8005d94:	4618      	mov	r0, r3
 8005d96:	f000 f8d3 	bl	8005f40 <RTC_Bcd2ToByte>
 8005d9a:	4603      	mov	r3, r0
 8005d9c:	461a      	mov	r2, r3
 8005d9e:	68bb      	ldr	r3, [r7, #8]
 8005da0:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8005da2:	68bb      	ldr	r3, [r7, #8]
 8005da4:	785b      	ldrb	r3, [r3, #1]
 8005da6:	4618      	mov	r0, r3
 8005da8:	f000 f8ca 	bl	8005f40 <RTC_Bcd2ToByte>
 8005dac:	4603      	mov	r3, r0
 8005dae:	461a      	mov	r2, r3
 8005db0:	68bb      	ldr	r3, [r7, #8]
 8005db2:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8005db4:	68bb      	ldr	r3, [r7, #8]
 8005db6:	789b      	ldrb	r3, [r3, #2]
 8005db8:	4618      	mov	r0, r3
 8005dba:	f000 f8c1 	bl	8005f40 <RTC_Bcd2ToByte>
 8005dbe:	4603      	mov	r3, r0
 8005dc0:	461a      	mov	r2, r3
 8005dc2:	68bb      	ldr	r3, [r7, #8]
 8005dc4:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8005dc6:	2300      	movs	r3, #0
}
 8005dc8:	4618      	mov	r0, r3
 8005dca:	3718      	adds	r7, #24
 8005dcc:	46bd      	mov	sp, r7
 8005dce:	bd80      	pop	{r7, pc}

08005dd0 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	b084      	sub	sp, #16
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	68da      	ldr	r2, [r3, #12]
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005de6:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 8005de8:	f7fc fce0 	bl	80027ac <HAL_GetTick>
 8005dec:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005dee:	e009      	b.n	8005e04 <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005df0:	f7fc fcdc 	bl	80027ac <HAL_GetTick>
 8005df4:	4602      	mov	r2, r0
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	1ad3      	subs	r3, r2, r3
 8005dfa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005dfe:	d901      	bls.n	8005e04 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8005e00:	2303      	movs	r3, #3
 8005e02:	e007      	b.n	8005e14 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	68db      	ldr	r3, [r3, #12]
 8005e0a:	f003 0320 	and.w	r3, r3, #32
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d0ee      	beq.n	8005df0 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8005e12:	2300      	movs	r3, #0
}
 8005e14:	4618      	mov	r0, r3
 8005e16:	3710      	adds	r7, #16
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	bd80      	pop	{r7, pc}

08005e1c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005e1c:	b580      	push	{r7, lr}
 8005e1e:	b084      	sub	sp, #16
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005e24:	2300      	movs	r3, #0
 8005e26:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	68db      	ldr	r3, [r3, #12]
 8005e2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d120      	bne.n	8005e78 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	f04f 32ff 	mov.w	r2, #4294967295
 8005e3e:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8005e40:	f7fc fcb4 	bl	80027ac <HAL_GetTick>
 8005e44:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8005e46:	e00d      	b.n	8005e64 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8005e48:	f7fc fcb0 	bl	80027ac <HAL_GetTick>
 8005e4c:	4602      	mov	r2, r0
 8005e4e:	68bb      	ldr	r3, [r7, #8]
 8005e50:	1ad3      	subs	r3, r2, r3
 8005e52:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005e56:	d905      	bls.n	8005e64 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8005e58:	2303      	movs	r3, #3
 8005e5a:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2203      	movs	r2, #3
 8005e60:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	68db      	ldr	r3, [r3, #12]
 8005e6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d102      	bne.n	8005e78 <RTC_EnterInitMode+0x5c>
 8005e72:	7bfb      	ldrb	r3, [r7, #15]
 8005e74:	2b03      	cmp	r3, #3
 8005e76:	d1e7      	bne.n	8005e48 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8005e78:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	3710      	adds	r7, #16
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	bd80      	pop	{r7, pc}
	...

08005e84 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005e84:	b580      	push	{r7, lr}
 8005e86:	b084      	sub	sp, #16
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005e8c:	2300      	movs	r3, #0
 8005e8e:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8005e90:	4b1a      	ldr	r3, [pc, #104]	; (8005efc <RTC_ExitInitMode+0x78>)
 8005e92:	68db      	ldr	r3, [r3, #12]
 8005e94:	4a19      	ldr	r2, [pc, #100]	; (8005efc <RTC_ExitInitMode+0x78>)
 8005e96:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005e9a:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8005e9c:	4b17      	ldr	r3, [pc, #92]	; (8005efc <RTC_ExitInitMode+0x78>)
 8005e9e:	689b      	ldr	r3, [r3, #8]
 8005ea0:	f003 0320 	and.w	r3, r3, #32
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d10c      	bne.n	8005ec2 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005ea8:	6878      	ldr	r0, [r7, #4]
 8005eaa:	f7ff ff91 	bl	8005dd0 <HAL_RTC_WaitForSynchro>
 8005eae:	4603      	mov	r3, r0
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d01e      	beq.n	8005ef2 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2203      	movs	r2, #3
 8005eb8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8005ebc:	2303      	movs	r3, #3
 8005ebe:	73fb      	strb	r3, [r7, #15]
 8005ec0:	e017      	b.n	8005ef2 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8005ec2:	4b0e      	ldr	r3, [pc, #56]	; (8005efc <RTC_ExitInitMode+0x78>)
 8005ec4:	689b      	ldr	r3, [r3, #8]
 8005ec6:	4a0d      	ldr	r2, [pc, #52]	; (8005efc <RTC_ExitInitMode+0x78>)
 8005ec8:	f023 0320 	bic.w	r3, r3, #32
 8005ecc:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005ece:	6878      	ldr	r0, [r7, #4]
 8005ed0:	f7ff ff7e 	bl	8005dd0 <HAL_RTC_WaitForSynchro>
 8005ed4:	4603      	mov	r3, r0
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d005      	beq.n	8005ee6 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	2203      	movs	r2, #3
 8005ede:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8005ee2:	2303      	movs	r3, #3
 8005ee4:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8005ee6:	4b05      	ldr	r3, [pc, #20]	; (8005efc <RTC_ExitInitMode+0x78>)
 8005ee8:	689b      	ldr	r3, [r3, #8]
 8005eea:	4a04      	ldr	r2, [pc, #16]	; (8005efc <RTC_ExitInitMode+0x78>)
 8005eec:	f043 0320 	orr.w	r3, r3, #32
 8005ef0:	6093      	str	r3, [r2, #8]
  }

  return status;
 8005ef2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ef4:	4618      	mov	r0, r3
 8005ef6:	3710      	adds	r7, #16
 8005ef8:	46bd      	mov	sp, r7
 8005efa:	bd80      	pop	{r7, pc}
 8005efc:	40002800 	.word	0x40002800

08005f00 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8005f00:	b480      	push	{r7}
 8005f02:	b085      	sub	sp, #20
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	4603      	mov	r3, r0
 8005f08:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8005f0a:	2300      	movs	r3, #0
 8005f0c:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 8005f0e:	79fb      	ldrb	r3, [r7, #7]
 8005f10:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 8005f12:	e005      	b.n	8005f20 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	3301      	adds	r3, #1
 8005f18:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 8005f1a:	7afb      	ldrb	r3, [r7, #11]
 8005f1c:	3b0a      	subs	r3, #10
 8005f1e:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 8005f20:	7afb      	ldrb	r3, [r7, #11]
 8005f22:	2b09      	cmp	r3, #9
 8005f24:	d8f6      	bhi.n	8005f14 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	b2db      	uxtb	r3, r3
 8005f2a:	011b      	lsls	r3, r3, #4
 8005f2c:	b2da      	uxtb	r2, r3
 8005f2e:	7afb      	ldrb	r3, [r7, #11]
 8005f30:	4313      	orrs	r3, r2
 8005f32:	b2db      	uxtb	r3, r3
}
 8005f34:	4618      	mov	r0, r3
 8005f36:	3714      	adds	r7, #20
 8005f38:	46bd      	mov	sp, r7
 8005f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3e:	4770      	bx	lr

08005f40 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8005f40:	b480      	push	{r7}
 8005f42:	b085      	sub	sp, #20
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	4603      	mov	r3, r0
 8005f48:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 8005f4a:	79fb      	ldrb	r3, [r7, #7]
 8005f4c:	091b      	lsrs	r3, r3, #4
 8005f4e:	b2db      	uxtb	r3, r3
 8005f50:	461a      	mov	r2, r3
 8005f52:	0092      	lsls	r2, r2, #2
 8005f54:	4413      	add	r3, r2
 8005f56:	005b      	lsls	r3, r3, #1
 8005f58:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 8005f5a:	79fb      	ldrb	r3, [r7, #7]
 8005f5c:	f003 030f 	and.w	r3, r3, #15
 8005f60:	b2da      	uxtb	r2, r3
 8005f62:	7bfb      	ldrb	r3, [r7, #15]
 8005f64:	4413      	add	r3, r2
 8005f66:	b2db      	uxtb	r3, r3
}
 8005f68:	4618      	mov	r0, r3
 8005f6a:	3714      	adds	r7, #20
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f72:	4770      	bx	lr

08005f74 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005f74:	b580      	push	{r7, lr}
 8005f76:	b084      	sub	sp, #16
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d101      	bne.n	8005f86 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005f82:	2301      	movs	r3, #1
 8005f84:	e095      	b.n	80060b2 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d108      	bne.n	8005fa0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	685b      	ldr	r3, [r3, #4]
 8005f92:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005f96:	d009      	beq.n	8005fac <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	2200      	movs	r2, #0
 8005f9c:	61da      	str	r2, [r3, #28]
 8005f9e:	e005      	b.n	8005fac <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	2200      	movs	r2, #0
 8005fa4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	2200      	movs	r2, #0
 8005faa:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2200      	movs	r2, #0
 8005fb0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005fb8:	b2db      	uxtb	r3, r3
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d106      	bne.n	8005fcc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005fc6:	6878      	ldr	r0, [r7, #4]
 8005fc8:	f7fc f81e 	bl	8002008 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	2202      	movs	r2, #2
 8005fd0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	681a      	ldr	r2, [r3, #0]
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005fe2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	68db      	ldr	r3, [r3, #12]
 8005fe8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005fec:	d902      	bls.n	8005ff4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005fee:	2300      	movs	r3, #0
 8005ff0:	60fb      	str	r3, [r7, #12]
 8005ff2:	e002      	b.n	8005ffa <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005ff4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005ff8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	68db      	ldr	r3, [r3, #12]
 8005ffe:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8006002:	d007      	beq.n	8006014 <HAL_SPI_Init+0xa0>
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	68db      	ldr	r3, [r3, #12]
 8006008:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800600c:	d002      	beq.n	8006014 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	2200      	movs	r2, #0
 8006012:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	685b      	ldr	r3, [r3, #4]
 8006018:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	689b      	ldr	r3, [r3, #8]
 8006020:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006024:	431a      	orrs	r2, r3
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	691b      	ldr	r3, [r3, #16]
 800602a:	f003 0302 	and.w	r3, r3, #2
 800602e:	431a      	orrs	r2, r3
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	695b      	ldr	r3, [r3, #20]
 8006034:	f003 0301 	and.w	r3, r3, #1
 8006038:	431a      	orrs	r2, r3
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	699b      	ldr	r3, [r3, #24]
 800603e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006042:	431a      	orrs	r2, r3
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	69db      	ldr	r3, [r3, #28]
 8006048:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800604c:	431a      	orrs	r2, r3
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	6a1b      	ldr	r3, [r3, #32]
 8006052:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006056:	ea42 0103 	orr.w	r1, r2, r3
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800605e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	430a      	orrs	r2, r1
 8006068:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	699b      	ldr	r3, [r3, #24]
 800606e:	0c1b      	lsrs	r3, r3, #16
 8006070:	f003 0204 	and.w	r2, r3, #4
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006078:	f003 0310 	and.w	r3, r3, #16
 800607c:	431a      	orrs	r2, r3
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006082:	f003 0308 	and.w	r3, r3, #8
 8006086:	431a      	orrs	r2, r3
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	68db      	ldr	r3, [r3, #12]
 800608c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8006090:	ea42 0103 	orr.w	r1, r2, r3
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	430a      	orrs	r2, r1
 80060a0:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	2200      	movs	r2, #0
 80060a6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	2201      	movs	r2, #1
 80060ac:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80060b0:	2300      	movs	r3, #0
}
 80060b2:	4618      	mov	r0, r3
 80060b4:	3710      	adds	r7, #16
 80060b6:	46bd      	mov	sp, r7
 80060b8:	bd80      	pop	{r7, pc}

080060ba <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 80060ba:	b580      	push	{r7, lr}
 80060bc:	b082      	sub	sp, #8
 80060be:	af00      	add	r7, sp, #0
 80060c0:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d101      	bne.n	80060cc <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 80060c8:	2301      	movs	r3, #1
 80060ca:	e01a      	b.n	8006102 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	2202      	movs	r2, #2
 80060d0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	681a      	ldr	r2, [r3, #0]
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80060e2:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 80060e4:	6878      	ldr	r0, [r7, #4]
 80060e6:	f7fb ffdb 	bl	80020a0 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	2200      	movs	r2, #0
 80060ee:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_RESET;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	2200      	movs	r2, #0
 80060f4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2200      	movs	r2, #0
 80060fc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  return HAL_OK;
 8006100:	2300      	movs	r3, #0
}
 8006102:	4618      	mov	r0, r3
 8006104:	3708      	adds	r7, #8
 8006106:	46bd      	mov	sp, r7
 8006108:	bd80      	pop	{r7, pc}

0800610a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800610a:	b580      	push	{r7, lr}
 800610c:	b088      	sub	sp, #32
 800610e:	af02      	add	r7, sp, #8
 8006110:	60f8      	str	r0, [r7, #12]
 8006112:	60b9      	str	r1, [r7, #8]
 8006114:	603b      	str	r3, [r7, #0]
 8006116:	4613      	mov	r3, r2
 8006118:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800611a:	2300      	movs	r3, #0
 800611c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	685b      	ldr	r3, [r3, #4]
 8006122:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006126:	d112      	bne.n	800614e <HAL_SPI_Receive+0x44>
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	689b      	ldr	r3, [r3, #8]
 800612c:	2b00      	cmp	r3, #0
 800612e:	d10e      	bne.n	800614e <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	2204      	movs	r2, #4
 8006134:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006138:	88fa      	ldrh	r2, [r7, #6]
 800613a:	683b      	ldr	r3, [r7, #0]
 800613c:	9300      	str	r3, [sp, #0]
 800613e:	4613      	mov	r3, r2
 8006140:	68ba      	ldr	r2, [r7, #8]
 8006142:	68b9      	ldr	r1, [r7, #8]
 8006144:	68f8      	ldr	r0, [r7, #12]
 8006146:	f000 f910 	bl	800636a <HAL_SPI_TransmitReceive>
 800614a:	4603      	mov	r3, r0
 800614c:	e109      	b.n	8006362 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006154:	2b01      	cmp	r3, #1
 8006156:	d101      	bne.n	800615c <HAL_SPI_Receive+0x52>
 8006158:	2302      	movs	r3, #2
 800615a:	e102      	b.n	8006362 <HAL_SPI_Receive+0x258>
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	2201      	movs	r2, #1
 8006160:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006164:	f7fc fb22 	bl	80027ac <HAL_GetTick>
 8006168:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006170:	b2db      	uxtb	r3, r3
 8006172:	2b01      	cmp	r3, #1
 8006174:	d002      	beq.n	800617c <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8006176:	2302      	movs	r3, #2
 8006178:	75fb      	strb	r3, [r7, #23]
    goto error;
 800617a:	e0e9      	b.n	8006350 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 800617c:	68bb      	ldr	r3, [r7, #8]
 800617e:	2b00      	cmp	r3, #0
 8006180:	d002      	beq.n	8006188 <HAL_SPI_Receive+0x7e>
 8006182:	88fb      	ldrh	r3, [r7, #6]
 8006184:	2b00      	cmp	r3, #0
 8006186:	d102      	bne.n	800618e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8006188:	2301      	movs	r3, #1
 800618a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800618c:	e0e0      	b.n	8006350 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	2204      	movs	r2, #4
 8006192:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	2200      	movs	r2, #0
 800619a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	68ba      	ldr	r2, [r7, #8]
 80061a0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	88fa      	ldrh	r2, [r7, #6]
 80061a6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	88fa      	ldrh	r2, [r7, #6]
 80061ae:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	2200      	movs	r2, #0
 80061b6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	2200      	movs	r2, #0
 80061bc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	2200      	movs	r2, #0
 80061c2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	2200      	movs	r2, #0
 80061c8:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	2200      	movs	r2, #0
 80061ce:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	68db      	ldr	r3, [r3, #12]
 80061d4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80061d8:	d908      	bls.n	80061ec <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	685a      	ldr	r2, [r3, #4]
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80061e8:	605a      	str	r2, [r3, #4]
 80061ea:	e007      	b.n	80061fc <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	685a      	ldr	r2, [r3, #4]
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80061fa:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	689b      	ldr	r3, [r3, #8]
 8006200:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006204:	d10f      	bne.n	8006226 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	681a      	ldr	r2, [r3, #0]
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006214:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	681a      	ldr	r2, [r3, #0]
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006224:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006230:	2b40      	cmp	r3, #64	; 0x40
 8006232:	d007      	beq.n	8006244 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	681a      	ldr	r2, [r3, #0]
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006242:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	68db      	ldr	r3, [r3, #12]
 8006248:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800624c:	d867      	bhi.n	800631e <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800624e:	e030      	b.n	80062b2 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	689b      	ldr	r3, [r3, #8]
 8006256:	f003 0301 	and.w	r3, r3, #1
 800625a:	2b01      	cmp	r3, #1
 800625c:	d117      	bne.n	800628e <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	f103 020c 	add.w	r2, r3, #12
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800626a:	7812      	ldrb	r2, [r2, #0]
 800626c:	b2d2      	uxtb	r2, r2
 800626e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006274:	1c5a      	adds	r2, r3, #1
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006280:	b29b      	uxth	r3, r3
 8006282:	3b01      	subs	r3, #1
 8006284:	b29a      	uxth	r2, r3
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800628c:	e011      	b.n	80062b2 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800628e:	f7fc fa8d 	bl	80027ac <HAL_GetTick>
 8006292:	4602      	mov	r2, r0
 8006294:	693b      	ldr	r3, [r7, #16]
 8006296:	1ad3      	subs	r3, r2, r3
 8006298:	683a      	ldr	r2, [r7, #0]
 800629a:	429a      	cmp	r2, r3
 800629c:	d803      	bhi.n	80062a6 <HAL_SPI_Receive+0x19c>
 800629e:	683b      	ldr	r3, [r7, #0]
 80062a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062a4:	d102      	bne.n	80062ac <HAL_SPI_Receive+0x1a2>
 80062a6:	683b      	ldr	r3, [r7, #0]
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d102      	bne.n	80062b2 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 80062ac:	2303      	movs	r3, #3
 80062ae:	75fb      	strb	r3, [r7, #23]
          goto error;
 80062b0:	e04e      	b.n	8006350 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80062b8:	b29b      	uxth	r3, r3
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d1c8      	bne.n	8006250 <HAL_SPI_Receive+0x146>
 80062be:	e034      	b.n	800632a <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	689b      	ldr	r3, [r3, #8]
 80062c6:	f003 0301 	and.w	r3, r3, #1
 80062ca:	2b01      	cmp	r3, #1
 80062cc:	d115      	bne.n	80062fa <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	68da      	ldr	r2, [r3, #12]
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062d8:	b292      	uxth	r2, r2
 80062da:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062e0:	1c9a      	adds	r2, r3, #2
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80062ec:	b29b      	uxth	r3, r3
 80062ee:	3b01      	subs	r3, #1
 80062f0:	b29a      	uxth	r2, r3
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80062f8:	e011      	b.n	800631e <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80062fa:	f7fc fa57 	bl	80027ac <HAL_GetTick>
 80062fe:	4602      	mov	r2, r0
 8006300:	693b      	ldr	r3, [r7, #16]
 8006302:	1ad3      	subs	r3, r2, r3
 8006304:	683a      	ldr	r2, [r7, #0]
 8006306:	429a      	cmp	r2, r3
 8006308:	d803      	bhi.n	8006312 <HAL_SPI_Receive+0x208>
 800630a:	683b      	ldr	r3, [r7, #0]
 800630c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006310:	d102      	bne.n	8006318 <HAL_SPI_Receive+0x20e>
 8006312:	683b      	ldr	r3, [r7, #0]
 8006314:	2b00      	cmp	r3, #0
 8006316:	d102      	bne.n	800631e <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8006318:	2303      	movs	r3, #3
 800631a:	75fb      	strb	r3, [r7, #23]
          goto error;
 800631c:	e018      	b.n	8006350 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006324:	b29b      	uxth	r3, r3
 8006326:	2b00      	cmp	r3, #0
 8006328:	d1ca      	bne.n	80062c0 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800632a:	693a      	ldr	r2, [r7, #16]
 800632c:	6839      	ldr	r1, [r7, #0]
 800632e:	68f8      	ldr	r0, [r7, #12]
 8006330:	f000 fffe 	bl	8007330 <SPI_EndRxTransaction>
 8006334:	4603      	mov	r3, r0
 8006336:	2b00      	cmp	r3, #0
 8006338:	d002      	beq.n	8006340 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	2220      	movs	r2, #32
 800633e:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006344:	2b00      	cmp	r3, #0
 8006346:	d002      	beq.n	800634e <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8006348:	2301      	movs	r3, #1
 800634a:	75fb      	strb	r3, [r7, #23]
 800634c:	e000      	b.n	8006350 <HAL_SPI_Receive+0x246>
  }

error :
 800634e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	2201      	movs	r2, #1
 8006354:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	2200      	movs	r2, #0
 800635c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006360:	7dfb      	ldrb	r3, [r7, #23]
}
 8006362:	4618      	mov	r0, r3
 8006364:	3718      	adds	r7, #24
 8006366:	46bd      	mov	sp, r7
 8006368:	bd80      	pop	{r7, pc}

0800636a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800636a:	b580      	push	{r7, lr}
 800636c:	b08a      	sub	sp, #40	; 0x28
 800636e:	af00      	add	r7, sp, #0
 8006370:	60f8      	str	r0, [r7, #12]
 8006372:	60b9      	str	r1, [r7, #8]
 8006374:	607a      	str	r2, [r7, #4]
 8006376:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006378:	2301      	movs	r3, #1
 800637a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800637c:	2300      	movs	r3, #0
 800637e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006388:	2b01      	cmp	r3, #1
 800638a:	d101      	bne.n	8006390 <HAL_SPI_TransmitReceive+0x26>
 800638c:	2302      	movs	r3, #2
 800638e:	e1fb      	b.n	8006788 <HAL_SPI_TransmitReceive+0x41e>
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	2201      	movs	r2, #1
 8006394:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006398:	f7fc fa08 	bl	80027ac <HAL_GetTick>
 800639c:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80063a4:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	685b      	ldr	r3, [r3, #4]
 80063aa:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80063ac:	887b      	ldrh	r3, [r7, #2]
 80063ae:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80063b0:	887b      	ldrh	r3, [r7, #2]
 80063b2:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80063b4:	7efb      	ldrb	r3, [r7, #27]
 80063b6:	2b01      	cmp	r3, #1
 80063b8:	d00e      	beq.n	80063d8 <HAL_SPI_TransmitReceive+0x6e>
 80063ba:	697b      	ldr	r3, [r7, #20]
 80063bc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80063c0:	d106      	bne.n	80063d0 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	689b      	ldr	r3, [r3, #8]
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d102      	bne.n	80063d0 <HAL_SPI_TransmitReceive+0x66>
 80063ca:	7efb      	ldrb	r3, [r7, #27]
 80063cc:	2b04      	cmp	r3, #4
 80063ce:	d003      	beq.n	80063d8 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80063d0:	2302      	movs	r3, #2
 80063d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80063d6:	e1cd      	b.n	8006774 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80063d8:	68bb      	ldr	r3, [r7, #8]
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d005      	beq.n	80063ea <HAL_SPI_TransmitReceive+0x80>
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d002      	beq.n	80063ea <HAL_SPI_TransmitReceive+0x80>
 80063e4:	887b      	ldrh	r3, [r7, #2]
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d103      	bne.n	80063f2 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80063ea:	2301      	movs	r3, #1
 80063ec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80063f0:	e1c0      	b.n	8006774 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80063f8:	b2db      	uxtb	r3, r3
 80063fa:	2b04      	cmp	r3, #4
 80063fc:	d003      	beq.n	8006406 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	2205      	movs	r2, #5
 8006402:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	2200      	movs	r2, #0
 800640a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	687a      	ldr	r2, [r7, #4]
 8006410:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	887a      	ldrh	r2, [r7, #2]
 8006416:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	887a      	ldrh	r2, [r7, #2]
 800641e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	68ba      	ldr	r2, [r7, #8]
 8006426:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	887a      	ldrh	r2, [r7, #2]
 800642c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	887a      	ldrh	r2, [r7, #2]
 8006432:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	2200      	movs	r2, #0
 8006438:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	2200      	movs	r2, #0
 800643e:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	68db      	ldr	r3, [r3, #12]
 8006444:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006448:	d802      	bhi.n	8006450 <HAL_SPI_TransmitReceive+0xe6>
 800644a:	8a3b      	ldrh	r3, [r7, #16]
 800644c:	2b01      	cmp	r3, #1
 800644e:	d908      	bls.n	8006462 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	685a      	ldr	r2, [r3, #4]
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800645e:	605a      	str	r2, [r3, #4]
 8006460:	e007      	b.n	8006472 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	685a      	ldr	r2, [r3, #4]
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006470:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800647c:	2b40      	cmp	r3, #64	; 0x40
 800647e:	d007      	beq.n	8006490 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	681a      	ldr	r2, [r3, #0]
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800648e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	68db      	ldr	r3, [r3, #12]
 8006494:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006498:	d97c      	bls.n	8006594 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	685b      	ldr	r3, [r3, #4]
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d002      	beq.n	80064a8 <HAL_SPI_TransmitReceive+0x13e>
 80064a2:	8a7b      	ldrh	r3, [r7, #18]
 80064a4:	2b01      	cmp	r3, #1
 80064a6:	d169      	bne.n	800657c <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064ac:	881a      	ldrh	r2, [r3, #0]
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064b8:	1c9a      	adds	r2, r3, #2
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80064c2:	b29b      	uxth	r3, r3
 80064c4:	3b01      	subs	r3, #1
 80064c6:	b29a      	uxth	r2, r3
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80064cc:	e056      	b.n	800657c <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	689b      	ldr	r3, [r3, #8]
 80064d4:	f003 0302 	and.w	r3, r3, #2
 80064d8:	2b02      	cmp	r3, #2
 80064da:	d11b      	bne.n	8006514 <HAL_SPI_TransmitReceive+0x1aa>
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80064e0:	b29b      	uxth	r3, r3
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d016      	beq.n	8006514 <HAL_SPI_TransmitReceive+0x1aa>
 80064e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064e8:	2b01      	cmp	r3, #1
 80064ea:	d113      	bne.n	8006514 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064f0:	881a      	ldrh	r2, [r3, #0]
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064fc:	1c9a      	adds	r2, r3, #2
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006506:	b29b      	uxth	r3, r3
 8006508:	3b01      	subs	r3, #1
 800650a:	b29a      	uxth	r2, r3
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006510:	2300      	movs	r3, #0
 8006512:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	689b      	ldr	r3, [r3, #8]
 800651a:	f003 0301 	and.w	r3, r3, #1
 800651e:	2b01      	cmp	r3, #1
 8006520:	d11c      	bne.n	800655c <HAL_SPI_TransmitReceive+0x1f2>
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006528:	b29b      	uxth	r3, r3
 800652a:	2b00      	cmp	r3, #0
 800652c:	d016      	beq.n	800655c <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	68da      	ldr	r2, [r3, #12]
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006538:	b292      	uxth	r2, r2
 800653a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006540:	1c9a      	adds	r2, r3, #2
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800654c:	b29b      	uxth	r3, r3
 800654e:	3b01      	subs	r3, #1
 8006550:	b29a      	uxth	r2, r3
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006558:	2301      	movs	r3, #1
 800655a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800655c:	f7fc f926 	bl	80027ac <HAL_GetTick>
 8006560:	4602      	mov	r2, r0
 8006562:	69fb      	ldr	r3, [r7, #28]
 8006564:	1ad3      	subs	r3, r2, r3
 8006566:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006568:	429a      	cmp	r2, r3
 800656a:	d807      	bhi.n	800657c <HAL_SPI_TransmitReceive+0x212>
 800656c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800656e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006572:	d003      	beq.n	800657c <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8006574:	2303      	movs	r3, #3
 8006576:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800657a:	e0fb      	b.n	8006774 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006580:	b29b      	uxth	r3, r3
 8006582:	2b00      	cmp	r3, #0
 8006584:	d1a3      	bne.n	80064ce <HAL_SPI_TransmitReceive+0x164>
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800658c:	b29b      	uxth	r3, r3
 800658e:	2b00      	cmp	r3, #0
 8006590:	d19d      	bne.n	80064ce <HAL_SPI_TransmitReceive+0x164>
 8006592:	e0df      	b.n	8006754 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	685b      	ldr	r3, [r3, #4]
 8006598:	2b00      	cmp	r3, #0
 800659a:	d003      	beq.n	80065a4 <HAL_SPI_TransmitReceive+0x23a>
 800659c:	8a7b      	ldrh	r3, [r7, #18]
 800659e:	2b01      	cmp	r3, #1
 80065a0:	f040 80cb 	bne.w	800673a <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80065a8:	b29b      	uxth	r3, r3
 80065aa:	2b01      	cmp	r3, #1
 80065ac:	d912      	bls.n	80065d4 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065b2:	881a      	ldrh	r2, [r3, #0]
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065be:	1c9a      	adds	r2, r3, #2
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80065c8:	b29b      	uxth	r3, r3
 80065ca:	3b02      	subs	r3, #2
 80065cc:	b29a      	uxth	r2, r3
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80065d2:	e0b2      	b.n	800673a <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	330c      	adds	r3, #12
 80065de:	7812      	ldrb	r2, [r2, #0]
 80065e0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065e6:	1c5a      	adds	r2, r3, #1
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80065f0:	b29b      	uxth	r3, r3
 80065f2:	3b01      	subs	r3, #1
 80065f4:	b29a      	uxth	r2, r3
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80065fa:	e09e      	b.n	800673a <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	689b      	ldr	r3, [r3, #8]
 8006602:	f003 0302 	and.w	r3, r3, #2
 8006606:	2b02      	cmp	r3, #2
 8006608:	d134      	bne.n	8006674 <HAL_SPI_TransmitReceive+0x30a>
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800660e:	b29b      	uxth	r3, r3
 8006610:	2b00      	cmp	r3, #0
 8006612:	d02f      	beq.n	8006674 <HAL_SPI_TransmitReceive+0x30a>
 8006614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006616:	2b01      	cmp	r3, #1
 8006618:	d12c      	bne.n	8006674 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800661e:	b29b      	uxth	r3, r3
 8006620:	2b01      	cmp	r3, #1
 8006622:	d912      	bls.n	800664a <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006628:	881a      	ldrh	r2, [r3, #0]
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006634:	1c9a      	adds	r2, r3, #2
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800663e:	b29b      	uxth	r3, r3
 8006640:	3b02      	subs	r3, #2
 8006642:	b29a      	uxth	r2, r3
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006648:	e012      	b.n	8006670 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	330c      	adds	r3, #12
 8006654:	7812      	ldrb	r2, [r2, #0]
 8006656:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800665c:	1c5a      	adds	r2, r3, #1
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006666:	b29b      	uxth	r3, r3
 8006668:	3b01      	subs	r3, #1
 800666a:	b29a      	uxth	r2, r3
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006670:	2300      	movs	r3, #0
 8006672:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	689b      	ldr	r3, [r3, #8]
 800667a:	f003 0301 	and.w	r3, r3, #1
 800667e:	2b01      	cmp	r3, #1
 8006680:	d148      	bne.n	8006714 <HAL_SPI_TransmitReceive+0x3aa>
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006688:	b29b      	uxth	r3, r3
 800668a:	2b00      	cmp	r3, #0
 800668c:	d042      	beq.n	8006714 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006694:	b29b      	uxth	r3, r3
 8006696:	2b01      	cmp	r3, #1
 8006698:	d923      	bls.n	80066e2 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	68da      	ldr	r2, [r3, #12]
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066a4:	b292      	uxth	r2, r2
 80066a6:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066ac:	1c9a      	adds	r2, r3, #2
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80066b8:	b29b      	uxth	r3, r3
 80066ba:	3b02      	subs	r3, #2
 80066bc:	b29a      	uxth	r2, r3
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80066ca:	b29b      	uxth	r3, r3
 80066cc:	2b01      	cmp	r3, #1
 80066ce:	d81f      	bhi.n	8006710 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	685a      	ldr	r2, [r3, #4]
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80066de:	605a      	str	r2, [r3, #4]
 80066e0:	e016      	b.n	8006710 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	f103 020c 	add.w	r2, r3, #12
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066ee:	7812      	ldrb	r2, [r2, #0]
 80066f0:	b2d2      	uxtb	r2, r2
 80066f2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066f8:	1c5a      	adds	r2, r3, #1
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006704:	b29b      	uxth	r3, r3
 8006706:	3b01      	subs	r3, #1
 8006708:	b29a      	uxth	r2, r3
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006710:	2301      	movs	r3, #1
 8006712:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006714:	f7fc f84a 	bl	80027ac <HAL_GetTick>
 8006718:	4602      	mov	r2, r0
 800671a:	69fb      	ldr	r3, [r7, #28]
 800671c:	1ad3      	subs	r3, r2, r3
 800671e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006720:	429a      	cmp	r2, r3
 8006722:	d803      	bhi.n	800672c <HAL_SPI_TransmitReceive+0x3c2>
 8006724:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006726:	f1b3 3fff 	cmp.w	r3, #4294967295
 800672a:	d102      	bne.n	8006732 <HAL_SPI_TransmitReceive+0x3c8>
 800672c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800672e:	2b00      	cmp	r3, #0
 8006730:	d103      	bne.n	800673a <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8006732:	2303      	movs	r3, #3
 8006734:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8006738:	e01c      	b.n	8006774 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800673e:	b29b      	uxth	r3, r3
 8006740:	2b00      	cmp	r3, #0
 8006742:	f47f af5b 	bne.w	80065fc <HAL_SPI_TransmitReceive+0x292>
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800674c:	b29b      	uxth	r3, r3
 800674e:	2b00      	cmp	r3, #0
 8006750:	f47f af54 	bne.w	80065fc <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006754:	69fa      	ldr	r2, [r7, #28]
 8006756:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006758:	68f8      	ldr	r0, [r7, #12]
 800675a:	f000 fe41 	bl	80073e0 <SPI_EndRxTxTransaction>
 800675e:	4603      	mov	r3, r0
 8006760:	2b00      	cmp	r3, #0
 8006762:	d006      	beq.n	8006772 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8006764:	2301      	movs	r3, #1
 8006766:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	2220      	movs	r2, #32
 800676e:	661a      	str	r2, [r3, #96]	; 0x60
 8006770:	e000      	b.n	8006774 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8006772:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	2201      	movs	r2, #1
 8006778:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	2200      	movs	r2, #0
 8006780:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006784:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8006788:	4618      	mov	r0, r3
 800678a:	3728      	adds	r7, #40	; 0x28
 800678c:	46bd      	mov	sp, r7
 800678e:	bd80      	pop	{r7, pc}

08006790 <HAL_SPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8006790:	b480      	push	{r7}
 8006792:	b087      	sub	sp, #28
 8006794:	af00      	add	r7, sp, #0
 8006796:	60f8      	str	r0, [r7, #12]
 8006798:	60b9      	str	r1, [r7, #8]
 800679a:	4613      	mov	r3, r2
 800679c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800679e:	2300      	movs	r3, #0
 80067a0:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80067a8:	2b01      	cmp	r3, #1
 80067aa:	d101      	bne.n	80067b0 <HAL_SPI_Transmit_IT+0x20>
 80067ac:	2302      	movs	r3, #2
 80067ae:	e072      	b.n	8006896 <HAL_SPI_Transmit_IT+0x106>
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	2201      	movs	r2, #1
 80067b4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if ((pData == NULL) || (Size == 0U))
 80067b8:	68bb      	ldr	r3, [r7, #8]
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d002      	beq.n	80067c4 <HAL_SPI_Transmit_IT+0x34>
 80067be:	88fb      	ldrh	r3, [r7, #6]
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d102      	bne.n	80067ca <HAL_SPI_Transmit_IT+0x3a>
  {
    errorcode = HAL_ERROR;
 80067c4:	2301      	movs	r3, #1
 80067c6:	75fb      	strb	r3, [r7, #23]
    goto error;
 80067c8:	e060      	b.n	800688c <HAL_SPI_Transmit_IT+0xfc>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80067d0:	b2db      	uxtb	r3, r3
 80067d2:	2b01      	cmp	r3, #1
 80067d4:	d002      	beq.n	80067dc <HAL_SPI_Transmit_IT+0x4c>
  {
    errorcode = HAL_BUSY;
 80067d6:	2302      	movs	r3, #2
 80067d8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80067da:	e057      	b.n	800688c <HAL_SPI_Transmit_IT+0xfc>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	2203      	movs	r2, #3
 80067e0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	2200      	movs	r2, #0
 80067e8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	68ba      	ldr	r2, [r7, #8]
 80067ee:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	88fa      	ldrh	r2, [r7, #6]
 80067f4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	88fa      	ldrh	r2, [r7, #6]
 80067fa:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	2200      	movs	r2, #0
 8006800:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	2200      	movs	r2, #0
 8006806:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	2200      	movs	r2, #0
 800680e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxISR       = NULL;
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	2200      	movs	r2, #0
 8006816:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	68db      	ldr	r3, [r3, #12]
 800681c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006820:	d903      	bls.n	800682a <HAL_SPI_Transmit_IT+0x9a>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	4a1f      	ldr	r2, [pc, #124]	; (80068a4 <HAL_SPI_Transmit_IT+0x114>)
 8006826:	651a      	str	r2, [r3, #80]	; 0x50
 8006828:	e002      	b.n	8006830 <HAL_SPI_Transmit_IT+0xa0>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	4a1e      	ldr	r2, [pc, #120]	; (80068a8 <HAL_SPI_Transmit_IT+0x118>)
 800682e:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	689b      	ldr	r3, [r3, #8]
 8006834:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006838:	d10f      	bne.n	800685a <HAL_SPI_Transmit_IT+0xca>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	681a      	ldr	r2, [r3, #0]
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006848:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	681a      	ldr	r2, [r3, #0]
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006858:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	685a      	ldr	r2, [r3, #4]
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
 8006868:	605a      	str	r2, [r3, #4]


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006874:	2b40      	cmp	r3, #64	; 0x40
 8006876:	d008      	beq.n	800688a <HAL_SPI_Transmit_IT+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	681a      	ldr	r2, [r3, #0]
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006886:	601a      	str	r2, [r3, #0]
 8006888:	e000      	b.n	800688c <HAL_SPI_Transmit_IT+0xfc>
  }

error :
 800688a:	bf00      	nop
  __HAL_UNLOCK(hspi);
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	2200      	movs	r2, #0
 8006890:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006894:	7dfb      	ldrb	r3, [r7, #23]
}
 8006896:	4618      	mov	r0, r3
 8006898:	371c      	adds	r7, #28
 800689a:	46bd      	mov	sp, r7
 800689c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a0:	4770      	bx	lr
 80068a2:	bf00      	nop
 80068a4:	080070b7 	.word	0x080070b7
 80068a8:	08007071 	.word	0x08007071

080068ac <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80068ac:	b580      	push	{r7, lr}
 80068ae:	b086      	sub	sp, #24
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	60f8      	str	r0, [r7, #12]
 80068b4:	60b9      	str	r1, [r7, #8]
 80068b6:	4613      	mov	r3, r2
 80068b8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80068ba:	2300      	movs	r3, #0
 80068bc:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	689b      	ldr	r3, [r3, #8]
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d110      	bne.n	80068e8 <HAL_SPI_Receive_IT+0x3c>
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	685b      	ldr	r3, [r3, #4]
 80068ca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80068ce:	d10b      	bne.n	80068e8 <HAL_SPI_Receive_IT+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	2204      	movs	r2, #4
 80068d4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 80068d8:	88fb      	ldrh	r3, [r7, #6]
 80068da:	68ba      	ldr	r2, [r7, #8]
 80068dc:	68b9      	ldr	r1, [r7, #8]
 80068de:	68f8      	ldr	r0, [r7, #12]
 80068e0:	f000 f894 	bl	8006a0c <HAL_SPI_TransmitReceive_IT>
 80068e4:	4603      	mov	r3, r0
 80068e6:	e089      	b.n	80069fc <HAL_SPI_Receive_IT+0x150>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80068ee:	2b01      	cmp	r3, #1
 80068f0:	d101      	bne.n	80068f6 <HAL_SPI_Receive_IT+0x4a>
 80068f2:	2302      	movs	r3, #2
 80068f4:	e082      	b.n	80069fc <HAL_SPI_Receive_IT+0x150>
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	2201      	movs	r2, #1
 80068fa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006904:	b2db      	uxtb	r3, r3
 8006906:	2b01      	cmp	r3, #1
 8006908:	d002      	beq.n	8006910 <HAL_SPI_Receive_IT+0x64>
  {
    errorcode = HAL_BUSY;
 800690a:	2302      	movs	r3, #2
 800690c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800690e:	e070      	b.n	80069f2 <HAL_SPI_Receive_IT+0x146>
  }

  if ((pData == NULL) || (Size == 0U))
 8006910:	68bb      	ldr	r3, [r7, #8]
 8006912:	2b00      	cmp	r3, #0
 8006914:	d002      	beq.n	800691c <HAL_SPI_Receive_IT+0x70>
 8006916:	88fb      	ldrh	r3, [r7, #6]
 8006918:	2b00      	cmp	r3, #0
 800691a:	d102      	bne.n	8006922 <HAL_SPI_Receive_IT+0x76>
  {
    errorcode = HAL_ERROR;
 800691c:	2301      	movs	r3, #1
 800691e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006920:	e067      	b.n	80069f2 <HAL_SPI_Receive_IT+0x146>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	2204      	movs	r2, #4
 8006926:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	2200      	movs	r2, #0
 800692e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	68ba      	ldr	r2, [r7, #8]
 8006934:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	88fa      	ldrh	r2, [r7, #6]
 800693a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	88fa      	ldrh	r2, [r7, #6]
 8006942:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	2200      	movs	r2, #0
 800694a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	2200      	movs	r2, #0
 8006950:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	2200      	movs	r2, #0
 8006956:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	2200      	movs	r2, #0
 800695c:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check the data size to adapt Rx threshold and the set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	68db      	ldr	r3, [r3, #12]
 8006962:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006966:	d90b      	bls.n	8006980 <HAL_SPI_Receive_IT+0xd4>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	685a      	ldr	r2, [r3, #4]
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006976:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_16BIT;
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	4a22      	ldr	r2, [pc, #136]	; (8006a04 <HAL_SPI_Receive_IT+0x158>)
 800697c:	64da      	str	r2, [r3, #76]	; 0x4c
 800697e:	e00a      	b.n	8006996 <HAL_SPI_Receive_IT+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	685a      	ldr	r2, [r3, #4]
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800698e:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_8BIT;
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	4a1d      	ldr	r2, [pc, #116]	; (8006a08 <HAL_SPI_Receive_IT+0x15c>)
 8006994:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	689b      	ldr	r3, [r3, #8]
 800699a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800699e:	d10f      	bne.n	80069c0 <HAL_SPI_Receive_IT+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	681a      	ldr	r2, [r3, #0]
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80069ae:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	681a      	ldr	r2, [r3, #0]
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80069be:	601a      	str	r2, [r3, #0]
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	685a      	ldr	r2, [r3, #4]
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 80069ce:	605a      	str	r2, [r3, #4]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069da:	2b40      	cmp	r3, #64	; 0x40
 80069dc:	d008      	beq.n	80069f0 <HAL_SPI_Receive_IT+0x144>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	681a      	ldr	r2, [r3, #0]
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80069ec:	601a      	str	r2, [r3, #0]
 80069ee:	e000      	b.n	80069f2 <HAL_SPI_Receive_IT+0x146>
  }

error :
 80069f0:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	2200      	movs	r2, #0
 80069f6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80069fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80069fc:	4618      	mov	r0, r3
 80069fe:	3718      	adds	r7, #24
 8006a00:	46bd      	mov	sp, r7
 8006a02:	bd80      	pop	{r7, pc}
 8006a04:	08007025 	.word	0x08007025
 8006a08:	08006fd5 	.word	0x08006fd5

08006a0c <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 8006a0c:	b480      	push	{r7}
 8006a0e:	b087      	sub	sp, #28
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	60f8      	str	r0, [r7, #12]
 8006a14:	60b9      	str	r1, [r7, #8]
 8006a16:	607a      	str	r2, [r7, #4]
 8006a18:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006a1a:	2300      	movs	r3, #0
 8006a1c:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006a24:	2b01      	cmp	r3, #1
 8006a26:	d101      	bne.n	8006a2c <HAL_SPI_TransmitReceive_IT+0x20>
 8006a28:	2302      	movs	r3, #2
 8006a2a:	e091      	b.n	8006b50 <HAL_SPI_TransmitReceive_IT+0x144>
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	2201      	movs	r2, #1
 8006a30:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006a3a:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	685b      	ldr	r3, [r3, #4]
 8006a40:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006a42:	7dbb      	ldrb	r3, [r7, #22]
 8006a44:	2b01      	cmp	r3, #1
 8006a46:	d00d      	beq.n	8006a64 <HAL_SPI_TransmitReceive_IT+0x58>
 8006a48:	693b      	ldr	r3, [r7, #16]
 8006a4a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006a4e:	d106      	bne.n	8006a5e <HAL_SPI_TransmitReceive_IT+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	689b      	ldr	r3, [r3, #8]
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d102      	bne.n	8006a5e <HAL_SPI_TransmitReceive_IT+0x52>
 8006a58:	7dbb      	ldrb	r3, [r7, #22]
 8006a5a:	2b04      	cmp	r3, #4
 8006a5c:	d002      	beq.n	8006a64 <HAL_SPI_TransmitReceive_IT+0x58>
  {
    errorcode = HAL_BUSY;
 8006a5e:	2302      	movs	r3, #2
 8006a60:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006a62:	e070      	b.n	8006b46 <HAL_SPI_TransmitReceive_IT+0x13a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006a64:	68bb      	ldr	r3, [r7, #8]
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d005      	beq.n	8006a76 <HAL_SPI_TransmitReceive_IT+0x6a>
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d002      	beq.n	8006a76 <HAL_SPI_TransmitReceive_IT+0x6a>
 8006a70:	887b      	ldrh	r3, [r7, #2]
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d102      	bne.n	8006a7c <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_ERROR;
 8006a76:	2301      	movs	r3, #1
 8006a78:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006a7a:	e064      	b.n	8006b46 <HAL_SPI_TransmitReceive_IT+0x13a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006a82:	b2db      	uxtb	r3, r3
 8006a84:	2b04      	cmp	r3, #4
 8006a86:	d003      	beq.n	8006a90 <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	2205      	movs	r2, #5
 8006a8c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	2200      	movs	r2, #0
 8006a94:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	68ba      	ldr	r2, [r7, #8]
 8006a9a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	887a      	ldrh	r2, [r7, #2]
 8006aa0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	887a      	ldrh	r2, [r7, #2]
 8006aa6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	687a      	ldr	r2, [r7, #4]
 8006aac:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	887a      	ldrh	r2, [r7, #2]
 8006ab2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	887a      	ldrh	r2, [r7, #2]
 8006aba:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	68db      	ldr	r3, [r3, #12]
 8006ac2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006ac6:	d906      	bls.n	8006ad6 <HAL_SPI_TransmitReceive_IT+0xca>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	4a24      	ldr	r2, [pc, #144]	; (8006b5c <HAL_SPI_TransmitReceive_IT+0x150>)
 8006acc:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	4a23      	ldr	r2, [pc, #140]	; (8006b60 <HAL_SPI_TransmitReceive_IT+0x154>)
 8006ad2:	651a      	str	r2, [r3, #80]	; 0x50
 8006ad4:	e005      	b.n	8006ae2 <HAL_SPI_TransmitReceive_IT+0xd6>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	4a22      	ldr	r2, [pc, #136]	; (8006b64 <HAL_SPI_TransmitReceive_IT+0x158>)
 8006ada:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	4a22      	ldr	r2, [pc, #136]	; (8006b68 <HAL_SPI_TransmitReceive_IT+0x15c>)
 8006ae0:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Check if packing mode is enabled and if there is more than 2 data to receive */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	68db      	ldr	r3, [r3, #12]
 8006ae6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006aea:	d802      	bhi.n	8006af2 <HAL_SPI_TransmitReceive_IT+0xe6>
 8006aec:	887b      	ldrh	r3, [r7, #2]
 8006aee:	2b01      	cmp	r3, #1
 8006af0:	d908      	bls.n	8006b04 <HAL_SPI_TransmitReceive_IT+0xf8>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	685a      	ldr	r2, [r3, #4]
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006b00:	605a      	str	r2, [r3, #4]
 8006b02:	e007      	b.n	8006b14 <HAL_SPI_TransmitReceive_IT+0x108>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	685a      	ldr	r2, [r3, #4]
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006b12:	605a      	str	r2, [r3, #4]
  }

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	685a      	ldr	r2, [r3, #4]
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 8006b22:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b2e:	2b40      	cmp	r3, #64	; 0x40
 8006b30:	d008      	beq.n	8006b44 <HAL_SPI_TransmitReceive_IT+0x138>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	681a      	ldr	r2, [r3, #0]
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006b40:	601a      	str	r2, [r3, #0]
 8006b42:	e000      	b.n	8006b46 <HAL_SPI_TransmitReceive_IT+0x13a>
  }

error :
 8006b44:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	2200      	movs	r2, #0
 8006b4a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006b4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b50:	4618      	mov	r0, r3
 8006b52:	371c      	adds	r7, #28
 8006b54:	46bd      	mov	sp, r7
 8006b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b5a:	4770      	bx	lr
 8006b5c:	08006f0f 	.word	0x08006f0f
 8006b60:	08006f75 	.word	0x08006f75
 8006b64:	08006dbf 	.word	0x08006dbf
 8006b68:	08006e7d 	.word	0x08006e7d

08006b6c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8006b6c:	b580      	push	{r7, lr}
 8006b6e:	b088      	sub	sp, #32
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	685b      	ldr	r3, [r3, #4]
 8006b7a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	689b      	ldr	r3, [r3, #8]
 8006b82:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006b84:	69bb      	ldr	r3, [r7, #24]
 8006b86:	099b      	lsrs	r3, r3, #6
 8006b88:	f003 0301 	and.w	r3, r3, #1
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d10f      	bne.n	8006bb0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006b90:	69bb      	ldr	r3, [r7, #24]
 8006b92:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d00a      	beq.n	8006bb0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006b9a:	69fb      	ldr	r3, [r7, #28]
 8006b9c:	099b      	lsrs	r3, r3, #6
 8006b9e:	f003 0301 	and.w	r3, r3, #1
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d004      	beq.n	8006bb0 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006baa:	6878      	ldr	r0, [r7, #4]
 8006bac:	4798      	blx	r3
    return;
 8006bae:	e0d7      	b.n	8006d60 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8006bb0:	69bb      	ldr	r3, [r7, #24]
 8006bb2:	085b      	lsrs	r3, r3, #1
 8006bb4:	f003 0301 	and.w	r3, r3, #1
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d00a      	beq.n	8006bd2 <HAL_SPI_IRQHandler+0x66>
 8006bbc:	69fb      	ldr	r3, [r7, #28]
 8006bbe:	09db      	lsrs	r3, r3, #7
 8006bc0:	f003 0301 	and.w	r3, r3, #1
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d004      	beq.n	8006bd2 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006bcc:	6878      	ldr	r0, [r7, #4]
 8006bce:	4798      	blx	r3
    return;
 8006bd0:	e0c6      	b.n	8006d60 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006bd2:	69bb      	ldr	r3, [r7, #24]
 8006bd4:	095b      	lsrs	r3, r3, #5
 8006bd6:	f003 0301 	and.w	r3, r3, #1
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d10c      	bne.n	8006bf8 <HAL_SPI_IRQHandler+0x8c>
 8006bde:	69bb      	ldr	r3, [r7, #24]
 8006be0:	099b      	lsrs	r3, r3, #6
 8006be2:	f003 0301 	and.w	r3, r3, #1
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d106      	bne.n	8006bf8 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8006bea:	69bb      	ldr	r3, [r7, #24]
 8006bec:	0a1b      	lsrs	r3, r3, #8
 8006bee:	f003 0301 	and.w	r3, r3, #1
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	f000 80b4 	beq.w	8006d60 <HAL_SPI_IRQHandler+0x1f4>
 8006bf8:	69fb      	ldr	r3, [r7, #28]
 8006bfa:	095b      	lsrs	r3, r3, #5
 8006bfc:	f003 0301 	and.w	r3, r3, #1
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	f000 80ad 	beq.w	8006d60 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006c06:	69bb      	ldr	r3, [r7, #24]
 8006c08:	099b      	lsrs	r3, r3, #6
 8006c0a:	f003 0301 	and.w	r3, r3, #1
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d023      	beq.n	8006c5a <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006c18:	b2db      	uxtb	r3, r3
 8006c1a:	2b03      	cmp	r3, #3
 8006c1c:	d011      	beq.n	8006c42 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c22:	f043 0204 	orr.w	r2, r3, #4
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006c2a:	2300      	movs	r3, #0
 8006c2c:	617b      	str	r3, [r7, #20]
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	68db      	ldr	r3, [r3, #12]
 8006c34:	617b      	str	r3, [r7, #20]
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	689b      	ldr	r3, [r3, #8]
 8006c3c:	617b      	str	r3, [r7, #20]
 8006c3e:	697b      	ldr	r3, [r7, #20]
 8006c40:	e00b      	b.n	8006c5a <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006c42:	2300      	movs	r3, #0
 8006c44:	613b      	str	r3, [r7, #16]
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	68db      	ldr	r3, [r3, #12]
 8006c4c:	613b      	str	r3, [r7, #16]
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	689b      	ldr	r3, [r3, #8]
 8006c54:	613b      	str	r3, [r7, #16]
 8006c56:	693b      	ldr	r3, [r7, #16]
        return;
 8006c58:	e082      	b.n	8006d60 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8006c5a:	69bb      	ldr	r3, [r7, #24]
 8006c5c:	095b      	lsrs	r3, r3, #5
 8006c5e:	f003 0301 	and.w	r3, r3, #1
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d014      	beq.n	8006c90 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c6a:	f043 0201 	orr.w	r2, r3, #1
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006c72:	2300      	movs	r3, #0
 8006c74:	60fb      	str	r3, [r7, #12]
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	689b      	ldr	r3, [r3, #8]
 8006c7c:	60fb      	str	r3, [r7, #12]
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	681a      	ldr	r2, [r3, #0]
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006c8c:	601a      	str	r2, [r3, #0]
 8006c8e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8006c90:	69bb      	ldr	r3, [r7, #24]
 8006c92:	0a1b      	lsrs	r3, r3, #8
 8006c94:	f003 0301 	and.w	r3, r3, #1
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d00c      	beq.n	8006cb6 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ca0:	f043 0208 	orr.w	r2, r3, #8
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006ca8:	2300      	movs	r3, #0
 8006caa:	60bb      	str	r3, [r7, #8]
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	689b      	ldr	r3, [r3, #8]
 8006cb2:	60bb      	str	r3, [r7, #8]
 8006cb4:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d04f      	beq.n	8006d5e <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	685a      	ldr	r2, [r3, #4]
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006ccc:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	2201      	movs	r2, #1
 8006cd2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8006cd6:	69fb      	ldr	r3, [r7, #28]
 8006cd8:	f003 0302 	and.w	r3, r3, #2
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d104      	bne.n	8006cea <HAL_SPI_IRQHandler+0x17e>
 8006ce0:	69fb      	ldr	r3, [r7, #28]
 8006ce2:	f003 0301 	and.w	r3, r3, #1
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d034      	beq.n	8006d54 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	685a      	ldr	r2, [r3, #4]
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	f022 0203 	bic.w	r2, r2, #3
 8006cf8:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d011      	beq.n	8006d26 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d06:	4a18      	ldr	r2, [pc, #96]	; (8006d68 <HAL_SPI_IRQHandler+0x1fc>)
 8006d08:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d0e:	4618      	mov	r0, r3
 8006d10:	f7fb ffda 	bl	8002cc8 <HAL_DMA_Abort_IT>
 8006d14:	4603      	mov	r3, r0
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d005      	beq.n	8006d26 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d1e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d016      	beq.n	8006d5c <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d32:	4a0d      	ldr	r2, [pc, #52]	; (8006d68 <HAL_SPI_IRQHandler+0x1fc>)
 8006d34:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d3a:	4618      	mov	r0, r3
 8006d3c:	f7fb ffc4 	bl	8002cc8 <HAL_DMA_Abort_IT>
 8006d40:	4603      	mov	r3, r0
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d00a      	beq.n	8006d5c <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d4a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8006d52:	e003      	b.n	8006d5c <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8006d54:	6878      	ldr	r0, [r7, #4]
 8006d56:	f000 f813 	bl	8006d80 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8006d5a:	e000      	b.n	8006d5e <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8006d5c:	bf00      	nop
    return;
 8006d5e:	bf00      	nop
  }
}
 8006d60:	3720      	adds	r7, #32
 8006d62:	46bd      	mov	sp, r7
 8006d64:	bd80      	pop	{r7, pc}
 8006d66:	bf00      	nop
 8006d68:	08006d95 	.word	0x08006d95

08006d6c <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006d6c:	b480      	push	{r7}
 8006d6e:	b083      	sub	sp, #12
 8006d70:	af00      	add	r7, sp, #0
 8006d72:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8006d74:	bf00      	nop
 8006d76:	370c      	adds	r7, #12
 8006d78:	46bd      	mov	sp, r7
 8006d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d7e:	4770      	bx	lr

08006d80 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8006d80:	b480      	push	{r7}
 8006d82:	b083      	sub	sp, #12
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8006d88:	bf00      	nop
 8006d8a:	370c      	adds	r7, #12
 8006d8c:	46bd      	mov	sp, r7
 8006d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d92:	4770      	bx	lr

08006d94 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006d94:	b580      	push	{r7, lr}
 8006d96:	b084      	sub	sp, #16
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006da0:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	2200      	movs	r2, #0
 8006da6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	2200      	movs	r2, #0
 8006dae:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8006db0:	68f8      	ldr	r0, [r7, #12]
 8006db2:	f7ff ffe5 	bl	8006d80 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006db6:	bf00      	nop
 8006db8:	3710      	adds	r7, #16
 8006dba:	46bd      	mov	sp, r7
 8006dbc:	bd80      	pop	{r7, pc}

08006dbe <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8006dbe:	b580      	push	{r7, lr}
 8006dc0:	b082      	sub	sp, #8
 8006dc2:	af00      	add	r7, sp, #0
 8006dc4:	6078      	str	r0, [r7, #4]
  /* Receive data in packing mode */
  if (hspi->RxXferCount > 1U)
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006dcc:	b29b      	uxth	r3, r3
 8006dce:	2b01      	cmp	r3, #1
 8006dd0:	d923      	bls.n	8006e1a <SPI_2linesRxISR_8BIT+0x5c>
  {
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	68da      	ldr	r2, [r3, #12]
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ddc:	b292      	uxth	r2, r2
 8006dde:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006de4:	1c9a      	adds	r2, r3, #2
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount -= 2U;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006df0:	b29b      	uxth	r3, r3
 8006df2:	3b02      	subs	r3, #2
 8006df4:	b29a      	uxth	r2, r3
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    if (hspi->RxXferCount == 1U)
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006e02:	b29b      	uxth	r3, r3
 8006e04:	2b01      	cmp	r3, #1
 8006e06:	d11f      	bne.n	8006e48 <SPI_2linesRxISR_8BIT+0x8a>
    {
      /* Set RX Fifo threshold according the reception data length: 8bit */
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	685a      	ldr	r2, [r3, #4]
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006e16:	605a      	str	r2, [r3, #4]
 8006e18:	e016      	b.n	8006e48 <SPI_2linesRxISR_8BIT+0x8a>
    }
  }
  /* Receive data in 8 Bit mode */
  else
  {
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	f103 020c 	add.w	r2, r3, #12
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e26:	7812      	ldrb	r2, [r2, #0]
 8006e28:	b2d2      	uxtb	r2, r2
 8006e2a:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e30:	1c5a      	adds	r2, r3, #1
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount--;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006e3c:	b29b      	uxth	r3, r3
 8006e3e:	3b01      	subs	r3, #1
 8006e40:	b29a      	uxth	r2, r3
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  }

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006e4e:	b29b      	uxth	r3, r3
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d10f      	bne.n	8006e74 <SPI_2linesRxISR_8BIT+0xb6>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	685a      	ldr	r2, [r3, #4]
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006e62:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006e68:	b29b      	uxth	r3, r3
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d102      	bne.n	8006e74 <SPI_2linesRxISR_8BIT+0xb6>
    {
      SPI_CloseRxTx_ISR(hspi);
 8006e6e:	6878      	ldr	r0, [r7, #4]
 8006e70:	f000 fafc 	bl	800746c <SPI_CloseRxTx_ISR>
    }
  }
}
 8006e74:	bf00      	nop
 8006e76:	3708      	adds	r7, #8
 8006e78:	46bd      	mov	sp, r7
 8006e7a:	bd80      	pop	{r7, pc}

08006e7c <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8006e7c:	b580      	push	{r7, lr}
 8006e7e:	b082      	sub	sp, #8
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	6078      	str	r0, [r7, #4]
  /* Transmit data in packing Bit mode */
  if (hspi->TxXferCount >= 2U)
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006e88:	b29b      	uxth	r3, r3
 8006e8a:	2b01      	cmp	r3, #1
 8006e8c:	d912      	bls.n	8006eb4 <SPI_2linesTxISR_8BIT+0x38>
  {
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e92:	881a      	ldrh	r2, [r3, #0]
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e9e:	1c9a      	adds	r2, r3, #2
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount -= 2U;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ea8:	b29b      	uxth	r3, r3
 8006eaa:	3b02      	subs	r3, #2
 8006eac:	b29a      	uxth	r2, r3
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006eb2:	e012      	b.n	8006eda <SPI_2linesTxISR_8BIT+0x5e>
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	330c      	adds	r3, #12
 8006ebe:	7812      	ldrb	r2, [r2, #0]
 8006ec0:	701a      	strb	r2, [r3, #0]
    hspi->pTxBuffPtr++;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ec6:	1c5a      	adds	r2, r3, #1
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount--;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ed0:	b29b      	uxth	r3, r3
 8006ed2:	3b01      	subs	r3, #1
 8006ed4:	b29a      	uxth	r2, r3
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	87da      	strh	r2, [r3, #62]	; 0x3e
  }

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ede:	b29b      	uxth	r3, r3
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d110      	bne.n	8006f06 <SPI_2linesTxISR_8BIT+0x8a>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	685a      	ldr	r2, [r3, #4]
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006ef2:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006efa:	b29b      	uxth	r3, r3
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d102      	bne.n	8006f06 <SPI_2linesTxISR_8BIT+0x8a>
    {
      SPI_CloseRxTx_ISR(hspi);
 8006f00:	6878      	ldr	r0, [r7, #4]
 8006f02:	f000 fab3 	bl	800746c <SPI_CloseRxTx_ISR>
    }
  }
}
 8006f06:	bf00      	nop
 8006f08:	3708      	adds	r7, #8
 8006f0a:	46bd      	mov	sp, r7
 8006f0c:	bd80      	pop	{r7, pc}

08006f0e <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8006f0e:	b580      	push	{r7, lr}
 8006f10:	b082      	sub	sp, #8
 8006f12:	af00      	add	r7, sp, #0
 8006f14:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	68da      	ldr	r2, [r3, #12]
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f20:	b292      	uxth	r2, r2
 8006f22:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f28:	1c9a      	adds	r2, r3, #2
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006f34:	b29b      	uxth	r3, r3
 8006f36:	3b01      	subs	r3, #1
 8006f38:	b29a      	uxth	r2, r3
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  if (hspi->RxXferCount == 0U)
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006f46:	b29b      	uxth	r3, r3
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d10f      	bne.n	8006f6c <SPI_2linesRxISR_16BIT+0x5e>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	685a      	ldr	r2, [r3, #4]
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006f5a:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006f60:	b29b      	uxth	r3, r3
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d102      	bne.n	8006f6c <SPI_2linesRxISR_16BIT+0x5e>
    {
      SPI_CloseRxTx_ISR(hspi);
 8006f66:	6878      	ldr	r0, [r7, #4]
 8006f68:	f000 fa80 	bl	800746c <SPI_CloseRxTx_ISR>
    }
  }
}
 8006f6c:	bf00      	nop
 8006f6e:	3708      	adds	r7, #8
 8006f70:	46bd      	mov	sp, r7
 8006f72:	bd80      	pop	{r7, pc}

08006f74 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8006f74:	b580      	push	{r7, lr}
 8006f76:	b082      	sub	sp, #8
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f80:	881a      	ldrh	r2, [r3, #0]
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f8c:	1c9a      	adds	r2, r3, #2
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006f96:	b29b      	uxth	r3, r3
 8006f98:	3b01      	subs	r3, #1
 8006f9a:	b29a      	uxth	r2, r3
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006fa4:	b29b      	uxth	r3, r3
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d110      	bne.n	8006fcc <SPI_2linesTxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	685a      	ldr	r2, [r3, #4]
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006fb8:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006fc0:	b29b      	uxth	r3, r3
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d102      	bne.n	8006fcc <SPI_2linesTxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 8006fc6:	6878      	ldr	r0, [r7, #4]
 8006fc8:	f000 fa50 	bl	800746c <SPI_CloseRxTx_ISR>
    }
  }
}
 8006fcc:	bf00      	nop
 8006fce:	3708      	adds	r7, #8
 8006fd0:	46bd      	mov	sp, r7
 8006fd2:	bd80      	pop	{r7, pc}

08006fd4 <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8006fd4:	b580      	push	{r7, lr}
 8006fd6:	b082      	sub	sp, #8
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	f103 020c 	add.w	r2, r3, #12
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fe8:	7812      	ldrb	r2, [r2, #0]
 8006fea:	b2d2      	uxtb	r2, r2
 8006fec:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ff2:	1c5a      	adds	r2, r3, #1
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006ffe:	b29b      	uxth	r3, r3
 8007000:	3b01      	subs	r3, #1
 8007002:	b29a      	uxth	r2, r3
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007010:	b29b      	uxth	r3, r3
 8007012:	2b00      	cmp	r3, #0
 8007014:	d102      	bne.n	800701c <SPI_RxISR_8BIT+0x48>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8007016:	6878      	ldr	r0, [r7, #4]
 8007018:	f000 fa6a 	bl	80074f0 <SPI_CloseRx_ISR>
  }
}
 800701c:	bf00      	nop
 800701e:	3708      	adds	r7, #8
 8007020:	46bd      	mov	sp, r7
 8007022:	bd80      	pop	{r7, pc}

08007024 <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8007024:	b580      	push	{r7, lr}
 8007026:	b082      	sub	sp, #8
 8007028:	af00      	add	r7, sp, #0
 800702a:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	68da      	ldr	r2, [r3, #12]
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007036:	b292      	uxth	r2, r2
 8007038:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800703e:	1c9a      	adds	r2, r3, #2
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800704a:	b29b      	uxth	r3, r3
 800704c:	3b01      	subs	r3, #1
 800704e:	b29a      	uxth	r2, r3
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800705c:	b29b      	uxth	r3, r3
 800705e:	2b00      	cmp	r3, #0
 8007060:	d102      	bne.n	8007068 <SPI_RxISR_16BIT+0x44>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8007062:	6878      	ldr	r0, [r7, #4]
 8007064:	f000 fa44 	bl	80074f0 <SPI_CloseRx_ISR>
  }
}
 8007068:	bf00      	nop
 800706a:	3708      	adds	r7, #8
 800706c:	46bd      	mov	sp, r7
 800706e:	bd80      	pop	{r7, pc}

08007070 <SPI_TxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8007070:	b580      	push	{r7, lr}
 8007072:	b082      	sub	sp, #8
 8007074:	af00      	add	r7, sp, #0
 8007076:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	330c      	adds	r3, #12
 8007082:	7812      	ldrb	r2, [r2, #0]
 8007084:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800708a:	1c5a      	adds	r2, r3, #1
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007094:	b29b      	uxth	r3, r3
 8007096:	3b01      	subs	r3, #1
 8007098:	b29a      	uxth	r2, r3
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->TxXferCount == 0U)
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80070a2:	b29b      	uxth	r3, r3
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d102      	bne.n	80070ae <SPI_TxISR_8BIT+0x3e>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 80070a8:	6878      	ldr	r0, [r7, #4]
 80070aa:	f000 fa51 	bl	8007550 <SPI_CloseTx_ISR>
  }
}
 80070ae:	bf00      	nop
 80070b0:	3708      	adds	r7, #8
 80070b2:	46bd      	mov	sp, r7
 80070b4:	bd80      	pop	{r7, pc}

080070b6 <SPI_TxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80070b6:	b580      	push	{r7, lr}
 80070b8:	b082      	sub	sp, #8
 80070ba:	af00      	add	r7, sp, #0
 80070bc:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070c2:	881a      	ldrh	r2, [r3, #0]
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070ce:	1c9a      	adds	r2, r3, #2
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80070d8:	b29b      	uxth	r3, r3
 80070da:	3b01      	subs	r3, #1
 80070dc:	b29a      	uxth	r2, r3
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->TxXferCount == 0U)
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80070e6:	b29b      	uxth	r3, r3
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d102      	bne.n	80070f2 <SPI_TxISR_16BIT+0x3c>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 80070ec:	6878      	ldr	r0, [r7, #4]
 80070ee:	f000 fa2f 	bl	8007550 <SPI_CloseTx_ISR>
  }
}
 80070f2:	bf00      	nop
 80070f4:	3708      	adds	r7, #8
 80070f6:	46bd      	mov	sp, r7
 80070f8:	bd80      	pop	{r7, pc}
	...

080070fc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80070fc:	b580      	push	{r7, lr}
 80070fe:	b088      	sub	sp, #32
 8007100:	af00      	add	r7, sp, #0
 8007102:	60f8      	str	r0, [r7, #12]
 8007104:	60b9      	str	r1, [r7, #8]
 8007106:	603b      	str	r3, [r7, #0]
 8007108:	4613      	mov	r3, r2
 800710a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800710c:	f7fb fb4e 	bl	80027ac <HAL_GetTick>
 8007110:	4602      	mov	r2, r0
 8007112:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007114:	1a9b      	subs	r3, r3, r2
 8007116:	683a      	ldr	r2, [r7, #0]
 8007118:	4413      	add	r3, r2
 800711a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800711c:	f7fb fb46 	bl	80027ac <HAL_GetTick>
 8007120:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007122:	4b39      	ldr	r3, [pc, #228]	; (8007208 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	015b      	lsls	r3, r3, #5
 8007128:	0d1b      	lsrs	r3, r3, #20
 800712a:	69fa      	ldr	r2, [r7, #28]
 800712c:	fb02 f303 	mul.w	r3, r2, r3
 8007130:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007132:	e054      	b.n	80071de <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007134:	683b      	ldr	r3, [r7, #0]
 8007136:	f1b3 3fff 	cmp.w	r3, #4294967295
 800713a:	d050      	beq.n	80071de <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800713c:	f7fb fb36 	bl	80027ac <HAL_GetTick>
 8007140:	4602      	mov	r2, r0
 8007142:	69bb      	ldr	r3, [r7, #24]
 8007144:	1ad3      	subs	r3, r2, r3
 8007146:	69fa      	ldr	r2, [r7, #28]
 8007148:	429a      	cmp	r2, r3
 800714a:	d902      	bls.n	8007152 <SPI_WaitFlagStateUntilTimeout+0x56>
 800714c:	69fb      	ldr	r3, [r7, #28]
 800714e:	2b00      	cmp	r3, #0
 8007150:	d13d      	bne.n	80071ce <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	685a      	ldr	r2, [r3, #4]
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007160:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	685b      	ldr	r3, [r3, #4]
 8007166:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800716a:	d111      	bne.n	8007190 <SPI_WaitFlagStateUntilTimeout+0x94>
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	689b      	ldr	r3, [r3, #8]
 8007170:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007174:	d004      	beq.n	8007180 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	689b      	ldr	r3, [r3, #8]
 800717a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800717e:	d107      	bne.n	8007190 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	681a      	ldr	r2, [r3, #0]
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800718e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007194:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007198:	d10f      	bne.n	80071ba <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	681a      	ldr	r2, [r3, #0]
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80071a8:	601a      	str	r2, [r3, #0]
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	681a      	ldr	r2, [r3, #0]
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80071b8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	2201      	movs	r2, #1
 80071be:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	2200      	movs	r2, #0
 80071c6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80071ca:	2303      	movs	r3, #3
 80071cc:	e017      	b.n	80071fe <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80071ce:	697b      	ldr	r3, [r7, #20]
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d101      	bne.n	80071d8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80071d4:	2300      	movs	r3, #0
 80071d6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80071d8:	697b      	ldr	r3, [r7, #20]
 80071da:	3b01      	subs	r3, #1
 80071dc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	689a      	ldr	r2, [r3, #8]
 80071e4:	68bb      	ldr	r3, [r7, #8]
 80071e6:	4013      	ands	r3, r2
 80071e8:	68ba      	ldr	r2, [r7, #8]
 80071ea:	429a      	cmp	r2, r3
 80071ec:	bf0c      	ite	eq
 80071ee:	2301      	moveq	r3, #1
 80071f0:	2300      	movne	r3, #0
 80071f2:	b2db      	uxtb	r3, r3
 80071f4:	461a      	mov	r2, r3
 80071f6:	79fb      	ldrb	r3, [r7, #7]
 80071f8:	429a      	cmp	r2, r3
 80071fa:	d19b      	bne.n	8007134 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80071fc:	2300      	movs	r3, #0
}
 80071fe:	4618      	mov	r0, r3
 8007200:	3720      	adds	r7, #32
 8007202:	46bd      	mov	sp, r7
 8007204:	bd80      	pop	{r7, pc}
 8007206:	bf00      	nop
 8007208:	20000008 	.word	0x20000008

0800720c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800720c:	b580      	push	{r7, lr}
 800720e:	b088      	sub	sp, #32
 8007210:	af00      	add	r7, sp, #0
 8007212:	60f8      	str	r0, [r7, #12]
 8007214:	60b9      	str	r1, [r7, #8]
 8007216:	607a      	str	r2, [r7, #4]
 8007218:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800721a:	f7fb fac7 	bl	80027ac <HAL_GetTick>
 800721e:	4602      	mov	r2, r0
 8007220:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007222:	1a9b      	subs	r3, r3, r2
 8007224:	683a      	ldr	r2, [r7, #0]
 8007226:	4413      	add	r3, r2
 8007228:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800722a:	f7fb fabf 	bl	80027ac <HAL_GetTick>
 800722e:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8007230:	4b3e      	ldr	r3, [pc, #248]	; (800732c <SPI_WaitFifoStateUntilTimeout+0x120>)
 8007232:	681a      	ldr	r2, [r3, #0]
 8007234:	4613      	mov	r3, r2
 8007236:	009b      	lsls	r3, r3, #2
 8007238:	4413      	add	r3, r2
 800723a:	00da      	lsls	r2, r3, #3
 800723c:	1ad3      	subs	r3, r2, r3
 800723e:	0d1b      	lsrs	r3, r3, #20
 8007240:	69fa      	ldr	r2, [r7, #28]
 8007242:	fb02 f303 	mul.w	r3, r2, r3
 8007246:	613b      	str	r3, [r7, #16]

  while ((hspi->Instance->SR & Fifo) != State)
 8007248:	e062      	b.n	8007310 <SPI_WaitFifoStateUntilTimeout+0x104>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800724a:	68bb      	ldr	r3, [r7, #8]
 800724c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8007250:	d109      	bne.n	8007266 <SPI_WaitFifoStateUntilTimeout+0x5a>
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	2b00      	cmp	r3, #0
 8007256:	d106      	bne.n	8007266 <SPI_WaitFifoStateUntilTimeout+0x5a>
    {
      /* Flush Data Register by a blank read */
      tmpreg = READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	330c      	adds	r3, #12
 800725e:	781b      	ldrb	r3, [r3, #0]
 8007260:	b2db      	uxtb	r3, r3
 8007262:	617b      	str	r3, [r7, #20]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 8007264:	697b      	ldr	r3, [r7, #20]
    }

    if (Timeout != HAL_MAX_DELAY)
 8007266:	683b      	ldr	r3, [r7, #0]
 8007268:	f1b3 3fff 	cmp.w	r3, #4294967295
 800726c:	d050      	beq.n	8007310 <SPI_WaitFifoStateUntilTimeout+0x104>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800726e:	f7fb fa9d 	bl	80027ac <HAL_GetTick>
 8007272:	4602      	mov	r2, r0
 8007274:	69bb      	ldr	r3, [r7, #24]
 8007276:	1ad3      	subs	r3, r2, r3
 8007278:	69fa      	ldr	r2, [r7, #28]
 800727a:	429a      	cmp	r2, r3
 800727c:	d902      	bls.n	8007284 <SPI_WaitFifoStateUntilTimeout+0x78>
 800727e:	69fb      	ldr	r3, [r7, #28]
 8007280:	2b00      	cmp	r3, #0
 8007282:	d13d      	bne.n	8007300 <SPI_WaitFifoStateUntilTimeout+0xf4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	685a      	ldr	r2, [r3, #4]
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007292:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	685b      	ldr	r3, [r3, #4]
 8007298:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800729c:	d111      	bne.n	80072c2 <SPI_WaitFifoStateUntilTimeout+0xb6>
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	689b      	ldr	r3, [r3, #8]
 80072a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80072a6:	d004      	beq.n	80072b2 <SPI_WaitFifoStateUntilTimeout+0xa6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	689b      	ldr	r3, [r3, #8]
 80072ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80072b0:	d107      	bne.n	80072c2 <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	681a      	ldr	r2, [r3, #0]
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80072c0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80072ca:	d10f      	bne.n	80072ec <SPI_WaitFifoStateUntilTimeout+0xe0>
        {
          SPI_RESET_CRC(hspi);
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	681a      	ldr	r2, [r3, #0]
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80072da:	601a      	str	r2, [r3, #0]
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	681a      	ldr	r2, [r3, #0]
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80072ea:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	2201      	movs	r2, #1
 80072f0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	2200      	movs	r2, #0
 80072f8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80072fc:	2303      	movs	r3, #3
 80072fe:	e010      	b.n	8007322 <SPI_WaitFifoStateUntilTimeout+0x116>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8007300:	693b      	ldr	r3, [r7, #16]
 8007302:	2b00      	cmp	r3, #0
 8007304:	d101      	bne.n	800730a <SPI_WaitFifoStateUntilTimeout+0xfe>
      {
        tmp_timeout = 0U;
 8007306:	2300      	movs	r3, #0
 8007308:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 800730a:	693b      	ldr	r3, [r7, #16]
 800730c:	3b01      	subs	r3, #1
 800730e:	613b      	str	r3, [r7, #16]
  while ((hspi->Instance->SR & Fifo) != State)
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	689a      	ldr	r2, [r3, #8]
 8007316:	68bb      	ldr	r3, [r7, #8]
 8007318:	4013      	ands	r3, r2
 800731a:	687a      	ldr	r2, [r7, #4]
 800731c:	429a      	cmp	r2, r3
 800731e:	d194      	bne.n	800724a <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 8007320:	2300      	movs	r3, #0
}
 8007322:	4618      	mov	r0, r3
 8007324:	3720      	adds	r7, #32
 8007326:	46bd      	mov	sp, r7
 8007328:	bd80      	pop	{r7, pc}
 800732a:	bf00      	nop
 800732c:	20000008 	.word	0x20000008

08007330 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007330:	b580      	push	{r7, lr}
 8007332:	b086      	sub	sp, #24
 8007334:	af02      	add	r7, sp, #8
 8007336:	60f8      	str	r0, [r7, #12]
 8007338:	60b9      	str	r1, [r7, #8]
 800733a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	685b      	ldr	r3, [r3, #4]
 8007340:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007344:	d111      	bne.n	800736a <SPI_EndRxTransaction+0x3a>
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	689b      	ldr	r3, [r3, #8]
 800734a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800734e:	d004      	beq.n	800735a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	689b      	ldr	r3, [r3, #8]
 8007354:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007358:	d107      	bne.n	800736a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	681a      	ldr	r2, [r3, #0]
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007368:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	9300      	str	r3, [sp, #0]
 800736e:	68bb      	ldr	r3, [r7, #8]
 8007370:	2200      	movs	r2, #0
 8007372:	2180      	movs	r1, #128	; 0x80
 8007374:	68f8      	ldr	r0, [r7, #12]
 8007376:	f7ff fec1 	bl	80070fc <SPI_WaitFlagStateUntilTimeout>
 800737a:	4603      	mov	r3, r0
 800737c:	2b00      	cmp	r3, #0
 800737e:	d007      	beq.n	8007390 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007384:	f043 0220 	orr.w	r2, r3, #32
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800738c:	2303      	movs	r3, #3
 800738e:	e023      	b.n	80073d8 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	685b      	ldr	r3, [r3, #4]
 8007394:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007398:	d11d      	bne.n	80073d6 <SPI_EndRxTransaction+0xa6>
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	689b      	ldr	r3, [r3, #8]
 800739e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80073a2:	d004      	beq.n	80073ae <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	689b      	ldr	r3, [r3, #8]
 80073a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80073ac:	d113      	bne.n	80073d6 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	9300      	str	r3, [sp, #0]
 80073b2:	68bb      	ldr	r3, [r7, #8]
 80073b4:	2200      	movs	r2, #0
 80073b6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80073ba:	68f8      	ldr	r0, [r7, #12]
 80073bc:	f7ff ff26 	bl	800720c <SPI_WaitFifoStateUntilTimeout>
 80073c0:	4603      	mov	r3, r0
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d007      	beq.n	80073d6 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80073ca:	f043 0220 	orr.w	r2, r3, #32
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80073d2:	2303      	movs	r3, #3
 80073d4:	e000      	b.n	80073d8 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 80073d6:	2300      	movs	r3, #0
}
 80073d8:	4618      	mov	r0, r3
 80073da:	3710      	adds	r7, #16
 80073dc:	46bd      	mov	sp, r7
 80073de:	bd80      	pop	{r7, pc}

080073e0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80073e0:	b580      	push	{r7, lr}
 80073e2:	b086      	sub	sp, #24
 80073e4:	af02      	add	r7, sp, #8
 80073e6:	60f8      	str	r0, [r7, #12]
 80073e8:	60b9      	str	r1, [r7, #8]
 80073ea:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	9300      	str	r3, [sp, #0]
 80073f0:	68bb      	ldr	r3, [r7, #8]
 80073f2:	2200      	movs	r2, #0
 80073f4:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80073f8:	68f8      	ldr	r0, [r7, #12]
 80073fa:	f7ff ff07 	bl	800720c <SPI_WaitFifoStateUntilTimeout>
 80073fe:	4603      	mov	r3, r0
 8007400:	2b00      	cmp	r3, #0
 8007402:	d007      	beq.n	8007414 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007408:	f043 0220 	orr.w	r2, r3, #32
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007410:	2303      	movs	r3, #3
 8007412:	e027      	b.n	8007464 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	9300      	str	r3, [sp, #0]
 8007418:	68bb      	ldr	r3, [r7, #8]
 800741a:	2200      	movs	r2, #0
 800741c:	2180      	movs	r1, #128	; 0x80
 800741e:	68f8      	ldr	r0, [r7, #12]
 8007420:	f7ff fe6c 	bl	80070fc <SPI_WaitFlagStateUntilTimeout>
 8007424:	4603      	mov	r3, r0
 8007426:	2b00      	cmp	r3, #0
 8007428:	d007      	beq.n	800743a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800742e:	f043 0220 	orr.w	r2, r3, #32
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007436:	2303      	movs	r3, #3
 8007438:	e014      	b.n	8007464 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	9300      	str	r3, [sp, #0]
 800743e:	68bb      	ldr	r3, [r7, #8]
 8007440:	2200      	movs	r2, #0
 8007442:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8007446:	68f8      	ldr	r0, [r7, #12]
 8007448:	f7ff fee0 	bl	800720c <SPI_WaitFifoStateUntilTimeout>
 800744c:	4603      	mov	r3, r0
 800744e:	2b00      	cmp	r3, #0
 8007450:	d007      	beq.n	8007462 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007456:	f043 0220 	orr.w	r2, r3, #32
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800745e:	2303      	movs	r3, #3
 8007460:	e000      	b.n	8007464 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8007462:	2300      	movs	r3, #0
}
 8007464:	4618      	mov	r0, r3
 8007466:	3710      	adds	r7, #16
 8007468:	46bd      	mov	sp, r7
 800746a:	bd80      	pop	{r7, pc}

0800746c <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 800746c:	b580      	push	{r7, lr}
 800746e:	b084      	sub	sp, #16
 8007470:	af00      	add	r7, sp, #0
 8007472:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007474:	f7fb f99a 	bl	80027ac <HAL_GetTick>
 8007478:	60f8      	str	r0, [r7, #12]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	685a      	ldr	r2, [r3, #4]
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	f022 0220 	bic.w	r2, r2, #32
 8007488:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800748a:	68fa      	ldr	r2, [r7, #12]
 800748c:	2164      	movs	r1, #100	; 0x64
 800748e:	6878      	ldr	r0, [r7, #4]
 8007490:	f7ff ffa6 	bl	80073e0 <SPI_EndRxTxTransaction>
 8007494:	4603      	mov	r3, r0
 8007496:	2b00      	cmp	r3, #0
 8007498:	d005      	beq.n	80074a6 <SPI_CloseRxTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800749e:	f043 0220 	orr.w	r2, r3, #32
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	661a      	str	r2, [r3, #96]	; 0x60
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d115      	bne.n	80074da <SPI_CloseRxTx_ISR+0x6e>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80074b4:	b2db      	uxtb	r3, r3
 80074b6:	2b04      	cmp	r3, #4
 80074b8:	d107      	bne.n	80074ca <SPI_CloseRxTx_ISR+0x5e>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	2201      	movs	r2, #1
 80074be:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 80074c2:	6878      	ldr	r0, [r7, #4]
 80074c4:	f003 fd2e 	bl	800af24 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 80074c8:	e00e      	b.n	80074e8 <SPI_CloseRxTx_ISR+0x7c>
        hspi->State = HAL_SPI_STATE_READY;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	2201      	movs	r2, #1
 80074ce:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        HAL_SPI_TxRxCpltCallback(hspi);
 80074d2:	6878      	ldr	r0, [r7, #4]
 80074d4:	f7ff fc4a 	bl	8006d6c <HAL_SPI_TxRxCpltCallback>
}
 80074d8:	e006      	b.n	80074e8 <SPI_CloseRxTx_ISR+0x7c>
      hspi->State = HAL_SPI_STATE_READY;
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	2201      	movs	r2, #1
 80074de:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      HAL_SPI_ErrorCallback(hspi);
 80074e2:	6878      	ldr	r0, [r7, #4]
 80074e4:	f7ff fc4c 	bl	8006d80 <HAL_SPI_ErrorCallback>
}
 80074e8:	bf00      	nop
 80074ea:	3710      	adds	r7, #16
 80074ec:	46bd      	mov	sp, r7
 80074ee:	bd80      	pop	{r7, pc}

080074f0 <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 80074f0:	b580      	push	{r7, lr}
 80074f2:	b082      	sub	sp, #8
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	685a      	ldr	r2, [r3, #4]
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8007506:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 8007508:	f7fb f950 	bl	80027ac <HAL_GetTick>
 800750c:	4603      	mov	r3, r0
 800750e:	461a      	mov	r2, r3
 8007510:	2164      	movs	r1, #100	; 0x64
 8007512:	6878      	ldr	r0, [r7, #4]
 8007514:	f7ff ff0c 	bl	8007330 <SPI_EndRxTransaction>
 8007518:	4603      	mov	r3, r0
 800751a:	2b00      	cmp	r3, #0
 800751c:	d005      	beq.n	800752a <SPI_CloseRx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007522:	f043 0220 	orr.w	r2, r3, #32
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	661a      	str	r2, [r3, #96]	; 0x60
  }
  hspi->State = HAL_SPI_STATE_READY;
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	2201      	movs	r2, #1
 800752e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007536:	2b00      	cmp	r3, #0
 8007538:	d103      	bne.n	8007542 <SPI_CloseRx_ISR+0x52>
    {
      /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 800753a:	6878      	ldr	r0, [r7, #4]
 800753c:	f003 fcf2 	bl	800af24 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8007540:	e002      	b.n	8007548 <SPI_CloseRx_ISR+0x58>
      HAL_SPI_ErrorCallback(hspi);
 8007542:	6878      	ldr	r0, [r7, #4]
 8007544:	f7ff fc1c 	bl	8006d80 <HAL_SPI_ErrorCallback>
}
 8007548:	bf00      	nop
 800754a:	3708      	adds	r7, #8
 800754c:	46bd      	mov	sp, r7
 800754e:	bd80      	pop	{r7, pc}

08007550 <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 8007550:	b580      	push	{r7, lr}
 8007552:	b084      	sub	sp, #16
 8007554:	af00      	add	r7, sp, #0
 8007556:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007558:	f7fb f928 	bl	80027ac <HAL_GetTick>
 800755c:	60f8      	str	r0, [r7, #12]

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	685a      	ldr	r2, [r3, #4]
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800756c:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800756e:	68fa      	ldr	r2, [r7, #12]
 8007570:	2164      	movs	r1, #100	; 0x64
 8007572:	6878      	ldr	r0, [r7, #4]
 8007574:	f7ff ff34 	bl	80073e0 <SPI_EndRxTxTransaction>
 8007578:	4603      	mov	r3, r0
 800757a:	2b00      	cmp	r3, #0
 800757c:	d005      	beq.n	800758a <SPI_CloseTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007582:	f043 0220 	orr.w	r2, r3, #32
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	689b      	ldr	r3, [r3, #8]
 800758e:	2b00      	cmp	r3, #0
 8007590:	d10a      	bne.n	80075a8 <SPI_CloseTx_ISR+0x58>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007592:	2300      	movs	r3, #0
 8007594:	60bb      	str	r3, [r7, #8]
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	68db      	ldr	r3, [r3, #12]
 800759c:	60bb      	str	r3, [r7, #8]
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	689b      	ldr	r3, [r3, #8]
 80075a4:	60bb      	str	r3, [r7, #8]
 80075a6:	68bb      	ldr	r3, [r7, #8]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	2201      	movs	r2, #1
 80075ac:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d003      	beq.n	80075c0 <SPI_CloseTx_ISR+0x70>
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 80075b8:	6878      	ldr	r0, [r7, #4]
 80075ba:	f7ff fbe1 	bl	8006d80 <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 80075be:	e002      	b.n	80075c6 <SPI_CloseTx_ISR+0x76>
    HAL_SPI_TxCpltCallback(hspi);
 80075c0:	6878      	ldr	r0, [r7, #4]
 80075c2:	f003 fcc3 	bl	800af4c <HAL_SPI_TxCpltCallback>
}
 80075c6:	bf00      	nop
 80075c8:	3710      	adds	r7, #16
 80075ca:	46bd      	mov	sp, r7
 80075cc:	bd80      	pop	{r7, pc}

080075ce <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80075ce:	b580      	push	{r7, lr}
 80075d0:	b082      	sub	sp, #8
 80075d2:	af00      	add	r7, sp, #0
 80075d4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d101      	bne.n	80075e0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80075dc:	2301      	movs	r3, #1
 80075de:	e049      	b.n	8007674 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80075e6:	b2db      	uxtb	r3, r3
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d106      	bne.n	80075fa <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	2200      	movs	r2, #0
 80075f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80075f4:	6878      	ldr	r0, [r7, #4]
 80075f6:	f7fa fd75 	bl	80020e4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	2202      	movs	r2, #2
 80075fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681a      	ldr	r2, [r3, #0]
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	3304      	adds	r3, #4
 800760a:	4619      	mov	r1, r3
 800760c:	4610      	mov	r0, r2
 800760e:	f000 f9ed 	bl	80079ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	2201      	movs	r2, #1
 8007616:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	2201      	movs	r2, #1
 800761e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	2201      	movs	r2, #1
 8007626:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	2201      	movs	r2, #1
 800762e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	2201      	movs	r2, #1
 8007636:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	2201      	movs	r2, #1
 800763e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	2201      	movs	r2, #1
 8007646:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	2201      	movs	r2, #1
 800764e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	2201      	movs	r2, #1
 8007656:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	2201      	movs	r2, #1
 800765e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	2201      	movs	r2, #1
 8007666:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	2201      	movs	r2, #1
 800766e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007672:	2300      	movs	r3, #0
}
 8007674:	4618      	mov	r0, r3
 8007676:	3708      	adds	r7, #8
 8007678:	46bd      	mov	sp, r7
 800767a:	bd80      	pop	{r7, pc}

0800767c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800767c:	b480      	push	{r7}
 800767e:	b085      	sub	sp, #20
 8007680:	af00      	add	r7, sp, #0
 8007682:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800768a:	b2db      	uxtb	r3, r3
 800768c:	2b01      	cmp	r3, #1
 800768e:	d001      	beq.n	8007694 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007690:	2301      	movs	r3, #1
 8007692:	e04f      	b.n	8007734 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	2202      	movs	r2, #2
 8007698:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	68da      	ldr	r2, [r3, #12]
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	f042 0201 	orr.w	r2, r2, #1
 80076aa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	4a23      	ldr	r2, [pc, #140]	; (8007740 <HAL_TIM_Base_Start_IT+0xc4>)
 80076b2:	4293      	cmp	r3, r2
 80076b4:	d01d      	beq.n	80076f2 <HAL_TIM_Base_Start_IT+0x76>
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80076be:	d018      	beq.n	80076f2 <HAL_TIM_Base_Start_IT+0x76>
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	4a1f      	ldr	r2, [pc, #124]	; (8007744 <HAL_TIM_Base_Start_IT+0xc8>)
 80076c6:	4293      	cmp	r3, r2
 80076c8:	d013      	beq.n	80076f2 <HAL_TIM_Base_Start_IT+0x76>
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	4a1e      	ldr	r2, [pc, #120]	; (8007748 <HAL_TIM_Base_Start_IT+0xcc>)
 80076d0:	4293      	cmp	r3, r2
 80076d2:	d00e      	beq.n	80076f2 <HAL_TIM_Base_Start_IT+0x76>
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	4a1c      	ldr	r2, [pc, #112]	; (800774c <HAL_TIM_Base_Start_IT+0xd0>)
 80076da:	4293      	cmp	r3, r2
 80076dc:	d009      	beq.n	80076f2 <HAL_TIM_Base_Start_IT+0x76>
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	4a1b      	ldr	r2, [pc, #108]	; (8007750 <HAL_TIM_Base_Start_IT+0xd4>)
 80076e4:	4293      	cmp	r3, r2
 80076e6:	d004      	beq.n	80076f2 <HAL_TIM_Base_Start_IT+0x76>
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	4a19      	ldr	r2, [pc, #100]	; (8007754 <HAL_TIM_Base_Start_IT+0xd8>)
 80076ee:	4293      	cmp	r3, r2
 80076f0:	d115      	bne.n	800771e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	689a      	ldr	r2, [r3, #8]
 80076f8:	4b17      	ldr	r3, [pc, #92]	; (8007758 <HAL_TIM_Base_Start_IT+0xdc>)
 80076fa:	4013      	ands	r3, r2
 80076fc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	2b06      	cmp	r3, #6
 8007702:	d015      	beq.n	8007730 <HAL_TIM_Base_Start_IT+0xb4>
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800770a:	d011      	beq.n	8007730 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	681a      	ldr	r2, [r3, #0]
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	f042 0201 	orr.w	r2, r2, #1
 800771a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800771c:	e008      	b.n	8007730 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	681a      	ldr	r2, [r3, #0]
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	f042 0201 	orr.w	r2, r2, #1
 800772c:	601a      	str	r2, [r3, #0]
 800772e:	e000      	b.n	8007732 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007730:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007732:	2300      	movs	r3, #0
}
 8007734:	4618      	mov	r0, r3
 8007736:	3714      	adds	r7, #20
 8007738:	46bd      	mov	sp, r7
 800773a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800773e:	4770      	bx	lr
 8007740:	40012c00 	.word	0x40012c00
 8007744:	40000400 	.word	0x40000400
 8007748:	40000800 	.word	0x40000800
 800774c:	40000c00 	.word	0x40000c00
 8007750:	40013400 	.word	0x40013400
 8007754:	40014000 	.word	0x40014000
 8007758:	00010007 	.word	0x00010007

0800775c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800775c:	b580      	push	{r7, lr}
 800775e:	b082      	sub	sp, #8
 8007760:	af00      	add	r7, sp, #0
 8007762:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	691b      	ldr	r3, [r3, #16]
 800776a:	f003 0302 	and.w	r3, r3, #2
 800776e:	2b02      	cmp	r3, #2
 8007770:	d122      	bne.n	80077b8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	68db      	ldr	r3, [r3, #12]
 8007778:	f003 0302 	and.w	r3, r3, #2
 800777c:	2b02      	cmp	r3, #2
 800777e:	d11b      	bne.n	80077b8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	f06f 0202 	mvn.w	r2, #2
 8007788:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	2201      	movs	r2, #1
 800778e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	699b      	ldr	r3, [r3, #24]
 8007796:	f003 0303 	and.w	r3, r3, #3
 800779a:	2b00      	cmp	r3, #0
 800779c:	d003      	beq.n	80077a6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800779e:	6878      	ldr	r0, [r7, #4]
 80077a0:	f000 f905 	bl	80079ae <HAL_TIM_IC_CaptureCallback>
 80077a4:	e005      	b.n	80077b2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80077a6:	6878      	ldr	r0, [r7, #4]
 80077a8:	f000 f8f7 	bl	800799a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80077ac:	6878      	ldr	r0, [r7, #4]
 80077ae:	f000 f908 	bl	80079c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	2200      	movs	r2, #0
 80077b6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	691b      	ldr	r3, [r3, #16]
 80077be:	f003 0304 	and.w	r3, r3, #4
 80077c2:	2b04      	cmp	r3, #4
 80077c4:	d122      	bne.n	800780c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	68db      	ldr	r3, [r3, #12]
 80077cc:	f003 0304 	and.w	r3, r3, #4
 80077d0:	2b04      	cmp	r3, #4
 80077d2:	d11b      	bne.n	800780c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	f06f 0204 	mvn.w	r2, #4
 80077dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	2202      	movs	r2, #2
 80077e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	699b      	ldr	r3, [r3, #24]
 80077ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d003      	beq.n	80077fa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80077f2:	6878      	ldr	r0, [r7, #4]
 80077f4:	f000 f8db 	bl	80079ae <HAL_TIM_IC_CaptureCallback>
 80077f8:	e005      	b.n	8007806 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80077fa:	6878      	ldr	r0, [r7, #4]
 80077fc:	f000 f8cd 	bl	800799a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007800:	6878      	ldr	r0, [r7, #4]
 8007802:	f000 f8de 	bl	80079c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	2200      	movs	r2, #0
 800780a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	691b      	ldr	r3, [r3, #16]
 8007812:	f003 0308 	and.w	r3, r3, #8
 8007816:	2b08      	cmp	r3, #8
 8007818:	d122      	bne.n	8007860 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	68db      	ldr	r3, [r3, #12]
 8007820:	f003 0308 	and.w	r3, r3, #8
 8007824:	2b08      	cmp	r3, #8
 8007826:	d11b      	bne.n	8007860 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	f06f 0208 	mvn.w	r2, #8
 8007830:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	2204      	movs	r2, #4
 8007836:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	69db      	ldr	r3, [r3, #28]
 800783e:	f003 0303 	and.w	r3, r3, #3
 8007842:	2b00      	cmp	r3, #0
 8007844:	d003      	beq.n	800784e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007846:	6878      	ldr	r0, [r7, #4]
 8007848:	f000 f8b1 	bl	80079ae <HAL_TIM_IC_CaptureCallback>
 800784c:	e005      	b.n	800785a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800784e:	6878      	ldr	r0, [r7, #4]
 8007850:	f000 f8a3 	bl	800799a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007854:	6878      	ldr	r0, [r7, #4]
 8007856:	f000 f8b4 	bl	80079c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	2200      	movs	r2, #0
 800785e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	691b      	ldr	r3, [r3, #16]
 8007866:	f003 0310 	and.w	r3, r3, #16
 800786a:	2b10      	cmp	r3, #16
 800786c:	d122      	bne.n	80078b4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	68db      	ldr	r3, [r3, #12]
 8007874:	f003 0310 	and.w	r3, r3, #16
 8007878:	2b10      	cmp	r3, #16
 800787a:	d11b      	bne.n	80078b4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	f06f 0210 	mvn.w	r2, #16
 8007884:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	2208      	movs	r2, #8
 800788a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	69db      	ldr	r3, [r3, #28]
 8007892:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007896:	2b00      	cmp	r3, #0
 8007898:	d003      	beq.n	80078a2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800789a:	6878      	ldr	r0, [r7, #4]
 800789c:	f000 f887 	bl	80079ae <HAL_TIM_IC_CaptureCallback>
 80078a0:	e005      	b.n	80078ae <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80078a2:	6878      	ldr	r0, [r7, #4]
 80078a4:	f000 f879 	bl	800799a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80078a8:	6878      	ldr	r0, [r7, #4]
 80078aa:	f000 f88a 	bl	80079c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	2200      	movs	r2, #0
 80078b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	691b      	ldr	r3, [r3, #16]
 80078ba:	f003 0301 	and.w	r3, r3, #1
 80078be:	2b01      	cmp	r3, #1
 80078c0:	d10e      	bne.n	80078e0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	68db      	ldr	r3, [r3, #12]
 80078c8:	f003 0301 	and.w	r3, r3, #1
 80078cc:	2b01      	cmp	r3, #1
 80078ce:	d107      	bne.n	80078e0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	f06f 0201 	mvn.w	r2, #1
 80078d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80078da:	6878      	ldr	r0, [r7, #4]
 80078dc:	f7fa f856 	bl	800198c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	691b      	ldr	r3, [r3, #16]
 80078e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80078ea:	2b80      	cmp	r3, #128	; 0x80
 80078ec:	d10e      	bne.n	800790c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	68db      	ldr	r3, [r3, #12]
 80078f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80078f8:	2b80      	cmp	r3, #128	; 0x80
 80078fa:	d107      	bne.n	800790c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007904:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007906:	6878      	ldr	r0, [r7, #4]
 8007908:	f000 f99c 	bl	8007c44 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	691b      	ldr	r3, [r3, #16]
 8007912:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007916:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800791a:	d10e      	bne.n	800793a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	68db      	ldr	r3, [r3, #12]
 8007922:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007926:	2b80      	cmp	r3, #128	; 0x80
 8007928:	d107      	bne.n	800793a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007932:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007934:	6878      	ldr	r0, [r7, #4]
 8007936:	f000 f98f 	bl	8007c58 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	691b      	ldr	r3, [r3, #16]
 8007940:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007944:	2b40      	cmp	r3, #64	; 0x40
 8007946:	d10e      	bne.n	8007966 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	68db      	ldr	r3, [r3, #12]
 800794e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007952:	2b40      	cmp	r3, #64	; 0x40
 8007954:	d107      	bne.n	8007966 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800795e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007960:	6878      	ldr	r0, [r7, #4]
 8007962:	f000 f838 	bl	80079d6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	691b      	ldr	r3, [r3, #16]
 800796c:	f003 0320 	and.w	r3, r3, #32
 8007970:	2b20      	cmp	r3, #32
 8007972:	d10e      	bne.n	8007992 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	68db      	ldr	r3, [r3, #12]
 800797a:	f003 0320 	and.w	r3, r3, #32
 800797e:	2b20      	cmp	r3, #32
 8007980:	d107      	bne.n	8007992 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	f06f 0220 	mvn.w	r2, #32
 800798a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800798c:	6878      	ldr	r0, [r7, #4]
 800798e:	f000 f94f 	bl	8007c30 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007992:	bf00      	nop
 8007994:	3708      	adds	r7, #8
 8007996:	46bd      	mov	sp, r7
 8007998:	bd80      	pop	{r7, pc}

0800799a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800799a:	b480      	push	{r7}
 800799c:	b083      	sub	sp, #12
 800799e:	af00      	add	r7, sp, #0
 80079a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80079a2:	bf00      	nop
 80079a4:	370c      	adds	r7, #12
 80079a6:	46bd      	mov	sp, r7
 80079a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ac:	4770      	bx	lr

080079ae <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80079ae:	b480      	push	{r7}
 80079b0:	b083      	sub	sp, #12
 80079b2:	af00      	add	r7, sp, #0
 80079b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80079b6:	bf00      	nop
 80079b8:	370c      	adds	r7, #12
 80079ba:	46bd      	mov	sp, r7
 80079bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c0:	4770      	bx	lr

080079c2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80079c2:	b480      	push	{r7}
 80079c4:	b083      	sub	sp, #12
 80079c6:	af00      	add	r7, sp, #0
 80079c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80079ca:	bf00      	nop
 80079cc:	370c      	adds	r7, #12
 80079ce:	46bd      	mov	sp, r7
 80079d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d4:	4770      	bx	lr

080079d6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80079d6:	b480      	push	{r7}
 80079d8:	b083      	sub	sp, #12
 80079da:	af00      	add	r7, sp, #0
 80079dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80079de:	bf00      	nop
 80079e0:	370c      	adds	r7, #12
 80079e2:	46bd      	mov	sp, r7
 80079e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e8:	4770      	bx	lr
	...

080079ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80079ec:	b480      	push	{r7}
 80079ee:	b085      	sub	sp, #20
 80079f0:	af00      	add	r7, sp, #0
 80079f2:	6078      	str	r0, [r7, #4]
 80079f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	4a40      	ldr	r2, [pc, #256]	; (8007b00 <TIM_Base_SetConfig+0x114>)
 8007a00:	4293      	cmp	r3, r2
 8007a02:	d013      	beq.n	8007a2c <TIM_Base_SetConfig+0x40>
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a0a:	d00f      	beq.n	8007a2c <TIM_Base_SetConfig+0x40>
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	4a3d      	ldr	r2, [pc, #244]	; (8007b04 <TIM_Base_SetConfig+0x118>)
 8007a10:	4293      	cmp	r3, r2
 8007a12:	d00b      	beq.n	8007a2c <TIM_Base_SetConfig+0x40>
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	4a3c      	ldr	r2, [pc, #240]	; (8007b08 <TIM_Base_SetConfig+0x11c>)
 8007a18:	4293      	cmp	r3, r2
 8007a1a:	d007      	beq.n	8007a2c <TIM_Base_SetConfig+0x40>
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	4a3b      	ldr	r2, [pc, #236]	; (8007b0c <TIM_Base_SetConfig+0x120>)
 8007a20:	4293      	cmp	r3, r2
 8007a22:	d003      	beq.n	8007a2c <TIM_Base_SetConfig+0x40>
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	4a3a      	ldr	r2, [pc, #232]	; (8007b10 <TIM_Base_SetConfig+0x124>)
 8007a28:	4293      	cmp	r3, r2
 8007a2a:	d108      	bne.n	8007a3e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a32:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007a34:	683b      	ldr	r3, [r7, #0]
 8007a36:	685b      	ldr	r3, [r3, #4]
 8007a38:	68fa      	ldr	r2, [r7, #12]
 8007a3a:	4313      	orrs	r3, r2
 8007a3c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	4a2f      	ldr	r2, [pc, #188]	; (8007b00 <TIM_Base_SetConfig+0x114>)
 8007a42:	4293      	cmp	r3, r2
 8007a44:	d01f      	beq.n	8007a86 <TIM_Base_SetConfig+0x9a>
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a4c:	d01b      	beq.n	8007a86 <TIM_Base_SetConfig+0x9a>
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	4a2c      	ldr	r2, [pc, #176]	; (8007b04 <TIM_Base_SetConfig+0x118>)
 8007a52:	4293      	cmp	r3, r2
 8007a54:	d017      	beq.n	8007a86 <TIM_Base_SetConfig+0x9a>
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	4a2b      	ldr	r2, [pc, #172]	; (8007b08 <TIM_Base_SetConfig+0x11c>)
 8007a5a:	4293      	cmp	r3, r2
 8007a5c:	d013      	beq.n	8007a86 <TIM_Base_SetConfig+0x9a>
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	4a2a      	ldr	r2, [pc, #168]	; (8007b0c <TIM_Base_SetConfig+0x120>)
 8007a62:	4293      	cmp	r3, r2
 8007a64:	d00f      	beq.n	8007a86 <TIM_Base_SetConfig+0x9a>
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	4a29      	ldr	r2, [pc, #164]	; (8007b10 <TIM_Base_SetConfig+0x124>)
 8007a6a:	4293      	cmp	r3, r2
 8007a6c:	d00b      	beq.n	8007a86 <TIM_Base_SetConfig+0x9a>
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	4a28      	ldr	r2, [pc, #160]	; (8007b14 <TIM_Base_SetConfig+0x128>)
 8007a72:	4293      	cmp	r3, r2
 8007a74:	d007      	beq.n	8007a86 <TIM_Base_SetConfig+0x9a>
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	4a27      	ldr	r2, [pc, #156]	; (8007b18 <TIM_Base_SetConfig+0x12c>)
 8007a7a:	4293      	cmp	r3, r2
 8007a7c:	d003      	beq.n	8007a86 <TIM_Base_SetConfig+0x9a>
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	4a26      	ldr	r2, [pc, #152]	; (8007b1c <TIM_Base_SetConfig+0x130>)
 8007a82:	4293      	cmp	r3, r2
 8007a84:	d108      	bne.n	8007a98 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007a8c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007a8e:	683b      	ldr	r3, [r7, #0]
 8007a90:	68db      	ldr	r3, [r3, #12]
 8007a92:	68fa      	ldr	r2, [r7, #12]
 8007a94:	4313      	orrs	r3, r2
 8007a96:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007a9e:	683b      	ldr	r3, [r7, #0]
 8007aa0:	695b      	ldr	r3, [r3, #20]
 8007aa2:	4313      	orrs	r3, r2
 8007aa4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	68fa      	ldr	r2, [r7, #12]
 8007aaa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007aac:	683b      	ldr	r3, [r7, #0]
 8007aae:	689a      	ldr	r2, [r3, #8]
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007ab4:	683b      	ldr	r3, [r7, #0]
 8007ab6:	681a      	ldr	r2, [r3, #0]
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	4a10      	ldr	r2, [pc, #64]	; (8007b00 <TIM_Base_SetConfig+0x114>)
 8007ac0:	4293      	cmp	r3, r2
 8007ac2:	d00f      	beq.n	8007ae4 <TIM_Base_SetConfig+0xf8>
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	4a12      	ldr	r2, [pc, #72]	; (8007b10 <TIM_Base_SetConfig+0x124>)
 8007ac8:	4293      	cmp	r3, r2
 8007aca:	d00b      	beq.n	8007ae4 <TIM_Base_SetConfig+0xf8>
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	4a11      	ldr	r2, [pc, #68]	; (8007b14 <TIM_Base_SetConfig+0x128>)
 8007ad0:	4293      	cmp	r3, r2
 8007ad2:	d007      	beq.n	8007ae4 <TIM_Base_SetConfig+0xf8>
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	4a10      	ldr	r2, [pc, #64]	; (8007b18 <TIM_Base_SetConfig+0x12c>)
 8007ad8:	4293      	cmp	r3, r2
 8007ada:	d003      	beq.n	8007ae4 <TIM_Base_SetConfig+0xf8>
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	4a0f      	ldr	r2, [pc, #60]	; (8007b1c <TIM_Base_SetConfig+0x130>)
 8007ae0:	4293      	cmp	r3, r2
 8007ae2:	d103      	bne.n	8007aec <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007ae4:	683b      	ldr	r3, [r7, #0]
 8007ae6:	691a      	ldr	r2, [r3, #16]
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	2201      	movs	r2, #1
 8007af0:	615a      	str	r2, [r3, #20]
}
 8007af2:	bf00      	nop
 8007af4:	3714      	adds	r7, #20
 8007af6:	46bd      	mov	sp, r7
 8007af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007afc:	4770      	bx	lr
 8007afe:	bf00      	nop
 8007b00:	40012c00 	.word	0x40012c00
 8007b04:	40000400 	.word	0x40000400
 8007b08:	40000800 	.word	0x40000800
 8007b0c:	40000c00 	.word	0x40000c00
 8007b10:	40013400 	.word	0x40013400
 8007b14:	40014000 	.word	0x40014000
 8007b18:	40014400 	.word	0x40014400
 8007b1c:	40014800 	.word	0x40014800

08007b20 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007b20:	b480      	push	{r7}
 8007b22:	b085      	sub	sp, #20
 8007b24:	af00      	add	r7, sp, #0
 8007b26:	6078      	str	r0, [r7, #4]
 8007b28:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007b30:	2b01      	cmp	r3, #1
 8007b32:	d101      	bne.n	8007b38 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007b34:	2302      	movs	r3, #2
 8007b36:	e068      	b.n	8007c0a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	2201      	movs	r2, #1
 8007b3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	2202      	movs	r2, #2
 8007b44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	685b      	ldr	r3, [r3, #4]
 8007b4e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	689b      	ldr	r3, [r3, #8]
 8007b56:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	4a2e      	ldr	r2, [pc, #184]	; (8007c18 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8007b5e:	4293      	cmp	r3, r2
 8007b60:	d004      	beq.n	8007b6c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	4a2d      	ldr	r2, [pc, #180]	; (8007c1c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007b68:	4293      	cmp	r3, r2
 8007b6a:	d108      	bne.n	8007b7e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007b72:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007b74:	683b      	ldr	r3, [r7, #0]
 8007b76:	685b      	ldr	r3, [r3, #4]
 8007b78:	68fa      	ldr	r2, [r7, #12]
 8007b7a:	4313      	orrs	r3, r2
 8007b7c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b84:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007b86:	683b      	ldr	r3, [r7, #0]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	68fa      	ldr	r2, [r7, #12]
 8007b8c:	4313      	orrs	r3, r2
 8007b8e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	68fa      	ldr	r2, [r7, #12]
 8007b96:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	4a1e      	ldr	r2, [pc, #120]	; (8007c18 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8007b9e:	4293      	cmp	r3, r2
 8007ba0:	d01d      	beq.n	8007bde <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007baa:	d018      	beq.n	8007bde <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	4a1b      	ldr	r2, [pc, #108]	; (8007c20 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007bb2:	4293      	cmp	r3, r2
 8007bb4:	d013      	beq.n	8007bde <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	4a1a      	ldr	r2, [pc, #104]	; (8007c24 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007bbc:	4293      	cmp	r3, r2
 8007bbe:	d00e      	beq.n	8007bde <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	4a18      	ldr	r2, [pc, #96]	; (8007c28 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007bc6:	4293      	cmp	r3, r2
 8007bc8:	d009      	beq.n	8007bde <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	4a13      	ldr	r2, [pc, #76]	; (8007c1c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007bd0:	4293      	cmp	r3, r2
 8007bd2:	d004      	beq.n	8007bde <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	4a14      	ldr	r2, [pc, #80]	; (8007c2c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8007bda:	4293      	cmp	r3, r2
 8007bdc:	d10c      	bne.n	8007bf8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007bde:	68bb      	ldr	r3, [r7, #8]
 8007be0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007be4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007be6:	683b      	ldr	r3, [r7, #0]
 8007be8:	689b      	ldr	r3, [r3, #8]
 8007bea:	68ba      	ldr	r2, [r7, #8]
 8007bec:	4313      	orrs	r3, r2
 8007bee:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	68ba      	ldr	r2, [r7, #8]
 8007bf6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	2201      	movs	r2, #1
 8007bfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	2200      	movs	r2, #0
 8007c04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007c08:	2300      	movs	r3, #0
}
 8007c0a:	4618      	mov	r0, r3
 8007c0c:	3714      	adds	r7, #20
 8007c0e:	46bd      	mov	sp, r7
 8007c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c14:	4770      	bx	lr
 8007c16:	bf00      	nop
 8007c18:	40012c00 	.word	0x40012c00
 8007c1c:	40013400 	.word	0x40013400
 8007c20:	40000400 	.word	0x40000400
 8007c24:	40000800 	.word	0x40000800
 8007c28:	40000c00 	.word	0x40000c00
 8007c2c:	40014000 	.word	0x40014000

08007c30 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007c30:	b480      	push	{r7}
 8007c32:	b083      	sub	sp, #12
 8007c34:	af00      	add	r7, sp, #0
 8007c36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007c38:	bf00      	nop
 8007c3a:	370c      	adds	r7, #12
 8007c3c:	46bd      	mov	sp, r7
 8007c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c42:	4770      	bx	lr

08007c44 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007c44:	b480      	push	{r7}
 8007c46:	b083      	sub	sp, #12
 8007c48:	af00      	add	r7, sp, #0
 8007c4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007c4c:	bf00      	nop
 8007c4e:	370c      	adds	r7, #12
 8007c50:	46bd      	mov	sp, r7
 8007c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c56:	4770      	bx	lr

08007c58 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007c58:	b480      	push	{r7}
 8007c5a:	b083      	sub	sp, #12
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007c60:	bf00      	nop
 8007c62:	370c      	adds	r7, #12
 8007c64:	46bd      	mov	sp, r7
 8007c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c6a:	4770      	bx	lr

08007c6c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007c6c:	b580      	push	{r7, lr}
 8007c6e:	b082      	sub	sp, #8
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d101      	bne.n	8007c7e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007c7a:	2301      	movs	r3, #1
 8007c7c:	e040      	b.n	8007d00 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d106      	bne.n	8007c94 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	2200      	movs	r2, #0
 8007c8a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007c8e:	6878      	ldr	r0, [r7, #4]
 8007c90:	f7fa fa4e 	bl	8002130 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	2224      	movs	r2, #36	; 0x24
 8007c98:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	681a      	ldr	r2, [r3, #0]
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	f022 0201 	bic.w	r2, r2, #1
 8007ca8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007caa:	6878      	ldr	r0, [r7, #4]
 8007cac:	f000 fb26 	bl	80082fc <UART_SetConfig>
 8007cb0:	4603      	mov	r3, r0
 8007cb2:	2b01      	cmp	r3, #1
 8007cb4:	d101      	bne.n	8007cba <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8007cb6:	2301      	movs	r3, #1
 8007cb8:	e022      	b.n	8007d00 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d002      	beq.n	8007cc8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8007cc2:	6878      	ldr	r0, [r7, #4]
 8007cc4:	f000 fdd4 	bl	8008870 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	685a      	ldr	r2, [r3, #4]
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007cd6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	689a      	ldr	r2, [r3, #8]
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007ce6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	681a      	ldr	r2, [r3, #0]
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	f042 0201 	orr.w	r2, r2, #1
 8007cf6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007cf8:	6878      	ldr	r0, [r7, #4]
 8007cfa:	f000 fe5b 	bl	80089b4 <UART_CheckIdleState>
 8007cfe:	4603      	mov	r3, r0
}
 8007d00:	4618      	mov	r0, r3
 8007d02:	3708      	adds	r7, #8
 8007d04:	46bd      	mov	sp, r7
 8007d06:	bd80      	pop	{r7, pc}

08007d08 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007d08:	b580      	push	{r7, lr}
 8007d0a:	b08a      	sub	sp, #40	; 0x28
 8007d0c:	af02      	add	r7, sp, #8
 8007d0e:	60f8      	str	r0, [r7, #12]
 8007d10:	60b9      	str	r1, [r7, #8]
 8007d12:	603b      	str	r3, [r7, #0]
 8007d14:	4613      	mov	r3, r2
 8007d16:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007d1c:	2b20      	cmp	r3, #32
 8007d1e:	f040 8082 	bne.w	8007e26 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8007d22:	68bb      	ldr	r3, [r7, #8]
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d002      	beq.n	8007d2e <HAL_UART_Transmit+0x26>
 8007d28:	88fb      	ldrh	r3, [r7, #6]
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d101      	bne.n	8007d32 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8007d2e:	2301      	movs	r3, #1
 8007d30:	e07a      	b.n	8007e28 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8007d38:	2b01      	cmp	r3, #1
 8007d3a:	d101      	bne.n	8007d40 <HAL_UART_Transmit+0x38>
 8007d3c:	2302      	movs	r3, #2
 8007d3e:	e073      	b.n	8007e28 <HAL_UART_Transmit+0x120>
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	2201      	movs	r2, #1
 8007d44:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	2200      	movs	r2, #0
 8007d4c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	2221      	movs	r2, #33	; 0x21
 8007d54:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007d56:	f7fa fd29 	bl	80027ac <HAL_GetTick>
 8007d5a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	88fa      	ldrh	r2, [r7, #6]
 8007d60:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	88fa      	ldrh	r2, [r7, #6]
 8007d68:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	689b      	ldr	r3, [r3, #8]
 8007d70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d74:	d108      	bne.n	8007d88 <HAL_UART_Transmit+0x80>
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	691b      	ldr	r3, [r3, #16]
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d104      	bne.n	8007d88 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8007d7e:	2300      	movs	r3, #0
 8007d80:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007d82:	68bb      	ldr	r3, [r7, #8]
 8007d84:	61bb      	str	r3, [r7, #24]
 8007d86:	e003      	b.n	8007d90 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8007d88:	68bb      	ldr	r3, [r7, #8]
 8007d8a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007d8c:	2300      	movs	r3, #0
 8007d8e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	2200      	movs	r2, #0
 8007d94:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8007d98:	e02d      	b.n	8007df6 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007d9a:	683b      	ldr	r3, [r7, #0]
 8007d9c:	9300      	str	r3, [sp, #0]
 8007d9e:	697b      	ldr	r3, [r7, #20]
 8007da0:	2200      	movs	r2, #0
 8007da2:	2180      	movs	r1, #128	; 0x80
 8007da4:	68f8      	ldr	r0, [r7, #12]
 8007da6:	f000 fe4e 	bl	8008a46 <UART_WaitOnFlagUntilTimeout>
 8007daa:	4603      	mov	r3, r0
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d001      	beq.n	8007db4 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8007db0:	2303      	movs	r3, #3
 8007db2:	e039      	b.n	8007e28 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8007db4:	69fb      	ldr	r3, [r7, #28]
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d10b      	bne.n	8007dd2 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007dba:	69bb      	ldr	r3, [r7, #24]
 8007dbc:	881a      	ldrh	r2, [r3, #0]
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007dc6:	b292      	uxth	r2, r2
 8007dc8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007dca:	69bb      	ldr	r3, [r7, #24]
 8007dcc:	3302      	adds	r3, #2
 8007dce:	61bb      	str	r3, [r7, #24]
 8007dd0:	e008      	b.n	8007de4 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007dd2:	69fb      	ldr	r3, [r7, #28]
 8007dd4:	781a      	ldrb	r2, [r3, #0]
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	b292      	uxth	r2, r2
 8007ddc:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007dde:	69fb      	ldr	r3, [r7, #28]
 8007de0:	3301      	adds	r3, #1
 8007de2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007dea:	b29b      	uxth	r3, r3
 8007dec:	3b01      	subs	r3, #1
 8007dee:	b29a      	uxth	r2, r3
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007dfc:	b29b      	uxth	r3, r3
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d1cb      	bne.n	8007d9a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007e02:	683b      	ldr	r3, [r7, #0]
 8007e04:	9300      	str	r3, [sp, #0]
 8007e06:	697b      	ldr	r3, [r7, #20]
 8007e08:	2200      	movs	r2, #0
 8007e0a:	2140      	movs	r1, #64	; 0x40
 8007e0c:	68f8      	ldr	r0, [r7, #12]
 8007e0e:	f000 fe1a 	bl	8008a46 <UART_WaitOnFlagUntilTimeout>
 8007e12:	4603      	mov	r3, r0
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d001      	beq.n	8007e1c <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8007e18:	2303      	movs	r3, #3
 8007e1a:	e005      	b.n	8007e28 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	2220      	movs	r2, #32
 8007e20:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8007e22:	2300      	movs	r3, #0
 8007e24:	e000      	b.n	8007e28 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8007e26:	2302      	movs	r3, #2
  }
}
 8007e28:	4618      	mov	r0, r3
 8007e2a:	3720      	adds	r7, #32
 8007e2c:	46bd      	mov	sp, r7
 8007e2e:	bd80      	pop	{r7, pc}

08007e30 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007e30:	b580      	push	{r7, lr}
 8007e32:	b084      	sub	sp, #16
 8007e34:	af00      	add	r7, sp, #0
 8007e36:	60f8      	str	r0, [r7, #12]
 8007e38:	60b9      	str	r1, [r7, #8]
 8007e3a:	4613      	mov	r3, r2
 8007e3c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007e42:	2b20      	cmp	r3, #32
 8007e44:	d131      	bne.n	8007eaa <HAL_UART_Receive_IT+0x7a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007e46:	68bb      	ldr	r3, [r7, #8]
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d002      	beq.n	8007e52 <HAL_UART_Receive_IT+0x22>
 8007e4c:	88fb      	ldrh	r3, [r7, #6]
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d101      	bne.n	8007e56 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8007e52:	2301      	movs	r3, #1
 8007e54:	e02a      	b.n	8007eac <HAL_UART_Receive_IT+0x7c>
    }

    __HAL_LOCK(huart);
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8007e5c:	2b01      	cmp	r3, #1
 8007e5e:	d101      	bne.n	8007e64 <HAL_UART_Receive_IT+0x34>
 8007e60:	2302      	movs	r3, #2
 8007e62:	e023      	b.n	8007eac <HAL_UART_Receive_IT+0x7c>
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	2201      	movs	r2, #1
 8007e68:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	2200      	movs	r2, #0
 8007e70:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	4a0f      	ldr	r2, [pc, #60]	; (8007eb4 <HAL_UART_Receive_IT+0x84>)
 8007e78:	4293      	cmp	r3, r2
 8007e7a:	d00e      	beq.n	8007e9a <HAL_UART_Receive_IT+0x6a>
    {
      /* Check that USART RTOEN bit is set */
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	685b      	ldr	r3, [r3, #4]
 8007e82:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d007      	beq.n	8007e9a <HAL_UART_Receive_IT+0x6a>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	681a      	ldr	r2, [r3, #0]
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8007e98:	601a      	str	r2, [r3, #0]
      }
    }

    return(UART_Start_Receive_IT(huart, pData, Size));
 8007e9a:	88fb      	ldrh	r3, [r7, #6]
 8007e9c:	461a      	mov	r2, r3
 8007e9e:	68b9      	ldr	r1, [r7, #8]
 8007ea0:	68f8      	ldr	r0, [r7, #12]
 8007ea2:	f000 fe4d 	bl	8008b40 <UART_Start_Receive_IT>
 8007ea6:	4603      	mov	r3, r0
 8007ea8:	e000      	b.n	8007eac <HAL_UART_Receive_IT+0x7c>
  }
  else
  {
    return HAL_BUSY;
 8007eaa:	2302      	movs	r3, #2
  }
}
 8007eac:	4618      	mov	r0, r3
 8007eae:	3710      	adds	r7, #16
 8007eb0:	46bd      	mov	sp, r7
 8007eb2:	bd80      	pop	{r7, pc}
 8007eb4:	40008000 	.word	0x40008000

08007eb8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007eb8:	b580      	push	{r7, lr}
 8007eba:	b088      	sub	sp, #32
 8007ebc:	af00      	add	r7, sp, #0
 8007ebe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	69db      	ldr	r3, [r3, #28]
 8007ec6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	689b      	ldr	r3, [r3, #8]
 8007ed6:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007ed8:	69fa      	ldr	r2, [r7, #28]
 8007eda:	f640 030f 	movw	r3, #2063	; 0x80f
 8007ede:	4013      	ands	r3, r2
 8007ee0:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8007ee2:	693b      	ldr	r3, [r7, #16]
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d113      	bne.n	8007f10 <HAL_UART_IRQHandler+0x58>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8007ee8:	69fb      	ldr	r3, [r7, #28]
 8007eea:	f003 0320 	and.w	r3, r3, #32
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d00e      	beq.n	8007f10 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007ef2:	69bb      	ldr	r3, [r7, #24]
 8007ef4:	f003 0320 	and.w	r3, r3, #32
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d009      	beq.n	8007f10 <HAL_UART_IRQHandler+0x58>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	f000 81cf 	beq.w	80082a4 <HAL_UART_IRQHandler+0x3ec>
      {
        huart->RxISR(huart);
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007f0a:	6878      	ldr	r0, [r7, #4]
 8007f0c:	4798      	blx	r3
      }
      return;
 8007f0e:	e1c9      	b.n	80082a4 <HAL_UART_IRQHandler+0x3ec>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8007f10:	693b      	ldr	r3, [r7, #16]
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	f000 80e8 	beq.w	80080e8 <HAL_UART_IRQHandler+0x230>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8007f18:	697b      	ldr	r3, [r7, #20]
 8007f1a:	f003 0301 	and.w	r3, r3, #1
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d105      	bne.n	8007f2e <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8007f22:	69ba      	ldr	r2, [r7, #24]
 8007f24:	4b6e      	ldr	r3, [pc, #440]	; (80080e0 <HAL_UART_IRQHandler+0x228>)
 8007f26:	4013      	ands	r3, r2
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	f000 80dd 	beq.w	80080e8 <HAL_UART_IRQHandler+0x230>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007f2e:	69fb      	ldr	r3, [r7, #28]
 8007f30:	f003 0301 	and.w	r3, r3, #1
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d010      	beq.n	8007f5a <HAL_UART_IRQHandler+0xa2>
 8007f38:	69bb      	ldr	r3, [r7, #24]
 8007f3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d00b      	beq.n	8007f5a <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	2201      	movs	r2, #1
 8007f48:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007f50:	f043 0201 	orr.w	r2, r3, #1
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007f5a:	69fb      	ldr	r3, [r7, #28]
 8007f5c:	f003 0302 	and.w	r3, r3, #2
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d010      	beq.n	8007f86 <HAL_UART_IRQHandler+0xce>
 8007f64:	697b      	ldr	r3, [r7, #20]
 8007f66:	f003 0301 	and.w	r3, r3, #1
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d00b      	beq.n	8007f86 <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	2202      	movs	r2, #2
 8007f74:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007f7c:	f043 0204 	orr.w	r2, r3, #4
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007f86:	69fb      	ldr	r3, [r7, #28]
 8007f88:	f003 0304 	and.w	r3, r3, #4
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d010      	beq.n	8007fb2 <HAL_UART_IRQHandler+0xfa>
 8007f90:	697b      	ldr	r3, [r7, #20]
 8007f92:	f003 0301 	and.w	r3, r3, #1
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d00b      	beq.n	8007fb2 <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	2204      	movs	r2, #4
 8007fa0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007fa8:	f043 0202 	orr.w	r2, r3, #2
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007fb2:	69fb      	ldr	r3, [r7, #28]
 8007fb4:	f003 0308 	and.w	r3, r3, #8
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d015      	beq.n	8007fe8 <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007fbc:	69bb      	ldr	r3, [r7, #24]
 8007fbe:	f003 0320 	and.w	r3, r3, #32
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d104      	bne.n	8007fd0 <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8007fc6:	697b      	ldr	r3, [r7, #20]
 8007fc8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d00b      	beq.n	8007fe8 <HAL_UART_IRQHandler+0x130>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	2208      	movs	r2, #8
 8007fd6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007fde:	f043 0208 	orr.w	r2, r3, #8
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007fe8:	69fb      	ldr	r3, [r7, #28]
 8007fea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d011      	beq.n	8008016 <HAL_UART_IRQHandler+0x15e>
 8007ff2:	69bb      	ldr	r3, [r7, #24]
 8007ff4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d00c      	beq.n	8008016 <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008004:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800800c:	f043 0220 	orr.w	r2, r3, #32
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800801c:	2b00      	cmp	r3, #0
 800801e:	f000 8143 	beq.w	80082a8 <HAL_UART_IRQHandler+0x3f0>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8008022:	69fb      	ldr	r3, [r7, #28]
 8008024:	f003 0320 	and.w	r3, r3, #32
 8008028:	2b00      	cmp	r3, #0
 800802a:	d00c      	beq.n	8008046 <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800802c:	69bb      	ldr	r3, [r7, #24]
 800802e:	f003 0320 	and.w	r3, r3, #32
 8008032:	2b00      	cmp	r3, #0
 8008034:	d007      	beq.n	8008046 <HAL_UART_IRQHandler+0x18e>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800803a:	2b00      	cmp	r3, #0
 800803c:	d003      	beq.n	8008046 <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008042:	6878      	ldr	r0, [r7, #4]
 8008044:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800804c:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	689b      	ldr	r3, [r3, #8]
 8008054:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008058:	2b40      	cmp	r3, #64	; 0x40
 800805a:	d004      	beq.n	8008066 <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008062:	2b00      	cmp	r3, #0
 8008064:	d031      	beq.n	80080ca <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008066:	6878      	ldr	r0, [r7, #4]
 8008068:	f000 fdf2 	bl	8008c50 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	689b      	ldr	r3, [r3, #8]
 8008072:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008076:	2b40      	cmp	r3, #64	; 0x40
 8008078:	d123      	bne.n	80080c2 <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	689a      	ldr	r2, [r3, #8]
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008088:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800808e:	2b00      	cmp	r3, #0
 8008090:	d013      	beq.n	80080ba <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008096:	4a13      	ldr	r2, [pc, #76]	; (80080e4 <HAL_UART_IRQHandler+0x22c>)
 8008098:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800809e:	4618      	mov	r0, r3
 80080a0:	f7fa fe12 	bl	8002cc8 <HAL_DMA_Abort_IT>
 80080a4:	4603      	mov	r3, r0
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d017      	beq.n	80080da <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080b0:	687a      	ldr	r2, [r7, #4]
 80080b2:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80080b4:	4610      	mov	r0, r2
 80080b6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80080b8:	e00f      	b.n	80080da <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80080ba:	6878      	ldr	r0, [r7, #4]
 80080bc:	f000 f908 	bl	80082d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80080c0:	e00b      	b.n	80080da <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80080c2:	6878      	ldr	r0, [r7, #4]
 80080c4:	f000 f904 	bl	80082d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80080c8:	e007      	b.n	80080da <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80080ca:	6878      	ldr	r0, [r7, #4]
 80080cc:	f000 f900 	bl	80082d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	2200      	movs	r2, #0
 80080d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 80080d8:	e0e6      	b.n	80082a8 <HAL_UART_IRQHandler+0x3f0>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80080da:	bf00      	nop
    return;
 80080dc:	e0e4      	b.n	80082a8 <HAL_UART_IRQHandler+0x3f0>
 80080de:	bf00      	nop
 80080e0:	04000120 	.word	0x04000120
 80080e4:	08008caf 	.word	0x08008caf

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80080ec:	2b01      	cmp	r3, #1
 80080ee:	f040 80a5 	bne.w	800823c <HAL_UART_IRQHandler+0x384>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 80080f2:	69fb      	ldr	r3, [r7, #28]
 80080f4:	f003 0310 	and.w	r3, r3, #16
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	f000 809f 	beq.w	800823c <HAL_UART_IRQHandler+0x384>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 80080fe:	69bb      	ldr	r3, [r7, #24]
 8008100:	f003 0310 	and.w	r3, r3, #16
 8008104:	2b00      	cmp	r3, #0
 8008106:	f000 8099 	beq.w	800823c <HAL_UART_IRQHandler+0x384>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	2210      	movs	r2, #16
 8008110:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	689b      	ldr	r3, [r3, #8]
 8008118:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800811c:	2b40      	cmp	r3, #64	; 0x40
 800811e:	d154      	bne.n	80081ca <HAL_UART_IRQHandler+0x312>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	685b      	ldr	r3, [r3, #4]
 8008128:	813b      	strh	r3, [r7, #8]
      if (  (nb_remaining_rx_data > 0U)
 800812a:	893b      	ldrh	r3, [r7, #8]
 800812c:	2b00      	cmp	r3, #0
 800812e:	f000 80bd 	beq.w	80082ac <HAL_UART_IRQHandler+0x3f4>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008138:	893a      	ldrh	r2, [r7, #8]
 800813a:	429a      	cmp	r2, r3
 800813c:	f080 80b6 	bcs.w	80082ac <HAL_UART_IRQHandler+0x3f4>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	893a      	ldrh	r2, [r7, #8]
 8008144:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	f003 0320 	and.w	r3, r3, #32
 8008154:	2b00      	cmp	r3, #0
 8008156:	d12a      	bne.n	80081ae <HAL_UART_IRQHandler+0x2f6>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	681a      	ldr	r2, [r3, #0]
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008166:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	689a      	ldr	r2, [r3, #8]
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	f022 0201 	bic.w	r2, r2, #1
 8008176:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	689a      	ldr	r2, [r3, #8]
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008186:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	2220      	movs	r2, #32
 800818c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	2200      	movs	r2, #0
 8008192:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	681a      	ldr	r2, [r3, #0]
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	f022 0210 	bic.w	r2, r2, #16
 80081a2:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081a8:	4618      	mov	r0, r3
 80081aa:	f7fa fd4f 	bl	8002c4c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80081ba:	b29b      	uxth	r3, r3
 80081bc:	1ad3      	subs	r3, r2, r3
 80081be:	b29b      	uxth	r3, r3
 80081c0:	4619      	mov	r1, r3
 80081c2:	6878      	ldr	r0, [r7, #4]
 80081c4:	f000 f88e 	bl	80082e4 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80081c8:	e070      	b.n	80082ac <HAL_UART_IRQHandler+0x3f4>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80081d6:	b29b      	uxth	r3, r3
 80081d8:	1ad3      	subs	r3, r2, r3
 80081da:	817b      	strh	r3, [r7, #10]
      if (  (huart->RxXferCount > 0U)
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80081e2:	b29b      	uxth	r3, r3
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d063      	beq.n	80082b0 <HAL_UART_IRQHandler+0x3f8>
          &&(nb_rx_data > 0U) )
 80081e8:	897b      	ldrh	r3, [r7, #10]
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d060      	beq.n	80082b0 <HAL_UART_IRQHandler+0x3f8>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	681a      	ldr	r2, [r3, #0]
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80081fc:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	689a      	ldr	r2, [r3, #8]
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	f022 0201 	bic.w	r2, r2, #1
 800820c:	609a      	str	r2, [r3, #8]
#endif

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	2220      	movs	r2, #32
 8008212:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	2200      	movs	r2, #0
 8008218:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	2200      	movs	r2, #0
 800821e:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	681a      	ldr	r2, [r3, #0]
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	f022 0210 	bic.w	r2, r2, #16
 800822e:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008230:	897b      	ldrh	r3, [r7, #10]
 8008232:	4619      	mov	r1, r3
 8008234:	6878      	ldr	r0, [r7, #4]
 8008236:	f000 f855 	bl	80082e4 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800823a:	e039      	b.n	80082b0 <HAL_UART_IRQHandler+0x3f8>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800823c:	69fb      	ldr	r3, [r7, #28]
 800823e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008242:	2b00      	cmp	r3, #0
 8008244:	d00d      	beq.n	8008262 <HAL_UART_IRQHandler+0x3aa>
 8008246:	697b      	ldr	r3, [r7, #20]
 8008248:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800824c:	2b00      	cmp	r3, #0
 800824e:	d008      	beq.n	8008262 <HAL_UART_IRQHandler+0x3aa>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8008258:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800825a:	6878      	ldr	r0, [r7, #4]
 800825c:	f000 fe2e 	bl	8008ebc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008260:	e029      	b.n	80082b6 <HAL_UART_IRQHandler+0x3fe>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8008262:	69fb      	ldr	r3, [r7, #28]
 8008264:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008268:	2b00      	cmp	r3, #0
 800826a:	d00d      	beq.n	8008288 <HAL_UART_IRQHandler+0x3d0>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800826c:	69bb      	ldr	r3, [r7, #24]
 800826e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008272:	2b00      	cmp	r3, #0
 8008274:	d008      	beq.n	8008288 <HAL_UART_IRQHandler+0x3d0>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800827a:	2b00      	cmp	r3, #0
 800827c:	d01a      	beq.n	80082b4 <HAL_UART_IRQHandler+0x3fc>
    {
      huart->TxISR(huart);
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008282:	6878      	ldr	r0, [r7, #4]
 8008284:	4798      	blx	r3
    }
    return;
 8008286:	e015      	b.n	80082b4 <HAL_UART_IRQHandler+0x3fc>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008288:	69fb      	ldr	r3, [r7, #28]
 800828a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800828e:	2b00      	cmp	r3, #0
 8008290:	d011      	beq.n	80082b6 <HAL_UART_IRQHandler+0x3fe>
 8008292:	69bb      	ldr	r3, [r7, #24]
 8008294:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008298:	2b00      	cmp	r3, #0
 800829a:	d00c      	beq.n	80082b6 <HAL_UART_IRQHandler+0x3fe>
  {
    UART_EndTransmit_IT(huart);
 800829c:	6878      	ldr	r0, [r7, #4]
 800829e:	f000 fd1c 	bl	8008cda <UART_EndTransmit_IT>
    return;
 80082a2:	e008      	b.n	80082b6 <HAL_UART_IRQHandler+0x3fe>
      return;
 80082a4:	bf00      	nop
 80082a6:	e006      	b.n	80082b6 <HAL_UART_IRQHandler+0x3fe>
    return;
 80082a8:	bf00      	nop
 80082aa:	e004      	b.n	80082b6 <HAL_UART_IRQHandler+0x3fe>
      return;
 80082ac:	bf00      	nop
 80082ae:	e002      	b.n	80082b6 <HAL_UART_IRQHandler+0x3fe>
      return;
 80082b0:	bf00      	nop
 80082b2:	e000      	b.n	80082b6 <HAL_UART_IRQHandler+0x3fe>
    return;
 80082b4:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80082b6:	3720      	adds	r7, #32
 80082b8:	46bd      	mov	sp, r7
 80082ba:	bd80      	pop	{r7, pc}

080082bc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80082bc:	b480      	push	{r7}
 80082be:	b083      	sub	sp, #12
 80082c0:	af00      	add	r7, sp, #0
 80082c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80082c4:	bf00      	nop
 80082c6:	370c      	adds	r7, #12
 80082c8:	46bd      	mov	sp, r7
 80082ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ce:	4770      	bx	lr

080082d0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80082d0:	b480      	push	{r7}
 80082d2:	b083      	sub	sp, #12
 80082d4:	af00      	add	r7, sp, #0
 80082d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80082d8:	bf00      	nop
 80082da:	370c      	adds	r7, #12
 80082dc:	46bd      	mov	sp, r7
 80082de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e2:	4770      	bx	lr

080082e4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80082e4:	b480      	push	{r7}
 80082e6:	b083      	sub	sp, #12
 80082e8:	af00      	add	r7, sp, #0
 80082ea:	6078      	str	r0, [r7, #4]
 80082ec:	460b      	mov	r3, r1
 80082ee:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80082f0:	bf00      	nop
 80082f2:	370c      	adds	r7, #12
 80082f4:	46bd      	mov	sp, r7
 80082f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082fa:	4770      	bx	lr

080082fc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80082fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008300:	b08a      	sub	sp, #40	; 0x28
 8008302:	af00      	add	r7, sp, #0
 8008304:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008306:	2300      	movs	r3, #0
 8008308:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	689a      	ldr	r2, [r3, #8]
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	691b      	ldr	r3, [r3, #16]
 8008314:	431a      	orrs	r2, r3
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	695b      	ldr	r3, [r3, #20]
 800831a:	431a      	orrs	r2, r3
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	69db      	ldr	r3, [r3, #28]
 8008320:	4313      	orrs	r3, r2
 8008322:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	681a      	ldr	r2, [r3, #0]
 800832a:	4ba4      	ldr	r3, [pc, #656]	; (80085bc <UART_SetConfig+0x2c0>)
 800832c:	4013      	ands	r3, r2
 800832e:	68fa      	ldr	r2, [r7, #12]
 8008330:	6812      	ldr	r2, [r2, #0]
 8008332:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008334:	430b      	orrs	r3, r1
 8008336:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	685b      	ldr	r3, [r3, #4]
 800833e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	68da      	ldr	r2, [r3, #12]
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	430a      	orrs	r2, r1
 800834c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	699b      	ldr	r3, [r3, #24]
 8008352:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	4a99      	ldr	r2, [pc, #612]	; (80085c0 <UART_SetConfig+0x2c4>)
 800835a:	4293      	cmp	r3, r2
 800835c:	d004      	beq.n	8008368 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	6a1b      	ldr	r3, [r3, #32]
 8008362:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008364:	4313      	orrs	r3, r2
 8008366:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	689b      	ldr	r3, [r3, #8]
 800836e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008378:	430a      	orrs	r2, r1
 800837a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	4a90      	ldr	r2, [pc, #576]	; (80085c4 <UART_SetConfig+0x2c8>)
 8008382:	4293      	cmp	r3, r2
 8008384:	d126      	bne.n	80083d4 <UART_SetConfig+0xd8>
 8008386:	4b90      	ldr	r3, [pc, #576]	; (80085c8 <UART_SetConfig+0x2cc>)
 8008388:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800838c:	f003 0303 	and.w	r3, r3, #3
 8008390:	2b03      	cmp	r3, #3
 8008392:	d81b      	bhi.n	80083cc <UART_SetConfig+0xd0>
 8008394:	a201      	add	r2, pc, #4	; (adr r2, 800839c <UART_SetConfig+0xa0>)
 8008396:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800839a:	bf00      	nop
 800839c:	080083ad 	.word	0x080083ad
 80083a0:	080083bd 	.word	0x080083bd
 80083a4:	080083b5 	.word	0x080083b5
 80083a8:	080083c5 	.word	0x080083c5
 80083ac:	2301      	movs	r3, #1
 80083ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80083b2:	e116      	b.n	80085e2 <UART_SetConfig+0x2e6>
 80083b4:	2302      	movs	r3, #2
 80083b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80083ba:	e112      	b.n	80085e2 <UART_SetConfig+0x2e6>
 80083bc:	2304      	movs	r3, #4
 80083be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80083c2:	e10e      	b.n	80085e2 <UART_SetConfig+0x2e6>
 80083c4:	2308      	movs	r3, #8
 80083c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80083ca:	e10a      	b.n	80085e2 <UART_SetConfig+0x2e6>
 80083cc:	2310      	movs	r3, #16
 80083ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80083d2:	e106      	b.n	80085e2 <UART_SetConfig+0x2e6>
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	4a7c      	ldr	r2, [pc, #496]	; (80085cc <UART_SetConfig+0x2d0>)
 80083da:	4293      	cmp	r3, r2
 80083dc:	d138      	bne.n	8008450 <UART_SetConfig+0x154>
 80083de:	4b7a      	ldr	r3, [pc, #488]	; (80085c8 <UART_SetConfig+0x2cc>)
 80083e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80083e4:	f003 030c 	and.w	r3, r3, #12
 80083e8:	2b0c      	cmp	r3, #12
 80083ea:	d82d      	bhi.n	8008448 <UART_SetConfig+0x14c>
 80083ec:	a201      	add	r2, pc, #4	; (adr r2, 80083f4 <UART_SetConfig+0xf8>)
 80083ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083f2:	bf00      	nop
 80083f4:	08008429 	.word	0x08008429
 80083f8:	08008449 	.word	0x08008449
 80083fc:	08008449 	.word	0x08008449
 8008400:	08008449 	.word	0x08008449
 8008404:	08008439 	.word	0x08008439
 8008408:	08008449 	.word	0x08008449
 800840c:	08008449 	.word	0x08008449
 8008410:	08008449 	.word	0x08008449
 8008414:	08008431 	.word	0x08008431
 8008418:	08008449 	.word	0x08008449
 800841c:	08008449 	.word	0x08008449
 8008420:	08008449 	.word	0x08008449
 8008424:	08008441 	.word	0x08008441
 8008428:	2300      	movs	r3, #0
 800842a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800842e:	e0d8      	b.n	80085e2 <UART_SetConfig+0x2e6>
 8008430:	2302      	movs	r3, #2
 8008432:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008436:	e0d4      	b.n	80085e2 <UART_SetConfig+0x2e6>
 8008438:	2304      	movs	r3, #4
 800843a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800843e:	e0d0      	b.n	80085e2 <UART_SetConfig+0x2e6>
 8008440:	2308      	movs	r3, #8
 8008442:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008446:	e0cc      	b.n	80085e2 <UART_SetConfig+0x2e6>
 8008448:	2310      	movs	r3, #16
 800844a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800844e:	e0c8      	b.n	80085e2 <UART_SetConfig+0x2e6>
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	4a5e      	ldr	r2, [pc, #376]	; (80085d0 <UART_SetConfig+0x2d4>)
 8008456:	4293      	cmp	r3, r2
 8008458:	d125      	bne.n	80084a6 <UART_SetConfig+0x1aa>
 800845a:	4b5b      	ldr	r3, [pc, #364]	; (80085c8 <UART_SetConfig+0x2cc>)
 800845c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008460:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008464:	2b30      	cmp	r3, #48	; 0x30
 8008466:	d016      	beq.n	8008496 <UART_SetConfig+0x19a>
 8008468:	2b30      	cmp	r3, #48	; 0x30
 800846a:	d818      	bhi.n	800849e <UART_SetConfig+0x1a2>
 800846c:	2b20      	cmp	r3, #32
 800846e:	d00a      	beq.n	8008486 <UART_SetConfig+0x18a>
 8008470:	2b20      	cmp	r3, #32
 8008472:	d814      	bhi.n	800849e <UART_SetConfig+0x1a2>
 8008474:	2b00      	cmp	r3, #0
 8008476:	d002      	beq.n	800847e <UART_SetConfig+0x182>
 8008478:	2b10      	cmp	r3, #16
 800847a:	d008      	beq.n	800848e <UART_SetConfig+0x192>
 800847c:	e00f      	b.n	800849e <UART_SetConfig+0x1a2>
 800847e:	2300      	movs	r3, #0
 8008480:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008484:	e0ad      	b.n	80085e2 <UART_SetConfig+0x2e6>
 8008486:	2302      	movs	r3, #2
 8008488:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800848c:	e0a9      	b.n	80085e2 <UART_SetConfig+0x2e6>
 800848e:	2304      	movs	r3, #4
 8008490:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008494:	e0a5      	b.n	80085e2 <UART_SetConfig+0x2e6>
 8008496:	2308      	movs	r3, #8
 8008498:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800849c:	e0a1      	b.n	80085e2 <UART_SetConfig+0x2e6>
 800849e:	2310      	movs	r3, #16
 80084a0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80084a4:	e09d      	b.n	80085e2 <UART_SetConfig+0x2e6>
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	4a4a      	ldr	r2, [pc, #296]	; (80085d4 <UART_SetConfig+0x2d8>)
 80084ac:	4293      	cmp	r3, r2
 80084ae:	d125      	bne.n	80084fc <UART_SetConfig+0x200>
 80084b0:	4b45      	ldr	r3, [pc, #276]	; (80085c8 <UART_SetConfig+0x2cc>)
 80084b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80084b6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80084ba:	2bc0      	cmp	r3, #192	; 0xc0
 80084bc:	d016      	beq.n	80084ec <UART_SetConfig+0x1f0>
 80084be:	2bc0      	cmp	r3, #192	; 0xc0
 80084c0:	d818      	bhi.n	80084f4 <UART_SetConfig+0x1f8>
 80084c2:	2b80      	cmp	r3, #128	; 0x80
 80084c4:	d00a      	beq.n	80084dc <UART_SetConfig+0x1e0>
 80084c6:	2b80      	cmp	r3, #128	; 0x80
 80084c8:	d814      	bhi.n	80084f4 <UART_SetConfig+0x1f8>
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d002      	beq.n	80084d4 <UART_SetConfig+0x1d8>
 80084ce:	2b40      	cmp	r3, #64	; 0x40
 80084d0:	d008      	beq.n	80084e4 <UART_SetConfig+0x1e8>
 80084d2:	e00f      	b.n	80084f4 <UART_SetConfig+0x1f8>
 80084d4:	2300      	movs	r3, #0
 80084d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80084da:	e082      	b.n	80085e2 <UART_SetConfig+0x2e6>
 80084dc:	2302      	movs	r3, #2
 80084de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80084e2:	e07e      	b.n	80085e2 <UART_SetConfig+0x2e6>
 80084e4:	2304      	movs	r3, #4
 80084e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80084ea:	e07a      	b.n	80085e2 <UART_SetConfig+0x2e6>
 80084ec:	2308      	movs	r3, #8
 80084ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80084f2:	e076      	b.n	80085e2 <UART_SetConfig+0x2e6>
 80084f4:	2310      	movs	r3, #16
 80084f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80084fa:	e072      	b.n	80085e2 <UART_SetConfig+0x2e6>
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	4a35      	ldr	r2, [pc, #212]	; (80085d8 <UART_SetConfig+0x2dc>)
 8008502:	4293      	cmp	r3, r2
 8008504:	d12a      	bne.n	800855c <UART_SetConfig+0x260>
 8008506:	4b30      	ldr	r3, [pc, #192]	; (80085c8 <UART_SetConfig+0x2cc>)
 8008508:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800850c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008510:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008514:	d01a      	beq.n	800854c <UART_SetConfig+0x250>
 8008516:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800851a:	d81b      	bhi.n	8008554 <UART_SetConfig+0x258>
 800851c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008520:	d00c      	beq.n	800853c <UART_SetConfig+0x240>
 8008522:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008526:	d815      	bhi.n	8008554 <UART_SetConfig+0x258>
 8008528:	2b00      	cmp	r3, #0
 800852a:	d003      	beq.n	8008534 <UART_SetConfig+0x238>
 800852c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008530:	d008      	beq.n	8008544 <UART_SetConfig+0x248>
 8008532:	e00f      	b.n	8008554 <UART_SetConfig+0x258>
 8008534:	2300      	movs	r3, #0
 8008536:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800853a:	e052      	b.n	80085e2 <UART_SetConfig+0x2e6>
 800853c:	2302      	movs	r3, #2
 800853e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008542:	e04e      	b.n	80085e2 <UART_SetConfig+0x2e6>
 8008544:	2304      	movs	r3, #4
 8008546:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800854a:	e04a      	b.n	80085e2 <UART_SetConfig+0x2e6>
 800854c:	2308      	movs	r3, #8
 800854e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008552:	e046      	b.n	80085e2 <UART_SetConfig+0x2e6>
 8008554:	2310      	movs	r3, #16
 8008556:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800855a:	e042      	b.n	80085e2 <UART_SetConfig+0x2e6>
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	4a17      	ldr	r2, [pc, #92]	; (80085c0 <UART_SetConfig+0x2c4>)
 8008562:	4293      	cmp	r3, r2
 8008564:	d13a      	bne.n	80085dc <UART_SetConfig+0x2e0>
 8008566:	4b18      	ldr	r3, [pc, #96]	; (80085c8 <UART_SetConfig+0x2cc>)
 8008568:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800856c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008570:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008574:	d01a      	beq.n	80085ac <UART_SetConfig+0x2b0>
 8008576:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800857a:	d81b      	bhi.n	80085b4 <UART_SetConfig+0x2b8>
 800857c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008580:	d00c      	beq.n	800859c <UART_SetConfig+0x2a0>
 8008582:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008586:	d815      	bhi.n	80085b4 <UART_SetConfig+0x2b8>
 8008588:	2b00      	cmp	r3, #0
 800858a:	d003      	beq.n	8008594 <UART_SetConfig+0x298>
 800858c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008590:	d008      	beq.n	80085a4 <UART_SetConfig+0x2a8>
 8008592:	e00f      	b.n	80085b4 <UART_SetConfig+0x2b8>
 8008594:	2300      	movs	r3, #0
 8008596:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800859a:	e022      	b.n	80085e2 <UART_SetConfig+0x2e6>
 800859c:	2302      	movs	r3, #2
 800859e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80085a2:	e01e      	b.n	80085e2 <UART_SetConfig+0x2e6>
 80085a4:	2304      	movs	r3, #4
 80085a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80085aa:	e01a      	b.n	80085e2 <UART_SetConfig+0x2e6>
 80085ac:	2308      	movs	r3, #8
 80085ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80085b2:	e016      	b.n	80085e2 <UART_SetConfig+0x2e6>
 80085b4:	2310      	movs	r3, #16
 80085b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80085ba:	e012      	b.n	80085e2 <UART_SetConfig+0x2e6>
 80085bc:	efff69f3 	.word	0xefff69f3
 80085c0:	40008000 	.word	0x40008000
 80085c4:	40013800 	.word	0x40013800
 80085c8:	40021000 	.word	0x40021000
 80085cc:	40004400 	.word	0x40004400
 80085d0:	40004800 	.word	0x40004800
 80085d4:	40004c00 	.word	0x40004c00
 80085d8:	40005000 	.word	0x40005000
 80085dc:	2310      	movs	r3, #16
 80085de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	4aa0      	ldr	r2, [pc, #640]	; (8008868 <UART_SetConfig+0x56c>)
 80085e8:	4293      	cmp	r3, r2
 80085ea:	d17a      	bne.n	80086e2 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80085ec:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80085f0:	2b08      	cmp	r3, #8
 80085f2:	d824      	bhi.n	800863e <UART_SetConfig+0x342>
 80085f4:	a201      	add	r2, pc, #4	; (adr r2, 80085fc <UART_SetConfig+0x300>)
 80085f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085fa:	bf00      	nop
 80085fc:	08008621 	.word	0x08008621
 8008600:	0800863f 	.word	0x0800863f
 8008604:	08008629 	.word	0x08008629
 8008608:	0800863f 	.word	0x0800863f
 800860c:	0800862f 	.word	0x0800862f
 8008610:	0800863f 	.word	0x0800863f
 8008614:	0800863f 	.word	0x0800863f
 8008618:	0800863f 	.word	0x0800863f
 800861c:	08008637 	.word	0x08008637
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008620:	f7fc fc04 	bl	8004e2c <HAL_RCC_GetPCLK1Freq>
 8008624:	61f8      	str	r0, [r7, #28]
        break;
 8008626:	e010      	b.n	800864a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008628:	4b90      	ldr	r3, [pc, #576]	; (800886c <UART_SetConfig+0x570>)
 800862a:	61fb      	str	r3, [r7, #28]
        break;
 800862c:	e00d      	b.n	800864a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800862e:	f7fc fb65 	bl	8004cfc <HAL_RCC_GetSysClockFreq>
 8008632:	61f8      	str	r0, [r7, #28]
        break;
 8008634:	e009      	b.n	800864a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008636:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800863a:	61fb      	str	r3, [r7, #28]
        break;
 800863c:	e005      	b.n	800864a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800863e:	2300      	movs	r3, #0
 8008640:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8008642:	2301      	movs	r3, #1
 8008644:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8008648:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800864a:	69fb      	ldr	r3, [r7, #28]
 800864c:	2b00      	cmp	r3, #0
 800864e:	f000 80fd 	beq.w	800884c <UART_SetConfig+0x550>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	685a      	ldr	r2, [r3, #4]
 8008656:	4613      	mov	r3, r2
 8008658:	005b      	lsls	r3, r3, #1
 800865a:	4413      	add	r3, r2
 800865c:	69fa      	ldr	r2, [r7, #28]
 800865e:	429a      	cmp	r2, r3
 8008660:	d305      	bcc.n	800866e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	685b      	ldr	r3, [r3, #4]
 8008666:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8008668:	69fa      	ldr	r2, [r7, #28]
 800866a:	429a      	cmp	r2, r3
 800866c:	d903      	bls.n	8008676 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800866e:	2301      	movs	r3, #1
 8008670:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8008674:	e0ea      	b.n	800884c <UART_SetConfig+0x550>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8008676:	69fb      	ldr	r3, [r7, #28]
 8008678:	2200      	movs	r2, #0
 800867a:	461c      	mov	r4, r3
 800867c:	4615      	mov	r5, r2
 800867e:	f04f 0200 	mov.w	r2, #0
 8008682:	f04f 0300 	mov.w	r3, #0
 8008686:	022b      	lsls	r3, r5, #8
 8008688:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800868c:	0222      	lsls	r2, r4, #8
 800868e:	68f9      	ldr	r1, [r7, #12]
 8008690:	6849      	ldr	r1, [r1, #4]
 8008692:	0849      	lsrs	r1, r1, #1
 8008694:	2000      	movs	r0, #0
 8008696:	4688      	mov	r8, r1
 8008698:	4681      	mov	r9, r0
 800869a:	eb12 0a08 	adds.w	sl, r2, r8
 800869e:	eb43 0b09 	adc.w	fp, r3, r9
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	685b      	ldr	r3, [r3, #4]
 80086a6:	2200      	movs	r2, #0
 80086a8:	603b      	str	r3, [r7, #0]
 80086aa:	607a      	str	r2, [r7, #4]
 80086ac:	e9d7 2300 	ldrd	r2, r3, [r7]
 80086b0:	4650      	mov	r0, sl
 80086b2:	4659      	mov	r1, fp
 80086b4:	f7f7 fde4 	bl	8000280 <__aeabi_uldivmod>
 80086b8:	4602      	mov	r2, r0
 80086ba:	460b      	mov	r3, r1
 80086bc:	4613      	mov	r3, r2
 80086be:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80086c0:	69bb      	ldr	r3, [r7, #24]
 80086c2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80086c6:	d308      	bcc.n	80086da <UART_SetConfig+0x3de>
 80086c8:	69bb      	ldr	r3, [r7, #24]
 80086ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80086ce:	d204      	bcs.n	80086da <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	69ba      	ldr	r2, [r7, #24]
 80086d6:	60da      	str	r2, [r3, #12]
 80086d8:	e0b8      	b.n	800884c <UART_SetConfig+0x550>
        }
        else
        {
          ret = HAL_ERROR;
 80086da:	2301      	movs	r3, #1
 80086dc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80086e0:	e0b4      	b.n	800884c <UART_SetConfig+0x550>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	69db      	ldr	r3, [r3, #28]
 80086e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80086ea:	d15f      	bne.n	80087ac <UART_SetConfig+0x4b0>
  {
    switch (clocksource)
 80086ec:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80086f0:	2b08      	cmp	r3, #8
 80086f2:	d828      	bhi.n	8008746 <UART_SetConfig+0x44a>
 80086f4:	a201      	add	r2, pc, #4	; (adr r2, 80086fc <UART_SetConfig+0x400>)
 80086f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086fa:	bf00      	nop
 80086fc:	08008721 	.word	0x08008721
 8008700:	08008729 	.word	0x08008729
 8008704:	08008731 	.word	0x08008731
 8008708:	08008747 	.word	0x08008747
 800870c:	08008737 	.word	0x08008737
 8008710:	08008747 	.word	0x08008747
 8008714:	08008747 	.word	0x08008747
 8008718:	08008747 	.word	0x08008747
 800871c:	0800873f 	.word	0x0800873f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008720:	f7fc fb84 	bl	8004e2c <HAL_RCC_GetPCLK1Freq>
 8008724:	61f8      	str	r0, [r7, #28]
        break;
 8008726:	e014      	b.n	8008752 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008728:	f7fc fb96 	bl	8004e58 <HAL_RCC_GetPCLK2Freq>
 800872c:	61f8      	str	r0, [r7, #28]
        break;
 800872e:	e010      	b.n	8008752 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008730:	4b4e      	ldr	r3, [pc, #312]	; (800886c <UART_SetConfig+0x570>)
 8008732:	61fb      	str	r3, [r7, #28]
        break;
 8008734:	e00d      	b.n	8008752 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008736:	f7fc fae1 	bl	8004cfc <HAL_RCC_GetSysClockFreq>
 800873a:	61f8      	str	r0, [r7, #28]
        break;
 800873c:	e009      	b.n	8008752 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800873e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008742:	61fb      	str	r3, [r7, #28]
        break;
 8008744:	e005      	b.n	8008752 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8008746:	2300      	movs	r3, #0
 8008748:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800874a:	2301      	movs	r3, #1
 800874c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8008750:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008752:	69fb      	ldr	r3, [r7, #28]
 8008754:	2b00      	cmp	r3, #0
 8008756:	d079      	beq.n	800884c <UART_SetConfig+0x550>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008758:	69fb      	ldr	r3, [r7, #28]
 800875a:	005a      	lsls	r2, r3, #1
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	685b      	ldr	r3, [r3, #4]
 8008760:	085b      	lsrs	r3, r3, #1
 8008762:	441a      	add	r2, r3
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	685b      	ldr	r3, [r3, #4]
 8008768:	fbb2 f3f3 	udiv	r3, r2, r3
 800876c:	b29b      	uxth	r3, r3
 800876e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008770:	69bb      	ldr	r3, [r7, #24]
 8008772:	2b0f      	cmp	r3, #15
 8008774:	d916      	bls.n	80087a4 <UART_SetConfig+0x4a8>
 8008776:	69bb      	ldr	r3, [r7, #24]
 8008778:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800877c:	d212      	bcs.n	80087a4 <UART_SetConfig+0x4a8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800877e:	69bb      	ldr	r3, [r7, #24]
 8008780:	b29b      	uxth	r3, r3
 8008782:	f023 030f 	bic.w	r3, r3, #15
 8008786:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008788:	69bb      	ldr	r3, [r7, #24]
 800878a:	085b      	lsrs	r3, r3, #1
 800878c:	b29b      	uxth	r3, r3
 800878e:	f003 0307 	and.w	r3, r3, #7
 8008792:	b29a      	uxth	r2, r3
 8008794:	8afb      	ldrh	r3, [r7, #22]
 8008796:	4313      	orrs	r3, r2
 8008798:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	8afa      	ldrh	r2, [r7, #22]
 80087a0:	60da      	str	r2, [r3, #12]
 80087a2:	e053      	b.n	800884c <UART_SetConfig+0x550>
      }
      else
      {
        ret = HAL_ERROR;
 80087a4:	2301      	movs	r3, #1
 80087a6:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80087aa:	e04f      	b.n	800884c <UART_SetConfig+0x550>
      }
    }
  }
  else
  {
    switch (clocksource)
 80087ac:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80087b0:	2b08      	cmp	r3, #8
 80087b2:	d828      	bhi.n	8008806 <UART_SetConfig+0x50a>
 80087b4:	a201      	add	r2, pc, #4	; (adr r2, 80087bc <UART_SetConfig+0x4c0>)
 80087b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087ba:	bf00      	nop
 80087bc:	080087e1 	.word	0x080087e1
 80087c0:	080087e9 	.word	0x080087e9
 80087c4:	080087f1 	.word	0x080087f1
 80087c8:	08008807 	.word	0x08008807
 80087cc:	080087f7 	.word	0x080087f7
 80087d0:	08008807 	.word	0x08008807
 80087d4:	08008807 	.word	0x08008807
 80087d8:	08008807 	.word	0x08008807
 80087dc:	080087ff 	.word	0x080087ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80087e0:	f7fc fb24 	bl	8004e2c <HAL_RCC_GetPCLK1Freq>
 80087e4:	61f8      	str	r0, [r7, #28]
        break;
 80087e6:	e014      	b.n	8008812 <UART_SetConfig+0x516>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80087e8:	f7fc fb36 	bl	8004e58 <HAL_RCC_GetPCLK2Freq>
 80087ec:	61f8      	str	r0, [r7, #28]
        break;
 80087ee:	e010      	b.n	8008812 <UART_SetConfig+0x516>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80087f0:	4b1e      	ldr	r3, [pc, #120]	; (800886c <UART_SetConfig+0x570>)
 80087f2:	61fb      	str	r3, [r7, #28]
        break;
 80087f4:	e00d      	b.n	8008812 <UART_SetConfig+0x516>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80087f6:	f7fc fa81 	bl	8004cfc <HAL_RCC_GetSysClockFreq>
 80087fa:	61f8      	str	r0, [r7, #28]
        break;
 80087fc:	e009      	b.n	8008812 <UART_SetConfig+0x516>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80087fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008802:	61fb      	str	r3, [r7, #28]
        break;
 8008804:	e005      	b.n	8008812 <UART_SetConfig+0x516>
      default:
        pclk = 0U;
 8008806:	2300      	movs	r3, #0
 8008808:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800880a:	2301      	movs	r3, #1
 800880c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8008810:	bf00      	nop
    }

    if (pclk != 0U)
 8008812:	69fb      	ldr	r3, [r7, #28]
 8008814:	2b00      	cmp	r3, #0
 8008816:	d019      	beq.n	800884c <UART_SetConfig+0x550>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	685b      	ldr	r3, [r3, #4]
 800881c:	085a      	lsrs	r2, r3, #1
 800881e:	69fb      	ldr	r3, [r7, #28]
 8008820:	441a      	add	r2, r3
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	685b      	ldr	r3, [r3, #4]
 8008826:	fbb2 f3f3 	udiv	r3, r2, r3
 800882a:	b29b      	uxth	r3, r3
 800882c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800882e:	69bb      	ldr	r3, [r7, #24]
 8008830:	2b0f      	cmp	r3, #15
 8008832:	d908      	bls.n	8008846 <UART_SetConfig+0x54a>
 8008834:	69bb      	ldr	r3, [r7, #24]
 8008836:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800883a:	d204      	bcs.n	8008846 <UART_SetConfig+0x54a>
      {
        huart->Instance->BRR = usartdiv;
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	69ba      	ldr	r2, [r7, #24]
 8008842:	60da      	str	r2, [r3, #12]
 8008844:	e002      	b.n	800884c <UART_SetConfig+0x550>
      }
      else
      {
        ret = HAL_ERROR;
 8008846:	2301      	movs	r3, #1
 8008848:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	2200      	movs	r2, #0
 8008850:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	2200      	movs	r2, #0
 8008856:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8008858:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 800885c:	4618      	mov	r0, r3
 800885e:	3728      	adds	r7, #40	; 0x28
 8008860:	46bd      	mov	sp, r7
 8008862:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008866:	bf00      	nop
 8008868:	40008000 	.word	0x40008000
 800886c:	00f42400 	.word	0x00f42400

08008870 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008870:	b480      	push	{r7}
 8008872:	b083      	sub	sp, #12
 8008874:	af00      	add	r7, sp, #0
 8008876:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800887c:	f003 0301 	and.w	r3, r3, #1
 8008880:	2b00      	cmp	r3, #0
 8008882:	d00a      	beq.n	800889a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	685b      	ldr	r3, [r3, #4]
 800888a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	430a      	orrs	r2, r1
 8008898:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800889e:	f003 0302 	and.w	r3, r3, #2
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d00a      	beq.n	80088bc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	685b      	ldr	r3, [r3, #4]
 80088ac:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	430a      	orrs	r2, r1
 80088ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088c0:	f003 0304 	and.w	r3, r3, #4
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d00a      	beq.n	80088de <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	685b      	ldr	r3, [r3, #4]
 80088ce:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	430a      	orrs	r2, r1
 80088dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088e2:	f003 0308 	and.w	r3, r3, #8
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d00a      	beq.n	8008900 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	685b      	ldr	r3, [r3, #4]
 80088f0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	430a      	orrs	r2, r1
 80088fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008904:	f003 0310 	and.w	r3, r3, #16
 8008908:	2b00      	cmp	r3, #0
 800890a:	d00a      	beq.n	8008922 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	689b      	ldr	r3, [r3, #8]
 8008912:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	430a      	orrs	r2, r1
 8008920:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008926:	f003 0320 	and.w	r3, r3, #32
 800892a:	2b00      	cmp	r3, #0
 800892c:	d00a      	beq.n	8008944 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	689b      	ldr	r3, [r3, #8]
 8008934:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	430a      	orrs	r2, r1
 8008942:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008948:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800894c:	2b00      	cmp	r3, #0
 800894e:	d01a      	beq.n	8008986 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	685b      	ldr	r3, [r3, #4]
 8008956:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	430a      	orrs	r2, r1
 8008964:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800896a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800896e:	d10a      	bne.n	8008986 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	685b      	ldr	r3, [r3, #4]
 8008976:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	430a      	orrs	r2, r1
 8008984:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800898a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800898e:	2b00      	cmp	r3, #0
 8008990:	d00a      	beq.n	80089a8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	685b      	ldr	r3, [r3, #4]
 8008998:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	430a      	orrs	r2, r1
 80089a6:	605a      	str	r2, [r3, #4]
  }
}
 80089a8:	bf00      	nop
 80089aa:	370c      	adds	r7, #12
 80089ac:	46bd      	mov	sp, r7
 80089ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b2:	4770      	bx	lr

080089b4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80089b4:	b580      	push	{r7, lr}
 80089b6:	b086      	sub	sp, #24
 80089b8:	af02      	add	r7, sp, #8
 80089ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	2200      	movs	r2, #0
 80089c0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80089c4:	f7f9 fef2 	bl	80027ac <HAL_GetTick>
 80089c8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	f003 0308 	and.w	r3, r3, #8
 80089d4:	2b08      	cmp	r3, #8
 80089d6:	d10e      	bne.n	80089f6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80089d8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80089dc:	9300      	str	r3, [sp, #0]
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	2200      	movs	r2, #0
 80089e2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80089e6:	6878      	ldr	r0, [r7, #4]
 80089e8:	f000 f82d 	bl	8008a46 <UART_WaitOnFlagUntilTimeout>
 80089ec:	4603      	mov	r3, r0
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d001      	beq.n	80089f6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80089f2:	2303      	movs	r3, #3
 80089f4:	e023      	b.n	8008a3e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	f003 0304 	and.w	r3, r3, #4
 8008a00:	2b04      	cmp	r3, #4
 8008a02:	d10e      	bne.n	8008a22 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008a04:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008a08:	9300      	str	r3, [sp, #0]
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	2200      	movs	r2, #0
 8008a0e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008a12:	6878      	ldr	r0, [r7, #4]
 8008a14:	f000 f817 	bl	8008a46 <UART_WaitOnFlagUntilTimeout>
 8008a18:	4603      	mov	r3, r0
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d001      	beq.n	8008a22 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008a1e:	2303      	movs	r3, #3
 8008a20:	e00d      	b.n	8008a3e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	2220      	movs	r2, #32
 8008a26:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	2220      	movs	r2, #32
 8008a2c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	2200      	movs	r2, #0
 8008a32:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	2200      	movs	r2, #0
 8008a38:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8008a3c:	2300      	movs	r3, #0
}
 8008a3e:	4618      	mov	r0, r3
 8008a40:	3710      	adds	r7, #16
 8008a42:	46bd      	mov	sp, r7
 8008a44:	bd80      	pop	{r7, pc}

08008a46 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008a46:	b580      	push	{r7, lr}
 8008a48:	b084      	sub	sp, #16
 8008a4a:	af00      	add	r7, sp, #0
 8008a4c:	60f8      	str	r0, [r7, #12]
 8008a4e:	60b9      	str	r1, [r7, #8]
 8008a50:	603b      	str	r3, [r7, #0]
 8008a52:	4613      	mov	r3, r2
 8008a54:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008a56:	e05e      	b.n	8008b16 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008a58:	69bb      	ldr	r3, [r7, #24]
 8008a5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a5e:	d05a      	beq.n	8008b16 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008a60:	f7f9 fea4 	bl	80027ac <HAL_GetTick>
 8008a64:	4602      	mov	r2, r0
 8008a66:	683b      	ldr	r3, [r7, #0]
 8008a68:	1ad3      	subs	r3, r2, r3
 8008a6a:	69ba      	ldr	r2, [r7, #24]
 8008a6c:	429a      	cmp	r2, r3
 8008a6e:	d302      	bcc.n	8008a76 <UART_WaitOnFlagUntilTimeout+0x30>
 8008a70:	69bb      	ldr	r3, [r7, #24]
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d11b      	bne.n	8008aae <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	681a      	ldr	r2, [r3, #0]
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008a84:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	689a      	ldr	r2, [r3, #8]
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	f022 0201 	bic.w	r2, r2, #1
 8008a94:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	2220      	movs	r2, #32
 8008a9a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	2220      	movs	r2, #32
 8008aa0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	2200      	movs	r2, #0
 8008aa6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8008aaa:	2303      	movs	r3, #3
 8008aac:	e043      	b.n	8008b36 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	f003 0304 	and.w	r3, r3, #4
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d02c      	beq.n	8008b16 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	69db      	ldr	r3, [r3, #28]
 8008ac2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008ac6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008aca:	d124      	bne.n	8008b16 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008ad4:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	681a      	ldr	r2, [r3, #0]
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008ae4:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	689a      	ldr	r2, [r3, #8]
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	f022 0201 	bic.w	r2, r2, #1
 8008af4:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	2220      	movs	r2, #32
 8008afa:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	2220      	movs	r2, #32
 8008b00:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	2220      	movs	r2, #32
 8008b06:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	2200      	movs	r2, #0
 8008b0e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8008b12:	2303      	movs	r3, #3
 8008b14:	e00f      	b.n	8008b36 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	69da      	ldr	r2, [r3, #28]
 8008b1c:	68bb      	ldr	r3, [r7, #8]
 8008b1e:	4013      	ands	r3, r2
 8008b20:	68ba      	ldr	r2, [r7, #8]
 8008b22:	429a      	cmp	r2, r3
 8008b24:	bf0c      	ite	eq
 8008b26:	2301      	moveq	r3, #1
 8008b28:	2300      	movne	r3, #0
 8008b2a:	b2db      	uxtb	r3, r3
 8008b2c:	461a      	mov	r2, r3
 8008b2e:	79fb      	ldrb	r3, [r7, #7]
 8008b30:	429a      	cmp	r2, r3
 8008b32:	d091      	beq.n	8008a58 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008b34:	2300      	movs	r3, #0
}
 8008b36:	4618      	mov	r0, r3
 8008b38:	3710      	adds	r7, #16
 8008b3a:	46bd      	mov	sp, r7
 8008b3c:	bd80      	pop	{r7, pc}
	...

08008b40 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008b40:	b480      	push	{r7}
 8008b42:	b085      	sub	sp, #20
 8008b44:	af00      	add	r7, sp, #0
 8008b46:	60f8      	str	r0, [r7, #12]
 8008b48:	60b9      	str	r1, [r7, #8]
 8008b4a:	4613      	mov	r3, r2
 8008b4c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	68ba      	ldr	r2, [r7, #8]
 8008b52:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	88fa      	ldrh	r2, [r7, #6]
 8008b58:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	88fa      	ldrh	r2, [r7, #6]
 8008b60:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	2200      	movs	r2, #0
 8008b68:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	689b      	ldr	r3, [r3, #8]
 8008b6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008b72:	d10e      	bne.n	8008b92 <UART_Start_Receive_IT+0x52>
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	691b      	ldr	r3, [r3, #16]
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d105      	bne.n	8008b88 <UART_Start_Receive_IT+0x48>
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8008b82:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008b86:	e02d      	b.n	8008be4 <UART_Start_Receive_IT+0xa4>
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	22ff      	movs	r2, #255	; 0xff
 8008b8c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008b90:	e028      	b.n	8008be4 <UART_Start_Receive_IT+0xa4>
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	689b      	ldr	r3, [r3, #8]
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d10d      	bne.n	8008bb6 <UART_Start_Receive_IT+0x76>
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	691b      	ldr	r3, [r3, #16]
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d104      	bne.n	8008bac <UART_Start_Receive_IT+0x6c>
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	22ff      	movs	r2, #255	; 0xff
 8008ba6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008baa:	e01b      	b.n	8008be4 <UART_Start_Receive_IT+0xa4>
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	227f      	movs	r2, #127	; 0x7f
 8008bb0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008bb4:	e016      	b.n	8008be4 <UART_Start_Receive_IT+0xa4>
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	689b      	ldr	r3, [r3, #8]
 8008bba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008bbe:	d10d      	bne.n	8008bdc <UART_Start_Receive_IT+0x9c>
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	691b      	ldr	r3, [r3, #16]
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d104      	bne.n	8008bd2 <UART_Start_Receive_IT+0x92>
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	227f      	movs	r2, #127	; 0x7f
 8008bcc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008bd0:	e008      	b.n	8008be4 <UART_Start_Receive_IT+0xa4>
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	223f      	movs	r2, #63	; 0x3f
 8008bd6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008bda:	e003      	b.n	8008be4 <UART_Start_Receive_IT+0xa4>
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	2200      	movs	r2, #0
 8008be0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	2200      	movs	r2, #0
 8008be8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	2222      	movs	r2, #34	; 0x22
 8008bf0:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	689a      	ldr	r2, [r3, #8]
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	f042 0201 	orr.w	r2, r2, #1
 8008c00:	609a      	str	r2, [r3, #8]
    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	689b      	ldr	r3, [r3, #8]
 8008c06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008c0a:	d107      	bne.n	8008c1c <UART_Start_Receive_IT+0xdc>
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	691b      	ldr	r3, [r3, #16]
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d103      	bne.n	8008c1c <UART_Start_Receive_IT+0xdc>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	4a0c      	ldr	r2, [pc, #48]	; (8008c48 <UART_Start_Receive_IT+0x108>)
 8008c18:	665a      	str	r2, [r3, #100]	; 0x64
 8008c1a:	e002      	b.n	8008c22 <UART_Start_Receive_IT+0xe2>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	4a0b      	ldr	r2, [pc, #44]	; (8008c4c <UART_Start_Receive_IT+0x10c>)
 8008c20:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	2200      	movs	r2, #0
 8008c26:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	681a      	ldr	r2, [r3, #0]
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8008c38:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8008c3a:	2300      	movs	r3, #0
}
 8008c3c:	4618      	mov	r0, r3
 8008c3e:	3714      	adds	r7, #20
 8008c40:	46bd      	mov	sp, r7
 8008c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c46:	4770      	bx	lr
 8008c48:	08008de5 	.word	0x08008de5
 8008c4c:	08008d0d 	.word	0x08008d0d

08008c50 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008c50:	b480      	push	{r7}
 8008c52:	b083      	sub	sp, #12
 8008c54:	af00      	add	r7, sp, #0
 8008c56:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	681a      	ldr	r2, [r3, #0]
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008c66:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	689a      	ldr	r2, [r3, #8]
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	f022 0201 	bic.w	r2, r2, #1
 8008c76:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008c7c:	2b01      	cmp	r3, #1
 8008c7e:	d107      	bne.n	8008c90 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	681a      	ldr	r2, [r3, #0]
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	f022 0210 	bic.w	r2, r2, #16
 8008c8e:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	2220      	movs	r2, #32
 8008c94:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	2200      	movs	r2, #0
 8008c9a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	2200      	movs	r2, #0
 8008ca0:	665a      	str	r2, [r3, #100]	; 0x64
}
 8008ca2:	bf00      	nop
 8008ca4:	370c      	adds	r7, #12
 8008ca6:	46bd      	mov	sp, r7
 8008ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cac:	4770      	bx	lr

08008cae <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008cae:	b580      	push	{r7, lr}
 8008cb0:	b084      	sub	sp, #16
 8008cb2:	af00      	add	r7, sp, #0
 8008cb4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cba:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	2200      	movs	r2, #0
 8008cc0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	2200      	movs	r2, #0
 8008cc8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008ccc:	68f8      	ldr	r0, [r7, #12]
 8008cce:	f7ff faff 	bl	80082d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008cd2:	bf00      	nop
 8008cd4:	3710      	adds	r7, #16
 8008cd6:	46bd      	mov	sp, r7
 8008cd8:	bd80      	pop	{r7, pc}

08008cda <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008cda:	b580      	push	{r7, lr}
 8008cdc:	b082      	sub	sp, #8
 8008cde:	af00      	add	r7, sp, #0
 8008ce0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	681a      	ldr	r2, [r3, #0]
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008cf0:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	2220      	movs	r2, #32
 8008cf6:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	2200      	movs	r2, #0
 8008cfc:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008cfe:	6878      	ldr	r0, [r7, #4]
 8008d00:	f7ff fadc 	bl	80082bc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008d04:	bf00      	nop
 8008d06:	3708      	adds	r7, #8
 8008d08:	46bd      	mov	sp, r7
 8008d0a:	bd80      	pop	{r7, pc}

08008d0c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008d0c:	b580      	push	{r7, lr}
 8008d0e:	b084      	sub	sp, #16
 8008d10:	af00      	add	r7, sp, #0
 8008d12:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008d1a:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008d20:	2b22      	cmp	r3, #34	; 0x22
 8008d22:	d151      	bne.n	8008dc8 <UART_RxISR_8BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8008d2a:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008d2c:	89bb      	ldrh	r3, [r7, #12]
 8008d2e:	b2d9      	uxtb	r1, r3
 8008d30:	89fb      	ldrh	r3, [r7, #14]
 8008d32:	b2da      	uxtb	r2, r3
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d38:	400a      	ands	r2, r1
 8008d3a:	b2d2      	uxtb	r2, r2
 8008d3c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d42:	1c5a      	adds	r2, r3, #1
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008d4e:	b29b      	uxth	r3, r3
 8008d50:	3b01      	subs	r3, #1
 8008d52:	b29a      	uxth	r2, r3
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008d60:	b29b      	uxth	r3, r3
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d13a      	bne.n	8008ddc <UART_RxISR_8BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	681a      	ldr	r2, [r3, #0]
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008d74:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	689a      	ldr	r2, [r3, #8]
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	f022 0201 	bic.w	r2, r2, #1
 8008d84:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	2220      	movs	r2, #32
 8008d8a:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	2200      	movs	r2, #0
 8008d90:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008d96:	2b01      	cmp	r3, #1
 8008d98:	d10f      	bne.n	8008dba <UART_RxISR_8BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	681a      	ldr	r2, [r3, #0]
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	f022 0210 	bic.w	r2, r2, #16
 8008da8:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008db0:	4619      	mov	r1, r3
 8008db2:	6878      	ldr	r0, [r7, #4]
 8008db4:	f7ff fa96 	bl	80082e4 <HAL_UARTEx_RxEventCallback>
 8008db8:	e002      	b.n	8008dc0 <UART_RxISR_8BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008dba:	6878      	ldr	r0, [r7, #4]
 8008dbc:	f7f8 f934 	bl	8001028 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	2200      	movs	r2, #0
 8008dc4:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008dc6:	e009      	b.n	8008ddc <UART_RxISR_8BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	8b1b      	ldrh	r3, [r3, #24]
 8008dce:	b29a      	uxth	r2, r3
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	f042 0208 	orr.w	r2, r2, #8
 8008dd8:	b292      	uxth	r2, r2
 8008dda:	831a      	strh	r2, [r3, #24]
}
 8008ddc:	bf00      	nop
 8008dde:	3710      	adds	r7, #16
 8008de0:	46bd      	mov	sp, r7
 8008de2:	bd80      	pop	{r7, pc}

08008de4 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008de4:	b580      	push	{r7, lr}
 8008de6:	b084      	sub	sp, #16
 8008de8:	af00      	add	r7, sp, #0
 8008dea:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008df2:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008df8:	2b22      	cmp	r3, #34	; 0x22
 8008dfa:	d151      	bne.n	8008ea0 <UART_RxISR_16BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8008e02:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e08:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8008e0a:	89ba      	ldrh	r2, [r7, #12]
 8008e0c:	89fb      	ldrh	r3, [r7, #14]
 8008e0e:	4013      	ands	r3, r2
 8008e10:	b29a      	uxth	r2, r3
 8008e12:	68bb      	ldr	r3, [r7, #8]
 8008e14:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e1a:	1c9a      	adds	r2, r3, #2
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008e26:	b29b      	uxth	r3, r3
 8008e28:	3b01      	subs	r3, #1
 8008e2a:	b29a      	uxth	r2, r3
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008e38:	b29b      	uxth	r3, r3
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d13a      	bne.n	8008eb4 <UART_RxISR_16BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	681a      	ldr	r2, [r3, #0]
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008e4c:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	689a      	ldr	r2, [r3, #8]
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	f022 0201 	bic.w	r2, r2, #1
 8008e5c:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	2220      	movs	r2, #32
 8008e62:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	2200      	movs	r2, #0
 8008e68:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008e6e:	2b01      	cmp	r3, #1
 8008e70:	d10f      	bne.n	8008e92 <UART_RxISR_16BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	681a      	ldr	r2, [r3, #0]
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	f022 0210 	bic.w	r2, r2, #16
 8008e80:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008e88:	4619      	mov	r1, r3
 8008e8a:	6878      	ldr	r0, [r7, #4]
 8008e8c:	f7ff fa2a 	bl	80082e4 <HAL_UARTEx_RxEventCallback>
 8008e90:	e002      	b.n	8008e98 <UART_RxISR_16BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008e92:	6878      	ldr	r0, [r7, #4]
 8008e94:	f7f8 f8c8 	bl	8001028 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	2200      	movs	r2, #0
 8008e9c:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008e9e:	e009      	b.n	8008eb4 <UART_RxISR_16BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	8b1b      	ldrh	r3, [r3, #24]
 8008ea6:	b29a      	uxth	r2, r3
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	f042 0208 	orr.w	r2, r2, #8
 8008eb0:	b292      	uxth	r2, r2
 8008eb2:	831a      	strh	r2, [r3, #24]
}
 8008eb4:	bf00      	nop
 8008eb6:	3710      	adds	r7, #16
 8008eb8:	46bd      	mov	sp, r7
 8008eba:	bd80      	pop	{r7, pc}

08008ebc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008ebc:	b480      	push	{r7}
 8008ebe:	b083      	sub	sp, #12
 8008ec0:	af00      	add	r7, sp, #0
 8008ec2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008ec4:	bf00      	nop
 8008ec6:	370c      	adds	r7, #12
 8008ec8:	46bd      	mov	sp, r7
 8008eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ece:	4770      	bx	lr

08008ed0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008ed0:	b084      	sub	sp, #16
 8008ed2:	b580      	push	{r7, lr}
 8008ed4:	b084      	sub	sp, #16
 8008ed6:	af00      	add	r7, sp, #0
 8008ed8:	6078      	str	r0, [r7, #4]
 8008eda:	f107 001c 	add.w	r0, r7, #28
 8008ede:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;


  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	68db      	ldr	r3, [r3, #12]
 8008ee6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8008eee:	6878      	ldr	r0, [r7, #4]
 8008ef0:	f000 fa24 	bl	800933c <USB_CoreReset>
 8008ef4:	4603      	mov	r3, r0
 8008ef6:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8008ef8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d106      	bne.n	8008f0c <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f02:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	639a      	str	r2, [r3, #56]	; 0x38
 8008f0a:	e005      	b.n	8008f18 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f10:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 8008f18:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f1a:	4618      	mov	r0, r3
 8008f1c:	3710      	adds	r7, #16
 8008f1e:	46bd      	mov	sp, r7
 8008f20:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008f24:	b004      	add	sp, #16
 8008f26:	4770      	bx	lr

08008f28 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008f28:	b480      	push	{r7}
 8008f2a:	b083      	sub	sp, #12
 8008f2c:	af00      	add	r7, sp, #0
 8008f2e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	689b      	ldr	r3, [r3, #8]
 8008f34:	f023 0201 	bic.w	r2, r3, #1
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008f3c:	2300      	movs	r3, #0
}
 8008f3e:	4618      	mov	r0, r3
 8008f40:	370c      	adds	r7, #12
 8008f42:	46bd      	mov	sp, r7
 8008f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f48:	4770      	bx	lr

08008f4a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8008f4a:	b580      	push	{r7, lr}
 8008f4c:	b082      	sub	sp, #8
 8008f4e:	af00      	add	r7, sp, #0
 8008f50:	6078      	str	r0, [r7, #4]
 8008f52:	460b      	mov	r3, r1
 8008f54:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	68db      	ldr	r3, [r3, #12]
 8008f5a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008f62:	78fb      	ldrb	r3, [r7, #3]
 8008f64:	2b01      	cmp	r3, #1
 8008f66:	d106      	bne.n	8008f76 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	68db      	ldr	r3, [r3, #12]
 8008f6c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	60da      	str	r2, [r3, #12]
 8008f74:	e00b      	b.n	8008f8e <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8008f76:	78fb      	ldrb	r3, [r7, #3]
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d106      	bne.n	8008f8a <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	68db      	ldr	r3, [r3, #12]
 8008f80:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	60da      	str	r2, [r3, #12]
 8008f88:	e001      	b.n	8008f8e <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8008f8a:	2301      	movs	r3, #1
 8008f8c:	e003      	b.n	8008f96 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8008f8e:	2032      	movs	r0, #50	; 0x32
 8008f90:	f7f9 fc18 	bl	80027c4 <HAL_Delay>

  return HAL_OK;
 8008f94:	2300      	movs	r3, #0
}
 8008f96:	4618      	mov	r0, r3
 8008f98:	3708      	adds	r7, #8
 8008f9a:	46bd      	mov	sp, r7
 8008f9c:	bd80      	pop	{r7, pc}
	...

08008fa0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008fa0:	b084      	sub	sp, #16
 8008fa2:	b580      	push	{r7, lr}
 8008fa4:	b086      	sub	sp, #24
 8008fa6:	af00      	add	r7, sp, #0
 8008fa8:	6078      	str	r0, [r7, #4]
 8008faa:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8008fae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008fb2:	2300      	movs	r3, #0
 8008fb4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8008fba:	2300      	movs	r3, #0
 8008fbc:	613b      	str	r3, [r7, #16]
 8008fbe:	e009      	b.n	8008fd4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008fc0:	687a      	ldr	r2, [r7, #4]
 8008fc2:	693b      	ldr	r3, [r7, #16]
 8008fc4:	3340      	adds	r3, #64	; 0x40
 8008fc6:	009b      	lsls	r3, r3, #2
 8008fc8:	4413      	add	r3, r2
 8008fca:	2200      	movs	r2, #0
 8008fcc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8008fce:	693b      	ldr	r3, [r7, #16]
 8008fd0:	3301      	adds	r3, #1
 8008fd2:	613b      	str	r3, [r7, #16]
 8008fd4:	693b      	ldr	r3, [r7, #16]
 8008fd6:	2b0e      	cmp	r3, #14
 8008fd8:	d9f2      	bls.n	8008fc0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8008fda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d11c      	bne.n	800901a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008fe6:	685b      	ldr	r3, [r3, #4]
 8008fe8:	68fa      	ldr	r2, [r7, #12]
 8008fea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008fee:	f043 0302 	orr.w	r3, r3, #2
 8008ff2:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ff8:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	601a      	str	r2, [r3, #0]
 8009018:	e005      	b.n	8009026 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800901e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800902c:	461a      	mov	r2, r3
 800902e:	2300      	movs	r3, #0
 8009030:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009038:	4619      	mov	r1, r3
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009040:	461a      	mov	r2, r3
 8009042:	680b      	ldr	r3, [r1, #0]
 8009044:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8009046:	2103      	movs	r1, #3
 8009048:	6878      	ldr	r0, [r7, #4]
 800904a:	f000 f93d 	bl	80092c8 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800904e:	2110      	movs	r1, #16
 8009050:	6878      	ldr	r0, [r7, #4]
 8009052:	f000 f8f1 	bl	8009238 <USB_FlushTxFifo>
 8009056:	4603      	mov	r3, r0
 8009058:	2b00      	cmp	r3, #0
 800905a:	d001      	beq.n	8009060 <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 800905c:	2301      	movs	r3, #1
 800905e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009060:	6878      	ldr	r0, [r7, #4]
 8009062:	f000 f90f 	bl	8009284 <USB_FlushRxFifo>
 8009066:	4603      	mov	r3, r0
 8009068:	2b00      	cmp	r3, #0
 800906a:	d001      	beq.n	8009070 <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 800906c:	2301      	movs	r3, #1
 800906e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009076:	461a      	mov	r2, r3
 8009078:	2300      	movs	r3, #0
 800907a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009082:	461a      	mov	r2, r3
 8009084:	2300      	movs	r3, #0
 8009086:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800908e:	461a      	mov	r2, r3
 8009090:	2300      	movs	r3, #0
 8009092:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009094:	2300      	movs	r3, #0
 8009096:	613b      	str	r3, [r7, #16]
 8009098:	e043      	b.n	8009122 <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800909a:	693b      	ldr	r3, [r7, #16]
 800909c:	015a      	lsls	r2, r3, #5
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	4413      	add	r3, r2
 80090a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80090ac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80090b0:	d118      	bne.n	80090e4 <USB_DevInit+0x144>
    {
      if (i == 0U)
 80090b2:	693b      	ldr	r3, [r7, #16]
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d10a      	bne.n	80090ce <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80090b8:	693b      	ldr	r3, [r7, #16]
 80090ba:	015a      	lsls	r2, r3, #5
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	4413      	add	r3, r2
 80090c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80090c4:	461a      	mov	r2, r3
 80090c6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80090ca:	6013      	str	r3, [r2, #0]
 80090cc:	e013      	b.n	80090f6 <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80090ce:	693b      	ldr	r3, [r7, #16]
 80090d0:	015a      	lsls	r2, r3, #5
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	4413      	add	r3, r2
 80090d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80090da:	461a      	mov	r2, r3
 80090dc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80090e0:	6013      	str	r3, [r2, #0]
 80090e2:	e008      	b.n	80090f6 <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80090e4:	693b      	ldr	r3, [r7, #16]
 80090e6:	015a      	lsls	r2, r3, #5
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	4413      	add	r3, r2
 80090ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80090f0:	461a      	mov	r2, r3
 80090f2:	2300      	movs	r3, #0
 80090f4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80090f6:	693b      	ldr	r3, [r7, #16]
 80090f8:	015a      	lsls	r2, r3, #5
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	4413      	add	r3, r2
 80090fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009102:	461a      	mov	r2, r3
 8009104:	2300      	movs	r3, #0
 8009106:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8009108:	693b      	ldr	r3, [r7, #16]
 800910a:	015a      	lsls	r2, r3, #5
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	4413      	add	r3, r2
 8009110:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009114:	461a      	mov	r2, r3
 8009116:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800911a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800911c:	693b      	ldr	r3, [r7, #16]
 800911e:	3301      	adds	r3, #1
 8009120:	613b      	str	r3, [r7, #16]
 8009122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009124:	693a      	ldr	r2, [r7, #16]
 8009126:	429a      	cmp	r2, r3
 8009128:	d3b7      	bcc.n	800909a <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800912a:	2300      	movs	r3, #0
 800912c:	613b      	str	r3, [r7, #16]
 800912e:	e043      	b.n	80091b8 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009130:	693b      	ldr	r3, [r7, #16]
 8009132:	015a      	lsls	r2, r3, #5
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	4413      	add	r3, r2
 8009138:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009142:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009146:	d118      	bne.n	800917a <USB_DevInit+0x1da>
    {
      if (i == 0U)
 8009148:	693b      	ldr	r3, [r7, #16]
 800914a:	2b00      	cmp	r3, #0
 800914c:	d10a      	bne.n	8009164 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800914e:	693b      	ldr	r3, [r7, #16]
 8009150:	015a      	lsls	r2, r3, #5
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	4413      	add	r3, r2
 8009156:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800915a:	461a      	mov	r2, r3
 800915c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009160:	6013      	str	r3, [r2, #0]
 8009162:	e013      	b.n	800918c <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8009164:	693b      	ldr	r3, [r7, #16]
 8009166:	015a      	lsls	r2, r3, #5
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	4413      	add	r3, r2
 800916c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009170:	461a      	mov	r2, r3
 8009172:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009176:	6013      	str	r3, [r2, #0]
 8009178:	e008      	b.n	800918c <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800917a:	693b      	ldr	r3, [r7, #16]
 800917c:	015a      	lsls	r2, r3, #5
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	4413      	add	r3, r2
 8009182:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009186:	461a      	mov	r2, r3
 8009188:	2300      	movs	r3, #0
 800918a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800918c:	693b      	ldr	r3, [r7, #16]
 800918e:	015a      	lsls	r2, r3, #5
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	4413      	add	r3, r2
 8009194:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009198:	461a      	mov	r2, r3
 800919a:	2300      	movs	r3, #0
 800919c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800919e:	693b      	ldr	r3, [r7, #16]
 80091a0:	015a      	lsls	r2, r3, #5
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	4413      	add	r3, r2
 80091a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80091aa:	461a      	mov	r2, r3
 80091ac:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80091b0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80091b2:	693b      	ldr	r3, [r7, #16]
 80091b4:	3301      	adds	r3, #1
 80091b6:	613b      	str	r3, [r7, #16]
 80091b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091ba:	693a      	ldr	r2, [r7, #16]
 80091bc:	429a      	cmp	r2, r3
 80091be:	d3b7      	bcc.n	8009130 <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80091c6:	691b      	ldr	r3, [r3, #16]
 80091c8:	68fa      	ldr	r2, [r7, #12]
 80091ca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80091ce:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80091d2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	2200      	movs	r2, #0
 80091d8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80091e0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	699b      	ldr	r3, [r3, #24]
 80091e6:	f043 0210 	orr.w	r2, r3, #16
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	699a      	ldr	r2, [r3, #24]
 80091f2:	4b10      	ldr	r3, [pc, #64]	; (8009234 <USB_DevInit+0x294>)
 80091f4:	4313      	orrs	r3, r2
 80091f6:	687a      	ldr	r2, [r7, #4]
 80091f8:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80091fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d005      	beq.n	800920c <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	699b      	ldr	r3, [r3, #24]
 8009204:	f043 0208 	orr.w	r2, r3, #8
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800920c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800920e:	2b01      	cmp	r3, #1
 8009210:	d107      	bne.n	8009222 <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	699b      	ldr	r3, [r3, #24]
 8009216:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800921a:	f043 0304 	orr.w	r3, r3, #4
 800921e:	687a      	ldr	r2, [r7, #4]
 8009220:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8009222:	7dfb      	ldrb	r3, [r7, #23]
}
 8009224:	4618      	mov	r0, r3
 8009226:	3718      	adds	r7, #24
 8009228:	46bd      	mov	sp, r7
 800922a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800922e:	b004      	add	sp, #16
 8009230:	4770      	bx	lr
 8009232:	bf00      	nop
 8009234:	803c3800 	.word	0x803c3800

08009238 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009238:	b480      	push	{r7}
 800923a:	b085      	sub	sp, #20
 800923c:	af00      	add	r7, sp, #0
 800923e:	6078      	str	r0, [r7, #4]
 8009240:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8009242:	2300      	movs	r3, #0
 8009244:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009246:	683b      	ldr	r3, [r7, #0]
 8009248:	019b      	lsls	r3, r3, #6
 800924a:	f043 0220 	orr.w	r2, r3, #32
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	3301      	adds	r3, #1
 8009256:	60fb      	str	r3, [r7, #12]
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	4a09      	ldr	r2, [pc, #36]	; (8009280 <USB_FlushTxFifo+0x48>)
 800925c:	4293      	cmp	r3, r2
 800925e:	d901      	bls.n	8009264 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8009260:	2303      	movs	r3, #3
 8009262:	e006      	b.n	8009272 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	691b      	ldr	r3, [r3, #16]
 8009268:	f003 0320 	and.w	r3, r3, #32
 800926c:	2b20      	cmp	r3, #32
 800926e:	d0f0      	beq.n	8009252 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8009270:	2300      	movs	r3, #0
}
 8009272:	4618      	mov	r0, r3
 8009274:	3714      	adds	r7, #20
 8009276:	46bd      	mov	sp, r7
 8009278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800927c:	4770      	bx	lr
 800927e:	bf00      	nop
 8009280:	00030d40 	.word	0x00030d40

08009284 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009284:	b480      	push	{r7}
 8009286:	b085      	sub	sp, #20
 8009288:	af00      	add	r7, sp, #0
 800928a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800928c:	2300      	movs	r3, #0
 800928e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	2210      	movs	r2, #16
 8009294:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	3301      	adds	r3, #1
 800929a:	60fb      	str	r3, [r7, #12]
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	4a09      	ldr	r2, [pc, #36]	; (80092c4 <USB_FlushRxFifo+0x40>)
 80092a0:	4293      	cmp	r3, r2
 80092a2:	d901      	bls.n	80092a8 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80092a4:	2303      	movs	r3, #3
 80092a6:	e006      	b.n	80092b6 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	691b      	ldr	r3, [r3, #16]
 80092ac:	f003 0310 	and.w	r3, r3, #16
 80092b0:	2b10      	cmp	r3, #16
 80092b2:	d0f0      	beq.n	8009296 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80092b4:	2300      	movs	r3, #0
}
 80092b6:	4618      	mov	r0, r3
 80092b8:	3714      	adds	r7, #20
 80092ba:	46bd      	mov	sp, r7
 80092bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c0:	4770      	bx	lr
 80092c2:	bf00      	nop
 80092c4:	00030d40 	.word	0x00030d40

080092c8 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80092c8:	b480      	push	{r7}
 80092ca:	b085      	sub	sp, #20
 80092cc:	af00      	add	r7, sp, #0
 80092ce:	6078      	str	r0, [r7, #4]
 80092d0:	460b      	mov	r3, r1
 80092d2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80092de:	681a      	ldr	r2, [r3, #0]
 80092e0:	78fb      	ldrb	r3, [r7, #3]
 80092e2:	68f9      	ldr	r1, [r7, #12]
 80092e4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80092e8:	4313      	orrs	r3, r2
 80092ea:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80092ec:	2300      	movs	r3, #0
}
 80092ee:	4618      	mov	r0, r3
 80092f0:	3714      	adds	r7, #20
 80092f2:	46bd      	mov	sp, r7
 80092f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092f8:	4770      	bx	lr

080092fa <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80092fa:	b480      	push	{r7}
 80092fc:	b085      	sub	sp, #20
 80092fe:	af00      	add	r7, sp, #0
 8009300:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	68fa      	ldr	r2, [r7, #12]
 8009310:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009314:	f023 0303 	bic.w	r3, r3, #3
 8009318:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009320:	685b      	ldr	r3, [r3, #4]
 8009322:	68fa      	ldr	r2, [r7, #12]
 8009324:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009328:	f043 0302 	orr.w	r3, r3, #2
 800932c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800932e:	2300      	movs	r3, #0
}
 8009330:	4618      	mov	r0, r3
 8009332:	3714      	adds	r7, #20
 8009334:	46bd      	mov	sp, r7
 8009336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800933a:	4770      	bx	lr

0800933c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800933c:	b480      	push	{r7}
 800933e:	b085      	sub	sp, #20
 8009340:	af00      	add	r7, sp, #0
 8009342:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8009344:	2300      	movs	r3, #0
 8009346:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	3301      	adds	r3, #1
 800934c:	60fb      	str	r3, [r7, #12]
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	4a13      	ldr	r2, [pc, #76]	; (80093a0 <USB_CoreReset+0x64>)
 8009352:	4293      	cmp	r3, r2
 8009354:	d901      	bls.n	800935a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8009356:	2303      	movs	r3, #3
 8009358:	e01b      	b.n	8009392 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	691b      	ldr	r3, [r3, #16]
 800935e:	2b00      	cmp	r3, #0
 8009360:	daf2      	bge.n	8009348 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8009362:	2300      	movs	r3, #0
 8009364:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	691b      	ldr	r3, [r3, #16]
 800936a:	f043 0201 	orr.w	r2, r3, #1
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	3301      	adds	r3, #1
 8009376:	60fb      	str	r3, [r7, #12]
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	4a09      	ldr	r2, [pc, #36]	; (80093a0 <USB_CoreReset+0x64>)
 800937c:	4293      	cmp	r3, r2
 800937e:	d901      	bls.n	8009384 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009380:	2303      	movs	r3, #3
 8009382:	e006      	b.n	8009392 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	691b      	ldr	r3, [r3, #16]
 8009388:	f003 0301 	and.w	r3, r3, #1
 800938c:	2b01      	cmp	r3, #1
 800938e:	d0f0      	beq.n	8009372 <USB_CoreReset+0x36>

  return HAL_OK;
 8009390:	2300      	movs	r3, #0
}
 8009392:	4618      	mov	r0, r3
 8009394:	3714      	adds	r7, #20
 8009396:	46bd      	mov	sp, r7
 8009398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800939c:	4770      	bx	lr
 800939e:	bf00      	nop
 80093a0:	00030d40 	.word	0x00030d40

080093a4 <BSP_LED_On>:
  * @param  Led  LED to be set on 
  *              This parameter can be one of the following values:
  *                @arg  LED2
  */
void BSP_LED_On(Led_TypeDef Led)
{
 80093a4:	b580      	push	{r7, lr}
 80093a6:	b082      	sub	sp, #8
 80093a8:	af00      	add	r7, sp, #0
 80093aa:	4603      	mov	r3, r0
 80093ac:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET);
 80093ae:	79fb      	ldrb	r3, [r7, #7]
 80093b0:	4a06      	ldr	r2, [pc, #24]	; (80093cc <BSP_LED_On+0x28>)
 80093b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80093b6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80093ba:	b291      	uxth	r1, r2
 80093bc:	2201      	movs	r2, #1
 80093be:	4618      	mov	r0, r3
 80093c0:	f7f9 ff7a 	bl	80032b8 <HAL_GPIO_WritePin>
}
 80093c4:	bf00      	nop
 80093c6:	3708      	adds	r7, #8
 80093c8:	46bd      	mov	sp, r7
 80093ca:	bd80      	pop	{r7, pc}
 80093cc:	20000014 	.word	0x20000014

080093d0 <BSP_LED_Off>:
  * @param  Led  LED to be set off
  *              This parameter can be one of the following values:
  *                @arg  LED2
  */
void BSP_LED_Off(Led_TypeDef Led)
{
 80093d0:	b580      	push	{r7, lr}
 80093d2:	b082      	sub	sp, #8
 80093d4:	af00      	add	r7, sp, #0
 80093d6:	4603      	mov	r3, r0
 80093d8:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET);
 80093da:	79fb      	ldrb	r3, [r7, #7]
 80093dc:	4a06      	ldr	r2, [pc, #24]	; (80093f8 <BSP_LED_Off+0x28>)
 80093de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80093e2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80093e6:	b291      	uxth	r1, r2
 80093e8:	2200      	movs	r2, #0
 80093ea:	4618      	mov	r0, r3
 80093ec:	f7f9 ff64 	bl	80032b8 <HAL_GPIO_WritePin>
}
 80093f0:	bf00      	nop
 80093f2:	3708      	adds	r7, #8
 80093f4:	46bd      	mov	sp, r7
 80093f6:	bd80      	pop	{r7, pc}
 80093f8:	20000014 	.word	0x20000014

080093fc <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 80093fc:	b580      	push	{r7, lr}
 80093fe:	b08a      	sub	sp, #40	; 0x28
 8009400:	af00      	add	r7, sp, #0
 8009402:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8009404:	4b27      	ldr	r3, [pc, #156]	; (80094a4 <I2Cx_MspInit+0xa8>)
 8009406:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009408:	4a26      	ldr	r2, [pc, #152]	; (80094a4 <I2Cx_MspInit+0xa8>)
 800940a:	f043 0302 	orr.w	r3, r3, #2
 800940e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009410:	4b24      	ldr	r3, [pc, #144]	; (80094a4 <I2Cx_MspInit+0xa8>)
 8009412:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009414:	f003 0302 	and.w	r3, r3, #2
 8009418:	613b      	str	r3, [r7, #16]
 800941a:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 800941c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8009420:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8009422:	2312      	movs	r3, #18
 8009424:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8009426:	2301      	movs	r3, #1
 8009428:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800942a:	2303      	movs	r3, #3
 800942c:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 800942e:	2304      	movs	r3, #4
 8009430:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8009432:	f107 0314 	add.w	r3, r7, #20
 8009436:	4619      	mov	r1, r3
 8009438:	481b      	ldr	r0, [pc, #108]	; (80094a8 <I2Cx_MspInit+0xac>)
 800943a:	f7f9 fc87 	bl	8002d4c <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800943e:	f107 0314 	add.w	r3, r7, #20
 8009442:	4619      	mov	r1, r3
 8009444:	4818      	ldr	r0, [pc, #96]	; (80094a8 <I2Cx_MspInit+0xac>)
 8009446:	f7f9 fc81 	bl	8002d4c <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 800944a:	4b16      	ldr	r3, [pc, #88]	; (80094a4 <I2Cx_MspInit+0xa8>)
 800944c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800944e:	4a15      	ldr	r2, [pc, #84]	; (80094a4 <I2Cx_MspInit+0xa8>)
 8009450:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8009454:	6593      	str	r3, [r2, #88]	; 0x58
 8009456:	4b13      	ldr	r3, [pc, #76]	; (80094a4 <I2Cx_MspInit+0xa8>)
 8009458:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800945a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800945e:	60fb      	str	r3, [r7, #12]
 8009460:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 8009462:	4b10      	ldr	r3, [pc, #64]	; (80094a4 <I2Cx_MspInit+0xa8>)
 8009464:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009466:	4a0f      	ldr	r2, [pc, #60]	; (80094a4 <I2Cx_MspInit+0xa8>)
 8009468:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800946c:	6393      	str	r3, [r2, #56]	; 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 800946e:	4b0d      	ldr	r3, [pc, #52]	; (80094a4 <I2Cx_MspInit+0xa8>)
 8009470:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009472:	4a0c      	ldr	r2, [pc, #48]	; (80094a4 <I2Cx_MspInit+0xa8>)
 8009474:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8009478:	6393      	str	r3, [r2, #56]	; 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 800947a:	2200      	movs	r2, #0
 800947c:	210f      	movs	r1, #15
 800947e:	2021      	movs	r0, #33	; 0x21
 8009480:	f7f9 faa0 	bl	80029c4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8009484:	2021      	movs	r0, #33	; 0x21
 8009486:	f7f9 fab9 	bl	80029fc <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 800948a:	2200      	movs	r2, #0
 800948c:	210f      	movs	r1, #15
 800948e:	2022      	movs	r0, #34	; 0x22
 8009490:	f7f9 fa98 	bl	80029c4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 8009494:	2022      	movs	r0, #34	; 0x22
 8009496:	f7f9 fab1 	bl	80029fc <HAL_NVIC_EnableIRQ>
}
 800949a:	bf00      	nop
 800949c:	3728      	adds	r7, #40	; 0x28
 800949e:	46bd      	mov	sp, r7
 80094a0:	bd80      	pop	{r7, pc}
 80094a2:	bf00      	nop
 80094a4:	40021000 	.word	0x40021000
 80094a8:	48000400 	.word	0x48000400

080094ac <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 80094ac:	b580      	push	{r7, lr}
 80094ae:	b082      	sub	sp, #8
 80094b0:	af00      	add	r7, sp, #0
 80094b2:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	4a12      	ldr	r2, [pc, #72]	; (8009500 <I2Cx_Init+0x54>)
 80094b8:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	4a11      	ldr	r2, [pc, #68]	; (8009504 <I2Cx_Init+0x58>)
 80094be:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	2200      	movs	r2, #0
 80094c4:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	2201      	movs	r2, #1
 80094ca:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	2200      	movs	r2, #0
 80094d0:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	2200      	movs	r2, #0
 80094d6:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	2200      	movs	r2, #0
 80094dc:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	2200      	movs	r2, #0
 80094e2:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 80094e4:	6878      	ldr	r0, [r7, #4]
 80094e6:	f7ff ff89 	bl	80093fc <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 80094ea:	6878      	ldr	r0, [r7, #4]
 80094ec:	f7f9 ff14 	bl	8003318 <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 80094f0:	2100      	movs	r1, #0
 80094f2:	6878      	ldr	r0, [r7, #4]
 80094f4:	f7fa fc18 	bl	8003d28 <HAL_I2CEx_ConfigAnalogFilter>
}
 80094f8:	bf00      	nop
 80094fa:	3708      	adds	r7, #8
 80094fc:	46bd      	mov	sp, r7
 80094fe:	bd80      	pop	{r7, pc}
 8009500:	40005800 	.word	0x40005800
 8009504:	00702681 	.word	0x00702681

08009508 <I2Cx_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8009508:	b580      	push	{r7, lr}
 800950a:	b08a      	sub	sp, #40	; 0x28
 800950c:	af04      	add	r7, sp, #16
 800950e:	60f8      	str	r0, [r7, #12]
 8009510:	4608      	mov	r0, r1
 8009512:	4611      	mov	r1, r2
 8009514:	461a      	mov	r2, r3
 8009516:	4603      	mov	r3, r0
 8009518:	72fb      	strb	r3, [r7, #11]
 800951a:	460b      	mov	r3, r1
 800951c:	813b      	strh	r3, [r7, #8]
 800951e:	4613      	mov	r3, r2
 8009520:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8009522:	2300      	movs	r3, #0
 8009524:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8009526:	7afb      	ldrb	r3, [r7, #11]
 8009528:	b299      	uxth	r1, r3
 800952a:	88f8      	ldrh	r0, [r7, #6]
 800952c:	893a      	ldrh	r2, [r7, #8]
 800952e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8009532:	9302      	str	r3, [sp, #8]
 8009534:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009536:	9301      	str	r3, [sp, #4]
 8009538:	6a3b      	ldr	r3, [r7, #32]
 800953a:	9300      	str	r3, [sp, #0]
 800953c:	4603      	mov	r3, r0
 800953e:	68f8      	ldr	r0, [r7, #12]
 8009540:	f7fa f8bc 	bl	80036bc <HAL_I2C_Mem_Read>
 8009544:	4603      	mov	r3, r0
 8009546:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8009548:	7dfb      	ldrb	r3, [r7, #23]
 800954a:	2b00      	cmp	r3, #0
 800954c:	d004      	beq.n	8009558 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 800954e:	7afb      	ldrb	r3, [r7, #11]
 8009550:	4619      	mov	r1, r3
 8009552:	68f8      	ldr	r0, [r7, #12]
 8009554:	f000 f832 	bl	80095bc <I2Cx_Error>
  }
  return status;
 8009558:	7dfb      	ldrb	r3, [r7, #23]
}
 800955a:	4618      	mov	r0, r3
 800955c:	3718      	adds	r7, #24
 800955e:	46bd      	mov	sp, r7
 8009560:	bd80      	pop	{r7, pc}

08009562 <I2Cx_WriteMultiple>:
  * @param  Buffer  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8009562:	b580      	push	{r7, lr}
 8009564:	b08a      	sub	sp, #40	; 0x28
 8009566:	af04      	add	r7, sp, #16
 8009568:	60f8      	str	r0, [r7, #12]
 800956a:	4608      	mov	r0, r1
 800956c:	4611      	mov	r1, r2
 800956e:	461a      	mov	r2, r3
 8009570:	4603      	mov	r3, r0
 8009572:	72fb      	strb	r3, [r7, #11]
 8009574:	460b      	mov	r3, r1
 8009576:	813b      	strh	r3, [r7, #8]
 8009578:	4613      	mov	r3, r2
 800957a:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800957c:	2300      	movs	r3, #0
 800957e:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8009580:	7afb      	ldrb	r3, [r7, #11]
 8009582:	b299      	uxth	r1, r3
 8009584:	88f8      	ldrh	r0, [r7, #6]
 8009586:	893a      	ldrh	r2, [r7, #8]
 8009588:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800958c:	9302      	str	r3, [sp, #8]
 800958e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009590:	9301      	str	r3, [sp, #4]
 8009592:	6a3b      	ldr	r3, [r7, #32]
 8009594:	9300      	str	r3, [sp, #0]
 8009596:	4603      	mov	r3, r0
 8009598:	68f8      	ldr	r0, [r7, #12]
 800959a:	f7f9 ff7b 	bl	8003494 <HAL_I2C_Mem_Write>
 800959e:	4603      	mov	r3, r0
 80095a0:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 80095a2:	7dfb      	ldrb	r3, [r7, #23]
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d004      	beq.n	80095b2 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 80095a8:	7afb      	ldrb	r3, [r7, #11]
 80095aa:	4619      	mov	r1, r3
 80095ac:	68f8      	ldr	r0, [r7, #12]
 80095ae:	f000 f805 	bl	80095bc <I2Cx_Error>
  }
  return status;
 80095b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80095b4:	4618      	mov	r0, r3
 80095b6:	3718      	adds	r7, #24
 80095b8:	46bd      	mov	sp, r7
 80095ba:	bd80      	pop	{r7, pc}

080095bc <I2Cx_Error>:
  * @param  i2c_handler  I2C handler
  * @param  Addr  I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 80095bc:	b580      	push	{r7, lr}
 80095be:	b082      	sub	sp, #8
 80095c0:	af00      	add	r7, sp, #0
 80095c2:	6078      	str	r0, [r7, #4]
 80095c4:	460b      	mov	r3, r1
 80095c6:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 80095c8:	6878      	ldr	r0, [r7, #4]
 80095ca:	f7f9 ff34 	bl	8003436 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 80095ce:	6878      	ldr	r0, [r7, #4]
 80095d0:	f7ff ff6c 	bl	80094ac <I2Cx_Init>
}
 80095d4:	bf00      	nop
 80095d6:	3708      	adds	r7, #8
 80095d8:	46bd      	mov	sp, r7
 80095da:	bd80      	pop	{r7, pc}

080095dc <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 80095dc:	b580      	push	{r7, lr}
 80095de:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 80095e0:	4802      	ldr	r0, [pc, #8]	; (80095ec <SENSOR_IO_Init+0x10>)
 80095e2:	f7ff ff63 	bl	80094ac <I2Cx_Init>
}
 80095e6:	bf00      	nop
 80095e8:	bd80      	pop	{r7, pc}
 80095ea:	bf00      	nop
 80095ec:	20000c30 	.word	0x20000c30

080095f0 <SENSOR_IO_Write>:
  * @param  Reg  Reg address
  * @param  Value  Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 80095f0:	b580      	push	{r7, lr}
 80095f2:	b084      	sub	sp, #16
 80095f4:	af02      	add	r7, sp, #8
 80095f6:	4603      	mov	r3, r0
 80095f8:	71fb      	strb	r3, [r7, #7]
 80095fa:	460b      	mov	r3, r1
 80095fc:	71bb      	strb	r3, [r7, #6]
 80095fe:	4613      	mov	r3, r2
 8009600:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8009602:	79bb      	ldrb	r3, [r7, #6]
 8009604:	b29a      	uxth	r2, r3
 8009606:	79f9      	ldrb	r1, [r7, #7]
 8009608:	2301      	movs	r3, #1
 800960a:	9301      	str	r3, [sp, #4]
 800960c:	1d7b      	adds	r3, r7, #5
 800960e:	9300      	str	r3, [sp, #0]
 8009610:	2301      	movs	r3, #1
 8009612:	4803      	ldr	r0, [pc, #12]	; (8009620 <SENSOR_IO_Write+0x30>)
 8009614:	f7ff ffa5 	bl	8009562 <I2Cx_WriteMultiple>
}
 8009618:	bf00      	nop
 800961a:	3708      	adds	r7, #8
 800961c:	46bd      	mov	sp, r7
 800961e:	bd80      	pop	{r7, pc}
 8009620:	20000c30 	.word	0x20000c30

08009624 <SENSOR_IO_Read>:
  * @param  Addr  I2C address
  * @param  Reg  Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8009624:	b580      	push	{r7, lr}
 8009626:	b086      	sub	sp, #24
 8009628:	af02      	add	r7, sp, #8
 800962a:	4603      	mov	r3, r0
 800962c:	460a      	mov	r2, r1
 800962e:	71fb      	strb	r3, [r7, #7]
 8009630:	4613      	mov	r3, r2
 8009632:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 8009634:	2300      	movs	r3, #0
 8009636:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8009638:	79bb      	ldrb	r3, [r7, #6]
 800963a:	b29a      	uxth	r2, r3
 800963c:	79f9      	ldrb	r1, [r7, #7]
 800963e:	2301      	movs	r3, #1
 8009640:	9301      	str	r3, [sp, #4]
 8009642:	f107 030f 	add.w	r3, r7, #15
 8009646:	9300      	str	r3, [sp, #0]
 8009648:	2301      	movs	r3, #1
 800964a:	4804      	ldr	r0, [pc, #16]	; (800965c <SENSOR_IO_Read+0x38>)
 800964c:	f7ff ff5c 	bl	8009508 <I2Cx_ReadMultiple>

  return read_value;
 8009650:	7bfb      	ldrb	r3, [r7, #15]
}
 8009652:	4618      	mov	r0, r3
 8009654:	3710      	adds	r7, #16
 8009656:	46bd      	mov	sp, r7
 8009658:	bd80      	pop	{r7, pc}
 800965a:	bf00      	nop
 800965c:	20000c30 	.word	0x20000c30

08009660 <SENSOR_IO_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 8009660:	b580      	push	{r7, lr}
 8009662:	b084      	sub	sp, #16
 8009664:	af02      	add	r7, sp, #8
 8009666:	603a      	str	r2, [r7, #0]
 8009668:	461a      	mov	r2, r3
 800966a:	4603      	mov	r3, r0
 800966c:	71fb      	strb	r3, [r7, #7]
 800966e:	460b      	mov	r3, r1
 8009670:	71bb      	strb	r3, [r7, #6]
 8009672:	4613      	mov	r3, r2
 8009674:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 8009676:	79bb      	ldrb	r3, [r7, #6]
 8009678:	b29a      	uxth	r2, r3
 800967a:	79f9      	ldrb	r1, [r7, #7]
 800967c:	88bb      	ldrh	r3, [r7, #4]
 800967e:	9301      	str	r3, [sp, #4]
 8009680:	683b      	ldr	r3, [r7, #0]
 8009682:	9300      	str	r3, [sp, #0]
 8009684:	2301      	movs	r3, #1
 8009686:	4804      	ldr	r0, [pc, #16]	; (8009698 <SENSOR_IO_ReadMultiple+0x38>)
 8009688:	f7ff ff3e 	bl	8009508 <I2Cx_ReadMultiple>
 800968c:	4603      	mov	r3, r0
 800968e:	b29b      	uxth	r3, r3
}
 8009690:	4618      	mov	r0, r3
 8009692:	3708      	adds	r7, #8
 8009694:	46bd      	mov	sp, r7
 8009696:	bd80      	pop	{r7, pc}
 8009698:	20000c30 	.word	0x20000c30

0800969c <BSP_ACCELERO_Init>:
/**
  * @brief  Initialize the ACCELERO.
  * @retval ACCELERO_OK or ACCELERO_ERROR
  */
ACCELERO_StatusTypeDef BSP_ACCELERO_Init(void)
{  
 800969c:	b580      	push	{r7, lr}
 800969e:	b084      	sub	sp, #16
 80096a0:	af00      	add	r7, sp, #0
  ACCELERO_StatusTypeDef ret = ACCELERO_OK;
 80096a2:	2300      	movs	r3, #0
 80096a4:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 80096a6:	2300      	movs	r3, #0
 80096a8:	81bb      	strh	r3, [r7, #12]
  ACCELERO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslAccDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 80096aa:	4b19      	ldr	r3, [pc, #100]	; (8009710 <BSP_ACCELERO_Init+0x74>)
 80096ac:	689b      	ldr	r3, [r3, #8]
 80096ae:	4798      	blx	r3
 80096b0:	4603      	mov	r3, r0
 80096b2:	2b6a      	cmp	r3, #106	; 0x6a
 80096b4:	d002      	beq.n	80096bc <BSP_ACCELERO_Init+0x20>
  {
    ret = ACCELERO_ERROR;
 80096b6:	2301      	movs	r3, #1
 80096b8:	73fb      	strb	r3, [r7, #15]
 80096ba:	e024      	b.n	8009706 <BSP_ACCELERO_Init+0x6a>
  }
  else
  {
    /* Initialize the ACCELERO accelerometer driver structure */
    AccelerometerDrv = &Lsm6dslAccDrv;
 80096bc:	4b15      	ldr	r3, [pc, #84]	; (8009714 <BSP_ACCELERO_Init+0x78>)
 80096be:	4a14      	ldr	r2, [pc, #80]	; (8009710 <BSP_ACCELERO_Init+0x74>)
 80096c0:	601a      	str	r2, [r3, #0]
  
    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the ACCELERO accelerometer structure */
    LSM6DSL_InitStructure.AccOutput_DataRate = LSM6DSL_ODR_52Hz;
 80096c2:	2330      	movs	r3, #48	; 0x30
 80096c4:	717b      	strb	r3, [r7, #5]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 80096c6:	2300      	movs	r3, #0
 80096c8:	71bb      	strb	r3, [r7, #6]
    LSM6DSL_InitStructure.AccFull_Scale = LSM6DSL_ACC_FULLSCALE_2G;
 80096ca:	2300      	movs	r3, #0
 80096cc:	72bb      	strb	r3, [r7, #10]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 80096ce:	2340      	movs	r3, #64	; 0x40
 80096d0:	723b      	strb	r3, [r7, #8]
    LSM6DSL_InitStructure.High_Resolution = 0;
 80096d2:	2300      	movs	r3, #0
 80096d4:	71fb      	strb	r3, [r7, #7]
    LSM6DSL_InitStructure.Communication_Mode = 0;
 80096d6:	2300      	movs	r3, #0
 80096d8:	72fb      	strb	r3, [r7, #11]
        
    /* Configure MEMS: data rate, full scale  */
    ctrl =  (LSM6DSL_InitStructure.AccOutput_DataRate | LSM6DSL_InitStructure.AccFull_Scale);
 80096da:	797a      	ldrb	r2, [r7, #5]
 80096dc:	7abb      	ldrb	r3, [r7, #10]
 80096de:	4313      	orrs	r3, r2
 80096e0:	b2db      	uxtb	r3, r3
 80096e2:	81bb      	strh	r3, [r7, #12]
    
    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);
 80096e4:	7a3b      	ldrb	r3, [r7, #8]
 80096e6:	f043 0304 	orr.w	r3, r3, #4
 80096ea:	b2db      	uxtb	r3, r3
 80096ec:	021b      	lsls	r3, r3, #8
 80096ee:	b21a      	sxth	r2, r3
 80096f0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80096f4:	4313      	orrs	r3, r2
 80096f6:	b21b      	sxth	r3, r3
 80096f8:	81bb      	strh	r3, [r7, #12]

    /* Configure the ACCELERO accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 80096fa:	4b06      	ldr	r3, [pc, #24]	; (8009714 <BSP_ACCELERO_Init+0x78>)
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	89ba      	ldrh	r2, [r7, #12]
 8009702:	4610      	mov	r0, r2
 8009704:	4798      	blx	r3
  }  

  return ret;
 8009706:	7bfb      	ldrb	r3, [r7, #15]
}
 8009708:	4618      	mov	r0, r3
 800970a:	3710      	adds	r7, #16
 800970c:	46bd      	mov	sp, r7
 800970e:	bd80      	pop	{r7, pc}
 8009710:	20000018 	.word	0x20000018
 8009714:	20000c7c 	.word	0x20000c7c

08009718 <BSP_ACCELERO_AccGetXYZ>:
  * @param  pDataXYZ Pointer on 3 angular accelerations table with  
  *                  pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis
  * @retval None
  */
void BSP_ACCELERO_AccGetXYZ(int16_t *pDataXYZ)
{
 8009718:	b580      	push	{r7, lr}
 800971a:	b082      	sub	sp, #8
 800971c:	af00      	add	r7, sp, #0
 800971e:	6078      	str	r0, [r7, #4]
  if(AccelerometerDrv != NULL)
 8009720:	4b08      	ldr	r3, [pc, #32]	; (8009744 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	2b00      	cmp	r3, #0
 8009726:	d009      	beq.n	800973c <BSP_ACCELERO_AccGetXYZ+0x24>
  {
    if(AccelerometerDrv->GetXYZ != NULL)
 8009728:	4b06      	ldr	r3, [pc, #24]	; (8009744 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800972e:	2b00      	cmp	r3, #0
 8009730:	d004      	beq.n	800973c <BSP_ACCELERO_AccGetXYZ+0x24>
    {   
      AccelerometerDrv->GetXYZ(pDataXYZ);
 8009732:	4b04      	ldr	r3, [pc, #16]	; (8009744 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009738:	6878      	ldr	r0, [r7, #4]
 800973a:	4798      	blx	r3
    }
  }
}
 800973c:	bf00      	nop
 800973e:	3708      	adds	r7, #8
 8009740:	46bd      	mov	sp, r7
 8009742:	bd80      	pop	{r7, pc}
 8009744:	20000c7c 	.word	0x20000c7c

08009748 <LSM6DSL_AccInit>:
/**
  * @brief  Set LSM6DSL Accelerometer Initialization.
  * @param  InitStruct: Init parameters
  */
void LSM6DSL_AccInit(uint16_t InitStruct)
{  
 8009748:	b580      	push	{r7, lr}
 800974a:	b084      	sub	sp, #16
 800974c:	af00      	add	r7, sp, #0
 800974e:	4603      	mov	r3, r0
 8009750:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8009752:	2300      	movs	r3, #0
 8009754:	73fb      	strb	r3, [r7, #15]
  uint8_t tmp;

  /* Read CTRL1_XL */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8009756:	2110      	movs	r1, #16
 8009758:	20d4      	movs	r0, #212	; 0xd4
 800975a:	f7ff ff63 	bl	8009624 <SENSOR_IO_Read>
 800975e:	4603      	mov	r3, r0
 8009760:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL1_XL register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
 8009762:	88fb      	ldrh	r3, [r7, #6]
 8009764:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0xFC);
 8009766:	7bbb      	ldrb	r3, [r7, #14]
 8009768:	f003 0303 	and.w	r3, r3, #3
 800976c:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl;
 800976e:	7bba      	ldrb	r2, [r7, #14]
 8009770:	7bfb      	ldrb	r3, [r7, #15]
 8009772:	4313      	orrs	r3, r2
 8009774:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, tmp);
 8009776:	7bbb      	ldrb	r3, [r7, #14]
 8009778:	461a      	mov	r2, r3
 800977a:	2110      	movs	r1, #16
 800977c:	20d4      	movs	r0, #212	; 0xd4
 800977e:	f7ff ff37 	bl	80095f0 <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 8009782:	2112      	movs	r1, #18
 8009784:	20d4      	movs	r0, #212	; 0xd4
 8009786:	f7ff ff4d 	bl	8009624 <SENSOR_IO_Read>
 800978a:	4603      	mov	r3, r0
 800978c:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
 800978e:	88fb      	ldrh	r3, [r7, #6]
 8009790:	0a1b      	lsrs	r3, r3, #8
 8009792:	b29b      	uxth	r3, r3
 8009794:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0x44);
 8009796:	7bbb      	ldrb	r3, [r7, #14]
 8009798:	f023 0344 	bic.w	r3, r3, #68	; 0x44
 800979c:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl; 
 800979e:	7bba      	ldrb	r2, [r7, #14]
 80097a0:	7bfb      	ldrb	r3, [r7, #15]
 80097a2:	4313      	orrs	r3, r2
 80097a4:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 80097a6:	7bbb      	ldrb	r3, [r7, #14]
 80097a8:	461a      	mov	r2, r3
 80097aa:	2112      	movs	r1, #18
 80097ac:	20d4      	movs	r0, #212	; 0xd4
 80097ae:	f7ff ff1f 	bl	80095f0 <SENSOR_IO_Write>
}
 80097b2:	bf00      	nop
 80097b4:	3710      	adds	r7, #16
 80097b6:	46bd      	mov	sp, r7
 80097b8:	bd80      	pop	{r7, pc}

080097ba <LSM6DSL_AccDeInit>:

/**
  * @brief  LSM6DSL Accelerometer De-initialization.
  */
void LSM6DSL_AccDeInit(void)
{
 80097ba:	b580      	push	{r7, lr}
 80097bc:	b082      	sub	sp, #8
 80097be:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 80097c0:	2300      	movs	r3, #0
 80097c2:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 80097c4:	2110      	movs	r1, #16
 80097c6:	20d4      	movs	r0, #212	; 0xd4
 80097c8:	f7ff ff2c 	bl	8009624 <SENSOR_IO_Read>
 80097cc:	4603      	mov	r3, r0
 80097ce:	71fb      	strb	r3, [r7, #7]

  /* Clear ODR bits */
  ctrl &= ~(LSM6DSL_ODR_BITPOSITION);
 80097d0:	79fb      	ldrb	r3, [r7, #7]
 80097d2:	f003 030f 	and.w	r3, r3, #15
 80097d6:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, ctrl);
 80097d8:	79fb      	ldrb	r3, [r7, #7]
 80097da:	461a      	mov	r2, r3
 80097dc:	2110      	movs	r1, #16
 80097de:	20d4      	movs	r0, #212	; 0xd4
 80097e0:	f7ff ff06 	bl	80095f0 <SENSOR_IO_Write>
}
 80097e4:	bf00      	nop
 80097e6:	3708      	adds	r7, #8
 80097e8:	46bd      	mov	sp, r7
 80097ea:	bd80      	pop	{r7, pc}

080097ec <LSM6DSL_AccReadID>:
/**
  * @brief  Read LSM6DSL ID.
  * @retval ID 
  */
uint8_t LSM6DSL_AccReadID(void)
{  
 80097ec:	b580      	push	{r7, lr}
 80097ee:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();
 80097f0:	f7ff fef4 	bl	80095dc <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return (SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG));
 80097f4:	210f      	movs	r1, #15
 80097f6:	20d4      	movs	r0, #212	; 0xd4
 80097f8:	f7ff ff14 	bl	8009624 <SENSOR_IO_Read>
 80097fc:	4603      	mov	r3, r0
}
 80097fe:	4618      	mov	r0, r3
 8009800:	bd80      	pop	{r7, pc}

08009802 <LSM6DSL_AccLowPower>:
/**
  * @brief  Set/Unset Accelerometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LSM6DSL_AccLowPower(uint16_t status)
{
 8009802:	b580      	push	{r7, lr}
 8009804:	b084      	sub	sp, #16
 8009806:	af00      	add	r7, sp, #0
 8009808:	4603      	mov	r3, r0
 800980a:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 800980c:	2300      	movs	r3, #0
 800980e:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL6_C value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C);
 8009810:	2115      	movs	r1, #21
 8009812:	20d4      	movs	r0, #212	; 0xd4
 8009814:	f7ff ff06 	bl	8009624 <SENSOR_IO_Read>
 8009818:	4603      	mov	r3, r0
 800981a:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x10);
 800981c:	7bfb      	ldrb	r3, [r7, #15]
 800981e:	f023 0310 	bic.w	r3, r3, #16
 8009822:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 8009824:	88fb      	ldrh	r3, [r7, #6]
 8009826:	2b00      	cmp	r3, #0
 8009828:	d003      	beq.n	8009832 <LSM6DSL_AccLowPower+0x30>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_ENABLED;
 800982a:	7bfb      	ldrb	r3, [r7, #15]
 800982c:	f043 0310 	orr.w	r3, r3, #16
 8009830:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C, ctrl);
 8009832:	7bfb      	ldrb	r3, [r7, #15]
 8009834:	461a      	mov	r2, r3
 8009836:	2115      	movs	r1, #21
 8009838:	20d4      	movs	r0, #212	; 0xd4
 800983a:	f7ff fed9 	bl	80095f0 <SENSOR_IO_Write>
}
 800983e:	bf00      	nop
 8009840:	3710      	adds	r7, #16
 8009842:	46bd      	mov	sp, r7
 8009844:	bd80      	pop	{r7, pc}
	...

08009848 <LSM6DSL_AccReadXYZ>:
/**
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  */
void LSM6DSL_AccReadXYZ(int16_t* pData)
{
 8009848:	b580      	push	{r7, lr}
 800984a:	b088      	sub	sp, #32
 800984c:	af00      	add	r7, sp, #0
 800984e:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlx= 0;
 8009850:	2300      	movs	r3, #0
 8009852:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 8009854:	2300      	movs	r3, #0
 8009856:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 8009858:	f04f 0300 	mov.w	r3, #0
 800985c:	61bb      	str	r3, [r7, #24]
  
  /* Read the acceleration control register content */
  ctrlx = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 800985e:	2110      	movs	r1, #16
 8009860:	20d4      	movs	r0, #212	; 0xd4
 8009862:	f7ff fedf 	bl	8009624 <SENSOR_IO_Read>
 8009866:	4603      	mov	r3, r0
 8009868:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_XL, buffer, 6);
 800986a:	f107 0208 	add.w	r2, r7, #8
 800986e:	2306      	movs	r3, #6
 8009870:	2128      	movs	r1, #40	; 0x28
 8009872:	20d4      	movs	r0, #212	; 0xd4
 8009874:	f7ff fef4 	bl	8009660 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 8009878:	2300      	movs	r3, #0
 800987a:	77fb      	strb	r3, [r7, #31]
 800987c:	e01c      	b.n	80098b8 <LSM6DSL_AccReadXYZ+0x70>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 800987e:	7ffb      	ldrb	r3, [r7, #31]
 8009880:	005b      	lsls	r3, r3, #1
 8009882:	3301      	adds	r3, #1
 8009884:	3320      	adds	r3, #32
 8009886:	443b      	add	r3, r7
 8009888:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 800988c:	b29b      	uxth	r3, r3
 800988e:	021b      	lsls	r3, r3, #8
 8009890:	b29a      	uxth	r2, r3
 8009892:	7ffb      	ldrb	r3, [r7, #31]
 8009894:	005b      	lsls	r3, r3, #1
 8009896:	3320      	adds	r3, #32
 8009898:	443b      	add	r3, r7
 800989a:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 800989e:	b29b      	uxth	r3, r3
 80098a0:	4413      	add	r3, r2
 80098a2:	b29a      	uxth	r2, r3
 80098a4:	7ffb      	ldrb	r3, [r7, #31]
 80098a6:	b212      	sxth	r2, r2
 80098a8:	005b      	lsls	r3, r3, #1
 80098aa:	3320      	adds	r3, #32
 80098ac:	443b      	add	r3, r7
 80098ae:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 80098b2:	7ffb      	ldrb	r3, [r7, #31]
 80098b4:	3301      	adds	r3, #1
 80098b6:	77fb      	strb	r3, [r7, #31]
 80098b8:	7ffb      	ldrb	r3, [r7, #31]
 80098ba:	2b02      	cmp	r3, #2
 80098bc:	d9df      	bls.n	800987e <LSM6DSL_AccReadXYZ+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL1_XL */
  switch(ctrlx & 0x0C)
 80098be:	7dfb      	ldrb	r3, [r7, #23]
 80098c0:	f003 030c 	and.w	r3, r3, #12
 80098c4:	2b0c      	cmp	r3, #12
 80098c6:	d829      	bhi.n	800991c <LSM6DSL_AccReadXYZ+0xd4>
 80098c8:	a201      	add	r2, pc, #4	; (adr r2, 80098d0 <LSM6DSL_AccReadXYZ+0x88>)
 80098ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098ce:	bf00      	nop
 80098d0:	08009905 	.word	0x08009905
 80098d4:	0800991d 	.word	0x0800991d
 80098d8:	0800991d 	.word	0x0800991d
 80098dc:	0800991d 	.word	0x0800991d
 80098e0:	08009917 	.word	0x08009917
 80098e4:	0800991d 	.word	0x0800991d
 80098e8:	0800991d 	.word	0x0800991d
 80098ec:	0800991d 	.word	0x0800991d
 80098f0:	0800990b 	.word	0x0800990b
 80098f4:	0800991d 	.word	0x0800991d
 80098f8:	0800991d 	.word	0x0800991d
 80098fc:	0800991d 	.word	0x0800991d
 8009900:	08009911 	.word	0x08009911
  {
  case LSM6DSL_ACC_FULLSCALE_2G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_2G;
 8009904:	4b18      	ldr	r3, [pc, #96]	; (8009968 <LSM6DSL_AccReadXYZ+0x120>)
 8009906:	61bb      	str	r3, [r7, #24]
    break;
 8009908:	e008      	b.n	800991c <LSM6DSL_AccReadXYZ+0xd4>
  case LSM6DSL_ACC_FULLSCALE_4G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_4G;
 800990a:	4b18      	ldr	r3, [pc, #96]	; (800996c <LSM6DSL_AccReadXYZ+0x124>)
 800990c:	61bb      	str	r3, [r7, #24]
    break;
 800990e:	e005      	b.n	800991c <LSM6DSL_AccReadXYZ+0xd4>
  case LSM6DSL_ACC_FULLSCALE_8G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_8G;
 8009910:	4b17      	ldr	r3, [pc, #92]	; (8009970 <LSM6DSL_AccReadXYZ+0x128>)
 8009912:	61bb      	str	r3, [r7, #24]
    break;
 8009914:	e002      	b.n	800991c <LSM6DSL_AccReadXYZ+0xd4>
  case LSM6DSL_ACC_FULLSCALE_16G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_16G;
 8009916:	4b17      	ldr	r3, [pc, #92]	; (8009974 <LSM6DSL_AccReadXYZ+0x12c>)
 8009918:	61bb      	str	r3, [r7, #24]
    break;    
 800991a:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 800991c:	2300      	movs	r3, #0
 800991e:	77fb      	strb	r3, [r7, #31]
 8009920:	e01a      	b.n	8009958 <LSM6DSL_AccReadXYZ+0x110>
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 8009922:	7ffb      	ldrb	r3, [r7, #31]
 8009924:	005b      	lsls	r3, r3, #1
 8009926:	3320      	adds	r3, #32
 8009928:	443b      	add	r3, r7
 800992a:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 800992e:	ee07 3a90 	vmov	s15, r3
 8009932:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009936:	edd7 7a06 	vldr	s15, [r7, #24]
 800993a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800993e:	7ffb      	ldrb	r3, [r7, #31]
 8009940:	005b      	lsls	r3, r3, #1
 8009942:	687a      	ldr	r2, [r7, #4]
 8009944:	4413      	add	r3, r2
 8009946:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800994a:	ee17 2a90 	vmov	r2, s15
 800994e:	b212      	sxth	r2, r2
 8009950:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 8009952:	7ffb      	ldrb	r3, [r7, #31]
 8009954:	3301      	adds	r3, #1
 8009956:	77fb      	strb	r3, [r7, #31]
 8009958:	7ffb      	ldrb	r3, [r7, #31]
 800995a:	2b02      	cmp	r3, #2
 800995c:	d9e1      	bls.n	8009922 <LSM6DSL_AccReadXYZ+0xda>
  }
}
 800995e:	bf00      	nop
 8009960:	bf00      	nop
 8009962:	3720      	adds	r7, #32
 8009964:	46bd      	mov	sp, r7
 8009966:	bd80      	pop	{r7, pc}
 8009968:	3d79db23 	.word	0x3d79db23
 800996c:	3df9db23 	.word	0x3df9db23
 8009970:	3e79db23 	.word	0x3e79db23
 8009974:	3ef9db23 	.word	0x3ef9db23

08009978 <Hex2Num>:
  * @param  a: character to convert
  * @retval integer value.
  */

static  uint8_t Hex2Num(char a)
{
 8009978:	b480      	push	{r7}
 800997a:	b083      	sub	sp, #12
 800997c:	af00      	add	r7, sp, #0
 800997e:	4603      	mov	r3, r0
 8009980:	71fb      	strb	r3, [r7, #7]
    if (a >= '0' && a <= '9') {                             /* Char is num */
 8009982:	79fb      	ldrb	r3, [r7, #7]
 8009984:	2b2f      	cmp	r3, #47	; 0x2f
 8009986:	d906      	bls.n	8009996 <Hex2Num+0x1e>
 8009988:	79fb      	ldrb	r3, [r7, #7]
 800998a:	2b39      	cmp	r3, #57	; 0x39
 800998c:	d803      	bhi.n	8009996 <Hex2Num+0x1e>
        return a - '0';
 800998e:	79fb      	ldrb	r3, [r7, #7]
 8009990:	3b30      	subs	r3, #48	; 0x30
 8009992:	b2db      	uxtb	r3, r3
 8009994:	e014      	b.n	80099c0 <Hex2Num+0x48>
    } else if (a >= 'a' && a <= 'f') {                      /* Char is lowercase character A - Z (hex) */
 8009996:	79fb      	ldrb	r3, [r7, #7]
 8009998:	2b60      	cmp	r3, #96	; 0x60
 800999a:	d906      	bls.n	80099aa <Hex2Num+0x32>
 800999c:	79fb      	ldrb	r3, [r7, #7]
 800999e:	2b66      	cmp	r3, #102	; 0x66
 80099a0:	d803      	bhi.n	80099aa <Hex2Num+0x32>
        return (a - 'a') + 10;
 80099a2:	79fb      	ldrb	r3, [r7, #7]
 80099a4:	3b57      	subs	r3, #87	; 0x57
 80099a6:	b2db      	uxtb	r3, r3
 80099a8:	e00a      	b.n	80099c0 <Hex2Num+0x48>
    } else if (a >= 'A' && a <= 'F') {                      /* Char is uppercase character A - Z (hex) */
 80099aa:	79fb      	ldrb	r3, [r7, #7]
 80099ac:	2b40      	cmp	r3, #64	; 0x40
 80099ae:	d906      	bls.n	80099be <Hex2Num+0x46>
 80099b0:	79fb      	ldrb	r3, [r7, #7]
 80099b2:	2b46      	cmp	r3, #70	; 0x46
 80099b4:	d803      	bhi.n	80099be <Hex2Num+0x46>
        return (a - 'A') + 10;
 80099b6:	79fb      	ldrb	r3, [r7, #7]
 80099b8:	3b37      	subs	r3, #55	; 0x37
 80099ba:	b2db      	uxtb	r3, r3
 80099bc:	e000      	b.n	80099c0 <Hex2Num+0x48>
    }

    return 0;
 80099be:	2300      	movs	r3, #0
}
 80099c0:	4618      	mov	r0, r3
 80099c2:	370c      	adds	r7, #12
 80099c4:	46bd      	mov	sp, r7
 80099c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ca:	4770      	bx	lr

080099cc <ParseHexNumber>:
  * @param  ptr: pointer to string
  * @param  cnt: pointer to the number of parsed digit
  * @retval Hex value.
  */
static uint32_t ParseHexNumber(char* ptr, uint8_t* cnt)
{
 80099cc:	b580      	push	{r7, lr}
 80099ce:	b084      	sub	sp, #16
 80099d0:	af00      	add	r7, sp, #0
 80099d2:	6078      	str	r0, [r7, #4]
 80099d4:	6039      	str	r1, [r7, #0]
    uint32_t sum = 0;
 80099d6:	2300      	movs	r3, #0
 80099d8:	60fb      	str	r3, [r7, #12]
    uint8_t i = 0;
 80099da:	2300      	movs	r3, #0
 80099dc:	72fb      	strb	r3, [r7, #11]

    while (CHARISHEXNUM(*ptr)) {                    		/* Parse number */
 80099de:	e012      	b.n	8009a06 <ParseHexNumber+0x3a>
        sum <<= 4;
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	011b      	lsls	r3, r3, #4
 80099e4:	60fb      	str	r3, [r7, #12]
        sum += Hex2Num(*ptr);
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	781b      	ldrb	r3, [r3, #0]
 80099ea:	4618      	mov	r0, r3
 80099ec:	f7ff ffc4 	bl	8009978 <Hex2Num>
 80099f0:	4603      	mov	r3, r0
 80099f2:	461a      	mov	r2, r3
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	4413      	add	r3, r2
 80099f8:	60fb      	str	r3, [r7, #12]
        ptr++;
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	3301      	adds	r3, #1
 80099fe:	607b      	str	r3, [r7, #4]
        i++;
 8009a00:	7afb      	ldrb	r3, [r7, #11]
 8009a02:	3301      	adds	r3, #1
 8009a04:	72fb      	strb	r3, [r7, #11]
    while (CHARISHEXNUM(*ptr)) {                    		/* Parse number */
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	781b      	ldrb	r3, [r3, #0]
 8009a0a:	2b2f      	cmp	r3, #47	; 0x2f
 8009a0c:	d903      	bls.n	8009a16 <ParseHexNumber+0x4a>
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	781b      	ldrb	r3, [r3, #0]
 8009a12:	2b39      	cmp	r3, #57	; 0x39
 8009a14:	d9e4      	bls.n	80099e0 <ParseHexNumber+0x14>
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	781b      	ldrb	r3, [r3, #0]
 8009a1a:	2b60      	cmp	r3, #96	; 0x60
 8009a1c:	d903      	bls.n	8009a26 <ParseHexNumber+0x5a>
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	781b      	ldrb	r3, [r3, #0]
 8009a22:	2b66      	cmp	r3, #102	; 0x66
 8009a24:	d9dc      	bls.n	80099e0 <ParseHexNumber+0x14>
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	781b      	ldrb	r3, [r3, #0]
 8009a2a:	2b40      	cmp	r3, #64	; 0x40
 8009a2c:	d903      	bls.n	8009a36 <ParseHexNumber+0x6a>
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	781b      	ldrb	r3, [r3, #0]
 8009a32:	2b46      	cmp	r3, #70	; 0x46
 8009a34:	d9d4      	bls.n	80099e0 <ParseHexNumber+0x14>
    }

    if (cnt != NULL) {                               		/* Save number of characters used for number */
 8009a36:	683b      	ldr	r3, [r7, #0]
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d002      	beq.n	8009a42 <ParseHexNumber+0x76>
        *cnt = i;
 8009a3c:	683b      	ldr	r3, [r7, #0]
 8009a3e:	7afa      	ldrb	r2, [r7, #11]
 8009a40:	701a      	strb	r2, [r3, #0]
    }
    return sum;                                        		/* Return number */
 8009a42:	68fb      	ldr	r3, [r7, #12]
}
 8009a44:	4618      	mov	r0, r3
 8009a46:	3710      	adds	r7, #16
 8009a48:	46bd      	mov	sp, r7
 8009a4a:	bd80      	pop	{r7, pc}

08009a4c <ParseNumber>:
  * @param  ptr: pointer to string
  * @param  cnt: pointer to the number of parsed digit
  * @retval integer value.
  */
static int32_t ParseNumber(char* ptr, uint8_t* cnt)
{
 8009a4c:	b480      	push	{r7}
 8009a4e:	b085      	sub	sp, #20
 8009a50:	af00      	add	r7, sp, #0
 8009a52:	6078      	str	r0, [r7, #4]
 8009a54:	6039      	str	r1, [r7, #0]
    uint8_t minus = 0, i = 0;
 8009a56:	2300      	movs	r3, #0
 8009a58:	73fb      	strb	r3, [r7, #15]
 8009a5a:	2300      	movs	r3, #0
 8009a5c:	73bb      	strb	r3, [r7, #14]
    int32_t sum = 0;
 8009a5e:	2300      	movs	r3, #0
 8009a60:	60bb      	str	r3, [r7, #8]

    if (*ptr == '-') {                                		/* Check for minus character */
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	781b      	ldrb	r3, [r3, #0]
 8009a66:	2b2d      	cmp	r3, #45	; 0x2d
 8009a68:	d119      	bne.n	8009a9e <ParseNumber+0x52>
        minus = 1;
 8009a6a:	2301      	movs	r3, #1
 8009a6c:	73fb      	strb	r3, [r7, #15]
        ptr++;
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	3301      	adds	r3, #1
 8009a72:	607b      	str	r3, [r7, #4]
        i++;
 8009a74:	7bbb      	ldrb	r3, [r7, #14]
 8009a76:	3301      	adds	r3, #1
 8009a78:	73bb      	strb	r3, [r7, #14]
    }
    while (CHARISNUM(*ptr)) {                        		/* Parse number */
 8009a7a:	e010      	b.n	8009a9e <ParseNumber+0x52>
        sum = 10 * sum + CHAR2NUM(*ptr);
 8009a7c:	68ba      	ldr	r2, [r7, #8]
 8009a7e:	4613      	mov	r3, r2
 8009a80:	009b      	lsls	r3, r3, #2
 8009a82:	4413      	add	r3, r2
 8009a84:	005b      	lsls	r3, r3, #1
 8009a86:	461a      	mov	r2, r3
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	781b      	ldrb	r3, [r3, #0]
 8009a8c:	3b30      	subs	r3, #48	; 0x30
 8009a8e:	4413      	add	r3, r2
 8009a90:	60bb      	str	r3, [r7, #8]
        ptr++;
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	3301      	adds	r3, #1
 8009a96:	607b      	str	r3, [r7, #4]
        i++;
 8009a98:	7bbb      	ldrb	r3, [r7, #14]
 8009a9a:	3301      	adds	r3, #1
 8009a9c:	73bb      	strb	r3, [r7, #14]
    while (CHARISNUM(*ptr)) {                        		/* Parse number */
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	781b      	ldrb	r3, [r3, #0]
 8009aa2:	2b2f      	cmp	r3, #47	; 0x2f
 8009aa4:	d903      	bls.n	8009aae <ParseNumber+0x62>
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	781b      	ldrb	r3, [r3, #0]
 8009aaa:	2b39      	cmp	r3, #57	; 0x39
 8009aac:	d9e6      	bls.n	8009a7c <ParseNumber+0x30>
    }
    if (cnt != NULL) {                                		/* Save number of characters used for number */
 8009aae:	683b      	ldr	r3, [r7, #0]
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d002      	beq.n	8009aba <ParseNumber+0x6e>
        *cnt = i;
 8009ab4:	683b      	ldr	r3, [r7, #0]
 8009ab6:	7bba      	ldrb	r2, [r7, #14]
 8009ab8:	701a      	strb	r2, [r3, #0]
    }
    if (minus) {                                    		/* Minus detected */
 8009aba:	7bfb      	ldrb	r3, [r7, #15]
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d002      	beq.n	8009ac6 <ParseNumber+0x7a>
        return 0 - sum;
 8009ac0:	68bb      	ldr	r3, [r7, #8]
 8009ac2:	425b      	negs	r3, r3
 8009ac4:	e000      	b.n	8009ac8 <ParseNumber+0x7c>
    }
    return sum;                                       		/* Return number */
 8009ac6:	68bb      	ldr	r3, [r7, #8]
}
 8009ac8:	4618      	mov	r0, r3
 8009aca:	3714      	adds	r7, #20
 8009acc:	46bd      	mov	sp, r7
 8009ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ad2:	4770      	bx	lr

08009ad4 <ParseMAC>:
  * @param  ptr: pointer to string
  * @param  arr: pointer to MAC array
  * @retval None.
  */
static void ParseMAC(char* ptr, uint8_t* arr)
{
 8009ad4:	b580      	push	{r7, lr}
 8009ad6:	b084      	sub	sp, #16
 8009ad8:	af00      	add	r7, sp, #0
 8009ada:	6078      	str	r0, [r7, #4]
 8009adc:	6039      	str	r1, [r7, #0]
  uint8_t hexnum = 0, hexcnt;
 8009ade:	2300      	movs	r3, #0
 8009ae0:	73fb      	strb	r3, [r7, #15]

  while(* ptr) {
 8009ae2:	e019      	b.n	8009b18 <ParseMAC+0x44>
    hexcnt = 1;
 8009ae4:	2301      	movs	r3, #1
 8009ae6:	73bb      	strb	r3, [r7, #14]
    if(*ptr != ':')
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	781b      	ldrb	r3, [r3, #0]
 8009aec:	2b3a      	cmp	r3, #58	; 0x3a
 8009aee:	d00e      	beq.n	8009b0e <ParseMAC+0x3a>
    {
      arr[hexnum++] = ParseHexNumber(ptr, &hexcnt);
 8009af0:	f107 030e 	add.w	r3, r7, #14
 8009af4:	4619      	mov	r1, r3
 8009af6:	6878      	ldr	r0, [r7, #4]
 8009af8:	f7ff ff68 	bl	80099cc <ParseHexNumber>
 8009afc:	4601      	mov	r1, r0
 8009afe:	7bfb      	ldrb	r3, [r7, #15]
 8009b00:	1c5a      	adds	r2, r3, #1
 8009b02:	73fa      	strb	r2, [r7, #15]
 8009b04:	461a      	mov	r2, r3
 8009b06:	683b      	ldr	r3, [r7, #0]
 8009b08:	4413      	add	r3, r2
 8009b0a:	b2ca      	uxtb	r2, r1
 8009b0c:	701a      	strb	r2, [r3, #0]
    }
    ptr = ptr + hexcnt;
 8009b0e:	7bbb      	ldrb	r3, [r7, #14]
 8009b10:	461a      	mov	r2, r3
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	4413      	add	r3, r2
 8009b16:	607b      	str	r3, [r7, #4]
  while(* ptr) {
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	781b      	ldrb	r3, [r3, #0]
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d1e1      	bne.n	8009ae4 <ParseMAC+0x10>
  }
}
 8009b20:	bf00      	nop
 8009b22:	bf00      	nop
 8009b24:	3710      	adds	r7, #16
 8009b26:	46bd      	mov	sp, r7
 8009b28:	bd80      	pop	{r7, pc}

08009b2a <ParseIP>:
  * @param  ptr: pointer to string
  * @param  arr: pointer to IP array
  * @retval None.
  */
static  void ParseIP(char* ptr, uint8_t* arr)
{
 8009b2a:	b580      	push	{r7, lr}
 8009b2c:	b084      	sub	sp, #16
 8009b2e:	af00      	add	r7, sp, #0
 8009b30:	6078      	str	r0, [r7, #4]
 8009b32:	6039      	str	r1, [r7, #0]
  uint8_t hexnum = 0, hexcnt;
 8009b34:	2300      	movs	r3, #0
 8009b36:	73fb      	strb	r3, [r7, #15]

  while(* ptr) {
 8009b38:	e019      	b.n	8009b6e <ParseIP+0x44>
    hexcnt = 1;
 8009b3a:	2301      	movs	r3, #1
 8009b3c:	73bb      	strb	r3, [r7, #14]
    if(*ptr != '.')
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	781b      	ldrb	r3, [r3, #0]
 8009b42:	2b2e      	cmp	r3, #46	; 0x2e
 8009b44:	d00e      	beq.n	8009b64 <ParseIP+0x3a>
    {
      arr[hexnum++] = ParseNumber(ptr, &hexcnt);
 8009b46:	f107 030e 	add.w	r3, r7, #14
 8009b4a:	4619      	mov	r1, r3
 8009b4c:	6878      	ldr	r0, [r7, #4]
 8009b4e:	f7ff ff7d 	bl	8009a4c <ParseNumber>
 8009b52:	4601      	mov	r1, r0
 8009b54:	7bfb      	ldrb	r3, [r7, #15]
 8009b56:	1c5a      	adds	r2, r3, #1
 8009b58:	73fa      	strb	r2, [r7, #15]
 8009b5a:	461a      	mov	r2, r3
 8009b5c:	683b      	ldr	r3, [r7, #0]
 8009b5e:	4413      	add	r3, r2
 8009b60:	b2ca      	uxtb	r2, r1
 8009b62:	701a      	strb	r2, [r3, #0]
    }
    ptr = ptr + hexcnt;
 8009b64:	7bbb      	ldrb	r3, [r7, #14]
 8009b66:	461a      	mov	r2, r3
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	4413      	add	r3, r2
 8009b6c:	607b      	str	r3, [r7, #4]
  while(* ptr) {
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	781b      	ldrb	r3, [r3, #0]
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d1e1      	bne.n	8009b3a <ParseIP+0x10>
  }
}
 8009b76:	bf00      	nop
 8009b78:	bf00      	nop
 8009b7a:	3710      	adds	r7, #16
 8009b7c:	46bd      	mov	sp, r7
 8009b7e:	bd80      	pop	{r7, pc}

08009b80 <AT_ParseInfo>:
  * @param  Obj: pointer to module handle
  * @param  ptr: pointer to string
  * @retval None.
  */
static void AT_ParseInfo(ES_WIFIObject_t *Obj,uint8_t *pdata)
{
 8009b80:	b580      	push	{r7, lr}
 8009b82:	b084      	sub	sp, #16
 8009b84:	af00      	add	r7, sp, #0
 8009b86:	6078      	str	r0, [r7, #4]
 8009b88:	6039      	str	r1, [r7, #0]
  char *ptr;
  uint8_t num = 0;
 8009b8a:	2300      	movs	r3, #0
 8009b8c:	72fb      	strb	r3, [r7, #11]

  ptr = strtok((char *)pdata + 2, ",");
 8009b8e:	683b      	ldr	r3, [r7, #0]
 8009b90:	3302      	adds	r3, #2
 8009b92:	4934      	ldr	r1, [pc, #208]	; (8009c64 <AT_ParseInfo+0xe4>)
 8009b94:	4618      	mov	r0, r3
 8009b96:	f008 fadf 	bl	8012158 <strtok>
 8009b9a:	60f8      	str	r0, [r7, #12]

  while (ptr != NULL){
 8009b9c:	e05a      	b.n	8009c54 <AT_ParseInfo+0xd4>
    switch (num++) {
 8009b9e:	7afb      	ldrb	r3, [r7, #11]
 8009ba0:	1c5a      	adds	r2, r3, #1
 8009ba2:	72fa      	strb	r2, [r7, #11]
 8009ba4:	2b06      	cmp	r3, #6
 8009ba6:	d84f      	bhi.n	8009c48 <AT_ParseInfo+0xc8>
 8009ba8:	a201      	add	r2, pc, #4	; (adr r2, 8009bb0 <AT_ParseInfo+0x30>)
 8009baa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bae:	bf00      	nop
 8009bb0:	08009bcd 	.word	0x08009bcd
 8009bb4:	08009bdb 	.word	0x08009bdb
 8009bb8:	08009beb 	.word	0x08009beb
 8009bbc:	08009bfb 	.word	0x08009bfb
 8009bc0:	08009c0b 	.word	0x08009c0b
 8009bc4:	08009c1b 	.word	0x08009c1b
 8009bc8:	08009c2f 	.word	0x08009c2f
    case 0:
      strncpy((char *)Obj->Product_ID,  ptr, ES_WIFI_PRODUCT_ID_SIZE);
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	2220      	movs	r2, #32
 8009bd0:	68f9      	ldr	r1, [r7, #12]
 8009bd2:	4618      	mov	r0, r3
 8009bd4:	f008 fa97 	bl	8012106 <strncpy>
      break;
 8009bd8:	e037      	b.n	8009c4a <AT_ParseInfo+0xca>

    case 1:
      strncpy((char *)Obj->FW_Rev,  ptr, ES_WIFI_FW_REV_SIZE );
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	3320      	adds	r3, #32
 8009bde:	2218      	movs	r2, #24
 8009be0:	68f9      	ldr	r1, [r7, #12]
 8009be2:	4618      	mov	r0, r3
 8009be4:	f008 fa8f 	bl	8012106 <strncpy>
      break;
 8009be8:	e02f      	b.n	8009c4a <AT_ParseInfo+0xca>

    case 2:
      strncpy((char *)Obj->API_Rev,  ptr, ES_WIFI_API_REV_SIZE);
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	3338      	adds	r3, #56	; 0x38
 8009bee:	2210      	movs	r2, #16
 8009bf0:	68f9      	ldr	r1, [r7, #12]
 8009bf2:	4618      	mov	r0, r3
 8009bf4:	f008 fa87 	bl	8012106 <strncpy>
      break;
 8009bf8:	e027      	b.n	8009c4a <AT_ParseInfo+0xca>

    case 3:
      strncpy((char *)Obj->Stack_Rev,  ptr, ES_WIFI_STACK_REV_SIZE);
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	3348      	adds	r3, #72	; 0x48
 8009bfe:	2210      	movs	r2, #16
 8009c00:	68f9      	ldr	r1, [r7, #12]
 8009c02:	4618      	mov	r0, r3
 8009c04:	f008 fa7f 	bl	8012106 <strncpy>
      break;
 8009c08:	e01f      	b.n	8009c4a <AT_ParseInfo+0xca>

    case 4:
      strncpy((char *)Obj->RTOS_Rev,  ptr, ES_WIFI_RTOS_REV_SIZE);
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	3358      	adds	r3, #88	; 0x58
 8009c0e:	2210      	movs	r2, #16
 8009c10:	68f9      	ldr	r1, [r7, #12]
 8009c12:	4618      	mov	r0, r3
 8009c14:	f008 fa77 	bl	8012106 <strncpy>
      break;
 8009c18:	e017      	b.n	8009c4a <AT_ParseInfo+0xca>

    case 5:
      Obj->CPU_Clock = ParseNumber(ptr, NULL);
 8009c1a:	2100      	movs	r1, #0
 8009c1c:	68f8      	ldr	r0, [r7, #12]
 8009c1e:	f7ff ff15 	bl	8009a4c <ParseNumber>
 8009c22:	4603      	mov	r3, r0
 8009c24:	461a      	mov	r2, r3
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      break;
 8009c2c:	e00d      	b.n	8009c4a <AT_ParseInfo+0xca>

    case 6:
      ptr = strtok(ptr, "\r");
 8009c2e:	490e      	ldr	r1, [pc, #56]	; (8009c68 <AT_ParseInfo+0xe8>)
 8009c30:	68f8      	ldr	r0, [r7, #12]
 8009c32:	f008 fa91 	bl	8012158 <strtok>
 8009c36:	60f8      	str	r0, [r7, #12]
      strncpy((char *)Obj->Product_Name,  ptr, ES_WIFI_PRODUCT_NAME_SIZE);
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	3368      	adds	r3, #104	; 0x68
 8009c3c:	2220      	movs	r2, #32
 8009c3e:	68f9      	ldr	r1, [r7, #12]
 8009c40:	4618      	mov	r0, r3
 8009c42:	f008 fa60 	bl	8012106 <strncpy>
      break;
 8009c46:	e000      	b.n	8009c4a <AT_ParseInfo+0xca>

    default: break;
 8009c48:	bf00      	nop
    }
    ptr = strtok(NULL, ",");
 8009c4a:	4906      	ldr	r1, [pc, #24]	; (8009c64 <AT_ParseInfo+0xe4>)
 8009c4c:	2000      	movs	r0, #0
 8009c4e:	f008 fa83 	bl	8012158 <strtok>
 8009c52:	60f8      	str	r0, [r7, #12]
  while (ptr != NULL){
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d1a1      	bne.n	8009b9e <AT_ParseInfo+0x1e>
  }
}
 8009c5a:	bf00      	nop
 8009c5c:	bf00      	nop
 8009c5e:	3710      	adds	r7, #16
 8009c60:	46bd      	mov	sp, r7
 8009c62:	bd80      	pop	{r7, pc}
 8009c64:	080133f8 	.word	0x080133f8
 8009c68:	080133fc 	.word	0x080133fc

08009c6c <AT_ParseConnSettings>:
  * @param  NetSettings: settings
  * @param  pdata: pointer to data
  * @retval None.
  */
static void AT_ParseConnSettings(char *pdata, ES_WIFI_Network_t *NetSettings)
{
 8009c6c:	b580      	push	{r7, lr}
 8009c6e:	b084      	sub	sp, #16
 8009c70:	af00      	add	r7, sp, #0
 8009c72:	6078      	str	r0, [r7, #4]
 8009c74:	6039      	str	r1, [r7, #0]
  uint8_t num = 0;
 8009c76:	2300      	movs	r3, #0
 8009c78:	73fb      	strb	r3, [r7, #15]
  char *ptr;

  ptr = strtok(pdata + 2, ",");
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	3302      	adds	r3, #2
 8009c7e:	4952      	ldr	r1, [pc, #328]	; (8009dc8 <AT_ParseConnSettings+0x15c>)
 8009c80:	4618      	mov	r0, r3
 8009c82:	f008 fa69 	bl	8012158 <strtok>
 8009c86:	60b8      	str	r0, [r7, #8]

  while (ptr != NULL) {
 8009c88:	e095      	b.n	8009db6 <AT_ParseConnSettings+0x14a>
    switch (num++) {
 8009c8a:	7bfb      	ldrb	r3, [r7, #15]
 8009c8c:	1c5a      	adds	r2, r3, #1
 8009c8e:	73fa      	strb	r2, [r7, #15]
 8009c90:	2b0b      	cmp	r3, #11
 8009c92:	d87f      	bhi.n	8009d94 <AT_ParseConnSettings+0x128>
 8009c94:	a201      	add	r2, pc, #4	; (adr r2, 8009c9c <AT_ParseConnSettings+0x30>)
 8009c96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c9a:	bf00      	nop
 8009c9c:	08009ccd 	.word	0x08009ccd
 8009ca0:	08009cdb 	.word	0x08009cdb
 8009ca4:	08009ceb 	.word	0x08009ceb
 8009ca8:	08009cff 	.word	0x08009cff
 8009cac:	08009d13 	.word	0x08009d13
 8009cb0:	08009d27 	.word	0x08009d27
 8009cb4:	08009d35 	.word	0x08009d35
 8009cb8:	08009d43 	.word	0x08009d43
 8009cbc:	08009d51 	.word	0x08009d51
 8009cc0:	08009d5f 	.word	0x08009d5f
 8009cc4:	08009d6d 	.word	0x08009d6d
 8009cc8:	08009d81 	.word	0x08009d81
    case 0:
      strncpy((char *)NetSettings->SSID,  ptr, ES_WIFI_MAX_SSID_NAME_SIZE + 1);
 8009ccc:	683b      	ldr	r3, [r7, #0]
 8009cce:	2221      	movs	r2, #33	; 0x21
 8009cd0:	68b9      	ldr	r1, [r7, #8]
 8009cd2:	4618      	mov	r0, r3
 8009cd4:	f008 fa17 	bl	8012106 <strncpy>
      break;
 8009cd8:	e05d      	b.n	8009d96 <AT_ParseConnSettings+0x12a>

    case 1:
      strncpy((char *)NetSettings->pswd,  ptr, ES_WIFI_MAX_PSWD_NAME_SIZE + 1);
 8009cda:	683b      	ldr	r3, [r7, #0]
 8009cdc:	3321      	adds	r3, #33	; 0x21
 8009cde:	2221      	movs	r2, #33	; 0x21
 8009ce0:	68b9      	ldr	r1, [r7, #8]
 8009ce2:	4618      	mov	r0, r3
 8009ce4:	f008 fa0f 	bl	8012106 <strncpy>
      break;
 8009ce8:	e055      	b.n	8009d96 <AT_ParseConnSettings+0x12a>

    case 2:
        NetSettings->Security = (ES_WIFI_SecurityType_t)ParseNumber(ptr, NULL);
 8009cea:	2100      	movs	r1, #0
 8009cec:	68b8      	ldr	r0, [r7, #8]
 8009cee:	f7ff fead 	bl	8009a4c <ParseNumber>
 8009cf2:	4603      	mov	r3, r0
 8009cf4:	b2da      	uxtb	r2, r3
 8009cf6:	683b      	ldr	r3, [r7, #0]
 8009cf8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        break;
 8009cfc:	e04b      	b.n	8009d96 <AT_ParseConnSettings+0x12a>

    case 3:
      NetSettings->DHCP_IsEnabled = ParseNumber(ptr, NULL);
 8009cfe:	2100      	movs	r1, #0
 8009d00:	68b8      	ldr	r0, [r7, #8]
 8009d02:	f7ff fea3 	bl	8009a4c <ParseNumber>
 8009d06:	4603      	mov	r3, r0
 8009d08:	b2da      	uxtb	r2, r3
 8009d0a:	683b      	ldr	r3, [r7, #0]
 8009d0c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      break;
 8009d10:	e041      	b.n	8009d96 <AT_ParseConnSettings+0x12a>

    case 4:
      NetSettings->IP_Ver = (ES_WIFI_IPVer_t)ParseNumber(ptr, NULL);
 8009d12:	2100      	movs	r1, #0
 8009d14:	68b8      	ldr	r0, [r7, #8]
 8009d16:	f7ff fe99 	bl	8009a4c <ParseNumber>
 8009d1a:	4603      	mov	r3, r0
 8009d1c:	b2da      	uxtb	r2, r3
 8009d1e:	683b      	ldr	r3, [r7, #0]
 8009d20:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
      break;
 8009d24:	e037      	b.n	8009d96 <AT_ParseConnSettings+0x12a>

    case 5:
      ParseIP(ptr, NetSettings->IP_Addr);
 8009d26:	683b      	ldr	r3, [r7, #0]
 8009d28:	3348      	adds	r3, #72	; 0x48
 8009d2a:	4619      	mov	r1, r3
 8009d2c:	68b8      	ldr	r0, [r7, #8]
 8009d2e:	f7ff fefc 	bl	8009b2a <ParseIP>
      break;
 8009d32:	e030      	b.n	8009d96 <AT_ParseConnSettings+0x12a>

    case 6:
      ParseIP(ptr, NetSettings->IP_Mask);
 8009d34:	683b      	ldr	r3, [r7, #0]
 8009d36:	334c      	adds	r3, #76	; 0x4c
 8009d38:	4619      	mov	r1, r3
 8009d3a:	68b8      	ldr	r0, [r7, #8]
 8009d3c:	f7ff fef5 	bl	8009b2a <ParseIP>
      break;
 8009d40:	e029      	b.n	8009d96 <AT_ParseConnSettings+0x12a>

    case 7:
      ParseIP(ptr, NetSettings->Gateway_Addr);
 8009d42:	683b      	ldr	r3, [r7, #0]
 8009d44:	3350      	adds	r3, #80	; 0x50
 8009d46:	4619      	mov	r1, r3
 8009d48:	68b8      	ldr	r0, [r7, #8]
 8009d4a:	f7ff feee 	bl	8009b2a <ParseIP>
      break;
 8009d4e:	e022      	b.n	8009d96 <AT_ParseConnSettings+0x12a>

    case 8:
      ParseIP(ptr, NetSettings->DNS1);
 8009d50:	683b      	ldr	r3, [r7, #0]
 8009d52:	3354      	adds	r3, #84	; 0x54
 8009d54:	4619      	mov	r1, r3
 8009d56:	68b8      	ldr	r0, [r7, #8]
 8009d58:	f7ff fee7 	bl	8009b2a <ParseIP>
      break;
 8009d5c:	e01b      	b.n	8009d96 <AT_ParseConnSettings+0x12a>

    case 9:
      ParseIP(ptr, NetSettings->DNS2);
 8009d5e:	683b      	ldr	r3, [r7, #0]
 8009d60:	3358      	adds	r3, #88	; 0x58
 8009d62:	4619      	mov	r1, r3
 8009d64:	68b8      	ldr	r0, [r7, #8]
 8009d66:	f7ff fee0 	bl	8009b2a <ParseIP>
      break;
 8009d6a:	e014      	b.n	8009d96 <AT_ParseConnSettings+0x12a>

    case 10:
      NetSettings->JoinRetries = ParseNumber(ptr, NULL);
 8009d6c:	2100      	movs	r1, #0
 8009d6e:	68b8      	ldr	r0, [r7, #8]
 8009d70:	f7ff fe6c 	bl	8009a4c <ParseNumber>
 8009d74:	4603      	mov	r3, r0
 8009d76:	b2da      	uxtb	r2, r3
 8009d78:	683b      	ldr	r3, [r7, #0]
 8009d7a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      break;
 8009d7e:	e00a      	b.n	8009d96 <AT_ParseConnSettings+0x12a>

    case 11:
      NetSettings->AutoConnect = ParseNumber(ptr, NULL);
 8009d80:	2100      	movs	r1, #0
 8009d82:	68b8      	ldr	r0, [r7, #8]
 8009d84:	f7ff fe62 	bl	8009a4c <ParseNumber>
 8009d88:	4603      	mov	r3, r0
 8009d8a:	b2da      	uxtb	r2, r3
 8009d8c:	683b      	ldr	r3, [r7, #0]
 8009d8e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
      break;
 8009d92:	e000      	b.n	8009d96 <AT_ParseConnSettings+0x12a>

    default:
      break;
 8009d94:	bf00      	nop
    }
    ptr = strtok(NULL, ",");
 8009d96:	490c      	ldr	r1, [pc, #48]	; (8009dc8 <AT_ParseConnSettings+0x15c>)
 8009d98:	2000      	movs	r0, #0
 8009d9a:	f008 f9dd 	bl	8012158 <strtok>
 8009d9e:	60b8      	str	r0, [r7, #8]
    if ((ptr != NULL) && (ptr[-1] == ','))
 8009da0:	68bb      	ldr	r3, [r7, #8]
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d007      	beq.n	8009db6 <AT_ParseConnSettings+0x14a>
 8009da6:	68bb      	ldr	r3, [r7, #8]
 8009da8:	3b01      	subs	r3, #1
 8009daa:	781b      	ldrb	r3, [r3, #0]
 8009dac:	2b2c      	cmp	r3, #44	; 0x2c
 8009dae:	d102      	bne.n	8009db6 <AT_ParseConnSettings+0x14a>
    { /* Ignore empty fields */
      num++;
 8009db0:	7bfb      	ldrb	r3, [r7, #15]
 8009db2:	3301      	adds	r3, #1
 8009db4:	73fb      	strb	r3, [r7, #15]
  while (ptr != NULL) {
 8009db6:	68bb      	ldr	r3, [r7, #8]
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	f47f af66 	bne.w	8009c8a <AT_ParseConnSettings+0x1e>
    }
  }
}
 8009dbe:	bf00      	nop
 8009dc0:	bf00      	nop
 8009dc2:	3710      	adds	r7, #16
 8009dc4:	46bd      	mov	sp, r7
 8009dc6:	bd80      	pop	{r7, pc}
 8009dc8:	080133f8 	.word	0x080133f8

08009dcc <AT_ParseIsConnected>:
  * @param  pdata: pointer to data
  * @param  isConnected: pointer to result
  * @retval None.
  */
static void AT_ParseIsConnected(char *pdata, uint8_t *isConnected)
{
 8009dcc:	b480      	push	{r7}
 8009dce:	b083      	sub	sp, #12
 8009dd0:	af00      	add	r7, sp, #0
 8009dd2:	6078      	str	r0, [r7, #4]
 8009dd4:	6039      	str	r1, [r7, #0]
  *isConnected = (pdata[2] == '1') ? 1 : 0;
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	3302      	adds	r3, #2
 8009dda:	781b      	ldrb	r3, [r3, #0]
 8009ddc:	2b31      	cmp	r3, #49	; 0x31
 8009dde:	bf0c      	ite	eq
 8009de0:	2301      	moveq	r3, #1
 8009de2:	2300      	movne	r3, #0
 8009de4:	b2db      	uxtb	r3, r3
 8009de6:	461a      	mov	r2, r3
 8009de8:	683b      	ldr	r3, [r7, #0]
 8009dea:	701a      	strb	r2, [r3, #0]
}
 8009dec:	bf00      	nop
 8009dee:	370c      	adds	r7, #12
 8009df0:	46bd      	mov	sp, r7
 8009df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009df6:	4770      	bx	lr

08009df8 <AT_ExecuteCommand>:
  * @param  cmd: pointer to command string
  * @param  pdata: pointer to returned data
  * @retval Operation Status.
  */
static ES_WIFI_Status_t AT_ExecuteCommand(ES_WIFIObject_t *Obj, uint8_t* cmd, uint8_t *pdata)
{
 8009df8:	b590      	push	{r4, r7, lr}
 8009dfa:	b087      	sub	sp, #28
 8009dfc:	af00      	add	r7, sp, #0
 8009dfe:	60f8      	str	r0, [r7, #12]
 8009e00:	60b9      	str	r1, [r7, #8]
 8009e02:	607a      	str	r2, [r7, #4]
  int ret = 0;
 8009e04:	2300      	movs	r3, #0
 8009e06:	613b      	str	r3, [r7, #16]
  int16_t recv_len = 0;
 8009e08:	2300      	movs	r3, #0
 8009e0a:	82fb      	strh	r3, [r7, #22]
  LOCK_WIFI();

  ret = Obj->fops.IO_Send(cmd, strlen((char*)cmd), Obj->Timeout);
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	f8d3 4120 	ldr.w	r4, [r3, #288]	; 0x120
 8009e12:	68b8      	ldr	r0, [r7, #8]
 8009e14:	f7f6 f9dc 	bl	80001d0 <strlen>
 8009e18:	4603      	mov	r3, r0
 8009e1a:	b299      	uxth	r1, r3
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	; 0x8f8
 8009e22:	461a      	mov	r2, r3
 8009e24:	68b8      	ldr	r0, [r7, #8]
 8009e26:	47a0      	blx	r4
 8009e28:	4603      	mov	r3, r0
 8009e2a:	613b      	str	r3, [r7, #16]

  if( ret > 0)
 8009e2c:	693b      	ldr	r3, [r7, #16]
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	dd3e      	ble.n	8009eb0 <AT_ExecuteCommand+0xb8>
  {
    recv_len = Obj->fops.IO_Receive(pdata, ES_WIFI_DATA_SIZE, Obj->Timeout);
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8009e38:	68fa      	ldr	r2, [r7, #12]
 8009e3a:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	; 0x8f8
 8009e3e:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8009e42:	6878      	ldr	r0, [r7, #4]
 8009e44:	4798      	blx	r3
 8009e46:	4603      	mov	r3, r0
 8009e48:	82fb      	strh	r3, [r7, #22]
    if((recv_len > 0) && (recv_len <= ES_WIFI_DATA_SIZE))
 8009e4a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	dd27      	ble.n	8009ea2 <AT_ExecuteCommand+0xaa>
 8009e52:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8009e56:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8009e5a:	dc22      	bgt.n	8009ea2 <AT_ExecuteCommand+0xaa>
    {
      if (recv_len == ES_WIFI_DATA_SIZE)
 8009e5c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8009e60:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8009e64:	d105      	bne.n	8009e72 <AT_ExecuteCommand+0x7a>
      {
        // ES_WIFI_DATA_SIZE maybe too small !!
        recv_len--;
 8009e66:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8009e6a:	b29b      	uxth	r3, r3
 8009e6c:	3b01      	subs	r3, #1
 8009e6e:	b29b      	uxth	r3, r3
 8009e70:	82fb      	strh	r3, [r7, #22]
      }
      *(pdata + recv_len) = 0;
 8009e72:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8009e76:	687a      	ldr	r2, [r7, #4]
 8009e78:	4413      	add	r3, r2
 8009e7a:	2200      	movs	r2, #0
 8009e7c:	701a      	strb	r2, [r3, #0]
      if(strstr((char *)pdata, AT_OK_STRING))
 8009e7e:	490f      	ldr	r1, [pc, #60]	; (8009ebc <AT_ExecuteCommand+0xc4>)
 8009e80:	6878      	ldr	r0, [r7, #4]
 8009e82:	f008 f953 	bl	801212c <strstr>
 8009e86:	4603      	mov	r3, r0
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d001      	beq.n	8009e90 <AT_ExecuteCommand+0x98>
      {
        UNLOCK_WIFI();
        return ES_WIFI_STATUS_OK;
 8009e8c:	2300      	movs	r3, #0
 8009e8e:	e010      	b.n	8009eb2 <AT_ExecuteCommand+0xba>
      }
      else if(strstr((char *)pdata, AT_ERROR_STRING))
 8009e90:	490b      	ldr	r1, [pc, #44]	; (8009ec0 <AT_ExecuteCommand+0xc8>)
 8009e92:	6878      	ldr	r0, [r7, #4]
 8009e94:	f008 f94a 	bl	801212c <strstr>
 8009e98:	4603      	mov	r3, r0
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d001      	beq.n	8009ea2 <AT_ExecuteCommand+0xaa>
      {
        UNLOCK_WIFI();
        return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 8009e9e:	2305      	movs	r3, #5
 8009ea0:	e007      	b.n	8009eb2 <AT_ExecuteCommand+0xba>
      }
    }
    if (recv_len == ES_WIFI_ERROR_STUFFING_FOREVER )
 8009ea2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8009ea6:	f113 0f04 	cmn.w	r3, #4
 8009eaa:	d101      	bne.n	8009eb0 <AT_ExecuteCommand+0xb8>
    {
      UNLOCK_WIFI();
      return ES_WIFI_STATUS_MODULE_CRASH;
 8009eac:	2306      	movs	r3, #6
 8009eae:	e000      	b.n	8009eb2 <AT_ExecuteCommand+0xba>
    }
  }
  UNLOCK_WIFI();
  return ES_WIFI_STATUS_IO_ERROR;
 8009eb0:	2304      	movs	r3, #4
}
 8009eb2:	4618      	mov	r0, r3
 8009eb4:	371c      	adds	r7, #28
 8009eb6:	46bd      	mov	sp, r7
 8009eb8:	bd90      	pop	{r4, r7, pc}
 8009eba:	bf00      	nop
 8009ebc:	0801340c 	.word	0x0801340c
 8009ec0:	08013418 	.word	0x08013418

08009ec4 <AT_RequestSendData>:
  * @param  pdata: pointer to returned data
  * @retval Operation Status.
  */

static ES_WIFI_Status_t AT_RequestSendData(ES_WIFIObject_t *Obj, uint8_t* cmd, uint8_t *pcmd_data, uint16_t len, uint8_t *pdata)
{
 8009ec4:	b580      	push	{r7, lr}
 8009ec6:	b086      	sub	sp, #24
 8009ec8:	af00      	add	r7, sp, #0
 8009eca:	60f8      	str	r0, [r7, #12]
 8009ecc:	60b9      	str	r1, [r7, #8]
 8009ece:	607a      	str	r2, [r7, #4]
 8009ed0:	807b      	strh	r3, [r7, #2]
  int16_t send_len = 0;
 8009ed2:	2300      	movs	r3, #0
 8009ed4:	82fb      	strh	r3, [r7, #22]
  int16_t recv_len = 0;
 8009ed6:	2300      	movs	r3, #0
 8009ed8:	82bb      	strh	r3, [r7, #20]
  uint16_t cmd_len = 0;
 8009eda:	2300      	movs	r3, #0
 8009edc:	827b      	strh	r3, [r7, #18]
  uint16_t n ;

  LOCK_WIFI();
  cmd_len = strlen((char*)cmd);
 8009ede:	68b8      	ldr	r0, [r7, #8]
 8009ee0:	f7f6 f976 	bl	80001d0 <strlen>
 8009ee4:	4603      	mov	r3, r0
 8009ee6:	827b      	strh	r3, [r7, #18]

  /* can send only even number of byte on first send */
  if (cmd_len & 1) return ES_WIFI_STATUS_ERROR;
 8009ee8:	8a7b      	ldrh	r3, [r7, #18]
 8009eea:	f003 0301 	and.w	r3, r3, #1
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d001      	beq.n	8009ef6 <AT_RequestSendData+0x32>
 8009ef2:	2302      	movs	r3, #2
 8009ef4:	e053      	b.n	8009f9e <AT_RequestSendData+0xda>
  n=Obj->fops.IO_Send(cmd, cmd_len, Obj->Timeout);
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 8009efc:	68fa      	ldr	r2, [r7, #12]
 8009efe:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	; 0x8f8
 8009f02:	8a79      	ldrh	r1, [r7, #18]
 8009f04:	68b8      	ldr	r0, [r7, #8]
 8009f06:	4798      	blx	r3
 8009f08:	4603      	mov	r3, r0
 8009f0a:	823b      	strh	r3, [r7, #16]
  if (n == cmd_len)
 8009f0c:	8a3a      	ldrh	r2, [r7, #16]
 8009f0e:	8a7b      	ldrh	r3, [r7, #18]
 8009f10:	429a      	cmp	r2, r3
 8009f12:	d143      	bne.n	8009f9c <AT_RequestSendData+0xd8>
  {
    send_len = Obj->fops.IO_Send(pcmd_data, len, Obj->Timeout);
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 8009f1a:	68fa      	ldr	r2, [r7, #12]
 8009f1c:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	; 0x8f8
 8009f20:	8879      	ldrh	r1, [r7, #2]
 8009f22:	6878      	ldr	r0, [r7, #4]
 8009f24:	4798      	blx	r3
 8009f26:	4603      	mov	r3, r0
 8009f28:	82fb      	strh	r3, [r7, #22]
    if (send_len == len)
 8009f2a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8009f2e:	887b      	ldrh	r3, [r7, #2]
 8009f30:	429a      	cmp	r2, r3
 8009f32:	d131      	bne.n	8009f98 <AT_RequestSendData+0xd4>
    {
      recv_len = Obj->fops.IO_Receive(pdata, 0, Obj->Timeout);
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8009f3a:	68fa      	ldr	r2, [r7, #12]
 8009f3c:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	; 0x8f8
 8009f40:	2100      	movs	r1, #0
 8009f42:	6a38      	ldr	r0, [r7, #32]
 8009f44:	4798      	blx	r3
 8009f46:	4603      	mov	r3, r0
 8009f48:	82bb      	strh	r3, [r7, #20]
      if (recv_len > 0)
 8009f4a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	dd19      	ble.n	8009f86 <AT_RequestSendData+0xc2>
      {
        *(pdata+recv_len) = 0;
 8009f52:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8009f56:	6a3a      	ldr	r2, [r7, #32]
 8009f58:	4413      	add	r3, r2
 8009f5a:	2200      	movs	r2, #0
 8009f5c:	701a      	strb	r2, [r3, #0]
        if(strstr((char *)pdata, AT_OK_STRING))
 8009f5e:	4912      	ldr	r1, [pc, #72]	; (8009fa8 <AT_RequestSendData+0xe4>)
 8009f60:	6a38      	ldr	r0, [r7, #32]
 8009f62:	f008 f8e3 	bl	801212c <strstr>
 8009f66:	4603      	mov	r3, r0
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d001      	beq.n	8009f70 <AT_RequestSendData+0xac>
        {
          UNLOCK_WIFI();
          return ES_WIFI_STATUS_OK;
 8009f6c:	2300      	movs	r3, #0
 8009f6e:	e016      	b.n	8009f9e <AT_RequestSendData+0xda>
        }
        else if(strstr((char *)pdata, AT_ERROR_STRING))
 8009f70:	490e      	ldr	r1, [pc, #56]	; (8009fac <AT_RequestSendData+0xe8>)
 8009f72:	6a38      	ldr	r0, [r7, #32]
 8009f74:	f008 f8da 	bl	801212c <strstr>
 8009f78:	4603      	mov	r3, r0
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d001      	beq.n	8009f82 <AT_RequestSendData+0xbe>
        {
          UNLOCK_WIFI();
          return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 8009f7e:	2305      	movs	r3, #5
 8009f80:	e00d      	b.n	8009f9e <AT_RequestSendData+0xda>
        }
        else
        {
          UNLOCK_WIFI();
          return ES_WIFI_STATUS_ERROR;
 8009f82:	2302      	movs	r3, #2
 8009f84:	e00b      	b.n	8009f9e <AT_RequestSendData+0xda>
        }
      }
      UNLOCK_WIFI();
      if (recv_len == ES_WIFI_ERROR_STUFFING_FOREVER )
 8009f86:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8009f8a:	f113 0f04 	cmn.w	r3, #4
 8009f8e:	d101      	bne.n	8009f94 <AT_RequestSendData+0xd0>
      {
        return ES_WIFI_STATUS_MODULE_CRASH;
 8009f90:	2306      	movs	r3, #6
 8009f92:	e004      	b.n	8009f9e <AT_RequestSendData+0xda>
      }
      return ES_WIFI_STATUS_ERROR;
 8009f94:	2302      	movs	r3, #2
 8009f96:	e002      	b.n	8009f9e <AT_RequestSendData+0xda>
    }
    else
    {
      return ES_WIFI_STATUS_ERROR;
 8009f98:	2302      	movs	r3, #2
 8009f9a:	e000      	b.n	8009f9e <AT_RequestSendData+0xda>
    }
  }
  return ES_WIFI_STATUS_IO_ERROR;
 8009f9c:	2304      	movs	r3, #4
}
 8009f9e:	4618      	mov	r0, r3
 8009fa0:	3718      	adds	r7, #24
 8009fa2:	46bd      	mov	sp, r7
 8009fa4:	bd80      	pop	{r7, pc}
 8009fa6:	bf00      	nop
 8009fa8:	0801340c 	.word	0x0801340c
 8009fac:	08013418 	.word	0x08013418

08009fb0 <AT_RequestReceiveData>:
  * @param  Reqlen : requested Data length.
  * @param  ReadData : pointer to received data length.
  * @retval Operation Status.
  */
static ES_WIFI_Status_t AT_RequestReceiveData(ES_WIFIObject_t *Obj, uint8_t* cmd, char *pdata, uint16_t Reqlen, uint16_t *ReadData)
{
 8009fb0:	b590      	push	{r4, r7, lr}
 8009fb2:	b087      	sub	sp, #28
 8009fb4:	af00      	add	r7, sp, #0
 8009fb6:	60f8      	str	r0, [r7, #12]
 8009fb8:	60b9      	str	r1, [r7, #8]
 8009fba:	607a      	str	r2, [r7, #4]
 8009fbc:	807b      	strh	r3, [r7, #2]
  int len;
  uint8_t *p=Obj->CmdData;
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8009fc4:	613b      	str	r3, [r7, #16]

  LOCK_WIFI();
  if(Obj->fops.IO_Send(cmd, strlen((char*)cmd), Obj->Timeout) > 0)
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	f8d3 4120 	ldr.w	r4, [r3, #288]	; 0x120
 8009fcc:	68b8      	ldr	r0, [r7, #8]
 8009fce:	f7f6 f8ff 	bl	80001d0 <strlen>
 8009fd2:	4603      	mov	r3, r0
 8009fd4:	b299      	uxth	r1, r3
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	; 0x8f8
 8009fdc:	461a      	mov	r2, r3
 8009fde:	68b8      	ldr	r0, [r7, #8]
 8009fe0:	47a0      	blx	r4
 8009fe2:	4603      	mov	r3, r0
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	dd6f      	ble.n	800a0c8 <AT_RequestReceiveData+0x118>
  {
    len = Obj->fops.IO_Receive(p, 0 , Obj->Timeout);
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8009fee:	68fa      	ldr	r2, [r7, #12]
 8009ff0:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	; 0x8f8
 8009ff4:	2100      	movs	r1, #0
 8009ff6:	6938      	ldr	r0, [r7, #16]
 8009ff8:	4798      	blx	r3
 8009ffa:	4603      	mov	r3, r0
 8009ffc:	617b      	str	r3, [r7, #20]
    if ((p[0]!='\r') || (p[1]!='\n'))
 8009ffe:	693b      	ldr	r3, [r7, #16]
 800a000:	781b      	ldrb	r3, [r3, #0]
 800a002:	2b0d      	cmp	r3, #13
 800a004:	d104      	bne.n	800a010 <AT_RequestReceiveData+0x60>
 800a006:	693b      	ldr	r3, [r7, #16]
 800a008:	3301      	adds	r3, #1
 800a00a:	781b      	ldrb	r3, [r3, #0]
 800a00c:	2b0a      	cmp	r3, #10
 800a00e:	d001      	beq.n	800a014 <AT_RequestReceiveData+0x64>
    {
     return  ES_WIFI_STATUS_IO_ERROR;
 800a010:	2304      	movs	r3, #4
 800a012:	e05a      	b.n	800a0ca <AT_RequestReceiveData+0x11a>
    }
    len-=2;
 800a014:	697b      	ldr	r3, [r7, #20]
 800a016:	3b02      	subs	r3, #2
 800a018:	617b      	str	r3, [r7, #20]
    p+=2;
 800a01a:	693b      	ldr	r3, [r7, #16]
 800a01c:	3302      	adds	r3, #2
 800a01e:	613b      	str	r3, [r7, #16]
    if (len >= AT_OK_STRING_LEN)
 800a020:	697b      	ldr	r3, [r7, #20]
 800a022:	2b07      	cmp	r3, #7
 800a024:	d94a      	bls.n	800a0bc <AT_RequestReceiveData+0x10c>
    {
     while(len && (p[len-1]==0x15)) len--;
 800a026:	e002      	b.n	800a02e <AT_RequestReceiveData+0x7e>
 800a028:	697b      	ldr	r3, [r7, #20]
 800a02a:	3b01      	subs	r3, #1
 800a02c:	617b      	str	r3, [r7, #20]
 800a02e:	697b      	ldr	r3, [r7, #20]
 800a030:	2b00      	cmp	r3, #0
 800a032:	d006      	beq.n	800a042 <AT_RequestReceiveData+0x92>
 800a034:	697b      	ldr	r3, [r7, #20]
 800a036:	3b01      	subs	r3, #1
 800a038:	693a      	ldr	r2, [r7, #16]
 800a03a:	4413      	add	r3, r2
 800a03c:	781b      	ldrb	r3, [r3, #0]
 800a03e:	2b15      	cmp	r3, #21
 800a040:	d0f2      	beq.n	800a028 <AT_RequestReceiveData+0x78>
     p[len] = '\0';
 800a042:	697b      	ldr	r3, [r7, #20]
 800a044:	693a      	ldr	r2, [r7, #16]
 800a046:	4413      	add	r3, r2
 800a048:	2200      	movs	r2, #0
 800a04a:	701a      	strb	r2, [r3, #0]
     if(strstr( (char*) p + len - AT_OK_STRING_LEN, AT_OK_STRING))
 800a04c:	697b      	ldr	r3, [r7, #20]
 800a04e:	3b08      	subs	r3, #8
 800a050:	693a      	ldr	r2, [r7, #16]
 800a052:	4413      	add	r3, r2
 800a054:	491f      	ldr	r1, [pc, #124]	; (800a0d4 <AT_RequestReceiveData+0x124>)
 800a056:	4618      	mov	r0, r3
 800a058:	f008 f868 	bl	801212c <strstr>
 800a05c:	4603      	mov	r3, r0
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d016      	beq.n	800a090 <AT_RequestReceiveData+0xe0>
     {
       *ReadData = len - AT_OK_STRING_LEN;
 800a062:	697b      	ldr	r3, [r7, #20]
 800a064:	b29b      	uxth	r3, r3
 800a066:	3b08      	subs	r3, #8
 800a068:	b29a      	uxth	r2, r3
 800a06a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a06c:	801a      	strh	r2, [r3, #0]
	   if (*ReadData > Reqlen)
 800a06e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a070:	881b      	ldrh	r3, [r3, #0]
 800a072:	887a      	ldrh	r2, [r7, #2]
 800a074:	429a      	cmp	r2, r3
 800a076:	d202      	bcs.n	800a07e <AT_RequestReceiveData+0xce>
       {
         *ReadData = Reqlen;
 800a078:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a07a:	887a      	ldrh	r2, [r7, #2]
 800a07c:	801a      	strh	r2, [r3, #0]
       }
       memcpy(pdata, p, *ReadData);
 800a07e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a080:	881b      	ldrh	r3, [r3, #0]
 800a082:	461a      	mov	r2, r3
 800a084:	6939      	ldr	r1, [r7, #16]
 800a086:	6878      	ldr	r0, [r7, #4]
 800a088:	f007 faeb 	bl	8011662 <memcpy>
       UNLOCK_WIFI();
       return ES_WIFI_STATUS_OK;
 800a08c:	2300      	movs	r3, #0
 800a08e:	e01c      	b.n	800a0ca <AT_RequestReceiveData+0x11a>
     }
     else if(memcmp((char *)p + len - AT_DELIMETER_LEN , AT_DELIMETER_STRING, AT_DELIMETER_LEN) == 0)
 800a090:	697b      	ldr	r3, [r7, #20]
 800a092:	3b04      	subs	r3, #4
 800a094:	693a      	ldr	r2, [r7, #16]
 800a096:	4413      	add	r3, r2
 800a098:	2204      	movs	r2, #4
 800a09a:	490f      	ldr	r1, [pc, #60]	; (800a0d8 <AT_RequestReceiveData+0x128>)
 800a09c:	4618      	mov	r0, r3
 800a09e:	f007 fad0 	bl	8011642 <memcmp>
 800a0a2:	4603      	mov	r3, r0
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d104      	bne.n	800a0b2 <AT_RequestReceiveData+0x102>
     {
       *ReadData = 0;
 800a0a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0aa:	2200      	movs	r2, #0
 800a0ac:	801a      	strh	r2, [r3, #0]
       UNLOCK_WIFI();
       return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 800a0ae:	2305      	movs	r3, #5
 800a0b0:	e00b      	b.n	800a0ca <AT_RequestReceiveData+0x11a>
     }

     UNLOCK_WIFI();
     *ReadData = 0;
 800a0b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0b4:	2200      	movs	r2, #0
 800a0b6:	801a      	strh	r2, [r3, #0]
     return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 800a0b8:	2305      	movs	r3, #5
 800a0ba:	e006      	b.n	800a0ca <AT_RequestReceiveData+0x11a>
   }
   if (len == ES_WIFI_ERROR_STUFFING_FOREVER )
 800a0bc:	697b      	ldr	r3, [r7, #20]
 800a0be:	f113 0f04 	cmn.w	r3, #4
 800a0c2:	d101      	bne.n	800a0c8 <AT_RequestReceiveData+0x118>
   {
     UNLOCK_WIFI();
     return ES_WIFI_STATUS_MODULE_CRASH;
 800a0c4:	2306      	movs	r3, #6
 800a0c6:	e000      	b.n	800a0ca <AT_RequestReceiveData+0x11a>
   }
  }
  UNLOCK_WIFI();
  return ES_WIFI_STATUS_IO_ERROR;
 800a0c8:	2304      	movs	r3, #4
}
 800a0ca:	4618      	mov	r0, r3
 800a0cc:	371c      	adds	r7, #28
 800a0ce:	46bd      	mov	sp, r7
 800a0d0:	bd90      	pop	{r4, r7, pc}
 800a0d2:	bf00      	nop
 800a0d4:	0801340c 	.word	0x0801340c
 800a0d8:	08013420 	.word	0x08013420

0800a0dc <ES_WIFI_Init>:
  * @brief  Initialize WIFI module.
  * @param  Obj: pointer to module handle
  * @retval Operation Status.
  */
ES_WIFI_Status_t  ES_WIFI_Init(ES_WIFIObject_t *Obj)
{
 800a0dc:	b580      	push	{r7, lr}
 800a0de:	b084      	sub	sp, #16
 800a0e0:	af00      	add	r7, sp, #0
 800a0e2:	6078      	str	r0, [r7, #4]
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
 800a0e4:	2302      	movs	r3, #2
 800a0e6:	73fb      	strb	r3, [r7, #15]

  LOCK_WIFI();

  Obj->Timeout = ES_WIFI_TIMEOUT;
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	f247 5230 	movw	r2, #30000	; 0x7530
 800a0ee:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8

  if (Obj->fops.IO_Init(ES_WIFI_INIT) == 0)
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800a0f8:	2000      	movs	r0, #0
 800a0fa:	4798      	blx	r3
 800a0fc:	4603      	mov	r3, r0
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d113      	bne.n	800a12a <ES_WIFI_Init+0x4e>
  {
    ret = AT_ExecuteCommand(Obj,(uint8_t*)"I?\r\n", Obj->CmdData);
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a108:	461a      	mov	r2, r3
 800a10a:	490a      	ldr	r1, [pc, #40]	; (800a134 <ES_WIFI_Init+0x58>)
 800a10c:	6878      	ldr	r0, [r7, #4]
 800a10e:	f7ff fe73 	bl	8009df8 <AT_ExecuteCommand>
 800a112:	4603      	mov	r3, r0
 800a114:	73fb      	strb	r3, [r7, #15]

    if(ret == ES_WIFI_STATUS_OK)
 800a116:	7bfb      	ldrb	r3, [r7, #15]
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d106      	bne.n	800a12a <ES_WIFI_Init+0x4e>
    {
      AT_ParseInfo (Obj, Obj->CmdData);
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a122:	4619      	mov	r1, r3
 800a124:	6878      	ldr	r0, [r7, #4]
 800a126:	f7ff fd2b 	bl	8009b80 <AT_ParseInfo>
    }
  }
  UNLOCK_WIFI();
  return ret;
 800a12a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a12c:	4618      	mov	r0, r3
 800a12e:	3710      	adds	r7, #16
 800a130:	46bd      	mov	sp, r7
 800a132:	bd80      	pop	{r7, pc}
 800a134:	08013428 	.word	0x08013428

0800a138 <ES_WIFI_RegisterBusIO>:
ES_WIFI_Status_t  ES_WIFI_RegisterBusIO(ES_WIFIObject_t *Obj, IO_Init_Func IO_Init,
                                                              IO_DeInit_Func  IO_DeInit,
                                                              IO_Delay_Func   IO_Delay,
                                                              IO_Send_Func    IO_Send,
                                                              IO_Receive_Func  IO_Receive)
{
 800a138:	b480      	push	{r7}
 800a13a:	b085      	sub	sp, #20
 800a13c:	af00      	add	r7, sp, #0
 800a13e:	60f8      	str	r0, [r7, #12]
 800a140:	60b9      	str	r1, [r7, #8]
 800a142:	607a      	str	r2, [r7, #4]
 800a144:	603b      	str	r3, [r7, #0]
  if(!Obj || !IO_Init || !IO_DeInit || !IO_Send || !IO_Receive)
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d00b      	beq.n	800a164 <ES_WIFI_RegisterBusIO+0x2c>
 800a14c:	68bb      	ldr	r3, [r7, #8]
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d008      	beq.n	800a164 <ES_WIFI_RegisterBusIO+0x2c>
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	2b00      	cmp	r3, #0
 800a156:	d005      	beq.n	800a164 <ES_WIFI_RegisterBusIO+0x2c>
 800a158:	69bb      	ldr	r3, [r7, #24]
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d002      	beq.n	800a164 <ES_WIFI_RegisterBusIO+0x2c>
 800a15e:	69fb      	ldr	r3, [r7, #28]
 800a160:	2b00      	cmp	r3, #0
 800a162:	d101      	bne.n	800a168 <ES_WIFI_RegisterBusIO+0x30>
  {
    return ES_WIFI_STATUS_ERROR;
 800a164:	2302      	movs	r3, #2
 800a166:	e014      	b.n	800a192 <ES_WIFI_RegisterBusIO+0x5a>
  }

  Obj->fops.IO_Init = IO_Init;
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	68ba      	ldr	r2, [r7, #8]
 800a16c:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
  Obj->fops.IO_DeInit = IO_DeInit;
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	687a      	ldr	r2, [r7, #4]
 800a174:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
  Obj->fops.IO_Send = IO_Send;
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	69ba      	ldr	r2, [r7, #24]
 800a17c:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
  Obj->fops.IO_Receive = IO_Receive;
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	69fa      	ldr	r2, [r7, #28]
 800a184:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
  Obj->fops.IO_Delay = IO_Delay;
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	683a      	ldr	r2, [r7, #0]
 800a18c:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  return ES_WIFI_STATUS_OK;
 800a190:	2300      	movs	r3, #0
}
 800a192:	4618      	mov	r0, r3
 800a194:	3714      	adds	r7, #20
 800a196:	46bd      	mov	sp, r7
 800a198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a19c:	4770      	bx	lr
	...

0800a1a0 <ES_WIFI_Connect>:
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_Connect(ES_WIFIObject_t *Obj, const char* SSID,
                                         const char* Password,
                                         ES_WIFI_SecurityType_t SecType)
{
 800a1a0:	b580      	push	{r7, lr}
 800a1a2:	b086      	sub	sp, #24
 800a1a4:	af00      	add	r7, sp, #0
 800a1a6:	60f8      	str	r0, [r7, #12]
 800a1a8:	60b9      	str	r1, [r7, #8]
 800a1aa:	607a      	str	r2, [r7, #4]
 800a1ac:	70fb      	strb	r3, [r7, #3]
  ES_WIFI_Status_t ret;
  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"C1=%s\r", SSID);
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a1b4:	68ba      	ldr	r2, [r7, #8]
 800a1b6:	4932      	ldr	r1, [pc, #200]	; (800a280 <ES_WIFI_Connect+0xe0>)
 800a1b8:	4618      	mov	r0, r3
 800a1ba:	f007 ff41 	bl	8012040 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a1ca:	461a      	mov	r2, r3
 800a1cc:	68f8      	ldr	r0, [r7, #12]
 800a1ce:	f7ff fe13 	bl	8009df8 <AT_ExecuteCommand>
 800a1d2:	4603      	mov	r3, r0
 800a1d4:	75fb      	strb	r3, [r7, #23]
  if(ret == ES_WIFI_STATUS_OK)
 800a1d6:	7dfb      	ldrb	r3, [r7, #23]
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	d14b      	bne.n	800a274 <ES_WIFI_Connect+0xd4>
  {
    sprintf((char*)Obj->CmdData,"C2=%s\r", Password);
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a1e2:	687a      	ldr	r2, [r7, #4]
 800a1e4:	4927      	ldr	r1, [pc, #156]	; (800a284 <ES_WIFI_Connect+0xe4>)
 800a1e6:	4618      	mov	r0, r3
 800a1e8:	f007 ff2a 	bl	8012040 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a1f8:	461a      	mov	r2, r3
 800a1fa:	68f8      	ldr	r0, [r7, #12]
 800a1fc:	f7ff fdfc 	bl	8009df8 <AT_ExecuteCommand>
 800a200:	4603      	mov	r3, r0
 800a202:	75fb      	strb	r3, [r7, #23]

    if(ret == ES_WIFI_STATUS_OK)
 800a204:	7dfb      	ldrb	r3, [r7, #23]
 800a206:	2b00      	cmp	r3, #0
 800a208:	d134      	bne.n	800a274 <ES_WIFI_Connect+0xd4>
    {
      Obj->Security = SecType;
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	78fa      	ldrb	r2, [r7, #3]
 800a20e:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
      sprintf((char*)Obj->CmdData,"C3=%d\r", (uint8_t)SecType);
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a218:	78fa      	ldrb	r2, [r7, #3]
 800a21a:	491b      	ldr	r1, [pc, #108]	; (800a288 <ES_WIFI_Connect+0xe8>)
 800a21c:	4618      	mov	r0, r3
 800a21e:	f007 ff0f 	bl	8012040 <siprintf>
      ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a22e:	461a      	mov	r2, r3
 800a230:	68f8      	ldr	r0, [r7, #12]
 800a232:	f7ff fde1 	bl	8009df8 <AT_ExecuteCommand>
 800a236:	4603      	mov	r3, r0
 800a238:	75fb      	strb	r3, [r7, #23]

      if(ret == ES_WIFI_STATUS_OK)
 800a23a:	7dfb      	ldrb	r3, [r7, #23]
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d119      	bne.n	800a274 <ES_WIFI_Connect+0xd4>
      {
        sprintf((char*)Obj->CmdData,"C0\r");
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a246:	4911      	ldr	r1, [pc, #68]	; (800a28c <ES_WIFI_Connect+0xec>)
 800a248:	4618      	mov	r0, r3
 800a24a:	f007 fef9 	bl	8012040 <siprintf>
        ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a25a:	461a      	mov	r2, r3
 800a25c:	68f8      	ldr	r0, [r7, #12]
 800a25e:	f7ff fdcb 	bl	8009df8 <AT_ExecuteCommand>
 800a262:	4603      	mov	r3, r0
 800a264:	75fb      	strb	r3, [r7, #23]
        if(ret == ES_WIFI_STATUS_OK)
 800a266:	7dfb      	ldrb	r3, [r7, #23]
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d103      	bne.n	800a274 <ES_WIFI_Connect+0xd4>
        {
           Obj->NetSettings.IsConnected = 1;
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	2201      	movs	r2, #1
 800a270:	f883 20d2 	strb.w	r2, [r3, #210]	; 0xd2
        }
      }
    }
  }
  UNLOCK_WIFI();
  return ret;
 800a274:	7dfb      	ldrb	r3, [r7, #23]
}
 800a276:	4618      	mov	r0, r3
 800a278:	3718      	adds	r7, #24
 800a27a:	46bd      	mov	sp, r7
 800a27c:	bd80      	pop	{r7, pc}
 800a27e:	bf00      	nop
 800a280:	08013440 	.word	0x08013440
 800a284:	08013448 	.word	0x08013448
 800a288:	08013450 	.word	0x08013450
 800a28c:	08013458 	.word	0x08013458

0800a290 <ES_WIFI_IsConnected>:
/**
  * @brief  Check whether the module is connected to an access point.
  * @retval Operation Status.
  */
uint8_t ES_WIFI_IsConnected(ES_WIFIObject_t *Obj)
{
 800a290:	b580      	push	{r7, lr}
 800a292:	b084      	sub	sp, #16
 800a294:	af00      	add	r7, sp, #0
 800a296:	6078      	str	r0, [r7, #4]
  ES_WIFI_Status_t ret ;
  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"CS\r");
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a29e:	4911      	ldr	r1, [pc, #68]	; (800a2e4 <ES_WIFI_IsConnected+0x54>)
 800a2a0:	4618      	mov	r0, r3
 800a2a2:	f007 fecd 	bl	8012040 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a2b2:	461a      	mov	r2, r3
 800a2b4:	6878      	ldr	r0, [r7, #4]
 800a2b6:	f7ff fd9f 	bl	8009df8 <AT_ExecuteCommand>
 800a2ba:	4603      	mov	r3, r0
 800a2bc:	73fb      	strb	r3, [r7, #15]
  if(ret == ES_WIFI_STATUS_OK)
 800a2be:	7bfb      	ldrb	r3, [r7, #15]
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d108      	bne.n	800a2d6 <ES_WIFI_IsConnected+0x46>
  {
    AT_ParseIsConnected((char *)Obj->CmdData, &(Obj->NetSettings.IsConnected));
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	f503 7294 	add.w	r2, r3, #296	; 0x128
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	33d2      	adds	r3, #210	; 0xd2
 800a2ce:	4619      	mov	r1, r3
 800a2d0:	4610      	mov	r0, r2
 800a2d2:	f7ff fd7b 	bl	8009dcc <AT_ParseIsConnected>
  }
  UNLOCK_WIFI();
  return Obj->NetSettings.IsConnected;
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	f893 30d2 	ldrb.w	r3, [r3, #210]	; 0xd2
}
 800a2dc:	4618      	mov	r0, r3
 800a2de:	3710      	adds	r7, #16
 800a2e0:	46bd      	mov	sp, r7
 800a2e2:	bd80      	pop	{r7, pc}
 800a2e4:	0801345c 	.word	0x0801345c

0800a2e8 <ES_WIFI_GetNetworkSettings>:
  * @param  Obj: pointer to module handle
  * @param  Pointer to network setting structure.
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_GetNetworkSettings(ES_WIFIObject_t *Obj)
{
 800a2e8:	b580      	push	{r7, lr}
 800a2ea:	b084      	sub	sp, #16
 800a2ec:	af00      	add	r7, sp, #0
 800a2ee:	6078      	str	r0, [r7, #4]
  ES_WIFI_Status_t ret;
  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"C?\r");
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a2f6:	4910      	ldr	r1, [pc, #64]	; (800a338 <ES_WIFI_GetNetworkSettings+0x50>)
 800a2f8:	4618      	mov	r0, r3
 800a2fa:	f007 fea1 	bl	8012040 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a30a:	461a      	mov	r2, r3
 800a30c:	6878      	ldr	r0, [r7, #4]
 800a30e:	f7ff fd73 	bl	8009df8 <AT_ExecuteCommand>
 800a312:	4603      	mov	r3, r0
 800a314:	73fb      	strb	r3, [r7, #15]

  if(ret == ES_WIFI_STATUS_OK)
 800a316:	7bfb      	ldrb	r3, [r7, #15]
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d108      	bne.n	800a32e <ES_WIFI_GetNetworkSettings+0x46>
  {
     AT_ParseConnSettings((char *)Obj->CmdData, &Obj->NetSettings);
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	f503 7294 	add.w	r2, r3, #296	; 0x128
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	338d      	adds	r3, #141	; 0x8d
 800a326:	4619      	mov	r1, r3
 800a328:	4610      	mov	r0, r2
 800a32a:	f7ff fc9f 	bl	8009c6c <AT_ParseConnSettings>
  }

  UNLOCK_WIFI();
  return ret;
 800a32e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a330:	4618      	mov	r0, r3
 800a332:	3710      	adds	r7, #16
 800a334:	46bd      	mov	sp, r7
 800a336:	bd80      	pop	{r7, pc}
 800a338:	08013464 	.word	0x08013464

0800a33c <ES_WIFI_GetMACAddress>:
  * @param  Obj: pointer to module handle
  * @param  mac: pointer to the MAC address array.
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_GetMACAddress(ES_WIFIObject_t *Obj, uint8_t *mac)
{
 800a33c:	b580      	push	{r7, lr}
 800a33e:	b084      	sub	sp, #16
 800a340:	af00      	add	r7, sp, #0
 800a342:	6078      	str	r0, [r7, #4]
 800a344:	6039      	str	r1, [r7, #0]
  ES_WIFI_Status_t ret ;
  char *ptr;
  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"Z5\r");
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a34c:	4912      	ldr	r1, [pc, #72]	; (800a398 <ES_WIFI_GetMACAddress+0x5c>)
 800a34e:	4618      	mov	r0, r3
 800a350:	f007 fe76 	bl	8012040 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a360:	461a      	mov	r2, r3
 800a362:	6878      	ldr	r0, [r7, #4]
 800a364:	f7ff fd48 	bl	8009df8 <AT_ExecuteCommand>
 800a368:	4603      	mov	r3, r0
 800a36a:	73fb      	strb	r3, [r7, #15]
  if(ret == ES_WIFI_STATUS_OK)
 800a36c:	7bfb      	ldrb	r3, [r7, #15]
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d10c      	bne.n	800a38c <ES_WIFI_GetMACAddress+0x50>
  {
    ptr = strtok((char *)(Obj->CmdData + 2), "\r\n");
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a378:	3302      	adds	r3, #2
 800a37a:	4908      	ldr	r1, [pc, #32]	; (800a39c <ES_WIFI_GetMACAddress+0x60>)
 800a37c:	4618      	mov	r0, r3
 800a37e:	f007 feeb 	bl	8012158 <strtok>
 800a382:	60b8      	str	r0, [r7, #8]
    ParseMAC(ptr, mac) ;
 800a384:	6839      	ldr	r1, [r7, #0]
 800a386:	68b8      	ldr	r0, [r7, #8]
 800a388:	f7ff fba4 	bl	8009ad4 <ParseMAC>
  }
  UNLOCK_WIFI();
  return ret;
 800a38c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a38e:	4618      	mov	r0, r3
 800a390:	3710      	adds	r7, #16
 800a392:	46bd      	mov	sp, r7
 800a394:	bd80      	pop	{r7, pc}
 800a396:	bf00      	nop
 800a398:	080134b4 	.word	0x080134b4
 800a39c:	080134b8 	.word	0x080134b8

0800a3a0 <ES_WIFI_StartClientConnection>:
  * @param  Obj: pointer to module handle
  * @param  conn: pointer to the connection structure
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_StartClientConnection(ES_WIFIObject_t *Obj, ES_WIFI_Conn_t *conn)
{
 800a3a0:	b590      	push	{r4, r7, lr}
 800a3a2:	b087      	sub	sp, #28
 800a3a4:	af02      	add	r7, sp, #8
 800a3a6:	6078      	str	r0, [r7, #4]
 800a3a8:	6039      	str	r1, [r7, #0]
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_OK;
 800a3aa:	2300      	movs	r3, #0
 800a3ac:	73fb      	strb	r3, [r7, #15]

  if ( ((conn->Type == ES_WIFI_TCP_CONNECTION) || (conn->Type == ES_WIFI_TCP_SSL_CONNECTION)) && (conn->RemotePort == 0) ) return ES_WIFI_STATUS_ERROR;
 800a3ae:	683b      	ldr	r3, [r7, #0]
 800a3b0:	781b      	ldrb	r3, [r3, #0]
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d003      	beq.n	800a3be <ES_WIFI_StartClientConnection+0x1e>
 800a3b6:	683b      	ldr	r3, [r7, #0]
 800a3b8:	781b      	ldrb	r3, [r3, #0]
 800a3ba:	2b03      	cmp	r3, #3
 800a3bc:	d105      	bne.n	800a3ca <ES_WIFI_StartClientConnection+0x2a>
 800a3be:	683b      	ldr	r3, [r7, #0]
 800a3c0:	885b      	ldrh	r3, [r3, #2]
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d101      	bne.n	800a3ca <ES_WIFI_StartClientConnection+0x2a>
 800a3c6:	2302      	movs	r3, #2
 800a3c8:	e0c1      	b.n	800a54e <ES_WIFI_StartClientConnection+0x1ae>

  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"P0=%d\r", conn->Number);
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	f503 7094 	add.w	r0, r3, #296	; 0x128
 800a3d0:	683b      	ldr	r3, [r7, #0]
 800a3d2:	785b      	ldrb	r3, [r3, #1]
 800a3d4:	461a      	mov	r2, r3
 800a3d6:	4960      	ldr	r1, [pc, #384]	; (800a558 <ES_WIFI_StartClientConnection+0x1b8>)
 800a3d8:	f007 fe32 	bl	8012040 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a3e8:	461a      	mov	r2, r3
 800a3ea:	6878      	ldr	r0, [r7, #4]
 800a3ec:	f7ff fd04 	bl	8009df8 <AT_ExecuteCommand>
 800a3f0:	4603      	mov	r3, r0
 800a3f2:	73fb      	strb	r3, [r7, #15]

  if (ret == ES_WIFI_STATUS_OK)
 800a3f4:	7bfb      	ldrb	r3, [r7, #15]
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d114      	bne.n	800a424 <ES_WIFI_StartClientConnection+0x84>
  {
    sprintf((char*)Obj->CmdData,"P1=%d\r", conn->Type);
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	f503 7094 	add.w	r0, r3, #296	; 0x128
 800a400:	683b      	ldr	r3, [r7, #0]
 800a402:	781b      	ldrb	r3, [r3, #0]
 800a404:	461a      	mov	r2, r3
 800a406:	4955      	ldr	r1, [pc, #340]	; (800a55c <ES_WIFI_StartClientConnection+0x1bc>)
 800a408:	f007 fe1a 	bl	8012040 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a418:	461a      	mov	r2, r3
 800a41a:	6878      	ldr	r0, [r7, #4]
 800a41c:	f7ff fcec 	bl	8009df8 <AT_ExecuteCommand>
 800a420:	4603      	mov	r3, r0
 800a422:	73fb      	strb	r3, [r7, #15]
  }

  if (ret == ES_WIFI_STATUS_OK)
 800a424:	7bfb      	ldrb	r3, [r7, #15]
 800a426:	2b00      	cmp	r3, #0
 800a428:	d114      	bne.n	800a454 <ES_WIFI_StartClientConnection+0xb4>
  {
    sprintf((char*)Obj->CmdData,"P2=%d\r", conn->LocalPort);
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	f503 7094 	add.w	r0, r3, #296	; 0x128
 800a430:	683b      	ldr	r3, [r7, #0]
 800a432:	889b      	ldrh	r3, [r3, #4]
 800a434:	461a      	mov	r2, r3
 800a436:	494a      	ldr	r1, [pc, #296]	; (800a560 <ES_WIFI_StartClientConnection+0x1c0>)
 800a438:	f007 fe02 	bl	8012040 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a448:	461a      	mov	r2, r3
 800a44a:	6878      	ldr	r0, [r7, #4]
 800a44c:	f7ff fcd4 	bl	8009df8 <AT_ExecuteCommand>
 800a450:	4603      	mov	r3, r0
 800a452:	73fb      	strb	r3, [r7, #15]
  }

  if ((ret == ES_WIFI_STATUS_OK)&& ((conn->Type == ES_WIFI_TCP_CONNECTION) || (conn->Type == ES_WIFI_TCP_SSL_CONNECTION)))
 800a454:	7bfb      	ldrb	r3, [r7, #15]
 800a456:	2b00      	cmp	r3, #0
 800a458:	d11c      	bne.n	800a494 <ES_WIFI_StartClientConnection+0xf4>
 800a45a:	683b      	ldr	r3, [r7, #0]
 800a45c:	781b      	ldrb	r3, [r3, #0]
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d003      	beq.n	800a46a <ES_WIFI_StartClientConnection+0xca>
 800a462:	683b      	ldr	r3, [r7, #0]
 800a464:	781b      	ldrb	r3, [r3, #0]
 800a466:	2b03      	cmp	r3, #3
 800a468:	d114      	bne.n	800a494 <ES_WIFI_StartClientConnection+0xf4>
  {
    sprintf((char*)Obj->CmdData,"P4=%d\r", conn->RemotePort);
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	f503 7094 	add.w	r0, r3, #296	; 0x128
 800a470:	683b      	ldr	r3, [r7, #0]
 800a472:	885b      	ldrh	r3, [r3, #2]
 800a474:	461a      	mov	r2, r3
 800a476:	493b      	ldr	r1, [pc, #236]	; (800a564 <ES_WIFI_StartClientConnection+0x1c4>)
 800a478:	f007 fde2 	bl	8012040 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a488:	461a      	mov	r2, r3
 800a48a:	6878      	ldr	r0, [r7, #4]
 800a48c:	f7ff fcb4 	bl	8009df8 <AT_ExecuteCommand>
 800a490:	4603      	mov	r3, r0
 800a492:	73fb      	strb	r3, [r7, #15]
  }

  if ((ret == ES_WIFI_STATUS_OK) && ((conn->Type == ES_WIFI_TCP_CONNECTION) || (conn->Type == ES_WIFI_TCP_SSL_CONNECTION)))
 800a494:	7bfb      	ldrb	r3, [r7, #15]
 800a496:	2b00      	cmp	r3, #0
 800a498:	d128      	bne.n	800a4ec <ES_WIFI_StartClientConnection+0x14c>
 800a49a:	683b      	ldr	r3, [r7, #0]
 800a49c:	781b      	ldrb	r3, [r3, #0]
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	d003      	beq.n	800a4aa <ES_WIFI_StartClientConnection+0x10a>
 800a4a2:	683b      	ldr	r3, [r7, #0]
 800a4a4:	781b      	ldrb	r3, [r3, #0]
 800a4a6:	2b03      	cmp	r3, #3
 800a4a8:	d120      	bne.n	800a4ec <ES_WIFI_StartClientConnection+0x14c>
  {
    sprintf((char*)Obj->CmdData,"P3=%d.%d.%d.%d\r", conn->RemoteIP[0],conn->RemoteIP[1],
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	f503 7094 	add.w	r0, r3, #296	; 0x128
 800a4b0:	683b      	ldr	r3, [r7, #0]
 800a4b2:	799b      	ldrb	r3, [r3, #6]
 800a4b4:	4619      	mov	r1, r3
 800a4b6:	683b      	ldr	r3, [r7, #0]
 800a4b8:	79db      	ldrb	r3, [r3, #7]
 800a4ba:	461c      	mov	r4, r3
            conn->RemoteIP[2],conn->RemoteIP[3]);
 800a4bc:	683b      	ldr	r3, [r7, #0]
 800a4be:	7a1b      	ldrb	r3, [r3, #8]
    sprintf((char*)Obj->CmdData,"P3=%d.%d.%d.%d\r", conn->RemoteIP[0],conn->RemoteIP[1],
 800a4c0:	461a      	mov	r2, r3
            conn->RemoteIP[2],conn->RemoteIP[3]);
 800a4c2:	683b      	ldr	r3, [r7, #0]
 800a4c4:	7a5b      	ldrb	r3, [r3, #9]
    sprintf((char*)Obj->CmdData,"P3=%d.%d.%d.%d\r", conn->RemoteIP[0],conn->RemoteIP[1],
 800a4c6:	9301      	str	r3, [sp, #4]
 800a4c8:	9200      	str	r2, [sp, #0]
 800a4ca:	4623      	mov	r3, r4
 800a4cc:	460a      	mov	r2, r1
 800a4ce:	4926      	ldr	r1, [pc, #152]	; (800a568 <ES_WIFI_StartClientConnection+0x1c8>)
 800a4d0:	f007 fdb6 	bl	8012040 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a4e0:	461a      	mov	r2, r3
 800a4e2:	6878      	ldr	r0, [r7, #4]
 800a4e4:	f7ff fc88 	bl	8009df8 <AT_ExecuteCommand>
 800a4e8:	4603      	mov	r3, r0
 800a4ea:	73fb      	strb	r3, [r7, #15]
  }

  if ((ret == ES_WIFI_STATUS_OK) && (conn->Type == ES_WIFI_TCP_SSL_CONNECTION))
 800a4ec:	7bfb      	ldrb	r3, [r7, #15]
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d116      	bne.n	800a520 <ES_WIFI_StartClientConnection+0x180>
 800a4f2:	683b      	ldr	r3, [r7, #0]
 800a4f4:	781b      	ldrb	r3, [r3, #0]
 800a4f6:	2b03      	cmp	r3, #3
 800a4f8:	d112      	bne.n	800a520 <ES_WIFI_StartClientConnection+0x180>
  {
    sprintf((char*)Obj->CmdData,"P9=2\r");
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a500:	491a      	ldr	r1, [pc, #104]	; (800a56c <ES_WIFI_StartClientConnection+0x1cc>)
 800a502:	4618      	mov	r0, r3
 800a504:	f007 fd9c 	bl	8012040 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a514:	461a      	mov	r2, r3
 800a516:	6878      	ldr	r0, [r7, #4]
 800a518:	f7ff fc6e 	bl	8009df8 <AT_ExecuteCommand>
 800a51c:	4603      	mov	r3, r0
 800a51e:	73fb      	strb	r3, [r7, #15]
  }

  if (ret == ES_WIFI_STATUS_OK)
 800a520:	7bfb      	ldrb	r3, [r7, #15]
 800a522:	2b00      	cmp	r3, #0
 800a524:	d112      	bne.n	800a54c <ES_WIFI_StartClientConnection+0x1ac>
  {
    sprintf((char*)Obj->CmdData,"P6=1\r");
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a52c:	4910      	ldr	r1, [pc, #64]	; (800a570 <ES_WIFI_StartClientConnection+0x1d0>)
 800a52e:	4618      	mov	r0, r3
 800a530:	f007 fd86 	bl	8012040 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a540:	461a      	mov	r2, r3
 800a542:	6878      	ldr	r0, [r7, #4]
 800a544:	f7ff fc58 	bl	8009df8 <AT_ExecuteCommand>
 800a548:	4603      	mov	r3, r0
 800a54a:	73fb      	strb	r3, [r7, #15]
  }

  UNLOCK_WIFI();
  return ret;
 800a54c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a54e:	4618      	mov	r0, r3
 800a550:	3714      	adds	r7, #20
 800a552:	46bd      	mov	sp, r7
 800a554:	bd90      	pop	{r4, r7, pc}
 800a556:	bf00      	nop
 800a558:	0801351c 	.word	0x0801351c
 800a55c:	08013524 	.word	0x08013524
 800a560:	0801352c 	.word	0x0801352c
 800a564:	08013534 	.word	0x08013534
 800a568:	0801353c 	.word	0x0801353c
 800a56c:	0801354c 	.word	0x0801354c
 800a570:	08013554 	.word	0x08013554

0800a574 <ES_WIFI_SendData>:
  * @param  pdata: pointer to data
  * @param  len : length of the data to be sent
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_SendData(ES_WIFIObject_t *Obj, uint8_t Socket, uint8_t *pdata, uint16_t Reqlen , uint16_t *SentLen , uint32_t Timeout)
{
 800a574:	b580      	push	{r7, lr}
 800a576:	b088      	sub	sp, #32
 800a578:	af02      	add	r7, sp, #8
 800a57a:	60f8      	str	r0, [r7, #12]
 800a57c:	607a      	str	r2, [r7, #4]
 800a57e:	461a      	mov	r2, r3
 800a580:	460b      	mov	r3, r1
 800a582:	72fb      	strb	r3, [r7, #11]
 800a584:	4613      	mov	r3, r2
 800a586:	813b      	strh	r3, [r7, #8]
  uint32_t wkgTimeOut;

  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
 800a588:	2302      	movs	r3, #2
 800a58a:	74fb      	strb	r3, [r7, #19]

  if (Timeout == 0)
 800a58c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a58e:	2b00      	cmp	r3, #0
 800a590:	d102      	bne.n	800a598 <ES_WIFI_SendData+0x24>
  {
    wkgTimeOut = NET_DEFAULT_NOBLOCKING_WRITE_TIMEOUT;
 800a592:	2301      	movs	r3, #1
 800a594:	617b      	str	r3, [r7, #20]
 800a596:	e001      	b.n	800a59c <ES_WIFI_SendData+0x28>
  }
  else
  {
    wkgTimeOut = Timeout;
 800a598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a59a:	617b      	str	r3, [r7, #20]
  }

  LOCK_WIFI();
  if(Reqlen >= ES_WIFI_PAYLOAD_SIZE ) Reqlen= ES_WIFI_PAYLOAD_SIZE;
 800a59c:	893b      	ldrh	r3, [r7, #8]
 800a59e:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 800a5a2:	d302      	bcc.n	800a5aa <ES_WIFI_SendData+0x36>
 800a5a4:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 800a5a8:	813b      	strh	r3, [r7, #8]

  *SentLen = Reqlen;
 800a5aa:	6a3b      	ldr	r3, [r7, #32]
 800a5ac:	893a      	ldrh	r2, [r7, #8]
 800a5ae:	801a      	strh	r2, [r3, #0]
  sprintf((char*)Obj->CmdData,"P0=%d\r", Socket);
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a5b6:	7afa      	ldrb	r2, [r7, #11]
 800a5b8:	4942      	ldr	r1, [pc, #264]	; (800a6c4 <ES_WIFI_SendData+0x150>)
 800a5ba:	4618      	mov	r0, r3
 800a5bc:	f007 fd40 	bl	8012040 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a5cc:	461a      	mov	r2, r3
 800a5ce:	68f8      	ldr	r0, [r7, #12]
 800a5d0:	f7ff fc12 	bl	8009df8 <AT_ExecuteCommand>
 800a5d4:	4603      	mov	r3, r0
 800a5d6:	74fb      	strb	r3, [r7, #19]
  if(ret == ES_WIFI_STATUS_OK)
 800a5d8:	7cfb      	ldrb	r3, [r7, #19]
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	d15e      	bne.n	800a69c <ES_WIFI_SendData+0x128>
  {
    sprintf((char*)Obj->CmdData,"S2=%lu\r",wkgTimeOut);
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a5e4:	697a      	ldr	r2, [r7, #20]
 800a5e6:	4938      	ldr	r1, [pc, #224]	; (800a6c8 <ES_WIFI_SendData+0x154>)
 800a5e8:	4618      	mov	r0, r3
 800a5ea:	f007 fd29 	bl	8012040 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a5fa:	461a      	mov	r2, r3
 800a5fc:	68f8      	ldr	r0, [r7, #12]
 800a5fe:	f7ff fbfb 	bl	8009df8 <AT_ExecuteCommand>
 800a602:	4603      	mov	r3, r0
 800a604:	74fb      	strb	r3, [r7, #19]

    if(ret == ES_WIFI_STATUS_OK)
 800a606:	7cfb      	ldrb	r3, [r7, #19]
 800a608:	2b00      	cmp	r3, #0
 800a60a:	d13d      	bne.n	800a688 <ES_WIFI_SendData+0x114>
    {
      sprintf((char *)Obj->CmdData,"S3=%04d\r",Reqlen);
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a612:	893a      	ldrh	r2, [r7, #8]
 800a614:	492d      	ldr	r1, [pc, #180]	; (800a6cc <ES_WIFI_SendData+0x158>)
 800a616:	4618      	mov	r0, r3
 800a618:	f007 fd12 	bl	8012040 <siprintf>
      ret = AT_RequestSendData(Obj, Obj->CmdData, pdata, Reqlen, Obj->CmdData);
 800a61c:	68fb      	ldr	r3, [r7, #12]
 800a61e:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a628:	893a      	ldrh	r2, [r7, #8]
 800a62a:	9300      	str	r3, [sp, #0]
 800a62c:	4613      	mov	r3, r2
 800a62e:	687a      	ldr	r2, [r7, #4]
 800a630:	68f8      	ldr	r0, [r7, #12]
 800a632:	f7ff fc47 	bl	8009ec4 <AT_RequestSendData>
 800a636:	4603      	mov	r3, r0
 800a638:	74fb      	strb	r3, [r7, #19]

      if(ret == ES_WIFI_STATUS_OK)
 800a63a:	7cfb      	ldrb	r3, [r7, #19]
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	d119      	bne.n	800a674 <ES_WIFI_SendData+0x100>
      {
        if(strstr((char *)Obj->CmdData,"-1\r\n"))
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a646:	4922      	ldr	r1, [pc, #136]	; (800a6d0 <ES_WIFI_SendData+0x15c>)
 800a648:	4618      	mov	r0, r3
 800a64a:	f007 fd6f 	bl	801212c <strstr>
 800a64e:	4603      	mov	r3, r0
 800a650:	2b00      	cmp	r3, #0
 800a652:	d02c      	beq.n	800a6ae <ES_WIFI_SendData+0x13a>
        {
          DEBUG("Send Data detect error %s\n", (char *)Obj->CmdData);
 800a654:	f640 0267 	movw	r2, #2151	; 0x867
 800a658:	491e      	ldr	r1, [pc, #120]	; (800a6d4 <ES_WIFI_SendData+0x160>)
 800a65a:	481f      	ldr	r0, [pc, #124]	; (800a6d8 <ES_WIFI_SendData+0x164>)
 800a65c:	f007 fbb4 	bl	8011dc8 <iprintf>
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a666:	4619      	mov	r1, r3
 800a668:	481c      	ldr	r0, [pc, #112]	; (800a6dc <ES_WIFI_SendData+0x168>)
 800a66a:	f007 fbad 	bl	8011dc8 <iprintf>
          ret = ES_WIFI_STATUS_ERROR;
 800a66e:	2302      	movs	r3, #2
 800a670:	74fb      	strb	r3, [r7, #19]
 800a672:	e01c      	b.n	800a6ae <ES_WIFI_SendData+0x13a>
        }
      }
      else
      {
        DEBUG("Send Data command failed\n");
 800a674:	f640 026d 	movw	r2, #2157	; 0x86d
 800a678:	4916      	ldr	r1, [pc, #88]	; (800a6d4 <ES_WIFI_SendData+0x160>)
 800a67a:	4817      	ldr	r0, [pc, #92]	; (800a6d8 <ES_WIFI_SendData+0x164>)
 800a67c:	f007 fba4 	bl	8011dc8 <iprintf>
 800a680:	4817      	ldr	r0, [pc, #92]	; (800a6e0 <ES_WIFI_SendData+0x16c>)
 800a682:	f007 fc27 	bl	8011ed4 <puts>
 800a686:	e012      	b.n	800a6ae <ES_WIFI_SendData+0x13a>
      }
    }
    else
    {
      DEBUG("S2 command failed\n");
 800a688:	f640 0272 	movw	r2, #2162	; 0x872
 800a68c:	4911      	ldr	r1, [pc, #68]	; (800a6d4 <ES_WIFI_SendData+0x160>)
 800a68e:	4812      	ldr	r0, [pc, #72]	; (800a6d8 <ES_WIFI_SendData+0x164>)
 800a690:	f007 fb9a 	bl	8011dc8 <iprintf>
 800a694:	4813      	ldr	r0, [pc, #76]	; (800a6e4 <ES_WIFI_SendData+0x170>)
 800a696:	f007 fc1d 	bl	8011ed4 <puts>
 800a69a:	e008      	b.n	800a6ae <ES_WIFI_SendData+0x13a>
    }
  }
  else
  {
   DEBUG("P0 command failed\n");
 800a69c:	f640 0277 	movw	r2, #2167	; 0x877
 800a6a0:	490c      	ldr	r1, [pc, #48]	; (800a6d4 <ES_WIFI_SendData+0x160>)
 800a6a2:	480d      	ldr	r0, [pc, #52]	; (800a6d8 <ES_WIFI_SendData+0x164>)
 800a6a4:	f007 fb90 	bl	8011dc8 <iprintf>
 800a6a8:	480f      	ldr	r0, [pc, #60]	; (800a6e8 <ES_WIFI_SendData+0x174>)
 800a6aa:	f007 fc13 	bl	8011ed4 <puts>
  }

  if (ret == ES_WIFI_STATUS_ERROR)
 800a6ae:	7cfb      	ldrb	r3, [r7, #19]
 800a6b0:	2b02      	cmp	r3, #2
 800a6b2:	d102      	bne.n	800a6ba <ES_WIFI_SendData+0x146>
  {
    *SentLen = 0;
 800a6b4:	6a3b      	ldr	r3, [r7, #32]
 800a6b6:	2200      	movs	r2, #0
 800a6b8:	801a      	strh	r2, [r3, #0]
  }
  UNLOCK_WIFI();
  return ret;
 800a6ba:	7cfb      	ldrb	r3, [r7, #19]
}
 800a6bc:	4618      	mov	r0, r3
 800a6be:	3718      	adds	r7, #24
 800a6c0:	46bd      	mov	sp, r7
 800a6c2:	bd80      	pop	{r7, pc}
 800a6c4:	0801351c 	.word	0x0801351c
 800a6c8:	080136e0 	.word	0x080136e0
 800a6cc:	080136e8 	.word	0x080136e8
 800a6d0:	080136f4 	.word	0x080136f4
 800a6d4:	080135ac 	.word	0x080135ac
 800a6d8:	080135d4 	.word	0x080135d4
 800a6dc:	080136fc 	.word	0x080136fc
 800a6e0:	08013718 	.word	0x08013718
 800a6e4:	08013734 	.word	0x08013734
 800a6e8:	08013748 	.word	0x08013748

0800a6ec <ES_WIFI_ReceiveData>:
  * @param  pdata: pointer to data
  * @param  len : pointer to the length of the data to be received
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_ReceiveData(ES_WIFIObject_t *Obj, uint8_t Socket, uint8_t *pdata, uint16_t Reqlen, uint16_t *Receivedlen, uint32_t Timeout)
{
 800a6ec:	b580      	push	{r7, lr}
 800a6ee:	b088      	sub	sp, #32
 800a6f0:	af02      	add	r7, sp, #8
 800a6f2:	60f8      	str	r0, [r7, #12]
 800a6f4:	607a      	str	r2, [r7, #4]
 800a6f6:	461a      	mov	r2, r3
 800a6f8:	460b      	mov	r3, r1
 800a6fa:	72fb      	strb	r3, [r7, #11]
 800a6fc:	4613      	mov	r3, r2
 800a6fe:	813b      	strh	r3, [r7, #8]
  uint32_t wkgTimeOut;

  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
 800a700:	2302      	movs	r3, #2
 800a702:	74fb      	strb	r3, [r7, #19]

  if (Timeout == 0)
 800a704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a706:	2b00      	cmp	r3, #0
 800a708:	d102      	bne.n	800a710 <ES_WIFI_ReceiveData+0x24>
  {
    wkgTimeOut = NET_DEFAULT_NOBLOCKING_READ_TIMEOUT;
 800a70a:	2301      	movs	r3, #1
 800a70c:	617b      	str	r3, [r7, #20]
 800a70e:	e001      	b.n	800a714 <ES_WIFI_ReceiveData+0x28>
  }
  else
  {
    wkgTimeOut = Timeout;
 800a710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a712:	617b      	str	r3, [r7, #20]
  }

  LOCK_WIFI();

  if(Reqlen <= ES_WIFI_PAYLOAD_SIZE )
 800a714:	893b      	ldrh	r3, [r7, #8]
 800a716:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 800a71a:	f200 808b 	bhi.w	800a834 <ES_WIFI_ReceiveData+0x148>
  {
    sprintf((char*)Obj->CmdData,"P0=%d\r", Socket);
 800a71e:	68fb      	ldr	r3, [r7, #12]
 800a720:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a724:	7afa      	ldrb	r2, [r7, #11]
 800a726:	4946      	ldr	r1, [pc, #280]	; (800a840 <ES_WIFI_ReceiveData+0x154>)
 800a728:	4618      	mov	r0, r3
 800a72a:	f007 fc89 	bl	8012040 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800a72e:	68fb      	ldr	r3, [r7, #12]
 800a730:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a73a:	461a      	mov	r2, r3
 800a73c:	68f8      	ldr	r0, [r7, #12]
 800a73e:	f7ff fb5b 	bl	8009df8 <AT_ExecuteCommand>
 800a742:	4603      	mov	r3, r0
 800a744:	74fb      	strb	r3, [r7, #19]

    if(ret == ES_WIFI_STATUS_OK)
 800a746:	7cfb      	ldrb	r3, [r7, #19]
 800a748:	2b00      	cmp	r3, #0
 800a74a:	d165      	bne.n	800a818 <ES_WIFI_ReceiveData+0x12c>
    {
      sprintf((char*)Obj->CmdData,"R1=%d\r", Reqlen);
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a752:	893a      	ldrh	r2, [r7, #8]
 800a754:	493b      	ldr	r1, [pc, #236]	; (800a844 <ES_WIFI_ReceiveData+0x158>)
 800a756:	4618      	mov	r0, r3
 800a758:	f007 fc72 	bl	8012040 <siprintf>
      ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800a762:	68fb      	ldr	r3, [r7, #12]
 800a764:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a768:	461a      	mov	r2, r3
 800a76a:	68f8      	ldr	r0, [r7, #12]
 800a76c:	f7ff fb44 	bl	8009df8 <AT_ExecuteCommand>
 800a770:	4603      	mov	r3, r0
 800a772:	74fb      	strb	r3, [r7, #19]
      if(ret == ES_WIFI_STATUS_OK)
 800a774:	7cfb      	ldrb	r3, [r7, #19]
 800a776:	2b00      	cmp	r3, #0
 800a778:	d141      	bne.n	800a7fe <ES_WIFI_ReceiveData+0x112>
      {
        sprintf((char*)Obj->CmdData,"R2=%lu\r", wkgTimeOut);
 800a77a:	68fb      	ldr	r3, [r7, #12]
 800a77c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a780:	697a      	ldr	r2, [r7, #20]
 800a782:	4931      	ldr	r1, [pc, #196]	; (800a848 <ES_WIFI_ReceiveData+0x15c>)
 800a784:	4618      	mov	r0, r3
 800a786:	f007 fc5b 	bl	8012040 <siprintf>
        ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800a78a:	68fb      	ldr	r3, [r7, #12]
 800a78c:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a796:	461a      	mov	r2, r3
 800a798:	68f8      	ldr	r0, [r7, #12]
 800a79a:	f7ff fb2d 	bl	8009df8 <AT_ExecuteCommand>
 800a79e:	4603      	mov	r3, r0
 800a7a0:	74fb      	strb	r3, [r7, #19]
        if(ret == ES_WIFI_STATUS_OK)
 800a7a2:	7cfb      	ldrb	r3, [r7, #19]
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	d120      	bne.n	800a7ea <ES_WIFI_ReceiveData+0xfe>
        {
          sprintf((char*)Obj->CmdData,"R0\r");
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a7ae:	4927      	ldr	r1, [pc, #156]	; (800a84c <ES_WIFI_ReceiveData+0x160>)
 800a7b0:	4618      	mov	r0, r3
 800a7b2:	f007 fc45 	bl	8012040 <siprintf>
          ret = AT_RequestReceiveData(Obj, Obj->CmdData, (char *)pdata, Reqlen, Receivedlen);
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800a7bc:	893a      	ldrh	r2, [r7, #8]
 800a7be:	6a3b      	ldr	r3, [r7, #32]
 800a7c0:	9300      	str	r3, [sp, #0]
 800a7c2:	4613      	mov	r3, r2
 800a7c4:	687a      	ldr	r2, [r7, #4]
 800a7c6:	68f8      	ldr	r0, [r7, #12]
 800a7c8:	f7ff fbf2 	bl	8009fb0 <AT_RequestReceiveData>
 800a7cc:	4603      	mov	r3, r0
 800a7ce:	74fb      	strb	r3, [r7, #19]
          if (ret != ES_WIFI_STATUS_OK)
 800a7d0:	7cfb      	ldrb	r3, [r7, #19]
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d02e      	beq.n	800a834 <ES_WIFI_ReceiveData+0x148>
          {
            DEBUG("AT_RequestReceiveData  failed\n");
 800a7d6:	f640 1208 	movw	r2, #2312	; 0x908
 800a7da:	491d      	ldr	r1, [pc, #116]	; (800a850 <ES_WIFI_ReceiveData+0x164>)
 800a7dc:	481d      	ldr	r0, [pc, #116]	; (800a854 <ES_WIFI_ReceiveData+0x168>)
 800a7de:	f007 faf3 	bl	8011dc8 <iprintf>
 800a7e2:	481d      	ldr	r0, [pc, #116]	; (800a858 <ES_WIFI_ReceiveData+0x16c>)
 800a7e4:	f007 fb76 	bl	8011ed4 <puts>
 800a7e8:	e024      	b.n	800a834 <ES_WIFI_ReceiveData+0x148>
          }
        }
        else
        {
         DEBUG("setting timeout failed\n");
 800a7ea:	f640 120d 	movw	r2, #2317	; 0x90d
 800a7ee:	4918      	ldr	r1, [pc, #96]	; (800a850 <ES_WIFI_ReceiveData+0x164>)
 800a7f0:	4818      	ldr	r0, [pc, #96]	; (800a854 <ES_WIFI_ReceiveData+0x168>)
 800a7f2:	f007 fae9 	bl	8011dc8 <iprintf>
 800a7f6:	4819      	ldr	r0, [pc, #100]	; (800a85c <ES_WIFI_ReceiveData+0x170>)
 800a7f8:	f007 fb6c 	bl	8011ed4 <puts>
 800a7fc:	e01a      	b.n	800a834 <ES_WIFI_ReceiveData+0x148>
        }
      }
      else
      {
        DEBUG("setting requested len failed\n");
 800a7fe:	f640 1212 	movw	r2, #2322	; 0x912
 800a802:	4913      	ldr	r1, [pc, #76]	; (800a850 <ES_WIFI_ReceiveData+0x164>)
 800a804:	4813      	ldr	r0, [pc, #76]	; (800a854 <ES_WIFI_ReceiveData+0x168>)
 800a806:	f007 fadf 	bl	8011dc8 <iprintf>
 800a80a:	4815      	ldr	r0, [pc, #84]	; (800a860 <ES_WIFI_ReceiveData+0x174>)
 800a80c:	f007 fb62 	bl	8011ed4 <puts>
        *Receivedlen = 0;
 800a810:	6a3b      	ldr	r3, [r7, #32]
 800a812:	2200      	movs	r2, #0
 800a814:	801a      	strh	r2, [r3, #0]
 800a816:	e00d      	b.n	800a834 <ES_WIFI_ReceiveData+0x148>
      }
    }
    else
    {
      DEBUG("setting socket for read failed\n");
 800a818:	f640 1218 	movw	r2, #2328	; 0x918
 800a81c:	490c      	ldr	r1, [pc, #48]	; (800a850 <ES_WIFI_ReceiveData+0x164>)
 800a81e:	480d      	ldr	r0, [pc, #52]	; (800a854 <ES_WIFI_ReceiveData+0x168>)
 800a820:	f007 fad2 	bl	8011dc8 <iprintf>
 800a824:	480f      	ldr	r0, [pc, #60]	; (800a864 <ES_WIFI_ReceiveData+0x178>)
 800a826:	f007 fb55 	bl	8011ed4 <puts>
      issue15++;
 800a82a:	4b0f      	ldr	r3, [pc, #60]	; (800a868 <ES_WIFI_ReceiveData+0x17c>)
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	3301      	adds	r3, #1
 800a830:	4a0d      	ldr	r2, [pc, #52]	; (800a868 <ES_WIFI_ReceiveData+0x17c>)
 800a832:	6013      	str	r3, [r2, #0]
    }
  }
  UNLOCK_WIFI();
  return ret;
 800a834:	7cfb      	ldrb	r3, [r7, #19]
}
 800a836:	4618      	mov	r0, r3
 800a838:	3718      	adds	r7, #24
 800a83a:	46bd      	mov	sp, r7
 800a83c:	bd80      	pop	{r7, pc}
 800a83e:	bf00      	nop
 800a840:	0801351c 	.word	0x0801351c
 800a844:	0801376c 	.word	0x0801376c
 800a848:	08013774 	.word	0x08013774
 800a84c:	0801377c 	.word	0x0801377c
 800a850:	080135ac 	.word	0x080135ac
 800a854:	080135d4 	.word	0x080135d4
 800a858:	08013780 	.word	0x08013780
 800a85c:	080137a0 	.word	0x080137a0
 800a860:	080137b8 	.word	0x080137b8
 800a864:	080137d8 	.word	0x080137d8
 800a868:	20000c80 	.word	0x20000c80

0800a86c <SPI_WIFI_MspInit>:
  * @brief  Initialize SPI MSP
  * @param  hspi: SPI handle
  * @retval None
  */
void SPI_WIFI_MspInit(SPI_HandleTypeDef* hspi)
{
 800a86c:	b580      	push	{r7, lr}
 800a86e:	b08c      	sub	sp, #48	; 0x30
 800a870:	af00      	add	r7, sp, #0
 800a872:	6078      	str	r0, [r7, #4]
  
  GPIO_InitTypeDef GPIO_Init;
  
  __HAL_RCC_SPI3_CLK_ENABLE();
 800a874:	4b56      	ldr	r3, [pc, #344]	; (800a9d0 <SPI_WIFI_MspInit+0x164>)
 800a876:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a878:	4a55      	ldr	r2, [pc, #340]	; (800a9d0 <SPI_WIFI_MspInit+0x164>)
 800a87a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a87e:	6593      	str	r3, [r2, #88]	; 0x58
 800a880:	4b53      	ldr	r3, [pc, #332]	; (800a9d0 <SPI_WIFI_MspInit+0x164>)
 800a882:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a884:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a888:	61bb      	str	r3, [r7, #24]
 800a88a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a88c:	4b50      	ldr	r3, [pc, #320]	; (800a9d0 <SPI_WIFI_MspInit+0x164>)
 800a88e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a890:	4a4f      	ldr	r2, [pc, #316]	; (800a9d0 <SPI_WIFI_MspInit+0x164>)
 800a892:	f043 0302 	orr.w	r3, r3, #2
 800a896:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a898:	4b4d      	ldr	r3, [pc, #308]	; (800a9d0 <SPI_WIFI_MspInit+0x164>)
 800a89a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a89c:	f003 0302 	and.w	r3, r3, #2
 800a8a0:	617b      	str	r3, [r7, #20]
 800a8a2:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800a8a4:	4b4a      	ldr	r3, [pc, #296]	; (800a9d0 <SPI_WIFI_MspInit+0x164>)
 800a8a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a8a8:	4a49      	ldr	r2, [pc, #292]	; (800a9d0 <SPI_WIFI_MspInit+0x164>)
 800a8aa:	f043 0304 	orr.w	r3, r3, #4
 800a8ae:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a8b0:	4b47      	ldr	r3, [pc, #284]	; (800a9d0 <SPI_WIFI_MspInit+0x164>)
 800a8b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a8b4:	f003 0304 	and.w	r3, r3, #4
 800a8b8:	613b      	str	r3, [r7, #16]
 800a8ba:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800a8bc:	4b44      	ldr	r3, [pc, #272]	; (800a9d0 <SPI_WIFI_MspInit+0x164>)
 800a8be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a8c0:	4a43      	ldr	r2, [pc, #268]	; (800a9d0 <SPI_WIFI_MspInit+0x164>)
 800a8c2:	f043 0310 	orr.w	r3, r3, #16
 800a8c6:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a8c8:	4b41      	ldr	r3, [pc, #260]	; (800a9d0 <SPI_WIFI_MspInit+0x164>)
 800a8ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a8cc:	f003 0310 	and.w	r3, r3, #16
 800a8d0:	60fb      	str	r3, [r7, #12]
 800a8d2:	68fb      	ldr	r3, [r7, #12]
    
  /* configure Wake up pin */
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13, GPIO_PIN_RESET );
 800a8d4:	2200      	movs	r2, #0
 800a8d6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800a8da:	483e      	ldr	r0, [pc, #248]	; (800a9d4 <SPI_WIFI_MspInit+0x168>)
 800a8dc:	f7f8 fcec 	bl	80032b8 <HAL_GPIO_WritePin>
  GPIO_Init.Pin       = GPIO_PIN_13;
 800a8e0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a8e4:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 800a8e6:	2301      	movs	r3, #1
 800a8e8:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 800a8ea:	2300      	movs	r3, #0
 800a8ec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 800a8ee:	2300      	movs	r3, #0
 800a8f0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_Init );
 800a8f2:	f107 031c 	add.w	r3, r7, #28
 800a8f6:	4619      	mov	r1, r3
 800a8f8:	4836      	ldr	r0, [pc, #216]	; (800a9d4 <SPI_WIFI_MspInit+0x168>)
 800a8fa:	f7f8 fa27 	bl	8002d4c <HAL_GPIO_Init>

  /* configure Data ready pin */
  GPIO_Init.Pin       = GPIO_PIN_1;
 800a8fe:	2302      	movs	r3, #2
 800a900:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_IT_RISING;
 800a902:	4b35      	ldr	r3, [pc, #212]	; (800a9d8 <SPI_WIFI_MspInit+0x16c>)
 800a904:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 800a906:	2300      	movs	r3, #0
 800a908:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 800a90a:	2300      	movs	r3, #0
 800a90c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_Init );
 800a90e:	f107 031c 	add.w	r3, r7, #28
 800a912:	4619      	mov	r1, r3
 800a914:	4831      	ldr	r0, [pc, #196]	; (800a9dc <SPI_WIFI_MspInit+0x170>)
 800a916:	f7f8 fa19 	bl	8002d4c <HAL_GPIO_Init>

  /* configure Reset pin */
  GPIO_Init.Pin       = GPIO_PIN_8;
 800a91a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a91e:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 800a920:	2301      	movs	r3, #1
 800a922:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 800a924:	2300      	movs	r3, #0
 800a926:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 800a928:	2300      	movs	r3, #0
 800a92a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_Init.Alternate = 0;
 800a92c:	2300      	movs	r3, #0
 800a92e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_Init );
 800a930:	f107 031c 	add.w	r3, r7, #28
 800a934:	4619      	mov	r1, r3
 800a936:	4829      	ldr	r0, [pc, #164]	; (800a9dc <SPI_WIFI_MspInit+0x170>)
 800a938:	f7f8 fa08 	bl	8002d4c <HAL_GPIO_Init>
  
  /* configure SPI NSS pin pin */
  HAL_GPIO_WritePin( GPIOE , GPIO_PIN_0, GPIO_PIN_SET );
 800a93c:	2201      	movs	r2, #1
 800a93e:	2101      	movs	r1, #1
 800a940:	4826      	ldr	r0, [pc, #152]	; (800a9dc <SPI_WIFI_MspInit+0x170>)
 800a942:	f7f8 fcb9 	bl	80032b8 <HAL_GPIO_WritePin>
  GPIO_Init.Pin       =  GPIO_PIN_0;
 800a946:	2301      	movs	r3, #1
 800a948:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 800a94a:	2301      	movs	r3, #1
 800a94c:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 800a94e:	2300      	movs	r3, #0
 800a950:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 800a952:	2301      	movs	r3, #1
 800a954:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init( GPIOE, &GPIO_Init );
 800a956:	f107 031c 	add.w	r3, r7, #28
 800a95a:	4619      	mov	r1, r3
 800a95c:	481f      	ldr	r0, [pc, #124]	; (800a9dc <SPI_WIFI_MspInit+0x170>)
 800a95e:	f7f8 f9f5 	bl	8002d4c <HAL_GPIO_Init>
  
  /* configure SPI CLK pin */
  GPIO_Init.Pin       =  GPIO_PIN_10;
 800a962:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a966:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 800a968:	2302      	movs	r3, #2
 800a96a:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 800a96c:	2300      	movs	r3, #0
 800a96e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 800a970:	2301      	movs	r3, #1
 800a972:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 800a974:	2306      	movs	r3, #6
 800a976:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_Init );
 800a978:	f107 031c 	add.w	r3, r7, #28
 800a97c:	4619      	mov	r1, r3
 800a97e:	4818      	ldr	r0, [pc, #96]	; (800a9e0 <SPI_WIFI_MspInit+0x174>)
 800a980:	f7f8 f9e4 	bl	8002d4c <HAL_GPIO_Init>
  
  /* configure SPI MOSI pin */
  GPIO_Init.Pin       = GPIO_PIN_12;
 800a984:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a988:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 800a98a:	2302      	movs	r3, #2
 800a98c:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 800a98e:	2300      	movs	r3, #0
 800a990:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 800a992:	2301      	movs	r3, #1
 800a994:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 800a996:	2306      	movs	r3, #6
 800a998:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init( GPIOC, &GPIO_Init );
 800a99a:	f107 031c 	add.w	r3, r7, #28
 800a99e:	4619      	mov	r1, r3
 800a9a0:	480f      	ldr	r0, [pc, #60]	; (800a9e0 <SPI_WIFI_MspInit+0x174>)
 800a9a2:	f7f8 f9d3 	bl	8002d4c <HAL_GPIO_Init>
  
  /* configure SPI MISO pin */
  GPIO_Init.Pin       = GPIO_PIN_11;
 800a9a6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a9aa:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 800a9ac:	2302      	movs	r3, #2
 800a9ae:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_PULLUP;
 800a9b0:	2301      	movs	r3, #1
 800a9b2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 800a9b4:	2301      	movs	r3, #1
 800a9b6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 800a9b8:	2306      	movs	r3, #6
 800a9ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init( GPIOC,&GPIO_Init );
 800a9bc:	f107 031c 	add.w	r3, r7, #28
 800a9c0:	4619      	mov	r1, r3
 800a9c2:	4807      	ldr	r0, [pc, #28]	; (800a9e0 <SPI_WIFI_MspInit+0x174>)
 800a9c4:	f7f8 f9c2 	bl	8002d4c <HAL_GPIO_Init>
}
 800a9c8:	bf00      	nop
 800a9ca:	3730      	adds	r7, #48	; 0x30
 800a9cc:	46bd      	mov	sp, r7
 800a9ce:	bd80      	pop	{r7, pc}
 800a9d0:	40021000 	.word	0x40021000
 800a9d4:	48000400 	.word	0x48000400
 800a9d8:	10110000 	.word	0x10110000
 800a9dc:	48001000 	.word	0x48001000
 800a9e0:	48000800 	.word	0x48000800

0800a9e4 <SPI_WIFI_Init>:
  * @brief  Initialize the SPI3
  * @param  None
  * @retval None
  */
int8_t SPI_WIFI_Init(uint16_t mode)
{
 800a9e4:	b580      	push	{r7, lr}
 800a9e6:	b084      	sub	sp, #16
 800a9e8:	af00      	add	r7, sp, #0
 800a9ea:	4603      	mov	r3, r0
 800a9ec:	80fb      	strh	r3, [r7, #6]
  int8_t  rc=0;
 800a9ee:	2300      	movs	r3, #0
 800a9f0:	73fb      	strb	r3, [r7, #15]
  
  if (mode == ES_WIFI_INIT)
 800a9f2:	88fb      	ldrh	r3, [r7, #6]
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	d145      	bne.n	800aa84 <SPI_WIFI_Init+0xa0>
  {
    hspi.Instance               = SPI3;
 800a9f8:	4b27      	ldr	r3, [pc, #156]	; (800aa98 <SPI_WIFI_Init+0xb4>)
 800a9fa:	4a28      	ldr	r2, [pc, #160]	; (800aa9c <SPI_WIFI_Init+0xb8>)
 800a9fc:	601a      	str	r2, [r3, #0]
    SPI_WIFI_MspInit(&hspi);
 800a9fe:	4826      	ldr	r0, [pc, #152]	; (800aa98 <SPI_WIFI_Init+0xb4>)
 800aa00:	f7ff ff34 	bl	800a86c <SPI_WIFI_MspInit>
  
    hspi.Init.Mode              = SPI_MODE_MASTER;
 800aa04:	4b24      	ldr	r3, [pc, #144]	; (800aa98 <SPI_WIFI_Init+0xb4>)
 800aa06:	f44f 7282 	mov.w	r2, #260	; 0x104
 800aa0a:	605a      	str	r2, [r3, #4]
    hspi.Init.Direction         = SPI_DIRECTION_2LINES;
 800aa0c:	4b22      	ldr	r3, [pc, #136]	; (800aa98 <SPI_WIFI_Init+0xb4>)
 800aa0e:	2200      	movs	r2, #0
 800aa10:	609a      	str	r2, [r3, #8]
    hspi.Init.DataSize          = SPI_DATASIZE_16BIT;
 800aa12:	4b21      	ldr	r3, [pc, #132]	; (800aa98 <SPI_WIFI_Init+0xb4>)
 800aa14:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 800aa18:	60da      	str	r2, [r3, #12]
    hspi.Init.CLKPolarity       = SPI_POLARITY_LOW;
 800aa1a:	4b1f      	ldr	r3, [pc, #124]	; (800aa98 <SPI_WIFI_Init+0xb4>)
 800aa1c:	2200      	movs	r2, #0
 800aa1e:	611a      	str	r2, [r3, #16]
    hspi.Init.CLKPhase          = SPI_PHASE_1EDGE;
 800aa20:	4b1d      	ldr	r3, [pc, #116]	; (800aa98 <SPI_WIFI_Init+0xb4>)
 800aa22:	2200      	movs	r2, #0
 800aa24:	615a      	str	r2, [r3, #20]
    hspi.Init.NSS               = SPI_NSS_SOFT;
 800aa26:	4b1c      	ldr	r3, [pc, #112]	; (800aa98 <SPI_WIFI_Init+0xb4>)
 800aa28:	f44f 7200 	mov.w	r2, #512	; 0x200
 800aa2c:	619a      	str	r2, [r3, #24]
    hspi.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8; /* 80/8= 10MHz (Inventek WIFI module supports up to 20MHz)*/
 800aa2e:	4b1a      	ldr	r3, [pc, #104]	; (800aa98 <SPI_WIFI_Init+0xb4>)
 800aa30:	2210      	movs	r2, #16
 800aa32:	61da      	str	r2, [r3, #28]
    hspi.Init.FirstBit          = SPI_FIRSTBIT_MSB;
 800aa34:	4b18      	ldr	r3, [pc, #96]	; (800aa98 <SPI_WIFI_Init+0xb4>)
 800aa36:	2200      	movs	r2, #0
 800aa38:	621a      	str	r2, [r3, #32]
    hspi.Init.TIMode            = SPI_TIMODE_DISABLE;
 800aa3a:	4b17      	ldr	r3, [pc, #92]	; (800aa98 <SPI_WIFI_Init+0xb4>)
 800aa3c:	2200      	movs	r2, #0
 800aa3e:	625a      	str	r2, [r3, #36]	; 0x24
    hspi.Init.CRCCalculation    = SPI_CRCCALCULATION_DISABLE;
 800aa40:	4b15      	ldr	r3, [pc, #84]	; (800aa98 <SPI_WIFI_Init+0xb4>)
 800aa42:	2200      	movs	r2, #0
 800aa44:	629a      	str	r2, [r3, #40]	; 0x28
    hspi.Init.CRCPolynomial     = 0;
 800aa46:	4b14      	ldr	r3, [pc, #80]	; (800aa98 <SPI_WIFI_Init+0xb4>)
 800aa48:	2200      	movs	r2, #0
 800aa4a:	62da      	str	r2, [r3, #44]	; 0x2c
  
    if(HAL_SPI_Init( &hspi ) != HAL_OK)
 800aa4c:	4812      	ldr	r0, [pc, #72]	; (800aa98 <SPI_WIFI_Init+0xb4>)
 800aa4e:	f7fb fa91 	bl	8005f74 <HAL_SPI_Init>
 800aa52:	4603      	mov	r3, r0
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	d002      	beq.n	800aa5e <SPI_WIFI_Init+0x7a>
    {
      return -1;
 800aa58:	f04f 33ff 	mov.w	r3, #4294967295
 800aa5c:	e018      	b.n	800aa90 <SPI_WIFI_Init+0xac>
    }

     /* Enable Interrupt for Data Ready pin , GPIO_PIN1 */
     HAL_NVIC_SetPriority((IRQn_Type)EXTI1_IRQn, SPI_INTERFACE_PRIO, 0x00);
 800aa5e:	2200      	movs	r2, #0
 800aa60:	2100      	movs	r1, #0
 800aa62:	2007      	movs	r0, #7
 800aa64:	f7f7 ffae 	bl	80029c4 <HAL_NVIC_SetPriority>
     HAL_NVIC_EnableIRQ((IRQn_Type)EXTI1_IRQn);
 800aa68:	2007      	movs	r0, #7
 800aa6a:	f7f7 ffc7 	bl	80029fc <HAL_NVIC_EnableIRQ>
     
     /* Enable Interrupt for SPI tx and rx */
     HAL_NVIC_SetPriority((IRQn_Type)SPI3_IRQn, SPI_INTERFACE_PRIO, 0);
 800aa6e:	2200      	movs	r2, #0
 800aa70:	2100      	movs	r1, #0
 800aa72:	2033      	movs	r0, #51	; 0x33
 800aa74:	f7f7 ffa6 	bl	80029c4 <HAL_NVIC_SetPriority>
     HAL_NVIC_EnableIRQ((IRQn_Type)SPI3_IRQn);
 800aa78:	2033      	movs	r0, #51	; 0x33
 800aa7a:	f7f7 ffbf 	bl	80029fc <HAL_NVIC_EnableIRQ>
    SEM_WAIT(spi_rx_sem, 1);
    SEM_WAIT(spi_tx_sem, 1);

#endif
    /* first call used for calibration */
    SPI_WIFI_DelayUs(10);
 800aa7e:	200a      	movs	r0, #10
 800aa80:	f000 f9fe 	bl	800ae80 <SPI_WIFI_DelayUs>
  }
  
  rc= SPI_WIFI_ResetModule();
 800aa84:	f000 f80c 	bl	800aaa0 <SPI_WIFI_ResetModule>
 800aa88:	4603      	mov	r3, r0
 800aa8a:	73fb      	strb	r3, [r7, #15]

  return rc;
 800aa8c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800aa90:	4618      	mov	r0, r3
 800aa92:	3710      	adds	r7, #16
 800aa94:	46bd      	mov	sp, r7
 800aa96:	bd80      	pop	{r7, pc}
 800aa98:	20000c84 	.word	0x20000c84
 800aa9c:	40003c00 	.word	0x40003c00

0800aaa0 <SPI_WIFI_ResetModule>:


int8_t SPI_WIFI_ResetModule(void)
{
 800aaa0:	b580      	push	{r7, lr}
 800aaa2:	b084      	sub	sp, #16
 800aaa4:	af00      	add	r7, sp, #0
  uint32_t tickstart = HAL_GetTick();
 800aaa6:	f7f7 fe81 	bl	80027ac <HAL_GetTick>
 800aaaa:	60b8      	str	r0, [r7, #8]
  uint8_t Prompt[6];
  uint8_t count = 0;
 800aaac:	2300      	movs	r3, #0
 800aaae:	73fb      	strb	r3, [r7, #15]
  HAL_StatusTypeDef  Status;
 
  WIFI_RESET_MODULE();
 800aab0:	2200      	movs	r2, #0
 800aab2:	f44f 7180 	mov.w	r1, #256	; 0x100
 800aab6:	4830      	ldr	r0, [pc, #192]	; (800ab78 <SPI_WIFI_ResetModule+0xd8>)
 800aab8:	f7f8 fbfe 	bl	80032b8 <HAL_GPIO_WritePin>
 800aabc:	200a      	movs	r0, #10
 800aabe:	f7f7 fe81 	bl	80027c4 <HAL_Delay>
 800aac2:	2201      	movs	r2, #1
 800aac4:	f44f 7180 	mov.w	r1, #256	; 0x100
 800aac8:	482b      	ldr	r0, [pc, #172]	; (800ab78 <SPI_WIFI_ResetModule+0xd8>)
 800aaca:	f7f8 fbf5 	bl	80032b8 <HAL_GPIO_WritePin>
 800aace:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800aad2:	f7f7 fe77 	bl	80027c4 <HAL_Delay>
  WIFI_ENABLE_NSS(); 
 800aad6:	2200      	movs	r2, #0
 800aad8:	2101      	movs	r1, #1
 800aada:	4827      	ldr	r0, [pc, #156]	; (800ab78 <SPI_WIFI_ResetModule+0xd8>)
 800aadc:	f7f8 fbec 	bl	80032b8 <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(15);
 800aae0:	200f      	movs	r0, #15
 800aae2:	f000 f9cd 	bl	800ae80 <SPI_WIFI_DelayUs>
 
  while (WIFI_IS_CMDDATA_READY())
 800aae6:	e020      	b.n	800ab2a <SPI_WIFI_ResetModule+0x8a>
  {
    Status = HAL_SPI_Receive(&hspi , &Prompt[count], 1, 0xFFFF);
 800aae8:	7bfb      	ldrb	r3, [r7, #15]
 800aaea:	463a      	mov	r2, r7
 800aaec:	18d1      	adds	r1, r2, r3
 800aaee:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800aaf2:	2201      	movs	r2, #1
 800aaf4:	4821      	ldr	r0, [pc, #132]	; (800ab7c <SPI_WIFI_ResetModule+0xdc>)
 800aaf6:	f7fb fb08 	bl	800610a <HAL_SPI_Receive>
 800aafa:	4603      	mov	r3, r0
 800aafc:	71fb      	strb	r3, [r7, #7]
    count += 2;
 800aafe:	7bfb      	ldrb	r3, [r7, #15]
 800ab00:	3302      	adds	r3, #2
 800ab02:	73fb      	strb	r3, [r7, #15]
    if(((HAL_GetTick() - tickstart ) > 0xFFFF) || (Status != HAL_OK))
 800ab04:	f7f7 fe52 	bl	80027ac <HAL_GetTick>
 800ab08:	4602      	mov	r2, r0
 800ab0a:	68bb      	ldr	r3, [r7, #8]
 800ab0c:	1ad3      	subs	r3, r2, r3
 800ab0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ab12:	d202      	bcs.n	800ab1a <SPI_WIFI_ResetModule+0x7a>
 800ab14:	79fb      	ldrb	r3, [r7, #7]
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	d007      	beq.n	800ab2a <SPI_WIFI_ResetModule+0x8a>
    {
      WIFI_DISABLE_NSS();
 800ab1a:	2201      	movs	r2, #1
 800ab1c:	2101      	movs	r1, #1
 800ab1e:	4816      	ldr	r0, [pc, #88]	; (800ab78 <SPI_WIFI_ResetModule+0xd8>)
 800ab20:	f7f8 fbca 	bl	80032b8 <HAL_GPIO_WritePin>
      return -1;
 800ab24:	f04f 33ff 	mov.w	r3, #4294967295
 800ab28:	e021      	b.n	800ab6e <SPI_WIFI_ResetModule+0xce>
  while (WIFI_IS_CMDDATA_READY())
 800ab2a:	2102      	movs	r1, #2
 800ab2c:	4812      	ldr	r0, [pc, #72]	; (800ab78 <SPI_WIFI_ResetModule+0xd8>)
 800ab2e:	f7f8 fbab 	bl	8003288 <HAL_GPIO_ReadPin>
 800ab32:	4603      	mov	r3, r0
 800ab34:	2b01      	cmp	r3, #1
 800ab36:	d0d7      	beq.n	800aae8 <SPI_WIFI_ResetModule+0x48>
    }    
  }
  
  WIFI_DISABLE_NSS();
 800ab38:	2201      	movs	r2, #1
 800ab3a:	2101      	movs	r1, #1
 800ab3c:	480e      	ldr	r0, [pc, #56]	; (800ab78 <SPI_WIFI_ResetModule+0xd8>)
 800ab3e:	f7f8 fbbb 	bl	80032b8 <HAL_GPIO_WritePin>
  if((Prompt[0] != 0x15) ||(Prompt[1] != 0x15) ||(Prompt[2] != '\r')||
 800ab42:	783b      	ldrb	r3, [r7, #0]
 800ab44:	2b15      	cmp	r3, #21
 800ab46:	d10e      	bne.n	800ab66 <SPI_WIFI_ResetModule+0xc6>
 800ab48:	787b      	ldrb	r3, [r7, #1]
 800ab4a:	2b15      	cmp	r3, #21
 800ab4c:	d10b      	bne.n	800ab66 <SPI_WIFI_ResetModule+0xc6>
 800ab4e:	78bb      	ldrb	r3, [r7, #2]
 800ab50:	2b0d      	cmp	r3, #13
 800ab52:	d108      	bne.n	800ab66 <SPI_WIFI_ResetModule+0xc6>
       (Prompt[3] != '\n') ||(Prompt[4] != '>') ||(Prompt[5] != ' '))
 800ab54:	78fb      	ldrb	r3, [r7, #3]
  if((Prompt[0] != 0x15) ||(Prompt[1] != 0x15) ||(Prompt[2] != '\r')||
 800ab56:	2b0a      	cmp	r3, #10
 800ab58:	d105      	bne.n	800ab66 <SPI_WIFI_ResetModule+0xc6>
       (Prompt[3] != '\n') ||(Prompt[4] != '>') ||(Prompt[5] != ' '))
 800ab5a:	793b      	ldrb	r3, [r7, #4]
 800ab5c:	2b3e      	cmp	r3, #62	; 0x3e
 800ab5e:	d102      	bne.n	800ab66 <SPI_WIFI_ResetModule+0xc6>
 800ab60:	797b      	ldrb	r3, [r7, #5]
 800ab62:	2b20      	cmp	r3, #32
 800ab64:	d002      	beq.n	800ab6c <SPI_WIFI_ResetModule+0xcc>
  {
    return -1;
 800ab66:	f04f 33ff 	mov.w	r3, #4294967295
 800ab6a:	e000      	b.n	800ab6e <SPI_WIFI_ResetModule+0xce>
  }    
  return 0;
 800ab6c:	2300      	movs	r3, #0
}
 800ab6e:	4618      	mov	r0, r3
 800ab70:	3710      	adds	r7, #16
 800ab72:	46bd      	mov	sp, r7
 800ab74:	bd80      	pop	{r7, pc}
 800ab76:	bf00      	nop
 800ab78:	48001000 	.word	0x48001000
 800ab7c:	20000c84 	.word	0x20000c84

0800ab80 <SPI_WIFI_DeInit>:
  * @brief  DeInitialize the SPI
  * @param  None
  * @retval None
  */
int8_t SPI_WIFI_DeInit(void)
{
 800ab80:	b580      	push	{r7, lr}
 800ab82:	af00      	add	r7, sp, #0
  HAL_SPI_DeInit( &hspi );
 800ab84:	4802      	ldr	r0, [pc, #8]	; (800ab90 <SPI_WIFI_DeInit+0x10>)
 800ab86:	f7fb fa98 	bl	80060ba <HAL_SPI_DeInit>
  osMutexDelete(es_wifi_mutex);
  osSemaphoreDelete(spi_tx_sem);
  osSemaphoreDelete(spi_rx_sem);
  osSemaphoreDelete(cmddata_rdy_rising_sem);
#endif
  return 0;
 800ab8a:	2300      	movs	r3, #0
}
 800ab8c:	4618      	mov	r0, r3
 800ab8e:	bd80      	pop	{r7, pc}
 800ab90:	20000c84 	.word	0x20000c84

0800ab94 <wait_cmddata_rdy_high>:
  * @param  timeout : send timeout in mS
  * @retval Length of received data (payload)
  */

int wait_cmddata_rdy_high(int timeout)
{
 800ab94:	b580      	push	{r7, lr}
 800ab96:	b084      	sub	sp, #16
 800ab98:	af00      	add	r7, sp, #0
 800ab9a:	6078      	str	r0, [r7, #4]
  int tickstart = HAL_GetTick();
 800ab9c:	f7f7 fe06 	bl	80027ac <HAL_GetTick>
 800aba0:	4603      	mov	r3, r0
 800aba2:	60fb      	str	r3, [r7, #12]
  while (WIFI_IS_CMDDATA_READY()==0)
 800aba4:	e00a      	b.n	800abbc <wait_cmddata_rdy_high+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 800aba6:	f7f7 fe01 	bl	80027ac <HAL_GetTick>
 800abaa:	4602      	mov	r2, r0
 800abac:	68fb      	ldr	r3, [r7, #12]
 800abae:	1ad2      	subs	r2, r2, r3
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	429a      	cmp	r2, r3
 800abb4:	d902      	bls.n	800abbc <wait_cmddata_rdy_high+0x28>
    {
      return -1;
 800abb6:	f04f 33ff 	mov.w	r3, #4294967295
 800abba:	e007      	b.n	800abcc <wait_cmddata_rdy_high+0x38>
  while (WIFI_IS_CMDDATA_READY()==0)
 800abbc:	2102      	movs	r1, #2
 800abbe:	4805      	ldr	r0, [pc, #20]	; (800abd4 <wait_cmddata_rdy_high+0x40>)
 800abc0:	f7f8 fb62 	bl	8003288 <HAL_GPIO_ReadPin>
 800abc4:	4603      	mov	r3, r0
 800abc6:	2b01      	cmp	r3, #1
 800abc8:	d1ed      	bne.n	800aba6 <wait_cmddata_rdy_high+0x12>
    }
  }
  return 0;
 800abca:	2300      	movs	r3, #0
}
 800abcc:	4618      	mov	r0, r3
 800abce:	3710      	adds	r7, #16
 800abd0:	46bd      	mov	sp, r7
 800abd2:	bd80      	pop	{r7, pc}
 800abd4:	48001000 	.word	0x48001000

0800abd8 <wait_cmddata_rdy_rising_event>:



int wait_cmddata_rdy_rising_event(int timeout)
{
 800abd8:	b580      	push	{r7, lr}
 800abda:	b084      	sub	sp, #16
 800abdc:	af00      	add	r7, sp, #0
 800abde:	6078      	str	r0, [r7, #4]
#ifdef SEM_WAIT
   return SEM_WAIT(cmddata_rdy_rising_sem, timeout);
#else
  int tickstart = HAL_GetTick();
 800abe0:	f7f7 fde4 	bl	80027ac <HAL_GetTick>
 800abe4:	4603      	mov	r3, r0
 800abe6:	60fb      	str	r3, [r7, #12]
  while (cmddata_rdy_rising_event==1)
 800abe8:	e00a      	b.n	800ac00 <wait_cmddata_rdy_rising_event+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 800abea:	f7f7 fddf 	bl	80027ac <HAL_GetTick>
 800abee:	4602      	mov	r2, r0
 800abf0:	68fb      	ldr	r3, [r7, #12]
 800abf2:	1ad2      	subs	r2, r2, r3
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	429a      	cmp	r2, r3
 800abf8:	d902      	bls.n	800ac00 <wait_cmddata_rdy_rising_event+0x28>
    {
      return -1;
 800abfa:	f04f 33ff 	mov.w	r3, #4294967295
 800abfe:	e004      	b.n	800ac0a <wait_cmddata_rdy_rising_event+0x32>
  while (cmddata_rdy_rising_event==1)
 800ac00:	4b04      	ldr	r3, [pc, #16]	; (800ac14 <wait_cmddata_rdy_rising_event+0x3c>)
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	2b01      	cmp	r3, #1
 800ac06:	d0f0      	beq.n	800abea <wait_cmddata_rdy_rising_event+0x12>
    }
  }
  return 0;
 800ac08:	2300      	movs	r3, #0
#endif
}
 800ac0a:	4618      	mov	r0, r3
 800ac0c:	3710      	adds	r7, #16
 800ac0e:	46bd      	mov	sp, r7
 800ac10:	bd80      	pop	{r7, pc}
 800ac12:	bf00      	nop
 800ac14:	20000cf0 	.word	0x20000cf0

0800ac18 <wait_spi_rx_event>:

int wait_spi_rx_event(int timeout)
{
 800ac18:	b580      	push	{r7, lr}
 800ac1a:	b084      	sub	sp, #16
 800ac1c:	af00      	add	r7, sp, #0
 800ac1e:	6078      	str	r0, [r7, #4]
#ifdef SEM_WAIT
   return SEM_WAIT(spi_rx_sem, timeout);
#else
  int tickstart = HAL_GetTick();
 800ac20:	f7f7 fdc4 	bl	80027ac <HAL_GetTick>
 800ac24:	4603      	mov	r3, r0
 800ac26:	60fb      	str	r3, [r7, #12]
  while (spi_rx_event==1)
 800ac28:	e00a      	b.n	800ac40 <wait_spi_rx_event+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 800ac2a:	f7f7 fdbf 	bl	80027ac <HAL_GetTick>
 800ac2e:	4602      	mov	r2, r0
 800ac30:	68fb      	ldr	r3, [r7, #12]
 800ac32:	1ad2      	subs	r2, r2, r3
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	429a      	cmp	r2, r3
 800ac38:	d902      	bls.n	800ac40 <wait_spi_rx_event+0x28>
    {
      return -1;
 800ac3a:	f04f 33ff 	mov.w	r3, #4294967295
 800ac3e:	e004      	b.n	800ac4a <wait_spi_rx_event+0x32>
  while (spi_rx_event==1)
 800ac40:	4b04      	ldr	r3, [pc, #16]	; (800ac54 <wait_spi_rx_event+0x3c>)
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	2b01      	cmp	r3, #1
 800ac46:	d0f0      	beq.n	800ac2a <wait_spi_rx_event+0x12>
    }
  }
  return 0;
 800ac48:	2300      	movs	r3, #0
#endif
}
 800ac4a:	4618      	mov	r0, r3
 800ac4c:	3710      	adds	r7, #16
 800ac4e:	46bd      	mov	sp, r7
 800ac50:	bd80      	pop	{r7, pc}
 800ac52:	bf00      	nop
 800ac54:	20000ce8 	.word	0x20000ce8

0800ac58 <wait_spi_tx_event>:

int wait_spi_tx_event(int timeout)
{
 800ac58:	b580      	push	{r7, lr}
 800ac5a:	b084      	sub	sp, #16
 800ac5c:	af00      	add	r7, sp, #0
 800ac5e:	6078      	str	r0, [r7, #4]
#ifdef SEM_WAIT
   return SEM_WAIT(spi_tx_sem, timeout);
#else
  int tickstart = HAL_GetTick();
 800ac60:	f7f7 fda4 	bl	80027ac <HAL_GetTick>
 800ac64:	4603      	mov	r3, r0
 800ac66:	60fb      	str	r3, [r7, #12]
  while (spi_tx_event==1)
 800ac68:	e00a      	b.n	800ac80 <wait_spi_tx_event+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 800ac6a:	f7f7 fd9f 	bl	80027ac <HAL_GetTick>
 800ac6e:	4602      	mov	r2, r0
 800ac70:	68fb      	ldr	r3, [r7, #12]
 800ac72:	1ad2      	subs	r2, r2, r3
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	429a      	cmp	r2, r3
 800ac78:	d902      	bls.n	800ac80 <wait_spi_tx_event+0x28>
    {
      return -1;
 800ac7a:	f04f 33ff 	mov.w	r3, #4294967295
 800ac7e:	e004      	b.n	800ac8a <wait_spi_tx_event+0x32>
  while (spi_tx_event==1)
 800ac80:	4b04      	ldr	r3, [pc, #16]	; (800ac94 <wait_spi_tx_event+0x3c>)
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	2b01      	cmp	r3, #1
 800ac86:	d0f0      	beq.n	800ac6a <wait_spi_tx_event+0x12>
    }
  }
  return 0;
 800ac88:	2300      	movs	r3, #0
#endif
}
 800ac8a:	4618      	mov	r0, r3
 800ac8c:	3710      	adds	r7, #16
 800ac8e:	46bd      	mov	sp, r7
 800ac90:	bd80      	pop	{r7, pc}
 800ac92:	bf00      	nop
 800ac94:	20000cec 	.word	0x20000cec

0800ac98 <SPI_WIFI_ReceiveData>:



int16_t SPI_WIFI_ReceiveData(uint8_t *pData, uint16_t len, uint32_t timeout)
{
 800ac98:	b580      	push	{r7, lr}
 800ac9a:	b086      	sub	sp, #24
 800ac9c:	af00      	add	r7, sp, #0
 800ac9e:	60f8      	str	r0, [r7, #12]
 800aca0:	460b      	mov	r3, r1
 800aca2:	607a      	str	r2, [r7, #4]
 800aca4:	817b      	strh	r3, [r7, #10]
  int16_t length = 0;
 800aca6:	2300      	movs	r3, #0
 800aca8:	82fb      	strh	r3, [r7, #22]
  uint8_t tmp[2];
  
  WIFI_DISABLE_NSS();
 800acaa:	2201      	movs	r2, #1
 800acac:	2101      	movs	r1, #1
 800acae:	4834      	ldr	r0, [pc, #208]	; (800ad80 <SPI_WIFI_ReceiveData+0xe8>)
 800acb0:	f7f8 fb02 	bl	80032b8 <HAL_GPIO_WritePin>
  UNLOCK_SPI();
  SPI_WIFI_DelayUs(3);
 800acb4:	2003      	movs	r0, #3
 800acb6:	f000 f8e3 	bl	800ae80 <SPI_WIFI_DelayUs>


  if (wait_cmddata_rdy_rising_event(timeout)<0)
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	4618      	mov	r0, r3
 800acbe:	f7ff ff8b 	bl	800abd8 <wait_cmddata_rdy_rising_event>
 800acc2:	4603      	mov	r3, r0
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	da02      	bge.n	800acce <SPI_WIFI_ReceiveData+0x36>
  {
      return ES_WIFI_ERROR_WAITING_DRDY_FALLING;
 800acc8:	f06f 0302 	mvn.w	r3, #2
 800accc:	e054      	b.n	800ad78 <SPI_WIFI_ReceiveData+0xe0>
  }

  LOCK_SPI();
  WIFI_ENABLE_NSS();
 800acce:	2200      	movs	r2, #0
 800acd0:	2101      	movs	r1, #1
 800acd2:	482b      	ldr	r0, [pc, #172]	; (800ad80 <SPI_WIFI_ReceiveData+0xe8>)
 800acd4:	f7f8 faf0 	bl	80032b8 <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(15);
 800acd8:	200f      	movs	r0, #15
 800acda:	f000 f8d1 	bl	800ae80 <SPI_WIFI_DelayUs>
  while (WIFI_IS_CMDDATA_READY())
 800acde:	e03d      	b.n	800ad5c <SPI_WIFI_ReceiveData+0xc4>
  {
    if((length < len) || (!len))
 800ace0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800ace4:	897b      	ldrh	r3, [r7, #10]
 800ace6:	429a      	cmp	r2, r3
 800ace8:	db02      	blt.n	800acf0 <SPI_WIFI_ReceiveData+0x58>
 800acea:	897b      	ldrh	r3, [r7, #10]
 800acec:	2b00      	cmp	r3, #0
 800acee:	d13c      	bne.n	800ad6a <SPI_WIFI_ReceiveData+0xd2>
    {
      spi_rx_event=1;
 800acf0:	4b24      	ldr	r3, [pc, #144]	; (800ad84 <SPI_WIFI_ReceiveData+0xec>)
 800acf2:	2201      	movs	r2, #1
 800acf4:	601a      	str	r2, [r3, #0]
      if (HAL_SPI_Receive_IT(&hspi, tmp, 1) != HAL_OK) {
 800acf6:	f107 0314 	add.w	r3, r7, #20
 800acfa:	2201      	movs	r2, #1
 800acfc:	4619      	mov	r1, r3
 800acfe:	4822      	ldr	r0, [pc, #136]	; (800ad88 <SPI_WIFI_ReceiveData+0xf0>)
 800ad00:	f7fb fdd4 	bl	80068ac <HAL_SPI_Receive_IT>
 800ad04:	4603      	mov	r3, r0
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	d007      	beq.n	800ad1a <SPI_WIFI_ReceiveData+0x82>
        WIFI_DISABLE_NSS();
 800ad0a:	2201      	movs	r2, #1
 800ad0c:	2101      	movs	r1, #1
 800ad0e:	481c      	ldr	r0, [pc, #112]	; (800ad80 <SPI_WIFI_ReceiveData+0xe8>)
 800ad10:	f7f8 fad2 	bl	80032b8 <HAL_GPIO_WritePin>
        UNLOCK_SPI();
        return ES_WIFI_ERROR_SPI_FAILED;
 800ad14:	f04f 33ff 	mov.w	r3, #4294967295
 800ad18:	e02e      	b.n	800ad78 <SPI_WIFI_ReceiveData+0xe0>
      }
  
      wait_spi_rx_event(timeout);
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	4618      	mov	r0, r3
 800ad1e:	f7ff ff7b 	bl	800ac18 <wait_spi_rx_event>

      pData[0] = tmp[0];
 800ad22:	7d3a      	ldrb	r2, [r7, #20]
 800ad24:	68fb      	ldr	r3, [r7, #12]
 800ad26:	701a      	strb	r2, [r3, #0]
      pData[1] = tmp[1];
 800ad28:	68fb      	ldr	r3, [r7, #12]
 800ad2a:	3301      	adds	r3, #1
 800ad2c:	7d7a      	ldrb	r2, [r7, #21]
 800ad2e:	701a      	strb	r2, [r3, #0]
      length += 2;
 800ad30:	8afb      	ldrh	r3, [r7, #22]
 800ad32:	3302      	adds	r3, #2
 800ad34:	b29b      	uxth	r3, r3
 800ad36:	82fb      	strh	r3, [r7, #22]
      pData  += 2;
 800ad38:	68fb      	ldr	r3, [r7, #12]
 800ad3a:	3302      	adds	r3, #2
 800ad3c:	60fb      	str	r3, [r7, #12]
      
      if (length >= ES_WIFI_DATA_SIZE) {
 800ad3e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800ad42:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800ad46:	db09      	blt.n	800ad5c <SPI_WIFI_ReceiveData+0xc4>
        WIFI_DISABLE_NSS();
 800ad48:	2201      	movs	r2, #1
 800ad4a:	2101      	movs	r1, #1
 800ad4c:	480c      	ldr	r0, [pc, #48]	; (800ad80 <SPI_WIFI_ReceiveData+0xe8>)
 800ad4e:	f7f8 fab3 	bl	80032b8 <HAL_GPIO_WritePin>
        SPI_WIFI_ResetModule();
 800ad52:	f7ff fea5 	bl	800aaa0 <SPI_WIFI_ResetModule>
        UNLOCK_SPI();
        return ES_WIFI_ERROR_STUFFING_FOREVER;
 800ad56:	f06f 0303 	mvn.w	r3, #3
 800ad5a:	e00d      	b.n	800ad78 <SPI_WIFI_ReceiveData+0xe0>
  while (WIFI_IS_CMDDATA_READY())
 800ad5c:	2102      	movs	r1, #2
 800ad5e:	4808      	ldr	r0, [pc, #32]	; (800ad80 <SPI_WIFI_ReceiveData+0xe8>)
 800ad60:	f7f8 fa92 	bl	8003288 <HAL_GPIO_ReadPin>
 800ad64:	4603      	mov	r3, r0
 800ad66:	2b01      	cmp	r3, #1
 800ad68:	d0ba      	beq.n	800ace0 <SPI_WIFI_ReceiveData+0x48>
    else
    {
      break;
    }
  }
  WIFI_DISABLE_NSS();
 800ad6a:	2201      	movs	r2, #1
 800ad6c:	2101      	movs	r1, #1
 800ad6e:	4804      	ldr	r0, [pc, #16]	; (800ad80 <SPI_WIFI_ReceiveData+0xe8>)
 800ad70:	f7f8 faa2 	bl	80032b8 <HAL_GPIO_WritePin>
  UNLOCK_SPI();
  return length;
 800ad74:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 800ad78:	4618      	mov	r0, r3
 800ad7a:	3718      	adds	r7, #24
 800ad7c:	46bd      	mov	sp, r7
 800ad7e:	bd80      	pop	{r7, pc}
 800ad80:	48001000 	.word	0x48001000
 800ad84:	20000ce8 	.word	0x20000ce8
 800ad88:	20000c84 	.word	0x20000c84

0800ad8c <SPI_WIFI_SendData>:
  * @param  len : Data length
  * @param  timeout : send timeout in mS
  * @retval Length of sent data
  */
int16_t SPI_WIFI_SendData( uint8_t *pdata,  uint16_t len, uint32_t timeout)
{
 800ad8c:	b580      	push	{r7, lr}
 800ad8e:	b086      	sub	sp, #24
 800ad90:	af00      	add	r7, sp, #0
 800ad92:	60f8      	str	r0, [r7, #12]
 800ad94:	460b      	mov	r3, r1
 800ad96:	607a      	str	r2, [r7, #4]
 800ad98:	817b      	strh	r3, [r7, #10]
  uint8_t Padding[2];
  
  if (wait_cmddata_rdy_high(timeout)<0)
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	4618      	mov	r0, r3
 800ad9e:	f7ff fef9 	bl	800ab94 <wait_cmddata_rdy_high>
 800ada2:	4603      	mov	r3, r0
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	da02      	bge.n	800adae <SPI_WIFI_SendData+0x22>
  {
    return ES_WIFI_ERROR_SPI_FAILED;
 800ada8:	f04f 33ff 	mov.w	r3, #4294967295
 800adac:	e04f      	b.n	800ae4e <SPI_WIFI_SendData+0xc2>
  }
    
  /* arm to detect rising event */
  cmddata_rdy_rising_event=1;
 800adae:	4b2a      	ldr	r3, [pc, #168]	; (800ae58 <SPI_WIFI_SendData+0xcc>)
 800adb0:	2201      	movs	r2, #1
 800adb2:	601a      	str	r2, [r3, #0]
  LOCK_SPI();
  WIFI_ENABLE_NSS();
 800adb4:	2200      	movs	r2, #0
 800adb6:	2101      	movs	r1, #1
 800adb8:	4828      	ldr	r0, [pc, #160]	; (800ae5c <SPI_WIFI_SendData+0xd0>)
 800adba:	f7f8 fa7d 	bl	80032b8 <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(15);
 800adbe:	200f      	movs	r0, #15
 800adc0:	f000 f85e 	bl	800ae80 <SPI_WIFI_DelayUs>
  if (len > 1)
 800adc4:	897b      	ldrh	r3, [r7, #10]
 800adc6:	2b01      	cmp	r3, #1
 800adc8:	d919      	bls.n	800adfe <SPI_WIFI_SendData+0x72>
  {
    spi_tx_event=1;
 800adca:	4b25      	ldr	r3, [pc, #148]	; (800ae60 <SPI_WIFI_SendData+0xd4>)
 800adcc:	2201      	movs	r2, #1
 800adce:	601a      	str	r2, [r3, #0]
    if( HAL_SPI_Transmit_IT(&hspi, (uint8_t *)pdata , len/2) != HAL_OK)
 800add0:	897b      	ldrh	r3, [r7, #10]
 800add2:	085b      	lsrs	r3, r3, #1
 800add4:	b29b      	uxth	r3, r3
 800add6:	461a      	mov	r2, r3
 800add8:	68f9      	ldr	r1, [r7, #12]
 800adda:	4822      	ldr	r0, [pc, #136]	; (800ae64 <SPI_WIFI_SendData+0xd8>)
 800addc:	f7fb fcd8 	bl	8006790 <HAL_SPI_Transmit_IT>
 800ade0:	4603      	mov	r3, r0
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	d007      	beq.n	800adf6 <SPI_WIFI_SendData+0x6a>
    {
      WIFI_DISABLE_NSS();
 800ade6:	2201      	movs	r2, #1
 800ade8:	2101      	movs	r1, #1
 800adea:	481c      	ldr	r0, [pc, #112]	; (800ae5c <SPI_WIFI_SendData+0xd0>)
 800adec:	f7f8 fa64 	bl	80032b8 <HAL_GPIO_WritePin>
      UNLOCK_SPI();
      return ES_WIFI_ERROR_SPI_FAILED;
 800adf0:	f04f 33ff 	mov.w	r3, #4294967295
 800adf4:	e02b      	b.n	800ae4e <SPI_WIFI_SendData+0xc2>
    }
    wait_spi_tx_event(timeout);
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	4618      	mov	r0, r3
 800adfa:	f7ff ff2d 	bl	800ac58 <wait_spi_tx_event>
  }
  
  if ( len & 1)
 800adfe:	897b      	ldrh	r3, [r7, #10]
 800ae00:	f003 0301 	and.w	r3, r3, #1
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	d020      	beq.n	800ae4a <SPI_WIFI_SendData+0xbe>
  {
    Padding[0] = pdata[len-1];
 800ae08:	897b      	ldrh	r3, [r7, #10]
 800ae0a:	3b01      	subs	r3, #1
 800ae0c:	68fa      	ldr	r2, [r7, #12]
 800ae0e:	4413      	add	r3, r2
 800ae10:	781b      	ldrb	r3, [r3, #0]
 800ae12:	753b      	strb	r3, [r7, #20]
    Padding[1] = '\n';
 800ae14:	230a      	movs	r3, #10
 800ae16:	757b      	strb	r3, [r7, #21]

    spi_tx_event=1;
 800ae18:	4b11      	ldr	r3, [pc, #68]	; (800ae60 <SPI_WIFI_SendData+0xd4>)
 800ae1a:	2201      	movs	r2, #1
 800ae1c:	601a      	str	r2, [r3, #0]
    if( HAL_SPI_Transmit_IT(&hspi, Padding, 1) != HAL_OK)
 800ae1e:	f107 0314 	add.w	r3, r7, #20
 800ae22:	2201      	movs	r2, #1
 800ae24:	4619      	mov	r1, r3
 800ae26:	480f      	ldr	r0, [pc, #60]	; (800ae64 <SPI_WIFI_SendData+0xd8>)
 800ae28:	f7fb fcb2 	bl	8006790 <HAL_SPI_Transmit_IT>
 800ae2c:	4603      	mov	r3, r0
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	d007      	beq.n	800ae42 <SPI_WIFI_SendData+0xb6>
    {
      WIFI_DISABLE_NSS();
 800ae32:	2201      	movs	r2, #1
 800ae34:	2101      	movs	r1, #1
 800ae36:	4809      	ldr	r0, [pc, #36]	; (800ae5c <SPI_WIFI_SendData+0xd0>)
 800ae38:	f7f8 fa3e 	bl	80032b8 <HAL_GPIO_WritePin>
      UNLOCK_SPI();
      return ES_WIFI_ERROR_SPI_FAILED;
 800ae3c:	f04f 33ff 	mov.w	r3, #4294967295
 800ae40:	e005      	b.n	800ae4e <SPI_WIFI_SendData+0xc2>
    }  
    wait_spi_tx_event(timeout);
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	4618      	mov	r0, r3
 800ae46:	f7ff ff07 	bl	800ac58 <wait_spi_tx_event>
    
  }
  return len;
 800ae4a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
}
 800ae4e:	4618      	mov	r0, r3
 800ae50:	3718      	adds	r7, #24
 800ae52:	46bd      	mov	sp, r7
 800ae54:	bd80      	pop	{r7, pc}
 800ae56:	bf00      	nop
 800ae58:	20000cf0 	.word	0x20000cf0
 800ae5c:	48001000 	.word	0x48001000
 800ae60:	20000cec 	.word	0x20000cec
 800ae64:	20000c84 	.word	0x20000c84

0800ae68 <SPI_WIFI_Delay>:
  * @brief  Delay
  * @param  Delay in ms
  * @retval None
  */
void SPI_WIFI_Delay(uint32_t Delay)
{
 800ae68:	b580      	push	{r7, lr}
 800ae6a:	b082      	sub	sp, #8
 800ae6c:	af00      	add	r7, sp, #0
 800ae6e:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800ae70:	6878      	ldr	r0, [r7, #4]
 800ae72:	f7f7 fca7 	bl	80027c4 <HAL_Delay>
}
 800ae76:	bf00      	nop
 800ae78:	3708      	adds	r7, #8
 800ae7a:	46bd      	mov	sp, r7
 800ae7c:	bd80      	pop	{r7, pc}
	...

0800ae80 <SPI_WIFI_DelayUs>:
   * @brief  Delay
  * @param  Delay in us
  * @retval None
  */
void SPI_WIFI_DelayUs(uint32_t n)
{
 800ae80:	b580      	push	{r7, lr}
 800ae82:	b086      	sub	sp, #24
 800ae84:	af00      	add	r7, sp, #0
 800ae86:	6078      	str	r0, [r7, #4]
  volatile        uint32_t ct = 0;
 800ae88:	2300      	movs	r3, #0
 800ae8a:	60bb      	str	r3, [r7, #8]
  uint32_t        loop_per_us = 0;
 800ae8c:	2300      	movs	r3, #0
 800ae8e:	617b      	str	r3, [r7, #20]
  static uint32_t cycle_per_loop = 0;

  /* calibration happen on first call for a duration of 1 ms * nbcycle per loop */
  /* 10 cycle for STM32L4 */
  if (cycle_per_loop == 0 ) 
 800ae90:	4b20      	ldr	r3, [pc, #128]	; (800af14 <SPI_WIFI_DelayUs+0x94>)
 800ae92:	681b      	ldr	r3, [r3, #0]
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	d122      	bne.n	800aede <SPI_WIFI_DelayUs+0x5e>
  {
     uint32_t cycle_per_ms = (SystemCoreClock/1000UL);
 800ae98:	4b1f      	ldr	r3, [pc, #124]	; (800af18 <SPI_WIFI_DelayUs+0x98>)
 800ae9a:	681b      	ldr	r3, [r3, #0]
 800ae9c:	4a1f      	ldr	r2, [pc, #124]	; (800af1c <SPI_WIFI_DelayUs+0x9c>)
 800ae9e:	fba2 2303 	umull	r2, r3, r2, r3
 800aea2:	099b      	lsrs	r3, r3, #6
 800aea4:	613b      	str	r3, [r7, #16]
     uint32_t t = 0;
 800aea6:	2300      	movs	r3, #0
 800aea8:	60fb      	str	r3, [r7, #12]
     ct = cycle_per_ms;
 800aeaa:	693b      	ldr	r3, [r7, #16]
 800aeac:	60bb      	str	r3, [r7, #8]
     t = HAL_GetTick();
 800aeae:	f7f7 fc7d 	bl	80027ac <HAL_GetTick>
 800aeb2:	60f8      	str	r0, [r7, #12]
     while(ct) ct--;
 800aeb4:	e002      	b.n	800aebc <SPI_WIFI_DelayUs+0x3c>
 800aeb6:	68bb      	ldr	r3, [r7, #8]
 800aeb8:	3b01      	subs	r3, #1
 800aeba:	60bb      	str	r3, [r7, #8]
 800aebc:	68bb      	ldr	r3, [r7, #8]
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	d1f9      	bne.n	800aeb6 <SPI_WIFI_DelayUs+0x36>
     cycle_per_loop = HAL_GetTick()-t;
 800aec2:	f7f7 fc73 	bl	80027ac <HAL_GetTick>
 800aec6:	4602      	mov	r2, r0
 800aec8:	68fb      	ldr	r3, [r7, #12]
 800aeca:	1ad3      	subs	r3, r2, r3
 800aecc:	4a11      	ldr	r2, [pc, #68]	; (800af14 <SPI_WIFI_DelayUs+0x94>)
 800aece:	6013      	str	r3, [r2, #0]
     if (cycle_per_loop == 0) cycle_per_loop = 1;
 800aed0:	4b10      	ldr	r3, [pc, #64]	; (800af14 <SPI_WIFI_DelayUs+0x94>)
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	d102      	bne.n	800aede <SPI_WIFI_DelayUs+0x5e>
 800aed8:	4b0e      	ldr	r3, [pc, #56]	; (800af14 <SPI_WIFI_DelayUs+0x94>)
 800aeda:	2201      	movs	r2, #1
 800aedc:	601a      	str	r2, [r3, #0]
  }

  loop_per_us = SystemCoreClock/1000000UL/cycle_per_loop;
 800aede:	4b0e      	ldr	r3, [pc, #56]	; (800af18 <SPI_WIFI_DelayUs+0x98>)
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	4a0f      	ldr	r2, [pc, #60]	; (800af20 <SPI_WIFI_DelayUs+0xa0>)
 800aee4:	fba2 2303 	umull	r2, r3, r2, r3
 800aee8:	0c9a      	lsrs	r2, r3, #18
 800aeea:	4b0a      	ldr	r3, [pc, #40]	; (800af14 <SPI_WIFI_DelayUs+0x94>)
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	fbb2 f3f3 	udiv	r3, r2, r3
 800aef2:	617b      	str	r3, [r7, #20]
  ct = n * loop_per_us;
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	697a      	ldr	r2, [r7, #20]
 800aef8:	fb02 f303 	mul.w	r3, r2, r3
 800aefc:	60bb      	str	r3, [r7, #8]
  while(ct) ct--;
 800aefe:	e002      	b.n	800af06 <SPI_WIFI_DelayUs+0x86>
 800af00:	68bb      	ldr	r3, [r7, #8]
 800af02:	3b01      	subs	r3, #1
 800af04:	60bb      	str	r3, [r7, #8]
 800af06:	68bb      	ldr	r3, [r7, #8]
 800af08:	2b00      	cmp	r3, #0
 800af0a:	d1f9      	bne.n	800af00 <SPI_WIFI_DelayUs+0x80>
  return;
 800af0c:	bf00      	nop
}
 800af0e:	3718      	adds	r7, #24
 800af10:	46bd      	mov	sp, r7
 800af12:	bd80      	pop	{r7, pc}
 800af14:	20000cf4 	.word	0x20000cf4
 800af18:	20000008 	.word	0x20000008
 800af1c:	10624dd3 	.word	0x10624dd3
 800af20:	431bde83 	.word	0x431bde83

0800af24 <HAL_SPI_RxCpltCallback>:
  *               the configuration information for SPI module.
  * @retval None
  */

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800af24:	b480      	push	{r7}
 800af26:	b083      	sub	sp, #12
 800af28:	af00      	add	r7, sp, #0
 800af2a:	6078      	str	r0, [r7, #4]
  if (spi_rx_event)
 800af2c:	4b06      	ldr	r3, [pc, #24]	; (800af48 <HAL_SPI_RxCpltCallback+0x24>)
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	2b00      	cmp	r3, #0
 800af32:	d002      	beq.n	800af3a <HAL_SPI_RxCpltCallback+0x16>
  {
    SEM_SIGNAL(spi_rx_sem);
    spi_rx_event = 0;
 800af34:	4b04      	ldr	r3, [pc, #16]	; (800af48 <HAL_SPI_RxCpltCallback+0x24>)
 800af36:	2200      	movs	r2, #0
 800af38:	601a      	str	r2, [r3, #0]
  }
}
 800af3a:	bf00      	nop
 800af3c:	370c      	adds	r7, #12
 800af3e:	46bd      	mov	sp, r7
 800af40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af44:	4770      	bx	lr
 800af46:	bf00      	nop
 800af48:	20000ce8 	.word	0x20000ce8

0800af4c <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800af4c:	b480      	push	{r7}
 800af4e:	b083      	sub	sp, #12
 800af50:	af00      	add	r7, sp, #0
 800af52:	6078      	str	r0, [r7, #4]
  if (spi_tx_event)
 800af54:	4b06      	ldr	r3, [pc, #24]	; (800af70 <HAL_SPI_TxCpltCallback+0x24>)
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	2b00      	cmp	r3, #0
 800af5a:	d002      	beq.n	800af62 <HAL_SPI_TxCpltCallback+0x16>
  {
    SEM_SIGNAL(spi_tx_sem);
    spi_tx_event = 0;
 800af5c:	4b04      	ldr	r3, [pc, #16]	; (800af70 <HAL_SPI_TxCpltCallback+0x24>)
 800af5e:	2200      	movs	r2, #0
 800af60:	601a      	str	r2, [r3, #0]
  }
}
 800af62:	bf00      	nop
 800af64:	370c      	adds	r7, #12
 800af66:	46bd      	mov	sp, r7
 800af68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af6c:	4770      	bx	lr
 800af6e:	bf00      	nop
 800af70:	20000cec 	.word	0x20000cec

0800af74 <SPI_WIFI_ISR>:
  * @brief  Interrupt handler for  Data RDY signal
  * @param  None
  * @retval None
  */
void    SPI_WIFI_ISR(void)
{
 800af74:	b480      	push	{r7}
 800af76:	af00      	add	r7, sp, #0
   if (cmddata_rdy_rising_event==1)  
 800af78:	4b05      	ldr	r3, [pc, #20]	; (800af90 <SPI_WIFI_ISR+0x1c>)
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	2b01      	cmp	r3, #1
 800af7e:	d102      	bne.n	800af86 <SPI_WIFI_ISR+0x12>
   {
     SEM_SIGNAL(cmddata_rdy_rising_sem);
     cmddata_rdy_rising_event = 0;
 800af80:	4b03      	ldr	r3, [pc, #12]	; (800af90 <SPI_WIFI_ISR+0x1c>)
 800af82:	2200      	movs	r2, #0
 800af84:	601a      	str	r2, [r3, #0]
   }
}
 800af86:	bf00      	nop
 800af88:	46bd      	mov	sp, r7
 800af8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af8e:	4770      	bx	lr
 800af90:	20000cf0 	.word	0x20000cf0

0800af94 <WIFI_Init>:
  * @brief  Initialize the WIFI core
  * @param  None
  * @retval Operation status
  */
WIFI_Status_t WIFI_Init(void)
{
 800af94:	b580      	push	{r7, lr}
 800af96:	b084      	sub	sp, #16
 800af98:	af02      	add	r7, sp, #8
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 800af9a:	2301      	movs	r3, #1
 800af9c:	71fb      	strb	r3, [r7, #7]
  
  if(ES_WIFI_RegisterBusIO(&EsWifiObj,
 800af9e:	4b0d      	ldr	r3, [pc, #52]	; (800afd4 <WIFI_Init+0x40>)
 800afa0:	9301      	str	r3, [sp, #4]
 800afa2:	4b0d      	ldr	r3, [pc, #52]	; (800afd8 <WIFI_Init+0x44>)
 800afa4:	9300      	str	r3, [sp, #0]
 800afa6:	4b0d      	ldr	r3, [pc, #52]	; (800afdc <WIFI_Init+0x48>)
 800afa8:	4a0d      	ldr	r2, [pc, #52]	; (800afe0 <WIFI_Init+0x4c>)
 800afaa:	490e      	ldr	r1, [pc, #56]	; (800afe4 <WIFI_Init+0x50>)
 800afac:	480e      	ldr	r0, [pc, #56]	; (800afe8 <WIFI_Init+0x54>)
 800afae:	f7ff f8c3 	bl	800a138 <ES_WIFI_RegisterBusIO>
 800afb2:	4603      	mov	r3, r0
 800afb4:	2b00      	cmp	r3, #0
 800afb6:	d107      	bne.n	800afc8 <WIFI_Init+0x34>
                           SPI_WIFI_DeInit,
                           SPI_WIFI_Delay,
                           SPI_WIFI_SendData,
                           SPI_WIFI_ReceiveData) == ES_WIFI_STATUS_OK)
  {
    if(ES_WIFI_Init(&EsWifiObj) == ES_WIFI_STATUS_OK)
 800afb8:	480b      	ldr	r0, [pc, #44]	; (800afe8 <WIFI_Init+0x54>)
 800afba:	f7ff f88f 	bl	800a0dc <ES_WIFI_Init>
 800afbe:	4603      	mov	r3, r0
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	d101      	bne.n	800afc8 <WIFI_Init+0x34>
    {
      ret = WIFI_STATUS_OK;
 800afc4:	2300      	movs	r3, #0
 800afc6:	71fb      	strb	r3, [r7, #7]
    }
  }
  return ret;
 800afc8:	79fb      	ldrb	r3, [r7, #7]
}
 800afca:	4618      	mov	r0, r3
 800afcc:	3708      	adds	r7, #8
 800afce:	46bd      	mov	sp, r7
 800afd0:	bd80      	pop	{r7, pc}
 800afd2:	bf00      	nop
 800afd4:	0800ac99 	.word	0x0800ac99
 800afd8:	0800ad8d 	.word	0x0800ad8d
 800afdc:	0800ae69 	.word	0x0800ae69
 800afe0:	0800ab81 	.word	0x0800ab81
 800afe4:	0800a9e5 	.word	0x0800a9e5
 800afe8:	20000cf8 	.word	0x20000cf8

0800afec <WIFI_Connect>:
  */
WIFI_Status_t WIFI_Connect(
                             const char* SSID,
                             const char* Password,
                             WIFI_Ecn_t ecn)
{
 800afec:	b580      	push	{r7, lr}
 800afee:	b086      	sub	sp, #24
 800aff0:	af00      	add	r7, sp, #0
 800aff2:	60f8      	str	r0, [r7, #12]
 800aff4:	60b9      	str	r1, [r7, #8]
 800aff6:	4613      	mov	r3, r2
 800aff8:	71fb      	strb	r3, [r7, #7]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 800affa:	2301      	movs	r3, #1
 800affc:	75fb      	strb	r3, [r7, #23]

  if(ES_WIFI_Connect(&EsWifiObj, SSID, Password, (ES_WIFI_SecurityType_t) ecn) == ES_WIFI_STATUS_OK)
 800affe:	79fb      	ldrb	r3, [r7, #7]
 800b000:	68ba      	ldr	r2, [r7, #8]
 800b002:	68f9      	ldr	r1, [r7, #12]
 800b004:	4809      	ldr	r0, [pc, #36]	; (800b02c <WIFI_Connect+0x40>)
 800b006:	f7ff f8cb 	bl	800a1a0 <ES_WIFI_Connect>
 800b00a:	4603      	mov	r3, r0
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	d107      	bne.n	800b020 <WIFI_Connect+0x34>
  {
    if(ES_WIFI_GetNetworkSettings(&EsWifiObj) == ES_WIFI_STATUS_OK)
 800b010:	4806      	ldr	r0, [pc, #24]	; (800b02c <WIFI_Connect+0x40>)
 800b012:	f7ff f969 	bl	800a2e8 <ES_WIFI_GetNetworkSettings>
 800b016:	4603      	mov	r3, r0
 800b018:	2b00      	cmp	r3, #0
 800b01a:	d101      	bne.n	800b020 <WIFI_Connect+0x34>
    {
       ret = WIFI_STATUS_OK;
 800b01c:	2300      	movs	r3, #0
 800b01e:	75fb      	strb	r3, [r7, #23]
    }
  }
  return ret;
 800b020:	7dfb      	ldrb	r3, [r7, #23]
}
 800b022:	4618      	mov	r0, r3
 800b024:	3718      	adds	r7, #24
 800b026:	46bd      	mov	sp, r7
 800b028:	bd80      	pop	{r7, pc}
 800b02a:	bf00      	nop
 800b02c:	20000cf8 	.word	0x20000cf8

0800b030 <WIFI_GetMAC_Address>:
/**
  * @brief  This function retrieves the WiFi interface's MAC address.
  * @retval Operation Status.
  */
WIFI_Status_t WIFI_GetMAC_Address(uint8_t  *mac)
{
 800b030:	b580      	push	{r7, lr}
 800b032:	b084      	sub	sp, #16
 800b034:	af00      	add	r7, sp, #0
 800b036:	6078      	str	r0, [r7, #4]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 800b038:	2301      	movs	r3, #1
 800b03a:	73fb      	strb	r3, [r7, #15]
  
  if(ES_WIFI_GetMACAddress(&EsWifiObj, mac) == ES_WIFI_STATUS_OK)
 800b03c:	6879      	ldr	r1, [r7, #4]
 800b03e:	4806      	ldr	r0, [pc, #24]	; (800b058 <WIFI_GetMAC_Address+0x28>)
 800b040:	f7ff f97c 	bl	800a33c <ES_WIFI_GetMACAddress>
 800b044:	4603      	mov	r3, r0
 800b046:	2b00      	cmp	r3, #0
 800b048:	d101      	bne.n	800b04e <WIFI_GetMAC_Address+0x1e>
  {
    ret = WIFI_STATUS_OK;
 800b04a:	2300      	movs	r3, #0
 800b04c:	73fb      	strb	r3, [r7, #15]
  }
  return ret;
 800b04e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b050:	4618      	mov	r0, r3
 800b052:	3710      	adds	r7, #16
 800b054:	46bd      	mov	sp, r7
 800b056:	bd80      	pop	{r7, pc}
 800b058:	20000cf8 	.word	0x20000cf8

0800b05c <WIFI_GetIP_Address>:
/**
  * @brief  This function retrieves the WiFi interface's IP address.
  * @retval Operation Status.
  */
WIFI_Status_t WIFI_GetIP_Address (uint8_t  *ipaddr)
{
 800b05c:	b580      	push	{r7, lr}
 800b05e:	b084      	sub	sp, #16
 800b060:	af00      	add	r7, sp, #0
 800b062:	6078      	str	r0, [r7, #4]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 800b064:	2301      	movs	r3, #1
 800b066:	73fb      	strb	r3, [r7, #15]
  
  if (ES_WIFI_IsConnected(&EsWifiObj) == 1)
 800b068:	4809      	ldr	r0, [pc, #36]	; (800b090 <WIFI_GetIP_Address+0x34>)
 800b06a:	f7ff f911 	bl	800a290 <ES_WIFI_IsConnected>
 800b06e:	4603      	mov	r3, r0
 800b070:	2b01      	cmp	r3, #1
 800b072:	d107      	bne.n	800b084 <WIFI_GetIP_Address+0x28>
 800b074:	4b06      	ldr	r3, [pc, #24]	; (800b090 <WIFI_GetIP_Address+0x34>)
 800b076:	f8d3 30d5 	ldr.w	r3, [r3, #213]	; 0xd5
 800b07a:	461a      	mov	r2, r3
  {
    memcpy(ipaddr, EsWifiObj.NetSettings.IP_Addr, 4);
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	601a      	str	r2, [r3, #0]
    ret = WIFI_STATUS_OK;
 800b080:	2300      	movs	r3, #0
 800b082:	73fb      	strb	r3, [r7, #15]
  }
  return ret;
 800b084:	7bfb      	ldrb	r3, [r7, #15]
}
 800b086:	4618      	mov	r0, r3
 800b088:	3710      	adds	r7, #16
 800b08a:	46bd      	mov	sp, r7
 800b08c:	bd80      	pop	{r7, pc}
 800b08e:	bf00      	nop
 800b090:	20000cf8 	.word	0x20000cf8

0800b094 <WIFI_OpenClientConnection>:
  * @param  port : Remote port
  * @param  local_port : Local port
  * @retval Operation status
  */
WIFI_Status_t WIFI_OpenClientConnection(uint32_t socket, WIFI_Protocol_t type, const char *name, uint8_t *ipaddr, uint16_t port, uint16_t local_port)
{
 800b094:	b580      	push	{r7, lr}
 800b096:	b08a      	sub	sp, #40	; 0x28
 800b098:	af00      	add	r7, sp, #0
 800b09a:	60f8      	str	r0, [r7, #12]
 800b09c:	607a      	str	r2, [r7, #4]
 800b09e:	603b      	str	r3, [r7, #0]
 800b0a0:	460b      	mov	r3, r1
 800b0a2:	72fb      	strb	r3, [r7, #11]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 800b0a4:	2301      	movs	r3, #1
 800b0a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  ES_WIFI_Conn_t conn;
  
  conn.Number = socket;
 800b0aa:	68fb      	ldr	r3, [r7, #12]
 800b0ac:	b2db      	uxtb	r3, r3
 800b0ae:	747b      	strb	r3, [r7, #17]
  conn.RemotePort = port;
 800b0b0:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800b0b2:	827b      	strh	r3, [r7, #18]
  conn.LocalPort = local_port;
 800b0b4:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800b0b6:	82bb      	strh	r3, [r7, #20]
  conn.Type = (type == WIFI_TCP_PROTOCOL)? ES_WIFI_TCP_CONNECTION : ES_WIFI_UDP_CONNECTION;
 800b0b8:	7afb      	ldrb	r3, [r7, #11]
 800b0ba:	2b00      	cmp	r3, #0
 800b0bc:	bf14      	ite	ne
 800b0be:	2301      	movne	r3, #1
 800b0c0:	2300      	moveq	r3, #0
 800b0c2:	b2db      	uxtb	r3, r3
 800b0c4:	743b      	strb	r3, [r7, #16]
  conn.RemoteIP[0] = ipaddr[0];
 800b0c6:	683b      	ldr	r3, [r7, #0]
 800b0c8:	781b      	ldrb	r3, [r3, #0]
 800b0ca:	75bb      	strb	r3, [r7, #22]
  conn.RemoteIP[1] = ipaddr[1];
 800b0cc:	683b      	ldr	r3, [r7, #0]
 800b0ce:	785b      	ldrb	r3, [r3, #1]
 800b0d0:	75fb      	strb	r3, [r7, #23]
  conn.RemoteIP[2] = ipaddr[2];
 800b0d2:	683b      	ldr	r3, [r7, #0]
 800b0d4:	789b      	ldrb	r3, [r3, #2]
 800b0d6:	763b      	strb	r3, [r7, #24]
  conn.RemoteIP[3] = ipaddr[3];
 800b0d8:	683b      	ldr	r3, [r7, #0]
 800b0da:	78db      	ldrb	r3, [r3, #3]
 800b0dc:	767b      	strb	r3, [r7, #25]
  if(ES_WIFI_StartClientConnection(&EsWifiObj, &conn)== ES_WIFI_STATUS_OK)
 800b0de:	f107 0310 	add.w	r3, r7, #16
 800b0e2:	4619      	mov	r1, r3
 800b0e4:	4807      	ldr	r0, [pc, #28]	; (800b104 <WIFI_OpenClientConnection+0x70>)
 800b0e6:	f7ff f95b 	bl	800a3a0 <ES_WIFI_StartClientConnection>
 800b0ea:	4603      	mov	r3, r0
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	d102      	bne.n	800b0f6 <WIFI_OpenClientConnection+0x62>
  {
    ret = WIFI_STATUS_OK;
 800b0f0:	2300      	movs	r3, #0
 800b0f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  return ret;
 800b0f6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800b0fa:	4618      	mov	r0, r3
 800b0fc:	3728      	adds	r7, #40	; 0x28
 800b0fe:	46bd      	mov	sp, r7
 800b100:	bd80      	pop	{r7, pc}
 800b102:	bf00      	nop
 800b104:	20000cf8 	.word	0x20000cf8

0800b108 <sendMessageVector>:
/*-----------------------------------------------------------*/

static int32_t sendMessageVector( MQTTContext_t * pContext,
                                  TransportOutVector_t * pIoVec,
                                  size_t ioVecCount )
{
 800b108:	b580      	push	{r7, lr}
 800b10a:	b08a      	sub	sp, #40	; 0x28
 800b10c:	af00      	add	r7, sp, #0
 800b10e:	60f8      	str	r0, [r7, #12]
 800b110:	60b9      	str	r1, [r7, #8]
 800b112:	607a      	str	r2, [r7, #4]
    int32_t sendResult;
    uint32_t timeoutMs;
    TransportOutVector_t * pIoVectIterator;
    size_t vectorsToBeSent = ioVecCount;
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	61fb      	str	r3, [r7, #28]
    size_t bytesToSend = 0U;
 800b118:	2300      	movs	r3, #0
 800b11a:	61bb      	str	r3, [r7, #24]
    int32_t bytesSentOrError = 0;
 800b11c:	2300      	movs	r3, #0
 800b11e:	617b      	str	r3, [r7, #20]

    assert( pContext != NULL );
 800b120:	68fb      	ldr	r3, [r7, #12]
 800b122:	2b00      	cmp	r3, #0
 800b124:	d106      	bne.n	800b134 <sendMessageVector+0x2c>
 800b126:	4b64      	ldr	r3, [pc, #400]	; (800b2b8 <sendMessageVector+0x1b0>)
 800b128:	4a64      	ldr	r2, [pc, #400]	; (800b2bc <sendMessageVector+0x1b4>)
 800b12a:	f240 21f2 	movw	r1, #754	; 0x2f2
 800b12e:	4864      	ldr	r0, [pc, #400]	; (800b2c0 <sendMessageVector+0x1b8>)
 800b130:	f006 f934 	bl	801139c <__assert_func>
    assert( pIoVec != NULL );
 800b134:	68bb      	ldr	r3, [r7, #8]
 800b136:	2b00      	cmp	r3, #0
 800b138:	d106      	bne.n	800b148 <sendMessageVector+0x40>
 800b13a:	4b62      	ldr	r3, [pc, #392]	; (800b2c4 <sendMessageVector+0x1bc>)
 800b13c:	4a5f      	ldr	r2, [pc, #380]	; (800b2bc <sendMessageVector+0x1b4>)
 800b13e:	f240 21f3 	movw	r1, #755	; 0x2f3
 800b142:	485f      	ldr	r0, [pc, #380]	; (800b2c0 <sendMessageVector+0x1b8>)
 800b144:	f006 f92a 	bl	801139c <__assert_func>
    assert( pContext->getTime != NULL );
 800b148:	68fb      	ldr	r3, [r7, #12]
 800b14a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	d106      	bne.n	800b15e <sendMessageVector+0x56>
 800b150:	4b5d      	ldr	r3, [pc, #372]	; (800b2c8 <sendMessageVector+0x1c0>)
 800b152:	4a5a      	ldr	r2, [pc, #360]	; (800b2bc <sendMessageVector+0x1b4>)
 800b154:	f44f 713d 	mov.w	r1, #756	; 0x2f4
 800b158:	4859      	ldr	r0, [pc, #356]	; (800b2c0 <sendMessageVector+0x1b8>)
 800b15a:	f006 f91f 	bl	801139c <__assert_func>
    /* Send must always be defined */
    assert( pContext->transportInterface.send != NULL );
 800b15e:	68fb      	ldr	r3, [r7, #12]
 800b160:	695b      	ldr	r3, [r3, #20]
 800b162:	2b00      	cmp	r3, #0
 800b164:	d106      	bne.n	800b174 <sendMessageVector+0x6c>
 800b166:	4b59      	ldr	r3, [pc, #356]	; (800b2cc <sendMessageVector+0x1c4>)
 800b168:	4a54      	ldr	r2, [pc, #336]	; (800b2bc <sendMessageVector+0x1b4>)
 800b16a:	f240 21f6 	movw	r1, #758	; 0x2f6
 800b16e:	4854      	ldr	r0, [pc, #336]	; (800b2c0 <sendMessageVector+0x1b8>)
 800b170:	f006 f914 	bl	801139c <__assert_func>

    /* Count the total number of bytes to be sent as outlined in the vector. */
    for( pIoVectIterator = pIoVec; pIoVectIterator <= &( pIoVec[ ioVecCount - 1U ] ); pIoVectIterator++ )
 800b174:	68bb      	ldr	r3, [r7, #8]
 800b176:	623b      	str	r3, [r7, #32]
 800b178:	e007      	b.n	800b18a <sendMessageVector+0x82>
    {
        bytesToSend += pIoVectIterator->iov_len;
 800b17a:	6a3b      	ldr	r3, [r7, #32]
 800b17c:	685b      	ldr	r3, [r3, #4]
 800b17e:	69ba      	ldr	r2, [r7, #24]
 800b180:	4413      	add	r3, r2
 800b182:	61bb      	str	r3, [r7, #24]
    for( pIoVectIterator = pIoVec; pIoVectIterator <= &( pIoVec[ ioVecCount - 1U ] ); pIoVectIterator++ )
 800b184:	6a3b      	ldr	r3, [r7, #32]
 800b186:	3308      	adds	r3, #8
 800b188:	623b      	str	r3, [r7, #32]
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800b190:	3b01      	subs	r3, #1
 800b192:	00db      	lsls	r3, r3, #3
 800b194:	68ba      	ldr	r2, [r7, #8]
 800b196:	4413      	add	r3, r2
 800b198:	6a3a      	ldr	r2, [r7, #32]
 800b19a:	429a      	cmp	r2, r3
 800b19c:	d9ed      	bls.n	800b17a <sendMessageVector+0x72>
    }

    /* Reset the iterator to point to the first entry in the array. */
    pIoVectIterator = pIoVec;
 800b19e:	68bb      	ldr	r3, [r7, #8]
 800b1a0:	623b      	str	r3, [r7, #32]

    /* Set the timeout. */
    timeoutMs = pContext->getTime() + MQTT_SEND_TIMEOUT_MS;
 800b1a2:	68fb      	ldr	r3, [r7, #12]
 800b1a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1a6:	4798      	blx	r3
 800b1a8:	4603      	mov	r3, r0
 800b1aa:	f503 439c 	add.w	r3, r3, #19968	; 0x4e00
 800b1ae:	3320      	adds	r3, #32
 800b1b0:	613b      	str	r3, [r7, #16]

    while( ( bytesSentOrError < ( int32_t ) bytesToSend ) && ( bytesSentOrError >= 0 ) )
 800b1b2:	e073      	b.n	800b29c <sendMessageVector+0x194>
    {
        if( pContext->transportInterface.writev != NULL )
 800b1b4:	68fb      	ldr	r3, [r7, #12]
 800b1b6:	699b      	ldr	r3, [r3, #24]
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	d008      	beq.n	800b1ce <sendMessageVector+0xc6>
        {
            sendResult = pContext->transportInterface.writev( pContext->transportInterface.pNetworkContext,
 800b1bc:	68fb      	ldr	r3, [r7, #12]
 800b1be:	699b      	ldr	r3, [r3, #24]
 800b1c0:	68fa      	ldr	r2, [r7, #12]
 800b1c2:	69d0      	ldr	r0, [r2, #28]
 800b1c4:	69fa      	ldr	r2, [r7, #28]
 800b1c6:	6a39      	ldr	r1, [r7, #32]
 800b1c8:	4798      	blx	r3
 800b1ca:	6278      	str	r0, [r7, #36]	; 0x24
 800b1cc:	e009      	b.n	800b1e2 <sendMessageVector+0xda>
                                                              pIoVectIterator,
                                                              vectorsToBeSent );
        }
        else
        {
            sendResult = pContext->transportInterface.send( pContext->transportInterface.pNetworkContext,
 800b1ce:	68fb      	ldr	r3, [r7, #12]
 800b1d0:	695b      	ldr	r3, [r3, #20]
 800b1d2:	68fa      	ldr	r2, [r7, #12]
 800b1d4:	69d0      	ldr	r0, [r2, #28]
 800b1d6:	6a3a      	ldr	r2, [r7, #32]
 800b1d8:	6811      	ldr	r1, [r2, #0]
 800b1da:	6a3a      	ldr	r2, [r7, #32]
 800b1dc:	6852      	ldr	r2, [r2, #4]
 800b1de:	4798      	blx	r3
 800b1e0:	6278      	str	r0, [r7, #36]	; 0x24
                                                            pIoVectIterator->iov_base,
                                                            pIoVectIterator->iov_len );
        }

        if( sendResult > 0 )
 800b1e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1e4:	2b00      	cmp	r3, #0
 800b1e6:	dd17      	ble.n	800b218 <sendMessageVector+0x110>
        {
            /* It is a bug in the application's transport send implementation if
             * more bytes than expected are sent. */
            assert( sendResult <= ( ( int32_t ) bytesToSend - bytesSentOrError ) );
 800b1e8:	69ba      	ldr	r2, [r7, #24]
 800b1ea:	697b      	ldr	r3, [r7, #20]
 800b1ec:	1ad3      	subs	r3, r2, r3
 800b1ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b1f0:	429a      	cmp	r2, r3
 800b1f2:	dd06      	ble.n	800b202 <sendMessageVector+0xfa>
 800b1f4:	4b36      	ldr	r3, [pc, #216]	; (800b2d0 <sendMessageVector+0x1c8>)
 800b1f6:	4a31      	ldr	r2, [pc, #196]	; (800b2bc <sendMessageVector+0x1b4>)
 800b1f8:	f240 3117 	movw	r1, #791	; 0x317
 800b1fc:	4830      	ldr	r0, [pc, #192]	; (800b2c0 <sendMessageVector+0x1b8>)
 800b1fe:	f006 f8cd 	bl	801139c <__assert_func>

            bytesSentOrError += sendResult;
 800b202:	697a      	ldr	r2, [r7, #20]
 800b204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b206:	4413      	add	r3, r2
 800b208:	617b      	str	r3, [r7, #20]

            /* Set last transmission time. */
            pContext->lastPacketTxTime = pContext->getTime();
 800b20a:	68fb      	ldr	r3, [r7, #12]
 800b20c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b20e:	4798      	blx	r3
 800b210:	4602      	mov	r2, r0
 800b212:	68fb      	ldr	r3, [r7, #12]
 800b214:	635a      	str	r2, [r3, #52]	; 0x34
 800b216:	e004      	b.n	800b222 <sendMessageVector+0x11a>

            LogDebug( ( "sendMessageVector: Bytes Sent=%ld, Bytes Remaining=%lu",
                        ( long int ) sendResult,
                        ( unsigned long ) ( bytesToSend - ( size_t ) bytesSentOrError ) ) );
        }
        else if( sendResult < 0 )
 800b218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	da01      	bge.n	800b222 <sendMessageVector+0x11a>
        {
            bytesSentOrError = sendResult;
 800b21e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b220:	617b      	str	r3, [r7, #20]
        {
            /* MISRA Empty body */
        }

        /* Check for timeout. */
        if( pContext->getTime() >= timeoutMs )
 800b222:	68fb      	ldr	r3, [r7, #12]
 800b224:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b226:	4798      	blx	r3
 800b228:	4602      	mov	r2, r0
 800b22a:	693b      	ldr	r3, [r7, #16]
 800b22c:	4293      	cmp	r3, r2
 800b22e:	d93d      	bls.n	800b2ac <sendMessageVector+0x1a4>
            LogError( ( "sendMessageVector: Unable to send packet: Timed out." ) );
            break;
        }

        /* Update the send pointer to the correct vector and offset. */
        while( ( pIoVectIterator <= &( pIoVec[ ioVecCount - 1U ] ) ) &&
 800b230:	e00b      	b.n	800b24a <sendMessageVector+0x142>
               ( sendResult >= ( int32_t ) pIoVectIterator->iov_len ) )
        {
            sendResult -= ( int32_t ) pIoVectIterator->iov_len;
 800b232:	6a3b      	ldr	r3, [r7, #32]
 800b234:	685b      	ldr	r3, [r3, #4]
 800b236:	461a      	mov	r2, r3
 800b238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b23a:	1a9b      	subs	r3, r3, r2
 800b23c:	627b      	str	r3, [r7, #36]	; 0x24
            pIoVectIterator++;
 800b23e:	6a3b      	ldr	r3, [r7, #32]
 800b240:	3308      	adds	r3, #8
 800b242:	623b      	str	r3, [r7, #32]
            /* Update the number of vector which are yet to be sent. */
            vectorsToBeSent--;
 800b244:	69fb      	ldr	r3, [r7, #28]
 800b246:	3b01      	subs	r3, #1
 800b248:	61fb      	str	r3, [r7, #28]
        while( ( pIoVectIterator <= &( pIoVec[ ioVecCount - 1U ] ) ) &&
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800b250:	3b01      	subs	r3, #1
 800b252:	00db      	lsls	r3, r3, #3
 800b254:	68ba      	ldr	r2, [r7, #8]
 800b256:	4413      	add	r3, r2
 800b258:	6a3a      	ldr	r2, [r7, #32]
 800b25a:	429a      	cmp	r2, r3
 800b25c:	d805      	bhi.n	800b26a <sendMessageVector+0x162>
               ( sendResult >= ( int32_t ) pIoVectIterator->iov_len ) )
 800b25e:	6a3b      	ldr	r3, [r7, #32]
 800b260:	685b      	ldr	r3, [r3, #4]
 800b262:	461a      	mov	r2, r3
        while( ( pIoVectIterator <= &( pIoVec[ ioVecCount - 1U ] ) ) &&
 800b264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b266:	4293      	cmp	r3, r2
 800b268:	dae3      	bge.n	800b232 <sendMessageVector+0x12a>
        }

        /* Some of the bytes from this vector were sent as well, update the length
         * and the pointer to data in this vector. */
        if( ( sendResult > 0 ) &&
 800b26a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	dd15      	ble.n	800b29c <sendMessageVector+0x194>
            ( pIoVectIterator <= &( pIoVec[ ioVecCount - 1U ] ) ) )
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800b276:	3b01      	subs	r3, #1
 800b278:	00db      	lsls	r3, r3, #3
 800b27a:	68ba      	ldr	r2, [r7, #8]
 800b27c:	4413      	add	r3, r2
        if( ( sendResult > 0 ) &&
 800b27e:	6a3a      	ldr	r2, [r7, #32]
 800b280:	429a      	cmp	r2, r3
 800b282:	d80b      	bhi.n	800b29c <sendMessageVector+0x194>
        {
            pIoVectIterator->iov_base = ( const void * ) &( ( ( const uint8_t * ) pIoVectIterator->iov_base )[ sendResult ] );
 800b284:	6a3b      	ldr	r3, [r7, #32]
 800b286:	681a      	ldr	r2, [r3, #0]
 800b288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b28a:	441a      	add	r2, r3
 800b28c:	6a3b      	ldr	r3, [r7, #32]
 800b28e:	601a      	str	r2, [r3, #0]
            pIoVectIterator->iov_len -= ( size_t ) sendResult;
 800b290:	6a3b      	ldr	r3, [r7, #32]
 800b292:	685a      	ldr	r2, [r3, #4]
 800b294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b296:	1ad2      	subs	r2, r2, r3
 800b298:	6a3b      	ldr	r3, [r7, #32]
 800b29a:	605a      	str	r2, [r3, #4]
    while( ( bytesSentOrError < ( int32_t ) bytesToSend ) && ( bytesSentOrError >= 0 ) )
 800b29c:	69bb      	ldr	r3, [r7, #24]
 800b29e:	697a      	ldr	r2, [r7, #20]
 800b2a0:	429a      	cmp	r2, r3
 800b2a2:	da04      	bge.n	800b2ae <sendMessageVector+0x1a6>
 800b2a4:	697b      	ldr	r3, [r7, #20]
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	da84      	bge.n	800b1b4 <sendMessageVector+0xac>
 800b2aa:	e000      	b.n	800b2ae <sendMessageVector+0x1a6>
            break;
 800b2ac:	bf00      	nop
        }
    }

    return bytesSentOrError;
 800b2ae:	697b      	ldr	r3, [r7, #20]
}
 800b2b0:	4618      	mov	r0, r3
 800b2b2:	3728      	adds	r7, #40	; 0x28
 800b2b4:	46bd      	mov	sp, r7
 800b2b6:	bd80      	pop	{r7, pc}
 800b2b8:	08013980 	.word	0x08013980
 800b2bc:	080144e4 	.word	0x080144e4
 800b2c0:	080138a4 	.word	0x080138a4
 800b2c4:	08013994 	.word	0x08013994
 800b2c8:	080139a4 	.word	0x080139a4
 800b2cc:	080139c0 	.word	0x080139c0
 800b2d0:	080139ec 	.word	0x080139ec

0800b2d4 <sendBuffer>:

static int32_t sendBuffer( MQTTContext_t * pContext,
                           const uint8_t * pBufferToSend,
                           size_t bytesToSend )
{
 800b2d4:	b580      	push	{r7, lr}
 800b2d6:	b088      	sub	sp, #32
 800b2d8:	af00      	add	r7, sp, #0
 800b2da:	60f8      	str	r0, [r7, #12]
 800b2dc:	60b9      	str	r1, [r7, #8]
 800b2de:	607a      	str	r2, [r7, #4]
    int32_t sendResult;
    uint32_t timeoutMs;
    int32_t bytesSentOrError = 0;
 800b2e0:	2300      	movs	r3, #0
 800b2e2:	61fb      	str	r3, [r7, #28]
    const uint8_t * pIndex = pBufferToSend;
 800b2e4:	68bb      	ldr	r3, [r7, #8]
 800b2e6:	61bb      	str	r3, [r7, #24]

    assert( pContext != NULL );
 800b2e8:	68fb      	ldr	r3, [r7, #12]
 800b2ea:	2b00      	cmp	r3, #0
 800b2ec:	d106      	bne.n	800b2fc <sendBuffer+0x28>
 800b2ee:	4b39      	ldr	r3, [pc, #228]	; (800b3d4 <sendBuffer+0x100>)
 800b2f0:	4a39      	ldr	r2, [pc, #228]	; (800b3d8 <sendBuffer+0x104>)
 800b2f2:	f240 3153 	movw	r1, #851	; 0x353
 800b2f6:	4839      	ldr	r0, [pc, #228]	; (800b3dc <sendBuffer+0x108>)
 800b2f8:	f006 f850 	bl	801139c <__assert_func>
    assert( pContext->getTime != NULL );
 800b2fc:	68fb      	ldr	r3, [r7, #12]
 800b2fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b300:	2b00      	cmp	r3, #0
 800b302:	d106      	bne.n	800b312 <sendBuffer+0x3e>
 800b304:	4b36      	ldr	r3, [pc, #216]	; (800b3e0 <sendBuffer+0x10c>)
 800b306:	4a34      	ldr	r2, [pc, #208]	; (800b3d8 <sendBuffer+0x104>)
 800b308:	f44f 7155 	mov.w	r1, #852	; 0x354
 800b30c:	4833      	ldr	r0, [pc, #204]	; (800b3dc <sendBuffer+0x108>)
 800b30e:	f006 f845 	bl	801139c <__assert_func>
    assert( pContext->transportInterface.send != NULL );
 800b312:	68fb      	ldr	r3, [r7, #12]
 800b314:	695b      	ldr	r3, [r3, #20]
 800b316:	2b00      	cmp	r3, #0
 800b318:	d106      	bne.n	800b328 <sendBuffer+0x54>
 800b31a:	4b32      	ldr	r3, [pc, #200]	; (800b3e4 <sendBuffer+0x110>)
 800b31c:	4a2e      	ldr	r2, [pc, #184]	; (800b3d8 <sendBuffer+0x104>)
 800b31e:	f240 3155 	movw	r1, #853	; 0x355
 800b322:	482e      	ldr	r0, [pc, #184]	; (800b3dc <sendBuffer+0x108>)
 800b324:	f006 f83a 	bl	801139c <__assert_func>
    assert( pIndex != NULL );
 800b328:	69bb      	ldr	r3, [r7, #24]
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	d106      	bne.n	800b33c <sendBuffer+0x68>
 800b32e:	4b2e      	ldr	r3, [pc, #184]	; (800b3e8 <sendBuffer+0x114>)
 800b330:	4a29      	ldr	r2, [pc, #164]	; (800b3d8 <sendBuffer+0x104>)
 800b332:	f240 3156 	movw	r1, #854	; 0x356
 800b336:	4829      	ldr	r0, [pc, #164]	; (800b3dc <sendBuffer+0x108>)
 800b338:	f006 f830 	bl	801139c <__assert_func>

    /* Set the timeout. */
    timeoutMs = pContext->getTime() + MQTT_SEND_TIMEOUT_MS;
 800b33c:	68fb      	ldr	r3, [r7, #12]
 800b33e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b340:	4798      	blx	r3
 800b342:	4603      	mov	r3, r0
 800b344:	f503 439c 	add.w	r3, r3, #19968	; 0x4e00
 800b348:	3320      	adds	r3, #32
 800b34a:	617b      	str	r3, [r7, #20]

    while( ( bytesSentOrError < ( int32_t ) bytesToSend ) && ( bytesSentOrError >= 0 ) )
 800b34c:	e034      	b.n	800b3b8 <sendBuffer+0xe4>
    {
        sendResult = pContext->transportInterface.send( pContext->transportInterface.pNetworkContext,
 800b34e:	68fb      	ldr	r3, [r7, #12]
 800b350:	695b      	ldr	r3, [r3, #20]
 800b352:	68fa      	ldr	r2, [r7, #12]
 800b354:	69d0      	ldr	r0, [r2, #28]
                                                        pIndex,
                                                        bytesToSend - ( size_t ) bytesSentOrError );
 800b356:	69fa      	ldr	r2, [r7, #28]
        sendResult = pContext->transportInterface.send( pContext->transportInterface.pNetworkContext,
 800b358:	6879      	ldr	r1, [r7, #4]
 800b35a:	1a8a      	subs	r2, r1, r2
 800b35c:	69b9      	ldr	r1, [r7, #24]
 800b35e:	4798      	blx	r3
 800b360:	6138      	str	r0, [r7, #16]

        if( sendResult > 0 )
 800b362:	693b      	ldr	r3, [r7, #16]
 800b364:	2b00      	cmp	r3, #0
 800b366:	dd1b      	ble.n	800b3a0 <sendBuffer+0xcc>
        {
            /* It is a bug in the application's transport send implementation if
             * more bytes than expected are sent. */
            assert( sendResult <= ( ( int32_t ) bytesToSend - bytesSentOrError ) );
 800b368:	687a      	ldr	r2, [r7, #4]
 800b36a:	69fb      	ldr	r3, [r7, #28]
 800b36c:	1ad3      	subs	r3, r2, r3
 800b36e:	693a      	ldr	r2, [r7, #16]
 800b370:	429a      	cmp	r2, r3
 800b372:	dd06      	ble.n	800b382 <sendBuffer+0xae>
 800b374:	4b1d      	ldr	r3, [pc, #116]	; (800b3ec <sendBuffer+0x118>)
 800b376:	4a18      	ldr	r2, [pc, #96]	; (800b3d8 <sendBuffer+0x104>)
 800b378:	f240 3165 	movw	r1, #869	; 0x365
 800b37c:	4817      	ldr	r0, [pc, #92]	; (800b3dc <sendBuffer+0x108>)
 800b37e:	f006 f80d 	bl	801139c <__assert_func>

            bytesSentOrError += sendResult;
 800b382:	69fa      	ldr	r2, [r7, #28]
 800b384:	693b      	ldr	r3, [r7, #16]
 800b386:	4413      	add	r3, r2
 800b388:	61fb      	str	r3, [r7, #28]
            pIndex = &pIndex[ sendResult ];
 800b38a:	693b      	ldr	r3, [r7, #16]
 800b38c:	69ba      	ldr	r2, [r7, #24]
 800b38e:	4413      	add	r3, r2
 800b390:	61bb      	str	r3, [r7, #24]

            /* Set last transmission time. */
            pContext->lastPacketTxTime = pContext->getTime();
 800b392:	68fb      	ldr	r3, [r7, #12]
 800b394:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b396:	4798      	blx	r3
 800b398:	4602      	mov	r2, r0
 800b39a:	68fb      	ldr	r3, [r7, #12]
 800b39c:	635a      	str	r2, [r3, #52]	; 0x34
 800b39e:	e004      	b.n	800b3aa <sendBuffer+0xd6>

            LogDebug( ( "sendBuffer: Bytes Sent=%ld, Bytes Remaining=%lu",
                        ( long int ) sendResult,
                        ( unsigned long ) ( bytesToSend - ( size_t ) bytesSentOrError ) ) );
        }
        else if( sendResult < 0 )
 800b3a0:	693b      	ldr	r3, [r7, #16]
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	da01      	bge.n	800b3aa <sendBuffer+0xd6>
        {
            bytesSentOrError = sendResult;
 800b3a6:	693b      	ldr	r3, [r7, #16]
 800b3a8:	61fb      	str	r3, [r7, #28]
        {
            /* MISRA Empty body */
        }

        /* Check for timeout. */
        if( pContext->getTime() >= timeoutMs )
 800b3aa:	68fb      	ldr	r3, [r7, #12]
 800b3ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3ae:	4798      	blx	r3
 800b3b0:	4602      	mov	r2, r0
 800b3b2:	697b      	ldr	r3, [r7, #20]
 800b3b4:	4293      	cmp	r3, r2
 800b3b6:	d907      	bls.n	800b3c8 <sendBuffer+0xf4>
    while( ( bytesSentOrError < ( int32_t ) bytesToSend ) && ( bytesSentOrError >= 0 ) )
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	69fa      	ldr	r2, [r7, #28]
 800b3bc:	429a      	cmp	r2, r3
 800b3be:	da04      	bge.n	800b3ca <sendBuffer+0xf6>
 800b3c0:	69fb      	ldr	r3, [r7, #28]
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	dac3      	bge.n	800b34e <sendBuffer+0x7a>
 800b3c6:	e000      	b.n	800b3ca <sendBuffer+0xf6>
        {
            LogError( ( "sendBuffer: Unable to send packet: Timed out." ) );
            break;
 800b3c8:	bf00      	nop
        }
    }

    return bytesSentOrError;
 800b3ca:	69fb      	ldr	r3, [r7, #28]
}
 800b3cc:	4618      	mov	r0, r3
 800b3ce:	3720      	adds	r7, #32
 800b3d0:	46bd      	mov	sp, r7
 800b3d2:	bd80      	pop	{r7, pc}
 800b3d4:	08013980 	.word	0x08013980
 800b3d8:	080144f8 	.word	0x080144f8
 800b3dc:	080138a4 	.word	0x080138a4
 800b3e0:	080139a4 	.word	0x080139a4
 800b3e4:	080139c0 	.word	0x080139c0
 800b3e8:	08013a2c 	.word	0x08013a2c
 800b3ec:	080139ec 	.word	0x080139ec

0800b3f0 <calculateElapsedTime>:

/*-----------------------------------------------------------*/

static uint32_t calculateElapsedTime( uint32_t later,
                                      uint32_t start )
{
 800b3f0:	b480      	push	{r7}
 800b3f2:	b083      	sub	sp, #12
 800b3f4:	af00      	add	r7, sp, #0
 800b3f6:	6078      	str	r0, [r7, #4]
 800b3f8:	6039      	str	r1, [r7, #0]
    return later - start;
 800b3fa:	687a      	ldr	r2, [r7, #4]
 800b3fc:	683b      	ldr	r3, [r7, #0]
 800b3fe:	1ad3      	subs	r3, r2, r3
}
 800b400:	4618      	mov	r0, r3
 800b402:	370c      	adds	r7, #12
 800b404:	46bd      	mov	sp, r7
 800b406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b40a:	4770      	bx	lr

0800b40c <getAckFromPacketType>:

/*-----------------------------------------------------------*/

static MQTTPubAckType_t getAckFromPacketType( uint8_t packetType )
{
 800b40c:	b580      	push	{r7, lr}
 800b40e:	b084      	sub	sp, #16
 800b410:	af00      	add	r7, sp, #0
 800b412:	4603      	mov	r3, r0
 800b414:	71fb      	strb	r3, [r7, #7]
    MQTTPubAckType_t ackType = MQTTPuback;
 800b416:	2300      	movs	r3, #0
 800b418:	73fb      	strb	r3, [r7, #15]

    switch( packetType )
 800b41a:	79fb      	ldrb	r3, [r7, #7]
 800b41c:	2b62      	cmp	r3, #98	; 0x62
 800b41e:	d00c      	beq.n	800b43a <getAckFromPacketType+0x2e>
 800b420:	2b62      	cmp	r3, #98	; 0x62
 800b422:	dc0d      	bgt.n	800b440 <getAckFromPacketType+0x34>
 800b424:	2b40      	cmp	r3, #64	; 0x40
 800b426:	d002      	beq.n	800b42e <getAckFromPacketType+0x22>
 800b428:	2b50      	cmp	r3, #80	; 0x50
 800b42a:	d003      	beq.n	800b434 <getAckFromPacketType+0x28>
 800b42c:	e008      	b.n	800b440 <getAckFromPacketType+0x34>
    {
        case MQTT_PACKET_TYPE_PUBACK:
            ackType = MQTTPuback;
 800b42e:	2300      	movs	r3, #0
 800b430:	73fb      	strb	r3, [r7, #15]
            break;
 800b432:	e012      	b.n	800b45a <getAckFromPacketType+0x4e>

        case MQTT_PACKET_TYPE_PUBREC:
            ackType = MQTTPubrec;
 800b434:	2301      	movs	r3, #1
 800b436:	73fb      	strb	r3, [r7, #15]
            break;
 800b438:	e00f      	b.n	800b45a <getAckFromPacketType+0x4e>

        case MQTT_PACKET_TYPE_PUBREL:
            ackType = MQTTPubrel;
 800b43a:	2302      	movs	r3, #2
 800b43c:	73fb      	strb	r3, [r7, #15]
            break;
 800b43e:	e00c      	b.n	800b45a <getAckFromPacketType+0x4e>
        case MQTT_PACKET_TYPE_PUBCOMP:
        default:

            /* This function is only called after checking the type is one of
             * the above four values, so packet type must be PUBCOMP here. */
            assert( packetType == MQTT_PACKET_TYPE_PUBCOMP );
 800b440:	79fb      	ldrb	r3, [r7, #7]
 800b442:	2b70      	cmp	r3, #112	; 0x70
 800b444:	d006      	beq.n	800b454 <getAckFromPacketType+0x48>
 800b446:	4b07      	ldr	r3, [pc, #28]	; (800b464 <getAckFromPacketType+0x58>)
 800b448:	4a07      	ldr	r2, [pc, #28]	; (800b468 <getAckFromPacketType+0x5c>)
 800b44a:	f240 31a7 	movw	r1, #935	; 0x3a7
 800b44e:	4807      	ldr	r0, [pc, #28]	; (800b46c <getAckFromPacketType+0x60>)
 800b450:	f005 ffa4 	bl	801139c <__assert_func>
            ackType = MQTTPubcomp;
 800b454:	2303      	movs	r3, #3
 800b456:	73fb      	strb	r3, [r7, #15]
            break;
 800b458:	bf00      	nop
    }

    return ackType;
 800b45a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b45c:	4618      	mov	r0, r3
 800b45e:	3710      	adds	r7, #16
 800b460:	46bd      	mov	sp, r7
 800b462:	bd80      	pop	{r7, pc}
 800b464:	08013a3c 	.word	0x08013a3c
 800b468:	08014504 	.word	0x08014504
 800b46c:	080138a4 	.word	0x080138a4

0800b470 <recvExact>:

/*-----------------------------------------------------------*/

static int32_t recvExact( const MQTTContext_t * pContext,
                          size_t bytesToRecv )
{
 800b470:	b580      	push	{r7, lr}
 800b472:	b08c      	sub	sp, #48	; 0x30
 800b474:	af00      	add	r7, sp, #0
 800b476:	6078      	str	r0, [r7, #4]
 800b478:	6039      	str	r1, [r7, #0]
    uint8_t * pIndex = NULL;
 800b47a:	2300      	movs	r3, #0
 800b47c:	62fb      	str	r3, [r7, #44]	; 0x2c
    size_t bytesRemaining = bytesToRecv;
 800b47e:	683b      	ldr	r3, [r7, #0]
 800b480:	62bb      	str	r3, [r7, #40]	; 0x28
    int32_t totalBytesRecvd = 0, bytesRecvd;
 800b482:	2300      	movs	r3, #0
 800b484:	627b      	str	r3, [r7, #36]	; 0x24
    uint32_t lastDataRecvTimeMs = 0U, timeSinceLastRecvMs = 0U;
 800b486:	2300      	movs	r3, #0
 800b488:	623b      	str	r3, [r7, #32]
 800b48a:	2300      	movs	r3, #0
 800b48c:	61bb      	str	r3, [r7, #24]
    TransportRecv_t recvFunc = NULL;
 800b48e:	2300      	movs	r3, #0
 800b490:	617b      	str	r3, [r7, #20]
    MQTTGetCurrentTimeFunc_t getTimeStampMs = NULL;
 800b492:	2300      	movs	r3, #0
 800b494:	613b      	str	r3, [r7, #16]
    bool receiveError = false;
 800b496:	2300      	movs	r3, #0
 800b498:	77fb      	strb	r3, [r7, #31]

    assert( pContext != NULL );
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	d106      	bne.n	800b4ae <recvExact+0x3e>
 800b4a0:	4b44      	ldr	r3, [pc, #272]	; (800b5b4 <recvExact+0x144>)
 800b4a2:	4a45      	ldr	r2, [pc, #276]	; (800b5b8 <recvExact+0x148>)
 800b4a4:	f44f 716f 	mov.w	r1, #956	; 0x3bc
 800b4a8:	4844      	ldr	r0, [pc, #272]	; (800b5bc <recvExact+0x14c>)
 800b4aa:	f005 ff77 	bl	801139c <__assert_func>
    assert( bytesToRecv <= pContext->networkBuffer.size );
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4b2:	683a      	ldr	r2, [r7, #0]
 800b4b4:	429a      	cmp	r2, r3
 800b4b6:	d906      	bls.n	800b4c6 <recvExact+0x56>
 800b4b8:	4b41      	ldr	r3, [pc, #260]	; (800b5c0 <recvExact+0x150>)
 800b4ba:	4a3f      	ldr	r2, [pc, #252]	; (800b5b8 <recvExact+0x148>)
 800b4bc:	f240 31bd 	movw	r1, #957	; 0x3bd
 800b4c0:	483e      	ldr	r0, [pc, #248]	; (800b5bc <recvExact+0x14c>)
 800b4c2:	f005 ff6b 	bl	801139c <__assert_func>
    assert( pContext->getTime != NULL );
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	d106      	bne.n	800b4dc <recvExact+0x6c>
 800b4ce:	4b3d      	ldr	r3, [pc, #244]	; (800b5c4 <recvExact+0x154>)
 800b4d0:	4a39      	ldr	r2, [pc, #228]	; (800b5b8 <recvExact+0x148>)
 800b4d2:	f240 31be 	movw	r1, #958	; 0x3be
 800b4d6:	4839      	ldr	r0, [pc, #228]	; (800b5bc <recvExact+0x14c>)
 800b4d8:	f005 ff60 	bl	801139c <__assert_func>
    assert( pContext->transportInterface.recv != NULL );
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	691b      	ldr	r3, [r3, #16]
 800b4e0:	2b00      	cmp	r3, #0
 800b4e2:	d106      	bne.n	800b4f2 <recvExact+0x82>
 800b4e4:	4b38      	ldr	r3, [pc, #224]	; (800b5c8 <recvExact+0x158>)
 800b4e6:	4a34      	ldr	r2, [pc, #208]	; (800b5b8 <recvExact+0x148>)
 800b4e8:	f240 31bf 	movw	r1, #959	; 0x3bf
 800b4ec:	4833      	ldr	r0, [pc, #204]	; (800b5bc <recvExact+0x14c>)
 800b4ee:	f005 ff55 	bl	801139c <__assert_func>
    assert( pContext->networkBuffer.pBuffer != NULL );
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	6a1b      	ldr	r3, [r3, #32]
 800b4f6:	2b00      	cmp	r3, #0
 800b4f8:	d106      	bne.n	800b508 <recvExact+0x98>
 800b4fa:	4b34      	ldr	r3, [pc, #208]	; (800b5cc <recvExact+0x15c>)
 800b4fc:	4a2e      	ldr	r2, [pc, #184]	; (800b5b8 <recvExact+0x148>)
 800b4fe:	f44f 7170 	mov.w	r1, #960	; 0x3c0
 800b502:	482e      	ldr	r0, [pc, #184]	; (800b5bc <recvExact+0x14c>)
 800b504:	f005 ff4a 	bl	801139c <__assert_func>

    pIndex = pContext->networkBuffer.pBuffer;
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	6a1b      	ldr	r3, [r3, #32]
 800b50c:	62fb      	str	r3, [r7, #44]	; 0x2c
    recvFunc = pContext->transportInterface.recv;
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	691b      	ldr	r3, [r3, #16]
 800b512:	617b      	str	r3, [r7, #20]
    getTimeStampMs = pContext->getTime;
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b518:	613b      	str	r3, [r7, #16]

    /* Part of the MQTT packet has been read before calling this function. */
    lastDataRecvTimeMs = getTimeStampMs();
 800b51a:	693b      	ldr	r3, [r7, #16]
 800b51c:	4798      	blx	r3
 800b51e:	6238      	str	r0, [r7, #32]

    while( ( bytesRemaining > 0U ) && ( receiveError == false ) )
 800b520:	e039      	b.n	800b596 <recvExact+0x126>
    {
        bytesRecvd = recvFunc( pContext->transportInterface.pNetworkContext,
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	69d8      	ldr	r0, [r3, #28]
 800b526:	697b      	ldr	r3, [r7, #20]
 800b528:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b52a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b52c:	4798      	blx	r3
 800b52e:	60f8      	str	r0, [r7, #12]
                               pIndex,
                               bytesRemaining );

        if( bytesRecvd < 0 )
 800b530:	68fb      	ldr	r3, [r7, #12]
 800b532:	2b00      	cmp	r3, #0
 800b534:	da04      	bge.n	800b540 <recvExact+0xd0>
        {
            LogError( ( "Network error while receiving packet: ReturnCode=%ld.",
                        ( long int ) bytesRecvd ) );
            totalBytesRecvd = bytesRecvd;
 800b536:	68fb      	ldr	r3, [r7, #12]
 800b538:	627b      	str	r3, [r7, #36]	; 0x24
            receiveError = true;
 800b53a:	2301      	movs	r3, #1
 800b53c:	77fb      	strb	r3, [r7, #31]
 800b53e:	e02a      	b.n	800b596 <recvExact+0x126>
        }
        else if( bytesRecvd > 0 )
 800b540:	68fb      	ldr	r3, [r7, #12]
 800b542:	2b00      	cmp	r3, #0
 800b544:	dd1a      	ble.n	800b57c <recvExact+0x10c>
        {
            /* Reset the starting time as we have received some data from the network. */
            lastDataRecvTimeMs = getTimeStampMs();
 800b546:	693b      	ldr	r3, [r7, #16]
 800b548:	4798      	blx	r3
 800b54a:	6238      	str	r0, [r7, #32]
            /* It is a bug in the application's transport receive implementation
             * if more bytes than expected are received. To avoid a possible
             * overflow in converting bytesRemaining from unsigned to signed,
             * this assert must exist after the check for bytesRecvd being
             * negative. */
            assert( ( size_t ) bytesRecvd <= bytesRemaining );
 800b54c:	68fb      	ldr	r3, [r7, #12]
 800b54e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b550:	429a      	cmp	r2, r3
 800b552:	d206      	bcs.n	800b562 <recvExact+0xf2>
 800b554:	4b1e      	ldr	r3, [pc, #120]	; (800b5d0 <recvExact+0x160>)
 800b556:	4a18      	ldr	r2, [pc, #96]	; (800b5b8 <recvExact+0x148>)
 800b558:	f44f 7178 	mov.w	r1, #992	; 0x3e0
 800b55c:	4817      	ldr	r0, [pc, #92]	; (800b5bc <recvExact+0x14c>)
 800b55e:	f005 ff1d 	bl	801139c <__assert_func>

            bytesRemaining -= ( size_t ) bytesRecvd;
 800b562:	68fb      	ldr	r3, [r7, #12]
 800b564:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b566:	1ad3      	subs	r3, r2, r3
 800b568:	62bb      	str	r3, [r7, #40]	; 0x28
            totalBytesRecvd += ( int32_t ) bytesRecvd;
 800b56a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b56c:	68fb      	ldr	r3, [r7, #12]
 800b56e:	4413      	add	r3, r2
 800b570:	627b      	str	r3, [r7, #36]	; 0x24
            /* Increment the index. */
            pIndex = &pIndex[ bytesRecvd ];
 800b572:	68fb      	ldr	r3, [r7, #12]
 800b574:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b576:	4413      	add	r3, r2
 800b578:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b57a:	e00c      	b.n	800b596 <recvExact+0x126>
                        ( long int ) totalBytesRecvd ) );
        }
        else
        {
            /* No bytes were read from the network. */
            timeSinceLastRecvMs = calculateElapsedTime( getTimeStampMs(), lastDataRecvTimeMs );
 800b57c:	693b      	ldr	r3, [r7, #16]
 800b57e:	4798      	blx	r3
 800b580:	4603      	mov	r3, r0
 800b582:	6a39      	ldr	r1, [r7, #32]
 800b584:	4618      	mov	r0, r3
 800b586:	f7ff ff33 	bl	800b3f0 <calculateElapsedTime>
 800b58a:	61b8      	str	r0, [r7, #24]

            /* Check for timeout if we have been waiting to receive any byte on the network. */
            if( timeSinceLastRecvMs >= MQTT_RECV_POLLING_TIMEOUT_MS )
 800b58c:	69bb      	ldr	r3, [r7, #24]
 800b58e:	2b09      	cmp	r3, #9
 800b590:	d901      	bls.n	800b596 <recvExact+0x126>
            {
                LogError( ( "Unable to receive packet: Timed out in transport recv." ) );
                receiveError = true;
 800b592:	2301      	movs	r3, #1
 800b594:	77fb      	strb	r3, [r7, #31]
    while( ( bytesRemaining > 0U ) && ( receiveError == false ) )
 800b596:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b598:	2b00      	cmp	r3, #0
 800b59a:	d005      	beq.n	800b5a8 <recvExact+0x138>
 800b59c:	7ffb      	ldrb	r3, [r7, #31]
 800b59e:	f083 0301 	eor.w	r3, r3, #1
 800b5a2:	b2db      	uxtb	r3, r3
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	d1bc      	bne.n	800b522 <recvExact+0xb2>
            }
        }
    }

    return totalBytesRecvd;
 800b5a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b5aa:	4618      	mov	r0, r3
 800b5ac:	3730      	adds	r7, #48	; 0x30
 800b5ae:	46bd      	mov	sp, r7
 800b5b0:	bd80      	pop	{r7, pc}
 800b5b2:	bf00      	nop
 800b5b4:	08013980 	.word	0x08013980
 800b5b8:	0801451c 	.word	0x0801451c
 800b5bc:	080138a4 	.word	0x080138a4
 800b5c0:	08013a64 	.word	0x08013a64
 800b5c4:	080139a4 	.word	0x080139a4
 800b5c8:	08013a90 	.word	0x08013a90
 800b5cc:	08013abc 	.word	0x08013abc
 800b5d0:	08013ae4 	.word	0x08013ae4

0800b5d4 <discardPacket>:
/*-----------------------------------------------------------*/

static MQTTStatus_t discardPacket( const MQTTContext_t * pContext,
                                   size_t remainingLength,
                                   uint32_t timeoutMs )
{
 800b5d4:	b580      	push	{r7, lr}
 800b5d6:	b08c      	sub	sp, #48	; 0x30
 800b5d8:	af00      	add	r7, sp, #0
 800b5da:	60f8      	str	r0, [r7, #12]
 800b5dc:	60b9      	str	r1, [r7, #8]
 800b5de:	607a      	str	r2, [r7, #4]
    MQTTStatus_t status = MQTTRecvFailed;
 800b5e0:	2304      	movs	r3, #4
 800b5e2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    int32_t bytesReceived = 0;
 800b5e6:	2300      	movs	r3, #0
 800b5e8:	61fb      	str	r3, [r7, #28]
    size_t bytesToReceive = 0U;
 800b5ea:	2300      	movs	r3, #0
 800b5ec:	62bb      	str	r3, [r7, #40]	; 0x28
    uint32_t totalBytesReceived = 0U;
 800b5ee:	2300      	movs	r3, #0
 800b5f0:	627b      	str	r3, [r7, #36]	; 0x24
    uint32_t entryTimeMs = 0U;
 800b5f2:	2300      	movs	r3, #0
 800b5f4:	61bb      	str	r3, [r7, #24]
    uint32_t elapsedTimeMs = 0U;
 800b5f6:	2300      	movs	r3, #0
 800b5f8:	617b      	str	r3, [r7, #20]
    MQTTGetCurrentTimeFunc_t getTimeStampMs = NULL;
 800b5fa:	2300      	movs	r3, #0
 800b5fc:	613b      	str	r3, [r7, #16]
    bool receiveError = false;
 800b5fe:	2300      	movs	r3, #0
 800b600:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

    assert( pContext != NULL );
 800b604:	68fb      	ldr	r3, [r7, #12]
 800b606:	2b00      	cmp	r3, #0
 800b608:	d106      	bne.n	800b618 <discardPacket+0x44>
 800b60a:	4b2f      	ldr	r3, [pc, #188]	; (800b6c8 <discardPacket+0xf4>)
 800b60c:	4a2f      	ldr	r2, [pc, #188]	; (800b6cc <discardPacket+0xf8>)
 800b60e:	f240 410b 	movw	r1, #1035	; 0x40b
 800b612:	482f      	ldr	r0, [pc, #188]	; (800b6d0 <discardPacket+0xfc>)
 800b614:	f005 fec2 	bl	801139c <__assert_func>
    assert( pContext->getTime != NULL );
 800b618:	68fb      	ldr	r3, [r7, #12]
 800b61a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b61c:	2b00      	cmp	r3, #0
 800b61e:	d106      	bne.n	800b62e <discardPacket+0x5a>
 800b620:	4b2c      	ldr	r3, [pc, #176]	; (800b6d4 <discardPacket+0x100>)
 800b622:	4a2a      	ldr	r2, [pc, #168]	; (800b6cc <discardPacket+0xf8>)
 800b624:	f240 410c 	movw	r1, #1036	; 0x40c
 800b628:	4829      	ldr	r0, [pc, #164]	; (800b6d0 <discardPacket+0xfc>)
 800b62a:	f005 feb7 	bl	801139c <__assert_func>

    bytesToReceive = pContext->networkBuffer.size;
 800b62e:	68fb      	ldr	r3, [r7, #12]
 800b630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b632:	62bb      	str	r3, [r7, #40]	; 0x28
    getTimeStampMs = pContext->getTime;
 800b634:	68fb      	ldr	r3, [r7, #12]
 800b636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b638:	613b      	str	r3, [r7, #16]

    entryTimeMs = getTimeStampMs();
 800b63a:	693b      	ldr	r3, [r7, #16]
 800b63c:	4798      	blx	r3
 800b63e:	61b8      	str	r0, [r7, #24]

    while( ( totalBytesReceived < remainingLength ) && ( receiveError == false ) )
 800b640:	e029      	b.n	800b696 <discardPacket+0xc2>
    {
        if( ( remainingLength - totalBytesReceived ) < bytesToReceive )
 800b642:	68ba      	ldr	r2, [r7, #8]
 800b644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b646:	1ad3      	subs	r3, r2, r3
 800b648:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b64a:	429a      	cmp	r2, r3
 800b64c:	d903      	bls.n	800b656 <discardPacket+0x82>
        {
            bytesToReceive = remainingLength - totalBytesReceived;
 800b64e:	68ba      	ldr	r2, [r7, #8]
 800b650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b652:	1ad3      	subs	r3, r2, r3
 800b654:	62bb      	str	r3, [r7, #40]	; 0x28
        }

        bytesReceived = recvExact( pContext, bytesToReceive );
 800b656:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b658:	68f8      	ldr	r0, [r7, #12]
 800b65a:	f7ff ff09 	bl	800b470 <recvExact>
 800b65e:	61f8      	str	r0, [r7, #28]

        if( bytesReceived != ( int32_t ) bytesToReceive )
 800b660:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b662:	69fa      	ldr	r2, [r7, #28]
 800b664:	429a      	cmp	r2, r3
 800b666:	d003      	beq.n	800b670 <discardPacket+0x9c>
        {
            LogError( ( "Receive error while discarding packet."
                        "ReceivedBytes=%ld, ExpectedBytes=%lu.",
                        ( long int ) bytesReceived,
                        ( unsigned long ) bytesToReceive ) );
            receiveError = true;
 800b668:	2301      	movs	r3, #1
 800b66a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b66e:	e012      	b.n	800b696 <discardPacket+0xc2>
        }
        else
        {
            totalBytesReceived += ( uint32_t ) bytesReceived;
 800b670:	69fb      	ldr	r3, [r7, #28]
 800b672:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b674:	4413      	add	r3, r2
 800b676:	627b      	str	r3, [r7, #36]	; 0x24

            elapsedTimeMs = calculateElapsedTime( getTimeStampMs(), entryTimeMs );
 800b678:	693b      	ldr	r3, [r7, #16]
 800b67a:	4798      	blx	r3
 800b67c:	4603      	mov	r3, r0
 800b67e:	69b9      	ldr	r1, [r7, #24]
 800b680:	4618      	mov	r0, r3
 800b682:	f7ff feb5 	bl	800b3f0 <calculateElapsedTime>
 800b686:	6178      	str	r0, [r7, #20]

            /* Check for timeout. */
            if( elapsedTimeMs >= timeoutMs )
 800b688:	697a      	ldr	r2, [r7, #20]
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	429a      	cmp	r2, r3
 800b68e:	d302      	bcc.n	800b696 <discardPacket+0xc2>
            {
                LogError( ( "Time expired while discarding packet." ) );
                receiveError = true;
 800b690:	2301      	movs	r3, #1
 800b692:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while( ( totalBytesReceived < remainingLength ) && ( receiveError == false ) )
 800b696:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b698:	68bb      	ldr	r3, [r7, #8]
 800b69a:	429a      	cmp	r2, r3
 800b69c:	d206      	bcs.n	800b6ac <discardPacket+0xd8>
 800b69e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b6a2:	f083 0301 	eor.w	r3, r3, #1
 800b6a6:	b2db      	uxtb	r3, r3
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	d1ca      	bne.n	800b642 <discardPacket+0x6e>
            }
        }
    }

    if( totalBytesReceived == remainingLength )
 800b6ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b6ae:	68bb      	ldr	r3, [r7, #8]
 800b6b0:	429a      	cmp	r2, r3
 800b6b2:	d102      	bne.n	800b6ba <discardPacket+0xe6>
    {
        LogError( ( "Dumped packet. DumpedBytes=%lu.",
                    ( unsigned long ) totalBytesReceived ) );
        /* Packet dumped, so no data is available. */
        status = MQTTNoDataAvailable;
 800b6b4:	2307      	movs	r3, #7
 800b6b6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }

    return status;
 800b6ba:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800b6be:	4618      	mov	r0, r3
 800b6c0:	3730      	adds	r7, #48	; 0x30
 800b6c2:	46bd      	mov	sp, r7
 800b6c4:	bd80      	pop	{r7, pc}
 800b6c6:	bf00      	nop
 800b6c8:	08013980 	.word	0x08013980
 800b6cc:	08014528 	.word	0x08014528
 800b6d0:	080138a4 	.word	0x080138a4
 800b6d4:	080139a4 	.word	0x080139a4

0800b6d8 <receivePacket>:
/*-----------------------------------------------------------*/

static MQTTStatus_t receivePacket( const MQTTContext_t * pContext,
                                   MQTTPacketInfo_t incomingPacket,
                                   uint32_t remainingTimeMs )
{
 800b6d8:	b084      	sub	sp, #16
 800b6da:	b580      	push	{r7, lr}
 800b6dc:	b086      	sub	sp, #24
 800b6de:	af00      	add	r7, sp, #0
 800b6e0:	6078      	str	r0, [r7, #4]
 800b6e2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800b6e6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    MQTTStatus_t status = MQTTSuccess;
 800b6ea:	2300      	movs	r3, #0
 800b6ec:	75fb      	strb	r3, [r7, #23]
    int32_t bytesReceived = 0;
 800b6ee:	2300      	movs	r3, #0
 800b6f0:	613b      	str	r3, [r7, #16]
    size_t bytesToReceive = 0U;
 800b6f2:	2300      	movs	r3, #0
 800b6f4:	60fb      	str	r3, [r7, #12]

    assert( pContext != NULL );
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	d106      	bne.n	800b70a <receivePacket+0x32>
 800b6fc:	4b1a      	ldr	r3, [pc, #104]	; (800b768 <receivePacket+0x90>)
 800b6fe:	4a1b      	ldr	r2, [pc, #108]	; (800b76c <receivePacket+0x94>)
 800b700:	f240 418e 	movw	r1, #1166	; 0x48e
 800b704:	481a      	ldr	r0, [pc, #104]	; (800b770 <receivePacket+0x98>)
 800b706:	f005 fe49 	bl	801139c <__assert_func>
    assert( pContext->networkBuffer.pBuffer != NULL );
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	6a1b      	ldr	r3, [r3, #32]
 800b70e:	2b00      	cmp	r3, #0
 800b710:	d106      	bne.n	800b720 <receivePacket+0x48>
 800b712:	4b18      	ldr	r3, [pc, #96]	; (800b774 <receivePacket+0x9c>)
 800b714:	4a15      	ldr	r2, [pc, #84]	; (800b76c <receivePacket+0x94>)
 800b716:	f240 418f 	movw	r1, #1167	; 0x48f
 800b71a:	4815      	ldr	r0, [pc, #84]	; (800b770 <receivePacket+0x98>)
 800b71c:	f005 fe3e 	bl	801139c <__assert_func>

    if( incomingPacket.remainingLength > pContext->networkBuffer.size )
 800b720:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b726:	429a      	cmp	r2, r3
 800b728:	d908      	bls.n	800b73c <receivePacket+0x64>
        LogError( ( "Incoming packet will be dumped: "
                    "Packet length exceeds network buffer size."
                    "PacketSize=%lu, NetworkBufferSize=%lu.",
                    ( unsigned long ) incomingPacket.remainingLength,
                    ( unsigned long ) pContext->networkBuffer.size ) );
        status = discardPacket( pContext,
 800b72a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b72c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b72e:	4619      	mov	r1, r3
 800b730:	6878      	ldr	r0, [r7, #4]
 800b732:	f7ff ff4f 	bl	800b5d4 <discardPacket>
 800b736:	4603      	mov	r3, r0
 800b738:	75fb      	strb	r3, [r7, #23]
 800b73a:	e00c      	b.n	800b756 <receivePacket+0x7e>
                                incomingPacket.remainingLength,
                                remainingTimeMs );
    }
    else
    {
        bytesToReceive = incomingPacket.remainingLength;
 800b73c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b73e:	60fb      	str	r3, [r7, #12]
        bytesReceived = recvExact( pContext, bytesToReceive );
 800b740:	68f9      	ldr	r1, [r7, #12]
 800b742:	6878      	ldr	r0, [r7, #4]
 800b744:	f7ff fe94 	bl	800b470 <recvExact>
 800b748:	6138      	str	r0, [r7, #16]

        if( bytesReceived == ( int32_t ) bytesToReceive )
 800b74a:	68fb      	ldr	r3, [r7, #12]
 800b74c:	693a      	ldr	r2, [r7, #16]
 800b74e:	429a      	cmp	r2, r3
 800b750:	d001      	beq.n	800b756 <receivePacket+0x7e>
        {
            LogError( ( "Packet reception failed. ReceivedBytes=%ld, "
                        "ExpectedBytes=%lu.",
                        ( long int ) bytesReceived,
                        ( unsigned long ) bytesToReceive ) );
            status = MQTTRecvFailed;
 800b752:	2304      	movs	r3, #4
 800b754:	75fb      	strb	r3, [r7, #23]
        }
    }

    return status;
 800b756:	7dfb      	ldrb	r3, [r7, #23]
}
 800b758:	4618      	mov	r0, r3
 800b75a:	3718      	adds	r7, #24
 800b75c:	46bd      	mov	sp, r7
 800b75e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b762:	b004      	add	sp, #16
 800b764:	4770      	bx	lr
 800b766:	bf00      	nop
 800b768:	08013980 	.word	0x08013980
 800b76c:	08014538 	.word	0x08014538
 800b770:	080138a4 	.word	0x080138a4
 800b774:	08013abc 	.word	0x08013abc

0800b778 <getAckTypeToSend>:

/*-----------------------------------------------------------*/

static uint8_t getAckTypeToSend( MQTTPublishState_t state )
{
 800b778:	b480      	push	{r7}
 800b77a:	b085      	sub	sp, #20
 800b77c:	af00      	add	r7, sp, #0
 800b77e:	4603      	mov	r3, r0
 800b780:	71fb      	strb	r3, [r7, #7]
    uint8_t packetTypeByte = 0U;
 800b782:	2300      	movs	r3, #0
 800b784:	73fb      	strb	r3, [r7, #15]

    switch( state )
 800b786:	79fb      	ldrb	r3, [r7, #7]
 800b788:	3b02      	subs	r3, #2
 800b78a:	2b03      	cmp	r3, #3
 800b78c:	d816      	bhi.n	800b7bc <getAckTypeToSend+0x44>
 800b78e:	a201      	add	r2, pc, #4	; (adr r2, 800b794 <getAckTypeToSend+0x1c>)
 800b790:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b794:	0800b7a5 	.word	0x0800b7a5
 800b798:	0800b7ab 	.word	0x0800b7ab
 800b79c:	0800b7b1 	.word	0x0800b7b1
 800b7a0:	0800b7b7 	.word	0x0800b7b7
    {
        case MQTTPubAckSend:
            packetTypeByte = MQTT_PACKET_TYPE_PUBACK;
 800b7a4:	2340      	movs	r3, #64	; 0x40
 800b7a6:	73fb      	strb	r3, [r7, #15]
            break;
 800b7a8:	e009      	b.n	800b7be <getAckTypeToSend+0x46>

        case MQTTPubRecSend:
            packetTypeByte = MQTT_PACKET_TYPE_PUBREC;
 800b7aa:	2350      	movs	r3, #80	; 0x50
 800b7ac:	73fb      	strb	r3, [r7, #15]
            break;
 800b7ae:	e006      	b.n	800b7be <getAckTypeToSend+0x46>

        case MQTTPubRelSend:
            packetTypeByte = MQTT_PACKET_TYPE_PUBREL;
 800b7b0:	2362      	movs	r3, #98	; 0x62
 800b7b2:	73fb      	strb	r3, [r7, #15]
            break;
 800b7b4:	e003      	b.n	800b7be <getAckTypeToSend+0x46>

        case MQTTPubCompSend:
            packetTypeByte = MQTT_PACKET_TYPE_PUBCOMP;
 800b7b6:	2370      	movs	r3, #112	; 0x70
 800b7b8:	73fb      	strb	r3, [r7, #15]
            break;
 800b7ba:	e000      	b.n	800b7be <getAckTypeToSend+0x46>
        case MQTTPublishDone:
        case MQTTPublishSend:
        case MQTTStateNull:
        default:
            /* Take no action for states that do not require sending an ack. */
            break;
 800b7bc:	bf00      	nop
    }

    return packetTypeByte;
 800b7be:	7bfb      	ldrb	r3, [r7, #15]
}
 800b7c0:	4618      	mov	r0, r3
 800b7c2:	3714      	adds	r7, #20
 800b7c4:	46bd      	mov	sp, r7
 800b7c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ca:	4770      	bx	lr

0800b7cc <sendPublishAcks>:
/*-----------------------------------------------------------*/

static MQTTStatus_t sendPublishAcks( MQTTContext_t * pContext,
                                     uint16_t packetId,
                                     MQTTPublishState_t publishState )
{
 800b7cc:	b580      	push	{r7, lr}
 800b7ce:	b08a      	sub	sp, #40	; 0x28
 800b7d0:	af02      	add	r7, sp, #8
 800b7d2:	6078      	str	r0, [r7, #4]
 800b7d4:	460b      	mov	r3, r1
 800b7d6:	807b      	strh	r3, [r7, #2]
 800b7d8:	4613      	mov	r3, r2
 800b7da:	707b      	strb	r3, [r7, #1]
    MQTTStatus_t status = MQTTSuccess;
 800b7dc:	2300      	movs	r3, #0
 800b7de:	77fb      	strb	r3, [r7, #31]
    MQTTPublishState_t newState = MQTTStateNull;
 800b7e0:	2300      	movs	r3, #0
 800b7e2:	757b      	strb	r3, [r7, #21]
    int32_t sendResult = 0;
 800b7e4:	2300      	movs	r3, #0
 800b7e6:	61bb      	str	r3, [r7, #24]
    uint8_t packetTypeByte = 0U;
 800b7e8:	2300      	movs	r3, #0
 800b7ea:	75fb      	strb	r3, [r7, #23]
    MQTTPubAckType_t packetType;
    MQTTFixedBuffer_t localBuffer;
    uint8_t pubAckPacket[ MQTT_PUBLISH_ACK_PACKET_SIZE ];

    localBuffer.pBuffer = pubAckPacket;
 800b7ec:	f107 0308 	add.w	r3, r7, #8
 800b7f0:	60fb      	str	r3, [r7, #12]
    localBuffer.size = MQTT_PUBLISH_ACK_PACKET_SIZE;
 800b7f2:	2304      	movs	r3, #4
 800b7f4:	613b      	str	r3, [r7, #16]

    assert( pContext != NULL );
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	2b00      	cmp	r3, #0
 800b7fa:	d106      	bne.n	800b80a <sendPublishAcks+0x3e>
 800b7fc:	4b21      	ldr	r3, [pc, #132]	; (800b884 <sendPublishAcks+0xb8>)
 800b7fe:	4a22      	ldr	r2, [pc, #136]	; (800b888 <sendPublishAcks+0xbc>)
 800b800:	f240 41ec 	movw	r1, #1260	; 0x4ec
 800b804:	4821      	ldr	r0, [pc, #132]	; (800b88c <sendPublishAcks+0xc0>)
 800b806:	f005 fdc9 	bl	801139c <__assert_func>

    packetTypeByte = getAckTypeToSend( publishState );
 800b80a:	787b      	ldrb	r3, [r7, #1]
 800b80c:	4618      	mov	r0, r3
 800b80e:	f7ff ffb3 	bl	800b778 <getAckTypeToSend>
 800b812:	4603      	mov	r3, r0
 800b814:	75fb      	strb	r3, [r7, #23]

    if( packetTypeByte != 0U )
 800b816:	7dfb      	ldrb	r3, [r7, #23]
 800b818:	2b00      	cmp	r3, #0
 800b81a:	d02d      	beq.n	800b878 <sendPublishAcks+0xac>
    {
        packetType = getAckFromPacketType( packetTypeByte );
 800b81c:	7dfb      	ldrb	r3, [r7, #23]
 800b81e:	4618      	mov	r0, r3
 800b820:	f7ff fdf4 	bl	800b40c <getAckFromPacketType>
 800b824:	4603      	mov	r3, r0
 800b826:	75bb      	strb	r3, [r7, #22]

        status = MQTT_SerializeAck( &localBuffer,
 800b828:	887a      	ldrh	r2, [r7, #2]
 800b82a:	7df9      	ldrb	r1, [r7, #23]
 800b82c:	f107 030c 	add.w	r3, r7, #12
 800b830:	4618      	mov	r0, r3
 800b832:	f001 f980 	bl	800cb36 <MQTT_SerializeAck>
 800b836:	4603      	mov	r3, r0
 800b838:	77fb      	strb	r3, [r7, #31]
                                    packetTypeByte,
                                    packetId );

        if( status == MQTTSuccess )
 800b83a:	7ffb      	ldrb	r3, [r7, #31]
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	d106      	bne.n	800b84e <sendPublishAcks+0x82>
            MQTT_PRE_SEND_HOOK( pContext );

            /* Here, we are not using the vector approach for efficiency. There is just one buffer
             * to be sent which can be achieved with a normal send call. */
            sendResult = sendBuffer( pContext,
                                     localBuffer.pBuffer,
 800b840:	68fb      	ldr	r3, [r7, #12]
            sendResult = sendBuffer( pContext,
 800b842:	2204      	movs	r2, #4
 800b844:	4619      	mov	r1, r3
 800b846:	6878      	ldr	r0, [r7, #4]
 800b848:	f7ff fd44 	bl	800b2d4 <sendBuffer>
 800b84c:	61b8      	str	r0, [r7, #24]
                                     MQTT_PUBLISH_ACK_PACKET_SIZE );

            MQTT_POST_SEND_HOOK( pContext );
        }

        if( sendResult == ( int32_t ) MQTT_PUBLISH_ACK_PACKET_SIZE )
 800b84e:	69bb      	ldr	r3, [r7, #24]
 800b850:	2b04      	cmp	r3, #4
 800b852:	d10f      	bne.n	800b874 <sendPublishAcks+0xa8>
        {
            pContext->controlPacketSent = true;
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	2201      	movs	r2, #1
 800b858:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

            MQTT_PRE_STATE_UPDATE_HOOK( pContext );

            status = MQTT_UpdateStateAck( pContext,
 800b85c:	7dba      	ldrb	r2, [r7, #22]
 800b85e:	8879      	ldrh	r1, [r7, #2]
 800b860:	f107 0315 	add.w	r3, r7, #21
 800b864:	9300      	str	r3, [sp, #0]
 800b866:	2300      	movs	r3, #0
 800b868:	6878      	ldr	r0, [r7, #4]
 800b86a:	f001 ff7d 	bl	800d768 <MQTT_UpdateStateAck>
 800b86e:	4603      	mov	r3, r0
 800b870:	77fb      	strb	r3, [r7, #31]
 800b872:	e001      	b.n	800b878 <sendPublishAcks+0xac>
        {
            LogError( ( "Failed to send ACK packet: PacketType=%02x, SentBytes=%ld, "
                        "PacketSize=%lu.",
                        ( unsigned int ) packetTypeByte, ( long int ) sendResult,
                        MQTT_PUBLISH_ACK_PACKET_SIZE ) );
            status = MQTTSendFailed;
 800b874:	2303      	movs	r3, #3
 800b876:	77fb      	strb	r3, [r7, #31]
        }
    }

    return status;
 800b878:	7ffb      	ldrb	r3, [r7, #31]
}
 800b87a:	4618      	mov	r0, r3
 800b87c:	3720      	adds	r7, #32
 800b87e:	46bd      	mov	sp, r7
 800b880:	bd80      	pop	{r7, pc}
 800b882:	bf00      	nop
 800b884:	08013980 	.word	0x08013980
 800b888:	08014548 	.word	0x08014548
 800b88c:	080138a4 	.word	0x080138a4

0800b890 <addEncodedStringToVector>:
static size_t addEncodedStringToVector( uint8_t serailizedLength[ 2 ],
                                        const char * const string,
                                        uint16_t length,
                                        TransportOutVector_t * iterator,
                                        size_t * updatedLength )
{
 800b890:	b580      	push	{r7, lr}
 800b892:	b088      	sub	sp, #32
 800b894:	af00      	add	r7, sp, #0
 800b896:	60f8      	str	r0, [r7, #12]
 800b898:	60b9      	str	r1, [r7, #8]
 800b89a:	603b      	str	r3, [r7, #0]
 800b89c:	4613      	mov	r3, r2
 800b89e:	80fb      	strh	r3, [r7, #6]
    size_t packetLength = 0U;
 800b8a0:	2300      	movs	r3, #0
 800b8a2:	61fb      	str	r3, [r7, #28]
    const size_t seralizedLengthFieldSize = 2U;
 800b8a4:	2302      	movs	r3, #2
 800b8a6:	617b      	str	r3, [r7, #20]
    TransportOutVector_t * pLocalIterator = iterator;
 800b8a8:	683b      	ldr	r3, [r7, #0]
 800b8aa:	613b      	str	r3, [r7, #16]
    /* This function always adds 2 vectors. */
    size_t vectorsAdded = 0U;
 800b8ac:	2300      	movs	r3, #0
 800b8ae:	61bb      	str	r3, [r7, #24]

    /* When length is non-zero, the string must be non-NULL. */
    assert( ( length != 0U ) == ( string != NULL ) );
 800b8b0:	88fb      	ldrh	r3, [r7, #6]
 800b8b2:	2b00      	cmp	r3, #0
 800b8b4:	bf0c      	ite	eq
 800b8b6:	2301      	moveq	r3, #1
 800b8b8:	2300      	movne	r3, #0
 800b8ba:	b2da      	uxtb	r2, r3
 800b8bc:	68bb      	ldr	r3, [r7, #8]
 800b8be:	2b00      	cmp	r3, #0
 800b8c0:	bf14      	ite	ne
 800b8c2:	2301      	movne	r3, #1
 800b8c4:	2300      	moveq	r3, #0
 800b8c6:	b2db      	uxtb	r3, r3
 800b8c8:	4053      	eors	r3, r2
 800b8ca:	b2db      	uxtb	r3, r3
 800b8cc:	2b00      	cmp	r3, #0
 800b8ce:	d106      	bne.n	800b8de <addEncodedStringToVector+0x4e>
 800b8d0:	4b1e      	ldr	r3, [pc, #120]	; (800b94c <addEncodedStringToVector+0xbc>)
 800b8d2:	4a1f      	ldr	r2, [pc, #124]	; (800b950 <addEncodedStringToVector+0xc0>)
 800b8d4:	f240 7139 	movw	r1, #1849	; 0x739
 800b8d8:	481e      	ldr	r0, [pc, #120]	; (800b954 <addEncodedStringToVector+0xc4>)
 800b8da:	f005 fd5f 	bl	801139c <__assert_func>

    serailizedLength[ 0 ] = ( ( uint8_t ) ( ( length ) >> 8 ) );
 800b8de:	88fb      	ldrh	r3, [r7, #6]
 800b8e0:	0a1b      	lsrs	r3, r3, #8
 800b8e2:	b29b      	uxth	r3, r3
 800b8e4:	b2da      	uxtb	r2, r3
 800b8e6:	68fb      	ldr	r3, [r7, #12]
 800b8e8:	701a      	strb	r2, [r3, #0]
    serailizedLength[ 1 ] = ( ( uint8_t ) ( ( length ) & 0x00ffU ) );
 800b8ea:	68fb      	ldr	r3, [r7, #12]
 800b8ec:	3301      	adds	r3, #1
 800b8ee:	88fa      	ldrh	r2, [r7, #6]
 800b8f0:	b2d2      	uxtb	r2, r2
 800b8f2:	701a      	strb	r2, [r3, #0]

    /* Add the serialized length of the string first. */
    pLocalIterator[ 0 ].iov_base = serailizedLength;
 800b8f4:	693b      	ldr	r3, [r7, #16]
 800b8f6:	68fa      	ldr	r2, [r7, #12]
 800b8f8:	601a      	str	r2, [r3, #0]
    pLocalIterator[ 0 ].iov_len = seralizedLengthFieldSize;
 800b8fa:	693b      	ldr	r3, [r7, #16]
 800b8fc:	697a      	ldr	r2, [r7, #20]
 800b8fe:	605a      	str	r2, [r3, #4]
    vectorsAdded++;
 800b900:	69bb      	ldr	r3, [r7, #24]
 800b902:	3301      	adds	r3, #1
 800b904:	61bb      	str	r3, [r7, #24]
    packetLength = seralizedLengthFieldSize;
 800b906:	697b      	ldr	r3, [r7, #20]
 800b908:	61fb      	str	r3, [r7, #28]

    /* Sometimes the string can be NULL that is, of 0 length. In that case,
     * only the length field should be encoded in the vector. */
    if( ( string != NULL ) && ( length != 0U ) )
 800b90a:	68bb      	ldr	r3, [r7, #8]
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	d011      	beq.n	800b934 <addEncodedStringToVector+0xa4>
 800b910:	88fb      	ldrh	r3, [r7, #6]
 800b912:	2b00      	cmp	r3, #0
 800b914:	d00e      	beq.n	800b934 <addEncodedStringToVector+0xa4>
    {
        /* Then add the pointer to the string itself. */
        pLocalIterator[ 1 ].iov_base = string;
 800b916:	693b      	ldr	r3, [r7, #16]
 800b918:	3308      	adds	r3, #8
 800b91a:	68ba      	ldr	r2, [r7, #8]
 800b91c:	601a      	str	r2, [r3, #0]
        pLocalIterator[ 1 ].iov_len = length;
 800b91e:	693b      	ldr	r3, [r7, #16]
 800b920:	3308      	adds	r3, #8
 800b922:	88fa      	ldrh	r2, [r7, #6]
 800b924:	605a      	str	r2, [r3, #4]
        vectorsAdded++;
 800b926:	69bb      	ldr	r3, [r7, #24]
 800b928:	3301      	adds	r3, #1
 800b92a:	61bb      	str	r3, [r7, #24]
        packetLength += length;
 800b92c:	88fb      	ldrh	r3, [r7, #6]
 800b92e:	69fa      	ldr	r2, [r7, #28]
 800b930:	4413      	add	r3, r2
 800b932:	61fb      	str	r3, [r7, #28]
    }

    ( *updatedLength ) = ( *updatedLength ) + packetLength;
 800b934:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b936:	681a      	ldr	r2, [r3, #0]
 800b938:	69fb      	ldr	r3, [r7, #28]
 800b93a:	441a      	add	r2, r3
 800b93c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b93e:	601a      	str	r2, [r3, #0]

    return vectorsAdded;
 800b940:	69bb      	ldr	r3, [r7, #24]
}
 800b942:	4618      	mov	r0, r3
 800b944:	3720      	adds	r7, #32
 800b946:	46bd      	mov	sp, r7
 800b948:	bd80      	pop	{r7, pc}
 800b94a:	bf00      	nop
 800b94c:	08013b88 	.word	0x08013b88
 800b950:	08014558 	.word	0x08014558
 800b954:	080138a4 	.word	0x080138a4

0800b958 <sendPublishWithoutCopy>:
static MQTTStatus_t sendPublishWithoutCopy( MQTTContext_t * pContext,
                                            const MQTTPublishInfo_t * pPublishInfo,
                                            const uint8_t * pMqttHeader,
                                            size_t headerSize,
                                            uint16_t packetId )
{
 800b958:	b580      	push	{r7, lr}
 800b95a:	b092      	sub	sp, #72	; 0x48
 800b95c:	af00      	add	r7, sp, #0
 800b95e:	60f8      	str	r0, [r7, #12]
 800b960:	60b9      	str	r1, [r7, #8]
 800b962:	607a      	str	r2, [r7, #4]
 800b964:	603b      	str	r3, [r7, #0]
    MQTTStatus_t status = MQTTSuccess;
 800b966:	2300      	movs	r3, #0
 800b968:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    uint8_t serializedPacketID[ 2 ];
    TransportOutVector_t pIoVector[ 4 ];
    size_t ioVectorLength;
    size_t totalMessageLength;
    const size_t packetIDLength = 2U;
 800b96c:	2302      	movs	r3, #2
 800b96e:	63bb      	str	r3, [r7, #56]	; 0x38

    /* The header is sent first. */
    pIoVector[ 0U ].iov_base = pMqttHeader;
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	617b      	str	r3, [r7, #20]
    pIoVector[ 0U ].iov_len = headerSize;
 800b974:	683b      	ldr	r3, [r7, #0]
 800b976:	61bb      	str	r3, [r7, #24]
    totalMessageLength = headerSize;
 800b978:	683b      	ldr	r3, [r7, #0]
 800b97a:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Then the topic name has to be sent. */
    pIoVector[ 1U ].iov_base = pPublishInfo->pTopicName;
 800b97c:	68bb      	ldr	r3, [r7, #8]
 800b97e:	685b      	ldr	r3, [r3, #4]
 800b980:	61fb      	str	r3, [r7, #28]
    pIoVector[ 1U ].iov_len = pPublishInfo->topicNameLength;
 800b982:	68bb      	ldr	r3, [r7, #8]
 800b984:	891b      	ldrh	r3, [r3, #8]
 800b986:	623b      	str	r3, [r7, #32]
    totalMessageLength += pPublishInfo->topicNameLength;
 800b988:	68bb      	ldr	r3, [r7, #8]
 800b98a:	891b      	ldrh	r3, [r3, #8]
 800b98c:	461a      	mov	r2, r3
 800b98e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b990:	4413      	add	r3, r2
 800b992:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* The next field's index should be 2 as the first two fields
     * have been filled in. */
    ioVectorLength = 2U;
 800b994:	2302      	movs	r3, #2
 800b996:	643b      	str	r3, [r7, #64]	; 0x40

    if( pPublishInfo->qos > MQTTQoS0 )
 800b998:	68bb      	ldr	r3, [r7, #8]
 800b99a:	781b      	ldrb	r3, [r3, #0]
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	d021      	beq.n	800b9e4 <sendPublishWithoutCopy+0x8c>
    {
        /* Encode the packet ID. */
        serializedPacketID[ 0 ] = ( ( uint8_t ) ( ( packetId ) >> 8 ) );
 800b9a0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800b9a4:	0a1b      	lsrs	r3, r3, #8
 800b9a6:	b29b      	uxth	r3, r3
 800b9a8:	b2db      	uxtb	r3, r3
 800b9aa:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
        serializedPacketID[ 1 ] = ( ( uint8_t ) ( ( packetId ) & 0x00ffU ) );
 800b9ae:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800b9b2:	b2db      	uxtb	r3, r3
 800b9b4:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

        pIoVector[ ioVectorLength ].iov_base = serializedPacketID;
 800b9b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b9ba:	00db      	lsls	r3, r3, #3
 800b9bc:	3348      	adds	r3, #72	; 0x48
 800b9be:	443b      	add	r3, r7
 800b9c0:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800b9c4:	f843 2c34 	str.w	r2, [r3, #-52]
        pIoVector[ ioVectorLength ].iov_len = packetIDLength;
 800b9c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b9ca:	00db      	lsls	r3, r3, #3
 800b9cc:	3348      	adds	r3, #72	; 0x48
 800b9ce:	443b      	add	r3, r7
 800b9d0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b9d2:	f843 2c30 	str.w	r2, [r3, #-48]

        ioVectorLength++;
 800b9d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b9d8:	3301      	adds	r3, #1
 800b9da:	643b      	str	r3, [r7, #64]	; 0x40
        totalMessageLength += packetIDLength;
 800b9dc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b9de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9e0:	4413      	add	r3, r2
 800b9e2:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

    /* Publish packets are allowed to contain no payload. */
    if( pPublishInfo->payloadLength > 0U )
 800b9e4:	68bb      	ldr	r3, [r7, #8]
 800b9e6:	691b      	ldr	r3, [r3, #16]
 800b9e8:	2b00      	cmp	r3, #0
 800b9ea:	d017      	beq.n	800ba1c <sendPublishWithoutCopy+0xc4>
    {
        pIoVector[ ioVectorLength ].iov_base = pPublishInfo->pPayload;
 800b9ec:	68bb      	ldr	r3, [r7, #8]
 800b9ee:	68da      	ldr	r2, [r3, #12]
 800b9f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b9f2:	00db      	lsls	r3, r3, #3
 800b9f4:	3348      	adds	r3, #72	; 0x48
 800b9f6:	443b      	add	r3, r7
 800b9f8:	f843 2c34 	str.w	r2, [r3, #-52]
        pIoVector[ ioVectorLength ].iov_len = pPublishInfo->payloadLength;
 800b9fc:	68bb      	ldr	r3, [r7, #8]
 800b9fe:	691a      	ldr	r2, [r3, #16]
 800ba00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ba02:	00db      	lsls	r3, r3, #3
 800ba04:	3348      	adds	r3, #72	; 0x48
 800ba06:	443b      	add	r3, r7
 800ba08:	f843 2c30 	str.w	r2, [r3, #-48]

        ioVectorLength++;
 800ba0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ba0e:	3301      	adds	r3, #1
 800ba10:	643b      	str	r3, [r7, #64]	; 0x40
        totalMessageLength += pPublishInfo->payloadLength;
 800ba12:	68bb      	ldr	r3, [r7, #8]
 800ba14:	691b      	ldr	r3, [r3, #16]
 800ba16:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ba18:	4413      	add	r3, r2
 800ba1a:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

    if( sendMessageVector( pContext, pIoVector, ioVectorLength ) != ( int32_t ) totalMessageLength )
 800ba1c:	f107 0314 	add.w	r3, r7, #20
 800ba20:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ba22:	4619      	mov	r1, r3
 800ba24:	68f8      	ldr	r0, [r7, #12]
 800ba26:	f7ff fb6f 	bl	800b108 <sendMessageVector>
 800ba2a:	4602      	mov	r2, r0
 800ba2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ba2e:	429a      	cmp	r2, r3
 800ba30:	d002      	beq.n	800ba38 <sendPublishWithoutCopy+0xe0>
    {
        status = MQTTSendFailed;
 800ba32:	2303      	movs	r3, #3
 800ba34:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }

    return status;
 800ba38:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800ba3c:	4618      	mov	r0, r3
 800ba3e:	3748      	adds	r7, #72	; 0x48
 800ba40:	46bd      	mov	sp, r7
 800ba42:	bd80      	pop	{r7, pc}

0800ba44 <sendConnectWithoutCopy>:

static MQTTStatus_t sendConnectWithoutCopy( MQTTContext_t * pContext,
                                            const MQTTConnectInfo_t * pConnectInfo,
                                            const MQTTPublishInfo_t * pWillInfo,
                                            size_t remainingLength )
{
 800ba44:	b580      	push	{r7, lr}
 800ba46:	b0ac      	sub	sp, #176	; 0xb0
 800ba48:	af02      	add	r7, sp, #8
 800ba4a:	60f8      	str	r0, [r7, #12]
 800ba4c:	60b9      	str	r1, [r7, #8]
 800ba4e:	607a      	str	r2, [r7, #4]
 800ba50:	603b      	str	r3, [r7, #0]
    MQTTStatus_t status = MQTTSuccess;
 800ba52:	2300      	movs	r3, #0
 800ba54:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
    TransportOutVector_t * iterator;
    size_t ioVectorLength = 0U;
 800ba58:	2300      	movs	r3, #0
 800ba5a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    size_t totalMessageLength = 0U;
 800ba5e:	2300      	movs	r3, #0
 800ba60:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    int32_t bytesSentOrError;

    /* Connect packet header can be of maximum 15 bytes. */
    uint8_t connectPacketHeader[ 15 ];
    uint8_t * pIndex = connectPacketHeader;
 800ba64:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800ba68:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    uint8_t serializedPayloadLength[ 2 ];
    uint8_t serializedUsernameLength[ 2 ];
    uint8_t serializedPasswordLength[ 2 ];
    size_t vectorsAdded;

    iterator = pIoVector;
 800ba6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ba70:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

    /* Validate arguments. */
    if( ( pWillInfo != NULL ) && ( pWillInfo->pTopicName == NULL ) )
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	d007      	beq.n	800ba8a <sendConnectWithoutCopy+0x46>
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	685b      	ldr	r3, [r3, #4]
 800ba7e:	2b00      	cmp	r3, #0
 800ba80:	d103      	bne.n	800ba8a <sendConnectWithoutCopy+0x46>
    {
        LogError( ( "pWillInfo->pTopicName cannot be NULL if Will is present." ) );
        status = MQTTBadParameter;
 800ba82:	2301      	movs	r3, #1
 800ba84:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 800ba88:	e0ec      	b.n	800bc64 <sendConnectWithoutCopy+0x220>
    }
    else
    {
        pIndex = MQTT_SerializeConnectFixedHeader( pIndex,
 800ba8a:	683b      	ldr	r3, [r7, #0]
 800ba8c:	687a      	ldr	r2, [r7, #4]
 800ba8e:	68b9      	ldr	r1, [r7, #8]
 800ba90:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 800ba94:	f000 ff3a 	bl	800c90c <MQTT_SerializeConnectFixedHeader>
 800ba98:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98
                                                   pConnectInfo,
                                                   pWillInfo,
                                                   remainingLength );

        assert( ( pIndex - connectPacketHeader ) <= 15 );
 800ba9c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800baa0:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800baa4:	1ad3      	subs	r3, r2, r3
 800baa6:	2b0f      	cmp	r3, #15
 800baa8:	dd06      	ble.n	800bab8 <sendConnectWithoutCopy+0x74>
 800baaa:	4b71      	ldr	r3, [pc, #452]	; (800bc70 <sendConnectWithoutCopy+0x22c>)
 800baac:	4a71      	ldr	r2, [pc, #452]	; (800bc74 <sendConnectWithoutCopy+0x230>)
 800baae:	f640 0172 	movw	r1, #2162	; 0x872
 800bab2:	4871      	ldr	r0, [pc, #452]	; (800bc78 <sendConnectWithoutCopy+0x234>)
 800bab4:	f005 fc72 	bl	801139c <__assert_func>

        /* The header gets sent first. */
        iterator->iov_base = connectPacketHeader;
 800bab8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800babc:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 800bac0:	601a      	str	r2, [r3, #0]
        /* More details at: https://github.com/FreeRTOS/coreMQTT/blob/main/MISRA.md#rule-182 */
        /* More details at: https://github.com/FreeRTOS/coreMQTT/blob/main/MISRA.md#rule-108 */
        /* coverity[misra_c_2012_rule_18_2_violation] */
        /* coverity[misra_c_2012_rule_10_8_violation] */
        iterator->iov_len = ( size_t ) ( pIndex - connectPacketHeader );
 800bac2:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800bac6:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800baca:	1ad3      	subs	r3, r2, r3
 800bacc:	461a      	mov	r2, r3
 800bace:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800bad2:	605a      	str	r2, [r3, #4]
        totalMessageLength += iterator->iov_len;
 800bad4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800bad8:	685a      	ldr	r2, [r3, #4]
 800bada:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bade:	4413      	add	r3, r2
 800bae0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
        iterator++;
 800bae4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800bae8:	3308      	adds	r3, #8
 800baea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        ioVectorLength++;
 800baee:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800baf2:	3301      	adds	r3, #1
 800baf4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

        /* Serialize the client ID. */
        vectorsAdded = addEncodedStringToVector( serializedClientIDLength,
 800baf8:	68bb      	ldr	r3, [r7, #8]
 800bafa:	6859      	ldr	r1, [r3, #4]
 800bafc:	68bb      	ldr	r3, [r7, #8]
 800bafe:	891a      	ldrh	r2, [r3, #8]
 800bb00:	f107 0020 	add.w	r0, r7, #32
 800bb04:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800bb08:	9300      	str	r3, [sp, #0]
 800bb0a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800bb0e:	f7ff febf 	bl	800b890 <addEncodedStringToVector>
 800bb12:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
                                                 pConnectInfo->clientIdentifierLength,
                                                 iterator,
                                                 &totalMessageLength );

        /* Update the iterator to point to the next empty slot. */
        iterator = &iterator[ vectorsAdded ];
 800bb16:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800bb1a:	00db      	lsls	r3, r3, #3
 800bb1c:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800bb20:	4413      	add	r3, r2
 800bb22:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        ioVectorLength += vectorsAdded;
 800bb26:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800bb2a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800bb2e:	4413      	add	r3, r2
 800bb30:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

        if( pWillInfo != NULL )
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	d03c      	beq.n	800bbb4 <sendConnectWithoutCopy+0x170>
        {
            /* Serialize the topic. */
            vectorsAdded = addEncodedStringToVector( serializedTopicLength,
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	6859      	ldr	r1, [r3, #4]
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	891a      	ldrh	r2, [r3, #8]
 800bb42:	f107 001c 	add.w	r0, r7, #28
 800bb46:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800bb4a:	9300      	str	r3, [sp, #0]
 800bb4c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800bb50:	f7ff fe9e 	bl	800b890 <addEncodedStringToVector>
 800bb54:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
                                                     pWillInfo->topicNameLength,
                                                     iterator,
                                                     &totalMessageLength );

            /* Update the iterator to point to the next empty slot. */
            iterator = &iterator[ vectorsAdded ];
 800bb58:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800bb5c:	00db      	lsls	r3, r3, #3
 800bb5e:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800bb62:	4413      	add	r3, r2
 800bb64:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
            ioVectorLength += vectorsAdded;
 800bb68:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800bb6c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800bb70:	4413      	add	r3, r2
 800bb72:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c


            /* Serialize the payload. Payload of last will and testament can be NULL. */
            vectorsAdded = addEncodedStringToVector( serializedPayloadLength,
                                                     pWillInfo->pPayload,
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	68d9      	ldr	r1, [r3, #12]
                                                     ( uint16_t ) pWillInfo->payloadLength,
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	691b      	ldr	r3, [r3, #16]
            vectorsAdded = addEncodedStringToVector( serializedPayloadLength,
 800bb7e:	b29a      	uxth	r2, r3
 800bb80:	f107 0018 	add.w	r0, r7, #24
 800bb84:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800bb88:	9300      	str	r3, [sp, #0]
 800bb8a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800bb8e:	f7ff fe7f 	bl	800b890 <addEncodedStringToVector>
 800bb92:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
                                                     iterator,
                                                     &totalMessageLength );

            /* Update the iterator to point to the next empty slot. */
            iterator = &iterator[ vectorsAdded ];
 800bb96:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800bb9a:	00db      	lsls	r3, r3, #3
 800bb9c:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800bba0:	4413      	add	r3, r2
 800bba2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
            ioVectorLength += vectorsAdded;
 800bba6:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800bbaa:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800bbae:	4413      	add	r3, r2
 800bbb0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        }

        /* Encode the user name if provided. */
        if( pConnectInfo->pUserName != NULL )
 800bbb4:	68bb      	ldr	r3, [r7, #8]
 800bbb6:	68db      	ldr	r3, [r3, #12]
 800bbb8:	2b00      	cmp	r3, #0
 800bbba:	d01d      	beq.n	800bbf8 <sendConnectWithoutCopy+0x1b4>
        {
            /* Serialize the user name string. */
            vectorsAdded = addEncodedStringToVector( serializedUsernameLength,
 800bbbc:	68bb      	ldr	r3, [r7, #8]
 800bbbe:	68d9      	ldr	r1, [r3, #12]
 800bbc0:	68bb      	ldr	r3, [r7, #8]
 800bbc2:	8a1a      	ldrh	r2, [r3, #16]
 800bbc4:	f107 0014 	add.w	r0, r7, #20
 800bbc8:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800bbcc:	9300      	str	r3, [sp, #0]
 800bbce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800bbd2:	f7ff fe5d 	bl	800b890 <addEncodedStringToVector>
 800bbd6:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
                                                     pConnectInfo->userNameLength,
                                                     iterator,
                                                     &totalMessageLength );

            /* Update the iterator to point to the next empty slot. */
            iterator = &iterator[ vectorsAdded ];
 800bbda:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800bbde:	00db      	lsls	r3, r3, #3
 800bbe0:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800bbe4:	4413      	add	r3, r2
 800bbe6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
            ioVectorLength += vectorsAdded;
 800bbea:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800bbee:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800bbf2:	4413      	add	r3, r2
 800bbf4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        }

        /* Encode the password if provided. */
        if( pConnectInfo->pPassword != NULL )
 800bbf8:	68bb      	ldr	r3, [r7, #8]
 800bbfa:	695b      	ldr	r3, [r3, #20]
 800bbfc:	2b00      	cmp	r3, #0
 800bbfe:	d01d      	beq.n	800bc3c <sendConnectWithoutCopy+0x1f8>
        {
            /* Serialize the user name string. */
            vectorsAdded = addEncodedStringToVector( serializedPasswordLength,
 800bc00:	68bb      	ldr	r3, [r7, #8]
 800bc02:	6959      	ldr	r1, [r3, #20]
 800bc04:	68bb      	ldr	r3, [r7, #8]
 800bc06:	8b1a      	ldrh	r2, [r3, #24]
 800bc08:	f107 0010 	add.w	r0, r7, #16
 800bc0c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800bc10:	9300      	str	r3, [sp, #0]
 800bc12:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800bc16:	f7ff fe3b 	bl	800b890 <addEncodedStringToVector>
 800bc1a:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
                                                     pConnectInfo->pPassword,
                                                     pConnectInfo->passwordLength,
                                                     iterator,
                                                     &totalMessageLength );
            /* Update the iterator to point to the next empty slot. */
            iterator = &iterator[ vectorsAdded ];
 800bc1e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800bc22:	00db      	lsls	r3, r3, #3
 800bc24:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800bc28:	4413      	add	r3, r2
 800bc2a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
            ioVectorLength += vectorsAdded;
 800bc2e:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800bc32:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800bc36:	4413      	add	r3, r2
 800bc38:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        }

        bytesSentOrError = sendMessageVector( pContext, pIoVector, ioVectorLength );
 800bc3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bc40:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800bc44:	4619      	mov	r1, r3
 800bc46:	68f8      	ldr	r0, [r7, #12]
 800bc48:	f7ff fa5e 	bl	800b108 <sendMessageVector>
 800bc4c:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90

        if( bytesSentOrError != ( int32_t ) totalMessageLength )
 800bc50:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bc54:	461a      	mov	r2, r3
 800bc56:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800bc5a:	4293      	cmp	r3, r2
 800bc5c:	d002      	beq.n	800bc64 <sendConnectWithoutCopy+0x220>
        {
            status = MQTTSendFailed;
 800bc5e:	2303      	movs	r3, #3
 800bc60:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
        }
    }

    return status;
 800bc64:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
}
 800bc68:	4618      	mov	r0, r3
 800bc6a:	37a8      	adds	r7, #168	; 0xa8
 800bc6c:	46bd      	mov	sp, r7
 800bc6e:	bd80      	pop	{r7, pc}
 800bc70:	08013c28 	.word	0x08013c28
 800bc74:	08014574 	.word	0x08014574
 800bc78:	080138a4 	.word	0x080138a4

0800bc7c <receiveConnack>:
static MQTTStatus_t receiveConnack( const MQTTContext_t * pContext,
                                    uint32_t timeoutMs,
                                    bool cleanSession,
                                    MQTTPacketInfo_t * pIncomingPacket,
                                    bool * pSessionPresent )
{
 800bc7c:	b580      	push	{r7, lr}
 800bc7e:	b08c      	sub	sp, #48	; 0x30
 800bc80:	af02      	add	r7, sp, #8
 800bc82:	60f8      	str	r0, [r7, #12]
 800bc84:	60b9      	str	r1, [r7, #8]
 800bc86:	603b      	str	r3, [r7, #0]
 800bc88:	4613      	mov	r3, r2
 800bc8a:	71fb      	strb	r3, [r7, #7]
    MQTTStatus_t status = MQTTSuccess;
 800bc8c:	2300      	movs	r3, #0
 800bc8e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    MQTTGetCurrentTimeFunc_t getTimeStamp = NULL;
 800bc92:	2300      	movs	r3, #0
 800bc94:	61bb      	str	r3, [r7, #24]
    uint32_t entryTimeMs = 0U, remainingTimeMs = 0U, timeTakenMs = 0U;
 800bc96:	2300      	movs	r3, #0
 800bc98:	617b      	str	r3, [r7, #20]
 800bc9a:	2300      	movs	r3, #0
 800bc9c:	623b      	str	r3, [r7, #32]
 800bc9e:	2300      	movs	r3, #0
 800bca0:	613b      	str	r3, [r7, #16]
    bool breakFromLoop = false;
 800bca2:	2300      	movs	r3, #0
 800bca4:	77fb      	strb	r3, [r7, #31]
    uint16_t loopCount = 0U;
 800bca6:	2300      	movs	r3, #0
 800bca8:	83bb      	strh	r3, [r7, #28]

    assert( pContext != NULL );
 800bcaa:	68fb      	ldr	r3, [r7, #12]
 800bcac:	2b00      	cmp	r3, #0
 800bcae:	d106      	bne.n	800bcbe <receiveConnack+0x42>
 800bcb0:	4b4e      	ldr	r3, [pc, #312]	; (800bdec <receiveConnack+0x170>)
 800bcb2:	4a4f      	ldr	r2, [pc, #316]	; (800bdf0 <receiveConnack+0x174>)
 800bcb4:	f640 01da 	movw	r1, #2266	; 0x8da
 800bcb8:	484e      	ldr	r0, [pc, #312]	; (800bdf4 <receiveConnack+0x178>)
 800bcba:	f005 fb6f 	bl	801139c <__assert_func>
    assert( pIncomingPacket != NULL );
 800bcbe:	683b      	ldr	r3, [r7, #0]
 800bcc0:	2b00      	cmp	r3, #0
 800bcc2:	d106      	bne.n	800bcd2 <receiveConnack+0x56>
 800bcc4:	4b4c      	ldr	r3, [pc, #304]	; (800bdf8 <receiveConnack+0x17c>)
 800bcc6:	4a4a      	ldr	r2, [pc, #296]	; (800bdf0 <receiveConnack+0x174>)
 800bcc8:	f640 01db 	movw	r1, #2267	; 0x8db
 800bccc:	4849      	ldr	r0, [pc, #292]	; (800bdf4 <receiveConnack+0x178>)
 800bcce:	f005 fb65 	bl	801139c <__assert_func>
    assert( pContext->getTime != NULL );
 800bcd2:	68fb      	ldr	r3, [r7, #12]
 800bcd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bcd6:	2b00      	cmp	r3, #0
 800bcd8:	d106      	bne.n	800bce8 <receiveConnack+0x6c>
 800bcda:	4b48      	ldr	r3, [pc, #288]	; (800bdfc <receiveConnack+0x180>)
 800bcdc:	4a44      	ldr	r2, [pc, #272]	; (800bdf0 <receiveConnack+0x174>)
 800bcde:	f640 01dc 	movw	r1, #2268	; 0x8dc
 800bce2:	4844      	ldr	r0, [pc, #272]	; (800bdf4 <receiveConnack+0x178>)
 800bce4:	f005 fb5a 	bl	801139c <__assert_func>

    getTimeStamp = pContext->getTime;
 800bce8:	68fb      	ldr	r3, [r7, #12]
 800bcea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bcec:	61bb      	str	r3, [r7, #24]

    /* Get the entry time for the function. */
    entryTimeMs = getTimeStamp();
 800bcee:	69bb      	ldr	r3, [r7, #24]
 800bcf0:	4798      	blx	r3
 800bcf2:	6178      	str	r0, [r7, #20]
    {
        /* Transport read for incoming CONNACK packet type and length.
         * MQTT_GetIncomingPacketTypeAndLength is a blocking call and it is
         * returned after a transport receive timeout, an error, or a successful
         * receive of packet type and length. */
        status = MQTT_GetIncomingPacketTypeAndLength( pContext->transportInterface.recv,
 800bcf4:	68fb      	ldr	r3, [r7, #12]
 800bcf6:	6918      	ldr	r0, [r3, #16]
 800bcf8:	68fb      	ldr	r3, [r7, #12]
 800bcfa:	69db      	ldr	r3, [r3, #28]
 800bcfc:	683a      	ldr	r2, [r7, #0]
 800bcfe:	4619      	mov	r1, r3
 800bd00:	f000 ffdf 	bl	800ccc2 <MQTT_GetIncomingPacketTypeAndLength>
 800bd04:	4603      	mov	r3, r0
 800bd06:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
         * 2. If timeoutMs is 0:
         *    Loop times out based on the maximum number of retries config
         *    MQTT_MAX_CONNACK_RECEIVE_RETRY_COUNT. This config will control
         *    maximum the number of retry attempts to read the CONNACK packet.
         *    A value of 0 for the config will try once to read CONNACK. */
        if( timeoutMs > 0U )
 800bd0a:	68bb      	ldr	r3, [r7, #8]
 800bd0c:	2b00      	cmp	r3, #0
 800bd0e:	d00e      	beq.n	800bd2e <receiveConnack+0xb2>
        {
            breakFromLoop = calculateElapsedTime( getTimeStamp(), entryTimeMs ) >= timeoutMs;
 800bd10:	69bb      	ldr	r3, [r7, #24]
 800bd12:	4798      	blx	r3
 800bd14:	4603      	mov	r3, r0
 800bd16:	6979      	ldr	r1, [r7, #20]
 800bd18:	4618      	mov	r0, r3
 800bd1a:	f7ff fb69 	bl	800b3f0 <calculateElapsedTime>
 800bd1e:	4602      	mov	r2, r0
 800bd20:	68bb      	ldr	r3, [r7, #8]
 800bd22:	4293      	cmp	r3, r2
 800bd24:	bf94      	ite	ls
 800bd26:	2301      	movls	r3, #1
 800bd28:	2300      	movhi	r3, #0
 800bd2a:	77fb      	strb	r3, [r7, #31]
 800bd2c:	e008      	b.n	800bd40 <receiveConnack+0xc4>
        }
        else
        {
            breakFromLoop = loopCount >= MQTT_MAX_CONNACK_RECEIVE_RETRY_COUNT;
 800bd2e:	8bbb      	ldrh	r3, [r7, #28]
 800bd30:	2b04      	cmp	r3, #4
 800bd32:	bf8c      	ite	hi
 800bd34:	2301      	movhi	r3, #1
 800bd36:	2300      	movls	r3, #0
 800bd38:	77fb      	strb	r3, [r7, #31]
            loopCount++;
 800bd3a:	8bbb      	ldrh	r3, [r7, #28]
 800bd3c:	3301      	adds	r3, #1
 800bd3e:	83bb      	strh	r3, [r7, #28]
        }

        /* Loop until there is data to read or if we have exceeded the timeout/retries. */
    } while( ( status == MQTTNoDataAvailable ) && ( breakFromLoop == false ) );
 800bd40:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bd44:	2b07      	cmp	r3, #7
 800bd46:	d105      	bne.n	800bd54 <receiveConnack+0xd8>
 800bd48:	7ffb      	ldrb	r3, [r7, #31]
 800bd4a:	f083 0301 	eor.w	r3, r3, #1
 800bd4e:	b2db      	uxtb	r3, r3
 800bd50:	2b00      	cmp	r3, #0
 800bd52:	d1cf      	bne.n	800bcf4 <receiveConnack+0x78>

    if( status == MQTTSuccess )
 800bd54:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bd58:	2b00      	cmp	r3, #0
 800bd5a:	d123      	bne.n	800bda4 <receiveConnack+0x128>
    {
        /* Time taken in this function so far. */
        timeTakenMs = calculateElapsedTime( getTimeStamp(), entryTimeMs );
 800bd5c:	69bb      	ldr	r3, [r7, #24]
 800bd5e:	4798      	blx	r3
 800bd60:	4603      	mov	r3, r0
 800bd62:	6979      	ldr	r1, [r7, #20]
 800bd64:	4618      	mov	r0, r3
 800bd66:	f7ff fb43 	bl	800b3f0 <calculateElapsedTime>
 800bd6a:	6138      	str	r0, [r7, #16]

        if( timeTakenMs < timeoutMs )
 800bd6c:	693a      	ldr	r2, [r7, #16]
 800bd6e:	68bb      	ldr	r3, [r7, #8]
 800bd70:	429a      	cmp	r2, r3
 800bd72:	d203      	bcs.n	800bd7c <receiveConnack+0x100>
        {
            /* Calculate remaining time for receiving the remainder of
             * the packet. */
            remainingTimeMs = timeoutMs - timeTakenMs;
 800bd74:	68ba      	ldr	r2, [r7, #8]
 800bd76:	693b      	ldr	r3, [r7, #16]
 800bd78:	1ad3      	subs	r3, r2, r3
 800bd7a:	623b      	str	r3, [r7, #32]
         * Invoking receivePacket with remainingTime as 0 would attempt to
         * recv from network once. If using retries, the remainder of the
         * CONNACK packet is tried to be read only once. Reading once would be
         * good as the packet type and remaining length was already read. Hence,
         * the probability of the remaining 2 bytes available to read is very high. */
        if( pIncomingPacket->type == MQTT_PACKET_TYPE_CONNACK )
 800bd7c:	683b      	ldr	r3, [r7, #0]
 800bd7e:	781b      	ldrb	r3, [r3, #0]
 800bd80:	2b20      	cmp	r3, #32
 800bd82:	d10c      	bne.n	800bd9e <receiveConnack+0x122>
        {
            status = receivePacket( pContext,
 800bd84:	683b      	ldr	r3, [r7, #0]
 800bd86:	6a3a      	ldr	r2, [r7, #32]
 800bd88:	9201      	str	r2, [sp, #4]
 800bd8a:	68da      	ldr	r2, [r3, #12]
 800bd8c:	9200      	str	r2, [sp, #0]
 800bd8e:	cb0e      	ldmia	r3, {r1, r2, r3}
 800bd90:	68f8      	ldr	r0, [r7, #12]
 800bd92:	f7ff fca1 	bl	800b6d8 <receivePacket>
 800bd96:	4603      	mov	r3, r0
 800bd98:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800bd9c:	e002      	b.n	800bda4 <receiveConnack+0x128>
        {
            LogError( ( "Incorrect packet type %X received while expecting"
                        " CONNACK(%X).",
                        ( unsigned int ) pIncomingPacket->type,
                        MQTT_PACKET_TYPE_CONNACK ) );
            status = MQTTBadResponse;
 800bd9e:	2305      	movs	r3, #5
 800bda0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
    }

    if( status == MQTTSuccess )
 800bda4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bda8:	2b00      	cmp	r3, #0
 800bdaa:	d10b      	bne.n	800bdc4 <receiveConnack+0x148>
    {
        /* Update the packet info pointer to the buffer read. */
        pIncomingPacket->pRemainingData = pContext->networkBuffer.pBuffer;
 800bdac:	68fb      	ldr	r3, [r7, #12]
 800bdae:	6a1a      	ldr	r2, [r3, #32]
 800bdb0:	683b      	ldr	r3, [r7, #0]
 800bdb2:	605a      	str	r2, [r3, #4]

        /* Deserialize CONNACK. */
        status = MQTT_DeserializeAck( pIncomingPacket, NULL, pSessionPresent );
 800bdb4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bdb6:	2100      	movs	r1, #0
 800bdb8:	6838      	ldr	r0, [r7, #0]
 800bdba:	f000 ff0f 	bl	800cbdc <MQTT_DeserializeAck>
 800bdbe:	4603      	mov	r3, r0
 800bdc0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If a clean session is requested, a session present should not be set by
     * broker. */
    if( status == MQTTSuccess )
 800bdc4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bdc8:	2b00      	cmp	r3, #0
 800bdca:	d109      	bne.n	800bde0 <receiveConnack+0x164>
    {
        if( ( cleanSession == true ) && ( *pSessionPresent == true ) )
 800bdcc:	79fb      	ldrb	r3, [r7, #7]
 800bdce:	2b00      	cmp	r3, #0
 800bdd0:	d006      	beq.n	800bde0 <receiveConnack+0x164>
 800bdd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdd4:	781b      	ldrb	r3, [r3, #0]
 800bdd6:	2b00      	cmp	r3, #0
 800bdd8:	d002      	beq.n	800bde0 <receiveConnack+0x164>
        {
            LogError( ( "Unexpected session present flag in CONNACK response from broker."
                        " CONNECT request with clean session was made with broker." ) );
            status = MQTTBadResponse;
 800bdda:	2305      	movs	r3, #5
 800bddc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    {
        LogError( ( "CONNACK recv failed with status = %s.",
                    MQTT_Status_strerror( status ) ) );
    }

    return status;
 800bde0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800bde4:	4618      	mov	r0, r3
 800bde6:	3728      	adds	r7, #40	; 0x28
 800bde8:	46bd      	mov	sp, r7
 800bdea:	bd80      	pop	{r7, pc}
 800bdec:	08013980 	.word	0x08013980
 800bdf0:	0801458c 	.word	0x0801458c
 800bdf4:	080138a4 	.word	0x080138a4
 800bdf8:	08013b50 	.word	0x08013b50
 800bdfc:	080139a4 	.word	0x080139a4

0800be00 <handleSessionResumption>:

/*-----------------------------------------------------------*/

static MQTTStatus_t handleSessionResumption( MQTTContext_t * pContext,
                                             bool sessionPresent )
{
 800be00:	b580      	push	{r7, lr}
 800be02:	b086      	sub	sp, #24
 800be04:	af00      	add	r7, sp, #0
 800be06:	6078      	str	r0, [r7, #4]
 800be08:	460b      	mov	r3, r1
 800be0a:	70fb      	strb	r3, [r7, #3]
    MQTTStatus_t status = MQTTSuccess;
 800be0c:	2300      	movs	r3, #0
 800be0e:	75fb      	strb	r3, [r7, #23]
    MQTTStateCursor_t cursor = MQTT_STATE_CURSOR_INITIALIZER;
 800be10:	2300      	movs	r3, #0
 800be12:	613b      	str	r3, [r7, #16]
    uint16_t packetId = MQTT_PACKET_ID_INVALID;
 800be14:	2300      	movs	r3, #0
 800be16:	82bb      	strh	r3, [r7, #20]
    MQTTPublishState_t state = MQTTStateNull;
 800be18:	2300      	movs	r3, #0
 800be1a:	73fb      	strb	r3, [r7, #15]

    assert( pContext != NULL );
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	2b00      	cmp	r3, #0
 800be20:	d106      	bne.n	800be30 <handleSessionResumption+0x30>
 800be22:	4b2c      	ldr	r3, [pc, #176]	; (800bed4 <handleSessionResumption+0xd4>)
 800be24:	4a2c      	ldr	r2, [pc, #176]	; (800bed8 <handleSessionResumption+0xd8>)
 800be26:	f640 1152 	movw	r1, #2386	; 0x952
 800be2a:	482c      	ldr	r0, [pc, #176]	; (800bedc <handleSessionResumption+0xdc>)
 800be2c:	f005 fab6 	bl	801139c <__assert_func>

    /* Reset the index and clear the buffer when a new session is established. */
    pContext->index = 0;
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	2200      	movs	r2, #0
 800be34:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) memset( pContext->networkBuffer.pBuffer, 0, pContext->networkBuffer.size );
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	6a18      	ldr	r0, [r3, #32]
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be3e:	461a      	mov	r2, r3
 800be40:	2100      	movs	r1, #0
 800be42:	f005 fc36 	bl	80116b2 <memset>

    if( sessionPresent == true )
 800be46:	78fb      	ldrb	r3, [r7, #3]
 800be48:	2b00      	cmp	r3, #0
 800be4a:	d023      	beq.n	800be94 <handleSessionResumption+0x94>
    {
        /* Get the next packet ID for which a PUBREL need to be resent. */
        packetId = MQTT_PubrelToResend( pContext, &cursor, &state );
 800be4c:	f107 020f 	add.w	r2, r7, #15
 800be50:	f107 0310 	add.w	r3, r7, #16
 800be54:	4619      	mov	r1, r3
 800be56:	6878      	ldr	r0, [r7, #4]
 800be58:	f001 fd01 	bl	800d85e <MQTT_PubrelToResend>
 800be5c:	4603      	mov	r3, r0
 800be5e:	82bb      	strh	r3, [r7, #20]

        /* Resend all the PUBREL acks after session is reestablished. */
        while( ( packetId != MQTT_PACKET_ID_INVALID ) &&
 800be60:	e011      	b.n	800be86 <handleSessionResumption+0x86>
               ( status == MQTTSuccess ) )
        {
            status = sendPublishAcks( pContext, packetId, state );
 800be62:	7bfa      	ldrb	r2, [r7, #15]
 800be64:	8abb      	ldrh	r3, [r7, #20]
 800be66:	4619      	mov	r1, r3
 800be68:	6878      	ldr	r0, [r7, #4]
 800be6a:	f7ff fcaf 	bl	800b7cc <sendPublishAcks>
 800be6e:	4603      	mov	r3, r0
 800be70:	75fb      	strb	r3, [r7, #23]

            packetId = MQTT_PubrelToResend( pContext, &cursor, &state );
 800be72:	f107 020f 	add.w	r2, r7, #15
 800be76:	f107 0310 	add.w	r3, r7, #16
 800be7a:	4619      	mov	r1, r3
 800be7c:	6878      	ldr	r0, [r7, #4]
 800be7e:	f001 fcee 	bl	800d85e <MQTT_PubrelToResend>
 800be82:	4603      	mov	r3, r0
 800be84:	82bb      	strh	r3, [r7, #20]
        while( ( packetId != MQTT_PACKET_ID_INVALID ) &&
 800be86:	8abb      	ldrh	r3, [r7, #20]
 800be88:	2b00      	cmp	r3, #0
 800be8a:	d01d      	beq.n	800bec8 <handleSessionResumption+0xc8>
 800be8c:	7dfb      	ldrb	r3, [r7, #23]
 800be8e:	2b00      	cmp	r3, #0
 800be90:	d0e7      	beq.n	800be62 <handleSessionResumption+0x62>
 800be92:	e019      	b.n	800bec8 <handleSessionResumption+0xc8>
        }
    }
    else
    {
        /* Clear any existing records if a new session is established. */
        if( pContext->outgoingPublishRecordMaxCount > 0U )
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	689b      	ldr	r3, [r3, #8]
 800be98:	2b00      	cmp	r3, #0
 800be9a:	d008      	beq.n	800beae <handleSessionResumption+0xae>
        {
            ( void ) memset( pContext->outgoingPublishRecords,
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	6818      	ldr	r0, [r3, #0]
                             0x00,
                             pContext->outgoingPublishRecordMaxCount * sizeof( *pContext->outgoingPublishRecords ) );
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	689b      	ldr	r3, [r3, #8]
            ( void ) memset( pContext->outgoingPublishRecords,
 800bea4:	009b      	lsls	r3, r3, #2
 800bea6:	461a      	mov	r2, r3
 800bea8:	2100      	movs	r1, #0
 800beaa:	f005 fc02 	bl	80116b2 <memset>
        }

        if( pContext->incomingPublishRecordMaxCount > 0U )
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	68db      	ldr	r3, [r3, #12]
 800beb2:	2b00      	cmp	r3, #0
 800beb4:	d008      	beq.n	800bec8 <handleSessionResumption+0xc8>
        {
            ( void ) memset( pContext->incomingPublishRecords,
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	6858      	ldr	r0, [r3, #4]
                             0x00,
                             pContext->incomingPublishRecordMaxCount * sizeof( *pContext->incomingPublishRecords ) );
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	68db      	ldr	r3, [r3, #12]
            ( void ) memset( pContext->incomingPublishRecords,
 800bebe:	009b      	lsls	r3, r3, #2
 800bec0:	461a      	mov	r2, r3
 800bec2:	2100      	movs	r1, #0
 800bec4:	f005 fbf5 	bl	80116b2 <memset>
        }
    }

    return status;
 800bec8:	7dfb      	ldrb	r3, [r7, #23]
}
 800beca:	4618      	mov	r0, r3
 800becc:	3718      	adds	r7, #24
 800bece:	46bd      	mov	sp, r7
 800bed0:	bd80      	pop	{r7, pc}
 800bed2:	bf00      	nop
 800bed4:	08013980 	.word	0x08013980
 800bed8:	0801459c 	.word	0x0801459c
 800bedc:	080138a4 	.word	0x080138a4

0800bee0 <validatePublishParams>:

static MQTTStatus_t validatePublishParams( const MQTTContext_t * pContext,
                                           const MQTTPublishInfo_t * pPublishInfo,
                                           uint16_t packetId )
{
 800bee0:	b480      	push	{r7}
 800bee2:	b087      	sub	sp, #28
 800bee4:	af00      	add	r7, sp, #0
 800bee6:	60f8      	str	r0, [r7, #12]
 800bee8:	60b9      	str	r1, [r7, #8]
 800beea:	4613      	mov	r3, r2
 800beec:	80fb      	strh	r3, [r7, #6]
    MQTTStatus_t status = MQTTSuccess;
 800beee:	2300      	movs	r3, #0
 800bef0:	75fb      	strb	r3, [r7, #23]

    /* Validate arguments. */
    if( ( pContext == NULL ) || ( pPublishInfo == NULL ) )
 800bef2:	68fb      	ldr	r3, [r7, #12]
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	d002      	beq.n	800befe <validatePublishParams+0x1e>
 800bef8:	68bb      	ldr	r3, [r7, #8]
 800befa:	2b00      	cmp	r3, #0
 800befc:	d102      	bne.n	800bf04 <validatePublishParams+0x24>
    {
        LogError( ( "Argument cannot be NULL: pContext=%p, "
                    "pPublishInfo=%p.",
                    ( void * ) pContext,
                    ( void * ) pPublishInfo ) );
        status = MQTTBadParameter;
 800befe:	2301      	movs	r3, #1
 800bf00:	75fb      	strb	r3, [r7, #23]
 800bf02:	e01e      	b.n	800bf42 <validatePublishParams+0x62>
    }
    else if( ( pPublishInfo->qos != MQTTQoS0 ) && ( packetId == 0U ) )
 800bf04:	68bb      	ldr	r3, [r7, #8]
 800bf06:	781b      	ldrb	r3, [r3, #0]
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	d005      	beq.n	800bf18 <validatePublishParams+0x38>
 800bf0c:	88fb      	ldrh	r3, [r7, #6]
 800bf0e:	2b00      	cmp	r3, #0
 800bf10:	d102      	bne.n	800bf18 <validatePublishParams+0x38>
    {
        LogError( ( "Packet Id is 0 for PUBLISH with QoS=%u.",
                    ( unsigned int ) pPublishInfo->qos ) );
        status = MQTTBadParameter;
 800bf12:	2301      	movs	r3, #1
 800bf14:	75fb      	strb	r3, [r7, #23]
 800bf16:	e014      	b.n	800bf42 <validatePublishParams+0x62>
    }
    else if( ( pPublishInfo->payloadLength > 0U ) && ( pPublishInfo->pPayload == NULL ) )
 800bf18:	68bb      	ldr	r3, [r7, #8]
 800bf1a:	691b      	ldr	r3, [r3, #16]
 800bf1c:	2b00      	cmp	r3, #0
 800bf1e:	d006      	beq.n	800bf2e <validatePublishParams+0x4e>
 800bf20:	68bb      	ldr	r3, [r7, #8]
 800bf22:	68db      	ldr	r3, [r3, #12]
 800bf24:	2b00      	cmp	r3, #0
 800bf26:	d102      	bne.n	800bf2e <validatePublishParams+0x4e>
    {
        LogError( ( "A nonzero payload length requires a non-NULL payload: "
                    "payloadLength=%lu, pPayload=%p.",
                    ( unsigned long ) pPublishInfo->payloadLength,
                    pPublishInfo->pPayload ) );
        status = MQTTBadParameter;
 800bf28:	2301      	movs	r3, #1
 800bf2a:	75fb      	strb	r3, [r7, #23]
 800bf2c:	e009      	b.n	800bf42 <validatePublishParams+0x62>
    }
    else if( ( pContext->outgoingPublishRecords == NULL ) && ( pPublishInfo->qos > MQTTQoS0 ) )
 800bf2e:	68fb      	ldr	r3, [r7, #12]
 800bf30:	681b      	ldr	r3, [r3, #0]
 800bf32:	2b00      	cmp	r3, #0
 800bf34:	d105      	bne.n	800bf42 <validatePublishParams+0x62>
 800bf36:	68bb      	ldr	r3, [r7, #8]
 800bf38:	781b      	ldrb	r3, [r3, #0]
 800bf3a:	2b00      	cmp	r3, #0
 800bf3c:	d001      	beq.n	800bf42 <validatePublishParams+0x62>
    {
        LogError( ( "Trying to publish a QoS > MQTTQoS0 packet when outgoing publishes "
                    "for QoS1/QoS2 have not been enabled. Please, call MQTT_InitStatefulQoS "
                    "to initialize and enable the use of QoS1/QoS2 publishes." ) );
        status = MQTTBadParameter;
 800bf3e:	2301      	movs	r3, #1
 800bf40:	75fb      	strb	r3, [r7, #23]
    else
    {
        /* MISRA else */
    }

    return status;
 800bf42:	7dfb      	ldrb	r3, [r7, #23]
}
 800bf44:	4618      	mov	r0, r3
 800bf46:	371c      	adds	r7, #28
 800bf48:	46bd      	mov	sp, r7
 800bf4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf4e:	4770      	bx	lr

0800bf50 <MQTT_Init>:
MQTTStatus_t MQTT_Init( MQTTContext_t * pContext,
                        const TransportInterface_t * pTransportInterface,
                        MQTTGetCurrentTimeFunc_t getTimeFunction,
                        MQTTEventCallback_t userCallback,
                        const MQTTFixedBuffer_t * pNetworkBuffer )
{
 800bf50:	b590      	push	{r4, r7, lr}
 800bf52:	b087      	sub	sp, #28
 800bf54:	af00      	add	r7, sp, #0
 800bf56:	60f8      	str	r0, [r7, #12]
 800bf58:	60b9      	str	r1, [r7, #8]
 800bf5a:	607a      	str	r2, [r7, #4]
 800bf5c:	603b      	str	r3, [r7, #0]
    MQTTStatus_t status = MQTTSuccess;
 800bf5e:	2300      	movs	r3, #0
 800bf60:	75fb      	strb	r3, [r7, #23]

    /* Validate arguments. */
    if( ( pContext == NULL ) || ( pTransportInterface == NULL ) ||
 800bf62:	68fb      	ldr	r3, [r7, #12]
 800bf64:	2b00      	cmp	r3, #0
 800bf66:	d005      	beq.n	800bf74 <MQTT_Init+0x24>
 800bf68:	68bb      	ldr	r3, [r7, #8]
 800bf6a:	2b00      	cmp	r3, #0
 800bf6c:	d002      	beq.n	800bf74 <MQTT_Init+0x24>
 800bf6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf70:	2b00      	cmp	r3, #0
 800bf72:	d102      	bne.n	800bf7a <MQTT_Init+0x2a>
                    "pTransportInterface=%p, "
                    "pNetworkBuffer=%p",
                    ( void * ) pContext,
                    ( void * ) pTransportInterface,
                    ( void * ) pNetworkBuffer ) );
        status = MQTTBadParameter;
 800bf74:	2301      	movs	r3, #1
 800bf76:	75fb      	strb	r3, [r7, #23]
 800bf78:	e03a      	b.n	800bff0 <MQTT_Init+0xa0>
    }
    else if( getTimeFunction == NULL )
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	2b00      	cmp	r3, #0
 800bf7e:	d102      	bne.n	800bf86 <MQTT_Init+0x36>
    {
        LogError( ( "Invalid parameter: getTimeFunction is NULL" ) );
        status = MQTTBadParameter;
 800bf80:	2301      	movs	r3, #1
 800bf82:	75fb      	strb	r3, [r7, #23]
 800bf84:	e034      	b.n	800bff0 <MQTT_Init+0xa0>
    }
    else if( userCallback == NULL )
 800bf86:	683b      	ldr	r3, [r7, #0]
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	d102      	bne.n	800bf92 <MQTT_Init+0x42>
    {
        LogError( ( "Invalid parameter: userCallback is NULL" ) );
        status = MQTTBadParameter;
 800bf8c:	2301      	movs	r3, #1
 800bf8e:	75fb      	strb	r3, [r7, #23]
 800bf90:	e02e      	b.n	800bff0 <MQTT_Init+0xa0>
    }
    else if( pTransportInterface->recv == NULL )
 800bf92:	68bb      	ldr	r3, [r7, #8]
 800bf94:	681b      	ldr	r3, [r3, #0]
 800bf96:	2b00      	cmp	r3, #0
 800bf98:	d102      	bne.n	800bfa0 <MQTT_Init+0x50>
    {
        LogError( ( "Invalid parameter: pTransportInterface->recv is NULL" ) );
        status = MQTTBadParameter;
 800bf9a:	2301      	movs	r3, #1
 800bf9c:	75fb      	strb	r3, [r7, #23]
 800bf9e:	e027      	b.n	800bff0 <MQTT_Init+0xa0>
    }
    else if( pTransportInterface->send == NULL )
 800bfa0:	68bb      	ldr	r3, [r7, #8]
 800bfa2:	685b      	ldr	r3, [r3, #4]
 800bfa4:	2b00      	cmp	r3, #0
 800bfa6:	d102      	bne.n	800bfae <MQTT_Init+0x5e>
    {
        LogError( ( "Invalid parameter: pTransportInterface->send is NULL" ) );
        status = MQTTBadParameter;
 800bfa8:	2301      	movs	r3, #1
 800bfaa:	75fb      	strb	r3, [r7, #23]
 800bfac:	e020      	b.n	800bff0 <MQTT_Init+0xa0>
    }
    else
    {
        ( void ) memset( pContext, 0x00, sizeof( MQTTContext_t ) );
 800bfae:	2250      	movs	r2, #80	; 0x50
 800bfb0:	2100      	movs	r1, #0
 800bfb2:	68f8      	ldr	r0, [r7, #12]
 800bfb4:	f005 fb7d 	bl	80116b2 <memset>

        pContext->connectStatus = MQTTNotConnected;
 800bfb8:	68fb      	ldr	r3, [r7, #12]
 800bfba:	2200      	movs	r2, #0
 800bfbc:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
        pContext->transportInterface = *pTransportInterface;
 800bfc0:	68fb      	ldr	r3, [r7, #12]
 800bfc2:	68ba      	ldr	r2, [r7, #8]
 800bfc4:	f103 0410 	add.w	r4, r3, #16
 800bfc8:	4613      	mov	r3, r2
 800bfca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800bfcc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        pContext->getTime = getTimeFunction;
 800bfd0:	68fb      	ldr	r3, [r7, #12]
 800bfd2:	687a      	ldr	r2, [r7, #4]
 800bfd4:	62da      	str	r2, [r3, #44]	; 0x2c
        pContext->appCallback = userCallback;
 800bfd6:	68fb      	ldr	r3, [r7, #12]
 800bfd8:	683a      	ldr	r2, [r7, #0]
 800bfda:	631a      	str	r2, [r3, #48]	; 0x30
        pContext->networkBuffer = *pNetworkBuffer;
 800bfdc:	68fb      	ldr	r3, [r7, #12]
 800bfde:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bfe0:	3320      	adds	r3, #32
 800bfe2:	e892 0003 	ldmia.w	r2, {r0, r1}
 800bfe6:	e883 0003 	stmia.w	r3, {r0, r1}

        /* Zero is not a valid packet ID per MQTT spec. Start from 1. */
        pContext->nextPacketId = 1;
 800bfea:	68fb      	ldr	r3, [r7, #12]
 800bfec:	2201      	movs	r2, #1
 800bfee:	851a      	strh	r2, [r3, #40]	; 0x28
    }

    return status;
 800bff0:	7dfb      	ldrb	r3, [r7, #23]
}
 800bff2:	4618      	mov	r0, r3
 800bff4:	371c      	adds	r7, #28
 800bff6:	46bd      	mov	sp, r7
 800bff8:	bd90      	pop	{r4, r7, pc}

0800bffa <MQTT_Connect>:
MQTTStatus_t MQTT_Connect( MQTTContext_t * pContext,
                           const MQTTConnectInfo_t * pConnectInfo,
                           const MQTTPublishInfo_t * pWillInfo,
                           uint32_t timeoutMs,
                           bool * pSessionPresent )
{
 800bffa:	b580      	push	{r7, lr}
 800bffc:	b08e      	sub	sp, #56	; 0x38
 800bffe:	af02      	add	r7, sp, #8
 800c000:	60f8      	str	r0, [r7, #12]
 800c002:	60b9      	str	r1, [r7, #8]
 800c004:	607a      	str	r2, [r7, #4]
 800c006:	603b      	str	r3, [r7, #0]
    size_t remainingLength = 0UL, packetSize = 0UL;
 800c008:	2300      	movs	r3, #0
 800c00a:	62bb      	str	r3, [r7, #40]	; 0x28
 800c00c:	2300      	movs	r3, #0
 800c00e:	627b      	str	r3, [r7, #36]	; 0x24
    MQTTStatus_t status = MQTTSuccess;
 800c010:	2300      	movs	r3, #0
 800c012:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    MQTTPacketInfo_t incomingPacket = { 0 };
 800c016:	f107 0314 	add.w	r3, r7, #20
 800c01a:	2200      	movs	r2, #0
 800c01c:	601a      	str	r2, [r3, #0]
 800c01e:	605a      	str	r2, [r3, #4]
 800c020:	609a      	str	r2, [r3, #8]
 800c022:	60da      	str	r2, [r3, #12]

    incomingPacket.type = ( uint8_t ) 0;
 800c024:	2300      	movs	r3, #0
 800c026:	753b      	strb	r3, [r7, #20]

    if( ( pContext == NULL ) || ( pConnectInfo == NULL ) || ( pSessionPresent == NULL ) )
 800c028:	68fb      	ldr	r3, [r7, #12]
 800c02a:	2b00      	cmp	r3, #0
 800c02c:	d005      	beq.n	800c03a <MQTT_Connect+0x40>
 800c02e:	68bb      	ldr	r3, [r7, #8]
 800c030:	2b00      	cmp	r3, #0
 800c032:	d002      	beq.n	800c03a <MQTT_Connect+0x40>
 800c034:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c036:	2b00      	cmp	r3, #0
 800c038:	d102      	bne.n	800c040 <MQTT_Connect+0x46>
        LogError( ( "Argument cannot be NULL: pContext=%p, "
                    "pConnectInfo=%p, pSessionPresent=%p.",
                    ( void * ) pContext,
                    ( void * ) pConnectInfo,
                    ( void * ) pSessionPresent ) );
        status = MQTTBadParameter;
 800c03a:	2301      	movs	r3, #1
 800c03c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }

    if( status == MQTTSuccess )
 800c040:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c044:	2b00      	cmp	r3, #0
 800c046:	d10a      	bne.n	800c05e <MQTT_Connect+0x64>
    {
        /* Get MQTT connect packet size and remaining length. */
        status = MQTT_GetConnectPacketSize( pConnectInfo,
 800c048:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c04c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800c050:	6879      	ldr	r1, [r7, #4]
 800c052:	68b8      	ldr	r0, [r7, #8]
 800c054:	f000 fcd2 	bl	800c9fc <MQTT_GetConnectPacketSize>
 800c058:	4603      	mov	r3, r0
 800c05a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        LogDebug( ( "CONNECT packet size is %lu and remaining length is %lu.",
                    ( unsigned long ) packetSize,
                    ( unsigned long ) remainingLength ) );
    }

    if( status == MQTTSuccess )
 800c05e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c062:	2b00      	cmp	r3, #0
 800c064:	d108      	bne.n	800c078 <MQTT_Connect+0x7e>
    {
        MQTT_PRE_SEND_HOOK( pContext );

        status = sendConnectWithoutCopy( pContext,
 800c066:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c068:	687a      	ldr	r2, [r7, #4]
 800c06a:	68b9      	ldr	r1, [r7, #8]
 800c06c:	68f8      	ldr	r0, [r7, #12]
 800c06e:	f7ff fce9 	bl	800ba44 <sendConnectWithoutCopy>
 800c072:	4603      	mov	r3, r0
 800c074:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

        MQTT_POST_SEND_HOOK( pContext );
    }

    /* Read CONNACK from transport layer. */
    if( status == MQTTSuccess )
 800c078:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c07c:	2b00      	cmp	r3, #0
 800c07e:	d10d      	bne.n	800c09c <MQTT_Connect+0xa2>
    {
        status = receiveConnack( pContext,
 800c080:	68bb      	ldr	r3, [r7, #8]
 800c082:	781a      	ldrb	r2, [r3, #0]
 800c084:	f107 0114 	add.w	r1, r7, #20
 800c088:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c08a:	9300      	str	r3, [sp, #0]
 800c08c:	460b      	mov	r3, r1
 800c08e:	6839      	ldr	r1, [r7, #0]
 800c090:	68f8      	ldr	r0, [r7, #12]
 800c092:	f7ff fdf3 	bl	800bc7c <receiveConnack>
 800c096:	4603      	mov	r3, r0
 800c098:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                                 pConnectInfo->cleanSession,
                                 &incomingPacket,
                                 pSessionPresent );
    }

    if( status == MQTTSuccess )
 800c09c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c0a0:	2b00      	cmp	r3, #0
 800c0a2:	d108      	bne.n	800c0b6 <MQTT_Connect+0xbc>
    {
        /* Resend PUBRELs when reestablishing a session, or clear records for new sessions. */
        status = handleSessionResumption( pContext, *pSessionPresent );
 800c0a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0a6:	781b      	ldrb	r3, [r3, #0]
 800c0a8:	4619      	mov	r1, r3
 800c0aa:	68f8      	ldr	r0, [r7, #12]
 800c0ac:	f7ff fea8 	bl	800be00 <handleSessionResumption>
 800c0b0:	4603      	mov	r3, r0
 800c0b2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }

    if( status == MQTTSuccess )
 800c0b6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c0ba:	2b00      	cmp	r3, #0
 800c0bc:	d10f      	bne.n	800c0de <MQTT_Connect+0xe4>
    {
        LogInfo( ( "MQTT connection established with the broker." ) );
        pContext->connectStatus = MQTTConnected;
 800c0be:	68fb      	ldr	r3, [r7, #12]
 800c0c0:	2201      	movs	r2, #1
 800c0c2:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
        /* Initialize keep-alive fields after a successful connection. */
        pContext->keepAliveIntervalSec = pConnectInfo->keepAliveSeconds;
 800c0c6:	68bb      	ldr	r3, [r7, #8]
 800c0c8:	885a      	ldrh	r2, [r3, #2]
 800c0ca:	68fb      	ldr	r3, [r7, #12]
 800c0cc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
        pContext->waitingForPingResp = false;
 800c0d0:	68fb      	ldr	r3, [r7, #12]
 800c0d2:	2200      	movs	r2, #0
 800c0d4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        pContext->pingReqSendTimeMs = 0U;
 800c0d8:	68fb      	ldr	r3, [r7, #12]
 800c0da:	2200      	movs	r2, #0
 800c0dc:	649a      	str	r2, [r3, #72]	; 0x48
    {
        LogError( ( "MQTT connection failed with status = %s.",
                    MQTT_Status_strerror( status ) ) );
    }

    return status;
 800c0de:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800c0e2:	4618      	mov	r0, r3
 800c0e4:	3730      	adds	r7, #48	; 0x30
 800c0e6:	46bd      	mov	sp, r7
 800c0e8:	bd80      	pop	{r7, pc}

0800c0ea <MQTT_Publish>:
/*-----------------------------------------------------------*/

MQTTStatus_t MQTT_Publish( MQTTContext_t * pContext,
                           const MQTTPublishInfo_t * pPublishInfo,
                           uint16_t packetId )
{
 800c0ea:	b580      	push	{r7, lr}
 800c0ec:	b08c      	sub	sp, #48	; 0x30
 800c0ee:	af02      	add	r7, sp, #8
 800c0f0:	60f8      	str	r0, [r7, #12]
 800c0f2:	60b9      	str	r1, [r7, #8]
 800c0f4:	4613      	mov	r3, r2
 800c0f6:	80fb      	strh	r3, [r7, #6]
    size_t headerSize = 0UL;
 800c0f8:	2300      	movs	r3, #0
 800c0fa:	623b      	str	r3, [r7, #32]
    size_t remainingLength = 0UL;
 800c0fc:	2300      	movs	r3, #0
 800c0fe:	61fb      	str	r3, [r7, #28]
    size_t packetSize = 0UL;
 800c100:	2300      	movs	r3, #0
 800c102:	61bb      	str	r3, [r7, #24]
    MQTTPublishState_t publishStatus = MQTTStateNull;
 800c104:	2300      	movs	r3, #0
 800c106:	75fb      	strb	r3, [r7, #23]
    bool stateUpdateHookExecuted = false;
 800c108:	2300      	movs	r3, #0
 800c10a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    /* 1 header byte + 4 bytes (maximum) required for encoding the length +
     * 2 bytes for topic string. */
    uint8_t mqttHeader[ 7 ];

    /* Validate arguments. */
    MQTTStatus_t status = validatePublishParams( pContext, pPublishInfo, packetId );
 800c10e:	88fb      	ldrh	r3, [r7, #6]
 800c110:	461a      	mov	r2, r3
 800c112:	68b9      	ldr	r1, [r7, #8]
 800c114:	68f8      	ldr	r0, [r7, #12]
 800c116:	f7ff fee3 	bl	800bee0 <validatePublishParams>
 800c11a:	4603      	mov	r3, r0
 800c11c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    if( status == MQTTSuccess )
 800c120:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c124:	2b00      	cmp	r3, #0
 800c126:	d10a      	bne.n	800c13e <MQTT_Publish+0x54>
    {
        /* Get the remaining length and packet size.*/
        status = MQTT_GetPublishPacketSize( pPublishInfo,
 800c128:	f107 0218 	add.w	r2, r7, #24
 800c12c:	f107 031c 	add.w	r3, r7, #28
 800c130:	4619      	mov	r1, r3
 800c132:	68b8      	ldr	r0, [r7, #8]
 800c134:	f000 fcce 	bl	800cad4 <MQTT_GetPublishPacketSize>
 800c138:	4603      	mov	r3, r0
 800c13a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                                            &remainingLength,
                                            &packetSize );
    }

    if( status == MQTTSuccess )
 800c13e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c142:	2b00      	cmp	r3, #0
 800c144:	d10a      	bne.n	800c15c <MQTT_Publish+0x72>
    {
        status = MQTT_SerializePublishHeaderWithoutTopic( pPublishInfo,
 800c146:	69f9      	ldr	r1, [r7, #28]
 800c148:	f107 0320 	add.w	r3, r7, #32
 800c14c:	f107 0210 	add.w	r2, r7, #16
 800c150:	68b8      	ldr	r0, [r7, #8]
 800c152:	f000 f961 	bl	800c418 <MQTT_SerializePublishHeaderWithoutTopic>
 800c156:	4603      	mov	r3, r0
 800c158:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                                                          remainingLength,
                                                          mqttHeader,
                                                          &headerSize );
    }

    if( ( status == MQTTSuccess ) && ( pPublishInfo->qos > MQTTQoS0 ) )
 800c15c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c160:	2b00      	cmp	r3, #0
 800c162:	d11b      	bne.n	800c19c <MQTT_Publish+0xb2>
 800c164:	68bb      	ldr	r3, [r7, #8]
 800c166:	781b      	ldrb	r3, [r3, #0]
 800c168:	2b00      	cmp	r3, #0
 800c16a:	d017      	beq.n	800c19c <MQTT_Publish+0xb2>
    {
        MQTT_PRE_STATE_UPDATE_HOOK( pContext );

        /* Set the flag so that the corresponding hook can be called later. */
        stateUpdateHookExecuted = true;
 800c16c:	2301      	movs	r3, #1
 800c16e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

        status = MQTT_ReserveState( pContext,
 800c172:	68bb      	ldr	r3, [r7, #8]
 800c174:	781a      	ldrb	r2, [r3, #0]
 800c176:	88fb      	ldrh	r3, [r7, #6]
 800c178:	4619      	mov	r1, r3
 800c17a:	68f8      	ldr	r0, [r7, #12]
 800c17c:	f001 fa28 	bl	800d5d0 <MQTT_ReserveState>
 800c180:	4603      	mov	r3, r0
 800c182:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                                    pPublishInfo->qos );

        /* State already exists for a duplicate packet.
         * If a state doesn't exist, it will be handled as a new publish in
         * state engine. */
        if( ( status == MQTTStateCollision ) && ( pPublishInfo->dup == true ) )
 800c186:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c18a:	2b09      	cmp	r3, #9
 800c18c:	d106      	bne.n	800c19c <MQTT_Publish+0xb2>
 800c18e:	68bb      	ldr	r3, [r7, #8]
 800c190:	789b      	ldrb	r3, [r3, #2]
 800c192:	2b00      	cmp	r3, #0
 800c194:	d002      	beq.n	800c19c <MQTT_Publish+0xb2>
        {
            status = MQTTSuccess;
 800c196:	2300      	movs	r3, #0
 800c198:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
    }

    if( status == MQTTSuccess )
 800c19c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c1a0:	2b00      	cmp	r3, #0
 800c1a2:	d10c      	bne.n	800c1be <MQTT_Publish+0xd4>
    {
        /* Take the mutex as multiple send calls are required for sending this
         * packet. */
        MQTT_PRE_SEND_HOOK( pContext );

        status = sendPublishWithoutCopy( pContext,
 800c1a4:	6a39      	ldr	r1, [r7, #32]
 800c1a6:	f107 0210 	add.w	r2, r7, #16
 800c1aa:	88fb      	ldrh	r3, [r7, #6]
 800c1ac:	9300      	str	r3, [sp, #0]
 800c1ae:	460b      	mov	r3, r1
 800c1b0:	68b9      	ldr	r1, [r7, #8]
 800c1b2:	68f8      	ldr	r0, [r7, #12]
 800c1b4:	f7ff fbd0 	bl	800b958 <sendPublishWithoutCopy>
 800c1b8:	4603      	mov	r3, r0
 800c1ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        /* Give the mutex away for the next taker. */
        MQTT_POST_SEND_HOOK( pContext );
    }

    if( ( status == MQTTSuccess ) &&
 800c1be:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c1c2:	2b00      	cmp	r3, #0
 800c1c4:	d111      	bne.n	800c1ea <MQTT_Publish+0x100>
        ( pPublishInfo->qos > MQTTQoS0 ) )
 800c1c6:	68bb      	ldr	r3, [r7, #8]
 800c1c8:	781b      	ldrb	r3, [r3, #0]
    if( ( status == MQTTSuccess ) &&
 800c1ca:	2b00      	cmp	r3, #0
 800c1cc:	d00d      	beq.n	800c1ea <MQTT_Publish+0x100>
    {
        /* Update state machine after PUBLISH is sent.
         * Only to be done for QoS1 or QoS2. */
        status = MQTT_UpdateStatePublish( pContext,
 800c1ce:	68bb      	ldr	r3, [r7, #8]
 800c1d0:	781a      	ldrb	r2, [r3, #0]
 800c1d2:	88f9      	ldrh	r1, [r7, #6]
 800c1d4:	f107 0317 	add.w	r3, r7, #23
 800c1d8:	9300      	str	r3, [sp, #0]
 800c1da:	4613      	mov	r3, r2
 800c1dc:	2200      	movs	r2, #0
 800c1de:	68f8      	ldr	r0, [r7, #12]
 800c1e0:	f001 fa4f 	bl	800d682 <MQTT_UpdateStatePublish>
 800c1e4:	4603      	mov	r3, r0
 800c1e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    {
        LogError( ( "MQTT PUBLISH failed with status %s.",
                    MQTT_Status_strerror( status ) ) );
    }

    return status;
 800c1ea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800c1ee:	4618      	mov	r0, r3
 800c1f0:	3728      	adds	r7, #40	; 0x28
 800c1f2:	46bd      	mov	sp, r7
 800c1f4:	bd80      	pop	{r7, pc}

0800c1f6 <remainingLengthEncodedSize>:
static MQTTStatus_t deserializePingresp( const MQTTPacketInfo_t * pPingresp );

/*-----------------------------------------------------------*/

static size_t remainingLengthEncodedSize( size_t length )
{
 800c1f6:	b480      	push	{r7}
 800c1f8:	b085      	sub	sp, #20
 800c1fa:	af00      	add	r7, sp, #0
 800c1fc:	6078      	str	r0, [r7, #4]

    /* Determine how many bytes are needed to encode length.
     * The values below are taken from the MQTT 3.1.1 spec. */

    /* 1 byte is needed to encode lengths between 0 and 127. */
    if( length < 128U )
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	2b7f      	cmp	r3, #127	; 0x7f
 800c202:	d802      	bhi.n	800c20a <remainingLengthEncodedSize+0x14>
    {
        encodedSize = 1U;
 800c204:	2301      	movs	r3, #1
 800c206:	60fb      	str	r3, [r7, #12]
 800c208:	e00f      	b.n	800c22a <remainingLengthEncodedSize+0x34>
    }
    /* 2 bytes are needed to encode lengths between 128 and 16,383. */
    else if( length < 16384U )
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c210:	d202      	bcs.n	800c218 <remainingLengthEncodedSize+0x22>
    {
        encodedSize = 2U;
 800c212:	2302      	movs	r3, #2
 800c214:	60fb      	str	r3, [r7, #12]
 800c216:	e008      	b.n	800c22a <remainingLengthEncodedSize+0x34>
    }
    /* 3 bytes are needed to encode lengths between 16,384 and 2,097,151. */
    else if( length < 2097152U )
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c21e:	d202      	bcs.n	800c226 <remainingLengthEncodedSize+0x30>
    {
        encodedSize = 3U;
 800c220:	2303      	movs	r3, #3
 800c222:	60fb      	str	r3, [r7, #12]
 800c224:	e001      	b.n	800c22a <remainingLengthEncodedSize+0x34>
    }
    /* 4 bytes are needed to encode lengths between 2,097,152 and 268,435,455. */
    else
    {
        encodedSize = 4U;
 800c226:	2304      	movs	r3, #4
 800c228:	60fb      	str	r3, [r7, #12]

    LogDebug( ( "Encoded size for length %lu is %lu bytes.",
                ( unsigned long ) length,
                ( unsigned long ) encodedSize ) );

    return encodedSize;
 800c22a:	68fb      	ldr	r3, [r7, #12]
}
 800c22c:	4618      	mov	r0, r3
 800c22e:	3714      	adds	r7, #20
 800c230:	46bd      	mov	sp, r7
 800c232:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c236:	4770      	bx	lr

0800c238 <encodeRemainingLength>:

/*-----------------------------------------------------------*/

static uint8_t * encodeRemainingLength( uint8_t * pDestination,
                                        size_t length )
{
 800c238:	b580      	push	{r7, lr}
 800c23a:	b086      	sub	sp, #24
 800c23c:	af00      	add	r7, sp, #0
 800c23e:	6078      	str	r0, [r7, #4]
 800c240:	6039      	str	r1, [r7, #0]
    uint8_t lengthByte;
    uint8_t * pLengthEnd = NULL;
 800c242:	2300      	movs	r3, #0
 800c244:	613b      	str	r3, [r7, #16]
    size_t remainingLength = length;
 800c246:	683b      	ldr	r3, [r7, #0]
 800c248:	60fb      	str	r3, [r7, #12]

    assert( pDestination != NULL );
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	2b00      	cmp	r3, #0
 800c24e:	d106      	bne.n	800c25e <encodeRemainingLength+0x26>
 800c250:	4b12      	ldr	r3, [pc, #72]	; (800c29c <encodeRemainingLength+0x64>)
 800c252:	4a13      	ldr	r2, [pc, #76]	; (800c2a0 <encodeRemainingLength+0x68>)
 800c254:	f240 11f1 	movw	r1, #497	; 0x1f1
 800c258:	4812      	ldr	r0, [pc, #72]	; (800c2a4 <encodeRemainingLength+0x6c>)
 800c25a:	f005 f89f 	bl	801139c <__assert_func>

    pLengthEnd = pDestination;
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	613b      	str	r3, [r7, #16]

    /* This algorithm is copied from the MQTT v3.1.1 spec. */
    do
    {
        lengthByte = ( uint8_t ) ( remainingLength % 128U );
 800c262:	68fb      	ldr	r3, [r7, #12]
 800c264:	b2db      	uxtb	r3, r3
 800c266:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c26a:	75fb      	strb	r3, [r7, #23]
        remainingLength = remainingLength / 128U;
 800c26c:	68fb      	ldr	r3, [r7, #12]
 800c26e:	09db      	lsrs	r3, r3, #7
 800c270:	60fb      	str	r3, [r7, #12]

        /* Set the high bit of this byte, indicating that there's more data. */
        if( remainingLength > 0U )
 800c272:	68fb      	ldr	r3, [r7, #12]
 800c274:	2b00      	cmp	r3, #0
 800c276:	d003      	beq.n	800c280 <encodeRemainingLength+0x48>
        {
            UINT8_SET_BIT( lengthByte, 7 );
 800c278:	7dfb      	ldrb	r3, [r7, #23]
 800c27a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800c27e:	75fb      	strb	r3, [r7, #23]
        }

        /* Output a single encoded byte. */
        *pLengthEnd = lengthByte;
 800c280:	693b      	ldr	r3, [r7, #16]
 800c282:	7dfa      	ldrb	r2, [r7, #23]
 800c284:	701a      	strb	r2, [r3, #0]
        pLengthEnd++;
 800c286:	693b      	ldr	r3, [r7, #16]
 800c288:	3301      	adds	r3, #1
 800c28a:	613b      	str	r3, [r7, #16]
    } while( remainingLength > 0U );
 800c28c:	68fb      	ldr	r3, [r7, #12]
 800c28e:	2b00      	cmp	r3, #0
 800c290:	d1e7      	bne.n	800c262 <encodeRemainingLength+0x2a>

    return pLengthEnd;
 800c292:	693b      	ldr	r3, [r7, #16]
}
 800c294:	4618      	mov	r0, r3
 800c296:	3718      	adds	r7, #24
 800c298:	46bd      	mov	sp, r7
 800c29a:	bd80      	pop	{r7, pc}
 800c29c:	08013e28 	.word	0x08013e28
 800c2a0:	080145b4 	.word	0x080145b4
 800c2a4:	08013e40 	.word	0x08013e40

0800c2a8 <encodeString>:
/*-----------------------------------------------------------*/

static uint8_t * encodeString( uint8_t * pDestination,
                               const char * pSource,
                               uint16_t sourceLength )
{
 800c2a8:	b580      	push	{r7, lr}
 800c2aa:	b086      	sub	sp, #24
 800c2ac:	af00      	add	r7, sp, #0
 800c2ae:	60f8      	str	r0, [r7, #12]
 800c2b0:	60b9      	str	r1, [r7, #8]
 800c2b2:	4613      	mov	r3, r2
 800c2b4:	80fb      	strh	r3, [r7, #6]
    uint8_t * pBuffer = NULL;
 800c2b6:	2300      	movs	r3, #0
 800c2b8:	617b      	str	r3, [r7, #20]

    /* Typecast const char * typed source buffer to const uint8_t *.
     * This is to use same type buffers in memcpy. */
    const uint8_t * pSourceBuffer = ( const uint8_t * ) pSource;
 800c2ba:	68bb      	ldr	r3, [r7, #8]
 800c2bc:	613b      	str	r3, [r7, #16]

    assert( pDestination != NULL );
 800c2be:	68fb      	ldr	r3, [r7, #12]
 800c2c0:	2b00      	cmp	r3, #0
 800c2c2:	d106      	bne.n	800c2d2 <encodeString+0x2a>
 800c2c4:	4b15      	ldr	r3, [pc, #84]	; (800c31c <encodeString+0x74>)
 800c2c6:	4a16      	ldr	r2, [pc, #88]	; (800c320 <encodeString+0x78>)
 800c2c8:	f240 2115 	movw	r1, #533	; 0x215
 800c2cc:	4815      	ldr	r0, [pc, #84]	; (800c324 <encodeString+0x7c>)
 800c2ce:	f005 f865 	bl	801139c <__assert_func>

    pBuffer = pDestination;
 800c2d2:	68fb      	ldr	r3, [r7, #12]
 800c2d4:	617b      	str	r3, [r7, #20]

    /* The first byte of a UTF-8 string is the high byte of the string length. */
    *pBuffer = UINT16_HIGH_BYTE( sourceLength );
 800c2d6:	88fb      	ldrh	r3, [r7, #6]
 800c2d8:	0a1b      	lsrs	r3, r3, #8
 800c2da:	b29b      	uxth	r3, r3
 800c2dc:	b2da      	uxtb	r2, r3
 800c2de:	697b      	ldr	r3, [r7, #20]
 800c2e0:	701a      	strb	r2, [r3, #0]
    pBuffer++;
 800c2e2:	697b      	ldr	r3, [r7, #20]
 800c2e4:	3301      	adds	r3, #1
 800c2e6:	617b      	str	r3, [r7, #20]

    /* The second byte of a UTF-8 string is the low byte of the string length. */
    *pBuffer = UINT16_LOW_BYTE( sourceLength );
 800c2e8:	88fb      	ldrh	r3, [r7, #6]
 800c2ea:	b2da      	uxtb	r2, r3
 800c2ec:	697b      	ldr	r3, [r7, #20]
 800c2ee:	701a      	strb	r2, [r3, #0]
    pBuffer++;
 800c2f0:	697b      	ldr	r3, [r7, #20]
 800c2f2:	3301      	adds	r3, #1
 800c2f4:	617b      	str	r3, [r7, #20]

    /* Copy the string into pBuffer. */
    if( pSourceBuffer != NULL )
 800c2f6:	693b      	ldr	r3, [r7, #16]
 800c2f8:	2b00      	cmp	r3, #0
 800c2fa:	d005      	beq.n	800c308 <encodeString+0x60>
    {
        ( void ) memcpy( pBuffer, pSourceBuffer, sourceLength );
 800c2fc:	88fb      	ldrh	r3, [r7, #6]
 800c2fe:	461a      	mov	r2, r3
 800c300:	6939      	ldr	r1, [r7, #16]
 800c302:	6978      	ldr	r0, [r7, #20]
 800c304:	f005 f9ad 	bl	8011662 <memcpy>
    }

    /* Return the pointer to the end of the encoded string. */
    pBuffer = &pBuffer[ sourceLength ];
 800c308:	88fb      	ldrh	r3, [r7, #6]
 800c30a:	697a      	ldr	r2, [r7, #20]
 800c30c:	4413      	add	r3, r2
 800c30e:	617b      	str	r3, [r7, #20]

    return pBuffer;
 800c310:	697b      	ldr	r3, [r7, #20]
}
 800c312:	4618      	mov	r0, r3
 800c314:	3718      	adds	r7, #24
 800c316:	46bd      	mov	sp, r7
 800c318:	bd80      	pop	{r7, pc}
 800c31a:	bf00      	nop
 800c31c:	08013e28 	.word	0x08013e28
 800c320:	080145cc 	.word	0x080145cc
 800c324:	08013e40 	.word	0x08013e40

0800c328 <calculatePublishPacketSize>:
/*-----------------------------------------------------------*/

static bool calculatePublishPacketSize( const MQTTPublishInfo_t * pPublishInfo,
                                        size_t * pRemainingLength,
                                        size_t * pPacketSize )
{
 800c328:	b580      	push	{r7, lr}
 800c32a:	b088      	sub	sp, #32
 800c32c:	af00      	add	r7, sp, #0
 800c32e:	60f8      	str	r0, [r7, #12]
 800c330:	60b9      	str	r1, [r7, #8]
 800c332:	607a      	str	r2, [r7, #4]
    bool status = true;
 800c334:	2301      	movs	r3, #1
 800c336:	77fb      	strb	r3, [r7, #31]
    size_t packetSize = 0, payloadLimit = 0;
 800c338:	2300      	movs	r3, #0
 800c33a:	61bb      	str	r3, [r7, #24]
 800c33c:	2300      	movs	r3, #0
 800c33e:	617b      	str	r3, [r7, #20]

    assert( pPublishInfo != NULL );
 800c340:	68fb      	ldr	r3, [r7, #12]
 800c342:	2b00      	cmp	r3, #0
 800c344:	d106      	bne.n	800c354 <calculatePublishPacketSize+0x2c>
 800c346:	4b2e      	ldr	r3, [pc, #184]	; (800c400 <calculatePublishPacketSize+0xd8>)
 800c348:	4a2e      	ldr	r2, [pc, #184]	; (800c404 <calculatePublishPacketSize+0xdc>)
 800c34a:	f240 2136 	movw	r1, #566	; 0x236
 800c34e:	482e      	ldr	r0, [pc, #184]	; (800c408 <calculatePublishPacketSize+0xe0>)
 800c350:	f005 f824 	bl	801139c <__assert_func>
    assert( pRemainingLength != NULL );
 800c354:	68bb      	ldr	r3, [r7, #8]
 800c356:	2b00      	cmp	r3, #0
 800c358:	d106      	bne.n	800c368 <calculatePublishPacketSize+0x40>
 800c35a:	4b2c      	ldr	r3, [pc, #176]	; (800c40c <calculatePublishPacketSize+0xe4>)
 800c35c:	4a29      	ldr	r2, [pc, #164]	; (800c404 <calculatePublishPacketSize+0xdc>)
 800c35e:	f240 2137 	movw	r1, #567	; 0x237
 800c362:	4829      	ldr	r0, [pc, #164]	; (800c408 <calculatePublishPacketSize+0xe0>)
 800c364:	f005 f81a 	bl	801139c <__assert_func>
    assert( pPacketSize != NULL );
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	2b00      	cmp	r3, #0
 800c36c:	d106      	bne.n	800c37c <calculatePublishPacketSize+0x54>
 800c36e:	4b28      	ldr	r3, [pc, #160]	; (800c410 <calculatePublishPacketSize+0xe8>)
 800c370:	4a24      	ldr	r2, [pc, #144]	; (800c404 <calculatePublishPacketSize+0xdc>)
 800c372:	f44f 710e 	mov.w	r1, #568	; 0x238
 800c376:	4824      	ldr	r0, [pc, #144]	; (800c408 <calculatePublishPacketSize+0xe0>)
 800c378:	f005 f810 	bl	801139c <__assert_func>

    /* The variable header of a PUBLISH packet always contains the topic name.
     * The first 2 bytes of UTF-8 string contains length of the string.
     */
    packetSize += pPublishInfo->topicNameLength + sizeof( uint16_t );
 800c37c:	68fb      	ldr	r3, [r7, #12]
 800c37e:	891b      	ldrh	r3, [r3, #8]
 800c380:	461a      	mov	r2, r3
 800c382:	69bb      	ldr	r3, [r7, #24]
 800c384:	4413      	add	r3, r2
 800c386:	3302      	adds	r3, #2
 800c388:	61bb      	str	r3, [r7, #24]

    /* The variable header of a QoS 1 or 2 PUBLISH packet contains a 2-byte
     * packet identifier. */
    if( pPublishInfo->qos > MQTTQoS0 )
 800c38a:	68fb      	ldr	r3, [r7, #12]
 800c38c:	781b      	ldrb	r3, [r3, #0]
 800c38e:	2b00      	cmp	r3, #0
 800c390:	d002      	beq.n	800c398 <calculatePublishPacketSize+0x70>
    {
        packetSize += sizeof( uint16_t );
 800c392:	69bb      	ldr	r3, [r7, #24]
 800c394:	3302      	adds	r3, #2
 800c396:	61bb      	str	r3, [r7, #24]
    }

    /* Calculate the maximum allowed size of the payload for the given parameters.
     * This calculation excludes the "Remaining length" encoding, whose size is not
     * yet known. */
    payloadLimit = MQTT_MAX_REMAINING_LENGTH - packetSize - 1U;
 800c398:	69ba      	ldr	r2, [r7, #24]
 800c39a:	4b1e      	ldr	r3, [pc, #120]	; (800c414 <calculatePublishPacketSize+0xec>)
 800c39c:	1a9b      	subs	r3, r3, r2
 800c39e:	617b      	str	r3, [r7, #20]

    /* Ensure that the given payload fits within the calculated limit. */
    if( pPublishInfo->payloadLength > payloadLimit )
 800c3a0:	68fb      	ldr	r3, [r7, #12]
 800c3a2:	691b      	ldr	r3, [r3, #16]
 800c3a4:	697a      	ldr	r2, [r7, #20]
 800c3a6:	429a      	cmp	r2, r3
 800c3a8:	d202      	bcs.n	800c3b0 <calculatePublishPacketSize+0x88>
                    "%lu so as not to exceed the maximum "
                    "remaining length of MQTT 3.1.1 packet( %lu ).",
                    ( unsigned long ) pPublishInfo->payloadLength,
                    ( unsigned long ) payloadLimit,
                    MQTT_MAX_REMAINING_LENGTH ) );
        status = false;
 800c3aa:	2300      	movs	r3, #0
 800c3ac:	77fb      	strb	r3, [r7, #31]
 800c3ae:	e021      	b.n	800c3f4 <calculatePublishPacketSize+0xcc>
    }
    else
    {
        /* Add the length of the PUBLISH payload. At this point, the "Remaining length"
         * has been calculated. */
        packetSize += pPublishInfo->payloadLength;
 800c3b0:	68fb      	ldr	r3, [r7, #12]
 800c3b2:	691b      	ldr	r3, [r3, #16]
 800c3b4:	69ba      	ldr	r2, [r7, #24]
 800c3b6:	4413      	add	r3, r2
 800c3b8:	61bb      	str	r3, [r7, #24]

        /* Now that the "Remaining length" is known, recalculate the payload limit
         * based on the size of its encoding. */
        payloadLimit -= remainingLengthEncodedSize( packetSize );
 800c3ba:	69b8      	ldr	r0, [r7, #24]
 800c3bc:	f7ff ff1b 	bl	800c1f6 <remainingLengthEncodedSize>
 800c3c0:	4602      	mov	r2, r0
 800c3c2:	697b      	ldr	r3, [r7, #20]
 800c3c4:	1a9b      	subs	r3, r3, r2
 800c3c6:	617b      	str	r3, [r7, #20]

        /* Check that the given payload fits within the size allowed by MQTT spec. */
        if( pPublishInfo->payloadLength > payloadLimit )
 800c3c8:	68fb      	ldr	r3, [r7, #12]
 800c3ca:	691b      	ldr	r3, [r3, #16]
 800c3cc:	697a      	ldr	r2, [r7, #20]
 800c3ce:	429a      	cmp	r2, r3
 800c3d0:	d202      	bcs.n	800c3d8 <calculatePublishPacketSize+0xb0>
                        "%lu so as not to exceed the maximum "
                        "remaining length of MQTT 3.1.1 packet( %lu ).",
                        ( unsigned long ) pPublishInfo->payloadLength,
                        ( unsigned long ) payloadLimit,
                        MQTT_MAX_REMAINING_LENGTH ) );
            status = false;
 800c3d2:	2300      	movs	r3, #0
 800c3d4:	77fb      	strb	r3, [r7, #31]
 800c3d6:	e00d      	b.n	800c3f4 <calculatePublishPacketSize+0xcc>
        }
        else
        {
            /* Set the "Remaining length" output parameter and calculate the full
             * size of the PUBLISH packet. */
            *pRemainingLength = packetSize;
 800c3d8:	68bb      	ldr	r3, [r7, #8]
 800c3da:	69ba      	ldr	r2, [r7, #24]
 800c3dc:	601a      	str	r2, [r3, #0]

            packetSize += 1U + remainingLengthEncodedSize( packetSize );
 800c3de:	69b8      	ldr	r0, [r7, #24]
 800c3e0:	f7ff ff09 	bl	800c1f6 <remainingLengthEncodedSize>
 800c3e4:	4603      	mov	r3, r0
 800c3e6:	3301      	adds	r3, #1
 800c3e8:	69ba      	ldr	r2, [r7, #24]
 800c3ea:	4413      	add	r3, r2
 800c3ec:	61bb      	str	r3, [r7, #24]
            *pPacketSize = packetSize;
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	69ba      	ldr	r2, [r7, #24]
 800c3f2:	601a      	str	r2, [r3, #0]
    }

    LogDebug( ( "PUBLISH packet remaining length=%lu and packet size=%lu.",
                ( unsigned long ) *pRemainingLength,
                ( unsigned long ) *pPacketSize ) );
    return status;
 800c3f4:	7ffb      	ldrb	r3, [r7, #31]
}
 800c3f6:	4618      	mov	r0, r3
 800c3f8:	3720      	adds	r7, #32
 800c3fa:	46bd      	mov	sp, r7
 800c3fc:	bd80      	pop	{r7, pc}
 800c3fe:	bf00      	nop
 800c400:	08013e74 	.word	0x08013e74
 800c404:	080145dc 	.word	0x080145dc
 800c408:	08013e40 	.word	0x08013e40
 800c40c:	08013e8c 	.word	0x08013e8c
 800c410:	08013ea8 	.word	0x08013ea8
 800c414:	0ffffffe 	.word	0x0ffffffe

0800c418 <MQTT_SerializePublishHeaderWithoutTopic>:

MQTTStatus_t MQTT_SerializePublishHeaderWithoutTopic( const MQTTPublishInfo_t * pPublishInfo,
                                                      size_t remainingLength,
                                                      uint8_t * pBuffer,
                                                      size_t * headerSize )
{
 800c418:	b580      	push	{r7, lr}
 800c41a:	b088      	sub	sp, #32
 800c41c:	af00      	add	r7, sp, #0
 800c41e:	60f8      	str	r0, [r7, #12]
 800c420:	60b9      	str	r1, [r7, #8]
 800c422:	607a      	str	r2, [r7, #4]
 800c424:	603b      	str	r3, [r7, #0]
    size_t headerLength;
    uint8_t * pIndex;
    MQTTStatus_t status = MQTTSuccess;
 800c426:	2300      	movs	r3, #0
 800c428:	77bb      	strb	r3, [r7, #30]

    /* The first byte of a PUBLISH packet contains the packet type and flags. */
    uint8_t publishFlags = MQTT_PACKET_TYPE_PUBLISH;
 800c42a:	2330      	movs	r3, #48	; 0x30
 800c42c:	77fb      	strb	r3, [r7, #31]

    /* Get the start address of the buffer. */
    pIndex = pBuffer;
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	61bb      	str	r3, [r7, #24]

    /* Length of serialized packet = First byte
     *                               + Length of encoded remaining length
     *                               + Encoded topic length. */
    headerLength = 1U + remainingLengthEncodedSize( remainingLength ) + 2U;
 800c432:	68b8      	ldr	r0, [r7, #8]
 800c434:	f7ff fedf 	bl	800c1f6 <remainingLengthEncodedSize>
 800c438:	4603      	mov	r3, r0
 800c43a:	3303      	adds	r3, #3
 800c43c:	617b      	str	r3, [r7, #20]

    if( pPublishInfo->qos == MQTTQoS1 )
 800c43e:	68fb      	ldr	r3, [r7, #12]
 800c440:	781b      	ldrb	r3, [r3, #0]
 800c442:	2b01      	cmp	r3, #1
 800c444:	d104      	bne.n	800c450 <MQTT_SerializePublishHeaderWithoutTopic+0x38>
    {
        LogDebug( ( "Adding QoS as QoS1 in PUBLISH flags." ) );
        UINT8_SET_BIT( publishFlags, MQTT_PUBLISH_FLAG_QOS1 );
 800c446:	7ffb      	ldrb	r3, [r7, #31]
 800c448:	f043 0302 	orr.w	r3, r3, #2
 800c44c:	77fb      	strb	r3, [r7, #31]
 800c44e:	e007      	b.n	800c460 <MQTT_SerializePublishHeaderWithoutTopic+0x48>
    }
    else if( pPublishInfo->qos == MQTTQoS2 )
 800c450:	68fb      	ldr	r3, [r7, #12]
 800c452:	781b      	ldrb	r3, [r3, #0]
 800c454:	2b02      	cmp	r3, #2
 800c456:	d103      	bne.n	800c460 <MQTT_SerializePublishHeaderWithoutTopic+0x48>
    {
        LogDebug( ( "Adding QoS as QoS2 in PUBLISH flags." ) );
        UINT8_SET_BIT( publishFlags, MQTT_PUBLISH_FLAG_QOS2 );
 800c458:	7ffb      	ldrb	r3, [r7, #31]
 800c45a:	f043 0304 	orr.w	r3, r3, #4
 800c45e:	77fb      	strb	r3, [r7, #31]
    else
    {
        /* Empty else MISRA 15.7 */
    }

    if( pPublishInfo->retain == true )
 800c460:	68fb      	ldr	r3, [r7, #12]
 800c462:	785b      	ldrb	r3, [r3, #1]
 800c464:	2b00      	cmp	r3, #0
 800c466:	d003      	beq.n	800c470 <MQTT_SerializePublishHeaderWithoutTopic+0x58>
    {
        LogDebug( ( "Adding retain bit in PUBLISH flags." ) );
        UINT8_SET_BIT( publishFlags, MQTT_PUBLISH_FLAG_RETAIN );
 800c468:	7ffb      	ldrb	r3, [r7, #31]
 800c46a:	f043 0301 	orr.w	r3, r3, #1
 800c46e:	77fb      	strb	r3, [r7, #31]
    }

    if( pPublishInfo->dup == true )
 800c470:	68fb      	ldr	r3, [r7, #12]
 800c472:	789b      	ldrb	r3, [r3, #2]
 800c474:	2b00      	cmp	r3, #0
 800c476:	d003      	beq.n	800c480 <MQTT_SerializePublishHeaderWithoutTopic+0x68>
    {
        LogDebug( ( "Adding dup bit in PUBLISH flags." ) );
        UINT8_SET_BIT( publishFlags, MQTT_PUBLISH_FLAG_DUP );
 800c478:	7ffb      	ldrb	r3, [r7, #31]
 800c47a:	f043 0308 	orr.w	r3, r3, #8
 800c47e:	77fb      	strb	r3, [r7, #31]
    }

    *pIndex = publishFlags;
 800c480:	69bb      	ldr	r3, [r7, #24]
 800c482:	7ffa      	ldrb	r2, [r7, #31]
 800c484:	701a      	strb	r2, [r3, #0]
    pIndex++;
 800c486:	69bb      	ldr	r3, [r7, #24]
 800c488:	3301      	adds	r3, #1
 800c48a:	61bb      	str	r3, [r7, #24]

    /* The "Remaining length" is encoded from the second byte. */
    pIndex = encodeRemainingLength( pIndex, remainingLength );
 800c48c:	68b9      	ldr	r1, [r7, #8]
 800c48e:	69b8      	ldr	r0, [r7, #24]
 800c490:	f7ff fed2 	bl	800c238 <encodeRemainingLength>
 800c494:	61b8      	str	r0, [r7, #24]

    /* The first byte of a UTF-8 string is the high byte of the string length. */
    *pIndex = UINT16_HIGH_BYTE( pPublishInfo->topicNameLength );
 800c496:	68fb      	ldr	r3, [r7, #12]
 800c498:	891b      	ldrh	r3, [r3, #8]
 800c49a:	0a1b      	lsrs	r3, r3, #8
 800c49c:	b29b      	uxth	r3, r3
 800c49e:	b2da      	uxtb	r2, r3
 800c4a0:	69bb      	ldr	r3, [r7, #24]
 800c4a2:	701a      	strb	r2, [r3, #0]
    pIndex++;
 800c4a4:	69bb      	ldr	r3, [r7, #24]
 800c4a6:	3301      	adds	r3, #1
 800c4a8:	61bb      	str	r3, [r7, #24]

    /* The second byte of a UTF-8 string is the low byte of the string length. */
    *pIndex = UINT16_LOW_BYTE( pPublishInfo->topicNameLength );
 800c4aa:	68fb      	ldr	r3, [r7, #12]
 800c4ac:	891b      	ldrh	r3, [r3, #8]
 800c4ae:	b2da      	uxtb	r2, r3
 800c4b0:	69bb      	ldr	r3, [r7, #24]
 800c4b2:	701a      	strb	r2, [r3, #0]
    pIndex++;
 800c4b4:	69bb      	ldr	r3, [r7, #24]
 800c4b6:	3301      	adds	r3, #1
 800c4b8:	61bb      	str	r3, [r7, #24]

    *headerSize = headerLength;
 800c4ba:	683b      	ldr	r3, [r7, #0]
 800c4bc:	697a      	ldr	r2, [r7, #20]
 800c4be:	601a      	str	r2, [r3, #0]

    return status;
 800c4c0:	7fbb      	ldrb	r3, [r7, #30]
}
 800c4c2:	4618      	mov	r0, r3
 800c4c4:	3720      	adds	r7, #32
 800c4c6:	46bd      	mov	sp, r7
 800c4c8:	bd80      	pop	{r7, pc}

0800c4ca <getRemainingLength>:
    assert( ( ( size_t ) ( pIndex - pFixedBuffer->pBuffer ) ) <= pFixedBuffer->size );
}

static size_t getRemainingLength( TransportRecv_t recvFunc,
                                  NetworkContext_t * pNetworkContext )
{
 800c4ca:	b580      	push	{r7, lr}
 800c4cc:	b088      	sub	sp, #32
 800c4ce:	af00      	add	r7, sp, #0
 800c4d0:	6078      	str	r0, [r7, #4]
 800c4d2:	6039      	str	r1, [r7, #0]
    size_t remainingLength = 0, multiplier = 1, bytesDecoded = 0, expectedSize = 0;
 800c4d4:	2300      	movs	r3, #0
 800c4d6:	61fb      	str	r3, [r7, #28]
 800c4d8:	2301      	movs	r3, #1
 800c4da:	61bb      	str	r3, [r7, #24]
 800c4dc:	2300      	movs	r3, #0
 800c4de:	617b      	str	r3, [r7, #20]
 800c4e0:	2300      	movs	r3, #0
 800c4e2:	613b      	str	r3, [r7, #16]
    uint8_t encodedByte = 0;
 800c4e4:	2300      	movs	r3, #0
 800c4e6:	72fb      	strb	r3, [r7, #11]
    int32_t bytesReceived = 0;
 800c4e8:	2300      	movs	r3, #0
 800c4ea:	60fb      	str	r3, [r7, #12]

    /* This algorithm is copied from the MQTT v3.1.1 spec. */
    do
    {
        if( multiplier > 2097152U ) /* 128 ^ 3 */
 800c4ec:	69bb      	ldr	r3, [r7, #24]
 800c4ee:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c4f2:	d903      	bls.n	800c4fc <getRemainingLength+0x32>
        {
            remainingLength = MQTT_REMAINING_LENGTH_INVALID;
 800c4f4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800c4f8:	61fb      	str	r3, [r7, #28]
 800c4fa:	e01c      	b.n	800c536 <getRemainingLength+0x6c>
        }
        else
        {
            bytesReceived = recvFunc( pNetworkContext, &encodedByte, 1U );
 800c4fc:	f107 010b 	add.w	r1, r7, #11
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	2201      	movs	r2, #1
 800c504:	6838      	ldr	r0, [r7, #0]
 800c506:	4798      	blx	r3
 800c508:	60f8      	str	r0, [r7, #12]

            if( bytesReceived == 1 )
 800c50a:	68fb      	ldr	r3, [r7, #12]
 800c50c:	2b01      	cmp	r3, #1
 800c50e:	d10f      	bne.n	800c530 <getRemainingLength+0x66>
            {
                remainingLength += ( ( size_t ) encodedByte & 0x7FU ) * multiplier;
 800c510:	7afb      	ldrb	r3, [r7, #11]
 800c512:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c516:	69ba      	ldr	r2, [r7, #24]
 800c518:	fb02 f303 	mul.w	r3, r2, r3
 800c51c:	69fa      	ldr	r2, [r7, #28]
 800c51e:	4413      	add	r3, r2
 800c520:	61fb      	str	r3, [r7, #28]
                multiplier *= 128U;
 800c522:	69bb      	ldr	r3, [r7, #24]
 800c524:	01db      	lsls	r3, r3, #7
 800c526:	61bb      	str	r3, [r7, #24]
                bytesDecoded++;
 800c528:	697b      	ldr	r3, [r7, #20]
 800c52a:	3301      	adds	r3, #1
 800c52c:	617b      	str	r3, [r7, #20]
 800c52e:	e002      	b.n	800c536 <getRemainingLength+0x6c>
            }
            else
            {
                remainingLength = MQTT_REMAINING_LENGTH_INVALID;
 800c530:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800c534:	61fb      	str	r3, [r7, #28]
            }
        }

        if( remainingLength == MQTT_REMAINING_LENGTH_INVALID )
 800c536:	69fb      	ldr	r3, [r7, #28]
 800c538:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c53c:	d004      	beq.n	800c548 <getRemainingLength+0x7e>
        {
            break;
        }
    } while( ( encodedByte & 0x80U ) != 0U );
 800c53e:	7afb      	ldrb	r3, [r7, #11]
 800c540:	b25b      	sxtb	r3, r3
 800c542:	2b00      	cmp	r3, #0
 800c544:	dbd2      	blt.n	800c4ec <getRemainingLength+0x22>
 800c546:	e000      	b.n	800c54a <getRemainingLength+0x80>
            break;
 800c548:	bf00      	nop

    /* Check that the decoded remaining length conforms to the MQTT specification. */
    if( remainingLength != MQTT_REMAINING_LENGTH_INVALID )
 800c54a:	69fb      	ldr	r3, [r7, #28]
 800c54c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c550:	d00a      	beq.n	800c568 <getRemainingLength+0x9e>
    {
        expectedSize = remainingLengthEncodedSize( remainingLength );
 800c552:	69f8      	ldr	r0, [r7, #28]
 800c554:	f7ff fe4f 	bl	800c1f6 <remainingLengthEncodedSize>
 800c558:	6138      	str	r0, [r7, #16]

        if( bytesDecoded != expectedSize )
 800c55a:	697a      	ldr	r2, [r7, #20]
 800c55c:	693b      	ldr	r3, [r7, #16]
 800c55e:	429a      	cmp	r2, r3
 800c560:	d002      	beq.n	800c568 <getRemainingLength+0x9e>
        {
            remainingLength = MQTT_REMAINING_LENGTH_INVALID;
 800c562:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800c566:	61fb      	str	r3, [r7, #28]
        }
    }

    return remainingLength;
 800c568:	69fb      	ldr	r3, [r7, #28]
}
 800c56a:	4618      	mov	r0, r3
 800c56c:	3720      	adds	r7, #32
 800c56e:	46bd      	mov	sp, r7
 800c570:	bd80      	pop	{r7, pc}

0800c572 <incomingPacketValid>:
}

/*-----------------------------------------------------------*/

static bool incomingPacketValid( uint8_t packetType )
{
 800c572:	b480      	push	{r7}
 800c574:	b085      	sub	sp, #20
 800c576:	af00      	add	r7, sp, #0
 800c578:	4603      	mov	r3, r0
 800c57a:	71fb      	strb	r3, [r7, #7]
    bool status = false;
 800c57c:	2300      	movs	r3, #0
 800c57e:	73fb      	strb	r3, [r7, #15]

    /* Check packet type. Mask out lower bits to ignore flags. */
    switch( packetType & 0xF0U )
 800c580:	79fb      	ldrb	r3, [r7, #7]
 800c582:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c586:	2bd0      	cmp	r3, #208	; 0xd0
 800c588:	d01d      	beq.n	800c5c6 <incomingPacketValid+0x54>
 800c58a:	2bd0      	cmp	r3, #208	; 0xd0
 800c58c:	d826      	bhi.n	800c5dc <incomingPacketValid+0x6a>
 800c58e:	2bb0      	cmp	r3, #176	; 0xb0
 800c590:	d019      	beq.n	800c5c6 <incomingPacketValid+0x54>
 800c592:	2bb0      	cmp	r3, #176	; 0xb0
 800c594:	d822      	bhi.n	800c5dc <incomingPacketValid+0x6a>
 800c596:	2b90      	cmp	r3, #144	; 0x90
 800c598:	d015      	beq.n	800c5c6 <incomingPacketValid+0x54>
 800c59a:	2b90      	cmp	r3, #144	; 0x90
 800c59c:	d81e      	bhi.n	800c5dc <incomingPacketValid+0x6a>
 800c59e:	2b70      	cmp	r3, #112	; 0x70
 800c5a0:	d011      	beq.n	800c5c6 <incomingPacketValid+0x54>
 800c5a2:	2b70      	cmp	r3, #112	; 0x70
 800c5a4:	d81a      	bhi.n	800c5dc <incomingPacketValid+0x6a>
 800c5a6:	2b60      	cmp	r3, #96	; 0x60
 800c5a8:	d010      	beq.n	800c5cc <incomingPacketValid+0x5a>
 800c5aa:	2b60      	cmp	r3, #96	; 0x60
 800c5ac:	d816      	bhi.n	800c5dc <incomingPacketValid+0x6a>
 800c5ae:	2b50      	cmp	r3, #80	; 0x50
 800c5b0:	d009      	beq.n	800c5c6 <incomingPacketValid+0x54>
 800c5b2:	2b50      	cmp	r3, #80	; 0x50
 800c5b4:	d812      	bhi.n	800c5dc <incomingPacketValid+0x6a>
 800c5b6:	2b40      	cmp	r3, #64	; 0x40
 800c5b8:	d005      	beq.n	800c5c6 <incomingPacketValid+0x54>
 800c5ba:	2b40      	cmp	r3, #64	; 0x40
 800c5bc:	d80e      	bhi.n	800c5dc <incomingPacketValid+0x6a>
 800c5be:	2b20      	cmp	r3, #32
 800c5c0:	d001      	beq.n	800c5c6 <incomingPacketValid+0x54>
 800c5c2:	2b30      	cmp	r3, #48	; 0x30
 800c5c4:	d10a      	bne.n	800c5dc <incomingPacketValid+0x6a>
        case MQTT_PACKET_TYPE_PUBREC:
        case MQTT_PACKET_TYPE_PUBCOMP:
        case MQTT_PACKET_TYPE_SUBACK:
        case MQTT_PACKET_TYPE_UNSUBACK:
        case MQTT_PACKET_TYPE_PINGRESP:
            status = true;
 800c5c6:	2301      	movs	r3, #1
 800c5c8:	73fb      	strb	r3, [r7, #15]
            break;
 800c5ca:	e00a      	b.n	800c5e2 <incomingPacketValid+0x70>

        case ( MQTT_PACKET_TYPE_PUBREL & 0xF0U ):

            /* The second bit of a PUBREL must be set. */
            if( ( packetType & 0x02U ) > 0U )
 800c5cc:	79fb      	ldrb	r3, [r7, #7]
 800c5ce:	f003 0302 	and.w	r3, r3, #2
 800c5d2:	2b00      	cmp	r3, #0
 800c5d4:	d004      	beq.n	800c5e0 <incomingPacketValid+0x6e>
            {
                status = true;
 800c5d6:	2301      	movs	r3, #1
 800c5d8:	73fb      	strb	r3, [r7, #15]
            }

            break;
 800c5da:	e001      	b.n	800c5e0 <incomingPacketValid+0x6e>

        /* Any other packet type is invalid. */
        default:
            LogWarn( ( "Incoming packet invalid: Packet type=%u.",
                       ( unsigned int ) packetType ) );
            break;
 800c5dc:	bf00      	nop
 800c5de:	e000      	b.n	800c5e2 <incomingPacketValid+0x70>
            break;
 800c5e0:	bf00      	nop
    }

    return status;
 800c5e2:	7bfb      	ldrb	r3, [r7, #15]
}
 800c5e4:	4618      	mov	r0, r3
 800c5e6:	3714      	adds	r7, #20
 800c5e8:	46bd      	mov	sp, r7
 800c5ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5ee:	4770      	bx	lr

0800c5f0 <logConnackResponse>:
}

/*-----------------------------------------------------------*/

static void logConnackResponse( uint8_t responseCode )
{
 800c5f0:	b5b0      	push	{r4, r5, r7, lr}
 800c5f2:	b088      	sub	sp, #32
 800c5f4:	af00      	add	r7, sp, #0
 800c5f6:	4603      	mov	r3, r0
 800c5f8:	71fb      	strb	r3, [r7, #7]
    const char * const pConnackResponses[ 6 ] =
 800c5fa:	4b0c      	ldr	r3, [pc, #48]	; (800c62c <logConnackResponse+0x3c>)
 800c5fc:	f107 0408 	add.w	r4, r7, #8
 800c600:	461d      	mov	r5, r3
 800c602:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c604:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c606:	e895 0003 	ldmia.w	r5, {r0, r1}
 800c60a:	e884 0003 	stmia.w	r4, {r0, r1}

    /* Avoid unused parameter warning when assert and logs are disabled. */
    ( void ) responseCode;
    ( void ) pConnackResponses;

    assert( responseCode <= 5U );
 800c60e:	79fb      	ldrb	r3, [r7, #7]
 800c610:	2b05      	cmp	r3, #5
 800c612:	d906      	bls.n	800c622 <logConnackResponse+0x32>
 800c614:	4b06      	ldr	r3, [pc, #24]	; (800c630 <logConnackResponse+0x40>)
 800c616:	4a07      	ldr	r2, [pc, #28]	; (800c634 <logConnackResponse+0x44>)
 800c618:	f240 412f 	movw	r1, #1071	; 0x42f
 800c61c:	4806      	ldr	r0, [pc, #24]	; (800c638 <logConnackResponse+0x48>)
 800c61e:	f004 febd 	bl	801139c <__assert_func>
    else
    {
        /* Log an error based on the CONNACK response code. */
        LogError( ( "%s", pConnackResponses[ responseCode ] ) );
    }
}
 800c622:	bf00      	nop
 800c624:	3720      	adds	r7, #32
 800c626:	46bd      	mov	sp, r7
 800c628:	bdb0      	pop	{r4, r5, r7, pc}
 800c62a:	bf00      	nop
 800c62c:	08013fd4 	.word	0x08013fd4
 800c630:	08013fc0 	.word	0x08013fc0
 800c634:	080145f8 	.word	0x080145f8
 800c638:	08013e40 	.word	0x08013e40

0800c63c <deserializeConnack>:

/*-----------------------------------------------------------*/

static MQTTStatus_t deserializeConnack( const MQTTPacketInfo_t * pConnack,
                                        bool * pSessionPresent )
{
 800c63c:	b580      	push	{r7, lr}
 800c63e:	b084      	sub	sp, #16
 800c640:	af00      	add	r7, sp, #0
 800c642:	6078      	str	r0, [r7, #4]
 800c644:	6039      	str	r1, [r7, #0]
    MQTTStatus_t status = MQTTSuccess;
 800c646:	2300      	movs	r3, #0
 800c648:	73fb      	strb	r3, [r7, #15]
    const uint8_t * pRemainingData = NULL;
 800c64a:	2300      	movs	r3, #0
 800c64c:	60bb      	str	r3, [r7, #8]

    assert( pConnack != NULL );
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	2b00      	cmp	r3, #0
 800c652:	d106      	bne.n	800c662 <deserializeConnack+0x26>
 800c654:	4b2a      	ldr	r3, [pc, #168]	; (800c700 <deserializeConnack+0xc4>)
 800c656:	4a2b      	ldr	r2, [pc, #172]	; (800c704 <deserializeConnack+0xc8>)
 800c658:	f240 4145 	movw	r1, #1093	; 0x445
 800c65c:	482a      	ldr	r0, [pc, #168]	; (800c708 <deserializeConnack+0xcc>)
 800c65e:	f004 fe9d 	bl	801139c <__assert_func>
    assert( pSessionPresent != NULL );
 800c662:	683b      	ldr	r3, [r7, #0]
 800c664:	2b00      	cmp	r3, #0
 800c666:	d106      	bne.n	800c676 <deserializeConnack+0x3a>
 800c668:	4b28      	ldr	r3, [pc, #160]	; (800c70c <deserializeConnack+0xd0>)
 800c66a:	4a26      	ldr	r2, [pc, #152]	; (800c704 <deserializeConnack+0xc8>)
 800c66c:	f240 4146 	movw	r1, #1094	; 0x446
 800c670:	4825      	ldr	r0, [pc, #148]	; (800c708 <deserializeConnack+0xcc>)
 800c672:	f004 fe93 	bl	801139c <__assert_func>
    pRemainingData = pConnack->pRemainingData;
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	685b      	ldr	r3, [r3, #4]
 800c67a:	60bb      	str	r3, [r7, #8]

    /* According to MQTT 3.1.1, the second byte of CONNACK must specify a
     * "Remaining length" of 2. */
    if( pConnack->remainingLength != MQTT_PACKET_CONNACK_REMAINING_LENGTH )
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	689b      	ldr	r3, [r3, #8]
 800c680:	2b02      	cmp	r3, #2
 800c682:	d002      	beq.n	800c68a <deserializeConnack+0x4e>
    {
        LogError( ( "CONNACK does not have remaining length of %u.",
                    ( unsigned int ) MQTT_PACKET_CONNACK_REMAINING_LENGTH ) );

        status = MQTTBadResponse;
 800c684:	2305      	movs	r3, #5
 800c686:	73fb      	strb	r3, [r7, #15]
 800c688:	e01d      	b.n	800c6c6 <deserializeConnack+0x8a>
    }

    /* Check the reserved bits in CONNACK. The high 7 bits of the third byte
     * in CONNACK must be 0. */
    else if( ( pRemainingData[ 0 ] | 0x01U ) != 0x01U )
 800c68a:	68bb      	ldr	r3, [r7, #8]
 800c68c:	781b      	ldrb	r3, [r3, #0]
 800c68e:	f043 0301 	orr.w	r3, r3, #1
 800c692:	b2db      	uxtb	r3, r3
 800c694:	2b01      	cmp	r3, #1
 800c696:	d002      	beq.n	800c69e <deserializeConnack+0x62>
    {
        LogError( ( "Reserved bits in CONNACK incorrect." ) );

        status = MQTTBadResponse;
 800c698:	2305      	movs	r3, #5
 800c69a:	73fb      	strb	r3, [r7, #15]
 800c69c:	e013      	b.n	800c6c6 <deserializeConnack+0x8a>
    }
    else
    {
        /* Determine if the "Session Present" bit is set. This is the lowest bit of
         * the third byte in CONNACK. */
        if( ( pRemainingData[ 0 ] & MQTT_PACKET_CONNACK_SESSION_PRESENT_MASK )
 800c69e:	68bb      	ldr	r3, [r7, #8]
 800c6a0:	781b      	ldrb	r3, [r3, #0]
 800c6a2:	f003 0301 	and.w	r3, r3, #1
 800c6a6:	2b00      	cmp	r3, #0
 800c6a8:	d00a      	beq.n	800c6c0 <deserializeConnack+0x84>
            == MQTT_PACKET_CONNACK_SESSION_PRESENT_MASK )
        {
            LogDebug( ( "CONNACK session present bit set." ) );
            *pSessionPresent = true;
 800c6aa:	683b      	ldr	r3, [r7, #0]
 800c6ac:	2201      	movs	r2, #1
 800c6ae:	701a      	strb	r2, [r3, #0]

            /* MQTT 3.1.1 specifies that the fourth byte in CONNACK must be 0 if the
             * "Session Present" bit is set. */
            if( pRemainingData[ 1 ] != 0U )
 800c6b0:	68bb      	ldr	r3, [r7, #8]
 800c6b2:	3301      	adds	r3, #1
 800c6b4:	781b      	ldrb	r3, [r3, #0]
 800c6b6:	2b00      	cmp	r3, #0
 800c6b8:	d005      	beq.n	800c6c6 <deserializeConnack+0x8a>
            {
                LogError( ( "Session Present bit is set, but connect return code in CONNACK is %u (nonzero).",
                            ( unsigned int ) pRemainingData[ 1 ] ) );
                status = MQTTBadResponse;
 800c6ba:	2305      	movs	r3, #5
 800c6bc:	73fb      	strb	r3, [r7, #15]
 800c6be:	e002      	b.n	800c6c6 <deserializeConnack+0x8a>
            }
        }
        else
        {
            LogDebug( ( "CONNACK session present bit not set." ) );
            *pSessionPresent = false;
 800c6c0:	683b      	ldr	r3, [r7, #0]
 800c6c2:	2200      	movs	r2, #0
 800c6c4:	701a      	strb	r2, [r3, #0]
        }
    }

    if( status == MQTTSuccess )
 800c6c6:	7bfb      	ldrb	r3, [r7, #15]
 800c6c8:	2b00      	cmp	r3, #0
 800c6ca:	d114      	bne.n	800c6f6 <deserializeConnack+0xba>
    {
        /* In MQTT 3.1.1, only values 0 through 5 are valid CONNACK response codes. */
        if( pRemainingData[ 1 ] > 5U )
 800c6cc:	68bb      	ldr	r3, [r7, #8]
 800c6ce:	3301      	adds	r3, #1
 800c6d0:	781b      	ldrb	r3, [r3, #0]
 800c6d2:	2b05      	cmp	r3, #5
 800c6d4:	d902      	bls.n	800c6dc <deserializeConnack+0xa0>
        {
            LogError( ( "CONNACK response %u is invalid.",
                        ( unsigned int ) pRemainingData[ 1 ] ) );

            status = MQTTBadResponse;
 800c6d6:	2305      	movs	r3, #5
 800c6d8:	73fb      	strb	r3, [r7, #15]
 800c6da:	e00c      	b.n	800c6f6 <deserializeConnack+0xba>
        }
        else
        {
            /* Print the appropriate message for the CONNACK response code if logs are
             * enabled. */
            logConnackResponse( pRemainingData[ 1 ] );
 800c6dc:	68bb      	ldr	r3, [r7, #8]
 800c6de:	3301      	adds	r3, #1
 800c6e0:	781b      	ldrb	r3, [r3, #0]
 800c6e2:	4618      	mov	r0, r3
 800c6e4:	f7ff ff84 	bl	800c5f0 <logConnackResponse>

            /* A nonzero CONNACK response code means the connection was refused. */
            if( pRemainingData[ 1 ] > 0U )
 800c6e8:	68bb      	ldr	r3, [r7, #8]
 800c6ea:	3301      	adds	r3, #1
 800c6ec:	781b      	ldrb	r3, [r3, #0]
 800c6ee:	2b00      	cmp	r3, #0
 800c6f0:	d001      	beq.n	800c6f6 <deserializeConnack+0xba>
            {
                status = MQTTServerRefused;
 800c6f2:	2306      	movs	r3, #6
 800c6f4:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return status;
 800c6f6:	7bfb      	ldrb	r3, [r7, #15]
}
 800c6f8:	4618      	mov	r0, r3
 800c6fa:	3710      	adds	r7, #16
 800c6fc:	46bd      	mov	sp, r7
 800c6fe:	bd80      	pop	{r7, pc}
 800c700:	08013fec 	.word	0x08013fec
 800c704:	0801460c 	.word	0x0801460c
 800c708:	08013e40 	.word	0x08013e40
 800c70c:	08014000 	.word	0x08014000

0800c710 <readSubackStatus>:

/*-----------------------------------------------------------*/

static MQTTStatus_t readSubackStatus( size_t statusCount,
                                      const uint8_t * pStatusStart )
{
 800c710:	b580      	push	{r7, lr}
 800c712:	b086      	sub	sp, #24
 800c714:	af00      	add	r7, sp, #0
 800c716:	6078      	str	r0, [r7, #4]
 800c718:	6039      	str	r1, [r7, #0]
    MQTTStatus_t status = MQTTSuccess;
 800c71a:	2300      	movs	r3, #0
 800c71c:	75fb      	strb	r3, [r7, #23]
    uint8_t subscriptionStatus = 0;
 800c71e:	2300      	movs	r3, #0
 800c720:	73fb      	strb	r3, [r7, #15]
    size_t i = 0;
 800c722:	2300      	movs	r3, #0
 800c724:	613b      	str	r3, [r7, #16]

    assert( pStatusStart != NULL );
 800c726:	683b      	ldr	r3, [r7, #0]
 800c728:	2b00      	cmp	r3, #0
 800c72a:	d106      	bne.n	800c73a <readSubackStatus+0x2a>
 800c72c:	4b17      	ldr	r3, [pc, #92]	; (800c78c <readSubackStatus+0x7c>)
 800c72e:	4a18      	ldr	r2, [pc, #96]	; (800c790 <readSubackStatus+0x80>)
 800c730:	f240 41e7 	movw	r1, #1255	; 0x4e7
 800c734:	4817      	ldr	r0, [pc, #92]	; (800c794 <readSubackStatus+0x84>)
 800c736:	f004 fe31 	bl	801139c <__assert_func>

    /* Iterate through each status byte in the SUBACK packet. */
    for( i = 0; i < statusCount; i++ )
 800c73a:	2300      	movs	r3, #0
 800c73c:	613b      	str	r3, [r7, #16]
 800c73e:	e019      	b.n	800c774 <readSubackStatus+0x64>
    {
        /* Read a single status byte in SUBACK. */
        subscriptionStatus = pStatusStart[ i ];
 800c740:	683a      	ldr	r2, [r7, #0]
 800c742:	693b      	ldr	r3, [r7, #16]
 800c744:	4413      	add	r3, r2
 800c746:	781b      	ldrb	r3, [r3, #0]
 800c748:	73fb      	strb	r3, [r7, #15]

        /* MQTT 3.1.1 defines the following values as status codes. */
        switch( subscriptionStatus )
 800c74a:	7bfb      	ldrb	r3, [r7, #15]
 800c74c:	2b02      	cmp	r3, #2
 800c74e:	dc02      	bgt.n	800c756 <readSubackStatus+0x46>
 800c750:	2b00      	cmp	r3, #0
 800c752:	da08      	bge.n	800c766 <readSubackStatus+0x56>
 800c754:	e004      	b.n	800c760 <readSubackStatus+0x50>
 800c756:	2b80      	cmp	r3, #128	; 0x80
 800c758:	d102      	bne.n	800c760 <readSubackStatus+0x50>
            case 0x80:

                LogWarn( ( "Topic filter %lu refused.", ( unsigned long ) i ) );

                /* Application should remove subscription from the list */
                status = MQTTServerRefused;
 800c75a:	2306      	movs	r3, #6
 800c75c:	75fb      	strb	r3, [r7, #23]

                break;
 800c75e:	e003      	b.n	800c768 <readSubackStatus+0x58>

            default:
                LogError( ( "Bad SUBSCRIBE status %u.",
                            ( unsigned int ) subscriptionStatus ) );

                status = MQTTBadResponse;
 800c760:	2305      	movs	r3, #5
 800c762:	75fb      	strb	r3, [r7, #23]

                break;
 800c764:	e000      	b.n	800c768 <readSubackStatus+0x58>
                break;
 800c766:	bf00      	nop
        }

        /* Stop parsing the subscription statuses if a bad response was received. */
        if( status == MQTTBadResponse )
 800c768:	7dfb      	ldrb	r3, [r7, #23]
 800c76a:	2b05      	cmp	r3, #5
 800c76c:	d007      	beq.n	800c77e <readSubackStatus+0x6e>
    for( i = 0; i < statusCount; i++ )
 800c76e:	693b      	ldr	r3, [r7, #16]
 800c770:	3301      	adds	r3, #1
 800c772:	613b      	str	r3, [r7, #16]
 800c774:	693a      	ldr	r2, [r7, #16]
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	429a      	cmp	r2, r3
 800c77a:	d3e1      	bcc.n	800c740 <readSubackStatus+0x30>
 800c77c:	e000      	b.n	800c780 <readSubackStatus+0x70>
        {
            break;
 800c77e:	bf00      	nop
        }
    }

    return status;
 800c780:	7dfb      	ldrb	r3, [r7, #23]
}
 800c782:	4618      	mov	r0, r3
 800c784:	3718      	adds	r7, #24
 800c786:	46bd      	mov	sp, r7
 800c788:	bd80      	pop	{r7, pc}
 800c78a:	bf00      	nop
 800c78c:	0801404c 	.word	0x0801404c
 800c790:	08014620 	.word	0x08014620
 800c794:	08013e40 	.word	0x08013e40

0800c798 <deserializeSuback>:

/*-----------------------------------------------------------*/

static MQTTStatus_t deserializeSuback( const MQTTPacketInfo_t * pSuback,
                                       uint16_t * pPacketIdentifier )
{
 800c798:	b580      	push	{r7, lr}
 800c79a:	b086      	sub	sp, #24
 800c79c:	af00      	add	r7, sp, #0
 800c79e:	6078      	str	r0, [r7, #4]
 800c7a0:	6039      	str	r1, [r7, #0]
    MQTTStatus_t status = MQTTSuccess;
 800c7a2:	2300      	movs	r3, #0
 800c7a4:	75fb      	strb	r3, [r7, #23]
    size_t remainingLength;
    const uint8_t * pVariableHeader = NULL;
 800c7a6:	2300      	movs	r3, #0
 800c7a8:	613b      	str	r3, [r7, #16]

    assert( pSuback != NULL );
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	2b00      	cmp	r3, #0
 800c7ae:	d106      	bne.n	800c7be <deserializeSuback+0x26>
 800c7b0:	4b1f      	ldr	r3, [pc, #124]	; (800c830 <deserializeSuback+0x98>)
 800c7b2:	4a20      	ldr	r2, [pc, #128]	; (800c834 <deserializeSuback+0x9c>)
 800c7b4:	f44f 61a4 	mov.w	r1, #1312	; 0x520
 800c7b8:	481f      	ldr	r0, [pc, #124]	; (800c838 <deserializeSuback+0xa0>)
 800c7ba:	f004 fdef 	bl	801139c <__assert_func>
    assert( pPacketIdentifier != NULL );
 800c7be:	683b      	ldr	r3, [r7, #0]
 800c7c0:	2b00      	cmp	r3, #0
 800c7c2:	d106      	bne.n	800c7d2 <deserializeSuback+0x3a>
 800c7c4:	4b1d      	ldr	r3, [pc, #116]	; (800c83c <deserializeSuback+0xa4>)
 800c7c6:	4a1b      	ldr	r2, [pc, #108]	; (800c834 <deserializeSuback+0x9c>)
 800c7c8:	f240 5121 	movw	r1, #1313	; 0x521
 800c7cc:	481a      	ldr	r0, [pc, #104]	; (800c838 <deserializeSuback+0xa0>)
 800c7ce:	f004 fde5 	bl	801139c <__assert_func>

    remainingLength = pSuback->remainingLength;
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	689b      	ldr	r3, [r3, #8]
 800c7d6:	60fb      	str	r3, [r7, #12]
    pVariableHeader = pSuback->pRemainingData;
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	685b      	ldr	r3, [r3, #4]
 800c7dc:	613b      	str	r3, [r7, #16]

    /* A SUBACK must have a remaining length of at least 3 to accommodate the
     * packet identifier and at least 1 return code. */
    if( remainingLength < 3U )
 800c7de:	68fb      	ldr	r3, [r7, #12]
 800c7e0:	2b02      	cmp	r3, #2
 800c7e2:	d802      	bhi.n	800c7ea <deserializeSuback+0x52>
    {
        LogError( ( "SUBACK cannot have a remaining length less than 3." ) );
        status = MQTTBadResponse;
 800c7e4:	2305      	movs	r3, #5
 800c7e6:	75fb      	strb	r3, [r7, #23]
 800c7e8:	e01d      	b.n	800c826 <deserializeSuback+0x8e>
    }
    else
    {
        /* Extract the packet identifier (first 2 bytes of variable header) from SUBACK. */
        *pPacketIdentifier = UINT16_DECODE( pVariableHeader );
 800c7ea:	693b      	ldr	r3, [r7, #16]
 800c7ec:	781b      	ldrb	r3, [r3, #0]
 800c7ee:	021b      	lsls	r3, r3, #8
 800c7f0:	b21a      	sxth	r2, r3
 800c7f2:	693b      	ldr	r3, [r7, #16]
 800c7f4:	3301      	adds	r3, #1
 800c7f6:	781b      	ldrb	r3, [r3, #0]
 800c7f8:	b21b      	sxth	r3, r3
 800c7fa:	4313      	orrs	r3, r2
 800c7fc:	b21b      	sxth	r3, r3
 800c7fe:	b29a      	uxth	r2, r3
 800c800:	683b      	ldr	r3, [r7, #0]
 800c802:	801a      	strh	r2, [r3, #0]

        LogDebug( ( "Packet identifier %hu.",
                    ( unsigned short ) *pPacketIdentifier ) );

        if( *pPacketIdentifier == 0U )
 800c804:	683b      	ldr	r3, [r7, #0]
 800c806:	881b      	ldrh	r3, [r3, #0]
 800c808:	2b00      	cmp	r3, #0
 800c80a:	d102      	bne.n	800c812 <deserializeSuback+0x7a>
        {
            status = MQTTBadResponse;
 800c80c:	2305      	movs	r3, #5
 800c80e:	75fb      	strb	r3, [r7, #23]
 800c810:	e009      	b.n	800c826 <deserializeSuback+0x8e>
        }
        else
        {
            status = readSubackStatus( remainingLength - sizeof( uint16_t ),
 800c812:	68fb      	ldr	r3, [r7, #12]
 800c814:	1e9a      	subs	r2, r3, #2
 800c816:	693b      	ldr	r3, [r7, #16]
 800c818:	3302      	adds	r3, #2
 800c81a:	4619      	mov	r1, r3
 800c81c:	4610      	mov	r0, r2
 800c81e:	f7ff ff77 	bl	800c710 <readSubackStatus>
 800c822:	4603      	mov	r3, r0
 800c824:	75fb      	strb	r3, [r7, #23]
                                       &pVariableHeader[ sizeof( uint16_t ) ] );
        }
    }

    return status;
 800c826:	7dfb      	ldrb	r3, [r7, #23]
}
 800c828:	4618      	mov	r0, r3
 800c82a:	3718      	adds	r7, #24
 800c82c:	46bd      	mov	sp, r7
 800c82e:	bd80      	pop	{r7, pc}
 800c830:	08014064 	.word	0x08014064
 800c834:	08014634 	.word	0x08014634
 800c838:	08013e40 	.word	0x08013e40
 800c83c:	08014074 	.word	0x08014074

0800c840 <deserializeSimpleAck>:

/*-----------------------------------------------------------*/

static MQTTStatus_t deserializeSimpleAck( const MQTTPacketInfo_t * pAck,
                                          uint16_t * pPacketIdentifier )
{
 800c840:	b580      	push	{r7, lr}
 800c842:	b084      	sub	sp, #16
 800c844:	af00      	add	r7, sp, #0
 800c846:	6078      	str	r0, [r7, #4]
 800c848:	6039      	str	r1, [r7, #0]
    MQTTStatus_t status = MQTTSuccess;
 800c84a:	2300      	movs	r3, #0
 800c84c:	73fb      	strb	r3, [r7, #15]

    assert( pAck != NULL );
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	2b00      	cmp	r3, #0
 800c852:	d106      	bne.n	800c862 <deserializeSimpleAck+0x22>
 800c854:	4b18      	ldr	r3, [pc, #96]	; (800c8b8 <deserializeSimpleAck+0x78>)
 800c856:	4a19      	ldr	r2, [pc, #100]	; (800c8bc <deserializeSimpleAck+0x7c>)
 800c858:	f240 51e1 	movw	r1, #1505	; 0x5e1
 800c85c:	4818      	ldr	r0, [pc, #96]	; (800c8c0 <deserializeSimpleAck+0x80>)
 800c85e:	f004 fd9d 	bl	801139c <__assert_func>
    assert( pPacketIdentifier != NULL );
 800c862:	683b      	ldr	r3, [r7, #0]
 800c864:	2b00      	cmp	r3, #0
 800c866:	d106      	bne.n	800c876 <deserializeSimpleAck+0x36>
 800c868:	4b16      	ldr	r3, [pc, #88]	; (800c8c4 <deserializeSimpleAck+0x84>)
 800c86a:	4a14      	ldr	r2, [pc, #80]	; (800c8bc <deserializeSimpleAck+0x7c>)
 800c86c:	f240 51e2 	movw	r1, #1506	; 0x5e2
 800c870:	4813      	ldr	r0, [pc, #76]	; (800c8c0 <deserializeSimpleAck+0x80>)
 800c872:	f004 fd93 	bl	801139c <__assert_func>

    /* Check that the "Remaining length" of the received ACK is 2. */
    if( pAck->remainingLength != MQTT_PACKET_SIMPLE_ACK_REMAINING_LENGTH )
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	689b      	ldr	r3, [r3, #8]
 800c87a:	2b02      	cmp	r3, #2
 800c87c:	d002      	beq.n	800c884 <deserializeSimpleAck+0x44>
    {
        LogError( ( "ACK does not have remaining length of %u.",
                    ( unsigned int ) MQTT_PACKET_SIMPLE_ACK_REMAINING_LENGTH ) );

        status = MQTTBadResponse;
 800c87e:	2305      	movs	r3, #5
 800c880:	73fb      	strb	r3, [r7, #15]
 800c882:	e014      	b.n	800c8ae <deserializeSimpleAck+0x6e>
    }
    else
    {
        /* Extract the packet identifier (third and fourth bytes) from ACK. */
        *pPacketIdentifier = UINT16_DECODE( pAck->pRemainingData );
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	685b      	ldr	r3, [r3, #4]
 800c888:	781b      	ldrb	r3, [r3, #0]
 800c88a:	021b      	lsls	r3, r3, #8
 800c88c:	b21a      	sxth	r2, r3
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	685b      	ldr	r3, [r3, #4]
 800c892:	3301      	adds	r3, #1
 800c894:	781b      	ldrb	r3, [r3, #0]
 800c896:	b21b      	sxth	r3, r3
 800c898:	4313      	orrs	r3, r2
 800c89a:	b21b      	sxth	r3, r3
 800c89c:	b29a      	uxth	r2, r3
 800c89e:	683b      	ldr	r3, [r7, #0]
 800c8a0:	801a      	strh	r2, [r3, #0]

        LogDebug( ( "Packet identifier %hu.",
                    ( unsigned short ) *pPacketIdentifier ) );

        /* Packet identifier cannot be 0. */
        if( *pPacketIdentifier == 0U )
 800c8a2:	683b      	ldr	r3, [r7, #0]
 800c8a4:	881b      	ldrh	r3, [r3, #0]
 800c8a6:	2b00      	cmp	r3, #0
 800c8a8:	d101      	bne.n	800c8ae <deserializeSimpleAck+0x6e>
        {
            LogError( ( "Packet identifier cannot be 0." ) );
            status = MQTTBadResponse;
 800c8aa:	2305      	movs	r3, #5
 800c8ac:	73fb      	strb	r3, [r7, #15]
        }
    }

    return status;
 800c8ae:	7bfb      	ldrb	r3, [r7, #15]
}
 800c8b0:	4618      	mov	r0, r3
 800c8b2:	3710      	adds	r7, #16
 800c8b4:	46bd      	mov	sp, r7
 800c8b6:	bd80      	pop	{r7, pc}
 800c8b8:	080140e4 	.word	0x080140e4
 800c8bc:	08014648 	.word	0x08014648
 800c8c0:	08013e40 	.word	0x08013e40
 800c8c4:	08014074 	.word	0x08014074

0800c8c8 <deserializePingresp>:

/*-----------------------------------------------------------*/

static MQTTStatus_t deserializePingresp( const MQTTPacketInfo_t * pPingresp )
{
 800c8c8:	b580      	push	{r7, lr}
 800c8ca:	b084      	sub	sp, #16
 800c8cc:	af00      	add	r7, sp, #0
 800c8ce:	6078      	str	r0, [r7, #4]
    MQTTStatus_t status = MQTTSuccess;
 800c8d0:	2300      	movs	r3, #0
 800c8d2:	73fb      	strb	r3, [r7, #15]

    assert( pPingresp != NULL );
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	2b00      	cmp	r3, #0
 800c8d8:	d106      	bne.n	800c8e8 <deserializePingresp+0x20>
 800c8da:	4b09      	ldr	r3, [pc, #36]	; (800c900 <deserializePingresp+0x38>)
 800c8dc:	4a09      	ldr	r2, [pc, #36]	; (800c904 <deserializePingresp+0x3c>)
 800c8de:	f240 6105 	movw	r1, #1541	; 0x605
 800c8e2:	4809      	ldr	r0, [pc, #36]	; (800c908 <deserializePingresp+0x40>)
 800c8e4:	f004 fd5a 	bl	801139c <__assert_func>

    /* Check the "Remaining length" (second byte) of the received PINGRESP is 0. */
    if( pPingresp->remainingLength != MQTT_PACKET_PINGRESP_REMAINING_LENGTH )
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	689b      	ldr	r3, [r3, #8]
 800c8ec:	2b00      	cmp	r3, #0
 800c8ee:	d001      	beq.n	800c8f4 <deserializePingresp+0x2c>
    {
        LogError( ( "PINGRESP does not have remaining length of %u.",
                    MQTT_PACKET_PINGRESP_REMAINING_LENGTH ) );

        status = MQTTBadResponse;
 800c8f0:	2305      	movs	r3, #5
 800c8f2:	73fb      	strb	r3, [r7, #15]
    }

    return status;
 800c8f4:	7bfb      	ldrb	r3, [r7, #15]
}
 800c8f6:	4618      	mov	r0, r3
 800c8f8:	3710      	adds	r7, #16
 800c8fa:	46bd      	mov	sp, r7
 800c8fc:	bd80      	pop	{r7, pc}
 800c8fe:	bf00      	nop
 800c900:	080140f4 	.word	0x080140f4
 800c904:	08014660 	.word	0x08014660
 800c908:	08013e40 	.word	0x08013e40

0800c90c <MQTT_SerializeConnectFixedHeader>:

uint8_t * MQTT_SerializeConnectFixedHeader( uint8_t * pIndex,
                                            const MQTTConnectInfo_t * pConnectInfo,
                                            const MQTTPublishInfo_t * pWillInfo,
                                            size_t remainingLength )
{
 800c90c:	b580      	push	{r7, lr}
 800c90e:	b086      	sub	sp, #24
 800c910:	af00      	add	r7, sp, #0
 800c912:	60f8      	str	r0, [r7, #12]
 800c914:	60b9      	str	r1, [r7, #8]
 800c916:	607a      	str	r2, [r7, #4]
 800c918:	603b      	str	r3, [r7, #0]
    uint8_t * pIndexLocal = pIndex;
 800c91a:	68fb      	ldr	r3, [r7, #12]
 800c91c:	613b      	str	r3, [r7, #16]
    uint8_t connectFlags = 0U;
 800c91e:	2300      	movs	r3, #0
 800c920:	75fb      	strb	r3, [r7, #23]

    /* The first byte in the CONNECT packet is the control packet type. */
    *pIndexLocal = MQTT_PACKET_TYPE_CONNECT;
 800c922:	693b      	ldr	r3, [r7, #16]
 800c924:	2210      	movs	r2, #16
 800c926:	701a      	strb	r2, [r3, #0]
    pIndexLocal++;
 800c928:	693b      	ldr	r3, [r7, #16]
 800c92a:	3301      	adds	r3, #1
 800c92c:	613b      	str	r3, [r7, #16]

    /* The remaining length of the CONNECT packet is encoded starting from the
     * second byte. The remaining length does not include the length of the fixed
     * header or the encoding of the remaining length. */
    pIndexLocal = encodeRemainingLength( pIndexLocal, remainingLength );
 800c92e:	6839      	ldr	r1, [r7, #0]
 800c930:	6938      	ldr	r0, [r7, #16]
 800c932:	f7ff fc81 	bl	800c238 <encodeRemainingLength>
 800c936:	6138      	str	r0, [r7, #16]

    /* The string "MQTT" is placed at the beginning of the CONNECT packet's variable
     * header. This string is 4 bytes long. */
    pIndexLocal = encodeString( pIndexLocal, "MQTT", 4 );
 800c938:	2204      	movs	r2, #4
 800c93a:	492f      	ldr	r1, [pc, #188]	; (800c9f8 <MQTT_SerializeConnectFixedHeader+0xec>)
 800c93c:	6938      	ldr	r0, [r7, #16]
 800c93e:	f7ff fcb3 	bl	800c2a8 <encodeString>
 800c942:	6138      	str	r0, [r7, #16]

    /* The MQTT protocol version is the second field of the variable header. */
    *pIndexLocal = MQTT_VERSION_3_1_1;
 800c944:	693b      	ldr	r3, [r7, #16]
 800c946:	2204      	movs	r2, #4
 800c948:	701a      	strb	r2, [r3, #0]
    pIndexLocal++;
 800c94a:	693b      	ldr	r3, [r7, #16]
 800c94c:	3301      	adds	r3, #1
 800c94e:	613b      	str	r3, [r7, #16]

    /* Set the clean session flag if needed. */
    if( pConnectInfo->cleanSession == true )
 800c950:	68bb      	ldr	r3, [r7, #8]
 800c952:	781b      	ldrb	r3, [r3, #0]
 800c954:	2b00      	cmp	r3, #0
 800c956:	d003      	beq.n	800c960 <MQTT_SerializeConnectFixedHeader+0x54>
    {
        UINT8_SET_BIT( connectFlags, MQTT_CONNECT_FLAG_CLEAN );
 800c958:	7dfb      	ldrb	r3, [r7, #23]
 800c95a:	f043 0302 	orr.w	r3, r3, #2
 800c95e:	75fb      	strb	r3, [r7, #23]
    }

    /* Set the flags for username and password if provided. */
    if( pConnectInfo->pUserName != NULL )
 800c960:	68bb      	ldr	r3, [r7, #8]
 800c962:	68db      	ldr	r3, [r3, #12]
 800c964:	2b00      	cmp	r3, #0
 800c966:	d003      	beq.n	800c970 <MQTT_SerializeConnectFixedHeader+0x64>
    {
        UINT8_SET_BIT( connectFlags, MQTT_CONNECT_FLAG_USERNAME );
 800c968:	7dfb      	ldrb	r3, [r7, #23]
 800c96a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800c96e:	75fb      	strb	r3, [r7, #23]
    }

    if( pConnectInfo->pPassword != NULL )
 800c970:	68bb      	ldr	r3, [r7, #8]
 800c972:	695b      	ldr	r3, [r3, #20]
 800c974:	2b00      	cmp	r3, #0
 800c976:	d003      	beq.n	800c980 <MQTT_SerializeConnectFixedHeader+0x74>
    {
        UINT8_SET_BIT( connectFlags, MQTT_CONNECT_FLAG_PASSWORD );
 800c978:	7dfb      	ldrb	r3, [r7, #23]
 800c97a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c97e:	75fb      	strb	r3, [r7, #23]
    }

    /* Set will flag if a Last Will and Testament is provided. */
    if( pWillInfo != NULL )
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	2b00      	cmp	r3, #0
 800c984:	d01c      	beq.n	800c9c0 <MQTT_SerializeConnectFixedHeader+0xb4>
    {
        UINT8_SET_BIT( connectFlags, MQTT_CONNECT_FLAG_WILL );
 800c986:	7dfb      	ldrb	r3, [r7, #23]
 800c988:	f043 0304 	orr.w	r3, r3, #4
 800c98c:	75fb      	strb	r3, [r7, #23]

        /* Flags only need to be changed for Will QoS 1 or 2. */
        if( pWillInfo->qos == MQTTQoS1 )
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	781b      	ldrb	r3, [r3, #0]
 800c992:	2b01      	cmp	r3, #1
 800c994:	d104      	bne.n	800c9a0 <MQTT_SerializeConnectFixedHeader+0x94>
        {
            UINT8_SET_BIT( connectFlags, MQTT_CONNECT_FLAG_WILL_QOS1 );
 800c996:	7dfb      	ldrb	r3, [r7, #23]
 800c998:	f043 0308 	orr.w	r3, r3, #8
 800c99c:	75fb      	strb	r3, [r7, #23]
 800c99e:	e007      	b.n	800c9b0 <MQTT_SerializeConnectFixedHeader+0xa4>
        }
        else if( pWillInfo->qos == MQTTQoS2 )
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	781b      	ldrb	r3, [r3, #0]
 800c9a4:	2b02      	cmp	r3, #2
 800c9a6:	d103      	bne.n	800c9b0 <MQTT_SerializeConnectFixedHeader+0xa4>
        {
            UINT8_SET_BIT( connectFlags, MQTT_CONNECT_FLAG_WILL_QOS2 );
 800c9a8:	7dfb      	ldrb	r3, [r7, #23]
 800c9aa:	f043 0310 	orr.w	r3, r3, #16
 800c9ae:	75fb      	strb	r3, [r7, #23]
        else
        {
            /* Empty else MISRA 15.7 */
        }

        if( pWillInfo->retain == true )
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	785b      	ldrb	r3, [r3, #1]
 800c9b4:	2b00      	cmp	r3, #0
 800c9b6:	d003      	beq.n	800c9c0 <MQTT_SerializeConnectFixedHeader+0xb4>
        {
            UINT8_SET_BIT( connectFlags, MQTT_CONNECT_FLAG_WILL_RETAIN );
 800c9b8:	7dfb      	ldrb	r3, [r7, #23]
 800c9ba:	f043 0320 	orr.w	r3, r3, #32
 800c9be:	75fb      	strb	r3, [r7, #23]
        }
    }

    *pIndexLocal = connectFlags;
 800c9c0:	693b      	ldr	r3, [r7, #16]
 800c9c2:	7dfa      	ldrb	r2, [r7, #23]
 800c9c4:	701a      	strb	r2, [r3, #0]
    pIndexLocal++;
 800c9c6:	693b      	ldr	r3, [r7, #16]
 800c9c8:	3301      	adds	r3, #1
 800c9ca:	613b      	str	r3, [r7, #16]

    /* Write the 2 bytes of the keep alive interval into the CONNECT packet. */
    pIndexLocal[ 0 ] = UINT16_HIGH_BYTE( pConnectInfo->keepAliveSeconds );
 800c9cc:	68bb      	ldr	r3, [r7, #8]
 800c9ce:	885b      	ldrh	r3, [r3, #2]
 800c9d0:	0a1b      	lsrs	r3, r3, #8
 800c9d2:	b29b      	uxth	r3, r3
 800c9d4:	b2da      	uxtb	r2, r3
 800c9d6:	693b      	ldr	r3, [r7, #16]
 800c9d8:	701a      	strb	r2, [r3, #0]
    pIndexLocal[ 1 ] = UINT16_LOW_BYTE( pConnectInfo->keepAliveSeconds );
 800c9da:	68bb      	ldr	r3, [r7, #8]
 800c9dc:	885a      	ldrh	r2, [r3, #2]
 800c9de:	693b      	ldr	r3, [r7, #16]
 800c9e0:	3301      	adds	r3, #1
 800c9e2:	b2d2      	uxtb	r2, r2
 800c9e4:	701a      	strb	r2, [r3, #0]
    pIndexLocal = &pIndexLocal[ 2 ];
 800c9e6:	693b      	ldr	r3, [r7, #16]
 800c9e8:	3302      	adds	r3, #2
 800c9ea:	613b      	str	r3, [r7, #16]

    return pIndexLocal;
 800c9ec:	693b      	ldr	r3, [r7, #16]
}
 800c9ee:	4618      	mov	r0, r3
 800c9f0:	3718      	adds	r7, #24
 800c9f2:	46bd      	mov	sp, r7
 800c9f4:	bd80      	pop	{r7, pc}
 800c9f6:	bf00      	nop
 800c9f8:	08014108 	.word	0x08014108

0800c9fc <MQTT_GetConnectPacketSize>:

MQTTStatus_t MQTT_GetConnectPacketSize( const MQTTConnectInfo_t * pConnectInfo,
                                        const MQTTPublishInfo_t * pWillInfo,
                                        size_t * pRemainingLength,
                                        size_t * pPacketSize )
{
 800c9fc:	b580      	push	{r7, lr}
 800c9fe:	b088      	sub	sp, #32
 800ca00:	af00      	add	r7, sp, #0
 800ca02:	60f8      	str	r0, [r7, #12]
 800ca04:	60b9      	str	r1, [r7, #8]
 800ca06:	607a      	str	r2, [r7, #4]
 800ca08:	603b      	str	r3, [r7, #0]
    MQTTStatus_t status = MQTTSuccess;
 800ca0a:	2300      	movs	r3, #0
 800ca0c:	77fb      	strb	r3, [r7, #31]
    size_t remainingLength;

    /* The CONNECT packet will always include a 10-byte variable header. */
    size_t connectPacketSize = MQTT_PACKET_CONNECT_HEADER_SIZE;
 800ca0e:	230a      	movs	r3, #10
 800ca10:	61bb      	str	r3, [r7, #24]

    /* Validate arguments. */
    if( ( pConnectInfo == NULL ) || ( pRemainingLength == NULL ) ||
 800ca12:	68fb      	ldr	r3, [r7, #12]
 800ca14:	2b00      	cmp	r3, #0
 800ca16:	d005      	beq.n	800ca24 <MQTT_GetConnectPacketSize+0x28>
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	2b00      	cmp	r3, #0
 800ca1c:	d002      	beq.n	800ca24 <MQTT_GetConnectPacketSize+0x28>
 800ca1e:	683b      	ldr	r3, [r7, #0]
 800ca20:	2b00      	cmp	r3, #0
 800ca22:	d102      	bne.n	800ca2a <MQTT_GetConnectPacketSize+0x2e>
        LogError( ( "Argument cannot be NULL: pConnectInfo=%p, "
                    "pRemainingLength=%p, pPacketSize=%p.",
                    ( void * ) pConnectInfo,
                    ( void * ) pRemainingLength,
                    ( void * ) pPacketSize ) );
        status = MQTTBadParameter;
 800ca24:	2301      	movs	r3, #1
 800ca26:	77fb      	strb	r3, [r7, #31]
 800ca28:	e04f      	b.n	800caca <MQTT_GetConnectPacketSize+0xce>
    }
    else if( ( pConnectInfo->clientIdentifierLength == 0U ) || ( pConnectInfo->pClientIdentifier == NULL ) )
 800ca2a:	68fb      	ldr	r3, [r7, #12]
 800ca2c:	891b      	ldrh	r3, [r3, #8]
 800ca2e:	2b00      	cmp	r3, #0
 800ca30:	d003      	beq.n	800ca3a <MQTT_GetConnectPacketSize+0x3e>
 800ca32:	68fb      	ldr	r3, [r7, #12]
 800ca34:	685b      	ldr	r3, [r3, #4]
 800ca36:	2b00      	cmp	r3, #0
 800ca38:	d102      	bne.n	800ca40 <MQTT_GetConnectPacketSize+0x44>
    {
        LogError( ( "Mqtt_GetConnectPacketSize() client identifier must be set." ) );
        status = MQTTBadParameter;
 800ca3a:	2301      	movs	r3, #1
 800ca3c:	77fb      	strb	r3, [r7, #31]
 800ca3e:	e044      	b.n	800caca <MQTT_GetConnectPacketSize+0xce>
    }
    else if( ( pWillInfo != NULL ) && ( pWillInfo->payloadLength > ( size_t ) UINT16_MAX ) )
 800ca40:	68bb      	ldr	r3, [r7, #8]
 800ca42:	2b00      	cmp	r3, #0
 800ca44:	d007      	beq.n	800ca56 <MQTT_GetConnectPacketSize+0x5a>
 800ca46:	68bb      	ldr	r3, [r7, #8]
 800ca48:	691b      	ldr	r3, [r3, #16]
 800ca4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ca4e:	d302      	bcc.n	800ca56 <MQTT_GetConnectPacketSize+0x5a>
         * packet will never be larger than 327699 bytes. */
        LogError( ( "The Will Message length must not exceed %d. "
                    "pWillInfo->payloadLength=%lu.",
                    UINT16_MAX,
                    ( unsigned long ) pWillInfo->payloadLength ) );
        status = MQTTBadParameter;
 800ca50:	2301      	movs	r3, #1
 800ca52:	77fb      	strb	r3, [r7, #31]
 800ca54:	e039      	b.n	800caca <MQTT_GetConnectPacketSize+0xce>
    }
    else
    {
        /* Add the length of the client identifier. */
        connectPacketSize += pConnectInfo->clientIdentifierLength + sizeof( uint16_t );
 800ca56:	68fb      	ldr	r3, [r7, #12]
 800ca58:	891b      	ldrh	r3, [r3, #8]
 800ca5a:	461a      	mov	r2, r3
 800ca5c:	69bb      	ldr	r3, [r7, #24]
 800ca5e:	4413      	add	r3, r2
 800ca60:	3302      	adds	r3, #2
 800ca62:	61bb      	str	r3, [r7, #24]

        /* Add the lengths of the will message and topic name if provided. */
        if( pWillInfo != NULL )
 800ca64:	68bb      	ldr	r3, [r7, #8]
 800ca66:	2b00      	cmp	r3, #0
 800ca68:	d009      	beq.n	800ca7e <MQTT_GetConnectPacketSize+0x82>
        {
            connectPacketSize += pWillInfo->topicNameLength + sizeof( uint16_t ) +
 800ca6a:	68bb      	ldr	r3, [r7, #8]
 800ca6c:	891b      	ldrh	r3, [r3, #8]
 800ca6e:	461a      	mov	r2, r3
                                 pWillInfo->payloadLength + sizeof( uint16_t );
 800ca70:	68bb      	ldr	r3, [r7, #8]
 800ca72:	691b      	ldr	r3, [r3, #16]
            connectPacketSize += pWillInfo->topicNameLength + sizeof( uint16_t ) +
 800ca74:	441a      	add	r2, r3
 800ca76:	69bb      	ldr	r3, [r7, #24]
 800ca78:	4413      	add	r3, r2
 800ca7a:	3304      	adds	r3, #4
 800ca7c:	61bb      	str	r3, [r7, #24]
        }

        /* Add the lengths of the user name and password if provided. */
        if( pConnectInfo->pUserName != NULL )
 800ca7e:	68fb      	ldr	r3, [r7, #12]
 800ca80:	68db      	ldr	r3, [r3, #12]
 800ca82:	2b00      	cmp	r3, #0
 800ca84:	d006      	beq.n	800ca94 <MQTT_GetConnectPacketSize+0x98>
        {
            connectPacketSize += pConnectInfo->userNameLength + sizeof( uint16_t );
 800ca86:	68fb      	ldr	r3, [r7, #12]
 800ca88:	8a1b      	ldrh	r3, [r3, #16]
 800ca8a:	461a      	mov	r2, r3
 800ca8c:	69bb      	ldr	r3, [r7, #24]
 800ca8e:	4413      	add	r3, r2
 800ca90:	3302      	adds	r3, #2
 800ca92:	61bb      	str	r3, [r7, #24]
        }

        if( pConnectInfo->pPassword != NULL )
 800ca94:	68fb      	ldr	r3, [r7, #12]
 800ca96:	695b      	ldr	r3, [r3, #20]
 800ca98:	2b00      	cmp	r3, #0
 800ca9a:	d006      	beq.n	800caaa <MQTT_GetConnectPacketSize+0xae>
        {
            connectPacketSize += pConnectInfo->passwordLength + sizeof( uint16_t );
 800ca9c:	68fb      	ldr	r3, [r7, #12]
 800ca9e:	8b1b      	ldrh	r3, [r3, #24]
 800caa0:	461a      	mov	r2, r3
 800caa2:	69bb      	ldr	r3, [r7, #24]
 800caa4:	4413      	add	r3, r2
 800caa6:	3302      	adds	r3, #2
 800caa8:	61bb      	str	r3, [r7, #24]
        }

        /* At this point, the "Remaining Length" field of the MQTT CONNECT packet has
         * been calculated. */
        remainingLength = connectPacketSize;
 800caaa:	69bb      	ldr	r3, [r7, #24]
 800caac:	617b      	str	r3, [r7, #20]

        /* Calculate the full size of the MQTT CONNECT packet by adding the size of
         * the "Remaining Length" field plus 1 byte for the "Packet Type" field. */
        connectPacketSize += 1U + remainingLengthEncodedSize( connectPacketSize );
 800caae:	69b8      	ldr	r0, [r7, #24]
 800cab0:	f7ff fba1 	bl	800c1f6 <remainingLengthEncodedSize>
 800cab4:	4603      	mov	r3, r0
 800cab6:	3301      	adds	r3, #1
 800cab8:	69ba      	ldr	r2, [r7, #24]
 800caba:	4413      	add	r3, r2
 800cabc:	61bb      	str	r3, [r7, #24]
         * (maximum username length) 65535 + (encoded length) 2 +
         * (maximum password length) 65535 + (encoded length) 2 +
         * (packet type field length) 1 +
         * (CONNECT packet encoded length) 3 = 327699 */

        *pRemainingLength = remainingLength;
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	697a      	ldr	r2, [r7, #20]
 800cac2:	601a      	str	r2, [r3, #0]
        *pPacketSize = connectPacketSize;
 800cac4:	683b      	ldr	r3, [r7, #0]
 800cac6:	69ba      	ldr	r2, [r7, #24]
 800cac8:	601a      	str	r2, [r3, #0]
        LogDebug( ( "CONNECT packet remaining length=%lu and packet size=%lu.",
                    ( unsigned long ) *pRemainingLength,
                    ( unsigned long ) *pPacketSize ) );
    }

    return status;
 800caca:	7ffb      	ldrb	r3, [r7, #31]
}
 800cacc:	4618      	mov	r0, r3
 800cace:	3720      	adds	r7, #32
 800cad0:	46bd      	mov	sp, r7
 800cad2:	bd80      	pop	{r7, pc}

0800cad4 <MQTT_GetPublishPacketSize>:
/*-----------------------------------------------------------*/

MQTTStatus_t MQTT_GetPublishPacketSize( const MQTTPublishInfo_t * pPublishInfo,
                                        size_t * pRemainingLength,
                                        size_t * pPacketSize )
{
 800cad4:	b580      	push	{r7, lr}
 800cad6:	b086      	sub	sp, #24
 800cad8:	af00      	add	r7, sp, #0
 800cada:	60f8      	str	r0, [r7, #12]
 800cadc:	60b9      	str	r1, [r7, #8]
 800cade:	607a      	str	r2, [r7, #4]
    MQTTStatus_t status = MQTTSuccess;
 800cae0:	2300      	movs	r3, #0
 800cae2:	75fb      	strb	r3, [r7, #23]

    if( ( pPublishInfo == NULL ) || ( pRemainingLength == NULL ) || ( pPacketSize == NULL ) )
 800cae4:	68fb      	ldr	r3, [r7, #12]
 800cae6:	2b00      	cmp	r3, #0
 800cae8:	d005      	beq.n	800caf6 <MQTT_GetPublishPacketSize+0x22>
 800caea:	68bb      	ldr	r3, [r7, #8]
 800caec:	2b00      	cmp	r3, #0
 800caee:	d002      	beq.n	800caf6 <MQTT_GetPublishPacketSize+0x22>
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	2b00      	cmp	r3, #0
 800caf4:	d102      	bne.n	800cafc <MQTT_GetPublishPacketSize+0x28>
        LogError( ( "Argument cannot be NULL: pPublishInfo=%p, "
                    "pRemainingLength=%p, pPacketSize=%p.",
                    ( void * ) pPublishInfo,
                    ( void * ) pRemainingLength,
                    ( void * ) pPacketSize ) );
        status = MQTTBadParameter;
 800caf6:	2301      	movs	r3, #1
 800caf8:	75fb      	strb	r3, [r7, #23]
 800cafa:	e017      	b.n	800cb2c <MQTT_GetPublishPacketSize+0x58>
    }
    else if( ( pPublishInfo->pTopicName == NULL ) || ( pPublishInfo->topicNameLength == 0U ) )
 800cafc:	68fb      	ldr	r3, [r7, #12]
 800cafe:	685b      	ldr	r3, [r3, #4]
 800cb00:	2b00      	cmp	r3, #0
 800cb02:	d003      	beq.n	800cb0c <MQTT_GetPublishPacketSize+0x38>
 800cb04:	68fb      	ldr	r3, [r7, #12]
 800cb06:	891b      	ldrh	r3, [r3, #8]
 800cb08:	2b00      	cmp	r3, #0
 800cb0a:	d102      	bne.n	800cb12 <MQTT_GetPublishPacketSize+0x3e>
    {
        LogError( ( "Invalid topic name for PUBLISH: pTopicName=%p, "
                    "topicNameLength=%hu.",
                    ( void * ) pPublishInfo->pTopicName,
                    ( unsigned short ) pPublishInfo->topicNameLength ) );
        status = MQTTBadParameter;
 800cb0c:	2301      	movs	r3, #1
 800cb0e:	75fb      	strb	r3, [r7, #23]
 800cb10:	e00c      	b.n	800cb2c <MQTT_GetPublishPacketSize+0x58>
    }
    else
    {
        /* Calculate the "Remaining length" field and total packet size. If it exceeds
         * what is allowed in the MQTT standard, return an error. */
        if( calculatePublishPacketSize( pPublishInfo, pRemainingLength, pPacketSize ) == false )
 800cb12:	687a      	ldr	r2, [r7, #4]
 800cb14:	68b9      	ldr	r1, [r7, #8]
 800cb16:	68f8      	ldr	r0, [r7, #12]
 800cb18:	f7ff fc06 	bl	800c328 <calculatePublishPacketSize>
 800cb1c:	4603      	mov	r3, r0
 800cb1e:	f083 0301 	eor.w	r3, r3, #1
 800cb22:	b2db      	uxtb	r3, r3
 800cb24:	2b00      	cmp	r3, #0
 800cb26:	d001      	beq.n	800cb2c <MQTT_GetPublishPacketSize+0x58>
        {
            LogError( ( "PUBLISH packet remaining length exceeds %lu, which is the "
                        "maximum size allowed by MQTT 3.1.1.",
                        MQTT_MAX_REMAINING_LENGTH ) );
            status = MQTTBadParameter;
 800cb28:	2301      	movs	r3, #1
 800cb2a:	75fb      	strb	r3, [r7, #23]
        }
    }

    return status;
 800cb2c:	7dfb      	ldrb	r3, [r7, #23]
}
 800cb2e:	4618      	mov	r0, r3
 800cb30:	3718      	adds	r7, #24
 800cb32:	46bd      	mov	sp, r7
 800cb34:	bd80      	pop	{r7, pc}

0800cb36 <MQTT_SerializeAck>:
/*-----------------------------------------------------------*/

MQTTStatus_t MQTT_SerializeAck( const MQTTFixedBuffer_t * pFixedBuffer,
                                uint8_t packetType,
                                uint16_t packetId )
{
 800cb36:	b480      	push	{r7}
 800cb38:	b085      	sub	sp, #20
 800cb3a:	af00      	add	r7, sp, #0
 800cb3c:	6078      	str	r0, [r7, #4]
 800cb3e:	460b      	mov	r3, r1
 800cb40:	70fb      	strb	r3, [r7, #3]
 800cb42:	4613      	mov	r3, r2
 800cb44:	803b      	strh	r3, [r7, #0]
    MQTTStatus_t status = MQTTSuccess;
 800cb46:	2300      	movs	r3, #0
 800cb48:	73fb      	strb	r3, [r7, #15]

    if( pFixedBuffer == NULL )
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	2b00      	cmp	r3, #0
 800cb4e:	d102      	bne.n	800cb56 <MQTT_SerializeAck+0x20>
    {
        LogError( ( "Provided buffer is NULL." ) );
        status = MQTTBadParameter;
 800cb50:	2301      	movs	r3, #1
 800cb52:	73fb      	strb	r3, [r7, #15]
 800cb54:	e03b      	b.n	800cbce <MQTT_SerializeAck+0x98>
    }
    else if( pFixedBuffer->pBuffer == NULL )
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	681b      	ldr	r3, [r3, #0]
 800cb5a:	2b00      	cmp	r3, #0
 800cb5c:	d102      	bne.n	800cb64 <MQTT_SerializeAck+0x2e>
    {
        LogError( ( "pFixedBuffer->pBuffer cannot be NULL." ) );
        status = MQTTBadParameter;
 800cb5e:	2301      	movs	r3, #1
 800cb60:	73fb      	strb	r3, [r7, #15]
 800cb62:	e034      	b.n	800cbce <MQTT_SerializeAck+0x98>
    }
    /* The buffer must be able to fit 4 bytes for the packet. */
    else if( pFixedBuffer->size < MQTT_PUBLISH_ACK_PACKET_SIZE )
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	685b      	ldr	r3, [r3, #4]
 800cb68:	2b03      	cmp	r3, #3
 800cb6a:	d802      	bhi.n	800cb72 <MQTT_SerializeAck+0x3c>
    {
        LogError( ( "Insufficient memory for packet." ) );
        status = MQTTNoMemory;
 800cb6c:	2302      	movs	r3, #2
 800cb6e:	73fb      	strb	r3, [r7, #15]
 800cb70:	e02d      	b.n	800cbce <MQTT_SerializeAck+0x98>
    }
    else if( packetId == 0U )
 800cb72:	883b      	ldrh	r3, [r7, #0]
 800cb74:	2b00      	cmp	r3, #0
 800cb76:	d102      	bne.n	800cb7e <MQTT_SerializeAck+0x48>
    {
        LogError( ( "Packet ID cannot be 0." ) );
        status = MQTTBadParameter;
 800cb78:	2301      	movs	r3, #1
 800cb7a:	73fb      	strb	r3, [r7, #15]
 800cb7c:	e027      	b.n	800cbce <MQTT_SerializeAck+0x98>
    }
    else
    {
        switch( packetType )
 800cb7e:	78fb      	ldrb	r3, [r7, #3]
 800cb80:	2b70      	cmp	r3, #112	; 0x70
 800cb82:	d009      	beq.n	800cb98 <MQTT_SerializeAck+0x62>
 800cb84:	2b70      	cmp	r3, #112	; 0x70
 800cb86:	dc1f      	bgt.n	800cbc8 <MQTT_SerializeAck+0x92>
 800cb88:	2b62      	cmp	r3, #98	; 0x62
 800cb8a:	d005      	beq.n	800cb98 <MQTT_SerializeAck+0x62>
 800cb8c:	2b62      	cmp	r3, #98	; 0x62
 800cb8e:	dc1b      	bgt.n	800cbc8 <MQTT_SerializeAck+0x92>
 800cb90:	2b40      	cmp	r3, #64	; 0x40
 800cb92:	d001      	beq.n	800cb98 <MQTT_SerializeAck+0x62>
 800cb94:	2b50      	cmp	r3, #80	; 0x50
 800cb96:	d117      	bne.n	800cbc8 <MQTT_SerializeAck+0x92>
            /* Only publish acks are serialized by the client. */
            case MQTT_PACKET_TYPE_PUBACK:
            case MQTT_PACKET_TYPE_PUBREC:
            case MQTT_PACKET_TYPE_PUBREL:
            case MQTT_PACKET_TYPE_PUBCOMP:
                pFixedBuffer->pBuffer[ 0 ] = packetType;
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	681b      	ldr	r3, [r3, #0]
 800cb9c:	78fa      	ldrb	r2, [r7, #3]
 800cb9e:	701a      	strb	r2, [r3, #0]
                pFixedBuffer->pBuffer[ 1 ] = MQTT_PACKET_SIMPLE_ACK_REMAINING_LENGTH;
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	681b      	ldr	r3, [r3, #0]
 800cba4:	3301      	adds	r3, #1
 800cba6:	2202      	movs	r2, #2
 800cba8:	701a      	strb	r2, [r3, #0]
                pFixedBuffer->pBuffer[ 2 ] = UINT16_HIGH_BYTE( packetId );
 800cbaa:	883b      	ldrh	r3, [r7, #0]
 800cbac:	0a1b      	lsrs	r3, r3, #8
 800cbae:	b29a      	uxth	r2, r3
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	681b      	ldr	r3, [r3, #0]
 800cbb4:	3302      	adds	r3, #2
 800cbb6:	b2d2      	uxtb	r2, r2
 800cbb8:	701a      	strb	r2, [r3, #0]
                pFixedBuffer->pBuffer[ 3 ] = UINT16_LOW_BYTE( packetId );
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	681b      	ldr	r3, [r3, #0]
 800cbbe:	3303      	adds	r3, #3
 800cbc0:	883a      	ldrh	r2, [r7, #0]
 800cbc2:	b2d2      	uxtb	r2, r2
 800cbc4:	701a      	strb	r2, [r3, #0]
                break;
 800cbc6:	e002      	b.n	800cbce <MQTT_SerializeAck+0x98>

            default:
                LogError( ( "Packet type is not a publish ACK: Packet type=%02x",
                            ( unsigned int ) packetType ) );
                status = MQTTBadParameter;
 800cbc8:	2301      	movs	r3, #1
 800cbca:	73fb      	strb	r3, [r7, #15]
                break;
 800cbcc:	bf00      	nop
        }
    }

    return status;
 800cbce:	7bfb      	ldrb	r3, [r7, #15]
}
 800cbd0:	4618      	mov	r0, r3
 800cbd2:	3714      	adds	r7, #20
 800cbd4:	46bd      	mov	sp, r7
 800cbd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbda:	4770      	bx	lr

0800cbdc <MQTT_DeserializeAck>:
/*-----------------------------------------------------------*/

MQTTStatus_t MQTT_DeserializeAck( const MQTTPacketInfo_t * pIncomingPacket,
                                  uint16_t * pPacketId,
                                  bool * pSessionPresent )
{
 800cbdc:	b580      	push	{r7, lr}
 800cbde:	b086      	sub	sp, #24
 800cbe0:	af00      	add	r7, sp, #0
 800cbe2:	60f8      	str	r0, [r7, #12]
 800cbe4:	60b9      	str	r1, [r7, #8]
 800cbe6:	607a      	str	r2, [r7, #4]
    MQTTStatus_t status = MQTTSuccess;
 800cbe8:	2300      	movs	r3, #0
 800cbea:	75fb      	strb	r3, [r7, #23]

    if( pIncomingPacket == NULL )
 800cbec:	68fb      	ldr	r3, [r7, #12]
 800cbee:	2b00      	cmp	r3, #0
 800cbf0:	d102      	bne.n	800cbf8 <MQTT_DeserializeAck+0x1c>
    {
        LogError( ( "pIncomingPacket cannot be NULL." ) );
        status = MQTTBadParameter;
 800cbf2:	2301      	movs	r3, #1
 800cbf4:	75fb      	strb	r3, [r7, #23]
 800cbf6:	e05f      	b.n	800ccb8 <MQTT_DeserializeAck+0xdc>
    }

    /* Pointer for packet identifier cannot be NULL for packets other than
     * CONNACK and PINGRESP. */
    else if( ( pPacketId == NULL ) &&
 800cbf8:	68bb      	ldr	r3, [r7, #8]
 800cbfa:	2b00      	cmp	r3, #0
 800cbfc:	d10a      	bne.n	800cc14 <MQTT_DeserializeAck+0x38>
             ( ( pIncomingPacket->type != MQTT_PACKET_TYPE_CONNACK ) &&
 800cbfe:	68fb      	ldr	r3, [r7, #12]
 800cc00:	781b      	ldrb	r3, [r3, #0]
    else if( ( pPacketId == NULL ) &&
 800cc02:	2b20      	cmp	r3, #32
 800cc04:	d006      	beq.n	800cc14 <MQTT_DeserializeAck+0x38>
               ( pIncomingPacket->type != MQTT_PACKET_TYPE_PINGRESP ) ) )
 800cc06:	68fb      	ldr	r3, [r7, #12]
 800cc08:	781b      	ldrb	r3, [r3, #0]
             ( ( pIncomingPacket->type != MQTT_PACKET_TYPE_CONNACK ) &&
 800cc0a:	2bd0      	cmp	r3, #208	; 0xd0
 800cc0c:	d002      	beq.n	800cc14 <MQTT_DeserializeAck+0x38>
    {
        LogError( ( "pPacketId cannot be NULL for packet type %02x.",
                    ( unsigned int ) pIncomingPacket->type ) );
        status = MQTTBadParameter;
 800cc0e:	2301      	movs	r3, #1
 800cc10:	75fb      	strb	r3, [r7, #23]
 800cc12:	e051      	b.n	800ccb8 <MQTT_DeserializeAck+0xdc>
    }
    /* Pointer for session present cannot be NULL for CONNACK. */
    else if( ( pSessionPresent == NULL ) &&
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	2b00      	cmp	r3, #0
 800cc18:	d106      	bne.n	800cc28 <MQTT_DeserializeAck+0x4c>
             ( pIncomingPacket->type == MQTT_PACKET_TYPE_CONNACK ) )
 800cc1a:	68fb      	ldr	r3, [r7, #12]
 800cc1c:	781b      	ldrb	r3, [r3, #0]
    else if( ( pSessionPresent == NULL ) &&
 800cc1e:	2b20      	cmp	r3, #32
 800cc20:	d102      	bne.n	800cc28 <MQTT_DeserializeAck+0x4c>
    {
        LogError( ( "pSessionPresent cannot be NULL for CONNACK packet." ) );
        status = MQTTBadParameter;
 800cc22:	2301      	movs	r3, #1
 800cc24:	75fb      	strb	r3, [r7, #23]
 800cc26:	e047      	b.n	800ccb8 <MQTT_DeserializeAck+0xdc>
    }

    /* Pointer for remaining data cannot be NULL for packets other
     * than PINGRESP. */
    else if( ( pIncomingPacket->pRemainingData == NULL ) &&
 800cc28:	68fb      	ldr	r3, [r7, #12]
 800cc2a:	685b      	ldr	r3, [r3, #4]
 800cc2c:	2b00      	cmp	r3, #0
 800cc2e:	d106      	bne.n	800cc3e <MQTT_DeserializeAck+0x62>
             ( pIncomingPacket->type != MQTT_PACKET_TYPE_PINGRESP ) )
 800cc30:	68fb      	ldr	r3, [r7, #12]
 800cc32:	781b      	ldrb	r3, [r3, #0]
    else if( ( pIncomingPacket->pRemainingData == NULL ) &&
 800cc34:	2bd0      	cmp	r3, #208	; 0xd0
 800cc36:	d002      	beq.n	800cc3e <MQTT_DeserializeAck+0x62>
    {
        LogError( ( "Remaining data of incoming packet is NULL." ) );
        status = MQTTBadParameter;
 800cc38:	2301      	movs	r3, #1
 800cc3a:	75fb      	strb	r3, [r7, #23]
 800cc3c:	e03c      	b.n	800ccb8 <MQTT_DeserializeAck+0xdc>
    }
    else
    {
        /* Make sure response packet is a valid ack. */
        switch( pIncomingPacket->type )
 800cc3e:	68fb      	ldr	r3, [r7, #12]
 800cc40:	781b      	ldrb	r3, [r3, #0]
 800cc42:	2bd0      	cmp	r3, #208	; 0xd0
 800cc44:	d028      	beq.n	800cc98 <MQTT_DeserializeAck+0xbc>
 800cc46:	2bd0      	cmp	r3, #208	; 0xd0
 800cc48:	dc33      	bgt.n	800ccb2 <MQTT_DeserializeAck+0xd6>
 800cc4a:	2bb0      	cmp	r3, #176	; 0xb0
 800cc4c:	d02a      	beq.n	800cca4 <MQTT_DeserializeAck+0xc8>
 800cc4e:	2bb0      	cmp	r3, #176	; 0xb0
 800cc50:	dc2f      	bgt.n	800ccb2 <MQTT_DeserializeAck+0xd6>
 800cc52:	2b90      	cmp	r3, #144	; 0x90
 800cc54:	d019      	beq.n	800cc8a <MQTT_DeserializeAck+0xae>
 800cc56:	2b90      	cmp	r3, #144	; 0x90
 800cc58:	dc2b      	bgt.n	800ccb2 <MQTT_DeserializeAck+0xd6>
 800cc5a:	2b70      	cmp	r3, #112	; 0x70
 800cc5c:	d022      	beq.n	800cca4 <MQTT_DeserializeAck+0xc8>
 800cc5e:	2b70      	cmp	r3, #112	; 0x70
 800cc60:	dc27      	bgt.n	800ccb2 <MQTT_DeserializeAck+0xd6>
 800cc62:	2b62      	cmp	r3, #98	; 0x62
 800cc64:	d01e      	beq.n	800cca4 <MQTT_DeserializeAck+0xc8>
 800cc66:	2b62      	cmp	r3, #98	; 0x62
 800cc68:	dc23      	bgt.n	800ccb2 <MQTT_DeserializeAck+0xd6>
 800cc6a:	2b50      	cmp	r3, #80	; 0x50
 800cc6c:	d01a      	beq.n	800cca4 <MQTT_DeserializeAck+0xc8>
 800cc6e:	2b50      	cmp	r3, #80	; 0x50
 800cc70:	dc1f      	bgt.n	800ccb2 <MQTT_DeserializeAck+0xd6>
 800cc72:	2b20      	cmp	r3, #32
 800cc74:	d002      	beq.n	800cc7c <MQTT_DeserializeAck+0xa0>
 800cc76:	2b40      	cmp	r3, #64	; 0x40
 800cc78:	d014      	beq.n	800cca4 <MQTT_DeserializeAck+0xc8>
 800cc7a:	e01a      	b.n	800ccb2 <MQTT_DeserializeAck+0xd6>
        {
            case MQTT_PACKET_TYPE_CONNACK:
                status = deserializeConnack( pIncomingPacket, pSessionPresent );
 800cc7c:	6879      	ldr	r1, [r7, #4]
 800cc7e:	68f8      	ldr	r0, [r7, #12]
 800cc80:	f7ff fcdc 	bl	800c63c <deserializeConnack>
 800cc84:	4603      	mov	r3, r0
 800cc86:	75fb      	strb	r3, [r7, #23]
                break;
 800cc88:	e016      	b.n	800ccb8 <MQTT_DeserializeAck+0xdc>

            case MQTT_PACKET_TYPE_SUBACK:
                status = deserializeSuback( pIncomingPacket, pPacketId );
 800cc8a:	68b9      	ldr	r1, [r7, #8]
 800cc8c:	68f8      	ldr	r0, [r7, #12]
 800cc8e:	f7ff fd83 	bl	800c798 <deserializeSuback>
 800cc92:	4603      	mov	r3, r0
 800cc94:	75fb      	strb	r3, [r7, #23]
                break;
 800cc96:	e00f      	b.n	800ccb8 <MQTT_DeserializeAck+0xdc>

            case MQTT_PACKET_TYPE_PINGRESP:
                status = deserializePingresp( pIncomingPacket );
 800cc98:	68f8      	ldr	r0, [r7, #12]
 800cc9a:	f7ff fe15 	bl	800c8c8 <deserializePingresp>
 800cc9e:	4603      	mov	r3, r0
 800cca0:	75fb      	strb	r3, [r7, #23]
                break;
 800cca2:	e009      	b.n	800ccb8 <MQTT_DeserializeAck+0xdc>
            case MQTT_PACKET_TYPE_UNSUBACK:
            case MQTT_PACKET_TYPE_PUBACK:
            case MQTT_PACKET_TYPE_PUBREC:
            case MQTT_PACKET_TYPE_PUBREL:
            case MQTT_PACKET_TYPE_PUBCOMP:
                status = deserializeSimpleAck( pIncomingPacket, pPacketId );
 800cca4:	68b9      	ldr	r1, [r7, #8]
 800cca6:	68f8      	ldr	r0, [r7, #12]
 800cca8:	f7ff fdca 	bl	800c840 <deserializeSimpleAck>
 800ccac:	4603      	mov	r3, r0
 800ccae:	75fb      	strb	r3, [r7, #23]
                break;
 800ccb0:	e002      	b.n	800ccb8 <MQTT_DeserializeAck+0xdc>

            /* Any other packet type is invalid. */
            default:
                LogError( ( "IotMqtt_DeserializeResponse() called with unknown packet type:(%02x).",
                            ( unsigned int ) pIncomingPacket->type ) );
                status = MQTTBadResponse;
 800ccb2:	2305      	movs	r3, #5
 800ccb4:	75fb      	strb	r3, [r7, #23]
                break;
 800ccb6:	bf00      	nop
        }
    }

    return status;
 800ccb8:	7dfb      	ldrb	r3, [r7, #23]
}
 800ccba:	4618      	mov	r0, r3
 800ccbc:	3718      	adds	r7, #24
 800ccbe:	46bd      	mov	sp, r7
 800ccc0:	bd80      	pop	{r7, pc}

0800ccc2 <MQTT_GetIncomingPacketTypeAndLength>:
/*-----------------------------------------------------------*/

MQTTStatus_t MQTT_GetIncomingPacketTypeAndLength( TransportRecv_t readFunc,
                                                  NetworkContext_t * pNetworkContext,
                                                  MQTTPacketInfo_t * pIncomingPacket )
{
 800ccc2:	b580      	push	{r7, lr}
 800ccc4:	b086      	sub	sp, #24
 800ccc6:	af00      	add	r7, sp, #0
 800ccc8:	60f8      	str	r0, [r7, #12]
 800ccca:	60b9      	str	r1, [r7, #8]
 800cccc:	607a      	str	r2, [r7, #4]
    MQTTStatus_t status = MQTTSuccess;
 800ccce:	2300      	movs	r3, #0
 800ccd0:	75fb      	strb	r3, [r7, #23]
    int32_t bytesReceived = 0;
 800ccd2:	2300      	movs	r3, #0
 800ccd4:	613b      	str	r3, [r7, #16]

    if( pIncomingPacket == NULL )
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	2b00      	cmp	r3, #0
 800ccda:	d102      	bne.n	800cce2 <MQTT_GetIncomingPacketTypeAndLength+0x20>
    {
        LogError( ( "Invalid parameter: pIncomingPacket is NULL." ) );
        status = MQTTBadParameter;
 800ccdc:	2301      	movs	r3, #1
 800ccde:	75fb      	strb	r3, [r7, #23]
 800cce0:	e005      	b.n	800ccee <MQTT_GetIncomingPacketTypeAndLength+0x2c>
    }
    else
    {
        /* Read a single byte. */
        bytesReceived = readFunc( pNetworkContext,
                                  &( pIncomingPacket->type ),
 800cce2:	6879      	ldr	r1, [r7, #4]
        bytesReceived = readFunc( pNetworkContext,
 800cce4:	68fb      	ldr	r3, [r7, #12]
 800cce6:	2201      	movs	r2, #1
 800cce8:	68b8      	ldr	r0, [r7, #8]
 800ccea:	4798      	blx	r3
 800ccec:	6138      	str	r0, [r7, #16]
                                  1U );
    }

    if( bytesReceived == 1 )
 800ccee:	693b      	ldr	r3, [r7, #16]
 800ccf0:	2b01      	cmp	r3, #1
 800ccf2:	d119      	bne.n	800cd28 <MQTT_GetIncomingPacketTypeAndLength+0x66>
    {
        /* Check validity. */
        if( incomingPacketValid( pIncomingPacket->type ) == true )
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	781b      	ldrb	r3, [r3, #0]
 800ccf8:	4618      	mov	r0, r3
 800ccfa:	f7ff fc3a 	bl	800c572 <incomingPacketValid>
 800ccfe:	4603      	mov	r3, r0
 800cd00:	2b00      	cmp	r3, #0
 800cd02:	d00e      	beq.n	800cd22 <MQTT_GetIncomingPacketTypeAndLength+0x60>
        {
            pIncomingPacket->remainingLength = getRemainingLength( readFunc,
 800cd04:	68b9      	ldr	r1, [r7, #8]
 800cd06:	68f8      	ldr	r0, [r7, #12]
 800cd08:	f7ff fbdf 	bl	800c4ca <getRemainingLength>
 800cd0c:	4602      	mov	r2, r0
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	609a      	str	r2, [r3, #8]
                                                                   pNetworkContext );

            if( pIncomingPacket->remainingLength == MQTT_REMAINING_LENGTH_INVALID )
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	689b      	ldr	r3, [r3, #8]
 800cd16:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cd1a:	d113      	bne.n	800cd44 <MQTT_GetIncomingPacketTypeAndLength+0x82>
            {
                LogError( ( "Incoming packet remaining length invalid." ) );
                status = MQTTBadResponse;
 800cd1c:	2305      	movs	r3, #5
 800cd1e:	75fb      	strb	r3, [r7, #23]
 800cd20:	e010      	b.n	800cd44 <MQTT_GetIncomingPacketTypeAndLength+0x82>
        }
        else
        {
            LogError( ( "Incoming packet invalid: Packet type=%u.",
                        ( unsigned int ) pIncomingPacket->type ) );
            status = MQTTBadResponse;
 800cd22:	2305      	movs	r3, #5
 800cd24:	75fb      	strb	r3, [r7, #23]
 800cd26:	e00d      	b.n	800cd44 <MQTT_GetIncomingPacketTypeAndLength+0x82>
        }
    }
    else if( ( status != MQTTBadParameter ) && ( bytesReceived == 0 ) )
 800cd28:	7dfb      	ldrb	r3, [r7, #23]
 800cd2a:	2b01      	cmp	r3, #1
 800cd2c:	d005      	beq.n	800cd3a <MQTT_GetIncomingPacketTypeAndLength+0x78>
 800cd2e:	693b      	ldr	r3, [r7, #16]
 800cd30:	2b00      	cmp	r3, #0
 800cd32:	d102      	bne.n	800cd3a <MQTT_GetIncomingPacketTypeAndLength+0x78>
    {
        status = MQTTNoDataAvailable;
 800cd34:	2307      	movs	r3, #7
 800cd36:	75fb      	strb	r3, [r7, #23]
 800cd38:	e004      	b.n	800cd44 <MQTT_GetIncomingPacketTypeAndLength+0x82>
    }

    /* If the input packet was valid, then any other number of bytes received is
     * a failure. */
    else if( status != MQTTBadParameter )
 800cd3a:	7dfb      	ldrb	r3, [r7, #23]
 800cd3c:	2b01      	cmp	r3, #1
 800cd3e:	d001      	beq.n	800cd44 <MQTT_GetIncomingPacketTypeAndLength+0x82>
    {
        LogError( ( "A single byte was not read from the transport: "
                    "transportStatus=%ld.",
                    ( long int ) bytesReceived ) );
        status = MQTTRecvFailed;
 800cd40:	2304      	movs	r3, #4
 800cd42:	75fb      	strb	r3, [r7, #23]
    else
    {
        /* Empty else MISRA 15.7 */
    }

    return status;
 800cd44:	7dfb      	ldrb	r3, [r7, #23]
}
 800cd46:	4618      	mov	r0, r3
 800cd48:	3718      	adds	r7, #24
 800cd4a:	46bd      	mov	sp, r7
 800cd4c:	bd80      	pop	{r7, pc}
	...

0800cd50 <validateTransitionPublish>:

static bool validateTransitionPublish( MQTTPublishState_t currentState,
                                       MQTTPublishState_t newState,
                                       MQTTStateOperation_t opType,
                                       MQTTQoS_t qos )
{
 800cd50:	b490      	push	{r4, r7}
 800cd52:	b084      	sub	sp, #16
 800cd54:	af00      	add	r7, sp, #0
 800cd56:	4604      	mov	r4, r0
 800cd58:	4608      	mov	r0, r1
 800cd5a:	4611      	mov	r1, r2
 800cd5c:	461a      	mov	r2, r3
 800cd5e:	4623      	mov	r3, r4
 800cd60:	71fb      	strb	r3, [r7, #7]
 800cd62:	4603      	mov	r3, r0
 800cd64:	71bb      	strb	r3, [r7, #6]
 800cd66:	460b      	mov	r3, r1
 800cd68:	717b      	strb	r3, [r7, #5]
 800cd6a:	4613      	mov	r3, r2
 800cd6c:	713b      	strb	r3, [r7, #4]
    bool isValid = false;
 800cd6e:	2300      	movs	r3, #0
 800cd70:	73fb      	strb	r3, [r7, #15]

    switch( currentState )
 800cd72:	79fb      	ldrb	r3, [r7, #7]
 800cd74:	2b07      	cmp	r3, #7
 800cd76:	d848      	bhi.n	800ce0a <validateTransitionPublish+0xba>
 800cd78:	a201      	add	r2, pc, #4	; (adr r2, 800cd80 <validateTransitionPublish+0x30>)
 800cd7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd7e:	bf00      	nop
 800cd80:	0800cda1 	.word	0x0800cda1
 800cd84:	0800cdc5 	.word	0x0800cdc5
 800cd88:	0800ce0b 	.word	0x0800ce0b
 800cd8c:	0800ce0b 	.word	0x0800ce0b
 800cd90:	0800ce0b 	.word	0x0800ce0b
 800cd94:	0800ce0b 	.word	0x0800ce0b
 800cd98:	0800cdef 	.word	0x0800cdef
 800cd9c:	0800cdfd 	.word	0x0800cdfd
    {
        case MQTTStateNull:

            /* Transitions from null occur when storing a new entry into the record. */
            if( opType == MQTT_RECEIVE )
 800cda0:	797b      	ldrb	r3, [r7, #5]
 800cda2:	2b01      	cmp	r3, #1
 800cda4:	d133      	bne.n	800ce0e <validateTransitionPublish+0xbe>
            {
                isValid = ( newState == MQTTPubAckSend ) || ( newState == MQTTPubRecSend );
 800cda6:	79bb      	ldrb	r3, [r7, #6]
 800cda8:	2b02      	cmp	r3, #2
 800cdaa:	d002      	beq.n	800cdb2 <validateTransitionPublish+0x62>
 800cdac:	79bb      	ldrb	r3, [r7, #6]
 800cdae:	2b03      	cmp	r3, #3
 800cdb0:	d101      	bne.n	800cdb6 <validateTransitionPublish+0x66>
 800cdb2:	2301      	movs	r3, #1
 800cdb4:	e000      	b.n	800cdb8 <validateTransitionPublish+0x68>
 800cdb6:	2300      	movs	r3, #0
 800cdb8:	73fb      	strb	r3, [r7, #15]
 800cdba:	7bfb      	ldrb	r3, [r7, #15]
 800cdbc:	f003 0301 	and.w	r3, r3, #1
 800cdc0:	73fb      	strb	r3, [r7, #15]
            }

            break;
 800cdc2:	e024      	b.n	800ce0e <validateTransitionPublish+0xbe>

        case MQTTPublishSend:

            /* Outgoing publish. All such publishes start in this state due to
             * the reserve operation. */
            switch( qos )
 800cdc4:	793b      	ldrb	r3, [r7, #4]
 800cdc6:	2b01      	cmp	r3, #1
 800cdc8:	d002      	beq.n	800cdd0 <validateTransitionPublish+0x80>
 800cdca:	2b02      	cmp	r3, #2
 800cdcc:	d007      	beq.n	800cdde <validateTransitionPublish+0x8e>
                    break;

                case MQTTQoS0:
                default:
                    /* QoS 0 is checked before calling this function. */
                    break;
 800cdce:	e00d      	b.n	800cdec <validateTransitionPublish+0x9c>
                    isValid = newState == MQTTPubAckPending;
 800cdd0:	79bb      	ldrb	r3, [r7, #6]
 800cdd2:	2b06      	cmp	r3, #6
 800cdd4:	bf0c      	ite	eq
 800cdd6:	2301      	moveq	r3, #1
 800cdd8:	2300      	movne	r3, #0
 800cdda:	73fb      	strb	r3, [r7, #15]
                    break;
 800cddc:	e006      	b.n	800cdec <validateTransitionPublish+0x9c>
                    isValid = newState == MQTTPubRecPending;
 800cdde:	79bb      	ldrb	r3, [r7, #6]
 800cde0:	2b07      	cmp	r3, #7
 800cde2:	bf0c      	ite	eq
 800cde4:	2301      	moveq	r3, #1
 800cde6:	2300      	movne	r3, #0
 800cde8:	73fb      	strb	r3, [r7, #15]
                    break;
 800cdea:	bf00      	nop
            }

            break;
 800cdec:	e010      	b.n	800ce10 <validateTransitionPublish+0xc0>
         * reestablished. */
        case MQTTPubAckPending:

            /* When a session is reestablished, outgoing QoS1 publishes in state
             * #MQTTPubAckPending can be resent. The state remains the same. */
            isValid = newState == MQTTPubAckPending;
 800cdee:	79bb      	ldrb	r3, [r7, #6]
 800cdf0:	2b06      	cmp	r3, #6
 800cdf2:	bf0c      	ite	eq
 800cdf4:	2301      	moveq	r3, #1
 800cdf6:	2300      	movne	r3, #0
 800cdf8:	73fb      	strb	r3, [r7, #15]

            break;
 800cdfa:	e009      	b.n	800ce10 <validateTransitionPublish+0xc0>

        case MQTTPubRecPending:

            /* When a session is reestablished, outgoing QoS2 publishes in state
             * #MQTTPubRecPending can be resent. The state remains the same. */
            isValid = newState == MQTTPubRecPending;
 800cdfc:	79bb      	ldrb	r3, [r7, #6]
 800cdfe:	2b07      	cmp	r3, #7
 800ce00:	bf0c      	ite	eq
 800ce02:	2301      	moveq	r3, #1
 800ce04:	2300      	movne	r3, #0
 800ce06:	73fb      	strb	r3, [r7, #15]

            break;
 800ce08:	e002      	b.n	800ce10 <validateTransitionPublish+0xc0>
        case MQTTPubRelPending:
        case MQTTPubRelSend:
        case MQTTPublishDone:
        default:
            /* For a PUBLISH, we should not start from any other state. */
            break;
 800ce0a:	bf00      	nop
 800ce0c:	e000      	b.n	800ce10 <validateTransitionPublish+0xc0>
            break;
 800ce0e:	bf00      	nop
    }

    return isValid;
 800ce10:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce12:	4618      	mov	r0, r3
 800ce14:	3710      	adds	r7, #16
 800ce16:	46bd      	mov	sp, r7
 800ce18:	bc90      	pop	{r4, r7}
 800ce1a:	4770      	bx	lr

0800ce1c <validateTransitionAck>:

/*-----------------------------------------------------------*/

static bool validateTransitionAck( MQTTPublishState_t currentState,
                                   MQTTPublishState_t newState )
{
 800ce1c:	b480      	push	{r7}
 800ce1e:	b085      	sub	sp, #20
 800ce20:	af00      	add	r7, sp, #0
 800ce22:	4603      	mov	r3, r0
 800ce24:	460a      	mov	r2, r1
 800ce26:	71fb      	strb	r3, [r7, #7]
 800ce28:	4613      	mov	r3, r2
 800ce2a:	71bb      	strb	r3, [r7, #6]
    bool isValid = false;
 800ce2c:	2300      	movs	r3, #0
 800ce2e:	73fb      	strb	r3, [r7, #15]

    switch( currentState )
 800ce30:	79fb      	ldrb	r3, [r7, #7]
 800ce32:	3b02      	subs	r3, #2
 800ce34:	2b07      	cmp	r3, #7
 800ce36:	d85c      	bhi.n	800cef2 <validateTransitionAck+0xd6>
 800ce38:	a201      	add	r2, pc, #4	; (adr r2, 800ce40 <validateTransitionAck+0x24>)
 800ce3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce3e:	bf00      	nop
 800ce40:	0800ce61 	.word	0x0800ce61
 800ce44:	0800ce6f 	.word	0x0800ce6f
 800ce48:	0800cec7 	.word	0x0800cec7
 800ce4c:	0800ce9b 	.word	0x0800ce9b
 800ce50:	0800ce61 	.word	0x0800ce61
 800ce54:	0800ceb9 	.word	0x0800ceb9
 800ce58:	0800ce7d 	.word	0x0800ce7d
 800ce5c:	0800ced5 	.word	0x0800ced5
    {
        case MQTTPubAckSend:
        /* Incoming publish, QoS 1. */
        case MQTTPubAckPending:
            /* Outgoing publish, QoS 1. */
            isValid = newState == MQTTPublishDone;
 800ce60:	79bb      	ldrb	r3, [r7, #6]
 800ce62:	2b0a      	cmp	r3, #10
 800ce64:	bf0c      	ite	eq
 800ce66:	2301      	moveq	r3, #1
 800ce68:	2300      	movne	r3, #0
 800ce6a:	73fb      	strb	r3, [r7, #15]
            break;
 800ce6c:	e042      	b.n	800cef4 <validateTransitionAck+0xd8>

        case MQTTPubRecSend:
            /* Incoming publish, QoS 2. */
            isValid = newState == MQTTPubRelPending;
 800ce6e:	79bb      	ldrb	r3, [r7, #6]
 800ce70:	2b08      	cmp	r3, #8
 800ce72:	bf0c      	ite	eq
 800ce74:	2301      	moveq	r3, #1
 800ce76:	2300      	movne	r3, #0
 800ce78:	73fb      	strb	r3, [r7, #15]
            break;
 800ce7a:	e03b      	b.n	800cef4 <validateTransitionAck+0xd8>
             *    5. MQTT broker resent the un-acked publish.
             *    6. Publish is received when publish record state is in
             *       MQTTPubRelPending.
             *    7. Sending out a PUBREC will result in this transition
             *       to the same state. */
            isValid = ( newState == MQTTPubCompSend ) ||
 800ce7c:	79bb      	ldrb	r3, [r7, #6]
 800ce7e:	2b05      	cmp	r3, #5
 800ce80:	d002      	beq.n	800ce88 <validateTransitionAck+0x6c>
 800ce82:	79bb      	ldrb	r3, [r7, #6]
 800ce84:	2b08      	cmp	r3, #8
 800ce86:	d101      	bne.n	800ce8c <validateTransitionAck+0x70>
 800ce88:	2301      	movs	r3, #1
 800ce8a:	e000      	b.n	800ce8e <validateTransitionAck+0x72>
 800ce8c:	2300      	movs	r3, #0
 800ce8e:	73fb      	strb	r3, [r7, #15]
 800ce90:	7bfb      	ldrb	r3, [r7, #15]
 800ce92:	f003 0301 	and.w	r3, r3, #1
 800ce96:	73fb      	strb	r3, [r7, #15]
                      ( newState == MQTTPubRelPending );
            break;
 800ce98:	e02c      	b.n	800cef4 <validateTransitionAck+0xd8>
             *       for an incoming PUBREL.
             *    2. Reestablished an MQTT session.
             *    3. MQTT broker resent the un-acked PUBREL.
             *    4. Receiving the PUBREL again will result in this transition
             *       to the same state. */
            isValid = ( newState == MQTTPublishDone ) ||
 800ce9a:	79bb      	ldrb	r3, [r7, #6]
 800ce9c:	2b0a      	cmp	r3, #10
 800ce9e:	d002      	beq.n	800cea6 <validateTransitionAck+0x8a>
 800cea0:	79bb      	ldrb	r3, [r7, #6]
 800cea2:	2b05      	cmp	r3, #5
 800cea4:	d101      	bne.n	800ceaa <validateTransitionAck+0x8e>
 800cea6:	2301      	movs	r3, #1
 800cea8:	e000      	b.n	800ceac <validateTransitionAck+0x90>
 800ceaa:	2300      	movs	r3, #0
 800ceac:	73fb      	strb	r3, [r7, #15]
 800ceae:	7bfb      	ldrb	r3, [r7, #15]
 800ceb0:	f003 0301 	and.w	r3, r3, #1
 800ceb4:	73fb      	strb	r3, [r7, #15]
                      ( newState == MQTTPubCompSend );
            break;
 800ceb6:	e01d      	b.n	800cef4 <validateTransitionAck+0xd8>

        case MQTTPubRecPending:
            /* Outgoing publish, Qos 2. */
            isValid = newState == MQTTPubRelSend;
 800ceb8:	79bb      	ldrb	r3, [r7, #6]
 800ceba:	2b04      	cmp	r3, #4
 800cebc:	bf0c      	ite	eq
 800cebe:	2301      	moveq	r3, #1
 800cec0:	2300      	movne	r3, #0
 800cec2:	73fb      	strb	r3, [r7, #15]
            break;
 800cec4:	e016      	b.n	800cef4 <validateTransitionAck+0xd8>

        case MQTTPubRelSend:
            /* Outgoing publish, Qos 2. */
            isValid = newState == MQTTPubCompPending;
 800cec6:	79bb      	ldrb	r3, [r7, #6]
 800cec8:	2b09      	cmp	r3, #9
 800ceca:	bf0c      	ite	eq
 800cecc:	2301      	moveq	r3, #1
 800cece:	2300      	movne	r3, #0
 800ced0:	73fb      	strb	r3, [r7, #15]
            break;
 800ced2:	e00f      	b.n	800cef4 <validateTransitionAck+0xd8>
             *    1. A TCP connection failure happened before receiving a PUBCOMP
             *       for an outgoing PUBREL.
             *    2. An MQTT session is reestablished.
             *    3. Resending the un-acked PUBREL results in this transition
             *       to the same state. */
            isValid = ( newState == MQTTPublishDone ) ||
 800ced4:	79bb      	ldrb	r3, [r7, #6]
 800ced6:	2b0a      	cmp	r3, #10
 800ced8:	d002      	beq.n	800cee0 <validateTransitionAck+0xc4>
 800ceda:	79bb      	ldrb	r3, [r7, #6]
 800cedc:	2b09      	cmp	r3, #9
 800cede:	d101      	bne.n	800cee4 <validateTransitionAck+0xc8>
 800cee0:	2301      	movs	r3, #1
 800cee2:	e000      	b.n	800cee6 <validateTransitionAck+0xca>
 800cee4:	2300      	movs	r3, #0
 800cee6:	73fb      	strb	r3, [r7, #15]
 800cee8:	7bfb      	ldrb	r3, [r7, #15]
 800ceea:	f003 0301 	and.w	r3, r3, #1
 800ceee:	73fb      	strb	r3, [r7, #15]
                      ( newState == MQTTPubCompPending );
            break;
 800cef0:	e000      	b.n	800cef4 <validateTransitionAck+0xd8>
        /* If an ack was sent/received we shouldn't have been in this state. */
        case MQTTStateNull:
        /* If an ack was sent/received the record should exist. */
        default:
            /* Invalid. */
            break;
 800cef2:	bf00      	nop
    }

    return isValid;
 800cef4:	7bfb      	ldrb	r3, [r7, #15]
}
 800cef6:	4618      	mov	r0, r3
 800cef8:	3714      	adds	r7, #20
 800cefa:	46bd      	mov	sp, r7
 800cefc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf00:	4770      	bx	lr
 800cf02:	bf00      	nop

0800cf04 <isPublishOutgoing>:

/*-----------------------------------------------------------*/

static bool isPublishOutgoing( MQTTPubAckType_t packetType,
                               MQTTStateOperation_t opType )
{
 800cf04:	b480      	push	{r7}
 800cf06:	b085      	sub	sp, #20
 800cf08:	af00      	add	r7, sp, #0
 800cf0a:	4603      	mov	r3, r0
 800cf0c:	460a      	mov	r2, r1
 800cf0e:	71fb      	strb	r3, [r7, #7]
 800cf10:	4613      	mov	r3, r2
 800cf12:	71bb      	strb	r3, [r7, #6]
    bool isOutgoing = false;
 800cf14:	2300      	movs	r3, #0
 800cf16:	73fb      	strb	r3, [r7, #15]

    switch( packetType )
 800cf18:	79fb      	ldrb	r3, [r7, #7]
 800cf1a:	2b03      	cmp	r3, #3
 800cf1c:	d009      	beq.n	800cf32 <isPublishOutgoing+0x2e>
 800cf1e:	2b03      	cmp	r3, #3
 800cf20:	dc15      	bgt.n	800cf4e <isPublishOutgoing+0x4a>
 800cf22:	2b01      	cmp	r3, #1
 800cf24:	dc02      	bgt.n	800cf2c <isPublishOutgoing+0x28>
 800cf26:	2b00      	cmp	r3, #0
 800cf28:	da03      	bge.n	800cf32 <isPublishOutgoing+0x2e>
            isOutgoing = opType == MQTT_SEND;
            break;

        default:
            /* No other ack type. */
            break;
 800cf2a:	e010      	b.n	800cf4e <isPublishOutgoing+0x4a>
    switch( packetType )
 800cf2c:	2b02      	cmp	r3, #2
 800cf2e:	d007      	beq.n	800cf40 <isPublishOutgoing+0x3c>
            break;
 800cf30:	e00d      	b.n	800cf4e <isPublishOutgoing+0x4a>
            isOutgoing = opType == MQTT_RECEIVE;
 800cf32:	79bb      	ldrb	r3, [r7, #6]
 800cf34:	2b01      	cmp	r3, #1
 800cf36:	bf0c      	ite	eq
 800cf38:	2301      	moveq	r3, #1
 800cf3a:	2300      	movne	r3, #0
 800cf3c:	73fb      	strb	r3, [r7, #15]
            break;
 800cf3e:	e007      	b.n	800cf50 <isPublishOutgoing+0x4c>
            isOutgoing = opType == MQTT_SEND;
 800cf40:	79bb      	ldrb	r3, [r7, #6]
 800cf42:	2b00      	cmp	r3, #0
 800cf44:	bf0c      	ite	eq
 800cf46:	2301      	moveq	r3, #1
 800cf48:	2300      	movne	r3, #0
 800cf4a:	73fb      	strb	r3, [r7, #15]
            break;
 800cf4c:	e000      	b.n	800cf50 <isPublishOutgoing+0x4c>
            break;
 800cf4e:	bf00      	nop
    }

    return isOutgoing;
 800cf50:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf52:	4618      	mov	r0, r3
 800cf54:	3714      	adds	r7, #20
 800cf56:	46bd      	mov	sp, r7
 800cf58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf5c:	4770      	bx	lr
	...

0800cf60 <findInRecord>:
static size_t findInRecord( const MQTTPubAckInfo_t * records,
                            size_t recordCount,
                            uint16_t packetId,
                            MQTTQoS_t * pQos,
                            MQTTPublishState_t * pCurrentState )
{
 800cf60:	b580      	push	{r7, lr}
 800cf62:	b086      	sub	sp, #24
 800cf64:	af00      	add	r7, sp, #0
 800cf66:	60f8      	str	r0, [r7, #12]
 800cf68:	60b9      	str	r1, [r7, #8]
 800cf6a:	603b      	str	r3, [r7, #0]
 800cf6c:	4613      	mov	r3, r2
 800cf6e:	80fb      	strh	r3, [r7, #6]
    size_t index = 0;
 800cf70:	2300      	movs	r3, #0
 800cf72:	617b      	str	r3, [r7, #20]

    assert( packetId != MQTT_PACKET_ID_INVALID );
 800cf74:	88fb      	ldrh	r3, [r7, #6]
 800cf76:	2b00      	cmp	r3, #0
 800cf78:	d106      	bne.n	800cf88 <findInRecord+0x28>
 800cf7a:	4b1b      	ldr	r3, [pc, #108]	; (800cfe8 <findInRecord+0x88>)
 800cf7c:	4a1b      	ldr	r2, [pc, #108]	; (800cfec <findInRecord+0x8c>)
 800cf7e:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
 800cf82:	481b      	ldr	r0, [pc, #108]	; (800cff0 <findInRecord+0x90>)
 800cf84:	f004 fa0a 	bl	801139c <__assert_func>

    *pCurrentState = MQTTStateNull;
 800cf88:	6a3b      	ldr	r3, [r7, #32]
 800cf8a:	2200      	movs	r2, #0
 800cf8c:	701a      	strb	r2, [r3, #0]

    for( index = 0; index < recordCount; index++ )
 800cf8e:	2300      	movs	r3, #0
 800cf90:	617b      	str	r3, [r7, #20]
 800cf92:	e019      	b.n	800cfc8 <findInRecord+0x68>
    {
        if( records[ index ].packetId == packetId )
 800cf94:	697b      	ldr	r3, [r7, #20]
 800cf96:	009b      	lsls	r3, r3, #2
 800cf98:	68fa      	ldr	r2, [r7, #12]
 800cf9a:	4413      	add	r3, r2
 800cf9c:	881b      	ldrh	r3, [r3, #0]
 800cf9e:	88fa      	ldrh	r2, [r7, #6]
 800cfa0:	429a      	cmp	r2, r3
 800cfa2:	d10e      	bne.n	800cfc2 <findInRecord+0x62>
        {
            *pQos = records[ index ].qos;
 800cfa4:	697b      	ldr	r3, [r7, #20]
 800cfa6:	009b      	lsls	r3, r3, #2
 800cfa8:	68fa      	ldr	r2, [r7, #12]
 800cfaa:	4413      	add	r3, r2
 800cfac:	789a      	ldrb	r2, [r3, #2]
 800cfae:	683b      	ldr	r3, [r7, #0]
 800cfb0:	701a      	strb	r2, [r3, #0]
            *pCurrentState = records[ index ].publishState;
 800cfb2:	697b      	ldr	r3, [r7, #20]
 800cfb4:	009b      	lsls	r3, r3, #2
 800cfb6:	68fa      	ldr	r2, [r7, #12]
 800cfb8:	4413      	add	r3, r2
 800cfba:	78da      	ldrb	r2, [r3, #3]
 800cfbc:	6a3b      	ldr	r3, [r7, #32]
 800cfbe:	701a      	strb	r2, [r3, #0]
            break;
 800cfc0:	e006      	b.n	800cfd0 <findInRecord+0x70>
    for( index = 0; index < recordCount; index++ )
 800cfc2:	697b      	ldr	r3, [r7, #20]
 800cfc4:	3301      	adds	r3, #1
 800cfc6:	617b      	str	r3, [r7, #20]
 800cfc8:	697a      	ldr	r2, [r7, #20]
 800cfca:	68bb      	ldr	r3, [r7, #8]
 800cfcc:	429a      	cmp	r2, r3
 800cfce:	d3e1      	bcc.n	800cf94 <findInRecord+0x34>
        }
    }

    if( index == recordCount )
 800cfd0:	697a      	ldr	r2, [r7, #20]
 800cfd2:	68bb      	ldr	r3, [r7, #8]
 800cfd4:	429a      	cmp	r2, r3
 800cfd6:	d102      	bne.n	800cfde <findInRecord+0x7e>
    {
        index = MQTT_INVALID_STATE_COUNT;
 800cfd8:	2300      	movs	r3, #0
 800cfda:	43db      	mvns	r3, r3
 800cfdc:	617b      	str	r3, [r7, #20]
    }

    return index;
 800cfde:	697b      	ldr	r3, [r7, #20]
}
 800cfe0:	4618      	mov	r0, r3
 800cfe2:	3718      	adds	r7, #24
 800cfe4:	46bd      	mov	sp, r7
 800cfe6:	bd80      	pop	{r7, pc}
 800cfe8:	08014128 	.word	0x08014128
 800cfec:	08014674 	.word	0x08014674
 800cff0:	0801414c 	.word	0x0801414c

0800cff4 <compactRecords>:

/*-----------------------------------------------------------*/

static void compactRecords( MQTTPubAckInfo_t * records,
                            size_t recordCount )
{
 800cff4:	b580      	push	{r7, lr}
 800cff6:	b084      	sub	sp, #16
 800cff8:	af00      	add	r7, sp, #0
 800cffa:	6078      	str	r0, [r7, #4]
 800cffc:	6039      	str	r1, [r7, #0]
    size_t index = 0;
 800cffe:	2300      	movs	r3, #0
 800d000:	60fb      	str	r3, [r7, #12]
    size_t emptyIndex = MQTT_INVALID_STATE_COUNT;
 800d002:	2300      	movs	r3, #0
 800d004:	43db      	mvns	r3, r3
 800d006:	60bb      	str	r3, [r7, #8]

    assert( records != NULL );
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	2b00      	cmp	r3, #0
 800d00c:	d150      	bne.n	800d0b0 <compactRecords+0xbc>
 800d00e:	4b2d      	ldr	r3, [pc, #180]	; (800d0c4 <compactRecords+0xd0>)
 800d010:	4a2d      	ldr	r2, [pc, #180]	; (800d0c8 <compactRecords+0xd4>)
 800d012:	f44f 71f3 	mov.w	r1, #486	; 0x1e6
 800d016:	482d      	ldr	r0, [pc, #180]	; (800d0cc <compactRecords+0xd8>)
 800d018:	f004 f9c0 	bl	801139c <__assert_func>

    /* Find the empty spots and fill those with non empty values. */
    for( ; index < recordCount; index++ )
    {
        /* Find the first empty spot. */
        if( records[ index ].packetId == MQTT_PACKET_ID_INVALID )
 800d01c:	68fb      	ldr	r3, [r7, #12]
 800d01e:	009b      	lsls	r3, r3, #2
 800d020:	687a      	ldr	r2, [r7, #4]
 800d022:	4413      	add	r3, r2
 800d024:	881b      	ldrh	r3, [r3, #0]
 800d026:	2b00      	cmp	r3, #0
 800d028:	d107      	bne.n	800d03a <compactRecords+0x46>
        {
            if( emptyIndex == MQTT_INVALID_STATE_COUNT )
 800d02a:	2300      	movs	r3, #0
 800d02c:	43db      	mvns	r3, r3
 800d02e:	68ba      	ldr	r2, [r7, #8]
 800d030:	429a      	cmp	r2, r3
 800d032:	d13a      	bne.n	800d0aa <compactRecords+0xb6>
            {
                emptyIndex = index;
 800d034:	68fb      	ldr	r3, [r7, #12]
 800d036:	60bb      	str	r3, [r7, #8]
 800d038:	e037      	b.n	800d0aa <compactRecords+0xb6>
            }
        }
        else
        {
            if( emptyIndex != MQTT_INVALID_STATE_COUNT )
 800d03a:	2300      	movs	r3, #0
 800d03c:	43db      	mvns	r3, r3
 800d03e:	68ba      	ldr	r2, [r7, #8]
 800d040:	429a      	cmp	r2, r3
 800d042:	d032      	beq.n	800d0aa <compactRecords+0xb6>
            {
                /* Copy over the contents at non empty index to empty index. */
                records[ emptyIndex ].packetId = records[ index ].packetId;
 800d044:	68fb      	ldr	r3, [r7, #12]
 800d046:	009b      	lsls	r3, r3, #2
 800d048:	687a      	ldr	r2, [r7, #4]
 800d04a:	441a      	add	r2, r3
 800d04c:	68bb      	ldr	r3, [r7, #8]
 800d04e:	009b      	lsls	r3, r3, #2
 800d050:	6879      	ldr	r1, [r7, #4]
 800d052:	440b      	add	r3, r1
 800d054:	8812      	ldrh	r2, [r2, #0]
 800d056:	801a      	strh	r2, [r3, #0]
                records[ emptyIndex ].qos = records[ index ].qos;
 800d058:	68fb      	ldr	r3, [r7, #12]
 800d05a:	009b      	lsls	r3, r3, #2
 800d05c:	687a      	ldr	r2, [r7, #4]
 800d05e:	441a      	add	r2, r3
 800d060:	68bb      	ldr	r3, [r7, #8]
 800d062:	009b      	lsls	r3, r3, #2
 800d064:	6879      	ldr	r1, [r7, #4]
 800d066:	440b      	add	r3, r1
 800d068:	7892      	ldrb	r2, [r2, #2]
 800d06a:	709a      	strb	r2, [r3, #2]
                records[ emptyIndex ].publishState = records[ index ].publishState;
 800d06c:	68fb      	ldr	r3, [r7, #12]
 800d06e:	009b      	lsls	r3, r3, #2
 800d070:	687a      	ldr	r2, [r7, #4]
 800d072:	441a      	add	r2, r3
 800d074:	68bb      	ldr	r3, [r7, #8]
 800d076:	009b      	lsls	r3, r3, #2
 800d078:	6879      	ldr	r1, [r7, #4]
 800d07a:	440b      	add	r3, r1
 800d07c:	78d2      	ldrb	r2, [r2, #3]
 800d07e:	70da      	strb	r2, [r3, #3]

                /* Mark the record at current non empty index as invalid. */
                records[ index ].packetId = MQTT_PACKET_ID_INVALID;
 800d080:	68fb      	ldr	r3, [r7, #12]
 800d082:	009b      	lsls	r3, r3, #2
 800d084:	687a      	ldr	r2, [r7, #4]
 800d086:	4413      	add	r3, r2
 800d088:	2200      	movs	r2, #0
 800d08a:	801a      	strh	r2, [r3, #0]
                records[ index ].qos = MQTTQoS0;
 800d08c:	68fb      	ldr	r3, [r7, #12]
 800d08e:	009b      	lsls	r3, r3, #2
 800d090:	687a      	ldr	r2, [r7, #4]
 800d092:	4413      	add	r3, r2
 800d094:	2200      	movs	r2, #0
 800d096:	709a      	strb	r2, [r3, #2]
                records[ index ].publishState = MQTTStateNull;
 800d098:	68fb      	ldr	r3, [r7, #12]
 800d09a:	009b      	lsls	r3, r3, #2
 800d09c:	687a      	ldr	r2, [r7, #4]
 800d09e:	4413      	add	r3, r2
 800d0a0:	2200      	movs	r2, #0
 800d0a2:	70da      	strb	r2, [r3, #3]

                /* Advance the emptyIndex. */
                emptyIndex++;
 800d0a4:	68bb      	ldr	r3, [r7, #8]
 800d0a6:	3301      	adds	r3, #1
 800d0a8:	60bb      	str	r3, [r7, #8]
    for( ; index < recordCount; index++ )
 800d0aa:	68fb      	ldr	r3, [r7, #12]
 800d0ac:	3301      	adds	r3, #1
 800d0ae:	60fb      	str	r3, [r7, #12]
 800d0b0:	68fa      	ldr	r2, [r7, #12]
 800d0b2:	683b      	ldr	r3, [r7, #0]
 800d0b4:	429a      	cmp	r2, r3
 800d0b6:	d3b1      	bcc.n	800d01c <compactRecords+0x28>
            }
        }
    }
}
 800d0b8:	bf00      	nop
 800d0ba:	bf00      	nop
 800d0bc:	3710      	adds	r7, #16
 800d0be:	46bd      	mov	sp, r7
 800d0c0:	bd80      	pop	{r7, pc}
 800d0c2:	bf00      	nop
 800d0c4:	0801417c 	.word	0x0801417c
 800d0c8:	08014684 	.word	0x08014684
 800d0cc:	0801414c 	.word	0x0801414c

0800d0d0 <addRecord>:
static MQTTStatus_t addRecord( MQTTPubAckInfo_t * records,
                               size_t recordCount,
                               uint16_t packetId,
                               MQTTQoS_t qos,
                               MQTTPublishState_t publishState )
{
 800d0d0:	b580      	push	{r7, lr}
 800d0d2:	b088      	sub	sp, #32
 800d0d4:	af00      	add	r7, sp, #0
 800d0d6:	60f8      	str	r0, [r7, #12]
 800d0d8:	60b9      	str	r1, [r7, #8]
 800d0da:	4611      	mov	r1, r2
 800d0dc:	461a      	mov	r2, r3
 800d0de:	460b      	mov	r3, r1
 800d0e0:	80fb      	strh	r3, [r7, #6]
 800d0e2:	4613      	mov	r3, r2
 800d0e4:	717b      	strb	r3, [r7, #5]
    MQTTStatus_t status = MQTTNoMemory;
 800d0e6:	2302      	movs	r3, #2
 800d0e8:	77fb      	strb	r3, [r7, #31]
    int32_t index = 0;
 800d0ea:	2300      	movs	r3, #0
 800d0ec:	61bb      	str	r3, [r7, #24]
    size_t availableIndex = recordCount;
 800d0ee:	68bb      	ldr	r3, [r7, #8]
 800d0f0:	617b      	str	r3, [r7, #20]
    bool validEntryFound = false;
 800d0f2:	2300      	movs	r3, #0
 800d0f4:	74fb      	strb	r3, [r7, #19]

    assert( packetId != MQTT_PACKET_ID_INVALID );
 800d0f6:	88fb      	ldrh	r3, [r7, #6]
 800d0f8:	2b00      	cmp	r3, #0
 800d0fa:	d106      	bne.n	800d10a <addRecord+0x3a>
 800d0fc:	4b32      	ldr	r3, [pc, #200]	; (800d1c8 <addRecord+0xf8>)
 800d0fe:	4a33      	ldr	r2, [pc, #204]	; (800d1cc <addRecord+0xfc>)
 800d100:	f240 2115 	movw	r1, #533	; 0x215
 800d104:	4832      	ldr	r0, [pc, #200]	; (800d1d0 <addRecord+0x100>)
 800d106:	f004 f949 	bl	801139c <__assert_func>
    assert( qos != MQTTQoS0 );
 800d10a:	797b      	ldrb	r3, [r7, #5]
 800d10c:	2b00      	cmp	r3, #0
 800d10e:	d106      	bne.n	800d11e <addRecord+0x4e>
 800d110:	4b30      	ldr	r3, [pc, #192]	; (800d1d4 <addRecord+0x104>)
 800d112:	4a2e      	ldr	r2, [pc, #184]	; (800d1cc <addRecord+0xfc>)
 800d114:	f240 2116 	movw	r1, #534	; 0x216
 800d118:	482d      	ldr	r0, [pc, #180]	; (800d1d0 <addRecord+0x100>)
 800d11a:	f004 f93f 	bl	801139c <__assert_func>

    /* Check if we have to compact the records. This is known by checking if
     * the last spot in the array is filled. */
    if( records[ recordCount - 1U ].packetId != MQTT_PACKET_ID_INVALID )
 800d11e:	68bb      	ldr	r3, [r7, #8]
 800d120:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800d124:	3b01      	subs	r3, #1
 800d126:	009b      	lsls	r3, r3, #2
 800d128:	68fa      	ldr	r2, [r7, #12]
 800d12a:	4413      	add	r3, r2
 800d12c:	881b      	ldrh	r3, [r3, #0]
 800d12e:	2b00      	cmp	r3, #0
 800d130:	d003      	beq.n	800d13a <addRecord+0x6a>
    {
        compactRecords( records, recordCount );
 800d132:	68b9      	ldr	r1, [r7, #8]
 800d134:	68f8      	ldr	r0, [r7, #12]
 800d136:	f7ff ff5d 	bl	800cff4 <compactRecords>

    /* Start from end so first available index will be populated.
     * Available index is always found after the last element in the records.
     * This is to make sure the relative order of the records in order to meet
     * the message ordering requirement of MQTT spec 3.1.1. */
    for( index = ( ( int32_t ) recordCount - 1 ); index >= 0; index-- )
 800d13a:	68bb      	ldr	r3, [r7, #8]
 800d13c:	3b01      	subs	r3, #1
 800d13e:	61bb      	str	r3, [r7, #24]
 800d140:	e021      	b.n	800d186 <addRecord+0xb6>
    {
        /* Available index is only found after packet at the highest index. */
        if( records[ index ].packetId == MQTT_PACKET_ID_INVALID )
 800d142:	69bb      	ldr	r3, [r7, #24]
 800d144:	009b      	lsls	r3, r3, #2
 800d146:	68fa      	ldr	r2, [r7, #12]
 800d148:	4413      	add	r3, r2
 800d14a:	881b      	ldrh	r3, [r3, #0]
 800d14c:	2b00      	cmp	r3, #0
 800d14e:	d108      	bne.n	800d162 <addRecord+0x92>
        {
            if( validEntryFound == false )
 800d150:	7cfb      	ldrb	r3, [r7, #19]
 800d152:	f083 0301 	eor.w	r3, r3, #1
 800d156:	b2db      	uxtb	r3, r3
 800d158:	2b00      	cmp	r3, #0
 800d15a:	d011      	beq.n	800d180 <addRecord+0xb0>
            {
                availableIndex = ( size_t ) index;
 800d15c:	69bb      	ldr	r3, [r7, #24]
 800d15e:	617b      	str	r3, [r7, #20]
 800d160:	e00e      	b.n	800d180 <addRecord+0xb0>
            }
        }
        else
        {
            /* A non-empty spot found in the records. */
            validEntryFound = true;
 800d162:	2301      	movs	r3, #1
 800d164:	74fb      	strb	r3, [r7, #19]

            if( records[ index ].packetId == packetId )
 800d166:	69bb      	ldr	r3, [r7, #24]
 800d168:	009b      	lsls	r3, r3, #2
 800d16a:	68fa      	ldr	r2, [r7, #12]
 800d16c:	4413      	add	r3, r2
 800d16e:	881b      	ldrh	r3, [r3, #0]
 800d170:	88fa      	ldrh	r2, [r7, #6]
 800d172:	429a      	cmp	r2, r3
 800d174:	d104      	bne.n	800d180 <addRecord+0xb0>
                /* Collision. */
                LogError( ( "Collision when adding PacketID=%u at index=%d.",
                            ( unsigned int ) packetId,
                            ( int ) index ) );

                status = MQTTStateCollision;
 800d176:	2309      	movs	r3, #9
 800d178:	77fb      	strb	r3, [r7, #31]
                availableIndex = recordCount;
 800d17a:	68bb      	ldr	r3, [r7, #8]
 800d17c:	617b      	str	r3, [r7, #20]
                break;
 800d17e:	e005      	b.n	800d18c <addRecord+0xbc>
    for( index = ( ( int32_t ) recordCount - 1 ); index >= 0; index-- )
 800d180:	69bb      	ldr	r3, [r7, #24]
 800d182:	3b01      	subs	r3, #1
 800d184:	61bb      	str	r3, [r7, #24]
 800d186:	69bb      	ldr	r3, [r7, #24]
 800d188:	2b00      	cmp	r3, #0
 800d18a:	dada      	bge.n	800d142 <addRecord+0x72>
            }
        }
    }

    if( availableIndex < recordCount )
 800d18c:	697a      	ldr	r2, [r7, #20]
 800d18e:	68bb      	ldr	r3, [r7, #8]
 800d190:	429a      	cmp	r2, r3
 800d192:	d214      	bcs.n	800d1be <addRecord+0xee>
    {
        records[ availableIndex ].packetId = packetId;
 800d194:	697b      	ldr	r3, [r7, #20]
 800d196:	009b      	lsls	r3, r3, #2
 800d198:	68fa      	ldr	r2, [r7, #12]
 800d19a:	4413      	add	r3, r2
 800d19c:	88fa      	ldrh	r2, [r7, #6]
 800d19e:	801a      	strh	r2, [r3, #0]
        records[ availableIndex ].qos = qos;
 800d1a0:	697b      	ldr	r3, [r7, #20]
 800d1a2:	009b      	lsls	r3, r3, #2
 800d1a4:	68fa      	ldr	r2, [r7, #12]
 800d1a6:	4413      	add	r3, r2
 800d1a8:	797a      	ldrb	r2, [r7, #5]
 800d1aa:	709a      	strb	r2, [r3, #2]
        records[ availableIndex ].publishState = publishState;
 800d1ac:	697b      	ldr	r3, [r7, #20]
 800d1ae:	009b      	lsls	r3, r3, #2
 800d1b0:	68fa      	ldr	r2, [r7, #12]
 800d1b2:	4413      	add	r3, r2
 800d1b4:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800d1b8:	70da      	strb	r2, [r3, #3]
        status = MQTTSuccess;
 800d1ba:	2300      	movs	r3, #0
 800d1bc:	77fb      	strb	r3, [r7, #31]
    }

    return status;
 800d1be:	7ffb      	ldrb	r3, [r7, #31]
}
 800d1c0:	4618      	mov	r0, r3
 800d1c2:	3720      	adds	r7, #32
 800d1c4:	46bd      	mov	sp, r7
 800d1c6:	bd80      	pop	{r7, pc}
 800d1c8:	08014128 	.word	0x08014128
 800d1cc:	08014694 	.word	0x08014694
 800d1d0:	0801414c 	.word	0x0801414c
 800d1d4:	0801418c 	.word	0x0801418c

0800d1d8 <updateRecord>:

static void updateRecord( MQTTPubAckInfo_t * records,
                          size_t recordIndex,
                          MQTTPublishState_t newState,
                          bool shouldDelete )
{
 800d1d8:	b580      	push	{r7, lr}
 800d1da:	b084      	sub	sp, #16
 800d1dc:	af00      	add	r7, sp, #0
 800d1de:	60f8      	str	r0, [r7, #12]
 800d1e0:	60b9      	str	r1, [r7, #8]
 800d1e2:	4611      	mov	r1, r2
 800d1e4:	461a      	mov	r2, r3
 800d1e6:	460b      	mov	r3, r1
 800d1e8:	71fb      	strb	r3, [r7, #7]
 800d1ea:	4613      	mov	r3, r2
 800d1ec:	71bb      	strb	r3, [r7, #6]
    assert( records != NULL );
 800d1ee:	68fb      	ldr	r3, [r7, #12]
 800d1f0:	2b00      	cmp	r3, #0
 800d1f2:	d106      	bne.n	800d202 <updateRecord+0x2a>
 800d1f4:	4b13      	ldr	r3, [pc, #76]	; (800d244 <updateRecord+0x6c>)
 800d1f6:	4a14      	ldr	r2, [pc, #80]	; (800d248 <updateRecord+0x70>)
 800d1f8:	f240 2152 	movw	r1, #594	; 0x252
 800d1fc:	4813      	ldr	r0, [pc, #76]	; (800d24c <updateRecord+0x74>)
 800d1fe:	f004 f8cd 	bl	801139c <__assert_func>

    if( shouldDelete == true )
 800d202:	79bb      	ldrb	r3, [r7, #6]
 800d204:	2b00      	cmp	r3, #0
 800d206:	d012      	beq.n	800d22e <updateRecord+0x56>
    {
        /* Mark the record as invalid. */
        records[ recordIndex ].packetId = MQTT_PACKET_ID_INVALID;
 800d208:	68bb      	ldr	r3, [r7, #8]
 800d20a:	009b      	lsls	r3, r3, #2
 800d20c:	68fa      	ldr	r2, [r7, #12]
 800d20e:	4413      	add	r3, r2
 800d210:	2200      	movs	r2, #0
 800d212:	801a      	strh	r2, [r3, #0]
        records[ recordIndex ].qos = MQTTQoS0;
 800d214:	68bb      	ldr	r3, [r7, #8]
 800d216:	009b      	lsls	r3, r3, #2
 800d218:	68fa      	ldr	r2, [r7, #12]
 800d21a:	4413      	add	r3, r2
 800d21c:	2200      	movs	r2, #0
 800d21e:	709a      	strb	r2, [r3, #2]
        records[ recordIndex ].publishState = MQTTStateNull;
 800d220:	68bb      	ldr	r3, [r7, #8]
 800d222:	009b      	lsls	r3, r3, #2
 800d224:	68fa      	ldr	r2, [r7, #12]
 800d226:	4413      	add	r3, r2
 800d228:	2200      	movs	r2, #0
 800d22a:	70da      	strb	r2, [r3, #3]
    }
    else
    {
        records[ recordIndex ].publishState = newState;
    }
}
 800d22c:	e005      	b.n	800d23a <updateRecord+0x62>
        records[ recordIndex ].publishState = newState;
 800d22e:	68bb      	ldr	r3, [r7, #8]
 800d230:	009b      	lsls	r3, r3, #2
 800d232:	68fa      	ldr	r2, [r7, #12]
 800d234:	4413      	add	r3, r2
 800d236:	79fa      	ldrb	r2, [r7, #7]
 800d238:	70da      	strb	r2, [r3, #3]
}
 800d23a:	bf00      	nop
 800d23c:	3710      	adds	r7, #16
 800d23e:	46bd      	mov	sp, r7
 800d240:	bd80      	pop	{r7, pc}
 800d242:	bf00      	nop
 800d244:	0801417c 	.word	0x0801417c
 800d248:	080146a0 	.word	0x080146a0
 800d24c:	0801414c 	.word	0x0801414c

0800d250 <stateSelect>:
/*-----------------------------------------------------------*/

static uint16_t stateSelect( const MQTTContext_t * pMqttContext,
                             uint16_t searchStates,
                             MQTTStateCursor_t * pCursor )
{
 800d250:	b580      	push	{r7, lr}
 800d252:	b088      	sub	sp, #32
 800d254:	af00      	add	r7, sp, #0
 800d256:	60f8      	str	r0, [r7, #12]
 800d258:	460b      	mov	r3, r1
 800d25a:	607a      	str	r2, [r7, #4]
 800d25c:	817b      	strh	r3, [r7, #10]
    uint16_t packetId = MQTT_PACKET_ID_INVALID;
 800d25e:	2300      	movs	r3, #0
 800d260:	83fb      	strh	r3, [r7, #30]
    uint16_t outgoingStates = 0U;
 800d262:	2300      	movs	r3, #0
 800d264:	83bb      	strh	r3, [r7, #28]
    const MQTTPubAckInfo_t * records = NULL;
 800d266:	2300      	movs	r3, #0
 800d268:	61bb      	str	r3, [r7, #24]
    size_t maxCount;
    bool stateCheck = false;
 800d26a:	2300      	movs	r3, #0
 800d26c:	75fb      	strb	r3, [r7, #23]

    assert( pMqttContext != NULL );
 800d26e:	68fb      	ldr	r3, [r7, #12]
 800d270:	2b00      	cmp	r3, #0
 800d272:	d106      	bne.n	800d282 <stateSelect+0x32>
 800d274:	4b43      	ldr	r3, [pc, #268]	; (800d384 <stateSelect+0x134>)
 800d276:	4a44      	ldr	r2, [pc, #272]	; (800d388 <stateSelect+0x138>)
 800d278:	f240 216d 	movw	r1, #621	; 0x26d
 800d27c:	4843      	ldr	r0, [pc, #268]	; (800d38c <stateSelect+0x13c>)
 800d27e:	f004 f88d 	bl	801139c <__assert_func>
    assert( searchStates != 0U );
 800d282:	897b      	ldrh	r3, [r7, #10]
 800d284:	2b00      	cmp	r3, #0
 800d286:	d106      	bne.n	800d296 <stateSelect+0x46>
 800d288:	4b41      	ldr	r3, [pc, #260]	; (800d390 <stateSelect+0x140>)
 800d28a:	4a3f      	ldr	r2, [pc, #252]	; (800d388 <stateSelect+0x138>)
 800d28c:	f240 216e 	movw	r1, #622	; 0x26e
 800d290:	483e      	ldr	r0, [pc, #248]	; (800d38c <stateSelect+0x13c>)
 800d292:	f004 f883 	bl	801139c <__assert_func>
    assert( pCursor != NULL );
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	2b00      	cmp	r3, #0
 800d29a:	d106      	bne.n	800d2aa <stateSelect+0x5a>
 800d29c:	4b3d      	ldr	r3, [pc, #244]	; (800d394 <stateSelect+0x144>)
 800d29e:	4a3a      	ldr	r2, [pc, #232]	; (800d388 <stateSelect+0x138>)
 800d2a0:	f240 216f 	movw	r1, #623	; 0x26f
 800d2a4:	4839      	ldr	r0, [pc, #228]	; (800d38c <stateSelect+0x13c>)
 800d2a6:	f004 f879 	bl	801139c <__assert_func>

    /* Create a bit map with all the outgoing publish states. */
    UINT16_SET_BIT( outgoingStates, MQTTPublishSend );
 800d2aa:	8bbb      	ldrh	r3, [r7, #28]
 800d2ac:	f043 0302 	orr.w	r3, r3, #2
 800d2b0:	83bb      	strh	r3, [r7, #28]
    UINT16_SET_BIT( outgoingStates, MQTTPubAckPending );
 800d2b2:	8bbb      	ldrh	r3, [r7, #28]
 800d2b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d2b8:	83bb      	strh	r3, [r7, #28]
    UINT16_SET_BIT( outgoingStates, MQTTPubRecPending );
 800d2ba:	8bbb      	ldrh	r3, [r7, #28]
 800d2bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d2c0:	83bb      	strh	r3, [r7, #28]
    UINT16_SET_BIT( outgoingStates, MQTTPubRelSend );
 800d2c2:	8bbb      	ldrh	r3, [r7, #28]
 800d2c4:	f043 0310 	orr.w	r3, r3, #16
 800d2c8:	83bb      	strh	r3, [r7, #28]
    UINT16_SET_BIT( outgoingStates, MQTTPubCompPending );
 800d2ca:	8bbb      	ldrh	r3, [r7, #28]
 800d2cc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800d2d0:	83bb      	strh	r3, [r7, #28]

    /* Only outgoing publish records need to be searched. */
    assert( ( outgoingStates & searchStates ) > 0U );
 800d2d2:	8bba      	ldrh	r2, [r7, #28]
 800d2d4:	897b      	ldrh	r3, [r7, #10]
 800d2d6:	4013      	ands	r3, r2
 800d2d8:	b29b      	uxth	r3, r3
 800d2da:	2b00      	cmp	r3, #0
 800d2dc:	d106      	bne.n	800d2ec <stateSelect+0x9c>
 800d2de:	4b2e      	ldr	r3, [pc, #184]	; (800d398 <stateSelect+0x148>)
 800d2e0:	4a29      	ldr	r2, [pc, #164]	; (800d388 <stateSelect+0x138>)
 800d2e2:	f240 2179 	movw	r1, #633	; 0x279
 800d2e6:	4829      	ldr	r0, [pc, #164]	; (800d38c <stateSelect+0x13c>)
 800d2e8:	f004 f858 	bl	801139c <__assert_func>
    assert( ( ~outgoingStates & searchStates ) == 0U );
 800d2ec:	8bbb      	ldrh	r3, [r7, #28]
 800d2ee:	43da      	mvns	r2, r3
 800d2f0:	897b      	ldrh	r3, [r7, #10]
 800d2f2:	4013      	ands	r3, r2
 800d2f4:	2b00      	cmp	r3, #0
 800d2f6:	d006      	beq.n	800d306 <stateSelect+0xb6>
 800d2f8:	4b28      	ldr	r3, [pc, #160]	; (800d39c <stateSelect+0x14c>)
 800d2fa:	4a23      	ldr	r2, [pc, #140]	; (800d388 <stateSelect+0x138>)
 800d2fc:	f240 217a 	movw	r1, #634	; 0x27a
 800d300:	4822      	ldr	r0, [pc, #136]	; (800d38c <stateSelect+0x13c>)
 800d302:	f004 f84b 	bl	801139c <__assert_func>

    records = pMqttContext->outgoingPublishRecords;
 800d306:	68fb      	ldr	r3, [r7, #12]
 800d308:	681b      	ldr	r3, [r3, #0]
 800d30a:	61bb      	str	r3, [r7, #24]
    maxCount = pMqttContext->outgoingPublishRecordMaxCount;
 800d30c:	68fb      	ldr	r3, [r7, #12]
 800d30e:	689b      	ldr	r3, [r3, #8]
 800d310:	613b      	str	r3, [r7, #16]

    while( *pCursor < maxCount )
 800d312:	e02d      	b.n	800d370 <stateSelect+0x120>
    {
        /* Check if any of the search states are present. */
        stateCheck = UINT16_CHECK_BIT( searchStates, records[ *pCursor ].publishState );
 800d314:	897a      	ldrh	r2, [r7, #10]
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	681b      	ldr	r3, [r3, #0]
 800d31a:	009b      	lsls	r3, r3, #2
 800d31c:	69b9      	ldr	r1, [r7, #24]
 800d31e:	440b      	add	r3, r1
 800d320:	78db      	ldrb	r3, [r3, #3]
 800d322:	4619      	mov	r1, r3
 800d324:	2301      	movs	r3, #1
 800d326:	408b      	lsls	r3, r1
 800d328:	401a      	ands	r2, r3
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	681b      	ldr	r3, [r3, #0]
 800d32e:	009b      	lsls	r3, r3, #2
 800d330:	69b9      	ldr	r1, [r7, #24]
 800d332:	440b      	add	r3, r1
 800d334:	78db      	ldrb	r3, [r3, #3]
 800d336:	4619      	mov	r1, r3
 800d338:	2301      	movs	r3, #1
 800d33a:	408b      	lsls	r3, r1
 800d33c:	429a      	cmp	r2, r3
 800d33e:	bf0c      	ite	eq
 800d340:	2301      	moveq	r3, #1
 800d342:	2300      	movne	r3, #0
 800d344:	75fb      	strb	r3, [r7, #23]

        if( stateCheck == true )
 800d346:	7dfb      	ldrb	r3, [r7, #23]
 800d348:	2b00      	cmp	r3, #0
 800d34a:	d00c      	beq.n	800d366 <stateSelect+0x116>
        {
            packetId = records[ *pCursor ].packetId;
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	681b      	ldr	r3, [r3, #0]
 800d350:	009b      	lsls	r3, r3, #2
 800d352:	69ba      	ldr	r2, [r7, #24]
 800d354:	4413      	add	r3, r2
 800d356:	881b      	ldrh	r3, [r3, #0]
 800d358:	83fb      	strh	r3, [r7, #30]
            ( *pCursor )++;
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	681b      	ldr	r3, [r3, #0]
 800d35e:	1c5a      	adds	r2, r3, #1
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	601a      	str	r2, [r3, #0]
            break;
 800d364:	e009      	b.n	800d37a <stateSelect+0x12a>
        }

        ( *pCursor )++;
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	681b      	ldr	r3, [r3, #0]
 800d36a:	1c5a      	adds	r2, r3, #1
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	601a      	str	r2, [r3, #0]
    while( *pCursor < maxCount )
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	681b      	ldr	r3, [r3, #0]
 800d374:	693a      	ldr	r2, [r7, #16]
 800d376:	429a      	cmp	r2, r3
 800d378:	d8cc      	bhi.n	800d314 <stateSelect+0xc4>
    }

    return packetId;
 800d37a:	8bfb      	ldrh	r3, [r7, #30]
}
 800d37c:	4618      	mov	r0, r3
 800d37e:	3720      	adds	r7, #32
 800d380:	46bd      	mov	sp, r7
 800d382:	bd80      	pop	{r7, pc}
 800d384:	0801419c 	.word	0x0801419c
 800d388:	080146b0 	.word	0x080146b0
 800d38c:	0801414c 	.word	0x0801414c
 800d390:	080141b4 	.word	0x080141b4
 800d394:	080141c8 	.word	0x080141c8
 800d398:	080141d8 	.word	0x080141d8
 800d39c:	08014200 	.word	0x08014200

0800d3a0 <MQTT_CalculateStateAck>:
/*-----------------------------------------------------------*/

MQTTPublishState_t MQTT_CalculateStateAck( MQTTPubAckType_t packetType,
                                           MQTTStateOperation_t opType,
                                           MQTTQoS_t qos )
{
 800d3a0:	b480      	push	{r7}
 800d3a2:	b085      	sub	sp, #20
 800d3a4:	af00      	add	r7, sp, #0
 800d3a6:	4603      	mov	r3, r0
 800d3a8:	71fb      	strb	r3, [r7, #7]
 800d3aa:	460b      	mov	r3, r1
 800d3ac:	71bb      	strb	r3, [r7, #6]
 800d3ae:	4613      	mov	r3, r2
 800d3b0:	717b      	strb	r3, [r7, #5]
    MQTTPublishState_t calculatedState = MQTTStateNull;
 800d3b2:	2300      	movs	r3, #0
 800d3b4:	73fb      	strb	r3, [r7, #15]
    /* There are more QoS2 cases than QoS1, so initialize to that. */
    bool qosValid = qos == MQTTQoS2;
 800d3b6:	797b      	ldrb	r3, [r7, #5]
 800d3b8:	2b02      	cmp	r3, #2
 800d3ba:	bf0c      	ite	eq
 800d3bc:	2301      	moveq	r3, #1
 800d3be:	2300      	movne	r3, #0
 800d3c0:	73bb      	strb	r3, [r7, #14]

    switch( packetType )
 800d3c2:	79fb      	ldrb	r3, [r7, #7]
 800d3c4:	2b03      	cmp	r3, #3
 800d3c6:	d827      	bhi.n	800d418 <MQTT_CalculateStateAck+0x78>
 800d3c8:	a201      	add	r2, pc, #4	; (adr r2, 800d3d0 <MQTT_CalculateStateAck+0x30>)
 800d3ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d3ce:	bf00      	nop
 800d3d0:	0800d3e1 	.word	0x0800d3e1
 800d3d4:	0800d3f3 	.word	0x0800d3f3
 800d3d8:	0800d403 	.word	0x0800d403
 800d3dc:	0800d413 	.word	0x0800d413
    {
        case MQTTPuback:
            qosValid = qos == MQTTQoS1;
 800d3e0:	797b      	ldrb	r3, [r7, #5]
 800d3e2:	2b01      	cmp	r3, #1
 800d3e4:	bf0c      	ite	eq
 800d3e6:	2301      	moveq	r3, #1
 800d3e8:	2300      	movne	r3, #0
 800d3ea:	73bb      	strb	r3, [r7, #14]
            calculatedState = MQTTPublishDone;
 800d3ec:	230a      	movs	r3, #10
 800d3ee:	73fb      	strb	r3, [r7, #15]
            break;
 800d3f0:	e013      	b.n	800d41a <MQTT_CalculateStateAck+0x7a>

        case MQTTPubrec:

            /* Incoming publish: send PUBREC, PUBREL pending.
             * Outgoing publish: receive PUBREC, send PUBREL. */
            calculatedState = ( opType == MQTT_SEND ) ? MQTTPubRelPending : MQTTPubRelSend;
 800d3f2:	79bb      	ldrb	r3, [r7, #6]
 800d3f4:	2b00      	cmp	r3, #0
 800d3f6:	d101      	bne.n	800d3fc <MQTT_CalculateStateAck+0x5c>
 800d3f8:	2308      	movs	r3, #8
 800d3fa:	e000      	b.n	800d3fe <MQTT_CalculateStateAck+0x5e>
 800d3fc:	2304      	movs	r3, #4
 800d3fe:	73fb      	strb	r3, [r7, #15]
            break;
 800d400:	e00b      	b.n	800d41a <MQTT_CalculateStateAck+0x7a>

        case MQTTPubrel:

            /* Incoming publish: receive PUBREL, send PUBCOMP.
             * Outgoing publish: send PUBREL, PUBCOMP pending. */
            calculatedState = ( opType == MQTT_SEND ) ? MQTTPubCompPending : MQTTPubCompSend;
 800d402:	79bb      	ldrb	r3, [r7, #6]
 800d404:	2b00      	cmp	r3, #0
 800d406:	d101      	bne.n	800d40c <MQTT_CalculateStateAck+0x6c>
 800d408:	2309      	movs	r3, #9
 800d40a:	e000      	b.n	800d40e <MQTT_CalculateStateAck+0x6e>
 800d40c:	2305      	movs	r3, #5
 800d40e:	73fb      	strb	r3, [r7, #15]
            break;
 800d410:	e003      	b.n	800d41a <MQTT_CalculateStateAck+0x7a>

        case MQTTPubcomp:
            calculatedState = MQTTPublishDone;
 800d412:	230a      	movs	r3, #10
 800d414:	73fb      	strb	r3, [r7, #15]
            break;
 800d416:	e000      	b.n	800d41a <MQTT_CalculateStateAck+0x7a>

        default:
            /* No other ack type. */
            break;
 800d418:	bf00      	nop
    }

    /* Sanity check, make sure ack and QoS agree. */
    if( qosValid == false )
 800d41a:	7bbb      	ldrb	r3, [r7, #14]
 800d41c:	f083 0301 	eor.w	r3, r3, #1
 800d420:	b2db      	uxtb	r3, r3
 800d422:	2b00      	cmp	r3, #0
 800d424:	d001      	beq.n	800d42a <MQTT_CalculateStateAck+0x8a>
    {
        calculatedState = MQTTStateNull;
 800d426:	2300      	movs	r3, #0
 800d428:	73fb      	strb	r3, [r7, #15]
    }

    return calculatedState;
 800d42a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d42c:	4618      	mov	r0, r3
 800d42e:	3714      	adds	r7, #20
 800d430:	46bd      	mov	sp, r7
 800d432:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d436:	4770      	bx	lr

0800d438 <updateStateAck>:
                                    size_t maxRecordCount,
                                    size_t recordIndex,
                                    uint16_t packetId,
                                    MQTTPublishState_t currentState,
                                    MQTTPublishState_t newState )
{
 800d438:	b580      	push	{r7, lr}
 800d43a:	b088      	sub	sp, #32
 800d43c:	af02      	add	r7, sp, #8
 800d43e:	60f8      	str	r0, [r7, #12]
 800d440:	60b9      	str	r1, [r7, #8]
 800d442:	607a      	str	r2, [r7, #4]
 800d444:	807b      	strh	r3, [r7, #2]
    MQTTStatus_t status = MQTTIllegalState;
 800d446:	2308      	movs	r3, #8
 800d448:	75fb      	strb	r3, [r7, #23]
    bool shouldDeleteRecord = false;
 800d44a:	2300      	movs	r3, #0
 800d44c:	75bb      	strb	r3, [r7, #22]
    bool isTransitionValid = false;
 800d44e:	2300      	movs	r3, #0
 800d450:	757b      	strb	r3, [r7, #21]

    assert( records != NULL );
 800d452:	68fb      	ldr	r3, [r7, #12]
 800d454:	2b00      	cmp	r3, #0
 800d456:	d106      	bne.n	800d466 <updateStateAck+0x2e>
 800d458:	4b22      	ldr	r3, [pc, #136]	; (800d4e4 <updateStateAck+0xac>)
 800d45a:	4a23      	ldr	r2, [pc, #140]	; (800d4e8 <updateStateAck+0xb0>)
 800d45c:	f240 21cf 	movw	r1, #719	; 0x2cf
 800d460:	4822      	ldr	r0, [pc, #136]	; (800d4ec <updateStateAck+0xb4>)
 800d462:	f003 ff9b 	bl	801139c <__assert_func>

    /* Record to be deleted if the state transition is completed or if a PUBREC
     * is received for an outgoing QoS2 publish. When a PUBREC is received,
     * record is deleted and added back to the end of the records to maintain
     * ordering for PUBRELs. */
    shouldDeleteRecord = ( newState == MQTTPublishDone ) || ( newState == MQTTPubRelSend );
 800d466:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800d46a:	2b0a      	cmp	r3, #10
 800d46c:	d003      	beq.n	800d476 <updateStateAck+0x3e>
 800d46e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800d472:	2b04      	cmp	r3, #4
 800d474:	d101      	bne.n	800d47a <updateStateAck+0x42>
 800d476:	2301      	movs	r3, #1
 800d478:	e000      	b.n	800d47c <updateStateAck+0x44>
 800d47a:	2300      	movs	r3, #0
 800d47c:	75bb      	strb	r3, [r7, #22]
 800d47e:	7dbb      	ldrb	r3, [r7, #22]
 800d480:	f003 0301 	and.w	r3, r3, #1
 800d484:	75bb      	strb	r3, [r7, #22]
    isTransitionValid = validateTransitionAck( currentState, newState );
 800d486:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800d48a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d48e:	4611      	mov	r1, r2
 800d490:	4618      	mov	r0, r3
 800d492:	f7ff fcc3 	bl	800ce1c <validateTransitionAck>
 800d496:	4603      	mov	r3, r0
 800d498:	757b      	strb	r3, [r7, #21]

    if( isTransitionValid == true )
 800d49a:	7d7b      	ldrb	r3, [r7, #21]
 800d49c:	2b00      	cmp	r3, #0
 800d49e:	d01c      	beq.n	800d4da <updateStateAck+0xa2>
    {
        status = MQTTSuccess;
 800d4a0:	2300      	movs	r3, #0
 800d4a2:	75fb      	strb	r3, [r7, #23]

        /* Update record for acks. When sending or receiving acks for packets that
         * are resent during a session reestablishment, the new state and
         * current state can be the same. No update of record required in that case. */
        if( currentState != newState )
 800d4a4:	f897 2020 	ldrb.w	r2, [r7, #32]
 800d4a8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800d4ac:	429a      	cmp	r2, r3
 800d4ae:	d014      	beq.n	800d4da <updateStateAck+0xa2>
        {
            updateRecord( records,
 800d4b0:	7dbb      	ldrb	r3, [r7, #22]
 800d4b2:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800d4b6:	6879      	ldr	r1, [r7, #4]
 800d4b8:	68f8      	ldr	r0, [r7, #12]
 800d4ba:	f7ff fe8d 	bl	800d1d8 <updateRecord>

            /* For QoS2 messages, in order to preserve the message ordering, when
             * a PUBREC is received for an outgoing publish, the record should be
             * moved to the last. This move will help preserve the order in which
             * a PUBREL needs to be resent in case of a session reestablishment. */
            if( newState == MQTTPubRelSend )
 800d4be:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800d4c2:	2b04      	cmp	r3, #4
 800d4c4:	d109      	bne.n	800d4da <updateStateAck+0xa2>
            {
                status = addRecord( records,
 800d4c6:	887a      	ldrh	r2, [r7, #2]
 800d4c8:	2304      	movs	r3, #4
 800d4ca:	9300      	str	r3, [sp, #0]
 800d4cc:	2302      	movs	r3, #2
 800d4ce:	68b9      	ldr	r1, [r7, #8]
 800d4d0:	68f8      	ldr	r0, [r7, #12]
 800d4d2:	f7ff fdfd 	bl	800d0d0 <addRecord>
 800d4d6:	4603      	mov	r3, r0
 800d4d8:	75fb      	strb	r3, [r7, #23]
        LogError( ( "Invalid transition from state %s to state %s.",
                    MQTT_State_strerror( currentState ),
                    MQTT_State_strerror( newState ) ) );
    }

    return status;
 800d4da:	7dfb      	ldrb	r3, [r7, #23]
}
 800d4dc:	4618      	mov	r0, r3
 800d4de:	3718      	adds	r7, #24
 800d4e0:	46bd      	mov	sp, r7
 800d4e2:	bd80      	pop	{r7, pc}
 800d4e4:	0801417c 	.word	0x0801417c
 800d4e8:	080146bc 	.word	0x080146bc
 800d4ec:	0801414c 	.word	0x0801414c

0800d4f0 <updateStatePublish>:
                                        uint16_t packetId,
                                        MQTTStateOperation_t opType,
                                        MQTTQoS_t qos,
                                        MQTTPublishState_t currentState,
                                        MQTTPublishState_t newState )
{
 800d4f0:	b590      	push	{r4, r7, lr}
 800d4f2:	b089      	sub	sp, #36	; 0x24
 800d4f4:	af02      	add	r7, sp, #8
 800d4f6:	60f8      	str	r0, [r7, #12]
 800d4f8:	60b9      	str	r1, [r7, #8]
 800d4fa:	4611      	mov	r1, r2
 800d4fc:	461a      	mov	r2, r3
 800d4fe:	460b      	mov	r3, r1
 800d500:	80fb      	strh	r3, [r7, #6]
 800d502:	4613      	mov	r3, r2
 800d504:	717b      	strb	r3, [r7, #5]
    MQTTStatus_t status = MQTTSuccess;
 800d506:	2300      	movs	r3, #0
 800d508:	75fb      	strb	r3, [r7, #23]
    bool isTransitionValid = false;
 800d50a:	2300      	movs	r3, #0
 800d50c:	75bb      	strb	r3, [r7, #22]

    assert( pMqttContext != NULL );
 800d50e:	68fb      	ldr	r3, [r7, #12]
 800d510:	2b00      	cmp	r3, #0
 800d512:	d106      	bne.n	800d522 <updateStatePublish+0x32>
 800d514:	4b29      	ldr	r3, [pc, #164]	; (800d5bc <updateStatePublish+0xcc>)
 800d516:	4a2a      	ldr	r2, [pc, #168]	; (800d5c0 <updateStatePublish+0xd0>)
 800d518:	f44f 7143 	mov.w	r1, #780	; 0x30c
 800d51c:	4829      	ldr	r0, [pc, #164]	; (800d5c4 <updateStatePublish+0xd4>)
 800d51e:	f003 ff3d 	bl	801139c <__assert_func>
    assert( packetId != MQTT_PACKET_ID_INVALID );
 800d522:	88fb      	ldrh	r3, [r7, #6]
 800d524:	2b00      	cmp	r3, #0
 800d526:	d106      	bne.n	800d536 <updateStatePublish+0x46>
 800d528:	4b27      	ldr	r3, [pc, #156]	; (800d5c8 <updateStatePublish+0xd8>)
 800d52a:	4a25      	ldr	r2, [pc, #148]	; (800d5c0 <updateStatePublish+0xd0>)
 800d52c:	f240 310d 	movw	r1, #781	; 0x30d
 800d530:	4824      	ldr	r0, [pc, #144]	; (800d5c4 <updateStatePublish+0xd4>)
 800d532:	f003 ff33 	bl	801139c <__assert_func>
    assert( qos != MQTTQoS0 );
 800d536:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800d53a:	2b00      	cmp	r3, #0
 800d53c:	d106      	bne.n	800d54c <updateStatePublish+0x5c>
 800d53e:	4b23      	ldr	r3, [pc, #140]	; (800d5cc <updateStatePublish+0xdc>)
 800d540:	4a1f      	ldr	r2, [pc, #124]	; (800d5c0 <updateStatePublish+0xd0>)
 800d542:	f240 310e 	movw	r1, #782	; 0x30e
 800d546:	481f      	ldr	r0, [pc, #124]	; (800d5c4 <updateStatePublish+0xd4>)
 800d548:	f003 ff28 	bl	801139c <__assert_func>

    /* This will always succeed for an incoming publish. This is due to the fact
     * that the passed in currentState must be MQTTStateNull, since
     * #MQTT_UpdateStatePublish does not perform a lookup for receives. */
    isTransitionValid = validateTransitionPublish( currentState, newState, opType, qos );
 800d54c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800d550:	797a      	ldrb	r2, [r7, #5]
 800d552:	f897 1030 	ldrb.w	r1, [r7, #48]	; 0x30
 800d556:	f897 002c 	ldrb.w	r0, [r7, #44]	; 0x2c
 800d55a:	f7ff fbf9 	bl	800cd50 <validateTransitionPublish>
 800d55e:	4603      	mov	r3, r0
 800d560:	75bb      	strb	r3, [r7, #22]

    if( isTransitionValid == true )
 800d562:	7dbb      	ldrb	r3, [r7, #22]
 800d564:	2b00      	cmp	r3, #0
 800d566:	d021      	beq.n	800d5ac <updateStatePublish+0xbc>
    {
        /* addRecord will check for collisions. */
        if( opType == MQTT_RECEIVE )
 800d568:	797b      	ldrb	r3, [r7, #5]
 800d56a:	2b01      	cmp	r3, #1
 800d56c:	d10f      	bne.n	800d58e <updateStatePublish+0x9e>
        {
            status = addRecord( pMqttContext->incomingPublishRecords,
 800d56e:	68fb      	ldr	r3, [r7, #12]
 800d570:	6858      	ldr	r0, [r3, #4]
 800d572:	68fb      	ldr	r3, [r7, #12]
 800d574:	68d9      	ldr	r1, [r3, #12]
 800d576:	f897 4028 	ldrb.w	r4, [r7, #40]	; 0x28
 800d57a:	88fa      	ldrh	r2, [r7, #6]
 800d57c:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800d580:	9300      	str	r3, [sp, #0]
 800d582:	4623      	mov	r3, r4
 800d584:	f7ff fda4 	bl	800d0d0 <addRecord>
 800d588:	4603      	mov	r3, r0
 800d58a:	75fb      	strb	r3, [r7, #23]
 800d58c:	e010      	b.n	800d5b0 <updateStatePublish+0xc0>
        /* Send operation. */
        else
        {
            /* Skip updating record when publish is resend and no state
             * update is required. */
            if( currentState != newState )
 800d58e:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800d592:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800d596:	429a      	cmp	r2, r3
 800d598:	d00a      	beq.n	800d5b0 <updateStatePublish+0xc0>
            {
                updateRecord( pMqttContext->outgoingPublishRecords,
 800d59a:	68fb      	ldr	r3, [r7, #12]
 800d59c:	6818      	ldr	r0, [r3, #0]
 800d59e:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 800d5a2:	2300      	movs	r3, #0
 800d5a4:	68b9      	ldr	r1, [r7, #8]
 800d5a6:	f7ff fe17 	bl	800d1d8 <updateRecord>
 800d5aa:	e001      	b.n	800d5b0 <updateStatePublish+0xc0>
            }
        }
    }
    else
    {
        status = MQTTIllegalState;
 800d5ac:	2308      	movs	r3, #8
 800d5ae:	75fb      	strb	r3, [r7, #23]
        LogError( ( "Invalid transition from state %s to state %s.",
                    MQTT_State_strerror( currentState ),
                    MQTT_State_strerror( newState ) ) );
    }

    return status;
 800d5b0:	7dfb      	ldrb	r3, [r7, #23]
}
 800d5b2:	4618      	mov	r0, r3
 800d5b4:	371c      	adds	r7, #28
 800d5b6:	46bd      	mov	sp, r7
 800d5b8:	bd90      	pop	{r4, r7, pc}
 800d5ba:	bf00      	nop
 800d5bc:	0801419c 	.word	0x0801419c
 800d5c0:	080146cc 	.word	0x080146cc
 800d5c4:	0801414c 	.word	0x0801414c
 800d5c8:	08014128 	.word	0x08014128
 800d5cc:	0801418c 	.word	0x0801418c

0800d5d0 <MQTT_ReserveState>:
/*-----------------------------------------------------------*/

MQTTStatus_t MQTT_ReserveState( const MQTTContext_t * pMqttContext,
                                uint16_t packetId,
                                MQTTQoS_t qos )
{
 800d5d0:	b590      	push	{r4, r7, lr}
 800d5d2:	b087      	sub	sp, #28
 800d5d4:	af02      	add	r7, sp, #8
 800d5d6:	6078      	str	r0, [r7, #4]
 800d5d8:	460b      	mov	r3, r1
 800d5da:	807b      	strh	r3, [r7, #2]
 800d5dc:	4613      	mov	r3, r2
 800d5de:	707b      	strb	r3, [r7, #1]
    MQTTStatus_t status = MQTTSuccess;
 800d5e0:	2300      	movs	r3, #0
 800d5e2:	73fb      	strb	r3, [r7, #15]

    if( qos == MQTTQoS0 )
 800d5e4:	787b      	ldrb	r3, [r7, #1]
 800d5e6:	2b00      	cmp	r3, #0
 800d5e8:	d102      	bne.n	800d5f0 <MQTT_ReserveState+0x20>
    {
        status = MQTTSuccess;
 800d5ea:	2300      	movs	r3, #0
 800d5ec:	73fb      	strb	r3, [r7, #15]
 800d5ee:	e014      	b.n	800d61a <MQTT_ReserveState+0x4a>
    }
    else if( ( packetId == MQTT_PACKET_ID_INVALID ) || ( pMqttContext == NULL ) )
 800d5f0:	887b      	ldrh	r3, [r7, #2]
 800d5f2:	2b00      	cmp	r3, #0
 800d5f4:	d002      	beq.n	800d5fc <MQTT_ReserveState+0x2c>
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	2b00      	cmp	r3, #0
 800d5fa:	d102      	bne.n	800d602 <MQTT_ReserveState+0x32>
    {
        status = MQTTBadParameter;
 800d5fc:	2301      	movs	r3, #1
 800d5fe:	73fb      	strb	r3, [r7, #15]
 800d600:	e00b      	b.n	800d61a <MQTT_ReserveState+0x4a>
    }
    else
    {
        /* Collisions are detected when adding the record. */
        status = addRecord( pMqttContext->outgoingPublishRecords,
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	6818      	ldr	r0, [r3, #0]
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	6899      	ldr	r1, [r3, #8]
 800d60a:	787b      	ldrb	r3, [r7, #1]
 800d60c:	887a      	ldrh	r2, [r7, #2]
 800d60e:	2401      	movs	r4, #1
 800d610:	9400      	str	r4, [sp, #0]
 800d612:	f7ff fd5d 	bl	800d0d0 <addRecord>
 800d616:	4603      	mov	r3, r0
 800d618:	73fb      	strb	r3, [r7, #15]
                            packetId,
                            qos,
                            MQTTPublishSend );
    }

    return status;
 800d61a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d61c:	4618      	mov	r0, r3
 800d61e:	3714      	adds	r7, #20
 800d620:	46bd      	mov	sp, r7
 800d622:	bd90      	pop	{r4, r7, pc}

0800d624 <MQTT_CalculateStatePublish>:

/*-----------------------------------------------------------*/

MQTTPublishState_t MQTT_CalculateStatePublish( MQTTStateOperation_t opType,
                                               MQTTQoS_t qos )
{
 800d624:	b480      	push	{r7}
 800d626:	b085      	sub	sp, #20
 800d628:	af00      	add	r7, sp, #0
 800d62a:	4603      	mov	r3, r0
 800d62c:	460a      	mov	r2, r1
 800d62e:	71fb      	strb	r3, [r7, #7]
 800d630:	4613      	mov	r3, r2
 800d632:	71bb      	strb	r3, [r7, #6]
    MQTTPublishState_t calculatedState = MQTTStateNull;
 800d634:	2300      	movs	r3, #0
 800d636:	73fb      	strb	r3, [r7, #15]

    switch( qos )
 800d638:	79bb      	ldrb	r3, [r7, #6]
 800d63a:	2b02      	cmp	r3, #2
 800d63c:	d011      	beq.n	800d662 <MQTT_CalculateStatePublish+0x3e>
 800d63e:	2b02      	cmp	r3, #2
 800d640:	dc17      	bgt.n	800d672 <MQTT_CalculateStatePublish+0x4e>
 800d642:	2b00      	cmp	r3, #0
 800d644:	d002      	beq.n	800d64c <MQTT_CalculateStatePublish+0x28>
 800d646:	2b01      	cmp	r3, #1
 800d648:	d003      	beq.n	800d652 <MQTT_CalculateStatePublish+0x2e>
            calculatedState = ( opType == MQTT_SEND ) ? MQTTPubRecPending : MQTTPubRecSend;
            break;

        default:
            /* No other QoS values. */
            break;
 800d64a:	e012      	b.n	800d672 <MQTT_CalculateStatePublish+0x4e>
            calculatedState = MQTTPublishDone;
 800d64c:	230a      	movs	r3, #10
 800d64e:	73fb      	strb	r3, [r7, #15]
            break;
 800d650:	e010      	b.n	800d674 <MQTT_CalculateStatePublish+0x50>
            calculatedState = ( opType == MQTT_SEND ) ? MQTTPubAckPending : MQTTPubAckSend;
 800d652:	79fb      	ldrb	r3, [r7, #7]
 800d654:	2b00      	cmp	r3, #0
 800d656:	d101      	bne.n	800d65c <MQTT_CalculateStatePublish+0x38>
 800d658:	2306      	movs	r3, #6
 800d65a:	e000      	b.n	800d65e <MQTT_CalculateStatePublish+0x3a>
 800d65c:	2302      	movs	r3, #2
 800d65e:	73fb      	strb	r3, [r7, #15]
            break;
 800d660:	e008      	b.n	800d674 <MQTT_CalculateStatePublish+0x50>
            calculatedState = ( opType == MQTT_SEND ) ? MQTTPubRecPending : MQTTPubRecSend;
 800d662:	79fb      	ldrb	r3, [r7, #7]
 800d664:	2b00      	cmp	r3, #0
 800d666:	d101      	bne.n	800d66c <MQTT_CalculateStatePublish+0x48>
 800d668:	2307      	movs	r3, #7
 800d66a:	e000      	b.n	800d66e <MQTT_CalculateStatePublish+0x4a>
 800d66c:	2303      	movs	r3, #3
 800d66e:	73fb      	strb	r3, [r7, #15]
            break;
 800d670:	e000      	b.n	800d674 <MQTT_CalculateStatePublish+0x50>
            break;
 800d672:	bf00      	nop
    }

    return calculatedState;
 800d674:	7bfb      	ldrb	r3, [r7, #15]
}
 800d676:	4618      	mov	r0, r3
 800d678:	3714      	adds	r7, #20
 800d67a:	46bd      	mov	sp, r7
 800d67c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d680:	4770      	bx	lr

0800d682 <MQTT_UpdateStatePublish>:
MQTTStatus_t MQTT_UpdateStatePublish( const MQTTContext_t * pMqttContext,
                                      uint16_t packetId,
                                      MQTTStateOperation_t opType,
                                      MQTTQoS_t qos,
                                      MQTTPublishState_t * pNewState )
{
 800d682:	b590      	push	{r4, r7, lr}
 800d684:	b08b      	sub	sp, #44	; 0x2c
 800d686:	af04      	add	r7, sp, #16
 800d688:	6078      	str	r0, [r7, #4]
 800d68a:	4608      	mov	r0, r1
 800d68c:	4611      	mov	r1, r2
 800d68e:	461a      	mov	r2, r3
 800d690:	4603      	mov	r3, r0
 800d692:	807b      	strh	r3, [r7, #2]
 800d694:	460b      	mov	r3, r1
 800d696:	707b      	strb	r3, [r7, #1]
 800d698:	4613      	mov	r3, r2
 800d69a:	703b      	strb	r3, [r7, #0]
    MQTTPublishState_t newState = MQTTStateNull;
 800d69c:	2300      	movs	r3, #0
 800d69e:	73fb      	strb	r3, [r7, #15]
    MQTTPublishState_t currentState = MQTTStateNull;
 800d6a0:	2300      	movs	r3, #0
 800d6a2:	73bb      	strb	r3, [r7, #14]
    MQTTStatus_t mqttStatus = MQTTSuccess;
 800d6a4:	2300      	movs	r3, #0
 800d6a6:	75fb      	strb	r3, [r7, #23]
    size_t recordIndex = MQTT_INVALID_STATE_COUNT;
 800d6a8:	2300      	movs	r3, #0
 800d6aa:	43db      	mvns	r3, r3
 800d6ac:	613b      	str	r3, [r7, #16]
    MQTTQoS_t foundQoS = MQTTQoS0;
 800d6ae:	2300      	movs	r3, #0
 800d6b0:	737b      	strb	r3, [r7, #13]

    if( ( pMqttContext == NULL ) || ( pNewState == NULL ) )
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	2b00      	cmp	r3, #0
 800d6b6:	d002      	beq.n	800d6be <MQTT_UpdateStatePublish+0x3c>
 800d6b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6ba:	2b00      	cmp	r3, #0
 800d6bc:	d102      	bne.n	800d6c4 <MQTT_UpdateStatePublish+0x42>
    {
        LogError( ( "Argument cannot be NULL: pMqttContext=%p, pNewState=%p",
                    ( void * ) pMqttContext,
                    ( void * ) pNewState ) );

        mqttStatus = MQTTBadParameter;
 800d6be:	2301      	movs	r3, #1
 800d6c0:	75fb      	strb	r3, [r7, #23]
 800d6c2:	e028      	b.n	800d716 <MQTT_UpdateStatePublish+0x94>
    }
    else if( qos == MQTTQoS0 )
 800d6c4:	783b      	ldrb	r3, [r7, #0]
 800d6c6:	2b00      	cmp	r3, #0
 800d6c8:	d103      	bne.n	800d6d2 <MQTT_UpdateStatePublish+0x50>
    {
        /* QoS 0 publish. Do nothing. */
        *pNewState = MQTTPublishDone;
 800d6ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6cc:	220a      	movs	r2, #10
 800d6ce:	701a      	strb	r2, [r3, #0]
 800d6d0:	e021      	b.n	800d716 <MQTT_UpdateStatePublish+0x94>
    }
    else if( packetId == MQTT_PACKET_ID_INVALID )
 800d6d2:	887b      	ldrh	r3, [r7, #2]
 800d6d4:	2b00      	cmp	r3, #0
 800d6d6:	d102      	bne.n	800d6de <MQTT_UpdateStatePublish+0x5c>
    {
        /* Publishes > QoS 0 need a valid packet ID. */
        mqttStatus = MQTTBadParameter;
 800d6d8:	2301      	movs	r3, #1
 800d6da:	75fb      	strb	r3, [r7, #23]
 800d6dc:	e01b      	b.n	800d716 <MQTT_UpdateStatePublish+0x94>
    }
    else if( opType == MQTT_SEND )
 800d6de:	787b      	ldrb	r3, [r7, #1]
 800d6e0:	2b00      	cmp	r3, #0
 800d6e2:	d118      	bne.n	800d716 <MQTT_UpdateStatePublish+0x94>
    {
        /* Search record for entry so we can check QoS. */
        recordIndex = findInRecord( pMqttContext->outgoingPublishRecords,
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	6818      	ldr	r0, [r3, #0]
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	6899      	ldr	r1, [r3, #8]
 800d6ec:	f107 040d 	add.w	r4, r7, #13
 800d6f0:	887a      	ldrh	r2, [r7, #2]
 800d6f2:	f107 030e 	add.w	r3, r7, #14
 800d6f6:	9300      	str	r3, [sp, #0]
 800d6f8:	4623      	mov	r3, r4
 800d6fa:	f7ff fc31 	bl	800cf60 <findInRecord>
 800d6fe:	6138      	str	r0, [r7, #16]
                                    pMqttContext->outgoingPublishRecordMaxCount,
                                    packetId,
                                    &foundQoS,
                                    &currentState );

        if( ( recordIndex == MQTT_INVALID_STATE_COUNT ) || ( foundQoS != qos ) )
 800d700:	2300      	movs	r3, #0
 800d702:	43db      	mvns	r3, r3
 800d704:	693a      	ldr	r2, [r7, #16]
 800d706:	429a      	cmp	r2, r3
 800d708:	d003      	beq.n	800d712 <MQTT_UpdateStatePublish+0x90>
 800d70a:	7b7b      	ldrb	r3, [r7, #13]
 800d70c:	783a      	ldrb	r2, [r7, #0]
 800d70e:	429a      	cmp	r2, r3
 800d710:	d001      	beq.n	800d716 <MQTT_UpdateStatePublish+0x94>
        {
            /* Entry should match with supplied QoS. */
            mqttStatus = MQTTBadParameter;
 800d712:	2301      	movs	r3, #1
 800d714:	75fb      	strb	r3, [r7, #23]
    else
    {
        /* QoS 1 or 2 receive. Nothing to be done. */
    }

    if( ( qos != MQTTQoS0 ) && ( mqttStatus == MQTTSuccess ) )
 800d716:	783b      	ldrb	r3, [r7, #0]
 800d718:	2b00      	cmp	r3, #0
 800d71a:	d020      	beq.n	800d75e <MQTT_UpdateStatePublish+0xdc>
 800d71c:	7dfb      	ldrb	r3, [r7, #23]
 800d71e:	2b00      	cmp	r3, #0
 800d720:	d11d      	bne.n	800d75e <MQTT_UpdateStatePublish+0xdc>
    {
        newState = MQTT_CalculateStatePublish( opType, qos );
 800d722:	783a      	ldrb	r2, [r7, #0]
 800d724:	787b      	ldrb	r3, [r7, #1]
 800d726:	4611      	mov	r1, r2
 800d728:	4618      	mov	r0, r3
 800d72a:	f7ff ff7b 	bl	800d624 <MQTT_CalculateStatePublish>
 800d72e:	4603      	mov	r3, r0
 800d730:	73fb      	strb	r3, [r7, #15]
        /* Validate state transition and update state records. */
        mqttStatus = updateStatePublish( pMqttContext,
 800d732:	7bbb      	ldrb	r3, [r7, #14]
 800d734:	7878      	ldrb	r0, [r7, #1]
 800d736:	8879      	ldrh	r1, [r7, #2]
 800d738:	7bfa      	ldrb	r2, [r7, #15]
 800d73a:	9202      	str	r2, [sp, #8]
 800d73c:	9301      	str	r3, [sp, #4]
 800d73e:	783b      	ldrb	r3, [r7, #0]
 800d740:	9300      	str	r3, [sp, #0]
 800d742:	4603      	mov	r3, r0
 800d744:	460a      	mov	r2, r1
 800d746:	6939      	ldr	r1, [r7, #16]
 800d748:	6878      	ldr	r0, [r7, #4]
 800d74a:	f7ff fed1 	bl	800d4f0 <updateStatePublish>
 800d74e:	4603      	mov	r3, r0
 800d750:	75fb      	strb	r3, [r7, #23]
                                         qos,
                                         currentState,
                                         newState );

        /* Update output parameter on success. */
        if( mqttStatus == MQTTSuccess )
 800d752:	7dfb      	ldrb	r3, [r7, #23]
 800d754:	2b00      	cmp	r3, #0
 800d756:	d102      	bne.n	800d75e <MQTT_UpdateStatePublish+0xdc>
        {
            *pNewState = newState;
 800d758:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d75a:	7bfa      	ldrb	r2, [r7, #15]
 800d75c:	701a      	strb	r2, [r3, #0]
        }
    }

    return mqttStatus;
 800d75e:	7dfb      	ldrb	r3, [r7, #23]
}
 800d760:	4618      	mov	r0, r3
 800d762:	371c      	adds	r7, #28
 800d764:	46bd      	mov	sp, r7
 800d766:	bd90      	pop	{r4, r7, pc}

0800d768 <MQTT_UpdateStateAck>:
MQTTStatus_t MQTT_UpdateStateAck( const MQTTContext_t * pMqttContext,
                                  uint16_t packetId,
                                  MQTTPubAckType_t packetType,
                                  MQTTStateOperation_t opType,
                                  MQTTPublishState_t * pNewState )
{
 800d768:	b580      	push	{r7, lr}
 800d76a:	b08a      	sub	sp, #40	; 0x28
 800d76c:	af02      	add	r7, sp, #8
 800d76e:	6078      	str	r0, [r7, #4]
 800d770:	4608      	mov	r0, r1
 800d772:	4611      	mov	r1, r2
 800d774:	461a      	mov	r2, r3
 800d776:	4603      	mov	r3, r0
 800d778:	807b      	strh	r3, [r7, #2]
 800d77a:	460b      	mov	r3, r1
 800d77c:	707b      	strb	r3, [r7, #1]
 800d77e:	4613      	mov	r3, r2
 800d780:	703b      	strb	r3, [r7, #0]
    MQTTPublishState_t newState = MQTTStateNull;
 800d782:	2300      	movs	r3, #0
 800d784:	74bb      	strb	r3, [r7, #18]
    MQTTPublishState_t currentState = MQTTStateNull;
 800d786:	2300      	movs	r3, #0
 800d788:	743b      	strb	r3, [r7, #16]
    bool isOutgoingPublish = isPublishOutgoing( packetType, opType );
 800d78a:	783a      	ldrb	r2, [r7, #0]
 800d78c:	787b      	ldrb	r3, [r7, #1]
 800d78e:	4611      	mov	r1, r2
 800d790:	4618      	mov	r0, r3
 800d792:	f7ff fbb7 	bl	800cf04 <isPublishOutgoing>
 800d796:	4603      	mov	r3, r0
 800d798:	747b      	strb	r3, [r7, #17]
    MQTTQoS_t qos = MQTTQoS0;
 800d79a:	2300      	movs	r3, #0
 800d79c:	73fb      	strb	r3, [r7, #15]
    size_t maxRecordCount = MQTT_INVALID_STATE_COUNT;
 800d79e:	2300      	movs	r3, #0
 800d7a0:	43db      	mvns	r3, r3
 800d7a2:	61fb      	str	r3, [r7, #28]
    size_t recordIndex = MQTT_INVALID_STATE_COUNT;
 800d7a4:	2300      	movs	r3, #0
 800d7a6:	43db      	mvns	r3, r3
 800d7a8:	61bb      	str	r3, [r7, #24]

    MQTTPubAckInfo_t * records = NULL;
 800d7aa:	2300      	movs	r3, #0
 800d7ac:	617b      	str	r3, [r7, #20]
    MQTTStatus_t status = MQTTBadResponse;
 800d7ae:	2305      	movs	r3, #5
 800d7b0:	74fb      	strb	r3, [r7, #19]

    if( ( pMqttContext == NULL ) || ( pNewState == NULL ) )
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	2b00      	cmp	r3, #0
 800d7b6:	d002      	beq.n	800d7be <MQTT_UpdateStateAck+0x56>
 800d7b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7ba:	2b00      	cmp	r3, #0
 800d7bc:	d102      	bne.n	800d7c4 <MQTT_UpdateStateAck+0x5c>
    {
        LogError( ( "Argument cannot be NULL: pMqttContext=%p, pNewState=%p.",
                    ( void * ) pMqttContext,
                    ( void * ) pNewState ) );
        status = MQTTBadParameter;
 800d7be:	2301      	movs	r3, #1
 800d7c0:	74fb      	strb	r3, [r7, #19]
 800d7c2:	e027      	b.n	800d814 <MQTT_UpdateStateAck+0xac>
    }
    else if( packetId == MQTT_PACKET_ID_INVALID )
 800d7c4:	887b      	ldrh	r3, [r7, #2]
 800d7c6:	2b00      	cmp	r3, #0
 800d7c8:	d102      	bne.n	800d7d0 <MQTT_UpdateStateAck+0x68>
    {
        LogError( ( "Packet ID must be nonzero." ) );
        status = MQTTBadParameter;
 800d7ca:	2301      	movs	r3, #1
 800d7cc:	74fb      	strb	r3, [r7, #19]
 800d7ce:	e021      	b.n	800d814 <MQTT_UpdateStateAck+0xac>
    }
    else if( packetType > MQTTPubcomp )
 800d7d0:	787b      	ldrb	r3, [r7, #1]
 800d7d2:	2b03      	cmp	r3, #3
 800d7d4:	d902      	bls.n	800d7dc <MQTT_UpdateStateAck+0x74>
    {
        LogError( ( "Invalid packet type %u.", ( unsigned int ) packetType ) );
        status = MQTTBadParameter;
 800d7d6:	2301      	movs	r3, #1
 800d7d8:	74fb      	strb	r3, [r7, #19]
 800d7da:	e01b      	b.n	800d814 <MQTT_UpdateStateAck+0xac>
    }
    else
    {
        if( isOutgoingPublish == true )
 800d7dc:	7c7b      	ldrb	r3, [r7, #17]
 800d7de:	2b00      	cmp	r3, #0
 800d7e0:	d006      	beq.n	800d7f0 <MQTT_UpdateStateAck+0x88>
        {
            records = pMqttContext->outgoingPublishRecords;
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	681b      	ldr	r3, [r3, #0]
 800d7e6:	617b      	str	r3, [r7, #20]
            maxRecordCount = pMqttContext->outgoingPublishRecordMaxCount;
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	689b      	ldr	r3, [r3, #8]
 800d7ec:	61fb      	str	r3, [r7, #28]
 800d7ee:	e005      	b.n	800d7fc <MQTT_UpdateStateAck+0x94>
        }
        else
        {
            records = pMqttContext->incomingPublishRecords;
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	685b      	ldr	r3, [r3, #4]
 800d7f4:	617b      	str	r3, [r7, #20]
            maxRecordCount = pMqttContext->incomingPublishRecordMaxCount;
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	68db      	ldr	r3, [r3, #12]
 800d7fa:	61fb      	str	r3, [r7, #28]
        }

        recordIndex = findInRecord( records,
 800d7fc:	f107 010f 	add.w	r1, r7, #15
 800d800:	887a      	ldrh	r2, [r7, #2]
 800d802:	f107 0310 	add.w	r3, r7, #16
 800d806:	9300      	str	r3, [sp, #0]
 800d808:	460b      	mov	r3, r1
 800d80a:	69f9      	ldr	r1, [r7, #28]
 800d80c:	6978      	ldr	r0, [r7, #20]
 800d80e:	f7ff fba7 	bl	800cf60 <findInRecord>
 800d812:	61b8      	str	r0, [r7, #24]
                                    packetId,
                                    &qos,
                                    &currentState );
    }

    if( recordIndex != MQTT_INVALID_STATE_COUNT )
 800d814:	2300      	movs	r3, #0
 800d816:	43db      	mvns	r3, r3
 800d818:	69ba      	ldr	r2, [r7, #24]
 800d81a:	429a      	cmp	r2, r3
 800d81c:	d01a      	beq.n	800d854 <MQTT_UpdateStateAck+0xec>
    {
        newState = MQTT_CalculateStateAck( packetType, opType, qos );
 800d81e:	7bfa      	ldrb	r2, [r7, #15]
 800d820:	7839      	ldrb	r1, [r7, #0]
 800d822:	787b      	ldrb	r3, [r7, #1]
 800d824:	4618      	mov	r0, r3
 800d826:	f7ff fdbb 	bl	800d3a0 <MQTT_CalculateStateAck>
 800d82a:	4603      	mov	r3, r0
 800d82c:	74bb      	strb	r3, [r7, #18]

        /* Validate state transition and update state record. */
        status = updateStateAck( records,
 800d82e:	7c3b      	ldrb	r3, [r7, #16]
 800d830:	8879      	ldrh	r1, [r7, #2]
 800d832:	7cba      	ldrb	r2, [r7, #18]
 800d834:	9201      	str	r2, [sp, #4]
 800d836:	9300      	str	r3, [sp, #0]
 800d838:	460b      	mov	r3, r1
 800d83a:	69ba      	ldr	r2, [r7, #24]
 800d83c:	69f9      	ldr	r1, [r7, #28]
 800d83e:	6978      	ldr	r0, [r7, #20]
 800d840:	f7ff fdfa 	bl	800d438 <updateStateAck>
 800d844:	4603      	mov	r3, r0
 800d846:	74fb      	strb	r3, [r7, #19]
                                 packetId,
                                 currentState,
                                 newState );

        /* Update the output parameter. */
        if( status == MQTTSuccess )
 800d848:	7cfb      	ldrb	r3, [r7, #19]
 800d84a:	2b00      	cmp	r3, #0
 800d84c:	d102      	bne.n	800d854 <MQTT_UpdateStateAck+0xec>
        {
            *pNewState = newState;
 800d84e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d850:	7cba      	ldrb	r2, [r7, #18]
 800d852:	701a      	strb	r2, [r3, #0]
    {
        LogError( ( "No matching record found for publish: PacketId=%u.",
                    ( unsigned int ) packetId ) );
    }

    return status;
 800d854:	7cfb      	ldrb	r3, [r7, #19]
}
 800d856:	4618      	mov	r0, r3
 800d858:	3720      	adds	r7, #32
 800d85a:	46bd      	mov	sp, r7
 800d85c:	bd80      	pop	{r7, pc}

0800d85e <MQTT_PubrelToResend>:
/*-----------------------------------------------------------*/

uint16_t MQTT_PubrelToResend( const MQTTContext_t * pMqttContext,
                              MQTTStateCursor_t * pCursor,
                              MQTTPublishState_t * pState )
{
 800d85e:	b580      	push	{r7, lr}
 800d860:	b086      	sub	sp, #24
 800d862:	af00      	add	r7, sp, #0
 800d864:	60f8      	str	r0, [r7, #12]
 800d866:	60b9      	str	r1, [r7, #8]
 800d868:	607a      	str	r2, [r7, #4]
    uint16_t packetId = MQTT_PACKET_ID_INVALID;
 800d86a:	2300      	movs	r3, #0
 800d86c:	82fb      	strh	r3, [r7, #22]
    uint16_t searchStates = 0U;
 800d86e:	2300      	movs	r3, #0
 800d870:	82bb      	strh	r3, [r7, #20]

    /* Validate arguments. */
    if( ( pMqttContext == NULL ) || ( pCursor == NULL ) || ( pState == NULL ) )
 800d872:	68fb      	ldr	r3, [r7, #12]
 800d874:	2b00      	cmp	r3, #0
 800d876:	d01b      	beq.n	800d8b0 <MQTT_PubrelToResend+0x52>
 800d878:	68bb      	ldr	r3, [r7, #8]
 800d87a:	2b00      	cmp	r3, #0
 800d87c:	d018      	beq.n	800d8b0 <MQTT_PubrelToResend+0x52>
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	2b00      	cmp	r3, #0
 800d882:	d015      	beq.n	800d8b0 <MQTT_PubrelToResend+0x52>
    }
    else
    {
        /* PUBREL for packets in state #MQTTPubCompPending and #MQTTPubRelSend
         * would need to be resent when a session is reestablished.*/
        UINT16_SET_BIT( searchStates, MQTTPubCompPending );
 800d884:	8abb      	ldrh	r3, [r7, #20]
 800d886:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800d88a:	82bb      	strh	r3, [r7, #20]
        UINT16_SET_BIT( searchStates, MQTTPubRelSend );
 800d88c:	8abb      	ldrh	r3, [r7, #20]
 800d88e:	f043 0310 	orr.w	r3, r3, #16
 800d892:	82bb      	strh	r3, [r7, #20]
        packetId = stateSelect( pMqttContext, searchStates, pCursor );
 800d894:	8abb      	ldrh	r3, [r7, #20]
 800d896:	68ba      	ldr	r2, [r7, #8]
 800d898:	4619      	mov	r1, r3
 800d89a:	68f8      	ldr	r0, [r7, #12]
 800d89c:	f7ff fcd8 	bl	800d250 <stateSelect>
 800d8a0:	4603      	mov	r3, r0
 800d8a2:	82fb      	strh	r3, [r7, #22]

        /* The state needs to be in #MQTTPubRelSend for sending PUBREL. */
        if( packetId != MQTT_PACKET_ID_INVALID )
 800d8a4:	8afb      	ldrh	r3, [r7, #22]
 800d8a6:	2b00      	cmp	r3, #0
 800d8a8:	d002      	beq.n	800d8b0 <MQTT_PubrelToResend+0x52>
        {
            *pState = MQTTPubRelSend;
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	2204      	movs	r2, #4
 800d8ae:	701a      	strb	r2, [r3, #0]
        }
    }

    return packetId;
 800d8b0:	8afb      	ldrh	r3, [r7, #22]
}
 800d8b2:	4618      	mov	r0, r3
 800d8b4:	3718      	adds	r7, #24
 800d8b6:	46bd      	mov	sp, r7
 800d8b8:	bd80      	pop	{r7, pc}
	...

0800d8bc <transport_recv>:
#define min(a,b) ((a) < (b) ? (a) : (b))

int32_t transport_recv( NetworkContext_t * pNetworkContext,
                        void * pBuffer,
                        size_t bytesToRecv )
{
 800d8bc:	b580      	push	{r7, lr}
 800d8be:	f5ad 6d87 	sub.w	sp, sp, #1080	; 0x438
 800d8c2:	af02      	add	r7, sp, #8
 800d8c4:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800d8c8:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 800d8cc:	6018      	str	r0, [r3, #0]
 800d8ce:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800d8d2:	f5a3 6385 	sub.w	r3, r3, #1064	; 0x428
 800d8d6:	6019      	str	r1, [r3, #0]
 800d8d8:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800d8dc:	f2a3 432c 	subw	r3, r3, #1068	; 0x42c
 800d8e0:	601a      	str	r2, [r3, #0]
    int32_t socketStatus = 1;
 800d8e2:	2301      	movs	r3, #1
 800d8e4:	f8c7 342c 	str.w	r3, [r7, #1068]	; 0x42c
    uint16_t recvlen;
	uint8_t recvdata[1024];

    ES_WIFI_Conn_t conn;

	conn.Number = pNetworkContext->socket;
 800d8e8:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800d8ec:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 800d8f0:	681b      	ldr	r3, [r3, #0]
 800d8f2:	781a      	ldrb	r2, [r3, #0]
 800d8f4:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800d8f8:	f2a3 431c 	subw	r3, r3, #1052	; 0x41c
 800d8fc:	705a      	strb	r2, [r3, #1]
	conn.RemotePort = pNetworkContext->remote_port;
 800d8fe:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800d902:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 800d906:	681b      	ldr	r3, [r3, #0]
 800d908:	88da      	ldrh	r2, [r3, #6]
 800d90a:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800d90e:	f2a3 431c 	subw	r3, r3, #1052	; 0x41c
 800d912:	805a      	strh	r2, [r3, #2]
	conn.LocalPort = 0;
 800d914:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800d918:	f2a3 431c 	subw	r3, r3, #1052	; 0x41c
 800d91c:	2200      	movs	r2, #0
 800d91e:	809a      	strh	r2, [r3, #4]
	conn.Type = ES_WIFI_TCP_CONNECTION;
 800d920:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800d924:	f2a3 431c 	subw	r3, r3, #1052	; 0x41c
 800d928:	2200      	movs	r2, #0
 800d92a:	701a      	strb	r2, [r3, #0]
	conn.RemoteIP[0] = pNetworkContext->ipaddr[0];
 800d92c:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800d930:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 800d934:	681b      	ldr	r3, [r3, #0]
 800d936:	789a      	ldrb	r2, [r3, #2]
 800d938:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800d93c:	f2a3 431c 	subw	r3, r3, #1052	; 0x41c
 800d940:	719a      	strb	r2, [r3, #6]
	conn.RemoteIP[1] = pNetworkContext->ipaddr[1];
 800d942:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800d946:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 800d94a:	681b      	ldr	r3, [r3, #0]
 800d94c:	78da      	ldrb	r2, [r3, #3]
 800d94e:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800d952:	f2a3 431c 	subw	r3, r3, #1052	; 0x41c
 800d956:	71da      	strb	r2, [r3, #7]
	conn.RemoteIP[2] = pNetworkContext->ipaddr[2];
 800d958:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800d95c:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 800d960:	681b      	ldr	r3, [r3, #0]
 800d962:	791a      	ldrb	r2, [r3, #4]
 800d964:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800d968:	f2a3 431c 	subw	r3, r3, #1052	; 0x41c
 800d96c:	721a      	strb	r2, [r3, #8]
	conn.RemoteIP[3] = pNetworkContext->ipaddr[3];
 800d96e:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800d972:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 800d976:	681b      	ldr	r3, [r3, #0]
 800d978:	795a      	ldrb	r2, [r3, #5]
 800d97a:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800d97e:	f2a3 431c 	subw	r3, r3, #1052	; 0x41c
 800d982:	725a      	strb	r2, [r3, #9]

    if(!pNetworkContext->socket_open) {
 800d984:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800d988:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 800d98c:	681b      	ldr	r3, [r3, #0]
 800d98e:	785b      	ldrb	r3, [r3, #1]
 800d990:	2b00      	cmp	r3, #0
 800d992:	d115      	bne.n	800d9c0 <transport_recv+0x104>
    	ret=ES_WIFI_StartClientConnection(&EsWifiObj, &conn);
 800d994:	f107 0314 	add.w	r3, r7, #20
 800d998:	4619      	mov	r1, r3
 800d99a:	482a      	ldr	r0, [pc, #168]	; (800da44 <transport_recv+0x188>)
 800d99c:	f7fc fd00 	bl	800a3a0 <ES_WIFI_StartClientConnection>
 800d9a0:	4603      	mov	r3, r0
 800d9a2:	f887 342b 	strb.w	r3, [r7, #1067]	; 0x42b

		if(ret!=ES_WIFI_STATUS_OK) {
 800d9a6:	f897 342b 	ldrb.w	r3, [r7, #1067]	; 0x42b
 800d9aa:	2b00      	cmp	r3, #0
 800d9ac:	d001      	beq.n	800d9b2 <transport_recv+0xf6>
			return 0;
 800d9ae:	2300      	movs	r3, #0
 800d9b0:	e042      	b.n	800da38 <transport_recv+0x17c>
		} else {
			pNetworkContext->socket_open=1;
 800d9b2:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800d9b6:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 800d9ba:	681b      	ldr	r3, [r3, #0]
 800d9bc:	2201      	movs	r2, #1
 800d9be:	705a      	strb	r2, [r3, #1]
		}
    }

	ret=ES_WIFI_ReceiveData(&EsWifiObj,pNetworkContext->socket, pBuffer, bytesToRecv, &recvlen, 1000);
 800d9c0:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800d9c4:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 800d9c8:	681b      	ldr	r3, [r3, #0]
 800d9ca:	7819      	ldrb	r1, [r3, #0]
 800d9cc:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800d9d0:	f2a3 432c 	subw	r3, r3, #1068	; 0x42c
 800d9d4:	681b      	ldr	r3, [r3, #0]
 800d9d6:	b298      	uxth	r0, r3
 800d9d8:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800d9dc:	f5a3 6285 	sub.w	r2, r3, #1064	; 0x428
 800d9e0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800d9e4:	9301      	str	r3, [sp, #4]
 800d9e6:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800d9ea:	9300      	str	r3, [sp, #0]
 800d9ec:	4603      	mov	r3, r0
 800d9ee:	6812      	ldr	r2, [r2, #0]
 800d9f0:	4814      	ldr	r0, [pc, #80]	; (800da44 <transport_recv+0x188>)
 800d9f2:	f7fc fe7b 	bl	800a6ec <ES_WIFI_ReceiveData>
 800d9f6:	4603      	mov	r3, r0
 800d9f8:	f887 342b 	strb.w	r3, [r7, #1067]	; 0x42b
	if(ret!=WIFI_STATUS_OK) {
 800d9fc:	f897 342b 	ldrb.w	r3, [r7, #1067]	; 0x42b
 800da00:	2b00      	cmp	r3, #0
 800da02:	d00a      	beq.n	800da1a <transport_recv+0x15e>
		socketStatus=0;
 800da04:	2300      	movs	r3, #0
 800da06:	f8c7 342c 	str.w	r3, [r7, #1068]	; 0x42c
		pNetworkContext->socket_open=0;
 800da0a:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800da0e:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 800da12:	681b      	ldr	r3, [r3, #0]
 800da14:	2200      	movs	r2, #0
 800da16:	705a      	strb	r2, [r3, #1]
 800da18:	e00c      	b.n	800da34 <transport_recv+0x178>
	} else {
		//log_transport('R',pBuffer,recvlen);
		recvdata[recvlen]=0;
 800da1a:	f8b7 3428 	ldrh.w	r3, [r7, #1064]	; 0x428
 800da1e:	461a      	mov	r2, r3
 800da20:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800da24:	f5a3 6381 	sub.w	r3, r3, #1032	; 0x408
 800da28:	2100      	movs	r1, #0
 800da2a:	5499      	strb	r1, [r3, r2]
		socketStatus=recvlen;
 800da2c:	f8b7 3428 	ldrh.w	r3, [r7, #1064]	; 0x428
 800da30:	f8c7 342c 	str.w	r3, [r7, #1068]	; 0x42c
	}

    return socketStatus;
 800da34:	f8d7 342c 	ldr.w	r3, [r7, #1068]	; 0x42c
}
 800da38:	4618      	mov	r0, r3
 800da3a:	f507 6786 	add.w	r7, r7, #1072	; 0x430
 800da3e:	46bd      	mov	sp, r7
 800da40:	bd80      	pop	{r7, pc}
 800da42:	bf00      	nop
 800da44:	20000cf8 	.word	0x20000cf8

0800da48 <transport_send>:

int32_t transport_send( NetworkContext_t * pNetworkContext,
                        const void * pBuffer,
                        size_t bytesToSend )
{
 800da48:	b580      	push	{r7, lr}
 800da4a:	b08e      	sub	sp, #56	; 0x38
 800da4c:	af02      	add	r7, sp, #8
 800da4e:	60f8      	str	r0, [r7, #12]
 800da50:	60b9      	str	r1, [r7, #8]
 800da52:	607a      	str	r2, [r7, #4]
    int32_t socketStatus=0;
 800da54:	2300      	movs	r3, #0
 800da56:	62fb      	str	r3, [r7, #44]	; 0x2c
    int16_t datasent;
    uint8_t ret;

    ES_WIFI_Conn_t conn;

	conn.Number = pNetworkContext->socket;
 800da58:	68fb      	ldr	r3, [r7, #12]
 800da5a:	781b      	ldrb	r3, [r3, #0]
 800da5c:	757b      	strb	r3, [r7, #21]
	conn.RemotePort = pNetworkContext->remote_port;
 800da5e:	68fb      	ldr	r3, [r7, #12]
 800da60:	88db      	ldrh	r3, [r3, #6]
 800da62:	82fb      	strh	r3, [r7, #22]
	conn.LocalPort = 0;
 800da64:	2300      	movs	r3, #0
 800da66:	833b      	strh	r3, [r7, #24]
	conn.Type = ES_WIFI_TCP_CONNECTION;
 800da68:	2300      	movs	r3, #0
 800da6a:	753b      	strb	r3, [r7, #20]
	conn.RemoteIP[0] = pNetworkContext->ipaddr[0];
 800da6c:	68fb      	ldr	r3, [r7, #12]
 800da6e:	789b      	ldrb	r3, [r3, #2]
 800da70:	76bb      	strb	r3, [r7, #26]
	conn.RemoteIP[1] = pNetworkContext->ipaddr[1];
 800da72:	68fb      	ldr	r3, [r7, #12]
 800da74:	78db      	ldrb	r3, [r3, #3]
 800da76:	76fb      	strb	r3, [r7, #27]
	conn.RemoteIP[2] = pNetworkContext->ipaddr[2];
 800da78:	68fb      	ldr	r3, [r7, #12]
 800da7a:	791b      	ldrb	r3, [r3, #4]
 800da7c:	773b      	strb	r3, [r7, #28]
	conn.RemoteIP[3] = pNetworkContext->ipaddr[3];
 800da7e:	68fb      	ldr	r3, [r7, #12]
 800da80:	795b      	ldrb	r3, [r3, #5]
 800da82:	777b      	strb	r3, [r7, #29]

    if(!pNetworkContext->socket_open) {
 800da84:	68fb      	ldr	r3, [r7, #12]
 800da86:	785b      	ldrb	r3, [r3, #1]
 800da88:	2b00      	cmp	r3, #0
 800da8a:	d111      	bne.n	800dab0 <transport_send+0x68>
    	ret=ES_WIFI_StartClientConnection(&EsWifiObj, &conn);
 800da8c:	f107 0314 	add.w	r3, r7, #20
 800da90:	4619      	mov	r1, r3
 800da92:	481c      	ldr	r0, [pc, #112]	; (800db04 <transport_send+0xbc>)
 800da94:	f7fc fc84 	bl	800a3a0 <ES_WIFI_StartClientConnection>
 800da98:	4603      	mov	r3, r0
 800da9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

		if(ret!=ES_WIFI_STATUS_OK) {
 800da9e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800daa2:	2b00      	cmp	r3, #0
 800daa4:	d001      	beq.n	800daaa <transport_send+0x62>
			return 0;
 800daa6:	2300      	movs	r3, #0
 800daa8:	e027      	b.n	800dafa <transport_send+0xb2>
		} else {
			pNetworkContext->socket_open=1;
 800daaa:	68fb      	ldr	r3, [r7, #12]
 800daac:	2201      	movs	r2, #1
 800daae:	705a      	strb	r2, [r3, #1]
		}
    }

	ret=ES_WIFI_SendData(&EsWifiObj,pNetworkContext->socket,pBuffer,bytesToSend,&datasent,1000);
 800dab0:	68fb      	ldr	r3, [r7, #12]
 800dab2:	7819      	ldrb	r1, [r3, #0]
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	b29a      	uxth	r2, r3
 800dab8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800dabc:	9301      	str	r3, [sp, #4]
 800dabe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800dac2:	9300      	str	r3, [sp, #0]
 800dac4:	4613      	mov	r3, r2
 800dac6:	68ba      	ldr	r2, [r7, #8]
 800dac8:	480e      	ldr	r0, [pc, #56]	; (800db04 <transport_send+0xbc>)
 800daca:	f7fc fd53 	bl	800a574 <ES_WIFI_SendData>
 800dace:	4603      	mov	r3, r0
 800dad0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	//log_transport('S',pBuffer,bytesToSend);
	if(ret!=ES_WIFI_STATUS_OK) {
 800dad4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800dad8:	2b00      	cmp	r3, #0
 800dada:	d00a      	beq.n	800daf2 <transport_send+0xaa>
		pNetworkContext->socket_open=0;
 800dadc:	68fb      	ldr	r3, [r7, #12]
 800dade:	2200      	movs	r2, #0
 800dae0:	705a      	strb	r2, [r3, #1]
		printf("Error in sending data: %d\n",ret);
 800dae2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800dae6:	4619      	mov	r1, r3
 800dae8:	4807      	ldr	r0, [pc, #28]	; (800db08 <transport_send+0xc0>)
 800daea:	f004 f96d 	bl	8011dc8 <iprintf>
		return 0;
 800daee:	2300      	movs	r3, #0
 800daf0:	e003      	b.n	800dafa <transport_send+0xb2>
	} else {
		socketStatus=datasent;
 800daf2:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800daf6:	62fb      	str	r3, [r7, #44]	; 0x2c
	}

    return socketStatus;
 800daf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800dafa:	4618      	mov	r0, r3
 800dafc:	3730      	adds	r7, #48	; 0x30
 800dafe:	46bd      	mov	sp, r7
 800db00:	bd80      	pop	{r7, pc}
 800db02:	bf00      	nop
 800db04:	20000cf8 	.word	0x20000cf8
 800db08:	08014300 	.word	0x08014300

0800db0c <init_transport_from_socket>:

/* Populating the TransportInterface_t structure with the definitions above. */
void init_transport_from_socket( uint8_t tcpSocket, uint8_t socketOpen,
                                 NetworkContext_t * pNetworkContext,
                                 TransportInterface_t * pTransport )
{
 800db0c:	b480      	push	{r7}
 800db0e:	b085      	sub	sp, #20
 800db10:	af00      	add	r7, sp, #0
 800db12:	60ba      	str	r2, [r7, #8]
 800db14:	607b      	str	r3, [r7, #4]
 800db16:	4603      	mov	r3, r0
 800db18:	73fb      	strb	r3, [r7, #15]
 800db1a:	460b      	mov	r3, r1
 800db1c:	73bb      	strb	r3, [r7, #14]
    pNetworkContext->socket = tcpSocket;
 800db1e:	68bb      	ldr	r3, [r7, #8]
 800db20:	7bfa      	ldrb	r2, [r7, #15]
 800db22:	701a      	strb	r2, [r3, #0]
    pNetworkContext->socket_open=socketOpen;
 800db24:	68bb      	ldr	r3, [r7, #8]
 800db26:	7bba      	ldrb	r2, [r7, #14]
 800db28:	705a      	strb	r2, [r3, #1]
    pTransport->recv = transport_recv;
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	4a08      	ldr	r2, [pc, #32]	; (800db50 <init_transport_from_socket+0x44>)
 800db2e:	601a      	str	r2, [r3, #0]
    pTransport->send = transport_send;
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	4a08      	ldr	r2, [pc, #32]	; (800db54 <init_transport_from_socket+0x48>)
 800db34:	605a      	str	r2, [r3, #4]
    // We don't implement transport vector function
    pTransport->writev=NULL;
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	2200      	movs	r2, #0
 800db3a:	609a      	str	r2, [r3, #8]
    pTransport->pNetworkContext = pNetworkContext;
 800db3c:	687b      	ldr	r3, [r7, #4]
 800db3e:	68ba      	ldr	r2, [r7, #8]
 800db40:	60da      	str	r2, [r3, #12]
}
 800db42:	bf00      	nop
 800db44:	3714      	adds	r7, #20
 800db46:	46bd      	mov	sp, r7
 800db48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db4c:	4770      	bx	lr
 800db4e:	bf00      	nop
 800db50:	0800d8bd 	.word	0x0800d8bd
 800db54:	0800da49 	.word	0x0800da49

0800db58 <__NVIC_SetPriority>:
{
 800db58:	b480      	push	{r7}
 800db5a:	b083      	sub	sp, #12
 800db5c:	af00      	add	r7, sp, #0
 800db5e:	4603      	mov	r3, r0
 800db60:	6039      	str	r1, [r7, #0]
 800db62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800db64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800db68:	2b00      	cmp	r3, #0
 800db6a:	db0a      	blt.n	800db82 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800db6c:	683b      	ldr	r3, [r7, #0]
 800db6e:	b2da      	uxtb	r2, r3
 800db70:	490c      	ldr	r1, [pc, #48]	; (800dba4 <__NVIC_SetPriority+0x4c>)
 800db72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800db76:	0112      	lsls	r2, r2, #4
 800db78:	b2d2      	uxtb	r2, r2
 800db7a:	440b      	add	r3, r1
 800db7c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800db80:	e00a      	b.n	800db98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800db82:	683b      	ldr	r3, [r7, #0]
 800db84:	b2da      	uxtb	r2, r3
 800db86:	4908      	ldr	r1, [pc, #32]	; (800dba8 <__NVIC_SetPriority+0x50>)
 800db88:	79fb      	ldrb	r3, [r7, #7]
 800db8a:	f003 030f 	and.w	r3, r3, #15
 800db8e:	3b04      	subs	r3, #4
 800db90:	0112      	lsls	r2, r2, #4
 800db92:	b2d2      	uxtb	r2, r2
 800db94:	440b      	add	r3, r1
 800db96:	761a      	strb	r2, [r3, #24]
}
 800db98:	bf00      	nop
 800db9a:	370c      	adds	r7, #12
 800db9c:	46bd      	mov	sp, r7
 800db9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dba2:	4770      	bx	lr
 800dba4:	e000e100 	.word	0xe000e100
 800dba8:	e000ed00 	.word	0xe000ed00

0800dbac <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800dbac:	b580      	push	{r7, lr}
 800dbae:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800dbb0:	4b05      	ldr	r3, [pc, #20]	; (800dbc8 <SysTick_Handler+0x1c>)
 800dbb2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800dbb4:	f002 f986 	bl	800fec4 <xTaskGetSchedulerState>
 800dbb8:	4603      	mov	r3, r0
 800dbba:	2b01      	cmp	r3, #1
 800dbbc:	d001      	beq.n	800dbc2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800dbbe:	f003 f973 	bl	8010ea8 <xPortSysTickHandler>
  }
}
 800dbc2:	bf00      	nop
 800dbc4:	bd80      	pop	{r7, pc}
 800dbc6:	bf00      	nop
 800dbc8:	e000e010 	.word	0xe000e010

0800dbcc <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800dbcc:	b580      	push	{r7, lr}
 800dbce:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800dbd0:	2100      	movs	r1, #0
 800dbd2:	f06f 0004 	mvn.w	r0, #4
 800dbd6:	f7ff ffbf 	bl	800db58 <__NVIC_SetPriority>
#endif
}
 800dbda:	bf00      	nop
 800dbdc:	bd80      	pop	{r7, pc}
	...

0800dbe0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800dbe0:	b480      	push	{r7}
 800dbe2:	b083      	sub	sp, #12
 800dbe4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dbe6:	f3ef 8305 	mrs	r3, IPSR
 800dbea:	603b      	str	r3, [r7, #0]
  return(result);
 800dbec:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800dbee:	2b00      	cmp	r3, #0
 800dbf0:	d003      	beq.n	800dbfa <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800dbf2:	f06f 0305 	mvn.w	r3, #5
 800dbf6:	607b      	str	r3, [r7, #4]
 800dbf8:	e00c      	b.n	800dc14 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800dbfa:	4b0a      	ldr	r3, [pc, #40]	; (800dc24 <osKernelInitialize+0x44>)
 800dbfc:	681b      	ldr	r3, [r3, #0]
 800dbfe:	2b00      	cmp	r3, #0
 800dc00:	d105      	bne.n	800dc0e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800dc02:	4b08      	ldr	r3, [pc, #32]	; (800dc24 <osKernelInitialize+0x44>)
 800dc04:	2201      	movs	r2, #1
 800dc06:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800dc08:	2300      	movs	r3, #0
 800dc0a:	607b      	str	r3, [r7, #4]
 800dc0c:	e002      	b.n	800dc14 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800dc0e:	f04f 33ff 	mov.w	r3, #4294967295
 800dc12:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800dc14:	687b      	ldr	r3, [r7, #4]
}
 800dc16:	4618      	mov	r0, r3
 800dc18:	370c      	adds	r7, #12
 800dc1a:	46bd      	mov	sp, r7
 800dc1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc20:	4770      	bx	lr
 800dc22:	bf00      	nop
 800dc24:	200015f8 	.word	0x200015f8

0800dc28 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800dc28:	b580      	push	{r7, lr}
 800dc2a:	b082      	sub	sp, #8
 800dc2c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dc2e:	f3ef 8305 	mrs	r3, IPSR
 800dc32:	603b      	str	r3, [r7, #0]
  return(result);
 800dc34:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800dc36:	2b00      	cmp	r3, #0
 800dc38:	d003      	beq.n	800dc42 <osKernelStart+0x1a>
    stat = osErrorISR;
 800dc3a:	f06f 0305 	mvn.w	r3, #5
 800dc3e:	607b      	str	r3, [r7, #4]
 800dc40:	e010      	b.n	800dc64 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800dc42:	4b0b      	ldr	r3, [pc, #44]	; (800dc70 <osKernelStart+0x48>)
 800dc44:	681b      	ldr	r3, [r3, #0]
 800dc46:	2b01      	cmp	r3, #1
 800dc48:	d109      	bne.n	800dc5e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800dc4a:	f7ff ffbf 	bl	800dbcc <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800dc4e:	4b08      	ldr	r3, [pc, #32]	; (800dc70 <osKernelStart+0x48>)
 800dc50:	2202      	movs	r2, #2
 800dc52:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800dc54:	f001 fcbc 	bl	800f5d0 <vTaskStartScheduler>
      stat = osOK;
 800dc58:	2300      	movs	r3, #0
 800dc5a:	607b      	str	r3, [r7, #4]
 800dc5c:	e002      	b.n	800dc64 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800dc5e:	f04f 33ff 	mov.w	r3, #4294967295
 800dc62:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800dc64:	687b      	ldr	r3, [r7, #4]
}
 800dc66:	4618      	mov	r0, r3
 800dc68:	3708      	adds	r7, #8
 800dc6a:	46bd      	mov	sp, r7
 800dc6c:	bd80      	pop	{r7, pc}
 800dc6e:	bf00      	nop
 800dc70:	200015f8 	.word	0x200015f8

0800dc74 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800dc74:	b580      	push	{r7, lr}
 800dc76:	b08e      	sub	sp, #56	; 0x38
 800dc78:	af04      	add	r7, sp, #16
 800dc7a:	60f8      	str	r0, [r7, #12]
 800dc7c:	60b9      	str	r1, [r7, #8]
 800dc7e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800dc80:	2300      	movs	r3, #0
 800dc82:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dc84:	f3ef 8305 	mrs	r3, IPSR
 800dc88:	617b      	str	r3, [r7, #20]
  return(result);
 800dc8a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800dc8c:	2b00      	cmp	r3, #0
 800dc8e:	d17e      	bne.n	800dd8e <osThreadNew+0x11a>
 800dc90:	68fb      	ldr	r3, [r7, #12]
 800dc92:	2b00      	cmp	r3, #0
 800dc94:	d07b      	beq.n	800dd8e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800dc96:	2380      	movs	r3, #128	; 0x80
 800dc98:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800dc9a:	2318      	movs	r3, #24
 800dc9c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800dc9e:	2300      	movs	r3, #0
 800dca0:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800dca2:	f04f 33ff 	mov.w	r3, #4294967295
 800dca6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800dca8:	687b      	ldr	r3, [r7, #4]
 800dcaa:	2b00      	cmp	r3, #0
 800dcac:	d045      	beq.n	800dd3a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800dcae:	687b      	ldr	r3, [r7, #4]
 800dcb0:	681b      	ldr	r3, [r3, #0]
 800dcb2:	2b00      	cmp	r3, #0
 800dcb4:	d002      	beq.n	800dcbc <osThreadNew+0x48>
        name = attr->name;
 800dcb6:	687b      	ldr	r3, [r7, #4]
 800dcb8:	681b      	ldr	r3, [r3, #0]
 800dcba:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	699b      	ldr	r3, [r3, #24]
 800dcc0:	2b00      	cmp	r3, #0
 800dcc2:	d002      	beq.n	800dcca <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	699b      	ldr	r3, [r3, #24]
 800dcc8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800dcca:	69fb      	ldr	r3, [r7, #28]
 800dccc:	2b00      	cmp	r3, #0
 800dcce:	d008      	beq.n	800dce2 <osThreadNew+0x6e>
 800dcd0:	69fb      	ldr	r3, [r7, #28]
 800dcd2:	2b38      	cmp	r3, #56	; 0x38
 800dcd4:	d805      	bhi.n	800dce2 <osThreadNew+0x6e>
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	685b      	ldr	r3, [r3, #4]
 800dcda:	f003 0301 	and.w	r3, r3, #1
 800dcde:	2b00      	cmp	r3, #0
 800dce0:	d001      	beq.n	800dce6 <osThreadNew+0x72>
        return (NULL);
 800dce2:	2300      	movs	r3, #0
 800dce4:	e054      	b.n	800dd90 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	695b      	ldr	r3, [r3, #20]
 800dcea:	2b00      	cmp	r3, #0
 800dcec:	d003      	beq.n	800dcf6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	695b      	ldr	r3, [r3, #20]
 800dcf2:	089b      	lsrs	r3, r3, #2
 800dcf4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800dcf6:	687b      	ldr	r3, [r7, #4]
 800dcf8:	689b      	ldr	r3, [r3, #8]
 800dcfa:	2b00      	cmp	r3, #0
 800dcfc:	d00e      	beq.n	800dd1c <osThreadNew+0xa8>
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	68db      	ldr	r3, [r3, #12]
 800dd02:	2bbf      	cmp	r3, #191	; 0xbf
 800dd04:	d90a      	bls.n	800dd1c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800dd0a:	2b00      	cmp	r3, #0
 800dd0c:	d006      	beq.n	800dd1c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	695b      	ldr	r3, [r3, #20]
 800dd12:	2b00      	cmp	r3, #0
 800dd14:	d002      	beq.n	800dd1c <osThreadNew+0xa8>
        mem = 1;
 800dd16:	2301      	movs	r3, #1
 800dd18:	61bb      	str	r3, [r7, #24]
 800dd1a:	e010      	b.n	800dd3e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800dd1c:	687b      	ldr	r3, [r7, #4]
 800dd1e:	689b      	ldr	r3, [r3, #8]
 800dd20:	2b00      	cmp	r3, #0
 800dd22:	d10c      	bne.n	800dd3e <osThreadNew+0xca>
 800dd24:	687b      	ldr	r3, [r7, #4]
 800dd26:	68db      	ldr	r3, [r3, #12]
 800dd28:	2b00      	cmp	r3, #0
 800dd2a:	d108      	bne.n	800dd3e <osThreadNew+0xca>
 800dd2c:	687b      	ldr	r3, [r7, #4]
 800dd2e:	691b      	ldr	r3, [r3, #16]
 800dd30:	2b00      	cmp	r3, #0
 800dd32:	d104      	bne.n	800dd3e <osThreadNew+0xca>
          mem = 0;
 800dd34:	2300      	movs	r3, #0
 800dd36:	61bb      	str	r3, [r7, #24]
 800dd38:	e001      	b.n	800dd3e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800dd3a:	2300      	movs	r3, #0
 800dd3c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800dd3e:	69bb      	ldr	r3, [r7, #24]
 800dd40:	2b01      	cmp	r3, #1
 800dd42:	d110      	bne.n	800dd66 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800dd48:	687a      	ldr	r2, [r7, #4]
 800dd4a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800dd4c:	9202      	str	r2, [sp, #8]
 800dd4e:	9301      	str	r3, [sp, #4]
 800dd50:	69fb      	ldr	r3, [r7, #28]
 800dd52:	9300      	str	r3, [sp, #0]
 800dd54:	68bb      	ldr	r3, [r7, #8]
 800dd56:	6a3a      	ldr	r2, [r7, #32]
 800dd58:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800dd5a:	68f8      	ldr	r0, [r7, #12]
 800dd5c:	f001 f970 	bl	800f040 <xTaskCreateStatic>
 800dd60:	4603      	mov	r3, r0
 800dd62:	613b      	str	r3, [r7, #16]
 800dd64:	e013      	b.n	800dd8e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800dd66:	69bb      	ldr	r3, [r7, #24]
 800dd68:	2b00      	cmp	r3, #0
 800dd6a:	d110      	bne.n	800dd8e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800dd6c:	6a3b      	ldr	r3, [r7, #32]
 800dd6e:	b29a      	uxth	r2, r3
 800dd70:	f107 0310 	add.w	r3, r7, #16
 800dd74:	9301      	str	r3, [sp, #4]
 800dd76:	69fb      	ldr	r3, [r7, #28]
 800dd78:	9300      	str	r3, [sp, #0]
 800dd7a:	68bb      	ldr	r3, [r7, #8]
 800dd7c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800dd7e:	68f8      	ldr	r0, [r7, #12]
 800dd80:	f001 f9bb 	bl	800f0fa <xTaskCreate>
 800dd84:	4603      	mov	r3, r0
 800dd86:	2b01      	cmp	r3, #1
 800dd88:	d001      	beq.n	800dd8e <osThreadNew+0x11a>
            hTask = NULL;
 800dd8a:	2300      	movs	r3, #0
 800dd8c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800dd8e:	693b      	ldr	r3, [r7, #16]
}
 800dd90:	4618      	mov	r0, r3
 800dd92:	3728      	adds	r7, #40	; 0x28
 800dd94:	46bd      	mov	sp, r7
 800dd96:	bd80      	pop	{r7, pc}

0800dd98 <osThreadTerminate>:
  vTaskDelete (NULL);
#endif
  for (;;);
}

osStatus_t osThreadTerminate (osThreadId_t thread_id) {
 800dd98:	b580      	push	{r7, lr}
 800dd9a:	b086      	sub	sp, #24
 800dd9c:	af00      	add	r7, sp, #0
 800dd9e:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 800dda0:	687b      	ldr	r3, [r7, #4]
 800dda2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dda4:	f3ef 8305 	mrs	r3, IPSR
 800dda8:	60bb      	str	r3, [r7, #8]
  return(result);
 800ddaa:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;
#ifndef USE_FreeRTOS_HEAP_1
  eTaskState tstate;

  if (IS_IRQ()) {
 800ddac:	2b00      	cmp	r3, #0
 800ddae:	d003      	beq.n	800ddb8 <osThreadTerminate+0x20>
    stat = osErrorISR;
 800ddb0:	f06f 0305 	mvn.w	r3, #5
 800ddb4:	617b      	str	r3, [r7, #20]
 800ddb6:	e017      	b.n	800dde8 <osThreadTerminate+0x50>
  }
  else if (hTask == NULL) {
 800ddb8:	693b      	ldr	r3, [r7, #16]
 800ddba:	2b00      	cmp	r3, #0
 800ddbc:	d103      	bne.n	800ddc6 <osThreadTerminate+0x2e>
    stat = osErrorParameter;
 800ddbe:	f06f 0303 	mvn.w	r3, #3
 800ddc2:	617b      	str	r3, [r7, #20]
 800ddc4:	e010      	b.n	800dde8 <osThreadTerminate+0x50>
  }
  else {
    tstate = eTaskGetState (hTask);
 800ddc6:	6938      	ldr	r0, [r7, #16]
 800ddc8:	f001 fb9c 	bl	800f504 <eTaskGetState>
 800ddcc:	4603      	mov	r3, r0
 800ddce:	73fb      	strb	r3, [r7, #15]

    if (tstate != eDeleted) {
 800ddd0:	7bfb      	ldrb	r3, [r7, #15]
 800ddd2:	2b04      	cmp	r3, #4
 800ddd4:	d005      	beq.n	800dde2 <osThreadTerminate+0x4a>
      stat = osOK;
 800ddd6:	2300      	movs	r3, #0
 800ddd8:	617b      	str	r3, [r7, #20]
      vTaskDelete (hTask);
 800ddda:	6938      	ldr	r0, [r7, #16]
 800dddc:	f001 faec 	bl	800f3b8 <vTaskDelete>
 800dde0:	e002      	b.n	800dde8 <osThreadTerminate+0x50>
    } else {
      stat = osErrorResource;
 800dde2:	f06f 0302 	mvn.w	r3, #2
 800dde6:	617b      	str	r3, [r7, #20]
  }
#else
  stat = osError;
#endif

  return (stat);
 800dde8:	697b      	ldr	r3, [r7, #20]
}
 800ddea:	4618      	mov	r0, r3
 800ddec:	3718      	adds	r7, #24
 800ddee:	46bd      	mov	sp, r7
 800ddf0:	bd80      	pop	{r7, pc}
	...

0800ddf4 <osThreadFlagsSet>:
  return (count);
}
#endif /* (configUSE_OS2_THREAD_ENUMERATE == 1) */

#if (configUSE_OS2_THREAD_FLAGS == 1)
uint32_t osThreadFlagsSet (osThreadId_t thread_id, uint32_t flags) {
 800ddf4:	b580      	push	{r7, lr}
 800ddf6:	b088      	sub	sp, #32
 800ddf8:	af02      	add	r7, sp, #8
 800ddfa:	6078      	str	r0, [r7, #4]
 800ddfc:	6039      	str	r1, [r7, #0]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 800ddfe:	687b      	ldr	r3, [r7, #4]
 800de00:	617b      	str	r3, [r7, #20]
  uint32_t rflags;
  BaseType_t yield;

  if ((hTask == NULL) || ((flags & THREAD_FLAGS_INVALID_BITS) != 0U)) {
 800de02:	697b      	ldr	r3, [r7, #20]
 800de04:	2b00      	cmp	r3, #0
 800de06:	d002      	beq.n	800de0e <osThreadFlagsSet+0x1a>
 800de08:	683b      	ldr	r3, [r7, #0]
 800de0a:	2b00      	cmp	r3, #0
 800de0c:	da03      	bge.n	800de16 <osThreadFlagsSet+0x22>
    rflags = (uint32_t)osErrorParameter;
 800de0e:	f06f 0303 	mvn.w	r3, #3
 800de12:	60fb      	str	r3, [r7, #12]
 800de14:	e035      	b.n	800de82 <osThreadFlagsSet+0x8e>
  }
  else {
    rflags = (uint32_t)osError;
 800de16:	f04f 33ff 	mov.w	r3, #4294967295
 800de1a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800de1c:	f3ef 8305 	mrs	r3, IPSR
 800de20:	613b      	str	r3, [r7, #16]
  return(result);
 800de22:	693b      	ldr	r3, [r7, #16]

    if (IS_IRQ()) {
 800de24:	2b00      	cmp	r3, #0
 800de26:	d01f      	beq.n	800de68 <osThreadFlagsSet+0x74>
      yield = pdFALSE;
 800de28:	2300      	movs	r3, #0
 800de2a:	60bb      	str	r3, [r7, #8]

      (void)xTaskNotifyFromISR (hTask, flags, eSetBits, &yield);
 800de2c:	f107 0308 	add.w	r3, r7, #8
 800de30:	9300      	str	r3, [sp, #0]
 800de32:	2300      	movs	r3, #0
 800de34:	2201      	movs	r2, #1
 800de36:	6839      	ldr	r1, [r7, #0]
 800de38:	6978      	ldr	r0, [r7, #20]
 800de3a:	f002 f9ed 	bl	8010218 <xTaskGenericNotifyFromISR>
      (void)xTaskNotifyAndQueryFromISR (hTask, 0, eNoAction, &rflags, NULL);
 800de3e:	f107 030c 	add.w	r3, r7, #12
 800de42:	2200      	movs	r2, #0
 800de44:	9200      	str	r2, [sp, #0]
 800de46:	2200      	movs	r2, #0
 800de48:	2100      	movs	r1, #0
 800de4a:	6978      	ldr	r0, [r7, #20]
 800de4c:	f002 f9e4 	bl	8010218 <xTaskGenericNotifyFromISR>

      portYIELD_FROM_ISR (yield);
 800de50:	68bb      	ldr	r3, [r7, #8]
 800de52:	2b00      	cmp	r3, #0
 800de54:	d015      	beq.n	800de82 <osThreadFlagsSet+0x8e>
 800de56:	4b0d      	ldr	r3, [pc, #52]	; (800de8c <osThreadFlagsSet+0x98>)
 800de58:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800de5c:	601a      	str	r2, [r3, #0]
 800de5e:	f3bf 8f4f 	dsb	sy
 800de62:	f3bf 8f6f 	isb	sy
 800de66:	e00c      	b.n	800de82 <osThreadFlagsSet+0x8e>
    }
    else {
      (void)xTaskNotify (hTask, flags, eSetBits);
 800de68:	2300      	movs	r3, #0
 800de6a:	2201      	movs	r2, #1
 800de6c:	6839      	ldr	r1, [r7, #0]
 800de6e:	6978      	ldr	r0, [r7, #20]
 800de70:	f002 f914 	bl	801009c <xTaskGenericNotify>
      (void)xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags);
 800de74:	f107 030c 	add.w	r3, r7, #12
 800de78:	2200      	movs	r2, #0
 800de7a:	2100      	movs	r1, #0
 800de7c:	6978      	ldr	r0, [r7, #20]
 800de7e:	f002 f90d 	bl	801009c <xTaskGenericNotify>
    }
  }
  /* Return flags after setting */
  return (rflags);
 800de82:	68fb      	ldr	r3, [r7, #12]
}
 800de84:	4618      	mov	r0, r3
 800de86:	3718      	adds	r7, #24
 800de88:	46bd      	mov	sp, r7
 800de8a:	bd80      	pop	{r7, pc}
 800de8c:	e000ed04 	.word	0xe000ed04

0800de90 <osThreadFlagsWait>:
  }

  return (rflags);
}

uint32_t osThreadFlagsWait (uint32_t flags, uint32_t options, uint32_t timeout) {
 800de90:	b580      	push	{r7, lr}
 800de92:	b08c      	sub	sp, #48	; 0x30
 800de94:	af00      	add	r7, sp, #0
 800de96:	60f8      	str	r0, [r7, #12]
 800de98:	60b9      	str	r1, [r7, #8]
 800de9a:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800de9c:	f3ef 8305 	mrs	r3, IPSR
 800dea0:	617b      	str	r3, [r7, #20]
  return(result);
 800dea2:	697b      	ldr	r3, [r7, #20]
  uint32_t rflags, nval;
  uint32_t clear;
  TickType_t t0, td, tout;
  BaseType_t rval;

  if (IS_IRQ()) {
 800dea4:	2b00      	cmp	r3, #0
 800dea6:	d003      	beq.n	800deb0 <osThreadFlagsWait+0x20>
    rflags = (uint32_t)osErrorISR;
 800dea8:	f06f 0305 	mvn.w	r3, #5
 800deac:	62fb      	str	r3, [r7, #44]	; 0x2c
 800deae:	e06b      	b.n	800df88 <osThreadFlagsWait+0xf8>
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 800deb0:	68fb      	ldr	r3, [r7, #12]
 800deb2:	2b00      	cmp	r3, #0
 800deb4:	da03      	bge.n	800debe <osThreadFlagsWait+0x2e>
    rflags = (uint32_t)osErrorParameter;
 800deb6:	f06f 0303 	mvn.w	r3, #3
 800deba:	62fb      	str	r3, [r7, #44]	; 0x2c
 800debc:	e064      	b.n	800df88 <osThreadFlagsWait+0xf8>
  }
  else {
    if ((options & osFlagsNoClear) == osFlagsNoClear) {
 800debe:	68bb      	ldr	r3, [r7, #8]
 800dec0:	f003 0302 	and.w	r3, r3, #2
 800dec4:	2b00      	cmp	r3, #0
 800dec6:	d002      	beq.n	800dece <osThreadFlagsWait+0x3e>
      clear = 0U;
 800dec8:	2300      	movs	r3, #0
 800deca:	62bb      	str	r3, [r7, #40]	; 0x28
 800decc:	e001      	b.n	800ded2 <osThreadFlagsWait+0x42>
    } else {
      clear = flags;
 800dece:	68fb      	ldr	r3, [r7, #12]
 800ded0:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    rflags = 0U;
 800ded2:	2300      	movs	r3, #0
 800ded4:	62fb      	str	r3, [r7, #44]	; 0x2c
    tout   = timeout;
 800ded6:	687b      	ldr	r3, [r7, #4]
 800ded8:	627b      	str	r3, [r7, #36]	; 0x24

    t0 = xTaskGetTickCount();
 800deda:	f001 fc97 	bl	800f80c <xTaskGetTickCount>
 800dede:	6238      	str	r0, [r7, #32]
    do {
      rval = xTaskNotifyWait (0, clear, &nval, tout);
 800dee0:	f107 0210 	add.w	r2, r7, #16
 800dee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dee6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800dee8:	2000      	movs	r0, #0
 800deea:	f002 f877 	bl	800ffdc <xTaskNotifyWait>
 800deee:	61f8      	str	r0, [r7, #28]

      if (rval == pdPASS) {
 800def0:	69fb      	ldr	r3, [r7, #28]
 800def2:	2b01      	cmp	r3, #1
 800def4:	d137      	bne.n	800df66 <osThreadFlagsWait+0xd6>
        rflags &= flags;
 800def6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800def8:	68fb      	ldr	r3, [r7, #12]
 800defa:	4013      	ands	r3, r2
 800defc:	62fb      	str	r3, [r7, #44]	; 0x2c
        rflags |= nval;
 800defe:	693b      	ldr	r3, [r7, #16]
 800df00:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800df02:	4313      	orrs	r3, r2
 800df04:	62fb      	str	r3, [r7, #44]	; 0x2c

        if ((options & osFlagsWaitAll) == osFlagsWaitAll) {
 800df06:	68bb      	ldr	r3, [r7, #8]
 800df08:	f003 0301 	and.w	r3, r3, #1
 800df0c:	2b00      	cmp	r3, #0
 800df0e:	d00c      	beq.n	800df2a <osThreadFlagsWait+0x9a>
          if ((flags & rflags) == flags) {
 800df10:	68fa      	ldr	r2, [r7, #12]
 800df12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df14:	4013      	ands	r3, r2
 800df16:	68fa      	ldr	r2, [r7, #12]
 800df18:	429a      	cmp	r2, r3
 800df1a:	d032      	beq.n	800df82 <osThreadFlagsWait+0xf2>
            break;
          } else {
            if (timeout == 0U) {
 800df1c:	687b      	ldr	r3, [r7, #4]
 800df1e:	2b00      	cmp	r3, #0
 800df20:	d10f      	bne.n	800df42 <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 800df22:	f06f 0302 	mvn.w	r3, #2
 800df26:	62fb      	str	r3, [r7, #44]	; 0x2c
              break;
 800df28:	e02e      	b.n	800df88 <osThreadFlagsWait+0xf8>
            }
          }
        }
        else {
          if ((flags & rflags) != 0) {
 800df2a:	68fa      	ldr	r2, [r7, #12]
 800df2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df2e:	4013      	ands	r3, r2
 800df30:	2b00      	cmp	r3, #0
 800df32:	d128      	bne.n	800df86 <osThreadFlagsWait+0xf6>
            break;
          } else {
            if (timeout == 0U) {
 800df34:	687b      	ldr	r3, [r7, #4]
 800df36:	2b00      	cmp	r3, #0
 800df38:	d103      	bne.n	800df42 <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 800df3a:	f06f 0302 	mvn.w	r3, #2
 800df3e:	62fb      	str	r3, [r7, #44]	; 0x2c
              break;
 800df40:	e022      	b.n	800df88 <osThreadFlagsWait+0xf8>
            }
          }
        }

        /* Update timeout */
        td = xTaskGetTickCount() - t0;
 800df42:	f001 fc63 	bl	800f80c <xTaskGetTickCount>
 800df46:	4602      	mov	r2, r0
 800df48:	6a3b      	ldr	r3, [r7, #32]
 800df4a:	1ad3      	subs	r3, r2, r3
 800df4c:	61bb      	str	r3, [r7, #24]

        if (td > tout) {
 800df4e:	69ba      	ldr	r2, [r7, #24]
 800df50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df52:	429a      	cmp	r2, r3
 800df54:	d902      	bls.n	800df5c <osThreadFlagsWait+0xcc>
          tout  = 0;
 800df56:	2300      	movs	r3, #0
 800df58:	627b      	str	r3, [r7, #36]	; 0x24
 800df5a:	e00e      	b.n	800df7a <osThreadFlagsWait+0xea>
        } else {
          tout -= td;
 800df5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800df5e:	69bb      	ldr	r3, [r7, #24]
 800df60:	1ad3      	subs	r3, r2, r3
 800df62:	627b      	str	r3, [r7, #36]	; 0x24
 800df64:	e009      	b.n	800df7a <osThreadFlagsWait+0xea>
        }
      }
      else {
        if (timeout == 0) {
 800df66:	687b      	ldr	r3, [r7, #4]
 800df68:	2b00      	cmp	r3, #0
 800df6a:	d103      	bne.n	800df74 <osThreadFlagsWait+0xe4>
          rflags = (uint32_t)osErrorResource;
 800df6c:	f06f 0302 	mvn.w	r3, #2
 800df70:	62fb      	str	r3, [r7, #44]	; 0x2c
 800df72:	e002      	b.n	800df7a <osThreadFlagsWait+0xea>
        } else {
          rflags = (uint32_t)osErrorTimeout;
 800df74:	f06f 0301 	mvn.w	r3, #1
 800df78:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
      }
    }
    while (rval != pdFAIL);
 800df7a:	69fb      	ldr	r3, [r7, #28]
 800df7c:	2b00      	cmp	r3, #0
 800df7e:	d1af      	bne.n	800dee0 <osThreadFlagsWait+0x50>
 800df80:	e002      	b.n	800df88 <osThreadFlagsWait+0xf8>
            break;
 800df82:	bf00      	nop
 800df84:	e000      	b.n	800df88 <osThreadFlagsWait+0xf8>
            break;
 800df86:	bf00      	nop
  }

  /* Return flags before clearing */
  return (rflags);
 800df88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800df8a:	4618      	mov	r0, r3
 800df8c:	3730      	adds	r7, #48	; 0x30
 800df8e:	46bd      	mov	sp, r7
 800df90:	bd80      	pop	{r7, pc}

0800df92 <osDelay>:
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800df92:	b580      	push	{r7, lr}
 800df94:	b084      	sub	sp, #16
 800df96:	af00      	add	r7, sp, #0
 800df98:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800df9a:	f3ef 8305 	mrs	r3, IPSR
 800df9e:	60bb      	str	r3, [r7, #8]
  return(result);
 800dfa0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800dfa2:	2b00      	cmp	r3, #0
 800dfa4:	d003      	beq.n	800dfae <osDelay+0x1c>
    stat = osErrorISR;
 800dfa6:	f06f 0305 	mvn.w	r3, #5
 800dfaa:	60fb      	str	r3, [r7, #12]
 800dfac:	e007      	b.n	800dfbe <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800dfae:	2300      	movs	r3, #0
 800dfb0:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800dfb2:	687b      	ldr	r3, [r7, #4]
 800dfb4:	2b00      	cmp	r3, #0
 800dfb6:	d002      	beq.n	800dfbe <osDelay+0x2c>
      vTaskDelay(ticks);
 800dfb8:	6878      	ldr	r0, [r7, #4]
 800dfba:	f001 fa6f 	bl	800f49c <vTaskDelay>
    }
  }

  return (stat);
 800dfbe:	68fb      	ldr	r3, [r7, #12]
}
 800dfc0:	4618      	mov	r0, r3
 800dfc2:	3710      	adds	r7, #16
 800dfc4:	46bd      	mov	sp, r7
 800dfc6:	bd80      	pop	{r7, pc}

0800dfc8 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800dfc8:	b580      	push	{r7, lr}
 800dfca:	b08a      	sub	sp, #40	; 0x28
 800dfcc:	af02      	add	r7, sp, #8
 800dfce:	60f8      	str	r0, [r7, #12]
 800dfd0:	60b9      	str	r1, [r7, #8]
 800dfd2:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800dfd4:	2300      	movs	r3, #0
 800dfd6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dfd8:	f3ef 8305 	mrs	r3, IPSR
 800dfdc:	613b      	str	r3, [r7, #16]
  return(result);
 800dfde:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800dfe0:	2b00      	cmp	r3, #0
 800dfe2:	d15f      	bne.n	800e0a4 <osMessageQueueNew+0xdc>
 800dfe4:	68fb      	ldr	r3, [r7, #12]
 800dfe6:	2b00      	cmp	r3, #0
 800dfe8:	d05c      	beq.n	800e0a4 <osMessageQueueNew+0xdc>
 800dfea:	68bb      	ldr	r3, [r7, #8]
 800dfec:	2b00      	cmp	r3, #0
 800dfee:	d059      	beq.n	800e0a4 <osMessageQueueNew+0xdc>
    mem = -1;
 800dff0:	f04f 33ff 	mov.w	r3, #4294967295
 800dff4:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800dff6:	687b      	ldr	r3, [r7, #4]
 800dff8:	2b00      	cmp	r3, #0
 800dffa:	d029      	beq.n	800e050 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	689b      	ldr	r3, [r3, #8]
 800e000:	2b00      	cmp	r3, #0
 800e002:	d012      	beq.n	800e02a <osMessageQueueNew+0x62>
 800e004:	687b      	ldr	r3, [r7, #4]
 800e006:	68db      	ldr	r3, [r3, #12]
 800e008:	2b4f      	cmp	r3, #79	; 0x4f
 800e00a:	d90e      	bls.n	800e02a <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800e00c:	687b      	ldr	r3, [r7, #4]
 800e00e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800e010:	2b00      	cmp	r3, #0
 800e012:	d00a      	beq.n	800e02a <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	695a      	ldr	r2, [r3, #20]
 800e018:	68fb      	ldr	r3, [r7, #12]
 800e01a:	68b9      	ldr	r1, [r7, #8]
 800e01c:	fb01 f303 	mul.w	r3, r1, r3
 800e020:	429a      	cmp	r2, r3
 800e022:	d302      	bcc.n	800e02a <osMessageQueueNew+0x62>
        mem = 1;
 800e024:	2301      	movs	r3, #1
 800e026:	61bb      	str	r3, [r7, #24]
 800e028:	e014      	b.n	800e054 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800e02a:	687b      	ldr	r3, [r7, #4]
 800e02c:	689b      	ldr	r3, [r3, #8]
 800e02e:	2b00      	cmp	r3, #0
 800e030:	d110      	bne.n	800e054 <osMessageQueueNew+0x8c>
 800e032:	687b      	ldr	r3, [r7, #4]
 800e034:	68db      	ldr	r3, [r3, #12]
 800e036:	2b00      	cmp	r3, #0
 800e038:	d10c      	bne.n	800e054 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800e03a:	687b      	ldr	r3, [r7, #4]
 800e03c:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800e03e:	2b00      	cmp	r3, #0
 800e040:	d108      	bne.n	800e054 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800e042:	687b      	ldr	r3, [r7, #4]
 800e044:	695b      	ldr	r3, [r3, #20]
 800e046:	2b00      	cmp	r3, #0
 800e048:	d104      	bne.n	800e054 <osMessageQueueNew+0x8c>
          mem = 0;
 800e04a:	2300      	movs	r3, #0
 800e04c:	61bb      	str	r3, [r7, #24]
 800e04e:	e001      	b.n	800e054 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800e050:	2300      	movs	r3, #0
 800e052:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800e054:	69bb      	ldr	r3, [r7, #24]
 800e056:	2b01      	cmp	r3, #1
 800e058:	d10b      	bne.n	800e072 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	691a      	ldr	r2, [r3, #16]
 800e05e:	687b      	ldr	r3, [r7, #4]
 800e060:	689b      	ldr	r3, [r3, #8]
 800e062:	2100      	movs	r1, #0
 800e064:	9100      	str	r1, [sp, #0]
 800e066:	68b9      	ldr	r1, [r7, #8]
 800e068:	68f8      	ldr	r0, [r7, #12]
 800e06a:	f000 fa87 	bl	800e57c <xQueueGenericCreateStatic>
 800e06e:	61f8      	str	r0, [r7, #28]
 800e070:	e008      	b.n	800e084 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800e072:	69bb      	ldr	r3, [r7, #24]
 800e074:	2b00      	cmp	r3, #0
 800e076:	d105      	bne.n	800e084 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800e078:	2200      	movs	r2, #0
 800e07a:	68b9      	ldr	r1, [r7, #8]
 800e07c:	68f8      	ldr	r0, [r7, #12]
 800e07e:	f000 faf5 	bl	800e66c <xQueueGenericCreate>
 800e082:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800e084:	69fb      	ldr	r3, [r7, #28]
 800e086:	2b00      	cmp	r3, #0
 800e088:	d00c      	beq.n	800e0a4 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800e08a:	687b      	ldr	r3, [r7, #4]
 800e08c:	2b00      	cmp	r3, #0
 800e08e:	d003      	beq.n	800e098 <osMessageQueueNew+0xd0>
        name = attr->name;
 800e090:	687b      	ldr	r3, [r7, #4]
 800e092:	681b      	ldr	r3, [r3, #0]
 800e094:	617b      	str	r3, [r7, #20]
 800e096:	e001      	b.n	800e09c <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800e098:	2300      	movs	r3, #0
 800e09a:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800e09c:	6979      	ldr	r1, [r7, #20]
 800e09e:	69f8      	ldr	r0, [r7, #28]
 800e0a0:	f000 ff70 	bl	800ef84 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800e0a4:	69fb      	ldr	r3, [r7, #28]
}
 800e0a6:	4618      	mov	r0, r3
 800e0a8:	3720      	adds	r7, #32
 800e0aa:	46bd      	mov	sp, r7
 800e0ac:	bd80      	pop	{r7, pc}
	...

0800e0b0 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800e0b0:	b580      	push	{r7, lr}
 800e0b2:	b088      	sub	sp, #32
 800e0b4:	af00      	add	r7, sp, #0
 800e0b6:	60f8      	str	r0, [r7, #12]
 800e0b8:	60b9      	str	r1, [r7, #8]
 800e0ba:	603b      	str	r3, [r7, #0]
 800e0bc:	4613      	mov	r3, r2
 800e0be:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800e0c0:	68fb      	ldr	r3, [r7, #12]
 800e0c2:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800e0c4:	2300      	movs	r3, #0
 800e0c6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e0c8:	f3ef 8305 	mrs	r3, IPSR
 800e0cc:	617b      	str	r3, [r7, #20]
  return(result);
 800e0ce:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800e0d0:	2b00      	cmp	r3, #0
 800e0d2:	d028      	beq.n	800e126 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800e0d4:	69bb      	ldr	r3, [r7, #24]
 800e0d6:	2b00      	cmp	r3, #0
 800e0d8:	d005      	beq.n	800e0e6 <osMessageQueuePut+0x36>
 800e0da:	68bb      	ldr	r3, [r7, #8]
 800e0dc:	2b00      	cmp	r3, #0
 800e0de:	d002      	beq.n	800e0e6 <osMessageQueuePut+0x36>
 800e0e0:	683b      	ldr	r3, [r7, #0]
 800e0e2:	2b00      	cmp	r3, #0
 800e0e4:	d003      	beq.n	800e0ee <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800e0e6:	f06f 0303 	mvn.w	r3, #3
 800e0ea:	61fb      	str	r3, [r7, #28]
 800e0ec:	e038      	b.n	800e160 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800e0ee:	2300      	movs	r3, #0
 800e0f0:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800e0f2:	f107 0210 	add.w	r2, r7, #16
 800e0f6:	2300      	movs	r3, #0
 800e0f8:	68b9      	ldr	r1, [r7, #8]
 800e0fa:	69b8      	ldr	r0, [r7, #24]
 800e0fc:	f000 fc12 	bl	800e924 <xQueueGenericSendFromISR>
 800e100:	4603      	mov	r3, r0
 800e102:	2b01      	cmp	r3, #1
 800e104:	d003      	beq.n	800e10e <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800e106:	f06f 0302 	mvn.w	r3, #2
 800e10a:	61fb      	str	r3, [r7, #28]
 800e10c:	e028      	b.n	800e160 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800e10e:	693b      	ldr	r3, [r7, #16]
 800e110:	2b00      	cmp	r3, #0
 800e112:	d025      	beq.n	800e160 <osMessageQueuePut+0xb0>
 800e114:	4b15      	ldr	r3, [pc, #84]	; (800e16c <osMessageQueuePut+0xbc>)
 800e116:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e11a:	601a      	str	r2, [r3, #0]
 800e11c:	f3bf 8f4f 	dsb	sy
 800e120:	f3bf 8f6f 	isb	sy
 800e124:	e01c      	b.n	800e160 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800e126:	69bb      	ldr	r3, [r7, #24]
 800e128:	2b00      	cmp	r3, #0
 800e12a:	d002      	beq.n	800e132 <osMessageQueuePut+0x82>
 800e12c:	68bb      	ldr	r3, [r7, #8]
 800e12e:	2b00      	cmp	r3, #0
 800e130:	d103      	bne.n	800e13a <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800e132:	f06f 0303 	mvn.w	r3, #3
 800e136:	61fb      	str	r3, [r7, #28]
 800e138:	e012      	b.n	800e160 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800e13a:	2300      	movs	r3, #0
 800e13c:	683a      	ldr	r2, [r7, #0]
 800e13e:	68b9      	ldr	r1, [r7, #8]
 800e140:	69b8      	ldr	r0, [r7, #24]
 800e142:	f000 faf1 	bl	800e728 <xQueueGenericSend>
 800e146:	4603      	mov	r3, r0
 800e148:	2b01      	cmp	r3, #1
 800e14a:	d009      	beq.n	800e160 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800e14c:	683b      	ldr	r3, [r7, #0]
 800e14e:	2b00      	cmp	r3, #0
 800e150:	d003      	beq.n	800e15a <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800e152:	f06f 0301 	mvn.w	r3, #1
 800e156:	61fb      	str	r3, [r7, #28]
 800e158:	e002      	b.n	800e160 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800e15a:	f06f 0302 	mvn.w	r3, #2
 800e15e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800e160:	69fb      	ldr	r3, [r7, #28]
}
 800e162:	4618      	mov	r0, r3
 800e164:	3720      	adds	r7, #32
 800e166:	46bd      	mov	sp, r7
 800e168:	bd80      	pop	{r7, pc}
 800e16a:	bf00      	nop
 800e16c:	e000ed04 	.word	0xe000ed04

0800e170 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800e170:	b580      	push	{r7, lr}
 800e172:	b088      	sub	sp, #32
 800e174:	af00      	add	r7, sp, #0
 800e176:	60f8      	str	r0, [r7, #12]
 800e178:	60b9      	str	r1, [r7, #8]
 800e17a:	607a      	str	r2, [r7, #4]
 800e17c:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800e17e:	68fb      	ldr	r3, [r7, #12]
 800e180:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800e182:	2300      	movs	r3, #0
 800e184:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e186:	f3ef 8305 	mrs	r3, IPSR
 800e18a:	617b      	str	r3, [r7, #20]
  return(result);
 800e18c:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800e18e:	2b00      	cmp	r3, #0
 800e190:	d028      	beq.n	800e1e4 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800e192:	69bb      	ldr	r3, [r7, #24]
 800e194:	2b00      	cmp	r3, #0
 800e196:	d005      	beq.n	800e1a4 <osMessageQueueGet+0x34>
 800e198:	68bb      	ldr	r3, [r7, #8]
 800e19a:	2b00      	cmp	r3, #0
 800e19c:	d002      	beq.n	800e1a4 <osMessageQueueGet+0x34>
 800e19e:	683b      	ldr	r3, [r7, #0]
 800e1a0:	2b00      	cmp	r3, #0
 800e1a2:	d003      	beq.n	800e1ac <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800e1a4:	f06f 0303 	mvn.w	r3, #3
 800e1a8:	61fb      	str	r3, [r7, #28]
 800e1aa:	e037      	b.n	800e21c <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800e1ac:	2300      	movs	r3, #0
 800e1ae:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800e1b0:	f107 0310 	add.w	r3, r7, #16
 800e1b4:	461a      	mov	r2, r3
 800e1b6:	68b9      	ldr	r1, [r7, #8]
 800e1b8:	69b8      	ldr	r0, [r7, #24]
 800e1ba:	f000 fd2f 	bl	800ec1c <xQueueReceiveFromISR>
 800e1be:	4603      	mov	r3, r0
 800e1c0:	2b01      	cmp	r3, #1
 800e1c2:	d003      	beq.n	800e1cc <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800e1c4:	f06f 0302 	mvn.w	r3, #2
 800e1c8:	61fb      	str	r3, [r7, #28]
 800e1ca:	e027      	b.n	800e21c <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800e1cc:	693b      	ldr	r3, [r7, #16]
 800e1ce:	2b00      	cmp	r3, #0
 800e1d0:	d024      	beq.n	800e21c <osMessageQueueGet+0xac>
 800e1d2:	4b15      	ldr	r3, [pc, #84]	; (800e228 <osMessageQueueGet+0xb8>)
 800e1d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e1d8:	601a      	str	r2, [r3, #0]
 800e1da:	f3bf 8f4f 	dsb	sy
 800e1de:	f3bf 8f6f 	isb	sy
 800e1e2:	e01b      	b.n	800e21c <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800e1e4:	69bb      	ldr	r3, [r7, #24]
 800e1e6:	2b00      	cmp	r3, #0
 800e1e8:	d002      	beq.n	800e1f0 <osMessageQueueGet+0x80>
 800e1ea:	68bb      	ldr	r3, [r7, #8]
 800e1ec:	2b00      	cmp	r3, #0
 800e1ee:	d103      	bne.n	800e1f8 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800e1f0:	f06f 0303 	mvn.w	r3, #3
 800e1f4:	61fb      	str	r3, [r7, #28]
 800e1f6:	e011      	b.n	800e21c <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800e1f8:	683a      	ldr	r2, [r7, #0]
 800e1fa:	68b9      	ldr	r1, [r7, #8]
 800e1fc:	69b8      	ldr	r0, [r7, #24]
 800e1fe:	f000 fc2d 	bl	800ea5c <xQueueReceive>
 800e202:	4603      	mov	r3, r0
 800e204:	2b01      	cmp	r3, #1
 800e206:	d009      	beq.n	800e21c <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800e208:	683b      	ldr	r3, [r7, #0]
 800e20a:	2b00      	cmp	r3, #0
 800e20c:	d003      	beq.n	800e216 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800e20e:	f06f 0301 	mvn.w	r3, #1
 800e212:	61fb      	str	r3, [r7, #28]
 800e214:	e002      	b.n	800e21c <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800e216:	f06f 0302 	mvn.w	r3, #2
 800e21a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800e21c:	69fb      	ldr	r3, [r7, #28]
}
 800e21e:	4618      	mov	r0, r3
 800e220:	3720      	adds	r7, #32
 800e222:	46bd      	mov	sp, r7
 800e224:	bd80      	pop	{r7, pc}
 800e226:	bf00      	nop
 800e228:	e000ed04 	.word	0xe000ed04

0800e22c <osMessageQueueGetSpace>:
  }

  return ((uint32_t)count);
}

uint32_t osMessageQueueGetSpace (osMessageQueueId_t mq_id) {
 800e22c:	b580      	push	{r7, lr}
 800e22e:	b08a      	sub	sp, #40	; 0x28
 800e230:	af00      	add	r7, sp, #0
 800e232:	6078      	str	r0, [r7, #4]
  StaticQueue_t *mq = (StaticQueue_t *)mq_id;
 800e234:	687b      	ldr	r3, [r7, #4]
 800e236:	623b      	str	r3, [r7, #32]
  uint32_t space;
  uint32_t isrm;

  if (mq == NULL) {
 800e238:	6a3b      	ldr	r3, [r7, #32]
 800e23a:	2b00      	cmp	r3, #0
 800e23c:	d102      	bne.n	800e244 <osMessageQueueGetSpace+0x18>
    space = 0U;
 800e23e:	2300      	movs	r3, #0
 800e240:	627b      	str	r3, [r7, #36]	; 0x24
 800e242:	e023      	b.n	800e28c <osMessageQueueGetSpace+0x60>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e244:	f3ef 8305 	mrs	r3, IPSR
 800e248:	61bb      	str	r3, [r7, #24]
  return(result);
 800e24a:	69bb      	ldr	r3, [r7, #24]
  }
  else if (IS_IRQ()) {
 800e24c:	2b00      	cmp	r3, #0
 800e24e:	d019      	beq.n	800e284 <osMessageQueueGetSpace+0x58>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800e250:	f3ef 8211 	mrs	r2, BASEPRI
 800e254:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e258:	f383 8811 	msr	BASEPRI, r3
 800e25c:	f3bf 8f6f 	isb	sy
 800e260:	f3bf 8f4f 	dsb	sy
 800e264:	613a      	str	r2, [r7, #16]
 800e266:	60fb      	str	r3, [r7, #12]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800e268:	693b      	ldr	r3, [r7, #16]
    isrm = taskENTER_CRITICAL_FROM_ISR();
 800e26a:	61fb      	str	r3, [r7, #28]

    /* space = pxQueue->uxLength - pxQueue->uxMessagesWaiting; */
    space = mq->uxDummy4[1] - mq->uxDummy4[0];
 800e26c:	6a3b      	ldr	r3, [r7, #32]
 800e26e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e270:	6a3b      	ldr	r3, [r7, #32]
 800e272:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e274:	1ad3      	subs	r3, r2, r3
 800e276:	627b      	str	r3, [r7, #36]	; 0x24
 800e278:	69fb      	ldr	r3, [r7, #28]
 800e27a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800e27c:	697b      	ldr	r3, [r7, #20]
 800e27e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800e282:	e003      	b.n	800e28c <osMessageQueueGetSpace+0x60>

    taskEXIT_CRITICAL_FROM_ISR(isrm);
  }
  else {
    space = (uint32_t)uxQueueSpacesAvailable ((QueueHandle_t)mq);
 800e284:	6a38      	ldr	r0, [r7, #32]
 800e286:	f000 fd49 	bl	800ed1c <uxQueueSpacesAvailable>
 800e28a:	6278      	str	r0, [r7, #36]	; 0x24
  }

  return (space);
 800e28c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800e28e:	4618      	mov	r0, r3
 800e290:	3728      	adds	r7, #40	; 0x28
 800e292:	46bd      	mov	sp, r7
 800e294:	bd80      	pop	{r7, pc}

0800e296 <osMessageQueueReset>:

osStatus_t osMessageQueueReset (osMessageQueueId_t mq_id) {
 800e296:	b580      	push	{r7, lr}
 800e298:	b086      	sub	sp, #24
 800e29a:	af00      	add	r7, sp, #0
 800e29c:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800e29e:	687b      	ldr	r3, [r7, #4]
 800e2a0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e2a2:	f3ef 8305 	mrs	r3, IPSR
 800e2a6:	60fb      	str	r3, [r7, #12]
  return(result);
 800e2a8:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 800e2aa:	2b00      	cmp	r3, #0
 800e2ac:	d003      	beq.n	800e2b6 <osMessageQueueReset+0x20>
    stat = osErrorISR;
 800e2ae:	f06f 0305 	mvn.w	r3, #5
 800e2b2:	617b      	str	r3, [r7, #20]
 800e2b4:	e00c      	b.n	800e2d0 <osMessageQueueReset+0x3a>
  }
  else if (hQueue == NULL) {
 800e2b6:	693b      	ldr	r3, [r7, #16]
 800e2b8:	2b00      	cmp	r3, #0
 800e2ba:	d103      	bne.n	800e2c4 <osMessageQueueReset+0x2e>
    stat = osErrorParameter;
 800e2bc:	f06f 0303 	mvn.w	r3, #3
 800e2c0:	617b      	str	r3, [r7, #20]
 800e2c2:	e005      	b.n	800e2d0 <osMessageQueueReset+0x3a>
  }
  else {
    stat = osOK;
 800e2c4:	2300      	movs	r3, #0
 800e2c6:	617b      	str	r3, [r7, #20]
    (void)xQueueReset (hQueue);
 800e2c8:	2100      	movs	r1, #0
 800e2ca:	6938      	ldr	r0, [r7, #16]
 800e2cc:	f000 f8ee 	bl	800e4ac <xQueueGenericReset>
  }

  return (stat);
 800e2d0:	697b      	ldr	r3, [r7, #20]
}
 800e2d2:	4618      	mov	r0, r3
 800e2d4:	3718      	adds	r7, #24
 800e2d6:	46bd      	mov	sp, r7
 800e2d8:	bd80      	pop	{r7, pc}
	...

0800e2dc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800e2dc:	b480      	push	{r7}
 800e2de:	b085      	sub	sp, #20
 800e2e0:	af00      	add	r7, sp, #0
 800e2e2:	60f8      	str	r0, [r7, #12]
 800e2e4:	60b9      	str	r1, [r7, #8]
 800e2e6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800e2e8:	68fb      	ldr	r3, [r7, #12]
 800e2ea:	4a07      	ldr	r2, [pc, #28]	; (800e308 <vApplicationGetIdleTaskMemory+0x2c>)
 800e2ec:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800e2ee:	68bb      	ldr	r3, [r7, #8]
 800e2f0:	4a06      	ldr	r2, [pc, #24]	; (800e30c <vApplicationGetIdleTaskMemory+0x30>)
 800e2f2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800e2f4:	687b      	ldr	r3, [r7, #4]
 800e2f6:	2280      	movs	r2, #128	; 0x80
 800e2f8:	601a      	str	r2, [r3, #0]
}
 800e2fa:	bf00      	nop
 800e2fc:	3714      	adds	r7, #20
 800e2fe:	46bd      	mov	sp, r7
 800e300:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e304:	4770      	bx	lr
 800e306:	bf00      	nop
 800e308:	200015fc 	.word	0x200015fc
 800e30c:	200016bc 	.word	0x200016bc

0800e310 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800e310:	b480      	push	{r7}
 800e312:	b085      	sub	sp, #20
 800e314:	af00      	add	r7, sp, #0
 800e316:	60f8      	str	r0, [r7, #12]
 800e318:	60b9      	str	r1, [r7, #8]
 800e31a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800e31c:	68fb      	ldr	r3, [r7, #12]
 800e31e:	4a07      	ldr	r2, [pc, #28]	; (800e33c <vApplicationGetTimerTaskMemory+0x2c>)
 800e320:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800e322:	68bb      	ldr	r3, [r7, #8]
 800e324:	4a06      	ldr	r2, [pc, #24]	; (800e340 <vApplicationGetTimerTaskMemory+0x30>)
 800e326:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800e328:	687b      	ldr	r3, [r7, #4]
 800e32a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800e32e:	601a      	str	r2, [r3, #0]
}
 800e330:	bf00      	nop
 800e332:	3714      	adds	r7, #20
 800e334:	46bd      	mov	sp, r7
 800e336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e33a:	4770      	bx	lr
 800e33c:	200018bc 	.word	0x200018bc
 800e340:	2000197c 	.word	0x2000197c

0800e344 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800e344:	b480      	push	{r7}
 800e346:	b083      	sub	sp, #12
 800e348:	af00      	add	r7, sp, #0
 800e34a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e34c:	687b      	ldr	r3, [r7, #4]
 800e34e:	f103 0208 	add.w	r2, r3, #8
 800e352:	687b      	ldr	r3, [r7, #4]
 800e354:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800e356:	687b      	ldr	r3, [r7, #4]
 800e358:	f04f 32ff 	mov.w	r2, #4294967295
 800e35c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e35e:	687b      	ldr	r3, [r7, #4]
 800e360:	f103 0208 	add.w	r2, r3, #8
 800e364:	687b      	ldr	r3, [r7, #4]
 800e366:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e368:	687b      	ldr	r3, [r7, #4]
 800e36a:	f103 0208 	add.w	r2, r3, #8
 800e36e:	687b      	ldr	r3, [r7, #4]
 800e370:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800e372:	687b      	ldr	r3, [r7, #4]
 800e374:	2200      	movs	r2, #0
 800e376:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800e378:	bf00      	nop
 800e37a:	370c      	adds	r7, #12
 800e37c:	46bd      	mov	sp, r7
 800e37e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e382:	4770      	bx	lr

0800e384 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800e384:	b480      	push	{r7}
 800e386:	b083      	sub	sp, #12
 800e388:	af00      	add	r7, sp, #0
 800e38a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800e38c:	687b      	ldr	r3, [r7, #4]
 800e38e:	2200      	movs	r2, #0
 800e390:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800e392:	bf00      	nop
 800e394:	370c      	adds	r7, #12
 800e396:	46bd      	mov	sp, r7
 800e398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e39c:	4770      	bx	lr

0800e39e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800e39e:	b480      	push	{r7}
 800e3a0:	b085      	sub	sp, #20
 800e3a2:	af00      	add	r7, sp, #0
 800e3a4:	6078      	str	r0, [r7, #4]
 800e3a6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800e3a8:	687b      	ldr	r3, [r7, #4]
 800e3aa:	685b      	ldr	r3, [r3, #4]
 800e3ac:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800e3ae:	683b      	ldr	r3, [r7, #0]
 800e3b0:	68fa      	ldr	r2, [r7, #12]
 800e3b2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800e3b4:	68fb      	ldr	r3, [r7, #12]
 800e3b6:	689a      	ldr	r2, [r3, #8]
 800e3b8:	683b      	ldr	r3, [r7, #0]
 800e3ba:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800e3bc:	68fb      	ldr	r3, [r7, #12]
 800e3be:	689b      	ldr	r3, [r3, #8]
 800e3c0:	683a      	ldr	r2, [r7, #0]
 800e3c2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800e3c4:	68fb      	ldr	r3, [r7, #12]
 800e3c6:	683a      	ldr	r2, [r7, #0]
 800e3c8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800e3ca:	683b      	ldr	r3, [r7, #0]
 800e3cc:	687a      	ldr	r2, [r7, #4]
 800e3ce:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800e3d0:	687b      	ldr	r3, [r7, #4]
 800e3d2:	681b      	ldr	r3, [r3, #0]
 800e3d4:	1c5a      	adds	r2, r3, #1
 800e3d6:	687b      	ldr	r3, [r7, #4]
 800e3d8:	601a      	str	r2, [r3, #0]
}
 800e3da:	bf00      	nop
 800e3dc:	3714      	adds	r7, #20
 800e3de:	46bd      	mov	sp, r7
 800e3e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3e4:	4770      	bx	lr

0800e3e6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800e3e6:	b480      	push	{r7}
 800e3e8:	b085      	sub	sp, #20
 800e3ea:	af00      	add	r7, sp, #0
 800e3ec:	6078      	str	r0, [r7, #4]
 800e3ee:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800e3f0:	683b      	ldr	r3, [r7, #0]
 800e3f2:	681b      	ldr	r3, [r3, #0]
 800e3f4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800e3f6:	68bb      	ldr	r3, [r7, #8]
 800e3f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e3fc:	d103      	bne.n	800e406 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800e3fe:	687b      	ldr	r3, [r7, #4]
 800e400:	691b      	ldr	r3, [r3, #16]
 800e402:	60fb      	str	r3, [r7, #12]
 800e404:	e00c      	b.n	800e420 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800e406:	687b      	ldr	r3, [r7, #4]
 800e408:	3308      	adds	r3, #8
 800e40a:	60fb      	str	r3, [r7, #12]
 800e40c:	e002      	b.n	800e414 <vListInsert+0x2e>
 800e40e:	68fb      	ldr	r3, [r7, #12]
 800e410:	685b      	ldr	r3, [r3, #4]
 800e412:	60fb      	str	r3, [r7, #12]
 800e414:	68fb      	ldr	r3, [r7, #12]
 800e416:	685b      	ldr	r3, [r3, #4]
 800e418:	681b      	ldr	r3, [r3, #0]
 800e41a:	68ba      	ldr	r2, [r7, #8]
 800e41c:	429a      	cmp	r2, r3
 800e41e:	d2f6      	bcs.n	800e40e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800e420:	68fb      	ldr	r3, [r7, #12]
 800e422:	685a      	ldr	r2, [r3, #4]
 800e424:	683b      	ldr	r3, [r7, #0]
 800e426:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800e428:	683b      	ldr	r3, [r7, #0]
 800e42a:	685b      	ldr	r3, [r3, #4]
 800e42c:	683a      	ldr	r2, [r7, #0]
 800e42e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800e430:	683b      	ldr	r3, [r7, #0]
 800e432:	68fa      	ldr	r2, [r7, #12]
 800e434:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800e436:	68fb      	ldr	r3, [r7, #12]
 800e438:	683a      	ldr	r2, [r7, #0]
 800e43a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800e43c:	683b      	ldr	r3, [r7, #0]
 800e43e:	687a      	ldr	r2, [r7, #4]
 800e440:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800e442:	687b      	ldr	r3, [r7, #4]
 800e444:	681b      	ldr	r3, [r3, #0]
 800e446:	1c5a      	adds	r2, r3, #1
 800e448:	687b      	ldr	r3, [r7, #4]
 800e44a:	601a      	str	r2, [r3, #0]
}
 800e44c:	bf00      	nop
 800e44e:	3714      	adds	r7, #20
 800e450:	46bd      	mov	sp, r7
 800e452:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e456:	4770      	bx	lr

0800e458 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800e458:	b480      	push	{r7}
 800e45a:	b085      	sub	sp, #20
 800e45c:	af00      	add	r7, sp, #0
 800e45e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	691b      	ldr	r3, [r3, #16]
 800e464:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800e466:	687b      	ldr	r3, [r7, #4]
 800e468:	685b      	ldr	r3, [r3, #4]
 800e46a:	687a      	ldr	r2, [r7, #4]
 800e46c:	6892      	ldr	r2, [r2, #8]
 800e46e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800e470:	687b      	ldr	r3, [r7, #4]
 800e472:	689b      	ldr	r3, [r3, #8]
 800e474:	687a      	ldr	r2, [r7, #4]
 800e476:	6852      	ldr	r2, [r2, #4]
 800e478:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800e47a:	68fb      	ldr	r3, [r7, #12]
 800e47c:	685b      	ldr	r3, [r3, #4]
 800e47e:	687a      	ldr	r2, [r7, #4]
 800e480:	429a      	cmp	r2, r3
 800e482:	d103      	bne.n	800e48c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800e484:	687b      	ldr	r3, [r7, #4]
 800e486:	689a      	ldr	r2, [r3, #8]
 800e488:	68fb      	ldr	r3, [r7, #12]
 800e48a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800e48c:	687b      	ldr	r3, [r7, #4]
 800e48e:	2200      	movs	r2, #0
 800e490:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800e492:	68fb      	ldr	r3, [r7, #12]
 800e494:	681b      	ldr	r3, [r3, #0]
 800e496:	1e5a      	subs	r2, r3, #1
 800e498:	68fb      	ldr	r3, [r7, #12]
 800e49a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800e49c:	68fb      	ldr	r3, [r7, #12]
 800e49e:	681b      	ldr	r3, [r3, #0]
}
 800e4a0:	4618      	mov	r0, r3
 800e4a2:	3714      	adds	r7, #20
 800e4a4:	46bd      	mov	sp, r7
 800e4a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4aa:	4770      	bx	lr

0800e4ac <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800e4ac:	b580      	push	{r7, lr}
 800e4ae:	b084      	sub	sp, #16
 800e4b0:	af00      	add	r7, sp, #0
 800e4b2:	6078      	str	r0, [r7, #4]
 800e4b4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800e4ba:	68fb      	ldr	r3, [r7, #12]
 800e4bc:	2b00      	cmp	r3, #0
 800e4be:	d10a      	bne.n	800e4d6 <xQueueGenericReset+0x2a>
	__asm volatile
 800e4c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4c4:	f383 8811 	msr	BASEPRI, r3
 800e4c8:	f3bf 8f6f 	isb	sy
 800e4cc:	f3bf 8f4f 	dsb	sy
 800e4d0:	60bb      	str	r3, [r7, #8]
}
 800e4d2:	bf00      	nop
 800e4d4:	e7fe      	b.n	800e4d4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800e4d6:	f002 fc55 	bl	8010d84 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e4da:	68fb      	ldr	r3, [r7, #12]
 800e4dc:	681a      	ldr	r2, [r3, #0]
 800e4de:	68fb      	ldr	r3, [r7, #12]
 800e4e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e4e2:	68f9      	ldr	r1, [r7, #12]
 800e4e4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800e4e6:	fb01 f303 	mul.w	r3, r1, r3
 800e4ea:	441a      	add	r2, r3
 800e4ec:	68fb      	ldr	r3, [r7, #12]
 800e4ee:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800e4f0:	68fb      	ldr	r3, [r7, #12]
 800e4f2:	2200      	movs	r2, #0
 800e4f4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800e4f6:	68fb      	ldr	r3, [r7, #12]
 800e4f8:	681a      	ldr	r2, [r3, #0]
 800e4fa:	68fb      	ldr	r3, [r7, #12]
 800e4fc:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e4fe:	68fb      	ldr	r3, [r7, #12]
 800e500:	681a      	ldr	r2, [r3, #0]
 800e502:	68fb      	ldr	r3, [r7, #12]
 800e504:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e506:	3b01      	subs	r3, #1
 800e508:	68f9      	ldr	r1, [r7, #12]
 800e50a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800e50c:	fb01 f303 	mul.w	r3, r1, r3
 800e510:	441a      	add	r2, r3
 800e512:	68fb      	ldr	r3, [r7, #12]
 800e514:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800e516:	68fb      	ldr	r3, [r7, #12]
 800e518:	22ff      	movs	r2, #255	; 0xff
 800e51a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800e51e:	68fb      	ldr	r3, [r7, #12]
 800e520:	22ff      	movs	r2, #255	; 0xff
 800e522:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800e526:	683b      	ldr	r3, [r7, #0]
 800e528:	2b00      	cmp	r3, #0
 800e52a:	d114      	bne.n	800e556 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e52c:	68fb      	ldr	r3, [r7, #12]
 800e52e:	691b      	ldr	r3, [r3, #16]
 800e530:	2b00      	cmp	r3, #0
 800e532:	d01a      	beq.n	800e56a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e534:	68fb      	ldr	r3, [r7, #12]
 800e536:	3310      	adds	r3, #16
 800e538:	4618      	mov	r0, r3
 800e53a:	f001 fb01 	bl	800fb40 <xTaskRemoveFromEventList>
 800e53e:	4603      	mov	r3, r0
 800e540:	2b00      	cmp	r3, #0
 800e542:	d012      	beq.n	800e56a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800e544:	4b0c      	ldr	r3, [pc, #48]	; (800e578 <xQueueGenericReset+0xcc>)
 800e546:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e54a:	601a      	str	r2, [r3, #0]
 800e54c:	f3bf 8f4f 	dsb	sy
 800e550:	f3bf 8f6f 	isb	sy
 800e554:	e009      	b.n	800e56a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800e556:	68fb      	ldr	r3, [r7, #12]
 800e558:	3310      	adds	r3, #16
 800e55a:	4618      	mov	r0, r3
 800e55c:	f7ff fef2 	bl	800e344 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800e560:	68fb      	ldr	r3, [r7, #12]
 800e562:	3324      	adds	r3, #36	; 0x24
 800e564:	4618      	mov	r0, r3
 800e566:	f7ff feed 	bl	800e344 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800e56a:	f002 fc3b 	bl	8010de4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800e56e:	2301      	movs	r3, #1
}
 800e570:	4618      	mov	r0, r3
 800e572:	3710      	adds	r7, #16
 800e574:	46bd      	mov	sp, r7
 800e576:	bd80      	pop	{r7, pc}
 800e578:	e000ed04 	.word	0xe000ed04

0800e57c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800e57c:	b580      	push	{r7, lr}
 800e57e:	b08e      	sub	sp, #56	; 0x38
 800e580:	af02      	add	r7, sp, #8
 800e582:	60f8      	str	r0, [r7, #12]
 800e584:	60b9      	str	r1, [r7, #8]
 800e586:	607a      	str	r2, [r7, #4]
 800e588:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800e58a:	68fb      	ldr	r3, [r7, #12]
 800e58c:	2b00      	cmp	r3, #0
 800e58e:	d10a      	bne.n	800e5a6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800e590:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e594:	f383 8811 	msr	BASEPRI, r3
 800e598:	f3bf 8f6f 	isb	sy
 800e59c:	f3bf 8f4f 	dsb	sy
 800e5a0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800e5a2:	bf00      	nop
 800e5a4:	e7fe      	b.n	800e5a4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800e5a6:	683b      	ldr	r3, [r7, #0]
 800e5a8:	2b00      	cmp	r3, #0
 800e5aa:	d10a      	bne.n	800e5c2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800e5ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5b0:	f383 8811 	msr	BASEPRI, r3
 800e5b4:	f3bf 8f6f 	isb	sy
 800e5b8:	f3bf 8f4f 	dsb	sy
 800e5bc:	627b      	str	r3, [r7, #36]	; 0x24
}
 800e5be:	bf00      	nop
 800e5c0:	e7fe      	b.n	800e5c0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800e5c2:	687b      	ldr	r3, [r7, #4]
 800e5c4:	2b00      	cmp	r3, #0
 800e5c6:	d002      	beq.n	800e5ce <xQueueGenericCreateStatic+0x52>
 800e5c8:	68bb      	ldr	r3, [r7, #8]
 800e5ca:	2b00      	cmp	r3, #0
 800e5cc:	d001      	beq.n	800e5d2 <xQueueGenericCreateStatic+0x56>
 800e5ce:	2301      	movs	r3, #1
 800e5d0:	e000      	b.n	800e5d4 <xQueueGenericCreateStatic+0x58>
 800e5d2:	2300      	movs	r3, #0
 800e5d4:	2b00      	cmp	r3, #0
 800e5d6:	d10a      	bne.n	800e5ee <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800e5d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5dc:	f383 8811 	msr	BASEPRI, r3
 800e5e0:	f3bf 8f6f 	isb	sy
 800e5e4:	f3bf 8f4f 	dsb	sy
 800e5e8:	623b      	str	r3, [r7, #32]
}
 800e5ea:	bf00      	nop
 800e5ec:	e7fe      	b.n	800e5ec <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800e5ee:	687b      	ldr	r3, [r7, #4]
 800e5f0:	2b00      	cmp	r3, #0
 800e5f2:	d102      	bne.n	800e5fa <xQueueGenericCreateStatic+0x7e>
 800e5f4:	68bb      	ldr	r3, [r7, #8]
 800e5f6:	2b00      	cmp	r3, #0
 800e5f8:	d101      	bne.n	800e5fe <xQueueGenericCreateStatic+0x82>
 800e5fa:	2301      	movs	r3, #1
 800e5fc:	e000      	b.n	800e600 <xQueueGenericCreateStatic+0x84>
 800e5fe:	2300      	movs	r3, #0
 800e600:	2b00      	cmp	r3, #0
 800e602:	d10a      	bne.n	800e61a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800e604:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e608:	f383 8811 	msr	BASEPRI, r3
 800e60c:	f3bf 8f6f 	isb	sy
 800e610:	f3bf 8f4f 	dsb	sy
 800e614:	61fb      	str	r3, [r7, #28]
}
 800e616:	bf00      	nop
 800e618:	e7fe      	b.n	800e618 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800e61a:	2350      	movs	r3, #80	; 0x50
 800e61c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800e61e:	697b      	ldr	r3, [r7, #20]
 800e620:	2b50      	cmp	r3, #80	; 0x50
 800e622:	d00a      	beq.n	800e63a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800e624:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e628:	f383 8811 	msr	BASEPRI, r3
 800e62c:	f3bf 8f6f 	isb	sy
 800e630:	f3bf 8f4f 	dsb	sy
 800e634:	61bb      	str	r3, [r7, #24]
}
 800e636:	bf00      	nop
 800e638:	e7fe      	b.n	800e638 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800e63a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800e63c:	683b      	ldr	r3, [r7, #0]
 800e63e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800e640:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e642:	2b00      	cmp	r3, #0
 800e644:	d00d      	beq.n	800e662 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800e646:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e648:	2201      	movs	r2, #1
 800e64a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800e64e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800e652:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e654:	9300      	str	r3, [sp, #0]
 800e656:	4613      	mov	r3, r2
 800e658:	687a      	ldr	r2, [r7, #4]
 800e65a:	68b9      	ldr	r1, [r7, #8]
 800e65c:	68f8      	ldr	r0, [r7, #12]
 800e65e:	f000 f83f 	bl	800e6e0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800e662:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800e664:	4618      	mov	r0, r3
 800e666:	3730      	adds	r7, #48	; 0x30
 800e668:	46bd      	mov	sp, r7
 800e66a:	bd80      	pop	{r7, pc}

0800e66c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800e66c:	b580      	push	{r7, lr}
 800e66e:	b08a      	sub	sp, #40	; 0x28
 800e670:	af02      	add	r7, sp, #8
 800e672:	60f8      	str	r0, [r7, #12]
 800e674:	60b9      	str	r1, [r7, #8]
 800e676:	4613      	mov	r3, r2
 800e678:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800e67a:	68fb      	ldr	r3, [r7, #12]
 800e67c:	2b00      	cmp	r3, #0
 800e67e:	d10a      	bne.n	800e696 <xQueueGenericCreate+0x2a>
	__asm volatile
 800e680:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e684:	f383 8811 	msr	BASEPRI, r3
 800e688:	f3bf 8f6f 	isb	sy
 800e68c:	f3bf 8f4f 	dsb	sy
 800e690:	613b      	str	r3, [r7, #16]
}
 800e692:	bf00      	nop
 800e694:	e7fe      	b.n	800e694 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e696:	68fb      	ldr	r3, [r7, #12]
 800e698:	68ba      	ldr	r2, [r7, #8]
 800e69a:	fb02 f303 	mul.w	r3, r2, r3
 800e69e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800e6a0:	69fb      	ldr	r3, [r7, #28]
 800e6a2:	3350      	adds	r3, #80	; 0x50
 800e6a4:	4618      	mov	r0, r3
 800e6a6:	f002 fc8f 	bl	8010fc8 <pvPortMalloc>
 800e6aa:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800e6ac:	69bb      	ldr	r3, [r7, #24]
 800e6ae:	2b00      	cmp	r3, #0
 800e6b0:	d011      	beq.n	800e6d6 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800e6b2:	69bb      	ldr	r3, [r7, #24]
 800e6b4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e6b6:	697b      	ldr	r3, [r7, #20]
 800e6b8:	3350      	adds	r3, #80	; 0x50
 800e6ba:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800e6bc:	69bb      	ldr	r3, [r7, #24]
 800e6be:	2200      	movs	r2, #0
 800e6c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800e6c4:	79fa      	ldrb	r2, [r7, #7]
 800e6c6:	69bb      	ldr	r3, [r7, #24]
 800e6c8:	9300      	str	r3, [sp, #0]
 800e6ca:	4613      	mov	r3, r2
 800e6cc:	697a      	ldr	r2, [r7, #20]
 800e6ce:	68b9      	ldr	r1, [r7, #8]
 800e6d0:	68f8      	ldr	r0, [r7, #12]
 800e6d2:	f000 f805 	bl	800e6e0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800e6d6:	69bb      	ldr	r3, [r7, #24]
	}
 800e6d8:	4618      	mov	r0, r3
 800e6da:	3720      	adds	r7, #32
 800e6dc:	46bd      	mov	sp, r7
 800e6de:	bd80      	pop	{r7, pc}

0800e6e0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800e6e0:	b580      	push	{r7, lr}
 800e6e2:	b084      	sub	sp, #16
 800e6e4:	af00      	add	r7, sp, #0
 800e6e6:	60f8      	str	r0, [r7, #12]
 800e6e8:	60b9      	str	r1, [r7, #8]
 800e6ea:	607a      	str	r2, [r7, #4]
 800e6ec:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800e6ee:	68bb      	ldr	r3, [r7, #8]
 800e6f0:	2b00      	cmp	r3, #0
 800e6f2:	d103      	bne.n	800e6fc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800e6f4:	69bb      	ldr	r3, [r7, #24]
 800e6f6:	69ba      	ldr	r2, [r7, #24]
 800e6f8:	601a      	str	r2, [r3, #0]
 800e6fa:	e002      	b.n	800e702 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800e6fc:	69bb      	ldr	r3, [r7, #24]
 800e6fe:	687a      	ldr	r2, [r7, #4]
 800e700:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800e702:	69bb      	ldr	r3, [r7, #24]
 800e704:	68fa      	ldr	r2, [r7, #12]
 800e706:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800e708:	69bb      	ldr	r3, [r7, #24]
 800e70a:	68ba      	ldr	r2, [r7, #8]
 800e70c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800e70e:	2101      	movs	r1, #1
 800e710:	69b8      	ldr	r0, [r7, #24]
 800e712:	f7ff fecb 	bl	800e4ac <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800e716:	69bb      	ldr	r3, [r7, #24]
 800e718:	78fa      	ldrb	r2, [r7, #3]
 800e71a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800e71e:	bf00      	nop
 800e720:	3710      	adds	r7, #16
 800e722:	46bd      	mov	sp, r7
 800e724:	bd80      	pop	{r7, pc}
	...

0800e728 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800e728:	b580      	push	{r7, lr}
 800e72a:	b08e      	sub	sp, #56	; 0x38
 800e72c:	af00      	add	r7, sp, #0
 800e72e:	60f8      	str	r0, [r7, #12]
 800e730:	60b9      	str	r1, [r7, #8]
 800e732:	607a      	str	r2, [r7, #4]
 800e734:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800e736:	2300      	movs	r3, #0
 800e738:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e73a:	68fb      	ldr	r3, [r7, #12]
 800e73c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800e73e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e740:	2b00      	cmp	r3, #0
 800e742:	d10a      	bne.n	800e75a <xQueueGenericSend+0x32>
	__asm volatile
 800e744:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e748:	f383 8811 	msr	BASEPRI, r3
 800e74c:	f3bf 8f6f 	isb	sy
 800e750:	f3bf 8f4f 	dsb	sy
 800e754:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800e756:	bf00      	nop
 800e758:	e7fe      	b.n	800e758 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e75a:	68bb      	ldr	r3, [r7, #8]
 800e75c:	2b00      	cmp	r3, #0
 800e75e:	d103      	bne.n	800e768 <xQueueGenericSend+0x40>
 800e760:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e764:	2b00      	cmp	r3, #0
 800e766:	d101      	bne.n	800e76c <xQueueGenericSend+0x44>
 800e768:	2301      	movs	r3, #1
 800e76a:	e000      	b.n	800e76e <xQueueGenericSend+0x46>
 800e76c:	2300      	movs	r3, #0
 800e76e:	2b00      	cmp	r3, #0
 800e770:	d10a      	bne.n	800e788 <xQueueGenericSend+0x60>
	__asm volatile
 800e772:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e776:	f383 8811 	msr	BASEPRI, r3
 800e77a:	f3bf 8f6f 	isb	sy
 800e77e:	f3bf 8f4f 	dsb	sy
 800e782:	627b      	str	r3, [r7, #36]	; 0x24
}
 800e784:	bf00      	nop
 800e786:	e7fe      	b.n	800e786 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800e788:	683b      	ldr	r3, [r7, #0]
 800e78a:	2b02      	cmp	r3, #2
 800e78c:	d103      	bne.n	800e796 <xQueueGenericSend+0x6e>
 800e78e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e790:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e792:	2b01      	cmp	r3, #1
 800e794:	d101      	bne.n	800e79a <xQueueGenericSend+0x72>
 800e796:	2301      	movs	r3, #1
 800e798:	e000      	b.n	800e79c <xQueueGenericSend+0x74>
 800e79a:	2300      	movs	r3, #0
 800e79c:	2b00      	cmp	r3, #0
 800e79e:	d10a      	bne.n	800e7b6 <xQueueGenericSend+0x8e>
	__asm volatile
 800e7a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7a4:	f383 8811 	msr	BASEPRI, r3
 800e7a8:	f3bf 8f6f 	isb	sy
 800e7ac:	f3bf 8f4f 	dsb	sy
 800e7b0:	623b      	str	r3, [r7, #32]
}
 800e7b2:	bf00      	nop
 800e7b4:	e7fe      	b.n	800e7b4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e7b6:	f001 fb85 	bl	800fec4 <xTaskGetSchedulerState>
 800e7ba:	4603      	mov	r3, r0
 800e7bc:	2b00      	cmp	r3, #0
 800e7be:	d102      	bne.n	800e7c6 <xQueueGenericSend+0x9e>
 800e7c0:	687b      	ldr	r3, [r7, #4]
 800e7c2:	2b00      	cmp	r3, #0
 800e7c4:	d101      	bne.n	800e7ca <xQueueGenericSend+0xa2>
 800e7c6:	2301      	movs	r3, #1
 800e7c8:	e000      	b.n	800e7cc <xQueueGenericSend+0xa4>
 800e7ca:	2300      	movs	r3, #0
 800e7cc:	2b00      	cmp	r3, #0
 800e7ce:	d10a      	bne.n	800e7e6 <xQueueGenericSend+0xbe>
	__asm volatile
 800e7d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7d4:	f383 8811 	msr	BASEPRI, r3
 800e7d8:	f3bf 8f6f 	isb	sy
 800e7dc:	f3bf 8f4f 	dsb	sy
 800e7e0:	61fb      	str	r3, [r7, #28]
}
 800e7e2:	bf00      	nop
 800e7e4:	e7fe      	b.n	800e7e4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e7e6:	f002 facd 	bl	8010d84 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e7ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e7ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e7f2:	429a      	cmp	r2, r3
 800e7f4:	d302      	bcc.n	800e7fc <xQueueGenericSend+0xd4>
 800e7f6:	683b      	ldr	r3, [r7, #0]
 800e7f8:	2b02      	cmp	r3, #2
 800e7fa:	d129      	bne.n	800e850 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e7fc:	683a      	ldr	r2, [r7, #0]
 800e7fe:	68b9      	ldr	r1, [r7, #8]
 800e800:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e802:	f000 faae 	bl	800ed62 <prvCopyDataToQueue>
 800e806:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e808:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e80a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e80c:	2b00      	cmp	r3, #0
 800e80e:	d010      	beq.n	800e832 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e810:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e812:	3324      	adds	r3, #36	; 0x24
 800e814:	4618      	mov	r0, r3
 800e816:	f001 f993 	bl	800fb40 <xTaskRemoveFromEventList>
 800e81a:	4603      	mov	r3, r0
 800e81c:	2b00      	cmp	r3, #0
 800e81e:	d013      	beq.n	800e848 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800e820:	4b3f      	ldr	r3, [pc, #252]	; (800e920 <xQueueGenericSend+0x1f8>)
 800e822:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e826:	601a      	str	r2, [r3, #0]
 800e828:	f3bf 8f4f 	dsb	sy
 800e82c:	f3bf 8f6f 	isb	sy
 800e830:	e00a      	b.n	800e848 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800e832:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e834:	2b00      	cmp	r3, #0
 800e836:	d007      	beq.n	800e848 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800e838:	4b39      	ldr	r3, [pc, #228]	; (800e920 <xQueueGenericSend+0x1f8>)
 800e83a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e83e:	601a      	str	r2, [r3, #0]
 800e840:	f3bf 8f4f 	dsb	sy
 800e844:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800e848:	f002 facc 	bl	8010de4 <vPortExitCritical>
				return pdPASS;
 800e84c:	2301      	movs	r3, #1
 800e84e:	e063      	b.n	800e918 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e850:	687b      	ldr	r3, [r7, #4]
 800e852:	2b00      	cmp	r3, #0
 800e854:	d103      	bne.n	800e85e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800e856:	f002 fac5 	bl	8010de4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800e85a:	2300      	movs	r3, #0
 800e85c:	e05c      	b.n	800e918 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e85e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e860:	2b00      	cmp	r3, #0
 800e862:	d106      	bne.n	800e872 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e864:	f107 0314 	add.w	r3, r7, #20
 800e868:	4618      	mov	r0, r3
 800e86a:	f001 f9cd 	bl	800fc08 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e86e:	2301      	movs	r3, #1
 800e870:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e872:	f002 fab7 	bl	8010de4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e876:	f000 ff1d 	bl	800f6b4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e87a:	f002 fa83 	bl	8010d84 <vPortEnterCritical>
 800e87e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e880:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e884:	b25b      	sxtb	r3, r3
 800e886:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e88a:	d103      	bne.n	800e894 <xQueueGenericSend+0x16c>
 800e88c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e88e:	2200      	movs	r2, #0
 800e890:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e894:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e896:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e89a:	b25b      	sxtb	r3, r3
 800e89c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e8a0:	d103      	bne.n	800e8aa <xQueueGenericSend+0x182>
 800e8a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e8a4:	2200      	movs	r2, #0
 800e8a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e8aa:	f002 fa9b 	bl	8010de4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e8ae:	1d3a      	adds	r2, r7, #4
 800e8b0:	f107 0314 	add.w	r3, r7, #20
 800e8b4:	4611      	mov	r1, r2
 800e8b6:	4618      	mov	r0, r3
 800e8b8:	f001 f9bc 	bl	800fc34 <xTaskCheckForTimeOut>
 800e8bc:	4603      	mov	r3, r0
 800e8be:	2b00      	cmp	r3, #0
 800e8c0:	d124      	bne.n	800e90c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800e8c2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e8c4:	f000 fb45 	bl	800ef52 <prvIsQueueFull>
 800e8c8:	4603      	mov	r3, r0
 800e8ca:	2b00      	cmp	r3, #0
 800e8cc:	d018      	beq.n	800e900 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800e8ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e8d0:	3310      	adds	r3, #16
 800e8d2:	687a      	ldr	r2, [r7, #4]
 800e8d4:	4611      	mov	r1, r2
 800e8d6:	4618      	mov	r0, r3
 800e8d8:	f001 f8e2 	bl	800faa0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800e8dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e8de:	f000 fad0 	bl	800ee82 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800e8e2:	f000 fef5 	bl	800f6d0 <xTaskResumeAll>
 800e8e6:	4603      	mov	r3, r0
 800e8e8:	2b00      	cmp	r3, #0
 800e8ea:	f47f af7c 	bne.w	800e7e6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800e8ee:	4b0c      	ldr	r3, [pc, #48]	; (800e920 <xQueueGenericSend+0x1f8>)
 800e8f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e8f4:	601a      	str	r2, [r3, #0]
 800e8f6:	f3bf 8f4f 	dsb	sy
 800e8fa:	f3bf 8f6f 	isb	sy
 800e8fe:	e772      	b.n	800e7e6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800e900:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e902:	f000 fabe 	bl	800ee82 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e906:	f000 fee3 	bl	800f6d0 <xTaskResumeAll>
 800e90a:	e76c      	b.n	800e7e6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800e90c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e90e:	f000 fab8 	bl	800ee82 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e912:	f000 fedd 	bl	800f6d0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800e916:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800e918:	4618      	mov	r0, r3
 800e91a:	3738      	adds	r7, #56	; 0x38
 800e91c:	46bd      	mov	sp, r7
 800e91e:	bd80      	pop	{r7, pc}
 800e920:	e000ed04 	.word	0xe000ed04

0800e924 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800e924:	b580      	push	{r7, lr}
 800e926:	b090      	sub	sp, #64	; 0x40
 800e928:	af00      	add	r7, sp, #0
 800e92a:	60f8      	str	r0, [r7, #12]
 800e92c:	60b9      	str	r1, [r7, #8]
 800e92e:	607a      	str	r2, [r7, #4]
 800e930:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800e932:	68fb      	ldr	r3, [r7, #12]
 800e934:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800e936:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e938:	2b00      	cmp	r3, #0
 800e93a:	d10a      	bne.n	800e952 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800e93c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e940:	f383 8811 	msr	BASEPRI, r3
 800e944:	f3bf 8f6f 	isb	sy
 800e948:	f3bf 8f4f 	dsb	sy
 800e94c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800e94e:	bf00      	nop
 800e950:	e7fe      	b.n	800e950 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e952:	68bb      	ldr	r3, [r7, #8]
 800e954:	2b00      	cmp	r3, #0
 800e956:	d103      	bne.n	800e960 <xQueueGenericSendFromISR+0x3c>
 800e958:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e95a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e95c:	2b00      	cmp	r3, #0
 800e95e:	d101      	bne.n	800e964 <xQueueGenericSendFromISR+0x40>
 800e960:	2301      	movs	r3, #1
 800e962:	e000      	b.n	800e966 <xQueueGenericSendFromISR+0x42>
 800e964:	2300      	movs	r3, #0
 800e966:	2b00      	cmp	r3, #0
 800e968:	d10a      	bne.n	800e980 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800e96a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e96e:	f383 8811 	msr	BASEPRI, r3
 800e972:	f3bf 8f6f 	isb	sy
 800e976:	f3bf 8f4f 	dsb	sy
 800e97a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800e97c:	bf00      	nop
 800e97e:	e7fe      	b.n	800e97e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800e980:	683b      	ldr	r3, [r7, #0]
 800e982:	2b02      	cmp	r3, #2
 800e984:	d103      	bne.n	800e98e <xQueueGenericSendFromISR+0x6a>
 800e986:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e988:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e98a:	2b01      	cmp	r3, #1
 800e98c:	d101      	bne.n	800e992 <xQueueGenericSendFromISR+0x6e>
 800e98e:	2301      	movs	r3, #1
 800e990:	e000      	b.n	800e994 <xQueueGenericSendFromISR+0x70>
 800e992:	2300      	movs	r3, #0
 800e994:	2b00      	cmp	r3, #0
 800e996:	d10a      	bne.n	800e9ae <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800e998:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e99c:	f383 8811 	msr	BASEPRI, r3
 800e9a0:	f3bf 8f6f 	isb	sy
 800e9a4:	f3bf 8f4f 	dsb	sy
 800e9a8:	623b      	str	r3, [r7, #32]
}
 800e9aa:	bf00      	nop
 800e9ac:	e7fe      	b.n	800e9ac <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e9ae:	f002 facb 	bl	8010f48 <vPortValidateInterruptPriority>
	__asm volatile
 800e9b2:	f3ef 8211 	mrs	r2, BASEPRI
 800e9b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9ba:	f383 8811 	msr	BASEPRI, r3
 800e9be:	f3bf 8f6f 	isb	sy
 800e9c2:	f3bf 8f4f 	dsb	sy
 800e9c6:	61fa      	str	r2, [r7, #28]
 800e9c8:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 800e9ca:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e9cc:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e9ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e9d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e9d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e9d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e9d6:	429a      	cmp	r2, r3
 800e9d8:	d302      	bcc.n	800e9e0 <xQueueGenericSendFromISR+0xbc>
 800e9da:	683b      	ldr	r3, [r7, #0]
 800e9dc:	2b02      	cmp	r3, #2
 800e9de:	d12f      	bne.n	800ea40 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800e9e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e9e2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e9e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e9ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e9ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e9ee:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e9f0:	683a      	ldr	r2, [r7, #0]
 800e9f2:	68b9      	ldr	r1, [r7, #8]
 800e9f4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e9f6:	f000 f9b4 	bl	800ed62 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800e9fa:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800e9fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ea02:	d112      	bne.n	800ea2a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ea04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea08:	2b00      	cmp	r3, #0
 800ea0a:	d016      	beq.n	800ea3a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ea0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea0e:	3324      	adds	r3, #36	; 0x24
 800ea10:	4618      	mov	r0, r3
 800ea12:	f001 f895 	bl	800fb40 <xTaskRemoveFromEventList>
 800ea16:	4603      	mov	r3, r0
 800ea18:	2b00      	cmp	r3, #0
 800ea1a:	d00e      	beq.n	800ea3a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800ea1c:	687b      	ldr	r3, [r7, #4]
 800ea1e:	2b00      	cmp	r3, #0
 800ea20:	d00b      	beq.n	800ea3a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800ea22:	687b      	ldr	r3, [r7, #4]
 800ea24:	2201      	movs	r2, #1
 800ea26:	601a      	str	r2, [r3, #0]
 800ea28:	e007      	b.n	800ea3a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800ea2a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800ea2e:	3301      	adds	r3, #1
 800ea30:	b2db      	uxtb	r3, r3
 800ea32:	b25a      	sxtb	r2, r3
 800ea34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea36:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800ea3a:	2301      	movs	r3, #1
 800ea3c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800ea3e:	e001      	b.n	800ea44 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800ea40:	2300      	movs	r3, #0
 800ea42:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ea44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ea46:	617b      	str	r3, [r7, #20]
	__asm volatile
 800ea48:	697b      	ldr	r3, [r7, #20]
 800ea4a:	f383 8811 	msr	BASEPRI, r3
}
 800ea4e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ea50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800ea52:	4618      	mov	r0, r3
 800ea54:	3740      	adds	r7, #64	; 0x40
 800ea56:	46bd      	mov	sp, r7
 800ea58:	bd80      	pop	{r7, pc}
	...

0800ea5c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800ea5c:	b580      	push	{r7, lr}
 800ea5e:	b08c      	sub	sp, #48	; 0x30
 800ea60:	af00      	add	r7, sp, #0
 800ea62:	60f8      	str	r0, [r7, #12]
 800ea64:	60b9      	str	r1, [r7, #8]
 800ea66:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800ea68:	2300      	movs	r3, #0
 800ea6a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ea6c:	68fb      	ldr	r3, [r7, #12]
 800ea6e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800ea70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea72:	2b00      	cmp	r3, #0
 800ea74:	d10a      	bne.n	800ea8c <xQueueReceive+0x30>
	__asm volatile
 800ea76:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea7a:	f383 8811 	msr	BASEPRI, r3
 800ea7e:	f3bf 8f6f 	isb	sy
 800ea82:	f3bf 8f4f 	dsb	sy
 800ea86:	623b      	str	r3, [r7, #32]
}
 800ea88:	bf00      	nop
 800ea8a:	e7fe      	b.n	800ea8a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ea8c:	68bb      	ldr	r3, [r7, #8]
 800ea8e:	2b00      	cmp	r3, #0
 800ea90:	d103      	bne.n	800ea9a <xQueueReceive+0x3e>
 800ea92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ea96:	2b00      	cmp	r3, #0
 800ea98:	d101      	bne.n	800ea9e <xQueueReceive+0x42>
 800ea9a:	2301      	movs	r3, #1
 800ea9c:	e000      	b.n	800eaa0 <xQueueReceive+0x44>
 800ea9e:	2300      	movs	r3, #0
 800eaa0:	2b00      	cmp	r3, #0
 800eaa2:	d10a      	bne.n	800eaba <xQueueReceive+0x5e>
	__asm volatile
 800eaa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eaa8:	f383 8811 	msr	BASEPRI, r3
 800eaac:	f3bf 8f6f 	isb	sy
 800eab0:	f3bf 8f4f 	dsb	sy
 800eab4:	61fb      	str	r3, [r7, #28]
}
 800eab6:	bf00      	nop
 800eab8:	e7fe      	b.n	800eab8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800eaba:	f001 fa03 	bl	800fec4 <xTaskGetSchedulerState>
 800eabe:	4603      	mov	r3, r0
 800eac0:	2b00      	cmp	r3, #0
 800eac2:	d102      	bne.n	800eaca <xQueueReceive+0x6e>
 800eac4:	687b      	ldr	r3, [r7, #4]
 800eac6:	2b00      	cmp	r3, #0
 800eac8:	d101      	bne.n	800eace <xQueueReceive+0x72>
 800eaca:	2301      	movs	r3, #1
 800eacc:	e000      	b.n	800ead0 <xQueueReceive+0x74>
 800eace:	2300      	movs	r3, #0
 800ead0:	2b00      	cmp	r3, #0
 800ead2:	d10a      	bne.n	800eaea <xQueueReceive+0x8e>
	__asm volatile
 800ead4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ead8:	f383 8811 	msr	BASEPRI, r3
 800eadc:	f3bf 8f6f 	isb	sy
 800eae0:	f3bf 8f4f 	dsb	sy
 800eae4:	61bb      	str	r3, [r7, #24]
}
 800eae6:	bf00      	nop
 800eae8:	e7fe      	b.n	800eae8 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800eaea:	f002 f94b 	bl	8010d84 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800eaee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eaf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eaf2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800eaf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eaf6:	2b00      	cmp	r3, #0
 800eaf8:	d01f      	beq.n	800eb3a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800eafa:	68b9      	ldr	r1, [r7, #8]
 800eafc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800eafe:	f000 f99a 	bl	800ee36 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800eb02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb04:	1e5a      	subs	r2, r3, #1
 800eb06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb08:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800eb0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb0c:	691b      	ldr	r3, [r3, #16]
 800eb0e:	2b00      	cmp	r3, #0
 800eb10:	d00f      	beq.n	800eb32 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800eb12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb14:	3310      	adds	r3, #16
 800eb16:	4618      	mov	r0, r3
 800eb18:	f001 f812 	bl	800fb40 <xTaskRemoveFromEventList>
 800eb1c:	4603      	mov	r3, r0
 800eb1e:	2b00      	cmp	r3, #0
 800eb20:	d007      	beq.n	800eb32 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800eb22:	4b3d      	ldr	r3, [pc, #244]	; (800ec18 <xQueueReceive+0x1bc>)
 800eb24:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800eb28:	601a      	str	r2, [r3, #0]
 800eb2a:	f3bf 8f4f 	dsb	sy
 800eb2e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800eb32:	f002 f957 	bl	8010de4 <vPortExitCritical>
				return pdPASS;
 800eb36:	2301      	movs	r3, #1
 800eb38:	e069      	b.n	800ec0e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800eb3a:	687b      	ldr	r3, [r7, #4]
 800eb3c:	2b00      	cmp	r3, #0
 800eb3e:	d103      	bne.n	800eb48 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800eb40:	f002 f950 	bl	8010de4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800eb44:	2300      	movs	r3, #0
 800eb46:	e062      	b.n	800ec0e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800eb48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb4a:	2b00      	cmp	r3, #0
 800eb4c:	d106      	bne.n	800eb5c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800eb4e:	f107 0310 	add.w	r3, r7, #16
 800eb52:	4618      	mov	r0, r3
 800eb54:	f001 f858 	bl	800fc08 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800eb58:	2301      	movs	r3, #1
 800eb5a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800eb5c:	f002 f942 	bl	8010de4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800eb60:	f000 fda8 	bl	800f6b4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800eb64:	f002 f90e 	bl	8010d84 <vPortEnterCritical>
 800eb68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb6a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800eb6e:	b25b      	sxtb	r3, r3
 800eb70:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eb74:	d103      	bne.n	800eb7e <xQueueReceive+0x122>
 800eb76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb78:	2200      	movs	r2, #0
 800eb7a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800eb7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb80:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800eb84:	b25b      	sxtb	r3, r3
 800eb86:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eb8a:	d103      	bne.n	800eb94 <xQueueReceive+0x138>
 800eb8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb8e:	2200      	movs	r2, #0
 800eb90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800eb94:	f002 f926 	bl	8010de4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800eb98:	1d3a      	adds	r2, r7, #4
 800eb9a:	f107 0310 	add.w	r3, r7, #16
 800eb9e:	4611      	mov	r1, r2
 800eba0:	4618      	mov	r0, r3
 800eba2:	f001 f847 	bl	800fc34 <xTaskCheckForTimeOut>
 800eba6:	4603      	mov	r3, r0
 800eba8:	2b00      	cmp	r3, #0
 800ebaa:	d123      	bne.n	800ebf4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ebac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ebae:	f000 f9ba 	bl	800ef26 <prvIsQueueEmpty>
 800ebb2:	4603      	mov	r3, r0
 800ebb4:	2b00      	cmp	r3, #0
 800ebb6:	d017      	beq.n	800ebe8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ebb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebba:	3324      	adds	r3, #36	; 0x24
 800ebbc:	687a      	ldr	r2, [r7, #4]
 800ebbe:	4611      	mov	r1, r2
 800ebc0:	4618      	mov	r0, r3
 800ebc2:	f000 ff6d 	bl	800faa0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ebc6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ebc8:	f000 f95b 	bl	800ee82 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ebcc:	f000 fd80 	bl	800f6d0 <xTaskResumeAll>
 800ebd0:	4603      	mov	r3, r0
 800ebd2:	2b00      	cmp	r3, #0
 800ebd4:	d189      	bne.n	800eaea <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800ebd6:	4b10      	ldr	r3, [pc, #64]	; (800ec18 <xQueueReceive+0x1bc>)
 800ebd8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ebdc:	601a      	str	r2, [r3, #0]
 800ebde:	f3bf 8f4f 	dsb	sy
 800ebe2:	f3bf 8f6f 	isb	sy
 800ebe6:	e780      	b.n	800eaea <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800ebe8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ebea:	f000 f94a 	bl	800ee82 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ebee:	f000 fd6f 	bl	800f6d0 <xTaskResumeAll>
 800ebf2:	e77a      	b.n	800eaea <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800ebf4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ebf6:	f000 f944 	bl	800ee82 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ebfa:	f000 fd69 	bl	800f6d0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ebfe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ec00:	f000 f991 	bl	800ef26 <prvIsQueueEmpty>
 800ec04:	4603      	mov	r3, r0
 800ec06:	2b00      	cmp	r3, #0
 800ec08:	f43f af6f 	beq.w	800eaea <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ec0c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800ec0e:	4618      	mov	r0, r3
 800ec10:	3730      	adds	r7, #48	; 0x30
 800ec12:	46bd      	mov	sp, r7
 800ec14:	bd80      	pop	{r7, pc}
 800ec16:	bf00      	nop
 800ec18:	e000ed04 	.word	0xe000ed04

0800ec1c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800ec1c:	b580      	push	{r7, lr}
 800ec1e:	b08e      	sub	sp, #56	; 0x38
 800ec20:	af00      	add	r7, sp, #0
 800ec22:	60f8      	str	r0, [r7, #12]
 800ec24:	60b9      	str	r1, [r7, #8]
 800ec26:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800ec28:	68fb      	ldr	r3, [r7, #12]
 800ec2a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800ec2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec2e:	2b00      	cmp	r3, #0
 800ec30:	d10a      	bne.n	800ec48 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800ec32:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec36:	f383 8811 	msr	BASEPRI, r3
 800ec3a:	f3bf 8f6f 	isb	sy
 800ec3e:	f3bf 8f4f 	dsb	sy
 800ec42:	623b      	str	r3, [r7, #32]
}
 800ec44:	bf00      	nop
 800ec46:	e7fe      	b.n	800ec46 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ec48:	68bb      	ldr	r3, [r7, #8]
 800ec4a:	2b00      	cmp	r3, #0
 800ec4c:	d103      	bne.n	800ec56 <xQueueReceiveFromISR+0x3a>
 800ec4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ec52:	2b00      	cmp	r3, #0
 800ec54:	d101      	bne.n	800ec5a <xQueueReceiveFromISR+0x3e>
 800ec56:	2301      	movs	r3, #1
 800ec58:	e000      	b.n	800ec5c <xQueueReceiveFromISR+0x40>
 800ec5a:	2300      	movs	r3, #0
 800ec5c:	2b00      	cmp	r3, #0
 800ec5e:	d10a      	bne.n	800ec76 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800ec60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec64:	f383 8811 	msr	BASEPRI, r3
 800ec68:	f3bf 8f6f 	isb	sy
 800ec6c:	f3bf 8f4f 	dsb	sy
 800ec70:	61fb      	str	r3, [r7, #28]
}
 800ec72:	bf00      	nop
 800ec74:	e7fe      	b.n	800ec74 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ec76:	f002 f967 	bl	8010f48 <vPortValidateInterruptPriority>
	__asm volatile
 800ec7a:	f3ef 8211 	mrs	r2, BASEPRI
 800ec7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec82:	f383 8811 	msr	BASEPRI, r3
 800ec86:	f3bf 8f6f 	isb	sy
 800ec8a:	f3bf 8f4f 	dsb	sy
 800ec8e:	61ba      	str	r2, [r7, #24]
 800ec90:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800ec92:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ec94:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ec96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ec9a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ec9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec9e:	2b00      	cmp	r3, #0
 800eca0:	d02f      	beq.n	800ed02 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800eca2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eca4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800eca8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ecac:	68b9      	ldr	r1, [r7, #8]
 800ecae:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ecb0:	f000 f8c1 	bl	800ee36 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ecb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ecb6:	1e5a      	subs	r2, r3, #1
 800ecb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ecba:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800ecbc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ecc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ecc4:	d112      	bne.n	800ecec <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ecc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ecc8:	691b      	ldr	r3, [r3, #16]
 800ecca:	2b00      	cmp	r3, #0
 800eccc:	d016      	beq.n	800ecfc <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ecce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ecd0:	3310      	adds	r3, #16
 800ecd2:	4618      	mov	r0, r3
 800ecd4:	f000 ff34 	bl	800fb40 <xTaskRemoveFromEventList>
 800ecd8:	4603      	mov	r3, r0
 800ecda:	2b00      	cmp	r3, #0
 800ecdc:	d00e      	beq.n	800ecfc <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800ecde:	687b      	ldr	r3, [r7, #4]
 800ece0:	2b00      	cmp	r3, #0
 800ece2:	d00b      	beq.n	800ecfc <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800ece4:	687b      	ldr	r3, [r7, #4]
 800ece6:	2201      	movs	r2, #1
 800ece8:	601a      	str	r2, [r3, #0]
 800ecea:	e007      	b.n	800ecfc <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800ecec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ecf0:	3301      	adds	r3, #1
 800ecf2:	b2db      	uxtb	r3, r3
 800ecf4:	b25a      	sxtb	r2, r3
 800ecf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ecf8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800ecfc:	2301      	movs	r3, #1
 800ecfe:	637b      	str	r3, [r7, #52]	; 0x34
 800ed00:	e001      	b.n	800ed06 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800ed02:	2300      	movs	r3, #0
 800ed04:	637b      	str	r3, [r7, #52]	; 0x34
 800ed06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed08:	613b      	str	r3, [r7, #16]
	__asm volatile
 800ed0a:	693b      	ldr	r3, [r7, #16]
 800ed0c:	f383 8811 	msr	BASEPRI, r3
}
 800ed10:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ed12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800ed14:	4618      	mov	r0, r3
 800ed16:	3738      	adds	r7, #56	; 0x38
 800ed18:	46bd      	mov	sp, r7
 800ed1a:	bd80      	pop	{r7, pc}

0800ed1c <uxQueueSpacesAvailable>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueSpacesAvailable( const QueueHandle_t xQueue )
{
 800ed1c:	b580      	push	{r7, lr}
 800ed1e:	b086      	sub	sp, #24
 800ed20:	af00      	add	r7, sp, #0
 800ed22:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 800ed24:	687b      	ldr	r3, [r7, #4]
 800ed26:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 800ed28:	697b      	ldr	r3, [r7, #20]
 800ed2a:	2b00      	cmp	r3, #0
 800ed2c:	d10a      	bne.n	800ed44 <uxQueueSpacesAvailable+0x28>
	__asm volatile
 800ed2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed32:	f383 8811 	msr	BASEPRI, r3
 800ed36:	f3bf 8f6f 	isb	sy
 800ed3a:	f3bf 8f4f 	dsb	sy
 800ed3e:	60fb      	str	r3, [r7, #12]
}
 800ed40:	bf00      	nop
 800ed42:	e7fe      	b.n	800ed42 <uxQueueSpacesAvailable+0x26>

	taskENTER_CRITICAL();
 800ed44:	f002 f81e 	bl	8010d84 <vPortEnterCritical>
	{
		uxReturn = pxQueue->uxLength - pxQueue->uxMessagesWaiting;
 800ed48:	697b      	ldr	r3, [r7, #20]
 800ed4a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ed4c:	697b      	ldr	r3, [r7, #20]
 800ed4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ed50:	1ad3      	subs	r3, r2, r3
 800ed52:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 800ed54:	f002 f846 	bl	8010de4 <vPortExitCritical>

	return uxReturn;
 800ed58:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800ed5a:	4618      	mov	r0, r3
 800ed5c:	3718      	adds	r7, #24
 800ed5e:	46bd      	mov	sp, r7
 800ed60:	bd80      	pop	{r7, pc}

0800ed62 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800ed62:	b580      	push	{r7, lr}
 800ed64:	b086      	sub	sp, #24
 800ed66:	af00      	add	r7, sp, #0
 800ed68:	60f8      	str	r0, [r7, #12]
 800ed6a:	60b9      	str	r1, [r7, #8]
 800ed6c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800ed6e:	2300      	movs	r3, #0
 800ed70:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ed72:	68fb      	ldr	r3, [r7, #12]
 800ed74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ed76:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800ed78:	68fb      	ldr	r3, [r7, #12]
 800ed7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ed7c:	2b00      	cmp	r3, #0
 800ed7e:	d10d      	bne.n	800ed9c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ed80:	68fb      	ldr	r3, [r7, #12]
 800ed82:	681b      	ldr	r3, [r3, #0]
 800ed84:	2b00      	cmp	r3, #0
 800ed86:	d14d      	bne.n	800ee24 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ed88:	68fb      	ldr	r3, [r7, #12]
 800ed8a:	689b      	ldr	r3, [r3, #8]
 800ed8c:	4618      	mov	r0, r3
 800ed8e:	f001 f8b7 	bl	800ff00 <xTaskPriorityDisinherit>
 800ed92:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800ed94:	68fb      	ldr	r3, [r7, #12]
 800ed96:	2200      	movs	r2, #0
 800ed98:	609a      	str	r2, [r3, #8]
 800ed9a:	e043      	b.n	800ee24 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800ed9c:	687b      	ldr	r3, [r7, #4]
 800ed9e:	2b00      	cmp	r3, #0
 800eda0:	d119      	bne.n	800edd6 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800eda2:	68fb      	ldr	r3, [r7, #12]
 800eda4:	6858      	ldr	r0, [r3, #4]
 800eda6:	68fb      	ldr	r3, [r7, #12]
 800eda8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800edaa:	461a      	mov	r2, r3
 800edac:	68b9      	ldr	r1, [r7, #8]
 800edae:	f002 fc58 	bl	8011662 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800edb2:	68fb      	ldr	r3, [r7, #12]
 800edb4:	685a      	ldr	r2, [r3, #4]
 800edb6:	68fb      	ldr	r3, [r7, #12]
 800edb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800edba:	441a      	add	r2, r3
 800edbc:	68fb      	ldr	r3, [r7, #12]
 800edbe:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800edc0:	68fb      	ldr	r3, [r7, #12]
 800edc2:	685a      	ldr	r2, [r3, #4]
 800edc4:	68fb      	ldr	r3, [r7, #12]
 800edc6:	689b      	ldr	r3, [r3, #8]
 800edc8:	429a      	cmp	r2, r3
 800edca:	d32b      	bcc.n	800ee24 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800edcc:	68fb      	ldr	r3, [r7, #12]
 800edce:	681a      	ldr	r2, [r3, #0]
 800edd0:	68fb      	ldr	r3, [r7, #12]
 800edd2:	605a      	str	r2, [r3, #4]
 800edd4:	e026      	b.n	800ee24 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800edd6:	68fb      	ldr	r3, [r7, #12]
 800edd8:	68d8      	ldr	r0, [r3, #12]
 800edda:	68fb      	ldr	r3, [r7, #12]
 800eddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800edde:	461a      	mov	r2, r3
 800ede0:	68b9      	ldr	r1, [r7, #8]
 800ede2:	f002 fc3e 	bl	8011662 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800ede6:	68fb      	ldr	r3, [r7, #12]
 800ede8:	68da      	ldr	r2, [r3, #12]
 800edea:	68fb      	ldr	r3, [r7, #12]
 800edec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800edee:	425b      	negs	r3, r3
 800edf0:	441a      	add	r2, r3
 800edf2:	68fb      	ldr	r3, [r7, #12]
 800edf4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800edf6:	68fb      	ldr	r3, [r7, #12]
 800edf8:	68da      	ldr	r2, [r3, #12]
 800edfa:	68fb      	ldr	r3, [r7, #12]
 800edfc:	681b      	ldr	r3, [r3, #0]
 800edfe:	429a      	cmp	r2, r3
 800ee00:	d207      	bcs.n	800ee12 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800ee02:	68fb      	ldr	r3, [r7, #12]
 800ee04:	689a      	ldr	r2, [r3, #8]
 800ee06:	68fb      	ldr	r3, [r7, #12]
 800ee08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ee0a:	425b      	negs	r3, r3
 800ee0c:	441a      	add	r2, r3
 800ee0e:	68fb      	ldr	r3, [r7, #12]
 800ee10:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800ee12:	687b      	ldr	r3, [r7, #4]
 800ee14:	2b02      	cmp	r3, #2
 800ee16:	d105      	bne.n	800ee24 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ee18:	693b      	ldr	r3, [r7, #16]
 800ee1a:	2b00      	cmp	r3, #0
 800ee1c:	d002      	beq.n	800ee24 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800ee1e:	693b      	ldr	r3, [r7, #16]
 800ee20:	3b01      	subs	r3, #1
 800ee22:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800ee24:	693b      	ldr	r3, [r7, #16]
 800ee26:	1c5a      	adds	r2, r3, #1
 800ee28:	68fb      	ldr	r3, [r7, #12]
 800ee2a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800ee2c:	697b      	ldr	r3, [r7, #20]
}
 800ee2e:	4618      	mov	r0, r3
 800ee30:	3718      	adds	r7, #24
 800ee32:	46bd      	mov	sp, r7
 800ee34:	bd80      	pop	{r7, pc}

0800ee36 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800ee36:	b580      	push	{r7, lr}
 800ee38:	b082      	sub	sp, #8
 800ee3a:	af00      	add	r7, sp, #0
 800ee3c:	6078      	str	r0, [r7, #4]
 800ee3e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800ee40:	687b      	ldr	r3, [r7, #4]
 800ee42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ee44:	2b00      	cmp	r3, #0
 800ee46:	d018      	beq.n	800ee7a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ee48:	687b      	ldr	r3, [r7, #4]
 800ee4a:	68da      	ldr	r2, [r3, #12]
 800ee4c:	687b      	ldr	r3, [r7, #4]
 800ee4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ee50:	441a      	add	r2, r3
 800ee52:	687b      	ldr	r3, [r7, #4]
 800ee54:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800ee56:	687b      	ldr	r3, [r7, #4]
 800ee58:	68da      	ldr	r2, [r3, #12]
 800ee5a:	687b      	ldr	r3, [r7, #4]
 800ee5c:	689b      	ldr	r3, [r3, #8]
 800ee5e:	429a      	cmp	r2, r3
 800ee60:	d303      	bcc.n	800ee6a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800ee62:	687b      	ldr	r3, [r7, #4]
 800ee64:	681a      	ldr	r2, [r3, #0]
 800ee66:	687b      	ldr	r3, [r7, #4]
 800ee68:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ee6a:	687b      	ldr	r3, [r7, #4]
 800ee6c:	68d9      	ldr	r1, [r3, #12]
 800ee6e:	687b      	ldr	r3, [r7, #4]
 800ee70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ee72:	461a      	mov	r2, r3
 800ee74:	6838      	ldr	r0, [r7, #0]
 800ee76:	f002 fbf4 	bl	8011662 <memcpy>
	}
}
 800ee7a:	bf00      	nop
 800ee7c:	3708      	adds	r7, #8
 800ee7e:	46bd      	mov	sp, r7
 800ee80:	bd80      	pop	{r7, pc}

0800ee82 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800ee82:	b580      	push	{r7, lr}
 800ee84:	b084      	sub	sp, #16
 800ee86:	af00      	add	r7, sp, #0
 800ee88:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800ee8a:	f001 ff7b 	bl	8010d84 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800ee8e:	687b      	ldr	r3, [r7, #4]
 800ee90:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ee94:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ee96:	e011      	b.n	800eebc <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ee98:	687b      	ldr	r3, [r7, #4]
 800ee9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ee9c:	2b00      	cmp	r3, #0
 800ee9e:	d012      	beq.n	800eec6 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800eea0:	687b      	ldr	r3, [r7, #4]
 800eea2:	3324      	adds	r3, #36	; 0x24
 800eea4:	4618      	mov	r0, r3
 800eea6:	f000 fe4b 	bl	800fb40 <xTaskRemoveFromEventList>
 800eeaa:	4603      	mov	r3, r0
 800eeac:	2b00      	cmp	r3, #0
 800eeae:	d001      	beq.n	800eeb4 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800eeb0:	f000 ff22 	bl	800fcf8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800eeb4:	7bfb      	ldrb	r3, [r7, #15]
 800eeb6:	3b01      	subs	r3, #1
 800eeb8:	b2db      	uxtb	r3, r3
 800eeba:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800eebc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800eec0:	2b00      	cmp	r3, #0
 800eec2:	dce9      	bgt.n	800ee98 <prvUnlockQueue+0x16>
 800eec4:	e000      	b.n	800eec8 <prvUnlockQueue+0x46>
					break;
 800eec6:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800eec8:	687b      	ldr	r3, [r7, #4]
 800eeca:	22ff      	movs	r2, #255	; 0xff
 800eecc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800eed0:	f001 ff88 	bl	8010de4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800eed4:	f001 ff56 	bl	8010d84 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800eed8:	687b      	ldr	r3, [r7, #4]
 800eeda:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800eede:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800eee0:	e011      	b.n	800ef06 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800eee2:	687b      	ldr	r3, [r7, #4]
 800eee4:	691b      	ldr	r3, [r3, #16]
 800eee6:	2b00      	cmp	r3, #0
 800eee8:	d012      	beq.n	800ef10 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800eeea:	687b      	ldr	r3, [r7, #4]
 800eeec:	3310      	adds	r3, #16
 800eeee:	4618      	mov	r0, r3
 800eef0:	f000 fe26 	bl	800fb40 <xTaskRemoveFromEventList>
 800eef4:	4603      	mov	r3, r0
 800eef6:	2b00      	cmp	r3, #0
 800eef8:	d001      	beq.n	800eefe <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800eefa:	f000 fefd 	bl	800fcf8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800eefe:	7bbb      	ldrb	r3, [r7, #14]
 800ef00:	3b01      	subs	r3, #1
 800ef02:	b2db      	uxtb	r3, r3
 800ef04:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ef06:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ef0a:	2b00      	cmp	r3, #0
 800ef0c:	dce9      	bgt.n	800eee2 <prvUnlockQueue+0x60>
 800ef0e:	e000      	b.n	800ef12 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800ef10:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800ef12:	687b      	ldr	r3, [r7, #4]
 800ef14:	22ff      	movs	r2, #255	; 0xff
 800ef16:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800ef1a:	f001 ff63 	bl	8010de4 <vPortExitCritical>
}
 800ef1e:	bf00      	nop
 800ef20:	3710      	adds	r7, #16
 800ef22:	46bd      	mov	sp, r7
 800ef24:	bd80      	pop	{r7, pc}

0800ef26 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800ef26:	b580      	push	{r7, lr}
 800ef28:	b084      	sub	sp, #16
 800ef2a:	af00      	add	r7, sp, #0
 800ef2c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ef2e:	f001 ff29 	bl	8010d84 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800ef32:	687b      	ldr	r3, [r7, #4]
 800ef34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ef36:	2b00      	cmp	r3, #0
 800ef38:	d102      	bne.n	800ef40 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800ef3a:	2301      	movs	r3, #1
 800ef3c:	60fb      	str	r3, [r7, #12]
 800ef3e:	e001      	b.n	800ef44 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800ef40:	2300      	movs	r3, #0
 800ef42:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ef44:	f001 ff4e 	bl	8010de4 <vPortExitCritical>

	return xReturn;
 800ef48:	68fb      	ldr	r3, [r7, #12]
}
 800ef4a:	4618      	mov	r0, r3
 800ef4c:	3710      	adds	r7, #16
 800ef4e:	46bd      	mov	sp, r7
 800ef50:	bd80      	pop	{r7, pc}

0800ef52 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800ef52:	b580      	push	{r7, lr}
 800ef54:	b084      	sub	sp, #16
 800ef56:	af00      	add	r7, sp, #0
 800ef58:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ef5a:	f001 ff13 	bl	8010d84 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800ef5e:	687b      	ldr	r3, [r7, #4]
 800ef60:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ef62:	687b      	ldr	r3, [r7, #4]
 800ef64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ef66:	429a      	cmp	r2, r3
 800ef68:	d102      	bne.n	800ef70 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800ef6a:	2301      	movs	r3, #1
 800ef6c:	60fb      	str	r3, [r7, #12]
 800ef6e:	e001      	b.n	800ef74 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800ef70:	2300      	movs	r3, #0
 800ef72:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ef74:	f001 ff36 	bl	8010de4 <vPortExitCritical>

	return xReturn;
 800ef78:	68fb      	ldr	r3, [r7, #12]
}
 800ef7a:	4618      	mov	r0, r3
 800ef7c:	3710      	adds	r7, #16
 800ef7e:	46bd      	mov	sp, r7
 800ef80:	bd80      	pop	{r7, pc}
	...

0800ef84 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800ef84:	b480      	push	{r7}
 800ef86:	b085      	sub	sp, #20
 800ef88:	af00      	add	r7, sp, #0
 800ef8a:	6078      	str	r0, [r7, #4]
 800ef8c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ef8e:	2300      	movs	r3, #0
 800ef90:	60fb      	str	r3, [r7, #12]
 800ef92:	e014      	b.n	800efbe <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800ef94:	4a0f      	ldr	r2, [pc, #60]	; (800efd4 <vQueueAddToRegistry+0x50>)
 800ef96:	68fb      	ldr	r3, [r7, #12]
 800ef98:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800ef9c:	2b00      	cmp	r3, #0
 800ef9e:	d10b      	bne.n	800efb8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800efa0:	490c      	ldr	r1, [pc, #48]	; (800efd4 <vQueueAddToRegistry+0x50>)
 800efa2:	68fb      	ldr	r3, [r7, #12]
 800efa4:	683a      	ldr	r2, [r7, #0]
 800efa6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800efaa:	4a0a      	ldr	r2, [pc, #40]	; (800efd4 <vQueueAddToRegistry+0x50>)
 800efac:	68fb      	ldr	r3, [r7, #12]
 800efae:	00db      	lsls	r3, r3, #3
 800efb0:	4413      	add	r3, r2
 800efb2:	687a      	ldr	r2, [r7, #4]
 800efb4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800efb6:	e006      	b.n	800efc6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800efb8:	68fb      	ldr	r3, [r7, #12]
 800efba:	3301      	adds	r3, #1
 800efbc:	60fb      	str	r3, [r7, #12]
 800efbe:	68fb      	ldr	r3, [r7, #12]
 800efc0:	2b07      	cmp	r3, #7
 800efc2:	d9e7      	bls.n	800ef94 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800efc4:	bf00      	nop
 800efc6:	bf00      	nop
 800efc8:	3714      	adds	r7, #20
 800efca:	46bd      	mov	sp, r7
 800efcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efd0:	4770      	bx	lr
 800efd2:	bf00      	nop
 800efd4:	20001d7c 	.word	0x20001d7c

0800efd8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800efd8:	b580      	push	{r7, lr}
 800efda:	b086      	sub	sp, #24
 800efdc:	af00      	add	r7, sp, #0
 800efde:	60f8      	str	r0, [r7, #12]
 800efe0:	60b9      	str	r1, [r7, #8]
 800efe2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800efe4:	68fb      	ldr	r3, [r7, #12]
 800efe6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800efe8:	f001 fecc 	bl	8010d84 <vPortEnterCritical>
 800efec:	697b      	ldr	r3, [r7, #20]
 800efee:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800eff2:	b25b      	sxtb	r3, r3
 800eff4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eff8:	d103      	bne.n	800f002 <vQueueWaitForMessageRestricted+0x2a>
 800effa:	697b      	ldr	r3, [r7, #20]
 800effc:	2200      	movs	r2, #0
 800effe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f002:	697b      	ldr	r3, [r7, #20]
 800f004:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f008:	b25b      	sxtb	r3, r3
 800f00a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f00e:	d103      	bne.n	800f018 <vQueueWaitForMessageRestricted+0x40>
 800f010:	697b      	ldr	r3, [r7, #20]
 800f012:	2200      	movs	r2, #0
 800f014:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f018:	f001 fee4 	bl	8010de4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800f01c:	697b      	ldr	r3, [r7, #20]
 800f01e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f020:	2b00      	cmp	r3, #0
 800f022:	d106      	bne.n	800f032 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800f024:	697b      	ldr	r3, [r7, #20]
 800f026:	3324      	adds	r3, #36	; 0x24
 800f028:	687a      	ldr	r2, [r7, #4]
 800f02a:	68b9      	ldr	r1, [r7, #8]
 800f02c:	4618      	mov	r0, r3
 800f02e:	f000 fd5b 	bl	800fae8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800f032:	6978      	ldr	r0, [r7, #20]
 800f034:	f7ff ff25 	bl	800ee82 <prvUnlockQueue>
	}
 800f038:	bf00      	nop
 800f03a:	3718      	adds	r7, #24
 800f03c:	46bd      	mov	sp, r7
 800f03e:	bd80      	pop	{r7, pc}

0800f040 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800f040:	b580      	push	{r7, lr}
 800f042:	b08e      	sub	sp, #56	; 0x38
 800f044:	af04      	add	r7, sp, #16
 800f046:	60f8      	str	r0, [r7, #12]
 800f048:	60b9      	str	r1, [r7, #8]
 800f04a:	607a      	str	r2, [r7, #4]
 800f04c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800f04e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f050:	2b00      	cmp	r3, #0
 800f052:	d10a      	bne.n	800f06a <xTaskCreateStatic+0x2a>
	__asm volatile
 800f054:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f058:	f383 8811 	msr	BASEPRI, r3
 800f05c:	f3bf 8f6f 	isb	sy
 800f060:	f3bf 8f4f 	dsb	sy
 800f064:	623b      	str	r3, [r7, #32]
}
 800f066:	bf00      	nop
 800f068:	e7fe      	b.n	800f068 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800f06a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f06c:	2b00      	cmp	r3, #0
 800f06e:	d10a      	bne.n	800f086 <xTaskCreateStatic+0x46>
	__asm volatile
 800f070:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f074:	f383 8811 	msr	BASEPRI, r3
 800f078:	f3bf 8f6f 	isb	sy
 800f07c:	f3bf 8f4f 	dsb	sy
 800f080:	61fb      	str	r3, [r7, #28]
}
 800f082:	bf00      	nop
 800f084:	e7fe      	b.n	800f084 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800f086:	23c0      	movs	r3, #192	; 0xc0
 800f088:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800f08a:	693b      	ldr	r3, [r7, #16]
 800f08c:	2bc0      	cmp	r3, #192	; 0xc0
 800f08e:	d00a      	beq.n	800f0a6 <xTaskCreateStatic+0x66>
	__asm volatile
 800f090:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f094:	f383 8811 	msr	BASEPRI, r3
 800f098:	f3bf 8f6f 	isb	sy
 800f09c:	f3bf 8f4f 	dsb	sy
 800f0a0:	61bb      	str	r3, [r7, #24]
}
 800f0a2:	bf00      	nop
 800f0a4:	e7fe      	b.n	800f0a4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800f0a6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800f0a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0aa:	2b00      	cmp	r3, #0
 800f0ac:	d01e      	beq.n	800f0ec <xTaskCreateStatic+0xac>
 800f0ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f0b0:	2b00      	cmp	r3, #0
 800f0b2:	d01b      	beq.n	800f0ec <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800f0b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0b6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800f0b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f0bc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800f0be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0c0:	2202      	movs	r2, #2
 800f0c2:	f883 20bd 	strb.w	r2, [r3, #189]	; 0xbd
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800f0c6:	2300      	movs	r3, #0
 800f0c8:	9303      	str	r3, [sp, #12]
 800f0ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0cc:	9302      	str	r3, [sp, #8]
 800f0ce:	f107 0314 	add.w	r3, r7, #20
 800f0d2:	9301      	str	r3, [sp, #4]
 800f0d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f0d6:	9300      	str	r3, [sp, #0]
 800f0d8:	683b      	ldr	r3, [r7, #0]
 800f0da:	687a      	ldr	r2, [r7, #4]
 800f0dc:	68b9      	ldr	r1, [r7, #8]
 800f0de:	68f8      	ldr	r0, [r7, #12]
 800f0e0:	f000 f850 	bl	800f184 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800f0e4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f0e6:	f000 f8f7 	bl	800f2d8 <prvAddNewTaskToReadyList>
 800f0ea:	e001      	b.n	800f0f0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800f0ec:	2300      	movs	r3, #0
 800f0ee:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800f0f0:	697b      	ldr	r3, [r7, #20]
	}
 800f0f2:	4618      	mov	r0, r3
 800f0f4:	3728      	adds	r7, #40	; 0x28
 800f0f6:	46bd      	mov	sp, r7
 800f0f8:	bd80      	pop	{r7, pc}

0800f0fa <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800f0fa:	b580      	push	{r7, lr}
 800f0fc:	b08c      	sub	sp, #48	; 0x30
 800f0fe:	af04      	add	r7, sp, #16
 800f100:	60f8      	str	r0, [r7, #12]
 800f102:	60b9      	str	r1, [r7, #8]
 800f104:	603b      	str	r3, [r7, #0]
 800f106:	4613      	mov	r3, r2
 800f108:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800f10a:	88fb      	ldrh	r3, [r7, #6]
 800f10c:	009b      	lsls	r3, r3, #2
 800f10e:	4618      	mov	r0, r3
 800f110:	f001 ff5a 	bl	8010fc8 <pvPortMalloc>
 800f114:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800f116:	697b      	ldr	r3, [r7, #20]
 800f118:	2b00      	cmp	r3, #0
 800f11a:	d00e      	beq.n	800f13a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800f11c:	20c0      	movs	r0, #192	; 0xc0
 800f11e:	f001 ff53 	bl	8010fc8 <pvPortMalloc>
 800f122:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800f124:	69fb      	ldr	r3, [r7, #28]
 800f126:	2b00      	cmp	r3, #0
 800f128:	d003      	beq.n	800f132 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800f12a:	69fb      	ldr	r3, [r7, #28]
 800f12c:	697a      	ldr	r2, [r7, #20]
 800f12e:	631a      	str	r2, [r3, #48]	; 0x30
 800f130:	e005      	b.n	800f13e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800f132:	6978      	ldr	r0, [r7, #20]
 800f134:	f002 f814 	bl	8011160 <vPortFree>
 800f138:	e001      	b.n	800f13e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800f13a:	2300      	movs	r3, #0
 800f13c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800f13e:	69fb      	ldr	r3, [r7, #28]
 800f140:	2b00      	cmp	r3, #0
 800f142:	d017      	beq.n	800f174 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800f144:	69fb      	ldr	r3, [r7, #28]
 800f146:	2200      	movs	r2, #0
 800f148:	f883 20bd 	strb.w	r2, [r3, #189]	; 0xbd
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800f14c:	88fa      	ldrh	r2, [r7, #6]
 800f14e:	2300      	movs	r3, #0
 800f150:	9303      	str	r3, [sp, #12]
 800f152:	69fb      	ldr	r3, [r7, #28]
 800f154:	9302      	str	r3, [sp, #8]
 800f156:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f158:	9301      	str	r3, [sp, #4]
 800f15a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f15c:	9300      	str	r3, [sp, #0]
 800f15e:	683b      	ldr	r3, [r7, #0]
 800f160:	68b9      	ldr	r1, [r7, #8]
 800f162:	68f8      	ldr	r0, [r7, #12]
 800f164:	f000 f80e 	bl	800f184 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800f168:	69f8      	ldr	r0, [r7, #28]
 800f16a:	f000 f8b5 	bl	800f2d8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800f16e:	2301      	movs	r3, #1
 800f170:	61bb      	str	r3, [r7, #24]
 800f172:	e002      	b.n	800f17a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800f174:	f04f 33ff 	mov.w	r3, #4294967295
 800f178:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800f17a:	69bb      	ldr	r3, [r7, #24]
	}
 800f17c:	4618      	mov	r0, r3
 800f17e:	3720      	adds	r7, #32
 800f180:	46bd      	mov	sp, r7
 800f182:	bd80      	pop	{r7, pc}

0800f184 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800f184:	b580      	push	{r7, lr}
 800f186:	b088      	sub	sp, #32
 800f188:	af00      	add	r7, sp, #0
 800f18a:	60f8      	str	r0, [r7, #12]
 800f18c:	60b9      	str	r1, [r7, #8]
 800f18e:	607a      	str	r2, [r7, #4]
 800f190:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800f192:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f194:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800f196:	687b      	ldr	r3, [r7, #4]
 800f198:	009b      	lsls	r3, r3, #2
 800f19a:	461a      	mov	r2, r3
 800f19c:	21a5      	movs	r1, #165	; 0xa5
 800f19e:	f002 fa88 	bl	80116b2 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800f1a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f1a6:	687b      	ldr	r3, [r7, #4]
 800f1a8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800f1ac:	3b01      	subs	r3, #1
 800f1ae:	009b      	lsls	r3, r3, #2
 800f1b0:	4413      	add	r3, r2
 800f1b2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800f1b4:	69bb      	ldr	r3, [r7, #24]
 800f1b6:	f023 0307 	bic.w	r3, r3, #7
 800f1ba:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800f1bc:	69bb      	ldr	r3, [r7, #24]
 800f1be:	f003 0307 	and.w	r3, r3, #7
 800f1c2:	2b00      	cmp	r3, #0
 800f1c4:	d00a      	beq.n	800f1dc <prvInitialiseNewTask+0x58>
	__asm volatile
 800f1c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f1ca:	f383 8811 	msr	BASEPRI, r3
 800f1ce:	f3bf 8f6f 	isb	sy
 800f1d2:	f3bf 8f4f 	dsb	sy
 800f1d6:	617b      	str	r3, [r7, #20]
}
 800f1d8:	bf00      	nop
 800f1da:	e7fe      	b.n	800f1da <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800f1dc:	68bb      	ldr	r3, [r7, #8]
 800f1de:	2b00      	cmp	r3, #0
 800f1e0:	d01f      	beq.n	800f222 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f1e2:	2300      	movs	r3, #0
 800f1e4:	61fb      	str	r3, [r7, #28]
 800f1e6:	e012      	b.n	800f20e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800f1e8:	68ba      	ldr	r2, [r7, #8]
 800f1ea:	69fb      	ldr	r3, [r7, #28]
 800f1ec:	4413      	add	r3, r2
 800f1ee:	7819      	ldrb	r1, [r3, #0]
 800f1f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f1f2:	69fb      	ldr	r3, [r7, #28]
 800f1f4:	4413      	add	r3, r2
 800f1f6:	3334      	adds	r3, #52	; 0x34
 800f1f8:	460a      	mov	r2, r1
 800f1fa:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800f1fc:	68ba      	ldr	r2, [r7, #8]
 800f1fe:	69fb      	ldr	r3, [r7, #28]
 800f200:	4413      	add	r3, r2
 800f202:	781b      	ldrb	r3, [r3, #0]
 800f204:	2b00      	cmp	r3, #0
 800f206:	d006      	beq.n	800f216 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f208:	69fb      	ldr	r3, [r7, #28]
 800f20a:	3301      	adds	r3, #1
 800f20c:	61fb      	str	r3, [r7, #28]
 800f20e:	69fb      	ldr	r3, [r7, #28]
 800f210:	2b0f      	cmp	r3, #15
 800f212:	d9e9      	bls.n	800f1e8 <prvInitialiseNewTask+0x64>
 800f214:	e000      	b.n	800f218 <prvInitialiseNewTask+0x94>
			{
				break;
 800f216:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800f218:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f21a:	2200      	movs	r2, #0
 800f21c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800f220:	e003      	b.n	800f22a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800f222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f224:	2200      	movs	r2, #0
 800f226:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800f22a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f22c:	2b37      	cmp	r3, #55	; 0x37
 800f22e:	d901      	bls.n	800f234 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800f230:	2337      	movs	r3, #55	; 0x37
 800f232:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800f234:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f236:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f238:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800f23a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f23c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f23e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800f240:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f242:	2200      	movs	r2, #0
 800f244:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800f246:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f248:	3304      	adds	r3, #4
 800f24a:	4618      	mov	r0, r3
 800f24c:	f7ff f89a 	bl	800e384 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800f250:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f252:	3318      	adds	r3, #24
 800f254:	4618      	mov	r0, r3
 800f256:	f7ff f895 	bl	800e384 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800f25a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f25c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f25e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f260:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f262:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800f266:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f268:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800f26a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f26c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f26e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 800f270:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f272:	2200      	movs	r2, #0
 800f274:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800f276:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f278:	2200      	movs	r2, #0
 800f27a:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800f27e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f280:	2200      	movs	r2, #0
 800f282:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800f286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f288:	3358      	adds	r3, #88	; 0x58
 800f28a:	2260      	movs	r2, #96	; 0x60
 800f28c:	2100      	movs	r1, #0
 800f28e:	4618      	mov	r0, r3
 800f290:	f002 fa0f 	bl	80116b2 <memset>
 800f294:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f296:	4a0d      	ldr	r2, [pc, #52]	; (800f2cc <prvInitialiseNewTask+0x148>)
 800f298:	65da      	str	r2, [r3, #92]	; 0x5c
 800f29a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f29c:	4a0c      	ldr	r2, [pc, #48]	; (800f2d0 <prvInitialiseNewTask+0x14c>)
 800f29e:	661a      	str	r2, [r3, #96]	; 0x60
 800f2a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f2a2:	4a0c      	ldr	r2, [pc, #48]	; (800f2d4 <prvInitialiseNewTask+0x150>)
 800f2a4:	665a      	str	r2, [r3, #100]	; 0x64
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800f2a6:	683a      	ldr	r2, [r7, #0]
 800f2a8:	68f9      	ldr	r1, [r7, #12]
 800f2aa:	69b8      	ldr	r0, [r7, #24]
 800f2ac:	f001 fc3a 	bl	8010b24 <pxPortInitialiseStack>
 800f2b0:	4602      	mov	r2, r0
 800f2b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f2b4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800f2b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2b8:	2b00      	cmp	r3, #0
 800f2ba:	d002      	beq.n	800f2c2 <prvInitialiseNewTask+0x13e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800f2bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f2c0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f2c2:	bf00      	nop
 800f2c4:	3720      	adds	r7, #32
 800f2c6:	46bd      	mov	sp, r7
 800f2c8:	bd80      	pop	{r7, pc}
 800f2ca:	bf00      	nop
 800f2cc:	0801473c 	.word	0x0801473c
 800f2d0:	0801475c 	.word	0x0801475c
 800f2d4:	0801471c 	.word	0x0801471c

0800f2d8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800f2d8:	b580      	push	{r7, lr}
 800f2da:	b082      	sub	sp, #8
 800f2dc:	af00      	add	r7, sp, #0
 800f2de:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800f2e0:	f001 fd50 	bl	8010d84 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800f2e4:	4b2d      	ldr	r3, [pc, #180]	; (800f39c <prvAddNewTaskToReadyList+0xc4>)
 800f2e6:	681b      	ldr	r3, [r3, #0]
 800f2e8:	3301      	adds	r3, #1
 800f2ea:	4a2c      	ldr	r2, [pc, #176]	; (800f39c <prvAddNewTaskToReadyList+0xc4>)
 800f2ec:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800f2ee:	4b2c      	ldr	r3, [pc, #176]	; (800f3a0 <prvAddNewTaskToReadyList+0xc8>)
 800f2f0:	681b      	ldr	r3, [r3, #0]
 800f2f2:	2b00      	cmp	r3, #0
 800f2f4:	d109      	bne.n	800f30a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800f2f6:	4a2a      	ldr	r2, [pc, #168]	; (800f3a0 <prvAddNewTaskToReadyList+0xc8>)
 800f2f8:	687b      	ldr	r3, [r7, #4]
 800f2fa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800f2fc:	4b27      	ldr	r3, [pc, #156]	; (800f39c <prvAddNewTaskToReadyList+0xc4>)
 800f2fe:	681b      	ldr	r3, [r3, #0]
 800f300:	2b01      	cmp	r3, #1
 800f302:	d110      	bne.n	800f326 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800f304:	f000 fd1c 	bl	800fd40 <prvInitialiseTaskLists>
 800f308:	e00d      	b.n	800f326 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800f30a:	4b26      	ldr	r3, [pc, #152]	; (800f3a4 <prvAddNewTaskToReadyList+0xcc>)
 800f30c:	681b      	ldr	r3, [r3, #0]
 800f30e:	2b00      	cmp	r3, #0
 800f310:	d109      	bne.n	800f326 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800f312:	4b23      	ldr	r3, [pc, #140]	; (800f3a0 <prvAddNewTaskToReadyList+0xc8>)
 800f314:	681b      	ldr	r3, [r3, #0]
 800f316:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f318:	687b      	ldr	r3, [r7, #4]
 800f31a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f31c:	429a      	cmp	r2, r3
 800f31e:	d802      	bhi.n	800f326 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800f320:	4a1f      	ldr	r2, [pc, #124]	; (800f3a0 <prvAddNewTaskToReadyList+0xc8>)
 800f322:	687b      	ldr	r3, [r7, #4]
 800f324:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800f326:	4b20      	ldr	r3, [pc, #128]	; (800f3a8 <prvAddNewTaskToReadyList+0xd0>)
 800f328:	681b      	ldr	r3, [r3, #0]
 800f32a:	3301      	adds	r3, #1
 800f32c:	4a1e      	ldr	r2, [pc, #120]	; (800f3a8 <prvAddNewTaskToReadyList+0xd0>)
 800f32e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800f330:	4b1d      	ldr	r3, [pc, #116]	; (800f3a8 <prvAddNewTaskToReadyList+0xd0>)
 800f332:	681a      	ldr	r2, [r3, #0]
 800f334:	687b      	ldr	r3, [r7, #4]
 800f336:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800f338:	687b      	ldr	r3, [r7, #4]
 800f33a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f33c:	4b1b      	ldr	r3, [pc, #108]	; (800f3ac <prvAddNewTaskToReadyList+0xd4>)
 800f33e:	681b      	ldr	r3, [r3, #0]
 800f340:	429a      	cmp	r2, r3
 800f342:	d903      	bls.n	800f34c <prvAddNewTaskToReadyList+0x74>
 800f344:	687b      	ldr	r3, [r7, #4]
 800f346:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f348:	4a18      	ldr	r2, [pc, #96]	; (800f3ac <prvAddNewTaskToReadyList+0xd4>)
 800f34a:	6013      	str	r3, [r2, #0]
 800f34c:	687b      	ldr	r3, [r7, #4]
 800f34e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f350:	4613      	mov	r3, r2
 800f352:	009b      	lsls	r3, r3, #2
 800f354:	4413      	add	r3, r2
 800f356:	009b      	lsls	r3, r3, #2
 800f358:	4a15      	ldr	r2, [pc, #84]	; (800f3b0 <prvAddNewTaskToReadyList+0xd8>)
 800f35a:	441a      	add	r2, r3
 800f35c:	687b      	ldr	r3, [r7, #4]
 800f35e:	3304      	adds	r3, #4
 800f360:	4619      	mov	r1, r3
 800f362:	4610      	mov	r0, r2
 800f364:	f7ff f81b 	bl	800e39e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800f368:	f001 fd3c 	bl	8010de4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800f36c:	4b0d      	ldr	r3, [pc, #52]	; (800f3a4 <prvAddNewTaskToReadyList+0xcc>)
 800f36e:	681b      	ldr	r3, [r3, #0]
 800f370:	2b00      	cmp	r3, #0
 800f372:	d00e      	beq.n	800f392 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800f374:	4b0a      	ldr	r3, [pc, #40]	; (800f3a0 <prvAddNewTaskToReadyList+0xc8>)
 800f376:	681b      	ldr	r3, [r3, #0]
 800f378:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f37a:	687b      	ldr	r3, [r7, #4]
 800f37c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f37e:	429a      	cmp	r2, r3
 800f380:	d207      	bcs.n	800f392 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800f382:	4b0c      	ldr	r3, [pc, #48]	; (800f3b4 <prvAddNewTaskToReadyList+0xdc>)
 800f384:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f388:	601a      	str	r2, [r3, #0]
 800f38a:	f3bf 8f4f 	dsb	sy
 800f38e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f392:	bf00      	nop
 800f394:	3708      	adds	r7, #8
 800f396:	46bd      	mov	sp, r7
 800f398:	bd80      	pop	{r7, pc}
 800f39a:	bf00      	nop
 800f39c:	20002290 	.word	0x20002290
 800f3a0:	20001dbc 	.word	0x20001dbc
 800f3a4:	2000229c 	.word	0x2000229c
 800f3a8:	200022ac 	.word	0x200022ac
 800f3ac:	20002298 	.word	0x20002298
 800f3b0:	20001dc0 	.word	0x20001dc0
 800f3b4:	e000ed04 	.word	0xe000ed04

0800f3b8 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 800f3b8:	b580      	push	{r7, lr}
 800f3ba:	b084      	sub	sp, #16
 800f3bc:	af00      	add	r7, sp, #0
 800f3be:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800f3c0:	f001 fce0 	bl	8010d84 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 800f3c4:	687b      	ldr	r3, [r7, #4]
 800f3c6:	2b00      	cmp	r3, #0
 800f3c8:	d102      	bne.n	800f3d0 <vTaskDelete+0x18>
 800f3ca:	4b2c      	ldr	r3, [pc, #176]	; (800f47c <vTaskDelete+0xc4>)
 800f3cc:	681b      	ldr	r3, [r3, #0]
 800f3ce:	e000      	b.n	800f3d2 <vTaskDelete+0x1a>
 800f3d0:	687b      	ldr	r3, [r7, #4]
 800f3d2:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f3d4:	68fb      	ldr	r3, [r7, #12]
 800f3d6:	3304      	adds	r3, #4
 800f3d8:	4618      	mov	r0, r3
 800f3da:	f7ff f83d 	bl	800e458 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800f3de:	68fb      	ldr	r3, [r7, #12]
 800f3e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f3e2:	2b00      	cmp	r3, #0
 800f3e4:	d004      	beq.n	800f3f0 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f3e6:	68fb      	ldr	r3, [r7, #12]
 800f3e8:	3318      	adds	r3, #24
 800f3ea:	4618      	mov	r0, r3
 800f3ec:	f7ff f834 	bl	800e458 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 800f3f0:	4b23      	ldr	r3, [pc, #140]	; (800f480 <vTaskDelete+0xc8>)
 800f3f2:	681b      	ldr	r3, [r3, #0]
 800f3f4:	3301      	adds	r3, #1
 800f3f6:	4a22      	ldr	r2, [pc, #136]	; (800f480 <vTaskDelete+0xc8>)
 800f3f8:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 800f3fa:	4b20      	ldr	r3, [pc, #128]	; (800f47c <vTaskDelete+0xc4>)
 800f3fc:	681b      	ldr	r3, [r3, #0]
 800f3fe:	68fa      	ldr	r2, [r7, #12]
 800f400:	429a      	cmp	r2, r3
 800f402:	d10b      	bne.n	800f41c <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800f404:	68fb      	ldr	r3, [r7, #12]
 800f406:	3304      	adds	r3, #4
 800f408:	4619      	mov	r1, r3
 800f40a:	481e      	ldr	r0, [pc, #120]	; (800f484 <vTaskDelete+0xcc>)
 800f40c:	f7fe ffc7 	bl	800e39e <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 800f410:	4b1d      	ldr	r3, [pc, #116]	; (800f488 <vTaskDelete+0xd0>)
 800f412:	681b      	ldr	r3, [r3, #0]
 800f414:	3301      	adds	r3, #1
 800f416:	4a1c      	ldr	r2, [pc, #112]	; (800f488 <vTaskDelete+0xd0>)
 800f418:	6013      	str	r3, [r2, #0]
 800f41a:	e009      	b.n	800f430 <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 800f41c:	4b1b      	ldr	r3, [pc, #108]	; (800f48c <vTaskDelete+0xd4>)
 800f41e:	681b      	ldr	r3, [r3, #0]
 800f420:	3b01      	subs	r3, #1
 800f422:	4a1a      	ldr	r2, [pc, #104]	; (800f48c <vTaskDelete+0xd4>)
 800f424:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 800f426:	68f8      	ldr	r0, [r7, #12]
 800f428:	f000 fcf8 	bl	800fe1c <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 800f42c:	f000 fd2a 	bl	800fe84 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 800f430:	f001 fcd8 	bl	8010de4 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 800f434:	4b16      	ldr	r3, [pc, #88]	; (800f490 <vTaskDelete+0xd8>)
 800f436:	681b      	ldr	r3, [r3, #0]
 800f438:	2b00      	cmp	r3, #0
 800f43a:	d01b      	beq.n	800f474 <vTaskDelete+0xbc>
		{
			if( pxTCB == pxCurrentTCB )
 800f43c:	4b0f      	ldr	r3, [pc, #60]	; (800f47c <vTaskDelete+0xc4>)
 800f43e:	681b      	ldr	r3, [r3, #0]
 800f440:	68fa      	ldr	r2, [r7, #12]
 800f442:	429a      	cmp	r2, r3
 800f444:	d116      	bne.n	800f474 <vTaskDelete+0xbc>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 800f446:	4b13      	ldr	r3, [pc, #76]	; (800f494 <vTaskDelete+0xdc>)
 800f448:	681b      	ldr	r3, [r3, #0]
 800f44a:	2b00      	cmp	r3, #0
 800f44c:	d00a      	beq.n	800f464 <vTaskDelete+0xac>
	__asm volatile
 800f44e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f452:	f383 8811 	msr	BASEPRI, r3
 800f456:	f3bf 8f6f 	isb	sy
 800f45a:	f3bf 8f4f 	dsb	sy
 800f45e:	60bb      	str	r3, [r7, #8]
}
 800f460:	bf00      	nop
 800f462:	e7fe      	b.n	800f462 <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 800f464:	4b0c      	ldr	r3, [pc, #48]	; (800f498 <vTaskDelete+0xe0>)
 800f466:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f46a:	601a      	str	r2, [r3, #0]
 800f46c:	f3bf 8f4f 	dsb	sy
 800f470:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800f474:	bf00      	nop
 800f476:	3710      	adds	r7, #16
 800f478:	46bd      	mov	sp, r7
 800f47a:	bd80      	pop	{r7, pc}
 800f47c:	20001dbc 	.word	0x20001dbc
 800f480:	200022ac 	.word	0x200022ac
 800f484:	20002264 	.word	0x20002264
 800f488:	20002278 	.word	0x20002278
 800f48c:	20002290 	.word	0x20002290
 800f490:	2000229c 	.word	0x2000229c
 800f494:	200022b8 	.word	0x200022b8
 800f498:	e000ed04 	.word	0xe000ed04

0800f49c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800f49c:	b580      	push	{r7, lr}
 800f49e:	b084      	sub	sp, #16
 800f4a0:	af00      	add	r7, sp, #0
 800f4a2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800f4a4:	2300      	movs	r3, #0
 800f4a6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800f4a8:	687b      	ldr	r3, [r7, #4]
 800f4aa:	2b00      	cmp	r3, #0
 800f4ac:	d017      	beq.n	800f4de <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800f4ae:	4b13      	ldr	r3, [pc, #76]	; (800f4fc <vTaskDelay+0x60>)
 800f4b0:	681b      	ldr	r3, [r3, #0]
 800f4b2:	2b00      	cmp	r3, #0
 800f4b4:	d00a      	beq.n	800f4cc <vTaskDelay+0x30>
	__asm volatile
 800f4b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f4ba:	f383 8811 	msr	BASEPRI, r3
 800f4be:	f3bf 8f6f 	isb	sy
 800f4c2:	f3bf 8f4f 	dsb	sy
 800f4c6:	60bb      	str	r3, [r7, #8]
}
 800f4c8:	bf00      	nop
 800f4ca:	e7fe      	b.n	800f4ca <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800f4cc:	f000 f8f2 	bl	800f6b4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800f4d0:	2100      	movs	r1, #0
 800f4d2:	6878      	ldr	r0, [r7, #4]
 800f4d4:	f000 ff84 	bl	80103e0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800f4d8:	f000 f8fa 	bl	800f6d0 <xTaskResumeAll>
 800f4dc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800f4de:	68fb      	ldr	r3, [r7, #12]
 800f4e0:	2b00      	cmp	r3, #0
 800f4e2:	d107      	bne.n	800f4f4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800f4e4:	4b06      	ldr	r3, [pc, #24]	; (800f500 <vTaskDelay+0x64>)
 800f4e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f4ea:	601a      	str	r2, [r3, #0]
 800f4ec:	f3bf 8f4f 	dsb	sy
 800f4f0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800f4f4:	bf00      	nop
 800f4f6:	3710      	adds	r7, #16
 800f4f8:	46bd      	mov	sp, r7
 800f4fa:	bd80      	pop	{r7, pc}
 800f4fc:	200022b8 	.word	0x200022b8
 800f500:	e000ed04 	.word	0xe000ed04

0800f504 <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 800f504:	b580      	push	{r7, lr}
 800f506:	b088      	sub	sp, #32
 800f508:	af00      	add	r7, sp, #0
 800f50a:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
	const TCB_t * const pxTCB = xTask;
 800f50c:	687b      	ldr	r3, [r7, #4]
 800f50e:	61bb      	str	r3, [r7, #24]

		configASSERT( pxTCB );
 800f510:	69bb      	ldr	r3, [r7, #24]
 800f512:	2b00      	cmp	r3, #0
 800f514:	d10a      	bne.n	800f52c <eTaskGetState+0x28>
	__asm volatile
 800f516:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f51a:	f383 8811 	msr	BASEPRI, r3
 800f51e:	f3bf 8f6f 	isb	sy
 800f522:	f3bf 8f4f 	dsb	sy
 800f526:	60bb      	str	r3, [r7, #8]
}
 800f528:	bf00      	nop
 800f52a:	e7fe      	b.n	800f52a <eTaskGetState+0x26>

		if( pxTCB == pxCurrentTCB )
 800f52c:	4b23      	ldr	r3, [pc, #140]	; (800f5bc <eTaskGetState+0xb8>)
 800f52e:	681b      	ldr	r3, [r3, #0]
 800f530:	69ba      	ldr	r2, [r7, #24]
 800f532:	429a      	cmp	r2, r3
 800f534:	d102      	bne.n	800f53c <eTaskGetState+0x38>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 800f536:	2300      	movs	r3, #0
 800f538:	77fb      	strb	r3, [r7, #31]
 800f53a:	e03a      	b.n	800f5b2 <eTaskGetState+0xae>
		}
		else
		{
			taskENTER_CRITICAL();
 800f53c:	f001 fc22 	bl	8010d84 <vPortEnterCritical>
			{
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 800f540:	69bb      	ldr	r3, [r7, #24]
 800f542:	695b      	ldr	r3, [r3, #20]
 800f544:	617b      	str	r3, [r7, #20]
				pxDelayedList = pxDelayedTaskList;
 800f546:	4b1e      	ldr	r3, [pc, #120]	; (800f5c0 <eTaskGetState+0xbc>)
 800f548:	681b      	ldr	r3, [r3, #0]
 800f54a:	613b      	str	r3, [r7, #16]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 800f54c:	4b1d      	ldr	r3, [pc, #116]	; (800f5c4 <eTaskGetState+0xc0>)
 800f54e:	681b      	ldr	r3, [r3, #0]
 800f550:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 800f552:	f001 fc47 	bl	8010de4 <vPortExitCritical>

			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 800f556:	697a      	ldr	r2, [r7, #20]
 800f558:	693b      	ldr	r3, [r7, #16]
 800f55a:	429a      	cmp	r2, r3
 800f55c:	d003      	beq.n	800f566 <eTaskGetState+0x62>
 800f55e:	697a      	ldr	r2, [r7, #20]
 800f560:	68fb      	ldr	r3, [r7, #12]
 800f562:	429a      	cmp	r2, r3
 800f564:	d102      	bne.n	800f56c <eTaskGetState+0x68>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 800f566:	2302      	movs	r3, #2
 800f568:	77fb      	strb	r3, [r7, #31]
 800f56a:	e022      	b.n	800f5b2 <eTaskGetState+0xae>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 800f56c:	697b      	ldr	r3, [r7, #20]
 800f56e:	4a16      	ldr	r2, [pc, #88]	; (800f5c8 <eTaskGetState+0xc4>)
 800f570:	4293      	cmp	r3, r2
 800f572:	d112      	bne.n	800f59a <eTaskGetState+0x96>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it blocked
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 800f574:	69bb      	ldr	r3, [r7, #24]
 800f576:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f578:	2b00      	cmp	r3, #0
 800f57a:	d10b      	bne.n	800f594 <eTaskGetState+0x90>
						{
							/* The task does not appear on the event list item of
							and of the RTOS objects, but could still be in the
							blocked state if it is waiting on its notification
							rather than waiting on an object. */
							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800f57c:	69bb      	ldr	r3, [r7, #24]
 800f57e:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 800f582:	b2db      	uxtb	r3, r3
 800f584:	2b01      	cmp	r3, #1
 800f586:	d102      	bne.n	800f58e <eTaskGetState+0x8a>
							{
								eReturn = eBlocked;
 800f588:	2302      	movs	r3, #2
 800f58a:	77fb      	strb	r3, [r7, #31]
 800f58c:	e011      	b.n	800f5b2 <eTaskGetState+0xae>
							}
							else
							{
								eReturn = eSuspended;
 800f58e:	2303      	movs	r3, #3
 800f590:	77fb      	strb	r3, [r7, #31]
 800f592:	e00e      	b.n	800f5b2 <eTaskGetState+0xae>
						}
						#endif
					}
					else
					{
						eReturn = eBlocked;
 800f594:	2302      	movs	r3, #2
 800f596:	77fb      	strb	r3, [r7, #31]
 800f598:	e00b      	b.n	800f5b2 <eTaskGetState+0xae>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 800f59a:	697b      	ldr	r3, [r7, #20]
 800f59c:	4a0b      	ldr	r2, [pc, #44]	; (800f5cc <eTaskGetState+0xc8>)
 800f59e:	4293      	cmp	r3, r2
 800f5a0:	d002      	beq.n	800f5a8 <eTaskGetState+0xa4>
 800f5a2:	697b      	ldr	r3, [r7, #20]
 800f5a4:	2b00      	cmp	r3, #0
 800f5a6:	d102      	bne.n	800f5ae <eTaskGetState+0xaa>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 800f5a8:	2304      	movs	r3, #4
 800f5aa:	77fb      	strb	r3, [r7, #31]
 800f5ac:	e001      	b.n	800f5b2 <eTaskGetState+0xae>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 800f5ae:	2301      	movs	r3, #1
 800f5b0:	77fb      	strb	r3, [r7, #31]
			}
		}

		return eReturn;
 800f5b2:	7ffb      	ldrb	r3, [r7, #31]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 800f5b4:	4618      	mov	r0, r3
 800f5b6:	3720      	adds	r7, #32
 800f5b8:	46bd      	mov	sp, r7
 800f5ba:	bd80      	pop	{r7, pc}
 800f5bc:	20001dbc 	.word	0x20001dbc
 800f5c0:	20002248 	.word	0x20002248
 800f5c4:	2000224c 	.word	0x2000224c
 800f5c8:	2000227c 	.word	0x2000227c
 800f5cc:	20002264 	.word	0x20002264

0800f5d0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800f5d0:	b580      	push	{r7, lr}
 800f5d2:	b08a      	sub	sp, #40	; 0x28
 800f5d4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800f5d6:	2300      	movs	r3, #0
 800f5d8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800f5da:	2300      	movs	r3, #0
 800f5dc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800f5de:	463a      	mov	r2, r7
 800f5e0:	1d39      	adds	r1, r7, #4
 800f5e2:	f107 0308 	add.w	r3, r7, #8
 800f5e6:	4618      	mov	r0, r3
 800f5e8:	f7fe fe78 	bl	800e2dc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800f5ec:	6839      	ldr	r1, [r7, #0]
 800f5ee:	687b      	ldr	r3, [r7, #4]
 800f5f0:	68ba      	ldr	r2, [r7, #8]
 800f5f2:	9202      	str	r2, [sp, #8]
 800f5f4:	9301      	str	r3, [sp, #4]
 800f5f6:	2300      	movs	r3, #0
 800f5f8:	9300      	str	r3, [sp, #0]
 800f5fa:	2300      	movs	r3, #0
 800f5fc:	460a      	mov	r2, r1
 800f5fe:	4925      	ldr	r1, [pc, #148]	; (800f694 <vTaskStartScheduler+0xc4>)
 800f600:	4825      	ldr	r0, [pc, #148]	; (800f698 <vTaskStartScheduler+0xc8>)
 800f602:	f7ff fd1d 	bl	800f040 <xTaskCreateStatic>
 800f606:	4603      	mov	r3, r0
 800f608:	4a24      	ldr	r2, [pc, #144]	; (800f69c <vTaskStartScheduler+0xcc>)
 800f60a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800f60c:	4b23      	ldr	r3, [pc, #140]	; (800f69c <vTaskStartScheduler+0xcc>)
 800f60e:	681b      	ldr	r3, [r3, #0]
 800f610:	2b00      	cmp	r3, #0
 800f612:	d002      	beq.n	800f61a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800f614:	2301      	movs	r3, #1
 800f616:	617b      	str	r3, [r7, #20]
 800f618:	e001      	b.n	800f61e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800f61a:	2300      	movs	r3, #0
 800f61c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800f61e:	697b      	ldr	r3, [r7, #20]
 800f620:	2b01      	cmp	r3, #1
 800f622:	d102      	bne.n	800f62a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800f624:	f000 ff30 	bl	8010488 <xTimerCreateTimerTask>
 800f628:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800f62a:	697b      	ldr	r3, [r7, #20]
 800f62c:	2b01      	cmp	r3, #1
 800f62e:	d11d      	bne.n	800f66c <vTaskStartScheduler+0x9c>
	__asm volatile
 800f630:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f634:	f383 8811 	msr	BASEPRI, r3
 800f638:	f3bf 8f6f 	isb	sy
 800f63c:	f3bf 8f4f 	dsb	sy
 800f640:	613b      	str	r3, [r7, #16]
}
 800f642:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800f644:	4b16      	ldr	r3, [pc, #88]	; (800f6a0 <vTaskStartScheduler+0xd0>)
 800f646:	681b      	ldr	r3, [r3, #0]
 800f648:	3358      	adds	r3, #88	; 0x58
 800f64a:	4a16      	ldr	r2, [pc, #88]	; (800f6a4 <vTaskStartScheduler+0xd4>)
 800f64c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800f64e:	4b16      	ldr	r3, [pc, #88]	; (800f6a8 <vTaskStartScheduler+0xd8>)
 800f650:	f04f 32ff 	mov.w	r2, #4294967295
 800f654:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800f656:	4b15      	ldr	r3, [pc, #84]	; (800f6ac <vTaskStartScheduler+0xdc>)
 800f658:	2201      	movs	r2, #1
 800f65a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800f65c:	4b14      	ldr	r3, [pc, #80]	; (800f6b0 <vTaskStartScheduler+0xe0>)
 800f65e:	2200      	movs	r2, #0
 800f660:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 800f662:	f7f0 ffb7 	bl	80005d4 <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800f666:	f001 faeb 	bl	8010c40 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800f66a:	e00e      	b.n	800f68a <vTaskStartScheduler+0xba>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800f66c:	697b      	ldr	r3, [r7, #20]
 800f66e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f672:	d10a      	bne.n	800f68a <vTaskStartScheduler+0xba>
	__asm volatile
 800f674:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f678:	f383 8811 	msr	BASEPRI, r3
 800f67c:	f3bf 8f6f 	isb	sy
 800f680:	f3bf 8f4f 	dsb	sy
 800f684:	60fb      	str	r3, [r7, #12]
}
 800f686:	bf00      	nop
 800f688:	e7fe      	b.n	800f688 <vTaskStartScheduler+0xb8>
}
 800f68a:	bf00      	nop
 800f68c:	3718      	adds	r7, #24
 800f68e:	46bd      	mov	sp, r7
 800f690:	bd80      	pop	{r7, pc}
 800f692:	bf00      	nop
 800f694:	08014330 	.word	0x08014330
 800f698:	0800fd11 	.word	0x0800fd11
 800f69c:	200022b4 	.word	0x200022b4
 800f6a0:	20001dbc 	.word	0x20001dbc
 800f6a4:	20000050 	.word	0x20000050
 800f6a8:	200022b0 	.word	0x200022b0
 800f6ac:	2000229c 	.word	0x2000229c
 800f6b0:	20002294 	.word	0x20002294

0800f6b4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800f6b4:	b480      	push	{r7}
 800f6b6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800f6b8:	4b04      	ldr	r3, [pc, #16]	; (800f6cc <vTaskSuspendAll+0x18>)
 800f6ba:	681b      	ldr	r3, [r3, #0]
 800f6bc:	3301      	adds	r3, #1
 800f6be:	4a03      	ldr	r2, [pc, #12]	; (800f6cc <vTaskSuspendAll+0x18>)
 800f6c0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800f6c2:	bf00      	nop
 800f6c4:	46bd      	mov	sp, r7
 800f6c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6ca:	4770      	bx	lr
 800f6cc:	200022b8 	.word	0x200022b8

0800f6d0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800f6d0:	b580      	push	{r7, lr}
 800f6d2:	b084      	sub	sp, #16
 800f6d4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800f6d6:	2300      	movs	r3, #0
 800f6d8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800f6da:	2300      	movs	r3, #0
 800f6dc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800f6de:	4b42      	ldr	r3, [pc, #264]	; (800f7e8 <xTaskResumeAll+0x118>)
 800f6e0:	681b      	ldr	r3, [r3, #0]
 800f6e2:	2b00      	cmp	r3, #0
 800f6e4:	d10a      	bne.n	800f6fc <xTaskResumeAll+0x2c>
	__asm volatile
 800f6e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f6ea:	f383 8811 	msr	BASEPRI, r3
 800f6ee:	f3bf 8f6f 	isb	sy
 800f6f2:	f3bf 8f4f 	dsb	sy
 800f6f6:	603b      	str	r3, [r7, #0]
}
 800f6f8:	bf00      	nop
 800f6fa:	e7fe      	b.n	800f6fa <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800f6fc:	f001 fb42 	bl	8010d84 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800f700:	4b39      	ldr	r3, [pc, #228]	; (800f7e8 <xTaskResumeAll+0x118>)
 800f702:	681b      	ldr	r3, [r3, #0]
 800f704:	3b01      	subs	r3, #1
 800f706:	4a38      	ldr	r2, [pc, #224]	; (800f7e8 <xTaskResumeAll+0x118>)
 800f708:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f70a:	4b37      	ldr	r3, [pc, #220]	; (800f7e8 <xTaskResumeAll+0x118>)
 800f70c:	681b      	ldr	r3, [r3, #0]
 800f70e:	2b00      	cmp	r3, #0
 800f710:	d162      	bne.n	800f7d8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800f712:	4b36      	ldr	r3, [pc, #216]	; (800f7ec <xTaskResumeAll+0x11c>)
 800f714:	681b      	ldr	r3, [r3, #0]
 800f716:	2b00      	cmp	r3, #0
 800f718:	d05e      	beq.n	800f7d8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f71a:	e02f      	b.n	800f77c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f71c:	4b34      	ldr	r3, [pc, #208]	; (800f7f0 <xTaskResumeAll+0x120>)
 800f71e:	68db      	ldr	r3, [r3, #12]
 800f720:	68db      	ldr	r3, [r3, #12]
 800f722:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f724:	68fb      	ldr	r3, [r7, #12]
 800f726:	3318      	adds	r3, #24
 800f728:	4618      	mov	r0, r3
 800f72a:	f7fe fe95 	bl	800e458 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f72e:	68fb      	ldr	r3, [r7, #12]
 800f730:	3304      	adds	r3, #4
 800f732:	4618      	mov	r0, r3
 800f734:	f7fe fe90 	bl	800e458 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800f738:	68fb      	ldr	r3, [r7, #12]
 800f73a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f73c:	4b2d      	ldr	r3, [pc, #180]	; (800f7f4 <xTaskResumeAll+0x124>)
 800f73e:	681b      	ldr	r3, [r3, #0]
 800f740:	429a      	cmp	r2, r3
 800f742:	d903      	bls.n	800f74c <xTaskResumeAll+0x7c>
 800f744:	68fb      	ldr	r3, [r7, #12]
 800f746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f748:	4a2a      	ldr	r2, [pc, #168]	; (800f7f4 <xTaskResumeAll+0x124>)
 800f74a:	6013      	str	r3, [r2, #0]
 800f74c:	68fb      	ldr	r3, [r7, #12]
 800f74e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f750:	4613      	mov	r3, r2
 800f752:	009b      	lsls	r3, r3, #2
 800f754:	4413      	add	r3, r2
 800f756:	009b      	lsls	r3, r3, #2
 800f758:	4a27      	ldr	r2, [pc, #156]	; (800f7f8 <xTaskResumeAll+0x128>)
 800f75a:	441a      	add	r2, r3
 800f75c:	68fb      	ldr	r3, [r7, #12]
 800f75e:	3304      	adds	r3, #4
 800f760:	4619      	mov	r1, r3
 800f762:	4610      	mov	r0, r2
 800f764:	f7fe fe1b 	bl	800e39e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f768:	68fb      	ldr	r3, [r7, #12]
 800f76a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f76c:	4b23      	ldr	r3, [pc, #140]	; (800f7fc <xTaskResumeAll+0x12c>)
 800f76e:	681b      	ldr	r3, [r3, #0]
 800f770:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f772:	429a      	cmp	r2, r3
 800f774:	d302      	bcc.n	800f77c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800f776:	4b22      	ldr	r3, [pc, #136]	; (800f800 <xTaskResumeAll+0x130>)
 800f778:	2201      	movs	r2, #1
 800f77a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f77c:	4b1c      	ldr	r3, [pc, #112]	; (800f7f0 <xTaskResumeAll+0x120>)
 800f77e:	681b      	ldr	r3, [r3, #0]
 800f780:	2b00      	cmp	r3, #0
 800f782:	d1cb      	bne.n	800f71c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800f784:	68fb      	ldr	r3, [r7, #12]
 800f786:	2b00      	cmp	r3, #0
 800f788:	d001      	beq.n	800f78e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800f78a:	f000 fb7b 	bl	800fe84 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800f78e:	4b1d      	ldr	r3, [pc, #116]	; (800f804 <xTaskResumeAll+0x134>)
 800f790:	681b      	ldr	r3, [r3, #0]
 800f792:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800f794:	687b      	ldr	r3, [r7, #4]
 800f796:	2b00      	cmp	r3, #0
 800f798:	d010      	beq.n	800f7bc <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800f79a:	f000 f847 	bl	800f82c <xTaskIncrementTick>
 800f79e:	4603      	mov	r3, r0
 800f7a0:	2b00      	cmp	r3, #0
 800f7a2:	d002      	beq.n	800f7aa <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800f7a4:	4b16      	ldr	r3, [pc, #88]	; (800f800 <xTaskResumeAll+0x130>)
 800f7a6:	2201      	movs	r2, #1
 800f7a8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800f7aa:	687b      	ldr	r3, [r7, #4]
 800f7ac:	3b01      	subs	r3, #1
 800f7ae:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800f7b0:	687b      	ldr	r3, [r7, #4]
 800f7b2:	2b00      	cmp	r3, #0
 800f7b4:	d1f1      	bne.n	800f79a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800f7b6:	4b13      	ldr	r3, [pc, #76]	; (800f804 <xTaskResumeAll+0x134>)
 800f7b8:	2200      	movs	r2, #0
 800f7ba:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800f7bc:	4b10      	ldr	r3, [pc, #64]	; (800f800 <xTaskResumeAll+0x130>)
 800f7be:	681b      	ldr	r3, [r3, #0]
 800f7c0:	2b00      	cmp	r3, #0
 800f7c2:	d009      	beq.n	800f7d8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800f7c4:	2301      	movs	r3, #1
 800f7c6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800f7c8:	4b0f      	ldr	r3, [pc, #60]	; (800f808 <xTaskResumeAll+0x138>)
 800f7ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f7ce:	601a      	str	r2, [r3, #0]
 800f7d0:	f3bf 8f4f 	dsb	sy
 800f7d4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800f7d8:	f001 fb04 	bl	8010de4 <vPortExitCritical>

	return xAlreadyYielded;
 800f7dc:	68bb      	ldr	r3, [r7, #8]
}
 800f7de:	4618      	mov	r0, r3
 800f7e0:	3710      	adds	r7, #16
 800f7e2:	46bd      	mov	sp, r7
 800f7e4:	bd80      	pop	{r7, pc}
 800f7e6:	bf00      	nop
 800f7e8:	200022b8 	.word	0x200022b8
 800f7ec:	20002290 	.word	0x20002290
 800f7f0:	20002250 	.word	0x20002250
 800f7f4:	20002298 	.word	0x20002298
 800f7f8:	20001dc0 	.word	0x20001dc0
 800f7fc:	20001dbc 	.word	0x20001dbc
 800f800:	200022a4 	.word	0x200022a4
 800f804:	200022a0 	.word	0x200022a0
 800f808:	e000ed04 	.word	0xe000ed04

0800f80c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800f80c:	b480      	push	{r7}
 800f80e:	b083      	sub	sp, #12
 800f810:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800f812:	4b05      	ldr	r3, [pc, #20]	; (800f828 <xTaskGetTickCount+0x1c>)
 800f814:	681b      	ldr	r3, [r3, #0]
 800f816:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800f818:	687b      	ldr	r3, [r7, #4]
}
 800f81a:	4618      	mov	r0, r3
 800f81c:	370c      	adds	r7, #12
 800f81e:	46bd      	mov	sp, r7
 800f820:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f824:	4770      	bx	lr
 800f826:	bf00      	nop
 800f828:	20002294 	.word	0x20002294

0800f82c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800f82c:	b580      	push	{r7, lr}
 800f82e:	b086      	sub	sp, #24
 800f830:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800f832:	2300      	movs	r3, #0
 800f834:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f836:	4b4f      	ldr	r3, [pc, #316]	; (800f974 <xTaskIncrementTick+0x148>)
 800f838:	681b      	ldr	r3, [r3, #0]
 800f83a:	2b00      	cmp	r3, #0
 800f83c:	f040 808f 	bne.w	800f95e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800f840:	4b4d      	ldr	r3, [pc, #308]	; (800f978 <xTaskIncrementTick+0x14c>)
 800f842:	681b      	ldr	r3, [r3, #0]
 800f844:	3301      	adds	r3, #1
 800f846:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800f848:	4a4b      	ldr	r2, [pc, #300]	; (800f978 <xTaskIncrementTick+0x14c>)
 800f84a:	693b      	ldr	r3, [r7, #16]
 800f84c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800f84e:	693b      	ldr	r3, [r7, #16]
 800f850:	2b00      	cmp	r3, #0
 800f852:	d120      	bne.n	800f896 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800f854:	4b49      	ldr	r3, [pc, #292]	; (800f97c <xTaskIncrementTick+0x150>)
 800f856:	681b      	ldr	r3, [r3, #0]
 800f858:	681b      	ldr	r3, [r3, #0]
 800f85a:	2b00      	cmp	r3, #0
 800f85c:	d00a      	beq.n	800f874 <xTaskIncrementTick+0x48>
	__asm volatile
 800f85e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f862:	f383 8811 	msr	BASEPRI, r3
 800f866:	f3bf 8f6f 	isb	sy
 800f86a:	f3bf 8f4f 	dsb	sy
 800f86e:	603b      	str	r3, [r7, #0]
}
 800f870:	bf00      	nop
 800f872:	e7fe      	b.n	800f872 <xTaskIncrementTick+0x46>
 800f874:	4b41      	ldr	r3, [pc, #260]	; (800f97c <xTaskIncrementTick+0x150>)
 800f876:	681b      	ldr	r3, [r3, #0]
 800f878:	60fb      	str	r3, [r7, #12]
 800f87a:	4b41      	ldr	r3, [pc, #260]	; (800f980 <xTaskIncrementTick+0x154>)
 800f87c:	681b      	ldr	r3, [r3, #0]
 800f87e:	4a3f      	ldr	r2, [pc, #252]	; (800f97c <xTaskIncrementTick+0x150>)
 800f880:	6013      	str	r3, [r2, #0]
 800f882:	4a3f      	ldr	r2, [pc, #252]	; (800f980 <xTaskIncrementTick+0x154>)
 800f884:	68fb      	ldr	r3, [r7, #12]
 800f886:	6013      	str	r3, [r2, #0]
 800f888:	4b3e      	ldr	r3, [pc, #248]	; (800f984 <xTaskIncrementTick+0x158>)
 800f88a:	681b      	ldr	r3, [r3, #0]
 800f88c:	3301      	adds	r3, #1
 800f88e:	4a3d      	ldr	r2, [pc, #244]	; (800f984 <xTaskIncrementTick+0x158>)
 800f890:	6013      	str	r3, [r2, #0]
 800f892:	f000 faf7 	bl	800fe84 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800f896:	4b3c      	ldr	r3, [pc, #240]	; (800f988 <xTaskIncrementTick+0x15c>)
 800f898:	681b      	ldr	r3, [r3, #0]
 800f89a:	693a      	ldr	r2, [r7, #16]
 800f89c:	429a      	cmp	r2, r3
 800f89e:	d349      	bcc.n	800f934 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f8a0:	4b36      	ldr	r3, [pc, #216]	; (800f97c <xTaskIncrementTick+0x150>)
 800f8a2:	681b      	ldr	r3, [r3, #0]
 800f8a4:	681b      	ldr	r3, [r3, #0]
 800f8a6:	2b00      	cmp	r3, #0
 800f8a8:	d104      	bne.n	800f8b4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f8aa:	4b37      	ldr	r3, [pc, #220]	; (800f988 <xTaskIncrementTick+0x15c>)
 800f8ac:	f04f 32ff 	mov.w	r2, #4294967295
 800f8b0:	601a      	str	r2, [r3, #0]
					break;
 800f8b2:	e03f      	b.n	800f934 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f8b4:	4b31      	ldr	r3, [pc, #196]	; (800f97c <xTaskIncrementTick+0x150>)
 800f8b6:	681b      	ldr	r3, [r3, #0]
 800f8b8:	68db      	ldr	r3, [r3, #12]
 800f8ba:	68db      	ldr	r3, [r3, #12]
 800f8bc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800f8be:	68bb      	ldr	r3, [r7, #8]
 800f8c0:	685b      	ldr	r3, [r3, #4]
 800f8c2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800f8c4:	693a      	ldr	r2, [r7, #16]
 800f8c6:	687b      	ldr	r3, [r7, #4]
 800f8c8:	429a      	cmp	r2, r3
 800f8ca:	d203      	bcs.n	800f8d4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800f8cc:	4a2e      	ldr	r2, [pc, #184]	; (800f988 <xTaskIncrementTick+0x15c>)
 800f8ce:	687b      	ldr	r3, [r7, #4]
 800f8d0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800f8d2:	e02f      	b.n	800f934 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f8d4:	68bb      	ldr	r3, [r7, #8]
 800f8d6:	3304      	adds	r3, #4
 800f8d8:	4618      	mov	r0, r3
 800f8da:	f7fe fdbd 	bl	800e458 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800f8de:	68bb      	ldr	r3, [r7, #8]
 800f8e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f8e2:	2b00      	cmp	r3, #0
 800f8e4:	d004      	beq.n	800f8f0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f8e6:	68bb      	ldr	r3, [r7, #8]
 800f8e8:	3318      	adds	r3, #24
 800f8ea:	4618      	mov	r0, r3
 800f8ec:	f7fe fdb4 	bl	800e458 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800f8f0:	68bb      	ldr	r3, [r7, #8]
 800f8f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f8f4:	4b25      	ldr	r3, [pc, #148]	; (800f98c <xTaskIncrementTick+0x160>)
 800f8f6:	681b      	ldr	r3, [r3, #0]
 800f8f8:	429a      	cmp	r2, r3
 800f8fa:	d903      	bls.n	800f904 <xTaskIncrementTick+0xd8>
 800f8fc:	68bb      	ldr	r3, [r7, #8]
 800f8fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f900:	4a22      	ldr	r2, [pc, #136]	; (800f98c <xTaskIncrementTick+0x160>)
 800f902:	6013      	str	r3, [r2, #0]
 800f904:	68bb      	ldr	r3, [r7, #8]
 800f906:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f908:	4613      	mov	r3, r2
 800f90a:	009b      	lsls	r3, r3, #2
 800f90c:	4413      	add	r3, r2
 800f90e:	009b      	lsls	r3, r3, #2
 800f910:	4a1f      	ldr	r2, [pc, #124]	; (800f990 <xTaskIncrementTick+0x164>)
 800f912:	441a      	add	r2, r3
 800f914:	68bb      	ldr	r3, [r7, #8]
 800f916:	3304      	adds	r3, #4
 800f918:	4619      	mov	r1, r3
 800f91a:	4610      	mov	r0, r2
 800f91c:	f7fe fd3f 	bl	800e39e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f920:	68bb      	ldr	r3, [r7, #8]
 800f922:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f924:	4b1b      	ldr	r3, [pc, #108]	; (800f994 <xTaskIncrementTick+0x168>)
 800f926:	681b      	ldr	r3, [r3, #0]
 800f928:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f92a:	429a      	cmp	r2, r3
 800f92c:	d3b8      	bcc.n	800f8a0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800f92e:	2301      	movs	r3, #1
 800f930:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f932:	e7b5      	b.n	800f8a0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800f934:	4b17      	ldr	r3, [pc, #92]	; (800f994 <xTaskIncrementTick+0x168>)
 800f936:	681b      	ldr	r3, [r3, #0]
 800f938:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f93a:	4915      	ldr	r1, [pc, #84]	; (800f990 <xTaskIncrementTick+0x164>)
 800f93c:	4613      	mov	r3, r2
 800f93e:	009b      	lsls	r3, r3, #2
 800f940:	4413      	add	r3, r2
 800f942:	009b      	lsls	r3, r3, #2
 800f944:	440b      	add	r3, r1
 800f946:	681b      	ldr	r3, [r3, #0]
 800f948:	2b01      	cmp	r3, #1
 800f94a:	d901      	bls.n	800f950 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800f94c:	2301      	movs	r3, #1
 800f94e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800f950:	4b11      	ldr	r3, [pc, #68]	; (800f998 <xTaskIncrementTick+0x16c>)
 800f952:	681b      	ldr	r3, [r3, #0]
 800f954:	2b00      	cmp	r3, #0
 800f956:	d007      	beq.n	800f968 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800f958:	2301      	movs	r3, #1
 800f95a:	617b      	str	r3, [r7, #20]
 800f95c:	e004      	b.n	800f968 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800f95e:	4b0f      	ldr	r3, [pc, #60]	; (800f99c <xTaskIncrementTick+0x170>)
 800f960:	681b      	ldr	r3, [r3, #0]
 800f962:	3301      	adds	r3, #1
 800f964:	4a0d      	ldr	r2, [pc, #52]	; (800f99c <xTaskIncrementTick+0x170>)
 800f966:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800f968:	697b      	ldr	r3, [r7, #20]
}
 800f96a:	4618      	mov	r0, r3
 800f96c:	3718      	adds	r7, #24
 800f96e:	46bd      	mov	sp, r7
 800f970:	bd80      	pop	{r7, pc}
 800f972:	bf00      	nop
 800f974:	200022b8 	.word	0x200022b8
 800f978:	20002294 	.word	0x20002294
 800f97c:	20002248 	.word	0x20002248
 800f980:	2000224c 	.word	0x2000224c
 800f984:	200022a8 	.word	0x200022a8
 800f988:	200022b0 	.word	0x200022b0
 800f98c:	20002298 	.word	0x20002298
 800f990:	20001dc0 	.word	0x20001dc0
 800f994:	20001dbc 	.word	0x20001dbc
 800f998:	200022a4 	.word	0x200022a4
 800f99c:	200022a0 	.word	0x200022a0

0800f9a0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800f9a0:	b580      	push	{r7, lr}
 800f9a2:	b084      	sub	sp, #16
 800f9a4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800f9a6:	4b36      	ldr	r3, [pc, #216]	; (800fa80 <vTaskSwitchContext+0xe0>)
 800f9a8:	681b      	ldr	r3, [r3, #0]
 800f9aa:	2b00      	cmp	r3, #0
 800f9ac:	d003      	beq.n	800f9b6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800f9ae:	4b35      	ldr	r3, [pc, #212]	; (800fa84 <vTaskSwitchContext+0xe4>)
 800f9b0:	2201      	movs	r2, #1
 800f9b2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800f9b4:	e05f      	b.n	800fa76 <vTaskSwitchContext+0xd6>
		xYieldPending = pdFALSE;
 800f9b6:	4b33      	ldr	r3, [pc, #204]	; (800fa84 <vTaskSwitchContext+0xe4>)
 800f9b8:	2200      	movs	r2, #0
 800f9ba:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800f9bc:	f7f0 fe18 	bl	80005f0 <getRunTimeCounterValue>
 800f9c0:	4603      	mov	r3, r0
 800f9c2:	4a31      	ldr	r2, [pc, #196]	; (800fa88 <vTaskSwitchContext+0xe8>)
 800f9c4:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 800f9c6:	4b30      	ldr	r3, [pc, #192]	; (800fa88 <vTaskSwitchContext+0xe8>)
 800f9c8:	681a      	ldr	r2, [r3, #0]
 800f9ca:	4b30      	ldr	r3, [pc, #192]	; (800fa8c <vTaskSwitchContext+0xec>)
 800f9cc:	681b      	ldr	r3, [r3, #0]
 800f9ce:	429a      	cmp	r2, r3
 800f9d0:	d909      	bls.n	800f9e6 <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 800f9d2:	4b2f      	ldr	r3, [pc, #188]	; (800fa90 <vTaskSwitchContext+0xf0>)
 800f9d4:	681b      	ldr	r3, [r3, #0]
 800f9d6:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800f9d8:	4a2b      	ldr	r2, [pc, #172]	; (800fa88 <vTaskSwitchContext+0xe8>)
 800f9da:	6810      	ldr	r0, [r2, #0]
 800f9dc:	4a2b      	ldr	r2, [pc, #172]	; (800fa8c <vTaskSwitchContext+0xec>)
 800f9de:	6812      	ldr	r2, [r2, #0]
 800f9e0:	1a82      	subs	r2, r0, r2
 800f9e2:	440a      	add	r2, r1
 800f9e4:	655a      	str	r2, [r3, #84]	; 0x54
			ulTaskSwitchedInTime = ulTotalRunTime;
 800f9e6:	4b28      	ldr	r3, [pc, #160]	; (800fa88 <vTaskSwitchContext+0xe8>)
 800f9e8:	681b      	ldr	r3, [r3, #0]
 800f9ea:	4a28      	ldr	r2, [pc, #160]	; (800fa8c <vTaskSwitchContext+0xec>)
 800f9ec:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f9ee:	4b29      	ldr	r3, [pc, #164]	; (800fa94 <vTaskSwitchContext+0xf4>)
 800f9f0:	681b      	ldr	r3, [r3, #0]
 800f9f2:	60fb      	str	r3, [r7, #12]
 800f9f4:	e010      	b.n	800fa18 <vTaskSwitchContext+0x78>
 800f9f6:	68fb      	ldr	r3, [r7, #12]
 800f9f8:	2b00      	cmp	r3, #0
 800f9fa:	d10a      	bne.n	800fa12 <vTaskSwitchContext+0x72>
	__asm volatile
 800f9fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa00:	f383 8811 	msr	BASEPRI, r3
 800fa04:	f3bf 8f6f 	isb	sy
 800fa08:	f3bf 8f4f 	dsb	sy
 800fa0c:	607b      	str	r3, [r7, #4]
}
 800fa0e:	bf00      	nop
 800fa10:	e7fe      	b.n	800fa10 <vTaskSwitchContext+0x70>
 800fa12:	68fb      	ldr	r3, [r7, #12]
 800fa14:	3b01      	subs	r3, #1
 800fa16:	60fb      	str	r3, [r7, #12]
 800fa18:	491f      	ldr	r1, [pc, #124]	; (800fa98 <vTaskSwitchContext+0xf8>)
 800fa1a:	68fa      	ldr	r2, [r7, #12]
 800fa1c:	4613      	mov	r3, r2
 800fa1e:	009b      	lsls	r3, r3, #2
 800fa20:	4413      	add	r3, r2
 800fa22:	009b      	lsls	r3, r3, #2
 800fa24:	440b      	add	r3, r1
 800fa26:	681b      	ldr	r3, [r3, #0]
 800fa28:	2b00      	cmp	r3, #0
 800fa2a:	d0e4      	beq.n	800f9f6 <vTaskSwitchContext+0x56>
 800fa2c:	68fa      	ldr	r2, [r7, #12]
 800fa2e:	4613      	mov	r3, r2
 800fa30:	009b      	lsls	r3, r3, #2
 800fa32:	4413      	add	r3, r2
 800fa34:	009b      	lsls	r3, r3, #2
 800fa36:	4a18      	ldr	r2, [pc, #96]	; (800fa98 <vTaskSwitchContext+0xf8>)
 800fa38:	4413      	add	r3, r2
 800fa3a:	60bb      	str	r3, [r7, #8]
 800fa3c:	68bb      	ldr	r3, [r7, #8]
 800fa3e:	685b      	ldr	r3, [r3, #4]
 800fa40:	685a      	ldr	r2, [r3, #4]
 800fa42:	68bb      	ldr	r3, [r7, #8]
 800fa44:	605a      	str	r2, [r3, #4]
 800fa46:	68bb      	ldr	r3, [r7, #8]
 800fa48:	685a      	ldr	r2, [r3, #4]
 800fa4a:	68bb      	ldr	r3, [r7, #8]
 800fa4c:	3308      	adds	r3, #8
 800fa4e:	429a      	cmp	r2, r3
 800fa50:	d104      	bne.n	800fa5c <vTaskSwitchContext+0xbc>
 800fa52:	68bb      	ldr	r3, [r7, #8]
 800fa54:	685b      	ldr	r3, [r3, #4]
 800fa56:	685a      	ldr	r2, [r3, #4]
 800fa58:	68bb      	ldr	r3, [r7, #8]
 800fa5a:	605a      	str	r2, [r3, #4]
 800fa5c:	68bb      	ldr	r3, [r7, #8]
 800fa5e:	685b      	ldr	r3, [r3, #4]
 800fa60:	68db      	ldr	r3, [r3, #12]
 800fa62:	4a0b      	ldr	r2, [pc, #44]	; (800fa90 <vTaskSwitchContext+0xf0>)
 800fa64:	6013      	str	r3, [r2, #0]
 800fa66:	4a0b      	ldr	r2, [pc, #44]	; (800fa94 <vTaskSwitchContext+0xf4>)
 800fa68:	68fb      	ldr	r3, [r7, #12]
 800fa6a:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800fa6c:	4b08      	ldr	r3, [pc, #32]	; (800fa90 <vTaskSwitchContext+0xf0>)
 800fa6e:	681b      	ldr	r3, [r3, #0]
 800fa70:	3358      	adds	r3, #88	; 0x58
 800fa72:	4a0a      	ldr	r2, [pc, #40]	; (800fa9c <vTaskSwitchContext+0xfc>)
 800fa74:	6013      	str	r3, [r2, #0]
}
 800fa76:	bf00      	nop
 800fa78:	3710      	adds	r7, #16
 800fa7a:	46bd      	mov	sp, r7
 800fa7c:	bd80      	pop	{r7, pc}
 800fa7e:	bf00      	nop
 800fa80:	200022b8 	.word	0x200022b8
 800fa84:	200022a4 	.word	0x200022a4
 800fa88:	200022c0 	.word	0x200022c0
 800fa8c:	200022bc 	.word	0x200022bc
 800fa90:	20001dbc 	.word	0x20001dbc
 800fa94:	20002298 	.word	0x20002298
 800fa98:	20001dc0 	.word	0x20001dc0
 800fa9c:	20000050 	.word	0x20000050

0800faa0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800faa0:	b580      	push	{r7, lr}
 800faa2:	b084      	sub	sp, #16
 800faa4:	af00      	add	r7, sp, #0
 800faa6:	6078      	str	r0, [r7, #4]
 800faa8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800faaa:	687b      	ldr	r3, [r7, #4]
 800faac:	2b00      	cmp	r3, #0
 800faae:	d10a      	bne.n	800fac6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800fab0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fab4:	f383 8811 	msr	BASEPRI, r3
 800fab8:	f3bf 8f6f 	isb	sy
 800fabc:	f3bf 8f4f 	dsb	sy
 800fac0:	60fb      	str	r3, [r7, #12]
}
 800fac2:	bf00      	nop
 800fac4:	e7fe      	b.n	800fac4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800fac6:	4b07      	ldr	r3, [pc, #28]	; (800fae4 <vTaskPlaceOnEventList+0x44>)
 800fac8:	681b      	ldr	r3, [r3, #0]
 800faca:	3318      	adds	r3, #24
 800facc:	4619      	mov	r1, r3
 800face:	6878      	ldr	r0, [r7, #4]
 800fad0:	f7fe fc89 	bl	800e3e6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800fad4:	2101      	movs	r1, #1
 800fad6:	6838      	ldr	r0, [r7, #0]
 800fad8:	f000 fc82 	bl	80103e0 <prvAddCurrentTaskToDelayedList>
}
 800fadc:	bf00      	nop
 800fade:	3710      	adds	r7, #16
 800fae0:	46bd      	mov	sp, r7
 800fae2:	bd80      	pop	{r7, pc}
 800fae4:	20001dbc 	.word	0x20001dbc

0800fae8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800fae8:	b580      	push	{r7, lr}
 800faea:	b086      	sub	sp, #24
 800faec:	af00      	add	r7, sp, #0
 800faee:	60f8      	str	r0, [r7, #12]
 800faf0:	60b9      	str	r1, [r7, #8]
 800faf2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800faf4:	68fb      	ldr	r3, [r7, #12]
 800faf6:	2b00      	cmp	r3, #0
 800faf8:	d10a      	bne.n	800fb10 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800fafa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fafe:	f383 8811 	msr	BASEPRI, r3
 800fb02:	f3bf 8f6f 	isb	sy
 800fb06:	f3bf 8f4f 	dsb	sy
 800fb0a:	617b      	str	r3, [r7, #20]
}
 800fb0c:	bf00      	nop
 800fb0e:	e7fe      	b.n	800fb0e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800fb10:	4b0a      	ldr	r3, [pc, #40]	; (800fb3c <vTaskPlaceOnEventListRestricted+0x54>)
 800fb12:	681b      	ldr	r3, [r3, #0]
 800fb14:	3318      	adds	r3, #24
 800fb16:	4619      	mov	r1, r3
 800fb18:	68f8      	ldr	r0, [r7, #12]
 800fb1a:	f7fe fc40 	bl	800e39e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800fb1e:	687b      	ldr	r3, [r7, #4]
 800fb20:	2b00      	cmp	r3, #0
 800fb22:	d002      	beq.n	800fb2a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800fb24:	f04f 33ff 	mov.w	r3, #4294967295
 800fb28:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800fb2a:	6879      	ldr	r1, [r7, #4]
 800fb2c:	68b8      	ldr	r0, [r7, #8]
 800fb2e:	f000 fc57 	bl	80103e0 <prvAddCurrentTaskToDelayedList>
	}
 800fb32:	bf00      	nop
 800fb34:	3718      	adds	r7, #24
 800fb36:	46bd      	mov	sp, r7
 800fb38:	bd80      	pop	{r7, pc}
 800fb3a:	bf00      	nop
 800fb3c:	20001dbc 	.word	0x20001dbc

0800fb40 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800fb40:	b580      	push	{r7, lr}
 800fb42:	b086      	sub	sp, #24
 800fb44:	af00      	add	r7, sp, #0
 800fb46:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fb48:	687b      	ldr	r3, [r7, #4]
 800fb4a:	68db      	ldr	r3, [r3, #12]
 800fb4c:	68db      	ldr	r3, [r3, #12]
 800fb4e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800fb50:	693b      	ldr	r3, [r7, #16]
 800fb52:	2b00      	cmp	r3, #0
 800fb54:	d10a      	bne.n	800fb6c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800fb56:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb5a:	f383 8811 	msr	BASEPRI, r3
 800fb5e:	f3bf 8f6f 	isb	sy
 800fb62:	f3bf 8f4f 	dsb	sy
 800fb66:	60fb      	str	r3, [r7, #12]
}
 800fb68:	bf00      	nop
 800fb6a:	e7fe      	b.n	800fb6a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800fb6c:	693b      	ldr	r3, [r7, #16]
 800fb6e:	3318      	adds	r3, #24
 800fb70:	4618      	mov	r0, r3
 800fb72:	f7fe fc71 	bl	800e458 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fb76:	4b1e      	ldr	r3, [pc, #120]	; (800fbf0 <xTaskRemoveFromEventList+0xb0>)
 800fb78:	681b      	ldr	r3, [r3, #0]
 800fb7a:	2b00      	cmp	r3, #0
 800fb7c:	d11d      	bne.n	800fbba <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800fb7e:	693b      	ldr	r3, [r7, #16]
 800fb80:	3304      	adds	r3, #4
 800fb82:	4618      	mov	r0, r3
 800fb84:	f7fe fc68 	bl	800e458 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800fb88:	693b      	ldr	r3, [r7, #16]
 800fb8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fb8c:	4b19      	ldr	r3, [pc, #100]	; (800fbf4 <xTaskRemoveFromEventList+0xb4>)
 800fb8e:	681b      	ldr	r3, [r3, #0]
 800fb90:	429a      	cmp	r2, r3
 800fb92:	d903      	bls.n	800fb9c <xTaskRemoveFromEventList+0x5c>
 800fb94:	693b      	ldr	r3, [r7, #16]
 800fb96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fb98:	4a16      	ldr	r2, [pc, #88]	; (800fbf4 <xTaskRemoveFromEventList+0xb4>)
 800fb9a:	6013      	str	r3, [r2, #0]
 800fb9c:	693b      	ldr	r3, [r7, #16]
 800fb9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fba0:	4613      	mov	r3, r2
 800fba2:	009b      	lsls	r3, r3, #2
 800fba4:	4413      	add	r3, r2
 800fba6:	009b      	lsls	r3, r3, #2
 800fba8:	4a13      	ldr	r2, [pc, #76]	; (800fbf8 <xTaskRemoveFromEventList+0xb8>)
 800fbaa:	441a      	add	r2, r3
 800fbac:	693b      	ldr	r3, [r7, #16]
 800fbae:	3304      	adds	r3, #4
 800fbb0:	4619      	mov	r1, r3
 800fbb2:	4610      	mov	r0, r2
 800fbb4:	f7fe fbf3 	bl	800e39e <vListInsertEnd>
 800fbb8:	e005      	b.n	800fbc6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800fbba:	693b      	ldr	r3, [r7, #16]
 800fbbc:	3318      	adds	r3, #24
 800fbbe:	4619      	mov	r1, r3
 800fbc0:	480e      	ldr	r0, [pc, #56]	; (800fbfc <xTaskRemoveFromEventList+0xbc>)
 800fbc2:	f7fe fbec 	bl	800e39e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800fbc6:	693b      	ldr	r3, [r7, #16]
 800fbc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fbca:	4b0d      	ldr	r3, [pc, #52]	; (800fc00 <xTaskRemoveFromEventList+0xc0>)
 800fbcc:	681b      	ldr	r3, [r3, #0]
 800fbce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fbd0:	429a      	cmp	r2, r3
 800fbd2:	d905      	bls.n	800fbe0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800fbd4:	2301      	movs	r3, #1
 800fbd6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800fbd8:	4b0a      	ldr	r3, [pc, #40]	; (800fc04 <xTaskRemoveFromEventList+0xc4>)
 800fbda:	2201      	movs	r2, #1
 800fbdc:	601a      	str	r2, [r3, #0]
 800fbde:	e001      	b.n	800fbe4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800fbe0:	2300      	movs	r3, #0
 800fbe2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800fbe4:	697b      	ldr	r3, [r7, #20]
}
 800fbe6:	4618      	mov	r0, r3
 800fbe8:	3718      	adds	r7, #24
 800fbea:	46bd      	mov	sp, r7
 800fbec:	bd80      	pop	{r7, pc}
 800fbee:	bf00      	nop
 800fbf0:	200022b8 	.word	0x200022b8
 800fbf4:	20002298 	.word	0x20002298
 800fbf8:	20001dc0 	.word	0x20001dc0
 800fbfc:	20002250 	.word	0x20002250
 800fc00:	20001dbc 	.word	0x20001dbc
 800fc04:	200022a4 	.word	0x200022a4

0800fc08 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800fc08:	b480      	push	{r7}
 800fc0a:	b083      	sub	sp, #12
 800fc0c:	af00      	add	r7, sp, #0
 800fc0e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800fc10:	4b06      	ldr	r3, [pc, #24]	; (800fc2c <vTaskInternalSetTimeOutState+0x24>)
 800fc12:	681a      	ldr	r2, [r3, #0]
 800fc14:	687b      	ldr	r3, [r7, #4]
 800fc16:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800fc18:	4b05      	ldr	r3, [pc, #20]	; (800fc30 <vTaskInternalSetTimeOutState+0x28>)
 800fc1a:	681a      	ldr	r2, [r3, #0]
 800fc1c:	687b      	ldr	r3, [r7, #4]
 800fc1e:	605a      	str	r2, [r3, #4]
}
 800fc20:	bf00      	nop
 800fc22:	370c      	adds	r7, #12
 800fc24:	46bd      	mov	sp, r7
 800fc26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc2a:	4770      	bx	lr
 800fc2c:	200022a8 	.word	0x200022a8
 800fc30:	20002294 	.word	0x20002294

0800fc34 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800fc34:	b580      	push	{r7, lr}
 800fc36:	b088      	sub	sp, #32
 800fc38:	af00      	add	r7, sp, #0
 800fc3a:	6078      	str	r0, [r7, #4]
 800fc3c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800fc3e:	687b      	ldr	r3, [r7, #4]
 800fc40:	2b00      	cmp	r3, #0
 800fc42:	d10a      	bne.n	800fc5a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800fc44:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc48:	f383 8811 	msr	BASEPRI, r3
 800fc4c:	f3bf 8f6f 	isb	sy
 800fc50:	f3bf 8f4f 	dsb	sy
 800fc54:	613b      	str	r3, [r7, #16]
}
 800fc56:	bf00      	nop
 800fc58:	e7fe      	b.n	800fc58 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800fc5a:	683b      	ldr	r3, [r7, #0]
 800fc5c:	2b00      	cmp	r3, #0
 800fc5e:	d10a      	bne.n	800fc76 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800fc60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc64:	f383 8811 	msr	BASEPRI, r3
 800fc68:	f3bf 8f6f 	isb	sy
 800fc6c:	f3bf 8f4f 	dsb	sy
 800fc70:	60fb      	str	r3, [r7, #12]
}
 800fc72:	bf00      	nop
 800fc74:	e7fe      	b.n	800fc74 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800fc76:	f001 f885 	bl	8010d84 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800fc7a:	4b1d      	ldr	r3, [pc, #116]	; (800fcf0 <xTaskCheckForTimeOut+0xbc>)
 800fc7c:	681b      	ldr	r3, [r3, #0]
 800fc7e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800fc80:	687b      	ldr	r3, [r7, #4]
 800fc82:	685b      	ldr	r3, [r3, #4]
 800fc84:	69ba      	ldr	r2, [r7, #24]
 800fc86:	1ad3      	subs	r3, r2, r3
 800fc88:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800fc8a:	683b      	ldr	r3, [r7, #0]
 800fc8c:	681b      	ldr	r3, [r3, #0]
 800fc8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fc92:	d102      	bne.n	800fc9a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800fc94:	2300      	movs	r3, #0
 800fc96:	61fb      	str	r3, [r7, #28]
 800fc98:	e023      	b.n	800fce2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800fc9a:	687b      	ldr	r3, [r7, #4]
 800fc9c:	681a      	ldr	r2, [r3, #0]
 800fc9e:	4b15      	ldr	r3, [pc, #84]	; (800fcf4 <xTaskCheckForTimeOut+0xc0>)
 800fca0:	681b      	ldr	r3, [r3, #0]
 800fca2:	429a      	cmp	r2, r3
 800fca4:	d007      	beq.n	800fcb6 <xTaskCheckForTimeOut+0x82>
 800fca6:	687b      	ldr	r3, [r7, #4]
 800fca8:	685b      	ldr	r3, [r3, #4]
 800fcaa:	69ba      	ldr	r2, [r7, #24]
 800fcac:	429a      	cmp	r2, r3
 800fcae:	d302      	bcc.n	800fcb6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800fcb0:	2301      	movs	r3, #1
 800fcb2:	61fb      	str	r3, [r7, #28]
 800fcb4:	e015      	b.n	800fce2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800fcb6:	683b      	ldr	r3, [r7, #0]
 800fcb8:	681b      	ldr	r3, [r3, #0]
 800fcba:	697a      	ldr	r2, [r7, #20]
 800fcbc:	429a      	cmp	r2, r3
 800fcbe:	d20b      	bcs.n	800fcd8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800fcc0:	683b      	ldr	r3, [r7, #0]
 800fcc2:	681a      	ldr	r2, [r3, #0]
 800fcc4:	697b      	ldr	r3, [r7, #20]
 800fcc6:	1ad2      	subs	r2, r2, r3
 800fcc8:	683b      	ldr	r3, [r7, #0]
 800fcca:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800fccc:	6878      	ldr	r0, [r7, #4]
 800fcce:	f7ff ff9b 	bl	800fc08 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800fcd2:	2300      	movs	r3, #0
 800fcd4:	61fb      	str	r3, [r7, #28]
 800fcd6:	e004      	b.n	800fce2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800fcd8:	683b      	ldr	r3, [r7, #0]
 800fcda:	2200      	movs	r2, #0
 800fcdc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800fcde:	2301      	movs	r3, #1
 800fce0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800fce2:	f001 f87f 	bl	8010de4 <vPortExitCritical>

	return xReturn;
 800fce6:	69fb      	ldr	r3, [r7, #28]
}
 800fce8:	4618      	mov	r0, r3
 800fcea:	3720      	adds	r7, #32
 800fcec:	46bd      	mov	sp, r7
 800fcee:	bd80      	pop	{r7, pc}
 800fcf0:	20002294 	.word	0x20002294
 800fcf4:	200022a8 	.word	0x200022a8

0800fcf8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800fcf8:	b480      	push	{r7}
 800fcfa:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800fcfc:	4b03      	ldr	r3, [pc, #12]	; (800fd0c <vTaskMissedYield+0x14>)
 800fcfe:	2201      	movs	r2, #1
 800fd00:	601a      	str	r2, [r3, #0]
}
 800fd02:	bf00      	nop
 800fd04:	46bd      	mov	sp, r7
 800fd06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd0a:	4770      	bx	lr
 800fd0c:	200022a4 	.word	0x200022a4

0800fd10 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800fd10:	b580      	push	{r7, lr}
 800fd12:	b082      	sub	sp, #8
 800fd14:	af00      	add	r7, sp, #0
 800fd16:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800fd18:	f000 f852 	bl	800fdc0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800fd1c:	4b06      	ldr	r3, [pc, #24]	; (800fd38 <prvIdleTask+0x28>)
 800fd1e:	681b      	ldr	r3, [r3, #0]
 800fd20:	2b01      	cmp	r3, #1
 800fd22:	d9f9      	bls.n	800fd18 <prvIdleTask+0x8>
			{
				taskYIELD();
 800fd24:	4b05      	ldr	r3, [pc, #20]	; (800fd3c <prvIdleTask+0x2c>)
 800fd26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fd2a:	601a      	str	r2, [r3, #0]
 800fd2c:	f3bf 8f4f 	dsb	sy
 800fd30:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800fd34:	e7f0      	b.n	800fd18 <prvIdleTask+0x8>
 800fd36:	bf00      	nop
 800fd38:	20001dc0 	.word	0x20001dc0
 800fd3c:	e000ed04 	.word	0xe000ed04

0800fd40 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800fd40:	b580      	push	{r7, lr}
 800fd42:	b082      	sub	sp, #8
 800fd44:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800fd46:	2300      	movs	r3, #0
 800fd48:	607b      	str	r3, [r7, #4]
 800fd4a:	e00c      	b.n	800fd66 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800fd4c:	687a      	ldr	r2, [r7, #4]
 800fd4e:	4613      	mov	r3, r2
 800fd50:	009b      	lsls	r3, r3, #2
 800fd52:	4413      	add	r3, r2
 800fd54:	009b      	lsls	r3, r3, #2
 800fd56:	4a12      	ldr	r2, [pc, #72]	; (800fda0 <prvInitialiseTaskLists+0x60>)
 800fd58:	4413      	add	r3, r2
 800fd5a:	4618      	mov	r0, r3
 800fd5c:	f7fe faf2 	bl	800e344 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800fd60:	687b      	ldr	r3, [r7, #4]
 800fd62:	3301      	adds	r3, #1
 800fd64:	607b      	str	r3, [r7, #4]
 800fd66:	687b      	ldr	r3, [r7, #4]
 800fd68:	2b37      	cmp	r3, #55	; 0x37
 800fd6a:	d9ef      	bls.n	800fd4c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800fd6c:	480d      	ldr	r0, [pc, #52]	; (800fda4 <prvInitialiseTaskLists+0x64>)
 800fd6e:	f7fe fae9 	bl	800e344 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800fd72:	480d      	ldr	r0, [pc, #52]	; (800fda8 <prvInitialiseTaskLists+0x68>)
 800fd74:	f7fe fae6 	bl	800e344 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800fd78:	480c      	ldr	r0, [pc, #48]	; (800fdac <prvInitialiseTaskLists+0x6c>)
 800fd7a:	f7fe fae3 	bl	800e344 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800fd7e:	480c      	ldr	r0, [pc, #48]	; (800fdb0 <prvInitialiseTaskLists+0x70>)
 800fd80:	f7fe fae0 	bl	800e344 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800fd84:	480b      	ldr	r0, [pc, #44]	; (800fdb4 <prvInitialiseTaskLists+0x74>)
 800fd86:	f7fe fadd 	bl	800e344 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800fd8a:	4b0b      	ldr	r3, [pc, #44]	; (800fdb8 <prvInitialiseTaskLists+0x78>)
 800fd8c:	4a05      	ldr	r2, [pc, #20]	; (800fda4 <prvInitialiseTaskLists+0x64>)
 800fd8e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800fd90:	4b0a      	ldr	r3, [pc, #40]	; (800fdbc <prvInitialiseTaskLists+0x7c>)
 800fd92:	4a05      	ldr	r2, [pc, #20]	; (800fda8 <prvInitialiseTaskLists+0x68>)
 800fd94:	601a      	str	r2, [r3, #0]
}
 800fd96:	bf00      	nop
 800fd98:	3708      	adds	r7, #8
 800fd9a:	46bd      	mov	sp, r7
 800fd9c:	bd80      	pop	{r7, pc}
 800fd9e:	bf00      	nop
 800fda0:	20001dc0 	.word	0x20001dc0
 800fda4:	20002220 	.word	0x20002220
 800fda8:	20002234 	.word	0x20002234
 800fdac:	20002250 	.word	0x20002250
 800fdb0:	20002264 	.word	0x20002264
 800fdb4:	2000227c 	.word	0x2000227c
 800fdb8:	20002248 	.word	0x20002248
 800fdbc:	2000224c 	.word	0x2000224c

0800fdc0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800fdc0:	b580      	push	{r7, lr}
 800fdc2:	b082      	sub	sp, #8
 800fdc4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800fdc6:	e019      	b.n	800fdfc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800fdc8:	f000 ffdc 	bl	8010d84 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fdcc:	4b10      	ldr	r3, [pc, #64]	; (800fe10 <prvCheckTasksWaitingTermination+0x50>)
 800fdce:	68db      	ldr	r3, [r3, #12]
 800fdd0:	68db      	ldr	r3, [r3, #12]
 800fdd2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800fdd4:	687b      	ldr	r3, [r7, #4]
 800fdd6:	3304      	adds	r3, #4
 800fdd8:	4618      	mov	r0, r3
 800fdda:	f7fe fb3d 	bl	800e458 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800fdde:	4b0d      	ldr	r3, [pc, #52]	; (800fe14 <prvCheckTasksWaitingTermination+0x54>)
 800fde0:	681b      	ldr	r3, [r3, #0]
 800fde2:	3b01      	subs	r3, #1
 800fde4:	4a0b      	ldr	r2, [pc, #44]	; (800fe14 <prvCheckTasksWaitingTermination+0x54>)
 800fde6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800fde8:	4b0b      	ldr	r3, [pc, #44]	; (800fe18 <prvCheckTasksWaitingTermination+0x58>)
 800fdea:	681b      	ldr	r3, [r3, #0]
 800fdec:	3b01      	subs	r3, #1
 800fdee:	4a0a      	ldr	r2, [pc, #40]	; (800fe18 <prvCheckTasksWaitingTermination+0x58>)
 800fdf0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800fdf2:	f000 fff7 	bl	8010de4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800fdf6:	6878      	ldr	r0, [r7, #4]
 800fdf8:	f000 f810 	bl	800fe1c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800fdfc:	4b06      	ldr	r3, [pc, #24]	; (800fe18 <prvCheckTasksWaitingTermination+0x58>)
 800fdfe:	681b      	ldr	r3, [r3, #0]
 800fe00:	2b00      	cmp	r3, #0
 800fe02:	d1e1      	bne.n	800fdc8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800fe04:	bf00      	nop
 800fe06:	bf00      	nop
 800fe08:	3708      	adds	r7, #8
 800fe0a:	46bd      	mov	sp, r7
 800fe0c:	bd80      	pop	{r7, pc}
 800fe0e:	bf00      	nop
 800fe10:	20002264 	.word	0x20002264
 800fe14:	20002290 	.word	0x20002290
 800fe18:	20002278 	.word	0x20002278

0800fe1c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800fe1c:	b580      	push	{r7, lr}
 800fe1e:	b084      	sub	sp, #16
 800fe20:	af00      	add	r7, sp, #0
 800fe22:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800fe24:	687b      	ldr	r3, [r7, #4]
 800fe26:	3358      	adds	r3, #88	; 0x58
 800fe28:	4618      	mov	r0, r3
 800fe2a:	f002 f869 	bl	8011f00 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800fe2e:	687b      	ldr	r3, [r7, #4]
 800fe30:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 800fe34:	2b00      	cmp	r3, #0
 800fe36:	d108      	bne.n	800fe4a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800fe38:	687b      	ldr	r3, [r7, #4]
 800fe3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fe3c:	4618      	mov	r0, r3
 800fe3e:	f001 f98f 	bl	8011160 <vPortFree>
				vPortFree( pxTCB );
 800fe42:	6878      	ldr	r0, [r7, #4]
 800fe44:	f001 f98c 	bl	8011160 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800fe48:	e018      	b.n	800fe7c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800fe4a:	687b      	ldr	r3, [r7, #4]
 800fe4c:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 800fe50:	2b01      	cmp	r3, #1
 800fe52:	d103      	bne.n	800fe5c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800fe54:	6878      	ldr	r0, [r7, #4]
 800fe56:	f001 f983 	bl	8011160 <vPortFree>
	}
 800fe5a:	e00f      	b.n	800fe7c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800fe5c:	687b      	ldr	r3, [r7, #4]
 800fe5e:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 800fe62:	2b02      	cmp	r3, #2
 800fe64:	d00a      	beq.n	800fe7c <prvDeleteTCB+0x60>
	__asm volatile
 800fe66:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe6a:	f383 8811 	msr	BASEPRI, r3
 800fe6e:	f3bf 8f6f 	isb	sy
 800fe72:	f3bf 8f4f 	dsb	sy
 800fe76:	60fb      	str	r3, [r7, #12]
}
 800fe78:	bf00      	nop
 800fe7a:	e7fe      	b.n	800fe7a <prvDeleteTCB+0x5e>
	}
 800fe7c:	bf00      	nop
 800fe7e:	3710      	adds	r7, #16
 800fe80:	46bd      	mov	sp, r7
 800fe82:	bd80      	pop	{r7, pc}

0800fe84 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800fe84:	b480      	push	{r7}
 800fe86:	b083      	sub	sp, #12
 800fe88:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800fe8a:	4b0c      	ldr	r3, [pc, #48]	; (800febc <prvResetNextTaskUnblockTime+0x38>)
 800fe8c:	681b      	ldr	r3, [r3, #0]
 800fe8e:	681b      	ldr	r3, [r3, #0]
 800fe90:	2b00      	cmp	r3, #0
 800fe92:	d104      	bne.n	800fe9e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800fe94:	4b0a      	ldr	r3, [pc, #40]	; (800fec0 <prvResetNextTaskUnblockTime+0x3c>)
 800fe96:	f04f 32ff 	mov.w	r2, #4294967295
 800fe9a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800fe9c:	e008      	b.n	800feb0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fe9e:	4b07      	ldr	r3, [pc, #28]	; (800febc <prvResetNextTaskUnblockTime+0x38>)
 800fea0:	681b      	ldr	r3, [r3, #0]
 800fea2:	68db      	ldr	r3, [r3, #12]
 800fea4:	68db      	ldr	r3, [r3, #12]
 800fea6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800fea8:	687b      	ldr	r3, [r7, #4]
 800feaa:	685b      	ldr	r3, [r3, #4]
 800feac:	4a04      	ldr	r2, [pc, #16]	; (800fec0 <prvResetNextTaskUnblockTime+0x3c>)
 800feae:	6013      	str	r3, [r2, #0]
}
 800feb0:	bf00      	nop
 800feb2:	370c      	adds	r7, #12
 800feb4:	46bd      	mov	sp, r7
 800feb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800feba:	4770      	bx	lr
 800febc:	20002248 	.word	0x20002248
 800fec0:	200022b0 	.word	0x200022b0

0800fec4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800fec4:	b480      	push	{r7}
 800fec6:	b083      	sub	sp, #12
 800fec8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800feca:	4b0b      	ldr	r3, [pc, #44]	; (800fef8 <xTaskGetSchedulerState+0x34>)
 800fecc:	681b      	ldr	r3, [r3, #0]
 800fece:	2b00      	cmp	r3, #0
 800fed0:	d102      	bne.n	800fed8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800fed2:	2301      	movs	r3, #1
 800fed4:	607b      	str	r3, [r7, #4]
 800fed6:	e008      	b.n	800feea <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fed8:	4b08      	ldr	r3, [pc, #32]	; (800fefc <xTaskGetSchedulerState+0x38>)
 800feda:	681b      	ldr	r3, [r3, #0]
 800fedc:	2b00      	cmp	r3, #0
 800fede:	d102      	bne.n	800fee6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800fee0:	2302      	movs	r3, #2
 800fee2:	607b      	str	r3, [r7, #4]
 800fee4:	e001      	b.n	800feea <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800fee6:	2300      	movs	r3, #0
 800fee8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800feea:	687b      	ldr	r3, [r7, #4]
	}
 800feec:	4618      	mov	r0, r3
 800feee:	370c      	adds	r7, #12
 800fef0:	46bd      	mov	sp, r7
 800fef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fef6:	4770      	bx	lr
 800fef8:	2000229c 	.word	0x2000229c
 800fefc:	200022b8 	.word	0x200022b8

0800ff00 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800ff00:	b580      	push	{r7, lr}
 800ff02:	b086      	sub	sp, #24
 800ff04:	af00      	add	r7, sp, #0
 800ff06:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800ff08:	687b      	ldr	r3, [r7, #4]
 800ff0a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800ff0c:	2300      	movs	r3, #0
 800ff0e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ff10:	687b      	ldr	r3, [r7, #4]
 800ff12:	2b00      	cmp	r3, #0
 800ff14:	d056      	beq.n	800ffc4 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800ff16:	4b2e      	ldr	r3, [pc, #184]	; (800ffd0 <xTaskPriorityDisinherit+0xd0>)
 800ff18:	681b      	ldr	r3, [r3, #0]
 800ff1a:	693a      	ldr	r2, [r7, #16]
 800ff1c:	429a      	cmp	r2, r3
 800ff1e:	d00a      	beq.n	800ff36 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800ff20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff24:	f383 8811 	msr	BASEPRI, r3
 800ff28:	f3bf 8f6f 	isb	sy
 800ff2c:	f3bf 8f4f 	dsb	sy
 800ff30:	60fb      	str	r3, [r7, #12]
}
 800ff32:	bf00      	nop
 800ff34:	e7fe      	b.n	800ff34 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800ff36:	693b      	ldr	r3, [r7, #16]
 800ff38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ff3a:	2b00      	cmp	r3, #0
 800ff3c:	d10a      	bne.n	800ff54 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800ff3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff42:	f383 8811 	msr	BASEPRI, r3
 800ff46:	f3bf 8f6f 	isb	sy
 800ff4a:	f3bf 8f4f 	dsb	sy
 800ff4e:	60bb      	str	r3, [r7, #8]
}
 800ff50:	bf00      	nop
 800ff52:	e7fe      	b.n	800ff52 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800ff54:	693b      	ldr	r3, [r7, #16]
 800ff56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ff58:	1e5a      	subs	r2, r3, #1
 800ff5a:	693b      	ldr	r3, [r7, #16]
 800ff5c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ff5e:	693b      	ldr	r3, [r7, #16]
 800ff60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ff62:	693b      	ldr	r3, [r7, #16]
 800ff64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ff66:	429a      	cmp	r2, r3
 800ff68:	d02c      	beq.n	800ffc4 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800ff6a:	693b      	ldr	r3, [r7, #16]
 800ff6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ff6e:	2b00      	cmp	r3, #0
 800ff70:	d128      	bne.n	800ffc4 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ff72:	693b      	ldr	r3, [r7, #16]
 800ff74:	3304      	adds	r3, #4
 800ff76:	4618      	mov	r0, r3
 800ff78:	f7fe fa6e 	bl	800e458 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800ff7c:	693b      	ldr	r3, [r7, #16]
 800ff7e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ff80:	693b      	ldr	r3, [r7, #16]
 800ff82:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ff84:	693b      	ldr	r3, [r7, #16]
 800ff86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ff88:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800ff8c:	693b      	ldr	r3, [r7, #16]
 800ff8e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800ff90:	693b      	ldr	r3, [r7, #16]
 800ff92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ff94:	4b0f      	ldr	r3, [pc, #60]	; (800ffd4 <xTaskPriorityDisinherit+0xd4>)
 800ff96:	681b      	ldr	r3, [r3, #0]
 800ff98:	429a      	cmp	r2, r3
 800ff9a:	d903      	bls.n	800ffa4 <xTaskPriorityDisinherit+0xa4>
 800ff9c:	693b      	ldr	r3, [r7, #16]
 800ff9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ffa0:	4a0c      	ldr	r2, [pc, #48]	; (800ffd4 <xTaskPriorityDisinherit+0xd4>)
 800ffa2:	6013      	str	r3, [r2, #0]
 800ffa4:	693b      	ldr	r3, [r7, #16]
 800ffa6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ffa8:	4613      	mov	r3, r2
 800ffaa:	009b      	lsls	r3, r3, #2
 800ffac:	4413      	add	r3, r2
 800ffae:	009b      	lsls	r3, r3, #2
 800ffb0:	4a09      	ldr	r2, [pc, #36]	; (800ffd8 <xTaskPriorityDisinherit+0xd8>)
 800ffb2:	441a      	add	r2, r3
 800ffb4:	693b      	ldr	r3, [r7, #16]
 800ffb6:	3304      	adds	r3, #4
 800ffb8:	4619      	mov	r1, r3
 800ffba:	4610      	mov	r0, r2
 800ffbc:	f7fe f9ef 	bl	800e39e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800ffc0:	2301      	movs	r3, #1
 800ffc2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ffc4:	697b      	ldr	r3, [r7, #20]
	}
 800ffc6:	4618      	mov	r0, r3
 800ffc8:	3718      	adds	r7, #24
 800ffca:	46bd      	mov	sp, r7
 800ffcc:	bd80      	pop	{r7, pc}
 800ffce:	bf00      	nop
 800ffd0:	20001dbc 	.word	0x20001dbc
 800ffd4:	20002298 	.word	0x20002298
 800ffd8:	20001dc0 	.word	0x20001dc0

0800ffdc <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 800ffdc:	b580      	push	{r7, lr}
 800ffde:	b086      	sub	sp, #24
 800ffe0:	af00      	add	r7, sp, #0
 800ffe2:	60f8      	str	r0, [r7, #12]
 800ffe4:	60b9      	str	r1, [r7, #8]
 800ffe6:	607a      	str	r2, [r7, #4]
 800ffe8:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 800ffea:	f000 fecb 	bl	8010d84 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800ffee:	4b29      	ldr	r3, [pc, #164]	; (8010094 <xTaskNotifyWait+0xb8>)
 800fff0:	681b      	ldr	r3, [r3, #0]
 800fff2:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 800fff6:	b2db      	uxtb	r3, r3
 800fff8:	2b02      	cmp	r3, #2
 800fffa:	d01c      	beq.n	8010036 <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 800fffc:	4b25      	ldr	r3, [pc, #148]	; (8010094 <xTaskNotifyWait+0xb8>)
 800fffe:	681b      	ldr	r3, [r3, #0]
 8010000:	f8d3 10b8 	ldr.w	r1, [r3, #184]	; 0xb8
 8010004:	68fa      	ldr	r2, [r7, #12]
 8010006:	43d2      	mvns	r2, r2
 8010008:	400a      	ands	r2, r1
 801000a:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 801000e:	4b21      	ldr	r3, [pc, #132]	; (8010094 <xTaskNotifyWait+0xb8>)
 8010010:	681b      	ldr	r3, [r3, #0]
 8010012:	2201      	movs	r2, #1
 8010014:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc

				if( xTicksToWait > ( TickType_t ) 0 )
 8010018:	683b      	ldr	r3, [r7, #0]
 801001a:	2b00      	cmp	r3, #0
 801001c:	d00b      	beq.n	8010036 <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801001e:	2101      	movs	r1, #1
 8010020:	6838      	ldr	r0, [r7, #0]
 8010022:	f000 f9dd 	bl	80103e0 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8010026:	4b1c      	ldr	r3, [pc, #112]	; (8010098 <xTaskNotifyWait+0xbc>)
 8010028:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801002c:	601a      	str	r2, [r3, #0]
 801002e:	f3bf 8f4f 	dsb	sy
 8010032:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8010036:	f000 fed5 	bl	8010de4 <vPortExitCritical>

		taskENTER_CRITICAL();
 801003a:	f000 fea3 	bl	8010d84 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 801003e:	687b      	ldr	r3, [r7, #4]
 8010040:	2b00      	cmp	r3, #0
 8010042:	d005      	beq.n	8010050 <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8010044:	4b13      	ldr	r3, [pc, #76]	; (8010094 <xTaskNotifyWait+0xb8>)
 8010046:	681b      	ldr	r3, [r3, #0]
 8010048:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 801004c:	687b      	ldr	r3, [r7, #4]
 801004e:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8010050:	4b10      	ldr	r3, [pc, #64]	; (8010094 <xTaskNotifyWait+0xb8>)
 8010052:	681b      	ldr	r3, [r3, #0]
 8010054:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 8010058:	b2db      	uxtb	r3, r3
 801005a:	2b02      	cmp	r3, #2
 801005c:	d002      	beq.n	8010064 <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 801005e:	2300      	movs	r3, #0
 8010060:	617b      	str	r3, [r7, #20]
 8010062:	e00a      	b.n	801007a <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8010064:	4b0b      	ldr	r3, [pc, #44]	; (8010094 <xTaskNotifyWait+0xb8>)
 8010066:	681b      	ldr	r3, [r3, #0]
 8010068:	f8d3 10b8 	ldr.w	r1, [r3, #184]	; 0xb8
 801006c:	68ba      	ldr	r2, [r7, #8]
 801006e:	43d2      	mvns	r2, r2
 8010070:	400a      	ands	r2, r1
 8010072:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
				xReturn = pdTRUE;
 8010076:	2301      	movs	r3, #1
 8010078:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801007a:	4b06      	ldr	r3, [pc, #24]	; (8010094 <xTaskNotifyWait+0xb8>)
 801007c:	681b      	ldr	r3, [r3, #0]
 801007e:	2200      	movs	r2, #0
 8010080:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
		}
		taskEXIT_CRITICAL();
 8010084:	f000 feae 	bl	8010de4 <vPortExitCritical>

		return xReturn;
 8010088:	697b      	ldr	r3, [r7, #20]
	}
 801008a:	4618      	mov	r0, r3
 801008c:	3718      	adds	r7, #24
 801008e:	46bd      	mov	sp, r7
 8010090:	bd80      	pop	{r7, pc}
 8010092:	bf00      	nop
 8010094:	20001dbc 	.word	0x20001dbc
 8010098:	e000ed04 	.word	0xe000ed04

0801009c <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 801009c:	b580      	push	{r7, lr}
 801009e:	b08a      	sub	sp, #40	; 0x28
 80100a0:	af00      	add	r7, sp, #0
 80100a2:	60f8      	str	r0, [r7, #12]
 80100a4:	60b9      	str	r1, [r7, #8]
 80100a6:	603b      	str	r3, [r7, #0]
 80100a8:	4613      	mov	r3, r2
 80100aa:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 80100ac:	2301      	movs	r3, #1
 80100ae:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 80100b0:	68fb      	ldr	r3, [r7, #12]
 80100b2:	2b00      	cmp	r3, #0
 80100b4:	d10a      	bne.n	80100cc <xTaskGenericNotify+0x30>
	__asm volatile
 80100b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80100ba:	f383 8811 	msr	BASEPRI, r3
 80100be:	f3bf 8f6f 	isb	sy
 80100c2:	f3bf 8f4f 	dsb	sy
 80100c6:	61bb      	str	r3, [r7, #24]
}
 80100c8:	bf00      	nop
 80100ca:	e7fe      	b.n	80100ca <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 80100cc:	68fb      	ldr	r3, [r7, #12]
 80100ce:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 80100d0:	f000 fe58 	bl	8010d84 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 80100d4:	683b      	ldr	r3, [r7, #0]
 80100d6:	2b00      	cmp	r3, #0
 80100d8:	d004      	beq.n	80100e4 <xTaskGenericNotify+0x48>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 80100da:	6a3b      	ldr	r3, [r7, #32]
 80100dc:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 80100e0:	683b      	ldr	r3, [r7, #0]
 80100e2:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80100e4:	6a3b      	ldr	r3, [r7, #32]
 80100e6:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 80100ea:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80100ec:	6a3b      	ldr	r3, [r7, #32]
 80100ee:	2202      	movs	r2, #2
 80100f0:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc

			switch( eAction )
 80100f4:	79fb      	ldrb	r3, [r7, #7]
 80100f6:	2b04      	cmp	r3, #4
 80100f8:	d82d      	bhi.n	8010156 <xTaskGenericNotify+0xba>
 80100fa:	a201      	add	r2, pc, #4	; (adr r2, 8010100 <xTaskGenericNotify+0x64>)
 80100fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010100:	08010179 	.word	0x08010179
 8010104:	08010115 	.word	0x08010115
 8010108:	08010127 	.word	0x08010127
 801010c:	08010137 	.word	0x08010137
 8010110:	08010141 	.word	0x08010141
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8010114:	6a3b      	ldr	r3, [r7, #32]
 8010116:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 801011a:	68bb      	ldr	r3, [r7, #8]
 801011c:	431a      	orrs	r2, r3
 801011e:	6a3b      	ldr	r3, [r7, #32]
 8010120:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
					break;
 8010124:	e02b      	b.n	801017e <xTaskGenericNotify+0xe2>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8010126:	6a3b      	ldr	r3, [r7, #32]
 8010128:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 801012c:	1c5a      	adds	r2, r3, #1
 801012e:	6a3b      	ldr	r3, [r7, #32]
 8010130:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
					break;
 8010134:	e023      	b.n	801017e <xTaskGenericNotify+0xe2>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8010136:	6a3b      	ldr	r3, [r7, #32]
 8010138:	68ba      	ldr	r2, [r7, #8]
 801013a:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
					break;
 801013e:	e01e      	b.n	801017e <xTaskGenericNotify+0xe2>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8010140:	7ffb      	ldrb	r3, [r7, #31]
 8010142:	2b02      	cmp	r3, #2
 8010144:	d004      	beq.n	8010150 <xTaskGenericNotify+0xb4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8010146:	6a3b      	ldr	r3, [r7, #32]
 8010148:	68ba      	ldr	r2, [r7, #8]
 801014a:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 801014e:	e016      	b.n	801017e <xTaskGenericNotify+0xe2>
						xReturn = pdFAIL;
 8010150:	2300      	movs	r3, #0
 8010152:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 8010154:	e013      	b.n	801017e <xTaskGenericNotify+0xe2>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8010156:	6a3b      	ldr	r3, [r7, #32]
 8010158:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 801015c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010160:	d00c      	beq.n	801017c <xTaskGenericNotify+0xe0>
	__asm volatile
 8010162:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010166:	f383 8811 	msr	BASEPRI, r3
 801016a:	f3bf 8f6f 	isb	sy
 801016e:	f3bf 8f4f 	dsb	sy
 8010172:	617b      	str	r3, [r7, #20]
}
 8010174:	bf00      	nop
 8010176:	e7fe      	b.n	8010176 <xTaskGenericNotify+0xda>
					break;
 8010178:	bf00      	nop
 801017a:	e000      	b.n	801017e <xTaskGenericNotify+0xe2>

					break;
 801017c:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 801017e:	7ffb      	ldrb	r3, [r7, #31]
 8010180:	2b01      	cmp	r3, #1
 8010182:	d13a      	bne.n	80101fa <xTaskGenericNotify+0x15e>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010184:	6a3b      	ldr	r3, [r7, #32]
 8010186:	3304      	adds	r3, #4
 8010188:	4618      	mov	r0, r3
 801018a:	f7fe f965 	bl	800e458 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 801018e:	6a3b      	ldr	r3, [r7, #32]
 8010190:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010192:	4b1d      	ldr	r3, [pc, #116]	; (8010208 <xTaskGenericNotify+0x16c>)
 8010194:	681b      	ldr	r3, [r3, #0]
 8010196:	429a      	cmp	r2, r3
 8010198:	d903      	bls.n	80101a2 <xTaskGenericNotify+0x106>
 801019a:	6a3b      	ldr	r3, [r7, #32]
 801019c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801019e:	4a1a      	ldr	r2, [pc, #104]	; (8010208 <xTaskGenericNotify+0x16c>)
 80101a0:	6013      	str	r3, [r2, #0]
 80101a2:	6a3b      	ldr	r3, [r7, #32]
 80101a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80101a6:	4613      	mov	r3, r2
 80101a8:	009b      	lsls	r3, r3, #2
 80101aa:	4413      	add	r3, r2
 80101ac:	009b      	lsls	r3, r3, #2
 80101ae:	4a17      	ldr	r2, [pc, #92]	; (801020c <xTaskGenericNotify+0x170>)
 80101b0:	441a      	add	r2, r3
 80101b2:	6a3b      	ldr	r3, [r7, #32]
 80101b4:	3304      	adds	r3, #4
 80101b6:	4619      	mov	r1, r3
 80101b8:	4610      	mov	r0, r2
 80101ba:	f7fe f8f0 	bl	800e39e <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80101be:	6a3b      	ldr	r3, [r7, #32]
 80101c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80101c2:	2b00      	cmp	r3, #0
 80101c4:	d00a      	beq.n	80101dc <xTaskGenericNotify+0x140>
	__asm volatile
 80101c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80101ca:	f383 8811 	msr	BASEPRI, r3
 80101ce:	f3bf 8f6f 	isb	sy
 80101d2:	f3bf 8f4f 	dsb	sy
 80101d6:	613b      	str	r3, [r7, #16]
}
 80101d8:	bf00      	nop
 80101da:	e7fe      	b.n	80101da <xTaskGenericNotify+0x13e>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80101dc:	6a3b      	ldr	r3, [r7, #32]
 80101de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80101e0:	4b0b      	ldr	r3, [pc, #44]	; (8010210 <xTaskGenericNotify+0x174>)
 80101e2:	681b      	ldr	r3, [r3, #0]
 80101e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80101e6:	429a      	cmp	r2, r3
 80101e8:	d907      	bls.n	80101fa <xTaskGenericNotify+0x15e>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 80101ea:	4b0a      	ldr	r3, [pc, #40]	; (8010214 <xTaskGenericNotify+0x178>)
 80101ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80101f0:	601a      	str	r2, [r3, #0]
 80101f2:	f3bf 8f4f 	dsb	sy
 80101f6:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80101fa:	f000 fdf3 	bl	8010de4 <vPortExitCritical>

		return xReturn;
 80101fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8010200:	4618      	mov	r0, r3
 8010202:	3728      	adds	r7, #40	; 0x28
 8010204:	46bd      	mov	sp, r7
 8010206:	bd80      	pop	{r7, pc}
 8010208:	20002298 	.word	0x20002298
 801020c:	20001dc0 	.word	0x20001dc0
 8010210:	20001dbc 	.word	0x20001dbc
 8010214:	e000ed04 	.word	0xe000ed04

08010218 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8010218:	b580      	push	{r7, lr}
 801021a:	b08e      	sub	sp, #56	; 0x38
 801021c:	af00      	add	r7, sp, #0
 801021e:	60f8      	str	r0, [r7, #12]
 8010220:	60b9      	str	r1, [r7, #8]
 8010222:	603b      	str	r3, [r7, #0]
 8010224:	4613      	mov	r3, r2
 8010226:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8010228:	2301      	movs	r3, #1
 801022a:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 801022c:	68fb      	ldr	r3, [r7, #12]
 801022e:	2b00      	cmp	r3, #0
 8010230:	d10a      	bne.n	8010248 <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 8010232:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010236:	f383 8811 	msr	BASEPRI, r3
 801023a:	f3bf 8f6f 	isb	sy
 801023e:	f3bf 8f4f 	dsb	sy
 8010242:	627b      	str	r3, [r7, #36]	; 0x24
}
 8010244:	bf00      	nop
 8010246:	e7fe      	b.n	8010246 <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8010248:	f000 fe7e 	bl	8010f48 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 801024c:	68fb      	ldr	r3, [r7, #12]
 801024e:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 8010250:	f3ef 8211 	mrs	r2, BASEPRI
 8010254:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010258:	f383 8811 	msr	BASEPRI, r3
 801025c:	f3bf 8f6f 	isb	sy
 8010260:	f3bf 8f4f 	dsb	sy
 8010264:	623a      	str	r2, [r7, #32]
 8010266:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 8010268:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801026a:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 801026c:	683b      	ldr	r3, [r7, #0]
 801026e:	2b00      	cmp	r3, #0
 8010270:	d004      	beq.n	801027c <xTaskGenericNotifyFromISR+0x64>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8010272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010274:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 8010278:	683b      	ldr	r3, [r7, #0]
 801027a:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 801027c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801027e:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 8010282:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8010286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010288:	2202      	movs	r2, #2
 801028a:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc

			switch( eAction )
 801028e:	79fb      	ldrb	r3, [r7, #7]
 8010290:	2b04      	cmp	r3, #4
 8010292:	d82f      	bhi.n	80102f4 <xTaskGenericNotifyFromISR+0xdc>
 8010294:	a201      	add	r2, pc, #4	; (adr r2, 801029c <xTaskGenericNotifyFromISR+0x84>)
 8010296:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801029a:	bf00      	nop
 801029c:	08010317 	.word	0x08010317
 80102a0:	080102b1 	.word	0x080102b1
 80102a4:	080102c3 	.word	0x080102c3
 80102a8:	080102d3 	.word	0x080102d3
 80102ac:	080102dd 	.word	0x080102dd
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 80102b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80102b2:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 80102b6:	68bb      	ldr	r3, [r7, #8]
 80102b8:	431a      	orrs	r2, r3
 80102ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80102bc:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
					break;
 80102c0:	e02c      	b.n	801031c <xTaskGenericNotifyFromISR+0x104>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 80102c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80102c4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80102c8:	1c5a      	adds	r2, r3, #1
 80102ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80102cc:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
					break;
 80102d0:	e024      	b.n	801031c <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 80102d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80102d4:	68ba      	ldr	r2, [r7, #8]
 80102d6:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
					break;
 80102da:	e01f      	b.n	801031c <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80102dc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80102e0:	2b02      	cmp	r3, #2
 80102e2:	d004      	beq.n	80102ee <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 80102e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80102e6:	68ba      	ldr	r2, [r7, #8]
 80102e8:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 80102ec:	e016      	b.n	801031c <xTaskGenericNotifyFromISR+0x104>
						xReturn = pdFAIL;
 80102ee:	2300      	movs	r3, #0
 80102f0:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 80102f2:	e013      	b.n	801031c <xTaskGenericNotifyFromISR+0x104>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 80102f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80102f6:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80102fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80102fe:	d00c      	beq.n	801031a <xTaskGenericNotifyFromISR+0x102>
	__asm volatile
 8010300:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010304:	f383 8811 	msr	BASEPRI, r3
 8010308:	f3bf 8f6f 	isb	sy
 801030c:	f3bf 8f4f 	dsb	sy
 8010310:	61bb      	str	r3, [r7, #24]
}
 8010312:	bf00      	nop
 8010314:	e7fe      	b.n	8010314 <xTaskGenericNotifyFromISR+0xfc>
					break;
 8010316:	bf00      	nop
 8010318:	e000      	b.n	801031c <xTaskGenericNotifyFromISR+0x104>
					break;
 801031a:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 801031c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8010320:	2b01      	cmp	r3, #1
 8010322:	d146      	bne.n	80103b2 <xTaskGenericNotifyFromISR+0x19a>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8010324:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010326:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010328:	2b00      	cmp	r3, #0
 801032a:	d00a      	beq.n	8010342 <xTaskGenericNotifyFromISR+0x12a>
	__asm volatile
 801032c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010330:	f383 8811 	msr	BASEPRI, r3
 8010334:	f3bf 8f6f 	isb	sy
 8010338:	f3bf 8f4f 	dsb	sy
 801033c:	617b      	str	r3, [r7, #20]
}
 801033e:	bf00      	nop
 8010340:	e7fe      	b.n	8010340 <xTaskGenericNotifyFromISR+0x128>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010342:	4b21      	ldr	r3, [pc, #132]	; (80103c8 <xTaskGenericNotifyFromISR+0x1b0>)
 8010344:	681b      	ldr	r3, [r3, #0]
 8010346:	2b00      	cmp	r3, #0
 8010348:	d11d      	bne.n	8010386 <xTaskGenericNotifyFromISR+0x16e>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801034a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801034c:	3304      	adds	r3, #4
 801034e:	4618      	mov	r0, r3
 8010350:	f7fe f882 	bl	800e458 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8010354:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010356:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010358:	4b1c      	ldr	r3, [pc, #112]	; (80103cc <xTaskGenericNotifyFromISR+0x1b4>)
 801035a:	681b      	ldr	r3, [r3, #0]
 801035c:	429a      	cmp	r2, r3
 801035e:	d903      	bls.n	8010368 <xTaskGenericNotifyFromISR+0x150>
 8010360:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010364:	4a19      	ldr	r2, [pc, #100]	; (80103cc <xTaskGenericNotifyFromISR+0x1b4>)
 8010366:	6013      	str	r3, [r2, #0]
 8010368:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801036a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801036c:	4613      	mov	r3, r2
 801036e:	009b      	lsls	r3, r3, #2
 8010370:	4413      	add	r3, r2
 8010372:	009b      	lsls	r3, r3, #2
 8010374:	4a16      	ldr	r2, [pc, #88]	; (80103d0 <xTaskGenericNotifyFromISR+0x1b8>)
 8010376:	441a      	add	r2, r3
 8010378:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801037a:	3304      	adds	r3, #4
 801037c:	4619      	mov	r1, r3
 801037e:	4610      	mov	r0, r2
 8010380:	f7fe f80d 	bl	800e39e <vListInsertEnd>
 8010384:	e005      	b.n	8010392 <xTaskGenericNotifyFromISR+0x17a>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8010386:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010388:	3318      	adds	r3, #24
 801038a:	4619      	mov	r1, r3
 801038c:	4811      	ldr	r0, [pc, #68]	; (80103d4 <xTaskGenericNotifyFromISR+0x1bc>)
 801038e:	f7fe f806 	bl	800e39e <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8010392:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010394:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010396:	4b10      	ldr	r3, [pc, #64]	; (80103d8 <xTaskGenericNotifyFromISR+0x1c0>)
 8010398:	681b      	ldr	r3, [r3, #0]
 801039a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801039c:	429a      	cmp	r2, r3
 801039e:	d908      	bls.n	80103b2 <xTaskGenericNotifyFromISR+0x19a>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 80103a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80103a2:	2b00      	cmp	r3, #0
 80103a4:	d002      	beq.n	80103ac <xTaskGenericNotifyFromISR+0x194>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 80103a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80103a8:	2201      	movs	r2, #1
 80103aa:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 80103ac:	4b0b      	ldr	r3, [pc, #44]	; (80103dc <xTaskGenericNotifyFromISR+0x1c4>)
 80103ae:	2201      	movs	r2, #1
 80103b0:	601a      	str	r2, [r3, #0]
 80103b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80103b4:	613b      	str	r3, [r7, #16]
	__asm volatile
 80103b6:	693b      	ldr	r3, [r7, #16]
 80103b8:	f383 8811 	msr	BASEPRI, r3
}
 80103bc:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 80103be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 80103c0:	4618      	mov	r0, r3
 80103c2:	3738      	adds	r7, #56	; 0x38
 80103c4:	46bd      	mov	sp, r7
 80103c6:	bd80      	pop	{r7, pc}
 80103c8:	200022b8 	.word	0x200022b8
 80103cc:	20002298 	.word	0x20002298
 80103d0:	20001dc0 	.word	0x20001dc0
 80103d4:	20002250 	.word	0x20002250
 80103d8:	20001dbc 	.word	0x20001dbc
 80103dc:	200022a4 	.word	0x200022a4

080103e0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80103e0:	b580      	push	{r7, lr}
 80103e2:	b084      	sub	sp, #16
 80103e4:	af00      	add	r7, sp, #0
 80103e6:	6078      	str	r0, [r7, #4]
 80103e8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80103ea:	4b21      	ldr	r3, [pc, #132]	; (8010470 <prvAddCurrentTaskToDelayedList+0x90>)
 80103ec:	681b      	ldr	r3, [r3, #0]
 80103ee:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80103f0:	4b20      	ldr	r3, [pc, #128]	; (8010474 <prvAddCurrentTaskToDelayedList+0x94>)
 80103f2:	681b      	ldr	r3, [r3, #0]
 80103f4:	3304      	adds	r3, #4
 80103f6:	4618      	mov	r0, r3
 80103f8:	f7fe f82e 	bl	800e458 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80103fc:	687b      	ldr	r3, [r7, #4]
 80103fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010402:	d10a      	bne.n	801041a <prvAddCurrentTaskToDelayedList+0x3a>
 8010404:	683b      	ldr	r3, [r7, #0]
 8010406:	2b00      	cmp	r3, #0
 8010408:	d007      	beq.n	801041a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801040a:	4b1a      	ldr	r3, [pc, #104]	; (8010474 <prvAddCurrentTaskToDelayedList+0x94>)
 801040c:	681b      	ldr	r3, [r3, #0]
 801040e:	3304      	adds	r3, #4
 8010410:	4619      	mov	r1, r3
 8010412:	4819      	ldr	r0, [pc, #100]	; (8010478 <prvAddCurrentTaskToDelayedList+0x98>)
 8010414:	f7fd ffc3 	bl	800e39e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8010418:	e026      	b.n	8010468 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 801041a:	68fa      	ldr	r2, [r7, #12]
 801041c:	687b      	ldr	r3, [r7, #4]
 801041e:	4413      	add	r3, r2
 8010420:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8010422:	4b14      	ldr	r3, [pc, #80]	; (8010474 <prvAddCurrentTaskToDelayedList+0x94>)
 8010424:	681b      	ldr	r3, [r3, #0]
 8010426:	68ba      	ldr	r2, [r7, #8]
 8010428:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 801042a:	68ba      	ldr	r2, [r7, #8]
 801042c:	68fb      	ldr	r3, [r7, #12]
 801042e:	429a      	cmp	r2, r3
 8010430:	d209      	bcs.n	8010446 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010432:	4b12      	ldr	r3, [pc, #72]	; (801047c <prvAddCurrentTaskToDelayedList+0x9c>)
 8010434:	681a      	ldr	r2, [r3, #0]
 8010436:	4b0f      	ldr	r3, [pc, #60]	; (8010474 <prvAddCurrentTaskToDelayedList+0x94>)
 8010438:	681b      	ldr	r3, [r3, #0]
 801043a:	3304      	adds	r3, #4
 801043c:	4619      	mov	r1, r3
 801043e:	4610      	mov	r0, r2
 8010440:	f7fd ffd1 	bl	800e3e6 <vListInsert>
}
 8010444:	e010      	b.n	8010468 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010446:	4b0e      	ldr	r3, [pc, #56]	; (8010480 <prvAddCurrentTaskToDelayedList+0xa0>)
 8010448:	681a      	ldr	r2, [r3, #0]
 801044a:	4b0a      	ldr	r3, [pc, #40]	; (8010474 <prvAddCurrentTaskToDelayedList+0x94>)
 801044c:	681b      	ldr	r3, [r3, #0]
 801044e:	3304      	adds	r3, #4
 8010450:	4619      	mov	r1, r3
 8010452:	4610      	mov	r0, r2
 8010454:	f7fd ffc7 	bl	800e3e6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8010458:	4b0a      	ldr	r3, [pc, #40]	; (8010484 <prvAddCurrentTaskToDelayedList+0xa4>)
 801045a:	681b      	ldr	r3, [r3, #0]
 801045c:	68ba      	ldr	r2, [r7, #8]
 801045e:	429a      	cmp	r2, r3
 8010460:	d202      	bcs.n	8010468 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8010462:	4a08      	ldr	r2, [pc, #32]	; (8010484 <prvAddCurrentTaskToDelayedList+0xa4>)
 8010464:	68bb      	ldr	r3, [r7, #8]
 8010466:	6013      	str	r3, [r2, #0]
}
 8010468:	bf00      	nop
 801046a:	3710      	adds	r7, #16
 801046c:	46bd      	mov	sp, r7
 801046e:	bd80      	pop	{r7, pc}
 8010470:	20002294 	.word	0x20002294
 8010474:	20001dbc 	.word	0x20001dbc
 8010478:	2000227c 	.word	0x2000227c
 801047c:	2000224c 	.word	0x2000224c
 8010480:	20002248 	.word	0x20002248
 8010484:	200022b0 	.word	0x200022b0

08010488 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8010488:	b580      	push	{r7, lr}
 801048a:	b08a      	sub	sp, #40	; 0x28
 801048c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 801048e:	2300      	movs	r3, #0
 8010490:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8010492:	f000 fb07 	bl	8010aa4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8010496:	4b1c      	ldr	r3, [pc, #112]	; (8010508 <xTimerCreateTimerTask+0x80>)
 8010498:	681b      	ldr	r3, [r3, #0]
 801049a:	2b00      	cmp	r3, #0
 801049c:	d021      	beq.n	80104e2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 801049e:	2300      	movs	r3, #0
 80104a0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80104a2:	2300      	movs	r3, #0
 80104a4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80104a6:	1d3a      	adds	r2, r7, #4
 80104a8:	f107 0108 	add.w	r1, r7, #8
 80104ac:	f107 030c 	add.w	r3, r7, #12
 80104b0:	4618      	mov	r0, r3
 80104b2:	f7fd ff2d 	bl	800e310 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80104b6:	6879      	ldr	r1, [r7, #4]
 80104b8:	68bb      	ldr	r3, [r7, #8]
 80104ba:	68fa      	ldr	r2, [r7, #12]
 80104bc:	9202      	str	r2, [sp, #8]
 80104be:	9301      	str	r3, [sp, #4]
 80104c0:	2302      	movs	r3, #2
 80104c2:	9300      	str	r3, [sp, #0]
 80104c4:	2300      	movs	r3, #0
 80104c6:	460a      	mov	r2, r1
 80104c8:	4910      	ldr	r1, [pc, #64]	; (801050c <xTimerCreateTimerTask+0x84>)
 80104ca:	4811      	ldr	r0, [pc, #68]	; (8010510 <xTimerCreateTimerTask+0x88>)
 80104cc:	f7fe fdb8 	bl	800f040 <xTaskCreateStatic>
 80104d0:	4603      	mov	r3, r0
 80104d2:	4a10      	ldr	r2, [pc, #64]	; (8010514 <xTimerCreateTimerTask+0x8c>)
 80104d4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80104d6:	4b0f      	ldr	r3, [pc, #60]	; (8010514 <xTimerCreateTimerTask+0x8c>)
 80104d8:	681b      	ldr	r3, [r3, #0]
 80104da:	2b00      	cmp	r3, #0
 80104dc:	d001      	beq.n	80104e2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80104de:	2301      	movs	r3, #1
 80104e0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80104e2:	697b      	ldr	r3, [r7, #20]
 80104e4:	2b00      	cmp	r3, #0
 80104e6:	d10a      	bne.n	80104fe <xTimerCreateTimerTask+0x76>
	__asm volatile
 80104e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80104ec:	f383 8811 	msr	BASEPRI, r3
 80104f0:	f3bf 8f6f 	isb	sy
 80104f4:	f3bf 8f4f 	dsb	sy
 80104f8:	613b      	str	r3, [r7, #16]
}
 80104fa:	bf00      	nop
 80104fc:	e7fe      	b.n	80104fc <xTimerCreateTimerTask+0x74>
	return xReturn;
 80104fe:	697b      	ldr	r3, [r7, #20]
}
 8010500:	4618      	mov	r0, r3
 8010502:	3718      	adds	r7, #24
 8010504:	46bd      	mov	sp, r7
 8010506:	bd80      	pop	{r7, pc}
 8010508:	200022f4 	.word	0x200022f4
 801050c:	08014360 	.word	0x08014360
 8010510:	0801064d 	.word	0x0801064d
 8010514:	200022f8 	.word	0x200022f8

08010518 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8010518:	b580      	push	{r7, lr}
 801051a:	b08a      	sub	sp, #40	; 0x28
 801051c:	af00      	add	r7, sp, #0
 801051e:	60f8      	str	r0, [r7, #12]
 8010520:	60b9      	str	r1, [r7, #8]
 8010522:	607a      	str	r2, [r7, #4]
 8010524:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8010526:	2300      	movs	r3, #0
 8010528:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 801052a:	68fb      	ldr	r3, [r7, #12]
 801052c:	2b00      	cmp	r3, #0
 801052e:	d10a      	bne.n	8010546 <xTimerGenericCommand+0x2e>
	__asm volatile
 8010530:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010534:	f383 8811 	msr	BASEPRI, r3
 8010538:	f3bf 8f6f 	isb	sy
 801053c:	f3bf 8f4f 	dsb	sy
 8010540:	623b      	str	r3, [r7, #32]
}
 8010542:	bf00      	nop
 8010544:	e7fe      	b.n	8010544 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8010546:	4b1a      	ldr	r3, [pc, #104]	; (80105b0 <xTimerGenericCommand+0x98>)
 8010548:	681b      	ldr	r3, [r3, #0]
 801054a:	2b00      	cmp	r3, #0
 801054c:	d02a      	beq.n	80105a4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 801054e:	68bb      	ldr	r3, [r7, #8]
 8010550:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8010552:	687b      	ldr	r3, [r7, #4]
 8010554:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8010556:	68fb      	ldr	r3, [r7, #12]
 8010558:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 801055a:	68bb      	ldr	r3, [r7, #8]
 801055c:	2b05      	cmp	r3, #5
 801055e:	dc18      	bgt.n	8010592 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8010560:	f7ff fcb0 	bl	800fec4 <xTaskGetSchedulerState>
 8010564:	4603      	mov	r3, r0
 8010566:	2b02      	cmp	r3, #2
 8010568:	d109      	bne.n	801057e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 801056a:	4b11      	ldr	r3, [pc, #68]	; (80105b0 <xTimerGenericCommand+0x98>)
 801056c:	6818      	ldr	r0, [r3, #0]
 801056e:	f107 0110 	add.w	r1, r7, #16
 8010572:	2300      	movs	r3, #0
 8010574:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010576:	f7fe f8d7 	bl	800e728 <xQueueGenericSend>
 801057a:	6278      	str	r0, [r7, #36]	; 0x24
 801057c:	e012      	b.n	80105a4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 801057e:	4b0c      	ldr	r3, [pc, #48]	; (80105b0 <xTimerGenericCommand+0x98>)
 8010580:	6818      	ldr	r0, [r3, #0]
 8010582:	f107 0110 	add.w	r1, r7, #16
 8010586:	2300      	movs	r3, #0
 8010588:	2200      	movs	r2, #0
 801058a:	f7fe f8cd 	bl	800e728 <xQueueGenericSend>
 801058e:	6278      	str	r0, [r7, #36]	; 0x24
 8010590:	e008      	b.n	80105a4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8010592:	4b07      	ldr	r3, [pc, #28]	; (80105b0 <xTimerGenericCommand+0x98>)
 8010594:	6818      	ldr	r0, [r3, #0]
 8010596:	f107 0110 	add.w	r1, r7, #16
 801059a:	2300      	movs	r3, #0
 801059c:	683a      	ldr	r2, [r7, #0]
 801059e:	f7fe f9c1 	bl	800e924 <xQueueGenericSendFromISR>
 80105a2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80105a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80105a6:	4618      	mov	r0, r3
 80105a8:	3728      	adds	r7, #40	; 0x28
 80105aa:	46bd      	mov	sp, r7
 80105ac:	bd80      	pop	{r7, pc}
 80105ae:	bf00      	nop
 80105b0:	200022f4 	.word	0x200022f4

080105b4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80105b4:	b580      	push	{r7, lr}
 80105b6:	b088      	sub	sp, #32
 80105b8:	af02      	add	r7, sp, #8
 80105ba:	6078      	str	r0, [r7, #4]
 80105bc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80105be:	4b22      	ldr	r3, [pc, #136]	; (8010648 <prvProcessExpiredTimer+0x94>)
 80105c0:	681b      	ldr	r3, [r3, #0]
 80105c2:	68db      	ldr	r3, [r3, #12]
 80105c4:	68db      	ldr	r3, [r3, #12]
 80105c6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80105c8:	697b      	ldr	r3, [r7, #20]
 80105ca:	3304      	adds	r3, #4
 80105cc:	4618      	mov	r0, r3
 80105ce:	f7fd ff43 	bl	800e458 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80105d2:	697b      	ldr	r3, [r7, #20]
 80105d4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80105d8:	f003 0304 	and.w	r3, r3, #4
 80105dc:	2b00      	cmp	r3, #0
 80105de:	d022      	beq.n	8010626 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80105e0:	697b      	ldr	r3, [r7, #20]
 80105e2:	699a      	ldr	r2, [r3, #24]
 80105e4:	687b      	ldr	r3, [r7, #4]
 80105e6:	18d1      	adds	r1, r2, r3
 80105e8:	687b      	ldr	r3, [r7, #4]
 80105ea:	683a      	ldr	r2, [r7, #0]
 80105ec:	6978      	ldr	r0, [r7, #20]
 80105ee:	f000 f8d1 	bl	8010794 <prvInsertTimerInActiveList>
 80105f2:	4603      	mov	r3, r0
 80105f4:	2b00      	cmp	r3, #0
 80105f6:	d01f      	beq.n	8010638 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80105f8:	2300      	movs	r3, #0
 80105fa:	9300      	str	r3, [sp, #0]
 80105fc:	2300      	movs	r3, #0
 80105fe:	687a      	ldr	r2, [r7, #4]
 8010600:	2100      	movs	r1, #0
 8010602:	6978      	ldr	r0, [r7, #20]
 8010604:	f7ff ff88 	bl	8010518 <xTimerGenericCommand>
 8010608:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 801060a:	693b      	ldr	r3, [r7, #16]
 801060c:	2b00      	cmp	r3, #0
 801060e:	d113      	bne.n	8010638 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8010610:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010614:	f383 8811 	msr	BASEPRI, r3
 8010618:	f3bf 8f6f 	isb	sy
 801061c:	f3bf 8f4f 	dsb	sy
 8010620:	60fb      	str	r3, [r7, #12]
}
 8010622:	bf00      	nop
 8010624:	e7fe      	b.n	8010624 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8010626:	697b      	ldr	r3, [r7, #20]
 8010628:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801062c:	f023 0301 	bic.w	r3, r3, #1
 8010630:	b2da      	uxtb	r2, r3
 8010632:	697b      	ldr	r3, [r7, #20]
 8010634:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010638:	697b      	ldr	r3, [r7, #20]
 801063a:	6a1b      	ldr	r3, [r3, #32]
 801063c:	6978      	ldr	r0, [r7, #20]
 801063e:	4798      	blx	r3
}
 8010640:	bf00      	nop
 8010642:	3718      	adds	r7, #24
 8010644:	46bd      	mov	sp, r7
 8010646:	bd80      	pop	{r7, pc}
 8010648:	200022ec 	.word	0x200022ec

0801064c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 801064c:	b580      	push	{r7, lr}
 801064e:	b084      	sub	sp, #16
 8010650:	af00      	add	r7, sp, #0
 8010652:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8010654:	f107 0308 	add.w	r3, r7, #8
 8010658:	4618      	mov	r0, r3
 801065a:	f000 f857 	bl	801070c <prvGetNextExpireTime>
 801065e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8010660:	68bb      	ldr	r3, [r7, #8]
 8010662:	4619      	mov	r1, r3
 8010664:	68f8      	ldr	r0, [r7, #12]
 8010666:	f000 f803 	bl	8010670 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 801066a:	f000 f8d5 	bl	8010818 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801066e:	e7f1      	b.n	8010654 <prvTimerTask+0x8>

08010670 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8010670:	b580      	push	{r7, lr}
 8010672:	b084      	sub	sp, #16
 8010674:	af00      	add	r7, sp, #0
 8010676:	6078      	str	r0, [r7, #4]
 8010678:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 801067a:	f7ff f81b 	bl	800f6b4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801067e:	f107 0308 	add.w	r3, r7, #8
 8010682:	4618      	mov	r0, r3
 8010684:	f000 f866 	bl	8010754 <prvSampleTimeNow>
 8010688:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 801068a:	68bb      	ldr	r3, [r7, #8]
 801068c:	2b00      	cmp	r3, #0
 801068e:	d130      	bne.n	80106f2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8010690:	683b      	ldr	r3, [r7, #0]
 8010692:	2b00      	cmp	r3, #0
 8010694:	d10a      	bne.n	80106ac <prvProcessTimerOrBlockTask+0x3c>
 8010696:	687a      	ldr	r2, [r7, #4]
 8010698:	68fb      	ldr	r3, [r7, #12]
 801069a:	429a      	cmp	r2, r3
 801069c:	d806      	bhi.n	80106ac <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 801069e:	f7ff f817 	bl	800f6d0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80106a2:	68f9      	ldr	r1, [r7, #12]
 80106a4:	6878      	ldr	r0, [r7, #4]
 80106a6:	f7ff ff85 	bl	80105b4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80106aa:	e024      	b.n	80106f6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80106ac:	683b      	ldr	r3, [r7, #0]
 80106ae:	2b00      	cmp	r3, #0
 80106b0:	d008      	beq.n	80106c4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80106b2:	4b13      	ldr	r3, [pc, #76]	; (8010700 <prvProcessTimerOrBlockTask+0x90>)
 80106b4:	681b      	ldr	r3, [r3, #0]
 80106b6:	681b      	ldr	r3, [r3, #0]
 80106b8:	2b00      	cmp	r3, #0
 80106ba:	d101      	bne.n	80106c0 <prvProcessTimerOrBlockTask+0x50>
 80106bc:	2301      	movs	r3, #1
 80106be:	e000      	b.n	80106c2 <prvProcessTimerOrBlockTask+0x52>
 80106c0:	2300      	movs	r3, #0
 80106c2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80106c4:	4b0f      	ldr	r3, [pc, #60]	; (8010704 <prvProcessTimerOrBlockTask+0x94>)
 80106c6:	6818      	ldr	r0, [r3, #0]
 80106c8:	687a      	ldr	r2, [r7, #4]
 80106ca:	68fb      	ldr	r3, [r7, #12]
 80106cc:	1ad3      	subs	r3, r2, r3
 80106ce:	683a      	ldr	r2, [r7, #0]
 80106d0:	4619      	mov	r1, r3
 80106d2:	f7fe fc81 	bl	800efd8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80106d6:	f7fe fffb 	bl	800f6d0 <xTaskResumeAll>
 80106da:	4603      	mov	r3, r0
 80106dc:	2b00      	cmp	r3, #0
 80106de:	d10a      	bne.n	80106f6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80106e0:	4b09      	ldr	r3, [pc, #36]	; (8010708 <prvProcessTimerOrBlockTask+0x98>)
 80106e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80106e6:	601a      	str	r2, [r3, #0]
 80106e8:	f3bf 8f4f 	dsb	sy
 80106ec:	f3bf 8f6f 	isb	sy
}
 80106f0:	e001      	b.n	80106f6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80106f2:	f7fe ffed 	bl	800f6d0 <xTaskResumeAll>
}
 80106f6:	bf00      	nop
 80106f8:	3710      	adds	r7, #16
 80106fa:	46bd      	mov	sp, r7
 80106fc:	bd80      	pop	{r7, pc}
 80106fe:	bf00      	nop
 8010700:	200022f0 	.word	0x200022f0
 8010704:	200022f4 	.word	0x200022f4
 8010708:	e000ed04 	.word	0xe000ed04

0801070c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 801070c:	b480      	push	{r7}
 801070e:	b085      	sub	sp, #20
 8010710:	af00      	add	r7, sp, #0
 8010712:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8010714:	4b0e      	ldr	r3, [pc, #56]	; (8010750 <prvGetNextExpireTime+0x44>)
 8010716:	681b      	ldr	r3, [r3, #0]
 8010718:	681b      	ldr	r3, [r3, #0]
 801071a:	2b00      	cmp	r3, #0
 801071c:	d101      	bne.n	8010722 <prvGetNextExpireTime+0x16>
 801071e:	2201      	movs	r2, #1
 8010720:	e000      	b.n	8010724 <prvGetNextExpireTime+0x18>
 8010722:	2200      	movs	r2, #0
 8010724:	687b      	ldr	r3, [r7, #4]
 8010726:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8010728:	687b      	ldr	r3, [r7, #4]
 801072a:	681b      	ldr	r3, [r3, #0]
 801072c:	2b00      	cmp	r3, #0
 801072e:	d105      	bne.n	801073c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8010730:	4b07      	ldr	r3, [pc, #28]	; (8010750 <prvGetNextExpireTime+0x44>)
 8010732:	681b      	ldr	r3, [r3, #0]
 8010734:	68db      	ldr	r3, [r3, #12]
 8010736:	681b      	ldr	r3, [r3, #0]
 8010738:	60fb      	str	r3, [r7, #12]
 801073a:	e001      	b.n	8010740 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 801073c:	2300      	movs	r3, #0
 801073e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8010740:	68fb      	ldr	r3, [r7, #12]
}
 8010742:	4618      	mov	r0, r3
 8010744:	3714      	adds	r7, #20
 8010746:	46bd      	mov	sp, r7
 8010748:	f85d 7b04 	ldr.w	r7, [sp], #4
 801074c:	4770      	bx	lr
 801074e:	bf00      	nop
 8010750:	200022ec 	.word	0x200022ec

08010754 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8010754:	b580      	push	{r7, lr}
 8010756:	b084      	sub	sp, #16
 8010758:	af00      	add	r7, sp, #0
 801075a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 801075c:	f7ff f856 	bl	800f80c <xTaskGetTickCount>
 8010760:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8010762:	4b0b      	ldr	r3, [pc, #44]	; (8010790 <prvSampleTimeNow+0x3c>)
 8010764:	681b      	ldr	r3, [r3, #0]
 8010766:	68fa      	ldr	r2, [r7, #12]
 8010768:	429a      	cmp	r2, r3
 801076a:	d205      	bcs.n	8010778 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 801076c:	f000 f936 	bl	80109dc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8010770:	687b      	ldr	r3, [r7, #4]
 8010772:	2201      	movs	r2, #1
 8010774:	601a      	str	r2, [r3, #0]
 8010776:	e002      	b.n	801077e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8010778:	687b      	ldr	r3, [r7, #4]
 801077a:	2200      	movs	r2, #0
 801077c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 801077e:	4a04      	ldr	r2, [pc, #16]	; (8010790 <prvSampleTimeNow+0x3c>)
 8010780:	68fb      	ldr	r3, [r7, #12]
 8010782:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8010784:	68fb      	ldr	r3, [r7, #12]
}
 8010786:	4618      	mov	r0, r3
 8010788:	3710      	adds	r7, #16
 801078a:	46bd      	mov	sp, r7
 801078c:	bd80      	pop	{r7, pc}
 801078e:	bf00      	nop
 8010790:	200022fc 	.word	0x200022fc

08010794 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8010794:	b580      	push	{r7, lr}
 8010796:	b086      	sub	sp, #24
 8010798:	af00      	add	r7, sp, #0
 801079a:	60f8      	str	r0, [r7, #12]
 801079c:	60b9      	str	r1, [r7, #8]
 801079e:	607a      	str	r2, [r7, #4]
 80107a0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80107a2:	2300      	movs	r3, #0
 80107a4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80107a6:	68fb      	ldr	r3, [r7, #12]
 80107a8:	68ba      	ldr	r2, [r7, #8]
 80107aa:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80107ac:	68fb      	ldr	r3, [r7, #12]
 80107ae:	68fa      	ldr	r2, [r7, #12]
 80107b0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80107b2:	68ba      	ldr	r2, [r7, #8]
 80107b4:	687b      	ldr	r3, [r7, #4]
 80107b6:	429a      	cmp	r2, r3
 80107b8:	d812      	bhi.n	80107e0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80107ba:	687a      	ldr	r2, [r7, #4]
 80107bc:	683b      	ldr	r3, [r7, #0]
 80107be:	1ad2      	subs	r2, r2, r3
 80107c0:	68fb      	ldr	r3, [r7, #12]
 80107c2:	699b      	ldr	r3, [r3, #24]
 80107c4:	429a      	cmp	r2, r3
 80107c6:	d302      	bcc.n	80107ce <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80107c8:	2301      	movs	r3, #1
 80107ca:	617b      	str	r3, [r7, #20]
 80107cc:	e01b      	b.n	8010806 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80107ce:	4b10      	ldr	r3, [pc, #64]	; (8010810 <prvInsertTimerInActiveList+0x7c>)
 80107d0:	681a      	ldr	r2, [r3, #0]
 80107d2:	68fb      	ldr	r3, [r7, #12]
 80107d4:	3304      	adds	r3, #4
 80107d6:	4619      	mov	r1, r3
 80107d8:	4610      	mov	r0, r2
 80107da:	f7fd fe04 	bl	800e3e6 <vListInsert>
 80107de:	e012      	b.n	8010806 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80107e0:	687a      	ldr	r2, [r7, #4]
 80107e2:	683b      	ldr	r3, [r7, #0]
 80107e4:	429a      	cmp	r2, r3
 80107e6:	d206      	bcs.n	80107f6 <prvInsertTimerInActiveList+0x62>
 80107e8:	68ba      	ldr	r2, [r7, #8]
 80107ea:	683b      	ldr	r3, [r7, #0]
 80107ec:	429a      	cmp	r2, r3
 80107ee:	d302      	bcc.n	80107f6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80107f0:	2301      	movs	r3, #1
 80107f2:	617b      	str	r3, [r7, #20]
 80107f4:	e007      	b.n	8010806 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80107f6:	4b07      	ldr	r3, [pc, #28]	; (8010814 <prvInsertTimerInActiveList+0x80>)
 80107f8:	681a      	ldr	r2, [r3, #0]
 80107fa:	68fb      	ldr	r3, [r7, #12]
 80107fc:	3304      	adds	r3, #4
 80107fe:	4619      	mov	r1, r3
 8010800:	4610      	mov	r0, r2
 8010802:	f7fd fdf0 	bl	800e3e6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8010806:	697b      	ldr	r3, [r7, #20]
}
 8010808:	4618      	mov	r0, r3
 801080a:	3718      	adds	r7, #24
 801080c:	46bd      	mov	sp, r7
 801080e:	bd80      	pop	{r7, pc}
 8010810:	200022f0 	.word	0x200022f0
 8010814:	200022ec 	.word	0x200022ec

08010818 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8010818:	b580      	push	{r7, lr}
 801081a:	b08e      	sub	sp, #56	; 0x38
 801081c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801081e:	e0ca      	b.n	80109b6 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8010820:	687b      	ldr	r3, [r7, #4]
 8010822:	2b00      	cmp	r3, #0
 8010824:	da18      	bge.n	8010858 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8010826:	1d3b      	adds	r3, r7, #4
 8010828:	3304      	adds	r3, #4
 801082a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 801082c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801082e:	2b00      	cmp	r3, #0
 8010830:	d10a      	bne.n	8010848 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8010832:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010836:	f383 8811 	msr	BASEPRI, r3
 801083a:	f3bf 8f6f 	isb	sy
 801083e:	f3bf 8f4f 	dsb	sy
 8010842:	61fb      	str	r3, [r7, #28]
}
 8010844:	bf00      	nop
 8010846:	e7fe      	b.n	8010846 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8010848:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801084a:	681b      	ldr	r3, [r3, #0]
 801084c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801084e:	6850      	ldr	r0, [r2, #4]
 8010850:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010852:	6892      	ldr	r2, [r2, #8]
 8010854:	4611      	mov	r1, r2
 8010856:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8010858:	687b      	ldr	r3, [r7, #4]
 801085a:	2b00      	cmp	r3, #0
 801085c:	f2c0 80aa 	blt.w	80109b4 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8010860:	68fb      	ldr	r3, [r7, #12]
 8010862:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8010864:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010866:	695b      	ldr	r3, [r3, #20]
 8010868:	2b00      	cmp	r3, #0
 801086a:	d004      	beq.n	8010876 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801086c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801086e:	3304      	adds	r3, #4
 8010870:	4618      	mov	r0, r3
 8010872:	f7fd fdf1 	bl	800e458 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8010876:	463b      	mov	r3, r7
 8010878:	4618      	mov	r0, r3
 801087a:	f7ff ff6b 	bl	8010754 <prvSampleTimeNow>
 801087e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8010880:	687b      	ldr	r3, [r7, #4]
 8010882:	2b09      	cmp	r3, #9
 8010884:	f200 8097 	bhi.w	80109b6 <prvProcessReceivedCommands+0x19e>
 8010888:	a201      	add	r2, pc, #4	; (adr r2, 8010890 <prvProcessReceivedCommands+0x78>)
 801088a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801088e:	bf00      	nop
 8010890:	080108b9 	.word	0x080108b9
 8010894:	080108b9 	.word	0x080108b9
 8010898:	080108b9 	.word	0x080108b9
 801089c:	0801092d 	.word	0x0801092d
 80108a0:	08010941 	.word	0x08010941
 80108a4:	0801098b 	.word	0x0801098b
 80108a8:	080108b9 	.word	0x080108b9
 80108ac:	080108b9 	.word	0x080108b9
 80108b0:	0801092d 	.word	0x0801092d
 80108b4:	08010941 	.word	0x08010941
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80108b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80108ba:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80108be:	f043 0301 	orr.w	r3, r3, #1
 80108c2:	b2da      	uxtb	r2, r3
 80108c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80108c6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80108ca:	68ba      	ldr	r2, [r7, #8]
 80108cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80108ce:	699b      	ldr	r3, [r3, #24]
 80108d0:	18d1      	adds	r1, r2, r3
 80108d2:	68bb      	ldr	r3, [r7, #8]
 80108d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80108d6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80108d8:	f7ff ff5c 	bl	8010794 <prvInsertTimerInActiveList>
 80108dc:	4603      	mov	r3, r0
 80108de:	2b00      	cmp	r3, #0
 80108e0:	d069      	beq.n	80109b6 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80108e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80108e4:	6a1b      	ldr	r3, [r3, #32]
 80108e6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80108e8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80108ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80108ec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80108f0:	f003 0304 	and.w	r3, r3, #4
 80108f4:	2b00      	cmp	r3, #0
 80108f6:	d05e      	beq.n	80109b6 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80108f8:	68ba      	ldr	r2, [r7, #8]
 80108fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80108fc:	699b      	ldr	r3, [r3, #24]
 80108fe:	441a      	add	r2, r3
 8010900:	2300      	movs	r3, #0
 8010902:	9300      	str	r3, [sp, #0]
 8010904:	2300      	movs	r3, #0
 8010906:	2100      	movs	r1, #0
 8010908:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801090a:	f7ff fe05 	bl	8010518 <xTimerGenericCommand>
 801090e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8010910:	6a3b      	ldr	r3, [r7, #32]
 8010912:	2b00      	cmp	r3, #0
 8010914:	d14f      	bne.n	80109b6 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8010916:	f04f 0350 	mov.w	r3, #80	; 0x50
 801091a:	f383 8811 	msr	BASEPRI, r3
 801091e:	f3bf 8f6f 	isb	sy
 8010922:	f3bf 8f4f 	dsb	sy
 8010926:	61bb      	str	r3, [r7, #24]
}
 8010928:	bf00      	nop
 801092a:	e7fe      	b.n	801092a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801092c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801092e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010932:	f023 0301 	bic.w	r3, r3, #1
 8010936:	b2da      	uxtb	r2, r3
 8010938:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801093a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 801093e:	e03a      	b.n	80109b6 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8010940:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010942:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010946:	f043 0301 	orr.w	r3, r3, #1
 801094a:	b2da      	uxtb	r2, r3
 801094c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801094e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8010952:	68ba      	ldr	r2, [r7, #8]
 8010954:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010956:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8010958:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801095a:	699b      	ldr	r3, [r3, #24]
 801095c:	2b00      	cmp	r3, #0
 801095e:	d10a      	bne.n	8010976 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8010960:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010964:	f383 8811 	msr	BASEPRI, r3
 8010968:	f3bf 8f6f 	isb	sy
 801096c:	f3bf 8f4f 	dsb	sy
 8010970:	617b      	str	r3, [r7, #20]
}
 8010972:	bf00      	nop
 8010974:	e7fe      	b.n	8010974 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8010976:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010978:	699a      	ldr	r2, [r3, #24]
 801097a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801097c:	18d1      	adds	r1, r2, r3
 801097e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010980:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010982:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010984:	f7ff ff06 	bl	8010794 <prvInsertTimerInActiveList>
					break;
 8010988:	e015      	b.n	80109b6 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 801098a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801098c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010990:	f003 0302 	and.w	r3, r3, #2
 8010994:	2b00      	cmp	r3, #0
 8010996:	d103      	bne.n	80109a0 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8010998:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801099a:	f000 fbe1 	bl	8011160 <vPortFree>
 801099e:	e00a      	b.n	80109b6 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80109a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80109a2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80109a6:	f023 0301 	bic.w	r3, r3, #1
 80109aa:	b2da      	uxtb	r2, r3
 80109ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80109ae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80109b2:	e000      	b.n	80109b6 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80109b4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80109b6:	4b08      	ldr	r3, [pc, #32]	; (80109d8 <prvProcessReceivedCommands+0x1c0>)
 80109b8:	681b      	ldr	r3, [r3, #0]
 80109ba:	1d39      	adds	r1, r7, #4
 80109bc:	2200      	movs	r2, #0
 80109be:	4618      	mov	r0, r3
 80109c0:	f7fe f84c 	bl	800ea5c <xQueueReceive>
 80109c4:	4603      	mov	r3, r0
 80109c6:	2b00      	cmp	r3, #0
 80109c8:	f47f af2a 	bne.w	8010820 <prvProcessReceivedCommands+0x8>
	}
}
 80109cc:	bf00      	nop
 80109ce:	bf00      	nop
 80109d0:	3730      	adds	r7, #48	; 0x30
 80109d2:	46bd      	mov	sp, r7
 80109d4:	bd80      	pop	{r7, pc}
 80109d6:	bf00      	nop
 80109d8:	200022f4 	.word	0x200022f4

080109dc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80109dc:	b580      	push	{r7, lr}
 80109de:	b088      	sub	sp, #32
 80109e0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80109e2:	e048      	b.n	8010a76 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80109e4:	4b2d      	ldr	r3, [pc, #180]	; (8010a9c <prvSwitchTimerLists+0xc0>)
 80109e6:	681b      	ldr	r3, [r3, #0]
 80109e8:	68db      	ldr	r3, [r3, #12]
 80109ea:	681b      	ldr	r3, [r3, #0]
 80109ec:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80109ee:	4b2b      	ldr	r3, [pc, #172]	; (8010a9c <prvSwitchTimerLists+0xc0>)
 80109f0:	681b      	ldr	r3, [r3, #0]
 80109f2:	68db      	ldr	r3, [r3, #12]
 80109f4:	68db      	ldr	r3, [r3, #12]
 80109f6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80109f8:	68fb      	ldr	r3, [r7, #12]
 80109fa:	3304      	adds	r3, #4
 80109fc:	4618      	mov	r0, r3
 80109fe:	f7fd fd2b 	bl	800e458 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010a02:	68fb      	ldr	r3, [r7, #12]
 8010a04:	6a1b      	ldr	r3, [r3, #32]
 8010a06:	68f8      	ldr	r0, [r7, #12]
 8010a08:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8010a0a:	68fb      	ldr	r3, [r7, #12]
 8010a0c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010a10:	f003 0304 	and.w	r3, r3, #4
 8010a14:	2b00      	cmp	r3, #0
 8010a16:	d02e      	beq.n	8010a76 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8010a18:	68fb      	ldr	r3, [r7, #12]
 8010a1a:	699b      	ldr	r3, [r3, #24]
 8010a1c:	693a      	ldr	r2, [r7, #16]
 8010a1e:	4413      	add	r3, r2
 8010a20:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8010a22:	68ba      	ldr	r2, [r7, #8]
 8010a24:	693b      	ldr	r3, [r7, #16]
 8010a26:	429a      	cmp	r2, r3
 8010a28:	d90e      	bls.n	8010a48 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8010a2a:	68fb      	ldr	r3, [r7, #12]
 8010a2c:	68ba      	ldr	r2, [r7, #8]
 8010a2e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8010a30:	68fb      	ldr	r3, [r7, #12]
 8010a32:	68fa      	ldr	r2, [r7, #12]
 8010a34:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8010a36:	4b19      	ldr	r3, [pc, #100]	; (8010a9c <prvSwitchTimerLists+0xc0>)
 8010a38:	681a      	ldr	r2, [r3, #0]
 8010a3a:	68fb      	ldr	r3, [r7, #12]
 8010a3c:	3304      	adds	r3, #4
 8010a3e:	4619      	mov	r1, r3
 8010a40:	4610      	mov	r0, r2
 8010a42:	f7fd fcd0 	bl	800e3e6 <vListInsert>
 8010a46:	e016      	b.n	8010a76 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8010a48:	2300      	movs	r3, #0
 8010a4a:	9300      	str	r3, [sp, #0]
 8010a4c:	2300      	movs	r3, #0
 8010a4e:	693a      	ldr	r2, [r7, #16]
 8010a50:	2100      	movs	r1, #0
 8010a52:	68f8      	ldr	r0, [r7, #12]
 8010a54:	f7ff fd60 	bl	8010518 <xTimerGenericCommand>
 8010a58:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8010a5a:	687b      	ldr	r3, [r7, #4]
 8010a5c:	2b00      	cmp	r3, #0
 8010a5e:	d10a      	bne.n	8010a76 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8010a60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a64:	f383 8811 	msr	BASEPRI, r3
 8010a68:	f3bf 8f6f 	isb	sy
 8010a6c:	f3bf 8f4f 	dsb	sy
 8010a70:	603b      	str	r3, [r7, #0]
}
 8010a72:	bf00      	nop
 8010a74:	e7fe      	b.n	8010a74 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8010a76:	4b09      	ldr	r3, [pc, #36]	; (8010a9c <prvSwitchTimerLists+0xc0>)
 8010a78:	681b      	ldr	r3, [r3, #0]
 8010a7a:	681b      	ldr	r3, [r3, #0]
 8010a7c:	2b00      	cmp	r3, #0
 8010a7e:	d1b1      	bne.n	80109e4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8010a80:	4b06      	ldr	r3, [pc, #24]	; (8010a9c <prvSwitchTimerLists+0xc0>)
 8010a82:	681b      	ldr	r3, [r3, #0]
 8010a84:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8010a86:	4b06      	ldr	r3, [pc, #24]	; (8010aa0 <prvSwitchTimerLists+0xc4>)
 8010a88:	681b      	ldr	r3, [r3, #0]
 8010a8a:	4a04      	ldr	r2, [pc, #16]	; (8010a9c <prvSwitchTimerLists+0xc0>)
 8010a8c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8010a8e:	4a04      	ldr	r2, [pc, #16]	; (8010aa0 <prvSwitchTimerLists+0xc4>)
 8010a90:	697b      	ldr	r3, [r7, #20]
 8010a92:	6013      	str	r3, [r2, #0]
}
 8010a94:	bf00      	nop
 8010a96:	3718      	adds	r7, #24
 8010a98:	46bd      	mov	sp, r7
 8010a9a:	bd80      	pop	{r7, pc}
 8010a9c:	200022ec 	.word	0x200022ec
 8010aa0:	200022f0 	.word	0x200022f0

08010aa4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8010aa4:	b580      	push	{r7, lr}
 8010aa6:	b082      	sub	sp, #8
 8010aa8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8010aaa:	f000 f96b 	bl	8010d84 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8010aae:	4b15      	ldr	r3, [pc, #84]	; (8010b04 <prvCheckForValidListAndQueue+0x60>)
 8010ab0:	681b      	ldr	r3, [r3, #0]
 8010ab2:	2b00      	cmp	r3, #0
 8010ab4:	d120      	bne.n	8010af8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8010ab6:	4814      	ldr	r0, [pc, #80]	; (8010b08 <prvCheckForValidListAndQueue+0x64>)
 8010ab8:	f7fd fc44 	bl	800e344 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8010abc:	4813      	ldr	r0, [pc, #76]	; (8010b0c <prvCheckForValidListAndQueue+0x68>)
 8010abe:	f7fd fc41 	bl	800e344 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8010ac2:	4b13      	ldr	r3, [pc, #76]	; (8010b10 <prvCheckForValidListAndQueue+0x6c>)
 8010ac4:	4a10      	ldr	r2, [pc, #64]	; (8010b08 <prvCheckForValidListAndQueue+0x64>)
 8010ac6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8010ac8:	4b12      	ldr	r3, [pc, #72]	; (8010b14 <prvCheckForValidListAndQueue+0x70>)
 8010aca:	4a10      	ldr	r2, [pc, #64]	; (8010b0c <prvCheckForValidListAndQueue+0x68>)
 8010acc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8010ace:	2300      	movs	r3, #0
 8010ad0:	9300      	str	r3, [sp, #0]
 8010ad2:	4b11      	ldr	r3, [pc, #68]	; (8010b18 <prvCheckForValidListAndQueue+0x74>)
 8010ad4:	4a11      	ldr	r2, [pc, #68]	; (8010b1c <prvCheckForValidListAndQueue+0x78>)
 8010ad6:	2110      	movs	r1, #16
 8010ad8:	200a      	movs	r0, #10
 8010ada:	f7fd fd4f 	bl	800e57c <xQueueGenericCreateStatic>
 8010ade:	4603      	mov	r3, r0
 8010ae0:	4a08      	ldr	r2, [pc, #32]	; (8010b04 <prvCheckForValidListAndQueue+0x60>)
 8010ae2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8010ae4:	4b07      	ldr	r3, [pc, #28]	; (8010b04 <prvCheckForValidListAndQueue+0x60>)
 8010ae6:	681b      	ldr	r3, [r3, #0]
 8010ae8:	2b00      	cmp	r3, #0
 8010aea:	d005      	beq.n	8010af8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8010aec:	4b05      	ldr	r3, [pc, #20]	; (8010b04 <prvCheckForValidListAndQueue+0x60>)
 8010aee:	681b      	ldr	r3, [r3, #0]
 8010af0:	490b      	ldr	r1, [pc, #44]	; (8010b20 <prvCheckForValidListAndQueue+0x7c>)
 8010af2:	4618      	mov	r0, r3
 8010af4:	f7fe fa46 	bl	800ef84 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8010af8:	f000 f974 	bl	8010de4 <vPortExitCritical>
}
 8010afc:	bf00      	nop
 8010afe:	46bd      	mov	sp, r7
 8010b00:	bd80      	pop	{r7, pc}
 8010b02:	bf00      	nop
 8010b04:	200022f4 	.word	0x200022f4
 8010b08:	200022c4 	.word	0x200022c4
 8010b0c:	200022d8 	.word	0x200022d8
 8010b10:	200022ec 	.word	0x200022ec
 8010b14:	200022f0 	.word	0x200022f0
 8010b18:	200023a0 	.word	0x200023a0
 8010b1c:	20002300 	.word	0x20002300
 8010b20:	08014368 	.word	0x08014368

08010b24 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8010b24:	b480      	push	{r7}
 8010b26:	b085      	sub	sp, #20
 8010b28:	af00      	add	r7, sp, #0
 8010b2a:	60f8      	str	r0, [r7, #12]
 8010b2c:	60b9      	str	r1, [r7, #8]
 8010b2e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8010b30:	68fb      	ldr	r3, [r7, #12]
 8010b32:	3b04      	subs	r3, #4
 8010b34:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8010b36:	68fb      	ldr	r3, [r7, #12]
 8010b38:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8010b3c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8010b3e:	68fb      	ldr	r3, [r7, #12]
 8010b40:	3b04      	subs	r3, #4
 8010b42:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8010b44:	68bb      	ldr	r3, [r7, #8]
 8010b46:	f023 0201 	bic.w	r2, r3, #1
 8010b4a:	68fb      	ldr	r3, [r7, #12]
 8010b4c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8010b4e:	68fb      	ldr	r3, [r7, #12]
 8010b50:	3b04      	subs	r3, #4
 8010b52:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8010b54:	4a0c      	ldr	r2, [pc, #48]	; (8010b88 <pxPortInitialiseStack+0x64>)
 8010b56:	68fb      	ldr	r3, [r7, #12]
 8010b58:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8010b5a:	68fb      	ldr	r3, [r7, #12]
 8010b5c:	3b14      	subs	r3, #20
 8010b5e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8010b60:	687a      	ldr	r2, [r7, #4]
 8010b62:	68fb      	ldr	r3, [r7, #12]
 8010b64:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8010b66:	68fb      	ldr	r3, [r7, #12]
 8010b68:	3b04      	subs	r3, #4
 8010b6a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8010b6c:	68fb      	ldr	r3, [r7, #12]
 8010b6e:	f06f 0202 	mvn.w	r2, #2
 8010b72:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8010b74:	68fb      	ldr	r3, [r7, #12]
 8010b76:	3b20      	subs	r3, #32
 8010b78:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8010b7a:	68fb      	ldr	r3, [r7, #12]
}
 8010b7c:	4618      	mov	r0, r3
 8010b7e:	3714      	adds	r7, #20
 8010b80:	46bd      	mov	sp, r7
 8010b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b86:	4770      	bx	lr
 8010b88:	08010b8d 	.word	0x08010b8d

08010b8c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8010b8c:	b480      	push	{r7}
 8010b8e:	b085      	sub	sp, #20
 8010b90:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8010b92:	2300      	movs	r3, #0
 8010b94:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8010b96:	4b12      	ldr	r3, [pc, #72]	; (8010be0 <prvTaskExitError+0x54>)
 8010b98:	681b      	ldr	r3, [r3, #0]
 8010b9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010b9e:	d00a      	beq.n	8010bb6 <prvTaskExitError+0x2a>
	__asm volatile
 8010ba0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ba4:	f383 8811 	msr	BASEPRI, r3
 8010ba8:	f3bf 8f6f 	isb	sy
 8010bac:	f3bf 8f4f 	dsb	sy
 8010bb0:	60fb      	str	r3, [r7, #12]
}
 8010bb2:	bf00      	nop
 8010bb4:	e7fe      	b.n	8010bb4 <prvTaskExitError+0x28>
	__asm volatile
 8010bb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010bba:	f383 8811 	msr	BASEPRI, r3
 8010bbe:	f3bf 8f6f 	isb	sy
 8010bc2:	f3bf 8f4f 	dsb	sy
 8010bc6:	60bb      	str	r3, [r7, #8]
}
 8010bc8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8010bca:	bf00      	nop
 8010bcc:	687b      	ldr	r3, [r7, #4]
 8010bce:	2b00      	cmp	r3, #0
 8010bd0:	d0fc      	beq.n	8010bcc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8010bd2:	bf00      	nop
 8010bd4:	bf00      	nop
 8010bd6:	3714      	adds	r7, #20
 8010bd8:	46bd      	mov	sp, r7
 8010bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bde:	4770      	bx	lr
 8010be0:	2000004c 	.word	0x2000004c
	...

08010bf0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8010bf0:	4b07      	ldr	r3, [pc, #28]	; (8010c10 <pxCurrentTCBConst2>)
 8010bf2:	6819      	ldr	r1, [r3, #0]
 8010bf4:	6808      	ldr	r0, [r1, #0]
 8010bf6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010bfa:	f380 8809 	msr	PSP, r0
 8010bfe:	f3bf 8f6f 	isb	sy
 8010c02:	f04f 0000 	mov.w	r0, #0
 8010c06:	f380 8811 	msr	BASEPRI, r0
 8010c0a:	4770      	bx	lr
 8010c0c:	f3af 8000 	nop.w

08010c10 <pxCurrentTCBConst2>:
 8010c10:	20001dbc 	.word	0x20001dbc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8010c14:	bf00      	nop
 8010c16:	bf00      	nop

08010c18 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8010c18:	4808      	ldr	r0, [pc, #32]	; (8010c3c <prvPortStartFirstTask+0x24>)
 8010c1a:	6800      	ldr	r0, [r0, #0]
 8010c1c:	6800      	ldr	r0, [r0, #0]
 8010c1e:	f380 8808 	msr	MSP, r0
 8010c22:	f04f 0000 	mov.w	r0, #0
 8010c26:	f380 8814 	msr	CONTROL, r0
 8010c2a:	b662      	cpsie	i
 8010c2c:	b661      	cpsie	f
 8010c2e:	f3bf 8f4f 	dsb	sy
 8010c32:	f3bf 8f6f 	isb	sy
 8010c36:	df00      	svc	0
 8010c38:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8010c3a:	bf00      	nop
 8010c3c:	e000ed08 	.word	0xe000ed08

08010c40 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8010c40:	b580      	push	{r7, lr}
 8010c42:	b086      	sub	sp, #24
 8010c44:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8010c46:	4b46      	ldr	r3, [pc, #280]	; (8010d60 <xPortStartScheduler+0x120>)
 8010c48:	681b      	ldr	r3, [r3, #0]
 8010c4a:	4a46      	ldr	r2, [pc, #280]	; (8010d64 <xPortStartScheduler+0x124>)
 8010c4c:	4293      	cmp	r3, r2
 8010c4e:	d10a      	bne.n	8010c66 <xPortStartScheduler+0x26>
	__asm volatile
 8010c50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c54:	f383 8811 	msr	BASEPRI, r3
 8010c58:	f3bf 8f6f 	isb	sy
 8010c5c:	f3bf 8f4f 	dsb	sy
 8010c60:	613b      	str	r3, [r7, #16]
}
 8010c62:	bf00      	nop
 8010c64:	e7fe      	b.n	8010c64 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8010c66:	4b3e      	ldr	r3, [pc, #248]	; (8010d60 <xPortStartScheduler+0x120>)
 8010c68:	681b      	ldr	r3, [r3, #0]
 8010c6a:	4a3f      	ldr	r2, [pc, #252]	; (8010d68 <xPortStartScheduler+0x128>)
 8010c6c:	4293      	cmp	r3, r2
 8010c6e:	d10a      	bne.n	8010c86 <xPortStartScheduler+0x46>
	__asm volatile
 8010c70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c74:	f383 8811 	msr	BASEPRI, r3
 8010c78:	f3bf 8f6f 	isb	sy
 8010c7c:	f3bf 8f4f 	dsb	sy
 8010c80:	60fb      	str	r3, [r7, #12]
}
 8010c82:	bf00      	nop
 8010c84:	e7fe      	b.n	8010c84 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8010c86:	4b39      	ldr	r3, [pc, #228]	; (8010d6c <xPortStartScheduler+0x12c>)
 8010c88:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8010c8a:	697b      	ldr	r3, [r7, #20]
 8010c8c:	781b      	ldrb	r3, [r3, #0]
 8010c8e:	b2db      	uxtb	r3, r3
 8010c90:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8010c92:	697b      	ldr	r3, [r7, #20]
 8010c94:	22ff      	movs	r2, #255	; 0xff
 8010c96:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8010c98:	697b      	ldr	r3, [r7, #20]
 8010c9a:	781b      	ldrb	r3, [r3, #0]
 8010c9c:	b2db      	uxtb	r3, r3
 8010c9e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8010ca0:	78fb      	ldrb	r3, [r7, #3]
 8010ca2:	b2db      	uxtb	r3, r3
 8010ca4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8010ca8:	b2da      	uxtb	r2, r3
 8010caa:	4b31      	ldr	r3, [pc, #196]	; (8010d70 <xPortStartScheduler+0x130>)
 8010cac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8010cae:	4b31      	ldr	r3, [pc, #196]	; (8010d74 <xPortStartScheduler+0x134>)
 8010cb0:	2207      	movs	r2, #7
 8010cb2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8010cb4:	e009      	b.n	8010cca <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8010cb6:	4b2f      	ldr	r3, [pc, #188]	; (8010d74 <xPortStartScheduler+0x134>)
 8010cb8:	681b      	ldr	r3, [r3, #0]
 8010cba:	3b01      	subs	r3, #1
 8010cbc:	4a2d      	ldr	r2, [pc, #180]	; (8010d74 <xPortStartScheduler+0x134>)
 8010cbe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8010cc0:	78fb      	ldrb	r3, [r7, #3]
 8010cc2:	b2db      	uxtb	r3, r3
 8010cc4:	005b      	lsls	r3, r3, #1
 8010cc6:	b2db      	uxtb	r3, r3
 8010cc8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8010cca:	78fb      	ldrb	r3, [r7, #3]
 8010ccc:	b2db      	uxtb	r3, r3
 8010cce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010cd2:	2b80      	cmp	r3, #128	; 0x80
 8010cd4:	d0ef      	beq.n	8010cb6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8010cd6:	4b27      	ldr	r3, [pc, #156]	; (8010d74 <xPortStartScheduler+0x134>)
 8010cd8:	681b      	ldr	r3, [r3, #0]
 8010cda:	f1c3 0307 	rsb	r3, r3, #7
 8010cde:	2b04      	cmp	r3, #4
 8010ce0:	d00a      	beq.n	8010cf8 <xPortStartScheduler+0xb8>
	__asm volatile
 8010ce2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ce6:	f383 8811 	msr	BASEPRI, r3
 8010cea:	f3bf 8f6f 	isb	sy
 8010cee:	f3bf 8f4f 	dsb	sy
 8010cf2:	60bb      	str	r3, [r7, #8]
}
 8010cf4:	bf00      	nop
 8010cf6:	e7fe      	b.n	8010cf6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8010cf8:	4b1e      	ldr	r3, [pc, #120]	; (8010d74 <xPortStartScheduler+0x134>)
 8010cfa:	681b      	ldr	r3, [r3, #0]
 8010cfc:	021b      	lsls	r3, r3, #8
 8010cfe:	4a1d      	ldr	r2, [pc, #116]	; (8010d74 <xPortStartScheduler+0x134>)
 8010d00:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8010d02:	4b1c      	ldr	r3, [pc, #112]	; (8010d74 <xPortStartScheduler+0x134>)
 8010d04:	681b      	ldr	r3, [r3, #0]
 8010d06:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8010d0a:	4a1a      	ldr	r2, [pc, #104]	; (8010d74 <xPortStartScheduler+0x134>)
 8010d0c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8010d0e:	687b      	ldr	r3, [r7, #4]
 8010d10:	b2da      	uxtb	r2, r3
 8010d12:	697b      	ldr	r3, [r7, #20]
 8010d14:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8010d16:	4b18      	ldr	r3, [pc, #96]	; (8010d78 <xPortStartScheduler+0x138>)
 8010d18:	681b      	ldr	r3, [r3, #0]
 8010d1a:	4a17      	ldr	r2, [pc, #92]	; (8010d78 <xPortStartScheduler+0x138>)
 8010d1c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8010d20:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8010d22:	4b15      	ldr	r3, [pc, #84]	; (8010d78 <xPortStartScheduler+0x138>)
 8010d24:	681b      	ldr	r3, [r3, #0]
 8010d26:	4a14      	ldr	r2, [pc, #80]	; (8010d78 <xPortStartScheduler+0x138>)
 8010d28:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8010d2c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8010d2e:	f000 f8dd 	bl	8010eec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8010d32:	4b12      	ldr	r3, [pc, #72]	; (8010d7c <xPortStartScheduler+0x13c>)
 8010d34:	2200      	movs	r2, #0
 8010d36:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8010d38:	f000 f8fc 	bl	8010f34 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8010d3c:	4b10      	ldr	r3, [pc, #64]	; (8010d80 <xPortStartScheduler+0x140>)
 8010d3e:	681b      	ldr	r3, [r3, #0]
 8010d40:	4a0f      	ldr	r2, [pc, #60]	; (8010d80 <xPortStartScheduler+0x140>)
 8010d42:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8010d46:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8010d48:	f7ff ff66 	bl	8010c18 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8010d4c:	f7fe fe28 	bl	800f9a0 <vTaskSwitchContext>
	prvTaskExitError();
 8010d50:	f7ff ff1c 	bl	8010b8c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8010d54:	2300      	movs	r3, #0
}
 8010d56:	4618      	mov	r0, r3
 8010d58:	3718      	adds	r7, #24
 8010d5a:	46bd      	mov	sp, r7
 8010d5c:	bd80      	pop	{r7, pc}
 8010d5e:	bf00      	nop
 8010d60:	e000ed00 	.word	0xe000ed00
 8010d64:	410fc271 	.word	0x410fc271
 8010d68:	410fc270 	.word	0x410fc270
 8010d6c:	e000e400 	.word	0xe000e400
 8010d70:	200023f0 	.word	0x200023f0
 8010d74:	200023f4 	.word	0x200023f4
 8010d78:	e000ed20 	.word	0xe000ed20
 8010d7c:	2000004c 	.word	0x2000004c
 8010d80:	e000ef34 	.word	0xe000ef34

08010d84 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8010d84:	b480      	push	{r7}
 8010d86:	b083      	sub	sp, #12
 8010d88:	af00      	add	r7, sp, #0
	__asm volatile
 8010d8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d8e:	f383 8811 	msr	BASEPRI, r3
 8010d92:	f3bf 8f6f 	isb	sy
 8010d96:	f3bf 8f4f 	dsb	sy
 8010d9a:	607b      	str	r3, [r7, #4]
}
 8010d9c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8010d9e:	4b0f      	ldr	r3, [pc, #60]	; (8010ddc <vPortEnterCritical+0x58>)
 8010da0:	681b      	ldr	r3, [r3, #0]
 8010da2:	3301      	adds	r3, #1
 8010da4:	4a0d      	ldr	r2, [pc, #52]	; (8010ddc <vPortEnterCritical+0x58>)
 8010da6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8010da8:	4b0c      	ldr	r3, [pc, #48]	; (8010ddc <vPortEnterCritical+0x58>)
 8010daa:	681b      	ldr	r3, [r3, #0]
 8010dac:	2b01      	cmp	r3, #1
 8010dae:	d10f      	bne.n	8010dd0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8010db0:	4b0b      	ldr	r3, [pc, #44]	; (8010de0 <vPortEnterCritical+0x5c>)
 8010db2:	681b      	ldr	r3, [r3, #0]
 8010db4:	b2db      	uxtb	r3, r3
 8010db6:	2b00      	cmp	r3, #0
 8010db8:	d00a      	beq.n	8010dd0 <vPortEnterCritical+0x4c>
	__asm volatile
 8010dba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010dbe:	f383 8811 	msr	BASEPRI, r3
 8010dc2:	f3bf 8f6f 	isb	sy
 8010dc6:	f3bf 8f4f 	dsb	sy
 8010dca:	603b      	str	r3, [r7, #0]
}
 8010dcc:	bf00      	nop
 8010dce:	e7fe      	b.n	8010dce <vPortEnterCritical+0x4a>
	}
}
 8010dd0:	bf00      	nop
 8010dd2:	370c      	adds	r7, #12
 8010dd4:	46bd      	mov	sp, r7
 8010dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dda:	4770      	bx	lr
 8010ddc:	2000004c 	.word	0x2000004c
 8010de0:	e000ed04 	.word	0xe000ed04

08010de4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8010de4:	b480      	push	{r7}
 8010de6:	b083      	sub	sp, #12
 8010de8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8010dea:	4b12      	ldr	r3, [pc, #72]	; (8010e34 <vPortExitCritical+0x50>)
 8010dec:	681b      	ldr	r3, [r3, #0]
 8010dee:	2b00      	cmp	r3, #0
 8010df0:	d10a      	bne.n	8010e08 <vPortExitCritical+0x24>
	__asm volatile
 8010df2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010df6:	f383 8811 	msr	BASEPRI, r3
 8010dfa:	f3bf 8f6f 	isb	sy
 8010dfe:	f3bf 8f4f 	dsb	sy
 8010e02:	607b      	str	r3, [r7, #4]
}
 8010e04:	bf00      	nop
 8010e06:	e7fe      	b.n	8010e06 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8010e08:	4b0a      	ldr	r3, [pc, #40]	; (8010e34 <vPortExitCritical+0x50>)
 8010e0a:	681b      	ldr	r3, [r3, #0]
 8010e0c:	3b01      	subs	r3, #1
 8010e0e:	4a09      	ldr	r2, [pc, #36]	; (8010e34 <vPortExitCritical+0x50>)
 8010e10:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8010e12:	4b08      	ldr	r3, [pc, #32]	; (8010e34 <vPortExitCritical+0x50>)
 8010e14:	681b      	ldr	r3, [r3, #0]
 8010e16:	2b00      	cmp	r3, #0
 8010e18:	d105      	bne.n	8010e26 <vPortExitCritical+0x42>
 8010e1a:	2300      	movs	r3, #0
 8010e1c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8010e1e:	683b      	ldr	r3, [r7, #0]
 8010e20:	f383 8811 	msr	BASEPRI, r3
}
 8010e24:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8010e26:	bf00      	nop
 8010e28:	370c      	adds	r7, #12
 8010e2a:	46bd      	mov	sp, r7
 8010e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e30:	4770      	bx	lr
 8010e32:	bf00      	nop
 8010e34:	2000004c 	.word	0x2000004c
	...

08010e40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8010e40:	f3ef 8009 	mrs	r0, PSP
 8010e44:	f3bf 8f6f 	isb	sy
 8010e48:	4b15      	ldr	r3, [pc, #84]	; (8010ea0 <pxCurrentTCBConst>)
 8010e4a:	681a      	ldr	r2, [r3, #0]
 8010e4c:	f01e 0f10 	tst.w	lr, #16
 8010e50:	bf08      	it	eq
 8010e52:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8010e56:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010e5a:	6010      	str	r0, [r2, #0]
 8010e5c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8010e60:	f04f 0050 	mov.w	r0, #80	; 0x50
 8010e64:	f380 8811 	msr	BASEPRI, r0
 8010e68:	f3bf 8f4f 	dsb	sy
 8010e6c:	f3bf 8f6f 	isb	sy
 8010e70:	f7fe fd96 	bl	800f9a0 <vTaskSwitchContext>
 8010e74:	f04f 0000 	mov.w	r0, #0
 8010e78:	f380 8811 	msr	BASEPRI, r0
 8010e7c:	bc09      	pop	{r0, r3}
 8010e7e:	6819      	ldr	r1, [r3, #0]
 8010e80:	6808      	ldr	r0, [r1, #0]
 8010e82:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010e86:	f01e 0f10 	tst.w	lr, #16
 8010e8a:	bf08      	it	eq
 8010e8c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8010e90:	f380 8809 	msr	PSP, r0
 8010e94:	f3bf 8f6f 	isb	sy
 8010e98:	4770      	bx	lr
 8010e9a:	bf00      	nop
 8010e9c:	f3af 8000 	nop.w

08010ea0 <pxCurrentTCBConst>:
 8010ea0:	20001dbc 	.word	0x20001dbc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8010ea4:	bf00      	nop
 8010ea6:	bf00      	nop

08010ea8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8010ea8:	b580      	push	{r7, lr}
 8010eaa:	b082      	sub	sp, #8
 8010eac:	af00      	add	r7, sp, #0
	__asm volatile
 8010eae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010eb2:	f383 8811 	msr	BASEPRI, r3
 8010eb6:	f3bf 8f6f 	isb	sy
 8010eba:	f3bf 8f4f 	dsb	sy
 8010ebe:	607b      	str	r3, [r7, #4]
}
 8010ec0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8010ec2:	f7fe fcb3 	bl	800f82c <xTaskIncrementTick>
 8010ec6:	4603      	mov	r3, r0
 8010ec8:	2b00      	cmp	r3, #0
 8010eca:	d003      	beq.n	8010ed4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8010ecc:	4b06      	ldr	r3, [pc, #24]	; (8010ee8 <xPortSysTickHandler+0x40>)
 8010ece:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010ed2:	601a      	str	r2, [r3, #0]
 8010ed4:	2300      	movs	r3, #0
 8010ed6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8010ed8:	683b      	ldr	r3, [r7, #0]
 8010eda:	f383 8811 	msr	BASEPRI, r3
}
 8010ede:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8010ee0:	bf00      	nop
 8010ee2:	3708      	adds	r7, #8
 8010ee4:	46bd      	mov	sp, r7
 8010ee6:	bd80      	pop	{r7, pc}
 8010ee8:	e000ed04 	.word	0xe000ed04

08010eec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8010eec:	b480      	push	{r7}
 8010eee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8010ef0:	4b0b      	ldr	r3, [pc, #44]	; (8010f20 <vPortSetupTimerInterrupt+0x34>)
 8010ef2:	2200      	movs	r2, #0
 8010ef4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8010ef6:	4b0b      	ldr	r3, [pc, #44]	; (8010f24 <vPortSetupTimerInterrupt+0x38>)
 8010ef8:	2200      	movs	r2, #0
 8010efa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8010efc:	4b0a      	ldr	r3, [pc, #40]	; (8010f28 <vPortSetupTimerInterrupt+0x3c>)
 8010efe:	681b      	ldr	r3, [r3, #0]
 8010f00:	4a0a      	ldr	r2, [pc, #40]	; (8010f2c <vPortSetupTimerInterrupt+0x40>)
 8010f02:	fba2 2303 	umull	r2, r3, r2, r3
 8010f06:	099b      	lsrs	r3, r3, #6
 8010f08:	4a09      	ldr	r2, [pc, #36]	; (8010f30 <vPortSetupTimerInterrupt+0x44>)
 8010f0a:	3b01      	subs	r3, #1
 8010f0c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8010f0e:	4b04      	ldr	r3, [pc, #16]	; (8010f20 <vPortSetupTimerInterrupt+0x34>)
 8010f10:	2207      	movs	r2, #7
 8010f12:	601a      	str	r2, [r3, #0]
}
 8010f14:	bf00      	nop
 8010f16:	46bd      	mov	sp, r7
 8010f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f1c:	4770      	bx	lr
 8010f1e:	bf00      	nop
 8010f20:	e000e010 	.word	0xe000e010
 8010f24:	e000e018 	.word	0xe000e018
 8010f28:	20000008 	.word	0x20000008
 8010f2c:	10624dd3 	.word	0x10624dd3
 8010f30:	e000e014 	.word	0xe000e014

08010f34 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8010f34:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8010f44 <vPortEnableVFP+0x10>
 8010f38:	6801      	ldr	r1, [r0, #0]
 8010f3a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8010f3e:	6001      	str	r1, [r0, #0]
 8010f40:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8010f42:	bf00      	nop
 8010f44:	e000ed88 	.word	0xe000ed88

08010f48 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8010f48:	b480      	push	{r7}
 8010f4a:	b085      	sub	sp, #20
 8010f4c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8010f4e:	f3ef 8305 	mrs	r3, IPSR
 8010f52:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8010f54:	68fb      	ldr	r3, [r7, #12]
 8010f56:	2b0f      	cmp	r3, #15
 8010f58:	d914      	bls.n	8010f84 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8010f5a:	4a17      	ldr	r2, [pc, #92]	; (8010fb8 <vPortValidateInterruptPriority+0x70>)
 8010f5c:	68fb      	ldr	r3, [r7, #12]
 8010f5e:	4413      	add	r3, r2
 8010f60:	781b      	ldrb	r3, [r3, #0]
 8010f62:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8010f64:	4b15      	ldr	r3, [pc, #84]	; (8010fbc <vPortValidateInterruptPriority+0x74>)
 8010f66:	781b      	ldrb	r3, [r3, #0]
 8010f68:	7afa      	ldrb	r2, [r7, #11]
 8010f6a:	429a      	cmp	r2, r3
 8010f6c:	d20a      	bcs.n	8010f84 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8010f6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f72:	f383 8811 	msr	BASEPRI, r3
 8010f76:	f3bf 8f6f 	isb	sy
 8010f7a:	f3bf 8f4f 	dsb	sy
 8010f7e:	607b      	str	r3, [r7, #4]
}
 8010f80:	bf00      	nop
 8010f82:	e7fe      	b.n	8010f82 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8010f84:	4b0e      	ldr	r3, [pc, #56]	; (8010fc0 <vPortValidateInterruptPriority+0x78>)
 8010f86:	681b      	ldr	r3, [r3, #0]
 8010f88:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8010f8c:	4b0d      	ldr	r3, [pc, #52]	; (8010fc4 <vPortValidateInterruptPriority+0x7c>)
 8010f8e:	681b      	ldr	r3, [r3, #0]
 8010f90:	429a      	cmp	r2, r3
 8010f92:	d90a      	bls.n	8010faa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8010f94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f98:	f383 8811 	msr	BASEPRI, r3
 8010f9c:	f3bf 8f6f 	isb	sy
 8010fa0:	f3bf 8f4f 	dsb	sy
 8010fa4:	603b      	str	r3, [r7, #0]
}
 8010fa6:	bf00      	nop
 8010fa8:	e7fe      	b.n	8010fa8 <vPortValidateInterruptPriority+0x60>
	}
 8010faa:	bf00      	nop
 8010fac:	3714      	adds	r7, #20
 8010fae:	46bd      	mov	sp, r7
 8010fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fb4:	4770      	bx	lr
 8010fb6:	bf00      	nop
 8010fb8:	e000e3f0 	.word	0xe000e3f0
 8010fbc:	200023f0 	.word	0x200023f0
 8010fc0:	e000ed0c 	.word	0xe000ed0c
 8010fc4:	200023f4 	.word	0x200023f4

08010fc8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8010fc8:	b580      	push	{r7, lr}
 8010fca:	b08a      	sub	sp, #40	; 0x28
 8010fcc:	af00      	add	r7, sp, #0
 8010fce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8010fd0:	2300      	movs	r3, #0
 8010fd2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8010fd4:	f7fe fb6e 	bl	800f6b4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8010fd8:	4b5b      	ldr	r3, [pc, #364]	; (8011148 <pvPortMalloc+0x180>)
 8010fda:	681b      	ldr	r3, [r3, #0]
 8010fdc:	2b00      	cmp	r3, #0
 8010fde:	d101      	bne.n	8010fe4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8010fe0:	f000 f920 	bl	8011224 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8010fe4:	4b59      	ldr	r3, [pc, #356]	; (801114c <pvPortMalloc+0x184>)
 8010fe6:	681a      	ldr	r2, [r3, #0]
 8010fe8:	687b      	ldr	r3, [r7, #4]
 8010fea:	4013      	ands	r3, r2
 8010fec:	2b00      	cmp	r3, #0
 8010fee:	f040 8093 	bne.w	8011118 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8010ff2:	687b      	ldr	r3, [r7, #4]
 8010ff4:	2b00      	cmp	r3, #0
 8010ff6:	d01d      	beq.n	8011034 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8010ff8:	2208      	movs	r2, #8
 8010ffa:	687b      	ldr	r3, [r7, #4]
 8010ffc:	4413      	add	r3, r2
 8010ffe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8011000:	687b      	ldr	r3, [r7, #4]
 8011002:	f003 0307 	and.w	r3, r3, #7
 8011006:	2b00      	cmp	r3, #0
 8011008:	d014      	beq.n	8011034 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801100a:	687b      	ldr	r3, [r7, #4]
 801100c:	f023 0307 	bic.w	r3, r3, #7
 8011010:	3308      	adds	r3, #8
 8011012:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8011014:	687b      	ldr	r3, [r7, #4]
 8011016:	f003 0307 	and.w	r3, r3, #7
 801101a:	2b00      	cmp	r3, #0
 801101c:	d00a      	beq.n	8011034 <pvPortMalloc+0x6c>
	__asm volatile
 801101e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011022:	f383 8811 	msr	BASEPRI, r3
 8011026:	f3bf 8f6f 	isb	sy
 801102a:	f3bf 8f4f 	dsb	sy
 801102e:	617b      	str	r3, [r7, #20]
}
 8011030:	bf00      	nop
 8011032:	e7fe      	b.n	8011032 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8011034:	687b      	ldr	r3, [r7, #4]
 8011036:	2b00      	cmp	r3, #0
 8011038:	d06e      	beq.n	8011118 <pvPortMalloc+0x150>
 801103a:	4b45      	ldr	r3, [pc, #276]	; (8011150 <pvPortMalloc+0x188>)
 801103c:	681b      	ldr	r3, [r3, #0]
 801103e:	687a      	ldr	r2, [r7, #4]
 8011040:	429a      	cmp	r2, r3
 8011042:	d869      	bhi.n	8011118 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8011044:	4b43      	ldr	r3, [pc, #268]	; (8011154 <pvPortMalloc+0x18c>)
 8011046:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8011048:	4b42      	ldr	r3, [pc, #264]	; (8011154 <pvPortMalloc+0x18c>)
 801104a:	681b      	ldr	r3, [r3, #0]
 801104c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801104e:	e004      	b.n	801105a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8011050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011052:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8011054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011056:	681b      	ldr	r3, [r3, #0]
 8011058:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801105a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801105c:	685b      	ldr	r3, [r3, #4]
 801105e:	687a      	ldr	r2, [r7, #4]
 8011060:	429a      	cmp	r2, r3
 8011062:	d903      	bls.n	801106c <pvPortMalloc+0xa4>
 8011064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011066:	681b      	ldr	r3, [r3, #0]
 8011068:	2b00      	cmp	r3, #0
 801106a:	d1f1      	bne.n	8011050 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801106c:	4b36      	ldr	r3, [pc, #216]	; (8011148 <pvPortMalloc+0x180>)
 801106e:	681b      	ldr	r3, [r3, #0]
 8011070:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011072:	429a      	cmp	r2, r3
 8011074:	d050      	beq.n	8011118 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8011076:	6a3b      	ldr	r3, [r7, #32]
 8011078:	681b      	ldr	r3, [r3, #0]
 801107a:	2208      	movs	r2, #8
 801107c:	4413      	add	r3, r2
 801107e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8011080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011082:	681a      	ldr	r2, [r3, #0]
 8011084:	6a3b      	ldr	r3, [r7, #32]
 8011086:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8011088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801108a:	685a      	ldr	r2, [r3, #4]
 801108c:	687b      	ldr	r3, [r7, #4]
 801108e:	1ad2      	subs	r2, r2, r3
 8011090:	2308      	movs	r3, #8
 8011092:	005b      	lsls	r3, r3, #1
 8011094:	429a      	cmp	r2, r3
 8011096:	d91f      	bls.n	80110d8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8011098:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801109a:	687b      	ldr	r3, [r7, #4]
 801109c:	4413      	add	r3, r2
 801109e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80110a0:	69bb      	ldr	r3, [r7, #24]
 80110a2:	f003 0307 	and.w	r3, r3, #7
 80110a6:	2b00      	cmp	r3, #0
 80110a8:	d00a      	beq.n	80110c0 <pvPortMalloc+0xf8>
	__asm volatile
 80110aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80110ae:	f383 8811 	msr	BASEPRI, r3
 80110b2:	f3bf 8f6f 	isb	sy
 80110b6:	f3bf 8f4f 	dsb	sy
 80110ba:	613b      	str	r3, [r7, #16]
}
 80110bc:	bf00      	nop
 80110be:	e7fe      	b.n	80110be <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80110c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80110c2:	685a      	ldr	r2, [r3, #4]
 80110c4:	687b      	ldr	r3, [r7, #4]
 80110c6:	1ad2      	subs	r2, r2, r3
 80110c8:	69bb      	ldr	r3, [r7, #24]
 80110ca:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80110cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80110ce:	687a      	ldr	r2, [r7, #4]
 80110d0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80110d2:	69b8      	ldr	r0, [r7, #24]
 80110d4:	f000 f908 	bl	80112e8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80110d8:	4b1d      	ldr	r3, [pc, #116]	; (8011150 <pvPortMalloc+0x188>)
 80110da:	681a      	ldr	r2, [r3, #0]
 80110dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80110de:	685b      	ldr	r3, [r3, #4]
 80110e0:	1ad3      	subs	r3, r2, r3
 80110e2:	4a1b      	ldr	r2, [pc, #108]	; (8011150 <pvPortMalloc+0x188>)
 80110e4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80110e6:	4b1a      	ldr	r3, [pc, #104]	; (8011150 <pvPortMalloc+0x188>)
 80110e8:	681a      	ldr	r2, [r3, #0]
 80110ea:	4b1b      	ldr	r3, [pc, #108]	; (8011158 <pvPortMalloc+0x190>)
 80110ec:	681b      	ldr	r3, [r3, #0]
 80110ee:	429a      	cmp	r2, r3
 80110f0:	d203      	bcs.n	80110fa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80110f2:	4b17      	ldr	r3, [pc, #92]	; (8011150 <pvPortMalloc+0x188>)
 80110f4:	681b      	ldr	r3, [r3, #0]
 80110f6:	4a18      	ldr	r2, [pc, #96]	; (8011158 <pvPortMalloc+0x190>)
 80110f8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80110fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80110fc:	685a      	ldr	r2, [r3, #4]
 80110fe:	4b13      	ldr	r3, [pc, #76]	; (801114c <pvPortMalloc+0x184>)
 8011100:	681b      	ldr	r3, [r3, #0]
 8011102:	431a      	orrs	r2, r3
 8011104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011106:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8011108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801110a:	2200      	movs	r2, #0
 801110c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 801110e:	4b13      	ldr	r3, [pc, #76]	; (801115c <pvPortMalloc+0x194>)
 8011110:	681b      	ldr	r3, [r3, #0]
 8011112:	3301      	adds	r3, #1
 8011114:	4a11      	ldr	r2, [pc, #68]	; (801115c <pvPortMalloc+0x194>)
 8011116:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8011118:	f7fe fada 	bl	800f6d0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801111c:	69fb      	ldr	r3, [r7, #28]
 801111e:	f003 0307 	and.w	r3, r3, #7
 8011122:	2b00      	cmp	r3, #0
 8011124:	d00a      	beq.n	801113c <pvPortMalloc+0x174>
	__asm volatile
 8011126:	f04f 0350 	mov.w	r3, #80	; 0x50
 801112a:	f383 8811 	msr	BASEPRI, r3
 801112e:	f3bf 8f6f 	isb	sy
 8011132:	f3bf 8f4f 	dsb	sy
 8011136:	60fb      	str	r3, [r7, #12]
}
 8011138:	bf00      	nop
 801113a:	e7fe      	b.n	801113a <pvPortMalloc+0x172>
	return pvReturn;
 801113c:	69fb      	ldr	r3, [r7, #28]
}
 801113e:	4618      	mov	r0, r3
 8011140:	3728      	adds	r7, #40	; 0x28
 8011142:	46bd      	mov	sp, r7
 8011144:	bd80      	pop	{r7, pc}
 8011146:	bf00      	nop
 8011148:	20004b10 	.word	0x20004b10
 801114c:	20004b24 	.word	0x20004b24
 8011150:	20004b14 	.word	0x20004b14
 8011154:	20004b08 	.word	0x20004b08
 8011158:	20004b18 	.word	0x20004b18
 801115c:	20004b1c 	.word	0x20004b1c

08011160 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8011160:	b580      	push	{r7, lr}
 8011162:	b086      	sub	sp, #24
 8011164:	af00      	add	r7, sp, #0
 8011166:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8011168:	687b      	ldr	r3, [r7, #4]
 801116a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 801116c:	687b      	ldr	r3, [r7, #4]
 801116e:	2b00      	cmp	r3, #0
 8011170:	d04d      	beq.n	801120e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8011172:	2308      	movs	r3, #8
 8011174:	425b      	negs	r3, r3
 8011176:	697a      	ldr	r2, [r7, #20]
 8011178:	4413      	add	r3, r2
 801117a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 801117c:	697b      	ldr	r3, [r7, #20]
 801117e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8011180:	693b      	ldr	r3, [r7, #16]
 8011182:	685a      	ldr	r2, [r3, #4]
 8011184:	4b24      	ldr	r3, [pc, #144]	; (8011218 <vPortFree+0xb8>)
 8011186:	681b      	ldr	r3, [r3, #0]
 8011188:	4013      	ands	r3, r2
 801118a:	2b00      	cmp	r3, #0
 801118c:	d10a      	bne.n	80111a4 <vPortFree+0x44>
	__asm volatile
 801118e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011192:	f383 8811 	msr	BASEPRI, r3
 8011196:	f3bf 8f6f 	isb	sy
 801119a:	f3bf 8f4f 	dsb	sy
 801119e:	60fb      	str	r3, [r7, #12]
}
 80111a0:	bf00      	nop
 80111a2:	e7fe      	b.n	80111a2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80111a4:	693b      	ldr	r3, [r7, #16]
 80111a6:	681b      	ldr	r3, [r3, #0]
 80111a8:	2b00      	cmp	r3, #0
 80111aa:	d00a      	beq.n	80111c2 <vPortFree+0x62>
	__asm volatile
 80111ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80111b0:	f383 8811 	msr	BASEPRI, r3
 80111b4:	f3bf 8f6f 	isb	sy
 80111b8:	f3bf 8f4f 	dsb	sy
 80111bc:	60bb      	str	r3, [r7, #8]
}
 80111be:	bf00      	nop
 80111c0:	e7fe      	b.n	80111c0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80111c2:	693b      	ldr	r3, [r7, #16]
 80111c4:	685a      	ldr	r2, [r3, #4]
 80111c6:	4b14      	ldr	r3, [pc, #80]	; (8011218 <vPortFree+0xb8>)
 80111c8:	681b      	ldr	r3, [r3, #0]
 80111ca:	4013      	ands	r3, r2
 80111cc:	2b00      	cmp	r3, #0
 80111ce:	d01e      	beq.n	801120e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80111d0:	693b      	ldr	r3, [r7, #16]
 80111d2:	681b      	ldr	r3, [r3, #0]
 80111d4:	2b00      	cmp	r3, #0
 80111d6:	d11a      	bne.n	801120e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80111d8:	693b      	ldr	r3, [r7, #16]
 80111da:	685a      	ldr	r2, [r3, #4]
 80111dc:	4b0e      	ldr	r3, [pc, #56]	; (8011218 <vPortFree+0xb8>)
 80111de:	681b      	ldr	r3, [r3, #0]
 80111e0:	43db      	mvns	r3, r3
 80111e2:	401a      	ands	r2, r3
 80111e4:	693b      	ldr	r3, [r7, #16]
 80111e6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80111e8:	f7fe fa64 	bl	800f6b4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80111ec:	693b      	ldr	r3, [r7, #16]
 80111ee:	685a      	ldr	r2, [r3, #4]
 80111f0:	4b0a      	ldr	r3, [pc, #40]	; (801121c <vPortFree+0xbc>)
 80111f2:	681b      	ldr	r3, [r3, #0]
 80111f4:	4413      	add	r3, r2
 80111f6:	4a09      	ldr	r2, [pc, #36]	; (801121c <vPortFree+0xbc>)
 80111f8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80111fa:	6938      	ldr	r0, [r7, #16]
 80111fc:	f000 f874 	bl	80112e8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8011200:	4b07      	ldr	r3, [pc, #28]	; (8011220 <vPortFree+0xc0>)
 8011202:	681b      	ldr	r3, [r3, #0]
 8011204:	3301      	adds	r3, #1
 8011206:	4a06      	ldr	r2, [pc, #24]	; (8011220 <vPortFree+0xc0>)
 8011208:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 801120a:	f7fe fa61 	bl	800f6d0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801120e:	bf00      	nop
 8011210:	3718      	adds	r7, #24
 8011212:	46bd      	mov	sp, r7
 8011214:	bd80      	pop	{r7, pc}
 8011216:	bf00      	nop
 8011218:	20004b24 	.word	0x20004b24
 801121c:	20004b14 	.word	0x20004b14
 8011220:	20004b20 	.word	0x20004b20

08011224 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8011224:	b480      	push	{r7}
 8011226:	b085      	sub	sp, #20
 8011228:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801122a:	f242 7310 	movw	r3, #10000	; 0x2710
 801122e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8011230:	4b27      	ldr	r3, [pc, #156]	; (80112d0 <prvHeapInit+0xac>)
 8011232:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8011234:	68fb      	ldr	r3, [r7, #12]
 8011236:	f003 0307 	and.w	r3, r3, #7
 801123a:	2b00      	cmp	r3, #0
 801123c:	d00c      	beq.n	8011258 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801123e:	68fb      	ldr	r3, [r7, #12]
 8011240:	3307      	adds	r3, #7
 8011242:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8011244:	68fb      	ldr	r3, [r7, #12]
 8011246:	f023 0307 	bic.w	r3, r3, #7
 801124a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801124c:	68ba      	ldr	r2, [r7, #8]
 801124e:	68fb      	ldr	r3, [r7, #12]
 8011250:	1ad3      	subs	r3, r2, r3
 8011252:	4a1f      	ldr	r2, [pc, #124]	; (80112d0 <prvHeapInit+0xac>)
 8011254:	4413      	add	r3, r2
 8011256:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8011258:	68fb      	ldr	r3, [r7, #12]
 801125a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801125c:	4a1d      	ldr	r2, [pc, #116]	; (80112d4 <prvHeapInit+0xb0>)
 801125e:	687b      	ldr	r3, [r7, #4]
 8011260:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8011262:	4b1c      	ldr	r3, [pc, #112]	; (80112d4 <prvHeapInit+0xb0>)
 8011264:	2200      	movs	r2, #0
 8011266:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8011268:	687b      	ldr	r3, [r7, #4]
 801126a:	68ba      	ldr	r2, [r7, #8]
 801126c:	4413      	add	r3, r2
 801126e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8011270:	2208      	movs	r2, #8
 8011272:	68fb      	ldr	r3, [r7, #12]
 8011274:	1a9b      	subs	r3, r3, r2
 8011276:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8011278:	68fb      	ldr	r3, [r7, #12]
 801127a:	f023 0307 	bic.w	r3, r3, #7
 801127e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8011280:	68fb      	ldr	r3, [r7, #12]
 8011282:	4a15      	ldr	r2, [pc, #84]	; (80112d8 <prvHeapInit+0xb4>)
 8011284:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8011286:	4b14      	ldr	r3, [pc, #80]	; (80112d8 <prvHeapInit+0xb4>)
 8011288:	681b      	ldr	r3, [r3, #0]
 801128a:	2200      	movs	r2, #0
 801128c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801128e:	4b12      	ldr	r3, [pc, #72]	; (80112d8 <prvHeapInit+0xb4>)
 8011290:	681b      	ldr	r3, [r3, #0]
 8011292:	2200      	movs	r2, #0
 8011294:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8011296:	687b      	ldr	r3, [r7, #4]
 8011298:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801129a:	683b      	ldr	r3, [r7, #0]
 801129c:	68fa      	ldr	r2, [r7, #12]
 801129e:	1ad2      	subs	r2, r2, r3
 80112a0:	683b      	ldr	r3, [r7, #0]
 80112a2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80112a4:	4b0c      	ldr	r3, [pc, #48]	; (80112d8 <prvHeapInit+0xb4>)
 80112a6:	681a      	ldr	r2, [r3, #0]
 80112a8:	683b      	ldr	r3, [r7, #0]
 80112aa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80112ac:	683b      	ldr	r3, [r7, #0]
 80112ae:	685b      	ldr	r3, [r3, #4]
 80112b0:	4a0a      	ldr	r2, [pc, #40]	; (80112dc <prvHeapInit+0xb8>)
 80112b2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80112b4:	683b      	ldr	r3, [r7, #0]
 80112b6:	685b      	ldr	r3, [r3, #4]
 80112b8:	4a09      	ldr	r2, [pc, #36]	; (80112e0 <prvHeapInit+0xbc>)
 80112ba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80112bc:	4b09      	ldr	r3, [pc, #36]	; (80112e4 <prvHeapInit+0xc0>)
 80112be:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80112c2:	601a      	str	r2, [r3, #0]
}
 80112c4:	bf00      	nop
 80112c6:	3714      	adds	r7, #20
 80112c8:	46bd      	mov	sp, r7
 80112ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112ce:	4770      	bx	lr
 80112d0:	200023f8 	.word	0x200023f8
 80112d4:	20004b08 	.word	0x20004b08
 80112d8:	20004b10 	.word	0x20004b10
 80112dc:	20004b18 	.word	0x20004b18
 80112e0:	20004b14 	.word	0x20004b14
 80112e4:	20004b24 	.word	0x20004b24

080112e8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80112e8:	b480      	push	{r7}
 80112ea:	b085      	sub	sp, #20
 80112ec:	af00      	add	r7, sp, #0
 80112ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80112f0:	4b28      	ldr	r3, [pc, #160]	; (8011394 <prvInsertBlockIntoFreeList+0xac>)
 80112f2:	60fb      	str	r3, [r7, #12]
 80112f4:	e002      	b.n	80112fc <prvInsertBlockIntoFreeList+0x14>
 80112f6:	68fb      	ldr	r3, [r7, #12]
 80112f8:	681b      	ldr	r3, [r3, #0]
 80112fa:	60fb      	str	r3, [r7, #12]
 80112fc:	68fb      	ldr	r3, [r7, #12]
 80112fe:	681b      	ldr	r3, [r3, #0]
 8011300:	687a      	ldr	r2, [r7, #4]
 8011302:	429a      	cmp	r2, r3
 8011304:	d8f7      	bhi.n	80112f6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8011306:	68fb      	ldr	r3, [r7, #12]
 8011308:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801130a:	68fb      	ldr	r3, [r7, #12]
 801130c:	685b      	ldr	r3, [r3, #4]
 801130e:	68ba      	ldr	r2, [r7, #8]
 8011310:	4413      	add	r3, r2
 8011312:	687a      	ldr	r2, [r7, #4]
 8011314:	429a      	cmp	r2, r3
 8011316:	d108      	bne.n	801132a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8011318:	68fb      	ldr	r3, [r7, #12]
 801131a:	685a      	ldr	r2, [r3, #4]
 801131c:	687b      	ldr	r3, [r7, #4]
 801131e:	685b      	ldr	r3, [r3, #4]
 8011320:	441a      	add	r2, r3
 8011322:	68fb      	ldr	r3, [r7, #12]
 8011324:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8011326:	68fb      	ldr	r3, [r7, #12]
 8011328:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801132a:	687b      	ldr	r3, [r7, #4]
 801132c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801132e:	687b      	ldr	r3, [r7, #4]
 8011330:	685b      	ldr	r3, [r3, #4]
 8011332:	68ba      	ldr	r2, [r7, #8]
 8011334:	441a      	add	r2, r3
 8011336:	68fb      	ldr	r3, [r7, #12]
 8011338:	681b      	ldr	r3, [r3, #0]
 801133a:	429a      	cmp	r2, r3
 801133c:	d118      	bne.n	8011370 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801133e:	68fb      	ldr	r3, [r7, #12]
 8011340:	681a      	ldr	r2, [r3, #0]
 8011342:	4b15      	ldr	r3, [pc, #84]	; (8011398 <prvInsertBlockIntoFreeList+0xb0>)
 8011344:	681b      	ldr	r3, [r3, #0]
 8011346:	429a      	cmp	r2, r3
 8011348:	d00d      	beq.n	8011366 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801134a:	687b      	ldr	r3, [r7, #4]
 801134c:	685a      	ldr	r2, [r3, #4]
 801134e:	68fb      	ldr	r3, [r7, #12]
 8011350:	681b      	ldr	r3, [r3, #0]
 8011352:	685b      	ldr	r3, [r3, #4]
 8011354:	441a      	add	r2, r3
 8011356:	687b      	ldr	r3, [r7, #4]
 8011358:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801135a:	68fb      	ldr	r3, [r7, #12]
 801135c:	681b      	ldr	r3, [r3, #0]
 801135e:	681a      	ldr	r2, [r3, #0]
 8011360:	687b      	ldr	r3, [r7, #4]
 8011362:	601a      	str	r2, [r3, #0]
 8011364:	e008      	b.n	8011378 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8011366:	4b0c      	ldr	r3, [pc, #48]	; (8011398 <prvInsertBlockIntoFreeList+0xb0>)
 8011368:	681a      	ldr	r2, [r3, #0]
 801136a:	687b      	ldr	r3, [r7, #4]
 801136c:	601a      	str	r2, [r3, #0]
 801136e:	e003      	b.n	8011378 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8011370:	68fb      	ldr	r3, [r7, #12]
 8011372:	681a      	ldr	r2, [r3, #0]
 8011374:	687b      	ldr	r3, [r7, #4]
 8011376:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8011378:	68fa      	ldr	r2, [r7, #12]
 801137a:	687b      	ldr	r3, [r7, #4]
 801137c:	429a      	cmp	r2, r3
 801137e:	d002      	beq.n	8011386 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8011380:	68fb      	ldr	r3, [r7, #12]
 8011382:	687a      	ldr	r2, [r7, #4]
 8011384:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8011386:	bf00      	nop
 8011388:	3714      	adds	r7, #20
 801138a:	46bd      	mov	sp, r7
 801138c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011390:	4770      	bx	lr
 8011392:	bf00      	nop
 8011394:	20004b08 	.word	0x20004b08
 8011398:	20004b10 	.word	0x20004b10

0801139c <__assert_func>:
 801139c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801139e:	4614      	mov	r4, r2
 80113a0:	461a      	mov	r2, r3
 80113a2:	4b09      	ldr	r3, [pc, #36]	; (80113c8 <__assert_func+0x2c>)
 80113a4:	681b      	ldr	r3, [r3, #0]
 80113a6:	4605      	mov	r5, r0
 80113a8:	68d8      	ldr	r0, [r3, #12]
 80113aa:	b14c      	cbz	r4, 80113c0 <__assert_func+0x24>
 80113ac:	4b07      	ldr	r3, [pc, #28]	; (80113cc <__assert_func+0x30>)
 80113ae:	9100      	str	r1, [sp, #0]
 80113b0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80113b4:	4906      	ldr	r1, [pc, #24]	; (80113d0 <__assert_func+0x34>)
 80113b6:	462b      	mov	r3, r5
 80113b8:	f000 f8ea 	bl	8011590 <fiprintf>
 80113bc:	f000 fffa 	bl	80123b4 <abort>
 80113c0:	4b04      	ldr	r3, [pc, #16]	; (80113d4 <__assert_func+0x38>)
 80113c2:	461c      	mov	r4, r3
 80113c4:	e7f3      	b.n	80113ae <__assert_func+0x12>
 80113c6:	bf00      	nop
 80113c8:	20000050 	.word	0x20000050
 80113cc:	080146df 	.word	0x080146df
 80113d0:	080146ec 	.word	0x080146ec
 80113d4:	0801471a 	.word	0x0801471a

080113d8 <__errno>:
 80113d8:	4b01      	ldr	r3, [pc, #4]	; (80113e0 <__errno+0x8>)
 80113da:	6818      	ldr	r0, [r3, #0]
 80113dc:	4770      	bx	lr
 80113de:	bf00      	nop
 80113e0:	20000050 	.word	0x20000050

080113e4 <std>:
 80113e4:	2300      	movs	r3, #0
 80113e6:	b510      	push	{r4, lr}
 80113e8:	4604      	mov	r4, r0
 80113ea:	e9c0 3300 	strd	r3, r3, [r0]
 80113ee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80113f2:	6083      	str	r3, [r0, #8]
 80113f4:	8181      	strh	r1, [r0, #12]
 80113f6:	6643      	str	r3, [r0, #100]	; 0x64
 80113f8:	81c2      	strh	r2, [r0, #14]
 80113fa:	6183      	str	r3, [r0, #24]
 80113fc:	4619      	mov	r1, r3
 80113fe:	2208      	movs	r2, #8
 8011400:	305c      	adds	r0, #92	; 0x5c
 8011402:	f000 f956 	bl	80116b2 <memset>
 8011406:	4b05      	ldr	r3, [pc, #20]	; (801141c <std+0x38>)
 8011408:	6263      	str	r3, [r4, #36]	; 0x24
 801140a:	4b05      	ldr	r3, [pc, #20]	; (8011420 <std+0x3c>)
 801140c:	62a3      	str	r3, [r4, #40]	; 0x28
 801140e:	4b05      	ldr	r3, [pc, #20]	; (8011424 <std+0x40>)
 8011410:	62e3      	str	r3, [r4, #44]	; 0x2c
 8011412:	4b05      	ldr	r3, [pc, #20]	; (8011428 <std+0x44>)
 8011414:	6224      	str	r4, [r4, #32]
 8011416:	6323      	str	r3, [r4, #48]	; 0x30
 8011418:	bd10      	pop	{r4, pc}
 801141a:	bf00      	nop
 801141c:	08012081 	.word	0x08012081
 8011420:	080120a3 	.word	0x080120a3
 8011424:	080120db 	.word	0x080120db
 8011428:	080120ff 	.word	0x080120ff

0801142c <_cleanup_r>:
 801142c:	4901      	ldr	r1, [pc, #4]	; (8011434 <_cleanup_r+0x8>)
 801142e:	f000 b8c1 	b.w	80115b4 <_fwalk_reent>
 8011432:	bf00      	nop
 8011434:	080124f1 	.word	0x080124f1

08011438 <__sfmoreglue>:
 8011438:	b570      	push	{r4, r5, r6, lr}
 801143a:	2268      	movs	r2, #104	; 0x68
 801143c:	1e4d      	subs	r5, r1, #1
 801143e:	4355      	muls	r5, r2
 8011440:	460e      	mov	r6, r1
 8011442:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8011446:	f000 f95d 	bl	8011704 <_malloc_r>
 801144a:	4604      	mov	r4, r0
 801144c:	b140      	cbz	r0, 8011460 <__sfmoreglue+0x28>
 801144e:	2100      	movs	r1, #0
 8011450:	e9c0 1600 	strd	r1, r6, [r0]
 8011454:	300c      	adds	r0, #12
 8011456:	60a0      	str	r0, [r4, #8]
 8011458:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801145c:	f000 f929 	bl	80116b2 <memset>
 8011460:	4620      	mov	r0, r4
 8011462:	bd70      	pop	{r4, r5, r6, pc}

08011464 <__sfp_lock_acquire>:
 8011464:	4801      	ldr	r0, [pc, #4]	; (801146c <__sfp_lock_acquire+0x8>)
 8011466:	f000 b8ea 	b.w	801163e <__retarget_lock_acquire_recursive>
 801146a:	bf00      	nop
 801146c:	20004b29 	.word	0x20004b29

08011470 <__sfp_lock_release>:
 8011470:	4801      	ldr	r0, [pc, #4]	; (8011478 <__sfp_lock_release+0x8>)
 8011472:	f000 b8e5 	b.w	8011640 <__retarget_lock_release_recursive>
 8011476:	bf00      	nop
 8011478:	20004b29 	.word	0x20004b29

0801147c <__sinit_lock_acquire>:
 801147c:	4801      	ldr	r0, [pc, #4]	; (8011484 <__sinit_lock_acquire+0x8>)
 801147e:	f000 b8de 	b.w	801163e <__retarget_lock_acquire_recursive>
 8011482:	bf00      	nop
 8011484:	20004b2a 	.word	0x20004b2a

08011488 <__sinit_lock_release>:
 8011488:	4801      	ldr	r0, [pc, #4]	; (8011490 <__sinit_lock_release+0x8>)
 801148a:	f000 b8d9 	b.w	8011640 <__retarget_lock_release_recursive>
 801148e:	bf00      	nop
 8011490:	20004b2a 	.word	0x20004b2a

08011494 <__sinit>:
 8011494:	b510      	push	{r4, lr}
 8011496:	4604      	mov	r4, r0
 8011498:	f7ff fff0 	bl	801147c <__sinit_lock_acquire>
 801149c:	69a3      	ldr	r3, [r4, #24]
 801149e:	b11b      	cbz	r3, 80114a8 <__sinit+0x14>
 80114a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80114a4:	f7ff bff0 	b.w	8011488 <__sinit_lock_release>
 80114a8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80114ac:	6523      	str	r3, [r4, #80]	; 0x50
 80114ae:	4b13      	ldr	r3, [pc, #76]	; (80114fc <__sinit+0x68>)
 80114b0:	4a13      	ldr	r2, [pc, #76]	; (8011500 <__sinit+0x6c>)
 80114b2:	681b      	ldr	r3, [r3, #0]
 80114b4:	62a2      	str	r2, [r4, #40]	; 0x28
 80114b6:	42a3      	cmp	r3, r4
 80114b8:	bf04      	itt	eq
 80114ba:	2301      	moveq	r3, #1
 80114bc:	61a3      	streq	r3, [r4, #24]
 80114be:	4620      	mov	r0, r4
 80114c0:	f000 f820 	bl	8011504 <__sfp>
 80114c4:	6060      	str	r0, [r4, #4]
 80114c6:	4620      	mov	r0, r4
 80114c8:	f000 f81c 	bl	8011504 <__sfp>
 80114cc:	60a0      	str	r0, [r4, #8]
 80114ce:	4620      	mov	r0, r4
 80114d0:	f000 f818 	bl	8011504 <__sfp>
 80114d4:	2200      	movs	r2, #0
 80114d6:	60e0      	str	r0, [r4, #12]
 80114d8:	2104      	movs	r1, #4
 80114da:	6860      	ldr	r0, [r4, #4]
 80114dc:	f7ff ff82 	bl	80113e4 <std>
 80114e0:	68a0      	ldr	r0, [r4, #8]
 80114e2:	2201      	movs	r2, #1
 80114e4:	2109      	movs	r1, #9
 80114e6:	f7ff ff7d 	bl	80113e4 <std>
 80114ea:	68e0      	ldr	r0, [r4, #12]
 80114ec:	2202      	movs	r2, #2
 80114ee:	2112      	movs	r1, #18
 80114f0:	f7ff ff78 	bl	80113e4 <std>
 80114f4:	2301      	movs	r3, #1
 80114f6:	61a3      	str	r3, [r4, #24]
 80114f8:	e7d2      	b.n	80114a0 <__sinit+0xc>
 80114fa:	bf00      	nop
 80114fc:	0801477c 	.word	0x0801477c
 8011500:	0801142d 	.word	0x0801142d

08011504 <__sfp>:
 8011504:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011506:	4607      	mov	r7, r0
 8011508:	f7ff ffac 	bl	8011464 <__sfp_lock_acquire>
 801150c:	4b1e      	ldr	r3, [pc, #120]	; (8011588 <__sfp+0x84>)
 801150e:	681e      	ldr	r6, [r3, #0]
 8011510:	69b3      	ldr	r3, [r6, #24]
 8011512:	b913      	cbnz	r3, 801151a <__sfp+0x16>
 8011514:	4630      	mov	r0, r6
 8011516:	f7ff ffbd 	bl	8011494 <__sinit>
 801151a:	3648      	adds	r6, #72	; 0x48
 801151c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8011520:	3b01      	subs	r3, #1
 8011522:	d503      	bpl.n	801152c <__sfp+0x28>
 8011524:	6833      	ldr	r3, [r6, #0]
 8011526:	b30b      	cbz	r3, 801156c <__sfp+0x68>
 8011528:	6836      	ldr	r6, [r6, #0]
 801152a:	e7f7      	b.n	801151c <__sfp+0x18>
 801152c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8011530:	b9d5      	cbnz	r5, 8011568 <__sfp+0x64>
 8011532:	4b16      	ldr	r3, [pc, #88]	; (801158c <__sfp+0x88>)
 8011534:	60e3      	str	r3, [r4, #12]
 8011536:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801153a:	6665      	str	r5, [r4, #100]	; 0x64
 801153c:	f000 f87e 	bl	801163c <__retarget_lock_init_recursive>
 8011540:	f7ff ff96 	bl	8011470 <__sfp_lock_release>
 8011544:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8011548:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801154c:	6025      	str	r5, [r4, #0]
 801154e:	61a5      	str	r5, [r4, #24]
 8011550:	2208      	movs	r2, #8
 8011552:	4629      	mov	r1, r5
 8011554:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8011558:	f000 f8ab 	bl	80116b2 <memset>
 801155c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8011560:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8011564:	4620      	mov	r0, r4
 8011566:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011568:	3468      	adds	r4, #104	; 0x68
 801156a:	e7d9      	b.n	8011520 <__sfp+0x1c>
 801156c:	2104      	movs	r1, #4
 801156e:	4638      	mov	r0, r7
 8011570:	f7ff ff62 	bl	8011438 <__sfmoreglue>
 8011574:	4604      	mov	r4, r0
 8011576:	6030      	str	r0, [r6, #0]
 8011578:	2800      	cmp	r0, #0
 801157a:	d1d5      	bne.n	8011528 <__sfp+0x24>
 801157c:	f7ff ff78 	bl	8011470 <__sfp_lock_release>
 8011580:	230c      	movs	r3, #12
 8011582:	603b      	str	r3, [r7, #0]
 8011584:	e7ee      	b.n	8011564 <__sfp+0x60>
 8011586:	bf00      	nop
 8011588:	0801477c 	.word	0x0801477c
 801158c:	ffff0001 	.word	0xffff0001

08011590 <fiprintf>:
 8011590:	b40e      	push	{r1, r2, r3}
 8011592:	b503      	push	{r0, r1, lr}
 8011594:	4601      	mov	r1, r0
 8011596:	ab03      	add	r3, sp, #12
 8011598:	4805      	ldr	r0, [pc, #20]	; (80115b0 <fiprintf+0x20>)
 801159a:	f853 2b04 	ldr.w	r2, [r3], #4
 801159e:	6800      	ldr	r0, [r0, #0]
 80115a0:	9301      	str	r3, [sp, #4]
 80115a2:	f000 f94d 	bl	8011840 <_vfiprintf_r>
 80115a6:	b002      	add	sp, #8
 80115a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80115ac:	b003      	add	sp, #12
 80115ae:	4770      	bx	lr
 80115b0:	20000050 	.word	0x20000050

080115b4 <_fwalk_reent>:
 80115b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80115b8:	4606      	mov	r6, r0
 80115ba:	4688      	mov	r8, r1
 80115bc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80115c0:	2700      	movs	r7, #0
 80115c2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80115c6:	f1b9 0901 	subs.w	r9, r9, #1
 80115ca:	d505      	bpl.n	80115d8 <_fwalk_reent+0x24>
 80115cc:	6824      	ldr	r4, [r4, #0]
 80115ce:	2c00      	cmp	r4, #0
 80115d0:	d1f7      	bne.n	80115c2 <_fwalk_reent+0xe>
 80115d2:	4638      	mov	r0, r7
 80115d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80115d8:	89ab      	ldrh	r3, [r5, #12]
 80115da:	2b01      	cmp	r3, #1
 80115dc:	d907      	bls.n	80115ee <_fwalk_reent+0x3a>
 80115de:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80115e2:	3301      	adds	r3, #1
 80115e4:	d003      	beq.n	80115ee <_fwalk_reent+0x3a>
 80115e6:	4629      	mov	r1, r5
 80115e8:	4630      	mov	r0, r6
 80115ea:	47c0      	blx	r8
 80115ec:	4307      	orrs	r7, r0
 80115ee:	3568      	adds	r5, #104	; 0x68
 80115f0:	e7e9      	b.n	80115c6 <_fwalk_reent+0x12>
	...

080115f4 <__libc_init_array>:
 80115f4:	b570      	push	{r4, r5, r6, lr}
 80115f6:	4d0d      	ldr	r5, [pc, #52]	; (801162c <__libc_init_array+0x38>)
 80115f8:	4c0d      	ldr	r4, [pc, #52]	; (8011630 <__libc_init_array+0x3c>)
 80115fa:	1b64      	subs	r4, r4, r5
 80115fc:	10a4      	asrs	r4, r4, #2
 80115fe:	2600      	movs	r6, #0
 8011600:	42a6      	cmp	r6, r4
 8011602:	d109      	bne.n	8011618 <__libc_init_array+0x24>
 8011604:	4d0b      	ldr	r5, [pc, #44]	; (8011634 <__libc_init_array+0x40>)
 8011606:	4c0c      	ldr	r4, [pc, #48]	; (8011638 <__libc_init_array+0x44>)
 8011608:	f001 fa90 	bl	8012b2c <_init>
 801160c:	1b64      	subs	r4, r4, r5
 801160e:	10a4      	asrs	r4, r4, #2
 8011610:	2600      	movs	r6, #0
 8011612:	42a6      	cmp	r6, r4
 8011614:	d105      	bne.n	8011622 <__libc_init_array+0x2e>
 8011616:	bd70      	pop	{r4, r5, r6, pc}
 8011618:	f855 3b04 	ldr.w	r3, [r5], #4
 801161c:	4798      	blx	r3
 801161e:	3601      	adds	r6, #1
 8011620:	e7ee      	b.n	8011600 <__libc_init_array+0xc>
 8011622:	f855 3b04 	ldr.w	r3, [r5], #4
 8011626:	4798      	blx	r3
 8011628:	3601      	adds	r6, #1
 801162a:	e7f2      	b.n	8011612 <__libc_init_array+0x1e>
 801162c:	08014830 	.word	0x08014830
 8011630:	08014830 	.word	0x08014830
 8011634:	08014830 	.word	0x08014830
 8011638:	08014834 	.word	0x08014834

0801163c <__retarget_lock_init_recursive>:
 801163c:	4770      	bx	lr

0801163e <__retarget_lock_acquire_recursive>:
 801163e:	4770      	bx	lr

08011640 <__retarget_lock_release_recursive>:
 8011640:	4770      	bx	lr

08011642 <memcmp>:
 8011642:	b510      	push	{r4, lr}
 8011644:	3901      	subs	r1, #1
 8011646:	4402      	add	r2, r0
 8011648:	4290      	cmp	r0, r2
 801164a:	d101      	bne.n	8011650 <memcmp+0xe>
 801164c:	2000      	movs	r0, #0
 801164e:	e005      	b.n	801165c <memcmp+0x1a>
 8011650:	7803      	ldrb	r3, [r0, #0]
 8011652:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8011656:	42a3      	cmp	r3, r4
 8011658:	d001      	beq.n	801165e <memcmp+0x1c>
 801165a:	1b18      	subs	r0, r3, r4
 801165c:	bd10      	pop	{r4, pc}
 801165e:	3001      	adds	r0, #1
 8011660:	e7f2      	b.n	8011648 <memcmp+0x6>

08011662 <memcpy>:
 8011662:	440a      	add	r2, r1
 8011664:	4291      	cmp	r1, r2
 8011666:	f100 33ff 	add.w	r3, r0, #4294967295
 801166a:	d100      	bne.n	801166e <memcpy+0xc>
 801166c:	4770      	bx	lr
 801166e:	b510      	push	{r4, lr}
 8011670:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011674:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011678:	4291      	cmp	r1, r2
 801167a:	d1f9      	bne.n	8011670 <memcpy+0xe>
 801167c:	bd10      	pop	{r4, pc}

0801167e <memmove>:
 801167e:	4288      	cmp	r0, r1
 8011680:	b510      	push	{r4, lr}
 8011682:	eb01 0402 	add.w	r4, r1, r2
 8011686:	d902      	bls.n	801168e <memmove+0x10>
 8011688:	4284      	cmp	r4, r0
 801168a:	4623      	mov	r3, r4
 801168c:	d807      	bhi.n	801169e <memmove+0x20>
 801168e:	1e43      	subs	r3, r0, #1
 8011690:	42a1      	cmp	r1, r4
 8011692:	d008      	beq.n	80116a6 <memmove+0x28>
 8011694:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011698:	f803 2f01 	strb.w	r2, [r3, #1]!
 801169c:	e7f8      	b.n	8011690 <memmove+0x12>
 801169e:	4402      	add	r2, r0
 80116a0:	4601      	mov	r1, r0
 80116a2:	428a      	cmp	r2, r1
 80116a4:	d100      	bne.n	80116a8 <memmove+0x2a>
 80116a6:	bd10      	pop	{r4, pc}
 80116a8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80116ac:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80116b0:	e7f7      	b.n	80116a2 <memmove+0x24>

080116b2 <memset>:
 80116b2:	4402      	add	r2, r0
 80116b4:	4603      	mov	r3, r0
 80116b6:	4293      	cmp	r3, r2
 80116b8:	d100      	bne.n	80116bc <memset+0xa>
 80116ba:	4770      	bx	lr
 80116bc:	f803 1b01 	strb.w	r1, [r3], #1
 80116c0:	e7f9      	b.n	80116b6 <memset+0x4>
	...

080116c4 <sbrk_aligned>:
 80116c4:	b570      	push	{r4, r5, r6, lr}
 80116c6:	4e0e      	ldr	r6, [pc, #56]	; (8011700 <sbrk_aligned+0x3c>)
 80116c8:	460c      	mov	r4, r1
 80116ca:	6831      	ldr	r1, [r6, #0]
 80116cc:	4605      	mov	r5, r0
 80116ce:	b911      	cbnz	r1, 80116d6 <sbrk_aligned+0x12>
 80116d0:	f000 fc72 	bl	8011fb8 <_sbrk_r>
 80116d4:	6030      	str	r0, [r6, #0]
 80116d6:	4621      	mov	r1, r4
 80116d8:	4628      	mov	r0, r5
 80116da:	f000 fc6d 	bl	8011fb8 <_sbrk_r>
 80116de:	1c43      	adds	r3, r0, #1
 80116e0:	d00a      	beq.n	80116f8 <sbrk_aligned+0x34>
 80116e2:	1cc4      	adds	r4, r0, #3
 80116e4:	f024 0403 	bic.w	r4, r4, #3
 80116e8:	42a0      	cmp	r0, r4
 80116ea:	d007      	beq.n	80116fc <sbrk_aligned+0x38>
 80116ec:	1a21      	subs	r1, r4, r0
 80116ee:	4628      	mov	r0, r5
 80116f0:	f000 fc62 	bl	8011fb8 <_sbrk_r>
 80116f4:	3001      	adds	r0, #1
 80116f6:	d101      	bne.n	80116fc <sbrk_aligned+0x38>
 80116f8:	f04f 34ff 	mov.w	r4, #4294967295
 80116fc:	4620      	mov	r0, r4
 80116fe:	bd70      	pop	{r4, r5, r6, pc}
 8011700:	20004b30 	.word	0x20004b30

08011704 <_malloc_r>:
 8011704:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011708:	1ccd      	adds	r5, r1, #3
 801170a:	f025 0503 	bic.w	r5, r5, #3
 801170e:	3508      	adds	r5, #8
 8011710:	2d0c      	cmp	r5, #12
 8011712:	bf38      	it	cc
 8011714:	250c      	movcc	r5, #12
 8011716:	2d00      	cmp	r5, #0
 8011718:	4607      	mov	r7, r0
 801171a:	db01      	blt.n	8011720 <_malloc_r+0x1c>
 801171c:	42a9      	cmp	r1, r5
 801171e:	d905      	bls.n	801172c <_malloc_r+0x28>
 8011720:	230c      	movs	r3, #12
 8011722:	603b      	str	r3, [r7, #0]
 8011724:	2600      	movs	r6, #0
 8011726:	4630      	mov	r0, r6
 8011728:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801172c:	4e2e      	ldr	r6, [pc, #184]	; (80117e8 <_malloc_r+0xe4>)
 801172e:	f000 ff9b 	bl	8012668 <__malloc_lock>
 8011732:	6833      	ldr	r3, [r6, #0]
 8011734:	461c      	mov	r4, r3
 8011736:	bb34      	cbnz	r4, 8011786 <_malloc_r+0x82>
 8011738:	4629      	mov	r1, r5
 801173a:	4638      	mov	r0, r7
 801173c:	f7ff ffc2 	bl	80116c4 <sbrk_aligned>
 8011740:	1c43      	adds	r3, r0, #1
 8011742:	4604      	mov	r4, r0
 8011744:	d14d      	bne.n	80117e2 <_malloc_r+0xde>
 8011746:	6834      	ldr	r4, [r6, #0]
 8011748:	4626      	mov	r6, r4
 801174a:	2e00      	cmp	r6, #0
 801174c:	d140      	bne.n	80117d0 <_malloc_r+0xcc>
 801174e:	6823      	ldr	r3, [r4, #0]
 8011750:	4631      	mov	r1, r6
 8011752:	4638      	mov	r0, r7
 8011754:	eb04 0803 	add.w	r8, r4, r3
 8011758:	f000 fc2e 	bl	8011fb8 <_sbrk_r>
 801175c:	4580      	cmp	r8, r0
 801175e:	d13a      	bne.n	80117d6 <_malloc_r+0xd2>
 8011760:	6821      	ldr	r1, [r4, #0]
 8011762:	3503      	adds	r5, #3
 8011764:	1a6d      	subs	r5, r5, r1
 8011766:	f025 0503 	bic.w	r5, r5, #3
 801176a:	3508      	adds	r5, #8
 801176c:	2d0c      	cmp	r5, #12
 801176e:	bf38      	it	cc
 8011770:	250c      	movcc	r5, #12
 8011772:	4629      	mov	r1, r5
 8011774:	4638      	mov	r0, r7
 8011776:	f7ff ffa5 	bl	80116c4 <sbrk_aligned>
 801177a:	3001      	adds	r0, #1
 801177c:	d02b      	beq.n	80117d6 <_malloc_r+0xd2>
 801177e:	6823      	ldr	r3, [r4, #0]
 8011780:	442b      	add	r3, r5
 8011782:	6023      	str	r3, [r4, #0]
 8011784:	e00e      	b.n	80117a4 <_malloc_r+0xa0>
 8011786:	6822      	ldr	r2, [r4, #0]
 8011788:	1b52      	subs	r2, r2, r5
 801178a:	d41e      	bmi.n	80117ca <_malloc_r+0xc6>
 801178c:	2a0b      	cmp	r2, #11
 801178e:	d916      	bls.n	80117be <_malloc_r+0xba>
 8011790:	1961      	adds	r1, r4, r5
 8011792:	42a3      	cmp	r3, r4
 8011794:	6025      	str	r5, [r4, #0]
 8011796:	bf18      	it	ne
 8011798:	6059      	strne	r1, [r3, #4]
 801179a:	6863      	ldr	r3, [r4, #4]
 801179c:	bf08      	it	eq
 801179e:	6031      	streq	r1, [r6, #0]
 80117a0:	5162      	str	r2, [r4, r5]
 80117a2:	604b      	str	r3, [r1, #4]
 80117a4:	4638      	mov	r0, r7
 80117a6:	f104 060b 	add.w	r6, r4, #11
 80117aa:	f000 ff63 	bl	8012674 <__malloc_unlock>
 80117ae:	f026 0607 	bic.w	r6, r6, #7
 80117b2:	1d23      	adds	r3, r4, #4
 80117b4:	1af2      	subs	r2, r6, r3
 80117b6:	d0b6      	beq.n	8011726 <_malloc_r+0x22>
 80117b8:	1b9b      	subs	r3, r3, r6
 80117ba:	50a3      	str	r3, [r4, r2]
 80117bc:	e7b3      	b.n	8011726 <_malloc_r+0x22>
 80117be:	6862      	ldr	r2, [r4, #4]
 80117c0:	42a3      	cmp	r3, r4
 80117c2:	bf0c      	ite	eq
 80117c4:	6032      	streq	r2, [r6, #0]
 80117c6:	605a      	strne	r2, [r3, #4]
 80117c8:	e7ec      	b.n	80117a4 <_malloc_r+0xa0>
 80117ca:	4623      	mov	r3, r4
 80117cc:	6864      	ldr	r4, [r4, #4]
 80117ce:	e7b2      	b.n	8011736 <_malloc_r+0x32>
 80117d0:	4634      	mov	r4, r6
 80117d2:	6876      	ldr	r6, [r6, #4]
 80117d4:	e7b9      	b.n	801174a <_malloc_r+0x46>
 80117d6:	230c      	movs	r3, #12
 80117d8:	603b      	str	r3, [r7, #0]
 80117da:	4638      	mov	r0, r7
 80117dc:	f000 ff4a 	bl	8012674 <__malloc_unlock>
 80117e0:	e7a1      	b.n	8011726 <_malloc_r+0x22>
 80117e2:	6025      	str	r5, [r4, #0]
 80117e4:	e7de      	b.n	80117a4 <_malloc_r+0xa0>
 80117e6:	bf00      	nop
 80117e8:	20004b2c 	.word	0x20004b2c

080117ec <__sfputc_r>:
 80117ec:	6893      	ldr	r3, [r2, #8]
 80117ee:	3b01      	subs	r3, #1
 80117f0:	2b00      	cmp	r3, #0
 80117f2:	b410      	push	{r4}
 80117f4:	6093      	str	r3, [r2, #8]
 80117f6:	da08      	bge.n	801180a <__sfputc_r+0x1e>
 80117f8:	6994      	ldr	r4, [r2, #24]
 80117fa:	42a3      	cmp	r3, r4
 80117fc:	db01      	blt.n	8011802 <__sfputc_r+0x16>
 80117fe:	290a      	cmp	r1, #10
 8011800:	d103      	bne.n	801180a <__sfputc_r+0x1e>
 8011802:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011806:	f000 bd03 	b.w	8012210 <__swbuf_r>
 801180a:	6813      	ldr	r3, [r2, #0]
 801180c:	1c58      	adds	r0, r3, #1
 801180e:	6010      	str	r0, [r2, #0]
 8011810:	7019      	strb	r1, [r3, #0]
 8011812:	4608      	mov	r0, r1
 8011814:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011818:	4770      	bx	lr

0801181a <__sfputs_r>:
 801181a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801181c:	4606      	mov	r6, r0
 801181e:	460f      	mov	r7, r1
 8011820:	4614      	mov	r4, r2
 8011822:	18d5      	adds	r5, r2, r3
 8011824:	42ac      	cmp	r4, r5
 8011826:	d101      	bne.n	801182c <__sfputs_r+0x12>
 8011828:	2000      	movs	r0, #0
 801182a:	e007      	b.n	801183c <__sfputs_r+0x22>
 801182c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011830:	463a      	mov	r2, r7
 8011832:	4630      	mov	r0, r6
 8011834:	f7ff ffda 	bl	80117ec <__sfputc_r>
 8011838:	1c43      	adds	r3, r0, #1
 801183a:	d1f3      	bne.n	8011824 <__sfputs_r+0xa>
 801183c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08011840 <_vfiprintf_r>:
 8011840:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011844:	460d      	mov	r5, r1
 8011846:	b09d      	sub	sp, #116	; 0x74
 8011848:	4614      	mov	r4, r2
 801184a:	4698      	mov	r8, r3
 801184c:	4606      	mov	r6, r0
 801184e:	b118      	cbz	r0, 8011858 <_vfiprintf_r+0x18>
 8011850:	6983      	ldr	r3, [r0, #24]
 8011852:	b90b      	cbnz	r3, 8011858 <_vfiprintf_r+0x18>
 8011854:	f7ff fe1e 	bl	8011494 <__sinit>
 8011858:	4b89      	ldr	r3, [pc, #548]	; (8011a80 <_vfiprintf_r+0x240>)
 801185a:	429d      	cmp	r5, r3
 801185c:	d11b      	bne.n	8011896 <_vfiprintf_r+0x56>
 801185e:	6875      	ldr	r5, [r6, #4]
 8011860:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011862:	07d9      	lsls	r1, r3, #31
 8011864:	d405      	bmi.n	8011872 <_vfiprintf_r+0x32>
 8011866:	89ab      	ldrh	r3, [r5, #12]
 8011868:	059a      	lsls	r2, r3, #22
 801186a:	d402      	bmi.n	8011872 <_vfiprintf_r+0x32>
 801186c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801186e:	f7ff fee6 	bl	801163e <__retarget_lock_acquire_recursive>
 8011872:	89ab      	ldrh	r3, [r5, #12]
 8011874:	071b      	lsls	r3, r3, #28
 8011876:	d501      	bpl.n	801187c <_vfiprintf_r+0x3c>
 8011878:	692b      	ldr	r3, [r5, #16]
 801187a:	b9eb      	cbnz	r3, 80118b8 <_vfiprintf_r+0x78>
 801187c:	4629      	mov	r1, r5
 801187e:	4630      	mov	r0, r6
 8011880:	f000 fd2a 	bl	80122d8 <__swsetup_r>
 8011884:	b1c0      	cbz	r0, 80118b8 <_vfiprintf_r+0x78>
 8011886:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011888:	07dc      	lsls	r4, r3, #31
 801188a:	d50e      	bpl.n	80118aa <_vfiprintf_r+0x6a>
 801188c:	f04f 30ff 	mov.w	r0, #4294967295
 8011890:	b01d      	add	sp, #116	; 0x74
 8011892:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011896:	4b7b      	ldr	r3, [pc, #492]	; (8011a84 <_vfiprintf_r+0x244>)
 8011898:	429d      	cmp	r5, r3
 801189a:	d101      	bne.n	80118a0 <_vfiprintf_r+0x60>
 801189c:	68b5      	ldr	r5, [r6, #8]
 801189e:	e7df      	b.n	8011860 <_vfiprintf_r+0x20>
 80118a0:	4b79      	ldr	r3, [pc, #484]	; (8011a88 <_vfiprintf_r+0x248>)
 80118a2:	429d      	cmp	r5, r3
 80118a4:	bf08      	it	eq
 80118a6:	68f5      	ldreq	r5, [r6, #12]
 80118a8:	e7da      	b.n	8011860 <_vfiprintf_r+0x20>
 80118aa:	89ab      	ldrh	r3, [r5, #12]
 80118ac:	0598      	lsls	r0, r3, #22
 80118ae:	d4ed      	bmi.n	801188c <_vfiprintf_r+0x4c>
 80118b0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80118b2:	f7ff fec5 	bl	8011640 <__retarget_lock_release_recursive>
 80118b6:	e7e9      	b.n	801188c <_vfiprintf_r+0x4c>
 80118b8:	2300      	movs	r3, #0
 80118ba:	9309      	str	r3, [sp, #36]	; 0x24
 80118bc:	2320      	movs	r3, #32
 80118be:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80118c2:	f8cd 800c 	str.w	r8, [sp, #12]
 80118c6:	2330      	movs	r3, #48	; 0x30
 80118c8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8011a8c <_vfiprintf_r+0x24c>
 80118cc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80118d0:	f04f 0901 	mov.w	r9, #1
 80118d4:	4623      	mov	r3, r4
 80118d6:	469a      	mov	sl, r3
 80118d8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80118dc:	b10a      	cbz	r2, 80118e2 <_vfiprintf_r+0xa2>
 80118de:	2a25      	cmp	r2, #37	; 0x25
 80118e0:	d1f9      	bne.n	80118d6 <_vfiprintf_r+0x96>
 80118e2:	ebba 0b04 	subs.w	fp, sl, r4
 80118e6:	d00b      	beq.n	8011900 <_vfiprintf_r+0xc0>
 80118e8:	465b      	mov	r3, fp
 80118ea:	4622      	mov	r2, r4
 80118ec:	4629      	mov	r1, r5
 80118ee:	4630      	mov	r0, r6
 80118f0:	f7ff ff93 	bl	801181a <__sfputs_r>
 80118f4:	3001      	adds	r0, #1
 80118f6:	f000 80aa 	beq.w	8011a4e <_vfiprintf_r+0x20e>
 80118fa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80118fc:	445a      	add	r2, fp
 80118fe:	9209      	str	r2, [sp, #36]	; 0x24
 8011900:	f89a 3000 	ldrb.w	r3, [sl]
 8011904:	2b00      	cmp	r3, #0
 8011906:	f000 80a2 	beq.w	8011a4e <_vfiprintf_r+0x20e>
 801190a:	2300      	movs	r3, #0
 801190c:	f04f 32ff 	mov.w	r2, #4294967295
 8011910:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011914:	f10a 0a01 	add.w	sl, sl, #1
 8011918:	9304      	str	r3, [sp, #16]
 801191a:	9307      	str	r3, [sp, #28]
 801191c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011920:	931a      	str	r3, [sp, #104]	; 0x68
 8011922:	4654      	mov	r4, sl
 8011924:	2205      	movs	r2, #5
 8011926:	f814 1b01 	ldrb.w	r1, [r4], #1
 801192a:	4858      	ldr	r0, [pc, #352]	; (8011a8c <_vfiprintf_r+0x24c>)
 801192c:	f7ee fc58 	bl	80001e0 <memchr>
 8011930:	9a04      	ldr	r2, [sp, #16]
 8011932:	b9d8      	cbnz	r0, 801196c <_vfiprintf_r+0x12c>
 8011934:	06d1      	lsls	r1, r2, #27
 8011936:	bf44      	itt	mi
 8011938:	2320      	movmi	r3, #32
 801193a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801193e:	0713      	lsls	r3, r2, #28
 8011940:	bf44      	itt	mi
 8011942:	232b      	movmi	r3, #43	; 0x2b
 8011944:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011948:	f89a 3000 	ldrb.w	r3, [sl]
 801194c:	2b2a      	cmp	r3, #42	; 0x2a
 801194e:	d015      	beq.n	801197c <_vfiprintf_r+0x13c>
 8011950:	9a07      	ldr	r2, [sp, #28]
 8011952:	4654      	mov	r4, sl
 8011954:	2000      	movs	r0, #0
 8011956:	f04f 0c0a 	mov.w	ip, #10
 801195a:	4621      	mov	r1, r4
 801195c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011960:	3b30      	subs	r3, #48	; 0x30
 8011962:	2b09      	cmp	r3, #9
 8011964:	d94e      	bls.n	8011a04 <_vfiprintf_r+0x1c4>
 8011966:	b1b0      	cbz	r0, 8011996 <_vfiprintf_r+0x156>
 8011968:	9207      	str	r2, [sp, #28]
 801196a:	e014      	b.n	8011996 <_vfiprintf_r+0x156>
 801196c:	eba0 0308 	sub.w	r3, r0, r8
 8011970:	fa09 f303 	lsl.w	r3, r9, r3
 8011974:	4313      	orrs	r3, r2
 8011976:	9304      	str	r3, [sp, #16]
 8011978:	46a2      	mov	sl, r4
 801197a:	e7d2      	b.n	8011922 <_vfiprintf_r+0xe2>
 801197c:	9b03      	ldr	r3, [sp, #12]
 801197e:	1d19      	adds	r1, r3, #4
 8011980:	681b      	ldr	r3, [r3, #0]
 8011982:	9103      	str	r1, [sp, #12]
 8011984:	2b00      	cmp	r3, #0
 8011986:	bfbb      	ittet	lt
 8011988:	425b      	neglt	r3, r3
 801198a:	f042 0202 	orrlt.w	r2, r2, #2
 801198e:	9307      	strge	r3, [sp, #28]
 8011990:	9307      	strlt	r3, [sp, #28]
 8011992:	bfb8      	it	lt
 8011994:	9204      	strlt	r2, [sp, #16]
 8011996:	7823      	ldrb	r3, [r4, #0]
 8011998:	2b2e      	cmp	r3, #46	; 0x2e
 801199a:	d10c      	bne.n	80119b6 <_vfiprintf_r+0x176>
 801199c:	7863      	ldrb	r3, [r4, #1]
 801199e:	2b2a      	cmp	r3, #42	; 0x2a
 80119a0:	d135      	bne.n	8011a0e <_vfiprintf_r+0x1ce>
 80119a2:	9b03      	ldr	r3, [sp, #12]
 80119a4:	1d1a      	adds	r2, r3, #4
 80119a6:	681b      	ldr	r3, [r3, #0]
 80119a8:	9203      	str	r2, [sp, #12]
 80119aa:	2b00      	cmp	r3, #0
 80119ac:	bfb8      	it	lt
 80119ae:	f04f 33ff 	movlt.w	r3, #4294967295
 80119b2:	3402      	adds	r4, #2
 80119b4:	9305      	str	r3, [sp, #20]
 80119b6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8011a9c <_vfiprintf_r+0x25c>
 80119ba:	7821      	ldrb	r1, [r4, #0]
 80119bc:	2203      	movs	r2, #3
 80119be:	4650      	mov	r0, sl
 80119c0:	f7ee fc0e 	bl	80001e0 <memchr>
 80119c4:	b140      	cbz	r0, 80119d8 <_vfiprintf_r+0x198>
 80119c6:	2340      	movs	r3, #64	; 0x40
 80119c8:	eba0 000a 	sub.w	r0, r0, sl
 80119cc:	fa03 f000 	lsl.w	r0, r3, r0
 80119d0:	9b04      	ldr	r3, [sp, #16]
 80119d2:	4303      	orrs	r3, r0
 80119d4:	3401      	adds	r4, #1
 80119d6:	9304      	str	r3, [sp, #16]
 80119d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80119dc:	482c      	ldr	r0, [pc, #176]	; (8011a90 <_vfiprintf_r+0x250>)
 80119de:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80119e2:	2206      	movs	r2, #6
 80119e4:	f7ee fbfc 	bl	80001e0 <memchr>
 80119e8:	2800      	cmp	r0, #0
 80119ea:	d03f      	beq.n	8011a6c <_vfiprintf_r+0x22c>
 80119ec:	4b29      	ldr	r3, [pc, #164]	; (8011a94 <_vfiprintf_r+0x254>)
 80119ee:	bb1b      	cbnz	r3, 8011a38 <_vfiprintf_r+0x1f8>
 80119f0:	9b03      	ldr	r3, [sp, #12]
 80119f2:	3307      	adds	r3, #7
 80119f4:	f023 0307 	bic.w	r3, r3, #7
 80119f8:	3308      	adds	r3, #8
 80119fa:	9303      	str	r3, [sp, #12]
 80119fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80119fe:	443b      	add	r3, r7
 8011a00:	9309      	str	r3, [sp, #36]	; 0x24
 8011a02:	e767      	b.n	80118d4 <_vfiprintf_r+0x94>
 8011a04:	fb0c 3202 	mla	r2, ip, r2, r3
 8011a08:	460c      	mov	r4, r1
 8011a0a:	2001      	movs	r0, #1
 8011a0c:	e7a5      	b.n	801195a <_vfiprintf_r+0x11a>
 8011a0e:	2300      	movs	r3, #0
 8011a10:	3401      	adds	r4, #1
 8011a12:	9305      	str	r3, [sp, #20]
 8011a14:	4619      	mov	r1, r3
 8011a16:	f04f 0c0a 	mov.w	ip, #10
 8011a1a:	4620      	mov	r0, r4
 8011a1c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011a20:	3a30      	subs	r2, #48	; 0x30
 8011a22:	2a09      	cmp	r2, #9
 8011a24:	d903      	bls.n	8011a2e <_vfiprintf_r+0x1ee>
 8011a26:	2b00      	cmp	r3, #0
 8011a28:	d0c5      	beq.n	80119b6 <_vfiprintf_r+0x176>
 8011a2a:	9105      	str	r1, [sp, #20]
 8011a2c:	e7c3      	b.n	80119b6 <_vfiprintf_r+0x176>
 8011a2e:	fb0c 2101 	mla	r1, ip, r1, r2
 8011a32:	4604      	mov	r4, r0
 8011a34:	2301      	movs	r3, #1
 8011a36:	e7f0      	b.n	8011a1a <_vfiprintf_r+0x1da>
 8011a38:	ab03      	add	r3, sp, #12
 8011a3a:	9300      	str	r3, [sp, #0]
 8011a3c:	462a      	mov	r2, r5
 8011a3e:	4b16      	ldr	r3, [pc, #88]	; (8011a98 <_vfiprintf_r+0x258>)
 8011a40:	a904      	add	r1, sp, #16
 8011a42:	4630      	mov	r0, r6
 8011a44:	f3af 8000 	nop.w
 8011a48:	4607      	mov	r7, r0
 8011a4a:	1c78      	adds	r0, r7, #1
 8011a4c:	d1d6      	bne.n	80119fc <_vfiprintf_r+0x1bc>
 8011a4e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011a50:	07d9      	lsls	r1, r3, #31
 8011a52:	d405      	bmi.n	8011a60 <_vfiprintf_r+0x220>
 8011a54:	89ab      	ldrh	r3, [r5, #12]
 8011a56:	059a      	lsls	r2, r3, #22
 8011a58:	d402      	bmi.n	8011a60 <_vfiprintf_r+0x220>
 8011a5a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011a5c:	f7ff fdf0 	bl	8011640 <__retarget_lock_release_recursive>
 8011a60:	89ab      	ldrh	r3, [r5, #12]
 8011a62:	065b      	lsls	r3, r3, #25
 8011a64:	f53f af12 	bmi.w	801188c <_vfiprintf_r+0x4c>
 8011a68:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011a6a:	e711      	b.n	8011890 <_vfiprintf_r+0x50>
 8011a6c:	ab03      	add	r3, sp, #12
 8011a6e:	9300      	str	r3, [sp, #0]
 8011a70:	462a      	mov	r2, r5
 8011a72:	4b09      	ldr	r3, [pc, #36]	; (8011a98 <_vfiprintf_r+0x258>)
 8011a74:	a904      	add	r1, sp, #16
 8011a76:	4630      	mov	r0, r6
 8011a78:	f000 f880 	bl	8011b7c <_printf_i>
 8011a7c:	e7e4      	b.n	8011a48 <_vfiprintf_r+0x208>
 8011a7e:	bf00      	nop
 8011a80:	0801473c 	.word	0x0801473c
 8011a84:	0801475c 	.word	0x0801475c
 8011a88:	0801471c 	.word	0x0801471c
 8011a8c:	08014780 	.word	0x08014780
 8011a90:	0801478a 	.word	0x0801478a
 8011a94:	00000000 	.word	0x00000000
 8011a98:	0801181b 	.word	0x0801181b
 8011a9c:	08014786 	.word	0x08014786

08011aa0 <_printf_common>:
 8011aa0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011aa4:	4616      	mov	r6, r2
 8011aa6:	4699      	mov	r9, r3
 8011aa8:	688a      	ldr	r2, [r1, #8]
 8011aaa:	690b      	ldr	r3, [r1, #16]
 8011aac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8011ab0:	4293      	cmp	r3, r2
 8011ab2:	bfb8      	it	lt
 8011ab4:	4613      	movlt	r3, r2
 8011ab6:	6033      	str	r3, [r6, #0]
 8011ab8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8011abc:	4607      	mov	r7, r0
 8011abe:	460c      	mov	r4, r1
 8011ac0:	b10a      	cbz	r2, 8011ac6 <_printf_common+0x26>
 8011ac2:	3301      	adds	r3, #1
 8011ac4:	6033      	str	r3, [r6, #0]
 8011ac6:	6823      	ldr	r3, [r4, #0]
 8011ac8:	0699      	lsls	r1, r3, #26
 8011aca:	bf42      	ittt	mi
 8011acc:	6833      	ldrmi	r3, [r6, #0]
 8011ace:	3302      	addmi	r3, #2
 8011ad0:	6033      	strmi	r3, [r6, #0]
 8011ad2:	6825      	ldr	r5, [r4, #0]
 8011ad4:	f015 0506 	ands.w	r5, r5, #6
 8011ad8:	d106      	bne.n	8011ae8 <_printf_common+0x48>
 8011ada:	f104 0a19 	add.w	sl, r4, #25
 8011ade:	68e3      	ldr	r3, [r4, #12]
 8011ae0:	6832      	ldr	r2, [r6, #0]
 8011ae2:	1a9b      	subs	r3, r3, r2
 8011ae4:	42ab      	cmp	r3, r5
 8011ae6:	dc26      	bgt.n	8011b36 <_printf_common+0x96>
 8011ae8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8011aec:	1e13      	subs	r3, r2, #0
 8011aee:	6822      	ldr	r2, [r4, #0]
 8011af0:	bf18      	it	ne
 8011af2:	2301      	movne	r3, #1
 8011af4:	0692      	lsls	r2, r2, #26
 8011af6:	d42b      	bmi.n	8011b50 <_printf_common+0xb0>
 8011af8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8011afc:	4649      	mov	r1, r9
 8011afe:	4638      	mov	r0, r7
 8011b00:	47c0      	blx	r8
 8011b02:	3001      	adds	r0, #1
 8011b04:	d01e      	beq.n	8011b44 <_printf_common+0xa4>
 8011b06:	6823      	ldr	r3, [r4, #0]
 8011b08:	68e5      	ldr	r5, [r4, #12]
 8011b0a:	6832      	ldr	r2, [r6, #0]
 8011b0c:	f003 0306 	and.w	r3, r3, #6
 8011b10:	2b04      	cmp	r3, #4
 8011b12:	bf08      	it	eq
 8011b14:	1aad      	subeq	r5, r5, r2
 8011b16:	68a3      	ldr	r3, [r4, #8]
 8011b18:	6922      	ldr	r2, [r4, #16]
 8011b1a:	bf0c      	ite	eq
 8011b1c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011b20:	2500      	movne	r5, #0
 8011b22:	4293      	cmp	r3, r2
 8011b24:	bfc4      	itt	gt
 8011b26:	1a9b      	subgt	r3, r3, r2
 8011b28:	18ed      	addgt	r5, r5, r3
 8011b2a:	2600      	movs	r6, #0
 8011b2c:	341a      	adds	r4, #26
 8011b2e:	42b5      	cmp	r5, r6
 8011b30:	d11a      	bne.n	8011b68 <_printf_common+0xc8>
 8011b32:	2000      	movs	r0, #0
 8011b34:	e008      	b.n	8011b48 <_printf_common+0xa8>
 8011b36:	2301      	movs	r3, #1
 8011b38:	4652      	mov	r2, sl
 8011b3a:	4649      	mov	r1, r9
 8011b3c:	4638      	mov	r0, r7
 8011b3e:	47c0      	blx	r8
 8011b40:	3001      	adds	r0, #1
 8011b42:	d103      	bne.n	8011b4c <_printf_common+0xac>
 8011b44:	f04f 30ff 	mov.w	r0, #4294967295
 8011b48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011b4c:	3501      	adds	r5, #1
 8011b4e:	e7c6      	b.n	8011ade <_printf_common+0x3e>
 8011b50:	18e1      	adds	r1, r4, r3
 8011b52:	1c5a      	adds	r2, r3, #1
 8011b54:	2030      	movs	r0, #48	; 0x30
 8011b56:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8011b5a:	4422      	add	r2, r4
 8011b5c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8011b60:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8011b64:	3302      	adds	r3, #2
 8011b66:	e7c7      	b.n	8011af8 <_printf_common+0x58>
 8011b68:	2301      	movs	r3, #1
 8011b6a:	4622      	mov	r2, r4
 8011b6c:	4649      	mov	r1, r9
 8011b6e:	4638      	mov	r0, r7
 8011b70:	47c0      	blx	r8
 8011b72:	3001      	adds	r0, #1
 8011b74:	d0e6      	beq.n	8011b44 <_printf_common+0xa4>
 8011b76:	3601      	adds	r6, #1
 8011b78:	e7d9      	b.n	8011b2e <_printf_common+0x8e>
	...

08011b7c <_printf_i>:
 8011b7c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011b80:	7e0f      	ldrb	r7, [r1, #24]
 8011b82:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8011b84:	2f78      	cmp	r7, #120	; 0x78
 8011b86:	4691      	mov	r9, r2
 8011b88:	4680      	mov	r8, r0
 8011b8a:	460c      	mov	r4, r1
 8011b8c:	469a      	mov	sl, r3
 8011b8e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8011b92:	d807      	bhi.n	8011ba4 <_printf_i+0x28>
 8011b94:	2f62      	cmp	r7, #98	; 0x62
 8011b96:	d80a      	bhi.n	8011bae <_printf_i+0x32>
 8011b98:	2f00      	cmp	r7, #0
 8011b9a:	f000 80d8 	beq.w	8011d4e <_printf_i+0x1d2>
 8011b9e:	2f58      	cmp	r7, #88	; 0x58
 8011ba0:	f000 80a3 	beq.w	8011cea <_printf_i+0x16e>
 8011ba4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011ba8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8011bac:	e03a      	b.n	8011c24 <_printf_i+0xa8>
 8011bae:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8011bb2:	2b15      	cmp	r3, #21
 8011bb4:	d8f6      	bhi.n	8011ba4 <_printf_i+0x28>
 8011bb6:	a101      	add	r1, pc, #4	; (adr r1, 8011bbc <_printf_i+0x40>)
 8011bb8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8011bbc:	08011c15 	.word	0x08011c15
 8011bc0:	08011c29 	.word	0x08011c29
 8011bc4:	08011ba5 	.word	0x08011ba5
 8011bc8:	08011ba5 	.word	0x08011ba5
 8011bcc:	08011ba5 	.word	0x08011ba5
 8011bd0:	08011ba5 	.word	0x08011ba5
 8011bd4:	08011c29 	.word	0x08011c29
 8011bd8:	08011ba5 	.word	0x08011ba5
 8011bdc:	08011ba5 	.word	0x08011ba5
 8011be0:	08011ba5 	.word	0x08011ba5
 8011be4:	08011ba5 	.word	0x08011ba5
 8011be8:	08011d35 	.word	0x08011d35
 8011bec:	08011c59 	.word	0x08011c59
 8011bf0:	08011d17 	.word	0x08011d17
 8011bf4:	08011ba5 	.word	0x08011ba5
 8011bf8:	08011ba5 	.word	0x08011ba5
 8011bfc:	08011d57 	.word	0x08011d57
 8011c00:	08011ba5 	.word	0x08011ba5
 8011c04:	08011c59 	.word	0x08011c59
 8011c08:	08011ba5 	.word	0x08011ba5
 8011c0c:	08011ba5 	.word	0x08011ba5
 8011c10:	08011d1f 	.word	0x08011d1f
 8011c14:	682b      	ldr	r3, [r5, #0]
 8011c16:	1d1a      	adds	r2, r3, #4
 8011c18:	681b      	ldr	r3, [r3, #0]
 8011c1a:	602a      	str	r2, [r5, #0]
 8011c1c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011c20:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8011c24:	2301      	movs	r3, #1
 8011c26:	e0a3      	b.n	8011d70 <_printf_i+0x1f4>
 8011c28:	6820      	ldr	r0, [r4, #0]
 8011c2a:	6829      	ldr	r1, [r5, #0]
 8011c2c:	0606      	lsls	r6, r0, #24
 8011c2e:	f101 0304 	add.w	r3, r1, #4
 8011c32:	d50a      	bpl.n	8011c4a <_printf_i+0xce>
 8011c34:	680e      	ldr	r6, [r1, #0]
 8011c36:	602b      	str	r3, [r5, #0]
 8011c38:	2e00      	cmp	r6, #0
 8011c3a:	da03      	bge.n	8011c44 <_printf_i+0xc8>
 8011c3c:	232d      	movs	r3, #45	; 0x2d
 8011c3e:	4276      	negs	r6, r6
 8011c40:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011c44:	485e      	ldr	r0, [pc, #376]	; (8011dc0 <_printf_i+0x244>)
 8011c46:	230a      	movs	r3, #10
 8011c48:	e019      	b.n	8011c7e <_printf_i+0x102>
 8011c4a:	680e      	ldr	r6, [r1, #0]
 8011c4c:	602b      	str	r3, [r5, #0]
 8011c4e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8011c52:	bf18      	it	ne
 8011c54:	b236      	sxthne	r6, r6
 8011c56:	e7ef      	b.n	8011c38 <_printf_i+0xbc>
 8011c58:	682b      	ldr	r3, [r5, #0]
 8011c5a:	6820      	ldr	r0, [r4, #0]
 8011c5c:	1d19      	adds	r1, r3, #4
 8011c5e:	6029      	str	r1, [r5, #0]
 8011c60:	0601      	lsls	r1, r0, #24
 8011c62:	d501      	bpl.n	8011c68 <_printf_i+0xec>
 8011c64:	681e      	ldr	r6, [r3, #0]
 8011c66:	e002      	b.n	8011c6e <_printf_i+0xf2>
 8011c68:	0646      	lsls	r6, r0, #25
 8011c6a:	d5fb      	bpl.n	8011c64 <_printf_i+0xe8>
 8011c6c:	881e      	ldrh	r6, [r3, #0]
 8011c6e:	4854      	ldr	r0, [pc, #336]	; (8011dc0 <_printf_i+0x244>)
 8011c70:	2f6f      	cmp	r7, #111	; 0x6f
 8011c72:	bf0c      	ite	eq
 8011c74:	2308      	moveq	r3, #8
 8011c76:	230a      	movne	r3, #10
 8011c78:	2100      	movs	r1, #0
 8011c7a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8011c7e:	6865      	ldr	r5, [r4, #4]
 8011c80:	60a5      	str	r5, [r4, #8]
 8011c82:	2d00      	cmp	r5, #0
 8011c84:	bfa2      	ittt	ge
 8011c86:	6821      	ldrge	r1, [r4, #0]
 8011c88:	f021 0104 	bicge.w	r1, r1, #4
 8011c8c:	6021      	strge	r1, [r4, #0]
 8011c8e:	b90e      	cbnz	r6, 8011c94 <_printf_i+0x118>
 8011c90:	2d00      	cmp	r5, #0
 8011c92:	d04d      	beq.n	8011d30 <_printf_i+0x1b4>
 8011c94:	4615      	mov	r5, r2
 8011c96:	fbb6 f1f3 	udiv	r1, r6, r3
 8011c9a:	fb03 6711 	mls	r7, r3, r1, r6
 8011c9e:	5dc7      	ldrb	r7, [r0, r7]
 8011ca0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8011ca4:	4637      	mov	r7, r6
 8011ca6:	42bb      	cmp	r3, r7
 8011ca8:	460e      	mov	r6, r1
 8011caa:	d9f4      	bls.n	8011c96 <_printf_i+0x11a>
 8011cac:	2b08      	cmp	r3, #8
 8011cae:	d10b      	bne.n	8011cc8 <_printf_i+0x14c>
 8011cb0:	6823      	ldr	r3, [r4, #0]
 8011cb2:	07de      	lsls	r6, r3, #31
 8011cb4:	d508      	bpl.n	8011cc8 <_printf_i+0x14c>
 8011cb6:	6923      	ldr	r3, [r4, #16]
 8011cb8:	6861      	ldr	r1, [r4, #4]
 8011cba:	4299      	cmp	r1, r3
 8011cbc:	bfde      	ittt	le
 8011cbe:	2330      	movle	r3, #48	; 0x30
 8011cc0:	f805 3c01 	strble.w	r3, [r5, #-1]
 8011cc4:	f105 35ff 	addle.w	r5, r5, #4294967295
 8011cc8:	1b52      	subs	r2, r2, r5
 8011cca:	6122      	str	r2, [r4, #16]
 8011ccc:	f8cd a000 	str.w	sl, [sp]
 8011cd0:	464b      	mov	r3, r9
 8011cd2:	aa03      	add	r2, sp, #12
 8011cd4:	4621      	mov	r1, r4
 8011cd6:	4640      	mov	r0, r8
 8011cd8:	f7ff fee2 	bl	8011aa0 <_printf_common>
 8011cdc:	3001      	adds	r0, #1
 8011cde:	d14c      	bne.n	8011d7a <_printf_i+0x1fe>
 8011ce0:	f04f 30ff 	mov.w	r0, #4294967295
 8011ce4:	b004      	add	sp, #16
 8011ce6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011cea:	4835      	ldr	r0, [pc, #212]	; (8011dc0 <_printf_i+0x244>)
 8011cec:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8011cf0:	6829      	ldr	r1, [r5, #0]
 8011cf2:	6823      	ldr	r3, [r4, #0]
 8011cf4:	f851 6b04 	ldr.w	r6, [r1], #4
 8011cf8:	6029      	str	r1, [r5, #0]
 8011cfa:	061d      	lsls	r5, r3, #24
 8011cfc:	d514      	bpl.n	8011d28 <_printf_i+0x1ac>
 8011cfe:	07df      	lsls	r7, r3, #31
 8011d00:	bf44      	itt	mi
 8011d02:	f043 0320 	orrmi.w	r3, r3, #32
 8011d06:	6023      	strmi	r3, [r4, #0]
 8011d08:	b91e      	cbnz	r6, 8011d12 <_printf_i+0x196>
 8011d0a:	6823      	ldr	r3, [r4, #0]
 8011d0c:	f023 0320 	bic.w	r3, r3, #32
 8011d10:	6023      	str	r3, [r4, #0]
 8011d12:	2310      	movs	r3, #16
 8011d14:	e7b0      	b.n	8011c78 <_printf_i+0xfc>
 8011d16:	6823      	ldr	r3, [r4, #0]
 8011d18:	f043 0320 	orr.w	r3, r3, #32
 8011d1c:	6023      	str	r3, [r4, #0]
 8011d1e:	2378      	movs	r3, #120	; 0x78
 8011d20:	4828      	ldr	r0, [pc, #160]	; (8011dc4 <_printf_i+0x248>)
 8011d22:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8011d26:	e7e3      	b.n	8011cf0 <_printf_i+0x174>
 8011d28:	0659      	lsls	r1, r3, #25
 8011d2a:	bf48      	it	mi
 8011d2c:	b2b6      	uxthmi	r6, r6
 8011d2e:	e7e6      	b.n	8011cfe <_printf_i+0x182>
 8011d30:	4615      	mov	r5, r2
 8011d32:	e7bb      	b.n	8011cac <_printf_i+0x130>
 8011d34:	682b      	ldr	r3, [r5, #0]
 8011d36:	6826      	ldr	r6, [r4, #0]
 8011d38:	6961      	ldr	r1, [r4, #20]
 8011d3a:	1d18      	adds	r0, r3, #4
 8011d3c:	6028      	str	r0, [r5, #0]
 8011d3e:	0635      	lsls	r5, r6, #24
 8011d40:	681b      	ldr	r3, [r3, #0]
 8011d42:	d501      	bpl.n	8011d48 <_printf_i+0x1cc>
 8011d44:	6019      	str	r1, [r3, #0]
 8011d46:	e002      	b.n	8011d4e <_printf_i+0x1d2>
 8011d48:	0670      	lsls	r0, r6, #25
 8011d4a:	d5fb      	bpl.n	8011d44 <_printf_i+0x1c8>
 8011d4c:	8019      	strh	r1, [r3, #0]
 8011d4e:	2300      	movs	r3, #0
 8011d50:	6123      	str	r3, [r4, #16]
 8011d52:	4615      	mov	r5, r2
 8011d54:	e7ba      	b.n	8011ccc <_printf_i+0x150>
 8011d56:	682b      	ldr	r3, [r5, #0]
 8011d58:	1d1a      	adds	r2, r3, #4
 8011d5a:	602a      	str	r2, [r5, #0]
 8011d5c:	681d      	ldr	r5, [r3, #0]
 8011d5e:	6862      	ldr	r2, [r4, #4]
 8011d60:	2100      	movs	r1, #0
 8011d62:	4628      	mov	r0, r5
 8011d64:	f7ee fa3c 	bl	80001e0 <memchr>
 8011d68:	b108      	cbz	r0, 8011d6e <_printf_i+0x1f2>
 8011d6a:	1b40      	subs	r0, r0, r5
 8011d6c:	6060      	str	r0, [r4, #4]
 8011d6e:	6863      	ldr	r3, [r4, #4]
 8011d70:	6123      	str	r3, [r4, #16]
 8011d72:	2300      	movs	r3, #0
 8011d74:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011d78:	e7a8      	b.n	8011ccc <_printf_i+0x150>
 8011d7a:	6923      	ldr	r3, [r4, #16]
 8011d7c:	462a      	mov	r2, r5
 8011d7e:	4649      	mov	r1, r9
 8011d80:	4640      	mov	r0, r8
 8011d82:	47d0      	blx	sl
 8011d84:	3001      	adds	r0, #1
 8011d86:	d0ab      	beq.n	8011ce0 <_printf_i+0x164>
 8011d88:	6823      	ldr	r3, [r4, #0]
 8011d8a:	079b      	lsls	r3, r3, #30
 8011d8c:	d413      	bmi.n	8011db6 <_printf_i+0x23a>
 8011d8e:	68e0      	ldr	r0, [r4, #12]
 8011d90:	9b03      	ldr	r3, [sp, #12]
 8011d92:	4298      	cmp	r0, r3
 8011d94:	bfb8      	it	lt
 8011d96:	4618      	movlt	r0, r3
 8011d98:	e7a4      	b.n	8011ce4 <_printf_i+0x168>
 8011d9a:	2301      	movs	r3, #1
 8011d9c:	4632      	mov	r2, r6
 8011d9e:	4649      	mov	r1, r9
 8011da0:	4640      	mov	r0, r8
 8011da2:	47d0      	blx	sl
 8011da4:	3001      	adds	r0, #1
 8011da6:	d09b      	beq.n	8011ce0 <_printf_i+0x164>
 8011da8:	3501      	adds	r5, #1
 8011daa:	68e3      	ldr	r3, [r4, #12]
 8011dac:	9903      	ldr	r1, [sp, #12]
 8011dae:	1a5b      	subs	r3, r3, r1
 8011db0:	42ab      	cmp	r3, r5
 8011db2:	dcf2      	bgt.n	8011d9a <_printf_i+0x21e>
 8011db4:	e7eb      	b.n	8011d8e <_printf_i+0x212>
 8011db6:	2500      	movs	r5, #0
 8011db8:	f104 0619 	add.w	r6, r4, #25
 8011dbc:	e7f5      	b.n	8011daa <_printf_i+0x22e>
 8011dbe:	bf00      	nop
 8011dc0:	08014791 	.word	0x08014791
 8011dc4:	080147a2 	.word	0x080147a2

08011dc8 <iprintf>:
 8011dc8:	b40f      	push	{r0, r1, r2, r3}
 8011dca:	4b0a      	ldr	r3, [pc, #40]	; (8011df4 <iprintf+0x2c>)
 8011dcc:	b513      	push	{r0, r1, r4, lr}
 8011dce:	681c      	ldr	r4, [r3, #0]
 8011dd0:	b124      	cbz	r4, 8011ddc <iprintf+0x14>
 8011dd2:	69a3      	ldr	r3, [r4, #24]
 8011dd4:	b913      	cbnz	r3, 8011ddc <iprintf+0x14>
 8011dd6:	4620      	mov	r0, r4
 8011dd8:	f7ff fb5c 	bl	8011494 <__sinit>
 8011ddc:	ab05      	add	r3, sp, #20
 8011dde:	9a04      	ldr	r2, [sp, #16]
 8011de0:	68a1      	ldr	r1, [r4, #8]
 8011de2:	9301      	str	r3, [sp, #4]
 8011de4:	4620      	mov	r0, r4
 8011de6:	f7ff fd2b 	bl	8011840 <_vfiprintf_r>
 8011dea:	b002      	add	sp, #8
 8011dec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011df0:	b004      	add	sp, #16
 8011df2:	4770      	bx	lr
 8011df4:	20000050 	.word	0x20000050

08011df8 <_puts_r>:
 8011df8:	b570      	push	{r4, r5, r6, lr}
 8011dfa:	460e      	mov	r6, r1
 8011dfc:	4605      	mov	r5, r0
 8011dfe:	b118      	cbz	r0, 8011e08 <_puts_r+0x10>
 8011e00:	6983      	ldr	r3, [r0, #24]
 8011e02:	b90b      	cbnz	r3, 8011e08 <_puts_r+0x10>
 8011e04:	f7ff fb46 	bl	8011494 <__sinit>
 8011e08:	69ab      	ldr	r3, [r5, #24]
 8011e0a:	68ac      	ldr	r4, [r5, #8]
 8011e0c:	b913      	cbnz	r3, 8011e14 <_puts_r+0x1c>
 8011e0e:	4628      	mov	r0, r5
 8011e10:	f7ff fb40 	bl	8011494 <__sinit>
 8011e14:	4b2c      	ldr	r3, [pc, #176]	; (8011ec8 <_puts_r+0xd0>)
 8011e16:	429c      	cmp	r4, r3
 8011e18:	d120      	bne.n	8011e5c <_puts_r+0x64>
 8011e1a:	686c      	ldr	r4, [r5, #4]
 8011e1c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011e1e:	07db      	lsls	r3, r3, #31
 8011e20:	d405      	bmi.n	8011e2e <_puts_r+0x36>
 8011e22:	89a3      	ldrh	r3, [r4, #12]
 8011e24:	0598      	lsls	r0, r3, #22
 8011e26:	d402      	bmi.n	8011e2e <_puts_r+0x36>
 8011e28:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011e2a:	f7ff fc08 	bl	801163e <__retarget_lock_acquire_recursive>
 8011e2e:	89a3      	ldrh	r3, [r4, #12]
 8011e30:	0719      	lsls	r1, r3, #28
 8011e32:	d51d      	bpl.n	8011e70 <_puts_r+0x78>
 8011e34:	6923      	ldr	r3, [r4, #16]
 8011e36:	b1db      	cbz	r3, 8011e70 <_puts_r+0x78>
 8011e38:	3e01      	subs	r6, #1
 8011e3a:	68a3      	ldr	r3, [r4, #8]
 8011e3c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8011e40:	3b01      	subs	r3, #1
 8011e42:	60a3      	str	r3, [r4, #8]
 8011e44:	bb39      	cbnz	r1, 8011e96 <_puts_r+0x9e>
 8011e46:	2b00      	cmp	r3, #0
 8011e48:	da38      	bge.n	8011ebc <_puts_r+0xc4>
 8011e4a:	4622      	mov	r2, r4
 8011e4c:	210a      	movs	r1, #10
 8011e4e:	4628      	mov	r0, r5
 8011e50:	f000 f9de 	bl	8012210 <__swbuf_r>
 8011e54:	3001      	adds	r0, #1
 8011e56:	d011      	beq.n	8011e7c <_puts_r+0x84>
 8011e58:	250a      	movs	r5, #10
 8011e5a:	e011      	b.n	8011e80 <_puts_r+0x88>
 8011e5c:	4b1b      	ldr	r3, [pc, #108]	; (8011ecc <_puts_r+0xd4>)
 8011e5e:	429c      	cmp	r4, r3
 8011e60:	d101      	bne.n	8011e66 <_puts_r+0x6e>
 8011e62:	68ac      	ldr	r4, [r5, #8]
 8011e64:	e7da      	b.n	8011e1c <_puts_r+0x24>
 8011e66:	4b1a      	ldr	r3, [pc, #104]	; (8011ed0 <_puts_r+0xd8>)
 8011e68:	429c      	cmp	r4, r3
 8011e6a:	bf08      	it	eq
 8011e6c:	68ec      	ldreq	r4, [r5, #12]
 8011e6e:	e7d5      	b.n	8011e1c <_puts_r+0x24>
 8011e70:	4621      	mov	r1, r4
 8011e72:	4628      	mov	r0, r5
 8011e74:	f000 fa30 	bl	80122d8 <__swsetup_r>
 8011e78:	2800      	cmp	r0, #0
 8011e7a:	d0dd      	beq.n	8011e38 <_puts_r+0x40>
 8011e7c:	f04f 35ff 	mov.w	r5, #4294967295
 8011e80:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011e82:	07da      	lsls	r2, r3, #31
 8011e84:	d405      	bmi.n	8011e92 <_puts_r+0x9a>
 8011e86:	89a3      	ldrh	r3, [r4, #12]
 8011e88:	059b      	lsls	r3, r3, #22
 8011e8a:	d402      	bmi.n	8011e92 <_puts_r+0x9a>
 8011e8c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011e8e:	f7ff fbd7 	bl	8011640 <__retarget_lock_release_recursive>
 8011e92:	4628      	mov	r0, r5
 8011e94:	bd70      	pop	{r4, r5, r6, pc}
 8011e96:	2b00      	cmp	r3, #0
 8011e98:	da04      	bge.n	8011ea4 <_puts_r+0xac>
 8011e9a:	69a2      	ldr	r2, [r4, #24]
 8011e9c:	429a      	cmp	r2, r3
 8011e9e:	dc06      	bgt.n	8011eae <_puts_r+0xb6>
 8011ea0:	290a      	cmp	r1, #10
 8011ea2:	d004      	beq.n	8011eae <_puts_r+0xb6>
 8011ea4:	6823      	ldr	r3, [r4, #0]
 8011ea6:	1c5a      	adds	r2, r3, #1
 8011ea8:	6022      	str	r2, [r4, #0]
 8011eaa:	7019      	strb	r1, [r3, #0]
 8011eac:	e7c5      	b.n	8011e3a <_puts_r+0x42>
 8011eae:	4622      	mov	r2, r4
 8011eb0:	4628      	mov	r0, r5
 8011eb2:	f000 f9ad 	bl	8012210 <__swbuf_r>
 8011eb6:	3001      	adds	r0, #1
 8011eb8:	d1bf      	bne.n	8011e3a <_puts_r+0x42>
 8011eba:	e7df      	b.n	8011e7c <_puts_r+0x84>
 8011ebc:	6823      	ldr	r3, [r4, #0]
 8011ebe:	250a      	movs	r5, #10
 8011ec0:	1c5a      	adds	r2, r3, #1
 8011ec2:	6022      	str	r2, [r4, #0]
 8011ec4:	701d      	strb	r5, [r3, #0]
 8011ec6:	e7db      	b.n	8011e80 <_puts_r+0x88>
 8011ec8:	0801473c 	.word	0x0801473c
 8011ecc:	0801475c 	.word	0x0801475c
 8011ed0:	0801471c 	.word	0x0801471c

08011ed4 <puts>:
 8011ed4:	4b02      	ldr	r3, [pc, #8]	; (8011ee0 <puts+0xc>)
 8011ed6:	4601      	mov	r1, r0
 8011ed8:	6818      	ldr	r0, [r3, #0]
 8011eda:	f7ff bf8d 	b.w	8011df8 <_puts_r>
 8011ede:	bf00      	nop
 8011ee0:	20000050 	.word	0x20000050

08011ee4 <cleanup_glue>:
 8011ee4:	b538      	push	{r3, r4, r5, lr}
 8011ee6:	460c      	mov	r4, r1
 8011ee8:	6809      	ldr	r1, [r1, #0]
 8011eea:	4605      	mov	r5, r0
 8011eec:	b109      	cbz	r1, 8011ef2 <cleanup_glue+0xe>
 8011eee:	f7ff fff9 	bl	8011ee4 <cleanup_glue>
 8011ef2:	4621      	mov	r1, r4
 8011ef4:	4628      	mov	r0, r5
 8011ef6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011efa:	f000 bbc1 	b.w	8012680 <_free_r>
	...

08011f00 <_reclaim_reent>:
 8011f00:	4b2c      	ldr	r3, [pc, #176]	; (8011fb4 <_reclaim_reent+0xb4>)
 8011f02:	681b      	ldr	r3, [r3, #0]
 8011f04:	4283      	cmp	r3, r0
 8011f06:	b570      	push	{r4, r5, r6, lr}
 8011f08:	4604      	mov	r4, r0
 8011f0a:	d051      	beq.n	8011fb0 <_reclaim_reent+0xb0>
 8011f0c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8011f0e:	b143      	cbz	r3, 8011f22 <_reclaim_reent+0x22>
 8011f10:	68db      	ldr	r3, [r3, #12]
 8011f12:	2b00      	cmp	r3, #0
 8011f14:	d14a      	bne.n	8011fac <_reclaim_reent+0xac>
 8011f16:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011f18:	6819      	ldr	r1, [r3, #0]
 8011f1a:	b111      	cbz	r1, 8011f22 <_reclaim_reent+0x22>
 8011f1c:	4620      	mov	r0, r4
 8011f1e:	f000 fbaf 	bl	8012680 <_free_r>
 8011f22:	6961      	ldr	r1, [r4, #20]
 8011f24:	b111      	cbz	r1, 8011f2c <_reclaim_reent+0x2c>
 8011f26:	4620      	mov	r0, r4
 8011f28:	f000 fbaa 	bl	8012680 <_free_r>
 8011f2c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8011f2e:	b111      	cbz	r1, 8011f36 <_reclaim_reent+0x36>
 8011f30:	4620      	mov	r0, r4
 8011f32:	f000 fba5 	bl	8012680 <_free_r>
 8011f36:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8011f38:	b111      	cbz	r1, 8011f40 <_reclaim_reent+0x40>
 8011f3a:	4620      	mov	r0, r4
 8011f3c:	f000 fba0 	bl	8012680 <_free_r>
 8011f40:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8011f42:	b111      	cbz	r1, 8011f4a <_reclaim_reent+0x4a>
 8011f44:	4620      	mov	r0, r4
 8011f46:	f000 fb9b 	bl	8012680 <_free_r>
 8011f4a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8011f4c:	b111      	cbz	r1, 8011f54 <_reclaim_reent+0x54>
 8011f4e:	4620      	mov	r0, r4
 8011f50:	f000 fb96 	bl	8012680 <_free_r>
 8011f54:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8011f56:	b111      	cbz	r1, 8011f5e <_reclaim_reent+0x5e>
 8011f58:	4620      	mov	r0, r4
 8011f5a:	f000 fb91 	bl	8012680 <_free_r>
 8011f5e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8011f60:	b111      	cbz	r1, 8011f68 <_reclaim_reent+0x68>
 8011f62:	4620      	mov	r0, r4
 8011f64:	f000 fb8c 	bl	8012680 <_free_r>
 8011f68:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011f6a:	b111      	cbz	r1, 8011f72 <_reclaim_reent+0x72>
 8011f6c:	4620      	mov	r0, r4
 8011f6e:	f000 fb87 	bl	8012680 <_free_r>
 8011f72:	69a3      	ldr	r3, [r4, #24]
 8011f74:	b1e3      	cbz	r3, 8011fb0 <_reclaim_reent+0xb0>
 8011f76:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8011f78:	4620      	mov	r0, r4
 8011f7a:	4798      	blx	r3
 8011f7c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8011f7e:	b1b9      	cbz	r1, 8011fb0 <_reclaim_reent+0xb0>
 8011f80:	4620      	mov	r0, r4
 8011f82:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011f86:	f7ff bfad 	b.w	8011ee4 <cleanup_glue>
 8011f8a:	5949      	ldr	r1, [r1, r5]
 8011f8c:	b941      	cbnz	r1, 8011fa0 <_reclaim_reent+0xa0>
 8011f8e:	3504      	adds	r5, #4
 8011f90:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011f92:	2d80      	cmp	r5, #128	; 0x80
 8011f94:	68d9      	ldr	r1, [r3, #12]
 8011f96:	d1f8      	bne.n	8011f8a <_reclaim_reent+0x8a>
 8011f98:	4620      	mov	r0, r4
 8011f9a:	f000 fb71 	bl	8012680 <_free_r>
 8011f9e:	e7ba      	b.n	8011f16 <_reclaim_reent+0x16>
 8011fa0:	680e      	ldr	r6, [r1, #0]
 8011fa2:	4620      	mov	r0, r4
 8011fa4:	f000 fb6c 	bl	8012680 <_free_r>
 8011fa8:	4631      	mov	r1, r6
 8011faa:	e7ef      	b.n	8011f8c <_reclaim_reent+0x8c>
 8011fac:	2500      	movs	r5, #0
 8011fae:	e7ef      	b.n	8011f90 <_reclaim_reent+0x90>
 8011fb0:	bd70      	pop	{r4, r5, r6, pc}
 8011fb2:	bf00      	nop
 8011fb4:	20000050 	.word	0x20000050

08011fb8 <_sbrk_r>:
 8011fb8:	b538      	push	{r3, r4, r5, lr}
 8011fba:	4d06      	ldr	r5, [pc, #24]	; (8011fd4 <_sbrk_r+0x1c>)
 8011fbc:	2300      	movs	r3, #0
 8011fbe:	4604      	mov	r4, r0
 8011fc0:	4608      	mov	r0, r1
 8011fc2:	602b      	str	r3, [r5, #0]
 8011fc4:	f7f0 fb54 	bl	8002670 <_sbrk>
 8011fc8:	1c43      	adds	r3, r0, #1
 8011fca:	d102      	bne.n	8011fd2 <_sbrk_r+0x1a>
 8011fcc:	682b      	ldr	r3, [r5, #0]
 8011fce:	b103      	cbz	r3, 8011fd2 <_sbrk_r+0x1a>
 8011fd0:	6023      	str	r3, [r4, #0]
 8011fd2:	bd38      	pop	{r3, r4, r5, pc}
 8011fd4:	20004b34 	.word	0x20004b34

08011fd8 <sniprintf>:
 8011fd8:	b40c      	push	{r2, r3}
 8011fda:	b530      	push	{r4, r5, lr}
 8011fdc:	4b17      	ldr	r3, [pc, #92]	; (801203c <sniprintf+0x64>)
 8011fde:	1e0c      	subs	r4, r1, #0
 8011fe0:	681d      	ldr	r5, [r3, #0]
 8011fe2:	b09d      	sub	sp, #116	; 0x74
 8011fe4:	da08      	bge.n	8011ff8 <sniprintf+0x20>
 8011fe6:	238b      	movs	r3, #139	; 0x8b
 8011fe8:	602b      	str	r3, [r5, #0]
 8011fea:	f04f 30ff 	mov.w	r0, #4294967295
 8011fee:	b01d      	add	sp, #116	; 0x74
 8011ff0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011ff4:	b002      	add	sp, #8
 8011ff6:	4770      	bx	lr
 8011ff8:	f44f 7302 	mov.w	r3, #520	; 0x208
 8011ffc:	f8ad 3014 	strh.w	r3, [sp, #20]
 8012000:	bf14      	ite	ne
 8012002:	f104 33ff 	addne.w	r3, r4, #4294967295
 8012006:	4623      	moveq	r3, r4
 8012008:	9304      	str	r3, [sp, #16]
 801200a:	9307      	str	r3, [sp, #28]
 801200c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8012010:	9002      	str	r0, [sp, #8]
 8012012:	9006      	str	r0, [sp, #24]
 8012014:	f8ad 3016 	strh.w	r3, [sp, #22]
 8012018:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801201a:	ab21      	add	r3, sp, #132	; 0x84
 801201c:	a902      	add	r1, sp, #8
 801201e:	4628      	mov	r0, r5
 8012020:	9301      	str	r3, [sp, #4]
 8012022:	f000 fc03 	bl	801282c <_svfiprintf_r>
 8012026:	1c43      	adds	r3, r0, #1
 8012028:	bfbc      	itt	lt
 801202a:	238b      	movlt	r3, #139	; 0x8b
 801202c:	602b      	strlt	r3, [r5, #0]
 801202e:	2c00      	cmp	r4, #0
 8012030:	d0dd      	beq.n	8011fee <sniprintf+0x16>
 8012032:	9b02      	ldr	r3, [sp, #8]
 8012034:	2200      	movs	r2, #0
 8012036:	701a      	strb	r2, [r3, #0]
 8012038:	e7d9      	b.n	8011fee <sniprintf+0x16>
 801203a:	bf00      	nop
 801203c:	20000050 	.word	0x20000050

08012040 <siprintf>:
 8012040:	b40e      	push	{r1, r2, r3}
 8012042:	b500      	push	{lr}
 8012044:	b09c      	sub	sp, #112	; 0x70
 8012046:	ab1d      	add	r3, sp, #116	; 0x74
 8012048:	9002      	str	r0, [sp, #8]
 801204a:	9006      	str	r0, [sp, #24]
 801204c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8012050:	4809      	ldr	r0, [pc, #36]	; (8012078 <siprintf+0x38>)
 8012052:	9107      	str	r1, [sp, #28]
 8012054:	9104      	str	r1, [sp, #16]
 8012056:	4909      	ldr	r1, [pc, #36]	; (801207c <siprintf+0x3c>)
 8012058:	f853 2b04 	ldr.w	r2, [r3], #4
 801205c:	9105      	str	r1, [sp, #20]
 801205e:	6800      	ldr	r0, [r0, #0]
 8012060:	9301      	str	r3, [sp, #4]
 8012062:	a902      	add	r1, sp, #8
 8012064:	f000 fbe2 	bl	801282c <_svfiprintf_r>
 8012068:	9b02      	ldr	r3, [sp, #8]
 801206a:	2200      	movs	r2, #0
 801206c:	701a      	strb	r2, [r3, #0]
 801206e:	b01c      	add	sp, #112	; 0x70
 8012070:	f85d eb04 	ldr.w	lr, [sp], #4
 8012074:	b003      	add	sp, #12
 8012076:	4770      	bx	lr
 8012078:	20000050 	.word	0x20000050
 801207c:	ffff0208 	.word	0xffff0208

08012080 <__sread>:
 8012080:	b510      	push	{r4, lr}
 8012082:	460c      	mov	r4, r1
 8012084:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012088:	f000 fcd0 	bl	8012a2c <_read_r>
 801208c:	2800      	cmp	r0, #0
 801208e:	bfab      	itete	ge
 8012090:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8012092:	89a3      	ldrhlt	r3, [r4, #12]
 8012094:	181b      	addge	r3, r3, r0
 8012096:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801209a:	bfac      	ite	ge
 801209c:	6563      	strge	r3, [r4, #84]	; 0x54
 801209e:	81a3      	strhlt	r3, [r4, #12]
 80120a0:	bd10      	pop	{r4, pc}

080120a2 <__swrite>:
 80120a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80120a6:	461f      	mov	r7, r3
 80120a8:	898b      	ldrh	r3, [r1, #12]
 80120aa:	05db      	lsls	r3, r3, #23
 80120ac:	4605      	mov	r5, r0
 80120ae:	460c      	mov	r4, r1
 80120b0:	4616      	mov	r6, r2
 80120b2:	d505      	bpl.n	80120c0 <__swrite+0x1e>
 80120b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80120b8:	2302      	movs	r3, #2
 80120ba:	2200      	movs	r2, #0
 80120bc:	f000 fa54 	bl	8012568 <_lseek_r>
 80120c0:	89a3      	ldrh	r3, [r4, #12]
 80120c2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80120c6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80120ca:	81a3      	strh	r3, [r4, #12]
 80120cc:	4632      	mov	r2, r6
 80120ce:	463b      	mov	r3, r7
 80120d0:	4628      	mov	r0, r5
 80120d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80120d6:	f000 b8ed 	b.w	80122b4 <_write_r>

080120da <__sseek>:
 80120da:	b510      	push	{r4, lr}
 80120dc:	460c      	mov	r4, r1
 80120de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80120e2:	f000 fa41 	bl	8012568 <_lseek_r>
 80120e6:	1c43      	adds	r3, r0, #1
 80120e8:	89a3      	ldrh	r3, [r4, #12]
 80120ea:	bf15      	itete	ne
 80120ec:	6560      	strne	r0, [r4, #84]	; 0x54
 80120ee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80120f2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80120f6:	81a3      	strheq	r3, [r4, #12]
 80120f8:	bf18      	it	ne
 80120fa:	81a3      	strhne	r3, [r4, #12]
 80120fc:	bd10      	pop	{r4, pc}

080120fe <__sclose>:
 80120fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012102:	f000 b95f 	b.w	80123c4 <_close_r>

08012106 <strncpy>:
 8012106:	b510      	push	{r4, lr}
 8012108:	3901      	subs	r1, #1
 801210a:	4603      	mov	r3, r0
 801210c:	b132      	cbz	r2, 801211c <strncpy+0x16>
 801210e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8012112:	f803 4b01 	strb.w	r4, [r3], #1
 8012116:	3a01      	subs	r2, #1
 8012118:	2c00      	cmp	r4, #0
 801211a:	d1f7      	bne.n	801210c <strncpy+0x6>
 801211c:	441a      	add	r2, r3
 801211e:	2100      	movs	r1, #0
 8012120:	4293      	cmp	r3, r2
 8012122:	d100      	bne.n	8012126 <strncpy+0x20>
 8012124:	bd10      	pop	{r4, pc}
 8012126:	f803 1b01 	strb.w	r1, [r3], #1
 801212a:	e7f9      	b.n	8012120 <strncpy+0x1a>

0801212c <strstr>:
 801212c:	780a      	ldrb	r2, [r1, #0]
 801212e:	b570      	push	{r4, r5, r6, lr}
 8012130:	b96a      	cbnz	r2, 801214e <strstr+0x22>
 8012132:	bd70      	pop	{r4, r5, r6, pc}
 8012134:	429a      	cmp	r2, r3
 8012136:	d109      	bne.n	801214c <strstr+0x20>
 8012138:	460c      	mov	r4, r1
 801213a:	4605      	mov	r5, r0
 801213c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8012140:	2b00      	cmp	r3, #0
 8012142:	d0f6      	beq.n	8012132 <strstr+0x6>
 8012144:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8012148:	429e      	cmp	r6, r3
 801214a:	d0f7      	beq.n	801213c <strstr+0x10>
 801214c:	3001      	adds	r0, #1
 801214e:	7803      	ldrb	r3, [r0, #0]
 8012150:	2b00      	cmp	r3, #0
 8012152:	d1ef      	bne.n	8012134 <strstr+0x8>
 8012154:	4618      	mov	r0, r3
 8012156:	e7ec      	b.n	8012132 <strstr+0x6>

08012158 <strtok>:
 8012158:	4b16      	ldr	r3, [pc, #88]	; (80121b4 <strtok+0x5c>)
 801215a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801215c:	681e      	ldr	r6, [r3, #0]
 801215e:	6db4      	ldr	r4, [r6, #88]	; 0x58
 8012160:	4605      	mov	r5, r0
 8012162:	b9fc      	cbnz	r4, 80121a4 <strtok+0x4c>
 8012164:	2050      	movs	r0, #80	; 0x50
 8012166:	9101      	str	r1, [sp, #4]
 8012168:	f000 fa76 	bl	8012658 <malloc>
 801216c:	9901      	ldr	r1, [sp, #4]
 801216e:	65b0      	str	r0, [r6, #88]	; 0x58
 8012170:	4602      	mov	r2, r0
 8012172:	b920      	cbnz	r0, 801217e <strtok+0x26>
 8012174:	4b10      	ldr	r3, [pc, #64]	; (80121b8 <strtok+0x60>)
 8012176:	4811      	ldr	r0, [pc, #68]	; (80121bc <strtok+0x64>)
 8012178:	2157      	movs	r1, #87	; 0x57
 801217a:	f7ff f90f 	bl	801139c <__assert_func>
 801217e:	e9c0 4400 	strd	r4, r4, [r0]
 8012182:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8012186:	e9c0 4404 	strd	r4, r4, [r0, #16]
 801218a:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 801218e:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8012192:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8012196:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 801219a:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 801219e:	6184      	str	r4, [r0, #24]
 80121a0:	7704      	strb	r4, [r0, #28]
 80121a2:	6244      	str	r4, [r0, #36]	; 0x24
 80121a4:	6db2      	ldr	r2, [r6, #88]	; 0x58
 80121a6:	2301      	movs	r3, #1
 80121a8:	4628      	mov	r0, r5
 80121aa:	b002      	add	sp, #8
 80121ac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80121b0:	f000 b806 	b.w	80121c0 <__strtok_r>
 80121b4:	20000050 	.word	0x20000050
 80121b8:	080147b3 	.word	0x080147b3
 80121bc:	080147ca 	.word	0x080147ca

080121c0 <__strtok_r>:
 80121c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80121c2:	b908      	cbnz	r0, 80121c8 <__strtok_r+0x8>
 80121c4:	6810      	ldr	r0, [r2, #0]
 80121c6:	b188      	cbz	r0, 80121ec <__strtok_r+0x2c>
 80121c8:	4604      	mov	r4, r0
 80121ca:	4620      	mov	r0, r4
 80121cc:	f814 5b01 	ldrb.w	r5, [r4], #1
 80121d0:	460f      	mov	r7, r1
 80121d2:	f817 6b01 	ldrb.w	r6, [r7], #1
 80121d6:	b91e      	cbnz	r6, 80121e0 <__strtok_r+0x20>
 80121d8:	b965      	cbnz	r5, 80121f4 <__strtok_r+0x34>
 80121da:	6015      	str	r5, [r2, #0]
 80121dc:	4628      	mov	r0, r5
 80121de:	e005      	b.n	80121ec <__strtok_r+0x2c>
 80121e0:	42b5      	cmp	r5, r6
 80121e2:	d1f6      	bne.n	80121d2 <__strtok_r+0x12>
 80121e4:	2b00      	cmp	r3, #0
 80121e6:	d1f0      	bne.n	80121ca <__strtok_r+0xa>
 80121e8:	6014      	str	r4, [r2, #0]
 80121ea:	7003      	strb	r3, [r0, #0]
 80121ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80121ee:	461c      	mov	r4, r3
 80121f0:	e00c      	b.n	801220c <__strtok_r+0x4c>
 80121f2:	b915      	cbnz	r5, 80121fa <__strtok_r+0x3a>
 80121f4:	f814 3b01 	ldrb.w	r3, [r4], #1
 80121f8:	460e      	mov	r6, r1
 80121fa:	f816 5b01 	ldrb.w	r5, [r6], #1
 80121fe:	42ab      	cmp	r3, r5
 8012200:	d1f7      	bne.n	80121f2 <__strtok_r+0x32>
 8012202:	2b00      	cmp	r3, #0
 8012204:	d0f3      	beq.n	80121ee <__strtok_r+0x2e>
 8012206:	2300      	movs	r3, #0
 8012208:	f804 3c01 	strb.w	r3, [r4, #-1]
 801220c:	6014      	str	r4, [r2, #0]
 801220e:	e7ed      	b.n	80121ec <__strtok_r+0x2c>

08012210 <__swbuf_r>:
 8012210:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012212:	460e      	mov	r6, r1
 8012214:	4614      	mov	r4, r2
 8012216:	4605      	mov	r5, r0
 8012218:	b118      	cbz	r0, 8012222 <__swbuf_r+0x12>
 801221a:	6983      	ldr	r3, [r0, #24]
 801221c:	b90b      	cbnz	r3, 8012222 <__swbuf_r+0x12>
 801221e:	f7ff f939 	bl	8011494 <__sinit>
 8012222:	4b21      	ldr	r3, [pc, #132]	; (80122a8 <__swbuf_r+0x98>)
 8012224:	429c      	cmp	r4, r3
 8012226:	d12b      	bne.n	8012280 <__swbuf_r+0x70>
 8012228:	686c      	ldr	r4, [r5, #4]
 801222a:	69a3      	ldr	r3, [r4, #24]
 801222c:	60a3      	str	r3, [r4, #8]
 801222e:	89a3      	ldrh	r3, [r4, #12]
 8012230:	071a      	lsls	r2, r3, #28
 8012232:	d52f      	bpl.n	8012294 <__swbuf_r+0x84>
 8012234:	6923      	ldr	r3, [r4, #16]
 8012236:	b36b      	cbz	r3, 8012294 <__swbuf_r+0x84>
 8012238:	6923      	ldr	r3, [r4, #16]
 801223a:	6820      	ldr	r0, [r4, #0]
 801223c:	1ac0      	subs	r0, r0, r3
 801223e:	6963      	ldr	r3, [r4, #20]
 8012240:	b2f6      	uxtb	r6, r6
 8012242:	4283      	cmp	r3, r0
 8012244:	4637      	mov	r7, r6
 8012246:	dc04      	bgt.n	8012252 <__swbuf_r+0x42>
 8012248:	4621      	mov	r1, r4
 801224a:	4628      	mov	r0, r5
 801224c:	f000 f950 	bl	80124f0 <_fflush_r>
 8012250:	bb30      	cbnz	r0, 80122a0 <__swbuf_r+0x90>
 8012252:	68a3      	ldr	r3, [r4, #8]
 8012254:	3b01      	subs	r3, #1
 8012256:	60a3      	str	r3, [r4, #8]
 8012258:	6823      	ldr	r3, [r4, #0]
 801225a:	1c5a      	adds	r2, r3, #1
 801225c:	6022      	str	r2, [r4, #0]
 801225e:	701e      	strb	r6, [r3, #0]
 8012260:	6963      	ldr	r3, [r4, #20]
 8012262:	3001      	adds	r0, #1
 8012264:	4283      	cmp	r3, r0
 8012266:	d004      	beq.n	8012272 <__swbuf_r+0x62>
 8012268:	89a3      	ldrh	r3, [r4, #12]
 801226a:	07db      	lsls	r3, r3, #31
 801226c:	d506      	bpl.n	801227c <__swbuf_r+0x6c>
 801226e:	2e0a      	cmp	r6, #10
 8012270:	d104      	bne.n	801227c <__swbuf_r+0x6c>
 8012272:	4621      	mov	r1, r4
 8012274:	4628      	mov	r0, r5
 8012276:	f000 f93b 	bl	80124f0 <_fflush_r>
 801227a:	b988      	cbnz	r0, 80122a0 <__swbuf_r+0x90>
 801227c:	4638      	mov	r0, r7
 801227e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012280:	4b0a      	ldr	r3, [pc, #40]	; (80122ac <__swbuf_r+0x9c>)
 8012282:	429c      	cmp	r4, r3
 8012284:	d101      	bne.n	801228a <__swbuf_r+0x7a>
 8012286:	68ac      	ldr	r4, [r5, #8]
 8012288:	e7cf      	b.n	801222a <__swbuf_r+0x1a>
 801228a:	4b09      	ldr	r3, [pc, #36]	; (80122b0 <__swbuf_r+0xa0>)
 801228c:	429c      	cmp	r4, r3
 801228e:	bf08      	it	eq
 8012290:	68ec      	ldreq	r4, [r5, #12]
 8012292:	e7ca      	b.n	801222a <__swbuf_r+0x1a>
 8012294:	4621      	mov	r1, r4
 8012296:	4628      	mov	r0, r5
 8012298:	f000 f81e 	bl	80122d8 <__swsetup_r>
 801229c:	2800      	cmp	r0, #0
 801229e:	d0cb      	beq.n	8012238 <__swbuf_r+0x28>
 80122a0:	f04f 37ff 	mov.w	r7, #4294967295
 80122a4:	e7ea      	b.n	801227c <__swbuf_r+0x6c>
 80122a6:	bf00      	nop
 80122a8:	0801473c 	.word	0x0801473c
 80122ac:	0801475c 	.word	0x0801475c
 80122b0:	0801471c 	.word	0x0801471c

080122b4 <_write_r>:
 80122b4:	b538      	push	{r3, r4, r5, lr}
 80122b6:	4d07      	ldr	r5, [pc, #28]	; (80122d4 <_write_r+0x20>)
 80122b8:	4604      	mov	r4, r0
 80122ba:	4608      	mov	r0, r1
 80122bc:	4611      	mov	r1, r2
 80122be:	2200      	movs	r2, #0
 80122c0:	602a      	str	r2, [r5, #0]
 80122c2:	461a      	mov	r2, r3
 80122c4:	f7ee fe54 	bl	8000f70 <_write>
 80122c8:	1c43      	adds	r3, r0, #1
 80122ca:	d102      	bne.n	80122d2 <_write_r+0x1e>
 80122cc:	682b      	ldr	r3, [r5, #0]
 80122ce:	b103      	cbz	r3, 80122d2 <_write_r+0x1e>
 80122d0:	6023      	str	r3, [r4, #0]
 80122d2:	bd38      	pop	{r3, r4, r5, pc}
 80122d4:	20004b34 	.word	0x20004b34

080122d8 <__swsetup_r>:
 80122d8:	4b32      	ldr	r3, [pc, #200]	; (80123a4 <__swsetup_r+0xcc>)
 80122da:	b570      	push	{r4, r5, r6, lr}
 80122dc:	681d      	ldr	r5, [r3, #0]
 80122de:	4606      	mov	r6, r0
 80122e0:	460c      	mov	r4, r1
 80122e2:	b125      	cbz	r5, 80122ee <__swsetup_r+0x16>
 80122e4:	69ab      	ldr	r3, [r5, #24]
 80122e6:	b913      	cbnz	r3, 80122ee <__swsetup_r+0x16>
 80122e8:	4628      	mov	r0, r5
 80122ea:	f7ff f8d3 	bl	8011494 <__sinit>
 80122ee:	4b2e      	ldr	r3, [pc, #184]	; (80123a8 <__swsetup_r+0xd0>)
 80122f0:	429c      	cmp	r4, r3
 80122f2:	d10f      	bne.n	8012314 <__swsetup_r+0x3c>
 80122f4:	686c      	ldr	r4, [r5, #4]
 80122f6:	89a3      	ldrh	r3, [r4, #12]
 80122f8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80122fc:	0719      	lsls	r1, r3, #28
 80122fe:	d42c      	bmi.n	801235a <__swsetup_r+0x82>
 8012300:	06dd      	lsls	r5, r3, #27
 8012302:	d411      	bmi.n	8012328 <__swsetup_r+0x50>
 8012304:	2309      	movs	r3, #9
 8012306:	6033      	str	r3, [r6, #0]
 8012308:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801230c:	81a3      	strh	r3, [r4, #12]
 801230e:	f04f 30ff 	mov.w	r0, #4294967295
 8012312:	e03e      	b.n	8012392 <__swsetup_r+0xba>
 8012314:	4b25      	ldr	r3, [pc, #148]	; (80123ac <__swsetup_r+0xd4>)
 8012316:	429c      	cmp	r4, r3
 8012318:	d101      	bne.n	801231e <__swsetup_r+0x46>
 801231a:	68ac      	ldr	r4, [r5, #8]
 801231c:	e7eb      	b.n	80122f6 <__swsetup_r+0x1e>
 801231e:	4b24      	ldr	r3, [pc, #144]	; (80123b0 <__swsetup_r+0xd8>)
 8012320:	429c      	cmp	r4, r3
 8012322:	bf08      	it	eq
 8012324:	68ec      	ldreq	r4, [r5, #12]
 8012326:	e7e6      	b.n	80122f6 <__swsetup_r+0x1e>
 8012328:	0758      	lsls	r0, r3, #29
 801232a:	d512      	bpl.n	8012352 <__swsetup_r+0x7a>
 801232c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801232e:	b141      	cbz	r1, 8012342 <__swsetup_r+0x6a>
 8012330:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012334:	4299      	cmp	r1, r3
 8012336:	d002      	beq.n	801233e <__swsetup_r+0x66>
 8012338:	4630      	mov	r0, r6
 801233a:	f000 f9a1 	bl	8012680 <_free_r>
 801233e:	2300      	movs	r3, #0
 8012340:	6363      	str	r3, [r4, #52]	; 0x34
 8012342:	89a3      	ldrh	r3, [r4, #12]
 8012344:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8012348:	81a3      	strh	r3, [r4, #12]
 801234a:	2300      	movs	r3, #0
 801234c:	6063      	str	r3, [r4, #4]
 801234e:	6923      	ldr	r3, [r4, #16]
 8012350:	6023      	str	r3, [r4, #0]
 8012352:	89a3      	ldrh	r3, [r4, #12]
 8012354:	f043 0308 	orr.w	r3, r3, #8
 8012358:	81a3      	strh	r3, [r4, #12]
 801235a:	6923      	ldr	r3, [r4, #16]
 801235c:	b94b      	cbnz	r3, 8012372 <__swsetup_r+0x9a>
 801235e:	89a3      	ldrh	r3, [r4, #12]
 8012360:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8012364:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012368:	d003      	beq.n	8012372 <__swsetup_r+0x9a>
 801236a:	4621      	mov	r1, r4
 801236c:	4630      	mov	r0, r6
 801236e:	f000 f933 	bl	80125d8 <__smakebuf_r>
 8012372:	89a0      	ldrh	r0, [r4, #12]
 8012374:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012378:	f010 0301 	ands.w	r3, r0, #1
 801237c:	d00a      	beq.n	8012394 <__swsetup_r+0xbc>
 801237e:	2300      	movs	r3, #0
 8012380:	60a3      	str	r3, [r4, #8]
 8012382:	6963      	ldr	r3, [r4, #20]
 8012384:	425b      	negs	r3, r3
 8012386:	61a3      	str	r3, [r4, #24]
 8012388:	6923      	ldr	r3, [r4, #16]
 801238a:	b943      	cbnz	r3, 801239e <__swsetup_r+0xc6>
 801238c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8012390:	d1ba      	bne.n	8012308 <__swsetup_r+0x30>
 8012392:	bd70      	pop	{r4, r5, r6, pc}
 8012394:	0781      	lsls	r1, r0, #30
 8012396:	bf58      	it	pl
 8012398:	6963      	ldrpl	r3, [r4, #20]
 801239a:	60a3      	str	r3, [r4, #8]
 801239c:	e7f4      	b.n	8012388 <__swsetup_r+0xb0>
 801239e:	2000      	movs	r0, #0
 80123a0:	e7f7      	b.n	8012392 <__swsetup_r+0xba>
 80123a2:	bf00      	nop
 80123a4:	20000050 	.word	0x20000050
 80123a8:	0801473c 	.word	0x0801473c
 80123ac:	0801475c 	.word	0x0801475c
 80123b0:	0801471c 	.word	0x0801471c

080123b4 <abort>:
 80123b4:	b508      	push	{r3, lr}
 80123b6:	2006      	movs	r0, #6
 80123b8:	f000 fb72 	bl	8012aa0 <raise>
 80123bc:	2001      	movs	r0, #1
 80123be:	f7f0 f8fb 	bl	80025b8 <_exit>
	...

080123c4 <_close_r>:
 80123c4:	b538      	push	{r3, r4, r5, lr}
 80123c6:	4d06      	ldr	r5, [pc, #24]	; (80123e0 <_close_r+0x1c>)
 80123c8:	2300      	movs	r3, #0
 80123ca:	4604      	mov	r4, r0
 80123cc:	4608      	mov	r0, r1
 80123ce:	602b      	str	r3, [r5, #0]
 80123d0:	f7f0 f919 	bl	8002606 <_close>
 80123d4:	1c43      	adds	r3, r0, #1
 80123d6:	d102      	bne.n	80123de <_close_r+0x1a>
 80123d8:	682b      	ldr	r3, [r5, #0]
 80123da:	b103      	cbz	r3, 80123de <_close_r+0x1a>
 80123dc:	6023      	str	r3, [r4, #0]
 80123de:	bd38      	pop	{r3, r4, r5, pc}
 80123e0:	20004b34 	.word	0x20004b34

080123e4 <__sflush_r>:
 80123e4:	898a      	ldrh	r2, [r1, #12]
 80123e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80123ea:	4605      	mov	r5, r0
 80123ec:	0710      	lsls	r0, r2, #28
 80123ee:	460c      	mov	r4, r1
 80123f0:	d458      	bmi.n	80124a4 <__sflush_r+0xc0>
 80123f2:	684b      	ldr	r3, [r1, #4]
 80123f4:	2b00      	cmp	r3, #0
 80123f6:	dc05      	bgt.n	8012404 <__sflush_r+0x20>
 80123f8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80123fa:	2b00      	cmp	r3, #0
 80123fc:	dc02      	bgt.n	8012404 <__sflush_r+0x20>
 80123fe:	2000      	movs	r0, #0
 8012400:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012404:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012406:	2e00      	cmp	r6, #0
 8012408:	d0f9      	beq.n	80123fe <__sflush_r+0x1a>
 801240a:	2300      	movs	r3, #0
 801240c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8012410:	682f      	ldr	r7, [r5, #0]
 8012412:	602b      	str	r3, [r5, #0]
 8012414:	d032      	beq.n	801247c <__sflush_r+0x98>
 8012416:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8012418:	89a3      	ldrh	r3, [r4, #12]
 801241a:	075a      	lsls	r2, r3, #29
 801241c:	d505      	bpl.n	801242a <__sflush_r+0x46>
 801241e:	6863      	ldr	r3, [r4, #4]
 8012420:	1ac0      	subs	r0, r0, r3
 8012422:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012424:	b10b      	cbz	r3, 801242a <__sflush_r+0x46>
 8012426:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8012428:	1ac0      	subs	r0, r0, r3
 801242a:	2300      	movs	r3, #0
 801242c:	4602      	mov	r2, r0
 801242e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012430:	6a21      	ldr	r1, [r4, #32]
 8012432:	4628      	mov	r0, r5
 8012434:	47b0      	blx	r6
 8012436:	1c43      	adds	r3, r0, #1
 8012438:	89a3      	ldrh	r3, [r4, #12]
 801243a:	d106      	bne.n	801244a <__sflush_r+0x66>
 801243c:	6829      	ldr	r1, [r5, #0]
 801243e:	291d      	cmp	r1, #29
 8012440:	d82c      	bhi.n	801249c <__sflush_r+0xb8>
 8012442:	4a2a      	ldr	r2, [pc, #168]	; (80124ec <__sflush_r+0x108>)
 8012444:	40ca      	lsrs	r2, r1
 8012446:	07d6      	lsls	r6, r2, #31
 8012448:	d528      	bpl.n	801249c <__sflush_r+0xb8>
 801244a:	2200      	movs	r2, #0
 801244c:	6062      	str	r2, [r4, #4]
 801244e:	04d9      	lsls	r1, r3, #19
 8012450:	6922      	ldr	r2, [r4, #16]
 8012452:	6022      	str	r2, [r4, #0]
 8012454:	d504      	bpl.n	8012460 <__sflush_r+0x7c>
 8012456:	1c42      	adds	r2, r0, #1
 8012458:	d101      	bne.n	801245e <__sflush_r+0x7a>
 801245a:	682b      	ldr	r3, [r5, #0]
 801245c:	b903      	cbnz	r3, 8012460 <__sflush_r+0x7c>
 801245e:	6560      	str	r0, [r4, #84]	; 0x54
 8012460:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012462:	602f      	str	r7, [r5, #0]
 8012464:	2900      	cmp	r1, #0
 8012466:	d0ca      	beq.n	80123fe <__sflush_r+0x1a>
 8012468:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801246c:	4299      	cmp	r1, r3
 801246e:	d002      	beq.n	8012476 <__sflush_r+0x92>
 8012470:	4628      	mov	r0, r5
 8012472:	f000 f905 	bl	8012680 <_free_r>
 8012476:	2000      	movs	r0, #0
 8012478:	6360      	str	r0, [r4, #52]	; 0x34
 801247a:	e7c1      	b.n	8012400 <__sflush_r+0x1c>
 801247c:	6a21      	ldr	r1, [r4, #32]
 801247e:	2301      	movs	r3, #1
 8012480:	4628      	mov	r0, r5
 8012482:	47b0      	blx	r6
 8012484:	1c41      	adds	r1, r0, #1
 8012486:	d1c7      	bne.n	8012418 <__sflush_r+0x34>
 8012488:	682b      	ldr	r3, [r5, #0]
 801248a:	2b00      	cmp	r3, #0
 801248c:	d0c4      	beq.n	8012418 <__sflush_r+0x34>
 801248e:	2b1d      	cmp	r3, #29
 8012490:	d001      	beq.n	8012496 <__sflush_r+0xb2>
 8012492:	2b16      	cmp	r3, #22
 8012494:	d101      	bne.n	801249a <__sflush_r+0xb6>
 8012496:	602f      	str	r7, [r5, #0]
 8012498:	e7b1      	b.n	80123fe <__sflush_r+0x1a>
 801249a:	89a3      	ldrh	r3, [r4, #12]
 801249c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80124a0:	81a3      	strh	r3, [r4, #12]
 80124a2:	e7ad      	b.n	8012400 <__sflush_r+0x1c>
 80124a4:	690f      	ldr	r7, [r1, #16]
 80124a6:	2f00      	cmp	r7, #0
 80124a8:	d0a9      	beq.n	80123fe <__sflush_r+0x1a>
 80124aa:	0793      	lsls	r3, r2, #30
 80124ac:	680e      	ldr	r6, [r1, #0]
 80124ae:	bf08      	it	eq
 80124b0:	694b      	ldreq	r3, [r1, #20]
 80124b2:	600f      	str	r7, [r1, #0]
 80124b4:	bf18      	it	ne
 80124b6:	2300      	movne	r3, #0
 80124b8:	eba6 0807 	sub.w	r8, r6, r7
 80124bc:	608b      	str	r3, [r1, #8]
 80124be:	f1b8 0f00 	cmp.w	r8, #0
 80124c2:	dd9c      	ble.n	80123fe <__sflush_r+0x1a>
 80124c4:	6a21      	ldr	r1, [r4, #32]
 80124c6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80124c8:	4643      	mov	r3, r8
 80124ca:	463a      	mov	r2, r7
 80124cc:	4628      	mov	r0, r5
 80124ce:	47b0      	blx	r6
 80124d0:	2800      	cmp	r0, #0
 80124d2:	dc06      	bgt.n	80124e2 <__sflush_r+0xfe>
 80124d4:	89a3      	ldrh	r3, [r4, #12]
 80124d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80124da:	81a3      	strh	r3, [r4, #12]
 80124dc:	f04f 30ff 	mov.w	r0, #4294967295
 80124e0:	e78e      	b.n	8012400 <__sflush_r+0x1c>
 80124e2:	4407      	add	r7, r0
 80124e4:	eba8 0800 	sub.w	r8, r8, r0
 80124e8:	e7e9      	b.n	80124be <__sflush_r+0xda>
 80124ea:	bf00      	nop
 80124ec:	20400001 	.word	0x20400001

080124f0 <_fflush_r>:
 80124f0:	b538      	push	{r3, r4, r5, lr}
 80124f2:	690b      	ldr	r3, [r1, #16]
 80124f4:	4605      	mov	r5, r0
 80124f6:	460c      	mov	r4, r1
 80124f8:	b913      	cbnz	r3, 8012500 <_fflush_r+0x10>
 80124fa:	2500      	movs	r5, #0
 80124fc:	4628      	mov	r0, r5
 80124fe:	bd38      	pop	{r3, r4, r5, pc}
 8012500:	b118      	cbz	r0, 801250a <_fflush_r+0x1a>
 8012502:	6983      	ldr	r3, [r0, #24]
 8012504:	b90b      	cbnz	r3, 801250a <_fflush_r+0x1a>
 8012506:	f7fe ffc5 	bl	8011494 <__sinit>
 801250a:	4b14      	ldr	r3, [pc, #80]	; (801255c <_fflush_r+0x6c>)
 801250c:	429c      	cmp	r4, r3
 801250e:	d11b      	bne.n	8012548 <_fflush_r+0x58>
 8012510:	686c      	ldr	r4, [r5, #4]
 8012512:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012516:	2b00      	cmp	r3, #0
 8012518:	d0ef      	beq.n	80124fa <_fflush_r+0xa>
 801251a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801251c:	07d0      	lsls	r0, r2, #31
 801251e:	d404      	bmi.n	801252a <_fflush_r+0x3a>
 8012520:	0599      	lsls	r1, r3, #22
 8012522:	d402      	bmi.n	801252a <_fflush_r+0x3a>
 8012524:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012526:	f7ff f88a 	bl	801163e <__retarget_lock_acquire_recursive>
 801252a:	4628      	mov	r0, r5
 801252c:	4621      	mov	r1, r4
 801252e:	f7ff ff59 	bl	80123e4 <__sflush_r>
 8012532:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012534:	07da      	lsls	r2, r3, #31
 8012536:	4605      	mov	r5, r0
 8012538:	d4e0      	bmi.n	80124fc <_fflush_r+0xc>
 801253a:	89a3      	ldrh	r3, [r4, #12]
 801253c:	059b      	lsls	r3, r3, #22
 801253e:	d4dd      	bmi.n	80124fc <_fflush_r+0xc>
 8012540:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012542:	f7ff f87d 	bl	8011640 <__retarget_lock_release_recursive>
 8012546:	e7d9      	b.n	80124fc <_fflush_r+0xc>
 8012548:	4b05      	ldr	r3, [pc, #20]	; (8012560 <_fflush_r+0x70>)
 801254a:	429c      	cmp	r4, r3
 801254c:	d101      	bne.n	8012552 <_fflush_r+0x62>
 801254e:	68ac      	ldr	r4, [r5, #8]
 8012550:	e7df      	b.n	8012512 <_fflush_r+0x22>
 8012552:	4b04      	ldr	r3, [pc, #16]	; (8012564 <_fflush_r+0x74>)
 8012554:	429c      	cmp	r4, r3
 8012556:	bf08      	it	eq
 8012558:	68ec      	ldreq	r4, [r5, #12]
 801255a:	e7da      	b.n	8012512 <_fflush_r+0x22>
 801255c:	0801473c 	.word	0x0801473c
 8012560:	0801475c 	.word	0x0801475c
 8012564:	0801471c 	.word	0x0801471c

08012568 <_lseek_r>:
 8012568:	b538      	push	{r3, r4, r5, lr}
 801256a:	4d07      	ldr	r5, [pc, #28]	; (8012588 <_lseek_r+0x20>)
 801256c:	4604      	mov	r4, r0
 801256e:	4608      	mov	r0, r1
 8012570:	4611      	mov	r1, r2
 8012572:	2200      	movs	r2, #0
 8012574:	602a      	str	r2, [r5, #0]
 8012576:	461a      	mov	r2, r3
 8012578:	f7f0 f86c 	bl	8002654 <_lseek>
 801257c:	1c43      	adds	r3, r0, #1
 801257e:	d102      	bne.n	8012586 <_lseek_r+0x1e>
 8012580:	682b      	ldr	r3, [r5, #0]
 8012582:	b103      	cbz	r3, 8012586 <_lseek_r+0x1e>
 8012584:	6023      	str	r3, [r4, #0]
 8012586:	bd38      	pop	{r3, r4, r5, pc}
 8012588:	20004b34 	.word	0x20004b34

0801258c <__swhatbuf_r>:
 801258c:	b570      	push	{r4, r5, r6, lr}
 801258e:	460e      	mov	r6, r1
 8012590:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012594:	2900      	cmp	r1, #0
 8012596:	b096      	sub	sp, #88	; 0x58
 8012598:	4614      	mov	r4, r2
 801259a:	461d      	mov	r5, r3
 801259c:	da08      	bge.n	80125b0 <__swhatbuf_r+0x24>
 801259e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80125a2:	2200      	movs	r2, #0
 80125a4:	602a      	str	r2, [r5, #0]
 80125a6:	061a      	lsls	r2, r3, #24
 80125a8:	d410      	bmi.n	80125cc <__swhatbuf_r+0x40>
 80125aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80125ae:	e00e      	b.n	80125ce <__swhatbuf_r+0x42>
 80125b0:	466a      	mov	r2, sp
 80125b2:	f000 fa91 	bl	8012ad8 <_fstat_r>
 80125b6:	2800      	cmp	r0, #0
 80125b8:	dbf1      	blt.n	801259e <__swhatbuf_r+0x12>
 80125ba:	9a01      	ldr	r2, [sp, #4]
 80125bc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80125c0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80125c4:	425a      	negs	r2, r3
 80125c6:	415a      	adcs	r2, r3
 80125c8:	602a      	str	r2, [r5, #0]
 80125ca:	e7ee      	b.n	80125aa <__swhatbuf_r+0x1e>
 80125cc:	2340      	movs	r3, #64	; 0x40
 80125ce:	2000      	movs	r0, #0
 80125d0:	6023      	str	r3, [r4, #0]
 80125d2:	b016      	add	sp, #88	; 0x58
 80125d4:	bd70      	pop	{r4, r5, r6, pc}
	...

080125d8 <__smakebuf_r>:
 80125d8:	898b      	ldrh	r3, [r1, #12]
 80125da:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80125dc:	079d      	lsls	r5, r3, #30
 80125de:	4606      	mov	r6, r0
 80125e0:	460c      	mov	r4, r1
 80125e2:	d507      	bpl.n	80125f4 <__smakebuf_r+0x1c>
 80125e4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80125e8:	6023      	str	r3, [r4, #0]
 80125ea:	6123      	str	r3, [r4, #16]
 80125ec:	2301      	movs	r3, #1
 80125ee:	6163      	str	r3, [r4, #20]
 80125f0:	b002      	add	sp, #8
 80125f2:	bd70      	pop	{r4, r5, r6, pc}
 80125f4:	ab01      	add	r3, sp, #4
 80125f6:	466a      	mov	r2, sp
 80125f8:	f7ff ffc8 	bl	801258c <__swhatbuf_r>
 80125fc:	9900      	ldr	r1, [sp, #0]
 80125fe:	4605      	mov	r5, r0
 8012600:	4630      	mov	r0, r6
 8012602:	f7ff f87f 	bl	8011704 <_malloc_r>
 8012606:	b948      	cbnz	r0, 801261c <__smakebuf_r+0x44>
 8012608:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801260c:	059a      	lsls	r2, r3, #22
 801260e:	d4ef      	bmi.n	80125f0 <__smakebuf_r+0x18>
 8012610:	f023 0303 	bic.w	r3, r3, #3
 8012614:	f043 0302 	orr.w	r3, r3, #2
 8012618:	81a3      	strh	r3, [r4, #12]
 801261a:	e7e3      	b.n	80125e4 <__smakebuf_r+0xc>
 801261c:	4b0d      	ldr	r3, [pc, #52]	; (8012654 <__smakebuf_r+0x7c>)
 801261e:	62b3      	str	r3, [r6, #40]	; 0x28
 8012620:	89a3      	ldrh	r3, [r4, #12]
 8012622:	6020      	str	r0, [r4, #0]
 8012624:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012628:	81a3      	strh	r3, [r4, #12]
 801262a:	9b00      	ldr	r3, [sp, #0]
 801262c:	6163      	str	r3, [r4, #20]
 801262e:	9b01      	ldr	r3, [sp, #4]
 8012630:	6120      	str	r0, [r4, #16]
 8012632:	b15b      	cbz	r3, 801264c <__smakebuf_r+0x74>
 8012634:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012638:	4630      	mov	r0, r6
 801263a:	f000 fa5f 	bl	8012afc <_isatty_r>
 801263e:	b128      	cbz	r0, 801264c <__smakebuf_r+0x74>
 8012640:	89a3      	ldrh	r3, [r4, #12]
 8012642:	f023 0303 	bic.w	r3, r3, #3
 8012646:	f043 0301 	orr.w	r3, r3, #1
 801264a:	81a3      	strh	r3, [r4, #12]
 801264c:	89a0      	ldrh	r0, [r4, #12]
 801264e:	4305      	orrs	r5, r0
 8012650:	81a5      	strh	r5, [r4, #12]
 8012652:	e7cd      	b.n	80125f0 <__smakebuf_r+0x18>
 8012654:	0801142d 	.word	0x0801142d

08012658 <malloc>:
 8012658:	4b02      	ldr	r3, [pc, #8]	; (8012664 <malloc+0xc>)
 801265a:	4601      	mov	r1, r0
 801265c:	6818      	ldr	r0, [r3, #0]
 801265e:	f7ff b851 	b.w	8011704 <_malloc_r>
 8012662:	bf00      	nop
 8012664:	20000050 	.word	0x20000050

08012668 <__malloc_lock>:
 8012668:	4801      	ldr	r0, [pc, #4]	; (8012670 <__malloc_lock+0x8>)
 801266a:	f7fe bfe8 	b.w	801163e <__retarget_lock_acquire_recursive>
 801266e:	bf00      	nop
 8012670:	20004b28 	.word	0x20004b28

08012674 <__malloc_unlock>:
 8012674:	4801      	ldr	r0, [pc, #4]	; (801267c <__malloc_unlock+0x8>)
 8012676:	f7fe bfe3 	b.w	8011640 <__retarget_lock_release_recursive>
 801267a:	bf00      	nop
 801267c:	20004b28 	.word	0x20004b28

08012680 <_free_r>:
 8012680:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012682:	2900      	cmp	r1, #0
 8012684:	d044      	beq.n	8012710 <_free_r+0x90>
 8012686:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801268a:	9001      	str	r0, [sp, #4]
 801268c:	2b00      	cmp	r3, #0
 801268e:	f1a1 0404 	sub.w	r4, r1, #4
 8012692:	bfb8      	it	lt
 8012694:	18e4      	addlt	r4, r4, r3
 8012696:	f7ff ffe7 	bl	8012668 <__malloc_lock>
 801269a:	4a1e      	ldr	r2, [pc, #120]	; (8012714 <_free_r+0x94>)
 801269c:	9801      	ldr	r0, [sp, #4]
 801269e:	6813      	ldr	r3, [r2, #0]
 80126a0:	b933      	cbnz	r3, 80126b0 <_free_r+0x30>
 80126a2:	6063      	str	r3, [r4, #4]
 80126a4:	6014      	str	r4, [r2, #0]
 80126a6:	b003      	add	sp, #12
 80126a8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80126ac:	f7ff bfe2 	b.w	8012674 <__malloc_unlock>
 80126b0:	42a3      	cmp	r3, r4
 80126b2:	d908      	bls.n	80126c6 <_free_r+0x46>
 80126b4:	6825      	ldr	r5, [r4, #0]
 80126b6:	1961      	adds	r1, r4, r5
 80126b8:	428b      	cmp	r3, r1
 80126ba:	bf01      	itttt	eq
 80126bc:	6819      	ldreq	r1, [r3, #0]
 80126be:	685b      	ldreq	r3, [r3, #4]
 80126c0:	1949      	addeq	r1, r1, r5
 80126c2:	6021      	streq	r1, [r4, #0]
 80126c4:	e7ed      	b.n	80126a2 <_free_r+0x22>
 80126c6:	461a      	mov	r2, r3
 80126c8:	685b      	ldr	r3, [r3, #4]
 80126ca:	b10b      	cbz	r3, 80126d0 <_free_r+0x50>
 80126cc:	42a3      	cmp	r3, r4
 80126ce:	d9fa      	bls.n	80126c6 <_free_r+0x46>
 80126d0:	6811      	ldr	r1, [r2, #0]
 80126d2:	1855      	adds	r5, r2, r1
 80126d4:	42a5      	cmp	r5, r4
 80126d6:	d10b      	bne.n	80126f0 <_free_r+0x70>
 80126d8:	6824      	ldr	r4, [r4, #0]
 80126da:	4421      	add	r1, r4
 80126dc:	1854      	adds	r4, r2, r1
 80126de:	42a3      	cmp	r3, r4
 80126e0:	6011      	str	r1, [r2, #0]
 80126e2:	d1e0      	bne.n	80126a6 <_free_r+0x26>
 80126e4:	681c      	ldr	r4, [r3, #0]
 80126e6:	685b      	ldr	r3, [r3, #4]
 80126e8:	6053      	str	r3, [r2, #4]
 80126ea:	4421      	add	r1, r4
 80126ec:	6011      	str	r1, [r2, #0]
 80126ee:	e7da      	b.n	80126a6 <_free_r+0x26>
 80126f0:	d902      	bls.n	80126f8 <_free_r+0x78>
 80126f2:	230c      	movs	r3, #12
 80126f4:	6003      	str	r3, [r0, #0]
 80126f6:	e7d6      	b.n	80126a6 <_free_r+0x26>
 80126f8:	6825      	ldr	r5, [r4, #0]
 80126fa:	1961      	adds	r1, r4, r5
 80126fc:	428b      	cmp	r3, r1
 80126fe:	bf04      	itt	eq
 8012700:	6819      	ldreq	r1, [r3, #0]
 8012702:	685b      	ldreq	r3, [r3, #4]
 8012704:	6063      	str	r3, [r4, #4]
 8012706:	bf04      	itt	eq
 8012708:	1949      	addeq	r1, r1, r5
 801270a:	6021      	streq	r1, [r4, #0]
 801270c:	6054      	str	r4, [r2, #4]
 801270e:	e7ca      	b.n	80126a6 <_free_r+0x26>
 8012710:	b003      	add	sp, #12
 8012712:	bd30      	pop	{r4, r5, pc}
 8012714:	20004b2c 	.word	0x20004b2c

08012718 <_realloc_r>:
 8012718:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801271c:	4680      	mov	r8, r0
 801271e:	4614      	mov	r4, r2
 8012720:	460e      	mov	r6, r1
 8012722:	b921      	cbnz	r1, 801272e <_realloc_r+0x16>
 8012724:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012728:	4611      	mov	r1, r2
 801272a:	f7fe bfeb 	b.w	8011704 <_malloc_r>
 801272e:	b92a      	cbnz	r2, 801273c <_realloc_r+0x24>
 8012730:	f7ff ffa6 	bl	8012680 <_free_r>
 8012734:	4625      	mov	r5, r4
 8012736:	4628      	mov	r0, r5
 8012738:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801273c:	f000 f9ee 	bl	8012b1c <_malloc_usable_size_r>
 8012740:	4284      	cmp	r4, r0
 8012742:	4607      	mov	r7, r0
 8012744:	d802      	bhi.n	801274c <_realloc_r+0x34>
 8012746:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801274a:	d812      	bhi.n	8012772 <_realloc_r+0x5a>
 801274c:	4621      	mov	r1, r4
 801274e:	4640      	mov	r0, r8
 8012750:	f7fe ffd8 	bl	8011704 <_malloc_r>
 8012754:	4605      	mov	r5, r0
 8012756:	2800      	cmp	r0, #0
 8012758:	d0ed      	beq.n	8012736 <_realloc_r+0x1e>
 801275a:	42bc      	cmp	r4, r7
 801275c:	4622      	mov	r2, r4
 801275e:	4631      	mov	r1, r6
 8012760:	bf28      	it	cs
 8012762:	463a      	movcs	r2, r7
 8012764:	f7fe ff7d 	bl	8011662 <memcpy>
 8012768:	4631      	mov	r1, r6
 801276a:	4640      	mov	r0, r8
 801276c:	f7ff ff88 	bl	8012680 <_free_r>
 8012770:	e7e1      	b.n	8012736 <_realloc_r+0x1e>
 8012772:	4635      	mov	r5, r6
 8012774:	e7df      	b.n	8012736 <_realloc_r+0x1e>

08012776 <__ssputs_r>:
 8012776:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801277a:	688e      	ldr	r6, [r1, #8]
 801277c:	429e      	cmp	r6, r3
 801277e:	4682      	mov	sl, r0
 8012780:	460c      	mov	r4, r1
 8012782:	4690      	mov	r8, r2
 8012784:	461f      	mov	r7, r3
 8012786:	d838      	bhi.n	80127fa <__ssputs_r+0x84>
 8012788:	898a      	ldrh	r2, [r1, #12]
 801278a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801278e:	d032      	beq.n	80127f6 <__ssputs_r+0x80>
 8012790:	6825      	ldr	r5, [r4, #0]
 8012792:	6909      	ldr	r1, [r1, #16]
 8012794:	eba5 0901 	sub.w	r9, r5, r1
 8012798:	6965      	ldr	r5, [r4, #20]
 801279a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801279e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80127a2:	3301      	adds	r3, #1
 80127a4:	444b      	add	r3, r9
 80127a6:	106d      	asrs	r5, r5, #1
 80127a8:	429d      	cmp	r5, r3
 80127aa:	bf38      	it	cc
 80127ac:	461d      	movcc	r5, r3
 80127ae:	0553      	lsls	r3, r2, #21
 80127b0:	d531      	bpl.n	8012816 <__ssputs_r+0xa0>
 80127b2:	4629      	mov	r1, r5
 80127b4:	f7fe ffa6 	bl	8011704 <_malloc_r>
 80127b8:	4606      	mov	r6, r0
 80127ba:	b950      	cbnz	r0, 80127d2 <__ssputs_r+0x5c>
 80127bc:	230c      	movs	r3, #12
 80127be:	f8ca 3000 	str.w	r3, [sl]
 80127c2:	89a3      	ldrh	r3, [r4, #12]
 80127c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80127c8:	81a3      	strh	r3, [r4, #12]
 80127ca:	f04f 30ff 	mov.w	r0, #4294967295
 80127ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80127d2:	6921      	ldr	r1, [r4, #16]
 80127d4:	464a      	mov	r2, r9
 80127d6:	f7fe ff44 	bl	8011662 <memcpy>
 80127da:	89a3      	ldrh	r3, [r4, #12]
 80127dc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80127e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80127e4:	81a3      	strh	r3, [r4, #12]
 80127e6:	6126      	str	r6, [r4, #16]
 80127e8:	6165      	str	r5, [r4, #20]
 80127ea:	444e      	add	r6, r9
 80127ec:	eba5 0509 	sub.w	r5, r5, r9
 80127f0:	6026      	str	r6, [r4, #0]
 80127f2:	60a5      	str	r5, [r4, #8]
 80127f4:	463e      	mov	r6, r7
 80127f6:	42be      	cmp	r6, r7
 80127f8:	d900      	bls.n	80127fc <__ssputs_r+0x86>
 80127fa:	463e      	mov	r6, r7
 80127fc:	6820      	ldr	r0, [r4, #0]
 80127fe:	4632      	mov	r2, r6
 8012800:	4641      	mov	r1, r8
 8012802:	f7fe ff3c 	bl	801167e <memmove>
 8012806:	68a3      	ldr	r3, [r4, #8]
 8012808:	1b9b      	subs	r3, r3, r6
 801280a:	60a3      	str	r3, [r4, #8]
 801280c:	6823      	ldr	r3, [r4, #0]
 801280e:	4433      	add	r3, r6
 8012810:	6023      	str	r3, [r4, #0]
 8012812:	2000      	movs	r0, #0
 8012814:	e7db      	b.n	80127ce <__ssputs_r+0x58>
 8012816:	462a      	mov	r2, r5
 8012818:	f7ff ff7e 	bl	8012718 <_realloc_r>
 801281c:	4606      	mov	r6, r0
 801281e:	2800      	cmp	r0, #0
 8012820:	d1e1      	bne.n	80127e6 <__ssputs_r+0x70>
 8012822:	6921      	ldr	r1, [r4, #16]
 8012824:	4650      	mov	r0, sl
 8012826:	f7ff ff2b 	bl	8012680 <_free_r>
 801282a:	e7c7      	b.n	80127bc <__ssputs_r+0x46>

0801282c <_svfiprintf_r>:
 801282c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012830:	4698      	mov	r8, r3
 8012832:	898b      	ldrh	r3, [r1, #12]
 8012834:	061b      	lsls	r3, r3, #24
 8012836:	b09d      	sub	sp, #116	; 0x74
 8012838:	4607      	mov	r7, r0
 801283a:	460d      	mov	r5, r1
 801283c:	4614      	mov	r4, r2
 801283e:	d50e      	bpl.n	801285e <_svfiprintf_r+0x32>
 8012840:	690b      	ldr	r3, [r1, #16]
 8012842:	b963      	cbnz	r3, 801285e <_svfiprintf_r+0x32>
 8012844:	2140      	movs	r1, #64	; 0x40
 8012846:	f7fe ff5d 	bl	8011704 <_malloc_r>
 801284a:	6028      	str	r0, [r5, #0]
 801284c:	6128      	str	r0, [r5, #16]
 801284e:	b920      	cbnz	r0, 801285a <_svfiprintf_r+0x2e>
 8012850:	230c      	movs	r3, #12
 8012852:	603b      	str	r3, [r7, #0]
 8012854:	f04f 30ff 	mov.w	r0, #4294967295
 8012858:	e0d1      	b.n	80129fe <_svfiprintf_r+0x1d2>
 801285a:	2340      	movs	r3, #64	; 0x40
 801285c:	616b      	str	r3, [r5, #20]
 801285e:	2300      	movs	r3, #0
 8012860:	9309      	str	r3, [sp, #36]	; 0x24
 8012862:	2320      	movs	r3, #32
 8012864:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012868:	f8cd 800c 	str.w	r8, [sp, #12]
 801286c:	2330      	movs	r3, #48	; 0x30
 801286e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8012a18 <_svfiprintf_r+0x1ec>
 8012872:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012876:	f04f 0901 	mov.w	r9, #1
 801287a:	4623      	mov	r3, r4
 801287c:	469a      	mov	sl, r3
 801287e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012882:	b10a      	cbz	r2, 8012888 <_svfiprintf_r+0x5c>
 8012884:	2a25      	cmp	r2, #37	; 0x25
 8012886:	d1f9      	bne.n	801287c <_svfiprintf_r+0x50>
 8012888:	ebba 0b04 	subs.w	fp, sl, r4
 801288c:	d00b      	beq.n	80128a6 <_svfiprintf_r+0x7a>
 801288e:	465b      	mov	r3, fp
 8012890:	4622      	mov	r2, r4
 8012892:	4629      	mov	r1, r5
 8012894:	4638      	mov	r0, r7
 8012896:	f7ff ff6e 	bl	8012776 <__ssputs_r>
 801289a:	3001      	adds	r0, #1
 801289c:	f000 80aa 	beq.w	80129f4 <_svfiprintf_r+0x1c8>
 80128a0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80128a2:	445a      	add	r2, fp
 80128a4:	9209      	str	r2, [sp, #36]	; 0x24
 80128a6:	f89a 3000 	ldrb.w	r3, [sl]
 80128aa:	2b00      	cmp	r3, #0
 80128ac:	f000 80a2 	beq.w	80129f4 <_svfiprintf_r+0x1c8>
 80128b0:	2300      	movs	r3, #0
 80128b2:	f04f 32ff 	mov.w	r2, #4294967295
 80128b6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80128ba:	f10a 0a01 	add.w	sl, sl, #1
 80128be:	9304      	str	r3, [sp, #16]
 80128c0:	9307      	str	r3, [sp, #28]
 80128c2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80128c6:	931a      	str	r3, [sp, #104]	; 0x68
 80128c8:	4654      	mov	r4, sl
 80128ca:	2205      	movs	r2, #5
 80128cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80128d0:	4851      	ldr	r0, [pc, #324]	; (8012a18 <_svfiprintf_r+0x1ec>)
 80128d2:	f7ed fc85 	bl	80001e0 <memchr>
 80128d6:	9a04      	ldr	r2, [sp, #16]
 80128d8:	b9d8      	cbnz	r0, 8012912 <_svfiprintf_r+0xe6>
 80128da:	06d0      	lsls	r0, r2, #27
 80128dc:	bf44      	itt	mi
 80128de:	2320      	movmi	r3, #32
 80128e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80128e4:	0711      	lsls	r1, r2, #28
 80128e6:	bf44      	itt	mi
 80128e8:	232b      	movmi	r3, #43	; 0x2b
 80128ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80128ee:	f89a 3000 	ldrb.w	r3, [sl]
 80128f2:	2b2a      	cmp	r3, #42	; 0x2a
 80128f4:	d015      	beq.n	8012922 <_svfiprintf_r+0xf6>
 80128f6:	9a07      	ldr	r2, [sp, #28]
 80128f8:	4654      	mov	r4, sl
 80128fa:	2000      	movs	r0, #0
 80128fc:	f04f 0c0a 	mov.w	ip, #10
 8012900:	4621      	mov	r1, r4
 8012902:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012906:	3b30      	subs	r3, #48	; 0x30
 8012908:	2b09      	cmp	r3, #9
 801290a:	d94e      	bls.n	80129aa <_svfiprintf_r+0x17e>
 801290c:	b1b0      	cbz	r0, 801293c <_svfiprintf_r+0x110>
 801290e:	9207      	str	r2, [sp, #28]
 8012910:	e014      	b.n	801293c <_svfiprintf_r+0x110>
 8012912:	eba0 0308 	sub.w	r3, r0, r8
 8012916:	fa09 f303 	lsl.w	r3, r9, r3
 801291a:	4313      	orrs	r3, r2
 801291c:	9304      	str	r3, [sp, #16]
 801291e:	46a2      	mov	sl, r4
 8012920:	e7d2      	b.n	80128c8 <_svfiprintf_r+0x9c>
 8012922:	9b03      	ldr	r3, [sp, #12]
 8012924:	1d19      	adds	r1, r3, #4
 8012926:	681b      	ldr	r3, [r3, #0]
 8012928:	9103      	str	r1, [sp, #12]
 801292a:	2b00      	cmp	r3, #0
 801292c:	bfbb      	ittet	lt
 801292e:	425b      	neglt	r3, r3
 8012930:	f042 0202 	orrlt.w	r2, r2, #2
 8012934:	9307      	strge	r3, [sp, #28]
 8012936:	9307      	strlt	r3, [sp, #28]
 8012938:	bfb8      	it	lt
 801293a:	9204      	strlt	r2, [sp, #16]
 801293c:	7823      	ldrb	r3, [r4, #0]
 801293e:	2b2e      	cmp	r3, #46	; 0x2e
 8012940:	d10c      	bne.n	801295c <_svfiprintf_r+0x130>
 8012942:	7863      	ldrb	r3, [r4, #1]
 8012944:	2b2a      	cmp	r3, #42	; 0x2a
 8012946:	d135      	bne.n	80129b4 <_svfiprintf_r+0x188>
 8012948:	9b03      	ldr	r3, [sp, #12]
 801294a:	1d1a      	adds	r2, r3, #4
 801294c:	681b      	ldr	r3, [r3, #0]
 801294e:	9203      	str	r2, [sp, #12]
 8012950:	2b00      	cmp	r3, #0
 8012952:	bfb8      	it	lt
 8012954:	f04f 33ff 	movlt.w	r3, #4294967295
 8012958:	3402      	adds	r4, #2
 801295a:	9305      	str	r3, [sp, #20]
 801295c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8012a28 <_svfiprintf_r+0x1fc>
 8012960:	7821      	ldrb	r1, [r4, #0]
 8012962:	2203      	movs	r2, #3
 8012964:	4650      	mov	r0, sl
 8012966:	f7ed fc3b 	bl	80001e0 <memchr>
 801296a:	b140      	cbz	r0, 801297e <_svfiprintf_r+0x152>
 801296c:	2340      	movs	r3, #64	; 0x40
 801296e:	eba0 000a 	sub.w	r0, r0, sl
 8012972:	fa03 f000 	lsl.w	r0, r3, r0
 8012976:	9b04      	ldr	r3, [sp, #16]
 8012978:	4303      	orrs	r3, r0
 801297a:	3401      	adds	r4, #1
 801297c:	9304      	str	r3, [sp, #16]
 801297e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012982:	4826      	ldr	r0, [pc, #152]	; (8012a1c <_svfiprintf_r+0x1f0>)
 8012984:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012988:	2206      	movs	r2, #6
 801298a:	f7ed fc29 	bl	80001e0 <memchr>
 801298e:	2800      	cmp	r0, #0
 8012990:	d038      	beq.n	8012a04 <_svfiprintf_r+0x1d8>
 8012992:	4b23      	ldr	r3, [pc, #140]	; (8012a20 <_svfiprintf_r+0x1f4>)
 8012994:	bb1b      	cbnz	r3, 80129de <_svfiprintf_r+0x1b2>
 8012996:	9b03      	ldr	r3, [sp, #12]
 8012998:	3307      	adds	r3, #7
 801299a:	f023 0307 	bic.w	r3, r3, #7
 801299e:	3308      	adds	r3, #8
 80129a0:	9303      	str	r3, [sp, #12]
 80129a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80129a4:	4433      	add	r3, r6
 80129a6:	9309      	str	r3, [sp, #36]	; 0x24
 80129a8:	e767      	b.n	801287a <_svfiprintf_r+0x4e>
 80129aa:	fb0c 3202 	mla	r2, ip, r2, r3
 80129ae:	460c      	mov	r4, r1
 80129b0:	2001      	movs	r0, #1
 80129b2:	e7a5      	b.n	8012900 <_svfiprintf_r+0xd4>
 80129b4:	2300      	movs	r3, #0
 80129b6:	3401      	adds	r4, #1
 80129b8:	9305      	str	r3, [sp, #20]
 80129ba:	4619      	mov	r1, r3
 80129bc:	f04f 0c0a 	mov.w	ip, #10
 80129c0:	4620      	mov	r0, r4
 80129c2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80129c6:	3a30      	subs	r2, #48	; 0x30
 80129c8:	2a09      	cmp	r2, #9
 80129ca:	d903      	bls.n	80129d4 <_svfiprintf_r+0x1a8>
 80129cc:	2b00      	cmp	r3, #0
 80129ce:	d0c5      	beq.n	801295c <_svfiprintf_r+0x130>
 80129d0:	9105      	str	r1, [sp, #20]
 80129d2:	e7c3      	b.n	801295c <_svfiprintf_r+0x130>
 80129d4:	fb0c 2101 	mla	r1, ip, r1, r2
 80129d8:	4604      	mov	r4, r0
 80129da:	2301      	movs	r3, #1
 80129dc:	e7f0      	b.n	80129c0 <_svfiprintf_r+0x194>
 80129de:	ab03      	add	r3, sp, #12
 80129e0:	9300      	str	r3, [sp, #0]
 80129e2:	462a      	mov	r2, r5
 80129e4:	4b0f      	ldr	r3, [pc, #60]	; (8012a24 <_svfiprintf_r+0x1f8>)
 80129e6:	a904      	add	r1, sp, #16
 80129e8:	4638      	mov	r0, r7
 80129ea:	f3af 8000 	nop.w
 80129ee:	1c42      	adds	r2, r0, #1
 80129f0:	4606      	mov	r6, r0
 80129f2:	d1d6      	bne.n	80129a2 <_svfiprintf_r+0x176>
 80129f4:	89ab      	ldrh	r3, [r5, #12]
 80129f6:	065b      	lsls	r3, r3, #25
 80129f8:	f53f af2c 	bmi.w	8012854 <_svfiprintf_r+0x28>
 80129fc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80129fe:	b01d      	add	sp, #116	; 0x74
 8012a00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012a04:	ab03      	add	r3, sp, #12
 8012a06:	9300      	str	r3, [sp, #0]
 8012a08:	462a      	mov	r2, r5
 8012a0a:	4b06      	ldr	r3, [pc, #24]	; (8012a24 <_svfiprintf_r+0x1f8>)
 8012a0c:	a904      	add	r1, sp, #16
 8012a0e:	4638      	mov	r0, r7
 8012a10:	f7ff f8b4 	bl	8011b7c <_printf_i>
 8012a14:	e7eb      	b.n	80129ee <_svfiprintf_r+0x1c2>
 8012a16:	bf00      	nop
 8012a18:	08014780 	.word	0x08014780
 8012a1c:	0801478a 	.word	0x0801478a
 8012a20:	00000000 	.word	0x00000000
 8012a24:	08012777 	.word	0x08012777
 8012a28:	08014786 	.word	0x08014786

08012a2c <_read_r>:
 8012a2c:	b538      	push	{r3, r4, r5, lr}
 8012a2e:	4d07      	ldr	r5, [pc, #28]	; (8012a4c <_read_r+0x20>)
 8012a30:	4604      	mov	r4, r0
 8012a32:	4608      	mov	r0, r1
 8012a34:	4611      	mov	r1, r2
 8012a36:	2200      	movs	r2, #0
 8012a38:	602a      	str	r2, [r5, #0]
 8012a3a:	461a      	mov	r2, r3
 8012a3c:	f7ef fdc6 	bl	80025cc <_read>
 8012a40:	1c43      	adds	r3, r0, #1
 8012a42:	d102      	bne.n	8012a4a <_read_r+0x1e>
 8012a44:	682b      	ldr	r3, [r5, #0]
 8012a46:	b103      	cbz	r3, 8012a4a <_read_r+0x1e>
 8012a48:	6023      	str	r3, [r4, #0]
 8012a4a:	bd38      	pop	{r3, r4, r5, pc}
 8012a4c:	20004b34 	.word	0x20004b34

08012a50 <_raise_r>:
 8012a50:	291f      	cmp	r1, #31
 8012a52:	b538      	push	{r3, r4, r5, lr}
 8012a54:	4604      	mov	r4, r0
 8012a56:	460d      	mov	r5, r1
 8012a58:	d904      	bls.n	8012a64 <_raise_r+0x14>
 8012a5a:	2316      	movs	r3, #22
 8012a5c:	6003      	str	r3, [r0, #0]
 8012a5e:	f04f 30ff 	mov.w	r0, #4294967295
 8012a62:	bd38      	pop	{r3, r4, r5, pc}
 8012a64:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8012a66:	b112      	cbz	r2, 8012a6e <_raise_r+0x1e>
 8012a68:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8012a6c:	b94b      	cbnz	r3, 8012a82 <_raise_r+0x32>
 8012a6e:	4620      	mov	r0, r4
 8012a70:	f000 f830 	bl	8012ad4 <_getpid_r>
 8012a74:	462a      	mov	r2, r5
 8012a76:	4601      	mov	r1, r0
 8012a78:	4620      	mov	r0, r4
 8012a7a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012a7e:	f000 b817 	b.w	8012ab0 <_kill_r>
 8012a82:	2b01      	cmp	r3, #1
 8012a84:	d00a      	beq.n	8012a9c <_raise_r+0x4c>
 8012a86:	1c59      	adds	r1, r3, #1
 8012a88:	d103      	bne.n	8012a92 <_raise_r+0x42>
 8012a8a:	2316      	movs	r3, #22
 8012a8c:	6003      	str	r3, [r0, #0]
 8012a8e:	2001      	movs	r0, #1
 8012a90:	e7e7      	b.n	8012a62 <_raise_r+0x12>
 8012a92:	2400      	movs	r4, #0
 8012a94:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8012a98:	4628      	mov	r0, r5
 8012a9a:	4798      	blx	r3
 8012a9c:	2000      	movs	r0, #0
 8012a9e:	e7e0      	b.n	8012a62 <_raise_r+0x12>

08012aa0 <raise>:
 8012aa0:	4b02      	ldr	r3, [pc, #8]	; (8012aac <raise+0xc>)
 8012aa2:	4601      	mov	r1, r0
 8012aa4:	6818      	ldr	r0, [r3, #0]
 8012aa6:	f7ff bfd3 	b.w	8012a50 <_raise_r>
 8012aaa:	bf00      	nop
 8012aac:	20000050 	.word	0x20000050

08012ab0 <_kill_r>:
 8012ab0:	b538      	push	{r3, r4, r5, lr}
 8012ab2:	4d07      	ldr	r5, [pc, #28]	; (8012ad0 <_kill_r+0x20>)
 8012ab4:	2300      	movs	r3, #0
 8012ab6:	4604      	mov	r4, r0
 8012ab8:	4608      	mov	r0, r1
 8012aba:	4611      	mov	r1, r2
 8012abc:	602b      	str	r3, [r5, #0]
 8012abe:	f7ef fd6b 	bl	8002598 <_kill>
 8012ac2:	1c43      	adds	r3, r0, #1
 8012ac4:	d102      	bne.n	8012acc <_kill_r+0x1c>
 8012ac6:	682b      	ldr	r3, [r5, #0]
 8012ac8:	b103      	cbz	r3, 8012acc <_kill_r+0x1c>
 8012aca:	6023      	str	r3, [r4, #0]
 8012acc:	bd38      	pop	{r3, r4, r5, pc}
 8012ace:	bf00      	nop
 8012ad0:	20004b34 	.word	0x20004b34

08012ad4 <_getpid_r>:
 8012ad4:	f7ef bd58 	b.w	8002588 <_getpid>

08012ad8 <_fstat_r>:
 8012ad8:	b538      	push	{r3, r4, r5, lr}
 8012ada:	4d07      	ldr	r5, [pc, #28]	; (8012af8 <_fstat_r+0x20>)
 8012adc:	2300      	movs	r3, #0
 8012ade:	4604      	mov	r4, r0
 8012ae0:	4608      	mov	r0, r1
 8012ae2:	4611      	mov	r1, r2
 8012ae4:	602b      	str	r3, [r5, #0]
 8012ae6:	f7ef fd9a 	bl	800261e <_fstat>
 8012aea:	1c43      	adds	r3, r0, #1
 8012aec:	d102      	bne.n	8012af4 <_fstat_r+0x1c>
 8012aee:	682b      	ldr	r3, [r5, #0]
 8012af0:	b103      	cbz	r3, 8012af4 <_fstat_r+0x1c>
 8012af2:	6023      	str	r3, [r4, #0]
 8012af4:	bd38      	pop	{r3, r4, r5, pc}
 8012af6:	bf00      	nop
 8012af8:	20004b34 	.word	0x20004b34

08012afc <_isatty_r>:
 8012afc:	b538      	push	{r3, r4, r5, lr}
 8012afe:	4d06      	ldr	r5, [pc, #24]	; (8012b18 <_isatty_r+0x1c>)
 8012b00:	2300      	movs	r3, #0
 8012b02:	4604      	mov	r4, r0
 8012b04:	4608      	mov	r0, r1
 8012b06:	602b      	str	r3, [r5, #0]
 8012b08:	f7ef fd99 	bl	800263e <_isatty>
 8012b0c:	1c43      	adds	r3, r0, #1
 8012b0e:	d102      	bne.n	8012b16 <_isatty_r+0x1a>
 8012b10:	682b      	ldr	r3, [r5, #0]
 8012b12:	b103      	cbz	r3, 8012b16 <_isatty_r+0x1a>
 8012b14:	6023      	str	r3, [r4, #0]
 8012b16:	bd38      	pop	{r3, r4, r5, pc}
 8012b18:	20004b34 	.word	0x20004b34

08012b1c <_malloc_usable_size_r>:
 8012b1c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012b20:	1f18      	subs	r0, r3, #4
 8012b22:	2b00      	cmp	r3, #0
 8012b24:	bfbc      	itt	lt
 8012b26:	580b      	ldrlt	r3, [r1, r0]
 8012b28:	18c0      	addlt	r0, r0, r3
 8012b2a:	4770      	bx	lr

08012b2c <_init>:
 8012b2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012b2e:	bf00      	nop
 8012b30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012b32:	bc08      	pop	{r3}
 8012b34:	469e      	mov	lr, r3
 8012b36:	4770      	bx	lr

08012b38 <_fini>:
 8012b38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012b3a:	bf00      	nop
 8012b3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012b3e:	bc08      	pop	{r3}
 8012b40:	469e      	mov	lr, r3
 8012b42:	4770      	bx	lr
