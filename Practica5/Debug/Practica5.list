
Practica5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013b64  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001de0  08013cf4  08013cf4  00023cf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08015ad4  08015ad4  000300b8  2**0
                  CONTENTS
  4 .ARM          00000008  08015ad4  08015ad4  00025ad4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08015adc  08015adc  000300b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08015adc  08015adc  00025adc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08015ae0  08015ae0  00025ae0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b8  20000000  08015ae4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004a88  200000b8  08015b9c  000300b8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004b40  08015b9c  00034b40  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000300b8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000395ae  00000000  00000000  000300e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006dd9  00000000  00000000  00069696  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002fb8  00000000  00000000  00070470  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002d20  00000000  00000000  00073428  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000098e0  00000000  00000000  00076148  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00034876  00000000  00000000  0007fa28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00117c9f  00000000  00000000  000b429e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001cbf3d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000d950  00000000  00000000  001cbf90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000b8 	.word	0x200000b8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08013cdc 	.word	0x08013cdc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000bc 	.word	0x200000bc
 80001cc:	08013cdc 	.word	0x08013cdc

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000584:	b480      	push	{r7}
 8000586:	b083      	sub	sp, #12
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800058c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000590:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000594:	f003 0301 	and.w	r3, r3, #1
 8000598:	2b00      	cmp	r3, #0
 800059a:	d013      	beq.n	80005c4 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 800059c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005a0:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80005a4:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d00b      	beq.n	80005c4 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80005ac:	e000      	b.n	80005b0 <ITM_SendChar+0x2c>
    {
      __NOP();
 80005ae:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80005b0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d0f9      	beq.n	80005ae <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80005ba:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005be:	687a      	ldr	r2, [r7, #4]
 80005c0:	b2d2      	uxtb	r2, r2
 80005c2:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80005c4:	687b      	ldr	r3, [r7, #4]
}
 80005c6:	4618      	mov	r0, r3
 80005c8:	370c      	adds	r7, #12
 80005ca:	46bd      	mov	sp, r7
 80005cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d0:	4770      	bx	lr
	...

080005d4 <configureTimerForRunTimeStats>:
void sendMQTT_func(void *argument);
void wifiStartTask_func(void *argument);

/* USER CODE BEGIN PFP */
volatile unsigned long ulHighFrequencyTimerTicks;
void configureTimerForRunTimeStats(void) {
 80005d4:	b580      	push	{r7, lr}
 80005d6:	af00      	add	r7, sp, #0
	ulHighFrequencyTimerTicks = 0;
 80005d8:	4b03      	ldr	r3, [pc, #12]	; (80005e8 <configureTimerForRunTimeStats+0x14>)
 80005da:	2200      	movs	r2, #0
 80005dc:	601a      	str	r2, [r3, #0]
	HAL_TIM_Base_Start_IT(&htim7);
 80005de:	4803      	ldr	r0, [pc, #12]	; (80005ec <configureTimerForRunTimeStats+0x18>)
 80005e0:	f007 f8a4 	bl	800772c <HAL_TIM_Base_Start_IT>
}
 80005e4:	bf00      	nop
 80005e6:	bd80      	pop	{r7, pc}
 80005e8:	200007c4 	.word	0x200007c4
 80005ec:	20000224 	.word	0x20000224

080005f0 <getRunTimeCounterValue>:
unsigned long getRunTimeCounterValue(void) {
 80005f0:	b480      	push	{r7}
 80005f2:	af00      	add	r7, sp, #0
	return ulHighFrequencyTimerTicks;
 80005f4:	4b03      	ldr	r3, [pc, #12]	; (8000604 <getRunTimeCounterValue+0x14>)
 80005f6:	681b      	ldr	r3, [r3, #0]

}
 80005f8:	4618      	mov	r0, r3
 80005fa:	46bd      	mov	sp, r7
 80005fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000600:	4770      	bx	lr
 8000602:	bf00      	nop
 8000604:	200007c4 	.word	0x200007c4

08000608 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800060c:	f002 f8f9 	bl	8002802 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000610:	f000 f8ae 	bl	8000770 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000614:	f000 fb0a 	bl	8000c2c <MX_GPIO_Init>
  MX_DFSDM1_Init();
 8000618:	f000 f90e 	bl	8000838 <MX_DFSDM1_Init>
  MX_I2C2_Init();
 800061c:	f000 f944 	bl	80008a8 <MX_I2C2_Init>
  MX_QUADSPI_Init();
 8000620:	f000 f980 	bl	8000924 <MX_QUADSPI_Init>
  MX_SPI3_Init();
 8000624:	f000 fa00 	bl	8000a28 <MX_SPI3_Init>
  MX_USART1_UART_Init();
 8000628:	f000 fa72 	bl	8000b10 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 800062c:	f000 faa0 	bl	8000b70 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000630:	f000 face 	bl	8000bd0 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM7_Init();
 8000634:	f000 fa36 	bl	8000aa4 <MX_TIM7_Init>
  MX_RTC_Init();
 8000638:	f000 f99a 	bl	8000970 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  status_acc = BSP_ACCELERO_Init_INT();
 800063c:	f000 fcb4 	bl	8000fa8 <BSP_ACCELERO_Init_INT>
 8000640:	4603      	mov	r3, r0
 8000642:	461a      	mov	r2, r3
 8000644:	4b2d      	ldr	r3, [pc, #180]	; (80006fc <main+0xf4>)
 8000646:	701a      	strb	r2, [r3, #0]
  if (status_acc == ACCELERO_OK){
 8000648:	4b2c      	ldr	r3, [pc, #176]	; (80006fc <main+0xf4>)
 800064a:	781b      	ldrb	r3, [r3, #0]
 800064c:	2b00      	cmp	r3, #0
 800064e:	d102      	bne.n	8000656 <main+0x4e>
	  printf("Acelerometro inicializado\r\n");
 8000650:	482b      	ldr	r0, [pc, #172]	; (8000700 <main+0xf8>)
 8000652:	f012 fd17 	bl	8013084 <puts>
  }

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000656:	f00e fb9b 	bl	800ed90 <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of print_queue */
  print_queueHandle = osMessageQueueNew (10, sizeof(uintptr_t), &print_queue_attributes);
 800065a:	4a2a      	ldr	r2, [pc, #168]	; (8000704 <main+0xfc>)
 800065c:	2104      	movs	r1, #4
 800065e:	200a      	movs	r0, #10
 8000660:	f00e fd8a 	bl	800f178 <osMessageQueueNew>
 8000664:	4603      	mov	r3, r0
 8000666:	4a28      	ldr	r2, [pc, #160]	; (8000708 <main+0x100>)
 8000668:	6013      	str	r3, [r2, #0]

  /* creation of receive_queue */
  receive_queueHandle = osMessageQueueNew (3, sizeof(uint8_t), &receive_queue_attributes);
 800066a:	4a28      	ldr	r2, [pc, #160]	; (800070c <main+0x104>)
 800066c:	2101      	movs	r1, #1
 800066e:	2003      	movs	r0, #3
 8000670:	f00e fd82 	bl	800f178 <osMessageQueueNew>
 8000674:	4603      	mov	r3, r0
 8000676:	4a26      	ldr	r2, [pc, #152]	; (8000710 <main+0x108>)
 8000678:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of RTC_set */
  RTC_setHandle = osThreadNew(RTC_set_func, NULL, &RTC_set_attributes);
 800067a:	4a26      	ldr	r2, [pc, #152]	; (8000714 <main+0x10c>)
 800067c:	2100      	movs	r1, #0
 800067e:	4826      	ldr	r0, [pc, #152]	; (8000718 <main+0x110>)
 8000680:	f00e fbd0 	bl	800ee24 <osThreadNew>
 8000684:	4603      	mov	r3, r0
 8000686:	4a25      	ldr	r2, [pc, #148]	; (800071c <main+0x114>)
 8000688:	6013      	str	r3, [r2, #0]

  /* creation of readAccel */
  readAccelHandle = osThreadNew(readAccel_func, NULL, &readAccel_attributes);
 800068a:	4a25      	ldr	r2, [pc, #148]	; (8000720 <main+0x118>)
 800068c:	2100      	movs	r1, #0
 800068e:	4825      	ldr	r0, [pc, #148]	; (8000724 <main+0x11c>)
 8000690:	f00e fbc8 	bl	800ee24 <osThreadNew>
 8000694:	4603      	mov	r3, r0
 8000696:	4a24      	ldr	r2, [pc, #144]	; (8000728 <main+0x120>)
 8000698:	6013      	str	r3, [r2, #0]

  /* creation of printTask */
  printTaskHandle = osThreadNew(printTask_func, NULL, &printTask_attributes);
 800069a:	4a24      	ldr	r2, [pc, #144]	; (800072c <main+0x124>)
 800069c:	2100      	movs	r1, #0
 800069e:	4824      	ldr	r0, [pc, #144]	; (8000730 <main+0x128>)
 80006a0:	f00e fbc0 	bl	800ee24 <osThreadNew>
 80006a4:	4603      	mov	r3, r0
 80006a6:	4a23      	ldr	r2, [pc, #140]	; (8000734 <main+0x12c>)
 80006a8:	6013      	str	r3, [r2, #0]

  /* creation of tarea_UART */
  tarea_UARTHandle = osThreadNew(tarea_UART_func, NULL, &tarea_UART_attributes);
 80006aa:	4a23      	ldr	r2, [pc, #140]	; (8000738 <main+0x130>)
 80006ac:	2100      	movs	r1, #0
 80006ae:	4823      	ldr	r0, [pc, #140]	; (800073c <main+0x134>)
 80006b0:	f00e fbb8 	bl	800ee24 <osThreadNew>
 80006b4:	4603      	mov	r3, r0
 80006b6:	4a22      	ldr	r2, [pc, #136]	; (8000740 <main+0x138>)
 80006b8:	6013      	str	r3, [r2, #0]

  /* creation of temporizador */
  temporizadorHandle = osThreadNew(temporizador_func, NULL, &temporizador_attributes);
 80006ba:	4a22      	ldr	r2, [pc, #136]	; (8000744 <main+0x13c>)
 80006bc:	2100      	movs	r1, #0
 80006be:	4822      	ldr	r0, [pc, #136]	; (8000748 <main+0x140>)
 80006c0:	f00e fbb0 	bl	800ee24 <osThreadNew>
 80006c4:	4603      	mov	r3, r0
 80006c6:	4a21      	ldr	r2, [pc, #132]	; (800074c <main+0x144>)
 80006c8:	6013      	str	r3, [r2, #0]

  /* creation of sendMQTT */
  sendMQTTHandle = osThreadNew(sendMQTT_func, NULL, &sendMQTT_attributes);
 80006ca:	4a21      	ldr	r2, [pc, #132]	; (8000750 <main+0x148>)
 80006cc:	2100      	movs	r1, #0
 80006ce:	4821      	ldr	r0, [pc, #132]	; (8000754 <main+0x14c>)
 80006d0:	f00e fba8 	bl	800ee24 <osThreadNew>
 80006d4:	4603      	mov	r3, r0
 80006d6:	4a20      	ldr	r2, [pc, #128]	; (8000758 <main+0x150>)
 80006d8:	6013      	str	r3, [r2, #0]

  /* creation of wifiStartTask */
  wifiStartTaskHandle = osThreadNew(wifiStartTask_func, NULL, &wifiStartTask_attributes);
 80006da:	4a20      	ldr	r2, [pc, #128]	; (800075c <main+0x154>)
 80006dc:	2100      	movs	r1, #0
 80006de:	4820      	ldr	r0, [pc, #128]	; (8000760 <main+0x158>)
 80006e0:	f00e fba0 	bl	800ee24 <osThreadNew>
 80006e4:	4603      	mov	r3, r0
 80006e6:	4a1f      	ldr	r2, [pc, #124]	; (8000764 <main+0x15c>)
 80006e8:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  HAL_UART_Receive_IT(&huart1,&rec_data,1);
 80006ea:	2201      	movs	r2, #1
 80006ec:	491e      	ldr	r1, [pc, #120]	; (8000768 <main+0x160>)
 80006ee:	481f      	ldr	r0, [pc, #124]	; (800076c <main+0x164>)
 80006f0:	f007 fbf6 	bl	8007ee0 <HAL_UART_Receive_IT>
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80006f4:	f00e fb70 	bl	800edd8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006f8:	e7fe      	b.n	80006f8 <main+0xf0>
 80006fa:	bf00      	nop
 80006fc:	200007bc 	.word	0x200007bc
 8000700:	08013dd0 	.word	0x08013dd0
 8000704:	08015638 	.word	0x08015638
 8000708:	2000079c 	.word	0x2000079c
 800070c:	08015650 	.word	0x08015650
 8000710:	200007a0 	.word	0x200007a0
 8000714:	0801553c 	.word	0x0801553c
 8000718:	08001209 	.word	0x08001209
 800071c:	20000780 	.word	0x20000780
 8000720:	08015560 	.word	0x08015560
 8000724:	08001521 	.word	0x08001521
 8000728:	20000784 	.word	0x20000784
 800072c:	08015584 	.word	0x08015584
 8000730:	080016fd 	.word	0x080016fd
 8000734:	20000788 	.word	0x20000788
 8000738:	080155a8 	.word	0x080155a8
 800073c:	08001765 	.word	0x08001765
 8000740:	2000078c 	.word	0x2000078c
 8000744:	080155cc 	.word	0x080155cc
 8000748:	080017b5 	.word	0x080017b5
 800074c:	20000790 	.word	0x20000790
 8000750:	080155f0 	.word	0x080155f0
 8000754:	080017f1 	.word	0x080017f1
 8000758:	20000794 	.word	0x20000794
 800075c:	08015614 	.word	0x08015614
 8000760:	08001975 	.word	0x08001975
 8000764:	20000798 	.word	0x20000798
 8000768:	200007c8 	.word	0x200007c8
 800076c:	20000270 	.word	0x20000270

08000770 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b096      	sub	sp, #88	; 0x58
 8000774:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000776:	f107 0314 	add.w	r3, r7, #20
 800077a:	2244      	movs	r2, #68	; 0x44
 800077c:	2100      	movs	r1, #0
 800077e:	4618      	mov	r0, r3
 8000780:	f012 f86f 	bl	8012862 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000784:	463b      	mov	r3, r7
 8000786:	2200      	movs	r2, #0
 8000788:	601a      	str	r2, [r3, #0]
 800078a:	605a      	str	r2, [r3, #4]
 800078c:	609a      	str	r2, [r3, #8]
 800078e:	60da      	str	r2, [r3, #12]
 8000790:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000792:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000796:	f003 fd1d 	bl	80041d4 <HAL_PWREx_ControlVoltageScaling>
 800079a:	4603      	mov	r3, r0
 800079c:	2b00      	cmp	r3, #0
 800079e:	d001      	beq.n	80007a4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80007a0:	f001 f912 	bl	80019c8 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80007a4:	f003 fcf8 	bl	8004198 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80007a8:	4b22      	ldr	r3, [pc, #136]	; (8000834 <SystemClock_Config+0xc4>)
 80007aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80007ae:	4a21      	ldr	r2, [pc, #132]	; (8000834 <SystemClock_Config+0xc4>)
 80007b0:	f023 0318 	bic.w	r3, r3, #24
 80007b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_LSE
 80007b8:	231c      	movs	r3, #28
 80007ba:	617b      	str	r3, [r7, #20]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80007bc:	2301      	movs	r3, #1
 80007be:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80007c0:	2301      	movs	r3, #1
 80007c2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80007c4:	2301      	movs	r3, #1
 80007c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80007c8:	2300      	movs	r3, #0
 80007ca:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80007cc:	2360      	movs	r3, #96	; 0x60
 80007ce:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007d0:	2302      	movs	r3, #2
 80007d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80007d4:	2301      	movs	r3, #1
 80007d6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80007d8:	2301      	movs	r3, #1
 80007da:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 80007dc:	2328      	movs	r3, #40	; 0x28
 80007de:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80007e0:	2307      	movs	r3, #7
 80007e2:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80007e4:	2302      	movs	r3, #2
 80007e6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80007e8:	2302      	movs	r3, #2
 80007ea:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007ec:	f107 0314 	add.w	r3, r7, #20
 80007f0:	4618      	mov	r0, r3
 80007f2:	f003 fe11 	bl	8004418 <HAL_RCC_OscConfig>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d001      	beq.n	8000800 <SystemClock_Config+0x90>
  {
    Error_Handler();
 80007fc:	f001 f8e4 	bl	80019c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000800:	230f      	movs	r3, #15
 8000802:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000804:	2303      	movs	r3, #3
 8000806:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000808:	2300      	movs	r3, #0
 800080a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800080c:	2300      	movs	r3, #0
 800080e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000810:	2300      	movs	r3, #0
 8000812:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000814:	463b      	mov	r3, r7
 8000816:	2104      	movs	r1, #4
 8000818:	4618      	mov	r0, r3
 800081a:	f004 f9e5 	bl	8004be8 <HAL_RCC_ClockConfig>
 800081e:	4603      	mov	r3, r0
 8000820:	2b00      	cmp	r3, #0
 8000822:	d001      	beq.n	8000828 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8000824:	f001 f8d0 	bl	80019c8 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000828:	f004 ff00 	bl	800562c <HAL_RCCEx_EnableMSIPLLMode>
}
 800082c:	bf00      	nop
 800082e:	3758      	adds	r7, #88	; 0x58
 8000830:	46bd      	mov	sp, r7
 8000832:	bd80      	pop	{r7, pc}
 8000834:	40021000 	.word	0x40021000

08000838 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 800083c:	4b18      	ldr	r3, [pc, #96]	; (80008a0 <MX_DFSDM1_Init+0x68>)
 800083e:	4a19      	ldr	r2, [pc, #100]	; (80008a4 <MX_DFSDM1_Init+0x6c>)
 8000840:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 8000842:	4b17      	ldr	r3, [pc, #92]	; (80008a0 <MX_DFSDM1_Init+0x68>)
 8000844:	2201      	movs	r2, #1
 8000846:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8000848:	4b15      	ldr	r3, [pc, #84]	; (80008a0 <MX_DFSDM1_Init+0x68>)
 800084a:	2200      	movs	r2, #0
 800084c:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 800084e:	4b14      	ldr	r3, [pc, #80]	; (80008a0 <MX_DFSDM1_Init+0x68>)
 8000850:	2202      	movs	r2, #2
 8000852:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000854:	4b12      	ldr	r3, [pc, #72]	; (80008a0 <MX_DFSDM1_Init+0x68>)
 8000856:	2200      	movs	r2, #0
 8000858:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 800085a:	4b11      	ldr	r3, [pc, #68]	; (80008a0 <MX_DFSDM1_Init+0x68>)
 800085c:	2200      	movs	r2, #0
 800085e:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 8000860:	4b0f      	ldr	r3, [pc, #60]	; (80008a0 <MX_DFSDM1_Init+0x68>)
 8000862:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000866:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8000868:	4b0d      	ldr	r3, [pc, #52]	; (80008a0 <MX_DFSDM1_Init+0x68>)
 800086a:	2200      	movs	r2, #0
 800086c:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 800086e:	4b0c      	ldr	r3, [pc, #48]	; (80008a0 <MX_DFSDM1_Init+0x68>)
 8000870:	2204      	movs	r2, #4
 8000872:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000874:	4b0a      	ldr	r3, [pc, #40]	; (80008a0 <MX_DFSDM1_Init+0x68>)
 8000876:	2200      	movs	r2, #0
 8000878:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 800087a:	4b09      	ldr	r3, [pc, #36]	; (80008a0 <MX_DFSDM1_Init+0x68>)
 800087c:	2201      	movs	r2, #1
 800087e:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 8000880:	4b07      	ldr	r3, [pc, #28]	; (80008a0 <MX_DFSDM1_Init+0x68>)
 8000882:	2200      	movs	r2, #0
 8000884:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 8000886:	4b06      	ldr	r3, [pc, #24]	; (80008a0 <MX_DFSDM1_Init+0x68>)
 8000888:	2200      	movs	r2, #0
 800088a:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 800088c:	4804      	ldr	r0, [pc, #16]	; (80008a0 <MX_DFSDM1_Init+0x68>)
 800088e:	f002 f929 	bl	8002ae4 <HAL_DFSDM_ChannelInit>
 8000892:	4603      	mov	r3, r0
 8000894:	2b00      	cmp	r3, #0
 8000896:	d001      	beq.n	800089c <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 8000898:	f001 f896 	bl	80019c8 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 800089c:	bf00      	nop
 800089e:	bd80      	pop	{r7, pc}
 80008a0:	200000d4 	.word	0x200000d4
 80008a4:	40016020 	.word	0x40016020

080008a8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80008ac:	4b1b      	ldr	r3, [pc, #108]	; (800091c <MX_I2C2_Init+0x74>)
 80008ae:	4a1c      	ldr	r2, [pc, #112]	; (8000920 <MX_I2C2_Init+0x78>)
 80008b0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00000E14;
 80008b2:	4b1a      	ldr	r3, [pc, #104]	; (800091c <MX_I2C2_Init+0x74>)
 80008b4:	f640 6214 	movw	r2, #3604	; 0xe14
 80008b8:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80008ba:	4b18      	ldr	r3, [pc, #96]	; (800091c <MX_I2C2_Init+0x74>)
 80008bc:	2200      	movs	r2, #0
 80008be:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008c0:	4b16      	ldr	r3, [pc, #88]	; (800091c <MX_I2C2_Init+0x74>)
 80008c2:	2201      	movs	r2, #1
 80008c4:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008c6:	4b15      	ldr	r3, [pc, #84]	; (800091c <MX_I2C2_Init+0x74>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80008cc:	4b13      	ldr	r3, [pc, #76]	; (800091c <MX_I2C2_Init+0x74>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80008d2:	4b12      	ldr	r3, [pc, #72]	; (800091c <MX_I2C2_Init+0x74>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008d8:	4b10      	ldr	r3, [pc, #64]	; (800091c <MX_I2C2_Init+0x74>)
 80008da:	2200      	movs	r2, #0
 80008dc:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008de:	4b0f      	ldr	r3, [pc, #60]	; (800091c <MX_I2C2_Init+0x74>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80008e4:	480d      	ldr	r0, [pc, #52]	; (800091c <MX_I2C2_Init+0x74>)
 80008e6:	f002 fd6f 	bl	80033c8 <HAL_I2C_Init>
 80008ea:	4603      	mov	r3, r0
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d001      	beq.n	80008f4 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80008f0:	f001 f86a 	bl	80019c8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80008f4:	2100      	movs	r1, #0
 80008f6:	4809      	ldr	r0, [pc, #36]	; (800091c <MX_I2C2_Init+0x74>)
 80008f8:	f003 fa6e 	bl	8003dd8 <HAL_I2CEx_ConfigAnalogFilter>
 80008fc:	4603      	mov	r3, r0
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d001      	beq.n	8000906 <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 8000902:	f001 f861 	bl	80019c8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000906:	2100      	movs	r1, #0
 8000908:	4804      	ldr	r0, [pc, #16]	; (800091c <MX_I2C2_Init+0x74>)
 800090a:	f003 fab0 	bl	8003e6e <HAL_I2CEx_ConfigDigitalFilter>
 800090e:	4603      	mov	r3, r0
 8000910:	2b00      	cmp	r3, #0
 8000912:	d001      	beq.n	8000918 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8000914:	f001 f858 	bl	80019c8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000918:	bf00      	nop
 800091a:	bd80      	pop	{r7, pc}
 800091c:	2000010c 	.word	0x2000010c
 8000920:	40005800 	.word	0x40005800

08000924 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8000928:	4b0f      	ldr	r3, [pc, #60]	; (8000968 <MX_QUADSPI_Init+0x44>)
 800092a:	4a10      	ldr	r2, [pc, #64]	; (800096c <MX_QUADSPI_Init+0x48>)
 800092c:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 2;
 800092e:	4b0e      	ldr	r3, [pc, #56]	; (8000968 <MX_QUADSPI_Init+0x44>)
 8000930:	2202      	movs	r2, #2
 8000932:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8000934:	4b0c      	ldr	r3, [pc, #48]	; (8000968 <MX_QUADSPI_Init+0x44>)
 8000936:	2204      	movs	r2, #4
 8000938:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 800093a:	4b0b      	ldr	r3, [pc, #44]	; (8000968 <MX_QUADSPI_Init+0x44>)
 800093c:	2210      	movs	r2, #16
 800093e:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 8000940:	4b09      	ldr	r3, [pc, #36]	; (8000968 <MX_QUADSPI_Init+0x44>)
 8000942:	2217      	movs	r2, #23
 8000944:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8000946:	4b08      	ldr	r3, [pc, #32]	; (8000968 <MX_QUADSPI_Init+0x44>)
 8000948:	2200      	movs	r2, #0
 800094a:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 800094c:	4b06      	ldr	r3, [pc, #24]	; (8000968 <MX_QUADSPI_Init+0x44>)
 800094e:	2200      	movs	r2, #0
 8000950:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000952:	4805      	ldr	r0, [pc, #20]	; (8000968 <MX_QUADSPI_Init+0x44>)
 8000954:	f003 fca4 	bl	80042a0 <HAL_QSPI_Init>
 8000958:	4603      	mov	r3, r0
 800095a:	2b00      	cmp	r3, #0
 800095c:	d001      	beq.n	8000962 <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 800095e:	f001 f833 	bl	80019c8 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8000962:	bf00      	nop
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	20000158 	.word	0x20000158
 800096c:	a0001000 	.word	0xa0001000

08000970 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b086      	sub	sp, #24
 8000974:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000976:	1d3b      	adds	r3, r7, #4
 8000978:	2200      	movs	r2, #0
 800097a:	601a      	str	r2, [r3, #0]
 800097c:	605a      	str	r2, [r3, #4]
 800097e:	609a      	str	r2, [r3, #8]
 8000980:	60da      	str	r2, [r3, #12]
 8000982:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000984:	2300      	movs	r3, #0
 8000986:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000988:	4b25      	ldr	r3, [pc, #148]	; (8000a20 <MX_RTC_Init+0xb0>)
 800098a:	4a26      	ldr	r2, [pc, #152]	; (8000a24 <MX_RTC_Init+0xb4>)
 800098c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800098e:	4b24      	ldr	r3, [pc, #144]	; (8000a20 <MX_RTC_Init+0xb0>)
 8000990:	2200      	movs	r2, #0
 8000992:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000994:	4b22      	ldr	r3, [pc, #136]	; (8000a20 <MX_RTC_Init+0xb0>)
 8000996:	227f      	movs	r2, #127	; 0x7f
 8000998:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800099a:	4b21      	ldr	r3, [pc, #132]	; (8000a20 <MX_RTC_Init+0xb0>)
 800099c:	22ff      	movs	r2, #255	; 0xff
 800099e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80009a0:	4b1f      	ldr	r3, [pc, #124]	; (8000a20 <MX_RTC_Init+0xb0>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80009a6:	4b1e      	ldr	r3, [pc, #120]	; (8000a20 <MX_RTC_Init+0xb0>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80009ac:	4b1c      	ldr	r3, [pc, #112]	; (8000a20 <MX_RTC_Init+0xb0>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80009b2:	4b1b      	ldr	r3, [pc, #108]	; (8000a20 <MX_RTC_Init+0xb0>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80009b8:	4819      	ldr	r0, [pc, #100]	; (8000a20 <MX_RTC_Init+0xb0>)
 80009ba:	f005 f819 	bl	80059f0 <HAL_RTC_Init>
 80009be:	4603      	mov	r3, r0
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d001      	beq.n	80009c8 <MX_RTC_Init+0x58>
  {
    Error_Handler();
 80009c4:	f001 f800 	bl	80019c8 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 13;
 80009c8:	230d      	movs	r3, #13
 80009ca:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 1;
 80009cc:	2301      	movs	r3, #1
 80009ce:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0;
 80009d0:	2300      	movs	r3, #0
 80009d2:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80009d4:	2300      	movs	r3, #0
 80009d6:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80009d8:	2300      	movs	r3, #0
 80009da:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 80009dc:	1d3b      	adds	r3, r7, #4
 80009de:	2200      	movs	r2, #0
 80009e0:	4619      	mov	r1, r3
 80009e2:	480f      	ldr	r0, [pc, #60]	; (8000a20 <MX_RTC_Init+0xb0>)
 80009e4:	f005 f87f 	bl	8005ae6 <HAL_RTC_SetTime>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d001      	beq.n	80009f2 <MX_RTC_Init+0x82>
  {
    Error_Handler();
 80009ee:	f000 ffeb 	bl	80019c8 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80009f2:	2301      	movs	r3, #1
 80009f4:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 80009f6:	2301      	movs	r3, #1
 80009f8:	707b      	strb	r3, [r7, #1]
  sDate.Date = 1;
 80009fa:	2301      	movs	r3, #1
 80009fc:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0;
 80009fe:	2300      	movs	r3, #0
 8000a00:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8000a02:	463b      	mov	r3, r7
 8000a04:	2200      	movs	r2, #0
 8000a06:	4619      	mov	r1, r3
 8000a08:	4805      	ldr	r0, [pc, #20]	; (8000a20 <MX_RTC_Init+0xb0>)
 8000a0a:	f005 f965 	bl	8005cd8 <HAL_RTC_SetDate>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d001      	beq.n	8000a18 <MX_RTC_Init+0xa8>
  {
    Error_Handler();
 8000a14:	f000 ffd8 	bl	80019c8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000a18:	bf00      	nop
 8000a1a:	3718      	adds	r7, #24
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bd80      	pop	{r7, pc}
 8000a20:	2000019c 	.word	0x2000019c
 8000a24:	40002800 	.word	0x40002800

08000a28 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000a2c:	4b1b      	ldr	r3, [pc, #108]	; (8000a9c <MX_SPI3_Init+0x74>)
 8000a2e:	4a1c      	ldr	r2, [pc, #112]	; (8000aa0 <MX_SPI3_Init+0x78>)
 8000a30:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000a32:	4b1a      	ldr	r3, [pc, #104]	; (8000a9c <MX_SPI3_Init+0x74>)
 8000a34:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000a38:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000a3a:	4b18      	ldr	r3, [pc, #96]	; (8000a9c <MX_SPI3_Init+0x74>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8000a40:	4b16      	ldr	r3, [pc, #88]	; (8000a9c <MX_SPI3_Init+0x74>)
 8000a42:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000a46:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a48:	4b14      	ldr	r3, [pc, #80]	; (8000a9c <MX_SPI3_Init+0x74>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a4e:	4b13      	ldr	r3, [pc, #76]	; (8000a9c <MX_SPI3_Init+0x74>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000a54:	4b11      	ldr	r3, [pc, #68]	; (8000a9c <MX_SPI3_Init+0x74>)
 8000a56:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a5a:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000a5c:	4b0f      	ldr	r3, [pc, #60]	; (8000a9c <MX_SPI3_Init+0x74>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a62:	4b0e      	ldr	r3, [pc, #56]	; (8000a9c <MX_SPI3_Init+0x74>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a68:	4b0c      	ldr	r3, [pc, #48]	; (8000a9c <MX_SPI3_Init+0x74>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a6e:	4b0b      	ldr	r3, [pc, #44]	; (8000a9c <MX_SPI3_Init+0x74>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000a74:	4b09      	ldr	r3, [pc, #36]	; (8000a9c <MX_SPI3_Init+0x74>)
 8000a76:	2207      	movs	r2, #7
 8000a78:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000a7a:	4b08      	ldr	r3, [pc, #32]	; (8000a9c <MX_SPI3_Init+0x74>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000a80:	4b06      	ldr	r3, [pc, #24]	; (8000a9c <MX_SPI3_Init+0x74>)
 8000a82:	2208      	movs	r2, #8
 8000a84:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000a86:	4805      	ldr	r0, [pc, #20]	; (8000a9c <MX_SPI3_Init+0x74>)
 8000a88:	f005 facc 	bl	8006024 <HAL_SPI_Init>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d001      	beq.n	8000a96 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000a92:	f000 ff99 	bl	80019c8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000a96:	bf00      	nop
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	200001c0 	.word	0x200001c0
 8000aa0:	40003c00 	.word	0x40003c00

08000aa4 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b084      	sub	sp, #16
 8000aa8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000aaa:	1d3b      	adds	r3, r7, #4
 8000aac:	2200      	movs	r2, #0
 8000aae:	601a      	str	r2, [r3, #0]
 8000ab0:	605a      	str	r2, [r3, #4]
 8000ab2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8000ab4:	4b14      	ldr	r3, [pc, #80]	; (8000b08 <MX_TIM7_Init+0x64>)
 8000ab6:	4a15      	ldr	r2, [pc, #84]	; (8000b0c <MX_TIM7_Init+0x68>)
 8000ab8:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 8000aba:	4b13      	ldr	r3, [pc, #76]	; (8000b08 <MX_TIM7_Init+0x64>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ac0:	4b11      	ldr	r3, [pc, #68]	; (8000b08 <MX_TIM7_Init+0x64>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 799;
 8000ac6:	4b10      	ldr	r3, [pc, #64]	; (8000b08 <MX_TIM7_Init+0x64>)
 8000ac8:	f240 321f 	movw	r2, #799	; 0x31f
 8000acc:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ace:	4b0e      	ldr	r3, [pc, #56]	; (8000b08 <MX_TIM7_Init+0x64>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000ad4:	480c      	ldr	r0, [pc, #48]	; (8000b08 <MX_TIM7_Init+0x64>)
 8000ad6:	f006 fdd2 	bl	800767e <HAL_TIM_Base_Init>
 8000ada:	4603      	mov	r3, r0
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d001      	beq.n	8000ae4 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8000ae0:	f000 ff72 	bl	80019c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000aec:	1d3b      	adds	r3, r7, #4
 8000aee:	4619      	mov	r1, r3
 8000af0:	4805      	ldr	r0, [pc, #20]	; (8000b08 <MX_TIM7_Init+0x64>)
 8000af2:	f007 f86d 	bl	8007bd0 <HAL_TIMEx_MasterConfigSynchronization>
 8000af6:	4603      	mov	r3, r0
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d001      	beq.n	8000b00 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8000afc:	f000 ff64 	bl	80019c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8000b00:	bf00      	nop
 8000b02:	3710      	adds	r7, #16
 8000b04:	46bd      	mov	sp, r7
 8000b06:	bd80      	pop	{r7, pc}
 8000b08:	20000224 	.word	0x20000224
 8000b0c:	40001400 	.word	0x40001400

08000b10 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000b14:	4b14      	ldr	r3, [pc, #80]	; (8000b68 <MX_USART1_UART_Init+0x58>)
 8000b16:	4a15      	ldr	r2, [pc, #84]	; (8000b6c <MX_USART1_UART_Init+0x5c>)
 8000b18:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000b1a:	4b13      	ldr	r3, [pc, #76]	; (8000b68 <MX_USART1_UART_Init+0x58>)
 8000b1c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b20:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b22:	4b11      	ldr	r3, [pc, #68]	; (8000b68 <MX_USART1_UART_Init+0x58>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000b28:	4b0f      	ldr	r3, [pc, #60]	; (8000b68 <MX_USART1_UART_Init+0x58>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000b2e:	4b0e      	ldr	r3, [pc, #56]	; (8000b68 <MX_USART1_UART_Init+0x58>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000b34:	4b0c      	ldr	r3, [pc, #48]	; (8000b68 <MX_USART1_UART_Init+0x58>)
 8000b36:	220c      	movs	r2, #12
 8000b38:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b3a:	4b0b      	ldr	r3, [pc, #44]	; (8000b68 <MX_USART1_UART_Init+0x58>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b40:	4b09      	ldr	r3, [pc, #36]	; (8000b68 <MX_USART1_UART_Init+0x58>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b46:	4b08      	ldr	r3, [pc, #32]	; (8000b68 <MX_USART1_UART_Init+0x58>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b4c:	4b06      	ldr	r3, [pc, #24]	; (8000b68 <MX_USART1_UART_Init+0x58>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000b52:	4805      	ldr	r0, [pc, #20]	; (8000b68 <MX_USART1_UART_Init+0x58>)
 8000b54:	f007 f8e2 	bl	8007d1c <HAL_UART_Init>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d001      	beq.n	8000b62 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000b5e:	f000 ff33 	bl	80019c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000b62:	bf00      	nop
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	20000270 	.word	0x20000270
 8000b6c:	40013800 	.word	0x40013800

08000b70 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000b74:	4b14      	ldr	r3, [pc, #80]	; (8000bc8 <MX_USART3_UART_Init+0x58>)
 8000b76:	4a15      	ldr	r2, [pc, #84]	; (8000bcc <MX_USART3_UART_Init+0x5c>)
 8000b78:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000b7a:	4b13      	ldr	r3, [pc, #76]	; (8000bc8 <MX_USART3_UART_Init+0x58>)
 8000b7c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b80:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000b82:	4b11      	ldr	r3, [pc, #68]	; (8000bc8 <MX_USART3_UART_Init+0x58>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000b88:	4b0f      	ldr	r3, [pc, #60]	; (8000bc8 <MX_USART3_UART_Init+0x58>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000b8e:	4b0e      	ldr	r3, [pc, #56]	; (8000bc8 <MX_USART3_UART_Init+0x58>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000b94:	4b0c      	ldr	r3, [pc, #48]	; (8000bc8 <MX_USART3_UART_Init+0x58>)
 8000b96:	220c      	movs	r2, #12
 8000b98:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b9a:	4b0b      	ldr	r3, [pc, #44]	; (8000bc8 <MX_USART3_UART_Init+0x58>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ba0:	4b09      	ldr	r3, [pc, #36]	; (8000bc8 <MX_USART3_UART_Init+0x58>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ba6:	4b08      	ldr	r3, [pc, #32]	; (8000bc8 <MX_USART3_UART_Init+0x58>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000bac:	4b06      	ldr	r3, [pc, #24]	; (8000bc8 <MX_USART3_UART_Init+0x58>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000bb2:	4805      	ldr	r0, [pc, #20]	; (8000bc8 <MX_USART3_UART_Init+0x58>)
 8000bb4:	f007 f8b2 	bl	8007d1c <HAL_UART_Init>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d001      	beq.n	8000bc2 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000bbe:	f000 ff03 	bl	80019c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000bc2:	bf00      	nop
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	200002f4 	.word	0x200002f4
 8000bcc:	40004800 	.word	0x40004800

08000bd0 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000bd4:	4b14      	ldr	r3, [pc, #80]	; (8000c28 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000bd6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000bda:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000bdc:	4b12      	ldr	r3, [pc, #72]	; (8000c28 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000bde:	2206      	movs	r2, #6
 8000be0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000be2:	4b11      	ldr	r3, [pc, #68]	; (8000c28 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000be4:	2202      	movs	r2, #2
 8000be6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000be8:	4b0f      	ldr	r3, [pc, #60]	; (8000c28 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000bea:	2202      	movs	r2, #2
 8000bec:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000bee:	4b0e      	ldr	r3, [pc, #56]	; (8000c28 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000bf4:	4b0c      	ldr	r3, [pc, #48]	; (8000c28 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000bfa:	4b0b      	ldr	r3, [pc, #44]	; (8000c28 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8000c00:	4b09      	ldr	r3, [pc, #36]	; (8000c28 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000c06:	4b08      	ldr	r3, [pc, #32]	; (8000c28 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8000c0c:	4b06      	ldr	r3, [pc, #24]	; (8000c28 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000c12:	4805      	ldr	r0, [pc, #20]	; (8000c28 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c14:	f003 f977 	bl	8003f06 <HAL_PCD_Init>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d001      	beq.n	8000c22 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000c1e:	f000 fed3 	bl	80019c8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000c22:	bf00      	nop
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	20000378 	.word	0x20000378

08000c2c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b08a      	sub	sp, #40	; 0x28
 8000c30:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c32:	f107 0314 	add.w	r3, r7, #20
 8000c36:	2200      	movs	r2, #0
 8000c38:	601a      	str	r2, [r3, #0]
 8000c3a:	605a      	str	r2, [r3, #4]
 8000c3c:	609a      	str	r2, [r3, #8]
 8000c3e:	60da      	str	r2, [r3, #12]
 8000c40:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c42:	4bbb      	ldr	r3, [pc, #748]	; (8000f30 <MX_GPIO_Init+0x304>)
 8000c44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c46:	4aba      	ldr	r2, [pc, #744]	; (8000f30 <MX_GPIO_Init+0x304>)
 8000c48:	f043 0310 	orr.w	r3, r3, #16
 8000c4c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c4e:	4bb8      	ldr	r3, [pc, #736]	; (8000f30 <MX_GPIO_Init+0x304>)
 8000c50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c52:	f003 0310 	and.w	r3, r3, #16
 8000c56:	613b      	str	r3, [r7, #16]
 8000c58:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c5a:	4bb5      	ldr	r3, [pc, #724]	; (8000f30 <MX_GPIO_Init+0x304>)
 8000c5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c5e:	4ab4      	ldr	r2, [pc, #720]	; (8000f30 <MX_GPIO_Init+0x304>)
 8000c60:	f043 0304 	orr.w	r3, r3, #4
 8000c64:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c66:	4bb2      	ldr	r3, [pc, #712]	; (8000f30 <MX_GPIO_Init+0x304>)
 8000c68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c6a:	f003 0304 	and.w	r3, r3, #4
 8000c6e:	60fb      	str	r3, [r7, #12]
 8000c70:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c72:	4baf      	ldr	r3, [pc, #700]	; (8000f30 <MX_GPIO_Init+0x304>)
 8000c74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c76:	4aae      	ldr	r2, [pc, #696]	; (8000f30 <MX_GPIO_Init+0x304>)
 8000c78:	f043 0301 	orr.w	r3, r3, #1
 8000c7c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c7e:	4bac      	ldr	r3, [pc, #688]	; (8000f30 <MX_GPIO_Init+0x304>)
 8000c80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c82:	f003 0301 	and.w	r3, r3, #1
 8000c86:	60bb      	str	r3, [r7, #8]
 8000c88:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c8a:	4ba9      	ldr	r3, [pc, #676]	; (8000f30 <MX_GPIO_Init+0x304>)
 8000c8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c8e:	4aa8      	ldr	r2, [pc, #672]	; (8000f30 <MX_GPIO_Init+0x304>)
 8000c90:	f043 0302 	orr.w	r3, r3, #2
 8000c94:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c96:	4ba6      	ldr	r3, [pc, #664]	; (8000f30 <MX_GPIO_Init+0x304>)
 8000c98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c9a:	f003 0302 	and.w	r3, r3, #2
 8000c9e:	607b      	str	r3, [r7, #4]
 8000ca0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ca2:	4ba3      	ldr	r3, [pc, #652]	; (8000f30 <MX_GPIO_Init+0x304>)
 8000ca4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ca6:	4aa2      	ldr	r2, [pc, #648]	; (8000f30 <MX_GPIO_Init+0x304>)
 8000ca8:	f043 0308 	orr.w	r3, r3, #8
 8000cac:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cae:	4ba0      	ldr	r3, [pc, #640]	; (8000f30 <MX_GPIO_Init+0x304>)
 8000cb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cb2:	f003 0308 	and.w	r3, r3, #8
 8000cb6:	603b      	str	r3, [r7, #0]
 8000cb8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 8000cba:	2200      	movs	r2, #0
 8000cbc:	f44f 718a 	mov.w	r1, #276	; 0x114
 8000cc0:	489c      	ldr	r0, [pc, #624]	; (8000f34 <MX_GPIO_Init+0x308>)
 8000cc2:	f002 fb51 	bl	8003368 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|LED1_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	f248 1124 	movw	r1, #33060	; 0x8124
 8000ccc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cd0:	f002 fb4a 	bl	8003368 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	f24f 0114 	movw	r1, #61460	; 0xf014
 8000cda:	4897      	ldr	r0, [pc, #604]	; (8000f38 <MX_GPIO_Init+0x30c>)
 8000cdc:	f002 fb44 	bl	8003368 <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	f241 0181 	movw	r1, #4225	; 0x1081
 8000ce6:	4895      	ldr	r0, [pc, #596]	; (8000f3c <MX_GPIO_Init+0x310>)
 8000ce8:	f002 fb3e 	bl	8003368 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000cec:	2201      	movs	r2, #1
 8000cee:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000cf2:	4892      	ldr	r0, [pc, #584]	; (8000f3c <MX_GPIO_Init+0x310>)
 8000cf4:	f002 fb38 	bl	8003368 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	f44f 7110 	mov.w	r1, #576	; 0x240
 8000cfe:	4890      	ldr	r0, [pc, #576]	; (8000f40 <MX_GPIO_Init+0x314>)
 8000d00:	f002 fb32 	bl	8003368 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000d04:	2201      	movs	r2, #1
 8000d06:	2101      	movs	r1, #1
 8000d08:	488a      	ldr	r0, [pc, #552]	; (8000f34 <MX_GPIO_Init+0x308>)
 8000d0a:	f002 fb2d 	bl	8003368 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8000d0e:	f240 1315 	movw	r3, #277	; 0x115
 8000d12:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d14:	2301      	movs	r3, #1
 8000d16:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d20:	f107 0314 	add.w	r3, r7, #20
 8000d24:	4619      	mov	r1, r3
 8000d26:	4883      	ldr	r0, [pc, #524]	; (8000f34 <MX_GPIO_Init+0x308>)
 8000d28:	f002 f868 	bl	8002dfc <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 8000d2c:	236a      	movs	r3, #106	; 0x6a
 8000d2e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d30:	4b84      	ldr	r3, [pc, #528]	; (8000f44 <MX_GPIO_Init+0x318>)
 8000d32:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d34:	2300      	movs	r3, #0
 8000d36:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d38:	f107 0314 	add.w	r3, r7, #20
 8000d3c:	4619      	mov	r1, r3
 8000d3e:	487d      	ldr	r0, [pc, #500]	; (8000f34 <MX_GPIO_Init+0x308>)
 8000d40:	f002 f85c 	bl	8002dfc <HAL_GPIO_Init>

  /*Configure GPIO pins : BOTON_Pin VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = BOTON_Pin|VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8000d44:	f44f 5306 	mov.w	r3, #8576	; 0x2180
 8000d48:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d4a:	4b7e      	ldr	r3, [pc, #504]	; (8000f44 <MX_GPIO_Init+0x318>)
 8000d4c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d52:	f107 0314 	add.w	r3, r7, #20
 8000d56:	4619      	mov	r1, r3
 8000d58:	4879      	ldr	r0, [pc, #484]	; (8000f40 <MX_GPIO_Init+0x314>)
 8000d5a:	f002 f84f 	bl	8002dfc <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 8000d5e:	233f      	movs	r3, #63	; 0x3f
 8000d60:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000d62:	230b      	movs	r3, #11
 8000d64:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d66:	2300      	movs	r3, #0
 8000d68:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d6a:	f107 0314 	add.w	r3, r7, #20
 8000d6e:	4619      	mov	r1, r3
 8000d70:	4873      	ldr	r0, [pc, #460]	; (8000f40 <MX_GPIO_Init+0x314>)
 8000d72:	f002 f843 	bl	8002dfc <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8000d76:	2303      	movs	r3, #3
 8000d78:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d7a:	2302      	movs	r3, #2
 8000d7c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d82:	2303      	movs	r3, #3
 8000d84:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000d86:	2308      	movs	r3, #8
 8000d88:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d8a:	f107 0314 	add.w	r3, r7, #20
 8000d8e:	4619      	mov	r1, r3
 8000d90:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d94:	f002 f832 	bl	8002dfc <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin LED1_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|LED1_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 8000d98:	f248 1324 	movw	r3, #33060	; 0x8124
 8000d9c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d9e:	2301      	movs	r3, #1
 8000da0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da2:	2300      	movs	r3, #0
 8000da4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000da6:	2300      	movs	r3, #0
 8000da8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000daa:	f107 0314 	add.w	r3, r7, #20
 8000dae:	4619      	mov	r1, r3
 8000db0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000db4:	f002 f822 	bl	8002dfc <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 8000db8:	2308      	movs	r3, #8
 8000dba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dbc:	2302      	movs	r3, #2
 8000dbe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000dc8:	2301      	movs	r3, #1
 8000dca:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 8000dcc:	f107 0314 	add.w	r3, r7, #20
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dd6:	f002 f811 	bl	8002dfc <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D7_Pin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 8000dda:	2310      	movs	r3, #16
 8000ddc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000dde:	230b      	movs	r3, #11
 8000de0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de2:	2300      	movs	r3, #0
 8000de4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 8000de6:	f107 0314 	add.w	r3, r7, #20
 8000dea:	4619      	mov	r1, r3
 8000dec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000df0:	f002 f804 	bl	8002dfc <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D12_Pin|ARD_D11_Pin;
 8000df4:	23c0      	movs	r3, #192	; 0xc0
 8000df6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000df8:	2302      	movs	r3, #2
 8000dfa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e00:	2303      	movs	r3, #3
 8000e02:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000e04:	2305      	movs	r3, #5
 8000e06:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e08:	f107 0314 	add.w	r3, r7, #20
 8000e0c:	4619      	mov	r1, r3
 8000e0e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e12:	f001 fff3 	bl	8002dfc <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8000e16:	2301      	movs	r3, #1
 8000e18:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e1a:	4b4a      	ldr	r3, [pc, #296]	; (8000f44 <MX_GPIO_Init+0x318>)
 8000e1c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8000e22:	f107 0314 	add.w	r3, r7, #20
 8000e26:	4619      	mov	r1, r3
 8000e28:	4843      	ldr	r0, [pc, #268]	; (8000f38 <MX_GPIO_Init+0x30c>)
 8000e2a:	f001 ffe7 	bl	8002dfc <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8000e2e:	2302      	movs	r3, #2
 8000e30:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000e32:	230b      	movs	r3, #11
 8000e34:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e36:	2300      	movs	r3, #0
 8000e38:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8000e3a:	f107 0314 	add.w	r3, r7, #20
 8000e3e:	4619      	mov	r1, r3
 8000e40:	483d      	ldr	r0, [pc, #244]	; (8000f38 <MX_GPIO_Init+0x30c>)
 8000e42:	f001 ffdb 	bl	8002dfc <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000e46:	f24f 0314 	movw	r3, #61460	; 0xf014
 8000e4a:	617b      	str	r3, [r7, #20]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e4c:	2301      	movs	r3, #1
 8000e4e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e50:	2300      	movs	r3, #0
 8000e52:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e54:	2300      	movs	r3, #0
 8000e56:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e58:	f107 0314 	add.w	r3, r7, #20
 8000e5c:	4619      	mov	r1, r3
 8000e5e:	4836      	ldr	r0, [pc, #216]	; (8000f38 <MX_GPIO_Init+0x30c>)
 8000e60:	f001 ffcc 	bl	8002dfc <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 8000e64:	f64c 4304 	movw	r3, #52228	; 0xcc04
 8000e68:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e6a:	4b36      	ldr	r3, [pc, #216]	; (8000f44 <MX_GPIO_Init+0x318>)
 8000e6c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e72:	f107 0314 	add.w	r3, r7, #20
 8000e76:	4619      	mov	r1, r3
 8000e78:	4830      	ldr	r0, [pc, #192]	; (8000f3c <MX_GPIO_Init+0x310>)
 8000e7a:	f001 ffbf 	bl	8002dfc <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 8000e7e:	f243 0381 	movw	r3, #12417	; 0x3081
 8000e82:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e84:	2301      	movs	r3, #1
 8000e86:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e90:	f107 0314 	add.w	r3, r7, #20
 8000e94:	4619      	mov	r1, r3
 8000e96:	4829      	ldr	r0, [pc, #164]	; (8000f3c <MX_GPIO_Init+0x310>)
 8000e98:	f001 ffb0 	bl	8002dfc <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8000e9c:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000ea0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ea2:	2301      	movs	r3, #1
 8000ea4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000eae:	f107 0314 	add.w	r3, r7, #20
 8000eb2:	4619      	mov	r1, r3
 8000eb4:	4822      	ldr	r0, [pc, #136]	; (8000f40 <MX_GPIO_Init+0x314>)
 8000eb6:	f001 ffa1 	bl	8002dfc <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 8000eba:	2302      	movs	r3, #2
 8000ebc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ebe:	2302      	movs	r3, #2
 8000ec0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ec6:	2303      	movs	r3, #3
 8000ec8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000eca:	2305      	movs	r3, #5
 8000ecc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8000ece:	f107 0314 	add.w	r3, r7, #20
 8000ed2:	4619      	mov	r1, r3
 8000ed4:	4819      	ldr	r0, [pc, #100]	; (8000f3c <MX_GPIO_Init+0x310>)
 8000ed6:	f001 ff91 	bl	8002dfc <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8000eda:	2378      	movs	r3, #120	; 0x78
 8000edc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ede:	2302      	movs	r3, #2
 8000ee0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ee6:	2303      	movs	r3, #3
 8000ee8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000eea:	2307      	movs	r3, #7
 8000eec:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000eee:	f107 0314 	add.w	r3, r7, #20
 8000ef2:	4619      	mov	r1, r3
 8000ef4:	4811      	ldr	r0, [pc, #68]	; (8000f3c <MX_GPIO_Init+0x310>)
 8000ef6:	f001 ff81 	bl	8002dfc <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8000efa:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000efe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f00:	2312      	movs	r3, #18
 8000f02:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f04:	2300      	movs	r3, #0
 8000f06:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f08:	2303      	movs	r3, #3
 8000f0a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000f0c:	2304      	movs	r3, #4
 8000f0e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f10:	f107 0314 	add.w	r3, r7, #20
 8000f14:	4619      	mov	r1, r3
 8000f16:	4808      	ldr	r0, [pc, #32]	; (8000f38 <MX_GPIO_Init+0x30c>)
 8000f18:	f001 ff70 	bl	8002dfc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	2105      	movs	r1, #5
 8000f20:	2007      	movs	r0, #7
 8000f22:	f001 fda7 	bl	8002a74 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000f26:	2007      	movs	r0, #7
 8000f28:	f001 fdc0 	bl	8002aac <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	e00b      	b.n	8000f48 <MX_GPIO_Init+0x31c>
 8000f30:	40021000 	.word	0x40021000
 8000f34:	48001000 	.word	0x48001000
 8000f38:	48000400 	.word	0x48000400
 8000f3c:	48000c00 	.word	0x48000c00
 8000f40:	48000800 	.word	0x48000800
 8000f44:	10110000 	.word	0x10110000
 8000f48:	2105      	movs	r1, #5
 8000f4a:	2017      	movs	r0, #23
 8000f4c:	f001 fd92 	bl	8002a74 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000f50:	2017      	movs	r0, #23
 8000f52:	f001 fdab 	bl	8002aac <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000f56:	2200      	movs	r2, #0
 8000f58:	2105      	movs	r1, #5
 8000f5a:	2028      	movs	r0, #40	; 0x28
 8000f5c:	f001 fd8a 	bl	8002a74 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000f60:	2028      	movs	r0, #40	; 0x28
 8000f62:	f001 fda3 	bl	8002aac <HAL_NVIC_EnableIRQ>

}
 8000f66:	bf00      	nop
 8000f68:	3728      	adds	r7, #40	; 0x28
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop

08000f70 <_write>:

/* USER CODE BEGIN 4 */

int _write(int file, char *ptr, int len)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b086      	sub	sp, #24
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	60f8      	str	r0, [r7, #12]
 8000f78:	60b9      	str	r1, [r7, #8]
 8000f7a:	607a      	str	r2, [r7, #4]
	int DataIdx;
	for(DataIdx=0; DataIdx<len; DataIdx++)
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	617b      	str	r3, [r7, #20]
 8000f80:	e009      	b.n	8000f96 <_write+0x26>
	{
		ITM_SendChar(*ptr++);
 8000f82:	68bb      	ldr	r3, [r7, #8]
 8000f84:	1c5a      	adds	r2, r3, #1
 8000f86:	60ba      	str	r2, [r7, #8]
 8000f88:	781b      	ldrb	r3, [r3, #0]
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f7ff fafa 	bl	8000584 <ITM_SendChar>
	for(DataIdx=0; DataIdx<len; DataIdx++)
 8000f90:	697b      	ldr	r3, [r7, #20]
 8000f92:	3301      	adds	r3, #1
 8000f94:	617b      	str	r3, [r7, #20]
 8000f96:	697a      	ldr	r2, [r7, #20]
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	429a      	cmp	r2, r3
 8000f9c:	dbf1      	blt.n	8000f82 <_write+0x12>
	}
	return len;
 8000f9e:	687b      	ldr	r3, [r7, #4]
}
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	3718      	adds	r7, #24
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}

08000fa8 <BSP_ACCELERO_Init_INT>:

ACCELERO_StatusTypeDef BSP_ACCELERO_Init_INT(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b082      	sub	sp, #8
 8000fac:	af00      	add	r7, sp, #0
	ACCELERO_StatusTypeDef ret;
	ret = BSP_ACCELERO_Init();
 8000fae:	f008 fba1 	bl	80096f4 <BSP_ACCELERO_Init>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	71fb      	strb	r3, [r7, #7]
	if (ret == ACCELERO_OK)
 8000fb6:	79fb      	ldrb	r3, [r7, #7]
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d12f      	bne.n	800101c <BSP_ACCELERO_Init_INT+0x74>
	{
		/* Initialize interruption*/
		uint8_t tmp;
		tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_DRDY_PULSE_CFG_G);
 8000fbc:	210b      	movs	r1, #11
 8000fbe:	20d4      	movs	r0, #212	; 0xd4
 8000fc0:	f008 fb5c 	bl	800967c <SENSOR_IO_Read>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	71bb      	strb	r3, [r7, #6]
		tmp |=0b10000000;
 8000fc8:	79bb      	ldrb	r3, [r7, #6]
 8000fca:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000fce:	71bb      	strb	r3, [r7, #6]
		SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_DRDY_PULSE_CFG_G, tmp);
 8000fd0:	79bb      	ldrb	r3, [r7, #6]
 8000fd2:	461a      	mov	r2, r3
 8000fd4:	210b      	movs	r1, #11
 8000fd6:	20d4      	movs	r0, #212	; 0xd4
 8000fd8:	f008 fb36 	bl	8009648 <SENSOR_IO_Write>
		tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_INT1_CTRL);
 8000fdc:	210d      	movs	r1, #13
 8000fde:	20d4      	movs	r0, #212	; 0xd4
 8000fe0:	f008 fb4c 	bl	800967c <SENSOR_IO_Read>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	71bb      	strb	r3, [r7, #6]
		tmp |=0b00000001;
 8000fe8:	79bb      	ldrb	r3, [r7, #6]
 8000fea:	f043 0301 	orr.w	r3, r3, #1
 8000fee:	71bb      	strb	r3, [r7, #6]
		SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_INT1_CTRL, tmp);
 8000ff0:	79bb      	ldrb	r3, [r7, #6]
 8000ff2:	461a      	mov	r2, r3
 8000ff4:	210d      	movs	r1, #13
 8000ff6:	20d4      	movs	r0, #212	; 0xd4
 8000ff8:	f008 fb26 	bl	8009648 <SENSOR_IO_Write>
		tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_MASTER_CONFIG);
 8000ffc:	211a      	movs	r1, #26
 8000ffe:	20d4      	movs	r0, #212	; 0xd4
 8001000:	f008 fb3c 	bl	800967c <SENSOR_IO_Read>
 8001004:	4603      	mov	r3, r0
 8001006:	71bb      	strb	r3, [r7, #6]
		tmp |=0b10000000;
 8001008:	79bb      	ldrb	r3, [r7, #6]
 800100a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800100e:	71bb      	strb	r3, [r7, #6]
		SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_MASTER_CONFIG, tmp);
 8001010:	79bb      	ldrb	r3, [r7, #6]
 8001012:	461a      	mov	r2, r3
 8001014:	211a      	movs	r1, #26
 8001016:	20d4      	movs	r0, #212	; 0xd4
 8001018:	f008 fb16 	bl	8009648 <SENSOR_IO_Write>
	}
	return ret;
 800101c:	79fb      	ldrb	r3, [r7, #7]
}
 800101e:	4618      	mov	r0, r3
 8001020:	3708      	adds	r7, #8
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
	...

08001028 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b082      	sub	sp, #8
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]

	static osStatus_t estado;
	if (huart == &huart1)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	4a0c      	ldr	r2, [pc, #48]	; (8001064 <HAL_UART_RxCpltCallback+0x3c>)
 8001034:	4293      	cmp	r3, r2
 8001036:	d110      	bne.n	800105a <HAL_UART_RxCpltCallback+0x32>
	{
		HAL_UART_Receive_IT(&huart1,&rec_data,1);
 8001038:	2201      	movs	r2, #1
 800103a:	490b      	ldr	r1, [pc, #44]	; (8001068 <HAL_UART_RxCpltCallback+0x40>)
 800103c:	4809      	ldr	r0, [pc, #36]	; (8001064 <HAL_UART_RxCpltCallback+0x3c>)
 800103e:	f006 ff4f 	bl	8007ee0 <HAL_UART_Receive_IT>
		printf("Recibido: %d\r\n",rec_data);
 8001042:	4b09      	ldr	r3, [pc, #36]	; (8001068 <HAL_UART_RxCpltCallback+0x40>)
 8001044:	781b      	ldrb	r3, [r3, #0]
 8001046:	4619      	mov	r1, r3
 8001048:	4808      	ldr	r0, [pc, #32]	; (800106c <HAL_UART_RxCpltCallback+0x44>)
 800104a:	f011 ff95 	bl	8012f78 <iprintf>
		osThreadFlagsSet(tarea_UARTHandle,0x0002U);
 800104e:	4b08      	ldr	r3, [pc, #32]	; (8001070 <HAL_UART_RxCpltCallback+0x48>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	2102      	movs	r1, #2
 8001054:	4618      	mov	r0, r3
 8001056:	f00d ffa5 	bl	800efa4 <osThreadFlagsSet>
			printf("Estado: ok\r\n");
		else
			printf("Algo no va bien\r\n");
			*/
	}
}
 800105a:	bf00      	nop
 800105c:	3708      	adds	r7, #8
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	20000270 	.word	0x20000270
 8001068:	200007c8 	.word	0x200007c8
 800106c:	08013dec 	.word	0x08013dec
 8001070:	2000078c 	.word	0x2000078c

08001074 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b082      	sub	sp, #8
 8001078:	af00      	add	r7, sp, #0
 800107a:	4603      	mov	r3, r0
 800107c:	80fb      	strh	r3, [r7, #6]
	switch (GPIO_Pin)
 800107e:	88fb      	ldrh	r3, [r7, #6]
 8001080:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001084:	d00e      	beq.n	80010a4 <HAL_GPIO_EXTI_Callback+0x30>
 8001086:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800108a:	dc18      	bgt.n	80010be <HAL_GPIO_EXTI_Callback+0x4a>
 800108c:	2b02      	cmp	r3, #2
 800108e:	d013      	beq.n	80010b8 <HAL_GPIO_EXTI_Callback+0x44>
 8001090:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001094:	d113      	bne.n	80010be <HAL_GPIO_EXTI_Callback+0x4a>
	{
		case (LSM6DSL_INT1_EXTI11_Pin):
		{
			osThreadFlagsSet(readAccelHandle,0x0001U);
 8001096:	4b0c      	ldr	r3, [pc, #48]	; (80010c8 <HAL_GPIO_EXTI_Callback+0x54>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	2101      	movs	r1, #1
 800109c:	4618      	mov	r0, r3
 800109e:	f00d ff81 	bl	800efa4 <osThreadFlagsSet>
			break;
 80010a2:	e00d      	b.n	80010c0 <HAL_GPIO_EXTI_Callback+0x4c>
		}
		case(BOTON_Pin):
		{
			printf("Ha pulsado el boton\r\n");
 80010a4:	4809      	ldr	r0, [pc, #36]	; (80010cc <HAL_GPIO_EXTI_Callback+0x58>)
 80010a6:	f011 ffed 	bl	8013084 <puts>
			osThreadFlagsSet(readAccelHandle,0x0002U);
 80010aa:	4b07      	ldr	r3, [pc, #28]	; (80010c8 <HAL_GPIO_EXTI_Callback+0x54>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	2102      	movs	r1, #2
 80010b0:	4618      	mov	r0, r3
 80010b2:	f00d ff77 	bl	800efa4 <osThreadFlagsSet>
			break;
 80010b6:	e003      	b.n	80010c0 <HAL_GPIO_EXTI_Callback+0x4c>
		}
		case (GPIO_PIN_1):
		{
			SPI_WIFI_ISR();
 80010b8:	f009 ff88 	bl	800afcc <SPI_WIFI_ISR>
			break;
 80010bc:	e000      	b.n	80010c0 <HAL_GPIO_EXTI_Callback+0x4c>
		}
		default:
		{
		  break;
 80010be:	bf00      	nop
		}
	}
}
 80010c0:	bf00      	nop
 80010c2:	3708      	adds	r7, #8
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	20000784 	.word	0x20000784
 80010cc:	08013dfc 	.word	0x08013dfc

080010d0 <wifi_start>:

static int wifi_start(void)
{
 80010d0:	b5b0      	push	{r4, r5, r7, lr}
 80010d2:	b086      	sub	sp, #24
 80010d4:	af04      	add	r7, sp, #16
  uint8_t  MAC_Addr[6];
  printf("wifistart\r\n");
 80010d6:	481d      	ldr	r0, [pc, #116]	; (800114c <wifi_start+0x7c>)
 80010d8:	f011 ffd4 	bl	8013084 <puts>
 /*Initialize and use WIFI module */
  if(WIFI_Init() ==  WIFI_STATUS_OK)
 80010dc:	f009 ff86 	bl	800afec <WIFI_Init>
 80010e0:	4603      	mov	r3, r0
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d129      	bne.n	800113a <wifi_start+0x6a>
  {
	printf("xddddddd\r\n");
 80010e6:	481a      	ldr	r0, [pc, #104]	; (8001150 <wifi_start+0x80>)
 80010e8:	f011 ffcc 	bl	8013084 <puts>
    printf(("ES-WIFI Initialized.\r\n"));
 80010ec:	4819      	ldr	r0, [pc, #100]	; (8001154 <wifi_start+0x84>)
 80010ee:	f011 ffc9 	bl	8013084 <puts>
    if(WIFI_GetMAC_Address(MAC_Addr) == WIFI_STATUS_OK)
 80010f2:	463b      	mov	r3, r7
 80010f4:	4618      	mov	r0, r3
 80010f6:	f009 ffc7 	bl	800b088 <WIFI_GetMAC_Address>
 80010fa:	4603      	mov	r3, r0
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d116      	bne.n	800112e <wifi_start+0x5e>
    {
      printf("MAC asignada\r\n");
 8001100:	4815      	ldr	r0, [pc, #84]	; (8001158 <wifi_start+0x88>)
 8001102:	f011 ffbf 	bl	8013084 <puts>
      printf("> eS-WiFi module MAC Address : %02X:%02X:%02X:%02X:%02X:%02X\r\n",
               MAC_Addr[0],
 8001106:	783b      	ldrb	r3, [r7, #0]
      printf("> eS-WiFi module MAC Address : %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 8001108:	4618      	mov	r0, r3
               MAC_Addr[1],
 800110a:	787b      	ldrb	r3, [r7, #1]
      printf("> eS-WiFi module MAC Address : %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800110c:	461c      	mov	r4, r3
               MAC_Addr[2],
 800110e:	78bb      	ldrb	r3, [r7, #2]
      printf("> eS-WiFi module MAC Address : %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 8001110:	461d      	mov	r5, r3
               MAC_Addr[3],
 8001112:	78fb      	ldrb	r3, [r7, #3]
               MAC_Addr[4],
 8001114:	793a      	ldrb	r2, [r7, #4]
               MAC_Addr[5]);
 8001116:	7979      	ldrb	r1, [r7, #5]
      printf("> eS-WiFi module MAC Address : %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 8001118:	9102      	str	r1, [sp, #8]
 800111a:	9201      	str	r2, [sp, #4]
 800111c:	9300      	str	r3, [sp, #0]
 800111e:	462b      	mov	r3, r5
 8001120:	4622      	mov	r2, r4
 8001122:	4601      	mov	r1, r0
 8001124:	480d      	ldr	r0, [pc, #52]	; (800115c <wifi_start+0x8c>)
 8001126:	f011 ff27 	bl	8012f78 <iprintf>
  else
  {
	printf("Errorfifi\r\n");
    return -1;
  }
  return 0;
 800112a:	2300      	movs	r3, #0
 800112c:	e00a      	b.n	8001144 <wifi_start+0x74>
      printf("> ERROR : CANNOT get MAC address\r\n");
 800112e:	480c      	ldr	r0, [pc, #48]	; (8001160 <wifi_start+0x90>)
 8001130:	f011 ffa8 	bl	8013084 <puts>
      return -1;
 8001134:	f04f 33ff 	mov.w	r3, #4294967295
 8001138:	e004      	b.n	8001144 <wifi_start+0x74>
	printf("Errorfifi\r\n");
 800113a:	480a      	ldr	r0, [pc, #40]	; (8001164 <wifi_start+0x94>)
 800113c:	f011 ffa2 	bl	8013084 <puts>
    return -1;
 8001140:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001144:	4618      	mov	r0, r3
 8001146:	3708      	adds	r7, #8
 8001148:	46bd      	mov	sp, r7
 800114a:	bdb0      	pop	{r4, r5, r7, pc}
 800114c:	08013e14 	.word	0x08013e14
 8001150:	08013e20 	.word	0x08013e20
 8001154:	08013e2c 	.word	0x08013e2c
 8001158:	08013e44 	.word	0x08013e44
 800115c:	08013e54 	.word	0x08013e54
 8001160:	08013e94 	.word	0x08013e94
 8001164:	08013eb8 	.word	0x08013eb8

08001168 <wifi_connect>:

int wifi_connect(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b082      	sub	sp, #8
 800116c:	af02      	add	r7, sp, #8

  wifi_start();
 800116e:	f7ff ffaf 	bl	80010d0 <wifi_start>

  printf("Connecting to %s\r\n",SSID);
 8001172:	4919      	ldr	r1, [pc, #100]	; (80011d8 <wifi_connect+0x70>)
 8001174:	4819      	ldr	r0, [pc, #100]	; (80011dc <wifi_connect+0x74>)
 8001176:	f011 feff 	bl	8012f78 <iprintf>
  if( WIFI_Connect(SSID, PASSWORD, WIFISECURITY) == WIFI_STATUS_OK)
 800117a:	2203      	movs	r2, #3
 800117c:	4918      	ldr	r1, [pc, #96]	; (80011e0 <wifi_connect+0x78>)
 800117e:	4816      	ldr	r0, [pc, #88]	; (80011d8 <wifi_connect+0x70>)
 8001180:	f009 ff60 	bl	800b044 <WIFI_Connect>
 8001184:	4603      	mov	r3, r0
 8001186:	2b00      	cmp	r3, #0
 8001188:	d11d      	bne.n	80011c6 <wifi_connect+0x5e>
  {
    if(WIFI_GetIP_Address(IP_Addr) == WIFI_STATUS_OK)
 800118a:	4816      	ldr	r0, [pc, #88]	; (80011e4 <wifi_connect+0x7c>)
 800118c:	f009 ff92 	bl	800b0b4 <WIFI_GetIP_Address>
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	d111      	bne.n	80011ba <wifi_connect+0x52>
    {
      printf("> es-wifi module connected: got IP Address : %d.%d.%d.%d\r\n",
               IP_Addr[0],
 8001196:	4b13      	ldr	r3, [pc, #76]	; (80011e4 <wifi_connect+0x7c>)
 8001198:	781b      	ldrb	r3, [r3, #0]
      printf("> es-wifi module connected: got IP Address : %d.%d.%d.%d\r\n",
 800119a:	4619      	mov	r1, r3
               IP_Addr[1],
 800119c:	4b11      	ldr	r3, [pc, #68]	; (80011e4 <wifi_connect+0x7c>)
 800119e:	785b      	ldrb	r3, [r3, #1]
      printf("> es-wifi module connected: got IP Address : %d.%d.%d.%d\r\n",
 80011a0:	461a      	mov	r2, r3
               IP_Addr[2],
 80011a2:	4b10      	ldr	r3, [pc, #64]	; (80011e4 <wifi_connect+0x7c>)
 80011a4:	789b      	ldrb	r3, [r3, #2]
      printf("> es-wifi module connected: got IP Address : %d.%d.%d.%d\r\n",
 80011a6:	4618      	mov	r0, r3
               IP_Addr[3]);
 80011a8:	4b0e      	ldr	r3, [pc, #56]	; (80011e4 <wifi_connect+0x7c>)
 80011aa:	78db      	ldrb	r3, [r3, #3]
      printf("> es-wifi module connected: got IP Address : %d.%d.%d.%d\r\n",
 80011ac:	9300      	str	r3, [sp, #0]
 80011ae:	4603      	mov	r3, r0
 80011b0:	480d      	ldr	r0, [pc, #52]	; (80011e8 <wifi_connect+0x80>)
 80011b2:	f011 fee1 	bl	8012f78 <iprintf>
  else
  {
		 printf("ERROR : es-wifi module NOT connected\n");
     return -1;
  }
  return 0;
 80011b6:	2300      	movs	r3, #0
 80011b8:	e00a      	b.n	80011d0 <wifi_connect+0x68>
		  printf(" ERROR : es-wifi module CANNOT get IP address\r\n");
 80011ba:	480c      	ldr	r0, [pc, #48]	; (80011ec <wifi_connect+0x84>)
 80011bc:	f011 ff62 	bl	8013084 <puts>
      return -1;
 80011c0:	f04f 33ff 	mov.w	r3, #4294967295
 80011c4:	e004      	b.n	80011d0 <wifi_connect+0x68>
		 printf("ERROR : es-wifi module NOT connected\n");
 80011c6:	480a      	ldr	r0, [pc, #40]	; (80011f0 <wifi_connect+0x88>)
 80011c8:	f011 ff5c 	bl	8013084 <puts>
     return -1;
 80011cc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80011d0:	4618      	mov	r0, r3
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	08013ec4 	.word	0x08013ec4
 80011dc:	08013ed4 	.word	0x08013ed4
 80011e0:	08013ee8 	.word	0x08013ee8
 80011e4:	200007c0 	.word	0x200007c0
 80011e8:	08013ef4 	.word	0x08013ef4
 80011ec:	08013f30 	.word	0x08013f30
 80011f0:	08013f60 	.word	0x08013f60

080011f4 <SPI3_IRQHandler>:
  * @brief  SPI3 line detection callback.
  * @param  None
  * @retval None
  */
void SPI3_IRQHandler(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	af00      	add	r7, sp, #0
  HAL_SPI_IRQHandler(&hspi);
 80011f8:	4802      	ldr	r0, [pc, #8]	; (8001204 <SPI3_IRQHandler+0x10>)
 80011fa:	f005 fd0f 	bl	8006c1c <HAL_SPI_IRQHandler>
}
 80011fe:	bf00      	nop
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	20000c8c 	.word	0x20000c8c

08001208 <RTC_set_func>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_RTC_set_func */
void RTC_set_func(void *argument)
{
 8001208:	b5b0      	push	{r4, r5, r7, lr}
 800120a:	b09e      	sub	sp, #120	; 0x78
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	uint8_t recibido[3];
	//uint32_t flag_rec;
	osStatus_t estado;
	uint32_t return_wait = 0U;
 8001210:	2300      	movs	r3, #0
 8001212:	66bb      	str	r3, [r7, #104]	; 0x68

	uint16_t num_usuario;
	uint8_t to_change[6];
	const char* msg_hora_ok = "\r\nHora cambiada correctamente\r\n";
 8001214:	4bae      	ldr	r3, [pc, #696]	; (80014d0 <RTC_set_func+0x2c8>)
 8001216:	657b      	str	r3, [r7, #84]	; 0x54
	const char* msg_fecha_ok = "Fecha cambiada correctamente\r\n";
 8001218:	4bae      	ldr	r3, [pc, #696]	; (80014d4 <RTC_set_func+0x2cc>)
 800121a:	653b      	str	r3, [r7, #80]	; 0x50
	const char* msg_error = "\r\nERROR: Valor no válido\r\n";
 800121c:	4bae      	ldr	r3, [pc, #696]	; (80014d8 <RTC_set_func+0x2d0>)
 800121e:	64fb      	str	r3, [r7, #76]	; 0x4c
	const char* msg_rtc1 = "\r\n\r\n========================\r\n"
 8001220:	4bae      	ldr	r3, [pc, #696]	; (80014dc <RTC_set_func+0x2d4>)
 8001222:	64bb      	str	r3, [r7, #72]	; 0x48
	"| Configurar rtc |\r\n"
	"========================\r\n\r\n";
	const char* msg[6] = {
 8001224:	4bae      	ldr	r3, [pc, #696]	; (80014e0 <RTC_set_func+0x2d8>)
 8001226:	f107 0430 	add.w	r4, r7, #48	; 0x30
 800122a:	461d      	mov	r5, r3
 800122c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800122e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001230:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001234:	e884 0003 	stmia.w	r4, {r0, r1}
	"Hora (0-23): ", "\r\nMinuto (0-59): ","\r\nSegundo (0-59): ","\r\nDía (1-31): ","\r\nMes (1-12): ",
	"\r\nAño (0-99): "};
	uint8_t limit[6][2] = {{0,23},{0,59},{0,59},{1,31},{1,12},{0,99}};
 8001238:	4aaa      	ldr	r2, [pc, #680]	; (80014e4 <RTC_set_func+0x2dc>)
 800123a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800123e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001240:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	//uint8_t *toChange[6] = {&GetTime.Hours, &GetTime.Minutes, &GetTime.Seconds, &GetDate.Date,&GetDate.Month, &GetDate.Year};

	printf("Empieza el bucle\r\n");
 8001244:	48a8      	ldr	r0, [pc, #672]	; (80014e8 <RTC_set_func+0x2e0>)
 8001246:	f011 ff1d 	bl	8013084 <puts>
	estado = osMessageQueuePut(print_queueHandle, &msg_rtc1, 0, pdMS_TO_TICKS(500));
 800124a:	4ba8      	ldr	r3, [pc, #672]	; (80014ec <RTC_set_func+0x2e4>)
 800124c:	6818      	ldr	r0, [r3, #0]
 800124e:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8001252:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001256:	2200      	movs	r2, #0
 8001258:	f00e f802 	bl	800f260 <osMessageQueuePut>
 800125c:	6678      	str	r0, [r7, #100]	; 0x64
	int i,j = 0;
 800125e:	2300      	movs	r3, #0
 8001260:	66fb      	str	r3, [r7, #108]	; 0x6c
	for (i=0;i<6;){
 8001262:	2300      	movs	r3, #0
 8001264:	673b      	str	r3, [r7, #112]	; 0x70
 8001266:	e0d8      	b.n	800141a <RTC_set_func+0x212>
		estado = osMessageQueuePut(print_queueHandle, &msg[i], 0, pdMS_TO_TICKS(500));
 8001268:	4ba0      	ldr	r3, [pc, #640]	; (80014ec <RTC_set_func+0x2e4>)
 800126a:	6818      	ldr	r0, [r3, #0]
 800126c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001270:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001272:	009b      	lsls	r3, r3, #2
 8001274:	18d1      	adds	r1, r2, r3
 8001276:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800127a:	2200      	movs	r2, #0
 800127c:	f00d fff0 	bl	800f260 <osMessageQueuePut>
 8001280:	6678      	str	r0, [r7, #100]	; 0x64
		printf("Esperando a que ser reciba el dato\r\n");
 8001282:	489b      	ldr	r0, [pc, #620]	; (80014f0 <RTC_set_func+0x2e8>)
 8001284:	f011 fefe 	bl	8013084 <puts>

		for (j=0;j<3;j++){
 8001288:	2300      	movs	r3, #0
 800128a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800128c:	e022      	b.n	80012d4 <RTC_set_func+0xcc>
			estado = osMessageQueueGet(receive_queueHandle, &recibido[j], NULL, osWaitForever);
 800128e:	4b99      	ldr	r3, [pc, #612]	; (80014f4 <RTC_set_func+0x2ec>)
 8001290:	6818      	ldr	r0, [r3, #0]
 8001292:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001296:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001298:	18d1      	adds	r1, r2, r3
 800129a:	f04f 33ff 	mov.w	r3, #4294967295
 800129e:	2200      	movs	r2, #0
 80012a0:	f00e f83e 	bl	800f320 <osMessageQueueGet>
 80012a4:	6678      	str	r0, [r7, #100]	; 0x64
			printf("De la cola: %c\r\n",recibido[j]);
 80012a6:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80012aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80012ac:	4413      	add	r3, r2
 80012ae:	781b      	ldrb	r3, [r3, #0]
 80012b0:	4619      	mov	r1, r3
 80012b2:	4891      	ldr	r0, [pc, #580]	; (80014f8 <RTC_set_func+0x2f0>)
 80012b4:	f011 fe60 	bl	8012f78 <iprintf>
			if(recibido[j]==13){
 80012b8:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80012bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80012be:	4413      	add	r3, r2
 80012c0:	781b      	ldrb	r3, [r3, #0]
 80012c2:	2b0d      	cmp	r3, #13
 80012c4:	d103      	bne.n	80012ce <RTC_set_func+0xc6>
				printf("Ha pulsado intro\r\n");
 80012c6:	488d      	ldr	r0, [pc, #564]	; (80014fc <RTC_set_func+0x2f4>)
 80012c8:	f011 fedc 	bl	8013084 <puts>
				break;
 80012cc:	e005      	b.n	80012da <RTC_set_func+0xd2>
		for (j=0;j<3;j++){
 80012ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80012d0:	3301      	adds	r3, #1
 80012d2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80012d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80012d6:	2b02      	cmp	r3, #2
 80012d8:	ddd9      	ble.n	800128e <RTC_set_func+0x86>
			}
		}
		printf("%d\r\n",j);
 80012da:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80012dc:	4888      	ldr	r0, [pc, #544]	; (8001500 <RTC_set_func+0x2f8>)
 80012de:	f011 fe4b 	bl	8012f78 <iprintf>
		switch(j){
 80012e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80012e4:	2b03      	cmp	r3, #3
 80012e6:	d84a      	bhi.n	800137e <RTC_set_func+0x176>
 80012e8:	a201      	add	r2, pc, #4	; (adr r2, 80012f0 <RTC_set_func+0xe8>)
 80012ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012ee:	bf00      	nop
 80012f0:	08001301 	.word	0x08001301
 80012f4:	08001309 	.word	0x08001309
 80012f8:	08001317 	.word	0x08001317
 80012fc:	0800133b 	.word	0x0800133b
		case 0:
			num_usuario=0;
 8001300:	2300      	movs	r3, #0
 8001302:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
			break;
 8001306:	e03a      	b.n	800137e <RTC_set_func+0x176>
		case 1:
			num_usuario = recibido[0]-48;
 8001308:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 800130c:	b29b      	uxth	r3, r3
 800130e:	3b30      	subs	r3, #48	; 0x30
 8001310:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
			//i++;
			break;
 8001314:	e033      	b.n	800137e <RTC_set_func+0x176>
		case 2:
			num_usuario = 10*(recibido[0]-48)+recibido[1]-48;
 8001316:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 800131a:	3b30      	subs	r3, #48	; 0x30
 800131c:	b29b      	uxth	r3, r3
 800131e:	461a      	mov	r2, r3
 8001320:	0092      	lsls	r2, r2, #2
 8001322:	4413      	add	r3, r2
 8001324:	005b      	lsls	r3, r3, #1
 8001326:	b29a      	uxth	r2, r3
 8001328:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
 800132c:	b29b      	uxth	r3, r3
 800132e:	4413      	add	r3, r2
 8001330:	b29b      	uxth	r3, r3
 8001332:	3b30      	subs	r3, #48	; 0x30
 8001334:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
			//i++;
			break;
 8001338:	e021      	b.n	800137e <RTC_set_func+0x176>
		case 3:
			num_usuario = 100*(recibido[0]-48)+10*(recibido[1]-48)+recibido[2]-48;
 800133a:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 800133e:	3b30      	subs	r3, #48	; 0x30
 8001340:	b29b      	uxth	r3, r3
 8001342:	461a      	mov	r2, r3
 8001344:	0092      	lsls	r2, r2, #2
 8001346:	4413      	add	r3, r2
 8001348:	461a      	mov	r2, r3
 800134a:	0091      	lsls	r1, r2, #2
 800134c:	461a      	mov	r2, r3
 800134e:	460b      	mov	r3, r1
 8001350:	4413      	add	r3, r2
 8001352:	009b      	lsls	r3, r3, #2
 8001354:	b29a      	uxth	r2, r3
 8001356:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
 800135a:	3b30      	subs	r3, #48	; 0x30
 800135c:	b29b      	uxth	r3, r3
 800135e:	4619      	mov	r1, r3
 8001360:	0089      	lsls	r1, r1, #2
 8001362:	440b      	add	r3, r1
 8001364:	005b      	lsls	r3, r3, #1
 8001366:	b29b      	uxth	r3, r3
 8001368:	4413      	add	r3, r2
 800136a:	b29a      	uxth	r2, r3
 800136c:	f897 3062 	ldrb.w	r3, [r7, #98]	; 0x62
 8001370:	b29b      	uxth	r3, r3
 8001372:	4413      	add	r3, r2
 8001374:	b29b      	uxth	r3, r3
 8001376:	3b30      	subs	r3, #48	; 0x30
 8001378:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
			break;
 800137c:	bf00      	nop
		}
		printf("Numero: %d\r\n",num_usuario);
 800137e:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8001382:	4619      	mov	r1, r3
 8001384:	485f      	ldr	r0, [pc, #380]	; (8001504 <RTC_set_func+0x2fc>)
 8001386:	f011 fdf7 	bl	8012f78 <iprintf>
		printf("Rango: %d-%d\r\n",limit[i][0],limit[i][1]);
 800138a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800138c:	005b      	lsls	r3, r3, #1
 800138e:	3378      	adds	r3, #120	; 0x78
 8001390:	443b      	add	r3, r7
 8001392:	f813 3c54 	ldrb.w	r3, [r3, #-84]
 8001396:	4619      	mov	r1, r3
 8001398:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800139a:	005b      	lsls	r3, r3, #1
 800139c:	3378      	adds	r3, #120	; 0x78
 800139e:	443b      	add	r3, r7
 80013a0:	f813 3c53 	ldrb.w	r3, [r3, #-83]
 80013a4:	461a      	mov	r2, r3
 80013a6:	4858      	ldr	r0, [pc, #352]	; (8001508 <RTC_set_func+0x300>)
 80013a8:	f011 fde6 	bl	8012f78 <iprintf>
		if (num_usuario<limit[i][0] || num_usuario>limit[i][1]){
 80013ac:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80013ae:	005b      	lsls	r3, r3, #1
 80013b0:	3378      	adds	r3, #120	; 0x78
 80013b2:	443b      	add	r3, r7
 80013b4:	f813 3c54 	ldrb.w	r3, [r3, #-84]
 80013b8:	b29b      	uxth	r3, r3
 80013ba:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80013be:	429a      	cmp	r2, r3
 80013c0:	d30a      	bcc.n	80013d8 <RTC_set_func+0x1d0>
 80013c2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80013c4:	005b      	lsls	r3, r3, #1
 80013c6:	3378      	adds	r3, #120	; 0x78
 80013c8:	443b      	add	r3, r7
 80013ca:	f813 3c53 	ldrb.w	r3, [r3, #-83]
 80013ce:	b29b      	uxth	r3, r3
 80013d0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80013d4:	429a      	cmp	r2, r3
 80013d6:	d914      	bls.n	8001402 <RTC_set_func+0x1fa>
			estado = osMessageQueuePut(print_queueHandle, &msg_error, 0, pdMS_TO_TICKS(500));
 80013d8:	4b44      	ldr	r3, [pc, #272]	; (80014ec <RTC_set_func+0x2e4>)
 80013da:	6818      	ldr	r0, [r3, #0]
 80013dc:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 80013e0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80013e4:	2200      	movs	r2, #0
 80013e6:	f00d ff3b 	bl	800f260 <osMessageQueuePut>
 80013ea:	6678      	str	r0, [r7, #100]	; 0x64
			if (estado == osOK)
 80013ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d103      	bne.n	80013fa <RTC_set_func+0x1f2>
				printf("Enviado valor erroneo\r\n");
 80013f2:	4846      	ldr	r0, [pc, #280]	; (800150c <RTC_set_func+0x304>)
 80013f4:	f011 fe46 	bl	8013084 <puts>
 80013f8:	e00f      	b.n	800141a <RTC_set_func+0x212>
			else
				printf("Algo no va bien\r\n");
 80013fa:	4845      	ldr	r0, [pc, #276]	; (8001510 <RTC_set_func+0x308>)
 80013fc:	f011 fe42 	bl	8013084 <puts>
			if (estado == osOK)
 8001400:	e00b      	b.n	800141a <RTC_set_func+0x212>
		}else{
			to_change[i]=num_usuario;
 8001402:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8001406:	b2d9      	uxtb	r1, r3
 8001408:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800140c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800140e:	4413      	add	r3, r2
 8001410:	460a      	mov	r2, r1
 8001412:	701a      	strb	r2, [r3, #0]
			i++;
 8001414:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001416:	3301      	adds	r3, #1
 8001418:	673b      	str	r3, [r7, #112]	; 0x70
	for (i=0;i<6;){
 800141a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800141c:	2b05      	cmp	r3, #5
 800141e:	f77f af23 	ble.w	8001268 <RTC_set_func+0x60>
		}

	}

	RTC_TimeTypeDef sTime = {0};
 8001422:	f107 0310 	add.w	r3, r7, #16
 8001426:	2200      	movs	r2, #0
 8001428:	601a      	str	r2, [r3, #0]
 800142a:	605a      	str	r2, [r3, #4]
 800142c:	609a      	str	r2, [r3, #8]
 800142e:	60da      	str	r2, [r3, #12]
 8001430:	611a      	str	r2, [r3, #16]
	RTC_DateTypeDef sDate = {0};
 8001432:	2300      	movs	r3, #0
 8001434:	60fb      	str	r3, [r7, #12]

	sTime.Hours = to_change[0];
 8001436:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 800143a:	743b      	strb	r3, [r7, #16]
	sTime.Minutes = to_change[1];
 800143c:	f897 3059 	ldrb.w	r3, [r7, #89]	; 0x59
 8001440:	747b      	strb	r3, [r7, #17]
	sTime.Seconds = to_change[2];
 8001442:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 8001446:	74bb      	strb	r3, [r7, #18]

	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8001448:	f107 0310 	add.w	r3, r7, #16
 800144c:	2200      	movs	r2, #0
 800144e:	4619      	mov	r1, r3
 8001450:	4830      	ldr	r0, [pc, #192]	; (8001514 <RTC_set_func+0x30c>)
 8001452:	f004 fb48 	bl	8005ae6 <HAL_RTC_SetTime>
 8001456:	4603      	mov	r3, r0
 8001458:	2b00      	cmp	r3, #0
 800145a:	d001      	beq.n	8001460 <RTC_set_func+0x258>
	  {
	    Error_Handler();
 800145c:	f000 fab4 	bl	80019c8 <Error_Handler>
	  }

	osMessageQueuePut(print_queueHandle, &msg_hora_ok, 0, pdMS_TO_TICKS(500));
 8001460:	4b22      	ldr	r3, [pc, #136]	; (80014ec <RTC_set_func+0x2e4>)
 8001462:	6818      	ldr	r0, [r3, #0]
 8001464:	f107 0154 	add.w	r1, r7, #84	; 0x54
 8001468:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800146c:	2200      	movs	r2, #0
 800146e:	f00d fef7 	bl	800f260 <osMessageQueuePut>

	sDate.Date = to_change[3];
 8001472:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8001476:	73bb      	strb	r3, [r7, #14]
	sDate.Month = to_change[4];
 8001478:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 800147c:	737b      	strb	r3, [r7, #13]
	sDate.Year = to_change[5];
 800147e:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 8001482:	73fb      	strb	r3, [r7, #15]
	printf("Anio: %d\r\n",to_change[5]);
 8001484:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 8001488:	4619      	mov	r1, r3
 800148a:	4823      	ldr	r0, [pc, #140]	; (8001518 <RTC_set_func+0x310>)
 800148c:	f011 fd74 	bl	8012f78 <iprintf>
	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8001490:	f107 030c 	add.w	r3, r7, #12
 8001494:	2200      	movs	r2, #0
 8001496:	4619      	mov	r1, r3
 8001498:	481e      	ldr	r0, [pc, #120]	; (8001514 <RTC_set_func+0x30c>)
 800149a:	f004 fc1d 	bl	8005cd8 <HAL_RTC_SetDate>
 800149e:	4603      	mov	r3, r0
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d001      	beq.n	80014a8 <RTC_set_func+0x2a0>
	{
		Error_Handler();
 80014a4:	f000 fa90 	bl	80019c8 <Error_Handler>
	}

	osMessageQueuePut(print_queueHandle, &msg_fecha_ok, 0, pdMS_TO_TICKS(500));
 80014a8:	4b10      	ldr	r3, [pc, #64]	; (80014ec <RTC_set_func+0x2e4>)
 80014aa:	6818      	ldr	r0, [r3, #0]
 80014ac:	f107 0150 	add.w	r1, r7, #80	; 0x50
 80014b0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80014b4:	2200      	movs	r2, #0
 80014b6:	f00d fed3 	bl	800f260 <osMessageQueuePut>

	osThreadFlagsSet(wifiStartTaskHandle,0x0001U);
 80014ba:	4b18      	ldr	r3, [pc, #96]	; (800151c <RTC_set_func+0x314>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	2101      	movs	r1, #1
 80014c0:	4618      	mov	r0, r3
 80014c2:	f00d fd6f 	bl	800efa4 <osThreadFlagsSet>

  /* Infinite loop */
  for(;;)
  {

	  osDelay(pdMS_TO_TICKS(1000));
 80014c6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80014ca:	f00d fe3a 	bl	800f142 <osDelay>
 80014ce:	e7fa      	b.n	80014c6 <RTC_set_func+0x2be>
 80014d0:	08013f88 	.word	0x08013f88
 80014d4:	08013fa8 	.word	0x08013fa8
 80014d8:	08013fc8 	.word	0x08013fc8
 80014dc:	08013fe4 	.word	0x08013fe4
 80014e0:	080140f4 	.word	0x080140f4
 80014e4:	0801410c 	.word	0x0801410c
 80014e8:	08014034 	.word	0x08014034
 80014ec:	2000079c 	.word	0x2000079c
 80014f0:	08014048 	.word	0x08014048
 80014f4:	200007a0 	.word	0x200007a0
 80014f8:	0801406c 	.word	0x0801406c
 80014fc:	08014080 	.word	0x08014080
 8001500:	08014094 	.word	0x08014094
 8001504:	0801409c 	.word	0x0801409c
 8001508:	080140ac 	.word	0x080140ac
 800150c:	080140bc 	.word	0x080140bc
 8001510:	080140d4 	.word	0x080140d4
 8001514:	2000019c 	.word	0x2000019c
 8001518:	080140e8 	.word	0x080140e8
 800151c:	20000798 	.word	0x20000798

08001520 <readAccel_func>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_readAccel_func */
void readAccel_func(void *argument)
{
 8001520:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001522:	b0b1      	sub	sp, #196	; 0xc4
 8001524:	af08      	add	r7, sp, #32
 8001526:	60f8      	str	r0, [r7, #12]
  /* USER CODE BEGIN readAccel_func */
	osStatus_t estado;
  //char mensaje[]  = "Hola mundo\r\n";
	char mensaje[100];
	char *p_mensaje = mensaje;
 8001528:	f107 0320 	add.w	r3, r7, #32
 800152c:	61fb      	str	r3, [r7, #28]

	//uint32_t nticks = 0;
	int16_t DataXYZ[3];
	int16_t *pDataXYZ = DataXYZ;
 800152e:	f107 0314 	add.w	r3, r7, #20
 8001532:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98


	uint8_t horas,minutos,segundos,dia,mes,anio = 0;
 8001536:	2300      	movs	r3, #0
 8001538:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
	uint32_t return_wait = 0U;
 800153c:	2300      	movs	r3, #0
 800153e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

	uint16_t iter; // Se usa para iterar en 64 o 1024 aceleraciones
	uint16_t max_iter;

	printf("ReadAccel task esperando\r\n");
 8001542:	485f      	ldr	r0, [pc, #380]	; (80016c0 <readAccel_func+0x1a0>)
 8001544:	f011 fd9e 	bl	8013084 <puts>
	// Esperamos que el usuario configure el RTC y que el acelerometro este activo
	return_wait = osThreadFlagsWait(0x0003U, osFlagsWaitAll, osWaitForever);
 8001548:	f04f 32ff 	mov.w	r2, #4294967295
 800154c:	2101      	movs	r1, #1
 800154e:	2003      	movs	r0, #3
 8001550:	f00d fd76 	bl	800f040 <osThreadFlagsWait>
 8001554:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90

	//Activamos el temporizador
	osThreadFlagsSet(temporizadorHandle,0x0001U);
 8001558:	4b5a      	ldr	r3, [pc, #360]	; (80016c4 <readAccel_func+0x1a4>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	2101      	movs	r1, #1
 800155e:	4618      	mov	r0, r3
 8001560:	f00d fd20 	bl	800efa4 <osThreadFlagsSet>

	//Terminamos la tarea de configuracion del RTC
	osThreadTerminate(RTC_setHandle);
 8001564:	4b58      	ldr	r3, [pc, #352]	; (80016c8 <readAccel_func+0x1a8>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4618      	mov	r0, r3
 800156a:	f00d fced 	bl	800ef48 <osThreadTerminate>
	osThreadTerminate(printTaskHandle);
 800156e:	4b57      	ldr	r3, [pc, #348]	; (80016cc <readAccel_func+0x1ac>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	4618      	mov	r0, r3
 8001574:	f00d fce8 	bl	800ef48 <osThreadTerminate>
	osMessageQueueReset(print_queueHandle);
 8001578:	4b55      	ldr	r3, [pc, #340]	; (80016d0 <readAccel_func+0x1b0>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	4618      	mov	r0, r3
 800157e:	f00d ff62 	bl	800f446 <osMessageQueueReset>

	printf("ReadAccel task se inicia\r\n");
 8001582:	4854      	ldr	r0, [pc, #336]	; (80016d4 <readAccel_func+0x1b4>)
 8001584:	f011 fd7e 	bl	8013084 <puts>


	/* Infinite loop */
	for(;;)
	{
		if (modo_continuo){
 8001588:	4b53      	ldr	r3, [pc, #332]	; (80016d8 <readAccel_func+0x1b8>)
 800158a:	781b      	ldrb	r3, [r3, #0]
 800158c:	2b00      	cmp	r3, #0
 800158e:	d00a      	beq.n	80015a6 <readAccel_func+0x86>
			max_iter = MUESTRAS_CONTINUO;
 8001590:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001594:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
			osThreadFlagsSet(sendMQTTHandle,MODO_CONTINUO);
 8001598:	4b50      	ldr	r3, [pc, #320]	; (80016dc <readAccel_func+0x1bc>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	2102      	movs	r1, #2
 800159e:	4618      	mov	r0, r3
 80015a0:	f00d fd00 	bl	800efa4 <osThreadFlagsSet>
 80015a4:	e008      	b.n	80015b8 <readAccel_func+0x98>
		}else{
			max_iter = MUESTRAS_NORMAL;
 80015a6:	2340      	movs	r3, #64	; 0x40
 80015a8:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
			osThreadFlagsSet(sendMQTTHandle,MODO_NORMAL);
 80015ac:	4b4b      	ldr	r3, [pc, #300]	; (80016dc <readAccel_func+0x1bc>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	2101      	movs	r1, #1
 80015b2:	4618      	mov	r0, r3
 80015b4:	f00d fcf6 	bl	800efa4 <osThreadFlagsSet>
		}

		for (iter=0 ; iter<max_iter ; iter++){
 80015b8:	2300      	movs	r3, #0
 80015ba:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
 80015be:	e060      	b.n	8001682 <readAccel_func+0x162>
			BSP_ACCELERO_AccGetXYZ(pDataXYZ);
 80015c0:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 80015c4:	f008 f8d4 	bl	8009770 <BSP_ACCELERO_AccGetXYZ>
			//printf("Tick: %ld	Eje x: %d	Eje y: %d	Eje z: %d\r\n",nticks,DataXYZ[0],DataXYZ[1],DataXYZ[2]);

			//printf("Lectura accel realizada\r\n");
			HAL_RTC_GetTime(&hrtc, &GetTime, RTC_FORMAT_BIN);
 80015c8:	2200      	movs	r2, #0
 80015ca:	4945      	ldr	r1, [pc, #276]	; (80016e0 <readAccel_func+0x1c0>)
 80015cc:	4845      	ldr	r0, [pc, #276]	; (80016e4 <readAccel_func+0x1c4>)
 80015ce:	f004 fb27 	bl	8005c20 <HAL_RTC_GetTime>
			horas = GetTime.Hours;
 80015d2:	4b43      	ldr	r3, [pc, #268]	; (80016e0 <readAccel_func+0x1c0>)
 80015d4:	781b      	ldrb	r3, [r3, #0]
 80015d6:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
			minutos = GetTime.Minutes;
 80015da:	4b41      	ldr	r3, [pc, #260]	; (80016e0 <readAccel_func+0x1c0>)
 80015dc:	785b      	ldrb	r3, [r3, #1]
 80015de:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
			segundos = GetTime.Seconds;
 80015e2:	4b3f      	ldr	r3, [pc, #252]	; (80016e0 <readAccel_func+0x1c0>)
 80015e4:	789b      	ldrb	r3, [r3, #2]
 80015e6:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d

			HAL_RTC_GetDate(&hrtc, &GetDate, RTC_FORMAT_BIN);
 80015ea:	2200      	movs	r2, #0
 80015ec:	493e      	ldr	r1, [pc, #248]	; (80016e8 <readAccel_func+0x1c8>)
 80015ee:	483d      	ldr	r0, [pc, #244]	; (80016e4 <readAccel_func+0x1c4>)
 80015f0:	f004 fbf9 	bl	8005de6 <HAL_RTC_GetDate>
			anio = GetDate.Year;
 80015f4:	4b3c      	ldr	r3, [pc, #240]	; (80016e8 <readAccel_func+0x1c8>)
 80015f6:	78db      	ldrb	r3, [r3, #3]
 80015f8:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
			dia = GetDate.Date;
 80015fc:	4b3a      	ldr	r3, [pc, #232]	; (80016e8 <readAccel_func+0x1c8>)
 80015fe:	789b      	ldrb	r3, [r3, #2]
 8001600:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
			mes = GetDate.Month;
 8001604:	4b38      	ldr	r3, [pc, #224]	; (80016e8 <readAccel_func+0x1c8>)
 8001606:	785b      	ldrb	r3, [r3, #1]
 8001608:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b

			//printf("Anio: %d\r\n",anio);
			//printf("Lectura fecha realizada\r\n");
			//printf("fecha: %d/%d/%d hora: %d:%d:%d temp: %d.%02d grados\r\n",dia,mes,anio,horas,minutos,segundos,tmpInt1,tmpInt2);
			//snprintf(mensaje,100,"fecha: %d/%d/%d hora: %d:%d:%d Eje x: %d	Eje y: %d	Eje z: %d\r\n",dia,mes,anio+2000,horas,minutos,segundos,DataXYZ[0],DataXYZ[1],DataXYZ[2]);
			snprintf(mensaje,100,"%d,%d,%d,%d,%d,%d,%d,%d,%d\r\n",dia,mes,anio+2000,horas,minutos,segundos,DataXYZ[0],DataXYZ[1],DataXYZ[2]);
 800160c:	f897 608c 	ldrb.w	r6, [r7, #140]	; 0x8c
 8001610:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 8001614:	60bb      	str	r3, [r7, #8]
 8001616:	f897 2097 	ldrb.w	r2, [r7, #151]	; 0x97
 800161a:	f502 62fa 	add.w	r2, r2, #2000	; 0x7d0
 800161e:	f897 108f 	ldrb.w	r1, [r7, #143]	; 0x8f
 8001622:	f897 008e 	ldrb.w	r0, [r7, #142]	; 0x8e
 8001626:	f897 408d 	ldrb.w	r4, [r7, #141]	; 0x8d
 800162a:	f9b7 5014 	ldrsh.w	r5, [r7, #20]
 800162e:	607d      	str	r5, [r7, #4]
 8001630:	f9b7 5016 	ldrsh.w	r5, [r7, #22]
 8001634:	603d      	str	r5, [r7, #0]
 8001636:	f9b7 5018 	ldrsh.w	r5, [r7, #24]
 800163a:	462b      	mov	r3, r5
 800163c:	f107 0520 	add.w	r5, r7, #32
 8001640:	9307      	str	r3, [sp, #28]
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	9306      	str	r3, [sp, #24]
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	9305      	str	r3, [sp, #20]
 800164a:	9404      	str	r4, [sp, #16]
 800164c:	9003      	str	r0, [sp, #12]
 800164e:	9102      	str	r1, [sp, #8]
 8001650:	9201      	str	r2, [sp, #4]
 8001652:	68bb      	ldr	r3, [r7, #8]
 8001654:	9300      	str	r3, [sp, #0]
 8001656:	4633      	mov	r3, r6
 8001658:	4a24      	ldr	r2, [pc, #144]	; (80016ec <readAccel_func+0x1cc>)
 800165a:	2164      	movs	r1, #100	; 0x64
 800165c:	4628      	mov	r0, r5
 800165e:	f011 fd93 	bl	8013188 <sniprintf>



			//printf("MENSAJE: %s\r\n",mensaje);
			estado = osMessageQueuePut(print_queueHandle, &p_mensaje, 0, pdMS_TO_TICKS(500));
 8001662:	4b1b      	ldr	r3, [pc, #108]	; (80016d0 <readAccel_func+0x1b0>)
 8001664:	6818      	ldr	r0, [r3, #0]
 8001666:	f107 011c 	add.w	r1, r7, #28
 800166a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800166e:	2200      	movs	r2, #0
 8001670:	f00d fdf6 	bl	800f260 <osMessageQueuePut>
 8001674:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
		for (iter=0 ; iter<max_iter ; iter++){
 8001678:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 800167c:	3301      	adds	r3, #1
 800167e:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
 8001682:	f8b7 209e 	ldrh.w	r2, [r7, #158]	; 0x9e
 8001686:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800168a:	429a      	cmp	r2, r3
 800168c:	d398      	bcc.n	80015c0 <readAccel_func+0xa0>
				printf("Timeout agotado 1\r\n");
			}*/

		}

		printf("Se han leido todas las aceleraciones, esperamos media hora o hasta que alguien pulse el boton\r\n");
 800168e:	4818      	ldr	r0, [pc, #96]	; (80016f0 <readAccel_func+0x1d0>)
 8001690:	f011 fcf8 	bl	8013084 <puts>
		return_wait = osThreadFlagsWait(0x0006U, osFlagsWaitAny, osWaitForever); //espera media hora o que alguien pulse el boton
 8001694:	f04f 32ff 	mov.w	r2, #4294967295
 8001698:	2100      	movs	r1, #0
 800169a:	2006      	movs	r0, #6
 800169c:	f00d fcd0 	bl	800f040 <osThreadFlagsWait>
 80016a0:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
		if(return_wait == osFlagsErrorTimeout){
 80016a4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80016a8:	f113 0f02 	cmn.w	r3, #2
 80016ac:	d103      	bne.n	80016b6 <readAccel_func+0x196>
			printf("Ha pasado media hora\r\n");
 80016ae:	4811      	ldr	r0, [pc, #68]	; (80016f4 <readAccel_func+0x1d4>)
 80016b0:	f011 fce8 	bl	8013084 <puts>
 80016b4:	e768      	b.n	8001588 <readAccel_func+0x68>
		}
		else {
			printf("El usuario quiere enviar aceleraciones\r\n");
 80016b6:	4810      	ldr	r0, [pc, #64]	; (80016f8 <readAccel_func+0x1d8>)
 80016b8:	f011 fce4 	bl	8013084 <puts>
		if (modo_continuo){
 80016bc:	e764      	b.n	8001588 <readAccel_func+0x68>
 80016be:	bf00      	nop
 80016c0:	08014118 	.word	0x08014118
 80016c4:	20000790 	.word	0x20000790
 80016c8:	20000780 	.word	0x20000780
 80016cc:	20000788 	.word	0x20000788
 80016d0:	2000079c 	.word	0x2000079c
 80016d4:	08014134 	.word	0x08014134
 80016d8:	200007bd 	.word	0x200007bd
 80016dc:	20000794 	.word	0x20000794
 80016e0:	200007a8 	.word	0x200007a8
 80016e4:	2000019c 	.word	0x2000019c
 80016e8:	200007a4 	.word	0x200007a4
 80016ec:	08014150 	.word	0x08014150
 80016f0:	08014170 	.word	0x08014170
 80016f4:	080141d0 	.word	0x080141d0
 80016f8:	080141e8 	.word	0x080141e8

080016fc <printTask_func>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_printTask_func */
void printTask_func(void *argument)
{
 80016fc:	b590      	push	{r4, r7, lr}
 80016fe:	b085      	sub	sp, #20
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
	uintptr_t mensaje;
	osStatus_t estado;
  /* Infinite loop */
  for(;;)
  {
	  estado = osMessageQueueGet(print_queueHandle, &mensaje, NULL, osWaitForever);
 8001704:	4b13      	ldr	r3, [pc, #76]	; (8001754 <printTask_func+0x58>)
 8001706:	6818      	ldr	r0, [r3, #0]
 8001708:	f107 0108 	add.w	r1, r7, #8
 800170c:	f04f 33ff 	mov.w	r3, #4294967295
 8001710:	2200      	movs	r2, #0
 8001712:	f00d fe05 	bl	800f320 <osMessageQueueGet>
 8001716:	60f8      	str	r0, [r7, #12]
	  //printf("Se ha recibido algo en print task\r\n");
	  //printf("Mensaje print task: %s\r\n",mensaje);
	  //printf("Longitud: %d",strlen((char*)mensaje));
	  if (estado == osOK)
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	2b00      	cmp	r3, #0
 800171c:	d10d      	bne.n	800173a <printTask_func+0x3e>
	  {
		  //printf("%s",(char*)mensaje);
		  HAL_UART_Transmit(&huart1, (uint8_t*)mensaje, strlen(mensaje),10);
 800171e:	68bb      	ldr	r3, [r7, #8]
 8001720:	461c      	mov	r4, r3
 8001722:	68bb      	ldr	r3, [r7, #8]
 8001724:	4618      	mov	r0, r3
 8001726:	f7fe fd53 	bl	80001d0 <strlen>
 800172a:	4603      	mov	r3, r0
 800172c:	b29a      	uxth	r2, r3
 800172e:	230a      	movs	r3, #10
 8001730:	4621      	mov	r1, r4
 8001732:	4809      	ldr	r0, [pc, #36]	; (8001758 <printTask_func+0x5c>)
 8001734:	f006 fb40 	bl	8007db8 <HAL_UART_Transmit>
 8001738:	e7e4      	b.n	8001704 <printTask_func+0x8>
	  }
	  else if (estado == osErrorTimeout)
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	f113 0f02 	cmn.w	r3, #2
 8001740:	d103      	bne.n	800174a <printTask_func+0x4e>
	  {
		  printf("Timeout printTask\r\n");
 8001742:	4806      	ldr	r0, [pc, #24]	; (800175c <printTask_func+0x60>)
 8001744:	f011 fc9e 	bl	8013084 <puts>
 8001748:	e7dc      	b.n	8001704 <printTask_func+0x8>
	  }
	  else
	  {
		  printf("Error en la tarea print\r\n");
 800174a:	4805      	ldr	r0, [pc, #20]	; (8001760 <printTask_func+0x64>)
 800174c:	f011 fc9a 	bl	8013084 <puts>
	  estado = osMessageQueueGet(print_queueHandle, &mensaje, NULL, osWaitForever);
 8001750:	e7d8      	b.n	8001704 <printTask_func+0x8>
 8001752:	bf00      	nop
 8001754:	2000079c 	.word	0x2000079c
 8001758:	20000270 	.word	0x20000270
 800175c:	08014210 	.word	0x08014210
 8001760:	08014224 	.word	0x08014224

08001764 <tarea_UART_func>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_tarea_UART_func */
void tarea_UART_func(void *argument)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b084      	sub	sp, #16
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN tarea_UART_func */
	osStatus_t estado;
	uint32_t return_wait = 0U;
 800176c:	2300      	movs	r3, #0
 800176e:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
	  return_wait = osThreadFlagsWait(0x0002U, osFlagsWaitAny, osWaitForever);
 8001770:	f04f 32ff 	mov.w	r2, #4294967295
 8001774:	2100      	movs	r1, #0
 8001776:	2002      	movs	r0, #2
 8001778:	f00d fc62 	bl	800f040 <osThreadFlagsWait>
 800177c:	60f8      	str	r0, [r7, #12]
	  estado = osMessageQueuePut(receive_queueHandle, &rec_data,0,pdMS_TO_TICKS(200));
 800177e:	4b09      	ldr	r3, [pc, #36]	; (80017a4 <tarea_UART_func+0x40>)
 8001780:	6818      	ldr	r0, [r3, #0]
 8001782:	23c8      	movs	r3, #200	; 0xc8
 8001784:	2200      	movs	r2, #0
 8001786:	4908      	ldr	r1, [pc, #32]	; (80017a8 <tarea_UART_func+0x44>)
 8001788:	f00d fd6a 	bl	800f260 <osMessageQueuePut>
 800178c:	60b8      	str	r0, [r7, #8]
	  if (estado == osOK)
 800178e:	68bb      	ldr	r3, [r7, #8]
 8001790:	2b00      	cmp	r3, #0
 8001792:	d103      	bne.n	800179c <tarea_UART_func+0x38>
		  printf("Estado: ok\r\n");
 8001794:	4805      	ldr	r0, [pc, #20]	; (80017ac <tarea_UART_func+0x48>)
 8001796:	f011 fc75 	bl	8013084 <puts>
 800179a:	e7e9      	b.n	8001770 <tarea_UART_func+0xc>
	  else
		  printf("Algo no va bien\r\n");
 800179c:	4804      	ldr	r0, [pc, #16]	; (80017b0 <tarea_UART_func+0x4c>)
 800179e:	f011 fc71 	bl	8013084 <puts>
	  return_wait = osThreadFlagsWait(0x0002U, osFlagsWaitAny, osWaitForever);
 80017a2:	e7e5      	b.n	8001770 <tarea_UART_func+0xc>
 80017a4:	200007a0 	.word	0x200007a0
 80017a8:	200007c8 	.word	0x200007c8
 80017ac:	08014240 	.word	0x08014240
 80017b0:	080140d4 	.word	0x080140d4

080017b4 <temporizador_func>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_temporizador_func */
void temporizador_func(void *argument)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b082      	sub	sp, #8
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN temporizador_func */
	osThreadFlagsWait(0x0001U, osFlagsWaitAll, osWaitForever);
 80017bc:	f04f 32ff 	mov.w	r2, #4294967295
 80017c0:	2101      	movs	r1, #1
 80017c2:	2001      	movs	r0, #1
 80017c4:	f00d fc3c 	bl	800f040 <osThreadFlagsWait>
	printf("Temporizador activado\r\n");
 80017c8:	4806      	ldr	r0, [pc, #24]	; (80017e4 <temporizador_func+0x30>)
 80017ca:	f011 fc5b 	bl	8013084 <puts>
  /* Infinite loop */
  for(;;)
  {
    osDelay(pdMS_TO_TICKS(1000000)); //Periodo en ms con el que se mandan las aceleraciones
 80017ce:	4806      	ldr	r0, [pc, #24]	; (80017e8 <temporizador_func+0x34>)
 80017d0:	f00d fcb7 	bl	800f142 <osDelay>
    osThreadFlagsSet(readAccelHandle,0x0004U);
 80017d4:	4b05      	ldr	r3, [pc, #20]	; (80017ec <temporizador_func+0x38>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	2104      	movs	r1, #4
 80017da:	4618      	mov	r0, r3
 80017dc:	f00d fbe2 	bl	800efa4 <osThreadFlagsSet>
    osDelay(pdMS_TO_TICKS(1000000)); //Periodo en ms con el que se mandan las aceleraciones
 80017e0:	e7f5      	b.n	80017ce <temporizador_func+0x1a>
 80017e2:	bf00      	nop
 80017e4:	0801424c 	.word	0x0801424c
 80017e8:	000f4240 	.word	0x000f4240
 80017ec:	20000784 	.word	0x20000784

080017f0 <sendMQTT_func>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_sendMQTT_func */
void sendMQTT_func(void *argument)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b0a4      	sub	sp, #144	; 0x90
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN sendMQTT_func */
	uint32_t return_wait = 0U;
 80017f8:	2300      	movs	r3, #0
 80017fa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	uintptr_t mensaje;

	uint16_t iter;
	uint16_t max_iter;

	printf("Definimos mqtt\r\n");
 80017fe:	4850      	ldr	r0, [pc, #320]	; (8001940 <sendMQTT_func+0x150>)
 8001800:	f011 fc40 	bl	8013084 <puts>

	const uint32_t ulMaxPublishCount = 5UL;
 8001804:	2305      	movs	r3, #5
 8001806:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	NetworkContext_t xNetworkContext = { 0 };
 800180a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800180e:	2200      	movs	r2, #0
 8001810:	601a      	str	r2, [r3, #0]
 8001812:	605a      	str	r2, [r3, #4]
	MQTTContext_t xMQTTContext;
	MQTTStatus_t xMQTTStatus;
	TransportStatus_t xNetworkStatus;
	char payLoad[16];

	printf("Esperamos a que este conectado al wifi\r\n");
 8001814:	484b      	ldr	r0, [pc, #300]	; (8001944 <sendMQTT_func+0x154>)
 8001816:	f011 fc35 	bl	8013084 <puts>
	osThreadFlagsWait(0x0001U, osFlagsWaitAny, osWaitForever);
 800181a:	f04f 32ff 	mov.w	r2, #4294967295
 800181e:	2100      	movs	r1, #0
 8001820:	2001      	movs	r0, #1
 8001822:	f00d fc0d 	bl	800f040 <osThreadFlagsWait>
	printf("Ya se ha conectado al wifi\r\n");
 8001826:	4848      	ldr	r0, [pc, #288]	; (8001948 <sendMQTT_func+0x158>)
 8001828:	f011 fc2c 	bl	8013084 <puts>

	/* Attempt to connect to the MQTT broker. The socket is returned in
	* the network context structure. */
	xNetworkStatus = prvConnectToServer( &xNetworkContext );
 800182c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001830:	4618      	mov	r0, r3
 8001832:	f000 f8cf 	bl	80019d4 <prvConnectToServer>
 8001836:	4603      	mov	r3, r0
 8001838:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
	printf("Mitad de la definicion mqtt\r\n");
 800183c:	4843      	ldr	r0, [pc, #268]	; (800194c <sendMQTT_func+0x15c>)
 800183e:	f011 fc21 	bl	8013084 <puts>
	configASSERT( xNetworkStatus == PLAINTEXT_TRANSPORT_SUCCESS );
 8001842:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8001846:	2b01      	cmp	r3, #1
 8001848:	d00a      	beq.n	8001860 <sendMQTT_func+0x70>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800184a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800184e:	f383 8811 	msr	BASEPRI, r3
 8001852:	f3bf 8f6f 	isb	sy
 8001856:	f3bf 8f4f 	dsb	sy
 800185a:	67bb      	str	r3, [r7, #120]	; 0x78
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800185c:	bf00      	nop
 800185e:	e7fe      	b.n	800185e <sendMQTT_func+0x6e>
	//LOG(("Trying to create an MQTT connection\n"));
	prvCreateMQTTConnectionWithBroker( &xMQTTContext, &xNetworkContext );
 8001860:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8001864:	f107 031c 	add.w	r3, r7, #28
 8001868:	4611      	mov	r1, r2
 800186a:	4618      	mov	r0, r3
 800186c:	f000 f8fc 	bl	8001a68 <prvCreateMQTTConnectionWithBroker>
	prvMQTTSubscribeToTopic(&xMQTTContext,pcTempTopic2);
 8001870:	f107 031c 	add.w	r3, r7, #28
 8001874:	4936      	ldr	r1, [pc, #216]	; (8001950 <sendMQTT_func+0x160>)
 8001876:	4618      	mov	r0, r3
 8001878:	f000 f9ac 	bl	8001bd4 <prvMQTTSubscribeToTopic>

	printf("Definido mqtt\r\n");
 800187c:	4835      	ldr	r0, [pc, #212]	; (8001954 <sendMQTT_func+0x164>)
 800187e:	f011 fc01 	bl	8013084 <puts>

	osThreadFlagsSet(readAccelHandle,0x0002U);
 8001882:	4b35      	ldr	r3, [pc, #212]	; (8001958 <sendMQTT_func+0x168>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	2102      	movs	r1, #2
 8001888:	4618      	mov	r0, r3
 800188a:	f00d fb8b 	bl	800efa4 <osThreadFlagsSet>


  /* Infinite loop */
  for(;;)
  {
	  MQTT_ProcessLoop(&xMQTTContext);
 800188e:	f107 031c 	add.w	r3, r7, #28
 8001892:	4618      	mov	r0, r3
 8001894:	f00b fa15 	bl	800ccc2 <MQTT_ProcessLoop>
	  return_wait = osThreadFlagsWait(MODO_NORMAL | MODO_CONTINUO, osFlagsWaitAny, osWaitForever);
 8001898:	f04f 32ff 	mov.w	r2, #4294967295
 800189c:	2100      	movs	r1, #0
 800189e:	2003      	movs	r0, #3
 80018a0:	f00d fbce 	bl	800f040 <osThreadFlagsWait>
 80018a4:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
	  if(return_wait == MODO_NORMAL){
 80018a8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80018ac:	2b01      	cmp	r3, #1
 80018ae:	d106      	bne.n	80018be <sendMQTT_func+0xce>
		  printf("Vamos a recibir 64 aceleraciones\r\n");
 80018b0:	482a      	ldr	r0, [pc, #168]	; (800195c <sendMQTT_func+0x16c>)
 80018b2:	f011 fbe7 	bl	8013084 <puts>
		  max_iter = MUESTRAS_NORMAL;
 80018b6:	2340      	movs	r3, #64	; 0x40
 80018b8:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 80018bc:	e00a      	b.n	80018d4 <sendMQTT_func+0xe4>

	  }
	  else if(return_wait == MODO_CONTINUO){
 80018be:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80018c2:	2b02      	cmp	r3, #2
 80018c4:	d106      	bne.n	80018d4 <sendMQTT_func+0xe4>
		  printf("Vamos a recibir 1024 aceleraciones\r\n");
 80018c6:	4826      	ldr	r0, [pc, #152]	; (8001960 <sendMQTT_func+0x170>)
 80018c8:	f011 fbdc 	bl	8013084 <puts>
		  max_iter = MUESTRAS_CONTINUO;
 80018cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80018d0:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
	  }
	  for (iter=0;iter<max_iter;iter++){
 80018d4:	2300      	movs	r3, #0
 80018d6:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 80018da:	e020      	b.n	800191e <sendMQTT_func+0x12e>
		  estado = osMessageQueueGet(print_queueHandle, &mensaje, NULL, osWaitForever);
 80018dc:	4b21      	ldr	r3, [pc, #132]	; (8001964 <sendMQTT_func+0x174>)
 80018de:	6818      	ldr	r0, [r3, #0]
 80018e0:	f107 0174 	add.w	r1, r7, #116	; 0x74
 80018e4:	f04f 33ff 	mov.w	r3, #4294967295
 80018e8:	2200      	movs	r2, #0
 80018ea:	f00d fd19 	bl	800f320 <osMessageQueueGet>
 80018ee:	67f8      	str	r0, [r7, #124]	; 0x7c

		  if (estado == osOK)
 80018f0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d10e      	bne.n	8001914 <sendMQTT_func+0x124>
		  {
			  //printf("%s",(char*)mensaje);
			  //HAL_UART_Transmit(&huart1, (uint8_t*)mensaje, strlen(mensaje),10);
			  sprintf(payLoad,"%s",mensaje);
 80018f6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80018f8:	f107 030c 	add.w	r3, r7, #12
 80018fc:	491a      	ldr	r1, [pc, #104]	; (8001968 <sendMQTT_func+0x178>)
 80018fe:	4618      	mov	r0, r3
 8001900:	f011 fc76 	bl	80131f0 <siprintf>
			  prvMQTTPublishToTopic(&xMQTTContext,pcTempTopic,payLoad);
 8001904:	f107 020c 	add.w	r2, r7, #12
 8001908:	f107 031c 	add.w	r3, r7, #28
 800190c:	4917      	ldr	r1, [pc, #92]	; (800196c <sendMQTT_func+0x17c>)
 800190e:	4618      	mov	r0, r3
 8001910:	f000 f926 	bl	8001b60 <prvMQTTPublishToTopic>
	  for (iter=0;iter<max_iter;iter++){
 8001914:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8001918:	3301      	adds	r3, #1
 800191a:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 800191e:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 8001922:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8001926:	429a      	cmp	r2, r3
 8001928:	d3d8      	bcc.n	80018dc <sendMQTT_func+0xec>
		  }
	  }
	  printf("Espacio en la cola: %d\r\n",osMessageQueueGetSpace(print_queueHandle));
 800192a:	4b0e      	ldr	r3, [pc, #56]	; (8001964 <sendMQTT_func+0x174>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	4618      	mov	r0, r3
 8001930:	f00d fd54 	bl	800f3dc <osMessageQueueGetSpace>
 8001934:	4603      	mov	r3, r0
 8001936:	4619      	mov	r1, r3
 8001938:	480d      	ldr	r0, [pc, #52]	; (8001970 <sendMQTT_func+0x180>)
 800193a:	f011 fb1d 	bl	8012f78 <iprintf>
	  MQTT_ProcessLoop(&xMQTTContext);
 800193e:	e7a6      	b.n	800188e <sendMQTT_func+0x9e>
 8001940:	08014264 	.word	0x08014264
 8001944:	08014274 	.word	0x08014274
 8001948:	0801429c 	.word	0x0801429c
 800194c:	080142b8 	.word	0x080142b8
 8001950:	080142d8 	.word	0x080142d8
 8001954:	080142f4 	.word	0x080142f4
 8001958:	20000784 	.word	0x20000784
 800195c:	08014304 	.word	0x08014304
 8001960:	08014328 	.word	0x08014328
 8001964:	2000079c 	.word	0x2000079c
 8001968:	0801434c 	.word	0x0801434c
 800196c:	08014350 	.word	0x08014350
 8001970:	08014368 	.word	0x08014368

08001974 <wifiStartTask_func>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_wifiStartTask_func */
void wifiStartTask_func(void *argument)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b082      	sub	sp, #8
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN wifiStartTask_func */
	osThreadFlagsWait(0x0001U, osFlagsWaitAny, osWaitForever);
 800197c:	f04f 32ff 	mov.w	r2, #4294967295
 8001980:	2100      	movs	r1, #0
 8001982:	2001      	movs	r0, #1
 8001984:	f00d fb5c 	bl	800f040 <osThreadFlagsWait>
	wifi_connect();
 8001988:	f7ff fbee 	bl	8001168 <wifi_connect>
	osThreadFlagsSet(sendMQTTHandle,0x0001U);
 800198c:	4b04      	ldr	r3, [pc, #16]	; (80019a0 <wifiStartTask_func+0x2c>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	2101      	movs	r1, #1
 8001992:	4618      	mov	r0, r3
 8001994:	f00d fb06 	bl	800efa4 <osThreadFlagsSet>
  /* Infinite loop */
  for(;;)
  {
	  osDelay(pdMS_TO_TICKS(1));
 8001998:	2001      	movs	r0, #1
 800199a:	f00d fbd2 	bl	800f142 <osDelay>
 800199e:	e7fb      	b.n	8001998 <wifiStartTask_func+0x24>
 80019a0:	20000794 	.word	0x20000794

080019a4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b082      	sub	sp, #8
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4a04      	ldr	r2, [pc, #16]	; (80019c4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d101      	bne.n	80019ba <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80019b6:	f000 ff3d 	bl	8002834 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80019ba:	bf00      	nop
 80019bc:	3708      	adds	r7, #8
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	bf00      	nop
 80019c4:	40001000 	.word	0x40001000

080019c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019c8:	b480      	push	{r7}
 80019ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019cc:	b672      	cpsid	i
}
 80019ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019d0:	e7fe      	b.n	80019d0 <Error_Handler+0x8>
	...

080019d4 <prvConnectToServer>:
 */
static uint32_t ulGlobalEntryTimeMs;


TransportStatus_t prvConnectToServer( NetworkContext_t * pxNetworkContext )
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b086      	sub	sp, #24
 80019d8:	af02      	add	r7, sp, #8
 80019da:	6078      	str	r0, [r7, #4]
   TransportStatus_t xNetworkStatus;
   uint8_t ret;
   uint8_t ipaddr[4]=MQTT_BROKER_ENDPOINT_IP;
 80019dc:	4b1d      	ldr	r3, [pc, #116]	; (8001a54 <prvConnectToServer+0x80>)
 80019de:	60bb      	str	r3, [r7, #8]

    /* Attempt to connect to MQTT broker. */
    do
    {
        /* Establish a TCP connection with the MQTT broker. */
        LOG( ( "Create a TCP connection to %s:%d.\n",
 80019e0:	f240 725b 	movw	r2, #1883	; 0x75b
 80019e4:	491c      	ldr	r1, [pc, #112]	; (8001a58 <prvConnectToServer+0x84>)
 80019e6:	481d      	ldr	r0, [pc, #116]	; (8001a5c <prvConnectToServer+0x88>)
 80019e8:	f011 fac6 	bl	8012f78 <iprintf>
                   MQTT_BROKER_ENDPOINT,
                   MQTT_BROKER_PORT ) );
        ret=WIFI_OpenClientConnection(SOCKET, WIFI_TCP_PROTOCOL, "mqtt", ipaddr , MQTT_BROKER_PORT, 0);
 80019ec:	f107 0308 	add.w	r3, r7, #8
 80019f0:	2200      	movs	r2, #0
 80019f2:	9201      	str	r2, [sp, #4]
 80019f4:	f240 725b 	movw	r2, #1883	; 0x75b
 80019f8:	9200      	str	r2, [sp, #0]
 80019fa:	4a19      	ldr	r2, [pc, #100]	; (8001a60 <prvConnectToServer+0x8c>)
 80019fc:	2100      	movs	r1, #0
 80019fe:	2000      	movs	r0, #0
 8001a00:	f009 fb74 	bl	800b0ec <WIFI_OpenClientConnection>
 8001a04:	4603      	mov	r3, r0
 8001a06:	73bb      	strb	r3, [r7, #14]
		if(ret!=WIFI_STATUS_OK) {
 8001a08:	7bbb      	ldrb	r3, [r7, #14]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d009      	beq.n	8001a22 <prvConnectToServer+0x4e>
			LOG(("Error in opening MQTT connection: %d\n",ret));
 8001a0e:	7bbb      	ldrb	r3, [r7, #14]
 8001a10:	4619      	mov	r1, r3
 8001a12:	4814      	ldr	r0, [pc, #80]	; (8001a64 <prvConnectToServer+0x90>)
 8001a14:	f011 fab0 	bl	8012f78 <iprintf>
			osDelay(pdMS_TO_TICKS(10000));
 8001a18:	f242 7010 	movw	r0, #10000	; 0x2710
 8001a1c:	f00d fb91 	bl	800f142 <osDelay>
 8001a20:	e00f      	b.n	8001a42 <prvConnectToServer+0x6e>
		} else {
	        pxNetworkContext->socket = SOCKET;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	2200      	movs	r2, #0
 8001a26:	701a      	strb	r2, [r3, #0]
	        pxNetworkContext->socket_open=1;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2201      	movs	r2, #1
 8001a2c:	705a      	strb	r2, [r3, #1]
	        memcpy(pxNetworkContext->ipaddr,ipaddr,4*sizeof(uint8_t));
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	3302      	adds	r3, #2
 8001a32:	68ba      	ldr	r2, [r7, #8]
 8001a34:	601a      	str	r2, [r3, #0]
	        pxNetworkContext->remote_port=MQTT_BROKER_PORT;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	f240 725b 	movw	r2, #1883	; 0x75b
 8001a3c:	80da      	strh	r2, [r3, #6]
	        xNetworkStatus = PLAINTEXT_TRANSPORT_SUCCESS;
 8001a3e:	2301      	movs	r3, #1
 8001a40:	73fb      	strb	r3, [r7, #15]
		}


    } while( ( xNetworkStatus != PLAINTEXT_TRANSPORT_SUCCESS ) );
 8001a42:	7bfb      	ldrb	r3, [r7, #15]
 8001a44:	2b01      	cmp	r3, #1
 8001a46:	d1cb      	bne.n	80019e0 <prvConnectToServer+0xc>

    return PLAINTEXT_TRANSPORT_SUCCESS;
 8001a48:	2301      	movs	r3, #1
}
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	3710      	adds	r7, #16
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop
 8001a54:	5e5d795b 	.word	0x5e5d795b
 8001a58:	0801439c 	.word	0x0801439c
 8001a5c:	080143b0 	.word	0x080143b0
 8001a60:	080143d4 	.word	0x080143d4
 8001a64:	080143dc 	.word	0x080143dc

08001a68 <prvCreateMQTTConnectionWithBroker>:

void prvCreateMQTTConnectionWithBroker( MQTTContext_t * pxMQTTContext,
                                               NetworkContext_t * pxNetworkContext )
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b094      	sub	sp, #80	; 0x50
 8001a6c:	af02      	add	r7, sp, #8
 8001a6e:	6078      	str	r0, [r7, #4]
 8001a70:	6039      	str	r1, [r7, #0]
    MQTTConnectInfo_t xConnectInfo;
    bool xSessionPresent;
    TransportInterface_t xTransport;

    /* Fill in Transport Interface send and receive function pointers. */
    init_transport_from_socket( pxNetworkContext->socket, 1,
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	7818      	ldrb	r0, [r3, #0]
 8001a76:	f107 030c 	add.w	r3, r7, #12
 8001a7a:	683a      	ldr	r2, [r7, #0]
 8001a7c:	2101      	movs	r1, #1
 8001a7e:	f00d f91d 	bl	800ecbc <init_transport_from_socket>
                                     pxNetworkContext,
                                     &xTransport );
    /* Initialize MQTT library. */
    xResult = MQTT_Init( pxMQTTContext,
 8001a82:	f107 010c 	add.w	r1, r7, #12
 8001a86:	4b30      	ldr	r3, [pc, #192]	; (8001b48 <prvCreateMQTTConnectionWithBroker+0xe0>)
 8001a88:	9300      	str	r3, [sp, #0]
 8001a8a:	4b30      	ldr	r3, [pc, #192]	; (8001b4c <prvCreateMQTTConnectionWithBroker+0xe4>)
 8001a8c:	4a30      	ldr	r2, [pc, #192]	; (8001b50 <prvCreateMQTTConnectionWithBroker+0xe8>)
 8001a8e:	6878      	ldr	r0, [r7, #4]
 8001a90:	f00a ff4a 	bl	800c928 <MQTT_Init>
 8001a94:	4603      	mov	r3, r0
 8001a96:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
                         &xTransport,
                         prvGetTimeMs,
                         prvEventCallback,
                         &xBuffer );

    configASSERT( xResult == MQTTSuccess );
 8001a9a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d00a      	beq.n	8001ab8 <prvCreateMQTTConnectionWithBroker+0x50>
	__asm volatile
 8001aa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001aa6:	f383 8811 	msr	BASEPRI, r3
 8001aaa:	f3bf 8f6f 	isb	sy
 8001aae:	f3bf 8f4f 	dsb	sy
 8001ab2:	643b      	str	r3, [r7, #64]	; 0x40
}
 8001ab4:	bf00      	nop
 8001ab6:	e7fe      	b.n	8001ab6 <prvCreateMQTTConnectionWithBroker+0x4e>
    LOG(("MQTT initialized\n"));
 8001ab8:	4826      	ldr	r0, [pc, #152]	; (8001b54 <prvCreateMQTTConnectionWithBroker+0xec>)
 8001aba:	f011 fae3 	bl	8013084 <puts>

    /* Many fields not used in this demo so start with everything at 0. */
    ( void ) memset( ( void * ) &xConnectInfo, 0x00, sizeof( xConnectInfo ) );
 8001abe:	f107 0320 	add.w	r3, r7, #32
 8001ac2:	221c      	movs	r2, #28
 8001ac4:	2100      	movs	r1, #0
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	f010 fecb 	bl	8012862 <memset>

    /* Start with a clean session i.e. direct the MQTT broker to discard any
     * previous session data. Also, establishing a connection with clean
     * session will ensure that the broker does not store any data when this
     * client gets disconnected. */
    xConnectInfo.cleanSession = true;
 8001acc:	2301      	movs	r3, #1
 8001ace:	f887 3020 	strb.w	r3, [r7, #32]

    /* The client identifier is used to uniquely identify this MQTT client to
     * the MQTT broker. In a production device the identifier can be something
     * unique, such as a device serial number. */
    xConnectInfo.pClientIdentifier = MQTTCLIENT_IDENTIFIER;
 8001ad2:	4b21      	ldr	r3, [pc, #132]	; (8001b58 <prvCreateMQTTConnectionWithBroker+0xf0>)
 8001ad4:	627b      	str	r3, [r7, #36]	; 0x24
    xConnectInfo.clientIdentifierLength = ( uint16_t ) strlen(
 8001ad6:	2317      	movs	r3, #23
 8001ad8:	853b      	strh	r3, [r7, #40]	; 0x28
                                                  MQTTCLIENT_IDENTIFIER );
    xConnectInfo.pUserName=mqttUserName;
 8001ada:	2300      	movs	r3, #0
 8001adc:	62fb      	str	r3, [r7, #44]	; 0x2c
    xConnectInfo.userNameLength=strlen(mqttUserName);
 8001ade:	2000      	movs	r0, #0
 8001ae0:	f7fe fb76 	bl	80001d0 <strlen>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	b29b      	uxth	r3, r3
 8001ae8:	863b      	strh	r3, [r7, #48]	; 0x30
    xConnectInfo.pPassword=mqttPass;
 8001aea:	2300      	movs	r3, #0
 8001aec:	637b      	str	r3, [r7, #52]	; 0x34
    xConnectInfo.passwordLength=strlen(mqttPass);
 8001aee:	2000      	movs	r0, #0
 8001af0:	f7fe fb6e 	bl	80001d0 <strlen>
 8001af4:	4603      	mov	r3, r0
 8001af6:	b29b      	uxth	r3, r3
 8001af8:	873b      	strh	r3, [r7, #56]	; 0x38

    /* Set MQTT keep-alive period. It is the responsibility of the application
     * to ensure that the interval between Control Packets being sent does not
     * exceed the Keep Alive value.  In the absence of sending any other
     * Control Packets, the Client MUST send a PINGREQ Packet. */
    xConnectInfo.keepAliveSeconds = 60U;;
 8001afa:	233c      	movs	r3, #60	; 0x3c
 8001afc:	847b      	strh	r3, [r7, #34]	; 0x22

    /* Send MQTT CONNECT packet to broker. LWT is not used in this demo, so it
     * is passed as NULL. */
    xResult = MQTT_Connect( pxMQTTContext,
 8001afe:	f107 0120 	add.w	r1, r7, #32
 8001b02:	f107 031f 	add.w	r3, r7, #31
 8001b06:	9300      	str	r3, [sp, #0]
 8001b08:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	6878      	ldr	r0, [r7, #4]
 8001b10:	f00a ff5f 	bl	800c9d2 <MQTT_Connect>
 8001b14:	4603      	mov	r3, r0
 8001b16:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
                            &xConnectInfo,
                            NULL,
                            1000U,
                            &xSessionPresent );
    configASSERT( xResult == MQTTSuccess );
 8001b1a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d00a      	beq.n	8001b38 <prvCreateMQTTConnectionWithBroker+0xd0>
	__asm volatile
 8001b22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b26:	f383 8811 	msr	BASEPRI, r3
 8001b2a:	f3bf 8f6f 	isb	sy
 8001b2e:	f3bf 8f4f 	dsb	sy
 8001b32:	63fb      	str	r3, [r7, #60]	; 0x3c
}
 8001b34:	bf00      	nop
 8001b36:	e7fe      	b.n	8001b36 <prvCreateMQTTConnectionWithBroker+0xce>
    LOG(("MQTT connected to broker\n"));
 8001b38:	4808      	ldr	r0, [pc, #32]	; (8001b5c <prvCreateMQTTConnectionWithBroker+0xf4>)
 8001b3a:	f011 faa3 	bl	8013084 <puts>

}
 8001b3e:	bf00      	nop
 8001b40:	3748      	adds	r7, #72	; 0x48
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}
 8001b46:	bf00      	nop
 8001b48:	20000000 	.word	0x20000000
 8001b4c:	08001d85 	.word	0x08001d85
 8001b50:	08001d55 	.word	0x08001d55
 8001b54:	08014404 	.word	0x08014404
 8001b58:	08014418 	.word	0x08014418
 8001b5c:	08014430 	.word	0x08014430

08001b60 <prvMQTTPublishToTopic>:

void prvMQTTPublishToTopic( MQTTContext_t * pxMQTTContext, char * topic, void * payload )
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b08a      	sub	sp, #40	; 0x28
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	60f8      	str	r0, [r7, #12]
 8001b68:	60b9      	str	r1, [r7, #8]
 8001b6a:	607a      	str	r2, [r7, #4]
    MQTTStatus_t xResult;
    MQTTPublishInfo_t xMQTTPublishInfo;

    /* Some fields are not used by this demo so start with everything at 0. */
    ( void ) memset( ( void * ) &xMQTTPublishInfo, 0x00, sizeof(
 8001b6c:	f107 0310 	add.w	r3, r7, #16
 8001b70:	2214      	movs	r2, #20
 8001b72:	2100      	movs	r1, #0
 8001b74:	4618      	mov	r0, r3
 8001b76:	f010 fe74 	bl	8012862 <memset>
                                                        xMQTTPublishInfo ) );

    /* This demo uses QoS0. */
    xMQTTPublishInfo.qos = MQTTQoS0;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	743b      	strb	r3, [r7, #16]
    xMQTTPublishInfo.retain = false;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	747b      	strb	r3, [r7, #17]
    xMQTTPublishInfo.pTopicName = topic;
 8001b82:	68bb      	ldr	r3, [r7, #8]
 8001b84:	617b      	str	r3, [r7, #20]
    xMQTTPublishInfo.topicNameLength = ( uint16_t ) strlen( topic );
 8001b86:	68b8      	ldr	r0, [r7, #8]
 8001b88:	f7fe fb22 	bl	80001d0 <strlen>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	b29b      	uxth	r3, r3
 8001b90:	833b      	strh	r3, [r7, #24]
    xMQTTPublishInfo.pPayload = payload;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	61fb      	str	r3, [r7, #28]
    xMQTTPublishInfo.payloadLength = strlen( payload );
 8001b96:	6878      	ldr	r0, [r7, #4]
 8001b98:	f7fe fb1a 	bl	80001d0 <strlen>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	623b      	str	r3, [r7, #32]

    /* Send PUBLISH packet. Packet ID is not used for a QoS0 publish. */
    xResult = MQTT_Publish( pxMQTTContext, &xMQTTPublishInfo, 0U );
 8001ba0:	f107 0310 	add.w	r3, r7, #16
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	4619      	mov	r1, r3
 8001ba8:	68f8      	ldr	r0, [r7, #12]
 8001baa:	f00a ffbd 	bl	800cb28 <MQTT_Publish>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if(xResult==MQTTSuccess) LOG(("Published to topic %s: %s\n",topic,payload));
 8001bb4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d104      	bne.n	8001bc6 <prvMQTTPublishToTopic+0x66>
 8001bbc:	687a      	ldr	r2, [r7, #4]
 8001bbe:	68b9      	ldr	r1, [r7, #8]
 8001bc0:	4803      	ldr	r0, [pc, #12]	; (8001bd0 <prvMQTTPublishToTopic+0x70>)
 8001bc2:	f011 f9d9 	bl	8012f78 <iprintf>
    //configASSERT( xResult == MQTTSuccess );
}
 8001bc6:	bf00      	nop
 8001bc8:	3728      	adds	r7, #40	; 0x28
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}
 8001bce:	bf00      	nop
 8001bd0:	0801444c 	.word	0x0801444c

08001bd4 <prvMQTTSubscribeToTopic>:

void prvMQTTSubscribeToTopic( MQTTContext_t * pxMQTTContext, char * topic )
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b086      	sub	sp, #24
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
 8001bdc:	6039      	str	r1, [r7, #0]
    MQTTStatus_t xResult = MQTTSuccess;
 8001bde:	2300      	movs	r3, #0
 8001be0:	75fb      	strb	r3, [r7, #23]
    MQTTSubscribeInfo_t xMQTTSubscription[ TOPIC_COUNT ];
    bool xFailedSubscribeToTopic = false;
 8001be2:	2300      	movs	r3, #0
 8001be4:	75bb      	strb	r3, [r7, #22]

    /* Some fields not used by this demo so start with everything at 0. */
    ( void ) memset( ( void * ) &xMQTTSubscription, 0x00, sizeof( xMQTTSubscription ) );
 8001be6:	f107 0308 	add.w	r3, r7, #8
 8001bea:	220c      	movs	r2, #12
 8001bec:	2100      	movs	r1, #0
 8001bee:	4618      	mov	r0, r3
 8001bf0:	f010 fe37 	bl	8012862 <memset>

    /* Each packet requires a unique ID. */
    usSubscribePacketIdentifier = MQTT_GetPacketId( pxMQTTContext );
 8001bf4:	6878      	ldr	r0, [r7, #4]
 8001bf6:	f00b f884 	bl	800cd02 <MQTT_GetPacketId>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	461a      	mov	r2, r3
 8001bfe:	4b1e      	ldr	r3, [pc, #120]	; (8001c78 <prvMQTTSubscribeToTopic+0xa4>)
 8001c00:	801a      	strh	r2, [r3, #0]

    /* Subscribe to the pcExampleTopic topic filter. This example subscribes
     * to only one topic and uses QoS0. */
    xMQTTSubscription[ 0 ].qos = MQTTQoS0;
 8001c02:	2300      	movs	r3, #0
 8001c04:	723b      	strb	r3, [r7, #8]
    xMQTTSubscription[ 0 ].pTopicFilter = topic;
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	60fb      	str	r3, [r7, #12]
    xMQTTSubscription[ 0 ].topicFilterLength = strlen( topic );
 8001c0a:	6838      	ldr	r0, [r7, #0]
 8001c0c:	f7fe fae0 	bl	80001d0 <strlen>
 8001c10:	4603      	mov	r3, r0
 8001c12:	b29b      	uxth	r3, r3
 8001c14:	823b      	strh	r3, [r7, #16]
    do
    {
        /* The client is already connected to the broker. Subscribe to the topic
         * as specified in pcExampleTopic by sending a subscribe packet then
         * waiting for a subscribe acknowledgment (SUBACK). */
        xResult = MQTT_Subscribe( pxMQTTContext,
 8001c16:	4b18      	ldr	r3, [pc, #96]	; (8001c78 <prvMQTTSubscribeToTopic+0xa4>)
 8001c18:	881b      	ldrh	r3, [r3, #0]
 8001c1a:	f107 0108 	add.w	r1, r7, #8
 8001c1e:	2201      	movs	r2, #1
 8001c20:	6878      	ldr	r0, [r7, #4]
 8001c22:	f00a ff4e 	bl	800cac2 <MQTT_Subscribe>
 8001c26:	4603      	mov	r3, r0
 8001c28:	75fb      	strb	r3, [r7, #23]
                                  xMQTTSubscription,
                                  1, /* Only subscribing to one topic. */
                                  usSubscribePacketIdentifier );
        if(xResult==MQTTSuccess) LOG(("Subscription to %s, result: %d, success\n",topic,xResult));
 8001c2a:	7dfb      	ldrb	r3, [r7, #23]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d106      	bne.n	8001c3e <prvMQTTSubscribeToTopic+0x6a>
 8001c30:	7dfb      	ldrb	r3, [r7, #23]
 8001c32:	461a      	mov	r2, r3
 8001c34:	6839      	ldr	r1, [r7, #0]
 8001c36:	4811      	ldr	r0, [pc, #68]	; (8001c7c <prvMQTTSubscribeToTopic+0xa8>)
 8001c38:	f011 f99e 	bl	8012f78 <iprintf>
 8001c3c:	e005      	b.n	8001c4a <prvMQTTSubscribeToTopic+0x76>
        else LOG(("Subscription to %s, result: %d, failed\n",topic,xResult));
 8001c3e:	7dfb      	ldrb	r3, [r7, #23]
 8001c40:	461a      	mov	r2, r3
 8001c42:	6839      	ldr	r1, [r7, #0]
 8001c44:	480e      	ldr	r0, [pc, #56]	; (8001c80 <prvMQTTSubscribeToTopic+0xac>)
 8001c46:	f011 f997 	bl	8012f78 <iprintf>
         * packet.  This demo uses the generic packet processing function
         * everywhere to highlight this fact. Note there is a separate demo that
         * shows how to use coreMQTT in a thread safe way – in which case the
         * MQTT protocol runs in the background and this call is not required. */
        /* For version 1.1.0: xResult = MQTT_ProcessLoop( pxMQTTContext, 1000 ); */
        xResult = MQTT_ProcessLoop( pxMQTTContext );
 8001c4a:	6878      	ldr	r0, [r7, #4]
 8001c4c:	f00b f839 	bl	800ccc2 <MQTT_ProcessLoop>
 8001c50:	4603      	mov	r3, r0
 8001c52:	75fb      	strb	r3, [r7, #23]
        //configASSERT( xResult == MQTTSuccess );

        /* Reset flag before checking suback responses. */
        xFailedSubscribeToTopic = false;
 8001c54:	2300      	movs	r3, #0
 8001c56:	75bb      	strb	r3, [r7, #22]
         * #xTopicFilterContext is updated in the event callback (shown in a
         * code block below) to reflect the status of the SUBACK sent by the
         * broker. It represents either the QoS level granted by the server upon
         * subscription, or acknowledgment of server rejection of the
         * subscription request. */
        if( xTopicFilterContext[0].xSubAckStatus == MQTTSubAckFailure )
 8001c58:	4b0a      	ldr	r3, [pc, #40]	; (8001c84 <prvMQTTSubscribeToTopic+0xb0>)
 8001c5a:	791b      	ldrb	r3, [r3, #4]
 8001c5c:	2b80      	cmp	r3, #128	; 0x80
 8001c5e:	d102      	bne.n	8001c66 <prvMQTTSubscribeToTopic+0x92>
        {
            xFailedSubscribeToTopic = true;
 8001c60:	2301      	movs	r3, #1
 8001c62:	75bb      	strb	r3, [r7, #22]
            break;
 8001c64:	e003      	b.n	8001c6e <prvMQTTSubscribeToTopic+0x9a>
        }

    } while( xFailedSubscribeToTopic == true  );
 8001c66:	7dbb      	ldrb	r3, [r7, #22]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d1d4      	bne.n	8001c16 <prvMQTTSubscribeToTopic+0x42>
}
 8001c6c:	bf00      	nop
 8001c6e:	bf00      	nop
 8001c70:	3718      	adds	r7, #24
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}
 8001c76:	bf00      	nop
 8001c78:	20000bb4 	.word	0x20000bb4
 8001c7c:	08014468 	.word	0x08014468
 8001c80:	08014494 	.word	0x08014494
 8001c84:	20000008 	.word	0x20000008

08001c88 <prvMQTTProcessIncomingPublish>:

void prvMQTTProcessIncomingPublish( MQTTPublishInfo_t *pxPublishInfo )
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b0c2      	sub	sp, #264	; 0x108
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001c92:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001c96:	6018      	str	r0, [r3, #0]
	char buffer1[128];
	char buffer2[128];
    const char * pTopicName;

	// pPayload no termina en \0, hay que copiarlo en un buffer para imprimirlo. Lo mismo con pTopicName
	memcpy(buffer1,pxPublishInfo->pPayload,min(127,pxPublishInfo->payloadLength));
 8001c98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001c9c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	68d9      	ldr	r1, [r3, #12]
 8001ca4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001ca8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	691b      	ldr	r3, [r3, #16]
 8001cb0:	2b7f      	cmp	r3, #127	; 0x7f
 8001cb2:	bf28      	it	cs
 8001cb4:	237f      	movcs	r3, #127	; 0x7f
 8001cb6:	461a      	mov	r2, r3
 8001cb8:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f010 fda8 	bl	8012812 <memcpy>
	buffer1[min(1023,pxPublishInfo->payloadLength)]='\0';
 8001cc2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001cc6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	691b      	ldr	r3, [r3, #16]
 8001cce:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	bf28      	it	cs
 8001cd6:	4613      	movcs	r3, r2
 8001cd8:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8001cdc:	443b      	add	r3, r7
 8001cde:	2200      	movs	r2, #0
 8001ce0:	f803 2c80 	strb.w	r2, [r3, #-128]
	memcpy(buffer2,pxPublishInfo->pTopicName,min(127,pxPublishInfo->topicNameLength));
 8001ce4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001ce8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	6859      	ldr	r1, [r3, #4]
 8001cf0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001cf4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	891b      	ldrh	r3, [r3, #8]
 8001cfc:	2b7f      	cmp	r3, #127	; 0x7f
 8001cfe:	bf28      	it	cs
 8001d00:	237f      	movcs	r3, #127	; 0x7f
 8001d02:	b29b      	uxth	r3, r3
 8001d04:	461a      	mov	r2, r3
 8001d06:	f107 0308 	add.w	r3, r7, #8
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	f010 fd81 	bl	8012812 <memcpy>
	buffer2[min(1023,pxPublishInfo->topicNameLength)]='\0';
 8001d10:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001d14:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	891b      	ldrh	r3, [r3, #8]
 8001d1c:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8001d20:	4293      	cmp	r3, r2
 8001d22:	bf28      	it	cs
 8001d24:	4613      	movcs	r3, r2
 8001d26:	b29b      	uxth	r3, r3
 8001d28:	461a      	mov	r2, r3
 8001d2a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001d2e:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001d32:	2100      	movs	r1, #0
 8001d34:	5499      	strb	r1, [r3, r2]

	printf("Topic \"%s\": publicado \"%s\"\n",buffer2,buffer1);
 8001d36:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001d3a:	f107 0308 	add.w	r3, r7, #8
 8001d3e:	4619      	mov	r1, r3
 8001d40:	4803      	ldr	r0, [pc, #12]	; (8001d50 <prvMQTTProcessIncomingPublish+0xc8>)
 8001d42:	f011 f919 	bl	8012f78 <iprintf>

  // Actuar localmente sobre los LEDs o alguna otra cosa
	//if(buffer1[0]=='1') BSP_LED_On(LED2);
	//if(buffer1[0]=='0') BSP_LED_Off(LED2);

}
 8001d46:	bf00      	nop
 8001d48:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bd80      	pop	{r7, pc}
 8001d50:	080144bc 	.word	0x080144bc

08001d54 <prvGetTimeMs>:

uint32_t prvGetTimeMs( void )
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b082      	sub	sp, #8
 8001d58:	af00      	add	r7, sp, #0
#define MILLISECONDS_PER_TICK                             ( 1000 / configTICK_RATE_HZ )
    TickType_t xTickCount = 0;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	607b      	str	r3, [r7, #4]
    uint32_t ulTimeMs = 0UL;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	603b      	str	r3, [r7, #0]

    /* Get the current tick count. */
    xTickCount = xTaskGetTickCount();
 8001d62:	f00e fe2b 	bl	80109bc <xTaskGetTickCount>
 8001d66:	6078      	str	r0, [r7, #4]

    /* Convert the ticks to milliseconds. */
    ulTimeMs = ( uint32_t ) xTickCount * MILLISECONDS_PER_TICK;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	603b      	str	r3, [r7, #0]

    /* Reduce ulGlobalEntryTimeMs from obtained time so as to always return the
     * elapsed time in the application. */
    ulTimeMs = ( uint32_t ) ( ulTimeMs - ulGlobalEntryTimeMs );
 8001d6c:	4b04      	ldr	r3, [pc, #16]	; (8001d80 <prvGetTimeMs+0x2c>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	683a      	ldr	r2, [r7, #0]
 8001d72:	1ad3      	subs	r3, r2, r3
 8001d74:	603b      	str	r3, [r7, #0]

    return ulTimeMs;
 8001d76:	683b      	ldr	r3, [r7, #0]
}
 8001d78:	4618      	mov	r0, r3
 8001d7a:	3708      	adds	r7, #8
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bd80      	pop	{r7, pc}
 8001d80:	20000bb8 	.word	0x20000bb8

08001d84 <prvEventCallback>:

void prvEventCallback( MQTTContext_t * pxMQTTContext,
                              MQTTPacketInfo_t * pxPacketInfo,
                              MQTTDeserializedInfo_t * pxDeserializedInfo )
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b084      	sub	sp, #16
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	60f8      	str	r0, [r7, #12]
 8001d8c:	60b9      	str	r1, [r7, #8]
 8001d8e:	607a      	str	r2, [r7, #4]
    /* The MQTT context is not used for this demo. */
    ( void ) pxMQTTContext;

    if( ( pxPacketInfo->type & 0xF0U ) == MQTT_PACKET_TYPE_PUBLISH )
 8001d90:	68bb      	ldr	r3, [r7, #8]
 8001d92:	781b      	ldrb	r3, [r3, #0]
 8001d94:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001d98:	2b30      	cmp	r3, #48	; 0x30
 8001d9a:	d104      	bne.n	8001da6 <prvEventCallback+0x22>
    {
    	// procesar un paquete PUBLISH recibido,
    	//por ejemplo llamando a la función prvMQTTProcessIncomingPublish, que hay que desarrollar
      prvMQTTProcessIncomingPublish( pxDeserializedInfo->pPublishInfo );
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	4618      	mov	r0, r3
 8001da2:	f7ff ff71 	bl	8001c88 <prvMQTTProcessIncomingPublish>
    {
       // también se podría hacer algo con otros paquetes si fuera necesario
    	 //prvMQTTProcessResponse( pxPacketInfo, pxDeserializedInfo->packetIdentifier );
    }

}
 8001da6:	bf00      	nop
 8001da8:	3710      	adds	r7, #16
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}
	...

08001db0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b082      	sub	sp, #8
 8001db4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001db6:	4b11      	ldr	r3, [pc, #68]	; (8001dfc <HAL_MspInit+0x4c>)
 8001db8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001dba:	4a10      	ldr	r2, [pc, #64]	; (8001dfc <HAL_MspInit+0x4c>)
 8001dbc:	f043 0301 	orr.w	r3, r3, #1
 8001dc0:	6613      	str	r3, [r2, #96]	; 0x60
 8001dc2:	4b0e      	ldr	r3, [pc, #56]	; (8001dfc <HAL_MspInit+0x4c>)
 8001dc4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001dc6:	f003 0301 	and.w	r3, r3, #1
 8001dca:	607b      	str	r3, [r7, #4]
 8001dcc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001dce:	4b0b      	ldr	r3, [pc, #44]	; (8001dfc <HAL_MspInit+0x4c>)
 8001dd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dd2:	4a0a      	ldr	r2, [pc, #40]	; (8001dfc <HAL_MspInit+0x4c>)
 8001dd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dd8:	6593      	str	r3, [r2, #88]	; 0x58
 8001dda:	4b08      	ldr	r3, [pc, #32]	; (8001dfc <HAL_MspInit+0x4c>)
 8001ddc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001de2:	603b      	str	r3, [r7, #0]
 8001de4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001de6:	2200      	movs	r2, #0
 8001de8:	210f      	movs	r1, #15
 8001dea:	f06f 0001 	mvn.w	r0, #1
 8001dee:	f000 fe41 	bl	8002a74 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001df2:	bf00      	nop
 8001df4:	3708      	adds	r7, #8
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}
 8001dfa:	bf00      	nop
 8001dfc:	40021000 	.word	0x40021000

08001e00 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b0ac      	sub	sp, #176	; 0xb0
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e08:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	601a      	str	r2, [r3, #0]
 8001e10:	605a      	str	r2, [r3, #4]
 8001e12:	609a      	str	r2, [r3, #8]
 8001e14:	60da      	str	r2, [r3, #12]
 8001e16:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001e18:	f107 0314 	add.w	r3, r7, #20
 8001e1c:	2288      	movs	r2, #136	; 0x88
 8001e1e:	2100      	movs	r1, #0
 8001e20:	4618      	mov	r0, r3
 8001e22:	f010 fd1e 	bl	8012862 <memset>
  if(DFSDM1_Init == 0)
 8001e26:	4b25      	ldr	r3, [pc, #148]	; (8001ebc <HAL_DFSDM_ChannelMspInit+0xbc>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d142      	bne.n	8001eb4 <HAL_DFSDM_ChannelMspInit+0xb4>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8001e2e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001e32:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8001e34:	2300      	movs	r3, #0
 8001e36:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e3a:	f107 0314 	add.w	r3, r7, #20
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f003 f90a 	bl	8005058 <HAL_RCCEx_PeriphCLKConfig>
 8001e44:	4603      	mov	r3, r0
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d001      	beq.n	8001e4e <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 8001e4a:	f7ff fdbd 	bl	80019c8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8001e4e:	4b1c      	ldr	r3, [pc, #112]	; (8001ec0 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001e50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e52:	4a1b      	ldr	r2, [pc, #108]	; (8001ec0 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001e54:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e58:	6613      	str	r3, [r2, #96]	; 0x60
 8001e5a:	4b19      	ldr	r3, [pc, #100]	; (8001ec0 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001e5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e5e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001e62:	613b      	str	r3, [r7, #16]
 8001e64:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001e66:	4b16      	ldr	r3, [pc, #88]	; (8001ec0 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001e68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e6a:	4a15      	ldr	r2, [pc, #84]	; (8001ec0 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001e6c:	f043 0310 	orr.w	r3, r3, #16
 8001e70:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e72:	4b13      	ldr	r3, [pc, #76]	; (8001ec0 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001e74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e76:	f003 0310 	and.w	r3, r3, #16
 8001e7a:	60fb      	str	r3, [r7, #12]
 8001e7c:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 8001e7e:	f44f 7320 	mov.w	r3, #640	; 0x280
 8001e82:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e86:	2302      	movs	r3, #2
 8001e88:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e92:	2300      	movs	r3, #0
 8001e94:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8001e98:	2306      	movs	r3, #6
 8001e9a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001e9e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001ea2:	4619      	mov	r1, r3
 8001ea4:	4807      	ldr	r0, [pc, #28]	; (8001ec4 <HAL_DFSDM_ChannelMspInit+0xc4>)
 8001ea6:	f000 ffa9 	bl	8002dfc <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8001eaa:	4b04      	ldr	r3, [pc, #16]	; (8001ebc <HAL_DFSDM_ChannelMspInit+0xbc>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	3301      	adds	r3, #1
 8001eb0:	4a02      	ldr	r2, [pc, #8]	; (8001ebc <HAL_DFSDM_ChannelMspInit+0xbc>)
 8001eb2:	6013      	str	r3, [r2, #0]
  }

}
 8001eb4:	bf00      	nop
 8001eb6:	37b0      	adds	r7, #176	; 0xb0
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bd80      	pop	{r7, pc}
 8001ebc:	20000bbc 	.word	0x20000bbc
 8001ec0:	40021000 	.word	0x40021000
 8001ec4:	48001000 	.word	0x48001000

08001ec8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b0ac      	sub	sp, #176	; 0xb0
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ed0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	601a      	str	r2, [r3, #0]
 8001ed8:	605a      	str	r2, [r3, #4]
 8001eda:	609a      	str	r2, [r3, #8]
 8001edc:	60da      	str	r2, [r3, #12]
 8001ede:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001ee0:	f107 0314 	add.w	r3, r7, #20
 8001ee4:	2288      	movs	r2, #136	; 0x88
 8001ee6:	2100      	movs	r1, #0
 8001ee8:	4618      	mov	r0, r3
 8001eea:	f010 fcba 	bl	8012862 <memset>
  if(hi2c->Instance==I2C2)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4a21      	ldr	r2, [pc, #132]	; (8001f78 <HAL_I2C_MspInit+0xb0>)
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	d13b      	bne.n	8001f70 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001ef8:	2380      	movs	r3, #128	; 0x80
 8001efa:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001efc:	2300      	movs	r3, #0
 8001efe:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001f00:	f107 0314 	add.w	r3, r7, #20
 8001f04:	4618      	mov	r0, r3
 8001f06:	f003 f8a7 	bl	8005058 <HAL_RCCEx_PeriphCLKConfig>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d001      	beq.n	8001f14 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001f10:	f7ff fd5a 	bl	80019c8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f14:	4b19      	ldr	r3, [pc, #100]	; (8001f7c <HAL_I2C_MspInit+0xb4>)
 8001f16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f18:	4a18      	ldr	r2, [pc, #96]	; (8001f7c <HAL_I2C_MspInit+0xb4>)
 8001f1a:	f043 0302 	orr.w	r3, r3, #2
 8001f1e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f20:	4b16      	ldr	r3, [pc, #88]	; (8001f7c <HAL_I2C_MspInit+0xb4>)
 8001f22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f24:	f003 0302 	and.w	r3, r3, #2
 8001f28:	613b      	str	r3, [r7, #16]
 8001f2a:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8001f2c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001f30:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f34:	2312      	movs	r3, #18
 8001f36:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f40:	2303      	movs	r3, #3
 8001f42:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001f46:	2304      	movs	r3, #4
 8001f48:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f4c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001f50:	4619      	mov	r1, r3
 8001f52:	480b      	ldr	r0, [pc, #44]	; (8001f80 <HAL_I2C_MspInit+0xb8>)
 8001f54:	f000 ff52 	bl	8002dfc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001f58:	4b08      	ldr	r3, [pc, #32]	; (8001f7c <HAL_I2C_MspInit+0xb4>)
 8001f5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f5c:	4a07      	ldr	r2, [pc, #28]	; (8001f7c <HAL_I2C_MspInit+0xb4>)
 8001f5e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001f62:	6593      	str	r3, [r2, #88]	; 0x58
 8001f64:	4b05      	ldr	r3, [pc, #20]	; (8001f7c <HAL_I2C_MspInit+0xb4>)
 8001f66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f68:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f6c:	60fb      	str	r3, [r7, #12]
 8001f6e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001f70:	bf00      	nop
 8001f72:	37b0      	adds	r7, #176	; 0xb0
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}
 8001f78:	40005800 	.word	0x40005800
 8001f7c:	40021000 	.word	0x40021000
 8001f80:	48000400 	.word	0x48000400

08001f84 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b082      	sub	sp, #8
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C2)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4a0b      	ldr	r2, [pc, #44]	; (8001fc0 <HAL_I2C_MspDeInit+0x3c>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d10f      	bne.n	8001fb6 <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 8001f96:	4b0b      	ldr	r3, [pc, #44]	; (8001fc4 <HAL_I2C_MspDeInit+0x40>)
 8001f98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f9a:	4a0a      	ldr	r2, [pc, #40]	; (8001fc4 <HAL_I2C_MspDeInit+0x40>)
 8001f9c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001fa0:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    HAL_GPIO_DeInit(INTERNAL_I2C2_SCL_GPIO_Port, INTERNAL_I2C2_SCL_Pin);
 8001fa2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001fa6:	4808      	ldr	r0, [pc, #32]	; (8001fc8 <HAL_I2C_MspDeInit+0x44>)
 8001fa8:	f001 f8d2 	bl	8003150 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(INTERNAL_I2C2_SDA_GPIO_Port, INTERNAL_I2C2_SDA_Pin);
 8001fac:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001fb0:	4805      	ldr	r0, [pc, #20]	; (8001fc8 <HAL_I2C_MspDeInit+0x44>)
 8001fb2:	f001 f8cd 	bl	8003150 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 8001fb6:	bf00      	nop
 8001fb8:	3708      	adds	r7, #8
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}
 8001fbe:	bf00      	nop
 8001fc0:	40005800 	.word	0x40005800
 8001fc4:	40021000 	.word	0x40021000
 8001fc8:	48000400 	.word	0x48000400

08001fcc <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b08a      	sub	sp, #40	; 0x28
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fd4:	f107 0314 	add.w	r3, r7, #20
 8001fd8:	2200      	movs	r2, #0
 8001fda:	601a      	str	r2, [r3, #0]
 8001fdc:	605a      	str	r2, [r3, #4]
 8001fde:	609a      	str	r2, [r3, #8]
 8001fe0:	60da      	str	r2, [r3, #12]
 8001fe2:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4a17      	ldr	r2, [pc, #92]	; (8002048 <HAL_QSPI_MspInit+0x7c>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d128      	bne.n	8002040 <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001fee:	4b17      	ldr	r3, [pc, #92]	; (800204c <HAL_QSPI_MspInit+0x80>)
 8001ff0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ff2:	4a16      	ldr	r2, [pc, #88]	; (800204c <HAL_QSPI_MspInit+0x80>)
 8001ff4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ff8:	6513      	str	r3, [r2, #80]	; 0x50
 8001ffa:	4b14      	ldr	r3, [pc, #80]	; (800204c <HAL_QSPI_MspInit+0x80>)
 8001ffc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ffe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002002:	613b      	str	r3, [r7, #16]
 8002004:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002006:	4b11      	ldr	r3, [pc, #68]	; (800204c <HAL_QSPI_MspInit+0x80>)
 8002008:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800200a:	4a10      	ldr	r2, [pc, #64]	; (800204c <HAL_QSPI_MspInit+0x80>)
 800200c:	f043 0310 	orr.w	r3, r3, #16
 8002010:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002012:	4b0e      	ldr	r3, [pc, #56]	; (800204c <HAL_QSPI_MspInit+0x80>)
 8002014:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002016:	f003 0310 	and.w	r3, r3, #16
 800201a:	60fb      	str	r3, [r7, #12]
 800201c:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 800201e:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8002022:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002024:	2302      	movs	r3, #2
 8002026:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002028:	2300      	movs	r3, #0
 800202a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800202c:	2303      	movs	r3, #3
 800202e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8002030:	230a      	movs	r3, #10
 8002032:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002034:	f107 0314 	add.w	r3, r7, #20
 8002038:	4619      	mov	r1, r3
 800203a:	4805      	ldr	r0, [pc, #20]	; (8002050 <HAL_QSPI_MspInit+0x84>)
 800203c:	f000 fede 	bl	8002dfc <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8002040:	bf00      	nop
 8002042:	3728      	adds	r7, #40	; 0x28
 8002044:	46bd      	mov	sp, r7
 8002046:	bd80      	pop	{r7, pc}
 8002048:	a0001000 	.word	0xa0001000
 800204c:	40021000 	.word	0x40021000
 8002050:	48001000 	.word	0x48001000

08002054 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b0a4      	sub	sp, #144	; 0x90
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800205c:	f107 0308 	add.w	r3, r7, #8
 8002060:	2288      	movs	r2, #136	; 0x88
 8002062:	2100      	movs	r1, #0
 8002064:	4618      	mov	r0, r3
 8002066:	f010 fbfc 	bl	8012862 <memset>
  if(hrtc->Instance==RTC)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4a10      	ldr	r2, [pc, #64]	; (80020b0 <HAL_RTC_MspInit+0x5c>)
 8002070:	4293      	cmp	r3, r2
 8002072:	d118      	bne.n	80020a6 <HAL_RTC_MspInit+0x52>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002074:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002078:	60bb      	str	r3, [r7, #8]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800207a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800207e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002082:	f107 0308 	add.w	r3, r7, #8
 8002086:	4618      	mov	r0, r3
 8002088:	f002 ffe6 	bl	8005058 <HAL_RCCEx_PeriphCLKConfig>
 800208c:	4603      	mov	r3, r0
 800208e:	2b00      	cmp	r3, #0
 8002090:	d001      	beq.n	8002096 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8002092:	f7ff fc99 	bl	80019c8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002096:	4b07      	ldr	r3, [pc, #28]	; (80020b4 <HAL_RTC_MspInit+0x60>)
 8002098:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800209c:	4a05      	ldr	r2, [pc, #20]	; (80020b4 <HAL_RTC_MspInit+0x60>)
 800209e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80020a2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80020a6:	bf00      	nop
 80020a8:	3790      	adds	r7, #144	; 0x90
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}
 80020ae:	bf00      	nop
 80020b0:	40002800 	.word	0x40002800
 80020b4:	40021000 	.word	0x40021000

080020b8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b08a      	sub	sp, #40	; 0x28
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020c0:	f107 0314 	add.w	r3, r7, #20
 80020c4:	2200      	movs	r2, #0
 80020c6:	601a      	str	r2, [r3, #0]
 80020c8:	605a      	str	r2, [r3, #4]
 80020ca:	609a      	str	r2, [r3, #8]
 80020cc:	60da      	str	r2, [r3, #12]
 80020ce:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4a1b      	ldr	r2, [pc, #108]	; (8002144 <HAL_SPI_MspInit+0x8c>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d130      	bne.n	800213c <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80020da:	4b1b      	ldr	r3, [pc, #108]	; (8002148 <HAL_SPI_MspInit+0x90>)
 80020dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020de:	4a1a      	ldr	r2, [pc, #104]	; (8002148 <HAL_SPI_MspInit+0x90>)
 80020e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80020e4:	6593      	str	r3, [r2, #88]	; 0x58
 80020e6:	4b18      	ldr	r3, [pc, #96]	; (8002148 <HAL_SPI_MspInit+0x90>)
 80020e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020ea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80020ee:	613b      	str	r3, [r7, #16]
 80020f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80020f2:	4b15      	ldr	r3, [pc, #84]	; (8002148 <HAL_SPI_MspInit+0x90>)
 80020f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020f6:	4a14      	ldr	r2, [pc, #80]	; (8002148 <HAL_SPI_MspInit+0x90>)
 80020f8:	f043 0304 	orr.w	r3, r3, #4
 80020fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80020fe:	4b12      	ldr	r3, [pc, #72]	; (8002148 <HAL_SPI_MspInit+0x90>)
 8002100:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002102:	f003 0304 	and.w	r3, r3, #4
 8002106:	60fb      	str	r3, [r7, #12]
 8002108:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 800210a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800210e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002110:	2302      	movs	r3, #2
 8002112:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002114:	2300      	movs	r3, #0
 8002116:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002118:	2303      	movs	r3, #3
 800211a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800211c:	2306      	movs	r3, #6
 800211e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002120:	f107 0314 	add.w	r3, r7, #20
 8002124:	4619      	mov	r1, r3
 8002126:	4809      	ldr	r0, [pc, #36]	; (800214c <HAL_SPI_MspInit+0x94>)
 8002128:	f000 fe68 	bl	8002dfc <HAL_GPIO_Init>

    /* SPI3 interrupt Init */
    HAL_NVIC_SetPriority(SPI3_IRQn, 5, 0);
 800212c:	2200      	movs	r2, #0
 800212e:	2105      	movs	r1, #5
 8002130:	2033      	movs	r0, #51	; 0x33
 8002132:	f000 fc9f 	bl	8002a74 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8002136:	2033      	movs	r0, #51	; 0x33
 8002138:	f000 fcb8 	bl	8002aac <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800213c:	bf00      	nop
 800213e:	3728      	adds	r7, #40	; 0x28
 8002140:	46bd      	mov	sp, r7
 8002142:	bd80      	pop	{r7, pc}
 8002144:	40003c00 	.word	0x40003c00
 8002148:	40021000 	.word	0x40021000
 800214c:	48000800 	.word	0x48000800

08002150 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b082      	sub	sp, #8
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI3)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4a0a      	ldr	r2, [pc, #40]	; (8002188 <HAL_SPI_MspDeInit+0x38>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d10d      	bne.n	800217e <HAL_SPI_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN SPI3_MspDeInit 0 */

  /* USER CODE END SPI3_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI3_CLK_DISABLE();
 8002162:	4b0a      	ldr	r3, [pc, #40]	; (800218c <HAL_SPI_MspDeInit+0x3c>)
 8002164:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002166:	4a09      	ldr	r2, [pc, #36]	; (800218c <HAL_SPI_MspDeInit+0x3c>)
 8002168:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800216c:	6593      	str	r3, [r2, #88]	; 0x58
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    HAL_GPIO_DeInit(GPIOC, INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin);
 800216e:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 8002172:	4807      	ldr	r0, [pc, #28]	; (8002190 <HAL_SPI_MspDeInit+0x40>)
 8002174:	f000 ffec 	bl	8003150 <HAL_GPIO_DeInit>

    /* SPI3 interrupt DeInit */
    HAL_NVIC_DisableIRQ(SPI3_IRQn);
 8002178:	2033      	movs	r0, #51	; 0x33
 800217a:	f000 fca5 	bl	8002ac8 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN SPI3_MspDeInit 1 */

  /* USER CODE END SPI3_MspDeInit 1 */
  }

}
 800217e:	bf00      	nop
 8002180:	3708      	adds	r7, #8
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}
 8002186:	bf00      	nop
 8002188:	40003c00 	.word	0x40003c00
 800218c:	40021000 	.word	0x40021000
 8002190:	48000800 	.word	0x48000800

08002194 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b084      	sub	sp, #16
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4a0d      	ldr	r2, [pc, #52]	; (80021d8 <HAL_TIM_Base_MspInit+0x44>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d113      	bne.n	80021ce <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 80021a6:	4b0d      	ldr	r3, [pc, #52]	; (80021dc <HAL_TIM_Base_MspInit+0x48>)
 80021a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021aa:	4a0c      	ldr	r2, [pc, #48]	; (80021dc <HAL_TIM_Base_MspInit+0x48>)
 80021ac:	f043 0320 	orr.w	r3, r3, #32
 80021b0:	6593      	str	r3, [r2, #88]	; 0x58
 80021b2:	4b0a      	ldr	r3, [pc, #40]	; (80021dc <HAL_TIM_Base_MspInit+0x48>)
 80021b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021b6:	f003 0320 	and.w	r3, r3, #32
 80021ba:	60fb      	str	r3, [r7, #12]
 80021bc:	68fb      	ldr	r3, [r7, #12]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 5, 0);
 80021be:	2200      	movs	r2, #0
 80021c0:	2105      	movs	r1, #5
 80021c2:	2037      	movs	r0, #55	; 0x37
 80021c4:	f000 fc56 	bl	8002a74 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80021c8:	2037      	movs	r0, #55	; 0x37
 80021ca:	f000 fc6f 	bl	8002aac <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 80021ce:	bf00      	nop
 80021d0:	3710      	adds	r7, #16
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}
 80021d6:	bf00      	nop
 80021d8:	40001400 	.word	0x40001400
 80021dc:	40021000 	.word	0x40021000

080021e0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b0ae      	sub	sp, #184	; 0xb8
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021e8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80021ec:	2200      	movs	r2, #0
 80021ee:	601a      	str	r2, [r3, #0]
 80021f0:	605a      	str	r2, [r3, #4]
 80021f2:	609a      	str	r2, [r3, #8]
 80021f4:	60da      	str	r2, [r3, #12]
 80021f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80021f8:	f107 031c 	add.w	r3, r7, #28
 80021fc:	2288      	movs	r2, #136	; 0x88
 80021fe:	2100      	movs	r1, #0
 8002200:	4618      	mov	r0, r3
 8002202:	f010 fb2e 	bl	8012862 <memset>
  if(huart->Instance==USART1)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4a46      	ldr	r2, [pc, #280]	; (8002324 <HAL_UART_MspInit+0x144>)
 800220c:	4293      	cmp	r3, r2
 800220e:	d143      	bne.n	8002298 <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002210:	2301      	movs	r3, #1
 8002212:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002214:	2300      	movs	r3, #0
 8002216:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002218:	f107 031c 	add.w	r3, r7, #28
 800221c:	4618      	mov	r0, r3
 800221e:	f002 ff1b 	bl	8005058 <HAL_RCCEx_PeriphCLKConfig>
 8002222:	4603      	mov	r3, r0
 8002224:	2b00      	cmp	r3, #0
 8002226:	d001      	beq.n	800222c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002228:	f7ff fbce 	bl	80019c8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800222c:	4b3e      	ldr	r3, [pc, #248]	; (8002328 <HAL_UART_MspInit+0x148>)
 800222e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002230:	4a3d      	ldr	r2, [pc, #244]	; (8002328 <HAL_UART_MspInit+0x148>)
 8002232:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002236:	6613      	str	r3, [r2, #96]	; 0x60
 8002238:	4b3b      	ldr	r3, [pc, #236]	; (8002328 <HAL_UART_MspInit+0x148>)
 800223a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800223c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002240:	61bb      	str	r3, [r7, #24]
 8002242:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002244:	4b38      	ldr	r3, [pc, #224]	; (8002328 <HAL_UART_MspInit+0x148>)
 8002246:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002248:	4a37      	ldr	r2, [pc, #220]	; (8002328 <HAL_UART_MspInit+0x148>)
 800224a:	f043 0302 	orr.w	r3, r3, #2
 800224e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002250:	4b35      	ldr	r3, [pc, #212]	; (8002328 <HAL_UART_MspInit+0x148>)
 8002252:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002254:	f003 0302 	and.w	r3, r3, #2
 8002258:	617b      	str	r3, [r7, #20]
 800225a:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 800225c:	23c0      	movs	r3, #192	; 0xc0
 800225e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002262:	2302      	movs	r3, #2
 8002264:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002268:	2300      	movs	r3, #0
 800226a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800226e:	2303      	movs	r3, #3
 8002270:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002274:	2307      	movs	r3, #7
 8002276:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800227a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800227e:	4619      	mov	r1, r3
 8002280:	482a      	ldr	r0, [pc, #168]	; (800232c <HAL_UART_MspInit+0x14c>)
 8002282:	f000 fdbb 	bl	8002dfc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8002286:	2200      	movs	r2, #0
 8002288:	2105      	movs	r1, #5
 800228a:	2025      	movs	r0, #37	; 0x25
 800228c:	f000 fbf2 	bl	8002a74 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002290:	2025      	movs	r0, #37	; 0x25
 8002292:	f000 fc0b 	bl	8002aac <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002296:	e040      	b.n	800231a <HAL_UART_MspInit+0x13a>
  else if(huart->Instance==USART3)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4a24      	ldr	r2, [pc, #144]	; (8002330 <HAL_UART_MspInit+0x150>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d13b      	bne.n	800231a <HAL_UART_MspInit+0x13a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80022a2:	2304      	movs	r3, #4
 80022a4:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80022a6:	2300      	movs	r3, #0
 80022a8:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80022aa:	f107 031c 	add.w	r3, r7, #28
 80022ae:	4618      	mov	r0, r3
 80022b0:	f002 fed2 	bl	8005058 <HAL_RCCEx_PeriphCLKConfig>
 80022b4:	4603      	mov	r3, r0
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d001      	beq.n	80022be <HAL_UART_MspInit+0xde>
      Error_Handler();
 80022ba:	f7ff fb85 	bl	80019c8 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80022be:	4b1a      	ldr	r3, [pc, #104]	; (8002328 <HAL_UART_MspInit+0x148>)
 80022c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022c2:	4a19      	ldr	r2, [pc, #100]	; (8002328 <HAL_UART_MspInit+0x148>)
 80022c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022c8:	6593      	str	r3, [r2, #88]	; 0x58
 80022ca:	4b17      	ldr	r3, [pc, #92]	; (8002328 <HAL_UART_MspInit+0x148>)
 80022cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80022d2:	613b      	str	r3, [r7, #16]
 80022d4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80022d6:	4b14      	ldr	r3, [pc, #80]	; (8002328 <HAL_UART_MspInit+0x148>)
 80022d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022da:	4a13      	ldr	r2, [pc, #76]	; (8002328 <HAL_UART_MspInit+0x148>)
 80022dc:	f043 0308 	orr.w	r3, r3, #8
 80022e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80022e2:	4b11      	ldr	r3, [pc, #68]	; (8002328 <HAL_UART_MspInit+0x148>)
 80022e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022e6:	f003 0308 	and.w	r3, r3, #8
 80022ea:	60fb      	str	r3, [r7, #12]
 80022ec:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 80022ee:	f44f 7340 	mov.w	r3, #768	; 0x300
 80022f2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022f6:	2302      	movs	r3, #2
 80022f8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022fc:	2300      	movs	r3, #0
 80022fe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002302:	2303      	movs	r3, #3
 8002304:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002308:	2307      	movs	r3, #7
 800230a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800230e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002312:	4619      	mov	r1, r3
 8002314:	4807      	ldr	r0, [pc, #28]	; (8002334 <HAL_UART_MspInit+0x154>)
 8002316:	f000 fd71 	bl	8002dfc <HAL_GPIO_Init>
}
 800231a:	bf00      	nop
 800231c:	37b8      	adds	r7, #184	; 0xb8
 800231e:	46bd      	mov	sp, r7
 8002320:	bd80      	pop	{r7, pc}
 8002322:	bf00      	nop
 8002324:	40013800 	.word	0x40013800
 8002328:	40021000 	.word	0x40021000
 800232c:	48000400 	.word	0x48000400
 8002330:	40004800 	.word	0x40004800
 8002334:	48000c00 	.word	0x48000c00

08002338 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b0ac      	sub	sp, #176	; 0xb0
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002340:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002344:	2200      	movs	r2, #0
 8002346:	601a      	str	r2, [r3, #0]
 8002348:	605a      	str	r2, [r3, #4]
 800234a:	609a      	str	r2, [r3, #8]
 800234c:	60da      	str	r2, [r3, #12]
 800234e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002350:	f107 0314 	add.w	r3, r7, #20
 8002354:	2288      	movs	r2, #136	; 0x88
 8002356:	2100      	movs	r1, #0
 8002358:	4618      	mov	r0, r3
 800235a:	f010 fa82 	bl	8012862 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002366:	d17c      	bne.n	8002462 <HAL_PCD_MspInit+0x12a>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8002368:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800236c:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800236e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002372:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8002376:	2301      	movs	r3, #1
 8002378:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800237a:	2301      	movs	r3, #1
 800237c:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 800237e:	2318      	movs	r3, #24
 8002380:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8002382:	2307      	movs	r3, #7
 8002384:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8002386:	2302      	movs	r3, #2
 8002388:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800238a:	2302      	movs	r3, #2
 800238c:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 800238e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002392:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002394:	f107 0314 	add.w	r3, r7, #20
 8002398:	4618      	mov	r0, r3
 800239a:	f002 fe5d 	bl	8005058 <HAL_RCCEx_PeriphCLKConfig>
 800239e:	4603      	mov	r3, r0
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d001      	beq.n	80023a8 <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 80023a4:	f7ff fb10 	bl	80019c8 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023a8:	4b30      	ldr	r3, [pc, #192]	; (800246c <HAL_PCD_MspInit+0x134>)
 80023aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023ac:	4a2f      	ldr	r2, [pc, #188]	; (800246c <HAL_PCD_MspInit+0x134>)
 80023ae:	f043 0301 	orr.w	r3, r3, #1
 80023b2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80023b4:	4b2d      	ldr	r3, [pc, #180]	; (800246c <HAL_PCD_MspInit+0x134>)
 80023b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023b8:	f003 0301 	and.w	r3, r3, #1
 80023bc:	613b      	str	r3, [r7, #16]
 80023be:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 80023c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80023c4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80023c8:	2300      	movs	r3, #0
 80023ca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ce:	2300      	movs	r3, #0
 80023d0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80023d4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80023d8:	4619      	mov	r1, r3
 80023da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80023de:	f000 fd0d 	bl	8002dfc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 80023e2:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80023e6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023ea:	2302      	movs	r3, #2
 80023ec:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023f0:	2300      	movs	r3, #0
 80023f2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023f6:	2303      	movs	r3, #3
 80023f8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80023fc:	230a      	movs	r3, #10
 80023fe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002402:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002406:	4619      	mov	r1, r3
 8002408:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800240c:	f000 fcf6 	bl	8002dfc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8002410:	4b16      	ldr	r3, [pc, #88]	; (800246c <HAL_PCD_MspInit+0x134>)
 8002412:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002414:	4a15      	ldr	r2, [pc, #84]	; (800246c <HAL_PCD_MspInit+0x134>)
 8002416:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800241a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800241c:	4b13      	ldr	r3, [pc, #76]	; (800246c <HAL_PCD_MspInit+0x134>)
 800241e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002420:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002424:	60fb      	str	r3, [r7, #12]
 8002426:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002428:	4b10      	ldr	r3, [pc, #64]	; (800246c <HAL_PCD_MspInit+0x134>)
 800242a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800242c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002430:	2b00      	cmp	r3, #0
 8002432:	d114      	bne.n	800245e <HAL_PCD_MspInit+0x126>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002434:	4b0d      	ldr	r3, [pc, #52]	; (800246c <HAL_PCD_MspInit+0x134>)
 8002436:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002438:	4a0c      	ldr	r2, [pc, #48]	; (800246c <HAL_PCD_MspInit+0x134>)
 800243a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800243e:	6593      	str	r3, [r2, #88]	; 0x58
 8002440:	4b0a      	ldr	r3, [pc, #40]	; (800246c <HAL_PCD_MspInit+0x134>)
 8002442:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002444:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002448:	60bb      	str	r3, [r7, #8]
 800244a:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 800244c:	f001 ff18 	bl	8004280 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002450:	4b06      	ldr	r3, [pc, #24]	; (800246c <HAL_PCD_MspInit+0x134>)
 8002452:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002454:	4a05      	ldr	r2, [pc, #20]	; (800246c <HAL_PCD_MspInit+0x134>)
 8002456:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800245a:	6593      	str	r3, [r2, #88]	; 0x58
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 800245c:	e001      	b.n	8002462 <HAL_PCD_MspInit+0x12a>
      HAL_PWREx_EnableVddUSB();
 800245e:	f001 ff0f 	bl	8004280 <HAL_PWREx_EnableVddUSB>
}
 8002462:	bf00      	nop
 8002464:	37b0      	adds	r7, #176	; 0xb0
 8002466:	46bd      	mov	sp, r7
 8002468:	bd80      	pop	{r7, pc}
 800246a:	bf00      	nop
 800246c:	40021000 	.word	0x40021000

08002470 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b08e      	sub	sp, #56	; 0x38
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8002478:	2300      	movs	r3, #0
 800247a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800247e:	4b34      	ldr	r3, [pc, #208]	; (8002550 <HAL_InitTick+0xe0>)
 8002480:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002482:	4a33      	ldr	r2, [pc, #204]	; (8002550 <HAL_InitTick+0xe0>)
 8002484:	f043 0310 	orr.w	r3, r3, #16
 8002488:	6593      	str	r3, [r2, #88]	; 0x58
 800248a:	4b31      	ldr	r3, [pc, #196]	; (8002550 <HAL_InitTick+0xe0>)
 800248c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800248e:	f003 0310 	and.w	r3, r3, #16
 8002492:	60fb      	str	r3, [r7, #12]
 8002494:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002496:	f107 0210 	add.w	r2, r7, #16
 800249a:	f107 0314 	add.w	r3, r7, #20
 800249e:	4611      	mov	r1, r2
 80024a0:	4618      	mov	r0, r3
 80024a2:	f002 fd47 	bl	8004f34 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80024a6:	6a3b      	ldr	r3, [r7, #32]
 80024a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80024aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d103      	bne.n	80024b8 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80024b0:	f002 fd14 	bl	8004edc <HAL_RCC_GetPCLK1Freq>
 80024b4:	6378      	str	r0, [r7, #52]	; 0x34
 80024b6:	e004      	b.n	80024c2 <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80024b8:	f002 fd10 	bl	8004edc <HAL_RCC_GetPCLK1Freq>
 80024bc:	4603      	mov	r3, r0
 80024be:	005b      	lsls	r3, r3, #1
 80024c0:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80024c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024c4:	4a23      	ldr	r2, [pc, #140]	; (8002554 <HAL_InitTick+0xe4>)
 80024c6:	fba2 2303 	umull	r2, r3, r2, r3
 80024ca:	0c9b      	lsrs	r3, r3, #18
 80024cc:	3b01      	subs	r3, #1
 80024ce:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80024d0:	4b21      	ldr	r3, [pc, #132]	; (8002558 <HAL_InitTick+0xe8>)
 80024d2:	4a22      	ldr	r2, [pc, #136]	; (800255c <HAL_InitTick+0xec>)
 80024d4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80024d6:	4b20      	ldr	r3, [pc, #128]	; (8002558 <HAL_InitTick+0xe8>)
 80024d8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80024dc:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80024de:	4a1e      	ldr	r2, [pc, #120]	; (8002558 <HAL_InitTick+0xe8>)
 80024e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024e2:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80024e4:	4b1c      	ldr	r3, [pc, #112]	; (8002558 <HAL_InitTick+0xe8>)
 80024e6:	2200      	movs	r2, #0
 80024e8:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024ea:	4b1b      	ldr	r3, [pc, #108]	; (8002558 <HAL_InitTick+0xe8>)
 80024ec:	2200      	movs	r2, #0
 80024ee:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024f0:	4b19      	ldr	r3, [pc, #100]	; (8002558 <HAL_InitTick+0xe8>)
 80024f2:	2200      	movs	r2, #0
 80024f4:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80024f6:	4818      	ldr	r0, [pc, #96]	; (8002558 <HAL_InitTick+0xe8>)
 80024f8:	f005 f8c1 	bl	800767e <HAL_TIM_Base_Init>
 80024fc:	4603      	mov	r3, r0
 80024fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8002502:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002506:	2b00      	cmp	r3, #0
 8002508:	d11b      	bne.n	8002542 <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 800250a:	4813      	ldr	r0, [pc, #76]	; (8002558 <HAL_InitTick+0xe8>)
 800250c:	f005 f90e 	bl	800772c <HAL_TIM_Base_Start_IT>
 8002510:	4603      	mov	r3, r0
 8002512:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8002516:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800251a:	2b00      	cmp	r3, #0
 800251c:	d111      	bne.n	8002542 <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800251e:	2036      	movs	r0, #54	; 0x36
 8002520:	f000 fac4 	bl	8002aac <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2b0f      	cmp	r3, #15
 8002528:	d808      	bhi.n	800253c <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 800252a:	2200      	movs	r2, #0
 800252c:	6879      	ldr	r1, [r7, #4]
 800252e:	2036      	movs	r0, #54	; 0x36
 8002530:	f000 faa0 	bl	8002a74 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002534:	4a0a      	ldr	r2, [pc, #40]	; (8002560 <HAL_InitTick+0xf0>)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6013      	str	r3, [r2, #0]
 800253a:	e002      	b.n	8002542 <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 800253c:	2301      	movs	r3, #1
 800253e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8002542:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8002546:	4618      	mov	r0, r3
 8002548:	3738      	adds	r7, #56	; 0x38
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}
 800254e:	bf00      	nop
 8002550:	40021000 	.word	0x40021000
 8002554:	431bde83 	.word	0x431bde83
 8002558:	20000bc0 	.word	0x20000bc0
 800255c:	40001000 	.word	0x40001000
 8002560:	20000014 	.word	0x20000014

08002564 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002564:	b480      	push	{r7}
 8002566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002568:	e7fe      	b.n	8002568 <NMI_Handler+0x4>

0800256a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800256a:	b480      	push	{r7}
 800256c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800256e:	e7fe      	b.n	800256e <HardFault_Handler+0x4>

08002570 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002570:	b480      	push	{r7}
 8002572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002574:	e7fe      	b.n	8002574 <MemManage_Handler+0x4>

08002576 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002576:	b480      	push	{r7}
 8002578:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800257a:	e7fe      	b.n	800257a <BusFault_Handler+0x4>

0800257c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800257c:	b480      	push	{r7}
 800257e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002580:	e7fe      	b.n	8002580 <UsageFault_Handler+0x4>

08002582 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002582:	b480      	push	{r7}
 8002584:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002586:	bf00      	nop
 8002588:	46bd      	mov	sp, r7
 800258a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258e:	4770      	bx	lr

08002590 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ISM43362_DRDY_EXTI1_Pin);
 8002594:	2002      	movs	r0, #2
 8002596:	f000 feff 	bl	8003398 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 800259a:	bf00      	nop
 800259c:	bd80      	pop	{r7, pc}

0800259e <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800259e:	b580      	push	{r7, lr}
 80025a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 80025a2:	2020      	movs	r0, #32
 80025a4:	f000 fef8 	bl	8003398 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SPBTLE_RF_IRQ_EXTI6_Pin);
 80025a8:	2040      	movs	r0, #64	; 0x40
 80025aa:	f000 fef5 	bl	8003398 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 80025ae:	2080      	movs	r0, #128	; 0x80
 80025b0:	f000 fef2 	bl	8003398 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 80025b4:	f44f 7080 	mov.w	r0, #256	; 0x100
 80025b8:	f000 feee 	bl	8003398 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80025bc:	bf00      	nop
 80025be:	bd80      	pop	{r7, pc}

080025c0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80025c4:	4802      	ldr	r0, [pc, #8]	; (80025d0 <USART1_IRQHandler+0x10>)
 80025c6:	f005 fccf 	bl	8007f68 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80025ca:	bf00      	nop
 80025cc:	bd80      	pop	{r7, pc}
 80025ce:	bf00      	nop
 80025d0:	20000270 	.word	0x20000270

080025d4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI0_Pin);
 80025d8:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80025dc:	f000 fedc 	bl	8003398 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 80025e0:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80025e4:	f000 fed8 	bl	8003398 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BOTON_Pin);
 80025e8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80025ec:	f000 fed4 	bl	8003398 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 80025f0:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80025f4:	f000 fed0 	bl	8003398 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 80025f8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80025fc:	f000 fecc 	bl	8003398 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002600:	bf00      	nop
 8002602:	bd80      	pop	{r7, pc}

08002604 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002608:	4802      	ldr	r0, [pc, #8]	; (8002614 <TIM6_DAC_IRQHandler+0x10>)
 800260a:	f005 f8ff 	bl	800780c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800260e:	bf00      	nop
 8002610:	bd80      	pop	{r7, pc}
 8002612:	bf00      	nop
 8002614:	20000bc0 	.word	0x20000bc0

08002618 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */
  ulHighFrequencyTimerTicks++;
 800261c:	4b04      	ldr	r3, [pc, #16]	; (8002630 <TIM7_IRQHandler+0x18>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	3301      	adds	r3, #1
 8002622:	4a03      	ldr	r2, [pc, #12]	; (8002630 <TIM7_IRQHandler+0x18>)
 8002624:	6013      	str	r3, [r2, #0]
  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002626:	4803      	ldr	r0, [pc, #12]	; (8002634 <TIM7_IRQHandler+0x1c>)
 8002628:	f005 f8f0 	bl	800780c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800262c:	bf00      	nop
 800262e:	bd80      	pop	{r7, pc}
 8002630:	200007c4 	.word	0x200007c4
 8002634:	20000224 	.word	0x20000224

08002638 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002638:	b480      	push	{r7}
 800263a:	af00      	add	r7, sp, #0
  return 1;
 800263c:	2301      	movs	r3, #1
}
 800263e:	4618      	mov	r0, r3
 8002640:	46bd      	mov	sp, r7
 8002642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002646:	4770      	bx	lr

08002648 <_kill>:

int _kill(int pid, int sig)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b082      	sub	sp, #8
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
 8002650:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002652:	f00f ff99 	bl	8012588 <__errno>
 8002656:	4603      	mov	r3, r0
 8002658:	2216      	movs	r2, #22
 800265a:	601a      	str	r2, [r3, #0]
  return -1;
 800265c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002660:	4618      	mov	r0, r3
 8002662:	3708      	adds	r7, #8
 8002664:	46bd      	mov	sp, r7
 8002666:	bd80      	pop	{r7, pc}

08002668 <_exit>:

void _exit (int status)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b082      	sub	sp, #8
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002670:	f04f 31ff 	mov.w	r1, #4294967295
 8002674:	6878      	ldr	r0, [r7, #4]
 8002676:	f7ff ffe7 	bl	8002648 <_kill>
  while (1) {}    /* Make sure we hang here */
 800267a:	e7fe      	b.n	800267a <_exit+0x12>

0800267c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b086      	sub	sp, #24
 8002680:	af00      	add	r7, sp, #0
 8002682:	60f8      	str	r0, [r7, #12]
 8002684:	60b9      	str	r1, [r7, #8]
 8002686:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002688:	2300      	movs	r3, #0
 800268a:	617b      	str	r3, [r7, #20]
 800268c:	e00a      	b.n	80026a4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800268e:	f3af 8000 	nop.w
 8002692:	4601      	mov	r1, r0
 8002694:	68bb      	ldr	r3, [r7, #8]
 8002696:	1c5a      	adds	r2, r3, #1
 8002698:	60ba      	str	r2, [r7, #8]
 800269a:	b2ca      	uxtb	r2, r1
 800269c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800269e:	697b      	ldr	r3, [r7, #20]
 80026a0:	3301      	adds	r3, #1
 80026a2:	617b      	str	r3, [r7, #20]
 80026a4:	697a      	ldr	r2, [r7, #20]
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	429a      	cmp	r2, r3
 80026aa:	dbf0      	blt.n	800268e <_read+0x12>
  }

  return len;
 80026ac:	687b      	ldr	r3, [r7, #4]
}
 80026ae:	4618      	mov	r0, r3
 80026b0:	3718      	adds	r7, #24
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bd80      	pop	{r7, pc}

080026b6 <_close>:
  }
  return len;
}

int _close(int file)
{
 80026b6:	b480      	push	{r7}
 80026b8:	b083      	sub	sp, #12
 80026ba:	af00      	add	r7, sp, #0
 80026bc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80026be:	f04f 33ff 	mov.w	r3, #4294967295
}
 80026c2:	4618      	mov	r0, r3
 80026c4:	370c      	adds	r7, #12
 80026c6:	46bd      	mov	sp, r7
 80026c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026cc:	4770      	bx	lr

080026ce <_fstat>:


int _fstat(int file, struct stat *st)
{
 80026ce:	b480      	push	{r7}
 80026d0:	b083      	sub	sp, #12
 80026d2:	af00      	add	r7, sp, #0
 80026d4:	6078      	str	r0, [r7, #4]
 80026d6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80026de:	605a      	str	r2, [r3, #4]
  return 0;
 80026e0:	2300      	movs	r3, #0
}
 80026e2:	4618      	mov	r0, r3
 80026e4:	370c      	adds	r7, #12
 80026e6:	46bd      	mov	sp, r7
 80026e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ec:	4770      	bx	lr

080026ee <_isatty>:

int _isatty(int file)
{
 80026ee:	b480      	push	{r7}
 80026f0:	b083      	sub	sp, #12
 80026f2:	af00      	add	r7, sp, #0
 80026f4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80026f6:	2301      	movs	r3, #1
}
 80026f8:	4618      	mov	r0, r3
 80026fa:	370c      	adds	r7, #12
 80026fc:	46bd      	mov	sp, r7
 80026fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002702:	4770      	bx	lr

08002704 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002704:	b480      	push	{r7}
 8002706:	b085      	sub	sp, #20
 8002708:	af00      	add	r7, sp, #0
 800270a:	60f8      	str	r0, [r7, #12]
 800270c:	60b9      	str	r1, [r7, #8]
 800270e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002710:	2300      	movs	r3, #0
}
 8002712:	4618      	mov	r0, r3
 8002714:	3714      	adds	r7, #20
 8002716:	46bd      	mov	sp, r7
 8002718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271c:	4770      	bx	lr
	...

08002720 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b086      	sub	sp, #24
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002728:	4a14      	ldr	r2, [pc, #80]	; (800277c <_sbrk+0x5c>)
 800272a:	4b15      	ldr	r3, [pc, #84]	; (8002780 <_sbrk+0x60>)
 800272c:	1ad3      	subs	r3, r2, r3
 800272e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002730:	697b      	ldr	r3, [r7, #20]
 8002732:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002734:	4b13      	ldr	r3, [pc, #76]	; (8002784 <_sbrk+0x64>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d102      	bne.n	8002742 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800273c:	4b11      	ldr	r3, [pc, #68]	; (8002784 <_sbrk+0x64>)
 800273e:	4a12      	ldr	r2, [pc, #72]	; (8002788 <_sbrk+0x68>)
 8002740:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002742:	4b10      	ldr	r3, [pc, #64]	; (8002784 <_sbrk+0x64>)
 8002744:	681a      	ldr	r2, [r3, #0]
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	4413      	add	r3, r2
 800274a:	693a      	ldr	r2, [r7, #16]
 800274c:	429a      	cmp	r2, r3
 800274e:	d207      	bcs.n	8002760 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002750:	f00f ff1a 	bl	8012588 <__errno>
 8002754:	4603      	mov	r3, r0
 8002756:	220c      	movs	r2, #12
 8002758:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800275a:	f04f 33ff 	mov.w	r3, #4294967295
 800275e:	e009      	b.n	8002774 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002760:	4b08      	ldr	r3, [pc, #32]	; (8002784 <_sbrk+0x64>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002766:	4b07      	ldr	r3, [pc, #28]	; (8002784 <_sbrk+0x64>)
 8002768:	681a      	ldr	r2, [r3, #0]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	4413      	add	r3, r2
 800276e:	4a05      	ldr	r2, [pc, #20]	; (8002784 <_sbrk+0x64>)
 8002770:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002772:	68fb      	ldr	r3, [r7, #12]
}
 8002774:	4618      	mov	r0, r3
 8002776:	3718      	adds	r7, #24
 8002778:	46bd      	mov	sp, r7
 800277a:	bd80      	pop	{r7, pc}
 800277c:	20018000 	.word	0x20018000
 8002780:	00000400 	.word	0x00000400
 8002784:	20000c0c 	.word	0x20000c0c
 8002788:	20004b40 	.word	0x20004b40

0800278c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800278c:	b480      	push	{r7}
 800278e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002790:	4b06      	ldr	r3, [pc, #24]	; (80027ac <SystemInit+0x20>)
 8002792:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002796:	4a05      	ldr	r2, [pc, #20]	; (80027ac <SystemInit+0x20>)
 8002798:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800279c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80027a0:	bf00      	nop
 80027a2:	46bd      	mov	sp, r7
 80027a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a8:	4770      	bx	lr
 80027aa:	bf00      	nop
 80027ac:	e000ed00 	.word	0xe000ed00

080027b0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80027b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80027e8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80027b4:	f7ff ffea 	bl	800278c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80027b8:	480c      	ldr	r0, [pc, #48]	; (80027ec <LoopForever+0x6>)
  ldr r1, =_edata
 80027ba:	490d      	ldr	r1, [pc, #52]	; (80027f0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80027bc:	4a0d      	ldr	r2, [pc, #52]	; (80027f4 <LoopForever+0xe>)
  movs r3, #0
 80027be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80027c0:	e002      	b.n	80027c8 <LoopCopyDataInit>

080027c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80027c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80027c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80027c6:	3304      	adds	r3, #4

080027c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80027c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80027ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80027cc:	d3f9      	bcc.n	80027c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80027ce:	4a0a      	ldr	r2, [pc, #40]	; (80027f8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80027d0:	4c0a      	ldr	r4, [pc, #40]	; (80027fc <LoopForever+0x16>)
  movs r3, #0
 80027d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80027d4:	e001      	b.n	80027da <LoopFillZerobss>

080027d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80027d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80027d8:	3204      	adds	r2, #4

080027da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80027da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80027dc:	d3fb      	bcc.n	80027d6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80027de:	f00f ffe1 	bl	80127a4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80027e2:	f7fd ff11 	bl	8000608 <main>

080027e6 <LoopForever>:

LoopForever:
    b LoopForever
 80027e6:	e7fe      	b.n	80027e6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80027e8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80027ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80027f0:	200000b8 	.word	0x200000b8
  ldr r2, =_sidata
 80027f4:	08015ae4 	.word	0x08015ae4
  ldr r2, =_sbss
 80027f8:	200000b8 	.word	0x200000b8
  ldr r4, =_ebss
 80027fc:	20004b40 	.word	0x20004b40

08002800 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002800:	e7fe      	b.n	8002800 <ADC1_2_IRQHandler>

08002802 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002802:	b580      	push	{r7, lr}
 8002804:	b082      	sub	sp, #8
 8002806:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002808:	2300      	movs	r3, #0
 800280a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800280c:	2003      	movs	r0, #3
 800280e:	f000 f926 	bl	8002a5e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002812:	200f      	movs	r0, #15
 8002814:	f7ff fe2c 	bl	8002470 <HAL_InitTick>
 8002818:	4603      	mov	r3, r0
 800281a:	2b00      	cmp	r3, #0
 800281c:	d002      	beq.n	8002824 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800281e:	2301      	movs	r3, #1
 8002820:	71fb      	strb	r3, [r7, #7]
 8002822:	e001      	b.n	8002828 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002824:	f7ff fac4 	bl	8001db0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002828:	79fb      	ldrb	r3, [r7, #7]
}
 800282a:	4618      	mov	r0, r3
 800282c:	3708      	adds	r7, #8
 800282e:	46bd      	mov	sp, r7
 8002830:	bd80      	pop	{r7, pc}
	...

08002834 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002834:	b480      	push	{r7}
 8002836:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002838:	4b06      	ldr	r3, [pc, #24]	; (8002854 <HAL_IncTick+0x20>)
 800283a:	781b      	ldrb	r3, [r3, #0]
 800283c:	461a      	mov	r2, r3
 800283e:	4b06      	ldr	r3, [pc, #24]	; (8002858 <HAL_IncTick+0x24>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4413      	add	r3, r2
 8002844:	4a04      	ldr	r2, [pc, #16]	; (8002858 <HAL_IncTick+0x24>)
 8002846:	6013      	str	r3, [r2, #0]
}
 8002848:	bf00      	nop
 800284a:	46bd      	mov	sp, r7
 800284c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002850:	4770      	bx	lr
 8002852:	bf00      	nop
 8002854:	20000018 	.word	0x20000018
 8002858:	20000c10 	.word	0x20000c10

0800285c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800285c:	b480      	push	{r7}
 800285e:	af00      	add	r7, sp, #0
  return uwTick;
 8002860:	4b03      	ldr	r3, [pc, #12]	; (8002870 <HAL_GetTick+0x14>)
 8002862:	681b      	ldr	r3, [r3, #0]
}
 8002864:	4618      	mov	r0, r3
 8002866:	46bd      	mov	sp, r7
 8002868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286c:	4770      	bx	lr
 800286e:	bf00      	nop
 8002870:	20000c10 	.word	0x20000c10

08002874 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b084      	sub	sp, #16
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800287c:	f7ff ffee 	bl	800285c <HAL_GetTick>
 8002880:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	f1b3 3fff 	cmp.w	r3, #4294967295
 800288c:	d005      	beq.n	800289a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800288e:	4b0a      	ldr	r3, [pc, #40]	; (80028b8 <HAL_Delay+0x44>)
 8002890:	781b      	ldrb	r3, [r3, #0]
 8002892:	461a      	mov	r2, r3
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	4413      	add	r3, r2
 8002898:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800289a:	bf00      	nop
 800289c:	f7ff ffde 	bl	800285c <HAL_GetTick>
 80028a0:	4602      	mov	r2, r0
 80028a2:	68bb      	ldr	r3, [r7, #8]
 80028a4:	1ad3      	subs	r3, r2, r3
 80028a6:	68fa      	ldr	r2, [r7, #12]
 80028a8:	429a      	cmp	r2, r3
 80028aa:	d8f7      	bhi.n	800289c <HAL_Delay+0x28>
  {
  }
}
 80028ac:	bf00      	nop
 80028ae:	bf00      	nop
 80028b0:	3710      	adds	r7, #16
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bd80      	pop	{r7, pc}
 80028b6:	bf00      	nop
 80028b8:	20000018 	.word	0x20000018

080028bc <__NVIC_SetPriorityGrouping>:
{
 80028bc:	b480      	push	{r7}
 80028be:	b085      	sub	sp, #20
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	f003 0307 	and.w	r3, r3, #7
 80028ca:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80028cc:	4b0c      	ldr	r3, [pc, #48]	; (8002900 <__NVIC_SetPriorityGrouping+0x44>)
 80028ce:	68db      	ldr	r3, [r3, #12]
 80028d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80028d2:	68ba      	ldr	r2, [r7, #8]
 80028d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80028d8:	4013      	ands	r3, r2
 80028da:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80028e0:	68bb      	ldr	r3, [r7, #8]
 80028e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80028e4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80028e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80028ee:	4a04      	ldr	r2, [pc, #16]	; (8002900 <__NVIC_SetPriorityGrouping+0x44>)
 80028f0:	68bb      	ldr	r3, [r7, #8]
 80028f2:	60d3      	str	r3, [r2, #12]
}
 80028f4:	bf00      	nop
 80028f6:	3714      	adds	r7, #20
 80028f8:	46bd      	mov	sp, r7
 80028fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fe:	4770      	bx	lr
 8002900:	e000ed00 	.word	0xe000ed00

08002904 <__NVIC_GetPriorityGrouping>:
{
 8002904:	b480      	push	{r7}
 8002906:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002908:	4b04      	ldr	r3, [pc, #16]	; (800291c <__NVIC_GetPriorityGrouping+0x18>)
 800290a:	68db      	ldr	r3, [r3, #12]
 800290c:	0a1b      	lsrs	r3, r3, #8
 800290e:	f003 0307 	and.w	r3, r3, #7
}
 8002912:	4618      	mov	r0, r3
 8002914:	46bd      	mov	sp, r7
 8002916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291a:	4770      	bx	lr
 800291c:	e000ed00 	.word	0xe000ed00

08002920 <__NVIC_EnableIRQ>:
{
 8002920:	b480      	push	{r7}
 8002922:	b083      	sub	sp, #12
 8002924:	af00      	add	r7, sp, #0
 8002926:	4603      	mov	r3, r0
 8002928:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800292a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800292e:	2b00      	cmp	r3, #0
 8002930:	db0b      	blt.n	800294a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002932:	79fb      	ldrb	r3, [r7, #7]
 8002934:	f003 021f 	and.w	r2, r3, #31
 8002938:	4907      	ldr	r1, [pc, #28]	; (8002958 <__NVIC_EnableIRQ+0x38>)
 800293a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800293e:	095b      	lsrs	r3, r3, #5
 8002940:	2001      	movs	r0, #1
 8002942:	fa00 f202 	lsl.w	r2, r0, r2
 8002946:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800294a:	bf00      	nop
 800294c:	370c      	adds	r7, #12
 800294e:	46bd      	mov	sp, r7
 8002950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002954:	4770      	bx	lr
 8002956:	bf00      	nop
 8002958:	e000e100 	.word	0xe000e100

0800295c <__NVIC_DisableIRQ>:
{
 800295c:	b480      	push	{r7}
 800295e:	b083      	sub	sp, #12
 8002960:	af00      	add	r7, sp, #0
 8002962:	4603      	mov	r3, r0
 8002964:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002966:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800296a:	2b00      	cmp	r3, #0
 800296c:	db12      	blt.n	8002994 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800296e:	79fb      	ldrb	r3, [r7, #7]
 8002970:	f003 021f 	and.w	r2, r3, #31
 8002974:	490a      	ldr	r1, [pc, #40]	; (80029a0 <__NVIC_DisableIRQ+0x44>)
 8002976:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800297a:	095b      	lsrs	r3, r3, #5
 800297c:	2001      	movs	r0, #1
 800297e:	fa00 f202 	lsl.w	r2, r0, r2
 8002982:	3320      	adds	r3, #32
 8002984:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002988:	f3bf 8f4f 	dsb	sy
}
 800298c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800298e:	f3bf 8f6f 	isb	sy
}
 8002992:	bf00      	nop
}
 8002994:	bf00      	nop
 8002996:	370c      	adds	r7, #12
 8002998:	46bd      	mov	sp, r7
 800299a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299e:	4770      	bx	lr
 80029a0:	e000e100 	.word	0xe000e100

080029a4 <__NVIC_SetPriority>:
{
 80029a4:	b480      	push	{r7}
 80029a6:	b083      	sub	sp, #12
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	4603      	mov	r3, r0
 80029ac:	6039      	str	r1, [r7, #0]
 80029ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	db0a      	blt.n	80029ce <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	b2da      	uxtb	r2, r3
 80029bc:	490c      	ldr	r1, [pc, #48]	; (80029f0 <__NVIC_SetPriority+0x4c>)
 80029be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029c2:	0112      	lsls	r2, r2, #4
 80029c4:	b2d2      	uxtb	r2, r2
 80029c6:	440b      	add	r3, r1
 80029c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80029cc:	e00a      	b.n	80029e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	b2da      	uxtb	r2, r3
 80029d2:	4908      	ldr	r1, [pc, #32]	; (80029f4 <__NVIC_SetPriority+0x50>)
 80029d4:	79fb      	ldrb	r3, [r7, #7]
 80029d6:	f003 030f 	and.w	r3, r3, #15
 80029da:	3b04      	subs	r3, #4
 80029dc:	0112      	lsls	r2, r2, #4
 80029de:	b2d2      	uxtb	r2, r2
 80029e0:	440b      	add	r3, r1
 80029e2:	761a      	strb	r2, [r3, #24]
}
 80029e4:	bf00      	nop
 80029e6:	370c      	adds	r7, #12
 80029e8:	46bd      	mov	sp, r7
 80029ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ee:	4770      	bx	lr
 80029f0:	e000e100 	.word	0xe000e100
 80029f4:	e000ed00 	.word	0xe000ed00

080029f8 <NVIC_EncodePriority>:
{
 80029f8:	b480      	push	{r7}
 80029fa:	b089      	sub	sp, #36	; 0x24
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	60f8      	str	r0, [r7, #12]
 8002a00:	60b9      	str	r1, [r7, #8]
 8002a02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	f003 0307 	and.w	r3, r3, #7
 8002a0a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a0c:	69fb      	ldr	r3, [r7, #28]
 8002a0e:	f1c3 0307 	rsb	r3, r3, #7
 8002a12:	2b04      	cmp	r3, #4
 8002a14:	bf28      	it	cs
 8002a16:	2304      	movcs	r3, #4
 8002a18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a1a:	69fb      	ldr	r3, [r7, #28]
 8002a1c:	3304      	adds	r3, #4
 8002a1e:	2b06      	cmp	r3, #6
 8002a20:	d902      	bls.n	8002a28 <NVIC_EncodePriority+0x30>
 8002a22:	69fb      	ldr	r3, [r7, #28]
 8002a24:	3b03      	subs	r3, #3
 8002a26:	e000      	b.n	8002a2a <NVIC_EncodePriority+0x32>
 8002a28:	2300      	movs	r3, #0
 8002a2a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a2c:	f04f 32ff 	mov.w	r2, #4294967295
 8002a30:	69bb      	ldr	r3, [r7, #24]
 8002a32:	fa02 f303 	lsl.w	r3, r2, r3
 8002a36:	43da      	mvns	r2, r3
 8002a38:	68bb      	ldr	r3, [r7, #8]
 8002a3a:	401a      	ands	r2, r3
 8002a3c:	697b      	ldr	r3, [r7, #20]
 8002a3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a40:	f04f 31ff 	mov.w	r1, #4294967295
 8002a44:	697b      	ldr	r3, [r7, #20]
 8002a46:	fa01 f303 	lsl.w	r3, r1, r3
 8002a4a:	43d9      	mvns	r1, r3
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a50:	4313      	orrs	r3, r2
}
 8002a52:	4618      	mov	r0, r3
 8002a54:	3724      	adds	r7, #36	; 0x24
 8002a56:	46bd      	mov	sp, r7
 8002a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5c:	4770      	bx	lr

08002a5e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a5e:	b580      	push	{r7, lr}
 8002a60:	b082      	sub	sp, #8
 8002a62:	af00      	add	r7, sp, #0
 8002a64:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a66:	6878      	ldr	r0, [r7, #4]
 8002a68:	f7ff ff28 	bl	80028bc <__NVIC_SetPriorityGrouping>
}
 8002a6c:	bf00      	nop
 8002a6e:	3708      	adds	r7, #8
 8002a70:	46bd      	mov	sp, r7
 8002a72:	bd80      	pop	{r7, pc}

08002a74 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b086      	sub	sp, #24
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	60b9      	str	r1, [r7, #8]
 8002a7e:	607a      	str	r2, [r7, #4]
 8002a80:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002a82:	2300      	movs	r3, #0
 8002a84:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002a86:	f7ff ff3d 	bl	8002904 <__NVIC_GetPriorityGrouping>
 8002a8a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a8c:	687a      	ldr	r2, [r7, #4]
 8002a8e:	68b9      	ldr	r1, [r7, #8]
 8002a90:	6978      	ldr	r0, [r7, #20]
 8002a92:	f7ff ffb1 	bl	80029f8 <NVIC_EncodePriority>
 8002a96:	4602      	mov	r2, r0
 8002a98:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a9c:	4611      	mov	r1, r2
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	f7ff ff80 	bl	80029a4 <__NVIC_SetPriority>
}
 8002aa4:	bf00      	nop
 8002aa6:	3718      	adds	r7, #24
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	bd80      	pop	{r7, pc}

08002aac <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b082      	sub	sp, #8
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ab6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aba:	4618      	mov	r0, r3
 8002abc:	f7ff ff30 	bl	8002920 <__NVIC_EnableIRQ>
}
 8002ac0:	bf00      	nop
 8002ac2:	3708      	adds	r7, #8
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	bd80      	pop	{r7, pc}

08002ac8 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b082      	sub	sp, #8
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	4603      	mov	r3, r0
 8002ad0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002ad2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	f7ff ff40 	bl	800295c <__NVIC_DisableIRQ>
}
 8002adc:	bf00      	nop
 8002ade:	3708      	adds	r7, #8
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	bd80      	pop	{r7, pc}

08002ae4 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b082      	sub	sp, #8
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d101      	bne.n	8002af6 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8002af2:	2301      	movs	r3, #1
 8002af4:	e0ac      	b.n	8002c50 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4618      	mov	r0, r3
 8002afc:	f000 f8b2 	bl	8002c64 <DFSDM_GetChannelFromInstance>
 8002b00:	4603      	mov	r3, r0
 8002b02:	4a55      	ldr	r2, [pc, #340]	; (8002c58 <HAL_DFSDM_ChannelInit+0x174>)
 8002b04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d001      	beq.n	8002b10 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	e09f      	b.n	8002c50 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8002b10:	6878      	ldr	r0, [r7, #4]
 8002b12:	f7ff f975 	bl	8001e00 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8002b16:	4b51      	ldr	r3, [pc, #324]	; (8002c5c <HAL_DFSDM_ChannelInit+0x178>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	3301      	adds	r3, #1
 8002b1c:	4a4f      	ldr	r2, [pc, #316]	; (8002c5c <HAL_DFSDM_ChannelInit+0x178>)
 8002b1e:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8002b20:	4b4e      	ldr	r3, [pc, #312]	; (8002c5c <HAL_DFSDM_ChannelInit+0x178>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	2b01      	cmp	r3, #1
 8002b26:	d125      	bne.n	8002b74 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8002b28:	4b4d      	ldr	r3, [pc, #308]	; (8002c60 <HAL_DFSDM_ChannelInit+0x17c>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4a4c      	ldr	r2, [pc, #304]	; (8002c60 <HAL_DFSDM_ChannelInit+0x17c>)
 8002b2e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002b32:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8002b34:	4b4a      	ldr	r3, [pc, #296]	; (8002c60 <HAL_DFSDM_ChannelInit+0x17c>)
 8002b36:	681a      	ldr	r2, [r3, #0]
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	689b      	ldr	r3, [r3, #8]
 8002b3c:	4948      	ldr	r1, [pc, #288]	; (8002c60 <HAL_DFSDM_ChannelInit+0x17c>)
 8002b3e:	4313      	orrs	r3, r2
 8002b40:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8002b42:	4b47      	ldr	r3, [pc, #284]	; (8002c60 <HAL_DFSDM_ChannelInit+0x17c>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4a46      	ldr	r2, [pc, #280]	; (8002c60 <HAL_DFSDM_ChannelInit+0x17c>)
 8002b48:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8002b4c:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	791b      	ldrb	r3, [r3, #4]
 8002b52:	2b01      	cmp	r3, #1
 8002b54:	d108      	bne.n	8002b68 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8002b56:	4b42      	ldr	r3, [pc, #264]	; (8002c60 <HAL_DFSDM_ChannelInit+0x17c>)
 8002b58:	681a      	ldr	r2, [r3, #0]
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	68db      	ldr	r3, [r3, #12]
 8002b5e:	3b01      	subs	r3, #1
 8002b60:	041b      	lsls	r3, r3, #16
 8002b62:	493f      	ldr	r1, [pc, #252]	; (8002c60 <HAL_DFSDM_ChannelInit+0x17c>)
 8002b64:	4313      	orrs	r3, r2
 8002b66:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8002b68:	4b3d      	ldr	r3, [pc, #244]	; (8002c60 <HAL_DFSDM_ChannelInit+0x17c>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4a3c      	ldr	r2, [pc, #240]	; (8002c60 <HAL_DFSDM_ChannelInit+0x17c>)
 8002b6e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002b72:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	681a      	ldr	r2, [r3, #0]
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 8002b82:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	6819      	ldr	r1, [r3, #0]
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8002b92:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8002b98:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	430a      	orrs	r2, r1
 8002ba0:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	681a      	ldr	r2, [r3, #0]
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f022 020f 	bic.w	r2, r2, #15
 8002bb0:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	6819      	ldr	r1, [r3, #0]
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8002bc0:	431a      	orrs	r2, r3
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	430a      	orrs	r2, r1
 8002bc8:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	689a      	ldr	r2, [r3, #8]
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8002bd8:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	6899      	ldr	r1, [r3, #8]
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002be8:	3b01      	subs	r3, #1
 8002bea:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8002bec:	431a      	orrs	r2, r3
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	430a      	orrs	r2, r1
 8002bf4:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	685a      	ldr	r2, [r3, #4]
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f002 0207 	and.w	r2, r2, #7
 8002c04:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	6859      	ldr	r1, [r3, #4]
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c10:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c16:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8002c18:	431a      	orrs	r2, r3
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	430a      	orrs	r2, r1
 8002c20:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	681a      	ldr	r2, [r3, #0]
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002c30:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2201      	movs	r2, #1
 8002c36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4618      	mov	r0, r3
 8002c40:	f000 f810 	bl	8002c64 <DFSDM_GetChannelFromInstance>
 8002c44:	4602      	mov	r2, r0
 8002c46:	4904      	ldr	r1, [pc, #16]	; (8002c58 <HAL_DFSDM_ChannelInit+0x174>)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 8002c4e:	2300      	movs	r3, #0
}
 8002c50:	4618      	mov	r0, r3
 8002c52:	3708      	adds	r7, #8
 8002c54:	46bd      	mov	sp, r7
 8002c56:	bd80      	pop	{r7, pc}
 8002c58:	20000c18 	.word	0x20000c18
 8002c5c:	20000c14 	.word	0x20000c14
 8002c60:	40016000 	.word	0x40016000

08002c64 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8002c64:	b480      	push	{r7}
 8002c66:	b085      	sub	sp, #20
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	4a1c      	ldr	r2, [pc, #112]	; (8002ce0 <DFSDM_GetChannelFromInstance+0x7c>)
 8002c70:	4293      	cmp	r3, r2
 8002c72:	d102      	bne.n	8002c7a <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8002c74:	2300      	movs	r3, #0
 8002c76:	60fb      	str	r3, [r7, #12]
 8002c78:	e02b      	b.n	8002cd2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	4a19      	ldr	r2, [pc, #100]	; (8002ce4 <DFSDM_GetChannelFromInstance+0x80>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d102      	bne.n	8002c88 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8002c82:	2301      	movs	r3, #1
 8002c84:	60fb      	str	r3, [r7, #12]
 8002c86:	e024      	b.n	8002cd2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	4a17      	ldr	r2, [pc, #92]	; (8002ce8 <DFSDM_GetChannelFromInstance+0x84>)
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	d102      	bne.n	8002c96 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8002c90:	2302      	movs	r3, #2
 8002c92:	60fb      	str	r3, [r7, #12]
 8002c94:	e01d      	b.n	8002cd2 <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	4a14      	ldr	r2, [pc, #80]	; (8002cec <DFSDM_GetChannelFromInstance+0x88>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d102      	bne.n	8002ca4 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 8002c9e:	2304      	movs	r3, #4
 8002ca0:	60fb      	str	r3, [r7, #12]
 8002ca2:	e016      	b.n	8002cd2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	4a12      	ldr	r2, [pc, #72]	; (8002cf0 <DFSDM_GetChannelFromInstance+0x8c>)
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d102      	bne.n	8002cb2 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8002cac:	2305      	movs	r3, #5
 8002cae:	60fb      	str	r3, [r7, #12]
 8002cb0:	e00f      	b.n	8002cd2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	4a0f      	ldr	r2, [pc, #60]	; (8002cf4 <DFSDM_GetChannelFromInstance+0x90>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d102      	bne.n	8002cc0 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 8002cba:	2306      	movs	r3, #6
 8002cbc:	60fb      	str	r3, [r7, #12]
 8002cbe:	e008      	b.n	8002cd2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	4a0d      	ldr	r2, [pc, #52]	; (8002cf8 <DFSDM_GetChannelFromInstance+0x94>)
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d102      	bne.n	8002cce <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8002cc8:	2307      	movs	r3, #7
 8002cca:	60fb      	str	r3, [r7, #12]
 8002ccc:	e001      	b.n	8002cd2 <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 8002cce:	2303      	movs	r3, #3
 8002cd0:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8002cd2:	68fb      	ldr	r3, [r7, #12]
}
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	3714      	adds	r7, #20
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cde:	4770      	bx	lr
 8002ce0:	40016000 	.word	0x40016000
 8002ce4:	40016020 	.word	0x40016020
 8002ce8:	40016040 	.word	0x40016040
 8002cec:	40016080 	.word	0x40016080
 8002cf0:	400160a0 	.word	0x400160a0
 8002cf4:	400160c0 	.word	0x400160c0
 8002cf8:	400160e0 	.word	0x400160e0

08002cfc <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	b085      	sub	sp, #20
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d04:	2300      	movs	r3, #0
 8002d06:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002d0e:	b2db      	uxtb	r3, r3
 8002d10:	2b02      	cmp	r3, #2
 8002d12:	d008      	beq.n	8002d26 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2204      	movs	r2, #4
 8002d18:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002d22:	2301      	movs	r3, #1
 8002d24:	e022      	b.n	8002d6c <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	681a      	ldr	r2, [r3, #0]
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f022 020e 	bic.w	r2, r2, #14
 8002d34:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	681a      	ldr	r2, [r3, #0]
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f022 0201 	bic.w	r2, r2, #1
 8002d44:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d4a:	f003 021c 	and.w	r2, r3, #28
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d52:	2101      	movs	r1, #1
 8002d54:	fa01 f202 	lsl.w	r2, r1, r2
 8002d58:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2201      	movs	r2, #1
 8002d5e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2200      	movs	r2, #0
 8002d66:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8002d6a:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	3714      	adds	r7, #20
 8002d70:	46bd      	mov	sp, r7
 8002d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d76:	4770      	bx	lr

08002d78 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b084      	sub	sp, #16
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d80:	2300      	movs	r3, #0
 8002d82:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002d8a:	b2db      	uxtb	r3, r3
 8002d8c:	2b02      	cmp	r3, #2
 8002d8e:	d005      	beq.n	8002d9c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2204      	movs	r2, #4
 8002d94:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002d96:	2301      	movs	r3, #1
 8002d98:	73fb      	strb	r3, [r7, #15]
 8002d9a:	e029      	b.n	8002df0 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	681a      	ldr	r2, [r3, #0]
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f022 020e 	bic.w	r2, r2, #14
 8002daa:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	681a      	ldr	r2, [r3, #0]
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f022 0201 	bic.w	r2, r2, #1
 8002dba:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dc0:	f003 021c 	and.w	r2, r3, #28
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dc8:	2101      	movs	r1, #1
 8002dca:	fa01 f202 	lsl.w	r2, r1, r2
 8002dce:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2201      	movs	r2, #1
 8002dd4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2200      	movs	r2, #0
 8002ddc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d003      	beq.n	8002df0 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dec:	6878      	ldr	r0, [r7, #4]
 8002dee:	4798      	blx	r3
    }
  }
  return status;
 8002df0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002df2:	4618      	mov	r0, r3
 8002df4:	3710      	adds	r7, #16
 8002df6:	46bd      	mov	sp, r7
 8002df8:	bd80      	pop	{r7, pc}
	...

08002dfc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	b087      	sub	sp, #28
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
 8002e04:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002e06:	2300      	movs	r3, #0
 8002e08:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e0a:	e17f      	b.n	800310c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	681a      	ldr	r2, [r3, #0]
 8002e10:	2101      	movs	r1, #1
 8002e12:	697b      	ldr	r3, [r7, #20]
 8002e14:	fa01 f303 	lsl.w	r3, r1, r3
 8002e18:	4013      	ands	r3, r2
 8002e1a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	f000 8171 	beq.w	8003106 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	2b01      	cmp	r3, #1
 8002e2a:	d00b      	beq.n	8002e44 <HAL_GPIO_Init+0x48>
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	2b02      	cmp	r3, #2
 8002e32:	d007      	beq.n	8002e44 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002e38:	2b11      	cmp	r3, #17
 8002e3a:	d003      	beq.n	8002e44 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	2b12      	cmp	r3, #18
 8002e42:	d130      	bne.n	8002ea6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	689b      	ldr	r3, [r3, #8]
 8002e48:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002e4a:	697b      	ldr	r3, [r7, #20]
 8002e4c:	005b      	lsls	r3, r3, #1
 8002e4e:	2203      	movs	r2, #3
 8002e50:	fa02 f303 	lsl.w	r3, r2, r3
 8002e54:	43db      	mvns	r3, r3
 8002e56:	693a      	ldr	r2, [r7, #16]
 8002e58:	4013      	ands	r3, r2
 8002e5a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	68da      	ldr	r2, [r3, #12]
 8002e60:	697b      	ldr	r3, [r7, #20]
 8002e62:	005b      	lsls	r3, r3, #1
 8002e64:	fa02 f303 	lsl.w	r3, r2, r3
 8002e68:	693a      	ldr	r2, [r7, #16]
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	693a      	ldr	r2, [r7, #16]
 8002e72:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002e7a:	2201      	movs	r2, #1
 8002e7c:	697b      	ldr	r3, [r7, #20]
 8002e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e82:	43db      	mvns	r3, r3
 8002e84:	693a      	ldr	r2, [r7, #16]
 8002e86:	4013      	ands	r3, r2
 8002e88:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	685b      	ldr	r3, [r3, #4]
 8002e8e:	091b      	lsrs	r3, r3, #4
 8002e90:	f003 0201 	and.w	r2, r3, #1
 8002e94:	697b      	ldr	r3, [r7, #20]
 8002e96:	fa02 f303 	lsl.w	r3, r2, r3
 8002e9a:	693a      	ldr	r2, [r7, #16]
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	693a      	ldr	r2, [r7, #16]
 8002ea4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	685b      	ldr	r3, [r3, #4]
 8002eaa:	f003 0303 	and.w	r3, r3, #3
 8002eae:	2b03      	cmp	r3, #3
 8002eb0:	d118      	bne.n	8002ee4 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eb6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002eb8:	2201      	movs	r2, #1
 8002eba:	697b      	ldr	r3, [r7, #20]
 8002ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec0:	43db      	mvns	r3, r3
 8002ec2:	693a      	ldr	r2, [r7, #16]
 8002ec4:	4013      	ands	r3, r2
 8002ec6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	685b      	ldr	r3, [r3, #4]
 8002ecc:	08db      	lsrs	r3, r3, #3
 8002ece:	f003 0201 	and.w	r2, r3, #1
 8002ed2:	697b      	ldr	r3, [r7, #20]
 8002ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed8:	693a      	ldr	r2, [r7, #16]
 8002eda:	4313      	orrs	r3, r2
 8002edc:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	693a      	ldr	r2, [r7, #16]
 8002ee2:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	68db      	ldr	r3, [r3, #12]
 8002ee8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002eea:	697b      	ldr	r3, [r7, #20]
 8002eec:	005b      	lsls	r3, r3, #1
 8002eee:	2203      	movs	r2, #3
 8002ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef4:	43db      	mvns	r3, r3
 8002ef6:	693a      	ldr	r2, [r7, #16]
 8002ef8:	4013      	ands	r3, r2
 8002efa:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	689a      	ldr	r2, [r3, #8]
 8002f00:	697b      	ldr	r3, [r7, #20]
 8002f02:	005b      	lsls	r3, r3, #1
 8002f04:	fa02 f303 	lsl.w	r3, r2, r3
 8002f08:	693a      	ldr	r2, [r7, #16]
 8002f0a:	4313      	orrs	r3, r2
 8002f0c:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	693a      	ldr	r2, [r7, #16]
 8002f12:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	685b      	ldr	r3, [r3, #4]
 8002f18:	2b02      	cmp	r3, #2
 8002f1a:	d003      	beq.n	8002f24 <HAL_GPIO_Init+0x128>
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	2b12      	cmp	r3, #18
 8002f22:	d123      	bne.n	8002f6c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002f24:	697b      	ldr	r3, [r7, #20]
 8002f26:	08da      	lsrs	r2, r3, #3
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	3208      	adds	r2, #8
 8002f2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f30:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002f32:	697b      	ldr	r3, [r7, #20]
 8002f34:	f003 0307 	and.w	r3, r3, #7
 8002f38:	009b      	lsls	r3, r3, #2
 8002f3a:	220f      	movs	r2, #15
 8002f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f40:	43db      	mvns	r3, r3
 8002f42:	693a      	ldr	r2, [r7, #16]
 8002f44:	4013      	ands	r3, r2
 8002f46:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	691a      	ldr	r2, [r3, #16]
 8002f4c:	697b      	ldr	r3, [r7, #20]
 8002f4e:	f003 0307 	and.w	r3, r3, #7
 8002f52:	009b      	lsls	r3, r3, #2
 8002f54:	fa02 f303 	lsl.w	r3, r2, r3
 8002f58:	693a      	ldr	r2, [r7, #16]
 8002f5a:	4313      	orrs	r3, r2
 8002f5c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002f5e:	697b      	ldr	r3, [r7, #20]
 8002f60:	08da      	lsrs	r2, r3, #3
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	3208      	adds	r2, #8
 8002f66:	6939      	ldr	r1, [r7, #16]
 8002f68:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002f72:	697b      	ldr	r3, [r7, #20]
 8002f74:	005b      	lsls	r3, r3, #1
 8002f76:	2203      	movs	r2, #3
 8002f78:	fa02 f303 	lsl.w	r3, r2, r3
 8002f7c:	43db      	mvns	r3, r3
 8002f7e:	693a      	ldr	r2, [r7, #16]
 8002f80:	4013      	ands	r3, r2
 8002f82:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	685b      	ldr	r3, [r3, #4]
 8002f88:	f003 0203 	and.w	r2, r3, #3
 8002f8c:	697b      	ldr	r3, [r7, #20]
 8002f8e:	005b      	lsls	r3, r3, #1
 8002f90:	fa02 f303 	lsl.w	r3, r2, r3
 8002f94:	693a      	ldr	r2, [r7, #16]
 8002f96:	4313      	orrs	r3, r2
 8002f98:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	693a      	ldr	r2, [r7, #16]
 8002f9e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	f000 80ac 	beq.w	8003106 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002fae:	4b5f      	ldr	r3, [pc, #380]	; (800312c <HAL_GPIO_Init+0x330>)
 8002fb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fb2:	4a5e      	ldr	r2, [pc, #376]	; (800312c <HAL_GPIO_Init+0x330>)
 8002fb4:	f043 0301 	orr.w	r3, r3, #1
 8002fb8:	6613      	str	r3, [r2, #96]	; 0x60
 8002fba:	4b5c      	ldr	r3, [pc, #368]	; (800312c <HAL_GPIO_Init+0x330>)
 8002fbc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fbe:	f003 0301 	and.w	r3, r3, #1
 8002fc2:	60bb      	str	r3, [r7, #8]
 8002fc4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002fc6:	4a5a      	ldr	r2, [pc, #360]	; (8003130 <HAL_GPIO_Init+0x334>)
 8002fc8:	697b      	ldr	r3, [r7, #20]
 8002fca:	089b      	lsrs	r3, r3, #2
 8002fcc:	3302      	adds	r3, #2
 8002fce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fd2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002fd4:	697b      	ldr	r3, [r7, #20]
 8002fd6:	f003 0303 	and.w	r3, r3, #3
 8002fda:	009b      	lsls	r3, r3, #2
 8002fdc:	220f      	movs	r2, #15
 8002fde:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe2:	43db      	mvns	r3, r3
 8002fe4:	693a      	ldr	r2, [r7, #16]
 8002fe6:	4013      	ands	r3, r2
 8002fe8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002ff0:	d025      	beq.n	800303e <HAL_GPIO_Init+0x242>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	4a4f      	ldr	r2, [pc, #316]	; (8003134 <HAL_GPIO_Init+0x338>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d01f      	beq.n	800303a <HAL_GPIO_Init+0x23e>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	4a4e      	ldr	r2, [pc, #312]	; (8003138 <HAL_GPIO_Init+0x33c>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d019      	beq.n	8003036 <HAL_GPIO_Init+0x23a>
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	4a4d      	ldr	r2, [pc, #308]	; (800313c <HAL_GPIO_Init+0x340>)
 8003006:	4293      	cmp	r3, r2
 8003008:	d013      	beq.n	8003032 <HAL_GPIO_Init+0x236>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	4a4c      	ldr	r2, [pc, #304]	; (8003140 <HAL_GPIO_Init+0x344>)
 800300e:	4293      	cmp	r3, r2
 8003010:	d00d      	beq.n	800302e <HAL_GPIO_Init+0x232>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	4a4b      	ldr	r2, [pc, #300]	; (8003144 <HAL_GPIO_Init+0x348>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d007      	beq.n	800302a <HAL_GPIO_Init+0x22e>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	4a4a      	ldr	r2, [pc, #296]	; (8003148 <HAL_GPIO_Init+0x34c>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d101      	bne.n	8003026 <HAL_GPIO_Init+0x22a>
 8003022:	2306      	movs	r3, #6
 8003024:	e00c      	b.n	8003040 <HAL_GPIO_Init+0x244>
 8003026:	2307      	movs	r3, #7
 8003028:	e00a      	b.n	8003040 <HAL_GPIO_Init+0x244>
 800302a:	2305      	movs	r3, #5
 800302c:	e008      	b.n	8003040 <HAL_GPIO_Init+0x244>
 800302e:	2304      	movs	r3, #4
 8003030:	e006      	b.n	8003040 <HAL_GPIO_Init+0x244>
 8003032:	2303      	movs	r3, #3
 8003034:	e004      	b.n	8003040 <HAL_GPIO_Init+0x244>
 8003036:	2302      	movs	r3, #2
 8003038:	e002      	b.n	8003040 <HAL_GPIO_Init+0x244>
 800303a:	2301      	movs	r3, #1
 800303c:	e000      	b.n	8003040 <HAL_GPIO_Init+0x244>
 800303e:	2300      	movs	r3, #0
 8003040:	697a      	ldr	r2, [r7, #20]
 8003042:	f002 0203 	and.w	r2, r2, #3
 8003046:	0092      	lsls	r2, r2, #2
 8003048:	4093      	lsls	r3, r2
 800304a:	693a      	ldr	r2, [r7, #16]
 800304c:	4313      	orrs	r3, r2
 800304e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003050:	4937      	ldr	r1, [pc, #220]	; (8003130 <HAL_GPIO_Init+0x334>)
 8003052:	697b      	ldr	r3, [r7, #20]
 8003054:	089b      	lsrs	r3, r3, #2
 8003056:	3302      	adds	r3, #2
 8003058:	693a      	ldr	r2, [r7, #16]
 800305a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800305e:	4b3b      	ldr	r3, [pc, #236]	; (800314c <HAL_GPIO_Init+0x350>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	43db      	mvns	r3, r3
 8003068:	693a      	ldr	r2, [r7, #16]
 800306a:	4013      	ands	r3, r2
 800306c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	685b      	ldr	r3, [r3, #4]
 8003072:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003076:	2b00      	cmp	r3, #0
 8003078:	d003      	beq.n	8003082 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800307a:	693a      	ldr	r2, [r7, #16]
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	4313      	orrs	r3, r2
 8003080:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003082:	4a32      	ldr	r2, [pc, #200]	; (800314c <HAL_GPIO_Init+0x350>)
 8003084:	693b      	ldr	r3, [r7, #16]
 8003086:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8003088:	4b30      	ldr	r3, [pc, #192]	; (800314c <HAL_GPIO_Init+0x350>)
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	43db      	mvns	r3, r3
 8003092:	693a      	ldr	r2, [r7, #16]
 8003094:	4013      	ands	r3, r2
 8003096:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d003      	beq.n	80030ac <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80030a4:	693a      	ldr	r2, [r7, #16]
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	4313      	orrs	r3, r2
 80030aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80030ac:	4a27      	ldr	r2, [pc, #156]	; (800314c <HAL_GPIO_Init+0x350>)
 80030ae:	693b      	ldr	r3, [r7, #16]
 80030b0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80030b2:	4b26      	ldr	r3, [pc, #152]	; (800314c <HAL_GPIO_Init+0x350>)
 80030b4:	689b      	ldr	r3, [r3, #8]
 80030b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	43db      	mvns	r3, r3
 80030bc:	693a      	ldr	r2, [r7, #16]
 80030be:	4013      	ands	r3, r2
 80030c0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	685b      	ldr	r3, [r3, #4]
 80030c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d003      	beq.n	80030d6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80030ce:	693a      	ldr	r2, [r7, #16]
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	4313      	orrs	r3, r2
 80030d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80030d6:	4a1d      	ldr	r2, [pc, #116]	; (800314c <HAL_GPIO_Init+0x350>)
 80030d8:	693b      	ldr	r3, [r7, #16]
 80030da:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80030dc:	4b1b      	ldr	r3, [pc, #108]	; (800314c <HAL_GPIO_Init+0x350>)
 80030de:	68db      	ldr	r3, [r3, #12]
 80030e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	43db      	mvns	r3, r3
 80030e6:	693a      	ldr	r2, [r7, #16]
 80030e8:	4013      	ands	r3, r2
 80030ea:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d003      	beq.n	8003100 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80030f8:	693a      	ldr	r2, [r7, #16]
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	4313      	orrs	r3, r2
 80030fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003100:	4a12      	ldr	r2, [pc, #72]	; (800314c <HAL_GPIO_Init+0x350>)
 8003102:	693b      	ldr	r3, [r7, #16]
 8003104:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8003106:	697b      	ldr	r3, [r7, #20]
 8003108:	3301      	adds	r3, #1
 800310a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	681a      	ldr	r2, [r3, #0]
 8003110:	697b      	ldr	r3, [r7, #20]
 8003112:	fa22 f303 	lsr.w	r3, r2, r3
 8003116:	2b00      	cmp	r3, #0
 8003118:	f47f ae78 	bne.w	8002e0c <HAL_GPIO_Init+0x10>
  }
}
 800311c:	bf00      	nop
 800311e:	bf00      	nop
 8003120:	371c      	adds	r7, #28
 8003122:	46bd      	mov	sp, r7
 8003124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003128:	4770      	bx	lr
 800312a:	bf00      	nop
 800312c:	40021000 	.word	0x40021000
 8003130:	40010000 	.word	0x40010000
 8003134:	48000400 	.word	0x48000400
 8003138:	48000800 	.word	0x48000800
 800313c:	48000c00 	.word	0x48000c00
 8003140:	48001000 	.word	0x48001000
 8003144:	48001400 	.word	0x48001400
 8003148:	48001800 	.word	0x48001800
 800314c:	40010400 	.word	0x40010400

08003150 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003150:	b480      	push	{r7}
 8003152:	b087      	sub	sp, #28
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
 8003158:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800315a:	2300      	movs	r3, #0
 800315c:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 800315e:	e0cd      	b.n	80032fc <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8003160:	2201      	movs	r2, #1
 8003162:	697b      	ldr	r3, [r7, #20]
 8003164:	fa02 f303 	lsl.w	r3, r2, r3
 8003168:	683a      	ldr	r2, [r7, #0]
 800316a:	4013      	ands	r3, r2
 800316c:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 800316e:	693b      	ldr	r3, [r7, #16]
 8003170:	2b00      	cmp	r3, #0
 8003172:	f000 80c0 	beq.w	80032f6 <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8003176:	4a68      	ldr	r2, [pc, #416]	; (8003318 <HAL_GPIO_DeInit+0x1c8>)
 8003178:	697b      	ldr	r3, [r7, #20]
 800317a:	089b      	lsrs	r3, r3, #2
 800317c:	3302      	adds	r3, #2
 800317e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003182:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8003184:	697b      	ldr	r3, [r7, #20]
 8003186:	f003 0303 	and.w	r3, r3, #3
 800318a:	009b      	lsls	r3, r3, #2
 800318c:	220f      	movs	r2, #15
 800318e:	fa02 f303 	lsl.w	r3, r2, r3
 8003192:	68fa      	ldr	r2, [r7, #12]
 8003194:	4013      	ands	r3, r2
 8003196:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800319e:	d025      	beq.n	80031ec <HAL_GPIO_DeInit+0x9c>
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	4a5e      	ldr	r2, [pc, #376]	; (800331c <HAL_GPIO_DeInit+0x1cc>)
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d01f      	beq.n	80031e8 <HAL_GPIO_DeInit+0x98>
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	4a5d      	ldr	r2, [pc, #372]	; (8003320 <HAL_GPIO_DeInit+0x1d0>)
 80031ac:	4293      	cmp	r3, r2
 80031ae:	d019      	beq.n	80031e4 <HAL_GPIO_DeInit+0x94>
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	4a5c      	ldr	r2, [pc, #368]	; (8003324 <HAL_GPIO_DeInit+0x1d4>)
 80031b4:	4293      	cmp	r3, r2
 80031b6:	d013      	beq.n	80031e0 <HAL_GPIO_DeInit+0x90>
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	4a5b      	ldr	r2, [pc, #364]	; (8003328 <HAL_GPIO_DeInit+0x1d8>)
 80031bc:	4293      	cmp	r3, r2
 80031be:	d00d      	beq.n	80031dc <HAL_GPIO_DeInit+0x8c>
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	4a5a      	ldr	r2, [pc, #360]	; (800332c <HAL_GPIO_DeInit+0x1dc>)
 80031c4:	4293      	cmp	r3, r2
 80031c6:	d007      	beq.n	80031d8 <HAL_GPIO_DeInit+0x88>
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	4a59      	ldr	r2, [pc, #356]	; (8003330 <HAL_GPIO_DeInit+0x1e0>)
 80031cc:	4293      	cmp	r3, r2
 80031ce:	d101      	bne.n	80031d4 <HAL_GPIO_DeInit+0x84>
 80031d0:	2306      	movs	r3, #6
 80031d2:	e00c      	b.n	80031ee <HAL_GPIO_DeInit+0x9e>
 80031d4:	2307      	movs	r3, #7
 80031d6:	e00a      	b.n	80031ee <HAL_GPIO_DeInit+0x9e>
 80031d8:	2305      	movs	r3, #5
 80031da:	e008      	b.n	80031ee <HAL_GPIO_DeInit+0x9e>
 80031dc:	2304      	movs	r3, #4
 80031de:	e006      	b.n	80031ee <HAL_GPIO_DeInit+0x9e>
 80031e0:	2303      	movs	r3, #3
 80031e2:	e004      	b.n	80031ee <HAL_GPIO_DeInit+0x9e>
 80031e4:	2302      	movs	r3, #2
 80031e6:	e002      	b.n	80031ee <HAL_GPIO_DeInit+0x9e>
 80031e8:	2301      	movs	r3, #1
 80031ea:	e000      	b.n	80031ee <HAL_GPIO_DeInit+0x9e>
 80031ec:	2300      	movs	r3, #0
 80031ee:	697a      	ldr	r2, [r7, #20]
 80031f0:	f002 0203 	and.w	r2, r2, #3
 80031f4:	0092      	lsls	r2, r2, #2
 80031f6:	4093      	lsls	r3, r2
 80031f8:	68fa      	ldr	r2, [r7, #12]
 80031fa:	429a      	cmp	r2, r3
 80031fc:	d132      	bne.n	8003264 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 80031fe:	4b4d      	ldr	r3, [pc, #308]	; (8003334 <HAL_GPIO_DeInit+0x1e4>)
 8003200:	681a      	ldr	r2, [r3, #0]
 8003202:	693b      	ldr	r3, [r7, #16]
 8003204:	43db      	mvns	r3, r3
 8003206:	494b      	ldr	r1, [pc, #300]	; (8003334 <HAL_GPIO_DeInit+0x1e4>)
 8003208:	4013      	ands	r3, r2
 800320a:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 800320c:	4b49      	ldr	r3, [pc, #292]	; (8003334 <HAL_GPIO_DeInit+0x1e4>)
 800320e:	685a      	ldr	r2, [r3, #4]
 8003210:	693b      	ldr	r3, [r7, #16]
 8003212:	43db      	mvns	r3, r3
 8003214:	4947      	ldr	r1, [pc, #284]	; (8003334 <HAL_GPIO_DeInit+0x1e4>)
 8003216:	4013      	ands	r3, r2
 8003218:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 800321a:	4b46      	ldr	r3, [pc, #280]	; (8003334 <HAL_GPIO_DeInit+0x1e4>)
 800321c:	689a      	ldr	r2, [r3, #8]
 800321e:	693b      	ldr	r3, [r7, #16]
 8003220:	43db      	mvns	r3, r3
 8003222:	4944      	ldr	r1, [pc, #272]	; (8003334 <HAL_GPIO_DeInit+0x1e4>)
 8003224:	4013      	ands	r3, r2
 8003226:	608b      	str	r3, [r1, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 8003228:	4b42      	ldr	r3, [pc, #264]	; (8003334 <HAL_GPIO_DeInit+0x1e4>)
 800322a:	68da      	ldr	r2, [r3, #12]
 800322c:	693b      	ldr	r3, [r7, #16]
 800322e:	43db      	mvns	r3, r3
 8003230:	4940      	ldr	r1, [pc, #256]	; (8003334 <HAL_GPIO_DeInit+0x1e4>)
 8003232:	4013      	ands	r3, r2
 8003234:	60cb      	str	r3, [r1, #12]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8003236:	697b      	ldr	r3, [r7, #20]
 8003238:	f003 0303 	and.w	r3, r3, #3
 800323c:	009b      	lsls	r3, r3, #2
 800323e:	220f      	movs	r2, #15
 8003240:	fa02 f303 	lsl.w	r3, r2, r3
 8003244:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8003246:	4a34      	ldr	r2, [pc, #208]	; (8003318 <HAL_GPIO_DeInit+0x1c8>)
 8003248:	697b      	ldr	r3, [r7, #20]
 800324a:	089b      	lsrs	r3, r3, #2
 800324c:	3302      	adds	r3, #2
 800324e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	43da      	mvns	r2, r3
 8003256:	4830      	ldr	r0, [pc, #192]	; (8003318 <HAL_GPIO_DeInit+0x1c8>)
 8003258:	697b      	ldr	r3, [r7, #20]
 800325a:	089b      	lsrs	r3, r3, #2
 800325c:	400a      	ands	r2, r1
 800325e:	3302      	adds	r3, #2
 8003260:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681a      	ldr	r2, [r3, #0]
 8003268:	697b      	ldr	r3, [r7, #20]
 800326a:	005b      	lsls	r3, r3, #1
 800326c:	2103      	movs	r1, #3
 800326e:	fa01 f303 	lsl.w	r3, r1, r3
 8003272:	431a      	orrs	r2, r3
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8003278:	697b      	ldr	r3, [r7, #20]
 800327a:	08da      	lsrs	r2, r3, #3
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	3208      	adds	r2, #8
 8003280:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003284:	697b      	ldr	r3, [r7, #20]
 8003286:	f003 0307 	and.w	r3, r3, #7
 800328a:	009b      	lsls	r3, r3, #2
 800328c:	220f      	movs	r2, #15
 800328e:	fa02 f303 	lsl.w	r3, r2, r3
 8003292:	43db      	mvns	r3, r3
 8003294:	697a      	ldr	r2, [r7, #20]
 8003296:	08d2      	lsrs	r2, r2, #3
 8003298:	4019      	ands	r1, r3
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	3208      	adds	r2, #8
 800329e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	689a      	ldr	r2, [r3, #8]
 80032a6:	697b      	ldr	r3, [r7, #20]
 80032a8:	005b      	lsls	r3, r3, #1
 80032aa:	2103      	movs	r1, #3
 80032ac:	fa01 f303 	lsl.w	r3, r1, r3
 80032b0:	43db      	mvns	r3, r3
 80032b2:	401a      	ands	r2, r3
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	685a      	ldr	r2, [r3, #4]
 80032bc:	2101      	movs	r1, #1
 80032be:	697b      	ldr	r3, [r7, #20]
 80032c0:	fa01 f303 	lsl.w	r3, r1, r3
 80032c4:	43db      	mvns	r3, r3
 80032c6:	401a      	ands	r2, r3
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	68da      	ldr	r2, [r3, #12]
 80032d0:	697b      	ldr	r3, [r7, #20]
 80032d2:	005b      	lsls	r3, r3, #1
 80032d4:	2103      	movs	r1, #3
 80032d6:	fa01 f303 	lsl.w	r3, r1, r3
 80032da:	43db      	mvns	r3, r3
 80032dc:	401a      	ands	r2, r3
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032e6:	2101      	movs	r1, #1
 80032e8:	697b      	ldr	r3, [r7, #20]
 80032ea:	fa01 f303 	lsl.w	r3, r1, r3
 80032ee:	43db      	mvns	r3, r3
 80032f0:	401a      	ands	r2, r3
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 80032f6:	697b      	ldr	r3, [r7, #20]
 80032f8:	3301      	adds	r3, #1
 80032fa:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 80032fc:	683a      	ldr	r2, [r7, #0]
 80032fe:	697b      	ldr	r3, [r7, #20]
 8003300:	fa22 f303 	lsr.w	r3, r2, r3
 8003304:	2b00      	cmp	r3, #0
 8003306:	f47f af2b 	bne.w	8003160 <HAL_GPIO_DeInit+0x10>
  }
}
 800330a:	bf00      	nop
 800330c:	bf00      	nop
 800330e:	371c      	adds	r7, #28
 8003310:	46bd      	mov	sp, r7
 8003312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003316:	4770      	bx	lr
 8003318:	40010000 	.word	0x40010000
 800331c:	48000400 	.word	0x48000400
 8003320:	48000800 	.word	0x48000800
 8003324:	48000c00 	.word	0x48000c00
 8003328:	48001000 	.word	0x48001000
 800332c:	48001400 	.word	0x48001400
 8003330:	48001800 	.word	0x48001800
 8003334:	40010400 	.word	0x40010400

08003338 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003338:	b480      	push	{r7}
 800333a:	b085      	sub	sp, #20
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
 8003340:	460b      	mov	r3, r1
 8003342:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	691a      	ldr	r2, [r3, #16]
 8003348:	887b      	ldrh	r3, [r7, #2]
 800334a:	4013      	ands	r3, r2
 800334c:	2b00      	cmp	r3, #0
 800334e:	d002      	beq.n	8003356 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003350:	2301      	movs	r3, #1
 8003352:	73fb      	strb	r3, [r7, #15]
 8003354:	e001      	b.n	800335a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003356:	2300      	movs	r3, #0
 8003358:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800335a:	7bfb      	ldrb	r3, [r7, #15]
}
 800335c:	4618      	mov	r0, r3
 800335e:	3714      	adds	r7, #20
 8003360:	46bd      	mov	sp, r7
 8003362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003366:	4770      	bx	lr

08003368 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003368:	b480      	push	{r7}
 800336a:	b083      	sub	sp, #12
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
 8003370:	460b      	mov	r3, r1
 8003372:	807b      	strh	r3, [r7, #2]
 8003374:	4613      	mov	r3, r2
 8003376:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003378:	787b      	ldrb	r3, [r7, #1]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d003      	beq.n	8003386 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800337e:	887a      	ldrh	r2, [r7, #2]
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003384:	e002      	b.n	800338c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003386:	887a      	ldrh	r2, [r7, #2]
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800338c:	bf00      	nop
 800338e:	370c      	adds	r7, #12
 8003390:	46bd      	mov	sp, r7
 8003392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003396:	4770      	bx	lr

08003398 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b082      	sub	sp, #8
 800339c:	af00      	add	r7, sp, #0
 800339e:	4603      	mov	r3, r0
 80033a0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80033a2:	4b08      	ldr	r3, [pc, #32]	; (80033c4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80033a4:	695a      	ldr	r2, [r3, #20]
 80033a6:	88fb      	ldrh	r3, [r7, #6]
 80033a8:	4013      	ands	r3, r2
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d006      	beq.n	80033bc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80033ae:	4a05      	ldr	r2, [pc, #20]	; (80033c4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80033b0:	88fb      	ldrh	r3, [r7, #6]
 80033b2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80033b4:	88fb      	ldrh	r3, [r7, #6]
 80033b6:	4618      	mov	r0, r3
 80033b8:	f7fd fe5c 	bl	8001074 <HAL_GPIO_EXTI_Callback>
  }
}
 80033bc:	bf00      	nop
 80033be:	3708      	adds	r7, #8
 80033c0:	46bd      	mov	sp, r7
 80033c2:	bd80      	pop	{r7, pc}
 80033c4:	40010400 	.word	0x40010400

080033c8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b082      	sub	sp, #8
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d101      	bne.n	80033da <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80033d6:	2301      	movs	r3, #1
 80033d8:	e081      	b.n	80034de <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80033e0:	b2db      	uxtb	r3, r3
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d106      	bne.n	80033f4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2200      	movs	r2, #0
 80033ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80033ee:	6878      	ldr	r0, [r7, #4]
 80033f0:	f7fe fd6a 	bl	8001ec8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2224      	movs	r2, #36	; 0x24
 80033f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	681a      	ldr	r2, [r3, #0]
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f022 0201 	bic.w	r2, r2, #1
 800340a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	685a      	ldr	r2, [r3, #4]
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003418:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	689a      	ldr	r2, [r3, #8]
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003428:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	68db      	ldr	r3, [r3, #12]
 800342e:	2b01      	cmp	r3, #1
 8003430:	d107      	bne.n	8003442 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	689a      	ldr	r2, [r3, #8]
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800343e:	609a      	str	r2, [r3, #8]
 8003440:	e006      	b.n	8003450 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	689a      	ldr	r2, [r3, #8]
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800344e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	68db      	ldr	r3, [r3, #12]
 8003454:	2b02      	cmp	r3, #2
 8003456:	d104      	bne.n	8003462 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003460:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	685b      	ldr	r3, [r3, #4]
 8003468:	687a      	ldr	r2, [r7, #4]
 800346a:	6812      	ldr	r2, [r2, #0]
 800346c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003470:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003474:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	68da      	ldr	r2, [r3, #12]
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003484:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	691a      	ldr	r2, [r3, #16]
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	695b      	ldr	r3, [r3, #20]
 800348e:	ea42 0103 	orr.w	r1, r2, r3
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	699b      	ldr	r3, [r3, #24]
 8003496:	021a      	lsls	r2, r3, #8
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	430a      	orrs	r2, r1
 800349e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	69d9      	ldr	r1, [r3, #28]
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6a1a      	ldr	r2, [r3, #32]
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	430a      	orrs	r2, r1
 80034ae:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	681a      	ldr	r2, [r3, #0]
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f042 0201 	orr.w	r2, r2, #1
 80034be:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2200      	movs	r2, #0
 80034c4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2220      	movs	r2, #32
 80034ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2200      	movs	r2, #0
 80034d2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2200      	movs	r2, #0
 80034d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80034dc:	2300      	movs	r3, #0
}
 80034de:	4618      	mov	r0, r3
 80034e0:	3708      	adds	r7, #8
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bd80      	pop	{r7, pc}

080034e6 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80034e6:	b580      	push	{r7, lr}
 80034e8:	b082      	sub	sp, #8
 80034ea:	af00      	add	r7, sp, #0
 80034ec:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d101      	bne.n	80034f8 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80034f4:	2301      	movs	r3, #1
 80034f6:	e021      	b.n	800353c <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2224      	movs	r2, #36	; 0x24
 80034fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	681a      	ldr	r2, [r3, #0]
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f022 0201 	bic.w	r2, r2, #1
 800350e:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8003510:	6878      	ldr	r0, [r7, #4]
 8003512:	f7fe fd37 	bl	8001f84 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2200      	movs	r2, #0
 800351a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2200      	movs	r2, #0
 8003520:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2200      	movs	r2, #0
 8003528:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2200      	movs	r2, #0
 800352e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2200      	movs	r2, #0
 8003536:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800353a:	2300      	movs	r3, #0
}
 800353c:	4618      	mov	r0, r3
 800353e:	3708      	adds	r7, #8
 8003540:	46bd      	mov	sp, r7
 8003542:	bd80      	pop	{r7, pc}

08003544 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b088      	sub	sp, #32
 8003548:	af02      	add	r7, sp, #8
 800354a:	60f8      	str	r0, [r7, #12]
 800354c:	4608      	mov	r0, r1
 800354e:	4611      	mov	r1, r2
 8003550:	461a      	mov	r2, r3
 8003552:	4603      	mov	r3, r0
 8003554:	817b      	strh	r3, [r7, #10]
 8003556:	460b      	mov	r3, r1
 8003558:	813b      	strh	r3, [r7, #8]
 800355a:	4613      	mov	r3, r2
 800355c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003564:	b2db      	uxtb	r3, r3
 8003566:	2b20      	cmp	r3, #32
 8003568:	f040 80f9 	bne.w	800375e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800356c:	6a3b      	ldr	r3, [r7, #32]
 800356e:	2b00      	cmp	r3, #0
 8003570:	d002      	beq.n	8003578 <HAL_I2C_Mem_Write+0x34>
 8003572:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003574:	2b00      	cmp	r3, #0
 8003576:	d105      	bne.n	8003584 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800357e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003580:	2301      	movs	r3, #1
 8003582:	e0ed      	b.n	8003760 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800358a:	2b01      	cmp	r3, #1
 800358c:	d101      	bne.n	8003592 <HAL_I2C_Mem_Write+0x4e>
 800358e:	2302      	movs	r3, #2
 8003590:	e0e6      	b.n	8003760 <HAL_I2C_Mem_Write+0x21c>
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	2201      	movs	r2, #1
 8003596:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800359a:	f7ff f95f 	bl	800285c <HAL_GetTick>
 800359e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80035a0:	697b      	ldr	r3, [r7, #20]
 80035a2:	9300      	str	r3, [sp, #0]
 80035a4:	2319      	movs	r3, #25
 80035a6:	2201      	movs	r2, #1
 80035a8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80035ac:	68f8      	ldr	r0, [r7, #12]
 80035ae:	f000 fac3 	bl	8003b38 <I2C_WaitOnFlagUntilTimeout>
 80035b2:	4603      	mov	r3, r0
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d001      	beq.n	80035bc <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80035b8:	2301      	movs	r3, #1
 80035ba:	e0d1      	b.n	8003760 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	2221      	movs	r2, #33	; 0x21
 80035c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	2240      	movs	r2, #64	; 0x40
 80035c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	2200      	movs	r2, #0
 80035d0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	6a3a      	ldr	r2, [r7, #32]
 80035d6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80035dc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	2200      	movs	r2, #0
 80035e2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80035e4:	88f8      	ldrh	r0, [r7, #6]
 80035e6:	893a      	ldrh	r2, [r7, #8]
 80035e8:	8979      	ldrh	r1, [r7, #10]
 80035ea:	697b      	ldr	r3, [r7, #20]
 80035ec:	9301      	str	r3, [sp, #4]
 80035ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035f0:	9300      	str	r3, [sp, #0]
 80035f2:	4603      	mov	r3, r0
 80035f4:	68f8      	ldr	r0, [r7, #12]
 80035f6:	f000 f9d3 	bl	80039a0 <I2C_RequestMemoryWrite>
 80035fa:	4603      	mov	r3, r0
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d005      	beq.n	800360c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	2200      	movs	r2, #0
 8003604:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003608:	2301      	movs	r3, #1
 800360a:	e0a9      	b.n	8003760 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003610:	b29b      	uxth	r3, r3
 8003612:	2bff      	cmp	r3, #255	; 0xff
 8003614:	d90e      	bls.n	8003634 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	22ff      	movs	r2, #255	; 0xff
 800361a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003620:	b2da      	uxtb	r2, r3
 8003622:	8979      	ldrh	r1, [r7, #10]
 8003624:	2300      	movs	r3, #0
 8003626:	9300      	str	r3, [sp, #0]
 8003628:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800362c:	68f8      	ldr	r0, [r7, #12]
 800362e:	f000 fba5 	bl	8003d7c <I2C_TransferConfig>
 8003632:	e00f      	b.n	8003654 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003638:	b29a      	uxth	r2, r3
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003642:	b2da      	uxtb	r2, r3
 8003644:	8979      	ldrh	r1, [r7, #10]
 8003646:	2300      	movs	r3, #0
 8003648:	9300      	str	r3, [sp, #0]
 800364a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800364e:	68f8      	ldr	r0, [r7, #12]
 8003650:	f000 fb94 	bl	8003d7c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003654:	697a      	ldr	r2, [r7, #20]
 8003656:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003658:	68f8      	ldr	r0, [r7, #12]
 800365a:	f000 faad 	bl	8003bb8 <I2C_WaitOnTXISFlagUntilTimeout>
 800365e:	4603      	mov	r3, r0
 8003660:	2b00      	cmp	r3, #0
 8003662:	d001      	beq.n	8003668 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003664:	2301      	movs	r3, #1
 8003666:	e07b      	b.n	8003760 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800366c:	781a      	ldrb	r2, [r3, #0]
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003678:	1c5a      	adds	r2, r3, #1
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003682:	b29b      	uxth	r3, r3
 8003684:	3b01      	subs	r3, #1
 8003686:	b29a      	uxth	r2, r3
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003690:	3b01      	subs	r3, #1
 8003692:	b29a      	uxth	r2, r3
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800369c:	b29b      	uxth	r3, r3
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d034      	beq.n	800370c <HAL_I2C_Mem_Write+0x1c8>
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d130      	bne.n	800370c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80036aa:	697b      	ldr	r3, [r7, #20]
 80036ac:	9300      	str	r3, [sp, #0]
 80036ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036b0:	2200      	movs	r2, #0
 80036b2:	2180      	movs	r1, #128	; 0x80
 80036b4:	68f8      	ldr	r0, [r7, #12]
 80036b6:	f000 fa3f 	bl	8003b38 <I2C_WaitOnFlagUntilTimeout>
 80036ba:	4603      	mov	r3, r0
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d001      	beq.n	80036c4 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80036c0:	2301      	movs	r3, #1
 80036c2:	e04d      	b.n	8003760 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036c8:	b29b      	uxth	r3, r3
 80036ca:	2bff      	cmp	r3, #255	; 0xff
 80036cc:	d90e      	bls.n	80036ec <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	22ff      	movs	r2, #255	; 0xff
 80036d2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036d8:	b2da      	uxtb	r2, r3
 80036da:	8979      	ldrh	r1, [r7, #10]
 80036dc:	2300      	movs	r3, #0
 80036de:	9300      	str	r3, [sp, #0]
 80036e0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80036e4:	68f8      	ldr	r0, [r7, #12]
 80036e6:	f000 fb49 	bl	8003d7c <I2C_TransferConfig>
 80036ea:	e00f      	b.n	800370c <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036f0:	b29a      	uxth	r2, r3
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036fa:	b2da      	uxtb	r2, r3
 80036fc:	8979      	ldrh	r1, [r7, #10]
 80036fe:	2300      	movs	r3, #0
 8003700:	9300      	str	r3, [sp, #0]
 8003702:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003706:	68f8      	ldr	r0, [r7, #12]
 8003708:	f000 fb38 	bl	8003d7c <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003710:	b29b      	uxth	r3, r3
 8003712:	2b00      	cmp	r3, #0
 8003714:	d19e      	bne.n	8003654 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003716:	697a      	ldr	r2, [r7, #20]
 8003718:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800371a:	68f8      	ldr	r0, [r7, #12]
 800371c:	f000 fa8c 	bl	8003c38 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003720:	4603      	mov	r3, r0
 8003722:	2b00      	cmp	r3, #0
 8003724:	d001      	beq.n	800372a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8003726:	2301      	movs	r3, #1
 8003728:	e01a      	b.n	8003760 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	2220      	movs	r2, #32
 8003730:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	6859      	ldr	r1, [r3, #4]
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681a      	ldr	r2, [r3, #0]
 800373c:	4b0a      	ldr	r3, [pc, #40]	; (8003768 <HAL_I2C_Mem_Write+0x224>)
 800373e:	400b      	ands	r3, r1
 8003740:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	2220      	movs	r2, #32
 8003746:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	2200      	movs	r2, #0
 800374e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	2200      	movs	r2, #0
 8003756:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800375a:	2300      	movs	r3, #0
 800375c:	e000      	b.n	8003760 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800375e:	2302      	movs	r3, #2
  }
}
 8003760:	4618      	mov	r0, r3
 8003762:	3718      	adds	r7, #24
 8003764:	46bd      	mov	sp, r7
 8003766:	bd80      	pop	{r7, pc}
 8003768:	fe00e800 	.word	0xfe00e800

0800376c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b088      	sub	sp, #32
 8003770:	af02      	add	r7, sp, #8
 8003772:	60f8      	str	r0, [r7, #12]
 8003774:	4608      	mov	r0, r1
 8003776:	4611      	mov	r1, r2
 8003778:	461a      	mov	r2, r3
 800377a:	4603      	mov	r3, r0
 800377c:	817b      	strh	r3, [r7, #10]
 800377e:	460b      	mov	r3, r1
 8003780:	813b      	strh	r3, [r7, #8]
 8003782:	4613      	mov	r3, r2
 8003784:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800378c:	b2db      	uxtb	r3, r3
 800378e:	2b20      	cmp	r3, #32
 8003790:	f040 80fd 	bne.w	800398e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8003794:	6a3b      	ldr	r3, [r7, #32]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d002      	beq.n	80037a0 <HAL_I2C_Mem_Read+0x34>
 800379a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800379c:	2b00      	cmp	r3, #0
 800379e:	d105      	bne.n	80037ac <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80037a6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80037a8:	2301      	movs	r3, #1
 80037aa:	e0f1      	b.n	8003990 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80037b2:	2b01      	cmp	r3, #1
 80037b4:	d101      	bne.n	80037ba <HAL_I2C_Mem_Read+0x4e>
 80037b6:	2302      	movs	r3, #2
 80037b8:	e0ea      	b.n	8003990 <HAL_I2C_Mem_Read+0x224>
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	2201      	movs	r2, #1
 80037be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80037c2:	f7ff f84b 	bl	800285c <HAL_GetTick>
 80037c6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80037c8:	697b      	ldr	r3, [r7, #20]
 80037ca:	9300      	str	r3, [sp, #0]
 80037cc:	2319      	movs	r3, #25
 80037ce:	2201      	movs	r2, #1
 80037d0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80037d4:	68f8      	ldr	r0, [r7, #12]
 80037d6:	f000 f9af 	bl	8003b38 <I2C_WaitOnFlagUntilTimeout>
 80037da:	4603      	mov	r3, r0
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d001      	beq.n	80037e4 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80037e0:	2301      	movs	r3, #1
 80037e2:	e0d5      	b.n	8003990 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	2222      	movs	r2, #34	; 0x22
 80037e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	2240      	movs	r2, #64	; 0x40
 80037f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	2200      	movs	r2, #0
 80037f8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	6a3a      	ldr	r2, [r7, #32]
 80037fe:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003804:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	2200      	movs	r2, #0
 800380a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800380c:	88f8      	ldrh	r0, [r7, #6]
 800380e:	893a      	ldrh	r2, [r7, #8]
 8003810:	8979      	ldrh	r1, [r7, #10]
 8003812:	697b      	ldr	r3, [r7, #20]
 8003814:	9301      	str	r3, [sp, #4]
 8003816:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003818:	9300      	str	r3, [sp, #0]
 800381a:	4603      	mov	r3, r0
 800381c:	68f8      	ldr	r0, [r7, #12]
 800381e:	f000 f913 	bl	8003a48 <I2C_RequestMemoryRead>
 8003822:	4603      	mov	r3, r0
 8003824:	2b00      	cmp	r3, #0
 8003826:	d005      	beq.n	8003834 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	2200      	movs	r2, #0
 800382c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003830:	2301      	movs	r3, #1
 8003832:	e0ad      	b.n	8003990 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003838:	b29b      	uxth	r3, r3
 800383a:	2bff      	cmp	r3, #255	; 0xff
 800383c:	d90e      	bls.n	800385c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	22ff      	movs	r2, #255	; 0xff
 8003842:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003848:	b2da      	uxtb	r2, r3
 800384a:	8979      	ldrh	r1, [r7, #10]
 800384c:	4b52      	ldr	r3, [pc, #328]	; (8003998 <HAL_I2C_Mem_Read+0x22c>)
 800384e:	9300      	str	r3, [sp, #0]
 8003850:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003854:	68f8      	ldr	r0, [r7, #12]
 8003856:	f000 fa91 	bl	8003d7c <I2C_TransferConfig>
 800385a:	e00f      	b.n	800387c <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003860:	b29a      	uxth	r2, r3
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800386a:	b2da      	uxtb	r2, r3
 800386c:	8979      	ldrh	r1, [r7, #10]
 800386e:	4b4a      	ldr	r3, [pc, #296]	; (8003998 <HAL_I2C_Mem_Read+0x22c>)
 8003870:	9300      	str	r3, [sp, #0]
 8003872:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003876:	68f8      	ldr	r0, [r7, #12]
 8003878:	f000 fa80 	bl	8003d7c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800387c:	697b      	ldr	r3, [r7, #20]
 800387e:	9300      	str	r3, [sp, #0]
 8003880:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003882:	2200      	movs	r2, #0
 8003884:	2104      	movs	r1, #4
 8003886:	68f8      	ldr	r0, [r7, #12]
 8003888:	f000 f956 	bl	8003b38 <I2C_WaitOnFlagUntilTimeout>
 800388c:	4603      	mov	r3, r0
 800388e:	2b00      	cmp	r3, #0
 8003890:	d001      	beq.n	8003896 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8003892:	2301      	movs	r3, #1
 8003894:	e07c      	b.n	8003990 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038a0:	b2d2      	uxtb	r2, r2
 80038a2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038a8:	1c5a      	adds	r2, r3, #1
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038b2:	3b01      	subs	r3, #1
 80038b4:	b29a      	uxth	r2, r3
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038be:	b29b      	uxth	r3, r3
 80038c0:	3b01      	subs	r3, #1
 80038c2:	b29a      	uxth	r2, r3
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038cc:	b29b      	uxth	r3, r3
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d034      	beq.n	800393c <HAL_I2C_Mem_Read+0x1d0>
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d130      	bne.n	800393c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80038da:	697b      	ldr	r3, [r7, #20]
 80038dc:	9300      	str	r3, [sp, #0]
 80038de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038e0:	2200      	movs	r2, #0
 80038e2:	2180      	movs	r1, #128	; 0x80
 80038e4:	68f8      	ldr	r0, [r7, #12]
 80038e6:	f000 f927 	bl	8003b38 <I2C_WaitOnFlagUntilTimeout>
 80038ea:	4603      	mov	r3, r0
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d001      	beq.n	80038f4 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80038f0:	2301      	movs	r3, #1
 80038f2:	e04d      	b.n	8003990 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038f8:	b29b      	uxth	r3, r3
 80038fa:	2bff      	cmp	r3, #255	; 0xff
 80038fc:	d90e      	bls.n	800391c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	22ff      	movs	r2, #255	; 0xff
 8003902:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003908:	b2da      	uxtb	r2, r3
 800390a:	8979      	ldrh	r1, [r7, #10]
 800390c:	2300      	movs	r3, #0
 800390e:	9300      	str	r3, [sp, #0]
 8003910:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003914:	68f8      	ldr	r0, [r7, #12]
 8003916:	f000 fa31 	bl	8003d7c <I2C_TransferConfig>
 800391a:	e00f      	b.n	800393c <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003920:	b29a      	uxth	r2, r3
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800392a:	b2da      	uxtb	r2, r3
 800392c:	8979      	ldrh	r1, [r7, #10]
 800392e:	2300      	movs	r3, #0
 8003930:	9300      	str	r3, [sp, #0]
 8003932:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003936:	68f8      	ldr	r0, [r7, #12]
 8003938:	f000 fa20 	bl	8003d7c <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003940:	b29b      	uxth	r3, r3
 8003942:	2b00      	cmp	r3, #0
 8003944:	d19a      	bne.n	800387c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003946:	697a      	ldr	r2, [r7, #20]
 8003948:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800394a:	68f8      	ldr	r0, [r7, #12]
 800394c:	f000 f974 	bl	8003c38 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003950:	4603      	mov	r3, r0
 8003952:	2b00      	cmp	r3, #0
 8003954:	d001      	beq.n	800395a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8003956:	2301      	movs	r3, #1
 8003958:	e01a      	b.n	8003990 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	2220      	movs	r2, #32
 8003960:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	6859      	ldr	r1, [r3, #4]
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681a      	ldr	r2, [r3, #0]
 800396c:	4b0b      	ldr	r3, [pc, #44]	; (800399c <HAL_I2C_Mem_Read+0x230>)
 800396e:	400b      	ands	r3, r1
 8003970:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	2220      	movs	r2, #32
 8003976:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	2200      	movs	r2, #0
 800397e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	2200      	movs	r2, #0
 8003986:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800398a:	2300      	movs	r3, #0
 800398c:	e000      	b.n	8003990 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800398e:	2302      	movs	r3, #2
  }
}
 8003990:	4618      	mov	r0, r3
 8003992:	3718      	adds	r7, #24
 8003994:	46bd      	mov	sp, r7
 8003996:	bd80      	pop	{r7, pc}
 8003998:	80002400 	.word	0x80002400
 800399c:	fe00e800 	.word	0xfe00e800

080039a0 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b086      	sub	sp, #24
 80039a4:	af02      	add	r7, sp, #8
 80039a6:	60f8      	str	r0, [r7, #12]
 80039a8:	4608      	mov	r0, r1
 80039aa:	4611      	mov	r1, r2
 80039ac:	461a      	mov	r2, r3
 80039ae:	4603      	mov	r3, r0
 80039b0:	817b      	strh	r3, [r7, #10]
 80039b2:	460b      	mov	r3, r1
 80039b4:	813b      	strh	r3, [r7, #8]
 80039b6:	4613      	mov	r3, r2
 80039b8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80039ba:	88fb      	ldrh	r3, [r7, #6]
 80039bc:	b2da      	uxtb	r2, r3
 80039be:	8979      	ldrh	r1, [r7, #10]
 80039c0:	4b20      	ldr	r3, [pc, #128]	; (8003a44 <I2C_RequestMemoryWrite+0xa4>)
 80039c2:	9300      	str	r3, [sp, #0]
 80039c4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80039c8:	68f8      	ldr	r0, [r7, #12]
 80039ca:	f000 f9d7 	bl	8003d7c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80039ce:	69fa      	ldr	r2, [r7, #28]
 80039d0:	69b9      	ldr	r1, [r7, #24]
 80039d2:	68f8      	ldr	r0, [r7, #12]
 80039d4:	f000 f8f0 	bl	8003bb8 <I2C_WaitOnTXISFlagUntilTimeout>
 80039d8:	4603      	mov	r3, r0
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d001      	beq.n	80039e2 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80039de:	2301      	movs	r3, #1
 80039e0:	e02c      	b.n	8003a3c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80039e2:	88fb      	ldrh	r3, [r7, #6]
 80039e4:	2b01      	cmp	r3, #1
 80039e6:	d105      	bne.n	80039f4 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80039e8:	893b      	ldrh	r3, [r7, #8]
 80039ea:	b2da      	uxtb	r2, r3
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	629a      	str	r2, [r3, #40]	; 0x28
 80039f2:	e015      	b.n	8003a20 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80039f4:	893b      	ldrh	r3, [r7, #8]
 80039f6:	0a1b      	lsrs	r3, r3, #8
 80039f8:	b29b      	uxth	r3, r3
 80039fa:	b2da      	uxtb	r2, r3
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a02:	69fa      	ldr	r2, [r7, #28]
 8003a04:	69b9      	ldr	r1, [r7, #24]
 8003a06:	68f8      	ldr	r0, [r7, #12]
 8003a08:	f000 f8d6 	bl	8003bb8 <I2C_WaitOnTXISFlagUntilTimeout>
 8003a0c:	4603      	mov	r3, r0
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d001      	beq.n	8003a16 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8003a12:	2301      	movs	r3, #1
 8003a14:	e012      	b.n	8003a3c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003a16:	893b      	ldrh	r3, [r7, #8]
 8003a18:	b2da      	uxtb	r2, r3
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003a20:	69fb      	ldr	r3, [r7, #28]
 8003a22:	9300      	str	r3, [sp, #0]
 8003a24:	69bb      	ldr	r3, [r7, #24]
 8003a26:	2200      	movs	r2, #0
 8003a28:	2180      	movs	r1, #128	; 0x80
 8003a2a:	68f8      	ldr	r0, [r7, #12]
 8003a2c:	f000 f884 	bl	8003b38 <I2C_WaitOnFlagUntilTimeout>
 8003a30:	4603      	mov	r3, r0
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d001      	beq.n	8003a3a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8003a36:	2301      	movs	r3, #1
 8003a38:	e000      	b.n	8003a3c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8003a3a:	2300      	movs	r3, #0
}
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	3710      	adds	r7, #16
 8003a40:	46bd      	mov	sp, r7
 8003a42:	bd80      	pop	{r7, pc}
 8003a44:	80002000 	.word	0x80002000

08003a48 <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b086      	sub	sp, #24
 8003a4c:	af02      	add	r7, sp, #8
 8003a4e:	60f8      	str	r0, [r7, #12]
 8003a50:	4608      	mov	r0, r1
 8003a52:	4611      	mov	r1, r2
 8003a54:	461a      	mov	r2, r3
 8003a56:	4603      	mov	r3, r0
 8003a58:	817b      	strh	r3, [r7, #10]
 8003a5a:	460b      	mov	r3, r1
 8003a5c:	813b      	strh	r3, [r7, #8]
 8003a5e:	4613      	mov	r3, r2
 8003a60:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003a62:	88fb      	ldrh	r3, [r7, #6]
 8003a64:	b2da      	uxtb	r2, r3
 8003a66:	8979      	ldrh	r1, [r7, #10]
 8003a68:	4b20      	ldr	r3, [pc, #128]	; (8003aec <I2C_RequestMemoryRead+0xa4>)
 8003a6a:	9300      	str	r3, [sp, #0]
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	68f8      	ldr	r0, [r7, #12]
 8003a70:	f000 f984 	bl	8003d7c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a74:	69fa      	ldr	r2, [r7, #28]
 8003a76:	69b9      	ldr	r1, [r7, #24]
 8003a78:	68f8      	ldr	r0, [r7, #12]
 8003a7a:	f000 f89d 	bl	8003bb8 <I2C_WaitOnTXISFlagUntilTimeout>
 8003a7e:	4603      	mov	r3, r0
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d001      	beq.n	8003a88 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003a84:	2301      	movs	r3, #1
 8003a86:	e02c      	b.n	8003ae2 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003a88:	88fb      	ldrh	r3, [r7, #6]
 8003a8a:	2b01      	cmp	r3, #1
 8003a8c:	d105      	bne.n	8003a9a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003a8e:	893b      	ldrh	r3, [r7, #8]
 8003a90:	b2da      	uxtb	r2, r3
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	629a      	str	r2, [r3, #40]	; 0x28
 8003a98:	e015      	b.n	8003ac6 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003a9a:	893b      	ldrh	r3, [r7, #8]
 8003a9c:	0a1b      	lsrs	r3, r3, #8
 8003a9e:	b29b      	uxth	r3, r3
 8003aa0:	b2da      	uxtb	r2, r3
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003aa8:	69fa      	ldr	r2, [r7, #28]
 8003aaa:	69b9      	ldr	r1, [r7, #24]
 8003aac:	68f8      	ldr	r0, [r7, #12]
 8003aae:	f000 f883 	bl	8003bb8 <I2C_WaitOnTXISFlagUntilTimeout>
 8003ab2:	4603      	mov	r3, r0
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d001      	beq.n	8003abc <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003ab8:	2301      	movs	r3, #1
 8003aba:	e012      	b.n	8003ae2 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003abc:	893b      	ldrh	r3, [r7, #8]
 8003abe:	b2da      	uxtb	r2, r3
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003ac6:	69fb      	ldr	r3, [r7, #28]
 8003ac8:	9300      	str	r3, [sp, #0]
 8003aca:	69bb      	ldr	r3, [r7, #24]
 8003acc:	2200      	movs	r2, #0
 8003ace:	2140      	movs	r1, #64	; 0x40
 8003ad0:	68f8      	ldr	r0, [r7, #12]
 8003ad2:	f000 f831 	bl	8003b38 <I2C_WaitOnFlagUntilTimeout>
 8003ad6:	4603      	mov	r3, r0
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d001      	beq.n	8003ae0 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003adc:	2301      	movs	r3, #1
 8003ade:	e000      	b.n	8003ae2 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003ae0:	2300      	movs	r3, #0
}
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	3710      	adds	r7, #16
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	bd80      	pop	{r7, pc}
 8003aea:	bf00      	nop
 8003aec:	80002000 	.word	0x80002000

08003af0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003af0:	b480      	push	{r7}
 8003af2:	b083      	sub	sp, #12
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	699b      	ldr	r3, [r3, #24]
 8003afe:	f003 0302 	and.w	r3, r3, #2
 8003b02:	2b02      	cmp	r3, #2
 8003b04:	d103      	bne.n	8003b0e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	699b      	ldr	r3, [r3, #24]
 8003b14:	f003 0301 	and.w	r3, r3, #1
 8003b18:	2b01      	cmp	r3, #1
 8003b1a:	d007      	beq.n	8003b2c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	699a      	ldr	r2, [r3, #24]
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f042 0201 	orr.w	r2, r2, #1
 8003b2a:	619a      	str	r2, [r3, #24]
  }
}
 8003b2c:	bf00      	nop
 8003b2e:	370c      	adds	r7, #12
 8003b30:	46bd      	mov	sp, r7
 8003b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b36:	4770      	bx	lr

08003b38 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b084      	sub	sp, #16
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	60f8      	str	r0, [r7, #12]
 8003b40:	60b9      	str	r1, [r7, #8]
 8003b42:	603b      	str	r3, [r7, #0]
 8003b44:	4613      	mov	r3, r2
 8003b46:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003b48:	e022      	b.n	8003b90 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b50:	d01e      	beq.n	8003b90 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b52:	f7fe fe83 	bl	800285c <HAL_GetTick>
 8003b56:	4602      	mov	r2, r0
 8003b58:	69bb      	ldr	r3, [r7, #24]
 8003b5a:	1ad3      	subs	r3, r2, r3
 8003b5c:	683a      	ldr	r2, [r7, #0]
 8003b5e:	429a      	cmp	r2, r3
 8003b60:	d302      	bcc.n	8003b68 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d113      	bne.n	8003b90 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b6c:	f043 0220 	orr.w	r2, r3, #32
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	2220      	movs	r2, #32
 8003b78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	2200      	movs	r2, #0
 8003b80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	2200      	movs	r2, #0
 8003b88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	e00f      	b.n	8003bb0 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	699a      	ldr	r2, [r3, #24]
 8003b96:	68bb      	ldr	r3, [r7, #8]
 8003b98:	4013      	ands	r3, r2
 8003b9a:	68ba      	ldr	r2, [r7, #8]
 8003b9c:	429a      	cmp	r2, r3
 8003b9e:	bf0c      	ite	eq
 8003ba0:	2301      	moveq	r3, #1
 8003ba2:	2300      	movne	r3, #0
 8003ba4:	b2db      	uxtb	r3, r3
 8003ba6:	461a      	mov	r2, r3
 8003ba8:	79fb      	ldrb	r3, [r7, #7]
 8003baa:	429a      	cmp	r2, r3
 8003bac:	d0cd      	beq.n	8003b4a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003bae:	2300      	movs	r3, #0
}
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	3710      	adds	r7, #16
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	bd80      	pop	{r7, pc}

08003bb8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b084      	sub	sp, #16
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	60f8      	str	r0, [r7, #12]
 8003bc0:	60b9      	str	r1, [r7, #8]
 8003bc2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003bc4:	e02c      	b.n	8003c20 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003bc6:	687a      	ldr	r2, [r7, #4]
 8003bc8:	68b9      	ldr	r1, [r7, #8]
 8003bca:	68f8      	ldr	r0, [r7, #12]
 8003bcc:	f000 f870 	bl	8003cb0 <I2C_IsAcknowledgeFailed>
 8003bd0:	4603      	mov	r3, r0
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d001      	beq.n	8003bda <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003bd6:	2301      	movs	r3, #1
 8003bd8:	e02a      	b.n	8003c30 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003bda:	68bb      	ldr	r3, [r7, #8]
 8003bdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003be0:	d01e      	beq.n	8003c20 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003be2:	f7fe fe3b 	bl	800285c <HAL_GetTick>
 8003be6:	4602      	mov	r2, r0
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	1ad3      	subs	r3, r2, r3
 8003bec:	68ba      	ldr	r2, [r7, #8]
 8003bee:	429a      	cmp	r2, r3
 8003bf0:	d302      	bcc.n	8003bf8 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003bf2:	68bb      	ldr	r3, [r7, #8]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d113      	bne.n	8003c20 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bfc:	f043 0220 	orr.w	r2, r3, #32
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	2220      	movs	r2, #32
 8003c08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	2200      	movs	r2, #0
 8003c10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	2200      	movs	r2, #0
 8003c18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003c1c:	2301      	movs	r3, #1
 8003c1e:	e007      	b.n	8003c30 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	699b      	ldr	r3, [r3, #24]
 8003c26:	f003 0302 	and.w	r3, r3, #2
 8003c2a:	2b02      	cmp	r3, #2
 8003c2c:	d1cb      	bne.n	8003bc6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003c2e:	2300      	movs	r3, #0
}
 8003c30:	4618      	mov	r0, r3
 8003c32:	3710      	adds	r7, #16
 8003c34:	46bd      	mov	sp, r7
 8003c36:	bd80      	pop	{r7, pc}

08003c38 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b084      	sub	sp, #16
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	60f8      	str	r0, [r7, #12]
 8003c40:	60b9      	str	r1, [r7, #8]
 8003c42:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003c44:	e028      	b.n	8003c98 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c46:	687a      	ldr	r2, [r7, #4]
 8003c48:	68b9      	ldr	r1, [r7, #8]
 8003c4a:	68f8      	ldr	r0, [r7, #12]
 8003c4c:	f000 f830 	bl	8003cb0 <I2C_IsAcknowledgeFailed>
 8003c50:	4603      	mov	r3, r0
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d001      	beq.n	8003c5a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003c56:	2301      	movs	r3, #1
 8003c58:	e026      	b.n	8003ca8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c5a:	f7fe fdff 	bl	800285c <HAL_GetTick>
 8003c5e:	4602      	mov	r2, r0
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	1ad3      	subs	r3, r2, r3
 8003c64:	68ba      	ldr	r2, [r7, #8]
 8003c66:	429a      	cmp	r2, r3
 8003c68:	d302      	bcc.n	8003c70 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003c6a:	68bb      	ldr	r3, [r7, #8]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d113      	bne.n	8003c98 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c74:	f043 0220 	orr.w	r2, r3, #32
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	2220      	movs	r2, #32
 8003c80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	2200      	movs	r2, #0
 8003c88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	2200      	movs	r2, #0
 8003c90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003c94:	2301      	movs	r3, #1
 8003c96:	e007      	b.n	8003ca8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	699b      	ldr	r3, [r3, #24]
 8003c9e:	f003 0320 	and.w	r3, r3, #32
 8003ca2:	2b20      	cmp	r3, #32
 8003ca4:	d1cf      	bne.n	8003c46 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003ca6:	2300      	movs	r3, #0
}
 8003ca8:	4618      	mov	r0, r3
 8003caa:	3710      	adds	r7, #16
 8003cac:	46bd      	mov	sp, r7
 8003cae:	bd80      	pop	{r7, pc}

08003cb0 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b084      	sub	sp, #16
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	60f8      	str	r0, [r7, #12]
 8003cb8:	60b9      	str	r1, [r7, #8]
 8003cba:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	699b      	ldr	r3, [r3, #24]
 8003cc2:	f003 0310 	and.w	r3, r3, #16
 8003cc6:	2b10      	cmp	r3, #16
 8003cc8:	d151      	bne.n	8003d6e <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003cca:	e022      	b.n	8003d12 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003ccc:	68bb      	ldr	r3, [r7, #8]
 8003cce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cd2:	d01e      	beq.n	8003d12 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003cd4:	f7fe fdc2 	bl	800285c <HAL_GetTick>
 8003cd8:	4602      	mov	r2, r0
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	1ad3      	subs	r3, r2, r3
 8003cde:	68ba      	ldr	r2, [r7, #8]
 8003ce0:	429a      	cmp	r2, r3
 8003ce2:	d302      	bcc.n	8003cea <I2C_IsAcknowledgeFailed+0x3a>
 8003ce4:	68bb      	ldr	r3, [r7, #8]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d113      	bne.n	8003d12 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cee:	f043 0220 	orr.w	r2, r3, #32
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	2220      	movs	r2, #32
 8003cfa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	2200      	movs	r2, #0
 8003d02:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	2200      	movs	r2, #0
 8003d0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8003d0e:	2301      	movs	r3, #1
 8003d10:	e02e      	b.n	8003d70 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	699b      	ldr	r3, [r3, #24]
 8003d18:	f003 0320 	and.w	r3, r3, #32
 8003d1c:	2b20      	cmp	r3, #32
 8003d1e:	d1d5      	bne.n	8003ccc <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	2210      	movs	r2, #16
 8003d26:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	2220      	movs	r2, #32
 8003d2e:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003d30:	68f8      	ldr	r0, [r7, #12]
 8003d32:	f7ff fedd 	bl	8003af0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	6859      	ldr	r1, [r3, #4]
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681a      	ldr	r2, [r3, #0]
 8003d40:	4b0d      	ldr	r3, [pc, #52]	; (8003d78 <I2C_IsAcknowledgeFailed+0xc8>)
 8003d42:	400b      	ands	r3, r1
 8003d44:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d4a:	f043 0204 	orr.w	r2, r3, #4
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	2220      	movs	r2, #32
 8003d56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	2200      	movs	r2, #0
 8003d66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	e000      	b.n	8003d70 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8003d6e:	2300      	movs	r3, #0
}
 8003d70:	4618      	mov	r0, r3
 8003d72:	3710      	adds	r7, #16
 8003d74:	46bd      	mov	sp, r7
 8003d76:	bd80      	pop	{r7, pc}
 8003d78:	fe00e800 	.word	0xfe00e800

08003d7c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003d7c:	b480      	push	{r7}
 8003d7e:	b085      	sub	sp, #20
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	60f8      	str	r0, [r7, #12]
 8003d84:	607b      	str	r3, [r7, #4]
 8003d86:	460b      	mov	r3, r1
 8003d88:	817b      	strh	r3, [r7, #10]
 8003d8a:	4613      	mov	r3, r2
 8003d8c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	685a      	ldr	r2, [r3, #4]
 8003d94:	69bb      	ldr	r3, [r7, #24]
 8003d96:	0d5b      	lsrs	r3, r3, #21
 8003d98:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003d9c:	4b0d      	ldr	r3, [pc, #52]	; (8003dd4 <I2C_TransferConfig+0x58>)
 8003d9e:	430b      	orrs	r3, r1
 8003da0:	43db      	mvns	r3, r3
 8003da2:	ea02 0103 	and.w	r1, r2, r3
 8003da6:	897b      	ldrh	r3, [r7, #10]
 8003da8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003dac:	7a7b      	ldrb	r3, [r7, #9]
 8003dae:	041b      	lsls	r3, r3, #16
 8003db0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003db4:	431a      	orrs	r2, r3
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	431a      	orrs	r2, r3
 8003dba:	69bb      	ldr	r3, [r7, #24]
 8003dbc:	431a      	orrs	r2, r3
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	430a      	orrs	r2, r1
 8003dc4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8003dc6:	bf00      	nop
 8003dc8:	3714      	adds	r7, #20
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd0:	4770      	bx	lr
 8003dd2:	bf00      	nop
 8003dd4:	03ff63ff 	.word	0x03ff63ff

08003dd8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003dd8:	b480      	push	{r7}
 8003dda:	b083      	sub	sp, #12
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
 8003de0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003de8:	b2db      	uxtb	r3, r3
 8003dea:	2b20      	cmp	r3, #32
 8003dec:	d138      	bne.n	8003e60 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003df4:	2b01      	cmp	r3, #1
 8003df6:	d101      	bne.n	8003dfc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003df8:	2302      	movs	r3, #2
 8003dfa:	e032      	b.n	8003e62 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2201      	movs	r2, #1
 8003e00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2224      	movs	r2, #36	; 0x24
 8003e08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	681a      	ldr	r2, [r3, #0]
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f022 0201 	bic.w	r2, r2, #1
 8003e1a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	681a      	ldr	r2, [r3, #0]
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003e2a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	6819      	ldr	r1, [r3, #0]
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	683a      	ldr	r2, [r7, #0]
 8003e38:	430a      	orrs	r2, r1
 8003e3a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	681a      	ldr	r2, [r3, #0]
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f042 0201 	orr.w	r2, r2, #1
 8003e4a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2220      	movs	r2, #32
 8003e50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2200      	movs	r2, #0
 8003e58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	e000      	b.n	8003e62 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003e60:	2302      	movs	r3, #2
  }
}
 8003e62:	4618      	mov	r0, r3
 8003e64:	370c      	adds	r7, #12
 8003e66:	46bd      	mov	sp, r7
 8003e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6c:	4770      	bx	lr

08003e6e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003e6e:	b480      	push	{r7}
 8003e70:	b085      	sub	sp, #20
 8003e72:	af00      	add	r7, sp, #0
 8003e74:	6078      	str	r0, [r7, #4]
 8003e76:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e7e:	b2db      	uxtb	r3, r3
 8003e80:	2b20      	cmp	r3, #32
 8003e82:	d139      	bne.n	8003ef8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003e8a:	2b01      	cmp	r3, #1
 8003e8c:	d101      	bne.n	8003e92 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003e8e:	2302      	movs	r3, #2
 8003e90:	e033      	b.n	8003efa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2201      	movs	r2, #1
 8003e96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	2224      	movs	r2, #36	; 0x24
 8003e9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	681a      	ldr	r2, [r3, #0]
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f022 0201 	bic.w	r2, r2, #1
 8003eb0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003ec0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	021b      	lsls	r3, r3, #8
 8003ec6:	68fa      	ldr	r2, [r7, #12]
 8003ec8:	4313      	orrs	r3, r2
 8003eca:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	68fa      	ldr	r2, [r7, #12]
 8003ed2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	681a      	ldr	r2, [r3, #0]
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f042 0201 	orr.w	r2, r2, #1
 8003ee2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2220      	movs	r2, #32
 8003ee8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2200      	movs	r2, #0
 8003ef0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	e000      	b.n	8003efa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003ef8:	2302      	movs	r3, #2
  }
}
 8003efa:	4618      	mov	r0, r3
 8003efc:	3714      	adds	r7, #20
 8003efe:	46bd      	mov	sp, r7
 8003f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f04:	4770      	bx	lr

08003f06 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003f06:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f08:	b08f      	sub	sp, #60	; 0x3c
 8003f0a:	af0a      	add	r7, sp, #40	; 0x28
 8003f0c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d101      	bne.n	8003f18 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003f14:	2301      	movs	r3, #1
 8003f16:	e116      	b.n	8004146 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8003f24:	b2db      	uxtb	r3, r3
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d106      	bne.n	8003f38 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003f32:	6878      	ldr	r0, [r7, #4]
 8003f34:	f7fe fa00 	bl	8002338 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2203      	movs	r2, #3
 8003f3c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003f40:	68bb      	ldr	r3, [r7, #8]
 8003f42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d102      	bne.n	8003f52 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2200      	movs	r2, #0
 8003f50:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	4618      	mov	r0, r3
 8003f58:	f005 f83e 	bl	8008fd8 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	603b      	str	r3, [r7, #0]
 8003f62:	687e      	ldr	r6, [r7, #4]
 8003f64:	466d      	mov	r5, sp
 8003f66:	f106 0410 	add.w	r4, r6, #16
 8003f6a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003f6c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003f6e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003f70:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003f72:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003f76:	e885 0003 	stmia.w	r5, {r0, r1}
 8003f7a:	1d33      	adds	r3, r6, #4
 8003f7c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003f7e:	6838      	ldr	r0, [r7, #0]
 8003f80:	f004 fffe 	bl	8008f80 <USB_CoreInit>
 8003f84:	4603      	mov	r3, r0
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d005      	beq.n	8003f96 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	2202      	movs	r2, #2
 8003f8e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003f92:	2301      	movs	r3, #1
 8003f94:	e0d7      	b.n	8004146 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	2100      	movs	r1, #0
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	f005 f82c 	bl	8008ffa <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	73fb      	strb	r3, [r7, #15]
 8003fa6:	e04a      	b.n	800403e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003fa8:	7bfa      	ldrb	r2, [r7, #15]
 8003faa:	6879      	ldr	r1, [r7, #4]
 8003fac:	4613      	mov	r3, r2
 8003fae:	00db      	lsls	r3, r3, #3
 8003fb0:	1a9b      	subs	r3, r3, r2
 8003fb2:	009b      	lsls	r3, r3, #2
 8003fb4:	440b      	add	r3, r1
 8003fb6:	333d      	adds	r3, #61	; 0x3d
 8003fb8:	2201      	movs	r2, #1
 8003fba:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003fbc:	7bfa      	ldrb	r2, [r7, #15]
 8003fbe:	6879      	ldr	r1, [r7, #4]
 8003fc0:	4613      	mov	r3, r2
 8003fc2:	00db      	lsls	r3, r3, #3
 8003fc4:	1a9b      	subs	r3, r3, r2
 8003fc6:	009b      	lsls	r3, r3, #2
 8003fc8:	440b      	add	r3, r1
 8003fca:	333c      	adds	r3, #60	; 0x3c
 8003fcc:	7bfa      	ldrb	r2, [r7, #15]
 8003fce:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003fd0:	7bfa      	ldrb	r2, [r7, #15]
 8003fd2:	7bfb      	ldrb	r3, [r7, #15]
 8003fd4:	b298      	uxth	r0, r3
 8003fd6:	6879      	ldr	r1, [r7, #4]
 8003fd8:	4613      	mov	r3, r2
 8003fda:	00db      	lsls	r3, r3, #3
 8003fdc:	1a9b      	subs	r3, r3, r2
 8003fde:	009b      	lsls	r3, r3, #2
 8003fe0:	440b      	add	r3, r1
 8003fe2:	3342      	adds	r3, #66	; 0x42
 8003fe4:	4602      	mov	r2, r0
 8003fe6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003fe8:	7bfa      	ldrb	r2, [r7, #15]
 8003fea:	6879      	ldr	r1, [r7, #4]
 8003fec:	4613      	mov	r3, r2
 8003fee:	00db      	lsls	r3, r3, #3
 8003ff0:	1a9b      	subs	r3, r3, r2
 8003ff2:	009b      	lsls	r3, r3, #2
 8003ff4:	440b      	add	r3, r1
 8003ff6:	333f      	adds	r3, #63	; 0x3f
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003ffc:	7bfa      	ldrb	r2, [r7, #15]
 8003ffe:	6879      	ldr	r1, [r7, #4]
 8004000:	4613      	mov	r3, r2
 8004002:	00db      	lsls	r3, r3, #3
 8004004:	1a9b      	subs	r3, r3, r2
 8004006:	009b      	lsls	r3, r3, #2
 8004008:	440b      	add	r3, r1
 800400a:	3344      	adds	r3, #68	; 0x44
 800400c:	2200      	movs	r2, #0
 800400e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004010:	7bfa      	ldrb	r2, [r7, #15]
 8004012:	6879      	ldr	r1, [r7, #4]
 8004014:	4613      	mov	r3, r2
 8004016:	00db      	lsls	r3, r3, #3
 8004018:	1a9b      	subs	r3, r3, r2
 800401a:	009b      	lsls	r3, r3, #2
 800401c:	440b      	add	r3, r1
 800401e:	3348      	adds	r3, #72	; 0x48
 8004020:	2200      	movs	r2, #0
 8004022:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004024:	7bfa      	ldrb	r2, [r7, #15]
 8004026:	6879      	ldr	r1, [r7, #4]
 8004028:	4613      	mov	r3, r2
 800402a:	00db      	lsls	r3, r3, #3
 800402c:	1a9b      	subs	r3, r3, r2
 800402e:	009b      	lsls	r3, r3, #2
 8004030:	440b      	add	r3, r1
 8004032:	3350      	adds	r3, #80	; 0x50
 8004034:	2200      	movs	r2, #0
 8004036:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004038:	7bfb      	ldrb	r3, [r7, #15]
 800403a:	3301      	adds	r3, #1
 800403c:	73fb      	strb	r3, [r7, #15]
 800403e:	7bfa      	ldrb	r2, [r7, #15]
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	685b      	ldr	r3, [r3, #4]
 8004044:	429a      	cmp	r2, r3
 8004046:	d3af      	bcc.n	8003fa8 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004048:	2300      	movs	r3, #0
 800404a:	73fb      	strb	r3, [r7, #15]
 800404c:	e044      	b.n	80040d8 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800404e:	7bfa      	ldrb	r2, [r7, #15]
 8004050:	6879      	ldr	r1, [r7, #4]
 8004052:	4613      	mov	r3, r2
 8004054:	00db      	lsls	r3, r3, #3
 8004056:	1a9b      	subs	r3, r3, r2
 8004058:	009b      	lsls	r3, r3, #2
 800405a:	440b      	add	r3, r1
 800405c:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8004060:	2200      	movs	r2, #0
 8004062:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004064:	7bfa      	ldrb	r2, [r7, #15]
 8004066:	6879      	ldr	r1, [r7, #4]
 8004068:	4613      	mov	r3, r2
 800406a:	00db      	lsls	r3, r3, #3
 800406c:	1a9b      	subs	r3, r3, r2
 800406e:	009b      	lsls	r3, r3, #2
 8004070:	440b      	add	r3, r1
 8004072:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8004076:	7bfa      	ldrb	r2, [r7, #15]
 8004078:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800407a:	7bfa      	ldrb	r2, [r7, #15]
 800407c:	6879      	ldr	r1, [r7, #4]
 800407e:	4613      	mov	r3, r2
 8004080:	00db      	lsls	r3, r3, #3
 8004082:	1a9b      	subs	r3, r3, r2
 8004084:	009b      	lsls	r3, r3, #2
 8004086:	440b      	add	r3, r1
 8004088:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800408c:	2200      	movs	r2, #0
 800408e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004090:	7bfa      	ldrb	r2, [r7, #15]
 8004092:	6879      	ldr	r1, [r7, #4]
 8004094:	4613      	mov	r3, r2
 8004096:	00db      	lsls	r3, r3, #3
 8004098:	1a9b      	subs	r3, r3, r2
 800409a:	009b      	lsls	r3, r3, #2
 800409c:	440b      	add	r3, r1
 800409e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80040a2:	2200      	movs	r2, #0
 80040a4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80040a6:	7bfa      	ldrb	r2, [r7, #15]
 80040a8:	6879      	ldr	r1, [r7, #4]
 80040aa:	4613      	mov	r3, r2
 80040ac:	00db      	lsls	r3, r3, #3
 80040ae:	1a9b      	subs	r3, r3, r2
 80040b0:	009b      	lsls	r3, r3, #2
 80040b2:	440b      	add	r3, r1
 80040b4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80040b8:	2200      	movs	r2, #0
 80040ba:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80040bc:	7bfa      	ldrb	r2, [r7, #15]
 80040be:	6879      	ldr	r1, [r7, #4]
 80040c0:	4613      	mov	r3, r2
 80040c2:	00db      	lsls	r3, r3, #3
 80040c4:	1a9b      	subs	r3, r3, r2
 80040c6:	009b      	lsls	r3, r3, #2
 80040c8:	440b      	add	r3, r1
 80040ca:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80040ce:	2200      	movs	r2, #0
 80040d0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80040d2:	7bfb      	ldrb	r3, [r7, #15]
 80040d4:	3301      	adds	r3, #1
 80040d6:	73fb      	strb	r3, [r7, #15]
 80040d8:	7bfa      	ldrb	r2, [r7, #15]
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	685b      	ldr	r3, [r3, #4]
 80040de:	429a      	cmp	r2, r3
 80040e0:	d3b5      	bcc.n	800404e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	603b      	str	r3, [r7, #0]
 80040e8:	687e      	ldr	r6, [r7, #4]
 80040ea:	466d      	mov	r5, sp
 80040ec:	f106 0410 	add.w	r4, r6, #16
 80040f0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80040f2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80040f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80040f6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80040f8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80040fc:	e885 0003 	stmia.w	r5, {r0, r1}
 8004100:	1d33      	adds	r3, r6, #4
 8004102:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004104:	6838      	ldr	r0, [r7, #0]
 8004106:	f004 ffa3 	bl	8009050 <USB_DevInit>
 800410a:	4603      	mov	r3, r0
 800410c:	2b00      	cmp	r3, #0
 800410e:	d005      	beq.n	800411c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2202      	movs	r2, #2
 8004114:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8004118:	2301      	movs	r3, #1
 800411a:	e014      	b.n	8004146 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2200      	movs	r2, #0
 8004120:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2201      	movs	r2, #1
 8004128:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004130:	2b01      	cmp	r3, #1
 8004132:	d102      	bne.n	800413a <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004134:	6878      	ldr	r0, [r7, #4]
 8004136:	f000 f80a 	bl	800414e <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	4618      	mov	r0, r3
 8004140:	f005 f933 	bl	80093aa <USB_DevDisconnect>

  return HAL_OK;
 8004144:	2300      	movs	r3, #0
}
 8004146:	4618      	mov	r0, r3
 8004148:	3714      	adds	r7, #20
 800414a:	46bd      	mov	sp, r7
 800414c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800414e <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800414e:	b480      	push	{r7}
 8004150:	b085      	sub	sp, #20
 8004152:	af00      	add	r7, sp, #0
 8004154:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2201      	movs	r2, #1
 8004160:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2200      	movs	r2, #0
 8004168:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	699b      	ldr	r3, [r3, #24]
 8004170:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800417c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004180:	f043 0303 	orr.w	r3, r3, #3
 8004184:	68fa      	ldr	r2, [r7, #12]
 8004186:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8004188:	2300      	movs	r3, #0
}
 800418a:	4618      	mov	r0, r3
 800418c:	3714      	adds	r7, #20
 800418e:	46bd      	mov	sp, r7
 8004190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004194:	4770      	bx	lr
	...

08004198 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004198:	b480      	push	{r7}
 800419a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800419c:	4b05      	ldr	r3, [pc, #20]	; (80041b4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	4a04      	ldr	r2, [pc, #16]	; (80041b4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80041a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041a6:	6013      	str	r3, [r2, #0]
}
 80041a8:	bf00      	nop
 80041aa:	46bd      	mov	sp, r7
 80041ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b0:	4770      	bx	lr
 80041b2:	bf00      	nop
 80041b4:	40007000 	.word	0x40007000

080041b8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80041b8:	b480      	push	{r7}
 80041ba:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80041bc:	4b04      	ldr	r3, [pc, #16]	; (80041d0 <HAL_PWREx_GetVoltageRange+0x18>)
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80041c4:	4618      	mov	r0, r3
 80041c6:	46bd      	mov	sp, r7
 80041c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041cc:	4770      	bx	lr
 80041ce:	bf00      	nop
 80041d0:	40007000 	.word	0x40007000

080041d4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80041d4:	b480      	push	{r7}
 80041d6:	b085      	sub	sp, #20
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80041e2:	d130      	bne.n	8004246 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80041e4:	4b23      	ldr	r3, [pc, #140]	; (8004274 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80041ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80041f0:	d038      	beq.n	8004264 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80041f2:	4b20      	ldr	r3, [pc, #128]	; (8004274 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80041fa:	4a1e      	ldr	r2, [pc, #120]	; (8004274 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80041fc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004200:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004202:	4b1d      	ldr	r3, [pc, #116]	; (8004278 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	2232      	movs	r2, #50	; 0x32
 8004208:	fb02 f303 	mul.w	r3, r2, r3
 800420c:	4a1b      	ldr	r2, [pc, #108]	; (800427c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800420e:	fba2 2303 	umull	r2, r3, r2, r3
 8004212:	0c9b      	lsrs	r3, r3, #18
 8004214:	3301      	adds	r3, #1
 8004216:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004218:	e002      	b.n	8004220 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	3b01      	subs	r3, #1
 800421e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004220:	4b14      	ldr	r3, [pc, #80]	; (8004274 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004222:	695b      	ldr	r3, [r3, #20]
 8004224:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004228:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800422c:	d102      	bne.n	8004234 <HAL_PWREx_ControlVoltageScaling+0x60>
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	2b00      	cmp	r3, #0
 8004232:	d1f2      	bne.n	800421a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004234:	4b0f      	ldr	r3, [pc, #60]	; (8004274 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004236:	695b      	ldr	r3, [r3, #20]
 8004238:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800423c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004240:	d110      	bne.n	8004264 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004242:	2303      	movs	r3, #3
 8004244:	e00f      	b.n	8004266 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004246:	4b0b      	ldr	r3, [pc, #44]	; (8004274 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800424e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004252:	d007      	beq.n	8004264 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004254:	4b07      	ldr	r3, [pc, #28]	; (8004274 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800425c:	4a05      	ldr	r2, [pc, #20]	; (8004274 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800425e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004262:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004264:	2300      	movs	r3, #0
}
 8004266:	4618      	mov	r0, r3
 8004268:	3714      	adds	r7, #20
 800426a:	46bd      	mov	sp, r7
 800426c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004270:	4770      	bx	lr
 8004272:	bf00      	nop
 8004274:	40007000 	.word	0x40007000
 8004278:	20000010 	.word	0x20000010
 800427c:	431bde83 	.word	0x431bde83

08004280 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8004280:	b480      	push	{r7}
 8004282:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8004284:	4b05      	ldr	r3, [pc, #20]	; (800429c <HAL_PWREx_EnableVddUSB+0x1c>)
 8004286:	685b      	ldr	r3, [r3, #4]
 8004288:	4a04      	ldr	r2, [pc, #16]	; (800429c <HAL_PWREx_EnableVddUSB+0x1c>)
 800428a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800428e:	6053      	str	r3, [r2, #4]
}
 8004290:	bf00      	nop
 8004292:	46bd      	mov	sp, r7
 8004294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004298:	4770      	bx	lr
 800429a:	bf00      	nop
 800429c:	40007000 	.word	0x40007000

080042a0 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b086      	sub	sp, #24
 80042a4:	af02      	add	r7, sp, #8
 80042a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80042a8:	f7fe fad8 	bl	800285c <HAL_GetTick>
 80042ac:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d101      	bne.n	80042b8 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 80042b4:	2301      	movs	r3, #1
 80042b6:	e063      	b.n	8004380 <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80042be:	b2db      	uxtb	r3, r3
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d10b      	bne.n	80042dc <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2200      	movs	r2, #0
 80042c8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 80042cc:	6878      	ldr	r0, [r7, #4]
 80042ce:	f7fd fe7d 	bl	8001fcc <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 80042d2:	f241 3188 	movw	r1, #5000	; 0x1388
 80042d6:	6878      	ldr	r0, [r7, #4]
 80042d8:	f000 f858 	bl	800438c <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	689b      	ldr	r3, [r3, #8]
 80042ea:	3b01      	subs	r3, #1
 80042ec:	021a      	lsls	r2, r3, #8
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	430a      	orrs	r2, r1
 80042f4:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042fa:	9300      	str	r3, [sp, #0]
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	2200      	movs	r2, #0
 8004300:	2120      	movs	r1, #32
 8004302:	6878      	ldr	r0, [r7, #4]
 8004304:	f000 f850 	bl	80043a8 <QSPI_WaitFlagStateUntilTimeout>
 8004308:	4603      	mov	r3, r0
 800430a:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 800430c:	7afb      	ldrb	r3, [r7, #11]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d131      	bne.n	8004376 <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800431c:	f023 0310 	bic.w	r3, r3, #16
 8004320:	687a      	ldr	r2, [r7, #4]
 8004322:	6852      	ldr	r2, [r2, #4]
 8004324:	0611      	lsls	r1, r2, #24
 8004326:	687a      	ldr	r2, [r7, #4]
 8004328:	68d2      	ldr	r2, [r2, #12]
 800432a:	4311      	orrs	r1, r2
 800432c:	687a      	ldr	r2, [r7, #4]
 800432e:	6812      	ldr	r2, [r2, #0]
 8004330:	430b      	orrs	r3, r1
 8004332:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	685a      	ldr	r2, [r3, #4]
 800433a:	4b13      	ldr	r3, [pc, #76]	; (8004388 <HAL_QSPI_Init+0xe8>)
 800433c:	4013      	ands	r3, r2
 800433e:	687a      	ldr	r2, [r7, #4]
 8004340:	6912      	ldr	r2, [r2, #16]
 8004342:	0411      	lsls	r1, r2, #16
 8004344:	687a      	ldr	r2, [r7, #4]
 8004346:	6952      	ldr	r2, [r2, #20]
 8004348:	4311      	orrs	r1, r2
 800434a:	687a      	ldr	r2, [r7, #4]
 800434c:	6992      	ldr	r2, [r2, #24]
 800434e:	4311      	orrs	r1, r2
 8004350:	687a      	ldr	r2, [r7, #4]
 8004352:	6812      	ldr	r2, [r2, #0]
 8004354:	430b      	orrs	r3, r1
 8004356:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	681a      	ldr	r2, [r3, #0]
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f042 0201 	orr.w	r2, r2, #1
 8004366:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2200      	movs	r2, #0
 800436c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	2201      	movs	r2, #1
 8004372:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	2200      	movs	r2, #0
 800437a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 800437e:	7afb      	ldrb	r3, [r7, #11]
}
 8004380:	4618      	mov	r0, r3
 8004382:	3710      	adds	r7, #16
 8004384:	46bd      	mov	sp, r7
 8004386:	bd80      	pop	{r7, pc}
 8004388:	ffe0f8fe 	.word	0xffe0f8fe

0800438c <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 800438c:	b480      	push	{r7}
 800438e:	b083      	sub	sp, #12
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
 8004394:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	683a      	ldr	r2, [r7, #0]
 800439a:	641a      	str	r2, [r3, #64]	; 0x40
}
 800439c:	bf00      	nop
 800439e:	370c      	adds	r7, #12
 80043a0:	46bd      	mov	sp, r7
 80043a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a6:	4770      	bx	lr

080043a8 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b084      	sub	sp, #16
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	60f8      	str	r0, [r7, #12]
 80043b0:	60b9      	str	r1, [r7, #8]
 80043b2:	603b      	str	r3, [r7, #0]
 80043b4:	4613      	mov	r3, r2
 80043b6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80043b8:	e01a      	b.n	80043f0 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043ba:	69bb      	ldr	r3, [r7, #24]
 80043bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043c0:	d016      	beq.n	80043f0 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043c2:	f7fe fa4b 	bl	800285c <HAL_GetTick>
 80043c6:	4602      	mov	r2, r0
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	1ad3      	subs	r3, r2, r3
 80043cc:	69ba      	ldr	r2, [r7, #24]
 80043ce:	429a      	cmp	r2, r3
 80043d0:	d302      	bcc.n	80043d8 <QSPI_WaitFlagStateUntilTimeout+0x30>
 80043d2:	69bb      	ldr	r3, [r7, #24]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d10b      	bne.n	80043f0 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	2204      	movs	r2, #4
 80043dc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043e4:	f043 0201 	orr.w	r2, r3, #1
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	63da      	str	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80043ec:	2301      	movs	r3, #1
 80043ee:	e00e      	b.n	800440e <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	689a      	ldr	r2, [r3, #8]
 80043f6:	68bb      	ldr	r3, [r7, #8]
 80043f8:	4013      	ands	r3, r2
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	bf14      	ite	ne
 80043fe:	2301      	movne	r3, #1
 8004400:	2300      	moveq	r3, #0
 8004402:	b2db      	uxtb	r3, r3
 8004404:	461a      	mov	r2, r3
 8004406:	79fb      	ldrb	r3, [r7, #7]
 8004408:	429a      	cmp	r2, r3
 800440a:	d1d6      	bne.n	80043ba <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800440c:	2300      	movs	r3, #0
}
 800440e:	4618      	mov	r0, r3
 8004410:	3710      	adds	r7, #16
 8004412:	46bd      	mov	sp, r7
 8004414:	bd80      	pop	{r7, pc}
	...

08004418 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004418:	b580      	push	{r7, lr}
 800441a:	b088      	sub	sp, #32
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d101      	bne.n	800442a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004426:	2301      	movs	r3, #1
 8004428:	e3d8      	b.n	8004bdc <HAL_RCC_OscConfig+0x7c4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800442a:	4b97      	ldr	r3, [pc, #604]	; (8004688 <HAL_RCC_OscConfig+0x270>)
 800442c:	689b      	ldr	r3, [r3, #8]
 800442e:	f003 030c 	and.w	r3, r3, #12
 8004432:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004434:	4b94      	ldr	r3, [pc, #592]	; (8004688 <HAL_RCC_OscConfig+0x270>)
 8004436:	68db      	ldr	r3, [r3, #12]
 8004438:	f003 0303 	and.w	r3, r3, #3
 800443c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f003 0310 	and.w	r3, r3, #16
 8004446:	2b00      	cmp	r3, #0
 8004448:	f000 80e4 	beq.w	8004614 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800444c:	69bb      	ldr	r3, [r7, #24]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d007      	beq.n	8004462 <HAL_RCC_OscConfig+0x4a>
 8004452:	69bb      	ldr	r3, [r7, #24]
 8004454:	2b0c      	cmp	r3, #12
 8004456:	f040 808b 	bne.w	8004570 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800445a:	697b      	ldr	r3, [r7, #20]
 800445c:	2b01      	cmp	r3, #1
 800445e:	f040 8087 	bne.w	8004570 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004462:	4b89      	ldr	r3, [pc, #548]	; (8004688 <HAL_RCC_OscConfig+0x270>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f003 0302 	and.w	r3, r3, #2
 800446a:	2b00      	cmp	r3, #0
 800446c:	d005      	beq.n	800447a <HAL_RCC_OscConfig+0x62>
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	699b      	ldr	r3, [r3, #24]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d101      	bne.n	800447a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8004476:	2301      	movs	r3, #1
 8004478:	e3b0      	b.n	8004bdc <HAL_RCC_OscConfig+0x7c4>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6a1a      	ldr	r2, [r3, #32]
 800447e:	4b82      	ldr	r3, [pc, #520]	; (8004688 <HAL_RCC_OscConfig+0x270>)
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f003 0308 	and.w	r3, r3, #8
 8004486:	2b00      	cmp	r3, #0
 8004488:	d004      	beq.n	8004494 <HAL_RCC_OscConfig+0x7c>
 800448a:	4b7f      	ldr	r3, [pc, #508]	; (8004688 <HAL_RCC_OscConfig+0x270>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004492:	e005      	b.n	80044a0 <HAL_RCC_OscConfig+0x88>
 8004494:	4b7c      	ldr	r3, [pc, #496]	; (8004688 <HAL_RCC_OscConfig+0x270>)
 8004496:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800449a:	091b      	lsrs	r3, r3, #4
 800449c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80044a0:	4293      	cmp	r3, r2
 80044a2:	d223      	bcs.n	80044ec <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6a1b      	ldr	r3, [r3, #32]
 80044a8:	4618      	mov	r0, r3
 80044aa:	f000 fd75 	bl	8004f98 <RCC_SetFlashLatencyFromMSIRange>
 80044ae:	4603      	mov	r3, r0
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d001      	beq.n	80044b8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80044b4:	2301      	movs	r3, #1
 80044b6:	e391      	b.n	8004bdc <HAL_RCC_OscConfig+0x7c4>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80044b8:	4b73      	ldr	r3, [pc, #460]	; (8004688 <HAL_RCC_OscConfig+0x270>)
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	4a72      	ldr	r2, [pc, #456]	; (8004688 <HAL_RCC_OscConfig+0x270>)
 80044be:	f043 0308 	orr.w	r3, r3, #8
 80044c2:	6013      	str	r3, [r2, #0]
 80044c4:	4b70      	ldr	r3, [pc, #448]	; (8004688 <HAL_RCC_OscConfig+0x270>)
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6a1b      	ldr	r3, [r3, #32]
 80044d0:	496d      	ldr	r1, [pc, #436]	; (8004688 <HAL_RCC_OscConfig+0x270>)
 80044d2:	4313      	orrs	r3, r2
 80044d4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80044d6:	4b6c      	ldr	r3, [pc, #432]	; (8004688 <HAL_RCC_OscConfig+0x270>)
 80044d8:	685b      	ldr	r3, [r3, #4]
 80044da:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	69db      	ldr	r3, [r3, #28]
 80044e2:	021b      	lsls	r3, r3, #8
 80044e4:	4968      	ldr	r1, [pc, #416]	; (8004688 <HAL_RCC_OscConfig+0x270>)
 80044e6:	4313      	orrs	r3, r2
 80044e8:	604b      	str	r3, [r1, #4]
 80044ea:	e025      	b.n	8004538 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80044ec:	4b66      	ldr	r3, [pc, #408]	; (8004688 <HAL_RCC_OscConfig+0x270>)
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	4a65      	ldr	r2, [pc, #404]	; (8004688 <HAL_RCC_OscConfig+0x270>)
 80044f2:	f043 0308 	orr.w	r3, r3, #8
 80044f6:	6013      	str	r3, [r2, #0]
 80044f8:	4b63      	ldr	r3, [pc, #396]	; (8004688 <HAL_RCC_OscConfig+0x270>)
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6a1b      	ldr	r3, [r3, #32]
 8004504:	4960      	ldr	r1, [pc, #384]	; (8004688 <HAL_RCC_OscConfig+0x270>)
 8004506:	4313      	orrs	r3, r2
 8004508:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800450a:	4b5f      	ldr	r3, [pc, #380]	; (8004688 <HAL_RCC_OscConfig+0x270>)
 800450c:	685b      	ldr	r3, [r3, #4]
 800450e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	69db      	ldr	r3, [r3, #28]
 8004516:	021b      	lsls	r3, r3, #8
 8004518:	495b      	ldr	r1, [pc, #364]	; (8004688 <HAL_RCC_OscConfig+0x270>)
 800451a:	4313      	orrs	r3, r2
 800451c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800451e:	69bb      	ldr	r3, [r7, #24]
 8004520:	2b00      	cmp	r3, #0
 8004522:	d109      	bne.n	8004538 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6a1b      	ldr	r3, [r3, #32]
 8004528:	4618      	mov	r0, r3
 800452a:	f000 fd35 	bl	8004f98 <RCC_SetFlashLatencyFromMSIRange>
 800452e:	4603      	mov	r3, r0
 8004530:	2b00      	cmp	r3, #0
 8004532:	d001      	beq.n	8004538 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8004534:	2301      	movs	r3, #1
 8004536:	e351      	b.n	8004bdc <HAL_RCC_OscConfig+0x7c4>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004538:	f000 fc38 	bl	8004dac <HAL_RCC_GetSysClockFreq>
 800453c:	4602      	mov	r2, r0
 800453e:	4b52      	ldr	r3, [pc, #328]	; (8004688 <HAL_RCC_OscConfig+0x270>)
 8004540:	689b      	ldr	r3, [r3, #8]
 8004542:	091b      	lsrs	r3, r3, #4
 8004544:	f003 030f 	and.w	r3, r3, #15
 8004548:	4950      	ldr	r1, [pc, #320]	; (800468c <HAL_RCC_OscConfig+0x274>)
 800454a:	5ccb      	ldrb	r3, [r1, r3]
 800454c:	f003 031f 	and.w	r3, r3, #31
 8004550:	fa22 f303 	lsr.w	r3, r2, r3
 8004554:	4a4e      	ldr	r2, [pc, #312]	; (8004690 <HAL_RCC_OscConfig+0x278>)
 8004556:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004558:	4b4e      	ldr	r3, [pc, #312]	; (8004694 <HAL_RCC_OscConfig+0x27c>)
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	4618      	mov	r0, r3
 800455e:	f7fd ff87 	bl	8002470 <HAL_InitTick>
 8004562:	4603      	mov	r3, r0
 8004564:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004566:	7bfb      	ldrb	r3, [r7, #15]
 8004568:	2b00      	cmp	r3, #0
 800456a:	d052      	beq.n	8004612 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800456c:	7bfb      	ldrb	r3, [r7, #15]
 800456e:	e335      	b.n	8004bdc <HAL_RCC_OscConfig+0x7c4>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	699b      	ldr	r3, [r3, #24]
 8004574:	2b00      	cmp	r3, #0
 8004576:	d032      	beq.n	80045de <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004578:	4b43      	ldr	r3, [pc, #268]	; (8004688 <HAL_RCC_OscConfig+0x270>)
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	4a42      	ldr	r2, [pc, #264]	; (8004688 <HAL_RCC_OscConfig+0x270>)
 800457e:	f043 0301 	orr.w	r3, r3, #1
 8004582:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004584:	f7fe f96a 	bl	800285c <HAL_GetTick>
 8004588:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800458a:	e008      	b.n	800459e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800458c:	f7fe f966 	bl	800285c <HAL_GetTick>
 8004590:	4602      	mov	r2, r0
 8004592:	693b      	ldr	r3, [r7, #16]
 8004594:	1ad3      	subs	r3, r2, r3
 8004596:	2b02      	cmp	r3, #2
 8004598:	d901      	bls.n	800459e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800459a:	2303      	movs	r3, #3
 800459c:	e31e      	b.n	8004bdc <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800459e:	4b3a      	ldr	r3, [pc, #232]	; (8004688 <HAL_RCC_OscConfig+0x270>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f003 0302 	and.w	r3, r3, #2
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d0f0      	beq.n	800458c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80045aa:	4b37      	ldr	r3, [pc, #220]	; (8004688 <HAL_RCC_OscConfig+0x270>)
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	4a36      	ldr	r2, [pc, #216]	; (8004688 <HAL_RCC_OscConfig+0x270>)
 80045b0:	f043 0308 	orr.w	r3, r3, #8
 80045b4:	6013      	str	r3, [r2, #0]
 80045b6:	4b34      	ldr	r3, [pc, #208]	; (8004688 <HAL_RCC_OscConfig+0x270>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6a1b      	ldr	r3, [r3, #32]
 80045c2:	4931      	ldr	r1, [pc, #196]	; (8004688 <HAL_RCC_OscConfig+0x270>)
 80045c4:	4313      	orrs	r3, r2
 80045c6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80045c8:	4b2f      	ldr	r3, [pc, #188]	; (8004688 <HAL_RCC_OscConfig+0x270>)
 80045ca:	685b      	ldr	r3, [r3, #4]
 80045cc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	69db      	ldr	r3, [r3, #28]
 80045d4:	021b      	lsls	r3, r3, #8
 80045d6:	492c      	ldr	r1, [pc, #176]	; (8004688 <HAL_RCC_OscConfig+0x270>)
 80045d8:	4313      	orrs	r3, r2
 80045da:	604b      	str	r3, [r1, #4]
 80045dc:	e01a      	b.n	8004614 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80045de:	4b2a      	ldr	r3, [pc, #168]	; (8004688 <HAL_RCC_OscConfig+0x270>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	4a29      	ldr	r2, [pc, #164]	; (8004688 <HAL_RCC_OscConfig+0x270>)
 80045e4:	f023 0301 	bic.w	r3, r3, #1
 80045e8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80045ea:	f7fe f937 	bl	800285c <HAL_GetTick>
 80045ee:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80045f0:	e008      	b.n	8004604 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80045f2:	f7fe f933 	bl	800285c <HAL_GetTick>
 80045f6:	4602      	mov	r2, r0
 80045f8:	693b      	ldr	r3, [r7, #16]
 80045fa:	1ad3      	subs	r3, r2, r3
 80045fc:	2b02      	cmp	r3, #2
 80045fe:	d901      	bls.n	8004604 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8004600:	2303      	movs	r3, #3
 8004602:	e2eb      	b.n	8004bdc <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004604:	4b20      	ldr	r3, [pc, #128]	; (8004688 <HAL_RCC_OscConfig+0x270>)
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f003 0302 	and.w	r3, r3, #2
 800460c:	2b00      	cmp	r3, #0
 800460e:	d1f0      	bne.n	80045f2 <HAL_RCC_OscConfig+0x1da>
 8004610:	e000      	b.n	8004614 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004612:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f003 0301 	and.w	r3, r3, #1
 800461c:	2b00      	cmp	r3, #0
 800461e:	d074      	beq.n	800470a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004620:	69bb      	ldr	r3, [r7, #24]
 8004622:	2b08      	cmp	r3, #8
 8004624:	d005      	beq.n	8004632 <HAL_RCC_OscConfig+0x21a>
 8004626:	69bb      	ldr	r3, [r7, #24]
 8004628:	2b0c      	cmp	r3, #12
 800462a:	d10e      	bne.n	800464a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800462c:	697b      	ldr	r3, [r7, #20]
 800462e:	2b03      	cmp	r3, #3
 8004630:	d10b      	bne.n	800464a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004632:	4b15      	ldr	r3, [pc, #84]	; (8004688 <HAL_RCC_OscConfig+0x270>)
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800463a:	2b00      	cmp	r3, #0
 800463c:	d064      	beq.n	8004708 <HAL_RCC_OscConfig+0x2f0>
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	685b      	ldr	r3, [r3, #4]
 8004642:	2b00      	cmp	r3, #0
 8004644:	d160      	bne.n	8004708 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004646:	2301      	movs	r3, #1
 8004648:	e2c8      	b.n	8004bdc <HAL_RCC_OscConfig+0x7c4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	685b      	ldr	r3, [r3, #4]
 800464e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004652:	d106      	bne.n	8004662 <HAL_RCC_OscConfig+0x24a>
 8004654:	4b0c      	ldr	r3, [pc, #48]	; (8004688 <HAL_RCC_OscConfig+0x270>)
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	4a0b      	ldr	r2, [pc, #44]	; (8004688 <HAL_RCC_OscConfig+0x270>)
 800465a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800465e:	6013      	str	r3, [r2, #0]
 8004660:	e026      	b.n	80046b0 <HAL_RCC_OscConfig+0x298>
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	685b      	ldr	r3, [r3, #4]
 8004666:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800466a:	d115      	bne.n	8004698 <HAL_RCC_OscConfig+0x280>
 800466c:	4b06      	ldr	r3, [pc, #24]	; (8004688 <HAL_RCC_OscConfig+0x270>)
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	4a05      	ldr	r2, [pc, #20]	; (8004688 <HAL_RCC_OscConfig+0x270>)
 8004672:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004676:	6013      	str	r3, [r2, #0]
 8004678:	4b03      	ldr	r3, [pc, #12]	; (8004688 <HAL_RCC_OscConfig+0x270>)
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	4a02      	ldr	r2, [pc, #8]	; (8004688 <HAL_RCC_OscConfig+0x270>)
 800467e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004682:	6013      	str	r3, [r2, #0]
 8004684:	e014      	b.n	80046b0 <HAL_RCC_OscConfig+0x298>
 8004686:	bf00      	nop
 8004688:	40021000 	.word	0x40021000
 800468c:	08015668 	.word	0x08015668
 8004690:	20000010 	.word	0x20000010
 8004694:	20000014 	.word	0x20000014
 8004698:	4ba0      	ldr	r3, [pc, #640]	; (800491c <HAL_RCC_OscConfig+0x504>)
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	4a9f      	ldr	r2, [pc, #636]	; (800491c <HAL_RCC_OscConfig+0x504>)
 800469e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80046a2:	6013      	str	r3, [r2, #0]
 80046a4:	4b9d      	ldr	r3, [pc, #628]	; (800491c <HAL_RCC_OscConfig+0x504>)
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	4a9c      	ldr	r2, [pc, #624]	; (800491c <HAL_RCC_OscConfig+0x504>)
 80046aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80046ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	685b      	ldr	r3, [r3, #4]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d013      	beq.n	80046e0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046b8:	f7fe f8d0 	bl	800285c <HAL_GetTick>
 80046bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80046be:	e008      	b.n	80046d2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80046c0:	f7fe f8cc 	bl	800285c <HAL_GetTick>
 80046c4:	4602      	mov	r2, r0
 80046c6:	693b      	ldr	r3, [r7, #16]
 80046c8:	1ad3      	subs	r3, r2, r3
 80046ca:	2b64      	cmp	r3, #100	; 0x64
 80046cc:	d901      	bls.n	80046d2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80046ce:	2303      	movs	r3, #3
 80046d0:	e284      	b.n	8004bdc <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80046d2:	4b92      	ldr	r3, [pc, #584]	; (800491c <HAL_RCC_OscConfig+0x504>)
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d0f0      	beq.n	80046c0 <HAL_RCC_OscConfig+0x2a8>
 80046de:	e014      	b.n	800470a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046e0:	f7fe f8bc 	bl	800285c <HAL_GetTick>
 80046e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80046e6:	e008      	b.n	80046fa <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80046e8:	f7fe f8b8 	bl	800285c <HAL_GetTick>
 80046ec:	4602      	mov	r2, r0
 80046ee:	693b      	ldr	r3, [r7, #16]
 80046f0:	1ad3      	subs	r3, r2, r3
 80046f2:	2b64      	cmp	r3, #100	; 0x64
 80046f4:	d901      	bls.n	80046fa <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80046f6:	2303      	movs	r3, #3
 80046f8:	e270      	b.n	8004bdc <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80046fa:	4b88      	ldr	r3, [pc, #544]	; (800491c <HAL_RCC_OscConfig+0x504>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004702:	2b00      	cmp	r3, #0
 8004704:	d1f0      	bne.n	80046e8 <HAL_RCC_OscConfig+0x2d0>
 8004706:	e000      	b.n	800470a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004708:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f003 0302 	and.w	r3, r3, #2
 8004712:	2b00      	cmp	r3, #0
 8004714:	d060      	beq.n	80047d8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004716:	69bb      	ldr	r3, [r7, #24]
 8004718:	2b04      	cmp	r3, #4
 800471a:	d005      	beq.n	8004728 <HAL_RCC_OscConfig+0x310>
 800471c:	69bb      	ldr	r3, [r7, #24]
 800471e:	2b0c      	cmp	r3, #12
 8004720:	d119      	bne.n	8004756 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004722:	697b      	ldr	r3, [r7, #20]
 8004724:	2b02      	cmp	r3, #2
 8004726:	d116      	bne.n	8004756 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004728:	4b7c      	ldr	r3, [pc, #496]	; (800491c <HAL_RCC_OscConfig+0x504>)
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004730:	2b00      	cmp	r3, #0
 8004732:	d005      	beq.n	8004740 <HAL_RCC_OscConfig+0x328>
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	68db      	ldr	r3, [r3, #12]
 8004738:	2b00      	cmp	r3, #0
 800473a:	d101      	bne.n	8004740 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800473c:	2301      	movs	r3, #1
 800473e:	e24d      	b.n	8004bdc <HAL_RCC_OscConfig+0x7c4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004740:	4b76      	ldr	r3, [pc, #472]	; (800491c <HAL_RCC_OscConfig+0x504>)
 8004742:	685b      	ldr	r3, [r3, #4]
 8004744:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	691b      	ldr	r3, [r3, #16]
 800474c:	061b      	lsls	r3, r3, #24
 800474e:	4973      	ldr	r1, [pc, #460]	; (800491c <HAL_RCC_OscConfig+0x504>)
 8004750:	4313      	orrs	r3, r2
 8004752:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004754:	e040      	b.n	80047d8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	68db      	ldr	r3, [r3, #12]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d023      	beq.n	80047a6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800475e:	4b6f      	ldr	r3, [pc, #444]	; (800491c <HAL_RCC_OscConfig+0x504>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	4a6e      	ldr	r2, [pc, #440]	; (800491c <HAL_RCC_OscConfig+0x504>)
 8004764:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004768:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800476a:	f7fe f877 	bl	800285c <HAL_GetTick>
 800476e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004770:	e008      	b.n	8004784 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004772:	f7fe f873 	bl	800285c <HAL_GetTick>
 8004776:	4602      	mov	r2, r0
 8004778:	693b      	ldr	r3, [r7, #16]
 800477a:	1ad3      	subs	r3, r2, r3
 800477c:	2b02      	cmp	r3, #2
 800477e:	d901      	bls.n	8004784 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004780:	2303      	movs	r3, #3
 8004782:	e22b      	b.n	8004bdc <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004784:	4b65      	ldr	r3, [pc, #404]	; (800491c <HAL_RCC_OscConfig+0x504>)
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800478c:	2b00      	cmp	r3, #0
 800478e:	d0f0      	beq.n	8004772 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004790:	4b62      	ldr	r3, [pc, #392]	; (800491c <HAL_RCC_OscConfig+0x504>)
 8004792:	685b      	ldr	r3, [r3, #4]
 8004794:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	691b      	ldr	r3, [r3, #16]
 800479c:	061b      	lsls	r3, r3, #24
 800479e:	495f      	ldr	r1, [pc, #380]	; (800491c <HAL_RCC_OscConfig+0x504>)
 80047a0:	4313      	orrs	r3, r2
 80047a2:	604b      	str	r3, [r1, #4]
 80047a4:	e018      	b.n	80047d8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80047a6:	4b5d      	ldr	r3, [pc, #372]	; (800491c <HAL_RCC_OscConfig+0x504>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	4a5c      	ldr	r2, [pc, #368]	; (800491c <HAL_RCC_OscConfig+0x504>)
 80047ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80047b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047b2:	f7fe f853 	bl	800285c <HAL_GetTick>
 80047b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80047b8:	e008      	b.n	80047cc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80047ba:	f7fe f84f 	bl	800285c <HAL_GetTick>
 80047be:	4602      	mov	r2, r0
 80047c0:	693b      	ldr	r3, [r7, #16]
 80047c2:	1ad3      	subs	r3, r2, r3
 80047c4:	2b02      	cmp	r3, #2
 80047c6:	d901      	bls.n	80047cc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80047c8:	2303      	movs	r3, #3
 80047ca:	e207      	b.n	8004bdc <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80047cc:	4b53      	ldr	r3, [pc, #332]	; (800491c <HAL_RCC_OscConfig+0x504>)
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d1f0      	bne.n	80047ba <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f003 0308 	and.w	r3, r3, #8
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d03c      	beq.n	800485e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	695b      	ldr	r3, [r3, #20]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d01c      	beq.n	8004826 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80047ec:	4b4b      	ldr	r3, [pc, #300]	; (800491c <HAL_RCC_OscConfig+0x504>)
 80047ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80047f2:	4a4a      	ldr	r2, [pc, #296]	; (800491c <HAL_RCC_OscConfig+0x504>)
 80047f4:	f043 0301 	orr.w	r3, r3, #1
 80047f8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047fc:	f7fe f82e 	bl	800285c <HAL_GetTick>
 8004800:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004802:	e008      	b.n	8004816 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004804:	f7fe f82a 	bl	800285c <HAL_GetTick>
 8004808:	4602      	mov	r2, r0
 800480a:	693b      	ldr	r3, [r7, #16]
 800480c:	1ad3      	subs	r3, r2, r3
 800480e:	2b02      	cmp	r3, #2
 8004810:	d901      	bls.n	8004816 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004812:	2303      	movs	r3, #3
 8004814:	e1e2      	b.n	8004bdc <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004816:	4b41      	ldr	r3, [pc, #260]	; (800491c <HAL_RCC_OscConfig+0x504>)
 8004818:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800481c:	f003 0302 	and.w	r3, r3, #2
 8004820:	2b00      	cmp	r3, #0
 8004822:	d0ef      	beq.n	8004804 <HAL_RCC_OscConfig+0x3ec>
 8004824:	e01b      	b.n	800485e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004826:	4b3d      	ldr	r3, [pc, #244]	; (800491c <HAL_RCC_OscConfig+0x504>)
 8004828:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800482c:	4a3b      	ldr	r2, [pc, #236]	; (800491c <HAL_RCC_OscConfig+0x504>)
 800482e:	f023 0301 	bic.w	r3, r3, #1
 8004832:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004836:	f7fe f811 	bl	800285c <HAL_GetTick>
 800483a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800483c:	e008      	b.n	8004850 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800483e:	f7fe f80d 	bl	800285c <HAL_GetTick>
 8004842:	4602      	mov	r2, r0
 8004844:	693b      	ldr	r3, [r7, #16]
 8004846:	1ad3      	subs	r3, r2, r3
 8004848:	2b02      	cmp	r3, #2
 800484a:	d901      	bls.n	8004850 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800484c:	2303      	movs	r3, #3
 800484e:	e1c5      	b.n	8004bdc <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004850:	4b32      	ldr	r3, [pc, #200]	; (800491c <HAL_RCC_OscConfig+0x504>)
 8004852:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004856:	f003 0302 	and.w	r3, r3, #2
 800485a:	2b00      	cmp	r3, #0
 800485c:	d1ef      	bne.n	800483e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f003 0304 	and.w	r3, r3, #4
 8004866:	2b00      	cmp	r3, #0
 8004868:	f000 80a6 	beq.w	80049b8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800486c:	2300      	movs	r3, #0
 800486e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004870:	4b2a      	ldr	r3, [pc, #168]	; (800491c <HAL_RCC_OscConfig+0x504>)
 8004872:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004874:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004878:	2b00      	cmp	r3, #0
 800487a:	d10d      	bne.n	8004898 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800487c:	4b27      	ldr	r3, [pc, #156]	; (800491c <HAL_RCC_OscConfig+0x504>)
 800487e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004880:	4a26      	ldr	r2, [pc, #152]	; (800491c <HAL_RCC_OscConfig+0x504>)
 8004882:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004886:	6593      	str	r3, [r2, #88]	; 0x58
 8004888:	4b24      	ldr	r3, [pc, #144]	; (800491c <HAL_RCC_OscConfig+0x504>)
 800488a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800488c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004890:	60bb      	str	r3, [r7, #8]
 8004892:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004894:	2301      	movs	r3, #1
 8004896:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004898:	4b21      	ldr	r3, [pc, #132]	; (8004920 <HAL_RCC_OscConfig+0x508>)
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d118      	bne.n	80048d6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80048a4:	4b1e      	ldr	r3, [pc, #120]	; (8004920 <HAL_RCC_OscConfig+0x508>)
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	4a1d      	ldr	r2, [pc, #116]	; (8004920 <HAL_RCC_OscConfig+0x508>)
 80048aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048ae:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80048b0:	f7fd ffd4 	bl	800285c <HAL_GetTick>
 80048b4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80048b6:	e008      	b.n	80048ca <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80048b8:	f7fd ffd0 	bl	800285c <HAL_GetTick>
 80048bc:	4602      	mov	r2, r0
 80048be:	693b      	ldr	r3, [r7, #16]
 80048c0:	1ad3      	subs	r3, r2, r3
 80048c2:	2b02      	cmp	r3, #2
 80048c4:	d901      	bls.n	80048ca <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80048c6:	2303      	movs	r3, #3
 80048c8:	e188      	b.n	8004bdc <HAL_RCC_OscConfig+0x7c4>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80048ca:	4b15      	ldr	r3, [pc, #84]	; (8004920 <HAL_RCC_OscConfig+0x508>)
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d0f0      	beq.n	80048b8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	689b      	ldr	r3, [r3, #8]
 80048da:	2b01      	cmp	r3, #1
 80048dc:	d108      	bne.n	80048f0 <HAL_RCC_OscConfig+0x4d8>
 80048de:	4b0f      	ldr	r3, [pc, #60]	; (800491c <HAL_RCC_OscConfig+0x504>)
 80048e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048e4:	4a0d      	ldr	r2, [pc, #52]	; (800491c <HAL_RCC_OscConfig+0x504>)
 80048e6:	f043 0301 	orr.w	r3, r3, #1
 80048ea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80048ee:	e029      	b.n	8004944 <HAL_RCC_OscConfig+0x52c>
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	689b      	ldr	r3, [r3, #8]
 80048f4:	2b05      	cmp	r3, #5
 80048f6:	d115      	bne.n	8004924 <HAL_RCC_OscConfig+0x50c>
 80048f8:	4b08      	ldr	r3, [pc, #32]	; (800491c <HAL_RCC_OscConfig+0x504>)
 80048fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048fe:	4a07      	ldr	r2, [pc, #28]	; (800491c <HAL_RCC_OscConfig+0x504>)
 8004900:	f043 0304 	orr.w	r3, r3, #4
 8004904:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004908:	4b04      	ldr	r3, [pc, #16]	; (800491c <HAL_RCC_OscConfig+0x504>)
 800490a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800490e:	4a03      	ldr	r2, [pc, #12]	; (800491c <HAL_RCC_OscConfig+0x504>)
 8004910:	f043 0301 	orr.w	r3, r3, #1
 8004914:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004918:	e014      	b.n	8004944 <HAL_RCC_OscConfig+0x52c>
 800491a:	bf00      	nop
 800491c:	40021000 	.word	0x40021000
 8004920:	40007000 	.word	0x40007000
 8004924:	4b91      	ldr	r3, [pc, #580]	; (8004b6c <HAL_RCC_OscConfig+0x754>)
 8004926:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800492a:	4a90      	ldr	r2, [pc, #576]	; (8004b6c <HAL_RCC_OscConfig+0x754>)
 800492c:	f023 0301 	bic.w	r3, r3, #1
 8004930:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004934:	4b8d      	ldr	r3, [pc, #564]	; (8004b6c <HAL_RCC_OscConfig+0x754>)
 8004936:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800493a:	4a8c      	ldr	r2, [pc, #560]	; (8004b6c <HAL_RCC_OscConfig+0x754>)
 800493c:	f023 0304 	bic.w	r3, r3, #4
 8004940:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	689b      	ldr	r3, [r3, #8]
 8004948:	2b00      	cmp	r3, #0
 800494a:	d016      	beq.n	800497a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800494c:	f7fd ff86 	bl	800285c <HAL_GetTick>
 8004950:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004952:	e00a      	b.n	800496a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004954:	f7fd ff82 	bl	800285c <HAL_GetTick>
 8004958:	4602      	mov	r2, r0
 800495a:	693b      	ldr	r3, [r7, #16]
 800495c:	1ad3      	subs	r3, r2, r3
 800495e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004962:	4293      	cmp	r3, r2
 8004964:	d901      	bls.n	800496a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004966:	2303      	movs	r3, #3
 8004968:	e138      	b.n	8004bdc <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800496a:	4b80      	ldr	r3, [pc, #512]	; (8004b6c <HAL_RCC_OscConfig+0x754>)
 800496c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004970:	f003 0302 	and.w	r3, r3, #2
 8004974:	2b00      	cmp	r3, #0
 8004976:	d0ed      	beq.n	8004954 <HAL_RCC_OscConfig+0x53c>
 8004978:	e015      	b.n	80049a6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800497a:	f7fd ff6f 	bl	800285c <HAL_GetTick>
 800497e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004980:	e00a      	b.n	8004998 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004982:	f7fd ff6b 	bl	800285c <HAL_GetTick>
 8004986:	4602      	mov	r2, r0
 8004988:	693b      	ldr	r3, [r7, #16]
 800498a:	1ad3      	subs	r3, r2, r3
 800498c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004990:	4293      	cmp	r3, r2
 8004992:	d901      	bls.n	8004998 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004994:	2303      	movs	r3, #3
 8004996:	e121      	b.n	8004bdc <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004998:	4b74      	ldr	r3, [pc, #464]	; (8004b6c <HAL_RCC_OscConfig+0x754>)
 800499a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800499e:	f003 0302 	and.w	r3, r3, #2
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d1ed      	bne.n	8004982 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80049a6:	7ffb      	ldrb	r3, [r7, #31]
 80049a8:	2b01      	cmp	r3, #1
 80049aa:	d105      	bne.n	80049b8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80049ac:	4b6f      	ldr	r3, [pc, #444]	; (8004b6c <HAL_RCC_OscConfig+0x754>)
 80049ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049b0:	4a6e      	ldr	r2, [pc, #440]	; (8004b6c <HAL_RCC_OscConfig+0x754>)
 80049b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80049b6:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049bc:	2b00      	cmp	r3, #0
 80049be:	f000 810c 	beq.w	8004bda <HAL_RCC_OscConfig+0x7c2>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049c6:	2b02      	cmp	r3, #2
 80049c8:	f040 80d4 	bne.w	8004b74 <HAL_RCC_OscConfig+0x75c>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80049cc:	4b67      	ldr	r3, [pc, #412]	; (8004b6c <HAL_RCC_OscConfig+0x754>)
 80049ce:	68db      	ldr	r3, [r3, #12]
 80049d0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80049d2:	697b      	ldr	r3, [r7, #20]
 80049d4:	f003 0203 	and.w	r2, r3, #3
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049dc:	429a      	cmp	r2, r3
 80049de:	d130      	bne.n	8004a42 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80049e0:	697b      	ldr	r3, [r7, #20]
 80049e2:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049ea:	3b01      	subs	r3, #1
 80049ec:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80049ee:	429a      	cmp	r2, r3
 80049f0:	d127      	bne.n	8004a42 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80049f2:	697b      	ldr	r3, [r7, #20]
 80049f4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049fc:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80049fe:	429a      	cmp	r2, r3
 8004a00:	d11f      	bne.n	8004a42 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004a02:	697b      	ldr	r3, [r7, #20]
 8004a04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a08:	687a      	ldr	r2, [r7, #4]
 8004a0a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004a0c:	2a07      	cmp	r2, #7
 8004a0e:	bf14      	ite	ne
 8004a10:	2201      	movne	r2, #1
 8004a12:	2200      	moveq	r2, #0
 8004a14:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d113      	bne.n	8004a42 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004a1a:	697b      	ldr	r3, [r7, #20]
 8004a1c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a24:	085b      	lsrs	r3, r3, #1
 8004a26:	3b01      	subs	r3, #1
 8004a28:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004a2a:	429a      	cmp	r2, r3
 8004a2c:	d109      	bne.n	8004a42 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004a2e:	697b      	ldr	r3, [r7, #20]
 8004a30:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a38:	085b      	lsrs	r3, r3, #1
 8004a3a:	3b01      	subs	r3, #1
 8004a3c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004a3e:	429a      	cmp	r2, r3
 8004a40:	d06e      	beq.n	8004b20 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004a42:	69bb      	ldr	r3, [r7, #24]
 8004a44:	2b0c      	cmp	r3, #12
 8004a46:	d069      	beq.n	8004b1c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004a48:	4b48      	ldr	r3, [pc, #288]	; (8004b6c <HAL_RCC_OscConfig+0x754>)
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d105      	bne.n	8004a60 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004a54:	4b45      	ldr	r3, [pc, #276]	; (8004b6c <HAL_RCC_OscConfig+0x754>)
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d001      	beq.n	8004a64 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8004a60:	2301      	movs	r3, #1
 8004a62:	e0bb      	b.n	8004bdc <HAL_RCC_OscConfig+0x7c4>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004a64:	4b41      	ldr	r3, [pc, #260]	; (8004b6c <HAL_RCC_OscConfig+0x754>)
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	4a40      	ldr	r2, [pc, #256]	; (8004b6c <HAL_RCC_OscConfig+0x754>)
 8004a6a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004a6e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004a70:	f7fd fef4 	bl	800285c <HAL_GetTick>
 8004a74:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004a76:	e008      	b.n	8004a8a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a78:	f7fd fef0 	bl	800285c <HAL_GetTick>
 8004a7c:	4602      	mov	r2, r0
 8004a7e:	693b      	ldr	r3, [r7, #16]
 8004a80:	1ad3      	subs	r3, r2, r3
 8004a82:	2b02      	cmp	r3, #2
 8004a84:	d901      	bls.n	8004a8a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8004a86:	2303      	movs	r3, #3
 8004a88:	e0a8      	b.n	8004bdc <HAL_RCC_OscConfig+0x7c4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004a8a:	4b38      	ldr	r3, [pc, #224]	; (8004b6c <HAL_RCC_OscConfig+0x754>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d1f0      	bne.n	8004a78 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004a96:	4b35      	ldr	r3, [pc, #212]	; (8004b6c <HAL_RCC_OscConfig+0x754>)
 8004a98:	68da      	ldr	r2, [r3, #12]
 8004a9a:	4b35      	ldr	r3, [pc, #212]	; (8004b70 <HAL_RCC_OscConfig+0x758>)
 8004a9c:	4013      	ands	r3, r2
 8004a9e:	687a      	ldr	r2, [r7, #4]
 8004aa0:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004aa2:	687a      	ldr	r2, [r7, #4]
 8004aa4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004aa6:	3a01      	subs	r2, #1
 8004aa8:	0112      	lsls	r2, r2, #4
 8004aaa:	4311      	orrs	r1, r2
 8004aac:	687a      	ldr	r2, [r7, #4]
 8004aae:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004ab0:	0212      	lsls	r2, r2, #8
 8004ab2:	4311      	orrs	r1, r2
 8004ab4:	687a      	ldr	r2, [r7, #4]
 8004ab6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004ab8:	0852      	lsrs	r2, r2, #1
 8004aba:	3a01      	subs	r2, #1
 8004abc:	0552      	lsls	r2, r2, #21
 8004abe:	4311      	orrs	r1, r2
 8004ac0:	687a      	ldr	r2, [r7, #4]
 8004ac2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004ac4:	0852      	lsrs	r2, r2, #1
 8004ac6:	3a01      	subs	r2, #1
 8004ac8:	0652      	lsls	r2, r2, #25
 8004aca:	4311      	orrs	r1, r2
 8004acc:	687a      	ldr	r2, [r7, #4]
 8004ace:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004ad0:	0912      	lsrs	r2, r2, #4
 8004ad2:	0452      	lsls	r2, r2, #17
 8004ad4:	430a      	orrs	r2, r1
 8004ad6:	4925      	ldr	r1, [pc, #148]	; (8004b6c <HAL_RCC_OscConfig+0x754>)
 8004ad8:	4313      	orrs	r3, r2
 8004ada:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004adc:	4b23      	ldr	r3, [pc, #140]	; (8004b6c <HAL_RCC_OscConfig+0x754>)
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	4a22      	ldr	r2, [pc, #136]	; (8004b6c <HAL_RCC_OscConfig+0x754>)
 8004ae2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004ae6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004ae8:	4b20      	ldr	r3, [pc, #128]	; (8004b6c <HAL_RCC_OscConfig+0x754>)
 8004aea:	68db      	ldr	r3, [r3, #12]
 8004aec:	4a1f      	ldr	r2, [pc, #124]	; (8004b6c <HAL_RCC_OscConfig+0x754>)
 8004aee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004af2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004af4:	f7fd feb2 	bl	800285c <HAL_GetTick>
 8004af8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004afa:	e008      	b.n	8004b0e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004afc:	f7fd feae 	bl	800285c <HAL_GetTick>
 8004b00:	4602      	mov	r2, r0
 8004b02:	693b      	ldr	r3, [r7, #16]
 8004b04:	1ad3      	subs	r3, r2, r3
 8004b06:	2b02      	cmp	r3, #2
 8004b08:	d901      	bls.n	8004b0e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8004b0a:	2303      	movs	r3, #3
 8004b0c:	e066      	b.n	8004bdc <HAL_RCC_OscConfig+0x7c4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b0e:	4b17      	ldr	r3, [pc, #92]	; (8004b6c <HAL_RCC_OscConfig+0x754>)
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d0f0      	beq.n	8004afc <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004b1a:	e05e      	b.n	8004bda <HAL_RCC_OscConfig+0x7c2>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004b1c:	2301      	movs	r3, #1
 8004b1e:	e05d      	b.n	8004bdc <HAL_RCC_OscConfig+0x7c4>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b20:	4b12      	ldr	r3, [pc, #72]	; (8004b6c <HAL_RCC_OscConfig+0x754>)
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d156      	bne.n	8004bda <HAL_RCC_OscConfig+0x7c2>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004b2c:	4b0f      	ldr	r3, [pc, #60]	; (8004b6c <HAL_RCC_OscConfig+0x754>)
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	4a0e      	ldr	r2, [pc, #56]	; (8004b6c <HAL_RCC_OscConfig+0x754>)
 8004b32:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004b36:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004b38:	4b0c      	ldr	r3, [pc, #48]	; (8004b6c <HAL_RCC_OscConfig+0x754>)
 8004b3a:	68db      	ldr	r3, [r3, #12]
 8004b3c:	4a0b      	ldr	r2, [pc, #44]	; (8004b6c <HAL_RCC_OscConfig+0x754>)
 8004b3e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004b42:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004b44:	f7fd fe8a 	bl	800285c <HAL_GetTick>
 8004b48:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b4a:	e008      	b.n	8004b5e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b4c:	f7fd fe86 	bl	800285c <HAL_GetTick>
 8004b50:	4602      	mov	r2, r0
 8004b52:	693b      	ldr	r3, [r7, #16]
 8004b54:	1ad3      	subs	r3, r2, r3
 8004b56:	2b02      	cmp	r3, #2
 8004b58:	d901      	bls.n	8004b5e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8004b5a:	2303      	movs	r3, #3
 8004b5c:	e03e      	b.n	8004bdc <HAL_RCC_OscConfig+0x7c4>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b5e:	4b03      	ldr	r3, [pc, #12]	; (8004b6c <HAL_RCC_OscConfig+0x754>)
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d0f0      	beq.n	8004b4c <HAL_RCC_OscConfig+0x734>
 8004b6a:	e036      	b.n	8004bda <HAL_RCC_OscConfig+0x7c2>
 8004b6c:	40021000 	.word	0x40021000
 8004b70:	f99d808c 	.word	0xf99d808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004b74:	69bb      	ldr	r3, [r7, #24]
 8004b76:	2b0c      	cmp	r3, #12
 8004b78:	d02d      	beq.n	8004bd6 <HAL_RCC_OscConfig+0x7be>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b7a:	4b1a      	ldr	r3, [pc, #104]	; (8004be4 <HAL_RCC_OscConfig+0x7cc>)
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	4a19      	ldr	r2, [pc, #100]	; (8004be4 <HAL_RCC_OscConfig+0x7cc>)
 8004b80:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004b84:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8004b86:	4b17      	ldr	r3, [pc, #92]	; (8004be4 <HAL_RCC_OscConfig+0x7cc>)
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d105      	bne.n	8004b9e <HAL_RCC_OscConfig+0x786>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004b92:	4b14      	ldr	r3, [pc, #80]	; (8004be4 <HAL_RCC_OscConfig+0x7cc>)
 8004b94:	68db      	ldr	r3, [r3, #12]
 8004b96:	4a13      	ldr	r2, [pc, #76]	; (8004be4 <HAL_RCC_OscConfig+0x7cc>)
 8004b98:	f023 0303 	bic.w	r3, r3, #3
 8004b9c:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004b9e:	4b11      	ldr	r3, [pc, #68]	; (8004be4 <HAL_RCC_OscConfig+0x7cc>)
 8004ba0:	68db      	ldr	r3, [r3, #12]
 8004ba2:	4a10      	ldr	r2, [pc, #64]	; (8004be4 <HAL_RCC_OscConfig+0x7cc>)
 8004ba4:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004ba8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004bac:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bae:	f7fd fe55 	bl	800285c <HAL_GetTick>
 8004bb2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004bb4:	e008      	b.n	8004bc8 <HAL_RCC_OscConfig+0x7b0>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004bb6:	f7fd fe51 	bl	800285c <HAL_GetTick>
 8004bba:	4602      	mov	r2, r0
 8004bbc:	693b      	ldr	r3, [r7, #16]
 8004bbe:	1ad3      	subs	r3, r2, r3
 8004bc0:	2b02      	cmp	r3, #2
 8004bc2:	d901      	bls.n	8004bc8 <HAL_RCC_OscConfig+0x7b0>
          {
            return HAL_TIMEOUT;
 8004bc4:	2303      	movs	r3, #3
 8004bc6:	e009      	b.n	8004bdc <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004bc8:	4b06      	ldr	r3, [pc, #24]	; (8004be4 <HAL_RCC_OscConfig+0x7cc>)
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d1f0      	bne.n	8004bb6 <HAL_RCC_OscConfig+0x79e>
 8004bd4:	e001      	b.n	8004bda <HAL_RCC_OscConfig+0x7c2>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004bd6:	2301      	movs	r3, #1
 8004bd8:	e000      	b.n	8004bdc <HAL_RCC_OscConfig+0x7c4>
      }
    }
  }
  return HAL_OK;
 8004bda:	2300      	movs	r3, #0
}
 8004bdc:	4618      	mov	r0, r3
 8004bde:	3720      	adds	r7, #32
 8004be0:	46bd      	mov	sp, r7
 8004be2:	bd80      	pop	{r7, pc}
 8004be4:	40021000 	.word	0x40021000

08004be8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004be8:	b580      	push	{r7, lr}
 8004bea:	b084      	sub	sp, #16
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
 8004bf0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d101      	bne.n	8004bfc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004bf8:	2301      	movs	r3, #1
 8004bfa:	e0c8      	b.n	8004d8e <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004bfc:	4b66      	ldr	r3, [pc, #408]	; (8004d98 <HAL_RCC_ClockConfig+0x1b0>)
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f003 0307 	and.w	r3, r3, #7
 8004c04:	683a      	ldr	r2, [r7, #0]
 8004c06:	429a      	cmp	r2, r3
 8004c08:	d910      	bls.n	8004c2c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c0a:	4b63      	ldr	r3, [pc, #396]	; (8004d98 <HAL_RCC_ClockConfig+0x1b0>)
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f023 0207 	bic.w	r2, r3, #7
 8004c12:	4961      	ldr	r1, [pc, #388]	; (8004d98 <HAL_RCC_ClockConfig+0x1b0>)
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	4313      	orrs	r3, r2
 8004c18:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c1a:	4b5f      	ldr	r3, [pc, #380]	; (8004d98 <HAL_RCC_ClockConfig+0x1b0>)
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f003 0307 	and.w	r3, r3, #7
 8004c22:	683a      	ldr	r2, [r7, #0]
 8004c24:	429a      	cmp	r2, r3
 8004c26:	d001      	beq.n	8004c2c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004c28:	2301      	movs	r3, #1
 8004c2a:	e0b0      	b.n	8004d8e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f003 0301 	and.w	r3, r3, #1
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d04c      	beq.n	8004cd2 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	685b      	ldr	r3, [r3, #4]
 8004c3c:	2b03      	cmp	r3, #3
 8004c3e:	d107      	bne.n	8004c50 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004c40:	4b56      	ldr	r3, [pc, #344]	; (8004d9c <HAL_RCC_ClockConfig+0x1b4>)
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d121      	bne.n	8004c90 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8004c4c:	2301      	movs	r3, #1
 8004c4e:	e09e      	b.n	8004d8e <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	685b      	ldr	r3, [r3, #4]
 8004c54:	2b02      	cmp	r3, #2
 8004c56:	d107      	bne.n	8004c68 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004c58:	4b50      	ldr	r3, [pc, #320]	; (8004d9c <HAL_RCC_ClockConfig+0x1b4>)
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d115      	bne.n	8004c90 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004c64:	2301      	movs	r3, #1
 8004c66:	e092      	b.n	8004d8e <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	685b      	ldr	r3, [r3, #4]
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d107      	bne.n	8004c80 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004c70:	4b4a      	ldr	r3, [pc, #296]	; (8004d9c <HAL_RCC_ClockConfig+0x1b4>)
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f003 0302 	and.w	r3, r3, #2
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d109      	bne.n	8004c90 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004c7c:	2301      	movs	r3, #1
 8004c7e:	e086      	b.n	8004d8e <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004c80:	4b46      	ldr	r3, [pc, #280]	; (8004d9c <HAL_RCC_ClockConfig+0x1b4>)
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d101      	bne.n	8004c90 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004c8c:	2301      	movs	r3, #1
 8004c8e:	e07e      	b.n	8004d8e <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004c90:	4b42      	ldr	r3, [pc, #264]	; (8004d9c <HAL_RCC_ClockConfig+0x1b4>)
 8004c92:	689b      	ldr	r3, [r3, #8]
 8004c94:	f023 0203 	bic.w	r2, r3, #3
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	685b      	ldr	r3, [r3, #4]
 8004c9c:	493f      	ldr	r1, [pc, #252]	; (8004d9c <HAL_RCC_ClockConfig+0x1b4>)
 8004c9e:	4313      	orrs	r3, r2
 8004ca0:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ca2:	f7fd fddb 	bl	800285c <HAL_GetTick>
 8004ca6:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ca8:	e00a      	b.n	8004cc0 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004caa:	f7fd fdd7 	bl	800285c <HAL_GetTick>
 8004cae:	4602      	mov	r2, r0
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	1ad3      	subs	r3, r2, r3
 8004cb4:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cb8:	4293      	cmp	r3, r2
 8004cba:	d901      	bls.n	8004cc0 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8004cbc:	2303      	movs	r3, #3
 8004cbe:	e066      	b.n	8004d8e <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004cc0:	4b36      	ldr	r3, [pc, #216]	; (8004d9c <HAL_RCC_ClockConfig+0x1b4>)
 8004cc2:	689b      	ldr	r3, [r3, #8]
 8004cc4:	f003 020c 	and.w	r2, r3, #12
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	685b      	ldr	r3, [r3, #4]
 8004ccc:	009b      	lsls	r3, r3, #2
 8004cce:	429a      	cmp	r2, r3
 8004cd0:	d1eb      	bne.n	8004caa <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f003 0302 	and.w	r3, r3, #2
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d008      	beq.n	8004cf0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004cde:	4b2f      	ldr	r3, [pc, #188]	; (8004d9c <HAL_RCC_ClockConfig+0x1b4>)
 8004ce0:	689b      	ldr	r3, [r3, #8]
 8004ce2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	689b      	ldr	r3, [r3, #8]
 8004cea:	492c      	ldr	r1, [pc, #176]	; (8004d9c <HAL_RCC_ClockConfig+0x1b4>)
 8004cec:	4313      	orrs	r3, r2
 8004cee:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004cf0:	4b29      	ldr	r3, [pc, #164]	; (8004d98 <HAL_RCC_ClockConfig+0x1b0>)
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f003 0307 	and.w	r3, r3, #7
 8004cf8:	683a      	ldr	r2, [r7, #0]
 8004cfa:	429a      	cmp	r2, r3
 8004cfc:	d210      	bcs.n	8004d20 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004cfe:	4b26      	ldr	r3, [pc, #152]	; (8004d98 <HAL_RCC_ClockConfig+0x1b0>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f023 0207 	bic.w	r2, r3, #7
 8004d06:	4924      	ldr	r1, [pc, #144]	; (8004d98 <HAL_RCC_ClockConfig+0x1b0>)
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	4313      	orrs	r3, r2
 8004d0c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d0e:	4b22      	ldr	r3, [pc, #136]	; (8004d98 <HAL_RCC_ClockConfig+0x1b0>)
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f003 0307 	and.w	r3, r3, #7
 8004d16:	683a      	ldr	r2, [r7, #0]
 8004d18:	429a      	cmp	r2, r3
 8004d1a:	d001      	beq.n	8004d20 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8004d1c:	2301      	movs	r3, #1
 8004d1e:	e036      	b.n	8004d8e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f003 0304 	and.w	r3, r3, #4
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d008      	beq.n	8004d3e <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004d2c:	4b1b      	ldr	r3, [pc, #108]	; (8004d9c <HAL_RCC_ClockConfig+0x1b4>)
 8004d2e:	689b      	ldr	r3, [r3, #8]
 8004d30:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	68db      	ldr	r3, [r3, #12]
 8004d38:	4918      	ldr	r1, [pc, #96]	; (8004d9c <HAL_RCC_ClockConfig+0x1b4>)
 8004d3a:	4313      	orrs	r3, r2
 8004d3c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f003 0308 	and.w	r3, r3, #8
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d009      	beq.n	8004d5e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004d4a:	4b14      	ldr	r3, [pc, #80]	; (8004d9c <HAL_RCC_ClockConfig+0x1b4>)
 8004d4c:	689b      	ldr	r3, [r3, #8]
 8004d4e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	691b      	ldr	r3, [r3, #16]
 8004d56:	00db      	lsls	r3, r3, #3
 8004d58:	4910      	ldr	r1, [pc, #64]	; (8004d9c <HAL_RCC_ClockConfig+0x1b4>)
 8004d5a:	4313      	orrs	r3, r2
 8004d5c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004d5e:	f000 f825 	bl	8004dac <HAL_RCC_GetSysClockFreq>
 8004d62:	4602      	mov	r2, r0
 8004d64:	4b0d      	ldr	r3, [pc, #52]	; (8004d9c <HAL_RCC_ClockConfig+0x1b4>)
 8004d66:	689b      	ldr	r3, [r3, #8]
 8004d68:	091b      	lsrs	r3, r3, #4
 8004d6a:	f003 030f 	and.w	r3, r3, #15
 8004d6e:	490c      	ldr	r1, [pc, #48]	; (8004da0 <HAL_RCC_ClockConfig+0x1b8>)
 8004d70:	5ccb      	ldrb	r3, [r1, r3]
 8004d72:	f003 031f 	and.w	r3, r3, #31
 8004d76:	fa22 f303 	lsr.w	r3, r2, r3
 8004d7a:	4a0a      	ldr	r2, [pc, #40]	; (8004da4 <HAL_RCC_ClockConfig+0x1bc>)
 8004d7c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004d7e:	4b0a      	ldr	r3, [pc, #40]	; (8004da8 <HAL_RCC_ClockConfig+0x1c0>)
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	4618      	mov	r0, r3
 8004d84:	f7fd fb74 	bl	8002470 <HAL_InitTick>
 8004d88:	4603      	mov	r3, r0
 8004d8a:	72fb      	strb	r3, [r7, #11]

  return status;
 8004d8c:	7afb      	ldrb	r3, [r7, #11]
}
 8004d8e:	4618      	mov	r0, r3
 8004d90:	3710      	adds	r7, #16
 8004d92:	46bd      	mov	sp, r7
 8004d94:	bd80      	pop	{r7, pc}
 8004d96:	bf00      	nop
 8004d98:	40022000 	.word	0x40022000
 8004d9c:	40021000 	.word	0x40021000
 8004da0:	08015668 	.word	0x08015668
 8004da4:	20000010 	.word	0x20000010
 8004da8:	20000014 	.word	0x20000014

08004dac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004dac:	b480      	push	{r7}
 8004dae:	b089      	sub	sp, #36	; 0x24
 8004db0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004db2:	2300      	movs	r3, #0
 8004db4:	61fb      	str	r3, [r7, #28]
 8004db6:	2300      	movs	r3, #0
 8004db8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004dba:	4b3e      	ldr	r3, [pc, #248]	; (8004eb4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004dbc:	689b      	ldr	r3, [r3, #8]
 8004dbe:	f003 030c 	and.w	r3, r3, #12
 8004dc2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004dc4:	4b3b      	ldr	r3, [pc, #236]	; (8004eb4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004dc6:	68db      	ldr	r3, [r3, #12]
 8004dc8:	f003 0303 	and.w	r3, r3, #3
 8004dcc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004dce:	693b      	ldr	r3, [r7, #16]
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d005      	beq.n	8004de0 <HAL_RCC_GetSysClockFreq+0x34>
 8004dd4:	693b      	ldr	r3, [r7, #16]
 8004dd6:	2b0c      	cmp	r3, #12
 8004dd8:	d121      	bne.n	8004e1e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	2b01      	cmp	r3, #1
 8004dde:	d11e      	bne.n	8004e1e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004de0:	4b34      	ldr	r3, [pc, #208]	; (8004eb4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f003 0308 	and.w	r3, r3, #8
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d107      	bne.n	8004dfc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004dec:	4b31      	ldr	r3, [pc, #196]	; (8004eb4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004dee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004df2:	0a1b      	lsrs	r3, r3, #8
 8004df4:	f003 030f 	and.w	r3, r3, #15
 8004df8:	61fb      	str	r3, [r7, #28]
 8004dfa:	e005      	b.n	8004e08 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004dfc:	4b2d      	ldr	r3, [pc, #180]	; (8004eb4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	091b      	lsrs	r3, r3, #4
 8004e02:	f003 030f 	and.w	r3, r3, #15
 8004e06:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004e08:	4a2b      	ldr	r2, [pc, #172]	; (8004eb8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004e0a:	69fb      	ldr	r3, [r7, #28]
 8004e0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e10:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004e12:	693b      	ldr	r3, [r7, #16]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d10d      	bne.n	8004e34 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004e18:	69fb      	ldr	r3, [r7, #28]
 8004e1a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004e1c:	e00a      	b.n	8004e34 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004e1e:	693b      	ldr	r3, [r7, #16]
 8004e20:	2b04      	cmp	r3, #4
 8004e22:	d102      	bne.n	8004e2a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004e24:	4b25      	ldr	r3, [pc, #148]	; (8004ebc <HAL_RCC_GetSysClockFreq+0x110>)
 8004e26:	61bb      	str	r3, [r7, #24]
 8004e28:	e004      	b.n	8004e34 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004e2a:	693b      	ldr	r3, [r7, #16]
 8004e2c:	2b08      	cmp	r3, #8
 8004e2e:	d101      	bne.n	8004e34 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004e30:	4b23      	ldr	r3, [pc, #140]	; (8004ec0 <HAL_RCC_GetSysClockFreq+0x114>)
 8004e32:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004e34:	693b      	ldr	r3, [r7, #16]
 8004e36:	2b0c      	cmp	r3, #12
 8004e38:	d134      	bne.n	8004ea4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004e3a:	4b1e      	ldr	r3, [pc, #120]	; (8004eb4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004e3c:	68db      	ldr	r3, [r3, #12]
 8004e3e:	f003 0303 	and.w	r3, r3, #3
 8004e42:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004e44:	68bb      	ldr	r3, [r7, #8]
 8004e46:	2b02      	cmp	r3, #2
 8004e48:	d003      	beq.n	8004e52 <HAL_RCC_GetSysClockFreq+0xa6>
 8004e4a:	68bb      	ldr	r3, [r7, #8]
 8004e4c:	2b03      	cmp	r3, #3
 8004e4e:	d003      	beq.n	8004e58 <HAL_RCC_GetSysClockFreq+0xac>
 8004e50:	e005      	b.n	8004e5e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004e52:	4b1a      	ldr	r3, [pc, #104]	; (8004ebc <HAL_RCC_GetSysClockFreq+0x110>)
 8004e54:	617b      	str	r3, [r7, #20]
      break;
 8004e56:	e005      	b.n	8004e64 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004e58:	4b19      	ldr	r3, [pc, #100]	; (8004ec0 <HAL_RCC_GetSysClockFreq+0x114>)
 8004e5a:	617b      	str	r3, [r7, #20]
      break;
 8004e5c:	e002      	b.n	8004e64 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004e5e:	69fb      	ldr	r3, [r7, #28]
 8004e60:	617b      	str	r3, [r7, #20]
      break;
 8004e62:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004e64:	4b13      	ldr	r3, [pc, #76]	; (8004eb4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004e66:	68db      	ldr	r3, [r3, #12]
 8004e68:	091b      	lsrs	r3, r3, #4
 8004e6a:	f003 0307 	and.w	r3, r3, #7
 8004e6e:	3301      	adds	r3, #1
 8004e70:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004e72:	4b10      	ldr	r3, [pc, #64]	; (8004eb4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004e74:	68db      	ldr	r3, [r3, #12]
 8004e76:	0a1b      	lsrs	r3, r3, #8
 8004e78:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004e7c:	697a      	ldr	r2, [r7, #20]
 8004e7e:	fb03 f202 	mul.w	r2, r3, r2
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e88:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004e8a:	4b0a      	ldr	r3, [pc, #40]	; (8004eb4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004e8c:	68db      	ldr	r3, [r3, #12]
 8004e8e:	0e5b      	lsrs	r3, r3, #25
 8004e90:	f003 0303 	and.w	r3, r3, #3
 8004e94:	3301      	adds	r3, #1
 8004e96:	005b      	lsls	r3, r3, #1
 8004e98:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004e9a:	697a      	ldr	r2, [r7, #20]
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ea2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004ea4:	69bb      	ldr	r3, [r7, #24]
}
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	3724      	adds	r7, #36	; 0x24
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb0:	4770      	bx	lr
 8004eb2:	bf00      	nop
 8004eb4:	40021000 	.word	0x40021000
 8004eb8:	08015680 	.word	0x08015680
 8004ebc:	00f42400 	.word	0x00f42400
 8004ec0:	007a1200 	.word	0x007a1200

08004ec4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ec4:	b480      	push	{r7}
 8004ec6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004ec8:	4b03      	ldr	r3, [pc, #12]	; (8004ed8 <HAL_RCC_GetHCLKFreq+0x14>)
 8004eca:	681b      	ldr	r3, [r3, #0]
}
 8004ecc:	4618      	mov	r0, r3
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed4:	4770      	bx	lr
 8004ed6:	bf00      	nop
 8004ed8:	20000010 	.word	0x20000010

08004edc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004edc:	b580      	push	{r7, lr}
 8004ede:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004ee0:	f7ff fff0 	bl	8004ec4 <HAL_RCC_GetHCLKFreq>
 8004ee4:	4602      	mov	r2, r0
 8004ee6:	4b06      	ldr	r3, [pc, #24]	; (8004f00 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004ee8:	689b      	ldr	r3, [r3, #8]
 8004eea:	0a1b      	lsrs	r3, r3, #8
 8004eec:	f003 0307 	and.w	r3, r3, #7
 8004ef0:	4904      	ldr	r1, [pc, #16]	; (8004f04 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004ef2:	5ccb      	ldrb	r3, [r1, r3]
 8004ef4:	f003 031f 	and.w	r3, r3, #31
 8004ef8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004efc:	4618      	mov	r0, r3
 8004efe:	bd80      	pop	{r7, pc}
 8004f00:	40021000 	.word	0x40021000
 8004f04:	08015678 	.word	0x08015678

08004f08 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004f0c:	f7ff ffda 	bl	8004ec4 <HAL_RCC_GetHCLKFreq>
 8004f10:	4602      	mov	r2, r0
 8004f12:	4b06      	ldr	r3, [pc, #24]	; (8004f2c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004f14:	689b      	ldr	r3, [r3, #8]
 8004f16:	0adb      	lsrs	r3, r3, #11
 8004f18:	f003 0307 	and.w	r3, r3, #7
 8004f1c:	4904      	ldr	r1, [pc, #16]	; (8004f30 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004f1e:	5ccb      	ldrb	r3, [r1, r3]
 8004f20:	f003 031f 	and.w	r3, r3, #31
 8004f24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f28:	4618      	mov	r0, r3
 8004f2a:	bd80      	pop	{r7, pc}
 8004f2c:	40021000 	.word	0x40021000
 8004f30:	08015678 	.word	0x08015678

08004f34 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004f34:	b480      	push	{r7}
 8004f36:	b083      	sub	sp, #12
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
 8004f3c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	220f      	movs	r2, #15
 8004f42:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8004f44:	4b12      	ldr	r3, [pc, #72]	; (8004f90 <HAL_RCC_GetClockConfig+0x5c>)
 8004f46:	689b      	ldr	r3, [r3, #8]
 8004f48:	f003 0203 	and.w	r2, r3, #3
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8004f50:	4b0f      	ldr	r3, [pc, #60]	; (8004f90 <HAL_RCC_GetClockConfig+0x5c>)
 8004f52:	689b      	ldr	r3, [r3, #8]
 8004f54:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8004f5c:	4b0c      	ldr	r3, [pc, #48]	; (8004f90 <HAL_RCC_GetClockConfig+0x5c>)
 8004f5e:	689b      	ldr	r3, [r3, #8]
 8004f60:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8004f68:	4b09      	ldr	r3, [pc, #36]	; (8004f90 <HAL_RCC_GetClockConfig+0x5c>)
 8004f6a:	689b      	ldr	r3, [r3, #8]
 8004f6c:	08db      	lsrs	r3, r3, #3
 8004f6e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8004f76:	4b07      	ldr	r3, [pc, #28]	; (8004f94 <HAL_RCC_GetClockConfig+0x60>)
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f003 0207 	and.w	r2, r3, #7
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	601a      	str	r2, [r3, #0]
}
 8004f82:	bf00      	nop
 8004f84:	370c      	adds	r7, #12
 8004f86:	46bd      	mov	sp, r7
 8004f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8c:	4770      	bx	lr
 8004f8e:	bf00      	nop
 8004f90:	40021000 	.word	0x40021000
 8004f94:	40022000 	.word	0x40022000

08004f98 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b086      	sub	sp, #24
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004fa0:	2300      	movs	r3, #0
 8004fa2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004fa4:	4b2a      	ldr	r3, [pc, #168]	; (8005050 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004fa6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fa8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d003      	beq.n	8004fb8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004fb0:	f7ff f902 	bl	80041b8 <HAL_PWREx_GetVoltageRange>
 8004fb4:	6178      	str	r0, [r7, #20]
 8004fb6:	e014      	b.n	8004fe2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004fb8:	4b25      	ldr	r3, [pc, #148]	; (8005050 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004fba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fbc:	4a24      	ldr	r2, [pc, #144]	; (8005050 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004fbe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004fc2:	6593      	str	r3, [r2, #88]	; 0x58
 8004fc4:	4b22      	ldr	r3, [pc, #136]	; (8005050 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004fc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fc8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fcc:	60fb      	str	r3, [r7, #12]
 8004fce:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004fd0:	f7ff f8f2 	bl	80041b8 <HAL_PWREx_GetVoltageRange>
 8004fd4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004fd6:	4b1e      	ldr	r3, [pc, #120]	; (8005050 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004fd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fda:	4a1d      	ldr	r2, [pc, #116]	; (8005050 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004fdc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004fe0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004fe2:	697b      	ldr	r3, [r7, #20]
 8004fe4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004fe8:	d10b      	bne.n	8005002 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2b80      	cmp	r3, #128	; 0x80
 8004fee:	d919      	bls.n	8005024 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2ba0      	cmp	r3, #160	; 0xa0
 8004ff4:	d902      	bls.n	8004ffc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004ff6:	2302      	movs	r3, #2
 8004ff8:	613b      	str	r3, [r7, #16]
 8004ffa:	e013      	b.n	8005024 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004ffc:	2301      	movs	r3, #1
 8004ffe:	613b      	str	r3, [r7, #16]
 8005000:	e010      	b.n	8005024 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	2b80      	cmp	r3, #128	; 0x80
 8005006:	d902      	bls.n	800500e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005008:	2303      	movs	r3, #3
 800500a:	613b      	str	r3, [r7, #16]
 800500c:	e00a      	b.n	8005024 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	2b80      	cmp	r3, #128	; 0x80
 8005012:	d102      	bne.n	800501a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005014:	2302      	movs	r3, #2
 8005016:	613b      	str	r3, [r7, #16]
 8005018:	e004      	b.n	8005024 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	2b70      	cmp	r3, #112	; 0x70
 800501e:	d101      	bne.n	8005024 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005020:	2301      	movs	r3, #1
 8005022:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005024:	4b0b      	ldr	r3, [pc, #44]	; (8005054 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f023 0207 	bic.w	r2, r3, #7
 800502c:	4909      	ldr	r1, [pc, #36]	; (8005054 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800502e:	693b      	ldr	r3, [r7, #16]
 8005030:	4313      	orrs	r3, r2
 8005032:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005034:	4b07      	ldr	r3, [pc, #28]	; (8005054 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f003 0307 	and.w	r3, r3, #7
 800503c:	693a      	ldr	r2, [r7, #16]
 800503e:	429a      	cmp	r2, r3
 8005040:	d001      	beq.n	8005046 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8005042:	2301      	movs	r3, #1
 8005044:	e000      	b.n	8005048 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8005046:	2300      	movs	r3, #0
}
 8005048:	4618      	mov	r0, r3
 800504a:	3718      	adds	r7, #24
 800504c:	46bd      	mov	sp, r7
 800504e:	bd80      	pop	{r7, pc}
 8005050:	40021000 	.word	0x40021000
 8005054:	40022000 	.word	0x40022000

08005058 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005058:	b580      	push	{r7, lr}
 800505a:	b086      	sub	sp, #24
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005060:	2300      	movs	r3, #0
 8005062:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005064:	2300      	movs	r3, #0
 8005066:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005070:	2b00      	cmp	r3, #0
 8005072:	d041      	beq.n	80050f8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005078:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800507c:	d02a      	beq.n	80050d4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800507e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005082:	d824      	bhi.n	80050ce <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005084:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005088:	d008      	beq.n	800509c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800508a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800508e:	d81e      	bhi.n	80050ce <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005090:	2b00      	cmp	r3, #0
 8005092:	d00a      	beq.n	80050aa <HAL_RCCEx_PeriphCLKConfig+0x52>
 8005094:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005098:	d010      	beq.n	80050bc <HAL_RCCEx_PeriphCLKConfig+0x64>
 800509a:	e018      	b.n	80050ce <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800509c:	4b86      	ldr	r3, [pc, #536]	; (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800509e:	68db      	ldr	r3, [r3, #12]
 80050a0:	4a85      	ldr	r2, [pc, #532]	; (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80050a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80050a6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80050a8:	e015      	b.n	80050d6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	3304      	adds	r3, #4
 80050ae:	2100      	movs	r1, #0
 80050b0:	4618      	mov	r0, r3
 80050b2:	f000 facb 	bl	800564c <RCCEx_PLLSAI1_Config>
 80050b6:	4603      	mov	r3, r0
 80050b8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80050ba:	e00c      	b.n	80050d6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	3320      	adds	r3, #32
 80050c0:	2100      	movs	r1, #0
 80050c2:	4618      	mov	r0, r3
 80050c4:	f000 fbb6 	bl	8005834 <RCCEx_PLLSAI2_Config>
 80050c8:	4603      	mov	r3, r0
 80050ca:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80050cc:	e003      	b.n	80050d6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80050ce:	2301      	movs	r3, #1
 80050d0:	74fb      	strb	r3, [r7, #19]
      break;
 80050d2:	e000      	b.n	80050d6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80050d4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80050d6:	7cfb      	ldrb	r3, [r7, #19]
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d10b      	bne.n	80050f4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80050dc:	4b76      	ldr	r3, [pc, #472]	; (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80050de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050e2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80050ea:	4973      	ldr	r1, [pc, #460]	; (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80050ec:	4313      	orrs	r3, r2
 80050ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80050f2:	e001      	b.n	80050f8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050f4:	7cfb      	ldrb	r3, [r7, #19]
 80050f6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005100:	2b00      	cmp	r3, #0
 8005102:	d041      	beq.n	8005188 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005108:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800510c:	d02a      	beq.n	8005164 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800510e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005112:	d824      	bhi.n	800515e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005114:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005118:	d008      	beq.n	800512c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800511a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800511e:	d81e      	bhi.n	800515e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005120:	2b00      	cmp	r3, #0
 8005122:	d00a      	beq.n	800513a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8005124:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005128:	d010      	beq.n	800514c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800512a:	e018      	b.n	800515e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800512c:	4b62      	ldr	r3, [pc, #392]	; (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800512e:	68db      	ldr	r3, [r3, #12]
 8005130:	4a61      	ldr	r2, [pc, #388]	; (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005132:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005136:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005138:	e015      	b.n	8005166 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	3304      	adds	r3, #4
 800513e:	2100      	movs	r1, #0
 8005140:	4618      	mov	r0, r3
 8005142:	f000 fa83 	bl	800564c <RCCEx_PLLSAI1_Config>
 8005146:	4603      	mov	r3, r0
 8005148:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800514a:	e00c      	b.n	8005166 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	3320      	adds	r3, #32
 8005150:	2100      	movs	r1, #0
 8005152:	4618      	mov	r0, r3
 8005154:	f000 fb6e 	bl	8005834 <RCCEx_PLLSAI2_Config>
 8005158:	4603      	mov	r3, r0
 800515a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800515c:	e003      	b.n	8005166 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800515e:	2301      	movs	r3, #1
 8005160:	74fb      	strb	r3, [r7, #19]
      break;
 8005162:	e000      	b.n	8005166 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8005164:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005166:	7cfb      	ldrb	r3, [r7, #19]
 8005168:	2b00      	cmp	r3, #0
 800516a:	d10b      	bne.n	8005184 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800516c:	4b52      	ldr	r3, [pc, #328]	; (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800516e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005172:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800517a:	494f      	ldr	r1, [pc, #316]	; (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800517c:	4313      	orrs	r3, r2
 800517e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005182:	e001      	b.n	8005188 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005184:	7cfb      	ldrb	r3, [r7, #19]
 8005186:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005190:	2b00      	cmp	r3, #0
 8005192:	f000 80a0 	beq.w	80052d6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005196:	2300      	movs	r3, #0
 8005198:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800519a:	4b47      	ldr	r3, [pc, #284]	; (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800519c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800519e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d101      	bne.n	80051aa <HAL_RCCEx_PeriphCLKConfig+0x152>
 80051a6:	2301      	movs	r3, #1
 80051a8:	e000      	b.n	80051ac <HAL_RCCEx_PeriphCLKConfig+0x154>
 80051aa:	2300      	movs	r3, #0
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d00d      	beq.n	80051cc <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80051b0:	4b41      	ldr	r3, [pc, #260]	; (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80051b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051b4:	4a40      	ldr	r2, [pc, #256]	; (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80051b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80051ba:	6593      	str	r3, [r2, #88]	; 0x58
 80051bc:	4b3e      	ldr	r3, [pc, #248]	; (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80051be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051c4:	60bb      	str	r3, [r7, #8]
 80051c6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80051c8:	2301      	movs	r3, #1
 80051ca:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80051cc:	4b3b      	ldr	r3, [pc, #236]	; (80052bc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	4a3a      	ldr	r2, [pc, #232]	; (80052bc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80051d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80051d6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80051d8:	f7fd fb40 	bl	800285c <HAL_GetTick>
 80051dc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80051de:	e009      	b.n	80051f4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80051e0:	f7fd fb3c 	bl	800285c <HAL_GetTick>
 80051e4:	4602      	mov	r2, r0
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	1ad3      	subs	r3, r2, r3
 80051ea:	2b02      	cmp	r3, #2
 80051ec:	d902      	bls.n	80051f4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80051ee:	2303      	movs	r3, #3
 80051f0:	74fb      	strb	r3, [r7, #19]
        break;
 80051f2:	e005      	b.n	8005200 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80051f4:	4b31      	ldr	r3, [pc, #196]	; (80052bc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d0ef      	beq.n	80051e0 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8005200:	7cfb      	ldrb	r3, [r7, #19]
 8005202:	2b00      	cmp	r3, #0
 8005204:	d15c      	bne.n	80052c0 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005206:	4b2c      	ldr	r3, [pc, #176]	; (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005208:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800520c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005210:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005212:	697b      	ldr	r3, [r7, #20]
 8005214:	2b00      	cmp	r3, #0
 8005216:	d01f      	beq.n	8005258 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800521e:	697a      	ldr	r2, [r7, #20]
 8005220:	429a      	cmp	r2, r3
 8005222:	d019      	beq.n	8005258 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005224:	4b24      	ldr	r3, [pc, #144]	; (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005226:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800522a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800522e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005230:	4b21      	ldr	r3, [pc, #132]	; (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005232:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005236:	4a20      	ldr	r2, [pc, #128]	; (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005238:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800523c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005240:	4b1d      	ldr	r3, [pc, #116]	; (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005242:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005246:	4a1c      	ldr	r2, [pc, #112]	; (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005248:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800524c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005250:	4a19      	ldr	r2, [pc, #100]	; (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005252:	697b      	ldr	r3, [r7, #20]
 8005254:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005258:	697b      	ldr	r3, [r7, #20]
 800525a:	f003 0301 	and.w	r3, r3, #1
 800525e:	2b00      	cmp	r3, #0
 8005260:	d016      	beq.n	8005290 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005262:	f7fd fafb 	bl	800285c <HAL_GetTick>
 8005266:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005268:	e00b      	b.n	8005282 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800526a:	f7fd faf7 	bl	800285c <HAL_GetTick>
 800526e:	4602      	mov	r2, r0
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	1ad3      	subs	r3, r2, r3
 8005274:	f241 3288 	movw	r2, #5000	; 0x1388
 8005278:	4293      	cmp	r3, r2
 800527a:	d902      	bls.n	8005282 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800527c:	2303      	movs	r3, #3
 800527e:	74fb      	strb	r3, [r7, #19]
            break;
 8005280:	e006      	b.n	8005290 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005282:	4b0d      	ldr	r3, [pc, #52]	; (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005284:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005288:	f003 0302 	and.w	r3, r3, #2
 800528c:	2b00      	cmp	r3, #0
 800528e:	d0ec      	beq.n	800526a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8005290:	7cfb      	ldrb	r3, [r7, #19]
 8005292:	2b00      	cmp	r3, #0
 8005294:	d10c      	bne.n	80052b0 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005296:	4b08      	ldr	r3, [pc, #32]	; (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005298:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800529c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80052a6:	4904      	ldr	r1, [pc, #16]	; (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80052a8:	4313      	orrs	r3, r2
 80052aa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80052ae:	e009      	b.n	80052c4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80052b0:	7cfb      	ldrb	r3, [r7, #19]
 80052b2:	74bb      	strb	r3, [r7, #18]
 80052b4:	e006      	b.n	80052c4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80052b6:	bf00      	nop
 80052b8:	40021000 	.word	0x40021000
 80052bc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052c0:	7cfb      	ldrb	r3, [r7, #19]
 80052c2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80052c4:	7c7b      	ldrb	r3, [r7, #17]
 80052c6:	2b01      	cmp	r3, #1
 80052c8:	d105      	bne.n	80052d6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80052ca:	4b9e      	ldr	r3, [pc, #632]	; (8005544 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052ce:	4a9d      	ldr	r2, [pc, #628]	; (8005544 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80052d4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f003 0301 	and.w	r3, r3, #1
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d00a      	beq.n	80052f8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80052e2:	4b98      	ldr	r3, [pc, #608]	; (8005544 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052e8:	f023 0203 	bic.w	r2, r3, #3
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052f0:	4994      	ldr	r1, [pc, #592]	; (8005544 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052f2:	4313      	orrs	r3, r2
 80052f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f003 0302 	and.w	r3, r3, #2
 8005300:	2b00      	cmp	r3, #0
 8005302:	d00a      	beq.n	800531a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005304:	4b8f      	ldr	r3, [pc, #572]	; (8005544 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005306:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800530a:	f023 020c 	bic.w	r2, r3, #12
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005312:	498c      	ldr	r1, [pc, #560]	; (8005544 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005314:	4313      	orrs	r3, r2
 8005316:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f003 0304 	and.w	r3, r3, #4
 8005322:	2b00      	cmp	r3, #0
 8005324:	d00a      	beq.n	800533c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005326:	4b87      	ldr	r3, [pc, #540]	; (8005544 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005328:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800532c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005334:	4983      	ldr	r1, [pc, #524]	; (8005544 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005336:	4313      	orrs	r3, r2
 8005338:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f003 0308 	and.w	r3, r3, #8
 8005344:	2b00      	cmp	r3, #0
 8005346:	d00a      	beq.n	800535e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005348:	4b7e      	ldr	r3, [pc, #504]	; (8005544 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800534a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800534e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005356:	497b      	ldr	r1, [pc, #492]	; (8005544 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005358:	4313      	orrs	r3, r2
 800535a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f003 0310 	and.w	r3, r3, #16
 8005366:	2b00      	cmp	r3, #0
 8005368:	d00a      	beq.n	8005380 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800536a:	4b76      	ldr	r3, [pc, #472]	; (8005544 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800536c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005370:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005378:	4972      	ldr	r1, [pc, #456]	; (8005544 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800537a:	4313      	orrs	r3, r2
 800537c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f003 0320 	and.w	r3, r3, #32
 8005388:	2b00      	cmp	r3, #0
 800538a:	d00a      	beq.n	80053a2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800538c:	4b6d      	ldr	r3, [pc, #436]	; (8005544 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800538e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005392:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800539a:	496a      	ldr	r1, [pc, #424]	; (8005544 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800539c:	4313      	orrs	r3, r2
 800539e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d00a      	beq.n	80053c4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80053ae:	4b65      	ldr	r3, [pc, #404]	; (8005544 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053b4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053bc:	4961      	ldr	r1, [pc, #388]	; (8005544 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053be:	4313      	orrs	r3, r2
 80053c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d00a      	beq.n	80053e6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80053d0:	4b5c      	ldr	r3, [pc, #368]	; (8005544 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053d6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80053de:	4959      	ldr	r1, [pc, #356]	; (8005544 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053e0:	4313      	orrs	r3, r2
 80053e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d00a      	beq.n	8005408 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80053f2:	4b54      	ldr	r3, [pc, #336]	; (8005544 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053f8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005400:	4950      	ldr	r1, [pc, #320]	; (8005544 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005402:	4313      	orrs	r3, r2
 8005404:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005410:	2b00      	cmp	r3, #0
 8005412:	d00a      	beq.n	800542a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005414:	4b4b      	ldr	r3, [pc, #300]	; (8005544 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005416:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800541a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005422:	4948      	ldr	r1, [pc, #288]	; (8005544 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005424:	4313      	orrs	r3, r2
 8005426:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005432:	2b00      	cmp	r3, #0
 8005434:	d00a      	beq.n	800544c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005436:	4b43      	ldr	r3, [pc, #268]	; (8005544 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005438:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800543c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005444:	493f      	ldr	r1, [pc, #252]	; (8005544 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005446:	4313      	orrs	r3, r2
 8005448:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005454:	2b00      	cmp	r3, #0
 8005456:	d028      	beq.n	80054aa <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005458:	4b3a      	ldr	r3, [pc, #232]	; (8005544 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800545a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800545e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005466:	4937      	ldr	r1, [pc, #220]	; (8005544 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005468:	4313      	orrs	r3, r2
 800546a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005472:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005476:	d106      	bne.n	8005486 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005478:	4b32      	ldr	r3, [pc, #200]	; (8005544 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800547a:	68db      	ldr	r3, [r3, #12]
 800547c:	4a31      	ldr	r2, [pc, #196]	; (8005544 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800547e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005482:	60d3      	str	r3, [r2, #12]
 8005484:	e011      	b.n	80054aa <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800548a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800548e:	d10c      	bne.n	80054aa <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	3304      	adds	r3, #4
 8005494:	2101      	movs	r1, #1
 8005496:	4618      	mov	r0, r3
 8005498:	f000 f8d8 	bl	800564c <RCCEx_PLLSAI1_Config>
 800549c:	4603      	mov	r3, r0
 800549e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80054a0:	7cfb      	ldrb	r3, [r7, #19]
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d001      	beq.n	80054aa <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80054a6:	7cfb      	ldrb	r3, [r7, #19]
 80054a8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d028      	beq.n	8005508 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80054b6:	4b23      	ldr	r3, [pc, #140]	; (8005544 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054bc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054c4:	491f      	ldr	r1, [pc, #124]	; (8005544 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054c6:	4313      	orrs	r3, r2
 80054c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054d0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80054d4:	d106      	bne.n	80054e4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80054d6:	4b1b      	ldr	r3, [pc, #108]	; (8005544 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054d8:	68db      	ldr	r3, [r3, #12]
 80054da:	4a1a      	ldr	r2, [pc, #104]	; (8005544 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80054e0:	60d3      	str	r3, [r2, #12]
 80054e2:	e011      	b.n	8005508 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054e8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80054ec:	d10c      	bne.n	8005508 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	3304      	adds	r3, #4
 80054f2:	2101      	movs	r1, #1
 80054f4:	4618      	mov	r0, r3
 80054f6:	f000 f8a9 	bl	800564c <RCCEx_PLLSAI1_Config>
 80054fa:	4603      	mov	r3, r0
 80054fc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80054fe:	7cfb      	ldrb	r3, [r7, #19]
 8005500:	2b00      	cmp	r3, #0
 8005502:	d001      	beq.n	8005508 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8005504:	7cfb      	ldrb	r3, [r7, #19]
 8005506:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005510:	2b00      	cmp	r3, #0
 8005512:	d02b      	beq.n	800556c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005514:	4b0b      	ldr	r3, [pc, #44]	; (8005544 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005516:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800551a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005522:	4908      	ldr	r1, [pc, #32]	; (8005544 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005524:	4313      	orrs	r3, r2
 8005526:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800552e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005532:	d109      	bne.n	8005548 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005534:	4b03      	ldr	r3, [pc, #12]	; (8005544 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005536:	68db      	ldr	r3, [r3, #12]
 8005538:	4a02      	ldr	r2, [pc, #8]	; (8005544 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800553a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800553e:	60d3      	str	r3, [r2, #12]
 8005540:	e014      	b.n	800556c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8005542:	bf00      	nop
 8005544:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800554c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005550:	d10c      	bne.n	800556c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	3304      	adds	r3, #4
 8005556:	2101      	movs	r1, #1
 8005558:	4618      	mov	r0, r3
 800555a:	f000 f877 	bl	800564c <RCCEx_PLLSAI1_Config>
 800555e:	4603      	mov	r3, r0
 8005560:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005562:	7cfb      	ldrb	r3, [r7, #19]
 8005564:	2b00      	cmp	r3, #0
 8005566:	d001      	beq.n	800556c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8005568:	7cfb      	ldrb	r3, [r7, #19]
 800556a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005574:	2b00      	cmp	r3, #0
 8005576:	d02f      	beq.n	80055d8 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005578:	4b2b      	ldr	r3, [pc, #172]	; (8005628 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800557a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800557e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005586:	4928      	ldr	r1, [pc, #160]	; (8005628 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005588:	4313      	orrs	r3, r2
 800558a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005592:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005596:	d10d      	bne.n	80055b4 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	3304      	adds	r3, #4
 800559c:	2102      	movs	r1, #2
 800559e:	4618      	mov	r0, r3
 80055a0:	f000 f854 	bl	800564c <RCCEx_PLLSAI1_Config>
 80055a4:	4603      	mov	r3, r0
 80055a6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80055a8:	7cfb      	ldrb	r3, [r7, #19]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d014      	beq.n	80055d8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80055ae:	7cfb      	ldrb	r3, [r7, #19]
 80055b0:	74bb      	strb	r3, [r7, #18]
 80055b2:	e011      	b.n	80055d8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80055b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80055bc:	d10c      	bne.n	80055d8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	3320      	adds	r3, #32
 80055c2:	2102      	movs	r1, #2
 80055c4:	4618      	mov	r0, r3
 80055c6:	f000 f935 	bl	8005834 <RCCEx_PLLSAI2_Config>
 80055ca:	4603      	mov	r3, r0
 80055cc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80055ce:	7cfb      	ldrb	r3, [r7, #19]
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d001      	beq.n	80055d8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80055d4:	7cfb      	ldrb	r3, [r7, #19]
 80055d6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d00a      	beq.n	80055fa <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80055e4:	4b10      	ldr	r3, [pc, #64]	; (8005628 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80055e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055ea:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80055f2:	490d      	ldr	r1, [pc, #52]	; (8005628 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80055f4:	4313      	orrs	r3, r2
 80055f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005602:	2b00      	cmp	r3, #0
 8005604:	d00b      	beq.n	800561e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005606:	4b08      	ldr	r3, [pc, #32]	; (8005628 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005608:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800560c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005616:	4904      	ldr	r1, [pc, #16]	; (8005628 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005618:	4313      	orrs	r3, r2
 800561a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800561e:	7cbb      	ldrb	r3, [r7, #18]
}
 8005620:	4618      	mov	r0, r3
 8005622:	3718      	adds	r7, #24
 8005624:	46bd      	mov	sp, r7
 8005626:	bd80      	pop	{r7, pc}
 8005628:	40021000 	.word	0x40021000

0800562c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 800562c:	b480      	push	{r7}
 800562e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8005630:	4b05      	ldr	r3, [pc, #20]	; (8005648 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	4a04      	ldr	r2, [pc, #16]	; (8005648 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8005636:	f043 0304 	orr.w	r3, r3, #4
 800563a:	6013      	str	r3, [r2, #0]
}
 800563c:	bf00      	nop
 800563e:	46bd      	mov	sp, r7
 8005640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005644:	4770      	bx	lr
 8005646:	bf00      	nop
 8005648:	40021000 	.word	0x40021000

0800564c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800564c:	b580      	push	{r7, lr}
 800564e:	b084      	sub	sp, #16
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
 8005654:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005656:	2300      	movs	r3, #0
 8005658:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800565a:	4b75      	ldr	r3, [pc, #468]	; (8005830 <RCCEx_PLLSAI1_Config+0x1e4>)
 800565c:	68db      	ldr	r3, [r3, #12]
 800565e:	f003 0303 	and.w	r3, r3, #3
 8005662:	2b00      	cmp	r3, #0
 8005664:	d018      	beq.n	8005698 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005666:	4b72      	ldr	r3, [pc, #456]	; (8005830 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005668:	68db      	ldr	r3, [r3, #12]
 800566a:	f003 0203 	and.w	r2, r3, #3
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	429a      	cmp	r2, r3
 8005674:	d10d      	bne.n	8005692 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
       ||
 800567a:	2b00      	cmp	r3, #0
 800567c:	d009      	beq.n	8005692 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800567e:	4b6c      	ldr	r3, [pc, #432]	; (8005830 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005680:	68db      	ldr	r3, [r3, #12]
 8005682:	091b      	lsrs	r3, r3, #4
 8005684:	f003 0307 	and.w	r3, r3, #7
 8005688:	1c5a      	adds	r2, r3, #1
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	685b      	ldr	r3, [r3, #4]
       ||
 800568e:	429a      	cmp	r2, r3
 8005690:	d047      	beq.n	8005722 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005692:	2301      	movs	r3, #1
 8005694:	73fb      	strb	r3, [r7, #15]
 8005696:	e044      	b.n	8005722 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	2b03      	cmp	r3, #3
 800569e:	d018      	beq.n	80056d2 <RCCEx_PLLSAI1_Config+0x86>
 80056a0:	2b03      	cmp	r3, #3
 80056a2:	d825      	bhi.n	80056f0 <RCCEx_PLLSAI1_Config+0xa4>
 80056a4:	2b01      	cmp	r3, #1
 80056a6:	d002      	beq.n	80056ae <RCCEx_PLLSAI1_Config+0x62>
 80056a8:	2b02      	cmp	r3, #2
 80056aa:	d009      	beq.n	80056c0 <RCCEx_PLLSAI1_Config+0x74>
 80056ac:	e020      	b.n	80056f0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80056ae:	4b60      	ldr	r3, [pc, #384]	; (8005830 <RCCEx_PLLSAI1_Config+0x1e4>)
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	f003 0302 	and.w	r3, r3, #2
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d11d      	bne.n	80056f6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80056ba:	2301      	movs	r3, #1
 80056bc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80056be:	e01a      	b.n	80056f6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80056c0:	4b5b      	ldr	r3, [pc, #364]	; (8005830 <RCCEx_PLLSAI1_Config+0x1e4>)
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d116      	bne.n	80056fa <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80056cc:	2301      	movs	r3, #1
 80056ce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80056d0:	e013      	b.n	80056fa <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80056d2:	4b57      	ldr	r3, [pc, #348]	; (8005830 <RCCEx_PLLSAI1_Config+0x1e4>)
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d10f      	bne.n	80056fe <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80056de:	4b54      	ldr	r3, [pc, #336]	; (8005830 <RCCEx_PLLSAI1_Config+0x1e4>)
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d109      	bne.n	80056fe <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80056ea:	2301      	movs	r3, #1
 80056ec:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80056ee:	e006      	b.n	80056fe <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80056f0:	2301      	movs	r3, #1
 80056f2:	73fb      	strb	r3, [r7, #15]
      break;
 80056f4:	e004      	b.n	8005700 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80056f6:	bf00      	nop
 80056f8:	e002      	b.n	8005700 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80056fa:	bf00      	nop
 80056fc:	e000      	b.n	8005700 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80056fe:	bf00      	nop
    }

    if(status == HAL_OK)
 8005700:	7bfb      	ldrb	r3, [r7, #15]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d10d      	bne.n	8005722 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005706:	4b4a      	ldr	r3, [pc, #296]	; (8005830 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005708:	68db      	ldr	r3, [r3, #12]
 800570a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	6819      	ldr	r1, [r3, #0]
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	685b      	ldr	r3, [r3, #4]
 8005716:	3b01      	subs	r3, #1
 8005718:	011b      	lsls	r3, r3, #4
 800571a:	430b      	orrs	r3, r1
 800571c:	4944      	ldr	r1, [pc, #272]	; (8005830 <RCCEx_PLLSAI1_Config+0x1e4>)
 800571e:	4313      	orrs	r3, r2
 8005720:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005722:	7bfb      	ldrb	r3, [r7, #15]
 8005724:	2b00      	cmp	r3, #0
 8005726:	d17d      	bne.n	8005824 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005728:	4b41      	ldr	r3, [pc, #260]	; (8005830 <RCCEx_PLLSAI1_Config+0x1e4>)
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	4a40      	ldr	r2, [pc, #256]	; (8005830 <RCCEx_PLLSAI1_Config+0x1e4>)
 800572e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005732:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005734:	f7fd f892 	bl	800285c <HAL_GetTick>
 8005738:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800573a:	e009      	b.n	8005750 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800573c:	f7fd f88e 	bl	800285c <HAL_GetTick>
 8005740:	4602      	mov	r2, r0
 8005742:	68bb      	ldr	r3, [r7, #8]
 8005744:	1ad3      	subs	r3, r2, r3
 8005746:	2b02      	cmp	r3, #2
 8005748:	d902      	bls.n	8005750 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800574a:	2303      	movs	r3, #3
 800574c:	73fb      	strb	r3, [r7, #15]
        break;
 800574e:	e005      	b.n	800575c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005750:	4b37      	ldr	r3, [pc, #220]	; (8005830 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005758:	2b00      	cmp	r3, #0
 800575a:	d1ef      	bne.n	800573c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800575c:	7bfb      	ldrb	r3, [r7, #15]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d160      	bne.n	8005824 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005762:	683b      	ldr	r3, [r7, #0]
 8005764:	2b00      	cmp	r3, #0
 8005766:	d111      	bne.n	800578c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005768:	4b31      	ldr	r3, [pc, #196]	; (8005830 <RCCEx_PLLSAI1_Config+0x1e4>)
 800576a:	691b      	ldr	r3, [r3, #16]
 800576c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005770:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005774:	687a      	ldr	r2, [r7, #4]
 8005776:	6892      	ldr	r2, [r2, #8]
 8005778:	0211      	lsls	r1, r2, #8
 800577a:	687a      	ldr	r2, [r7, #4]
 800577c:	68d2      	ldr	r2, [r2, #12]
 800577e:	0912      	lsrs	r2, r2, #4
 8005780:	0452      	lsls	r2, r2, #17
 8005782:	430a      	orrs	r2, r1
 8005784:	492a      	ldr	r1, [pc, #168]	; (8005830 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005786:	4313      	orrs	r3, r2
 8005788:	610b      	str	r3, [r1, #16]
 800578a:	e027      	b.n	80057dc <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800578c:	683b      	ldr	r3, [r7, #0]
 800578e:	2b01      	cmp	r3, #1
 8005790:	d112      	bne.n	80057b8 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005792:	4b27      	ldr	r3, [pc, #156]	; (8005830 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005794:	691b      	ldr	r3, [r3, #16]
 8005796:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800579a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800579e:	687a      	ldr	r2, [r7, #4]
 80057a0:	6892      	ldr	r2, [r2, #8]
 80057a2:	0211      	lsls	r1, r2, #8
 80057a4:	687a      	ldr	r2, [r7, #4]
 80057a6:	6912      	ldr	r2, [r2, #16]
 80057a8:	0852      	lsrs	r2, r2, #1
 80057aa:	3a01      	subs	r2, #1
 80057ac:	0552      	lsls	r2, r2, #21
 80057ae:	430a      	orrs	r2, r1
 80057b0:	491f      	ldr	r1, [pc, #124]	; (8005830 <RCCEx_PLLSAI1_Config+0x1e4>)
 80057b2:	4313      	orrs	r3, r2
 80057b4:	610b      	str	r3, [r1, #16]
 80057b6:	e011      	b.n	80057dc <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80057b8:	4b1d      	ldr	r3, [pc, #116]	; (8005830 <RCCEx_PLLSAI1_Config+0x1e4>)
 80057ba:	691b      	ldr	r3, [r3, #16]
 80057bc:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80057c0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80057c4:	687a      	ldr	r2, [r7, #4]
 80057c6:	6892      	ldr	r2, [r2, #8]
 80057c8:	0211      	lsls	r1, r2, #8
 80057ca:	687a      	ldr	r2, [r7, #4]
 80057cc:	6952      	ldr	r2, [r2, #20]
 80057ce:	0852      	lsrs	r2, r2, #1
 80057d0:	3a01      	subs	r2, #1
 80057d2:	0652      	lsls	r2, r2, #25
 80057d4:	430a      	orrs	r2, r1
 80057d6:	4916      	ldr	r1, [pc, #88]	; (8005830 <RCCEx_PLLSAI1_Config+0x1e4>)
 80057d8:	4313      	orrs	r3, r2
 80057da:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80057dc:	4b14      	ldr	r3, [pc, #80]	; (8005830 <RCCEx_PLLSAI1_Config+0x1e4>)
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	4a13      	ldr	r2, [pc, #76]	; (8005830 <RCCEx_PLLSAI1_Config+0x1e4>)
 80057e2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80057e6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057e8:	f7fd f838 	bl	800285c <HAL_GetTick>
 80057ec:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80057ee:	e009      	b.n	8005804 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80057f0:	f7fd f834 	bl	800285c <HAL_GetTick>
 80057f4:	4602      	mov	r2, r0
 80057f6:	68bb      	ldr	r3, [r7, #8]
 80057f8:	1ad3      	subs	r3, r2, r3
 80057fa:	2b02      	cmp	r3, #2
 80057fc:	d902      	bls.n	8005804 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80057fe:	2303      	movs	r3, #3
 8005800:	73fb      	strb	r3, [r7, #15]
          break;
 8005802:	e005      	b.n	8005810 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005804:	4b0a      	ldr	r3, [pc, #40]	; (8005830 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800580c:	2b00      	cmp	r3, #0
 800580e:	d0ef      	beq.n	80057f0 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8005810:	7bfb      	ldrb	r3, [r7, #15]
 8005812:	2b00      	cmp	r3, #0
 8005814:	d106      	bne.n	8005824 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005816:	4b06      	ldr	r3, [pc, #24]	; (8005830 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005818:	691a      	ldr	r2, [r3, #16]
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	699b      	ldr	r3, [r3, #24]
 800581e:	4904      	ldr	r1, [pc, #16]	; (8005830 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005820:	4313      	orrs	r3, r2
 8005822:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005824:	7bfb      	ldrb	r3, [r7, #15]
}
 8005826:	4618      	mov	r0, r3
 8005828:	3710      	adds	r7, #16
 800582a:	46bd      	mov	sp, r7
 800582c:	bd80      	pop	{r7, pc}
 800582e:	bf00      	nop
 8005830:	40021000 	.word	0x40021000

08005834 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005834:	b580      	push	{r7, lr}
 8005836:	b084      	sub	sp, #16
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
 800583c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800583e:	2300      	movs	r3, #0
 8005840:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005842:	4b6a      	ldr	r3, [pc, #424]	; (80059ec <RCCEx_PLLSAI2_Config+0x1b8>)
 8005844:	68db      	ldr	r3, [r3, #12]
 8005846:	f003 0303 	and.w	r3, r3, #3
 800584a:	2b00      	cmp	r3, #0
 800584c:	d018      	beq.n	8005880 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800584e:	4b67      	ldr	r3, [pc, #412]	; (80059ec <RCCEx_PLLSAI2_Config+0x1b8>)
 8005850:	68db      	ldr	r3, [r3, #12]
 8005852:	f003 0203 	and.w	r2, r3, #3
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	429a      	cmp	r2, r3
 800585c:	d10d      	bne.n	800587a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
       ||
 8005862:	2b00      	cmp	r3, #0
 8005864:	d009      	beq.n	800587a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8005866:	4b61      	ldr	r3, [pc, #388]	; (80059ec <RCCEx_PLLSAI2_Config+0x1b8>)
 8005868:	68db      	ldr	r3, [r3, #12]
 800586a:	091b      	lsrs	r3, r3, #4
 800586c:	f003 0307 	and.w	r3, r3, #7
 8005870:	1c5a      	adds	r2, r3, #1
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	685b      	ldr	r3, [r3, #4]
       ||
 8005876:	429a      	cmp	r2, r3
 8005878:	d047      	beq.n	800590a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800587a:	2301      	movs	r3, #1
 800587c:	73fb      	strb	r3, [r7, #15]
 800587e:	e044      	b.n	800590a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	2b03      	cmp	r3, #3
 8005886:	d018      	beq.n	80058ba <RCCEx_PLLSAI2_Config+0x86>
 8005888:	2b03      	cmp	r3, #3
 800588a:	d825      	bhi.n	80058d8 <RCCEx_PLLSAI2_Config+0xa4>
 800588c:	2b01      	cmp	r3, #1
 800588e:	d002      	beq.n	8005896 <RCCEx_PLLSAI2_Config+0x62>
 8005890:	2b02      	cmp	r3, #2
 8005892:	d009      	beq.n	80058a8 <RCCEx_PLLSAI2_Config+0x74>
 8005894:	e020      	b.n	80058d8 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005896:	4b55      	ldr	r3, [pc, #340]	; (80059ec <RCCEx_PLLSAI2_Config+0x1b8>)
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f003 0302 	and.w	r3, r3, #2
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d11d      	bne.n	80058de <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80058a2:	2301      	movs	r3, #1
 80058a4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80058a6:	e01a      	b.n	80058de <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80058a8:	4b50      	ldr	r3, [pc, #320]	; (80059ec <RCCEx_PLLSAI2_Config+0x1b8>)
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d116      	bne.n	80058e2 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80058b4:	2301      	movs	r3, #1
 80058b6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80058b8:	e013      	b.n	80058e2 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80058ba:	4b4c      	ldr	r3, [pc, #304]	; (80059ec <RCCEx_PLLSAI2_Config+0x1b8>)
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d10f      	bne.n	80058e6 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80058c6:	4b49      	ldr	r3, [pc, #292]	; (80059ec <RCCEx_PLLSAI2_Config+0x1b8>)
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d109      	bne.n	80058e6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80058d2:	2301      	movs	r3, #1
 80058d4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80058d6:	e006      	b.n	80058e6 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80058d8:	2301      	movs	r3, #1
 80058da:	73fb      	strb	r3, [r7, #15]
      break;
 80058dc:	e004      	b.n	80058e8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80058de:	bf00      	nop
 80058e0:	e002      	b.n	80058e8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80058e2:	bf00      	nop
 80058e4:	e000      	b.n	80058e8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80058e6:	bf00      	nop
    }

    if(status == HAL_OK)
 80058e8:	7bfb      	ldrb	r3, [r7, #15]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d10d      	bne.n	800590a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80058ee:	4b3f      	ldr	r3, [pc, #252]	; (80059ec <RCCEx_PLLSAI2_Config+0x1b8>)
 80058f0:	68db      	ldr	r3, [r3, #12]
 80058f2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	6819      	ldr	r1, [r3, #0]
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	685b      	ldr	r3, [r3, #4]
 80058fe:	3b01      	subs	r3, #1
 8005900:	011b      	lsls	r3, r3, #4
 8005902:	430b      	orrs	r3, r1
 8005904:	4939      	ldr	r1, [pc, #228]	; (80059ec <RCCEx_PLLSAI2_Config+0x1b8>)
 8005906:	4313      	orrs	r3, r2
 8005908:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800590a:	7bfb      	ldrb	r3, [r7, #15]
 800590c:	2b00      	cmp	r3, #0
 800590e:	d167      	bne.n	80059e0 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005910:	4b36      	ldr	r3, [pc, #216]	; (80059ec <RCCEx_PLLSAI2_Config+0x1b8>)
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	4a35      	ldr	r2, [pc, #212]	; (80059ec <RCCEx_PLLSAI2_Config+0x1b8>)
 8005916:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800591a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800591c:	f7fc ff9e 	bl	800285c <HAL_GetTick>
 8005920:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005922:	e009      	b.n	8005938 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005924:	f7fc ff9a 	bl	800285c <HAL_GetTick>
 8005928:	4602      	mov	r2, r0
 800592a:	68bb      	ldr	r3, [r7, #8]
 800592c:	1ad3      	subs	r3, r2, r3
 800592e:	2b02      	cmp	r3, #2
 8005930:	d902      	bls.n	8005938 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005932:	2303      	movs	r3, #3
 8005934:	73fb      	strb	r3, [r7, #15]
        break;
 8005936:	e005      	b.n	8005944 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005938:	4b2c      	ldr	r3, [pc, #176]	; (80059ec <RCCEx_PLLSAI2_Config+0x1b8>)
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005940:	2b00      	cmp	r3, #0
 8005942:	d1ef      	bne.n	8005924 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005944:	7bfb      	ldrb	r3, [r7, #15]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d14a      	bne.n	80059e0 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800594a:	683b      	ldr	r3, [r7, #0]
 800594c:	2b00      	cmp	r3, #0
 800594e:	d111      	bne.n	8005974 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005950:	4b26      	ldr	r3, [pc, #152]	; (80059ec <RCCEx_PLLSAI2_Config+0x1b8>)
 8005952:	695b      	ldr	r3, [r3, #20]
 8005954:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005958:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800595c:	687a      	ldr	r2, [r7, #4]
 800595e:	6892      	ldr	r2, [r2, #8]
 8005960:	0211      	lsls	r1, r2, #8
 8005962:	687a      	ldr	r2, [r7, #4]
 8005964:	68d2      	ldr	r2, [r2, #12]
 8005966:	0912      	lsrs	r2, r2, #4
 8005968:	0452      	lsls	r2, r2, #17
 800596a:	430a      	orrs	r2, r1
 800596c:	491f      	ldr	r1, [pc, #124]	; (80059ec <RCCEx_PLLSAI2_Config+0x1b8>)
 800596e:	4313      	orrs	r3, r2
 8005970:	614b      	str	r3, [r1, #20]
 8005972:	e011      	b.n	8005998 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005974:	4b1d      	ldr	r3, [pc, #116]	; (80059ec <RCCEx_PLLSAI2_Config+0x1b8>)
 8005976:	695b      	ldr	r3, [r3, #20]
 8005978:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800597c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005980:	687a      	ldr	r2, [r7, #4]
 8005982:	6892      	ldr	r2, [r2, #8]
 8005984:	0211      	lsls	r1, r2, #8
 8005986:	687a      	ldr	r2, [r7, #4]
 8005988:	6912      	ldr	r2, [r2, #16]
 800598a:	0852      	lsrs	r2, r2, #1
 800598c:	3a01      	subs	r2, #1
 800598e:	0652      	lsls	r2, r2, #25
 8005990:	430a      	orrs	r2, r1
 8005992:	4916      	ldr	r1, [pc, #88]	; (80059ec <RCCEx_PLLSAI2_Config+0x1b8>)
 8005994:	4313      	orrs	r3, r2
 8005996:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005998:	4b14      	ldr	r3, [pc, #80]	; (80059ec <RCCEx_PLLSAI2_Config+0x1b8>)
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	4a13      	ldr	r2, [pc, #76]	; (80059ec <RCCEx_PLLSAI2_Config+0x1b8>)
 800599e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80059a2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059a4:	f7fc ff5a 	bl	800285c <HAL_GetTick>
 80059a8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80059aa:	e009      	b.n	80059c0 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80059ac:	f7fc ff56 	bl	800285c <HAL_GetTick>
 80059b0:	4602      	mov	r2, r0
 80059b2:	68bb      	ldr	r3, [r7, #8]
 80059b4:	1ad3      	subs	r3, r2, r3
 80059b6:	2b02      	cmp	r3, #2
 80059b8:	d902      	bls.n	80059c0 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80059ba:	2303      	movs	r3, #3
 80059bc:	73fb      	strb	r3, [r7, #15]
          break;
 80059be:	e005      	b.n	80059cc <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80059c0:	4b0a      	ldr	r3, [pc, #40]	; (80059ec <RCCEx_PLLSAI2_Config+0x1b8>)
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d0ef      	beq.n	80059ac <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80059cc:	7bfb      	ldrb	r3, [r7, #15]
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d106      	bne.n	80059e0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80059d2:	4b06      	ldr	r3, [pc, #24]	; (80059ec <RCCEx_PLLSAI2_Config+0x1b8>)
 80059d4:	695a      	ldr	r2, [r3, #20]
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	695b      	ldr	r3, [r3, #20]
 80059da:	4904      	ldr	r1, [pc, #16]	; (80059ec <RCCEx_PLLSAI2_Config+0x1b8>)
 80059dc:	4313      	orrs	r3, r2
 80059de:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80059e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80059e2:	4618      	mov	r0, r3
 80059e4:	3710      	adds	r7, #16
 80059e6:	46bd      	mov	sp, r7
 80059e8:	bd80      	pop	{r7, pc}
 80059ea:	bf00      	nop
 80059ec:	40021000 	.word	0x40021000

080059f0 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80059f0:	b580      	push	{r7, lr}
 80059f2:	b084      	sub	sp, #16
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80059f8:	2301      	movs	r3, #1
 80059fa:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d06c      	beq.n	8005adc <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005a08:	b2db      	uxtb	r3, r3
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d106      	bne.n	8005a1c <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	2200      	movs	r2, #0
 8005a12:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8005a16:	6878      	ldr	r0, [r7, #4]
 8005a18:	f7fc fb1c 	bl	8002054 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2202      	movs	r2, #2
 8005a20:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	22ca      	movs	r2, #202	; 0xca
 8005a2a:	625a      	str	r2, [r3, #36]	; 0x24
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	2253      	movs	r2, #83	; 0x53
 8005a32:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8005a34:	6878      	ldr	r0, [r7, #4]
 8005a36:	f000 fa49 	bl	8005ecc <RTC_EnterInitMode>
 8005a3a:	4603      	mov	r3, r0
 8005a3c:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8005a3e:	7bfb      	ldrb	r3, [r7, #15]
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d14b      	bne.n	8005adc <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	689b      	ldr	r3, [r3, #8]
 8005a4a:	687a      	ldr	r2, [r7, #4]
 8005a4c:	6812      	ldr	r2, [r2, #0]
 8005a4e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005a52:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a56:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	6899      	ldr	r1, [r3, #8]
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	685a      	ldr	r2, [r3, #4]
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	691b      	ldr	r3, [r3, #16]
 8005a66:	431a      	orrs	r2, r3
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	699b      	ldr	r3, [r3, #24]
 8005a6c:	431a      	orrs	r2, r3
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	430a      	orrs	r2, r1
 8005a74:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	687a      	ldr	r2, [r7, #4]
 8005a7c:	68d2      	ldr	r2, [r2, #12]
 8005a7e:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	6919      	ldr	r1, [r3, #16]
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	689b      	ldr	r3, [r3, #8]
 8005a8a:	041a      	lsls	r2, r3, #16
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	430a      	orrs	r2, r1
 8005a92:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8005a94:	6878      	ldr	r0, [r7, #4]
 8005a96:	f000 fa4d 	bl	8005f34 <RTC_ExitInitMode>
 8005a9a:	4603      	mov	r3, r0
 8005a9c:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8005a9e:	7bfb      	ldrb	r3, [r7, #15]
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d11b      	bne.n	8005adc <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f022 0203 	bic.w	r2, r2, #3
 8005ab2:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	69da      	ldr	r2, [r3, #28]
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	695b      	ldr	r3, [r3, #20]
 8005ac2:	431a      	orrs	r2, r3
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	430a      	orrs	r2, r1
 8005aca:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	22ff      	movs	r2, #255	; 0xff
 8005ad2:	625a      	str	r2, [r3, #36]	; 0x24

          hrtc->State = HAL_RTC_STATE_READY;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	2201      	movs	r2, #1
 8005ad8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 8005adc:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ade:	4618      	mov	r0, r3
 8005ae0:	3710      	adds	r7, #16
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	bd80      	pop	{r7, pc}

08005ae6 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005ae6:	b590      	push	{r4, r7, lr}
 8005ae8:	b087      	sub	sp, #28
 8005aea:	af00      	add	r7, sp, #0
 8005aec:	60f8      	str	r0, [r7, #12]
 8005aee:	60b9      	str	r1, [r7, #8]
 8005af0:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005af8:	2b01      	cmp	r3, #1
 8005afa:	d101      	bne.n	8005b00 <HAL_RTC_SetTime+0x1a>
 8005afc:	2302      	movs	r3, #2
 8005afe:	e08b      	b.n	8005c18 <HAL_RTC_SetTime+0x132>
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	2201      	movs	r2, #1
 8005b04:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	2202      	movs	r2, #2
 8005b0c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	22ca      	movs	r2, #202	; 0xca
 8005b16:	625a      	str	r2, [r3, #36]	; 0x24
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	2253      	movs	r2, #83	; 0x53
 8005b1e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005b20:	68f8      	ldr	r0, [r7, #12]
 8005b22:	f000 f9d3 	bl	8005ecc <RTC_EnterInitMode>
 8005b26:	4603      	mov	r3, r0
 8005b28:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8005b2a:	7cfb      	ldrb	r3, [r7, #19]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d163      	bne.n	8005bf8 <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d126      	bne.n	8005b84 <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	689b      	ldr	r3, [r3, #8]
 8005b3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d102      	bne.n	8005b4a <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8005b44:	68bb      	ldr	r3, [r7, #8]
 8005b46:	2200      	movs	r2, #0
 8005b48:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005b4a:	68bb      	ldr	r3, [r7, #8]
 8005b4c:	781b      	ldrb	r3, [r3, #0]
 8005b4e:	4618      	mov	r0, r3
 8005b50:	f000 fa2e 	bl	8005fb0 <RTC_ByteToBcd2>
 8005b54:	4603      	mov	r3, r0
 8005b56:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005b58:	68bb      	ldr	r3, [r7, #8]
 8005b5a:	785b      	ldrb	r3, [r3, #1]
 8005b5c:	4618      	mov	r0, r3
 8005b5e:	f000 fa27 	bl	8005fb0 <RTC_ByteToBcd2>
 8005b62:	4603      	mov	r3, r0
 8005b64:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005b66:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8005b68:	68bb      	ldr	r3, [r7, #8]
 8005b6a:	789b      	ldrb	r3, [r3, #2]
 8005b6c:	4618      	mov	r0, r3
 8005b6e:	f000 fa1f 	bl	8005fb0 <RTC_ByteToBcd2>
 8005b72:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005b74:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8005b78:	68bb      	ldr	r3, [r7, #8]
 8005b7a:	78db      	ldrb	r3, [r3, #3]
 8005b7c:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005b7e:	4313      	orrs	r3, r2
 8005b80:	617b      	str	r3, [r7, #20]
 8005b82:	e018      	b.n	8005bb6 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	689b      	ldr	r3, [r3, #8]
 8005b8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d102      	bne.n	8005b98 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8005b92:	68bb      	ldr	r3, [r7, #8]
 8005b94:	2200      	movs	r2, #0
 8005b96:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005b98:	68bb      	ldr	r3, [r7, #8]
 8005b9a:	781b      	ldrb	r3, [r3, #0]
 8005b9c:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005b9e:	68bb      	ldr	r3, [r7, #8]
 8005ba0:	785b      	ldrb	r3, [r3, #1]
 8005ba2:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005ba4:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8005ba6:	68ba      	ldr	r2, [r7, #8]
 8005ba8:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005baa:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8005bac:	68bb      	ldr	r3, [r7, #8]
 8005bae:	78db      	ldrb	r3, [r3, #3]
 8005bb0:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005bb2:	4313      	orrs	r3, r2
 8005bb4:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	681a      	ldr	r2, [r3, #0]
 8005bba:	697b      	ldr	r3, [r7, #20]
 8005bbc:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8005bc0:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005bc4:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	689a      	ldr	r2, [r3, #8]
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005bd4:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	6899      	ldr	r1, [r3, #8]
 8005bdc:	68bb      	ldr	r3, [r7, #8]
 8005bde:	68da      	ldr	r2, [r3, #12]
 8005be0:	68bb      	ldr	r3, [r7, #8]
 8005be2:	691b      	ldr	r3, [r3, #16]
 8005be4:	431a      	orrs	r2, r3
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	430a      	orrs	r2, r1
 8005bec:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005bee:	68f8      	ldr	r0, [r7, #12]
 8005bf0:	f000 f9a0 	bl	8005f34 <RTC_ExitInitMode>
 8005bf4:	4603      	mov	r3, r0
 8005bf6:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	22ff      	movs	r2, #255	; 0xff
 8005bfe:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8005c00:	7cfb      	ldrb	r3, [r7, #19]
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d103      	bne.n	8005c0e <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	2201      	movs	r2, #1
 8005c0a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	2200      	movs	r2, #0
 8005c12:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8005c16:	7cfb      	ldrb	r3, [r7, #19]
}
 8005c18:	4618      	mov	r0, r3
 8005c1a:	371c      	adds	r7, #28
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	bd90      	pop	{r4, r7, pc}

08005c20 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005c20:	b580      	push	{r7, lr}
 8005c22:	b086      	sub	sp, #24
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	60f8      	str	r0, [r7, #12]
 8005c28:	60b9      	str	r1, [r7, #8]
 8005c2a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005c32:	68bb      	ldr	r3, [r7, #8]
 8005c34:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	691b      	ldr	r3, [r3, #16]
 8005c3c:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8005c40:	68bb      	ldr	r3, [r7, #8]
 8005c42:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8005c4e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005c52:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8005c54:	697b      	ldr	r3, [r7, #20]
 8005c56:	0c1b      	lsrs	r3, r3, #16
 8005c58:	b2db      	uxtb	r3, r3
 8005c5a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005c5e:	b2da      	uxtb	r2, r3
 8005c60:	68bb      	ldr	r3, [r7, #8]
 8005c62:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8005c64:	697b      	ldr	r3, [r7, #20]
 8005c66:	0a1b      	lsrs	r3, r3, #8
 8005c68:	b2db      	uxtb	r3, r3
 8005c6a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005c6e:	b2da      	uxtb	r2, r3
 8005c70:	68bb      	ldr	r3, [r7, #8]
 8005c72:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8005c74:	697b      	ldr	r3, [r7, #20]
 8005c76:	b2db      	uxtb	r3, r3
 8005c78:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005c7c:	b2da      	uxtb	r2, r3
 8005c7e:	68bb      	ldr	r3, [r7, #8]
 8005c80:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8005c82:	697b      	ldr	r3, [r7, #20]
 8005c84:	0d9b      	lsrs	r3, r3, #22
 8005c86:	b2db      	uxtb	r3, r3
 8005c88:	f003 0301 	and.w	r3, r3, #1
 8005c8c:	b2da      	uxtb	r2, r3
 8005c8e:	68bb      	ldr	r3, [r7, #8]
 8005c90:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d11a      	bne.n	8005cce <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8005c98:	68bb      	ldr	r3, [r7, #8]
 8005c9a:	781b      	ldrb	r3, [r3, #0]
 8005c9c:	4618      	mov	r0, r3
 8005c9e:	f000 f9a7 	bl	8005ff0 <RTC_Bcd2ToByte>
 8005ca2:	4603      	mov	r3, r0
 8005ca4:	461a      	mov	r2, r3
 8005ca6:	68bb      	ldr	r3, [r7, #8]
 8005ca8:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8005caa:	68bb      	ldr	r3, [r7, #8]
 8005cac:	785b      	ldrb	r3, [r3, #1]
 8005cae:	4618      	mov	r0, r3
 8005cb0:	f000 f99e 	bl	8005ff0 <RTC_Bcd2ToByte>
 8005cb4:	4603      	mov	r3, r0
 8005cb6:	461a      	mov	r2, r3
 8005cb8:	68bb      	ldr	r3, [r7, #8]
 8005cba:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8005cbc:	68bb      	ldr	r3, [r7, #8]
 8005cbe:	789b      	ldrb	r3, [r3, #2]
 8005cc0:	4618      	mov	r0, r3
 8005cc2:	f000 f995 	bl	8005ff0 <RTC_Bcd2ToByte>
 8005cc6:	4603      	mov	r3, r0
 8005cc8:	461a      	mov	r2, r3
 8005cca:	68bb      	ldr	r3, [r7, #8]
 8005ccc:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8005cce:	2300      	movs	r3, #0
}
 8005cd0:	4618      	mov	r0, r3
 8005cd2:	3718      	adds	r7, #24
 8005cd4:	46bd      	mov	sp, r7
 8005cd6:	bd80      	pop	{r7, pc}

08005cd8 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005cd8:	b590      	push	{r4, r7, lr}
 8005cda:	b087      	sub	sp, #28
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	60f8      	str	r0, [r7, #12]
 8005ce0:	60b9      	str	r1, [r7, #8]
 8005ce2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005cea:	2b01      	cmp	r3, #1
 8005cec:	d101      	bne.n	8005cf2 <HAL_RTC_SetDate+0x1a>
 8005cee:	2302      	movs	r3, #2
 8005cf0:	e075      	b.n	8005dde <HAL_RTC_SetDate+0x106>
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	2201      	movs	r2, #1
 8005cf6:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	2202      	movs	r2, #2
 8005cfe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d10e      	bne.n	8005d26 <HAL_RTC_SetDate+0x4e>
 8005d08:	68bb      	ldr	r3, [r7, #8]
 8005d0a:	785b      	ldrb	r3, [r3, #1]
 8005d0c:	f003 0310 	and.w	r3, r3, #16
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d008      	beq.n	8005d26 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8005d14:	68bb      	ldr	r3, [r7, #8]
 8005d16:	785b      	ldrb	r3, [r3, #1]
 8005d18:	f023 0310 	bic.w	r3, r3, #16
 8005d1c:	b2db      	uxtb	r3, r3
 8005d1e:	330a      	adds	r3, #10
 8005d20:	b2da      	uxtb	r2, r3
 8005d22:	68bb      	ldr	r3, [r7, #8]
 8005d24:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d11c      	bne.n	8005d66 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8005d2c:	68bb      	ldr	r3, [r7, #8]
 8005d2e:	78db      	ldrb	r3, [r3, #3]
 8005d30:	4618      	mov	r0, r3
 8005d32:	f000 f93d 	bl	8005fb0 <RTC_ByteToBcd2>
 8005d36:	4603      	mov	r3, r0
 8005d38:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005d3a:	68bb      	ldr	r3, [r7, #8]
 8005d3c:	785b      	ldrb	r3, [r3, #1]
 8005d3e:	4618      	mov	r0, r3
 8005d40:	f000 f936 	bl	8005fb0 <RTC_ByteToBcd2>
 8005d44:	4603      	mov	r3, r0
 8005d46:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8005d48:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8005d4a:	68bb      	ldr	r3, [r7, #8]
 8005d4c:	789b      	ldrb	r3, [r3, #2]
 8005d4e:	4618      	mov	r0, r3
 8005d50:	f000 f92e 	bl	8005fb0 <RTC_ByteToBcd2>
 8005d54:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005d56:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8005d5a:	68bb      	ldr	r3, [r7, #8]
 8005d5c:	781b      	ldrb	r3, [r3, #0]
 8005d5e:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8005d60:	4313      	orrs	r3, r2
 8005d62:	617b      	str	r3, [r7, #20]
 8005d64:	e00e      	b.n	8005d84 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8005d66:	68bb      	ldr	r3, [r7, #8]
 8005d68:	78db      	ldrb	r3, [r3, #3]
 8005d6a:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8005d6c:	68bb      	ldr	r3, [r7, #8]
 8005d6e:	785b      	ldrb	r3, [r3, #1]
 8005d70:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8005d72:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8005d74:	68ba      	ldr	r2, [r7, #8]
 8005d76:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8005d78:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8005d7a:	68bb      	ldr	r3, [r7, #8]
 8005d7c:	781b      	ldrb	r3, [r3, #0]
 8005d7e:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8005d80:	4313      	orrs	r3, r2
 8005d82:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	22ca      	movs	r2, #202	; 0xca
 8005d8a:	625a      	str	r2, [r3, #36]	; 0x24
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	2253      	movs	r2, #83	; 0x53
 8005d92:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005d94:	68f8      	ldr	r0, [r7, #12]
 8005d96:	f000 f899 	bl	8005ecc <RTC_EnterInitMode>
 8005d9a:	4603      	mov	r3, r0
 8005d9c:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8005d9e:	7cfb      	ldrb	r3, [r7, #19]
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d10c      	bne.n	8005dbe <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	681a      	ldr	r2, [r3, #0]
 8005da8:	697b      	ldr	r3, [r7, #20]
 8005daa:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005dae:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005db2:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005db4:	68f8      	ldr	r0, [r7, #12]
 8005db6:	f000 f8bd 	bl	8005f34 <RTC_ExitInitMode>
 8005dba:	4603      	mov	r3, r0
 8005dbc:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	22ff      	movs	r2, #255	; 0xff
 8005dc4:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8005dc6:	7cfb      	ldrb	r3, [r7, #19]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d103      	bne.n	8005dd4 <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	2201      	movs	r2, #1
 8005dd0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	2200      	movs	r2, #0
 8005dd8:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8005ddc:	7cfb      	ldrb	r3, [r7, #19]
}
 8005dde:	4618      	mov	r0, r3
 8005de0:	371c      	adds	r7, #28
 8005de2:	46bd      	mov	sp, r7
 8005de4:	bd90      	pop	{r4, r7, pc}

08005de6 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005de6:	b580      	push	{r7, lr}
 8005de8:	b086      	sub	sp, #24
 8005dea:	af00      	add	r7, sp, #0
 8005dec:	60f8      	str	r0, [r7, #12]
 8005dee:	60b9      	str	r1, [r7, #8]
 8005df0:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	685b      	ldr	r3, [r3, #4]
 8005df8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005dfc:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005e00:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8005e02:	697b      	ldr	r3, [r7, #20]
 8005e04:	0c1b      	lsrs	r3, r3, #16
 8005e06:	b2da      	uxtb	r2, r3
 8005e08:	68bb      	ldr	r3, [r7, #8]
 8005e0a:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8005e0c:	697b      	ldr	r3, [r7, #20]
 8005e0e:	0a1b      	lsrs	r3, r3, #8
 8005e10:	b2db      	uxtb	r3, r3
 8005e12:	f003 031f 	and.w	r3, r3, #31
 8005e16:	b2da      	uxtb	r2, r3
 8005e18:	68bb      	ldr	r3, [r7, #8]
 8005e1a:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8005e1c:	697b      	ldr	r3, [r7, #20]
 8005e1e:	b2db      	uxtb	r3, r3
 8005e20:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005e24:	b2da      	uxtb	r2, r3
 8005e26:	68bb      	ldr	r3, [r7, #8]
 8005e28:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8005e2a:	697b      	ldr	r3, [r7, #20]
 8005e2c:	0b5b      	lsrs	r3, r3, #13
 8005e2e:	b2db      	uxtb	r3, r3
 8005e30:	f003 0307 	and.w	r3, r3, #7
 8005e34:	b2da      	uxtb	r2, r3
 8005e36:	68bb      	ldr	r3, [r7, #8]
 8005e38:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d11a      	bne.n	8005e76 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8005e40:	68bb      	ldr	r3, [r7, #8]
 8005e42:	78db      	ldrb	r3, [r3, #3]
 8005e44:	4618      	mov	r0, r3
 8005e46:	f000 f8d3 	bl	8005ff0 <RTC_Bcd2ToByte>
 8005e4a:	4603      	mov	r3, r0
 8005e4c:	461a      	mov	r2, r3
 8005e4e:	68bb      	ldr	r3, [r7, #8]
 8005e50:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8005e52:	68bb      	ldr	r3, [r7, #8]
 8005e54:	785b      	ldrb	r3, [r3, #1]
 8005e56:	4618      	mov	r0, r3
 8005e58:	f000 f8ca 	bl	8005ff0 <RTC_Bcd2ToByte>
 8005e5c:	4603      	mov	r3, r0
 8005e5e:	461a      	mov	r2, r3
 8005e60:	68bb      	ldr	r3, [r7, #8]
 8005e62:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8005e64:	68bb      	ldr	r3, [r7, #8]
 8005e66:	789b      	ldrb	r3, [r3, #2]
 8005e68:	4618      	mov	r0, r3
 8005e6a:	f000 f8c1 	bl	8005ff0 <RTC_Bcd2ToByte>
 8005e6e:	4603      	mov	r3, r0
 8005e70:	461a      	mov	r2, r3
 8005e72:	68bb      	ldr	r3, [r7, #8]
 8005e74:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8005e76:	2300      	movs	r3, #0
}
 8005e78:	4618      	mov	r0, r3
 8005e7a:	3718      	adds	r7, #24
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	bd80      	pop	{r7, pc}

08005e80 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005e80:	b580      	push	{r7, lr}
 8005e82:	b084      	sub	sp, #16
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	68da      	ldr	r2, [r3, #12]
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005e96:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 8005e98:	f7fc fce0 	bl	800285c <HAL_GetTick>
 8005e9c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005e9e:	e009      	b.n	8005eb4 <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005ea0:	f7fc fcdc 	bl	800285c <HAL_GetTick>
 8005ea4:	4602      	mov	r2, r0
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	1ad3      	subs	r3, r2, r3
 8005eaa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005eae:	d901      	bls.n	8005eb4 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8005eb0:	2303      	movs	r3, #3
 8005eb2:	e007      	b.n	8005ec4 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	68db      	ldr	r3, [r3, #12]
 8005eba:	f003 0320 	and.w	r3, r3, #32
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d0ee      	beq.n	8005ea0 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8005ec2:	2300      	movs	r3, #0
}
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	3710      	adds	r7, #16
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	bd80      	pop	{r7, pc}

08005ecc <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005ecc:	b580      	push	{r7, lr}
 8005ece:	b084      	sub	sp, #16
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005ed4:	2300      	movs	r3, #0
 8005ed6:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	68db      	ldr	r3, [r3, #12]
 8005ede:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d120      	bne.n	8005f28 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	f04f 32ff 	mov.w	r2, #4294967295
 8005eee:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8005ef0:	f7fc fcb4 	bl	800285c <HAL_GetTick>
 8005ef4:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8005ef6:	e00d      	b.n	8005f14 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8005ef8:	f7fc fcb0 	bl	800285c <HAL_GetTick>
 8005efc:	4602      	mov	r2, r0
 8005efe:	68bb      	ldr	r3, [r7, #8]
 8005f00:	1ad3      	subs	r3, r2, r3
 8005f02:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005f06:	d905      	bls.n	8005f14 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8005f08:	2303      	movs	r3, #3
 8005f0a:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	2203      	movs	r2, #3
 8005f10:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	68db      	ldr	r3, [r3, #12]
 8005f1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d102      	bne.n	8005f28 <RTC_EnterInitMode+0x5c>
 8005f22:	7bfb      	ldrb	r3, [r7, #15]
 8005f24:	2b03      	cmp	r3, #3
 8005f26:	d1e7      	bne.n	8005ef8 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8005f28:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	3710      	adds	r7, #16
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	bd80      	pop	{r7, pc}
	...

08005f34 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005f34:	b580      	push	{r7, lr}
 8005f36:	b084      	sub	sp, #16
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005f3c:	2300      	movs	r3, #0
 8005f3e:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8005f40:	4b1a      	ldr	r3, [pc, #104]	; (8005fac <RTC_ExitInitMode+0x78>)
 8005f42:	68db      	ldr	r3, [r3, #12]
 8005f44:	4a19      	ldr	r2, [pc, #100]	; (8005fac <RTC_ExitInitMode+0x78>)
 8005f46:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005f4a:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8005f4c:	4b17      	ldr	r3, [pc, #92]	; (8005fac <RTC_ExitInitMode+0x78>)
 8005f4e:	689b      	ldr	r3, [r3, #8]
 8005f50:	f003 0320 	and.w	r3, r3, #32
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d10c      	bne.n	8005f72 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005f58:	6878      	ldr	r0, [r7, #4]
 8005f5a:	f7ff ff91 	bl	8005e80 <HAL_RTC_WaitForSynchro>
 8005f5e:	4603      	mov	r3, r0
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d01e      	beq.n	8005fa2 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	2203      	movs	r2, #3
 8005f68:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8005f6c:	2303      	movs	r3, #3
 8005f6e:	73fb      	strb	r3, [r7, #15]
 8005f70:	e017      	b.n	8005fa2 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8005f72:	4b0e      	ldr	r3, [pc, #56]	; (8005fac <RTC_ExitInitMode+0x78>)
 8005f74:	689b      	ldr	r3, [r3, #8]
 8005f76:	4a0d      	ldr	r2, [pc, #52]	; (8005fac <RTC_ExitInitMode+0x78>)
 8005f78:	f023 0320 	bic.w	r3, r3, #32
 8005f7c:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005f7e:	6878      	ldr	r0, [r7, #4]
 8005f80:	f7ff ff7e 	bl	8005e80 <HAL_RTC_WaitForSynchro>
 8005f84:	4603      	mov	r3, r0
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d005      	beq.n	8005f96 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	2203      	movs	r2, #3
 8005f8e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8005f92:	2303      	movs	r3, #3
 8005f94:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8005f96:	4b05      	ldr	r3, [pc, #20]	; (8005fac <RTC_ExitInitMode+0x78>)
 8005f98:	689b      	ldr	r3, [r3, #8]
 8005f9a:	4a04      	ldr	r2, [pc, #16]	; (8005fac <RTC_ExitInitMode+0x78>)
 8005f9c:	f043 0320 	orr.w	r3, r3, #32
 8005fa0:	6093      	str	r3, [r2, #8]
  }

  return status;
 8005fa2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fa4:	4618      	mov	r0, r3
 8005fa6:	3710      	adds	r7, #16
 8005fa8:	46bd      	mov	sp, r7
 8005faa:	bd80      	pop	{r7, pc}
 8005fac:	40002800 	.word	0x40002800

08005fb0 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8005fb0:	b480      	push	{r7}
 8005fb2:	b085      	sub	sp, #20
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	4603      	mov	r3, r0
 8005fb8:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8005fba:	2300      	movs	r3, #0
 8005fbc:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 8005fbe:	79fb      	ldrb	r3, [r7, #7]
 8005fc0:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 8005fc2:	e005      	b.n	8005fd0 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	3301      	adds	r3, #1
 8005fc8:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 8005fca:	7afb      	ldrb	r3, [r7, #11]
 8005fcc:	3b0a      	subs	r3, #10
 8005fce:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 8005fd0:	7afb      	ldrb	r3, [r7, #11]
 8005fd2:	2b09      	cmp	r3, #9
 8005fd4:	d8f6      	bhi.n	8005fc4 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	b2db      	uxtb	r3, r3
 8005fda:	011b      	lsls	r3, r3, #4
 8005fdc:	b2da      	uxtb	r2, r3
 8005fde:	7afb      	ldrb	r3, [r7, #11]
 8005fe0:	4313      	orrs	r3, r2
 8005fe2:	b2db      	uxtb	r3, r3
}
 8005fe4:	4618      	mov	r0, r3
 8005fe6:	3714      	adds	r7, #20
 8005fe8:	46bd      	mov	sp, r7
 8005fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fee:	4770      	bx	lr

08005ff0 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8005ff0:	b480      	push	{r7}
 8005ff2:	b085      	sub	sp, #20
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	4603      	mov	r3, r0
 8005ff8:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 8005ffa:	79fb      	ldrb	r3, [r7, #7]
 8005ffc:	091b      	lsrs	r3, r3, #4
 8005ffe:	b2db      	uxtb	r3, r3
 8006000:	461a      	mov	r2, r3
 8006002:	0092      	lsls	r2, r2, #2
 8006004:	4413      	add	r3, r2
 8006006:	005b      	lsls	r3, r3, #1
 8006008:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 800600a:	79fb      	ldrb	r3, [r7, #7]
 800600c:	f003 030f 	and.w	r3, r3, #15
 8006010:	b2da      	uxtb	r2, r3
 8006012:	7bfb      	ldrb	r3, [r7, #15]
 8006014:	4413      	add	r3, r2
 8006016:	b2db      	uxtb	r3, r3
}
 8006018:	4618      	mov	r0, r3
 800601a:	3714      	adds	r7, #20
 800601c:	46bd      	mov	sp, r7
 800601e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006022:	4770      	bx	lr

08006024 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006024:	b580      	push	{r7, lr}
 8006026:	b084      	sub	sp, #16
 8006028:	af00      	add	r7, sp, #0
 800602a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	2b00      	cmp	r3, #0
 8006030:	d101      	bne.n	8006036 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006032:	2301      	movs	r3, #1
 8006034:	e095      	b.n	8006162 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800603a:	2b00      	cmp	r3, #0
 800603c:	d108      	bne.n	8006050 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	685b      	ldr	r3, [r3, #4]
 8006042:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006046:	d009      	beq.n	800605c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2200      	movs	r2, #0
 800604c:	61da      	str	r2, [r3, #28]
 800604e:	e005      	b.n	800605c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2200      	movs	r2, #0
 8006054:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	2200      	movs	r2, #0
 800605a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2200      	movs	r2, #0
 8006060:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006068:	b2db      	uxtb	r3, r3
 800606a:	2b00      	cmp	r3, #0
 800606c:	d106      	bne.n	800607c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	2200      	movs	r2, #0
 8006072:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006076:	6878      	ldr	r0, [r7, #4]
 8006078:	f7fc f81e 	bl	80020b8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	2202      	movs	r2, #2
 8006080:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	681a      	ldr	r2, [r3, #0]
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006092:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	68db      	ldr	r3, [r3, #12]
 8006098:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800609c:	d902      	bls.n	80060a4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800609e:	2300      	movs	r3, #0
 80060a0:	60fb      	str	r3, [r7, #12]
 80060a2:	e002      	b.n	80060aa <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80060a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80060a8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	68db      	ldr	r3, [r3, #12]
 80060ae:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80060b2:	d007      	beq.n	80060c4 <HAL_SPI_Init+0xa0>
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	68db      	ldr	r3, [r3, #12]
 80060b8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80060bc:	d002      	beq.n	80060c4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	2200      	movs	r2, #0
 80060c2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	685b      	ldr	r3, [r3, #4]
 80060c8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	689b      	ldr	r3, [r3, #8]
 80060d0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80060d4:	431a      	orrs	r2, r3
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	691b      	ldr	r3, [r3, #16]
 80060da:	f003 0302 	and.w	r3, r3, #2
 80060de:	431a      	orrs	r2, r3
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	695b      	ldr	r3, [r3, #20]
 80060e4:	f003 0301 	and.w	r3, r3, #1
 80060e8:	431a      	orrs	r2, r3
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	699b      	ldr	r3, [r3, #24]
 80060ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80060f2:	431a      	orrs	r2, r3
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	69db      	ldr	r3, [r3, #28]
 80060f8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80060fc:	431a      	orrs	r2, r3
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	6a1b      	ldr	r3, [r3, #32]
 8006102:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006106:	ea42 0103 	orr.w	r1, r2, r3
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800610e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	430a      	orrs	r2, r1
 8006118:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	699b      	ldr	r3, [r3, #24]
 800611e:	0c1b      	lsrs	r3, r3, #16
 8006120:	f003 0204 	and.w	r2, r3, #4
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006128:	f003 0310 	and.w	r3, r3, #16
 800612c:	431a      	orrs	r2, r3
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006132:	f003 0308 	and.w	r3, r3, #8
 8006136:	431a      	orrs	r2, r3
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	68db      	ldr	r3, [r3, #12]
 800613c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8006140:	ea42 0103 	orr.w	r1, r2, r3
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	430a      	orrs	r2, r1
 8006150:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	2200      	movs	r2, #0
 8006156:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	2201      	movs	r2, #1
 800615c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8006160:	2300      	movs	r3, #0
}
 8006162:	4618      	mov	r0, r3
 8006164:	3710      	adds	r7, #16
 8006166:	46bd      	mov	sp, r7
 8006168:	bd80      	pop	{r7, pc}

0800616a <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 800616a:	b580      	push	{r7, lr}
 800616c:	b082      	sub	sp, #8
 800616e:	af00      	add	r7, sp, #0
 8006170:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	2b00      	cmp	r3, #0
 8006176:	d101      	bne.n	800617c <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8006178:	2301      	movs	r3, #1
 800617a:	e01a      	b.n	80061b2 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	2202      	movs	r2, #2
 8006180:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	681a      	ldr	r2, [r3, #0]
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006192:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8006194:	6878      	ldr	r0, [r7, #4]
 8006196:	f7fb ffdb 	bl	8002150 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	2200      	movs	r2, #0
 800619e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_RESET;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	2200      	movs	r2, #0
 80061a4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	2200      	movs	r2, #0
 80061ac:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  return HAL_OK;
 80061b0:	2300      	movs	r3, #0
}
 80061b2:	4618      	mov	r0, r3
 80061b4:	3708      	adds	r7, #8
 80061b6:	46bd      	mov	sp, r7
 80061b8:	bd80      	pop	{r7, pc}

080061ba <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80061ba:	b580      	push	{r7, lr}
 80061bc:	b088      	sub	sp, #32
 80061be:	af02      	add	r7, sp, #8
 80061c0:	60f8      	str	r0, [r7, #12]
 80061c2:	60b9      	str	r1, [r7, #8]
 80061c4:	603b      	str	r3, [r7, #0]
 80061c6:	4613      	mov	r3, r2
 80061c8:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80061ca:	2300      	movs	r3, #0
 80061cc:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	685b      	ldr	r3, [r3, #4]
 80061d2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80061d6:	d112      	bne.n	80061fe <HAL_SPI_Receive+0x44>
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	689b      	ldr	r3, [r3, #8]
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d10e      	bne.n	80061fe <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	2204      	movs	r2, #4
 80061e4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80061e8:	88fa      	ldrh	r2, [r7, #6]
 80061ea:	683b      	ldr	r3, [r7, #0]
 80061ec:	9300      	str	r3, [sp, #0]
 80061ee:	4613      	mov	r3, r2
 80061f0:	68ba      	ldr	r2, [r7, #8]
 80061f2:	68b9      	ldr	r1, [r7, #8]
 80061f4:	68f8      	ldr	r0, [r7, #12]
 80061f6:	f000 f910 	bl	800641a <HAL_SPI_TransmitReceive>
 80061fa:	4603      	mov	r3, r0
 80061fc:	e109      	b.n	8006412 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006204:	2b01      	cmp	r3, #1
 8006206:	d101      	bne.n	800620c <HAL_SPI_Receive+0x52>
 8006208:	2302      	movs	r3, #2
 800620a:	e102      	b.n	8006412 <HAL_SPI_Receive+0x258>
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	2201      	movs	r2, #1
 8006210:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006214:	f7fc fb22 	bl	800285c <HAL_GetTick>
 8006218:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006220:	b2db      	uxtb	r3, r3
 8006222:	2b01      	cmp	r3, #1
 8006224:	d002      	beq.n	800622c <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8006226:	2302      	movs	r3, #2
 8006228:	75fb      	strb	r3, [r7, #23]
    goto error;
 800622a:	e0e9      	b.n	8006400 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 800622c:	68bb      	ldr	r3, [r7, #8]
 800622e:	2b00      	cmp	r3, #0
 8006230:	d002      	beq.n	8006238 <HAL_SPI_Receive+0x7e>
 8006232:	88fb      	ldrh	r3, [r7, #6]
 8006234:	2b00      	cmp	r3, #0
 8006236:	d102      	bne.n	800623e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8006238:	2301      	movs	r3, #1
 800623a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800623c:	e0e0      	b.n	8006400 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	2204      	movs	r2, #4
 8006242:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	2200      	movs	r2, #0
 800624a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	68ba      	ldr	r2, [r7, #8]
 8006250:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	88fa      	ldrh	r2, [r7, #6]
 8006256:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	88fa      	ldrh	r2, [r7, #6]
 800625e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	2200      	movs	r2, #0
 8006266:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	2200      	movs	r2, #0
 800626c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	2200      	movs	r2, #0
 8006272:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	2200      	movs	r2, #0
 8006278:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	2200      	movs	r2, #0
 800627e:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	68db      	ldr	r3, [r3, #12]
 8006284:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006288:	d908      	bls.n	800629c <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	685a      	ldr	r2, [r3, #4]
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006298:	605a      	str	r2, [r3, #4]
 800629a:	e007      	b.n	80062ac <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	685a      	ldr	r2, [r3, #4]
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80062aa:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	689b      	ldr	r3, [r3, #8]
 80062b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80062b4:	d10f      	bne.n	80062d6 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	681a      	ldr	r2, [r3, #0]
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80062c4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	681a      	ldr	r2, [r3, #0]
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80062d4:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062e0:	2b40      	cmp	r3, #64	; 0x40
 80062e2:	d007      	beq.n	80062f4 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	681a      	ldr	r2, [r3, #0]
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80062f2:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	68db      	ldr	r3, [r3, #12]
 80062f8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80062fc:	d867      	bhi.n	80063ce <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80062fe:	e030      	b.n	8006362 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	689b      	ldr	r3, [r3, #8]
 8006306:	f003 0301 	and.w	r3, r3, #1
 800630a:	2b01      	cmp	r3, #1
 800630c:	d117      	bne.n	800633e <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	f103 020c 	add.w	r2, r3, #12
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800631a:	7812      	ldrb	r2, [r2, #0]
 800631c:	b2d2      	uxtb	r2, r2
 800631e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006324:	1c5a      	adds	r2, r3, #1
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006330:	b29b      	uxth	r3, r3
 8006332:	3b01      	subs	r3, #1
 8006334:	b29a      	uxth	r2, r3
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800633c:	e011      	b.n	8006362 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800633e:	f7fc fa8d 	bl	800285c <HAL_GetTick>
 8006342:	4602      	mov	r2, r0
 8006344:	693b      	ldr	r3, [r7, #16]
 8006346:	1ad3      	subs	r3, r2, r3
 8006348:	683a      	ldr	r2, [r7, #0]
 800634a:	429a      	cmp	r2, r3
 800634c:	d803      	bhi.n	8006356 <HAL_SPI_Receive+0x19c>
 800634e:	683b      	ldr	r3, [r7, #0]
 8006350:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006354:	d102      	bne.n	800635c <HAL_SPI_Receive+0x1a2>
 8006356:	683b      	ldr	r3, [r7, #0]
 8006358:	2b00      	cmp	r3, #0
 800635a:	d102      	bne.n	8006362 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 800635c:	2303      	movs	r3, #3
 800635e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006360:	e04e      	b.n	8006400 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006368:	b29b      	uxth	r3, r3
 800636a:	2b00      	cmp	r3, #0
 800636c:	d1c8      	bne.n	8006300 <HAL_SPI_Receive+0x146>
 800636e:	e034      	b.n	80063da <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	689b      	ldr	r3, [r3, #8]
 8006376:	f003 0301 	and.w	r3, r3, #1
 800637a:	2b01      	cmp	r3, #1
 800637c:	d115      	bne.n	80063aa <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	68da      	ldr	r2, [r3, #12]
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006388:	b292      	uxth	r2, r2
 800638a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006390:	1c9a      	adds	r2, r3, #2
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800639c:	b29b      	uxth	r3, r3
 800639e:	3b01      	subs	r3, #1
 80063a0:	b29a      	uxth	r2, r3
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80063a8:	e011      	b.n	80063ce <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80063aa:	f7fc fa57 	bl	800285c <HAL_GetTick>
 80063ae:	4602      	mov	r2, r0
 80063b0:	693b      	ldr	r3, [r7, #16]
 80063b2:	1ad3      	subs	r3, r2, r3
 80063b4:	683a      	ldr	r2, [r7, #0]
 80063b6:	429a      	cmp	r2, r3
 80063b8:	d803      	bhi.n	80063c2 <HAL_SPI_Receive+0x208>
 80063ba:	683b      	ldr	r3, [r7, #0]
 80063bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063c0:	d102      	bne.n	80063c8 <HAL_SPI_Receive+0x20e>
 80063c2:	683b      	ldr	r3, [r7, #0]
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d102      	bne.n	80063ce <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 80063c8:	2303      	movs	r3, #3
 80063ca:	75fb      	strb	r3, [r7, #23]
          goto error;
 80063cc:	e018      	b.n	8006400 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80063d4:	b29b      	uxth	r3, r3
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d1ca      	bne.n	8006370 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80063da:	693a      	ldr	r2, [r7, #16]
 80063dc:	6839      	ldr	r1, [r7, #0]
 80063de:	68f8      	ldr	r0, [r7, #12]
 80063e0:	f000 fffe 	bl	80073e0 <SPI_EndRxTransaction>
 80063e4:	4603      	mov	r3, r0
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d002      	beq.n	80063f0 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	2220      	movs	r2, #32
 80063ee:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d002      	beq.n	80063fe <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 80063f8:	2301      	movs	r3, #1
 80063fa:	75fb      	strb	r3, [r7, #23]
 80063fc:	e000      	b.n	8006400 <HAL_SPI_Receive+0x246>
  }

error :
 80063fe:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	2201      	movs	r2, #1
 8006404:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	2200      	movs	r2, #0
 800640c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006410:	7dfb      	ldrb	r3, [r7, #23]
}
 8006412:	4618      	mov	r0, r3
 8006414:	3718      	adds	r7, #24
 8006416:	46bd      	mov	sp, r7
 8006418:	bd80      	pop	{r7, pc}

0800641a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800641a:	b580      	push	{r7, lr}
 800641c:	b08a      	sub	sp, #40	; 0x28
 800641e:	af00      	add	r7, sp, #0
 8006420:	60f8      	str	r0, [r7, #12]
 8006422:	60b9      	str	r1, [r7, #8]
 8006424:	607a      	str	r2, [r7, #4]
 8006426:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006428:	2301      	movs	r3, #1
 800642a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800642c:	2300      	movs	r3, #0
 800642e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006438:	2b01      	cmp	r3, #1
 800643a:	d101      	bne.n	8006440 <HAL_SPI_TransmitReceive+0x26>
 800643c:	2302      	movs	r3, #2
 800643e:	e1fb      	b.n	8006838 <HAL_SPI_TransmitReceive+0x41e>
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	2201      	movs	r2, #1
 8006444:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006448:	f7fc fa08 	bl	800285c <HAL_GetTick>
 800644c:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006454:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	685b      	ldr	r3, [r3, #4]
 800645a:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800645c:	887b      	ldrh	r3, [r7, #2]
 800645e:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8006460:	887b      	ldrh	r3, [r7, #2]
 8006462:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006464:	7efb      	ldrb	r3, [r7, #27]
 8006466:	2b01      	cmp	r3, #1
 8006468:	d00e      	beq.n	8006488 <HAL_SPI_TransmitReceive+0x6e>
 800646a:	697b      	ldr	r3, [r7, #20]
 800646c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006470:	d106      	bne.n	8006480 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	689b      	ldr	r3, [r3, #8]
 8006476:	2b00      	cmp	r3, #0
 8006478:	d102      	bne.n	8006480 <HAL_SPI_TransmitReceive+0x66>
 800647a:	7efb      	ldrb	r3, [r7, #27]
 800647c:	2b04      	cmp	r3, #4
 800647e:	d003      	beq.n	8006488 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8006480:	2302      	movs	r3, #2
 8006482:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8006486:	e1cd      	b.n	8006824 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006488:	68bb      	ldr	r3, [r7, #8]
 800648a:	2b00      	cmp	r3, #0
 800648c:	d005      	beq.n	800649a <HAL_SPI_TransmitReceive+0x80>
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	2b00      	cmp	r3, #0
 8006492:	d002      	beq.n	800649a <HAL_SPI_TransmitReceive+0x80>
 8006494:	887b      	ldrh	r3, [r7, #2]
 8006496:	2b00      	cmp	r3, #0
 8006498:	d103      	bne.n	80064a2 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800649a:	2301      	movs	r3, #1
 800649c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80064a0:	e1c0      	b.n	8006824 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80064a8:	b2db      	uxtb	r3, r3
 80064aa:	2b04      	cmp	r3, #4
 80064ac:	d003      	beq.n	80064b6 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	2205      	movs	r2, #5
 80064b2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	2200      	movs	r2, #0
 80064ba:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	687a      	ldr	r2, [r7, #4]
 80064c0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	887a      	ldrh	r2, [r7, #2]
 80064c6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	887a      	ldrh	r2, [r7, #2]
 80064ce:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	68ba      	ldr	r2, [r7, #8]
 80064d6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	887a      	ldrh	r2, [r7, #2]
 80064dc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	887a      	ldrh	r2, [r7, #2]
 80064e2:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	2200      	movs	r2, #0
 80064e8:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	2200      	movs	r2, #0
 80064ee:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	68db      	ldr	r3, [r3, #12]
 80064f4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80064f8:	d802      	bhi.n	8006500 <HAL_SPI_TransmitReceive+0xe6>
 80064fa:	8a3b      	ldrh	r3, [r7, #16]
 80064fc:	2b01      	cmp	r3, #1
 80064fe:	d908      	bls.n	8006512 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	685a      	ldr	r2, [r3, #4]
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800650e:	605a      	str	r2, [r3, #4]
 8006510:	e007      	b.n	8006522 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	685a      	ldr	r2, [r3, #4]
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006520:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800652c:	2b40      	cmp	r3, #64	; 0x40
 800652e:	d007      	beq.n	8006540 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	681a      	ldr	r2, [r3, #0]
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800653e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	68db      	ldr	r3, [r3, #12]
 8006544:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006548:	d97c      	bls.n	8006644 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	685b      	ldr	r3, [r3, #4]
 800654e:	2b00      	cmp	r3, #0
 8006550:	d002      	beq.n	8006558 <HAL_SPI_TransmitReceive+0x13e>
 8006552:	8a7b      	ldrh	r3, [r7, #18]
 8006554:	2b01      	cmp	r3, #1
 8006556:	d169      	bne.n	800662c <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800655c:	881a      	ldrh	r2, [r3, #0]
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006568:	1c9a      	adds	r2, r3, #2
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006572:	b29b      	uxth	r3, r3
 8006574:	3b01      	subs	r3, #1
 8006576:	b29a      	uxth	r2, r3
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800657c:	e056      	b.n	800662c <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	689b      	ldr	r3, [r3, #8]
 8006584:	f003 0302 	and.w	r3, r3, #2
 8006588:	2b02      	cmp	r3, #2
 800658a:	d11b      	bne.n	80065c4 <HAL_SPI_TransmitReceive+0x1aa>
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006590:	b29b      	uxth	r3, r3
 8006592:	2b00      	cmp	r3, #0
 8006594:	d016      	beq.n	80065c4 <HAL_SPI_TransmitReceive+0x1aa>
 8006596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006598:	2b01      	cmp	r3, #1
 800659a:	d113      	bne.n	80065c4 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065a0:	881a      	ldrh	r2, [r3, #0]
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065ac:	1c9a      	adds	r2, r3, #2
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80065b6:	b29b      	uxth	r3, r3
 80065b8:	3b01      	subs	r3, #1
 80065ba:	b29a      	uxth	r2, r3
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80065c0:	2300      	movs	r3, #0
 80065c2:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	689b      	ldr	r3, [r3, #8]
 80065ca:	f003 0301 	and.w	r3, r3, #1
 80065ce:	2b01      	cmp	r3, #1
 80065d0:	d11c      	bne.n	800660c <HAL_SPI_TransmitReceive+0x1f2>
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80065d8:	b29b      	uxth	r3, r3
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d016      	beq.n	800660c <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	68da      	ldr	r2, [r3, #12]
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065e8:	b292      	uxth	r2, r2
 80065ea:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065f0:	1c9a      	adds	r2, r3, #2
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80065fc:	b29b      	uxth	r3, r3
 80065fe:	3b01      	subs	r3, #1
 8006600:	b29a      	uxth	r2, r3
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006608:	2301      	movs	r3, #1
 800660a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800660c:	f7fc f926 	bl	800285c <HAL_GetTick>
 8006610:	4602      	mov	r2, r0
 8006612:	69fb      	ldr	r3, [r7, #28]
 8006614:	1ad3      	subs	r3, r2, r3
 8006616:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006618:	429a      	cmp	r2, r3
 800661a:	d807      	bhi.n	800662c <HAL_SPI_TransmitReceive+0x212>
 800661c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800661e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006622:	d003      	beq.n	800662c <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8006624:	2303      	movs	r3, #3
 8006626:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800662a:	e0fb      	b.n	8006824 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006630:	b29b      	uxth	r3, r3
 8006632:	2b00      	cmp	r3, #0
 8006634:	d1a3      	bne.n	800657e <HAL_SPI_TransmitReceive+0x164>
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800663c:	b29b      	uxth	r3, r3
 800663e:	2b00      	cmp	r3, #0
 8006640:	d19d      	bne.n	800657e <HAL_SPI_TransmitReceive+0x164>
 8006642:	e0df      	b.n	8006804 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	685b      	ldr	r3, [r3, #4]
 8006648:	2b00      	cmp	r3, #0
 800664a:	d003      	beq.n	8006654 <HAL_SPI_TransmitReceive+0x23a>
 800664c:	8a7b      	ldrh	r3, [r7, #18]
 800664e:	2b01      	cmp	r3, #1
 8006650:	f040 80cb 	bne.w	80067ea <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006658:	b29b      	uxth	r3, r3
 800665a:	2b01      	cmp	r3, #1
 800665c:	d912      	bls.n	8006684 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006662:	881a      	ldrh	r2, [r3, #0]
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800666e:	1c9a      	adds	r2, r3, #2
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006678:	b29b      	uxth	r3, r3
 800667a:	3b02      	subs	r3, #2
 800667c:	b29a      	uxth	r2, r3
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006682:	e0b2      	b.n	80067ea <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	330c      	adds	r3, #12
 800668e:	7812      	ldrb	r2, [r2, #0]
 8006690:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006696:	1c5a      	adds	r2, r3, #1
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80066a0:	b29b      	uxth	r3, r3
 80066a2:	3b01      	subs	r3, #1
 80066a4:	b29a      	uxth	r2, r3
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80066aa:	e09e      	b.n	80067ea <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	689b      	ldr	r3, [r3, #8]
 80066b2:	f003 0302 	and.w	r3, r3, #2
 80066b6:	2b02      	cmp	r3, #2
 80066b8:	d134      	bne.n	8006724 <HAL_SPI_TransmitReceive+0x30a>
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80066be:	b29b      	uxth	r3, r3
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d02f      	beq.n	8006724 <HAL_SPI_TransmitReceive+0x30a>
 80066c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066c6:	2b01      	cmp	r3, #1
 80066c8:	d12c      	bne.n	8006724 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80066ce:	b29b      	uxth	r3, r3
 80066d0:	2b01      	cmp	r3, #1
 80066d2:	d912      	bls.n	80066fa <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066d8:	881a      	ldrh	r2, [r3, #0]
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066e4:	1c9a      	adds	r2, r3, #2
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80066ee:	b29b      	uxth	r3, r3
 80066f0:	3b02      	subs	r3, #2
 80066f2:	b29a      	uxth	r2, r3
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80066f8:	e012      	b.n	8006720 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	330c      	adds	r3, #12
 8006704:	7812      	ldrb	r2, [r2, #0]
 8006706:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800670c:	1c5a      	adds	r2, r3, #1
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006716:	b29b      	uxth	r3, r3
 8006718:	3b01      	subs	r3, #1
 800671a:	b29a      	uxth	r2, r3
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006720:	2300      	movs	r3, #0
 8006722:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	689b      	ldr	r3, [r3, #8]
 800672a:	f003 0301 	and.w	r3, r3, #1
 800672e:	2b01      	cmp	r3, #1
 8006730:	d148      	bne.n	80067c4 <HAL_SPI_TransmitReceive+0x3aa>
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006738:	b29b      	uxth	r3, r3
 800673a:	2b00      	cmp	r3, #0
 800673c:	d042      	beq.n	80067c4 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006744:	b29b      	uxth	r3, r3
 8006746:	2b01      	cmp	r3, #1
 8006748:	d923      	bls.n	8006792 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	68da      	ldr	r2, [r3, #12]
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006754:	b292      	uxth	r2, r2
 8006756:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800675c:	1c9a      	adds	r2, r3, #2
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006768:	b29b      	uxth	r3, r3
 800676a:	3b02      	subs	r3, #2
 800676c:	b29a      	uxth	r2, r3
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800677a:	b29b      	uxth	r3, r3
 800677c:	2b01      	cmp	r3, #1
 800677e:	d81f      	bhi.n	80067c0 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	685a      	ldr	r2, [r3, #4]
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800678e:	605a      	str	r2, [r3, #4]
 8006790:	e016      	b.n	80067c0 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	f103 020c 	add.w	r2, r3, #12
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800679e:	7812      	ldrb	r2, [r2, #0]
 80067a0:	b2d2      	uxtb	r2, r2
 80067a2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067a8:	1c5a      	adds	r2, r3, #1
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80067b4:	b29b      	uxth	r3, r3
 80067b6:	3b01      	subs	r3, #1
 80067b8:	b29a      	uxth	r2, r3
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80067c0:	2301      	movs	r3, #1
 80067c2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80067c4:	f7fc f84a 	bl	800285c <HAL_GetTick>
 80067c8:	4602      	mov	r2, r0
 80067ca:	69fb      	ldr	r3, [r7, #28]
 80067cc:	1ad3      	subs	r3, r2, r3
 80067ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80067d0:	429a      	cmp	r2, r3
 80067d2:	d803      	bhi.n	80067dc <HAL_SPI_TransmitReceive+0x3c2>
 80067d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067da:	d102      	bne.n	80067e2 <HAL_SPI_TransmitReceive+0x3c8>
 80067dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d103      	bne.n	80067ea <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 80067e2:	2303      	movs	r3, #3
 80067e4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80067e8:	e01c      	b.n	8006824 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80067ee:	b29b      	uxth	r3, r3
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	f47f af5b 	bne.w	80066ac <HAL_SPI_TransmitReceive+0x292>
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80067fc:	b29b      	uxth	r3, r3
 80067fe:	2b00      	cmp	r3, #0
 8006800:	f47f af54 	bne.w	80066ac <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006804:	69fa      	ldr	r2, [r7, #28]
 8006806:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006808:	68f8      	ldr	r0, [r7, #12]
 800680a:	f000 fe41 	bl	8007490 <SPI_EndRxTxTransaction>
 800680e:	4603      	mov	r3, r0
 8006810:	2b00      	cmp	r3, #0
 8006812:	d006      	beq.n	8006822 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8006814:	2301      	movs	r3, #1
 8006816:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	2220      	movs	r2, #32
 800681e:	661a      	str	r2, [r3, #96]	; 0x60
 8006820:	e000      	b.n	8006824 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8006822:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	2201      	movs	r2, #1
 8006828:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	2200      	movs	r2, #0
 8006830:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006834:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8006838:	4618      	mov	r0, r3
 800683a:	3728      	adds	r7, #40	; 0x28
 800683c:	46bd      	mov	sp, r7
 800683e:	bd80      	pop	{r7, pc}

08006840 <HAL_SPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8006840:	b480      	push	{r7}
 8006842:	b087      	sub	sp, #28
 8006844:	af00      	add	r7, sp, #0
 8006846:	60f8      	str	r0, [r7, #12]
 8006848:	60b9      	str	r1, [r7, #8]
 800684a:	4613      	mov	r3, r2
 800684c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800684e:	2300      	movs	r3, #0
 8006850:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006858:	2b01      	cmp	r3, #1
 800685a:	d101      	bne.n	8006860 <HAL_SPI_Transmit_IT+0x20>
 800685c:	2302      	movs	r3, #2
 800685e:	e072      	b.n	8006946 <HAL_SPI_Transmit_IT+0x106>
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	2201      	movs	r2, #1
 8006864:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if ((pData == NULL) || (Size == 0U))
 8006868:	68bb      	ldr	r3, [r7, #8]
 800686a:	2b00      	cmp	r3, #0
 800686c:	d002      	beq.n	8006874 <HAL_SPI_Transmit_IT+0x34>
 800686e:	88fb      	ldrh	r3, [r7, #6]
 8006870:	2b00      	cmp	r3, #0
 8006872:	d102      	bne.n	800687a <HAL_SPI_Transmit_IT+0x3a>
  {
    errorcode = HAL_ERROR;
 8006874:	2301      	movs	r3, #1
 8006876:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006878:	e060      	b.n	800693c <HAL_SPI_Transmit_IT+0xfc>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006880:	b2db      	uxtb	r3, r3
 8006882:	2b01      	cmp	r3, #1
 8006884:	d002      	beq.n	800688c <HAL_SPI_Transmit_IT+0x4c>
  {
    errorcode = HAL_BUSY;
 8006886:	2302      	movs	r3, #2
 8006888:	75fb      	strb	r3, [r7, #23]
    goto error;
 800688a:	e057      	b.n	800693c <HAL_SPI_Transmit_IT+0xfc>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	2203      	movs	r2, #3
 8006890:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	2200      	movs	r2, #0
 8006898:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	68ba      	ldr	r2, [r7, #8]
 800689e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	88fa      	ldrh	r2, [r7, #6]
 80068a4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	88fa      	ldrh	r2, [r7, #6]
 80068aa:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	2200      	movs	r2, #0
 80068b0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	2200      	movs	r2, #0
 80068b6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	2200      	movs	r2, #0
 80068be:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxISR       = NULL;
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	2200      	movs	r2, #0
 80068c6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	68db      	ldr	r3, [r3, #12]
 80068cc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80068d0:	d903      	bls.n	80068da <HAL_SPI_Transmit_IT+0x9a>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	4a1f      	ldr	r2, [pc, #124]	; (8006954 <HAL_SPI_Transmit_IT+0x114>)
 80068d6:	651a      	str	r2, [r3, #80]	; 0x50
 80068d8:	e002      	b.n	80068e0 <HAL_SPI_Transmit_IT+0xa0>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	4a1e      	ldr	r2, [pc, #120]	; (8006958 <HAL_SPI_Transmit_IT+0x118>)
 80068de:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	689b      	ldr	r3, [r3, #8]
 80068e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80068e8:	d10f      	bne.n	800690a <HAL_SPI_Transmit_IT+0xca>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	681a      	ldr	r2, [r3, #0]
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80068f8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	681a      	ldr	r2, [r3, #0]
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006908:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	685a      	ldr	r2, [r3, #4]
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
 8006918:	605a      	str	r2, [r3, #4]


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006924:	2b40      	cmp	r3, #64	; 0x40
 8006926:	d008      	beq.n	800693a <HAL_SPI_Transmit_IT+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	681a      	ldr	r2, [r3, #0]
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006936:	601a      	str	r2, [r3, #0]
 8006938:	e000      	b.n	800693c <HAL_SPI_Transmit_IT+0xfc>
  }

error :
 800693a:	bf00      	nop
  __HAL_UNLOCK(hspi);
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	2200      	movs	r2, #0
 8006940:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006944:	7dfb      	ldrb	r3, [r7, #23]
}
 8006946:	4618      	mov	r0, r3
 8006948:	371c      	adds	r7, #28
 800694a:	46bd      	mov	sp, r7
 800694c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006950:	4770      	bx	lr
 8006952:	bf00      	nop
 8006954:	08007167 	.word	0x08007167
 8006958:	08007121 	.word	0x08007121

0800695c <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800695c:	b580      	push	{r7, lr}
 800695e:	b086      	sub	sp, #24
 8006960:	af00      	add	r7, sp, #0
 8006962:	60f8      	str	r0, [r7, #12]
 8006964:	60b9      	str	r1, [r7, #8]
 8006966:	4613      	mov	r3, r2
 8006968:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800696a:	2300      	movs	r3, #0
 800696c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	689b      	ldr	r3, [r3, #8]
 8006972:	2b00      	cmp	r3, #0
 8006974:	d110      	bne.n	8006998 <HAL_SPI_Receive_IT+0x3c>
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	685b      	ldr	r3, [r3, #4]
 800697a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800697e:	d10b      	bne.n	8006998 <HAL_SPI_Receive_IT+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	2204      	movs	r2, #4
 8006984:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 8006988:	88fb      	ldrh	r3, [r7, #6]
 800698a:	68ba      	ldr	r2, [r7, #8]
 800698c:	68b9      	ldr	r1, [r7, #8]
 800698e:	68f8      	ldr	r0, [r7, #12]
 8006990:	f000 f894 	bl	8006abc <HAL_SPI_TransmitReceive_IT>
 8006994:	4603      	mov	r3, r0
 8006996:	e089      	b.n	8006aac <HAL_SPI_Receive_IT+0x150>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800699e:	2b01      	cmp	r3, #1
 80069a0:	d101      	bne.n	80069a6 <HAL_SPI_Receive_IT+0x4a>
 80069a2:	2302      	movs	r3, #2
 80069a4:	e082      	b.n	8006aac <HAL_SPI_Receive_IT+0x150>
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	2201      	movs	r2, #1
 80069aa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80069b4:	b2db      	uxtb	r3, r3
 80069b6:	2b01      	cmp	r3, #1
 80069b8:	d002      	beq.n	80069c0 <HAL_SPI_Receive_IT+0x64>
  {
    errorcode = HAL_BUSY;
 80069ba:	2302      	movs	r3, #2
 80069bc:	75fb      	strb	r3, [r7, #23]
    goto error;
 80069be:	e070      	b.n	8006aa2 <HAL_SPI_Receive_IT+0x146>
  }

  if ((pData == NULL) || (Size == 0U))
 80069c0:	68bb      	ldr	r3, [r7, #8]
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d002      	beq.n	80069cc <HAL_SPI_Receive_IT+0x70>
 80069c6:	88fb      	ldrh	r3, [r7, #6]
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d102      	bne.n	80069d2 <HAL_SPI_Receive_IT+0x76>
  {
    errorcode = HAL_ERROR;
 80069cc:	2301      	movs	r3, #1
 80069ce:	75fb      	strb	r3, [r7, #23]
    goto error;
 80069d0:	e067      	b.n	8006aa2 <HAL_SPI_Receive_IT+0x146>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	2204      	movs	r2, #4
 80069d6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	2200      	movs	r2, #0
 80069de:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	68ba      	ldr	r2, [r7, #8]
 80069e4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	88fa      	ldrh	r2, [r7, #6]
 80069ea:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	88fa      	ldrh	r2, [r7, #6]
 80069f2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	2200      	movs	r2, #0
 80069fa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	2200      	movs	r2, #0
 8006a00:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	2200      	movs	r2, #0
 8006a06:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	2200      	movs	r2, #0
 8006a0c:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check the data size to adapt Rx threshold and the set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	68db      	ldr	r3, [r3, #12]
 8006a12:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006a16:	d90b      	bls.n	8006a30 <HAL_SPI_Receive_IT+0xd4>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	685a      	ldr	r2, [r3, #4]
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006a26:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_16BIT;
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	4a22      	ldr	r2, [pc, #136]	; (8006ab4 <HAL_SPI_Receive_IT+0x158>)
 8006a2c:	64da      	str	r2, [r3, #76]	; 0x4c
 8006a2e:	e00a      	b.n	8006a46 <HAL_SPI_Receive_IT+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	685a      	ldr	r2, [r3, #4]
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006a3e:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_8BIT;
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	4a1d      	ldr	r2, [pc, #116]	; (8006ab8 <HAL_SPI_Receive_IT+0x15c>)
 8006a44:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	689b      	ldr	r3, [r3, #8]
 8006a4a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a4e:	d10f      	bne.n	8006a70 <HAL_SPI_Receive_IT+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	681a      	ldr	r2, [r3, #0]
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006a5e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	681a      	ldr	r2, [r3, #0]
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006a6e:	601a      	str	r2, [r3, #0]
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	685a      	ldr	r2, [r3, #4]
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8006a7e:	605a      	str	r2, [r3, #4]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a8a:	2b40      	cmp	r3, #64	; 0x40
 8006a8c:	d008      	beq.n	8006aa0 <HAL_SPI_Receive_IT+0x144>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	681a      	ldr	r2, [r3, #0]
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006a9c:	601a      	str	r2, [r3, #0]
 8006a9e:	e000      	b.n	8006aa2 <HAL_SPI_Receive_IT+0x146>
  }

error :
 8006aa0:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	2200      	movs	r2, #0
 8006aa6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006aaa:	7dfb      	ldrb	r3, [r7, #23]
}
 8006aac:	4618      	mov	r0, r3
 8006aae:	3718      	adds	r7, #24
 8006ab0:	46bd      	mov	sp, r7
 8006ab2:	bd80      	pop	{r7, pc}
 8006ab4:	080070d5 	.word	0x080070d5
 8006ab8:	08007085 	.word	0x08007085

08006abc <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 8006abc:	b480      	push	{r7}
 8006abe:	b087      	sub	sp, #28
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	60f8      	str	r0, [r7, #12]
 8006ac4:	60b9      	str	r1, [r7, #8]
 8006ac6:	607a      	str	r2, [r7, #4]
 8006ac8:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006aca:	2300      	movs	r3, #0
 8006acc:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006ad4:	2b01      	cmp	r3, #1
 8006ad6:	d101      	bne.n	8006adc <HAL_SPI_TransmitReceive_IT+0x20>
 8006ad8:	2302      	movs	r3, #2
 8006ada:	e091      	b.n	8006c00 <HAL_SPI_TransmitReceive_IT+0x144>
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	2201      	movs	r2, #1
 8006ae0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006aea:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	685b      	ldr	r3, [r3, #4]
 8006af0:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006af2:	7dbb      	ldrb	r3, [r7, #22]
 8006af4:	2b01      	cmp	r3, #1
 8006af6:	d00d      	beq.n	8006b14 <HAL_SPI_TransmitReceive_IT+0x58>
 8006af8:	693b      	ldr	r3, [r7, #16]
 8006afa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006afe:	d106      	bne.n	8006b0e <HAL_SPI_TransmitReceive_IT+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	689b      	ldr	r3, [r3, #8]
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d102      	bne.n	8006b0e <HAL_SPI_TransmitReceive_IT+0x52>
 8006b08:	7dbb      	ldrb	r3, [r7, #22]
 8006b0a:	2b04      	cmp	r3, #4
 8006b0c:	d002      	beq.n	8006b14 <HAL_SPI_TransmitReceive_IT+0x58>
  {
    errorcode = HAL_BUSY;
 8006b0e:	2302      	movs	r3, #2
 8006b10:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006b12:	e070      	b.n	8006bf6 <HAL_SPI_TransmitReceive_IT+0x13a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006b14:	68bb      	ldr	r3, [r7, #8]
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d005      	beq.n	8006b26 <HAL_SPI_TransmitReceive_IT+0x6a>
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d002      	beq.n	8006b26 <HAL_SPI_TransmitReceive_IT+0x6a>
 8006b20:	887b      	ldrh	r3, [r7, #2]
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d102      	bne.n	8006b2c <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_ERROR;
 8006b26:	2301      	movs	r3, #1
 8006b28:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006b2a:	e064      	b.n	8006bf6 <HAL_SPI_TransmitReceive_IT+0x13a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006b32:	b2db      	uxtb	r3, r3
 8006b34:	2b04      	cmp	r3, #4
 8006b36:	d003      	beq.n	8006b40 <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	2205      	movs	r2, #5
 8006b3c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	2200      	movs	r2, #0
 8006b44:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	68ba      	ldr	r2, [r7, #8]
 8006b4a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	887a      	ldrh	r2, [r7, #2]
 8006b50:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	887a      	ldrh	r2, [r7, #2]
 8006b56:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	687a      	ldr	r2, [r7, #4]
 8006b5c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	887a      	ldrh	r2, [r7, #2]
 8006b62:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	887a      	ldrh	r2, [r7, #2]
 8006b6a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	68db      	ldr	r3, [r3, #12]
 8006b72:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006b76:	d906      	bls.n	8006b86 <HAL_SPI_TransmitReceive_IT+0xca>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	4a24      	ldr	r2, [pc, #144]	; (8006c0c <HAL_SPI_TransmitReceive_IT+0x150>)
 8006b7c:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	4a23      	ldr	r2, [pc, #140]	; (8006c10 <HAL_SPI_TransmitReceive_IT+0x154>)
 8006b82:	651a      	str	r2, [r3, #80]	; 0x50
 8006b84:	e005      	b.n	8006b92 <HAL_SPI_TransmitReceive_IT+0xd6>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	4a22      	ldr	r2, [pc, #136]	; (8006c14 <HAL_SPI_TransmitReceive_IT+0x158>)
 8006b8a:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	4a22      	ldr	r2, [pc, #136]	; (8006c18 <HAL_SPI_TransmitReceive_IT+0x15c>)
 8006b90:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Check if packing mode is enabled and if there is more than 2 data to receive */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	68db      	ldr	r3, [r3, #12]
 8006b96:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006b9a:	d802      	bhi.n	8006ba2 <HAL_SPI_TransmitReceive_IT+0xe6>
 8006b9c:	887b      	ldrh	r3, [r7, #2]
 8006b9e:	2b01      	cmp	r3, #1
 8006ba0:	d908      	bls.n	8006bb4 <HAL_SPI_TransmitReceive_IT+0xf8>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	685a      	ldr	r2, [r3, #4]
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006bb0:	605a      	str	r2, [r3, #4]
 8006bb2:	e007      	b.n	8006bc4 <HAL_SPI_TransmitReceive_IT+0x108>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	685a      	ldr	r2, [r3, #4]
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006bc2:	605a      	str	r2, [r3, #4]
  }

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	685a      	ldr	r2, [r3, #4]
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 8006bd2:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bde:	2b40      	cmp	r3, #64	; 0x40
 8006be0:	d008      	beq.n	8006bf4 <HAL_SPI_TransmitReceive_IT+0x138>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	681a      	ldr	r2, [r3, #0]
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006bf0:	601a      	str	r2, [r3, #0]
 8006bf2:	e000      	b.n	8006bf6 <HAL_SPI_TransmitReceive_IT+0x13a>
  }

error :
 8006bf4:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	2200      	movs	r2, #0
 8006bfa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006bfe:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c00:	4618      	mov	r0, r3
 8006c02:	371c      	adds	r7, #28
 8006c04:	46bd      	mov	sp, r7
 8006c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c0a:	4770      	bx	lr
 8006c0c:	08006fbf 	.word	0x08006fbf
 8006c10:	08007025 	.word	0x08007025
 8006c14:	08006e6f 	.word	0x08006e6f
 8006c18:	08006f2d 	.word	0x08006f2d

08006c1c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8006c1c:	b580      	push	{r7, lr}
 8006c1e:	b088      	sub	sp, #32
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	685b      	ldr	r3, [r3, #4]
 8006c2a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	689b      	ldr	r3, [r3, #8]
 8006c32:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006c34:	69bb      	ldr	r3, [r7, #24]
 8006c36:	099b      	lsrs	r3, r3, #6
 8006c38:	f003 0301 	and.w	r3, r3, #1
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d10f      	bne.n	8006c60 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006c40:	69bb      	ldr	r3, [r7, #24]
 8006c42:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d00a      	beq.n	8006c60 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006c4a:	69fb      	ldr	r3, [r7, #28]
 8006c4c:	099b      	lsrs	r3, r3, #6
 8006c4e:	f003 0301 	and.w	r3, r3, #1
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d004      	beq.n	8006c60 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c5a:	6878      	ldr	r0, [r7, #4]
 8006c5c:	4798      	blx	r3
    return;
 8006c5e:	e0d7      	b.n	8006e10 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8006c60:	69bb      	ldr	r3, [r7, #24]
 8006c62:	085b      	lsrs	r3, r3, #1
 8006c64:	f003 0301 	and.w	r3, r3, #1
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d00a      	beq.n	8006c82 <HAL_SPI_IRQHandler+0x66>
 8006c6c:	69fb      	ldr	r3, [r7, #28]
 8006c6e:	09db      	lsrs	r3, r3, #7
 8006c70:	f003 0301 	and.w	r3, r3, #1
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d004      	beq.n	8006c82 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c7c:	6878      	ldr	r0, [r7, #4]
 8006c7e:	4798      	blx	r3
    return;
 8006c80:	e0c6      	b.n	8006e10 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006c82:	69bb      	ldr	r3, [r7, #24]
 8006c84:	095b      	lsrs	r3, r3, #5
 8006c86:	f003 0301 	and.w	r3, r3, #1
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d10c      	bne.n	8006ca8 <HAL_SPI_IRQHandler+0x8c>
 8006c8e:	69bb      	ldr	r3, [r7, #24]
 8006c90:	099b      	lsrs	r3, r3, #6
 8006c92:	f003 0301 	and.w	r3, r3, #1
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d106      	bne.n	8006ca8 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8006c9a:	69bb      	ldr	r3, [r7, #24]
 8006c9c:	0a1b      	lsrs	r3, r3, #8
 8006c9e:	f003 0301 	and.w	r3, r3, #1
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	f000 80b4 	beq.w	8006e10 <HAL_SPI_IRQHandler+0x1f4>
 8006ca8:	69fb      	ldr	r3, [r7, #28]
 8006caa:	095b      	lsrs	r3, r3, #5
 8006cac:	f003 0301 	and.w	r3, r3, #1
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	f000 80ad 	beq.w	8006e10 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006cb6:	69bb      	ldr	r3, [r7, #24]
 8006cb8:	099b      	lsrs	r3, r3, #6
 8006cba:	f003 0301 	and.w	r3, r3, #1
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d023      	beq.n	8006d0a <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006cc8:	b2db      	uxtb	r3, r3
 8006cca:	2b03      	cmp	r3, #3
 8006ccc:	d011      	beq.n	8006cf2 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006cd2:	f043 0204 	orr.w	r2, r3, #4
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006cda:	2300      	movs	r3, #0
 8006cdc:	617b      	str	r3, [r7, #20]
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	68db      	ldr	r3, [r3, #12]
 8006ce4:	617b      	str	r3, [r7, #20]
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	689b      	ldr	r3, [r3, #8]
 8006cec:	617b      	str	r3, [r7, #20]
 8006cee:	697b      	ldr	r3, [r7, #20]
 8006cf0:	e00b      	b.n	8006d0a <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006cf2:	2300      	movs	r3, #0
 8006cf4:	613b      	str	r3, [r7, #16]
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	68db      	ldr	r3, [r3, #12]
 8006cfc:	613b      	str	r3, [r7, #16]
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	689b      	ldr	r3, [r3, #8]
 8006d04:	613b      	str	r3, [r7, #16]
 8006d06:	693b      	ldr	r3, [r7, #16]
        return;
 8006d08:	e082      	b.n	8006e10 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8006d0a:	69bb      	ldr	r3, [r7, #24]
 8006d0c:	095b      	lsrs	r3, r3, #5
 8006d0e:	f003 0301 	and.w	r3, r3, #1
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d014      	beq.n	8006d40 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d1a:	f043 0201 	orr.w	r2, r3, #1
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006d22:	2300      	movs	r3, #0
 8006d24:	60fb      	str	r3, [r7, #12]
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	689b      	ldr	r3, [r3, #8]
 8006d2c:	60fb      	str	r3, [r7, #12]
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	681a      	ldr	r2, [r3, #0]
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006d3c:	601a      	str	r2, [r3, #0]
 8006d3e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8006d40:	69bb      	ldr	r3, [r7, #24]
 8006d42:	0a1b      	lsrs	r3, r3, #8
 8006d44:	f003 0301 	and.w	r3, r3, #1
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d00c      	beq.n	8006d66 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d50:	f043 0208 	orr.w	r2, r3, #8
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006d58:	2300      	movs	r3, #0
 8006d5a:	60bb      	str	r3, [r7, #8]
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	689b      	ldr	r3, [r3, #8]
 8006d62:	60bb      	str	r3, [r7, #8]
 8006d64:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d04f      	beq.n	8006e0e <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	685a      	ldr	r2, [r3, #4]
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006d7c:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	2201      	movs	r2, #1
 8006d82:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8006d86:	69fb      	ldr	r3, [r7, #28]
 8006d88:	f003 0302 	and.w	r3, r3, #2
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d104      	bne.n	8006d9a <HAL_SPI_IRQHandler+0x17e>
 8006d90:	69fb      	ldr	r3, [r7, #28]
 8006d92:	f003 0301 	and.w	r3, r3, #1
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d034      	beq.n	8006e04 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	685a      	ldr	r2, [r3, #4]
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	f022 0203 	bic.w	r2, r2, #3
 8006da8:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d011      	beq.n	8006dd6 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006db6:	4a18      	ldr	r2, [pc, #96]	; (8006e18 <HAL_SPI_IRQHandler+0x1fc>)
 8006db8:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006dbe:	4618      	mov	r0, r3
 8006dc0:	f7fb ffda 	bl	8002d78 <HAL_DMA_Abort_IT>
 8006dc4:	4603      	mov	r3, r0
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d005      	beq.n	8006dd6 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006dce:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d016      	beq.n	8006e0c <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006de2:	4a0d      	ldr	r2, [pc, #52]	; (8006e18 <HAL_SPI_IRQHandler+0x1fc>)
 8006de4:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006dea:	4618      	mov	r0, r3
 8006dec:	f7fb ffc4 	bl	8002d78 <HAL_DMA_Abort_IT>
 8006df0:	4603      	mov	r3, r0
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d00a      	beq.n	8006e0c <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006dfa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8006e02:	e003      	b.n	8006e0c <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8006e04:	6878      	ldr	r0, [r7, #4]
 8006e06:	f000 f813 	bl	8006e30 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8006e0a:	e000      	b.n	8006e0e <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8006e0c:	bf00      	nop
    return;
 8006e0e:	bf00      	nop
  }
}
 8006e10:	3720      	adds	r7, #32
 8006e12:	46bd      	mov	sp, r7
 8006e14:	bd80      	pop	{r7, pc}
 8006e16:	bf00      	nop
 8006e18:	08006e45 	.word	0x08006e45

08006e1c <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006e1c:	b480      	push	{r7}
 8006e1e:	b083      	sub	sp, #12
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8006e24:	bf00      	nop
 8006e26:	370c      	adds	r7, #12
 8006e28:	46bd      	mov	sp, r7
 8006e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e2e:	4770      	bx	lr

08006e30 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8006e30:	b480      	push	{r7}
 8006e32:	b083      	sub	sp, #12
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8006e38:	bf00      	nop
 8006e3a:	370c      	adds	r7, #12
 8006e3c:	46bd      	mov	sp, r7
 8006e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e42:	4770      	bx	lr

08006e44 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006e44:	b580      	push	{r7, lr}
 8006e46:	b084      	sub	sp, #16
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e50:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	2200      	movs	r2, #0
 8006e56:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	2200      	movs	r2, #0
 8006e5e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8006e60:	68f8      	ldr	r0, [r7, #12]
 8006e62:	f7ff ffe5 	bl	8006e30 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006e66:	bf00      	nop
 8006e68:	3710      	adds	r7, #16
 8006e6a:	46bd      	mov	sp, r7
 8006e6c:	bd80      	pop	{r7, pc}

08006e6e <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8006e6e:	b580      	push	{r7, lr}
 8006e70:	b082      	sub	sp, #8
 8006e72:	af00      	add	r7, sp, #0
 8006e74:	6078      	str	r0, [r7, #4]
  /* Receive data in packing mode */
  if (hspi->RxXferCount > 1U)
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006e7c:	b29b      	uxth	r3, r3
 8006e7e:	2b01      	cmp	r3, #1
 8006e80:	d923      	bls.n	8006eca <SPI_2linesRxISR_8BIT+0x5c>
  {
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	68da      	ldr	r2, [r3, #12]
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e8c:	b292      	uxth	r2, r2
 8006e8e:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e94:	1c9a      	adds	r2, r3, #2
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount -= 2U;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006ea0:	b29b      	uxth	r3, r3
 8006ea2:	3b02      	subs	r3, #2
 8006ea4:	b29a      	uxth	r2, r3
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    if (hspi->RxXferCount == 1U)
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006eb2:	b29b      	uxth	r3, r3
 8006eb4:	2b01      	cmp	r3, #1
 8006eb6:	d11f      	bne.n	8006ef8 <SPI_2linesRxISR_8BIT+0x8a>
    {
      /* Set RX Fifo threshold according the reception data length: 8bit */
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	685a      	ldr	r2, [r3, #4]
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006ec6:	605a      	str	r2, [r3, #4]
 8006ec8:	e016      	b.n	8006ef8 <SPI_2linesRxISR_8BIT+0x8a>
    }
  }
  /* Receive data in 8 Bit mode */
  else
  {
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	f103 020c 	add.w	r2, r3, #12
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ed6:	7812      	ldrb	r2, [r2, #0]
 8006ed8:	b2d2      	uxtb	r2, r2
 8006eda:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ee0:	1c5a      	adds	r2, r3, #1
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount--;
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006eec:	b29b      	uxth	r3, r3
 8006eee:	3b01      	subs	r3, #1
 8006ef0:	b29a      	uxth	r2, r3
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  }

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006efe:	b29b      	uxth	r3, r3
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d10f      	bne.n	8006f24 <SPI_2linesRxISR_8BIT+0xb6>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	685a      	ldr	r2, [r3, #4]
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006f12:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006f18:	b29b      	uxth	r3, r3
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d102      	bne.n	8006f24 <SPI_2linesRxISR_8BIT+0xb6>
    {
      SPI_CloseRxTx_ISR(hspi);
 8006f1e:	6878      	ldr	r0, [r7, #4]
 8006f20:	f000 fafc 	bl	800751c <SPI_CloseRxTx_ISR>
    }
  }
}
 8006f24:	bf00      	nop
 8006f26:	3708      	adds	r7, #8
 8006f28:	46bd      	mov	sp, r7
 8006f2a:	bd80      	pop	{r7, pc}

08006f2c <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8006f2c:	b580      	push	{r7, lr}
 8006f2e:	b082      	sub	sp, #8
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	6078      	str	r0, [r7, #4]
  /* Transmit data in packing Bit mode */
  if (hspi->TxXferCount >= 2U)
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006f38:	b29b      	uxth	r3, r3
 8006f3a:	2b01      	cmp	r3, #1
 8006f3c:	d912      	bls.n	8006f64 <SPI_2linesTxISR_8BIT+0x38>
  {
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f42:	881a      	ldrh	r2, [r3, #0]
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f4e:	1c9a      	adds	r2, r3, #2
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount -= 2U;
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006f58:	b29b      	uxth	r3, r3
 8006f5a:	3b02      	subs	r3, #2
 8006f5c:	b29a      	uxth	r2, r3
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006f62:	e012      	b.n	8006f8a <SPI_2linesTxISR_8BIT+0x5e>
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	330c      	adds	r3, #12
 8006f6e:	7812      	ldrb	r2, [r2, #0]
 8006f70:	701a      	strb	r2, [r3, #0]
    hspi->pTxBuffPtr++;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f76:	1c5a      	adds	r2, r3, #1
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount--;
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006f80:	b29b      	uxth	r3, r3
 8006f82:	3b01      	subs	r3, #1
 8006f84:	b29a      	uxth	r2, r3
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	87da      	strh	r2, [r3, #62]	; 0x3e
  }

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006f8e:	b29b      	uxth	r3, r3
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d110      	bne.n	8006fb6 <SPI_2linesTxISR_8BIT+0x8a>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	685a      	ldr	r2, [r3, #4]
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006fa2:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006faa:	b29b      	uxth	r3, r3
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d102      	bne.n	8006fb6 <SPI_2linesTxISR_8BIT+0x8a>
    {
      SPI_CloseRxTx_ISR(hspi);
 8006fb0:	6878      	ldr	r0, [r7, #4]
 8006fb2:	f000 fab3 	bl	800751c <SPI_CloseRxTx_ISR>
    }
  }
}
 8006fb6:	bf00      	nop
 8006fb8:	3708      	adds	r7, #8
 8006fba:	46bd      	mov	sp, r7
 8006fbc:	bd80      	pop	{r7, pc}

08006fbe <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8006fbe:	b580      	push	{r7, lr}
 8006fc0:	b082      	sub	sp, #8
 8006fc2:	af00      	add	r7, sp, #0
 8006fc4:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	68da      	ldr	r2, [r3, #12]
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fd0:	b292      	uxth	r2, r2
 8006fd2:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fd8:	1c9a      	adds	r2, r3, #2
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006fe4:	b29b      	uxth	r3, r3
 8006fe6:	3b01      	subs	r3, #1
 8006fe8:	b29a      	uxth	r2, r3
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  if (hspi->RxXferCount == 0U)
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006ff6:	b29b      	uxth	r3, r3
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d10f      	bne.n	800701c <SPI_2linesRxISR_16BIT+0x5e>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	685a      	ldr	r2, [r3, #4]
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800700a:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007010:	b29b      	uxth	r3, r3
 8007012:	2b00      	cmp	r3, #0
 8007014:	d102      	bne.n	800701c <SPI_2linesRxISR_16BIT+0x5e>
    {
      SPI_CloseRxTx_ISR(hspi);
 8007016:	6878      	ldr	r0, [r7, #4]
 8007018:	f000 fa80 	bl	800751c <SPI_CloseRxTx_ISR>
    }
  }
}
 800701c:	bf00      	nop
 800701e:	3708      	adds	r7, #8
 8007020:	46bd      	mov	sp, r7
 8007022:	bd80      	pop	{r7, pc}

08007024 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8007024:	b580      	push	{r7, lr}
 8007026:	b082      	sub	sp, #8
 8007028:	af00      	add	r7, sp, #0
 800702a:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007030:	881a      	ldrh	r2, [r3, #0]
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800703c:	1c9a      	adds	r2, r3, #2
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007046:	b29b      	uxth	r3, r3
 8007048:	3b01      	subs	r3, #1
 800704a:	b29a      	uxth	r2, r3
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007054:	b29b      	uxth	r3, r3
 8007056:	2b00      	cmp	r3, #0
 8007058:	d110      	bne.n	800707c <SPI_2linesTxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	685a      	ldr	r2, [r3, #4]
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007068:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007070:	b29b      	uxth	r3, r3
 8007072:	2b00      	cmp	r3, #0
 8007074:	d102      	bne.n	800707c <SPI_2linesTxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 8007076:	6878      	ldr	r0, [r7, #4]
 8007078:	f000 fa50 	bl	800751c <SPI_CloseRxTx_ISR>
    }
  }
}
 800707c:	bf00      	nop
 800707e:	3708      	adds	r7, #8
 8007080:	46bd      	mov	sp, r7
 8007082:	bd80      	pop	{r7, pc}

08007084 <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8007084:	b580      	push	{r7, lr}
 8007086:	b082      	sub	sp, #8
 8007088:	af00      	add	r7, sp, #0
 800708a:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	f103 020c 	add.w	r2, r3, #12
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007098:	7812      	ldrb	r2, [r2, #0]
 800709a:	b2d2      	uxtb	r2, r2
 800709c:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070a2:	1c5a      	adds	r2, r3, #1
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80070ae:	b29b      	uxth	r3, r3
 80070b0:	3b01      	subs	r3, #1
 80070b2:	b29a      	uxth	r2, r3
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80070c0:	b29b      	uxth	r3, r3
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d102      	bne.n	80070cc <SPI_RxISR_8BIT+0x48>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 80070c6:	6878      	ldr	r0, [r7, #4]
 80070c8:	f000 fa6a 	bl	80075a0 <SPI_CloseRx_ISR>
  }
}
 80070cc:	bf00      	nop
 80070ce:	3708      	adds	r7, #8
 80070d0:	46bd      	mov	sp, r7
 80070d2:	bd80      	pop	{r7, pc}

080070d4 <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80070d4:	b580      	push	{r7, lr}
 80070d6:	b082      	sub	sp, #8
 80070d8:	af00      	add	r7, sp, #0
 80070da:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	68da      	ldr	r2, [r3, #12]
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070e6:	b292      	uxth	r2, r2
 80070e8:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070ee:	1c9a      	adds	r2, r3, #2
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80070fa:	b29b      	uxth	r3, r3
 80070fc:	3b01      	subs	r3, #1
 80070fe:	b29a      	uxth	r2, r3
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800710c:	b29b      	uxth	r3, r3
 800710e:	2b00      	cmp	r3, #0
 8007110:	d102      	bne.n	8007118 <SPI_RxISR_16BIT+0x44>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8007112:	6878      	ldr	r0, [r7, #4]
 8007114:	f000 fa44 	bl	80075a0 <SPI_CloseRx_ISR>
  }
}
 8007118:	bf00      	nop
 800711a:	3708      	adds	r7, #8
 800711c:	46bd      	mov	sp, r7
 800711e:	bd80      	pop	{r7, pc}

08007120 <SPI_TxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8007120:	b580      	push	{r7, lr}
 8007122:	b082      	sub	sp, #8
 8007124:	af00      	add	r7, sp, #0
 8007126:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	330c      	adds	r3, #12
 8007132:	7812      	ldrb	r2, [r2, #0]
 8007134:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800713a:	1c5a      	adds	r2, r3, #1
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007144:	b29b      	uxth	r3, r3
 8007146:	3b01      	subs	r3, #1
 8007148:	b29a      	uxth	r2, r3
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->TxXferCount == 0U)
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007152:	b29b      	uxth	r3, r3
 8007154:	2b00      	cmp	r3, #0
 8007156:	d102      	bne.n	800715e <SPI_TxISR_8BIT+0x3e>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8007158:	6878      	ldr	r0, [r7, #4]
 800715a:	f000 fa51 	bl	8007600 <SPI_CloseTx_ISR>
  }
}
 800715e:	bf00      	nop
 8007160:	3708      	adds	r7, #8
 8007162:	46bd      	mov	sp, r7
 8007164:	bd80      	pop	{r7, pc}

08007166 <SPI_TxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8007166:	b580      	push	{r7, lr}
 8007168:	b082      	sub	sp, #8
 800716a:	af00      	add	r7, sp, #0
 800716c:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007172:	881a      	ldrh	r2, [r3, #0]
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800717e:	1c9a      	adds	r2, r3, #2
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007188:	b29b      	uxth	r3, r3
 800718a:	3b01      	subs	r3, #1
 800718c:	b29a      	uxth	r2, r3
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->TxXferCount == 0U)
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007196:	b29b      	uxth	r3, r3
 8007198:	2b00      	cmp	r3, #0
 800719a:	d102      	bne.n	80071a2 <SPI_TxISR_16BIT+0x3c>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 800719c:	6878      	ldr	r0, [r7, #4]
 800719e:	f000 fa2f 	bl	8007600 <SPI_CloseTx_ISR>
  }
}
 80071a2:	bf00      	nop
 80071a4:	3708      	adds	r7, #8
 80071a6:	46bd      	mov	sp, r7
 80071a8:	bd80      	pop	{r7, pc}
	...

080071ac <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80071ac:	b580      	push	{r7, lr}
 80071ae:	b088      	sub	sp, #32
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	60f8      	str	r0, [r7, #12]
 80071b4:	60b9      	str	r1, [r7, #8]
 80071b6:	603b      	str	r3, [r7, #0]
 80071b8:	4613      	mov	r3, r2
 80071ba:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80071bc:	f7fb fb4e 	bl	800285c <HAL_GetTick>
 80071c0:	4602      	mov	r2, r0
 80071c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071c4:	1a9b      	subs	r3, r3, r2
 80071c6:	683a      	ldr	r2, [r7, #0]
 80071c8:	4413      	add	r3, r2
 80071ca:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80071cc:	f7fb fb46 	bl	800285c <HAL_GetTick>
 80071d0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80071d2:	4b39      	ldr	r3, [pc, #228]	; (80072b8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	015b      	lsls	r3, r3, #5
 80071d8:	0d1b      	lsrs	r3, r3, #20
 80071da:	69fa      	ldr	r2, [r7, #28]
 80071dc:	fb02 f303 	mul.w	r3, r2, r3
 80071e0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80071e2:	e054      	b.n	800728e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80071e4:	683b      	ldr	r3, [r7, #0]
 80071e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071ea:	d050      	beq.n	800728e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80071ec:	f7fb fb36 	bl	800285c <HAL_GetTick>
 80071f0:	4602      	mov	r2, r0
 80071f2:	69bb      	ldr	r3, [r7, #24]
 80071f4:	1ad3      	subs	r3, r2, r3
 80071f6:	69fa      	ldr	r2, [r7, #28]
 80071f8:	429a      	cmp	r2, r3
 80071fa:	d902      	bls.n	8007202 <SPI_WaitFlagStateUntilTimeout+0x56>
 80071fc:	69fb      	ldr	r3, [r7, #28]
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d13d      	bne.n	800727e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	685a      	ldr	r2, [r3, #4]
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007210:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	685b      	ldr	r3, [r3, #4]
 8007216:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800721a:	d111      	bne.n	8007240 <SPI_WaitFlagStateUntilTimeout+0x94>
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	689b      	ldr	r3, [r3, #8]
 8007220:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007224:	d004      	beq.n	8007230 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	689b      	ldr	r3, [r3, #8]
 800722a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800722e:	d107      	bne.n	8007240 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	681a      	ldr	r2, [r3, #0]
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800723e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007244:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007248:	d10f      	bne.n	800726a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	681a      	ldr	r2, [r3, #0]
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007258:	601a      	str	r2, [r3, #0]
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	681a      	ldr	r2, [r3, #0]
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007268:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	2201      	movs	r2, #1
 800726e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	2200      	movs	r2, #0
 8007276:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800727a:	2303      	movs	r3, #3
 800727c:	e017      	b.n	80072ae <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800727e:	697b      	ldr	r3, [r7, #20]
 8007280:	2b00      	cmp	r3, #0
 8007282:	d101      	bne.n	8007288 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007284:	2300      	movs	r3, #0
 8007286:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007288:	697b      	ldr	r3, [r7, #20]
 800728a:	3b01      	subs	r3, #1
 800728c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	689a      	ldr	r2, [r3, #8]
 8007294:	68bb      	ldr	r3, [r7, #8]
 8007296:	4013      	ands	r3, r2
 8007298:	68ba      	ldr	r2, [r7, #8]
 800729a:	429a      	cmp	r2, r3
 800729c:	bf0c      	ite	eq
 800729e:	2301      	moveq	r3, #1
 80072a0:	2300      	movne	r3, #0
 80072a2:	b2db      	uxtb	r3, r3
 80072a4:	461a      	mov	r2, r3
 80072a6:	79fb      	ldrb	r3, [r7, #7]
 80072a8:	429a      	cmp	r2, r3
 80072aa:	d19b      	bne.n	80071e4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80072ac:	2300      	movs	r3, #0
}
 80072ae:	4618      	mov	r0, r3
 80072b0:	3720      	adds	r7, #32
 80072b2:	46bd      	mov	sp, r7
 80072b4:	bd80      	pop	{r7, pc}
 80072b6:	bf00      	nop
 80072b8:	20000010 	.word	0x20000010

080072bc <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80072bc:	b580      	push	{r7, lr}
 80072be:	b088      	sub	sp, #32
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	60f8      	str	r0, [r7, #12]
 80072c4:	60b9      	str	r1, [r7, #8]
 80072c6:	607a      	str	r2, [r7, #4]
 80072c8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80072ca:	f7fb fac7 	bl	800285c <HAL_GetTick>
 80072ce:	4602      	mov	r2, r0
 80072d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072d2:	1a9b      	subs	r3, r3, r2
 80072d4:	683a      	ldr	r2, [r7, #0]
 80072d6:	4413      	add	r3, r2
 80072d8:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80072da:	f7fb fabf 	bl	800285c <HAL_GetTick>
 80072de:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80072e0:	4b3e      	ldr	r3, [pc, #248]	; (80073dc <SPI_WaitFifoStateUntilTimeout+0x120>)
 80072e2:	681a      	ldr	r2, [r3, #0]
 80072e4:	4613      	mov	r3, r2
 80072e6:	009b      	lsls	r3, r3, #2
 80072e8:	4413      	add	r3, r2
 80072ea:	00da      	lsls	r2, r3, #3
 80072ec:	1ad3      	subs	r3, r2, r3
 80072ee:	0d1b      	lsrs	r3, r3, #20
 80072f0:	69fa      	ldr	r2, [r7, #28]
 80072f2:	fb02 f303 	mul.w	r3, r2, r3
 80072f6:	613b      	str	r3, [r7, #16]

  while ((hspi->Instance->SR & Fifo) != State)
 80072f8:	e062      	b.n	80073c0 <SPI_WaitFifoStateUntilTimeout+0x104>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80072fa:	68bb      	ldr	r3, [r7, #8]
 80072fc:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8007300:	d109      	bne.n	8007316 <SPI_WaitFifoStateUntilTimeout+0x5a>
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	2b00      	cmp	r3, #0
 8007306:	d106      	bne.n	8007316 <SPI_WaitFifoStateUntilTimeout+0x5a>
    {
      /* Flush Data Register by a blank read */
      tmpreg = READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	330c      	adds	r3, #12
 800730e:	781b      	ldrb	r3, [r3, #0]
 8007310:	b2db      	uxtb	r3, r3
 8007312:	617b      	str	r3, [r7, #20]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 8007314:	697b      	ldr	r3, [r7, #20]
    }

    if (Timeout != HAL_MAX_DELAY)
 8007316:	683b      	ldr	r3, [r7, #0]
 8007318:	f1b3 3fff 	cmp.w	r3, #4294967295
 800731c:	d050      	beq.n	80073c0 <SPI_WaitFifoStateUntilTimeout+0x104>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800731e:	f7fb fa9d 	bl	800285c <HAL_GetTick>
 8007322:	4602      	mov	r2, r0
 8007324:	69bb      	ldr	r3, [r7, #24]
 8007326:	1ad3      	subs	r3, r2, r3
 8007328:	69fa      	ldr	r2, [r7, #28]
 800732a:	429a      	cmp	r2, r3
 800732c:	d902      	bls.n	8007334 <SPI_WaitFifoStateUntilTimeout+0x78>
 800732e:	69fb      	ldr	r3, [r7, #28]
 8007330:	2b00      	cmp	r3, #0
 8007332:	d13d      	bne.n	80073b0 <SPI_WaitFifoStateUntilTimeout+0xf4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	685a      	ldr	r2, [r3, #4]
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007342:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	685b      	ldr	r3, [r3, #4]
 8007348:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800734c:	d111      	bne.n	8007372 <SPI_WaitFifoStateUntilTimeout+0xb6>
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	689b      	ldr	r3, [r3, #8]
 8007352:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007356:	d004      	beq.n	8007362 <SPI_WaitFifoStateUntilTimeout+0xa6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	689b      	ldr	r3, [r3, #8]
 800735c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007360:	d107      	bne.n	8007372 <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	681a      	ldr	r2, [r3, #0]
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007370:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007376:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800737a:	d10f      	bne.n	800739c <SPI_WaitFifoStateUntilTimeout+0xe0>
        {
          SPI_RESET_CRC(hspi);
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	681a      	ldr	r2, [r3, #0]
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800738a:	601a      	str	r2, [r3, #0]
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	681a      	ldr	r2, [r3, #0]
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800739a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	2201      	movs	r2, #1
 80073a0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	2200      	movs	r2, #0
 80073a8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80073ac:	2303      	movs	r3, #3
 80073ae:	e010      	b.n	80073d2 <SPI_WaitFifoStateUntilTimeout+0x116>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80073b0:	693b      	ldr	r3, [r7, #16]
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d101      	bne.n	80073ba <SPI_WaitFifoStateUntilTimeout+0xfe>
      {
        tmp_timeout = 0U;
 80073b6:	2300      	movs	r3, #0
 80073b8:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 80073ba:	693b      	ldr	r3, [r7, #16]
 80073bc:	3b01      	subs	r3, #1
 80073be:	613b      	str	r3, [r7, #16]
  while ((hspi->Instance->SR & Fifo) != State)
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	689a      	ldr	r2, [r3, #8]
 80073c6:	68bb      	ldr	r3, [r7, #8]
 80073c8:	4013      	ands	r3, r2
 80073ca:	687a      	ldr	r2, [r7, #4]
 80073cc:	429a      	cmp	r2, r3
 80073ce:	d194      	bne.n	80072fa <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 80073d0:	2300      	movs	r3, #0
}
 80073d2:	4618      	mov	r0, r3
 80073d4:	3720      	adds	r7, #32
 80073d6:	46bd      	mov	sp, r7
 80073d8:	bd80      	pop	{r7, pc}
 80073da:	bf00      	nop
 80073dc:	20000010 	.word	0x20000010

080073e0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80073e0:	b580      	push	{r7, lr}
 80073e2:	b086      	sub	sp, #24
 80073e4:	af02      	add	r7, sp, #8
 80073e6:	60f8      	str	r0, [r7, #12]
 80073e8:	60b9      	str	r1, [r7, #8]
 80073ea:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	685b      	ldr	r3, [r3, #4]
 80073f0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80073f4:	d111      	bne.n	800741a <SPI_EndRxTransaction+0x3a>
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	689b      	ldr	r3, [r3, #8]
 80073fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80073fe:	d004      	beq.n	800740a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	689b      	ldr	r3, [r3, #8]
 8007404:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007408:	d107      	bne.n	800741a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	681a      	ldr	r2, [r3, #0]
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007418:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	9300      	str	r3, [sp, #0]
 800741e:	68bb      	ldr	r3, [r7, #8]
 8007420:	2200      	movs	r2, #0
 8007422:	2180      	movs	r1, #128	; 0x80
 8007424:	68f8      	ldr	r0, [r7, #12]
 8007426:	f7ff fec1 	bl	80071ac <SPI_WaitFlagStateUntilTimeout>
 800742a:	4603      	mov	r3, r0
 800742c:	2b00      	cmp	r3, #0
 800742e:	d007      	beq.n	8007440 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007434:	f043 0220 	orr.w	r2, r3, #32
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800743c:	2303      	movs	r3, #3
 800743e:	e023      	b.n	8007488 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	685b      	ldr	r3, [r3, #4]
 8007444:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007448:	d11d      	bne.n	8007486 <SPI_EndRxTransaction+0xa6>
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	689b      	ldr	r3, [r3, #8]
 800744e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007452:	d004      	beq.n	800745e <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	689b      	ldr	r3, [r3, #8]
 8007458:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800745c:	d113      	bne.n	8007486 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	9300      	str	r3, [sp, #0]
 8007462:	68bb      	ldr	r3, [r7, #8]
 8007464:	2200      	movs	r2, #0
 8007466:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800746a:	68f8      	ldr	r0, [r7, #12]
 800746c:	f7ff ff26 	bl	80072bc <SPI_WaitFifoStateUntilTimeout>
 8007470:	4603      	mov	r3, r0
 8007472:	2b00      	cmp	r3, #0
 8007474:	d007      	beq.n	8007486 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800747a:	f043 0220 	orr.w	r2, r3, #32
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8007482:	2303      	movs	r3, #3
 8007484:	e000      	b.n	8007488 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8007486:	2300      	movs	r3, #0
}
 8007488:	4618      	mov	r0, r3
 800748a:	3710      	adds	r7, #16
 800748c:	46bd      	mov	sp, r7
 800748e:	bd80      	pop	{r7, pc}

08007490 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007490:	b580      	push	{r7, lr}
 8007492:	b086      	sub	sp, #24
 8007494:	af02      	add	r7, sp, #8
 8007496:	60f8      	str	r0, [r7, #12]
 8007498:	60b9      	str	r1, [r7, #8]
 800749a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	9300      	str	r3, [sp, #0]
 80074a0:	68bb      	ldr	r3, [r7, #8]
 80074a2:	2200      	movs	r2, #0
 80074a4:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80074a8:	68f8      	ldr	r0, [r7, #12]
 80074aa:	f7ff ff07 	bl	80072bc <SPI_WaitFifoStateUntilTimeout>
 80074ae:	4603      	mov	r3, r0
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d007      	beq.n	80074c4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80074b8:	f043 0220 	orr.w	r2, r3, #32
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80074c0:	2303      	movs	r3, #3
 80074c2:	e027      	b.n	8007514 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	9300      	str	r3, [sp, #0]
 80074c8:	68bb      	ldr	r3, [r7, #8]
 80074ca:	2200      	movs	r2, #0
 80074cc:	2180      	movs	r1, #128	; 0x80
 80074ce:	68f8      	ldr	r0, [r7, #12]
 80074d0:	f7ff fe6c 	bl	80071ac <SPI_WaitFlagStateUntilTimeout>
 80074d4:	4603      	mov	r3, r0
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d007      	beq.n	80074ea <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80074de:	f043 0220 	orr.w	r2, r3, #32
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80074e6:	2303      	movs	r3, #3
 80074e8:	e014      	b.n	8007514 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	9300      	str	r3, [sp, #0]
 80074ee:	68bb      	ldr	r3, [r7, #8]
 80074f0:	2200      	movs	r2, #0
 80074f2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80074f6:	68f8      	ldr	r0, [r7, #12]
 80074f8:	f7ff fee0 	bl	80072bc <SPI_WaitFifoStateUntilTimeout>
 80074fc:	4603      	mov	r3, r0
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d007      	beq.n	8007512 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007506:	f043 0220 	orr.w	r2, r3, #32
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800750e:	2303      	movs	r3, #3
 8007510:	e000      	b.n	8007514 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8007512:	2300      	movs	r3, #0
}
 8007514:	4618      	mov	r0, r3
 8007516:	3710      	adds	r7, #16
 8007518:	46bd      	mov	sp, r7
 800751a:	bd80      	pop	{r7, pc}

0800751c <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 800751c:	b580      	push	{r7, lr}
 800751e:	b084      	sub	sp, #16
 8007520:	af00      	add	r7, sp, #0
 8007522:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007524:	f7fb f99a 	bl	800285c <HAL_GetTick>
 8007528:	60f8      	str	r0, [r7, #12]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	685a      	ldr	r2, [r3, #4]
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	f022 0220 	bic.w	r2, r2, #32
 8007538:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800753a:	68fa      	ldr	r2, [r7, #12]
 800753c:	2164      	movs	r1, #100	; 0x64
 800753e:	6878      	ldr	r0, [r7, #4]
 8007540:	f7ff ffa6 	bl	8007490 <SPI_EndRxTxTransaction>
 8007544:	4603      	mov	r3, r0
 8007546:	2b00      	cmp	r3, #0
 8007548:	d005      	beq.n	8007556 <SPI_CloseRxTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800754e:	f043 0220 	orr.w	r2, r3, #32
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	661a      	str	r2, [r3, #96]	; 0x60
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800755a:	2b00      	cmp	r3, #0
 800755c:	d115      	bne.n	800758a <SPI_CloseRxTx_ISR+0x6e>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007564:	b2db      	uxtb	r3, r3
 8007566:	2b04      	cmp	r3, #4
 8007568:	d107      	bne.n	800757a <SPI_CloseRxTx_ISR+0x5e>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	2201      	movs	r2, #1
 800756e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 8007572:	6878      	ldr	r0, [r7, #4]
 8007574:	f003 fd02 	bl	800af7c <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8007578:	e00e      	b.n	8007598 <SPI_CloseRxTx_ISR+0x7c>
        hspi->State = HAL_SPI_STATE_READY;
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	2201      	movs	r2, #1
 800757e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        HAL_SPI_TxRxCpltCallback(hspi);
 8007582:	6878      	ldr	r0, [r7, #4]
 8007584:	f7ff fc4a 	bl	8006e1c <HAL_SPI_TxRxCpltCallback>
}
 8007588:	e006      	b.n	8007598 <SPI_CloseRxTx_ISR+0x7c>
      hspi->State = HAL_SPI_STATE_READY;
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	2201      	movs	r2, #1
 800758e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      HAL_SPI_ErrorCallback(hspi);
 8007592:	6878      	ldr	r0, [r7, #4]
 8007594:	f7ff fc4c 	bl	8006e30 <HAL_SPI_ErrorCallback>
}
 8007598:	bf00      	nop
 800759a:	3710      	adds	r7, #16
 800759c:	46bd      	mov	sp, r7
 800759e:	bd80      	pop	{r7, pc}

080075a0 <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 80075a0:	b580      	push	{r7, lr}
 80075a2:	b082      	sub	sp, #8
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	685a      	ldr	r2, [r3, #4]
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80075b6:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 80075b8:	f7fb f950 	bl	800285c <HAL_GetTick>
 80075bc:	4603      	mov	r3, r0
 80075be:	461a      	mov	r2, r3
 80075c0:	2164      	movs	r1, #100	; 0x64
 80075c2:	6878      	ldr	r0, [r7, #4]
 80075c4:	f7ff ff0c 	bl	80073e0 <SPI_EndRxTransaction>
 80075c8:	4603      	mov	r3, r0
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d005      	beq.n	80075da <SPI_CloseRx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80075d2:	f043 0220 	orr.w	r2, r3, #32
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	661a      	str	r2, [r3, #96]	; 0x60
  }
  hspi->State = HAL_SPI_STATE_READY;
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	2201      	movs	r2, #1
 80075de:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d103      	bne.n	80075f2 <SPI_CloseRx_ISR+0x52>
    {
      /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 80075ea:	6878      	ldr	r0, [r7, #4]
 80075ec:	f003 fcc6 	bl	800af7c <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 80075f0:	e002      	b.n	80075f8 <SPI_CloseRx_ISR+0x58>
      HAL_SPI_ErrorCallback(hspi);
 80075f2:	6878      	ldr	r0, [r7, #4]
 80075f4:	f7ff fc1c 	bl	8006e30 <HAL_SPI_ErrorCallback>
}
 80075f8:	bf00      	nop
 80075fa:	3708      	adds	r7, #8
 80075fc:	46bd      	mov	sp, r7
 80075fe:	bd80      	pop	{r7, pc}

08007600 <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 8007600:	b580      	push	{r7, lr}
 8007602:	b084      	sub	sp, #16
 8007604:	af00      	add	r7, sp, #0
 8007606:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007608:	f7fb f928 	bl	800285c <HAL_GetTick>
 800760c:	60f8      	str	r0, [r7, #12]

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	685a      	ldr	r2, [r3, #4]
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800761c:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800761e:	68fa      	ldr	r2, [r7, #12]
 8007620:	2164      	movs	r1, #100	; 0x64
 8007622:	6878      	ldr	r0, [r7, #4]
 8007624:	f7ff ff34 	bl	8007490 <SPI_EndRxTxTransaction>
 8007628:	4603      	mov	r3, r0
 800762a:	2b00      	cmp	r3, #0
 800762c:	d005      	beq.n	800763a <SPI_CloseTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007632:	f043 0220 	orr.w	r2, r3, #32
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	689b      	ldr	r3, [r3, #8]
 800763e:	2b00      	cmp	r3, #0
 8007640:	d10a      	bne.n	8007658 <SPI_CloseTx_ISR+0x58>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007642:	2300      	movs	r3, #0
 8007644:	60bb      	str	r3, [r7, #8]
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	68db      	ldr	r3, [r3, #12]
 800764c:	60bb      	str	r3, [r7, #8]
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	689b      	ldr	r3, [r3, #8]
 8007654:	60bb      	str	r3, [r7, #8]
 8007656:	68bb      	ldr	r3, [r7, #8]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	2201      	movs	r2, #1
 800765c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007664:	2b00      	cmp	r3, #0
 8007666:	d003      	beq.n	8007670 <SPI_CloseTx_ISR+0x70>
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 8007668:	6878      	ldr	r0, [r7, #4]
 800766a:	f7ff fbe1 	bl	8006e30 <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 800766e:	e002      	b.n	8007676 <SPI_CloseTx_ISR+0x76>
    HAL_SPI_TxCpltCallback(hspi);
 8007670:	6878      	ldr	r0, [r7, #4]
 8007672:	f003 fc97 	bl	800afa4 <HAL_SPI_TxCpltCallback>
}
 8007676:	bf00      	nop
 8007678:	3710      	adds	r7, #16
 800767a:	46bd      	mov	sp, r7
 800767c:	bd80      	pop	{r7, pc}

0800767e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800767e:	b580      	push	{r7, lr}
 8007680:	b082      	sub	sp, #8
 8007682:	af00      	add	r7, sp, #0
 8007684:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	2b00      	cmp	r3, #0
 800768a:	d101      	bne.n	8007690 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800768c:	2301      	movs	r3, #1
 800768e:	e049      	b.n	8007724 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007696:	b2db      	uxtb	r3, r3
 8007698:	2b00      	cmp	r3, #0
 800769a:	d106      	bne.n	80076aa <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	2200      	movs	r2, #0
 80076a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80076a4:	6878      	ldr	r0, [r7, #4]
 80076a6:	f7fa fd75 	bl	8002194 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	2202      	movs	r2, #2
 80076ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681a      	ldr	r2, [r3, #0]
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	3304      	adds	r3, #4
 80076ba:	4619      	mov	r1, r3
 80076bc:	4610      	mov	r0, r2
 80076be:	f000 f9ed 	bl	8007a9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	2201      	movs	r2, #1
 80076c6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	2201      	movs	r2, #1
 80076ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	2201      	movs	r2, #1
 80076d6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	2201      	movs	r2, #1
 80076de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	2201      	movs	r2, #1
 80076e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	2201      	movs	r2, #1
 80076ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	2201      	movs	r2, #1
 80076f6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	2201      	movs	r2, #1
 80076fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	2201      	movs	r2, #1
 8007706:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	2201      	movs	r2, #1
 800770e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	2201      	movs	r2, #1
 8007716:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	2201      	movs	r2, #1
 800771e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007722:	2300      	movs	r3, #0
}
 8007724:	4618      	mov	r0, r3
 8007726:	3708      	adds	r7, #8
 8007728:	46bd      	mov	sp, r7
 800772a:	bd80      	pop	{r7, pc}

0800772c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800772c:	b480      	push	{r7}
 800772e:	b085      	sub	sp, #20
 8007730:	af00      	add	r7, sp, #0
 8007732:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800773a:	b2db      	uxtb	r3, r3
 800773c:	2b01      	cmp	r3, #1
 800773e:	d001      	beq.n	8007744 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007740:	2301      	movs	r3, #1
 8007742:	e04f      	b.n	80077e4 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	2202      	movs	r2, #2
 8007748:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	68da      	ldr	r2, [r3, #12]
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	f042 0201 	orr.w	r2, r2, #1
 800775a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	4a23      	ldr	r2, [pc, #140]	; (80077f0 <HAL_TIM_Base_Start_IT+0xc4>)
 8007762:	4293      	cmp	r3, r2
 8007764:	d01d      	beq.n	80077a2 <HAL_TIM_Base_Start_IT+0x76>
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800776e:	d018      	beq.n	80077a2 <HAL_TIM_Base_Start_IT+0x76>
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	4a1f      	ldr	r2, [pc, #124]	; (80077f4 <HAL_TIM_Base_Start_IT+0xc8>)
 8007776:	4293      	cmp	r3, r2
 8007778:	d013      	beq.n	80077a2 <HAL_TIM_Base_Start_IT+0x76>
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	4a1e      	ldr	r2, [pc, #120]	; (80077f8 <HAL_TIM_Base_Start_IT+0xcc>)
 8007780:	4293      	cmp	r3, r2
 8007782:	d00e      	beq.n	80077a2 <HAL_TIM_Base_Start_IT+0x76>
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	4a1c      	ldr	r2, [pc, #112]	; (80077fc <HAL_TIM_Base_Start_IT+0xd0>)
 800778a:	4293      	cmp	r3, r2
 800778c:	d009      	beq.n	80077a2 <HAL_TIM_Base_Start_IT+0x76>
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	4a1b      	ldr	r2, [pc, #108]	; (8007800 <HAL_TIM_Base_Start_IT+0xd4>)
 8007794:	4293      	cmp	r3, r2
 8007796:	d004      	beq.n	80077a2 <HAL_TIM_Base_Start_IT+0x76>
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	4a19      	ldr	r2, [pc, #100]	; (8007804 <HAL_TIM_Base_Start_IT+0xd8>)
 800779e:	4293      	cmp	r3, r2
 80077a0:	d115      	bne.n	80077ce <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	689a      	ldr	r2, [r3, #8]
 80077a8:	4b17      	ldr	r3, [pc, #92]	; (8007808 <HAL_TIM_Base_Start_IT+0xdc>)
 80077aa:	4013      	ands	r3, r2
 80077ac:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	2b06      	cmp	r3, #6
 80077b2:	d015      	beq.n	80077e0 <HAL_TIM_Base_Start_IT+0xb4>
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80077ba:	d011      	beq.n	80077e0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	681a      	ldr	r2, [r3, #0]
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	f042 0201 	orr.w	r2, r2, #1
 80077ca:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80077cc:	e008      	b.n	80077e0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	681a      	ldr	r2, [r3, #0]
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	f042 0201 	orr.w	r2, r2, #1
 80077dc:	601a      	str	r2, [r3, #0]
 80077de:	e000      	b.n	80077e2 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80077e0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80077e2:	2300      	movs	r3, #0
}
 80077e4:	4618      	mov	r0, r3
 80077e6:	3714      	adds	r7, #20
 80077e8:	46bd      	mov	sp, r7
 80077ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ee:	4770      	bx	lr
 80077f0:	40012c00 	.word	0x40012c00
 80077f4:	40000400 	.word	0x40000400
 80077f8:	40000800 	.word	0x40000800
 80077fc:	40000c00 	.word	0x40000c00
 8007800:	40013400 	.word	0x40013400
 8007804:	40014000 	.word	0x40014000
 8007808:	00010007 	.word	0x00010007

0800780c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800780c:	b580      	push	{r7, lr}
 800780e:	b082      	sub	sp, #8
 8007810:	af00      	add	r7, sp, #0
 8007812:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	691b      	ldr	r3, [r3, #16]
 800781a:	f003 0302 	and.w	r3, r3, #2
 800781e:	2b02      	cmp	r3, #2
 8007820:	d122      	bne.n	8007868 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	68db      	ldr	r3, [r3, #12]
 8007828:	f003 0302 	and.w	r3, r3, #2
 800782c:	2b02      	cmp	r3, #2
 800782e:	d11b      	bne.n	8007868 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	f06f 0202 	mvn.w	r2, #2
 8007838:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	2201      	movs	r2, #1
 800783e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	699b      	ldr	r3, [r3, #24]
 8007846:	f003 0303 	and.w	r3, r3, #3
 800784a:	2b00      	cmp	r3, #0
 800784c:	d003      	beq.n	8007856 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800784e:	6878      	ldr	r0, [r7, #4]
 8007850:	f000 f905 	bl	8007a5e <HAL_TIM_IC_CaptureCallback>
 8007854:	e005      	b.n	8007862 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007856:	6878      	ldr	r0, [r7, #4]
 8007858:	f000 f8f7 	bl	8007a4a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800785c:	6878      	ldr	r0, [r7, #4]
 800785e:	f000 f908 	bl	8007a72 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	2200      	movs	r2, #0
 8007866:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	691b      	ldr	r3, [r3, #16]
 800786e:	f003 0304 	and.w	r3, r3, #4
 8007872:	2b04      	cmp	r3, #4
 8007874:	d122      	bne.n	80078bc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	68db      	ldr	r3, [r3, #12]
 800787c:	f003 0304 	and.w	r3, r3, #4
 8007880:	2b04      	cmp	r3, #4
 8007882:	d11b      	bne.n	80078bc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	f06f 0204 	mvn.w	r2, #4
 800788c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	2202      	movs	r2, #2
 8007892:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	699b      	ldr	r3, [r3, #24]
 800789a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d003      	beq.n	80078aa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80078a2:	6878      	ldr	r0, [r7, #4]
 80078a4:	f000 f8db 	bl	8007a5e <HAL_TIM_IC_CaptureCallback>
 80078a8:	e005      	b.n	80078b6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80078aa:	6878      	ldr	r0, [r7, #4]
 80078ac:	f000 f8cd 	bl	8007a4a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80078b0:	6878      	ldr	r0, [r7, #4]
 80078b2:	f000 f8de 	bl	8007a72 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	2200      	movs	r2, #0
 80078ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	691b      	ldr	r3, [r3, #16]
 80078c2:	f003 0308 	and.w	r3, r3, #8
 80078c6:	2b08      	cmp	r3, #8
 80078c8:	d122      	bne.n	8007910 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	68db      	ldr	r3, [r3, #12]
 80078d0:	f003 0308 	and.w	r3, r3, #8
 80078d4:	2b08      	cmp	r3, #8
 80078d6:	d11b      	bne.n	8007910 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	f06f 0208 	mvn.w	r2, #8
 80078e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	2204      	movs	r2, #4
 80078e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	69db      	ldr	r3, [r3, #28]
 80078ee:	f003 0303 	and.w	r3, r3, #3
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d003      	beq.n	80078fe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80078f6:	6878      	ldr	r0, [r7, #4]
 80078f8:	f000 f8b1 	bl	8007a5e <HAL_TIM_IC_CaptureCallback>
 80078fc:	e005      	b.n	800790a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80078fe:	6878      	ldr	r0, [r7, #4]
 8007900:	f000 f8a3 	bl	8007a4a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007904:	6878      	ldr	r0, [r7, #4]
 8007906:	f000 f8b4 	bl	8007a72 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	2200      	movs	r2, #0
 800790e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	691b      	ldr	r3, [r3, #16]
 8007916:	f003 0310 	and.w	r3, r3, #16
 800791a:	2b10      	cmp	r3, #16
 800791c:	d122      	bne.n	8007964 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	68db      	ldr	r3, [r3, #12]
 8007924:	f003 0310 	and.w	r3, r3, #16
 8007928:	2b10      	cmp	r3, #16
 800792a:	d11b      	bne.n	8007964 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	f06f 0210 	mvn.w	r2, #16
 8007934:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	2208      	movs	r2, #8
 800793a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	69db      	ldr	r3, [r3, #28]
 8007942:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007946:	2b00      	cmp	r3, #0
 8007948:	d003      	beq.n	8007952 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800794a:	6878      	ldr	r0, [r7, #4]
 800794c:	f000 f887 	bl	8007a5e <HAL_TIM_IC_CaptureCallback>
 8007950:	e005      	b.n	800795e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007952:	6878      	ldr	r0, [r7, #4]
 8007954:	f000 f879 	bl	8007a4a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007958:	6878      	ldr	r0, [r7, #4]
 800795a:	f000 f88a 	bl	8007a72 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	2200      	movs	r2, #0
 8007962:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	691b      	ldr	r3, [r3, #16]
 800796a:	f003 0301 	and.w	r3, r3, #1
 800796e:	2b01      	cmp	r3, #1
 8007970:	d10e      	bne.n	8007990 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	68db      	ldr	r3, [r3, #12]
 8007978:	f003 0301 	and.w	r3, r3, #1
 800797c:	2b01      	cmp	r3, #1
 800797e:	d107      	bne.n	8007990 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	f06f 0201 	mvn.w	r2, #1
 8007988:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800798a:	6878      	ldr	r0, [r7, #4]
 800798c:	f7fa f80a 	bl	80019a4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	691b      	ldr	r3, [r3, #16]
 8007996:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800799a:	2b80      	cmp	r3, #128	; 0x80
 800799c:	d10e      	bne.n	80079bc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	68db      	ldr	r3, [r3, #12]
 80079a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079a8:	2b80      	cmp	r3, #128	; 0x80
 80079aa:	d107      	bne.n	80079bc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80079b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80079b6:	6878      	ldr	r0, [r7, #4]
 80079b8:	f000 f99c 	bl	8007cf4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	691b      	ldr	r3, [r3, #16]
 80079c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80079c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80079ca:	d10e      	bne.n	80079ea <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	68db      	ldr	r3, [r3, #12]
 80079d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079d6:	2b80      	cmp	r3, #128	; 0x80
 80079d8:	d107      	bne.n	80079ea <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80079e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80079e4:	6878      	ldr	r0, [r7, #4]
 80079e6:	f000 f98f 	bl	8007d08 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	691b      	ldr	r3, [r3, #16]
 80079f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079f4:	2b40      	cmp	r3, #64	; 0x40
 80079f6:	d10e      	bne.n	8007a16 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	68db      	ldr	r3, [r3, #12]
 80079fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a02:	2b40      	cmp	r3, #64	; 0x40
 8007a04:	d107      	bne.n	8007a16 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007a0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007a10:	6878      	ldr	r0, [r7, #4]
 8007a12:	f000 f838 	bl	8007a86 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	691b      	ldr	r3, [r3, #16]
 8007a1c:	f003 0320 	and.w	r3, r3, #32
 8007a20:	2b20      	cmp	r3, #32
 8007a22:	d10e      	bne.n	8007a42 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	68db      	ldr	r3, [r3, #12]
 8007a2a:	f003 0320 	and.w	r3, r3, #32
 8007a2e:	2b20      	cmp	r3, #32
 8007a30:	d107      	bne.n	8007a42 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	f06f 0220 	mvn.w	r2, #32
 8007a3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007a3c:	6878      	ldr	r0, [r7, #4]
 8007a3e:	f000 f94f 	bl	8007ce0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007a42:	bf00      	nop
 8007a44:	3708      	adds	r7, #8
 8007a46:	46bd      	mov	sp, r7
 8007a48:	bd80      	pop	{r7, pc}

08007a4a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007a4a:	b480      	push	{r7}
 8007a4c:	b083      	sub	sp, #12
 8007a4e:	af00      	add	r7, sp, #0
 8007a50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007a52:	bf00      	nop
 8007a54:	370c      	adds	r7, #12
 8007a56:	46bd      	mov	sp, r7
 8007a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a5c:	4770      	bx	lr

08007a5e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007a5e:	b480      	push	{r7}
 8007a60:	b083      	sub	sp, #12
 8007a62:	af00      	add	r7, sp, #0
 8007a64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007a66:	bf00      	nop
 8007a68:	370c      	adds	r7, #12
 8007a6a:	46bd      	mov	sp, r7
 8007a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a70:	4770      	bx	lr

08007a72 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007a72:	b480      	push	{r7}
 8007a74:	b083      	sub	sp, #12
 8007a76:	af00      	add	r7, sp, #0
 8007a78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007a7a:	bf00      	nop
 8007a7c:	370c      	adds	r7, #12
 8007a7e:	46bd      	mov	sp, r7
 8007a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a84:	4770      	bx	lr

08007a86 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007a86:	b480      	push	{r7}
 8007a88:	b083      	sub	sp, #12
 8007a8a:	af00      	add	r7, sp, #0
 8007a8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007a8e:	bf00      	nop
 8007a90:	370c      	adds	r7, #12
 8007a92:	46bd      	mov	sp, r7
 8007a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a98:	4770      	bx	lr
	...

08007a9c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007a9c:	b480      	push	{r7}
 8007a9e:	b085      	sub	sp, #20
 8007aa0:	af00      	add	r7, sp, #0
 8007aa2:	6078      	str	r0, [r7, #4]
 8007aa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	4a40      	ldr	r2, [pc, #256]	; (8007bb0 <TIM_Base_SetConfig+0x114>)
 8007ab0:	4293      	cmp	r3, r2
 8007ab2:	d013      	beq.n	8007adc <TIM_Base_SetConfig+0x40>
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007aba:	d00f      	beq.n	8007adc <TIM_Base_SetConfig+0x40>
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	4a3d      	ldr	r2, [pc, #244]	; (8007bb4 <TIM_Base_SetConfig+0x118>)
 8007ac0:	4293      	cmp	r3, r2
 8007ac2:	d00b      	beq.n	8007adc <TIM_Base_SetConfig+0x40>
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	4a3c      	ldr	r2, [pc, #240]	; (8007bb8 <TIM_Base_SetConfig+0x11c>)
 8007ac8:	4293      	cmp	r3, r2
 8007aca:	d007      	beq.n	8007adc <TIM_Base_SetConfig+0x40>
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	4a3b      	ldr	r2, [pc, #236]	; (8007bbc <TIM_Base_SetConfig+0x120>)
 8007ad0:	4293      	cmp	r3, r2
 8007ad2:	d003      	beq.n	8007adc <TIM_Base_SetConfig+0x40>
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	4a3a      	ldr	r2, [pc, #232]	; (8007bc0 <TIM_Base_SetConfig+0x124>)
 8007ad8:	4293      	cmp	r3, r2
 8007ada:	d108      	bne.n	8007aee <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ae2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007ae4:	683b      	ldr	r3, [r7, #0]
 8007ae6:	685b      	ldr	r3, [r3, #4]
 8007ae8:	68fa      	ldr	r2, [r7, #12]
 8007aea:	4313      	orrs	r3, r2
 8007aec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	4a2f      	ldr	r2, [pc, #188]	; (8007bb0 <TIM_Base_SetConfig+0x114>)
 8007af2:	4293      	cmp	r3, r2
 8007af4:	d01f      	beq.n	8007b36 <TIM_Base_SetConfig+0x9a>
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007afc:	d01b      	beq.n	8007b36 <TIM_Base_SetConfig+0x9a>
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	4a2c      	ldr	r2, [pc, #176]	; (8007bb4 <TIM_Base_SetConfig+0x118>)
 8007b02:	4293      	cmp	r3, r2
 8007b04:	d017      	beq.n	8007b36 <TIM_Base_SetConfig+0x9a>
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	4a2b      	ldr	r2, [pc, #172]	; (8007bb8 <TIM_Base_SetConfig+0x11c>)
 8007b0a:	4293      	cmp	r3, r2
 8007b0c:	d013      	beq.n	8007b36 <TIM_Base_SetConfig+0x9a>
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	4a2a      	ldr	r2, [pc, #168]	; (8007bbc <TIM_Base_SetConfig+0x120>)
 8007b12:	4293      	cmp	r3, r2
 8007b14:	d00f      	beq.n	8007b36 <TIM_Base_SetConfig+0x9a>
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	4a29      	ldr	r2, [pc, #164]	; (8007bc0 <TIM_Base_SetConfig+0x124>)
 8007b1a:	4293      	cmp	r3, r2
 8007b1c:	d00b      	beq.n	8007b36 <TIM_Base_SetConfig+0x9a>
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	4a28      	ldr	r2, [pc, #160]	; (8007bc4 <TIM_Base_SetConfig+0x128>)
 8007b22:	4293      	cmp	r3, r2
 8007b24:	d007      	beq.n	8007b36 <TIM_Base_SetConfig+0x9a>
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	4a27      	ldr	r2, [pc, #156]	; (8007bc8 <TIM_Base_SetConfig+0x12c>)
 8007b2a:	4293      	cmp	r3, r2
 8007b2c:	d003      	beq.n	8007b36 <TIM_Base_SetConfig+0x9a>
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	4a26      	ldr	r2, [pc, #152]	; (8007bcc <TIM_Base_SetConfig+0x130>)
 8007b32:	4293      	cmp	r3, r2
 8007b34:	d108      	bne.n	8007b48 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007b3c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007b3e:	683b      	ldr	r3, [r7, #0]
 8007b40:	68db      	ldr	r3, [r3, #12]
 8007b42:	68fa      	ldr	r2, [r7, #12]
 8007b44:	4313      	orrs	r3, r2
 8007b46:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007b4e:	683b      	ldr	r3, [r7, #0]
 8007b50:	695b      	ldr	r3, [r3, #20]
 8007b52:	4313      	orrs	r3, r2
 8007b54:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	68fa      	ldr	r2, [r7, #12]
 8007b5a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007b5c:	683b      	ldr	r3, [r7, #0]
 8007b5e:	689a      	ldr	r2, [r3, #8]
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007b64:	683b      	ldr	r3, [r7, #0]
 8007b66:	681a      	ldr	r2, [r3, #0]
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	4a10      	ldr	r2, [pc, #64]	; (8007bb0 <TIM_Base_SetConfig+0x114>)
 8007b70:	4293      	cmp	r3, r2
 8007b72:	d00f      	beq.n	8007b94 <TIM_Base_SetConfig+0xf8>
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	4a12      	ldr	r2, [pc, #72]	; (8007bc0 <TIM_Base_SetConfig+0x124>)
 8007b78:	4293      	cmp	r3, r2
 8007b7a:	d00b      	beq.n	8007b94 <TIM_Base_SetConfig+0xf8>
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	4a11      	ldr	r2, [pc, #68]	; (8007bc4 <TIM_Base_SetConfig+0x128>)
 8007b80:	4293      	cmp	r3, r2
 8007b82:	d007      	beq.n	8007b94 <TIM_Base_SetConfig+0xf8>
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	4a10      	ldr	r2, [pc, #64]	; (8007bc8 <TIM_Base_SetConfig+0x12c>)
 8007b88:	4293      	cmp	r3, r2
 8007b8a:	d003      	beq.n	8007b94 <TIM_Base_SetConfig+0xf8>
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	4a0f      	ldr	r2, [pc, #60]	; (8007bcc <TIM_Base_SetConfig+0x130>)
 8007b90:	4293      	cmp	r3, r2
 8007b92:	d103      	bne.n	8007b9c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007b94:	683b      	ldr	r3, [r7, #0]
 8007b96:	691a      	ldr	r2, [r3, #16]
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	2201      	movs	r2, #1
 8007ba0:	615a      	str	r2, [r3, #20]
}
 8007ba2:	bf00      	nop
 8007ba4:	3714      	adds	r7, #20
 8007ba6:	46bd      	mov	sp, r7
 8007ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bac:	4770      	bx	lr
 8007bae:	bf00      	nop
 8007bb0:	40012c00 	.word	0x40012c00
 8007bb4:	40000400 	.word	0x40000400
 8007bb8:	40000800 	.word	0x40000800
 8007bbc:	40000c00 	.word	0x40000c00
 8007bc0:	40013400 	.word	0x40013400
 8007bc4:	40014000 	.word	0x40014000
 8007bc8:	40014400 	.word	0x40014400
 8007bcc:	40014800 	.word	0x40014800

08007bd0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007bd0:	b480      	push	{r7}
 8007bd2:	b085      	sub	sp, #20
 8007bd4:	af00      	add	r7, sp, #0
 8007bd6:	6078      	str	r0, [r7, #4]
 8007bd8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007be0:	2b01      	cmp	r3, #1
 8007be2:	d101      	bne.n	8007be8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007be4:	2302      	movs	r3, #2
 8007be6:	e068      	b.n	8007cba <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	2201      	movs	r2, #1
 8007bec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	2202      	movs	r2, #2
 8007bf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	685b      	ldr	r3, [r3, #4]
 8007bfe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	689b      	ldr	r3, [r3, #8]
 8007c06:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	4a2e      	ldr	r2, [pc, #184]	; (8007cc8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8007c0e:	4293      	cmp	r3, r2
 8007c10:	d004      	beq.n	8007c1c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	4a2d      	ldr	r2, [pc, #180]	; (8007ccc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007c18:	4293      	cmp	r3, r2
 8007c1a:	d108      	bne.n	8007c2e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007c22:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007c24:	683b      	ldr	r3, [r7, #0]
 8007c26:	685b      	ldr	r3, [r3, #4]
 8007c28:	68fa      	ldr	r2, [r7, #12]
 8007c2a:	4313      	orrs	r3, r2
 8007c2c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c34:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007c36:	683b      	ldr	r3, [r7, #0]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	68fa      	ldr	r2, [r7, #12]
 8007c3c:	4313      	orrs	r3, r2
 8007c3e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	68fa      	ldr	r2, [r7, #12]
 8007c46:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	4a1e      	ldr	r2, [pc, #120]	; (8007cc8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8007c4e:	4293      	cmp	r3, r2
 8007c50:	d01d      	beq.n	8007c8e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c5a:	d018      	beq.n	8007c8e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	4a1b      	ldr	r2, [pc, #108]	; (8007cd0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007c62:	4293      	cmp	r3, r2
 8007c64:	d013      	beq.n	8007c8e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	4a1a      	ldr	r2, [pc, #104]	; (8007cd4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007c6c:	4293      	cmp	r3, r2
 8007c6e:	d00e      	beq.n	8007c8e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	4a18      	ldr	r2, [pc, #96]	; (8007cd8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007c76:	4293      	cmp	r3, r2
 8007c78:	d009      	beq.n	8007c8e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	4a13      	ldr	r2, [pc, #76]	; (8007ccc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007c80:	4293      	cmp	r3, r2
 8007c82:	d004      	beq.n	8007c8e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	4a14      	ldr	r2, [pc, #80]	; (8007cdc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8007c8a:	4293      	cmp	r3, r2
 8007c8c:	d10c      	bne.n	8007ca8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007c8e:	68bb      	ldr	r3, [r7, #8]
 8007c90:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007c94:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007c96:	683b      	ldr	r3, [r7, #0]
 8007c98:	689b      	ldr	r3, [r3, #8]
 8007c9a:	68ba      	ldr	r2, [r7, #8]
 8007c9c:	4313      	orrs	r3, r2
 8007c9e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	68ba      	ldr	r2, [r7, #8]
 8007ca6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	2201      	movs	r2, #1
 8007cac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	2200      	movs	r2, #0
 8007cb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007cb8:	2300      	movs	r3, #0
}
 8007cba:	4618      	mov	r0, r3
 8007cbc:	3714      	adds	r7, #20
 8007cbe:	46bd      	mov	sp, r7
 8007cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc4:	4770      	bx	lr
 8007cc6:	bf00      	nop
 8007cc8:	40012c00 	.word	0x40012c00
 8007ccc:	40013400 	.word	0x40013400
 8007cd0:	40000400 	.word	0x40000400
 8007cd4:	40000800 	.word	0x40000800
 8007cd8:	40000c00 	.word	0x40000c00
 8007cdc:	40014000 	.word	0x40014000

08007ce0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007ce0:	b480      	push	{r7}
 8007ce2:	b083      	sub	sp, #12
 8007ce4:	af00      	add	r7, sp, #0
 8007ce6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007ce8:	bf00      	nop
 8007cea:	370c      	adds	r7, #12
 8007cec:	46bd      	mov	sp, r7
 8007cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf2:	4770      	bx	lr

08007cf4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007cf4:	b480      	push	{r7}
 8007cf6:	b083      	sub	sp, #12
 8007cf8:	af00      	add	r7, sp, #0
 8007cfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007cfc:	bf00      	nop
 8007cfe:	370c      	adds	r7, #12
 8007d00:	46bd      	mov	sp, r7
 8007d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d06:	4770      	bx	lr

08007d08 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007d08:	b480      	push	{r7}
 8007d0a:	b083      	sub	sp, #12
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007d10:	bf00      	nop
 8007d12:	370c      	adds	r7, #12
 8007d14:	46bd      	mov	sp, r7
 8007d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d1a:	4770      	bx	lr

08007d1c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007d1c:	b580      	push	{r7, lr}
 8007d1e:	b082      	sub	sp, #8
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d101      	bne.n	8007d2e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007d2a:	2301      	movs	r3, #1
 8007d2c:	e040      	b.n	8007db0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d106      	bne.n	8007d44 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	2200      	movs	r2, #0
 8007d3a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007d3e:	6878      	ldr	r0, [r7, #4]
 8007d40:	f7fa fa4e 	bl	80021e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	2224      	movs	r2, #36	; 0x24
 8007d48:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	681a      	ldr	r2, [r3, #0]
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	f022 0201 	bic.w	r2, r2, #1
 8007d58:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007d5a:	6878      	ldr	r0, [r7, #4]
 8007d5c:	f000 fb26 	bl	80083ac <UART_SetConfig>
 8007d60:	4603      	mov	r3, r0
 8007d62:	2b01      	cmp	r3, #1
 8007d64:	d101      	bne.n	8007d6a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8007d66:	2301      	movs	r3, #1
 8007d68:	e022      	b.n	8007db0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d002      	beq.n	8007d78 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8007d72:	6878      	ldr	r0, [r7, #4]
 8007d74:	f000 fdd4 	bl	8008920 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	685a      	ldr	r2, [r3, #4]
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007d86:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	689a      	ldr	r2, [r3, #8]
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007d96:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	681a      	ldr	r2, [r3, #0]
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	f042 0201 	orr.w	r2, r2, #1
 8007da6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007da8:	6878      	ldr	r0, [r7, #4]
 8007daa:	f000 fe5b 	bl	8008a64 <UART_CheckIdleState>
 8007dae:	4603      	mov	r3, r0
}
 8007db0:	4618      	mov	r0, r3
 8007db2:	3708      	adds	r7, #8
 8007db4:	46bd      	mov	sp, r7
 8007db6:	bd80      	pop	{r7, pc}

08007db8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007db8:	b580      	push	{r7, lr}
 8007dba:	b08a      	sub	sp, #40	; 0x28
 8007dbc:	af02      	add	r7, sp, #8
 8007dbe:	60f8      	str	r0, [r7, #12]
 8007dc0:	60b9      	str	r1, [r7, #8]
 8007dc2:	603b      	str	r3, [r7, #0]
 8007dc4:	4613      	mov	r3, r2
 8007dc6:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007dcc:	2b20      	cmp	r3, #32
 8007dce:	f040 8082 	bne.w	8007ed6 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8007dd2:	68bb      	ldr	r3, [r7, #8]
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d002      	beq.n	8007dde <HAL_UART_Transmit+0x26>
 8007dd8:	88fb      	ldrh	r3, [r7, #6]
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d101      	bne.n	8007de2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8007dde:	2301      	movs	r3, #1
 8007de0:	e07a      	b.n	8007ed8 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8007de8:	2b01      	cmp	r3, #1
 8007dea:	d101      	bne.n	8007df0 <HAL_UART_Transmit+0x38>
 8007dec:	2302      	movs	r3, #2
 8007dee:	e073      	b.n	8007ed8 <HAL_UART_Transmit+0x120>
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	2201      	movs	r2, #1
 8007df4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	2200      	movs	r2, #0
 8007dfc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	2221      	movs	r2, #33	; 0x21
 8007e04:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007e06:	f7fa fd29 	bl	800285c <HAL_GetTick>
 8007e0a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	88fa      	ldrh	r2, [r7, #6]
 8007e10:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	88fa      	ldrh	r2, [r7, #6]
 8007e18:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	689b      	ldr	r3, [r3, #8]
 8007e20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e24:	d108      	bne.n	8007e38 <HAL_UART_Transmit+0x80>
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	691b      	ldr	r3, [r3, #16]
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d104      	bne.n	8007e38 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8007e2e:	2300      	movs	r3, #0
 8007e30:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007e32:	68bb      	ldr	r3, [r7, #8]
 8007e34:	61bb      	str	r3, [r7, #24]
 8007e36:	e003      	b.n	8007e40 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8007e38:	68bb      	ldr	r3, [r7, #8]
 8007e3a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007e3c:	2300      	movs	r3, #0
 8007e3e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	2200      	movs	r2, #0
 8007e44:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8007e48:	e02d      	b.n	8007ea6 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007e4a:	683b      	ldr	r3, [r7, #0]
 8007e4c:	9300      	str	r3, [sp, #0]
 8007e4e:	697b      	ldr	r3, [r7, #20]
 8007e50:	2200      	movs	r2, #0
 8007e52:	2180      	movs	r1, #128	; 0x80
 8007e54:	68f8      	ldr	r0, [r7, #12]
 8007e56:	f000 fe4e 	bl	8008af6 <UART_WaitOnFlagUntilTimeout>
 8007e5a:	4603      	mov	r3, r0
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d001      	beq.n	8007e64 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8007e60:	2303      	movs	r3, #3
 8007e62:	e039      	b.n	8007ed8 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8007e64:	69fb      	ldr	r3, [r7, #28]
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d10b      	bne.n	8007e82 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007e6a:	69bb      	ldr	r3, [r7, #24]
 8007e6c:	881a      	ldrh	r2, [r3, #0]
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007e76:	b292      	uxth	r2, r2
 8007e78:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007e7a:	69bb      	ldr	r3, [r7, #24]
 8007e7c:	3302      	adds	r3, #2
 8007e7e:	61bb      	str	r3, [r7, #24]
 8007e80:	e008      	b.n	8007e94 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007e82:	69fb      	ldr	r3, [r7, #28]
 8007e84:	781a      	ldrb	r2, [r3, #0]
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	b292      	uxth	r2, r2
 8007e8c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007e8e:	69fb      	ldr	r3, [r7, #28]
 8007e90:	3301      	adds	r3, #1
 8007e92:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007e9a:	b29b      	uxth	r3, r3
 8007e9c:	3b01      	subs	r3, #1
 8007e9e:	b29a      	uxth	r2, r3
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007eac:	b29b      	uxth	r3, r3
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d1cb      	bne.n	8007e4a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007eb2:	683b      	ldr	r3, [r7, #0]
 8007eb4:	9300      	str	r3, [sp, #0]
 8007eb6:	697b      	ldr	r3, [r7, #20]
 8007eb8:	2200      	movs	r2, #0
 8007eba:	2140      	movs	r1, #64	; 0x40
 8007ebc:	68f8      	ldr	r0, [r7, #12]
 8007ebe:	f000 fe1a 	bl	8008af6 <UART_WaitOnFlagUntilTimeout>
 8007ec2:	4603      	mov	r3, r0
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d001      	beq.n	8007ecc <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8007ec8:	2303      	movs	r3, #3
 8007eca:	e005      	b.n	8007ed8 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	2220      	movs	r2, #32
 8007ed0:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8007ed2:	2300      	movs	r3, #0
 8007ed4:	e000      	b.n	8007ed8 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8007ed6:	2302      	movs	r3, #2
  }
}
 8007ed8:	4618      	mov	r0, r3
 8007eda:	3720      	adds	r7, #32
 8007edc:	46bd      	mov	sp, r7
 8007ede:	bd80      	pop	{r7, pc}

08007ee0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007ee0:	b580      	push	{r7, lr}
 8007ee2:	b084      	sub	sp, #16
 8007ee4:	af00      	add	r7, sp, #0
 8007ee6:	60f8      	str	r0, [r7, #12]
 8007ee8:	60b9      	str	r1, [r7, #8]
 8007eea:	4613      	mov	r3, r2
 8007eec:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007ef2:	2b20      	cmp	r3, #32
 8007ef4:	d131      	bne.n	8007f5a <HAL_UART_Receive_IT+0x7a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007ef6:	68bb      	ldr	r3, [r7, #8]
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d002      	beq.n	8007f02 <HAL_UART_Receive_IT+0x22>
 8007efc:	88fb      	ldrh	r3, [r7, #6]
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d101      	bne.n	8007f06 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8007f02:	2301      	movs	r3, #1
 8007f04:	e02a      	b.n	8007f5c <HAL_UART_Receive_IT+0x7c>
    }

    __HAL_LOCK(huart);
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8007f0c:	2b01      	cmp	r3, #1
 8007f0e:	d101      	bne.n	8007f14 <HAL_UART_Receive_IT+0x34>
 8007f10:	2302      	movs	r3, #2
 8007f12:	e023      	b.n	8007f5c <HAL_UART_Receive_IT+0x7c>
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	2201      	movs	r2, #1
 8007f18:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	2200      	movs	r2, #0
 8007f20:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	4a0f      	ldr	r2, [pc, #60]	; (8007f64 <HAL_UART_Receive_IT+0x84>)
 8007f28:	4293      	cmp	r3, r2
 8007f2a:	d00e      	beq.n	8007f4a <HAL_UART_Receive_IT+0x6a>
    {
      /* Check that USART RTOEN bit is set */
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	685b      	ldr	r3, [r3, #4]
 8007f32:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d007      	beq.n	8007f4a <HAL_UART_Receive_IT+0x6a>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	681a      	ldr	r2, [r3, #0]
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8007f48:	601a      	str	r2, [r3, #0]
      }
    }

    return(UART_Start_Receive_IT(huart, pData, Size));
 8007f4a:	88fb      	ldrh	r3, [r7, #6]
 8007f4c:	461a      	mov	r2, r3
 8007f4e:	68b9      	ldr	r1, [r7, #8]
 8007f50:	68f8      	ldr	r0, [r7, #12]
 8007f52:	f000 fe4d 	bl	8008bf0 <UART_Start_Receive_IT>
 8007f56:	4603      	mov	r3, r0
 8007f58:	e000      	b.n	8007f5c <HAL_UART_Receive_IT+0x7c>
  }
  else
  {
    return HAL_BUSY;
 8007f5a:	2302      	movs	r3, #2
  }
}
 8007f5c:	4618      	mov	r0, r3
 8007f5e:	3710      	adds	r7, #16
 8007f60:	46bd      	mov	sp, r7
 8007f62:	bd80      	pop	{r7, pc}
 8007f64:	40008000 	.word	0x40008000

08007f68 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007f68:	b580      	push	{r7, lr}
 8007f6a:	b088      	sub	sp, #32
 8007f6c:	af00      	add	r7, sp, #0
 8007f6e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	69db      	ldr	r3, [r3, #28]
 8007f76:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	689b      	ldr	r3, [r3, #8]
 8007f86:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007f88:	69fa      	ldr	r2, [r7, #28]
 8007f8a:	f640 030f 	movw	r3, #2063	; 0x80f
 8007f8e:	4013      	ands	r3, r2
 8007f90:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8007f92:	693b      	ldr	r3, [r7, #16]
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d113      	bne.n	8007fc0 <HAL_UART_IRQHandler+0x58>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8007f98:	69fb      	ldr	r3, [r7, #28]
 8007f9a:	f003 0320 	and.w	r3, r3, #32
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d00e      	beq.n	8007fc0 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007fa2:	69bb      	ldr	r3, [r7, #24]
 8007fa4:	f003 0320 	and.w	r3, r3, #32
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d009      	beq.n	8007fc0 <HAL_UART_IRQHandler+0x58>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	f000 81cf 	beq.w	8008354 <HAL_UART_IRQHandler+0x3ec>
      {
        huart->RxISR(huart);
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007fba:	6878      	ldr	r0, [r7, #4]
 8007fbc:	4798      	blx	r3
      }
      return;
 8007fbe:	e1c9      	b.n	8008354 <HAL_UART_IRQHandler+0x3ec>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8007fc0:	693b      	ldr	r3, [r7, #16]
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	f000 80e8 	beq.w	8008198 <HAL_UART_IRQHandler+0x230>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8007fc8:	697b      	ldr	r3, [r7, #20]
 8007fca:	f003 0301 	and.w	r3, r3, #1
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d105      	bne.n	8007fde <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8007fd2:	69ba      	ldr	r2, [r7, #24]
 8007fd4:	4b6e      	ldr	r3, [pc, #440]	; (8008190 <HAL_UART_IRQHandler+0x228>)
 8007fd6:	4013      	ands	r3, r2
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	f000 80dd 	beq.w	8008198 <HAL_UART_IRQHandler+0x230>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007fde:	69fb      	ldr	r3, [r7, #28]
 8007fe0:	f003 0301 	and.w	r3, r3, #1
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d010      	beq.n	800800a <HAL_UART_IRQHandler+0xa2>
 8007fe8:	69bb      	ldr	r3, [r7, #24]
 8007fea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d00b      	beq.n	800800a <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	2201      	movs	r2, #1
 8007ff8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008000:	f043 0201 	orr.w	r2, r3, #1
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800800a:	69fb      	ldr	r3, [r7, #28]
 800800c:	f003 0302 	and.w	r3, r3, #2
 8008010:	2b00      	cmp	r3, #0
 8008012:	d010      	beq.n	8008036 <HAL_UART_IRQHandler+0xce>
 8008014:	697b      	ldr	r3, [r7, #20]
 8008016:	f003 0301 	and.w	r3, r3, #1
 800801a:	2b00      	cmp	r3, #0
 800801c:	d00b      	beq.n	8008036 <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	2202      	movs	r2, #2
 8008024:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800802c:	f043 0204 	orr.w	r2, r3, #4
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008036:	69fb      	ldr	r3, [r7, #28]
 8008038:	f003 0304 	and.w	r3, r3, #4
 800803c:	2b00      	cmp	r3, #0
 800803e:	d010      	beq.n	8008062 <HAL_UART_IRQHandler+0xfa>
 8008040:	697b      	ldr	r3, [r7, #20]
 8008042:	f003 0301 	and.w	r3, r3, #1
 8008046:	2b00      	cmp	r3, #0
 8008048:	d00b      	beq.n	8008062 <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	2204      	movs	r2, #4
 8008050:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008058:	f043 0202 	orr.w	r2, r3, #2
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008062:	69fb      	ldr	r3, [r7, #28]
 8008064:	f003 0308 	and.w	r3, r3, #8
 8008068:	2b00      	cmp	r3, #0
 800806a:	d015      	beq.n	8008098 <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800806c:	69bb      	ldr	r3, [r7, #24]
 800806e:	f003 0320 	and.w	r3, r3, #32
 8008072:	2b00      	cmp	r3, #0
 8008074:	d104      	bne.n	8008080 <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8008076:	697b      	ldr	r3, [r7, #20]
 8008078:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800807c:	2b00      	cmp	r3, #0
 800807e:	d00b      	beq.n	8008098 <HAL_UART_IRQHandler+0x130>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	2208      	movs	r2, #8
 8008086:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800808e:	f043 0208 	orr.w	r2, r3, #8
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008098:	69fb      	ldr	r3, [r7, #28]
 800809a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d011      	beq.n	80080c6 <HAL_UART_IRQHandler+0x15e>
 80080a2:	69bb      	ldr	r3, [r7, #24]
 80080a4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d00c      	beq.n	80080c6 <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80080b4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80080bc:	f043 0220 	orr.w	r2, r3, #32
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	f000 8143 	beq.w	8008358 <HAL_UART_IRQHandler+0x3f0>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80080d2:	69fb      	ldr	r3, [r7, #28]
 80080d4:	f003 0320 	and.w	r3, r3, #32
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d00c      	beq.n	80080f6 <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80080dc:	69bb      	ldr	r3, [r7, #24]
 80080de:	f003 0320 	and.w	r3, r3, #32
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d007      	beq.n	80080f6 <HAL_UART_IRQHandler+0x18e>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d003      	beq.n	80080f6 <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80080f2:	6878      	ldr	r0, [r7, #4]
 80080f4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80080fc:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	689b      	ldr	r3, [r3, #8]
 8008104:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008108:	2b40      	cmp	r3, #64	; 0x40
 800810a:	d004      	beq.n	8008116 <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008112:	2b00      	cmp	r3, #0
 8008114:	d031      	beq.n	800817a <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008116:	6878      	ldr	r0, [r7, #4]
 8008118:	f000 fdf2 	bl	8008d00 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	689b      	ldr	r3, [r3, #8]
 8008122:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008126:	2b40      	cmp	r3, #64	; 0x40
 8008128:	d123      	bne.n	8008172 <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	689a      	ldr	r2, [r3, #8]
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008138:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800813e:	2b00      	cmp	r3, #0
 8008140:	d013      	beq.n	800816a <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008146:	4a13      	ldr	r2, [pc, #76]	; (8008194 <HAL_UART_IRQHandler+0x22c>)
 8008148:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800814e:	4618      	mov	r0, r3
 8008150:	f7fa fe12 	bl	8002d78 <HAL_DMA_Abort_IT>
 8008154:	4603      	mov	r3, r0
 8008156:	2b00      	cmp	r3, #0
 8008158:	d017      	beq.n	800818a <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800815e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008160:	687a      	ldr	r2, [r7, #4]
 8008162:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8008164:	4610      	mov	r0, r2
 8008166:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008168:	e00f      	b.n	800818a <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800816a:	6878      	ldr	r0, [r7, #4]
 800816c:	f000 f908 	bl	8008380 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008170:	e00b      	b.n	800818a <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008172:	6878      	ldr	r0, [r7, #4]
 8008174:	f000 f904 	bl	8008380 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008178:	e007      	b.n	800818a <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800817a:	6878      	ldr	r0, [r7, #4]
 800817c:	f000 f900 	bl	8008380 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	2200      	movs	r2, #0
 8008184:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8008188:	e0e6      	b.n	8008358 <HAL_UART_IRQHandler+0x3f0>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800818a:	bf00      	nop
    return;
 800818c:	e0e4      	b.n	8008358 <HAL_UART_IRQHandler+0x3f0>
 800818e:	bf00      	nop
 8008190:	04000120 	.word	0x04000120
 8008194:	08008d5f 	.word	0x08008d5f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800819c:	2b01      	cmp	r3, #1
 800819e:	f040 80a5 	bne.w	80082ec <HAL_UART_IRQHandler+0x384>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 80081a2:	69fb      	ldr	r3, [r7, #28]
 80081a4:	f003 0310 	and.w	r3, r3, #16
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	f000 809f 	beq.w	80082ec <HAL_UART_IRQHandler+0x384>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 80081ae:	69bb      	ldr	r3, [r7, #24]
 80081b0:	f003 0310 	and.w	r3, r3, #16
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	f000 8099 	beq.w	80082ec <HAL_UART_IRQHandler+0x384>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	2210      	movs	r2, #16
 80081c0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	689b      	ldr	r3, [r3, #8]
 80081c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081cc:	2b40      	cmp	r3, #64	; 0x40
 80081ce:	d154      	bne.n	800827a <HAL_UART_IRQHandler+0x312>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	685b      	ldr	r3, [r3, #4]
 80081d8:	813b      	strh	r3, [r7, #8]
      if (  (nb_remaining_rx_data > 0U)
 80081da:	893b      	ldrh	r3, [r7, #8]
 80081dc:	2b00      	cmp	r3, #0
 80081de:	f000 80bd 	beq.w	800835c <HAL_UART_IRQHandler+0x3f4>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80081e8:	893a      	ldrh	r2, [r7, #8]
 80081ea:	429a      	cmp	r2, r3
 80081ec:	f080 80b6 	bcs.w	800835c <HAL_UART_IRQHandler+0x3f4>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	893a      	ldrh	r2, [r7, #8]
 80081f4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	f003 0320 	and.w	r3, r3, #32
 8008204:	2b00      	cmp	r3, #0
 8008206:	d12a      	bne.n	800825e <HAL_UART_IRQHandler+0x2f6>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	681a      	ldr	r2, [r3, #0]
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008216:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	689a      	ldr	r2, [r3, #8]
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	f022 0201 	bic.w	r2, r2, #1
 8008226:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	689a      	ldr	r2, [r3, #8]
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008236:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	2220      	movs	r2, #32
 800823c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	2200      	movs	r2, #0
 8008242:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	681a      	ldr	r2, [r3, #0]
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	f022 0210 	bic.w	r2, r2, #16
 8008252:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008258:	4618      	mov	r0, r3
 800825a:	f7fa fd4f 	bl	8002cfc <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800826a:	b29b      	uxth	r3, r3
 800826c:	1ad3      	subs	r3, r2, r3
 800826e:	b29b      	uxth	r3, r3
 8008270:	4619      	mov	r1, r3
 8008272:	6878      	ldr	r0, [r7, #4]
 8008274:	f000 f88e 	bl	8008394 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8008278:	e070      	b.n	800835c <HAL_UART_IRQHandler+0x3f4>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008286:	b29b      	uxth	r3, r3
 8008288:	1ad3      	subs	r3, r2, r3
 800828a:	817b      	strh	r3, [r7, #10]
      if (  (huart->RxXferCount > 0U)
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008292:	b29b      	uxth	r3, r3
 8008294:	2b00      	cmp	r3, #0
 8008296:	d063      	beq.n	8008360 <HAL_UART_IRQHandler+0x3f8>
          &&(nb_rx_data > 0U) )
 8008298:	897b      	ldrh	r3, [r7, #10]
 800829a:	2b00      	cmp	r3, #0
 800829c:	d060      	beq.n	8008360 <HAL_UART_IRQHandler+0x3f8>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	681a      	ldr	r2, [r3, #0]
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80082ac:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	689a      	ldr	r2, [r3, #8]
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	f022 0201 	bic.w	r2, r2, #1
 80082bc:	609a      	str	r2, [r3, #8]
#endif

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	2220      	movs	r2, #32
 80082c2:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	2200      	movs	r2, #0
 80082c8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	2200      	movs	r2, #0
 80082ce:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	681a      	ldr	r2, [r3, #0]
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	f022 0210 	bic.w	r2, r2, #16
 80082de:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80082e0:	897b      	ldrh	r3, [r7, #10]
 80082e2:	4619      	mov	r1, r3
 80082e4:	6878      	ldr	r0, [r7, #4]
 80082e6:	f000 f855 	bl	8008394 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80082ea:	e039      	b.n	8008360 <HAL_UART_IRQHandler+0x3f8>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80082ec:	69fb      	ldr	r3, [r7, #28]
 80082ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d00d      	beq.n	8008312 <HAL_UART_IRQHandler+0x3aa>
 80082f6:	697b      	ldr	r3, [r7, #20]
 80082f8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d008      	beq.n	8008312 <HAL_UART_IRQHandler+0x3aa>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8008308:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800830a:	6878      	ldr	r0, [r7, #4]
 800830c:	f000 fe2e 	bl	8008f6c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008310:	e029      	b.n	8008366 <HAL_UART_IRQHandler+0x3fe>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8008312:	69fb      	ldr	r3, [r7, #28]
 8008314:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008318:	2b00      	cmp	r3, #0
 800831a:	d00d      	beq.n	8008338 <HAL_UART_IRQHandler+0x3d0>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800831c:	69bb      	ldr	r3, [r7, #24]
 800831e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008322:	2b00      	cmp	r3, #0
 8008324:	d008      	beq.n	8008338 <HAL_UART_IRQHandler+0x3d0>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800832a:	2b00      	cmp	r3, #0
 800832c:	d01a      	beq.n	8008364 <HAL_UART_IRQHandler+0x3fc>
    {
      huart->TxISR(huart);
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008332:	6878      	ldr	r0, [r7, #4]
 8008334:	4798      	blx	r3
    }
    return;
 8008336:	e015      	b.n	8008364 <HAL_UART_IRQHandler+0x3fc>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008338:	69fb      	ldr	r3, [r7, #28]
 800833a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800833e:	2b00      	cmp	r3, #0
 8008340:	d011      	beq.n	8008366 <HAL_UART_IRQHandler+0x3fe>
 8008342:	69bb      	ldr	r3, [r7, #24]
 8008344:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008348:	2b00      	cmp	r3, #0
 800834a:	d00c      	beq.n	8008366 <HAL_UART_IRQHandler+0x3fe>
  {
    UART_EndTransmit_IT(huart);
 800834c:	6878      	ldr	r0, [r7, #4]
 800834e:	f000 fd1c 	bl	8008d8a <UART_EndTransmit_IT>
    return;
 8008352:	e008      	b.n	8008366 <HAL_UART_IRQHandler+0x3fe>
      return;
 8008354:	bf00      	nop
 8008356:	e006      	b.n	8008366 <HAL_UART_IRQHandler+0x3fe>
    return;
 8008358:	bf00      	nop
 800835a:	e004      	b.n	8008366 <HAL_UART_IRQHandler+0x3fe>
      return;
 800835c:	bf00      	nop
 800835e:	e002      	b.n	8008366 <HAL_UART_IRQHandler+0x3fe>
      return;
 8008360:	bf00      	nop
 8008362:	e000      	b.n	8008366 <HAL_UART_IRQHandler+0x3fe>
    return;
 8008364:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8008366:	3720      	adds	r7, #32
 8008368:	46bd      	mov	sp, r7
 800836a:	bd80      	pop	{r7, pc}

0800836c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800836c:	b480      	push	{r7}
 800836e:	b083      	sub	sp, #12
 8008370:	af00      	add	r7, sp, #0
 8008372:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008374:	bf00      	nop
 8008376:	370c      	adds	r7, #12
 8008378:	46bd      	mov	sp, r7
 800837a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800837e:	4770      	bx	lr

08008380 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008380:	b480      	push	{r7}
 8008382:	b083      	sub	sp, #12
 8008384:	af00      	add	r7, sp, #0
 8008386:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008388:	bf00      	nop
 800838a:	370c      	adds	r7, #12
 800838c:	46bd      	mov	sp, r7
 800838e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008392:	4770      	bx	lr

08008394 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008394:	b480      	push	{r7}
 8008396:	b083      	sub	sp, #12
 8008398:	af00      	add	r7, sp, #0
 800839a:	6078      	str	r0, [r7, #4]
 800839c:	460b      	mov	r3, r1
 800839e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80083a0:	bf00      	nop
 80083a2:	370c      	adds	r7, #12
 80083a4:	46bd      	mov	sp, r7
 80083a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083aa:	4770      	bx	lr

080083ac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80083ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80083b0:	b08a      	sub	sp, #40	; 0x28
 80083b2:	af00      	add	r7, sp, #0
 80083b4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80083b6:	2300      	movs	r3, #0
 80083b8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	689a      	ldr	r2, [r3, #8]
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	691b      	ldr	r3, [r3, #16]
 80083c4:	431a      	orrs	r2, r3
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	695b      	ldr	r3, [r3, #20]
 80083ca:	431a      	orrs	r2, r3
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	69db      	ldr	r3, [r3, #28]
 80083d0:	4313      	orrs	r3, r2
 80083d2:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	681a      	ldr	r2, [r3, #0]
 80083da:	4ba4      	ldr	r3, [pc, #656]	; (800866c <UART_SetConfig+0x2c0>)
 80083dc:	4013      	ands	r3, r2
 80083de:	68fa      	ldr	r2, [r7, #12]
 80083e0:	6812      	ldr	r2, [r2, #0]
 80083e2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80083e4:	430b      	orrs	r3, r1
 80083e6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	685b      	ldr	r3, [r3, #4]
 80083ee:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	68da      	ldr	r2, [r3, #12]
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	430a      	orrs	r2, r1
 80083fc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	699b      	ldr	r3, [r3, #24]
 8008402:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	4a99      	ldr	r2, [pc, #612]	; (8008670 <UART_SetConfig+0x2c4>)
 800840a:	4293      	cmp	r3, r2
 800840c:	d004      	beq.n	8008418 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	6a1b      	ldr	r3, [r3, #32]
 8008412:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008414:	4313      	orrs	r3, r2
 8008416:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	689b      	ldr	r3, [r3, #8]
 800841e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008428:	430a      	orrs	r2, r1
 800842a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	4a90      	ldr	r2, [pc, #576]	; (8008674 <UART_SetConfig+0x2c8>)
 8008432:	4293      	cmp	r3, r2
 8008434:	d126      	bne.n	8008484 <UART_SetConfig+0xd8>
 8008436:	4b90      	ldr	r3, [pc, #576]	; (8008678 <UART_SetConfig+0x2cc>)
 8008438:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800843c:	f003 0303 	and.w	r3, r3, #3
 8008440:	2b03      	cmp	r3, #3
 8008442:	d81b      	bhi.n	800847c <UART_SetConfig+0xd0>
 8008444:	a201      	add	r2, pc, #4	; (adr r2, 800844c <UART_SetConfig+0xa0>)
 8008446:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800844a:	bf00      	nop
 800844c:	0800845d 	.word	0x0800845d
 8008450:	0800846d 	.word	0x0800846d
 8008454:	08008465 	.word	0x08008465
 8008458:	08008475 	.word	0x08008475
 800845c:	2301      	movs	r3, #1
 800845e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008462:	e116      	b.n	8008692 <UART_SetConfig+0x2e6>
 8008464:	2302      	movs	r3, #2
 8008466:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800846a:	e112      	b.n	8008692 <UART_SetConfig+0x2e6>
 800846c:	2304      	movs	r3, #4
 800846e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008472:	e10e      	b.n	8008692 <UART_SetConfig+0x2e6>
 8008474:	2308      	movs	r3, #8
 8008476:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800847a:	e10a      	b.n	8008692 <UART_SetConfig+0x2e6>
 800847c:	2310      	movs	r3, #16
 800847e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008482:	e106      	b.n	8008692 <UART_SetConfig+0x2e6>
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	4a7c      	ldr	r2, [pc, #496]	; (800867c <UART_SetConfig+0x2d0>)
 800848a:	4293      	cmp	r3, r2
 800848c:	d138      	bne.n	8008500 <UART_SetConfig+0x154>
 800848e:	4b7a      	ldr	r3, [pc, #488]	; (8008678 <UART_SetConfig+0x2cc>)
 8008490:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008494:	f003 030c 	and.w	r3, r3, #12
 8008498:	2b0c      	cmp	r3, #12
 800849a:	d82d      	bhi.n	80084f8 <UART_SetConfig+0x14c>
 800849c:	a201      	add	r2, pc, #4	; (adr r2, 80084a4 <UART_SetConfig+0xf8>)
 800849e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084a2:	bf00      	nop
 80084a4:	080084d9 	.word	0x080084d9
 80084a8:	080084f9 	.word	0x080084f9
 80084ac:	080084f9 	.word	0x080084f9
 80084b0:	080084f9 	.word	0x080084f9
 80084b4:	080084e9 	.word	0x080084e9
 80084b8:	080084f9 	.word	0x080084f9
 80084bc:	080084f9 	.word	0x080084f9
 80084c0:	080084f9 	.word	0x080084f9
 80084c4:	080084e1 	.word	0x080084e1
 80084c8:	080084f9 	.word	0x080084f9
 80084cc:	080084f9 	.word	0x080084f9
 80084d0:	080084f9 	.word	0x080084f9
 80084d4:	080084f1 	.word	0x080084f1
 80084d8:	2300      	movs	r3, #0
 80084da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80084de:	e0d8      	b.n	8008692 <UART_SetConfig+0x2e6>
 80084e0:	2302      	movs	r3, #2
 80084e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80084e6:	e0d4      	b.n	8008692 <UART_SetConfig+0x2e6>
 80084e8:	2304      	movs	r3, #4
 80084ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80084ee:	e0d0      	b.n	8008692 <UART_SetConfig+0x2e6>
 80084f0:	2308      	movs	r3, #8
 80084f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80084f6:	e0cc      	b.n	8008692 <UART_SetConfig+0x2e6>
 80084f8:	2310      	movs	r3, #16
 80084fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80084fe:	e0c8      	b.n	8008692 <UART_SetConfig+0x2e6>
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	4a5e      	ldr	r2, [pc, #376]	; (8008680 <UART_SetConfig+0x2d4>)
 8008506:	4293      	cmp	r3, r2
 8008508:	d125      	bne.n	8008556 <UART_SetConfig+0x1aa>
 800850a:	4b5b      	ldr	r3, [pc, #364]	; (8008678 <UART_SetConfig+0x2cc>)
 800850c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008510:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008514:	2b30      	cmp	r3, #48	; 0x30
 8008516:	d016      	beq.n	8008546 <UART_SetConfig+0x19a>
 8008518:	2b30      	cmp	r3, #48	; 0x30
 800851a:	d818      	bhi.n	800854e <UART_SetConfig+0x1a2>
 800851c:	2b20      	cmp	r3, #32
 800851e:	d00a      	beq.n	8008536 <UART_SetConfig+0x18a>
 8008520:	2b20      	cmp	r3, #32
 8008522:	d814      	bhi.n	800854e <UART_SetConfig+0x1a2>
 8008524:	2b00      	cmp	r3, #0
 8008526:	d002      	beq.n	800852e <UART_SetConfig+0x182>
 8008528:	2b10      	cmp	r3, #16
 800852a:	d008      	beq.n	800853e <UART_SetConfig+0x192>
 800852c:	e00f      	b.n	800854e <UART_SetConfig+0x1a2>
 800852e:	2300      	movs	r3, #0
 8008530:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008534:	e0ad      	b.n	8008692 <UART_SetConfig+0x2e6>
 8008536:	2302      	movs	r3, #2
 8008538:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800853c:	e0a9      	b.n	8008692 <UART_SetConfig+0x2e6>
 800853e:	2304      	movs	r3, #4
 8008540:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008544:	e0a5      	b.n	8008692 <UART_SetConfig+0x2e6>
 8008546:	2308      	movs	r3, #8
 8008548:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800854c:	e0a1      	b.n	8008692 <UART_SetConfig+0x2e6>
 800854e:	2310      	movs	r3, #16
 8008550:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008554:	e09d      	b.n	8008692 <UART_SetConfig+0x2e6>
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	4a4a      	ldr	r2, [pc, #296]	; (8008684 <UART_SetConfig+0x2d8>)
 800855c:	4293      	cmp	r3, r2
 800855e:	d125      	bne.n	80085ac <UART_SetConfig+0x200>
 8008560:	4b45      	ldr	r3, [pc, #276]	; (8008678 <UART_SetConfig+0x2cc>)
 8008562:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008566:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800856a:	2bc0      	cmp	r3, #192	; 0xc0
 800856c:	d016      	beq.n	800859c <UART_SetConfig+0x1f0>
 800856e:	2bc0      	cmp	r3, #192	; 0xc0
 8008570:	d818      	bhi.n	80085a4 <UART_SetConfig+0x1f8>
 8008572:	2b80      	cmp	r3, #128	; 0x80
 8008574:	d00a      	beq.n	800858c <UART_SetConfig+0x1e0>
 8008576:	2b80      	cmp	r3, #128	; 0x80
 8008578:	d814      	bhi.n	80085a4 <UART_SetConfig+0x1f8>
 800857a:	2b00      	cmp	r3, #0
 800857c:	d002      	beq.n	8008584 <UART_SetConfig+0x1d8>
 800857e:	2b40      	cmp	r3, #64	; 0x40
 8008580:	d008      	beq.n	8008594 <UART_SetConfig+0x1e8>
 8008582:	e00f      	b.n	80085a4 <UART_SetConfig+0x1f8>
 8008584:	2300      	movs	r3, #0
 8008586:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800858a:	e082      	b.n	8008692 <UART_SetConfig+0x2e6>
 800858c:	2302      	movs	r3, #2
 800858e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008592:	e07e      	b.n	8008692 <UART_SetConfig+0x2e6>
 8008594:	2304      	movs	r3, #4
 8008596:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800859a:	e07a      	b.n	8008692 <UART_SetConfig+0x2e6>
 800859c:	2308      	movs	r3, #8
 800859e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80085a2:	e076      	b.n	8008692 <UART_SetConfig+0x2e6>
 80085a4:	2310      	movs	r3, #16
 80085a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80085aa:	e072      	b.n	8008692 <UART_SetConfig+0x2e6>
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	4a35      	ldr	r2, [pc, #212]	; (8008688 <UART_SetConfig+0x2dc>)
 80085b2:	4293      	cmp	r3, r2
 80085b4:	d12a      	bne.n	800860c <UART_SetConfig+0x260>
 80085b6:	4b30      	ldr	r3, [pc, #192]	; (8008678 <UART_SetConfig+0x2cc>)
 80085b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80085bc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80085c0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80085c4:	d01a      	beq.n	80085fc <UART_SetConfig+0x250>
 80085c6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80085ca:	d81b      	bhi.n	8008604 <UART_SetConfig+0x258>
 80085cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80085d0:	d00c      	beq.n	80085ec <UART_SetConfig+0x240>
 80085d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80085d6:	d815      	bhi.n	8008604 <UART_SetConfig+0x258>
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d003      	beq.n	80085e4 <UART_SetConfig+0x238>
 80085dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80085e0:	d008      	beq.n	80085f4 <UART_SetConfig+0x248>
 80085e2:	e00f      	b.n	8008604 <UART_SetConfig+0x258>
 80085e4:	2300      	movs	r3, #0
 80085e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80085ea:	e052      	b.n	8008692 <UART_SetConfig+0x2e6>
 80085ec:	2302      	movs	r3, #2
 80085ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80085f2:	e04e      	b.n	8008692 <UART_SetConfig+0x2e6>
 80085f4:	2304      	movs	r3, #4
 80085f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80085fa:	e04a      	b.n	8008692 <UART_SetConfig+0x2e6>
 80085fc:	2308      	movs	r3, #8
 80085fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008602:	e046      	b.n	8008692 <UART_SetConfig+0x2e6>
 8008604:	2310      	movs	r3, #16
 8008606:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800860a:	e042      	b.n	8008692 <UART_SetConfig+0x2e6>
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	4a17      	ldr	r2, [pc, #92]	; (8008670 <UART_SetConfig+0x2c4>)
 8008612:	4293      	cmp	r3, r2
 8008614:	d13a      	bne.n	800868c <UART_SetConfig+0x2e0>
 8008616:	4b18      	ldr	r3, [pc, #96]	; (8008678 <UART_SetConfig+0x2cc>)
 8008618:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800861c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008620:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008624:	d01a      	beq.n	800865c <UART_SetConfig+0x2b0>
 8008626:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800862a:	d81b      	bhi.n	8008664 <UART_SetConfig+0x2b8>
 800862c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008630:	d00c      	beq.n	800864c <UART_SetConfig+0x2a0>
 8008632:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008636:	d815      	bhi.n	8008664 <UART_SetConfig+0x2b8>
 8008638:	2b00      	cmp	r3, #0
 800863a:	d003      	beq.n	8008644 <UART_SetConfig+0x298>
 800863c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008640:	d008      	beq.n	8008654 <UART_SetConfig+0x2a8>
 8008642:	e00f      	b.n	8008664 <UART_SetConfig+0x2b8>
 8008644:	2300      	movs	r3, #0
 8008646:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800864a:	e022      	b.n	8008692 <UART_SetConfig+0x2e6>
 800864c:	2302      	movs	r3, #2
 800864e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008652:	e01e      	b.n	8008692 <UART_SetConfig+0x2e6>
 8008654:	2304      	movs	r3, #4
 8008656:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800865a:	e01a      	b.n	8008692 <UART_SetConfig+0x2e6>
 800865c:	2308      	movs	r3, #8
 800865e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008662:	e016      	b.n	8008692 <UART_SetConfig+0x2e6>
 8008664:	2310      	movs	r3, #16
 8008666:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800866a:	e012      	b.n	8008692 <UART_SetConfig+0x2e6>
 800866c:	efff69f3 	.word	0xefff69f3
 8008670:	40008000 	.word	0x40008000
 8008674:	40013800 	.word	0x40013800
 8008678:	40021000 	.word	0x40021000
 800867c:	40004400 	.word	0x40004400
 8008680:	40004800 	.word	0x40004800
 8008684:	40004c00 	.word	0x40004c00
 8008688:	40005000 	.word	0x40005000
 800868c:	2310      	movs	r3, #16
 800868e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	4aa0      	ldr	r2, [pc, #640]	; (8008918 <UART_SetConfig+0x56c>)
 8008698:	4293      	cmp	r3, r2
 800869a:	d17a      	bne.n	8008792 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800869c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80086a0:	2b08      	cmp	r3, #8
 80086a2:	d824      	bhi.n	80086ee <UART_SetConfig+0x342>
 80086a4:	a201      	add	r2, pc, #4	; (adr r2, 80086ac <UART_SetConfig+0x300>)
 80086a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086aa:	bf00      	nop
 80086ac:	080086d1 	.word	0x080086d1
 80086b0:	080086ef 	.word	0x080086ef
 80086b4:	080086d9 	.word	0x080086d9
 80086b8:	080086ef 	.word	0x080086ef
 80086bc:	080086df 	.word	0x080086df
 80086c0:	080086ef 	.word	0x080086ef
 80086c4:	080086ef 	.word	0x080086ef
 80086c8:	080086ef 	.word	0x080086ef
 80086cc:	080086e7 	.word	0x080086e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80086d0:	f7fc fc04 	bl	8004edc <HAL_RCC_GetPCLK1Freq>
 80086d4:	61f8      	str	r0, [r7, #28]
        break;
 80086d6:	e010      	b.n	80086fa <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80086d8:	4b90      	ldr	r3, [pc, #576]	; (800891c <UART_SetConfig+0x570>)
 80086da:	61fb      	str	r3, [r7, #28]
        break;
 80086dc:	e00d      	b.n	80086fa <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80086de:	f7fc fb65 	bl	8004dac <HAL_RCC_GetSysClockFreq>
 80086e2:	61f8      	str	r0, [r7, #28]
        break;
 80086e4:	e009      	b.n	80086fa <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80086e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80086ea:	61fb      	str	r3, [r7, #28]
        break;
 80086ec:	e005      	b.n	80086fa <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80086ee:	2300      	movs	r3, #0
 80086f0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80086f2:	2301      	movs	r3, #1
 80086f4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80086f8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80086fa:	69fb      	ldr	r3, [r7, #28]
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	f000 80fd 	beq.w	80088fc <UART_SetConfig+0x550>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	685a      	ldr	r2, [r3, #4]
 8008706:	4613      	mov	r3, r2
 8008708:	005b      	lsls	r3, r3, #1
 800870a:	4413      	add	r3, r2
 800870c:	69fa      	ldr	r2, [r7, #28]
 800870e:	429a      	cmp	r2, r3
 8008710:	d305      	bcc.n	800871e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	685b      	ldr	r3, [r3, #4]
 8008716:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8008718:	69fa      	ldr	r2, [r7, #28]
 800871a:	429a      	cmp	r2, r3
 800871c:	d903      	bls.n	8008726 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800871e:	2301      	movs	r3, #1
 8008720:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8008724:	e0ea      	b.n	80088fc <UART_SetConfig+0x550>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8008726:	69fb      	ldr	r3, [r7, #28]
 8008728:	2200      	movs	r2, #0
 800872a:	461c      	mov	r4, r3
 800872c:	4615      	mov	r5, r2
 800872e:	f04f 0200 	mov.w	r2, #0
 8008732:	f04f 0300 	mov.w	r3, #0
 8008736:	022b      	lsls	r3, r5, #8
 8008738:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800873c:	0222      	lsls	r2, r4, #8
 800873e:	68f9      	ldr	r1, [r7, #12]
 8008740:	6849      	ldr	r1, [r1, #4]
 8008742:	0849      	lsrs	r1, r1, #1
 8008744:	2000      	movs	r0, #0
 8008746:	4688      	mov	r8, r1
 8008748:	4681      	mov	r9, r0
 800874a:	eb12 0a08 	adds.w	sl, r2, r8
 800874e:	eb43 0b09 	adc.w	fp, r3, r9
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	685b      	ldr	r3, [r3, #4]
 8008756:	2200      	movs	r2, #0
 8008758:	603b      	str	r3, [r7, #0]
 800875a:	607a      	str	r2, [r7, #4]
 800875c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008760:	4650      	mov	r0, sl
 8008762:	4659      	mov	r1, fp
 8008764:	f7f7 fd8c 	bl	8000280 <__aeabi_uldivmod>
 8008768:	4602      	mov	r2, r0
 800876a:	460b      	mov	r3, r1
 800876c:	4613      	mov	r3, r2
 800876e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008770:	69bb      	ldr	r3, [r7, #24]
 8008772:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008776:	d308      	bcc.n	800878a <UART_SetConfig+0x3de>
 8008778:	69bb      	ldr	r3, [r7, #24]
 800877a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800877e:	d204      	bcs.n	800878a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	69ba      	ldr	r2, [r7, #24]
 8008786:	60da      	str	r2, [r3, #12]
 8008788:	e0b8      	b.n	80088fc <UART_SetConfig+0x550>
        }
        else
        {
          ret = HAL_ERROR;
 800878a:	2301      	movs	r3, #1
 800878c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8008790:	e0b4      	b.n	80088fc <UART_SetConfig+0x550>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	69db      	ldr	r3, [r3, #28]
 8008796:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800879a:	d15f      	bne.n	800885c <UART_SetConfig+0x4b0>
  {
    switch (clocksource)
 800879c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80087a0:	2b08      	cmp	r3, #8
 80087a2:	d828      	bhi.n	80087f6 <UART_SetConfig+0x44a>
 80087a4:	a201      	add	r2, pc, #4	; (adr r2, 80087ac <UART_SetConfig+0x400>)
 80087a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087aa:	bf00      	nop
 80087ac:	080087d1 	.word	0x080087d1
 80087b0:	080087d9 	.word	0x080087d9
 80087b4:	080087e1 	.word	0x080087e1
 80087b8:	080087f7 	.word	0x080087f7
 80087bc:	080087e7 	.word	0x080087e7
 80087c0:	080087f7 	.word	0x080087f7
 80087c4:	080087f7 	.word	0x080087f7
 80087c8:	080087f7 	.word	0x080087f7
 80087cc:	080087ef 	.word	0x080087ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80087d0:	f7fc fb84 	bl	8004edc <HAL_RCC_GetPCLK1Freq>
 80087d4:	61f8      	str	r0, [r7, #28]
        break;
 80087d6:	e014      	b.n	8008802 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80087d8:	f7fc fb96 	bl	8004f08 <HAL_RCC_GetPCLK2Freq>
 80087dc:	61f8      	str	r0, [r7, #28]
        break;
 80087de:	e010      	b.n	8008802 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80087e0:	4b4e      	ldr	r3, [pc, #312]	; (800891c <UART_SetConfig+0x570>)
 80087e2:	61fb      	str	r3, [r7, #28]
        break;
 80087e4:	e00d      	b.n	8008802 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80087e6:	f7fc fae1 	bl	8004dac <HAL_RCC_GetSysClockFreq>
 80087ea:	61f8      	str	r0, [r7, #28]
        break;
 80087ec:	e009      	b.n	8008802 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80087ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80087f2:	61fb      	str	r3, [r7, #28]
        break;
 80087f4:	e005      	b.n	8008802 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80087f6:	2300      	movs	r3, #0
 80087f8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80087fa:	2301      	movs	r3, #1
 80087fc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8008800:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008802:	69fb      	ldr	r3, [r7, #28]
 8008804:	2b00      	cmp	r3, #0
 8008806:	d079      	beq.n	80088fc <UART_SetConfig+0x550>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008808:	69fb      	ldr	r3, [r7, #28]
 800880a:	005a      	lsls	r2, r3, #1
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	685b      	ldr	r3, [r3, #4]
 8008810:	085b      	lsrs	r3, r3, #1
 8008812:	441a      	add	r2, r3
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	685b      	ldr	r3, [r3, #4]
 8008818:	fbb2 f3f3 	udiv	r3, r2, r3
 800881c:	b29b      	uxth	r3, r3
 800881e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008820:	69bb      	ldr	r3, [r7, #24]
 8008822:	2b0f      	cmp	r3, #15
 8008824:	d916      	bls.n	8008854 <UART_SetConfig+0x4a8>
 8008826:	69bb      	ldr	r3, [r7, #24]
 8008828:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800882c:	d212      	bcs.n	8008854 <UART_SetConfig+0x4a8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800882e:	69bb      	ldr	r3, [r7, #24]
 8008830:	b29b      	uxth	r3, r3
 8008832:	f023 030f 	bic.w	r3, r3, #15
 8008836:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008838:	69bb      	ldr	r3, [r7, #24]
 800883a:	085b      	lsrs	r3, r3, #1
 800883c:	b29b      	uxth	r3, r3
 800883e:	f003 0307 	and.w	r3, r3, #7
 8008842:	b29a      	uxth	r2, r3
 8008844:	8afb      	ldrh	r3, [r7, #22]
 8008846:	4313      	orrs	r3, r2
 8008848:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	8afa      	ldrh	r2, [r7, #22]
 8008850:	60da      	str	r2, [r3, #12]
 8008852:	e053      	b.n	80088fc <UART_SetConfig+0x550>
      }
      else
      {
        ret = HAL_ERROR;
 8008854:	2301      	movs	r3, #1
 8008856:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800885a:	e04f      	b.n	80088fc <UART_SetConfig+0x550>
      }
    }
  }
  else
  {
    switch (clocksource)
 800885c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008860:	2b08      	cmp	r3, #8
 8008862:	d828      	bhi.n	80088b6 <UART_SetConfig+0x50a>
 8008864:	a201      	add	r2, pc, #4	; (adr r2, 800886c <UART_SetConfig+0x4c0>)
 8008866:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800886a:	bf00      	nop
 800886c:	08008891 	.word	0x08008891
 8008870:	08008899 	.word	0x08008899
 8008874:	080088a1 	.word	0x080088a1
 8008878:	080088b7 	.word	0x080088b7
 800887c:	080088a7 	.word	0x080088a7
 8008880:	080088b7 	.word	0x080088b7
 8008884:	080088b7 	.word	0x080088b7
 8008888:	080088b7 	.word	0x080088b7
 800888c:	080088af 	.word	0x080088af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008890:	f7fc fb24 	bl	8004edc <HAL_RCC_GetPCLK1Freq>
 8008894:	61f8      	str	r0, [r7, #28]
        break;
 8008896:	e014      	b.n	80088c2 <UART_SetConfig+0x516>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008898:	f7fc fb36 	bl	8004f08 <HAL_RCC_GetPCLK2Freq>
 800889c:	61f8      	str	r0, [r7, #28]
        break;
 800889e:	e010      	b.n	80088c2 <UART_SetConfig+0x516>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80088a0:	4b1e      	ldr	r3, [pc, #120]	; (800891c <UART_SetConfig+0x570>)
 80088a2:	61fb      	str	r3, [r7, #28]
        break;
 80088a4:	e00d      	b.n	80088c2 <UART_SetConfig+0x516>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80088a6:	f7fc fa81 	bl	8004dac <HAL_RCC_GetSysClockFreq>
 80088aa:	61f8      	str	r0, [r7, #28]
        break;
 80088ac:	e009      	b.n	80088c2 <UART_SetConfig+0x516>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80088ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80088b2:	61fb      	str	r3, [r7, #28]
        break;
 80088b4:	e005      	b.n	80088c2 <UART_SetConfig+0x516>
      default:
        pclk = 0U;
 80088b6:	2300      	movs	r3, #0
 80088b8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80088ba:	2301      	movs	r3, #1
 80088bc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80088c0:	bf00      	nop
    }

    if (pclk != 0U)
 80088c2:	69fb      	ldr	r3, [r7, #28]
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d019      	beq.n	80088fc <UART_SetConfig+0x550>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	685b      	ldr	r3, [r3, #4]
 80088cc:	085a      	lsrs	r2, r3, #1
 80088ce:	69fb      	ldr	r3, [r7, #28]
 80088d0:	441a      	add	r2, r3
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	685b      	ldr	r3, [r3, #4]
 80088d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80088da:	b29b      	uxth	r3, r3
 80088dc:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80088de:	69bb      	ldr	r3, [r7, #24]
 80088e0:	2b0f      	cmp	r3, #15
 80088e2:	d908      	bls.n	80088f6 <UART_SetConfig+0x54a>
 80088e4:	69bb      	ldr	r3, [r7, #24]
 80088e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80088ea:	d204      	bcs.n	80088f6 <UART_SetConfig+0x54a>
      {
        huart->Instance->BRR = usartdiv;
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	69ba      	ldr	r2, [r7, #24]
 80088f2:	60da      	str	r2, [r3, #12]
 80088f4:	e002      	b.n	80088fc <UART_SetConfig+0x550>
      }
      else
      {
        ret = HAL_ERROR;
 80088f6:	2301      	movs	r3, #1
 80088f8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	2200      	movs	r2, #0
 8008900:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	2200      	movs	r2, #0
 8008906:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8008908:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 800890c:	4618      	mov	r0, r3
 800890e:	3728      	adds	r7, #40	; 0x28
 8008910:	46bd      	mov	sp, r7
 8008912:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008916:	bf00      	nop
 8008918:	40008000 	.word	0x40008000
 800891c:	00f42400 	.word	0x00f42400

08008920 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008920:	b480      	push	{r7}
 8008922:	b083      	sub	sp, #12
 8008924:	af00      	add	r7, sp, #0
 8008926:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800892c:	f003 0301 	and.w	r3, r3, #1
 8008930:	2b00      	cmp	r3, #0
 8008932:	d00a      	beq.n	800894a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	685b      	ldr	r3, [r3, #4]
 800893a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	430a      	orrs	r2, r1
 8008948:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800894e:	f003 0302 	and.w	r3, r3, #2
 8008952:	2b00      	cmp	r3, #0
 8008954:	d00a      	beq.n	800896c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	685b      	ldr	r3, [r3, #4]
 800895c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	430a      	orrs	r2, r1
 800896a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008970:	f003 0304 	and.w	r3, r3, #4
 8008974:	2b00      	cmp	r3, #0
 8008976:	d00a      	beq.n	800898e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	685b      	ldr	r3, [r3, #4]
 800897e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	430a      	orrs	r2, r1
 800898c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008992:	f003 0308 	and.w	r3, r3, #8
 8008996:	2b00      	cmp	r3, #0
 8008998:	d00a      	beq.n	80089b0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	685b      	ldr	r3, [r3, #4]
 80089a0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	430a      	orrs	r2, r1
 80089ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089b4:	f003 0310 	and.w	r3, r3, #16
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d00a      	beq.n	80089d2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	689b      	ldr	r3, [r3, #8]
 80089c2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	430a      	orrs	r2, r1
 80089d0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089d6:	f003 0320 	and.w	r3, r3, #32
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d00a      	beq.n	80089f4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	689b      	ldr	r3, [r3, #8]
 80089e4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	430a      	orrs	r2, r1
 80089f2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d01a      	beq.n	8008a36 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	685b      	ldr	r3, [r3, #4]
 8008a06:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	430a      	orrs	r2, r1
 8008a14:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a1a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008a1e:	d10a      	bne.n	8008a36 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	685b      	ldr	r3, [r3, #4]
 8008a26:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	430a      	orrs	r2, r1
 8008a34:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d00a      	beq.n	8008a58 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	685b      	ldr	r3, [r3, #4]
 8008a48:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	430a      	orrs	r2, r1
 8008a56:	605a      	str	r2, [r3, #4]
  }
}
 8008a58:	bf00      	nop
 8008a5a:	370c      	adds	r7, #12
 8008a5c:	46bd      	mov	sp, r7
 8008a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a62:	4770      	bx	lr

08008a64 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008a64:	b580      	push	{r7, lr}
 8008a66:	b086      	sub	sp, #24
 8008a68:	af02      	add	r7, sp, #8
 8008a6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	2200      	movs	r2, #0
 8008a70:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008a74:	f7f9 fef2 	bl	800285c <HAL_GetTick>
 8008a78:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	f003 0308 	and.w	r3, r3, #8
 8008a84:	2b08      	cmp	r3, #8
 8008a86:	d10e      	bne.n	8008aa6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008a88:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008a8c:	9300      	str	r3, [sp, #0]
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	2200      	movs	r2, #0
 8008a92:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008a96:	6878      	ldr	r0, [r7, #4]
 8008a98:	f000 f82d 	bl	8008af6 <UART_WaitOnFlagUntilTimeout>
 8008a9c:	4603      	mov	r3, r0
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d001      	beq.n	8008aa6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008aa2:	2303      	movs	r3, #3
 8008aa4:	e023      	b.n	8008aee <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	f003 0304 	and.w	r3, r3, #4
 8008ab0:	2b04      	cmp	r3, #4
 8008ab2:	d10e      	bne.n	8008ad2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008ab4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008ab8:	9300      	str	r3, [sp, #0]
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	2200      	movs	r2, #0
 8008abe:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008ac2:	6878      	ldr	r0, [r7, #4]
 8008ac4:	f000 f817 	bl	8008af6 <UART_WaitOnFlagUntilTimeout>
 8008ac8:	4603      	mov	r3, r0
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d001      	beq.n	8008ad2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008ace:	2303      	movs	r3, #3
 8008ad0:	e00d      	b.n	8008aee <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	2220      	movs	r2, #32
 8008ad6:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	2220      	movs	r2, #32
 8008adc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	2200      	movs	r2, #0
 8008ae2:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	2200      	movs	r2, #0
 8008ae8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8008aec:	2300      	movs	r3, #0
}
 8008aee:	4618      	mov	r0, r3
 8008af0:	3710      	adds	r7, #16
 8008af2:	46bd      	mov	sp, r7
 8008af4:	bd80      	pop	{r7, pc}

08008af6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008af6:	b580      	push	{r7, lr}
 8008af8:	b084      	sub	sp, #16
 8008afa:	af00      	add	r7, sp, #0
 8008afc:	60f8      	str	r0, [r7, #12]
 8008afe:	60b9      	str	r1, [r7, #8]
 8008b00:	603b      	str	r3, [r7, #0]
 8008b02:	4613      	mov	r3, r2
 8008b04:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008b06:	e05e      	b.n	8008bc6 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008b08:	69bb      	ldr	r3, [r7, #24]
 8008b0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b0e:	d05a      	beq.n	8008bc6 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008b10:	f7f9 fea4 	bl	800285c <HAL_GetTick>
 8008b14:	4602      	mov	r2, r0
 8008b16:	683b      	ldr	r3, [r7, #0]
 8008b18:	1ad3      	subs	r3, r2, r3
 8008b1a:	69ba      	ldr	r2, [r7, #24]
 8008b1c:	429a      	cmp	r2, r3
 8008b1e:	d302      	bcc.n	8008b26 <UART_WaitOnFlagUntilTimeout+0x30>
 8008b20:	69bb      	ldr	r3, [r7, #24]
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d11b      	bne.n	8008b5e <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	681a      	ldr	r2, [r3, #0]
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008b34:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	689a      	ldr	r2, [r3, #8]
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	f022 0201 	bic.w	r2, r2, #1
 8008b44:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	2220      	movs	r2, #32
 8008b4a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	2220      	movs	r2, #32
 8008b50:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	2200      	movs	r2, #0
 8008b56:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8008b5a:	2303      	movs	r3, #3
 8008b5c:	e043      	b.n	8008be6 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	f003 0304 	and.w	r3, r3, #4
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d02c      	beq.n	8008bc6 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	69db      	ldr	r3, [r3, #28]
 8008b72:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008b76:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008b7a:	d124      	bne.n	8008bc6 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008b84:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	681a      	ldr	r2, [r3, #0]
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008b94:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	689a      	ldr	r2, [r3, #8]
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	f022 0201 	bic.w	r2, r2, #1
 8008ba4:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	2220      	movs	r2, #32
 8008baa:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	2220      	movs	r2, #32
 8008bb0:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	2220      	movs	r2, #32
 8008bb6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	2200      	movs	r2, #0
 8008bbe:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8008bc2:	2303      	movs	r3, #3
 8008bc4:	e00f      	b.n	8008be6 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	69da      	ldr	r2, [r3, #28]
 8008bcc:	68bb      	ldr	r3, [r7, #8]
 8008bce:	4013      	ands	r3, r2
 8008bd0:	68ba      	ldr	r2, [r7, #8]
 8008bd2:	429a      	cmp	r2, r3
 8008bd4:	bf0c      	ite	eq
 8008bd6:	2301      	moveq	r3, #1
 8008bd8:	2300      	movne	r3, #0
 8008bda:	b2db      	uxtb	r3, r3
 8008bdc:	461a      	mov	r2, r3
 8008bde:	79fb      	ldrb	r3, [r7, #7]
 8008be0:	429a      	cmp	r2, r3
 8008be2:	d091      	beq.n	8008b08 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008be4:	2300      	movs	r3, #0
}
 8008be6:	4618      	mov	r0, r3
 8008be8:	3710      	adds	r7, #16
 8008bea:	46bd      	mov	sp, r7
 8008bec:	bd80      	pop	{r7, pc}
	...

08008bf0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008bf0:	b480      	push	{r7}
 8008bf2:	b085      	sub	sp, #20
 8008bf4:	af00      	add	r7, sp, #0
 8008bf6:	60f8      	str	r0, [r7, #12]
 8008bf8:	60b9      	str	r1, [r7, #8]
 8008bfa:	4613      	mov	r3, r2
 8008bfc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	68ba      	ldr	r2, [r7, #8]
 8008c02:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	88fa      	ldrh	r2, [r7, #6]
 8008c08:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	88fa      	ldrh	r2, [r7, #6]
 8008c10:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	2200      	movs	r2, #0
 8008c18:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	689b      	ldr	r3, [r3, #8]
 8008c1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008c22:	d10e      	bne.n	8008c42 <UART_Start_Receive_IT+0x52>
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	691b      	ldr	r3, [r3, #16]
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d105      	bne.n	8008c38 <UART_Start_Receive_IT+0x48>
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8008c32:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008c36:	e02d      	b.n	8008c94 <UART_Start_Receive_IT+0xa4>
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	22ff      	movs	r2, #255	; 0xff
 8008c3c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008c40:	e028      	b.n	8008c94 <UART_Start_Receive_IT+0xa4>
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	689b      	ldr	r3, [r3, #8]
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d10d      	bne.n	8008c66 <UART_Start_Receive_IT+0x76>
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	691b      	ldr	r3, [r3, #16]
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d104      	bne.n	8008c5c <UART_Start_Receive_IT+0x6c>
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	22ff      	movs	r2, #255	; 0xff
 8008c56:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008c5a:	e01b      	b.n	8008c94 <UART_Start_Receive_IT+0xa4>
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	227f      	movs	r2, #127	; 0x7f
 8008c60:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008c64:	e016      	b.n	8008c94 <UART_Start_Receive_IT+0xa4>
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	689b      	ldr	r3, [r3, #8]
 8008c6a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008c6e:	d10d      	bne.n	8008c8c <UART_Start_Receive_IT+0x9c>
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	691b      	ldr	r3, [r3, #16]
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d104      	bne.n	8008c82 <UART_Start_Receive_IT+0x92>
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	227f      	movs	r2, #127	; 0x7f
 8008c7c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008c80:	e008      	b.n	8008c94 <UART_Start_Receive_IT+0xa4>
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	223f      	movs	r2, #63	; 0x3f
 8008c86:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008c8a:	e003      	b.n	8008c94 <UART_Start_Receive_IT+0xa4>
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	2200      	movs	r2, #0
 8008c90:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	2200      	movs	r2, #0
 8008c98:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	2222      	movs	r2, #34	; 0x22
 8008ca0:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	689a      	ldr	r2, [r3, #8]
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	f042 0201 	orr.w	r2, r2, #1
 8008cb0:	609a      	str	r2, [r3, #8]
    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	689b      	ldr	r3, [r3, #8]
 8008cb6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008cba:	d107      	bne.n	8008ccc <UART_Start_Receive_IT+0xdc>
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	691b      	ldr	r3, [r3, #16]
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d103      	bne.n	8008ccc <UART_Start_Receive_IT+0xdc>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	4a0c      	ldr	r2, [pc, #48]	; (8008cf8 <UART_Start_Receive_IT+0x108>)
 8008cc8:	665a      	str	r2, [r3, #100]	; 0x64
 8008cca:	e002      	b.n	8008cd2 <UART_Start_Receive_IT+0xe2>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	4a0b      	ldr	r2, [pc, #44]	; (8008cfc <UART_Start_Receive_IT+0x10c>)
 8008cd0:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	2200      	movs	r2, #0
 8008cd6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	681a      	ldr	r2, [r3, #0]
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8008ce8:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8008cea:	2300      	movs	r3, #0
}
 8008cec:	4618      	mov	r0, r3
 8008cee:	3714      	adds	r7, #20
 8008cf0:	46bd      	mov	sp, r7
 8008cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf6:	4770      	bx	lr
 8008cf8:	08008e95 	.word	0x08008e95
 8008cfc:	08008dbd 	.word	0x08008dbd

08008d00 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008d00:	b480      	push	{r7}
 8008d02:	b083      	sub	sp, #12
 8008d04:	af00      	add	r7, sp, #0
 8008d06:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	681a      	ldr	r2, [r3, #0]
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008d16:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	689a      	ldr	r2, [r3, #8]
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	f022 0201 	bic.w	r2, r2, #1
 8008d26:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008d2c:	2b01      	cmp	r3, #1
 8008d2e:	d107      	bne.n	8008d40 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	681a      	ldr	r2, [r3, #0]
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	f022 0210 	bic.w	r2, r2, #16
 8008d3e:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	2220      	movs	r2, #32
 8008d44:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	2200      	movs	r2, #0
 8008d4a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	2200      	movs	r2, #0
 8008d50:	665a      	str	r2, [r3, #100]	; 0x64
}
 8008d52:	bf00      	nop
 8008d54:	370c      	adds	r7, #12
 8008d56:	46bd      	mov	sp, r7
 8008d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d5c:	4770      	bx	lr

08008d5e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008d5e:	b580      	push	{r7, lr}
 8008d60:	b084      	sub	sp, #16
 8008d62:	af00      	add	r7, sp, #0
 8008d64:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d6a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	2200      	movs	r2, #0
 8008d70:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	2200      	movs	r2, #0
 8008d78:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008d7c:	68f8      	ldr	r0, [r7, #12]
 8008d7e:	f7ff faff 	bl	8008380 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008d82:	bf00      	nop
 8008d84:	3710      	adds	r7, #16
 8008d86:	46bd      	mov	sp, r7
 8008d88:	bd80      	pop	{r7, pc}

08008d8a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008d8a:	b580      	push	{r7, lr}
 8008d8c:	b082      	sub	sp, #8
 8008d8e:	af00      	add	r7, sp, #0
 8008d90:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	681a      	ldr	r2, [r3, #0]
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008da0:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	2220      	movs	r2, #32
 8008da6:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	2200      	movs	r2, #0
 8008dac:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008dae:	6878      	ldr	r0, [r7, #4]
 8008db0:	f7ff fadc 	bl	800836c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008db4:	bf00      	nop
 8008db6:	3708      	adds	r7, #8
 8008db8:	46bd      	mov	sp, r7
 8008dba:	bd80      	pop	{r7, pc}

08008dbc <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008dbc:	b580      	push	{r7, lr}
 8008dbe:	b084      	sub	sp, #16
 8008dc0:	af00      	add	r7, sp, #0
 8008dc2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008dca:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008dd0:	2b22      	cmp	r3, #34	; 0x22
 8008dd2:	d151      	bne.n	8008e78 <UART_RxISR_8BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8008dda:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008ddc:	89bb      	ldrh	r3, [r7, #12]
 8008dde:	b2d9      	uxtb	r1, r3
 8008de0:	89fb      	ldrh	r3, [r7, #14]
 8008de2:	b2da      	uxtb	r2, r3
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008de8:	400a      	ands	r2, r1
 8008dea:	b2d2      	uxtb	r2, r2
 8008dec:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008df2:	1c5a      	adds	r2, r3, #1
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008dfe:	b29b      	uxth	r3, r3
 8008e00:	3b01      	subs	r3, #1
 8008e02:	b29a      	uxth	r2, r3
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008e10:	b29b      	uxth	r3, r3
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d13a      	bne.n	8008e8c <UART_RxISR_8BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	681a      	ldr	r2, [r3, #0]
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008e24:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	689a      	ldr	r2, [r3, #8]
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	f022 0201 	bic.w	r2, r2, #1
 8008e34:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	2220      	movs	r2, #32
 8008e3a:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	2200      	movs	r2, #0
 8008e40:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008e46:	2b01      	cmp	r3, #1
 8008e48:	d10f      	bne.n	8008e6a <UART_RxISR_8BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	681a      	ldr	r2, [r3, #0]
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	f022 0210 	bic.w	r2, r2, #16
 8008e58:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008e60:	4619      	mov	r1, r3
 8008e62:	6878      	ldr	r0, [r7, #4]
 8008e64:	f7ff fa96 	bl	8008394 <HAL_UARTEx_RxEventCallback>
 8008e68:	e002      	b.n	8008e70 <UART_RxISR_8BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008e6a:	6878      	ldr	r0, [r7, #4]
 8008e6c:	f7f8 f8dc 	bl	8001028 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	2200      	movs	r2, #0
 8008e74:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008e76:	e009      	b.n	8008e8c <UART_RxISR_8BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	8b1b      	ldrh	r3, [r3, #24]
 8008e7e:	b29a      	uxth	r2, r3
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	f042 0208 	orr.w	r2, r2, #8
 8008e88:	b292      	uxth	r2, r2
 8008e8a:	831a      	strh	r2, [r3, #24]
}
 8008e8c:	bf00      	nop
 8008e8e:	3710      	adds	r7, #16
 8008e90:	46bd      	mov	sp, r7
 8008e92:	bd80      	pop	{r7, pc}

08008e94 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008e94:	b580      	push	{r7, lr}
 8008e96:	b084      	sub	sp, #16
 8008e98:	af00      	add	r7, sp, #0
 8008e9a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008ea2:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008ea8:	2b22      	cmp	r3, #34	; 0x22
 8008eaa:	d151      	bne.n	8008f50 <UART_RxISR_16BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8008eb2:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008eb8:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8008eba:	89ba      	ldrh	r2, [r7, #12]
 8008ebc:	89fb      	ldrh	r3, [r7, #14]
 8008ebe:	4013      	ands	r3, r2
 8008ec0:	b29a      	uxth	r2, r3
 8008ec2:	68bb      	ldr	r3, [r7, #8]
 8008ec4:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008eca:	1c9a      	adds	r2, r3, #2
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008ed6:	b29b      	uxth	r3, r3
 8008ed8:	3b01      	subs	r3, #1
 8008eda:	b29a      	uxth	r2, r3
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008ee8:	b29b      	uxth	r3, r3
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d13a      	bne.n	8008f64 <UART_RxISR_16BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	681a      	ldr	r2, [r3, #0]
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008efc:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	689a      	ldr	r2, [r3, #8]
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	f022 0201 	bic.w	r2, r2, #1
 8008f0c:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	2220      	movs	r2, #32
 8008f12:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	2200      	movs	r2, #0
 8008f18:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008f1e:	2b01      	cmp	r3, #1
 8008f20:	d10f      	bne.n	8008f42 <UART_RxISR_16BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	681a      	ldr	r2, [r3, #0]
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	f022 0210 	bic.w	r2, r2, #16
 8008f30:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008f38:	4619      	mov	r1, r3
 8008f3a:	6878      	ldr	r0, [r7, #4]
 8008f3c:	f7ff fa2a 	bl	8008394 <HAL_UARTEx_RxEventCallback>
 8008f40:	e002      	b.n	8008f48 <UART_RxISR_16BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008f42:	6878      	ldr	r0, [r7, #4]
 8008f44:	f7f8 f870 	bl	8001028 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	2200      	movs	r2, #0
 8008f4c:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008f4e:	e009      	b.n	8008f64 <UART_RxISR_16BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	8b1b      	ldrh	r3, [r3, #24]
 8008f56:	b29a      	uxth	r2, r3
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	f042 0208 	orr.w	r2, r2, #8
 8008f60:	b292      	uxth	r2, r2
 8008f62:	831a      	strh	r2, [r3, #24]
}
 8008f64:	bf00      	nop
 8008f66:	3710      	adds	r7, #16
 8008f68:	46bd      	mov	sp, r7
 8008f6a:	bd80      	pop	{r7, pc}

08008f6c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008f6c:	b480      	push	{r7}
 8008f6e:	b083      	sub	sp, #12
 8008f70:	af00      	add	r7, sp, #0
 8008f72:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008f74:	bf00      	nop
 8008f76:	370c      	adds	r7, #12
 8008f78:	46bd      	mov	sp, r7
 8008f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f7e:	4770      	bx	lr

08008f80 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008f80:	b084      	sub	sp, #16
 8008f82:	b580      	push	{r7, lr}
 8008f84:	b084      	sub	sp, #16
 8008f86:	af00      	add	r7, sp, #0
 8008f88:	6078      	str	r0, [r7, #4]
 8008f8a:	f107 001c 	add.w	r0, r7, #28
 8008f8e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;


  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	68db      	ldr	r3, [r3, #12]
 8008f96:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8008f9e:	6878      	ldr	r0, [r7, #4]
 8008fa0:	f000 fa24 	bl	80093ec <USB_CoreReset>
 8008fa4:	4603      	mov	r3, r0
 8008fa6:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8008fa8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d106      	bne.n	8008fbc <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fb2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	639a      	str	r2, [r3, #56]	; 0x38
 8008fba:	e005      	b.n	8008fc8 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fc0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 8008fc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fca:	4618      	mov	r0, r3
 8008fcc:	3710      	adds	r7, #16
 8008fce:	46bd      	mov	sp, r7
 8008fd0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008fd4:	b004      	add	sp, #16
 8008fd6:	4770      	bx	lr

08008fd8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008fd8:	b480      	push	{r7}
 8008fda:	b083      	sub	sp, #12
 8008fdc:	af00      	add	r7, sp, #0
 8008fde:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	689b      	ldr	r3, [r3, #8]
 8008fe4:	f023 0201 	bic.w	r2, r3, #1
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008fec:	2300      	movs	r3, #0
}
 8008fee:	4618      	mov	r0, r3
 8008ff0:	370c      	adds	r7, #12
 8008ff2:	46bd      	mov	sp, r7
 8008ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff8:	4770      	bx	lr

08008ffa <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8008ffa:	b580      	push	{r7, lr}
 8008ffc:	b082      	sub	sp, #8
 8008ffe:	af00      	add	r7, sp, #0
 8009000:	6078      	str	r0, [r7, #4]
 8009002:	460b      	mov	r3, r1
 8009004:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	68db      	ldr	r3, [r3, #12]
 800900a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8009012:	78fb      	ldrb	r3, [r7, #3]
 8009014:	2b01      	cmp	r3, #1
 8009016:	d106      	bne.n	8009026 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	68db      	ldr	r3, [r3, #12]
 800901c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	60da      	str	r2, [r3, #12]
 8009024:	e00b      	b.n	800903e <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8009026:	78fb      	ldrb	r3, [r7, #3]
 8009028:	2b00      	cmp	r3, #0
 800902a:	d106      	bne.n	800903a <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	68db      	ldr	r3, [r3, #12]
 8009030:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	60da      	str	r2, [r3, #12]
 8009038:	e001      	b.n	800903e <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800903a:	2301      	movs	r3, #1
 800903c:	e003      	b.n	8009046 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800903e:	2032      	movs	r0, #50	; 0x32
 8009040:	f7f9 fc18 	bl	8002874 <HAL_Delay>

  return HAL_OK;
 8009044:	2300      	movs	r3, #0
}
 8009046:	4618      	mov	r0, r3
 8009048:	3708      	adds	r7, #8
 800904a:	46bd      	mov	sp, r7
 800904c:	bd80      	pop	{r7, pc}
	...

08009050 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009050:	b084      	sub	sp, #16
 8009052:	b580      	push	{r7, lr}
 8009054:	b086      	sub	sp, #24
 8009056:	af00      	add	r7, sp, #0
 8009058:	6078      	str	r0, [r7, #4]
 800905a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800905e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8009062:	2300      	movs	r3, #0
 8009064:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800906a:	2300      	movs	r3, #0
 800906c:	613b      	str	r3, [r7, #16]
 800906e:	e009      	b.n	8009084 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8009070:	687a      	ldr	r2, [r7, #4]
 8009072:	693b      	ldr	r3, [r7, #16]
 8009074:	3340      	adds	r3, #64	; 0x40
 8009076:	009b      	lsls	r3, r3, #2
 8009078:	4413      	add	r3, r2
 800907a:	2200      	movs	r2, #0
 800907c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800907e:	693b      	ldr	r3, [r7, #16]
 8009080:	3301      	adds	r3, #1
 8009082:	613b      	str	r3, [r7, #16]
 8009084:	693b      	ldr	r3, [r7, #16]
 8009086:	2b0e      	cmp	r3, #14
 8009088:	d9f2      	bls.n	8009070 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800908a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800908c:	2b00      	cmp	r3, #0
 800908e:	d11c      	bne.n	80090ca <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009096:	685b      	ldr	r3, [r3, #4]
 8009098:	68fa      	ldr	r2, [r7, #12]
 800909a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800909e:	f043 0302 	orr.w	r3, r3, #2
 80090a2:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090a8:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	601a      	str	r2, [r3, #0]
 80090c8:	e005      	b.n	80090d6 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090ce:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80090dc:	461a      	mov	r2, r3
 80090de:	2300      	movs	r3, #0
 80090e0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80090e8:	4619      	mov	r1, r3
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80090f0:	461a      	mov	r2, r3
 80090f2:	680b      	ldr	r3, [r1, #0]
 80090f4:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80090f6:	2103      	movs	r1, #3
 80090f8:	6878      	ldr	r0, [r7, #4]
 80090fa:	f000 f93d 	bl	8009378 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80090fe:	2110      	movs	r1, #16
 8009100:	6878      	ldr	r0, [r7, #4]
 8009102:	f000 f8f1 	bl	80092e8 <USB_FlushTxFifo>
 8009106:	4603      	mov	r3, r0
 8009108:	2b00      	cmp	r3, #0
 800910a:	d001      	beq.n	8009110 <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 800910c:	2301      	movs	r3, #1
 800910e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009110:	6878      	ldr	r0, [r7, #4]
 8009112:	f000 f90f 	bl	8009334 <USB_FlushRxFifo>
 8009116:	4603      	mov	r3, r0
 8009118:	2b00      	cmp	r3, #0
 800911a:	d001      	beq.n	8009120 <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 800911c:	2301      	movs	r3, #1
 800911e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009126:	461a      	mov	r2, r3
 8009128:	2300      	movs	r3, #0
 800912a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009132:	461a      	mov	r2, r3
 8009134:	2300      	movs	r3, #0
 8009136:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800913e:	461a      	mov	r2, r3
 8009140:	2300      	movs	r3, #0
 8009142:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009144:	2300      	movs	r3, #0
 8009146:	613b      	str	r3, [r7, #16]
 8009148:	e043      	b.n	80091d2 <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800914a:	693b      	ldr	r3, [r7, #16]
 800914c:	015a      	lsls	r2, r3, #5
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	4413      	add	r3, r2
 8009152:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800915c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009160:	d118      	bne.n	8009194 <USB_DevInit+0x144>
    {
      if (i == 0U)
 8009162:	693b      	ldr	r3, [r7, #16]
 8009164:	2b00      	cmp	r3, #0
 8009166:	d10a      	bne.n	800917e <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8009168:	693b      	ldr	r3, [r7, #16]
 800916a:	015a      	lsls	r2, r3, #5
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	4413      	add	r3, r2
 8009170:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009174:	461a      	mov	r2, r3
 8009176:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800917a:	6013      	str	r3, [r2, #0]
 800917c:	e013      	b.n	80091a6 <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800917e:	693b      	ldr	r3, [r7, #16]
 8009180:	015a      	lsls	r2, r3, #5
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	4413      	add	r3, r2
 8009186:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800918a:	461a      	mov	r2, r3
 800918c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009190:	6013      	str	r3, [r2, #0]
 8009192:	e008      	b.n	80091a6 <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8009194:	693b      	ldr	r3, [r7, #16]
 8009196:	015a      	lsls	r2, r3, #5
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	4413      	add	r3, r2
 800919c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80091a0:	461a      	mov	r2, r3
 80091a2:	2300      	movs	r3, #0
 80091a4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80091a6:	693b      	ldr	r3, [r7, #16]
 80091a8:	015a      	lsls	r2, r3, #5
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	4413      	add	r3, r2
 80091ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80091b2:	461a      	mov	r2, r3
 80091b4:	2300      	movs	r3, #0
 80091b6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80091b8:	693b      	ldr	r3, [r7, #16]
 80091ba:	015a      	lsls	r2, r3, #5
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	4413      	add	r3, r2
 80091c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80091c4:	461a      	mov	r2, r3
 80091c6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80091ca:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80091cc:	693b      	ldr	r3, [r7, #16]
 80091ce:	3301      	adds	r3, #1
 80091d0:	613b      	str	r3, [r7, #16]
 80091d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091d4:	693a      	ldr	r2, [r7, #16]
 80091d6:	429a      	cmp	r2, r3
 80091d8:	d3b7      	bcc.n	800914a <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80091da:	2300      	movs	r3, #0
 80091dc:	613b      	str	r3, [r7, #16]
 80091de:	e043      	b.n	8009268 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80091e0:	693b      	ldr	r3, [r7, #16]
 80091e2:	015a      	lsls	r2, r3, #5
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	4413      	add	r3, r2
 80091e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80091f2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80091f6:	d118      	bne.n	800922a <USB_DevInit+0x1da>
    {
      if (i == 0U)
 80091f8:	693b      	ldr	r3, [r7, #16]
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d10a      	bne.n	8009214 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80091fe:	693b      	ldr	r3, [r7, #16]
 8009200:	015a      	lsls	r2, r3, #5
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	4413      	add	r3, r2
 8009206:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800920a:	461a      	mov	r2, r3
 800920c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009210:	6013      	str	r3, [r2, #0]
 8009212:	e013      	b.n	800923c <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8009214:	693b      	ldr	r3, [r7, #16]
 8009216:	015a      	lsls	r2, r3, #5
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	4413      	add	r3, r2
 800921c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009220:	461a      	mov	r2, r3
 8009222:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009226:	6013      	str	r3, [r2, #0]
 8009228:	e008      	b.n	800923c <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800922a:	693b      	ldr	r3, [r7, #16]
 800922c:	015a      	lsls	r2, r3, #5
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	4413      	add	r3, r2
 8009232:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009236:	461a      	mov	r2, r3
 8009238:	2300      	movs	r3, #0
 800923a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800923c:	693b      	ldr	r3, [r7, #16]
 800923e:	015a      	lsls	r2, r3, #5
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	4413      	add	r3, r2
 8009244:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009248:	461a      	mov	r2, r3
 800924a:	2300      	movs	r3, #0
 800924c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800924e:	693b      	ldr	r3, [r7, #16]
 8009250:	015a      	lsls	r2, r3, #5
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	4413      	add	r3, r2
 8009256:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800925a:	461a      	mov	r2, r3
 800925c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009260:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009262:	693b      	ldr	r3, [r7, #16]
 8009264:	3301      	adds	r3, #1
 8009266:	613b      	str	r3, [r7, #16]
 8009268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800926a:	693a      	ldr	r2, [r7, #16]
 800926c:	429a      	cmp	r2, r3
 800926e:	d3b7      	bcc.n	80091e0 <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009276:	691b      	ldr	r3, [r3, #16]
 8009278:	68fa      	ldr	r2, [r7, #12]
 800927a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800927e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009282:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	2200      	movs	r2, #0
 8009288:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8009290:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	699b      	ldr	r3, [r3, #24]
 8009296:	f043 0210 	orr.w	r2, r3, #16
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	699a      	ldr	r2, [r3, #24]
 80092a2:	4b10      	ldr	r3, [pc, #64]	; (80092e4 <USB_DevInit+0x294>)
 80092a4:	4313      	orrs	r3, r2
 80092a6:	687a      	ldr	r2, [r7, #4]
 80092a8:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80092aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d005      	beq.n	80092bc <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	699b      	ldr	r3, [r3, #24]
 80092b4:	f043 0208 	orr.w	r2, r3, #8
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80092bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80092be:	2b01      	cmp	r3, #1
 80092c0:	d107      	bne.n	80092d2 <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	699b      	ldr	r3, [r3, #24]
 80092c6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80092ca:	f043 0304 	orr.w	r3, r3, #4
 80092ce:	687a      	ldr	r2, [r7, #4]
 80092d0:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80092d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80092d4:	4618      	mov	r0, r3
 80092d6:	3718      	adds	r7, #24
 80092d8:	46bd      	mov	sp, r7
 80092da:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80092de:	b004      	add	sp, #16
 80092e0:	4770      	bx	lr
 80092e2:	bf00      	nop
 80092e4:	803c3800 	.word	0x803c3800

080092e8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80092e8:	b480      	push	{r7}
 80092ea:	b085      	sub	sp, #20
 80092ec:	af00      	add	r7, sp, #0
 80092ee:	6078      	str	r0, [r7, #4]
 80092f0:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80092f2:	2300      	movs	r3, #0
 80092f4:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80092f6:	683b      	ldr	r3, [r7, #0]
 80092f8:	019b      	lsls	r3, r3, #6
 80092fa:	f043 0220 	orr.w	r2, r3, #32
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	3301      	adds	r3, #1
 8009306:	60fb      	str	r3, [r7, #12]
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	4a09      	ldr	r2, [pc, #36]	; (8009330 <USB_FlushTxFifo+0x48>)
 800930c:	4293      	cmp	r3, r2
 800930e:	d901      	bls.n	8009314 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8009310:	2303      	movs	r3, #3
 8009312:	e006      	b.n	8009322 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	691b      	ldr	r3, [r3, #16]
 8009318:	f003 0320 	and.w	r3, r3, #32
 800931c:	2b20      	cmp	r3, #32
 800931e:	d0f0      	beq.n	8009302 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8009320:	2300      	movs	r3, #0
}
 8009322:	4618      	mov	r0, r3
 8009324:	3714      	adds	r7, #20
 8009326:	46bd      	mov	sp, r7
 8009328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800932c:	4770      	bx	lr
 800932e:	bf00      	nop
 8009330:	00030d40 	.word	0x00030d40

08009334 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009334:	b480      	push	{r7}
 8009336:	b085      	sub	sp, #20
 8009338:	af00      	add	r7, sp, #0
 800933a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800933c:	2300      	movs	r3, #0
 800933e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	2210      	movs	r2, #16
 8009344:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	3301      	adds	r3, #1
 800934a:	60fb      	str	r3, [r7, #12]
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	4a09      	ldr	r2, [pc, #36]	; (8009374 <USB_FlushRxFifo+0x40>)
 8009350:	4293      	cmp	r3, r2
 8009352:	d901      	bls.n	8009358 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8009354:	2303      	movs	r3, #3
 8009356:	e006      	b.n	8009366 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	691b      	ldr	r3, [r3, #16]
 800935c:	f003 0310 	and.w	r3, r3, #16
 8009360:	2b10      	cmp	r3, #16
 8009362:	d0f0      	beq.n	8009346 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8009364:	2300      	movs	r3, #0
}
 8009366:	4618      	mov	r0, r3
 8009368:	3714      	adds	r7, #20
 800936a:	46bd      	mov	sp, r7
 800936c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009370:	4770      	bx	lr
 8009372:	bf00      	nop
 8009374:	00030d40 	.word	0x00030d40

08009378 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8009378:	b480      	push	{r7}
 800937a:	b085      	sub	sp, #20
 800937c:	af00      	add	r7, sp, #0
 800937e:	6078      	str	r0, [r7, #4]
 8009380:	460b      	mov	r3, r1
 8009382:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800938e:	681a      	ldr	r2, [r3, #0]
 8009390:	78fb      	ldrb	r3, [r7, #3]
 8009392:	68f9      	ldr	r1, [r7, #12]
 8009394:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009398:	4313      	orrs	r3, r2
 800939a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800939c:	2300      	movs	r3, #0
}
 800939e:	4618      	mov	r0, r3
 80093a0:	3714      	adds	r7, #20
 80093a2:	46bd      	mov	sp, r7
 80093a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093a8:	4770      	bx	lr

080093aa <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80093aa:	b480      	push	{r7}
 80093ac:	b085      	sub	sp, #20
 80093ae:	af00      	add	r7, sp, #0
 80093b0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	68fa      	ldr	r2, [r7, #12]
 80093c0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80093c4:	f023 0303 	bic.w	r3, r3, #3
 80093c8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80093d0:	685b      	ldr	r3, [r3, #4]
 80093d2:	68fa      	ldr	r2, [r7, #12]
 80093d4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80093d8:	f043 0302 	orr.w	r3, r3, #2
 80093dc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80093de:	2300      	movs	r3, #0
}
 80093e0:	4618      	mov	r0, r3
 80093e2:	3714      	adds	r7, #20
 80093e4:	46bd      	mov	sp, r7
 80093e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ea:	4770      	bx	lr

080093ec <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80093ec:	b480      	push	{r7}
 80093ee:	b085      	sub	sp, #20
 80093f0:	af00      	add	r7, sp, #0
 80093f2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80093f4:	2300      	movs	r3, #0
 80093f6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	3301      	adds	r3, #1
 80093fc:	60fb      	str	r3, [r7, #12]
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	4a13      	ldr	r2, [pc, #76]	; (8009450 <USB_CoreReset+0x64>)
 8009402:	4293      	cmp	r3, r2
 8009404:	d901      	bls.n	800940a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8009406:	2303      	movs	r3, #3
 8009408:	e01b      	b.n	8009442 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	691b      	ldr	r3, [r3, #16]
 800940e:	2b00      	cmp	r3, #0
 8009410:	daf2      	bge.n	80093f8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8009412:	2300      	movs	r3, #0
 8009414:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	691b      	ldr	r3, [r3, #16]
 800941a:	f043 0201 	orr.w	r2, r3, #1
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	3301      	adds	r3, #1
 8009426:	60fb      	str	r3, [r7, #12]
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	4a09      	ldr	r2, [pc, #36]	; (8009450 <USB_CoreReset+0x64>)
 800942c:	4293      	cmp	r3, r2
 800942e:	d901      	bls.n	8009434 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009430:	2303      	movs	r3, #3
 8009432:	e006      	b.n	8009442 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	691b      	ldr	r3, [r3, #16]
 8009438:	f003 0301 	and.w	r3, r3, #1
 800943c:	2b01      	cmp	r3, #1
 800943e:	d0f0      	beq.n	8009422 <USB_CoreReset+0x36>

  return HAL_OK;
 8009440:	2300      	movs	r3, #0
}
 8009442:	4618      	mov	r0, r3
 8009444:	3714      	adds	r7, #20
 8009446:	46bd      	mov	sp, r7
 8009448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800944c:	4770      	bx	lr
 800944e:	bf00      	nop
 8009450:	00030d40 	.word	0x00030d40

08009454 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8009454:	b580      	push	{r7, lr}
 8009456:	b08a      	sub	sp, #40	; 0x28
 8009458:	af00      	add	r7, sp, #0
 800945a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 800945c:	4b27      	ldr	r3, [pc, #156]	; (80094fc <I2Cx_MspInit+0xa8>)
 800945e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009460:	4a26      	ldr	r2, [pc, #152]	; (80094fc <I2Cx_MspInit+0xa8>)
 8009462:	f043 0302 	orr.w	r3, r3, #2
 8009466:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009468:	4b24      	ldr	r3, [pc, #144]	; (80094fc <I2Cx_MspInit+0xa8>)
 800946a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800946c:	f003 0302 	and.w	r3, r3, #2
 8009470:	613b      	str	r3, [r7, #16]
 8009472:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 8009474:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8009478:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 800947a:	2312      	movs	r3, #18
 800947c:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 800947e:	2301      	movs	r3, #1
 8009480:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009482:	2303      	movs	r3, #3
 8009484:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 8009486:	2304      	movs	r3, #4
 8009488:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800948a:	f107 0314 	add.w	r3, r7, #20
 800948e:	4619      	mov	r1, r3
 8009490:	481b      	ldr	r0, [pc, #108]	; (8009500 <I2Cx_MspInit+0xac>)
 8009492:	f7f9 fcb3 	bl	8002dfc <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8009496:	f107 0314 	add.w	r3, r7, #20
 800949a:	4619      	mov	r1, r3
 800949c:	4818      	ldr	r0, [pc, #96]	; (8009500 <I2Cx_MspInit+0xac>)
 800949e:	f7f9 fcad 	bl	8002dfc <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 80094a2:	4b16      	ldr	r3, [pc, #88]	; (80094fc <I2Cx_MspInit+0xa8>)
 80094a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80094a6:	4a15      	ldr	r2, [pc, #84]	; (80094fc <I2Cx_MspInit+0xa8>)
 80094a8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80094ac:	6593      	str	r3, [r2, #88]	; 0x58
 80094ae:	4b13      	ldr	r3, [pc, #76]	; (80094fc <I2Cx_MspInit+0xa8>)
 80094b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80094b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80094b6:	60fb      	str	r3, [r7, #12]
 80094b8:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 80094ba:	4b10      	ldr	r3, [pc, #64]	; (80094fc <I2Cx_MspInit+0xa8>)
 80094bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094be:	4a0f      	ldr	r2, [pc, #60]	; (80094fc <I2Cx_MspInit+0xa8>)
 80094c0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80094c4:	6393      	str	r3, [r2, #56]	; 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 80094c6:	4b0d      	ldr	r3, [pc, #52]	; (80094fc <I2Cx_MspInit+0xa8>)
 80094c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094ca:	4a0c      	ldr	r2, [pc, #48]	; (80094fc <I2Cx_MspInit+0xa8>)
 80094cc:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80094d0:	6393      	str	r3, [r2, #56]	; 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 80094d2:	2200      	movs	r2, #0
 80094d4:	210f      	movs	r1, #15
 80094d6:	2021      	movs	r0, #33	; 0x21
 80094d8:	f7f9 facc 	bl	8002a74 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 80094dc:	2021      	movs	r0, #33	; 0x21
 80094de:	f7f9 fae5 	bl	8002aac <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 80094e2:	2200      	movs	r2, #0
 80094e4:	210f      	movs	r1, #15
 80094e6:	2022      	movs	r0, #34	; 0x22
 80094e8:	f7f9 fac4 	bl	8002a74 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 80094ec:	2022      	movs	r0, #34	; 0x22
 80094ee:	f7f9 fadd 	bl	8002aac <HAL_NVIC_EnableIRQ>
}
 80094f2:	bf00      	nop
 80094f4:	3728      	adds	r7, #40	; 0x28
 80094f6:	46bd      	mov	sp, r7
 80094f8:	bd80      	pop	{r7, pc}
 80094fa:	bf00      	nop
 80094fc:	40021000 	.word	0x40021000
 8009500:	48000400 	.word	0x48000400

08009504 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8009504:	b580      	push	{r7, lr}
 8009506:	b082      	sub	sp, #8
 8009508:	af00      	add	r7, sp, #0
 800950a:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	4a12      	ldr	r2, [pc, #72]	; (8009558 <I2Cx_Init+0x54>)
 8009510:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	4a11      	ldr	r2, [pc, #68]	; (800955c <I2Cx_Init+0x58>)
 8009516:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	2200      	movs	r2, #0
 800951c:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	2201      	movs	r2, #1
 8009522:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	2200      	movs	r2, #0
 8009528:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	2200      	movs	r2, #0
 800952e:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	2200      	movs	r2, #0
 8009534:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	2200      	movs	r2, #0
 800953a:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 800953c:	6878      	ldr	r0, [r7, #4]
 800953e:	f7ff ff89 	bl	8009454 <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 8009542:	6878      	ldr	r0, [r7, #4]
 8009544:	f7f9 ff40 	bl	80033c8 <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 8009548:	2100      	movs	r1, #0
 800954a:	6878      	ldr	r0, [r7, #4]
 800954c:	f7fa fc44 	bl	8003dd8 <HAL_I2CEx_ConfigAnalogFilter>
}
 8009550:	bf00      	nop
 8009552:	3708      	adds	r7, #8
 8009554:	46bd      	mov	sp, r7
 8009556:	bd80      	pop	{r7, pc}
 8009558:	40005800 	.word	0x40005800
 800955c:	00702681 	.word	0x00702681

08009560 <I2Cx_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8009560:	b580      	push	{r7, lr}
 8009562:	b08a      	sub	sp, #40	; 0x28
 8009564:	af04      	add	r7, sp, #16
 8009566:	60f8      	str	r0, [r7, #12]
 8009568:	4608      	mov	r0, r1
 800956a:	4611      	mov	r1, r2
 800956c:	461a      	mov	r2, r3
 800956e:	4603      	mov	r3, r0
 8009570:	72fb      	strb	r3, [r7, #11]
 8009572:	460b      	mov	r3, r1
 8009574:	813b      	strh	r3, [r7, #8]
 8009576:	4613      	mov	r3, r2
 8009578:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800957a:	2300      	movs	r3, #0
 800957c:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800957e:	7afb      	ldrb	r3, [r7, #11]
 8009580:	b299      	uxth	r1, r3
 8009582:	88f8      	ldrh	r0, [r7, #6]
 8009584:	893a      	ldrh	r2, [r7, #8]
 8009586:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800958a:	9302      	str	r3, [sp, #8]
 800958c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800958e:	9301      	str	r3, [sp, #4]
 8009590:	6a3b      	ldr	r3, [r7, #32]
 8009592:	9300      	str	r3, [sp, #0]
 8009594:	4603      	mov	r3, r0
 8009596:	68f8      	ldr	r0, [r7, #12]
 8009598:	f7fa f8e8 	bl	800376c <HAL_I2C_Mem_Read>
 800959c:	4603      	mov	r3, r0
 800959e:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 80095a0:	7dfb      	ldrb	r3, [r7, #23]
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d004      	beq.n	80095b0 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 80095a6:	7afb      	ldrb	r3, [r7, #11]
 80095a8:	4619      	mov	r1, r3
 80095aa:	68f8      	ldr	r0, [r7, #12]
 80095ac:	f000 f832 	bl	8009614 <I2Cx_Error>
  }
  return status;
 80095b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80095b2:	4618      	mov	r0, r3
 80095b4:	3718      	adds	r7, #24
 80095b6:	46bd      	mov	sp, r7
 80095b8:	bd80      	pop	{r7, pc}

080095ba <I2Cx_WriteMultiple>:
  * @param  Buffer  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 80095ba:	b580      	push	{r7, lr}
 80095bc:	b08a      	sub	sp, #40	; 0x28
 80095be:	af04      	add	r7, sp, #16
 80095c0:	60f8      	str	r0, [r7, #12]
 80095c2:	4608      	mov	r0, r1
 80095c4:	4611      	mov	r1, r2
 80095c6:	461a      	mov	r2, r3
 80095c8:	4603      	mov	r3, r0
 80095ca:	72fb      	strb	r3, [r7, #11]
 80095cc:	460b      	mov	r3, r1
 80095ce:	813b      	strh	r3, [r7, #8]
 80095d0:	4613      	mov	r3, r2
 80095d2:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80095d4:	2300      	movs	r3, #0
 80095d6:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80095d8:	7afb      	ldrb	r3, [r7, #11]
 80095da:	b299      	uxth	r1, r3
 80095dc:	88f8      	ldrh	r0, [r7, #6]
 80095de:	893a      	ldrh	r2, [r7, #8]
 80095e0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80095e4:	9302      	str	r3, [sp, #8]
 80095e6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80095e8:	9301      	str	r3, [sp, #4]
 80095ea:	6a3b      	ldr	r3, [r7, #32]
 80095ec:	9300      	str	r3, [sp, #0]
 80095ee:	4603      	mov	r3, r0
 80095f0:	68f8      	ldr	r0, [r7, #12]
 80095f2:	f7f9 ffa7 	bl	8003544 <HAL_I2C_Mem_Write>
 80095f6:	4603      	mov	r3, r0
 80095f8:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 80095fa:	7dfb      	ldrb	r3, [r7, #23]
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d004      	beq.n	800960a <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8009600:	7afb      	ldrb	r3, [r7, #11]
 8009602:	4619      	mov	r1, r3
 8009604:	68f8      	ldr	r0, [r7, #12]
 8009606:	f000 f805 	bl	8009614 <I2Cx_Error>
  }
  return status;
 800960a:	7dfb      	ldrb	r3, [r7, #23]
}
 800960c:	4618      	mov	r0, r3
 800960e:	3718      	adds	r7, #24
 8009610:	46bd      	mov	sp, r7
 8009612:	bd80      	pop	{r7, pc}

08009614 <I2Cx_Error>:
  * @param  i2c_handler  I2C handler
  * @param  Addr  I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8009614:	b580      	push	{r7, lr}
 8009616:	b082      	sub	sp, #8
 8009618:	af00      	add	r7, sp, #0
 800961a:	6078      	str	r0, [r7, #4]
 800961c:	460b      	mov	r3, r1
 800961e:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8009620:	6878      	ldr	r0, [r7, #4]
 8009622:	f7f9 ff60 	bl	80034e6 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8009626:	6878      	ldr	r0, [r7, #4]
 8009628:	f7ff ff6c 	bl	8009504 <I2Cx_Init>
}
 800962c:	bf00      	nop
 800962e:	3708      	adds	r7, #8
 8009630:	46bd      	mov	sp, r7
 8009632:	bd80      	pop	{r7, pc}

08009634 <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 8009634:	b580      	push	{r7, lr}
 8009636:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 8009638:	4802      	ldr	r0, [pc, #8]	; (8009644 <SENSOR_IO_Init+0x10>)
 800963a:	f7ff ff63 	bl	8009504 <I2Cx_Init>
}
 800963e:	bf00      	nop
 8009640:	bd80      	pop	{r7, pc}
 8009642:	bf00      	nop
 8009644:	20000c38 	.word	0x20000c38

08009648 <SENSOR_IO_Write>:
  * @param  Reg  Reg address
  * @param  Value  Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8009648:	b580      	push	{r7, lr}
 800964a:	b084      	sub	sp, #16
 800964c:	af02      	add	r7, sp, #8
 800964e:	4603      	mov	r3, r0
 8009650:	71fb      	strb	r3, [r7, #7]
 8009652:	460b      	mov	r3, r1
 8009654:	71bb      	strb	r3, [r7, #6]
 8009656:	4613      	mov	r3, r2
 8009658:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 800965a:	79bb      	ldrb	r3, [r7, #6]
 800965c:	b29a      	uxth	r2, r3
 800965e:	79f9      	ldrb	r1, [r7, #7]
 8009660:	2301      	movs	r3, #1
 8009662:	9301      	str	r3, [sp, #4]
 8009664:	1d7b      	adds	r3, r7, #5
 8009666:	9300      	str	r3, [sp, #0]
 8009668:	2301      	movs	r3, #1
 800966a:	4803      	ldr	r0, [pc, #12]	; (8009678 <SENSOR_IO_Write+0x30>)
 800966c:	f7ff ffa5 	bl	80095ba <I2Cx_WriteMultiple>
}
 8009670:	bf00      	nop
 8009672:	3708      	adds	r7, #8
 8009674:	46bd      	mov	sp, r7
 8009676:	bd80      	pop	{r7, pc}
 8009678:	20000c38 	.word	0x20000c38

0800967c <SENSOR_IO_Read>:
  * @param  Addr  I2C address
  * @param  Reg  Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 800967c:	b580      	push	{r7, lr}
 800967e:	b086      	sub	sp, #24
 8009680:	af02      	add	r7, sp, #8
 8009682:	4603      	mov	r3, r0
 8009684:	460a      	mov	r2, r1
 8009686:	71fb      	strb	r3, [r7, #7]
 8009688:	4613      	mov	r3, r2
 800968a:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 800968c:	2300      	movs	r3, #0
 800968e:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8009690:	79bb      	ldrb	r3, [r7, #6]
 8009692:	b29a      	uxth	r2, r3
 8009694:	79f9      	ldrb	r1, [r7, #7]
 8009696:	2301      	movs	r3, #1
 8009698:	9301      	str	r3, [sp, #4]
 800969a:	f107 030f 	add.w	r3, r7, #15
 800969e:	9300      	str	r3, [sp, #0]
 80096a0:	2301      	movs	r3, #1
 80096a2:	4804      	ldr	r0, [pc, #16]	; (80096b4 <SENSOR_IO_Read+0x38>)
 80096a4:	f7ff ff5c 	bl	8009560 <I2Cx_ReadMultiple>

  return read_value;
 80096a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80096aa:	4618      	mov	r0, r3
 80096ac:	3710      	adds	r7, #16
 80096ae:	46bd      	mov	sp, r7
 80096b0:	bd80      	pop	{r7, pc}
 80096b2:	bf00      	nop
 80096b4:	20000c38 	.word	0x20000c38

080096b8 <SENSOR_IO_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 80096b8:	b580      	push	{r7, lr}
 80096ba:	b084      	sub	sp, #16
 80096bc:	af02      	add	r7, sp, #8
 80096be:	603a      	str	r2, [r7, #0]
 80096c0:	461a      	mov	r2, r3
 80096c2:	4603      	mov	r3, r0
 80096c4:	71fb      	strb	r3, [r7, #7]
 80096c6:	460b      	mov	r3, r1
 80096c8:	71bb      	strb	r3, [r7, #6]
 80096ca:	4613      	mov	r3, r2
 80096cc:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 80096ce:	79bb      	ldrb	r3, [r7, #6]
 80096d0:	b29a      	uxth	r2, r3
 80096d2:	79f9      	ldrb	r1, [r7, #7]
 80096d4:	88bb      	ldrh	r3, [r7, #4]
 80096d6:	9301      	str	r3, [sp, #4]
 80096d8:	683b      	ldr	r3, [r7, #0]
 80096da:	9300      	str	r3, [sp, #0]
 80096dc:	2301      	movs	r3, #1
 80096de:	4804      	ldr	r0, [pc, #16]	; (80096f0 <SENSOR_IO_ReadMultiple+0x38>)
 80096e0:	f7ff ff3e 	bl	8009560 <I2Cx_ReadMultiple>
 80096e4:	4603      	mov	r3, r0
 80096e6:	b29b      	uxth	r3, r3
}
 80096e8:	4618      	mov	r0, r3
 80096ea:	3708      	adds	r7, #8
 80096ec:	46bd      	mov	sp, r7
 80096ee:	bd80      	pop	{r7, pc}
 80096f0:	20000c38 	.word	0x20000c38

080096f4 <BSP_ACCELERO_Init>:
/**
  * @brief  Initialize the ACCELERO.
  * @retval ACCELERO_OK or ACCELERO_ERROR
  */
ACCELERO_StatusTypeDef BSP_ACCELERO_Init(void)
{  
 80096f4:	b580      	push	{r7, lr}
 80096f6:	b084      	sub	sp, #16
 80096f8:	af00      	add	r7, sp, #0
  ACCELERO_StatusTypeDef ret = ACCELERO_OK;
 80096fa:	2300      	movs	r3, #0
 80096fc:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 80096fe:	2300      	movs	r3, #0
 8009700:	81bb      	strh	r3, [r7, #12]
  ACCELERO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslAccDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 8009702:	4b19      	ldr	r3, [pc, #100]	; (8009768 <BSP_ACCELERO_Init+0x74>)
 8009704:	689b      	ldr	r3, [r3, #8]
 8009706:	4798      	blx	r3
 8009708:	4603      	mov	r3, r0
 800970a:	2b6a      	cmp	r3, #106	; 0x6a
 800970c:	d002      	beq.n	8009714 <BSP_ACCELERO_Init+0x20>
  {
    ret = ACCELERO_ERROR;
 800970e:	2301      	movs	r3, #1
 8009710:	73fb      	strb	r3, [r7, #15]
 8009712:	e024      	b.n	800975e <BSP_ACCELERO_Init+0x6a>
  }
  else
  {
    /* Initialize the ACCELERO accelerometer driver structure */
    AccelerometerDrv = &Lsm6dslAccDrv;
 8009714:	4b15      	ldr	r3, [pc, #84]	; (800976c <BSP_ACCELERO_Init+0x78>)
 8009716:	4a14      	ldr	r2, [pc, #80]	; (8009768 <BSP_ACCELERO_Init+0x74>)
 8009718:	601a      	str	r2, [r3, #0]
  
    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the ACCELERO accelerometer structure */
    LSM6DSL_InitStructure.AccOutput_DataRate = LSM6DSL_ODR_52Hz;
 800971a:	2330      	movs	r3, #48	; 0x30
 800971c:	717b      	strb	r3, [r7, #5]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 800971e:	2300      	movs	r3, #0
 8009720:	71bb      	strb	r3, [r7, #6]
    LSM6DSL_InitStructure.AccFull_Scale = LSM6DSL_ACC_FULLSCALE_2G;
 8009722:	2300      	movs	r3, #0
 8009724:	72bb      	strb	r3, [r7, #10]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 8009726:	2340      	movs	r3, #64	; 0x40
 8009728:	723b      	strb	r3, [r7, #8]
    LSM6DSL_InitStructure.High_Resolution = 0;
 800972a:	2300      	movs	r3, #0
 800972c:	71fb      	strb	r3, [r7, #7]
    LSM6DSL_InitStructure.Communication_Mode = 0;
 800972e:	2300      	movs	r3, #0
 8009730:	72fb      	strb	r3, [r7, #11]
        
    /* Configure MEMS: data rate, full scale  */
    ctrl =  (LSM6DSL_InitStructure.AccOutput_DataRate | LSM6DSL_InitStructure.AccFull_Scale);
 8009732:	797a      	ldrb	r2, [r7, #5]
 8009734:	7abb      	ldrb	r3, [r7, #10]
 8009736:	4313      	orrs	r3, r2
 8009738:	b2db      	uxtb	r3, r3
 800973a:	81bb      	strh	r3, [r7, #12]
    
    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);
 800973c:	7a3b      	ldrb	r3, [r7, #8]
 800973e:	f043 0304 	orr.w	r3, r3, #4
 8009742:	b2db      	uxtb	r3, r3
 8009744:	021b      	lsls	r3, r3, #8
 8009746:	b21a      	sxth	r2, r3
 8009748:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800974c:	4313      	orrs	r3, r2
 800974e:	b21b      	sxth	r3, r3
 8009750:	81bb      	strh	r3, [r7, #12]

    /* Configure the ACCELERO accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 8009752:	4b06      	ldr	r3, [pc, #24]	; (800976c <BSP_ACCELERO_Init+0x78>)
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	89ba      	ldrh	r2, [r7, #12]
 800975a:	4610      	mov	r0, r2
 800975c:	4798      	blx	r3
  }  

  return ret;
 800975e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009760:	4618      	mov	r0, r3
 8009762:	3710      	adds	r7, #16
 8009764:	46bd      	mov	sp, r7
 8009766:	bd80      	pop	{r7, pc}
 8009768:	2000001c 	.word	0x2000001c
 800976c:	20000c84 	.word	0x20000c84

08009770 <BSP_ACCELERO_AccGetXYZ>:
  * @param  pDataXYZ Pointer on 3 angular accelerations table with  
  *                  pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis
  * @retval None
  */
void BSP_ACCELERO_AccGetXYZ(int16_t *pDataXYZ)
{
 8009770:	b580      	push	{r7, lr}
 8009772:	b082      	sub	sp, #8
 8009774:	af00      	add	r7, sp, #0
 8009776:	6078      	str	r0, [r7, #4]
  if(AccelerometerDrv != NULL)
 8009778:	4b08      	ldr	r3, [pc, #32]	; (800979c <BSP_ACCELERO_AccGetXYZ+0x2c>)
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	2b00      	cmp	r3, #0
 800977e:	d009      	beq.n	8009794 <BSP_ACCELERO_AccGetXYZ+0x24>
  {
    if(AccelerometerDrv->GetXYZ != NULL)
 8009780:	4b06      	ldr	r3, [pc, #24]	; (800979c <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009786:	2b00      	cmp	r3, #0
 8009788:	d004      	beq.n	8009794 <BSP_ACCELERO_AccGetXYZ+0x24>
    {   
      AccelerometerDrv->GetXYZ(pDataXYZ);
 800978a:	4b04      	ldr	r3, [pc, #16]	; (800979c <BSP_ACCELERO_AccGetXYZ+0x2c>)
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009790:	6878      	ldr	r0, [r7, #4]
 8009792:	4798      	blx	r3
    }
  }
}
 8009794:	bf00      	nop
 8009796:	3708      	adds	r7, #8
 8009798:	46bd      	mov	sp, r7
 800979a:	bd80      	pop	{r7, pc}
 800979c:	20000c84 	.word	0x20000c84

080097a0 <LSM6DSL_AccInit>:
/**
  * @brief  Set LSM6DSL Accelerometer Initialization.
  * @param  InitStruct: Init parameters
  */
void LSM6DSL_AccInit(uint16_t InitStruct)
{  
 80097a0:	b580      	push	{r7, lr}
 80097a2:	b084      	sub	sp, #16
 80097a4:	af00      	add	r7, sp, #0
 80097a6:	4603      	mov	r3, r0
 80097a8:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 80097aa:	2300      	movs	r3, #0
 80097ac:	73fb      	strb	r3, [r7, #15]
  uint8_t tmp;

  /* Read CTRL1_XL */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 80097ae:	2110      	movs	r1, #16
 80097b0:	20d4      	movs	r0, #212	; 0xd4
 80097b2:	f7ff ff63 	bl	800967c <SENSOR_IO_Read>
 80097b6:	4603      	mov	r3, r0
 80097b8:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL1_XL register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
 80097ba:	88fb      	ldrh	r3, [r7, #6]
 80097bc:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0xFC);
 80097be:	7bbb      	ldrb	r3, [r7, #14]
 80097c0:	f003 0303 	and.w	r3, r3, #3
 80097c4:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl;
 80097c6:	7bba      	ldrb	r2, [r7, #14]
 80097c8:	7bfb      	ldrb	r3, [r7, #15]
 80097ca:	4313      	orrs	r3, r2
 80097cc:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, tmp);
 80097ce:	7bbb      	ldrb	r3, [r7, #14]
 80097d0:	461a      	mov	r2, r3
 80097d2:	2110      	movs	r1, #16
 80097d4:	20d4      	movs	r0, #212	; 0xd4
 80097d6:	f7ff ff37 	bl	8009648 <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 80097da:	2112      	movs	r1, #18
 80097dc:	20d4      	movs	r0, #212	; 0xd4
 80097de:	f7ff ff4d 	bl	800967c <SENSOR_IO_Read>
 80097e2:	4603      	mov	r3, r0
 80097e4:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
 80097e6:	88fb      	ldrh	r3, [r7, #6]
 80097e8:	0a1b      	lsrs	r3, r3, #8
 80097ea:	b29b      	uxth	r3, r3
 80097ec:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0x44);
 80097ee:	7bbb      	ldrb	r3, [r7, #14]
 80097f0:	f023 0344 	bic.w	r3, r3, #68	; 0x44
 80097f4:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl; 
 80097f6:	7bba      	ldrb	r2, [r7, #14]
 80097f8:	7bfb      	ldrb	r3, [r7, #15]
 80097fa:	4313      	orrs	r3, r2
 80097fc:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 80097fe:	7bbb      	ldrb	r3, [r7, #14]
 8009800:	461a      	mov	r2, r3
 8009802:	2112      	movs	r1, #18
 8009804:	20d4      	movs	r0, #212	; 0xd4
 8009806:	f7ff ff1f 	bl	8009648 <SENSOR_IO_Write>
}
 800980a:	bf00      	nop
 800980c:	3710      	adds	r7, #16
 800980e:	46bd      	mov	sp, r7
 8009810:	bd80      	pop	{r7, pc}

08009812 <LSM6DSL_AccDeInit>:

/**
  * @brief  LSM6DSL Accelerometer De-initialization.
  */
void LSM6DSL_AccDeInit(void)
{
 8009812:	b580      	push	{r7, lr}
 8009814:	b082      	sub	sp, #8
 8009816:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 8009818:	2300      	movs	r3, #0
 800981a:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 800981c:	2110      	movs	r1, #16
 800981e:	20d4      	movs	r0, #212	; 0xd4
 8009820:	f7ff ff2c 	bl	800967c <SENSOR_IO_Read>
 8009824:	4603      	mov	r3, r0
 8009826:	71fb      	strb	r3, [r7, #7]

  /* Clear ODR bits */
  ctrl &= ~(LSM6DSL_ODR_BITPOSITION);
 8009828:	79fb      	ldrb	r3, [r7, #7]
 800982a:	f003 030f 	and.w	r3, r3, #15
 800982e:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, ctrl);
 8009830:	79fb      	ldrb	r3, [r7, #7]
 8009832:	461a      	mov	r2, r3
 8009834:	2110      	movs	r1, #16
 8009836:	20d4      	movs	r0, #212	; 0xd4
 8009838:	f7ff ff06 	bl	8009648 <SENSOR_IO_Write>
}
 800983c:	bf00      	nop
 800983e:	3708      	adds	r7, #8
 8009840:	46bd      	mov	sp, r7
 8009842:	bd80      	pop	{r7, pc}

08009844 <LSM6DSL_AccReadID>:
/**
  * @brief  Read LSM6DSL ID.
  * @retval ID 
  */
uint8_t LSM6DSL_AccReadID(void)
{  
 8009844:	b580      	push	{r7, lr}
 8009846:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();
 8009848:	f7ff fef4 	bl	8009634 <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return (SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG));
 800984c:	210f      	movs	r1, #15
 800984e:	20d4      	movs	r0, #212	; 0xd4
 8009850:	f7ff ff14 	bl	800967c <SENSOR_IO_Read>
 8009854:	4603      	mov	r3, r0
}
 8009856:	4618      	mov	r0, r3
 8009858:	bd80      	pop	{r7, pc}

0800985a <LSM6DSL_AccLowPower>:
/**
  * @brief  Set/Unset Accelerometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LSM6DSL_AccLowPower(uint16_t status)
{
 800985a:	b580      	push	{r7, lr}
 800985c:	b084      	sub	sp, #16
 800985e:	af00      	add	r7, sp, #0
 8009860:	4603      	mov	r3, r0
 8009862:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8009864:	2300      	movs	r3, #0
 8009866:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL6_C value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C);
 8009868:	2115      	movs	r1, #21
 800986a:	20d4      	movs	r0, #212	; 0xd4
 800986c:	f7ff ff06 	bl	800967c <SENSOR_IO_Read>
 8009870:	4603      	mov	r3, r0
 8009872:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x10);
 8009874:	7bfb      	ldrb	r3, [r7, #15]
 8009876:	f023 0310 	bic.w	r3, r3, #16
 800987a:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 800987c:	88fb      	ldrh	r3, [r7, #6]
 800987e:	2b00      	cmp	r3, #0
 8009880:	d003      	beq.n	800988a <LSM6DSL_AccLowPower+0x30>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_ENABLED;
 8009882:	7bfb      	ldrb	r3, [r7, #15]
 8009884:	f043 0310 	orr.w	r3, r3, #16
 8009888:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C, ctrl);
 800988a:	7bfb      	ldrb	r3, [r7, #15]
 800988c:	461a      	mov	r2, r3
 800988e:	2115      	movs	r1, #21
 8009890:	20d4      	movs	r0, #212	; 0xd4
 8009892:	f7ff fed9 	bl	8009648 <SENSOR_IO_Write>
}
 8009896:	bf00      	nop
 8009898:	3710      	adds	r7, #16
 800989a:	46bd      	mov	sp, r7
 800989c:	bd80      	pop	{r7, pc}
	...

080098a0 <LSM6DSL_AccReadXYZ>:
/**
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  */
void LSM6DSL_AccReadXYZ(int16_t* pData)
{
 80098a0:	b580      	push	{r7, lr}
 80098a2:	b088      	sub	sp, #32
 80098a4:	af00      	add	r7, sp, #0
 80098a6:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlx= 0;
 80098a8:	2300      	movs	r3, #0
 80098aa:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 80098ac:	2300      	movs	r3, #0
 80098ae:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 80098b0:	f04f 0300 	mov.w	r3, #0
 80098b4:	61bb      	str	r3, [r7, #24]
  
  /* Read the acceleration control register content */
  ctrlx = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 80098b6:	2110      	movs	r1, #16
 80098b8:	20d4      	movs	r0, #212	; 0xd4
 80098ba:	f7ff fedf 	bl	800967c <SENSOR_IO_Read>
 80098be:	4603      	mov	r3, r0
 80098c0:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_XL, buffer, 6);
 80098c2:	f107 0208 	add.w	r2, r7, #8
 80098c6:	2306      	movs	r3, #6
 80098c8:	2128      	movs	r1, #40	; 0x28
 80098ca:	20d4      	movs	r0, #212	; 0xd4
 80098cc:	f7ff fef4 	bl	80096b8 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 80098d0:	2300      	movs	r3, #0
 80098d2:	77fb      	strb	r3, [r7, #31]
 80098d4:	e01c      	b.n	8009910 <LSM6DSL_AccReadXYZ+0x70>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 80098d6:	7ffb      	ldrb	r3, [r7, #31]
 80098d8:	005b      	lsls	r3, r3, #1
 80098da:	3301      	adds	r3, #1
 80098dc:	3320      	adds	r3, #32
 80098de:	443b      	add	r3, r7
 80098e0:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80098e4:	b29b      	uxth	r3, r3
 80098e6:	021b      	lsls	r3, r3, #8
 80098e8:	b29a      	uxth	r2, r3
 80098ea:	7ffb      	ldrb	r3, [r7, #31]
 80098ec:	005b      	lsls	r3, r3, #1
 80098ee:	3320      	adds	r3, #32
 80098f0:	443b      	add	r3, r7
 80098f2:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80098f6:	b29b      	uxth	r3, r3
 80098f8:	4413      	add	r3, r2
 80098fa:	b29a      	uxth	r2, r3
 80098fc:	7ffb      	ldrb	r3, [r7, #31]
 80098fe:	b212      	sxth	r2, r2
 8009900:	005b      	lsls	r3, r3, #1
 8009902:	3320      	adds	r3, #32
 8009904:	443b      	add	r3, r7
 8009906:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 800990a:	7ffb      	ldrb	r3, [r7, #31]
 800990c:	3301      	adds	r3, #1
 800990e:	77fb      	strb	r3, [r7, #31]
 8009910:	7ffb      	ldrb	r3, [r7, #31]
 8009912:	2b02      	cmp	r3, #2
 8009914:	d9df      	bls.n	80098d6 <LSM6DSL_AccReadXYZ+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL1_XL */
  switch(ctrlx & 0x0C)
 8009916:	7dfb      	ldrb	r3, [r7, #23]
 8009918:	f003 030c 	and.w	r3, r3, #12
 800991c:	2b0c      	cmp	r3, #12
 800991e:	d829      	bhi.n	8009974 <LSM6DSL_AccReadXYZ+0xd4>
 8009920:	a201      	add	r2, pc, #4	; (adr r2, 8009928 <LSM6DSL_AccReadXYZ+0x88>)
 8009922:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009926:	bf00      	nop
 8009928:	0800995d 	.word	0x0800995d
 800992c:	08009975 	.word	0x08009975
 8009930:	08009975 	.word	0x08009975
 8009934:	08009975 	.word	0x08009975
 8009938:	0800996f 	.word	0x0800996f
 800993c:	08009975 	.word	0x08009975
 8009940:	08009975 	.word	0x08009975
 8009944:	08009975 	.word	0x08009975
 8009948:	08009963 	.word	0x08009963
 800994c:	08009975 	.word	0x08009975
 8009950:	08009975 	.word	0x08009975
 8009954:	08009975 	.word	0x08009975
 8009958:	08009969 	.word	0x08009969
  {
  case LSM6DSL_ACC_FULLSCALE_2G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_2G;
 800995c:	4b18      	ldr	r3, [pc, #96]	; (80099c0 <LSM6DSL_AccReadXYZ+0x120>)
 800995e:	61bb      	str	r3, [r7, #24]
    break;
 8009960:	e008      	b.n	8009974 <LSM6DSL_AccReadXYZ+0xd4>
  case LSM6DSL_ACC_FULLSCALE_4G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_4G;
 8009962:	4b18      	ldr	r3, [pc, #96]	; (80099c4 <LSM6DSL_AccReadXYZ+0x124>)
 8009964:	61bb      	str	r3, [r7, #24]
    break;
 8009966:	e005      	b.n	8009974 <LSM6DSL_AccReadXYZ+0xd4>
  case LSM6DSL_ACC_FULLSCALE_8G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_8G;
 8009968:	4b17      	ldr	r3, [pc, #92]	; (80099c8 <LSM6DSL_AccReadXYZ+0x128>)
 800996a:	61bb      	str	r3, [r7, #24]
    break;
 800996c:	e002      	b.n	8009974 <LSM6DSL_AccReadXYZ+0xd4>
  case LSM6DSL_ACC_FULLSCALE_16G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_16G;
 800996e:	4b17      	ldr	r3, [pc, #92]	; (80099cc <LSM6DSL_AccReadXYZ+0x12c>)
 8009970:	61bb      	str	r3, [r7, #24]
    break;    
 8009972:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 8009974:	2300      	movs	r3, #0
 8009976:	77fb      	strb	r3, [r7, #31]
 8009978:	e01a      	b.n	80099b0 <LSM6DSL_AccReadXYZ+0x110>
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 800997a:	7ffb      	ldrb	r3, [r7, #31]
 800997c:	005b      	lsls	r3, r3, #1
 800997e:	3320      	adds	r3, #32
 8009980:	443b      	add	r3, r7
 8009982:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 8009986:	ee07 3a90 	vmov	s15, r3
 800998a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800998e:	edd7 7a06 	vldr	s15, [r7, #24]
 8009992:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009996:	7ffb      	ldrb	r3, [r7, #31]
 8009998:	005b      	lsls	r3, r3, #1
 800999a:	687a      	ldr	r2, [r7, #4]
 800999c:	4413      	add	r3, r2
 800999e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80099a2:	ee17 2a90 	vmov	r2, s15
 80099a6:	b212      	sxth	r2, r2
 80099a8:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 80099aa:	7ffb      	ldrb	r3, [r7, #31]
 80099ac:	3301      	adds	r3, #1
 80099ae:	77fb      	strb	r3, [r7, #31]
 80099b0:	7ffb      	ldrb	r3, [r7, #31]
 80099b2:	2b02      	cmp	r3, #2
 80099b4:	d9e1      	bls.n	800997a <LSM6DSL_AccReadXYZ+0xda>
  }
}
 80099b6:	bf00      	nop
 80099b8:	bf00      	nop
 80099ba:	3720      	adds	r7, #32
 80099bc:	46bd      	mov	sp, r7
 80099be:	bd80      	pop	{r7, pc}
 80099c0:	3d79db23 	.word	0x3d79db23
 80099c4:	3df9db23 	.word	0x3df9db23
 80099c8:	3e79db23 	.word	0x3e79db23
 80099cc:	3ef9db23 	.word	0x3ef9db23

080099d0 <Hex2Num>:
  * @param  a: character to convert
  * @retval integer value.
  */

static  uint8_t Hex2Num(char a)
{
 80099d0:	b480      	push	{r7}
 80099d2:	b083      	sub	sp, #12
 80099d4:	af00      	add	r7, sp, #0
 80099d6:	4603      	mov	r3, r0
 80099d8:	71fb      	strb	r3, [r7, #7]
    if (a >= '0' && a <= '9') {                             /* Char is num */
 80099da:	79fb      	ldrb	r3, [r7, #7]
 80099dc:	2b2f      	cmp	r3, #47	; 0x2f
 80099de:	d906      	bls.n	80099ee <Hex2Num+0x1e>
 80099e0:	79fb      	ldrb	r3, [r7, #7]
 80099e2:	2b39      	cmp	r3, #57	; 0x39
 80099e4:	d803      	bhi.n	80099ee <Hex2Num+0x1e>
        return a - '0';
 80099e6:	79fb      	ldrb	r3, [r7, #7]
 80099e8:	3b30      	subs	r3, #48	; 0x30
 80099ea:	b2db      	uxtb	r3, r3
 80099ec:	e014      	b.n	8009a18 <Hex2Num+0x48>
    } else if (a >= 'a' && a <= 'f') {                      /* Char is lowercase character A - Z (hex) */
 80099ee:	79fb      	ldrb	r3, [r7, #7]
 80099f0:	2b60      	cmp	r3, #96	; 0x60
 80099f2:	d906      	bls.n	8009a02 <Hex2Num+0x32>
 80099f4:	79fb      	ldrb	r3, [r7, #7]
 80099f6:	2b66      	cmp	r3, #102	; 0x66
 80099f8:	d803      	bhi.n	8009a02 <Hex2Num+0x32>
        return (a - 'a') + 10;
 80099fa:	79fb      	ldrb	r3, [r7, #7]
 80099fc:	3b57      	subs	r3, #87	; 0x57
 80099fe:	b2db      	uxtb	r3, r3
 8009a00:	e00a      	b.n	8009a18 <Hex2Num+0x48>
    } else if (a >= 'A' && a <= 'F') {                      /* Char is uppercase character A - Z (hex) */
 8009a02:	79fb      	ldrb	r3, [r7, #7]
 8009a04:	2b40      	cmp	r3, #64	; 0x40
 8009a06:	d906      	bls.n	8009a16 <Hex2Num+0x46>
 8009a08:	79fb      	ldrb	r3, [r7, #7]
 8009a0a:	2b46      	cmp	r3, #70	; 0x46
 8009a0c:	d803      	bhi.n	8009a16 <Hex2Num+0x46>
        return (a - 'A') + 10;
 8009a0e:	79fb      	ldrb	r3, [r7, #7]
 8009a10:	3b37      	subs	r3, #55	; 0x37
 8009a12:	b2db      	uxtb	r3, r3
 8009a14:	e000      	b.n	8009a18 <Hex2Num+0x48>
    }

    return 0;
 8009a16:	2300      	movs	r3, #0
}
 8009a18:	4618      	mov	r0, r3
 8009a1a:	370c      	adds	r7, #12
 8009a1c:	46bd      	mov	sp, r7
 8009a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a22:	4770      	bx	lr

08009a24 <ParseHexNumber>:
  * @param  ptr: pointer to string
  * @param  cnt: pointer to the number of parsed digit
  * @retval Hex value.
  */
static uint32_t ParseHexNumber(char* ptr, uint8_t* cnt)
{
 8009a24:	b580      	push	{r7, lr}
 8009a26:	b084      	sub	sp, #16
 8009a28:	af00      	add	r7, sp, #0
 8009a2a:	6078      	str	r0, [r7, #4]
 8009a2c:	6039      	str	r1, [r7, #0]
    uint32_t sum = 0;
 8009a2e:	2300      	movs	r3, #0
 8009a30:	60fb      	str	r3, [r7, #12]
    uint8_t i = 0;
 8009a32:	2300      	movs	r3, #0
 8009a34:	72fb      	strb	r3, [r7, #11]

    while (CHARISHEXNUM(*ptr)) {                    		/* Parse number */
 8009a36:	e012      	b.n	8009a5e <ParseHexNumber+0x3a>
        sum <<= 4;
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	011b      	lsls	r3, r3, #4
 8009a3c:	60fb      	str	r3, [r7, #12]
        sum += Hex2Num(*ptr);
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	781b      	ldrb	r3, [r3, #0]
 8009a42:	4618      	mov	r0, r3
 8009a44:	f7ff ffc4 	bl	80099d0 <Hex2Num>
 8009a48:	4603      	mov	r3, r0
 8009a4a:	461a      	mov	r2, r3
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	4413      	add	r3, r2
 8009a50:	60fb      	str	r3, [r7, #12]
        ptr++;
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	3301      	adds	r3, #1
 8009a56:	607b      	str	r3, [r7, #4]
        i++;
 8009a58:	7afb      	ldrb	r3, [r7, #11]
 8009a5a:	3301      	adds	r3, #1
 8009a5c:	72fb      	strb	r3, [r7, #11]
    while (CHARISHEXNUM(*ptr)) {                    		/* Parse number */
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	781b      	ldrb	r3, [r3, #0]
 8009a62:	2b2f      	cmp	r3, #47	; 0x2f
 8009a64:	d903      	bls.n	8009a6e <ParseHexNumber+0x4a>
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	781b      	ldrb	r3, [r3, #0]
 8009a6a:	2b39      	cmp	r3, #57	; 0x39
 8009a6c:	d9e4      	bls.n	8009a38 <ParseHexNumber+0x14>
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	781b      	ldrb	r3, [r3, #0]
 8009a72:	2b60      	cmp	r3, #96	; 0x60
 8009a74:	d903      	bls.n	8009a7e <ParseHexNumber+0x5a>
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	781b      	ldrb	r3, [r3, #0]
 8009a7a:	2b66      	cmp	r3, #102	; 0x66
 8009a7c:	d9dc      	bls.n	8009a38 <ParseHexNumber+0x14>
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	781b      	ldrb	r3, [r3, #0]
 8009a82:	2b40      	cmp	r3, #64	; 0x40
 8009a84:	d903      	bls.n	8009a8e <ParseHexNumber+0x6a>
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	781b      	ldrb	r3, [r3, #0]
 8009a8a:	2b46      	cmp	r3, #70	; 0x46
 8009a8c:	d9d4      	bls.n	8009a38 <ParseHexNumber+0x14>
    }

    if (cnt != NULL) {                               		/* Save number of characters used for number */
 8009a8e:	683b      	ldr	r3, [r7, #0]
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d002      	beq.n	8009a9a <ParseHexNumber+0x76>
        *cnt = i;
 8009a94:	683b      	ldr	r3, [r7, #0]
 8009a96:	7afa      	ldrb	r2, [r7, #11]
 8009a98:	701a      	strb	r2, [r3, #0]
    }
    return sum;                                        		/* Return number */
 8009a9a:	68fb      	ldr	r3, [r7, #12]
}
 8009a9c:	4618      	mov	r0, r3
 8009a9e:	3710      	adds	r7, #16
 8009aa0:	46bd      	mov	sp, r7
 8009aa2:	bd80      	pop	{r7, pc}

08009aa4 <ParseNumber>:
  * @param  ptr: pointer to string
  * @param  cnt: pointer to the number of parsed digit
  * @retval integer value.
  */
static int32_t ParseNumber(char* ptr, uint8_t* cnt)
{
 8009aa4:	b480      	push	{r7}
 8009aa6:	b085      	sub	sp, #20
 8009aa8:	af00      	add	r7, sp, #0
 8009aaa:	6078      	str	r0, [r7, #4]
 8009aac:	6039      	str	r1, [r7, #0]
    uint8_t minus = 0, i = 0;
 8009aae:	2300      	movs	r3, #0
 8009ab0:	73fb      	strb	r3, [r7, #15]
 8009ab2:	2300      	movs	r3, #0
 8009ab4:	73bb      	strb	r3, [r7, #14]
    int32_t sum = 0;
 8009ab6:	2300      	movs	r3, #0
 8009ab8:	60bb      	str	r3, [r7, #8]

    if (*ptr == '-') {                                		/* Check for minus character */
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	781b      	ldrb	r3, [r3, #0]
 8009abe:	2b2d      	cmp	r3, #45	; 0x2d
 8009ac0:	d119      	bne.n	8009af6 <ParseNumber+0x52>
        minus = 1;
 8009ac2:	2301      	movs	r3, #1
 8009ac4:	73fb      	strb	r3, [r7, #15]
        ptr++;
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	3301      	adds	r3, #1
 8009aca:	607b      	str	r3, [r7, #4]
        i++;
 8009acc:	7bbb      	ldrb	r3, [r7, #14]
 8009ace:	3301      	adds	r3, #1
 8009ad0:	73bb      	strb	r3, [r7, #14]
    }
    while (CHARISNUM(*ptr)) {                        		/* Parse number */
 8009ad2:	e010      	b.n	8009af6 <ParseNumber+0x52>
        sum = 10 * sum + CHAR2NUM(*ptr);
 8009ad4:	68ba      	ldr	r2, [r7, #8]
 8009ad6:	4613      	mov	r3, r2
 8009ad8:	009b      	lsls	r3, r3, #2
 8009ada:	4413      	add	r3, r2
 8009adc:	005b      	lsls	r3, r3, #1
 8009ade:	461a      	mov	r2, r3
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	781b      	ldrb	r3, [r3, #0]
 8009ae4:	3b30      	subs	r3, #48	; 0x30
 8009ae6:	4413      	add	r3, r2
 8009ae8:	60bb      	str	r3, [r7, #8]
        ptr++;
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	3301      	adds	r3, #1
 8009aee:	607b      	str	r3, [r7, #4]
        i++;
 8009af0:	7bbb      	ldrb	r3, [r7, #14]
 8009af2:	3301      	adds	r3, #1
 8009af4:	73bb      	strb	r3, [r7, #14]
    while (CHARISNUM(*ptr)) {                        		/* Parse number */
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	781b      	ldrb	r3, [r3, #0]
 8009afa:	2b2f      	cmp	r3, #47	; 0x2f
 8009afc:	d903      	bls.n	8009b06 <ParseNumber+0x62>
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	781b      	ldrb	r3, [r3, #0]
 8009b02:	2b39      	cmp	r3, #57	; 0x39
 8009b04:	d9e6      	bls.n	8009ad4 <ParseNumber+0x30>
    }
    if (cnt != NULL) {                                		/* Save number of characters used for number */
 8009b06:	683b      	ldr	r3, [r7, #0]
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d002      	beq.n	8009b12 <ParseNumber+0x6e>
        *cnt = i;
 8009b0c:	683b      	ldr	r3, [r7, #0]
 8009b0e:	7bba      	ldrb	r2, [r7, #14]
 8009b10:	701a      	strb	r2, [r3, #0]
    }
    if (minus) {                                    		/* Minus detected */
 8009b12:	7bfb      	ldrb	r3, [r7, #15]
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d002      	beq.n	8009b1e <ParseNumber+0x7a>
        return 0 - sum;
 8009b18:	68bb      	ldr	r3, [r7, #8]
 8009b1a:	425b      	negs	r3, r3
 8009b1c:	e000      	b.n	8009b20 <ParseNumber+0x7c>
    }
    return sum;                                       		/* Return number */
 8009b1e:	68bb      	ldr	r3, [r7, #8]
}
 8009b20:	4618      	mov	r0, r3
 8009b22:	3714      	adds	r7, #20
 8009b24:	46bd      	mov	sp, r7
 8009b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b2a:	4770      	bx	lr

08009b2c <ParseMAC>:
  * @param  ptr: pointer to string
  * @param  arr: pointer to MAC array
  * @retval None.
  */
static void ParseMAC(char* ptr, uint8_t* arr)
{
 8009b2c:	b580      	push	{r7, lr}
 8009b2e:	b084      	sub	sp, #16
 8009b30:	af00      	add	r7, sp, #0
 8009b32:	6078      	str	r0, [r7, #4]
 8009b34:	6039      	str	r1, [r7, #0]
  uint8_t hexnum = 0, hexcnt;
 8009b36:	2300      	movs	r3, #0
 8009b38:	73fb      	strb	r3, [r7, #15]

  while(* ptr) {
 8009b3a:	e019      	b.n	8009b70 <ParseMAC+0x44>
    hexcnt = 1;
 8009b3c:	2301      	movs	r3, #1
 8009b3e:	73bb      	strb	r3, [r7, #14]
    if(*ptr != ':')
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	781b      	ldrb	r3, [r3, #0]
 8009b44:	2b3a      	cmp	r3, #58	; 0x3a
 8009b46:	d00e      	beq.n	8009b66 <ParseMAC+0x3a>
    {
      arr[hexnum++] = ParseHexNumber(ptr, &hexcnt);
 8009b48:	f107 030e 	add.w	r3, r7, #14
 8009b4c:	4619      	mov	r1, r3
 8009b4e:	6878      	ldr	r0, [r7, #4]
 8009b50:	f7ff ff68 	bl	8009a24 <ParseHexNumber>
 8009b54:	4601      	mov	r1, r0
 8009b56:	7bfb      	ldrb	r3, [r7, #15]
 8009b58:	1c5a      	adds	r2, r3, #1
 8009b5a:	73fa      	strb	r2, [r7, #15]
 8009b5c:	461a      	mov	r2, r3
 8009b5e:	683b      	ldr	r3, [r7, #0]
 8009b60:	4413      	add	r3, r2
 8009b62:	b2ca      	uxtb	r2, r1
 8009b64:	701a      	strb	r2, [r3, #0]
    }
    ptr = ptr + hexcnt;
 8009b66:	7bbb      	ldrb	r3, [r7, #14]
 8009b68:	461a      	mov	r2, r3
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	4413      	add	r3, r2
 8009b6e:	607b      	str	r3, [r7, #4]
  while(* ptr) {
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	781b      	ldrb	r3, [r3, #0]
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d1e1      	bne.n	8009b3c <ParseMAC+0x10>
  }
}
 8009b78:	bf00      	nop
 8009b7a:	bf00      	nop
 8009b7c:	3710      	adds	r7, #16
 8009b7e:	46bd      	mov	sp, r7
 8009b80:	bd80      	pop	{r7, pc}

08009b82 <ParseIP>:
  * @param  ptr: pointer to string
  * @param  arr: pointer to IP array
  * @retval None.
  */
static  void ParseIP(char* ptr, uint8_t* arr)
{
 8009b82:	b580      	push	{r7, lr}
 8009b84:	b084      	sub	sp, #16
 8009b86:	af00      	add	r7, sp, #0
 8009b88:	6078      	str	r0, [r7, #4]
 8009b8a:	6039      	str	r1, [r7, #0]
  uint8_t hexnum = 0, hexcnt;
 8009b8c:	2300      	movs	r3, #0
 8009b8e:	73fb      	strb	r3, [r7, #15]

  while(* ptr) {
 8009b90:	e019      	b.n	8009bc6 <ParseIP+0x44>
    hexcnt = 1;
 8009b92:	2301      	movs	r3, #1
 8009b94:	73bb      	strb	r3, [r7, #14]
    if(*ptr != '.')
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	781b      	ldrb	r3, [r3, #0]
 8009b9a:	2b2e      	cmp	r3, #46	; 0x2e
 8009b9c:	d00e      	beq.n	8009bbc <ParseIP+0x3a>
    {
      arr[hexnum++] = ParseNumber(ptr, &hexcnt);
 8009b9e:	f107 030e 	add.w	r3, r7, #14
 8009ba2:	4619      	mov	r1, r3
 8009ba4:	6878      	ldr	r0, [r7, #4]
 8009ba6:	f7ff ff7d 	bl	8009aa4 <ParseNumber>
 8009baa:	4601      	mov	r1, r0
 8009bac:	7bfb      	ldrb	r3, [r7, #15]
 8009bae:	1c5a      	adds	r2, r3, #1
 8009bb0:	73fa      	strb	r2, [r7, #15]
 8009bb2:	461a      	mov	r2, r3
 8009bb4:	683b      	ldr	r3, [r7, #0]
 8009bb6:	4413      	add	r3, r2
 8009bb8:	b2ca      	uxtb	r2, r1
 8009bba:	701a      	strb	r2, [r3, #0]
    }
    ptr = ptr + hexcnt;
 8009bbc:	7bbb      	ldrb	r3, [r7, #14]
 8009bbe:	461a      	mov	r2, r3
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	4413      	add	r3, r2
 8009bc4:	607b      	str	r3, [r7, #4]
  while(* ptr) {
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	781b      	ldrb	r3, [r3, #0]
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d1e1      	bne.n	8009b92 <ParseIP+0x10>
  }
}
 8009bce:	bf00      	nop
 8009bd0:	bf00      	nop
 8009bd2:	3710      	adds	r7, #16
 8009bd4:	46bd      	mov	sp, r7
 8009bd6:	bd80      	pop	{r7, pc}

08009bd8 <AT_ParseInfo>:
  * @param  Obj: pointer to module handle
  * @param  ptr: pointer to string
  * @retval None.
  */
static void AT_ParseInfo(ES_WIFIObject_t *Obj,uint8_t *pdata)
{
 8009bd8:	b580      	push	{r7, lr}
 8009bda:	b084      	sub	sp, #16
 8009bdc:	af00      	add	r7, sp, #0
 8009bde:	6078      	str	r0, [r7, #4]
 8009be0:	6039      	str	r1, [r7, #0]
  char *ptr;
  uint8_t num = 0;
 8009be2:	2300      	movs	r3, #0
 8009be4:	72fb      	strb	r3, [r7, #11]

  ptr = strtok((char *)pdata + 2, ",");
 8009be6:	683b      	ldr	r3, [r7, #0]
 8009be8:	3302      	adds	r3, #2
 8009bea:	4934      	ldr	r1, [pc, #208]	; (8009cbc <AT_ParseInfo+0xe4>)
 8009bec:	4618      	mov	r0, r3
 8009bee:	f009 fb8b 	bl	8013308 <strtok>
 8009bf2:	60f8      	str	r0, [r7, #12]

  while (ptr != NULL){
 8009bf4:	e05a      	b.n	8009cac <AT_ParseInfo+0xd4>
    switch (num++) {
 8009bf6:	7afb      	ldrb	r3, [r7, #11]
 8009bf8:	1c5a      	adds	r2, r3, #1
 8009bfa:	72fa      	strb	r2, [r7, #11]
 8009bfc:	2b06      	cmp	r3, #6
 8009bfe:	d84f      	bhi.n	8009ca0 <AT_ParseInfo+0xc8>
 8009c00:	a201      	add	r2, pc, #4	; (adr r2, 8009c08 <AT_ParseInfo+0x30>)
 8009c02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c06:	bf00      	nop
 8009c08:	08009c25 	.word	0x08009c25
 8009c0c:	08009c33 	.word	0x08009c33
 8009c10:	08009c43 	.word	0x08009c43
 8009c14:	08009c53 	.word	0x08009c53
 8009c18:	08009c63 	.word	0x08009c63
 8009c1c:	08009c73 	.word	0x08009c73
 8009c20:	08009c87 	.word	0x08009c87
    case 0:
      strncpy((char *)Obj->Product_ID,  ptr, ES_WIFI_PRODUCT_ID_SIZE);
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	2220      	movs	r2, #32
 8009c28:	68f9      	ldr	r1, [r7, #12]
 8009c2a:	4618      	mov	r0, r3
 8009c2c:	f009 fb43 	bl	80132b6 <strncpy>
      break;
 8009c30:	e037      	b.n	8009ca2 <AT_ParseInfo+0xca>

    case 1:
      strncpy((char *)Obj->FW_Rev,  ptr, ES_WIFI_FW_REV_SIZE );
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	3320      	adds	r3, #32
 8009c36:	2218      	movs	r2, #24
 8009c38:	68f9      	ldr	r1, [r7, #12]
 8009c3a:	4618      	mov	r0, r3
 8009c3c:	f009 fb3b 	bl	80132b6 <strncpy>
      break;
 8009c40:	e02f      	b.n	8009ca2 <AT_ParseInfo+0xca>

    case 2:
      strncpy((char *)Obj->API_Rev,  ptr, ES_WIFI_API_REV_SIZE);
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	3338      	adds	r3, #56	; 0x38
 8009c46:	2210      	movs	r2, #16
 8009c48:	68f9      	ldr	r1, [r7, #12]
 8009c4a:	4618      	mov	r0, r3
 8009c4c:	f009 fb33 	bl	80132b6 <strncpy>
      break;
 8009c50:	e027      	b.n	8009ca2 <AT_ParseInfo+0xca>

    case 3:
      strncpy((char *)Obj->Stack_Rev,  ptr, ES_WIFI_STACK_REV_SIZE);
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	3348      	adds	r3, #72	; 0x48
 8009c56:	2210      	movs	r2, #16
 8009c58:	68f9      	ldr	r1, [r7, #12]
 8009c5a:	4618      	mov	r0, r3
 8009c5c:	f009 fb2b 	bl	80132b6 <strncpy>
      break;
 8009c60:	e01f      	b.n	8009ca2 <AT_ParseInfo+0xca>

    case 4:
      strncpy((char *)Obj->RTOS_Rev,  ptr, ES_WIFI_RTOS_REV_SIZE);
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	3358      	adds	r3, #88	; 0x58
 8009c66:	2210      	movs	r2, #16
 8009c68:	68f9      	ldr	r1, [r7, #12]
 8009c6a:	4618      	mov	r0, r3
 8009c6c:	f009 fb23 	bl	80132b6 <strncpy>
      break;
 8009c70:	e017      	b.n	8009ca2 <AT_ParseInfo+0xca>

    case 5:
      Obj->CPU_Clock = ParseNumber(ptr, NULL);
 8009c72:	2100      	movs	r1, #0
 8009c74:	68f8      	ldr	r0, [r7, #12]
 8009c76:	f7ff ff15 	bl	8009aa4 <ParseNumber>
 8009c7a:	4603      	mov	r3, r0
 8009c7c:	461a      	mov	r2, r3
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      break;
 8009c84:	e00d      	b.n	8009ca2 <AT_ParseInfo+0xca>

    case 6:
      ptr = strtok(ptr, "\r");
 8009c86:	490e      	ldr	r1, [pc, #56]	; (8009cc0 <AT_ParseInfo+0xe8>)
 8009c88:	68f8      	ldr	r0, [r7, #12]
 8009c8a:	f009 fb3d 	bl	8013308 <strtok>
 8009c8e:	60f8      	str	r0, [r7, #12]
      strncpy((char *)Obj->Product_Name,  ptr, ES_WIFI_PRODUCT_NAME_SIZE);
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	3368      	adds	r3, #104	; 0x68
 8009c94:	2220      	movs	r2, #32
 8009c96:	68f9      	ldr	r1, [r7, #12]
 8009c98:	4618      	mov	r0, r3
 8009c9a:	f009 fb0c 	bl	80132b6 <strncpy>
      break;
 8009c9e:	e000      	b.n	8009ca2 <AT_ParseInfo+0xca>

    default: break;
 8009ca0:	bf00      	nop
    }
    ptr = strtok(NULL, ",");
 8009ca2:	4906      	ldr	r1, [pc, #24]	; (8009cbc <AT_ParseInfo+0xe4>)
 8009ca4:	2000      	movs	r0, #0
 8009ca6:	f009 fb2f 	bl	8013308 <strtok>
 8009caa:	60f8      	str	r0, [r7, #12]
  while (ptr != NULL){
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d1a1      	bne.n	8009bf6 <AT_ParseInfo+0x1e>
  }
}
 8009cb2:	bf00      	nop
 8009cb4:	bf00      	nop
 8009cb6:	3710      	adds	r7, #16
 8009cb8:	46bd      	mov	sp, r7
 8009cba:	bd80      	pop	{r7, pc}
 8009cbc:	080145c4 	.word	0x080145c4
 8009cc0:	080145c8 	.word	0x080145c8

08009cc4 <AT_ParseConnSettings>:
  * @param  NetSettings: settings
  * @param  pdata: pointer to data
  * @retval None.
  */
static void AT_ParseConnSettings(char *pdata, ES_WIFI_Network_t *NetSettings)
{
 8009cc4:	b580      	push	{r7, lr}
 8009cc6:	b084      	sub	sp, #16
 8009cc8:	af00      	add	r7, sp, #0
 8009cca:	6078      	str	r0, [r7, #4]
 8009ccc:	6039      	str	r1, [r7, #0]
  uint8_t num = 0;
 8009cce:	2300      	movs	r3, #0
 8009cd0:	73fb      	strb	r3, [r7, #15]
  char *ptr;

  ptr = strtok(pdata + 2, ",");
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	3302      	adds	r3, #2
 8009cd6:	4952      	ldr	r1, [pc, #328]	; (8009e20 <AT_ParseConnSettings+0x15c>)
 8009cd8:	4618      	mov	r0, r3
 8009cda:	f009 fb15 	bl	8013308 <strtok>
 8009cde:	60b8      	str	r0, [r7, #8]

  while (ptr != NULL) {
 8009ce0:	e095      	b.n	8009e0e <AT_ParseConnSettings+0x14a>
    switch (num++) {
 8009ce2:	7bfb      	ldrb	r3, [r7, #15]
 8009ce4:	1c5a      	adds	r2, r3, #1
 8009ce6:	73fa      	strb	r2, [r7, #15]
 8009ce8:	2b0b      	cmp	r3, #11
 8009cea:	d87f      	bhi.n	8009dec <AT_ParseConnSettings+0x128>
 8009cec:	a201      	add	r2, pc, #4	; (adr r2, 8009cf4 <AT_ParseConnSettings+0x30>)
 8009cee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009cf2:	bf00      	nop
 8009cf4:	08009d25 	.word	0x08009d25
 8009cf8:	08009d33 	.word	0x08009d33
 8009cfc:	08009d43 	.word	0x08009d43
 8009d00:	08009d57 	.word	0x08009d57
 8009d04:	08009d6b 	.word	0x08009d6b
 8009d08:	08009d7f 	.word	0x08009d7f
 8009d0c:	08009d8d 	.word	0x08009d8d
 8009d10:	08009d9b 	.word	0x08009d9b
 8009d14:	08009da9 	.word	0x08009da9
 8009d18:	08009db7 	.word	0x08009db7
 8009d1c:	08009dc5 	.word	0x08009dc5
 8009d20:	08009dd9 	.word	0x08009dd9
    case 0:
      strncpy((char *)NetSettings->SSID,  ptr, ES_WIFI_MAX_SSID_NAME_SIZE + 1);
 8009d24:	683b      	ldr	r3, [r7, #0]
 8009d26:	2221      	movs	r2, #33	; 0x21
 8009d28:	68b9      	ldr	r1, [r7, #8]
 8009d2a:	4618      	mov	r0, r3
 8009d2c:	f009 fac3 	bl	80132b6 <strncpy>
      break;
 8009d30:	e05d      	b.n	8009dee <AT_ParseConnSettings+0x12a>

    case 1:
      strncpy((char *)NetSettings->pswd,  ptr, ES_WIFI_MAX_PSWD_NAME_SIZE + 1);
 8009d32:	683b      	ldr	r3, [r7, #0]
 8009d34:	3321      	adds	r3, #33	; 0x21
 8009d36:	2221      	movs	r2, #33	; 0x21
 8009d38:	68b9      	ldr	r1, [r7, #8]
 8009d3a:	4618      	mov	r0, r3
 8009d3c:	f009 fabb 	bl	80132b6 <strncpy>
      break;
 8009d40:	e055      	b.n	8009dee <AT_ParseConnSettings+0x12a>

    case 2:
        NetSettings->Security = (ES_WIFI_SecurityType_t)ParseNumber(ptr, NULL);
 8009d42:	2100      	movs	r1, #0
 8009d44:	68b8      	ldr	r0, [r7, #8]
 8009d46:	f7ff fead 	bl	8009aa4 <ParseNumber>
 8009d4a:	4603      	mov	r3, r0
 8009d4c:	b2da      	uxtb	r2, r3
 8009d4e:	683b      	ldr	r3, [r7, #0]
 8009d50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        break;
 8009d54:	e04b      	b.n	8009dee <AT_ParseConnSettings+0x12a>

    case 3:
      NetSettings->DHCP_IsEnabled = ParseNumber(ptr, NULL);
 8009d56:	2100      	movs	r1, #0
 8009d58:	68b8      	ldr	r0, [r7, #8]
 8009d5a:	f7ff fea3 	bl	8009aa4 <ParseNumber>
 8009d5e:	4603      	mov	r3, r0
 8009d60:	b2da      	uxtb	r2, r3
 8009d62:	683b      	ldr	r3, [r7, #0]
 8009d64:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      break;
 8009d68:	e041      	b.n	8009dee <AT_ParseConnSettings+0x12a>

    case 4:
      NetSettings->IP_Ver = (ES_WIFI_IPVer_t)ParseNumber(ptr, NULL);
 8009d6a:	2100      	movs	r1, #0
 8009d6c:	68b8      	ldr	r0, [r7, #8]
 8009d6e:	f7ff fe99 	bl	8009aa4 <ParseNumber>
 8009d72:	4603      	mov	r3, r0
 8009d74:	b2da      	uxtb	r2, r3
 8009d76:	683b      	ldr	r3, [r7, #0]
 8009d78:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
      break;
 8009d7c:	e037      	b.n	8009dee <AT_ParseConnSettings+0x12a>

    case 5:
      ParseIP(ptr, NetSettings->IP_Addr);
 8009d7e:	683b      	ldr	r3, [r7, #0]
 8009d80:	3348      	adds	r3, #72	; 0x48
 8009d82:	4619      	mov	r1, r3
 8009d84:	68b8      	ldr	r0, [r7, #8]
 8009d86:	f7ff fefc 	bl	8009b82 <ParseIP>
      break;
 8009d8a:	e030      	b.n	8009dee <AT_ParseConnSettings+0x12a>

    case 6:
      ParseIP(ptr, NetSettings->IP_Mask);
 8009d8c:	683b      	ldr	r3, [r7, #0]
 8009d8e:	334c      	adds	r3, #76	; 0x4c
 8009d90:	4619      	mov	r1, r3
 8009d92:	68b8      	ldr	r0, [r7, #8]
 8009d94:	f7ff fef5 	bl	8009b82 <ParseIP>
      break;
 8009d98:	e029      	b.n	8009dee <AT_ParseConnSettings+0x12a>

    case 7:
      ParseIP(ptr, NetSettings->Gateway_Addr);
 8009d9a:	683b      	ldr	r3, [r7, #0]
 8009d9c:	3350      	adds	r3, #80	; 0x50
 8009d9e:	4619      	mov	r1, r3
 8009da0:	68b8      	ldr	r0, [r7, #8]
 8009da2:	f7ff feee 	bl	8009b82 <ParseIP>
      break;
 8009da6:	e022      	b.n	8009dee <AT_ParseConnSettings+0x12a>

    case 8:
      ParseIP(ptr, NetSettings->DNS1);
 8009da8:	683b      	ldr	r3, [r7, #0]
 8009daa:	3354      	adds	r3, #84	; 0x54
 8009dac:	4619      	mov	r1, r3
 8009dae:	68b8      	ldr	r0, [r7, #8]
 8009db0:	f7ff fee7 	bl	8009b82 <ParseIP>
      break;
 8009db4:	e01b      	b.n	8009dee <AT_ParseConnSettings+0x12a>

    case 9:
      ParseIP(ptr, NetSettings->DNS2);
 8009db6:	683b      	ldr	r3, [r7, #0]
 8009db8:	3358      	adds	r3, #88	; 0x58
 8009dba:	4619      	mov	r1, r3
 8009dbc:	68b8      	ldr	r0, [r7, #8]
 8009dbe:	f7ff fee0 	bl	8009b82 <ParseIP>
      break;
 8009dc2:	e014      	b.n	8009dee <AT_ParseConnSettings+0x12a>

    case 10:
      NetSettings->JoinRetries = ParseNumber(ptr, NULL);
 8009dc4:	2100      	movs	r1, #0
 8009dc6:	68b8      	ldr	r0, [r7, #8]
 8009dc8:	f7ff fe6c 	bl	8009aa4 <ParseNumber>
 8009dcc:	4603      	mov	r3, r0
 8009dce:	b2da      	uxtb	r2, r3
 8009dd0:	683b      	ldr	r3, [r7, #0]
 8009dd2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      break;
 8009dd6:	e00a      	b.n	8009dee <AT_ParseConnSettings+0x12a>

    case 11:
      NetSettings->AutoConnect = ParseNumber(ptr, NULL);
 8009dd8:	2100      	movs	r1, #0
 8009dda:	68b8      	ldr	r0, [r7, #8]
 8009ddc:	f7ff fe62 	bl	8009aa4 <ParseNumber>
 8009de0:	4603      	mov	r3, r0
 8009de2:	b2da      	uxtb	r2, r3
 8009de4:	683b      	ldr	r3, [r7, #0]
 8009de6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
      break;
 8009dea:	e000      	b.n	8009dee <AT_ParseConnSettings+0x12a>

    default:
      break;
 8009dec:	bf00      	nop
    }
    ptr = strtok(NULL, ",");
 8009dee:	490c      	ldr	r1, [pc, #48]	; (8009e20 <AT_ParseConnSettings+0x15c>)
 8009df0:	2000      	movs	r0, #0
 8009df2:	f009 fa89 	bl	8013308 <strtok>
 8009df6:	60b8      	str	r0, [r7, #8]
    if ((ptr != NULL) && (ptr[-1] == ','))
 8009df8:	68bb      	ldr	r3, [r7, #8]
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d007      	beq.n	8009e0e <AT_ParseConnSettings+0x14a>
 8009dfe:	68bb      	ldr	r3, [r7, #8]
 8009e00:	3b01      	subs	r3, #1
 8009e02:	781b      	ldrb	r3, [r3, #0]
 8009e04:	2b2c      	cmp	r3, #44	; 0x2c
 8009e06:	d102      	bne.n	8009e0e <AT_ParseConnSettings+0x14a>
    { /* Ignore empty fields */
      num++;
 8009e08:	7bfb      	ldrb	r3, [r7, #15]
 8009e0a:	3301      	adds	r3, #1
 8009e0c:	73fb      	strb	r3, [r7, #15]
  while (ptr != NULL) {
 8009e0e:	68bb      	ldr	r3, [r7, #8]
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	f47f af66 	bne.w	8009ce2 <AT_ParseConnSettings+0x1e>
    }
  }
}
 8009e16:	bf00      	nop
 8009e18:	bf00      	nop
 8009e1a:	3710      	adds	r7, #16
 8009e1c:	46bd      	mov	sp, r7
 8009e1e:	bd80      	pop	{r7, pc}
 8009e20:	080145c4 	.word	0x080145c4

08009e24 <AT_ParseIsConnected>:
  * @param  pdata: pointer to data
  * @param  isConnected: pointer to result
  * @retval None.
  */
static void AT_ParseIsConnected(char *pdata, uint8_t *isConnected)
{
 8009e24:	b480      	push	{r7}
 8009e26:	b083      	sub	sp, #12
 8009e28:	af00      	add	r7, sp, #0
 8009e2a:	6078      	str	r0, [r7, #4]
 8009e2c:	6039      	str	r1, [r7, #0]
  *isConnected = (pdata[2] == '1') ? 1 : 0;
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	3302      	adds	r3, #2
 8009e32:	781b      	ldrb	r3, [r3, #0]
 8009e34:	2b31      	cmp	r3, #49	; 0x31
 8009e36:	bf0c      	ite	eq
 8009e38:	2301      	moveq	r3, #1
 8009e3a:	2300      	movne	r3, #0
 8009e3c:	b2db      	uxtb	r3, r3
 8009e3e:	461a      	mov	r2, r3
 8009e40:	683b      	ldr	r3, [r7, #0]
 8009e42:	701a      	strb	r2, [r3, #0]
}
 8009e44:	bf00      	nop
 8009e46:	370c      	adds	r7, #12
 8009e48:	46bd      	mov	sp, r7
 8009e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e4e:	4770      	bx	lr

08009e50 <AT_ExecuteCommand>:
  * @param  cmd: pointer to command string
  * @param  pdata: pointer to returned data
  * @retval Operation Status.
  */
static ES_WIFI_Status_t AT_ExecuteCommand(ES_WIFIObject_t *Obj, uint8_t* cmd, uint8_t *pdata)
{
 8009e50:	b590      	push	{r4, r7, lr}
 8009e52:	b087      	sub	sp, #28
 8009e54:	af00      	add	r7, sp, #0
 8009e56:	60f8      	str	r0, [r7, #12]
 8009e58:	60b9      	str	r1, [r7, #8]
 8009e5a:	607a      	str	r2, [r7, #4]
  int ret = 0;
 8009e5c:	2300      	movs	r3, #0
 8009e5e:	613b      	str	r3, [r7, #16]
  int16_t recv_len = 0;
 8009e60:	2300      	movs	r3, #0
 8009e62:	82fb      	strh	r3, [r7, #22]
  LOCK_WIFI();

  ret = Obj->fops.IO_Send(cmd, strlen((char*)cmd), Obj->Timeout);
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	f8d3 4120 	ldr.w	r4, [r3, #288]	; 0x120
 8009e6a:	68b8      	ldr	r0, [r7, #8]
 8009e6c:	f7f6 f9b0 	bl	80001d0 <strlen>
 8009e70:	4603      	mov	r3, r0
 8009e72:	b299      	uxth	r1, r3
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	; 0x8f8
 8009e7a:	461a      	mov	r2, r3
 8009e7c:	68b8      	ldr	r0, [r7, #8]
 8009e7e:	47a0      	blx	r4
 8009e80:	4603      	mov	r3, r0
 8009e82:	613b      	str	r3, [r7, #16]

  if( ret > 0)
 8009e84:	693b      	ldr	r3, [r7, #16]
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	dd3e      	ble.n	8009f08 <AT_ExecuteCommand+0xb8>
  {
    recv_len = Obj->fops.IO_Receive(pdata, ES_WIFI_DATA_SIZE, Obj->Timeout);
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8009e90:	68fa      	ldr	r2, [r7, #12]
 8009e92:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	; 0x8f8
 8009e96:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8009e9a:	6878      	ldr	r0, [r7, #4]
 8009e9c:	4798      	blx	r3
 8009e9e:	4603      	mov	r3, r0
 8009ea0:	82fb      	strh	r3, [r7, #22]
    if((recv_len > 0) && (recv_len <= ES_WIFI_DATA_SIZE))
 8009ea2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	dd27      	ble.n	8009efa <AT_ExecuteCommand+0xaa>
 8009eaa:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8009eae:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8009eb2:	dc22      	bgt.n	8009efa <AT_ExecuteCommand+0xaa>
    {
      if (recv_len == ES_WIFI_DATA_SIZE)
 8009eb4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8009eb8:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8009ebc:	d105      	bne.n	8009eca <AT_ExecuteCommand+0x7a>
      {
        // ES_WIFI_DATA_SIZE maybe too small !!
        recv_len--;
 8009ebe:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8009ec2:	b29b      	uxth	r3, r3
 8009ec4:	3b01      	subs	r3, #1
 8009ec6:	b29b      	uxth	r3, r3
 8009ec8:	82fb      	strh	r3, [r7, #22]
      }
      *(pdata + recv_len) = 0;
 8009eca:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8009ece:	687a      	ldr	r2, [r7, #4]
 8009ed0:	4413      	add	r3, r2
 8009ed2:	2200      	movs	r2, #0
 8009ed4:	701a      	strb	r2, [r3, #0]
      if(strstr((char *)pdata, AT_OK_STRING))
 8009ed6:	490f      	ldr	r1, [pc, #60]	; (8009f14 <AT_ExecuteCommand+0xc4>)
 8009ed8:	6878      	ldr	r0, [r7, #4]
 8009eda:	f009 f9ff 	bl	80132dc <strstr>
 8009ede:	4603      	mov	r3, r0
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d001      	beq.n	8009ee8 <AT_ExecuteCommand+0x98>
      {
        UNLOCK_WIFI();
        return ES_WIFI_STATUS_OK;
 8009ee4:	2300      	movs	r3, #0
 8009ee6:	e010      	b.n	8009f0a <AT_ExecuteCommand+0xba>
      }
      else if(strstr((char *)pdata, AT_ERROR_STRING))
 8009ee8:	490b      	ldr	r1, [pc, #44]	; (8009f18 <AT_ExecuteCommand+0xc8>)
 8009eea:	6878      	ldr	r0, [r7, #4]
 8009eec:	f009 f9f6 	bl	80132dc <strstr>
 8009ef0:	4603      	mov	r3, r0
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d001      	beq.n	8009efa <AT_ExecuteCommand+0xaa>
      {
        UNLOCK_WIFI();
        return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 8009ef6:	2305      	movs	r3, #5
 8009ef8:	e007      	b.n	8009f0a <AT_ExecuteCommand+0xba>
      }
    }
    if (recv_len == ES_WIFI_ERROR_STUFFING_FOREVER )
 8009efa:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8009efe:	f113 0f04 	cmn.w	r3, #4
 8009f02:	d101      	bne.n	8009f08 <AT_ExecuteCommand+0xb8>
    {
      UNLOCK_WIFI();
      return ES_WIFI_STATUS_MODULE_CRASH;
 8009f04:	2306      	movs	r3, #6
 8009f06:	e000      	b.n	8009f0a <AT_ExecuteCommand+0xba>
    }
  }
  UNLOCK_WIFI();
  return ES_WIFI_STATUS_IO_ERROR;
 8009f08:	2304      	movs	r3, #4
}
 8009f0a:	4618      	mov	r0, r3
 8009f0c:	371c      	adds	r7, #28
 8009f0e:	46bd      	mov	sp, r7
 8009f10:	bd90      	pop	{r4, r7, pc}
 8009f12:	bf00      	nop
 8009f14:	080145d8 	.word	0x080145d8
 8009f18:	080145e4 	.word	0x080145e4

08009f1c <AT_RequestSendData>:
  * @param  pdata: pointer to returned data
  * @retval Operation Status.
  */

static ES_WIFI_Status_t AT_RequestSendData(ES_WIFIObject_t *Obj, uint8_t* cmd, uint8_t *pcmd_data, uint16_t len, uint8_t *pdata)
{
 8009f1c:	b580      	push	{r7, lr}
 8009f1e:	b086      	sub	sp, #24
 8009f20:	af00      	add	r7, sp, #0
 8009f22:	60f8      	str	r0, [r7, #12]
 8009f24:	60b9      	str	r1, [r7, #8]
 8009f26:	607a      	str	r2, [r7, #4]
 8009f28:	807b      	strh	r3, [r7, #2]
  int16_t send_len = 0;
 8009f2a:	2300      	movs	r3, #0
 8009f2c:	82fb      	strh	r3, [r7, #22]
  int16_t recv_len = 0;
 8009f2e:	2300      	movs	r3, #0
 8009f30:	82bb      	strh	r3, [r7, #20]
  uint16_t cmd_len = 0;
 8009f32:	2300      	movs	r3, #0
 8009f34:	827b      	strh	r3, [r7, #18]
  uint16_t n ;

  LOCK_WIFI();
  cmd_len = strlen((char*)cmd);
 8009f36:	68b8      	ldr	r0, [r7, #8]
 8009f38:	f7f6 f94a 	bl	80001d0 <strlen>
 8009f3c:	4603      	mov	r3, r0
 8009f3e:	827b      	strh	r3, [r7, #18]

  /* can send only even number of byte on first send */
  if (cmd_len & 1) return ES_WIFI_STATUS_ERROR;
 8009f40:	8a7b      	ldrh	r3, [r7, #18]
 8009f42:	f003 0301 	and.w	r3, r3, #1
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d001      	beq.n	8009f4e <AT_RequestSendData+0x32>
 8009f4a:	2302      	movs	r3, #2
 8009f4c:	e053      	b.n	8009ff6 <AT_RequestSendData+0xda>
  n=Obj->fops.IO_Send(cmd, cmd_len, Obj->Timeout);
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 8009f54:	68fa      	ldr	r2, [r7, #12]
 8009f56:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	; 0x8f8
 8009f5a:	8a79      	ldrh	r1, [r7, #18]
 8009f5c:	68b8      	ldr	r0, [r7, #8]
 8009f5e:	4798      	blx	r3
 8009f60:	4603      	mov	r3, r0
 8009f62:	823b      	strh	r3, [r7, #16]
  if (n == cmd_len)
 8009f64:	8a3a      	ldrh	r2, [r7, #16]
 8009f66:	8a7b      	ldrh	r3, [r7, #18]
 8009f68:	429a      	cmp	r2, r3
 8009f6a:	d143      	bne.n	8009ff4 <AT_RequestSendData+0xd8>
  {
    send_len = Obj->fops.IO_Send(pcmd_data, len, Obj->Timeout);
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 8009f72:	68fa      	ldr	r2, [r7, #12]
 8009f74:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	; 0x8f8
 8009f78:	8879      	ldrh	r1, [r7, #2]
 8009f7a:	6878      	ldr	r0, [r7, #4]
 8009f7c:	4798      	blx	r3
 8009f7e:	4603      	mov	r3, r0
 8009f80:	82fb      	strh	r3, [r7, #22]
    if (send_len == len)
 8009f82:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8009f86:	887b      	ldrh	r3, [r7, #2]
 8009f88:	429a      	cmp	r2, r3
 8009f8a:	d131      	bne.n	8009ff0 <AT_RequestSendData+0xd4>
    {
      recv_len = Obj->fops.IO_Receive(pdata, 0, Obj->Timeout);
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8009f92:	68fa      	ldr	r2, [r7, #12]
 8009f94:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	; 0x8f8
 8009f98:	2100      	movs	r1, #0
 8009f9a:	6a38      	ldr	r0, [r7, #32]
 8009f9c:	4798      	blx	r3
 8009f9e:	4603      	mov	r3, r0
 8009fa0:	82bb      	strh	r3, [r7, #20]
      if (recv_len > 0)
 8009fa2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	dd19      	ble.n	8009fde <AT_RequestSendData+0xc2>
      {
        *(pdata+recv_len) = 0;
 8009faa:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8009fae:	6a3a      	ldr	r2, [r7, #32]
 8009fb0:	4413      	add	r3, r2
 8009fb2:	2200      	movs	r2, #0
 8009fb4:	701a      	strb	r2, [r3, #0]
        if(strstr((char *)pdata, AT_OK_STRING))
 8009fb6:	4912      	ldr	r1, [pc, #72]	; (800a000 <AT_RequestSendData+0xe4>)
 8009fb8:	6a38      	ldr	r0, [r7, #32]
 8009fba:	f009 f98f 	bl	80132dc <strstr>
 8009fbe:	4603      	mov	r3, r0
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	d001      	beq.n	8009fc8 <AT_RequestSendData+0xac>
        {
          UNLOCK_WIFI();
          return ES_WIFI_STATUS_OK;
 8009fc4:	2300      	movs	r3, #0
 8009fc6:	e016      	b.n	8009ff6 <AT_RequestSendData+0xda>
        }
        else if(strstr((char *)pdata, AT_ERROR_STRING))
 8009fc8:	490e      	ldr	r1, [pc, #56]	; (800a004 <AT_RequestSendData+0xe8>)
 8009fca:	6a38      	ldr	r0, [r7, #32]
 8009fcc:	f009 f986 	bl	80132dc <strstr>
 8009fd0:	4603      	mov	r3, r0
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d001      	beq.n	8009fda <AT_RequestSendData+0xbe>
        {
          UNLOCK_WIFI();
          return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 8009fd6:	2305      	movs	r3, #5
 8009fd8:	e00d      	b.n	8009ff6 <AT_RequestSendData+0xda>
        }
        else
        {
          UNLOCK_WIFI();
          return ES_WIFI_STATUS_ERROR;
 8009fda:	2302      	movs	r3, #2
 8009fdc:	e00b      	b.n	8009ff6 <AT_RequestSendData+0xda>
        }
      }
      UNLOCK_WIFI();
      if (recv_len == ES_WIFI_ERROR_STUFFING_FOREVER )
 8009fde:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8009fe2:	f113 0f04 	cmn.w	r3, #4
 8009fe6:	d101      	bne.n	8009fec <AT_RequestSendData+0xd0>
      {
        return ES_WIFI_STATUS_MODULE_CRASH;
 8009fe8:	2306      	movs	r3, #6
 8009fea:	e004      	b.n	8009ff6 <AT_RequestSendData+0xda>
      }
      return ES_WIFI_STATUS_ERROR;
 8009fec:	2302      	movs	r3, #2
 8009fee:	e002      	b.n	8009ff6 <AT_RequestSendData+0xda>
    }
    else
    {
      return ES_WIFI_STATUS_ERROR;
 8009ff0:	2302      	movs	r3, #2
 8009ff2:	e000      	b.n	8009ff6 <AT_RequestSendData+0xda>
    }
  }
  return ES_WIFI_STATUS_IO_ERROR;
 8009ff4:	2304      	movs	r3, #4
}
 8009ff6:	4618      	mov	r0, r3
 8009ff8:	3718      	adds	r7, #24
 8009ffa:	46bd      	mov	sp, r7
 8009ffc:	bd80      	pop	{r7, pc}
 8009ffe:	bf00      	nop
 800a000:	080145d8 	.word	0x080145d8
 800a004:	080145e4 	.word	0x080145e4

0800a008 <AT_RequestReceiveData>:
  * @param  Reqlen : requested Data length.
  * @param  ReadData : pointer to received data length.
  * @retval Operation Status.
  */
static ES_WIFI_Status_t AT_RequestReceiveData(ES_WIFIObject_t *Obj, uint8_t* cmd, char *pdata, uint16_t Reqlen, uint16_t *ReadData)
{
 800a008:	b590      	push	{r4, r7, lr}
 800a00a:	b087      	sub	sp, #28
 800a00c:	af00      	add	r7, sp, #0
 800a00e:	60f8      	str	r0, [r7, #12]
 800a010:	60b9      	str	r1, [r7, #8]
 800a012:	607a      	str	r2, [r7, #4]
 800a014:	807b      	strh	r3, [r7, #2]
  int len;
  uint8_t *p=Obj->CmdData;
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a01c:	613b      	str	r3, [r7, #16]

  LOCK_WIFI();
  if(Obj->fops.IO_Send(cmd, strlen((char*)cmd), Obj->Timeout) > 0)
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	f8d3 4120 	ldr.w	r4, [r3, #288]	; 0x120
 800a024:	68b8      	ldr	r0, [r7, #8]
 800a026:	f7f6 f8d3 	bl	80001d0 <strlen>
 800a02a:	4603      	mov	r3, r0
 800a02c:	b299      	uxth	r1, r3
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	; 0x8f8
 800a034:	461a      	mov	r2, r3
 800a036:	68b8      	ldr	r0, [r7, #8]
 800a038:	47a0      	blx	r4
 800a03a:	4603      	mov	r3, r0
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	dd6f      	ble.n	800a120 <AT_RequestReceiveData+0x118>
  {
    len = Obj->fops.IO_Receive(p, 0 , Obj->Timeout);
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 800a046:	68fa      	ldr	r2, [r7, #12]
 800a048:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	; 0x8f8
 800a04c:	2100      	movs	r1, #0
 800a04e:	6938      	ldr	r0, [r7, #16]
 800a050:	4798      	blx	r3
 800a052:	4603      	mov	r3, r0
 800a054:	617b      	str	r3, [r7, #20]
    if ((p[0]!='\r') || (p[1]!='\n'))
 800a056:	693b      	ldr	r3, [r7, #16]
 800a058:	781b      	ldrb	r3, [r3, #0]
 800a05a:	2b0d      	cmp	r3, #13
 800a05c:	d104      	bne.n	800a068 <AT_RequestReceiveData+0x60>
 800a05e:	693b      	ldr	r3, [r7, #16]
 800a060:	3301      	adds	r3, #1
 800a062:	781b      	ldrb	r3, [r3, #0]
 800a064:	2b0a      	cmp	r3, #10
 800a066:	d001      	beq.n	800a06c <AT_RequestReceiveData+0x64>
    {
     return  ES_WIFI_STATUS_IO_ERROR;
 800a068:	2304      	movs	r3, #4
 800a06a:	e05a      	b.n	800a122 <AT_RequestReceiveData+0x11a>
    }
    len-=2;
 800a06c:	697b      	ldr	r3, [r7, #20]
 800a06e:	3b02      	subs	r3, #2
 800a070:	617b      	str	r3, [r7, #20]
    p+=2;
 800a072:	693b      	ldr	r3, [r7, #16]
 800a074:	3302      	adds	r3, #2
 800a076:	613b      	str	r3, [r7, #16]
    if (len >= AT_OK_STRING_LEN)
 800a078:	697b      	ldr	r3, [r7, #20]
 800a07a:	2b07      	cmp	r3, #7
 800a07c:	d94a      	bls.n	800a114 <AT_RequestReceiveData+0x10c>
    {
     while(len && (p[len-1]==0x15)) len--;
 800a07e:	e002      	b.n	800a086 <AT_RequestReceiveData+0x7e>
 800a080:	697b      	ldr	r3, [r7, #20]
 800a082:	3b01      	subs	r3, #1
 800a084:	617b      	str	r3, [r7, #20]
 800a086:	697b      	ldr	r3, [r7, #20]
 800a088:	2b00      	cmp	r3, #0
 800a08a:	d006      	beq.n	800a09a <AT_RequestReceiveData+0x92>
 800a08c:	697b      	ldr	r3, [r7, #20]
 800a08e:	3b01      	subs	r3, #1
 800a090:	693a      	ldr	r2, [r7, #16]
 800a092:	4413      	add	r3, r2
 800a094:	781b      	ldrb	r3, [r3, #0]
 800a096:	2b15      	cmp	r3, #21
 800a098:	d0f2      	beq.n	800a080 <AT_RequestReceiveData+0x78>
     p[len] = '\0';
 800a09a:	697b      	ldr	r3, [r7, #20]
 800a09c:	693a      	ldr	r2, [r7, #16]
 800a09e:	4413      	add	r3, r2
 800a0a0:	2200      	movs	r2, #0
 800a0a2:	701a      	strb	r2, [r3, #0]
     if(strstr( (char*) p + len - AT_OK_STRING_LEN, AT_OK_STRING))
 800a0a4:	697b      	ldr	r3, [r7, #20]
 800a0a6:	3b08      	subs	r3, #8
 800a0a8:	693a      	ldr	r2, [r7, #16]
 800a0aa:	4413      	add	r3, r2
 800a0ac:	491f      	ldr	r1, [pc, #124]	; (800a12c <AT_RequestReceiveData+0x124>)
 800a0ae:	4618      	mov	r0, r3
 800a0b0:	f009 f914 	bl	80132dc <strstr>
 800a0b4:	4603      	mov	r3, r0
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d016      	beq.n	800a0e8 <AT_RequestReceiveData+0xe0>
     {
       *ReadData = len - AT_OK_STRING_LEN;
 800a0ba:	697b      	ldr	r3, [r7, #20]
 800a0bc:	b29b      	uxth	r3, r3
 800a0be:	3b08      	subs	r3, #8
 800a0c0:	b29a      	uxth	r2, r3
 800a0c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0c4:	801a      	strh	r2, [r3, #0]
	   if (*ReadData > Reqlen)
 800a0c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0c8:	881b      	ldrh	r3, [r3, #0]
 800a0ca:	887a      	ldrh	r2, [r7, #2]
 800a0cc:	429a      	cmp	r2, r3
 800a0ce:	d202      	bcs.n	800a0d6 <AT_RequestReceiveData+0xce>
       {
         *ReadData = Reqlen;
 800a0d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0d2:	887a      	ldrh	r2, [r7, #2]
 800a0d4:	801a      	strh	r2, [r3, #0]
       }
       memcpy(pdata, p, *ReadData);
 800a0d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0d8:	881b      	ldrh	r3, [r3, #0]
 800a0da:	461a      	mov	r2, r3
 800a0dc:	6939      	ldr	r1, [r7, #16]
 800a0de:	6878      	ldr	r0, [r7, #4]
 800a0e0:	f008 fb97 	bl	8012812 <memcpy>
       UNLOCK_WIFI();
       return ES_WIFI_STATUS_OK;
 800a0e4:	2300      	movs	r3, #0
 800a0e6:	e01c      	b.n	800a122 <AT_RequestReceiveData+0x11a>
     }
     else if(memcmp((char *)p + len - AT_DELIMETER_LEN , AT_DELIMETER_STRING, AT_DELIMETER_LEN) == 0)
 800a0e8:	697b      	ldr	r3, [r7, #20]
 800a0ea:	3b04      	subs	r3, #4
 800a0ec:	693a      	ldr	r2, [r7, #16]
 800a0ee:	4413      	add	r3, r2
 800a0f0:	2204      	movs	r2, #4
 800a0f2:	490f      	ldr	r1, [pc, #60]	; (800a130 <AT_RequestReceiveData+0x128>)
 800a0f4:	4618      	mov	r0, r3
 800a0f6:	f008 fb7c 	bl	80127f2 <memcmp>
 800a0fa:	4603      	mov	r3, r0
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d104      	bne.n	800a10a <AT_RequestReceiveData+0x102>
     {
       *ReadData = 0;
 800a100:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a102:	2200      	movs	r2, #0
 800a104:	801a      	strh	r2, [r3, #0]
       UNLOCK_WIFI();
       return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 800a106:	2305      	movs	r3, #5
 800a108:	e00b      	b.n	800a122 <AT_RequestReceiveData+0x11a>
     }

     UNLOCK_WIFI();
     *ReadData = 0;
 800a10a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a10c:	2200      	movs	r2, #0
 800a10e:	801a      	strh	r2, [r3, #0]
     return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 800a110:	2305      	movs	r3, #5
 800a112:	e006      	b.n	800a122 <AT_RequestReceiveData+0x11a>
   }
   if (len == ES_WIFI_ERROR_STUFFING_FOREVER )
 800a114:	697b      	ldr	r3, [r7, #20]
 800a116:	f113 0f04 	cmn.w	r3, #4
 800a11a:	d101      	bne.n	800a120 <AT_RequestReceiveData+0x118>
   {
     UNLOCK_WIFI();
     return ES_WIFI_STATUS_MODULE_CRASH;
 800a11c:	2306      	movs	r3, #6
 800a11e:	e000      	b.n	800a122 <AT_RequestReceiveData+0x11a>
   }
  }
  UNLOCK_WIFI();
  return ES_WIFI_STATUS_IO_ERROR;
 800a120:	2304      	movs	r3, #4
}
 800a122:	4618      	mov	r0, r3
 800a124:	371c      	adds	r7, #28
 800a126:	46bd      	mov	sp, r7
 800a128:	bd90      	pop	{r4, r7, pc}
 800a12a:	bf00      	nop
 800a12c:	080145d8 	.word	0x080145d8
 800a130:	080145ec 	.word	0x080145ec

0800a134 <ES_WIFI_Init>:
  * @brief  Initialize WIFI module.
  * @param  Obj: pointer to module handle
  * @retval Operation Status.
  */
ES_WIFI_Status_t  ES_WIFI_Init(ES_WIFIObject_t *Obj)
{
 800a134:	b580      	push	{r7, lr}
 800a136:	b084      	sub	sp, #16
 800a138:	af00      	add	r7, sp, #0
 800a13a:	6078      	str	r0, [r7, #4]
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
 800a13c:	2302      	movs	r3, #2
 800a13e:	73fb      	strb	r3, [r7, #15]

  LOCK_WIFI();

  Obj->Timeout = ES_WIFI_TIMEOUT;
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	f247 5230 	movw	r2, #30000	; 0x7530
 800a146:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8

  if (Obj->fops.IO_Init(ES_WIFI_INIT) == 0)
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800a150:	2000      	movs	r0, #0
 800a152:	4798      	blx	r3
 800a154:	4603      	mov	r3, r0
 800a156:	2b00      	cmp	r3, #0
 800a158:	d113      	bne.n	800a182 <ES_WIFI_Init+0x4e>
  {
    ret = AT_ExecuteCommand(Obj,(uint8_t*)"I?\r\n", Obj->CmdData);
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a160:	461a      	mov	r2, r3
 800a162:	490a      	ldr	r1, [pc, #40]	; (800a18c <ES_WIFI_Init+0x58>)
 800a164:	6878      	ldr	r0, [r7, #4]
 800a166:	f7ff fe73 	bl	8009e50 <AT_ExecuteCommand>
 800a16a:	4603      	mov	r3, r0
 800a16c:	73fb      	strb	r3, [r7, #15]

    if(ret == ES_WIFI_STATUS_OK)
 800a16e:	7bfb      	ldrb	r3, [r7, #15]
 800a170:	2b00      	cmp	r3, #0
 800a172:	d106      	bne.n	800a182 <ES_WIFI_Init+0x4e>
    {
      AT_ParseInfo (Obj, Obj->CmdData);
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a17a:	4619      	mov	r1, r3
 800a17c:	6878      	ldr	r0, [r7, #4]
 800a17e:	f7ff fd2b 	bl	8009bd8 <AT_ParseInfo>
    }
  }
  UNLOCK_WIFI();
  return ret;
 800a182:	7bfb      	ldrb	r3, [r7, #15]
}
 800a184:	4618      	mov	r0, r3
 800a186:	3710      	adds	r7, #16
 800a188:	46bd      	mov	sp, r7
 800a18a:	bd80      	pop	{r7, pc}
 800a18c:	080145f4 	.word	0x080145f4

0800a190 <ES_WIFI_RegisterBusIO>:
ES_WIFI_Status_t  ES_WIFI_RegisterBusIO(ES_WIFIObject_t *Obj, IO_Init_Func IO_Init,
                                                              IO_DeInit_Func  IO_DeInit,
                                                              IO_Delay_Func   IO_Delay,
                                                              IO_Send_Func    IO_Send,
                                                              IO_Receive_Func  IO_Receive)
{
 800a190:	b480      	push	{r7}
 800a192:	b085      	sub	sp, #20
 800a194:	af00      	add	r7, sp, #0
 800a196:	60f8      	str	r0, [r7, #12]
 800a198:	60b9      	str	r1, [r7, #8]
 800a19a:	607a      	str	r2, [r7, #4]
 800a19c:	603b      	str	r3, [r7, #0]
  if(!Obj || !IO_Init || !IO_DeInit || !IO_Send || !IO_Receive)
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d00b      	beq.n	800a1bc <ES_WIFI_RegisterBusIO+0x2c>
 800a1a4:	68bb      	ldr	r3, [r7, #8]
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d008      	beq.n	800a1bc <ES_WIFI_RegisterBusIO+0x2c>
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	d005      	beq.n	800a1bc <ES_WIFI_RegisterBusIO+0x2c>
 800a1b0:	69bb      	ldr	r3, [r7, #24]
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d002      	beq.n	800a1bc <ES_WIFI_RegisterBusIO+0x2c>
 800a1b6:	69fb      	ldr	r3, [r7, #28]
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d101      	bne.n	800a1c0 <ES_WIFI_RegisterBusIO+0x30>
  {
    return ES_WIFI_STATUS_ERROR;
 800a1bc:	2302      	movs	r3, #2
 800a1be:	e014      	b.n	800a1ea <ES_WIFI_RegisterBusIO+0x5a>
  }

  Obj->fops.IO_Init = IO_Init;
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	68ba      	ldr	r2, [r7, #8]
 800a1c4:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
  Obj->fops.IO_DeInit = IO_DeInit;
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	687a      	ldr	r2, [r7, #4]
 800a1cc:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
  Obj->fops.IO_Send = IO_Send;
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	69ba      	ldr	r2, [r7, #24]
 800a1d4:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
  Obj->fops.IO_Receive = IO_Receive;
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	69fa      	ldr	r2, [r7, #28]
 800a1dc:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
  Obj->fops.IO_Delay = IO_Delay;
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	683a      	ldr	r2, [r7, #0]
 800a1e4:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  return ES_WIFI_STATUS_OK;
 800a1e8:	2300      	movs	r3, #0
}
 800a1ea:	4618      	mov	r0, r3
 800a1ec:	3714      	adds	r7, #20
 800a1ee:	46bd      	mov	sp, r7
 800a1f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1f4:	4770      	bx	lr
	...

0800a1f8 <ES_WIFI_Connect>:
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_Connect(ES_WIFIObject_t *Obj, const char* SSID,
                                         const char* Password,
                                         ES_WIFI_SecurityType_t SecType)
{
 800a1f8:	b580      	push	{r7, lr}
 800a1fa:	b086      	sub	sp, #24
 800a1fc:	af00      	add	r7, sp, #0
 800a1fe:	60f8      	str	r0, [r7, #12]
 800a200:	60b9      	str	r1, [r7, #8]
 800a202:	607a      	str	r2, [r7, #4]
 800a204:	70fb      	strb	r3, [r7, #3]
  ES_WIFI_Status_t ret;
  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"C1=%s\r", SSID);
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a20c:	68ba      	ldr	r2, [r7, #8]
 800a20e:	4932      	ldr	r1, [pc, #200]	; (800a2d8 <ES_WIFI_Connect+0xe0>)
 800a210:	4618      	mov	r0, r3
 800a212:	f008 ffed 	bl	80131f0 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a222:	461a      	mov	r2, r3
 800a224:	68f8      	ldr	r0, [r7, #12]
 800a226:	f7ff fe13 	bl	8009e50 <AT_ExecuteCommand>
 800a22a:	4603      	mov	r3, r0
 800a22c:	75fb      	strb	r3, [r7, #23]
  if(ret == ES_WIFI_STATUS_OK)
 800a22e:	7dfb      	ldrb	r3, [r7, #23]
 800a230:	2b00      	cmp	r3, #0
 800a232:	d14b      	bne.n	800a2cc <ES_WIFI_Connect+0xd4>
  {
    sprintf((char*)Obj->CmdData,"C2=%s\r", Password);
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a23a:	687a      	ldr	r2, [r7, #4]
 800a23c:	4927      	ldr	r1, [pc, #156]	; (800a2dc <ES_WIFI_Connect+0xe4>)
 800a23e:	4618      	mov	r0, r3
 800a240:	f008 ffd6 	bl	80131f0 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a250:	461a      	mov	r2, r3
 800a252:	68f8      	ldr	r0, [r7, #12]
 800a254:	f7ff fdfc 	bl	8009e50 <AT_ExecuteCommand>
 800a258:	4603      	mov	r3, r0
 800a25a:	75fb      	strb	r3, [r7, #23]

    if(ret == ES_WIFI_STATUS_OK)
 800a25c:	7dfb      	ldrb	r3, [r7, #23]
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d134      	bne.n	800a2cc <ES_WIFI_Connect+0xd4>
    {
      Obj->Security = SecType;
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	78fa      	ldrb	r2, [r7, #3]
 800a266:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
      sprintf((char*)Obj->CmdData,"C3=%d\r", (uint8_t)SecType);
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a270:	78fa      	ldrb	r2, [r7, #3]
 800a272:	491b      	ldr	r1, [pc, #108]	; (800a2e0 <ES_WIFI_Connect+0xe8>)
 800a274:	4618      	mov	r0, r3
 800a276:	f008 ffbb 	bl	80131f0 <siprintf>
      ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a286:	461a      	mov	r2, r3
 800a288:	68f8      	ldr	r0, [r7, #12]
 800a28a:	f7ff fde1 	bl	8009e50 <AT_ExecuteCommand>
 800a28e:	4603      	mov	r3, r0
 800a290:	75fb      	strb	r3, [r7, #23]

      if(ret == ES_WIFI_STATUS_OK)
 800a292:	7dfb      	ldrb	r3, [r7, #23]
 800a294:	2b00      	cmp	r3, #0
 800a296:	d119      	bne.n	800a2cc <ES_WIFI_Connect+0xd4>
      {
        sprintf((char*)Obj->CmdData,"C0\r");
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a29e:	4911      	ldr	r1, [pc, #68]	; (800a2e4 <ES_WIFI_Connect+0xec>)
 800a2a0:	4618      	mov	r0, r3
 800a2a2:	f008 ffa5 	bl	80131f0 <siprintf>
        ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800a2a6:	68fb      	ldr	r3, [r7, #12]
 800a2a8:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a2b2:	461a      	mov	r2, r3
 800a2b4:	68f8      	ldr	r0, [r7, #12]
 800a2b6:	f7ff fdcb 	bl	8009e50 <AT_ExecuteCommand>
 800a2ba:	4603      	mov	r3, r0
 800a2bc:	75fb      	strb	r3, [r7, #23]
        if(ret == ES_WIFI_STATUS_OK)
 800a2be:	7dfb      	ldrb	r3, [r7, #23]
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d103      	bne.n	800a2cc <ES_WIFI_Connect+0xd4>
        {
           Obj->NetSettings.IsConnected = 1;
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	2201      	movs	r2, #1
 800a2c8:	f883 20d2 	strb.w	r2, [r3, #210]	; 0xd2
        }
      }
    }
  }
  UNLOCK_WIFI();
  return ret;
 800a2cc:	7dfb      	ldrb	r3, [r7, #23]
}
 800a2ce:	4618      	mov	r0, r3
 800a2d0:	3718      	adds	r7, #24
 800a2d2:	46bd      	mov	sp, r7
 800a2d4:	bd80      	pop	{r7, pc}
 800a2d6:	bf00      	nop
 800a2d8:	0801460c 	.word	0x0801460c
 800a2dc:	08014614 	.word	0x08014614
 800a2e0:	0801461c 	.word	0x0801461c
 800a2e4:	08014624 	.word	0x08014624

0800a2e8 <ES_WIFI_IsConnected>:
/**
  * @brief  Check whether the module is connected to an access point.
  * @retval Operation Status.
  */
uint8_t ES_WIFI_IsConnected(ES_WIFIObject_t *Obj)
{
 800a2e8:	b580      	push	{r7, lr}
 800a2ea:	b084      	sub	sp, #16
 800a2ec:	af00      	add	r7, sp, #0
 800a2ee:	6078      	str	r0, [r7, #4]
  ES_WIFI_Status_t ret ;
  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"CS\r");
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a2f6:	4911      	ldr	r1, [pc, #68]	; (800a33c <ES_WIFI_IsConnected+0x54>)
 800a2f8:	4618      	mov	r0, r3
 800a2fa:	f008 ff79 	bl	80131f0 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a30a:	461a      	mov	r2, r3
 800a30c:	6878      	ldr	r0, [r7, #4]
 800a30e:	f7ff fd9f 	bl	8009e50 <AT_ExecuteCommand>
 800a312:	4603      	mov	r3, r0
 800a314:	73fb      	strb	r3, [r7, #15]
  if(ret == ES_WIFI_STATUS_OK)
 800a316:	7bfb      	ldrb	r3, [r7, #15]
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d108      	bne.n	800a32e <ES_WIFI_IsConnected+0x46>
  {
    AT_ParseIsConnected((char *)Obj->CmdData, &(Obj->NetSettings.IsConnected));
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	f503 7294 	add.w	r2, r3, #296	; 0x128
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	33d2      	adds	r3, #210	; 0xd2
 800a326:	4619      	mov	r1, r3
 800a328:	4610      	mov	r0, r2
 800a32a:	f7ff fd7b 	bl	8009e24 <AT_ParseIsConnected>
  }
  UNLOCK_WIFI();
  return Obj->NetSettings.IsConnected;
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	f893 30d2 	ldrb.w	r3, [r3, #210]	; 0xd2
}
 800a334:	4618      	mov	r0, r3
 800a336:	3710      	adds	r7, #16
 800a338:	46bd      	mov	sp, r7
 800a33a:	bd80      	pop	{r7, pc}
 800a33c:	08014628 	.word	0x08014628

0800a340 <ES_WIFI_GetNetworkSettings>:
  * @param  Obj: pointer to module handle
  * @param  Pointer to network setting structure.
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_GetNetworkSettings(ES_WIFIObject_t *Obj)
{
 800a340:	b580      	push	{r7, lr}
 800a342:	b084      	sub	sp, #16
 800a344:	af00      	add	r7, sp, #0
 800a346:	6078      	str	r0, [r7, #4]
  ES_WIFI_Status_t ret;
  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"C?\r");
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a34e:	4910      	ldr	r1, [pc, #64]	; (800a390 <ES_WIFI_GetNetworkSettings+0x50>)
 800a350:	4618      	mov	r0, r3
 800a352:	f008 ff4d 	bl	80131f0 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a362:	461a      	mov	r2, r3
 800a364:	6878      	ldr	r0, [r7, #4]
 800a366:	f7ff fd73 	bl	8009e50 <AT_ExecuteCommand>
 800a36a:	4603      	mov	r3, r0
 800a36c:	73fb      	strb	r3, [r7, #15]

  if(ret == ES_WIFI_STATUS_OK)
 800a36e:	7bfb      	ldrb	r3, [r7, #15]
 800a370:	2b00      	cmp	r3, #0
 800a372:	d108      	bne.n	800a386 <ES_WIFI_GetNetworkSettings+0x46>
  {
     AT_ParseConnSettings((char *)Obj->CmdData, &Obj->NetSettings);
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	f503 7294 	add.w	r2, r3, #296	; 0x128
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	338d      	adds	r3, #141	; 0x8d
 800a37e:	4619      	mov	r1, r3
 800a380:	4610      	mov	r0, r2
 800a382:	f7ff fc9f 	bl	8009cc4 <AT_ParseConnSettings>
  }

  UNLOCK_WIFI();
  return ret;
 800a386:	7bfb      	ldrb	r3, [r7, #15]
}
 800a388:	4618      	mov	r0, r3
 800a38a:	3710      	adds	r7, #16
 800a38c:	46bd      	mov	sp, r7
 800a38e:	bd80      	pop	{r7, pc}
 800a390:	08014630 	.word	0x08014630

0800a394 <ES_WIFI_GetMACAddress>:
  * @param  Obj: pointer to module handle
  * @param  mac: pointer to the MAC address array.
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_GetMACAddress(ES_WIFIObject_t *Obj, uint8_t *mac)
{
 800a394:	b580      	push	{r7, lr}
 800a396:	b084      	sub	sp, #16
 800a398:	af00      	add	r7, sp, #0
 800a39a:	6078      	str	r0, [r7, #4]
 800a39c:	6039      	str	r1, [r7, #0]
  ES_WIFI_Status_t ret ;
  char *ptr;
  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"Z5\r");
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a3a4:	4912      	ldr	r1, [pc, #72]	; (800a3f0 <ES_WIFI_GetMACAddress+0x5c>)
 800a3a6:	4618      	mov	r0, r3
 800a3a8:	f008 ff22 	bl	80131f0 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a3b8:	461a      	mov	r2, r3
 800a3ba:	6878      	ldr	r0, [r7, #4]
 800a3bc:	f7ff fd48 	bl	8009e50 <AT_ExecuteCommand>
 800a3c0:	4603      	mov	r3, r0
 800a3c2:	73fb      	strb	r3, [r7, #15]
  if(ret == ES_WIFI_STATUS_OK)
 800a3c4:	7bfb      	ldrb	r3, [r7, #15]
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d10c      	bne.n	800a3e4 <ES_WIFI_GetMACAddress+0x50>
  {
    ptr = strtok((char *)(Obj->CmdData + 2), "\r\n");
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a3d0:	3302      	adds	r3, #2
 800a3d2:	4908      	ldr	r1, [pc, #32]	; (800a3f4 <ES_WIFI_GetMACAddress+0x60>)
 800a3d4:	4618      	mov	r0, r3
 800a3d6:	f008 ff97 	bl	8013308 <strtok>
 800a3da:	60b8      	str	r0, [r7, #8]
    ParseMAC(ptr, mac) ;
 800a3dc:	6839      	ldr	r1, [r7, #0]
 800a3de:	68b8      	ldr	r0, [r7, #8]
 800a3e0:	f7ff fba4 	bl	8009b2c <ParseMAC>
  }
  UNLOCK_WIFI();
  return ret;
 800a3e4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3e6:	4618      	mov	r0, r3
 800a3e8:	3710      	adds	r7, #16
 800a3ea:	46bd      	mov	sp, r7
 800a3ec:	bd80      	pop	{r7, pc}
 800a3ee:	bf00      	nop
 800a3f0:	08014680 	.word	0x08014680
 800a3f4:	08014684 	.word	0x08014684

0800a3f8 <ES_WIFI_StartClientConnection>:
  * @param  Obj: pointer to module handle
  * @param  conn: pointer to the connection structure
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_StartClientConnection(ES_WIFIObject_t *Obj, ES_WIFI_Conn_t *conn)
{
 800a3f8:	b590      	push	{r4, r7, lr}
 800a3fa:	b087      	sub	sp, #28
 800a3fc:	af02      	add	r7, sp, #8
 800a3fe:	6078      	str	r0, [r7, #4]
 800a400:	6039      	str	r1, [r7, #0]
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_OK;
 800a402:	2300      	movs	r3, #0
 800a404:	73fb      	strb	r3, [r7, #15]

  if ( ((conn->Type == ES_WIFI_TCP_CONNECTION) || (conn->Type == ES_WIFI_TCP_SSL_CONNECTION)) && (conn->RemotePort == 0) ) return ES_WIFI_STATUS_ERROR;
 800a406:	683b      	ldr	r3, [r7, #0]
 800a408:	781b      	ldrb	r3, [r3, #0]
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d003      	beq.n	800a416 <ES_WIFI_StartClientConnection+0x1e>
 800a40e:	683b      	ldr	r3, [r7, #0]
 800a410:	781b      	ldrb	r3, [r3, #0]
 800a412:	2b03      	cmp	r3, #3
 800a414:	d105      	bne.n	800a422 <ES_WIFI_StartClientConnection+0x2a>
 800a416:	683b      	ldr	r3, [r7, #0]
 800a418:	885b      	ldrh	r3, [r3, #2]
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	d101      	bne.n	800a422 <ES_WIFI_StartClientConnection+0x2a>
 800a41e:	2302      	movs	r3, #2
 800a420:	e0c1      	b.n	800a5a6 <ES_WIFI_StartClientConnection+0x1ae>

  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"P0=%d\r", conn->Number);
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	f503 7094 	add.w	r0, r3, #296	; 0x128
 800a428:	683b      	ldr	r3, [r7, #0]
 800a42a:	785b      	ldrb	r3, [r3, #1]
 800a42c:	461a      	mov	r2, r3
 800a42e:	4960      	ldr	r1, [pc, #384]	; (800a5b0 <ES_WIFI_StartClientConnection+0x1b8>)
 800a430:	f008 fede 	bl	80131f0 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a440:	461a      	mov	r2, r3
 800a442:	6878      	ldr	r0, [r7, #4]
 800a444:	f7ff fd04 	bl	8009e50 <AT_ExecuteCommand>
 800a448:	4603      	mov	r3, r0
 800a44a:	73fb      	strb	r3, [r7, #15]

  if (ret == ES_WIFI_STATUS_OK)
 800a44c:	7bfb      	ldrb	r3, [r7, #15]
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d114      	bne.n	800a47c <ES_WIFI_StartClientConnection+0x84>
  {
    sprintf((char*)Obj->CmdData,"P1=%d\r", conn->Type);
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	f503 7094 	add.w	r0, r3, #296	; 0x128
 800a458:	683b      	ldr	r3, [r7, #0]
 800a45a:	781b      	ldrb	r3, [r3, #0]
 800a45c:	461a      	mov	r2, r3
 800a45e:	4955      	ldr	r1, [pc, #340]	; (800a5b4 <ES_WIFI_StartClientConnection+0x1bc>)
 800a460:	f008 fec6 	bl	80131f0 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a470:	461a      	mov	r2, r3
 800a472:	6878      	ldr	r0, [r7, #4]
 800a474:	f7ff fcec 	bl	8009e50 <AT_ExecuteCommand>
 800a478:	4603      	mov	r3, r0
 800a47a:	73fb      	strb	r3, [r7, #15]
  }

  if (ret == ES_WIFI_STATUS_OK)
 800a47c:	7bfb      	ldrb	r3, [r7, #15]
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d114      	bne.n	800a4ac <ES_WIFI_StartClientConnection+0xb4>
  {
    sprintf((char*)Obj->CmdData,"P2=%d\r", conn->LocalPort);
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	f503 7094 	add.w	r0, r3, #296	; 0x128
 800a488:	683b      	ldr	r3, [r7, #0]
 800a48a:	889b      	ldrh	r3, [r3, #4]
 800a48c:	461a      	mov	r2, r3
 800a48e:	494a      	ldr	r1, [pc, #296]	; (800a5b8 <ES_WIFI_StartClientConnection+0x1c0>)
 800a490:	f008 feae 	bl	80131f0 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a4a0:	461a      	mov	r2, r3
 800a4a2:	6878      	ldr	r0, [r7, #4]
 800a4a4:	f7ff fcd4 	bl	8009e50 <AT_ExecuteCommand>
 800a4a8:	4603      	mov	r3, r0
 800a4aa:	73fb      	strb	r3, [r7, #15]
  }

  if ((ret == ES_WIFI_STATUS_OK)&& ((conn->Type == ES_WIFI_TCP_CONNECTION) || (conn->Type == ES_WIFI_TCP_SSL_CONNECTION)))
 800a4ac:	7bfb      	ldrb	r3, [r7, #15]
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d11c      	bne.n	800a4ec <ES_WIFI_StartClientConnection+0xf4>
 800a4b2:	683b      	ldr	r3, [r7, #0]
 800a4b4:	781b      	ldrb	r3, [r3, #0]
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	d003      	beq.n	800a4c2 <ES_WIFI_StartClientConnection+0xca>
 800a4ba:	683b      	ldr	r3, [r7, #0]
 800a4bc:	781b      	ldrb	r3, [r3, #0]
 800a4be:	2b03      	cmp	r3, #3
 800a4c0:	d114      	bne.n	800a4ec <ES_WIFI_StartClientConnection+0xf4>
  {
    sprintf((char*)Obj->CmdData,"P4=%d\r", conn->RemotePort);
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	f503 7094 	add.w	r0, r3, #296	; 0x128
 800a4c8:	683b      	ldr	r3, [r7, #0]
 800a4ca:	885b      	ldrh	r3, [r3, #2]
 800a4cc:	461a      	mov	r2, r3
 800a4ce:	493b      	ldr	r1, [pc, #236]	; (800a5bc <ES_WIFI_StartClientConnection+0x1c4>)
 800a4d0:	f008 fe8e 	bl	80131f0 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a4e0:	461a      	mov	r2, r3
 800a4e2:	6878      	ldr	r0, [r7, #4]
 800a4e4:	f7ff fcb4 	bl	8009e50 <AT_ExecuteCommand>
 800a4e8:	4603      	mov	r3, r0
 800a4ea:	73fb      	strb	r3, [r7, #15]
  }

  if ((ret == ES_WIFI_STATUS_OK) && ((conn->Type == ES_WIFI_TCP_CONNECTION) || (conn->Type == ES_WIFI_TCP_SSL_CONNECTION)))
 800a4ec:	7bfb      	ldrb	r3, [r7, #15]
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d128      	bne.n	800a544 <ES_WIFI_StartClientConnection+0x14c>
 800a4f2:	683b      	ldr	r3, [r7, #0]
 800a4f4:	781b      	ldrb	r3, [r3, #0]
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d003      	beq.n	800a502 <ES_WIFI_StartClientConnection+0x10a>
 800a4fa:	683b      	ldr	r3, [r7, #0]
 800a4fc:	781b      	ldrb	r3, [r3, #0]
 800a4fe:	2b03      	cmp	r3, #3
 800a500:	d120      	bne.n	800a544 <ES_WIFI_StartClientConnection+0x14c>
  {
    sprintf((char*)Obj->CmdData,"P3=%d.%d.%d.%d\r", conn->RemoteIP[0],conn->RemoteIP[1],
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	f503 7094 	add.w	r0, r3, #296	; 0x128
 800a508:	683b      	ldr	r3, [r7, #0]
 800a50a:	799b      	ldrb	r3, [r3, #6]
 800a50c:	4619      	mov	r1, r3
 800a50e:	683b      	ldr	r3, [r7, #0]
 800a510:	79db      	ldrb	r3, [r3, #7]
 800a512:	461c      	mov	r4, r3
            conn->RemoteIP[2],conn->RemoteIP[3]);
 800a514:	683b      	ldr	r3, [r7, #0]
 800a516:	7a1b      	ldrb	r3, [r3, #8]
    sprintf((char*)Obj->CmdData,"P3=%d.%d.%d.%d\r", conn->RemoteIP[0],conn->RemoteIP[1],
 800a518:	461a      	mov	r2, r3
            conn->RemoteIP[2],conn->RemoteIP[3]);
 800a51a:	683b      	ldr	r3, [r7, #0]
 800a51c:	7a5b      	ldrb	r3, [r3, #9]
    sprintf((char*)Obj->CmdData,"P3=%d.%d.%d.%d\r", conn->RemoteIP[0],conn->RemoteIP[1],
 800a51e:	9301      	str	r3, [sp, #4]
 800a520:	9200      	str	r2, [sp, #0]
 800a522:	4623      	mov	r3, r4
 800a524:	460a      	mov	r2, r1
 800a526:	4926      	ldr	r1, [pc, #152]	; (800a5c0 <ES_WIFI_StartClientConnection+0x1c8>)
 800a528:	f008 fe62 	bl	80131f0 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a538:	461a      	mov	r2, r3
 800a53a:	6878      	ldr	r0, [r7, #4]
 800a53c:	f7ff fc88 	bl	8009e50 <AT_ExecuteCommand>
 800a540:	4603      	mov	r3, r0
 800a542:	73fb      	strb	r3, [r7, #15]
  }

  if ((ret == ES_WIFI_STATUS_OK) && (conn->Type == ES_WIFI_TCP_SSL_CONNECTION))
 800a544:	7bfb      	ldrb	r3, [r7, #15]
 800a546:	2b00      	cmp	r3, #0
 800a548:	d116      	bne.n	800a578 <ES_WIFI_StartClientConnection+0x180>
 800a54a:	683b      	ldr	r3, [r7, #0]
 800a54c:	781b      	ldrb	r3, [r3, #0]
 800a54e:	2b03      	cmp	r3, #3
 800a550:	d112      	bne.n	800a578 <ES_WIFI_StartClientConnection+0x180>
  {
    sprintf((char*)Obj->CmdData,"P9=2\r");
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a558:	491a      	ldr	r1, [pc, #104]	; (800a5c4 <ES_WIFI_StartClientConnection+0x1cc>)
 800a55a:	4618      	mov	r0, r3
 800a55c:	f008 fe48 	bl	80131f0 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a56c:	461a      	mov	r2, r3
 800a56e:	6878      	ldr	r0, [r7, #4]
 800a570:	f7ff fc6e 	bl	8009e50 <AT_ExecuteCommand>
 800a574:	4603      	mov	r3, r0
 800a576:	73fb      	strb	r3, [r7, #15]
  }

  if (ret == ES_WIFI_STATUS_OK)
 800a578:	7bfb      	ldrb	r3, [r7, #15]
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d112      	bne.n	800a5a4 <ES_WIFI_StartClientConnection+0x1ac>
  {
    sprintf((char*)Obj->CmdData,"P6=1\r");
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a584:	4910      	ldr	r1, [pc, #64]	; (800a5c8 <ES_WIFI_StartClientConnection+0x1d0>)
 800a586:	4618      	mov	r0, r3
 800a588:	f008 fe32 	bl	80131f0 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a598:	461a      	mov	r2, r3
 800a59a:	6878      	ldr	r0, [r7, #4]
 800a59c:	f7ff fc58 	bl	8009e50 <AT_ExecuteCommand>
 800a5a0:	4603      	mov	r3, r0
 800a5a2:	73fb      	strb	r3, [r7, #15]
  }

  UNLOCK_WIFI();
  return ret;
 800a5a4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5a6:	4618      	mov	r0, r3
 800a5a8:	3714      	adds	r7, #20
 800a5aa:	46bd      	mov	sp, r7
 800a5ac:	bd90      	pop	{r4, r7, pc}
 800a5ae:	bf00      	nop
 800a5b0:	080146e8 	.word	0x080146e8
 800a5b4:	080146f0 	.word	0x080146f0
 800a5b8:	080146f8 	.word	0x080146f8
 800a5bc:	08014700 	.word	0x08014700
 800a5c0:	08014708 	.word	0x08014708
 800a5c4:	08014718 	.word	0x08014718
 800a5c8:	08014720 	.word	0x08014720

0800a5cc <ES_WIFI_SendData>:
  * @param  pdata: pointer to data
  * @param  len : length of the data to be sent
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_SendData(ES_WIFIObject_t *Obj, uint8_t Socket, uint8_t *pdata, uint16_t Reqlen , uint16_t *SentLen , uint32_t Timeout)
{
 800a5cc:	b580      	push	{r7, lr}
 800a5ce:	b088      	sub	sp, #32
 800a5d0:	af02      	add	r7, sp, #8
 800a5d2:	60f8      	str	r0, [r7, #12]
 800a5d4:	607a      	str	r2, [r7, #4]
 800a5d6:	461a      	mov	r2, r3
 800a5d8:	460b      	mov	r3, r1
 800a5da:	72fb      	strb	r3, [r7, #11]
 800a5dc:	4613      	mov	r3, r2
 800a5de:	813b      	strh	r3, [r7, #8]
  uint32_t wkgTimeOut;

  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
 800a5e0:	2302      	movs	r3, #2
 800a5e2:	74fb      	strb	r3, [r7, #19]

  if (Timeout == 0)
 800a5e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d102      	bne.n	800a5f0 <ES_WIFI_SendData+0x24>
  {
    wkgTimeOut = NET_DEFAULT_NOBLOCKING_WRITE_TIMEOUT;
 800a5ea:	2301      	movs	r3, #1
 800a5ec:	617b      	str	r3, [r7, #20]
 800a5ee:	e001      	b.n	800a5f4 <ES_WIFI_SendData+0x28>
  }
  else
  {
    wkgTimeOut = Timeout;
 800a5f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5f2:	617b      	str	r3, [r7, #20]
  }

  LOCK_WIFI();
  if(Reqlen >= ES_WIFI_PAYLOAD_SIZE ) Reqlen= ES_WIFI_PAYLOAD_SIZE;
 800a5f4:	893b      	ldrh	r3, [r7, #8]
 800a5f6:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 800a5fa:	d302      	bcc.n	800a602 <ES_WIFI_SendData+0x36>
 800a5fc:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 800a600:	813b      	strh	r3, [r7, #8]

  *SentLen = Reqlen;
 800a602:	6a3b      	ldr	r3, [r7, #32]
 800a604:	893a      	ldrh	r2, [r7, #8]
 800a606:	801a      	strh	r2, [r3, #0]
  sprintf((char*)Obj->CmdData,"P0=%d\r", Socket);
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a60e:	7afa      	ldrb	r2, [r7, #11]
 800a610:	4942      	ldr	r1, [pc, #264]	; (800a71c <ES_WIFI_SendData+0x150>)
 800a612:	4618      	mov	r0, r3
 800a614:	f008 fdec 	bl	80131f0 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a624:	461a      	mov	r2, r3
 800a626:	68f8      	ldr	r0, [r7, #12]
 800a628:	f7ff fc12 	bl	8009e50 <AT_ExecuteCommand>
 800a62c:	4603      	mov	r3, r0
 800a62e:	74fb      	strb	r3, [r7, #19]
  if(ret == ES_WIFI_STATUS_OK)
 800a630:	7cfb      	ldrb	r3, [r7, #19]
 800a632:	2b00      	cmp	r3, #0
 800a634:	d15e      	bne.n	800a6f4 <ES_WIFI_SendData+0x128>
  {
    sprintf((char*)Obj->CmdData,"S2=%lu\r",wkgTimeOut);
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a63c:	697a      	ldr	r2, [r7, #20]
 800a63e:	4938      	ldr	r1, [pc, #224]	; (800a720 <ES_WIFI_SendData+0x154>)
 800a640:	4618      	mov	r0, r3
 800a642:	f008 fdd5 	bl	80131f0 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800a646:	68fb      	ldr	r3, [r7, #12]
 800a648:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a652:	461a      	mov	r2, r3
 800a654:	68f8      	ldr	r0, [r7, #12]
 800a656:	f7ff fbfb 	bl	8009e50 <AT_ExecuteCommand>
 800a65a:	4603      	mov	r3, r0
 800a65c:	74fb      	strb	r3, [r7, #19]

    if(ret == ES_WIFI_STATUS_OK)
 800a65e:	7cfb      	ldrb	r3, [r7, #19]
 800a660:	2b00      	cmp	r3, #0
 800a662:	d13d      	bne.n	800a6e0 <ES_WIFI_SendData+0x114>
    {
      sprintf((char *)Obj->CmdData,"S3=%04d\r",Reqlen);
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a66a:	893a      	ldrh	r2, [r7, #8]
 800a66c:	492d      	ldr	r1, [pc, #180]	; (800a724 <ES_WIFI_SendData+0x158>)
 800a66e:	4618      	mov	r0, r3
 800a670:	f008 fdbe 	bl	80131f0 <siprintf>
      ret = AT_RequestSendData(Obj, Obj->CmdData, pdata, Reqlen, Obj->CmdData);
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a680:	893a      	ldrh	r2, [r7, #8]
 800a682:	9300      	str	r3, [sp, #0]
 800a684:	4613      	mov	r3, r2
 800a686:	687a      	ldr	r2, [r7, #4]
 800a688:	68f8      	ldr	r0, [r7, #12]
 800a68a:	f7ff fc47 	bl	8009f1c <AT_RequestSendData>
 800a68e:	4603      	mov	r3, r0
 800a690:	74fb      	strb	r3, [r7, #19]

      if(ret == ES_WIFI_STATUS_OK)
 800a692:	7cfb      	ldrb	r3, [r7, #19]
 800a694:	2b00      	cmp	r3, #0
 800a696:	d119      	bne.n	800a6cc <ES_WIFI_SendData+0x100>
      {
        if(strstr((char *)Obj->CmdData,"-1\r\n"))
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a69e:	4922      	ldr	r1, [pc, #136]	; (800a728 <ES_WIFI_SendData+0x15c>)
 800a6a0:	4618      	mov	r0, r3
 800a6a2:	f008 fe1b 	bl	80132dc <strstr>
 800a6a6:	4603      	mov	r3, r0
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	d02c      	beq.n	800a706 <ES_WIFI_SendData+0x13a>
        {
          DEBUG("Send Data detect error %s\n", (char *)Obj->CmdData);
 800a6ac:	f640 0267 	movw	r2, #2151	; 0x867
 800a6b0:	491e      	ldr	r1, [pc, #120]	; (800a72c <ES_WIFI_SendData+0x160>)
 800a6b2:	481f      	ldr	r0, [pc, #124]	; (800a730 <ES_WIFI_SendData+0x164>)
 800a6b4:	f008 fc60 	bl	8012f78 <iprintf>
 800a6b8:	68fb      	ldr	r3, [r7, #12]
 800a6ba:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a6be:	4619      	mov	r1, r3
 800a6c0:	481c      	ldr	r0, [pc, #112]	; (800a734 <ES_WIFI_SendData+0x168>)
 800a6c2:	f008 fc59 	bl	8012f78 <iprintf>
          ret = ES_WIFI_STATUS_ERROR;
 800a6c6:	2302      	movs	r3, #2
 800a6c8:	74fb      	strb	r3, [r7, #19]
 800a6ca:	e01c      	b.n	800a706 <ES_WIFI_SendData+0x13a>
        }
      }
      else
      {
        DEBUG("Send Data command failed\n");
 800a6cc:	f640 026d 	movw	r2, #2157	; 0x86d
 800a6d0:	4916      	ldr	r1, [pc, #88]	; (800a72c <ES_WIFI_SendData+0x160>)
 800a6d2:	4817      	ldr	r0, [pc, #92]	; (800a730 <ES_WIFI_SendData+0x164>)
 800a6d4:	f008 fc50 	bl	8012f78 <iprintf>
 800a6d8:	4817      	ldr	r0, [pc, #92]	; (800a738 <ES_WIFI_SendData+0x16c>)
 800a6da:	f008 fcd3 	bl	8013084 <puts>
 800a6de:	e012      	b.n	800a706 <ES_WIFI_SendData+0x13a>
      }
    }
    else
    {
      DEBUG("S2 command failed\n");
 800a6e0:	f640 0272 	movw	r2, #2162	; 0x872
 800a6e4:	4911      	ldr	r1, [pc, #68]	; (800a72c <ES_WIFI_SendData+0x160>)
 800a6e6:	4812      	ldr	r0, [pc, #72]	; (800a730 <ES_WIFI_SendData+0x164>)
 800a6e8:	f008 fc46 	bl	8012f78 <iprintf>
 800a6ec:	4813      	ldr	r0, [pc, #76]	; (800a73c <ES_WIFI_SendData+0x170>)
 800a6ee:	f008 fcc9 	bl	8013084 <puts>
 800a6f2:	e008      	b.n	800a706 <ES_WIFI_SendData+0x13a>
    }
  }
  else
  {
   DEBUG("P0 command failed\n");
 800a6f4:	f640 0277 	movw	r2, #2167	; 0x877
 800a6f8:	490c      	ldr	r1, [pc, #48]	; (800a72c <ES_WIFI_SendData+0x160>)
 800a6fa:	480d      	ldr	r0, [pc, #52]	; (800a730 <ES_WIFI_SendData+0x164>)
 800a6fc:	f008 fc3c 	bl	8012f78 <iprintf>
 800a700:	480f      	ldr	r0, [pc, #60]	; (800a740 <ES_WIFI_SendData+0x174>)
 800a702:	f008 fcbf 	bl	8013084 <puts>
  }

  if (ret == ES_WIFI_STATUS_ERROR)
 800a706:	7cfb      	ldrb	r3, [r7, #19]
 800a708:	2b02      	cmp	r3, #2
 800a70a:	d102      	bne.n	800a712 <ES_WIFI_SendData+0x146>
  {
    *SentLen = 0;
 800a70c:	6a3b      	ldr	r3, [r7, #32]
 800a70e:	2200      	movs	r2, #0
 800a710:	801a      	strh	r2, [r3, #0]
  }
  UNLOCK_WIFI();
  return ret;
 800a712:	7cfb      	ldrb	r3, [r7, #19]
}
 800a714:	4618      	mov	r0, r3
 800a716:	3718      	adds	r7, #24
 800a718:	46bd      	mov	sp, r7
 800a71a:	bd80      	pop	{r7, pc}
 800a71c:	080146e8 	.word	0x080146e8
 800a720:	080148ac 	.word	0x080148ac
 800a724:	080148b4 	.word	0x080148b4
 800a728:	080148c0 	.word	0x080148c0
 800a72c:	08014778 	.word	0x08014778
 800a730:	080147a0 	.word	0x080147a0
 800a734:	080148c8 	.word	0x080148c8
 800a738:	080148e4 	.word	0x080148e4
 800a73c:	08014900 	.word	0x08014900
 800a740:	08014914 	.word	0x08014914

0800a744 <ES_WIFI_ReceiveData>:
  * @param  pdata: pointer to data
  * @param  len : pointer to the length of the data to be received
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_ReceiveData(ES_WIFIObject_t *Obj, uint8_t Socket, uint8_t *pdata, uint16_t Reqlen, uint16_t *Receivedlen, uint32_t Timeout)
{
 800a744:	b580      	push	{r7, lr}
 800a746:	b088      	sub	sp, #32
 800a748:	af02      	add	r7, sp, #8
 800a74a:	60f8      	str	r0, [r7, #12]
 800a74c:	607a      	str	r2, [r7, #4]
 800a74e:	461a      	mov	r2, r3
 800a750:	460b      	mov	r3, r1
 800a752:	72fb      	strb	r3, [r7, #11]
 800a754:	4613      	mov	r3, r2
 800a756:	813b      	strh	r3, [r7, #8]
  uint32_t wkgTimeOut;

  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
 800a758:	2302      	movs	r3, #2
 800a75a:	74fb      	strb	r3, [r7, #19]

  if (Timeout == 0)
 800a75c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d102      	bne.n	800a768 <ES_WIFI_ReceiveData+0x24>
  {
    wkgTimeOut = NET_DEFAULT_NOBLOCKING_READ_TIMEOUT;
 800a762:	2301      	movs	r3, #1
 800a764:	617b      	str	r3, [r7, #20]
 800a766:	e001      	b.n	800a76c <ES_WIFI_ReceiveData+0x28>
  }
  else
  {
    wkgTimeOut = Timeout;
 800a768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a76a:	617b      	str	r3, [r7, #20]
  }

  LOCK_WIFI();

  if(Reqlen <= ES_WIFI_PAYLOAD_SIZE )
 800a76c:	893b      	ldrh	r3, [r7, #8]
 800a76e:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 800a772:	f200 808b 	bhi.w	800a88c <ES_WIFI_ReceiveData+0x148>
  {
    sprintf((char*)Obj->CmdData,"P0=%d\r", Socket);
 800a776:	68fb      	ldr	r3, [r7, #12]
 800a778:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a77c:	7afa      	ldrb	r2, [r7, #11]
 800a77e:	4946      	ldr	r1, [pc, #280]	; (800a898 <ES_WIFI_ReceiveData+0x154>)
 800a780:	4618      	mov	r0, r3
 800a782:	f008 fd35 	bl	80131f0 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a792:	461a      	mov	r2, r3
 800a794:	68f8      	ldr	r0, [r7, #12]
 800a796:	f7ff fb5b 	bl	8009e50 <AT_ExecuteCommand>
 800a79a:	4603      	mov	r3, r0
 800a79c:	74fb      	strb	r3, [r7, #19]

    if(ret == ES_WIFI_STATUS_OK)
 800a79e:	7cfb      	ldrb	r3, [r7, #19]
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	d165      	bne.n	800a870 <ES_WIFI_ReceiveData+0x12c>
    {
      sprintf((char*)Obj->CmdData,"R1=%d\r", Reqlen);
 800a7a4:	68fb      	ldr	r3, [r7, #12]
 800a7a6:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a7aa:	893a      	ldrh	r2, [r7, #8]
 800a7ac:	493b      	ldr	r1, [pc, #236]	; (800a89c <ES_WIFI_ReceiveData+0x158>)
 800a7ae:	4618      	mov	r0, r3
 800a7b0:	f008 fd1e 	bl	80131f0 <siprintf>
      ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800a7b4:	68fb      	ldr	r3, [r7, #12]
 800a7b6:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800a7ba:	68fb      	ldr	r3, [r7, #12]
 800a7bc:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a7c0:	461a      	mov	r2, r3
 800a7c2:	68f8      	ldr	r0, [r7, #12]
 800a7c4:	f7ff fb44 	bl	8009e50 <AT_ExecuteCommand>
 800a7c8:	4603      	mov	r3, r0
 800a7ca:	74fb      	strb	r3, [r7, #19]
      if(ret == ES_WIFI_STATUS_OK)
 800a7cc:	7cfb      	ldrb	r3, [r7, #19]
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d141      	bne.n	800a856 <ES_WIFI_ReceiveData+0x112>
      {
        sprintf((char*)Obj->CmdData,"R2=%lu\r", wkgTimeOut);
 800a7d2:	68fb      	ldr	r3, [r7, #12]
 800a7d4:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a7d8:	697a      	ldr	r2, [r7, #20]
 800a7da:	4931      	ldr	r1, [pc, #196]	; (800a8a0 <ES_WIFI_ReceiveData+0x15c>)
 800a7dc:	4618      	mov	r0, r3
 800a7de:	f008 fd07 	bl	80131f0 <siprintf>
        ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800a7e2:	68fb      	ldr	r3, [r7, #12]
 800a7e4:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a7ee:	461a      	mov	r2, r3
 800a7f0:	68f8      	ldr	r0, [r7, #12]
 800a7f2:	f7ff fb2d 	bl	8009e50 <AT_ExecuteCommand>
 800a7f6:	4603      	mov	r3, r0
 800a7f8:	74fb      	strb	r3, [r7, #19]
        if(ret == ES_WIFI_STATUS_OK)
 800a7fa:	7cfb      	ldrb	r3, [r7, #19]
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	d120      	bne.n	800a842 <ES_WIFI_ReceiveData+0xfe>
        {
          sprintf((char*)Obj->CmdData,"R0\r");
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a806:	4927      	ldr	r1, [pc, #156]	; (800a8a4 <ES_WIFI_ReceiveData+0x160>)
 800a808:	4618      	mov	r0, r3
 800a80a:	f008 fcf1 	bl	80131f0 <siprintf>
          ret = AT_RequestReceiveData(Obj, Obj->CmdData, (char *)pdata, Reqlen, Receivedlen);
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800a814:	893a      	ldrh	r2, [r7, #8]
 800a816:	6a3b      	ldr	r3, [r7, #32]
 800a818:	9300      	str	r3, [sp, #0]
 800a81a:	4613      	mov	r3, r2
 800a81c:	687a      	ldr	r2, [r7, #4]
 800a81e:	68f8      	ldr	r0, [r7, #12]
 800a820:	f7ff fbf2 	bl	800a008 <AT_RequestReceiveData>
 800a824:	4603      	mov	r3, r0
 800a826:	74fb      	strb	r3, [r7, #19]
          if (ret != ES_WIFI_STATUS_OK)
 800a828:	7cfb      	ldrb	r3, [r7, #19]
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d02e      	beq.n	800a88c <ES_WIFI_ReceiveData+0x148>
          {
            DEBUG("AT_RequestReceiveData  failed\n");
 800a82e:	f640 1208 	movw	r2, #2312	; 0x908
 800a832:	491d      	ldr	r1, [pc, #116]	; (800a8a8 <ES_WIFI_ReceiveData+0x164>)
 800a834:	481d      	ldr	r0, [pc, #116]	; (800a8ac <ES_WIFI_ReceiveData+0x168>)
 800a836:	f008 fb9f 	bl	8012f78 <iprintf>
 800a83a:	481d      	ldr	r0, [pc, #116]	; (800a8b0 <ES_WIFI_ReceiveData+0x16c>)
 800a83c:	f008 fc22 	bl	8013084 <puts>
 800a840:	e024      	b.n	800a88c <ES_WIFI_ReceiveData+0x148>
          }
        }
        else
        {
         DEBUG("setting timeout failed\n");
 800a842:	f640 120d 	movw	r2, #2317	; 0x90d
 800a846:	4918      	ldr	r1, [pc, #96]	; (800a8a8 <ES_WIFI_ReceiveData+0x164>)
 800a848:	4818      	ldr	r0, [pc, #96]	; (800a8ac <ES_WIFI_ReceiveData+0x168>)
 800a84a:	f008 fb95 	bl	8012f78 <iprintf>
 800a84e:	4819      	ldr	r0, [pc, #100]	; (800a8b4 <ES_WIFI_ReceiveData+0x170>)
 800a850:	f008 fc18 	bl	8013084 <puts>
 800a854:	e01a      	b.n	800a88c <ES_WIFI_ReceiveData+0x148>
        }
      }
      else
      {
        DEBUG("setting requested len failed\n");
 800a856:	f640 1212 	movw	r2, #2322	; 0x912
 800a85a:	4913      	ldr	r1, [pc, #76]	; (800a8a8 <ES_WIFI_ReceiveData+0x164>)
 800a85c:	4813      	ldr	r0, [pc, #76]	; (800a8ac <ES_WIFI_ReceiveData+0x168>)
 800a85e:	f008 fb8b 	bl	8012f78 <iprintf>
 800a862:	4815      	ldr	r0, [pc, #84]	; (800a8b8 <ES_WIFI_ReceiveData+0x174>)
 800a864:	f008 fc0e 	bl	8013084 <puts>
        *Receivedlen = 0;
 800a868:	6a3b      	ldr	r3, [r7, #32]
 800a86a:	2200      	movs	r2, #0
 800a86c:	801a      	strh	r2, [r3, #0]
 800a86e:	e00d      	b.n	800a88c <ES_WIFI_ReceiveData+0x148>
      }
    }
    else
    {
      DEBUG("setting socket for read failed\n");
 800a870:	f640 1218 	movw	r2, #2328	; 0x918
 800a874:	490c      	ldr	r1, [pc, #48]	; (800a8a8 <ES_WIFI_ReceiveData+0x164>)
 800a876:	480d      	ldr	r0, [pc, #52]	; (800a8ac <ES_WIFI_ReceiveData+0x168>)
 800a878:	f008 fb7e 	bl	8012f78 <iprintf>
 800a87c:	480f      	ldr	r0, [pc, #60]	; (800a8bc <ES_WIFI_ReceiveData+0x178>)
 800a87e:	f008 fc01 	bl	8013084 <puts>
      issue15++;
 800a882:	4b0f      	ldr	r3, [pc, #60]	; (800a8c0 <ES_WIFI_ReceiveData+0x17c>)
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	3301      	adds	r3, #1
 800a888:	4a0d      	ldr	r2, [pc, #52]	; (800a8c0 <ES_WIFI_ReceiveData+0x17c>)
 800a88a:	6013      	str	r3, [r2, #0]
    }
  }
  UNLOCK_WIFI();
  return ret;
 800a88c:	7cfb      	ldrb	r3, [r7, #19]
}
 800a88e:	4618      	mov	r0, r3
 800a890:	3718      	adds	r7, #24
 800a892:	46bd      	mov	sp, r7
 800a894:	bd80      	pop	{r7, pc}
 800a896:	bf00      	nop
 800a898:	080146e8 	.word	0x080146e8
 800a89c:	08014938 	.word	0x08014938
 800a8a0:	08014940 	.word	0x08014940
 800a8a4:	08014948 	.word	0x08014948
 800a8a8:	08014778 	.word	0x08014778
 800a8ac:	080147a0 	.word	0x080147a0
 800a8b0:	0801494c 	.word	0x0801494c
 800a8b4:	0801496c 	.word	0x0801496c
 800a8b8:	08014984 	.word	0x08014984
 800a8bc:	080149a4 	.word	0x080149a4
 800a8c0:	20000c88 	.word	0x20000c88

0800a8c4 <SPI_WIFI_MspInit>:
  * @brief  Initialize SPI MSP
  * @param  hspi: SPI handle
  * @retval None
  */
void SPI_WIFI_MspInit(SPI_HandleTypeDef* hspi)
{
 800a8c4:	b580      	push	{r7, lr}
 800a8c6:	b08c      	sub	sp, #48	; 0x30
 800a8c8:	af00      	add	r7, sp, #0
 800a8ca:	6078      	str	r0, [r7, #4]
  
  GPIO_InitTypeDef GPIO_Init;
  
  __HAL_RCC_SPI3_CLK_ENABLE();
 800a8cc:	4b56      	ldr	r3, [pc, #344]	; (800aa28 <SPI_WIFI_MspInit+0x164>)
 800a8ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a8d0:	4a55      	ldr	r2, [pc, #340]	; (800aa28 <SPI_WIFI_MspInit+0x164>)
 800a8d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a8d6:	6593      	str	r3, [r2, #88]	; 0x58
 800a8d8:	4b53      	ldr	r3, [pc, #332]	; (800aa28 <SPI_WIFI_MspInit+0x164>)
 800a8da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a8dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a8e0:	61bb      	str	r3, [r7, #24]
 800a8e2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a8e4:	4b50      	ldr	r3, [pc, #320]	; (800aa28 <SPI_WIFI_MspInit+0x164>)
 800a8e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a8e8:	4a4f      	ldr	r2, [pc, #316]	; (800aa28 <SPI_WIFI_MspInit+0x164>)
 800a8ea:	f043 0302 	orr.w	r3, r3, #2
 800a8ee:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a8f0:	4b4d      	ldr	r3, [pc, #308]	; (800aa28 <SPI_WIFI_MspInit+0x164>)
 800a8f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a8f4:	f003 0302 	and.w	r3, r3, #2
 800a8f8:	617b      	str	r3, [r7, #20]
 800a8fa:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800a8fc:	4b4a      	ldr	r3, [pc, #296]	; (800aa28 <SPI_WIFI_MspInit+0x164>)
 800a8fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a900:	4a49      	ldr	r2, [pc, #292]	; (800aa28 <SPI_WIFI_MspInit+0x164>)
 800a902:	f043 0304 	orr.w	r3, r3, #4
 800a906:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a908:	4b47      	ldr	r3, [pc, #284]	; (800aa28 <SPI_WIFI_MspInit+0x164>)
 800a90a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a90c:	f003 0304 	and.w	r3, r3, #4
 800a910:	613b      	str	r3, [r7, #16]
 800a912:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800a914:	4b44      	ldr	r3, [pc, #272]	; (800aa28 <SPI_WIFI_MspInit+0x164>)
 800a916:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a918:	4a43      	ldr	r2, [pc, #268]	; (800aa28 <SPI_WIFI_MspInit+0x164>)
 800a91a:	f043 0310 	orr.w	r3, r3, #16
 800a91e:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a920:	4b41      	ldr	r3, [pc, #260]	; (800aa28 <SPI_WIFI_MspInit+0x164>)
 800a922:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a924:	f003 0310 	and.w	r3, r3, #16
 800a928:	60fb      	str	r3, [r7, #12]
 800a92a:	68fb      	ldr	r3, [r7, #12]
    
  /* configure Wake up pin */
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13, GPIO_PIN_RESET );
 800a92c:	2200      	movs	r2, #0
 800a92e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800a932:	483e      	ldr	r0, [pc, #248]	; (800aa2c <SPI_WIFI_MspInit+0x168>)
 800a934:	f7f8 fd18 	bl	8003368 <HAL_GPIO_WritePin>
  GPIO_Init.Pin       = GPIO_PIN_13;
 800a938:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a93c:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 800a93e:	2301      	movs	r3, #1
 800a940:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 800a942:	2300      	movs	r3, #0
 800a944:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 800a946:	2300      	movs	r3, #0
 800a948:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_Init );
 800a94a:	f107 031c 	add.w	r3, r7, #28
 800a94e:	4619      	mov	r1, r3
 800a950:	4836      	ldr	r0, [pc, #216]	; (800aa2c <SPI_WIFI_MspInit+0x168>)
 800a952:	f7f8 fa53 	bl	8002dfc <HAL_GPIO_Init>

  /* configure Data ready pin */
  GPIO_Init.Pin       = GPIO_PIN_1;
 800a956:	2302      	movs	r3, #2
 800a958:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_IT_RISING;
 800a95a:	4b35      	ldr	r3, [pc, #212]	; (800aa30 <SPI_WIFI_MspInit+0x16c>)
 800a95c:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 800a95e:	2300      	movs	r3, #0
 800a960:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 800a962:	2300      	movs	r3, #0
 800a964:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_Init );
 800a966:	f107 031c 	add.w	r3, r7, #28
 800a96a:	4619      	mov	r1, r3
 800a96c:	4831      	ldr	r0, [pc, #196]	; (800aa34 <SPI_WIFI_MspInit+0x170>)
 800a96e:	f7f8 fa45 	bl	8002dfc <HAL_GPIO_Init>

  /* configure Reset pin */
  GPIO_Init.Pin       = GPIO_PIN_8;
 800a972:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a976:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 800a978:	2301      	movs	r3, #1
 800a97a:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 800a97c:	2300      	movs	r3, #0
 800a97e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 800a980:	2300      	movs	r3, #0
 800a982:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_Init.Alternate = 0;
 800a984:	2300      	movs	r3, #0
 800a986:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_Init );
 800a988:	f107 031c 	add.w	r3, r7, #28
 800a98c:	4619      	mov	r1, r3
 800a98e:	4829      	ldr	r0, [pc, #164]	; (800aa34 <SPI_WIFI_MspInit+0x170>)
 800a990:	f7f8 fa34 	bl	8002dfc <HAL_GPIO_Init>
  
  /* configure SPI NSS pin pin */
  HAL_GPIO_WritePin( GPIOE , GPIO_PIN_0, GPIO_PIN_SET );
 800a994:	2201      	movs	r2, #1
 800a996:	2101      	movs	r1, #1
 800a998:	4826      	ldr	r0, [pc, #152]	; (800aa34 <SPI_WIFI_MspInit+0x170>)
 800a99a:	f7f8 fce5 	bl	8003368 <HAL_GPIO_WritePin>
  GPIO_Init.Pin       =  GPIO_PIN_0;
 800a99e:	2301      	movs	r3, #1
 800a9a0:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 800a9a2:	2301      	movs	r3, #1
 800a9a4:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 800a9a6:	2300      	movs	r3, #0
 800a9a8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 800a9aa:	2301      	movs	r3, #1
 800a9ac:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init( GPIOE, &GPIO_Init );
 800a9ae:	f107 031c 	add.w	r3, r7, #28
 800a9b2:	4619      	mov	r1, r3
 800a9b4:	481f      	ldr	r0, [pc, #124]	; (800aa34 <SPI_WIFI_MspInit+0x170>)
 800a9b6:	f7f8 fa21 	bl	8002dfc <HAL_GPIO_Init>
  
  /* configure SPI CLK pin */
  GPIO_Init.Pin       =  GPIO_PIN_10;
 800a9ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a9be:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 800a9c0:	2302      	movs	r3, #2
 800a9c2:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 800a9c4:	2300      	movs	r3, #0
 800a9c6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 800a9c8:	2301      	movs	r3, #1
 800a9ca:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 800a9cc:	2306      	movs	r3, #6
 800a9ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_Init );
 800a9d0:	f107 031c 	add.w	r3, r7, #28
 800a9d4:	4619      	mov	r1, r3
 800a9d6:	4818      	ldr	r0, [pc, #96]	; (800aa38 <SPI_WIFI_MspInit+0x174>)
 800a9d8:	f7f8 fa10 	bl	8002dfc <HAL_GPIO_Init>
  
  /* configure SPI MOSI pin */
  GPIO_Init.Pin       = GPIO_PIN_12;
 800a9dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a9e0:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 800a9e2:	2302      	movs	r3, #2
 800a9e4:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 800a9e6:	2300      	movs	r3, #0
 800a9e8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 800a9ea:	2301      	movs	r3, #1
 800a9ec:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 800a9ee:	2306      	movs	r3, #6
 800a9f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init( GPIOC, &GPIO_Init );
 800a9f2:	f107 031c 	add.w	r3, r7, #28
 800a9f6:	4619      	mov	r1, r3
 800a9f8:	480f      	ldr	r0, [pc, #60]	; (800aa38 <SPI_WIFI_MspInit+0x174>)
 800a9fa:	f7f8 f9ff 	bl	8002dfc <HAL_GPIO_Init>
  
  /* configure SPI MISO pin */
  GPIO_Init.Pin       = GPIO_PIN_11;
 800a9fe:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800aa02:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 800aa04:	2302      	movs	r3, #2
 800aa06:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_PULLUP;
 800aa08:	2301      	movs	r3, #1
 800aa0a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 800aa0c:	2301      	movs	r3, #1
 800aa0e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 800aa10:	2306      	movs	r3, #6
 800aa12:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init( GPIOC,&GPIO_Init );
 800aa14:	f107 031c 	add.w	r3, r7, #28
 800aa18:	4619      	mov	r1, r3
 800aa1a:	4807      	ldr	r0, [pc, #28]	; (800aa38 <SPI_WIFI_MspInit+0x174>)
 800aa1c:	f7f8 f9ee 	bl	8002dfc <HAL_GPIO_Init>
}
 800aa20:	bf00      	nop
 800aa22:	3730      	adds	r7, #48	; 0x30
 800aa24:	46bd      	mov	sp, r7
 800aa26:	bd80      	pop	{r7, pc}
 800aa28:	40021000 	.word	0x40021000
 800aa2c:	48000400 	.word	0x48000400
 800aa30:	10110000 	.word	0x10110000
 800aa34:	48001000 	.word	0x48001000
 800aa38:	48000800 	.word	0x48000800

0800aa3c <SPI_WIFI_Init>:
  * @brief  Initialize the SPI3
  * @param  None
  * @retval None
  */
int8_t SPI_WIFI_Init(uint16_t mode)
{
 800aa3c:	b580      	push	{r7, lr}
 800aa3e:	b084      	sub	sp, #16
 800aa40:	af00      	add	r7, sp, #0
 800aa42:	4603      	mov	r3, r0
 800aa44:	80fb      	strh	r3, [r7, #6]
  int8_t  rc=0;
 800aa46:	2300      	movs	r3, #0
 800aa48:	73fb      	strb	r3, [r7, #15]
  
  if (mode == ES_WIFI_INIT)
 800aa4a:	88fb      	ldrh	r3, [r7, #6]
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d145      	bne.n	800aadc <SPI_WIFI_Init+0xa0>
  {
    hspi.Instance               = SPI3;
 800aa50:	4b27      	ldr	r3, [pc, #156]	; (800aaf0 <SPI_WIFI_Init+0xb4>)
 800aa52:	4a28      	ldr	r2, [pc, #160]	; (800aaf4 <SPI_WIFI_Init+0xb8>)
 800aa54:	601a      	str	r2, [r3, #0]
    SPI_WIFI_MspInit(&hspi);
 800aa56:	4826      	ldr	r0, [pc, #152]	; (800aaf0 <SPI_WIFI_Init+0xb4>)
 800aa58:	f7ff ff34 	bl	800a8c4 <SPI_WIFI_MspInit>
  
    hspi.Init.Mode              = SPI_MODE_MASTER;
 800aa5c:	4b24      	ldr	r3, [pc, #144]	; (800aaf0 <SPI_WIFI_Init+0xb4>)
 800aa5e:	f44f 7282 	mov.w	r2, #260	; 0x104
 800aa62:	605a      	str	r2, [r3, #4]
    hspi.Init.Direction         = SPI_DIRECTION_2LINES;
 800aa64:	4b22      	ldr	r3, [pc, #136]	; (800aaf0 <SPI_WIFI_Init+0xb4>)
 800aa66:	2200      	movs	r2, #0
 800aa68:	609a      	str	r2, [r3, #8]
    hspi.Init.DataSize          = SPI_DATASIZE_16BIT;
 800aa6a:	4b21      	ldr	r3, [pc, #132]	; (800aaf0 <SPI_WIFI_Init+0xb4>)
 800aa6c:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 800aa70:	60da      	str	r2, [r3, #12]
    hspi.Init.CLKPolarity       = SPI_POLARITY_LOW;
 800aa72:	4b1f      	ldr	r3, [pc, #124]	; (800aaf0 <SPI_WIFI_Init+0xb4>)
 800aa74:	2200      	movs	r2, #0
 800aa76:	611a      	str	r2, [r3, #16]
    hspi.Init.CLKPhase          = SPI_PHASE_1EDGE;
 800aa78:	4b1d      	ldr	r3, [pc, #116]	; (800aaf0 <SPI_WIFI_Init+0xb4>)
 800aa7a:	2200      	movs	r2, #0
 800aa7c:	615a      	str	r2, [r3, #20]
    hspi.Init.NSS               = SPI_NSS_SOFT;
 800aa7e:	4b1c      	ldr	r3, [pc, #112]	; (800aaf0 <SPI_WIFI_Init+0xb4>)
 800aa80:	f44f 7200 	mov.w	r2, #512	; 0x200
 800aa84:	619a      	str	r2, [r3, #24]
    hspi.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8; /* 80/8= 10MHz (Inventek WIFI module supports up to 20MHz)*/
 800aa86:	4b1a      	ldr	r3, [pc, #104]	; (800aaf0 <SPI_WIFI_Init+0xb4>)
 800aa88:	2210      	movs	r2, #16
 800aa8a:	61da      	str	r2, [r3, #28]
    hspi.Init.FirstBit          = SPI_FIRSTBIT_MSB;
 800aa8c:	4b18      	ldr	r3, [pc, #96]	; (800aaf0 <SPI_WIFI_Init+0xb4>)
 800aa8e:	2200      	movs	r2, #0
 800aa90:	621a      	str	r2, [r3, #32]
    hspi.Init.TIMode            = SPI_TIMODE_DISABLE;
 800aa92:	4b17      	ldr	r3, [pc, #92]	; (800aaf0 <SPI_WIFI_Init+0xb4>)
 800aa94:	2200      	movs	r2, #0
 800aa96:	625a      	str	r2, [r3, #36]	; 0x24
    hspi.Init.CRCCalculation    = SPI_CRCCALCULATION_DISABLE;
 800aa98:	4b15      	ldr	r3, [pc, #84]	; (800aaf0 <SPI_WIFI_Init+0xb4>)
 800aa9a:	2200      	movs	r2, #0
 800aa9c:	629a      	str	r2, [r3, #40]	; 0x28
    hspi.Init.CRCPolynomial     = 0;
 800aa9e:	4b14      	ldr	r3, [pc, #80]	; (800aaf0 <SPI_WIFI_Init+0xb4>)
 800aaa0:	2200      	movs	r2, #0
 800aaa2:	62da      	str	r2, [r3, #44]	; 0x2c
  
    if(HAL_SPI_Init( &hspi ) != HAL_OK)
 800aaa4:	4812      	ldr	r0, [pc, #72]	; (800aaf0 <SPI_WIFI_Init+0xb4>)
 800aaa6:	f7fb fabd 	bl	8006024 <HAL_SPI_Init>
 800aaaa:	4603      	mov	r3, r0
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	d002      	beq.n	800aab6 <SPI_WIFI_Init+0x7a>
    {
      return -1;
 800aab0:	f04f 33ff 	mov.w	r3, #4294967295
 800aab4:	e018      	b.n	800aae8 <SPI_WIFI_Init+0xac>
    }

     /* Enable Interrupt for Data Ready pin , GPIO_PIN1 */
     HAL_NVIC_SetPriority((IRQn_Type)EXTI1_IRQn, SPI_INTERFACE_PRIO, 0x00);
 800aab6:	2200      	movs	r2, #0
 800aab8:	2100      	movs	r1, #0
 800aaba:	2007      	movs	r0, #7
 800aabc:	f7f7 ffda 	bl	8002a74 <HAL_NVIC_SetPriority>
     HAL_NVIC_EnableIRQ((IRQn_Type)EXTI1_IRQn);
 800aac0:	2007      	movs	r0, #7
 800aac2:	f7f7 fff3 	bl	8002aac <HAL_NVIC_EnableIRQ>
     
     /* Enable Interrupt for SPI tx and rx */
     HAL_NVIC_SetPriority((IRQn_Type)SPI3_IRQn, SPI_INTERFACE_PRIO, 0);
 800aac6:	2200      	movs	r2, #0
 800aac8:	2100      	movs	r1, #0
 800aaca:	2033      	movs	r0, #51	; 0x33
 800aacc:	f7f7 ffd2 	bl	8002a74 <HAL_NVIC_SetPriority>
     HAL_NVIC_EnableIRQ((IRQn_Type)SPI3_IRQn);
 800aad0:	2033      	movs	r0, #51	; 0x33
 800aad2:	f7f7 ffeb 	bl	8002aac <HAL_NVIC_EnableIRQ>
    SEM_WAIT(spi_rx_sem, 1);
    SEM_WAIT(spi_tx_sem, 1);

#endif
    /* first call used for calibration */
    SPI_WIFI_DelayUs(10);
 800aad6:	200a      	movs	r0, #10
 800aad8:	f000 f9fe 	bl	800aed8 <SPI_WIFI_DelayUs>
  }
  
  rc= SPI_WIFI_ResetModule();
 800aadc:	f000 f80c 	bl	800aaf8 <SPI_WIFI_ResetModule>
 800aae0:	4603      	mov	r3, r0
 800aae2:	73fb      	strb	r3, [r7, #15]

  return rc;
 800aae4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800aae8:	4618      	mov	r0, r3
 800aaea:	3710      	adds	r7, #16
 800aaec:	46bd      	mov	sp, r7
 800aaee:	bd80      	pop	{r7, pc}
 800aaf0:	20000c8c 	.word	0x20000c8c
 800aaf4:	40003c00 	.word	0x40003c00

0800aaf8 <SPI_WIFI_ResetModule>:


int8_t SPI_WIFI_ResetModule(void)
{
 800aaf8:	b580      	push	{r7, lr}
 800aafa:	b084      	sub	sp, #16
 800aafc:	af00      	add	r7, sp, #0
  uint32_t tickstart = HAL_GetTick();
 800aafe:	f7f7 fead 	bl	800285c <HAL_GetTick>
 800ab02:	60b8      	str	r0, [r7, #8]
  uint8_t Prompt[6];
  uint8_t count = 0;
 800ab04:	2300      	movs	r3, #0
 800ab06:	73fb      	strb	r3, [r7, #15]
  HAL_StatusTypeDef  Status;
 
  WIFI_RESET_MODULE();
 800ab08:	2200      	movs	r2, #0
 800ab0a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800ab0e:	4830      	ldr	r0, [pc, #192]	; (800abd0 <SPI_WIFI_ResetModule+0xd8>)
 800ab10:	f7f8 fc2a 	bl	8003368 <HAL_GPIO_WritePin>
 800ab14:	200a      	movs	r0, #10
 800ab16:	f7f7 fead 	bl	8002874 <HAL_Delay>
 800ab1a:	2201      	movs	r2, #1
 800ab1c:	f44f 7180 	mov.w	r1, #256	; 0x100
 800ab20:	482b      	ldr	r0, [pc, #172]	; (800abd0 <SPI_WIFI_ResetModule+0xd8>)
 800ab22:	f7f8 fc21 	bl	8003368 <HAL_GPIO_WritePin>
 800ab26:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800ab2a:	f7f7 fea3 	bl	8002874 <HAL_Delay>
  WIFI_ENABLE_NSS(); 
 800ab2e:	2200      	movs	r2, #0
 800ab30:	2101      	movs	r1, #1
 800ab32:	4827      	ldr	r0, [pc, #156]	; (800abd0 <SPI_WIFI_ResetModule+0xd8>)
 800ab34:	f7f8 fc18 	bl	8003368 <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(15);
 800ab38:	200f      	movs	r0, #15
 800ab3a:	f000 f9cd 	bl	800aed8 <SPI_WIFI_DelayUs>
 
  while (WIFI_IS_CMDDATA_READY())
 800ab3e:	e020      	b.n	800ab82 <SPI_WIFI_ResetModule+0x8a>
  {
    Status = HAL_SPI_Receive(&hspi , &Prompt[count], 1, 0xFFFF);
 800ab40:	7bfb      	ldrb	r3, [r7, #15]
 800ab42:	463a      	mov	r2, r7
 800ab44:	18d1      	adds	r1, r2, r3
 800ab46:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ab4a:	2201      	movs	r2, #1
 800ab4c:	4821      	ldr	r0, [pc, #132]	; (800abd4 <SPI_WIFI_ResetModule+0xdc>)
 800ab4e:	f7fb fb34 	bl	80061ba <HAL_SPI_Receive>
 800ab52:	4603      	mov	r3, r0
 800ab54:	71fb      	strb	r3, [r7, #7]
    count += 2;
 800ab56:	7bfb      	ldrb	r3, [r7, #15]
 800ab58:	3302      	adds	r3, #2
 800ab5a:	73fb      	strb	r3, [r7, #15]
    if(((HAL_GetTick() - tickstart ) > 0xFFFF) || (Status != HAL_OK))
 800ab5c:	f7f7 fe7e 	bl	800285c <HAL_GetTick>
 800ab60:	4602      	mov	r2, r0
 800ab62:	68bb      	ldr	r3, [r7, #8]
 800ab64:	1ad3      	subs	r3, r2, r3
 800ab66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ab6a:	d202      	bcs.n	800ab72 <SPI_WIFI_ResetModule+0x7a>
 800ab6c:	79fb      	ldrb	r3, [r7, #7]
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d007      	beq.n	800ab82 <SPI_WIFI_ResetModule+0x8a>
    {
      WIFI_DISABLE_NSS();
 800ab72:	2201      	movs	r2, #1
 800ab74:	2101      	movs	r1, #1
 800ab76:	4816      	ldr	r0, [pc, #88]	; (800abd0 <SPI_WIFI_ResetModule+0xd8>)
 800ab78:	f7f8 fbf6 	bl	8003368 <HAL_GPIO_WritePin>
      return -1;
 800ab7c:	f04f 33ff 	mov.w	r3, #4294967295
 800ab80:	e021      	b.n	800abc6 <SPI_WIFI_ResetModule+0xce>
  while (WIFI_IS_CMDDATA_READY())
 800ab82:	2102      	movs	r1, #2
 800ab84:	4812      	ldr	r0, [pc, #72]	; (800abd0 <SPI_WIFI_ResetModule+0xd8>)
 800ab86:	f7f8 fbd7 	bl	8003338 <HAL_GPIO_ReadPin>
 800ab8a:	4603      	mov	r3, r0
 800ab8c:	2b01      	cmp	r3, #1
 800ab8e:	d0d7      	beq.n	800ab40 <SPI_WIFI_ResetModule+0x48>
    }    
  }
  
  WIFI_DISABLE_NSS();
 800ab90:	2201      	movs	r2, #1
 800ab92:	2101      	movs	r1, #1
 800ab94:	480e      	ldr	r0, [pc, #56]	; (800abd0 <SPI_WIFI_ResetModule+0xd8>)
 800ab96:	f7f8 fbe7 	bl	8003368 <HAL_GPIO_WritePin>
  if((Prompt[0] != 0x15) ||(Prompt[1] != 0x15) ||(Prompt[2] != '\r')||
 800ab9a:	783b      	ldrb	r3, [r7, #0]
 800ab9c:	2b15      	cmp	r3, #21
 800ab9e:	d10e      	bne.n	800abbe <SPI_WIFI_ResetModule+0xc6>
 800aba0:	787b      	ldrb	r3, [r7, #1]
 800aba2:	2b15      	cmp	r3, #21
 800aba4:	d10b      	bne.n	800abbe <SPI_WIFI_ResetModule+0xc6>
 800aba6:	78bb      	ldrb	r3, [r7, #2]
 800aba8:	2b0d      	cmp	r3, #13
 800abaa:	d108      	bne.n	800abbe <SPI_WIFI_ResetModule+0xc6>
       (Prompt[3] != '\n') ||(Prompt[4] != '>') ||(Prompt[5] != ' '))
 800abac:	78fb      	ldrb	r3, [r7, #3]
  if((Prompt[0] != 0x15) ||(Prompt[1] != 0x15) ||(Prompt[2] != '\r')||
 800abae:	2b0a      	cmp	r3, #10
 800abb0:	d105      	bne.n	800abbe <SPI_WIFI_ResetModule+0xc6>
       (Prompt[3] != '\n') ||(Prompt[4] != '>') ||(Prompt[5] != ' '))
 800abb2:	793b      	ldrb	r3, [r7, #4]
 800abb4:	2b3e      	cmp	r3, #62	; 0x3e
 800abb6:	d102      	bne.n	800abbe <SPI_WIFI_ResetModule+0xc6>
 800abb8:	797b      	ldrb	r3, [r7, #5]
 800abba:	2b20      	cmp	r3, #32
 800abbc:	d002      	beq.n	800abc4 <SPI_WIFI_ResetModule+0xcc>
  {
    return -1;
 800abbe:	f04f 33ff 	mov.w	r3, #4294967295
 800abc2:	e000      	b.n	800abc6 <SPI_WIFI_ResetModule+0xce>
  }    
  return 0;
 800abc4:	2300      	movs	r3, #0
}
 800abc6:	4618      	mov	r0, r3
 800abc8:	3710      	adds	r7, #16
 800abca:	46bd      	mov	sp, r7
 800abcc:	bd80      	pop	{r7, pc}
 800abce:	bf00      	nop
 800abd0:	48001000 	.word	0x48001000
 800abd4:	20000c8c 	.word	0x20000c8c

0800abd8 <SPI_WIFI_DeInit>:
  * @brief  DeInitialize the SPI
  * @param  None
  * @retval None
  */
int8_t SPI_WIFI_DeInit(void)
{
 800abd8:	b580      	push	{r7, lr}
 800abda:	af00      	add	r7, sp, #0
  HAL_SPI_DeInit( &hspi );
 800abdc:	4802      	ldr	r0, [pc, #8]	; (800abe8 <SPI_WIFI_DeInit+0x10>)
 800abde:	f7fb fac4 	bl	800616a <HAL_SPI_DeInit>
  osMutexDelete(es_wifi_mutex);
  osSemaphoreDelete(spi_tx_sem);
  osSemaphoreDelete(spi_rx_sem);
  osSemaphoreDelete(cmddata_rdy_rising_sem);
#endif
  return 0;
 800abe2:	2300      	movs	r3, #0
}
 800abe4:	4618      	mov	r0, r3
 800abe6:	bd80      	pop	{r7, pc}
 800abe8:	20000c8c 	.word	0x20000c8c

0800abec <wait_cmddata_rdy_high>:
  * @param  timeout : send timeout in mS
  * @retval Length of received data (payload)
  */

int wait_cmddata_rdy_high(int timeout)
{
 800abec:	b580      	push	{r7, lr}
 800abee:	b084      	sub	sp, #16
 800abf0:	af00      	add	r7, sp, #0
 800abf2:	6078      	str	r0, [r7, #4]
  int tickstart = HAL_GetTick();
 800abf4:	f7f7 fe32 	bl	800285c <HAL_GetTick>
 800abf8:	4603      	mov	r3, r0
 800abfa:	60fb      	str	r3, [r7, #12]
  while (WIFI_IS_CMDDATA_READY()==0)
 800abfc:	e00a      	b.n	800ac14 <wait_cmddata_rdy_high+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 800abfe:	f7f7 fe2d 	bl	800285c <HAL_GetTick>
 800ac02:	4602      	mov	r2, r0
 800ac04:	68fb      	ldr	r3, [r7, #12]
 800ac06:	1ad2      	subs	r2, r2, r3
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	429a      	cmp	r2, r3
 800ac0c:	d902      	bls.n	800ac14 <wait_cmddata_rdy_high+0x28>
    {
      return -1;
 800ac0e:	f04f 33ff 	mov.w	r3, #4294967295
 800ac12:	e007      	b.n	800ac24 <wait_cmddata_rdy_high+0x38>
  while (WIFI_IS_CMDDATA_READY()==0)
 800ac14:	2102      	movs	r1, #2
 800ac16:	4805      	ldr	r0, [pc, #20]	; (800ac2c <wait_cmddata_rdy_high+0x40>)
 800ac18:	f7f8 fb8e 	bl	8003338 <HAL_GPIO_ReadPin>
 800ac1c:	4603      	mov	r3, r0
 800ac1e:	2b01      	cmp	r3, #1
 800ac20:	d1ed      	bne.n	800abfe <wait_cmddata_rdy_high+0x12>
    }
  }
  return 0;
 800ac22:	2300      	movs	r3, #0
}
 800ac24:	4618      	mov	r0, r3
 800ac26:	3710      	adds	r7, #16
 800ac28:	46bd      	mov	sp, r7
 800ac2a:	bd80      	pop	{r7, pc}
 800ac2c:	48001000 	.word	0x48001000

0800ac30 <wait_cmddata_rdy_rising_event>:



int wait_cmddata_rdy_rising_event(int timeout)
{
 800ac30:	b580      	push	{r7, lr}
 800ac32:	b084      	sub	sp, #16
 800ac34:	af00      	add	r7, sp, #0
 800ac36:	6078      	str	r0, [r7, #4]
#ifdef SEM_WAIT
   return SEM_WAIT(cmddata_rdy_rising_sem, timeout);
#else
  int tickstart = HAL_GetTick();
 800ac38:	f7f7 fe10 	bl	800285c <HAL_GetTick>
 800ac3c:	4603      	mov	r3, r0
 800ac3e:	60fb      	str	r3, [r7, #12]
  while (cmddata_rdy_rising_event==1)
 800ac40:	e00a      	b.n	800ac58 <wait_cmddata_rdy_rising_event+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 800ac42:	f7f7 fe0b 	bl	800285c <HAL_GetTick>
 800ac46:	4602      	mov	r2, r0
 800ac48:	68fb      	ldr	r3, [r7, #12]
 800ac4a:	1ad2      	subs	r2, r2, r3
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	429a      	cmp	r2, r3
 800ac50:	d902      	bls.n	800ac58 <wait_cmddata_rdy_rising_event+0x28>
    {
      return -1;
 800ac52:	f04f 33ff 	mov.w	r3, #4294967295
 800ac56:	e004      	b.n	800ac62 <wait_cmddata_rdy_rising_event+0x32>
  while (cmddata_rdy_rising_event==1)
 800ac58:	4b04      	ldr	r3, [pc, #16]	; (800ac6c <wait_cmddata_rdy_rising_event+0x3c>)
 800ac5a:	681b      	ldr	r3, [r3, #0]
 800ac5c:	2b01      	cmp	r3, #1
 800ac5e:	d0f0      	beq.n	800ac42 <wait_cmddata_rdy_rising_event+0x12>
    }
  }
  return 0;
 800ac60:	2300      	movs	r3, #0
#endif
}
 800ac62:	4618      	mov	r0, r3
 800ac64:	3710      	adds	r7, #16
 800ac66:	46bd      	mov	sp, r7
 800ac68:	bd80      	pop	{r7, pc}
 800ac6a:	bf00      	nop
 800ac6c:	20000cf8 	.word	0x20000cf8

0800ac70 <wait_spi_rx_event>:

int wait_spi_rx_event(int timeout)
{
 800ac70:	b580      	push	{r7, lr}
 800ac72:	b084      	sub	sp, #16
 800ac74:	af00      	add	r7, sp, #0
 800ac76:	6078      	str	r0, [r7, #4]
#ifdef SEM_WAIT
   return SEM_WAIT(spi_rx_sem, timeout);
#else
  int tickstart = HAL_GetTick();
 800ac78:	f7f7 fdf0 	bl	800285c <HAL_GetTick>
 800ac7c:	4603      	mov	r3, r0
 800ac7e:	60fb      	str	r3, [r7, #12]
  while (spi_rx_event==1)
 800ac80:	e00a      	b.n	800ac98 <wait_spi_rx_event+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 800ac82:	f7f7 fdeb 	bl	800285c <HAL_GetTick>
 800ac86:	4602      	mov	r2, r0
 800ac88:	68fb      	ldr	r3, [r7, #12]
 800ac8a:	1ad2      	subs	r2, r2, r3
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	429a      	cmp	r2, r3
 800ac90:	d902      	bls.n	800ac98 <wait_spi_rx_event+0x28>
    {
      return -1;
 800ac92:	f04f 33ff 	mov.w	r3, #4294967295
 800ac96:	e004      	b.n	800aca2 <wait_spi_rx_event+0x32>
  while (spi_rx_event==1)
 800ac98:	4b04      	ldr	r3, [pc, #16]	; (800acac <wait_spi_rx_event+0x3c>)
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	2b01      	cmp	r3, #1
 800ac9e:	d0f0      	beq.n	800ac82 <wait_spi_rx_event+0x12>
    }
  }
  return 0;
 800aca0:	2300      	movs	r3, #0
#endif
}
 800aca2:	4618      	mov	r0, r3
 800aca4:	3710      	adds	r7, #16
 800aca6:	46bd      	mov	sp, r7
 800aca8:	bd80      	pop	{r7, pc}
 800acaa:	bf00      	nop
 800acac:	20000cf0 	.word	0x20000cf0

0800acb0 <wait_spi_tx_event>:

int wait_spi_tx_event(int timeout)
{
 800acb0:	b580      	push	{r7, lr}
 800acb2:	b084      	sub	sp, #16
 800acb4:	af00      	add	r7, sp, #0
 800acb6:	6078      	str	r0, [r7, #4]
#ifdef SEM_WAIT
   return SEM_WAIT(spi_tx_sem, timeout);
#else
  int tickstart = HAL_GetTick();
 800acb8:	f7f7 fdd0 	bl	800285c <HAL_GetTick>
 800acbc:	4603      	mov	r3, r0
 800acbe:	60fb      	str	r3, [r7, #12]
  while (spi_tx_event==1)
 800acc0:	e00a      	b.n	800acd8 <wait_spi_tx_event+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 800acc2:	f7f7 fdcb 	bl	800285c <HAL_GetTick>
 800acc6:	4602      	mov	r2, r0
 800acc8:	68fb      	ldr	r3, [r7, #12]
 800acca:	1ad2      	subs	r2, r2, r3
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	429a      	cmp	r2, r3
 800acd0:	d902      	bls.n	800acd8 <wait_spi_tx_event+0x28>
    {
      return -1;
 800acd2:	f04f 33ff 	mov.w	r3, #4294967295
 800acd6:	e004      	b.n	800ace2 <wait_spi_tx_event+0x32>
  while (spi_tx_event==1)
 800acd8:	4b04      	ldr	r3, [pc, #16]	; (800acec <wait_spi_tx_event+0x3c>)
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	2b01      	cmp	r3, #1
 800acde:	d0f0      	beq.n	800acc2 <wait_spi_tx_event+0x12>
    }
  }
  return 0;
 800ace0:	2300      	movs	r3, #0
#endif
}
 800ace2:	4618      	mov	r0, r3
 800ace4:	3710      	adds	r7, #16
 800ace6:	46bd      	mov	sp, r7
 800ace8:	bd80      	pop	{r7, pc}
 800acea:	bf00      	nop
 800acec:	20000cf4 	.word	0x20000cf4

0800acf0 <SPI_WIFI_ReceiveData>:



int16_t SPI_WIFI_ReceiveData(uint8_t *pData, uint16_t len, uint32_t timeout)
{
 800acf0:	b580      	push	{r7, lr}
 800acf2:	b086      	sub	sp, #24
 800acf4:	af00      	add	r7, sp, #0
 800acf6:	60f8      	str	r0, [r7, #12]
 800acf8:	460b      	mov	r3, r1
 800acfa:	607a      	str	r2, [r7, #4]
 800acfc:	817b      	strh	r3, [r7, #10]
  int16_t length = 0;
 800acfe:	2300      	movs	r3, #0
 800ad00:	82fb      	strh	r3, [r7, #22]
  uint8_t tmp[2];
  
  WIFI_DISABLE_NSS();
 800ad02:	2201      	movs	r2, #1
 800ad04:	2101      	movs	r1, #1
 800ad06:	4834      	ldr	r0, [pc, #208]	; (800add8 <SPI_WIFI_ReceiveData+0xe8>)
 800ad08:	f7f8 fb2e 	bl	8003368 <HAL_GPIO_WritePin>
  UNLOCK_SPI();
  SPI_WIFI_DelayUs(3);
 800ad0c:	2003      	movs	r0, #3
 800ad0e:	f000 f8e3 	bl	800aed8 <SPI_WIFI_DelayUs>


  if (wait_cmddata_rdy_rising_event(timeout)<0)
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	4618      	mov	r0, r3
 800ad16:	f7ff ff8b 	bl	800ac30 <wait_cmddata_rdy_rising_event>
 800ad1a:	4603      	mov	r3, r0
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	da02      	bge.n	800ad26 <SPI_WIFI_ReceiveData+0x36>
  {
      return ES_WIFI_ERROR_WAITING_DRDY_FALLING;
 800ad20:	f06f 0302 	mvn.w	r3, #2
 800ad24:	e054      	b.n	800add0 <SPI_WIFI_ReceiveData+0xe0>
  }

  LOCK_SPI();
  WIFI_ENABLE_NSS();
 800ad26:	2200      	movs	r2, #0
 800ad28:	2101      	movs	r1, #1
 800ad2a:	482b      	ldr	r0, [pc, #172]	; (800add8 <SPI_WIFI_ReceiveData+0xe8>)
 800ad2c:	f7f8 fb1c 	bl	8003368 <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(15);
 800ad30:	200f      	movs	r0, #15
 800ad32:	f000 f8d1 	bl	800aed8 <SPI_WIFI_DelayUs>
  while (WIFI_IS_CMDDATA_READY())
 800ad36:	e03d      	b.n	800adb4 <SPI_WIFI_ReceiveData+0xc4>
  {
    if((length < len) || (!len))
 800ad38:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800ad3c:	897b      	ldrh	r3, [r7, #10]
 800ad3e:	429a      	cmp	r2, r3
 800ad40:	db02      	blt.n	800ad48 <SPI_WIFI_ReceiveData+0x58>
 800ad42:	897b      	ldrh	r3, [r7, #10]
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	d13c      	bne.n	800adc2 <SPI_WIFI_ReceiveData+0xd2>
    {
      spi_rx_event=1;
 800ad48:	4b24      	ldr	r3, [pc, #144]	; (800addc <SPI_WIFI_ReceiveData+0xec>)
 800ad4a:	2201      	movs	r2, #1
 800ad4c:	601a      	str	r2, [r3, #0]
      if (HAL_SPI_Receive_IT(&hspi, tmp, 1) != HAL_OK) {
 800ad4e:	f107 0314 	add.w	r3, r7, #20
 800ad52:	2201      	movs	r2, #1
 800ad54:	4619      	mov	r1, r3
 800ad56:	4822      	ldr	r0, [pc, #136]	; (800ade0 <SPI_WIFI_ReceiveData+0xf0>)
 800ad58:	f7fb fe00 	bl	800695c <HAL_SPI_Receive_IT>
 800ad5c:	4603      	mov	r3, r0
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	d007      	beq.n	800ad72 <SPI_WIFI_ReceiveData+0x82>
        WIFI_DISABLE_NSS();
 800ad62:	2201      	movs	r2, #1
 800ad64:	2101      	movs	r1, #1
 800ad66:	481c      	ldr	r0, [pc, #112]	; (800add8 <SPI_WIFI_ReceiveData+0xe8>)
 800ad68:	f7f8 fafe 	bl	8003368 <HAL_GPIO_WritePin>
        UNLOCK_SPI();
        return ES_WIFI_ERROR_SPI_FAILED;
 800ad6c:	f04f 33ff 	mov.w	r3, #4294967295
 800ad70:	e02e      	b.n	800add0 <SPI_WIFI_ReceiveData+0xe0>
      }
  
      wait_spi_rx_event(timeout);
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	4618      	mov	r0, r3
 800ad76:	f7ff ff7b 	bl	800ac70 <wait_spi_rx_event>

      pData[0] = tmp[0];
 800ad7a:	7d3a      	ldrb	r2, [r7, #20]
 800ad7c:	68fb      	ldr	r3, [r7, #12]
 800ad7e:	701a      	strb	r2, [r3, #0]
      pData[1] = tmp[1];
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	3301      	adds	r3, #1
 800ad84:	7d7a      	ldrb	r2, [r7, #21]
 800ad86:	701a      	strb	r2, [r3, #0]
      length += 2;
 800ad88:	8afb      	ldrh	r3, [r7, #22]
 800ad8a:	3302      	adds	r3, #2
 800ad8c:	b29b      	uxth	r3, r3
 800ad8e:	82fb      	strh	r3, [r7, #22]
      pData  += 2;
 800ad90:	68fb      	ldr	r3, [r7, #12]
 800ad92:	3302      	adds	r3, #2
 800ad94:	60fb      	str	r3, [r7, #12]
      
      if (length >= ES_WIFI_DATA_SIZE) {
 800ad96:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800ad9a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800ad9e:	db09      	blt.n	800adb4 <SPI_WIFI_ReceiveData+0xc4>
        WIFI_DISABLE_NSS();
 800ada0:	2201      	movs	r2, #1
 800ada2:	2101      	movs	r1, #1
 800ada4:	480c      	ldr	r0, [pc, #48]	; (800add8 <SPI_WIFI_ReceiveData+0xe8>)
 800ada6:	f7f8 fadf 	bl	8003368 <HAL_GPIO_WritePin>
        SPI_WIFI_ResetModule();
 800adaa:	f7ff fea5 	bl	800aaf8 <SPI_WIFI_ResetModule>
        UNLOCK_SPI();
        return ES_WIFI_ERROR_STUFFING_FOREVER;
 800adae:	f06f 0303 	mvn.w	r3, #3
 800adb2:	e00d      	b.n	800add0 <SPI_WIFI_ReceiveData+0xe0>
  while (WIFI_IS_CMDDATA_READY())
 800adb4:	2102      	movs	r1, #2
 800adb6:	4808      	ldr	r0, [pc, #32]	; (800add8 <SPI_WIFI_ReceiveData+0xe8>)
 800adb8:	f7f8 fabe 	bl	8003338 <HAL_GPIO_ReadPin>
 800adbc:	4603      	mov	r3, r0
 800adbe:	2b01      	cmp	r3, #1
 800adc0:	d0ba      	beq.n	800ad38 <SPI_WIFI_ReceiveData+0x48>
    else
    {
      break;
    }
  }
  WIFI_DISABLE_NSS();
 800adc2:	2201      	movs	r2, #1
 800adc4:	2101      	movs	r1, #1
 800adc6:	4804      	ldr	r0, [pc, #16]	; (800add8 <SPI_WIFI_ReceiveData+0xe8>)
 800adc8:	f7f8 face 	bl	8003368 <HAL_GPIO_WritePin>
  UNLOCK_SPI();
  return length;
 800adcc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 800add0:	4618      	mov	r0, r3
 800add2:	3718      	adds	r7, #24
 800add4:	46bd      	mov	sp, r7
 800add6:	bd80      	pop	{r7, pc}
 800add8:	48001000 	.word	0x48001000
 800addc:	20000cf0 	.word	0x20000cf0
 800ade0:	20000c8c 	.word	0x20000c8c

0800ade4 <SPI_WIFI_SendData>:
  * @param  len : Data length
  * @param  timeout : send timeout in mS
  * @retval Length of sent data
  */
int16_t SPI_WIFI_SendData( uint8_t *pdata,  uint16_t len, uint32_t timeout)
{
 800ade4:	b580      	push	{r7, lr}
 800ade6:	b086      	sub	sp, #24
 800ade8:	af00      	add	r7, sp, #0
 800adea:	60f8      	str	r0, [r7, #12]
 800adec:	460b      	mov	r3, r1
 800adee:	607a      	str	r2, [r7, #4]
 800adf0:	817b      	strh	r3, [r7, #10]
  uint8_t Padding[2];
  
  if (wait_cmddata_rdy_high(timeout)<0)
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	4618      	mov	r0, r3
 800adf6:	f7ff fef9 	bl	800abec <wait_cmddata_rdy_high>
 800adfa:	4603      	mov	r3, r0
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	da02      	bge.n	800ae06 <SPI_WIFI_SendData+0x22>
  {
    return ES_WIFI_ERROR_SPI_FAILED;
 800ae00:	f04f 33ff 	mov.w	r3, #4294967295
 800ae04:	e04f      	b.n	800aea6 <SPI_WIFI_SendData+0xc2>
  }
    
  /* arm to detect rising event */
  cmddata_rdy_rising_event=1;
 800ae06:	4b2a      	ldr	r3, [pc, #168]	; (800aeb0 <SPI_WIFI_SendData+0xcc>)
 800ae08:	2201      	movs	r2, #1
 800ae0a:	601a      	str	r2, [r3, #0]
  LOCK_SPI();
  WIFI_ENABLE_NSS();
 800ae0c:	2200      	movs	r2, #0
 800ae0e:	2101      	movs	r1, #1
 800ae10:	4828      	ldr	r0, [pc, #160]	; (800aeb4 <SPI_WIFI_SendData+0xd0>)
 800ae12:	f7f8 faa9 	bl	8003368 <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(15);
 800ae16:	200f      	movs	r0, #15
 800ae18:	f000 f85e 	bl	800aed8 <SPI_WIFI_DelayUs>
  if (len > 1)
 800ae1c:	897b      	ldrh	r3, [r7, #10]
 800ae1e:	2b01      	cmp	r3, #1
 800ae20:	d919      	bls.n	800ae56 <SPI_WIFI_SendData+0x72>
  {
    spi_tx_event=1;
 800ae22:	4b25      	ldr	r3, [pc, #148]	; (800aeb8 <SPI_WIFI_SendData+0xd4>)
 800ae24:	2201      	movs	r2, #1
 800ae26:	601a      	str	r2, [r3, #0]
    if( HAL_SPI_Transmit_IT(&hspi, (uint8_t *)pdata , len/2) != HAL_OK)
 800ae28:	897b      	ldrh	r3, [r7, #10]
 800ae2a:	085b      	lsrs	r3, r3, #1
 800ae2c:	b29b      	uxth	r3, r3
 800ae2e:	461a      	mov	r2, r3
 800ae30:	68f9      	ldr	r1, [r7, #12]
 800ae32:	4822      	ldr	r0, [pc, #136]	; (800aebc <SPI_WIFI_SendData+0xd8>)
 800ae34:	f7fb fd04 	bl	8006840 <HAL_SPI_Transmit_IT>
 800ae38:	4603      	mov	r3, r0
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	d007      	beq.n	800ae4e <SPI_WIFI_SendData+0x6a>
    {
      WIFI_DISABLE_NSS();
 800ae3e:	2201      	movs	r2, #1
 800ae40:	2101      	movs	r1, #1
 800ae42:	481c      	ldr	r0, [pc, #112]	; (800aeb4 <SPI_WIFI_SendData+0xd0>)
 800ae44:	f7f8 fa90 	bl	8003368 <HAL_GPIO_WritePin>
      UNLOCK_SPI();
      return ES_WIFI_ERROR_SPI_FAILED;
 800ae48:	f04f 33ff 	mov.w	r3, #4294967295
 800ae4c:	e02b      	b.n	800aea6 <SPI_WIFI_SendData+0xc2>
    }
    wait_spi_tx_event(timeout);
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	4618      	mov	r0, r3
 800ae52:	f7ff ff2d 	bl	800acb0 <wait_spi_tx_event>
  }
  
  if ( len & 1)
 800ae56:	897b      	ldrh	r3, [r7, #10]
 800ae58:	f003 0301 	and.w	r3, r3, #1
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d020      	beq.n	800aea2 <SPI_WIFI_SendData+0xbe>
  {
    Padding[0] = pdata[len-1];
 800ae60:	897b      	ldrh	r3, [r7, #10]
 800ae62:	3b01      	subs	r3, #1
 800ae64:	68fa      	ldr	r2, [r7, #12]
 800ae66:	4413      	add	r3, r2
 800ae68:	781b      	ldrb	r3, [r3, #0]
 800ae6a:	753b      	strb	r3, [r7, #20]
    Padding[1] = '\n';
 800ae6c:	230a      	movs	r3, #10
 800ae6e:	757b      	strb	r3, [r7, #21]

    spi_tx_event=1;
 800ae70:	4b11      	ldr	r3, [pc, #68]	; (800aeb8 <SPI_WIFI_SendData+0xd4>)
 800ae72:	2201      	movs	r2, #1
 800ae74:	601a      	str	r2, [r3, #0]
    if( HAL_SPI_Transmit_IT(&hspi, Padding, 1) != HAL_OK)
 800ae76:	f107 0314 	add.w	r3, r7, #20
 800ae7a:	2201      	movs	r2, #1
 800ae7c:	4619      	mov	r1, r3
 800ae7e:	480f      	ldr	r0, [pc, #60]	; (800aebc <SPI_WIFI_SendData+0xd8>)
 800ae80:	f7fb fcde 	bl	8006840 <HAL_SPI_Transmit_IT>
 800ae84:	4603      	mov	r3, r0
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	d007      	beq.n	800ae9a <SPI_WIFI_SendData+0xb6>
    {
      WIFI_DISABLE_NSS();
 800ae8a:	2201      	movs	r2, #1
 800ae8c:	2101      	movs	r1, #1
 800ae8e:	4809      	ldr	r0, [pc, #36]	; (800aeb4 <SPI_WIFI_SendData+0xd0>)
 800ae90:	f7f8 fa6a 	bl	8003368 <HAL_GPIO_WritePin>
      UNLOCK_SPI();
      return ES_WIFI_ERROR_SPI_FAILED;
 800ae94:	f04f 33ff 	mov.w	r3, #4294967295
 800ae98:	e005      	b.n	800aea6 <SPI_WIFI_SendData+0xc2>
    }  
    wait_spi_tx_event(timeout);
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	4618      	mov	r0, r3
 800ae9e:	f7ff ff07 	bl	800acb0 <wait_spi_tx_event>
    
  }
  return len;
 800aea2:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
}
 800aea6:	4618      	mov	r0, r3
 800aea8:	3718      	adds	r7, #24
 800aeaa:	46bd      	mov	sp, r7
 800aeac:	bd80      	pop	{r7, pc}
 800aeae:	bf00      	nop
 800aeb0:	20000cf8 	.word	0x20000cf8
 800aeb4:	48001000 	.word	0x48001000
 800aeb8:	20000cf4 	.word	0x20000cf4
 800aebc:	20000c8c 	.word	0x20000c8c

0800aec0 <SPI_WIFI_Delay>:
  * @brief  Delay
  * @param  Delay in ms
  * @retval None
  */
void SPI_WIFI_Delay(uint32_t Delay)
{
 800aec0:	b580      	push	{r7, lr}
 800aec2:	b082      	sub	sp, #8
 800aec4:	af00      	add	r7, sp, #0
 800aec6:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800aec8:	6878      	ldr	r0, [r7, #4]
 800aeca:	f7f7 fcd3 	bl	8002874 <HAL_Delay>
}
 800aece:	bf00      	nop
 800aed0:	3708      	adds	r7, #8
 800aed2:	46bd      	mov	sp, r7
 800aed4:	bd80      	pop	{r7, pc}
	...

0800aed8 <SPI_WIFI_DelayUs>:
   * @brief  Delay
  * @param  Delay in us
  * @retval None
  */
void SPI_WIFI_DelayUs(uint32_t n)
{
 800aed8:	b580      	push	{r7, lr}
 800aeda:	b086      	sub	sp, #24
 800aedc:	af00      	add	r7, sp, #0
 800aede:	6078      	str	r0, [r7, #4]
  volatile        uint32_t ct = 0;
 800aee0:	2300      	movs	r3, #0
 800aee2:	60bb      	str	r3, [r7, #8]
  uint32_t        loop_per_us = 0;
 800aee4:	2300      	movs	r3, #0
 800aee6:	617b      	str	r3, [r7, #20]
  static uint32_t cycle_per_loop = 0;

  /* calibration happen on first call for a duration of 1 ms * nbcycle per loop */
  /* 10 cycle for STM32L4 */
  if (cycle_per_loop == 0 ) 
 800aee8:	4b20      	ldr	r3, [pc, #128]	; (800af6c <SPI_WIFI_DelayUs+0x94>)
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	d122      	bne.n	800af36 <SPI_WIFI_DelayUs+0x5e>
  {
     uint32_t cycle_per_ms = (SystemCoreClock/1000UL);
 800aef0:	4b1f      	ldr	r3, [pc, #124]	; (800af70 <SPI_WIFI_DelayUs+0x98>)
 800aef2:	681b      	ldr	r3, [r3, #0]
 800aef4:	4a1f      	ldr	r2, [pc, #124]	; (800af74 <SPI_WIFI_DelayUs+0x9c>)
 800aef6:	fba2 2303 	umull	r2, r3, r2, r3
 800aefa:	099b      	lsrs	r3, r3, #6
 800aefc:	613b      	str	r3, [r7, #16]
     uint32_t t = 0;
 800aefe:	2300      	movs	r3, #0
 800af00:	60fb      	str	r3, [r7, #12]
     ct = cycle_per_ms;
 800af02:	693b      	ldr	r3, [r7, #16]
 800af04:	60bb      	str	r3, [r7, #8]
     t = HAL_GetTick();
 800af06:	f7f7 fca9 	bl	800285c <HAL_GetTick>
 800af0a:	60f8      	str	r0, [r7, #12]
     while(ct) ct--;
 800af0c:	e002      	b.n	800af14 <SPI_WIFI_DelayUs+0x3c>
 800af0e:	68bb      	ldr	r3, [r7, #8]
 800af10:	3b01      	subs	r3, #1
 800af12:	60bb      	str	r3, [r7, #8]
 800af14:	68bb      	ldr	r3, [r7, #8]
 800af16:	2b00      	cmp	r3, #0
 800af18:	d1f9      	bne.n	800af0e <SPI_WIFI_DelayUs+0x36>
     cycle_per_loop = HAL_GetTick()-t;
 800af1a:	f7f7 fc9f 	bl	800285c <HAL_GetTick>
 800af1e:	4602      	mov	r2, r0
 800af20:	68fb      	ldr	r3, [r7, #12]
 800af22:	1ad3      	subs	r3, r2, r3
 800af24:	4a11      	ldr	r2, [pc, #68]	; (800af6c <SPI_WIFI_DelayUs+0x94>)
 800af26:	6013      	str	r3, [r2, #0]
     if (cycle_per_loop == 0) cycle_per_loop = 1;
 800af28:	4b10      	ldr	r3, [pc, #64]	; (800af6c <SPI_WIFI_DelayUs+0x94>)
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d102      	bne.n	800af36 <SPI_WIFI_DelayUs+0x5e>
 800af30:	4b0e      	ldr	r3, [pc, #56]	; (800af6c <SPI_WIFI_DelayUs+0x94>)
 800af32:	2201      	movs	r2, #1
 800af34:	601a      	str	r2, [r3, #0]
  }

  loop_per_us = SystemCoreClock/1000000UL/cycle_per_loop;
 800af36:	4b0e      	ldr	r3, [pc, #56]	; (800af70 <SPI_WIFI_DelayUs+0x98>)
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	4a0f      	ldr	r2, [pc, #60]	; (800af78 <SPI_WIFI_DelayUs+0xa0>)
 800af3c:	fba2 2303 	umull	r2, r3, r2, r3
 800af40:	0c9a      	lsrs	r2, r3, #18
 800af42:	4b0a      	ldr	r3, [pc, #40]	; (800af6c <SPI_WIFI_DelayUs+0x94>)
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	fbb2 f3f3 	udiv	r3, r2, r3
 800af4a:	617b      	str	r3, [r7, #20]
  ct = n * loop_per_us;
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	697a      	ldr	r2, [r7, #20]
 800af50:	fb02 f303 	mul.w	r3, r2, r3
 800af54:	60bb      	str	r3, [r7, #8]
  while(ct) ct--;
 800af56:	e002      	b.n	800af5e <SPI_WIFI_DelayUs+0x86>
 800af58:	68bb      	ldr	r3, [r7, #8]
 800af5a:	3b01      	subs	r3, #1
 800af5c:	60bb      	str	r3, [r7, #8]
 800af5e:	68bb      	ldr	r3, [r7, #8]
 800af60:	2b00      	cmp	r3, #0
 800af62:	d1f9      	bne.n	800af58 <SPI_WIFI_DelayUs+0x80>
  return;
 800af64:	bf00      	nop
}
 800af66:	3718      	adds	r7, #24
 800af68:	46bd      	mov	sp, r7
 800af6a:	bd80      	pop	{r7, pc}
 800af6c:	20000cfc 	.word	0x20000cfc
 800af70:	20000010 	.word	0x20000010
 800af74:	10624dd3 	.word	0x10624dd3
 800af78:	431bde83 	.word	0x431bde83

0800af7c <HAL_SPI_RxCpltCallback>:
  *               the configuration information for SPI module.
  * @retval None
  */

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800af7c:	b480      	push	{r7}
 800af7e:	b083      	sub	sp, #12
 800af80:	af00      	add	r7, sp, #0
 800af82:	6078      	str	r0, [r7, #4]
  if (spi_rx_event)
 800af84:	4b06      	ldr	r3, [pc, #24]	; (800afa0 <HAL_SPI_RxCpltCallback+0x24>)
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	2b00      	cmp	r3, #0
 800af8a:	d002      	beq.n	800af92 <HAL_SPI_RxCpltCallback+0x16>
  {
    SEM_SIGNAL(spi_rx_sem);
    spi_rx_event = 0;
 800af8c:	4b04      	ldr	r3, [pc, #16]	; (800afa0 <HAL_SPI_RxCpltCallback+0x24>)
 800af8e:	2200      	movs	r2, #0
 800af90:	601a      	str	r2, [r3, #0]
  }
}
 800af92:	bf00      	nop
 800af94:	370c      	adds	r7, #12
 800af96:	46bd      	mov	sp, r7
 800af98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af9c:	4770      	bx	lr
 800af9e:	bf00      	nop
 800afa0:	20000cf0 	.word	0x20000cf0

0800afa4 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800afa4:	b480      	push	{r7}
 800afa6:	b083      	sub	sp, #12
 800afa8:	af00      	add	r7, sp, #0
 800afaa:	6078      	str	r0, [r7, #4]
  if (spi_tx_event)
 800afac:	4b06      	ldr	r3, [pc, #24]	; (800afc8 <HAL_SPI_TxCpltCallback+0x24>)
 800afae:	681b      	ldr	r3, [r3, #0]
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	d002      	beq.n	800afba <HAL_SPI_TxCpltCallback+0x16>
  {
    SEM_SIGNAL(spi_tx_sem);
    spi_tx_event = 0;
 800afb4:	4b04      	ldr	r3, [pc, #16]	; (800afc8 <HAL_SPI_TxCpltCallback+0x24>)
 800afb6:	2200      	movs	r2, #0
 800afb8:	601a      	str	r2, [r3, #0]
  }
}
 800afba:	bf00      	nop
 800afbc:	370c      	adds	r7, #12
 800afbe:	46bd      	mov	sp, r7
 800afc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afc4:	4770      	bx	lr
 800afc6:	bf00      	nop
 800afc8:	20000cf4 	.word	0x20000cf4

0800afcc <SPI_WIFI_ISR>:
  * @brief  Interrupt handler for  Data RDY signal
  * @param  None
  * @retval None
  */
void    SPI_WIFI_ISR(void)
{
 800afcc:	b480      	push	{r7}
 800afce:	af00      	add	r7, sp, #0
   if (cmddata_rdy_rising_event==1)  
 800afd0:	4b05      	ldr	r3, [pc, #20]	; (800afe8 <SPI_WIFI_ISR+0x1c>)
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	2b01      	cmp	r3, #1
 800afd6:	d102      	bne.n	800afde <SPI_WIFI_ISR+0x12>
   {
     SEM_SIGNAL(cmddata_rdy_rising_sem);
     cmddata_rdy_rising_event = 0;
 800afd8:	4b03      	ldr	r3, [pc, #12]	; (800afe8 <SPI_WIFI_ISR+0x1c>)
 800afda:	2200      	movs	r2, #0
 800afdc:	601a      	str	r2, [r3, #0]
   }
}
 800afde:	bf00      	nop
 800afe0:	46bd      	mov	sp, r7
 800afe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afe6:	4770      	bx	lr
 800afe8:	20000cf8 	.word	0x20000cf8

0800afec <WIFI_Init>:
  * @brief  Initialize the WIFI core
  * @param  None
  * @retval Operation status
  */
WIFI_Status_t WIFI_Init(void)
{
 800afec:	b580      	push	{r7, lr}
 800afee:	b084      	sub	sp, #16
 800aff0:	af02      	add	r7, sp, #8
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 800aff2:	2301      	movs	r3, #1
 800aff4:	71fb      	strb	r3, [r7, #7]
  
  if(ES_WIFI_RegisterBusIO(&EsWifiObj,
 800aff6:	4b0d      	ldr	r3, [pc, #52]	; (800b02c <WIFI_Init+0x40>)
 800aff8:	9301      	str	r3, [sp, #4]
 800affa:	4b0d      	ldr	r3, [pc, #52]	; (800b030 <WIFI_Init+0x44>)
 800affc:	9300      	str	r3, [sp, #0]
 800affe:	4b0d      	ldr	r3, [pc, #52]	; (800b034 <WIFI_Init+0x48>)
 800b000:	4a0d      	ldr	r2, [pc, #52]	; (800b038 <WIFI_Init+0x4c>)
 800b002:	490e      	ldr	r1, [pc, #56]	; (800b03c <WIFI_Init+0x50>)
 800b004:	480e      	ldr	r0, [pc, #56]	; (800b040 <WIFI_Init+0x54>)
 800b006:	f7ff f8c3 	bl	800a190 <ES_WIFI_RegisterBusIO>
 800b00a:	4603      	mov	r3, r0
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	d107      	bne.n	800b020 <WIFI_Init+0x34>
                           SPI_WIFI_DeInit,
                           SPI_WIFI_Delay,
                           SPI_WIFI_SendData,
                           SPI_WIFI_ReceiveData) == ES_WIFI_STATUS_OK)
  {
    if(ES_WIFI_Init(&EsWifiObj) == ES_WIFI_STATUS_OK)
 800b010:	480b      	ldr	r0, [pc, #44]	; (800b040 <WIFI_Init+0x54>)
 800b012:	f7ff f88f 	bl	800a134 <ES_WIFI_Init>
 800b016:	4603      	mov	r3, r0
 800b018:	2b00      	cmp	r3, #0
 800b01a:	d101      	bne.n	800b020 <WIFI_Init+0x34>
    {
      ret = WIFI_STATUS_OK;
 800b01c:	2300      	movs	r3, #0
 800b01e:	71fb      	strb	r3, [r7, #7]
    }
  }
  return ret;
 800b020:	79fb      	ldrb	r3, [r7, #7]
}
 800b022:	4618      	mov	r0, r3
 800b024:	3708      	adds	r7, #8
 800b026:	46bd      	mov	sp, r7
 800b028:	bd80      	pop	{r7, pc}
 800b02a:	bf00      	nop
 800b02c:	0800acf1 	.word	0x0800acf1
 800b030:	0800ade5 	.word	0x0800ade5
 800b034:	0800aec1 	.word	0x0800aec1
 800b038:	0800abd9 	.word	0x0800abd9
 800b03c:	0800aa3d 	.word	0x0800aa3d
 800b040:	20000d00 	.word	0x20000d00

0800b044 <WIFI_Connect>:
  */
WIFI_Status_t WIFI_Connect(
                             const char* SSID,
                             const char* Password,
                             WIFI_Ecn_t ecn)
{
 800b044:	b580      	push	{r7, lr}
 800b046:	b086      	sub	sp, #24
 800b048:	af00      	add	r7, sp, #0
 800b04a:	60f8      	str	r0, [r7, #12]
 800b04c:	60b9      	str	r1, [r7, #8]
 800b04e:	4613      	mov	r3, r2
 800b050:	71fb      	strb	r3, [r7, #7]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 800b052:	2301      	movs	r3, #1
 800b054:	75fb      	strb	r3, [r7, #23]

  if(ES_WIFI_Connect(&EsWifiObj, SSID, Password, (ES_WIFI_SecurityType_t) ecn) == ES_WIFI_STATUS_OK)
 800b056:	79fb      	ldrb	r3, [r7, #7]
 800b058:	68ba      	ldr	r2, [r7, #8]
 800b05a:	68f9      	ldr	r1, [r7, #12]
 800b05c:	4809      	ldr	r0, [pc, #36]	; (800b084 <WIFI_Connect+0x40>)
 800b05e:	f7ff f8cb 	bl	800a1f8 <ES_WIFI_Connect>
 800b062:	4603      	mov	r3, r0
 800b064:	2b00      	cmp	r3, #0
 800b066:	d107      	bne.n	800b078 <WIFI_Connect+0x34>
  {
    if(ES_WIFI_GetNetworkSettings(&EsWifiObj) == ES_WIFI_STATUS_OK)
 800b068:	4806      	ldr	r0, [pc, #24]	; (800b084 <WIFI_Connect+0x40>)
 800b06a:	f7ff f969 	bl	800a340 <ES_WIFI_GetNetworkSettings>
 800b06e:	4603      	mov	r3, r0
 800b070:	2b00      	cmp	r3, #0
 800b072:	d101      	bne.n	800b078 <WIFI_Connect+0x34>
    {
       ret = WIFI_STATUS_OK;
 800b074:	2300      	movs	r3, #0
 800b076:	75fb      	strb	r3, [r7, #23]
    }
  }
  return ret;
 800b078:	7dfb      	ldrb	r3, [r7, #23]
}
 800b07a:	4618      	mov	r0, r3
 800b07c:	3718      	adds	r7, #24
 800b07e:	46bd      	mov	sp, r7
 800b080:	bd80      	pop	{r7, pc}
 800b082:	bf00      	nop
 800b084:	20000d00 	.word	0x20000d00

0800b088 <WIFI_GetMAC_Address>:
/**
  * @brief  This function retrieves the WiFi interface's MAC address.
  * @retval Operation Status.
  */
WIFI_Status_t WIFI_GetMAC_Address(uint8_t  *mac)
{
 800b088:	b580      	push	{r7, lr}
 800b08a:	b084      	sub	sp, #16
 800b08c:	af00      	add	r7, sp, #0
 800b08e:	6078      	str	r0, [r7, #4]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 800b090:	2301      	movs	r3, #1
 800b092:	73fb      	strb	r3, [r7, #15]
  
  if(ES_WIFI_GetMACAddress(&EsWifiObj, mac) == ES_WIFI_STATUS_OK)
 800b094:	6879      	ldr	r1, [r7, #4]
 800b096:	4806      	ldr	r0, [pc, #24]	; (800b0b0 <WIFI_GetMAC_Address+0x28>)
 800b098:	f7ff f97c 	bl	800a394 <ES_WIFI_GetMACAddress>
 800b09c:	4603      	mov	r3, r0
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	d101      	bne.n	800b0a6 <WIFI_GetMAC_Address+0x1e>
  {
    ret = WIFI_STATUS_OK;
 800b0a2:	2300      	movs	r3, #0
 800b0a4:	73fb      	strb	r3, [r7, #15]
  }
  return ret;
 800b0a6:	7bfb      	ldrb	r3, [r7, #15]
}
 800b0a8:	4618      	mov	r0, r3
 800b0aa:	3710      	adds	r7, #16
 800b0ac:	46bd      	mov	sp, r7
 800b0ae:	bd80      	pop	{r7, pc}
 800b0b0:	20000d00 	.word	0x20000d00

0800b0b4 <WIFI_GetIP_Address>:
/**
  * @brief  This function retrieves the WiFi interface's IP address.
  * @retval Operation Status.
  */
WIFI_Status_t WIFI_GetIP_Address (uint8_t  *ipaddr)
{
 800b0b4:	b580      	push	{r7, lr}
 800b0b6:	b084      	sub	sp, #16
 800b0b8:	af00      	add	r7, sp, #0
 800b0ba:	6078      	str	r0, [r7, #4]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 800b0bc:	2301      	movs	r3, #1
 800b0be:	73fb      	strb	r3, [r7, #15]
  
  if (ES_WIFI_IsConnected(&EsWifiObj) == 1)
 800b0c0:	4809      	ldr	r0, [pc, #36]	; (800b0e8 <WIFI_GetIP_Address+0x34>)
 800b0c2:	f7ff f911 	bl	800a2e8 <ES_WIFI_IsConnected>
 800b0c6:	4603      	mov	r3, r0
 800b0c8:	2b01      	cmp	r3, #1
 800b0ca:	d107      	bne.n	800b0dc <WIFI_GetIP_Address+0x28>
 800b0cc:	4b06      	ldr	r3, [pc, #24]	; (800b0e8 <WIFI_GetIP_Address+0x34>)
 800b0ce:	f8d3 30d5 	ldr.w	r3, [r3, #213]	; 0xd5
 800b0d2:	461a      	mov	r2, r3
  {
    memcpy(ipaddr, EsWifiObj.NetSettings.IP_Addr, 4);
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	601a      	str	r2, [r3, #0]
    ret = WIFI_STATUS_OK;
 800b0d8:	2300      	movs	r3, #0
 800b0da:	73fb      	strb	r3, [r7, #15]
  }
  return ret;
 800b0dc:	7bfb      	ldrb	r3, [r7, #15]
}
 800b0de:	4618      	mov	r0, r3
 800b0e0:	3710      	adds	r7, #16
 800b0e2:	46bd      	mov	sp, r7
 800b0e4:	bd80      	pop	{r7, pc}
 800b0e6:	bf00      	nop
 800b0e8:	20000d00 	.word	0x20000d00

0800b0ec <WIFI_OpenClientConnection>:
  * @param  port : Remote port
  * @param  local_port : Local port
  * @retval Operation status
  */
WIFI_Status_t WIFI_OpenClientConnection(uint32_t socket, WIFI_Protocol_t type, const char *name, uint8_t *ipaddr, uint16_t port, uint16_t local_port)
{
 800b0ec:	b580      	push	{r7, lr}
 800b0ee:	b08a      	sub	sp, #40	; 0x28
 800b0f0:	af00      	add	r7, sp, #0
 800b0f2:	60f8      	str	r0, [r7, #12]
 800b0f4:	607a      	str	r2, [r7, #4]
 800b0f6:	603b      	str	r3, [r7, #0]
 800b0f8:	460b      	mov	r3, r1
 800b0fa:	72fb      	strb	r3, [r7, #11]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 800b0fc:	2301      	movs	r3, #1
 800b0fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  ES_WIFI_Conn_t conn;
  
  conn.Number = socket;
 800b102:	68fb      	ldr	r3, [r7, #12]
 800b104:	b2db      	uxtb	r3, r3
 800b106:	747b      	strb	r3, [r7, #17]
  conn.RemotePort = port;
 800b108:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800b10a:	827b      	strh	r3, [r7, #18]
  conn.LocalPort = local_port;
 800b10c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800b10e:	82bb      	strh	r3, [r7, #20]
  conn.Type = (type == WIFI_TCP_PROTOCOL)? ES_WIFI_TCP_CONNECTION : ES_WIFI_UDP_CONNECTION;
 800b110:	7afb      	ldrb	r3, [r7, #11]
 800b112:	2b00      	cmp	r3, #0
 800b114:	bf14      	ite	ne
 800b116:	2301      	movne	r3, #1
 800b118:	2300      	moveq	r3, #0
 800b11a:	b2db      	uxtb	r3, r3
 800b11c:	743b      	strb	r3, [r7, #16]
  conn.RemoteIP[0] = ipaddr[0];
 800b11e:	683b      	ldr	r3, [r7, #0]
 800b120:	781b      	ldrb	r3, [r3, #0]
 800b122:	75bb      	strb	r3, [r7, #22]
  conn.RemoteIP[1] = ipaddr[1];
 800b124:	683b      	ldr	r3, [r7, #0]
 800b126:	785b      	ldrb	r3, [r3, #1]
 800b128:	75fb      	strb	r3, [r7, #23]
  conn.RemoteIP[2] = ipaddr[2];
 800b12a:	683b      	ldr	r3, [r7, #0]
 800b12c:	789b      	ldrb	r3, [r3, #2]
 800b12e:	763b      	strb	r3, [r7, #24]
  conn.RemoteIP[3] = ipaddr[3];
 800b130:	683b      	ldr	r3, [r7, #0]
 800b132:	78db      	ldrb	r3, [r3, #3]
 800b134:	767b      	strb	r3, [r7, #25]
  if(ES_WIFI_StartClientConnection(&EsWifiObj, &conn)== ES_WIFI_STATUS_OK)
 800b136:	f107 0310 	add.w	r3, r7, #16
 800b13a:	4619      	mov	r1, r3
 800b13c:	4807      	ldr	r0, [pc, #28]	; (800b15c <WIFI_OpenClientConnection+0x70>)
 800b13e:	f7ff f95b 	bl	800a3f8 <ES_WIFI_StartClientConnection>
 800b142:	4603      	mov	r3, r0
 800b144:	2b00      	cmp	r3, #0
 800b146:	d102      	bne.n	800b14e <WIFI_OpenClientConnection+0x62>
  {
    ret = WIFI_STATUS_OK;
 800b148:	2300      	movs	r3, #0
 800b14a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  return ret;
 800b14e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800b152:	4618      	mov	r0, r3
 800b154:	3728      	adds	r7, #40	; 0x28
 800b156:	46bd      	mov	sp, r7
 800b158:	bd80      	pop	{r7, pc}
 800b15a:	bf00      	nop
 800b15c:	20000d00 	.word	0x20000d00

0800b160 <sendMessageVector>:
/*-----------------------------------------------------------*/

static int32_t sendMessageVector( MQTTContext_t * pContext,
                                  TransportOutVector_t * pIoVec,
                                  size_t ioVecCount )
{
 800b160:	b580      	push	{r7, lr}
 800b162:	b08a      	sub	sp, #40	; 0x28
 800b164:	af00      	add	r7, sp, #0
 800b166:	60f8      	str	r0, [r7, #12]
 800b168:	60b9      	str	r1, [r7, #8]
 800b16a:	607a      	str	r2, [r7, #4]
    int32_t sendResult;
    uint32_t timeoutMs;
    TransportOutVector_t * pIoVectIterator;
    size_t vectorsToBeSent = ioVecCount;
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	61fb      	str	r3, [r7, #28]
    size_t bytesToSend = 0U;
 800b170:	2300      	movs	r3, #0
 800b172:	61bb      	str	r3, [r7, #24]
    int32_t bytesSentOrError = 0;
 800b174:	2300      	movs	r3, #0
 800b176:	617b      	str	r3, [r7, #20]

    assert( pContext != NULL );
 800b178:	68fb      	ldr	r3, [r7, #12]
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	d106      	bne.n	800b18c <sendMessageVector+0x2c>
 800b17e:	4b64      	ldr	r3, [pc, #400]	; (800b310 <sendMessageVector+0x1b0>)
 800b180:	4a64      	ldr	r2, [pc, #400]	; (800b314 <sendMessageVector+0x1b4>)
 800b182:	f240 21f2 	movw	r1, #754	; 0x2f2
 800b186:	4864      	ldr	r0, [pc, #400]	; (800b318 <sendMessageVector+0x1b8>)
 800b188:	f007 f9e0 	bl	801254c <__assert_func>
    assert( pIoVec != NULL );
 800b18c:	68bb      	ldr	r3, [r7, #8]
 800b18e:	2b00      	cmp	r3, #0
 800b190:	d106      	bne.n	800b1a0 <sendMessageVector+0x40>
 800b192:	4b62      	ldr	r3, [pc, #392]	; (800b31c <sendMessageVector+0x1bc>)
 800b194:	4a5f      	ldr	r2, [pc, #380]	; (800b314 <sendMessageVector+0x1b4>)
 800b196:	f240 21f3 	movw	r1, #755	; 0x2f3
 800b19a:	485f      	ldr	r0, [pc, #380]	; (800b318 <sendMessageVector+0x1b8>)
 800b19c:	f007 f9d6 	bl	801254c <__assert_func>
    assert( pContext->getTime != NULL );
 800b1a0:	68fb      	ldr	r3, [r7, #12]
 800b1a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	d106      	bne.n	800b1b6 <sendMessageVector+0x56>
 800b1a8:	4b5d      	ldr	r3, [pc, #372]	; (800b320 <sendMessageVector+0x1c0>)
 800b1aa:	4a5a      	ldr	r2, [pc, #360]	; (800b314 <sendMessageVector+0x1b4>)
 800b1ac:	f44f 713d 	mov.w	r1, #756	; 0x2f4
 800b1b0:	4859      	ldr	r0, [pc, #356]	; (800b318 <sendMessageVector+0x1b8>)
 800b1b2:	f007 f9cb 	bl	801254c <__assert_func>
    /* Send must always be defined */
    assert( pContext->transportInterface.send != NULL );
 800b1b6:	68fb      	ldr	r3, [r7, #12]
 800b1b8:	695b      	ldr	r3, [r3, #20]
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	d106      	bne.n	800b1cc <sendMessageVector+0x6c>
 800b1be:	4b59      	ldr	r3, [pc, #356]	; (800b324 <sendMessageVector+0x1c4>)
 800b1c0:	4a54      	ldr	r2, [pc, #336]	; (800b314 <sendMessageVector+0x1b4>)
 800b1c2:	f240 21f6 	movw	r1, #758	; 0x2f6
 800b1c6:	4854      	ldr	r0, [pc, #336]	; (800b318 <sendMessageVector+0x1b8>)
 800b1c8:	f007 f9c0 	bl	801254c <__assert_func>

    /* Count the total number of bytes to be sent as outlined in the vector. */
    for( pIoVectIterator = pIoVec; pIoVectIterator <= &( pIoVec[ ioVecCount - 1U ] ); pIoVectIterator++ )
 800b1cc:	68bb      	ldr	r3, [r7, #8]
 800b1ce:	623b      	str	r3, [r7, #32]
 800b1d0:	e007      	b.n	800b1e2 <sendMessageVector+0x82>
    {
        bytesToSend += pIoVectIterator->iov_len;
 800b1d2:	6a3b      	ldr	r3, [r7, #32]
 800b1d4:	685b      	ldr	r3, [r3, #4]
 800b1d6:	69ba      	ldr	r2, [r7, #24]
 800b1d8:	4413      	add	r3, r2
 800b1da:	61bb      	str	r3, [r7, #24]
    for( pIoVectIterator = pIoVec; pIoVectIterator <= &( pIoVec[ ioVecCount - 1U ] ); pIoVectIterator++ )
 800b1dc:	6a3b      	ldr	r3, [r7, #32]
 800b1de:	3308      	adds	r3, #8
 800b1e0:	623b      	str	r3, [r7, #32]
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800b1e8:	3b01      	subs	r3, #1
 800b1ea:	00db      	lsls	r3, r3, #3
 800b1ec:	68ba      	ldr	r2, [r7, #8]
 800b1ee:	4413      	add	r3, r2
 800b1f0:	6a3a      	ldr	r2, [r7, #32]
 800b1f2:	429a      	cmp	r2, r3
 800b1f4:	d9ed      	bls.n	800b1d2 <sendMessageVector+0x72>
    }

    /* Reset the iterator to point to the first entry in the array. */
    pIoVectIterator = pIoVec;
 800b1f6:	68bb      	ldr	r3, [r7, #8]
 800b1f8:	623b      	str	r3, [r7, #32]

    /* Set the timeout. */
    timeoutMs = pContext->getTime() + MQTT_SEND_TIMEOUT_MS;
 800b1fa:	68fb      	ldr	r3, [r7, #12]
 800b1fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1fe:	4798      	blx	r3
 800b200:	4603      	mov	r3, r0
 800b202:	f503 439c 	add.w	r3, r3, #19968	; 0x4e00
 800b206:	3320      	adds	r3, #32
 800b208:	613b      	str	r3, [r7, #16]

    while( ( bytesSentOrError < ( int32_t ) bytesToSend ) && ( bytesSentOrError >= 0 ) )
 800b20a:	e073      	b.n	800b2f4 <sendMessageVector+0x194>
    {
        if( pContext->transportInterface.writev != NULL )
 800b20c:	68fb      	ldr	r3, [r7, #12]
 800b20e:	699b      	ldr	r3, [r3, #24]
 800b210:	2b00      	cmp	r3, #0
 800b212:	d008      	beq.n	800b226 <sendMessageVector+0xc6>
        {
            sendResult = pContext->transportInterface.writev( pContext->transportInterface.pNetworkContext,
 800b214:	68fb      	ldr	r3, [r7, #12]
 800b216:	699b      	ldr	r3, [r3, #24]
 800b218:	68fa      	ldr	r2, [r7, #12]
 800b21a:	69d0      	ldr	r0, [r2, #28]
 800b21c:	69fa      	ldr	r2, [r7, #28]
 800b21e:	6a39      	ldr	r1, [r7, #32]
 800b220:	4798      	blx	r3
 800b222:	6278      	str	r0, [r7, #36]	; 0x24
 800b224:	e009      	b.n	800b23a <sendMessageVector+0xda>
                                                              pIoVectIterator,
                                                              vectorsToBeSent );
        }
        else
        {
            sendResult = pContext->transportInterface.send( pContext->transportInterface.pNetworkContext,
 800b226:	68fb      	ldr	r3, [r7, #12]
 800b228:	695b      	ldr	r3, [r3, #20]
 800b22a:	68fa      	ldr	r2, [r7, #12]
 800b22c:	69d0      	ldr	r0, [r2, #28]
 800b22e:	6a3a      	ldr	r2, [r7, #32]
 800b230:	6811      	ldr	r1, [r2, #0]
 800b232:	6a3a      	ldr	r2, [r7, #32]
 800b234:	6852      	ldr	r2, [r2, #4]
 800b236:	4798      	blx	r3
 800b238:	6278      	str	r0, [r7, #36]	; 0x24
                                                            pIoVectIterator->iov_base,
                                                            pIoVectIterator->iov_len );
        }

        if( sendResult > 0 )
 800b23a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	dd17      	ble.n	800b270 <sendMessageVector+0x110>
        {
            /* It is a bug in the application's transport send implementation if
             * more bytes than expected are sent. */
            assert( sendResult <= ( ( int32_t ) bytesToSend - bytesSentOrError ) );
 800b240:	69ba      	ldr	r2, [r7, #24]
 800b242:	697b      	ldr	r3, [r7, #20]
 800b244:	1ad3      	subs	r3, r2, r3
 800b246:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b248:	429a      	cmp	r2, r3
 800b24a:	dd06      	ble.n	800b25a <sendMessageVector+0xfa>
 800b24c:	4b36      	ldr	r3, [pc, #216]	; (800b328 <sendMessageVector+0x1c8>)
 800b24e:	4a31      	ldr	r2, [pc, #196]	; (800b314 <sendMessageVector+0x1b4>)
 800b250:	f240 3117 	movw	r1, #791	; 0x317
 800b254:	4830      	ldr	r0, [pc, #192]	; (800b318 <sendMessageVector+0x1b8>)
 800b256:	f007 f979 	bl	801254c <__assert_func>

            bytesSentOrError += sendResult;
 800b25a:	697a      	ldr	r2, [r7, #20]
 800b25c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b25e:	4413      	add	r3, r2
 800b260:	617b      	str	r3, [r7, #20]

            /* Set last transmission time. */
            pContext->lastPacketTxTime = pContext->getTime();
 800b262:	68fb      	ldr	r3, [r7, #12]
 800b264:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b266:	4798      	blx	r3
 800b268:	4602      	mov	r2, r0
 800b26a:	68fb      	ldr	r3, [r7, #12]
 800b26c:	635a      	str	r2, [r3, #52]	; 0x34
 800b26e:	e004      	b.n	800b27a <sendMessageVector+0x11a>

            LogDebug( ( "sendMessageVector: Bytes Sent=%ld, Bytes Remaining=%lu",
                        ( long int ) sendResult,
                        ( unsigned long ) ( bytesToSend - ( size_t ) bytesSentOrError ) ) );
        }
        else if( sendResult < 0 )
 800b270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b272:	2b00      	cmp	r3, #0
 800b274:	da01      	bge.n	800b27a <sendMessageVector+0x11a>
        {
            bytesSentOrError = sendResult;
 800b276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b278:	617b      	str	r3, [r7, #20]
        {
            /* MISRA Empty body */
        }

        /* Check for timeout. */
        if( pContext->getTime() >= timeoutMs )
 800b27a:	68fb      	ldr	r3, [r7, #12]
 800b27c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b27e:	4798      	blx	r3
 800b280:	4602      	mov	r2, r0
 800b282:	693b      	ldr	r3, [r7, #16]
 800b284:	4293      	cmp	r3, r2
 800b286:	d93d      	bls.n	800b304 <sendMessageVector+0x1a4>
            LogError( ( "sendMessageVector: Unable to send packet: Timed out." ) );
            break;
        }

        /* Update the send pointer to the correct vector and offset. */
        while( ( pIoVectIterator <= &( pIoVec[ ioVecCount - 1U ] ) ) &&
 800b288:	e00b      	b.n	800b2a2 <sendMessageVector+0x142>
               ( sendResult >= ( int32_t ) pIoVectIterator->iov_len ) )
        {
            sendResult -= ( int32_t ) pIoVectIterator->iov_len;
 800b28a:	6a3b      	ldr	r3, [r7, #32]
 800b28c:	685b      	ldr	r3, [r3, #4]
 800b28e:	461a      	mov	r2, r3
 800b290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b292:	1a9b      	subs	r3, r3, r2
 800b294:	627b      	str	r3, [r7, #36]	; 0x24
            pIoVectIterator++;
 800b296:	6a3b      	ldr	r3, [r7, #32]
 800b298:	3308      	adds	r3, #8
 800b29a:	623b      	str	r3, [r7, #32]
            /* Update the number of vector which are yet to be sent. */
            vectorsToBeSent--;
 800b29c:	69fb      	ldr	r3, [r7, #28]
 800b29e:	3b01      	subs	r3, #1
 800b2a0:	61fb      	str	r3, [r7, #28]
        while( ( pIoVectIterator <= &( pIoVec[ ioVecCount - 1U ] ) ) &&
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800b2a8:	3b01      	subs	r3, #1
 800b2aa:	00db      	lsls	r3, r3, #3
 800b2ac:	68ba      	ldr	r2, [r7, #8]
 800b2ae:	4413      	add	r3, r2
 800b2b0:	6a3a      	ldr	r2, [r7, #32]
 800b2b2:	429a      	cmp	r2, r3
 800b2b4:	d805      	bhi.n	800b2c2 <sendMessageVector+0x162>
               ( sendResult >= ( int32_t ) pIoVectIterator->iov_len ) )
 800b2b6:	6a3b      	ldr	r3, [r7, #32]
 800b2b8:	685b      	ldr	r3, [r3, #4]
 800b2ba:	461a      	mov	r2, r3
        while( ( pIoVectIterator <= &( pIoVec[ ioVecCount - 1U ] ) ) &&
 800b2bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2be:	4293      	cmp	r3, r2
 800b2c0:	dae3      	bge.n	800b28a <sendMessageVector+0x12a>
        }

        /* Some of the bytes from this vector were sent as well, update the length
         * and the pointer to data in this vector. */
        if( ( sendResult > 0 ) &&
 800b2c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	dd15      	ble.n	800b2f4 <sendMessageVector+0x194>
            ( pIoVectIterator <= &( pIoVec[ ioVecCount - 1U ] ) ) )
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800b2ce:	3b01      	subs	r3, #1
 800b2d0:	00db      	lsls	r3, r3, #3
 800b2d2:	68ba      	ldr	r2, [r7, #8]
 800b2d4:	4413      	add	r3, r2
        if( ( sendResult > 0 ) &&
 800b2d6:	6a3a      	ldr	r2, [r7, #32]
 800b2d8:	429a      	cmp	r2, r3
 800b2da:	d80b      	bhi.n	800b2f4 <sendMessageVector+0x194>
        {
            pIoVectIterator->iov_base = ( const void * ) &( ( ( const uint8_t * ) pIoVectIterator->iov_base )[ sendResult ] );
 800b2dc:	6a3b      	ldr	r3, [r7, #32]
 800b2de:	681a      	ldr	r2, [r3, #0]
 800b2e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2e2:	441a      	add	r2, r3
 800b2e4:	6a3b      	ldr	r3, [r7, #32]
 800b2e6:	601a      	str	r2, [r3, #0]
            pIoVectIterator->iov_len -= ( size_t ) sendResult;
 800b2e8:	6a3b      	ldr	r3, [r7, #32]
 800b2ea:	685a      	ldr	r2, [r3, #4]
 800b2ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2ee:	1ad2      	subs	r2, r2, r3
 800b2f0:	6a3b      	ldr	r3, [r7, #32]
 800b2f2:	605a      	str	r2, [r3, #4]
    while( ( bytesSentOrError < ( int32_t ) bytesToSend ) && ( bytesSentOrError >= 0 ) )
 800b2f4:	69bb      	ldr	r3, [r7, #24]
 800b2f6:	697a      	ldr	r2, [r7, #20]
 800b2f8:	429a      	cmp	r2, r3
 800b2fa:	da04      	bge.n	800b306 <sendMessageVector+0x1a6>
 800b2fc:	697b      	ldr	r3, [r7, #20]
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	da84      	bge.n	800b20c <sendMessageVector+0xac>
 800b302:	e000      	b.n	800b306 <sendMessageVector+0x1a6>
            break;
 800b304:	bf00      	nop
        }
    }

    return bytesSentOrError;
 800b306:	697b      	ldr	r3, [r7, #20]
}
 800b308:	4618      	mov	r0, r3
 800b30a:	3728      	adds	r7, #40	; 0x28
 800b30c:	46bd      	mov	sp, r7
 800b30e:	bd80      	pop	{r7, pc}
 800b310:	08014b4c 	.word	0x08014b4c
 800b314:	080156b0 	.word	0x080156b0
 800b318:	08014a70 	.word	0x08014a70
 800b31c:	08014b60 	.word	0x08014b60
 800b320:	08014b70 	.word	0x08014b70
 800b324:	08014b8c 	.word	0x08014b8c
 800b328:	08014bb8 	.word	0x08014bb8

0800b32c <sendBuffer>:

static int32_t sendBuffer( MQTTContext_t * pContext,
                           const uint8_t * pBufferToSend,
                           size_t bytesToSend )
{
 800b32c:	b580      	push	{r7, lr}
 800b32e:	b088      	sub	sp, #32
 800b330:	af00      	add	r7, sp, #0
 800b332:	60f8      	str	r0, [r7, #12]
 800b334:	60b9      	str	r1, [r7, #8]
 800b336:	607a      	str	r2, [r7, #4]
    int32_t sendResult;
    uint32_t timeoutMs;
    int32_t bytesSentOrError = 0;
 800b338:	2300      	movs	r3, #0
 800b33a:	61fb      	str	r3, [r7, #28]
    const uint8_t * pIndex = pBufferToSend;
 800b33c:	68bb      	ldr	r3, [r7, #8]
 800b33e:	61bb      	str	r3, [r7, #24]

    assert( pContext != NULL );
 800b340:	68fb      	ldr	r3, [r7, #12]
 800b342:	2b00      	cmp	r3, #0
 800b344:	d106      	bne.n	800b354 <sendBuffer+0x28>
 800b346:	4b39      	ldr	r3, [pc, #228]	; (800b42c <sendBuffer+0x100>)
 800b348:	4a39      	ldr	r2, [pc, #228]	; (800b430 <sendBuffer+0x104>)
 800b34a:	f240 3153 	movw	r1, #851	; 0x353
 800b34e:	4839      	ldr	r0, [pc, #228]	; (800b434 <sendBuffer+0x108>)
 800b350:	f007 f8fc 	bl	801254c <__assert_func>
    assert( pContext->getTime != NULL );
 800b354:	68fb      	ldr	r3, [r7, #12]
 800b356:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b358:	2b00      	cmp	r3, #0
 800b35a:	d106      	bne.n	800b36a <sendBuffer+0x3e>
 800b35c:	4b36      	ldr	r3, [pc, #216]	; (800b438 <sendBuffer+0x10c>)
 800b35e:	4a34      	ldr	r2, [pc, #208]	; (800b430 <sendBuffer+0x104>)
 800b360:	f44f 7155 	mov.w	r1, #852	; 0x354
 800b364:	4833      	ldr	r0, [pc, #204]	; (800b434 <sendBuffer+0x108>)
 800b366:	f007 f8f1 	bl	801254c <__assert_func>
    assert( pContext->transportInterface.send != NULL );
 800b36a:	68fb      	ldr	r3, [r7, #12]
 800b36c:	695b      	ldr	r3, [r3, #20]
 800b36e:	2b00      	cmp	r3, #0
 800b370:	d106      	bne.n	800b380 <sendBuffer+0x54>
 800b372:	4b32      	ldr	r3, [pc, #200]	; (800b43c <sendBuffer+0x110>)
 800b374:	4a2e      	ldr	r2, [pc, #184]	; (800b430 <sendBuffer+0x104>)
 800b376:	f240 3155 	movw	r1, #853	; 0x355
 800b37a:	482e      	ldr	r0, [pc, #184]	; (800b434 <sendBuffer+0x108>)
 800b37c:	f007 f8e6 	bl	801254c <__assert_func>
    assert( pIndex != NULL );
 800b380:	69bb      	ldr	r3, [r7, #24]
 800b382:	2b00      	cmp	r3, #0
 800b384:	d106      	bne.n	800b394 <sendBuffer+0x68>
 800b386:	4b2e      	ldr	r3, [pc, #184]	; (800b440 <sendBuffer+0x114>)
 800b388:	4a29      	ldr	r2, [pc, #164]	; (800b430 <sendBuffer+0x104>)
 800b38a:	f240 3156 	movw	r1, #854	; 0x356
 800b38e:	4829      	ldr	r0, [pc, #164]	; (800b434 <sendBuffer+0x108>)
 800b390:	f007 f8dc 	bl	801254c <__assert_func>

    /* Set the timeout. */
    timeoutMs = pContext->getTime() + MQTT_SEND_TIMEOUT_MS;
 800b394:	68fb      	ldr	r3, [r7, #12]
 800b396:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b398:	4798      	blx	r3
 800b39a:	4603      	mov	r3, r0
 800b39c:	f503 439c 	add.w	r3, r3, #19968	; 0x4e00
 800b3a0:	3320      	adds	r3, #32
 800b3a2:	617b      	str	r3, [r7, #20]

    while( ( bytesSentOrError < ( int32_t ) bytesToSend ) && ( bytesSentOrError >= 0 ) )
 800b3a4:	e034      	b.n	800b410 <sendBuffer+0xe4>
    {
        sendResult = pContext->transportInterface.send( pContext->transportInterface.pNetworkContext,
 800b3a6:	68fb      	ldr	r3, [r7, #12]
 800b3a8:	695b      	ldr	r3, [r3, #20]
 800b3aa:	68fa      	ldr	r2, [r7, #12]
 800b3ac:	69d0      	ldr	r0, [r2, #28]
                                                        pIndex,
                                                        bytesToSend - ( size_t ) bytesSentOrError );
 800b3ae:	69fa      	ldr	r2, [r7, #28]
        sendResult = pContext->transportInterface.send( pContext->transportInterface.pNetworkContext,
 800b3b0:	6879      	ldr	r1, [r7, #4]
 800b3b2:	1a8a      	subs	r2, r1, r2
 800b3b4:	69b9      	ldr	r1, [r7, #24]
 800b3b6:	4798      	blx	r3
 800b3b8:	6138      	str	r0, [r7, #16]

        if( sendResult > 0 )
 800b3ba:	693b      	ldr	r3, [r7, #16]
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	dd1b      	ble.n	800b3f8 <sendBuffer+0xcc>
        {
            /* It is a bug in the application's transport send implementation if
             * more bytes than expected are sent. */
            assert( sendResult <= ( ( int32_t ) bytesToSend - bytesSentOrError ) );
 800b3c0:	687a      	ldr	r2, [r7, #4]
 800b3c2:	69fb      	ldr	r3, [r7, #28]
 800b3c4:	1ad3      	subs	r3, r2, r3
 800b3c6:	693a      	ldr	r2, [r7, #16]
 800b3c8:	429a      	cmp	r2, r3
 800b3ca:	dd06      	ble.n	800b3da <sendBuffer+0xae>
 800b3cc:	4b1d      	ldr	r3, [pc, #116]	; (800b444 <sendBuffer+0x118>)
 800b3ce:	4a18      	ldr	r2, [pc, #96]	; (800b430 <sendBuffer+0x104>)
 800b3d0:	f240 3165 	movw	r1, #869	; 0x365
 800b3d4:	4817      	ldr	r0, [pc, #92]	; (800b434 <sendBuffer+0x108>)
 800b3d6:	f007 f8b9 	bl	801254c <__assert_func>

            bytesSentOrError += sendResult;
 800b3da:	69fa      	ldr	r2, [r7, #28]
 800b3dc:	693b      	ldr	r3, [r7, #16]
 800b3de:	4413      	add	r3, r2
 800b3e0:	61fb      	str	r3, [r7, #28]
            pIndex = &pIndex[ sendResult ];
 800b3e2:	693b      	ldr	r3, [r7, #16]
 800b3e4:	69ba      	ldr	r2, [r7, #24]
 800b3e6:	4413      	add	r3, r2
 800b3e8:	61bb      	str	r3, [r7, #24]

            /* Set last transmission time. */
            pContext->lastPacketTxTime = pContext->getTime();
 800b3ea:	68fb      	ldr	r3, [r7, #12]
 800b3ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3ee:	4798      	blx	r3
 800b3f0:	4602      	mov	r2, r0
 800b3f2:	68fb      	ldr	r3, [r7, #12]
 800b3f4:	635a      	str	r2, [r3, #52]	; 0x34
 800b3f6:	e004      	b.n	800b402 <sendBuffer+0xd6>

            LogDebug( ( "sendBuffer: Bytes Sent=%ld, Bytes Remaining=%lu",
                        ( long int ) sendResult,
                        ( unsigned long ) ( bytesToSend - ( size_t ) bytesSentOrError ) ) );
        }
        else if( sendResult < 0 )
 800b3f8:	693b      	ldr	r3, [r7, #16]
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	da01      	bge.n	800b402 <sendBuffer+0xd6>
        {
            bytesSentOrError = sendResult;
 800b3fe:	693b      	ldr	r3, [r7, #16]
 800b400:	61fb      	str	r3, [r7, #28]
        {
            /* MISRA Empty body */
        }

        /* Check for timeout. */
        if( pContext->getTime() >= timeoutMs )
 800b402:	68fb      	ldr	r3, [r7, #12]
 800b404:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b406:	4798      	blx	r3
 800b408:	4602      	mov	r2, r0
 800b40a:	697b      	ldr	r3, [r7, #20]
 800b40c:	4293      	cmp	r3, r2
 800b40e:	d907      	bls.n	800b420 <sendBuffer+0xf4>
    while( ( bytesSentOrError < ( int32_t ) bytesToSend ) && ( bytesSentOrError >= 0 ) )
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	69fa      	ldr	r2, [r7, #28]
 800b414:	429a      	cmp	r2, r3
 800b416:	da04      	bge.n	800b422 <sendBuffer+0xf6>
 800b418:	69fb      	ldr	r3, [r7, #28]
 800b41a:	2b00      	cmp	r3, #0
 800b41c:	dac3      	bge.n	800b3a6 <sendBuffer+0x7a>
 800b41e:	e000      	b.n	800b422 <sendBuffer+0xf6>
        {
            LogError( ( "sendBuffer: Unable to send packet: Timed out." ) );
            break;
 800b420:	bf00      	nop
        }
    }

    return bytesSentOrError;
 800b422:	69fb      	ldr	r3, [r7, #28]
}
 800b424:	4618      	mov	r0, r3
 800b426:	3720      	adds	r7, #32
 800b428:	46bd      	mov	sp, r7
 800b42a:	bd80      	pop	{r7, pc}
 800b42c:	08014b4c 	.word	0x08014b4c
 800b430:	080156c4 	.word	0x080156c4
 800b434:	08014a70 	.word	0x08014a70
 800b438:	08014b70 	.word	0x08014b70
 800b43c:	08014b8c 	.word	0x08014b8c
 800b440:	08014bf8 	.word	0x08014bf8
 800b444:	08014bb8 	.word	0x08014bb8

0800b448 <calculateElapsedTime>:

/*-----------------------------------------------------------*/

static uint32_t calculateElapsedTime( uint32_t later,
                                      uint32_t start )
{
 800b448:	b480      	push	{r7}
 800b44a:	b083      	sub	sp, #12
 800b44c:	af00      	add	r7, sp, #0
 800b44e:	6078      	str	r0, [r7, #4]
 800b450:	6039      	str	r1, [r7, #0]
    return later - start;
 800b452:	687a      	ldr	r2, [r7, #4]
 800b454:	683b      	ldr	r3, [r7, #0]
 800b456:	1ad3      	subs	r3, r2, r3
}
 800b458:	4618      	mov	r0, r3
 800b45a:	370c      	adds	r7, #12
 800b45c:	46bd      	mov	sp, r7
 800b45e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b462:	4770      	bx	lr

0800b464 <getAckFromPacketType>:

/*-----------------------------------------------------------*/

static MQTTPubAckType_t getAckFromPacketType( uint8_t packetType )
{
 800b464:	b580      	push	{r7, lr}
 800b466:	b084      	sub	sp, #16
 800b468:	af00      	add	r7, sp, #0
 800b46a:	4603      	mov	r3, r0
 800b46c:	71fb      	strb	r3, [r7, #7]
    MQTTPubAckType_t ackType = MQTTPuback;
 800b46e:	2300      	movs	r3, #0
 800b470:	73fb      	strb	r3, [r7, #15]

    switch( packetType )
 800b472:	79fb      	ldrb	r3, [r7, #7]
 800b474:	2b62      	cmp	r3, #98	; 0x62
 800b476:	d00c      	beq.n	800b492 <getAckFromPacketType+0x2e>
 800b478:	2b62      	cmp	r3, #98	; 0x62
 800b47a:	dc0d      	bgt.n	800b498 <getAckFromPacketType+0x34>
 800b47c:	2b40      	cmp	r3, #64	; 0x40
 800b47e:	d002      	beq.n	800b486 <getAckFromPacketType+0x22>
 800b480:	2b50      	cmp	r3, #80	; 0x50
 800b482:	d003      	beq.n	800b48c <getAckFromPacketType+0x28>
 800b484:	e008      	b.n	800b498 <getAckFromPacketType+0x34>
    {
        case MQTT_PACKET_TYPE_PUBACK:
            ackType = MQTTPuback;
 800b486:	2300      	movs	r3, #0
 800b488:	73fb      	strb	r3, [r7, #15]
            break;
 800b48a:	e012      	b.n	800b4b2 <getAckFromPacketType+0x4e>

        case MQTT_PACKET_TYPE_PUBREC:
            ackType = MQTTPubrec;
 800b48c:	2301      	movs	r3, #1
 800b48e:	73fb      	strb	r3, [r7, #15]
            break;
 800b490:	e00f      	b.n	800b4b2 <getAckFromPacketType+0x4e>

        case MQTT_PACKET_TYPE_PUBREL:
            ackType = MQTTPubrel;
 800b492:	2302      	movs	r3, #2
 800b494:	73fb      	strb	r3, [r7, #15]
            break;
 800b496:	e00c      	b.n	800b4b2 <getAckFromPacketType+0x4e>
        case MQTT_PACKET_TYPE_PUBCOMP:
        default:

            /* This function is only called after checking the type is one of
             * the above four values, so packet type must be PUBCOMP here. */
            assert( packetType == MQTT_PACKET_TYPE_PUBCOMP );
 800b498:	79fb      	ldrb	r3, [r7, #7]
 800b49a:	2b70      	cmp	r3, #112	; 0x70
 800b49c:	d006      	beq.n	800b4ac <getAckFromPacketType+0x48>
 800b49e:	4b07      	ldr	r3, [pc, #28]	; (800b4bc <getAckFromPacketType+0x58>)
 800b4a0:	4a07      	ldr	r2, [pc, #28]	; (800b4c0 <getAckFromPacketType+0x5c>)
 800b4a2:	f240 31a7 	movw	r1, #935	; 0x3a7
 800b4a6:	4807      	ldr	r0, [pc, #28]	; (800b4c4 <getAckFromPacketType+0x60>)
 800b4a8:	f007 f850 	bl	801254c <__assert_func>
            ackType = MQTTPubcomp;
 800b4ac:	2303      	movs	r3, #3
 800b4ae:	73fb      	strb	r3, [r7, #15]
            break;
 800b4b0:	bf00      	nop
    }

    return ackType;
 800b4b2:	7bfb      	ldrb	r3, [r7, #15]
}
 800b4b4:	4618      	mov	r0, r3
 800b4b6:	3710      	adds	r7, #16
 800b4b8:	46bd      	mov	sp, r7
 800b4ba:	bd80      	pop	{r7, pc}
 800b4bc:	08014c08 	.word	0x08014c08
 800b4c0:	080156d0 	.word	0x080156d0
 800b4c4:	08014a70 	.word	0x08014a70

0800b4c8 <recvExact>:

/*-----------------------------------------------------------*/

static int32_t recvExact( const MQTTContext_t * pContext,
                          size_t bytesToRecv )
{
 800b4c8:	b580      	push	{r7, lr}
 800b4ca:	b08c      	sub	sp, #48	; 0x30
 800b4cc:	af00      	add	r7, sp, #0
 800b4ce:	6078      	str	r0, [r7, #4]
 800b4d0:	6039      	str	r1, [r7, #0]
    uint8_t * pIndex = NULL;
 800b4d2:	2300      	movs	r3, #0
 800b4d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    size_t bytesRemaining = bytesToRecv;
 800b4d6:	683b      	ldr	r3, [r7, #0]
 800b4d8:	62bb      	str	r3, [r7, #40]	; 0x28
    int32_t totalBytesRecvd = 0, bytesRecvd;
 800b4da:	2300      	movs	r3, #0
 800b4dc:	627b      	str	r3, [r7, #36]	; 0x24
    uint32_t lastDataRecvTimeMs = 0U, timeSinceLastRecvMs = 0U;
 800b4de:	2300      	movs	r3, #0
 800b4e0:	623b      	str	r3, [r7, #32]
 800b4e2:	2300      	movs	r3, #0
 800b4e4:	61bb      	str	r3, [r7, #24]
    TransportRecv_t recvFunc = NULL;
 800b4e6:	2300      	movs	r3, #0
 800b4e8:	617b      	str	r3, [r7, #20]
    MQTTGetCurrentTimeFunc_t getTimeStampMs = NULL;
 800b4ea:	2300      	movs	r3, #0
 800b4ec:	613b      	str	r3, [r7, #16]
    bool receiveError = false;
 800b4ee:	2300      	movs	r3, #0
 800b4f0:	77fb      	strb	r3, [r7, #31]

    assert( pContext != NULL );
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	2b00      	cmp	r3, #0
 800b4f6:	d106      	bne.n	800b506 <recvExact+0x3e>
 800b4f8:	4b44      	ldr	r3, [pc, #272]	; (800b60c <recvExact+0x144>)
 800b4fa:	4a45      	ldr	r2, [pc, #276]	; (800b610 <recvExact+0x148>)
 800b4fc:	f44f 716f 	mov.w	r1, #956	; 0x3bc
 800b500:	4844      	ldr	r0, [pc, #272]	; (800b614 <recvExact+0x14c>)
 800b502:	f007 f823 	bl	801254c <__assert_func>
    assert( bytesToRecv <= pContext->networkBuffer.size );
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b50a:	683a      	ldr	r2, [r7, #0]
 800b50c:	429a      	cmp	r2, r3
 800b50e:	d906      	bls.n	800b51e <recvExact+0x56>
 800b510:	4b41      	ldr	r3, [pc, #260]	; (800b618 <recvExact+0x150>)
 800b512:	4a3f      	ldr	r2, [pc, #252]	; (800b610 <recvExact+0x148>)
 800b514:	f240 31bd 	movw	r1, #957	; 0x3bd
 800b518:	483e      	ldr	r0, [pc, #248]	; (800b614 <recvExact+0x14c>)
 800b51a:	f007 f817 	bl	801254c <__assert_func>
    assert( pContext->getTime != NULL );
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b522:	2b00      	cmp	r3, #0
 800b524:	d106      	bne.n	800b534 <recvExact+0x6c>
 800b526:	4b3d      	ldr	r3, [pc, #244]	; (800b61c <recvExact+0x154>)
 800b528:	4a39      	ldr	r2, [pc, #228]	; (800b610 <recvExact+0x148>)
 800b52a:	f240 31be 	movw	r1, #958	; 0x3be
 800b52e:	4839      	ldr	r0, [pc, #228]	; (800b614 <recvExact+0x14c>)
 800b530:	f007 f80c 	bl	801254c <__assert_func>
    assert( pContext->transportInterface.recv != NULL );
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	691b      	ldr	r3, [r3, #16]
 800b538:	2b00      	cmp	r3, #0
 800b53a:	d106      	bne.n	800b54a <recvExact+0x82>
 800b53c:	4b38      	ldr	r3, [pc, #224]	; (800b620 <recvExact+0x158>)
 800b53e:	4a34      	ldr	r2, [pc, #208]	; (800b610 <recvExact+0x148>)
 800b540:	f240 31bf 	movw	r1, #959	; 0x3bf
 800b544:	4833      	ldr	r0, [pc, #204]	; (800b614 <recvExact+0x14c>)
 800b546:	f007 f801 	bl	801254c <__assert_func>
    assert( pContext->networkBuffer.pBuffer != NULL );
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	6a1b      	ldr	r3, [r3, #32]
 800b54e:	2b00      	cmp	r3, #0
 800b550:	d106      	bne.n	800b560 <recvExact+0x98>
 800b552:	4b34      	ldr	r3, [pc, #208]	; (800b624 <recvExact+0x15c>)
 800b554:	4a2e      	ldr	r2, [pc, #184]	; (800b610 <recvExact+0x148>)
 800b556:	f44f 7170 	mov.w	r1, #960	; 0x3c0
 800b55a:	482e      	ldr	r0, [pc, #184]	; (800b614 <recvExact+0x14c>)
 800b55c:	f006 fff6 	bl	801254c <__assert_func>

    pIndex = pContext->networkBuffer.pBuffer;
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	6a1b      	ldr	r3, [r3, #32]
 800b564:	62fb      	str	r3, [r7, #44]	; 0x2c
    recvFunc = pContext->transportInterface.recv;
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	691b      	ldr	r3, [r3, #16]
 800b56a:	617b      	str	r3, [r7, #20]
    getTimeStampMs = pContext->getTime;
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b570:	613b      	str	r3, [r7, #16]

    /* Part of the MQTT packet has been read before calling this function. */
    lastDataRecvTimeMs = getTimeStampMs();
 800b572:	693b      	ldr	r3, [r7, #16]
 800b574:	4798      	blx	r3
 800b576:	6238      	str	r0, [r7, #32]

    while( ( bytesRemaining > 0U ) && ( receiveError == false ) )
 800b578:	e039      	b.n	800b5ee <recvExact+0x126>
    {
        bytesRecvd = recvFunc( pContext->transportInterface.pNetworkContext,
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	69d8      	ldr	r0, [r3, #28]
 800b57e:	697b      	ldr	r3, [r7, #20]
 800b580:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b582:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b584:	4798      	blx	r3
 800b586:	60f8      	str	r0, [r7, #12]
                               pIndex,
                               bytesRemaining );

        if( bytesRecvd < 0 )
 800b588:	68fb      	ldr	r3, [r7, #12]
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	da04      	bge.n	800b598 <recvExact+0xd0>
        {
            LogError( ( "Network error while receiving packet: ReturnCode=%ld.",
                        ( long int ) bytesRecvd ) );
            totalBytesRecvd = bytesRecvd;
 800b58e:	68fb      	ldr	r3, [r7, #12]
 800b590:	627b      	str	r3, [r7, #36]	; 0x24
            receiveError = true;
 800b592:	2301      	movs	r3, #1
 800b594:	77fb      	strb	r3, [r7, #31]
 800b596:	e02a      	b.n	800b5ee <recvExact+0x126>
        }
        else if( bytesRecvd > 0 )
 800b598:	68fb      	ldr	r3, [r7, #12]
 800b59a:	2b00      	cmp	r3, #0
 800b59c:	dd1a      	ble.n	800b5d4 <recvExact+0x10c>
        {
            /* Reset the starting time as we have received some data from the network. */
            lastDataRecvTimeMs = getTimeStampMs();
 800b59e:	693b      	ldr	r3, [r7, #16]
 800b5a0:	4798      	blx	r3
 800b5a2:	6238      	str	r0, [r7, #32]
            /* It is a bug in the application's transport receive implementation
             * if more bytes than expected are received. To avoid a possible
             * overflow in converting bytesRemaining from unsigned to signed,
             * this assert must exist after the check for bytesRecvd being
             * negative. */
            assert( ( size_t ) bytesRecvd <= bytesRemaining );
 800b5a4:	68fb      	ldr	r3, [r7, #12]
 800b5a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b5a8:	429a      	cmp	r2, r3
 800b5aa:	d206      	bcs.n	800b5ba <recvExact+0xf2>
 800b5ac:	4b1e      	ldr	r3, [pc, #120]	; (800b628 <recvExact+0x160>)
 800b5ae:	4a18      	ldr	r2, [pc, #96]	; (800b610 <recvExact+0x148>)
 800b5b0:	f44f 7178 	mov.w	r1, #992	; 0x3e0
 800b5b4:	4817      	ldr	r0, [pc, #92]	; (800b614 <recvExact+0x14c>)
 800b5b6:	f006 ffc9 	bl	801254c <__assert_func>

            bytesRemaining -= ( size_t ) bytesRecvd;
 800b5ba:	68fb      	ldr	r3, [r7, #12]
 800b5bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b5be:	1ad3      	subs	r3, r2, r3
 800b5c0:	62bb      	str	r3, [r7, #40]	; 0x28
            totalBytesRecvd += ( int32_t ) bytesRecvd;
 800b5c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b5c4:	68fb      	ldr	r3, [r7, #12]
 800b5c6:	4413      	add	r3, r2
 800b5c8:	627b      	str	r3, [r7, #36]	; 0x24
            /* Increment the index. */
            pIndex = &pIndex[ bytesRecvd ];
 800b5ca:	68fb      	ldr	r3, [r7, #12]
 800b5cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b5ce:	4413      	add	r3, r2
 800b5d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b5d2:	e00c      	b.n	800b5ee <recvExact+0x126>
                        ( long int ) totalBytesRecvd ) );
        }
        else
        {
            /* No bytes were read from the network. */
            timeSinceLastRecvMs = calculateElapsedTime( getTimeStampMs(), lastDataRecvTimeMs );
 800b5d4:	693b      	ldr	r3, [r7, #16]
 800b5d6:	4798      	blx	r3
 800b5d8:	4603      	mov	r3, r0
 800b5da:	6a39      	ldr	r1, [r7, #32]
 800b5dc:	4618      	mov	r0, r3
 800b5de:	f7ff ff33 	bl	800b448 <calculateElapsedTime>
 800b5e2:	61b8      	str	r0, [r7, #24]

            /* Check for timeout if we have been waiting to receive any byte on the network. */
            if( timeSinceLastRecvMs >= MQTT_RECV_POLLING_TIMEOUT_MS )
 800b5e4:	69bb      	ldr	r3, [r7, #24]
 800b5e6:	2b09      	cmp	r3, #9
 800b5e8:	d901      	bls.n	800b5ee <recvExact+0x126>
            {
                LogError( ( "Unable to receive packet: Timed out in transport recv." ) );
                receiveError = true;
 800b5ea:	2301      	movs	r3, #1
 800b5ec:	77fb      	strb	r3, [r7, #31]
    while( ( bytesRemaining > 0U ) && ( receiveError == false ) )
 800b5ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	d005      	beq.n	800b600 <recvExact+0x138>
 800b5f4:	7ffb      	ldrb	r3, [r7, #31]
 800b5f6:	f083 0301 	eor.w	r3, r3, #1
 800b5fa:	b2db      	uxtb	r3, r3
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	d1bc      	bne.n	800b57a <recvExact+0xb2>
            }
        }
    }

    return totalBytesRecvd;
 800b600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b602:	4618      	mov	r0, r3
 800b604:	3730      	adds	r7, #48	; 0x30
 800b606:	46bd      	mov	sp, r7
 800b608:	bd80      	pop	{r7, pc}
 800b60a:	bf00      	nop
 800b60c:	08014b4c 	.word	0x08014b4c
 800b610:	080156e8 	.word	0x080156e8
 800b614:	08014a70 	.word	0x08014a70
 800b618:	08014c30 	.word	0x08014c30
 800b61c:	08014b70 	.word	0x08014b70
 800b620:	08014c5c 	.word	0x08014c5c
 800b624:	08014c88 	.word	0x08014c88
 800b628:	08014cb0 	.word	0x08014cb0

0800b62c <discardPacket>:
/*-----------------------------------------------------------*/

static MQTTStatus_t discardPacket( const MQTTContext_t * pContext,
                                   size_t remainingLength,
                                   uint32_t timeoutMs )
{
 800b62c:	b580      	push	{r7, lr}
 800b62e:	b08c      	sub	sp, #48	; 0x30
 800b630:	af00      	add	r7, sp, #0
 800b632:	60f8      	str	r0, [r7, #12]
 800b634:	60b9      	str	r1, [r7, #8]
 800b636:	607a      	str	r2, [r7, #4]
    MQTTStatus_t status = MQTTRecvFailed;
 800b638:	2304      	movs	r3, #4
 800b63a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    int32_t bytesReceived = 0;
 800b63e:	2300      	movs	r3, #0
 800b640:	61fb      	str	r3, [r7, #28]
    size_t bytesToReceive = 0U;
 800b642:	2300      	movs	r3, #0
 800b644:	62bb      	str	r3, [r7, #40]	; 0x28
    uint32_t totalBytesReceived = 0U;
 800b646:	2300      	movs	r3, #0
 800b648:	627b      	str	r3, [r7, #36]	; 0x24
    uint32_t entryTimeMs = 0U;
 800b64a:	2300      	movs	r3, #0
 800b64c:	61bb      	str	r3, [r7, #24]
    uint32_t elapsedTimeMs = 0U;
 800b64e:	2300      	movs	r3, #0
 800b650:	617b      	str	r3, [r7, #20]
    MQTTGetCurrentTimeFunc_t getTimeStampMs = NULL;
 800b652:	2300      	movs	r3, #0
 800b654:	613b      	str	r3, [r7, #16]
    bool receiveError = false;
 800b656:	2300      	movs	r3, #0
 800b658:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

    assert( pContext != NULL );
 800b65c:	68fb      	ldr	r3, [r7, #12]
 800b65e:	2b00      	cmp	r3, #0
 800b660:	d106      	bne.n	800b670 <discardPacket+0x44>
 800b662:	4b2f      	ldr	r3, [pc, #188]	; (800b720 <discardPacket+0xf4>)
 800b664:	4a2f      	ldr	r2, [pc, #188]	; (800b724 <discardPacket+0xf8>)
 800b666:	f240 410b 	movw	r1, #1035	; 0x40b
 800b66a:	482f      	ldr	r0, [pc, #188]	; (800b728 <discardPacket+0xfc>)
 800b66c:	f006 ff6e 	bl	801254c <__assert_func>
    assert( pContext->getTime != NULL );
 800b670:	68fb      	ldr	r3, [r7, #12]
 800b672:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b674:	2b00      	cmp	r3, #0
 800b676:	d106      	bne.n	800b686 <discardPacket+0x5a>
 800b678:	4b2c      	ldr	r3, [pc, #176]	; (800b72c <discardPacket+0x100>)
 800b67a:	4a2a      	ldr	r2, [pc, #168]	; (800b724 <discardPacket+0xf8>)
 800b67c:	f240 410c 	movw	r1, #1036	; 0x40c
 800b680:	4829      	ldr	r0, [pc, #164]	; (800b728 <discardPacket+0xfc>)
 800b682:	f006 ff63 	bl	801254c <__assert_func>

    bytesToReceive = pContext->networkBuffer.size;
 800b686:	68fb      	ldr	r3, [r7, #12]
 800b688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b68a:	62bb      	str	r3, [r7, #40]	; 0x28
    getTimeStampMs = pContext->getTime;
 800b68c:	68fb      	ldr	r3, [r7, #12]
 800b68e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b690:	613b      	str	r3, [r7, #16]

    entryTimeMs = getTimeStampMs();
 800b692:	693b      	ldr	r3, [r7, #16]
 800b694:	4798      	blx	r3
 800b696:	61b8      	str	r0, [r7, #24]

    while( ( totalBytesReceived < remainingLength ) && ( receiveError == false ) )
 800b698:	e029      	b.n	800b6ee <discardPacket+0xc2>
    {
        if( ( remainingLength - totalBytesReceived ) < bytesToReceive )
 800b69a:	68ba      	ldr	r2, [r7, #8]
 800b69c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b69e:	1ad3      	subs	r3, r2, r3
 800b6a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b6a2:	429a      	cmp	r2, r3
 800b6a4:	d903      	bls.n	800b6ae <discardPacket+0x82>
        {
            bytesToReceive = remainingLength - totalBytesReceived;
 800b6a6:	68ba      	ldr	r2, [r7, #8]
 800b6a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6aa:	1ad3      	subs	r3, r2, r3
 800b6ac:	62bb      	str	r3, [r7, #40]	; 0x28
        }

        bytesReceived = recvExact( pContext, bytesToReceive );
 800b6ae:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b6b0:	68f8      	ldr	r0, [r7, #12]
 800b6b2:	f7ff ff09 	bl	800b4c8 <recvExact>
 800b6b6:	61f8      	str	r0, [r7, #28]

        if( bytesReceived != ( int32_t ) bytesToReceive )
 800b6b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6ba:	69fa      	ldr	r2, [r7, #28]
 800b6bc:	429a      	cmp	r2, r3
 800b6be:	d003      	beq.n	800b6c8 <discardPacket+0x9c>
        {
            LogError( ( "Receive error while discarding packet."
                        "ReceivedBytes=%ld, ExpectedBytes=%lu.",
                        ( long int ) bytesReceived,
                        ( unsigned long ) bytesToReceive ) );
            receiveError = true;
 800b6c0:	2301      	movs	r3, #1
 800b6c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b6c6:	e012      	b.n	800b6ee <discardPacket+0xc2>
        }
        else
        {
            totalBytesReceived += ( uint32_t ) bytesReceived;
 800b6c8:	69fb      	ldr	r3, [r7, #28]
 800b6ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b6cc:	4413      	add	r3, r2
 800b6ce:	627b      	str	r3, [r7, #36]	; 0x24

            elapsedTimeMs = calculateElapsedTime( getTimeStampMs(), entryTimeMs );
 800b6d0:	693b      	ldr	r3, [r7, #16]
 800b6d2:	4798      	blx	r3
 800b6d4:	4603      	mov	r3, r0
 800b6d6:	69b9      	ldr	r1, [r7, #24]
 800b6d8:	4618      	mov	r0, r3
 800b6da:	f7ff feb5 	bl	800b448 <calculateElapsedTime>
 800b6de:	6178      	str	r0, [r7, #20]

            /* Check for timeout. */
            if( elapsedTimeMs >= timeoutMs )
 800b6e0:	697a      	ldr	r2, [r7, #20]
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	429a      	cmp	r2, r3
 800b6e6:	d302      	bcc.n	800b6ee <discardPacket+0xc2>
            {
                LogError( ( "Time expired while discarding packet." ) );
                receiveError = true;
 800b6e8:	2301      	movs	r3, #1
 800b6ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while( ( totalBytesReceived < remainingLength ) && ( receiveError == false ) )
 800b6ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b6f0:	68bb      	ldr	r3, [r7, #8]
 800b6f2:	429a      	cmp	r2, r3
 800b6f4:	d206      	bcs.n	800b704 <discardPacket+0xd8>
 800b6f6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b6fa:	f083 0301 	eor.w	r3, r3, #1
 800b6fe:	b2db      	uxtb	r3, r3
 800b700:	2b00      	cmp	r3, #0
 800b702:	d1ca      	bne.n	800b69a <discardPacket+0x6e>
            }
        }
    }

    if( totalBytesReceived == remainingLength )
 800b704:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b706:	68bb      	ldr	r3, [r7, #8]
 800b708:	429a      	cmp	r2, r3
 800b70a:	d102      	bne.n	800b712 <discardPacket+0xe6>
    {
        LogError( ( "Dumped packet. DumpedBytes=%lu.",
                    ( unsigned long ) totalBytesReceived ) );
        /* Packet dumped, so no data is available. */
        status = MQTTNoDataAvailable;
 800b70c:	2307      	movs	r3, #7
 800b70e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }

    return status;
 800b712:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800b716:	4618      	mov	r0, r3
 800b718:	3730      	adds	r7, #48	; 0x30
 800b71a:	46bd      	mov	sp, r7
 800b71c:	bd80      	pop	{r7, pc}
 800b71e:	bf00      	nop
 800b720:	08014b4c 	.word	0x08014b4c
 800b724:	080156f4 	.word	0x080156f4
 800b728:	08014a70 	.word	0x08014a70
 800b72c:	08014b70 	.word	0x08014b70

0800b730 <discardStoredPacket>:

/*-----------------------------------------------------------*/

static MQTTStatus_t discardStoredPacket( MQTTContext_t * pContext,
                                         const MQTTPacketInfo_t * pPacketInfo )
{
 800b730:	b580      	push	{r7, lr}
 800b732:	b08a      	sub	sp, #40	; 0x28
 800b734:	af00      	add	r7, sp, #0
 800b736:	6078      	str	r0, [r7, #4]
 800b738:	6039      	str	r1, [r7, #0]
    MQTTStatus_t status = MQTTRecvFailed;
 800b73a:	2304      	movs	r3, #4
 800b73c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    int32_t bytesReceived = 0;
 800b740:	2300      	movs	r3, #0
 800b742:	617b      	str	r3, [r7, #20]
    size_t bytesToReceive = 0U;
 800b744:	2300      	movs	r3, #0
 800b746:	623b      	str	r3, [r7, #32]
    uint32_t totalBytesReceived = 0U;
 800b748:	2300      	movs	r3, #0
 800b74a:	61fb      	str	r3, [r7, #28]
    bool receiveError = false;
 800b74c:	2300      	movs	r3, #0
 800b74e:	76fb      	strb	r3, [r7, #27]
    size_t mqttPacketSize = 0;
 800b750:	2300      	movs	r3, #0
 800b752:	613b      	str	r3, [r7, #16]
    size_t remainingLength;

    assert( pContext != NULL );
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	2b00      	cmp	r3, #0
 800b758:	d106      	bne.n	800b768 <discardStoredPacket+0x38>
 800b75a:	4b34      	ldr	r3, [pc, #208]	; (800b82c <discardStoredPacket+0xfc>)
 800b75c:	4a34      	ldr	r2, [pc, #208]	; (800b830 <discardStoredPacket+0x100>)
 800b75e:	f240 414b 	movw	r1, #1099	; 0x44b
 800b762:	4834      	ldr	r0, [pc, #208]	; (800b834 <discardStoredPacket+0x104>)
 800b764:	f006 fef2 	bl	801254c <__assert_func>
    assert( pPacketInfo != NULL );
 800b768:	683b      	ldr	r3, [r7, #0]
 800b76a:	2b00      	cmp	r3, #0
 800b76c:	d106      	bne.n	800b77c <discardStoredPacket+0x4c>
 800b76e:	4b32      	ldr	r3, [pc, #200]	; (800b838 <discardStoredPacket+0x108>)
 800b770:	4a2f      	ldr	r2, [pc, #188]	; (800b830 <discardStoredPacket+0x100>)
 800b772:	f240 414c 	movw	r1, #1100	; 0x44c
 800b776:	482f      	ldr	r0, [pc, #188]	; (800b834 <discardStoredPacket+0x104>)
 800b778:	f006 fee8 	bl	801254c <__assert_func>

    mqttPacketSize = pPacketInfo->remainingLength + pPacketInfo->headerLength;
 800b77c:	683b      	ldr	r3, [r7, #0]
 800b77e:	689a      	ldr	r2, [r3, #8]
 800b780:	683b      	ldr	r3, [r7, #0]
 800b782:	68db      	ldr	r3, [r3, #12]
 800b784:	4413      	add	r3, r2
 800b786:	613b      	str	r3, [r7, #16]

    /* Assert that the packet being discarded is bigger than the
     * receive buffer. */
    assert( mqttPacketSize > pContext->networkBuffer.size );
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b78c:	693a      	ldr	r2, [r7, #16]
 800b78e:	429a      	cmp	r2, r3
 800b790:	d806      	bhi.n	800b7a0 <discardStoredPacket+0x70>
 800b792:	4b2a      	ldr	r3, [pc, #168]	; (800b83c <discardStoredPacket+0x10c>)
 800b794:	4a26      	ldr	r2, [pc, #152]	; (800b830 <discardStoredPacket+0x100>)
 800b796:	f240 4152 	movw	r1, #1106	; 0x452
 800b79a:	4826      	ldr	r0, [pc, #152]	; (800b834 <discardStoredPacket+0x104>)
 800b79c:	f006 fed6 	bl	801254c <__assert_func>

    /* Discard these many bytes at a time. */
    bytesToReceive = pContext->networkBuffer.size;
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7a4:	623b      	str	r3, [r7, #32]

    /* Number of bytes depicted by 'index' have already been received. */
    remainingLength = mqttPacketSize - pContext->index;
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b7aa:	693a      	ldr	r2, [r7, #16]
 800b7ac:	1ad3      	subs	r3, r2, r3
 800b7ae:	60fb      	str	r3, [r7, #12]

    while( ( totalBytesReceived < remainingLength ) && ( receiveError == false ) )
 800b7b0:	e019      	b.n	800b7e6 <discardStoredPacket+0xb6>
    {
        if( ( remainingLength - totalBytesReceived ) < bytesToReceive )
 800b7b2:	68fa      	ldr	r2, [r7, #12]
 800b7b4:	69fb      	ldr	r3, [r7, #28]
 800b7b6:	1ad3      	subs	r3, r2, r3
 800b7b8:	6a3a      	ldr	r2, [r7, #32]
 800b7ba:	429a      	cmp	r2, r3
 800b7bc:	d903      	bls.n	800b7c6 <discardStoredPacket+0x96>
        {
            bytesToReceive = remainingLength - totalBytesReceived;
 800b7be:	68fa      	ldr	r2, [r7, #12]
 800b7c0:	69fb      	ldr	r3, [r7, #28]
 800b7c2:	1ad3      	subs	r3, r2, r3
 800b7c4:	623b      	str	r3, [r7, #32]
        }

        bytesReceived = recvExact( pContext, bytesToReceive );
 800b7c6:	6a39      	ldr	r1, [r7, #32]
 800b7c8:	6878      	ldr	r0, [r7, #4]
 800b7ca:	f7ff fe7d 	bl	800b4c8 <recvExact>
 800b7ce:	6178      	str	r0, [r7, #20]

        if( bytesReceived != ( int32_t ) bytesToReceive )
 800b7d0:	6a3b      	ldr	r3, [r7, #32]
 800b7d2:	697a      	ldr	r2, [r7, #20]
 800b7d4:	429a      	cmp	r2, r3
 800b7d6:	d002      	beq.n	800b7de <discardStoredPacket+0xae>
        {
            LogError( ( "Receive error while discarding packet."
                        "ReceivedBytes=%ld, ExpectedBytes=%lu.",
                        ( long int ) bytesReceived,
                        ( unsigned long ) bytesToReceive ) );
            receiveError = true;
 800b7d8:	2301      	movs	r3, #1
 800b7da:	76fb      	strb	r3, [r7, #27]
 800b7dc:	e003      	b.n	800b7e6 <discardStoredPacket+0xb6>
        }
        else
        {
            totalBytesReceived += ( uint32_t ) bytesReceived;
 800b7de:	697b      	ldr	r3, [r7, #20]
 800b7e0:	69fa      	ldr	r2, [r7, #28]
 800b7e2:	4413      	add	r3, r2
 800b7e4:	61fb      	str	r3, [r7, #28]
    while( ( totalBytesReceived < remainingLength ) && ( receiveError == false ) )
 800b7e6:	69fa      	ldr	r2, [r7, #28]
 800b7e8:	68fb      	ldr	r3, [r7, #12]
 800b7ea:	429a      	cmp	r2, r3
 800b7ec:	d205      	bcs.n	800b7fa <discardStoredPacket+0xca>
 800b7ee:	7efb      	ldrb	r3, [r7, #27]
 800b7f0:	f083 0301 	eor.w	r3, r3, #1
 800b7f4:	b2db      	uxtb	r3, r3
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	d1db      	bne.n	800b7b2 <discardStoredPacket+0x82>
        }
    }

    if( totalBytesReceived == remainingLength )
 800b7fa:	69fa      	ldr	r2, [r7, #28]
 800b7fc:	68fb      	ldr	r3, [r7, #12]
 800b7fe:	429a      	cmp	r2, r3
 800b800:	d102      	bne.n	800b808 <discardStoredPacket+0xd8>
    {
        LogError( ( "Dumped packet. DumpedBytes=%lu.",
                    ( unsigned long ) totalBytesReceived ) );
        /* Packet dumped, so no data is available. */
        status = MQTTNoDataAvailable;
 800b802:	2307      	movs	r3, #7
 800b804:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* Clear the buffer */
    ( void ) memset( pContext->networkBuffer.pBuffer,
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	6a18      	ldr	r0, [r3, #32]
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b810:	461a      	mov	r2, r3
 800b812:	2100      	movs	r1, #0
 800b814:	f007 f825 	bl	8012862 <memset>
                     0,
                     pContext->networkBuffer.size );

    /* Reset the index. */
    pContext->index = 0;
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	2200      	movs	r2, #0
 800b81c:	641a      	str	r2, [r3, #64]	; 0x40

    return status;
 800b81e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800b822:	4618      	mov	r0, r3
 800b824:	3728      	adds	r7, #40	; 0x28
 800b826:	46bd      	mov	sp, r7
 800b828:	bd80      	pop	{r7, pc}
 800b82a:	bf00      	nop
 800b82c:	08014b4c 	.word	0x08014b4c
 800b830:	08015704 	.word	0x08015704
 800b834:	08014a70 	.word	0x08014a70
 800b838:	08014cd8 	.word	0x08014cd8
 800b83c:	08014cec 	.word	0x08014cec

0800b840 <receivePacket>:
/*-----------------------------------------------------------*/

static MQTTStatus_t receivePacket( const MQTTContext_t * pContext,
                                   MQTTPacketInfo_t incomingPacket,
                                   uint32_t remainingTimeMs )
{
 800b840:	b084      	sub	sp, #16
 800b842:	b580      	push	{r7, lr}
 800b844:	b086      	sub	sp, #24
 800b846:	af00      	add	r7, sp, #0
 800b848:	6078      	str	r0, [r7, #4]
 800b84a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800b84e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    MQTTStatus_t status = MQTTSuccess;
 800b852:	2300      	movs	r3, #0
 800b854:	75fb      	strb	r3, [r7, #23]
    int32_t bytesReceived = 0;
 800b856:	2300      	movs	r3, #0
 800b858:	613b      	str	r3, [r7, #16]
    size_t bytesToReceive = 0U;
 800b85a:	2300      	movs	r3, #0
 800b85c:	60fb      	str	r3, [r7, #12]

    assert( pContext != NULL );
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	2b00      	cmp	r3, #0
 800b862:	d106      	bne.n	800b872 <receivePacket+0x32>
 800b864:	4b1a      	ldr	r3, [pc, #104]	; (800b8d0 <receivePacket+0x90>)
 800b866:	4a1b      	ldr	r2, [pc, #108]	; (800b8d4 <receivePacket+0x94>)
 800b868:	f240 418e 	movw	r1, #1166	; 0x48e
 800b86c:	481a      	ldr	r0, [pc, #104]	; (800b8d8 <receivePacket+0x98>)
 800b86e:	f006 fe6d 	bl	801254c <__assert_func>
    assert( pContext->networkBuffer.pBuffer != NULL );
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	6a1b      	ldr	r3, [r3, #32]
 800b876:	2b00      	cmp	r3, #0
 800b878:	d106      	bne.n	800b888 <receivePacket+0x48>
 800b87a:	4b18      	ldr	r3, [pc, #96]	; (800b8dc <receivePacket+0x9c>)
 800b87c:	4a15      	ldr	r2, [pc, #84]	; (800b8d4 <receivePacket+0x94>)
 800b87e:	f240 418f 	movw	r1, #1167	; 0x48f
 800b882:	4815      	ldr	r0, [pc, #84]	; (800b8d8 <receivePacket+0x98>)
 800b884:	f006 fe62 	bl	801254c <__assert_func>

    if( incomingPacket.remainingLength > pContext->networkBuffer.size )
 800b888:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b88e:	429a      	cmp	r2, r3
 800b890:	d908      	bls.n	800b8a4 <receivePacket+0x64>
        LogError( ( "Incoming packet will be dumped: "
                    "Packet length exceeds network buffer size."
                    "PacketSize=%lu, NetworkBufferSize=%lu.",
                    ( unsigned long ) incomingPacket.remainingLength,
                    ( unsigned long ) pContext->networkBuffer.size ) );
        status = discardPacket( pContext,
 800b892:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b894:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b896:	4619      	mov	r1, r3
 800b898:	6878      	ldr	r0, [r7, #4]
 800b89a:	f7ff fec7 	bl	800b62c <discardPacket>
 800b89e:	4603      	mov	r3, r0
 800b8a0:	75fb      	strb	r3, [r7, #23]
 800b8a2:	e00c      	b.n	800b8be <receivePacket+0x7e>
                                incomingPacket.remainingLength,
                                remainingTimeMs );
    }
    else
    {
        bytesToReceive = incomingPacket.remainingLength;
 800b8a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8a6:	60fb      	str	r3, [r7, #12]
        bytesReceived = recvExact( pContext, bytesToReceive );
 800b8a8:	68f9      	ldr	r1, [r7, #12]
 800b8aa:	6878      	ldr	r0, [r7, #4]
 800b8ac:	f7ff fe0c 	bl	800b4c8 <recvExact>
 800b8b0:	6138      	str	r0, [r7, #16]

        if( bytesReceived == ( int32_t ) bytesToReceive )
 800b8b2:	68fb      	ldr	r3, [r7, #12]
 800b8b4:	693a      	ldr	r2, [r7, #16]
 800b8b6:	429a      	cmp	r2, r3
 800b8b8:	d001      	beq.n	800b8be <receivePacket+0x7e>
        {
            LogError( ( "Packet reception failed. ReceivedBytes=%ld, "
                        "ExpectedBytes=%lu.",
                        ( long int ) bytesReceived,
                        ( unsigned long ) bytesToReceive ) );
            status = MQTTRecvFailed;
 800b8ba:	2304      	movs	r3, #4
 800b8bc:	75fb      	strb	r3, [r7, #23]
        }
    }

    return status;
 800b8be:	7dfb      	ldrb	r3, [r7, #23]
}
 800b8c0:	4618      	mov	r0, r3
 800b8c2:	3718      	adds	r7, #24
 800b8c4:	46bd      	mov	sp, r7
 800b8c6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b8ca:	b004      	add	sp, #16
 800b8cc:	4770      	bx	lr
 800b8ce:	bf00      	nop
 800b8d0:	08014b4c 	.word	0x08014b4c
 800b8d4:	08015718 	.word	0x08015718
 800b8d8:	08014a70 	.word	0x08014a70
 800b8dc:	08014c88 	.word	0x08014c88

0800b8e0 <getAckTypeToSend>:

/*-----------------------------------------------------------*/

static uint8_t getAckTypeToSend( MQTTPublishState_t state )
{
 800b8e0:	b480      	push	{r7}
 800b8e2:	b085      	sub	sp, #20
 800b8e4:	af00      	add	r7, sp, #0
 800b8e6:	4603      	mov	r3, r0
 800b8e8:	71fb      	strb	r3, [r7, #7]
    uint8_t packetTypeByte = 0U;
 800b8ea:	2300      	movs	r3, #0
 800b8ec:	73fb      	strb	r3, [r7, #15]

    switch( state )
 800b8ee:	79fb      	ldrb	r3, [r7, #7]
 800b8f0:	3b02      	subs	r3, #2
 800b8f2:	2b03      	cmp	r3, #3
 800b8f4:	d816      	bhi.n	800b924 <getAckTypeToSend+0x44>
 800b8f6:	a201      	add	r2, pc, #4	; (adr r2, 800b8fc <getAckTypeToSend+0x1c>)
 800b8f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b8fc:	0800b90d 	.word	0x0800b90d
 800b900:	0800b913 	.word	0x0800b913
 800b904:	0800b919 	.word	0x0800b919
 800b908:	0800b91f 	.word	0x0800b91f
    {
        case MQTTPubAckSend:
            packetTypeByte = MQTT_PACKET_TYPE_PUBACK;
 800b90c:	2340      	movs	r3, #64	; 0x40
 800b90e:	73fb      	strb	r3, [r7, #15]
            break;
 800b910:	e009      	b.n	800b926 <getAckTypeToSend+0x46>

        case MQTTPubRecSend:
            packetTypeByte = MQTT_PACKET_TYPE_PUBREC;
 800b912:	2350      	movs	r3, #80	; 0x50
 800b914:	73fb      	strb	r3, [r7, #15]
            break;
 800b916:	e006      	b.n	800b926 <getAckTypeToSend+0x46>

        case MQTTPubRelSend:
            packetTypeByte = MQTT_PACKET_TYPE_PUBREL;
 800b918:	2362      	movs	r3, #98	; 0x62
 800b91a:	73fb      	strb	r3, [r7, #15]
            break;
 800b91c:	e003      	b.n	800b926 <getAckTypeToSend+0x46>

        case MQTTPubCompSend:
            packetTypeByte = MQTT_PACKET_TYPE_PUBCOMP;
 800b91e:	2370      	movs	r3, #112	; 0x70
 800b920:	73fb      	strb	r3, [r7, #15]
            break;
 800b922:	e000      	b.n	800b926 <getAckTypeToSend+0x46>
        case MQTTPublishDone:
        case MQTTPublishSend:
        case MQTTStateNull:
        default:
            /* Take no action for states that do not require sending an ack. */
            break;
 800b924:	bf00      	nop
    }

    return packetTypeByte;
 800b926:	7bfb      	ldrb	r3, [r7, #15]
}
 800b928:	4618      	mov	r0, r3
 800b92a:	3714      	adds	r7, #20
 800b92c:	46bd      	mov	sp, r7
 800b92e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b932:	4770      	bx	lr

0800b934 <sendPublishAcks>:
/*-----------------------------------------------------------*/

static MQTTStatus_t sendPublishAcks( MQTTContext_t * pContext,
                                     uint16_t packetId,
                                     MQTTPublishState_t publishState )
{
 800b934:	b580      	push	{r7, lr}
 800b936:	b08a      	sub	sp, #40	; 0x28
 800b938:	af02      	add	r7, sp, #8
 800b93a:	6078      	str	r0, [r7, #4]
 800b93c:	460b      	mov	r3, r1
 800b93e:	807b      	strh	r3, [r7, #2]
 800b940:	4613      	mov	r3, r2
 800b942:	707b      	strb	r3, [r7, #1]
    MQTTStatus_t status = MQTTSuccess;
 800b944:	2300      	movs	r3, #0
 800b946:	77fb      	strb	r3, [r7, #31]
    MQTTPublishState_t newState = MQTTStateNull;
 800b948:	2300      	movs	r3, #0
 800b94a:	757b      	strb	r3, [r7, #21]
    int32_t sendResult = 0;
 800b94c:	2300      	movs	r3, #0
 800b94e:	61bb      	str	r3, [r7, #24]
    uint8_t packetTypeByte = 0U;
 800b950:	2300      	movs	r3, #0
 800b952:	75fb      	strb	r3, [r7, #23]
    MQTTPubAckType_t packetType;
    MQTTFixedBuffer_t localBuffer;
    uint8_t pubAckPacket[ MQTT_PUBLISH_ACK_PACKET_SIZE ];

    localBuffer.pBuffer = pubAckPacket;
 800b954:	f107 0308 	add.w	r3, r7, #8
 800b958:	60fb      	str	r3, [r7, #12]
    localBuffer.size = MQTT_PUBLISH_ACK_PACKET_SIZE;
 800b95a:	2304      	movs	r3, #4
 800b95c:	613b      	str	r3, [r7, #16]

    assert( pContext != NULL );
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	2b00      	cmp	r3, #0
 800b962:	d106      	bne.n	800b972 <sendPublishAcks+0x3e>
 800b964:	4b21      	ldr	r3, [pc, #132]	; (800b9ec <sendPublishAcks+0xb8>)
 800b966:	4a22      	ldr	r2, [pc, #136]	; (800b9f0 <sendPublishAcks+0xbc>)
 800b968:	f240 41ec 	movw	r1, #1260	; 0x4ec
 800b96c:	4821      	ldr	r0, [pc, #132]	; (800b9f4 <sendPublishAcks+0xc0>)
 800b96e:	f006 fded 	bl	801254c <__assert_func>

    packetTypeByte = getAckTypeToSend( publishState );
 800b972:	787b      	ldrb	r3, [r7, #1]
 800b974:	4618      	mov	r0, r3
 800b976:	f7ff ffb3 	bl	800b8e0 <getAckTypeToSend>
 800b97a:	4603      	mov	r3, r0
 800b97c:	75fb      	strb	r3, [r7, #23]

    if( packetTypeByte != 0U )
 800b97e:	7dfb      	ldrb	r3, [r7, #23]
 800b980:	2b00      	cmp	r3, #0
 800b982:	d02d      	beq.n	800b9e0 <sendPublishAcks+0xac>
    {
        packetType = getAckFromPacketType( packetTypeByte );
 800b984:	7dfb      	ldrb	r3, [r7, #23]
 800b986:	4618      	mov	r0, r3
 800b988:	f7ff fd6c 	bl	800b464 <getAckFromPacketType>
 800b98c:	4603      	mov	r3, r0
 800b98e:	75bb      	strb	r3, [r7, #22]

        status = MQTT_SerializeAck( &localBuffer,
 800b990:	887a      	ldrh	r2, [r7, #2]
 800b992:	7df9      	ldrb	r1, [r7, #23]
 800b994:	f107 030c 	add.w	r3, r7, #12
 800b998:	4618      	mov	r0, r3
 800b99a:	f002 f8f1 	bl	800db80 <MQTT_SerializeAck>
 800b99e:	4603      	mov	r3, r0
 800b9a0:	77fb      	strb	r3, [r7, #31]
                                    packetTypeByte,
                                    packetId );

        if( status == MQTTSuccess )
 800b9a2:	7ffb      	ldrb	r3, [r7, #31]
 800b9a4:	2b00      	cmp	r3, #0
 800b9a6:	d106      	bne.n	800b9b6 <sendPublishAcks+0x82>
            MQTT_PRE_SEND_HOOK( pContext );

            /* Here, we are not using the vector approach for efficiency. There is just one buffer
             * to be sent which can be achieved with a normal send call. */
            sendResult = sendBuffer( pContext,
                                     localBuffer.pBuffer,
 800b9a8:	68fb      	ldr	r3, [r7, #12]
            sendResult = sendBuffer( pContext,
 800b9aa:	2204      	movs	r2, #4
 800b9ac:	4619      	mov	r1, r3
 800b9ae:	6878      	ldr	r0, [r7, #4]
 800b9b0:	f7ff fcbc 	bl	800b32c <sendBuffer>
 800b9b4:	61b8      	str	r0, [r7, #24]
                                     MQTT_PUBLISH_ACK_PACKET_SIZE );

            MQTT_POST_SEND_HOOK( pContext );
        }

        if( sendResult == ( int32_t ) MQTT_PUBLISH_ACK_PACKET_SIZE )
 800b9b6:	69bb      	ldr	r3, [r7, #24]
 800b9b8:	2b04      	cmp	r3, #4
 800b9ba:	d10f      	bne.n	800b9dc <sendPublishAcks+0xa8>
        {
            pContext->controlPacketSent = true;
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	2201      	movs	r2, #1
 800b9c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

            MQTT_PRE_STATE_UPDATE_HOOK( pContext );

            status = MQTT_UpdateStateAck( pContext,
 800b9c4:	7dba      	ldrb	r2, [r7, #22]
 800b9c6:	8879      	ldrh	r1, [r7, #2]
 800b9c8:	f107 0315 	add.w	r3, r7, #21
 800b9cc:	9300      	str	r3, [sp, #0]
 800b9ce:	2300      	movs	r3, #0
 800b9d0:	6878      	ldr	r0, [r7, #4]
 800b9d2:	f002 ffa1 	bl	800e918 <MQTT_UpdateStateAck>
 800b9d6:	4603      	mov	r3, r0
 800b9d8:	77fb      	strb	r3, [r7, #31]
 800b9da:	e001      	b.n	800b9e0 <sendPublishAcks+0xac>
        {
            LogError( ( "Failed to send ACK packet: PacketType=%02x, SentBytes=%ld, "
                        "PacketSize=%lu.",
                        ( unsigned int ) packetTypeByte, ( long int ) sendResult,
                        MQTT_PUBLISH_ACK_PACKET_SIZE ) );
            status = MQTTSendFailed;
 800b9dc:	2303      	movs	r3, #3
 800b9de:	77fb      	strb	r3, [r7, #31]
        }
    }

    return status;
 800b9e0:	7ffb      	ldrb	r3, [r7, #31]
}
 800b9e2:	4618      	mov	r0, r3
 800b9e4:	3720      	adds	r7, #32
 800b9e6:	46bd      	mov	sp, r7
 800b9e8:	bd80      	pop	{r7, pc}
 800b9ea:	bf00      	nop
 800b9ec:	08014b4c 	.word	0x08014b4c
 800b9f0:	08015728 	.word	0x08015728
 800b9f4:	08014a70 	.word	0x08014a70

0800b9f8 <handleKeepAlive>:

/*-----------------------------------------------------------*/

static MQTTStatus_t handleKeepAlive( MQTTContext_t * pContext )
{
 800b9f8:	b580      	push	{r7, lr}
 800b9fa:	b086      	sub	sp, #24
 800b9fc:	af00      	add	r7, sp, #0
 800b9fe:	6078      	str	r0, [r7, #4]
    MQTTStatus_t status = MQTTSuccess;
 800ba00:	2300      	movs	r3, #0
 800ba02:	75fb      	strb	r3, [r7, #23]
    uint32_t now = 0U;
 800ba04:	2300      	movs	r3, #0
 800ba06:	60fb      	str	r3, [r7, #12]
    uint32_t packetTxTimeoutMs = 0U;
 800ba08:	2300      	movs	r3, #0
 800ba0a:	613b      	str	r3, [r7, #16]

    assert( pContext != NULL );
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	d106      	bne.n	800ba20 <handleKeepAlive+0x28>
 800ba12:	4b33      	ldr	r3, [pc, #204]	; (800bae0 <handleKeepAlive+0xe8>)
 800ba14:	4a33      	ldr	r2, [pc, #204]	; (800bae4 <handleKeepAlive+0xec>)
 800ba16:	f240 512e 	movw	r1, #1326	; 0x52e
 800ba1a:	4833      	ldr	r0, [pc, #204]	; (800bae8 <handleKeepAlive+0xf0>)
 800ba1c:	f006 fd96 	bl	801254c <__assert_func>
    assert( pContext->getTime != NULL );
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba24:	2b00      	cmp	r3, #0
 800ba26:	d106      	bne.n	800ba36 <handleKeepAlive+0x3e>
 800ba28:	4b30      	ldr	r3, [pc, #192]	; (800baec <handleKeepAlive+0xf4>)
 800ba2a:	4a2e      	ldr	r2, [pc, #184]	; (800bae4 <handleKeepAlive+0xec>)
 800ba2c:	f240 512f 	movw	r1, #1327	; 0x52f
 800ba30:	482d      	ldr	r0, [pc, #180]	; (800bae8 <handleKeepAlive+0xf0>)
 800ba32:	f006 fd8b 	bl	801254c <__assert_func>

    now = pContext->getTime();
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba3a:	4798      	blx	r3
 800ba3c:	60f8      	str	r0, [r7, #12]

    packetTxTimeoutMs = 1000U * ( uint32_t ) pContext->keepAliveIntervalSec;
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800ba44:	461a      	mov	r2, r3
 800ba46:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800ba4a:	fb02 f303 	mul.w	r3, r2, r3
 800ba4e:	613b      	str	r3, [r7, #16]

    if( PACKET_TX_TIMEOUT_MS < packetTxTimeoutMs )
 800ba50:	693b      	ldr	r3, [r7, #16]
 800ba52:	f247 5230 	movw	r2, #30000	; 0x7530
 800ba56:	4293      	cmp	r3, r2
 800ba58:	d902      	bls.n	800ba60 <handleKeepAlive+0x68>
    {
        packetTxTimeoutMs = PACKET_TX_TIMEOUT_MS;
 800ba5a:	f247 5330 	movw	r3, #30000	; 0x7530
 800ba5e:	613b      	str	r3, [r7, #16]
    }

    /* If keep alive interval is 0, it is disabled. */
    if( pContext->waitingForPingResp == true )
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	d00d      	beq.n	800ba86 <handleKeepAlive+0x8e>
    {
        /* Has time expired? */
        if( calculateElapsedTime( now, pContext->pingReqSendTimeMs ) >
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ba6e:	4619      	mov	r1, r3
 800ba70:	68f8      	ldr	r0, [r7, #12]
 800ba72:	f7ff fce9 	bl	800b448 <calculateElapsedTime>
 800ba76:	4603      	mov	r3, r0
 800ba78:	f241 3288 	movw	r2, #5000	; 0x1388
 800ba7c:	4293      	cmp	r3, r2
 800ba7e:	d929      	bls.n	800bad4 <handleKeepAlive+0xdc>
            MQTT_PINGRESP_TIMEOUT_MS )
        {
            status = MQTTKeepAliveTimeout;
 800ba80:	230a      	movs	r3, #10
 800ba82:	75fb      	strb	r3, [r7, #23]
 800ba84:	e026      	b.n	800bad4 <handleKeepAlive+0xdc>
        }
    }
    else
    {
        if( ( packetTxTimeoutMs != 0U ) && ( calculateElapsedTime( now, pContext->lastPacketTxTime ) >= packetTxTimeoutMs ) )
 800ba86:	693b      	ldr	r3, [r7, #16]
 800ba88:	2b00      	cmp	r3, #0
 800ba8a:	d00f      	beq.n	800baac <handleKeepAlive+0xb4>
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ba90:	4619      	mov	r1, r3
 800ba92:	68f8      	ldr	r0, [r7, #12]
 800ba94:	f7ff fcd8 	bl	800b448 <calculateElapsedTime>
 800ba98:	4602      	mov	r2, r0
 800ba9a:	693b      	ldr	r3, [r7, #16]
 800ba9c:	4293      	cmp	r3, r2
 800ba9e:	d805      	bhi.n	800baac <handleKeepAlive+0xb4>
        {
            status = MQTT_Ping( pContext );
 800baa0:	6878      	ldr	r0, [r7, #4]
 800baa2:	f001 f8c7 	bl	800cc34 <MQTT_Ping>
 800baa6:	4603      	mov	r3, r0
 800baa8:	75fb      	strb	r3, [r7, #23]
 800baaa:	e013      	b.n	800bad4 <handleKeepAlive+0xdc>
        }
        else
        {
            const uint32_t timeElapsed = calculateElapsedTime( now, pContext->lastPacketRxTime );
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bab0:	4619      	mov	r1, r3
 800bab2:	68f8      	ldr	r0, [r7, #12]
 800bab4:	f7ff fcc8 	bl	800b448 <calculateElapsedTime>
 800bab8:	60b8      	str	r0, [r7, #8]

            if( ( timeElapsed != 0U ) && ( timeElapsed >= PACKET_RX_TIMEOUT_MS ) )
 800baba:	68bb      	ldr	r3, [r7, #8]
 800babc:	2b00      	cmp	r3, #0
 800babe:	d009      	beq.n	800bad4 <handleKeepAlive+0xdc>
 800bac0:	68bb      	ldr	r3, [r7, #8]
 800bac2:	f247 522f 	movw	r2, #29999	; 0x752f
 800bac6:	4293      	cmp	r3, r2
 800bac8:	d904      	bls.n	800bad4 <handleKeepAlive+0xdc>
            {
                status = MQTT_Ping( pContext );
 800baca:	6878      	ldr	r0, [r7, #4]
 800bacc:	f001 f8b2 	bl	800cc34 <MQTT_Ping>
 800bad0:	4603      	mov	r3, r0
 800bad2:	75fb      	strb	r3, [r7, #23]
            }
        }
    }

    return status;
 800bad4:	7dfb      	ldrb	r3, [r7, #23]
}
 800bad6:	4618      	mov	r0, r3
 800bad8:	3718      	adds	r7, #24
 800bada:	46bd      	mov	sp, r7
 800badc:	bd80      	pop	{r7, pc}
 800bade:	bf00      	nop
 800bae0:	08014b4c 	.word	0x08014b4c
 800bae4:	08015738 	.word	0x08015738
 800bae8:	08014a70 	.word	0x08014a70
 800baec:	08014b70 	.word	0x08014b70

0800baf0 <handleIncomingPublish>:

/*-----------------------------------------------------------*/

static MQTTStatus_t handleIncomingPublish( MQTTContext_t * pContext,
                                           MQTTPacketInfo_t * pIncomingPacket )
{
 800baf0:	b580      	push	{r7, lr}
 800baf2:	b08e      	sub	sp, #56	; 0x38
 800baf4:	af02      	add	r7, sp, #8
 800baf6:	6078      	str	r0, [r7, #4]
 800baf8:	6039      	str	r1, [r7, #0]
    MQTTStatus_t status = MQTTBadParameter;
 800bafa:	2301      	movs	r3, #1
 800bafc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    MQTTPublishState_t publishRecordState = MQTTStateNull;
 800bb00:	2300      	movs	r3, #0
 800bb02:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    uint16_t packetIdentifier = 0U;
 800bb06:	2300      	movs	r3, #0
 800bb08:	857b      	strh	r3, [r7, #42]	; 0x2a
    MQTTPublishInfo_t publishInfo;
    MQTTDeserializedInfo_t deserializedInfo;
    bool duplicatePublish = false;
 800bb0a:	2300      	movs	r3, #0
 800bb0c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

    assert( pContext != NULL );
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	2b00      	cmp	r3, #0
 800bb14:	d106      	bne.n	800bb24 <handleIncomingPublish+0x34>
 800bb16:	4b43      	ldr	r3, [pc, #268]	; (800bc24 <handleIncomingPublish+0x134>)
 800bb18:	4a43      	ldr	r2, [pc, #268]	; (800bc28 <handleIncomingPublish+0x138>)
 800bb1a:	f240 5164 	movw	r1, #1380	; 0x564
 800bb1e:	4843      	ldr	r0, [pc, #268]	; (800bc2c <handleIncomingPublish+0x13c>)
 800bb20:	f006 fd14 	bl	801254c <__assert_func>
    assert( pIncomingPacket != NULL );
 800bb24:	683b      	ldr	r3, [r7, #0]
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	d106      	bne.n	800bb38 <handleIncomingPublish+0x48>
 800bb2a:	4b41      	ldr	r3, [pc, #260]	; (800bc30 <handleIncomingPublish+0x140>)
 800bb2c:	4a3e      	ldr	r2, [pc, #248]	; (800bc28 <handleIncomingPublish+0x138>)
 800bb2e:	f240 5165 	movw	r1, #1381	; 0x565
 800bb32:	483e      	ldr	r0, [pc, #248]	; (800bc2c <handleIncomingPublish+0x13c>)
 800bb34:	f006 fd0a 	bl	801254c <__assert_func>
    assert( pContext->appCallback != NULL );
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	d106      	bne.n	800bb4e <handleIncomingPublish+0x5e>
 800bb40:	4b3c      	ldr	r3, [pc, #240]	; (800bc34 <handleIncomingPublish+0x144>)
 800bb42:	4a39      	ldr	r2, [pc, #228]	; (800bc28 <handleIncomingPublish+0x138>)
 800bb44:	f240 5166 	movw	r1, #1382	; 0x566
 800bb48:	4838      	ldr	r0, [pc, #224]	; (800bc2c <handleIncomingPublish+0x13c>)
 800bb4a:	f006 fcff 	bl	801254c <__assert_func>

    status = MQTT_DeserializePublish( pIncomingPacket, &packetIdentifier, &publishInfo );
 800bb4e:	f107 0214 	add.w	r2, r7, #20
 800bb52:	f107 032a 	add.w	r3, r7, #42	; 0x2a
 800bb56:	4619      	mov	r1, r3
 800bb58:	6838      	ldr	r0, [r7, #0]
 800bb5a:	f002 f8a8 	bl	800dcae <MQTT_DeserializePublish>
 800bb5e:	4603      	mov	r3, r0
 800bb60:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    LogInfo( ( "De-serialized incoming PUBLISH packet: DeserializerResult=%s.",
               MQTT_Status_strerror( status ) ) );

    if( ( status == MQTTSuccess ) &&
 800bb64:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bb68:	2b00      	cmp	r3, #0
 800bb6a:	d109      	bne.n	800bb80 <handleIncomingPublish+0x90>
        ( pContext->incomingPublishRecords == NULL ) &&
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	685b      	ldr	r3, [r3, #4]
    if( ( status == MQTTSuccess ) &&
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	d105      	bne.n	800bb80 <handleIncomingPublish+0x90>
        ( publishInfo.qos > MQTTQoS0 ) )
 800bb74:	7d3b      	ldrb	r3, [r7, #20]
        ( pContext->incomingPublishRecords == NULL ) &&
 800bb76:	2b00      	cmp	r3, #0
 800bb78:	d002      	beq.n	800bb80 <handleIncomingPublish+0x90>
    {
        LogError( ( "Incoming publish has QoS > MQTTQoS0 but incoming "
                    "publish records have not been initialized. Dropping the "
                    "incoming publish. Please call MQTT_InitStatefulQoS to enable "
                    "use of QoS1 and QoS2 publishes." ) );
        status = MQTTRecvFailed;
 800bb7a:	2304      	movs	r3, #4
 800bb7c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }

    if( status == MQTTSuccess )
 800bb80:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bb84:	2b00      	cmp	r3, #0
 800bb86:	d122      	bne.n	800bbce <handleIncomingPublish+0xde>
    {
        MQTT_PRE_STATE_UPDATE_HOOK( pContext );

        status = MQTT_UpdateStatePublish( pContext,
 800bb88:	8d79      	ldrh	r1, [r7, #42]	; 0x2a
 800bb8a:	7d3a      	ldrb	r2, [r7, #20]
 800bb8c:	f107 032d 	add.w	r3, r7, #45	; 0x2d
 800bb90:	9300      	str	r3, [sp, #0]
 800bb92:	4613      	mov	r3, r2
 800bb94:	2201      	movs	r2, #1
 800bb96:	6878      	ldr	r0, [r7, #4]
 800bb98:	f002 fe4b 	bl	800e832 <MQTT_UpdateStatePublish>
 800bb9c:	4603      	mov	r3, r0
 800bb9e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                                          publishInfo.qos,
                                          &publishRecordState );

        MQTT_POST_STATE_UPDATE_HOOK( pContext );

        if( status == MQTTSuccess )
 800bba2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	d011      	beq.n	800bbce <handleIncomingPublish+0xde>
         *       sending out a duplicate publish with dup flag set, when a
         *       session is reestablished. It can result in a collision in
         *       state engine. This will be handled by ignoring the
         *       #MQTTStateCollision status from the state engine. The publish
         *       data is not passed to the application. */
        else if( status == MQTTStateCollision )
 800bbaa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bbae:	2b09      	cmp	r3, #9
 800bbb0:	d10d      	bne.n	800bbce <handleIncomingPublish+0xde>
        {
            status = MQTTSuccess;
 800bbb2:	2300      	movs	r3, #0
 800bbb4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            duplicatePublish = true;
 800bbb8:	2301      	movs	r3, #1
 800bbba:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

            /* Calculate the state for the ack packet that needs to be sent out
             * for the duplicate incoming publish. */
            publishRecordState = MQTT_CalculateStatePublish( MQTT_RECEIVE,
 800bbbe:	7d3b      	ldrb	r3, [r7, #20]
 800bbc0:	4619      	mov	r1, r3
 800bbc2:	2001      	movs	r0, #1
 800bbc4:	f002 fe06 	bl	800e7d4 <MQTT_CalculateStatePublish>
 800bbc8:	4603      	mov	r3, r0
 800bbca:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
                        ( unsigned short ) packetIdentifier,
                        MQTT_Status_strerror( status ) ) );
        }
    }

    if( status == MQTTSuccess )
 800bbce:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	d11f      	bne.n	800bc16 <handleIncomingPublish+0x126>
    {
        /* Set fields of deserialized struct. */
        deserializedInfo.packetIdentifier = packetIdentifier;
 800bbd6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800bbd8:	813b      	strh	r3, [r7, #8]
        deserializedInfo.pPublishInfo = &publishInfo;
 800bbda:	f107 0314 	add.w	r3, r7, #20
 800bbde:	60fb      	str	r3, [r7, #12]
        deserializedInfo.deserializationResult = status;
 800bbe0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bbe4:	743b      	strb	r3, [r7, #16]

        /* Invoke application callback to hand the buffer over to application
         * before sending acks.
         * Application callback will be invoked for all publishes, except for
         * duplicate incoming publishes. */
        if( duplicatePublish == false )
 800bbe6:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800bbea:	f083 0301 	eor.w	r3, r3, #1
 800bbee:	b2db      	uxtb	r3, r3
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	d006      	beq.n	800bc02 <handleIncomingPublish+0x112>
        {
            pContext->appCallback( pContext,
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bbf8:	f107 0208 	add.w	r2, r7, #8
 800bbfc:	6839      	ldr	r1, [r7, #0]
 800bbfe:	6878      	ldr	r0, [r7, #4]
 800bc00:	4798      	blx	r3
                                   pIncomingPacket,
                                   &deserializedInfo );
        }

        /* Send PUBACK or PUBREC if necessary. */
        status = sendPublishAcks( pContext,
 800bc02:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800bc04:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 800bc08:	4619      	mov	r1, r3
 800bc0a:	6878      	ldr	r0, [r7, #4]
 800bc0c:	f7ff fe92 	bl	800b934 <sendPublishAcks>
 800bc10:	4603      	mov	r3, r0
 800bc12:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                                  packetIdentifier,
                                  publishRecordState );
    }

    return status;
 800bc16:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800bc1a:	4618      	mov	r0, r3
 800bc1c:	3730      	adds	r7, #48	; 0x30
 800bc1e:	46bd      	mov	sp, r7
 800bc20:	bd80      	pop	{r7, pc}
 800bc22:	bf00      	nop
 800bc24:	08014b4c 	.word	0x08014b4c
 800bc28:	08015748 	.word	0x08015748
 800bc2c:	08014a70 	.word	0x08014a70
 800bc30:	08014d1c 	.word	0x08014d1c
 800bc34:	08014d34 	.word	0x08014d34

0800bc38 <handlePublishAcks>:

/*-----------------------------------------------------------*/

static MQTTStatus_t handlePublishAcks( MQTTContext_t * pContext,
                                       MQTTPacketInfo_t * pIncomingPacket )
{
 800bc38:	b580      	push	{r7, lr}
 800bc3a:	b08a      	sub	sp, #40	; 0x28
 800bc3c:	af02      	add	r7, sp, #8
 800bc3e:	6078      	str	r0, [r7, #4]
 800bc40:	6039      	str	r1, [r7, #0]
    MQTTStatus_t status = MQTTBadResponse;
 800bc42:	2305      	movs	r3, #5
 800bc44:	77fb      	strb	r3, [r7, #31]
    MQTTPublishState_t publishRecordState = MQTTStateNull;
 800bc46:	2300      	movs	r3, #0
 800bc48:	75bb      	strb	r3, [r7, #22]
    uint16_t packetIdentifier;
    MQTTPubAckType_t ackType;
    MQTTEventCallback_t appCallback;
    MQTTDeserializedInfo_t deserializedInfo;

    assert( pContext != NULL );
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	2b00      	cmp	r3, #0
 800bc4e:	d106      	bne.n	800bc5e <handlePublishAcks+0x26>
 800bc50:	4b2c      	ldr	r3, [pc, #176]	; (800bd04 <handlePublishAcks+0xcc>)
 800bc52:	4a2d      	ldr	r2, [pc, #180]	; (800bd08 <handlePublishAcks+0xd0>)
 800bc54:	f240 51e5 	movw	r1, #1509	; 0x5e5
 800bc58:	482c      	ldr	r0, [pc, #176]	; (800bd0c <handlePublishAcks+0xd4>)
 800bc5a:	f006 fc77 	bl	801254c <__assert_func>
    assert( pIncomingPacket != NULL );
 800bc5e:	683b      	ldr	r3, [r7, #0]
 800bc60:	2b00      	cmp	r3, #0
 800bc62:	d106      	bne.n	800bc72 <handlePublishAcks+0x3a>
 800bc64:	4b2a      	ldr	r3, [pc, #168]	; (800bd10 <handlePublishAcks+0xd8>)
 800bc66:	4a28      	ldr	r2, [pc, #160]	; (800bd08 <handlePublishAcks+0xd0>)
 800bc68:	f240 51e6 	movw	r1, #1510	; 0x5e6
 800bc6c:	4827      	ldr	r0, [pc, #156]	; (800bd0c <handlePublishAcks+0xd4>)
 800bc6e:	f006 fc6d 	bl	801254c <__assert_func>
    assert( pContext->appCallback != NULL );
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc76:	2b00      	cmp	r3, #0
 800bc78:	d106      	bne.n	800bc88 <handlePublishAcks+0x50>
 800bc7a:	4b26      	ldr	r3, [pc, #152]	; (800bd14 <handlePublishAcks+0xdc>)
 800bc7c:	4a22      	ldr	r2, [pc, #136]	; (800bd08 <handlePublishAcks+0xd0>)
 800bc7e:	f240 51e7 	movw	r1, #1511	; 0x5e7
 800bc82:	4822      	ldr	r0, [pc, #136]	; (800bd0c <handlePublishAcks+0xd4>)
 800bc84:	f006 fc62 	bl	801254c <__assert_func>

    appCallback = pContext->appCallback;
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc8c:	61bb      	str	r3, [r7, #24]

    ackType = getAckFromPacketType( pIncomingPacket->type );
 800bc8e:	683b      	ldr	r3, [r7, #0]
 800bc90:	781b      	ldrb	r3, [r3, #0]
 800bc92:	4618      	mov	r0, r3
 800bc94:	f7ff fbe6 	bl	800b464 <getAckFromPacketType>
 800bc98:	4603      	mov	r3, r0
 800bc9a:	75fb      	strb	r3, [r7, #23]
    status = MQTT_DeserializeAck( pIncomingPacket, &packetIdentifier, NULL );
 800bc9c:	f107 0314 	add.w	r3, r7, #20
 800bca0:	2200      	movs	r2, #0
 800bca2:	4619      	mov	r1, r3
 800bca4:	6838      	ldr	r0, [r7, #0]
 800bca6:	f002 f832 	bl	800dd0e <MQTT_DeserializeAck>
 800bcaa:	4603      	mov	r3, r0
 800bcac:	77fb      	strb	r3, [r7, #31]
    LogInfo( ( "Ack packet deserialized with result: %s.",
               MQTT_Status_strerror( status ) ) );

    if( status == MQTTSuccess )
 800bcae:	7ffb      	ldrb	r3, [r7, #31]
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	d10a      	bne.n	800bcca <handlePublishAcks+0x92>
    {
        MQTT_PRE_STATE_UPDATE_HOOK( pContext );

        status = MQTT_UpdateStateAck( pContext,
 800bcb4:	8ab9      	ldrh	r1, [r7, #20]
 800bcb6:	7dfa      	ldrb	r2, [r7, #23]
 800bcb8:	f107 0316 	add.w	r3, r7, #22
 800bcbc:	9300      	str	r3, [sp, #0]
 800bcbe:	2301      	movs	r3, #1
 800bcc0:	6878      	ldr	r0, [r7, #4]
 800bcc2:	f002 fe29 	bl	800e918 <MQTT_UpdateStateAck>
 800bcc6:	4603      	mov	r3, r0
 800bcc8:	77fb      	strb	r3, [r7, #31]
                        ( unsigned short ) packetIdentifier,
                        MQTT_Status_strerror( status ) ) );
        }
    }

    if( status == MQTTSuccess )
 800bcca:	7ffb      	ldrb	r3, [r7, #31]
 800bccc:	2b00      	cmp	r3, #0
 800bcce:	d113      	bne.n	800bcf8 <handlePublishAcks+0xc0>
    {
        /* Set fields of deserialized struct. */
        deserializedInfo.packetIdentifier = packetIdentifier;
 800bcd0:	8abb      	ldrh	r3, [r7, #20]
 800bcd2:	813b      	strh	r3, [r7, #8]
        deserializedInfo.deserializationResult = status;
 800bcd4:	7ffb      	ldrb	r3, [r7, #31]
 800bcd6:	743b      	strb	r3, [r7, #16]
        deserializedInfo.pPublishInfo = NULL;
 800bcd8:	2300      	movs	r3, #0
 800bcda:	60fb      	str	r3, [r7, #12]

        /* Invoke application callback to hand the buffer over to application
         * before sending acks. */
        appCallback( pContext, pIncomingPacket, &deserializedInfo );
 800bcdc:	f107 0208 	add.w	r2, r7, #8
 800bce0:	69bb      	ldr	r3, [r7, #24]
 800bce2:	6839      	ldr	r1, [r7, #0]
 800bce4:	6878      	ldr	r0, [r7, #4]
 800bce6:	4798      	blx	r3

        /* Send PUBREL or PUBCOMP if necessary. */
        status = sendPublishAcks( pContext,
 800bce8:	8abb      	ldrh	r3, [r7, #20]
 800bcea:	7dba      	ldrb	r2, [r7, #22]
 800bcec:	4619      	mov	r1, r3
 800bcee:	6878      	ldr	r0, [r7, #4]
 800bcf0:	f7ff fe20 	bl	800b934 <sendPublishAcks>
 800bcf4:	4603      	mov	r3, r0
 800bcf6:	77fb      	strb	r3, [r7, #31]
                                  packetIdentifier,
                                  publishRecordState );
    }

    return status;
 800bcf8:	7ffb      	ldrb	r3, [r7, #31]
}
 800bcfa:	4618      	mov	r0, r3
 800bcfc:	3720      	adds	r7, #32
 800bcfe:	46bd      	mov	sp, r7
 800bd00:	bd80      	pop	{r7, pc}
 800bd02:	bf00      	nop
 800bd04:	08014b4c 	.word	0x08014b4c
 800bd08:	08015760 	.word	0x08015760
 800bd0c:	08014a70 	.word	0x08014a70
 800bd10:	08014d1c 	.word	0x08014d1c
 800bd14:	08014d34 	.word	0x08014d34

0800bd18 <handleIncomingAck>:
/*-----------------------------------------------------------*/

static MQTTStatus_t handleIncomingAck( MQTTContext_t * pContext,
                                       MQTTPacketInfo_t * pIncomingPacket,
                                       bool manageKeepAlive )
{
 800bd18:	b580      	push	{r7, lr}
 800bd1a:	b08a      	sub	sp, #40	; 0x28
 800bd1c:	af00      	add	r7, sp, #0
 800bd1e:	60f8      	str	r0, [r7, #12]
 800bd20:	60b9      	str	r1, [r7, #8]
 800bd22:	4613      	mov	r3, r2
 800bd24:	71fb      	strb	r3, [r7, #7]
    MQTTStatus_t status = MQTTBadResponse;
 800bd26:	2305      	movs	r3, #5
 800bd28:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    uint16_t packetIdentifier = MQTT_PACKET_ID_INVALID;
 800bd2c:	2300      	movs	r3, #0
 800bd2e:	83fb      	strh	r3, [r7, #30]
    /* We should always invoke the app callback unless we receive a PINGRESP
     * and are managing keep alive, or if we receive an unknown packet. We
     * initialize this to false since the callback must be invoked before
     * sending any PUBREL or PUBCOMP. However, for other cases, we invoke it
     * at the end to reduce the complexity of this function. */
    bool invokeAppCallback = false;
 800bd30:	2300      	movs	r3, #0
 800bd32:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    MQTTEventCallback_t appCallback = NULL;
 800bd36:	2300      	movs	r3, #0
 800bd38:	623b      	str	r3, [r7, #32]

    assert( pContext != NULL );
 800bd3a:	68fb      	ldr	r3, [r7, #12]
 800bd3c:	2b00      	cmp	r3, #0
 800bd3e:	d106      	bne.n	800bd4e <handleIncomingAck+0x36>
 800bd40:	4b54      	ldr	r3, [pc, #336]	; (800be94 <handleIncomingAck+0x17c>)
 800bd42:	4a55      	ldr	r2, [pc, #340]	; (800be98 <handleIncomingAck+0x180>)
 800bd44:	f44f 61c6 	mov.w	r1, #1584	; 0x630
 800bd48:	4854      	ldr	r0, [pc, #336]	; (800be9c <handleIncomingAck+0x184>)
 800bd4a:	f006 fbff 	bl	801254c <__assert_func>
    assert( pIncomingPacket != NULL );
 800bd4e:	68bb      	ldr	r3, [r7, #8]
 800bd50:	2b00      	cmp	r3, #0
 800bd52:	d106      	bne.n	800bd62 <handleIncomingAck+0x4a>
 800bd54:	4b52      	ldr	r3, [pc, #328]	; (800bea0 <handleIncomingAck+0x188>)
 800bd56:	4a50      	ldr	r2, [pc, #320]	; (800be98 <handleIncomingAck+0x180>)
 800bd58:	f240 6131 	movw	r1, #1585	; 0x631
 800bd5c:	484f      	ldr	r0, [pc, #316]	; (800be9c <handleIncomingAck+0x184>)
 800bd5e:	f006 fbf5 	bl	801254c <__assert_func>
    assert( pContext->appCallback != NULL );
 800bd62:	68fb      	ldr	r3, [r7, #12]
 800bd64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd66:	2b00      	cmp	r3, #0
 800bd68:	d106      	bne.n	800bd78 <handleIncomingAck+0x60>
 800bd6a:	4b4e      	ldr	r3, [pc, #312]	; (800bea4 <handleIncomingAck+0x18c>)
 800bd6c:	4a4a      	ldr	r2, [pc, #296]	; (800be98 <handleIncomingAck+0x180>)
 800bd6e:	f240 6132 	movw	r1, #1586	; 0x632
 800bd72:	484a      	ldr	r0, [pc, #296]	; (800be9c <handleIncomingAck+0x184>)
 800bd74:	f006 fbea 	bl	801254c <__assert_func>

    appCallback = pContext->appCallback;
 800bd78:	68fb      	ldr	r3, [r7, #12]
 800bd7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd7c:	623b      	str	r3, [r7, #32]

    LogDebug( ( "Received packet of type %02x.",
                ( unsigned int ) pIncomingPacket->type ) );

    switch( pIncomingPacket->type )
 800bd7e:	68bb      	ldr	r3, [r7, #8]
 800bd80:	781b      	ldrb	r3, [r3, #0]
 800bd82:	2bd0      	cmp	r3, #208	; 0xd0
 800bd84:	d01d      	beq.n	800bdc2 <handleIncomingAck+0xaa>
 800bd86:	2bd0      	cmp	r3, #208	; 0xd0
 800bd88:	dc64      	bgt.n	800be54 <handleIncomingAck+0x13c>
 800bd8a:	2bb0      	cmp	r3, #176	; 0xb0
 800bd8c:	d044      	beq.n	800be18 <handleIncomingAck+0x100>
 800bd8e:	2bb0      	cmp	r3, #176	; 0xb0
 800bd90:	dc60      	bgt.n	800be54 <handleIncomingAck+0x13c>
 800bd92:	2b90      	cmp	r3, #144	; 0x90
 800bd94:	d040      	beq.n	800be18 <handleIncomingAck+0x100>
 800bd96:	2b90      	cmp	r3, #144	; 0x90
 800bd98:	dc5c      	bgt.n	800be54 <handleIncomingAck+0x13c>
 800bd9a:	2b70      	cmp	r3, #112	; 0x70
 800bd9c:	d009      	beq.n	800bdb2 <handleIncomingAck+0x9a>
 800bd9e:	2b70      	cmp	r3, #112	; 0x70
 800bda0:	dc58      	bgt.n	800be54 <handleIncomingAck+0x13c>
 800bda2:	2b62      	cmp	r3, #98	; 0x62
 800bda4:	d005      	beq.n	800bdb2 <handleIncomingAck+0x9a>
 800bda6:	2b62      	cmp	r3, #98	; 0x62
 800bda8:	dc54      	bgt.n	800be54 <handleIncomingAck+0x13c>
 800bdaa:	2b40      	cmp	r3, #64	; 0x40
 800bdac:	d001      	beq.n	800bdb2 <handleIncomingAck+0x9a>
 800bdae:	2b50      	cmp	r3, #80	; 0x50
 800bdb0:	d150      	bne.n	800be54 <handleIncomingAck+0x13c>
        case MQTT_PACKET_TYPE_PUBREC:
        case MQTT_PACKET_TYPE_PUBREL:
        case MQTT_PACKET_TYPE_PUBCOMP:

            /* Handle all the publish acks. The app callback is invoked here. */
            status = handlePublishAcks( pContext, pIncomingPacket );
 800bdb2:	68b9      	ldr	r1, [r7, #8]
 800bdb4:	68f8      	ldr	r0, [r7, #12]
 800bdb6:	f7ff ff3f 	bl	800bc38 <handlePublishAcks>
 800bdba:	4603      	mov	r3, r0
 800bdbc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

            break;
 800bdc0:	e04d      	b.n	800be5e <handleIncomingAck+0x146>

        case MQTT_PACKET_TYPE_PINGRESP:
            status = MQTT_DeserializeAck( pIncomingPacket, &packetIdentifier, NULL );
 800bdc2:	f107 031e 	add.w	r3, r7, #30
 800bdc6:	2200      	movs	r2, #0
 800bdc8:	4619      	mov	r1, r3
 800bdca:	68b8      	ldr	r0, [r7, #8]
 800bdcc:	f001 ff9f 	bl	800dd0e <MQTT_DeserializeAck>
 800bdd0:	4603      	mov	r3, r0
 800bdd2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            invokeAppCallback = ( status == MQTTSuccess ) && !manageKeepAlive;
 800bdd6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bdda:	2b00      	cmp	r3, #0
 800bddc:	d107      	bne.n	800bdee <handleIncomingAck+0xd6>
 800bdde:	79fb      	ldrb	r3, [r7, #7]
 800bde0:	f083 0301 	eor.w	r3, r3, #1
 800bde4:	b2db      	uxtb	r3, r3
 800bde6:	2b00      	cmp	r3, #0
 800bde8:	d001      	beq.n	800bdee <handleIncomingAck+0xd6>
 800bdea:	2301      	movs	r3, #1
 800bdec:	e000      	b.n	800bdf0 <handleIncomingAck+0xd8>
 800bdee:	2300      	movs	r3, #0
 800bdf0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800bdf4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800bdf8:	f003 0301 	and.w	r3, r3, #1
 800bdfc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

            if( ( status == MQTTSuccess ) && ( manageKeepAlive == true ) )
 800be00:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800be04:	2b00      	cmp	r3, #0
 800be06:	d129      	bne.n	800be5c <handleIncomingAck+0x144>
 800be08:	79fb      	ldrb	r3, [r7, #7]
 800be0a:	2b00      	cmp	r3, #0
 800be0c:	d026      	beq.n	800be5c <handleIncomingAck+0x144>
            {
                pContext->waitingForPingResp = false;
 800be0e:	68fb      	ldr	r3, [r7, #12]
 800be10:	2200      	movs	r2, #0
 800be12:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            }

            break;
 800be16:	e021      	b.n	800be5c <handleIncomingAck+0x144>

        case MQTT_PACKET_TYPE_SUBACK:
        case MQTT_PACKET_TYPE_UNSUBACK:
            /* Deserialize and give these to the app provided callback. */
            status = MQTT_DeserializeAck( pIncomingPacket, &packetIdentifier, NULL );
 800be18:	f107 031e 	add.w	r3, r7, #30
 800be1c:	2200      	movs	r2, #0
 800be1e:	4619      	mov	r1, r3
 800be20:	68b8      	ldr	r0, [r7, #8]
 800be22:	f001 ff74 	bl	800dd0e <MQTT_DeserializeAck>
 800be26:	4603      	mov	r3, r0
 800be28:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            invokeAppCallback = ( status == MQTTSuccess ) || ( status == MQTTServerRefused );
 800be2c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800be30:	2b00      	cmp	r3, #0
 800be32:	d003      	beq.n	800be3c <handleIncomingAck+0x124>
 800be34:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800be38:	2b06      	cmp	r3, #6
 800be3a:	d101      	bne.n	800be40 <handleIncomingAck+0x128>
 800be3c:	2301      	movs	r3, #1
 800be3e:	e000      	b.n	800be42 <handleIncomingAck+0x12a>
 800be40:	2300      	movs	r3, #0
 800be42:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800be46:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800be4a:	f003 0301 	and.w	r3, r3, #1
 800be4e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            break;
 800be52:	e004      	b.n	800be5e <handleIncomingAck+0x146>

        default:
            /* Bad response from the server. */
            LogError( ( "Unexpected packet type from server: PacketType=%02x.",
                        ( unsigned int ) pIncomingPacket->type ) );
            status = MQTTBadResponse;
 800be54:	2305      	movs	r3, #5
 800be56:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800be5a:	e000      	b.n	800be5e <handleIncomingAck+0x146>
            break;
 800be5c:	bf00      	nop
    }

    if( invokeAppCallback == true )
 800be5e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800be62:	2b00      	cmp	r3, #0
 800be64:	d00f      	beq.n	800be86 <handleIncomingAck+0x16e>
    {
        /* Set fields of deserialized struct. */
        deserializedInfo.packetIdentifier = packetIdentifier;
 800be66:	8bfb      	ldrh	r3, [r7, #30]
 800be68:	823b      	strh	r3, [r7, #16]
        deserializedInfo.deserializationResult = status;
 800be6a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800be6e:	763b      	strb	r3, [r7, #24]
        deserializedInfo.pPublishInfo = NULL;
 800be70:	2300      	movs	r3, #0
 800be72:	617b      	str	r3, [r7, #20]
        appCallback( pContext, pIncomingPacket, &deserializedInfo );
 800be74:	f107 0210 	add.w	r2, r7, #16
 800be78:	6a3b      	ldr	r3, [r7, #32]
 800be7a:	68b9      	ldr	r1, [r7, #8]
 800be7c:	68f8      	ldr	r0, [r7, #12]
 800be7e:	4798      	blx	r3
        /* In case a SUBACK indicated refusal, reset the status to continue the loop. */
        status = MQTTSuccess;
 800be80:	2300      	movs	r3, #0
 800be82:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    return status;
 800be86:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800be8a:	4618      	mov	r0, r3
 800be8c:	3728      	adds	r7, #40	; 0x28
 800be8e:	46bd      	mov	sp, r7
 800be90:	bd80      	pop	{r7, pc}
 800be92:	bf00      	nop
 800be94:	08014b4c 	.word	0x08014b4c
 800be98:	08015774 	.word	0x08015774
 800be9c:	08014a70 	.word	0x08014a70
 800bea0:	08014d1c 	.word	0x08014d1c
 800bea4:	08014d34 	.word	0x08014d34

0800bea8 <receiveSingleIteration>:
/*-----------------------------------------------------------*/

static MQTTStatus_t receiveSingleIteration( MQTTContext_t * pContext,
                                            bool manageKeepAlive )
{
 800bea8:	b590      	push	{r4, r7, lr}
 800beaa:	b08b      	sub	sp, #44	; 0x2c
 800beac:	af00      	add	r7, sp, #0
 800beae:	6078      	str	r0, [r7, #4]
 800beb0:	460b      	mov	r3, r1
 800beb2:	70fb      	strb	r3, [r7, #3]
    MQTTStatus_t status = MQTTSuccess;
 800beb4:	2300      	movs	r3, #0
 800beb6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    MQTTPacketInfo_t incomingPacket = { 0 };
 800beba:	f107 0308 	add.w	r3, r7, #8
 800bebe:	2200      	movs	r2, #0
 800bec0:	601a      	str	r2, [r3, #0]
 800bec2:	605a      	str	r2, [r3, #4]
 800bec4:	609a      	str	r2, [r3, #8]
 800bec6:	60da      	str	r2, [r3, #12]
    int32_t recvBytes;
    size_t totalMQTTPacketLength = 0;
 800bec8:	2300      	movs	r3, #0
 800beca:	623b      	str	r3, [r7, #32]

    assert( pContext != NULL );
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	2b00      	cmp	r3, #0
 800bed0:	d106      	bne.n	800bee0 <receiveSingleIteration+0x38>
 800bed2:	4b67      	ldr	r3, [pc, #412]	; (800c070 <receiveSingleIteration+0x1c8>)
 800bed4:	4a67      	ldr	r2, [pc, #412]	; (800c074 <receiveSingleIteration+0x1cc>)
 800bed6:	f240 6176 	movw	r1, #1654	; 0x676
 800beda:	4867      	ldr	r0, [pc, #412]	; (800c078 <receiveSingleIteration+0x1d0>)
 800bedc:	f006 fb36 	bl	801254c <__assert_func>
    assert( pContext->networkBuffer.pBuffer != NULL );
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	6a1b      	ldr	r3, [r3, #32]
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	d106      	bne.n	800bef6 <receiveSingleIteration+0x4e>
 800bee8:	4b64      	ldr	r3, [pc, #400]	; (800c07c <receiveSingleIteration+0x1d4>)
 800beea:	4a62      	ldr	r2, [pc, #392]	; (800c074 <receiveSingleIteration+0x1cc>)
 800beec:	f240 6177 	movw	r1, #1655	; 0x677
 800bef0:	4861      	ldr	r0, [pc, #388]	; (800c078 <receiveSingleIteration+0x1d0>)
 800bef2:	f006 fb2b 	bl	801254c <__assert_func>

    /* Read as many bytes as possible into the network buffer. */
    recvBytes = pContext->transportInterface.recv( pContext->transportInterface.pNetworkContext,
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	691b      	ldr	r3, [r3, #16]
 800befa:	687a      	ldr	r2, [r7, #4]
 800befc:	69d0      	ldr	r0, [r2, #28]
                                                   &( pContext->networkBuffer.pBuffer[ pContext->index ] ),
 800befe:	687a      	ldr	r2, [r7, #4]
 800bf00:	6a11      	ldr	r1, [r2, #32]
 800bf02:	687a      	ldr	r2, [r7, #4]
 800bf04:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800bf06:	188c      	adds	r4, r1, r2
                                                   pContext->networkBuffer.size - pContext->index );
 800bf08:	687a      	ldr	r2, [r7, #4]
 800bf0a:	6a51      	ldr	r1, [r2, #36]	; 0x24
 800bf0c:	687a      	ldr	r2, [r7, #4]
 800bf0e:	6c12      	ldr	r2, [r2, #64]	; 0x40
    recvBytes = pContext->transportInterface.recv( pContext->transportInterface.pNetworkContext,
 800bf10:	1a8a      	subs	r2, r1, r2
 800bf12:	4621      	mov	r1, r4
 800bf14:	4798      	blx	r3
 800bf16:	61f8      	str	r0, [r7, #28]

    if( recvBytes < 0 )
 800bf18:	69fb      	ldr	r3, [r7, #28]
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	da03      	bge.n	800bf26 <receiveSingleIteration+0x7e>
    {
        /* The receive function has failed. Bubble up the error up to the user. */
        status = MQTTRecvFailed;
 800bf1e:	2304      	movs	r3, #4
 800bf20:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800bf24:	e020      	b.n	800bf68 <receiveSingleIteration+0xc0>
    }
    else if( ( recvBytes == 0 ) && ( pContext->index == 0U ) )
 800bf26:	69fb      	ldr	r3, [r7, #28]
 800bf28:	2b00      	cmp	r3, #0
 800bf2a:	d107      	bne.n	800bf3c <receiveSingleIteration+0x94>
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf30:	2b00      	cmp	r3, #0
 800bf32:	d103      	bne.n	800bf3c <receiveSingleIteration+0x94>
    {
        /* No more bytes available since the last read and neither is anything in
         * the buffer. */
        status = MQTTNoDataAvailable;
 800bf34:	2307      	movs	r3, #7
 800bf36:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800bf3a:	e015      	b.n	800bf68 <receiveSingleIteration+0xc0>
    /* Either something was received, or there is still data to be processed in the
     * buffer, or both. */
    else
    {
        /* Update the number of bytes in the MQTT fixed buffer. */
        pContext->index += ( size_t ) recvBytes;
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800bf40:	69fb      	ldr	r3, [r7, #28]
 800bf42:	441a      	add	r2, r3
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	641a      	str	r2, [r3, #64]	; 0x40

        status = MQTT_ProcessIncomingPacketTypeAndLength( pContext->networkBuffer.pBuffer,
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	6a18      	ldr	r0, [r3, #32]
                                                          &pContext->index,
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	3340      	adds	r3, #64	; 0x40
        status = MQTT_ProcessIncomingPacketTypeAndLength( pContext->networkBuffer.pBuffer,
 800bf50:	f107 0208 	add.w	r2, r7, #8
 800bf54:	4619      	mov	r1, r3
 800bf56:	f001 ff93 	bl	800de80 <MQTT_ProcessIncomingPacketTypeAndLength>
 800bf5a:	4603      	mov	r3, r0
 800bf5c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                                                          &incomingPacket );

        totalMQTTPacketLength = incomingPacket.remainingLength + incomingPacket.headerLength;
 800bf60:	693a      	ldr	r2, [r7, #16]
 800bf62:	697b      	ldr	r3, [r7, #20]
 800bf64:	4413      	add	r3, r2
 800bf66:	623b      	str	r3, [r7, #32]
    }

    /* No data was received, check for keep alive timeout. */
    if( recvBytes == 0 )
 800bf68:	69fb      	ldr	r3, [r7, #28]
 800bf6a:	2b00      	cmp	r3, #0
 800bf6c:	d112      	bne.n	800bf94 <receiveSingleIteration+0xec>
    {
        if( manageKeepAlive == true )
 800bf6e:	78fb      	ldrb	r3, [r7, #3]
 800bf70:	2b00      	cmp	r3, #0
 800bf72:	d00f      	beq.n	800bf94 <receiveSingleIteration+0xec>
        {
            /* Keep the copy of the status to be reset later. */
            MQTTStatus_t statusCopy = status;
 800bf74:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bf78:	76fb      	strb	r3, [r7, #27]

            /* Assign status so an error can be bubbled up to application,
             * but reset it on success. */
            status = handleKeepAlive( pContext );
 800bf7a:	6878      	ldr	r0, [r7, #4]
 800bf7c:	f7ff fd3c 	bl	800b9f8 <handleKeepAlive>
 800bf80:	4603      	mov	r3, r0
 800bf82:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

            if( status == MQTTSuccess )
 800bf86:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bf8a:	2b00      	cmp	r3, #0
 800bf8c:	d102      	bne.n	800bf94 <receiveSingleIteration+0xec>
            {
                /* Reset the status. */
                status = statusCopy;
 800bf8e:	7efb      	ldrb	r3, [r7, #27]
 800bf90:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            }
        }
    }

    /* Check whether there is data available before processing the packet further. */
    if( ( status == MQTTNeedMoreBytes ) || ( status == MQTTNoDataAvailable ) )
 800bf94:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bf98:	2b0b      	cmp	r3, #11
 800bf9a:	d01e      	beq.n	800bfda <receiveSingleIteration+0x132>
 800bf9c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bfa0:	2b07      	cmp	r3, #7
 800bfa2:	d01a      	beq.n	800bfda <receiveSingleIteration+0x132>
    {
        /* Do nothing as there is nothing to be processed right now. The proper
         * error code will be bubbled up to the user. */
    }
    /* Any other error code. */
    else if( status != MQTTSuccess )
 800bfa4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bfa8:	2b00      	cmp	r3, #0
 800bfaa:	d116      	bne.n	800bfda <receiveSingleIteration+0x132>
    {
        LogError( ( "Call to receiveSingleIteration failed. Status=%s",
                    MQTT_Status_strerror( status ) ) );
    }
    /* If the MQTT Packet size is bigger than the buffer itself. */
    else if( totalMQTTPacketLength > pContext->networkBuffer.size )
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bfb0:	6a3a      	ldr	r2, [r7, #32]
 800bfb2:	429a      	cmp	r2, r3
 800bfb4:	d909      	bls.n	800bfca <receiveSingleIteration+0x122>
    {
        /* Discard the packet from the receive buffer and drain the pending
         * data from the socket buffer. */
        status = discardStoredPacket( pContext,
 800bfb6:	f107 0308 	add.w	r3, r7, #8
 800bfba:	4619      	mov	r1, r3
 800bfbc:	6878      	ldr	r0, [r7, #4]
 800bfbe:	f7ff fbb7 	bl	800b730 <discardStoredPacket>
 800bfc2:	4603      	mov	r3, r0
 800bfc4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800bfc8:	e007      	b.n	800bfda <receiveSingleIteration+0x132>
                                      &incomingPacket );
    }
    /* If the total packet is of more length than the bytes we have available. */
    else if( totalMQTTPacketLength > pContext->index )
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bfce:	6a3a      	ldr	r2, [r7, #32]
 800bfd0:	429a      	cmp	r2, r3
 800bfd2:	d902      	bls.n	800bfda <receiveSingleIteration+0x132>
    {
        status = MQTTNeedMoreBytes;
 800bfd4:	230b      	movs	r3, #11
 800bfd6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    {
        /* MISRA else. */
    }

    /* Handle received packet. If incomplete data was read then this will not execute. */
    if( status == MQTTSuccess )
 800bfda:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bfde:	2b00      	cmp	r3, #0
 800bfe0:	d138      	bne.n	800c054 <receiveSingleIteration+0x1ac>
    {
        incomingPacket.pRemainingData = &pContext->networkBuffer.pBuffer[ incomingPacket.headerLength ];
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	6a1a      	ldr	r2, [r3, #32]
 800bfe6:	697b      	ldr	r3, [r7, #20]
 800bfe8:	4413      	add	r3, r2
 800bfea:	60fb      	str	r3, [r7, #12]

        /* PUBLISH packets allow flags in the lower four bits. For other
         * packet types, they are reserved. */
        if( ( incomingPacket.type & 0xF0U ) == MQTT_PACKET_TYPE_PUBLISH )
 800bfec:	7a3b      	ldrb	r3, [r7, #8]
 800bfee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bff2:	2b30      	cmp	r3, #48	; 0x30
 800bff4:	d109      	bne.n	800c00a <receiveSingleIteration+0x162>
        {
            status = handleIncomingPublish( pContext, &incomingPacket );
 800bff6:	f107 0308 	add.w	r3, r7, #8
 800bffa:	4619      	mov	r1, r3
 800bffc:	6878      	ldr	r0, [r7, #4]
 800bffe:	f7ff fd77 	bl	800baf0 <handleIncomingPublish>
 800c002:	4603      	mov	r3, r0
 800c004:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c008:	e009      	b.n	800c01e <receiveSingleIteration+0x176>
        }
        else
        {
            status = handleIncomingAck( pContext, &incomingPacket, manageKeepAlive );
 800c00a:	78fa      	ldrb	r2, [r7, #3]
 800c00c:	f107 0308 	add.w	r3, r7, #8
 800c010:	4619      	mov	r1, r3
 800c012:	6878      	ldr	r0, [r7, #4]
 800c014:	f7ff fe80 	bl	800bd18 <handleIncomingAck>
 800c018:	4603      	mov	r3, r0
 800c01a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }

        /* Update the index to reflect the remaining bytes in the buffer.  */
        pContext->index -= totalMQTTPacketLength;
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c022:	6a3b      	ldr	r3, [r7, #32]
 800c024:	1ad2      	subs	r2, r2, r3
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	641a      	str	r2, [r3, #64]	; 0x40

        /* Move the remaining bytes to the front of the buffer. */
        ( void ) memmove( pContext->networkBuffer.pBuffer,
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	6a18      	ldr	r0, [r3, #32]
                          &( pContext->networkBuffer.pBuffer[ totalMQTTPacketLength ] ),
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	6a1a      	ldr	r2, [r3, #32]
 800c032:	6a3b      	ldr	r3, [r7, #32]
 800c034:	18d1      	adds	r1, r2, r3
        ( void ) memmove( pContext->networkBuffer.pBuffer,
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c03a:	461a      	mov	r2, r3
 800c03c:	f006 fbf7 	bl	801282e <memmove>
                          pContext->index );

        if( status == MQTTSuccess )
 800c040:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c044:	2b00      	cmp	r3, #0
 800c046:	d105      	bne.n	800c054 <receiveSingleIteration+0x1ac>
        {
            pContext->lastPacketRxTime = pContext->getTime();
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c04c:	4798      	blx	r3
 800c04e:	4602      	mov	r2, r0
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	639a      	str	r2, [r3, #56]	; 0x38
        }
    }

    if( status == MQTTNoDataAvailable )
 800c054:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c058:	2b07      	cmp	r3, #7
 800c05a:	d102      	bne.n	800c062 <receiveSingleIteration+0x1ba>
    {
        /* No data available is not an error. Reset to MQTTSuccess so the
         * return code will indicate success. */
        status = MQTTSuccess;
 800c05c:	2300      	movs	r3, #0
 800c05e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    return status;
 800c062:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800c066:	4618      	mov	r0, r3
 800c068:	372c      	adds	r7, #44	; 0x2c
 800c06a:	46bd      	mov	sp, r7
 800c06c:	bd90      	pop	{r4, r7, pc}
 800c06e:	bf00      	nop
 800c070:	08014b4c 	.word	0x08014b4c
 800c074:	08015788 	.word	0x08015788
 800c078:	08014a70 	.word	0x08014a70
 800c07c:	08014c88 	.word	0x08014c88

0800c080 <validateSubscribeUnsubscribeParams>:

static MQTTStatus_t validateSubscribeUnsubscribeParams( const MQTTContext_t * pContext,
                                                        const MQTTSubscribeInfo_t * pSubscriptionList,
                                                        size_t subscriptionCount,
                                                        uint16_t packetId )
{
 800c080:	b480      	push	{r7}
 800c082:	b087      	sub	sp, #28
 800c084:	af00      	add	r7, sp, #0
 800c086:	60f8      	str	r0, [r7, #12]
 800c088:	60b9      	str	r1, [r7, #8]
 800c08a:	607a      	str	r2, [r7, #4]
 800c08c:	807b      	strh	r3, [r7, #2]
    MQTTStatus_t status = MQTTSuccess;
 800c08e:	2300      	movs	r3, #0
 800c090:	75fb      	strb	r3, [r7, #23]
    size_t iterator;

    /* Validate all the parameters. */
    if( ( pContext == NULL ) || ( pSubscriptionList == NULL ) )
 800c092:	68fb      	ldr	r3, [r7, #12]
 800c094:	2b00      	cmp	r3, #0
 800c096:	d002      	beq.n	800c09e <validateSubscribeUnsubscribeParams+0x1e>
 800c098:	68bb      	ldr	r3, [r7, #8]
 800c09a:	2b00      	cmp	r3, #0
 800c09c:	d102      	bne.n	800c0a4 <validateSubscribeUnsubscribeParams+0x24>
    {
        LogError( ( "Argument cannot be NULL: pContext=%p, "
                    "pSubscriptionList=%p.",
                    ( void * ) pContext,
                    ( void * ) pSubscriptionList ) );
        status = MQTTBadParameter;
 800c09e:	2301      	movs	r3, #1
 800c0a0:	75fb      	strb	r3, [r7, #23]
 800c0a2:	e020      	b.n	800c0e6 <validateSubscribeUnsubscribeParams+0x66>
    }
    else if( subscriptionCount == 0UL )
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	2b00      	cmp	r3, #0
 800c0a8:	d102      	bne.n	800c0b0 <validateSubscribeUnsubscribeParams+0x30>
    {
        LogError( ( "Subscription count is 0." ) );
        status = MQTTBadParameter;
 800c0aa:	2301      	movs	r3, #1
 800c0ac:	75fb      	strb	r3, [r7, #23]
 800c0ae:	e01a      	b.n	800c0e6 <validateSubscribeUnsubscribeParams+0x66>
    }
    else if( packetId == 0U )
 800c0b0:	887b      	ldrh	r3, [r7, #2]
 800c0b2:	2b00      	cmp	r3, #0
 800c0b4:	d102      	bne.n	800c0bc <validateSubscribeUnsubscribeParams+0x3c>
    {
        LogError( ( "Packet Id for subscription packet is 0." ) );
        status = MQTTBadParameter;
 800c0b6:	2301      	movs	r3, #1
 800c0b8:	75fb      	strb	r3, [r7, #23]
 800c0ba:	e014      	b.n	800c0e6 <validateSubscribeUnsubscribeParams+0x66>
    }
    else
    {
        if( pContext->incomingPublishRecords == NULL )
 800c0bc:	68fb      	ldr	r3, [r7, #12]
 800c0be:	685b      	ldr	r3, [r3, #4]
 800c0c0:	2b00      	cmp	r3, #0
 800c0c2:	d110      	bne.n	800c0e6 <validateSubscribeUnsubscribeParams+0x66>
        {
            for( iterator = 0; iterator < subscriptionCount; iterator++ )
 800c0c4:	2300      	movs	r3, #0
 800c0c6:	613b      	str	r3, [r7, #16]
 800c0c8:	e009      	b.n	800c0de <validateSubscribeUnsubscribeParams+0x5e>
            {
                if( pSubscriptionList->qos > MQTTQoS0 )
 800c0ca:	68bb      	ldr	r3, [r7, #8]
 800c0cc:	781b      	ldrb	r3, [r3, #0]
 800c0ce:	2b00      	cmp	r3, #0
 800c0d0:	d002      	beq.n	800c0d8 <validateSubscribeUnsubscribeParams+0x58>
                {
                    LogError( ( "The incoming publish record list is not "
                                "initialised for QoS1/QoS2 records. Please call "
                                " MQTT_InitStatefulQoS to enable use of QoS1 and "
                                " QoS2 packets." ) );
                    status = MQTTBadParameter;
 800c0d2:	2301      	movs	r3, #1
 800c0d4:	75fb      	strb	r3, [r7, #23]
                    break;
 800c0d6:	e006      	b.n	800c0e6 <validateSubscribeUnsubscribeParams+0x66>
            for( iterator = 0; iterator < subscriptionCount; iterator++ )
 800c0d8:	693b      	ldr	r3, [r7, #16]
 800c0da:	3301      	adds	r3, #1
 800c0dc:	613b      	str	r3, [r7, #16]
 800c0de:	693a      	ldr	r2, [r7, #16]
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	429a      	cmp	r2, r3
 800c0e4:	d3f1      	bcc.n	800c0ca <validateSubscribeUnsubscribeParams+0x4a>
                }
            }
        }
    }

    return status;
 800c0e6:	7dfb      	ldrb	r3, [r7, #23]
}
 800c0e8:	4618      	mov	r0, r3
 800c0ea:	371c      	adds	r7, #28
 800c0ec:	46bd      	mov	sp, r7
 800c0ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0f2:	4770      	bx	lr

0800c0f4 <addEncodedStringToVector>:
static size_t addEncodedStringToVector( uint8_t serailizedLength[ 2 ],
                                        const char * const string,
                                        uint16_t length,
                                        TransportOutVector_t * iterator,
                                        size_t * updatedLength )
{
 800c0f4:	b580      	push	{r7, lr}
 800c0f6:	b088      	sub	sp, #32
 800c0f8:	af00      	add	r7, sp, #0
 800c0fa:	60f8      	str	r0, [r7, #12]
 800c0fc:	60b9      	str	r1, [r7, #8]
 800c0fe:	603b      	str	r3, [r7, #0]
 800c100:	4613      	mov	r3, r2
 800c102:	80fb      	strh	r3, [r7, #6]
    size_t packetLength = 0U;
 800c104:	2300      	movs	r3, #0
 800c106:	61fb      	str	r3, [r7, #28]
    const size_t seralizedLengthFieldSize = 2U;
 800c108:	2302      	movs	r3, #2
 800c10a:	617b      	str	r3, [r7, #20]
    TransportOutVector_t * pLocalIterator = iterator;
 800c10c:	683b      	ldr	r3, [r7, #0]
 800c10e:	613b      	str	r3, [r7, #16]
    /* This function always adds 2 vectors. */
    size_t vectorsAdded = 0U;
 800c110:	2300      	movs	r3, #0
 800c112:	61bb      	str	r3, [r7, #24]

    /* When length is non-zero, the string must be non-NULL. */
    assert( ( length != 0U ) == ( string != NULL ) );
 800c114:	88fb      	ldrh	r3, [r7, #6]
 800c116:	2b00      	cmp	r3, #0
 800c118:	bf0c      	ite	eq
 800c11a:	2301      	moveq	r3, #1
 800c11c:	2300      	movne	r3, #0
 800c11e:	b2da      	uxtb	r2, r3
 800c120:	68bb      	ldr	r3, [r7, #8]
 800c122:	2b00      	cmp	r3, #0
 800c124:	bf14      	ite	ne
 800c126:	2301      	movne	r3, #1
 800c128:	2300      	moveq	r3, #0
 800c12a:	b2db      	uxtb	r3, r3
 800c12c:	4053      	eors	r3, r2
 800c12e:	b2db      	uxtb	r3, r3
 800c130:	2b00      	cmp	r3, #0
 800c132:	d106      	bne.n	800c142 <addEncodedStringToVector+0x4e>
 800c134:	4b1e      	ldr	r3, [pc, #120]	; (800c1b0 <addEncodedStringToVector+0xbc>)
 800c136:	4a1f      	ldr	r2, [pc, #124]	; (800c1b4 <addEncodedStringToVector+0xc0>)
 800c138:	f240 7139 	movw	r1, #1849	; 0x739
 800c13c:	481e      	ldr	r0, [pc, #120]	; (800c1b8 <addEncodedStringToVector+0xc4>)
 800c13e:	f006 fa05 	bl	801254c <__assert_func>

    serailizedLength[ 0 ] = ( ( uint8_t ) ( ( length ) >> 8 ) );
 800c142:	88fb      	ldrh	r3, [r7, #6]
 800c144:	0a1b      	lsrs	r3, r3, #8
 800c146:	b29b      	uxth	r3, r3
 800c148:	b2da      	uxtb	r2, r3
 800c14a:	68fb      	ldr	r3, [r7, #12]
 800c14c:	701a      	strb	r2, [r3, #0]
    serailizedLength[ 1 ] = ( ( uint8_t ) ( ( length ) & 0x00ffU ) );
 800c14e:	68fb      	ldr	r3, [r7, #12]
 800c150:	3301      	adds	r3, #1
 800c152:	88fa      	ldrh	r2, [r7, #6]
 800c154:	b2d2      	uxtb	r2, r2
 800c156:	701a      	strb	r2, [r3, #0]

    /* Add the serialized length of the string first. */
    pLocalIterator[ 0 ].iov_base = serailizedLength;
 800c158:	693b      	ldr	r3, [r7, #16]
 800c15a:	68fa      	ldr	r2, [r7, #12]
 800c15c:	601a      	str	r2, [r3, #0]
    pLocalIterator[ 0 ].iov_len = seralizedLengthFieldSize;
 800c15e:	693b      	ldr	r3, [r7, #16]
 800c160:	697a      	ldr	r2, [r7, #20]
 800c162:	605a      	str	r2, [r3, #4]
    vectorsAdded++;
 800c164:	69bb      	ldr	r3, [r7, #24]
 800c166:	3301      	adds	r3, #1
 800c168:	61bb      	str	r3, [r7, #24]
    packetLength = seralizedLengthFieldSize;
 800c16a:	697b      	ldr	r3, [r7, #20]
 800c16c:	61fb      	str	r3, [r7, #28]

    /* Sometimes the string can be NULL that is, of 0 length. In that case,
     * only the length field should be encoded in the vector. */
    if( ( string != NULL ) && ( length != 0U ) )
 800c16e:	68bb      	ldr	r3, [r7, #8]
 800c170:	2b00      	cmp	r3, #0
 800c172:	d011      	beq.n	800c198 <addEncodedStringToVector+0xa4>
 800c174:	88fb      	ldrh	r3, [r7, #6]
 800c176:	2b00      	cmp	r3, #0
 800c178:	d00e      	beq.n	800c198 <addEncodedStringToVector+0xa4>
    {
        /* Then add the pointer to the string itself. */
        pLocalIterator[ 1 ].iov_base = string;
 800c17a:	693b      	ldr	r3, [r7, #16]
 800c17c:	3308      	adds	r3, #8
 800c17e:	68ba      	ldr	r2, [r7, #8]
 800c180:	601a      	str	r2, [r3, #0]
        pLocalIterator[ 1 ].iov_len = length;
 800c182:	693b      	ldr	r3, [r7, #16]
 800c184:	3308      	adds	r3, #8
 800c186:	88fa      	ldrh	r2, [r7, #6]
 800c188:	605a      	str	r2, [r3, #4]
        vectorsAdded++;
 800c18a:	69bb      	ldr	r3, [r7, #24]
 800c18c:	3301      	adds	r3, #1
 800c18e:	61bb      	str	r3, [r7, #24]
        packetLength += length;
 800c190:	88fb      	ldrh	r3, [r7, #6]
 800c192:	69fa      	ldr	r2, [r7, #28]
 800c194:	4413      	add	r3, r2
 800c196:	61fb      	str	r3, [r7, #28]
    }

    ( *updatedLength ) = ( *updatedLength ) + packetLength;
 800c198:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c19a:	681a      	ldr	r2, [r3, #0]
 800c19c:	69fb      	ldr	r3, [r7, #28]
 800c19e:	441a      	add	r2, r3
 800c1a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1a2:	601a      	str	r2, [r3, #0]

    return vectorsAdded;
 800c1a4:	69bb      	ldr	r3, [r7, #24]
}
 800c1a6:	4618      	mov	r0, r3
 800c1a8:	3720      	adds	r7, #32
 800c1aa:	46bd      	mov	sp, r7
 800c1ac:	bd80      	pop	{r7, pc}
 800c1ae:	bf00      	nop
 800c1b0:	08014d54 	.word	0x08014d54
 800c1b4:	080157a0 	.word	0x080157a0
 800c1b8:	08014a70 	.word	0x08014a70

0800c1bc <sendSubscribeWithoutCopy>:
static MQTTStatus_t sendSubscribeWithoutCopy( MQTTContext_t * pContext,
                                              const MQTTSubscribeInfo_t * pSubscriptionList,
                                              size_t subscriptionCount,
                                              uint16_t packetId,
                                              size_t remainingLength )
{
 800c1bc:	b580      	push	{r7, lr}
 800c1be:	b09c      	sub	sp, #112	; 0x70
 800c1c0:	af02      	add	r7, sp, #8
 800c1c2:	60f8      	str	r0, [r7, #12]
 800c1c4:	60b9      	str	r1, [r7, #8]
 800c1c6:	607a      	str	r2, [r7, #4]
 800c1c8:	807b      	strh	r3, [r7, #2]
    MQTTStatus_t status = MQTTSuccess;
 800c1ca:	2300      	movs	r3, #0
 800c1cc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
    uint8_t subscribeheader[ 7 ];
    uint8_t * pIndex;
    TransportOutVector_t pIoVector[ MQTT_SUB_UNSUB_MAX_VECTORS ];
    TransportOutVector_t * pIterator;
    uint8_t serializedTopicFieldLength[ MQTT_SUB_UNSUB_MAX_VECTORS ][ 2 ];
    size_t totalPacketLength = 0U;
 800c1d0:	2300      	movs	r3, #0
 800c1d2:	617b      	str	r3, [r7, #20]
    size_t ioVectorLength = 0U;
 800c1d4:	2300      	movs	r3, #0
 800c1d6:	65fb      	str	r3, [r7, #92]	; 0x5c
    size_t subscriptionsSent = 0U;
 800c1d8:	2300      	movs	r3, #0
 800c1da:	65bb      	str	r3, [r7, #88]	; 0x58
    /* For subscribe, only three vector slots are required per topic string. */
    const size_t subscriptionStringVectorSlots = 3U;
 800c1dc:	2303      	movs	r3, #3
 800c1de:	653b      	str	r3, [r7, #80]	; 0x50
    size_t vectorsAdded;
    size_t topicFieldLengthIndex;

    /* The vector array should be at least three element long as the topic
     * string needs these many vector elements to be stored. */
    assert( MQTT_SUB_UNSUB_MAX_VECTORS >= subscriptionStringVectorSlots );
 800c1e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c1e2:	2b04      	cmp	r3, #4
 800c1e4:	d906      	bls.n	800c1f4 <sendSubscribeWithoutCopy+0x38>
 800c1e6:	4b4f      	ldr	r3, [pc, #316]	; (800c324 <sendSubscribeWithoutCopy+0x168>)
 800c1e8:	4a4f      	ldr	r2, [pc, #316]	; (800c328 <sendSubscribeWithoutCopy+0x16c>)
 800c1ea:	f240 716c 	movw	r1, #1900	; 0x76c
 800c1ee:	484f      	ldr	r0, [pc, #316]	; (800c32c <sendSubscribeWithoutCopy+0x170>)
 800c1f0:	f006 f9ac 	bl	801254c <__assert_func>

    pIndex = subscribeheader;
 800c1f4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800c1f8:	64fb      	str	r3, [r7, #76]	; 0x4c
    pIterator = pIoVector;
 800c1fa:	f107 0320 	add.w	r3, r7, #32
 800c1fe:	663b      	str	r3, [r7, #96]	; 0x60

    pIndex = MQTT_SerializeSubscribeHeader( remainingLength,
 800c200:	887b      	ldrh	r3, [r7, #2]
 800c202:	461a      	mov	r2, r3
 800c204:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800c206:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800c208:	f001 fc62 	bl	800dad0 <MQTT_SerializeSubscribeHeader>
 800c20c:	64f8      	str	r0, [r7, #76]	; 0x4c
                                            pIndex,
                                            packetId );

    /* The header is to be sent first. */
    pIterator->iov_base = subscribeheader;
 800c20e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c210:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800c214:	601a      	str	r2, [r3, #0]
    /* More details at: https://github.com/FreeRTOS/coreMQTT/blob/main/MISRA.md#rule-182 */
    /* More details at: https://github.com/FreeRTOS/coreMQTT/blob/main/MISRA.md#rule-108 */
    /* coverity[misra_c_2012_rule_18_2_violation] */
    /* coverity[misra_c_2012_rule_10_8_violation] */
    pIterator->iov_len = ( size_t ) ( pIndex - subscribeheader );
 800c216:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800c21a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c21c:	1ad3      	subs	r3, r2, r3
 800c21e:	461a      	mov	r2, r3
 800c220:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c222:	605a      	str	r2, [r3, #4]
    totalPacketLength += pIterator->iov_len;
 800c224:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c226:	685a      	ldr	r2, [r3, #4]
 800c228:	697b      	ldr	r3, [r7, #20]
 800c22a:	4413      	add	r3, r2
 800c22c:	617b      	str	r3, [r7, #20]
    pIterator++;
 800c22e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c230:	3308      	adds	r3, #8
 800c232:	663b      	str	r3, [r7, #96]	; 0x60
    ioVectorLength++;
 800c234:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c236:	3301      	adds	r3, #1
 800c238:	65fb      	str	r3, [r7, #92]	; 0x5c

    while( ( status == MQTTSuccess ) && ( subscriptionsSent < subscriptionCount ) )
 800c23a:	e065      	b.n	800c308 <sendSubscribeWithoutCopy+0x14c>
    {
        /* Reset the index for next iteration. */
        topicFieldLengthIndex = 0;
 800c23c:	2300      	movs	r3, #0
 800c23e:	657b      	str	r3, [r7, #84]	; 0x54

        /* Check whether the subscription topic (with QoS) will fit in the
         * given vector. */
        while( ( ioVectorLength <= ( MQTT_SUB_UNSUB_MAX_VECTORS - subscriptionStringVectorSlots ) ) &&
 800c240:	e043      	b.n	800c2ca <sendSubscribeWithoutCopy+0x10e>
               ( subscriptionsSent < subscriptionCount ) )
        {
            /* The topic filter gets sent next. */
            vectorsAdded = addEncodedStringToVector( serializedTopicFieldLength[ topicFieldLengthIndex ],
 800c242:	f107 0218 	add.w	r2, r7, #24
 800c246:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c248:	005b      	lsls	r3, r3, #1
 800c24a:	18d0      	adds	r0, r2, r3
                                                     pSubscriptionList[ subscriptionsSent ].pTopicFilter,
 800c24c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c24e:	4613      	mov	r3, r2
 800c250:	005b      	lsls	r3, r3, #1
 800c252:	4413      	add	r3, r2
 800c254:	009b      	lsls	r3, r3, #2
 800c256:	461a      	mov	r2, r3
 800c258:	68bb      	ldr	r3, [r7, #8]
 800c25a:	4413      	add	r3, r2
            vectorsAdded = addEncodedStringToVector( serializedTopicFieldLength[ topicFieldLengthIndex ],
 800c25c:	6859      	ldr	r1, [r3, #4]
                                                     pSubscriptionList[ subscriptionsSent ].topicFilterLength,
 800c25e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c260:	4613      	mov	r3, r2
 800c262:	005b      	lsls	r3, r3, #1
 800c264:	4413      	add	r3, r2
 800c266:	009b      	lsls	r3, r3, #2
 800c268:	461a      	mov	r2, r3
 800c26a:	68bb      	ldr	r3, [r7, #8]
 800c26c:	4413      	add	r3, r2
            vectorsAdded = addEncodedStringToVector( serializedTopicFieldLength[ topicFieldLengthIndex ],
 800c26e:	891a      	ldrh	r2, [r3, #8]
 800c270:	f107 0314 	add.w	r3, r7, #20
 800c274:	9300      	str	r3, [sp, #0]
 800c276:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c278:	f7ff ff3c 	bl	800c0f4 <addEncodedStringToVector>
 800c27c:	64b8      	str	r0, [r7, #72]	; 0x48
                                                     pIterator,
                                                     &totalPacketLength );

            /* Update the pointer after the above operation. */
            pIterator = &pIterator[ vectorsAdded ];
 800c27e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c280:	00db      	lsls	r3, r3, #3
 800c282:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c284:	4413      	add	r3, r2
 800c286:	663b      	str	r3, [r7, #96]	; 0x60

            /* Lastly, the QoS gets sent. */
            pIterator->iov_base = &( pSubscriptionList[ subscriptionsSent ].qos );
 800c288:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c28a:	4613      	mov	r3, r2
 800c28c:	005b      	lsls	r3, r3, #1
 800c28e:	4413      	add	r3, r2
 800c290:	009b      	lsls	r3, r3, #2
 800c292:	461a      	mov	r2, r3
 800c294:	68bb      	ldr	r3, [r7, #8]
 800c296:	4413      	add	r3, r2
 800c298:	461a      	mov	r2, r3
 800c29a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c29c:	601a      	str	r2, [r3, #0]
            pIterator->iov_len = 1U;
 800c29e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c2a0:	2201      	movs	r2, #1
 800c2a2:	605a      	str	r2, [r3, #4]
            totalPacketLength += pIterator->iov_len;
 800c2a4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c2a6:	685a      	ldr	r2, [r3, #4]
 800c2a8:	697b      	ldr	r3, [r7, #20]
 800c2aa:	4413      	add	r3, r2
 800c2ac:	617b      	str	r3, [r7, #20]

            /* Increment the pointer. */
            pIterator++;
 800c2ae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c2b0:	3308      	adds	r3, #8
 800c2b2:	663b      	str	r3, [r7, #96]	; 0x60

            /* Two slots get used by the topic string length and topic string.
             * One slot gets used by the quality of service. */
            ioVectorLength += vectorsAdded + 1U;
 800c2b4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c2b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c2b8:	4413      	add	r3, r2
 800c2ba:	3301      	adds	r3, #1
 800c2bc:	65fb      	str	r3, [r7, #92]	; 0x5c

            subscriptionsSent++;
 800c2be:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c2c0:	3301      	adds	r3, #1
 800c2c2:	65bb      	str	r3, [r7, #88]	; 0x58

            /* The index needs to be updated for next iteration. */
            topicFieldLengthIndex++;
 800c2c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c2c6:	3301      	adds	r3, #1
 800c2c8:	657b      	str	r3, [r7, #84]	; 0x54
        while( ( ioVectorLength <= ( MQTT_SUB_UNSUB_MAX_VECTORS - subscriptionStringVectorSlots ) ) &&
 800c2ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c2cc:	f1c3 0304 	rsb	r3, r3, #4
 800c2d0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c2d2:	429a      	cmp	r2, r3
 800c2d4:	d803      	bhi.n	800c2de <sendSubscribeWithoutCopy+0x122>
 800c2d6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	429a      	cmp	r2, r3
 800c2dc:	d3b1      	bcc.n	800c242 <sendSubscribeWithoutCopy+0x86>
        }

        if( sendMessageVector( pContext,
 800c2de:	f107 0320 	add.w	r3, r7, #32
 800c2e2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c2e4:	4619      	mov	r1, r3
 800c2e6:	68f8      	ldr	r0, [r7, #12]
 800c2e8:	f7fe ff3a 	bl	800b160 <sendMessageVector>
 800c2ec:	4603      	mov	r3, r0
                               pIoVector,
                               ioVectorLength ) != ( int32_t ) totalPacketLength )
 800c2ee:	697a      	ldr	r2, [r7, #20]
        if( sendMessageVector( pContext,
 800c2f0:	4293      	cmp	r3, r2
 800c2f2:	d002      	beq.n	800c2fa <sendSubscribeWithoutCopy+0x13e>
        {
            status = MQTTSendFailed;
 800c2f4:	2303      	movs	r3, #3
 800c2f6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        }

        /* Update the iterator for the next potential loop iteration. */
        pIterator = pIoVector;
 800c2fa:	f107 0320 	add.w	r3, r7, #32
 800c2fe:	663b      	str	r3, [r7, #96]	; 0x60
        /* Reset the vector length for the next potential loop iteration. */
        ioVectorLength = 0U;
 800c300:	2300      	movs	r3, #0
 800c302:	65fb      	str	r3, [r7, #92]	; 0x5c
        /* Reset the packet length for the next potential loop iteration. */
        totalPacketLength = 0U;
 800c304:	2300      	movs	r3, #0
 800c306:	617b      	str	r3, [r7, #20]
    while( ( status == MQTTSuccess ) && ( subscriptionsSent < subscriptionCount ) )
 800c308:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800c30c:	2b00      	cmp	r3, #0
 800c30e:	d103      	bne.n	800c318 <sendSubscribeWithoutCopy+0x15c>
 800c310:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	429a      	cmp	r2, r3
 800c316:	d391      	bcc.n	800c23c <sendSubscribeWithoutCopy+0x80>
    }

    return status;
 800c318:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800c31c:	4618      	mov	r0, r3
 800c31e:	3768      	adds	r7, #104	; 0x68
 800c320:	46bd      	mov	sp, r7
 800c322:	bd80      	pop	{r7, pc}
 800c324:	08014d7c 	.word	0x08014d7c
 800c328:	080157bc 	.word	0x080157bc
 800c32c:	08014a70 	.word	0x08014a70

0800c330 <sendPublishWithoutCopy>:
static MQTTStatus_t sendPublishWithoutCopy( MQTTContext_t * pContext,
                                            const MQTTPublishInfo_t * pPublishInfo,
                                            const uint8_t * pMqttHeader,
                                            size_t headerSize,
                                            uint16_t packetId )
{
 800c330:	b580      	push	{r7, lr}
 800c332:	b092      	sub	sp, #72	; 0x48
 800c334:	af00      	add	r7, sp, #0
 800c336:	60f8      	str	r0, [r7, #12]
 800c338:	60b9      	str	r1, [r7, #8]
 800c33a:	607a      	str	r2, [r7, #4]
 800c33c:	603b      	str	r3, [r7, #0]
    MQTTStatus_t status = MQTTSuccess;
 800c33e:	2300      	movs	r3, #0
 800c340:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    uint8_t serializedPacketID[ 2 ];
    TransportOutVector_t pIoVector[ 4 ];
    size_t ioVectorLength;
    size_t totalMessageLength;
    const size_t packetIDLength = 2U;
 800c344:	2302      	movs	r3, #2
 800c346:	63bb      	str	r3, [r7, #56]	; 0x38

    /* The header is sent first. */
    pIoVector[ 0U ].iov_base = pMqttHeader;
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	617b      	str	r3, [r7, #20]
    pIoVector[ 0U ].iov_len = headerSize;
 800c34c:	683b      	ldr	r3, [r7, #0]
 800c34e:	61bb      	str	r3, [r7, #24]
    totalMessageLength = headerSize;
 800c350:	683b      	ldr	r3, [r7, #0]
 800c352:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Then the topic name has to be sent. */
    pIoVector[ 1U ].iov_base = pPublishInfo->pTopicName;
 800c354:	68bb      	ldr	r3, [r7, #8]
 800c356:	685b      	ldr	r3, [r3, #4]
 800c358:	61fb      	str	r3, [r7, #28]
    pIoVector[ 1U ].iov_len = pPublishInfo->topicNameLength;
 800c35a:	68bb      	ldr	r3, [r7, #8]
 800c35c:	891b      	ldrh	r3, [r3, #8]
 800c35e:	623b      	str	r3, [r7, #32]
    totalMessageLength += pPublishInfo->topicNameLength;
 800c360:	68bb      	ldr	r3, [r7, #8]
 800c362:	891b      	ldrh	r3, [r3, #8]
 800c364:	461a      	mov	r2, r3
 800c366:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c368:	4413      	add	r3, r2
 800c36a:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* The next field's index should be 2 as the first two fields
     * have been filled in. */
    ioVectorLength = 2U;
 800c36c:	2302      	movs	r3, #2
 800c36e:	643b      	str	r3, [r7, #64]	; 0x40

    if( pPublishInfo->qos > MQTTQoS0 )
 800c370:	68bb      	ldr	r3, [r7, #8]
 800c372:	781b      	ldrb	r3, [r3, #0]
 800c374:	2b00      	cmp	r3, #0
 800c376:	d021      	beq.n	800c3bc <sendPublishWithoutCopy+0x8c>
    {
        /* Encode the packet ID. */
        serializedPacketID[ 0 ] = ( ( uint8_t ) ( ( packetId ) >> 8 ) );
 800c378:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800c37c:	0a1b      	lsrs	r3, r3, #8
 800c37e:	b29b      	uxth	r3, r3
 800c380:	b2db      	uxtb	r3, r3
 800c382:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
        serializedPacketID[ 1 ] = ( ( uint8_t ) ( ( packetId ) & 0x00ffU ) );
 800c386:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800c38a:	b2db      	uxtb	r3, r3
 800c38c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

        pIoVector[ ioVectorLength ].iov_base = serializedPacketID;
 800c390:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c392:	00db      	lsls	r3, r3, #3
 800c394:	3348      	adds	r3, #72	; 0x48
 800c396:	443b      	add	r3, r7
 800c398:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800c39c:	f843 2c34 	str.w	r2, [r3, #-52]
        pIoVector[ ioVectorLength ].iov_len = packetIDLength;
 800c3a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c3a2:	00db      	lsls	r3, r3, #3
 800c3a4:	3348      	adds	r3, #72	; 0x48
 800c3a6:	443b      	add	r3, r7
 800c3a8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c3aa:	f843 2c30 	str.w	r2, [r3, #-48]

        ioVectorLength++;
 800c3ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c3b0:	3301      	adds	r3, #1
 800c3b2:	643b      	str	r3, [r7, #64]	; 0x40
        totalMessageLength += packetIDLength;
 800c3b4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c3b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3b8:	4413      	add	r3, r2
 800c3ba:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

    /* Publish packets are allowed to contain no payload. */
    if( pPublishInfo->payloadLength > 0U )
 800c3bc:	68bb      	ldr	r3, [r7, #8]
 800c3be:	691b      	ldr	r3, [r3, #16]
 800c3c0:	2b00      	cmp	r3, #0
 800c3c2:	d017      	beq.n	800c3f4 <sendPublishWithoutCopy+0xc4>
    {
        pIoVector[ ioVectorLength ].iov_base = pPublishInfo->pPayload;
 800c3c4:	68bb      	ldr	r3, [r7, #8]
 800c3c6:	68da      	ldr	r2, [r3, #12]
 800c3c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c3ca:	00db      	lsls	r3, r3, #3
 800c3cc:	3348      	adds	r3, #72	; 0x48
 800c3ce:	443b      	add	r3, r7
 800c3d0:	f843 2c34 	str.w	r2, [r3, #-52]
        pIoVector[ ioVectorLength ].iov_len = pPublishInfo->payloadLength;
 800c3d4:	68bb      	ldr	r3, [r7, #8]
 800c3d6:	691a      	ldr	r2, [r3, #16]
 800c3d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c3da:	00db      	lsls	r3, r3, #3
 800c3dc:	3348      	adds	r3, #72	; 0x48
 800c3de:	443b      	add	r3, r7
 800c3e0:	f843 2c30 	str.w	r2, [r3, #-48]

        ioVectorLength++;
 800c3e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c3e6:	3301      	adds	r3, #1
 800c3e8:	643b      	str	r3, [r7, #64]	; 0x40
        totalMessageLength += pPublishInfo->payloadLength;
 800c3ea:	68bb      	ldr	r3, [r7, #8]
 800c3ec:	691b      	ldr	r3, [r3, #16]
 800c3ee:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c3f0:	4413      	add	r3, r2
 800c3f2:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

    if( sendMessageVector( pContext, pIoVector, ioVectorLength ) != ( int32_t ) totalMessageLength )
 800c3f4:	f107 0314 	add.w	r3, r7, #20
 800c3f8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c3fa:	4619      	mov	r1, r3
 800c3fc:	68f8      	ldr	r0, [r7, #12]
 800c3fe:	f7fe feaf 	bl	800b160 <sendMessageVector>
 800c402:	4602      	mov	r2, r0
 800c404:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c406:	429a      	cmp	r2, r3
 800c408:	d002      	beq.n	800c410 <sendPublishWithoutCopy+0xe0>
    {
        status = MQTTSendFailed;
 800c40a:	2303      	movs	r3, #3
 800c40c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }

    return status;
 800c410:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800c414:	4618      	mov	r0, r3
 800c416:	3748      	adds	r7, #72	; 0x48
 800c418:	46bd      	mov	sp, r7
 800c41a:	bd80      	pop	{r7, pc}

0800c41c <sendConnectWithoutCopy>:

static MQTTStatus_t sendConnectWithoutCopy( MQTTContext_t * pContext,
                                            const MQTTConnectInfo_t * pConnectInfo,
                                            const MQTTPublishInfo_t * pWillInfo,
                                            size_t remainingLength )
{
 800c41c:	b580      	push	{r7, lr}
 800c41e:	b0ac      	sub	sp, #176	; 0xb0
 800c420:	af02      	add	r7, sp, #8
 800c422:	60f8      	str	r0, [r7, #12]
 800c424:	60b9      	str	r1, [r7, #8]
 800c426:	607a      	str	r2, [r7, #4]
 800c428:	603b      	str	r3, [r7, #0]
    MQTTStatus_t status = MQTTSuccess;
 800c42a:	2300      	movs	r3, #0
 800c42c:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
    TransportOutVector_t * iterator;
    size_t ioVectorLength = 0U;
 800c430:	2300      	movs	r3, #0
 800c432:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    size_t totalMessageLength = 0U;
 800c436:	2300      	movs	r3, #0
 800c438:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    int32_t bytesSentOrError;

    /* Connect packet header can be of maximum 15 bytes. */
    uint8_t connectPacketHeader[ 15 ];
    uint8_t * pIndex = connectPacketHeader;
 800c43c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800c440:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    uint8_t serializedPayloadLength[ 2 ];
    uint8_t serializedUsernameLength[ 2 ];
    uint8_t serializedPasswordLength[ 2 ];
    size_t vectorsAdded;

    iterator = pIoVector;
 800c444:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c448:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

    /* Validate arguments. */
    if( ( pWillInfo != NULL ) && ( pWillInfo->pTopicName == NULL ) )
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	2b00      	cmp	r3, #0
 800c450:	d007      	beq.n	800c462 <sendConnectWithoutCopy+0x46>
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	685b      	ldr	r3, [r3, #4]
 800c456:	2b00      	cmp	r3, #0
 800c458:	d103      	bne.n	800c462 <sendConnectWithoutCopy+0x46>
    {
        LogError( ( "pWillInfo->pTopicName cannot be NULL if Will is present." ) );
        status = MQTTBadParameter;
 800c45a:	2301      	movs	r3, #1
 800c45c:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 800c460:	e0ec      	b.n	800c63c <sendConnectWithoutCopy+0x220>
    }
    else
    {
        pIndex = MQTT_SerializeConnectFixedHeader( pIndex,
 800c462:	683b      	ldr	r3, [r7, #0]
 800c464:	687a      	ldr	r2, [r7, #4]
 800c466:	68b9      	ldr	r1, [r7, #8]
 800c468:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 800c46c:	f001 fa22 	bl	800d8b4 <MQTT_SerializeConnectFixedHeader>
 800c470:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98
                                                   pConnectInfo,
                                                   pWillInfo,
                                                   remainingLength );

        assert( ( pIndex - connectPacketHeader ) <= 15 );
 800c474:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800c478:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800c47c:	1ad3      	subs	r3, r2, r3
 800c47e:	2b0f      	cmp	r3, #15
 800c480:	dd06      	ble.n	800c490 <sendConnectWithoutCopy+0x74>
 800c482:	4b71      	ldr	r3, [pc, #452]	; (800c648 <sendConnectWithoutCopy+0x22c>)
 800c484:	4a71      	ldr	r2, [pc, #452]	; (800c64c <sendConnectWithoutCopy+0x230>)
 800c486:	f640 0172 	movw	r1, #2162	; 0x872
 800c48a:	4871      	ldr	r0, [pc, #452]	; (800c650 <sendConnectWithoutCopy+0x234>)
 800c48c:	f006 f85e 	bl	801254c <__assert_func>

        /* The header gets sent first. */
        iterator->iov_base = connectPacketHeader;
 800c490:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c494:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 800c498:	601a      	str	r2, [r3, #0]
        /* More details at: https://github.com/FreeRTOS/coreMQTT/blob/main/MISRA.md#rule-182 */
        /* More details at: https://github.com/FreeRTOS/coreMQTT/blob/main/MISRA.md#rule-108 */
        /* coverity[misra_c_2012_rule_18_2_violation] */
        /* coverity[misra_c_2012_rule_10_8_violation] */
        iterator->iov_len = ( size_t ) ( pIndex - connectPacketHeader );
 800c49a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800c49e:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800c4a2:	1ad3      	subs	r3, r2, r3
 800c4a4:	461a      	mov	r2, r3
 800c4a6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c4aa:	605a      	str	r2, [r3, #4]
        totalMessageLength += iterator->iov_len;
 800c4ac:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c4b0:	685a      	ldr	r2, [r3, #4]
 800c4b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c4b6:	4413      	add	r3, r2
 800c4b8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
        iterator++;
 800c4bc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c4c0:	3308      	adds	r3, #8
 800c4c2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        ioVectorLength++;
 800c4c6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c4ca:	3301      	adds	r3, #1
 800c4cc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

        /* Serialize the client ID. */
        vectorsAdded = addEncodedStringToVector( serializedClientIDLength,
 800c4d0:	68bb      	ldr	r3, [r7, #8]
 800c4d2:	6859      	ldr	r1, [r3, #4]
 800c4d4:	68bb      	ldr	r3, [r7, #8]
 800c4d6:	891a      	ldrh	r2, [r3, #8]
 800c4d8:	f107 0020 	add.w	r0, r7, #32
 800c4dc:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800c4e0:	9300      	str	r3, [sp, #0]
 800c4e2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c4e6:	f7ff fe05 	bl	800c0f4 <addEncodedStringToVector>
 800c4ea:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
                                                 pConnectInfo->clientIdentifierLength,
                                                 iterator,
                                                 &totalMessageLength );

        /* Update the iterator to point to the next empty slot. */
        iterator = &iterator[ vectorsAdded ];
 800c4ee:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800c4f2:	00db      	lsls	r3, r3, #3
 800c4f4:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800c4f8:	4413      	add	r3, r2
 800c4fa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        ioVectorLength += vectorsAdded;
 800c4fe:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800c502:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800c506:	4413      	add	r3, r2
 800c508:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

        if( pWillInfo != NULL )
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	2b00      	cmp	r3, #0
 800c510:	d03c      	beq.n	800c58c <sendConnectWithoutCopy+0x170>
        {
            /* Serialize the topic. */
            vectorsAdded = addEncodedStringToVector( serializedTopicLength,
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	6859      	ldr	r1, [r3, #4]
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	891a      	ldrh	r2, [r3, #8]
 800c51a:	f107 001c 	add.w	r0, r7, #28
 800c51e:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800c522:	9300      	str	r3, [sp, #0]
 800c524:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c528:	f7ff fde4 	bl	800c0f4 <addEncodedStringToVector>
 800c52c:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
                                                     pWillInfo->topicNameLength,
                                                     iterator,
                                                     &totalMessageLength );

            /* Update the iterator to point to the next empty slot. */
            iterator = &iterator[ vectorsAdded ];
 800c530:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800c534:	00db      	lsls	r3, r3, #3
 800c536:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800c53a:	4413      	add	r3, r2
 800c53c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
            ioVectorLength += vectorsAdded;
 800c540:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800c544:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800c548:	4413      	add	r3, r2
 800c54a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c


            /* Serialize the payload. Payload of last will and testament can be NULL. */
            vectorsAdded = addEncodedStringToVector( serializedPayloadLength,
                                                     pWillInfo->pPayload,
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	68d9      	ldr	r1, [r3, #12]
                                                     ( uint16_t ) pWillInfo->payloadLength,
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	691b      	ldr	r3, [r3, #16]
            vectorsAdded = addEncodedStringToVector( serializedPayloadLength,
 800c556:	b29a      	uxth	r2, r3
 800c558:	f107 0018 	add.w	r0, r7, #24
 800c55c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800c560:	9300      	str	r3, [sp, #0]
 800c562:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c566:	f7ff fdc5 	bl	800c0f4 <addEncodedStringToVector>
 800c56a:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
                                                     iterator,
                                                     &totalMessageLength );

            /* Update the iterator to point to the next empty slot. */
            iterator = &iterator[ vectorsAdded ];
 800c56e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800c572:	00db      	lsls	r3, r3, #3
 800c574:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800c578:	4413      	add	r3, r2
 800c57a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
            ioVectorLength += vectorsAdded;
 800c57e:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800c582:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800c586:	4413      	add	r3, r2
 800c588:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        }

        /* Encode the user name if provided. */
        if( pConnectInfo->pUserName != NULL )
 800c58c:	68bb      	ldr	r3, [r7, #8]
 800c58e:	68db      	ldr	r3, [r3, #12]
 800c590:	2b00      	cmp	r3, #0
 800c592:	d01d      	beq.n	800c5d0 <sendConnectWithoutCopy+0x1b4>
        {
            /* Serialize the user name string. */
            vectorsAdded = addEncodedStringToVector( serializedUsernameLength,
 800c594:	68bb      	ldr	r3, [r7, #8]
 800c596:	68d9      	ldr	r1, [r3, #12]
 800c598:	68bb      	ldr	r3, [r7, #8]
 800c59a:	8a1a      	ldrh	r2, [r3, #16]
 800c59c:	f107 0014 	add.w	r0, r7, #20
 800c5a0:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800c5a4:	9300      	str	r3, [sp, #0]
 800c5a6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c5aa:	f7ff fda3 	bl	800c0f4 <addEncodedStringToVector>
 800c5ae:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
                                                     pConnectInfo->userNameLength,
                                                     iterator,
                                                     &totalMessageLength );

            /* Update the iterator to point to the next empty slot. */
            iterator = &iterator[ vectorsAdded ];
 800c5b2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800c5b6:	00db      	lsls	r3, r3, #3
 800c5b8:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800c5bc:	4413      	add	r3, r2
 800c5be:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
            ioVectorLength += vectorsAdded;
 800c5c2:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800c5c6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800c5ca:	4413      	add	r3, r2
 800c5cc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        }

        /* Encode the password if provided. */
        if( pConnectInfo->pPassword != NULL )
 800c5d0:	68bb      	ldr	r3, [r7, #8]
 800c5d2:	695b      	ldr	r3, [r3, #20]
 800c5d4:	2b00      	cmp	r3, #0
 800c5d6:	d01d      	beq.n	800c614 <sendConnectWithoutCopy+0x1f8>
        {
            /* Serialize the user name string. */
            vectorsAdded = addEncodedStringToVector( serializedPasswordLength,
 800c5d8:	68bb      	ldr	r3, [r7, #8]
 800c5da:	6959      	ldr	r1, [r3, #20]
 800c5dc:	68bb      	ldr	r3, [r7, #8]
 800c5de:	8b1a      	ldrh	r2, [r3, #24]
 800c5e0:	f107 0010 	add.w	r0, r7, #16
 800c5e4:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800c5e8:	9300      	str	r3, [sp, #0]
 800c5ea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c5ee:	f7ff fd81 	bl	800c0f4 <addEncodedStringToVector>
 800c5f2:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
                                                     pConnectInfo->pPassword,
                                                     pConnectInfo->passwordLength,
                                                     iterator,
                                                     &totalMessageLength );
            /* Update the iterator to point to the next empty slot. */
            iterator = &iterator[ vectorsAdded ];
 800c5f6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800c5fa:	00db      	lsls	r3, r3, #3
 800c5fc:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800c600:	4413      	add	r3, r2
 800c602:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
            ioVectorLength += vectorsAdded;
 800c606:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800c60a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800c60e:	4413      	add	r3, r2
 800c610:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        }

        bytesSentOrError = sendMessageVector( pContext, pIoVector, ioVectorLength );
 800c614:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c618:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800c61c:	4619      	mov	r1, r3
 800c61e:	68f8      	ldr	r0, [r7, #12]
 800c620:	f7fe fd9e 	bl	800b160 <sendMessageVector>
 800c624:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90

        if( bytesSentOrError != ( int32_t ) totalMessageLength )
 800c628:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c62c:	461a      	mov	r2, r3
 800c62e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c632:	4293      	cmp	r3, r2
 800c634:	d002      	beq.n	800c63c <sendConnectWithoutCopy+0x220>
        {
            status = MQTTSendFailed;
 800c636:	2303      	movs	r3, #3
 800c638:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
        }
    }

    return status;
 800c63c:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
}
 800c640:	4618      	mov	r0, r3
 800c642:	37a8      	adds	r7, #168	; 0xa8
 800c644:	46bd      	mov	sp, r7
 800c646:	bd80      	pop	{r7, pc}
 800c648:	08014df4 	.word	0x08014df4
 800c64c:	080157d8 	.word	0x080157d8
 800c650:	08014a70 	.word	0x08014a70

0800c654 <receiveConnack>:
static MQTTStatus_t receiveConnack( const MQTTContext_t * pContext,
                                    uint32_t timeoutMs,
                                    bool cleanSession,
                                    MQTTPacketInfo_t * pIncomingPacket,
                                    bool * pSessionPresent )
{
 800c654:	b580      	push	{r7, lr}
 800c656:	b08c      	sub	sp, #48	; 0x30
 800c658:	af02      	add	r7, sp, #8
 800c65a:	60f8      	str	r0, [r7, #12]
 800c65c:	60b9      	str	r1, [r7, #8]
 800c65e:	603b      	str	r3, [r7, #0]
 800c660:	4613      	mov	r3, r2
 800c662:	71fb      	strb	r3, [r7, #7]
    MQTTStatus_t status = MQTTSuccess;
 800c664:	2300      	movs	r3, #0
 800c666:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    MQTTGetCurrentTimeFunc_t getTimeStamp = NULL;
 800c66a:	2300      	movs	r3, #0
 800c66c:	61bb      	str	r3, [r7, #24]
    uint32_t entryTimeMs = 0U, remainingTimeMs = 0U, timeTakenMs = 0U;
 800c66e:	2300      	movs	r3, #0
 800c670:	617b      	str	r3, [r7, #20]
 800c672:	2300      	movs	r3, #0
 800c674:	623b      	str	r3, [r7, #32]
 800c676:	2300      	movs	r3, #0
 800c678:	613b      	str	r3, [r7, #16]
    bool breakFromLoop = false;
 800c67a:	2300      	movs	r3, #0
 800c67c:	77fb      	strb	r3, [r7, #31]
    uint16_t loopCount = 0U;
 800c67e:	2300      	movs	r3, #0
 800c680:	83bb      	strh	r3, [r7, #28]

    assert( pContext != NULL );
 800c682:	68fb      	ldr	r3, [r7, #12]
 800c684:	2b00      	cmp	r3, #0
 800c686:	d106      	bne.n	800c696 <receiveConnack+0x42>
 800c688:	4b4e      	ldr	r3, [pc, #312]	; (800c7c4 <receiveConnack+0x170>)
 800c68a:	4a4f      	ldr	r2, [pc, #316]	; (800c7c8 <receiveConnack+0x174>)
 800c68c:	f640 01da 	movw	r1, #2266	; 0x8da
 800c690:	484e      	ldr	r0, [pc, #312]	; (800c7cc <receiveConnack+0x178>)
 800c692:	f005 ff5b 	bl	801254c <__assert_func>
    assert( pIncomingPacket != NULL );
 800c696:	683b      	ldr	r3, [r7, #0]
 800c698:	2b00      	cmp	r3, #0
 800c69a:	d106      	bne.n	800c6aa <receiveConnack+0x56>
 800c69c:	4b4c      	ldr	r3, [pc, #304]	; (800c7d0 <receiveConnack+0x17c>)
 800c69e:	4a4a      	ldr	r2, [pc, #296]	; (800c7c8 <receiveConnack+0x174>)
 800c6a0:	f640 01db 	movw	r1, #2267	; 0x8db
 800c6a4:	4849      	ldr	r0, [pc, #292]	; (800c7cc <receiveConnack+0x178>)
 800c6a6:	f005 ff51 	bl	801254c <__assert_func>
    assert( pContext->getTime != NULL );
 800c6aa:	68fb      	ldr	r3, [r7, #12]
 800c6ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c6ae:	2b00      	cmp	r3, #0
 800c6b0:	d106      	bne.n	800c6c0 <receiveConnack+0x6c>
 800c6b2:	4b48      	ldr	r3, [pc, #288]	; (800c7d4 <receiveConnack+0x180>)
 800c6b4:	4a44      	ldr	r2, [pc, #272]	; (800c7c8 <receiveConnack+0x174>)
 800c6b6:	f640 01dc 	movw	r1, #2268	; 0x8dc
 800c6ba:	4844      	ldr	r0, [pc, #272]	; (800c7cc <receiveConnack+0x178>)
 800c6bc:	f005 ff46 	bl	801254c <__assert_func>

    getTimeStamp = pContext->getTime;
 800c6c0:	68fb      	ldr	r3, [r7, #12]
 800c6c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c6c4:	61bb      	str	r3, [r7, #24]

    /* Get the entry time for the function. */
    entryTimeMs = getTimeStamp();
 800c6c6:	69bb      	ldr	r3, [r7, #24]
 800c6c8:	4798      	blx	r3
 800c6ca:	6178      	str	r0, [r7, #20]
    {
        /* Transport read for incoming CONNACK packet type and length.
         * MQTT_GetIncomingPacketTypeAndLength is a blocking call and it is
         * returned after a transport receive timeout, an error, or a successful
         * receive of packet type and length. */
        status = MQTT_GetIncomingPacketTypeAndLength( pContext->transportInterface.recv,
 800c6cc:	68fb      	ldr	r3, [r7, #12]
 800c6ce:	6918      	ldr	r0, [r3, #16]
 800c6d0:	68fb      	ldr	r3, [r7, #12]
 800c6d2:	69db      	ldr	r3, [r3, #28]
 800c6d4:	683a      	ldr	r2, [r7, #0]
 800c6d6:	4619      	mov	r1, r3
 800c6d8:	f001 fb8c 	bl	800ddf4 <MQTT_GetIncomingPacketTypeAndLength>
 800c6dc:	4603      	mov	r3, r0
 800c6de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
         * 2. If timeoutMs is 0:
         *    Loop times out based on the maximum number of retries config
         *    MQTT_MAX_CONNACK_RECEIVE_RETRY_COUNT. This config will control
         *    maximum the number of retry attempts to read the CONNACK packet.
         *    A value of 0 for the config will try once to read CONNACK. */
        if( timeoutMs > 0U )
 800c6e2:	68bb      	ldr	r3, [r7, #8]
 800c6e4:	2b00      	cmp	r3, #0
 800c6e6:	d00e      	beq.n	800c706 <receiveConnack+0xb2>
        {
            breakFromLoop = calculateElapsedTime( getTimeStamp(), entryTimeMs ) >= timeoutMs;
 800c6e8:	69bb      	ldr	r3, [r7, #24]
 800c6ea:	4798      	blx	r3
 800c6ec:	4603      	mov	r3, r0
 800c6ee:	6979      	ldr	r1, [r7, #20]
 800c6f0:	4618      	mov	r0, r3
 800c6f2:	f7fe fea9 	bl	800b448 <calculateElapsedTime>
 800c6f6:	4602      	mov	r2, r0
 800c6f8:	68bb      	ldr	r3, [r7, #8]
 800c6fa:	4293      	cmp	r3, r2
 800c6fc:	bf94      	ite	ls
 800c6fe:	2301      	movls	r3, #1
 800c700:	2300      	movhi	r3, #0
 800c702:	77fb      	strb	r3, [r7, #31]
 800c704:	e008      	b.n	800c718 <receiveConnack+0xc4>
        }
        else
        {
            breakFromLoop = loopCount >= MQTT_MAX_CONNACK_RECEIVE_RETRY_COUNT;
 800c706:	8bbb      	ldrh	r3, [r7, #28]
 800c708:	2b04      	cmp	r3, #4
 800c70a:	bf8c      	ite	hi
 800c70c:	2301      	movhi	r3, #1
 800c70e:	2300      	movls	r3, #0
 800c710:	77fb      	strb	r3, [r7, #31]
            loopCount++;
 800c712:	8bbb      	ldrh	r3, [r7, #28]
 800c714:	3301      	adds	r3, #1
 800c716:	83bb      	strh	r3, [r7, #28]
        }

        /* Loop until there is data to read or if we have exceeded the timeout/retries. */
    } while( ( status == MQTTNoDataAvailable ) && ( breakFromLoop == false ) );
 800c718:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c71c:	2b07      	cmp	r3, #7
 800c71e:	d105      	bne.n	800c72c <receiveConnack+0xd8>
 800c720:	7ffb      	ldrb	r3, [r7, #31]
 800c722:	f083 0301 	eor.w	r3, r3, #1
 800c726:	b2db      	uxtb	r3, r3
 800c728:	2b00      	cmp	r3, #0
 800c72a:	d1cf      	bne.n	800c6cc <receiveConnack+0x78>

    if( status == MQTTSuccess )
 800c72c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c730:	2b00      	cmp	r3, #0
 800c732:	d123      	bne.n	800c77c <receiveConnack+0x128>
    {
        /* Time taken in this function so far. */
        timeTakenMs = calculateElapsedTime( getTimeStamp(), entryTimeMs );
 800c734:	69bb      	ldr	r3, [r7, #24]
 800c736:	4798      	blx	r3
 800c738:	4603      	mov	r3, r0
 800c73a:	6979      	ldr	r1, [r7, #20]
 800c73c:	4618      	mov	r0, r3
 800c73e:	f7fe fe83 	bl	800b448 <calculateElapsedTime>
 800c742:	6138      	str	r0, [r7, #16]

        if( timeTakenMs < timeoutMs )
 800c744:	693a      	ldr	r2, [r7, #16]
 800c746:	68bb      	ldr	r3, [r7, #8]
 800c748:	429a      	cmp	r2, r3
 800c74a:	d203      	bcs.n	800c754 <receiveConnack+0x100>
        {
            /* Calculate remaining time for receiving the remainder of
             * the packet. */
            remainingTimeMs = timeoutMs - timeTakenMs;
 800c74c:	68ba      	ldr	r2, [r7, #8]
 800c74e:	693b      	ldr	r3, [r7, #16]
 800c750:	1ad3      	subs	r3, r2, r3
 800c752:	623b      	str	r3, [r7, #32]
         * Invoking receivePacket with remainingTime as 0 would attempt to
         * recv from network once. If using retries, the remainder of the
         * CONNACK packet is tried to be read only once. Reading once would be
         * good as the packet type and remaining length was already read. Hence,
         * the probability of the remaining 2 bytes available to read is very high. */
        if( pIncomingPacket->type == MQTT_PACKET_TYPE_CONNACK )
 800c754:	683b      	ldr	r3, [r7, #0]
 800c756:	781b      	ldrb	r3, [r3, #0]
 800c758:	2b20      	cmp	r3, #32
 800c75a:	d10c      	bne.n	800c776 <receiveConnack+0x122>
        {
            status = receivePacket( pContext,
 800c75c:	683b      	ldr	r3, [r7, #0]
 800c75e:	6a3a      	ldr	r2, [r7, #32]
 800c760:	9201      	str	r2, [sp, #4]
 800c762:	68da      	ldr	r2, [r3, #12]
 800c764:	9200      	str	r2, [sp, #0]
 800c766:	cb0e      	ldmia	r3, {r1, r2, r3}
 800c768:	68f8      	ldr	r0, [r7, #12]
 800c76a:	f7ff f869 	bl	800b840 <receivePacket>
 800c76e:	4603      	mov	r3, r0
 800c770:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c774:	e002      	b.n	800c77c <receiveConnack+0x128>
        {
            LogError( ( "Incorrect packet type %X received while expecting"
                        " CONNACK(%X).",
                        ( unsigned int ) pIncomingPacket->type,
                        MQTT_PACKET_TYPE_CONNACK ) );
            status = MQTTBadResponse;
 800c776:	2305      	movs	r3, #5
 800c778:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
    }

    if( status == MQTTSuccess )
 800c77c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c780:	2b00      	cmp	r3, #0
 800c782:	d10b      	bne.n	800c79c <receiveConnack+0x148>
    {
        /* Update the packet info pointer to the buffer read. */
        pIncomingPacket->pRemainingData = pContext->networkBuffer.pBuffer;
 800c784:	68fb      	ldr	r3, [r7, #12]
 800c786:	6a1a      	ldr	r2, [r3, #32]
 800c788:	683b      	ldr	r3, [r7, #0]
 800c78a:	605a      	str	r2, [r3, #4]

        /* Deserialize CONNACK. */
        status = MQTT_DeserializeAck( pIncomingPacket, NULL, pSessionPresent );
 800c78c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c78e:	2100      	movs	r1, #0
 800c790:	6838      	ldr	r0, [r7, #0]
 800c792:	f001 fabc 	bl	800dd0e <MQTT_DeserializeAck>
 800c796:	4603      	mov	r3, r0
 800c798:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If a clean session is requested, a session present should not be set by
     * broker. */
    if( status == MQTTSuccess )
 800c79c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c7a0:	2b00      	cmp	r3, #0
 800c7a2:	d109      	bne.n	800c7b8 <receiveConnack+0x164>
    {
        if( ( cleanSession == true ) && ( *pSessionPresent == true ) )
 800c7a4:	79fb      	ldrb	r3, [r7, #7]
 800c7a6:	2b00      	cmp	r3, #0
 800c7a8:	d006      	beq.n	800c7b8 <receiveConnack+0x164>
 800c7aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7ac:	781b      	ldrb	r3, [r3, #0]
 800c7ae:	2b00      	cmp	r3, #0
 800c7b0:	d002      	beq.n	800c7b8 <receiveConnack+0x164>
        {
            LogError( ( "Unexpected session present flag in CONNACK response from broker."
                        " CONNECT request with clean session was made with broker." ) );
            status = MQTTBadResponse;
 800c7b2:	2305      	movs	r3, #5
 800c7b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    {
        LogError( ( "CONNACK recv failed with status = %s.",
                    MQTT_Status_strerror( status ) ) );
    }

    return status;
 800c7b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800c7bc:	4618      	mov	r0, r3
 800c7be:	3728      	adds	r7, #40	; 0x28
 800c7c0:	46bd      	mov	sp, r7
 800c7c2:	bd80      	pop	{r7, pc}
 800c7c4:	08014b4c 	.word	0x08014b4c
 800c7c8:	080157f0 	.word	0x080157f0
 800c7cc:	08014a70 	.word	0x08014a70
 800c7d0:	08014d1c 	.word	0x08014d1c
 800c7d4:	08014b70 	.word	0x08014b70

0800c7d8 <handleSessionResumption>:

/*-----------------------------------------------------------*/

static MQTTStatus_t handleSessionResumption( MQTTContext_t * pContext,
                                             bool sessionPresent )
{
 800c7d8:	b580      	push	{r7, lr}
 800c7da:	b086      	sub	sp, #24
 800c7dc:	af00      	add	r7, sp, #0
 800c7de:	6078      	str	r0, [r7, #4]
 800c7e0:	460b      	mov	r3, r1
 800c7e2:	70fb      	strb	r3, [r7, #3]
    MQTTStatus_t status = MQTTSuccess;
 800c7e4:	2300      	movs	r3, #0
 800c7e6:	75fb      	strb	r3, [r7, #23]
    MQTTStateCursor_t cursor = MQTT_STATE_CURSOR_INITIALIZER;
 800c7e8:	2300      	movs	r3, #0
 800c7ea:	613b      	str	r3, [r7, #16]
    uint16_t packetId = MQTT_PACKET_ID_INVALID;
 800c7ec:	2300      	movs	r3, #0
 800c7ee:	82bb      	strh	r3, [r7, #20]
    MQTTPublishState_t state = MQTTStateNull;
 800c7f0:	2300      	movs	r3, #0
 800c7f2:	73fb      	strb	r3, [r7, #15]

    assert( pContext != NULL );
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	2b00      	cmp	r3, #0
 800c7f8:	d106      	bne.n	800c808 <handleSessionResumption+0x30>
 800c7fa:	4b2c      	ldr	r3, [pc, #176]	; (800c8ac <handleSessionResumption+0xd4>)
 800c7fc:	4a2c      	ldr	r2, [pc, #176]	; (800c8b0 <handleSessionResumption+0xd8>)
 800c7fe:	f640 1152 	movw	r1, #2386	; 0x952
 800c802:	482c      	ldr	r0, [pc, #176]	; (800c8b4 <handleSessionResumption+0xdc>)
 800c804:	f005 fea2 	bl	801254c <__assert_func>

    /* Reset the index and clear the buffer when a new session is established. */
    pContext->index = 0;
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	2200      	movs	r2, #0
 800c80c:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) memset( pContext->networkBuffer.pBuffer, 0, pContext->networkBuffer.size );
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	6a18      	ldr	r0, [r3, #32]
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c816:	461a      	mov	r2, r3
 800c818:	2100      	movs	r1, #0
 800c81a:	f006 f822 	bl	8012862 <memset>

    if( sessionPresent == true )
 800c81e:	78fb      	ldrb	r3, [r7, #3]
 800c820:	2b00      	cmp	r3, #0
 800c822:	d023      	beq.n	800c86c <handleSessionResumption+0x94>
    {
        /* Get the next packet ID for which a PUBREL need to be resent. */
        packetId = MQTT_PubrelToResend( pContext, &cursor, &state );
 800c824:	f107 020f 	add.w	r2, r7, #15
 800c828:	f107 0310 	add.w	r3, r7, #16
 800c82c:	4619      	mov	r1, r3
 800c82e:	6878      	ldr	r0, [r7, #4]
 800c830:	f002 f8ed 	bl	800ea0e <MQTT_PubrelToResend>
 800c834:	4603      	mov	r3, r0
 800c836:	82bb      	strh	r3, [r7, #20]

        /* Resend all the PUBREL acks after session is reestablished. */
        while( ( packetId != MQTT_PACKET_ID_INVALID ) &&
 800c838:	e011      	b.n	800c85e <handleSessionResumption+0x86>
               ( status == MQTTSuccess ) )
        {
            status = sendPublishAcks( pContext, packetId, state );
 800c83a:	7bfa      	ldrb	r2, [r7, #15]
 800c83c:	8abb      	ldrh	r3, [r7, #20]
 800c83e:	4619      	mov	r1, r3
 800c840:	6878      	ldr	r0, [r7, #4]
 800c842:	f7ff f877 	bl	800b934 <sendPublishAcks>
 800c846:	4603      	mov	r3, r0
 800c848:	75fb      	strb	r3, [r7, #23]

            packetId = MQTT_PubrelToResend( pContext, &cursor, &state );
 800c84a:	f107 020f 	add.w	r2, r7, #15
 800c84e:	f107 0310 	add.w	r3, r7, #16
 800c852:	4619      	mov	r1, r3
 800c854:	6878      	ldr	r0, [r7, #4]
 800c856:	f002 f8da 	bl	800ea0e <MQTT_PubrelToResend>
 800c85a:	4603      	mov	r3, r0
 800c85c:	82bb      	strh	r3, [r7, #20]
        while( ( packetId != MQTT_PACKET_ID_INVALID ) &&
 800c85e:	8abb      	ldrh	r3, [r7, #20]
 800c860:	2b00      	cmp	r3, #0
 800c862:	d01d      	beq.n	800c8a0 <handleSessionResumption+0xc8>
 800c864:	7dfb      	ldrb	r3, [r7, #23]
 800c866:	2b00      	cmp	r3, #0
 800c868:	d0e7      	beq.n	800c83a <handleSessionResumption+0x62>
 800c86a:	e019      	b.n	800c8a0 <handleSessionResumption+0xc8>
        }
    }
    else
    {
        /* Clear any existing records if a new session is established. */
        if( pContext->outgoingPublishRecordMaxCount > 0U )
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	689b      	ldr	r3, [r3, #8]
 800c870:	2b00      	cmp	r3, #0
 800c872:	d008      	beq.n	800c886 <handleSessionResumption+0xae>
        {
            ( void ) memset( pContext->outgoingPublishRecords,
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	6818      	ldr	r0, [r3, #0]
                             0x00,
                             pContext->outgoingPublishRecordMaxCount * sizeof( *pContext->outgoingPublishRecords ) );
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	689b      	ldr	r3, [r3, #8]
            ( void ) memset( pContext->outgoingPublishRecords,
 800c87c:	009b      	lsls	r3, r3, #2
 800c87e:	461a      	mov	r2, r3
 800c880:	2100      	movs	r1, #0
 800c882:	f005 ffee 	bl	8012862 <memset>
        }

        if( pContext->incomingPublishRecordMaxCount > 0U )
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	68db      	ldr	r3, [r3, #12]
 800c88a:	2b00      	cmp	r3, #0
 800c88c:	d008      	beq.n	800c8a0 <handleSessionResumption+0xc8>
        {
            ( void ) memset( pContext->incomingPublishRecords,
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	6858      	ldr	r0, [r3, #4]
                             0x00,
                             pContext->incomingPublishRecordMaxCount * sizeof( *pContext->incomingPublishRecords ) );
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	68db      	ldr	r3, [r3, #12]
            ( void ) memset( pContext->incomingPublishRecords,
 800c896:	009b      	lsls	r3, r3, #2
 800c898:	461a      	mov	r2, r3
 800c89a:	2100      	movs	r1, #0
 800c89c:	f005 ffe1 	bl	8012862 <memset>
        }
    }

    return status;
 800c8a0:	7dfb      	ldrb	r3, [r7, #23]
}
 800c8a2:	4618      	mov	r0, r3
 800c8a4:	3718      	adds	r7, #24
 800c8a6:	46bd      	mov	sp, r7
 800c8a8:	bd80      	pop	{r7, pc}
 800c8aa:	bf00      	nop
 800c8ac:	08014b4c 	.word	0x08014b4c
 800c8b0:	08015800 	.word	0x08015800
 800c8b4:	08014a70 	.word	0x08014a70

0800c8b8 <validatePublishParams>:

static MQTTStatus_t validatePublishParams( const MQTTContext_t * pContext,
                                           const MQTTPublishInfo_t * pPublishInfo,
                                           uint16_t packetId )
{
 800c8b8:	b480      	push	{r7}
 800c8ba:	b087      	sub	sp, #28
 800c8bc:	af00      	add	r7, sp, #0
 800c8be:	60f8      	str	r0, [r7, #12]
 800c8c0:	60b9      	str	r1, [r7, #8]
 800c8c2:	4613      	mov	r3, r2
 800c8c4:	80fb      	strh	r3, [r7, #6]
    MQTTStatus_t status = MQTTSuccess;
 800c8c6:	2300      	movs	r3, #0
 800c8c8:	75fb      	strb	r3, [r7, #23]

    /* Validate arguments. */
    if( ( pContext == NULL ) || ( pPublishInfo == NULL ) )
 800c8ca:	68fb      	ldr	r3, [r7, #12]
 800c8cc:	2b00      	cmp	r3, #0
 800c8ce:	d002      	beq.n	800c8d6 <validatePublishParams+0x1e>
 800c8d0:	68bb      	ldr	r3, [r7, #8]
 800c8d2:	2b00      	cmp	r3, #0
 800c8d4:	d102      	bne.n	800c8dc <validatePublishParams+0x24>
    {
        LogError( ( "Argument cannot be NULL: pContext=%p, "
                    "pPublishInfo=%p.",
                    ( void * ) pContext,
                    ( void * ) pPublishInfo ) );
        status = MQTTBadParameter;
 800c8d6:	2301      	movs	r3, #1
 800c8d8:	75fb      	strb	r3, [r7, #23]
 800c8da:	e01e      	b.n	800c91a <validatePublishParams+0x62>
    }
    else if( ( pPublishInfo->qos != MQTTQoS0 ) && ( packetId == 0U ) )
 800c8dc:	68bb      	ldr	r3, [r7, #8]
 800c8de:	781b      	ldrb	r3, [r3, #0]
 800c8e0:	2b00      	cmp	r3, #0
 800c8e2:	d005      	beq.n	800c8f0 <validatePublishParams+0x38>
 800c8e4:	88fb      	ldrh	r3, [r7, #6]
 800c8e6:	2b00      	cmp	r3, #0
 800c8e8:	d102      	bne.n	800c8f0 <validatePublishParams+0x38>
    {
        LogError( ( "Packet Id is 0 for PUBLISH with QoS=%u.",
                    ( unsigned int ) pPublishInfo->qos ) );
        status = MQTTBadParameter;
 800c8ea:	2301      	movs	r3, #1
 800c8ec:	75fb      	strb	r3, [r7, #23]
 800c8ee:	e014      	b.n	800c91a <validatePublishParams+0x62>
    }
    else if( ( pPublishInfo->payloadLength > 0U ) && ( pPublishInfo->pPayload == NULL ) )
 800c8f0:	68bb      	ldr	r3, [r7, #8]
 800c8f2:	691b      	ldr	r3, [r3, #16]
 800c8f4:	2b00      	cmp	r3, #0
 800c8f6:	d006      	beq.n	800c906 <validatePublishParams+0x4e>
 800c8f8:	68bb      	ldr	r3, [r7, #8]
 800c8fa:	68db      	ldr	r3, [r3, #12]
 800c8fc:	2b00      	cmp	r3, #0
 800c8fe:	d102      	bne.n	800c906 <validatePublishParams+0x4e>
    {
        LogError( ( "A nonzero payload length requires a non-NULL payload: "
                    "payloadLength=%lu, pPayload=%p.",
                    ( unsigned long ) pPublishInfo->payloadLength,
                    pPublishInfo->pPayload ) );
        status = MQTTBadParameter;
 800c900:	2301      	movs	r3, #1
 800c902:	75fb      	strb	r3, [r7, #23]
 800c904:	e009      	b.n	800c91a <validatePublishParams+0x62>
    }
    else if( ( pContext->outgoingPublishRecords == NULL ) && ( pPublishInfo->qos > MQTTQoS0 ) )
 800c906:	68fb      	ldr	r3, [r7, #12]
 800c908:	681b      	ldr	r3, [r3, #0]
 800c90a:	2b00      	cmp	r3, #0
 800c90c:	d105      	bne.n	800c91a <validatePublishParams+0x62>
 800c90e:	68bb      	ldr	r3, [r7, #8]
 800c910:	781b      	ldrb	r3, [r3, #0]
 800c912:	2b00      	cmp	r3, #0
 800c914:	d001      	beq.n	800c91a <validatePublishParams+0x62>
    {
        LogError( ( "Trying to publish a QoS > MQTTQoS0 packet when outgoing publishes "
                    "for QoS1/QoS2 have not been enabled. Please, call MQTT_InitStatefulQoS "
                    "to initialize and enable the use of QoS1/QoS2 publishes." ) );
        status = MQTTBadParameter;
 800c916:	2301      	movs	r3, #1
 800c918:	75fb      	strb	r3, [r7, #23]
    else
    {
        /* MISRA else */
    }

    return status;
 800c91a:	7dfb      	ldrb	r3, [r7, #23]
}
 800c91c:	4618      	mov	r0, r3
 800c91e:	371c      	adds	r7, #28
 800c920:	46bd      	mov	sp, r7
 800c922:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c926:	4770      	bx	lr

0800c928 <MQTT_Init>:
MQTTStatus_t MQTT_Init( MQTTContext_t * pContext,
                        const TransportInterface_t * pTransportInterface,
                        MQTTGetCurrentTimeFunc_t getTimeFunction,
                        MQTTEventCallback_t userCallback,
                        const MQTTFixedBuffer_t * pNetworkBuffer )
{
 800c928:	b590      	push	{r4, r7, lr}
 800c92a:	b087      	sub	sp, #28
 800c92c:	af00      	add	r7, sp, #0
 800c92e:	60f8      	str	r0, [r7, #12]
 800c930:	60b9      	str	r1, [r7, #8]
 800c932:	607a      	str	r2, [r7, #4]
 800c934:	603b      	str	r3, [r7, #0]
    MQTTStatus_t status = MQTTSuccess;
 800c936:	2300      	movs	r3, #0
 800c938:	75fb      	strb	r3, [r7, #23]

    /* Validate arguments. */
    if( ( pContext == NULL ) || ( pTransportInterface == NULL ) ||
 800c93a:	68fb      	ldr	r3, [r7, #12]
 800c93c:	2b00      	cmp	r3, #0
 800c93e:	d005      	beq.n	800c94c <MQTT_Init+0x24>
 800c940:	68bb      	ldr	r3, [r7, #8]
 800c942:	2b00      	cmp	r3, #0
 800c944:	d002      	beq.n	800c94c <MQTT_Init+0x24>
 800c946:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c948:	2b00      	cmp	r3, #0
 800c94a:	d102      	bne.n	800c952 <MQTT_Init+0x2a>
                    "pTransportInterface=%p, "
                    "pNetworkBuffer=%p",
                    ( void * ) pContext,
                    ( void * ) pTransportInterface,
                    ( void * ) pNetworkBuffer ) );
        status = MQTTBadParameter;
 800c94c:	2301      	movs	r3, #1
 800c94e:	75fb      	strb	r3, [r7, #23]
 800c950:	e03a      	b.n	800c9c8 <MQTT_Init+0xa0>
    }
    else if( getTimeFunction == NULL )
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	2b00      	cmp	r3, #0
 800c956:	d102      	bne.n	800c95e <MQTT_Init+0x36>
    {
        LogError( ( "Invalid parameter: getTimeFunction is NULL" ) );
        status = MQTTBadParameter;
 800c958:	2301      	movs	r3, #1
 800c95a:	75fb      	strb	r3, [r7, #23]
 800c95c:	e034      	b.n	800c9c8 <MQTT_Init+0xa0>
    }
    else if( userCallback == NULL )
 800c95e:	683b      	ldr	r3, [r7, #0]
 800c960:	2b00      	cmp	r3, #0
 800c962:	d102      	bne.n	800c96a <MQTT_Init+0x42>
    {
        LogError( ( "Invalid parameter: userCallback is NULL" ) );
        status = MQTTBadParameter;
 800c964:	2301      	movs	r3, #1
 800c966:	75fb      	strb	r3, [r7, #23]
 800c968:	e02e      	b.n	800c9c8 <MQTT_Init+0xa0>
    }
    else if( pTransportInterface->recv == NULL )
 800c96a:	68bb      	ldr	r3, [r7, #8]
 800c96c:	681b      	ldr	r3, [r3, #0]
 800c96e:	2b00      	cmp	r3, #0
 800c970:	d102      	bne.n	800c978 <MQTT_Init+0x50>
    {
        LogError( ( "Invalid parameter: pTransportInterface->recv is NULL" ) );
        status = MQTTBadParameter;
 800c972:	2301      	movs	r3, #1
 800c974:	75fb      	strb	r3, [r7, #23]
 800c976:	e027      	b.n	800c9c8 <MQTT_Init+0xa0>
    }
    else if( pTransportInterface->send == NULL )
 800c978:	68bb      	ldr	r3, [r7, #8]
 800c97a:	685b      	ldr	r3, [r3, #4]
 800c97c:	2b00      	cmp	r3, #0
 800c97e:	d102      	bne.n	800c986 <MQTT_Init+0x5e>
    {
        LogError( ( "Invalid parameter: pTransportInterface->send is NULL" ) );
        status = MQTTBadParameter;
 800c980:	2301      	movs	r3, #1
 800c982:	75fb      	strb	r3, [r7, #23]
 800c984:	e020      	b.n	800c9c8 <MQTT_Init+0xa0>
    }
    else
    {
        ( void ) memset( pContext, 0x00, sizeof( MQTTContext_t ) );
 800c986:	2250      	movs	r2, #80	; 0x50
 800c988:	2100      	movs	r1, #0
 800c98a:	68f8      	ldr	r0, [r7, #12]
 800c98c:	f005 ff69 	bl	8012862 <memset>

        pContext->connectStatus = MQTTNotConnected;
 800c990:	68fb      	ldr	r3, [r7, #12]
 800c992:	2200      	movs	r2, #0
 800c994:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
        pContext->transportInterface = *pTransportInterface;
 800c998:	68fb      	ldr	r3, [r7, #12]
 800c99a:	68ba      	ldr	r2, [r7, #8]
 800c99c:	f103 0410 	add.w	r4, r3, #16
 800c9a0:	4613      	mov	r3, r2
 800c9a2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800c9a4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        pContext->getTime = getTimeFunction;
 800c9a8:	68fb      	ldr	r3, [r7, #12]
 800c9aa:	687a      	ldr	r2, [r7, #4]
 800c9ac:	62da      	str	r2, [r3, #44]	; 0x2c
        pContext->appCallback = userCallback;
 800c9ae:	68fb      	ldr	r3, [r7, #12]
 800c9b0:	683a      	ldr	r2, [r7, #0]
 800c9b2:	631a      	str	r2, [r3, #48]	; 0x30
        pContext->networkBuffer = *pNetworkBuffer;
 800c9b4:	68fb      	ldr	r3, [r7, #12]
 800c9b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c9b8:	3320      	adds	r3, #32
 800c9ba:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c9be:	e883 0003 	stmia.w	r3, {r0, r1}

        /* Zero is not a valid packet ID per MQTT spec. Start from 1. */
        pContext->nextPacketId = 1;
 800c9c2:	68fb      	ldr	r3, [r7, #12]
 800c9c4:	2201      	movs	r2, #1
 800c9c6:	851a      	strh	r2, [r3, #40]	; 0x28
    }

    return status;
 800c9c8:	7dfb      	ldrb	r3, [r7, #23]
}
 800c9ca:	4618      	mov	r0, r3
 800c9cc:	371c      	adds	r7, #28
 800c9ce:	46bd      	mov	sp, r7
 800c9d0:	bd90      	pop	{r4, r7, pc}

0800c9d2 <MQTT_Connect>:
MQTTStatus_t MQTT_Connect( MQTTContext_t * pContext,
                           const MQTTConnectInfo_t * pConnectInfo,
                           const MQTTPublishInfo_t * pWillInfo,
                           uint32_t timeoutMs,
                           bool * pSessionPresent )
{
 800c9d2:	b580      	push	{r7, lr}
 800c9d4:	b08e      	sub	sp, #56	; 0x38
 800c9d6:	af02      	add	r7, sp, #8
 800c9d8:	60f8      	str	r0, [r7, #12]
 800c9da:	60b9      	str	r1, [r7, #8]
 800c9dc:	607a      	str	r2, [r7, #4]
 800c9de:	603b      	str	r3, [r7, #0]
    size_t remainingLength = 0UL, packetSize = 0UL;
 800c9e0:	2300      	movs	r3, #0
 800c9e2:	62bb      	str	r3, [r7, #40]	; 0x28
 800c9e4:	2300      	movs	r3, #0
 800c9e6:	627b      	str	r3, [r7, #36]	; 0x24
    MQTTStatus_t status = MQTTSuccess;
 800c9e8:	2300      	movs	r3, #0
 800c9ea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    MQTTPacketInfo_t incomingPacket = { 0 };
 800c9ee:	f107 0314 	add.w	r3, r7, #20
 800c9f2:	2200      	movs	r2, #0
 800c9f4:	601a      	str	r2, [r3, #0]
 800c9f6:	605a      	str	r2, [r3, #4]
 800c9f8:	609a      	str	r2, [r3, #8]
 800c9fa:	60da      	str	r2, [r3, #12]

    incomingPacket.type = ( uint8_t ) 0;
 800c9fc:	2300      	movs	r3, #0
 800c9fe:	753b      	strb	r3, [r7, #20]

    if( ( pContext == NULL ) || ( pConnectInfo == NULL ) || ( pSessionPresent == NULL ) )
 800ca00:	68fb      	ldr	r3, [r7, #12]
 800ca02:	2b00      	cmp	r3, #0
 800ca04:	d005      	beq.n	800ca12 <MQTT_Connect+0x40>
 800ca06:	68bb      	ldr	r3, [r7, #8]
 800ca08:	2b00      	cmp	r3, #0
 800ca0a:	d002      	beq.n	800ca12 <MQTT_Connect+0x40>
 800ca0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca0e:	2b00      	cmp	r3, #0
 800ca10:	d102      	bne.n	800ca18 <MQTT_Connect+0x46>
        LogError( ( "Argument cannot be NULL: pContext=%p, "
                    "pConnectInfo=%p, pSessionPresent=%p.",
                    ( void * ) pContext,
                    ( void * ) pConnectInfo,
                    ( void * ) pSessionPresent ) );
        status = MQTTBadParameter;
 800ca12:	2301      	movs	r3, #1
 800ca14:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }

    if( status == MQTTSuccess )
 800ca18:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ca1c:	2b00      	cmp	r3, #0
 800ca1e:	d10a      	bne.n	800ca36 <MQTT_Connect+0x64>
    {
        /* Get MQTT connect packet size and remaining length. */
        status = MQTT_GetConnectPacketSize( pConnectInfo,
 800ca20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ca24:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800ca28:	6879      	ldr	r1, [r7, #4]
 800ca2a:	68b8      	ldr	r0, [r7, #8]
 800ca2c:	f000 ffba 	bl	800d9a4 <MQTT_GetConnectPacketSize>
 800ca30:	4603      	mov	r3, r0
 800ca32:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        LogDebug( ( "CONNECT packet size is %lu and remaining length is %lu.",
                    ( unsigned long ) packetSize,
                    ( unsigned long ) remainingLength ) );
    }

    if( status == MQTTSuccess )
 800ca36:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ca3a:	2b00      	cmp	r3, #0
 800ca3c:	d108      	bne.n	800ca50 <MQTT_Connect+0x7e>
    {
        MQTT_PRE_SEND_HOOK( pContext );

        status = sendConnectWithoutCopy( pContext,
 800ca3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca40:	687a      	ldr	r2, [r7, #4]
 800ca42:	68b9      	ldr	r1, [r7, #8]
 800ca44:	68f8      	ldr	r0, [r7, #12]
 800ca46:	f7ff fce9 	bl	800c41c <sendConnectWithoutCopy>
 800ca4a:	4603      	mov	r3, r0
 800ca4c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

        MQTT_POST_SEND_HOOK( pContext );
    }

    /* Read CONNACK from transport layer. */
    if( status == MQTTSuccess )
 800ca50:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ca54:	2b00      	cmp	r3, #0
 800ca56:	d10d      	bne.n	800ca74 <MQTT_Connect+0xa2>
    {
        status = receiveConnack( pContext,
 800ca58:	68bb      	ldr	r3, [r7, #8]
 800ca5a:	781a      	ldrb	r2, [r3, #0]
 800ca5c:	f107 0114 	add.w	r1, r7, #20
 800ca60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca62:	9300      	str	r3, [sp, #0]
 800ca64:	460b      	mov	r3, r1
 800ca66:	6839      	ldr	r1, [r7, #0]
 800ca68:	68f8      	ldr	r0, [r7, #12]
 800ca6a:	f7ff fdf3 	bl	800c654 <receiveConnack>
 800ca6e:	4603      	mov	r3, r0
 800ca70:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                                 pConnectInfo->cleanSession,
                                 &incomingPacket,
                                 pSessionPresent );
    }

    if( status == MQTTSuccess )
 800ca74:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ca78:	2b00      	cmp	r3, #0
 800ca7a:	d108      	bne.n	800ca8e <MQTT_Connect+0xbc>
    {
        /* Resend PUBRELs when reestablishing a session, or clear records for new sessions. */
        status = handleSessionResumption( pContext, *pSessionPresent );
 800ca7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca7e:	781b      	ldrb	r3, [r3, #0]
 800ca80:	4619      	mov	r1, r3
 800ca82:	68f8      	ldr	r0, [r7, #12]
 800ca84:	f7ff fea8 	bl	800c7d8 <handleSessionResumption>
 800ca88:	4603      	mov	r3, r0
 800ca8a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }

    if( status == MQTTSuccess )
 800ca8e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ca92:	2b00      	cmp	r3, #0
 800ca94:	d10f      	bne.n	800cab6 <MQTT_Connect+0xe4>
    {
        LogInfo( ( "MQTT connection established with the broker." ) );
        pContext->connectStatus = MQTTConnected;
 800ca96:	68fb      	ldr	r3, [r7, #12]
 800ca98:	2201      	movs	r2, #1
 800ca9a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
        /* Initialize keep-alive fields after a successful connection. */
        pContext->keepAliveIntervalSec = pConnectInfo->keepAliveSeconds;
 800ca9e:	68bb      	ldr	r3, [r7, #8]
 800caa0:	885a      	ldrh	r2, [r3, #2]
 800caa2:	68fb      	ldr	r3, [r7, #12]
 800caa4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
        pContext->waitingForPingResp = false;
 800caa8:	68fb      	ldr	r3, [r7, #12]
 800caaa:	2200      	movs	r2, #0
 800caac:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        pContext->pingReqSendTimeMs = 0U;
 800cab0:	68fb      	ldr	r3, [r7, #12]
 800cab2:	2200      	movs	r2, #0
 800cab4:	649a      	str	r2, [r3, #72]	; 0x48
    {
        LogError( ( "MQTT connection failed with status = %s.",
                    MQTT_Status_strerror( status ) ) );
    }

    return status;
 800cab6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800caba:	4618      	mov	r0, r3
 800cabc:	3730      	adds	r7, #48	; 0x30
 800cabe:	46bd      	mov	sp, r7
 800cac0:	bd80      	pop	{r7, pc}

0800cac2 <MQTT_Subscribe>:

MQTTStatus_t MQTT_Subscribe( MQTTContext_t * pContext,
                             const MQTTSubscribeInfo_t * pSubscriptionList,
                             size_t subscriptionCount,
                             uint16_t packetId )
{
 800cac2:	b580      	push	{r7, lr}
 800cac4:	b08a      	sub	sp, #40	; 0x28
 800cac6:	af02      	add	r7, sp, #8
 800cac8:	60f8      	str	r0, [r7, #12]
 800caca:	60b9      	str	r1, [r7, #8]
 800cacc:	607a      	str	r2, [r7, #4]
 800cace:	807b      	strh	r3, [r7, #2]
    size_t remainingLength = 0UL, packetSize = 0UL;
 800cad0:	2300      	movs	r3, #0
 800cad2:	61bb      	str	r3, [r7, #24]
 800cad4:	2300      	movs	r3, #0
 800cad6:	617b      	str	r3, [r7, #20]

    /* Validate arguments. */
    MQTTStatus_t status = validateSubscribeUnsubscribeParams( pContext,
 800cad8:	887b      	ldrh	r3, [r7, #2]
 800cada:	687a      	ldr	r2, [r7, #4]
 800cadc:	68b9      	ldr	r1, [r7, #8]
 800cade:	68f8      	ldr	r0, [r7, #12]
 800cae0:	f7ff face 	bl	800c080 <validateSubscribeUnsubscribeParams>
 800cae4:	4603      	mov	r3, r0
 800cae6:	77fb      	strb	r3, [r7, #31]
                                                              pSubscriptionList,
                                                              subscriptionCount,
                                                              packetId );

    if( status == MQTTSuccess )
 800cae8:	7ffb      	ldrb	r3, [r7, #31]
 800caea:	2b00      	cmp	r3, #0
 800caec:	d109      	bne.n	800cb02 <MQTT_Subscribe+0x40>
    {
        /* Get the remaining length and packet size.*/
        status = MQTT_GetSubscribePacketSize( pSubscriptionList,
 800caee:	f107 0314 	add.w	r3, r7, #20
 800caf2:	f107 0218 	add.w	r2, r7, #24
 800caf6:	6879      	ldr	r1, [r7, #4]
 800caf8:	68b8      	ldr	r0, [r7, #8]
 800cafa:	f000 ffbf 	bl	800da7c <MQTT_GetSubscribePacketSize>
 800cafe:	4603      	mov	r3, r0
 800cb00:	77fb      	strb	r3, [r7, #31]
        LogDebug( ( "SUBSCRIBE packet size is %lu and remaining length is %lu.",
                    ( unsigned long ) packetSize,
                    ( unsigned long ) remainingLength ) );
    }

    if( status == MQTTSuccess )
 800cb02:	7ffb      	ldrb	r3, [r7, #31]
 800cb04:	2b00      	cmp	r3, #0
 800cb06:	d10a      	bne.n	800cb1e <MQTT_Subscribe+0x5c>
    {
        MQTT_PRE_SEND_HOOK( pContext );

        /* Send MQTT SUBSCRIBE packet. */
        status = sendSubscribeWithoutCopy( pContext,
 800cb08:	69bb      	ldr	r3, [r7, #24]
 800cb0a:	887a      	ldrh	r2, [r7, #2]
 800cb0c:	9300      	str	r3, [sp, #0]
 800cb0e:	4613      	mov	r3, r2
 800cb10:	687a      	ldr	r2, [r7, #4]
 800cb12:	68b9      	ldr	r1, [r7, #8]
 800cb14:	68f8      	ldr	r0, [r7, #12]
 800cb16:	f7ff fb51 	bl	800c1bc <sendSubscribeWithoutCopy>
 800cb1a:	4603      	mov	r3, r0
 800cb1c:	77fb      	strb	r3, [r7, #31]
                                           remainingLength );

        MQTT_POST_SEND_HOOK( pContext );
    }

    return status;
 800cb1e:	7ffb      	ldrb	r3, [r7, #31]
}
 800cb20:	4618      	mov	r0, r3
 800cb22:	3720      	adds	r7, #32
 800cb24:	46bd      	mov	sp, r7
 800cb26:	bd80      	pop	{r7, pc}

0800cb28 <MQTT_Publish>:
/*-----------------------------------------------------------*/

MQTTStatus_t MQTT_Publish( MQTTContext_t * pContext,
                           const MQTTPublishInfo_t * pPublishInfo,
                           uint16_t packetId )
{
 800cb28:	b580      	push	{r7, lr}
 800cb2a:	b08c      	sub	sp, #48	; 0x30
 800cb2c:	af02      	add	r7, sp, #8
 800cb2e:	60f8      	str	r0, [r7, #12]
 800cb30:	60b9      	str	r1, [r7, #8]
 800cb32:	4613      	mov	r3, r2
 800cb34:	80fb      	strh	r3, [r7, #6]
    size_t headerSize = 0UL;
 800cb36:	2300      	movs	r3, #0
 800cb38:	623b      	str	r3, [r7, #32]
    size_t remainingLength = 0UL;
 800cb3a:	2300      	movs	r3, #0
 800cb3c:	61fb      	str	r3, [r7, #28]
    size_t packetSize = 0UL;
 800cb3e:	2300      	movs	r3, #0
 800cb40:	61bb      	str	r3, [r7, #24]
    MQTTPublishState_t publishStatus = MQTTStateNull;
 800cb42:	2300      	movs	r3, #0
 800cb44:	75fb      	strb	r3, [r7, #23]
    bool stateUpdateHookExecuted = false;
 800cb46:	2300      	movs	r3, #0
 800cb48:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    /* 1 header byte + 4 bytes (maximum) required for encoding the length +
     * 2 bytes for topic string. */
    uint8_t mqttHeader[ 7 ];

    /* Validate arguments. */
    MQTTStatus_t status = validatePublishParams( pContext, pPublishInfo, packetId );
 800cb4c:	88fb      	ldrh	r3, [r7, #6]
 800cb4e:	461a      	mov	r2, r3
 800cb50:	68b9      	ldr	r1, [r7, #8]
 800cb52:	68f8      	ldr	r0, [r7, #12]
 800cb54:	f7ff feb0 	bl	800c8b8 <validatePublishParams>
 800cb58:	4603      	mov	r3, r0
 800cb5a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    if( status == MQTTSuccess )
 800cb5e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cb62:	2b00      	cmp	r3, #0
 800cb64:	d10a      	bne.n	800cb7c <MQTT_Publish+0x54>
    {
        /* Get the remaining length and packet size.*/
        status = MQTT_GetPublishPacketSize( pPublishInfo,
 800cb66:	f107 0218 	add.w	r2, r7, #24
 800cb6a:	f107 031c 	add.w	r3, r7, #28
 800cb6e:	4619      	mov	r1, r3
 800cb70:	68b8      	ldr	r0, [r7, #8]
 800cb72:	f000 ffd4 	bl	800db1e <MQTT_GetPublishPacketSize>
 800cb76:	4603      	mov	r3, r0
 800cb78:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                                            &remainingLength,
                                            &packetSize );
    }

    if( status == MQTTSuccess )
 800cb7c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cb80:	2b00      	cmp	r3, #0
 800cb82:	d10a      	bne.n	800cb9a <MQTT_Publish+0x72>
    {
        status = MQTT_SerializePublishHeaderWithoutTopic( pPublishInfo,
 800cb84:	69f9      	ldr	r1, [r7, #28]
 800cb86:	f107 0320 	add.w	r3, r7, #32
 800cb8a:	f107 0210 	add.w	r2, r7, #16
 800cb8e:	68b8      	ldr	r0, [r7, #8]
 800cb90:	f000 f9ec 	bl	800cf6c <MQTT_SerializePublishHeaderWithoutTopic>
 800cb94:	4603      	mov	r3, r0
 800cb96:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                                                          remainingLength,
                                                          mqttHeader,
                                                          &headerSize );
    }

    if( ( status == MQTTSuccess ) && ( pPublishInfo->qos > MQTTQoS0 ) )
 800cb9a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cb9e:	2b00      	cmp	r3, #0
 800cba0:	d11b      	bne.n	800cbda <MQTT_Publish+0xb2>
 800cba2:	68bb      	ldr	r3, [r7, #8]
 800cba4:	781b      	ldrb	r3, [r3, #0]
 800cba6:	2b00      	cmp	r3, #0
 800cba8:	d017      	beq.n	800cbda <MQTT_Publish+0xb2>
    {
        MQTT_PRE_STATE_UPDATE_HOOK( pContext );

        /* Set the flag so that the corresponding hook can be called later. */
        stateUpdateHookExecuted = true;
 800cbaa:	2301      	movs	r3, #1
 800cbac:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

        status = MQTT_ReserveState( pContext,
 800cbb0:	68bb      	ldr	r3, [r7, #8]
 800cbb2:	781a      	ldrb	r2, [r3, #0]
 800cbb4:	88fb      	ldrh	r3, [r7, #6]
 800cbb6:	4619      	mov	r1, r3
 800cbb8:	68f8      	ldr	r0, [r7, #12]
 800cbba:	f001 fde1 	bl	800e780 <MQTT_ReserveState>
 800cbbe:	4603      	mov	r3, r0
 800cbc0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                                    pPublishInfo->qos );

        /* State already exists for a duplicate packet.
         * If a state doesn't exist, it will be handled as a new publish in
         * state engine. */
        if( ( status == MQTTStateCollision ) && ( pPublishInfo->dup == true ) )
 800cbc4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cbc8:	2b09      	cmp	r3, #9
 800cbca:	d106      	bne.n	800cbda <MQTT_Publish+0xb2>
 800cbcc:	68bb      	ldr	r3, [r7, #8]
 800cbce:	789b      	ldrb	r3, [r3, #2]
 800cbd0:	2b00      	cmp	r3, #0
 800cbd2:	d002      	beq.n	800cbda <MQTT_Publish+0xb2>
        {
            status = MQTTSuccess;
 800cbd4:	2300      	movs	r3, #0
 800cbd6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
    }

    if( status == MQTTSuccess )
 800cbda:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cbde:	2b00      	cmp	r3, #0
 800cbe0:	d10c      	bne.n	800cbfc <MQTT_Publish+0xd4>
    {
        /* Take the mutex as multiple send calls are required for sending this
         * packet. */
        MQTT_PRE_SEND_HOOK( pContext );

        status = sendPublishWithoutCopy( pContext,
 800cbe2:	6a39      	ldr	r1, [r7, #32]
 800cbe4:	f107 0210 	add.w	r2, r7, #16
 800cbe8:	88fb      	ldrh	r3, [r7, #6]
 800cbea:	9300      	str	r3, [sp, #0]
 800cbec:	460b      	mov	r3, r1
 800cbee:	68b9      	ldr	r1, [r7, #8]
 800cbf0:	68f8      	ldr	r0, [r7, #12]
 800cbf2:	f7ff fb9d 	bl	800c330 <sendPublishWithoutCopy>
 800cbf6:	4603      	mov	r3, r0
 800cbf8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        /* Give the mutex away for the next taker. */
        MQTT_POST_SEND_HOOK( pContext );
    }

    if( ( status == MQTTSuccess ) &&
 800cbfc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cc00:	2b00      	cmp	r3, #0
 800cc02:	d111      	bne.n	800cc28 <MQTT_Publish+0x100>
        ( pPublishInfo->qos > MQTTQoS0 ) )
 800cc04:	68bb      	ldr	r3, [r7, #8]
 800cc06:	781b      	ldrb	r3, [r3, #0]
    if( ( status == MQTTSuccess ) &&
 800cc08:	2b00      	cmp	r3, #0
 800cc0a:	d00d      	beq.n	800cc28 <MQTT_Publish+0x100>
    {
        /* Update state machine after PUBLISH is sent.
         * Only to be done for QoS1 or QoS2. */
        status = MQTT_UpdateStatePublish( pContext,
 800cc0c:	68bb      	ldr	r3, [r7, #8]
 800cc0e:	781a      	ldrb	r2, [r3, #0]
 800cc10:	88f9      	ldrh	r1, [r7, #6]
 800cc12:	f107 0317 	add.w	r3, r7, #23
 800cc16:	9300      	str	r3, [sp, #0]
 800cc18:	4613      	mov	r3, r2
 800cc1a:	2200      	movs	r2, #0
 800cc1c:	68f8      	ldr	r0, [r7, #12]
 800cc1e:	f001 fe08 	bl	800e832 <MQTT_UpdateStatePublish>
 800cc22:	4603      	mov	r3, r0
 800cc24:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    {
        LogError( ( "MQTT PUBLISH failed with status %s.",
                    MQTT_Status_strerror( status ) ) );
    }

    return status;
 800cc28:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800cc2c:	4618      	mov	r0, r3
 800cc2e:	3728      	adds	r7, #40	; 0x28
 800cc30:	46bd      	mov	sp, r7
 800cc32:	bd80      	pop	{r7, pc}

0800cc34 <MQTT_Ping>:

/*-----------------------------------------------------------*/

MQTTStatus_t MQTT_Ping( MQTTContext_t * pContext )
{
 800cc34:	b580      	push	{r7, lr}
 800cc36:	b088      	sub	sp, #32
 800cc38:	af00      	add	r7, sp, #0
 800cc3a:	6078      	str	r0, [r7, #4]
    int32_t sendResult = 0;
 800cc3c:	2300      	movs	r3, #0
 800cc3e:	61bb      	str	r3, [r7, #24]
    MQTTStatus_t status = MQTTSuccess;
 800cc40:	2300      	movs	r3, #0
 800cc42:	77fb      	strb	r3, [r7, #31]
    size_t packetSize = 0U;
 800cc44:	2300      	movs	r3, #0
 800cc46:	617b      	str	r3, [r7, #20]
    /* MQTT ping packets are of fixed length. */
    uint8_t pingreqPacket[ 2U ];
    MQTTFixedBuffer_t localBuffer;

    localBuffer.pBuffer = pingreqPacket;
 800cc48:	f107 0310 	add.w	r3, r7, #16
 800cc4c:	60bb      	str	r3, [r7, #8]
    localBuffer.size = 2U;
 800cc4e:	2302      	movs	r3, #2
 800cc50:	60fb      	str	r3, [r7, #12]

    if( pContext == NULL )
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	2b00      	cmp	r3, #0
 800cc56:	d101      	bne.n	800cc5c <MQTT_Ping+0x28>
    {
        LogError( ( "pContext is NULL." ) );
        status = MQTTBadParameter;
 800cc58:	2301      	movs	r3, #1
 800cc5a:	77fb      	strb	r3, [r7, #31]
    }

    if( status == MQTTSuccess )
 800cc5c:	7ffb      	ldrb	r3, [r7, #31]
 800cc5e:	2b00      	cmp	r3, #0
 800cc60:	d106      	bne.n	800cc70 <MQTT_Ping+0x3c>
    {
        /* Get MQTT PINGREQ packet size. */
        status = MQTT_GetPingreqPacketSize( &packetSize );
 800cc62:	f107 0314 	add.w	r3, r7, #20
 800cc66:	4618      	mov	r0, r3
 800cc68:	f000 ffdd 	bl	800dc26 <MQTT_GetPingreqPacketSize>
 800cc6c:	4603      	mov	r3, r0
 800cc6e:	77fb      	strb	r3, [r7, #31]
        {
            LogError( ( "Failed to get the PINGREQ packet size." ) );
        }
    }

    if( status == MQTTSuccess )
 800cc70:	7ffb      	ldrb	r3, [r7, #31]
 800cc72:	2b00      	cmp	r3, #0
 800cc74:	d106      	bne.n	800cc84 <MQTT_Ping+0x50>
    {
        /* Serialize MQTT PINGREQ. */
        status = MQTT_SerializePingreq( &localBuffer );
 800cc76:	f107 0308 	add.w	r3, r7, #8
 800cc7a:	4618      	mov	r0, r3
 800cc7c:	f000 ffe9 	bl	800dc52 <MQTT_SerializePingreq>
 800cc80:	4603      	mov	r3, r0
 800cc82:	77fb      	strb	r3, [r7, #31]
    }

    if( status == MQTTSuccess )
 800cc84:	7ffb      	ldrb	r3, [r7, #31]
 800cc86:	2b00      	cmp	r3, #0
 800cc88:	d116      	bne.n	800ccb8 <MQTT_Ping+0x84>
        /* Send the serialized PINGREQ packet to transport layer.
         * Here, we do not use the vectored IO approach for efficiency as the
         * Ping packet does not have numerous fields which need to be copied
         * from the user provided buffers. Thus it can be sent directly. */
        sendResult = sendBuffer( pContext,
                                 localBuffer.pBuffer,
 800cc8a:	68bb      	ldr	r3, [r7, #8]
        sendResult = sendBuffer( pContext,
 800cc8c:	2202      	movs	r2, #2
 800cc8e:	4619      	mov	r1, r3
 800cc90:	6878      	ldr	r0, [r7, #4]
 800cc92:	f7fe fb4b 	bl	800b32c <sendBuffer>
 800cc96:	61b8      	str	r0, [r7, #24]

        /* Give the mutex away. */
        MQTT_POST_SEND_HOOK( pContext );

        /* It is an error to not send the entire PINGREQ packet. */
        if( sendResult < ( int32_t ) packetSize )
 800cc98:	697b      	ldr	r3, [r7, #20]
 800cc9a:	461a      	mov	r2, r3
 800cc9c:	69bb      	ldr	r3, [r7, #24]
 800cc9e:	4293      	cmp	r3, r2
 800cca0:	da02      	bge.n	800cca8 <MQTT_Ping+0x74>
        {
            LogError( ( "Transport send failed for PINGREQ packet." ) );
            status = MQTTSendFailed;
 800cca2:	2303      	movs	r3, #3
 800cca4:	77fb      	strb	r3, [r7, #31]
 800cca6:	e007      	b.n	800ccb8 <MQTT_Ping+0x84>
        }
        else
        {
            pContext->pingReqSendTimeMs = pContext->lastPacketTxTime;
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	649a      	str	r2, [r3, #72]	; 0x48
            pContext->waitingForPingResp = true;
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	2201      	movs	r2, #1
 800ccb4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            LogDebug( ( "Sent %ld bytes of PINGREQ packet.",
                        ( long int ) sendResult ) );
        }
    }

    return status;
 800ccb8:	7ffb      	ldrb	r3, [r7, #31]
}
 800ccba:	4618      	mov	r0, r3
 800ccbc:	3720      	adds	r7, #32
 800ccbe:	46bd      	mov	sp, r7
 800ccc0:	bd80      	pop	{r7, pc}

0800ccc2 <MQTT_ProcessLoop>:
}

/*-----------------------------------------------------------*/

MQTTStatus_t MQTT_ProcessLoop( MQTTContext_t * pContext )
{
 800ccc2:	b580      	push	{r7, lr}
 800ccc4:	b084      	sub	sp, #16
 800ccc6:	af00      	add	r7, sp, #0
 800ccc8:	6078      	str	r0, [r7, #4]
    MQTTStatus_t status = MQTTBadParameter;
 800ccca:	2301      	movs	r3, #1
 800cccc:	73fb      	strb	r3, [r7, #15]

    if( pContext == NULL )
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	2b00      	cmp	r3, #0
 800ccd2:	d011      	beq.n	800ccf8 <MQTT_ProcessLoop+0x36>
    {
        LogError( ( "Invalid input parameter: MQTT Context cannot be NULL." ) );
    }
    else if( pContext->getTime == NULL )
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ccd8:	2b00      	cmp	r3, #0
 800ccda:	d00d      	beq.n	800ccf8 <MQTT_ProcessLoop+0x36>
    {
        LogError( ( "Invalid input parameter: MQTT Context must have valid getTime." ) );
    }
    else if( pContext->networkBuffer.pBuffer == NULL )
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	6a1b      	ldr	r3, [r3, #32]
 800cce0:	2b00      	cmp	r3, #0
 800cce2:	d009      	beq.n	800ccf8 <MQTT_ProcessLoop+0x36>
    {
        LogError( ( "Invalid input parameter: The MQTT context's networkBuffer must not be NULL." ) );
    }
    else
    {
        pContext->controlPacketSent = false;
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	2200      	movs	r2, #0
 800cce8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        status = receiveSingleIteration( pContext, true );
 800ccec:	2101      	movs	r1, #1
 800ccee:	6878      	ldr	r0, [r7, #4]
 800ccf0:	f7ff f8da 	bl	800bea8 <receiveSingleIteration>
 800ccf4:	4603      	mov	r3, r0
 800ccf6:	73fb      	strb	r3, [r7, #15]
    }

    return status;
 800ccf8:	7bfb      	ldrb	r3, [r7, #15]
}
 800ccfa:	4618      	mov	r0, r3
 800ccfc:	3710      	adds	r7, #16
 800ccfe:	46bd      	mov	sp, r7
 800cd00:	bd80      	pop	{r7, pc}

0800cd02 <MQTT_GetPacketId>:
}

/*-----------------------------------------------------------*/

uint16_t MQTT_GetPacketId( MQTTContext_t * pContext )
{
 800cd02:	b480      	push	{r7}
 800cd04:	b085      	sub	sp, #20
 800cd06:	af00      	add	r7, sp, #0
 800cd08:	6078      	str	r0, [r7, #4]
    uint16_t packetId = 0U;
 800cd0a:	2300      	movs	r3, #0
 800cd0c:	81fb      	strh	r3, [r7, #14]

    if( pContext != NULL )
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	2b00      	cmp	r3, #0
 800cd12:	d012      	beq.n	800cd3a <MQTT_GetPacketId+0x38>
    {
        MQTT_PRE_STATE_UPDATE_HOOK( pContext );

        packetId = pContext->nextPacketId;
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cd18:	81fb      	strh	r3, [r7, #14]

        /* A packet ID of zero is not a valid packet ID. When the max ID
         * is reached the next one should start at 1. */
        if( pContext->nextPacketId == ( uint16_t ) UINT16_MAX )
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cd1e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800cd22:	4293      	cmp	r3, r2
 800cd24:	d103      	bne.n	800cd2e <MQTT_GetPacketId+0x2c>
        {
            pContext->nextPacketId = 1;
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	2201      	movs	r2, #1
 800cd2a:	851a      	strh	r2, [r3, #40]	; 0x28
 800cd2c:	e005      	b.n	800cd3a <MQTT_GetPacketId+0x38>
        }
        else
        {
            pContext->nextPacketId++;
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cd32:	3301      	adds	r3, #1
 800cd34:	b29a      	uxth	r2, r3
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	851a      	strh	r2, [r3, #40]	; 0x28
        }

        MQTT_POST_STATE_UPDATE_HOOK( pContext );
    }

    return packetId;
 800cd3a:	89fb      	ldrh	r3, [r7, #14]
}
 800cd3c:	4618      	mov	r0, r3
 800cd3e:	3714      	adds	r7, #20
 800cd40:	46bd      	mov	sp, r7
 800cd42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd46:	4770      	bx	lr

0800cd48 <remainingLengthEncodedSize>:
static MQTTStatus_t deserializePingresp( const MQTTPacketInfo_t * pPingresp );

/*-----------------------------------------------------------*/

static size_t remainingLengthEncodedSize( size_t length )
{
 800cd48:	b480      	push	{r7}
 800cd4a:	b085      	sub	sp, #20
 800cd4c:	af00      	add	r7, sp, #0
 800cd4e:	6078      	str	r0, [r7, #4]

    /* Determine how many bytes are needed to encode length.
     * The values below are taken from the MQTT 3.1.1 spec. */

    /* 1 byte is needed to encode lengths between 0 and 127. */
    if( length < 128U )
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	2b7f      	cmp	r3, #127	; 0x7f
 800cd54:	d802      	bhi.n	800cd5c <remainingLengthEncodedSize+0x14>
    {
        encodedSize = 1U;
 800cd56:	2301      	movs	r3, #1
 800cd58:	60fb      	str	r3, [r7, #12]
 800cd5a:	e00f      	b.n	800cd7c <remainingLengthEncodedSize+0x34>
    }
    /* 2 bytes are needed to encode lengths between 128 and 16,383. */
    else if( length < 16384U )
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800cd62:	d202      	bcs.n	800cd6a <remainingLengthEncodedSize+0x22>
    {
        encodedSize = 2U;
 800cd64:	2302      	movs	r3, #2
 800cd66:	60fb      	str	r3, [r7, #12]
 800cd68:	e008      	b.n	800cd7c <remainingLengthEncodedSize+0x34>
    }
    /* 3 bytes are needed to encode lengths between 16,384 and 2,097,151. */
    else if( length < 2097152U )
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800cd70:	d202      	bcs.n	800cd78 <remainingLengthEncodedSize+0x30>
    {
        encodedSize = 3U;
 800cd72:	2303      	movs	r3, #3
 800cd74:	60fb      	str	r3, [r7, #12]
 800cd76:	e001      	b.n	800cd7c <remainingLengthEncodedSize+0x34>
    }
    /* 4 bytes are needed to encode lengths between 2,097,152 and 268,435,455. */
    else
    {
        encodedSize = 4U;
 800cd78:	2304      	movs	r3, #4
 800cd7a:	60fb      	str	r3, [r7, #12]

    LogDebug( ( "Encoded size for length %lu is %lu bytes.",
                ( unsigned long ) length,
                ( unsigned long ) encodedSize ) );

    return encodedSize;
 800cd7c:	68fb      	ldr	r3, [r7, #12]
}
 800cd7e:	4618      	mov	r0, r3
 800cd80:	3714      	adds	r7, #20
 800cd82:	46bd      	mov	sp, r7
 800cd84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd88:	4770      	bx	lr
	...

0800cd8c <encodeRemainingLength>:

/*-----------------------------------------------------------*/

static uint8_t * encodeRemainingLength( uint8_t * pDestination,
                                        size_t length )
{
 800cd8c:	b580      	push	{r7, lr}
 800cd8e:	b086      	sub	sp, #24
 800cd90:	af00      	add	r7, sp, #0
 800cd92:	6078      	str	r0, [r7, #4]
 800cd94:	6039      	str	r1, [r7, #0]
    uint8_t lengthByte;
    uint8_t * pLengthEnd = NULL;
 800cd96:	2300      	movs	r3, #0
 800cd98:	613b      	str	r3, [r7, #16]
    size_t remainingLength = length;
 800cd9a:	683b      	ldr	r3, [r7, #0]
 800cd9c:	60fb      	str	r3, [r7, #12]

    assert( pDestination != NULL );
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	2b00      	cmp	r3, #0
 800cda2:	d106      	bne.n	800cdb2 <encodeRemainingLength+0x26>
 800cda4:	4b12      	ldr	r3, [pc, #72]	; (800cdf0 <encodeRemainingLength+0x64>)
 800cda6:	4a13      	ldr	r2, [pc, #76]	; (800cdf4 <encodeRemainingLength+0x68>)
 800cda8:	f240 11f1 	movw	r1, #497	; 0x1f1
 800cdac:	4812      	ldr	r0, [pc, #72]	; (800cdf8 <encodeRemainingLength+0x6c>)
 800cdae:	f005 fbcd 	bl	801254c <__assert_func>

    pLengthEnd = pDestination;
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	613b      	str	r3, [r7, #16]

    /* This algorithm is copied from the MQTT v3.1.1 spec. */
    do
    {
        lengthByte = ( uint8_t ) ( remainingLength % 128U );
 800cdb6:	68fb      	ldr	r3, [r7, #12]
 800cdb8:	b2db      	uxtb	r3, r3
 800cdba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cdbe:	75fb      	strb	r3, [r7, #23]
        remainingLength = remainingLength / 128U;
 800cdc0:	68fb      	ldr	r3, [r7, #12]
 800cdc2:	09db      	lsrs	r3, r3, #7
 800cdc4:	60fb      	str	r3, [r7, #12]

        /* Set the high bit of this byte, indicating that there's more data. */
        if( remainingLength > 0U )
 800cdc6:	68fb      	ldr	r3, [r7, #12]
 800cdc8:	2b00      	cmp	r3, #0
 800cdca:	d003      	beq.n	800cdd4 <encodeRemainingLength+0x48>
        {
            UINT8_SET_BIT( lengthByte, 7 );
 800cdcc:	7dfb      	ldrb	r3, [r7, #23]
 800cdce:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800cdd2:	75fb      	strb	r3, [r7, #23]
        }

        /* Output a single encoded byte. */
        *pLengthEnd = lengthByte;
 800cdd4:	693b      	ldr	r3, [r7, #16]
 800cdd6:	7dfa      	ldrb	r2, [r7, #23]
 800cdd8:	701a      	strb	r2, [r3, #0]
        pLengthEnd++;
 800cdda:	693b      	ldr	r3, [r7, #16]
 800cddc:	3301      	adds	r3, #1
 800cdde:	613b      	str	r3, [r7, #16]
    } while( remainingLength > 0U );
 800cde0:	68fb      	ldr	r3, [r7, #12]
 800cde2:	2b00      	cmp	r3, #0
 800cde4:	d1e7      	bne.n	800cdb6 <encodeRemainingLength+0x2a>

    return pLengthEnd;
 800cde6:	693b      	ldr	r3, [r7, #16]
}
 800cde8:	4618      	mov	r0, r3
 800cdea:	3718      	adds	r7, #24
 800cdec:	46bd      	mov	sp, r7
 800cdee:	bd80      	pop	{r7, pc}
 800cdf0:	08014ff4 	.word	0x08014ff4
 800cdf4:	08015818 	.word	0x08015818
 800cdf8:	0801500c 	.word	0x0801500c

0800cdfc <encodeString>:
/*-----------------------------------------------------------*/

static uint8_t * encodeString( uint8_t * pDestination,
                               const char * pSource,
                               uint16_t sourceLength )
{
 800cdfc:	b580      	push	{r7, lr}
 800cdfe:	b086      	sub	sp, #24
 800ce00:	af00      	add	r7, sp, #0
 800ce02:	60f8      	str	r0, [r7, #12]
 800ce04:	60b9      	str	r1, [r7, #8]
 800ce06:	4613      	mov	r3, r2
 800ce08:	80fb      	strh	r3, [r7, #6]
    uint8_t * pBuffer = NULL;
 800ce0a:	2300      	movs	r3, #0
 800ce0c:	617b      	str	r3, [r7, #20]

    /* Typecast const char * typed source buffer to const uint8_t *.
     * This is to use same type buffers in memcpy. */
    const uint8_t * pSourceBuffer = ( const uint8_t * ) pSource;
 800ce0e:	68bb      	ldr	r3, [r7, #8]
 800ce10:	613b      	str	r3, [r7, #16]

    assert( pDestination != NULL );
 800ce12:	68fb      	ldr	r3, [r7, #12]
 800ce14:	2b00      	cmp	r3, #0
 800ce16:	d106      	bne.n	800ce26 <encodeString+0x2a>
 800ce18:	4b15      	ldr	r3, [pc, #84]	; (800ce70 <encodeString+0x74>)
 800ce1a:	4a16      	ldr	r2, [pc, #88]	; (800ce74 <encodeString+0x78>)
 800ce1c:	f240 2115 	movw	r1, #533	; 0x215
 800ce20:	4815      	ldr	r0, [pc, #84]	; (800ce78 <encodeString+0x7c>)
 800ce22:	f005 fb93 	bl	801254c <__assert_func>

    pBuffer = pDestination;
 800ce26:	68fb      	ldr	r3, [r7, #12]
 800ce28:	617b      	str	r3, [r7, #20]

    /* The first byte of a UTF-8 string is the high byte of the string length. */
    *pBuffer = UINT16_HIGH_BYTE( sourceLength );
 800ce2a:	88fb      	ldrh	r3, [r7, #6]
 800ce2c:	0a1b      	lsrs	r3, r3, #8
 800ce2e:	b29b      	uxth	r3, r3
 800ce30:	b2da      	uxtb	r2, r3
 800ce32:	697b      	ldr	r3, [r7, #20]
 800ce34:	701a      	strb	r2, [r3, #0]
    pBuffer++;
 800ce36:	697b      	ldr	r3, [r7, #20]
 800ce38:	3301      	adds	r3, #1
 800ce3a:	617b      	str	r3, [r7, #20]

    /* The second byte of a UTF-8 string is the low byte of the string length. */
    *pBuffer = UINT16_LOW_BYTE( sourceLength );
 800ce3c:	88fb      	ldrh	r3, [r7, #6]
 800ce3e:	b2da      	uxtb	r2, r3
 800ce40:	697b      	ldr	r3, [r7, #20]
 800ce42:	701a      	strb	r2, [r3, #0]
    pBuffer++;
 800ce44:	697b      	ldr	r3, [r7, #20]
 800ce46:	3301      	adds	r3, #1
 800ce48:	617b      	str	r3, [r7, #20]

    /* Copy the string into pBuffer. */
    if( pSourceBuffer != NULL )
 800ce4a:	693b      	ldr	r3, [r7, #16]
 800ce4c:	2b00      	cmp	r3, #0
 800ce4e:	d005      	beq.n	800ce5c <encodeString+0x60>
    {
        ( void ) memcpy( pBuffer, pSourceBuffer, sourceLength );
 800ce50:	88fb      	ldrh	r3, [r7, #6]
 800ce52:	461a      	mov	r2, r3
 800ce54:	6939      	ldr	r1, [r7, #16]
 800ce56:	6978      	ldr	r0, [r7, #20]
 800ce58:	f005 fcdb 	bl	8012812 <memcpy>
    }

    /* Return the pointer to the end of the encoded string. */
    pBuffer = &pBuffer[ sourceLength ];
 800ce5c:	88fb      	ldrh	r3, [r7, #6]
 800ce5e:	697a      	ldr	r2, [r7, #20]
 800ce60:	4413      	add	r3, r2
 800ce62:	617b      	str	r3, [r7, #20]

    return pBuffer;
 800ce64:	697b      	ldr	r3, [r7, #20]
}
 800ce66:	4618      	mov	r0, r3
 800ce68:	3718      	adds	r7, #24
 800ce6a:	46bd      	mov	sp, r7
 800ce6c:	bd80      	pop	{r7, pc}
 800ce6e:	bf00      	nop
 800ce70:	08014ff4 	.word	0x08014ff4
 800ce74:	08015830 	.word	0x08015830
 800ce78:	0801500c 	.word	0x0801500c

0800ce7c <calculatePublishPacketSize>:
/*-----------------------------------------------------------*/

static bool calculatePublishPacketSize( const MQTTPublishInfo_t * pPublishInfo,
                                        size_t * pRemainingLength,
                                        size_t * pPacketSize )
{
 800ce7c:	b580      	push	{r7, lr}
 800ce7e:	b088      	sub	sp, #32
 800ce80:	af00      	add	r7, sp, #0
 800ce82:	60f8      	str	r0, [r7, #12]
 800ce84:	60b9      	str	r1, [r7, #8]
 800ce86:	607a      	str	r2, [r7, #4]
    bool status = true;
 800ce88:	2301      	movs	r3, #1
 800ce8a:	77fb      	strb	r3, [r7, #31]
    size_t packetSize = 0, payloadLimit = 0;
 800ce8c:	2300      	movs	r3, #0
 800ce8e:	61bb      	str	r3, [r7, #24]
 800ce90:	2300      	movs	r3, #0
 800ce92:	617b      	str	r3, [r7, #20]

    assert( pPublishInfo != NULL );
 800ce94:	68fb      	ldr	r3, [r7, #12]
 800ce96:	2b00      	cmp	r3, #0
 800ce98:	d106      	bne.n	800cea8 <calculatePublishPacketSize+0x2c>
 800ce9a:	4b2e      	ldr	r3, [pc, #184]	; (800cf54 <calculatePublishPacketSize+0xd8>)
 800ce9c:	4a2e      	ldr	r2, [pc, #184]	; (800cf58 <calculatePublishPacketSize+0xdc>)
 800ce9e:	f240 2136 	movw	r1, #566	; 0x236
 800cea2:	482e      	ldr	r0, [pc, #184]	; (800cf5c <calculatePublishPacketSize+0xe0>)
 800cea4:	f005 fb52 	bl	801254c <__assert_func>
    assert( pRemainingLength != NULL );
 800cea8:	68bb      	ldr	r3, [r7, #8]
 800ceaa:	2b00      	cmp	r3, #0
 800ceac:	d106      	bne.n	800cebc <calculatePublishPacketSize+0x40>
 800ceae:	4b2c      	ldr	r3, [pc, #176]	; (800cf60 <calculatePublishPacketSize+0xe4>)
 800ceb0:	4a29      	ldr	r2, [pc, #164]	; (800cf58 <calculatePublishPacketSize+0xdc>)
 800ceb2:	f240 2137 	movw	r1, #567	; 0x237
 800ceb6:	4829      	ldr	r0, [pc, #164]	; (800cf5c <calculatePublishPacketSize+0xe0>)
 800ceb8:	f005 fb48 	bl	801254c <__assert_func>
    assert( pPacketSize != NULL );
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	2b00      	cmp	r3, #0
 800cec0:	d106      	bne.n	800ced0 <calculatePublishPacketSize+0x54>
 800cec2:	4b28      	ldr	r3, [pc, #160]	; (800cf64 <calculatePublishPacketSize+0xe8>)
 800cec4:	4a24      	ldr	r2, [pc, #144]	; (800cf58 <calculatePublishPacketSize+0xdc>)
 800cec6:	f44f 710e 	mov.w	r1, #568	; 0x238
 800ceca:	4824      	ldr	r0, [pc, #144]	; (800cf5c <calculatePublishPacketSize+0xe0>)
 800cecc:	f005 fb3e 	bl	801254c <__assert_func>

    /* The variable header of a PUBLISH packet always contains the topic name.
     * The first 2 bytes of UTF-8 string contains length of the string.
     */
    packetSize += pPublishInfo->topicNameLength + sizeof( uint16_t );
 800ced0:	68fb      	ldr	r3, [r7, #12]
 800ced2:	891b      	ldrh	r3, [r3, #8]
 800ced4:	461a      	mov	r2, r3
 800ced6:	69bb      	ldr	r3, [r7, #24]
 800ced8:	4413      	add	r3, r2
 800ceda:	3302      	adds	r3, #2
 800cedc:	61bb      	str	r3, [r7, #24]

    /* The variable header of a QoS 1 or 2 PUBLISH packet contains a 2-byte
     * packet identifier. */
    if( pPublishInfo->qos > MQTTQoS0 )
 800cede:	68fb      	ldr	r3, [r7, #12]
 800cee0:	781b      	ldrb	r3, [r3, #0]
 800cee2:	2b00      	cmp	r3, #0
 800cee4:	d002      	beq.n	800ceec <calculatePublishPacketSize+0x70>
    {
        packetSize += sizeof( uint16_t );
 800cee6:	69bb      	ldr	r3, [r7, #24]
 800cee8:	3302      	adds	r3, #2
 800ceea:	61bb      	str	r3, [r7, #24]
    }

    /* Calculate the maximum allowed size of the payload for the given parameters.
     * This calculation excludes the "Remaining length" encoding, whose size is not
     * yet known. */
    payloadLimit = MQTT_MAX_REMAINING_LENGTH - packetSize - 1U;
 800ceec:	69ba      	ldr	r2, [r7, #24]
 800ceee:	4b1e      	ldr	r3, [pc, #120]	; (800cf68 <calculatePublishPacketSize+0xec>)
 800cef0:	1a9b      	subs	r3, r3, r2
 800cef2:	617b      	str	r3, [r7, #20]

    /* Ensure that the given payload fits within the calculated limit. */
    if( pPublishInfo->payloadLength > payloadLimit )
 800cef4:	68fb      	ldr	r3, [r7, #12]
 800cef6:	691b      	ldr	r3, [r3, #16]
 800cef8:	697a      	ldr	r2, [r7, #20]
 800cefa:	429a      	cmp	r2, r3
 800cefc:	d202      	bcs.n	800cf04 <calculatePublishPacketSize+0x88>
                    "%lu so as not to exceed the maximum "
                    "remaining length of MQTT 3.1.1 packet( %lu ).",
                    ( unsigned long ) pPublishInfo->payloadLength,
                    ( unsigned long ) payloadLimit,
                    MQTT_MAX_REMAINING_LENGTH ) );
        status = false;
 800cefe:	2300      	movs	r3, #0
 800cf00:	77fb      	strb	r3, [r7, #31]
 800cf02:	e021      	b.n	800cf48 <calculatePublishPacketSize+0xcc>
    }
    else
    {
        /* Add the length of the PUBLISH payload. At this point, the "Remaining length"
         * has been calculated. */
        packetSize += pPublishInfo->payloadLength;
 800cf04:	68fb      	ldr	r3, [r7, #12]
 800cf06:	691b      	ldr	r3, [r3, #16]
 800cf08:	69ba      	ldr	r2, [r7, #24]
 800cf0a:	4413      	add	r3, r2
 800cf0c:	61bb      	str	r3, [r7, #24]

        /* Now that the "Remaining length" is known, recalculate the payload limit
         * based on the size of its encoding. */
        payloadLimit -= remainingLengthEncodedSize( packetSize );
 800cf0e:	69b8      	ldr	r0, [r7, #24]
 800cf10:	f7ff ff1a 	bl	800cd48 <remainingLengthEncodedSize>
 800cf14:	4602      	mov	r2, r0
 800cf16:	697b      	ldr	r3, [r7, #20]
 800cf18:	1a9b      	subs	r3, r3, r2
 800cf1a:	617b      	str	r3, [r7, #20]

        /* Check that the given payload fits within the size allowed by MQTT spec. */
        if( pPublishInfo->payloadLength > payloadLimit )
 800cf1c:	68fb      	ldr	r3, [r7, #12]
 800cf1e:	691b      	ldr	r3, [r3, #16]
 800cf20:	697a      	ldr	r2, [r7, #20]
 800cf22:	429a      	cmp	r2, r3
 800cf24:	d202      	bcs.n	800cf2c <calculatePublishPacketSize+0xb0>
                        "%lu so as not to exceed the maximum "
                        "remaining length of MQTT 3.1.1 packet( %lu ).",
                        ( unsigned long ) pPublishInfo->payloadLength,
                        ( unsigned long ) payloadLimit,
                        MQTT_MAX_REMAINING_LENGTH ) );
            status = false;
 800cf26:	2300      	movs	r3, #0
 800cf28:	77fb      	strb	r3, [r7, #31]
 800cf2a:	e00d      	b.n	800cf48 <calculatePublishPacketSize+0xcc>
        }
        else
        {
            /* Set the "Remaining length" output parameter and calculate the full
             * size of the PUBLISH packet. */
            *pRemainingLength = packetSize;
 800cf2c:	68bb      	ldr	r3, [r7, #8]
 800cf2e:	69ba      	ldr	r2, [r7, #24]
 800cf30:	601a      	str	r2, [r3, #0]

            packetSize += 1U + remainingLengthEncodedSize( packetSize );
 800cf32:	69b8      	ldr	r0, [r7, #24]
 800cf34:	f7ff ff08 	bl	800cd48 <remainingLengthEncodedSize>
 800cf38:	4603      	mov	r3, r0
 800cf3a:	3301      	adds	r3, #1
 800cf3c:	69ba      	ldr	r2, [r7, #24]
 800cf3e:	4413      	add	r3, r2
 800cf40:	61bb      	str	r3, [r7, #24]
            *pPacketSize = packetSize;
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	69ba      	ldr	r2, [r7, #24]
 800cf46:	601a      	str	r2, [r3, #0]
    }

    LogDebug( ( "PUBLISH packet remaining length=%lu and packet size=%lu.",
                ( unsigned long ) *pRemainingLength,
                ( unsigned long ) *pPacketSize ) );
    return status;
 800cf48:	7ffb      	ldrb	r3, [r7, #31]
}
 800cf4a:	4618      	mov	r0, r3
 800cf4c:	3720      	adds	r7, #32
 800cf4e:	46bd      	mov	sp, r7
 800cf50:	bd80      	pop	{r7, pc}
 800cf52:	bf00      	nop
 800cf54:	08015040 	.word	0x08015040
 800cf58:	08015840 	.word	0x08015840
 800cf5c:	0801500c 	.word	0x0801500c
 800cf60:	08015058 	.word	0x08015058
 800cf64:	08015074 	.word	0x08015074
 800cf68:	0ffffffe 	.word	0x0ffffffe

0800cf6c <MQTT_SerializePublishHeaderWithoutTopic>:

MQTTStatus_t MQTT_SerializePublishHeaderWithoutTopic( const MQTTPublishInfo_t * pPublishInfo,
                                                      size_t remainingLength,
                                                      uint8_t * pBuffer,
                                                      size_t * headerSize )
{
 800cf6c:	b580      	push	{r7, lr}
 800cf6e:	b088      	sub	sp, #32
 800cf70:	af00      	add	r7, sp, #0
 800cf72:	60f8      	str	r0, [r7, #12]
 800cf74:	60b9      	str	r1, [r7, #8]
 800cf76:	607a      	str	r2, [r7, #4]
 800cf78:	603b      	str	r3, [r7, #0]
    size_t headerLength;
    uint8_t * pIndex;
    MQTTStatus_t status = MQTTSuccess;
 800cf7a:	2300      	movs	r3, #0
 800cf7c:	77bb      	strb	r3, [r7, #30]

    /* The first byte of a PUBLISH packet contains the packet type and flags. */
    uint8_t publishFlags = MQTT_PACKET_TYPE_PUBLISH;
 800cf7e:	2330      	movs	r3, #48	; 0x30
 800cf80:	77fb      	strb	r3, [r7, #31]

    /* Get the start address of the buffer. */
    pIndex = pBuffer;
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	61bb      	str	r3, [r7, #24]

    /* Length of serialized packet = First byte
     *                               + Length of encoded remaining length
     *                               + Encoded topic length. */
    headerLength = 1U + remainingLengthEncodedSize( remainingLength ) + 2U;
 800cf86:	68b8      	ldr	r0, [r7, #8]
 800cf88:	f7ff fede 	bl	800cd48 <remainingLengthEncodedSize>
 800cf8c:	4603      	mov	r3, r0
 800cf8e:	3303      	adds	r3, #3
 800cf90:	617b      	str	r3, [r7, #20]

    if( pPublishInfo->qos == MQTTQoS1 )
 800cf92:	68fb      	ldr	r3, [r7, #12]
 800cf94:	781b      	ldrb	r3, [r3, #0]
 800cf96:	2b01      	cmp	r3, #1
 800cf98:	d104      	bne.n	800cfa4 <MQTT_SerializePublishHeaderWithoutTopic+0x38>
    {
        LogDebug( ( "Adding QoS as QoS1 in PUBLISH flags." ) );
        UINT8_SET_BIT( publishFlags, MQTT_PUBLISH_FLAG_QOS1 );
 800cf9a:	7ffb      	ldrb	r3, [r7, #31]
 800cf9c:	f043 0302 	orr.w	r3, r3, #2
 800cfa0:	77fb      	strb	r3, [r7, #31]
 800cfa2:	e007      	b.n	800cfb4 <MQTT_SerializePublishHeaderWithoutTopic+0x48>
    }
    else if( pPublishInfo->qos == MQTTQoS2 )
 800cfa4:	68fb      	ldr	r3, [r7, #12]
 800cfa6:	781b      	ldrb	r3, [r3, #0]
 800cfa8:	2b02      	cmp	r3, #2
 800cfaa:	d103      	bne.n	800cfb4 <MQTT_SerializePublishHeaderWithoutTopic+0x48>
    {
        LogDebug( ( "Adding QoS as QoS2 in PUBLISH flags." ) );
        UINT8_SET_BIT( publishFlags, MQTT_PUBLISH_FLAG_QOS2 );
 800cfac:	7ffb      	ldrb	r3, [r7, #31]
 800cfae:	f043 0304 	orr.w	r3, r3, #4
 800cfb2:	77fb      	strb	r3, [r7, #31]
    else
    {
        /* Empty else MISRA 15.7 */
    }

    if( pPublishInfo->retain == true )
 800cfb4:	68fb      	ldr	r3, [r7, #12]
 800cfb6:	785b      	ldrb	r3, [r3, #1]
 800cfb8:	2b00      	cmp	r3, #0
 800cfba:	d003      	beq.n	800cfc4 <MQTT_SerializePublishHeaderWithoutTopic+0x58>
    {
        LogDebug( ( "Adding retain bit in PUBLISH flags." ) );
        UINT8_SET_BIT( publishFlags, MQTT_PUBLISH_FLAG_RETAIN );
 800cfbc:	7ffb      	ldrb	r3, [r7, #31]
 800cfbe:	f043 0301 	orr.w	r3, r3, #1
 800cfc2:	77fb      	strb	r3, [r7, #31]
    }

    if( pPublishInfo->dup == true )
 800cfc4:	68fb      	ldr	r3, [r7, #12]
 800cfc6:	789b      	ldrb	r3, [r3, #2]
 800cfc8:	2b00      	cmp	r3, #0
 800cfca:	d003      	beq.n	800cfd4 <MQTT_SerializePublishHeaderWithoutTopic+0x68>
    {
        LogDebug( ( "Adding dup bit in PUBLISH flags." ) );
        UINT8_SET_BIT( publishFlags, MQTT_PUBLISH_FLAG_DUP );
 800cfcc:	7ffb      	ldrb	r3, [r7, #31]
 800cfce:	f043 0308 	orr.w	r3, r3, #8
 800cfd2:	77fb      	strb	r3, [r7, #31]
    }

    *pIndex = publishFlags;
 800cfd4:	69bb      	ldr	r3, [r7, #24]
 800cfd6:	7ffa      	ldrb	r2, [r7, #31]
 800cfd8:	701a      	strb	r2, [r3, #0]
    pIndex++;
 800cfda:	69bb      	ldr	r3, [r7, #24]
 800cfdc:	3301      	adds	r3, #1
 800cfde:	61bb      	str	r3, [r7, #24]

    /* The "Remaining length" is encoded from the second byte. */
    pIndex = encodeRemainingLength( pIndex, remainingLength );
 800cfe0:	68b9      	ldr	r1, [r7, #8]
 800cfe2:	69b8      	ldr	r0, [r7, #24]
 800cfe4:	f7ff fed2 	bl	800cd8c <encodeRemainingLength>
 800cfe8:	61b8      	str	r0, [r7, #24]

    /* The first byte of a UTF-8 string is the high byte of the string length. */
    *pIndex = UINT16_HIGH_BYTE( pPublishInfo->topicNameLength );
 800cfea:	68fb      	ldr	r3, [r7, #12]
 800cfec:	891b      	ldrh	r3, [r3, #8]
 800cfee:	0a1b      	lsrs	r3, r3, #8
 800cff0:	b29b      	uxth	r3, r3
 800cff2:	b2da      	uxtb	r2, r3
 800cff4:	69bb      	ldr	r3, [r7, #24]
 800cff6:	701a      	strb	r2, [r3, #0]
    pIndex++;
 800cff8:	69bb      	ldr	r3, [r7, #24]
 800cffa:	3301      	adds	r3, #1
 800cffc:	61bb      	str	r3, [r7, #24]

    /* The second byte of a UTF-8 string is the low byte of the string length. */
    *pIndex = UINT16_LOW_BYTE( pPublishInfo->topicNameLength );
 800cffe:	68fb      	ldr	r3, [r7, #12]
 800d000:	891b      	ldrh	r3, [r3, #8]
 800d002:	b2da      	uxtb	r2, r3
 800d004:	69bb      	ldr	r3, [r7, #24]
 800d006:	701a      	strb	r2, [r3, #0]
    pIndex++;
 800d008:	69bb      	ldr	r3, [r7, #24]
 800d00a:	3301      	adds	r3, #1
 800d00c:	61bb      	str	r3, [r7, #24]

    *headerSize = headerLength;
 800d00e:	683b      	ldr	r3, [r7, #0]
 800d010:	697a      	ldr	r2, [r7, #20]
 800d012:	601a      	str	r2, [r3, #0]

    return status;
 800d014:	7fbb      	ldrb	r3, [r7, #30]
}
 800d016:	4618      	mov	r0, r3
 800d018:	3720      	adds	r7, #32
 800d01a:	46bd      	mov	sp, r7
 800d01c:	bd80      	pop	{r7, pc}

0800d01e <getRemainingLength>:
    assert( ( ( size_t ) ( pIndex - pFixedBuffer->pBuffer ) ) <= pFixedBuffer->size );
}

static size_t getRemainingLength( TransportRecv_t recvFunc,
                                  NetworkContext_t * pNetworkContext )
{
 800d01e:	b580      	push	{r7, lr}
 800d020:	b088      	sub	sp, #32
 800d022:	af00      	add	r7, sp, #0
 800d024:	6078      	str	r0, [r7, #4]
 800d026:	6039      	str	r1, [r7, #0]
    size_t remainingLength = 0, multiplier = 1, bytesDecoded = 0, expectedSize = 0;
 800d028:	2300      	movs	r3, #0
 800d02a:	61fb      	str	r3, [r7, #28]
 800d02c:	2301      	movs	r3, #1
 800d02e:	61bb      	str	r3, [r7, #24]
 800d030:	2300      	movs	r3, #0
 800d032:	617b      	str	r3, [r7, #20]
 800d034:	2300      	movs	r3, #0
 800d036:	613b      	str	r3, [r7, #16]
    uint8_t encodedByte = 0;
 800d038:	2300      	movs	r3, #0
 800d03a:	72fb      	strb	r3, [r7, #11]
    int32_t bytesReceived = 0;
 800d03c:	2300      	movs	r3, #0
 800d03e:	60fb      	str	r3, [r7, #12]

    /* This algorithm is copied from the MQTT v3.1.1 spec. */
    do
    {
        if( multiplier > 2097152U ) /* 128 ^ 3 */
 800d040:	69bb      	ldr	r3, [r7, #24]
 800d042:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800d046:	d903      	bls.n	800d050 <getRemainingLength+0x32>
        {
            remainingLength = MQTT_REMAINING_LENGTH_INVALID;
 800d048:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800d04c:	61fb      	str	r3, [r7, #28]
 800d04e:	e01c      	b.n	800d08a <getRemainingLength+0x6c>
        }
        else
        {
            bytesReceived = recvFunc( pNetworkContext, &encodedByte, 1U );
 800d050:	f107 010b 	add.w	r1, r7, #11
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	2201      	movs	r2, #1
 800d058:	6838      	ldr	r0, [r7, #0]
 800d05a:	4798      	blx	r3
 800d05c:	60f8      	str	r0, [r7, #12]

            if( bytesReceived == 1 )
 800d05e:	68fb      	ldr	r3, [r7, #12]
 800d060:	2b01      	cmp	r3, #1
 800d062:	d10f      	bne.n	800d084 <getRemainingLength+0x66>
            {
                remainingLength += ( ( size_t ) encodedByte & 0x7FU ) * multiplier;
 800d064:	7afb      	ldrb	r3, [r7, #11]
 800d066:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d06a:	69ba      	ldr	r2, [r7, #24]
 800d06c:	fb02 f303 	mul.w	r3, r2, r3
 800d070:	69fa      	ldr	r2, [r7, #28]
 800d072:	4413      	add	r3, r2
 800d074:	61fb      	str	r3, [r7, #28]
                multiplier *= 128U;
 800d076:	69bb      	ldr	r3, [r7, #24]
 800d078:	01db      	lsls	r3, r3, #7
 800d07a:	61bb      	str	r3, [r7, #24]
                bytesDecoded++;
 800d07c:	697b      	ldr	r3, [r7, #20]
 800d07e:	3301      	adds	r3, #1
 800d080:	617b      	str	r3, [r7, #20]
 800d082:	e002      	b.n	800d08a <getRemainingLength+0x6c>
            }
            else
            {
                remainingLength = MQTT_REMAINING_LENGTH_INVALID;
 800d084:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800d088:	61fb      	str	r3, [r7, #28]
            }
        }

        if( remainingLength == MQTT_REMAINING_LENGTH_INVALID )
 800d08a:	69fb      	ldr	r3, [r7, #28]
 800d08c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d090:	d004      	beq.n	800d09c <getRemainingLength+0x7e>
        {
            break;
        }
    } while( ( encodedByte & 0x80U ) != 0U );
 800d092:	7afb      	ldrb	r3, [r7, #11]
 800d094:	b25b      	sxtb	r3, r3
 800d096:	2b00      	cmp	r3, #0
 800d098:	dbd2      	blt.n	800d040 <getRemainingLength+0x22>
 800d09a:	e000      	b.n	800d09e <getRemainingLength+0x80>
            break;
 800d09c:	bf00      	nop

    /* Check that the decoded remaining length conforms to the MQTT specification. */
    if( remainingLength != MQTT_REMAINING_LENGTH_INVALID )
 800d09e:	69fb      	ldr	r3, [r7, #28]
 800d0a0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d0a4:	d00a      	beq.n	800d0bc <getRemainingLength+0x9e>
    {
        expectedSize = remainingLengthEncodedSize( remainingLength );
 800d0a6:	69f8      	ldr	r0, [r7, #28]
 800d0a8:	f7ff fe4e 	bl	800cd48 <remainingLengthEncodedSize>
 800d0ac:	6138      	str	r0, [r7, #16]

        if( bytesDecoded != expectedSize )
 800d0ae:	697a      	ldr	r2, [r7, #20]
 800d0b0:	693b      	ldr	r3, [r7, #16]
 800d0b2:	429a      	cmp	r2, r3
 800d0b4:	d002      	beq.n	800d0bc <getRemainingLength+0x9e>
        {
            remainingLength = MQTT_REMAINING_LENGTH_INVALID;
 800d0b6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800d0ba:	61fb      	str	r3, [r7, #28]
        }
    }

    return remainingLength;
 800d0bc:	69fb      	ldr	r3, [r7, #28]
}
 800d0be:	4618      	mov	r0, r3
 800d0c0:	3720      	adds	r7, #32
 800d0c2:	46bd      	mov	sp, r7
 800d0c4:	bd80      	pop	{r7, pc}

0800d0c6 <processRemainingLength>:
/*-----------------------------------------------------------*/

static MQTTStatus_t processRemainingLength( const uint8_t * pBuffer,
                                            const size_t * pIndex,
                                            MQTTPacketInfo_t * pIncomingPacket )
{
 800d0c6:	b580      	push	{r7, lr}
 800d0c8:	b08a      	sub	sp, #40	; 0x28
 800d0ca:	af00      	add	r7, sp, #0
 800d0cc:	60f8      	str	r0, [r7, #12]
 800d0ce:	60b9      	str	r1, [r7, #8]
 800d0d0:	607a      	str	r2, [r7, #4]
    size_t remainingLength = 0;
 800d0d2:	2300      	movs	r3, #0
 800d0d4:	627b      	str	r3, [r7, #36]	; 0x24
    size_t multiplier = 1;
 800d0d6:	2301      	movs	r3, #1
 800d0d8:	623b      	str	r3, [r7, #32]
    size_t bytesDecoded = 0;
 800d0da:	2300      	movs	r3, #0
 800d0dc:	61fb      	str	r3, [r7, #28]
    size_t expectedSize = 0;
 800d0de:	2300      	movs	r3, #0
 800d0e0:	617b      	str	r3, [r7, #20]
    uint8_t encodedByte = 0;
 800d0e2:	2300      	movs	r3, #0
 800d0e4:	76fb      	strb	r3, [r7, #27]
    MQTTStatus_t status = MQTTSuccess;
 800d0e6:	2300      	movs	r3, #0
 800d0e8:	76bb      	strb	r3, [r7, #26]

    /* This algorithm is copied from the MQTT v3.1.1 spec. */
    do
    {
        if( multiplier > 2097152U ) /* 128 ^ 3 */
 800d0ea:	6a3b      	ldr	r3, [r7, #32]
 800d0ec:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800d0f0:	d905      	bls.n	800d0fe <processRemainingLength+0x38>
        {
            remainingLength = MQTT_REMAINING_LENGTH_INVALID;
 800d0f2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800d0f6:	627b      	str	r3, [r7, #36]	; 0x24

            LogError( ( "Invalid remaining length in the packet.\n" ) );

            status = MQTTBadResponse;
 800d0f8:	2305      	movs	r3, #5
 800d0fa:	76bb      	strb	r3, [r7, #26]
 800d0fc:	e01d      	b.n	800d13a <processRemainingLength+0x74>
        }
        else
        {
            if( *pIndex > ( bytesDecoded + 1U ) )
 800d0fe:	68bb      	ldr	r3, [r7, #8]
 800d100:	681a      	ldr	r2, [r3, #0]
 800d102:	69fb      	ldr	r3, [r7, #28]
 800d104:	3301      	adds	r3, #1
 800d106:	429a      	cmp	r2, r3
 800d108:	d915      	bls.n	800d136 <processRemainingLength+0x70>
            {
                /* Get the next byte. It is at the next position after the bytes
                 * decoded till now since the header of one byte was read before. */
                encodedByte = pBuffer[ bytesDecoded + 1U ];
 800d10a:	69fb      	ldr	r3, [r7, #28]
 800d10c:	3301      	adds	r3, #1
 800d10e:	68fa      	ldr	r2, [r7, #12]
 800d110:	4413      	add	r3, r2
 800d112:	781b      	ldrb	r3, [r3, #0]
 800d114:	76fb      	strb	r3, [r7, #27]

                remainingLength += ( ( size_t ) encodedByte & 0x7FU ) * multiplier;
 800d116:	7efb      	ldrb	r3, [r7, #27]
 800d118:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d11c:	6a3a      	ldr	r2, [r7, #32]
 800d11e:	fb02 f303 	mul.w	r3, r2, r3
 800d122:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d124:	4413      	add	r3, r2
 800d126:	627b      	str	r3, [r7, #36]	; 0x24
                multiplier *= 128U;
 800d128:	6a3b      	ldr	r3, [r7, #32]
 800d12a:	01db      	lsls	r3, r3, #7
 800d12c:	623b      	str	r3, [r7, #32]
                bytesDecoded++;
 800d12e:	69fb      	ldr	r3, [r7, #28]
 800d130:	3301      	adds	r3, #1
 800d132:	61fb      	str	r3, [r7, #28]
 800d134:	e001      	b.n	800d13a <processRemainingLength+0x74>
            }
            else
            {
                status = MQTTNeedMoreBytes;
 800d136:	230b      	movs	r3, #11
 800d138:	76bb      	strb	r3, [r7, #26]
            }
        }

        /* If the response is incorrect, or no more data is available, then
         * break out of the loop. */
        if( ( remainingLength == MQTT_REMAINING_LENGTH_INVALID ) ||
 800d13a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d13c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d140:	d006      	beq.n	800d150 <processRemainingLength+0x8a>
 800d142:	7ebb      	ldrb	r3, [r7, #26]
 800d144:	2b00      	cmp	r3, #0
 800d146:	d103      	bne.n	800d150 <processRemainingLength+0x8a>
            ( status != MQTTSuccess ) )
        {
            break;
        }
    } while( ( encodedByte & 0x80U ) != 0U );
 800d148:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800d14c:	2b00      	cmp	r3, #0
 800d14e:	dbcc      	blt.n	800d0ea <processRemainingLength+0x24>

    if( status == MQTTSuccess )
 800d150:	7ebb      	ldrb	r3, [r7, #26]
 800d152:	2b00      	cmp	r3, #0
 800d154:	d111      	bne.n	800d17a <processRemainingLength+0xb4>
    {
        /* Check that the decoded remaining length conforms to the MQTT specification. */
        expectedSize = remainingLengthEncodedSize( remainingLength );
 800d156:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d158:	f7ff fdf6 	bl	800cd48 <remainingLengthEncodedSize>
 800d15c:	6178      	str	r0, [r7, #20]

        if( bytesDecoded != expectedSize )
 800d15e:	69fa      	ldr	r2, [r7, #28]
 800d160:	697b      	ldr	r3, [r7, #20]
 800d162:	429a      	cmp	r2, r3
 800d164:	d002      	beq.n	800d16c <processRemainingLength+0xa6>
        {
            LogError( ( "Expected and actual length of decoded bytes do not match.\n" ) );
            status = MQTTBadResponse;
 800d166:	2305      	movs	r3, #5
 800d168:	76bb      	strb	r3, [r7, #26]
 800d16a:	e006      	b.n	800d17a <processRemainingLength+0xb4>
        }
        else
        {
            pIncomingPacket->remainingLength = remainingLength;
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d170:	609a      	str	r2, [r3, #8]
            pIncomingPacket->headerLength = bytesDecoded + 1U;
 800d172:	69fb      	ldr	r3, [r7, #28]
 800d174:	1c5a      	adds	r2, r3, #1
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	60da      	str	r2, [r3, #12]
        }
    }

    return status;
 800d17a:	7ebb      	ldrb	r3, [r7, #26]
}
 800d17c:	4618      	mov	r0, r3
 800d17e:	3728      	adds	r7, #40	; 0x28
 800d180:	46bd      	mov	sp, r7
 800d182:	bd80      	pop	{r7, pc}

0800d184 <incomingPacketValid>:

/*-----------------------------------------------------------*/

static bool incomingPacketValid( uint8_t packetType )
{
 800d184:	b480      	push	{r7}
 800d186:	b085      	sub	sp, #20
 800d188:	af00      	add	r7, sp, #0
 800d18a:	4603      	mov	r3, r0
 800d18c:	71fb      	strb	r3, [r7, #7]
    bool status = false;
 800d18e:	2300      	movs	r3, #0
 800d190:	73fb      	strb	r3, [r7, #15]

    /* Check packet type. Mask out lower bits to ignore flags. */
    switch( packetType & 0xF0U )
 800d192:	79fb      	ldrb	r3, [r7, #7]
 800d194:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d198:	2bd0      	cmp	r3, #208	; 0xd0
 800d19a:	d01d      	beq.n	800d1d8 <incomingPacketValid+0x54>
 800d19c:	2bd0      	cmp	r3, #208	; 0xd0
 800d19e:	d826      	bhi.n	800d1ee <incomingPacketValid+0x6a>
 800d1a0:	2bb0      	cmp	r3, #176	; 0xb0
 800d1a2:	d019      	beq.n	800d1d8 <incomingPacketValid+0x54>
 800d1a4:	2bb0      	cmp	r3, #176	; 0xb0
 800d1a6:	d822      	bhi.n	800d1ee <incomingPacketValid+0x6a>
 800d1a8:	2b90      	cmp	r3, #144	; 0x90
 800d1aa:	d015      	beq.n	800d1d8 <incomingPacketValid+0x54>
 800d1ac:	2b90      	cmp	r3, #144	; 0x90
 800d1ae:	d81e      	bhi.n	800d1ee <incomingPacketValid+0x6a>
 800d1b0:	2b70      	cmp	r3, #112	; 0x70
 800d1b2:	d011      	beq.n	800d1d8 <incomingPacketValid+0x54>
 800d1b4:	2b70      	cmp	r3, #112	; 0x70
 800d1b6:	d81a      	bhi.n	800d1ee <incomingPacketValid+0x6a>
 800d1b8:	2b60      	cmp	r3, #96	; 0x60
 800d1ba:	d010      	beq.n	800d1de <incomingPacketValid+0x5a>
 800d1bc:	2b60      	cmp	r3, #96	; 0x60
 800d1be:	d816      	bhi.n	800d1ee <incomingPacketValid+0x6a>
 800d1c0:	2b50      	cmp	r3, #80	; 0x50
 800d1c2:	d009      	beq.n	800d1d8 <incomingPacketValid+0x54>
 800d1c4:	2b50      	cmp	r3, #80	; 0x50
 800d1c6:	d812      	bhi.n	800d1ee <incomingPacketValid+0x6a>
 800d1c8:	2b40      	cmp	r3, #64	; 0x40
 800d1ca:	d005      	beq.n	800d1d8 <incomingPacketValid+0x54>
 800d1cc:	2b40      	cmp	r3, #64	; 0x40
 800d1ce:	d80e      	bhi.n	800d1ee <incomingPacketValid+0x6a>
 800d1d0:	2b20      	cmp	r3, #32
 800d1d2:	d001      	beq.n	800d1d8 <incomingPacketValid+0x54>
 800d1d4:	2b30      	cmp	r3, #48	; 0x30
 800d1d6:	d10a      	bne.n	800d1ee <incomingPacketValid+0x6a>
        case MQTT_PACKET_TYPE_PUBREC:
        case MQTT_PACKET_TYPE_PUBCOMP:
        case MQTT_PACKET_TYPE_SUBACK:
        case MQTT_PACKET_TYPE_UNSUBACK:
        case MQTT_PACKET_TYPE_PINGRESP:
            status = true;
 800d1d8:	2301      	movs	r3, #1
 800d1da:	73fb      	strb	r3, [r7, #15]
            break;
 800d1dc:	e00a      	b.n	800d1f4 <incomingPacketValid+0x70>

        case ( MQTT_PACKET_TYPE_PUBREL & 0xF0U ):

            /* The second bit of a PUBREL must be set. */
            if( ( packetType & 0x02U ) > 0U )
 800d1de:	79fb      	ldrb	r3, [r7, #7]
 800d1e0:	f003 0302 	and.w	r3, r3, #2
 800d1e4:	2b00      	cmp	r3, #0
 800d1e6:	d004      	beq.n	800d1f2 <incomingPacketValid+0x6e>
            {
                status = true;
 800d1e8:	2301      	movs	r3, #1
 800d1ea:	73fb      	strb	r3, [r7, #15]
            }

            break;
 800d1ec:	e001      	b.n	800d1f2 <incomingPacketValid+0x6e>

        /* Any other packet type is invalid. */
        default:
            LogWarn( ( "Incoming packet invalid: Packet type=%u.",
                       ( unsigned int ) packetType ) );
            break;
 800d1ee:	bf00      	nop
 800d1f0:	e000      	b.n	800d1f4 <incomingPacketValid+0x70>
            break;
 800d1f2:	bf00      	nop
    }

    return status;
 800d1f4:	7bfb      	ldrb	r3, [r7, #15]
}
 800d1f6:	4618      	mov	r0, r3
 800d1f8:	3714      	adds	r7, #20
 800d1fa:	46bd      	mov	sp, r7
 800d1fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d200:	4770      	bx	lr

0800d202 <checkPublishRemainingLength>:
/*-----------------------------------------------------------*/

static MQTTStatus_t checkPublishRemainingLength( size_t remainingLength,
                                                 MQTTQoS_t qos,
                                                 size_t qos0Minimum )
{
 800d202:	b480      	push	{r7}
 800d204:	b087      	sub	sp, #28
 800d206:	af00      	add	r7, sp, #0
 800d208:	60f8      	str	r0, [r7, #12]
 800d20a:	460b      	mov	r3, r1
 800d20c:	607a      	str	r2, [r7, #4]
 800d20e:	72fb      	strb	r3, [r7, #11]
    MQTTStatus_t status = MQTTSuccess;
 800d210:	2300      	movs	r3, #0
 800d212:	75fb      	strb	r3, [r7, #23]

    /* Sanity checks for "Remaining length". */
    if( qos == MQTTQoS0 )
 800d214:	7afb      	ldrb	r3, [r7, #11]
 800d216:	2b00      	cmp	r3, #0
 800d218:	d106      	bne.n	800d228 <checkPublishRemainingLength+0x26>
    {
        /* Check that the "Remaining length" is greater than the minimum. */
        if( remainingLength < qos0Minimum )
 800d21a:	68fa      	ldr	r2, [r7, #12]
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	429a      	cmp	r2, r3
 800d220:	d209      	bcs.n	800d236 <checkPublishRemainingLength+0x34>
        {
            LogError( ( "QoS 0 PUBLISH cannot have a remaining length less than %lu.",
                        ( unsigned long ) qos0Minimum ) );

            status = MQTTBadResponse;
 800d222:	2305      	movs	r3, #5
 800d224:	75fb      	strb	r3, [r7, #23]
 800d226:	e006      	b.n	800d236 <checkPublishRemainingLength+0x34>
    else
    {
        /* Check that the "Remaining length" is greater than the minimum. For
         * QoS 1 or 2, this will be two bytes greater than for QoS 0 due to the
         * packet identifier. */
        if( remainingLength < ( qos0Minimum + 2U ) )
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	3302      	adds	r3, #2
 800d22c:	68fa      	ldr	r2, [r7, #12]
 800d22e:	429a      	cmp	r2, r3
 800d230:	d201      	bcs.n	800d236 <checkPublishRemainingLength+0x34>
        {
            LogError( ( "QoS 1 or 2 PUBLISH cannot have a remaining length less than %lu.",
                        ( unsigned long ) ( qos0Minimum + 2U ) ) );

            status = MQTTBadResponse;
 800d232:	2305      	movs	r3, #5
 800d234:	75fb      	strb	r3, [r7, #23]
        }
    }

    return status;
 800d236:	7dfb      	ldrb	r3, [r7, #23]
}
 800d238:	4618      	mov	r0, r3
 800d23a:	371c      	adds	r7, #28
 800d23c:	46bd      	mov	sp, r7
 800d23e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d242:	4770      	bx	lr

0800d244 <processPublishFlags>:

/*-----------------------------------------------------------*/

static MQTTStatus_t processPublishFlags( uint8_t publishFlags,
                                         MQTTPublishInfo_t * pPublishInfo )
{
 800d244:	b580      	push	{r7, lr}
 800d246:	b084      	sub	sp, #16
 800d248:	af00      	add	r7, sp, #0
 800d24a:	4603      	mov	r3, r0
 800d24c:	6039      	str	r1, [r7, #0]
 800d24e:	71fb      	strb	r3, [r7, #7]
    MQTTStatus_t status = MQTTSuccess;
 800d250:	2300      	movs	r3, #0
 800d252:	73fb      	strb	r3, [r7, #15]

    assert( pPublishInfo != NULL );
 800d254:	683b      	ldr	r3, [r7, #0]
 800d256:	2b00      	cmp	r3, #0
 800d258:	d106      	bne.n	800d268 <processPublishFlags+0x24>
 800d25a:	4b20      	ldr	r3, [pc, #128]	; (800d2dc <processPublishFlags+0x98>)
 800d25c:	4a20      	ldr	r2, [pc, #128]	; (800d2e0 <processPublishFlags+0x9c>)
 800d25e:	f240 31ef 	movw	r1, #1007	; 0x3ef
 800d262:	4820      	ldr	r0, [pc, #128]	; (800d2e4 <processPublishFlags+0xa0>)
 800d264:	f005 f972 	bl	801254c <__assert_func>

    /* Check for QoS 2. */
    if( UINT8_CHECK_BIT( publishFlags, MQTT_PUBLISH_FLAG_QOS2 ) )
 800d268:	79fb      	ldrb	r3, [r7, #7]
 800d26a:	f003 0304 	and.w	r3, r3, #4
 800d26e:	2b00      	cmp	r3, #0
 800d270:	d00b      	beq.n	800d28a <processPublishFlags+0x46>
    {
        /* PUBLISH packet is invalid if both QoS 1 and QoS 2 bits are set. */
        if( UINT8_CHECK_BIT( publishFlags, MQTT_PUBLISH_FLAG_QOS1 ) )
 800d272:	79fb      	ldrb	r3, [r7, #7]
 800d274:	f003 0302 	and.w	r3, r3, #2
 800d278:	2b00      	cmp	r3, #0
 800d27a:	d002      	beq.n	800d282 <processPublishFlags+0x3e>
        {
            LogError( ( "Bad QoS: 3." ) );

            status = MQTTBadResponse;
 800d27c:	2305      	movs	r3, #5
 800d27e:	73fb      	strb	r3, [r7, #15]
 800d280:	e00f      	b.n	800d2a2 <processPublishFlags+0x5e>
        }
        else
        {
            pPublishInfo->qos = MQTTQoS2;
 800d282:	683b      	ldr	r3, [r7, #0]
 800d284:	2202      	movs	r2, #2
 800d286:	701a      	strb	r2, [r3, #0]
 800d288:	e00b      	b.n	800d2a2 <processPublishFlags+0x5e>
        }
    }
    /* Check for QoS 1. */
    else if( UINT8_CHECK_BIT( publishFlags, MQTT_PUBLISH_FLAG_QOS1 ) )
 800d28a:	79fb      	ldrb	r3, [r7, #7]
 800d28c:	f003 0302 	and.w	r3, r3, #2
 800d290:	2b00      	cmp	r3, #0
 800d292:	d003      	beq.n	800d29c <processPublishFlags+0x58>
    {
        pPublishInfo->qos = MQTTQoS1;
 800d294:	683b      	ldr	r3, [r7, #0]
 800d296:	2201      	movs	r2, #1
 800d298:	701a      	strb	r2, [r3, #0]
 800d29a:	e002      	b.n	800d2a2 <processPublishFlags+0x5e>
    }
    /* If the PUBLISH isn't QoS 1 or 2, then it's QoS 0. */
    else
    {
        pPublishInfo->qos = MQTTQoS0;
 800d29c:	683b      	ldr	r3, [r7, #0]
 800d29e:	2200      	movs	r2, #0
 800d2a0:	701a      	strb	r2, [r3, #0]
    }

    if( status == MQTTSuccess )
 800d2a2:	7bfb      	ldrb	r3, [r7, #15]
 800d2a4:	2b00      	cmp	r3, #0
 800d2a6:	d113      	bne.n	800d2d0 <processPublishFlags+0x8c>
    {
        LogDebug( ( "QoS is %d.", ( int ) pPublishInfo->qos ) );

        /* Parse the Retain bit. */
        pPublishInfo->retain = UINT8_CHECK_BIT( publishFlags, MQTT_PUBLISH_FLAG_RETAIN );
 800d2a8:	79fb      	ldrb	r3, [r7, #7]
 800d2aa:	f003 0301 	and.w	r3, r3, #1
 800d2ae:	2b00      	cmp	r3, #0
 800d2b0:	bf14      	ite	ne
 800d2b2:	2301      	movne	r3, #1
 800d2b4:	2300      	moveq	r3, #0
 800d2b6:	b2da      	uxtb	r2, r3
 800d2b8:	683b      	ldr	r3, [r7, #0]
 800d2ba:	705a      	strb	r2, [r3, #1]

        LogDebug( ( "Retain bit is %d.", ( int ) pPublishInfo->retain ) );

        /* Parse the DUP bit. */
        pPublishInfo->dup = UINT8_CHECK_BIT( publishFlags, MQTT_PUBLISH_FLAG_DUP );
 800d2bc:	79fb      	ldrb	r3, [r7, #7]
 800d2be:	f003 0308 	and.w	r3, r3, #8
 800d2c2:	2b00      	cmp	r3, #0
 800d2c4:	bf14      	ite	ne
 800d2c6:	2301      	movne	r3, #1
 800d2c8:	2300      	moveq	r3, #0
 800d2ca:	b2da      	uxtb	r2, r3
 800d2cc:	683b      	ldr	r3, [r7, #0]
 800d2ce:	709a      	strb	r2, [r3, #2]

        LogDebug( ( "DUP bit is %d.", ( int ) pPublishInfo->dup ) );
    }

    return status;
 800d2d0:	7bfb      	ldrb	r3, [r7, #15]
}
 800d2d2:	4618      	mov	r0, r3
 800d2d4:	3710      	adds	r7, #16
 800d2d6:	46bd      	mov	sp, r7
 800d2d8:	bd80      	pop	{r7, pc}
 800d2da:	bf00      	nop
 800d2dc:	08015040 	.word	0x08015040
 800d2e0:	0801585c 	.word	0x0801585c
 800d2e4:	0801500c 	.word	0x0801500c

0800d2e8 <logConnackResponse>:

/*-----------------------------------------------------------*/

static void logConnackResponse( uint8_t responseCode )
{
 800d2e8:	b5b0      	push	{r4, r5, r7, lr}
 800d2ea:	b088      	sub	sp, #32
 800d2ec:	af00      	add	r7, sp, #0
 800d2ee:	4603      	mov	r3, r0
 800d2f0:	71fb      	strb	r3, [r7, #7]
    const char * const pConnackResponses[ 6 ] =
 800d2f2:	4b0c      	ldr	r3, [pc, #48]	; (800d324 <logConnackResponse+0x3c>)
 800d2f4:	f107 0408 	add.w	r4, r7, #8
 800d2f8:	461d      	mov	r5, r3
 800d2fa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d2fc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d2fe:	e895 0003 	ldmia.w	r5, {r0, r1}
 800d302:	e884 0003 	stmia.w	r4, {r0, r1}

    /* Avoid unused parameter warning when assert and logs are disabled. */
    ( void ) responseCode;
    ( void ) pConnackResponses;

    assert( responseCode <= 5U );
 800d306:	79fb      	ldrb	r3, [r7, #7]
 800d308:	2b05      	cmp	r3, #5
 800d30a:	d906      	bls.n	800d31a <logConnackResponse+0x32>
 800d30c:	4b06      	ldr	r3, [pc, #24]	; (800d328 <logConnackResponse+0x40>)
 800d30e:	4a07      	ldr	r2, [pc, #28]	; (800d32c <logConnackResponse+0x44>)
 800d310:	f240 412f 	movw	r1, #1071	; 0x42f
 800d314:	4806      	ldr	r0, [pc, #24]	; (800d330 <logConnackResponse+0x48>)
 800d316:	f005 f919 	bl	801254c <__assert_func>
    else
    {
        /* Log an error based on the CONNACK response code. */
        LogError( ( "%s", pConnackResponses[ responseCode ] ) );
    }
}
 800d31a:	bf00      	nop
 800d31c:	3720      	adds	r7, #32
 800d31e:	46bd      	mov	sp, r7
 800d320:	bdb0      	pop	{r4, r5, r7, pc}
 800d322:	bf00      	nop
 800d324:	080151a0 	.word	0x080151a0
 800d328:	0801518c 	.word	0x0801518c
 800d32c:	08015870 	.word	0x08015870
 800d330:	0801500c 	.word	0x0801500c

0800d334 <deserializeConnack>:

/*-----------------------------------------------------------*/

static MQTTStatus_t deserializeConnack( const MQTTPacketInfo_t * pConnack,
                                        bool * pSessionPresent )
{
 800d334:	b580      	push	{r7, lr}
 800d336:	b084      	sub	sp, #16
 800d338:	af00      	add	r7, sp, #0
 800d33a:	6078      	str	r0, [r7, #4]
 800d33c:	6039      	str	r1, [r7, #0]
    MQTTStatus_t status = MQTTSuccess;
 800d33e:	2300      	movs	r3, #0
 800d340:	73fb      	strb	r3, [r7, #15]
    const uint8_t * pRemainingData = NULL;
 800d342:	2300      	movs	r3, #0
 800d344:	60bb      	str	r3, [r7, #8]

    assert( pConnack != NULL );
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	2b00      	cmp	r3, #0
 800d34a:	d106      	bne.n	800d35a <deserializeConnack+0x26>
 800d34c:	4b2a      	ldr	r3, [pc, #168]	; (800d3f8 <deserializeConnack+0xc4>)
 800d34e:	4a2b      	ldr	r2, [pc, #172]	; (800d3fc <deserializeConnack+0xc8>)
 800d350:	f240 4145 	movw	r1, #1093	; 0x445
 800d354:	482a      	ldr	r0, [pc, #168]	; (800d400 <deserializeConnack+0xcc>)
 800d356:	f005 f8f9 	bl	801254c <__assert_func>
    assert( pSessionPresent != NULL );
 800d35a:	683b      	ldr	r3, [r7, #0]
 800d35c:	2b00      	cmp	r3, #0
 800d35e:	d106      	bne.n	800d36e <deserializeConnack+0x3a>
 800d360:	4b28      	ldr	r3, [pc, #160]	; (800d404 <deserializeConnack+0xd0>)
 800d362:	4a26      	ldr	r2, [pc, #152]	; (800d3fc <deserializeConnack+0xc8>)
 800d364:	f240 4146 	movw	r1, #1094	; 0x446
 800d368:	4825      	ldr	r0, [pc, #148]	; (800d400 <deserializeConnack+0xcc>)
 800d36a:	f005 f8ef 	bl	801254c <__assert_func>
    pRemainingData = pConnack->pRemainingData;
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	685b      	ldr	r3, [r3, #4]
 800d372:	60bb      	str	r3, [r7, #8]

    /* According to MQTT 3.1.1, the second byte of CONNACK must specify a
     * "Remaining length" of 2. */
    if( pConnack->remainingLength != MQTT_PACKET_CONNACK_REMAINING_LENGTH )
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	689b      	ldr	r3, [r3, #8]
 800d378:	2b02      	cmp	r3, #2
 800d37a:	d002      	beq.n	800d382 <deserializeConnack+0x4e>
    {
        LogError( ( "CONNACK does not have remaining length of %u.",
                    ( unsigned int ) MQTT_PACKET_CONNACK_REMAINING_LENGTH ) );

        status = MQTTBadResponse;
 800d37c:	2305      	movs	r3, #5
 800d37e:	73fb      	strb	r3, [r7, #15]
 800d380:	e01d      	b.n	800d3be <deserializeConnack+0x8a>
    }

    /* Check the reserved bits in CONNACK. The high 7 bits of the third byte
     * in CONNACK must be 0. */
    else if( ( pRemainingData[ 0 ] | 0x01U ) != 0x01U )
 800d382:	68bb      	ldr	r3, [r7, #8]
 800d384:	781b      	ldrb	r3, [r3, #0]
 800d386:	f043 0301 	orr.w	r3, r3, #1
 800d38a:	b2db      	uxtb	r3, r3
 800d38c:	2b01      	cmp	r3, #1
 800d38e:	d002      	beq.n	800d396 <deserializeConnack+0x62>
    {
        LogError( ( "Reserved bits in CONNACK incorrect." ) );

        status = MQTTBadResponse;
 800d390:	2305      	movs	r3, #5
 800d392:	73fb      	strb	r3, [r7, #15]
 800d394:	e013      	b.n	800d3be <deserializeConnack+0x8a>
    }
    else
    {
        /* Determine if the "Session Present" bit is set. This is the lowest bit of
         * the third byte in CONNACK. */
        if( ( pRemainingData[ 0 ] & MQTT_PACKET_CONNACK_SESSION_PRESENT_MASK )
 800d396:	68bb      	ldr	r3, [r7, #8]
 800d398:	781b      	ldrb	r3, [r3, #0]
 800d39a:	f003 0301 	and.w	r3, r3, #1
 800d39e:	2b00      	cmp	r3, #0
 800d3a0:	d00a      	beq.n	800d3b8 <deserializeConnack+0x84>
            == MQTT_PACKET_CONNACK_SESSION_PRESENT_MASK )
        {
            LogDebug( ( "CONNACK session present bit set." ) );
            *pSessionPresent = true;
 800d3a2:	683b      	ldr	r3, [r7, #0]
 800d3a4:	2201      	movs	r2, #1
 800d3a6:	701a      	strb	r2, [r3, #0]

            /* MQTT 3.1.1 specifies that the fourth byte in CONNACK must be 0 if the
             * "Session Present" bit is set. */
            if( pRemainingData[ 1 ] != 0U )
 800d3a8:	68bb      	ldr	r3, [r7, #8]
 800d3aa:	3301      	adds	r3, #1
 800d3ac:	781b      	ldrb	r3, [r3, #0]
 800d3ae:	2b00      	cmp	r3, #0
 800d3b0:	d005      	beq.n	800d3be <deserializeConnack+0x8a>
            {
                LogError( ( "Session Present bit is set, but connect return code in CONNACK is %u (nonzero).",
                            ( unsigned int ) pRemainingData[ 1 ] ) );
                status = MQTTBadResponse;
 800d3b2:	2305      	movs	r3, #5
 800d3b4:	73fb      	strb	r3, [r7, #15]
 800d3b6:	e002      	b.n	800d3be <deserializeConnack+0x8a>
            }
        }
        else
        {
            LogDebug( ( "CONNACK session present bit not set." ) );
            *pSessionPresent = false;
 800d3b8:	683b      	ldr	r3, [r7, #0]
 800d3ba:	2200      	movs	r2, #0
 800d3bc:	701a      	strb	r2, [r3, #0]
        }
    }

    if( status == MQTTSuccess )
 800d3be:	7bfb      	ldrb	r3, [r7, #15]
 800d3c0:	2b00      	cmp	r3, #0
 800d3c2:	d114      	bne.n	800d3ee <deserializeConnack+0xba>
    {
        /* In MQTT 3.1.1, only values 0 through 5 are valid CONNACK response codes. */
        if( pRemainingData[ 1 ] > 5U )
 800d3c4:	68bb      	ldr	r3, [r7, #8]
 800d3c6:	3301      	adds	r3, #1
 800d3c8:	781b      	ldrb	r3, [r3, #0]
 800d3ca:	2b05      	cmp	r3, #5
 800d3cc:	d902      	bls.n	800d3d4 <deserializeConnack+0xa0>
        {
            LogError( ( "CONNACK response %u is invalid.",
                        ( unsigned int ) pRemainingData[ 1 ] ) );

            status = MQTTBadResponse;
 800d3ce:	2305      	movs	r3, #5
 800d3d0:	73fb      	strb	r3, [r7, #15]
 800d3d2:	e00c      	b.n	800d3ee <deserializeConnack+0xba>
        }
        else
        {
            /* Print the appropriate message for the CONNACK response code if logs are
             * enabled. */
            logConnackResponse( pRemainingData[ 1 ] );
 800d3d4:	68bb      	ldr	r3, [r7, #8]
 800d3d6:	3301      	adds	r3, #1
 800d3d8:	781b      	ldrb	r3, [r3, #0]
 800d3da:	4618      	mov	r0, r3
 800d3dc:	f7ff ff84 	bl	800d2e8 <logConnackResponse>

            /* A nonzero CONNACK response code means the connection was refused. */
            if( pRemainingData[ 1 ] > 0U )
 800d3e0:	68bb      	ldr	r3, [r7, #8]
 800d3e2:	3301      	adds	r3, #1
 800d3e4:	781b      	ldrb	r3, [r3, #0]
 800d3e6:	2b00      	cmp	r3, #0
 800d3e8:	d001      	beq.n	800d3ee <deserializeConnack+0xba>
            {
                status = MQTTServerRefused;
 800d3ea:	2306      	movs	r3, #6
 800d3ec:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return status;
 800d3ee:	7bfb      	ldrb	r3, [r7, #15]
}
 800d3f0:	4618      	mov	r0, r3
 800d3f2:	3710      	adds	r7, #16
 800d3f4:	46bd      	mov	sp, r7
 800d3f6:	bd80      	pop	{r7, pc}
 800d3f8:	080151b8 	.word	0x080151b8
 800d3fc:	08015884 	.word	0x08015884
 800d400:	0801500c 	.word	0x0801500c
 800d404:	080151cc 	.word	0x080151cc

0800d408 <calculateSubscriptionPacketSize>:
static MQTTStatus_t calculateSubscriptionPacketSize( const MQTTSubscribeInfo_t * pSubscriptionList,
                                                     size_t subscriptionCount,
                                                     size_t * pRemainingLength,
                                                     size_t * pPacketSize,
                                                     MQTTSubscriptionType_t subscriptionType )
{
 800d408:	b580      	push	{r7, lr}
 800d40a:	b088      	sub	sp, #32
 800d40c:	af00      	add	r7, sp, #0
 800d40e:	60f8      	str	r0, [r7, #12]
 800d410:	60b9      	str	r1, [r7, #8]
 800d412:	607a      	str	r2, [r7, #4]
 800d414:	603b      	str	r3, [r7, #0]
    MQTTStatus_t status = MQTTSuccess;
 800d416:	2300      	movs	r3, #0
 800d418:	77fb      	strb	r3, [r7, #31]
    size_t i = 0, packetSize = 0;
 800d41a:	2300      	movs	r3, #0
 800d41c:	61bb      	str	r3, [r7, #24]
 800d41e:	2300      	movs	r3, #0
 800d420:	617b      	str	r3, [r7, #20]

    assert( pSubscriptionList != NULL );
 800d422:	68fb      	ldr	r3, [r7, #12]
 800d424:	2b00      	cmp	r3, #0
 800d426:	d106      	bne.n	800d436 <calculateSubscriptionPacketSize+0x2e>
 800d428:	4b3d      	ldr	r3, [pc, #244]	; (800d520 <calculateSubscriptionPacketSize+0x118>)
 800d42a:	4a3e      	ldr	r2, [pc, #248]	; (800d524 <calculateSubscriptionPacketSize+0x11c>)
 800d42c:	f240 419b 	movw	r1, #1179	; 0x49b
 800d430:	483d      	ldr	r0, [pc, #244]	; (800d528 <calculateSubscriptionPacketSize+0x120>)
 800d432:	f005 f88b 	bl	801254c <__assert_func>
    assert( subscriptionCount != 0U );
 800d436:	68bb      	ldr	r3, [r7, #8]
 800d438:	2b00      	cmp	r3, #0
 800d43a:	d106      	bne.n	800d44a <calculateSubscriptionPacketSize+0x42>
 800d43c:	4b3b      	ldr	r3, [pc, #236]	; (800d52c <calculateSubscriptionPacketSize+0x124>)
 800d43e:	4a39      	ldr	r2, [pc, #228]	; (800d524 <calculateSubscriptionPacketSize+0x11c>)
 800d440:	f240 419c 	movw	r1, #1180	; 0x49c
 800d444:	4838      	ldr	r0, [pc, #224]	; (800d528 <calculateSubscriptionPacketSize+0x120>)
 800d446:	f005 f881 	bl	801254c <__assert_func>
    assert( pRemainingLength != NULL );
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	2b00      	cmp	r3, #0
 800d44e:	d106      	bne.n	800d45e <calculateSubscriptionPacketSize+0x56>
 800d450:	4b37      	ldr	r3, [pc, #220]	; (800d530 <calculateSubscriptionPacketSize+0x128>)
 800d452:	4a34      	ldr	r2, [pc, #208]	; (800d524 <calculateSubscriptionPacketSize+0x11c>)
 800d454:	f240 419d 	movw	r1, #1181	; 0x49d
 800d458:	4833      	ldr	r0, [pc, #204]	; (800d528 <calculateSubscriptionPacketSize+0x120>)
 800d45a:	f005 f877 	bl	801254c <__assert_func>
    assert( pPacketSize != NULL );
 800d45e:	683b      	ldr	r3, [r7, #0]
 800d460:	2b00      	cmp	r3, #0
 800d462:	d106      	bne.n	800d472 <calculateSubscriptionPacketSize+0x6a>
 800d464:	4b33      	ldr	r3, [pc, #204]	; (800d534 <calculateSubscriptionPacketSize+0x12c>)
 800d466:	4a2f      	ldr	r2, [pc, #188]	; (800d524 <calculateSubscriptionPacketSize+0x11c>)
 800d468:	f240 419e 	movw	r1, #1182	; 0x49e
 800d46c:	482e      	ldr	r0, [pc, #184]	; (800d528 <calculateSubscriptionPacketSize+0x120>)
 800d46e:	f005 f86d 	bl	801254c <__assert_func>

    /* The variable header of a subscription packet consists of a 2-byte packet
     * identifier. */
    packetSize += sizeof( uint16_t );
 800d472:	697b      	ldr	r3, [r7, #20]
 800d474:	3302      	adds	r3, #2
 800d476:	617b      	str	r3, [r7, #20]

    /* Sum the lengths of all subscription topic filters; add 1 byte for each
     * subscription's QoS if type is MQTT_SUBSCRIBE. */
    for( i = 0; i < subscriptionCount; i++ )
 800d478:	2300      	movs	r3, #0
 800d47a:	61bb      	str	r3, [r7, #24]
 800d47c:	e02f      	b.n	800d4de <calculateSubscriptionPacketSize+0xd6>
    {
        /* Add the length of the topic filter. MQTT strings are prepended
         * with 2 byte string length field. Hence 2 bytes are added to size. */
        packetSize += pSubscriptionList[ i ].topicFilterLength + sizeof( uint16_t );
 800d47e:	69ba      	ldr	r2, [r7, #24]
 800d480:	4613      	mov	r3, r2
 800d482:	005b      	lsls	r3, r3, #1
 800d484:	4413      	add	r3, r2
 800d486:	009b      	lsls	r3, r3, #2
 800d488:	461a      	mov	r2, r3
 800d48a:	68fb      	ldr	r3, [r7, #12]
 800d48c:	4413      	add	r3, r2
 800d48e:	891b      	ldrh	r3, [r3, #8]
 800d490:	461a      	mov	r2, r3
 800d492:	697b      	ldr	r3, [r7, #20]
 800d494:	4413      	add	r3, r2
 800d496:	3302      	adds	r3, #2
 800d498:	617b      	str	r3, [r7, #20]

        /* Only SUBSCRIBE packets include the QoS. */
        if( subscriptionType == MQTT_SUBSCRIBE )
 800d49a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800d49e:	2b00      	cmp	r3, #0
 800d4a0:	d102      	bne.n	800d4a8 <calculateSubscriptionPacketSize+0xa0>
        {
            packetSize += 1U;
 800d4a2:	697b      	ldr	r3, [r7, #20]
 800d4a4:	3301      	adds	r3, #1
 800d4a6:	617b      	str	r3, [r7, #20]
        }

        /* Validate each topic filter. */
        if( ( pSubscriptionList[ i ].topicFilterLength == 0U ) ||
 800d4a8:	69ba      	ldr	r2, [r7, #24]
 800d4aa:	4613      	mov	r3, r2
 800d4ac:	005b      	lsls	r3, r3, #1
 800d4ae:	4413      	add	r3, r2
 800d4b0:	009b      	lsls	r3, r3, #2
 800d4b2:	461a      	mov	r2, r3
 800d4b4:	68fb      	ldr	r3, [r7, #12]
 800d4b6:	4413      	add	r3, r2
 800d4b8:	891b      	ldrh	r3, [r3, #8]
 800d4ba:	2b00      	cmp	r3, #0
 800d4bc:	d00a      	beq.n	800d4d4 <calculateSubscriptionPacketSize+0xcc>
            ( pSubscriptionList[ i ].pTopicFilter == NULL ) )
 800d4be:	69ba      	ldr	r2, [r7, #24]
 800d4c0:	4613      	mov	r3, r2
 800d4c2:	005b      	lsls	r3, r3, #1
 800d4c4:	4413      	add	r3, r2
 800d4c6:	009b      	lsls	r3, r3, #2
 800d4c8:	461a      	mov	r2, r3
 800d4ca:	68fb      	ldr	r3, [r7, #12]
 800d4cc:	4413      	add	r3, r2
 800d4ce:	685b      	ldr	r3, [r3, #4]
        if( ( pSubscriptionList[ i ].topicFilterLength == 0U ) ||
 800d4d0:	2b00      	cmp	r3, #0
 800d4d2:	d101      	bne.n	800d4d8 <calculateSubscriptionPacketSize+0xd0>
        {
            status = MQTTBadParameter;
 800d4d4:	2301      	movs	r3, #1
 800d4d6:	77fb      	strb	r3, [r7, #31]
    for( i = 0; i < subscriptionCount; i++ )
 800d4d8:	69bb      	ldr	r3, [r7, #24]
 800d4da:	3301      	adds	r3, #1
 800d4dc:	61bb      	str	r3, [r7, #24]
 800d4de:	69ba      	ldr	r2, [r7, #24]
 800d4e0:	68bb      	ldr	r3, [r7, #8]
 800d4e2:	429a      	cmp	r2, r3
 800d4e4:	d3cb      	bcc.n	800d47e <calculateSubscriptionPacketSize+0x76>
    }

    /* At this point, the "Remaining length" has been calculated. Return error
     * if the "Remaining length" exceeds what is allowed by MQTT 3.1.1. Otherwise,
     * set the output parameter.*/
    if( packetSize > MQTT_MAX_REMAINING_LENGTH )
 800d4e6:	697b      	ldr	r3, [r7, #20]
 800d4e8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d4ec:	d301      	bcc.n	800d4f2 <calculateSubscriptionPacketSize+0xea>
    {
        LogError( ( "Subscription packet length of %lu exceeds"
                    "the MQTT 3.1.1 maximum packet length of %lu.",
                    ( unsigned long ) packetSize,
                    MQTT_MAX_REMAINING_LENGTH ) );
        status = MQTTBadParameter;
 800d4ee:	2301      	movs	r3, #1
 800d4f0:	77fb      	strb	r3, [r7, #31]
    }

    if( status == MQTTSuccess )
 800d4f2:	7ffb      	ldrb	r3, [r7, #31]
 800d4f4:	2b00      	cmp	r3, #0
 800d4f6:	d10d      	bne.n	800d514 <calculateSubscriptionPacketSize+0x10c>
    {
        *pRemainingLength = packetSize;
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	697a      	ldr	r2, [r7, #20]
 800d4fc:	601a      	str	r2, [r3, #0]

        /* Calculate the full size of the subscription packet by adding
         * number of bytes required to encode the "Remaining length" field
         * plus 1 byte for the "Packet type" field. */
        packetSize += 1U + remainingLengthEncodedSize( packetSize );
 800d4fe:	6978      	ldr	r0, [r7, #20]
 800d500:	f7ff fc22 	bl	800cd48 <remainingLengthEncodedSize>
 800d504:	4603      	mov	r3, r0
 800d506:	3301      	adds	r3, #1
 800d508:	697a      	ldr	r2, [r7, #20]
 800d50a:	4413      	add	r3, r2
 800d50c:	617b      	str	r3, [r7, #20]

        /*Set the pPacketSize output parameter. */
        *pPacketSize = packetSize;
 800d50e:	683b      	ldr	r3, [r7, #0]
 800d510:	697a      	ldr	r2, [r7, #20]
 800d512:	601a      	str	r2, [r3, #0]

    LogDebug( ( "Subscription packet remaining length=%lu and packet size=%lu.",
                ( unsigned long ) *pRemainingLength,
                ( unsigned long ) *pPacketSize ) );

    return status;
 800d514:	7ffb      	ldrb	r3, [r7, #31]
}
 800d516:	4618      	mov	r0, r3
 800d518:	3720      	adds	r7, #32
 800d51a:	46bd      	mov	sp, r7
 800d51c:	bd80      	pop	{r7, pc}
 800d51e:	bf00      	nop
 800d520:	080151e4 	.word	0x080151e4
 800d524:	08015898 	.word	0x08015898
 800d528:	0801500c 	.word	0x0801500c
 800d52c:	08015200 	.word	0x08015200
 800d530:	08015058 	.word	0x08015058
 800d534:	08015074 	.word	0x08015074

0800d538 <readSubackStatus>:

/*-----------------------------------------------------------*/

static MQTTStatus_t readSubackStatus( size_t statusCount,
                                      const uint8_t * pStatusStart )
{
 800d538:	b580      	push	{r7, lr}
 800d53a:	b086      	sub	sp, #24
 800d53c:	af00      	add	r7, sp, #0
 800d53e:	6078      	str	r0, [r7, #4]
 800d540:	6039      	str	r1, [r7, #0]
    MQTTStatus_t status = MQTTSuccess;
 800d542:	2300      	movs	r3, #0
 800d544:	75fb      	strb	r3, [r7, #23]
    uint8_t subscriptionStatus = 0;
 800d546:	2300      	movs	r3, #0
 800d548:	73fb      	strb	r3, [r7, #15]
    size_t i = 0;
 800d54a:	2300      	movs	r3, #0
 800d54c:	613b      	str	r3, [r7, #16]

    assert( pStatusStart != NULL );
 800d54e:	683b      	ldr	r3, [r7, #0]
 800d550:	2b00      	cmp	r3, #0
 800d552:	d106      	bne.n	800d562 <readSubackStatus+0x2a>
 800d554:	4b17      	ldr	r3, [pc, #92]	; (800d5b4 <readSubackStatus+0x7c>)
 800d556:	4a18      	ldr	r2, [pc, #96]	; (800d5b8 <readSubackStatus+0x80>)
 800d558:	f240 41e7 	movw	r1, #1255	; 0x4e7
 800d55c:	4817      	ldr	r0, [pc, #92]	; (800d5bc <readSubackStatus+0x84>)
 800d55e:	f004 fff5 	bl	801254c <__assert_func>

    /* Iterate through each status byte in the SUBACK packet. */
    for( i = 0; i < statusCount; i++ )
 800d562:	2300      	movs	r3, #0
 800d564:	613b      	str	r3, [r7, #16]
 800d566:	e019      	b.n	800d59c <readSubackStatus+0x64>
    {
        /* Read a single status byte in SUBACK. */
        subscriptionStatus = pStatusStart[ i ];
 800d568:	683a      	ldr	r2, [r7, #0]
 800d56a:	693b      	ldr	r3, [r7, #16]
 800d56c:	4413      	add	r3, r2
 800d56e:	781b      	ldrb	r3, [r3, #0]
 800d570:	73fb      	strb	r3, [r7, #15]

        /* MQTT 3.1.1 defines the following values as status codes. */
        switch( subscriptionStatus )
 800d572:	7bfb      	ldrb	r3, [r7, #15]
 800d574:	2b02      	cmp	r3, #2
 800d576:	dc02      	bgt.n	800d57e <readSubackStatus+0x46>
 800d578:	2b00      	cmp	r3, #0
 800d57a:	da08      	bge.n	800d58e <readSubackStatus+0x56>
 800d57c:	e004      	b.n	800d588 <readSubackStatus+0x50>
 800d57e:	2b80      	cmp	r3, #128	; 0x80
 800d580:	d102      	bne.n	800d588 <readSubackStatus+0x50>
            case 0x80:

                LogWarn( ( "Topic filter %lu refused.", ( unsigned long ) i ) );

                /* Application should remove subscription from the list */
                status = MQTTServerRefused;
 800d582:	2306      	movs	r3, #6
 800d584:	75fb      	strb	r3, [r7, #23]

                break;
 800d586:	e003      	b.n	800d590 <readSubackStatus+0x58>

            default:
                LogError( ( "Bad SUBSCRIBE status %u.",
                            ( unsigned int ) subscriptionStatus ) );

                status = MQTTBadResponse;
 800d588:	2305      	movs	r3, #5
 800d58a:	75fb      	strb	r3, [r7, #23]

                break;
 800d58c:	e000      	b.n	800d590 <readSubackStatus+0x58>
                break;
 800d58e:	bf00      	nop
        }

        /* Stop parsing the subscription statuses if a bad response was received. */
        if( status == MQTTBadResponse )
 800d590:	7dfb      	ldrb	r3, [r7, #23]
 800d592:	2b05      	cmp	r3, #5
 800d594:	d007      	beq.n	800d5a6 <readSubackStatus+0x6e>
    for( i = 0; i < statusCount; i++ )
 800d596:	693b      	ldr	r3, [r7, #16]
 800d598:	3301      	adds	r3, #1
 800d59a:	613b      	str	r3, [r7, #16]
 800d59c:	693a      	ldr	r2, [r7, #16]
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	429a      	cmp	r2, r3
 800d5a2:	d3e1      	bcc.n	800d568 <readSubackStatus+0x30>
 800d5a4:	e000      	b.n	800d5a8 <readSubackStatus+0x70>
        {
            break;
 800d5a6:	bf00      	nop
        }
    }

    return status;
 800d5a8:	7dfb      	ldrb	r3, [r7, #23]
}
 800d5aa:	4618      	mov	r0, r3
 800d5ac:	3718      	adds	r7, #24
 800d5ae:	46bd      	mov	sp, r7
 800d5b0:	bd80      	pop	{r7, pc}
 800d5b2:	bf00      	nop
 800d5b4:	08015218 	.word	0x08015218
 800d5b8:	080158b8 	.word	0x080158b8
 800d5bc:	0801500c 	.word	0x0801500c

0800d5c0 <deserializeSuback>:

/*-----------------------------------------------------------*/

static MQTTStatus_t deserializeSuback( const MQTTPacketInfo_t * pSuback,
                                       uint16_t * pPacketIdentifier )
{
 800d5c0:	b580      	push	{r7, lr}
 800d5c2:	b086      	sub	sp, #24
 800d5c4:	af00      	add	r7, sp, #0
 800d5c6:	6078      	str	r0, [r7, #4]
 800d5c8:	6039      	str	r1, [r7, #0]
    MQTTStatus_t status = MQTTSuccess;
 800d5ca:	2300      	movs	r3, #0
 800d5cc:	75fb      	strb	r3, [r7, #23]
    size_t remainingLength;
    const uint8_t * pVariableHeader = NULL;
 800d5ce:	2300      	movs	r3, #0
 800d5d0:	613b      	str	r3, [r7, #16]

    assert( pSuback != NULL );
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	2b00      	cmp	r3, #0
 800d5d6:	d106      	bne.n	800d5e6 <deserializeSuback+0x26>
 800d5d8:	4b1f      	ldr	r3, [pc, #124]	; (800d658 <deserializeSuback+0x98>)
 800d5da:	4a20      	ldr	r2, [pc, #128]	; (800d65c <deserializeSuback+0x9c>)
 800d5dc:	f44f 61a4 	mov.w	r1, #1312	; 0x520
 800d5e0:	481f      	ldr	r0, [pc, #124]	; (800d660 <deserializeSuback+0xa0>)
 800d5e2:	f004 ffb3 	bl	801254c <__assert_func>
    assert( pPacketIdentifier != NULL );
 800d5e6:	683b      	ldr	r3, [r7, #0]
 800d5e8:	2b00      	cmp	r3, #0
 800d5ea:	d106      	bne.n	800d5fa <deserializeSuback+0x3a>
 800d5ec:	4b1d      	ldr	r3, [pc, #116]	; (800d664 <deserializeSuback+0xa4>)
 800d5ee:	4a1b      	ldr	r2, [pc, #108]	; (800d65c <deserializeSuback+0x9c>)
 800d5f0:	f240 5121 	movw	r1, #1313	; 0x521
 800d5f4:	481a      	ldr	r0, [pc, #104]	; (800d660 <deserializeSuback+0xa0>)
 800d5f6:	f004 ffa9 	bl	801254c <__assert_func>

    remainingLength = pSuback->remainingLength;
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	689b      	ldr	r3, [r3, #8]
 800d5fe:	60fb      	str	r3, [r7, #12]
    pVariableHeader = pSuback->pRemainingData;
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	685b      	ldr	r3, [r3, #4]
 800d604:	613b      	str	r3, [r7, #16]

    /* A SUBACK must have a remaining length of at least 3 to accommodate the
     * packet identifier and at least 1 return code. */
    if( remainingLength < 3U )
 800d606:	68fb      	ldr	r3, [r7, #12]
 800d608:	2b02      	cmp	r3, #2
 800d60a:	d802      	bhi.n	800d612 <deserializeSuback+0x52>
    {
        LogError( ( "SUBACK cannot have a remaining length less than 3." ) );
        status = MQTTBadResponse;
 800d60c:	2305      	movs	r3, #5
 800d60e:	75fb      	strb	r3, [r7, #23]
 800d610:	e01d      	b.n	800d64e <deserializeSuback+0x8e>
    }
    else
    {
        /* Extract the packet identifier (first 2 bytes of variable header) from SUBACK. */
        *pPacketIdentifier = UINT16_DECODE( pVariableHeader );
 800d612:	693b      	ldr	r3, [r7, #16]
 800d614:	781b      	ldrb	r3, [r3, #0]
 800d616:	021b      	lsls	r3, r3, #8
 800d618:	b21a      	sxth	r2, r3
 800d61a:	693b      	ldr	r3, [r7, #16]
 800d61c:	3301      	adds	r3, #1
 800d61e:	781b      	ldrb	r3, [r3, #0]
 800d620:	b21b      	sxth	r3, r3
 800d622:	4313      	orrs	r3, r2
 800d624:	b21b      	sxth	r3, r3
 800d626:	b29a      	uxth	r2, r3
 800d628:	683b      	ldr	r3, [r7, #0]
 800d62a:	801a      	strh	r2, [r3, #0]

        LogDebug( ( "Packet identifier %hu.",
                    ( unsigned short ) *pPacketIdentifier ) );

        if( *pPacketIdentifier == 0U )
 800d62c:	683b      	ldr	r3, [r7, #0]
 800d62e:	881b      	ldrh	r3, [r3, #0]
 800d630:	2b00      	cmp	r3, #0
 800d632:	d102      	bne.n	800d63a <deserializeSuback+0x7a>
        {
            status = MQTTBadResponse;
 800d634:	2305      	movs	r3, #5
 800d636:	75fb      	strb	r3, [r7, #23]
 800d638:	e009      	b.n	800d64e <deserializeSuback+0x8e>
        }
        else
        {
            status = readSubackStatus( remainingLength - sizeof( uint16_t ),
 800d63a:	68fb      	ldr	r3, [r7, #12]
 800d63c:	1e9a      	subs	r2, r3, #2
 800d63e:	693b      	ldr	r3, [r7, #16]
 800d640:	3302      	adds	r3, #2
 800d642:	4619      	mov	r1, r3
 800d644:	4610      	mov	r0, r2
 800d646:	f7ff ff77 	bl	800d538 <readSubackStatus>
 800d64a:	4603      	mov	r3, r0
 800d64c:	75fb      	strb	r3, [r7, #23]
                                       &pVariableHeader[ sizeof( uint16_t ) ] );
        }
    }

    return status;
 800d64e:	7dfb      	ldrb	r3, [r7, #23]
}
 800d650:	4618      	mov	r0, r3
 800d652:	3718      	adds	r7, #24
 800d654:	46bd      	mov	sp, r7
 800d656:	bd80      	pop	{r7, pc}
 800d658:	08015230 	.word	0x08015230
 800d65c:	080158cc 	.word	0x080158cc
 800d660:	0801500c 	.word	0x0801500c
 800d664:	08015240 	.word	0x08015240

0800d668 <deserializePublish>:
/*-----------------------------------------------------------*/

static MQTTStatus_t deserializePublish( const MQTTPacketInfo_t * pIncomingPacket,
                                        uint16_t * pPacketId,
                                        MQTTPublishInfo_t * pPublishInfo )
{
 800d668:	b580      	push	{r7, lr}
 800d66a:	b088      	sub	sp, #32
 800d66c:	af00      	add	r7, sp, #0
 800d66e:	60f8      	str	r0, [r7, #12]
 800d670:	60b9      	str	r1, [r7, #8]
 800d672:	607a      	str	r2, [r7, #4]
    MQTTStatus_t status = MQTTSuccess;
 800d674:	2300      	movs	r3, #0
 800d676:	77fb      	strb	r3, [r7, #31]
    const uint8_t * pVariableHeader, * pPacketIdentifierHigh = NULL;
 800d678:	2300      	movs	r3, #0
 800d67a:	61bb      	str	r3, [r7, #24]

    assert( pIncomingPacket != NULL );
 800d67c:	68fb      	ldr	r3, [r7, #12]
 800d67e:	2b00      	cmp	r3, #0
 800d680:	d106      	bne.n	800d690 <deserializePublish+0x28>
 800d682:	4b53      	ldr	r3, [pc, #332]	; (800d7d0 <deserializePublish+0x168>)
 800d684:	4a53      	ldr	r2, [pc, #332]	; (800d7d4 <deserializePublish+0x16c>)
 800d686:	f240 5185 	movw	r1, #1413	; 0x585
 800d68a:	4853      	ldr	r0, [pc, #332]	; (800d7d8 <deserializePublish+0x170>)
 800d68c:	f004 ff5e 	bl	801254c <__assert_func>
    assert( pPacketId != NULL );
 800d690:	68bb      	ldr	r3, [r7, #8]
 800d692:	2b00      	cmp	r3, #0
 800d694:	d106      	bne.n	800d6a4 <deserializePublish+0x3c>
 800d696:	4b51      	ldr	r3, [pc, #324]	; (800d7dc <deserializePublish+0x174>)
 800d698:	4a4e      	ldr	r2, [pc, #312]	; (800d7d4 <deserializePublish+0x16c>)
 800d69a:	f240 5186 	movw	r1, #1414	; 0x586
 800d69e:	484e      	ldr	r0, [pc, #312]	; (800d7d8 <deserializePublish+0x170>)
 800d6a0:	f004 ff54 	bl	801254c <__assert_func>
    assert( pPublishInfo != NULL );
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	2b00      	cmp	r3, #0
 800d6a8:	d106      	bne.n	800d6b8 <deserializePublish+0x50>
 800d6aa:	4b4d      	ldr	r3, [pc, #308]	; (800d7e0 <deserializePublish+0x178>)
 800d6ac:	4a49      	ldr	r2, [pc, #292]	; (800d7d4 <deserializePublish+0x16c>)
 800d6ae:	f240 5187 	movw	r1, #1415	; 0x587
 800d6b2:	4849      	ldr	r0, [pc, #292]	; (800d7d8 <deserializePublish+0x170>)
 800d6b4:	f004 ff4a 	bl	801254c <__assert_func>
    assert( pIncomingPacket->pRemainingData != NULL );
 800d6b8:	68fb      	ldr	r3, [r7, #12]
 800d6ba:	685b      	ldr	r3, [r3, #4]
 800d6bc:	2b00      	cmp	r3, #0
 800d6be:	d106      	bne.n	800d6ce <deserializePublish+0x66>
 800d6c0:	4b48      	ldr	r3, [pc, #288]	; (800d7e4 <deserializePublish+0x17c>)
 800d6c2:	4a44      	ldr	r2, [pc, #272]	; (800d7d4 <deserializePublish+0x16c>)
 800d6c4:	f44f 61b1 	mov.w	r1, #1416	; 0x588
 800d6c8:	4843      	ldr	r0, [pc, #268]	; (800d7d8 <deserializePublish+0x170>)
 800d6ca:	f004 ff3f 	bl	801254c <__assert_func>

    pVariableHeader = pIncomingPacket->pRemainingData;
 800d6ce:	68fb      	ldr	r3, [r7, #12]
 800d6d0:	685b      	ldr	r3, [r3, #4]
 800d6d2:	617b      	str	r3, [r7, #20]
    /* The flags are the lower 4 bits of the first byte in PUBLISH. */
    status = processPublishFlags( ( pIncomingPacket->type & 0x0FU ), pPublishInfo );
 800d6d4:	68fb      	ldr	r3, [r7, #12]
 800d6d6:	781b      	ldrb	r3, [r3, #0]
 800d6d8:	f003 030f 	and.w	r3, r3, #15
 800d6dc:	b2db      	uxtb	r3, r3
 800d6de:	6879      	ldr	r1, [r7, #4]
 800d6e0:	4618      	mov	r0, r3
 800d6e2:	f7ff fdaf 	bl	800d244 <processPublishFlags>
 800d6e6:	4603      	mov	r3, r0
 800d6e8:	77fb      	strb	r3, [r7, #31]

    if( status == MQTTSuccess )
 800d6ea:	7ffb      	ldrb	r3, [r7, #31]
 800d6ec:	2b00      	cmp	r3, #0
 800d6ee:	d109      	bne.n	800d704 <deserializePublish+0x9c>
        /* Sanity checks for "Remaining length". A QoS 0 PUBLISH  must have a remaining
         * length of at least 3 to accommodate topic name length (2 bytes) and topic
         * name (at least 1 byte). A QoS 1 or 2 PUBLISH must have a remaining length of
         * at least 5 for the packet identifier in addition to the topic name length and
         * topic name. */
        status = checkPublishRemainingLength( pIncomingPacket->remainingLength,
 800d6f0:	68fb      	ldr	r3, [r7, #12]
 800d6f2:	6898      	ldr	r0, [r3, #8]
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	781b      	ldrb	r3, [r3, #0]
 800d6f8:	2203      	movs	r2, #3
 800d6fa:	4619      	mov	r1, r3
 800d6fc:	f7ff fd81 	bl	800d202 <checkPublishRemainingLength>
 800d700:	4603      	mov	r3, r0
 800d702:	77fb      	strb	r3, [r7, #31]
                                              pPublishInfo->qos,
                                              MQTT_MIN_PUBLISH_REMAINING_LENGTH_QOS0 );
    }

    if( status == MQTTSuccess )
 800d704:	7ffb      	ldrb	r3, [r7, #31]
 800d706:	2b00      	cmp	r3, #0
 800d708:	d118      	bne.n	800d73c <deserializePublish+0xd4>
    {
        /* Extract the topic name starting from the first byte of the variable header.
         * The topic name string starts at byte 3 in the variable header. */
        pPublishInfo->topicNameLength = UINT16_DECODE( pVariableHeader );
 800d70a:	697b      	ldr	r3, [r7, #20]
 800d70c:	781b      	ldrb	r3, [r3, #0]
 800d70e:	021b      	lsls	r3, r3, #8
 800d710:	b21a      	sxth	r2, r3
 800d712:	697b      	ldr	r3, [r7, #20]
 800d714:	3301      	adds	r3, #1
 800d716:	781b      	ldrb	r3, [r3, #0]
 800d718:	b21b      	sxth	r3, r3
 800d71a:	4313      	orrs	r3, r2
 800d71c:	b21b      	sxth	r3, r3
 800d71e:	b29a      	uxth	r2, r3
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	811a      	strh	r2, [r3, #8]

        /* Sanity checks for topic name length and "Remaining length". The remaining
         * length must be at least as large as the variable length header. */
        status = checkPublishRemainingLength( pIncomingPacket->remainingLength,
 800d724:	68fb      	ldr	r3, [r7, #12]
 800d726:	6898      	ldr	r0, [r3, #8]
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	7819      	ldrb	r1, [r3, #0]
                                              pPublishInfo->qos,
                                              pPublishInfo->topicNameLength + sizeof( uint16_t ) );
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	891b      	ldrh	r3, [r3, #8]
        status = checkPublishRemainingLength( pIncomingPacket->remainingLength,
 800d730:	3302      	adds	r3, #2
 800d732:	461a      	mov	r2, r3
 800d734:	f7ff fd65 	bl	800d202 <checkPublishRemainingLength>
 800d738:	4603      	mov	r3, r0
 800d73a:	77fb      	strb	r3, [r7, #31]
    }

    if( status == MQTTSuccess )
 800d73c:	7ffb      	ldrb	r3, [r7, #31]
 800d73e:	2b00      	cmp	r3, #0
 800d740:	d123      	bne.n	800d78a <deserializePublish+0x122>
    {
        /* Parse the topic. */
        pPublishInfo->pTopicName = ( const char * ) ( &pVariableHeader[ sizeof( uint16_t ) ] );
 800d742:	697b      	ldr	r3, [r7, #20]
 800d744:	1c9a      	adds	r2, r3, #2
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	605a      	str	r2, [r3, #4]
        LogDebug( ( "Topic name length: %hu.", ( unsigned short ) pPublishInfo->topicNameLength ) );

        /* Extract the packet identifier for QoS 1 or 2 PUBLISH packets. Packet
         * identifier starts immediately after the topic name. */
        pPacketIdentifierHigh = ( const uint8_t * ) ( &pPublishInfo->pTopicName[ pPublishInfo->topicNameLength ] );
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	685b      	ldr	r3, [r3, #4]
 800d74e:	687a      	ldr	r2, [r7, #4]
 800d750:	8912      	ldrh	r2, [r2, #8]
 800d752:	4413      	add	r3, r2
 800d754:	61bb      	str	r3, [r7, #24]

        if( pPublishInfo->qos > MQTTQoS0 )
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	781b      	ldrb	r3, [r3, #0]
 800d75a:	2b00      	cmp	r3, #0
 800d75c:	d015      	beq.n	800d78a <deserializePublish+0x122>
        {
            *pPacketId = UINT16_DECODE( pPacketIdentifierHigh );
 800d75e:	69bb      	ldr	r3, [r7, #24]
 800d760:	781b      	ldrb	r3, [r3, #0]
 800d762:	021b      	lsls	r3, r3, #8
 800d764:	b21a      	sxth	r2, r3
 800d766:	69bb      	ldr	r3, [r7, #24]
 800d768:	3301      	adds	r3, #1
 800d76a:	781b      	ldrb	r3, [r3, #0]
 800d76c:	b21b      	sxth	r3, r3
 800d76e:	4313      	orrs	r3, r2
 800d770:	b21b      	sxth	r3, r3
 800d772:	b29a      	uxth	r2, r3
 800d774:	68bb      	ldr	r3, [r7, #8]
 800d776:	801a      	strh	r2, [r3, #0]

            LogDebug( ( "Packet identifier %hu.",
                        ( unsigned short ) *pPacketId ) );

            /* Advance pointer two bytes to start of payload as in the QoS 0 case. */
            pPacketIdentifierHigh = &pPacketIdentifierHigh[ sizeof( uint16_t ) ];
 800d778:	69bb      	ldr	r3, [r7, #24]
 800d77a:	3302      	adds	r3, #2
 800d77c:	61bb      	str	r3, [r7, #24]

            /* Packet identifier cannot be 0. */
            if( *pPacketId == 0U )
 800d77e:	68bb      	ldr	r3, [r7, #8]
 800d780:	881b      	ldrh	r3, [r3, #0]
 800d782:	2b00      	cmp	r3, #0
 800d784:	d101      	bne.n	800d78a <deserializePublish+0x122>
            {
                LogError( ( "Packet identifier cannot be 0." ) );
                status = MQTTBadResponse;
 800d786:	2305      	movs	r3, #5
 800d788:	77fb      	strb	r3, [r7, #31]
            }
        }
    }

    if( status == MQTTSuccess )
 800d78a:	7ffb      	ldrb	r3, [r7, #31]
 800d78c:	2b00      	cmp	r3, #0
 800d78e:	d119      	bne.n	800d7c4 <deserializePublish+0x15c>
    {
        /* Calculate the length of the payload. QoS 1 or 2 PUBLISH packets contain
         * a packet identifier, but QoS 0 PUBLISH packets do not. */
        pPublishInfo->payloadLength = pIncomingPacket->remainingLength - pPublishInfo->topicNameLength - sizeof( uint16_t );
 800d790:	68fb      	ldr	r3, [r7, #12]
 800d792:	689b      	ldr	r3, [r3, #8]
 800d794:	687a      	ldr	r2, [r7, #4]
 800d796:	8912      	ldrh	r2, [r2, #8]
 800d798:	1a9b      	subs	r3, r3, r2
 800d79a:	1e9a      	subs	r2, r3, #2
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	611a      	str	r2, [r3, #16]

        if( pPublishInfo->qos != MQTTQoS0 )
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	781b      	ldrb	r3, [r3, #0]
 800d7a4:	2b00      	cmp	r3, #0
 800d7a6:	d004      	beq.n	800d7b2 <deserializePublish+0x14a>
        {
            /* Two more bytes for the packet identifier. */
            pPublishInfo->payloadLength -= sizeof( uint16_t );
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	691b      	ldr	r3, [r3, #16]
 800d7ac:	1e9a      	subs	r2, r3, #2
 800d7ae:	687b      	ldr	r3, [r7, #4]
 800d7b0:	611a      	str	r2, [r3, #16]
        }

        /* Set payload if it exists. */
        pPublishInfo->pPayload = ( pPublishInfo->payloadLength != 0U ) ? pPacketIdentifierHigh : NULL;
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	691b      	ldr	r3, [r3, #16]
 800d7b6:	2b00      	cmp	r3, #0
 800d7b8:	d001      	beq.n	800d7be <deserializePublish+0x156>
 800d7ba:	69bb      	ldr	r3, [r7, #24]
 800d7bc:	e000      	b.n	800d7c0 <deserializePublish+0x158>
 800d7be:	2300      	movs	r3, #0
 800d7c0:	687a      	ldr	r2, [r7, #4]
 800d7c2:	60d3      	str	r3, [r2, #12]

        LogDebug( ( "Payload length %lu.",
                    ( unsigned long ) pPublishInfo->payloadLength ) );
    }

    return status;
 800d7c4:	7ffb      	ldrb	r3, [r7, #31]
}
 800d7c6:	4618      	mov	r0, r3
 800d7c8:	3720      	adds	r7, #32
 800d7ca:	46bd      	mov	sp, r7
 800d7cc:	bd80      	pop	{r7, pc}
 800d7ce:	bf00      	nop
 800d7d0:	0801525c 	.word	0x0801525c
 800d7d4:	080158e0 	.word	0x080158e0
 800d7d8:	0801500c 	.word	0x0801500c
 800d7dc:	08015274 	.word	0x08015274
 800d7e0:	08015040 	.word	0x08015040
 800d7e4:	08015288 	.word	0x08015288

0800d7e8 <deserializeSimpleAck>:

/*-----------------------------------------------------------*/

static MQTTStatus_t deserializeSimpleAck( const MQTTPacketInfo_t * pAck,
                                          uint16_t * pPacketIdentifier )
{
 800d7e8:	b580      	push	{r7, lr}
 800d7ea:	b084      	sub	sp, #16
 800d7ec:	af00      	add	r7, sp, #0
 800d7ee:	6078      	str	r0, [r7, #4]
 800d7f0:	6039      	str	r1, [r7, #0]
    MQTTStatus_t status = MQTTSuccess;
 800d7f2:	2300      	movs	r3, #0
 800d7f4:	73fb      	strb	r3, [r7, #15]

    assert( pAck != NULL );
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	2b00      	cmp	r3, #0
 800d7fa:	d106      	bne.n	800d80a <deserializeSimpleAck+0x22>
 800d7fc:	4b18      	ldr	r3, [pc, #96]	; (800d860 <deserializeSimpleAck+0x78>)
 800d7fe:	4a19      	ldr	r2, [pc, #100]	; (800d864 <deserializeSimpleAck+0x7c>)
 800d800:	f240 51e1 	movw	r1, #1505	; 0x5e1
 800d804:	4818      	ldr	r0, [pc, #96]	; (800d868 <deserializeSimpleAck+0x80>)
 800d806:	f004 fea1 	bl	801254c <__assert_func>
    assert( pPacketIdentifier != NULL );
 800d80a:	683b      	ldr	r3, [r7, #0]
 800d80c:	2b00      	cmp	r3, #0
 800d80e:	d106      	bne.n	800d81e <deserializeSimpleAck+0x36>
 800d810:	4b16      	ldr	r3, [pc, #88]	; (800d86c <deserializeSimpleAck+0x84>)
 800d812:	4a14      	ldr	r2, [pc, #80]	; (800d864 <deserializeSimpleAck+0x7c>)
 800d814:	f240 51e2 	movw	r1, #1506	; 0x5e2
 800d818:	4813      	ldr	r0, [pc, #76]	; (800d868 <deserializeSimpleAck+0x80>)
 800d81a:	f004 fe97 	bl	801254c <__assert_func>

    /* Check that the "Remaining length" of the received ACK is 2. */
    if( pAck->remainingLength != MQTT_PACKET_SIMPLE_ACK_REMAINING_LENGTH )
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	689b      	ldr	r3, [r3, #8]
 800d822:	2b02      	cmp	r3, #2
 800d824:	d002      	beq.n	800d82c <deserializeSimpleAck+0x44>
    {
        LogError( ( "ACK does not have remaining length of %u.",
                    ( unsigned int ) MQTT_PACKET_SIMPLE_ACK_REMAINING_LENGTH ) );

        status = MQTTBadResponse;
 800d826:	2305      	movs	r3, #5
 800d828:	73fb      	strb	r3, [r7, #15]
 800d82a:	e014      	b.n	800d856 <deserializeSimpleAck+0x6e>
    }
    else
    {
        /* Extract the packet identifier (third and fourth bytes) from ACK. */
        *pPacketIdentifier = UINT16_DECODE( pAck->pRemainingData );
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	685b      	ldr	r3, [r3, #4]
 800d830:	781b      	ldrb	r3, [r3, #0]
 800d832:	021b      	lsls	r3, r3, #8
 800d834:	b21a      	sxth	r2, r3
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	685b      	ldr	r3, [r3, #4]
 800d83a:	3301      	adds	r3, #1
 800d83c:	781b      	ldrb	r3, [r3, #0]
 800d83e:	b21b      	sxth	r3, r3
 800d840:	4313      	orrs	r3, r2
 800d842:	b21b      	sxth	r3, r3
 800d844:	b29a      	uxth	r2, r3
 800d846:	683b      	ldr	r3, [r7, #0]
 800d848:	801a      	strh	r2, [r3, #0]

        LogDebug( ( "Packet identifier %hu.",
                    ( unsigned short ) *pPacketIdentifier ) );

        /* Packet identifier cannot be 0. */
        if( *pPacketIdentifier == 0U )
 800d84a:	683b      	ldr	r3, [r7, #0]
 800d84c:	881b      	ldrh	r3, [r3, #0]
 800d84e:	2b00      	cmp	r3, #0
 800d850:	d101      	bne.n	800d856 <deserializeSimpleAck+0x6e>
        {
            LogError( ( "Packet identifier cannot be 0." ) );
            status = MQTTBadResponse;
 800d852:	2305      	movs	r3, #5
 800d854:	73fb      	strb	r3, [r7, #15]
        }
    }

    return status;
 800d856:	7bfb      	ldrb	r3, [r7, #15]
}
 800d858:	4618      	mov	r0, r3
 800d85a:	3710      	adds	r7, #16
 800d85c:	46bd      	mov	sp, r7
 800d85e:	bd80      	pop	{r7, pc}
 800d860:	080152b0 	.word	0x080152b0
 800d864:	080158f4 	.word	0x080158f4
 800d868:	0801500c 	.word	0x0801500c
 800d86c:	08015240 	.word	0x08015240

0800d870 <deserializePingresp>:

/*-----------------------------------------------------------*/

static MQTTStatus_t deserializePingresp( const MQTTPacketInfo_t * pPingresp )
{
 800d870:	b580      	push	{r7, lr}
 800d872:	b084      	sub	sp, #16
 800d874:	af00      	add	r7, sp, #0
 800d876:	6078      	str	r0, [r7, #4]
    MQTTStatus_t status = MQTTSuccess;
 800d878:	2300      	movs	r3, #0
 800d87a:	73fb      	strb	r3, [r7, #15]

    assert( pPingresp != NULL );
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	2b00      	cmp	r3, #0
 800d880:	d106      	bne.n	800d890 <deserializePingresp+0x20>
 800d882:	4b09      	ldr	r3, [pc, #36]	; (800d8a8 <deserializePingresp+0x38>)
 800d884:	4a09      	ldr	r2, [pc, #36]	; (800d8ac <deserializePingresp+0x3c>)
 800d886:	f240 6105 	movw	r1, #1541	; 0x605
 800d88a:	4809      	ldr	r0, [pc, #36]	; (800d8b0 <deserializePingresp+0x40>)
 800d88c:	f004 fe5e 	bl	801254c <__assert_func>

    /* Check the "Remaining length" (second byte) of the received PINGRESP is 0. */
    if( pPingresp->remainingLength != MQTT_PACKET_PINGRESP_REMAINING_LENGTH )
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	689b      	ldr	r3, [r3, #8]
 800d894:	2b00      	cmp	r3, #0
 800d896:	d001      	beq.n	800d89c <deserializePingresp+0x2c>
    {
        LogError( ( "PINGRESP does not have remaining length of %u.",
                    MQTT_PACKET_PINGRESP_REMAINING_LENGTH ) );

        status = MQTTBadResponse;
 800d898:	2305      	movs	r3, #5
 800d89a:	73fb      	strb	r3, [r7, #15]
    }

    return status;
 800d89c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d89e:	4618      	mov	r0, r3
 800d8a0:	3710      	adds	r7, #16
 800d8a2:	46bd      	mov	sp, r7
 800d8a4:	bd80      	pop	{r7, pc}
 800d8a6:	bf00      	nop
 800d8a8:	080152c0 	.word	0x080152c0
 800d8ac:	0801590c 	.word	0x0801590c
 800d8b0:	0801500c 	.word	0x0801500c

0800d8b4 <MQTT_SerializeConnectFixedHeader>:

uint8_t * MQTT_SerializeConnectFixedHeader( uint8_t * pIndex,
                                            const MQTTConnectInfo_t * pConnectInfo,
                                            const MQTTPublishInfo_t * pWillInfo,
                                            size_t remainingLength )
{
 800d8b4:	b580      	push	{r7, lr}
 800d8b6:	b086      	sub	sp, #24
 800d8b8:	af00      	add	r7, sp, #0
 800d8ba:	60f8      	str	r0, [r7, #12]
 800d8bc:	60b9      	str	r1, [r7, #8]
 800d8be:	607a      	str	r2, [r7, #4]
 800d8c0:	603b      	str	r3, [r7, #0]
    uint8_t * pIndexLocal = pIndex;
 800d8c2:	68fb      	ldr	r3, [r7, #12]
 800d8c4:	613b      	str	r3, [r7, #16]
    uint8_t connectFlags = 0U;
 800d8c6:	2300      	movs	r3, #0
 800d8c8:	75fb      	strb	r3, [r7, #23]

    /* The first byte in the CONNECT packet is the control packet type. */
    *pIndexLocal = MQTT_PACKET_TYPE_CONNECT;
 800d8ca:	693b      	ldr	r3, [r7, #16]
 800d8cc:	2210      	movs	r2, #16
 800d8ce:	701a      	strb	r2, [r3, #0]
    pIndexLocal++;
 800d8d0:	693b      	ldr	r3, [r7, #16]
 800d8d2:	3301      	adds	r3, #1
 800d8d4:	613b      	str	r3, [r7, #16]

    /* The remaining length of the CONNECT packet is encoded starting from the
     * second byte. The remaining length does not include the length of the fixed
     * header or the encoding of the remaining length. */
    pIndexLocal = encodeRemainingLength( pIndexLocal, remainingLength );
 800d8d6:	6839      	ldr	r1, [r7, #0]
 800d8d8:	6938      	ldr	r0, [r7, #16]
 800d8da:	f7ff fa57 	bl	800cd8c <encodeRemainingLength>
 800d8de:	6138      	str	r0, [r7, #16]

    /* The string "MQTT" is placed at the beginning of the CONNECT packet's variable
     * header. This string is 4 bytes long. */
    pIndexLocal = encodeString( pIndexLocal, "MQTT", 4 );
 800d8e0:	2204      	movs	r2, #4
 800d8e2:	492f      	ldr	r1, [pc, #188]	; (800d9a0 <MQTT_SerializeConnectFixedHeader+0xec>)
 800d8e4:	6938      	ldr	r0, [r7, #16]
 800d8e6:	f7ff fa89 	bl	800cdfc <encodeString>
 800d8ea:	6138      	str	r0, [r7, #16]

    /* The MQTT protocol version is the second field of the variable header. */
    *pIndexLocal = MQTT_VERSION_3_1_1;
 800d8ec:	693b      	ldr	r3, [r7, #16]
 800d8ee:	2204      	movs	r2, #4
 800d8f0:	701a      	strb	r2, [r3, #0]
    pIndexLocal++;
 800d8f2:	693b      	ldr	r3, [r7, #16]
 800d8f4:	3301      	adds	r3, #1
 800d8f6:	613b      	str	r3, [r7, #16]

    /* Set the clean session flag if needed. */
    if( pConnectInfo->cleanSession == true )
 800d8f8:	68bb      	ldr	r3, [r7, #8]
 800d8fa:	781b      	ldrb	r3, [r3, #0]
 800d8fc:	2b00      	cmp	r3, #0
 800d8fe:	d003      	beq.n	800d908 <MQTT_SerializeConnectFixedHeader+0x54>
    {
        UINT8_SET_BIT( connectFlags, MQTT_CONNECT_FLAG_CLEAN );
 800d900:	7dfb      	ldrb	r3, [r7, #23]
 800d902:	f043 0302 	orr.w	r3, r3, #2
 800d906:	75fb      	strb	r3, [r7, #23]
    }

    /* Set the flags for username and password if provided. */
    if( pConnectInfo->pUserName != NULL )
 800d908:	68bb      	ldr	r3, [r7, #8]
 800d90a:	68db      	ldr	r3, [r3, #12]
 800d90c:	2b00      	cmp	r3, #0
 800d90e:	d003      	beq.n	800d918 <MQTT_SerializeConnectFixedHeader+0x64>
    {
        UINT8_SET_BIT( connectFlags, MQTT_CONNECT_FLAG_USERNAME );
 800d910:	7dfb      	ldrb	r3, [r7, #23]
 800d912:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800d916:	75fb      	strb	r3, [r7, #23]
    }

    if( pConnectInfo->pPassword != NULL )
 800d918:	68bb      	ldr	r3, [r7, #8]
 800d91a:	695b      	ldr	r3, [r3, #20]
 800d91c:	2b00      	cmp	r3, #0
 800d91e:	d003      	beq.n	800d928 <MQTT_SerializeConnectFixedHeader+0x74>
    {
        UINT8_SET_BIT( connectFlags, MQTT_CONNECT_FLAG_PASSWORD );
 800d920:	7dfb      	ldrb	r3, [r7, #23]
 800d922:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d926:	75fb      	strb	r3, [r7, #23]
    }

    /* Set will flag if a Last Will and Testament is provided. */
    if( pWillInfo != NULL )
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	2b00      	cmp	r3, #0
 800d92c:	d01c      	beq.n	800d968 <MQTT_SerializeConnectFixedHeader+0xb4>
    {
        UINT8_SET_BIT( connectFlags, MQTT_CONNECT_FLAG_WILL );
 800d92e:	7dfb      	ldrb	r3, [r7, #23]
 800d930:	f043 0304 	orr.w	r3, r3, #4
 800d934:	75fb      	strb	r3, [r7, #23]

        /* Flags only need to be changed for Will QoS 1 or 2. */
        if( pWillInfo->qos == MQTTQoS1 )
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	781b      	ldrb	r3, [r3, #0]
 800d93a:	2b01      	cmp	r3, #1
 800d93c:	d104      	bne.n	800d948 <MQTT_SerializeConnectFixedHeader+0x94>
        {
            UINT8_SET_BIT( connectFlags, MQTT_CONNECT_FLAG_WILL_QOS1 );
 800d93e:	7dfb      	ldrb	r3, [r7, #23]
 800d940:	f043 0308 	orr.w	r3, r3, #8
 800d944:	75fb      	strb	r3, [r7, #23]
 800d946:	e007      	b.n	800d958 <MQTT_SerializeConnectFixedHeader+0xa4>
        }
        else if( pWillInfo->qos == MQTTQoS2 )
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	781b      	ldrb	r3, [r3, #0]
 800d94c:	2b02      	cmp	r3, #2
 800d94e:	d103      	bne.n	800d958 <MQTT_SerializeConnectFixedHeader+0xa4>
        {
            UINT8_SET_BIT( connectFlags, MQTT_CONNECT_FLAG_WILL_QOS2 );
 800d950:	7dfb      	ldrb	r3, [r7, #23]
 800d952:	f043 0310 	orr.w	r3, r3, #16
 800d956:	75fb      	strb	r3, [r7, #23]
        else
        {
            /* Empty else MISRA 15.7 */
        }

        if( pWillInfo->retain == true )
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	785b      	ldrb	r3, [r3, #1]
 800d95c:	2b00      	cmp	r3, #0
 800d95e:	d003      	beq.n	800d968 <MQTT_SerializeConnectFixedHeader+0xb4>
        {
            UINT8_SET_BIT( connectFlags, MQTT_CONNECT_FLAG_WILL_RETAIN );
 800d960:	7dfb      	ldrb	r3, [r7, #23]
 800d962:	f043 0320 	orr.w	r3, r3, #32
 800d966:	75fb      	strb	r3, [r7, #23]
        }
    }

    *pIndexLocal = connectFlags;
 800d968:	693b      	ldr	r3, [r7, #16]
 800d96a:	7dfa      	ldrb	r2, [r7, #23]
 800d96c:	701a      	strb	r2, [r3, #0]
    pIndexLocal++;
 800d96e:	693b      	ldr	r3, [r7, #16]
 800d970:	3301      	adds	r3, #1
 800d972:	613b      	str	r3, [r7, #16]

    /* Write the 2 bytes of the keep alive interval into the CONNECT packet. */
    pIndexLocal[ 0 ] = UINT16_HIGH_BYTE( pConnectInfo->keepAliveSeconds );
 800d974:	68bb      	ldr	r3, [r7, #8]
 800d976:	885b      	ldrh	r3, [r3, #2]
 800d978:	0a1b      	lsrs	r3, r3, #8
 800d97a:	b29b      	uxth	r3, r3
 800d97c:	b2da      	uxtb	r2, r3
 800d97e:	693b      	ldr	r3, [r7, #16]
 800d980:	701a      	strb	r2, [r3, #0]
    pIndexLocal[ 1 ] = UINT16_LOW_BYTE( pConnectInfo->keepAliveSeconds );
 800d982:	68bb      	ldr	r3, [r7, #8]
 800d984:	885a      	ldrh	r2, [r3, #2]
 800d986:	693b      	ldr	r3, [r7, #16]
 800d988:	3301      	adds	r3, #1
 800d98a:	b2d2      	uxtb	r2, r2
 800d98c:	701a      	strb	r2, [r3, #0]
    pIndexLocal = &pIndexLocal[ 2 ];
 800d98e:	693b      	ldr	r3, [r7, #16]
 800d990:	3302      	adds	r3, #2
 800d992:	613b      	str	r3, [r7, #16]

    return pIndexLocal;
 800d994:	693b      	ldr	r3, [r7, #16]
}
 800d996:	4618      	mov	r0, r3
 800d998:	3718      	adds	r7, #24
 800d99a:	46bd      	mov	sp, r7
 800d99c:	bd80      	pop	{r7, pc}
 800d99e:	bf00      	nop
 800d9a0:	080152d4 	.word	0x080152d4

0800d9a4 <MQTT_GetConnectPacketSize>:

MQTTStatus_t MQTT_GetConnectPacketSize( const MQTTConnectInfo_t * pConnectInfo,
                                        const MQTTPublishInfo_t * pWillInfo,
                                        size_t * pRemainingLength,
                                        size_t * pPacketSize )
{
 800d9a4:	b580      	push	{r7, lr}
 800d9a6:	b088      	sub	sp, #32
 800d9a8:	af00      	add	r7, sp, #0
 800d9aa:	60f8      	str	r0, [r7, #12]
 800d9ac:	60b9      	str	r1, [r7, #8]
 800d9ae:	607a      	str	r2, [r7, #4]
 800d9b0:	603b      	str	r3, [r7, #0]
    MQTTStatus_t status = MQTTSuccess;
 800d9b2:	2300      	movs	r3, #0
 800d9b4:	77fb      	strb	r3, [r7, #31]
    size_t remainingLength;

    /* The CONNECT packet will always include a 10-byte variable header. */
    size_t connectPacketSize = MQTT_PACKET_CONNECT_HEADER_SIZE;
 800d9b6:	230a      	movs	r3, #10
 800d9b8:	61bb      	str	r3, [r7, #24]

    /* Validate arguments. */
    if( ( pConnectInfo == NULL ) || ( pRemainingLength == NULL ) ||
 800d9ba:	68fb      	ldr	r3, [r7, #12]
 800d9bc:	2b00      	cmp	r3, #0
 800d9be:	d005      	beq.n	800d9cc <MQTT_GetConnectPacketSize+0x28>
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	2b00      	cmp	r3, #0
 800d9c4:	d002      	beq.n	800d9cc <MQTT_GetConnectPacketSize+0x28>
 800d9c6:	683b      	ldr	r3, [r7, #0]
 800d9c8:	2b00      	cmp	r3, #0
 800d9ca:	d102      	bne.n	800d9d2 <MQTT_GetConnectPacketSize+0x2e>
        LogError( ( "Argument cannot be NULL: pConnectInfo=%p, "
                    "pRemainingLength=%p, pPacketSize=%p.",
                    ( void * ) pConnectInfo,
                    ( void * ) pRemainingLength,
                    ( void * ) pPacketSize ) );
        status = MQTTBadParameter;
 800d9cc:	2301      	movs	r3, #1
 800d9ce:	77fb      	strb	r3, [r7, #31]
 800d9d0:	e04f      	b.n	800da72 <MQTT_GetConnectPacketSize+0xce>
    }
    else if( ( pConnectInfo->clientIdentifierLength == 0U ) || ( pConnectInfo->pClientIdentifier == NULL ) )
 800d9d2:	68fb      	ldr	r3, [r7, #12]
 800d9d4:	891b      	ldrh	r3, [r3, #8]
 800d9d6:	2b00      	cmp	r3, #0
 800d9d8:	d003      	beq.n	800d9e2 <MQTT_GetConnectPacketSize+0x3e>
 800d9da:	68fb      	ldr	r3, [r7, #12]
 800d9dc:	685b      	ldr	r3, [r3, #4]
 800d9de:	2b00      	cmp	r3, #0
 800d9e0:	d102      	bne.n	800d9e8 <MQTT_GetConnectPacketSize+0x44>
    {
        LogError( ( "Mqtt_GetConnectPacketSize() client identifier must be set." ) );
        status = MQTTBadParameter;
 800d9e2:	2301      	movs	r3, #1
 800d9e4:	77fb      	strb	r3, [r7, #31]
 800d9e6:	e044      	b.n	800da72 <MQTT_GetConnectPacketSize+0xce>
    }
    else if( ( pWillInfo != NULL ) && ( pWillInfo->payloadLength > ( size_t ) UINT16_MAX ) )
 800d9e8:	68bb      	ldr	r3, [r7, #8]
 800d9ea:	2b00      	cmp	r3, #0
 800d9ec:	d007      	beq.n	800d9fe <MQTT_GetConnectPacketSize+0x5a>
 800d9ee:	68bb      	ldr	r3, [r7, #8]
 800d9f0:	691b      	ldr	r3, [r3, #16]
 800d9f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d9f6:	d302      	bcc.n	800d9fe <MQTT_GetConnectPacketSize+0x5a>
         * packet will never be larger than 327699 bytes. */
        LogError( ( "The Will Message length must not exceed %d. "
                    "pWillInfo->payloadLength=%lu.",
                    UINT16_MAX,
                    ( unsigned long ) pWillInfo->payloadLength ) );
        status = MQTTBadParameter;
 800d9f8:	2301      	movs	r3, #1
 800d9fa:	77fb      	strb	r3, [r7, #31]
 800d9fc:	e039      	b.n	800da72 <MQTT_GetConnectPacketSize+0xce>
    }
    else
    {
        /* Add the length of the client identifier. */
        connectPacketSize += pConnectInfo->clientIdentifierLength + sizeof( uint16_t );
 800d9fe:	68fb      	ldr	r3, [r7, #12]
 800da00:	891b      	ldrh	r3, [r3, #8]
 800da02:	461a      	mov	r2, r3
 800da04:	69bb      	ldr	r3, [r7, #24]
 800da06:	4413      	add	r3, r2
 800da08:	3302      	adds	r3, #2
 800da0a:	61bb      	str	r3, [r7, #24]

        /* Add the lengths of the will message and topic name if provided. */
        if( pWillInfo != NULL )
 800da0c:	68bb      	ldr	r3, [r7, #8]
 800da0e:	2b00      	cmp	r3, #0
 800da10:	d009      	beq.n	800da26 <MQTT_GetConnectPacketSize+0x82>
        {
            connectPacketSize += pWillInfo->topicNameLength + sizeof( uint16_t ) +
 800da12:	68bb      	ldr	r3, [r7, #8]
 800da14:	891b      	ldrh	r3, [r3, #8]
 800da16:	461a      	mov	r2, r3
                                 pWillInfo->payloadLength + sizeof( uint16_t );
 800da18:	68bb      	ldr	r3, [r7, #8]
 800da1a:	691b      	ldr	r3, [r3, #16]
            connectPacketSize += pWillInfo->topicNameLength + sizeof( uint16_t ) +
 800da1c:	441a      	add	r2, r3
 800da1e:	69bb      	ldr	r3, [r7, #24]
 800da20:	4413      	add	r3, r2
 800da22:	3304      	adds	r3, #4
 800da24:	61bb      	str	r3, [r7, #24]
        }

        /* Add the lengths of the user name and password if provided. */
        if( pConnectInfo->pUserName != NULL )
 800da26:	68fb      	ldr	r3, [r7, #12]
 800da28:	68db      	ldr	r3, [r3, #12]
 800da2a:	2b00      	cmp	r3, #0
 800da2c:	d006      	beq.n	800da3c <MQTT_GetConnectPacketSize+0x98>
        {
            connectPacketSize += pConnectInfo->userNameLength + sizeof( uint16_t );
 800da2e:	68fb      	ldr	r3, [r7, #12]
 800da30:	8a1b      	ldrh	r3, [r3, #16]
 800da32:	461a      	mov	r2, r3
 800da34:	69bb      	ldr	r3, [r7, #24]
 800da36:	4413      	add	r3, r2
 800da38:	3302      	adds	r3, #2
 800da3a:	61bb      	str	r3, [r7, #24]
        }

        if( pConnectInfo->pPassword != NULL )
 800da3c:	68fb      	ldr	r3, [r7, #12]
 800da3e:	695b      	ldr	r3, [r3, #20]
 800da40:	2b00      	cmp	r3, #0
 800da42:	d006      	beq.n	800da52 <MQTT_GetConnectPacketSize+0xae>
        {
            connectPacketSize += pConnectInfo->passwordLength + sizeof( uint16_t );
 800da44:	68fb      	ldr	r3, [r7, #12]
 800da46:	8b1b      	ldrh	r3, [r3, #24]
 800da48:	461a      	mov	r2, r3
 800da4a:	69bb      	ldr	r3, [r7, #24]
 800da4c:	4413      	add	r3, r2
 800da4e:	3302      	adds	r3, #2
 800da50:	61bb      	str	r3, [r7, #24]
        }

        /* At this point, the "Remaining Length" field of the MQTT CONNECT packet has
         * been calculated. */
        remainingLength = connectPacketSize;
 800da52:	69bb      	ldr	r3, [r7, #24]
 800da54:	617b      	str	r3, [r7, #20]

        /* Calculate the full size of the MQTT CONNECT packet by adding the size of
         * the "Remaining Length" field plus 1 byte for the "Packet Type" field. */
        connectPacketSize += 1U + remainingLengthEncodedSize( connectPacketSize );
 800da56:	69b8      	ldr	r0, [r7, #24]
 800da58:	f7ff f976 	bl	800cd48 <remainingLengthEncodedSize>
 800da5c:	4603      	mov	r3, r0
 800da5e:	3301      	adds	r3, #1
 800da60:	69ba      	ldr	r2, [r7, #24]
 800da62:	4413      	add	r3, r2
 800da64:	61bb      	str	r3, [r7, #24]
         * (maximum username length) 65535 + (encoded length) 2 +
         * (maximum password length) 65535 + (encoded length) 2 +
         * (packet type field length) 1 +
         * (CONNECT packet encoded length) 3 = 327699 */

        *pRemainingLength = remainingLength;
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	697a      	ldr	r2, [r7, #20]
 800da6a:	601a      	str	r2, [r3, #0]
        *pPacketSize = connectPacketSize;
 800da6c:	683b      	ldr	r3, [r7, #0]
 800da6e:	69ba      	ldr	r2, [r7, #24]
 800da70:	601a      	str	r2, [r3, #0]
        LogDebug( ( "CONNECT packet remaining length=%lu and packet size=%lu.",
                    ( unsigned long ) *pRemainingLength,
                    ( unsigned long ) *pPacketSize ) );
    }

    return status;
 800da72:	7ffb      	ldrb	r3, [r7, #31]
}
 800da74:	4618      	mov	r0, r3
 800da76:	3720      	adds	r7, #32
 800da78:	46bd      	mov	sp, r7
 800da7a:	bd80      	pop	{r7, pc}

0800da7c <MQTT_GetSubscribePacketSize>:

MQTTStatus_t MQTT_GetSubscribePacketSize( const MQTTSubscribeInfo_t * pSubscriptionList,
                                          size_t subscriptionCount,
                                          size_t * pRemainingLength,
                                          size_t * pPacketSize )
{
 800da7c:	b580      	push	{r7, lr}
 800da7e:	b088      	sub	sp, #32
 800da80:	af02      	add	r7, sp, #8
 800da82:	60f8      	str	r0, [r7, #12]
 800da84:	60b9      	str	r1, [r7, #8]
 800da86:	607a      	str	r2, [r7, #4]
 800da88:	603b      	str	r3, [r7, #0]
    MQTTStatus_t status = MQTTSuccess;
 800da8a:	2300      	movs	r3, #0
 800da8c:	75fb      	strb	r3, [r7, #23]

    /* Validate parameters. */
    if( ( pSubscriptionList == NULL ) || ( pRemainingLength == NULL ) ||
 800da8e:	68fb      	ldr	r3, [r7, #12]
 800da90:	2b00      	cmp	r3, #0
 800da92:	d005      	beq.n	800daa0 <MQTT_GetSubscribePacketSize+0x24>
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	2b00      	cmp	r3, #0
 800da98:	d002      	beq.n	800daa0 <MQTT_GetSubscribePacketSize+0x24>
 800da9a:	683b      	ldr	r3, [r7, #0]
 800da9c:	2b00      	cmp	r3, #0
 800da9e:	d102      	bne.n	800daa6 <MQTT_GetSubscribePacketSize+0x2a>
        LogError( ( "Argument cannot be NULL: pSubscriptionList=%p, "
                    "pRemainingLength=%p, pPacketSize=%p.",
                    ( void * ) pSubscriptionList,
                    ( void * ) pRemainingLength,
                    ( void * ) pPacketSize ) );
        status = MQTTBadParameter;
 800daa0:	2301      	movs	r3, #1
 800daa2:	75fb      	strb	r3, [r7, #23]
 800daa4:	e00f      	b.n	800dac6 <MQTT_GetSubscribePacketSize+0x4a>
    }
    else if( subscriptionCount == 0U )
 800daa6:	68bb      	ldr	r3, [r7, #8]
 800daa8:	2b00      	cmp	r3, #0
 800daaa:	d102      	bne.n	800dab2 <MQTT_GetSubscribePacketSize+0x36>
    {
        LogError( ( "subscriptionCount is 0." ) );
        status = MQTTBadParameter;
 800daac:	2301      	movs	r3, #1
 800daae:	75fb      	strb	r3, [r7, #23]
 800dab0:	e009      	b.n	800dac6 <MQTT_GetSubscribePacketSize+0x4a>
    }
    else
    {
        /* Calculate the MQTT SUBSCRIBE packet size. */
        status = calculateSubscriptionPacketSize( pSubscriptionList,
 800dab2:	2300      	movs	r3, #0
 800dab4:	9300      	str	r3, [sp, #0]
 800dab6:	683b      	ldr	r3, [r7, #0]
 800dab8:	687a      	ldr	r2, [r7, #4]
 800daba:	68b9      	ldr	r1, [r7, #8]
 800dabc:	68f8      	ldr	r0, [r7, #12]
 800dabe:	f7ff fca3 	bl	800d408 <calculateSubscriptionPacketSize>
 800dac2:	4603      	mov	r3, r0
 800dac4:	75fb      	strb	r3, [r7, #23]
                                                  pRemainingLength,
                                                  pPacketSize,
                                                  MQTT_SUBSCRIBE );
    }

    return status;
 800dac6:	7dfb      	ldrb	r3, [r7, #23]
}
 800dac8:	4618      	mov	r0, r3
 800daca:	3718      	adds	r7, #24
 800dacc:	46bd      	mov	sp, r7
 800dace:	bd80      	pop	{r7, pc}

0800dad0 <MQTT_SerializeSubscribeHeader>:
/*-----------------------------------------------------------*/

uint8_t * MQTT_SerializeSubscribeHeader( size_t remainingLength,
                                         uint8_t * pIndex,
                                         uint16_t packetId )
{
 800dad0:	b580      	push	{r7, lr}
 800dad2:	b086      	sub	sp, #24
 800dad4:	af00      	add	r7, sp, #0
 800dad6:	60f8      	str	r0, [r7, #12]
 800dad8:	60b9      	str	r1, [r7, #8]
 800dada:	4613      	mov	r3, r2
 800dadc:	80fb      	strh	r3, [r7, #6]
    uint8_t * pIterator = pIndex;
 800dade:	68bb      	ldr	r3, [r7, #8]
 800dae0:	617b      	str	r3, [r7, #20]

    /* The first byte in SUBSCRIBE is the packet type. */
    *pIterator = MQTT_PACKET_TYPE_SUBSCRIBE;
 800dae2:	697b      	ldr	r3, [r7, #20]
 800dae4:	2282      	movs	r2, #130	; 0x82
 800dae6:	701a      	strb	r2, [r3, #0]
    pIterator++;
 800dae8:	697b      	ldr	r3, [r7, #20]
 800daea:	3301      	adds	r3, #1
 800daec:	617b      	str	r3, [r7, #20]

    /* Encode the "Remaining length" starting from the second byte. */
    pIterator = encodeRemainingLength( pIterator, remainingLength );
 800daee:	68f9      	ldr	r1, [r7, #12]
 800daf0:	6978      	ldr	r0, [r7, #20]
 800daf2:	f7ff f94b 	bl	800cd8c <encodeRemainingLength>
 800daf6:	6178      	str	r0, [r7, #20]

    /* Place the packet identifier into the SUBSCRIBE packet. */
    pIterator[ 0 ] = UINT16_HIGH_BYTE( packetId );
 800daf8:	88fb      	ldrh	r3, [r7, #6]
 800dafa:	0a1b      	lsrs	r3, r3, #8
 800dafc:	b29b      	uxth	r3, r3
 800dafe:	b2da      	uxtb	r2, r3
 800db00:	697b      	ldr	r3, [r7, #20]
 800db02:	701a      	strb	r2, [r3, #0]
    pIterator[ 1 ] = UINT16_LOW_BYTE( packetId );
 800db04:	697b      	ldr	r3, [r7, #20]
 800db06:	3301      	adds	r3, #1
 800db08:	88fa      	ldrh	r2, [r7, #6]
 800db0a:	b2d2      	uxtb	r2, r2
 800db0c:	701a      	strb	r2, [r3, #0]
    /* Advance the pointer. */
    pIterator = &pIterator[ 2 ];
 800db0e:	697b      	ldr	r3, [r7, #20]
 800db10:	3302      	adds	r3, #2
 800db12:	617b      	str	r3, [r7, #20]

    return pIterator;
 800db14:	697b      	ldr	r3, [r7, #20]
}
 800db16:	4618      	mov	r0, r3
 800db18:	3718      	adds	r7, #24
 800db1a:	46bd      	mov	sp, r7
 800db1c:	bd80      	pop	{r7, pc}

0800db1e <MQTT_GetPublishPacketSize>:
/*-----------------------------------------------------------*/

MQTTStatus_t MQTT_GetPublishPacketSize( const MQTTPublishInfo_t * pPublishInfo,
                                        size_t * pRemainingLength,
                                        size_t * pPacketSize )
{
 800db1e:	b580      	push	{r7, lr}
 800db20:	b086      	sub	sp, #24
 800db22:	af00      	add	r7, sp, #0
 800db24:	60f8      	str	r0, [r7, #12]
 800db26:	60b9      	str	r1, [r7, #8]
 800db28:	607a      	str	r2, [r7, #4]
    MQTTStatus_t status = MQTTSuccess;
 800db2a:	2300      	movs	r3, #0
 800db2c:	75fb      	strb	r3, [r7, #23]

    if( ( pPublishInfo == NULL ) || ( pRemainingLength == NULL ) || ( pPacketSize == NULL ) )
 800db2e:	68fb      	ldr	r3, [r7, #12]
 800db30:	2b00      	cmp	r3, #0
 800db32:	d005      	beq.n	800db40 <MQTT_GetPublishPacketSize+0x22>
 800db34:	68bb      	ldr	r3, [r7, #8]
 800db36:	2b00      	cmp	r3, #0
 800db38:	d002      	beq.n	800db40 <MQTT_GetPublishPacketSize+0x22>
 800db3a:	687b      	ldr	r3, [r7, #4]
 800db3c:	2b00      	cmp	r3, #0
 800db3e:	d102      	bne.n	800db46 <MQTT_GetPublishPacketSize+0x28>
        LogError( ( "Argument cannot be NULL: pPublishInfo=%p, "
                    "pRemainingLength=%p, pPacketSize=%p.",
                    ( void * ) pPublishInfo,
                    ( void * ) pRemainingLength,
                    ( void * ) pPacketSize ) );
        status = MQTTBadParameter;
 800db40:	2301      	movs	r3, #1
 800db42:	75fb      	strb	r3, [r7, #23]
 800db44:	e017      	b.n	800db76 <MQTT_GetPublishPacketSize+0x58>
    }
    else if( ( pPublishInfo->pTopicName == NULL ) || ( pPublishInfo->topicNameLength == 0U ) )
 800db46:	68fb      	ldr	r3, [r7, #12]
 800db48:	685b      	ldr	r3, [r3, #4]
 800db4a:	2b00      	cmp	r3, #0
 800db4c:	d003      	beq.n	800db56 <MQTT_GetPublishPacketSize+0x38>
 800db4e:	68fb      	ldr	r3, [r7, #12]
 800db50:	891b      	ldrh	r3, [r3, #8]
 800db52:	2b00      	cmp	r3, #0
 800db54:	d102      	bne.n	800db5c <MQTT_GetPublishPacketSize+0x3e>
    {
        LogError( ( "Invalid topic name for PUBLISH: pTopicName=%p, "
                    "topicNameLength=%hu.",
                    ( void * ) pPublishInfo->pTopicName,
                    ( unsigned short ) pPublishInfo->topicNameLength ) );
        status = MQTTBadParameter;
 800db56:	2301      	movs	r3, #1
 800db58:	75fb      	strb	r3, [r7, #23]
 800db5a:	e00c      	b.n	800db76 <MQTT_GetPublishPacketSize+0x58>
    }
    else
    {
        /* Calculate the "Remaining length" field and total packet size. If it exceeds
         * what is allowed in the MQTT standard, return an error. */
        if( calculatePublishPacketSize( pPublishInfo, pRemainingLength, pPacketSize ) == false )
 800db5c:	687a      	ldr	r2, [r7, #4]
 800db5e:	68b9      	ldr	r1, [r7, #8]
 800db60:	68f8      	ldr	r0, [r7, #12]
 800db62:	f7ff f98b 	bl	800ce7c <calculatePublishPacketSize>
 800db66:	4603      	mov	r3, r0
 800db68:	f083 0301 	eor.w	r3, r3, #1
 800db6c:	b2db      	uxtb	r3, r3
 800db6e:	2b00      	cmp	r3, #0
 800db70:	d001      	beq.n	800db76 <MQTT_GetPublishPacketSize+0x58>
        {
            LogError( ( "PUBLISH packet remaining length exceeds %lu, which is the "
                        "maximum size allowed by MQTT 3.1.1.",
                        MQTT_MAX_REMAINING_LENGTH ) );
            status = MQTTBadParameter;
 800db72:	2301      	movs	r3, #1
 800db74:	75fb      	strb	r3, [r7, #23]
        }
    }

    return status;
 800db76:	7dfb      	ldrb	r3, [r7, #23]
}
 800db78:	4618      	mov	r0, r3
 800db7a:	3718      	adds	r7, #24
 800db7c:	46bd      	mov	sp, r7
 800db7e:	bd80      	pop	{r7, pc}

0800db80 <MQTT_SerializeAck>:
/*-----------------------------------------------------------*/

MQTTStatus_t MQTT_SerializeAck( const MQTTFixedBuffer_t * pFixedBuffer,
                                uint8_t packetType,
                                uint16_t packetId )
{
 800db80:	b480      	push	{r7}
 800db82:	b085      	sub	sp, #20
 800db84:	af00      	add	r7, sp, #0
 800db86:	6078      	str	r0, [r7, #4]
 800db88:	460b      	mov	r3, r1
 800db8a:	70fb      	strb	r3, [r7, #3]
 800db8c:	4613      	mov	r3, r2
 800db8e:	803b      	strh	r3, [r7, #0]
    MQTTStatus_t status = MQTTSuccess;
 800db90:	2300      	movs	r3, #0
 800db92:	73fb      	strb	r3, [r7, #15]

    if( pFixedBuffer == NULL )
 800db94:	687b      	ldr	r3, [r7, #4]
 800db96:	2b00      	cmp	r3, #0
 800db98:	d102      	bne.n	800dba0 <MQTT_SerializeAck+0x20>
    {
        LogError( ( "Provided buffer is NULL." ) );
        status = MQTTBadParameter;
 800db9a:	2301      	movs	r3, #1
 800db9c:	73fb      	strb	r3, [r7, #15]
 800db9e:	e03b      	b.n	800dc18 <MQTT_SerializeAck+0x98>
    }
    else if( pFixedBuffer->pBuffer == NULL )
 800dba0:	687b      	ldr	r3, [r7, #4]
 800dba2:	681b      	ldr	r3, [r3, #0]
 800dba4:	2b00      	cmp	r3, #0
 800dba6:	d102      	bne.n	800dbae <MQTT_SerializeAck+0x2e>
    {
        LogError( ( "pFixedBuffer->pBuffer cannot be NULL." ) );
        status = MQTTBadParameter;
 800dba8:	2301      	movs	r3, #1
 800dbaa:	73fb      	strb	r3, [r7, #15]
 800dbac:	e034      	b.n	800dc18 <MQTT_SerializeAck+0x98>
    }
    /* The buffer must be able to fit 4 bytes for the packet. */
    else if( pFixedBuffer->size < MQTT_PUBLISH_ACK_PACKET_SIZE )
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	685b      	ldr	r3, [r3, #4]
 800dbb2:	2b03      	cmp	r3, #3
 800dbb4:	d802      	bhi.n	800dbbc <MQTT_SerializeAck+0x3c>
    {
        LogError( ( "Insufficient memory for packet." ) );
        status = MQTTNoMemory;
 800dbb6:	2302      	movs	r3, #2
 800dbb8:	73fb      	strb	r3, [r7, #15]
 800dbba:	e02d      	b.n	800dc18 <MQTT_SerializeAck+0x98>
    }
    else if( packetId == 0U )
 800dbbc:	883b      	ldrh	r3, [r7, #0]
 800dbbe:	2b00      	cmp	r3, #0
 800dbc0:	d102      	bne.n	800dbc8 <MQTT_SerializeAck+0x48>
    {
        LogError( ( "Packet ID cannot be 0." ) );
        status = MQTTBadParameter;
 800dbc2:	2301      	movs	r3, #1
 800dbc4:	73fb      	strb	r3, [r7, #15]
 800dbc6:	e027      	b.n	800dc18 <MQTT_SerializeAck+0x98>
    }
    else
    {
        switch( packetType )
 800dbc8:	78fb      	ldrb	r3, [r7, #3]
 800dbca:	2b70      	cmp	r3, #112	; 0x70
 800dbcc:	d009      	beq.n	800dbe2 <MQTT_SerializeAck+0x62>
 800dbce:	2b70      	cmp	r3, #112	; 0x70
 800dbd0:	dc1f      	bgt.n	800dc12 <MQTT_SerializeAck+0x92>
 800dbd2:	2b62      	cmp	r3, #98	; 0x62
 800dbd4:	d005      	beq.n	800dbe2 <MQTT_SerializeAck+0x62>
 800dbd6:	2b62      	cmp	r3, #98	; 0x62
 800dbd8:	dc1b      	bgt.n	800dc12 <MQTT_SerializeAck+0x92>
 800dbda:	2b40      	cmp	r3, #64	; 0x40
 800dbdc:	d001      	beq.n	800dbe2 <MQTT_SerializeAck+0x62>
 800dbde:	2b50      	cmp	r3, #80	; 0x50
 800dbe0:	d117      	bne.n	800dc12 <MQTT_SerializeAck+0x92>
            /* Only publish acks are serialized by the client. */
            case MQTT_PACKET_TYPE_PUBACK:
            case MQTT_PACKET_TYPE_PUBREC:
            case MQTT_PACKET_TYPE_PUBREL:
            case MQTT_PACKET_TYPE_PUBCOMP:
                pFixedBuffer->pBuffer[ 0 ] = packetType;
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	681b      	ldr	r3, [r3, #0]
 800dbe6:	78fa      	ldrb	r2, [r7, #3]
 800dbe8:	701a      	strb	r2, [r3, #0]
                pFixedBuffer->pBuffer[ 1 ] = MQTT_PACKET_SIMPLE_ACK_REMAINING_LENGTH;
 800dbea:	687b      	ldr	r3, [r7, #4]
 800dbec:	681b      	ldr	r3, [r3, #0]
 800dbee:	3301      	adds	r3, #1
 800dbf0:	2202      	movs	r2, #2
 800dbf2:	701a      	strb	r2, [r3, #0]
                pFixedBuffer->pBuffer[ 2 ] = UINT16_HIGH_BYTE( packetId );
 800dbf4:	883b      	ldrh	r3, [r7, #0]
 800dbf6:	0a1b      	lsrs	r3, r3, #8
 800dbf8:	b29a      	uxth	r2, r3
 800dbfa:	687b      	ldr	r3, [r7, #4]
 800dbfc:	681b      	ldr	r3, [r3, #0]
 800dbfe:	3302      	adds	r3, #2
 800dc00:	b2d2      	uxtb	r2, r2
 800dc02:	701a      	strb	r2, [r3, #0]
                pFixedBuffer->pBuffer[ 3 ] = UINT16_LOW_BYTE( packetId );
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	681b      	ldr	r3, [r3, #0]
 800dc08:	3303      	adds	r3, #3
 800dc0a:	883a      	ldrh	r2, [r7, #0]
 800dc0c:	b2d2      	uxtb	r2, r2
 800dc0e:	701a      	strb	r2, [r3, #0]
                break;
 800dc10:	e002      	b.n	800dc18 <MQTT_SerializeAck+0x98>

            default:
                LogError( ( "Packet type is not a publish ACK: Packet type=%02x",
                            ( unsigned int ) packetType ) );
                status = MQTTBadParameter;
 800dc12:	2301      	movs	r3, #1
 800dc14:	73fb      	strb	r3, [r7, #15]
                break;
 800dc16:	bf00      	nop
        }
    }

    return status;
 800dc18:	7bfb      	ldrb	r3, [r7, #15]
}
 800dc1a:	4618      	mov	r0, r3
 800dc1c:	3714      	adds	r7, #20
 800dc1e:	46bd      	mov	sp, r7
 800dc20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc24:	4770      	bx	lr

0800dc26 <MQTT_GetPingreqPacketSize>:
}

/*-----------------------------------------------------------*/

MQTTStatus_t MQTT_GetPingreqPacketSize( size_t * pPacketSize )
{
 800dc26:	b480      	push	{r7}
 800dc28:	b085      	sub	sp, #20
 800dc2a:	af00      	add	r7, sp, #0
 800dc2c:	6078      	str	r0, [r7, #4]
    MQTTStatus_t status = MQTTSuccess;
 800dc2e:	2300      	movs	r3, #0
 800dc30:	73fb      	strb	r3, [r7, #15]

    if( pPacketSize == NULL )
 800dc32:	687b      	ldr	r3, [r7, #4]
 800dc34:	2b00      	cmp	r3, #0
 800dc36:	d102      	bne.n	800dc3e <MQTT_GetPingreqPacketSize+0x18>
    {
        LogError( ( "pPacketSize is NULL." ) );
        status = MQTTBadParameter;
 800dc38:	2301      	movs	r3, #1
 800dc3a:	73fb      	strb	r3, [r7, #15]
 800dc3c:	e002      	b.n	800dc44 <MQTT_GetPingreqPacketSize+0x1e>
    }
    else
    {
        /* MQTT PINGREQ packets always have the same size. */
        *pPacketSize = MQTT_PACKET_PINGREQ_SIZE;
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	2202      	movs	r2, #2
 800dc42:	601a      	str	r2, [r3, #0]
    }

    return status;
 800dc44:	7bfb      	ldrb	r3, [r7, #15]
}
 800dc46:	4618      	mov	r0, r3
 800dc48:	3714      	adds	r7, #20
 800dc4a:	46bd      	mov	sp, r7
 800dc4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc50:	4770      	bx	lr

0800dc52 <MQTT_SerializePingreq>:

/*-----------------------------------------------------------*/

MQTTStatus_t MQTT_SerializePingreq( const MQTTFixedBuffer_t * pFixedBuffer )
{
 800dc52:	b480      	push	{r7}
 800dc54:	b085      	sub	sp, #20
 800dc56:	af00      	add	r7, sp, #0
 800dc58:	6078      	str	r0, [r7, #4]
    MQTTStatus_t status = MQTTSuccess;
 800dc5a:	2300      	movs	r3, #0
 800dc5c:	73fb      	strb	r3, [r7, #15]

    if( pFixedBuffer == NULL )
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	2b00      	cmp	r3, #0
 800dc62:	d102      	bne.n	800dc6a <MQTT_SerializePingreq+0x18>
    {
        LogError( ( "pFixedBuffer is NULL." ) );
        status = MQTTBadParameter;
 800dc64:	2301      	movs	r3, #1
 800dc66:	73fb      	strb	r3, [r7, #15]
 800dc68:	e005      	b.n	800dc76 <MQTT_SerializePingreq+0x24>
    }
    else if( pFixedBuffer->pBuffer == NULL )
 800dc6a:	687b      	ldr	r3, [r7, #4]
 800dc6c:	681b      	ldr	r3, [r3, #0]
 800dc6e:	2b00      	cmp	r3, #0
 800dc70:	d101      	bne.n	800dc76 <MQTT_SerializePingreq+0x24>
    {
        LogError( ( "pFixedBuffer->pBuffer cannot be NULL." ) );
        status = MQTTBadParameter;
 800dc72:	2301      	movs	r3, #1
 800dc74:	73fb      	strb	r3, [r7, #15]
    else
    {
        /* Empty else MISRA 15.7 */
    }

    if( status == MQTTSuccess )
 800dc76:	7bfb      	ldrb	r3, [r7, #15]
 800dc78:	2b00      	cmp	r3, #0
 800dc7a:	d105      	bne.n	800dc88 <MQTT_SerializePingreq+0x36>
    {
        if( pFixedBuffer->size < MQTT_PACKET_PINGREQ_SIZE )
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	685b      	ldr	r3, [r3, #4]
 800dc80:	2b01      	cmp	r3, #1
 800dc82:	d801      	bhi.n	800dc88 <MQTT_SerializePingreq+0x36>
        {
            LogError( ( "Buffer size of %lu is not sufficient to hold "
                        "serialized PINGREQ packet of size of %lu.",
                        ( unsigned long ) pFixedBuffer->size,
                        MQTT_PACKET_PINGREQ_SIZE ) );
            status = MQTTNoMemory;
 800dc84:	2302      	movs	r3, #2
 800dc86:	73fb      	strb	r3, [r7, #15]
        }
    }

    if( status == MQTTSuccess )
 800dc88:	7bfb      	ldrb	r3, [r7, #15]
 800dc8a:	2b00      	cmp	r3, #0
 800dc8c:	d108      	bne.n	800dca0 <MQTT_SerializePingreq+0x4e>
    {
        /* Ping request packets are always the same. */
        pFixedBuffer->pBuffer[ 0 ] = MQTT_PACKET_TYPE_PINGREQ;
 800dc8e:	687b      	ldr	r3, [r7, #4]
 800dc90:	681b      	ldr	r3, [r3, #0]
 800dc92:	22c0      	movs	r2, #192	; 0xc0
 800dc94:	701a      	strb	r2, [r3, #0]
        pFixedBuffer->pBuffer[ 1 ] = 0x00;
 800dc96:	687b      	ldr	r3, [r7, #4]
 800dc98:	681b      	ldr	r3, [r3, #0]
 800dc9a:	3301      	adds	r3, #1
 800dc9c:	2200      	movs	r2, #0
 800dc9e:	701a      	strb	r2, [r3, #0]
    }

    return status;
 800dca0:	7bfb      	ldrb	r3, [r7, #15]
}
 800dca2:	4618      	mov	r0, r3
 800dca4:	3714      	adds	r7, #20
 800dca6:	46bd      	mov	sp, r7
 800dca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcac:	4770      	bx	lr

0800dcae <MQTT_DeserializePublish>:
/*-----------------------------------------------------------*/

MQTTStatus_t MQTT_DeserializePublish( const MQTTPacketInfo_t * pIncomingPacket,
                                      uint16_t * pPacketId,
                                      MQTTPublishInfo_t * pPublishInfo )
{
 800dcae:	b580      	push	{r7, lr}
 800dcb0:	b086      	sub	sp, #24
 800dcb2:	af00      	add	r7, sp, #0
 800dcb4:	60f8      	str	r0, [r7, #12]
 800dcb6:	60b9      	str	r1, [r7, #8]
 800dcb8:	607a      	str	r2, [r7, #4]
    MQTTStatus_t status = MQTTSuccess;
 800dcba:	2300      	movs	r3, #0
 800dcbc:	75fb      	strb	r3, [r7, #23]

    if( ( pIncomingPacket == NULL ) || ( pPacketId == NULL ) || ( pPublishInfo == NULL ) )
 800dcbe:	68fb      	ldr	r3, [r7, #12]
 800dcc0:	2b00      	cmp	r3, #0
 800dcc2:	d005      	beq.n	800dcd0 <MQTT_DeserializePublish+0x22>
 800dcc4:	68bb      	ldr	r3, [r7, #8]
 800dcc6:	2b00      	cmp	r3, #0
 800dcc8:	d002      	beq.n	800dcd0 <MQTT_DeserializePublish+0x22>
 800dcca:	687b      	ldr	r3, [r7, #4]
 800dccc:	2b00      	cmp	r3, #0
 800dcce:	d102      	bne.n	800dcd6 <MQTT_DeserializePublish+0x28>
        LogError( ( "Argument cannot be NULL: pIncomingPacket=%p, "
                    "pPacketId=%p, pPublishInfo=%p",
                    ( void * ) pIncomingPacket,
                    ( void * ) pPacketId,
                    ( void * ) pPublishInfo ) );
        status = MQTTBadParameter;
 800dcd0:	2301      	movs	r3, #1
 800dcd2:	75fb      	strb	r3, [r7, #23]
 800dcd4:	e016      	b.n	800dd04 <MQTT_DeserializePublish+0x56>
    }
    else if( ( pIncomingPacket->type & 0xF0U ) != MQTT_PACKET_TYPE_PUBLISH )
 800dcd6:	68fb      	ldr	r3, [r7, #12]
 800dcd8:	781b      	ldrb	r3, [r3, #0]
 800dcda:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800dcde:	2b30      	cmp	r3, #48	; 0x30
 800dce0:	d002      	beq.n	800dce8 <MQTT_DeserializePublish+0x3a>
    {
        LogError( ( "Packet is not publish. Packet type: %02x.",
                    ( unsigned int ) pIncomingPacket->type ) );
        status = MQTTBadParameter;
 800dce2:	2301      	movs	r3, #1
 800dce4:	75fb      	strb	r3, [r7, #23]
 800dce6:	e00d      	b.n	800dd04 <MQTT_DeserializePublish+0x56>
    }
    else if( pIncomingPacket->pRemainingData == NULL )
 800dce8:	68fb      	ldr	r3, [r7, #12]
 800dcea:	685b      	ldr	r3, [r3, #4]
 800dcec:	2b00      	cmp	r3, #0
 800dcee:	d102      	bne.n	800dcf6 <MQTT_DeserializePublish+0x48>
    {
        LogError( ( "Argument cannot be NULL: "
                    "pIncomingPacket->pRemainingData is NULL." ) );
        status = MQTTBadParameter;
 800dcf0:	2301      	movs	r3, #1
 800dcf2:	75fb      	strb	r3, [r7, #23]
 800dcf4:	e006      	b.n	800dd04 <MQTT_DeserializePublish+0x56>
    }
    else
    {
        status = deserializePublish( pIncomingPacket, pPacketId, pPublishInfo );
 800dcf6:	687a      	ldr	r2, [r7, #4]
 800dcf8:	68b9      	ldr	r1, [r7, #8]
 800dcfa:	68f8      	ldr	r0, [r7, #12]
 800dcfc:	f7ff fcb4 	bl	800d668 <deserializePublish>
 800dd00:	4603      	mov	r3, r0
 800dd02:	75fb      	strb	r3, [r7, #23]
    }

    return status;
 800dd04:	7dfb      	ldrb	r3, [r7, #23]
}
 800dd06:	4618      	mov	r0, r3
 800dd08:	3718      	adds	r7, #24
 800dd0a:	46bd      	mov	sp, r7
 800dd0c:	bd80      	pop	{r7, pc}

0800dd0e <MQTT_DeserializeAck>:
/*-----------------------------------------------------------*/

MQTTStatus_t MQTT_DeserializeAck( const MQTTPacketInfo_t * pIncomingPacket,
                                  uint16_t * pPacketId,
                                  bool * pSessionPresent )
{
 800dd0e:	b580      	push	{r7, lr}
 800dd10:	b086      	sub	sp, #24
 800dd12:	af00      	add	r7, sp, #0
 800dd14:	60f8      	str	r0, [r7, #12]
 800dd16:	60b9      	str	r1, [r7, #8]
 800dd18:	607a      	str	r2, [r7, #4]
    MQTTStatus_t status = MQTTSuccess;
 800dd1a:	2300      	movs	r3, #0
 800dd1c:	75fb      	strb	r3, [r7, #23]

    if( pIncomingPacket == NULL )
 800dd1e:	68fb      	ldr	r3, [r7, #12]
 800dd20:	2b00      	cmp	r3, #0
 800dd22:	d102      	bne.n	800dd2a <MQTT_DeserializeAck+0x1c>
    {
        LogError( ( "pIncomingPacket cannot be NULL." ) );
        status = MQTTBadParameter;
 800dd24:	2301      	movs	r3, #1
 800dd26:	75fb      	strb	r3, [r7, #23]
 800dd28:	e05f      	b.n	800ddea <MQTT_DeserializeAck+0xdc>
    }

    /* Pointer for packet identifier cannot be NULL for packets other than
     * CONNACK and PINGRESP. */
    else if( ( pPacketId == NULL ) &&
 800dd2a:	68bb      	ldr	r3, [r7, #8]
 800dd2c:	2b00      	cmp	r3, #0
 800dd2e:	d10a      	bne.n	800dd46 <MQTT_DeserializeAck+0x38>
             ( ( pIncomingPacket->type != MQTT_PACKET_TYPE_CONNACK ) &&
 800dd30:	68fb      	ldr	r3, [r7, #12]
 800dd32:	781b      	ldrb	r3, [r3, #0]
    else if( ( pPacketId == NULL ) &&
 800dd34:	2b20      	cmp	r3, #32
 800dd36:	d006      	beq.n	800dd46 <MQTT_DeserializeAck+0x38>
               ( pIncomingPacket->type != MQTT_PACKET_TYPE_PINGRESP ) ) )
 800dd38:	68fb      	ldr	r3, [r7, #12]
 800dd3a:	781b      	ldrb	r3, [r3, #0]
             ( ( pIncomingPacket->type != MQTT_PACKET_TYPE_CONNACK ) &&
 800dd3c:	2bd0      	cmp	r3, #208	; 0xd0
 800dd3e:	d002      	beq.n	800dd46 <MQTT_DeserializeAck+0x38>
    {
        LogError( ( "pPacketId cannot be NULL for packet type %02x.",
                    ( unsigned int ) pIncomingPacket->type ) );
        status = MQTTBadParameter;
 800dd40:	2301      	movs	r3, #1
 800dd42:	75fb      	strb	r3, [r7, #23]
 800dd44:	e051      	b.n	800ddea <MQTT_DeserializeAck+0xdc>
    }
    /* Pointer for session present cannot be NULL for CONNACK. */
    else if( ( pSessionPresent == NULL ) &&
 800dd46:	687b      	ldr	r3, [r7, #4]
 800dd48:	2b00      	cmp	r3, #0
 800dd4a:	d106      	bne.n	800dd5a <MQTT_DeserializeAck+0x4c>
             ( pIncomingPacket->type == MQTT_PACKET_TYPE_CONNACK ) )
 800dd4c:	68fb      	ldr	r3, [r7, #12]
 800dd4e:	781b      	ldrb	r3, [r3, #0]
    else if( ( pSessionPresent == NULL ) &&
 800dd50:	2b20      	cmp	r3, #32
 800dd52:	d102      	bne.n	800dd5a <MQTT_DeserializeAck+0x4c>
    {
        LogError( ( "pSessionPresent cannot be NULL for CONNACK packet." ) );
        status = MQTTBadParameter;
 800dd54:	2301      	movs	r3, #1
 800dd56:	75fb      	strb	r3, [r7, #23]
 800dd58:	e047      	b.n	800ddea <MQTT_DeserializeAck+0xdc>
    }

    /* Pointer for remaining data cannot be NULL for packets other
     * than PINGRESP. */
    else if( ( pIncomingPacket->pRemainingData == NULL ) &&
 800dd5a:	68fb      	ldr	r3, [r7, #12]
 800dd5c:	685b      	ldr	r3, [r3, #4]
 800dd5e:	2b00      	cmp	r3, #0
 800dd60:	d106      	bne.n	800dd70 <MQTT_DeserializeAck+0x62>
             ( pIncomingPacket->type != MQTT_PACKET_TYPE_PINGRESP ) )
 800dd62:	68fb      	ldr	r3, [r7, #12]
 800dd64:	781b      	ldrb	r3, [r3, #0]
    else if( ( pIncomingPacket->pRemainingData == NULL ) &&
 800dd66:	2bd0      	cmp	r3, #208	; 0xd0
 800dd68:	d002      	beq.n	800dd70 <MQTT_DeserializeAck+0x62>
    {
        LogError( ( "Remaining data of incoming packet is NULL." ) );
        status = MQTTBadParameter;
 800dd6a:	2301      	movs	r3, #1
 800dd6c:	75fb      	strb	r3, [r7, #23]
 800dd6e:	e03c      	b.n	800ddea <MQTT_DeserializeAck+0xdc>
    }
    else
    {
        /* Make sure response packet is a valid ack. */
        switch( pIncomingPacket->type )
 800dd70:	68fb      	ldr	r3, [r7, #12]
 800dd72:	781b      	ldrb	r3, [r3, #0]
 800dd74:	2bd0      	cmp	r3, #208	; 0xd0
 800dd76:	d028      	beq.n	800ddca <MQTT_DeserializeAck+0xbc>
 800dd78:	2bd0      	cmp	r3, #208	; 0xd0
 800dd7a:	dc33      	bgt.n	800dde4 <MQTT_DeserializeAck+0xd6>
 800dd7c:	2bb0      	cmp	r3, #176	; 0xb0
 800dd7e:	d02a      	beq.n	800ddd6 <MQTT_DeserializeAck+0xc8>
 800dd80:	2bb0      	cmp	r3, #176	; 0xb0
 800dd82:	dc2f      	bgt.n	800dde4 <MQTT_DeserializeAck+0xd6>
 800dd84:	2b90      	cmp	r3, #144	; 0x90
 800dd86:	d019      	beq.n	800ddbc <MQTT_DeserializeAck+0xae>
 800dd88:	2b90      	cmp	r3, #144	; 0x90
 800dd8a:	dc2b      	bgt.n	800dde4 <MQTT_DeserializeAck+0xd6>
 800dd8c:	2b70      	cmp	r3, #112	; 0x70
 800dd8e:	d022      	beq.n	800ddd6 <MQTT_DeserializeAck+0xc8>
 800dd90:	2b70      	cmp	r3, #112	; 0x70
 800dd92:	dc27      	bgt.n	800dde4 <MQTT_DeserializeAck+0xd6>
 800dd94:	2b62      	cmp	r3, #98	; 0x62
 800dd96:	d01e      	beq.n	800ddd6 <MQTT_DeserializeAck+0xc8>
 800dd98:	2b62      	cmp	r3, #98	; 0x62
 800dd9a:	dc23      	bgt.n	800dde4 <MQTT_DeserializeAck+0xd6>
 800dd9c:	2b50      	cmp	r3, #80	; 0x50
 800dd9e:	d01a      	beq.n	800ddd6 <MQTT_DeserializeAck+0xc8>
 800dda0:	2b50      	cmp	r3, #80	; 0x50
 800dda2:	dc1f      	bgt.n	800dde4 <MQTT_DeserializeAck+0xd6>
 800dda4:	2b20      	cmp	r3, #32
 800dda6:	d002      	beq.n	800ddae <MQTT_DeserializeAck+0xa0>
 800dda8:	2b40      	cmp	r3, #64	; 0x40
 800ddaa:	d014      	beq.n	800ddd6 <MQTT_DeserializeAck+0xc8>
 800ddac:	e01a      	b.n	800dde4 <MQTT_DeserializeAck+0xd6>
        {
            case MQTT_PACKET_TYPE_CONNACK:
                status = deserializeConnack( pIncomingPacket, pSessionPresent );
 800ddae:	6879      	ldr	r1, [r7, #4]
 800ddb0:	68f8      	ldr	r0, [r7, #12]
 800ddb2:	f7ff fabf 	bl	800d334 <deserializeConnack>
 800ddb6:	4603      	mov	r3, r0
 800ddb8:	75fb      	strb	r3, [r7, #23]
                break;
 800ddba:	e016      	b.n	800ddea <MQTT_DeserializeAck+0xdc>

            case MQTT_PACKET_TYPE_SUBACK:
                status = deserializeSuback( pIncomingPacket, pPacketId );
 800ddbc:	68b9      	ldr	r1, [r7, #8]
 800ddbe:	68f8      	ldr	r0, [r7, #12]
 800ddc0:	f7ff fbfe 	bl	800d5c0 <deserializeSuback>
 800ddc4:	4603      	mov	r3, r0
 800ddc6:	75fb      	strb	r3, [r7, #23]
                break;
 800ddc8:	e00f      	b.n	800ddea <MQTT_DeserializeAck+0xdc>

            case MQTT_PACKET_TYPE_PINGRESP:
                status = deserializePingresp( pIncomingPacket );
 800ddca:	68f8      	ldr	r0, [r7, #12]
 800ddcc:	f7ff fd50 	bl	800d870 <deserializePingresp>
 800ddd0:	4603      	mov	r3, r0
 800ddd2:	75fb      	strb	r3, [r7, #23]
                break;
 800ddd4:	e009      	b.n	800ddea <MQTT_DeserializeAck+0xdc>
            case MQTT_PACKET_TYPE_UNSUBACK:
            case MQTT_PACKET_TYPE_PUBACK:
            case MQTT_PACKET_TYPE_PUBREC:
            case MQTT_PACKET_TYPE_PUBREL:
            case MQTT_PACKET_TYPE_PUBCOMP:
                status = deserializeSimpleAck( pIncomingPacket, pPacketId );
 800ddd6:	68b9      	ldr	r1, [r7, #8]
 800ddd8:	68f8      	ldr	r0, [r7, #12]
 800ddda:	f7ff fd05 	bl	800d7e8 <deserializeSimpleAck>
 800ddde:	4603      	mov	r3, r0
 800dde0:	75fb      	strb	r3, [r7, #23]
                break;
 800dde2:	e002      	b.n	800ddea <MQTT_DeserializeAck+0xdc>

            /* Any other packet type is invalid. */
            default:
                LogError( ( "IotMqtt_DeserializeResponse() called with unknown packet type:(%02x).",
                            ( unsigned int ) pIncomingPacket->type ) );
                status = MQTTBadResponse;
 800dde4:	2305      	movs	r3, #5
 800dde6:	75fb      	strb	r3, [r7, #23]
                break;
 800dde8:	bf00      	nop
        }
    }

    return status;
 800ddea:	7dfb      	ldrb	r3, [r7, #23]
}
 800ddec:	4618      	mov	r0, r3
 800ddee:	3718      	adds	r7, #24
 800ddf0:	46bd      	mov	sp, r7
 800ddf2:	bd80      	pop	{r7, pc}

0800ddf4 <MQTT_GetIncomingPacketTypeAndLength>:
/*-----------------------------------------------------------*/

MQTTStatus_t MQTT_GetIncomingPacketTypeAndLength( TransportRecv_t readFunc,
                                                  NetworkContext_t * pNetworkContext,
                                                  MQTTPacketInfo_t * pIncomingPacket )
{
 800ddf4:	b580      	push	{r7, lr}
 800ddf6:	b086      	sub	sp, #24
 800ddf8:	af00      	add	r7, sp, #0
 800ddfa:	60f8      	str	r0, [r7, #12]
 800ddfc:	60b9      	str	r1, [r7, #8]
 800ddfe:	607a      	str	r2, [r7, #4]
    MQTTStatus_t status = MQTTSuccess;
 800de00:	2300      	movs	r3, #0
 800de02:	75fb      	strb	r3, [r7, #23]
    int32_t bytesReceived = 0;
 800de04:	2300      	movs	r3, #0
 800de06:	613b      	str	r3, [r7, #16]

    if( pIncomingPacket == NULL )
 800de08:	687b      	ldr	r3, [r7, #4]
 800de0a:	2b00      	cmp	r3, #0
 800de0c:	d102      	bne.n	800de14 <MQTT_GetIncomingPacketTypeAndLength+0x20>
    {
        LogError( ( "Invalid parameter: pIncomingPacket is NULL." ) );
        status = MQTTBadParameter;
 800de0e:	2301      	movs	r3, #1
 800de10:	75fb      	strb	r3, [r7, #23]
 800de12:	e005      	b.n	800de20 <MQTT_GetIncomingPacketTypeAndLength+0x2c>
    }
    else
    {
        /* Read a single byte. */
        bytesReceived = readFunc( pNetworkContext,
                                  &( pIncomingPacket->type ),
 800de14:	6879      	ldr	r1, [r7, #4]
        bytesReceived = readFunc( pNetworkContext,
 800de16:	68fb      	ldr	r3, [r7, #12]
 800de18:	2201      	movs	r2, #1
 800de1a:	68b8      	ldr	r0, [r7, #8]
 800de1c:	4798      	blx	r3
 800de1e:	6138      	str	r0, [r7, #16]
                                  1U );
    }

    if( bytesReceived == 1 )
 800de20:	693b      	ldr	r3, [r7, #16]
 800de22:	2b01      	cmp	r3, #1
 800de24:	d119      	bne.n	800de5a <MQTT_GetIncomingPacketTypeAndLength+0x66>
    {
        /* Check validity. */
        if( incomingPacketValid( pIncomingPacket->type ) == true )
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	781b      	ldrb	r3, [r3, #0]
 800de2a:	4618      	mov	r0, r3
 800de2c:	f7ff f9aa 	bl	800d184 <incomingPacketValid>
 800de30:	4603      	mov	r3, r0
 800de32:	2b00      	cmp	r3, #0
 800de34:	d00e      	beq.n	800de54 <MQTT_GetIncomingPacketTypeAndLength+0x60>
        {
            pIncomingPacket->remainingLength = getRemainingLength( readFunc,
 800de36:	68b9      	ldr	r1, [r7, #8]
 800de38:	68f8      	ldr	r0, [r7, #12]
 800de3a:	f7ff f8f0 	bl	800d01e <getRemainingLength>
 800de3e:	4602      	mov	r2, r0
 800de40:	687b      	ldr	r3, [r7, #4]
 800de42:	609a      	str	r2, [r3, #8]
                                                                   pNetworkContext );

            if( pIncomingPacket->remainingLength == MQTT_REMAINING_LENGTH_INVALID )
 800de44:	687b      	ldr	r3, [r7, #4]
 800de46:	689b      	ldr	r3, [r3, #8]
 800de48:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800de4c:	d113      	bne.n	800de76 <MQTT_GetIncomingPacketTypeAndLength+0x82>
            {
                LogError( ( "Incoming packet remaining length invalid." ) );
                status = MQTTBadResponse;
 800de4e:	2305      	movs	r3, #5
 800de50:	75fb      	strb	r3, [r7, #23]
 800de52:	e010      	b.n	800de76 <MQTT_GetIncomingPacketTypeAndLength+0x82>
        }
        else
        {
            LogError( ( "Incoming packet invalid: Packet type=%u.",
                        ( unsigned int ) pIncomingPacket->type ) );
            status = MQTTBadResponse;
 800de54:	2305      	movs	r3, #5
 800de56:	75fb      	strb	r3, [r7, #23]
 800de58:	e00d      	b.n	800de76 <MQTT_GetIncomingPacketTypeAndLength+0x82>
        }
    }
    else if( ( status != MQTTBadParameter ) && ( bytesReceived == 0 ) )
 800de5a:	7dfb      	ldrb	r3, [r7, #23]
 800de5c:	2b01      	cmp	r3, #1
 800de5e:	d005      	beq.n	800de6c <MQTT_GetIncomingPacketTypeAndLength+0x78>
 800de60:	693b      	ldr	r3, [r7, #16]
 800de62:	2b00      	cmp	r3, #0
 800de64:	d102      	bne.n	800de6c <MQTT_GetIncomingPacketTypeAndLength+0x78>
    {
        status = MQTTNoDataAvailable;
 800de66:	2307      	movs	r3, #7
 800de68:	75fb      	strb	r3, [r7, #23]
 800de6a:	e004      	b.n	800de76 <MQTT_GetIncomingPacketTypeAndLength+0x82>
    }

    /* If the input packet was valid, then any other number of bytes received is
     * a failure. */
    else if( status != MQTTBadParameter )
 800de6c:	7dfb      	ldrb	r3, [r7, #23]
 800de6e:	2b01      	cmp	r3, #1
 800de70:	d001      	beq.n	800de76 <MQTT_GetIncomingPacketTypeAndLength+0x82>
    {
        LogError( ( "A single byte was not read from the transport: "
                    "transportStatus=%ld.",
                    ( long int ) bytesReceived ) );
        status = MQTTRecvFailed;
 800de72:	2304      	movs	r3, #4
 800de74:	75fb      	strb	r3, [r7, #23]
    else
    {
        /* Empty else MISRA 15.7 */
    }

    return status;
 800de76:	7dfb      	ldrb	r3, [r7, #23]
}
 800de78:	4618      	mov	r0, r3
 800de7a:	3718      	adds	r7, #24
 800de7c:	46bd      	mov	sp, r7
 800de7e:	bd80      	pop	{r7, pc}

0800de80 <MQTT_ProcessIncomingPacketTypeAndLength>:
/*-----------------------------------------------------------*/

MQTTStatus_t MQTT_ProcessIncomingPacketTypeAndLength( const uint8_t * pBuffer,
                                                      const size_t * pIndex,
                                                      MQTTPacketInfo_t * pIncomingPacket )
{
 800de80:	b580      	push	{r7, lr}
 800de82:	b086      	sub	sp, #24
 800de84:	af00      	add	r7, sp, #0
 800de86:	60f8      	str	r0, [r7, #12]
 800de88:	60b9      	str	r1, [r7, #8]
 800de8a:	607a      	str	r2, [r7, #4]
    MQTTStatus_t status = MQTTSuccess;
 800de8c:	2300      	movs	r3, #0
 800de8e:	75fb      	strb	r3, [r7, #23]

    if( pIncomingPacket == NULL )
 800de90:	687b      	ldr	r3, [r7, #4]
 800de92:	2b00      	cmp	r3, #0
 800de94:	d102      	bne.n	800de9c <MQTT_ProcessIncomingPacketTypeAndLength+0x1c>
    {
        LogError( ( "Invalid parameter: pIncomingPacket is NULL." ) );
        status = MQTTBadParameter;
 800de96:	2301      	movs	r3, #1
 800de98:	75fb      	strb	r3, [r7, #23]
 800de9a:	e016      	b.n	800deca <MQTT_ProcessIncomingPacketTypeAndLength+0x4a>
    }
    else if( pIndex == NULL )
 800de9c:	68bb      	ldr	r3, [r7, #8]
 800de9e:	2b00      	cmp	r3, #0
 800dea0:	d102      	bne.n	800dea8 <MQTT_ProcessIncomingPacketTypeAndLength+0x28>
    {
        LogError( ( "Invalid parameter: pIndex is NULL." ) );
        status = MQTTBadParameter;
 800dea2:	2301      	movs	r3, #1
 800dea4:	75fb      	strb	r3, [r7, #23]
 800dea6:	e010      	b.n	800deca <MQTT_ProcessIncomingPacketTypeAndLength+0x4a>
    }
    else if( pBuffer == NULL )
 800dea8:	68fb      	ldr	r3, [r7, #12]
 800deaa:	2b00      	cmp	r3, #0
 800deac:	d102      	bne.n	800deb4 <MQTT_ProcessIncomingPacketTypeAndLength+0x34>
    {
        LogError( ( "Invalid parameter: pBuffer is NULL." ) );
        status = MQTTBadParameter;
 800deae:	2301      	movs	r3, #1
 800deb0:	75fb      	strb	r3, [r7, #23]
 800deb2:	e00a      	b.n	800deca <MQTT_ProcessIncomingPacketTypeAndLength+0x4a>
    }
    /* There should be at least one byte in the buffer */
    else if( *pIndex < 1U )
 800deb4:	68bb      	ldr	r3, [r7, #8]
 800deb6:	681b      	ldr	r3, [r3, #0]
 800deb8:	2b00      	cmp	r3, #0
 800deba:	d102      	bne.n	800dec2 <MQTT_ProcessIncomingPacketTypeAndLength+0x42>
    {
        /* No data is available. There are 0 bytes received from the network
         * receive function. */
        status = MQTTNoDataAvailable;
 800debc:	2307      	movs	r3, #7
 800debe:	75fb      	strb	r3, [r7, #23]
 800dec0:	e003      	b.n	800deca <MQTT_ProcessIncomingPacketTypeAndLength+0x4a>
    }
    else
    {
        /* At least one byte is present which should be deciphered. */
        pIncomingPacket->type = pBuffer[ 0 ];
 800dec2:	68fb      	ldr	r3, [r7, #12]
 800dec4:	781a      	ldrb	r2, [r3, #0]
 800dec6:	687b      	ldr	r3, [r7, #4]
 800dec8:	701a      	strb	r2, [r3, #0]
    }

    if( status == MQTTSuccess )
 800deca:	7dfb      	ldrb	r3, [r7, #23]
 800decc:	2b00      	cmp	r3, #0
 800dece:	d111      	bne.n	800def4 <MQTT_ProcessIncomingPacketTypeAndLength+0x74>
    {
        /* Check validity. */
        if( incomingPacketValid( pIncomingPacket->type ) == true )
 800ded0:	687b      	ldr	r3, [r7, #4]
 800ded2:	781b      	ldrb	r3, [r3, #0]
 800ded4:	4618      	mov	r0, r3
 800ded6:	f7ff f955 	bl	800d184 <incomingPacketValid>
 800deda:	4603      	mov	r3, r0
 800dedc:	2b00      	cmp	r3, #0
 800dede:	d007      	beq.n	800def0 <MQTT_ProcessIncomingPacketTypeAndLength+0x70>
        {
            status = processRemainingLength( pBuffer,
 800dee0:	687a      	ldr	r2, [r7, #4]
 800dee2:	68b9      	ldr	r1, [r7, #8]
 800dee4:	68f8      	ldr	r0, [r7, #12]
 800dee6:	f7ff f8ee 	bl	800d0c6 <processRemainingLength>
 800deea:	4603      	mov	r3, r0
 800deec:	75fb      	strb	r3, [r7, #23]
 800deee:	e001      	b.n	800def4 <MQTT_ProcessIncomingPacketTypeAndLength+0x74>
        }
        else
        {
            LogError( ( "Incoming packet invalid: Packet type=%u.",
                        ( unsigned int ) pIncomingPacket->type ) );
            status = MQTTBadResponse;
 800def0:	2305      	movs	r3, #5
 800def2:	75fb      	strb	r3, [r7, #23]
        }
    }

    return status;
 800def4:	7dfb      	ldrb	r3, [r7, #23]
}
 800def6:	4618      	mov	r0, r3
 800def8:	3718      	adds	r7, #24
 800defa:	46bd      	mov	sp, r7
 800defc:	bd80      	pop	{r7, pc}
	...

0800df00 <validateTransitionPublish>:

static bool validateTransitionPublish( MQTTPublishState_t currentState,
                                       MQTTPublishState_t newState,
                                       MQTTStateOperation_t opType,
                                       MQTTQoS_t qos )
{
 800df00:	b490      	push	{r4, r7}
 800df02:	b084      	sub	sp, #16
 800df04:	af00      	add	r7, sp, #0
 800df06:	4604      	mov	r4, r0
 800df08:	4608      	mov	r0, r1
 800df0a:	4611      	mov	r1, r2
 800df0c:	461a      	mov	r2, r3
 800df0e:	4623      	mov	r3, r4
 800df10:	71fb      	strb	r3, [r7, #7]
 800df12:	4603      	mov	r3, r0
 800df14:	71bb      	strb	r3, [r7, #6]
 800df16:	460b      	mov	r3, r1
 800df18:	717b      	strb	r3, [r7, #5]
 800df1a:	4613      	mov	r3, r2
 800df1c:	713b      	strb	r3, [r7, #4]
    bool isValid = false;
 800df1e:	2300      	movs	r3, #0
 800df20:	73fb      	strb	r3, [r7, #15]

    switch( currentState )
 800df22:	79fb      	ldrb	r3, [r7, #7]
 800df24:	2b07      	cmp	r3, #7
 800df26:	d848      	bhi.n	800dfba <validateTransitionPublish+0xba>
 800df28:	a201      	add	r2, pc, #4	; (adr r2, 800df30 <validateTransitionPublish+0x30>)
 800df2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df2e:	bf00      	nop
 800df30:	0800df51 	.word	0x0800df51
 800df34:	0800df75 	.word	0x0800df75
 800df38:	0800dfbb 	.word	0x0800dfbb
 800df3c:	0800dfbb 	.word	0x0800dfbb
 800df40:	0800dfbb 	.word	0x0800dfbb
 800df44:	0800dfbb 	.word	0x0800dfbb
 800df48:	0800df9f 	.word	0x0800df9f
 800df4c:	0800dfad 	.word	0x0800dfad
    {
        case MQTTStateNull:

            /* Transitions from null occur when storing a new entry into the record. */
            if( opType == MQTT_RECEIVE )
 800df50:	797b      	ldrb	r3, [r7, #5]
 800df52:	2b01      	cmp	r3, #1
 800df54:	d133      	bne.n	800dfbe <validateTransitionPublish+0xbe>
            {
                isValid = ( newState == MQTTPubAckSend ) || ( newState == MQTTPubRecSend );
 800df56:	79bb      	ldrb	r3, [r7, #6]
 800df58:	2b02      	cmp	r3, #2
 800df5a:	d002      	beq.n	800df62 <validateTransitionPublish+0x62>
 800df5c:	79bb      	ldrb	r3, [r7, #6]
 800df5e:	2b03      	cmp	r3, #3
 800df60:	d101      	bne.n	800df66 <validateTransitionPublish+0x66>
 800df62:	2301      	movs	r3, #1
 800df64:	e000      	b.n	800df68 <validateTransitionPublish+0x68>
 800df66:	2300      	movs	r3, #0
 800df68:	73fb      	strb	r3, [r7, #15]
 800df6a:	7bfb      	ldrb	r3, [r7, #15]
 800df6c:	f003 0301 	and.w	r3, r3, #1
 800df70:	73fb      	strb	r3, [r7, #15]
            }

            break;
 800df72:	e024      	b.n	800dfbe <validateTransitionPublish+0xbe>

        case MQTTPublishSend:

            /* Outgoing publish. All such publishes start in this state due to
             * the reserve operation. */
            switch( qos )
 800df74:	793b      	ldrb	r3, [r7, #4]
 800df76:	2b01      	cmp	r3, #1
 800df78:	d002      	beq.n	800df80 <validateTransitionPublish+0x80>
 800df7a:	2b02      	cmp	r3, #2
 800df7c:	d007      	beq.n	800df8e <validateTransitionPublish+0x8e>
                    break;

                case MQTTQoS0:
                default:
                    /* QoS 0 is checked before calling this function. */
                    break;
 800df7e:	e00d      	b.n	800df9c <validateTransitionPublish+0x9c>
                    isValid = newState == MQTTPubAckPending;
 800df80:	79bb      	ldrb	r3, [r7, #6]
 800df82:	2b06      	cmp	r3, #6
 800df84:	bf0c      	ite	eq
 800df86:	2301      	moveq	r3, #1
 800df88:	2300      	movne	r3, #0
 800df8a:	73fb      	strb	r3, [r7, #15]
                    break;
 800df8c:	e006      	b.n	800df9c <validateTransitionPublish+0x9c>
                    isValid = newState == MQTTPubRecPending;
 800df8e:	79bb      	ldrb	r3, [r7, #6]
 800df90:	2b07      	cmp	r3, #7
 800df92:	bf0c      	ite	eq
 800df94:	2301      	moveq	r3, #1
 800df96:	2300      	movne	r3, #0
 800df98:	73fb      	strb	r3, [r7, #15]
                    break;
 800df9a:	bf00      	nop
            }

            break;
 800df9c:	e010      	b.n	800dfc0 <validateTransitionPublish+0xc0>
         * reestablished. */
        case MQTTPubAckPending:

            /* When a session is reestablished, outgoing QoS1 publishes in state
             * #MQTTPubAckPending can be resent. The state remains the same. */
            isValid = newState == MQTTPubAckPending;
 800df9e:	79bb      	ldrb	r3, [r7, #6]
 800dfa0:	2b06      	cmp	r3, #6
 800dfa2:	bf0c      	ite	eq
 800dfa4:	2301      	moveq	r3, #1
 800dfa6:	2300      	movne	r3, #0
 800dfa8:	73fb      	strb	r3, [r7, #15]

            break;
 800dfaa:	e009      	b.n	800dfc0 <validateTransitionPublish+0xc0>

        case MQTTPubRecPending:

            /* When a session is reestablished, outgoing QoS2 publishes in state
             * #MQTTPubRecPending can be resent. The state remains the same. */
            isValid = newState == MQTTPubRecPending;
 800dfac:	79bb      	ldrb	r3, [r7, #6]
 800dfae:	2b07      	cmp	r3, #7
 800dfb0:	bf0c      	ite	eq
 800dfb2:	2301      	moveq	r3, #1
 800dfb4:	2300      	movne	r3, #0
 800dfb6:	73fb      	strb	r3, [r7, #15]

            break;
 800dfb8:	e002      	b.n	800dfc0 <validateTransitionPublish+0xc0>
        case MQTTPubRelPending:
        case MQTTPubRelSend:
        case MQTTPublishDone:
        default:
            /* For a PUBLISH, we should not start from any other state. */
            break;
 800dfba:	bf00      	nop
 800dfbc:	e000      	b.n	800dfc0 <validateTransitionPublish+0xc0>
            break;
 800dfbe:	bf00      	nop
    }

    return isValid;
 800dfc0:	7bfb      	ldrb	r3, [r7, #15]
}
 800dfc2:	4618      	mov	r0, r3
 800dfc4:	3710      	adds	r7, #16
 800dfc6:	46bd      	mov	sp, r7
 800dfc8:	bc90      	pop	{r4, r7}
 800dfca:	4770      	bx	lr

0800dfcc <validateTransitionAck>:

/*-----------------------------------------------------------*/

static bool validateTransitionAck( MQTTPublishState_t currentState,
                                   MQTTPublishState_t newState )
{
 800dfcc:	b480      	push	{r7}
 800dfce:	b085      	sub	sp, #20
 800dfd0:	af00      	add	r7, sp, #0
 800dfd2:	4603      	mov	r3, r0
 800dfd4:	460a      	mov	r2, r1
 800dfd6:	71fb      	strb	r3, [r7, #7]
 800dfd8:	4613      	mov	r3, r2
 800dfda:	71bb      	strb	r3, [r7, #6]
    bool isValid = false;
 800dfdc:	2300      	movs	r3, #0
 800dfde:	73fb      	strb	r3, [r7, #15]

    switch( currentState )
 800dfe0:	79fb      	ldrb	r3, [r7, #7]
 800dfe2:	3b02      	subs	r3, #2
 800dfe4:	2b07      	cmp	r3, #7
 800dfe6:	d85c      	bhi.n	800e0a2 <validateTransitionAck+0xd6>
 800dfe8:	a201      	add	r2, pc, #4	; (adr r2, 800dff0 <validateTransitionAck+0x24>)
 800dfea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dfee:	bf00      	nop
 800dff0:	0800e011 	.word	0x0800e011
 800dff4:	0800e01f 	.word	0x0800e01f
 800dff8:	0800e077 	.word	0x0800e077
 800dffc:	0800e04b 	.word	0x0800e04b
 800e000:	0800e011 	.word	0x0800e011
 800e004:	0800e069 	.word	0x0800e069
 800e008:	0800e02d 	.word	0x0800e02d
 800e00c:	0800e085 	.word	0x0800e085
    {
        case MQTTPubAckSend:
        /* Incoming publish, QoS 1. */
        case MQTTPubAckPending:
            /* Outgoing publish, QoS 1. */
            isValid = newState == MQTTPublishDone;
 800e010:	79bb      	ldrb	r3, [r7, #6]
 800e012:	2b0a      	cmp	r3, #10
 800e014:	bf0c      	ite	eq
 800e016:	2301      	moveq	r3, #1
 800e018:	2300      	movne	r3, #0
 800e01a:	73fb      	strb	r3, [r7, #15]
            break;
 800e01c:	e042      	b.n	800e0a4 <validateTransitionAck+0xd8>

        case MQTTPubRecSend:
            /* Incoming publish, QoS 2. */
            isValid = newState == MQTTPubRelPending;
 800e01e:	79bb      	ldrb	r3, [r7, #6]
 800e020:	2b08      	cmp	r3, #8
 800e022:	bf0c      	ite	eq
 800e024:	2301      	moveq	r3, #1
 800e026:	2300      	movne	r3, #0
 800e028:	73fb      	strb	r3, [r7, #15]
            break;
 800e02a:	e03b      	b.n	800e0a4 <validateTransitionAck+0xd8>
             *    5. MQTT broker resent the un-acked publish.
             *    6. Publish is received when publish record state is in
             *       MQTTPubRelPending.
             *    7. Sending out a PUBREC will result in this transition
             *       to the same state. */
            isValid = ( newState == MQTTPubCompSend ) ||
 800e02c:	79bb      	ldrb	r3, [r7, #6]
 800e02e:	2b05      	cmp	r3, #5
 800e030:	d002      	beq.n	800e038 <validateTransitionAck+0x6c>
 800e032:	79bb      	ldrb	r3, [r7, #6]
 800e034:	2b08      	cmp	r3, #8
 800e036:	d101      	bne.n	800e03c <validateTransitionAck+0x70>
 800e038:	2301      	movs	r3, #1
 800e03a:	e000      	b.n	800e03e <validateTransitionAck+0x72>
 800e03c:	2300      	movs	r3, #0
 800e03e:	73fb      	strb	r3, [r7, #15]
 800e040:	7bfb      	ldrb	r3, [r7, #15]
 800e042:	f003 0301 	and.w	r3, r3, #1
 800e046:	73fb      	strb	r3, [r7, #15]
                      ( newState == MQTTPubRelPending );
            break;
 800e048:	e02c      	b.n	800e0a4 <validateTransitionAck+0xd8>
             *       for an incoming PUBREL.
             *    2. Reestablished an MQTT session.
             *    3. MQTT broker resent the un-acked PUBREL.
             *    4. Receiving the PUBREL again will result in this transition
             *       to the same state. */
            isValid = ( newState == MQTTPublishDone ) ||
 800e04a:	79bb      	ldrb	r3, [r7, #6]
 800e04c:	2b0a      	cmp	r3, #10
 800e04e:	d002      	beq.n	800e056 <validateTransitionAck+0x8a>
 800e050:	79bb      	ldrb	r3, [r7, #6]
 800e052:	2b05      	cmp	r3, #5
 800e054:	d101      	bne.n	800e05a <validateTransitionAck+0x8e>
 800e056:	2301      	movs	r3, #1
 800e058:	e000      	b.n	800e05c <validateTransitionAck+0x90>
 800e05a:	2300      	movs	r3, #0
 800e05c:	73fb      	strb	r3, [r7, #15]
 800e05e:	7bfb      	ldrb	r3, [r7, #15]
 800e060:	f003 0301 	and.w	r3, r3, #1
 800e064:	73fb      	strb	r3, [r7, #15]
                      ( newState == MQTTPubCompSend );
            break;
 800e066:	e01d      	b.n	800e0a4 <validateTransitionAck+0xd8>

        case MQTTPubRecPending:
            /* Outgoing publish, Qos 2. */
            isValid = newState == MQTTPubRelSend;
 800e068:	79bb      	ldrb	r3, [r7, #6]
 800e06a:	2b04      	cmp	r3, #4
 800e06c:	bf0c      	ite	eq
 800e06e:	2301      	moveq	r3, #1
 800e070:	2300      	movne	r3, #0
 800e072:	73fb      	strb	r3, [r7, #15]
            break;
 800e074:	e016      	b.n	800e0a4 <validateTransitionAck+0xd8>

        case MQTTPubRelSend:
            /* Outgoing publish, Qos 2. */
            isValid = newState == MQTTPubCompPending;
 800e076:	79bb      	ldrb	r3, [r7, #6]
 800e078:	2b09      	cmp	r3, #9
 800e07a:	bf0c      	ite	eq
 800e07c:	2301      	moveq	r3, #1
 800e07e:	2300      	movne	r3, #0
 800e080:	73fb      	strb	r3, [r7, #15]
            break;
 800e082:	e00f      	b.n	800e0a4 <validateTransitionAck+0xd8>
             *    1. A TCP connection failure happened before receiving a PUBCOMP
             *       for an outgoing PUBREL.
             *    2. An MQTT session is reestablished.
             *    3. Resending the un-acked PUBREL results in this transition
             *       to the same state. */
            isValid = ( newState == MQTTPublishDone ) ||
 800e084:	79bb      	ldrb	r3, [r7, #6]
 800e086:	2b0a      	cmp	r3, #10
 800e088:	d002      	beq.n	800e090 <validateTransitionAck+0xc4>
 800e08a:	79bb      	ldrb	r3, [r7, #6]
 800e08c:	2b09      	cmp	r3, #9
 800e08e:	d101      	bne.n	800e094 <validateTransitionAck+0xc8>
 800e090:	2301      	movs	r3, #1
 800e092:	e000      	b.n	800e096 <validateTransitionAck+0xca>
 800e094:	2300      	movs	r3, #0
 800e096:	73fb      	strb	r3, [r7, #15]
 800e098:	7bfb      	ldrb	r3, [r7, #15]
 800e09a:	f003 0301 	and.w	r3, r3, #1
 800e09e:	73fb      	strb	r3, [r7, #15]
                      ( newState == MQTTPubCompPending );
            break;
 800e0a0:	e000      	b.n	800e0a4 <validateTransitionAck+0xd8>
        /* If an ack was sent/received we shouldn't have been in this state. */
        case MQTTStateNull:
        /* If an ack was sent/received the record should exist. */
        default:
            /* Invalid. */
            break;
 800e0a2:	bf00      	nop
    }

    return isValid;
 800e0a4:	7bfb      	ldrb	r3, [r7, #15]
}
 800e0a6:	4618      	mov	r0, r3
 800e0a8:	3714      	adds	r7, #20
 800e0aa:	46bd      	mov	sp, r7
 800e0ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0b0:	4770      	bx	lr
 800e0b2:	bf00      	nop

0800e0b4 <isPublishOutgoing>:

/*-----------------------------------------------------------*/

static bool isPublishOutgoing( MQTTPubAckType_t packetType,
                               MQTTStateOperation_t opType )
{
 800e0b4:	b480      	push	{r7}
 800e0b6:	b085      	sub	sp, #20
 800e0b8:	af00      	add	r7, sp, #0
 800e0ba:	4603      	mov	r3, r0
 800e0bc:	460a      	mov	r2, r1
 800e0be:	71fb      	strb	r3, [r7, #7]
 800e0c0:	4613      	mov	r3, r2
 800e0c2:	71bb      	strb	r3, [r7, #6]
    bool isOutgoing = false;
 800e0c4:	2300      	movs	r3, #0
 800e0c6:	73fb      	strb	r3, [r7, #15]

    switch( packetType )
 800e0c8:	79fb      	ldrb	r3, [r7, #7]
 800e0ca:	2b03      	cmp	r3, #3
 800e0cc:	d009      	beq.n	800e0e2 <isPublishOutgoing+0x2e>
 800e0ce:	2b03      	cmp	r3, #3
 800e0d0:	dc15      	bgt.n	800e0fe <isPublishOutgoing+0x4a>
 800e0d2:	2b01      	cmp	r3, #1
 800e0d4:	dc02      	bgt.n	800e0dc <isPublishOutgoing+0x28>
 800e0d6:	2b00      	cmp	r3, #0
 800e0d8:	da03      	bge.n	800e0e2 <isPublishOutgoing+0x2e>
            isOutgoing = opType == MQTT_SEND;
            break;

        default:
            /* No other ack type. */
            break;
 800e0da:	e010      	b.n	800e0fe <isPublishOutgoing+0x4a>
    switch( packetType )
 800e0dc:	2b02      	cmp	r3, #2
 800e0de:	d007      	beq.n	800e0f0 <isPublishOutgoing+0x3c>
            break;
 800e0e0:	e00d      	b.n	800e0fe <isPublishOutgoing+0x4a>
            isOutgoing = opType == MQTT_RECEIVE;
 800e0e2:	79bb      	ldrb	r3, [r7, #6]
 800e0e4:	2b01      	cmp	r3, #1
 800e0e6:	bf0c      	ite	eq
 800e0e8:	2301      	moveq	r3, #1
 800e0ea:	2300      	movne	r3, #0
 800e0ec:	73fb      	strb	r3, [r7, #15]
            break;
 800e0ee:	e007      	b.n	800e100 <isPublishOutgoing+0x4c>
            isOutgoing = opType == MQTT_SEND;
 800e0f0:	79bb      	ldrb	r3, [r7, #6]
 800e0f2:	2b00      	cmp	r3, #0
 800e0f4:	bf0c      	ite	eq
 800e0f6:	2301      	moveq	r3, #1
 800e0f8:	2300      	movne	r3, #0
 800e0fa:	73fb      	strb	r3, [r7, #15]
            break;
 800e0fc:	e000      	b.n	800e100 <isPublishOutgoing+0x4c>
            break;
 800e0fe:	bf00      	nop
    }

    return isOutgoing;
 800e100:	7bfb      	ldrb	r3, [r7, #15]
}
 800e102:	4618      	mov	r0, r3
 800e104:	3714      	adds	r7, #20
 800e106:	46bd      	mov	sp, r7
 800e108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e10c:	4770      	bx	lr
	...

0800e110 <findInRecord>:
static size_t findInRecord( const MQTTPubAckInfo_t * records,
                            size_t recordCount,
                            uint16_t packetId,
                            MQTTQoS_t * pQos,
                            MQTTPublishState_t * pCurrentState )
{
 800e110:	b580      	push	{r7, lr}
 800e112:	b086      	sub	sp, #24
 800e114:	af00      	add	r7, sp, #0
 800e116:	60f8      	str	r0, [r7, #12]
 800e118:	60b9      	str	r1, [r7, #8]
 800e11a:	603b      	str	r3, [r7, #0]
 800e11c:	4613      	mov	r3, r2
 800e11e:	80fb      	strh	r3, [r7, #6]
    size_t index = 0;
 800e120:	2300      	movs	r3, #0
 800e122:	617b      	str	r3, [r7, #20]

    assert( packetId != MQTT_PACKET_ID_INVALID );
 800e124:	88fb      	ldrh	r3, [r7, #6]
 800e126:	2b00      	cmp	r3, #0
 800e128:	d106      	bne.n	800e138 <findInRecord+0x28>
 800e12a:	4b1b      	ldr	r3, [pc, #108]	; (800e198 <findInRecord+0x88>)
 800e12c:	4a1b      	ldr	r2, [pc, #108]	; (800e19c <findInRecord+0x8c>)
 800e12e:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
 800e132:	481b      	ldr	r0, [pc, #108]	; (800e1a0 <findInRecord+0x90>)
 800e134:	f004 fa0a 	bl	801254c <__assert_func>

    *pCurrentState = MQTTStateNull;
 800e138:	6a3b      	ldr	r3, [r7, #32]
 800e13a:	2200      	movs	r2, #0
 800e13c:	701a      	strb	r2, [r3, #0]

    for( index = 0; index < recordCount; index++ )
 800e13e:	2300      	movs	r3, #0
 800e140:	617b      	str	r3, [r7, #20]
 800e142:	e019      	b.n	800e178 <findInRecord+0x68>
    {
        if( records[ index ].packetId == packetId )
 800e144:	697b      	ldr	r3, [r7, #20]
 800e146:	009b      	lsls	r3, r3, #2
 800e148:	68fa      	ldr	r2, [r7, #12]
 800e14a:	4413      	add	r3, r2
 800e14c:	881b      	ldrh	r3, [r3, #0]
 800e14e:	88fa      	ldrh	r2, [r7, #6]
 800e150:	429a      	cmp	r2, r3
 800e152:	d10e      	bne.n	800e172 <findInRecord+0x62>
        {
            *pQos = records[ index ].qos;
 800e154:	697b      	ldr	r3, [r7, #20]
 800e156:	009b      	lsls	r3, r3, #2
 800e158:	68fa      	ldr	r2, [r7, #12]
 800e15a:	4413      	add	r3, r2
 800e15c:	789a      	ldrb	r2, [r3, #2]
 800e15e:	683b      	ldr	r3, [r7, #0]
 800e160:	701a      	strb	r2, [r3, #0]
            *pCurrentState = records[ index ].publishState;
 800e162:	697b      	ldr	r3, [r7, #20]
 800e164:	009b      	lsls	r3, r3, #2
 800e166:	68fa      	ldr	r2, [r7, #12]
 800e168:	4413      	add	r3, r2
 800e16a:	78da      	ldrb	r2, [r3, #3]
 800e16c:	6a3b      	ldr	r3, [r7, #32]
 800e16e:	701a      	strb	r2, [r3, #0]
            break;
 800e170:	e006      	b.n	800e180 <findInRecord+0x70>
    for( index = 0; index < recordCount; index++ )
 800e172:	697b      	ldr	r3, [r7, #20]
 800e174:	3301      	adds	r3, #1
 800e176:	617b      	str	r3, [r7, #20]
 800e178:	697a      	ldr	r2, [r7, #20]
 800e17a:	68bb      	ldr	r3, [r7, #8]
 800e17c:	429a      	cmp	r2, r3
 800e17e:	d3e1      	bcc.n	800e144 <findInRecord+0x34>
        }
    }

    if( index == recordCount )
 800e180:	697a      	ldr	r2, [r7, #20]
 800e182:	68bb      	ldr	r3, [r7, #8]
 800e184:	429a      	cmp	r2, r3
 800e186:	d102      	bne.n	800e18e <findInRecord+0x7e>
    {
        index = MQTT_INVALID_STATE_COUNT;
 800e188:	2300      	movs	r3, #0
 800e18a:	43db      	mvns	r3, r3
 800e18c:	617b      	str	r3, [r7, #20]
    }

    return index;
 800e18e:	697b      	ldr	r3, [r7, #20]
}
 800e190:	4618      	mov	r0, r3
 800e192:	3718      	adds	r7, #24
 800e194:	46bd      	mov	sp, r7
 800e196:	bd80      	pop	{r7, pc}
 800e198:	080152f4 	.word	0x080152f4
 800e19c:	08015920 	.word	0x08015920
 800e1a0:	08015318 	.word	0x08015318

0800e1a4 <compactRecords>:

/*-----------------------------------------------------------*/

static void compactRecords( MQTTPubAckInfo_t * records,
                            size_t recordCount )
{
 800e1a4:	b580      	push	{r7, lr}
 800e1a6:	b084      	sub	sp, #16
 800e1a8:	af00      	add	r7, sp, #0
 800e1aa:	6078      	str	r0, [r7, #4]
 800e1ac:	6039      	str	r1, [r7, #0]
    size_t index = 0;
 800e1ae:	2300      	movs	r3, #0
 800e1b0:	60fb      	str	r3, [r7, #12]
    size_t emptyIndex = MQTT_INVALID_STATE_COUNT;
 800e1b2:	2300      	movs	r3, #0
 800e1b4:	43db      	mvns	r3, r3
 800e1b6:	60bb      	str	r3, [r7, #8]

    assert( records != NULL );
 800e1b8:	687b      	ldr	r3, [r7, #4]
 800e1ba:	2b00      	cmp	r3, #0
 800e1bc:	d150      	bne.n	800e260 <compactRecords+0xbc>
 800e1be:	4b2d      	ldr	r3, [pc, #180]	; (800e274 <compactRecords+0xd0>)
 800e1c0:	4a2d      	ldr	r2, [pc, #180]	; (800e278 <compactRecords+0xd4>)
 800e1c2:	f44f 71f3 	mov.w	r1, #486	; 0x1e6
 800e1c6:	482d      	ldr	r0, [pc, #180]	; (800e27c <compactRecords+0xd8>)
 800e1c8:	f004 f9c0 	bl	801254c <__assert_func>

    /* Find the empty spots and fill those with non empty values. */
    for( ; index < recordCount; index++ )
    {
        /* Find the first empty spot. */
        if( records[ index ].packetId == MQTT_PACKET_ID_INVALID )
 800e1cc:	68fb      	ldr	r3, [r7, #12]
 800e1ce:	009b      	lsls	r3, r3, #2
 800e1d0:	687a      	ldr	r2, [r7, #4]
 800e1d2:	4413      	add	r3, r2
 800e1d4:	881b      	ldrh	r3, [r3, #0]
 800e1d6:	2b00      	cmp	r3, #0
 800e1d8:	d107      	bne.n	800e1ea <compactRecords+0x46>
        {
            if( emptyIndex == MQTT_INVALID_STATE_COUNT )
 800e1da:	2300      	movs	r3, #0
 800e1dc:	43db      	mvns	r3, r3
 800e1de:	68ba      	ldr	r2, [r7, #8]
 800e1e0:	429a      	cmp	r2, r3
 800e1e2:	d13a      	bne.n	800e25a <compactRecords+0xb6>
            {
                emptyIndex = index;
 800e1e4:	68fb      	ldr	r3, [r7, #12]
 800e1e6:	60bb      	str	r3, [r7, #8]
 800e1e8:	e037      	b.n	800e25a <compactRecords+0xb6>
            }
        }
        else
        {
            if( emptyIndex != MQTT_INVALID_STATE_COUNT )
 800e1ea:	2300      	movs	r3, #0
 800e1ec:	43db      	mvns	r3, r3
 800e1ee:	68ba      	ldr	r2, [r7, #8]
 800e1f0:	429a      	cmp	r2, r3
 800e1f2:	d032      	beq.n	800e25a <compactRecords+0xb6>
            {
                /* Copy over the contents at non empty index to empty index. */
                records[ emptyIndex ].packetId = records[ index ].packetId;
 800e1f4:	68fb      	ldr	r3, [r7, #12]
 800e1f6:	009b      	lsls	r3, r3, #2
 800e1f8:	687a      	ldr	r2, [r7, #4]
 800e1fa:	441a      	add	r2, r3
 800e1fc:	68bb      	ldr	r3, [r7, #8]
 800e1fe:	009b      	lsls	r3, r3, #2
 800e200:	6879      	ldr	r1, [r7, #4]
 800e202:	440b      	add	r3, r1
 800e204:	8812      	ldrh	r2, [r2, #0]
 800e206:	801a      	strh	r2, [r3, #0]
                records[ emptyIndex ].qos = records[ index ].qos;
 800e208:	68fb      	ldr	r3, [r7, #12]
 800e20a:	009b      	lsls	r3, r3, #2
 800e20c:	687a      	ldr	r2, [r7, #4]
 800e20e:	441a      	add	r2, r3
 800e210:	68bb      	ldr	r3, [r7, #8]
 800e212:	009b      	lsls	r3, r3, #2
 800e214:	6879      	ldr	r1, [r7, #4]
 800e216:	440b      	add	r3, r1
 800e218:	7892      	ldrb	r2, [r2, #2]
 800e21a:	709a      	strb	r2, [r3, #2]
                records[ emptyIndex ].publishState = records[ index ].publishState;
 800e21c:	68fb      	ldr	r3, [r7, #12]
 800e21e:	009b      	lsls	r3, r3, #2
 800e220:	687a      	ldr	r2, [r7, #4]
 800e222:	441a      	add	r2, r3
 800e224:	68bb      	ldr	r3, [r7, #8]
 800e226:	009b      	lsls	r3, r3, #2
 800e228:	6879      	ldr	r1, [r7, #4]
 800e22a:	440b      	add	r3, r1
 800e22c:	78d2      	ldrb	r2, [r2, #3]
 800e22e:	70da      	strb	r2, [r3, #3]

                /* Mark the record at current non empty index as invalid. */
                records[ index ].packetId = MQTT_PACKET_ID_INVALID;
 800e230:	68fb      	ldr	r3, [r7, #12]
 800e232:	009b      	lsls	r3, r3, #2
 800e234:	687a      	ldr	r2, [r7, #4]
 800e236:	4413      	add	r3, r2
 800e238:	2200      	movs	r2, #0
 800e23a:	801a      	strh	r2, [r3, #0]
                records[ index ].qos = MQTTQoS0;
 800e23c:	68fb      	ldr	r3, [r7, #12]
 800e23e:	009b      	lsls	r3, r3, #2
 800e240:	687a      	ldr	r2, [r7, #4]
 800e242:	4413      	add	r3, r2
 800e244:	2200      	movs	r2, #0
 800e246:	709a      	strb	r2, [r3, #2]
                records[ index ].publishState = MQTTStateNull;
 800e248:	68fb      	ldr	r3, [r7, #12]
 800e24a:	009b      	lsls	r3, r3, #2
 800e24c:	687a      	ldr	r2, [r7, #4]
 800e24e:	4413      	add	r3, r2
 800e250:	2200      	movs	r2, #0
 800e252:	70da      	strb	r2, [r3, #3]

                /* Advance the emptyIndex. */
                emptyIndex++;
 800e254:	68bb      	ldr	r3, [r7, #8]
 800e256:	3301      	adds	r3, #1
 800e258:	60bb      	str	r3, [r7, #8]
    for( ; index < recordCount; index++ )
 800e25a:	68fb      	ldr	r3, [r7, #12]
 800e25c:	3301      	adds	r3, #1
 800e25e:	60fb      	str	r3, [r7, #12]
 800e260:	68fa      	ldr	r2, [r7, #12]
 800e262:	683b      	ldr	r3, [r7, #0]
 800e264:	429a      	cmp	r2, r3
 800e266:	d3b1      	bcc.n	800e1cc <compactRecords+0x28>
            }
        }
    }
}
 800e268:	bf00      	nop
 800e26a:	bf00      	nop
 800e26c:	3710      	adds	r7, #16
 800e26e:	46bd      	mov	sp, r7
 800e270:	bd80      	pop	{r7, pc}
 800e272:	bf00      	nop
 800e274:	08015348 	.word	0x08015348
 800e278:	08015930 	.word	0x08015930
 800e27c:	08015318 	.word	0x08015318

0800e280 <addRecord>:
static MQTTStatus_t addRecord( MQTTPubAckInfo_t * records,
                               size_t recordCount,
                               uint16_t packetId,
                               MQTTQoS_t qos,
                               MQTTPublishState_t publishState )
{
 800e280:	b580      	push	{r7, lr}
 800e282:	b088      	sub	sp, #32
 800e284:	af00      	add	r7, sp, #0
 800e286:	60f8      	str	r0, [r7, #12]
 800e288:	60b9      	str	r1, [r7, #8]
 800e28a:	4611      	mov	r1, r2
 800e28c:	461a      	mov	r2, r3
 800e28e:	460b      	mov	r3, r1
 800e290:	80fb      	strh	r3, [r7, #6]
 800e292:	4613      	mov	r3, r2
 800e294:	717b      	strb	r3, [r7, #5]
    MQTTStatus_t status = MQTTNoMemory;
 800e296:	2302      	movs	r3, #2
 800e298:	77fb      	strb	r3, [r7, #31]
    int32_t index = 0;
 800e29a:	2300      	movs	r3, #0
 800e29c:	61bb      	str	r3, [r7, #24]
    size_t availableIndex = recordCount;
 800e29e:	68bb      	ldr	r3, [r7, #8]
 800e2a0:	617b      	str	r3, [r7, #20]
    bool validEntryFound = false;
 800e2a2:	2300      	movs	r3, #0
 800e2a4:	74fb      	strb	r3, [r7, #19]

    assert( packetId != MQTT_PACKET_ID_INVALID );
 800e2a6:	88fb      	ldrh	r3, [r7, #6]
 800e2a8:	2b00      	cmp	r3, #0
 800e2aa:	d106      	bne.n	800e2ba <addRecord+0x3a>
 800e2ac:	4b32      	ldr	r3, [pc, #200]	; (800e378 <addRecord+0xf8>)
 800e2ae:	4a33      	ldr	r2, [pc, #204]	; (800e37c <addRecord+0xfc>)
 800e2b0:	f240 2115 	movw	r1, #533	; 0x215
 800e2b4:	4832      	ldr	r0, [pc, #200]	; (800e380 <addRecord+0x100>)
 800e2b6:	f004 f949 	bl	801254c <__assert_func>
    assert( qos != MQTTQoS0 );
 800e2ba:	797b      	ldrb	r3, [r7, #5]
 800e2bc:	2b00      	cmp	r3, #0
 800e2be:	d106      	bne.n	800e2ce <addRecord+0x4e>
 800e2c0:	4b30      	ldr	r3, [pc, #192]	; (800e384 <addRecord+0x104>)
 800e2c2:	4a2e      	ldr	r2, [pc, #184]	; (800e37c <addRecord+0xfc>)
 800e2c4:	f240 2116 	movw	r1, #534	; 0x216
 800e2c8:	482d      	ldr	r0, [pc, #180]	; (800e380 <addRecord+0x100>)
 800e2ca:	f004 f93f 	bl	801254c <__assert_func>

    /* Check if we have to compact the records. This is known by checking if
     * the last spot in the array is filled. */
    if( records[ recordCount - 1U ].packetId != MQTT_PACKET_ID_INVALID )
 800e2ce:	68bb      	ldr	r3, [r7, #8]
 800e2d0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800e2d4:	3b01      	subs	r3, #1
 800e2d6:	009b      	lsls	r3, r3, #2
 800e2d8:	68fa      	ldr	r2, [r7, #12]
 800e2da:	4413      	add	r3, r2
 800e2dc:	881b      	ldrh	r3, [r3, #0]
 800e2de:	2b00      	cmp	r3, #0
 800e2e0:	d003      	beq.n	800e2ea <addRecord+0x6a>
    {
        compactRecords( records, recordCount );
 800e2e2:	68b9      	ldr	r1, [r7, #8]
 800e2e4:	68f8      	ldr	r0, [r7, #12]
 800e2e6:	f7ff ff5d 	bl	800e1a4 <compactRecords>

    /* Start from end so first available index will be populated.
     * Available index is always found after the last element in the records.
     * This is to make sure the relative order of the records in order to meet
     * the message ordering requirement of MQTT spec 3.1.1. */
    for( index = ( ( int32_t ) recordCount - 1 ); index >= 0; index-- )
 800e2ea:	68bb      	ldr	r3, [r7, #8]
 800e2ec:	3b01      	subs	r3, #1
 800e2ee:	61bb      	str	r3, [r7, #24]
 800e2f0:	e021      	b.n	800e336 <addRecord+0xb6>
    {
        /* Available index is only found after packet at the highest index. */
        if( records[ index ].packetId == MQTT_PACKET_ID_INVALID )
 800e2f2:	69bb      	ldr	r3, [r7, #24]
 800e2f4:	009b      	lsls	r3, r3, #2
 800e2f6:	68fa      	ldr	r2, [r7, #12]
 800e2f8:	4413      	add	r3, r2
 800e2fa:	881b      	ldrh	r3, [r3, #0]
 800e2fc:	2b00      	cmp	r3, #0
 800e2fe:	d108      	bne.n	800e312 <addRecord+0x92>
        {
            if( validEntryFound == false )
 800e300:	7cfb      	ldrb	r3, [r7, #19]
 800e302:	f083 0301 	eor.w	r3, r3, #1
 800e306:	b2db      	uxtb	r3, r3
 800e308:	2b00      	cmp	r3, #0
 800e30a:	d011      	beq.n	800e330 <addRecord+0xb0>
            {
                availableIndex = ( size_t ) index;
 800e30c:	69bb      	ldr	r3, [r7, #24]
 800e30e:	617b      	str	r3, [r7, #20]
 800e310:	e00e      	b.n	800e330 <addRecord+0xb0>
            }
        }
        else
        {
            /* A non-empty spot found in the records. */
            validEntryFound = true;
 800e312:	2301      	movs	r3, #1
 800e314:	74fb      	strb	r3, [r7, #19]

            if( records[ index ].packetId == packetId )
 800e316:	69bb      	ldr	r3, [r7, #24]
 800e318:	009b      	lsls	r3, r3, #2
 800e31a:	68fa      	ldr	r2, [r7, #12]
 800e31c:	4413      	add	r3, r2
 800e31e:	881b      	ldrh	r3, [r3, #0]
 800e320:	88fa      	ldrh	r2, [r7, #6]
 800e322:	429a      	cmp	r2, r3
 800e324:	d104      	bne.n	800e330 <addRecord+0xb0>
                /* Collision. */
                LogError( ( "Collision when adding PacketID=%u at index=%d.",
                            ( unsigned int ) packetId,
                            ( int ) index ) );

                status = MQTTStateCollision;
 800e326:	2309      	movs	r3, #9
 800e328:	77fb      	strb	r3, [r7, #31]
                availableIndex = recordCount;
 800e32a:	68bb      	ldr	r3, [r7, #8]
 800e32c:	617b      	str	r3, [r7, #20]
                break;
 800e32e:	e005      	b.n	800e33c <addRecord+0xbc>
    for( index = ( ( int32_t ) recordCount - 1 ); index >= 0; index-- )
 800e330:	69bb      	ldr	r3, [r7, #24]
 800e332:	3b01      	subs	r3, #1
 800e334:	61bb      	str	r3, [r7, #24]
 800e336:	69bb      	ldr	r3, [r7, #24]
 800e338:	2b00      	cmp	r3, #0
 800e33a:	dada      	bge.n	800e2f2 <addRecord+0x72>
            }
        }
    }

    if( availableIndex < recordCount )
 800e33c:	697a      	ldr	r2, [r7, #20]
 800e33e:	68bb      	ldr	r3, [r7, #8]
 800e340:	429a      	cmp	r2, r3
 800e342:	d214      	bcs.n	800e36e <addRecord+0xee>
    {
        records[ availableIndex ].packetId = packetId;
 800e344:	697b      	ldr	r3, [r7, #20]
 800e346:	009b      	lsls	r3, r3, #2
 800e348:	68fa      	ldr	r2, [r7, #12]
 800e34a:	4413      	add	r3, r2
 800e34c:	88fa      	ldrh	r2, [r7, #6]
 800e34e:	801a      	strh	r2, [r3, #0]
        records[ availableIndex ].qos = qos;
 800e350:	697b      	ldr	r3, [r7, #20]
 800e352:	009b      	lsls	r3, r3, #2
 800e354:	68fa      	ldr	r2, [r7, #12]
 800e356:	4413      	add	r3, r2
 800e358:	797a      	ldrb	r2, [r7, #5]
 800e35a:	709a      	strb	r2, [r3, #2]
        records[ availableIndex ].publishState = publishState;
 800e35c:	697b      	ldr	r3, [r7, #20]
 800e35e:	009b      	lsls	r3, r3, #2
 800e360:	68fa      	ldr	r2, [r7, #12]
 800e362:	4413      	add	r3, r2
 800e364:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800e368:	70da      	strb	r2, [r3, #3]
        status = MQTTSuccess;
 800e36a:	2300      	movs	r3, #0
 800e36c:	77fb      	strb	r3, [r7, #31]
    }

    return status;
 800e36e:	7ffb      	ldrb	r3, [r7, #31]
}
 800e370:	4618      	mov	r0, r3
 800e372:	3720      	adds	r7, #32
 800e374:	46bd      	mov	sp, r7
 800e376:	bd80      	pop	{r7, pc}
 800e378:	080152f4 	.word	0x080152f4
 800e37c:	08015940 	.word	0x08015940
 800e380:	08015318 	.word	0x08015318
 800e384:	08015358 	.word	0x08015358

0800e388 <updateRecord>:

static void updateRecord( MQTTPubAckInfo_t * records,
                          size_t recordIndex,
                          MQTTPublishState_t newState,
                          bool shouldDelete )
{
 800e388:	b580      	push	{r7, lr}
 800e38a:	b084      	sub	sp, #16
 800e38c:	af00      	add	r7, sp, #0
 800e38e:	60f8      	str	r0, [r7, #12]
 800e390:	60b9      	str	r1, [r7, #8]
 800e392:	4611      	mov	r1, r2
 800e394:	461a      	mov	r2, r3
 800e396:	460b      	mov	r3, r1
 800e398:	71fb      	strb	r3, [r7, #7]
 800e39a:	4613      	mov	r3, r2
 800e39c:	71bb      	strb	r3, [r7, #6]
    assert( records != NULL );
 800e39e:	68fb      	ldr	r3, [r7, #12]
 800e3a0:	2b00      	cmp	r3, #0
 800e3a2:	d106      	bne.n	800e3b2 <updateRecord+0x2a>
 800e3a4:	4b13      	ldr	r3, [pc, #76]	; (800e3f4 <updateRecord+0x6c>)
 800e3a6:	4a14      	ldr	r2, [pc, #80]	; (800e3f8 <updateRecord+0x70>)
 800e3a8:	f240 2152 	movw	r1, #594	; 0x252
 800e3ac:	4813      	ldr	r0, [pc, #76]	; (800e3fc <updateRecord+0x74>)
 800e3ae:	f004 f8cd 	bl	801254c <__assert_func>

    if( shouldDelete == true )
 800e3b2:	79bb      	ldrb	r3, [r7, #6]
 800e3b4:	2b00      	cmp	r3, #0
 800e3b6:	d012      	beq.n	800e3de <updateRecord+0x56>
    {
        /* Mark the record as invalid. */
        records[ recordIndex ].packetId = MQTT_PACKET_ID_INVALID;
 800e3b8:	68bb      	ldr	r3, [r7, #8]
 800e3ba:	009b      	lsls	r3, r3, #2
 800e3bc:	68fa      	ldr	r2, [r7, #12]
 800e3be:	4413      	add	r3, r2
 800e3c0:	2200      	movs	r2, #0
 800e3c2:	801a      	strh	r2, [r3, #0]
        records[ recordIndex ].qos = MQTTQoS0;
 800e3c4:	68bb      	ldr	r3, [r7, #8]
 800e3c6:	009b      	lsls	r3, r3, #2
 800e3c8:	68fa      	ldr	r2, [r7, #12]
 800e3ca:	4413      	add	r3, r2
 800e3cc:	2200      	movs	r2, #0
 800e3ce:	709a      	strb	r2, [r3, #2]
        records[ recordIndex ].publishState = MQTTStateNull;
 800e3d0:	68bb      	ldr	r3, [r7, #8]
 800e3d2:	009b      	lsls	r3, r3, #2
 800e3d4:	68fa      	ldr	r2, [r7, #12]
 800e3d6:	4413      	add	r3, r2
 800e3d8:	2200      	movs	r2, #0
 800e3da:	70da      	strb	r2, [r3, #3]
    }
    else
    {
        records[ recordIndex ].publishState = newState;
    }
}
 800e3dc:	e005      	b.n	800e3ea <updateRecord+0x62>
        records[ recordIndex ].publishState = newState;
 800e3de:	68bb      	ldr	r3, [r7, #8]
 800e3e0:	009b      	lsls	r3, r3, #2
 800e3e2:	68fa      	ldr	r2, [r7, #12]
 800e3e4:	4413      	add	r3, r2
 800e3e6:	79fa      	ldrb	r2, [r7, #7]
 800e3e8:	70da      	strb	r2, [r3, #3]
}
 800e3ea:	bf00      	nop
 800e3ec:	3710      	adds	r7, #16
 800e3ee:	46bd      	mov	sp, r7
 800e3f0:	bd80      	pop	{r7, pc}
 800e3f2:	bf00      	nop
 800e3f4:	08015348 	.word	0x08015348
 800e3f8:	0801594c 	.word	0x0801594c
 800e3fc:	08015318 	.word	0x08015318

0800e400 <stateSelect>:
/*-----------------------------------------------------------*/

static uint16_t stateSelect( const MQTTContext_t * pMqttContext,
                             uint16_t searchStates,
                             MQTTStateCursor_t * pCursor )
{
 800e400:	b580      	push	{r7, lr}
 800e402:	b088      	sub	sp, #32
 800e404:	af00      	add	r7, sp, #0
 800e406:	60f8      	str	r0, [r7, #12]
 800e408:	460b      	mov	r3, r1
 800e40a:	607a      	str	r2, [r7, #4]
 800e40c:	817b      	strh	r3, [r7, #10]
    uint16_t packetId = MQTT_PACKET_ID_INVALID;
 800e40e:	2300      	movs	r3, #0
 800e410:	83fb      	strh	r3, [r7, #30]
    uint16_t outgoingStates = 0U;
 800e412:	2300      	movs	r3, #0
 800e414:	83bb      	strh	r3, [r7, #28]
    const MQTTPubAckInfo_t * records = NULL;
 800e416:	2300      	movs	r3, #0
 800e418:	61bb      	str	r3, [r7, #24]
    size_t maxCount;
    bool stateCheck = false;
 800e41a:	2300      	movs	r3, #0
 800e41c:	75fb      	strb	r3, [r7, #23]

    assert( pMqttContext != NULL );
 800e41e:	68fb      	ldr	r3, [r7, #12]
 800e420:	2b00      	cmp	r3, #0
 800e422:	d106      	bne.n	800e432 <stateSelect+0x32>
 800e424:	4b43      	ldr	r3, [pc, #268]	; (800e534 <stateSelect+0x134>)
 800e426:	4a44      	ldr	r2, [pc, #272]	; (800e538 <stateSelect+0x138>)
 800e428:	f240 216d 	movw	r1, #621	; 0x26d
 800e42c:	4843      	ldr	r0, [pc, #268]	; (800e53c <stateSelect+0x13c>)
 800e42e:	f004 f88d 	bl	801254c <__assert_func>
    assert( searchStates != 0U );
 800e432:	897b      	ldrh	r3, [r7, #10]
 800e434:	2b00      	cmp	r3, #0
 800e436:	d106      	bne.n	800e446 <stateSelect+0x46>
 800e438:	4b41      	ldr	r3, [pc, #260]	; (800e540 <stateSelect+0x140>)
 800e43a:	4a3f      	ldr	r2, [pc, #252]	; (800e538 <stateSelect+0x138>)
 800e43c:	f240 216e 	movw	r1, #622	; 0x26e
 800e440:	483e      	ldr	r0, [pc, #248]	; (800e53c <stateSelect+0x13c>)
 800e442:	f004 f883 	bl	801254c <__assert_func>
    assert( pCursor != NULL );
 800e446:	687b      	ldr	r3, [r7, #4]
 800e448:	2b00      	cmp	r3, #0
 800e44a:	d106      	bne.n	800e45a <stateSelect+0x5a>
 800e44c:	4b3d      	ldr	r3, [pc, #244]	; (800e544 <stateSelect+0x144>)
 800e44e:	4a3a      	ldr	r2, [pc, #232]	; (800e538 <stateSelect+0x138>)
 800e450:	f240 216f 	movw	r1, #623	; 0x26f
 800e454:	4839      	ldr	r0, [pc, #228]	; (800e53c <stateSelect+0x13c>)
 800e456:	f004 f879 	bl	801254c <__assert_func>

    /* Create a bit map with all the outgoing publish states. */
    UINT16_SET_BIT( outgoingStates, MQTTPublishSend );
 800e45a:	8bbb      	ldrh	r3, [r7, #28]
 800e45c:	f043 0302 	orr.w	r3, r3, #2
 800e460:	83bb      	strh	r3, [r7, #28]
    UINT16_SET_BIT( outgoingStates, MQTTPubAckPending );
 800e462:	8bbb      	ldrh	r3, [r7, #28]
 800e464:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e468:	83bb      	strh	r3, [r7, #28]
    UINT16_SET_BIT( outgoingStates, MQTTPubRecPending );
 800e46a:	8bbb      	ldrh	r3, [r7, #28]
 800e46c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e470:	83bb      	strh	r3, [r7, #28]
    UINT16_SET_BIT( outgoingStates, MQTTPubRelSend );
 800e472:	8bbb      	ldrh	r3, [r7, #28]
 800e474:	f043 0310 	orr.w	r3, r3, #16
 800e478:	83bb      	strh	r3, [r7, #28]
    UINT16_SET_BIT( outgoingStates, MQTTPubCompPending );
 800e47a:	8bbb      	ldrh	r3, [r7, #28]
 800e47c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800e480:	83bb      	strh	r3, [r7, #28]

    /* Only outgoing publish records need to be searched. */
    assert( ( outgoingStates & searchStates ) > 0U );
 800e482:	8bba      	ldrh	r2, [r7, #28]
 800e484:	897b      	ldrh	r3, [r7, #10]
 800e486:	4013      	ands	r3, r2
 800e488:	b29b      	uxth	r3, r3
 800e48a:	2b00      	cmp	r3, #0
 800e48c:	d106      	bne.n	800e49c <stateSelect+0x9c>
 800e48e:	4b2e      	ldr	r3, [pc, #184]	; (800e548 <stateSelect+0x148>)
 800e490:	4a29      	ldr	r2, [pc, #164]	; (800e538 <stateSelect+0x138>)
 800e492:	f240 2179 	movw	r1, #633	; 0x279
 800e496:	4829      	ldr	r0, [pc, #164]	; (800e53c <stateSelect+0x13c>)
 800e498:	f004 f858 	bl	801254c <__assert_func>
    assert( ( ~outgoingStates & searchStates ) == 0U );
 800e49c:	8bbb      	ldrh	r3, [r7, #28]
 800e49e:	43da      	mvns	r2, r3
 800e4a0:	897b      	ldrh	r3, [r7, #10]
 800e4a2:	4013      	ands	r3, r2
 800e4a4:	2b00      	cmp	r3, #0
 800e4a6:	d006      	beq.n	800e4b6 <stateSelect+0xb6>
 800e4a8:	4b28      	ldr	r3, [pc, #160]	; (800e54c <stateSelect+0x14c>)
 800e4aa:	4a23      	ldr	r2, [pc, #140]	; (800e538 <stateSelect+0x138>)
 800e4ac:	f240 217a 	movw	r1, #634	; 0x27a
 800e4b0:	4822      	ldr	r0, [pc, #136]	; (800e53c <stateSelect+0x13c>)
 800e4b2:	f004 f84b 	bl	801254c <__assert_func>

    records = pMqttContext->outgoingPublishRecords;
 800e4b6:	68fb      	ldr	r3, [r7, #12]
 800e4b8:	681b      	ldr	r3, [r3, #0]
 800e4ba:	61bb      	str	r3, [r7, #24]
    maxCount = pMqttContext->outgoingPublishRecordMaxCount;
 800e4bc:	68fb      	ldr	r3, [r7, #12]
 800e4be:	689b      	ldr	r3, [r3, #8]
 800e4c0:	613b      	str	r3, [r7, #16]

    while( *pCursor < maxCount )
 800e4c2:	e02d      	b.n	800e520 <stateSelect+0x120>
    {
        /* Check if any of the search states are present. */
        stateCheck = UINT16_CHECK_BIT( searchStates, records[ *pCursor ].publishState );
 800e4c4:	897a      	ldrh	r2, [r7, #10]
 800e4c6:	687b      	ldr	r3, [r7, #4]
 800e4c8:	681b      	ldr	r3, [r3, #0]
 800e4ca:	009b      	lsls	r3, r3, #2
 800e4cc:	69b9      	ldr	r1, [r7, #24]
 800e4ce:	440b      	add	r3, r1
 800e4d0:	78db      	ldrb	r3, [r3, #3]
 800e4d2:	4619      	mov	r1, r3
 800e4d4:	2301      	movs	r3, #1
 800e4d6:	408b      	lsls	r3, r1
 800e4d8:	401a      	ands	r2, r3
 800e4da:	687b      	ldr	r3, [r7, #4]
 800e4dc:	681b      	ldr	r3, [r3, #0]
 800e4de:	009b      	lsls	r3, r3, #2
 800e4e0:	69b9      	ldr	r1, [r7, #24]
 800e4e2:	440b      	add	r3, r1
 800e4e4:	78db      	ldrb	r3, [r3, #3]
 800e4e6:	4619      	mov	r1, r3
 800e4e8:	2301      	movs	r3, #1
 800e4ea:	408b      	lsls	r3, r1
 800e4ec:	429a      	cmp	r2, r3
 800e4ee:	bf0c      	ite	eq
 800e4f0:	2301      	moveq	r3, #1
 800e4f2:	2300      	movne	r3, #0
 800e4f4:	75fb      	strb	r3, [r7, #23]

        if( stateCheck == true )
 800e4f6:	7dfb      	ldrb	r3, [r7, #23]
 800e4f8:	2b00      	cmp	r3, #0
 800e4fa:	d00c      	beq.n	800e516 <stateSelect+0x116>
        {
            packetId = records[ *pCursor ].packetId;
 800e4fc:	687b      	ldr	r3, [r7, #4]
 800e4fe:	681b      	ldr	r3, [r3, #0]
 800e500:	009b      	lsls	r3, r3, #2
 800e502:	69ba      	ldr	r2, [r7, #24]
 800e504:	4413      	add	r3, r2
 800e506:	881b      	ldrh	r3, [r3, #0]
 800e508:	83fb      	strh	r3, [r7, #30]
            ( *pCursor )++;
 800e50a:	687b      	ldr	r3, [r7, #4]
 800e50c:	681b      	ldr	r3, [r3, #0]
 800e50e:	1c5a      	adds	r2, r3, #1
 800e510:	687b      	ldr	r3, [r7, #4]
 800e512:	601a      	str	r2, [r3, #0]
            break;
 800e514:	e009      	b.n	800e52a <stateSelect+0x12a>
        }

        ( *pCursor )++;
 800e516:	687b      	ldr	r3, [r7, #4]
 800e518:	681b      	ldr	r3, [r3, #0]
 800e51a:	1c5a      	adds	r2, r3, #1
 800e51c:	687b      	ldr	r3, [r7, #4]
 800e51e:	601a      	str	r2, [r3, #0]
    while( *pCursor < maxCount )
 800e520:	687b      	ldr	r3, [r7, #4]
 800e522:	681b      	ldr	r3, [r3, #0]
 800e524:	693a      	ldr	r2, [r7, #16]
 800e526:	429a      	cmp	r2, r3
 800e528:	d8cc      	bhi.n	800e4c4 <stateSelect+0xc4>
    }

    return packetId;
 800e52a:	8bfb      	ldrh	r3, [r7, #30]
}
 800e52c:	4618      	mov	r0, r3
 800e52e:	3720      	adds	r7, #32
 800e530:	46bd      	mov	sp, r7
 800e532:	bd80      	pop	{r7, pc}
 800e534:	08015368 	.word	0x08015368
 800e538:	0801595c 	.word	0x0801595c
 800e53c:	08015318 	.word	0x08015318
 800e540:	08015380 	.word	0x08015380
 800e544:	08015394 	.word	0x08015394
 800e548:	080153a4 	.word	0x080153a4
 800e54c:	080153cc 	.word	0x080153cc

0800e550 <MQTT_CalculateStateAck>:
/*-----------------------------------------------------------*/

MQTTPublishState_t MQTT_CalculateStateAck( MQTTPubAckType_t packetType,
                                           MQTTStateOperation_t opType,
                                           MQTTQoS_t qos )
{
 800e550:	b480      	push	{r7}
 800e552:	b085      	sub	sp, #20
 800e554:	af00      	add	r7, sp, #0
 800e556:	4603      	mov	r3, r0
 800e558:	71fb      	strb	r3, [r7, #7]
 800e55a:	460b      	mov	r3, r1
 800e55c:	71bb      	strb	r3, [r7, #6]
 800e55e:	4613      	mov	r3, r2
 800e560:	717b      	strb	r3, [r7, #5]
    MQTTPublishState_t calculatedState = MQTTStateNull;
 800e562:	2300      	movs	r3, #0
 800e564:	73fb      	strb	r3, [r7, #15]
    /* There are more QoS2 cases than QoS1, so initialize to that. */
    bool qosValid = qos == MQTTQoS2;
 800e566:	797b      	ldrb	r3, [r7, #5]
 800e568:	2b02      	cmp	r3, #2
 800e56a:	bf0c      	ite	eq
 800e56c:	2301      	moveq	r3, #1
 800e56e:	2300      	movne	r3, #0
 800e570:	73bb      	strb	r3, [r7, #14]

    switch( packetType )
 800e572:	79fb      	ldrb	r3, [r7, #7]
 800e574:	2b03      	cmp	r3, #3
 800e576:	d827      	bhi.n	800e5c8 <MQTT_CalculateStateAck+0x78>
 800e578:	a201      	add	r2, pc, #4	; (adr r2, 800e580 <MQTT_CalculateStateAck+0x30>)
 800e57a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e57e:	bf00      	nop
 800e580:	0800e591 	.word	0x0800e591
 800e584:	0800e5a3 	.word	0x0800e5a3
 800e588:	0800e5b3 	.word	0x0800e5b3
 800e58c:	0800e5c3 	.word	0x0800e5c3
    {
        case MQTTPuback:
            qosValid = qos == MQTTQoS1;
 800e590:	797b      	ldrb	r3, [r7, #5]
 800e592:	2b01      	cmp	r3, #1
 800e594:	bf0c      	ite	eq
 800e596:	2301      	moveq	r3, #1
 800e598:	2300      	movne	r3, #0
 800e59a:	73bb      	strb	r3, [r7, #14]
            calculatedState = MQTTPublishDone;
 800e59c:	230a      	movs	r3, #10
 800e59e:	73fb      	strb	r3, [r7, #15]
            break;
 800e5a0:	e013      	b.n	800e5ca <MQTT_CalculateStateAck+0x7a>

        case MQTTPubrec:

            /* Incoming publish: send PUBREC, PUBREL pending.
             * Outgoing publish: receive PUBREC, send PUBREL. */
            calculatedState = ( opType == MQTT_SEND ) ? MQTTPubRelPending : MQTTPubRelSend;
 800e5a2:	79bb      	ldrb	r3, [r7, #6]
 800e5a4:	2b00      	cmp	r3, #0
 800e5a6:	d101      	bne.n	800e5ac <MQTT_CalculateStateAck+0x5c>
 800e5a8:	2308      	movs	r3, #8
 800e5aa:	e000      	b.n	800e5ae <MQTT_CalculateStateAck+0x5e>
 800e5ac:	2304      	movs	r3, #4
 800e5ae:	73fb      	strb	r3, [r7, #15]
            break;
 800e5b0:	e00b      	b.n	800e5ca <MQTT_CalculateStateAck+0x7a>

        case MQTTPubrel:

            /* Incoming publish: receive PUBREL, send PUBCOMP.
             * Outgoing publish: send PUBREL, PUBCOMP pending. */
            calculatedState = ( opType == MQTT_SEND ) ? MQTTPubCompPending : MQTTPubCompSend;
 800e5b2:	79bb      	ldrb	r3, [r7, #6]
 800e5b4:	2b00      	cmp	r3, #0
 800e5b6:	d101      	bne.n	800e5bc <MQTT_CalculateStateAck+0x6c>
 800e5b8:	2309      	movs	r3, #9
 800e5ba:	e000      	b.n	800e5be <MQTT_CalculateStateAck+0x6e>
 800e5bc:	2305      	movs	r3, #5
 800e5be:	73fb      	strb	r3, [r7, #15]
            break;
 800e5c0:	e003      	b.n	800e5ca <MQTT_CalculateStateAck+0x7a>

        case MQTTPubcomp:
            calculatedState = MQTTPublishDone;
 800e5c2:	230a      	movs	r3, #10
 800e5c4:	73fb      	strb	r3, [r7, #15]
            break;
 800e5c6:	e000      	b.n	800e5ca <MQTT_CalculateStateAck+0x7a>

        default:
            /* No other ack type. */
            break;
 800e5c8:	bf00      	nop
    }

    /* Sanity check, make sure ack and QoS agree. */
    if( qosValid == false )
 800e5ca:	7bbb      	ldrb	r3, [r7, #14]
 800e5cc:	f083 0301 	eor.w	r3, r3, #1
 800e5d0:	b2db      	uxtb	r3, r3
 800e5d2:	2b00      	cmp	r3, #0
 800e5d4:	d001      	beq.n	800e5da <MQTT_CalculateStateAck+0x8a>
    {
        calculatedState = MQTTStateNull;
 800e5d6:	2300      	movs	r3, #0
 800e5d8:	73fb      	strb	r3, [r7, #15]
    }

    return calculatedState;
 800e5da:	7bfb      	ldrb	r3, [r7, #15]
}
 800e5dc:	4618      	mov	r0, r3
 800e5de:	3714      	adds	r7, #20
 800e5e0:	46bd      	mov	sp, r7
 800e5e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5e6:	4770      	bx	lr

0800e5e8 <updateStateAck>:
                                    size_t maxRecordCount,
                                    size_t recordIndex,
                                    uint16_t packetId,
                                    MQTTPublishState_t currentState,
                                    MQTTPublishState_t newState )
{
 800e5e8:	b580      	push	{r7, lr}
 800e5ea:	b088      	sub	sp, #32
 800e5ec:	af02      	add	r7, sp, #8
 800e5ee:	60f8      	str	r0, [r7, #12]
 800e5f0:	60b9      	str	r1, [r7, #8]
 800e5f2:	607a      	str	r2, [r7, #4]
 800e5f4:	807b      	strh	r3, [r7, #2]
    MQTTStatus_t status = MQTTIllegalState;
 800e5f6:	2308      	movs	r3, #8
 800e5f8:	75fb      	strb	r3, [r7, #23]
    bool shouldDeleteRecord = false;
 800e5fa:	2300      	movs	r3, #0
 800e5fc:	75bb      	strb	r3, [r7, #22]
    bool isTransitionValid = false;
 800e5fe:	2300      	movs	r3, #0
 800e600:	757b      	strb	r3, [r7, #21]

    assert( records != NULL );
 800e602:	68fb      	ldr	r3, [r7, #12]
 800e604:	2b00      	cmp	r3, #0
 800e606:	d106      	bne.n	800e616 <updateStateAck+0x2e>
 800e608:	4b22      	ldr	r3, [pc, #136]	; (800e694 <updateStateAck+0xac>)
 800e60a:	4a23      	ldr	r2, [pc, #140]	; (800e698 <updateStateAck+0xb0>)
 800e60c:	f240 21cf 	movw	r1, #719	; 0x2cf
 800e610:	4822      	ldr	r0, [pc, #136]	; (800e69c <updateStateAck+0xb4>)
 800e612:	f003 ff9b 	bl	801254c <__assert_func>

    /* Record to be deleted if the state transition is completed or if a PUBREC
     * is received for an outgoing QoS2 publish. When a PUBREC is received,
     * record is deleted and added back to the end of the records to maintain
     * ordering for PUBRELs. */
    shouldDeleteRecord = ( newState == MQTTPublishDone ) || ( newState == MQTTPubRelSend );
 800e616:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800e61a:	2b0a      	cmp	r3, #10
 800e61c:	d003      	beq.n	800e626 <updateStateAck+0x3e>
 800e61e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800e622:	2b04      	cmp	r3, #4
 800e624:	d101      	bne.n	800e62a <updateStateAck+0x42>
 800e626:	2301      	movs	r3, #1
 800e628:	e000      	b.n	800e62c <updateStateAck+0x44>
 800e62a:	2300      	movs	r3, #0
 800e62c:	75bb      	strb	r3, [r7, #22]
 800e62e:	7dbb      	ldrb	r3, [r7, #22]
 800e630:	f003 0301 	and.w	r3, r3, #1
 800e634:	75bb      	strb	r3, [r7, #22]
    isTransitionValid = validateTransitionAck( currentState, newState );
 800e636:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800e63a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e63e:	4611      	mov	r1, r2
 800e640:	4618      	mov	r0, r3
 800e642:	f7ff fcc3 	bl	800dfcc <validateTransitionAck>
 800e646:	4603      	mov	r3, r0
 800e648:	757b      	strb	r3, [r7, #21]

    if( isTransitionValid == true )
 800e64a:	7d7b      	ldrb	r3, [r7, #21]
 800e64c:	2b00      	cmp	r3, #0
 800e64e:	d01c      	beq.n	800e68a <updateStateAck+0xa2>
    {
        status = MQTTSuccess;
 800e650:	2300      	movs	r3, #0
 800e652:	75fb      	strb	r3, [r7, #23]

        /* Update record for acks. When sending or receiving acks for packets that
         * are resent during a session reestablishment, the new state and
         * current state can be the same. No update of record required in that case. */
        if( currentState != newState )
 800e654:	f897 2020 	ldrb.w	r2, [r7, #32]
 800e658:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800e65c:	429a      	cmp	r2, r3
 800e65e:	d014      	beq.n	800e68a <updateStateAck+0xa2>
        {
            updateRecord( records,
 800e660:	7dbb      	ldrb	r3, [r7, #22]
 800e662:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800e666:	6879      	ldr	r1, [r7, #4]
 800e668:	68f8      	ldr	r0, [r7, #12]
 800e66a:	f7ff fe8d 	bl	800e388 <updateRecord>

            /* For QoS2 messages, in order to preserve the message ordering, when
             * a PUBREC is received for an outgoing publish, the record should be
             * moved to the last. This move will help preserve the order in which
             * a PUBREL needs to be resent in case of a session reestablishment. */
            if( newState == MQTTPubRelSend )
 800e66e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800e672:	2b04      	cmp	r3, #4
 800e674:	d109      	bne.n	800e68a <updateStateAck+0xa2>
            {
                status = addRecord( records,
 800e676:	887a      	ldrh	r2, [r7, #2]
 800e678:	2304      	movs	r3, #4
 800e67a:	9300      	str	r3, [sp, #0]
 800e67c:	2302      	movs	r3, #2
 800e67e:	68b9      	ldr	r1, [r7, #8]
 800e680:	68f8      	ldr	r0, [r7, #12]
 800e682:	f7ff fdfd 	bl	800e280 <addRecord>
 800e686:	4603      	mov	r3, r0
 800e688:	75fb      	strb	r3, [r7, #23]
        LogError( ( "Invalid transition from state %s to state %s.",
                    MQTT_State_strerror( currentState ),
                    MQTT_State_strerror( newState ) ) );
    }

    return status;
 800e68a:	7dfb      	ldrb	r3, [r7, #23]
}
 800e68c:	4618      	mov	r0, r3
 800e68e:	3718      	adds	r7, #24
 800e690:	46bd      	mov	sp, r7
 800e692:	bd80      	pop	{r7, pc}
 800e694:	08015348 	.word	0x08015348
 800e698:	08015968 	.word	0x08015968
 800e69c:	08015318 	.word	0x08015318

0800e6a0 <updateStatePublish>:
                                        uint16_t packetId,
                                        MQTTStateOperation_t opType,
                                        MQTTQoS_t qos,
                                        MQTTPublishState_t currentState,
                                        MQTTPublishState_t newState )
{
 800e6a0:	b590      	push	{r4, r7, lr}
 800e6a2:	b089      	sub	sp, #36	; 0x24
 800e6a4:	af02      	add	r7, sp, #8
 800e6a6:	60f8      	str	r0, [r7, #12]
 800e6a8:	60b9      	str	r1, [r7, #8]
 800e6aa:	4611      	mov	r1, r2
 800e6ac:	461a      	mov	r2, r3
 800e6ae:	460b      	mov	r3, r1
 800e6b0:	80fb      	strh	r3, [r7, #6]
 800e6b2:	4613      	mov	r3, r2
 800e6b4:	717b      	strb	r3, [r7, #5]
    MQTTStatus_t status = MQTTSuccess;
 800e6b6:	2300      	movs	r3, #0
 800e6b8:	75fb      	strb	r3, [r7, #23]
    bool isTransitionValid = false;
 800e6ba:	2300      	movs	r3, #0
 800e6bc:	75bb      	strb	r3, [r7, #22]

    assert( pMqttContext != NULL );
 800e6be:	68fb      	ldr	r3, [r7, #12]
 800e6c0:	2b00      	cmp	r3, #0
 800e6c2:	d106      	bne.n	800e6d2 <updateStatePublish+0x32>
 800e6c4:	4b29      	ldr	r3, [pc, #164]	; (800e76c <updateStatePublish+0xcc>)
 800e6c6:	4a2a      	ldr	r2, [pc, #168]	; (800e770 <updateStatePublish+0xd0>)
 800e6c8:	f44f 7143 	mov.w	r1, #780	; 0x30c
 800e6cc:	4829      	ldr	r0, [pc, #164]	; (800e774 <updateStatePublish+0xd4>)
 800e6ce:	f003 ff3d 	bl	801254c <__assert_func>
    assert( packetId != MQTT_PACKET_ID_INVALID );
 800e6d2:	88fb      	ldrh	r3, [r7, #6]
 800e6d4:	2b00      	cmp	r3, #0
 800e6d6:	d106      	bne.n	800e6e6 <updateStatePublish+0x46>
 800e6d8:	4b27      	ldr	r3, [pc, #156]	; (800e778 <updateStatePublish+0xd8>)
 800e6da:	4a25      	ldr	r2, [pc, #148]	; (800e770 <updateStatePublish+0xd0>)
 800e6dc:	f240 310d 	movw	r1, #781	; 0x30d
 800e6e0:	4824      	ldr	r0, [pc, #144]	; (800e774 <updateStatePublish+0xd4>)
 800e6e2:	f003 ff33 	bl	801254c <__assert_func>
    assert( qos != MQTTQoS0 );
 800e6e6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800e6ea:	2b00      	cmp	r3, #0
 800e6ec:	d106      	bne.n	800e6fc <updateStatePublish+0x5c>
 800e6ee:	4b23      	ldr	r3, [pc, #140]	; (800e77c <updateStatePublish+0xdc>)
 800e6f0:	4a1f      	ldr	r2, [pc, #124]	; (800e770 <updateStatePublish+0xd0>)
 800e6f2:	f240 310e 	movw	r1, #782	; 0x30e
 800e6f6:	481f      	ldr	r0, [pc, #124]	; (800e774 <updateStatePublish+0xd4>)
 800e6f8:	f003 ff28 	bl	801254c <__assert_func>

    /* This will always succeed for an incoming publish. This is due to the fact
     * that the passed in currentState must be MQTTStateNull, since
     * #MQTT_UpdateStatePublish does not perform a lookup for receives. */
    isTransitionValid = validateTransitionPublish( currentState, newState, opType, qos );
 800e6fc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800e700:	797a      	ldrb	r2, [r7, #5]
 800e702:	f897 1030 	ldrb.w	r1, [r7, #48]	; 0x30
 800e706:	f897 002c 	ldrb.w	r0, [r7, #44]	; 0x2c
 800e70a:	f7ff fbf9 	bl	800df00 <validateTransitionPublish>
 800e70e:	4603      	mov	r3, r0
 800e710:	75bb      	strb	r3, [r7, #22]

    if( isTransitionValid == true )
 800e712:	7dbb      	ldrb	r3, [r7, #22]
 800e714:	2b00      	cmp	r3, #0
 800e716:	d021      	beq.n	800e75c <updateStatePublish+0xbc>
    {
        /* addRecord will check for collisions. */
        if( opType == MQTT_RECEIVE )
 800e718:	797b      	ldrb	r3, [r7, #5]
 800e71a:	2b01      	cmp	r3, #1
 800e71c:	d10f      	bne.n	800e73e <updateStatePublish+0x9e>
        {
            status = addRecord( pMqttContext->incomingPublishRecords,
 800e71e:	68fb      	ldr	r3, [r7, #12]
 800e720:	6858      	ldr	r0, [r3, #4]
 800e722:	68fb      	ldr	r3, [r7, #12]
 800e724:	68d9      	ldr	r1, [r3, #12]
 800e726:	f897 4028 	ldrb.w	r4, [r7, #40]	; 0x28
 800e72a:	88fa      	ldrh	r2, [r7, #6]
 800e72c:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800e730:	9300      	str	r3, [sp, #0]
 800e732:	4623      	mov	r3, r4
 800e734:	f7ff fda4 	bl	800e280 <addRecord>
 800e738:	4603      	mov	r3, r0
 800e73a:	75fb      	strb	r3, [r7, #23]
 800e73c:	e010      	b.n	800e760 <updateStatePublish+0xc0>
        /* Send operation. */
        else
        {
            /* Skip updating record when publish is resend and no state
             * update is required. */
            if( currentState != newState )
 800e73e:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800e742:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800e746:	429a      	cmp	r2, r3
 800e748:	d00a      	beq.n	800e760 <updateStatePublish+0xc0>
            {
                updateRecord( pMqttContext->outgoingPublishRecords,
 800e74a:	68fb      	ldr	r3, [r7, #12]
 800e74c:	6818      	ldr	r0, [r3, #0]
 800e74e:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 800e752:	2300      	movs	r3, #0
 800e754:	68b9      	ldr	r1, [r7, #8]
 800e756:	f7ff fe17 	bl	800e388 <updateRecord>
 800e75a:	e001      	b.n	800e760 <updateStatePublish+0xc0>
            }
        }
    }
    else
    {
        status = MQTTIllegalState;
 800e75c:	2308      	movs	r3, #8
 800e75e:	75fb      	strb	r3, [r7, #23]
        LogError( ( "Invalid transition from state %s to state %s.",
                    MQTT_State_strerror( currentState ),
                    MQTT_State_strerror( newState ) ) );
    }

    return status;
 800e760:	7dfb      	ldrb	r3, [r7, #23]
}
 800e762:	4618      	mov	r0, r3
 800e764:	371c      	adds	r7, #28
 800e766:	46bd      	mov	sp, r7
 800e768:	bd90      	pop	{r4, r7, pc}
 800e76a:	bf00      	nop
 800e76c:	08015368 	.word	0x08015368
 800e770:	08015978 	.word	0x08015978
 800e774:	08015318 	.word	0x08015318
 800e778:	080152f4 	.word	0x080152f4
 800e77c:	08015358 	.word	0x08015358

0800e780 <MQTT_ReserveState>:
/*-----------------------------------------------------------*/

MQTTStatus_t MQTT_ReserveState( const MQTTContext_t * pMqttContext,
                                uint16_t packetId,
                                MQTTQoS_t qos )
{
 800e780:	b590      	push	{r4, r7, lr}
 800e782:	b087      	sub	sp, #28
 800e784:	af02      	add	r7, sp, #8
 800e786:	6078      	str	r0, [r7, #4]
 800e788:	460b      	mov	r3, r1
 800e78a:	807b      	strh	r3, [r7, #2]
 800e78c:	4613      	mov	r3, r2
 800e78e:	707b      	strb	r3, [r7, #1]
    MQTTStatus_t status = MQTTSuccess;
 800e790:	2300      	movs	r3, #0
 800e792:	73fb      	strb	r3, [r7, #15]

    if( qos == MQTTQoS0 )
 800e794:	787b      	ldrb	r3, [r7, #1]
 800e796:	2b00      	cmp	r3, #0
 800e798:	d102      	bne.n	800e7a0 <MQTT_ReserveState+0x20>
    {
        status = MQTTSuccess;
 800e79a:	2300      	movs	r3, #0
 800e79c:	73fb      	strb	r3, [r7, #15]
 800e79e:	e014      	b.n	800e7ca <MQTT_ReserveState+0x4a>
    }
    else if( ( packetId == MQTT_PACKET_ID_INVALID ) || ( pMqttContext == NULL ) )
 800e7a0:	887b      	ldrh	r3, [r7, #2]
 800e7a2:	2b00      	cmp	r3, #0
 800e7a4:	d002      	beq.n	800e7ac <MQTT_ReserveState+0x2c>
 800e7a6:	687b      	ldr	r3, [r7, #4]
 800e7a8:	2b00      	cmp	r3, #0
 800e7aa:	d102      	bne.n	800e7b2 <MQTT_ReserveState+0x32>
    {
        status = MQTTBadParameter;
 800e7ac:	2301      	movs	r3, #1
 800e7ae:	73fb      	strb	r3, [r7, #15]
 800e7b0:	e00b      	b.n	800e7ca <MQTT_ReserveState+0x4a>
    }
    else
    {
        /* Collisions are detected when adding the record. */
        status = addRecord( pMqttContext->outgoingPublishRecords,
 800e7b2:	687b      	ldr	r3, [r7, #4]
 800e7b4:	6818      	ldr	r0, [r3, #0]
 800e7b6:	687b      	ldr	r3, [r7, #4]
 800e7b8:	6899      	ldr	r1, [r3, #8]
 800e7ba:	787b      	ldrb	r3, [r7, #1]
 800e7bc:	887a      	ldrh	r2, [r7, #2]
 800e7be:	2401      	movs	r4, #1
 800e7c0:	9400      	str	r4, [sp, #0]
 800e7c2:	f7ff fd5d 	bl	800e280 <addRecord>
 800e7c6:	4603      	mov	r3, r0
 800e7c8:	73fb      	strb	r3, [r7, #15]
                            packetId,
                            qos,
                            MQTTPublishSend );
    }

    return status;
 800e7ca:	7bfb      	ldrb	r3, [r7, #15]
}
 800e7cc:	4618      	mov	r0, r3
 800e7ce:	3714      	adds	r7, #20
 800e7d0:	46bd      	mov	sp, r7
 800e7d2:	bd90      	pop	{r4, r7, pc}

0800e7d4 <MQTT_CalculateStatePublish>:

/*-----------------------------------------------------------*/

MQTTPublishState_t MQTT_CalculateStatePublish( MQTTStateOperation_t opType,
                                               MQTTQoS_t qos )
{
 800e7d4:	b480      	push	{r7}
 800e7d6:	b085      	sub	sp, #20
 800e7d8:	af00      	add	r7, sp, #0
 800e7da:	4603      	mov	r3, r0
 800e7dc:	460a      	mov	r2, r1
 800e7de:	71fb      	strb	r3, [r7, #7]
 800e7e0:	4613      	mov	r3, r2
 800e7e2:	71bb      	strb	r3, [r7, #6]
    MQTTPublishState_t calculatedState = MQTTStateNull;
 800e7e4:	2300      	movs	r3, #0
 800e7e6:	73fb      	strb	r3, [r7, #15]

    switch( qos )
 800e7e8:	79bb      	ldrb	r3, [r7, #6]
 800e7ea:	2b02      	cmp	r3, #2
 800e7ec:	d011      	beq.n	800e812 <MQTT_CalculateStatePublish+0x3e>
 800e7ee:	2b02      	cmp	r3, #2
 800e7f0:	dc17      	bgt.n	800e822 <MQTT_CalculateStatePublish+0x4e>
 800e7f2:	2b00      	cmp	r3, #0
 800e7f4:	d002      	beq.n	800e7fc <MQTT_CalculateStatePublish+0x28>
 800e7f6:	2b01      	cmp	r3, #1
 800e7f8:	d003      	beq.n	800e802 <MQTT_CalculateStatePublish+0x2e>
            calculatedState = ( opType == MQTT_SEND ) ? MQTTPubRecPending : MQTTPubRecSend;
            break;

        default:
            /* No other QoS values. */
            break;
 800e7fa:	e012      	b.n	800e822 <MQTT_CalculateStatePublish+0x4e>
            calculatedState = MQTTPublishDone;
 800e7fc:	230a      	movs	r3, #10
 800e7fe:	73fb      	strb	r3, [r7, #15]
            break;
 800e800:	e010      	b.n	800e824 <MQTT_CalculateStatePublish+0x50>
            calculatedState = ( opType == MQTT_SEND ) ? MQTTPubAckPending : MQTTPubAckSend;
 800e802:	79fb      	ldrb	r3, [r7, #7]
 800e804:	2b00      	cmp	r3, #0
 800e806:	d101      	bne.n	800e80c <MQTT_CalculateStatePublish+0x38>
 800e808:	2306      	movs	r3, #6
 800e80a:	e000      	b.n	800e80e <MQTT_CalculateStatePublish+0x3a>
 800e80c:	2302      	movs	r3, #2
 800e80e:	73fb      	strb	r3, [r7, #15]
            break;
 800e810:	e008      	b.n	800e824 <MQTT_CalculateStatePublish+0x50>
            calculatedState = ( opType == MQTT_SEND ) ? MQTTPubRecPending : MQTTPubRecSend;
 800e812:	79fb      	ldrb	r3, [r7, #7]
 800e814:	2b00      	cmp	r3, #0
 800e816:	d101      	bne.n	800e81c <MQTT_CalculateStatePublish+0x48>
 800e818:	2307      	movs	r3, #7
 800e81a:	e000      	b.n	800e81e <MQTT_CalculateStatePublish+0x4a>
 800e81c:	2303      	movs	r3, #3
 800e81e:	73fb      	strb	r3, [r7, #15]
            break;
 800e820:	e000      	b.n	800e824 <MQTT_CalculateStatePublish+0x50>
            break;
 800e822:	bf00      	nop
    }

    return calculatedState;
 800e824:	7bfb      	ldrb	r3, [r7, #15]
}
 800e826:	4618      	mov	r0, r3
 800e828:	3714      	adds	r7, #20
 800e82a:	46bd      	mov	sp, r7
 800e82c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e830:	4770      	bx	lr

0800e832 <MQTT_UpdateStatePublish>:
MQTTStatus_t MQTT_UpdateStatePublish( const MQTTContext_t * pMqttContext,
                                      uint16_t packetId,
                                      MQTTStateOperation_t opType,
                                      MQTTQoS_t qos,
                                      MQTTPublishState_t * pNewState )
{
 800e832:	b590      	push	{r4, r7, lr}
 800e834:	b08b      	sub	sp, #44	; 0x2c
 800e836:	af04      	add	r7, sp, #16
 800e838:	6078      	str	r0, [r7, #4]
 800e83a:	4608      	mov	r0, r1
 800e83c:	4611      	mov	r1, r2
 800e83e:	461a      	mov	r2, r3
 800e840:	4603      	mov	r3, r0
 800e842:	807b      	strh	r3, [r7, #2]
 800e844:	460b      	mov	r3, r1
 800e846:	707b      	strb	r3, [r7, #1]
 800e848:	4613      	mov	r3, r2
 800e84a:	703b      	strb	r3, [r7, #0]
    MQTTPublishState_t newState = MQTTStateNull;
 800e84c:	2300      	movs	r3, #0
 800e84e:	73fb      	strb	r3, [r7, #15]
    MQTTPublishState_t currentState = MQTTStateNull;
 800e850:	2300      	movs	r3, #0
 800e852:	73bb      	strb	r3, [r7, #14]
    MQTTStatus_t mqttStatus = MQTTSuccess;
 800e854:	2300      	movs	r3, #0
 800e856:	75fb      	strb	r3, [r7, #23]
    size_t recordIndex = MQTT_INVALID_STATE_COUNT;
 800e858:	2300      	movs	r3, #0
 800e85a:	43db      	mvns	r3, r3
 800e85c:	613b      	str	r3, [r7, #16]
    MQTTQoS_t foundQoS = MQTTQoS0;
 800e85e:	2300      	movs	r3, #0
 800e860:	737b      	strb	r3, [r7, #13]

    if( ( pMqttContext == NULL ) || ( pNewState == NULL ) )
 800e862:	687b      	ldr	r3, [r7, #4]
 800e864:	2b00      	cmp	r3, #0
 800e866:	d002      	beq.n	800e86e <MQTT_UpdateStatePublish+0x3c>
 800e868:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e86a:	2b00      	cmp	r3, #0
 800e86c:	d102      	bne.n	800e874 <MQTT_UpdateStatePublish+0x42>
    {
        LogError( ( "Argument cannot be NULL: pMqttContext=%p, pNewState=%p",
                    ( void * ) pMqttContext,
                    ( void * ) pNewState ) );

        mqttStatus = MQTTBadParameter;
 800e86e:	2301      	movs	r3, #1
 800e870:	75fb      	strb	r3, [r7, #23]
 800e872:	e028      	b.n	800e8c6 <MQTT_UpdateStatePublish+0x94>
    }
    else if( qos == MQTTQoS0 )
 800e874:	783b      	ldrb	r3, [r7, #0]
 800e876:	2b00      	cmp	r3, #0
 800e878:	d103      	bne.n	800e882 <MQTT_UpdateStatePublish+0x50>
    {
        /* QoS 0 publish. Do nothing. */
        *pNewState = MQTTPublishDone;
 800e87a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e87c:	220a      	movs	r2, #10
 800e87e:	701a      	strb	r2, [r3, #0]
 800e880:	e021      	b.n	800e8c6 <MQTT_UpdateStatePublish+0x94>
    }
    else if( packetId == MQTT_PACKET_ID_INVALID )
 800e882:	887b      	ldrh	r3, [r7, #2]
 800e884:	2b00      	cmp	r3, #0
 800e886:	d102      	bne.n	800e88e <MQTT_UpdateStatePublish+0x5c>
    {
        /* Publishes > QoS 0 need a valid packet ID. */
        mqttStatus = MQTTBadParameter;
 800e888:	2301      	movs	r3, #1
 800e88a:	75fb      	strb	r3, [r7, #23]
 800e88c:	e01b      	b.n	800e8c6 <MQTT_UpdateStatePublish+0x94>
    }
    else if( opType == MQTT_SEND )
 800e88e:	787b      	ldrb	r3, [r7, #1]
 800e890:	2b00      	cmp	r3, #0
 800e892:	d118      	bne.n	800e8c6 <MQTT_UpdateStatePublish+0x94>
    {
        /* Search record for entry so we can check QoS. */
        recordIndex = findInRecord( pMqttContext->outgoingPublishRecords,
 800e894:	687b      	ldr	r3, [r7, #4]
 800e896:	6818      	ldr	r0, [r3, #0]
 800e898:	687b      	ldr	r3, [r7, #4]
 800e89a:	6899      	ldr	r1, [r3, #8]
 800e89c:	f107 040d 	add.w	r4, r7, #13
 800e8a0:	887a      	ldrh	r2, [r7, #2]
 800e8a2:	f107 030e 	add.w	r3, r7, #14
 800e8a6:	9300      	str	r3, [sp, #0]
 800e8a8:	4623      	mov	r3, r4
 800e8aa:	f7ff fc31 	bl	800e110 <findInRecord>
 800e8ae:	6138      	str	r0, [r7, #16]
                                    pMqttContext->outgoingPublishRecordMaxCount,
                                    packetId,
                                    &foundQoS,
                                    &currentState );

        if( ( recordIndex == MQTT_INVALID_STATE_COUNT ) || ( foundQoS != qos ) )
 800e8b0:	2300      	movs	r3, #0
 800e8b2:	43db      	mvns	r3, r3
 800e8b4:	693a      	ldr	r2, [r7, #16]
 800e8b6:	429a      	cmp	r2, r3
 800e8b8:	d003      	beq.n	800e8c2 <MQTT_UpdateStatePublish+0x90>
 800e8ba:	7b7b      	ldrb	r3, [r7, #13]
 800e8bc:	783a      	ldrb	r2, [r7, #0]
 800e8be:	429a      	cmp	r2, r3
 800e8c0:	d001      	beq.n	800e8c6 <MQTT_UpdateStatePublish+0x94>
        {
            /* Entry should match with supplied QoS. */
            mqttStatus = MQTTBadParameter;
 800e8c2:	2301      	movs	r3, #1
 800e8c4:	75fb      	strb	r3, [r7, #23]
    else
    {
        /* QoS 1 or 2 receive. Nothing to be done. */
    }

    if( ( qos != MQTTQoS0 ) && ( mqttStatus == MQTTSuccess ) )
 800e8c6:	783b      	ldrb	r3, [r7, #0]
 800e8c8:	2b00      	cmp	r3, #0
 800e8ca:	d020      	beq.n	800e90e <MQTT_UpdateStatePublish+0xdc>
 800e8cc:	7dfb      	ldrb	r3, [r7, #23]
 800e8ce:	2b00      	cmp	r3, #0
 800e8d0:	d11d      	bne.n	800e90e <MQTT_UpdateStatePublish+0xdc>
    {
        newState = MQTT_CalculateStatePublish( opType, qos );
 800e8d2:	783a      	ldrb	r2, [r7, #0]
 800e8d4:	787b      	ldrb	r3, [r7, #1]
 800e8d6:	4611      	mov	r1, r2
 800e8d8:	4618      	mov	r0, r3
 800e8da:	f7ff ff7b 	bl	800e7d4 <MQTT_CalculateStatePublish>
 800e8de:	4603      	mov	r3, r0
 800e8e0:	73fb      	strb	r3, [r7, #15]
        /* Validate state transition and update state records. */
        mqttStatus = updateStatePublish( pMqttContext,
 800e8e2:	7bbb      	ldrb	r3, [r7, #14]
 800e8e4:	7878      	ldrb	r0, [r7, #1]
 800e8e6:	8879      	ldrh	r1, [r7, #2]
 800e8e8:	7bfa      	ldrb	r2, [r7, #15]
 800e8ea:	9202      	str	r2, [sp, #8]
 800e8ec:	9301      	str	r3, [sp, #4]
 800e8ee:	783b      	ldrb	r3, [r7, #0]
 800e8f0:	9300      	str	r3, [sp, #0]
 800e8f2:	4603      	mov	r3, r0
 800e8f4:	460a      	mov	r2, r1
 800e8f6:	6939      	ldr	r1, [r7, #16]
 800e8f8:	6878      	ldr	r0, [r7, #4]
 800e8fa:	f7ff fed1 	bl	800e6a0 <updateStatePublish>
 800e8fe:	4603      	mov	r3, r0
 800e900:	75fb      	strb	r3, [r7, #23]
                                         qos,
                                         currentState,
                                         newState );

        /* Update output parameter on success. */
        if( mqttStatus == MQTTSuccess )
 800e902:	7dfb      	ldrb	r3, [r7, #23]
 800e904:	2b00      	cmp	r3, #0
 800e906:	d102      	bne.n	800e90e <MQTT_UpdateStatePublish+0xdc>
        {
            *pNewState = newState;
 800e908:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e90a:	7bfa      	ldrb	r2, [r7, #15]
 800e90c:	701a      	strb	r2, [r3, #0]
        }
    }

    return mqttStatus;
 800e90e:	7dfb      	ldrb	r3, [r7, #23]
}
 800e910:	4618      	mov	r0, r3
 800e912:	371c      	adds	r7, #28
 800e914:	46bd      	mov	sp, r7
 800e916:	bd90      	pop	{r4, r7, pc}

0800e918 <MQTT_UpdateStateAck>:
MQTTStatus_t MQTT_UpdateStateAck( const MQTTContext_t * pMqttContext,
                                  uint16_t packetId,
                                  MQTTPubAckType_t packetType,
                                  MQTTStateOperation_t opType,
                                  MQTTPublishState_t * pNewState )
{
 800e918:	b580      	push	{r7, lr}
 800e91a:	b08a      	sub	sp, #40	; 0x28
 800e91c:	af02      	add	r7, sp, #8
 800e91e:	6078      	str	r0, [r7, #4]
 800e920:	4608      	mov	r0, r1
 800e922:	4611      	mov	r1, r2
 800e924:	461a      	mov	r2, r3
 800e926:	4603      	mov	r3, r0
 800e928:	807b      	strh	r3, [r7, #2]
 800e92a:	460b      	mov	r3, r1
 800e92c:	707b      	strb	r3, [r7, #1]
 800e92e:	4613      	mov	r3, r2
 800e930:	703b      	strb	r3, [r7, #0]
    MQTTPublishState_t newState = MQTTStateNull;
 800e932:	2300      	movs	r3, #0
 800e934:	74bb      	strb	r3, [r7, #18]
    MQTTPublishState_t currentState = MQTTStateNull;
 800e936:	2300      	movs	r3, #0
 800e938:	743b      	strb	r3, [r7, #16]
    bool isOutgoingPublish = isPublishOutgoing( packetType, opType );
 800e93a:	783a      	ldrb	r2, [r7, #0]
 800e93c:	787b      	ldrb	r3, [r7, #1]
 800e93e:	4611      	mov	r1, r2
 800e940:	4618      	mov	r0, r3
 800e942:	f7ff fbb7 	bl	800e0b4 <isPublishOutgoing>
 800e946:	4603      	mov	r3, r0
 800e948:	747b      	strb	r3, [r7, #17]
    MQTTQoS_t qos = MQTTQoS0;
 800e94a:	2300      	movs	r3, #0
 800e94c:	73fb      	strb	r3, [r7, #15]
    size_t maxRecordCount = MQTT_INVALID_STATE_COUNT;
 800e94e:	2300      	movs	r3, #0
 800e950:	43db      	mvns	r3, r3
 800e952:	61fb      	str	r3, [r7, #28]
    size_t recordIndex = MQTT_INVALID_STATE_COUNT;
 800e954:	2300      	movs	r3, #0
 800e956:	43db      	mvns	r3, r3
 800e958:	61bb      	str	r3, [r7, #24]

    MQTTPubAckInfo_t * records = NULL;
 800e95a:	2300      	movs	r3, #0
 800e95c:	617b      	str	r3, [r7, #20]
    MQTTStatus_t status = MQTTBadResponse;
 800e95e:	2305      	movs	r3, #5
 800e960:	74fb      	strb	r3, [r7, #19]

    if( ( pMqttContext == NULL ) || ( pNewState == NULL ) )
 800e962:	687b      	ldr	r3, [r7, #4]
 800e964:	2b00      	cmp	r3, #0
 800e966:	d002      	beq.n	800e96e <MQTT_UpdateStateAck+0x56>
 800e968:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e96a:	2b00      	cmp	r3, #0
 800e96c:	d102      	bne.n	800e974 <MQTT_UpdateStateAck+0x5c>
    {
        LogError( ( "Argument cannot be NULL: pMqttContext=%p, pNewState=%p.",
                    ( void * ) pMqttContext,
                    ( void * ) pNewState ) );
        status = MQTTBadParameter;
 800e96e:	2301      	movs	r3, #1
 800e970:	74fb      	strb	r3, [r7, #19]
 800e972:	e027      	b.n	800e9c4 <MQTT_UpdateStateAck+0xac>
    }
    else if( packetId == MQTT_PACKET_ID_INVALID )
 800e974:	887b      	ldrh	r3, [r7, #2]
 800e976:	2b00      	cmp	r3, #0
 800e978:	d102      	bne.n	800e980 <MQTT_UpdateStateAck+0x68>
    {
        LogError( ( "Packet ID must be nonzero." ) );
        status = MQTTBadParameter;
 800e97a:	2301      	movs	r3, #1
 800e97c:	74fb      	strb	r3, [r7, #19]
 800e97e:	e021      	b.n	800e9c4 <MQTT_UpdateStateAck+0xac>
    }
    else if( packetType > MQTTPubcomp )
 800e980:	787b      	ldrb	r3, [r7, #1]
 800e982:	2b03      	cmp	r3, #3
 800e984:	d902      	bls.n	800e98c <MQTT_UpdateStateAck+0x74>
    {
        LogError( ( "Invalid packet type %u.", ( unsigned int ) packetType ) );
        status = MQTTBadParameter;
 800e986:	2301      	movs	r3, #1
 800e988:	74fb      	strb	r3, [r7, #19]
 800e98a:	e01b      	b.n	800e9c4 <MQTT_UpdateStateAck+0xac>
    }
    else
    {
        if( isOutgoingPublish == true )
 800e98c:	7c7b      	ldrb	r3, [r7, #17]
 800e98e:	2b00      	cmp	r3, #0
 800e990:	d006      	beq.n	800e9a0 <MQTT_UpdateStateAck+0x88>
        {
            records = pMqttContext->outgoingPublishRecords;
 800e992:	687b      	ldr	r3, [r7, #4]
 800e994:	681b      	ldr	r3, [r3, #0]
 800e996:	617b      	str	r3, [r7, #20]
            maxRecordCount = pMqttContext->outgoingPublishRecordMaxCount;
 800e998:	687b      	ldr	r3, [r7, #4]
 800e99a:	689b      	ldr	r3, [r3, #8]
 800e99c:	61fb      	str	r3, [r7, #28]
 800e99e:	e005      	b.n	800e9ac <MQTT_UpdateStateAck+0x94>
        }
        else
        {
            records = pMqttContext->incomingPublishRecords;
 800e9a0:	687b      	ldr	r3, [r7, #4]
 800e9a2:	685b      	ldr	r3, [r3, #4]
 800e9a4:	617b      	str	r3, [r7, #20]
            maxRecordCount = pMqttContext->incomingPublishRecordMaxCount;
 800e9a6:	687b      	ldr	r3, [r7, #4]
 800e9a8:	68db      	ldr	r3, [r3, #12]
 800e9aa:	61fb      	str	r3, [r7, #28]
        }

        recordIndex = findInRecord( records,
 800e9ac:	f107 010f 	add.w	r1, r7, #15
 800e9b0:	887a      	ldrh	r2, [r7, #2]
 800e9b2:	f107 0310 	add.w	r3, r7, #16
 800e9b6:	9300      	str	r3, [sp, #0]
 800e9b8:	460b      	mov	r3, r1
 800e9ba:	69f9      	ldr	r1, [r7, #28]
 800e9bc:	6978      	ldr	r0, [r7, #20]
 800e9be:	f7ff fba7 	bl	800e110 <findInRecord>
 800e9c2:	61b8      	str	r0, [r7, #24]
                                    packetId,
                                    &qos,
                                    &currentState );
    }

    if( recordIndex != MQTT_INVALID_STATE_COUNT )
 800e9c4:	2300      	movs	r3, #0
 800e9c6:	43db      	mvns	r3, r3
 800e9c8:	69ba      	ldr	r2, [r7, #24]
 800e9ca:	429a      	cmp	r2, r3
 800e9cc:	d01a      	beq.n	800ea04 <MQTT_UpdateStateAck+0xec>
    {
        newState = MQTT_CalculateStateAck( packetType, opType, qos );
 800e9ce:	7bfa      	ldrb	r2, [r7, #15]
 800e9d0:	7839      	ldrb	r1, [r7, #0]
 800e9d2:	787b      	ldrb	r3, [r7, #1]
 800e9d4:	4618      	mov	r0, r3
 800e9d6:	f7ff fdbb 	bl	800e550 <MQTT_CalculateStateAck>
 800e9da:	4603      	mov	r3, r0
 800e9dc:	74bb      	strb	r3, [r7, #18]

        /* Validate state transition and update state record. */
        status = updateStateAck( records,
 800e9de:	7c3b      	ldrb	r3, [r7, #16]
 800e9e0:	8879      	ldrh	r1, [r7, #2]
 800e9e2:	7cba      	ldrb	r2, [r7, #18]
 800e9e4:	9201      	str	r2, [sp, #4]
 800e9e6:	9300      	str	r3, [sp, #0]
 800e9e8:	460b      	mov	r3, r1
 800e9ea:	69ba      	ldr	r2, [r7, #24]
 800e9ec:	69f9      	ldr	r1, [r7, #28]
 800e9ee:	6978      	ldr	r0, [r7, #20]
 800e9f0:	f7ff fdfa 	bl	800e5e8 <updateStateAck>
 800e9f4:	4603      	mov	r3, r0
 800e9f6:	74fb      	strb	r3, [r7, #19]
                                 packetId,
                                 currentState,
                                 newState );

        /* Update the output parameter. */
        if( status == MQTTSuccess )
 800e9f8:	7cfb      	ldrb	r3, [r7, #19]
 800e9fa:	2b00      	cmp	r3, #0
 800e9fc:	d102      	bne.n	800ea04 <MQTT_UpdateStateAck+0xec>
        {
            *pNewState = newState;
 800e9fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea00:	7cba      	ldrb	r2, [r7, #18]
 800ea02:	701a      	strb	r2, [r3, #0]
    {
        LogError( ( "No matching record found for publish: PacketId=%u.",
                    ( unsigned int ) packetId ) );
    }

    return status;
 800ea04:	7cfb      	ldrb	r3, [r7, #19]
}
 800ea06:	4618      	mov	r0, r3
 800ea08:	3720      	adds	r7, #32
 800ea0a:	46bd      	mov	sp, r7
 800ea0c:	bd80      	pop	{r7, pc}

0800ea0e <MQTT_PubrelToResend>:
/*-----------------------------------------------------------*/

uint16_t MQTT_PubrelToResend( const MQTTContext_t * pMqttContext,
                              MQTTStateCursor_t * pCursor,
                              MQTTPublishState_t * pState )
{
 800ea0e:	b580      	push	{r7, lr}
 800ea10:	b086      	sub	sp, #24
 800ea12:	af00      	add	r7, sp, #0
 800ea14:	60f8      	str	r0, [r7, #12]
 800ea16:	60b9      	str	r1, [r7, #8]
 800ea18:	607a      	str	r2, [r7, #4]
    uint16_t packetId = MQTT_PACKET_ID_INVALID;
 800ea1a:	2300      	movs	r3, #0
 800ea1c:	82fb      	strh	r3, [r7, #22]
    uint16_t searchStates = 0U;
 800ea1e:	2300      	movs	r3, #0
 800ea20:	82bb      	strh	r3, [r7, #20]

    /* Validate arguments. */
    if( ( pMqttContext == NULL ) || ( pCursor == NULL ) || ( pState == NULL ) )
 800ea22:	68fb      	ldr	r3, [r7, #12]
 800ea24:	2b00      	cmp	r3, #0
 800ea26:	d01b      	beq.n	800ea60 <MQTT_PubrelToResend+0x52>
 800ea28:	68bb      	ldr	r3, [r7, #8]
 800ea2a:	2b00      	cmp	r3, #0
 800ea2c:	d018      	beq.n	800ea60 <MQTT_PubrelToResend+0x52>
 800ea2e:	687b      	ldr	r3, [r7, #4]
 800ea30:	2b00      	cmp	r3, #0
 800ea32:	d015      	beq.n	800ea60 <MQTT_PubrelToResend+0x52>
    }
    else
    {
        /* PUBREL for packets in state #MQTTPubCompPending and #MQTTPubRelSend
         * would need to be resent when a session is reestablished.*/
        UINT16_SET_BIT( searchStates, MQTTPubCompPending );
 800ea34:	8abb      	ldrh	r3, [r7, #20]
 800ea36:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800ea3a:	82bb      	strh	r3, [r7, #20]
        UINT16_SET_BIT( searchStates, MQTTPubRelSend );
 800ea3c:	8abb      	ldrh	r3, [r7, #20]
 800ea3e:	f043 0310 	orr.w	r3, r3, #16
 800ea42:	82bb      	strh	r3, [r7, #20]
        packetId = stateSelect( pMqttContext, searchStates, pCursor );
 800ea44:	8abb      	ldrh	r3, [r7, #20]
 800ea46:	68ba      	ldr	r2, [r7, #8]
 800ea48:	4619      	mov	r1, r3
 800ea4a:	68f8      	ldr	r0, [r7, #12]
 800ea4c:	f7ff fcd8 	bl	800e400 <stateSelect>
 800ea50:	4603      	mov	r3, r0
 800ea52:	82fb      	strh	r3, [r7, #22]

        /* The state needs to be in #MQTTPubRelSend for sending PUBREL. */
        if( packetId != MQTT_PACKET_ID_INVALID )
 800ea54:	8afb      	ldrh	r3, [r7, #22]
 800ea56:	2b00      	cmp	r3, #0
 800ea58:	d002      	beq.n	800ea60 <MQTT_PubrelToResend+0x52>
        {
            *pState = MQTTPubRelSend;
 800ea5a:	687b      	ldr	r3, [r7, #4]
 800ea5c:	2204      	movs	r2, #4
 800ea5e:	701a      	strb	r2, [r3, #0]
        }
    }

    return packetId;
 800ea60:	8afb      	ldrh	r3, [r7, #22]
}
 800ea62:	4618      	mov	r0, r3
 800ea64:	3718      	adds	r7, #24
 800ea66:	46bd      	mov	sp, r7
 800ea68:	bd80      	pop	{r7, pc}
	...

0800ea6c <transport_recv>:
#define min(a,b) ((a) < (b) ? (a) : (b))

int32_t transport_recv( NetworkContext_t * pNetworkContext,
                        void * pBuffer,
                        size_t bytesToRecv )
{
 800ea6c:	b580      	push	{r7, lr}
 800ea6e:	f5ad 6d87 	sub.w	sp, sp, #1080	; 0x438
 800ea72:	af02      	add	r7, sp, #8
 800ea74:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800ea78:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 800ea7c:	6018      	str	r0, [r3, #0]
 800ea7e:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800ea82:	f5a3 6385 	sub.w	r3, r3, #1064	; 0x428
 800ea86:	6019      	str	r1, [r3, #0]
 800ea88:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800ea8c:	f2a3 432c 	subw	r3, r3, #1068	; 0x42c
 800ea90:	601a      	str	r2, [r3, #0]
    int32_t socketStatus = 1;
 800ea92:	2301      	movs	r3, #1
 800ea94:	f8c7 342c 	str.w	r3, [r7, #1068]	; 0x42c
    uint16_t recvlen;
	uint8_t recvdata[1024];

    ES_WIFI_Conn_t conn;

	conn.Number = pNetworkContext->socket;
 800ea98:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800ea9c:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 800eaa0:	681b      	ldr	r3, [r3, #0]
 800eaa2:	781a      	ldrb	r2, [r3, #0]
 800eaa4:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800eaa8:	f2a3 431c 	subw	r3, r3, #1052	; 0x41c
 800eaac:	705a      	strb	r2, [r3, #1]
	conn.RemotePort = pNetworkContext->remote_port;
 800eaae:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800eab2:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 800eab6:	681b      	ldr	r3, [r3, #0]
 800eab8:	88da      	ldrh	r2, [r3, #6]
 800eaba:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800eabe:	f2a3 431c 	subw	r3, r3, #1052	; 0x41c
 800eac2:	805a      	strh	r2, [r3, #2]
	conn.LocalPort = 0;
 800eac4:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800eac8:	f2a3 431c 	subw	r3, r3, #1052	; 0x41c
 800eacc:	2200      	movs	r2, #0
 800eace:	809a      	strh	r2, [r3, #4]
	conn.Type = ES_WIFI_TCP_CONNECTION;
 800ead0:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800ead4:	f2a3 431c 	subw	r3, r3, #1052	; 0x41c
 800ead8:	2200      	movs	r2, #0
 800eada:	701a      	strb	r2, [r3, #0]
	conn.RemoteIP[0] = pNetworkContext->ipaddr[0];
 800eadc:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800eae0:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 800eae4:	681b      	ldr	r3, [r3, #0]
 800eae6:	789a      	ldrb	r2, [r3, #2]
 800eae8:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800eaec:	f2a3 431c 	subw	r3, r3, #1052	; 0x41c
 800eaf0:	719a      	strb	r2, [r3, #6]
	conn.RemoteIP[1] = pNetworkContext->ipaddr[1];
 800eaf2:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800eaf6:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 800eafa:	681b      	ldr	r3, [r3, #0]
 800eafc:	78da      	ldrb	r2, [r3, #3]
 800eafe:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800eb02:	f2a3 431c 	subw	r3, r3, #1052	; 0x41c
 800eb06:	71da      	strb	r2, [r3, #7]
	conn.RemoteIP[2] = pNetworkContext->ipaddr[2];
 800eb08:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800eb0c:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 800eb10:	681b      	ldr	r3, [r3, #0]
 800eb12:	791a      	ldrb	r2, [r3, #4]
 800eb14:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800eb18:	f2a3 431c 	subw	r3, r3, #1052	; 0x41c
 800eb1c:	721a      	strb	r2, [r3, #8]
	conn.RemoteIP[3] = pNetworkContext->ipaddr[3];
 800eb1e:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800eb22:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 800eb26:	681b      	ldr	r3, [r3, #0]
 800eb28:	795a      	ldrb	r2, [r3, #5]
 800eb2a:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800eb2e:	f2a3 431c 	subw	r3, r3, #1052	; 0x41c
 800eb32:	725a      	strb	r2, [r3, #9]

    if(!pNetworkContext->socket_open) {
 800eb34:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800eb38:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 800eb3c:	681b      	ldr	r3, [r3, #0]
 800eb3e:	785b      	ldrb	r3, [r3, #1]
 800eb40:	2b00      	cmp	r3, #0
 800eb42:	d115      	bne.n	800eb70 <transport_recv+0x104>
    	ret=ES_WIFI_StartClientConnection(&EsWifiObj, &conn);
 800eb44:	f107 0314 	add.w	r3, r7, #20
 800eb48:	4619      	mov	r1, r3
 800eb4a:	482a      	ldr	r0, [pc, #168]	; (800ebf4 <transport_recv+0x188>)
 800eb4c:	f7fb fc54 	bl	800a3f8 <ES_WIFI_StartClientConnection>
 800eb50:	4603      	mov	r3, r0
 800eb52:	f887 342b 	strb.w	r3, [r7, #1067]	; 0x42b

		if(ret!=ES_WIFI_STATUS_OK) {
 800eb56:	f897 342b 	ldrb.w	r3, [r7, #1067]	; 0x42b
 800eb5a:	2b00      	cmp	r3, #0
 800eb5c:	d001      	beq.n	800eb62 <transport_recv+0xf6>
			return 0;
 800eb5e:	2300      	movs	r3, #0
 800eb60:	e042      	b.n	800ebe8 <transport_recv+0x17c>
		} else {
			pNetworkContext->socket_open=1;
 800eb62:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800eb66:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 800eb6a:	681b      	ldr	r3, [r3, #0]
 800eb6c:	2201      	movs	r2, #1
 800eb6e:	705a      	strb	r2, [r3, #1]
		}
    }

	ret=ES_WIFI_ReceiveData(&EsWifiObj,pNetworkContext->socket, pBuffer, bytesToRecv, &recvlen, 1000);
 800eb70:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800eb74:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 800eb78:	681b      	ldr	r3, [r3, #0]
 800eb7a:	7819      	ldrb	r1, [r3, #0]
 800eb7c:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800eb80:	f2a3 432c 	subw	r3, r3, #1068	; 0x42c
 800eb84:	681b      	ldr	r3, [r3, #0]
 800eb86:	b298      	uxth	r0, r3
 800eb88:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800eb8c:	f5a3 6285 	sub.w	r2, r3, #1064	; 0x428
 800eb90:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800eb94:	9301      	str	r3, [sp, #4]
 800eb96:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800eb9a:	9300      	str	r3, [sp, #0]
 800eb9c:	4603      	mov	r3, r0
 800eb9e:	6812      	ldr	r2, [r2, #0]
 800eba0:	4814      	ldr	r0, [pc, #80]	; (800ebf4 <transport_recv+0x188>)
 800eba2:	f7fb fdcf 	bl	800a744 <ES_WIFI_ReceiveData>
 800eba6:	4603      	mov	r3, r0
 800eba8:	f887 342b 	strb.w	r3, [r7, #1067]	; 0x42b
	if(ret!=WIFI_STATUS_OK) {
 800ebac:	f897 342b 	ldrb.w	r3, [r7, #1067]	; 0x42b
 800ebb0:	2b00      	cmp	r3, #0
 800ebb2:	d00a      	beq.n	800ebca <transport_recv+0x15e>
		socketStatus=0;
 800ebb4:	2300      	movs	r3, #0
 800ebb6:	f8c7 342c 	str.w	r3, [r7, #1068]	; 0x42c
		pNetworkContext->socket_open=0;
 800ebba:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800ebbe:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 800ebc2:	681b      	ldr	r3, [r3, #0]
 800ebc4:	2200      	movs	r2, #0
 800ebc6:	705a      	strb	r2, [r3, #1]
 800ebc8:	e00c      	b.n	800ebe4 <transport_recv+0x178>
	} else {
		//log_transport('R',pBuffer,recvlen);
		recvdata[recvlen]=0;
 800ebca:	f8b7 3428 	ldrh.w	r3, [r7, #1064]	; 0x428
 800ebce:	461a      	mov	r2, r3
 800ebd0:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800ebd4:	f5a3 6381 	sub.w	r3, r3, #1032	; 0x408
 800ebd8:	2100      	movs	r1, #0
 800ebda:	5499      	strb	r1, [r3, r2]
		socketStatus=recvlen;
 800ebdc:	f8b7 3428 	ldrh.w	r3, [r7, #1064]	; 0x428
 800ebe0:	f8c7 342c 	str.w	r3, [r7, #1068]	; 0x42c
	}

    return socketStatus;
 800ebe4:	f8d7 342c 	ldr.w	r3, [r7, #1068]	; 0x42c
}
 800ebe8:	4618      	mov	r0, r3
 800ebea:	f507 6786 	add.w	r7, r7, #1072	; 0x430
 800ebee:	46bd      	mov	sp, r7
 800ebf0:	bd80      	pop	{r7, pc}
 800ebf2:	bf00      	nop
 800ebf4:	20000d00 	.word	0x20000d00

0800ebf8 <transport_send>:

int32_t transport_send( NetworkContext_t * pNetworkContext,
                        const void * pBuffer,
                        size_t bytesToSend )
{
 800ebf8:	b580      	push	{r7, lr}
 800ebfa:	b08e      	sub	sp, #56	; 0x38
 800ebfc:	af02      	add	r7, sp, #8
 800ebfe:	60f8      	str	r0, [r7, #12]
 800ec00:	60b9      	str	r1, [r7, #8]
 800ec02:	607a      	str	r2, [r7, #4]
    int32_t socketStatus=0;
 800ec04:	2300      	movs	r3, #0
 800ec06:	62fb      	str	r3, [r7, #44]	; 0x2c
    int16_t datasent;
    uint8_t ret;

    ES_WIFI_Conn_t conn;

	conn.Number = pNetworkContext->socket;
 800ec08:	68fb      	ldr	r3, [r7, #12]
 800ec0a:	781b      	ldrb	r3, [r3, #0]
 800ec0c:	757b      	strb	r3, [r7, #21]
	conn.RemotePort = pNetworkContext->remote_port;
 800ec0e:	68fb      	ldr	r3, [r7, #12]
 800ec10:	88db      	ldrh	r3, [r3, #6]
 800ec12:	82fb      	strh	r3, [r7, #22]
	conn.LocalPort = 0;
 800ec14:	2300      	movs	r3, #0
 800ec16:	833b      	strh	r3, [r7, #24]
	conn.Type = ES_WIFI_TCP_CONNECTION;
 800ec18:	2300      	movs	r3, #0
 800ec1a:	753b      	strb	r3, [r7, #20]
	conn.RemoteIP[0] = pNetworkContext->ipaddr[0];
 800ec1c:	68fb      	ldr	r3, [r7, #12]
 800ec1e:	789b      	ldrb	r3, [r3, #2]
 800ec20:	76bb      	strb	r3, [r7, #26]
	conn.RemoteIP[1] = pNetworkContext->ipaddr[1];
 800ec22:	68fb      	ldr	r3, [r7, #12]
 800ec24:	78db      	ldrb	r3, [r3, #3]
 800ec26:	76fb      	strb	r3, [r7, #27]
	conn.RemoteIP[2] = pNetworkContext->ipaddr[2];
 800ec28:	68fb      	ldr	r3, [r7, #12]
 800ec2a:	791b      	ldrb	r3, [r3, #4]
 800ec2c:	773b      	strb	r3, [r7, #28]
	conn.RemoteIP[3] = pNetworkContext->ipaddr[3];
 800ec2e:	68fb      	ldr	r3, [r7, #12]
 800ec30:	795b      	ldrb	r3, [r3, #5]
 800ec32:	777b      	strb	r3, [r7, #29]

    if(!pNetworkContext->socket_open) {
 800ec34:	68fb      	ldr	r3, [r7, #12]
 800ec36:	785b      	ldrb	r3, [r3, #1]
 800ec38:	2b00      	cmp	r3, #0
 800ec3a:	d111      	bne.n	800ec60 <transport_send+0x68>
    	ret=ES_WIFI_StartClientConnection(&EsWifiObj, &conn);
 800ec3c:	f107 0314 	add.w	r3, r7, #20
 800ec40:	4619      	mov	r1, r3
 800ec42:	481c      	ldr	r0, [pc, #112]	; (800ecb4 <transport_send+0xbc>)
 800ec44:	f7fb fbd8 	bl	800a3f8 <ES_WIFI_StartClientConnection>
 800ec48:	4603      	mov	r3, r0
 800ec4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

		if(ret!=ES_WIFI_STATUS_OK) {
 800ec4e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ec52:	2b00      	cmp	r3, #0
 800ec54:	d001      	beq.n	800ec5a <transport_send+0x62>
			return 0;
 800ec56:	2300      	movs	r3, #0
 800ec58:	e027      	b.n	800ecaa <transport_send+0xb2>
		} else {
			pNetworkContext->socket_open=1;
 800ec5a:	68fb      	ldr	r3, [r7, #12]
 800ec5c:	2201      	movs	r2, #1
 800ec5e:	705a      	strb	r2, [r3, #1]
		}
    }

	ret=ES_WIFI_SendData(&EsWifiObj,pNetworkContext->socket,pBuffer,bytesToSend,&datasent,1000);
 800ec60:	68fb      	ldr	r3, [r7, #12]
 800ec62:	7819      	ldrb	r1, [r3, #0]
 800ec64:	687b      	ldr	r3, [r7, #4]
 800ec66:	b29a      	uxth	r2, r3
 800ec68:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800ec6c:	9301      	str	r3, [sp, #4]
 800ec6e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800ec72:	9300      	str	r3, [sp, #0]
 800ec74:	4613      	mov	r3, r2
 800ec76:	68ba      	ldr	r2, [r7, #8]
 800ec78:	480e      	ldr	r0, [pc, #56]	; (800ecb4 <transport_send+0xbc>)
 800ec7a:	f7fb fca7 	bl	800a5cc <ES_WIFI_SendData>
 800ec7e:	4603      	mov	r3, r0
 800ec80:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	//log_transport('S',pBuffer,bytesToSend);
	if(ret!=ES_WIFI_STATUS_OK) {
 800ec84:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ec88:	2b00      	cmp	r3, #0
 800ec8a:	d00a      	beq.n	800eca2 <transport_send+0xaa>
		pNetworkContext->socket_open=0;
 800ec8c:	68fb      	ldr	r3, [r7, #12]
 800ec8e:	2200      	movs	r2, #0
 800ec90:	705a      	strb	r2, [r3, #1]
		printf("Error in sending data: %d\n",ret);
 800ec92:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ec96:	4619      	mov	r1, r3
 800ec98:	4807      	ldr	r0, [pc, #28]	; (800ecb8 <transport_send+0xc0>)
 800ec9a:	f004 f96d 	bl	8012f78 <iprintf>
		return 0;
 800ec9e:	2300      	movs	r3, #0
 800eca0:	e003      	b.n	800ecaa <transport_send+0xb2>
	} else {
		socketStatus=datasent;
 800eca2:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800eca6:	62fb      	str	r3, [r7, #44]	; 0x2c
	}

    return socketStatus;
 800eca8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800ecaa:	4618      	mov	r0, r3
 800ecac:	3730      	adds	r7, #48	; 0x30
 800ecae:	46bd      	mov	sp, r7
 800ecb0:	bd80      	pop	{r7, pc}
 800ecb2:	bf00      	nop
 800ecb4:	20000d00 	.word	0x20000d00
 800ecb8:	080154cc 	.word	0x080154cc

0800ecbc <init_transport_from_socket>:

/* Populating the TransportInterface_t structure with the definitions above. */
void init_transport_from_socket( uint8_t tcpSocket, uint8_t socketOpen,
                                 NetworkContext_t * pNetworkContext,
                                 TransportInterface_t * pTransport )
{
 800ecbc:	b480      	push	{r7}
 800ecbe:	b085      	sub	sp, #20
 800ecc0:	af00      	add	r7, sp, #0
 800ecc2:	60ba      	str	r2, [r7, #8]
 800ecc4:	607b      	str	r3, [r7, #4]
 800ecc6:	4603      	mov	r3, r0
 800ecc8:	73fb      	strb	r3, [r7, #15]
 800ecca:	460b      	mov	r3, r1
 800eccc:	73bb      	strb	r3, [r7, #14]
    pNetworkContext->socket = tcpSocket;
 800ecce:	68bb      	ldr	r3, [r7, #8]
 800ecd0:	7bfa      	ldrb	r2, [r7, #15]
 800ecd2:	701a      	strb	r2, [r3, #0]
    pNetworkContext->socket_open=socketOpen;
 800ecd4:	68bb      	ldr	r3, [r7, #8]
 800ecd6:	7bba      	ldrb	r2, [r7, #14]
 800ecd8:	705a      	strb	r2, [r3, #1]
    pTransport->recv = transport_recv;
 800ecda:	687b      	ldr	r3, [r7, #4]
 800ecdc:	4a08      	ldr	r2, [pc, #32]	; (800ed00 <init_transport_from_socket+0x44>)
 800ecde:	601a      	str	r2, [r3, #0]
    pTransport->send = transport_send;
 800ece0:	687b      	ldr	r3, [r7, #4]
 800ece2:	4a08      	ldr	r2, [pc, #32]	; (800ed04 <init_transport_from_socket+0x48>)
 800ece4:	605a      	str	r2, [r3, #4]
    // We don't implement transport vector function
    pTransport->writev=NULL;
 800ece6:	687b      	ldr	r3, [r7, #4]
 800ece8:	2200      	movs	r2, #0
 800ecea:	609a      	str	r2, [r3, #8]
    pTransport->pNetworkContext = pNetworkContext;
 800ecec:	687b      	ldr	r3, [r7, #4]
 800ecee:	68ba      	ldr	r2, [r7, #8]
 800ecf0:	60da      	str	r2, [r3, #12]
}
 800ecf2:	bf00      	nop
 800ecf4:	3714      	adds	r7, #20
 800ecf6:	46bd      	mov	sp, r7
 800ecf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecfc:	4770      	bx	lr
 800ecfe:	bf00      	nop
 800ed00:	0800ea6d 	.word	0x0800ea6d
 800ed04:	0800ebf9 	.word	0x0800ebf9

0800ed08 <__NVIC_SetPriority>:
{
 800ed08:	b480      	push	{r7}
 800ed0a:	b083      	sub	sp, #12
 800ed0c:	af00      	add	r7, sp, #0
 800ed0e:	4603      	mov	r3, r0
 800ed10:	6039      	str	r1, [r7, #0]
 800ed12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800ed14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ed18:	2b00      	cmp	r3, #0
 800ed1a:	db0a      	blt.n	800ed32 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ed1c:	683b      	ldr	r3, [r7, #0]
 800ed1e:	b2da      	uxtb	r2, r3
 800ed20:	490c      	ldr	r1, [pc, #48]	; (800ed54 <__NVIC_SetPriority+0x4c>)
 800ed22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ed26:	0112      	lsls	r2, r2, #4
 800ed28:	b2d2      	uxtb	r2, r2
 800ed2a:	440b      	add	r3, r1
 800ed2c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800ed30:	e00a      	b.n	800ed48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ed32:	683b      	ldr	r3, [r7, #0]
 800ed34:	b2da      	uxtb	r2, r3
 800ed36:	4908      	ldr	r1, [pc, #32]	; (800ed58 <__NVIC_SetPriority+0x50>)
 800ed38:	79fb      	ldrb	r3, [r7, #7]
 800ed3a:	f003 030f 	and.w	r3, r3, #15
 800ed3e:	3b04      	subs	r3, #4
 800ed40:	0112      	lsls	r2, r2, #4
 800ed42:	b2d2      	uxtb	r2, r2
 800ed44:	440b      	add	r3, r1
 800ed46:	761a      	strb	r2, [r3, #24]
}
 800ed48:	bf00      	nop
 800ed4a:	370c      	adds	r7, #12
 800ed4c:	46bd      	mov	sp, r7
 800ed4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed52:	4770      	bx	lr
 800ed54:	e000e100 	.word	0xe000e100
 800ed58:	e000ed00 	.word	0xe000ed00

0800ed5c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800ed5c:	b580      	push	{r7, lr}
 800ed5e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800ed60:	4b05      	ldr	r3, [pc, #20]	; (800ed78 <SysTick_Handler+0x1c>)
 800ed62:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800ed64:	f002 f986 	bl	8011074 <xTaskGetSchedulerState>
 800ed68:	4603      	mov	r3, r0
 800ed6a:	2b01      	cmp	r3, #1
 800ed6c:	d001      	beq.n	800ed72 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800ed6e:	f003 f973 	bl	8012058 <xPortSysTickHandler>
  }
}
 800ed72:	bf00      	nop
 800ed74:	bd80      	pop	{r7, pc}
 800ed76:	bf00      	nop
 800ed78:	e000e010 	.word	0xe000e010

0800ed7c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800ed7c:	b580      	push	{r7, lr}
 800ed7e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800ed80:	2100      	movs	r1, #0
 800ed82:	f06f 0004 	mvn.w	r0, #4
 800ed86:	f7ff ffbf 	bl	800ed08 <__NVIC_SetPriority>
#endif
}
 800ed8a:	bf00      	nop
 800ed8c:	bd80      	pop	{r7, pc}
	...

0800ed90 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800ed90:	b480      	push	{r7}
 800ed92:	b083      	sub	sp, #12
 800ed94:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ed96:	f3ef 8305 	mrs	r3, IPSR
 800ed9a:	603b      	str	r3, [r7, #0]
  return(result);
 800ed9c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ed9e:	2b00      	cmp	r3, #0
 800eda0:	d003      	beq.n	800edaa <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800eda2:	f06f 0305 	mvn.w	r3, #5
 800eda6:	607b      	str	r3, [r7, #4]
 800eda8:	e00c      	b.n	800edc4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800edaa:	4b0a      	ldr	r3, [pc, #40]	; (800edd4 <osKernelInitialize+0x44>)
 800edac:	681b      	ldr	r3, [r3, #0]
 800edae:	2b00      	cmp	r3, #0
 800edb0:	d105      	bne.n	800edbe <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800edb2:	4b08      	ldr	r3, [pc, #32]	; (800edd4 <osKernelInitialize+0x44>)
 800edb4:	2201      	movs	r2, #1
 800edb6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800edb8:	2300      	movs	r3, #0
 800edba:	607b      	str	r3, [r7, #4]
 800edbc:	e002      	b.n	800edc4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800edbe:	f04f 33ff 	mov.w	r3, #4294967295
 800edc2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800edc4:	687b      	ldr	r3, [r7, #4]
}
 800edc6:	4618      	mov	r0, r3
 800edc8:	370c      	adds	r7, #12
 800edca:	46bd      	mov	sp, r7
 800edcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edd0:	4770      	bx	lr
 800edd2:	bf00      	nop
 800edd4:	20001600 	.word	0x20001600

0800edd8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800edd8:	b580      	push	{r7, lr}
 800edda:	b082      	sub	sp, #8
 800eddc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800edde:	f3ef 8305 	mrs	r3, IPSR
 800ede2:	603b      	str	r3, [r7, #0]
  return(result);
 800ede4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ede6:	2b00      	cmp	r3, #0
 800ede8:	d003      	beq.n	800edf2 <osKernelStart+0x1a>
    stat = osErrorISR;
 800edea:	f06f 0305 	mvn.w	r3, #5
 800edee:	607b      	str	r3, [r7, #4]
 800edf0:	e010      	b.n	800ee14 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800edf2:	4b0b      	ldr	r3, [pc, #44]	; (800ee20 <osKernelStart+0x48>)
 800edf4:	681b      	ldr	r3, [r3, #0]
 800edf6:	2b01      	cmp	r3, #1
 800edf8:	d109      	bne.n	800ee0e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800edfa:	f7ff ffbf 	bl	800ed7c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800edfe:	4b08      	ldr	r3, [pc, #32]	; (800ee20 <osKernelStart+0x48>)
 800ee00:	2202      	movs	r2, #2
 800ee02:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800ee04:	f001 fcbc 	bl	8010780 <vTaskStartScheduler>
      stat = osOK;
 800ee08:	2300      	movs	r3, #0
 800ee0a:	607b      	str	r3, [r7, #4]
 800ee0c:	e002      	b.n	800ee14 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800ee0e:	f04f 33ff 	mov.w	r3, #4294967295
 800ee12:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800ee14:	687b      	ldr	r3, [r7, #4]
}
 800ee16:	4618      	mov	r0, r3
 800ee18:	3708      	adds	r7, #8
 800ee1a:	46bd      	mov	sp, r7
 800ee1c:	bd80      	pop	{r7, pc}
 800ee1e:	bf00      	nop
 800ee20:	20001600 	.word	0x20001600

0800ee24 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800ee24:	b580      	push	{r7, lr}
 800ee26:	b08e      	sub	sp, #56	; 0x38
 800ee28:	af04      	add	r7, sp, #16
 800ee2a:	60f8      	str	r0, [r7, #12]
 800ee2c:	60b9      	str	r1, [r7, #8]
 800ee2e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800ee30:	2300      	movs	r3, #0
 800ee32:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ee34:	f3ef 8305 	mrs	r3, IPSR
 800ee38:	617b      	str	r3, [r7, #20]
  return(result);
 800ee3a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800ee3c:	2b00      	cmp	r3, #0
 800ee3e:	d17e      	bne.n	800ef3e <osThreadNew+0x11a>
 800ee40:	68fb      	ldr	r3, [r7, #12]
 800ee42:	2b00      	cmp	r3, #0
 800ee44:	d07b      	beq.n	800ef3e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800ee46:	2380      	movs	r3, #128	; 0x80
 800ee48:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800ee4a:	2318      	movs	r3, #24
 800ee4c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800ee4e:	2300      	movs	r3, #0
 800ee50:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800ee52:	f04f 33ff 	mov.w	r3, #4294967295
 800ee56:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800ee58:	687b      	ldr	r3, [r7, #4]
 800ee5a:	2b00      	cmp	r3, #0
 800ee5c:	d045      	beq.n	800eeea <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800ee5e:	687b      	ldr	r3, [r7, #4]
 800ee60:	681b      	ldr	r3, [r3, #0]
 800ee62:	2b00      	cmp	r3, #0
 800ee64:	d002      	beq.n	800ee6c <osThreadNew+0x48>
        name = attr->name;
 800ee66:	687b      	ldr	r3, [r7, #4]
 800ee68:	681b      	ldr	r3, [r3, #0]
 800ee6a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800ee6c:	687b      	ldr	r3, [r7, #4]
 800ee6e:	699b      	ldr	r3, [r3, #24]
 800ee70:	2b00      	cmp	r3, #0
 800ee72:	d002      	beq.n	800ee7a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800ee74:	687b      	ldr	r3, [r7, #4]
 800ee76:	699b      	ldr	r3, [r3, #24]
 800ee78:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800ee7a:	69fb      	ldr	r3, [r7, #28]
 800ee7c:	2b00      	cmp	r3, #0
 800ee7e:	d008      	beq.n	800ee92 <osThreadNew+0x6e>
 800ee80:	69fb      	ldr	r3, [r7, #28]
 800ee82:	2b38      	cmp	r3, #56	; 0x38
 800ee84:	d805      	bhi.n	800ee92 <osThreadNew+0x6e>
 800ee86:	687b      	ldr	r3, [r7, #4]
 800ee88:	685b      	ldr	r3, [r3, #4]
 800ee8a:	f003 0301 	and.w	r3, r3, #1
 800ee8e:	2b00      	cmp	r3, #0
 800ee90:	d001      	beq.n	800ee96 <osThreadNew+0x72>
        return (NULL);
 800ee92:	2300      	movs	r3, #0
 800ee94:	e054      	b.n	800ef40 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800ee96:	687b      	ldr	r3, [r7, #4]
 800ee98:	695b      	ldr	r3, [r3, #20]
 800ee9a:	2b00      	cmp	r3, #0
 800ee9c:	d003      	beq.n	800eea6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800ee9e:	687b      	ldr	r3, [r7, #4]
 800eea0:	695b      	ldr	r3, [r3, #20]
 800eea2:	089b      	lsrs	r3, r3, #2
 800eea4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800eea6:	687b      	ldr	r3, [r7, #4]
 800eea8:	689b      	ldr	r3, [r3, #8]
 800eeaa:	2b00      	cmp	r3, #0
 800eeac:	d00e      	beq.n	800eecc <osThreadNew+0xa8>
 800eeae:	687b      	ldr	r3, [r7, #4]
 800eeb0:	68db      	ldr	r3, [r3, #12]
 800eeb2:	2bbf      	cmp	r3, #191	; 0xbf
 800eeb4:	d90a      	bls.n	800eecc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800eeb6:	687b      	ldr	r3, [r7, #4]
 800eeb8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800eeba:	2b00      	cmp	r3, #0
 800eebc:	d006      	beq.n	800eecc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800eebe:	687b      	ldr	r3, [r7, #4]
 800eec0:	695b      	ldr	r3, [r3, #20]
 800eec2:	2b00      	cmp	r3, #0
 800eec4:	d002      	beq.n	800eecc <osThreadNew+0xa8>
        mem = 1;
 800eec6:	2301      	movs	r3, #1
 800eec8:	61bb      	str	r3, [r7, #24]
 800eeca:	e010      	b.n	800eeee <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800eecc:	687b      	ldr	r3, [r7, #4]
 800eece:	689b      	ldr	r3, [r3, #8]
 800eed0:	2b00      	cmp	r3, #0
 800eed2:	d10c      	bne.n	800eeee <osThreadNew+0xca>
 800eed4:	687b      	ldr	r3, [r7, #4]
 800eed6:	68db      	ldr	r3, [r3, #12]
 800eed8:	2b00      	cmp	r3, #0
 800eeda:	d108      	bne.n	800eeee <osThreadNew+0xca>
 800eedc:	687b      	ldr	r3, [r7, #4]
 800eede:	691b      	ldr	r3, [r3, #16]
 800eee0:	2b00      	cmp	r3, #0
 800eee2:	d104      	bne.n	800eeee <osThreadNew+0xca>
          mem = 0;
 800eee4:	2300      	movs	r3, #0
 800eee6:	61bb      	str	r3, [r7, #24]
 800eee8:	e001      	b.n	800eeee <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800eeea:	2300      	movs	r3, #0
 800eeec:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800eeee:	69bb      	ldr	r3, [r7, #24]
 800eef0:	2b01      	cmp	r3, #1
 800eef2:	d110      	bne.n	800ef16 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800eef4:	687b      	ldr	r3, [r7, #4]
 800eef6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800eef8:	687a      	ldr	r2, [r7, #4]
 800eefa:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800eefc:	9202      	str	r2, [sp, #8]
 800eefe:	9301      	str	r3, [sp, #4]
 800ef00:	69fb      	ldr	r3, [r7, #28]
 800ef02:	9300      	str	r3, [sp, #0]
 800ef04:	68bb      	ldr	r3, [r7, #8]
 800ef06:	6a3a      	ldr	r2, [r7, #32]
 800ef08:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ef0a:	68f8      	ldr	r0, [r7, #12]
 800ef0c:	f001 f970 	bl	80101f0 <xTaskCreateStatic>
 800ef10:	4603      	mov	r3, r0
 800ef12:	613b      	str	r3, [r7, #16]
 800ef14:	e013      	b.n	800ef3e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800ef16:	69bb      	ldr	r3, [r7, #24]
 800ef18:	2b00      	cmp	r3, #0
 800ef1a:	d110      	bne.n	800ef3e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800ef1c:	6a3b      	ldr	r3, [r7, #32]
 800ef1e:	b29a      	uxth	r2, r3
 800ef20:	f107 0310 	add.w	r3, r7, #16
 800ef24:	9301      	str	r3, [sp, #4]
 800ef26:	69fb      	ldr	r3, [r7, #28]
 800ef28:	9300      	str	r3, [sp, #0]
 800ef2a:	68bb      	ldr	r3, [r7, #8]
 800ef2c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ef2e:	68f8      	ldr	r0, [r7, #12]
 800ef30:	f001 f9bb 	bl	80102aa <xTaskCreate>
 800ef34:	4603      	mov	r3, r0
 800ef36:	2b01      	cmp	r3, #1
 800ef38:	d001      	beq.n	800ef3e <osThreadNew+0x11a>
            hTask = NULL;
 800ef3a:	2300      	movs	r3, #0
 800ef3c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800ef3e:	693b      	ldr	r3, [r7, #16]
}
 800ef40:	4618      	mov	r0, r3
 800ef42:	3728      	adds	r7, #40	; 0x28
 800ef44:	46bd      	mov	sp, r7
 800ef46:	bd80      	pop	{r7, pc}

0800ef48 <osThreadTerminate>:
  vTaskDelete (NULL);
#endif
  for (;;);
}

osStatus_t osThreadTerminate (osThreadId_t thread_id) {
 800ef48:	b580      	push	{r7, lr}
 800ef4a:	b086      	sub	sp, #24
 800ef4c:	af00      	add	r7, sp, #0
 800ef4e:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 800ef50:	687b      	ldr	r3, [r7, #4]
 800ef52:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ef54:	f3ef 8305 	mrs	r3, IPSR
 800ef58:	60bb      	str	r3, [r7, #8]
  return(result);
 800ef5a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;
#ifndef USE_FreeRTOS_HEAP_1
  eTaskState tstate;

  if (IS_IRQ()) {
 800ef5c:	2b00      	cmp	r3, #0
 800ef5e:	d003      	beq.n	800ef68 <osThreadTerminate+0x20>
    stat = osErrorISR;
 800ef60:	f06f 0305 	mvn.w	r3, #5
 800ef64:	617b      	str	r3, [r7, #20]
 800ef66:	e017      	b.n	800ef98 <osThreadTerminate+0x50>
  }
  else if (hTask == NULL) {
 800ef68:	693b      	ldr	r3, [r7, #16]
 800ef6a:	2b00      	cmp	r3, #0
 800ef6c:	d103      	bne.n	800ef76 <osThreadTerminate+0x2e>
    stat = osErrorParameter;
 800ef6e:	f06f 0303 	mvn.w	r3, #3
 800ef72:	617b      	str	r3, [r7, #20]
 800ef74:	e010      	b.n	800ef98 <osThreadTerminate+0x50>
  }
  else {
    tstate = eTaskGetState (hTask);
 800ef76:	6938      	ldr	r0, [r7, #16]
 800ef78:	f001 fb9c 	bl	80106b4 <eTaskGetState>
 800ef7c:	4603      	mov	r3, r0
 800ef7e:	73fb      	strb	r3, [r7, #15]

    if (tstate != eDeleted) {
 800ef80:	7bfb      	ldrb	r3, [r7, #15]
 800ef82:	2b04      	cmp	r3, #4
 800ef84:	d005      	beq.n	800ef92 <osThreadTerminate+0x4a>
      stat = osOK;
 800ef86:	2300      	movs	r3, #0
 800ef88:	617b      	str	r3, [r7, #20]
      vTaskDelete (hTask);
 800ef8a:	6938      	ldr	r0, [r7, #16]
 800ef8c:	f001 faec 	bl	8010568 <vTaskDelete>
 800ef90:	e002      	b.n	800ef98 <osThreadTerminate+0x50>
    } else {
      stat = osErrorResource;
 800ef92:	f06f 0302 	mvn.w	r3, #2
 800ef96:	617b      	str	r3, [r7, #20]
  }
#else
  stat = osError;
#endif

  return (stat);
 800ef98:	697b      	ldr	r3, [r7, #20]
}
 800ef9a:	4618      	mov	r0, r3
 800ef9c:	3718      	adds	r7, #24
 800ef9e:	46bd      	mov	sp, r7
 800efa0:	bd80      	pop	{r7, pc}
	...

0800efa4 <osThreadFlagsSet>:
  return (count);
}
#endif /* (configUSE_OS2_THREAD_ENUMERATE == 1) */

#if (configUSE_OS2_THREAD_FLAGS == 1)
uint32_t osThreadFlagsSet (osThreadId_t thread_id, uint32_t flags) {
 800efa4:	b580      	push	{r7, lr}
 800efa6:	b088      	sub	sp, #32
 800efa8:	af02      	add	r7, sp, #8
 800efaa:	6078      	str	r0, [r7, #4]
 800efac:	6039      	str	r1, [r7, #0]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 800efae:	687b      	ldr	r3, [r7, #4]
 800efb0:	617b      	str	r3, [r7, #20]
  uint32_t rflags;
  BaseType_t yield;

  if ((hTask == NULL) || ((flags & THREAD_FLAGS_INVALID_BITS) != 0U)) {
 800efb2:	697b      	ldr	r3, [r7, #20]
 800efb4:	2b00      	cmp	r3, #0
 800efb6:	d002      	beq.n	800efbe <osThreadFlagsSet+0x1a>
 800efb8:	683b      	ldr	r3, [r7, #0]
 800efba:	2b00      	cmp	r3, #0
 800efbc:	da03      	bge.n	800efc6 <osThreadFlagsSet+0x22>
    rflags = (uint32_t)osErrorParameter;
 800efbe:	f06f 0303 	mvn.w	r3, #3
 800efc2:	60fb      	str	r3, [r7, #12]
 800efc4:	e035      	b.n	800f032 <osThreadFlagsSet+0x8e>
  }
  else {
    rflags = (uint32_t)osError;
 800efc6:	f04f 33ff 	mov.w	r3, #4294967295
 800efca:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800efcc:	f3ef 8305 	mrs	r3, IPSR
 800efd0:	613b      	str	r3, [r7, #16]
  return(result);
 800efd2:	693b      	ldr	r3, [r7, #16]

    if (IS_IRQ()) {
 800efd4:	2b00      	cmp	r3, #0
 800efd6:	d01f      	beq.n	800f018 <osThreadFlagsSet+0x74>
      yield = pdFALSE;
 800efd8:	2300      	movs	r3, #0
 800efda:	60bb      	str	r3, [r7, #8]

      (void)xTaskNotifyFromISR (hTask, flags, eSetBits, &yield);
 800efdc:	f107 0308 	add.w	r3, r7, #8
 800efe0:	9300      	str	r3, [sp, #0]
 800efe2:	2300      	movs	r3, #0
 800efe4:	2201      	movs	r2, #1
 800efe6:	6839      	ldr	r1, [r7, #0]
 800efe8:	6978      	ldr	r0, [r7, #20]
 800efea:	f002 f9ed 	bl	80113c8 <xTaskGenericNotifyFromISR>
      (void)xTaskNotifyAndQueryFromISR (hTask, 0, eNoAction, &rflags, NULL);
 800efee:	f107 030c 	add.w	r3, r7, #12
 800eff2:	2200      	movs	r2, #0
 800eff4:	9200      	str	r2, [sp, #0]
 800eff6:	2200      	movs	r2, #0
 800eff8:	2100      	movs	r1, #0
 800effa:	6978      	ldr	r0, [r7, #20]
 800effc:	f002 f9e4 	bl	80113c8 <xTaskGenericNotifyFromISR>

      portYIELD_FROM_ISR (yield);
 800f000:	68bb      	ldr	r3, [r7, #8]
 800f002:	2b00      	cmp	r3, #0
 800f004:	d015      	beq.n	800f032 <osThreadFlagsSet+0x8e>
 800f006:	4b0d      	ldr	r3, [pc, #52]	; (800f03c <osThreadFlagsSet+0x98>)
 800f008:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f00c:	601a      	str	r2, [r3, #0]
 800f00e:	f3bf 8f4f 	dsb	sy
 800f012:	f3bf 8f6f 	isb	sy
 800f016:	e00c      	b.n	800f032 <osThreadFlagsSet+0x8e>
    }
    else {
      (void)xTaskNotify (hTask, flags, eSetBits);
 800f018:	2300      	movs	r3, #0
 800f01a:	2201      	movs	r2, #1
 800f01c:	6839      	ldr	r1, [r7, #0]
 800f01e:	6978      	ldr	r0, [r7, #20]
 800f020:	f002 f914 	bl	801124c <xTaskGenericNotify>
      (void)xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags);
 800f024:	f107 030c 	add.w	r3, r7, #12
 800f028:	2200      	movs	r2, #0
 800f02a:	2100      	movs	r1, #0
 800f02c:	6978      	ldr	r0, [r7, #20]
 800f02e:	f002 f90d 	bl	801124c <xTaskGenericNotify>
    }
  }
  /* Return flags after setting */
  return (rflags);
 800f032:	68fb      	ldr	r3, [r7, #12]
}
 800f034:	4618      	mov	r0, r3
 800f036:	3718      	adds	r7, #24
 800f038:	46bd      	mov	sp, r7
 800f03a:	bd80      	pop	{r7, pc}
 800f03c:	e000ed04 	.word	0xe000ed04

0800f040 <osThreadFlagsWait>:
  }

  return (rflags);
}

uint32_t osThreadFlagsWait (uint32_t flags, uint32_t options, uint32_t timeout) {
 800f040:	b580      	push	{r7, lr}
 800f042:	b08c      	sub	sp, #48	; 0x30
 800f044:	af00      	add	r7, sp, #0
 800f046:	60f8      	str	r0, [r7, #12]
 800f048:	60b9      	str	r1, [r7, #8]
 800f04a:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f04c:	f3ef 8305 	mrs	r3, IPSR
 800f050:	617b      	str	r3, [r7, #20]
  return(result);
 800f052:	697b      	ldr	r3, [r7, #20]
  uint32_t rflags, nval;
  uint32_t clear;
  TickType_t t0, td, tout;
  BaseType_t rval;

  if (IS_IRQ()) {
 800f054:	2b00      	cmp	r3, #0
 800f056:	d003      	beq.n	800f060 <osThreadFlagsWait+0x20>
    rflags = (uint32_t)osErrorISR;
 800f058:	f06f 0305 	mvn.w	r3, #5
 800f05c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f05e:	e06b      	b.n	800f138 <osThreadFlagsWait+0xf8>
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 800f060:	68fb      	ldr	r3, [r7, #12]
 800f062:	2b00      	cmp	r3, #0
 800f064:	da03      	bge.n	800f06e <osThreadFlagsWait+0x2e>
    rflags = (uint32_t)osErrorParameter;
 800f066:	f06f 0303 	mvn.w	r3, #3
 800f06a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f06c:	e064      	b.n	800f138 <osThreadFlagsWait+0xf8>
  }
  else {
    if ((options & osFlagsNoClear) == osFlagsNoClear) {
 800f06e:	68bb      	ldr	r3, [r7, #8]
 800f070:	f003 0302 	and.w	r3, r3, #2
 800f074:	2b00      	cmp	r3, #0
 800f076:	d002      	beq.n	800f07e <osThreadFlagsWait+0x3e>
      clear = 0U;
 800f078:	2300      	movs	r3, #0
 800f07a:	62bb      	str	r3, [r7, #40]	; 0x28
 800f07c:	e001      	b.n	800f082 <osThreadFlagsWait+0x42>
    } else {
      clear = flags;
 800f07e:	68fb      	ldr	r3, [r7, #12]
 800f080:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    rflags = 0U;
 800f082:	2300      	movs	r3, #0
 800f084:	62fb      	str	r3, [r7, #44]	; 0x2c
    tout   = timeout;
 800f086:	687b      	ldr	r3, [r7, #4]
 800f088:	627b      	str	r3, [r7, #36]	; 0x24

    t0 = xTaskGetTickCount();
 800f08a:	f001 fc97 	bl	80109bc <xTaskGetTickCount>
 800f08e:	6238      	str	r0, [r7, #32]
    do {
      rval = xTaskNotifyWait (0, clear, &nval, tout);
 800f090:	f107 0210 	add.w	r2, r7, #16
 800f094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f096:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f098:	2000      	movs	r0, #0
 800f09a:	f002 f877 	bl	801118c <xTaskNotifyWait>
 800f09e:	61f8      	str	r0, [r7, #28]

      if (rval == pdPASS) {
 800f0a0:	69fb      	ldr	r3, [r7, #28]
 800f0a2:	2b01      	cmp	r3, #1
 800f0a4:	d137      	bne.n	800f116 <osThreadFlagsWait+0xd6>
        rflags &= flags;
 800f0a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f0a8:	68fb      	ldr	r3, [r7, #12]
 800f0aa:	4013      	ands	r3, r2
 800f0ac:	62fb      	str	r3, [r7, #44]	; 0x2c
        rflags |= nval;
 800f0ae:	693b      	ldr	r3, [r7, #16]
 800f0b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f0b2:	4313      	orrs	r3, r2
 800f0b4:	62fb      	str	r3, [r7, #44]	; 0x2c

        if ((options & osFlagsWaitAll) == osFlagsWaitAll) {
 800f0b6:	68bb      	ldr	r3, [r7, #8]
 800f0b8:	f003 0301 	and.w	r3, r3, #1
 800f0bc:	2b00      	cmp	r3, #0
 800f0be:	d00c      	beq.n	800f0da <osThreadFlagsWait+0x9a>
          if ((flags & rflags) == flags) {
 800f0c0:	68fa      	ldr	r2, [r7, #12]
 800f0c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0c4:	4013      	ands	r3, r2
 800f0c6:	68fa      	ldr	r2, [r7, #12]
 800f0c8:	429a      	cmp	r2, r3
 800f0ca:	d032      	beq.n	800f132 <osThreadFlagsWait+0xf2>
            break;
          } else {
            if (timeout == 0U) {
 800f0cc:	687b      	ldr	r3, [r7, #4]
 800f0ce:	2b00      	cmp	r3, #0
 800f0d0:	d10f      	bne.n	800f0f2 <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 800f0d2:	f06f 0302 	mvn.w	r3, #2
 800f0d6:	62fb      	str	r3, [r7, #44]	; 0x2c
              break;
 800f0d8:	e02e      	b.n	800f138 <osThreadFlagsWait+0xf8>
            }
          }
        }
        else {
          if ((flags & rflags) != 0) {
 800f0da:	68fa      	ldr	r2, [r7, #12]
 800f0dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0de:	4013      	ands	r3, r2
 800f0e0:	2b00      	cmp	r3, #0
 800f0e2:	d128      	bne.n	800f136 <osThreadFlagsWait+0xf6>
            break;
          } else {
            if (timeout == 0U) {
 800f0e4:	687b      	ldr	r3, [r7, #4]
 800f0e6:	2b00      	cmp	r3, #0
 800f0e8:	d103      	bne.n	800f0f2 <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 800f0ea:	f06f 0302 	mvn.w	r3, #2
 800f0ee:	62fb      	str	r3, [r7, #44]	; 0x2c
              break;
 800f0f0:	e022      	b.n	800f138 <osThreadFlagsWait+0xf8>
            }
          }
        }

        /* Update timeout */
        td = xTaskGetTickCount() - t0;
 800f0f2:	f001 fc63 	bl	80109bc <xTaskGetTickCount>
 800f0f6:	4602      	mov	r2, r0
 800f0f8:	6a3b      	ldr	r3, [r7, #32]
 800f0fa:	1ad3      	subs	r3, r2, r3
 800f0fc:	61bb      	str	r3, [r7, #24]

        if (td > tout) {
 800f0fe:	69ba      	ldr	r2, [r7, #24]
 800f100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f102:	429a      	cmp	r2, r3
 800f104:	d902      	bls.n	800f10c <osThreadFlagsWait+0xcc>
          tout  = 0;
 800f106:	2300      	movs	r3, #0
 800f108:	627b      	str	r3, [r7, #36]	; 0x24
 800f10a:	e00e      	b.n	800f12a <osThreadFlagsWait+0xea>
        } else {
          tout -= td;
 800f10c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f10e:	69bb      	ldr	r3, [r7, #24]
 800f110:	1ad3      	subs	r3, r2, r3
 800f112:	627b      	str	r3, [r7, #36]	; 0x24
 800f114:	e009      	b.n	800f12a <osThreadFlagsWait+0xea>
        }
      }
      else {
        if (timeout == 0) {
 800f116:	687b      	ldr	r3, [r7, #4]
 800f118:	2b00      	cmp	r3, #0
 800f11a:	d103      	bne.n	800f124 <osThreadFlagsWait+0xe4>
          rflags = (uint32_t)osErrorResource;
 800f11c:	f06f 0302 	mvn.w	r3, #2
 800f120:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f122:	e002      	b.n	800f12a <osThreadFlagsWait+0xea>
        } else {
          rflags = (uint32_t)osErrorTimeout;
 800f124:	f06f 0301 	mvn.w	r3, #1
 800f128:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
      }
    }
    while (rval != pdFAIL);
 800f12a:	69fb      	ldr	r3, [r7, #28]
 800f12c:	2b00      	cmp	r3, #0
 800f12e:	d1af      	bne.n	800f090 <osThreadFlagsWait+0x50>
 800f130:	e002      	b.n	800f138 <osThreadFlagsWait+0xf8>
            break;
 800f132:	bf00      	nop
 800f134:	e000      	b.n	800f138 <osThreadFlagsWait+0xf8>
            break;
 800f136:	bf00      	nop
  }

  /* Return flags before clearing */
  return (rflags);
 800f138:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800f13a:	4618      	mov	r0, r3
 800f13c:	3730      	adds	r7, #48	; 0x30
 800f13e:	46bd      	mov	sp, r7
 800f140:	bd80      	pop	{r7, pc}

0800f142 <osDelay>:
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800f142:	b580      	push	{r7, lr}
 800f144:	b084      	sub	sp, #16
 800f146:	af00      	add	r7, sp, #0
 800f148:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f14a:	f3ef 8305 	mrs	r3, IPSR
 800f14e:	60bb      	str	r3, [r7, #8]
  return(result);
 800f150:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800f152:	2b00      	cmp	r3, #0
 800f154:	d003      	beq.n	800f15e <osDelay+0x1c>
    stat = osErrorISR;
 800f156:	f06f 0305 	mvn.w	r3, #5
 800f15a:	60fb      	str	r3, [r7, #12]
 800f15c:	e007      	b.n	800f16e <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800f15e:	2300      	movs	r3, #0
 800f160:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800f162:	687b      	ldr	r3, [r7, #4]
 800f164:	2b00      	cmp	r3, #0
 800f166:	d002      	beq.n	800f16e <osDelay+0x2c>
      vTaskDelay(ticks);
 800f168:	6878      	ldr	r0, [r7, #4]
 800f16a:	f001 fa6f 	bl	801064c <vTaskDelay>
    }
  }

  return (stat);
 800f16e:	68fb      	ldr	r3, [r7, #12]
}
 800f170:	4618      	mov	r0, r3
 800f172:	3710      	adds	r7, #16
 800f174:	46bd      	mov	sp, r7
 800f176:	bd80      	pop	{r7, pc}

0800f178 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800f178:	b580      	push	{r7, lr}
 800f17a:	b08a      	sub	sp, #40	; 0x28
 800f17c:	af02      	add	r7, sp, #8
 800f17e:	60f8      	str	r0, [r7, #12]
 800f180:	60b9      	str	r1, [r7, #8]
 800f182:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800f184:	2300      	movs	r3, #0
 800f186:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f188:	f3ef 8305 	mrs	r3, IPSR
 800f18c:	613b      	str	r3, [r7, #16]
  return(result);
 800f18e:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800f190:	2b00      	cmp	r3, #0
 800f192:	d15f      	bne.n	800f254 <osMessageQueueNew+0xdc>
 800f194:	68fb      	ldr	r3, [r7, #12]
 800f196:	2b00      	cmp	r3, #0
 800f198:	d05c      	beq.n	800f254 <osMessageQueueNew+0xdc>
 800f19a:	68bb      	ldr	r3, [r7, #8]
 800f19c:	2b00      	cmp	r3, #0
 800f19e:	d059      	beq.n	800f254 <osMessageQueueNew+0xdc>
    mem = -1;
 800f1a0:	f04f 33ff 	mov.w	r3, #4294967295
 800f1a4:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800f1a6:	687b      	ldr	r3, [r7, #4]
 800f1a8:	2b00      	cmp	r3, #0
 800f1aa:	d029      	beq.n	800f200 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800f1ac:	687b      	ldr	r3, [r7, #4]
 800f1ae:	689b      	ldr	r3, [r3, #8]
 800f1b0:	2b00      	cmp	r3, #0
 800f1b2:	d012      	beq.n	800f1da <osMessageQueueNew+0x62>
 800f1b4:	687b      	ldr	r3, [r7, #4]
 800f1b6:	68db      	ldr	r3, [r3, #12]
 800f1b8:	2b4f      	cmp	r3, #79	; 0x4f
 800f1ba:	d90e      	bls.n	800f1da <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800f1bc:	687b      	ldr	r3, [r7, #4]
 800f1be:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800f1c0:	2b00      	cmp	r3, #0
 800f1c2:	d00a      	beq.n	800f1da <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800f1c4:	687b      	ldr	r3, [r7, #4]
 800f1c6:	695a      	ldr	r2, [r3, #20]
 800f1c8:	68fb      	ldr	r3, [r7, #12]
 800f1ca:	68b9      	ldr	r1, [r7, #8]
 800f1cc:	fb01 f303 	mul.w	r3, r1, r3
 800f1d0:	429a      	cmp	r2, r3
 800f1d2:	d302      	bcc.n	800f1da <osMessageQueueNew+0x62>
        mem = 1;
 800f1d4:	2301      	movs	r3, #1
 800f1d6:	61bb      	str	r3, [r7, #24]
 800f1d8:	e014      	b.n	800f204 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800f1da:	687b      	ldr	r3, [r7, #4]
 800f1dc:	689b      	ldr	r3, [r3, #8]
 800f1de:	2b00      	cmp	r3, #0
 800f1e0:	d110      	bne.n	800f204 <osMessageQueueNew+0x8c>
 800f1e2:	687b      	ldr	r3, [r7, #4]
 800f1e4:	68db      	ldr	r3, [r3, #12]
 800f1e6:	2b00      	cmp	r3, #0
 800f1e8:	d10c      	bne.n	800f204 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800f1ea:	687b      	ldr	r3, [r7, #4]
 800f1ec:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800f1ee:	2b00      	cmp	r3, #0
 800f1f0:	d108      	bne.n	800f204 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800f1f2:	687b      	ldr	r3, [r7, #4]
 800f1f4:	695b      	ldr	r3, [r3, #20]
 800f1f6:	2b00      	cmp	r3, #0
 800f1f8:	d104      	bne.n	800f204 <osMessageQueueNew+0x8c>
          mem = 0;
 800f1fa:	2300      	movs	r3, #0
 800f1fc:	61bb      	str	r3, [r7, #24]
 800f1fe:	e001      	b.n	800f204 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800f200:	2300      	movs	r3, #0
 800f202:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800f204:	69bb      	ldr	r3, [r7, #24]
 800f206:	2b01      	cmp	r3, #1
 800f208:	d10b      	bne.n	800f222 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800f20a:	687b      	ldr	r3, [r7, #4]
 800f20c:	691a      	ldr	r2, [r3, #16]
 800f20e:	687b      	ldr	r3, [r7, #4]
 800f210:	689b      	ldr	r3, [r3, #8]
 800f212:	2100      	movs	r1, #0
 800f214:	9100      	str	r1, [sp, #0]
 800f216:	68b9      	ldr	r1, [r7, #8]
 800f218:	68f8      	ldr	r0, [r7, #12]
 800f21a:	f000 fa87 	bl	800f72c <xQueueGenericCreateStatic>
 800f21e:	61f8      	str	r0, [r7, #28]
 800f220:	e008      	b.n	800f234 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800f222:	69bb      	ldr	r3, [r7, #24]
 800f224:	2b00      	cmp	r3, #0
 800f226:	d105      	bne.n	800f234 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800f228:	2200      	movs	r2, #0
 800f22a:	68b9      	ldr	r1, [r7, #8]
 800f22c:	68f8      	ldr	r0, [r7, #12]
 800f22e:	f000 faf5 	bl	800f81c <xQueueGenericCreate>
 800f232:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800f234:	69fb      	ldr	r3, [r7, #28]
 800f236:	2b00      	cmp	r3, #0
 800f238:	d00c      	beq.n	800f254 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800f23a:	687b      	ldr	r3, [r7, #4]
 800f23c:	2b00      	cmp	r3, #0
 800f23e:	d003      	beq.n	800f248 <osMessageQueueNew+0xd0>
        name = attr->name;
 800f240:	687b      	ldr	r3, [r7, #4]
 800f242:	681b      	ldr	r3, [r3, #0]
 800f244:	617b      	str	r3, [r7, #20]
 800f246:	e001      	b.n	800f24c <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800f248:	2300      	movs	r3, #0
 800f24a:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800f24c:	6979      	ldr	r1, [r7, #20]
 800f24e:	69f8      	ldr	r0, [r7, #28]
 800f250:	f000 ff70 	bl	8010134 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800f254:	69fb      	ldr	r3, [r7, #28]
}
 800f256:	4618      	mov	r0, r3
 800f258:	3720      	adds	r7, #32
 800f25a:	46bd      	mov	sp, r7
 800f25c:	bd80      	pop	{r7, pc}
	...

0800f260 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800f260:	b580      	push	{r7, lr}
 800f262:	b088      	sub	sp, #32
 800f264:	af00      	add	r7, sp, #0
 800f266:	60f8      	str	r0, [r7, #12]
 800f268:	60b9      	str	r1, [r7, #8]
 800f26a:	603b      	str	r3, [r7, #0]
 800f26c:	4613      	mov	r3, r2
 800f26e:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800f270:	68fb      	ldr	r3, [r7, #12]
 800f272:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800f274:	2300      	movs	r3, #0
 800f276:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f278:	f3ef 8305 	mrs	r3, IPSR
 800f27c:	617b      	str	r3, [r7, #20]
  return(result);
 800f27e:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800f280:	2b00      	cmp	r3, #0
 800f282:	d028      	beq.n	800f2d6 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800f284:	69bb      	ldr	r3, [r7, #24]
 800f286:	2b00      	cmp	r3, #0
 800f288:	d005      	beq.n	800f296 <osMessageQueuePut+0x36>
 800f28a:	68bb      	ldr	r3, [r7, #8]
 800f28c:	2b00      	cmp	r3, #0
 800f28e:	d002      	beq.n	800f296 <osMessageQueuePut+0x36>
 800f290:	683b      	ldr	r3, [r7, #0]
 800f292:	2b00      	cmp	r3, #0
 800f294:	d003      	beq.n	800f29e <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800f296:	f06f 0303 	mvn.w	r3, #3
 800f29a:	61fb      	str	r3, [r7, #28]
 800f29c:	e038      	b.n	800f310 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800f29e:	2300      	movs	r3, #0
 800f2a0:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800f2a2:	f107 0210 	add.w	r2, r7, #16
 800f2a6:	2300      	movs	r3, #0
 800f2a8:	68b9      	ldr	r1, [r7, #8]
 800f2aa:	69b8      	ldr	r0, [r7, #24]
 800f2ac:	f000 fc12 	bl	800fad4 <xQueueGenericSendFromISR>
 800f2b0:	4603      	mov	r3, r0
 800f2b2:	2b01      	cmp	r3, #1
 800f2b4:	d003      	beq.n	800f2be <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800f2b6:	f06f 0302 	mvn.w	r3, #2
 800f2ba:	61fb      	str	r3, [r7, #28]
 800f2bc:	e028      	b.n	800f310 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800f2be:	693b      	ldr	r3, [r7, #16]
 800f2c0:	2b00      	cmp	r3, #0
 800f2c2:	d025      	beq.n	800f310 <osMessageQueuePut+0xb0>
 800f2c4:	4b15      	ldr	r3, [pc, #84]	; (800f31c <osMessageQueuePut+0xbc>)
 800f2c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f2ca:	601a      	str	r2, [r3, #0]
 800f2cc:	f3bf 8f4f 	dsb	sy
 800f2d0:	f3bf 8f6f 	isb	sy
 800f2d4:	e01c      	b.n	800f310 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800f2d6:	69bb      	ldr	r3, [r7, #24]
 800f2d8:	2b00      	cmp	r3, #0
 800f2da:	d002      	beq.n	800f2e2 <osMessageQueuePut+0x82>
 800f2dc:	68bb      	ldr	r3, [r7, #8]
 800f2de:	2b00      	cmp	r3, #0
 800f2e0:	d103      	bne.n	800f2ea <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800f2e2:	f06f 0303 	mvn.w	r3, #3
 800f2e6:	61fb      	str	r3, [r7, #28]
 800f2e8:	e012      	b.n	800f310 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800f2ea:	2300      	movs	r3, #0
 800f2ec:	683a      	ldr	r2, [r7, #0]
 800f2ee:	68b9      	ldr	r1, [r7, #8]
 800f2f0:	69b8      	ldr	r0, [r7, #24]
 800f2f2:	f000 faf1 	bl	800f8d8 <xQueueGenericSend>
 800f2f6:	4603      	mov	r3, r0
 800f2f8:	2b01      	cmp	r3, #1
 800f2fa:	d009      	beq.n	800f310 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800f2fc:	683b      	ldr	r3, [r7, #0]
 800f2fe:	2b00      	cmp	r3, #0
 800f300:	d003      	beq.n	800f30a <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800f302:	f06f 0301 	mvn.w	r3, #1
 800f306:	61fb      	str	r3, [r7, #28]
 800f308:	e002      	b.n	800f310 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800f30a:	f06f 0302 	mvn.w	r3, #2
 800f30e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800f310:	69fb      	ldr	r3, [r7, #28]
}
 800f312:	4618      	mov	r0, r3
 800f314:	3720      	adds	r7, #32
 800f316:	46bd      	mov	sp, r7
 800f318:	bd80      	pop	{r7, pc}
 800f31a:	bf00      	nop
 800f31c:	e000ed04 	.word	0xe000ed04

0800f320 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800f320:	b580      	push	{r7, lr}
 800f322:	b088      	sub	sp, #32
 800f324:	af00      	add	r7, sp, #0
 800f326:	60f8      	str	r0, [r7, #12]
 800f328:	60b9      	str	r1, [r7, #8]
 800f32a:	607a      	str	r2, [r7, #4]
 800f32c:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800f32e:	68fb      	ldr	r3, [r7, #12]
 800f330:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800f332:	2300      	movs	r3, #0
 800f334:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f336:	f3ef 8305 	mrs	r3, IPSR
 800f33a:	617b      	str	r3, [r7, #20]
  return(result);
 800f33c:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800f33e:	2b00      	cmp	r3, #0
 800f340:	d028      	beq.n	800f394 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800f342:	69bb      	ldr	r3, [r7, #24]
 800f344:	2b00      	cmp	r3, #0
 800f346:	d005      	beq.n	800f354 <osMessageQueueGet+0x34>
 800f348:	68bb      	ldr	r3, [r7, #8]
 800f34a:	2b00      	cmp	r3, #0
 800f34c:	d002      	beq.n	800f354 <osMessageQueueGet+0x34>
 800f34e:	683b      	ldr	r3, [r7, #0]
 800f350:	2b00      	cmp	r3, #0
 800f352:	d003      	beq.n	800f35c <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800f354:	f06f 0303 	mvn.w	r3, #3
 800f358:	61fb      	str	r3, [r7, #28]
 800f35a:	e037      	b.n	800f3cc <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800f35c:	2300      	movs	r3, #0
 800f35e:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800f360:	f107 0310 	add.w	r3, r7, #16
 800f364:	461a      	mov	r2, r3
 800f366:	68b9      	ldr	r1, [r7, #8]
 800f368:	69b8      	ldr	r0, [r7, #24]
 800f36a:	f000 fd2f 	bl	800fdcc <xQueueReceiveFromISR>
 800f36e:	4603      	mov	r3, r0
 800f370:	2b01      	cmp	r3, #1
 800f372:	d003      	beq.n	800f37c <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800f374:	f06f 0302 	mvn.w	r3, #2
 800f378:	61fb      	str	r3, [r7, #28]
 800f37a:	e027      	b.n	800f3cc <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800f37c:	693b      	ldr	r3, [r7, #16]
 800f37e:	2b00      	cmp	r3, #0
 800f380:	d024      	beq.n	800f3cc <osMessageQueueGet+0xac>
 800f382:	4b15      	ldr	r3, [pc, #84]	; (800f3d8 <osMessageQueueGet+0xb8>)
 800f384:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f388:	601a      	str	r2, [r3, #0]
 800f38a:	f3bf 8f4f 	dsb	sy
 800f38e:	f3bf 8f6f 	isb	sy
 800f392:	e01b      	b.n	800f3cc <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800f394:	69bb      	ldr	r3, [r7, #24]
 800f396:	2b00      	cmp	r3, #0
 800f398:	d002      	beq.n	800f3a0 <osMessageQueueGet+0x80>
 800f39a:	68bb      	ldr	r3, [r7, #8]
 800f39c:	2b00      	cmp	r3, #0
 800f39e:	d103      	bne.n	800f3a8 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800f3a0:	f06f 0303 	mvn.w	r3, #3
 800f3a4:	61fb      	str	r3, [r7, #28]
 800f3a6:	e011      	b.n	800f3cc <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800f3a8:	683a      	ldr	r2, [r7, #0]
 800f3aa:	68b9      	ldr	r1, [r7, #8]
 800f3ac:	69b8      	ldr	r0, [r7, #24]
 800f3ae:	f000 fc2d 	bl	800fc0c <xQueueReceive>
 800f3b2:	4603      	mov	r3, r0
 800f3b4:	2b01      	cmp	r3, #1
 800f3b6:	d009      	beq.n	800f3cc <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800f3b8:	683b      	ldr	r3, [r7, #0]
 800f3ba:	2b00      	cmp	r3, #0
 800f3bc:	d003      	beq.n	800f3c6 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800f3be:	f06f 0301 	mvn.w	r3, #1
 800f3c2:	61fb      	str	r3, [r7, #28]
 800f3c4:	e002      	b.n	800f3cc <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800f3c6:	f06f 0302 	mvn.w	r3, #2
 800f3ca:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800f3cc:	69fb      	ldr	r3, [r7, #28]
}
 800f3ce:	4618      	mov	r0, r3
 800f3d0:	3720      	adds	r7, #32
 800f3d2:	46bd      	mov	sp, r7
 800f3d4:	bd80      	pop	{r7, pc}
 800f3d6:	bf00      	nop
 800f3d8:	e000ed04 	.word	0xe000ed04

0800f3dc <osMessageQueueGetSpace>:
  }

  return ((uint32_t)count);
}

uint32_t osMessageQueueGetSpace (osMessageQueueId_t mq_id) {
 800f3dc:	b580      	push	{r7, lr}
 800f3de:	b08a      	sub	sp, #40	; 0x28
 800f3e0:	af00      	add	r7, sp, #0
 800f3e2:	6078      	str	r0, [r7, #4]
  StaticQueue_t *mq = (StaticQueue_t *)mq_id;
 800f3e4:	687b      	ldr	r3, [r7, #4]
 800f3e6:	623b      	str	r3, [r7, #32]
  uint32_t space;
  uint32_t isrm;

  if (mq == NULL) {
 800f3e8:	6a3b      	ldr	r3, [r7, #32]
 800f3ea:	2b00      	cmp	r3, #0
 800f3ec:	d102      	bne.n	800f3f4 <osMessageQueueGetSpace+0x18>
    space = 0U;
 800f3ee:	2300      	movs	r3, #0
 800f3f0:	627b      	str	r3, [r7, #36]	; 0x24
 800f3f2:	e023      	b.n	800f43c <osMessageQueueGetSpace+0x60>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f3f4:	f3ef 8305 	mrs	r3, IPSR
 800f3f8:	61bb      	str	r3, [r7, #24]
  return(result);
 800f3fa:	69bb      	ldr	r3, [r7, #24]
  }
  else if (IS_IRQ()) {
 800f3fc:	2b00      	cmp	r3, #0
 800f3fe:	d019      	beq.n	800f434 <osMessageQueueGetSpace+0x58>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800f400:	f3ef 8211 	mrs	r2, BASEPRI
 800f404:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f408:	f383 8811 	msr	BASEPRI, r3
 800f40c:	f3bf 8f6f 	isb	sy
 800f410:	f3bf 8f4f 	dsb	sy
 800f414:	613a      	str	r2, [r7, #16]
 800f416:	60fb      	str	r3, [r7, #12]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800f418:	693b      	ldr	r3, [r7, #16]
    isrm = taskENTER_CRITICAL_FROM_ISR();
 800f41a:	61fb      	str	r3, [r7, #28]

    /* space = pxQueue->uxLength - pxQueue->uxMessagesWaiting; */
    space = mq->uxDummy4[1] - mq->uxDummy4[0];
 800f41c:	6a3b      	ldr	r3, [r7, #32]
 800f41e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800f420:	6a3b      	ldr	r3, [r7, #32]
 800f422:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f424:	1ad3      	subs	r3, r2, r3
 800f426:	627b      	str	r3, [r7, #36]	; 0x24
 800f428:	69fb      	ldr	r3, [r7, #28]
 800f42a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800f42c:	697b      	ldr	r3, [r7, #20]
 800f42e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800f432:	e003      	b.n	800f43c <osMessageQueueGetSpace+0x60>

    taskEXIT_CRITICAL_FROM_ISR(isrm);
  }
  else {
    space = (uint32_t)uxQueueSpacesAvailable ((QueueHandle_t)mq);
 800f434:	6a38      	ldr	r0, [r7, #32]
 800f436:	f000 fd49 	bl	800fecc <uxQueueSpacesAvailable>
 800f43a:	6278      	str	r0, [r7, #36]	; 0x24
  }

  return (space);
 800f43c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800f43e:	4618      	mov	r0, r3
 800f440:	3728      	adds	r7, #40	; 0x28
 800f442:	46bd      	mov	sp, r7
 800f444:	bd80      	pop	{r7, pc}

0800f446 <osMessageQueueReset>:

osStatus_t osMessageQueueReset (osMessageQueueId_t mq_id) {
 800f446:	b580      	push	{r7, lr}
 800f448:	b086      	sub	sp, #24
 800f44a:	af00      	add	r7, sp, #0
 800f44c:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800f44e:	687b      	ldr	r3, [r7, #4]
 800f450:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f452:	f3ef 8305 	mrs	r3, IPSR
 800f456:	60fb      	str	r3, [r7, #12]
  return(result);
 800f458:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 800f45a:	2b00      	cmp	r3, #0
 800f45c:	d003      	beq.n	800f466 <osMessageQueueReset+0x20>
    stat = osErrorISR;
 800f45e:	f06f 0305 	mvn.w	r3, #5
 800f462:	617b      	str	r3, [r7, #20]
 800f464:	e00c      	b.n	800f480 <osMessageQueueReset+0x3a>
  }
  else if (hQueue == NULL) {
 800f466:	693b      	ldr	r3, [r7, #16]
 800f468:	2b00      	cmp	r3, #0
 800f46a:	d103      	bne.n	800f474 <osMessageQueueReset+0x2e>
    stat = osErrorParameter;
 800f46c:	f06f 0303 	mvn.w	r3, #3
 800f470:	617b      	str	r3, [r7, #20]
 800f472:	e005      	b.n	800f480 <osMessageQueueReset+0x3a>
  }
  else {
    stat = osOK;
 800f474:	2300      	movs	r3, #0
 800f476:	617b      	str	r3, [r7, #20]
    (void)xQueueReset (hQueue);
 800f478:	2100      	movs	r1, #0
 800f47a:	6938      	ldr	r0, [r7, #16]
 800f47c:	f000 f8ee 	bl	800f65c <xQueueGenericReset>
  }

  return (stat);
 800f480:	697b      	ldr	r3, [r7, #20]
}
 800f482:	4618      	mov	r0, r3
 800f484:	3718      	adds	r7, #24
 800f486:	46bd      	mov	sp, r7
 800f488:	bd80      	pop	{r7, pc}
	...

0800f48c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800f48c:	b480      	push	{r7}
 800f48e:	b085      	sub	sp, #20
 800f490:	af00      	add	r7, sp, #0
 800f492:	60f8      	str	r0, [r7, #12]
 800f494:	60b9      	str	r1, [r7, #8]
 800f496:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800f498:	68fb      	ldr	r3, [r7, #12]
 800f49a:	4a07      	ldr	r2, [pc, #28]	; (800f4b8 <vApplicationGetIdleTaskMemory+0x2c>)
 800f49c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800f49e:	68bb      	ldr	r3, [r7, #8]
 800f4a0:	4a06      	ldr	r2, [pc, #24]	; (800f4bc <vApplicationGetIdleTaskMemory+0x30>)
 800f4a2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800f4a4:	687b      	ldr	r3, [r7, #4]
 800f4a6:	2280      	movs	r2, #128	; 0x80
 800f4a8:	601a      	str	r2, [r3, #0]
}
 800f4aa:	bf00      	nop
 800f4ac:	3714      	adds	r7, #20
 800f4ae:	46bd      	mov	sp, r7
 800f4b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4b4:	4770      	bx	lr
 800f4b6:	bf00      	nop
 800f4b8:	20001604 	.word	0x20001604
 800f4bc:	200016c4 	.word	0x200016c4

0800f4c0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800f4c0:	b480      	push	{r7}
 800f4c2:	b085      	sub	sp, #20
 800f4c4:	af00      	add	r7, sp, #0
 800f4c6:	60f8      	str	r0, [r7, #12]
 800f4c8:	60b9      	str	r1, [r7, #8]
 800f4ca:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800f4cc:	68fb      	ldr	r3, [r7, #12]
 800f4ce:	4a07      	ldr	r2, [pc, #28]	; (800f4ec <vApplicationGetTimerTaskMemory+0x2c>)
 800f4d0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800f4d2:	68bb      	ldr	r3, [r7, #8]
 800f4d4:	4a06      	ldr	r2, [pc, #24]	; (800f4f0 <vApplicationGetTimerTaskMemory+0x30>)
 800f4d6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800f4d8:	687b      	ldr	r3, [r7, #4]
 800f4da:	f44f 7280 	mov.w	r2, #256	; 0x100
 800f4de:	601a      	str	r2, [r3, #0]
}
 800f4e0:	bf00      	nop
 800f4e2:	3714      	adds	r7, #20
 800f4e4:	46bd      	mov	sp, r7
 800f4e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4ea:	4770      	bx	lr
 800f4ec:	200018c4 	.word	0x200018c4
 800f4f0:	20001984 	.word	0x20001984

0800f4f4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800f4f4:	b480      	push	{r7}
 800f4f6:	b083      	sub	sp, #12
 800f4f8:	af00      	add	r7, sp, #0
 800f4fa:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f4fc:	687b      	ldr	r3, [r7, #4]
 800f4fe:	f103 0208 	add.w	r2, r3, #8
 800f502:	687b      	ldr	r3, [r7, #4]
 800f504:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800f506:	687b      	ldr	r3, [r7, #4]
 800f508:	f04f 32ff 	mov.w	r2, #4294967295
 800f50c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f50e:	687b      	ldr	r3, [r7, #4]
 800f510:	f103 0208 	add.w	r2, r3, #8
 800f514:	687b      	ldr	r3, [r7, #4]
 800f516:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f518:	687b      	ldr	r3, [r7, #4]
 800f51a:	f103 0208 	add.w	r2, r3, #8
 800f51e:	687b      	ldr	r3, [r7, #4]
 800f520:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800f522:	687b      	ldr	r3, [r7, #4]
 800f524:	2200      	movs	r2, #0
 800f526:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800f528:	bf00      	nop
 800f52a:	370c      	adds	r7, #12
 800f52c:	46bd      	mov	sp, r7
 800f52e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f532:	4770      	bx	lr

0800f534 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800f534:	b480      	push	{r7}
 800f536:	b083      	sub	sp, #12
 800f538:	af00      	add	r7, sp, #0
 800f53a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800f53c:	687b      	ldr	r3, [r7, #4]
 800f53e:	2200      	movs	r2, #0
 800f540:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800f542:	bf00      	nop
 800f544:	370c      	adds	r7, #12
 800f546:	46bd      	mov	sp, r7
 800f548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f54c:	4770      	bx	lr

0800f54e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800f54e:	b480      	push	{r7}
 800f550:	b085      	sub	sp, #20
 800f552:	af00      	add	r7, sp, #0
 800f554:	6078      	str	r0, [r7, #4]
 800f556:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800f558:	687b      	ldr	r3, [r7, #4]
 800f55a:	685b      	ldr	r3, [r3, #4]
 800f55c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800f55e:	683b      	ldr	r3, [r7, #0]
 800f560:	68fa      	ldr	r2, [r7, #12]
 800f562:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800f564:	68fb      	ldr	r3, [r7, #12]
 800f566:	689a      	ldr	r2, [r3, #8]
 800f568:	683b      	ldr	r3, [r7, #0]
 800f56a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800f56c:	68fb      	ldr	r3, [r7, #12]
 800f56e:	689b      	ldr	r3, [r3, #8]
 800f570:	683a      	ldr	r2, [r7, #0]
 800f572:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800f574:	68fb      	ldr	r3, [r7, #12]
 800f576:	683a      	ldr	r2, [r7, #0]
 800f578:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800f57a:	683b      	ldr	r3, [r7, #0]
 800f57c:	687a      	ldr	r2, [r7, #4]
 800f57e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800f580:	687b      	ldr	r3, [r7, #4]
 800f582:	681b      	ldr	r3, [r3, #0]
 800f584:	1c5a      	adds	r2, r3, #1
 800f586:	687b      	ldr	r3, [r7, #4]
 800f588:	601a      	str	r2, [r3, #0]
}
 800f58a:	bf00      	nop
 800f58c:	3714      	adds	r7, #20
 800f58e:	46bd      	mov	sp, r7
 800f590:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f594:	4770      	bx	lr

0800f596 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800f596:	b480      	push	{r7}
 800f598:	b085      	sub	sp, #20
 800f59a:	af00      	add	r7, sp, #0
 800f59c:	6078      	str	r0, [r7, #4]
 800f59e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800f5a0:	683b      	ldr	r3, [r7, #0]
 800f5a2:	681b      	ldr	r3, [r3, #0]
 800f5a4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800f5a6:	68bb      	ldr	r3, [r7, #8]
 800f5a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f5ac:	d103      	bne.n	800f5b6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800f5ae:	687b      	ldr	r3, [r7, #4]
 800f5b0:	691b      	ldr	r3, [r3, #16]
 800f5b2:	60fb      	str	r3, [r7, #12]
 800f5b4:	e00c      	b.n	800f5d0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800f5b6:	687b      	ldr	r3, [r7, #4]
 800f5b8:	3308      	adds	r3, #8
 800f5ba:	60fb      	str	r3, [r7, #12]
 800f5bc:	e002      	b.n	800f5c4 <vListInsert+0x2e>
 800f5be:	68fb      	ldr	r3, [r7, #12]
 800f5c0:	685b      	ldr	r3, [r3, #4]
 800f5c2:	60fb      	str	r3, [r7, #12]
 800f5c4:	68fb      	ldr	r3, [r7, #12]
 800f5c6:	685b      	ldr	r3, [r3, #4]
 800f5c8:	681b      	ldr	r3, [r3, #0]
 800f5ca:	68ba      	ldr	r2, [r7, #8]
 800f5cc:	429a      	cmp	r2, r3
 800f5ce:	d2f6      	bcs.n	800f5be <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800f5d0:	68fb      	ldr	r3, [r7, #12]
 800f5d2:	685a      	ldr	r2, [r3, #4]
 800f5d4:	683b      	ldr	r3, [r7, #0]
 800f5d6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800f5d8:	683b      	ldr	r3, [r7, #0]
 800f5da:	685b      	ldr	r3, [r3, #4]
 800f5dc:	683a      	ldr	r2, [r7, #0]
 800f5de:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800f5e0:	683b      	ldr	r3, [r7, #0]
 800f5e2:	68fa      	ldr	r2, [r7, #12]
 800f5e4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800f5e6:	68fb      	ldr	r3, [r7, #12]
 800f5e8:	683a      	ldr	r2, [r7, #0]
 800f5ea:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800f5ec:	683b      	ldr	r3, [r7, #0]
 800f5ee:	687a      	ldr	r2, [r7, #4]
 800f5f0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800f5f2:	687b      	ldr	r3, [r7, #4]
 800f5f4:	681b      	ldr	r3, [r3, #0]
 800f5f6:	1c5a      	adds	r2, r3, #1
 800f5f8:	687b      	ldr	r3, [r7, #4]
 800f5fa:	601a      	str	r2, [r3, #0]
}
 800f5fc:	bf00      	nop
 800f5fe:	3714      	adds	r7, #20
 800f600:	46bd      	mov	sp, r7
 800f602:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f606:	4770      	bx	lr

0800f608 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800f608:	b480      	push	{r7}
 800f60a:	b085      	sub	sp, #20
 800f60c:	af00      	add	r7, sp, #0
 800f60e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800f610:	687b      	ldr	r3, [r7, #4]
 800f612:	691b      	ldr	r3, [r3, #16]
 800f614:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800f616:	687b      	ldr	r3, [r7, #4]
 800f618:	685b      	ldr	r3, [r3, #4]
 800f61a:	687a      	ldr	r2, [r7, #4]
 800f61c:	6892      	ldr	r2, [r2, #8]
 800f61e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800f620:	687b      	ldr	r3, [r7, #4]
 800f622:	689b      	ldr	r3, [r3, #8]
 800f624:	687a      	ldr	r2, [r7, #4]
 800f626:	6852      	ldr	r2, [r2, #4]
 800f628:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800f62a:	68fb      	ldr	r3, [r7, #12]
 800f62c:	685b      	ldr	r3, [r3, #4]
 800f62e:	687a      	ldr	r2, [r7, #4]
 800f630:	429a      	cmp	r2, r3
 800f632:	d103      	bne.n	800f63c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800f634:	687b      	ldr	r3, [r7, #4]
 800f636:	689a      	ldr	r2, [r3, #8]
 800f638:	68fb      	ldr	r3, [r7, #12]
 800f63a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800f63c:	687b      	ldr	r3, [r7, #4]
 800f63e:	2200      	movs	r2, #0
 800f640:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800f642:	68fb      	ldr	r3, [r7, #12]
 800f644:	681b      	ldr	r3, [r3, #0]
 800f646:	1e5a      	subs	r2, r3, #1
 800f648:	68fb      	ldr	r3, [r7, #12]
 800f64a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800f64c:	68fb      	ldr	r3, [r7, #12]
 800f64e:	681b      	ldr	r3, [r3, #0]
}
 800f650:	4618      	mov	r0, r3
 800f652:	3714      	adds	r7, #20
 800f654:	46bd      	mov	sp, r7
 800f656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f65a:	4770      	bx	lr

0800f65c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800f65c:	b580      	push	{r7, lr}
 800f65e:	b084      	sub	sp, #16
 800f660:	af00      	add	r7, sp, #0
 800f662:	6078      	str	r0, [r7, #4]
 800f664:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800f666:	687b      	ldr	r3, [r7, #4]
 800f668:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800f66a:	68fb      	ldr	r3, [r7, #12]
 800f66c:	2b00      	cmp	r3, #0
 800f66e:	d10a      	bne.n	800f686 <xQueueGenericReset+0x2a>
	__asm volatile
 800f670:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f674:	f383 8811 	msr	BASEPRI, r3
 800f678:	f3bf 8f6f 	isb	sy
 800f67c:	f3bf 8f4f 	dsb	sy
 800f680:	60bb      	str	r3, [r7, #8]
}
 800f682:	bf00      	nop
 800f684:	e7fe      	b.n	800f684 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800f686:	f002 fc55 	bl	8011f34 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f68a:	68fb      	ldr	r3, [r7, #12]
 800f68c:	681a      	ldr	r2, [r3, #0]
 800f68e:	68fb      	ldr	r3, [r7, #12]
 800f690:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f692:	68f9      	ldr	r1, [r7, #12]
 800f694:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800f696:	fb01 f303 	mul.w	r3, r1, r3
 800f69a:	441a      	add	r2, r3
 800f69c:	68fb      	ldr	r3, [r7, #12]
 800f69e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800f6a0:	68fb      	ldr	r3, [r7, #12]
 800f6a2:	2200      	movs	r2, #0
 800f6a4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800f6a6:	68fb      	ldr	r3, [r7, #12]
 800f6a8:	681a      	ldr	r2, [r3, #0]
 800f6aa:	68fb      	ldr	r3, [r7, #12]
 800f6ac:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f6ae:	68fb      	ldr	r3, [r7, #12]
 800f6b0:	681a      	ldr	r2, [r3, #0]
 800f6b2:	68fb      	ldr	r3, [r7, #12]
 800f6b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f6b6:	3b01      	subs	r3, #1
 800f6b8:	68f9      	ldr	r1, [r7, #12]
 800f6ba:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800f6bc:	fb01 f303 	mul.w	r3, r1, r3
 800f6c0:	441a      	add	r2, r3
 800f6c2:	68fb      	ldr	r3, [r7, #12]
 800f6c4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800f6c6:	68fb      	ldr	r3, [r7, #12]
 800f6c8:	22ff      	movs	r2, #255	; 0xff
 800f6ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800f6ce:	68fb      	ldr	r3, [r7, #12]
 800f6d0:	22ff      	movs	r2, #255	; 0xff
 800f6d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800f6d6:	683b      	ldr	r3, [r7, #0]
 800f6d8:	2b00      	cmp	r3, #0
 800f6da:	d114      	bne.n	800f706 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f6dc:	68fb      	ldr	r3, [r7, #12]
 800f6de:	691b      	ldr	r3, [r3, #16]
 800f6e0:	2b00      	cmp	r3, #0
 800f6e2:	d01a      	beq.n	800f71a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f6e4:	68fb      	ldr	r3, [r7, #12]
 800f6e6:	3310      	adds	r3, #16
 800f6e8:	4618      	mov	r0, r3
 800f6ea:	f001 fb01 	bl	8010cf0 <xTaskRemoveFromEventList>
 800f6ee:	4603      	mov	r3, r0
 800f6f0:	2b00      	cmp	r3, #0
 800f6f2:	d012      	beq.n	800f71a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800f6f4:	4b0c      	ldr	r3, [pc, #48]	; (800f728 <xQueueGenericReset+0xcc>)
 800f6f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f6fa:	601a      	str	r2, [r3, #0]
 800f6fc:	f3bf 8f4f 	dsb	sy
 800f700:	f3bf 8f6f 	isb	sy
 800f704:	e009      	b.n	800f71a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800f706:	68fb      	ldr	r3, [r7, #12]
 800f708:	3310      	adds	r3, #16
 800f70a:	4618      	mov	r0, r3
 800f70c:	f7ff fef2 	bl	800f4f4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800f710:	68fb      	ldr	r3, [r7, #12]
 800f712:	3324      	adds	r3, #36	; 0x24
 800f714:	4618      	mov	r0, r3
 800f716:	f7ff feed 	bl	800f4f4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800f71a:	f002 fc3b 	bl	8011f94 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800f71e:	2301      	movs	r3, #1
}
 800f720:	4618      	mov	r0, r3
 800f722:	3710      	adds	r7, #16
 800f724:	46bd      	mov	sp, r7
 800f726:	bd80      	pop	{r7, pc}
 800f728:	e000ed04 	.word	0xe000ed04

0800f72c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800f72c:	b580      	push	{r7, lr}
 800f72e:	b08e      	sub	sp, #56	; 0x38
 800f730:	af02      	add	r7, sp, #8
 800f732:	60f8      	str	r0, [r7, #12]
 800f734:	60b9      	str	r1, [r7, #8]
 800f736:	607a      	str	r2, [r7, #4]
 800f738:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800f73a:	68fb      	ldr	r3, [r7, #12]
 800f73c:	2b00      	cmp	r3, #0
 800f73e:	d10a      	bne.n	800f756 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800f740:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f744:	f383 8811 	msr	BASEPRI, r3
 800f748:	f3bf 8f6f 	isb	sy
 800f74c:	f3bf 8f4f 	dsb	sy
 800f750:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800f752:	bf00      	nop
 800f754:	e7fe      	b.n	800f754 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800f756:	683b      	ldr	r3, [r7, #0]
 800f758:	2b00      	cmp	r3, #0
 800f75a:	d10a      	bne.n	800f772 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800f75c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f760:	f383 8811 	msr	BASEPRI, r3
 800f764:	f3bf 8f6f 	isb	sy
 800f768:	f3bf 8f4f 	dsb	sy
 800f76c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800f76e:	bf00      	nop
 800f770:	e7fe      	b.n	800f770 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800f772:	687b      	ldr	r3, [r7, #4]
 800f774:	2b00      	cmp	r3, #0
 800f776:	d002      	beq.n	800f77e <xQueueGenericCreateStatic+0x52>
 800f778:	68bb      	ldr	r3, [r7, #8]
 800f77a:	2b00      	cmp	r3, #0
 800f77c:	d001      	beq.n	800f782 <xQueueGenericCreateStatic+0x56>
 800f77e:	2301      	movs	r3, #1
 800f780:	e000      	b.n	800f784 <xQueueGenericCreateStatic+0x58>
 800f782:	2300      	movs	r3, #0
 800f784:	2b00      	cmp	r3, #0
 800f786:	d10a      	bne.n	800f79e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800f788:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f78c:	f383 8811 	msr	BASEPRI, r3
 800f790:	f3bf 8f6f 	isb	sy
 800f794:	f3bf 8f4f 	dsb	sy
 800f798:	623b      	str	r3, [r7, #32]
}
 800f79a:	bf00      	nop
 800f79c:	e7fe      	b.n	800f79c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800f79e:	687b      	ldr	r3, [r7, #4]
 800f7a0:	2b00      	cmp	r3, #0
 800f7a2:	d102      	bne.n	800f7aa <xQueueGenericCreateStatic+0x7e>
 800f7a4:	68bb      	ldr	r3, [r7, #8]
 800f7a6:	2b00      	cmp	r3, #0
 800f7a8:	d101      	bne.n	800f7ae <xQueueGenericCreateStatic+0x82>
 800f7aa:	2301      	movs	r3, #1
 800f7ac:	e000      	b.n	800f7b0 <xQueueGenericCreateStatic+0x84>
 800f7ae:	2300      	movs	r3, #0
 800f7b0:	2b00      	cmp	r3, #0
 800f7b2:	d10a      	bne.n	800f7ca <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800f7b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f7b8:	f383 8811 	msr	BASEPRI, r3
 800f7bc:	f3bf 8f6f 	isb	sy
 800f7c0:	f3bf 8f4f 	dsb	sy
 800f7c4:	61fb      	str	r3, [r7, #28]
}
 800f7c6:	bf00      	nop
 800f7c8:	e7fe      	b.n	800f7c8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800f7ca:	2350      	movs	r3, #80	; 0x50
 800f7cc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800f7ce:	697b      	ldr	r3, [r7, #20]
 800f7d0:	2b50      	cmp	r3, #80	; 0x50
 800f7d2:	d00a      	beq.n	800f7ea <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800f7d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f7d8:	f383 8811 	msr	BASEPRI, r3
 800f7dc:	f3bf 8f6f 	isb	sy
 800f7e0:	f3bf 8f4f 	dsb	sy
 800f7e4:	61bb      	str	r3, [r7, #24]
}
 800f7e6:	bf00      	nop
 800f7e8:	e7fe      	b.n	800f7e8 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800f7ea:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800f7ec:	683b      	ldr	r3, [r7, #0]
 800f7ee:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800f7f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f7f2:	2b00      	cmp	r3, #0
 800f7f4:	d00d      	beq.n	800f812 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800f7f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f7f8:	2201      	movs	r2, #1
 800f7fa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800f7fe:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800f802:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f804:	9300      	str	r3, [sp, #0]
 800f806:	4613      	mov	r3, r2
 800f808:	687a      	ldr	r2, [r7, #4]
 800f80a:	68b9      	ldr	r1, [r7, #8]
 800f80c:	68f8      	ldr	r0, [r7, #12]
 800f80e:	f000 f83f 	bl	800f890 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800f812:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800f814:	4618      	mov	r0, r3
 800f816:	3730      	adds	r7, #48	; 0x30
 800f818:	46bd      	mov	sp, r7
 800f81a:	bd80      	pop	{r7, pc}

0800f81c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800f81c:	b580      	push	{r7, lr}
 800f81e:	b08a      	sub	sp, #40	; 0x28
 800f820:	af02      	add	r7, sp, #8
 800f822:	60f8      	str	r0, [r7, #12]
 800f824:	60b9      	str	r1, [r7, #8]
 800f826:	4613      	mov	r3, r2
 800f828:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800f82a:	68fb      	ldr	r3, [r7, #12]
 800f82c:	2b00      	cmp	r3, #0
 800f82e:	d10a      	bne.n	800f846 <xQueueGenericCreate+0x2a>
	__asm volatile
 800f830:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f834:	f383 8811 	msr	BASEPRI, r3
 800f838:	f3bf 8f6f 	isb	sy
 800f83c:	f3bf 8f4f 	dsb	sy
 800f840:	613b      	str	r3, [r7, #16]
}
 800f842:	bf00      	nop
 800f844:	e7fe      	b.n	800f844 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f846:	68fb      	ldr	r3, [r7, #12]
 800f848:	68ba      	ldr	r2, [r7, #8]
 800f84a:	fb02 f303 	mul.w	r3, r2, r3
 800f84e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800f850:	69fb      	ldr	r3, [r7, #28]
 800f852:	3350      	adds	r3, #80	; 0x50
 800f854:	4618      	mov	r0, r3
 800f856:	f002 fc8f 	bl	8012178 <pvPortMalloc>
 800f85a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800f85c:	69bb      	ldr	r3, [r7, #24]
 800f85e:	2b00      	cmp	r3, #0
 800f860:	d011      	beq.n	800f886 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800f862:	69bb      	ldr	r3, [r7, #24]
 800f864:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f866:	697b      	ldr	r3, [r7, #20]
 800f868:	3350      	adds	r3, #80	; 0x50
 800f86a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800f86c:	69bb      	ldr	r3, [r7, #24]
 800f86e:	2200      	movs	r2, #0
 800f870:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800f874:	79fa      	ldrb	r2, [r7, #7]
 800f876:	69bb      	ldr	r3, [r7, #24]
 800f878:	9300      	str	r3, [sp, #0]
 800f87a:	4613      	mov	r3, r2
 800f87c:	697a      	ldr	r2, [r7, #20]
 800f87e:	68b9      	ldr	r1, [r7, #8]
 800f880:	68f8      	ldr	r0, [r7, #12]
 800f882:	f000 f805 	bl	800f890 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800f886:	69bb      	ldr	r3, [r7, #24]
	}
 800f888:	4618      	mov	r0, r3
 800f88a:	3720      	adds	r7, #32
 800f88c:	46bd      	mov	sp, r7
 800f88e:	bd80      	pop	{r7, pc}

0800f890 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800f890:	b580      	push	{r7, lr}
 800f892:	b084      	sub	sp, #16
 800f894:	af00      	add	r7, sp, #0
 800f896:	60f8      	str	r0, [r7, #12]
 800f898:	60b9      	str	r1, [r7, #8]
 800f89a:	607a      	str	r2, [r7, #4]
 800f89c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800f89e:	68bb      	ldr	r3, [r7, #8]
 800f8a0:	2b00      	cmp	r3, #0
 800f8a2:	d103      	bne.n	800f8ac <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800f8a4:	69bb      	ldr	r3, [r7, #24]
 800f8a6:	69ba      	ldr	r2, [r7, #24]
 800f8a8:	601a      	str	r2, [r3, #0]
 800f8aa:	e002      	b.n	800f8b2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800f8ac:	69bb      	ldr	r3, [r7, #24]
 800f8ae:	687a      	ldr	r2, [r7, #4]
 800f8b0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800f8b2:	69bb      	ldr	r3, [r7, #24]
 800f8b4:	68fa      	ldr	r2, [r7, #12]
 800f8b6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800f8b8:	69bb      	ldr	r3, [r7, #24]
 800f8ba:	68ba      	ldr	r2, [r7, #8]
 800f8bc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800f8be:	2101      	movs	r1, #1
 800f8c0:	69b8      	ldr	r0, [r7, #24]
 800f8c2:	f7ff fecb 	bl	800f65c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800f8c6:	69bb      	ldr	r3, [r7, #24]
 800f8c8:	78fa      	ldrb	r2, [r7, #3]
 800f8ca:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800f8ce:	bf00      	nop
 800f8d0:	3710      	adds	r7, #16
 800f8d2:	46bd      	mov	sp, r7
 800f8d4:	bd80      	pop	{r7, pc}
	...

0800f8d8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800f8d8:	b580      	push	{r7, lr}
 800f8da:	b08e      	sub	sp, #56	; 0x38
 800f8dc:	af00      	add	r7, sp, #0
 800f8de:	60f8      	str	r0, [r7, #12]
 800f8e0:	60b9      	str	r1, [r7, #8]
 800f8e2:	607a      	str	r2, [r7, #4]
 800f8e4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800f8e6:	2300      	movs	r3, #0
 800f8e8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800f8ea:	68fb      	ldr	r3, [r7, #12]
 800f8ec:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800f8ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8f0:	2b00      	cmp	r3, #0
 800f8f2:	d10a      	bne.n	800f90a <xQueueGenericSend+0x32>
	__asm volatile
 800f8f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f8f8:	f383 8811 	msr	BASEPRI, r3
 800f8fc:	f3bf 8f6f 	isb	sy
 800f900:	f3bf 8f4f 	dsb	sy
 800f904:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800f906:	bf00      	nop
 800f908:	e7fe      	b.n	800f908 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f90a:	68bb      	ldr	r3, [r7, #8]
 800f90c:	2b00      	cmp	r3, #0
 800f90e:	d103      	bne.n	800f918 <xQueueGenericSend+0x40>
 800f910:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f912:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f914:	2b00      	cmp	r3, #0
 800f916:	d101      	bne.n	800f91c <xQueueGenericSend+0x44>
 800f918:	2301      	movs	r3, #1
 800f91a:	e000      	b.n	800f91e <xQueueGenericSend+0x46>
 800f91c:	2300      	movs	r3, #0
 800f91e:	2b00      	cmp	r3, #0
 800f920:	d10a      	bne.n	800f938 <xQueueGenericSend+0x60>
	__asm volatile
 800f922:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f926:	f383 8811 	msr	BASEPRI, r3
 800f92a:	f3bf 8f6f 	isb	sy
 800f92e:	f3bf 8f4f 	dsb	sy
 800f932:	627b      	str	r3, [r7, #36]	; 0x24
}
 800f934:	bf00      	nop
 800f936:	e7fe      	b.n	800f936 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800f938:	683b      	ldr	r3, [r7, #0]
 800f93a:	2b02      	cmp	r3, #2
 800f93c:	d103      	bne.n	800f946 <xQueueGenericSend+0x6e>
 800f93e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f940:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f942:	2b01      	cmp	r3, #1
 800f944:	d101      	bne.n	800f94a <xQueueGenericSend+0x72>
 800f946:	2301      	movs	r3, #1
 800f948:	e000      	b.n	800f94c <xQueueGenericSend+0x74>
 800f94a:	2300      	movs	r3, #0
 800f94c:	2b00      	cmp	r3, #0
 800f94e:	d10a      	bne.n	800f966 <xQueueGenericSend+0x8e>
	__asm volatile
 800f950:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f954:	f383 8811 	msr	BASEPRI, r3
 800f958:	f3bf 8f6f 	isb	sy
 800f95c:	f3bf 8f4f 	dsb	sy
 800f960:	623b      	str	r3, [r7, #32]
}
 800f962:	bf00      	nop
 800f964:	e7fe      	b.n	800f964 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f966:	f001 fb85 	bl	8011074 <xTaskGetSchedulerState>
 800f96a:	4603      	mov	r3, r0
 800f96c:	2b00      	cmp	r3, #0
 800f96e:	d102      	bne.n	800f976 <xQueueGenericSend+0x9e>
 800f970:	687b      	ldr	r3, [r7, #4]
 800f972:	2b00      	cmp	r3, #0
 800f974:	d101      	bne.n	800f97a <xQueueGenericSend+0xa2>
 800f976:	2301      	movs	r3, #1
 800f978:	e000      	b.n	800f97c <xQueueGenericSend+0xa4>
 800f97a:	2300      	movs	r3, #0
 800f97c:	2b00      	cmp	r3, #0
 800f97e:	d10a      	bne.n	800f996 <xQueueGenericSend+0xbe>
	__asm volatile
 800f980:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f984:	f383 8811 	msr	BASEPRI, r3
 800f988:	f3bf 8f6f 	isb	sy
 800f98c:	f3bf 8f4f 	dsb	sy
 800f990:	61fb      	str	r3, [r7, #28]
}
 800f992:	bf00      	nop
 800f994:	e7fe      	b.n	800f994 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800f996:	f002 facd 	bl	8011f34 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800f99a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f99c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f99e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f9a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f9a2:	429a      	cmp	r2, r3
 800f9a4:	d302      	bcc.n	800f9ac <xQueueGenericSend+0xd4>
 800f9a6:	683b      	ldr	r3, [r7, #0]
 800f9a8:	2b02      	cmp	r3, #2
 800f9aa:	d129      	bne.n	800fa00 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800f9ac:	683a      	ldr	r2, [r7, #0]
 800f9ae:	68b9      	ldr	r1, [r7, #8]
 800f9b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f9b2:	f000 faae 	bl	800ff12 <prvCopyDataToQueue>
 800f9b6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f9b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f9ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f9bc:	2b00      	cmp	r3, #0
 800f9be:	d010      	beq.n	800f9e2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f9c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f9c2:	3324      	adds	r3, #36	; 0x24
 800f9c4:	4618      	mov	r0, r3
 800f9c6:	f001 f993 	bl	8010cf0 <xTaskRemoveFromEventList>
 800f9ca:	4603      	mov	r3, r0
 800f9cc:	2b00      	cmp	r3, #0
 800f9ce:	d013      	beq.n	800f9f8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800f9d0:	4b3f      	ldr	r3, [pc, #252]	; (800fad0 <xQueueGenericSend+0x1f8>)
 800f9d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f9d6:	601a      	str	r2, [r3, #0]
 800f9d8:	f3bf 8f4f 	dsb	sy
 800f9dc:	f3bf 8f6f 	isb	sy
 800f9e0:	e00a      	b.n	800f9f8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800f9e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9e4:	2b00      	cmp	r3, #0
 800f9e6:	d007      	beq.n	800f9f8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800f9e8:	4b39      	ldr	r3, [pc, #228]	; (800fad0 <xQueueGenericSend+0x1f8>)
 800f9ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f9ee:	601a      	str	r2, [r3, #0]
 800f9f0:	f3bf 8f4f 	dsb	sy
 800f9f4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800f9f8:	f002 facc 	bl	8011f94 <vPortExitCritical>
				return pdPASS;
 800f9fc:	2301      	movs	r3, #1
 800f9fe:	e063      	b.n	800fac8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800fa00:	687b      	ldr	r3, [r7, #4]
 800fa02:	2b00      	cmp	r3, #0
 800fa04:	d103      	bne.n	800fa0e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800fa06:	f002 fac5 	bl	8011f94 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800fa0a:	2300      	movs	r3, #0
 800fa0c:	e05c      	b.n	800fac8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800fa0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fa10:	2b00      	cmp	r3, #0
 800fa12:	d106      	bne.n	800fa22 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800fa14:	f107 0314 	add.w	r3, r7, #20
 800fa18:	4618      	mov	r0, r3
 800fa1a:	f001 f9cd 	bl	8010db8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800fa1e:	2301      	movs	r3, #1
 800fa20:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800fa22:	f002 fab7 	bl	8011f94 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800fa26:	f000 ff1d 	bl	8010864 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800fa2a:	f002 fa83 	bl	8011f34 <vPortEnterCritical>
 800fa2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa30:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800fa34:	b25b      	sxtb	r3, r3
 800fa36:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fa3a:	d103      	bne.n	800fa44 <xQueueGenericSend+0x16c>
 800fa3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa3e:	2200      	movs	r2, #0
 800fa40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800fa44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa46:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800fa4a:	b25b      	sxtb	r3, r3
 800fa4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fa50:	d103      	bne.n	800fa5a <xQueueGenericSend+0x182>
 800fa52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa54:	2200      	movs	r2, #0
 800fa56:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800fa5a:	f002 fa9b 	bl	8011f94 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800fa5e:	1d3a      	adds	r2, r7, #4
 800fa60:	f107 0314 	add.w	r3, r7, #20
 800fa64:	4611      	mov	r1, r2
 800fa66:	4618      	mov	r0, r3
 800fa68:	f001 f9bc 	bl	8010de4 <xTaskCheckForTimeOut>
 800fa6c:	4603      	mov	r3, r0
 800fa6e:	2b00      	cmp	r3, #0
 800fa70:	d124      	bne.n	800fabc <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800fa72:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fa74:	f000 fb45 	bl	8010102 <prvIsQueueFull>
 800fa78:	4603      	mov	r3, r0
 800fa7a:	2b00      	cmp	r3, #0
 800fa7c:	d018      	beq.n	800fab0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800fa7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa80:	3310      	adds	r3, #16
 800fa82:	687a      	ldr	r2, [r7, #4]
 800fa84:	4611      	mov	r1, r2
 800fa86:	4618      	mov	r0, r3
 800fa88:	f001 f8e2 	bl	8010c50 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800fa8c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fa8e:	f000 fad0 	bl	8010032 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800fa92:	f000 fef5 	bl	8010880 <xTaskResumeAll>
 800fa96:	4603      	mov	r3, r0
 800fa98:	2b00      	cmp	r3, #0
 800fa9a:	f47f af7c 	bne.w	800f996 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800fa9e:	4b0c      	ldr	r3, [pc, #48]	; (800fad0 <xQueueGenericSend+0x1f8>)
 800faa0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800faa4:	601a      	str	r2, [r3, #0]
 800faa6:	f3bf 8f4f 	dsb	sy
 800faaa:	f3bf 8f6f 	isb	sy
 800faae:	e772      	b.n	800f996 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800fab0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fab2:	f000 fabe 	bl	8010032 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800fab6:	f000 fee3 	bl	8010880 <xTaskResumeAll>
 800faba:	e76c      	b.n	800f996 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800fabc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fabe:	f000 fab8 	bl	8010032 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800fac2:	f000 fedd 	bl	8010880 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800fac6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800fac8:	4618      	mov	r0, r3
 800faca:	3738      	adds	r7, #56	; 0x38
 800facc:	46bd      	mov	sp, r7
 800face:	bd80      	pop	{r7, pc}
 800fad0:	e000ed04 	.word	0xe000ed04

0800fad4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800fad4:	b580      	push	{r7, lr}
 800fad6:	b090      	sub	sp, #64	; 0x40
 800fad8:	af00      	add	r7, sp, #0
 800fada:	60f8      	str	r0, [r7, #12]
 800fadc:	60b9      	str	r1, [r7, #8]
 800fade:	607a      	str	r2, [r7, #4]
 800fae0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800fae2:	68fb      	ldr	r3, [r7, #12]
 800fae4:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800fae6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fae8:	2b00      	cmp	r3, #0
 800faea:	d10a      	bne.n	800fb02 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800faec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800faf0:	f383 8811 	msr	BASEPRI, r3
 800faf4:	f3bf 8f6f 	isb	sy
 800faf8:	f3bf 8f4f 	dsb	sy
 800fafc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800fafe:	bf00      	nop
 800fb00:	e7fe      	b.n	800fb00 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800fb02:	68bb      	ldr	r3, [r7, #8]
 800fb04:	2b00      	cmp	r3, #0
 800fb06:	d103      	bne.n	800fb10 <xQueueGenericSendFromISR+0x3c>
 800fb08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fb0c:	2b00      	cmp	r3, #0
 800fb0e:	d101      	bne.n	800fb14 <xQueueGenericSendFromISR+0x40>
 800fb10:	2301      	movs	r3, #1
 800fb12:	e000      	b.n	800fb16 <xQueueGenericSendFromISR+0x42>
 800fb14:	2300      	movs	r3, #0
 800fb16:	2b00      	cmp	r3, #0
 800fb18:	d10a      	bne.n	800fb30 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800fb1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb1e:	f383 8811 	msr	BASEPRI, r3
 800fb22:	f3bf 8f6f 	isb	sy
 800fb26:	f3bf 8f4f 	dsb	sy
 800fb2a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800fb2c:	bf00      	nop
 800fb2e:	e7fe      	b.n	800fb2e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800fb30:	683b      	ldr	r3, [r7, #0]
 800fb32:	2b02      	cmp	r3, #2
 800fb34:	d103      	bne.n	800fb3e <xQueueGenericSendFromISR+0x6a>
 800fb36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fb3a:	2b01      	cmp	r3, #1
 800fb3c:	d101      	bne.n	800fb42 <xQueueGenericSendFromISR+0x6e>
 800fb3e:	2301      	movs	r3, #1
 800fb40:	e000      	b.n	800fb44 <xQueueGenericSendFromISR+0x70>
 800fb42:	2300      	movs	r3, #0
 800fb44:	2b00      	cmp	r3, #0
 800fb46:	d10a      	bne.n	800fb5e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800fb48:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb4c:	f383 8811 	msr	BASEPRI, r3
 800fb50:	f3bf 8f6f 	isb	sy
 800fb54:	f3bf 8f4f 	dsb	sy
 800fb58:	623b      	str	r3, [r7, #32]
}
 800fb5a:	bf00      	nop
 800fb5c:	e7fe      	b.n	800fb5c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800fb5e:	f002 facb 	bl	80120f8 <vPortValidateInterruptPriority>
	__asm volatile
 800fb62:	f3ef 8211 	mrs	r2, BASEPRI
 800fb66:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb6a:	f383 8811 	msr	BASEPRI, r3
 800fb6e:	f3bf 8f6f 	isb	sy
 800fb72:	f3bf 8f4f 	dsb	sy
 800fb76:	61fa      	str	r2, [r7, #28]
 800fb78:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 800fb7a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800fb7c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800fb7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb80:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800fb82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fb86:	429a      	cmp	r2, r3
 800fb88:	d302      	bcc.n	800fb90 <xQueueGenericSendFromISR+0xbc>
 800fb8a:	683b      	ldr	r3, [r7, #0]
 800fb8c:	2b02      	cmp	r3, #2
 800fb8e:	d12f      	bne.n	800fbf0 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800fb90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb92:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800fb96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800fb9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fb9e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800fba0:	683a      	ldr	r2, [r7, #0]
 800fba2:	68b9      	ldr	r1, [r7, #8]
 800fba4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800fba6:	f000 f9b4 	bl	800ff12 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800fbaa:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800fbae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fbb2:	d112      	bne.n	800fbda <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800fbb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fbb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fbb8:	2b00      	cmp	r3, #0
 800fbba:	d016      	beq.n	800fbea <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800fbbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fbbe:	3324      	adds	r3, #36	; 0x24
 800fbc0:	4618      	mov	r0, r3
 800fbc2:	f001 f895 	bl	8010cf0 <xTaskRemoveFromEventList>
 800fbc6:	4603      	mov	r3, r0
 800fbc8:	2b00      	cmp	r3, #0
 800fbca:	d00e      	beq.n	800fbea <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800fbcc:	687b      	ldr	r3, [r7, #4]
 800fbce:	2b00      	cmp	r3, #0
 800fbd0:	d00b      	beq.n	800fbea <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800fbd2:	687b      	ldr	r3, [r7, #4]
 800fbd4:	2201      	movs	r2, #1
 800fbd6:	601a      	str	r2, [r3, #0]
 800fbd8:	e007      	b.n	800fbea <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800fbda:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800fbde:	3301      	adds	r3, #1
 800fbe0:	b2db      	uxtb	r3, r3
 800fbe2:	b25a      	sxtb	r2, r3
 800fbe4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fbe6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800fbea:	2301      	movs	r3, #1
 800fbec:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800fbee:	e001      	b.n	800fbf4 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800fbf0:	2300      	movs	r3, #0
 800fbf2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800fbf4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fbf6:	617b      	str	r3, [r7, #20]
	__asm volatile
 800fbf8:	697b      	ldr	r3, [r7, #20]
 800fbfa:	f383 8811 	msr	BASEPRI, r3
}
 800fbfe:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800fc00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800fc02:	4618      	mov	r0, r3
 800fc04:	3740      	adds	r7, #64	; 0x40
 800fc06:	46bd      	mov	sp, r7
 800fc08:	bd80      	pop	{r7, pc}
	...

0800fc0c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800fc0c:	b580      	push	{r7, lr}
 800fc0e:	b08c      	sub	sp, #48	; 0x30
 800fc10:	af00      	add	r7, sp, #0
 800fc12:	60f8      	str	r0, [r7, #12]
 800fc14:	60b9      	str	r1, [r7, #8]
 800fc16:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800fc18:	2300      	movs	r3, #0
 800fc1a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800fc1c:	68fb      	ldr	r3, [r7, #12]
 800fc1e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800fc20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc22:	2b00      	cmp	r3, #0
 800fc24:	d10a      	bne.n	800fc3c <xQueueReceive+0x30>
	__asm volatile
 800fc26:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc2a:	f383 8811 	msr	BASEPRI, r3
 800fc2e:	f3bf 8f6f 	isb	sy
 800fc32:	f3bf 8f4f 	dsb	sy
 800fc36:	623b      	str	r3, [r7, #32]
}
 800fc38:	bf00      	nop
 800fc3a:	e7fe      	b.n	800fc3a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800fc3c:	68bb      	ldr	r3, [r7, #8]
 800fc3e:	2b00      	cmp	r3, #0
 800fc40:	d103      	bne.n	800fc4a <xQueueReceive+0x3e>
 800fc42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fc46:	2b00      	cmp	r3, #0
 800fc48:	d101      	bne.n	800fc4e <xQueueReceive+0x42>
 800fc4a:	2301      	movs	r3, #1
 800fc4c:	e000      	b.n	800fc50 <xQueueReceive+0x44>
 800fc4e:	2300      	movs	r3, #0
 800fc50:	2b00      	cmp	r3, #0
 800fc52:	d10a      	bne.n	800fc6a <xQueueReceive+0x5e>
	__asm volatile
 800fc54:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc58:	f383 8811 	msr	BASEPRI, r3
 800fc5c:	f3bf 8f6f 	isb	sy
 800fc60:	f3bf 8f4f 	dsb	sy
 800fc64:	61fb      	str	r3, [r7, #28]
}
 800fc66:	bf00      	nop
 800fc68:	e7fe      	b.n	800fc68 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800fc6a:	f001 fa03 	bl	8011074 <xTaskGetSchedulerState>
 800fc6e:	4603      	mov	r3, r0
 800fc70:	2b00      	cmp	r3, #0
 800fc72:	d102      	bne.n	800fc7a <xQueueReceive+0x6e>
 800fc74:	687b      	ldr	r3, [r7, #4]
 800fc76:	2b00      	cmp	r3, #0
 800fc78:	d101      	bne.n	800fc7e <xQueueReceive+0x72>
 800fc7a:	2301      	movs	r3, #1
 800fc7c:	e000      	b.n	800fc80 <xQueueReceive+0x74>
 800fc7e:	2300      	movs	r3, #0
 800fc80:	2b00      	cmp	r3, #0
 800fc82:	d10a      	bne.n	800fc9a <xQueueReceive+0x8e>
	__asm volatile
 800fc84:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc88:	f383 8811 	msr	BASEPRI, r3
 800fc8c:	f3bf 8f6f 	isb	sy
 800fc90:	f3bf 8f4f 	dsb	sy
 800fc94:	61bb      	str	r3, [r7, #24]
}
 800fc96:	bf00      	nop
 800fc98:	e7fe      	b.n	800fc98 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800fc9a:	f002 f94b 	bl	8011f34 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800fc9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fca0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fca2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800fca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fca6:	2b00      	cmp	r3, #0
 800fca8:	d01f      	beq.n	800fcea <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800fcaa:	68b9      	ldr	r1, [r7, #8]
 800fcac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fcae:	f000 f99a 	bl	800ffe6 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800fcb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fcb4:	1e5a      	subs	r2, r3, #1
 800fcb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fcb8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800fcba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fcbc:	691b      	ldr	r3, [r3, #16]
 800fcbe:	2b00      	cmp	r3, #0
 800fcc0:	d00f      	beq.n	800fce2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800fcc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fcc4:	3310      	adds	r3, #16
 800fcc6:	4618      	mov	r0, r3
 800fcc8:	f001 f812 	bl	8010cf0 <xTaskRemoveFromEventList>
 800fccc:	4603      	mov	r3, r0
 800fcce:	2b00      	cmp	r3, #0
 800fcd0:	d007      	beq.n	800fce2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800fcd2:	4b3d      	ldr	r3, [pc, #244]	; (800fdc8 <xQueueReceive+0x1bc>)
 800fcd4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fcd8:	601a      	str	r2, [r3, #0]
 800fcda:	f3bf 8f4f 	dsb	sy
 800fcde:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800fce2:	f002 f957 	bl	8011f94 <vPortExitCritical>
				return pdPASS;
 800fce6:	2301      	movs	r3, #1
 800fce8:	e069      	b.n	800fdbe <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800fcea:	687b      	ldr	r3, [r7, #4]
 800fcec:	2b00      	cmp	r3, #0
 800fcee:	d103      	bne.n	800fcf8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800fcf0:	f002 f950 	bl	8011f94 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800fcf4:	2300      	movs	r3, #0
 800fcf6:	e062      	b.n	800fdbe <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800fcf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fcfa:	2b00      	cmp	r3, #0
 800fcfc:	d106      	bne.n	800fd0c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800fcfe:	f107 0310 	add.w	r3, r7, #16
 800fd02:	4618      	mov	r0, r3
 800fd04:	f001 f858 	bl	8010db8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800fd08:	2301      	movs	r3, #1
 800fd0a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800fd0c:	f002 f942 	bl	8011f94 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800fd10:	f000 fda8 	bl	8010864 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800fd14:	f002 f90e 	bl	8011f34 <vPortEnterCritical>
 800fd18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd1a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800fd1e:	b25b      	sxtb	r3, r3
 800fd20:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fd24:	d103      	bne.n	800fd2e <xQueueReceive+0x122>
 800fd26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd28:	2200      	movs	r2, #0
 800fd2a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800fd2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd30:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800fd34:	b25b      	sxtb	r3, r3
 800fd36:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fd3a:	d103      	bne.n	800fd44 <xQueueReceive+0x138>
 800fd3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd3e:	2200      	movs	r2, #0
 800fd40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800fd44:	f002 f926 	bl	8011f94 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800fd48:	1d3a      	adds	r2, r7, #4
 800fd4a:	f107 0310 	add.w	r3, r7, #16
 800fd4e:	4611      	mov	r1, r2
 800fd50:	4618      	mov	r0, r3
 800fd52:	f001 f847 	bl	8010de4 <xTaskCheckForTimeOut>
 800fd56:	4603      	mov	r3, r0
 800fd58:	2b00      	cmp	r3, #0
 800fd5a:	d123      	bne.n	800fda4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800fd5c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fd5e:	f000 f9ba 	bl	80100d6 <prvIsQueueEmpty>
 800fd62:	4603      	mov	r3, r0
 800fd64:	2b00      	cmp	r3, #0
 800fd66:	d017      	beq.n	800fd98 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800fd68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd6a:	3324      	adds	r3, #36	; 0x24
 800fd6c:	687a      	ldr	r2, [r7, #4]
 800fd6e:	4611      	mov	r1, r2
 800fd70:	4618      	mov	r0, r3
 800fd72:	f000 ff6d 	bl	8010c50 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800fd76:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fd78:	f000 f95b 	bl	8010032 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800fd7c:	f000 fd80 	bl	8010880 <xTaskResumeAll>
 800fd80:	4603      	mov	r3, r0
 800fd82:	2b00      	cmp	r3, #0
 800fd84:	d189      	bne.n	800fc9a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800fd86:	4b10      	ldr	r3, [pc, #64]	; (800fdc8 <xQueueReceive+0x1bc>)
 800fd88:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fd8c:	601a      	str	r2, [r3, #0]
 800fd8e:	f3bf 8f4f 	dsb	sy
 800fd92:	f3bf 8f6f 	isb	sy
 800fd96:	e780      	b.n	800fc9a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800fd98:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fd9a:	f000 f94a 	bl	8010032 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800fd9e:	f000 fd6f 	bl	8010880 <xTaskResumeAll>
 800fda2:	e77a      	b.n	800fc9a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800fda4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fda6:	f000 f944 	bl	8010032 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800fdaa:	f000 fd69 	bl	8010880 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800fdae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fdb0:	f000 f991 	bl	80100d6 <prvIsQueueEmpty>
 800fdb4:	4603      	mov	r3, r0
 800fdb6:	2b00      	cmp	r3, #0
 800fdb8:	f43f af6f 	beq.w	800fc9a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800fdbc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800fdbe:	4618      	mov	r0, r3
 800fdc0:	3730      	adds	r7, #48	; 0x30
 800fdc2:	46bd      	mov	sp, r7
 800fdc4:	bd80      	pop	{r7, pc}
 800fdc6:	bf00      	nop
 800fdc8:	e000ed04 	.word	0xe000ed04

0800fdcc <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800fdcc:	b580      	push	{r7, lr}
 800fdce:	b08e      	sub	sp, #56	; 0x38
 800fdd0:	af00      	add	r7, sp, #0
 800fdd2:	60f8      	str	r0, [r7, #12]
 800fdd4:	60b9      	str	r1, [r7, #8]
 800fdd6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800fdd8:	68fb      	ldr	r3, [r7, #12]
 800fdda:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800fddc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fdde:	2b00      	cmp	r3, #0
 800fde0:	d10a      	bne.n	800fdf8 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800fde2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fde6:	f383 8811 	msr	BASEPRI, r3
 800fdea:	f3bf 8f6f 	isb	sy
 800fdee:	f3bf 8f4f 	dsb	sy
 800fdf2:	623b      	str	r3, [r7, #32]
}
 800fdf4:	bf00      	nop
 800fdf6:	e7fe      	b.n	800fdf6 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800fdf8:	68bb      	ldr	r3, [r7, #8]
 800fdfa:	2b00      	cmp	r3, #0
 800fdfc:	d103      	bne.n	800fe06 <xQueueReceiveFromISR+0x3a>
 800fdfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fe02:	2b00      	cmp	r3, #0
 800fe04:	d101      	bne.n	800fe0a <xQueueReceiveFromISR+0x3e>
 800fe06:	2301      	movs	r3, #1
 800fe08:	e000      	b.n	800fe0c <xQueueReceiveFromISR+0x40>
 800fe0a:	2300      	movs	r3, #0
 800fe0c:	2b00      	cmp	r3, #0
 800fe0e:	d10a      	bne.n	800fe26 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800fe10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe14:	f383 8811 	msr	BASEPRI, r3
 800fe18:	f3bf 8f6f 	isb	sy
 800fe1c:	f3bf 8f4f 	dsb	sy
 800fe20:	61fb      	str	r3, [r7, #28]
}
 800fe22:	bf00      	nop
 800fe24:	e7fe      	b.n	800fe24 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800fe26:	f002 f967 	bl	80120f8 <vPortValidateInterruptPriority>
	__asm volatile
 800fe2a:	f3ef 8211 	mrs	r2, BASEPRI
 800fe2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe32:	f383 8811 	msr	BASEPRI, r3
 800fe36:	f3bf 8f6f 	isb	sy
 800fe3a:	f3bf 8f4f 	dsb	sy
 800fe3e:	61ba      	str	r2, [r7, #24]
 800fe40:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800fe42:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800fe44:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800fe46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fe4a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800fe4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe4e:	2b00      	cmp	r3, #0
 800fe50:	d02f      	beq.n	800feb2 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800fe52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe54:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800fe58:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800fe5c:	68b9      	ldr	r1, [r7, #8]
 800fe5e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fe60:	f000 f8c1 	bl	800ffe6 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800fe64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe66:	1e5a      	subs	r2, r3, #1
 800fe68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe6a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800fe6c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800fe70:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fe74:	d112      	bne.n	800fe9c <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800fe76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe78:	691b      	ldr	r3, [r3, #16]
 800fe7a:	2b00      	cmp	r3, #0
 800fe7c:	d016      	beq.n	800feac <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800fe7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe80:	3310      	adds	r3, #16
 800fe82:	4618      	mov	r0, r3
 800fe84:	f000 ff34 	bl	8010cf0 <xTaskRemoveFromEventList>
 800fe88:	4603      	mov	r3, r0
 800fe8a:	2b00      	cmp	r3, #0
 800fe8c:	d00e      	beq.n	800feac <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800fe8e:	687b      	ldr	r3, [r7, #4]
 800fe90:	2b00      	cmp	r3, #0
 800fe92:	d00b      	beq.n	800feac <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800fe94:	687b      	ldr	r3, [r7, #4]
 800fe96:	2201      	movs	r2, #1
 800fe98:	601a      	str	r2, [r3, #0]
 800fe9a:	e007      	b.n	800feac <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800fe9c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fea0:	3301      	adds	r3, #1
 800fea2:	b2db      	uxtb	r3, r3
 800fea4:	b25a      	sxtb	r2, r3
 800fea6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fea8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800feac:	2301      	movs	r3, #1
 800feae:	637b      	str	r3, [r7, #52]	; 0x34
 800feb0:	e001      	b.n	800feb6 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800feb2:	2300      	movs	r3, #0
 800feb4:	637b      	str	r3, [r7, #52]	; 0x34
 800feb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800feb8:	613b      	str	r3, [r7, #16]
	__asm volatile
 800feba:	693b      	ldr	r3, [r7, #16]
 800febc:	f383 8811 	msr	BASEPRI, r3
}
 800fec0:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800fec2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800fec4:	4618      	mov	r0, r3
 800fec6:	3738      	adds	r7, #56	; 0x38
 800fec8:	46bd      	mov	sp, r7
 800feca:	bd80      	pop	{r7, pc}

0800fecc <uxQueueSpacesAvailable>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueSpacesAvailable( const QueueHandle_t xQueue )
{
 800fecc:	b580      	push	{r7, lr}
 800fece:	b086      	sub	sp, #24
 800fed0:	af00      	add	r7, sp, #0
 800fed2:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 800fed4:	687b      	ldr	r3, [r7, #4]
 800fed6:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 800fed8:	697b      	ldr	r3, [r7, #20]
 800feda:	2b00      	cmp	r3, #0
 800fedc:	d10a      	bne.n	800fef4 <uxQueueSpacesAvailable+0x28>
	__asm volatile
 800fede:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fee2:	f383 8811 	msr	BASEPRI, r3
 800fee6:	f3bf 8f6f 	isb	sy
 800feea:	f3bf 8f4f 	dsb	sy
 800feee:	60fb      	str	r3, [r7, #12]
}
 800fef0:	bf00      	nop
 800fef2:	e7fe      	b.n	800fef2 <uxQueueSpacesAvailable+0x26>

	taskENTER_CRITICAL();
 800fef4:	f002 f81e 	bl	8011f34 <vPortEnterCritical>
	{
		uxReturn = pxQueue->uxLength - pxQueue->uxMessagesWaiting;
 800fef8:	697b      	ldr	r3, [r7, #20]
 800fefa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800fefc:	697b      	ldr	r3, [r7, #20]
 800fefe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ff00:	1ad3      	subs	r3, r2, r3
 800ff02:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 800ff04:	f002 f846 	bl	8011f94 <vPortExitCritical>

	return uxReturn;
 800ff08:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800ff0a:	4618      	mov	r0, r3
 800ff0c:	3718      	adds	r7, #24
 800ff0e:	46bd      	mov	sp, r7
 800ff10:	bd80      	pop	{r7, pc}

0800ff12 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800ff12:	b580      	push	{r7, lr}
 800ff14:	b086      	sub	sp, #24
 800ff16:	af00      	add	r7, sp, #0
 800ff18:	60f8      	str	r0, [r7, #12]
 800ff1a:	60b9      	str	r1, [r7, #8]
 800ff1c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800ff1e:	2300      	movs	r3, #0
 800ff20:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ff22:	68fb      	ldr	r3, [r7, #12]
 800ff24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ff26:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800ff28:	68fb      	ldr	r3, [r7, #12]
 800ff2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ff2c:	2b00      	cmp	r3, #0
 800ff2e:	d10d      	bne.n	800ff4c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ff30:	68fb      	ldr	r3, [r7, #12]
 800ff32:	681b      	ldr	r3, [r3, #0]
 800ff34:	2b00      	cmp	r3, #0
 800ff36:	d14d      	bne.n	800ffd4 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ff38:	68fb      	ldr	r3, [r7, #12]
 800ff3a:	689b      	ldr	r3, [r3, #8]
 800ff3c:	4618      	mov	r0, r3
 800ff3e:	f001 f8b7 	bl	80110b0 <xTaskPriorityDisinherit>
 800ff42:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800ff44:	68fb      	ldr	r3, [r7, #12]
 800ff46:	2200      	movs	r2, #0
 800ff48:	609a      	str	r2, [r3, #8]
 800ff4a:	e043      	b.n	800ffd4 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800ff4c:	687b      	ldr	r3, [r7, #4]
 800ff4e:	2b00      	cmp	r3, #0
 800ff50:	d119      	bne.n	800ff86 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ff52:	68fb      	ldr	r3, [r7, #12]
 800ff54:	6858      	ldr	r0, [r3, #4]
 800ff56:	68fb      	ldr	r3, [r7, #12]
 800ff58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ff5a:	461a      	mov	r2, r3
 800ff5c:	68b9      	ldr	r1, [r7, #8]
 800ff5e:	f002 fc58 	bl	8012812 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ff62:	68fb      	ldr	r3, [r7, #12]
 800ff64:	685a      	ldr	r2, [r3, #4]
 800ff66:	68fb      	ldr	r3, [r7, #12]
 800ff68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ff6a:	441a      	add	r2, r3
 800ff6c:	68fb      	ldr	r3, [r7, #12]
 800ff6e:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ff70:	68fb      	ldr	r3, [r7, #12]
 800ff72:	685a      	ldr	r2, [r3, #4]
 800ff74:	68fb      	ldr	r3, [r7, #12]
 800ff76:	689b      	ldr	r3, [r3, #8]
 800ff78:	429a      	cmp	r2, r3
 800ff7a:	d32b      	bcc.n	800ffd4 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800ff7c:	68fb      	ldr	r3, [r7, #12]
 800ff7e:	681a      	ldr	r2, [r3, #0]
 800ff80:	68fb      	ldr	r3, [r7, #12]
 800ff82:	605a      	str	r2, [r3, #4]
 800ff84:	e026      	b.n	800ffd4 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800ff86:	68fb      	ldr	r3, [r7, #12]
 800ff88:	68d8      	ldr	r0, [r3, #12]
 800ff8a:	68fb      	ldr	r3, [r7, #12]
 800ff8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ff8e:	461a      	mov	r2, r3
 800ff90:	68b9      	ldr	r1, [r7, #8]
 800ff92:	f002 fc3e 	bl	8012812 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800ff96:	68fb      	ldr	r3, [r7, #12]
 800ff98:	68da      	ldr	r2, [r3, #12]
 800ff9a:	68fb      	ldr	r3, [r7, #12]
 800ff9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ff9e:	425b      	negs	r3, r3
 800ffa0:	441a      	add	r2, r3
 800ffa2:	68fb      	ldr	r3, [r7, #12]
 800ffa4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ffa6:	68fb      	ldr	r3, [r7, #12]
 800ffa8:	68da      	ldr	r2, [r3, #12]
 800ffaa:	68fb      	ldr	r3, [r7, #12]
 800ffac:	681b      	ldr	r3, [r3, #0]
 800ffae:	429a      	cmp	r2, r3
 800ffb0:	d207      	bcs.n	800ffc2 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800ffb2:	68fb      	ldr	r3, [r7, #12]
 800ffb4:	689a      	ldr	r2, [r3, #8]
 800ffb6:	68fb      	ldr	r3, [r7, #12]
 800ffb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ffba:	425b      	negs	r3, r3
 800ffbc:	441a      	add	r2, r3
 800ffbe:	68fb      	ldr	r3, [r7, #12]
 800ffc0:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800ffc2:	687b      	ldr	r3, [r7, #4]
 800ffc4:	2b02      	cmp	r3, #2
 800ffc6:	d105      	bne.n	800ffd4 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ffc8:	693b      	ldr	r3, [r7, #16]
 800ffca:	2b00      	cmp	r3, #0
 800ffcc:	d002      	beq.n	800ffd4 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800ffce:	693b      	ldr	r3, [r7, #16]
 800ffd0:	3b01      	subs	r3, #1
 800ffd2:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800ffd4:	693b      	ldr	r3, [r7, #16]
 800ffd6:	1c5a      	adds	r2, r3, #1
 800ffd8:	68fb      	ldr	r3, [r7, #12]
 800ffda:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800ffdc:	697b      	ldr	r3, [r7, #20]
}
 800ffde:	4618      	mov	r0, r3
 800ffe0:	3718      	adds	r7, #24
 800ffe2:	46bd      	mov	sp, r7
 800ffe4:	bd80      	pop	{r7, pc}

0800ffe6 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800ffe6:	b580      	push	{r7, lr}
 800ffe8:	b082      	sub	sp, #8
 800ffea:	af00      	add	r7, sp, #0
 800ffec:	6078      	str	r0, [r7, #4]
 800ffee:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800fff0:	687b      	ldr	r3, [r7, #4]
 800fff2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fff4:	2b00      	cmp	r3, #0
 800fff6:	d018      	beq.n	801002a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800fff8:	687b      	ldr	r3, [r7, #4]
 800fffa:	68da      	ldr	r2, [r3, #12]
 800fffc:	687b      	ldr	r3, [r7, #4]
 800fffe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010000:	441a      	add	r2, r3
 8010002:	687b      	ldr	r3, [r7, #4]
 8010004:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8010006:	687b      	ldr	r3, [r7, #4]
 8010008:	68da      	ldr	r2, [r3, #12]
 801000a:	687b      	ldr	r3, [r7, #4]
 801000c:	689b      	ldr	r3, [r3, #8]
 801000e:	429a      	cmp	r2, r3
 8010010:	d303      	bcc.n	801001a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8010012:	687b      	ldr	r3, [r7, #4]
 8010014:	681a      	ldr	r2, [r3, #0]
 8010016:	687b      	ldr	r3, [r7, #4]
 8010018:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801001a:	687b      	ldr	r3, [r7, #4]
 801001c:	68d9      	ldr	r1, [r3, #12]
 801001e:	687b      	ldr	r3, [r7, #4]
 8010020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010022:	461a      	mov	r2, r3
 8010024:	6838      	ldr	r0, [r7, #0]
 8010026:	f002 fbf4 	bl	8012812 <memcpy>
	}
}
 801002a:	bf00      	nop
 801002c:	3708      	adds	r7, #8
 801002e:	46bd      	mov	sp, r7
 8010030:	bd80      	pop	{r7, pc}

08010032 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8010032:	b580      	push	{r7, lr}
 8010034:	b084      	sub	sp, #16
 8010036:	af00      	add	r7, sp, #0
 8010038:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 801003a:	f001 ff7b 	bl	8011f34 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 801003e:	687b      	ldr	r3, [r7, #4]
 8010040:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010044:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8010046:	e011      	b.n	801006c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010048:	687b      	ldr	r3, [r7, #4]
 801004a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801004c:	2b00      	cmp	r3, #0
 801004e:	d012      	beq.n	8010076 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010050:	687b      	ldr	r3, [r7, #4]
 8010052:	3324      	adds	r3, #36	; 0x24
 8010054:	4618      	mov	r0, r3
 8010056:	f000 fe4b 	bl	8010cf0 <xTaskRemoveFromEventList>
 801005a:	4603      	mov	r3, r0
 801005c:	2b00      	cmp	r3, #0
 801005e:	d001      	beq.n	8010064 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8010060:	f000 ff22 	bl	8010ea8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8010064:	7bfb      	ldrb	r3, [r7, #15]
 8010066:	3b01      	subs	r3, #1
 8010068:	b2db      	uxtb	r3, r3
 801006a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801006c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010070:	2b00      	cmp	r3, #0
 8010072:	dce9      	bgt.n	8010048 <prvUnlockQueue+0x16>
 8010074:	e000      	b.n	8010078 <prvUnlockQueue+0x46>
					break;
 8010076:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8010078:	687b      	ldr	r3, [r7, #4]
 801007a:	22ff      	movs	r2, #255	; 0xff
 801007c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8010080:	f001 ff88 	bl	8011f94 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8010084:	f001 ff56 	bl	8011f34 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8010088:	687b      	ldr	r3, [r7, #4]
 801008a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801008e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8010090:	e011      	b.n	80100b6 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010092:	687b      	ldr	r3, [r7, #4]
 8010094:	691b      	ldr	r3, [r3, #16]
 8010096:	2b00      	cmp	r3, #0
 8010098:	d012      	beq.n	80100c0 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801009a:	687b      	ldr	r3, [r7, #4]
 801009c:	3310      	adds	r3, #16
 801009e:	4618      	mov	r0, r3
 80100a0:	f000 fe26 	bl	8010cf0 <xTaskRemoveFromEventList>
 80100a4:	4603      	mov	r3, r0
 80100a6:	2b00      	cmp	r3, #0
 80100a8:	d001      	beq.n	80100ae <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80100aa:	f000 fefd 	bl	8010ea8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80100ae:	7bbb      	ldrb	r3, [r7, #14]
 80100b0:	3b01      	subs	r3, #1
 80100b2:	b2db      	uxtb	r3, r3
 80100b4:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80100b6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80100ba:	2b00      	cmp	r3, #0
 80100bc:	dce9      	bgt.n	8010092 <prvUnlockQueue+0x60>
 80100be:	e000      	b.n	80100c2 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80100c0:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80100c2:	687b      	ldr	r3, [r7, #4]
 80100c4:	22ff      	movs	r2, #255	; 0xff
 80100c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80100ca:	f001 ff63 	bl	8011f94 <vPortExitCritical>
}
 80100ce:	bf00      	nop
 80100d0:	3710      	adds	r7, #16
 80100d2:	46bd      	mov	sp, r7
 80100d4:	bd80      	pop	{r7, pc}

080100d6 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80100d6:	b580      	push	{r7, lr}
 80100d8:	b084      	sub	sp, #16
 80100da:	af00      	add	r7, sp, #0
 80100dc:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80100de:	f001 ff29 	bl	8011f34 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80100e2:	687b      	ldr	r3, [r7, #4]
 80100e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80100e6:	2b00      	cmp	r3, #0
 80100e8:	d102      	bne.n	80100f0 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80100ea:	2301      	movs	r3, #1
 80100ec:	60fb      	str	r3, [r7, #12]
 80100ee:	e001      	b.n	80100f4 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80100f0:	2300      	movs	r3, #0
 80100f2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80100f4:	f001 ff4e 	bl	8011f94 <vPortExitCritical>

	return xReturn;
 80100f8:	68fb      	ldr	r3, [r7, #12]
}
 80100fa:	4618      	mov	r0, r3
 80100fc:	3710      	adds	r7, #16
 80100fe:	46bd      	mov	sp, r7
 8010100:	bd80      	pop	{r7, pc}

08010102 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8010102:	b580      	push	{r7, lr}
 8010104:	b084      	sub	sp, #16
 8010106:	af00      	add	r7, sp, #0
 8010108:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801010a:	f001 ff13 	bl	8011f34 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 801010e:	687b      	ldr	r3, [r7, #4]
 8010110:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010112:	687b      	ldr	r3, [r7, #4]
 8010114:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010116:	429a      	cmp	r2, r3
 8010118:	d102      	bne.n	8010120 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 801011a:	2301      	movs	r3, #1
 801011c:	60fb      	str	r3, [r7, #12]
 801011e:	e001      	b.n	8010124 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8010120:	2300      	movs	r3, #0
 8010122:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8010124:	f001 ff36 	bl	8011f94 <vPortExitCritical>

	return xReturn;
 8010128:	68fb      	ldr	r3, [r7, #12]
}
 801012a:	4618      	mov	r0, r3
 801012c:	3710      	adds	r7, #16
 801012e:	46bd      	mov	sp, r7
 8010130:	bd80      	pop	{r7, pc}
	...

08010134 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8010134:	b480      	push	{r7}
 8010136:	b085      	sub	sp, #20
 8010138:	af00      	add	r7, sp, #0
 801013a:	6078      	str	r0, [r7, #4]
 801013c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801013e:	2300      	movs	r3, #0
 8010140:	60fb      	str	r3, [r7, #12]
 8010142:	e014      	b.n	801016e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8010144:	4a0f      	ldr	r2, [pc, #60]	; (8010184 <vQueueAddToRegistry+0x50>)
 8010146:	68fb      	ldr	r3, [r7, #12]
 8010148:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 801014c:	2b00      	cmp	r3, #0
 801014e:	d10b      	bne.n	8010168 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8010150:	490c      	ldr	r1, [pc, #48]	; (8010184 <vQueueAddToRegistry+0x50>)
 8010152:	68fb      	ldr	r3, [r7, #12]
 8010154:	683a      	ldr	r2, [r7, #0]
 8010156:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 801015a:	4a0a      	ldr	r2, [pc, #40]	; (8010184 <vQueueAddToRegistry+0x50>)
 801015c:	68fb      	ldr	r3, [r7, #12]
 801015e:	00db      	lsls	r3, r3, #3
 8010160:	4413      	add	r3, r2
 8010162:	687a      	ldr	r2, [r7, #4]
 8010164:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8010166:	e006      	b.n	8010176 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8010168:	68fb      	ldr	r3, [r7, #12]
 801016a:	3301      	adds	r3, #1
 801016c:	60fb      	str	r3, [r7, #12]
 801016e:	68fb      	ldr	r3, [r7, #12]
 8010170:	2b07      	cmp	r3, #7
 8010172:	d9e7      	bls.n	8010144 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8010174:	bf00      	nop
 8010176:	bf00      	nop
 8010178:	3714      	adds	r7, #20
 801017a:	46bd      	mov	sp, r7
 801017c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010180:	4770      	bx	lr
 8010182:	bf00      	nop
 8010184:	20001d84 	.word	0x20001d84

08010188 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8010188:	b580      	push	{r7, lr}
 801018a:	b086      	sub	sp, #24
 801018c:	af00      	add	r7, sp, #0
 801018e:	60f8      	str	r0, [r7, #12]
 8010190:	60b9      	str	r1, [r7, #8]
 8010192:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8010194:	68fb      	ldr	r3, [r7, #12]
 8010196:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8010198:	f001 fecc 	bl	8011f34 <vPortEnterCritical>
 801019c:	697b      	ldr	r3, [r7, #20]
 801019e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80101a2:	b25b      	sxtb	r3, r3
 80101a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80101a8:	d103      	bne.n	80101b2 <vQueueWaitForMessageRestricted+0x2a>
 80101aa:	697b      	ldr	r3, [r7, #20]
 80101ac:	2200      	movs	r2, #0
 80101ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80101b2:	697b      	ldr	r3, [r7, #20]
 80101b4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80101b8:	b25b      	sxtb	r3, r3
 80101ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80101be:	d103      	bne.n	80101c8 <vQueueWaitForMessageRestricted+0x40>
 80101c0:	697b      	ldr	r3, [r7, #20]
 80101c2:	2200      	movs	r2, #0
 80101c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80101c8:	f001 fee4 	bl	8011f94 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80101cc:	697b      	ldr	r3, [r7, #20]
 80101ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80101d0:	2b00      	cmp	r3, #0
 80101d2:	d106      	bne.n	80101e2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80101d4:	697b      	ldr	r3, [r7, #20]
 80101d6:	3324      	adds	r3, #36	; 0x24
 80101d8:	687a      	ldr	r2, [r7, #4]
 80101da:	68b9      	ldr	r1, [r7, #8]
 80101dc:	4618      	mov	r0, r3
 80101de:	f000 fd5b 	bl	8010c98 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80101e2:	6978      	ldr	r0, [r7, #20]
 80101e4:	f7ff ff25 	bl	8010032 <prvUnlockQueue>
	}
 80101e8:	bf00      	nop
 80101ea:	3718      	adds	r7, #24
 80101ec:	46bd      	mov	sp, r7
 80101ee:	bd80      	pop	{r7, pc}

080101f0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80101f0:	b580      	push	{r7, lr}
 80101f2:	b08e      	sub	sp, #56	; 0x38
 80101f4:	af04      	add	r7, sp, #16
 80101f6:	60f8      	str	r0, [r7, #12]
 80101f8:	60b9      	str	r1, [r7, #8]
 80101fa:	607a      	str	r2, [r7, #4]
 80101fc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80101fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010200:	2b00      	cmp	r3, #0
 8010202:	d10a      	bne.n	801021a <xTaskCreateStatic+0x2a>
	__asm volatile
 8010204:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010208:	f383 8811 	msr	BASEPRI, r3
 801020c:	f3bf 8f6f 	isb	sy
 8010210:	f3bf 8f4f 	dsb	sy
 8010214:	623b      	str	r3, [r7, #32]
}
 8010216:	bf00      	nop
 8010218:	e7fe      	b.n	8010218 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 801021a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801021c:	2b00      	cmp	r3, #0
 801021e:	d10a      	bne.n	8010236 <xTaskCreateStatic+0x46>
	__asm volatile
 8010220:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010224:	f383 8811 	msr	BASEPRI, r3
 8010228:	f3bf 8f6f 	isb	sy
 801022c:	f3bf 8f4f 	dsb	sy
 8010230:	61fb      	str	r3, [r7, #28]
}
 8010232:	bf00      	nop
 8010234:	e7fe      	b.n	8010234 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8010236:	23c0      	movs	r3, #192	; 0xc0
 8010238:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 801023a:	693b      	ldr	r3, [r7, #16]
 801023c:	2bc0      	cmp	r3, #192	; 0xc0
 801023e:	d00a      	beq.n	8010256 <xTaskCreateStatic+0x66>
	__asm volatile
 8010240:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010244:	f383 8811 	msr	BASEPRI, r3
 8010248:	f3bf 8f6f 	isb	sy
 801024c:	f3bf 8f4f 	dsb	sy
 8010250:	61bb      	str	r3, [r7, #24]
}
 8010252:	bf00      	nop
 8010254:	e7fe      	b.n	8010254 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8010256:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8010258:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801025a:	2b00      	cmp	r3, #0
 801025c:	d01e      	beq.n	801029c <xTaskCreateStatic+0xac>
 801025e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010260:	2b00      	cmp	r3, #0
 8010262:	d01b      	beq.n	801029c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8010264:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010266:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8010268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801026a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801026c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 801026e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010270:	2202      	movs	r2, #2
 8010272:	f883 20bd 	strb.w	r2, [r3, #189]	; 0xbd
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8010276:	2300      	movs	r3, #0
 8010278:	9303      	str	r3, [sp, #12]
 801027a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801027c:	9302      	str	r3, [sp, #8]
 801027e:	f107 0314 	add.w	r3, r7, #20
 8010282:	9301      	str	r3, [sp, #4]
 8010284:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010286:	9300      	str	r3, [sp, #0]
 8010288:	683b      	ldr	r3, [r7, #0]
 801028a:	687a      	ldr	r2, [r7, #4]
 801028c:	68b9      	ldr	r1, [r7, #8]
 801028e:	68f8      	ldr	r0, [r7, #12]
 8010290:	f000 f850 	bl	8010334 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8010294:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010296:	f000 f8f7 	bl	8010488 <prvAddNewTaskToReadyList>
 801029a:	e001      	b.n	80102a0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 801029c:	2300      	movs	r3, #0
 801029e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80102a0:	697b      	ldr	r3, [r7, #20]
	}
 80102a2:	4618      	mov	r0, r3
 80102a4:	3728      	adds	r7, #40	; 0x28
 80102a6:	46bd      	mov	sp, r7
 80102a8:	bd80      	pop	{r7, pc}

080102aa <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80102aa:	b580      	push	{r7, lr}
 80102ac:	b08c      	sub	sp, #48	; 0x30
 80102ae:	af04      	add	r7, sp, #16
 80102b0:	60f8      	str	r0, [r7, #12]
 80102b2:	60b9      	str	r1, [r7, #8]
 80102b4:	603b      	str	r3, [r7, #0]
 80102b6:	4613      	mov	r3, r2
 80102b8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80102ba:	88fb      	ldrh	r3, [r7, #6]
 80102bc:	009b      	lsls	r3, r3, #2
 80102be:	4618      	mov	r0, r3
 80102c0:	f001 ff5a 	bl	8012178 <pvPortMalloc>
 80102c4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80102c6:	697b      	ldr	r3, [r7, #20]
 80102c8:	2b00      	cmp	r3, #0
 80102ca:	d00e      	beq.n	80102ea <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80102cc:	20c0      	movs	r0, #192	; 0xc0
 80102ce:	f001 ff53 	bl	8012178 <pvPortMalloc>
 80102d2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80102d4:	69fb      	ldr	r3, [r7, #28]
 80102d6:	2b00      	cmp	r3, #0
 80102d8:	d003      	beq.n	80102e2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80102da:	69fb      	ldr	r3, [r7, #28]
 80102dc:	697a      	ldr	r2, [r7, #20]
 80102de:	631a      	str	r2, [r3, #48]	; 0x30
 80102e0:	e005      	b.n	80102ee <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80102e2:	6978      	ldr	r0, [r7, #20]
 80102e4:	f002 f814 	bl	8012310 <vPortFree>
 80102e8:	e001      	b.n	80102ee <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80102ea:	2300      	movs	r3, #0
 80102ec:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80102ee:	69fb      	ldr	r3, [r7, #28]
 80102f0:	2b00      	cmp	r3, #0
 80102f2:	d017      	beq.n	8010324 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80102f4:	69fb      	ldr	r3, [r7, #28]
 80102f6:	2200      	movs	r2, #0
 80102f8:	f883 20bd 	strb.w	r2, [r3, #189]	; 0xbd
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80102fc:	88fa      	ldrh	r2, [r7, #6]
 80102fe:	2300      	movs	r3, #0
 8010300:	9303      	str	r3, [sp, #12]
 8010302:	69fb      	ldr	r3, [r7, #28]
 8010304:	9302      	str	r3, [sp, #8]
 8010306:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010308:	9301      	str	r3, [sp, #4]
 801030a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801030c:	9300      	str	r3, [sp, #0]
 801030e:	683b      	ldr	r3, [r7, #0]
 8010310:	68b9      	ldr	r1, [r7, #8]
 8010312:	68f8      	ldr	r0, [r7, #12]
 8010314:	f000 f80e 	bl	8010334 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8010318:	69f8      	ldr	r0, [r7, #28]
 801031a:	f000 f8b5 	bl	8010488 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 801031e:	2301      	movs	r3, #1
 8010320:	61bb      	str	r3, [r7, #24]
 8010322:	e002      	b.n	801032a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8010324:	f04f 33ff 	mov.w	r3, #4294967295
 8010328:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 801032a:	69bb      	ldr	r3, [r7, #24]
	}
 801032c:	4618      	mov	r0, r3
 801032e:	3720      	adds	r7, #32
 8010330:	46bd      	mov	sp, r7
 8010332:	bd80      	pop	{r7, pc}

08010334 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8010334:	b580      	push	{r7, lr}
 8010336:	b088      	sub	sp, #32
 8010338:	af00      	add	r7, sp, #0
 801033a:	60f8      	str	r0, [r7, #12]
 801033c:	60b9      	str	r1, [r7, #8]
 801033e:	607a      	str	r2, [r7, #4]
 8010340:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8010342:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010344:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8010346:	687b      	ldr	r3, [r7, #4]
 8010348:	009b      	lsls	r3, r3, #2
 801034a:	461a      	mov	r2, r3
 801034c:	21a5      	movs	r1, #165	; 0xa5
 801034e:	f002 fa88 	bl	8012862 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8010352:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010354:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010356:	687b      	ldr	r3, [r7, #4]
 8010358:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 801035c:	3b01      	subs	r3, #1
 801035e:	009b      	lsls	r3, r3, #2
 8010360:	4413      	add	r3, r2
 8010362:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8010364:	69bb      	ldr	r3, [r7, #24]
 8010366:	f023 0307 	bic.w	r3, r3, #7
 801036a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 801036c:	69bb      	ldr	r3, [r7, #24]
 801036e:	f003 0307 	and.w	r3, r3, #7
 8010372:	2b00      	cmp	r3, #0
 8010374:	d00a      	beq.n	801038c <prvInitialiseNewTask+0x58>
	__asm volatile
 8010376:	f04f 0350 	mov.w	r3, #80	; 0x50
 801037a:	f383 8811 	msr	BASEPRI, r3
 801037e:	f3bf 8f6f 	isb	sy
 8010382:	f3bf 8f4f 	dsb	sy
 8010386:	617b      	str	r3, [r7, #20]
}
 8010388:	bf00      	nop
 801038a:	e7fe      	b.n	801038a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 801038c:	68bb      	ldr	r3, [r7, #8]
 801038e:	2b00      	cmp	r3, #0
 8010390:	d01f      	beq.n	80103d2 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8010392:	2300      	movs	r3, #0
 8010394:	61fb      	str	r3, [r7, #28]
 8010396:	e012      	b.n	80103be <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8010398:	68ba      	ldr	r2, [r7, #8]
 801039a:	69fb      	ldr	r3, [r7, #28]
 801039c:	4413      	add	r3, r2
 801039e:	7819      	ldrb	r1, [r3, #0]
 80103a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80103a2:	69fb      	ldr	r3, [r7, #28]
 80103a4:	4413      	add	r3, r2
 80103a6:	3334      	adds	r3, #52	; 0x34
 80103a8:	460a      	mov	r2, r1
 80103aa:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80103ac:	68ba      	ldr	r2, [r7, #8]
 80103ae:	69fb      	ldr	r3, [r7, #28]
 80103b0:	4413      	add	r3, r2
 80103b2:	781b      	ldrb	r3, [r3, #0]
 80103b4:	2b00      	cmp	r3, #0
 80103b6:	d006      	beq.n	80103c6 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80103b8:	69fb      	ldr	r3, [r7, #28]
 80103ba:	3301      	adds	r3, #1
 80103bc:	61fb      	str	r3, [r7, #28]
 80103be:	69fb      	ldr	r3, [r7, #28]
 80103c0:	2b0f      	cmp	r3, #15
 80103c2:	d9e9      	bls.n	8010398 <prvInitialiseNewTask+0x64>
 80103c4:	e000      	b.n	80103c8 <prvInitialiseNewTask+0x94>
			{
				break;
 80103c6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80103c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80103ca:	2200      	movs	r2, #0
 80103cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80103d0:	e003      	b.n	80103da <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80103d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80103d4:	2200      	movs	r2, #0
 80103d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80103da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80103dc:	2b37      	cmp	r3, #55	; 0x37
 80103de:	d901      	bls.n	80103e4 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80103e0:	2337      	movs	r3, #55	; 0x37
 80103e2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80103e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80103e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80103e8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80103ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80103ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80103ee:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80103f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80103f2:	2200      	movs	r2, #0
 80103f4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80103f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80103f8:	3304      	adds	r3, #4
 80103fa:	4618      	mov	r0, r3
 80103fc:	f7ff f89a 	bl	800f534 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8010400:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010402:	3318      	adds	r3, #24
 8010404:	4618      	mov	r0, r3
 8010406:	f7ff f895 	bl	800f534 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 801040a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801040c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801040e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010410:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010412:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8010416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010418:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 801041a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801041c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801041e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 8010420:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010422:	2200      	movs	r2, #0
 8010424:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8010426:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010428:	2200      	movs	r2, #0
 801042a:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801042e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010430:	2200      	movs	r2, #0
 8010432:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8010436:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010438:	3358      	adds	r3, #88	; 0x58
 801043a:	2260      	movs	r2, #96	; 0x60
 801043c:	2100      	movs	r1, #0
 801043e:	4618      	mov	r0, r3
 8010440:	f002 fa0f 	bl	8012862 <memset>
 8010444:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010446:	4a0d      	ldr	r2, [pc, #52]	; (801047c <prvInitialiseNewTask+0x148>)
 8010448:	65da      	str	r2, [r3, #92]	; 0x5c
 801044a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801044c:	4a0c      	ldr	r2, [pc, #48]	; (8010480 <prvInitialiseNewTask+0x14c>)
 801044e:	661a      	str	r2, [r3, #96]	; 0x60
 8010450:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010452:	4a0c      	ldr	r2, [pc, #48]	; (8010484 <prvInitialiseNewTask+0x150>)
 8010454:	665a      	str	r2, [r3, #100]	; 0x64
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8010456:	683a      	ldr	r2, [r7, #0]
 8010458:	68f9      	ldr	r1, [r7, #12]
 801045a:	69b8      	ldr	r0, [r7, #24]
 801045c:	f001 fc3a 	bl	8011cd4 <pxPortInitialiseStack>
 8010460:	4602      	mov	r2, r0
 8010462:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010464:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8010466:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010468:	2b00      	cmp	r3, #0
 801046a:	d002      	beq.n	8010472 <prvInitialiseNewTask+0x13e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 801046c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801046e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010470:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010472:	bf00      	nop
 8010474:	3720      	adds	r7, #32
 8010476:	46bd      	mov	sp, r7
 8010478:	bd80      	pop	{r7, pc}
 801047a:	bf00      	nop
 801047c:	080159e8 	.word	0x080159e8
 8010480:	08015a08 	.word	0x08015a08
 8010484:	080159c8 	.word	0x080159c8

08010488 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8010488:	b580      	push	{r7, lr}
 801048a:	b082      	sub	sp, #8
 801048c:	af00      	add	r7, sp, #0
 801048e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8010490:	f001 fd50 	bl	8011f34 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8010494:	4b2d      	ldr	r3, [pc, #180]	; (801054c <prvAddNewTaskToReadyList+0xc4>)
 8010496:	681b      	ldr	r3, [r3, #0]
 8010498:	3301      	adds	r3, #1
 801049a:	4a2c      	ldr	r2, [pc, #176]	; (801054c <prvAddNewTaskToReadyList+0xc4>)
 801049c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 801049e:	4b2c      	ldr	r3, [pc, #176]	; (8010550 <prvAddNewTaskToReadyList+0xc8>)
 80104a0:	681b      	ldr	r3, [r3, #0]
 80104a2:	2b00      	cmp	r3, #0
 80104a4:	d109      	bne.n	80104ba <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80104a6:	4a2a      	ldr	r2, [pc, #168]	; (8010550 <prvAddNewTaskToReadyList+0xc8>)
 80104a8:	687b      	ldr	r3, [r7, #4]
 80104aa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80104ac:	4b27      	ldr	r3, [pc, #156]	; (801054c <prvAddNewTaskToReadyList+0xc4>)
 80104ae:	681b      	ldr	r3, [r3, #0]
 80104b0:	2b01      	cmp	r3, #1
 80104b2:	d110      	bne.n	80104d6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80104b4:	f000 fd1c 	bl	8010ef0 <prvInitialiseTaskLists>
 80104b8:	e00d      	b.n	80104d6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80104ba:	4b26      	ldr	r3, [pc, #152]	; (8010554 <prvAddNewTaskToReadyList+0xcc>)
 80104bc:	681b      	ldr	r3, [r3, #0]
 80104be:	2b00      	cmp	r3, #0
 80104c0:	d109      	bne.n	80104d6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80104c2:	4b23      	ldr	r3, [pc, #140]	; (8010550 <prvAddNewTaskToReadyList+0xc8>)
 80104c4:	681b      	ldr	r3, [r3, #0]
 80104c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80104c8:	687b      	ldr	r3, [r7, #4]
 80104ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80104cc:	429a      	cmp	r2, r3
 80104ce:	d802      	bhi.n	80104d6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80104d0:	4a1f      	ldr	r2, [pc, #124]	; (8010550 <prvAddNewTaskToReadyList+0xc8>)
 80104d2:	687b      	ldr	r3, [r7, #4]
 80104d4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80104d6:	4b20      	ldr	r3, [pc, #128]	; (8010558 <prvAddNewTaskToReadyList+0xd0>)
 80104d8:	681b      	ldr	r3, [r3, #0]
 80104da:	3301      	adds	r3, #1
 80104dc:	4a1e      	ldr	r2, [pc, #120]	; (8010558 <prvAddNewTaskToReadyList+0xd0>)
 80104de:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80104e0:	4b1d      	ldr	r3, [pc, #116]	; (8010558 <prvAddNewTaskToReadyList+0xd0>)
 80104e2:	681a      	ldr	r2, [r3, #0]
 80104e4:	687b      	ldr	r3, [r7, #4]
 80104e6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80104e8:	687b      	ldr	r3, [r7, #4]
 80104ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80104ec:	4b1b      	ldr	r3, [pc, #108]	; (801055c <prvAddNewTaskToReadyList+0xd4>)
 80104ee:	681b      	ldr	r3, [r3, #0]
 80104f0:	429a      	cmp	r2, r3
 80104f2:	d903      	bls.n	80104fc <prvAddNewTaskToReadyList+0x74>
 80104f4:	687b      	ldr	r3, [r7, #4]
 80104f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80104f8:	4a18      	ldr	r2, [pc, #96]	; (801055c <prvAddNewTaskToReadyList+0xd4>)
 80104fa:	6013      	str	r3, [r2, #0]
 80104fc:	687b      	ldr	r3, [r7, #4]
 80104fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010500:	4613      	mov	r3, r2
 8010502:	009b      	lsls	r3, r3, #2
 8010504:	4413      	add	r3, r2
 8010506:	009b      	lsls	r3, r3, #2
 8010508:	4a15      	ldr	r2, [pc, #84]	; (8010560 <prvAddNewTaskToReadyList+0xd8>)
 801050a:	441a      	add	r2, r3
 801050c:	687b      	ldr	r3, [r7, #4]
 801050e:	3304      	adds	r3, #4
 8010510:	4619      	mov	r1, r3
 8010512:	4610      	mov	r0, r2
 8010514:	f7ff f81b 	bl	800f54e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8010518:	f001 fd3c 	bl	8011f94 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 801051c:	4b0d      	ldr	r3, [pc, #52]	; (8010554 <prvAddNewTaskToReadyList+0xcc>)
 801051e:	681b      	ldr	r3, [r3, #0]
 8010520:	2b00      	cmp	r3, #0
 8010522:	d00e      	beq.n	8010542 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8010524:	4b0a      	ldr	r3, [pc, #40]	; (8010550 <prvAddNewTaskToReadyList+0xc8>)
 8010526:	681b      	ldr	r3, [r3, #0]
 8010528:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801052a:	687b      	ldr	r3, [r7, #4]
 801052c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801052e:	429a      	cmp	r2, r3
 8010530:	d207      	bcs.n	8010542 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8010532:	4b0c      	ldr	r3, [pc, #48]	; (8010564 <prvAddNewTaskToReadyList+0xdc>)
 8010534:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010538:	601a      	str	r2, [r3, #0]
 801053a:	f3bf 8f4f 	dsb	sy
 801053e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010542:	bf00      	nop
 8010544:	3708      	adds	r7, #8
 8010546:	46bd      	mov	sp, r7
 8010548:	bd80      	pop	{r7, pc}
 801054a:	bf00      	nop
 801054c:	20002298 	.word	0x20002298
 8010550:	20001dc4 	.word	0x20001dc4
 8010554:	200022a4 	.word	0x200022a4
 8010558:	200022b4 	.word	0x200022b4
 801055c:	200022a0 	.word	0x200022a0
 8010560:	20001dc8 	.word	0x20001dc8
 8010564:	e000ed04 	.word	0xe000ed04

08010568 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8010568:	b580      	push	{r7, lr}
 801056a:	b084      	sub	sp, #16
 801056c:	af00      	add	r7, sp, #0
 801056e:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8010570:	f001 fce0 	bl	8011f34 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8010574:	687b      	ldr	r3, [r7, #4]
 8010576:	2b00      	cmp	r3, #0
 8010578:	d102      	bne.n	8010580 <vTaskDelete+0x18>
 801057a:	4b2c      	ldr	r3, [pc, #176]	; (801062c <vTaskDelete+0xc4>)
 801057c:	681b      	ldr	r3, [r3, #0]
 801057e:	e000      	b.n	8010582 <vTaskDelete+0x1a>
 8010580:	687b      	ldr	r3, [r7, #4]
 8010582:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010584:	68fb      	ldr	r3, [r7, #12]
 8010586:	3304      	adds	r3, #4
 8010588:	4618      	mov	r0, r3
 801058a:	f7ff f83d 	bl	800f608 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801058e:	68fb      	ldr	r3, [r7, #12]
 8010590:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010592:	2b00      	cmp	r3, #0
 8010594:	d004      	beq.n	80105a0 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8010596:	68fb      	ldr	r3, [r7, #12]
 8010598:	3318      	adds	r3, #24
 801059a:	4618      	mov	r0, r3
 801059c:	f7ff f834 	bl	800f608 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 80105a0:	4b23      	ldr	r3, [pc, #140]	; (8010630 <vTaskDelete+0xc8>)
 80105a2:	681b      	ldr	r3, [r3, #0]
 80105a4:	3301      	adds	r3, #1
 80105a6:	4a22      	ldr	r2, [pc, #136]	; (8010630 <vTaskDelete+0xc8>)
 80105a8:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 80105aa:	4b20      	ldr	r3, [pc, #128]	; (801062c <vTaskDelete+0xc4>)
 80105ac:	681b      	ldr	r3, [r3, #0]
 80105ae:	68fa      	ldr	r2, [r7, #12]
 80105b0:	429a      	cmp	r2, r3
 80105b2:	d10b      	bne.n	80105cc <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 80105b4:	68fb      	ldr	r3, [r7, #12]
 80105b6:	3304      	adds	r3, #4
 80105b8:	4619      	mov	r1, r3
 80105ba:	481e      	ldr	r0, [pc, #120]	; (8010634 <vTaskDelete+0xcc>)
 80105bc:	f7fe ffc7 	bl	800f54e <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 80105c0:	4b1d      	ldr	r3, [pc, #116]	; (8010638 <vTaskDelete+0xd0>)
 80105c2:	681b      	ldr	r3, [r3, #0]
 80105c4:	3301      	adds	r3, #1
 80105c6:	4a1c      	ldr	r2, [pc, #112]	; (8010638 <vTaskDelete+0xd0>)
 80105c8:	6013      	str	r3, [r2, #0]
 80105ca:	e009      	b.n	80105e0 <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 80105cc:	4b1b      	ldr	r3, [pc, #108]	; (801063c <vTaskDelete+0xd4>)
 80105ce:	681b      	ldr	r3, [r3, #0]
 80105d0:	3b01      	subs	r3, #1
 80105d2:	4a1a      	ldr	r2, [pc, #104]	; (801063c <vTaskDelete+0xd4>)
 80105d4:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 80105d6:	68f8      	ldr	r0, [r7, #12]
 80105d8:	f000 fcf8 	bl	8010fcc <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 80105dc:	f000 fd2a 	bl	8011034 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 80105e0:	f001 fcd8 	bl	8011f94 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 80105e4:	4b16      	ldr	r3, [pc, #88]	; (8010640 <vTaskDelete+0xd8>)
 80105e6:	681b      	ldr	r3, [r3, #0]
 80105e8:	2b00      	cmp	r3, #0
 80105ea:	d01b      	beq.n	8010624 <vTaskDelete+0xbc>
		{
			if( pxTCB == pxCurrentTCB )
 80105ec:	4b0f      	ldr	r3, [pc, #60]	; (801062c <vTaskDelete+0xc4>)
 80105ee:	681b      	ldr	r3, [r3, #0]
 80105f0:	68fa      	ldr	r2, [r7, #12]
 80105f2:	429a      	cmp	r2, r3
 80105f4:	d116      	bne.n	8010624 <vTaskDelete+0xbc>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 80105f6:	4b13      	ldr	r3, [pc, #76]	; (8010644 <vTaskDelete+0xdc>)
 80105f8:	681b      	ldr	r3, [r3, #0]
 80105fa:	2b00      	cmp	r3, #0
 80105fc:	d00a      	beq.n	8010614 <vTaskDelete+0xac>
	__asm volatile
 80105fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010602:	f383 8811 	msr	BASEPRI, r3
 8010606:	f3bf 8f6f 	isb	sy
 801060a:	f3bf 8f4f 	dsb	sy
 801060e:	60bb      	str	r3, [r7, #8]
}
 8010610:	bf00      	nop
 8010612:	e7fe      	b.n	8010612 <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 8010614:	4b0c      	ldr	r3, [pc, #48]	; (8010648 <vTaskDelete+0xe0>)
 8010616:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801061a:	601a      	str	r2, [r3, #0]
 801061c:	f3bf 8f4f 	dsb	sy
 8010620:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8010624:	bf00      	nop
 8010626:	3710      	adds	r7, #16
 8010628:	46bd      	mov	sp, r7
 801062a:	bd80      	pop	{r7, pc}
 801062c:	20001dc4 	.word	0x20001dc4
 8010630:	200022b4 	.word	0x200022b4
 8010634:	2000226c 	.word	0x2000226c
 8010638:	20002280 	.word	0x20002280
 801063c:	20002298 	.word	0x20002298
 8010640:	200022a4 	.word	0x200022a4
 8010644:	200022c0 	.word	0x200022c0
 8010648:	e000ed04 	.word	0xe000ed04

0801064c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 801064c:	b580      	push	{r7, lr}
 801064e:	b084      	sub	sp, #16
 8010650:	af00      	add	r7, sp, #0
 8010652:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8010654:	2300      	movs	r3, #0
 8010656:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8010658:	687b      	ldr	r3, [r7, #4]
 801065a:	2b00      	cmp	r3, #0
 801065c:	d017      	beq.n	801068e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 801065e:	4b13      	ldr	r3, [pc, #76]	; (80106ac <vTaskDelay+0x60>)
 8010660:	681b      	ldr	r3, [r3, #0]
 8010662:	2b00      	cmp	r3, #0
 8010664:	d00a      	beq.n	801067c <vTaskDelay+0x30>
	__asm volatile
 8010666:	f04f 0350 	mov.w	r3, #80	; 0x50
 801066a:	f383 8811 	msr	BASEPRI, r3
 801066e:	f3bf 8f6f 	isb	sy
 8010672:	f3bf 8f4f 	dsb	sy
 8010676:	60bb      	str	r3, [r7, #8]
}
 8010678:	bf00      	nop
 801067a:	e7fe      	b.n	801067a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 801067c:	f000 f8f2 	bl	8010864 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8010680:	2100      	movs	r1, #0
 8010682:	6878      	ldr	r0, [r7, #4]
 8010684:	f000 ff84 	bl	8011590 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8010688:	f000 f8fa 	bl	8010880 <xTaskResumeAll>
 801068c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 801068e:	68fb      	ldr	r3, [r7, #12]
 8010690:	2b00      	cmp	r3, #0
 8010692:	d107      	bne.n	80106a4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8010694:	4b06      	ldr	r3, [pc, #24]	; (80106b0 <vTaskDelay+0x64>)
 8010696:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801069a:	601a      	str	r2, [r3, #0]
 801069c:	f3bf 8f4f 	dsb	sy
 80106a0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80106a4:	bf00      	nop
 80106a6:	3710      	adds	r7, #16
 80106a8:	46bd      	mov	sp, r7
 80106aa:	bd80      	pop	{r7, pc}
 80106ac:	200022c0 	.word	0x200022c0
 80106b0:	e000ed04 	.word	0xe000ed04

080106b4 <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 80106b4:	b580      	push	{r7, lr}
 80106b6:	b088      	sub	sp, #32
 80106b8:	af00      	add	r7, sp, #0
 80106ba:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
	const TCB_t * const pxTCB = xTask;
 80106bc:	687b      	ldr	r3, [r7, #4]
 80106be:	61bb      	str	r3, [r7, #24]

		configASSERT( pxTCB );
 80106c0:	69bb      	ldr	r3, [r7, #24]
 80106c2:	2b00      	cmp	r3, #0
 80106c4:	d10a      	bne.n	80106dc <eTaskGetState+0x28>
	__asm volatile
 80106c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80106ca:	f383 8811 	msr	BASEPRI, r3
 80106ce:	f3bf 8f6f 	isb	sy
 80106d2:	f3bf 8f4f 	dsb	sy
 80106d6:	60bb      	str	r3, [r7, #8]
}
 80106d8:	bf00      	nop
 80106da:	e7fe      	b.n	80106da <eTaskGetState+0x26>

		if( pxTCB == pxCurrentTCB )
 80106dc:	4b23      	ldr	r3, [pc, #140]	; (801076c <eTaskGetState+0xb8>)
 80106de:	681b      	ldr	r3, [r3, #0]
 80106e0:	69ba      	ldr	r2, [r7, #24]
 80106e2:	429a      	cmp	r2, r3
 80106e4:	d102      	bne.n	80106ec <eTaskGetState+0x38>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 80106e6:	2300      	movs	r3, #0
 80106e8:	77fb      	strb	r3, [r7, #31]
 80106ea:	e03a      	b.n	8010762 <eTaskGetState+0xae>
		}
		else
		{
			taskENTER_CRITICAL();
 80106ec:	f001 fc22 	bl	8011f34 <vPortEnterCritical>
			{
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 80106f0:	69bb      	ldr	r3, [r7, #24]
 80106f2:	695b      	ldr	r3, [r3, #20]
 80106f4:	617b      	str	r3, [r7, #20]
				pxDelayedList = pxDelayedTaskList;
 80106f6:	4b1e      	ldr	r3, [pc, #120]	; (8010770 <eTaskGetState+0xbc>)
 80106f8:	681b      	ldr	r3, [r3, #0]
 80106fa:	613b      	str	r3, [r7, #16]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 80106fc:	4b1d      	ldr	r3, [pc, #116]	; (8010774 <eTaskGetState+0xc0>)
 80106fe:	681b      	ldr	r3, [r3, #0]
 8010700:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 8010702:	f001 fc47 	bl	8011f94 <vPortExitCritical>

			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 8010706:	697a      	ldr	r2, [r7, #20]
 8010708:	693b      	ldr	r3, [r7, #16]
 801070a:	429a      	cmp	r2, r3
 801070c:	d003      	beq.n	8010716 <eTaskGetState+0x62>
 801070e:	697a      	ldr	r2, [r7, #20]
 8010710:	68fb      	ldr	r3, [r7, #12]
 8010712:	429a      	cmp	r2, r3
 8010714:	d102      	bne.n	801071c <eTaskGetState+0x68>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 8010716:	2302      	movs	r3, #2
 8010718:	77fb      	strb	r3, [r7, #31]
 801071a:	e022      	b.n	8010762 <eTaskGetState+0xae>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 801071c:	697b      	ldr	r3, [r7, #20]
 801071e:	4a16      	ldr	r2, [pc, #88]	; (8010778 <eTaskGetState+0xc4>)
 8010720:	4293      	cmp	r3, r2
 8010722:	d112      	bne.n	801074a <eTaskGetState+0x96>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it blocked
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 8010724:	69bb      	ldr	r3, [r7, #24]
 8010726:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010728:	2b00      	cmp	r3, #0
 801072a:	d10b      	bne.n	8010744 <eTaskGetState+0x90>
						{
							/* The task does not appear on the event list item of
							and of the RTOS objects, but could still be in the
							blocked state if it is waiting on its notification
							rather than waiting on an object. */
							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 801072c:	69bb      	ldr	r3, [r7, #24]
 801072e:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 8010732:	b2db      	uxtb	r3, r3
 8010734:	2b01      	cmp	r3, #1
 8010736:	d102      	bne.n	801073e <eTaskGetState+0x8a>
							{
								eReturn = eBlocked;
 8010738:	2302      	movs	r3, #2
 801073a:	77fb      	strb	r3, [r7, #31]
 801073c:	e011      	b.n	8010762 <eTaskGetState+0xae>
							}
							else
							{
								eReturn = eSuspended;
 801073e:	2303      	movs	r3, #3
 8010740:	77fb      	strb	r3, [r7, #31]
 8010742:	e00e      	b.n	8010762 <eTaskGetState+0xae>
						}
						#endif
					}
					else
					{
						eReturn = eBlocked;
 8010744:	2302      	movs	r3, #2
 8010746:	77fb      	strb	r3, [r7, #31]
 8010748:	e00b      	b.n	8010762 <eTaskGetState+0xae>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 801074a:	697b      	ldr	r3, [r7, #20]
 801074c:	4a0b      	ldr	r2, [pc, #44]	; (801077c <eTaskGetState+0xc8>)
 801074e:	4293      	cmp	r3, r2
 8010750:	d002      	beq.n	8010758 <eTaskGetState+0xa4>
 8010752:	697b      	ldr	r3, [r7, #20]
 8010754:	2b00      	cmp	r3, #0
 8010756:	d102      	bne.n	801075e <eTaskGetState+0xaa>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 8010758:	2304      	movs	r3, #4
 801075a:	77fb      	strb	r3, [r7, #31]
 801075c:	e001      	b.n	8010762 <eTaskGetState+0xae>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 801075e:	2301      	movs	r3, #1
 8010760:	77fb      	strb	r3, [r7, #31]
			}
		}

		return eReturn;
 8010762:	7ffb      	ldrb	r3, [r7, #31]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8010764:	4618      	mov	r0, r3
 8010766:	3720      	adds	r7, #32
 8010768:	46bd      	mov	sp, r7
 801076a:	bd80      	pop	{r7, pc}
 801076c:	20001dc4 	.word	0x20001dc4
 8010770:	20002250 	.word	0x20002250
 8010774:	20002254 	.word	0x20002254
 8010778:	20002284 	.word	0x20002284
 801077c:	2000226c 	.word	0x2000226c

08010780 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8010780:	b580      	push	{r7, lr}
 8010782:	b08a      	sub	sp, #40	; 0x28
 8010784:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8010786:	2300      	movs	r3, #0
 8010788:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 801078a:	2300      	movs	r3, #0
 801078c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 801078e:	463a      	mov	r2, r7
 8010790:	1d39      	adds	r1, r7, #4
 8010792:	f107 0308 	add.w	r3, r7, #8
 8010796:	4618      	mov	r0, r3
 8010798:	f7fe fe78 	bl	800f48c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 801079c:	6839      	ldr	r1, [r7, #0]
 801079e:	687b      	ldr	r3, [r7, #4]
 80107a0:	68ba      	ldr	r2, [r7, #8]
 80107a2:	9202      	str	r2, [sp, #8]
 80107a4:	9301      	str	r3, [sp, #4]
 80107a6:	2300      	movs	r3, #0
 80107a8:	9300      	str	r3, [sp, #0]
 80107aa:	2300      	movs	r3, #0
 80107ac:	460a      	mov	r2, r1
 80107ae:	4925      	ldr	r1, [pc, #148]	; (8010844 <vTaskStartScheduler+0xc4>)
 80107b0:	4825      	ldr	r0, [pc, #148]	; (8010848 <vTaskStartScheduler+0xc8>)
 80107b2:	f7ff fd1d 	bl	80101f0 <xTaskCreateStatic>
 80107b6:	4603      	mov	r3, r0
 80107b8:	4a24      	ldr	r2, [pc, #144]	; (801084c <vTaskStartScheduler+0xcc>)
 80107ba:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80107bc:	4b23      	ldr	r3, [pc, #140]	; (801084c <vTaskStartScheduler+0xcc>)
 80107be:	681b      	ldr	r3, [r3, #0]
 80107c0:	2b00      	cmp	r3, #0
 80107c2:	d002      	beq.n	80107ca <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80107c4:	2301      	movs	r3, #1
 80107c6:	617b      	str	r3, [r7, #20]
 80107c8:	e001      	b.n	80107ce <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80107ca:	2300      	movs	r3, #0
 80107cc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80107ce:	697b      	ldr	r3, [r7, #20]
 80107d0:	2b01      	cmp	r3, #1
 80107d2:	d102      	bne.n	80107da <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80107d4:	f000 ff30 	bl	8011638 <xTimerCreateTimerTask>
 80107d8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80107da:	697b      	ldr	r3, [r7, #20]
 80107dc:	2b01      	cmp	r3, #1
 80107de:	d11d      	bne.n	801081c <vTaskStartScheduler+0x9c>
	__asm volatile
 80107e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80107e4:	f383 8811 	msr	BASEPRI, r3
 80107e8:	f3bf 8f6f 	isb	sy
 80107ec:	f3bf 8f4f 	dsb	sy
 80107f0:	613b      	str	r3, [r7, #16]
}
 80107f2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80107f4:	4b16      	ldr	r3, [pc, #88]	; (8010850 <vTaskStartScheduler+0xd0>)
 80107f6:	681b      	ldr	r3, [r3, #0]
 80107f8:	3358      	adds	r3, #88	; 0x58
 80107fa:	4a16      	ldr	r2, [pc, #88]	; (8010854 <vTaskStartScheduler+0xd4>)
 80107fc:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80107fe:	4b16      	ldr	r3, [pc, #88]	; (8010858 <vTaskStartScheduler+0xd8>)
 8010800:	f04f 32ff 	mov.w	r2, #4294967295
 8010804:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8010806:	4b15      	ldr	r3, [pc, #84]	; (801085c <vTaskStartScheduler+0xdc>)
 8010808:	2201      	movs	r2, #1
 801080a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 801080c:	4b14      	ldr	r3, [pc, #80]	; (8010860 <vTaskStartScheduler+0xe0>)
 801080e:	2200      	movs	r2, #0
 8010810:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 8010812:	f7ef fedf 	bl	80005d4 <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8010816:	f001 faeb 	bl	8011df0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 801081a:	e00e      	b.n	801083a <vTaskStartScheduler+0xba>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 801081c:	697b      	ldr	r3, [r7, #20]
 801081e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010822:	d10a      	bne.n	801083a <vTaskStartScheduler+0xba>
	__asm volatile
 8010824:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010828:	f383 8811 	msr	BASEPRI, r3
 801082c:	f3bf 8f6f 	isb	sy
 8010830:	f3bf 8f4f 	dsb	sy
 8010834:	60fb      	str	r3, [r7, #12]
}
 8010836:	bf00      	nop
 8010838:	e7fe      	b.n	8010838 <vTaskStartScheduler+0xb8>
}
 801083a:	bf00      	nop
 801083c:	3718      	adds	r7, #24
 801083e:	46bd      	mov	sp, r7
 8010840:	bd80      	pop	{r7, pc}
 8010842:	bf00      	nop
 8010844:	080154fc 	.word	0x080154fc
 8010848:	08010ec1 	.word	0x08010ec1
 801084c:	200022bc 	.word	0x200022bc
 8010850:	20001dc4 	.word	0x20001dc4
 8010854:	20000054 	.word	0x20000054
 8010858:	200022b8 	.word	0x200022b8
 801085c:	200022a4 	.word	0x200022a4
 8010860:	2000229c 	.word	0x2000229c

08010864 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8010864:	b480      	push	{r7}
 8010866:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8010868:	4b04      	ldr	r3, [pc, #16]	; (801087c <vTaskSuspendAll+0x18>)
 801086a:	681b      	ldr	r3, [r3, #0]
 801086c:	3301      	adds	r3, #1
 801086e:	4a03      	ldr	r2, [pc, #12]	; (801087c <vTaskSuspendAll+0x18>)
 8010870:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8010872:	bf00      	nop
 8010874:	46bd      	mov	sp, r7
 8010876:	f85d 7b04 	ldr.w	r7, [sp], #4
 801087a:	4770      	bx	lr
 801087c:	200022c0 	.word	0x200022c0

08010880 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8010880:	b580      	push	{r7, lr}
 8010882:	b084      	sub	sp, #16
 8010884:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8010886:	2300      	movs	r3, #0
 8010888:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 801088a:	2300      	movs	r3, #0
 801088c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 801088e:	4b42      	ldr	r3, [pc, #264]	; (8010998 <xTaskResumeAll+0x118>)
 8010890:	681b      	ldr	r3, [r3, #0]
 8010892:	2b00      	cmp	r3, #0
 8010894:	d10a      	bne.n	80108ac <xTaskResumeAll+0x2c>
	__asm volatile
 8010896:	f04f 0350 	mov.w	r3, #80	; 0x50
 801089a:	f383 8811 	msr	BASEPRI, r3
 801089e:	f3bf 8f6f 	isb	sy
 80108a2:	f3bf 8f4f 	dsb	sy
 80108a6:	603b      	str	r3, [r7, #0]
}
 80108a8:	bf00      	nop
 80108aa:	e7fe      	b.n	80108aa <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80108ac:	f001 fb42 	bl	8011f34 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80108b0:	4b39      	ldr	r3, [pc, #228]	; (8010998 <xTaskResumeAll+0x118>)
 80108b2:	681b      	ldr	r3, [r3, #0]
 80108b4:	3b01      	subs	r3, #1
 80108b6:	4a38      	ldr	r2, [pc, #224]	; (8010998 <xTaskResumeAll+0x118>)
 80108b8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80108ba:	4b37      	ldr	r3, [pc, #220]	; (8010998 <xTaskResumeAll+0x118>)
 80108bc:	681b      	ldr	r3, [r3, #0]
 80108be:	2b00      	cmp	r3, #0
 80108c0:	d162      	bne.n	8010988 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80108c2:	4b36      	ldr	r3, [pc, #216]	; (801099c <xTaskResumeAll+0x11c>)
 80108c4:	681b      	ldr	r3, [r3, #0]
 80108c6:	2b00      	cmp	r3, #0
 80108c8:	d05e      	beq.n	8010988 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80108ca:	e02f      	b.n	801092c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80108cc:	4b34      	ldr	r3, [pc, #208]	; (80109a0 <xTaskResumeAll+0x120>)
 80108ce:	68db      	ldr	r3, [r3, #12]
 80108d0:	68db      	ldr	r3, [r3, #12]
 80108d2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80108d4:	68fb      	ldr	r3, [r7, #12]
 80108d6:	3318      	adds	r3, #24
 80108d8:	4618      	mov	r0, r3
 80108da:	f7fe fe95 	bl	800f608 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80108de:	68fb      	ldr	r3, [r7, #12]
 80108e0:	3304      	adds	r3, #4
 80108e2:	4618      	mov	r0, r3
 80108e4:	f7fe fe90 	bl	800f608 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80108e8:	68fb      	ldr	r3, [r7, #12]
 80108ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80108ec:	4b2d      	ldr	r3, [pc, #180]	; (80109a4 <xTaskResumeAll+0x124>)
 80108ee:	681b      	ldr	r3, [r3, #0]
 80108f0:	429a      	cmp	r2, r3
 80108f2:	d903      	bls.n	80108fc <xTaskResumeAll+0x7c>
 80108f4:	68fb      	ldr	r3, [r7, #12]
 80108f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80108f8:	4a2a      	ldr	r2, [pc, #168]	; (80109a4 <xTaskResumeAll+0x124>)
 80108fa:	6013      	str	r3, [r2, #0]
 80108fc:	68fb      	ldr	r3, [r7, #12]
 80108fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010900:	4613      	mov	r3, r2
 8010902:	009b      	lsls	r3, r3, #2
 8010904:	4413      	add	r3, r2
 8010906:	009b      	lsls	r3, r3, #2
 8010908:	4a27      	ldr	r2, [pc, #156]	; (80109a8 <xTaskResumeAll+0x128>)
 801090a:	441a      	add	r2, r3
 801090c:	68fb      	ldr	r3, [r7, #12]
 801090e:	3304      	adds	r3, #4
 8010910:	4619      	mov	r1, r3
 8010912:	4610      	mov	r0, r2
 8010914:	f7fe fe1b 	bl	800f54e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8010918:	68fb      	ldr	r3, [r7, #12]
 801091a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801091c:	4b23      	ldr	r3, [pc, #140]	; (80109ac <xTaskResumeAll+0x12c>)
 801091e:	681b      	ldr	r3, [r3, #0]
 8010920:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010922:	429a      	cmp	r2, r3
 8010924:	d302      	bcc.n	801092c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8010926:	4b22      	ldr	r3, [pc, #136]	; (80109b0 <xTaskResumeAll+0x130>)
 8010928:	2201      	movs	r2, #1
 801092a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801092c:	4b1c      	ldr	r3, [pc, #112]	; (80109a0 <xTaskResumeAll+0x120>)
 801092e:	681b      	ldr	r3, [r3, #0]
 8010930:	2b00      	cmp	r3, #0
 8010932:	d1cb      	bne.n	80108cc <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8010934:	68fb      	ldr	r3, [r7, #12]
 8010936:	2b00      	cmp	r3, #0
 8010938:	d001      	beq.n	801093e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 801093a:	f000 fb7b 	bl	8011034 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 801093e:	4b1d      	ldr	r3, [pc, #116]	; (80109b4 <xTaskResumeAll+0x134>)
 8010940:	681b      	ldr	r3, [r3, #0]
 8010942:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8010944:	687b      	ldr	r3, [r7, #4]
 8010946:	2b00      	cmp	r3, #0
 8010948:	d010      	beq.n	801096c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 801094a:	f000 f847 	bl	80109dc <xTaskIncrementTick>
 801094e:	4603      	mov	r3, r0
 8010950:	2b00      	cmp	r3, #0
 8010952:	d002      	beq.n	801095a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8010954:	4b16      	ldr	r3, [pc, #88]	; (80109b0 <xTaskResumeAll+0x130>)
 8010956:	2201      	movs	r2, #1
 8010958:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 801095a:	687b      	ldr	r3, [r7, #4]
 801095c:	3b01      	subs	r3, #1
 801095e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8010960:	687b      	ldr	r3, [r7, #4]
 8010962:	2b00      	cmp	r3, #0
 8010964:	d1f1      	bne.n	801094a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8010966:	4b13      	ldr	r3, [pc, #76]	; (80109b4 <xTaskResumeAll+0x134>)
 8010968:	2200      	movs	r2, #0
 801096a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 801096c:	4b10      	ldr	r3, [pc, #64]	; (80109b0 <xTaskResumeAll+0x130>)
 801096e:	681b      	ldr	r3, [r3, #0]
 8010970:	2b00      	cmp	r3, #0
 8010972:	d009      	beq.n	8010988 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8010974:	2301      	movs	r3, #1
 8010976:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8010978:	4b0f      	ldr	r3, [pc, #60]	; (80109b8 <xTaskResumeAll+0x138>)
 801097a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801097e:	601a      	str	r2, [r3, #0]
 8010980:	f3bf 8f4f 	dsb	sy
 8010984:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8010988:	f001 fb04 	bl	8011f94 <vPortExitCritical>

	return xAlreadyYielded;
 801098c:	68bb      	ldr	r3, [r7, #8]
}
 801098e:	4618      	mov	r0, r3
 8010990:	3710      	adds	r7, #16
 8010992:	46bd      	mov	sp, r7
 8010994:	bd80      	pop	{r7, pc}
 8010996:	bf00      	nop
 8010998:	200022c0 	.word	0x200022c0
 801099c:	20002298 	.word	0x20002298
 80109a0:	20002258 	.word	0x20002258
 80109a4:	200022a0 	.word	0x200022a0
 80109a8:	20001dc8 	.word	0x20001dc8
 80109ac:	20001dc4 	.word	0x20001dc4
 80109b0:	200022ac 	.word	0x200022ac
 80109b4:	200022a8 	.word	0x200022a8
 80109b8:	e000ed04 	.word	0xe000ed04

080109bc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80109bc:	b480      	push	{r7}
 80109be:	b083      	sub	sp, #12
 80109c0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80109c2:	4b05      	ldr	r3, [pc, #20]	; (80109d8 <xTaskGetTickCount+0x1c>)
 80109c4:	681b      	ldr	r3, [r3, #0]
 80109c6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80109c8:	687b      	ldr	r3, [r7, #4]
}
 80109ca:	4618      	mov	r0, r3
 80109cc:	370c      	adds	r7, #12
 80109ce:	46bd      	mov	sp, r7
 80109d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109d4:	4770      	bx	lr
 80109d6:	bf00      	nop
 80109d8:	2000229c 	.word	0x2000229c

080109dc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80109dc:	b580      	push	{r7, lr}
 80109de:	b086      	sub	sp, #24
 80109e0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80109e2:	2300      	movs	r3, #0
 80109e4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80109e6:	4b4f      	ldr	r3, [pc, #316]	; (8010b24 <xTaskIncrementTick+0x148>)
 80109e8:	681b      	ldr	r3, [r3, #0]
 80109ea:	2b00      	cmp	r3, #0
 80109ec:	f040 808f 	bne.w	8010b0e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80109f0:	4b4d      	ldr	r3, [pc, #308]	; (8010b28 <xTaskIncrementTick+0x14c>)
 80109f2:	681b      	ldr	r3, [r3, #0]
 80109f4:	3301      	adds	r3, #1
 80109f6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80109f8:	4a4b      	ldr	r2, [pc, #300]	; (8010b28 <xTaskIncrementTick+0x14c>)
 80109fa:	693b      	ldr	r3, [r7, #16]
 80109fc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80109fe:	693b      	ldr	r3, [r7, #16]
 8010a00:	2b00      	cmp	r3, #0
 8010a02:	d120      	bne.n	8010a46 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8010a04:	4b49      	ldr	r3, [pc, #292]	; (8010b2c <xTaskIncrementTick+0x150>)
 8010a06:	681b      	ldr	r3, [r3, #0]
 8010a08:	681b      	ldr	r3, [r3, #0]
 8010a0a:	2b00      	cmp	r3, #0
 8010a0c:	d00a      	beq.n	8010a24 <xTaskIncrementTick+0x48>
	__asm volatile
 8010a0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a12:	f383 8811 	msr	BASEPRI, r3
 8010a16:	f3bf 8f6f 	isb	sy
 8010a1a:	f3bf 8f4f 	dsb	sy
 8010a1e:	603b      	str	r3, [r7, #0]
}
 8010a20:	bf00      	nop
 8010a22:	e7fe      	b.n	8010a22 <xTaskIncrementTick+0x46>
 8010a24:	4b41      	ldr	r3, [pc, #260]	; (8010b2c <xTaskIncrementTick+0x150>)
 8010a26:	681b      	ldr	r3, [r3, #0]
 8010a28:	60fb      	str	r3, [r7, #12]
 8010a2a:	4b41      	ldr	r3, [pc, #260]	; (8010b30 <xTaskIncrementTick+0x154>)
 8010a2c:	681b      	ldr	r3, [r3, #0]
 8010a2e:	4a3f      	ldr	r2, [pc, #252]	; (8010b2c <xTaskIncrementTick+0x150>)
 8010a30:	6013      	str	r3, [r2, #0]
 8010a32:	4a3f      	ldr	r2, [pc, #252]	; (8010b30 <xTaskIncrementTick+0x154>)
 8010a34:	68fb      	ldr	r3, [r7, #12]
 8010a36:	6013      	str	r3, [r2, #0]
 8010a38:	4b3e      	ldr	r3, [pc, #248]	; (8010b34 <xTaskIncrementTick+0x158>)
 8010a3a:	681b      	ldr	r3, [r3, #0]
 8010a3c:	3301      	adds	r3, #1
 8010a3e:	4a3d      	ldr	r2, [pc, #244]	; (8010b34 <xTaskIncrementTick+0x158>)
 8010a40:	6013      	str	r3, [r2, #0]
 8010a42:	f000 faf7 	bl	8011034 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8010a46:	4b3c      	ldr	r3, [pc, #240]	; (8010b38 <xTaskIncrementTick+0x15c>)
 8010a48:	681b      	ldr	r3, [r3, #0]
 8010a4a:	693a      	ldr	r2, [r7, #16]
 8010a4c:	429a      	cmp	r2, r3
 8010a4e:	d349      	bcc.n	8010ae4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010a50:	4b36      	ldr	r3, [pc, #216]	; (8010b2c <xTaskIncrementTick+0x150>)
 8010a52:	681b      	ldr	r3, [r3, #0]
 8010a54:	681b      	ldr	r3, [r3, #0]
 8010a56:	2b00      	cmp	r3, #0
 8010a58:	d104      	bne.n	8010a64 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010a5a:	4b37      	ldr	r3, [pc, #220]	; (8010b38 <xTaskIncrementTick+0x15c>)
 8010a5c:	f04f 32ff 	mov.w	r2, #4294967295
 8010a60:	601a      	str	r2, [r3, #0]
					break;
 8010a62:	e03f      	b.n	8010ae4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010a64:	4b31      	ldr	r3, [pc, #196]	; (8010b2c <xTaskIncrementTick+0x150>)
 8010a66:	681b      	ldr	r3, [r3, #0]
 8010a68:	68db      	ldr	r3, [r3, #12]
 8010a6a:	68db      	ldr	r3, [r3, #12]
 8010a6c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8010a6e:	68bb      	ldr	r3, [r7, #8]
 8010a70:	685b      	ldr	r3, [r3, #4]
 8010a72:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8010a74:	693a      	ldr	r2, [r7, #16]
 8010a76:	687b      	ldr	r3, [r7, #4]
 8010a78:	429a      	cmp	r2, r3
 8010a7a:	d203      	bcs.n	8010a84 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8010a7c:	4a2e      	ldr	r2, [pc, #184]	; (8010b38 <xTaskIncrementTick+0x15c>)
 8010a7e:	687b      	ldr	r3, [r7, #4]
 8010a80:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8010a82:	e02f      	b.n	8010ae4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010a84:	68bb      	ldr	r3, [r7, #8]
 8010a86:	3304      	adds	r3, #4
 8010a88:	4618      	mov	r0, r3
 8010a8a:	f7fe fdbd 	bl	800f608 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8010a8e:	68bb      	ldr	r3, [r7, #8]
 8010a90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010a92:	2b00      	cmp	r3, #0
 8010a94:	d004      	beq.n	8010aa0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8010a96:	68bb      	ldr	r3, [r7, #8]
 8010a98:	3318      	adds	r3, #24
 8010a9a:	4618      	mov	r0, r3
 8010a9c:	f7fe fdb4 	bl	800f608 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8010aa0:	68bb      	ldr	r3, [r7, #8]
 8010aa2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010aa4:	4b25      	ldr	r3, [pc, #148]	; (8010b3c <xTaskIncrementTick+0x160>)
 8010aa6:	681b      	ldr	r3, [r3, #0]
 8010aa8:	429a      	cmp	r2, r3
 8010aaa:	d903      	bls.n	8010ab4 <xTaskIncrementTick+0xd8>
 8010aac:	68bb      	ldr	r3, [r7, #8]
 8010aae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010ab0:	4a22      	ldr	r2, [pc, #136]	; (8010b3c <xTaskIncrementTick+0x160>)
 8010ab2:	6013      	str	r3, [r2, #0]
 8010ab4:	68bb      	ldr	r3, [r7, #8]
 8010ab6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010ab8:	4613      	mov	r3, r2
 8010aba:	009b      	lsls	r3, r3, #2
 8010abc:	4413      	add	r3, r2
 8010abe:	009b      	lsls	r3, r3, #2
 8010ac0:	4a1f      	ldr	r2, [pc, #124]	; (8010b40 <xTaskIncrementTick+0x164>)
 8010ac2:	441a      	add	r2, r3
 8010ac4:	68bb      	ldr	r3, [r7, #8]
 8010ac6:	3304      	adds	r3, #4
 8010ac8:	4619      	mov	r1, r3
 8010aca:	4610      	mov	r0, r2
 8010acc:	f7fe fd3f 	bl	800f54e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8010ad0:	68bb      	ldr	r3, [r7, #8]
 8010ad2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010ad4:	4b1b      	ldr	r3, [pc, #108]	; (8010b44 <xTaskIncrementTick+0x168>)
 8010ad6:	681b      	ldr	r3, [r3, #0]
 8010ad8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010ada:	429a      	cmp	r2, r3
 8010adc:	d3b8      	bcc.n	8010a50 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8010ade:	2301      	movs	r3, #1
 8010ae0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010ae2:	e7b5      	b.n	8010a50 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8010ae4:	4b17      	ldr	r3, [pc, #92]	; (8010b44 <xTaskIncrementTick+0x168>)
 8010ae6:	681b      	ldr	r3, [r3, #0]
 8010ae8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010aea:	4915      	ldr	r1, [pc, #84]	; (8010b40 <xTaskIncrementTick+0x164>)
 8010aec:	4613      	mov	r3, r2
 8010aee:	009b      	lsls	r3, r3, #2
 8010af0:	4413      	add	r3, r2
 8010af2:	009b      	lsls	r3, r3, #2
 8010af4:	440b      	add	r3, r1
 8010af6:	681b      	ldr	r3, [r3, #0]
 8010af8:	2b01      	cmp	r3, #1
 8010afa:	d901      	bls.n	8010b00 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8010afc:	2301      	movs	r3, #1
 8010afe:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8010b00:	4b11      	ldr	r3, [pc, #68]	; (8010b48 <xTaskIncrementTick+0x16c>)
 8010b02:	681b      	ldr	r3, [r3, #0]
 8010b04:	2b00      	cmp	r3, #0
 8010b06:	d007      	beq.n	8010b18 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8010b08:	2301      	movs	r3, #1
 8010b0a:	617b      	str	r3, [r7, #20]
 8010b0c:	e004      	b.n	8010b18 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8010b0e:	4b0f      	ldr	r3, [pc, #60]	; (8010b4c <xTaskIncrementTick+0x170>)
 8010b10:	681b      	ldr	r3, [r3, #0]
 8010b12:	3301      	adds	r3, #1
 8010b14:	4a0d      	ldr	r2, [pc, #52]	; (8010b4c <xTaskIncrementTick+0x170>)
 8010b16:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8010b18:	697b      	ldr	r3, [r7, #20]
}
 8010b1a:	4618      	mov	r0, r3
 8010b1c:	3718      	adds	r7, #24
 8010b1e:	46bd      	mov	sp, r7
 8010b20:	bd80      	pop	{r7, pc}
 8010b22:	bf00      	nop
 8010b24:	200022c0 	.word	0x200022c0
 8010b28:	2000229c 	.word	0x2000229c
 8010b2c:	20002250 	.word	0x20002250
 8010b30:	20002254 	.word	0x20002254
 8010b34:	200022b0 	.word	0x200022b0
 8010b38:	200022b8 	.word	0x200022b8
 8010b3c:	200022a0 	.word	0x200022a0
 8010b40:	20001dc8 	.word	0x20001dc8
 8010b44:	20001dc4 	.word	0x20001dc4
 8010b48:	200022ac 	.word	0x200022ac
 8010b4c:	200022a8 	.word	0x200022a8

08010b50 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8010b50:	b580      	push	{r7, lr}
 8010b52:	b084      	sub	sp, #16
 8010b54:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8010b56:	4b36      	ldr	r3, [pc, #216]	; (8010c30 <vTaskSwitchContext+0xe0>)
 8010b58:	681b      	ldr	r3, [r3, #0]
 8010b5a:	2b00      	cmp	r3, #0
 8010b5c:	d003      	beq.n	8010b66 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8010b5e:	4b35      	ldr	r3, [pc, #212]	; (8010c34 <vTaskSwitchContext+0xe4>)
 8010b60:	2201      	movs	r2, #1
 8010b62:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8010b64:	e05f      	b.n	8010c26 <vTaskSwitchContext+0xd6>
		xYieldPending = pdFALSE;
 8010b66:	4b33      	ldr	r3, [pc, #204]	; (8010c34 <vTaskSwitchContext+0xe4>)
 8010b68:	2200      	movs	r2, #0
 8010b6a:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8010b6c:	f7ef fd40 	bl	80005f0 <getRunTimeCounterValue>
 8010b70:	4603      	mov	r3, r0
 8010b72:	4a31      	ldr	r2, [pc, #196]	; (8010c38 <vTaskSwitchContext+0xe8>)
 8010b74:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 8010b76:	4b30      	ldr	r3, [pc, #192]	; (8010c38 <vTaskSwitchContext+0xe8>)
 8010b78:	681a      	ldr	r2, [r3, #0]
 8010b7a:	4b30      	ldr	r3, [pc, #192]	; (8010c3c <vTaskSwitchContext+0xec>)
 8010b7c:	681b      	ldr	r3, [r3, #0]
 8010b7e:	429a      	cmp	r2, r3
 8010b80:	d909      	bls.n	8010b96 <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 8010b82:	4b2f      	ldr	r3, [pc, #188]	; (8010c40 <vTaskSwitchContext+0xf0>)
 8010b84:	681b      	ldr	r3, [r3, #0]
 8010b86:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8010b88:	4a2b      	ldr	r2, [pc, #172]	; (8010c38 <vTaskSwitchContext+0xe8>)
 8010b8a:	6810      	ldr	r0, [r2, #0]
 8010b8c:	4a2b      	ldr	r2, [pc, #172]	; (8010c3c <vTaskSwitchContext+0xec>)
 8010b8e:	6812      	ldr	r2, [r2, #0]
 8010b90:	1a82      	subs	r2, r0, r2
 8010b92:	440a      	add	r2, r1
 8010b94:	655a      	str	r2, [r3, #84]	; 0x54
			ulTaskSwitchedInTime = ulTotalRunTime;
 8010b96:	4b28      	ldr	r3, [pc, #160]	; (8010c38 <vTaskSwitchContext+0xe8>)
 8010b98:	681b      	ldr	r3, [r3, #0]
 8010b9a:	4a28      	ldr	r2, [pc, #160]	; (8010c3c <vTaskSwitchContext+0xec>)
 8010b9c:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010b9e:	4b29      	ldr	r3, [pc, #164]	; (8010c44 <vTaskSwitchContext+0xf4>)
 8010ba0:	681b      	ldr	r3, [r3, #0]
 8010ba2:	60fb      	str	r3, [r7, #12]
 8010ba4:	e010      	b.n	8010bc8 <vTaskSwitchContext+0x78>
 8010ba6:	68fb      	ldr	r3, [r7, #12]
 8010ba8:	2b00      	cmp	r3, #0
 8010baa:	d10a      	bne.n	8010bc2 <vTaskSwitchContext+0x72>
	__asm volatile
 8010bac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010bb0:	f383 8811 	msr	BASEPRI, r3
 8010bb4:	f3bf 8f6f 	isb	sy
 8010bb8:	f3bf 8f4f 	dsb	sy
 8010bbc:	607b      	str	r3, [r7, #4]
}
 8010bbe:	bf00      	nop
 8010bc0:	e7fe      	b.n	8010bc0 <vTaskSwitchContext+0x70>
 8010bc2:	68fb      	ldr	r3, [r7, #12]
 8010bc4:	3b01      	subs	r3, #1
 8010bc6:	60fb      	str	r3, [r7, #12]
 8010bc8:	491f      	ldr	r1, [pc, #124]	; (8010c48 <vTaskSwitchContext+0xf8>)
 8010bca:	68fa      	ldr	r2, [r7, #12]
 8010bcc:	4613      	mov	r3, r2
 8010bce:	009b      	lsls	r3, r3, #2
 8010bd0:	4413      	add	r3, r2
 8010bd2:	009b      	lsls	r3, r3, #2
 8010bd4:	440b      	add	r3, r1
 8010bd6:	681b      	ldr	r3, [r3, #0]
 8010bd8:	2b00      	cmp	r3, #0
 8010bda:	d0e4      	beq.n	8010ba6 <vTaskSwitchContext+0x56>
 8010bdc:	68fa      	ldr	r2, [r7, #12]
 8010bde:	4613      	mov	r3, r2
 8010be0:	009b      	lsls	r3, r3, #2
 8010be2:	4413      	add	r3, r2
 8010be4:	009b      	lsls	r3, r3, #2
 8010be6:	4a18      	ldr	r2, [pc, #96]	; (8010c48 <vTaskSwitchContext+0xf8>)
 8010be8:	4413      	add	r3, r2
 8010bea:	60bb      	str	r3, [r7, #8]
 8010bec:	68bb      	ldr	r3, [r7, #8]
 8010bee:	685b      	ldr	r3, [r3, #4]
 8010bf0:	685a      	ldr	r2, [r3, #4]
 8010bf2:	68bb      	ldr	r3, [r7, #8]
 8010bf4:	605a      	str	r2, [r3, #4]
 8010bf6:	68bb      	ldr	r3, [r7, #8]
 8010bf8:	685a      	ldr	r2, [r3, #4]
 8010bfa:	68bb      	ldr	r3, [r7, #8]
 8010bfc:	3308      	adds	r3, #8
 8010bfe:	429a      	cmp	r2, r3
 8010c00:	d104      	bne.n	8010c0c <vTaskSwitchContext+0xbc>
 8010c02:	68bb      	ldr	r3, [r7, #8]
 8010c04:	685b      	ldr	r3, [r3, #4]
 8010c06:	685a      	ldr	r2, [r3, #4]
 8010c08:	68bb      	ldr	r3, [r7, #8]
 8010c0a:	605a      	str	r2, [r3, #4]
 8010c0c:	68bb      	ldr	r3, [r7, #8]
 8010c0e:	685b      	ldr	r3, [r3, #4]
 8010c10:	68db      	ldr	r3, [r3, #12]
 8010c12:	4a0b      	ldr	r2, [pc, #44]	; (8010c40 <vTaskSwitchContext+0xf0>)
 8010c14:	6013      	str	r3, [r2, #0]
 8010c16:	4a0b      	ldr	r2, [pc, #44]	; (8010c44 <vTaskSwitchContext+0xf4>)
 8010c18:	68fb      	ldr	r3, [r7, #12]
 8010c1a:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8010c1c:	4b08      	ldr	r3, [pc, #32]	; (8010c40 <vTaskSwitchContext+0xf0>)
 8010c1e:	681b      	ldr	r3, [r3, #0]
 8010c20:	3358      	adds	r3, #88	; 0x58
 8010c22:	4a0a      	ldr	r2, [pc, #40]	; (8010c4c <vTaskSwitchContext+0xfc>)
 8010c24:	6013      	str	r3, [r2, #0]
}
 8010c26:	bf00      	nop
 8010c28:	3710      	adds	r7, #16
 8010c2a:	46bd      	mov	sp, r7
 8010c2c:	bd80      	pop	{r7, pc}
 8010c2e:	bf00      	nop
 8010c30:	200022c0 	.word	0x200022c0
 8010c34:	200022ac 	.word	0x200022ac
 8010c38:	200022c8 	.word	0x200022c8
 8010c3c:	200022c4 	.word	0x200022c4
 8010c40:	20001dc4 	.word	0x20001dc4
 8010c44:	200022a0 	.word	0x200022a0
 8010c48:	20001dc8 	.word	0x20001dc8
 8010c4c:	20000054 	.word	0x20000054

08010c50 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8010c50:	b580      	push	{r7, lr}
 8010c52:	b084      	sub	sp, #16
 8010c54:	af00      	add	r7, sp, #0
 8010c56:	6078      	str	r0, [r7, #4]
 8010c58:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8010c5a:	687b      	ldr	r3, [r7, #4]
 8010c5c:	2b00      	cmp	r3, #0
 8010c5e:	d10a      	bne.n	8010c76 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8010c60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c64:	f383 8811 	msr	BASEPRI, r3
 8010c68:	f3bf 8f6f 	isb	sy
 8010c6c:	f3bf 8f4f 	dsb	sy
 8010c70:	60fb      	str	r3, [r7, #12]
}
 8010c72:	bf00      	nop
 8010c74:	e7fe      	b.n	8010c74 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8010c76:	4b07      	ldr	r3, [pc, #28]	; (8010c94 <vTaskPlaceOnEventList+0x44>)
 8010c78:	681b      	ldr	r3, [r3, #0]
 8010c7a:	3318      	adds	r3, #24
 8010c7c:	4619      	mov	r1, r3
 8010c7e:	6878      	ldr	r0, [r7, #4]
 8010c80:	f7fe fc89 	bl	800f596 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8010c84:	2101      	movs	r1, #1
 8010c86:	6838      	ldr	r0, [r7, #0]
 8010c88:	f000 fc82 	bl	8011590 <prvAddCurrentTaskToDelayedList>
}
 8010c8c:	bf00      	nop
 8010c8e:	3710      	adds	r7, #16
 8010c90:	46bd      	mov	sp, r7
 8010c92:	bd80      	pop	{r7, pc}
 8010c94:	20001dc4 	.word	0x20001dc4

08010c98 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8010c98:	b580      	push	{r7, lr}
 8010c9a:	b086      	sub	sp, #24
 8010c9c:	af00      	add	r7, sp, #0
 8010c9e:	60f8      	str	r0, [r7, #12]
 8010ca0:	60b9      	str	r1, [r7, #8]
 8010ca2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8010ca4:	68fb      	ldr	r3, [r7, #12]
 8010ca6:	2b00      	cmp	r3, #0
 8010ca8:	d10a      	bne.n	8010cc0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8010caa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010cae:	f383 8811 	msr	BASEPRI, r3
 8010cb2:	f3bf 8f6f 	isb	sy
 8010cb6:	f3bf 8f4f 	dsb	sy
 8010cba:	617b      	str	r3, [r7, #20]
}
 8010cbc:	bf00      	nop
 8010cbe:	e7fe      	b.n	8010cbe <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8010cc0:	4b0a      	ldr	r3, [pc, #40]	; (8010cec <vTaskPlaceOnEventListRestricted+0x54>)
 8010cc2:	681b      	ldr	r3, [r3, #0]
 8010cc4:	3318      	adds	r3, #24
 8010cc6:	4619      	mov	r1, r3
 8010cc8:	68f8      	ldr	r0, [r7, #12]
 8010cca:	f7fe fc40 	bl	800f54e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8010cce:	687b      	ldr	r3, [r7, #4]
 8010cd0:	2b00      	cmp	r3, #0
 8010cd2:	d002      	beq.n	8010cda <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8010cd4:	f04f 33ff 	mov.w	r3, #4294967295
 8010cd8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8010cda:	6879      	ldr	r1, [r7, #4]
 8010cdc:	68b8      	ldr	r0, [r7, #8]
 8010cde:	f000 fc57 	bl	8011590 <prvAddCurrentTaskToDelayedList>
	}
 8010ce2:	bf00      	nop
 8010ce4:	3718      	adds	r7, #24
 8010ce6:	46bd      	mov	sp, r7
 8010ce8:	bd80      	pop	{r7, pc}
 8010cea:	bf00      	nop
 8010cec:	20001dc4 	.word	0x20001dc4

08010cf0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8010cf0:	b580      	push	{r7, lr}
 8010cf2:	b086      	sub	sp, #24
 8010cf4:	af00      	add	r7, sp, #0
 8010cf6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010cf8:	687b      	ldr	r3, [r7, #4]
 8010cfa:	68db      	ldr	r3, [r3, #12]
 8010cfc:	68db      	ldr	r3, [r3, #12]
 8010cfe:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8010d00:	693b      	ldr	r3, [r7, #16]
 8010d02:	2b00      	cmp	r3, #0
 8010d04:	d10a      	bne.n	8010d1c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8010d06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d0a:	f383 8811 	msr	BASEPRI, r3
 8010d0e:	f3bf 8f6f 	isb	sy
 8010d12:	f3bf 8f4f 	dsb	sy
 8010d16:	60fb      	str	r3, [r7, #12]
}
 8010d18:	bf00      	nop
 8010d1a:	e7fe      	b.n	8010d1a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8010d1c:	693b      	ldr	r3, [r7, #16]
 8010d1e:	3318      	adds	r3, #24
 8010d20:	4618      	mov	r0, r3
 8010d22:	f7fe fc71 	bl	800f608 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010d26:	4b1e      	ldr	r3, [pc, #120]	; (8010da0 <xTaskRemoveFromEventList+0xb0>)
 8010d28:	681b      	ldr	r3, [r3, #0]
 8010d2a:	2b00      	cmp	r3, #0
 8010d2c:	d11d      	bne.n	8010d6a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8010d2e:	693b      	ldr	r3, [r7, #16]
 8010d30:	3304      	adds	r3, #4
 8010d32:	4618      	mov	r0, r3
 8010d34:	f7fe fc68 	bl	800f608 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8010d38:	693b      	ldr	r3, [r7, #16]
 8010d3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010d3c:	4b19      	ldr	r3, [pc, #100]	; (8010da4 <xTaskRemoveFromEventList+0xb4>)
 8010d3e:	681b      	ldr	r3, [r3, #0]
 8010d40:	429a      	cmp	r2, r3
 8010d42:	d903      	bls.n	8010d4c <xTaskRemoveFromEventList+0x5c>
 8010d44:	693b      	ldr	r3, [r7, #16]
 8010d46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010d48:	4a16      	ldr	r2, [pc, #88]	; (8010da4 <xTaskRemoveFromEventList+0xb4>)
 8010d4a:	6013      	str	r3, [r2, #0]
 8010d4c:	693b      	ldr	r3, [r7, #16]
 8010d4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010d50:	4613      	mov	r3, r2
 8010d52:	009b      	lsls	r3, r3, #2
 8010d54:	4413      	add	r3, r2
 8010d56:	009b      	lsls	r3, r3, #2
 8010d58:	4a13      	ldr	r2, [pc, #76]	; (8010da8 <xTaskRemoveFromEventList+0xb8>)
 8010d5a:	441a      	add	r2, r3
 8010d5c:	693b      	ldr	r3, [r7, #16]
 8010d5e:	3304      	adds	r3, #4
 8010d60:	4619      	mov	r1, r3
 8010d62:	4610      	mov	r0, r2
 8010d64:	f7fe fbf3 	bl	800f54e <vListInsertEnd>
 8010d68:	e005      	b.n	8010d76 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8010d6a:	693b      	ldr	r3, [r7, #16]
 8010d6c:	3318      	adds	r3, #24
 8010d6e:	4619      	mov	r1, r3
 8010d70:	480e      	ldr	r0, [pc, #56]	; (8010dac <xTaskRemoveFromEventList+0xbc>)
 8010d72:	f7fe fbec 	bl	800f54e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8010d76:	693b      	ldr	r3, [r7, #16]
 8010d78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010d7a:	4b0d      	ldr	r3, [pc, #52]	; (8010db0 <xTaskRemoveFromEventList+0xc0>)
 8010d7c:	681b      	ldr	r3, [r3, #0]
 8010d7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010d80:	429a      	cmp	r2, r3
 8010d82:	d905      	bls.n	8010d90 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8010d84:	2301      	movs	r3, #1
 8010d86:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8010d88:	4b0a      	ldr	r3, [pc, #40]	; (8010db4 <xTaskRemoveFromEventList+0xc4>)
 8010d8a:	2201      	movs	r2, #1
 8010d8c:	601a      	str	r2, [r3, #0]
 8010d8e:	e001      	b.n	8010d94 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8010d90:	2300      	movs	r3, #0
 8010d92:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8010d94:	697b      	ldr	r3, [r7, #20]
}
 8010d96:	4618      	mov	r0, r3
 8010d98:	3718      	adds	r7, #24
 8010d9a:	46bd      	mov	sp, r7
 8010d9c:	bd80      	pop	{r7, pc}
 8010d9e:	bf00      	nop
 8010da0:	200022c0 	.word	0x200022c0
 8010da4:	200022a0 	.word	0x200022a0
 8010da8:	20001dc8 	.word	0x20001dc8
 8010dac:	20002258 	.word	0x20002258
 8010db0:	20001dc4 	.word	0x20001dc4
 8010db4:	200022ac 	.word	0x200022ac

08010db8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8010db8:	b480      	push	{r7}
 8010dba:	b083      	sub	sp, #12
 8010dbc:	af00      	add	r7, sp, #0
 8010dbe:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8010dc0:	4b06      	ldr	r3, [pc, #24]	; (8010ddc <vTaskInternalSetTimeOutState+0x24>)
 8010dc2:	681a      	ldr	r2, [r3, #0]
 8010dc4:	687b      	ldr	r3, [r7, #4]
 8010dc6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8010dc8:	4b05      	ldr	r3, [pc, #20]	; (8010de0 <vTaskInternalSetTimeOutState+0x28>)
 8010dca:	681a      	ldr	r2, [r3, #0]
 8010dcc:	687b      	ldr	r3, [r7, #4]
 8010dce:	605a      	str	r2, [r3, #4]
}
 8010dd0:	bf00      	nop
 8010dd2:	370c      	adds	r7, #12
 8010dd4:	46bd      	mov	sp, r7
 8010dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dda:	4770      	bx	lr
 8010ddc:	200022b0 	.word	0x200022b0
 8010de0:	2000229c 	.word	0x2000229c

08010de4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8010de4:	b580      	push	{r7, lr}
 8010de6:	b088      	sub	sp, #32
 8010de8:	af00      	add	r7, sp, #0
 8010dea:	6078      	str	r0, [r7, #4]
 8010dec:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8010dee:	687b      	ldr	r3, [r7, #4]
 8010df0:	2b00      	cmp	r3, #0
 8010df2:	d10a      	bne.n	8010e0a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8010df4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010df8:	f383 8811 	msr	BASEPRI, r3
 8010dfc:	f3bf 8f6f 	isb	sy
 8010e00:	f3bf 8f4f 	dsb	sy
 8010e04:	613b      	str	r3, [r7, #16]
}
 8010e06:	bf00      	nop
 8010e08:	e7fe      	b.n	8010e08 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8010e0a:	683b      	ldr	r3, [r7, #0]
 8010e0c:	2b00      	cmp	r3, #0
 8010e0e:	d10a      	bne.n	8010e26 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8010e10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e14:	f383 8811 	msr	BASEPRI, r3
 8010e18:	f3bf 8f6f 	isb	sy
 8010e1c:	f3bf 8f4f 	dsb	sy
 8010e20:	60fb      	str	r3, [r7, #12]
}
 8010e22:	bf00      	nop
 8010e24:	e7fe      	b.n	8010e24 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8010e26:	f001 f885 	bl	8011f34 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8010e2a:	4b1d      	ldr	r3, [pc, #116]	; (8010ea0 <xTaskCheckForTimeOut+0xbc>)
 8010e2c:	681b      	ldr	r3, [r3, #0]
 8010e2e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8010e30:	687b      	ldr	r3, [r7, #4]
 8010e32:	685b      	ldr	r3, [r3, #4]
 8010e34:	69ba      	ldr	r2, [r7, #24]
 8010e36:	1ad3      	subs	r3, r2, r3
 8010e38:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8010e3a:	683b      	ldr	r3, [r7, #0]
 8010e3c:	681b      	ldr	r3, [r3, #0]
 8010e3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010e42:	d102      	bne.n	8010e4a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8010e44:	2300      	movs	r3, #0
 8010e46:	61fb      	str	r3, [r7, #28]
 8010e48:	e023      	b.n	8010e92 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8010e4a:	687b      	ldr	r3, [r7, #4]
 8010e4c:	681a      	ldr	r2, [r3, #0]
 8010e4e:	4b15      	ldr	r3, [pc, #84]	; (8010ea4 <xTaskCheckForTimeOut+0xc0>)
 8010e50:	681b      	ldr	r3, [r3, #0]
 8010e52:	429a      	cmp	r2, r3
 8010e54:	d007      	beq.n	8010e66 <xTaskCheckForTimeOut+0x82>
 8010e56:	687b      	ldr	r3, [r7, #4]
 8010e58:	685b      	ldr	r3, [r3, #4]
 8010e5a:	69ba      	ldr	r2, [r7, #24]
 8010e5c:	429a      	cmp	r2, r3
 8010e5e:	d302      	bcc.n	8010e66 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8010e60:	2301      	movs	r3, #1
 8010e62:	61fb      	str	r3, [r7, #28]
 8010e64:	e015      	b.n	8010e92 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8010e66:	683b      	ldr	r3, [r7, #0]
 8010e68:	681b      	ldr	r3, [r3, #0]
 8010e6a:	697a      	ldr	r2, [r7, #20]
 8010e6c:	429a      	cmp	r2, r3
 8010e6e:	d20b      	bcs.n	8010e88 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8010e70:	683b      	ldr	r3, [r7, #0]
 8010e72:	681a      	ldr	r2, [r3, #0]
 8010e74:	697b      	ldr	r3, [r7, #20]
 8010e76:	1ad2      	subs	r2, r2, r3
 8010e78:	683b      	ldr	r3, [r7, #0]
 8010e7a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8010e7c:	6878      	ldr	r0, [r7, #4]
 8010e7e:	f7ff ff9b 	bl	8010db8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8010e82:	2300      	movs	r3, #0
 8010e84:	61fb      	str	r3, [r7, #28]
 8010e86:	e004      	b.n	8010e92 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8010e88:	683b      	ldr	r3, [r7, #0]
 8010e8a:	2200      	movs	r2, #0
 8010e8c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8010e8e:	2301      	movs	r3, #1
 8010e90:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8010e92:	f001 f87f 	bl	8011f94 <vPortExitCritical>

	return xReturn;
 8010e96:	69fb      	ldr	r3, [r7, #28]
}
 8010e98:	4618      	mov	r0, r3
 8010e9a:	3720      	adds	r7, #32
 8010e9c:	46bd      	mov	sp, r7
 8010e9e:	bd80      	pop	{r7, pc}
 8010ea0:	2000229c 	.word	0x2000229c
 8010ea4:	200022b0 	.word	0x200022b0

08010ea8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8010ea8:	b480      	push	{r7}
 8010eaa:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8010eac:	4b03      	ldr	r3, [pc, #12]	; (8010ebc <vTaskMissedYield+0x14>)
 8010eae:	2201      	movs	r2, #1
 8010eb0:	601a      	str	r2, [r3, #0]
}
 8010eb2:	bf00      	nop
 8010eb4:	46bd      	mov	sp, r7
 8010eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010eba:	4770      	bx	lr
 8010ebc:	200022ac 	.word	0x200022ac

08010ec0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8010ec0:	b580      	push	{r7, lr}
 8010ec2:	b082      	sub	sp, #8
 8010ec4:	af00      	add	r7, sp, #0
 8010ec6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8010ec8:	f000 f852 	bl	8010f70 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8010ecc:	4b06      	ldr	r3, [pc, #24]	; (8010ee8 <prvIdleTask+0x28>)
 8010ece:	681b      	ldr	r3, [r3, #0]
 8010ed0:	2b01      	cmp	r3, #1
 8010ed2:	d9f9      	bls.n	8010ec8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8010ed4:	4b05      	ldr	r3, [pc, #20]	; (8010eec <prvIdleTask+0x2c>)
 8010ed6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010eda:	601a      	str	r2, [r3, #0]
 8010edc:	f3bf 8f4f 	dsb	sy
 8010ee0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8010ee4:	e7f0      	b.n	8010ec8 <prvIdleTask+0x8>
 8010ee6:	bf00      	nop
 8010ee8:	20001dc8 	.word	0x20001dc8
 8010eec:	e000ed04 	.word	0xe000ed04

08010ef0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8010ef0:	b580      	push	{r7, lr}
 8010ef2:	b082      	sub	sp, #8
 8010ef4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8010ef6:	2300      	movs	r3, #0
 8010ef8:	607b      	str	r3, [r7, #4]
 8010efa:	e00c      	b.n	8010f16 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8010efc:	687a      	ldr	r2, [r7, #4]
 8010efe:	4613      	mov	r3, r2
 8010f00:	009b      	lsls	r3, r3, #2
 8010f02:	4413      	add	r3, r2
 8010f04:	009b      	lsls	r3, r3, #2
 8010f06:	4a12      	ldr	r2, [pc, #72]	; (8010f50 <prvInitialiseTaskLists+0x60>)
 8010f08:	4413      	add	r3, r2
 8010f0a:	4618      	mov	r0, r3
 8010f0c:	f7fe faf2 	bl	800f4f4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8010f10:	687b      	ldr	r3, [r7, #4]
 8010f12:	3301      	adds	r3, #1
 8010f14:	607b      	str	r3, [r7, #4]
 8010f16:	687b      	ldr	r3, [r7, #4]
 8010f18:	2b37      	cmp	r3, #55	; 0x37
 8010f1a:	d9ef      	bls.n	8010efc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8010f1c:	480d      	ldr	r0, [pc, #52]	; (8010f54 <prvInitialiseTaskLists+0x64>)
 8010f1e:	f7fe fae9 	bl	800f4f4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8010f22:	480d      	ldr	r0, [pc, #52]	; (8010f58 <prvInitialiseTaskLists+0x68>)
 8010f24:	f7fe fae6 	bl	800f4f4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8010f28:	480c      	ldr	r0, [pc, #48]	; (8010f5c <prvInitialiseTaskLists+0x6c>)
 8010f2a:	f7fe fae3 	bl	800f4f4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8010f2e:	480c      	ldr	r0, [pc, #48]	; (8010f60 <prvInitialiseTaskLists+0x70>)
 8010f30:	f7fe fae0 	bl	800f4f4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8010f34:	480b      	ldr	r0, [pc, #44]	; (8010f64 <prvInitialiseTaskLists+0x74>)
 8010f36:	f7fe fadd 	bl	800f4f4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8010f3a:	4b0b      	ldr	r3, [pc, #44]	; (8010f68 <prvInitialiseTaskLists+0x78>)
 8010f3c:	4a05      	ldr	r2, [pc, #20]	; (8010f54 <prvInitialiseTaskLists+0x64>)
 8010f3e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8010f40:	4b0a      	ldr	r3, [pc, #40]	; (8010f6c <prvInitialiseTaskLists+0x7c>)
 8010f42:	4a05      	ldr	r2, [pc, #20]	; (8010f58 <prvInitialiseTaskLists+0x68>)
 8010f44:	601a      	str	r2, [r3, #0]
}
 8010f46:	bf00      	nop
 8010f48:	3708      	adds	r7, #8
 8010f4a:	46bd      	mov	sp, r7
 8010f4c:	bd80      	pop	{r7, pc}
 8010f4e:	bf00      	nop
 8010f50:	20001dc8 	.word	0x20001dc8
 8010f54:	20002228 	.word	0x20002228
 8010f58:	2000223c 	.word	0x2000223c
 8010f5c:	20002258 	.word	0x20002258
 8010f60:	2000226c 	.word	0x2000226c
 8010f64:	20002284 	.word	0x20002284
 8010f68:	20002250 	.word	0x20002250
 8010f6c:	20002254 	.word	0x20002254

08010f70 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8010f70:	b580      	push	{r7, lr}
 8010f72:	b082      	sub	sp, #8
 8010f74:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8010f76:	e019      	b.n	8010fac <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8010f78:	f000 ffdc 	bl	8011f34 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010f7c:	4b10      	ldr	r3, [pc, #64]	; (8010fc0 <prvCheckTasksWaitingTermination+0x50>)
 8010f7e:	68db      	ldr	r3, [r3, #12]
 8010f80:	68db      	ldr	r3, [r3, #12]
 8010f82:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010f84:	687b      	ldr	r3, [r7, #4]
 8010f86:	3304      	adds	r3, #4
 8010f88:	4618      	mov	r0, r3
 8010f8a:	f7fe fb3d 	bl	800f608 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8010f8e:	4b0d      	ldr	r3, [pc, #52]	; (8010fc4 <prvCheckTasksWaitingTermination+0x54>)
 8010f90:	681b      	ldr	r3, [r3, #0]
 8010f92:	3b01      	subs	r3, #1
 8010f94:	4a0b      	ldr	r2, [pc, #44]	; (8010fc4 <prvCheckTasksWaitingTermination+0x54>)
 8010f96:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8010f98:	4b0b      	ldr	r3, [pc, #44]	; (8010fc8 <prvCheckTasksWaitingTermination+0x58>)
 8010f9a:	681b      	ldr	r3, [r3, #0]
 8010f9c:	3b01      	subs	r3, #1
 8010f9e:	4a0a      	ldr	r2, [pc, #40]	; (8010fc8 <prvCheckTasksWaitingTermination+0x58>)
 8010fa0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8010fa2:	f000 fff7 	bl	8011f94 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8010fa6:	6878      	ldr	r0, [r7, #4]
 8010fa8:	f000 f810 	bl	8010fcc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8010fac:	4b06      	ldr	r3, [pc, #24]	; (8010fc8 <prvCheckTasksWaitingTermination+0x58>)
 8010fae:	681b      	ldr	r3, [r3, #0]
 8010fb0:	2b00      	cmp	r3, #0
 8010fb2:	d1e1      	bne.n	8010f78 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8010fb4:	bf00      	nop
 8010fb6:	bf00      	nop
 8010fb8:	3708      	adds	r7, #8
 8010fba:	46bd      	mov	sp, r7
 8010fbc:	bd80      	pop	{r7, pc}
 8010fbe:	bf00      	nop
 8010fc0:	2000226c 	.word	0x2000226c
 8010fc4:	20002298 	.word	0x20002298
 8010fc8:	20002280 	.word	0x20002280

08010fcc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8010fcc:	b580      	push	{r7, lr}
 8010fce:	b084      	sub	sp, #16
 8010fd0:	af00      	add	r7, sp, #0
 8010fd2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8010fd4:	687b      	ldr	r3, [r7, #4]
 8010fd6:	3358      	adds	r3, #88	; 0x58
 8010fd8:	4618      	mov	r0, r3
 8010fda:	f002 f869 	bl	80130b0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8010fde:	687b      	ldr	r3, [r7, #4]
 8010fe0:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 8010fe4:	2b00      	cmp	r3, #0
 8010fe6:	d108      	bne.n	8010ffa <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8010fe8:	687b      	ldr	r3, [r7, #4]
 8010fea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010fec:	4618      	mov	r0, r3
 8010fee:	f001 f98f 	bl	8012310 <vPortFree>
				vPortFree( pxTCB );
 8010ff2:	6878      	ldr	r0, [r7, #4]
 8010ff4:	f001 f98c 	bl	8012310 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8010ff8:	e018      	b.n	801102c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8010ffa:	687b      	ldr	r3, [r7, #4]
 8010ffc:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 8011000:	2b01      	cmp	r3, #1
 8011002:	d103      	bne.n	801100c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8011004:	6878      	ldr	r0, [r7, #4]
 8011006:	f001 f983 	bl	8012310 <vPortFree>
	}
 801100a:	e00f      	b.n	801102c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 801100c:	687b      	ldr	r3, [r7, #4]
 801100e:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 8011012:	2b02      	cmp	r3, #2
 8011014:	d00a      	beq.n	801102c <prvDeleteTCB+0x60>
	__asm volatile
 8011016:	f04f 0350 	mov.w	r3, #80	; 0x50
 801101a:	f383 8811 	msr	BASEPRI, r3
 801101e:	f3bf 8f6f 	isb	sy
 8011022:	f3bf 8f4f 	dsb	sy
 8011026:	60fb      	str	r3, [r7, #12]
}
 8011028:	bf00      	nop
 801102a:	e7fe      	b.n	801102a <prvDeleteTCB+0x5e>
	}
 801102c:	bf00      	nop
 801102e:	3710      	adds	r7, #16
 8011030:	46bd      	mov	sp, r7
 8011032:	bd80      	pop	{r7, pc}

08011034 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8011034:	b480      	push	{r7}
 8011036:	b083      	sub	sp, #12
 8011038:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801103a:	4b0c      	ldr	r3, [pc, #48]	; (801106c <prvResetNextTaskUnblockTime+0x38>)
 801103c:	681b      	ldr	r3, [r3, #0]
 801103e:	681b      	ldr	r3, [r3, #0]
 8011040:	2b00      	cmp	r3, #0
 8011042:	d104      	bne.n	801104e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8011044:	4b0a      	ldr	r3, [pc, #40]	; (8011070 <prvResetNextTaskUnblockTime+0x3c>)
 8011046:	f04f 32ff 	mov.w	r2, #4294967295
 801104a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 801104c:	e008      	b.n	8011060 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801104e:	4b07      	ldr	r3, [pc, #28]	; (801106c <prvResetNextTaskUnblockTime+0x38>)
 8011050:	681b      	ldr	r3, [r3, #0]
 8011052:	68db      	ldr	r3, [r3, #12]
 8011054:	68db      	ldr	r3, [r3, #12]
 8011056:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8011058:	687b      	ldr	r3, [r7, #4]
 801105a:	685b      	ldr	r3, [r3, #4]
 801105c:	4a04      	ldr	r2, [pc, #16]	; (8011070 <prvResetNextTaskUnblockTime+0x3c>)
 801105e:	6013      	str	r3, [r2, #0]
}
 8011060:	bf00      	nop
 8011062:	370c      	adds	r7, #12
 8011064:	46bd      	mov	sp, r7
 8011066:	f85d 7b04 	ldr.w	r7, [sp], #4
 801106a:	4770      	bx	lr
 801106c:	20002250 	.word	0x20002250
 8011070:	200022b8 	.word	0x200022b8

08011074 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8011074:	b480      	push	{r7}
 8011076:	b083      	sub	sp, #12
 8011078:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 801107a:	4b0b      	ldr	r3, [pc, #44]	; (80110a8 <xTaskGetSchedulerState+0x34>)
 801107c:	681b      	ldr	r3, [r3, #0]
 801107e:	2b00      	cmp	r3, #0
 8011080:	d102      	bne.n	8011088 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8011082:	2301      	movs	r3, #1
 8011084:	607b      	str	r3, [r7, #4]
 8011086:	e008      	b.n	801109a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011088:	4b08      	ldr	r3, [pc, #32]	; (80110ac <xTaskGetSchedulerState+0x38>)
 801108a:	681b      	ldr	r3, [r3, #0]
 801108c:	2b00      	cmp	r3, #0
 801108e:	d102      	bne.n	8011096 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8011090:	2302      	movs	r3, #2
 8011092:	607b      	str	r3, [r7, #4]
 8011094:	e001      	b.n	801109a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8011096:	2300      	movs	r3, #0
 8011098:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 801109a:	687b      	ldr	r3, [r7, #4]
	}
 801109c:	4618      	mov	r0, r3
 801109e:	370c      	adds	r7, #12
 80110a0:	46bd      	mov	sp, r7
 80110a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110a6:	4770      	bx	lr
 80110a8:	200022a4 	.word	0x200022a4
 80110ac:	200022c0 	.word	0x200022c0

080110b0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80110b0:	b580      	push	{r7, lr}
 80110b2:	b086      	sub	sp, #24
 80110b4:	af00      	add	r7, sp, #0
 80110b6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80110b8:	687b      	ldr	r3, [r7, #4]
 80110ba:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80110bc:	2300      	movs	r3, #0
 80110be:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80110c0:	687b      	ldr	r3, [r7, #4]
 80110c2:	2b00      	cmp	r3, #0
 80110c4:	d056      	beq.n	8011174 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80110c6:	4b2e      	ldr	r3, [pc, #184]	; (8011180 <xTaskPriorityDisinherit+0xd0>)
 80110c8:	681b      	ldr	r3, [r3, #0]
 80110ca:	693a      	ldr	r2, [r7, #16]
 80110cc:	429a      	cmp	r2, r3
 80110ce:	d00a      	beq.n	80110e6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80110d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80110d4:	f383 8811 	msr	BASEPRI, r3
 80110d8:	f3bf 8f6f 	isb	sy
 80110dc:	f3bf 8f4f 	dsb	sy
 80110e0:	60fb      	str	r3, [r7, #12]
}
 80110e2:	bf00      	nop
 80110e4:	e7fe      	b.n	80110e4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80110e6:	693b      	ldr	r3, [r7, #16]
 80110e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80110ea:	2b00      	cmp	r3, #0
 80110ec:	d10a      	bne.n	8011104 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80110ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80110f2:	f383 8811 	msr	BASEPRI, r3
 80110f6:	f3bf 8f6f 	isb	sy
 80110fa:	f3bf 8f4f 	dsb	sy
 80110fe:	60bb      	str	r3, [r7, #8]
}
 8011100:	bf00      	nop
 8011102:	e7fe      	b.n	8011102 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8011104:	693b      	ldr	r3, [r7, #16]
 8011106:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011108:	1e5a      	subs	r2, r3, #1
 801110a:	693b      	ldr	r3, [r7, #16]
 801110c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 801110e:	693b      	ldr	r3, [r7, #16]
 8011110:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011112:	693b      	ldr	r3, [r7, #16]
 8011114:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011116:	429a      	cmp	r2, r3
 8011118:	d02c      	beq.n	8011174 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 801111a:	693b      	ldr	r3, [r7, #16]
 801111c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801111e:	2b00      	cmp	r3, #0
 8011120:	d128      	bne.n	8011174 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011122:	693b      	ldr	r3, [r7, #16]
 8011124:	3304      	adds	r3, #4
 8011126:	4618      	mov	r0, r3
 8011128:	f7fe fa6e 	bl	800f608 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 801112c:	693b      	ldr	r3, [r7, #16]
 801112e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8011130:	693b      	ldr	r3, [r7, #16]
 8011132:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011134:	693b      	ldr	r3, [r7, #16]
 8011136:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011138:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801113c:	693b      	ldr	r3, [r7, #16]
 801113e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8011140:	693b      	ldr	r3, [r7, #16]
 8011142:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011144:	4b0f      	ldr	r3, [pc, #60]	; (8011184 <xTaskPriorityDisinherit+0xd4>)
 8011146:	681b      	ldr	r3, [r3, #0]
 8011148:	429a      	cmp	r2, r3
 801114a:	d903      	bls.n	8011154 <xTaskPriorityDisinherit+0xa4>
 801114c:	693b      	ldr	r3, [r7, #16]
 801114e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011150:	4a0c      	ldr	r2, [pc, #48]	; (8011184 <xTaskPriorityDisinherit+0xd4>)
 8011152:	6013      	str	r3, [r2, #0]
 8011154:	693b      	ldr	r3, [r7, #16]
 8011156:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011158:	4613      	mov	r3, r2
 801115a:	009b      	lsls	r3, r3, #2
 801115c:	4413      	add	r3, r2
 801115e:	009b      	lsls	r3, r3, #2
 8011160:	4a09      	ldr	r2, [pc, #36]	; (8011188 <xTaskPriorityDisinherit+0xd8>)
 8011162:	441a      	add	r2, r3
 8011164:	693b      	ldr	r3, [r7, #16]
 8011166:	3304      	adds	r3, #4
 8011168:	4619      	mov	r1, r3
 801116a:	4610      	mov	r0, r2
 801116c:	f7fe f9ef 	bl	800f54e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8011170:	2301      	movs	r3, #1
 8011172:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8011174:	697b      	ldr	r3, [r7, #20]
	}
 8011176:	4618      	mov	r0, r3
 8011178:	3718      	adds	r7, #24
 801117a:	46bd      	mov	sp, r7
 801117c:	bd80      	pop	{r7, pc}
 801117e:	bf00      	nop
 8011180:	20001dc4 	.word	0x20001dc4
 8011184:	200022a0 	.word	0x200022a0
 8011188:	20001dc8 	.word	0x20001dc8

0801118c <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 801118c:	b580      	push	{r7, lr}
 801118e:	b086      	sub	sp, #24
 8011190:	af00      	add	r7, sp, #0
 8011192:	60f8      	str	r0, [r7, #12]
 8011194:	60b9      	str	r1, [r7, #8]
 8011196:	607a      	str	r2, [r7, #4]
 8011198:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 801119a:	f000 fecb 	bl	8011f34 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 801119e:	4b29      	ldr	r3, [pc, #164]	; (8011244 <xTaskNotifyWait+0xb8>)
 80111a0:	681b      	ldr	r3, [r3, #0]
 80111a2:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 80111a6:	b2db      	uxtb	r3, r3
 80111a8:	2b02      	cmp	r3, #2
 80111aa:	d01c      	beq.n	80111e6 <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 80111ac:	4b25      	ldr	r3, [pc, #148]	; (8011244 <xTaskNotifyWait+0xb8>)
 80111ae:	681b      	ldr	r3, [r3, #0]
 80111b0:	f8d3 10b8 	ldr.w	r1, [r3, #184]	; 0xb8
 80111b4:	68fa      	ldr	r2, [r7, #12]
 80111b6:	43d2      	mvns	r2, r2
 80111b8:	400a      	ands	r2, r1
 80111ba:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 80111be:	4b21      	ldr	r3, [pc, #132]	; (8011244 <xTaskNotifyWait+0xb8>)
 80111c0:	681b      	ldr	r3, [r3, #0]
 80111c2:	2201      	movs	r2, #1
 80111c4:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc

				if( xTicksToWait > ( TickType_t ) 0 )
 80111c8:	683b      	ldr	r3, [r7, #0]
 80111ca:	2b00      	cmp	r3, #0
 80111cc:	d00b      	beq.n	80111e6 <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80111ce:	2101      	movs	r1, #1
 80111d0:	6838      	ldr	r0, [r7, #0]
 80111d2:	f000 f9dd 	bl	8011590 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 80111d6:	4b1c      	ldr	r3, [pc, #112]	; (8011248 <xTaskNotifyWait+0xbc>)
 80111d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80111dc:	601a      	str	r2, [r3, #0]
 80111de:	f3bf 8f4f 	dsb	sy
 80111e2:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80111e6:	f000 fed5 	bl	8011f94 <vPortExitCritical>

		taskENTER_CRITICAL();
 80111ea:	f000 fea3 	bl	8011f34 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 80111ee:	687b      	ldr	r3, [r7, #4]
 80111f0:	2b00      	cmp	r3, #0
 80111f2:	d005      	beq.n	8011200 <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 80111f4:	4b13      	ldr	r3, [pc, #76]	; (8011244 <xTaskNotifyWait+0xb8>)
 80111f6:	681b      	ldr	r3, [r3, #0]
 80111f8:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 80111fc:	687b      	ldr	r3, [r7, #4]
 80111fe:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8011200:	4b10      	ldr	r3, [pc, #64]	; (8011244 <xTaskNotifyWait+0xb8>)
 8011202:	681b      	ldr	r3, [r3, #0]
 8011204:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 8011208:	b2db      	uxtb	r3, r3
 801120a:	2b02      	cmp	r3, #2
 801120c:	d002      	beq.n	8011214 <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 801120e:	2300      	movs	r3, #0
 8011210:	617b      	str	r3, [r7, #20]
 8011212:	e00a      	b.n	801122a <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8011214:	4b0b      	ldr	r3, [pc, #44]	; (8011244 <xTaskNotifyWait+0xb8>)
 8011216:	681b      	ldr	r3, [r3, #0]
 8011218:	f8d3 10b8 	ldr.w	r1, [r3, #184]	; 0xb8
 801121c:	68ba      	ldr	r2, [r7, #8]
 801121e:	43d2      	mvns	r2, r2
 8011220:	400a      	ands	r2, r1
 8011222:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
				xReturn = pdTRUE;
 8011226:	2301      	movs	r3, #1
 8011228:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801122a:	4b06      	ldr	r3, [pc, #24]	; (8011244 <xTaskNotifyWait+0xb8>)
 801122c:	681b      	ldr	r3, [r3, #0]
 801122e:	2200      	movs	r2, #0
 8011230:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
		}
		taskEXIT_CRITICAL();
 8011234:	f000 feae 	bl	8011f94 <vPortExitCritical>

		return xReturn;
 8011238:	697b      	ldr	r3, [r7, #20]
	}
 801123a:	4618      	mov	r0, r3
 801123c:	3718      	adds	r7, #24
 801123e:	46bd      	mov	sp, r7
 8011240:	bd80      	pop	{r7, pc}
 8011242:	bf00      	nop
 8011244:	20001dc4 	.word	0x20001dc4
 8011248:	e000ed04 	.word	0xe000ed04

0801124c <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 801124c:	b580      	push	{r7, lr}
 801124e:	b08a      	sub	sp, #40	; 0x28
 8011250:	af00      	add	r7, sp, #0
 8011252:	60f8      	str	r0, [r7, #12]
 8011254:	60b9      	str	r1, [r7, #8]
 8011256:	603b      	str	r3, [r7, #0]
 8011258:	4613      	mov	r3, r2
 801125a:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 801125c:	2301      	movs	r3, #1
 801125e:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8011260:	68fb      	ldr	r3, [r7, #12]
 8011262:	2b00      	cmp	r3, #0
 8011264:	d10a      	bne.n	801127c <xTaskGenericNotify+0x30>
	__asm volatile
 8011266:	f04f 0350 	mov.w	r3, #80	; 0x50
 801126a:	f383 8811 	msr	BASEPRI, r3
 801126e:	f3bf 8f6f 	isb	sy
 8011272:	f3bf 8f4f 	dsb	sy
 8011276:	61bb      	str	r3, [r7, #24]
}
 8011278:	bf00      	nop
 801127a:	e7fe      	b.n	801127a <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 801127c:	68fb      	ldr	r3, [r7, #12]
 801127e:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 8011280:	f000 fe58 	bl	8011f34 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8011284:	683b      	ldr	r3, [r7, #0]
 8011286:	2b00      	cmp	r3, #0
 8011288:	d004      	beq.n	8011294 <xTaskGenericNotify+0x48>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 801128a:	6a3b      	ldr	r3, [r7, #32]
 801128c:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 8011290:	683b      	ldr	r3, [r7, #0]
 8011292:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8011294:	6a3b      	ldr	r3, [r7, #32]
 8011296:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 801129a:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 801129c:	6a3b      	ldr	r3, [r7, #32]
 801129e:	2202      	movs	r2, #2
 80112a0:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc

			switch( eAction )
 80112a4:	79fb      	ldrb	r3, [r7, #7]
 80112a6:	2b04      	cmp	r3, #4
 80112a8:	d82d      	bhi.n	8011306 <xTaskGenericNotify+0xba>
 80112aa:	a201      	add	r2, pc, #4	; (adr r2, 80112b0 <xTaskGenericNotify+0x64>)
 80112ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80112b0:	08011329 	.word	0x08011329
 80112b4:	080112c5 	.word	0x080112c5
 80112b8:	080112d7 	.word	0x080112d7
 80112bc:	080112e7 	.word	0x080112e7
 80112c0:	080112f1 	.word	0x080112f1
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 80112c4:	6a3b      	ldr	r3, [r7, #32]
 80112c6:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 80112ca:	68bb      	ldr	r3, [r7, #8]
 80112cc:	431a      	orrs	r2, r3
 80112ce:	6a3b      	ldr	r3, [r7, #32]
 80112d0:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
					break;
 80112d4:	e02b      	b.n	801132e <xTaskGenericNotify+0xe2>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 80112d6:	6a3b      	ldr	r3, [r7, #32]
 80112d8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80112dc:	1c5a      	adds	r2, r3, #1
 80112de:	6a3b      	ldr	r3, [r7, #32]
 80112e0:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
					break;
 80112e4:	e023      	b.n	801132e <xTaskGenericNotify+0xe2>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 80112e6:	6a3b      	ldr	r3, [r7, #32]
 80112e8:	68ba      	ldr	r2, [r7, #8]
 80112ea:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
					break;
 80112ee:	e01e      	b.n	801132e <xTaskGenericNotify+0xe2>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80112f0:	7ffb      	ldrb	r3, [r7, #31]
 80112f2:	2b02      	cmp	r3, #2
 80112f4:	d004      	beq.n	8011300 <xTaskGenericNotify+0xb4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 80112f6:	6a3b      	ldr	r3, [r7, #32]
 80112f8:	68ba      	ldr	r2, [r7, #8]
 80112fa:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 80112fe:	e016      	b.n	801132e <xTaskGenericNotify+0xe2>
						xReturn = pdFAIL;
 8011300:	2300      	movs	r3, #0
 8011302:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 8011304:	e013      	b.n	801132e <xTaskGenericNotify+0xe2>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8011306:	6a3b      	ldr	r3, [r7, #32]
 8011308:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 801130c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011310:	d00c      	beq.n	801132c <xTaskGenericNotify+0xe0>
	__asm volatile
 8011312:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011316:	f383 8811 	msr	BASEPRI, r3
 801131a:	f3bf 8f6f 	isb	sy
 801131e:	f3bf 8f4f 	dsb	sy
 8011322:	617b      	str	r3, [r7, #20]
}
 8011324:	bf00      	nop
 8011326:	e7fe      	b.n	8011326 <xTaskGenericNotify+0xda>
					break;
 8011328:	bf00      	nop
 801132a:	e000      	b.n	801132e <xTaskGenericNotify+0xe2>

					break;
 801132c:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 801132e:	7ffb      	ldrb	r3, [r7, #31]
 8011330:	2b01      	cmp	r3, #1
 8011332:	d13a      	bne.n	80113aa <xTaskGenericNotify+0x15e>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011334:	6a3b      	ldr	r3, [r7, #32]
 8011336:	3304      	adds	r3, #4
 8011338:	4618      	mov	r0, r3
 801133a:	f7fe f965 	bl	800f608 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 801133e:	6a3b      	ldr	r3, [r7, #32]
 8011340:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011342:	4b1d      	ldr	r3, [pc, #116]	; (80113b8 <xTaskGenericNotify+0x16c>)
 8011344:	681b      	ldr	r3, [r3, #0]
 8011346:	429a      	cmp	r2, r3
 8011348:	d903      	bls.n	8011352 <xTaskGenericNotify+0x106>
 801134a:	6a3b      	ldr	r3, [r7, #32]
 801134c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801134e:	4a1a      	ldr	r2, [pc, #104]	; (80113b8 <xTaskGenericNotify+0x16c>)
 8011350:	6013      	str	r3, [r2, #0]
 8011352:	6a3b      	ldr	r3, [r7, #32]
 8011354:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011356:	4613      	mov	r3, r2
 8011358:	009b      	lsls	r3, r3, #2
 801135a:	4413      	add	r3, r2
 801135c:	009b      	lsls	r3, r3, #2
 801135e:	4a17      	ldr	r2, [pc, #92]	; (80113bc <xTaskGenericNotify+0x170>)
 8011360:	441a      	add	r2, r3
 8011362:	6a3b      	ldr	r3, [r7, #32]
 8011364:	3304      	adds	r3, #4
 8011366:	4619      	mov	r1, r3
 8011368:	4610      	mov	r0, r2
 801136a:	f7fe f8f0 	bl	800f54e <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 801136e:	6a3b      	ldr	r3, [r7, #32]
 8011370:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011372:	2b00      	cmp	r3, #0
 8011374:	d00a      	beq.n	801138c <xTaskGenericNotify+0x140>
	__asm volatile
 8011376:	f04f 0350 	mov.w	r3, #80	; 0x50
 801137a:	f383 8811 	msr	BASEPRI, r3
 801137e:	f3bf 8f6f 	isb	sy
 8011382:	f3bf 8f4f 	dsb	sy
 8011386:	613b      	str	r3, [r7, #16]
}
 8011388:	bf00      	nop
 801138a:	e7fe      	b.n	801138a <xTaskGenericNotify+0x13e>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 801138c:	6a3b      	ldr	r3, [r7, #32]
 801138e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011390:	4b0b      	ldr	r3, [pc, #44]	; (80113c0 <xTaskGenericNotify+0x174>)
 8011392:	681b      	ldr	r3, [r3, #0]
 8011394:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011396:	429a      	cmp	r2, r3
 8011398:	d907      	bls.n	80113aa <xTaskGenericNotify+0x15e>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 801139a:	4b0a      	ldr	r3, [pc, #40]	; (80113c4 <xTaskGenericNotify+0x178>)
 801139c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80113a0:	601a      	str	r2, [r3, #0]
 80113a2:	f3bf 8f4f 	dsb	sy
 80113a6:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80113aa:	f000 fdf3 	bl	8011f94 <vPortExitCritical>

		return xReturn;
 80113ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 80113b0:	4618      	mov	r0, r3
 80113b2:	3728      	adds	r7, #40	; 0x28
 80113b4:	46bd      	mov	sp, r7
 80113b6:	bd80      	pop	{r7, pc}
 80113b8:	200022a0 	.word	0x200022a0
 80113bc:	20001dc8 	.word	0x20001dc8
 80113c0:	20001dc4 	.word	0x20001dc4
 80113c4:	e000ed04 	.word	0xe000ed04

080113c8 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80113c8:	b580      	push	{r7, lr}
 80113ca:	b08e      	sub	sp, #56	; 0x38
 80113cc:	af00      	add	r7, sp, #0
 80113ce:	60f8      	str	r0, [r7, #12]
 80113d0:	60b9      	str	r1, [r7, #8]
 80113d2:	603b      	str	r3, [r7, #0]
 80113d4:	4613      	mov	r3, r2
 80113d6:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 80113d8:	2301      	movs	r3, #1
 80113da:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 80113dc:	68fb      	ldr	r3, [r7, #12]
 80113de:	2b00      	cmp	r3, #0
 80113e0:	d10a      	bne.n	80113f8 <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 80113e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80113e6:	f383 8811 	msr	BASEPRI, r3
 80113ea:	f3bf 8f6f 	isb	sy
 80113ee:	f3bf 8f4f 	dsb	sy
 80113f2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80113f4:	bf00      	nop
 80113f6:	e7fe      	b.n	80113f6 <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80113f8:	f000 fe7e 	bl	80120f8 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 80113fc:	68fb      	ldr	r3, [r7, #12]
 80113fe:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 8011400:	f3ef 8211 	mrs	r2, BASEPRI
 8011404:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011408:	f383 8811 	msr	BASEPRI, r3
 801140c:	f3bf 8f6f 	isb	sy
 8011410:	f3bf 8f4f 	dsb	sy
 8011414:	623a      	str	r2, [r7, #32]
 8011416:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 8011418:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801141a:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 801141c:	683b      	ldr	r3, [r7, #0]
 801141e:	2b00      	cmp	r3, #0
 8011420:	d004      	beq.n	801142c <xTaskGenericNotifyFromISR+0x64>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8011422:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011424:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 8011428:	683b      	ldr	r3, [r7, #0]
 801142a:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 801142c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801142e:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 8011432:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8011436:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011438:	2202      	movs	r2, #2
 801143a:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc

			switch( eAction )
 801143e:	79fb      	ldrb	r3, [r7, #7]
 8011440:	2b04      	cmp	r3, #4
 8011442:	d82f      	bhi.n	80114a4 <xTaskGenericNotifyFromISR+0xdc>
 8011444:	a201      	add	r2, pc, #4	; (adr r2, 801144c <xTaskGenericNotifyFromISR+0x84>)
 8011446:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801144a:	bf00      	nop
 801144c:	080114c7 	.word	0x080114c7
 8011450:	08011461 	.word	0x08011461
 8011454:	08011473 	.word	0x08011473
 8011458:	08011483 	.word	0x08011483
 801145c:	0801148d 	.word	0x0801148d
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8011460:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011462:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 8011466:	68bb      	ldr	r3, [r7, #8]
 8011468:	431a      	orrs	r2, r3
 801146a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801146c:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
					break;
 8011470:	e02c      	b.n	80114cc <xTaskGenericNotifyFromISR+0x104>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8011472:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011474:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8011478:	1c5a      	adds	r2, r3, #1
 801147a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801147c:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
					break;
 8011480:	e024      	b.n	80114cc <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8011482:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011484:	68ba      	ldr	r2, [r7, #8]
 8011486:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
					break;
 801148a:	e01f      	b.n	80114cc <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 801148c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8011490:	2b02      	cmp	r3, #2
 8011492:	d004      	beq.n	801149e <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8011494:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011496:	68ba      	ldr	r2, [r7, #8]
 8011498:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 801149c:	e016      	b.n	80114cc <xTaskGenericNotifyFromISR+0x104>
						xReturn = pdFAIL;
 801149e:	2300      	movs	r3, #0
 80114a0:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 80114a2:	e013      	b.n	80114cc <xTaskGenericNotifyFromISR+0x104>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 80114a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80114a6:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80114aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80114ae:	d00c      	beq.n	80114ca <xTaskGenericNotifyFromISR+0x102>
	__asm volatile
 80114b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80114b4:	f383 8811 	msr	BASEPRI, r3
 80114b8:	f3bf 8f6f 	isb	sy
 80114bc:	f3bf 8f4f 	dsb	sy
 80114c0:	61bb      	str	r3, [r7, #24]
}
 80114c2:	bf00      	nop
 80114c4:	e7fe      	b.n	80114c4 <xTaskGenericNotifyFromISR+0xfc>
					break;
 80114c6:	bf00      	nop
 80114c8:	e000      	b.n	80114cc <xTaskGenericNotifyFromISR+0x104>
					break;
 80114ca:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80114cc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80114d0:	2b01      	cmp	r3, #1
 80114d2:	d146      	bne.n	8011562 <xTaskGenericNotifyFromISR+0x19a>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80114d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80114d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80114d8:	2b00      	cmp	r3, #0
 80114da:	d00a      	beq.n	80114f2 <xTaskGenericNotifyFromISR+0x12a>
	__asm volatile
 80114dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80114e0:	f383 8811 	msr	BASEPRI, r3
 80114e4:	f3bf 8f6f 	isb	sy
 80114e8:	f3bf 8f4f 	dsb	sy
 80114ec:	617b      	str	r3, [r7, #20]
}
 80114ee:	bf00      	nop
 80114f0:	e7fe      	b.n	80114f0 <xTaskGenericNotifyFromISR+0x128>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80114f2:	4b21      	ldr	r3, [pc, #132]	; (8011578 <xTaskGenericNotifyFromISR+0x1b0>)
 80114f4:	681b      	ldr	r3, [r3, #0]
 80114f6:	2b00      	cmp	r3, #0
 80114f8:	d11d      	bne.n	8011536 <xTaskGenericNotifyFromISR+0x16e>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80114fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80114fc:	3304      	adds	r3, #4
 80114fe:	4618      	mov	r0, r3
 8011500:	f7fe f882 	bl	800f608 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8011504:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011506:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011508:	4b1c      	ldr	r3, [pc, #112]	; (801157c <xTaskGenericNotifyFromISR+0x1b4>)
 801150a:	681b      	ldr	r3, [r3, #0]
 801150c:	429a      	cmp	r2, r3
 801150e:	d903      	bls.n	8011518 <xTaskGenericNotifyFromISR+0x150>
 8011510:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011514:	4a19      	ldr	r2, [pc, #100]	; (801157c <xTaskGenericNotifyFromISR+0x1b4>)
 8011516:	6013      	str	r3, [r2, #0]
 8011518:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801151a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801151c:	4613      	mov	r3, r2
 801151e:	009b      	lsls	r3, r3, #2
 8011520:	4413      	add	r3, r2
 8011522:	009b      	lsls	r3, r3, #2
 8011524:	4a16      	ldr	r2, [pc, #88]	; (8011580 <xTaskGenericNotifyFromISR+0x1b8>)
 8011526:	441a      	add	r2, r3
 8011528:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801152a:	3304      	adds	r3, #4
 801152c:	4619      	mov	r1, r3
 801152e:	4610      	mov	r0, r2
 8011530:	f7fe f80d 	bl	800f54e <vListInsertEnd>
 8011534:	e005      	b.n	8011542 <xTaskGenericNotifyFromISR+0x17a>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8011536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011538:	3318      	adds	r3, #24
 801153a:	4619      	mov	r1, r3
 801153c:	4811      	ldr	r0, [pc, #68]	; (8011584 <xTaskGenericNotifyFromISR+0x1bc>)
 801153e:	f7fe f806 	bl	800f54e <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8011542:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011544:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011546:	4b10      	ldr	r3, [pc, #64]	; (8011588 <xTaskGenericNotifyFromISR+0x1c0>)
 8011548:	681b      	ldr	r3, [r3, #0]
 801154a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801154c:	429a      	cmp	r2, r3
 801154e:	d908      	bls.n	8011562 <xTaskGenericNotifyFromISR+0x19a>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8011550:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011552:	2b00      	cmp	r3, #0
 8011554:	d002      	beq.n	801155c <xTaskGenericNotifyFromISR+0x194>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8011556:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011558:	2201      	movs	r2, #1
 801155a:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 801155c:	4b0b      	ldr	r3, [pc, #44]	; (801158c <xTaskGenericNotifyFromISR+0x1c4>)
 801155e:	2201      	movs	r2, #1
 8011560:	601a      	str	r2, [r3, #0]
 8011562:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011564:	613b      	str	r3, [r7, #16]
	__asm volatile
 8011566:	693b      	ldr	r3, [r7, #16]
 8011568:	f383 8811 	msr	BASEPRI, r3
}
 801156c:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 801156e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 8011570:	4618      	mov	r0, r3
 8011572:	3738      	adds	r7, #56	; 0x38
 8011574:	46bd      	mov	sp, r7
 8011576:	bd80      	pop	{r7, pc}
 8011578:	200022c0 	.word	0x200022c0
 801157c:	200022a0 	.word	0x200022a0
 8011580:	20001dc8 	.word	0x20001dc8
 8011584:	20002258 	.word	0x20002258
 8011588:	20001dc4 	.word	0x20001dc4
 801158c:	200022ac 	.word	0x200022ac

08011590 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8011590:	b580      	push	{r7, lr}
 8011592:	b084      	sub	sp, #16
 8011594:	af00      	add	r7, sp, #0
 8011596:	6078      	str	r0, [r7, #4]
 8011598:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 801159a:	4b21      	ldr	r3, [pc, #132]	; (8011620 <prvAddCurrentTaskToDelayedList+0x90>)
 801159c:	681b      	ldr	r3, [r3, #0]
 801159e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80115a0:	4b20      	ldr	r3, [pc, #128]	; (8011624 <prvAddCurrentTaskToDelayedList+0x94>)
 80115a2:	681b      	ldr	r3, [r3, #0]
 80115a4:	3304      	adds	r3, #4
 80115a6:	4618      	mov	r0, r3
 80115a8:	f7fe f82e 	bl	800f608 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80115ac:	687b      	ldr	r3, [r7, #4]
 80115ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80115b2:	d10a      	bne.n	80115ca <prvAddCurrentTaskToDelayedList+0x3a>
 80115b4:	683b      	ldr	r3, [r7, #0]
 80115b6:	2b00      	cmp	r3, #0
 80115b8:	d007      	beq.n	80115ca <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80115ba:	4b1a      	ldr	r3, [pc, #104]	; (8011624 <prvAddCurrentTaskToDelayedList+0x94>)
 80115bc:	681b      	ldr	r3, [r3, #0]
 80115be:	3304      	adds	r3, #4
 80115c0:	4619      	mov	r1, r3
 80115c2:	4819      	ldr	r0, [pc, #100]	; (8011628 <prvAddCurrentTaskToDelayedList+0x98>)
 80115c4:	f7fd ffc3 	bl	800f54e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80115c8:	e026      	b.n	8011618 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80115ca:	68fa      	ldr	r2, [r7, #12]
 80115cc:	687b      	ldr	r3, [r7, #4]
 80115ce:	4413      	add	r3, r2
 80115d0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80115d2:	4b14      	ldr	r3, [pc, #80]	; (8011624 <prvAddCurrentTaskToDelayedList+0x94>)
 80115d4:	681b      	ldr	r3, [r3, #0]
 80115d6:	68ba      	ldr	r2, [r7, #8]
 80115d8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80115da:	68ba      	ldr	r2, [r7, #8]
 80115dc:	68fb      	ldr	r3, [r7, #12]
 80115de:	429a      	cmp	r2, r3
 80115e0:	d209      	bcs.n	80115f6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80115e2:	4b12      	ldr	r3, [pc, #72]	; (801162c <prvAddCurrentTaskToDelayedList+0x9c>)
 80115e4:	681a      	ldr	r2, [r3, #0]
 80115e6:	4b0f      	ldr	r3, [pc, #60]	; (8011624 <prvAddCurrentTaskToDelayedList+0x94>)
 80115e8:	681b      	ldr	r3, [r3, #0]
 80115ea:	3304      	adds	r3, #4
 80115ec:	4619      	mov	r1, r3
 80115ee:	4610      	mov	r0, r2
 80115f0:	f7fd ffd1 	bl	800f596 <vListInsert>
}
 80115f4:	e010      	b.n	8011618 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80115f6:	4b0e      	ldr	r3, [pc, #56]	; (8011630 <prvAddCurrentTaskToDelayedList+0xa0>)
 80115f8:	681a      	ldr	r2, [r3, #0]
 80115fa:	4b0a      	ldr	r3, [pc, #40]	; (8011624 <prvAddCurrentTaskToDelayedList+0x94>)
 80115fc:	681b      	ldr	r3, [r3, #0]
 80115fe:	3304      	adds	r3, #4
 8011600:	4619      	mov	r1, r3
 8011602:	4610      	mov	r0, r2
 8011604:	f7fd ffc7 	bl	800f596 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8011608:	4b0a      	ldr	r3, [pc, #40]	; (8011634 <prvAddCurrentTaskToDelayedList+0xa4>)
 801160a:	681b      	ldr	r3, [r3, #0]
 801160c:	68ba      	ldr	r2, [r7, #8]
 801160e:	429a      	cmp	r2, r3
 8011610:	d202      	bcs.n	8011618 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8011612:	4a08      	ldr	r2, [pc, #32]	; (8011634 <prvAddCurrentTaskToDelayedList+0xa4>)
 8011614:	68bb      	ldr	r3, [r7, #8]
 8011616:	6013      	str	r3, [r2, #0]
}
 8011618:	bf00      	nop
 801161a:	3710      	adds	r7, #16
 801161c:	46bd      	mov	sp, r7
 801161e:	bd80      	pop	{r7, pc}
 8011620:	2000229c 	.word	0x2000229c
 8011624:	20001dc4 	.word	0x20001dc4
 8011628:	20002284 	.word	0x20002284
 801162c:	20002254 	.word	0x20002254
 8011630:	20002250 	.word	0x20002250
 8011634:	200022b8 	.word	0x200022b8

08011638 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8011638:	b580      	push	{r7, lr}
 801163a:	b08a      	sub	sp, #40	; 0x28
 801163c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 801163e:	2300      	movs	r3, #0
 8011640:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8011642:	f000 fb07 	bl	8011c54 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8011646:	4b1c      	ldr	r3, [pc, #112]	; (80116b8 <xTimerCreateTimerTask+0x80>)
 8011648:	681b      	ldr	r3, [r3, #0]
 801164a:	2b00      	cmp	r3, #0
 801164c:	d021      	beq.n	8011692 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 801164e:	2300      	movs	r3, #0
 8011650:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8011652:	2300      	movs	r3, #0
 8011654:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8011656:	1d3a      	adds	r2, r7, #4
 8011658:	f107 0108 	add.w	r1, r7, #8
 801165c:	f107 030c 	add.w	r3, r7, #12
 8011660:	4618      	mov	r0, r3
 8011662:	f7fd ff2d 	bl	800f4c0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8011666:	6879      	ldr	r1, [r7, #4]
 8011668:	68bb      	ldr	r3, [r7, #8]
 801166a:	68fa      	ldr	r2, [r7, #12]
 801166c:	9202      	str	r2, [sp, #8]
 801166e:	9301      	str	r3, [sp, #4]
 8011670:	2302      	movs	r3, #2
 8011672:	9300      	str	r3, [sp, #0]
 8011674:	2300      	movs	r3, #0
 8011676:	460a      	mov	r2, r1
 8011678:	4910      	ldr	r1, [pc, #64]	; (80116bc <xTimerCreateTimerTask+0x84>)
 801167a:	4811      	ldr	r0, [pc, #68]	; (80116c0 <xTimerCreateTimerTask+0x88>)
 801167c:	f7fe fdb8 	bl	80101f0 <xTaskCreateStatic>
 8011680:	4603      	mov	r3, r0
 8011682:	4a10      	ldr	r2, [pc, #64]	; (80116c4 <xTimerCreateTimerTask+0x8c>)
 8011684:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8011686:	4b0f      	ldr	r3, [pc, #60]	; (80116c4 <xTimerCreateTimerTask+0x8c>)
 8011688:	681b      	ldr	r3, [r3, #0]
 801168a:	2b00      	cmp	r3, #0
 801168c:	d001      	beq.n	8011692 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 801168e:	2301      	movs	r3, #1
 8011690:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8011692:	697b      	ldr	r3, [r7, #20]
 8011694:	2b00      	cmp	r3, #0
 8011696:	d10a      	bne.n	80116ae <xTimerCreateTimerTask+0x76>
	__asm volatile
 8011698:	f04f 0350 	mov.w	r3, #80	; 0x50
 801169c:	f383 8811 	msr	BASEPRI, r3
 80116a0:	f3bf 8f6f 	isb	sy
 80116a4:	f3bf 8f4f 	dsb	sy
 80116a8:	613b      	str	r3, [r7, #16]
}
 80116aa:	bf00      	nop
 80116ac:	e7fe      	b.n	80116ac <xTimerCreateTimerTask+0x74>
	return xReturn;
 80116ae:	697b      	ldr	r3, [r7, #20]
}
 80116b0:	4618      	mov	r0, r3
 80116b2:	3718      	adds	r7, #24
 80116b4:	46bd      	mov	sp, r7
 80116b6:	bd80      	pop	{r7, pc}
 80116b8:	200022fc 	.word	0x200022fc
 80116bc:	0801552c 	.word	0x0801552c
 80116c0:	080117fd 	.word	0x080117fd
 80116c4:	20002300 	.word	0x20002300

080116c8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80116c8:	b580      	push	{r7, lr}
 80116ca:	b08a      	sub	sp, #40	; 0x28
 80116cc:	af00      	add	r7, sp, #0
 80116ce:	60f8      	str	r0, [r7, #12]
 80116d0:	60b9      	str	r1, [r7, #8]
 80116d2:	607a      	str	r2, [r7, #4]
 80116d4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80116d6:	2300      	movs	r3, #0
 80116d8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80116da:	68fb      	ldr	r3, [r7, #12]
 80116dc:	2b00      	cmp	r3, #0
 80116de:	d10a      	bne.n	80116f6 <xTimerGenericCommand+0x2e>
	__asm volatile
 80116e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80116e4:	f383 8811 	msr	BASEPRI, r3
 80116e8:	f3bf 8f6f 	isb	sy
 80116ec:	f3bf 8f4f 	dsb	sy
 80116f0:	623b      	str	r3, [r7, #32]
}
 80116f2:	bf00      	nop
 80116f4:	e7fe      	b.n	80116f4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80116f6:	4b1a      	ldr	r3, [pc, #104]	; (8011760 <xTimerGenericCommand+0x98>)
 80116f8:	681b      	ldr	r3, [r3, #0]
 80116fa:	2b00      	cmp	r3, #0
 80116fc:	d02a      	beq.n	8011754 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80116fe:	68bb      	ldr	r3, [r7, #8]
 8011700:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8011702:	687b      	ldr	r3, [r7, #4]
 8011704:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8011706:	68fb      	ldr	r3, [r7, #12]
 8011708:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 801170a:	68bb      	ldr	r3, [r7, #8]
 801170c:	2b05      	cmp	r3, #5
 801170e:	dc18      	bgt.n	8011742 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8011710:	f7ff fcb0 	bl	8011074 <xTaskGetSchedulerState>
 8011714:	4603      	mov	r3, r0
 8011716:	2b02      	cmp	r3, #2
 8011718:	d109      	bne.n	801172e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 801171a:	4b11      	ldr	r3, [pc, #68]	; (8011760 <xTimerGenericCommand+0x98>)
 801171c:	6818      	ldr	r0, [r3, #0]
 801171e:	f107 0110 	add.w	r1, r7, #16
 8011722:	2300      	movs	r3, #0
 8011724:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011726:	f7fe f8d7 	bl	800f8d8 <xQueueGenericSend>
 801172a:	6278      	str	r0, [r7, #36]	; 0x24
 801172c:	e012      	b.n	8011754 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 801172e:	4b0c      	ldr	r3, [pc, #48]	; (8011760 <xTimerGenericCommand+0x98>)
 8011730:	6818      	ldr	r0, [r3, #0]
 8011732:	f107 0110 	add.w	r1, r7, #16
 8011736:	2300      	movs	r3, #0
 8011738:	2200      	movs	r2, #0
 801173a:	f7fe f8cd 	bl	800f8d8 <xQueueGenericSend>
 801173e:	6278      	str	r0, [r7, #36]	; 0x24
 8011740:	e008      	b.n	8011754 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8011742:	4b07      	ldr	r3, [pc, #28]	; (8011760 <xTimerGenericCommand+0x98>)
 8011744:	6818      	ldr	r0, [r3, #0]
 8011746:	f107 0110 	add.w	r1, r7, #16
 801174a:	2300      	movs	r3, #0
 801174c:	683a      	ldr	r2, [r7, #0]
 801174e:	f7fe f9c1 	bl	800fad4 <xQueueGenericSendFromISR>
 8011752:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8011754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8011756:	4618      	mov	r0, r3
 8011758:	3728      	adds	r7, #40	; 0x28
 801175a:	46bd      	mov	sp, r7
 801175c:	bd80      	pop	{r7, pc}
 801175e:	bf00      	nop
 8011760:	200022fc 	.word	0x200022fc

08011764 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8011764:	b580      	push	{r7, lr}
 8011766:	b088      	sub	sp, #32
 8011768:	af02      	add	r7, sp, #8
 801176a:	6078      	str	r0, [r7, #4]
 801176c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801176e:	4b22      	ldr	r3, [pc, #136]	; (80117f8 <prvProcessExpiredTimer+0x94>)
 8011770:	681b      	ldr	r3, [r3, #0]
 8011772:	68db      	ldr	r3, [r3, #12]
 8011774:	68db      	ldr	r3, [r3, #12]
 8011776:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8011778:	697b      	ldr	r3, [r7, #20]
 801177a:	3304      	adds	r3, #4
 801177c:	4618      	mov	r0, r3
 801177e:	f7fd ff43 	bl	800f608 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8011782:	697b      	ldr	r3, [r7, #20]
 8011784:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011788:	f003 0304 	and.w	r3, r3, #4
 801178c:	2b00      	cmp	r3, #0
 801178e:	d022      	beq.n	80117d6 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8011790:	697b      	ldr	r3, [r7, #20]
 8011792:	699a      	ldr	r2, [r3, #24]
 8011794:	687b      	ldr	r3, [r7, #4]
 8011796:	18d1      	adds	r1, r2, r3
 8011798:	687b      	ldr	r3, [r7, #4]
 801179a:	683a      	ldr	r2, [r7, #0]
 801179c:	6978      	ldr	r0, [r7, #20]
 801179e:	f000 f8d1 	bl	8011944 <prvInsertTimerInActiveList>
 80117a2:	4603      	mov	r3, r0
 80117a4:	2b00      	cmp	r3, #0
 80117a6:	d01f      	beq.n	80117e8 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80117a8:	2300      	movs	r3, #0
 80117aa:	9300      	str	r3, [sp, #0]
 80117ac:	2300      	movs	r3, #0
 80117ae:	687a      	ldr	r2, [r7, #4]
 80117b0:	2100      	movs	r1, #0
 80117b2:	6978      	ldr	r0, [r7, #20]
 80117b4:	f7ff ff88 	bl	80116c8 <xTimerGenericCommand>
 80117b8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80117ba:	693b      	ldr	r3, [r7, #16]
 80117bc:	2b00      	cmp	r3, #0
 80117be:	d113      	bne.n	80117e8 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80117c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80117c4:	f383 8811 	msr	BASEPRI, r3
 80117c8:	f3bf 8f6f 	isb	sy
 80117cc:	f3bf 8f4f 	dsb	sy
 80117d0:	60fb      	str	r3, [r7, #12]
}
 80117d2:	bf00      	nop
 80117d4:	e7fe      	b.n	80117d4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80117d6:	697b      	ldr	r3, [r7, #20]
 80117d8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80117dc:	f023 0301 	bic.w	r3, r3, #1
 80117e0:	b2da      	uxtb	r2, r3
 80117e2:	697b      	ldr	r3, [r7, #20]
 80117e4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80117e8:	697b      	ldr	r3, [r7, #20]
 80117ea:	6a1b      	ldr	r3, [r3, #32]
 80117ec:	6978      	ldr	r0, [r7, #20]
 80117ee:	4798      	blx	r3
}
 80117f0:	bf00      	nop
 80117f2:	3718      	adds	r7, #24
 80117f4:	46bd      	mov	sp, r7
 80117f6:	bd80      	pop	{r7, pc}
 80117f8:	200022f4 	.word	0x200022f4

080117fc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80117fc:	b580      	push	{r7, lr}
 80117fe:	b084      	sub	sp, #16
 8011800:	af00      	add	r7, sp, #0
 8011802:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8011804:	f107 0308 	add.w	r3, r7, #8
 8011808:	4618      	mov	r0, r3
 801180a:	f000 f857 	bl	80118bc <prvGetNextExpireTime>
 801180e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8011810:	68bb      	ldr	r3, [r7, #8]
 8011812:	4619      	mov	r1, r3
 8011814:	68f8      	ldr	r0, [r7, #12]
 8011816:	f000 f803 	bl	8011820 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 801181a:	f000 f8d5 	bl	80119c8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801181e:	e7f1      	b.n	8011804 <prvTimerTask+0x8>

08011820 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8011820:	b580      	push	{r7, lr}
 8011822:	b084      	sub	sp, #16
 8011824:	af00      	add	r7, sp, #0
 8011826:	6078      	str	r0, [r7, #4]
 8011828:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 801182a:	f7ff f81b 	bl	8010864 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801182e:	f107 0308 	add.w	r3, r7, #8
 8011832:	4618      	mov	r0, r3
 8011834:	f000 f866 	bl	8011904 <prvSampleTimeNow>
 8011838:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 801183a:	68bb      	ldr	r3, [r7, #8]
 801183c:	2b00      	cmp	r3, #0
 801183e:	d130      	bne.n	80118a2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8011840:	683b      	ldr	r3, [r7, #0]
 8011842:	2b00      	cmp	r3, #0
 8011844:	d10a      	bne.n	801185c <prvProcessTimerOrBlockTask+0x3c>
 8011846:	687a      	ldr	r2, [r7, #4]
 8011848:	68fb      	ldr	r3, [r7, #12]
 801184a:	429a      	cmp	r2, r3
 801184c:	d806      	bhi.n	801185c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 801184e:	f7ff f817 	bl	8010880 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8011852:	68f9      	ldr	r1, [r7, #12]
 8011854:	6878      	ldr	r0, [r7, #4]
 8011856:	f7ff ff85 	bl	8011764 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 801185a:	e024      	b.n	80118a6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 801185c:	683b      	ldr	r3, [r7, #0]
 801185e:	2b00      	cmp	r3, #0
 8011860:	d008      	beq.n	8011874 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8011862:	4b13      	ldr	r3, [pc, #76]	; (80118b0 <prvProcessTimerOrBlockTask+0x90>)
 8011864:	681b      	ldr	r3, [r3, #0]
 8011866:	681b      	ldr	r3, [r3, #0]
 8011868:	2b00      	cmp	r3, #0
 801186a:	d101      	bne.n	8011870 <prvProcessTimerOrBlockTask+0x50>
 801186c:	2301      	movs	r3, #1
 801186e:	e000      	b.n	8011872 <prvProcessTimerOrBlockTask+0x52>
 8011870:	2300      	movs	r3, #0
 8011872:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8011874:	4b0f      	ldr	r3, [pc, #60]	; (80118b4 <prvProcessTimerOrBlockTask+0x94>)
 8011876:	6818      	ldr	r0, [r3, #0]
 8011878:	687a      	ldr	r2, [r7, #4]
 801187a:	68fb      	ldr	r3, [r7, #12]
 801187c:	1ad3      	subs	r3, r2, r3
 801187e:	683a      	ldr	r2, [r7, #0]
 8011880:	4619      	mov	r1, r3
 8011882:	f7fe fc81 	bl	8010188 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8011886:	f7fe fffb 	bl	8010880 <xTaskResumeAll>
 801188a:	4603      	mov	r3, r0
 801188c:	2b00      	cmp	r3, #0
 801188e:	d10a      	bne.n	80118a6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8011890:	4b09      	ldr	r3, [pc, #36]	; (80118b8 <prvProcessTimerOrBlockTask+0x98>)
 8011892:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011896:	601a      	str	r2, [r3, #0]
 8011898:	f3bf 8f4f 	dsb	sy
 801189c:	f3bf 8f6f 	isb	sy
}
 80118a0:	e001      	b.n	80118a6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80118a2:	f7fe ffed 	bl	8010880 <xTaskResumeAll>
}
 80118a6:	bf00      	nop
 80118a8:	3710      	adds	r7, #16
 80118aa:	46bd      	mov	sp, r7
 80118ac:	bd80      	pop	{r7, pc}
 80118ae:	bf00      	nop
 80118b0:	200022f8 	.word	0x200022f8
 80118b4:	200022fc 	.word	0x200022fc
 80118b8:	e000ed04 	.word	0xe000ed04

080118bc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80118bc:	b480      	push	{r7}
 80118be:	b085      	sub	sp, #20
 80118c0:	af00      	add	r7, sp, #0
 80118c2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80118c4:	4b0e      	ldr	r3, [pc, #56]	; (8011900 <prvGetNextExpireTime+0x44>)
 80118c6:	681b      	ldr	r3, [r3, #0]
 80118c8:	681b      	ldr	r3, [r3, #0]
 80118ca:	2b00      	cmp	r3, #0
 80118cc:	d101      	bne.n	80118d2 <prvGetNextExpireTime+0x16>
 80118ce:	2201      	movs	r2, #1
 80118d0:	e000      	b.n	80118d4 <prvGetNextExpireTime+0x18>
 80118d2:	2200      	movs	r2, #0
 80118d4:	687b      	ldr	r3, [r7, #4]
 80118d6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80118d8:	687b      	ldr	r3, [r7, #4]
 80118da:	681b      	ldr	r3, [r3, #0]
 80118dc:	2b00      	cmp	r3, #0
 80118de:	d105      	bne.n	80118ec <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80118e0:	4b07      	ldr	r3, [pc, #28]	; (8011900 <prvGetNextExpireTime+0x44>)
 80118e2:	681b      	ldr	r3, [r3, #0]
 80118e4:	68db      	ldr	r3, [r3, #12]
 80118e6:	681b      	ldr	r3, [r3, #0]
 80118e8:	60fb      	str	r3, [r7, #12]
 80118ea:	e001      	b.n	80118f0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80118ec:	2300      	movs	r3, #0
 80118ee:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80118f0:	68fb      	ldr	r3, [r7, #12]
}
 80118f2:	4618      	mov	r0, r3
 80118f4:	3714      	adds	r7, #20
 80118f6:	46bd      	mov	sp, r7
 80118f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118fc:	4770      	bx	lr
 80118fe:	bf00      	nop
 8011900:	200022f4 	.word	0x200022f4

08011904 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8011904:	b580      	push	{r7, lr}
 8011906:	b084      	sub	sp, #16
 8011908:	af00      	add	r7, sp, #0
 801190a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 801190c:	f7ff f856 	bl	80109bc <xTaskGetTickCount>
 8011910:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8011912:	4b0b      	ldr	r3, [pc, #44]	; (8011940 <prvSampleTimeNow+0x3c>)
 8011914:	681b      	ldr	r3, [r3, #0]
 8011916:	68fa      	ldr	r2, [r7, #12]
 8011918:	429a      	cmp	r2, r3
 801191a:	d205      	bcs.n	8011928 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 801191c:	f000 f936 	bl	8011b8c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8011920:	687b      	ldr	r3, [r7, #4]
 8011922:	2201      	movs	r2, #1
 8011924:	601a      	str	r2, [r3, #0]
 8011926:	e002      	b.n	801192e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8011928:	687b      	ldr	r3, [r7, #4]
 801192a:	2200      	movs	r2, #0
 801192c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 801192e:	4a04      	ldr	r2, [pc, #16]	; (8011940 <prvSampleTimeNow+0x3c>)
 8011930:	68fb      	ldr	r3, [r7, #12]
 8011932:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8011934:	68fb      	ldr	r3, [r7, #12]
}
 8011936:	4618      	mov	r0, r3
 8011938:	3710      	adds	r7, #16
 801193a:	46bd      	mov	sp, r7
 801193c:	bd80      	pop	{r7, pc}
 801193e:	bf00      	nop
 8011940:	20002304 	.word	0x20002304

08011944 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8011944:	b580      	push	{r7, lr}
 8011946:	b086      	sub	sp, #24
 8011948:	af00      	add	r7, sp, #0
 801194a:	60f8      	str	r0, [r7, #12]
 801194c:	60b9      	str	r1, [r7, #8]
 801194e:	607a      	str	r2, [r7, #4]
 8011950:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8011952:	2300      	movs	r3, #0
 8011954:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8011956:	68fb      	ldr	r3, [r7, #12]
 8011958:	68ba      	ldr	r2, [r7, #8]
 801195a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801195c:	68fb      	ldr	r3, [r7, #12]
 801195e:	68fa      	ldr	r2, [r7, #12]
 8011960:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8011962:	68ba      	ldr	r2, [r7, #8]
 8011964:	687b      	ldr	r3, [r7, #4]
 8011966:	429a      	cmp	r2, r3
 8011968:	d812      	bhi.n	8011990 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801196a:	687a      	ldr	r2, [r7, #4]
 801196c:	683b      	ldr	r3, [r7, #0]
 801196e:	1ad2      	subs	r2, r2, r3
 8011970:	68fb      	ldr	r3, [r7, #12]
 8011972:	699b      	ldr	r3, [r3, #24]
 8011974:	429a      	cmp	r2, r3
 8011976:	d302      	bcc.n	801197e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8011978:	2301      	movs	r3, #1
 801197a:	617b      	str	r3, [r7, #20]
 801197c:	e01b      	b.n	80119b6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 801197e:	4b10      	ldr	r3, [pc, #64]	; (80119c0 <prvInsertTimerInActiveList+0x7c>)
 8011980:	681a      	ldr	r2, [r3, #0]
 8011982:	68fb      	ldr	r3, [r7, #12]
 8011984:	3304      	adds	r3, #4
 8011986:	4619      	mov	r1, r3
 8011988:	4610      	mov	r0, r2
 801198a:	f7fd fe04 	bl	800f596 <vListInsert>
 801198e:	e012      	b.n	80119b6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8011990:	687a      	ldr	r2, [r7, #4]
 8011992:	683b      	ldr	r3, [r7, #0]
 8011994:	429a      	cmp	r2, r3
 8011996:	d206      	bcs.n	80119a6 <prvInsertTimerInActiveList+0x62>
 8011998:	68ba      	ldr	r2, [r7, #8]
 801199a:	683b      	ldr	r3, [r7, #0]
 801199c:	429a      	cmp	r2, r3
 801199e:	d302      	bcc.n	80119a6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80119a0:	2301      	movs	r3, #1
 80119a2:	617b      	str	r3, [r7, #20]
 80119a4:	e007      	b.n	80119b6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80119a6:	4b07      	ldr	r3, [pc, #28]	; (80119c4 <prvInsertTimerInActiveList+0x80>)
 80119a8:	681a      	ldr	r2, [r3, #0]
 80119aa:	68fb      	ldr	r3, [r7, #12]
 80119ac:	3304      	adds	r3, #4
 80119ae:	4619      	mov	r1, r3
 80119b0:	4610      	mov	r0, r2
 80119b2:	f7fd fdf0 	bl	800f596 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80119b6:	697b      	ldr	r3, [r7, #20]
}
 80119b8:	4618      	mov	r0, r3
 80119ba:	3718      	adds	r7, #24
 80119bc:	46bd      	mov	sp, r7
 80119be:	bd80      	pop	{r7, pc}
 80119c0:	200022f8 	.word	0x200022f8
 80119c4:	200022f4 	.word	0x200022f4

080119c8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80119c8:	b580      	push	{r7, lr}
 80119ca:	b08e      	sub	sp, #56	; 0x38
 80119cc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80119ce:	e0ca      	b.n	8011b66 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80119d0:	687b      	ldr	r3, [r7, #4]
 80119d2:	2b00      	cmp	r3, #0
 80119d4:	da18      	bge.n	8011a08 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80119d6:	1d3b      	adds	r3, r7, #4
 80119d8:	3304      	adds	r3, #4
 80119da:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80119dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80119de:	2b00      	cmp	r3, #0
 80119e0:	d10a      	bne.n	80119f8 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80119e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80119e6:	f383 8811 	msr	BASEPRI, r3
 80119ea:	f3bf 8f6f 	isb	sy
 80119ee:	f3bf 8f4f 	dsb	sy
 80119f2:	61fb      	str	r3, [r7, #28]
}
 80119f4:	bf00      	nop
 80119f6:	e7fe      	b.n	80119f6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80119f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80119fa:	681b      	ldr	r3, [r3, #0]
 80119fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80119fe:	6850      	ldr	r0, [r2, #4]
 8011a00:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011a02:	6892      	ldr	r2, [r2, #8]
 8011a04:	4611      	mov	r1, r2
 8011a06:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8011a08:	687b      	ldr	r3, [r7, #4]
 8011a0a:	2b00      	cmp	r3, #0
 8011a0c:	f2c0 80aa 	blt.w	8011b64 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8011a10:	68fb      	ldr	r3, [r7, #12]
 8011a12:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8011a14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011a16:	695b      	ldr	r3, [r3, #20]
 8011a18:	2b00      	cmp	r3, #0
 8011a1a:	d004      	beq.n	8011a26 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8011a1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011a1e:	3304      	adds	r3, #4
 8011a20:	4618      	mov	r0, r3
 8011a22:	f7fd fdf1 	bl	800f608 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8011a26:	463b      	mov	r3, r7
 8011a28:	4618      	mov	r0, r3
 8011a2a:	f7ff ff6b 	bl	8011904 <prvSampleTimeNow>
 8011a2e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8011a30:	687b      	ldr	r3, [r7, #4]
 8011a32:	2b09      	cmp	r3, #9
 8011a34:	f200 8097 	bhi.w	8011b66 <prvProcessReceivedCommands+0x19e>
 8011a38:	a201      	add	r2, pc, #4	; (adr r2, 8011a40 <prvProcessReceivedCommands+0x78>)
 8011a3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011a3e:	bf00      	nop
 8011a40:	08011a69 	.word	0x08011a69
 8011a44:	08011a69 	.word	0x08011a69
 8011a48:	08011a69 	.word	0x08011a69
 8011a4c:	08011add 	.word	0x08011add
 8011a50:	08011af1 	.word	0x08011af1
 8011a54:	08011b3b 	.word	0x08011b3b
 8011a58:	08011a69 	.word	0x08011a69
 8011a5c:	08011a69 	.word	0x08011a69
 8011a60:	08011add 	.word	0x08011add
 8011a64:	08011af1 	.word	0x08011af1
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8011a68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011a6a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011a6e:	f043 0301 	orr.w	r3, r3, #1
 8011a72:	b2da      	uxtb	r2, r3
 8011a74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011a76:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8011a7a:	68ba      	ldr	r2, [r7, #8]
 8011a7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011a7e:	699b      	ldr	r3, [r3, #24]
 8011a80:	18d1      	adds	r1, r2, r3
 8011a82:	68bb      	ldr	r3, [r7, #8]
 8011a84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011a86:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011a88:	f7ff ff5c 	bl	8011944 <prvInsertTimerInActiveList>
 8011a8c:	4603      	mov	r3, r0
 8011a8e:	2b00      	cmp	r3, #0
 8011a90:	d069      	beq.n	8011b66 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8011a92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011a94:	6a1b      	ldr	r3, [r3, #32]
 8011a96:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011a98:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8011a9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011a9c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011aa0:	f003 0304 	and.w	r3, r3, #4
 8011aa4:	2b00      	cmp	r3, #0
 8011aa6:	d05e      	beq.n	8011b66 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8011aa8:	68ba      	ldr	r2, [r7, #8]
 8011aaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011aac:	699b      	ldr	r3, [r3, #24]
 8011aae:	441a      	add	r2, r3
 8011ab0:	2300      	movs	r3, #0
 8011ab2:	9300      	str	r3, [sp, #0]
 8011ab4:	2300      	movs	r3, #0
 8011ab6:	2100      	movs	r1, #0
 8011ab8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011aba:	f7ff fe05 	bl	80116c8 <xTimerGenericCommand>
 8011abe:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8011ac0:	6a3b      	ldr	r3, [r7, #32]
 8011ac2:	2b00      	cmp	r3, #0
 8011ac4:	d14f      	bne.n	8011b66 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8011ac6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011aca:	f383 8811 	msr	BASEPRI, r3
 8011ace:	f3bf 8f6f 	isb	sy
 8011ad2:	f3bf 8f4f 	dsb	sy
 8011ad6:	61bb      	str	r3, [r7, #24]
}
 8011ad8:	bf00      	nop
 8011ada:	e7fe      	b.n	8011ada <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8011adc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ade:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011ae2:	f023 0301 	bic.w	r3, r3, #1
 8011ae6:	b2da      	uxtb	r2, r3
 8011ae8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011aea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8011aee:	e03a      	b.n	8011b66 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8011af0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011af2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011af6:	f043 0301 	orr.w	r3, r3, #1
 8011afa:	b2da      	uxtb	r2, r3
 8011afc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011afe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8011b02:	68ba      	ldr	r2, [r7, #8]
 8011b04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011b06:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8011b08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011b0a:	699b      	ldr	r3, [r3, #24]
 8011b0c:	2b00      	cmp	r3, #0
 8011b0e:	d10a      	bne.n	8011b26 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8011b10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011b14:	f383 8811 	msr	BASEPRI, r3
 8011b18:	f3bf 8f6f 	isb	sy
 8011b1c:	f3bf 8f4f 	dsb	sy
 8011b20:	617b      	str	r3, [r7, #20]
}
 8011b22:	bf00      	nop
 8011b24:	e7fe      	b.n	8011b24 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8011b26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011b28:	699a      	ldr	r2, [r3, #24]
 8011b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b2c:	18d1      	adds	r1, r2, r3
 8011b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011b32:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011b34:	f7ff ff06 	bl	8011944 <prvInsertTimerInActiveList>
					break;
 8011b38:	e015      	b.n	8011b66 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8011b3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011b3c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011b40:	f003 0302 	and.w	r3, r3, #2
 8011b44:	2b00      	cmp	r3, #0
 8011b46:	d103      	bne.n	8011b50 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8011b48:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011b4a:	f000 fbe1 	bl	8012310 <vPortFree>
 8011b4e:	e00a      	b.n	8011b66 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8011b50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011b52:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011b56:	f023 0301 	bic.w	r3, r3, #1
 8011b5a:	b2da      	uxtb	r2, r3
 8011b5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011b5e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8011b62:	e000      	b.n	8011b66 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8011b64:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8011b66:	4b08      	ldr	r3, [pc, #32]	; (8011b88 <prvProcessReceivedCommands+0x1c0>)
 8011b68:	681b      	ldr	r3, [r3, #0]
 8011b6a:	1d39      	adds	r1, r7, #4
 8011b6c:	2200      	movs	r2, #0
 8011b6e:	4618      	mov	r0, r3
 8011b70:	f7fe f84c 	bl	800fc0c <xQueueReceive>
 8011b74:	4603      	mov	r3, r0
 8011b76:	2b00      	cmp	r3, #0
 8011b78:	f47f af2a 	bne.w	80119d0 <prvProcessReceivedCommands+0x8>
	}
}
 8011b7c:	bf00      	nop
 8011b7e:	bf00      	nop
 8011b80:	3730      	adds	r7, #48	; 0x30
 8011b82:	46bd      	mov	sp, r7
 8011b84:	bd80      	pop	{r7, pc}
 8011b86:	bf00      	nop
 8011b88:	200022fc 	.word	0x200022fc

08011b8c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8011b8c:	b580      	push	{r7, lr}
 8011b8e:	b088      	sub	sp, #32
 8011b90:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8011b92:	e048      	b.n	8011c26 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8011b94:	4b2d      	ldr	r3, [pc, #180]	; (8011c4c <prvSwitchTimerLists+0xc0>)
 8011b96:	681b      	ldr	r3, [r3, #0]
 8011b98:	68db      	ldr	r3, [r3, #12]
 8011b9a:	681b      	ldr	r3, [r3, #0]
 8011b9c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011b9e:	4b2b      	ldr	r3, [pc, #172]	; (8011c4c <prvSwitchTimerLists+0xc0>)
 8011ba0:	681b      	ldr	r3, [r3, #0]
 8011ba2:	68db      	ldr	r3, [r3, #12]
 8011ba4:	68db      	ldr	r3, [r3, #12]
 8011ba6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8011ba8:	68fb      	ldr	r3, [r7, #12]
 8011baa:	3304      	adds	r3, #4
 8011bac:	4618      	mov	r0, r3
 8011bae:	f7fd fd2b 	bl	800f608 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8011bb2:	68fb      	ldr	r3, [r7, #12]
 8011bb4:	6a1b      	ldr	r3, [r3, #32]
 8011bb6:	68f8      	ldr	r0, [r7, #12]
 8011bb8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8011bba:	68fb      	ldr	r3, [r7, #12]
 8011bbc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011bc0:	f003 0304 	and.w	r3, r3, #4
 8011bc4:	2b00      	cmp	r3, #0
 8011bc6:	d02e      	beq.n	8011c26 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8011bc8:	68fb      	ldr	r3, [r7, #12]
 8011bca:	699b      	ldr	r3, [r3, #24]
 8011bcc:	693a      	ldr	r2, [r7, #16]
 8011bce:	4413      	add	r3, r2
 8011bd0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8011bd2:	68ba      	ldr	r2, [r7, #8]
 8011bd4:	693b      	ldr	r3, [r7, #16]
 8011bd6:	429a      	cmp	r2, r3
 8011bd8:	d90e      	bls.n	8011bf8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8011bda:	68fb      	ldr	r3, [r7, #12]
 8011bdc:	68ba      	ldr	r2, [r7, #8]
 8011bde:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8011be0:	68fb      	ldr	r3, [r7, #12]
 8011be2:	68fa      	ldr	r2, [r7, #12]
 8011be4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8011be6:	4b19      	ldr	r3, [pc, #100]	; (8011c4c <prvSwitchTimerLists+0xc0>)
 8011be8:	681a      	ldr	r2, [r3, #0]
 8011bea:	68fb      	ldr	r3, [r7, #12]
 8011bec:	3304      	adds	r3, #4
 8011bee:	4619      	mov	r1, r3
 8011bf0:	4610      	mov	r0, r2
 8011bf2:	f7fd fcd0 	bl	800f596 <vListInsert>
 8011bf6:	e016      	b.n	8011c26 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8011bf8:	2300      	movs	r3, #0
 8011bfa:	9300      	str	r3, [sp, #0]
 8011bfc:	2300      	movs	r3, #0
 8011bfe:	693a      	ldr	r2, [r7, #16]
 8011c00:	2100      	movs	r1, #0
 8011c02:	68f8      	ldr	r0, [r7, #12]
 8011c04:	f7ff fd60 	bl	80116c8 <xTimerGenericCommand>
 8011c08:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8011c0a:	687b      	ldr	r3, [r7, #4]
 8011c0c:	2b00      	cmp	r3, #0
 8011c0e:	d10a      	bne.n	8011c26 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8011c10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011c14:	f383 8811 	msr	BASEPRI, r3
 8011c18:	f3bf 8f6f 	isb	sy
 8011c1c:	f3bf 8f4f 	dsb	sy
 8011c20:	603b      	str	r3, [r7, #0]
}
 8011c22:	bf00      	nop
 8011c24:	e7fe      	b.n	8011c24 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8011c26:	4b09      	ldr	r3, [pc, #36]	; (8011c4c <prvSwitchTimerLists+0xc0>)
 8011c28:	681b      	ldr	r3, [r3, #0]
 8011c2a:	681b      	ldr	r3, [r3, #0]
 8011c2c:	2b00      	cmp	r3, #0
 8011c2e:	d1b1      	bne.n	8011b94 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8011c30:	4b06      	ldr	r3, [pc, #24]	; (8011c4c <prvSwitchTimerLists+0xc0>)
 8011c32:	681b      	ldr	r3, [r3, #0]
 8011c34:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8011c36:	4b06      	ldr	r3, [pc, #24]	; (8011c50 <prvSwitchTimerLists+0xc4>)
 8011c38:	681b      	ldr	r3, [r3, #0]
 8011c3a:	4a04      	ldr	r2, [pc, #16]	; (8011c4c <prvSwitchTimerLists+0xc0>)
 8011c3c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8011c3e:	4a04      	ldr	r2, [pc, #16]	; (8011c50 <prvSwitchTimerLists+0xc4>)
 8011c40:	697b      	ldr	r3, [r7, #20]
 8011c42:	6013      	str	r3, [r2, #0]
}
 8011c44:	bf00      	nop
 8011c46:	3718      	adds	r7, #24
 8011c48:	46bd      	mov	sp, r7
 8011c4a:	bd80      	pop	{r7, pc}
 8011c4c:	200022f4 	.word	0x200022f4
 8011c50:	200022f8 	.word	0x200022f8

08011c54 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8011c54:	b580      	push	{r7, lr}
 8011c56:	b082      	sub	sp, #8
 8011c58:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8011c5a:	f000 f96b 	bl	8011f34 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8011c5e:	4b15      	ldr	r3, [pc, #84]	; (8011cb4 <prvCheckForValidListAndQueue+0x60>)
 8011c60:	681b      	ldr	r3, [r3, #0]
 8011c62:	2b00      	cmp	r3, #0
 8011c64:	d120      	bne.n	8011ca8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8011c66:	4814      	ldr	r0, [pc, #80]	; (8011cb8 <prvCheckForValidListAndQueue+0x64>)
 8011c68:	f7fd fc44 	bl	800f4f4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8011c6c:	4813      	ldr	r0, [pc, #76]	; (8011cbc <prvCheckForValidListAndQueue+0x68>)
 8011c6e:	f7fd fc41 	bl	800f4f4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8011c72:	4b13      	ldr	r3, [pc, #76]	; (8011cc0 <prvCheckForValidListAndQueue+0x6c>)
 8011c74:	4a10      	ldr	r2, [pc, #64]	; (8011cb8 <prvCheckForValidListAndQueue+0x64>)
 8011c76:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8011c78:	4b12      	ldr	r3, [pc, #72]	; (8011cc4 <prvCheckForValidListAndQueue+0x70>)
 8011c7a:	4a10      	ldr	r2, [pc, #64]	; (8011cbc <prvCheckForValidListAndQueue+0x68>)
 8011c7c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8011c7e:	2300      	movs	r3, #0
 8011c80:	9300      	str	r3, [sp, #0]
 8011c82:	4b11      	ldr	r3, [pc, #68]	; (8011cc8 <prvCheckForValidListAndQueue+0x74>)
 8011c84:	4a11      	ldr	r2, [pc, #68]	; (8011ccc <prvCheckForValidListAndQueue+0x78>)
 8011c86:	2110      	movs	r1, #16
 8011c88:	200a      	movs	r0, #10
 8011c8a:	f7fd fd4f 	bl	800f72c <xQueueGenericCreateStatic>
 8011c8e:	4603      	mov	r3, r0
 8011c90:	4a08      	ldr	r2, [pc, #32]	; (8011cb4 <prvCheckForValidListAndQueue+0x60>)
 8011c92:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8011c94:	4b07      	ldr	r3, [pc, #28]	; (8011cb4 <prvCheckForValidListAndQueue+0x60>)
 8011c96:	681b      	ldr	r3, [r3, #0]
 8011c98:	2b00      	cmp	r3, #0
 8011c9a:	d005      	beq.n	8011ca8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8011c9c:	4b05      	ldr	r3, [pc, #20]	; (8011cb4 <prvCheckForValidListAndQueue+0x60>)
 8011c9e:	681b      	ldr	r3, [r3, #0]
 8011ca0:	490b      	ldr	r1, [pc, #44]	; (8011cd0 <prvCheckForValidListAndQueue+0x7c>)
 8011ca2:	4618      	mov	r0, r3
 8011ca4:	f7fe fa46 	bl	8010134 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8011ca8:	f000 f974 	bl	8011f94 <vPortExitCritical>
}
 8011cac:	bf00      	nop
 8011cae:	46bd      	mov	sp, r7
 8011cb0:	bd80      	pop	{r7, pc}
 8011cb2:	bf00      	nop
 8011cb4:	200022fc 	.word	0x200022fc
 8011cb8:	200022cc 	.word	0x200022cc
 8011cbc:	200022e0 	.word	0x200022e0
 8011cc0:	200022f4 	.word	0x200022f4
 8011cc4:	200022f8 	.word	0x200022f8
 8011cc8:	200023a8 	.word	0x200023a8
 8011ccc:	20002308 	.word	0x20002308
 8011cd0:	08015534 	.word	0x08015534

08011cd4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8011cd4:	b480      	push	{r7}
 8011cd6:	b085      	sub	sp, #20
 8011cd8:	af00      	add	r7, sp, #0
 8011cda:	60f8      	str	r0, [r7, #12]
 8011cdc:	60b9      	str	r1, [r7, #8]
 8011cde:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8011ce0:	68fb      	ldr	r3, [r7, #12]
 8011ce2:	3b04      	subs	r3, #4
 8011ce4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8011ce6:	68fb      	ldr	r3, [r7, #12]
 8011ce8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8011cec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8011cee:	68fb      	ldr	r3, [r7, #12]
 8011cf0:	3b04      	subs	r3, #4
 8011cf2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8011cf4:	68bb      	ldr	r3, [r7, #8]
 8011cf6:	f023 0201 	bic.w	r2, r3, #1
 8011cfa:	68fb      	ldr	r3, [r7, #12]
 8011cfc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8011cfe:	68fb      	ldr	r3, [r7, #12]
 8011d00:	3b04      	subs	r3, #4
 8011d02:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8011d04:	4a0c      	ldr	r2, [pc, #48]	; (8011d38 <pxPortInitialiseStack+0x64>)
 8011d06:	68fb      	ldr	r3, [r7, #12]
 8011d08:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8011d0a:	68fb      	ldr	r3, [r7, #12]
 8011d0c:	3b14      	subs	r3, #20
 8011d0e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8011d10:	687a      	ldr	r2, [r7, #4]
 8011d12:	68fb      	ldr	r3, [r7, #12]
 8011d14:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8011d16:	68fb      	ldr	r3, [r7, #12]
 8011d18:	3b04      	subs	r3, #4
 8011d1a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8011d1c:	68fb      	ldr	r3, [r7, #12]
 8011d1e:	f06f 0202 	mvn.w	r2, #2
 8011d22:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8011d24:	68fb      	ldr	r3, [r7, #12]
 8011d26:	3b20      	subs	r3, #32
 8011d28:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8011d2a:	68fb      	ldr	r3, [r7, #12]
}
 8011d2c:	4618      	mov	r0, r3
 8011d2e:	3714      	adds	r7, #20
 8011d30:	46bd      	mov	sp, r7
 8011d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d36:	4770      	bx	lr
 8011d38:	08011d3d 	.word	0x08011d3d

08011d3c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8011d3c:	b480      	push	{r7}
 8011d3e:	b085      	sub	sp, #20
 8011d40:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8011d42:	2300      	movs	r3, #0
 8011d44:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8011d46:	4b12      	ldr	r3, [pc, #72]	; (8011d90 <prvTaskExitError+0x54>)
 8011d48:	681b      	ldr	r3, [r3, #0]
 8011d4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011d4e:	d00a      	beq.n	8011d66 <prvTaskExitError+0x2a>
	__asm volatile
 8011d50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011d54:	f383 8811 	msr	BASEPRI, r3
 8011d58:	f3bf 8f6f 	isb	sy
 8011d5c:	f3bf 8f4f 	dsb	sy
 8011d60:	60fb      	str	r3, [r7, #12]
}
 8011d62:	bf00      	nop
 8011d64:	e7fe      	b.n	8011d64 <prvTaskExitError+0x28>
	__asm volatile
 8011d66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011d6a:	f383 8811 	msr	BASEPRI, r3
 8011d6e:	f3bf 8f6f 	isb	sy
 8011d72:	f3bf 8f4f 	dsb	sy
 8011d76:	60bb      	str	r3, [r7, #8]
}
 8011d78:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8011d7a:	bf00      	nop
 8011d7c:	687b      	ldr	r3, [r7, #4]
 8011d7e:	2b00      	cmp	r3, #0
 8011d80:	d0fc      	beq.n	8011d7c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8011d82:	bf00      	nop
 8011d84:	bf00      	nop
 8011d86:	3714      	adds	r7, #20
 8011d88:	46bd      	mov	sp, r7
 8011d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d8e:	4770      	bx	lr
 8011d90:	20000050 	.word	0x20000050
	...

08011da0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8011da0:	4b07      	ldr	r3, [pc, #28]	; (8011dc0 <pxCurrentTCBConst2>)
 8011da2:	6819      	ldr	r1, [r3, #0]
 8011da4:	6808      	ldr	r0, [r1, #0]
 8011da6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011daa:	f380 8809 	msr	PSP, r0
 8011dae:	f3bf 8f6f 	isb	sy
 8011db2:	f04f 0000 	mov.w	r0, #0
 8011db6:	f380 8811 	msr	BASEPRI, r0
 8011dba:	4770      	bx	lr
 8011dbc:	f3af 8000 	nop.w

08011dc0 <pxCurrentTCBConst2>:
 8011dc0:	20001dc4 	.word	0x20001dc4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8011dc4:	bf00      	nop
 8011dc6:	bf00      	nop

08011dc8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8011dc8:	4808      	ldr	r0, [pc, #32]	; (8011dec <prvPortStartFirstTask+0x24>)
 8011dca:	6800      	ldr	r0, [r0, #0]
 8011dcc:	6800      	ldr	r0, [r0, #0]
 8011dce:	f380 8808 	msr	MSP, r0
 8011dd2:	f04f 0000 	mov.w	r0, #0
 8011dd6:	f380 8814 	msr	CONTROL, r0
 8011dda:	b662      	cpsie	i
 8011ddc:	b661      	cpsie	f
 8011dde:	f3bf 8f4f 	dsb	sy
 8011de2:	f3bf 8f6f 	isb	sy
 8011de6:	df00      	svc	0
 8011de8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8011dea:	bf00      	nop
 8011dec:	e000ed08 	.word	0xe000ed08

08011df0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8011df0:	b580      	push	{r7, lr}
 8011df2:	b086      	sub	sp, #24
 8011df4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8011df6:	4b46      	ldr	r3, [pc, #280]	; (8011f10 <xPortStartScheduler+0x120>)
 8011df8:	681b      	ldr	r3, [r3, #0]
 8011dfa:	4a46      	ldr	r2, [pc, #280]	; (8011f14 <xPortStartScheduler+0x124>)
 8011dfc:	4293      	cmp	r3, r2
 8011dfe:	d10a      	bne.n	8011e16 <xPortStartScheduler+0x26>
	__asm volatile
 8011e00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011e04:	f383 8811 	msr	BASEPRI, r3
 8011e08:	f3bf 8f6f 	isb	sy
 8011e0c:	f3bf 8f4f 	dsb	sy
 8011e10:	613b      	str	r3, [r7, #16]
}
 8011e12:	bf00      	nop
 8011e14:	e7fe      	b.n	8011e14 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8011e16:	4b3e      	ldr	r3, [pc, #248]	; (8011f10 <xPortStartScheduler+0x120>)
 8011e18:	681b      	ldr	r3, [r3, #0]
 8011e1a:	4a3f      	ldr	r2, [pc, #252]	; (8011f18 <xPortStartScheduler+0x128>)
 8011e1c:	4293      	cmp	r3, r2
 8011e1e:	d10a      	bne.n	8011e36 <xPortStartScheduler+0x46>
	__asm volatile
 8011e20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011e24:	f383 8811 	msr	BASEPRI, r3
 8011e28:	f3bf 8f6f 	isb	sy
 8011e2c:	f3bf 8f4f 	dsb	sy
 8011e30:	60fb      	str	r3, [r7, #12]
}
 8011e32:	bf00      	nop
 8011e34:	e7fe      	b.n	8011e34 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8011e36:	4b39      	ldr	r3, [pc, #228]	; (8011f1c <xPortStartScheduler+0x12c>)
 8011e38:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8011e3a:	697b      	ldr	r3, [r7, #20]
 8011e3c:	781b      	ldrb	r3, [r3, #0]
 8011e3e:	b2db      	uxtb	r3, r3
 8011e40:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8011e42:	697b      	ldr	r3, [r7, #20]
 8011e44:	22ff      	movs	r2, #255	; 0xff
 8011e46:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8011e48:	697b      	ldr	r3, [r7, #20]
 8011e4a:	781b      	ldrb	r3, [r3, #0]
 8011e4c:	b2db      	uxtb	r3, r3
 8011e4e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8011e50:	78fb      	ldrb	r3, [r7, #3]
 8011e52:	b2db      	uxtb	r3, r3
 8011e54:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8011e58:	b2da      	uxtb	r2, r3
 8011e5a:	4b31      	ldr	r3, [pc, #196]	; (8011f20 <xPortStartScheduler+0x130>)
 8011e5c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8011e5e:	4b31      	ldr	r3, [pc, #196]	; (8011f24 <xPortStartScheduler+0x134>)
 8011e60:	2207      	movs	r2, #7
 8011e62:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8011e64:	e009      	b.n	8011e7a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8011e66:	4b2f      	ldr	r3, [pc, #188]	; (8011f24 <xPortStartScheduler+0x134>)
 8011e68:	681b      	ldr	r3, [r3, #0]
 8011e6a:	3b01      	subs	r3, #1
 8011e6c:	4a2d      	ldr	r2, [pc, #180]	; (8011f24 <xPortStartScheduler+0x134>)
 8011e6e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8011e70:	78fb      	ldrb	r3, [r7, #3]
 8011e72:	b2db      	uxtb	r3, r3
 8011e74:	005b      	lsls	r3, r3, #1
 8011e76:	b2db      	uxtb	r3, r3
 8011e78:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8011e7a:	78fb      	ldrb	r3, [r7, #3]
 8011e7c:	b2db      	uxtb	r3, r3
 8011e7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011e82:	2b80      	cmp	r3, #128	; 0x80
 8011e84:	d0ef      	beq.n	8011e66 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8011e86:	4b27      	ldr	r3, [pc, #156]	; (8011f24 <xPortStartScheduler+0x134>)
 8011e88:	681b      	ldr	r3, [r3, #0]
 8011e8a:	f1c3 0307 	rsb	r3, r3, #7
 8011e8e:	2b04      	cmp	r3, #4
 8011e90:	d00a      	beq.n	8011ea8 <xPortStartScheduler+0xb8>
	__asm volatile
 8011e92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011e96:	f383 8811 	msr	BASEPRI, r3
 8011e9a:	f3bf 8f6f 	isb	sy
 8011e9e:	f3bf 8f4f 	dsb	sy
 8011ea2:	60bb      	str	r3, [r7, #8]
}
 8011ea4:	bf00      	nop
 8011ea6:	e7fe      	b.n	8011ea6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8011ea8:	4b1e      	ldr	r3, [pc, #120]	; (8011f24 <xPortStartScheduler+0x134>)
 8011eaa:	681b      	ldr	r3, [r3, #0]
 8011eac:	021b      	lsls	r3, r3, #8
 8011eae:	4a1d      	ldr	r2, [pc, #116]	; (8011f24 <xPortStartScheduler+0x134>)
 8011eb0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8011eb2:	4b1c      	ldr	r3, [pc, #112]	; (8011f24 <xPortStartScheduler+0x134>)
 8011eb4:	681b      	ldr	r3, [r3, #0]
 8011eb6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8011eba:	4a1a      	ldr	r2, [pc, #104]	; (8011f24 <xPortStartScheduler+0x134>)
 8011ebc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8011ebe:	687b      	ldr	r3, [r7, #4]
 8011ec0:	b2da      	uxtb	r2, r3
 8011ec2:	697b      	ldr	r3, [r7, #20]
 8011ec4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8011ec6:	4b18      	ldr	r3, [pc, #96]	; (8011f28 <xPortStartScheduler+0x138>)
 8011ec8:	681b      	ldr	r3, [r3, #0]
 8011eca:	4a17      	ldr	r2, [pc, #92]	; (8011f28 <xPortStartScheduler+0x138>)
 8011ecc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8011ed0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8011ed2:	4b15      	ldr	r3, [pc, #84]	; (8011f28 <xPortStartScheduler+0x138>)
 8011ed4:	681b      	ldr	r3, [r3, #0]
 8011ed6:	4a14      	ldr	r2, [pc, #80]	; (8011f28 <xPortStartScheduler+0x138>)
 8011ed8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8011edc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8011ede:	f000 f8dd 	bl	801209c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8011ee2:	4b12      	ldr	r3, [pc, #72]	; (8011f2c <xPortStartScheduler+0x13c>)
 8011ee4:	2200      	movs	r2, #0
 8011ee6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8011ee8:	f000 f8fc 	bl	80120e4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8011eec:	4b10      	ldr	r3, [pc, #64]	; (8011f30 <xPortStartScheduler+0x140>)
 8011eee:	681b      	ldr	r3, [r3, #0]
 8011ef0:	4a0f      	ldr	r2, [pc, #60]	; (8011f30 <xPortStartScheduler+0x140>)
 8011ef2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8011ef6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8011ef8:	f7ff ff66 	bl	8011dc8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8011efc:	f7fe fe28 	bl	8010b50 <vTaskSwitchContext>
	prvTaskExitError();
 8011f00:	f7ff ff1c 	bl	8011d3c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8011f04:	2300      	movs	r3, #0
}
 8011f06:	4618      	mov	r0, r3
 8011f08:	3718      	adds	r7, #24
 8011f0a:	46bd      	mov	sp, r7
 8011f0c:	bd80      	pop	{r7, pc}
 8011f0e:	bf00      	nop
 8011f10:	e000ed00 	.word	0xe000ed00
 8011f14:	410fc271 	.word	0x410fc271
 8011f18:	410fc270 	.word	0x410fc270
 8011f1c:	e000e400 	.word	0xe000e400
 8011f20:	200023f8 	.word	0x200023f8
 8011f24:	200023fc 	.word	0x200023fc
 8011f28:	e000ed20 	.word	0xe000ed20
 8011f2c:	20000050 	.word	0x20000050
 8011f30:	e000ef34 	.word	0xe000ef34

08011f34 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8011f34:	b480      	push	{r7}
 8011f36:	b083      	sub	sp, #12
 8011f38:	af00      	add	r7, sp, #0
	__asm volatile
 8011f3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011f3e:	f383 8811 	msr	BASEPRI, r3
 8011f42:	f3bf 8f6f 	isb	sy
 8011f46:	f3bf 8f4f 	dsb	sy
 8011f4a:	607b      	str	r3, [r7, #4]
}
 8011f4c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8011f4e:	4b0f      	ldr	r3, [pc, #60]	; (8011f8c <vPortEnterCritical+0x58>)
 8011f50:	681b      	ldr	r3, [r3, #0]
 8011f52:	3301      	adds	r3, #1
 8011f54:	4a0d      	ldr	r2, [pc, #52]	; (8011f8c <vPortEnterCritical+0x58>)
 8011f56:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8011f58:	4b0c      	ldr	r3, [pc, #48]	; (8011f8c <vPortEnterCritical+0x58>)
 8011f5a:	681b      	ldr	r3, [r3, #0]
 8011f5c:	2b01      	cmp	r3, #1
 8011f5e:	d10f      	bne.n	8011f80 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8011f60:	4b0b      	ldr	r3, [pc, #44]	; (8011f90 <vPortEnterCritical+0x5c>)
 8011f62:	681b      	ldr	r3, [r3, #0]
 8011f64:	b2db      	uxtb	r3, r3
 8011f66:	2b00      	cmp	r3, #0
 8011f68:	d00a      	beq.n	8011f80 <vPortEnterCritical+0x4c>
	__asm volatile
 8011f6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011f6e:	f383 8811 	msr	BASEPRI, r3
 8011f72:	f3bf 8f6f 	isb	sy
 8011f76:	f3bf 8f4f 	dsb	sy
 8011f7a:	603b      	str	r3, [r7, #0]
}
 8011f7c:	bf00      	nop
 8011f7e:	e7fe      	b.n	8011f7e <vPortEnterCritical+0x4a>
	}
}
 8011f80:	bf00      	nop
 8011f82:	370c      	adds	r7, #12
 8011f84:	46bd      	mov	sp, r7
 8011f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f8a:	4770      	bx	lr
 8011f8c:	20000050 	.word	0x20000050
 8011f90:	e000ed04 	.word	0xe000ed04

08011f94 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8011f94:	b480      	push	{r7}
 8011f96:	b083      	sub	sp, #12
 8011f98:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8011f9a:	4b12      	ldr	r3, [pc, #72]	; (8011fe4 <vPortExitCritical+0x50>)
 8011f9c:	681b      	ldr	r3, [r3, #0]
 8011f9e:	2b00      	cmp	r3, #0
 8011fa0:	d10a      	bne.n	8011fb8 <vPortExitCritical+0x24>
	__asm volatile
 8011fa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011fa6:	f383 8811 	msr	BASEPRI, r3
 8011faa:	f3bf 8f6f 	isb	sy
 8011fae:	f3bf 8f4f 	dsb	sy
 8011fb2:	607b      	str	r3, [r7, #4]
}
 8011fb4:	bf00      	nop
 8011fb6:	e7fe      	b.n	8011fb6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8011fb8:	4b0a      	ldr	r3, [pc, #40]	; (8011fe4 <vPortExitCritical+0x50>)
 8011fba:	681b      	ldr	r3, [r3, #0]
 8011fbc:	3b01      	subs	r3, #1
 8011fbe:	4a09      	ldr	r2, [pc, #36]	; (8011fe4 <vPortExitCritical+0x50>)
 8011fc0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8011fc2:	4b08      	ldr	r3, [pc, #32]	; (8011fe4 <vPortExitCritical+0x50>)
 8011fc4:	681b      	ldr	r3, [r3, #0]
 8011fc6:	2b00      	cmp	r3, #0
 8011fc8:	d105      	bne.n	8011fd6 <vPortExitCritical+0x42>
 8011fca:	2300      	movs	r3, #0
 8011fcc:	603b      	str	r3, [r7, #0]
	__asm volatile
 8011fce:	683b      	ldr	r3, [r7, #0]
 8011fd0:	f383 8811 	msr	BASEPRI, r3
}
 8011fd4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8011fd6:	bf00      	nop
 8011fd8:	370c      	adds	r7, #12
 8011fda:	46bd      	mov	sp, r7
 8011fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fe0:	4770      	bx	lr
 8011fe2:	bf00      	nop
 8011fe4:	20000050 	.word	0x20000050
	...

08011ff0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8011ff0:	f3ef 8009 	mrs	r0, PSP
 8011ff4:	f3bf 8f6f 	isb	sy
 8011ff8:	4b15      	ldr	r3, [pc, #84]	; (8012050 <pxCurrentTCBConst>)
 8011ffa:	681a      	ldr	r2, [r3, #0]
 8011ffc:	f01e 0f10 	tst.w	lr, #16
 8012000:	bf08      	it	eq
 8012002:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8012006:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801200a:	6010      	str	r0, [r2, #0]
 801200c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8012010:	f04f 0050 	mov.w	r0, #80	; 0x50
 8012014:	f380 8811 	msr	BASEPRI, r0
 8012018:	f3bf 8f4f 	dsb	sy
 801201c:	f3bf 8f6f 	isb	sy
 8012020:	f7fe fd96 	bl	8010b50 <vTaskSwitchContext>
 8012024:	f04f 0000 	mov.w	r0, #0
 8012028:	f380 8811 	msr	BASEPRI, r0
 801202c:	bc09      	pop	{r0, r3}
 801202e:	6819      	ldr	r1, [r3, #0]
 8012030:	6808      	ldr	r0, [r1, #0]
 8012032:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012036:	f01e 0f10 	tst.w	lr, #16
 801203a:	bf08      	it	eq
 801203c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8012040:	f380 8809 	msr	PSP, r0
 8012044:	f3bf 8f6f 	isb	sy
 8012048:	4770      	bx	lr
 801204a:	bf00      	nop
 801204c:	f3af 8000 	nop.w

08012050 <pxCurrentTCBConst>:
 8012050:	20001dc4 	.word	0x20001dc4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8012054:	bf00      	nop
 8012056:	bf00      	nop

08012058 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8012058:	b580      	push	{r7, lr}
 801205a:	b082      	sub	sp, #8
 801205c:	af00      	add	r7, sp, #0
	__asm volatile
 801205e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012062:	f383 8811 	msr	BASEPRI, r3
 8012066:	f3bf 8f6f 	isb	sy
 801206a:	f3bf 8f4f 	dsb	sy
 801206e:	607b      	str	r3, [r7, #4]
}
 8012070:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8012072:	f7fe fcb3 	bl	80109dc <xTaskIncrementTick>
 8012076:	4603      	mov	r3, r0
 8012078:	2b00      	cmp	r3, #0
 801207a:	d003      	beq.n	8012084 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801207c:	4b06      	ldr	r3, [pc, #24]	; (8012098 <xPortSysTickHandler+0x40>)
 801207e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012082:	601a      	str	r2, [r3, #0]
 8012084:	2300      	movs	r3, #0
 8012086:	603b      	str	r3, [r7, #0]
	__asm volatile
 8012088:	683b      	ldr	r3, [r7, #0]
 801208a:	f383 8811 	msr	BASEPRI, r3
}
 801208e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8012090:	bf00      	nop
 8012092:	3708      	adds	r7, #8
 8012094:	46bd      	mov	sp, r7
 8012096:	bd80      	pop	{r7, pc}
 8012098:	e000ed04 	.word	0xe000ed04

0801209c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801209c:	b480      	push	{r7}
 801209e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80120a0:	4b0b      	ldr	r3, [pc, #44]	; (80120d0 <vPortSetupTimerInterrupt+0x34>)
 80120a2:	2200      	movs	r2, #0
 80120a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80120a6:	4b0b      	ldr	r3, [pc, #44]	; (80120d4 <vPortSetupTimerInterrupt+0x38>)
 80120a8:	2200      	movs	r2, #0
 80120aa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80120ac:	4b0a      	ldr	r3, [pc, #40]	; (80120d8 <vPortSetupTimerInterrupt+0x3c>)
 80120ae:	681b      	ldr	r3, [r3, #0]
 80120b0:	4a0a      	ldr	r2, [pc, #40]	; (80120dc <vPortSetupTimerInterrupt+0x40>)
 80120b2:	fba2 2303 	umull	r2, r3, r2, r3
 80120b6:	099b      	lsrs	r3, r3, #6
 80120b8:	4a09      	ldr	r2, [pc, #36]	; (80120e0 <vPortSetupTimerInterrupt+0x44>)
 80120ba:	3b01      	subs	r3, #1
 80120bc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80120be:	4b04      	ldr	r3, [pc, #16]	; (80120d0 <vPortSetupTimerInterrupt+0x34>)
 80120c0:	2207      	movs	r2, #7
 80120c2:	601a      	str	r2, [r3, #0]
}
 80120c4:	bf00      	nop
 80120c6:	46bd      	mov	sp, r7
 80120c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120cc:	4770      	bx	lr
 80120ce:	bf00      	nop
 80120d0:	e000e010 	.word	0xe000e010
 80120d4:	e000e018 	.word	0xe000e018
 80120d8:	20000010 	.word	0x20000010
 80120dc:	10624dd3 	.word	0x10624dd3
 80120e0:	e000e014 	.word	0xe000e014

080120e4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80120e4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80120f4 <vPortEnableVFP+0x10>
 80120e8:	6801      	ldr	r1, [r0, #0]
 80120ea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80120ee:	6001      	str	r1, [r0, #0]
 80120f0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80120f2:	bf00      	nop
 80120f4:	e000ed88 	.word	0xe000ed88

080120f8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80120f8:	b480      	push	{r7}
 80120fa:	b085      	sub	sp, #20
 80120fc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80120fe:	f3ef 8305 	mrs	r3, IPSR
 8012102:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8012104:	68fb      	ldr	r3, [r7, #12]
 8012106:	2b0f      	cmp	r3, #15
 8012108:	d914      	bls.n	8012134 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801210a:	4a17      	ldr	r2, [pc, #92]	; (8012168 <vPortValidateInterruptPriority+0x70>)
 801210c:	68fb      	ldr	r3, [r7, #12]
 801210e:	4413      	add	r3, r2
 8012110:	781b      	ldrb	r3, [r3, #0]
 8012112:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8012114:	4b15      	ldr	r3, [pc, #84]	; (801216c <vPortValidateInterruptPriority+0x74>)
 8012116:	781b      	ldrb	r3, [r3, #0]
 8012118:	7afa      	ldrb	r2, [r7, #11]
 801211a:	429a      	cmp	r2, r3
 801211c:	d20a      	bcs.n	8012134 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 801211e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012122:	f383 8811 	msr	BASEPRI, r3
 8012126:	f3bf 8f6f 	isb	sy
 801212a:	f3bf 8f4f 	dsb	sy
 801212e:	607b      	str	r3, [r7, #4]
}
 8012130:	bf00      	nop
 8012132:	e7fe      	b.n	8012132 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8012134:	4b0e      	ldr	r3, [pc, #56]	; (8012170 <vPortValidateInterruptPriority+0x78>)
 8012136:	681b      	ldr	r3, [r3, #0]
 8012138:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 801213c:	4b0d      	ldr	r3, [pc, #52]	; (8012174 <vPortValidateInterruptPriority+0x7c>)
 801213e:	681b      	ldr	r3, [r3, #0]
 8012140:	429a      	cmp	r2, r3
 8012142:	d90a      	bls.n	801215a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8012144:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012148:	f383 8811 	msr	BASEPRI, r3
 801214c:	f3bf 8f6f 	isb	sy
 8012150:	f3bf 8f4f 	dsb	sy
 8012154:	603b      	str	r3, [r7, #0]
}
 8012156:	bf00      	nop
 8012158:	e7fe      	b.n	8012158 <vPortValidateInterruptPriority+0x60>
	}
 801215a:	bf00      	nop
 801215c:	3714      	adds	r7, #20
 801215e:	46bd      	mov	sp, r7
 8012160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012164:	4770      	bx	lr
 8012166:	bf00      	nop
 8012168:	e000e3f0 	.word	0xe000e3f0
 801216c:	200023f8 	.word	0x200023f8
 8012170:	e000ed0c 	.word	0xe000ed0c
 8012174:	200023fc 	.word	0x200023fc

08012178 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8012178:	b580      	push	{r7, lr}
 801217a:	b08a      	sub	sp, #40	; 0x28
 801217c:	af00      	add	r7, sp, #0
 801217e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8012180:	2300      	movs	r3, #0
 8012182:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8012184:	f7fe fb6e 	bl	8010864 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8012188:	4b5b      	ldr	r3, [pc, #364]	; (80122f8 <pvPortMalloc+0x180>)
 801218a:	681b      	ldr	r3, [r3, #0]
 801218c:	2b00      	cmp	r3, #0
 801218e:	d101      	bne.n	8012194 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8012190:	f000 f920 	bl	80123d4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8012194:	4b59      	ldr	r3, [pc, #356]	; (80122fc <pvPortMalloc+0x184>)
 8012196:	681a      	ldr	r2, [r3, #0]
 8012198:	687b      	ldr	r3, [r7, #4]
 801219a:	4013      	ands	r3, r2
 801219c:	2b00      	cmp	r3, #0
 801219e:	f040 8093 	bne.w	80122c8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80121a2:	687b      	ldr	r3, [r7, #4]
 80121a4:	2b00      	cmp	r3, #0
 80121a6:	d01d      	beq.n	80121e4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80121a8:	2208      	movs	r2, #8
 80121aa:	687b      	ldr	r3, [r7, #4]
 80121ac:	4413      	add	r3, r2
 80121ae:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80121b0:	687b      	ldr	r3, [r7, #4]
 80121b2:	f003 0307 	and.w	r3, r3, #7
 80121b6:	2b00      	cmp	r3, #0
 80121b8:	d014      	beq.n	80121e4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80121ba:	687b      	ldr	r3, [r7, #4]
 80121bc:	f023 0307 	bic.w	r3, r3, #7
 80121c0:	3308      	adds	r3, #8
 80121c2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80121c4:	687b      	ldr	r3, [r7, #4]
 80121c6:	f003 0307 	and.w	r3, r3, #7
 80121ca:	2b00      	cmp	r3, #0
 80121cc:	d00a      	beq.n	80121e4 <pvPortMalloc+0x6c>
	__asm volatile
 80121ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80121d2:	f383 8811 	msr	BASEPRI, r3
 80121d6:	f3bf 8f6f 	isb	sy
 80121da:	f3bf 8f4f 	dsb	sy
 80121de:	617b      	str	r3, [r7, #20]
}
 80121e0:	bf00      	nop
 80121e2:	e7fe      	b.n	80121e2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80121e4:	687b      	ldr	r3, [r7, #4]
 80121e6:	2b00      	cmp	r3, #0
 80121e8:	d06e      	beq.n	80122c8 <pvPortMalloc+0x150>
 80121ea:	4b45      	ldr	r3, [pc, #276]	; (8012300 <pvPortMalloc+0x188>)
 80121ec:	681b      	ldr	r3, [r3, #0]
 80121ee:	687a      	ldr	r2, [r7, #4]
 80121f0:	429a      	cmp	r2, r3
 80121f2:	d869      	bhi.n	80122c8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80121f4:	4b43      	ldr	r3, [pc, #268]	; (8012304 <pvPortMalloc+0x18c>)
 80121f6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80121f8:	4b42      	ldr	r3, [pc, #264]	; (8012304 <pvPortMalloc+0x18c>)
 80121fa:	681b      	ldr	r3, [r3, #0]
 80121fc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80121fe:	e004      	b.n	801220a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8012200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012202:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8012204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012206:	681b      	ldr	r3, [r3, #0]
 8012208:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801220a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801220c:	685b      	ldr	r3, [r3, #4]
 801220e:	687a      	ldr	r2, [r7, #4]
 8012210:	429a      	cmp	r2, r3
 8012212:	d903      	bls.n	801221c <pvPortMalloc+0xa4>
 8012214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012216:	681b      	ldr	r3, [r3, #0]
 8012218:	2b00      	cmp	r3, #0
 801221a:	d1f1      	bne.n	8012200 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801221c:	4b36      	ldr	r3, [pc, #216]	; (80122f8 <pvPortMalloc+0x180>)
 801221e:	681b      	ldr	r3, [r3, #0]
 8012220:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012222:	429a      	cmp	r2, r3
 8012224:	d050      	beq.n	80122c8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8012226:	6a3b      	ldr	r3, [r7, #32]
 8012228:	681b      	ldr	r3, [r3, #0]
 801222a:	2208      	movs	r2, #8
 801222c:	4413      	add	r3, r2
 801222e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8012230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012232:	681a      	ldr	r2, [r3, #0]
 8012234:	6a3b      	ldr	r3, [r7, #32]
 8012236:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8012238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801223a:	685a      	ldr	r2, [r3, #4]
 801223c:	687b      	ldr	r3, [r7, #4]
 801223e:	1ad2      	subs	r2, r2, r3
 8012240:	2308      	movs	r3, #8
 8012242:	005b      	lsls	r3, r3, #1
 8012244:	429a      	cmp	r2, r3
 8012246:	d91f      	bls.n	8012288 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8012248:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801224a:	687b      	ldr	r3, [r7, #4]
 801224c:	4413      	add	r3, r2
 801224e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8012250:	69bb      	ldr	r3, [r7, #24]
 8012252:	f003 0307 	and.w	r3, r3, #7
 8012256:	2b00      	cmp	r3, #0
 8012258:	d00a      	beq.n	8012270 <pvPortMalloc+0xf8>
	__asm volatile
 801225a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801225e:	f383 8811 	msr	BASEPRI, r3
 8012262:	f3bf 8f6f 	isb	sy
 8012266:	f3bf 8f4f 	dsb	sy
 801226a:	613b      	str	r3, [r7, #16]
}
 801226c:	bf00      	nop
 801226e:	e7fe      	b.n	801226e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8012270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012272:	685a      	ldr	r2, [r3, #4]
 8012274:	687b      	ldr	r3, [r7, #4]
 8012276:	1ad2      	subs	r2, r2, r3
 8012278:	69bb      	ldr	r3, [r7, #24]
 801227a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 801227c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801227e:	687a      	ldr	r2, [r7, #4]
 8012280:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8012282:	69b8      	ldr	r0, [r7, #24]
 8012284:	f000 f908 	bl	8012498 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8012288:	4b1d      	ldr	r3, [pc, #116]	; (8012300 <pvPortMalloc+0x188>)
 801228a:	681a      	ldr	r2, [r3, #0]
 801228c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801228e:	685b      	ldr	r3, [r3, #4]
 8012290:	1ad3      	subs	r3, r2, r3
 8012292:	4a1b      	ldr	r2, [pc, #108]	; (8012300 <pvPortMalloc+0x188>)
 8012294:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8012296:	4b1a      	ldr	r3, [pc, #104]	; (8012300 <pvPortMalloc+0x188>)
 8012298:	681a      	ldr	r2, [r3, #0]
 801229a:	4b1b      	ldr	r3, [pc, #108]	; (8012308 <pvPortMalloc+0x190>)
 801229c:	681b      	ldr	r3, [r3, #0]
 801229e:	429a      	cmp	r2, r3
 80122a0:	d203      	bcs.n	80122aa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80122a2:	4b17      	ldr	r3, [pc, #92]	; (8012300 <pvPortMalloc+0x188>)
 80122a4:	681b      	ldr	r3, [r3, #0]
 80122a6:	4a18      	ldr	r2, [pc, #96]	; (8012308 <pvPortMalloc+0x190>)
 80122a8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80122aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80122ac:	685a      	ldr	r2, [r3, #4]
 80122ae:	4b13      	ldr	r3, [pc, #76]	; (80122fc <pvPortMalloc+0x184>)
 80122b0:	681b      	ldr	r3, [r3, #0]
 80122b2:	431a      	orrs	r2, r3
 80122b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80122b6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80122b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80122ba:	2200      	movs	r2, #0
 80122bc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80122be:	4b13      	ldr	r3, [pc, #76]	; (801230c <pvPortMalloc+0x194>)
 80122c0:	681b      	ldr	r3, [r3, #0]
 80122c2:	3301      	adds	r3, #1
 80122c4:	4a11      	ldr	r2, [pc, #68]	; (801230c <pvPortMalloc+0x194>)
 80122c6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80122c8:	f7fe fada 	bl	8010880 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80122cc:	69fb      	ldr	r3, [r7, #28]
 80122ce:	f003 0307 	and.w	r3, r3, #7
 80122d2:	2b00      	cmp	r3, #0
 80122d4:	d00a      	beq.n	80122ec <pvPortMalloc+0x174>
	__asm volatile
 80122d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80122da:	f383 8811 	msr	BASEPRI, r3
 80122de:	f3bf 8f6f 	isb	sy
 80122e2:	f3bf 8f4f 	dsb	sy
 80122e6:	60fb      	str	r3, [r7, #12]
}
 80122e8:	bf00      	nop
 80122ea:	e7fe      	b.n	80122ea <pvPortMalloc+0x172>
	return pvReturn;
 80122ec:	69fb      	ldr	r3, [r7, #28]
}
 80122ee:	4618      	mov	r0, r3
 80122f0:	3728      	adds	r7, #40	; 0x28
 80122f2:	46bd      	mov	sp, r7
 80122f4:	bd80      	pop	{r7, pc}
 80122f6:	bf00      	nop
 80122f8:	20004b18 	.word	0x20004b18
 80122fc:	20004b2c 	.word	0x20004b2c
 8012300:	20004b1c 	.word	0x20004b1c
 8012304:	20004b10 	.word	0x20004b10
 8012308:	20004b20 	.word	0x20004b20
 801230c:	20004b24 	.word	0x20004b24

08012310 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8012310:	b580      	push	{r7, lr}
 8012312:	b086      	sub	sp, #24
 8012314:	af00      	add	r7, sp, #0
 8012316:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8012318:	687b      	ldr	r3, [r7, #4]
 801231a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 801231c:	687b      	ldr	r3, [r7, #4]
 801231e:	2b00      	cmp	r3, #0
 8012320:	d04d      	beq.n	80123be <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8012322:	2308      	movs	r3, #8
 8012324:	425b      	negs	r3, r3
 8012326:	697a      	ldr	r2, [r7, #20]
 8012328:	4413      	add	r3, r2
 801232a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 801232c:	697b      	ldr	r3, [r7, #20]
 801232e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8012330:	693b      	ldr	r3, [r7, #16]
 8012332:	685a      	ldr	r2, [r3, #4]
 8012334:	4b24      	ldr	r3, [pc, #144]	; (80123c8 <vPortFree+0xb8>)
 8012336:	681b      	ldr	r3, [r3, #0]
 8012338:	4013      	ands	r3, r2
 801233a:	2b00      	cmp	r3, #0
 801233c:	d10a      	bne.n	8012354 <vPortFree+0x44>
	__asm volatile
 801233e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012342:	f383 8811 	msr	BASEPRI, r3
 8012346:	f3bf 8f6f 	isb	sy
 801234a:	f3bf 8f4f 	dsb	sy
 801234e:	60fb      	str	r3, [r7, #12]
}
 8012350:	bf00      	nop
 8012352:	e7fe      	b.n	8012352 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8012354:	693b      	ldr	r3, [r7, #16]
 8012356:	681b      	ldr	r3, [r3, #0]
 8012358:	2b00      	cmp	r3, #0
 801235a:	d00a      	beq.n	8012372 <vPortFree+0x62>
	__asm volatile
 801235c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012360:	f383 8811 	msr	BASEPRI, r3
 8012364:	f3bf 8f6f 	isb	sy
 8012368:	f3bf 8f4f 	dsb	sy
 801236c:	60bb      	str	r3, [r7, #8]
}
 801236e:	bf00      	nop
 8012370:	e7fe      	b.n	8012370 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8012372:	693b      	ldr	r3, [r7, #16]
 8012374:	685a      	ldr	r2, [r3, #4]
 8012376:	4b14      	ldr	r3, [pc, #80]	; (80123c8 <vPortFree+0xb8>)
 8012378:	681b      	ldr	r3, [r3, #0]
 801237a:	4013      	ands	r3, r2
 801237c:	2b00      	cmp	r3, #0
 801237e:	d01e      	beq.n	80123be <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8012380:	693b      	ldr	r3, [r7, #16]
 8012382:	681b      	ldr	r3, [r3, #0]
 8012384:	2b00      	cmp	r3, #0
 8012386:	d11a      	bne.n	80123be <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8012388:	693b      	ldr	r3, [r7, #16]
 801238a:	685a      	ldr	r2, [r3, #4]
 801238c:	4b0e      	ldr	r3, [pc, #56]	; (80123c8 <vPortFree+0xb8>)
 801238e:	681b      	ldr	r3, [r3, #0]
 8012390:	43db      	mvns	r3, r3
 8012392:	401a      	ands	r2, r3
 8012394:	693b      	ldr	r3, [r7, #16]
 8012396:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8012398:	f7fe fa64 	bl	8010864 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801239c:	693b      	ldr	r3, [r7, #16]
 801239e:	685a      	ldr	r2, [r3, #4]
 80123a0:	4b0a      	ldr	r3, [pc, #40]	; (80123cc <vPortFree+0xbc>)
 80123a2:	681b      	ldr	r3, [r3, #0]
 80123a4:	4413      	add	r3, r2
 80123a6:	4a09      	ldr	r2, [pc, #36]	; (80123cc <vPortFree+0xbc>)
 80123a8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80123aa:	6938      	ldr	r0, [r7, #16]
 80123ac:	f000 f874 	bl	8012498 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80123b0:	4b07      	ldr	r3, [pc, #28]	; (80123d0 <vPortFree+0xc0>)
 80123b2:	681b      	ldr	r3, [r3, #0]
 80123b4:	3301      	adds	r3, #1
 80123b6:	4a06      	ldr	r2, [pc, #24]	; (80123d0 <vPortFree+0xc0>)
 80123b8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80123ba:	f7fe fa61 	bl	8010880 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80123be:	bf00      	nop
 80123c0:	3718      	adds	r7, #24
 80123c2:	46bd      	mov	sp, r7
 80123c4:	bd80      	pop	{r7, pc}
 80123c6:	bf00      	nop
 80123c8:	20004b2c 	.word	0x20004b2c
 80123cc:	20004b1c 	.word	0x20004b1c
 80123d0:	20004b28 	.word	0x20004b28

080123d4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80123d4:	b480      	push	{r7}
 80123d6:	b085      	sub	sp, #20
 80123d8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80123da:	f242 7310 	movw	r3, #10000	; 0x2710
 80123de:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80123e0:	4b27      	ldr	r3, [pc, #156]	; (8012480 <prvHeapInit+0xac>)
 80123e2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80123e4:	68fb      	ldr	r3, [r7, #12]
 80123e6:	f003 0307 	and.w	r3, r3, #7
 80123ea:	2b00      	cmp	r3, #0
 80123ec:	d00c      	beq.n	8012408 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80123ee:	68fb      	ldr	r3, [r7, #12]
 80123f0:	3307      	adds	r3, #7
 80123f2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80123f4:	68fb      	ldr	r3, [r7, #12]
 80123f6:	f023 0307 	bic.w	r3, r3, #7
 80123fa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80123fc:	68ba      	ldr	r2, [r7, #8]
 80123fe:	68fb      	ldr	r3, [r7, #12]
 8012400:	1ad3      	subs	r3, r2, r3
 8012402:	4a1f      	ldr	r2, [pc, #124]	; (8012480 <prvHeapInit+0xac>)
 8012404:	4413      	add	r3, r2
 8012406:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8012408:	68fb      	ldr	r3, [r7, #12]
 801240a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801240c:	4a1d      	ldr	r2, [pc, #116]	; (8012484 <prvHeapInit+0xb0>)
 801240e:	687b      	ldr	r3, [r7, #4]
 8012410:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8012412:	4b1c      	ldr	r3, [pc, #112]	; (8012484 <prvHeapInit+0xb0>)
 8012414:	2200      	movs	r2, #0
 8012416:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8012418:	687b      	ldr	r3, [r7, #4]
 801241a:	68ba      	ldr	r2, [r7, #8]
 801241c:	4413      	add	r3, r2
 801241e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8012420:	2208      	movs	r2, #8
 8012422:	68fb      	ldr	r3, [r7, #12]
 8012424:	1a9b      	subs	r3, r3, r2
 8012426:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8012428:	68fb      	ldr	r3, [r7, #12]
 801242a:	f023 0307 	bic.w	r3, r3, #7
 801242e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8012430:	68fb      	ldr	r3, [r7, #12]
 8012432:	4a15      	ldr	r2, [pc, #84]	; (8012488 <prvHeapInit+0xb4>)
 8012434:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8012436:	4b14      	ldr	r3, [pc, #80]	; (8012488 <prvHeapInit+0xb4>)
 8012438:	681b      	ldr	r3, [r3, #0]
 801243a:	2200      	movs	r2, #0
 801243c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801243e:	4b12      	ldr	r3, [pc, #72]	; (8012488 <prvHeapInit+0xb4>)
 8012440:	681b      	ldr	r3, [r3, #0]
 8012442:	2200      	movs	r2, #0
 8012444:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8012446:	687b      	ldr	r3, [r7, #4]
 8012448:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801244a:	683b      	ldr	r3, [r7, #0]
 801244c:	68fa      	ldr	r2, [r7, #12]
 801244e:	1ad2      	subs	r2, r2, r3
 8012450:	683b      	ldr	r3, [r7, #0]
 8012452:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8012454:	4b0c      	ldr	r3, [pc, #48]	; (8012488 <prvHeapInit+0xb4>)
 8012456:	681a      	ldr	r2, [r3, #0]
 8012458:	683b      	ldr	r3, [r7, #0]
 801245a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801245c:	683b      	ldr	r3, [r7, #0]
 801245e:	685b      	ldr	r3, [r3, #4]
 8012460:	4a0a      	ldr	r2, [pc, #40]	; (801248c <prvHeapInit+0xb8>)
 8012462:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8012464:	683b      	ldr	r3, [r7, #0]
 8012466:	685b      	ldr	r3, [r3, #4]
 8012468:	4a09      	ldr	r2, [pc, #36]	; (8012490 <prvHeapInit+0xbc>)
 801246a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801246c:	4b09      	ldr	r3, [pc, #36]	; (8012494 <prvHeapInit+0xc0>)
 801246e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8012472:	601a      	str	r2, [r3, #0]
}
 8012474:	bf00      	nop
 8012476:	3714      	adds	r7, #20
 8012478:	46bd      	mov	sp, r7
 801247a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801247e:	4770      	bx	lr
 8012480:	20002400 	.word	0x20002400
 8012484:	20004b10 	.word	0x20004b10
 8012488:	20004b18 	.word	0x20004b18
 801248c:	20004b20 	.word	0x20004b20
 8012490:	20004b1c 	.word	0x20004b1c
 8012494:	20004b2c 	.word	0x20004b2c

08012498 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8012498:	b480      	push	{r7}
 801249a:	b085      	sub	sp, #20
 801249c:	af00      	add	r7, sp, #0
 801249e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80124a0:	4b28      	ldr	r3, [pc, #160]	; (8012544 <prvInsertBlockIntoFreeList+0xac>)
 80124a2:	60fb      	str	r3, [r7, #12]
 80124a4:	e002      	b.n	80124ac <prvInsertBlockIntoFreeList+0x14>
 80124a6:	68fb      	ldr	r3, [r7, #12]
 80124a8:	681b      	ldr	r3, [r3, #0]
 80124aa:	60fb      	str	r3, [r7, #12]
 80124ac:	68fb      	ldr	r3, [r7, #12]
 80124ae:	681b      	ldr	r3, [r3, #0]
 80124b0:	687a      	ldr	r2, [r7, #4]
 80124b2:	429a      	cmp	r2, r3
 80124b4:	d8f7      	bhi.n	80124a6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80124b6:	68fb      	ldr	r3, [r7, #12]
 80124b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80124ba:	68fb      	ldr	r3, [r7, #12]
 80124bc:	685b      	ldr	r3, [r3, #4]
 80124be:	68ba      	ldr	r2, [r7, #8]
 80124c0:	4413      	add	r3, r2
 80124c2:	687a      	ldr	r2, [r7, #4]
 80124c4:	429a      	cmp	r2, r3
 80124c6:	d108      	bne.n	80124da <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80124c8:	68fb      	ldr	r3, [r7, #12]
 80124ca:	685a      	ldr	r2, [r3, #4]
 80124cc:	687b      	ldr	r3, [r7, #4]
 80124ce:	685b      	ldr	r3, [r3, #4]
 80124d0:	441a      	add	r2, r3
 80124d2:	68fb      	ldr	r3, [r7, #12]
 80124d4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80124d6:	68fb      	ldr	r3, [r7, #12]
 80124d8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80124da:	687b      	ldr	r3, [r7, #4]
 80124dc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80124de:	687b      	ldr	r3, [r7, #4]
 80124e0:	685b      	ldr	r3, [r3, #4]
 80124e2:	68ba      	ldr	r2, [r7, #8]
 80124e4:	441a      	add	r2, r3
 80124e6:	68fb      	ldr	r3, [r7, #12]
 80124e8:	681b      	ldr	r3, [r3, #0]
 80124ea:	429a      	cmp	r2, r3
 80124ec:	d118      	bne.n	8012520 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80124ee:	68fb      	ldr	r3, [r7, #12]
 80124f0:	681a      	ldr	r2, [r3, #0]
 80124f2:	4b15      	ldr	r3, [pc, #84]	; (8012548 <prvInsertBlockIntoFreeList+0xb0>)
 80124f4:	681b      	ldr	r3, [r3, #0]
 80124f6:	429a      	cmp	r2, r3
 80124f8:	d00d      	beq.n	8012516 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80124fa:	687b      	ldr	r3, [r7, #4]
 80124fc:	685a      	ldr	r2, [r3, #4]
 80124fe:	68fb      	ldr	r3, [r7, #12]
 8012500:	681b      	ldr	r3, [r3, #0]
 8012502:	685b      	ldr	r3, [r3, #4]
 8012504:	441a      	add	r2, r3
 8012506:	687b      	ldr	r3, [r7, #4]
 8012508:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801250a:	68fb      	ldr	r3, [r7, #12]
 801250c:	681b      	ldr	r3, [r3, #0]
 801250e:	681a      	ldr	r2, [r3, #0]
 8012510:	687b      	ldr	r3, [r7, #4]
 8012512:	601a      	str	r2, [r3, #0]
 8012514:	e008      	b.n	8012528 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8012516:	4b0c      	ldr	r3, [pc, #48]	; (8012548 <prvInsertBlockIntoFreeList+0xb0>)
 8012518:	681a      	ldr	r2, [r3, #0]
 801251a:	687b      	ldr	r3, [r7, #4]
 801251c:	601a      	str	r2, [r3, #0]
 801251e:	e003      	b.n	8012528 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8012520:	68fb      	ldr	r3, [r7, #12]
 8012522:	681a      	ldr	r2, [r3, #0]
 8012524:	687b      	ldr	r3, [r7, #4]
 8012526:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8012528:	68fa      	ldr	r2, [r7, #12]
 801252a:	687b      	ldr	r3, [r7, #4]
 801252c:	429a      	cmp	r2, r3
 801252e:	d002      	beq.n	8012536 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8012530:	68fb      	ldr	r3, [r7, #12]
 8012532:	687a      	ldr	r2, [r7, #4]
 8012534:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8012536:	bf00      	nop
 8012538:	3714      	adds	r7, #20
 801253a:	46bd      	mov	sp, r7
 801253c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012540:	4770      	bx	lr
 8012542:	bf00      	nop
 8012544:	20004b10 	.word	0x20004b10
 8012548:	20004b18 	.word	0x20004b18

0801254c <__assert_func>:
 801254c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801254e:	4614      	mov	r4, r2
 8012550:	461a      	mov	r2, r3
 8012552:	4b09      	ldr	r3, [pc, #36]	; (8012578 <__assert_func+0x2c>)
 8012554:	681b      	ldr	r3, [r3, #0]
 8012556:	4605      	mov	r5, r0
 8012558:	68d8      	ldr	r0, [r3, #12]
 801255a:	b14c      	cbz	r4, 8012570 <__assert_func+0x24>
 801255c:	4b07      	ldr	r3, [pc, #28]	; (801257c <__assert_func+0x30>)
 801255e:	9100      	str	r1, [sp, #0]
 8012560:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8012564:	4906      	ldr	r1, [pc, #24]	; (8012580 <__assert_func+0x34>)
 8012566:	462b      	mov	r3, r5
 8012568:	f000 f8ea 	bl	8012740 <fiprintf>
 801256c:	f000 fffa 	bl	8013564 <abort>
 8012570:	4b04      	ldr	r3, [pc, #16]	; (8012584 <__assert_func+0x38>)
 8012572:	461c      	mov	r4, r3
 8012574:	e7f3      	b.n	801255e <__assert_func+0x12>
 8012576:	bf00      	nop
 8012578:	20000054 	.word	0x20000054
 801257c:	0801598b 	.word	0x0801598b
 8012580:	08015998 	.word	0x08015998
 8012584:	080159c6 	.word	0x080159c6

08012588 <__errno>:
 8012588:	4b01      	ldr	r3, [pc, #4]	; (8012590 <__errno+0x8>)
 801258a:	6818      	ldr	r0, [r3, #0]
 801258c:	4770      	bx	lr
 801258e:	bf00      	nop
 8012590:	20000054 	.word	0x20000054

08012594 <std>:
 8012594:	2300      	movs	r3, #0
 8012596:	b510      	push	{r4, lr}
 8012598:	4604      	mov	r4, r0
 801259a:	e9c0 3300 	strd	r3, r3, [r0]
 801259e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80125a2:	6083      	str	r3, [r0, #8]
 80125a4:	8181      	strh	r1, [r0, #12]
 80125a6:	6643      	str	r3, [r0, #100]	; 0x64
 80125a8:	81c2      	strh	r2, [r0, #14]
 80125aa:	6183      	str	r3, [r0, #24]
 80125ac:	4619      	mov	r1, r3
 80125ae:	2208      	movs	r2, #8
 80125b0:	305c      	adds	r0, #92	; 0x5c
 80125b2:	f000 f956 	bl	8012862 <memset>
 80125b6:	4b05      	ldr	r3, [pc, #20]	; (80125cc <std+0x38>)
 80125b8:	6263      	str	r3, [r4, #36]	; 0x24
 80125ba:	4b05      	ldr	r3, [pc, #20]	; (80125d0 <std+0x3c>)
 80125bc:	62a3      	str	r3, [r4, #40]	; 0x28
 80125be:	4b05      	ldr	r3, [pc, #20]	; (80125d4 <std+0x40>)
 80125c0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80125c2:	4b05      	ldr	r3, [pc, #20]	; (80125d8 <std+0x44>)
 80125c4:	6224      	str	r4, [r4, #32]
 80125c6:	6323      	str	r3, [r4, #48]	; 0x30
 80125c8:	bd10      	pop	{r4, pc}
 80125ca:	bf00      	nop
 80125cc:	08013231 	.word	0x08013231
 80125d0:	08013253 	.word	0x08013253
 80125d4:	0801328b 	.word	0x0801328b
 80125d8:	080132af 	.word	0x080132af

080125dc <_cleanup_r>:
 80125dc:	4901      	ldr	r1, [pc, #4]	; (80125e4 <_cleanup_r+0x8>)
 80125de:	f000 b8c1 	b.w	8012764 <_fwalk_reent>
 80125e2:	bf00      	nop
 80125e4:	080136a1 	.word	0x080136a1

080125e8 <__sfmoreglue>:
 80125e8:	b570      	push	{r4, r5, r6, lr}
 80125ea:	2268      	movs	r2, #104	; 0x68
 80125ec:	1e4d      	subs	r5, r1, #1
 80125ee:	4355      	muls	r5, r2
 80125f0:	460e      	mov	r6, r1
 80125f2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80125f6:	f000 f95d 	bl	80128b4 <_malloc_r>
 80125fa:	4604      	mov	r4, r0
 80125fc:	b140      	cbz	r0, 8012610 <__sfmoreglue+0x28>
 80125fe:	2100      	movs	r1, #0
 8012600:	e9c0 1600 	strd	r1, r6, [r0]
 8012604:	300c      	adds	r0, #12
 8012606:	60a0      	str	r0, [r4, #8]
 8012608:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801260c:	f000 f929 	bl	8012862 <memset>
 8012610:	4620      	mov	r0, r4
 8012612:	bd70      	pop	{r4, r5, r6, pc}

08012614 <__sfp_lock_acquire>:
 8012614:	4801      	ldr	r0, [pc, #4]	; (801261c <__sfp_lock_acquire+0x8>)
 8012616:	f000 b8ea 	b.w	80127ee <__retarget_lock_acquire_recursive>
 801261a:	bf00      	nop
 801261c:	20004b31 	.word	0x20004b31

08012620 <__sfp_lock_release>:
 8012620:	4801      	ldr	r0, [pc, #4]	; (8012628 <__sfp_lock_release+0x8>)
 8012622:	f000 b8e5 	b.w	80127f0 <__retarget_lock_release_recursive>
 8012626:	bf00      	nop
 8012628:	20004b31 	.word	0x20004b31

0801262c <__sinit_lock_acquire>:
 801262c:	4801      	ldr	r0, [pc, #4]	; (8012634 <__sinit_lock_acquire+0x8>)
 801262e:	f000 b8de 	b.w	80127ee <__retarget_lock_acquire_recursive>
 8012632:	bf00      	nop
 8012634:	20004b32 	.word	0x20004b32

08012638 <__sinit_lock_release>:
 8012638:	4801      	ldr	r0, [pc, #4]	; (8012640 <__sinit_lock_release+0x8>)
 801263a:	f000 b8d9 	b.w	80127f0 <__retarget_lock_release_recursive>
 801263e:	bf00      	nop
 8012640:	20004b32 	.word	0x20004b32

08012644 <__sinit>:
 8012644:	b510      	push	{r4, lr}
 8012646:	4604      	mov	r4, r0
 8012648:	f7ff fff0 	bl	801262c <__sinit_lock_acquire>
 801264c:	69a3      	ldr	r3, [r4, #24]
 801264e:	b11b      	cbz	r3, 8012658 <__sinit+0x14>
 8012650:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012654:	f7ff bff0 	b.w	8012638 <__sinit_lock_release>
 8012658:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801265c:	6523      	str	r3, [r4, #80]	; 0x50
 801265e:	4b13      	ldr	r3, [pc, #76]	; (80126ac <__sinit+0x68>)
 8012660:	4a13      	ldr	r2, [pc, #76]	; (80126b0 <__sinit+0x6c>)
 8012662:	681b      	ldr	r3, [r3, #0]
 8012664:	62a2      	str	r2, [r4, #40]	; 0x28
 8012666:	42a3      	cmp	r3, r4
 8012668:	bf04      	itt	eq
 801266a:	2301      	moveq	r3, #1
 801266c:	61a3      	streq	r3, [r4, #24]
 801266e:	4620      	mov	r0, r4
 8012670:	f000 f820 	bl	80126b4 <__sfp>
 8012674:	6060      	str	r0, [r4, #4]
 8012676:	4620      	mov	r0, r4
 8012678:	f000 f81c 	bl	80126b4 <__sfp>
 801267c:	60a0      	str	r0, [r4, #8]
 801267e:	4620      	mov	r0, r4
 8012680:	f000 f818 	bl	80126b4 <__sfp>
 8012684:	2200      	movs	r2, #0
 8012686:	60e0      	str	r0, [r4, #12]
 8012688:	2104      	movs	r1, #4
 801268a:	6860      	ldr	r0, [r4, #4]
 801268c:	f7ff ff82 	bl	8012594 <std>
 8012690:	68a0      	ldr	r0, [r4, #8]
 8012692:	2201      	movs	r2, #1
 8012694:	2109      	movs	r1, #9
 8012696:	f7ff ff7d 	bl	8012594 <std>
 801269a:	68e0      	ldr	r0, [r4, #12]
 801269c:	2202      	movs	r2, #2
 801269e:	2112      	movs	r1, #18
 80126a0:	f7ff ff78 	bl	8012594 <std>
 80126a4:	2301      	movs	r3, #1
 80126a6:	61a3      	str	r3, [r4, #24]
 80126a8:	e7d2      	b.n	8012650 <__sinit+0xc>
 80126aa:	bf00      	nop
 80126ac:	08015a28 	.word	0x08015a28
 80126b0:	080125dd 	.word	0x080125dd

080126b4 <__sfp>:
 80126b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80126b6:	4607      	mov	r7, r0
 80126b8:	f7ff ffac 	bl	8012614 <__sfp_lock_acquire>
 80126bc:	4b1e      	ldr	r3, [pc, #120]	; (8012738 <__sfp+0x84>)
 80126be:	681e      	ldr	r6, [r3, #0]
 80126c0:	69b3      	ldr	r3, [r6, #24]
 80126c2:	b913      	cbnz	r3, 80126ca <__sfp+0x16>
 80126c4:	4630      	mov	r0, r6
 80126c6:	f7ff ffbd 	bl	8012644 <__sinit>
 80126ca:	3648      	adds	r6, #72	; 0x48
 80126cc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80126d0:	3b01      	subs	r3, #1
 80126d2:	d503      	bpl.n	80126dc <__sfp+0x28>
 80126d4:	6833      	ldr	r3, [r6, #0]
 80126d6:	b30b      	cbz	r3, 801271c <__sfp+0x68>
 80126d8:	6836      	ldr	r6, [r6, #0]
 80126da:	e7f7      	b.n	80126cc <__sfp+0x18>
 80126dc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80126e0:	b9d5      	cbnz	r5, 8012718 <__sfp+0x64>
 80126e2:	4b16      	ldr	r3, [pc, #88]	; (801273c <__sfp+0x88>)
 80126e4:	60e3      	str	r3, [r4, #12]
 80126e6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80126ea:	6665      	str	r5, [r4, #100]	; 0x64
 80126ec:	f000 f87e 	bl	80127ec <__retarget_lock_init_recursive>
 80126f0:	f7ff ff96 	bl	8012620 <__sfp_lock_release>
 80126f4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80126f8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80126fc:	6025      	str	r5, [r4, #0]
 80126fe:	61a5      	str	r5, [r4, #24]
 8012700:	2208      	movs	r2, #8
 8012702:	4629      	mov	r1, r5
 8012704:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8012708:	f000 f8ab 	bl	8012862 <memset>
 801270c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8012710:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8012714:	4620      	mov	r0, r4
 8012716:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012718:	3468      	adds	r4, #104	; 0x68
 801271a:	e7d9      	b.n	80126d0 <__sfp+0x1c>
 801271c:	2104      	movs	r1, #4
 801271e:	4638      	mov	r0, r7
 8012720:	f7ff ff62 	bl	80125e8 <__sfmoreglue>
 8012724:	4604      	mov	r4, r0
 8012726:	6030      	str	r0, [r6, #0]
 8012728:	2800      	cmp	r0, #0
 801272a:	d1d5      	bne.n	80126d8 <__sfp+0x24>
 801272c:	f7ff ff78 	bl	8012620 <__sfp_lock_release>
 8012730:	230c      	movs	r3, #12
 8012732:	603b      	str	r3, [r7, #0]
 8012734:	e7ee      	b.n	8012714 <__sfp+0x60>
 8012736:	bf00      	nop
 8012738:	08015a28 	.word	0x08015a28
 801273c:	ffff0001 	.word	0xffff0001

08012740 <fiprintf>:
 8012740:	b40e      	push	{r1, r2, r3}
 8012742:	b503      	push	{r0, r1, lr}
 8012744:	4601      	mov	r1, r0
 8012746:	ab03      	add	r3, sp, #12
 8012748:	4805      	ldr	r0, [pc, #20]	; (8012760 <fiprintf+0x20>)
 801274a:	f853 2b04 	ldr.w	r2, [r3], #4
 801274e:	6800      	ldr	r0, [r0, #0]
 8012750:	9301      	str	r3, [sp, #4]
 8012752:	f000 f94d 	bl	80129f0 <_vfiprintf_r>
 8012756:	b002      	add	sp, #8
 8012758:	f85d eb04 	ldr.w	lr, [sp], #4
 801275c:	b003      	add	sp, #12
 801275e:	4770      	bx	lr
 8012760:	20000054 	.word	0x20000054

08012764 <_fwalk_reent>:
 8012764:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012768:	4606      	mov	r6, r0
 801276a:	4688      	mov	r8, r1
 801276c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8012770:	2700      	movs	r7, #0
 8012772:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8012776:	f1b9 0901 	subs.w	r9, r9, #1
 801277a:	d505      	bpl.n	8012788 <_fwalk_reent+0x24>
 801277c:	6824      	ldr	r4, [r4, #0]
 801277e:	2c00      	cmp	r4, #0
 8012780:	d1f7      	bne.n	8012772 <_fwalk_reent+0xe>
 8012782:	4638      	mov	r0, r7
 8012784:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012788:	89ab      	ldrh	r3, [r5, #12]
 801278a:	2b01      	cmp	r3, #1
 801278c:	d907      	bls.n	801279e <_fwalk_reent+0x3a>
 801278e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8012792:	3301      	adds	r3, #1
 8012794:	d003      	beq.n	801279e <_fwalk_reent+0x3a>
 8012796:	4629      	mov	r1, r5
 8012798:	4630      	mov	r0, r6
 801279a:	47c0      	blx	r8
 801279c:	4307      	orrs	r7, r0
 801279e:	3568      	adds	r5, #104	; 0x68
 80127a0:	e7e9      	b.n	8012776 <_fwalk_reent+0x12>
	...

080127a4 <__libc_init_array>:
 80127a4:	b570      	push	{r4, r5, r6, lr}
 80127a6:	4d0d      	ldr	r5, [pc, #52]	; (80127dc <__libc_init_array+0x38>)
 80127a8:	4c0d      	ldr	r4, [pc, #52]	; (80127e0 <__libc_init_array+0x3c>)
 80127aa:	1b64      	subs	r4, r4, r5
 80127ac:	10a4      	asrs	r4, r4, #2
 80127ae:	2600      	movs	r6, #0
 80127b0:	42a6      	cmp	r6, r4
 80127b2:	d109      	bne.n	80127c8 <__libc_init_array+0x24>
 80127b4:	4d0b      	ldr	r5, [pc, #44]	; (80127e4 <__libc_init_array+0x40>)
 80127b6:	4c0c      	ldr	r4, [pc, #48]	; (80127e8 <__libc_init_array+0x44>)
 80127b8:	f001 fa90 	bl	8013cdc <_init>
 80127bc:	1b64      	subs	r4, r4, r5
 80127be:	10a4      	asrs	r4, r4, #2
 80127c0:	2600      	movs	r6, #0
 80127c2:	42a6      	cmp	r6, r4
 80127c4:	d105      	bne.n	80127d2 <__libc_init_array+0x2e>
 80127c6:	bd70      	pop	{r4, r5, r6, pc}
 80127c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80127cc:	4798      	blx	r3
 80127ce:	3601      	adds	r6, #1
 80127d0:	e7ee      	b.n	80127b0 <__libc_init_array+0xc>
 80127d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80127d6:	4798      	blx	r3
 80127d8:	3601      	adds	r6, #1
 80127da:	e7f2      	b.n	80127c2 <__libc_init_array+0x1e>
 80127dc:	08015adc 	.word	0x08015adc
 80127e0:	08015adc 	.word	0x08015adc
 80127e4:	08015adc 	.word	0x08015adc
 80127e8:	08015ae0 	.word	0x08015ae0

080127ec <__retarget_lock_init_recursive>:
 80127ec:	4770      	bx	lr

080127ee <__retarget_lock_acquire_recursive>:
 80127ee:	4770      	bx	lr

080127f0 <__retarget_lock_release_recursive>:
 80127f0:	4770      	bx	lr

080127f2 <memcmp>:
 80127f2:	b510      	push	{r4, lr}
 80127f4:	3901      	subs	r1, #1
 80127f6:	4402      	add	r2, r0
 80127f8:	4290      	cmp	r0, r2
 80127fa:	d101      	bne.n	8012800 <memcmp+0xe>
 80127fc:	2000      	movs	r0, #0
 80127fe:	e005      	b.n	801280c <memcmp+0x1a>
 8012800:	7803      	ldrb	r3, [r0, #0]
 8012802:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8012806:	42a3      	cmp	r3, r4
 8012808:	d001      	beq.n	801280e <memcmp+0x1c>
 801280a:	1b18      	subs	r0, r3, r4
 801280c:	bd10      	pop	{r4, pc}
 801280e:	3001      	adds	r0, #1
 8012810:	e7f2      	b.n	80127f8 <memcmp+0x6>

08012812 <memcpy>:
 8012812:	440a      	add	r2, r1
 8012814:	4291      	cmp	r1, r2
 8012816:	f100 33ff 	add.w	r3, r0, #4294967295
 801281a:	d100      	bne.n	801281e <memcpy+0xc>
 801281c:	4770      	bx	lr
 801281e:	b510      	push	{r4, lr}
 8012820:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012824:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012828:	4291      	cmp	r1, r2
 801282a:	d1f9      	bne.n	8012820 <memcpy+0xe>
 801282c:	bd10      	pop	{r4, pc}

0801282e <memmove>:
 801282e:	4288      	cmp	r0, r1
 8012830:	b510      	push	{r4, lr}
 8012832:	eb01 0402 	add.w	r4, r1, r2
 8012836:	d902      	bls.n	801283e <memmove+0x10>
 8012838:	4284      	cmp	r4, r0
 801283a:	4623      	mov	r3, r4
 801283c:	d807      	bhi.n	801284e <memmove+0x20>
 801283e:	1e43      	subs	r3, r0, #1
 8012840:	42a1      	cmp	r1, r4
 8012842:	d008      	beq.n	8012856 <memmove+0x28>
 8012844:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012848:	f803 2f01 	strb.w	r2, [r3, #1]!
 801284c:	e7f8      	b.n	8012840 <memmove+0x12>
 801284e:	4402      	add	r2, r0
 8012850:	4601      	mov	r1, r0
 8012852:	428a      	cmp	r2, r1
 8012854:	d100      	bne.n	8012858 <memmove+0x2a>
 8012856:	bd10      	pop	{r4, pc}
 8012858:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801285c:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8012860:	e7f7      	b.n	8012852 <memmove+0x24>

08012862 <memset>:
 8012862:	4402      	add	r2, r0
 8012864:	4603      	mov	r3, r0
 8012866:	4293      	cmp	r3, r2
 8012868:	d100      	bne.n	801286c <memset+0xa>
 801286a:	4770      	bx	lr
 801286c:	f803 1b01 	strb.w	r1, [r3], #1
 8012870:	e7f9      	b.n	8012866 <memset+0x4>
	...

08012874 <sbrk_aligned>:
 8012874:	b570      	push	{r4, r5, r6, lr}
 8012876:	4e0e      	ldr	r6, [pc, #56]	; (80128b0 <sbrk_aligned+0x3c>)
 8012878:	460c      	mov	r4, r1
 801287a:	6831      	ldr	r1, [r6, #0]
 801287c:	4605      	mov	r5, r0
 801287e:	b911      	cbnz	r1, 8012886 <sbrk_aligned+0x12>
 8012880:	f000 fc72 	bl	8013168 <_sbrk_r>
 8012884:	6030      	str	r0, [r6, #0]
 8012886:	4621      	mov	r1, r4
 8012888:	4628      	mov	r0, r5
 801288a:	f000 fc6d 	bl	8013168 <_sbrk_r>
 801288e:	1c43      	adds	r3, r0, #1
 8012890:	d00a      	beq.n	80128a8 <sbrk_aligned+0x34>
 8012892:	1cc4      	adds	r4, r0, #3
 8012894:	f024 0403 	bic.w	r4, r4, #3
 8012898:	42a0      	cmp	r0, r4
 801289a:	d007      	beq.n	80128ac <sbrk_aligned+0x38>
 801289c:	1a21      	subs	r1, r4, r0
 801289e:	4628      	mov	r0, r5
 80128a0:	f000 fc62 	bl	8013168 <_sbrk_r>
 80128a4:	3001      	adds	r0, #1
 80128a6:	d101      	bne.n	80128ac <sbrk_aligned+0x38>
 80128a8:	f04f 34ff 	mov.w	r4, #4294967295
 80128ac:	4620      	mov	r0, r4
 80128ae:	bd70      	pop	{r4, r5, r6, pc}
 80128b0:	20004b38 	.word	0x20004b38

080128b4 <_malloc_r>:
 80128b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80128b8:	1ccd      	adds	r5, r1, #3
 80128ba:	f025 0503 	bic.w	r5, r5, #3
 80128be:	3508      	adds	r5, #8
 80128c0:	2d0c      	cmp	r5, #12
 80128c2:	bf38      	it	cc
 80128c4:	250c      	movcc	r5, #12
 80128c6:	2d00      	cmp	r5, #0
 80128c8:	4607      	mov	r7, r0
 80128ca:	db01      	blt.n	80128d0 <_malloc_r+0x1c>
 80128cc:	42a9      	cmp	r1, r5
 80128ce:	d905      	bls.n	80128dc <_malloc_r+0x28>
 80128d0:	230c      	movs	r3, #12
 80128d2:	603b      	str	r3, [r7, #0]
 80128d4:	2600      	movs	r6, #0
 80128d6:	4630      	mov	r0, r6
 80128d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80128dc:	4e2e      	ldr	r6, [pc, #184]	; (8012998 <_malloc_r+0xe4>)
 80128de:	f000 ff9b 	bl	8013818 <__malloc_lock>
 80128e2:	6833      	ldr	r3, [r6, #0]
 80128e4:	461c      	mov	r4, r3
 80128e6:	bb34      	cbnz	r4, 8012936 <_malloc_r+0x82>
 80128e8:	4629      	mov	r1, r5
 80128ea:	4638      	mov	r0, r7
 80128ec:	f7ff ffc2 	bl	8012874 <sbrk_aligned>
 80128f0:	1c43      	adds	r3, r0, #1
 80128f2:	4604      	mov	r4, r0
 80128f4:	d14d      	bne.n	8012992 <_malloc_r+0xde>
 80128f6:	6834      	ldr	r4, [r6, #0]
 80128f8:	4626      	mov	r6, r4
 80128fa:	2e00      	cmp	r6, #0
 80128fc:	d140      	bne.n	8012980 <_malloc_r+0xcc>
 80128fe:	6823      	ldr	r3, [r4, #0]
 8012900:	4631      	mov	r1, r6
 8012902:	4638      	mov	r0, r7
 8012904:	eb04 0803 	add.w	r8, r4, r3
 8012908:	f000 fc2e 	bl	8013168 <_sbrk_r>
 801290c:	4580      	cmp	r8, r0
 801290e:	d13a      	bne.n	8012986 <_malloc_r+0xd2>
 8012910:	6821      	ldr	r1, [r4, #0]
 8012912:	3503      	adds	r5, #3
 8012914:	1a6d      	subs	r5, r5, r1
 8012916:	f025 0503 	bic.w	r5, r5, #3
 801291a:	3508      	adds	r5, #8
 801291c:	2d0c      	cmp	r5, #12
 801291e:	bf38      	it	cc
 8012920:	250c      	movcc	r5, #12
 8012922:	4629      	mov	r1, r5
 8012924:	4638      	mov	r0, r7
 8012926:	f7ff ffa5 	bl	8012874 <sbrk_aligned>
 801292a:	3001      	adds	r0, #1
 801292c:	d02b      	beq.n	8012986 <_malloc_r+0xd2>
 801292e:	6823      	ldr	r3, [r4, #0]
 8012930:	442b      	add	r3, r5
 8012932:	6023      	str	r3, [r4, #0]
 8012934:	e00e      	b.n	8012954 <_malloc_r+0xa0>
 8012936:	6822      	ldr	r2, [r4, #0]
 8012938:	1b52      	subs	r2, r2, r5
 801293a:	d41e      	bmi.n	801297a <_malloc_r+0xc6>
 801293c:	2a0b      	cmp	r2, #11
 801293e:	d916      	bls.n	801296e <_malloc_r+0xba>
 8012940:	1961      	adds	r1, r4, r5
 8012942:	42a3      	cmp	r3, r4
 8012944:	6025      	str	r5, [r4, #0]
 8012946:	bf18      	it	ne
 8012948:	6059      	strne	r1, [r3, #4]
 801294a:	6863      	ldr	r3, [r4, #4]
 801294c:	bf08      	it	eq
 801294e:	6031      	streq	r1, [r6, #0]
 8012950:	5162      	str	r2, [r4, r5]
 8012952:	604b      	str	r3, [r1, #4]
 8012954:	4638      	mov	r0, r7
 8012956:	f104 060b 	add.w	r6, r4, #11
 801295a:	f000 ff63 	bl	8013824 <__malloc_unlock>
 801295e:	f026 0607 	bic.w	r6, r6, #7
 8012962:	1d23      	adds	r3, r4, #4
 8012964:	1af2      	subs	r2, r6, r3
 8012966:	d0b6      	beq.n	80128d6 <_malloc_r+0x22>
 8012968:	1b9b      	subs	r3, r3, r6
 801296a:	50a3      	str	r3, [r4, r2]
 801296c:	e7b3      	b.n	80128d6 <_malloc_r+0x22>
 801296e:	6862      	ldr	r2, [r4, #4]
 8012970:	42a3      	cmp	r3, r4
 8012972:	bf0c      	ite	eq
 8012974:	6032      	streq	r2, [r6, #0]
 8012976:	605a      	strne	r2, [r3, #4]
 8012978:	e7ec      	b.n	8012954 <_malloc_r+0xa0>
 801297a:	4623      	mov	r3, r4
 801297c:	6864      	ldr	r4, [r4, #4]
 801297e:	e7b2      	b.n	80128e6 <_malloc_r+0x32>
 8012980:	4634      	mov	r4, r6
 8012982:	6876      	ldr	r6, [r6, #4]
 8012984:	e7b9      	b.n	80128fa <_malloc_r+0x46>
 8012986:	230c      	movs	r3, #12
 8012988:	603b      	str	r3, [r7, #0]
 801298a:	4638      	mov	r0, r7
 801298c:	f000 ff4a 	bl	8013824 <__malloc_unlock>
 8012990:	e7a1      	b.n	80128d6 <_malloc_r+0x22>
 8012992:	6025      	str	r5, [r4, #0]
 8012994:	e7de      	b.n	8012954 <_malloc_r+0xa0>
 8012996:	bf00      	nop
 8012998:	20004b34 	.word	0x20004b34

0801299c <__sfputc_r>:
 801299c:	6893      	ldr	r3, [r2, #8]
 801299e:	3b01      	subs	r3, #1
 80129a0:	2b00      	cmp	r3, #0
 80129a2:	b410      	push	{r4}
 80129a4:	6093      	str	r3, [r2, #8]
 80129a6:	da08      	bge.n	80129ba <__sfputc_r+0x1e>
 80129a8:	6994      	ldr	r4, [r2, #24]
 80129aa:	42a3      	cmp	r3, r4
 80129ac:	db01      	blt.n	80129b2 <__sfputc_r+0x16>
 80129ae:	290a      	cmp	r1, #10
 80129b0:	d103      	bne.n	80129ba <__sfputc_r+0x1e>
 80129b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80129b6:	f000 bd03 	b.w	80133c0 <__swbuf_r>
 80129ba:	6813      	ldr	r3, [r2, #0]
 80129bc:	1c58      	adds	r0, r3, #1
 80129be:	6010      	str	r0, [r2, #0]
 80129c0:	7019      	strb	r1, [r3, #0]
 80129c2:	4608      	mov	r0, r1
 80129c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80129c8:	4770      	bx	lr

080129ca <__sfputs_r>:
 80129ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80129cc:	4606      	mov	r6, r0
 80129ce:	460f      	mov	r7, r1
 80129d0:	4614      	mov	r4, r2
 80129d2:	18d5      	adds	r5, r2, r3
 80129d4:	42ac      	cmp	r4, r5
 80129d6:	d101      	bne.n	80129dc <__sfputs_r+0x12>
 80129d8:	2000      	movs	r0, #0
 80129da:	e007      	b.n	80129ec <__sfputs_r+0x22>
 80129dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80129e0:	463a      	mov	r2, r7
 80129e2:	4630      	mov	r0, r6
 80129e4:	f7ff ffda 	bl	801299c <__sfputc_r>
 80129e8:	1c43      	adds	r3, r0, #1
 80129ea:	d1f3      	bne.n	80129d4 <__sfputs_r+0xa>
 80129ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080129f0 <_vfiprintf_r>:
 80129f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80129f4:	460d      	mov	r5, r1
 80129f6:	b09d      	sub	sp, #116	; 0x74
 80129f8:	4614      	mov	r4, r2
 80129fa:	4698      	mov	r8, r3
 80129fc:	4606      	mov	r6, r0
 80129fe:	b118      	cbz	r0, 8012a08 <_vfiprintf_r+0x18>
 8012a00:	6983      	ldr	r3, [r0, #24]
 8012a02:	b90b      	cbnz	r3, 8012a08 <_vfiprintf_r+0x18>
 8012a04:	f7ff fe1e 	bl	8012644 <__sinit>
 8012a08:	4b89      	ldr	r3, [pc, #548]	; (8012c30 <_vfiprintf_r+0x240>)
 8012a0a:	429d      	cmp	r5, r3
 8012a0c:	d11b      	bne.n	8012a46 <_vfiprintf_r+0x56>
 8012a0e:	6875      	ldr	r5, [r6, #4]
 8012a10:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012a12:	07d9      	lsls	r1, r3, #31
 8012a14:	d405      	bmi.n	8012a22 <_vfiprintf_r+0x32>
 8012a16:	89ab      	ldrh	r3, [r5, #12]
 8012a18:	059a      	lsls	r2, r3, #22
 8012a1a:	d402      	bmi.n	8012a22 <_vfiprintf_r+0x32>
 8012a1c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012a1e:	f7ff fee6 	bl	80127ee <__retarget_lock_acquire_recursive>
 8012a22:	89ab      	ldrh	r3, [r5, #12]
 8012a24:	071b      	lsls	r3, r3, #28
 8012a26:	d501      	bpl.n	8012a2c <_vfiprintf_r+0x3c>
 8012a28:	692b      	ldr	r3, [r5, #16]
 8012a2a:	b9eb      	cbnz	r3, 8012a68 <_vfiprintf_r+0x78>
 8012a2c:	4629      	mov	r1, r5
 8012a2e:	4630      	mov	r0, r6
 8012a30:	f000 fd2a 	bl	8013488 <__swsetup_r>
 8012a34:	b1c0      	cbz	r0, 8012a68 <_vfiprintf_r+0x78>
 8012a36:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012a38:	07dc      	lsls	r4, r3, #31
 8012a3a:	d50e      	bpl.n	8012a5a <_vfiprintf_r+0x6a>
 8012a3c:	f04f 30ff 	mov.w	r0, #4294967295
 8012a40:	b01d      	add	sp, #116	; 0x74
 8012a42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012a46:	4b7b      	ldr	r3, [pc, #492]	; (8012c34 <_vfiprintf_r+0x244>)
 8012a48:	429d      	cmp	r5, r3
 8012a4a:	d101      	bne.n	8012a50 <_vfiprintf_r+0x60>
 8012a4c:	68b5      	ldr	r5, [r6, #8]
 8012a4e:	e7df      	b.n	8012a10 <_vfiprintf_r+0x20>
 8012a50:	4b79      	ldr	r3, [pc, #484]	; (8012c38 <_vfiprintf_r+0x248>)
 8012a52:	429d      	cmp	r5, r3
 8012a54:	bf08      	it	eq
 8012a56:	68f5      	ldreq	r5, [r6, #12]
 8012a58:	e7da      	b.n	8012a10 <_vfiprintf_r+0x20>
 8012a5a:	89ab      	ldrh	r3, [r5, #12]
 8012a5c:	0598      	lsls	r0, r3, #22
 8012a5e:	d4ed      	bmi.n	8012a3c <_vfiprintf_r+0x4c>
 8012a60:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012a62:	f7ff fec5 	bl	80127f0 <__retarget_lock_release_recursive>
 8012a66:	e7e9      	b.n	8012a3c <_vfiprintf_r+0x4c>
 8012a68:	2300      	movs	r3, #0
 8012a6a:	9309      	str	r3, [sp, #36]	; 0x24
 8012a6c:	2320      	movs	r3, #32
 8012a6e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012a72:	f8cd 800c 	str.w	r8, [sp, #12]
 8012a76:	2330      	movs	r3, #48	; 0x30
 8012a78:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8012c3c <_vfiprintf_r+0x24c>
 8012a7c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012a80:	f04f 0901 	mov.w	r9, #1
 8012a84:	4623      	mov	r3, r4
 8012a86:	469a      	mov	sl, r3
 8012a88:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012a8c:	b10a      	cbz	r2, 8012a92 <_vfiprintf_r+0xa2>
 8012a8e:	2a25      	cmp	r2, #37	; 0x25
 8012a90:	d1f9      	bne.n	8012a86 <_vfiprintf_r+0x96>
 8012a92:	ebba 0b04 	subs.w	fp, sl, r4
 8012a96:	d00b      	beq.n	8012ab0 <_vfiprintf_r+0xc0>
 8012a98:	465b      	mov	r3, fp
 8012a9a:	4622      	mov	r2, r4
 8012a9c:	4629      	mov	r1, r5
 8012a9e:	4630      	mov	r0, r6
 8012aa0:	f7ff ff93 	bl	80129ca <__sfputs_r>
 8012aa4:	3001      	adds	r0, #1
 8012aa6:	f000 80aa 	beq.w	8012bfe <_vfiprintf_r+0x20e>
 8012aaa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012aac:	445a      	add	r2, fp
 8012aae:	9209      	str	r2, [sp, #36]	; 0x24
 8012ab0:	f89a 3000 	ldrb.w	r3, [sl]
 8012ab4:	2b00      	cmp	r3, #0
 8012ab6:	f000 80a2 	beq.w	8012bfe <_vfiprintf_r+0x20e>
 8012aba:	2300      	movs	r3, #0
 8012abc:	f04f 32ff 	mov.w	r2, #4294967295
 8012ac0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012ac4:	f10a 0a01 	add.w	sl, sl, #1
 8012ac8:	9304      	str	r3, [sp, #16]
 8012aca:	9307      	str	r3, [sp, #28]
 8012acc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012ad0:	931a      	str	r3, [sp, #104]	; 0x68
 8012ad2:	4654      	mov	r4, sl
 8012ad4:	2205      	movs	r2, #5
 8012ad6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012ada:	4858      	ldr	r0, [pc, #352]	; (8012c3c <_vfiprintf_r+0x24c>)
 8012adc:	f7ed fb80 	bl	80001e0 <memchr>
 8012ae0:	9a04      	ldr	r2, [sp, #16]
 8012ae2:	b9d8      	cbnz	r0, 8012b1c <_vfiprintf_r+0x12c>
 8012ae4:	06d1      	lsls	r1, r2, #27
 8012ae6:	bf44      	itt	mi
 8012ae8:	2320      	movmi	r3, #32
 8012aea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012aee:	0713      	lsls	r3, r2, #28
 8012af0:	bf44      	itt	mi
 8012af2:	232b      	movmi	r3, #43	; 0x2b
 8012af4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012af8:	f89a 3000 	ldrb.w	r3, [sl]
 8012afc:	2b2a      	cmp	r3, #42	; 0x2a
 8012afe:	d015      	beq.n	8012b2c <_vfiprintf_r+0x13c>
 8012b00:	9a07      	ldr	r2, [sp, #28]
 8012b02:	4654      	mov	r4, sl
 8012b04:	2000      	movs	r0, #0
 8012b06:	f04f 0c0a 	mov.w	ip, #10
 8012b0a:	4621      	mov	r1, r4
 8012b0c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012b10:	3b30      	subs	r3, #48	; 0x30
 8012b12:	2b09      	cmp	r3, #9
 8012b14:	d94e      	bls.n	8012bb4 <_vfiprintf_r+0x1c4>
 8012b16:	b1b0      	cbz	r0, 8012b46 <_vfiprintf_r+0x156>
 8012b18:	9207      	str	r2, [sp, #28]
 8012b1a:	e014      	b.n	8012b46 <_vfiprintf_r+0x156>
 8012b1c:	eba0 0308 	sub.w	r3, r0, r8
 8012b20:	fa09 f303 	lsl.w	r3, r9, r3
 8012b24:	4313      	orrs	r3, r2
 8012b26:	9304      	str	r3, [sp, #16]
 8012b28:	46a2      	mov	sl, r4
 8012b2a:	e7d2      	b.n	8012ad2 <_vfiprintf_r+0xe2>
 8012b2c:	9b03      	ldr	r3, [sp, #12]
 8012b2e:	1d19      	adds	r1, r3, #4
 8012b30:	681b      	ldr	r3, [r3, #0]
 8012b32:	9103      	str	r1, [sp, #12]
 8012b34:	2b00      	cmp	r3, #0
 8012b36:	bfbb      	ittet	lt
 8012b38:	425b      	neglt	r3, r3
 8012b3a:	f042 0202 	orrlt.w	r2, r2, #2
 8012b3e:	9307      	strge	r3, [sp, #28]
 8012b40:	9307      	strlt	r3, [sp, #28]
 8012b42:	bfb8      	it	lt
 8012b44:	9204      	strlt	r2, [sp, #16]
 8012b46:	7823      	ldrb	r3, [r4, #0]
 8012b48:	2b2e      	cmp	r3, #46	; 0x2e
 8012b4a:	d10c      	bne.n	8012b66 <_vfiprintf_r+0x176>
 8012b4c:	7863      	ldrb	r3, [r4, #1]
 8012b4e:	2b2a      	cmp	r3, #42	; 0x2a
 8012b50:	d135      	bne.n	8012bbe <_vfiprintf_r+0x1ce>
 8012b52:	9b03      	ldr	r3, [sp, #12]
 8012b54:	1d1a      	adds	r2, r3, #4
 8012b56:	681b      	ldr	r3, [r3, #0]
 8012b58:	9203      	str	r2, [sp, #12]
 8012b5a:	2b00      	cmp	r3, #0
 8012b5c:	bfb8      	it	lt
 8012b5e:	f04f 33ff 	movlt.w	r3, #4294967295
 8012b62:	3402      	adds	r4, #2
 8012b64:	9305      	str	r3, [sp, #20]
 8012b66:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8012c4c <_vfiprintf_r+0x25c>
 8012b6a:	7821      	ldrb	r1, [r4, #0]
 8012b6c:	2203      	movs	r2, #3
 8012b6e:	4650      	mov	r0, sl
 8012b70:	f7ed fb36 	bl	80001e0 <memchr>
 8012b74:	b140      	cbz	r0, 8012b88 <_vfiprintf_r+0x198>
 8012b76:	2340      	movs	r3, #64	; 0x40
 8012b78:	eba0 000a 	sub.w	r0, r0, sl
 8012b7c:	fa03 f000 	lsl.w	r0, r3, r0
 8012b80:	9b04      	ldr	r3, [sp, #16]
 8012b82:	4303      	orrs	r3, r0
 8012b84:	3401      	adds	r4, #1
 8012b86:	9304      	str	r3, [sp, #16]
 8012b88:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012b8c:	482c      	ldr	r0, [pc, #176]	; (8012c40 <_vfiprintf_r+0x250>)
 8012b8e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012b92:	2206      	movs	r2, #6
 8012b94:	f7ed fb24 	bl	80001e0 <memchr>
 8012b98:	2800      	cmp	r0, #0
 8012b9a:	d03f      	beq.n	8012c1c <_vfiprintf_r+0x22c>
 8012b9c:	4b29      	ldr	r3, [pc, #164]	; (8012c44 <_vfiprintf_r+0x254>)
 8012b9e:	bb1b      	cbnz	r3, 8012be8 <_vfiprintf_r+0x1f8>
 8012ba0:	9b03      	ldr	r3, [sp, #12]
 8012ba2:	3307      	adds	r3, #7
 8012ba4:	f023 0307 	bic.w	r3, r3, #7
 8012ba8:	3308      	adds	r3, #8
 8012baa:	9303      	str	r3, [sp, #12]
 8012bac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012bae:	443b      	add	r3, r7
 8012bb0:	9309      	str	r3, [sp, #36]	; 0x24
 8012bb2:	e767      	b.n	8012a84 <_vfiprintf_r+0x94>
 8012bb4:	fb0c 3202 	mla	r2, ip, r2, r3
 8012bb8:	460c      	mov	r4, r1
 8012bba:	2001      	movs	r0, #1
 8012bbc:	e7a5      	b.n	8012b0a <_vfiprintf_r+0x11a>
 8012bbe:	2300      	movs	r3, #0
 8012bc0:	3401      	adds	r4, #1
 8012bc2:	9305      	str	r3, [sp, #20]
 8012bc4:	4619      	mov	r1, r3
 8012bc6:	f04f 0c0a 	mov.w	ip, #10
 8012bca:	4620      	mov	r0, r4
 8012bcc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012bd0:	3a30      	subs	r2, #48	; 0x30
 8012bd2:	2a09      	cmp	r2, #9
 8012bd4:	d903      	bls.n	8012bde <_vfiprintf_r+0x1ee>
 8012bd6:	2b00      	cmp	r3, #0
 8012bd8:	d0c5      	beq.n	8012b66 <_vfiprintf_r+0x176>
 8012bda:	9105      	str	r1, [sp, #20]
 8012bdc:	e7c3      	b.n	8012b66 <_vfiprintf_r+0x176>
 8012bde:	fb0c 2101 	mla	r1, ip, r1, r2
 8012be2:	4604      	mov	r4, r0
 8012be4:	2301      	movs	r3, #1
 8012be6:	e7f0      	b.n	8012bca <_vfiprintf_r+0x1da>
 8012be8:	ab03      	add	r3, sp, #12
 8012bea:	9300      	str	r3, [sp, #0]
 8012bec:	462a      	mov	r2, r5
 8012bee:	4b16      	ldr	r3, [pc, #88]	; (8012c48 <_vfiprintf_r+0x258>)
 8012bf0:	a904      	add	r1, sp, #16
 8012bf2:	4630      	mov	r0, r6
 8012bf4:	f3af 8000 	nop.w
 8012bf8:	4607      	mov	r7, r0
 8012bfa:	1c78      	adds	r0, r7, #1
 8012bfc:	d1d6      	bne.n	8012bac <_vfiprintf_r+0x1bc>
 8012bfe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012c00:	07d9      	lsls	r1, r3, #31
 8012c02:	d405      	bmi.n	8012c10 <_vfiprintf_r+0x220>
 8012c04:	89ab      	ldrh	r3, [r5, #12]
 8012c06:	059a      	lsls	r2, r3, #22
 8012c08:	d402      	bmi.n	8012c10 <_vfiprintf_r+0x220>
 8012c0a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012c0c:	f7ff fdf0 	bl	80127f0 <__retarget_lock_release_recursive>
 8012c10:	89ab      	ldrh	r3, [r5, #12]
 8012c12:	065b      	lsls	r3, r3, #25
 8012c14:	f53f af12 	bmi.w	8012a3c <_vfiprintf_r+0x4c>
 8012c18:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012c1a:	e711      	b.n	8012a40 <_vfiprintf_r+0x50>
 8012c1c:	ab03      	add	r3, sp, #12
 8012c1e:	9300      	str	r3, [sp, #0]
 8012c20:	462a      	mov	r2, r5
 8012c22:	4b09      	ldr	r3, [pc, #36]	; (8012c48 <_vfiprintf_r+0x258>)
 8012c24:	a904      	add	r1, sp, #16
 8012c26:	4630      	mov	r0, r6
 8012c28:	f000 f880 	bl	8012d2c <_printf_i>
 8012c2c:	e7e4      	b.n	8012bf8 <_vfiprintf_r+0x208>
 8012c2e:	bf00      	nop
 8012c30:	080159e8 	.word	0x080159e8
 8012c34:	08015a08 	.word	0x08015a08
 8012c38:	080159c8 	.word	0x080159c8
 8012c3c:	08015a2c 	.word	0x08015a2c
 8012c40:	08015a36 	.word	0x08015a36
 8012c44:	00000000 	.word	0x00000000
 8012c48:	080129cb 	.word	0x080129cb
 8012c4c:	08015a32 	.word	0x08015a32

08012c50 <_printf_common>:
 8012c50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012c54:	4616      	mov	r6, r2
 8012c56:	4699      	mov	r9, r3
 8012c58:	688a      	ldr	r2, [r1, #8]
 8012c5a:	690b      	ldr	r3, [r1, #16]
 8012c5c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8012c60:	4293      	cmp	r3, r2
 8012c62:	bfb8      	it	lt
 8012c64:	4613      	movlt	r3, r2
 8012c66:	6033      	str	r3, [r6, #0]
 8012c68:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8012c6c:	4607      	mov	r7, r0
 8012c6e:	460c      	mov	r4, r1
 8012c70:	b10a      	cbz	r2, 8012c76 <_printf_common+0x26>
 8012c72:	3301      	adds	r3, #1
 8012c74:	6033      	str	r3, [r6, #0]
 8012c76:	6823      	ldr	r3, [r4, #0]
 8012c78:	0699      	lsls	r1, r3, #26
 8012c7a:	bf42      	ittt	mi
 8012c7c:	6833      	ldrmi	r3, [r6, #0]
 8012c7e:	3302      	addmi	r3, #2
 8012c80:	6033      	strmi	r3, [r6, #0]
 8012c82:	6825      	ldr	r5, [r4, #0]
 8012c84:	f015 0506 	ands.w	r5, r5, #6
 8012c88:	d106      	bne.n	8012c98 <_printf_common+0x48>
 8012c8a:	f104 0a19 	add.w	sl, r4, #25
 8012c8e:	68e3      	ldr	r3, [r4, #12]
 8012c90:	6832      	ldr	r2, [r6, #0]
 8012c92:	1a9b      	subs	r3, r3, r2
 8012c94:	42ab      	cmp	r3, r5
 8012c96:	dc26      	bgt.n	8012ce6 <_printf_common+0x96>
 8012c98:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8012c9c:	1e13      	subs	r3, r2, #0
 8012c9e:	6822      	ldr	r2, [r4, #0]
 8012ca0:	bf18      	it	ne
 8012ca2:	2301      	movne	r3, #1
 8012ca4:	0692      	lsls	r2, r2, #26
 8012ca6:	d42b      	bmi.n	8012d00 <_printf_common+0xb0>
 8012ca8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8012cac:	4649      	mov	r1, r9
 8012cae:	4638      	mov	r0, r7
 8012cb0:	47c0      	blx	r8
 8012cb2:	3001      	adds	r0, #1
 8012cb4:	d01e      	beq.n	8012cf4 <_printf_common+0xa4>
 8012cb6:	6823      	ldr	r3, [r4, #0]
 8012cb8:	68e5      	ldr	r5, [r4, #12]
 8012cba:	6832      	ldr	r2, [r6, #0]
 8012cbc:	f003 0306 	and.w	r3, r3, #6
 8012cc0:	2b04      	cmp	r3, #4
 8012cc2:	bf08      	it	eq
 8012cc4:	1aad      	subeq	r5, r5, r2
 8012cc6:	68a3      	ldr	r3, [r4, #8]
 8012cc8:	6922      	ldr	r2, [r4, #16]
 8012cca:	bf0c      	ite	eq
 8012ccc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8012cd0:	2500      	movne	r5, #0
 8012cd2:	4293      	cmp	r3, r2
 8012cd4:	bfc4      	itt	gt
 8012cd6:	1a9b      	subgt	r3, r3, r2
 8012cd8:	18ed      	addgt	r5, r5, r3
 8012cda:	2600      	movs	r6, #0
 8012cdc:	341a      	adds	r4, #26
 8012cde:	42b5      	cmp	r5, r6
 8012ce0:	d11a      	bne.n	8012d18 <_printf_common+0xc8>
 8012ce2:	2000      	movs	r0, #0
 8012ce4:	e008      	b.n	8012cf8 <_printf_common+0xa8>
 8012ce6:	2301      	movs	r3, #1
 8012ce8:	4652      	mov	r2, sl
 8012cea:	4649      	mov	r1, r9
 8012cec:	4638      	mov	r0, r7
 8012cee:	47c0      	blx	r8
 8012cf0:	3001      	adds	r0, #1
 8012cf2:	d103      	bne.n	8012cfc <_printf_common+0xac>
 8012cf4:	f04f 30ff 	mov.w	r0, #4294967295
 8012cf8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012cfc:	3501      	adds	r5, #1
 8012cfe:	e7c6      	b.n	8012c8e <_printf_common+0x3e>
 8012d00:	18e1      	adds	r1, r4, r3
 8012d02:	1c5a      	adds	r2, r3, #1
 8012d04:	2030      	movs	r0, #48	; 0x30
 8012d06:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8012d0a:	4422      	add	r2, r4
 8012d0c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8012d10:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8012d14:	3302      	adds	r3, #2
 8012d16:	e7c7      	b.n	8012ca8 <_printf_common+0x58>
 8012d18:	2301      	movs	r3, #1
 8012d1a:	4622      	mov	r2, r4
 8012d1c:	4649      	mov	r1, r9
 8012d1e:	4638      	mov	r0, r7
 8012d20:	47c0      	blx	r8
 8012d22:	3001      	adds	r0, #1
 8012d24:	d0e6      	beq.n	8012cf4 <_printf_common+0xa4>
 8012d26:	3601      	adds	r6, #1
 8012d28:	e7d9      	b.n	8012cde <_printf_common+0x8e>
	...

08012d2c <_printf_i>:
 8012d2c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012d30:	7e0f      	ldrb	r7, [r1, #24]
 8012d32:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8012d34:	2f78      	cmp	r7, #120	; 0x78
 8012d36:	4691      	mov	r9, r2
 8012d38:	4680      	mov	r8, r0
 8012d3a:	460c      	mov	r4, r1
 8012d3c:	469a      	mov	sl, r3
 8012d3e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8012d42:	d807      	bhi.n	8012d54 <_printf_i+0x28>
 8012d44:	2f62      	cmp	r7, #98	; 0x62
 8012d46:	d80a      	bhi.n	8012d5e <_printf_i+0x32>
 8012d48:	2f00      	cmp	r7, #0
 8012d4a:	f000 80d8 	beq.w	8012efe <_printf_i+0x1d2>
 8012d4e:	2f58      	cmp	r7, #88	; 0x58
 8012d50:	f000 80a3 	beq.w	8012e9a <_printf_i+0x16e>
 8012d54:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012d58:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8012d5c:	e03a      	b.n	8012dd4 <_printf_i+0xa8>
 8012d5e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8012d62:	2b15      	cmp	r3, #21
 8012d64:	d8f6      	bhi.n	8012d54 <_printf_i+0x28>
 8012d66:	a101      	add	r1, pc, #4	; (adr r1, 8012d6c <_printf_i+0x40>)
 8012d68:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8012d6c:	08012dc5 	.word	0x08012dc5
 8012d70:	08012dd9 	.word	0x08012dd9
 8012d74:	08012d55 	.word	0x08012d55
 8012d78:	08012d55 	.word	0x08012d55
 8012d7c:	08012d55 	.word	0x08012d55
 8012d80:	08012d55 	.word	0x08012d55
 8012d84:	08012dd9 	.word	0x08012dd9
 8012d88:	08012d55 	.word	0x08012d55
 8012d8c:	08012d55 	.word	0x08012d55
 8012d90:	08012d55 	.word	0x08012d55
 8012d94:	08012d55 	.word	0x08012d55
 8012d98:	08012ee5 	.word	0x08012ee5
 8012d9c:	08012e09 	.word	0x08012e09
 8012da0:	08012ec7 	.word	0x08012ec7
 8012da4:	08012d55 	.word	0x08012d55
 8012da8:	08012d55 	.word	0x08012d55
 8012dac:	08012f07 	.word	0x08012f07
 8012db0:	08012d55 	.word	0x08012d55
 8012db4:	08012e09 	.word	0x08012e09
 8012db8:	08012d55 	.word	0x08012d55
 8012dbc:	08012d55 	.word	0x08012d55
 8012dc0:	08012ecf 	.word	0x08012ecf
 8012dc4:	682b      	ldr	r3, [r5, #0]
 8012dc6:	1d1a      	adds	r2, r3, #4
 8012dc8:	681b      	ldr	r3, [r3, #0]
 8012dca:	602a      	str	r2, [r5, #0]
 8012dcc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012dd0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8012dd4:	2301      	movs	r3, #1
 8012dd6:	e0a3      	b.n	8012f20 <_printf_i+0x1f4>
 8012dd8:	6820      	ldr	r0, [r4, #0]
 8012dda:	6829      	ldr	r1, [r5, #0]
 8012ddc:	0606      	lsls	r6, r0, #24
 8012dde:	f101 0304 	add.w	r3, r1, #4
 8012de2:	d50a      	bpl.n	8012dfa <_printf_i+0xce>
 8012de4:	680e      	ldr	r6, [r1, #0]
 8012de6:	602b      	str	r3, [r5, #0]
 8012de8:	2e00      	cmp	r6, #0
 8012dea:	da03      	bge.n	8012df4 <_printf_i+0xc8>
 8012dec:	232d      	movs	r3, #45	; 0x2d
 8012dee:	4276      	negs	r6, r6
 8012df0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012df4:	485e      	ldr	r0, [pc, #376]	; (8012f70 <_printf_i+0x244>)
 8012df6:	230a      	movs	r3, #10
 8012df8:	e019      	b.n	8012e2e <_printf_i+0x102>
 8012dfa:	680e      	ldr	r6, [r1, #0]
 8012dfc:	602b      	str	r3, [r5, #0]
 8012dfe:	f010 0f40 	tst.w	r0, #64	; 0x40
 8012e02:	bf18      	it	ne
 8012e04:	b236      	sxthne	r6, r6
 8012e06:	e7ef      	b.n	8012de8 <_printf_i+0xbc>
 8012e08:	682b      	ldr	r3, [r5, #0]
 8012e0a:	6820      	ldr	r0, [r4, #0]
 8012e0c:	1d19      	adds	r1, r3, #4
 8012e0e:	6029      	str	r1, [r5, #0]
 8012e10:	0601      	lsls	r1, r0, #24
 8012e12:	d501      	bpl.n	8012e18 <_printf_i+0xec>
 8012e14:	681e      	ldr	r6, [r3, #0]
 8012e16:	e002      	b.n	8012e1e <_printf_i+0xf2>
 8012e18:	0646      	lsls	r6, r0, #25
 8012e1a:	d5fb      	bpl.n	8012e14 <_printf_i+0xe8>
 8012e1c:	881e      	ldrh	r6, [r3, #0]
 8012e1e:	4854      	ldr	r0, [pc, #336]	; (8012f70 <_printf_i+0x244>)
 8012e20:	2f6f      	cmp	r7, #111	; 0x6f
 8012e22:	bf0c      	ite	eq
 8012e24:	2308      	moveq	r3, #8
 8012e26:	230a      	movne	r3, #10
 8012e28:	2100      	movs	r1, #0
 8012e2a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8012e2e:	6865      	ldr	r5, [r4, #4]
 8012e30:	60a5      	str	r5, [r4, #8]
 8012e32:	2d00      	cmp	r5, #0
 8012e34:	bfa2      	ittt	ge
 8012e36:	6821      	ldrge	r1, [r4, #0]
 8012e38:	f021 0104 	bicge.w	r1, r1, #4
 8012e3c:	6021      	strge	r1, [r4, #0]
 8012e3e:	b90e      	cbnz	r6, 8012e44 <_printf_i+0x118>
 8012e40:	2d00      	cmp	r5, #0
 8012e42:	d04d      	beq.n	8012ee0 <_printf_i+0x1b4>
 8012e44:	4615      	mov	r5, r2
 8012e46:	fbb6 f1f3 	udiv	r1, r6, r3
 8012e4a:	fb03 6711 	mls	r7, r3, r1, r6
 8012e4e:	5dc7      	ldrb	r7, [r0, r7]
 8012e50:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8012e54:	4637      	mov	r7, r6
 8012e56:	42bb      	cmp	r3, r7
 8012e58:	460e      	mov	r6, r1
 8012e5a:	d9f4      	bls.n	8012e46 <_printf_i+0x11a>
 8012e5c:	2b08      	cmp	r3, #8
 8012e5e:	d10b      	bne.n	8012e78 <_printf_i+0x14c>
 8012e60:	6823      	ldr	r3, [r4, #0]
 8012e62:	07de      	lsls	r6, r3, #31
 8012e64:	d508      	bpl.n	8012e78 <_printf_i+0x14c>
 8012e66:	6923      	ldr	r3, [r4, #16]
 8012e68:	6861      	ldr	r1, [r4, #4]
 8012e6a:	4299      	cmp	r1, r3
 8012e6c:	bfde      	ittt	le
 8012e6e:	2330      	movle	r3, #48	; 0x30
 8012e70:	f805 3c01 	strble.w	r3, [r5, #-1]
 8012e74:	f105 35ff 	addle.w	r5, r5, #4294967295
 8012e78:	1b52      	subs	r2, r2, r5
 8012e7a:	6122      	str	r2, [r4, #16]
 8012e7c:	f8cd a000 	str.w	sl, [sp]
 8012e80:	464b      	mov	r3, r9
 8012e82:	aa03      	add	r2, sp, #12
 8012e84:	4621      	mov	r1, r4
 8012e86:	4640      	mov	r0, r8
 8012e88:	f7ff fee2 	bl	8012c50 <_printf_common>
 8012e8c:	3001      	adds	r0, #1
 8012e8e:	d14c      	bne.n	8012f2a <_printf_i+0x1fe>
 8012e90:	f04f 30ff 	mov.w	r0, #4294967295
 8012e94:	b004      	add	sp, #16
 8012e96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012e9a:	4835      	ldr	r0, [pc, #212]	; (8012f70 <_printf_i+0x244>)
 8012e9c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8012ea0:	6829      	ldr	r1, [r5, #0]
 8012ea2:	6823      	ldr	r3, [r4, #0]
 8012ea4:	f851 6b04 	ldr.w	r6, [r1], #4
 8012ea8:	6029      	str	r1, [r5, #0]
 8012eaa:	061d      	lsls	r5, r3, #24
 8012eac:	d514      	bpl.n	8012ed8 <_printf_i+0x1ac>
 8012eae:	07df      	lsls	r7, r3, #31
 8012eb0:	bf44      	itt	mi
 8012eb2:	f043 0320 	orrmi.w	r3, r3, #32
 8012eb6:	6023      	strmi	r3, [r4, #0]
 8012eb8:	b91e      	cbnz	r6, 8012ec2 <_printf_i+0x196>
 8012eba:	6823      	ldr	r3, [r4, #0]
 8012ebc:	f023 0320 	bic.w	r3, r3, #32
 8012ec0:	6023      	str	r3, [r4, #0]
 8012ec2:	2310      	movs	r3, #16
 8012ec4:	e7b0      	b.n	8012e28 <_printf_i+0xfc>
 8012ec6:	6823      	ldr	r3, [r4, #0]
 8012ec8:	f043 0320 	orr.w	r3, r3, #32
 8012ecc:	6023      	str	r3, [r4, #0]
 8012ece:	2378      	movs	r3, #120	; 0x78
 8012ed0:	4828      	ldr	r0, [pc, #160]	; (8012f74 <_printf_i+0x248>)
 8012ed2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8012ed6:	e7e3      	b.n	8012ea0 <_printf_i+0x174>
 8012ed8:	0659      	lsls	r1, r3, #25
 8012eda:	bf48      	it	mi
 8012edc:	b2b6      	uxthmi	r6, r6
 8012ede:	e7e6      	b.n	8012eae <_printf_i+0x182>
 8012ee0:	4615      	mov	r5, r2
 8012ee2:	e7bb      	b.n	8012e5c <_printf_i+0x130>
 8012ee4:	682b      	ldr	r3, [r5, #0]
 8012ee6:	6826      	ldr	r6, [r4, #0]
 8012ee8:	6961      	ldr	r1, [r4, #20]
 8012eea:	1d18      	adds	r0, r3, #4
 8012eec:	6028      	str	r0, [r5, #0]
 8012eee:	0635      	lsls	r5, r6, #24
 8012ef0:	681b      	ldr	r3, [r3, #0]
 8012ef2:	d501      	bpl.n	8012ef8 <_printf_i+0x1cc>
 8012ef4:	6019      	str	r1, [r3, #0]
 8012ef6:	e002      	b.n	8012efe <_printf_i+0x1d2>
 8012ef8:	0670      	lsls	r0, r6, #25
 8012efa:	d5fb      	bpl.n	8012ef4 <_printf_i+0x1c8>
 8012efc:	8019      	strh	r1, [r3, #0]
 8012efe:	2300      	movs	r3, #0
 8012f00:	6123      	str	r3, [r4, #16]
 8012f02:	4615      	mov	r5, r2
 8012f04:	e7ba      	b.n	8012e7c <_printf_i+0x150>
 8012f06:	682b      	ldr	r3, [r5, #0]
 8012f08:	1d1a      	adds	r2, r3, #4
 8012f0a:	602a      	str	r2, [r5, #0]
 8012f0c:	681d      	ldr	r5, [r3, #0]
 8012f0e:	6862      	ldr	r2, [r4, #4]
 8012f10:	2100      	movs	r1, #0
 8012f12:	4628      	mov	r0, r5
 8012f14:	f7ed f964 	bl	80001e0 <memchr>
 8012f18:	b108      	cbz	r0, 8012f1e <_printf_i+0x1f2>
 8012f1a:	1b40      	subs	r0, r0, r5
 8012f1c:	6060      	str	r0, [r4, #4]
 8012f1e:	6863      	ldr	r3, [r4, #4]
 8012f20:	6123      	str	r3, [r4, #16]
 8012f22:	2300      	movs	r3, #0
 8012f24:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012f28:	e7a8      	b.n	8012e7c <_printf_i+0x150>
 8012f2a:	6923      	ldr	r3, [r4, #16]
 8012f2c:	462a      	mov	r2, r5
 8012f2e:	4649      	mov	r1, r9
 8012f30:	4640      	mov	r0, r8
 8012f32:	47d0      	blx	sl
 8012f34:	3001      	adds	r0, #1
 8012f36:	d0ab      	beq.n	8012e90 <_printf_i+0x164>
 8012f38:	6823      	ldr	r3, [r4, #0]
 8012f3a:	079b      	lsls	r3, r3, #30
 8012f3c:	d413      	bmi.n	8012f66 <_printf_i+0x23a>
 8012f3e:	68e0      	ldr	r0, [r4, #12]
 8012f40:	9b03      	ldr	r3, [sp, #12]
 8012f42:	4298      	cmp	r0, r3
 8012f44:	bfb8      	it	lt
 8012f46:	4618      	movlt	r0, r3
 8012f48:	e7a4      	b.n	8012e94 <_printf_i+0x168>
 8012f4a:	2301      	movs	r3, #1
 8012f4c:	4632      	mov	r2, r6
 8012f4e:	4649      	mov	r1, r9
 8012f50:	4640      	mov	r0, r8
 8012f52:	47d0      	blx	sl
 8012f54:	3001      	adds	r0, #1
 8012f56:	d09b      	beq.n	8012e90 <_printf_i+0x164>
 8012f58:	3501      	adds	r5, #1
 8012f5a:	68e3      	ldr	r3, [r4, #12]
 8012f5c:	9903      	ldr	r1, [sp, #12]
 8012f5e:	1a5b      	subs	r3, r3, r1
 8012f60:	42ab      	cmp	r3, r5
 8012f62:	dcf2      	bgt.n	8012f4a <_printf_i+0x21e>
 8012f64:	e7eb      	b.n	8012f3e <_printf_i+0x212>
 8012f66:	2500      	movs	r5, #0
 8012f68:	f104 0619 	add.w	r6, r4, #25
 8012f6c:	e7f5      	b.n	8012f5a <_printf_i+0x22e>
 8012f6e:	bf00      	nop
 8012f70:	08015a3d 	.word	0x08015a3d
 8012f74:	08015a4e 	.word	0x08015a4e

08012f78 <iprintf>:
 8012f78:	b40f      	push	{r0, r1, r2, r3}
 8012f7a:	4b0a      	ldr	r3, [pc, #40]	; (8012fa4 <iprintf+0x2c>)
 8012f7c:	b513      	push	{r0, r1, r4, lr}
 8012f7e:	681c      	ldr	r4, [r3, #0]
 8012f80:	b124      	cbz	r4, 8012f8c <iprintf+0x14>
 8012f82:	69a3      	ldr	r3, [r4, #24]
 8012f84:	b913      	cbnz	r3, 8012f8c <iprintf+0x14>
 8012f86:	4620      	mov	r0, r4
 8012f88:	f7ff fb5c 	bl	8012644 <__sinit>
 8012f8c:	ab05      	add	r3, sp, #20
 8012f8e:	9a04      	ldr	r2, [sp, #16]
 8012f90:	68a1      	ldr	r1, [r4, #8]
 8012f92:	9301      	str	r3, [sp, #4]
 8012f94:	4620      	mov	r0, r4
 8012f96:	f7ff fd2b 	bl	80129f0 <_vfiprintf_r>
 8012f9a:	b002      	add	sp, #8
 8012f9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012fa0:	b004      	add	sp, #16
 8012fa2:	4770      	bx	lr
 8012fa4:	20000054 	.word	0x20000054

08012fa8 <_puts_r>:
 8012fa8:	b570      	push	{r4, r5, r6, lr}
 8012faa:	460e      	mov	r6, r1
 8012fac:	4605      	mov	r5, r0
 8012fae:	b118      	cbz	r0, 8012fb8 <_puts_r+0x10>
 8012fb0:	6983      	ldr	r3, [r0, #24]
 8012fb2:	b90b      	cbnz	r3, 8012fb8 <_puts_r+0x10>
 8012fb4:	f7ff fb46 	bl	8012644 <__sinit>
 8012fb8:	69ab      	ldr	r3, [r5, #24]
 8012fba:	68ac      	ldr	r4, [r5, #8]
 8012fbc:	b913      	cbnz	r3, 8012fc4 <_puts_r+0x1c>
 8012fbe:	4628      	mov	r0, r5
 8012fc0:	f7ff fb40 	bl	8012644 <__sinit>
 8012fc4:	4b2c      	ldr	r3, [pc, #176]	; (8013078 <_puts_r+0xd0>)
 8012fc6:	429c      	cmp	r4, r3
 8012fc8:	d120      	bne.n	801300c <_puts_r+0x64>
 8012fca:	686c      	ldr	r4, [r5, #4]
 8012fcc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012fce:	07db      	lsls	r3, r3, #31
 8012fd0:	d405      	bmi.n	8012fde <_puts_r+0x36>
 8012fd2:	89a3      	ldrh	r3, [r4, #12]
 8012fd4:	0598      	lsls	r0, r3, #22
 8012fd6:	d402      	bmi.n	8012fde <_puts_r+0x36>
 8012fd8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012fda:	f7ff fc08 	bl	80127ee <__retarget_lock_acquire_recursive>
 8012fde:	89a3      	ldrh	r3, [r4, #12]
 8012fe0:	0719      	lsls	r1, r3, #28
 8012fe2:	d51d      	bpl.n	8013020 <_puts_r+0x78>
 8012fe4:	6923      	ldr	r3, [r4, #16]
 8012fe6:	b1db      	cbz	r3, 8013020 <_puts_r+0x78>
 8012fe8:	3e01      	subs	r6, #1
 8012fea:	68a3      	ldr	r3, [r4, #8]
 8012fec:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8012ff0:	3b01      	subs	r3, #1
 8012ff2:	60a3      	str	r3, [r4, #8]
 8012ff4:	bb39      	cbnz	r1, 8013046 <_puts_r+0x9e>
 8012ff6:	2b00      	cmp	r3, #0
 8012ff8:	da38      	bge.n	801306c <_puts_r+0xc4>
 8012ffa:	4622      	mov	r2, r4
 8012ffc:	210a      	movs	r1, #10
 8012ffe:	4628      	mov	r0, r5
 8013000:	f000 f9de 	bl	80133c0 <__swbuf_r>
 8013004:	3001      	adds	r0, #1
 8013006:	d011      	beq.n	801302c <_puts_r+0x84>
 8013008:	250a      	movs	r5, #10
 801300a:	e011      	b.n	8013030 <_puts_r+0x88>
 801300c:	4b1b      	ldr	r3, [pc, #108]	; (801307c <_puts_r+0xd4>)
 801300e:	429c      	cmp	r4, r3
 8013010:	d101      	bne.n	8013016 <_puts_r+0x6e>
 8013012:	68ac      	ldr	r4, [r5, #8]
 8013014:	e7da      	b.n	8012fcc <_puts_r+0x24>
 8013016:	4b1a      	ldr	r3, [pc, #104]	; (8013080 <_puts_r+0xd8>)
 8013018:	429c      	cmp	r4, r3
 801301a:	bf08      	it	eq
 801301c:	68ec      	ldreq	r4, [r5, #12]
 801301e:	e7d5      	b.n	8012fcc <_puts_r+0x24>
 8013020:	4621      	mov	r1, r4
 8013022:	4628      	mov	r0, r5
 8013024:	f000 fa30 	bl	8013488 <__swsetup_r>
 8013028:	2800      	cmp	r0, #0
 801302a:	d0dd      	beq.n	8012fe8 <_puts_r+0x40>
 801302c:	f04f 35ff 	mov.w	r5, #4294967295
 8013030:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013032:	07da      	lsls	r2, r3, #31
 8013034:	d405      	bmi.n	8013042 <_puts_r+0x9a>
 8013036:	89a3      	ldrh	r3, [r4, #12]
 8013038:	059b      	lsls	r3, r3, #22
 801303a:	d402      	bmi.n	8013042 <_puts_r+0x9a>
 801303c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801303e:	f7ff fbd7 	bl	80127f0 <__retarget_lock_release_recursive>
 8013042:	4628      	mov	r0, r5
 8013044:	bd70      	pop	{r4, r5, r6, pc}
 8013046:	2b00      	cmp	r3, #0
 8013048:	da04      	bge.n	8013054 <_puts_r+0xac>
 801304a:	69a2      	ldr	r2, [r4, #24]
 801304c:	429a      	cmp	r2, r3
 801304e:	dc06      	bgt.n	801305e <_puts_r+0xb6>
 8013050:	290a      	cmp	r1, #10
 8013052:	d004      	beq.n	801305e <_puts_r+0xb6>
 8013054:	6823      	ldr	r3, [r4, #0]
 8013056:	1c5a      	adds	r2, r3, #1
 8013058:	6022      	str	r2, [r4, #0]
 801305a:	7019      	strb	r1, [r3, #0]
 801305c:	e7c5      	b.n	8012fea <_puts_r+0x42>
 801305e:	4622      	mov	r2, r4
 8013060:	4628      	mov	r0, r5
 8013062:	f000 f9ad 	bl	80133c0 <__swbuf_r>
 8013066:	3001      	adds	r0, #1
 8013068:	d1bf      	bne.n	8012fea <_puts_r+0x42>
 801306a:	e7df      	b.n	801302c <_puts_r+0x84>
 801306c:	6823      	ldr	r3, [r4, #0]
 801306e:	250a      	movs	r5, #10
 8013070:	1c5a      	adds	r2, r3, #1
 8013072:	6022      	str	r2, [r4, #0]
 8013074:	701d      	strb	r5, [r3, #0]
 8013076:	e7db      	b.n	8013030 <_puts_r+0x88>
 8013078:	080159e8 	.word	0x080159e8
 801307c:	08015a08 	.word	0x08015a08
 8013080:	080159c8 	.word	0x080159c8

08013084 <puts>:
 8013084:	4b02      	ldr	r3, [pc, #8]	; (8013090 <puts+0xc>)
 8013086:	4601      	mov	r1, r0
 8013088:	6818      	ldr	r0, [r3, #0]
 801308a:	f7ff bf8d 	b.w	8012fa8 <_puts_r>
 801308e:	bf00      	nop
 8013090:	20000054 	.word	0x20000054

08013094 <cleanup_glue>:
 8013094:	b538      	push	{r3, r4, r5, lr}
 8013096:	460c      	mov	r4, r1
 8013098:	6809      	ldr	r1, [r1, #0]
 801309a:	4605      	mov	r5, r0
 801309c:	b109      	cbz	r1, 80130a2 <cleanup_glue+0xe>
 801309e:	f7ff fff9 	bl	8013094 <cleanup_glue>
 80130a2:	4621      	mov	r1, r4
 80130a4:	4628      	mov	r0, r5
 80130a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80130aa:	f000 bbc1 	b.w	8013830 <_free_r>
	...

080130b0 <_reclaim_reent>:
 80130b0:	4b2c      	ldr	r3, [pc, #176]	; (8013164 <_reclaim_reent+0xb4>)
 80130b2:	681b      	ldr	r3, [r3, #0]
 80130b4:	4283      	cmp	r3, r0
 80130b6:	b570      	push	{r4, r5, r6, lr}
 80130b8:	4604      	mov	r4, r0
 80130ba:	d051      	beq.n	8013160 <_reclaim_reent+0xb0>
 80130bc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80130be:	b143      	cbz	r3, 80130d2 <_reclaim_reent+0x22>
 80130c0:	68db      	ldr	r3, [r3, #12]
 80130c2:	2b00      	cmp	r3, #0
 80130c4:	d14a      	bne.n	801315c <_reclaim_reent+0xac>
 80130c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80130c8:	6819      	ldr	r1, [r3, #0]
 80130ca:	b111      	cbz	r1, 80130d2 <_reclaim_reent+0x22>
 80130cc:	4620      	mov	r0, r4
 80130ce:	f000 fbaf 	bl	8013830 <_free_r>
 80130d2:	6961      	ldr	r1, [r4, #20]
 80130d4:	b111      	cbz	r1, 80130dc <_reclaim_reent+0x2c>
 80130d6:	4620      	mov	r0, r4
 80130d8:	f000 fbaa 	bl	8013830 <_free_r>
 80130dc:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80130de:	b111      	cbz	r1, 80130e6 <_reclaim_reent+0x36>
 80130e0:	4620      	mov	r0, r4
 80130e2:	f000 fba5 	bl	8013830 <_free_r>
 80130e6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80130e8:	b111      	cbz	r1, 80130f0 <_reclaim_reent+0x40>
 80130ea:	4620      	mov	r0, r4
 80130ec:	f000 fba0 	bl	8013830 <_free_r>
 80130f0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80130f2:	b111      	cbz	r1, 80130fa <_reclaim_reent+0x4a>
 80130f4:	4620      	mov	r0, r4
 80130f6:	f000 fb9b 	bl	8013830 <_free_r>
 80130fa:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80130fc:	b111      	cbz	r1, 8013104 <_reclaim_reent+0x54>
 80130fe:	4620      	mov	r0, r4
 8013100:	f000 fb96 	bl	8013830 <_free_r>
 8013104:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8013106:	b111      	cbz	r1, 801310e <_reclaim_reent+0x5e>
 8013108:	4620      	mov	r0, r4
 801310a:	f000 fb91 	bl	8013830 <_free_r>
 801310e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8013110:	b111      	cbz	r1, 8013118 <_reclaim_reent+0x68>
 8013112:	4620      	mov	r0, r4
 8013114:	f000 fb8c 	bl	8013830 <_free_r>
 8013118:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801311a:	b111      	cbz	r1, 8013122 <_reclaim_reent+0x72>
 801311c:	4620      	mov	r0, r4
 801311e:	f000 fb87 	bl	8013830 <_free_r>
 8013122:	69a3      	ldr	r3, [r4, #24]
 8013124:	b1e3      	cbz	r3, 8013160 <_reclaim_reent+0xb0>
 8013126:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8013128:	4620      	mov	r0, r4
 801312a:	4798      	blx	r3
 801312c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801312e:	b1b9      	cbz	r1, 8013160 <_reclaim_reent+0xb0>
 8013130:	4620      	mov	r0, r4
 8013132:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013136:	f7ff bfad 	b.w	8013094 <cleanup_glue>
 801313a:	5949      	ldr	r1, [r1, r5]
 801313c:	b941      	cbnz	r1, 8013150 <_reclaim_reent+0xa0>
 801313e:	3504      	adds	r5, #4
 8013140:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013142:	2d80      	cmp	r5, #128	; 0x80
 8013144:	68d9      	ldr	r1, [r3, #12]
 8013146:	d1f8      	bne.n	801313a <_reclaim_reent+0x8a>
 8013148:	4620      	mov	r0, r4
 801314a:	f000 fb71 	bl	8013830 <_free_r>
 801314e:	e7ba      	b.n	80130c6 <_reclaim_reent+0x16>
 8013150:	680e      	ldr	r6, [r1, #0]
 8013152:	4620      	mov	r0, r4
 8013154:	f000 fb6c 	bl	8013830 <_free_r>
 8013158:	4631      	mov	r1, r6
 801315a:	e7ef      	b.n	801313c <_reclaim_reent+0x8c>
 801315c:	2500      	movs	r5, #0
 801315e:	e7ef      	b.n	8013140 <_reclaim_reent+0x90>
 8013160:	bd70      	pop	{r4, r5, r6, pc}
 8013162:	bf00      	nop
 8013164:	20000054 	.word	0x20000054

08013168 <_sbrk_r>:
 8013168:	b538      	push	{r3, r4, r5, lr}
 801316a:	4d06      	ldr	r5, [pc, #24]	; (8013184 <_sbrk_r+0x1c>)
 801316c:	2300      	movs	r3, #0
 801316e:	4604      	mov	r4, r0
 8013170:	4608      	mov	r0, r1
 8013172:	602b      	str	r3, [r5, #0]
 8013174:	f7ef fad4 	bl	8002720 <_sbrk>
 8013178:	1c43      	adds	r3, r0, #1
 801317a:	d102      	bne.n	8013182 <_sbrk_r+0x1a>
 801317c:	682b      	ldr	r3, [r5, #0]
 801317e:	b103      	cbz	r3, 8013182 <_sbrk_r+0x1a>
 8013180:	6023      	str	r3, [r4, #0]
 8013182:	bd38      	pop	{r3, r4, r5, pc}
 8013184:	20004b3c 	.word	0x20004b3c

08013188 <sniprintf>:
 8013188:	b40c      	push	{r2, r3}
 801318a:	b530      	push	{r4, r5, lr}
 801318c:	4b17      	ldr	r3, [pc, #92]	; (80131ec <sniprintf+0x64>)
 801318e:	1e0c      	subs	r4, r1, #0
 8013190:	681d      	ldr	r5, [r3, #0]
 8013192:	b09d      	sub	sp, #116	; 0x74
 8013194:	da08      	bge.n	80131a8 <sniprintf+0x20>
 8013196:	238b      	movs	r3, #139	; 0x8b
 8013198:	602b      	str	r3, [r5, #0]
 801319a:	f04f 30ff 	mov.w	r0, #4294967295
 801319e:	b01d      	add	sp, #116	; 0x74
 80131a0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80131a4:	b002      	add	sp, #8
 80131a6:	4770      	bx	lr
 80131a8:	f44f 7302 	mov.w	r3, #520	; 0x208
 80131ac:	f8ad 3014 	strh.w	r3, [sp, #20]
 80131b0:	bf14      	ite	ne
 80131b2:	f104 33ff 	addne.w	r3, r4, #4294967295
 80131b6:	4623      	moveq	r3, r4
 80131b8:	9304      	str	r3, [sp, #16]
 80131ba:	9307      	str	r3, [sp, #28]
 80131bc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80131c0:	9002      	str	r0, [sp, #8]
 80131c2:	9006      	str	r0, [sp, #24]
 80131c4:	f8ad 3016 	strh.w	r3, [sp, #22]
 80131c8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80131ca:	ab21      	add	r3, sp, #132	; 0x84
 80131cc:	a902      	add	r1, sp, #8
 80131ce:	4628      	mov	r0, r5
 80131d0:	9301      	str	r3, [sp, #4]
 80131d2:	f000 fc03 	bl	80139dc <_svfiprintf_r>
 80131d6:	1c43      	adds	r3, r0, #1
 80131d8:	bfbc      	itt	lt
 80131da:	238b      	movlt	r3, #139	; 0x8b
 80131dc:	602b      	strlt	r3, [r5, #0]
 80131de:	2c00      	cmp	r4, #0
 80131e0:	d0dd      	beq.n	801319e <sniprintf+0x16>
 80131e2:	9b02      	ldr	r3, [sp, #8]
 80131e4:	2200      	movs	r2, #0
 80131e6:	701a      	strb	r2, [r3, #0]
 80131e8:	e7d9      	b.n	801319e <sniprintf+0x16>
 80131ea:	bf00      	nop
 80131ec:	20000054 	.word	0x20000054

080131f0 <siprintf>:
 80131f0:	b40e      	push	{r1, r2, r3}
 80131f2:	b500      	push	{lr}
 80131f4:	b09c      	sub	sp, #112	; 0x70
 80131f6:	ab1d      	add	r3, sp, #116	; 0x74
 80131f8:	9002      	str	r0, [sp, #8]
 80131fa:	9006      	str	r0, [sp, #24]
 80131fc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8013200:	4809      	ldr	r0, [pc, #36]	; (8013228 <siprintf+0x38>)
 8013202:	9107      	str	r1, [sp, #28]
 8013204:	9104      	str	r1, [sp, #16]
 8013206:	4909      	ldr	r1, [pc, #36]	; (801322c <siprintf+0x3c>)
 8013208:	f853 2b04 	ldr.w	r2, [r3], #4
 801320c:	9105      	str	r1, [sp, #20]
 801320e:	6800      	ldr	r0, [r0, #0]
 8013210:	9301      	str	r3, [sp, #4]
 8013212:	a902      	add	r1, sp, #8
 8013214:	f000 fbe2 	bl	80139dc <_svfiprintf_r>
 8013218:	9b02      	ldr	r3, [sp, #8]
 801321a:	2200      	movs	r2, #0
 801321c:	701a      	strb	r2, [r3, #0]
 801321e:	b01c      	add	sp, #112	; 0x70
 8013220:	f85d eb04 	ldr.w	lr, [sp], #4
 8013224:	b003      	add	sp, #12
 8013226:	4770      	bx	lr
 8013228:	20000054 	.word	0x20000054
 801322c:	ffff0208 	.word	0xffff0208

08013230 <__sread>:
 8013230:	b510      	push	{r4, lr}
 8013232:	460c      	mov	r4, r1
 8013234:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013238:	f000 fcd0 	bl	8013bdc <_read_r>
 801323c:	2800      	cmp	r0, #0
 801323e:	bfab      	itete	ge
 8013240:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8013242:	89a3      	ldrhlt	r3, [r4, #12]
 8013244:	181b      	addge	r3, r3, r0
 8013246:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801324a:	bfac      	ite	ge
 801324c:	6563      	strge	r3, [r4, #84]	; 0x54
 801324e:	81a3      	strhlt	r3, [r4, #12]
 8013250:	bd10      	pop	{r4, pc}

08013252 <__swrite>:
 8013252:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013256:	461f      	mov	r7, r3
 8013258:	898b      	ldrh	r3, [r1, #12]
 801325a:	05db      	lsls	r3, r3, #23
 801325c:	4605      	mov	r5, r0
 801325e:	460c      	mov	r4, r1
 8013260:	4616      	mov	r6, r2
 8013262:	d505      	bpl.n	8013270 <__swrite+0x1e>
 8013264:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013268:	2302      	movs	r3, #2
 801326a:	2200      	movs	r2, #0
 801326c:	f000 fa54 	bl	8013718 <_lseek_r>
 8013270:	89a3      	ldrh	r3, [r4, #12]
 8013272:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013276:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801327a:	81a3      	strh	r3, [r4, #12]
 801327c:	4632      	mov	r2, r6
 801327e:	463b      	mov	r3, r7
 8013280:	4628      	mov	r0, r5
 8013282:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013286:	f000 b8ed 	b.w	8013464 <_write_r>

0801328a <__sseek>:
 801328a:	b510      	push	{r4, lr}
 801328c:	460c      	mov	r4, r1
 801328e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013292:	f000 fa41 	bl	8013718 <_lseek_r>
 8013296:	1c43      	adds	r3, r0, #1
 8013298:	89a3      	ldrh	r3, [r4, #12]
 801329a:	bf15      	itete	ne
 801329c:	6560      	strne	r0, [r4, #84]	; 0x54
 801329e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80132a2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80132a6:	81a3      	strheq	r3, [r4, #12]
 80132a8:	bf18      	it	ne
 80132aa:	81a3      	strhne	r3, [r4, #12]
 80132ac:	bd10      	pop	{r4, pc}

080132ae <__sclose>:
 80132ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80132b2:	f000 b95f 	b.w	8013574 <_close_r>

080132b6 <strncpy>:
 80132b6:	b510      	push	{r4, lr}
 80132b8:	3901      	subs	r1, #1
 80132ba:	4603      	mov	r3, r0
 80132bc:	b132      	cbz	r2, 80132cc <strncpy+0x16>
 80132be:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80132c2:	f803 4b01 	strb.w	r4, [r3], #1
 80132c6:	3a01      	subs	r2, #1
 80132c8:	2c00      	cmp	r4, #0
 80132ca:	d1f7      	bne.n	80132bc <strncpy+0x6>
 80132cc:	441a      	add	r2, r3
 80132ce:	2100      	movs	r1, #0
 80132d0:	4293      	cmp	r3, r2
 80132d2:	d100      	bne.n	80132d6 <strncpy+0x20>
 80132d4:	bd10      	pop	{r4, pc}
 80132d6:	f803 1b01 	strb.w	r1, [r3], #1
 80132da:	e7f9      	b.n	80132d0 <strncpy+0x1a>

080132dc <strstr>:
 80132dc:	780a      	ldrb	r2, [r1, #0]
 80132de:	b570      	push	{r4, r5, r6, lr}
 80132e0:	b96a      	cbnz	r2, 80132fe <strstr+0x22>
 80132e2:	bd70      	pop	{r4, r5, r6, pc}
 80132e4:	429a      	cmp	r2, r3
 80132e6:	d109      	bne.n	80132fc <strstr+0x20>
 80132e8:	460c      	mov	r4, r1
 80132ea:	4605      	mov	r5, r0
 80132ec:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80132f0:	2b00      	cmp	r3, #0
 80132f2:	d0f6      	beq.n	80132e2 <strstr+0x6>
 80132f4:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 80132f8:	429e      	cmp	r6, r3
 80132fa:	d0f7      	beq.n	80132ec <strstr+0x10>
 80132fc:	3001      	adds	r0, #1
 80132fe:	7803      	ldrb	r3, [r0, #0]
 8013300:	2b00      	cmp	r3, #0
 8013302:	d1ef      	bne.n	80132e4 <strstr+0x8>
 8013304:	4618      	mov	r0, r3
 8013306:	e7ec      	b.n	80132e2 <strstr+0x6>

08013308 <strtok>:
 8013308:	4b16      	ldr	r3, [pc, #88]	; (8013364 <strtok+0x5c>)
 801330a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801330c:	681e      	ldr	r6, [r3, #0]
 801330e:	6db4      	ldr	r4, [r6, #88]	; 0x58
 8013310:	4605      	mov	r5, r0
 8013312:	b9fc      	cbnz	r4, 8013354 <strtok+0x4c>
 8013314:	2050      	movs	r0, #80	; 0x50
 8013316:	9101      	str	r1, [sp, #4]
 8013318:	f000 fa76 	bl	8013808 <malloc>
 801331c:	9901      	ldr	r1, [sp, #4]
 801331e:	65b0      	str	r0, [r6, #88]	; 0x58
 8013320:	4602      	mov	r2, r0
 8013322:	b920      	cbnz	r0, 801332e <strtok+0x26>
 8013324:	4b10      	ldr	r3, [pc, #64]	; (8013368 <strtok+0x60>)
 8013326:	4811      	ldr	r0, [pc, #68]	; (801336c <strtok+0x64>)
 8013328:	2157      	movs	r1, #87	; 0x57
 801332a:	f7ff f90f 	bl	801254c <__assert_func>
 801332e:	e9c0 4400 	strd	r4, r4, [r0]
 8013332:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8013336:	e9c0 4404 	strd	r4, r4, [r0, #16]
 801333a:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 801333e:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8013342:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8013346:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 801334a:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 801334e:	6184      	str	r4, [r0, #24]
 8013350:	7704      	strb	r4, [r0, #28]
 8013352:	6244      	str	r4, [r0, #36]	; 0x24
 8013354:	6db2      	ldr	r2, [r6, #88]	; 0x58
 8013356:	2301      	movs	r3, #1
 8013358:	4628      	mov	r0, r5
 801335a:	b002      	add	sp, #8
 801335c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013360:	f000 b806 	b.w	8013370 <__strtok_r>
 8013364:	20000054 	.word	0x20000054
 8013368:	08015a5f 	.word	0x08015a5f
 801336c:	08015a76 	.word	0x08015a76

08013370 <__strtok_r>:
 8013370:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013372:	b908      	cbnz	r0, 8013378 <__strtok_r+0x8>
 8013374:	6810      	ldr	r0, [r2, #0]
 8013376:	b188      	cbz	r0, 801339c <__strtok_r+0x2c>
 8013378:	4604      	mov	r4, r0
 801337a:	4620      	mov	r0, r4
 801337c:	f814 5b01 	ldrb.w	r5, [r4], #1
 8013380:	460f      	mov	r7, r1
 8013382:	f817 6b01 	ldrb.w	r6, [r7], #1
 8013386:	b91e      	cbnz	r6, 8013390 <__strtok_r+0x20>
 8013388:	b965      	cbnz	r5, 80133a4 <__strtok_r+0x34>
 801338a:	6015      	str	r5, [r2, #0]
 801338c:	4628      	mov	r0, r5
 801338e:	e005      	b.n	801339c <__strtok_r+0x2c>
 8013390:	42b5      	cmp	r5, r6
 8013392:	d1f6      	bne.n	8013382 <__strtok_r+0x12>
 8013394:	2b00      	cmp	r3, #0
 8013396:	d1f0      	bne.n	801337a <__strtok_r+0xa>
 8013398:	6014      	str	r4, [r2, #0]
 801339a:	7003      	strb	r3, [r0, #0]
 801339c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801339e:	461c      	mov	r4, r3
 80133a0:	e00c      	b.n	80133bc <__strtok_r+0x4c>
 80133a2:	b915      	cbnz	r5, 80133aa <__strtok_r+0x3a>
 80133a4:	f814 3b01 	ldrb.w	r3, [r4], #1
 80133a8:	460e      	mov	r6, r1
 80133aa:	f816 5b01 	ldrb.w	r5, [r6], #1
 80133ae:	42ab      	cmp	r3, r5
 80133b0:	d1f7      	bne.n	80133a2 <__strtok_r+0x32>
 80133b2:	2b00      	cmp	r3, #0
 80133b4:	d0f3      	beq.n	801339e <__strtok_r+0x2e>
 80133b6:	2300      	movs	r3, #0
 80133b8:	f804 3c01 	strb.w	r3, [r4, #-1]
 80133bc:	6014      	str	r4, [r2, #0]
 80133be:	e7ed      	b.n	801339c <__strtok_r+0x2c>

080133c0 <__swbuf_r>:
 80133c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80133c2:	460e      	mov	r6, r1
 80133c4:	4614      	mov	r4, r2
 80133c6:	4605      	mov	r5, r0
 80133c8:	b118      	cbz	r0, 80133d2 <__swbuf_r+0x12>
 80133ca:	6983      	ldr	r3, [r0, #24]
 80133cc:	b90b      	cbnz	r3, 80133d2 <__swbuf_r+0x12>
 80133ce:	f7ff f939 	bl	8012644 <__sinit>
 80133d2:	4b21      	ldr	r3, [pc, #132]	; (8013458 <__swbuf_r+0x98>)
 80133d4:	429c      	cmp	r4, r3
 80133d6:	d12b      	bne.n	8013430 <__swbuf_r+0x70>
 80133d8:	686c      	ldr	r4, [r5, #4]
 80133da:	69a3      	ldr	r3, [r4, #24]
 80133dc:	60a3      	str	r3, [r4, #8]
 80133de:	89a3      	ldrh	r3, [r4, #12]
 80133e0:	071a      	lsls	r2, r3, #28
 80133e2:	d52f      	bpl.n	8013444 <__swbuf_r+0x84>
 80133e4:	6923      	ldr	r3, [r4, #16]
 80133e6:	b36b      	cbz	r3, 8013444 <__swbuf_r+0x84>
 80133e8:	6923      	ldr	r3, [r4, #16]
 80133ea:	6820      	ldr	r0, [r4, #0]
 80133ec:	1ac0      	subs	r0, r0, r3
 80133ee:	6963      	ldr	r3, [r4, #20]
 80133f0:	b2f6      	uxtb	r6, r6
 80133f2:	4283      	cmp	r3, r0
 80133f4:	4637      	mov	r7, r6
 80133f6:	dc04      	bgt.n	8013402 <__swbuf_r+0x42>
 80133f8:	4621      	mov	r1, r4
 80133fa:	4628      	mov	r0, r5
 80133fc:	f000 f950 	bl	80136a0 <_fflush_r>
 8013400:	bb30      	cbnz	r0, 8013450 <__swbuf_r+0x90>
 8013402:	68a3      	ldr	r3, [r4, #8]
 8013404:	3b01      	subs	r3, #1
 8013406:	60a3      	str	r3, [r4, #8]
 8013408:	6823      	ldr	r3, [r4, #0]
 801340a:	1c5a      	adds	r2, r3, #1
 801340c:	6022      	str	r2, [r4, #0]
 801340e:	701e      	strb	r6, [r3, #0]
 8013410:	6963      	ldr	r3, [r4, #20]
 8013412:	3001      	adds	r0, #1
 8013414:	4283      	cmp	r3, r0
 8013416:	d004      	beq.n	8013422 <__swbuf_r+0x62>
 8013418:	89a3      	ldrh	r3, [r4, #12]
 801341a:	07db      	lsls	r3, r3, #31
 801341c:	d506      	bpl.n	801342c <__swbuf_r+0x6c>
 801341e:	2e0a      	cmp	r6, #10
 8013420:	d104      	bne.n	801342c <__swbuf_r+0x6c>
 8013422:	4621      	mov	r1, r4
 8013424:	4628      	mov	r0, r5
 8013426:	f000 f93b 	bl	80136a0 <_fflush_r>
 801342a:	b988      	cbnz	r0, 8013450 <__swbuf_r+0x90>
 801342c:	4638      	mov	r0, r7
 801342e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013430:	4b0a      	ldr	r3, [pc, #40]	; (801345c <__swbuf_r+0x9c>)
 8013432:	429c      	cmp	r4, r3
 8013434:	d101      	bne.n	801343a <__swbuf_r+0x7a>
 8013436:	68ac      	ldr	r4, [r5, #8]
 8013438:	e7cf      	b.n	80133da <__swbuf_r+0x1a>
 801343a:	4b09      	ldr	r3, [pc, #36]	; (8013460 <__swbuf_r+0xa0>)
 801343c:	429c      	cmp	r4, r3
 801343e:	bf08      	it	eq
 8013440:	68ec      	ldreq	r4, [r5, #12]
 8013442:	e7ca      	b.n	80133da <__swbuf_r+0x1a>
 8013444:	4621      	mov	r1, r4
 8013446:	4628      	mov	r0, r5
 8013448:	f000 f81e 	bl	8013488 <__swsetup_r>
 801344c:	2800      	cmp	r0, #0
 801344e:	d0cb      	beq.n	80133e8 <__swbuf_r+0x28>
 8013450:	f04f 37ff 	mov.w	r7, #4294967295
 8013454:	e7ea      	b.n	801342c <__swbuf_r+0x6c>
 8013456:	bf00      	nop
 8013458:	080159e8 	.word	0x080159e8
 801345c:	08015a08 	.word	0x08015a08
 8013460:	080159c8 	.word	0x080159c8

08013464 <_write_r>:
 8013464:	b538      	push	{r3, r4, r5, lr}
 8013466:	4d07      	ldr	r5, [pc, #28]	; (8013484 <_write_r+0x20>)
 8013468:	4604      	mov	r4, r0
 801346a:	4608      	mov	r0, r1
 801346c:	4611      	mov	r1, r2
 801346e:	2200      	movs	r2, #0
 8013470:	602a      	str	r2, [r5, #0]
 8013472:	461a      	mov	r2, r3
 8013474:	f7ed fd7c 	bl	8000f70 <_write>
 8013478:	1c43      	adds	r3, r0, #1
 801347a:	d102      	bne.n	8013482 <_write_r+0x1e>
 801347c:	682b      	ldr	r3, [r5, #0]
 801347e:	b103      	cbz	r3, 8013482 <_write_r+0x1e>
 8013480:	6023      	str	r3, [r4, #0]
 8013482:	bd38      	pop	{r3, r4, r5, pc}
 8013484:	20004b3c 	.word	0x20004b3c

08013488 <__swsetup_r>:
 8013488:	4b32      	ldr	r3, [pc, #200]	; (8013554 <__swsetup_r+0xcc>)
 801348a:	b570      	push	{r4, r5, r6, lr}
 801348c:	681d      	ldr	r5, [r3, #0]
 801348e:	4606      	mov	r6, r0
 8013490:	460c      	mov	r4, r1
 8013492:	b125      	cbz	r5, 801349e <__swsetup_r+0x16>
 8013494:	69ab      	ldr	r3, [r5, #24]
 8013496:	b913      	cbnz	r3, 801349e <__swsetup_r+0x16>
 8013498:	4628      	mov	r0, r5
 801349a:	f7ff f8d3 	bl	8012644 <__sinit>
 801349e:	4b2e      	ldr	r3, [pc, #184]	; (8013558 <__swsetup_r+0xd0>)
 80134a0:	429c      	cmp	r4, r3
 80134a2:	d10f      	bne.n	80134c4 <__swsetup_r+0x3c>
 80134a4:	686c      	ldr	r4, [r5, #4]
 80134a6:	89a3      	ldrh	r3, [r4, #12]
 80134a8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80134ac:	0719      	lsls	r1, r3, #28
 80134ae:	d42c      	bmi.n	801350a <__swsetup_r+0x82>
 80134b0:	06dd      	lsls	r5, r3, #27
 80134b2:	d411      	bmi.n	80134d8 <__swsetup_r+0x50>
 80134b4:	2309      	movs	r3, #9
 80134b6:	6033      	str	r3, [r6, #0]
 80134b8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80134bc:	81a3      	strh	r3, [r4, #12]
 80134be:	f04f 30ff 	mov.w	r0, #4294967295
 80134c2:	e03e      	b.n	8013542 <__swsetup_r+0xba>
 80134c4:	4b25      	ldr	r3, [pc, #148]	; (801355c <__swsetup_r+0xd4>)
 80134c6:	429c      	cmp	r4, r3
 80134c8:	d101      	bne.n	80134ce <__swsetup_r+0x46>
 80134ca:	68ac      	ldr	r4, [r5, #8]
 80134cc:	e7eb      	b.n	80134a6 <__swsetup_r+0x1e>
 80134ce:	4b24      	ldr	r3, [pc, #144]	; (8013560 <__swsetup_r+0xd8>)
 80134d0:	429c      	cmp	r4, r3
 80134d2:	bf08      	it	eq
 80134d4:	68ec      	ldreq	r4, [r5, #12]
 80134d6:	e7e6      	b.n	80134a6 <__swsetup_r+0x1e>
 80134d8:	0758      	lsls	r0, r3, #29
 80134da:	d512      	bpl.n	8013502 <__swsetup_r+0x7a>
 80134dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80134de:	b141      	cbz	r1, 80134f2 <__swsetup_r+0x6a>
 80134e0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80134e4:	4299      	cmp	r1, r3
 80134e6:	d002      	beq.n	80134ee <__swsetup_r+0x66>
 80134e8:	4630      	mov	r0, r6
 80134ea:	f000 f9a1 	bl	8013830 <_free_r>
 80134ee:	2300      	movs	r3, #0
 80134f0:	6363      	str	r3, [r4, #52]	; 0x34
 80134f2:	89a3      	ldrh	r3, [r4, #12]
 80134f4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80134f8:	81a3      	strh	r3, [r4, #12]
 80134fa:	2300      	movs	r3, #0
 80134fc:	6063      	str	r3, [r4, #4]
 80134fe:	6923      	ldr	r3, [r4, #16]
 8013500:	6023      	str	r3, [r4, #0]
 8013502:	89a3      	ldrh	r3, [r4, #12]
 8013504:	f043 0308 	orr.w	r3, r3, #8
 8013508:	81a3      	strh	r3, [r4, #12]
 801350a:	6923      	ldr	r3, [r4, #16]
 801350c:	b94b      	cbnz	r3, 8013522 <__swsetup_r+0x9a>
 801350e:	89a3      	ldrh	r3, [r4, #12]
 8013510:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8013514:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013518:	d003      	beq.n	8013522 <__swsetup_r+0x9a>
 801351a:	4621      	mov	r1, r4
 801351c:	4630      	mov	r0, r6
 801351e:	f000 f933 	bl	8013788 <__smakebuf_r>
 8013522:	89a0      	ldrh	r0, [r4, #12]
 8013524:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8013528:	f010 0301 	ands.w	r3, r0, #1
 801352c:	d00a      	beq.n	8013544 <__swsetup_r+0xbc>
 801352e:	2300      	movs	r3, #0
 8013530:	60a3      	str	r3, [r4, #8]
 8013532:	6963      	ldr	r3, [r4, #20]
 8013534:	425b      	negs	r3, r3
 8013536:	61a3      	str	r3, [r4, #24]
 8013538:	6923      	ldr	r3, [r4, #16]
 801353a:	b943      	cbnz	r3, 801354e <__swsetup_r+0xc6>
 801353c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8013540:	d1ba      	bne.n	80134b8 <__swsetup_r+0x30>
 8013542:	bd70      	pop	{r4, r5, r6, pc}
 8013544:	0781      	lsls	r1, r0, #30
 8013546:	bf58      	it	pl
 8013548:	6963      	ldrpl	r3, [r4, #20]
 801354a:	60a3      	str	r3, [r4, #8]
 801354c:	e7f4      	b.n	8013538 <__swsetup_r+0xb0>
 801354e:	2000      	movs	r0, #0
 8013550:	e7f7      	b.n	8013542 <__swsetup_r+0xba>
 8013552:	bf00      	nop
 8013554:	20000054 	.word	0x20000054
 8013558:	080159e8 	.word	0x080159e8
 801355c:	08015a08 	.word	0x08015a08
 8013560:	080159c8 	.word	0x080159c8

08013564 <abort>:
 8013564:	b508      	push	{r3, lr}
 8013566:	2006      	movs	r0, #6
 8013568:	f000 fb72 	bl	8013c50 <raise>
 801356c:	2001      	movs	r0, #1
 801356e:	f7ef f87b 	bl	8002668 <_exit>
	...

08013574 <_close_r>:
 8013574:	b538      	push	{r3, r4, r5, lr}
 8013576:	4d06      	ldr	r5, [pc, #24]	; (8013590 <_close_r+0x1c>)
 8013578:	2300      	movs	r3, #0
 801357a:	4604      	mov	r4, r0
 801357c:	4608      	mov	r0, r1
 801357e:	602b      	str	r3, [r5, #0]
 8013580:	f7ef f899 	bl	80026b6 <_close>
 8013584:	1c43      	adds	r3, r0, #1
 8013586:	d102      	bne.n	801358e <_close_r+0x1a>
 8013588:	682b      	ldr	r3, [r5, #0]
 801358a:	b103      	cbz	r3, 801358e <_close_r+0x1a>
 801358c:	6023      	str	r3, [r4, #0]
 801358e:	bd38      	pop	{r3, r4, r5, pc}
 8013590:	20004b3c 	.word	0x20004b3c

08013594 <__sflush_r>:
 8013594:	898a      	ldrh	r2, [r1, #12]
 8013596:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801359a:	4605      	mov	r5, r0
 801359c:	0710      	lsls	r0, r2, #28
 801359e:	460c      	mov	r4, r1
 80135a0:	d458      	bmi.n	8013654 <__sflush_r+0xc0>
 80135a2:	684b      	ldr	r3, [r1, #4]
 80135a4:	2b00      	cmp	r3, #0
 80135a6:	dc05      	bgt.n	80135b4 <__sflush_r+0x20>
 80135a8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80135aa:	2b00      	cmp	r3, #0
 80135ac:	dc02      	bgt.n	80135b4 <__sflush_r+0x20>
 80135ae:	2000      	movs	r0, #0
 80135b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80135b4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80135b6:	2e00      	cmp	r6, #0
 80135b8:	d0f9      	beq.n	80135ae <__sflush_r+0x1a>
 80135ba:	2300      	movs	r3, #0
 80135bc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80135c0:	682f      	ldr	r7, [r5, #0]
 80135c2:	602b      	str	r3, [r5, #0]
 80135c4:	d032      	beq.n	801362c <__sflush_r+0x98>
 80135c6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80135c8:	89a3      	ldrh	r3, [r4, #12]
 80135ca:	075a      	lsls	r2, r3, #29
 80135cc:	d505      	bpl.n	80135da <__sflush_r+0x46>
 80135ce:	6863      	ldr	r3, [r4, #4]
 80135d0:	1ac0      	subs	r0, r0, r3
 80135d2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80135d4:	b10b      	cbz	r3, 80135da <__sflush_r+0x46>
 80135d6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80135d8:	1ac0      	subs	r0, r0, r3
 80135da:	2300      	movs	r3, #0
 80135dc:	4602      	mov	r2, r0
 80135de:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80135e0:	6a21      	ldr	r1, [r4, #32]
 80135e2:	4628      	mov	r0, r5
 80135e4:	47b0      	blx	r6
 80135e6:	1c43      	adds	r3, r0, #1
 80135e8:	89a3      	ldrh	r3, [r4, #12]
 80135ea:	d106      	bne.n	80135fa <__sflush_r+0x66>
 80135ec:	6829      	ldr	r1, [r5, #0]
 80135ee:	291d      	cmp	r1, #29
 80135f0:	d82c      	bhi.n	801364c <__sflush_r+0xb8>
 80135f2:	4a2a      	ldr	r2, [pc, #168]	; (801369c <__sflush_r+0x108>)
 80135f4:	40ca      	lsrs	r2, r1
 80135f6:	07d6      	lsls	r6, r2, #31
 80135f8:	d528      	bpl.n	801364c <__sflush_r+0xb8>
 80135fa:	2200      	movs	r2, #0
 80135fc:	6062      	str	r2, [r4, #4]
 80135fe:	04d9      	lsls	r1, r3, #19
 8013600:	6922      	ldr	r2, [r4, #16]
 8013602:	6022      	str	r2, [r4, #0]
 8013604:	d504      	bpl.n	8013610 <__sflush_r+0x7c>
 8013606:	1c42      	adds	r2, r0, #1
 8013608:	d101      	bne.n	801360e <__sflush_r+0x7a>
 801360a:	682b      	ldr	r3, [r5, #0]
 801360c:	b903      	cbnz	r3, 8013610 <__sflush_r+0x7c>
 801360e:	6560      	str	r0, [r4, #84]	; 0x54
 8013610:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013612:	602f      	str	r7, [r5, #0]
 8013614:	2900      	cmp	r1, #0
 8013616:	d0ca      	beq.n	80135ae <__sflush_r+0x1a>
 8013618:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801361c:	4299      	cmp	r1, r3
 801361e:	d002      	beq.n	8013626 <__sflush_r+0x92>
 8013620:	4628      	mov	r0, r5
 8013622:	f000 f905 	bl	8013830 <_free_r>
 8013626:	2000      	movs	r0, #0
 8013628:	6360      	str	r0, [r4, #52]	; 0x34
 801362a:	e7c1      	b.n	80135b0 <__sflush_r+0x1c>
 801362c:	6a21      	ldr	r1, [r4, #32]
 801362e:	2301      	movs	r3, #1
 8013630:	4628      	mov	r0, r5
 8013632:	47b0      	blx	r6
 8013634:	1c41      	adds	r1, r0, #1
 8013636:	d1c7      	bne.n	80135c8 <__sflush_r+0x34>
 8013638:	682b      	ldr	r3, [r5, #0]
 801363a:	2b00      	cmp	r3, #0
 801363c:	d0c4      	beq.n	80135c8 <__sflush_r+0x34>
 801363e:	2b1d      	cmp	r3, #29
 8013640:	d001      	beq.n	8013646 <__sflush_r+0xb2>
 8013642:	2b16      	cmp	r3, #22
 8013644:	d101      	bne.n	801364a <__sflush_r+0xb6>
 8013646:	602f      	str	r7, [r5, #0]
 8013648:	e7b1      	b.n	80135ae <__sflush_r+0x1a>
 801364a:	89a3      	ldrh	r3, [r4, #12]
 801364c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013650:	81a3      	strh	r3, [r4, #12]
 8013652:	e7ad      	b.n	80135b0 <__sflush_r+0x1c>
 8013654:	690f      	ldr	r7, [r1, #16]
 8013656:	2f00      	cmp	r7, #0
 8013658:	d0a9      	beq.n	80135ae <__sflush_r+0x1a>
 801365a:	0793      	lsls	r3, r2, #30
 801365c:	680e      	ldr	r6, [r1, #0]
 801365e:	bf08      	it	eq
 8013660:	694b      	ldreq	r3, [r1, #20]
 8013662:	600f      	str	r7, [r1, #0]
 8013664:	bf18      	it	ne
 8013666:	2300      	movne	r3, #0
 8013668:	eba6 0807 	sub.w	r8, r6, r7
 801366c:	608b      	str	r3, [r1, #8]
 801366e:	f1b8 0f00 	cmp.w	r8, #0
 8013672:	dd9c      	ble.n	80135ae <__sflush_r+0x1a>
 8013674:	6a21      	ldr	r1, [r4, #32]
 8013676:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8013678:	4643      	mov	r3, r8
 801367a:	463a      	mov	r2, r7
 801367c:	4628      	mov	r0, r5
 801367e:	47b0      	blx	r6
 8013680:	2800      	cmp	r0, #0
 8013682:	dc06      	bgt.n	8013692 <__sflush_r+0xfe>
 8013684:	89a3      	ldrh	r3, [r4, #12]
 8013686:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801368a:	81a3      	strh	r3, [r4, #12]
 801368c:	f04f 30ff 	mov.w	r0, #4294967295
 8013690:	e78e      	b.n	80135b0 <__sflush_r+0x1c>
 8013692:	4407      	add	r7, r0
 8013694:	eba8 0800 	sub.w	r8, r8, r0
 8013698:	e7e9      	b.n	801366e <__sflush_r+0xda>
 801369a:	bf00      	nop
 801369c:	20400001 	.word	0x20400001

080136a0 <_fflush_r>:
 80136a0:	b538      	push	{r3, r4, r5, lr}
 80136a2:	690b      	ldr	r3, [r1, #16]
 80136a4:	4605      	mov	r5, r0
 80136a6:	460c      	mov	r4, r1
 80136a8:	b913      	cbnz	r3, 80136b0 <_fflush_r+0x10>
 80136aa:	2500      	movs	r5, #0
 80136ac:	4628      	mov	r0, r5
 80136ae:	bd38      	pop	{r3, r4, r5, pc}
 80136b0:	b118      	cbz	r0, 80136ba <_fflush_r+0x1a>
 80136b2:	6983      	ldr	r3, [r0, #24]
 80136b4:	b90b      	cbnz	r3, 80136ba <_fflush_r+0x1a>
 80136b6:	f7fe ffc5 	bl	8012644 <__sinit>
 80136ba:	4b14      	ldr	r3, [pc, #80]	; (801370c <_fflush_r+0x6c>)
 80136bc:	429c      	cmp	r4, r3
 80136be:	d11b      	bne.n	80136f8 <_fflush_r+0x58>
 80136c0:	686c      	ldr	r4, [r5, #4]
 80136c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80136c6:	2b00      	cmp	r3, #0
 80136c8:	d0ef      	beq.n	80136aa <_fflush_r+0xa>
 80136ca:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80136cc:	07d0      	lsls	r0, r2, #31
 80136ce:	d404      	bmi.n	80136da <_fflush_r+0x3a>
 80136d0:	0599      	lsls	r1, r3, #22
 80136d2:	d402      	bmi.n	80136da <_fflush_r+0x3a>
 80136d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80136d6:	f7ff f88a 	bl	80127ee <__retarget_lock_acquire_recursive>
 80136da:	4628      	mov	r0, r5
 80136dc:	4621      	mov	r1, r4
 80136de:	f7ff ff59 	bl	8013594 <__sflush_r>
 80136e2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80136e4:	07da      	lsls	r2, r3, #31
 80136e6:	4605      	mov	r5, r0
 80136e8:	d4e0      	bmi.n	80136ac <_fflush_r+0xc>
 80136ea:	89a3      	ldrh	r3, [r4, #12]
 80136ec:	059b      	lsls	r3, r3, #22
 80136ee:	d4dd      	bmi.n	80136ac <_fflush_r+0xc>
 80136f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80136f2:	f7ff f87d 	bl	80127f0 <__retarget_lock_release_recursive>
 80136f6:	e7d9      	b.n	80136ac <_fflush_r+0xc>
 80136f8:	4b05      	ldr	r3, [pc, #20]	; (8013710 <_fflush_r+0x70>)
 80136fa:	429c      	cmp	r4, r3
 80136fc:	d101      	bne.n	8013702 <_fflush_r+0x62>
 80136fe:	68ac      	ldr	r4, [r5, #8]
 8013700:	e7df      	b.n	80136c2 <_fflush_r+0x22>
 8013702:	4b04      	ldr	r3, [pc, #16]	; (8013714 <_fflush_r+0x74>)
 8013704:	429c      	cmp	r4, r3
 8013706:	bf08      	it	eq
 8013708:	68ec      	ldreq	r4, [r5, #12]
 801370a:	e7da      	b.n	80136c2 <_fflush_r+0x22>
 801370c:	080159e8 	.word	0x080159e8
 8013710:	08015a08 	.word	0x08015a08
 8013714:	080159c8 	.word	0x080159c8

08013718 <_lseek_r>:
 8013718:	b538      	push	{r3, r4, r5, lr}
 801371a:	4d07      	ldr	r5, [pc, #28]	; (8013738 <_lseek_r+0x20>)
 801371c:	4604      	mov	r4, r0
 801371e:	4608      	mov	r0, r1
 8013720:	4611      	mov	r1, r2
 8013722:	2200      	movs	r2, #0
 8013724:	602a      	str	r2, [r5, #0]
 8013726:	461a      	mov	r2, r3
 8013728:	f7ee ffec 	bl	8002704 <_lseek>
 801372c:	1c43      	adds	r3, r0, #1
 801372e:	d102      	bne.n	8013736 <_lseek_r+0x1e>
 8013730:	682b      	ldr	r3, [r5, #0]
 8013732:	b103      	cbz	r3, 8013736 <_lseek_r+0x1e>
 8013734:	6023      	str	r3, [r4, #0]
 8013736:	bd38      	pop	{r3, r4, r5, pc}
 8013738:	20004b3c 	.word	0x20004b3c

0801373c <__swhatbuf_r>:
 801373c:	b570      	push	{r4, r5, r6, lr}
 801373e:	460e      	mov	r6, r1
 8013740:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013744:	2900      	cmp	r1, #0
 8013746:	b096      	sub	sp, #88	; 0x58
 8013748:	4614      	mov	r4, r2
 801374a:	461d      	mov	r5, r3
 801374c:	da08      	bge.n	8013760 <__swhatbuf_r+0x24>
 801374e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8013752:	2200      	movs	r2, #0
 8013754:	602a      	str	r2, [r5, #0]
 8013756:	061a      	lsls	r2, r3, #24
 8013758:	d410      	bmi.n	801377c <__swhatbuf_r+0x40>
 801375a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801375e:	e00e      	b.n	801377e <__swhatbuf_r+0x42>
 8013760:	466a      	mov	r2, sp
 8013762:	f000 fa91 	bl	8013c88 <_fstat_r>
 8013766:	2800      	cmp	r0, #0
 8013768:	dbf1      	blt.n	801374e <__swhatbuf_r+0x12>
 801376a:	9a01      	ldr	r2, [sp, #4]
 801376c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8013770:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8013774:	425a      	negs	r2, r3
 8013776:	415a      	adcs	r2, r3
 8013778:	602a      	str	r2, [r5, #0]
 801377a:	e7ee      	b.n	801375a <__swhatbuf_r+0x1e>
 801377c:	2340      	movs	r3, #64	; 0x40
 801377e:	2000      	movs	r0, #0
 8013780:	6023      	str	r3, [r4, #0]
 8013782:	b016      	add	sp, #88	; 0x58
 8013784:	bd70      	pop	{r4, r5, r6, pc}
	...

08013788 <__smakebuf_r>:
 8013788:	898b      	ldrh	r3, [r1, #12]
 801378a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801378c:	079d      	lsls	r5, r3, #30
 801378e:	4606      	mov	r6, r0
 8013790:	460c      	mov	r4, r1
 8013792:	d507      	bpl.n	80137a4 <__smakebuf_r+0x1c>
 8013794:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8013798:	6023      	str	r3, [r4, #0]
 801379a:	6123      	str	r3, [r4, #16]
 801379c:	2301      	movs	r3, #1
 801379e:	6163      	str	r3, [r4, #20]
 80137a0:	b002      	add	sp, #8
 80137a2:	bd70      	pop	{r4, r5, r6, pc}
 80137a4:	ab01      	add	r3, sp, #4
 80137a6:	466a      	mov	r2, sp
 80137a8:	f7ff ffc8 	bl	801373c <__swhatbuf_r>
 80137ac:	9900      	ldr	r1, [sp, #0]
 80137ae:	4605      	mov	r5, r0
 80137b0:	4630      	mov	r0, r6
 80137b2:	f7ff f87f 	bl	80128b4 <_malloc_r>
 80137b6:	b948      	cbnz	r0, 80137cc <__smakebuf_r+0x44>
 80137b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80137bc:	059a      	lsls	r2, r3, #22
 80137be:	d4ef      	bmi.n	80137a0 <__smakebuf_r+0x18>
 80137c0:	f023 0303 	bic.w	r3, r3, #3
 80137c4:	f043 0302 	orr.w	r3, r3, #2
 80137c8:	81a3      	strh	r3, [r4, #12]
 80137ca:	e7e3      	b.n	8013794 <__smakebuf_r+0xc>
 80137cc:	4b0d      	ldr	r3, [pc, #52]	; (8013804 <__smakebuf_r+0x7c>)
 80137ce:	62b3      	str	r3, [r6, #40]	; 0x28
 80137d0:	89a3      	ldrh	r3, [r4, #12]
 80137d2:	6020      	str	r0, [r4, #0]
 80137d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80137d8:	81a3      	strh	r3, [r4, #12]
 80137da:	9b00      	ldr	r3, [sp, #0]
 80137dc:	6163      	str	r3, [r4, #20]
 80137de:	9b01      	ldr	r3, [sp, #4]
 80137e0:	6120      	str	r0, [r4, #16]
 80137e2:	b15b      	cbz	r3, 80137fc <__smakebuf_r+0x74>
 80137e4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80137e8:	4630      	mov	r0, r6
 80137ea:	f000 fa5f 	bl	8013cac <_isatty_r>
 80137ee:	b128      	cbz	r0, 80137fc <__smakebuf_r+0x74>
 80137f0:	89a3      	ldrh	r3, [r4, #12]
 80137f2:	f023 0303 	bic.w	r3, r3, #3
 80137f6:	f043 0301 	orr.w	r3, r3, #1
 80137fa:	81a3      	strh	r3, [r4, #12]
 80137fc:	89a0      	ldrh	r0, [r4, #12]
 80137fe:	4305      	orrs	r5, r0
 8013800:	81a5      	strh	r5, [r4, #12]
 8013802:	e7cd      	b.n	80137a0 <__smakebuf_r+0x18>
 8013804:	080125dd 	.word	0x080125dd

08013808 <malloc>:
 8013808:	4b02      	ldr	r3, [pc, #8]	; (8013814 <malloc+0xc>)
 801380a:	4601      	mov	r1, r0
 801380c:	6818      	ldr	r0, [r3, #0]
 801380e:	f7ff b851 	b.w	80128b4 <_malloc_r>
 8013812:	bf00      	nop
 8013814:	20000054 	.word	0x20000054

08013818 <__malloc_lock>:
 8013818:	4801      	ldr	r0, [pc, #4]	; (8013820 <__malloc_lock+0x8>)
 801381a:	f7fe bfe8 	b.w	80127ee <__retarget_lock_acquire_recursive>
 801381e:	bf00      	nop
 8013820:	20004b30 	.word	0x20004b30

08013824 <__malloc_unlock>:
 8013824:	4801      	ldr	r0, [pc, #4]	; (801382c <__malloc_unlock+0x8>)
 8013826:	f7fe bfe3 	b.w	80127f0 <__retarget_lock_release_recursive>
 801382a:	bf00      	nop
 801382c:	20004b30 	.word	0x20004b30

08013830 <_free_r>:
 8013830:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013832:	2900      	cmp	r1, #0
 8013834:	d044      	beq.n	80138c0 <_free_r+0x90>
 8013836:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801383a:	9001      	str	r0, [sp, #4]
 801383c:	2b00      	cmp	r3, #0
 801383e:	f1a1 0404 	sub.w	r4, r1, #4
 8013842:	bfb8      	it	lt
 8013844:	18e4      	addlt	r4, r4, r3
 8013846:	f7ff ffe7 	bl	8013818 <__malloc_lock>
 801384a:	4a1e      	ldr	r2, [pc, #120]	; (80138c4 <_free_r+0x94>)
 801384c:	9801      	ldr	r0, [sp, #4]
 801384e:	6813      	ldr	r3, [r2, #0]
 8013850:	b933      	cbnz	r3, 8013860 <_free_r+0x30>
 8013852:	6063      	str	r3, [r4, #4]
 8013854:	6014      	str	r4, [r2, #0]
 8013856:	b003      	add	sp, #12
 8013858:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801385c:	f7ff bfe2 	b.w	8013824 <__malloc_unlock>
 8013860:	42a3      	cmp	r3, r4
 8013862:	d908      	bls.n	8013876 <_free_r+0x46>
 8013864:	6825      	ldr	r5, [r4, #0]
 8013866:	1961      	adds	r1, r4, r5
 8013868:	428b      	cmp	r3, r1
 801386a:	bf01      	itttt	eq
 801386c:	6819      	ldreq	r1, [r3, #0]
 801386e:	685b      	ldreq	r3, [r3, #4]
 8013870:	1949      	addeq	r1, r1, r5
 8013872:	6021      	streq	r1, [r4, #0]
 8013874:	e7ed      	b.n	8013852 <_free_r+0x22>
 8013876:	461a      	mov	r2, r3
 8013878:	685b      	ldr	r3, [r3, #4]
 801387a:	b10b      	cbz	r3, 8013880 <_free_r+0x50>
 801387c:	42a3      	cmp	r3, r4
 801387e:	d9fa      	bls.n	8013876 <_free_r+0x46>
 8013880:	6811      	ldr	r1, [r2, #0]
 8013882:	1855      	adds	r5, r2, r1
 8013884:	42a5      	cmp	r5, r4
 8013886:	d10b      	bne.n	80138a0 <_free_r+0x70>
 8013888:	6824      	ldr	r4, [r4, #0]
 801388a:	4421      	add	r1, r4
 801388c:	1854      	adds	r4, r2, r1
 801388e:	42a3      	cmp	r3, r4
 8013890:	6011      	str	r1, [r2, #0]
 8013892:	d1e0      	bne.n	8013856 <_free_r+0x26>
 8013894:	681c      	ldr	r4, [r3, #0]
 8013896:	685b      	ldr	r3, [r3, #4]
 8013898:	6053      	str	r3, [r2, #4]
 801389a:	4421      	add	r1, r4
 801389c:	6011      	str	r1, [r2, #0]
 801389e:	e7da      	b.n	8013856 <_free_r+0x26>
 80138a0:	d902      	bls.n	80138a8 <_free_r+0x78>
 80138a2:	230c      	movs	r3, #12
 80138a4:	6003      	str	r3, [r0, #0]
 80138a6:	e7d6      	b.n	8013856 <_free_r+0x26>
 80138a8:	6825      	ldr	r5, [r4, #0]
 80138aa:	1961      	adds	r1, r4, r5
 80138ac:	428b      	cmp	r3, r1
 80138ae:	bf04      	itt	eq
 80138b0:	6819      	ldreq	r1, [r3, #0]
 80138b2:	685b      	ldreq	r3, [r3, #4]
 80138b4:	6063      	str	r3, [r4, #4]
 80138b6:	bf04      	itt	eq
 80138b8:	1949      	addeq	r1, r1, r5
 80138ba:	6021      	streq	r1, [r4, #0]
 80138bc:	6054      	str	r4, [r2, #4]
 80138be:	e7ca      	b.n	8013856 <_free_r+0x26>
 80138c0:	b003      	add	sp, #12
 80138c2:	bd30      	pop	{r4, r5, pc}
 80138c4:	20004b34 	.word	0x20004b34

080138c8 <_realloc_r>:
 80138c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80138cc:	4680      	mov	r8, r0
 80138ce:	4614      	mov	r4, r2
 80138d0:	460e      	mov	r6, r1
 80138d2:	b921      	cbnz	r1, 80138de <_realloc_r+0x16>
 80138d4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80138d8:	4611      	mov	r1, r2
 80138da:	f7fe bfeb 	b.w	80128b4 <_malloc_r>
 80138de:	b92a      	cbnz	r2, 80138ec <_realloc_r+0x24>
 80138e0:	f7ff ffa6 	bl	8013830 <_free_r>
 80138e4:	4625      	mov	r5, r4
 80138e6:	4628      	mov	r0, r5
 80138e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80138ec:	f000 f9ee 	bl	8013ccc <_malloc_usable_size_r>
 80138f0:	4284      	cmp	r4, r0
 80138f2:	4607      	mov	r7, r0
 80138f4:	d802      	bhi.n	80138fc <_realloc_r+0x34>
 80138f6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80138fa:	d812      	bhi.n	8013922 <_realloc_r+0x5a>
 80138fc:	4621      	mov	r1, r4
 80138fe:	4640      	mov	r0, r8
 8013900:	f7fe ffd8 	bl	80128b4 <_malloc_r>
 8013904:	4605      	mov	r5, r0
 8013906:	2800      	cmp	r0, #0
 8013908:	d0ed      	beq.n	80138e6 <_realloc_r+0x1e>
 801390a:	42bc      	cmp	r4, r7
 801390c:	4622      	mov	r2, r4
 801390e:	4631      	mov	r1, r6
 8013910:	bf28      	it	cs
 8013912:	463a      	movcs	r2, r7
 8013914:	f7fe ff7d 	bl	8012812 <memcpy>
 8013918:	4631      	mov	r1, r6
 801391a:	4640      	mov	r0, r8
 801391c:	f7ff ff88 	bl	8013830 <_free_r>
 8013920:	e7e1      	b.n	80138e6 <_realloc_r+0x1e>
 8013922:	4635      	mov	r5, r6
 8013924:	e7df      	b.n	80138e6 <_realloc_r+0x1e>

08013926 <__ssputs_r>:
 8013926:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801392a:	688e      	ldr	r6, [r1, #8]
 801392c:	429e      	cmp	r6, r3
 801392e:	4682      	mov	sl, r0
 8013930:	460c      	mov	r4, r1
 8013932:	4690      	mov	r8, r2
 8013934:	461f      	mov	r7, r3
 8013936:	d838      	bhi.n	80139aa <__ssputs_r+0x84>
 8013938:	898a      	ldrh	r2, [r1, #12]
 801393a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801393e:	d032      	beq.n	80139a6 <__ssputs_r+0x80>
 8013940:	6825      	ldr	r5, [r4, #0]
 8013942:	6909      	ldr	r1, [r1, #16]
 8013944:	eba5 0901 	sub.w	r9, r5, r1
 8013948:	6965      	ldr	r5, [r4, #20]
 801394a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801394e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8013952:	3301      	adds	r3, #1
 8013954:	444b      	add	r3, r9
 8013956:	106d      	asrs	r5, r5, #1
 8013958:	429d      	cmp	r5, r3
 801395a:	bf38      	it	cc
 801395c:	461d      	movcc	r5, r3
 801395e:	0553      	lsls	r3, r2, #21
 8013960:	d531      	bpl.n	80139c6 <__ssputs_r+0xa0>
 8013962:	4629      	mov	r1, r5
 8013964:	f7fe ffa6 	bl	80128b4 <_malloc_r>
 8013968:	4606      	mov	r6, r0
 801396a:	b950      	cbnz	r0, 8013982 <__ssputs_r+0x5c>
 801396c:	230c      	movs	r3, #12
 801396e:	f8ca 3000 	str.w	r3, [sl]
 8013972:	89a3      	ldrh	r3, [r4, #12]
 8013974:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013978:	81a3      	strh	r3, [r4, #12]
 801397a:	f04f 30ff 	mov.w	r0, #4294967295
 801397e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013982:	6921      	ldr	r1, [r4, #16]
 8013984:	464a      	mov	r2, r9
 8013986:	f7fe ff44 	bl	8012812 <memcpy>
 801398a:	89a3      	ldrh	r3, [r4, #12]
 801398c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8013990:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013994:	81a3      	strh	r3, [r4, #12]
 8013996:	6126      	str	r6, [r4, #16]
 8013998:	6165      	str	r5, [r4, #20]
 801399a:	444e      	add	r6, r9
 801399c:	eba5 0509 	sub.w	r5, r5, r9
 80139a0:	6026      	str	r6, [r4, #0]
 80139a2:	60a5      	str	r5, [r4, #8]
 80139a4:	463e      	mov	r6, r7
 80139a6:	42be      	cmp	r6, r7
 80139a8:	d900      	bls.n	80139ac <__ssputs_r+0x86>
 80139aa:	463e      	mov	r6, r7
 80139ac:	6820      	ldr	r0, [r4, #0]
 80139ae:	4632      	mov	r2, r6
 80139b0:	4641      	mov	r1, r8
 80139b2:	f7fe ff3c 	bl	801282e <memmove>
 80139b6:	68a3      	ldr	r3, [r4, #8]
 80139b8:	1b9b      	subs	r3, r3, r6
 80139ba:	60a3      	str	r3, [r4, #8]
 80139bc:	6823      	ldr	r3, [r4, #0]
 80139be:	4433      	add	r3, r6
 80139c0:	6023      	str	r3, [r4, #0]
 80139c2:	2000      	movs	r0, #0
 80139c4:	e7db      	b.n	801397e <__ssputs_r+0x58>
 80139c6:	462a      	mov	r2, r5
 80139c8:	f7ff ff7e 	bl	80138c8 <_realloc_r>
 80139cc:	4606      	mov	r6, r0
 80139ce:	2800      	cmp	r0, #0
 80139d0:	d1e1      	bne.n	8013996 <__ssputs_r+0x70>
 80139d2:	6921      	ldr	r1, [r4, #16]
 80139d4:	4650      	mov	r0, sl
 80139d6:	f7ff ff2b 	bl	8013830 <_free_r>
 80139da:	e7c7      	b.n	801396c <__ssputs_r+0x46>

080139dc <_svfiprintf_r>:
 80139dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80139e0:	4698      	mov	r8, r3
 80139e2:	898b      	ldrh	r3, [r1, #12]
 80139e4:	061b      	lsls	r3, r3, #24
 80139e6:	b09d      	sub	sp, #116	; 0x74
 80139e8:	4607      	mov	r7, r0
 80139ea:	460d      	mov	r5, r1
 80139ec:	4614      	mov	r4, r2
 80139ee:	d50e      	bpl.n	8013a0e <_svfiprintf_r+0x32>
 80139f0:	690b      	ldr	r3, [r1, #16]
 80139f2:	b963      	cbnz	r3, 8013a0e <_svfiprintf_r+0x32>
 80139f4:	2140      	movs	r1, #64	; 0x40
 80139f6:	f7fe ff5d 	bl	80128b4 <_malloc_r>
 80139fa:	6028      	str	r0, [r5, #0]
 80139fc:	6128      	str	r0, [r5, #16]
 80139fe:	b920      	cbnz	r0, 8013a0a <_svfiprintf_r+0x2e>
 8013a00:	230c      	movs	r3, #12
 8013a02:	603b      	str	r3, [r7, #0]
 8013a04:	f04f 30ff 	mov.w	r0, #4294967295
 8013a08:	e0d1      	b.n	8013bae <_svfiprintf_r+0x1d2>
 8013a0a:	2340      	movs	r3, #64	; 0x40
 8013a0c:	616b      	str	r3, [r5, #20]
 8013a0e:	2300      	movs	r3, #0
 8013a10:	9309      	str	r3, [sp, #36]	; 0x24
 8013a12:	2320      	movs	r3, #32
 8013a14:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8013a18:	f8cd 800c 	str.w	r8, [sp, #12]
 8013a1c:	2330      	movs	r3, #48	; 0x30
 8013a1e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8013bc8 <_svfiprintf_r+0x1ec>
 8013a22:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8013a26:	f04f 0901 	mov.w	r9, #1
 8013a2a:	4623      	mov	r3, r4
 8013a2c:	469a      	mov	sl, r3
 8013a2e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013a32:	b10a      	cbz	r2, 8013a38 <_svfiprintf_r+0x5c>
 8013a34:	2a25      	cmp	r2, #37	; 0x25
 8013a36:	d1f9      	bne.n	8013a2c <_svfiprintf_r+0x50>
 8013a38:	ebba 0b04 	subs.w	fp, sl, r4
 8013a3c:	d00b      	beq.n	8013a56 <_svfiprintf_r+0x7a>
 8013a3e:	465b      	mov	r3, fp
 8013a40:	4622      	mov	r2, r4
 8013a42:	4629      	mov	r1, r5
 8013a44:	4638      	mov	r0, r7
 8013a46:	f7ff ff6e 	bl	8013926 <__ssputs_r>
 8013a4a:	3001      	adds	r0, #1
 8013a4c:	f000 80aa 	beq.w	8013ba4 <_svfiprintf_r+0x1c8>
 8013a50:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013a52:	445a      	add	r2, fp
 8013a54:	9209      	str	r2, [sp, #36]	; 0x24
 8013a56:	f89a 3000 	ldrb.w	r3, [sl]
 8013a5a:	2b00      	cmp	r3, #0
 8013a5c:	f000 80a2 	beq.w	8013ba4 <_svfiprintf_r+0x1c8>
 8013a60:	2300      	movs	r3, #0
 8013a62:	f04f 32ff 	mov.w	r2, #4294967295
 8013a66:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013a6a:	f10a 0a01 	add.w	sl, sl, #1
 8013a6e:	9304      	str	r3, [sp, #16]
 8013a70:	9307      	str	r3, [sp, #28]
 8013a72:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8013a76:	931a      	str	r3, [sp, #104]	; 0x68
 8013a78:	4654      	mov	r4, sl
 8013a7a:	2205      	movs	r2, #5
 8013a7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013a80:	4851      	ldr	r0, [pc, #324]	; (8013bc8 <_svfiprintf_r+0x1ec>)
 8013a82:	f7ec fbad 	bl	80001e0 <memchr>
 8013a86:	9a04      	ldr	r2, [sp, #16]
 8013a88:	b9d8      	cbnz	r0, 8013ac2 <_svfiprintf_r+0xe6>
 8013a8a:	06d0      	lsls	r0, r2, #27
 8013a8c:	bf44      	itt	mi
 8013a8e:	2320      	movmi	r3, #32
 8013a90:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013a94:	0711      	lsls	r1, r2, #28
 8013a96:	bf44      	itt	mi
 8013a98:	232b      	movmi	r3, #43	; 0x2b
 8013a9a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013a9e:	f89a 3000 	ldrb.w	r3, [sl]
 8013aa2:	2b2a      	cmp	r3, #42	; 0x2a
 8013aa4:	d015      	beq.n	8013ad2 <_svfiprintf_r+0xf6>
 8013aa6:	9a07      	ldr	r2, [sp, #28]
 8013aa8:	4654      	mov	r4, sl
 8013aaa:	2000      	movs	r0, #0
 8013aac:	f04f 0c0a 	mov.w	ip, #10
 8013ab0:	4621      	mov	r1, r4
 8013ab2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013ab6:	3b30      	subs	r3, #48	; 0x30
 8013ab8:	2b09      	cmp	r3, #9
 8013aba:	d94e      	bls.n	8013b5a <_svfiprintf_r+0x17e>
 8013abc:	b1b0      	cbz	r0, 8013aec <_svfiprintf_r+0x110>
 8013abe:	9207      	str	r2, [sp, #28]
 8013ac0:	e014      	b.n	8013aec <_svfiprintf_r+0x110>
 8013ac2:	eba0 0308 	sub.w	r3, r0, r8
 8013ac6:	fa09 f303 	lsl.w	r3, r9, r3
 8013aca:	4313      	orrs	r3, r2
 8013acc:	9304      	str	r3, [sp, #16]
 8013ace:	46a2      	mov	sl, r4
 8013ad0:	e7d2      	b.n	8013a78 <_svfiprintf_r+0x9c>
 8013ad2:	9b03      	ldr	r3, [sp, #12]
 8013ad4:	1d19      	adds	r1, r3, #4
 8013ad6:	681b      	ldr	r3, [r3, #0]
 8013ad8:	9103      	str	r1, [sp, #12]
 8013ada:	2b00      	cmp	r3, #0
 8013adc:	bfbb      	ittet	lt
 8013ade:	425b      	neglt	r3, r3
 8013ae0:	f042 0202 	orrlt.w	r2, r2, #2
 8013ae4:	9307      	strge	r3, [sp, #28]
 8013ae6:	9307      	strlt	r3, [sp, #28]
 8013ae8:	bfb8      	it	lt
 8013aea:	9204      	strlt	r2, [sp, #16]
 8013aec:	7823      	ldrb	r3, [r4, #0]
 8013aee:	2b2e      	cmp	r3, #46	; 0x2e
 8013af0:	d10c      	bne.n	8013b0c <_svfiprintf_r+0x130>
 8013af2:	7863      	ldrb	r3, [r4, #1]
 8013af4:	2b2a      	cmp	r3, #42	; 0x2a
 8013af6:	d135      	bne.n	8013b64 <_svfiprintf_r+0x188>
 8013af8:	9b03      	ldr	r3, [sp, #12]
 8013afa:	1d1a      	adds	r2, r3, #4
 8013afc:	681b      	ldr	r3, [r3, #0]
 8013afe:	9203      	str	r2, [sp, #12]
 8013b00:	2b00      	cmp	r3, #0
 8013b02:	bfb8      	it	lt
 8013b04:	f04f 33ff 	movlt.w	r3, #4294967295
 8013b08:	3402      	adds	r4, #2
 8013b0a:	9305      	str	r3, [sp, #20]
 8013b0c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8013bd8 <_svfiprintf_r+0x1fc>
 8013b10:	7821      	ldrb	r1, [r4, #0]
 8013b12:	2203      	movs	r2, #3
 8013b14:	4650      	mov	r0, sl
 8013b16:	f7ec fb63 	bl	80001e0 <memchr>
 8013b1a:	b140      	cbz	r0, 8013b2e <_svfiprintf_r+0x152>
 8013b1c:	2340      	movs	r3, #64	; 0x40
 8013b1e:	eba0 000a 	sub.w	r0, r0, sl
 8013b22:	fa03 f000 	lsl.w	r0, r3, r0
 8013b26:	9b04      	ldr	r3, [sp, #16]
 8013b28:	4303      	orrs	r3, r0
 8013b2a:	3401      	adds	r4, #1
 8013b2c:	9304      	str	r3, [sp, #16]
 8013b2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013b32:	4826      	ldr	r0, [pc, #152]	; (8013bcc <_svfiprintf_r+0x1f0>)
 8013b34:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8013b38:	2206      	movs	r2, #6
 8013b3a:	f7ec fb51 	bl	80001e0 <memchr>
 8013b3e:	2800      	cmp	r0, #0
 8013b40:	d038      	beq.n	8013bb4 <_svfiprintf_r+0x1d8>
 8013b42:	4b23      	ldr	r3, [pc, #140]	; (8013bd0 <_svfiprintf_r+0x1f4>)
 8013b44:	bb1b      	cbnz	r3, 8013b8e <_svfiprintf_r+0x1b2>
 8013b46:	9b03      	ldr	r3, [sp, #12]
 8013b48:	3307      	adds	r3, #7
 8013b4a:	f023 0307 	bic.w	r3, r3, #7
 8013b4e:	3308      	adds	r3, #8
 8013b50:	9303      	str	r3, [sp, #12]
 8013b52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013b54:	4433      	add	r3, r6
 8013b56:	9309      	str	r3, [sp, #36]	; 0x24
 8013b58:	e767      	b.n	8013a2a <_svfiprintf_r+0x4e>
 8013b5a:	fb0c 3202 	mla	r2, ip, r2, r3
 8013b5e:	460c      	mov	r4, r1
 8013b60:	2001      	movs	r0, #1
 8013b62:	e7a5      	b.n	8013ab0 <_svfiprintf_r+0xd4>
 8013b64:	2300      	movs	r3, #0
 8013b66:	3401      	adds	r4, #1
 8013b68:	9305      	str	r3, [sp, #20]
 8013b6a:	4619      	mov	r1, r3
 8013b6c:	f04f 0c0a 	mov.w	ip, #10
 8013b70:	4620      	mov	r0, r4
 8013b72:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013b76:	3a30      	subs	r2, #48	; 0x30
 8013b78:	2a09      	cmp	r2, #9
 8013b7a:	d903      	bls.n	8013b84 <_svfiprintf_r+0x1a8>
 8013b7c:	2b00      	cmp	r3, #0
 8013b7e:	d0c5      	beq.n	8013b0c <_svfiprintf_r+0x130>
 8013b80:	9105      	str	r1, [sp, #20]
 8013b82:	e7c3      	b.n	8013b0c <_svfiprintf_r+0x130>
 8013b84:	fb0c 2101 	mla	r1, ip, r1, r2
 8013b88:	4604      	mov	r4, r0
 8013b8a:	2301      	movs	r3, #1
 8013b8c:	e7f0      	b.n	8013b70 <_svfiprintf_r+0x194>
 8013b8e:	ab03      	add	r3, sp, #12
 8013b90:	9300      	str	r3, [sp, #0]
 8013b92:	462a      	mov	r2, r5
 8013b94:	4b0f      	ldr	r3, [pc, #60]	; (8013bd4 <_svfiprintf_r+0x1f8>)
 8013b96:	a904      	add	r1, sp, #16
 8013b98:	4638      	mov	r0, r7
 8013b9a:	f3af 8000 	nop.w
 8013b9e:	1c42      	adds	r2, r0, #1
 8013ba0:	4606      	mov	r6, r0
 8013ba2:	d1d6      	bne.n	8013b52 <_svfiprintf_r+0x176>
 8013ba4:	89ab      	ldrh	r3, [r5, #12]
 8013ba6:	065b      	lsls	r3, r3, #25
 8013ba8:	f53f af2c 	bmi.w	8013a04 <_svfiprintf_r+0x28>
 8013bac:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013bae:	b01d      	add	sp, #116	; 0x74
 8013bb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013bb4:	ab03      	add	r3, sp, #12
 8013bb6:	9300      	str	r3, [sp, #0]
 8013bb8:	462a      	mov	r2, r5
 8013bba:	4b06      	ldr	r3, [pc, #24]	; (8013bd4 <_svfiprintf_r+0x1f8>)
 8013bbc:	a904      	add	r1, sp, #16
 8013bbe:	4638      	mov	r0, r7
 8013bc0:	f7ff f8b4 	bl	8012d2c <_printf_i>
 8013bc4:	e7eb      	b.n	8013b9e <_svfiprintf_r+0x1c2>
 8013bc6:	bf00      	nop
 8013bc8:	08015a2c 	.word	0x08015a2c
 8013bcc:	08015a36 	.word	0x08015a36
 8013bd0:	00000000 	.word	0x00000000
 8013bd4:	08013927 	.word	0x08013927
 8013bd8:	08015a32 	.word	0x08015a32

08013bdc <_read_r>:
 8013bdc:	b538      	push	{r3, r4, r5, lr}
 8013bde:	4d07      	ldr	r5, [pc, #28]	; (8013bfc <_read_r+0x20>)
 8013be0:	4604      	mov	r4, r0
 8013be2:	4608      	mov	r0, r1
 8013be4:	4611      	mov	r1, r2
 8013be6:	2200      	movs	r2, #0
 8013be8:	602a      	str	r2, [r5, #0]
 8013bea:	461a      	mov	r2, r3
 8013bec:	f7ee fd46 	bl	800267c <_read>
 8013bf0:	1c43      	adds	r3, r0, #1
 8013bf2:	d102      	bne.n	8013bfa <_read_r+0x1e>
 8013bf4:	682b      	ldr	r3, [r5, #0]
 8013bf6:	b103      	cbz	r3, 8013bfa <_read_r+0x1e>
 8013bf8:	6023      	str	r3, [r4, #0]
 8013bfa:	bd38      	pop	{r3, r4, r5, pc}
 8013bfc:	20004b3c 	.word	0x20004b3c

08013c00 <_raise_r>:
 8013c00:	291f      	cmp	r1, #31
 8013c02:	b538      	push	{r3, r4, r5, lr}
 8013c04:	4604      	mov	r4, r0
 8013c06:	460d      	mov	r5, r1
 8013c08:	d904      	bls.n	8013c14 <_raise_r+0x14>
 8013c0a:	2316      	movs	r3, #22
 8013c0c:	6003      	str	r3, [r0, #0]
 8013c0e:	f04f 30ff 	mov.w	r0, #4294967295
 8013c12:	bd38      	pop	{r3, r4, r5, pc}
 8013c14:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8013c16:	b112      	cbz	r2, 8013c1e <_raise_r+0x1e>
 8013c18:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8013c1c:	b94b      	cbnz	r3, 8013c32 <_raise_r+0x32>
 8013c1e:	4620      	mov	r0, r4
 8013c20:	f000 f830 	bl	8013c84 <_getpid_r>
 8013c24:	462a      	mov	r2, r5
 8013c26:	4601      	mov	r1, r0
 8013c28:	4620      	mov	r0, r4
 8013c2a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013c2e:	f000 b817 	b.w	8013c60 <_kill_r>
 8013c32:	2b01      	cmp	r3, #1
 8013c34:	d00a      	beq.n	8013c4c <_raise_r+0x4c>
 8013c36:	1c59      	adds	r1, r3, #1
 8013c38:	d103      	bne.n	8013c42 <_raise_r+0x42>
 8013c3a:	2316      	movs	r3, #22
 8013c3c:	6003      	str	r3, [r0, #0]
 8013c3e:	2001      	movs	r0, #1
 8013c40:	e7e7      	b.n	8013c12 <_raise_r+0x12>
 8013c42:	2400      	movs	r4, #0
 8013c44:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8013c48:	4628      	mov	r0, r5
 8013c4a:	4798      	blx	r3
 8013c4c:	2000      	movs	r0, #0
 8013c4e:	e7e0      	b.n	8013c12 <_raise_r+0x12>

08013c50 <raise>:
 8013c50:	4b02      	ldr	r3, [pc, #8]	; (8013c5c <raise+0xc>)
 8013c52:	4601      	mov	r1, r0
 8013c54:	6818      	ldr	r0, [r3, #0]
 8013c56:	f7ff bfd3 	b.w	8013c00 <_raise_r>
 8013c5a:	bf00      	nop
 8013c5c:	20000054 	.word	0x20000054

08013c60 <_kill_r>:
 8013c60:	b538      	push	{r3, r4, r5, lr}
 8013c62:	4d07      	ldr	r5, [pc, #28]	; (8013c80 <_kill_r+0x20>)
 8013c64:	2300      	movs	r3, #0
 8013c66:	4604      	mov	r4, r0
 8013c68:	4608      	mov	r0, r1
 8013c6a:	4611      	mov	r1, r2
 8013c6c:	602b      	str	r3, [r5, #0]
 8013c6e:	f7ee fceb 	bl	8002648 <_kill>
 8013c72:	1c43      	adds	r3, r0, #1
 8013c74:	d102      	bne.n	8013c7c <_kill_r+0x1c>
 8013c76:	682b      	ldr	r3, [r5, #0]
 8013c78:	b103      	cbz	r3, 8013c7c <_kill_r+0x1c>
 8013c7a:	6023      	str	r3, [r4, #0]
 8013c7c:	bd38      	pop	{r3, r4, r5, pc}
 8013c7e:	bf00      	nop
 8013c80:	20004b3c 	.word	0x20004b3c

08013c84 <_getpid_r>:
 8013c84:	f7ee bcd8 	b.w	8002638 <_getpid>

08013c88 <_fstat_r>:
 8013c88:	b538      	push	{r3, r4, r5, lr}
 8013c8a:	4d07      	ldr	r5, [pc, #28]	; (8013ca8 <_fstat_r+0x20>)
 8013c8c:	2300      	movs	r3, #0
 8013c8e:	4604      	mov	r4, r0
 8013c90:	4608      	mov	r0, r1
 8013c92:	4611      	mov	r1, r2
 8013c94:	602b      	str	r3, [r5, #0]
 8013c96:	f7ee fd1a 	bl	80026ce <_fstat>
 8013c9a:	1c43      	adds	r3, r0, #1
 8013c9c:	d102      	bne.n	8013ca4 <_fstat_r+0x1c>
 8013c9e:	682b      	ldr	r3, [r5, #0]
 8013ca0:	b103      	cbz	r3, 8013ca4 <_fstat_r+0x1c>
 8013ca2:	6023      	str	r3, [r4, #0]
 8013ca4:	bd38      	pop	{r3, r4, r5, pc}
 8013ca6:	bf00      	nop
 8013ca8:	20004b3c 	.word	0x20004b3c

08013cac <_isatty_r>:
 8013cac:	b538      	push	{r3, r4, r5, lr}
 8013cae:	4d06      	ldr	r5, [pc, #24]	; (8013cc8 <_isatty_r+0x1c>)
 8013cb0:	2300      	movs	r3, #0
 8013cb2:	4604      	mov	r4, r0
 8013cb4:	4608      	mov	r0, r1
 8013cb6:	602b      	str	r3, [r5, #0]
 8013cb8:	f7ee fd19 	bl	80026ee <_isatty>
 8013cbc:	1c43      	adds	r3, r0, #1
 8013cbe:	d102      	bne.n	8013cc6 <_isatty_r+0x1a>
 8013cc0:	682b      	ldr	r3, [r5, #0]
 8013cc2:	b103      	cbz	r3, 8013cc6 <_isatty_r+0x1a>
 8013cc4:	6023      	str	r3, [r4, #0]
 8013cc6:	bd38      	pop	{r3, r4, r5, pc}
 8013cc8:	20004b3c 	.word	0x20004b3c

08013ccc <_malloc_usable_size_r>:
 8013ccc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013cd0:	1f18      	subs	r0, r3, #4
 8013cd2:	2b00      	cmp	r3, #0
 8013cd4:	bfbc      	itt	lt
 8013cd6:	580b      	ldrlt	r3, [r1, r0]
 8013cd8:	18c0      	addlt	r0, r0, r3
 8013cda:	4770      	bx	lr

08013cdc <_init>:
 8013cdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013cde:	bf00      	nop
 8013ce0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013ce2:	bc08      	pop	{r3}
 8013ce4:	469e      	mov	lr, r3
 8013ce6:	4770      	bx	lr

08013ce8 <_fini>:
 8013ce8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013cea:	bf00      	nop
 8013cec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013cee:	bc08      	pop	{r3}
 8013cf0:	469e      	mov	lr, r3
 8013cf2:	4770      	bx	lr
