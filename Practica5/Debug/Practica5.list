
Practica5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f378  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d98  0800f508  0800f508  0001f508  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080102a0  080102a0  000300ac  2**0
                  CONTENTS
  4 .ARM          00000008  080102a0  080102a0  000202a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080102a8  080102a8  000300ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080102a8  080102a8  000202a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080102ac  080102ac  000202ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000ac  20000000  080102b0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003cd0  200000ac  0801035c  000300ac  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20003d7c  0801035c  00033d7c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000300ac  2**0
                  CONTENTS, READONLY
 12 .debug_info   000326c8  00000000  00000000  000300dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000620b  00000000  00000000  000627a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002ba8  00000000  00000000  000689b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002940  00000000  00000000  0006b558  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00008848  00000000  00000000  0006de98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002ee32  00000000  00000000  000766e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00114f5f  00000000  00000000  000a5512  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001ba471  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000c7d8  00000000  00000000  001ba4c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000ac 	.word	0x200000ac
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800f4f0 	.word	0x0800f4f0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000b0 	.word	0x200000b0
 80001cc:	0800f4f0 	.word	0x0800f4f0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000584:	b480      	push	{r7}
 8000586:	b083      	sub	sp, #12
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800058c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000590:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000594:	f003 0301 	and.w	r3, r3, #1
 8000598:	2b00      	cmp	r3, #0
 800059a:	d013      	beq.n	80005c4 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 800059c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005a0:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80005a4:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d00b      	beq.n	80005c4 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80005ac:	e000      	b.n	80005b0 <ITM_SendChar+0x2c>
    {
      __NOP();
 80005ae:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80005b0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d0f9      	beq.n	80005ae <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80005ba:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005be:	687a      	ldr	r2, [r7, #4]
 80005c0:	b2d2      	uxtb	r2, r2
 80005c2:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80005c4:	687b      	ldr	r3, [r7, #4]
}
 80005c6:	4618      	mov	r0, r3
 80005c8:	370c      	adds	r7, #12
 80005ca:	46bd      	mov	sp, r7
 80005cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d0:	4770      	bx	lr
	...

080005d4 <configureTimerForRunTimeStats>:
void sendMQTT_func(void *argument);
void wifiStartTask_func(void *argument);

/* USER CODE BEGIN PFP */
volatile unsigned long ulHighFrequencyTimerTicks;
void configureTimerForRunTimeStats(void) {
 80005d4:	b580      	push	{r7, lr}
 80005d6:	af00      	add	r7, sp, #0
	ulHighFrequencyTimerTicks = 0;
 80005d8:	4b03      	ldr	r3, [pc, #12]	; (80005e8 <configureTimerForRunTimeStats+0x14>)
 80005da:	2200      	movs	r2, #0
 80005dc:	601a      	str	r2, [r3, #0]
	HAL_TIM_Base_Start_IT(&htim7);
 80005de:	4803      	ldr	r0, [pc, #12]	; (80005ec <configureTimerForRunTimeStats+0x18>)
 80005e0:	f006 fe3e 	bl	8007260 <HAL_TIM_Base_Start_IT>
}
 80005e4:	bf00      	nop
 80005e6:	bd80      	pop	{r7, pc}
 80005e8:	200007b8 	.word	0x200007b8
 80005ec:	20000218 	.word	0x20000218

080005f0 <getRunTimeCounterValue>:
unsigned long getRunTimeCounterValue(void) {
 80005f0:	b480      	push	{r7}
 80005f2:	af00      	add	r7, sp, #0
	return ulHighFrequencyTimerTicks;
 80005f4:	4b03      	ldr	r3, [pc, #12]	; (8000604 <getRunTimeCounterValue+0x14>)
 80005f6:	681b      	ldr	r3, [r3, #0]

}
 80005f8:	4618      	mov	r0, r3
 80005fa:	46bd      	mov	sp, r7
 80005fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000600:	4770      	bx	lr
 8000602:	bf00      	nop
 8000604:	200007b8 	.word	0x200007b8

08000608 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800060c:	f001 fe93 	bl	8002336 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000610:	f000 f8ae 	bl	8000770 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000614:	f000 fb0a 	bl	8000c2c <MX_GPIO_Init>
  MX_DFSDM1_Init();
 8000618:	f000 f90e 	bl	8000838 <MX_DFSDM1_Init>
  MX_I2C2_Init();
 800061c:	f000 f944 	bl	80008a8 <MX_I2C2_Init>
  MX_QUADSPI_Init();
 8000620:	f000 f980 	bl	8000924 <MX_QUADSPI_Init>
  MX_SPI3_Init();
 8000624:	f000 fa00 	bl	8000a28 <MX_SPI3_Init>
  MX_USART1_UART_Init();
 8000628:	f000 fa72 	bl	8000b10 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 800062c:	f000 faa0 	bl	8000b70 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000630:	f000 face 	bl	8000bd0 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM7_Init();
 8000634:	f000 fa36 	bl	8000aa4 <MX_TIM7_Init>
  MX_RTC_Init();
 8000638:	f000 f99a 	bl	8000970 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  status_acc = BSP_ACCELERO_Init_INT();
 800063c:	f000 fcb4 	bl	8000fa8 <BSP_ACCELERO_Init_INT>
 8000640:	4603      	mov	r3, r0
 8000642:	461a      	mov	r2, r3
 8000644:	4b2d      	ldr	r3, [pc, #180]	; (80006fc <main+0xf4>)
 8000646:	701a      	strb	r2, [r3, #0]
  if (status_acc == ACCELERO_OK){
 8000648:	4b2c      	ldr	r3, [pc, #176]	; (80006fc <main+0xf4>)
 800064a:	781b      	ldrb	r3, [r3, #0]
 800064c:	2b00      	cmp	r3, #0
 800064e:	d102      	bne.n	8000656 <main+0x4e>
	  printf("Acelerometro inicializado\r\n");
 8000650:	482b      	ldr	r0, [pc, #172]	; (8000700 <main+0xf8>)
 8000652:	f00d fde7 	bl	800e224 <puts>
  }

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000656:	f009 ffb5 	bl	800a5c4 <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of print_queue */
  print_queueHandle = osMessageQueueNew (10, sizeof(uintptr_t), &print_queue_attributes);
 800065a:	4a2a      	ldr	r2, [pc, #168]	; (8000704 <main+0xfc>)
 800065c:	2104      	movs	r1, #4
 800065e:	200a      	movs	r0, #10
 8000660:	f00a f9a4 	bl	800a9ac <osMessageQueueNew>
 8000664:	4603      	mov	r3, r0
 8000666:	4a28      	ldr	r2, [pc, #160]	; (8000708 <main+0x100>)
 8000668:	6013      	str	r3, [r2, #0]

  /* creation of receive_queue */
  receive_queueHandle = osMessageQueueNew (3, sizeof(uint8_t), &receive_queue_attributes);
 800066a:	4a28      	ldr	r2, [pc, #160]	; (800070c <main+0x104>)
 800066c:	2101      	movs	r1, #1
 800066e:	2003      	movs	r0, #3
 8000670:	f00a f99c 	bl	800a9ac <osMessageQueueNew>
 8000674:	4603      	mov	r3, r0
 8000676:	4a26      	ldr	r2, [pc, #152]	; (8000710 <main+0x108>)
 8000678:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of RTC_set */
  RTC_setHandle = osThreadNew(RTC_set_func, NULL, &RTC_set_attributes);
 800067a:	4a26      	ldr	r2, [pc, #152]	; (8000714 <main+0x10c>)
 800067c:	2100      	movs	r1, #0
 800067e:	4826      	ldr	r0, [pc, #152]	; (8000718 <main+0x110>)
 8000680:	f009 ffea 	bl	800a658 <osThreadNew>
 8000684:	4603      	mov	r3, r0
 8000686:	4a25      	ldr	r2, [pc, #148]	; (800071c <main+0x114>)
 8000688:	6013      	str	r3, [r2, #0]

  /* creation of readAccel */
  readAccelHandle = osThreadNew(readAccel_func, NULL, &readAccel_attributes);
 800068a:	4a25      	ldr	r2, [pc, #148]	; (8000720 <main+0x118>)
 800068c:	2100      	movs	r1, #0
 800068e:	4825      	ldr	r0, [pc, #148]	; (8000724 <main+0x11c>)
 8000690:	f009 ffe2 	bl	800a658 <osThreadNew>
 8000694:	4603      	mov	r3, r0
 8000696:	4a24      	ldr	r2, [pc, #144]	; (8000728 <main+0x120>)
 8000698:	6013      	str	r3, [r2, #0]

  /* creation of printTask */
  printTaskHandle = osThreadNew(printTask_func, NULL, &printTask_attributes);
 800069a:	4a24      	ldr	r2, [pc, #144]	; (800072c <main+0x124>)
 800069c:	2100      	movs	r1, #0
 800069e:	4824      	ldr	r0, [pc, #144]	; (8000730 <main+0x128>)
 80006a0:	f009 ffda 	bl	800a658 <osThreadNew>
 80006a4:	4603      	mov	r3, r0
 80006a6:	4a23      	ldr	r2, [pc, #140]	; (8000734 <main+0x12c>)
 80006a8:	6013      	str	r3, [r2, #0]

  /* creation of tarea_UART */
  tarea_UARTHandle = osThreadNew(tarea_UART_func, NULL, &tarea_UART_attributes);
 80006aa:	4a23      	ldr	r2, [pc, #140]	; (8000738 <main+0x130>)
 80006ac:	2100      	movs	r1, #0
 80006ae:	4823      	ldr	r0, [pc, #140]	; (800073c <main+0x134>)
 80006b0:	f009 ffd2 	bl	800a658 <osThreadNew>
 80006b4:	4603      	mov	r3, r0
 80006b6:	4a22      	ldr	r2, [pc, #136]	; (8000740 <main+0x138>)
 80006b8:	6013      	str	r3, [r2, #0]

  /* creation of temporizador */
  temporizadorHandle = osThreadNew(temporizador_func, NULL, &temporizador_attributes);
 80006ba:	4a22      	ldr	r2, [pc, #136]	; (8000744 <main+0x13c>)
 80006bc:	2100      	movs	r1, #0
 80006be:	4822      	ldr	r0, [pc, #136]	; (8000748 <main+0x140>)
 80006c0:	f009 ffca 	bl	800a658 <osThreadNew>
 80006c4:	4603      	mov	r3, r0
 80006c6:	4a21      	ldr	r2, [pc, #132]	; (800074c <main+0x144>)
 80006c8:	6013      	str	r3, [r2, #0]

  /* creation of sendMQTT */
  sendMQTTHandle = osThreadNew(sendMQTT_func, NULL, &sendMQTT_attributes);
 80006ca:	4a21      	ldr	r2, [pc, #132]	; (8000750 <main+0x148>)
 80006cc:	2100      	movs	r1, #0
 80006ce:	4821      	ldr	r0, [pc, #132]	; (8000754 <main+0x14c>)
 80006d0:	f009 ffc2 	bl	800a658 <osThreadNew>
 80006d4:	4603      	mov	r3, r0
 80006d6:	4a20      	ldr	r2, [pc, #128]	; (8000758 <main+0x150>)
 80006d8:	6013      	str	r3, [r2, #0]

  /* creation of wifiStartTask */
  wifiStartTaskHandle = osThreadNew(wifiStartTask_func, NULL, &wifiStartTask_attributes);
 80006da:	4a20      	ldr	r2, [pc, #128]	; (800075c <main+0x154>)
 80006dc:	2100      	movs	r1, #0
 80006de:	4820      	ldr	r0, [pc, #128]	; (8000760 <main+0x158>)
 80006e0:	f009 ffba 	bl	800a658 <osThreadNew>
 80006e4:	4603      	mov	r3, r0
 80006e6:	4a1f      	ldr	r2, [pc, #124]	; (8000764 <main+0x15c>)
 80006e8:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  HAL_UART_Receive_IT(&huart1,&rec_data,1);
 80006ea:	2201      	movs	r2, #1
 80006ec:	491e      	ldr	r1, [pc, #120]	; (8000768 <main+0x160>)
 80006ee:	481f      	ldr	r0, [pc, #124]	; (800076c <main+0x164>)
 80006f0:	f007 f990 	bl	8007a14 <HAL_UART_Receive_IT>
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80006f4:	f009 ff8a 	bl	800a60c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006f8:	e7fe      	b.n	80006f8 <main+0xf0>
 80006fa:	bf00      	nop
 80006fc:	200007b0 	.word	0x200007b0
 8000700:	0800f5e4 	.word	0x0800f5e4
 8000704:	080100e0 	.word	0x080100e0
 8000708:	20000790 	.word	0x20000790
 800070c:	080100f8 	.word	0x080100f8
 8000710:	20000794 	.word	0x20000794
 8000714:	0800ffe4 	.word	0x0800ffe4
 8000718:	08001209 	.word	0x08001209
 800071c:	20000774 	.word	0x20000774
 8000720:	08010008 	.word	0x08010008
 8000724:	08001521 	.word	0x08001521
 8000728:	20000778 	.word	0x20000778
 800072c:	0801002c 	.word	0x0801002c
 8000730:	080016fd 	.word	0x080016fd
 8000734:	2000077c 	.word	0x2000077c
 8000738:	08010050 	.word	0x08010050
 800073c:	08001765 	.word	0x08001765
 8000740:	20000780 	.word	0x20000780
 8000744:	08010074 	.word	0x08010074
 8000748:	080017b5 	.word	0x080017b5
 800074c:	20000784 	.word	0x20000784
 8000750:	08010098 	.word	0x08010098
 8000754:	080017f1 	.word	0x080017f1
 8000758:	20000788 	.word	0x20000788
 800075c:	080100bc 	.word	0x080100bc
 8000760:	080018a1 	.word	0x080018a1
 8000764:	2000078c 	.word	0x2000078c
 8000768:	200007bc 	.word	0x200007bc
 800076c:	20000264 	.word	0x20000264

08000770 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b096      	sub	sp, #88	; 0x58
 8000774:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000776:	f107 0314 	add.w	r3, r7, #20
 800077a:	2244      	movs	r2, #68	; 0x44
 800077c:	2100      	movs	r1, #0
 800077e:	4618      	mov	r0, r3
 8000780:	f00d fc2d 	bl	800dfde <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000784:	463b      	mov	r3, r7
 8000786:	2200      	movs	r2, #0
 8000788:	601a      	str	r2, [r3, #0]
 800078a:	605a      	str	r2, [r3, #4]
 800078c:	609a      	str	r2, [r3, #8]
 800078e:	60da      	str	r2, [r3, #12]
 8000790:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000792:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000796:	f003 fab7 	bl	8003d08 <HAL_PWREx_ControlVoltageScaling>
 800079a:	4603      	mov	r3, r0
 800079c:	2b00      	cmp	r3, #0
 800079e:	d001      	beq.n	80007a4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80007a0:	f001 f89a 	bl	80018d8 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80007a4:	f003 fa92 	bl	8003ccc <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80007a8:	4b22      	ldr	r3, [pc, #136]	; (8000834 <SystemClock_Config+0xc4>)
 80007aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80007ae:	4a21      	ldr	r2, [pc, #132]	; (8000834 <SystemClock_Config+0xc4>)
 80007b0:	f023 0318 	bic.w	r3, r3, #24
 80007b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_LSE
 80007b8:	231c      	movs	r3, #28
 80007ba:	617b      	str	r3, [r7, #20]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80007bc:	2301      	movs	r3, #1
 80007be:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80007c0:	2301      	movs	r3, #1
 80007c2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80007c4:	2301      	movs	r3, #1
 80007c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80007c8:	2300      	movs	r3, #0
 80007ca:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80007cc:	2360      	movs	r3, #96	; 0x60
 80007ce:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007d0:	2302      	movs	r3, #2
 80007d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80007d4:	2301      	movs	r3, #1
 80007d6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80007d8:	2301      	movs	r3, #1
 80007da:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 80007dc:	2328      	movs	r3, #40	; 0x28
 80007de:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80007e0:	2307      	movs	r3, #7
 80007e2:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80007e4:	2302      	movs	r3, #2
 80007e6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80007e8:	2302      	movs	r3, #2
 80007ea:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007ec:	f107 0314 	add.w	r3, r7, #20
 80007f0:	4618      	mov	r0, r3
 80007f2:	f003 fbab 	bl	8003f4c <HAL_RCC_OscConfig>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d001      	beq.n	8000800 <SystemClock_Config+0x90>
  {
    Error_Handler();
 80007fc:	f001 f86c 	bl	80018d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000800:	230f      	movs	r3, #15
 8000802:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000804:	2303      	movs	r3, #3
 8000806:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000808:	2300      	movs	r3, #0
 800080a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800080c:	2300      	movs	r3, #0
 800080e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000810:	2300      	movs	r3, #0
 8000812:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000814:	463b      	mov	r3, r7
 8000816:	2104      	movs	r1, #4
 8000818:	4618      	mov	r0, r3
 800081a:	f003 ff7f 	bl	800471c <HAL_RCC_ClockConfig>
 800081e:	4603      	mov	r3, r0
 8000820:	2b00      	cmp	r3, #0
 8000822:	d001      	beq.n	8000828 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8000824:	f001 f858 	bl	80018d8 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000828:	f004 fc9a 	bl	8005160 <HAL_RCCEx_EnableMSIPLLMode>
}
 800082c:	bf00      	nop
 800082e:	3758      	adds	r7, #88	; 0x58
 8000830:	46bd      	mov	sp, r7
 8000832:	bd80      	pop	{r7, pc}
 8000834:	40021000 	.word	0x40021000

08000838 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 800083c:	4b18      	ldr	r3, [pc, #96]	; (80008a0 <MX_DFSDM1_Init+0x68>)
 800083e:	4a19      	ldr	r2, [pc, #100]	; (80008a4 <MX_DFSDM1_Init+0x6c>)
 8000840:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 8000842:	4b17      	ldr	r3, [pc, #92]	; (80008a0 <MX_DFSDM1_Init+0x68>)
 8000844:	2201      	movs	r2, #1
 8000846:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8000848:	4b15      	ldr	r3, [pc, #84]	; (80008a0 <MX_DFSDM1_Init+0x68>)
 800084a:	2200      	movs	r2, #0
 800084c:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 800084e:	4b14      	ldr	r3, [pc, #80]	; (80008a0 <MX_DFSDM1_Init+0x68>)
 8000850:	2202      	movs	r2, #2
 8000852:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000854:	4b12      	ldr	r3, [pc, #72]	; (80008a0 <MX_DFSDM1_Init+0x68>)
 8000856:	2200      	movs	r2, #0
 8000858:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 800085a:	4b11      	ldr	r3, [pc, #68]	; (80008a0 <MX_DFSDM1_Init+0x68>)
 800085c:	2200      	movs	r2, #0
 800085e:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 8000860:	4b0f      	ldr	r3, [pc, #60]	; (80008a0 <MX_DFSDM1_Init+0x68>)
 8000862:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000866:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8000868:	4b0d      	ldr	r3, [pc, #52]	; (80008a0 <MX_DFSDM1_Init+0x68>)
 800086a:	2200      	movs	r2, #0
 800086c:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 800086e:	4b0c      	ldr	r3, [pc, #48]	; (80008a0 <MX_DFSDM1_Init+0x68>)
 8000870:	2204      	movs	r2, #4
 8000872:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000874:	4b0a      	ldr	r3, [pc, #40]	; (80008a0 <MX_DFSDM1_Init+0x68>)
 8000876:	2200      	movs	r2, #0
 8000878:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 800087a:	4b09      	ldr	r3, [pc, #36]	; (80008a0 <MX_DFSDM1_Init+0x68>)
 800087c:	2201      	movs	r2, #1
 800087e:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 8000880:	4b07      	ldr	r3, [pc, #28]	; (80008a0 <MX_DFSDM1_Init+0x68>)
 8000882:	2200      	movs	r2, #0
 8000884:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 8000886:	4b06      	ldr	r3, [pc, #24]	; (80008a0 <MX_DFSDM1_Init+0x68>)
 8000888:	2200      	movs	r2, #0
 800088a:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 800088c:	4804      	ldr	r0, [pc, #16]	; (80008a0 <MX_DFSDM1_Init+0x68>)
 800088e:	f001 fec3 	bl	8002618 <HAL_DFSDM_ChannelInit>
 8000892:	4603      	mov	r3, r0
 8000894:	2b00      	cmp	r3, #0
 8000896:	d001      	beq.n	800089c <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 8000898:	f001 f81e 	bl	80018d8 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 800089c:	bf00      	nop
 800089e:	bd80      	pop	{r7, pc}
 80008a0:	200000c8 	.word	0x200000c8
 80008a4:	40016020 	.word	0x40016020

080008a8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80008ac:	4b1b      	ldr	r3, [pc, #108]	; (800091c <MX_I2C2_Init+0x74>)
 80008ae:	4a1c      	ldr	r2, [pc, #112]	; (8000920 <MX_I2C2_Init+0x78>)
 80008b0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00000E14;
 80008b2:	4b1a      	ldr	r3, [pc, #104]	; (800091c <MX_I2C2_Init+0x74>)
 80008b4:	f640 6214 	movw	r2, #3604	; 0xe14
 80008b8:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80008ba:	4b18      	ldr	r3, [pc, #96]	; (800091c <MX_I2C2_Init+0x74>)
 80008bc:	2200      	movs	r2, #0
 80008be:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008c0:	4b16      	ldr	r3, [pc, #88]	; (800091c <MX_I2C2_Init+0x74>)
 80008c2:	2201      	movs	r2, #1
 80008c4:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008c6:	4b15      	ldr	r3, [pc, #84]	; (800091c <MX_I2C2_Init+0x74>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80008cc:	4b13      	ldr	r3, [pc, #76]	; (800091c <MX_I2C2_Init+0x74>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80008d2:	4b12      	ldr	r3, [pc, #72]	; (800091c <MX_I2C2_Init+0x74>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008d8:	4b10      	ldr	r3, [pc, #64]	; (800091c <MX_I2C2_Init+0x74>)
 80008da:	2200      	movs	r2, #0
 80008dc:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008de:	4b0f      	ldr	r3, [pc, #60]	; (800091c <MX_I2C2_Init+0x74>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80008e4:	480d      	ldr	r0, [pc, #52]	; (800091c <MX_I2C2_Init+0x74>)
 80008e6:	f002 fb09 	bl	8002efc <HAL_I2C_Init>
 80008ea:	4603      	mov	r3, r0
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d001      	beq.n	80008f4 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80008f0:	f000 fff2 	bl	80018d8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80008f4:	2100      	movs	r1, #0
 80008f6:	4809      	ldr	r0, [pc, #36]	; (800091c <MX_I2C2_Init+0x74>)
 80008f8:	f003 f808 	bl	800390c <HAL_I2CEx_ConfigAnalogFilter>
 80008fc:	4603      	mov	r3, r0
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d001      	beq.n	8000906 <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 8000902:	f000 ffe9 	bl	80018d8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000906:	2100      	movs	r1, #0
 8000908:	4804      	ldr	r0, [pc, #16]	; (800091c <MX_I2C2_Init+0x74>)
 800090a:	f003 f84a 	bl	80039a2 <HAL_I2CEx_ConfigDigitalFilter>
 800090e:	4603      	mov	r3, r0
 8000910:	2b00      	cmp	r3, #0
 8000912:	d001      	beq.n	8000918 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8000914:	f000 ffe0 	bl	80018d8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000918:	bf00      	nop
 800091a:	bd80      	pop	{r7, pc}
 800091c:	20000100 	.word	0x20000100
 8000920:	40005800 	.word	0x40005800

08000924 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8000928:	4b0f      	ldr	r3, [pc, #60]	; (8000968 <MX_QUADSPI_Init+0x44>)
 800092a:	4a10      	ldr	r2, [pc, #64]	; (800096c <MX_QUADSPI_Init+0x48>)
 800092c:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 2;
 800092e:	4b0e      	ldr	r3, [pc, #56]	; (8000968 <MX_QUADSPI_Init+0x44>)
 8000930:	2202      	movs	r2, #2
 8000932:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8000934:	4b0c      	ldr	r3, [pc, #48]	; (8000968 <MX_QUADSPI_Init+0x44>)
 8000936:	2204      	movs	r2, #4
 8000938:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 800093a:	4b0b      	ldr	r3, [pc, #44]	; (8000968 <MX_QUADSPI_Init+0x44>)
 800093c:	2210      	movs	r2, #16
 800093e:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 8000940:	4b09      	ldr	r3, [pc, #36]	; (8000968 <MX_QUADSPI_Init+0x44>)
 8000942:	2217      	movs	r2, #23
 8000944:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8000946:	4b08      	ldr	r3, [pc, #32]	; (8000968 <MX_QUADSPI_Init+0x44>)
 8000948:	2200      	movs	r2, #0
 800094a:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 800094c:	4b06      	ldr	r3, [pc, #24]	; (8000968 <MX_QUADSPI_Init+0x44>)
 800094e:	2200      	movs	r2, #0
 8000950:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000952:	4805      	ldr	r0, [pc, #20]	; (8000968 <MX_QUADSPI_Init+0x44>)
 8000954:	f003 fa3e 	bl	8003dd4 <HAL_QSPI_Init>
 8000958:	4603      	mov	r3, r0
 800095a:	2b00      	cmp	r3, #0
 800095c:	d001      	beq.n	8000962 <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 800095e:	f000 ffbb 	bl	80018d8 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8000962:	bf00      	nop
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	2000014c 	.word	0x2000014c
 800096c:	a0001000 	.word	0xa0001000

08000970 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b086      	sub	sp, #24
 8000974:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000976:	1d3b      	adds	r3, r7, #4
 8000978:	2200      	movs	r2, #0
 800097a:	601a      	str	r2, [r3, #0]
 800097c:	605a      	str	r2, [r3, #4]
 800097e:	609a      	str	r2, [r3, #8]
 8000980:	60da      	str	r2, [r3, #12]
 8000982:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000984:	2300      	movs	r3, #0
 8000986:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000988:	4b25      	ldr	r3, [pc, #148]	; (8000a20 <MX_RTC_Init+0xb0>)
 800098a:	4a26      	ldr	r2, [pc, #152]	; (8000a24 <MX_RTC_Init+0xb4>)
 800098c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800098e:	4b24      	ldr	r3, [pc, #144]	; (8000a20 <MX_RTC_Init+0xb0>)
 8000990:	2200      	movs	r2, #0
 8000992:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000994:	4b22      	ldr	r3, [pc, #136]	; (8000a20 <MX_RTC_Init+0xb0>)
 8000996:	227f      	movs	r2, #127	; 0x7f
 8000998:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800099a:	4b21      	ldr	r3, [pc, #132]	; (8000a20 <MX_RTC_Init+0xb0>)
 800099c:	22ff      	movs	r2, #255	; 0xff
 800099e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80009a0:	4b1f      	ldr	r3, [pc, #124]	; (8000a20 <MX_RTC_Init+0xb0>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80009a6:	4b1e      	ldr	r3, [pc, #120]	; (8000a20 <MX_RTC_Init+0xb0>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80009ac:	4b1c      	ldr	r3, [pc, #112]	; (8000a20 <MX_RTC_Init+0xb0>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80009b2:	4b1b      	ldr	r3, [pc, #108]	; (8000a20 <MX_RTC_Init+0xb0>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80009b8:	4819      	ldr	r0, [pc, #100]	; (8000a20 <MX_RTC_Init+0xb0>)
 80009ba:	f004 fdb3 	bl	8005524 <HAL_RTC_Init>
 80009be:	4603      	mov	r3, r0
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d001      	beq.n	80009c8 <MX_RTC_Init+0x58>
  {
    Error_Handler();
 80009c4:	f000 ff88 	bl	80018d8 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 13;
 80009c8:	230d      	movs	r3, #13
 80009ca:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 1;
 80009cc:	2301      	movs	r3, #1
 80009ce:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0;
 80009d0:	2300      	movs	r3, #0
 80009d2:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80009d4:	2300      	movs	r3, #0
 80009d6:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80009d8:	2300      	movs	r3, #0
 80009da:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 80009dc:	1d3b      	adds	r3, r7, #4
 80009de:	2200      	movs	r2, #0
 80009e0:	4619      	mov	r1, r3
 80009e2:	480f      	ldr	r0, [pc, #60]	; (8000a20 <MX_RTC_Init+0xb0>)
 80009e4:	f004 fe19 	bl	800561a <HAL_RTC_SetTime>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d001      	beq.n	80009f2 <MX_RTC_Init+0x82>
  {
    Error_Handler();
 80009ee:	f000 ff73 	bl	80018d8 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80009f2:	2301      	movs	r3, #1
 80009f4:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 80009f6:	2301      	movs	r3, #1
 80009f8:	707b      	strb	r3, [r7, #1]
  sDate.Date = 1;
 80009fa:	2301      	movs	r3, #1
 80009fc:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0;
 80009fe:	2300      	movs	r3, #0
 8000a00:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8000a02:	463b      	mov	r3, r7
 8000a04:	2200      	movs	r2, #0
 8000a06:	4619      	mov	r1, r3
 8000a08:	4805      	ldr	r0, [pc, #20]	; (8000a20 <MX_RTC_Init+0xb0>)
 8000a0a:	f004 feff 	bl	800580c <HAL_RTC_SetDate>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d001      	beq.n	8000a18 <MX_RTC_Init+0xa8>
  {
    Error_Handler();
 8000a14:	f000 ff60 	bl	80018d8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000a18:	bf00      	nop
 8000a1a:	3718      	adds	r7, #24
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bd80      	pop	{r7, pc}
 8000a20:	20000190 	.word	0x20000190
 8000a24:	40002800 	.word	0x40002800

08000a28 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000a2c:	4b1b      	ldr	r3, [pc, #108]	; (8000a9c <MX_SPI3_Init+0x74>)
 8000a2e:	4a1c      	ldr	r2, [pc, #112]	; (8000aa0 <MX_SPI3_Init+0x78>)
 8000a30:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000a32:	4b1a      	ldr	r3, [pc, #104]	; (8000a9c <MX_SPI3_Init+0x74>)
 8000a34:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000a38:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000a3a:	4b18      	ldr	r3, [pc, #96]	; (8000a9c <MX_SPI3_Init+0x74>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8000a40:	4b16      	ldr	r3, [pc, #88]	; (8000a9c <MX_SPI3_Init+0x74>)
 8000a42:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000a46:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a48:	4b14      	ldr	r3, [pc, #80]	; (8000a9c <MX_SPI3_Init+0x74>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a4e:	4b13      	ldr	r3, [pc, #76]	; (8000a9c <MX_SPI3_Init+0x74>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000a54:	4b11      	ldr	r3, [pc, #68]	; (8000a9c <MX_SPI3_Init+0x74>)
 8000a56:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a5a:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000a5c:	4b0f      	ldr	r3, [pc, #60]	; (8000a9c <MX_SPI3_Init+0x74>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a62:	4b0e      	ldr	r3, [pc, #56]	; (8000a9c <MX_SPI3_Init+0x74>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a68:	4b0c      	ldr	r3, [pc, #48]	; (8000a9c <MX_SPI3_Init+0x74>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a6e:	4b0b      	ldr	r3, [pc, #44]	; (8000a9c <MX_SPI3_Init+0x74>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000a74:	4b09      	ldr	r3, [pc, #36]	; (8000a9c <MX_SPI3_Init+0x74>)
 8000a76:	2207      	movs	r2, #7
 8000a78:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000a7a:	4b08      	ldr	r3, [pc, #32]	; (8000a9c <MX_SPI3_Init+0x74>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000a80:	4b06      	ldr	r3, [pc, #24]	; (8000a9c <MX_SPI3_Init+0x74>)
 8000a82:	2208      	movs	r2, #8
 8000a84:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000a86:	4805      	ldr	r0, [pc, #20]	; (8000a9c <MX_SPI3_Init+0x74>)
 8000a88:	f005 f866 	bl	8005b58 <HAL_SPI_Init>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d001      	beq.n	8000a96 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000a92:	f000 ff21 	bl	80018d8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000a96:	bf00      	nop
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	200001b4 	.word	0x200001b4
 8000aa0:	40003c00 	.word	0x40003c00

08000aa4 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b084      	sub	sp, #16
 8000aa8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000aaa:	1d3b      	adds	r3, r7, #4
 8000aac:	2200      	movs	r2, #0
 8000aae:	601a      	str	r2, [r3, #0]
 8000ab0:	605a      	str	r2, [r3, #4]
 8000ab2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8000ab4:	4b14      	ldr	r3, [pc, #80]	; (8000b08 <MX_TIM7_Init+0x64>)
 8000ab6:	4a15      	ldr	r2, [pc, #84]	; (8000b0c <MX_TIM7_Init+0x68>)
 8000ab8:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 8000aba:	4b13      	ldr	r3, [pc, #76]	; (8000b08 <MX_TIM7_Init+0x64>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ac0:	4b11      	ldr	r3, [pc, #68]	; (8000b08 <MX_TIM7_Init+0x64>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 799;
 8000ac6:	4b10      	ldr	r3, [pc, #64]	; (8000b08 <MX_TIM7_Init+0x64>)
 8000ac8:	f240 321f 	movw	r2, #799	; 0x31f
 8000acc:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ace:	4b0e      	ldr	r3, [pc, #56]	; (8000b08 <MX_TIM7_Init+0x64>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000ad4:	480c      	ldr	r0, [pc, #48]	; (8000b08 <MX_TIM7_Init+0x64>)
 8000ad6:	f006 fb6c 	bl	80071b2 <HAL_TIM_Base_Init>
 8000ada:	4603      	mov	r3, r0
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d001      	beq.n	8000ae4 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8000ae0:	f000 fefa 	bl	80018d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000aec:	1d3b      	adds	r3, r7, #4
 8000aee:	4619      	mov	r1, r3
 8000af0:	4805      	ldr	r0, [pc, #20]	; (8000b08 <MX_TIM7_Init+0x64>)
 8000af2:	f006 fe07 	bl	8007704 <HAL_TIMEx_MasterConfigSynchronization>
 8000af6:	4603      	mov	r3, r0
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d001      	beq.n	8000b00 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8000afc:	f000 feec 	bl	80018d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8000b00:	bf00      	nop
 8000b02:	3710      	adds	r7, #16
 8000b04:	46bd      	mov	sp, r7
 8000b06:	bd80      	pop	{r7, pc}
 8000b08:	20000218 	.word	0x20000218
 8000b0c:	40001400 	.word	0x40001400

08000b10 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000b14:	4b14      	ldr	r3, [pc, #80]	; (8000b68 <MX_USART1_UART_Init+0x58>)
 8000b16:	4a15      	ldr	r2, [pc, #84]	; (8000b6c <MX_USART1_UART_Init+0x5c>)
 8000b18:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000b1a:	4b13      	ldr	r3, [pc, #76]	; (8000b68 <MX_USART1_UART_Init+0x58>)
 8000b1c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b20:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b22:	4b11      	ldr	r3, [pc, #68]	; (8000b68 <MX_USART1_UART_Init+0x58>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000b28:	4b0f      	ldr	r3, [pc, #60]	; (8000b68 <MX_USART1_UART_Init+0x58>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000b2e:	4b0e      	ldr	r3, [pc, #56]	; (8000b68 <MX_USART1_UART_Init+0x58>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000b34:	4b0c      	ldr	r3, [pc, #48]	; (8000b68 <MX_USART1_UART_Init+0x58>)
 8000b36:	220c      	movs	r2, #12
 8000b38:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b3a:	4b0b      	ldr	r3, [pc, #44]	; (8000b68 <MX_USART1_UART_Init+0x58>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b40:	4b09      	ldr	r3, [pc, #36]	; (8000b68 <MX_USART1_UART_Init+0x58>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b46:	4b08      	ldr	r3, [pc, #32]	; (8000b68 <MX_USART1_UART_Init+0x58>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b4c:	4b06      	ldr	r3, [pc, #24]	; (8000b68 <MX_USART1_UART_Init+0x58>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000b52:	4805      	ldr	r0, [pc, #20]	; (8000b68 <MX_USART1_UART_Init+0x58>)
 8000b54:	f006 fe7c 	bl	8007850 <HAL_UART_Init>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d001      	beq.n	8000b62 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000b5e:	f000 febb 	bl	80018d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000b62:	bf00      	nop
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	20000264 	.word	0x20000264
 8000b6c:	40013800 	.word	0x40013800

08000b70 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000b74:	4b14      	ldr	r3, [pc, #80]	; (8000bc8 <MX_USART3_UART_Init+0x58>)
 8000b76:	4a15      	ldr	r2, [pc, #84]	; (8000bcc <MX_USART3_UART_Init+0x5c>)
 8000b78:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000b7a:	4b13      	ldr	r3, [pc, #76]	; (8000bc8 <MX_USART3_UART_Init+0x58>)
 8000b7c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b80:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000b82:	4b11      	ldr	r3, [pc, #68]	; (8000bc8 <MX_USART3_UART_Init+0x58>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000b88:	4b0f      	ldr	r3, [pc, #60]	; (8000bc8 <MX_USART3_UART_Init+0x58>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000b8e:	4b0e      	ldr	r3, [pc, #56]	; (8000bc8 <MX_USART3_UART_Init+0x58>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000b94:	4b0c      	ldr	r3, [pc, #48]	; (8000bc8 <MX_USART3_UART_Init+0x58>)
 8000b96:	220c      	movs	r2, #12
 8000b98:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b9a:	4b0b      	ldr	r3, [pc, #44]	; (8000bc8 <MX_USART3_UART_Init+0x58>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ba0:	4b09      	ldr	r3, [pc, #36]	; (8000bc8 <MX_USART3_UART_Init+0x58>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ba6:	4b08      	ldr	r3, [pc, #32]	; (8000bc8 <MX_USART3_UART_Init+0x58>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000bac:	4b06      	ldr	r3, [pc, #24]	; (8000bc8 <MX_USART3_UART_Init+0x58>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000bb2:	4805      	ldr	r0, [pc, #20]	; (8000bc8 <MX_USART3_UART_Init+0x58>)
 8000bb4:	f006 fe4c 	bl	8007850 <HAL_UART_Init>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d001      	beq.n	8000bc2 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000bbe:	f000 fe8b 	bl	80018d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000bc2:	bf00      	nop
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	200002e8 	.word	0x200002e8
 8000bcc:	40004800 	.word	0x40004800

08000bd0 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000bd4:	4b14      	ldr	r3, [pc, #80]	; (8000c28 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000bd6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000bda:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000bdc:	4b12      	ldr	r3, [pc, #72]	; (8000c28 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000bde:	2206      	movs	r2, #6
 8000be0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000be2:	4b11      	ldr	r3, [pc, #68]	; (8000c28 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000be4:	2202      	movs	r2, #2
 8000be6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000be8:	4b0f      	ldr	r3, [pc, #60]	; (8000c28 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000bea:	2202      	movs	r2, #2
 8000bec:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000bee:	4b0e      	ldr	r3, [pc, #56]	; (8000c28 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000bf4:	4b0c      	ldr	r3, [pc, #48]	; (8000c28 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000bfa:	4b0b      	ldr	r3, [pc, #44]	; (8000c28 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8000c00:	4b09      	ldr	r3, [pc, #36]	; (8000c28 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000c06:	4b08      	ldr	r3, [pc, #32]	; (8000c28 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8000c0c:	4b06      	ldr	r3, [pc, #24]	; (8000c28 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000c12:	4805      	ldr	r0, [pc, #20]	; (8000c28 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c14:	f002 ff11 	bl	8003a3a <HAL_PCD_Init>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d001      	beq.n	8000c22 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000c1e:	f000 fe5b 	bl	80018d8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000c22:	bf00      	nop
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	2000036c 	.word	0x2000036c

08000c2c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b08a      	sub	sp, #40	; 0x28
 8000c30:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c32:	f107 0314 	add.w	r3, r7, #20
 8000c36:	2200      	movs	r2, #0
 8000c38:	601a      	str	r2, [r3, #0]
 8000c3a:	605a      	str	r2, [r3, #4]
 8000c3c:	609a      	str	r2, [r3, #8]
 8000c3e:	60da      	str	r2, [r3, #12]
 8000c40:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c42:	4bbb      	ldr	r3, [pc, #748]	; (8000f30 <MX_GPIO_Init+0x304>)
 8000c44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c46:	4aba      	ldr	r2, [pc, #744]	; (8000f30 <MX_GPIO_Init+0x304>)
 8000c48:	f043 0310 	orr.w	r3, r3, #16
 8000c4c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c4e:	4bb8      	ldr	r3, [pc, #736]	; (8000f30 <MX_GPIO_Init+0x304>)
 8000c50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c52:	f003 0310 	and.w	r3, r3, #16
 8000c56:	613b      	str	r3, [r7, #16]
 8000c58:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c5a:	4bb5      	ldr	r3, [pc, #724]	; (8000f30 <MX_GPIO_Init+0x304>)
 8000c5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c5e:	4ab4      	ldr	r2, [pc, #720]	; (8000f30 <MX_GPIO_Init+0x304>)
 8000c60:	f043 0304 	orr.w	r3, r3, #4
 8000c64:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c66:	4bb2      	ldr	r3, [pc, #712]	; (8000f30 <MX_GPIO_Init+0x304>)
 8000c68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c6a:	f003 0304 	and.w	r3, r3, #4
 8000c6e:	60fb      	str	r3, [r7, #12]
 8000c70:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c72:	4baf      	ldr	r3, [pc, #700]	; (8000f30 <MX_GPIO_Init+0x304>)
 8000c74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c76:	4aae      	ldr	r2, [pc, #696]	; (8000f30 <MX_GPIO_Init+0x304>)
 8000c78:	f043 0301 	orr.w	r3, r3, #1
 8000c7c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c7e:	4bac      	ldr	r3, [pc, #688]	; (8000f30 <MX_GPIO_Init+0x304>)
 8000c80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c82:	f003 0301 	and.w	r3, r3, #1
 8000c86:	60bb      	str	r3, [r7, #8]
 8000c88:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c8a:	4ba9      	ldr	r3, [pc, #676]	; (8000f30 <MX_GPIO_Init+0x304>)
 8000c8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c8e:	4aa8      	ldr	r2, [pc, #672]	; (8000f30 <MX_GPIO_Init+0x304>)
 8000c90:	f043 0302 	orr.w	r3, r3, #2
 8000c94:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c96:	4ba6      	ldr	r3, [pc, #664]	; (8000f30 <MX_GPIO_Init+0x304>)
 8000c98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c9a:	f003 0302 	and.w	r3, r3, #2
 8000c9e:	607b      	str	r3, [r7, #4]
 8000ca0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ca2:	4ba3      	ldr	r3, [pc, #652]	; (8000f30 <MX_GPIO_Init+0x304>)
 8000ca4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ca6:	4aa2      	ldr	r2, [pc, #648]	; (8000f30 <MX_GPIO_Init+0x304>)
 8000ca8:	f043 0308 	orr.w	r3, r3, #8
 8000cac:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cae:	4ba0      	ldr	r3, [pc, #640]	; (8000f30 <MX_GPIO_Init+0x304>)
 8000cb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cb2:	f003 0308 	and.w	r3, r3, #8
 8000cb6:	603b      	str	r3, [r7, #0]
 8000cb8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 8000cba:	2200      	movs	r2, #0
 8000cbc:	f44f 718a 	mov.w	r1, #276	; 0x114
 8000cc0:	489c      	ldr	r0, [pc, #624]	; (8000f34 <MX_GPIO_Init+0x308>)
 8000cc2:	f002 f8eb 	bl	8002e9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|LED1_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	f248 1124 	movw	r1, #33060	; 0x8124
 8000ccc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cd0:	f002 f8e4 	bl	8002e9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	f24f 0114 	movw	r1, #61460	; 0xf014
 8000cda:	4897      	ldr	r0, [pc, #604]	; (8000f38 <MX_GPIO_Init+0x30c>)
 8000cdc:	f002 f8de 	bl	8002e9c <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	f241 0181 	movw	r1, #4225	; 0x1081
 8000ce6:	4895      	ldr	r0, [pc, #596]	; (8000f3c <MX_GPIO_Init+0x310>)
 8000ce8:	f002 f8d8 	bl	8002e9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000cec:	2201      	movs	r2, #1
 8000cee:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000cf2:	4892      	ldr	r0, [pc, #584]	; (8000f3c <MX_GPIO_Init+0x310>)
 8000cf4:	f002 f8d2 	bl	8002e9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	f44f 7110 	mov.w	r1, #576	; 0x240
 8000cfe:	4890      	ldr	r0, [pc, #576]	; (8000f40 <MX_GPIO_Init+0x314>)
 8000d00:	f002 f8cc 	bl	8002e9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000d04:	2201      	movs	r2, #1
 8000d06:	2101      	movs	r1, #1
 8000d08:	488a      	ldr	r0, [pc, #552]	; (8000f34 <MX_GPIO_Init+0x308>)
 8000d0a:	f002 f8c7 	bl	8002e9c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8000d0e:	f240 1315 	movw	r3, #277	; 0x115
 8000d12:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d14:	2301      	movs	r3, #1
 8000d16:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d20:	f107 0314 	add.w	r3, r7, #20
 8000d24:	4619      	mov	r1, r3
 8000d26:	4883      	ldr	r0, [pc, #524]	; (8000f34 <MX_GPIO_Init+0x308>)
 8000d28:	f001 fe02 	bl	8002930 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 8000d2c:	236a      	movs	r3, #106	; 0x6a
 8000d2e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d30:	4b84      	ldr	r3, [pc, #528]	; (8000f44 <MX_GPIO_Init+0x318>)
 8000d32:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d34:	2300      	movs	r3, #0
 8000d36:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d38:	f107 0314 	add.w	r3, r7, #20
 8000d3c:	4619      	mov	r1, r3
 8000d3e:	487d      	ldr	r0, [pc, #500]	; (8000f34 <MX_GPIO_Init+0x308>)
 8000d40:	f001 fdf6 	bl	8002930 <HAL_GPIO_Init>

  /*Configure GPIO pins : BOTON_Pin VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = BOTON_Pin|VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8000d44:	f44f 5306 	mov.w	r3, #8576	; 0x2180
 8000d48:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d4a:	4b7e      	ldr	r3, [pc, #504]	; (8000f44 <MX_GPIO_Init+0x318>)
 8000d4c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d52:	f107 0314 	add.w	r3, r7, #20
 8000d56:	4619      	mov	r1, r3
 8000d58:	4879      	ldr	r0, [pc, #484]	; (8000f40 <MX_GPIO_Init+0x314>)
 8000d5a:	f001 fde9 	bl	8002930 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 8000d5e:	233f      	movs	r3, #63	; 0x3f
 8000d60:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000d62:	230b      	movs	r3, #11
 8000d64:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d66:	2300      	movs	r3, #0
 8000d68:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d6a:	f107 0314 	add.w	r3, r7, #20
 8000d6e:	4619      	mov	r1, r3
 8000d70:	4873      	ldr	r0, [pc, #460]	; (8000f40 <MX_GPIO_Init+0x314>)
 8000d72:	f001 fddd 	bl	8002930 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8000d76:	2303      	movs	r3, #3
 8000d78:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d7a:	2302      	movs	r3, #2
 8000d7c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d82:	2303      	movs	r3, #3
 8000d84:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000d86:	2308      	movs	r3, #8
 8000d88:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d8a:	f107 0314 	add.w	r3, r7, #20
 8000d8e:	4619      	mov	r1, r3
 8000d90:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d94:	f001 fdcc 	bl	8002930 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin LED1_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|LED1_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 8000d98:	f248 1324 	movw	r3, #33060	; 0x8124
 8000d9c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d9e:	2301      	movs	r3, #1
 8000da0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da2:	2300      	movs	r3, #0
 8000da4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000da6:	2300      	movs	r3, #0
 8000da8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000daa:	f107 0314 	add.w	r3, r7, #20
 8000dae:	4619      	mov	r1, r3
 8000db0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000db4:	f001 fdbc 	bl	8002930 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 8000db8:	2308      	movs	r3, #8
 8000dba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dbc:	2302      	movs	r3, #2
 8000dbe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000dc8:	2301      	movs	r3, #1
 8000dca:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 8000dcc:	f107 0314 	add.w	r3, r7, #20
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dd6:	f001 fdab 	bl	8002930 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D7_Pin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 8000dda:	2310      	movs	r3, #16
 8000ddc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000dde:	230b      	movs	r3, #11
 8000de0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de2:	2300      	movs	r3, #0
 8000de4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 8000de6:	f107 0314 	add.w	r3, r7, #20
 8000dea:	4619      	mov	r1, r3
 8000dec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000df0:	f001 fd9e 	bl	8002930 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D12_Pin|ARD_D11_Pin;
 8000df4:	23c0      	movs	r3, #192	; 0xc0
 8000df6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000df8:	2302      	movs	r3, #2
 8000dfa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e00:	2303      	movs	r3, #3
 8000e02:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000e04:	2305      	movs	r3, #5
 8000e06:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e08:	f107 0314 	add.w	r3, r7, #20
 8000e0c:	4619      	mov	r1, r3
 8000e0e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e12:	f001 fd8d 	bl	8002930 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8000e16:	2301      	movs	r3, #1
 8000e18:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e1a:	4b4a      	ldr	r3, [pc, #296]	; (8000f44 <MX_GPIO_Init+0x318>)
 8000e1c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8000e22:	f107 0314 	add.w	r3, r7, #20
 8000e26:	4619      	mov	r1, r3
 8000e28:	4843      	ldr	r0, [pc, #268]	; (8000f38 <MX_GPIO_Init+0x30c>)
 8000e2a:	f001 fd81 	bl	8002930 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8000e2e:	2302      	movs	r3, #2
 8000e30:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000e32:	230b      	movs	r3, #11
 8000e34:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e36:	2300      	movs	r3, #0
 8000e38:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8000e3a:	f107 0314 	add.w	r3, r7, #20
 8000e3e:	4619      	mov	r1, r3
 8000e40:	483d      	ldr	r0, [pc, #244]	; (8000f38 <MX_GPIO_Init+0x30c>)
 8000e42:	f001 fd75 	bl	8002930 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000e46:	f24f 0314 	movw	r3, #61460	; 0xf014
 8000e4a:	617b      	str	r3, [r7, #20]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e4c:	2301      	movs	r3, #1
 8000e4e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e50:	2300      	movs	r3, #0
 8000e52:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e54:	2300      	movs	r3, #0
 8000e56:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e58:	f107 0314 	add.w	r3, r7, #20
 8000e5c:	4619      	mov	r1, r3
 8000e5e:	4836      	ldr	r0, [pc, #216]	; (8000f38 <MX_GPIO_Init+0x30c>)
 8000e60:	f001 fd66 	bl	8002930 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 8000e64:	f64c 4304 	movw	r3, #52228	; 0xcc04
 8000e68:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e6a:	4b36      	ldr	r3, [pc, #216]	; (8000f44 <MX_GPIO_Init+0x318>)
 8000e6c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e72:	f107 0314 	add.w	r3, r7, #20
 8000e76:	4619      	mov	r1, r3
 8000e78:	4830      	ldr	r0, [pc, #192]	; (8000f3c <MX_GPIO_Init+0x310>)
 8000e7a:	f001 fd59 	bl	8002930 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 8000e7e:	f243 0381 	movw	r3, #12417	; 0x3081
 8000e82:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e84:	2301      	movs	r3, #1
 8000e86:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e90:	f107 0314 	add.w	r3, r7, #20
 8000e94:	4619      	mov	r1, r3
 8000e96:	4829      	ldr	r0, [pc, #164]	; (8000f3c <MX_GPIO_Init+0x310>)
 8000e98:	f001 fd4a 	bl	8002930 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8000e9c:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000ea0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ea2:	2301      	movs	r3, #1
 8000ea4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000eae:	f107 0314 	add.w	r3, r7, #20
 8000eb2:	4619      	mov	r1, r3
 8000eb4:	4822      	ldr	r0, [pc, #136]	; (8000f40 <MX_GPIO_Init+0x314>)
 8000eb6:	f001 fd3b 	bl	8002930 <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 8000eba:	2302      	movs	r3, #2
 8000ebc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ebe:	2302      	movs	r3, #2
 8000ec0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ec6:	2303      	movs	r3, #3
 8000ec8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000eca:	2305      	movs	r3, #5
 8000ecc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8000ece:	f107 0314 	add.w	r3, r7, #20
 8000ed2:	4619      	mov	r1, r3
 8000ed4:	4819      	ldr	r0, [pc, #100]	; (8000f3c <MX_GPIO_Init+0x310>)
 8000ed6:	f001 fd2b 	bl	8002930 <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8000eda:	2378      	movs	r3, #120	; 0x78
 8000edc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ede:	2302      	movs	r3, #2
 8000ee0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ee6:	2303      	movs	r3, #3
 8000ee8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000eea:	2307      	movs	r3, #7
 8000eec:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000eee:	f107 0314 	add.w	r3, r7, #20
 8000ef2:	4619      	mov	r1, r3
 8000ef4:	4811      	ldr	r0, [pc, #68]	; (8000f3c <MX_GPIO_Init+0x310>)
 8000ef6:	f001 fd1b 	bl	8002930 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8000efa:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000efe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f00:	2312      	movs	r3, #18
 8000f02:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f04:	2300      	movs	r3, #0
 8000f06:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f08:	2303      	movs	r3, #3
 8000f0a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000f0c:	2304      	movs	r3, #4
 8000f0e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f10:	f107 0314 	add.w	r3, r7, #20
 8000f14:	4619      	mov	r1, r3
 8000f16:	4808      	ldr	r0, [pc, #32]	; (8000f38 <MX_GPIO_Init+0x30c>)
 8000f18:	f001 fd0a 	bl	8002930 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	2105      	movs	r1, #5
 8000f20:	2007      	movs	r0, #7
 8000f22:	f001 fb41 	bl	80025a8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000f26:	2007      	movs	r0, #7
 8000f28:	f001 fb5a 	bl	80025e0 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	e00b      	b.n	8000f48 <MX_GPIO_Init+0x31c>
 8000f30:	40021000 	.word	0x40021000
 8000f34:	48001000 	.word	0x48001000
 8000f38:	48000400 	.word	0x48000400
 8000f3c:	48000c00 	.word	0x48000c00
 8000f40:	48000800 	.word	0x48000800
 8000f44:	10110000 	.word	0x10110000
 8000f48:	2105      	movs	r1, #5
 8000f4a:	2017      	movs	r0, #23
 8000f4c:	f001 fb2c 	bl	80025a8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000f50:	2017      	movs	r0, #23
 8000f52:	f001 fb45 	bl	80025e0 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000f56:	2200      	movs	r2, #0
 8000f58:	2105      	movs	r1, #5
 8000f5a:	2028      	movs	r0, #40	; 0x28
 8000f5c:	f001 fb24 	bl	80025a8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000f60:	2028      	movs	r0, #40	; 0x28
 8000f62:	f001 fb3d 	bl	80025e0 <HAL_NVIC_EnableIRQ>

}
 8000f66:	bf00      	nop
 8000f68:	3728      	adds	r7, #40	; 0x28
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop

08000f70 <_write>:

/* USER CODE BEGIN 4 */

int _write(int file, char *ptr, int len)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b086      	sub	sp, #24
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	60f8      	str	r0, [r7, #12]
 8000f78:	60b9      	str	r1, [r7, #8]
 8000f7a:	607a      	str	r2, [r7, #4]
	int DataIdx;
	for(DataIdx=0; DataIdx<len; DataIdx++)
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	617b      	str	r3, [r7, #20]
 8000f80:	e009      	b.n	8000f96 <_write+0x26>
	{
		ITM_SendChar(*ptr++);
 8000f82:	68bb      	ldr	r3, [r7, #8]
 8000f84:	1c5a      	adds	r2, r3, #1
 8000f86:	60ba      	str	r2, [r7, #8]
 8000f88:	781b      	ldrb	r3, [r3, #0]
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f7ff fafa 	bl	8000584 <ITM_SendChar>
	for(DataIdx=0; DataIdx<len; DataIdx++)
 8000f90:	697b      	ldr	r3, [r7, #20]
 8000f92:	3301      	adds	r3, #1
 8000f94:	617b      	str	r3, [r7, #20]
 8000f96:	697a      	ldr	r2, [r7, #20]
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	429a      	cmp	r2, r3
 8000f9c:	dbf1      	blt.n	8000f82 <_write+0x12>
	}
	return len;
 8000f9e:	687b      	ldr	r3, [r7, #4]
}
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	3718      	adds	r7, #24
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}

08000fa8 <BSP_ACCELERO_Init_INT>:

ACCELERO_StatusTypeDef BSP_ACCELERO_Init_INT(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b082      	sub	sp, #8
 8000fac:	af00      	add	r7, sp, #0
	ACCELERO_StatusTypeDef ret;
	ret = BSP_ACCELERO_Init();
 8000fae:	f008 f93b 	bl	8009228 <BSP_ACCELERO_Init>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	71fb      	strb	r3, [r7, #7]
	if (ret == ACCELERO_OK)
 8000fb6:	79fb      	ldrb	r3, [r7, #7]
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d12f      	bne.n	800101c <BSP_ACCELERO_Init_INT+0x74>
	{
		/* Initialize interruption*/
		uint8_t tmp;
		tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_DRDY_PULSE_CFG_G);
 8000fbc:	210b      	movs	r1, #11
 8000fbe:	20d4      	movs	r0, #212	; 0xd4
 8000fc0:	f008 f8f6 	bl	80091b0 <SENSOR_IO_Read>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	71bb      	strb	r3, [r7, #6]
		tmp |=0b10000000;
 8000fc8:	79bb      	ldrb	r3, [r7, #6]
 8000fca:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000fce:	71bb      	strb	r3, [r7, #6]
		SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_DRDY_PULSE_CFG_G, tmp);
 8000fd0:	79bb      	ldrb	r3, [r7, #6]
 8000fd2:	461a      	mov	r2, r3
 8000fd4:	210b      	movs	r1, #11
 8000fd6:	20d4      	movs	r0, #212	; 0xd4
 8000fd8:	f008 f8d0 	bl	800917c <SENSOR_IO_Write>
		tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_INT1_CTRL);
 8000fdc:	210d      	movs	r1, #13
 8000fde:	20d4      	movs	r0, #212	; 0xd4
 8000fe0:	f008 f8e6 	bl	80091b0 <SENSOR_IO_Read>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	71bb      	strb	r3, [r7, #6]
		tmp |=0b00000001;
 8000fe8:	79bb      	ldrb	r3, [r7, #6]
 8000fea:	f043 0301 	orr.w	r3, r3, #1
 8000fee:	71bb      	strb	r3, [r7, #6]
		SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_INT1_CTRL, tmp);
 8000ff0:	79bb      	ldrb	r3, [r7, #6]
 8000ff2:	461a      	mov	r2, r3
 8000ff4:	210d      	movs	r1, #13
 8000ff6:	20d4      	movs	r0, #212	; 0xd4
 8000ff8:	f008 f8c0 	bl	800917c <SENSOR_IO_Write>
		tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_MASTER_CONFIG);
 8000ffc:	211a      	movs	r1, #26
 8000ffe:	20d4      	movs	r0, #212	; 0xd4
 8001000:	f008 f8d6 	bl	80091b0 <SENSOR_IO_Read>
 8001004:	4603      	mov	r3, r0
 8001006:	71bb      	strb	r3, [r7, #6]
		tmp |=0b10000000;
 8001008:	79bb      	ldrb	r3, [r7, #6]
 800100a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800100e:	71bb      	strb	r3, [r7, #6]
		SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_MASTER_CONFIG, tmp);
 8001010:	79bb      	ldrb	r3, [r7, #6]
 8001012:	461a      	mov	r2, r3
 8001014:	211a      	movs	r1, #26
 8001016:	20d4      	movs	r0, #212	; 0xd4
 8001018:	f008 f8b0 	bl	800917c <SENSOR_IO_Write>
	}
	return ret;
 800101c:	79fb      	ldrb	r3, [r7, #7]
}
 800101e:	4618      	mov	r0, r3
 8001020:	3708      	adds	r7, #8
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
	...

08001028 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b082      	sub	sp, #8
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]

	static osStatus_t estado;
	if (huart == &huart1)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	4a0c      	ldr	r2, [pc, #48]	; (8001064 <HAL_UART_RxCpltCallback+0x3c>)
 8001034:	4293      	cmp	r3, r2
 8001036:	d110      	bne.n	800105a <HAL_UART_RxCpltCallback+0x32>
	{
		HAL_UART_Receive_IT(&huart1,&rec_data,1);
 8001038:	2201      	movs	r2, #1
 800103a:	490b      	ldr	r1, [pc, #44]	; (8001068 <HAL_UART_RxCpltCallback+0x40>)
 800103c:	4809      	ldr	r0, [pc, #36]	; (8001064 <HAL_UART_RxCpltCallback+0x3c>)
 800103e:	f006 fce9 	bl	8007a14 <HAL_UART_Receive_IT>
		printf("Recibido: %d\r\n",rec_data);
 8001042:	4b09      	ldr	r3, [pc, #36]	; (8001068 <HAL_UART_RxCpltCallback+0x40>)
 8001044:	781b      	ldrb	r3, [r3, #0]
 8001046:	4619      	mov	r1, r3
 8001048:	4808      	ldr	r0, [pc, #32]	; (800106c <HAL_UART_RxCpltCallback+0x44>)
 800104a:	f00d f865 	bl	800e118 <iprintf>
		osThreadFlagsSet(tarea_UARTHandle,0x0002U);
 800104e:	4b08      	ldr	r3, [pc, #32]	; (8001070 <HAL_UART_RxCpltCallback+0x48>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	2102      	movs	r1, #2
 8001054:	4618      	mov	r0, r3
 8001056:	f009 fbbf 	bl	800a7d8 <osThreadFlagsSet>
			printf("Estado: ok\r\n");
		else
			printf("Algo no va bien\r\n");
			*/
	}
}
 800105a:	bf00      	nop
 800105c:	3708      	adds	r7, #8
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	20000264 	.word	0x20000264
 8001068:	200007bc 	.word	0x200007bc
 800106c:	0800f600 	.word	0x0800f600
 8001070:	20000780 	.word	0x20000780

08001074 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b082      	sub	sp, #8
 8001078:	af00      	add	r7, sp, #0
 800107a:	4603      	mov	r3, r0
 800107c:	80fb      	strh	r3, [r7, #6]
	switch (GPIO_Pin)
 800107e:	88fb      	ldrh	r3, [r7, #6]
 8001080:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001084:	d00e      	beq.n	80010a4 <HAL_GPIO_EXTI_Callback+0x30>
 8001086:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800108a:	dc18      	bgt.n	80010be <HAL_GPIO_EXTI_Callback+0x4a>
 800108c:	2b02      	cmp	r3, #2
 800108e:	d013      	beq.n	80010b8 <HAL_GPIO_EXTI_Callback+0x44>
 8001090:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001094:	d113      	bne.n	80010be <HAL_GPIO_EXTI_Callback+0x4a>
	{
		case (LSM6DSL_INT1_EXTI11_Pin):
		{
			osThreadFlagsSet(readAccelHandle,0x0001U);
 8001096:	4b0c      	ldr	r3, [pc, #48]	; (80010c8 <HAL_GPIO_EXTI_Callback+0x54>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	2101      	movs	r1, #1
 800109c:	4618      	mov	r0, r3
 800109e:	f009 fb9b 	bl	800a7d8 <osThreadFlagsSet>
			break;
 80010a2:	e00d      	b.n	80010c0 <HAL_GPIO_EXTI_Callback+0x4c>
		}
		case(BOTON_Pin):
		{
			printf("Ha pulsado el boton\r\n");
 80010a4:	4809      	ldr	r0, [pc, #36]	; (80010cc <HAL_GPIO_EXTI_Callback+0x58>)
 80010a6:	f00d f8bd 	bl	800e224 <puts>
			osThreadFlagsSet(readAccelHandle,0x0002U);
 80010aa:	4b07      	ldr	r3, [pc, #28]	; (80010c8 <HAL_GPIO_EXTI_Callback+0x54>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	2102      	movs	r1, #2
 80010b0:	4618      	mov	r0, r3
 80010b2:	f009 fb91 	bl	800a7d8 <osThreadFlagsSet>
			break;
 80010b6:	e003      	b.n	80010c0 <HAL_GPIO_EXTI_Callback+0x4c>
		}
		case (GPIO_PIN_1):
		{
			SPI_WIFI_ISR();
 80010b8:	f009 f9b0 	bl	800a41c <SPI_WIFI_ISR>
			break;
 80010bc:	e000      	b.n	80010c0 <HAL_GPIO_EXTI_Callback+0x4c>
		}
		default:
		{
		  break;
 80010be:	bf00      	nop
		}
	}
}
 80010c0:	bf00      	nop
 80010c2:	3708      	adds	r7, #8
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	20000778 	.word	0x20000778
 80010cc:	0800f610 	.word	0x0800f610

080010d0 <wifi_start>:

static int wifi_start(void)
{
 80010d0:	b5b0      	push	{r4, r5, r7, lr}
 80010d2:	b086      	sub	sp, #24
 80010d4:	af04      	add	r7, sp, #16
  uint8_t  MAC_Addr[6];
  printf("wifistart\r\n");
 80010d6:	481d      	ldr	r0, [pc, #116]	; (800114c <wifi_start+0x7c>)
 80010d8:	f00d f8a4 	bl	800e224 <puts>
 /*Initialize and use WIFI module */
  if(WIFI_Init() ==  WIFI_STATUS_OK)
 80010dc:	f009 f9ae 	bl	800a43c <WIFI_Init>
 80010e0:	4603      	mov	r3, r0
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d129      	bne.n	800113a <wifi_start+0x6a>
  {
	printf("xddddddd\r\n");
 80010e6:	481a      	ldr	r0, [pc, #104]	; (8001150 <wifi_start+0x80>)
 80010e8:	f00d f89c 	bl	800e224 <puts>
    printf(("ES-WIFI Initialized.\r\n"));
 80010ec:	4819      	ldr	r0, [pc, #100]	; (8001154 <wifi_start+0x84>)
 80010ee:	f00d f899 	bl	800e224 <puts>
    if(WIFI_GetMAC_Address(MAC_Addr) == WIFI_STATUS_OK)
 80010f2:	463b      	mov	r3, r7
 80010f4:	4618      	mov	r0, r3
 80010f6:	f009 f9ef 	bl	800a4d8 <WIFI_GetMAC_Address>
 80010fa:	4603      	mov	r3, r0
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d116      	bne.n	800112e <wifi_start+0x5e>
    {
      printf("MAC asignada\r\n");
 8001100:	4815      	ldr	r0, [pc, #84]	; (8001158 <wifi_start+0x88>)
 8001102:	f00d f88f 	bl	800e224 <puts>
      printf("> eS-WiFi module MAC Address : %02X:%02X:%02X:%02X:%02X:%02X\r\n",
               MAC_Addr[0],
 8001106:	783b      	ldrb	r3, [r7, #0]
      printf("> eS-WiFi module MAC Address : %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 8001108:	4618      	mov	r0, r3
               MAC_Addr[1],
 800110a:	787b      	ldrb	r3, [r7, #1]
      printf("> eS-WiFi module MAC Address : %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800110c:	461c      	mov	r4, r3
               MAC_Addr[2],
 800110e:	78bb      	ldrb	r3, [r7, #2]
      printf("> eS-WiFi module MAC Address : %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 8001110:	461d      	mov	r5, r3
               MAC_Addr[3],
 8001112:	78fb      	ldrb	r3, [r7, #3]
               MAC_Addr[4],
 8001114:	793a      	ldrb	r2, [r7, #4]
               MAC_Addr[5]);
 8001116:	7979      	ldrb	r1, [r7, #5]
      printf("> eS-WiFi module MAC Address : %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 8001118:	9102      	str	r1, [sp, #8]
 800111a:	9201      	str	r2, [sp, #4]
 800111c:	9300      	str	r3, [sp, #0]
 800111e:	462b      	mov	r3, r5
 8001120:	4622      	mov	r2, r4
 8001122:	4601      	mov	r1, r0
 8001124:	480d      	ldr	r0, [pc, #52]	; (800115c <wifi_start+0x8c>)
 8001126:	f00c fff7 	bl	800e118 <iprintf>
  else
  {
	printf("Errorfifi\r\n");
    return -1;
  }
  return 0;
 800112a:	2300      	movs	r3, #0
 800112c:	e00a      	b.n	8001144 <wifi_start+0x74>
      printf("> ERROR : CANNOT get MAC address\r\n");
 800112e:	480c      	ldr	r0, [pc, #48]	; (8001160 <wifi_start+0x90>)
 8001130:	f00d f878 	bl	800e224 <puts>
      return -1;
 8001134:	f04f 33ff 	mov.w	r3, #4294967295
 8001138:	e004      	b.n	8001144 <wifi_start+0x74>
	printf("Errorfifi\r\n");
 800113a:	480a      	ldr	r0, [pc, #40]	; (8001164 <wifi_start+0x94>)
 800113c:	f00d f872 	bl	800e224 <puts>
    return -1;
 8001140:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001144:	4618      	mov	r0, r3
 8001146:	3708      	adds	r7, #8
 8001148:	46bd      	mov	sp, r7
 800114a:	bdb0      	pop	{r4, r5, r7, pc}
 800114c:	0800f628 	.word	0x0800f628
 8001150:	0800f634 	.word	0x0800f634
 8001154:	0800f640 	.word	0x0800f640
 8001158:	0800f658 	.word	0x0800f658
 800115c:	0800f668 	.word	0x0800f668
 8001160:	0800f6a8 	.word	0x0800f6a8
 8001164:	0800f6cc 	.word	0x0800f6cc

08001168 <wifi_connect>:

int wifi_connect(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b082      	sub	sp, #8
 800116c:	af02      	add	r7, sp, #8

  wifi_start();
 800116e:	f7ff ffaf 	bl	80010d0 <wifi_start>

  printf("Connecting to %s\r\n",SSID);
 8001172:	4919      	ldr	r1, [pc, #100]	; (80011d8 <wifi_connect+0x70>)
 8001174:	4819      	ldr	r0, [pc, #100]	; (80011dc <wifi_connect+0x74>)
 8001176:	f00c ffcf 	bl	800e118 <iprintf>
  if( WIFI_Connect(SSID, PASSWORD, WIFISECURITY) == WIFI_STATUS_OK)
 800117a:	2203      	movs	r2, #3
 800117c:	4918      	ldr	r1, [pc, #96]	; (80011e0 <wifi_connect+0x78>)
 800117e:	4816      	ldr	r0, [pc, #88]	; (80011d8 <wifi_connect+0x70>)
 8001180:	f009 f988 	bl	800a494 <WIFI_Connect>
 8001184:	4603      	mov	r3, r0
 8001186:	2b00      	cmp	r3, #0
 8001188:	d11d      	bne.n	80011c6 <wifi_connect+0x5e>
  {
    if(WIFI_GetIP_Address(IP_Addr) == WIFI_STATUS_OK)
 800118a:	4816      	ldr	r0, [pc, #88]	; (80011e4 <wifi_connect+0x7c>)
 800118c:	f009 f9ba 	bl	800a504 <WIFI_GetIP_Address>
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	d111      	bne.n	80011ba <wifi_connect+0x52>
    {
      printf("> es-wifi module connected: got IP Address : %d.%d.%d.%d\r\n",
               IP_Addr[0],
 8001196:	4b13      	ldr	r3, [pc, #76]	; (80011e4 <wifi_connect+0x7c>)
 8001198:	781b      	ldrb	r3, [r3, #0]
      printf("> es-wifi module connected: got IP Address : %d.%d.%d.%d\r\n",
 800119a:	4619      	mov	r1, r3
               IP_Addr[1],
 800119c:	4b11      	ldr	r3, [pc, #68]	; (80011e4 <wifi_connect+0x7c>)
 800119e:	785b      	ldrb	r3, [r3, #1]
      printf("> es-wifi module connected: got IP Address : %d.%d.%d.%d\r\n",
 80011a0:	461a      	mov	r2, r3
               IP_Addr[2],
 80011a2:	4b10      	ldr	r3, [pc, #64]	; (80011e4 <wifi_connect+0x7c>)
 80011a4:	789b      	ldrb	r3, [r3, #2]
      printf("> es-wifi module connected: got IP Address : %d.%d.%d.%d\r\n",
 80011a6:	4618      	mov	r0, r3
               IP_Addr[3]);
 80011a8:	4b0e      	ldr	r3, [pc, #56]	; (80011e4 <wifi_connect+0x7c>)
 80011aa:	78db      	ldrb	r3, [r3, #3]
      printf("> es-wifi module connected: got IP Address : %d.%d.%d.%d\r\n",
 80011ac:	9300      	str	r3, [sp, #0]
 80011ae:	4603      	mov	r3, r0
 80011b0:	480d      	ldr	r0, [pc, #52]	; (80011e8 <wifi_connect+0x80>)
 80011b2:	f00c ffb1 	bl	800e118 <iprintf>
  else
  {
		 printf("ERROR : es-wifi module NOT connected\n");
     return -1;
  }
  return 0;
 80011b6:	2300      	movs	r3, #0
 80011b8:	e00a      	b.n	80011d0 <wifi_connect+0x68>
		  printf(" ERROR : es-wifi module CANNOT get IP address\r\n");
 80011ba:	480c      	ldr	r0, [pc, #48]	; (80011ec <wifi_connect+0x84>)
 80011bc:	f00d f832 	bl	800e224 <puts>
      return -1;
 80011c0:	f04f 33ff 	mov.w	r3, #4294967295
 80011c4:	e004      	b.n	80011d0 <wifi_connect+0x68>
		 printf("ERROR : es-wifi module NOT connected\n");
 80011c6:	480a      	ldr	r0, [pc, #40]	; (80011f0 <wifi_connect+0x88>)
 80011c8:	f00d f82c 	bl	800e224 <puts>
     return -1;
 80011cc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80011d0:	4618      	mov	r0, r3
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	0800f6d8 	.word	0x0800f6d8
 80011dc:	0800f6e8 	.word	0x0800f6e8
 80011e0:	0800f6fc 	.word	0x0800f6fc
 80011e4:	200007b4 	.word	0x200007b4
 80011e8:	0800f708 	.word	0x0800f708
 80011ec:	0800f744 	.word	0x0800f744
 80011f0:	0800f774 	.word	0x0800f774

080011f4 <SPI3_IRQHandler>:
  * @brief  SPI3 line detection callback.
  * @param  None
  * @retval None
  */
void SPI3_IRQHandler(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	af00      	add	r7, sp, #0
  HAL_SPI_IRQHandler(&hspi);
 80011f8:	4802      	ldr	r0, [pc, #8]	; (8001204 <SPI3_IRQHandler+0x10>)
 80011fa:	f005 faa9 	bl	8006750 <HAL_SPI_IRQHandler>
}
 80011fe:	bf00      	nop
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	2000088c 	.word	0x2000088c

08001208 <RTC_set_func>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_RTC_set_func */
void RTC_set_func(void *argument)
{
 8001208:	b5b0      	push	{r4, r5, r7, lr}
 800120a:	b09e      	sub	sp, #120	; 0x78
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	uint8_t recibido[3];
	//uint32_t flag_rec;
	osStatus_t estado;
	uint32_t return_wait = 0U;
 8001210:	2300      	movs	r3, #0
 8001212:	66bb      	str	r3, [r7, #104]	; 0x68

	uint16_t num_usuario;
	uint8_t to_change[6];
	const char* msg_hora_ok = "\r\nHora cambiada correctamente\r\n";
 8001214:	4bae      	ldr	r3, [pc, #696]	; (80014d0 <RTC_set_func+0x2c8>)
 8001216:	657b      	str	r3, [r7, #84]	; 0x54
	const char* msg_fecha_ok = "Fecha cambiada correctamente\r\n";
 8001218:	4bae      	ldr	r3, [pc, #696]	; (80014d4 <RTC_set_func+0x2cc>)
 800121a:	653b      	str	r3, [r7, #80]	; 0x50
	const char* msg_error = "\r\nERROR: Valor no válido\r\n";
 800121c:	4bae      	ldr	r3, [pc, #696]	; (80014d8 <RTC_set_func+0x2d0>)
 800121e:	64fb      	str	r3, [r7, #76]	; 0x4c
	const char* msg_rtc1 = "\r\n\r\n========================\r\n"
 8001220:	4bae      	ldr	r3, [pc, #696]	; (80014dc <RTC_set_func+0x2d4>)
 8001222:	64bb      	str	r3, [r7, #72]	; 0x48
	"| Configurar rtc |\r\n"
	"========================\r\n\r\n";
	const char* msg[6] = {
 8001224:	4bae      	ldr	r3, [pc, #696]	; (80014e0 <RTC_set_func+0x2d8>)
 8001226:	f107 0430 	add.w	r4, r7, #48	; 0x30
 800122a:	461d      	mov	r5, r3
 800122c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800122e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001230:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001234:	e884 0003 	stmia.w	r4, {r0, r1}
	"Hora (0-23): ", "\r\nMinuto (0-59): ","\r\nSegundo (0-59): ","\r\nDía (1-31): ","\r\nMes (1-12): ",
	"\r\nAño (0-99): "};
	uint8_t limit[6][2] = {{0,23},{0,59},{0,59},{1,31},{1,12},{0,99}};
 8001238:	4aaa      	ldr	r2, [pc, #680]	; (80014e4 <RTC_set_func+0x2dc>)
 800123a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800123e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001240:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	//uint8_t *toChange[6] = {&GetTime.Hours, &GetTime.Minutes, &GetTime.Seconds, &GetDate.Date,&GetDate.Month, &GetDate.Year};

	printf("Empieza el bucle\r\n");
 8001244:	48a8      	ldr	r0, [pc, #672]	; (80014e8 <RTC_set_func+0x2e0>)
 8001246:	f00c ffed 	bl	800e224 <puts>
	estado = osMessageQueuePut(print_queueHandle, &msg_rtc1, 0, pdMS_TO_TICKS(500));
 800124a:	4ba8      	ldr	r3, [pc, #672]	; (80014ec <RTC_set_func+0x2e4>)
 800124c:	6818      	ldr	r0, [r3, #0]
 800124e:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8001252:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001256:	2200      	movs	r2, #0
 8001258:	f009 fc1c 	bl	800aa94 <osMessageQueuePut>
 800125c:	6678      	str	r0, [r7, #100]	; 0x64
	int i,j = 0;
 800125e:	2300      	movs	r3, #0
 8001260:	66fb      	str	r3, [r7, #108]	; 0x6c
	for (i=0;i<6;){
 8001262:	2300      	movs	r3, #0
 8001264:	673b      	str	r3, [r7, #112]	; 0x70
 8001266:	e0d8      	b.n	800141a <RTC_set_func+0x212>
		estado = osMessageQueuePut(print_queueHandle, &msg[i], 0, pdMS_TO_TICKS(500));
 8001268:	4ba0      	ldr	r3, [pc, #640]	; (80014ec <RTC_set_func+0x2e4>)
 800126a:	6818      	ldr	r0, [r3, #0]
 800126c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001270:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001272:	009b      	lsls	r3, r3, #2
 8001274:	18d1      	adds	r1, r2, r3
 8001276:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800127a:	2200      	movs	r2, #0
 800127c:	f009 fc0a 	bl	800aa94 <osMessageQueuePut>
 8001280:	6678      	str	r0, [r7, #100]	; 0x64
		printf("Esperando a que ser reciba el dato\r\n");
 8001282:	489b      	ldr	r0, [pc, #620]	; (80014f0 <RTC_set_func+0x2e8>)
 8001284:	f00c ffce 	bl	800e224 <puts>

		for (j=0;j<3;j++){
 8001288:	2300      	movs	r3, #0
 800128a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800128c:	e022      	b.n	80012d4 <RTC_set_func+0xcc>
			estado = osMessageQueueGet(receive_queueHandle, &recibido[j], NULL, osWaitForever);
 800128e:	4b99      	ldr	r3, [pc, #612]	; (80014f4 <RTC_set_func+0x2ec>)
 8001290:	6818      	ldr	r0, [r3, #0]
 8001292:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001296:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001298:	18d1      	adds	r1, r2, r3
 800129a:	f04f 33ff 	mov.w	r3, #4294967295
 800129e:	2200      	movs	r2, #0
 80012a0:	f009 fc58 	bl	800ab54 <osMessageQueueGet>
 80012a4:	6678      	str	r0, [r7, #100]	; 0x64
			printf("De la cola: %c\r\n",recibido[j]);
 80012a6:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80012aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80012ac:	4413      	add	r3, r2
 80012ae:	781b      	ldrb	r3, [r3, #0]
 80012b0:	4619      	mov	r1, r3
 80012b2:	4891      	ldr	r0, [pc, #580]	; (80014f8 <RTC_set_func+0x2f0>)
 80012b4:	f00c ff30 	bl	800e118 <iprintf>
			if(recibido[j]==13){
 80012b8:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80012bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80012be:	4413      	add	r3, r2
 80012c0:	781b      	ldrb	r3, [r3, #0]
 80012c2:	2b0d      	cmp	r3, #13
 80012c4:	d103      	bne.n	80012ce <RTC_set_func+0xc6>
				printf("Ha pulsado intro\r\n");
 80012c6:	488d      	ldr	r0, [pc, #564]	; (80014fc <RTC_set_func+0x2f4>)
 80012c8:	f00c ffac 	bl	800e224 <puts>
				break;
 80012cc:	e005      	b.n	80012da <RTC_set_func+0xd2>
		for (j=0;j<3;j++){
 80012ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80012d0:	3301      	adds	r3, #1
 80012d2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80012d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80012d6:	2b02      	cmp	r3, #2
 80012d8:	ddd9      	ble.n	800128e <RTC_set_func+0x86>
			}
		}
		printf("%d\r\n",j);
 80012da:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80012dc:	4888      	ldr	r0, [pc, #544]	; (8001500 <RTC_set_func+0x2f8>)
 80012de:	f00c ff1b 	bl	800e118 <iprintf>
		switch(j){
 80012e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80012e4:	2b03      	cmp	r3, #3
 80012e6:	d84a      	bhi.n	800137e <RTC_set_func+0x176>
 80012e8:	a201      	add	r2, pc, #4	; (adr r2, 80012f0 <RTC_set_func+0xe8>)
 80012ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012ee:	bf00      	nop
 80012f0:	08001301 	.word	0x08001301
 80012f4:	08001309 	.word	0x08001309
 80012f8:	08001317 	.word	0x08001317
 80012fc:	0800133b 	.word	0x0800133b
		case 0:
			num_usuario=0;
 8001300:	2300      	movs	r3, #0
 8001302:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
			break;
 8001306:	e03a      	b.n	800137e <RTC_set_func+0x176>
		case 1:
			num_usuario = recibido[0]-48;
 8001308:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 800130c:	b29b      	uxth	r3, r3
 800130e:	3b30      	subs	r3, #48	; 0x30
 8001310:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
			//i++;
			break;
 8001314:	e033      	b.n	800137e <RTC_set_func+0x176>
		case 2:
			num_usuario = 10*(recibido[0]-48)+recibido[1]-48;
 8001316:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 800131a:	3b30      	subs	r3, #48	; 0x30
 800131c:	b29b      	uxth	r3, r3
 800131e:	461a      	mov	r2, r3
 8001320:	0092      	lsls	r2, r2, #2
 8001322:	4413      	add	r3, r2
 8001324:	005b      	lsls	r3, r3, #1
 8001326:	b29a      	uxth	r2, r3
 8001328:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
 800132c:	b29b      	uxth	r3, r3
 800132e:	4413      	add	r3, r2
 8001330:	b29b      	uxth	r3, r3
 8001332:	3b30      	subs	r3, #48	; 0x30
 8001334:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
			//i++;
			break;
 8001338:	e021      	b.n	800137e <RTC_set_func+0x176>
		case 3:
			num_usuario = 100*(recibido[0]-48)+10*(recibido[1]-48)+recibido[2]-48;
 800133a:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 800133e:	3b30      	subs	r3, #48	; 0x30
 8001340:	b29b      	uxth	r3, r3
 8001342:	461a      	mov	r2, r3
 8001344:	0092      	lsls	r2, r2, #2
 8001346:	4413      	add	r3, r2
 8001348:	461a      	mov	r2, r3
 800134a:	0091      	lsls	r1, r2, #2
 800134c:	461a      	mov	r2, r3
 800134e:	460b      	mov	r3, r1
 8001350:	4413      	add	r3, r2
 8001352:	009b      	lsls	r3, r3, #2
 8001354:	b29a      	uxth	r2, r3
 8001356:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
 800135a:	3b30      	subs	r3, #48	; 0x30
 800135c:	b29b      	uxth	r3, r3
 800135e:	4619      	mov	r1, r3
 8001360:	0089      	lsls	r1, r1, #2
 8001362:	440b      	add	r3, r1
 8001364:	005b      	lsls	r3, r3, #1
 8001366:	b29b      	uxth	r3, r3
 8001368:	4413      	add	r3, r2
 800136a:	b29a      	uxth	r2, r3
 800136c:	f897 3062 	ldrb.w	r3, [r7, #98]	; 0x62
 8001370:	b29b      	uxth	r3, r3
 8001372:	4413      	add	r3, r2
 8001374:	b29b      	uxth	r3, r3
 8001376:	3b30      	subs	r3, #48	; 0x30
 8001378:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
			break;
 800137c:	bf00      	nop
		}
		printf("Numero: %d\r\n",num_usuario);
 800137e:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8001382:	4619      	mov	r1, r3
 8001384:	485f      	ldr	r0, [pc, #380]	; (8001504 <RTC_set_func+0x2fc>)
 8001386:	f00c fec7 	bl	800e118 <iprintf>
		printf("Rango: %d-%d\r\n",limit[i][0],limit[i][1]);
 800138a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800138c:	005b      	lsls	r3, r3, #1
 800138e:	3378      	adds	r3, #120	; 0x78
 8001390:	443b      	add	r3, r7
 8001392:	f813 3c54 	ldrb.w	r3, [r3, #-84]
 8001396:	4619      	mov	r1, r3
 8001398:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800139a:	005b      	lsls	r3, r3, #1
 800139c:	3378      	adds	r3, #120	; 0x78
 800139e:	443b      	add	r3, r7
 80013a0:	f813 3c53 	ldrb.w	r3, [r3, #-83]
 80013a4:	461a      	mov	r2, r3
 80013a6:	4858      	ldr	r0, [pc, #352]	; (8001508 <RTC_set_func+0x300>)
 80013a8:	f00c feb6 	bl	800e118 <iprintf>
		if (num_usuario<limit[i][0] || num_usuario>limit[i][1]){
 80013ac:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80013ae:	005b      	lsls	r3, r3, #1
 80013b0:	3378      	adds	r3, #120	; 0x78
 80013b2:	443b      	add	r3, r7
 80013b4:	f813 3c54 	ldrb.w	r3, [r3, #-84]
 80013b8:	b29b      	uxth	r3, r3
 80013ba:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80013be:	429a      	cmp	r2, r3
 80013c0:	d30a      	bcc.n	80013d8 <RTC_set_func+0x1d0>
 80013c2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80013c4:	005b      	lsls	r3, r3, #1
 80013c6:	3378      	adds	r3, #120	; 0x78
 80013c8:	443b      	add	r3, r7
 80013ca:	f813 3c53 	ldrb.w	r3, [r3, #-83]
 80013ce:	b29b      	uxth	r3, r3
 80013d0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80013d4:	429a      	cmp	r2, r3
 80013d6:	d914      	bls.n	8001402 <RTC_set_func+0x1fa>
			estado = osMessageQueuePut(print_queueHandle, &msg_error, 0, pdMS_TO_TICKS(500));
 80013d8:	4b44      	ldr	r3, [pc, #272]	; (80014ec <RTC_set_func+0x2e4>)
 80013da:	6818      	ldr	r0, [r3, #0]
 80013dc:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 80013e0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80013e4:	2200      	movs	r2, #0
 80013e6:	f009 fb55 	bl	800aa94 <osMessageQueuePut>
 80013ea:	6678      	str	r0, [r7, #100]	; 0x64
			if (estado == osOK)
 80013ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d103      	bne.n	80013fa <RTC_set_func+0x1f2>
				printf("Enviado valor erroneo\r\n");
 80013f2:	4846      	ldr	r0, [pc, #280]	; (800150c <RTC_set_func+0x304>)
 80013f4:	f00c ff16 	bl	800e224 <puts>
 80013f8:	e00f      	b.n	800141a <RTC_set_func+0x212>
			else
				printf("Algo no va bien\r\n");
 80013fa:	4845      	ldr	r0, [pc, #276]	; (8001510 <RTC_set_func+0x308>)
 80013fc:	f00c ff12 	bl	800e224 <puts>
			if (estado == osOK)
 8001400:	e00b      	b.n	800141a <RTC_set_func+0x212>
		}else{
			to_change[i]=num_usuario;
 8001402:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8001406:	b2d9      	uxtb	r1, r3
 8001408:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800140c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800140e:	4413      	add	r3, r2
 8001410:	460a      	mov	r2, r1
 8001412:	701a      	strb	r2, [r3, #0]
			i++;
 8001414:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001416:	3301      	adds	r3, #1
 8001418:	673b      	str	r3, [r7, #112]	; 0x70
	for (i=0;i<6;){
 800141a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800141c:	2b05      	cmp	r3, #5
 800141e:	f77f af23 	ble.w	8001268 <RTC_set_func+0x60>
		}

	}

	RTC_TimeTypeDef sTime = {0};
 8001422:	f107 0310 	add.w	r3, r7, #16
 8001426:	2200      	movs	r2, #0
 8001428:	601a      	str	r2, [r3, #0]
 800142a:	605a      	str	r2, [r3, #4]
 800142c:	609a      	str	r2, [r3, #8]
 800142e:	60da      	str	r2, [r3, #12]
 8001430:	611a      	str	r2, [r3, #16]
	RTC_DateTypeDef sDate = {0};
 8001432:	2300      	movs	r3, #0
 8001434:	60fb      	str	r3, [r7, #12]

	sTime.Hours = to_change[0];
 8001436:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 800143a:	743b      	strb	r3, [r7, #16]
	sTime.Minutes = to_change[1];
 800143c:	f897 3059 	ldrb.w	r3, [r7, #89]	; 0x59
 8001440:	747b      	strb	r3, [r7, #17]
	sTime.Seconds = to_change[2];
 8001442:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 8001446:	74bb      	strb	r3, [r7, #18]

	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8001448:	f107 0310 	add.w	r3, r7, #16
 800144c:	2200      	movs	r2, #0
 800144e:	4619      	mov	r1, r3
 8001450:	4830      	ldr	r0, [pc, #192]	; (8001514 <RTC_set_func+0x30c>)
 8001452:	f004 f8e2 	bl	800561a <HAL_RTC_SetTime>
 8001456:	4603      	mov	r3, r0
 8001458:	2b00      	cmp	r3, #0
 800145a:	d001      	beq.n	8001460 <RTC_set_func+0x258>
	  {
	    Error_Handler();
 800145c:	f000 fa3c 	bl	80018d8 <Error_Handler>
	  }

	osMessageQueuePut(print_queueHandle, &msg_hora_ok, 0, pdMS_TO_TICKS(500));
 8001460:	4b22      	ldr	r3, [pc, #136]	; (80014ec <RTC_set_func+0x2e4>)
 8001462:	6818      	ldr	r0, [r3, #0]
 8001464:	f107 0154 	add.w	r1, r7, #84	; 0x54
 8001468:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800146c:	2200      	movs	r2, #0
 800146e:	f009 fb11 	bl	800aa94 <osMessageQueuePut>

	sDate.Date = to_change[3];
 8001472:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8001476:	73bb      	strb	r3, [r7, #14]
	sDate.Month = to_change[4];
 8001478:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 800147c:	737b      	strb	r3, [r7, #13]
	sDate.Year = to_change[5];
 800147e:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 8001482:	73fb      	strb	r3, [r7, #15]
	printf("Anio: %d\r\n",to_change[5]);
 8001484:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 8001488:	4619      	mov	r1, r3
 800148a:	4823      	ldr	r0, [pc, #140]	; (8001518 <RTC_set_func+0x310>)
 800148c:	f00c fe44 	bl	800e118 <iprintf>
	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8001490:	f107 030c 	add.w	r3, r7, #12
 8001494:	2200      	movs	r2, #0
 8001496:	4619      	mov	r1, r3
 8001498:	481e      	ldr	r0, [pc, #120]	; (8001514 <RTC_set_func+0x30c>)
 800149a:	f004 f9b7 	bl	800580c <HAL_RTC_SetDate>
 800149e:	4603      	mov	r3, r0
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d001      	beq.n	80014a8 <RTC_set_func+0x2a0>
	{
		Error_Handler();
 80014a4:	f000 fa18 	bl	80018d8 <Error_Handler>
	}

	osMessageQueuePut(print_queueHandle, &msg_fecha_ok, 0, pdMS_TO_TICKS(500));
 80014a8:	4b10      	ldr	r3, [pc, #64]	; (80014ec <RTC_set_func+0x2e4>)
 80014aa:	6818      	ldr	r0, [r3, #0]
 80014ac:	f107 0150 	add.w	r1, r7, #80	; 0x50
 80014b0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80014b4:	2200      	movs	r2, #0
 80014b6:	f009 faed 	bl	800aa94 <osMessageQueuePut>

	osThreadFlagsSet(readAccelHandle,0x0002U);
 80014ba:	4b18      	ldr	r3, [pc, #96]	; (800151c <RTC_set_func+0x314>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	2102      	movs	r1, #2
 80014c0:	4618      	mov	r0, r3
 80014c2:	f009 f989 	bl	800a7d8 <osThreadFlagsSet>

  /* Infinite loop */
  for(;;)
  {

	  osDelay(pdMS_TO_TICKS(1000));
 80014c6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80014ca:	f009 fa54 	bl	800a976 <osDelay>
 80014ce:	e7fa      	b.n	80014c6 <RTC_set_func+0x2be>
 80014d0:	0800f79c 	.word	0x0800f79c
 80014d4:	0800f7bc 	.word	0x0800f7bc
 80014d8:	0800f7dc 	.word	0x0800f7dc
 80014dc:	0800f7f8 	.word	0x0800f7f8
 80014e0:	0800f908 	.word	0x0800f908
 80014e4:	0800f920 	.word	0x0800f920
 80014e8:	0800f848 	.word	0x0800f848
 80014ec:	20000790 	.word	0x20000790
 80014f0:	0800f85c 	.word	0x0800f85c
 80014f4:	20000794 	.word	0x20000794
 80014f8:	0800f880 	.word	0x0800f880
 80014fc:	0800f894 	.word	0x0800f894
 8001500:	0800f8a8 	.word	0x0800f8a8
 8001504:	0800f8b0 	.word	0x0800f8b0
 8001508:	0800f8c0 	.word	0x0800f8c0
 800150c:	0800f8d0 	.word	0x0800f8d0
 8001510:	0800f8e8 	.word	0x0800f8e8
 8001514:	20000190 	.word	0x20000190
 8001518:	0800f8fc 	.word	0x0800f8fc
 800151c:	20000778 	.word	0x20000778

08001520 <readAccel_func>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_readAccel_func */
void readAccel_func(void *argument)
{
 8001520:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001522:	b0b1      	sub	sp, #196	; 0xc4
 8001524:	af08      	add	r7, sp, #32
 8001526:	60f8      	str	r0, [r7, #12]
  /* USER CODE BEGIN readAccel_func */
	osStatus_t estado;
  //char mensaje[]  = "Hola mundo\r\n";
	char mensaje[100];
	char *p_mensaje = mensaje;
 8001528:	f107 0320 	add.w	r3, r7, #32
 800152c:	61fb      	str	r3, [r7, #28]

	//uint32_t nticks = 0;
	int16_t DataXYZ[3];
	int16_t *pDataXYZ = DataXYZ;
 800152e:	f107 0314 	add.w	r3, r7, #20
 8001532:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98


	uint8_t horas,minutos,segundos,dia,mes,anio = 0;
 8001536:	2300      	movs	r3, #0
 8001538:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
	uint32_t return_wait = 0U;
 800153c:	2300      	movs	r3, #0
 800153e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

	uint16_t iter; // Se usa para iterar en 64 o 1024 aceleraciones
	uint16_t max_iter;

	printf("ReadAccel task esperando\r\n");
 8001542:	485f      	ldr	r0, [pc, #380]	; (80016c0 <readAccel_func+0x1a0>)
 8001544:	f00c fe6e 	bl	800e224 <puts>
	// Esperamos que el usuario configure el RTC y que el acelerometro este activo
	return_wait = osThreadFlagsWait(0x0003U, osFlagsWaitAll, osWaitForever);
 8001548:	f04f 32ff 	mov.w	r2, #4294967295
 800154c:	2101      	movs	r1, #1
 800154e:	2003      	movs	r0, #3
 8001550:	f009 f990 	bl	800a874 <osThreadFlagsWait>
 8001554:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90

	//Activamos el temporizador
	osThreadFlagsSet(temporizadorHandle,0x0001U);
 8001558:	4b5a      	ldr	r3, [pc, #360]	; (80016c4 <readAccel_func+0x1a4>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	2101      	movs	r1, #1
 800155e:	4618      	mov	r0, r3
 8001560:	f009 f93a 	bl	800a7d8 <osThreadFlagsSet>

	//Terminamos la tarea de configuracion del RTC
	osThreadTerminate(RTC_setHandle);
 8001564:	4b58      	ldr	r3, [pc, #352]	; (80016c8 <readAccel_func+0x1a8>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4618      	mov	r0, r3
 800156a:	f009 f907 	bl	800a77c <osThreadTerminate>
	osThreadTerminate(printTaskHandle);
 800156e:	4b57      	ldr	r3, [pc, #348]	; (80016cc <readAccel_func+0x1ac>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	4618      	mov	r0, r3
 8001574:	f009 f902 	bl	800a77c <osThreadTerminate>
	osMessageQueueReset(print_queueHandle);
 8001578:	4b55      	ldr	r3, [pc, #340]	; (80016d0 <readAccel_func+0x1b0>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	4618      	mov	r0, r3
 800157e:	f009 fb7c 	bl	800ac7a <osMessageQueueReset>

	printf("ReadAccel task se inicia\r\n");
 8001582:	4854      	ldr	r0, [pc, #336]	; (80016d4 <readAccel_func+0x1b4>)
 8001584:	f00c fe4e 	bl	800e224 <puts>


	/* Infinite loop */
	for(;;)
	{
		if (modo_continuo){
 8001588:	4b53      	ldr	r3, [pc, #332]	; (80016d8 <readAccel_func+0x1b8>)
 800158a:	781b      	ldrb	r3, [r3, #0]
 800158c:	2b00      	cmp	r3, #0
 800158e:	d00a      	beq.n	80015a6 <readAccel_func+0x86>
			max_iter = MUESTRAS_CONTINUO;
 8001590:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001594:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
			osThreadFlagsSet(sendMQTTHandle,MODO_CONTINUO);
 8001598:	4b50      	ldr	r3, [pc, #320]	; (80016dc <readAccel_func+0x1bc>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	2102      	movs	r1, #2
 800159e:	4618      	mov	r0, r3
 80015a0:	f009 f91a 	bl	800a7d8 <osThreadFlagsSet>
 80015a4:	e008      	b.n	80015b8 <readAccel_func+0x98>
		}else{
			max_iter = MUESTRAS_NORMAL;
 80015a6:	2340      	movs	r3, #64	; 0x40
 80015a8:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
			osThreadFlagsSet(sendMQTTHandle,MODO_NORMAL);
 80015ac:	4b4b      	ldr	r3, [pc, #300]	; (80016dc <readAccel_func+0x1bc>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	2101      	movs	r1, #1
 80015b2:	4618      	mov	r0, r3
 80015b4:	f009 f910 	bl	800a7d8 <osThreadFlagsSet>
		}

		for (iter=0 ; iter<max_iter ; iter++){
 80015b8:	2300      	movs	r3, #0
 80015ba:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
 80015be:	e060      	b.n	8001682 <readAccel_func+0x162>
			BSP_ACCELERO_AccGetXYZ(pDataXYZ);
 80015c0:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 80015c4:	f007 fe6e 	bl	80092a4 <BSP_ACCELERO_AccGetXYZ>
			//printf("Tick: %ld	Eje x: %d	Eje y: %d	Eje z: %d\r\n",nticks,DataXYZ[0],DataXYZ[1],DataXYZ[2]);

			//printf("Lectura accel realizada\r\n");
			HAL_RTC_GetTime(&hrtc, &GetTime, RTC_FORMAT_BIN);
 80015c8:	2200      	movs	r2, #0
 80015ca:	4945      	ldr	r1, [pc, #276]	; (80016e0 <readAccel_func+0x1c0>)
 80015cc:	4845      	ldr	r0, [pc, #276]	; (80016e4 <readAccel_func+0x1c4>)
 80015ce:	f004 f8c1 	bl	8005754 <HAL_RTC_GetTime>
			horas = GetTime.Hours;
 80015d2:	4b43      	ldr	r3, [pc, #268]	; (80016e0 <readAccel_func+0x1c0>)
 80015d4:	781b      	ldrb	r3, [r3, #0]
 80015d6:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
			minutos = GetTime.Minutes;
 80015da:	4b41      	ldr	r3, [pc, #260]	; (80016e0 <readAccel_func+0x1c0>)
 80015dc:	785b      	ldrb	r3, [r3, #1]
 80015de:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
			segundos = GetTime.Seconds;
 80015e2:	4b3f      	ldr	r3, [pc, #252]	; (80016e0 <readAccel_func+0x1c0>)
 80015e4:	789b      	ldrb	r3, [r3, #2]
 80015e6:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d

			HAL_RTC_GetDate(&hrtc, &GetDate, RTC_FORMAT_BIN);
 80015ea:	2200      	movs	r2, #0
 80015ec:	493e      	ldr	r1, [pc, #248]	; (80016e8 <readAccel_func+0x1c8>)
 80015ee:	483d      	ldr	r0, [pc, #244]	; (80016e4 <readAccel_func+0x1c4>)
 80015f0:	f004 f993 	bl	800591a <HAL_RTC_GetDate>
			anio = GetDate.Year;
 80015f4:	4b3c      	ldr	r3, [pc, #240]	; (80016e8 <readAccel_func+0x1c8>)
 80015f6:	78db      	ldrb	r3, [r3, #3]
 80015f8:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
			dia = GetDate.Date;
 80015fc:	4b3a      	ldr	r3, [pc, #232]	; (80016e8 <readAccel_func+0x1c8>)
 80015fe:	789b      	ldrb	r3, [r3, #2]
 8001600:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
			mes = GetDate.Month;
 8001604:	4b38      	ldr	r3, [pc, #224]	; (80016e8 <readAccel_func+0x1c8>)
 8001606:	785b      	ldrb	r3, [r3, #1]
 8001608:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b

			//printf("Anio: %d\r\n",anio);
			//printf("Lectura fecha realizada\r\n");
			//printf("fecha: %d/%d/%d hora: %d:%d:%d temp: %d.%02d grados\r\n",dia,mes,anio,horas,minutos,segundos,tmpInt1,tmpInt2);
			//snprintf(mensaje,100,"fecha: %d/%d/%d hora: %d:%d:%d Eje x: %d	Eje y: %d	Eje z: %d\r\n",dia,mes,anio+2000,horas,minutos,segundos,DataXYZ[0],DataXYZ[1],DataXYZ[2]);
			snprintf(mensaje,100,"%d,%d,%d,%d,%d,%d,%d,%d,%d\r\n",dia,mes,anio+2000,horas,minutos,segundos,DataXYZ[0],DataXYZ[1],DataXYZ[2]);
 800160c:	f897 608c 	ldrb.w	r6, [r7, #140]	; 0x8c
 8001610:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 8001614:	60bb      	str	r3, [r7, #8]
 8001616:	f897 2097 	ldrb.w	r2, [r7, #151]	; 0x97
 800161a:	f502 62fa 	add.w	r2, r2, #2000	; 0x7d0
 800161e:	f897 108f 	ldrb.w	r1, [r7, #143]	; 0x8f
 8001622:	f897 008e 	ldrb.w	r0, [r7, #142]	; 0x8e
 8001626:	f897 408d 	ldrb.w	r4, [r7, #141]	; 0x8d
 800162a:	f9b7 5014 	ldrsh.w	r5, [r7, #20]
 800162e:	607d      	str	r5, [r7, #4]
 8001630:	f9b7 5016 	ldrsh.w	r5, [r7, #22]
 8001634:	603d      	str	r5, [r7, #0]
 8001636:	f9b7 5018 	ldrsh.w	r5, [r7, #24]
 800163a:	462b      	mov	r3, r5
 800163c:	f107 0520 	add.w	r5, r7, #32
 8001640:	9307      	str	r3, [sp, #28]
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	9306      	str	r3, [sp, #24]
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	9305      	str	r3, [sp, #20]
 800164a:	9404      	str	r4, [sp, #16]
 800164c:	9003      	str	r0, [sp, #12]
 800164e:	9102      	str	r1, [sp, #8]
 8001650:	9201      	str	r2, [sp, #4]
 8001652:	68bb      	ldr	r3, [r7, #8]
 8001654:	9300      	str	r3, [sp, #0]
 8001656:	4633      	mov	r3, r6
 8001658:	4a24      	ldr	r2, [pc, #144]	; (80016ec <readAccel_func+0x1cc>)
 800165a:	2164      	movs	r1, #100	; 0x64
 800165c:	4628      	mov	r0, r5
 800165e:	f00c fe63 	bl	800e328 <sniprintf>



			//printf("MENSAJE: %s\r\n",mensaje);
			estado = osMessageQueuePut(print_queueHandle, &p_mensaje, 0, pdMS_TO_TICKS(500));
 8001662:	4b1b      	ldr	r3, [pc, #108]	; (80016d0 <readAccel_func+0x1b0>)
 8001664:	6818      	ldr	r0, [r3, #0]
 8001666:	f107 011c 	add.w	r1, r7, #28
 800166a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800166e:	2200      	movs	r2, #0
 8001670:	f009 fa10 	bl	800aa94 <osMessageQueuePut>
 8001674:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
		for (iter=0 ; iter<max_iter ; iter++){
 8001678:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 800167c:	3301      	adds	r3, #1
 800167e:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
 8001682:	f8b7 209e 	ldrh.w	r2, [r7, #158]	; 0x9e
 8001686:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800168a:	429a      	cmp	r2, r3
 800168c:	d398      	bcc.n	80015c0 <readAccel_func+0xa0>
				printf("Timeout agotado 1\r\n");
			}*/

		}

		printf("Se han enviado todas las aceleraciones, esperamos media hora o hasta que alguien pulse el boton\r\n");
 800168e:	4818      	ldr	r0, [pc, #96]	; (80016f0 <readAccel_func+0x1d0>)
 8001690:	f00c fdc8 	bl	800e224 <puts>
		return_wait = osThreadFlagsWait(0x0006U, osFlagsWaitAny, osWaitForever); //espera media hora o que alguien pulse el boton
 8001694:	f04f 32ff 	mov.w	r2, #4294967295
 8001698:	2100      	movs	r1, #0
 800169a:	2006      	movs	r0, #6
 800169c:	f009 f8ea 	bl	800a874 <osThreadFlagsWait>
 80016a0:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
		if(return_wait == osFlagsErrorTimeout){
 80016a4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80016a8:	f113 0f02 	cmn.w	r3, #2
 80016ac:	d103      	bne.n	80016b6 <readAccel_func+0x196>
			printf("Ha pasado media hora\r\n");
 80016ae:	4811      	ldr	r0, [pc, #68]	; (80016f4 <readAccel_func+0x1d4>)
 80016b0:	f00c fdb8 	bl	800e224 <puts>
 80016b4:	e768      	b.n	8001588 <readAccel_func+0x68>
		}
		else {
			printf("El usuario quiere enviar aceleraciones\r\n");
 80016b6:	4810      	ldr	r0, [pc, #64]	; (80016f8 <readAccel_func+0x1d8>)
 80016b8:	f00c fdb4 	bl	800e224 <puts>
		if (modo_continuo){
 80016bc:	e764      	b.n	8001588 <readAccel_func+0x68>
 80016be:	bf00      	nop
 80016c0:	0800f92c 	.word	0x0800f92c
 80016c4:	20000784 	.word	0x20000784
 80016c8:	20000774 	.word	0x20000774
 80016cc:	2000077c 	.word	0x2000077c
 80016d0:	20000790 	.word	0x20000790
 80016d4:	0800f948 	.word	0x0800f948
 80016d8:	20000000 	.word	0x20000000
 80016dc:	20000788 	.word	0x20000788
 80016e0:	2000079c 	.word	0x2000079c
 80016e4:	20000190 	.word	0x20000190
 80016e8:	20000798 	.word	0x20000798
 80016ec:	0800f964 	.word	0x0800f964
 80016f0:	0800f984 	.word	0x0800f984
 80016f4:	0800f9e8 	.word	0x0800f9e8
 80016f8:	0800fa00 	.word	0x0800fa00

080016fc <printTask_func>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_printTask_func */
void printTask_func(void *argument)
{
 80016fc:	b590      	push	{r4, r7, lr}
 80016fe:	b085      	sub	sp, #20
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
	uintptr_t mensaje;
	osStatus_t estado;
  /* Infinite loop */
  for(;;)
  {
	  estado = osMessageQueueGet(print_queueHandle, &mensaje, NULL, osWaitForever);
 8001704:	4b13      	ldr	r3, [pc, #76]	; (8001754 <printTask_func+0x58>)
 8001706:	6818      	ldr	r0, [r3, #0]
 8001708:	f107 0108 	add.w	r1, r7, #8
 800170c:	f04f 33ff 	mov.w	r3, #4294967295
 8001710:	2200      	movs	r2, #0
 8001712:	f009 fa1f 	bl	800ab54 <osMessageQueueGet>
 8001716:	60f8      	str	r0, [r7, #12]
	  //printf("Se ha recibido algo en print task\r\n");
	  //printf("Mensaje print task: %s\r\n",mensaje);
	  //printf("Longitud: %d",strlen((char*)mensaje));
	  if (estado == osOK)
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	2b00      	cmp	r3, #0
 800171c:	d10d      	bne.n	800173a <printTask_func+0x3e>
	  {
		  //printf("%s",(char*)mensaje);
		  HAL_UART_Transmit(&huart1, (uint8_t*)mensaje, strlen(mensaje),10);
 800171e:	68bb      	ldr	r3, [r7, #8]
 8001720:	461c      	mov	r4, r3
 8001722:	68bb      	ldr	r3, [r7, #8]
 8001724:	4618      	mov	r0, r3
 8001726:	f7fe fd53 	bl	80001d0 <strlen>
 800172a:	4603      	mov	r3, r0
 800172c:	b29a      	uxth	r2, r3
 800172e:	230a      	movs	r3, #10
 8001730:	4621      	mov	r1, r4
 8001732:	4809      	ldr	r0, [pc, #36]	; (8001758 <printTask_func+0x5c>)
 8001734:	f006 f8da 	bl	80078ec <HAL_UART_Transmit>
 8001738:	e7e4      	b.n	8001704 <printTask_func+0x8>
	  }
	  else if (estado == osErrorTimeout)
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	f113 0f02 	cmn.w	r3, #2
 8001740:	d103      	bne.n	800174a <printTask_func+0x4e>
	  {
		  printf("Timeout printTask\r\n");
 8001742:	4806      	ldr	r0, [pc, #24]	; (800175c <printTask_func+0x60>)
 8001744:	f00c fd6e 	bl	800e224 <puts>
 8001748:	e7dc      	b.n	8001704 <printTask_func+0x8>
	  }
	  else
	  {
		  printf("Error en la tarea print\r\n");
 800174a:	4805      	ldr	r0, [pc, #20]	; (8001760 <printTask_func+0x64>)
 800174c:	f00c fd6a 	bl	800e224 <puts>
	  estado = osMessageQueueGet(print_queueHandle, &mensaje, NULL, osWaitForever);
 8001750:	e7d8      	b.n	8001704 <printTask_func+0x8>
 8001752:	bf00      	nop
 8001754:	20000790 	.word	0x20000790
 8001758:	20000264 	.word	0x20000264
 800175c:	0800fa28 	.word	0x0800fa28
 8001760:	0800fa3c 	.word	0x0800fa3c

08001764 <tarea_UART_func>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_tarea_UART_func */
void tarea_UART_func(void *argument)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b084      	sub	sp, #16
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN tarea_UART_func */
	osStatus_t estado;
	uint32_t return_wait = 0U;
 800176c:	2300      	movs	r3, #0
 800176e:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
	  return_wait = osThreadFlagsWait(0x0002U, osFlagsWaitAny, osWaitForever);
 8001770:	f04f 32ff 	mov.w	r2, #4294967295
 8001774:	2100      	movs	r1, #0
 8001776:	2002      	movs	r0, #2
 8001778:	f009 f87c 	bl	800a874 <osThreadFlagsWait>
 800177c:	60f8      	str	r0, [r7, #12]
	  estado = osMessageQueuePut(receive_queueHandle, &rec_data,0,pdMS_TO_TICKS(200));
 800177e:	4b09      	ldr	r3, [pc, #36]	; (80017a4 <tarea_UART_func+0x40>)
 8001780:	6818      	ldr	r0, [r3, #0]
 8001782:	23c8      	movs	r3, #200	; 0xc8
 8001784:	2200      	movs	r2, #0
 8001786:	4908      	ldr	r1, [pc, #32]	; (80017a8 <tarea_UART_func+0x44>)
 8001788:	f009 f984 	bl	800aa94 <osMessageQueuePut>
 800178c:	60b8      	str	r0, [r7, #8]
	  if (estado == osOK)
 800178e:	68bb      	ldr	r3, [r7, #8]
 8001790:	2b00      	cmp	r3, #0
 8001792:	d103      	bne.n	800179c <tarea_UART_func+0x38>
		  printf("Estado: ok\r\n");
 8001794:	4805      	ldr	r0, [pc, #20]	; (80017ac <tarea_UART_func+0x48>)
 8001796:	f00c fd45 	bl	800e224 <puts>
 800179a:	e7e9      	b.n	8001770 <tarea_UART_func+0xc>
	  else
		  printf("Algo no va bien\r\n");
 800179c:	4804      	ldr	r0, [pc, #16]	; (80017b0 <tarea_UART_func+0x4c>)
 800179e:	f00c fd41 	bl	800e224 <puts>
	  return_wait = osThreadFlagsWait(0x0002U, osFlagsWaitAny, osWaitForever);
 80017a2:	e7e5      	b.n	8001770 <tarea_UART_func+0xc>
 80017a4:	20000794 	.word	0x20000794
 80017a8:	200007bc 	.word	0x200007bc
 80017ac:	0800fa58 	.word	0x0800fa58
 80017b0:	0800f8e8 	.word	0x0800f8e8

080017b4 <temporizador_func>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_temporizador_func */
void temporizador_func(void *argument)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b082      	sub	sp, #8
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN temporizador_func */
	osThreadFlagsWait(0x0001U, osFlagsWaitAll, osWaitForever);
 80017bc:	f04f 32ff 	mov.w	r2, #4294967295
 80017c0:	2101      	movs	r1, #1
 80017c2:	2001      	movs	r0, #1
 80017c4:	f009 f856 	bl	800a874 <osThreadFlagsWait>
	printf("Temporizador activado\r\n");
 80017c8:	4806      	ldr	r0, [pc, #24]	; (80017e4 <temporizador_func+0x30>)
 80017ca:	f00c fd2b 	bl	800e224 <puts>
  /* Infinite loop */
  for(;;)
  {
    osDelay(pdMS_TO_TICKS(1000000)); //Periodo en ms con el que se mandan las aceleraciones
 80017ce:	4806      	ldr	r0, [pc, #24]	; (80017e8 <temporizador_func+0x34>)
 80017d0:	f009 f8d1 	bl	800a976 <osDelay>
    osThreadFlagsSet(readAccelHandle,0x0004U);
 80017d4:	4b05      	ldr	r3, [pc, #20]	; (80017ec <temporizador_func+0x38>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	2104      	movs	r1, #4
 80017da:	4618      	mov	r0, r3
 80017dc:	f008 fffc 	bl	800a7d8 <osThreadFlagsSet>
    osDelay(pdMS_TO_TICKS(1000000)); //Periodo en ms con el que se mandan las aceleraciones
 80017e0:	e7f5      	b.n	80017ce <temporizador_func+0x1a>
 80017e2:	bf00      	nop
 80017e4:	0800fa64 	.word	0x0800fa64
 80017e8:	000f4240 	.word	0x000f4240
 80017ec:	20000778 	.word	0x20000778

080017f0 <sendMQTT_func>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_sendMQTT_func */
void sendMQTT_func(void *argument)
{
 80017f0:	b590      	push	{r4, r7, lr}
 80017f2:	b087      	sub	sp, #28
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN sendMQTT_func */
	uint32_t return_wait = 0U;
 80017f8:	2300      	movs	r3, #0
 80017fa:	613b      	str	r3, [r7, #16]
	uint16_t iter;
	uint16_t max_iter;
  /* Infinite loop */
  for(;;)
  {
	  return_wait = osThreadFlagsWait(MODO_NORMAL | MODO_CONTINUO, osFlagsWaitAny, osWaitForever);
 80017fc:	f04f 32ff 	mov.w	r2, #4294967295
 8001800:	2100      	movs	r1, #0
 8001802:	2003      	movs	r0, #3
 8001804:	f009 f836 	bl	800a874 <osThreadFlagsWait>
 8001808:	6138      	str	r0, [r7, #16]
	  if(return_wait == MODO_NORMAL){
 800180a:	693b      	ldr	r3, [r7, #16]
 800180c:	2b01      	cmp	r3, #1
 800180e:	d105      	bne.n	800181c <sendMQTT_func+0x2c>
		  printf("Vamos a recibir 64 aceleraciones\r\n");
 8001810:	481e      	ldr	r0, [pc, #120]	; (800188c <sendMQTT_func+0x9c>)
 8001812:	f00c fd07 	bl	800e224 <puts>
		  max_iter = MUESTRAS_NORMAL;
 8001816:	2340      	movs	r3, #64	; 0x40
 8001818:	82bb      	strh	r3, [r7, #20]
 800181a:	e008      	b.n	800182e <sendMQTT_func+0x3e>

	  }
	  else if(return_wait == MODO_CONTINUO){
 800181c:	693b      	ldr	r3, [r7, #16]
 800181e:	2b02      	cmp	r3, #2
 8001820:	d105      	bne.n	800182e <sendMQTT_func+0x3e>
		  printf("Vamos a recibir 1024 aceleraciones\r\n");
 8001822:	481b      	ldr	r0, [pc, #108]	; (8001890 <sendMQTT_func+0xa0>)
 8001824:	f00c fcfe 	bl	800e224 <puts>
		  max_iter = MUESTRAS_CONTINUO;
 8001828:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800182c:	82bb      	strh	r3, [r7, #20]
	  }
	  for (iter=0;iter<max_iter;iter++){
 800182e:	2300      	movs	r3, #0
 8001830:	82fb      	strh	r3, [r7, #22]
 8001832:	e01c      	b.n	800186e <sendMQTT_func+0x7e>
		  estado = osMessageQueueGet(print_queueHandle, &mensaje, NULL, osWaitForever);
 8001834:	4b17      	ldr	r3, [pc, #92]	; (8001894 <sendMQTT_func+0xa4>)
 8001836:	6818      	ldr	r0, [r3, #0]
 8001838:	f107 0108 	add.w	r1, r7, #8
 800183c:	f04f 33ff 	mov.w	r3, #4294967295
 8001840:	2200      	movs	r2, #0
 8001842:	f009 f987 	bl	800ab54 <osMessageQueueGet>
 8001846:	60f8      	str	r0, [r7, #12]

		  if (estado == osOK)
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	2b00      	cmp	r3, #0
 800184c:	d10c      	bne.n	8001868 <sendMQTT_func+0x78>
		  {
			  //printf("%s",(char*)mensaje);
			  HAL_UART_Transmit(&huart1, (uint8_t*)mensaje, strlen(mensaje),10);
 800184e:	68bb      	ldr	r3, [r7, #8]
 8001850:	461c      	mov	r4, r3
 8001852:	68bb      	ldr	r3, [r7, #8]
 8001854:	4618      	mov	r0, r3
 8001856:	f7fe fcbb 	bl	80001d0 <strlen>
 800185a:	4603      	mov	r3, r0
 800185c:	b29a      	uxth	r2, r3
 800185e:	230a      	movs	r3, #10
 8001860:	4621      	mov	r1, r4
 8001862:	480d      	ldr	r0, [pc, #52]	; (8001898 <sendMQTT_func+0xa8>)
 8001864:	f006 f842 	bl	80078ec <HAL_UART_Transmit>
	  for (iter=0;iter<max_iter;iter++){
 8001868:	8afb      	ldrh	r3, [r7, #22]
 800186a:	3301      	adds	r3, #1
 800186c:	82fb      	strh	r3, [r7, #22]
 800186e:	8afa      	ldrh	r2, [r7, #22]
 8001870:	8abb      	ldrh	r3, [r7, #20]
 8001872:	429a      	cmp	r2, r3
 8001874:	d3de      	bcc.n	8001834 <sendMQTT_func+0x44>
		  }
	  }
	  printf("Espacio en la cola: %d\r\n",osMessageQueueGetSpace(print_queueHandle));
 8001876:	4b07      	ldr	r3, [pc, #28]	; (8001894 <sendMQTT_func+0xa4>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	4618      	mov	r0, r3
 800187c:	f009 f9c8 	bl	800ac10 <osMessageQueueGetSpace>
 8001880:	4603      	mov	r3, r0
 8001882:	4619      	mov	r1, r3
 8001884:	4805      	ldr	r0, [pc, #20]	; (800189c <sendMQTT_func+0xac>)
 8001886:	f00c fc47 	bl	800e118 <iprintf>
	  return_wait = osThreadFlagsWait(MODO_NORMAL | MODO_CONTINUO, osFlagsWaitAny, osWaitForever);
 800188a:	e7b7      	b.n	80017fc <sendMQTT_func+0xc>
 800188c:	0800fa7c 	.word	0x0800fa7c
 8001890:	0800faa0 	.word	0x0800faa0
 8001894:	20000790 	.word	0x20000790
 8001898:	20000264 	.word	0x20000264
 800189c:	0800fac4 	.word	0x0800fac4

080018a0 <wifiStartTask_func>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_wifiStartTask_func */
void wifiStartTask_func(void *argument)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b082      	sub	sp, #8
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN wifiStartTask_func */
	wifi_connect();
 80018a8:	f7ff fc5e 	bl	8001168 <wifi_connect>
  /* Infinite loop */
  for(;;)
  {
	  osDelay(pdMS_TO_TICKS(1));
 80018ac:	2001      	movs	r0, #1
 80018ae:	f009 f862 	bl	800a976 <osDelay>
 80018b2:	e7fb      	b.n	80018ac <wifiStartTask_func+0xc>

080018b4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b082      	sub	sp, #8
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4a04      	ldr	r2, [pc, #16]	; (80018d4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d101      	bne.n	80018ca <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80018c6:	f000 fd4f 	bl	8002368 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80018ca:	bf00      	nop
 80018cc:	3708      	adds	r7, #8
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	bf00      	nop
 80018d4:	40001000 	.word	0x40001000

080018d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018d8:	b480      	push	{r7}
 80018da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018dc:	b672      	cpsid	i
}
 80018de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018e0:	e7fe      	b.n	80018e0 <Error_Handler+0x8>
	...

080018e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b082      	sub	sp, #8
 80018e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018ea:	4b11      	ldr	r3, [pc, #68]	; (8001930 <HAL_MspInit+0x4c>)
 80018ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018ee:	4a10      	ldr	r2, [pc, #64]	; (8001930 <HAL_MspInit+0x4c>)
 80018f0:	f043 0301 	orr.w	r3, r3, #1
 80018f4:	6613      	str	r3, [r2, #96]	; 0x60
 80018f6:	4b0e      	ldr	r3, [pc, #56]	; (8001930 <HAL_MspInit+0x4c>)
 80018f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018fa:	f003 0301 	and.w	r3, r3, #1
 80018fe:	607b      	str	r3, [r7, #4]
 8001900:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001902:	4b0b      	ldr	r3, [pc, #44]	; (8001930 <HAL_MspInit+0x4c>)
 8001904:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001906:	4a0a      	ldr	r2, [pc, #40]	; (8001930 <HAL_MspInit+0x4c>)
 8001908:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800190c:	6593      	str	r3, [r2, #88]	; 0x58
 800190e:	4b08      	ldr	r3, [pc, #32]	; (8001930 <HAL_MspInit+0x4c>)
 8001910:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001912:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001916:	603b      	str	r3, [r7, #0]
 8001918:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800191a:	2200      	movs	r2, #0
 800191c:	210f      	movs	r1, #15
 800191e:	f06f 0001 	mvn.w	r0, #1
 8001922:	f000 fe41 	bl	80025a8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001926:	bf00      	nop
 8001928:	3708      	adds	r7, #8
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	40021000 	.word	0x40021000

08001934 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b0ac      	sub	sp, #176	; 0xb0
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800193c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001940:	2200      	movs	r2, #0
 8001942:	601a      	str	r2, [r3, #0]
 8001944:	605a      	str	r2, [r3, #4]
 8001946:	609a      	str	r2, [r3, #8]
 8001948:	60da      	str	r2, [r3, #12]
 800194a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800194c:	f107 0314 	add.w	r3, r7, #20
 8001950:	2288      	movs	r2, #136	; 0x88
 8001952:	2100      	movs	r1, #0
 8001954:	4618      	mov	r0, r3
 8001956:	f00c fb42 	bl	800dfde <memset>
  if(DFSDM1_Init == 0)
 800195a:	4b25      	ldr	r3, [pc, #148]	; (80019f0 <HAL_DFSDM_ChannelMspInit+0xbc>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	2b00      	cmp	r3, #0
 8001960:	d142      	bne.n	80019e8 <HAL_DFSDM_ChannelMspInit+0xb4>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8001962:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001966:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8001968:	2300      	movs	r3, #0
 800196a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800196e:	f107 0314 	add.w	r3, r7, #20
 8001972:	4618      	mov	r0, r3
 8001974:	f003 f90a 	bl	8004b8c <HAL_RCCEx_PeriphCLKConfig>
 8001978:	4603      	mov	r3, r0
 800197a:	2b00      	cmp	r3, #0
 800197c:	d001      	beq.n	8001982 <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 800197e:	f7ff ffab 	bl	80018d8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8001982:	4b1c      	ldr	r3, [pc, #112]	; (80019f4 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001984:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001986:	4a1b      	ldr	r2, [pc, #108]	; (80019f4 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001988:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800198c:	6613      	str	r3, [r2, #96]	; 0x60
 800198e:	4b19      	ldr	r3, [pc, #100]	; (80019f4 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001990:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001992:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001996:	613b      	str	r3, [r7, #16]
 8001998:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800199a:	4b16      	ldr	r3, [pc, #88]	; (80019f4 <HAL_DFSDM_ChannelMspInit+0xc0>)
 800199c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800199e:	4a15      	ldr	r2, [pc, #84]	; (80019f4 <HAL_DFSDM_ChannelMspInit+0xc0>)
 80019a0:	f043 0310 	orr.w	r3, r3, #16
 80019a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019a6:	4b13      	ldr	r3, [pc, #76]	; (80019f4 <HAL_DFSDM_ChannelMspInit+0xc0>)
 80019a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019aa:	f003 0310 	and.w	r3, r3, #16
 80019ae:	60fb      	str	r3, [r7, #12]
 80019b0:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 80019b2:	f44f 7320 	mov.w	r3, #640	; 0x280
 80019b6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ba:	2302      	movs	r3, #2
 80019bc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c0:	2300      	movs	r3, #0
 80019c2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019c6:	2300      	movs	r3, #0
 80019c8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 80019cc:	2306      	movs	r3, #6
 80019ce:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80019d2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80019d6:	4619      	mov	r1, r3
 80019d8:	4807      	ldr	r0, [pc, #28]	; (80019f8 <HAL_DFSDM_ChannelMspInit+0xc4>)
 80019da:	f000 ffa9 	bl	8002930 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 80019de:	4b04      	ldr	r3, [pc, #16]	; (80019f0 <HAL_DFSDM_ChannelMspInit+0xbc>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	3301      	adds	r3, #1
 80019e4:	4a02      	ldr	r2, [pc, #8]	; (80019f0 <HAL_DFSDM_ChannelMspInit+0xbc>)
 80019e6:	6013      	str	r3, [r2, #0]
  }

}
 80019e8:	bf00      	nop
 80019ea:	37b0      	adds	r7, #176	; 0xb0
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bd80      	pop	{r7, pc}
 80019f0:	200007c0 	.word	0x200007c0
 80019f4:	40021000 	.word	0x40021000
 80019f8:	48001000 	.word	0x48001000

080019fc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b0ac      	sub	sp, #176	; 0xb0
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a04:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001a08:	2200      	movs	r2, #0
 8001a0a:	601a      	str	r2, [r3, #0]
 8001a0c:	605a      	str	r2, [r3, #4]
 8001a0e:	609a      	str	r2, [r3, #8]
 8001a10:	60da      	str	r2, [r3, #12]
 8001a12:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a14:	f107 0314 	add.w	r3, r7, #20
 8001a18:	2288      	movs	r2, #136	; 0x88
 8001a1a:	2100      	movs	r1, #0
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f00c fade 	bl	800dfde <memset>
  if(hi2c->Instance==I2C2)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	4a21      	ldr	r2, [pc, #132]	; (8001aac <HAL_I2C_MspInit+0xb0>)
 8001a28:	4293      	cmp	r3, r2
 8001a2a:	d13b      	bne.n	8001aa4 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001a2c:	2380      	movs	r3, #128	; 0x80
 8001a2e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001a30:	2300      	movs	r3, #0
 8001a32:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a34:	f107 0314 	add.w	r3, r7, #20
 8001a38:	4618      	mov	r0, r3
 8001a3a:	f003 f8a7 	bl	8004b8c <HAL_RCCEx_PeriphCLKConfig>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d001      	beq.n	8001a48 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001a44:	f7ff ff48 	bl	80018d8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a48:	4b19      	ldr	r3, [pc, #100]	; (8001ab0 <HAL_I2C_MspInit+0xb4>)
 8001a4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a4c:	4a18      	ldr	r2, [pc, #96]	; (8001ab0 <HAL_I2C_MspInit+0xb4>)
 8001a4e:	f043 0302 	orr.w	r3, r3, #2
 8001a52:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a54:	4b16      	ldr	r3, [pc, #88]	; (8001ab0 <HAL_I2C_MspInit+0xb4>)
 8001a56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a58:	f003 0302 	and.w	r3, r3, #2
 8001a5c:	613b      	str	r3, [r7, #16]
 8001a5e:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8001a60:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001a64:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a68:	2312      	movs	r3, #18
 8001a6a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a6e:	2301      	movs	r3, #1
 8001a70:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a74:	2303      	movs	r3, #3
 8001a76:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001a7a:	2304      	movs	r3, #4
 8001a7c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a80:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001a84:	4619      	mov	r1, r3
 8001a86:	480b      	ldr	r0, [pc, #44]	; (8001ab4 <HAL_I2C_MspInit+0xb8>)
 8001a88:	f000 ff52 	bl	8002930 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001a8c:	4b08      	ldr	r3, [pc, #32]	; (8001ab0 <HAL_I2C_MspInit+0xb4>)
 8001a8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a90:	4a07      	ldr	r2, [pc, #28]	; (8001ab0 <HAL_I2C_MspInit+0xb4>)
 8001a92:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001a96:	6593      	str	r3, [r2, #88]	; 0x58
 8001a98:	4b05      	ldr	r3, [pc, #20]	; (8001ab0 <HAL_I2C_MspInit+0xb4>)
 8001a9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a9c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001aa0:	60fb      	str	r3, [r7, #12]
 8001aa2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001aa4:	bf00      	nop
 8001aa6:	37b0      	adds	r7, #176	; 0xb0
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bd80      	pop	{r7, pc}
 8001aac:	40005800 	.word	0x40005800
 8001ab0:	40021000 	.word	0x40021000
 8001ab4:	48000400 	.word	0x48000400

08001ab8 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b082      	sub	sp, #8
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C2)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4a0b      	ldr	r2, [pc, #44]	; (8001af4 <HAL_I2C_MspDeInit+0x3c>)
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d10f      	bne.n	8001aea <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 8001aca:	4b0b      	ldr	r3, [pc, #44]	; (8001af8 <HAL_I2C_MspDeInit+0x40>)
 8001acc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ace:	4a0a      	ldr	r2, [pc, #40]	; (8001af8 <HAL_I2C_MspDeInit+0x40>)
 8001ad0:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001ad4:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    HAL_GPIO_DeInit(INTERNAL_I2C2_SCL_GPIO_Port, INTERNAL_I2C2_SCL_Pin);
 8001ad6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001ada:	4808      	ldr	r0, [pc, #32]	; (8001afc <HAL_I2C_MspDeInit+0x44>)
 8001adc:	f001 f8d2 	bl	8002c84 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(INTERNAL_I2C2_SDA_GPIO_Port, INTERNAL_I2C2_SDA_Pin);
 8001ae0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001ae4:	4805      	ldr	r0, [pc, #20]	; (8001afc <HAL_I2C_MspDeInit+0x44>)
 8001ae6:	f001 f8cd 	bl	8002c84 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 8001aea:	bf00      	nop
 8001aec:	3708      	adds	r7, #8
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	bf00      	nop
 8001af4:	40005800 	.word	0x40005800
 8001af8:	40021000 	.word	0x40021000
 8001afc:	48000400 	.word	0x48000400

08001b00 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b08a      	sub	sp, #40	; 0x28
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b08:	f107 0314 	add.w	r3, r7, #20
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	601a      	str	r2, [r3, #0]
 8001b10:	605a      	str	r2, [r3, #4]
 8001b12:	609a      	str	r2, [r3, #8]
 8001b14:	60da      	str	r2, [r3, #12]
 8001b16:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a17      	ldr	r2, [pc, #92]	; (8001b7c <HAL_QSPI_MspInit+0x7c>)
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d128      	bne.n	8001b74 <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001b22:	4b17      	ldr	r3, [pc, #92]	; (8001b80 <HAL_QSPI_MspInit+0x80>)
 8001b24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b26:	4a16      	ldr	r2, [pc, #88]	; (8001b80 <HAL_QSPI_MspInit+0x80>)
 8001b28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b2c:	6513      	str	r3, [r2, #80]	; 0x50
 8001b2e:	4b14      	ldr	r3, [pc, #80]	; (8001b80 <HAL_QSPI_MspInit+0x80>)
 8001b30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b36:	613b      	str	r3, [r7, #16]
 8001b38:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001b3a:	4b11      	ldr	r3, [pc, #68]	; (8001b80 <HAL_QSPI_MspInit+0x80>)
 8001b3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b3e:	4a10      	ldr	r2, [pc, #64]	; (8001b80 <HAL_QSPI_MspInit+0x80>)
 8001b40:	f043 0310 	orr.w	r3, r3, #16
 8001b44:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b46:	4b0e      	ldr	r3, [pc, #56]	; (8001b80 <HAL_QSPI_MspInit+0x80>)
 8001b48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b4a:	f003 0310 	and.w	r3, r3, #16
 8001b4e:	60fb      	str	r3, [r7, #12]
 8001b50:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 8001b52:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8001b56:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b58:	2302      	movs	r3, #2
 8001b5a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b60:	2303      	movs	r3, #3
 8001b62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001b64:	230a      	movs	r3, #10
 8001b66:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001b68:	f107 0314 	add.w	r3, r7, #20
 8001b6c:	4619      	mov	r1, r3
 8001b6e:	4805      	ldr	r0, [pc, #20]	; (8001b84 <HAL_QSPI_MspInit+0x84>)
 8001b70:	f000 fede 	bl	8002930 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8001b74:	bf00      	nop
 8001b76:	3728      	adds	r7, #40	; 0x28
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bd80      	pop	{r7, pc}
 8001b7c:	a0001000 	.word	0xa0001000
 8001b80:	40021000 	.word	0x40021000
 8001b84:	48001000 	.word	0x48001000

08001b88 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b0a4      	sub	sp, #144	; 0x90
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b90:	f107 0308 	add.w	r3, r7, #8
 8001b94:	2288      	movs	r2, #136	; 0x88
 8001b96:	2100      	movs	r1, #0
 8001b98:	4618      	mov	r0, r3
 8001b9a:	f00c fa20 	bl	800dfde <memset>
  if(hrtc->Instance==RTC)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4a10      	ldr	r2, [pc, #64]	; (8001be4 <HAL_RTC_MspInit+0x5c>)
 8001ba4:	4293      	cmp	r3, r2
 8001ba6:	d118      	bne.n	8001bda <HAL_RTC_MspInit+0x52>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001ba8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001bac:	60bb      	str	r3, [r7, #8]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001bae:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001bb2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001bb6:	f107 0308 	add.w	r3, r7, #8
 8001bba:	4618      	mov	r0, r3
 8001bbc:	f002 ffe6 	bl	8004b8c <HAL_RCCEx_PeriphCLKConfig>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d001      	beq.n	8001bca <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8001bc6:	f7ff fe87 	bl	80018d8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001bca:	4b07      	ldr	r3, [pc, #28]	; (8001be8 <HAL_RTC_MspInit+0x60>)
 8001bcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bd0:	4a05      	ldr	r2, [pc, #20]	; (8001be8 <HAL_RTC_MspInit+0x60>)
 8001bd2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001bd6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001bda:	bf00      	nop
 8001bdc:	3790      	adds	r7, #144	; 0x90
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}
 8001be2:	bf00      	nop
 8001be4:	40002800 	.word	0x40002800
 8001be8:	40021000 	.word	0x40021000

08001bec <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b08a      	sub	sp, #40	; 0x28
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bf4:	f107 0314 	add.w	r3, r7, #20
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	601a      	str	r2, [r3, #0]
 8001bfc:	605a      	str	r2, [r3, #4]
 8001bfe:	609a      	str	r2, [r3, #8]
 8001c00:	60da      	str	r2, [r3, #12]
 8001c02:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4a1b      	ldr	r2, [pc, #108]	; (8001c78 <HAL_SPI_MspInit+0x8c>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d130      	bne.n	8001c70 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001c0e:	4b1b      	ldr	r3, [pc, #108]	; (8001c7c <HAL_SPI_MspInit+0x90>)
 8001c10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c12:	4a1a      	ldr	r2, [pc, #104]	; (8001c7c <HAL_SPI_MspInit+0x90>)
 8001c14:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c18:	6593      	str	r3, [r2, #88]	; 0x58
 8001c1a:	4b18      	ldr	r3, [pc, #96]	; (8001c7c <HAL_SPI_MspInit+0x90>)
 8001c1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c1e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001c22:	613b      	str	r3, [r7, #16]
 8001c24:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c26:	4b15      	ldr	r3, [pc, #84]	; (8001c7c <HAL_SPI_MspInit+0x90>)
 8001c28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c2a:	4a14      	ldr	r2, [pc, #80]	; (8001c7c <HAL_SPI_MspInit+0x90>)
 8001c2c:	f043 0304 	orr.w	r3, r3, #4
 8001c30:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c32:	4b12      	ldr	r3, [pc, #72]	; (8001c7c <HAL_SPI_MspInit+0x90>)
 8001c34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c36:	f003 0304 	and.w	r3, r3, #4
 8001c3a:	60fb      	str	r3, [r7, #12]
 8001c3c:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 8001c3e:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001c42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c44:	2302      	movs	r3, #2
 8001c46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c4c:	2303      	movs	r3, #3
 8001c4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001c50:	2306      	movs	r3, #6
 8001c52:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c54:	f107 0314 	add.w	r3, r7, #20
 8001c58:	4619      	mov	r1, r3
 8001c5a:	4809      	ldr	r0, [pc, #36]	; (8001c80 <HAL_SPI_MspInit+0x94>)
 8001c5c:	f000 fe68 	bl	8002930 <HAL_GPIO_Init>

    /* SPI3 interrupt Init */
    HAL_NVIC_SetPriority(SPI3_IRQn, 5, 0);
 8001c60:	2200      	movs	r2, #0
 8001c62:	2105      	movs	r1, #5
 8001c64:	2033      	movs	r0, #51	; 0x33
 8001c66:	f000 fc9f 	bl	80025a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8001c6a:	2033      	movs	r0, #51	; 0x33
 8001c6c:	f000 fcb8 	bl	80025e0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001c70:	bf00      	nop
 8001c72:	3728      	adds	r7, #40	; 0x28
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd80      	pop	{r7, pc}
 8001c78:	40003c00 	.word	0x40003c00
 8001c7c:	40021000 	.word	0x40021000
 8001c80:	48000800 	.word	0x48000800

08001c84 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b082      	sub	sp, #8
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI3)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4a0a      	ldr	r2, [pc, #40]	; (8001cbc <HAL_SPI_MspDeInit+0x38>)
 8001c92:	4293      	cmp	r3, r2
 8001c94:	d10d      	bne.n	8001cb2 <HAL_SPI_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN SPI3_MspDeInit 0 */

  /* USER CODE END SPI3_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI3_CLK_DISABLE();
 8001c96:	4b0a      	ldr	r3, [pc, #40]	; (8001cc0 <HAL_SPI_MspDeInit+0x3c>)
 8001c98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c9a:	4a09      	ldr	r2, [pc, #36]	; (8001cc0 <HAL_SPI_MspDeInit+0x3c>)
 8001c9c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001ca0:	6593      	str	r3, [r2, #88]	; 0x58
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    HAL_GPIO_DeInit(GPIOC, INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin);
 8001ca2:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 8001ca6:	4807      	ldr	r0, [pc, #28]	; (8001cc4 <HAL_SPI_MspDeInit+0x40>)
 8001ca8:	f000 ffec 	bl	8002c84 <HAL_GPIO_DeInit>

    /* SPI3 interrupt DeInit */
    HAL_NVIC_DisableIRQ(SPI3_IRQn);
 8001cac:	2033      	movs	r0, #51	; 0x33
 8001cae:	f000 fca5 	bl	80025fc <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN SPI3_MspDeInit 1 */

  /* USER CODE END SPI3_MspDeInit 1 */
  }

}
 8001cb2:	bf00      	nop
 8001cb4:	3708      	adds	r7, #8
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}
 8001cba:	bf00      	nop
 8001cbc:	40003c00 	.word	0x40003c00
 8001cc0:	40021000 	.word	0x40021000
 8001cc4:	48000800 	.word	0x48000800

08001cc8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b084      	sub	sp, #16
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4a0d      	ldr	r2, [pc, #52]	; (8001d0c <HAL_TIM_Base_MspInit+0x44>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d113      	bne.n	8001d02 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001cda:	4b0d      	ldr	r3, [pc, #52]	; (8001d10 <HAL_TIM_Base_MspInit+0x48>)
 8001cdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cde:	4a0c      	ldr	r2, [pc, #48]	; (8001d10 <HAL_TIM_Base_MspInit+0x48>)
 8001ce0:	f043 0320 	orr.w	r3, r3, #32
 8001ce4:	6593      	str	r3, [r2, #88]	; 0x58
 8001ce6:	4b0a      	ldr	r3, [pc, #40]	; (8001d10 <HAL_TIM_Base_MspInit+0x48>)
 8001ce8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cea:	f003 0320 	and.w	r3, r3, #32
 8001cee:	60fb      	str	r3, [r7, #12]
 8001cf0:	68fb      	ldr	r3, [r7, #12]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 5, 0);
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	2105      	movs	r1, #5
 8001cf6:	2037      	movs	r0, #55	; 0x37
 8001cf8:	f000 fc56 	bl	80025a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001cfc:	2037      	movs	r0, #55	; 0x37
 8001cfe:	f000 fc6f 	bl	80025e0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8001d02:	bf00      	nop
 8001d04:	3710      	adds	r7, #16
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}
 8001d0a:	bf00      	nop
 8001d0c:	40001400 	.word	0x40001400
 8001d10:	40021000 	.word	0x40021000

08001d14 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b0ae      	sub	sp, #184	; 0xb8
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d1c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001d20:	2200      	movs	r2, #0
 8001d22:	601a      	str	r2, [r3, #0]
 8001d24:	605a      	str	r2, [r3, #4]
 8001d26:	609a      	str	r2, [r3, #8]
 8001d28:	60da      	str	r2, [r3, #12]
 8001d2a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001d2c:	f107 031c 	add.w	r3, r7, #28
 8001d30:	2288      	movs	r2, #136	; 0x88
 8001d32:	2100      	movs	r1, #0
 8001d34:	4618      	mov	r0, r3
 8001d36:	f00c f952 	bl	800dfde <memset>
  if(huart->Instance==USART1)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4a46      	ldr	r2, [pc, #280]	; (8001e58 <HAL_UART_MspInit+0x144>)
 8001d40:	4293      	cmp	r3, r2
 8001d42:	d143      	bne.n	8001dcc <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001d44:	2301      	movs	r3, #1
 8001d46:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d4c:	f107 031c 	add.w	r3, r7, #28
 8001d50:	4618      	mov	r0, r3
 8001d52:	f002 ff1b 	bl	8004b8c <HAL_RCCEx_PeriphCLKConfig>
 8001d56:	4603      	mov	r3, r0
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d001      	beq.n	8001d60 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001d5c:	f7ff fdbc 	bl	80018d8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001d60:	4b3e      	ldr	r3, [pc, #248]	; (8001e5c <HAL_UART_MspInit+0x148>)
 8001d62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d64:	4a3d      	ldr	r2, [pc, #244]	; (8001e5c <HAL_UART_MspInit+0x148>)
 8001d66:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d6a:	6613      	str	r3, [r2, #96]	; 0x60
 8001d6c:	4b3b      	ldr	r3, [pc, #236]	; (8001e5c <HAL_UART_MspInit+0x148>)
 8001d6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d70:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d74:	61bb      	str	r3, [r7, #24]
 8001d76:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d78:	4b38      	ldr	r3, [pc, #224]	; (8001e5c <HAL_UART_MspInit+0x148>)
 8001d7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d7c:	4a37      	ldr	r2, [pc, #220]	; (8001e5c <HAL_UART_MspInit+0x148>)
 8001d7e:	f043 0302 	orr.w	r3, r3, #2
 8001d82:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d84:	4b35      	ldr	r3, [pc, #212]	; (8001e5c <HAL_UART_MspInit+0x148>)
 8001d86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d88:	f003 0302 	and.w	r3, r3, #2
 8001d8c:	617b      	str	r3, [r7, #20]
 8001d8e:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 8001d90:	23c0      	movs	r3, #192	; 0xc0
 8001d92:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d96:	2302      	movs	r3, #2
 8001d98:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001da2:	2303      	movs	r3, #3
 8001da4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001da8:	2307      	movs	r3, #7
 8001daa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dae:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001db2:	4619      	mov	r1, r3
 8001db4:	482a      	ldr	r0, [pc, #168]	; (8001e60 <HAL_UART_MspInit+0x14c>)
 8001db6:	f000 fdbb 	bl	8002930 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8001dba:	2200      	movs	r2, #0
 8001dbc:	2105      	movs	r1, #5
 8001dbe:	2025      	movs	r0, #37	; 0x25
 8001dc0:	f000 fbf2 	bl	80025a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001dc4:	2025      	movs	r0, #37	; 0x25
 8001dc6:	f000 fc0b 	bl	80025e0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001dca:	e040      	b.n	8001e4e <HAL_UART_MspInit+0x13a>
  else if(huart->Instance==USART3)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4a24      	ldr	r2, [pc, #144]	; (8001e64 <HAL_UART_MspInit+0x150>)
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d13b      	bne.n	8001e4e <HAL_UART_MspInit+0x13a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001dd6:	2304      	movs	r3, #4
 8001dd8:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001dde:	f107 031c 	add.w	r3, r7, #28
 8001de2:	4618      	mov	r0, r3
 8001de4:	f002 fed2 	bl	8004b8c <HAL_RCCEx_PeriphCLKConfig>
 8001de8:	4603      	mov	r3, r0
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d001      	beq.n	8001df2 <HAL_UART_MspInit+0xde>
      Error_Handler();
 8001dee:	f7ff fd73 	bl	80018d8 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001df2:	4b1a      	ldr	r3, [pc, #104]	; (8001e5c <HAL_UART_MspInit+0x148>)
 8001df4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001df6:	4a19      	ldr	r2, [pc, #100]	; (8001e5c <HAL_UART_MspInit+0x148>)
 8001df8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001dfc:	6593      	str	r3, [r2, #88]	; 0x58
 8001dfe:	4b17      	ldr	r3, [pc, #92]	; (8001e5c <HAL_UART_MspInit+0x148>)
 8001e00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e02:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e06:	613b      	str	r3, [r7, #16]
 8001e08:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e0a:	4b14      	ldr	r3, [pc, #80]	; (8001e5c <HAL_UART_MspInit+0x148>)
 8001e0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e0e:	4a13      	ldr	r2, [pc, #76]	; (8001e5c <HAL_UART_MspInit+0x148>)
 8001e10:	f043 0308 	orr.w	r3, r3, #8
 8001e14:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e16:	4b11      	ldr	r3, [pc, #68]	; (8001e5c <HAL_UART_MspInit+0x148>)
 8001e18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e1a:	f003 0308 	and.w	r3, r3, #8
 8001e1e:	60fb      	str	r3, [r7, #12]
 8001e20:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 8001e22:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001e26:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e2a:	2302      	movs	r3, #2
 8001e2c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e30:	2300      	movs	r3, #0
 8001e32:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e36:	2303      	movs	r3, #3
 8001e38:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001e3c:	2307      	movs	r3, #7
 8001e3e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e42:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001e46:	4619      	mov	r1, r3
 8001e48:	4807      	ldr	r0, [pc, #28]	; (8001e68 <HAL_UART_MspInit+0x154>)
 8001e4a:	f000 fd71 	bl	8002930 <HAL_GPIO_Init>
}
 8001e4e:	bf00      	nop
 8001e50:	37b8      	adds	r7, #184	; 0xb8
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}
 8001e56:	bf00      	nop
 8001e58:	40013800 	.word	0x40013800
 8001e5c:	40021000 	.word	0x40021000
 8001e60:	48000400 	.word	0x48000400
 8001e64:	40004800 	.word	0x40004800
 8001e68:	48000c00 	.word	0x48000c00

08001e6c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b0ac      	sub	sp, #176	; 0xb0
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e74:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001e78:	2200      	movs	r2, #0
 8001e7a:	601a      	str	r2, [r3, #0]
 8001e7c:	605a      	str	r2, [r3, #4]
 8001e7e:	609a      	str	r2, [r3, #8]
 8001e80:	60da      	str	r2, [r3, #12]
 8001e82:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001e84:	f107 0314 	add.w	r3, r7, #20
 8001e88:	2288      	movs	r2, #136	; 0x88
 8001e8a:	2100      	movs	r1, #0
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	f00c f8a6 	bl	800dfde <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001e9a:	d17c      	bne.n	8001f96 <HAL_PCD_MspInit+0x12a>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001e9c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ea0:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8001ea2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001ea6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8001eaa:	2301      	movs	r3, #1
 8001eac:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8001eb2:	2318      	movs	r3, #24
 8001eb4:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001eb6:	2307      	movs	r3, #7
 8001eb8:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001eba:	2302      	movs	r3, #2
 8001ebc:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001ebe:	2302      	movs	r3, #2
 8001ec0:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8001ec2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001ec6:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ec8:	f107 0314 	add.w	r3, r7, #20
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f002 fe5d 	bl	8004b8c <HAL_RCCEx_PeriphCLKConfig>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d001      	beq.n	8001edc <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 8001ed8:	f7ff fcfe 	bl	80018d8 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001edc:	4b30      	ldr	r3, [pc, #192]	; (8001fa0 <HAL_PCD_MspInit+0x134>)
 8001ede:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ee0:	4a2f      	ldr	r2, [pc, #188]	; (8001fa0 <HAL_PCD_MspInit+0x134>)
 8001ee2:	f043 0301 	orr.w	r3, r3, #1
 8001ee6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ee8:	4b2d      	ldr	r3, [pc, #180]	; (8001fa0 <HAL_PCD_MspInit+0x134>)
 8001eea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001eec:	f003 0301 	and.w	r3, r3, #1
 8001ef0:	613b      	str	r3, [r7, #16]
 8001ef2:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 8001ef4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ef8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001efc:	2300      	movs	r3, #0
 8001efe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f02:	2300      	movs	r3, #0
 8001f04:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001f08:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001f0c:	4619      	mov	r1, r3
 8001f0e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f12:	f000 fd0d 	bl	8002930 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8001f16:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001f1a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f1e:	2302      	movs	r3, #2
 8001f20:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f24:	2300      	movs	r3, #0
 8001f26:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f2a:	2303      	movs	r3, #3
 8001f2c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001f30:	230a      	movs	r3, #10
 8001f32:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f36:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001f3a:	4619      	mov	r1, r3
 8001f3c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f40:	f000 fcf6 	bl	8002930 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001f44:	4b16      	ldr	r3, [pc, #88]	; (8001fa0 <HAL_PCD_MspInit+0x134>)
 8001f46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f48:	4a15      	ldr	r2, [pc, #84]	; (8001fa0 <HAL_PCD_MspInit+0x134>)
 8001f4a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001f4e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f50:	4b13      	ldr	r3, [pc, #76]	; (8001fa0 <HAL_PCD_MspInit+0x134>)
 8001f52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f54:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f58:	60fb      	str	r3, [r7, #12]
 8001f5a:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f5c:	4b10      	ldr	r3, [pc, #64]	; (8001fa0 <HAL_PCD_MspInit+0x134>)
 8001f5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d114      	bne.n	8001f92 <HAL_PCD_MspInit+0x126>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f68:	4b0d      	ldr	r3, [pc, #52]	; (8001fa0 <HAL_PCD_MspInit+0x134>)
 8001f6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f6c:	4a0c      	ldr	r2, [pc, #48]	; (8001fa0 <HAL_PCD_MspInit+0x134>)
 8001f6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f72:	6593      	str	r3, [r2, #88]	; 0x58
 8001f74:	4b0a      	ldr	r3, [pc, #40]	; (8001fa0 <HAL_PCD_MspInit+0x134>)
 8001f76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f7c:	60bb      	str	r3, [r7, #8]
 8001f7e:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8001f80:	f001 ff18 	bl	8003db4 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f84:	4b06      	ldr	r3, [pc, #24]	; (8001fa0 <HAL_PCD_MspInit+0x134>)
 8001f86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f88:	4a05      	ldr	r2, [pc, #20]	; (8001fa0 <HAL_PCD_MspInit+0x134>)
 8001f8a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f8e:	6593      	str	r3, [r2, #88]	; 0x58
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001f90:	e001      	b.n	8001f96 <HAL_PCD_MspInit+0x12a>
      HAL_PWREx_EnableVddUSB();
 8001f92:	f001 ff0f 	bl	8003db4 <HAL_PWREx_EnableVddUSB>
}
 8001f96:	bf00      	nop
 8001f98:	37b0      	adds	r7, #176	; 0xb0
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd80      	pop	{r7, pc}
 8001f9e:	bf00      	nop
 8001fa0:	40021000 	.word	0x40021000

08001fa4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b08e      	sub	sp, #56	; 0x38
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8001fac:	2300      	movs	r3, #0
 8001fae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001fb2:	4b34      	ldr	r3, [pc, #208]	; (8002084 <HAL_InitTick+0xe0>)
 8001fb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fb6:	4a33      	ldr	r2, [pc, #204]	; (8002084 <HAL_InitTick+0xe0>)
 8001fb8:	f043 0310 	orr.w	r3, r3, #16
 8001fbc:	6593      	str	r3, [r2, #88]	; 0x58
 8001fbe:	4b31      	ldr	r3, [pc, #196]	; (8002084 <HAL_InitTick+0xe0>)
 8001fc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fc2:	f003 0310 	and.w	r3, r3, #16
 8001fc6:	60fb      	str	r3, [r7, #12]
 8001fc8:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001fca:	f107 0210 	add.w	r2, r7, #16
 8001fce:	f107 0314 	add.w	r3, r7, #20
 8001fd2:	4611      	mov	r1, r2
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	f002 fd47 	bl	8004a68 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001fda:	6a3b      	ldr	r3, [r7, #32]
 8001fdc:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001fde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d103      	bne.n	8001fec <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001fe4:	f002 fd14 	bl	8004a10 <HAL_RCC_GetPCLK1Freq>
 8001fe8:	6378      	str	r0, [r7, #52]	; 0x34
 8001fea:	e004      	b.n	8001ff6 <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001fec:	f002 fd10 	bl	8004a10 <HAL_RCC_GetPCLK1Freq>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	005b      	lsls	r3, r3, #1
 8001ff4:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001ff6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ff8:	4a23      	ldr	r2, [pc, #140]	; (8002088 <HAL_InitTick+0xe4>)
 8001ffa:	fba2 2303 	umull	r2, r3, r2, r3
 8001ffe:	0c9b      	lsrs	r3, r3, #18
 8002000:	3b01      	subs	r3, #1
 8002002:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002004:	4b21      	ldr	r3, [pc, #132]	; (800208c <HAL_InitTick+0xe8>)
 8002006:	4a22      	ldr	r2, [pc, #136]	; (8002090 <HAL_InitTick+0xec>)
 8002008:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800200a:	4b20      	ldr	r3, [pc, #128]	; (800208c <HAL_InitTick+0xe8>)
 800200c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002010:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002012:	4a1e      	ldr	r2, [pc, #120]	; (800208c <HAL_InitTick+0xe8>)
 8002014:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002016:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002018:	4b1c      	ldr	r3, [pc, #112]	; (800208c <HAL_InitTick+0xe8>)
 800201a:	2200      	movs	r2, #0
 800201c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800201e:	4b1b      	ldr	r3, [pc, #108]	; (800208c <HAL_InitTick+0xe8>)
 8002020:	2200      	movs	r2, #0
 8002022:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002024:	4b19      	ldr	r3, [pc, #100]	; (800208c <HAL_InitTick+0xe8>)
 8002026:	2200      	movs	r2, #0
 8002028:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 800202a:	4818      	ldr	r0, [pc, #96]	; (800208c <HAL_InitTick+0xe8>)
 800202c:	f005 f8c1 	bl	80071b2 <HAL_TIM_Base_Init>
 8002030:	4603      	mov	r3, r0
 8002032:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8002036:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800203a:	2b00      	cmp	r3, #0
 800203c:	d11b      	bne.n	8002076 <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 800203e:	4813      	ldr	r0, [pc, #76]	; (800208c <HAL_InitTick+0xe8>)
 8002040:	f005 f90e 	bl	8007260 <HAL_TIM_Base_Start_IT>
 8002044:	4603      	mov	r3, r0
 8002046:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 800204a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800204e:	2b00      	cmp	r3, #0
 8002050:	d111      	bne.n	8002076 <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002052:	2036      	movs	r0, #54	; 0x36
 8002054:	f000 fac4 	bl	80025e0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2b0f      	cmp	r3, #15
 800205c:	d808      	bhi.n	8002070 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 800205e:	2200      	movs	r2, #0
 8002060:	6879      	ldr	r1, [r7, #4]
 8002062:	2036      	movs	r0, #54	; 0x36
 8002064:	f000 faa0 	bl	80025a8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002068:	4a0a      	ldr	r2, [pc, #40]	; (8002094 <HAL_InitTick+0xf0>)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6013      	str	r3, [r2, #0]
 800206e:	e002      	b.n	8002076 <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8002070:	2301      	movs	r3, #1
 8002072:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8002076:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800207a:	4618      	mov	r0, r3
 800207c:	3738      	adds	r7, #56	; 0x38
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}
 8002082:	bf00      	nop
 8002084:	40021000 	.word	0x40021000
 8002088:	431bde83 	.word	0x431bde83
 800208c:	200007c4 	.word	0x200007c4
 8002090:	40001000 	.word	0x40001000
 8002094:	20000008 	.word	0x20000008

08002098 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002098:	b480      	push	{r7}
 800209a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800209c:	e7fe      	b.n	800209c <NMI_Handler+0x4>

0800209e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800209e:	b480      	push	{r7}
 80020a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80020a2:	e7fe      	b.n	80020a2 <HardFault_Handler+0x4>

080020a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80020a4:	b480      	push	{r7}
 80020a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80020a8:	e7fe      	b.n	80020a8 <MemManage_Handler+0x4>

080020aa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80020aa:	b480      	push	{r7}
 80020ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80020ae:	e7fe      	b.n	80020ae <BusFault_Handler+0x4>

080020b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80020b0:	b480      	push	{r7}
 80020b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80020b4:	e7fe      	b.n	80020b4 <UsageFault_Handler+0x4>

080020b6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80020b6:	b480      	push	{r7}
 80020b8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80020ba:	bf00      	nop
 80020bc:	46bd      	mov	sp, r7
 80020be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c2:	4770      	bx	lr

080020c4 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ISM43362_DRDY_EXTI1_Pin);
 80020c8:	2002      	movs	r0, #2
 80020ca:	f000 feff 	bl	8002ecc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80020ce:	bf00      	nop
 80020d0:	bd80      	pop	{r7, pc}

080020d2 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80020d2:	b580      	push	{r7, lr}
 80020d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 80020d6:	2020      	movs	r0, #32
 80020d8:	f000 fef8 	bl	8002ecc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SPBTLE_RF_IRQ_EXTI6_Pin);
 80020dc:	2040      	movs	r0, #64	; 0x40
 80020de:	f000 fef5 	bl	8002ecc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 80020e2:	2080      	movs	r0, #128	; 0x80
 80020e4:	f000 fef2 	bl	8002ecc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 80020e8:	f44f 7080 	mov.w	r0, #256	; 0x100
 80020ec:	f000 feee 	bl	8002ecc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80020f0:	bf00      	nop
 80020f2:	bd80      	pop	{r7, pc}

080020f4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80020f8:	4802      	ldr	r0, [pc, #8]	; (8002104 <USART1_IRQHandler+0x10>)
 80020fa:	f005 fccf 	bl	8007a9c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80020fe:	bf00      	nop
 8002100:	bd80      	pop	{r7, pc}
 8002102:	bf00      	nop
 8002104:	20000264 	.word	0x20000264

08002108 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI0_Pin);
 800210c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002110:	f000 fedc 	bl	8002ecc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 8002114:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8002118:	f000 fed8 	bl	8002ecc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BOTON_Pin);
 800211c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002120:	f000 fed4 	bl	8002ecc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 8002124:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002128:	f000 fed0 	bl	8002ecc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 800212c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002130:	f000 fecc 	bl	8002ecc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002134:	bf00      	nop
 8002136:	bd80      	pop	{r7, pc}

08002138 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800213c:	4802      	ldr	r0, [pc, #8]	; (8002148 <TIM6_DAC_IRQHandler+0x10>)
 800213e:	f005 f8ff 	bl	8007340 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002142:	bf00      	nop
 8002144:	bd80      	pop	{r7, pc}
 8002146:	bf00      	nop
 8002148:	200007c4 	.word	0x200007c4

0800214c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */
  ulHighFrequencyTimerTicks++;
 8002150:	4b04      	ldr	r3, [pc, #16]	; (8002164 <TIM7_IRQHandler+0x18>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	3301      	adds	r3, #1
 8002156:	4a03      	ldr	r2, [pc, #12]	; (8002164 <TIM7_IRQHandler+0x18>)
 8002158:	6013      	str	r3, [r2, #0]
  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 800215a:	4803      	ldr	r0, [pc, #12]	; (8002168 <TIM7_IRQHandler+0x1c>)
 800215c:	f005 f8f0 	bl	8007340 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8002160:	bf00      	nop
 8002162:	bd80      	pop	{r7, pc}
 8002164:	200007b8 	.word	0x200007b8
 8002168:	20000218 	.word	0x20000218

0800216c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800216c:	b480      	push	{r7}
 800216e:	af00      	add	r7, sp, #0
  return 1;
 8002170:	2301      	movs	r3, #1
}
 8002172:	4618      	mov	r0, r3
 8002174:	46bd      	mov	sp, r7
 8002176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217a:	4770      	bx	lr

0800217c <_kill>:

int _kill(int pid, int sig)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b082      	sub	sp, #8
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
 8002184:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002186:	f00b fdf9 	bl	800dd7c <__errno>
 800218a:	4603      	mov	r3, r0
 800218c:	2216      	movs	r2, #22
 800218e:	601a      	str	r2, [r3, #0]
  return -1;
 8002190:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002194:	4618      	mov	r0, r3
 8002196:	3708      	adds	r7, #8
 8002198:	46bd      	mov	sp, r7
 800219a:	bd80      	pop	{r7, pc}

0800219c <_exit>:

void _exit (int status)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b082      	sub	sp, #8
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80021a4:	f04f 31ff 	mov.w	r1, #4294967295
 80021a8:	6878      	ldr	r0, [r7, #4]
 80021aa:	f7ff ffe7 	bl	800217c <_kill>
  while (1) {}    /* Make sure we hang here */
 80021ae:	e7fe      	b.n	80021ae <_exit+0x12>

080021b0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b086      	sub	sp, #24
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	60f8      	str	r0, [r7, #12]
 80021b8:	60b9      	str	r1, [r7, #8]
 80021ba:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021bc:	2300      	movs	r3, #0
 80021be:	617b      	str	r3, [r7, #20]
 80021c0:	e00a      	b.n	80021d8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80021c2:	f3af 8000 	nop.w
 80021c6:	4601      	mov	r1, r0
 80021c8:	68bb      	ldr	r3, [r7, #8]
 80021ca:	1c5a      	adds	r2, r3, #1
 80021cc:	60ba      	str	r2, [r7, #8]
 80021ce:	b2ca      	uxtb	r2, r1
 80021d0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021d2:	697b      	ldr	r3, [r7, #20]
 80021d4:	3301      	adds	r3, #1
 80021d6:	617b      	str	r3, [r7, #20]
 80021d8:	697a      	ldr	r2, [r7, #20]
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	429a      	cmp	r2, r3
 80021de:	dbf0      	blt.n	80021c2 <_read+0x12>
  }

  return len;
 80021e0:	687b      	ldr	r3, [r7, #4]
}
 80021e2:	4618      	mov	r0, r3
 80021e4:	3718      	adds	r7, #24
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd80      	pop	{r7, pc}

080021ea <_close>:
  }
  return len;
}

int _close(int file)
{
 80021ea:	b480      	push	{r7}
 80021ec:	b083      	sub	sp, #12
 80021ee:	af00      	add	r7, sp, #0
 80021f0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80021f2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80021f6:	4618      	mov	r0, r3
 80021f8:	370c      	adds	r7, #12
 80021fa:	46bd      	mov	sp, r7
 80021fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002200:	4770      	bx	lr

08002202 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002202:	b480      	push	{r7}
 8002204:	b083      	sub	sp, #12
 8002206:	af00      	add	r7, sp, #0
 8002208:	6078      	str	r0, [r7, #4]
 800220a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002212:	605a      	str	r2, [r3, #4]
  return 0;
 8002214:	2300      	movs	r3, #0
}
 8002216:	4618      	mov	r0, r3
 8002218:	370c      	adds	r7, #12
 800221a:	46bd      	mov	sp, r7
 800221c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002220:	4770      	bx	lr

08002222 <_isatty>:

int _isatty(int file)
{
 8002222:	b480      	push	{r7}
 8002224:	b083      	sub	sp, #12
 8002226:	af00      	add	r7, sp, #0
 8002228:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800222a:	2301      	movs	r3, #1
}
 800222c:	4618      	mov	r0, r3
 800222e:	370c      	adds	r7, #12
 8002230:	46bd      	mov	sp, r7
 8002232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002236:	4770      	bx	lr

08002238 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002238:	b480      	push	{r7}
 800223a:	b085      	sub	sp, #20
 800223c:	af00      	add	r7, sp, #0
 800223e:	60f8      	str	r0, [r7, #12]
 8002240:	60b9      	str	r1, [r7, #8]
 8002242:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002244:	2300      	movs	r3, #0
}
 8002246:	4618      	mov	r0, r3
 8002248:	3714      	adds	r7, #20
 800224a:	46bd      	mov	sp, r7
 800224c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002250:	4770      	bx	lr
	...

08002254 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b086      	sub	sp, #24
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800225c:	4a14      	ldr	r2, [pc, #80]	; (80022b0 <_sbrk+0x5c>)
 800225e:	4b15      	ldr	r3, [pc, #84]	; (80022b4 <_sbrk+0x60>)
 8002260:	1ad3      	subs	r3, r2, r3
 8002262:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002264:	697b      	ldr	r3, [r7, #20]
 8002266:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002268:	4b13      	ldr	r3, [pc, #76]	; (80022b8 <_sbrk+0x64>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	2b00      	cmp	r3, #0
 800226e:	d102      	bne.n	8002276 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002270:	4b11      	ldr	r3, [pc, #68]	; (80022b8 <_sbrk+0x64>)
 8002272:	4a12      	ldr	r2, [pc, #72]	; (80022bc <_sbrk+0x68>)
 8002274:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002276:	4b10      	ldr	r3, [pc, #64]	; (80022b8 <_sbrk+0x64>)
 8002278:	681a      	ldr	r2, [r3, #0]
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	4413      	add	r3, r2
 800227e:	693a      	ldr	r2, [r7, #16]
 8002280:	429a      	cmp	r2, r3
 8002282:	d207      	bcs.n	8002294 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002284:	f00b fd7a 	bl	800dd7c <__errno>
 8002288:	4603      	mov	r3, r0
 800228a:	220c      	movs	r2, #12
 800228c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800228e:	f04f 33ff 	mov.w	r3, #4294967295
 8002292:	e009      	b.n	80022a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002294:	4b08      	ldr	r3, [pc, #32]	; (80022b8 <_sbrk+0x64>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800229a:	4b07      	ldr	r3, [pc, #28]	; (80022b8 <_sbrk+0x64>)
 800229c:	681a      	ldr	r2, [r3, #0]
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	4413      	add	r3, r2
 80022a2:	4a05      	ldr	r2, [pc, #20]	; (80022b8 <_sbrk+0x64>)
 80022a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80022a6:	68fb      	ldr	r3, [r7, #12]
}
 80022a8:	4618      	mov	r0, r3
 80022aa:	3718      	adds	r7, #24
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bd80      	pop	{r7, pc}
 80022b0:	20018000 	.word	0x20018000
 80022b4:	00000400 	.word	0x00000400
 80022b8:	20000810 	.word	0x20000810
 80022bc:	20003d80 	.word	0x20003d80

080022c0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80022c0:	b480      	push	{r7}
 80022c2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80022c4:	4b06      	ldr	r3, [pc, #24]	; (80022e0 <SystemInit+0x20>)
 80022c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022ca:	4a05      	ldr	r2, [pc, #20]	; (80022e0 <SystemInit+0x20>)
 80022cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80022d0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80022d4:	bf00      	nop
 80022d6:	46bd      	mov	sp, r7
 80022d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022dc:	4770      	bx	lr
 80022de:	bf00      	nop
 80022e0:	e000ed00 	.word	0xe000ed00

080022e4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80022e4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800231c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80022e8:	f7ff ffea 	bl	80022c0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80022ec:	480c      	ldr	r0, [pc, #48]	; (8002320 <LoopForever+0x6>)
  ldr r1, =_edata
 80022ee:	490d      	ldr	r1, [pc, #52]	; (8002324 <LoopForever+0xa>)
  ldr r2, =_sidata
 80022f0:	4a0d      	ldr	r2, [pc, #52]	; (8002328 <LoopForever+0xe>)
  movs r3, #0
 80022f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80022f4:	e002      	b.n	80022fc <LoopCopyDataInit>

080022f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80022f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80022f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80022fa:	3304      	adds	r3, #4

080022fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80022fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80022fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002300:	d3f9      	bcc.n	80022f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002302:	4a0a      	ldr	r2, [pc, #40]	; (800232c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002304:	4c0a      	ldr	r4, [pc, #40]	; (8002330 <LoopForever+0x16>)
  movs r3, #0
 8002306:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002308:	e001      	b.n	800230e <LoopFillZerobss>

0800230a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800230a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800230c:	3204      	adds	r2, #4

0800230e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800230e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002310:	d3fb      	bcc.n	800230a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002312:	f00b fe2f 	bl	800df74 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002316:	f7fe f977 	bl	8000608 <main>

0800231a <LoopForever>:

LoopForever:
    b LoopForever
 800231a:	e7fe      	b.n	800231a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800231c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002320:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002324:	200000ac 	.word	0x200000ac
  ldr r2, =_sidata
 8002328:	080102b0 	.word	0x080102b0
  ldr r2, =_sbss
 800232c:	200000ac 	.word	0x200000ac
  ldr r4, =_ebss
 8002330:	20003d7c 	.word	0x20003d7c

08002334 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002334:	e7fe      	b.n	8002334 <ADC1_2_IRQHandler>

08002336 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002336:	b580      	push	{r7, lr}
 8002338:	b082      	sub	sp, #8
 800233a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800233c:	2300      	movs	r3, #0
 800233e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002340:	2003      	movs	r0, #3
 8002342:	f000 f926 	bl	8002592 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002346:	200f      	movs	r0, #15
 8002348:	f7ff fe2c 	bl	8001fa4 <HAL_InitTick>
 800234c:	4603      	mov	r3, r0
 800234e:	2b00      	cmp	r3, #0
 8002350:	d002      	beq.n	8002358 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002352:	2301      	movs	r3, #1
 8002354:	71fb      	strb	r3, [r7, #7]
 8002356:	e001      	b.n	800235c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002358:	f7ff fac4 	bl	80018e4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800235c:	79fb      	ldrb	r3, [r7, #7]
}
 800235e:	4618      	mov	r0, r3
 8002360:	3708      	adds	r7, #8
 8002362:	46bd      	mov	sp, r7
 8002364:	bd80      	pop	{r7, pc}
	...

08002368 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002368:	b480      	push	{r7}
 800236a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800236c:	4b06      	ldr	r3, [pc, #24]	; (8002388 <HAL_IncTick+0x20>)
 800236e:	781b      	ldrb	r3, [r3, #0]
 8002370:	461a      	mov	r2, r3
 8002372:	4b06      	ldr	r3, [pc, #24]	; (800238c <HAL_IncTick+0x24>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4413      	add	r3, r2
 8002378:	4a04      	ldr	r2, [pc, #16]	; (800238c <HAL_IncTick+0x24>)
 800237a:	6013      	str	r3, [r2, #0]
}
 800237c:	bf00      	nop
 800237e:	46bd      	mov	sp, r7
 8002380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002384:	4770      	bx	lr
 8002386:	bf00      	nop
 8002388:	2000000c 	.word	0x2000000c
 800238c:	20000814 	.word	0x20000814

08002390 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002390:	b480      	push	{r7}
 8002392:	af00      	add	r7, sp, #0
  return uwTick;
 8002394:	4b03      	ldr	r3, [pc, #12]	; (80023a4 <HAL_GetTick+0x14>)
 8002396:	681b      	ldr	r3, [r3, #0]
}
 8002398:	4618      	mov	r0, r3
 800239a:	46bd      	mov	sp, r7
 800239c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a0:	4770      	bx	lr
 80023a2:	bf00      	nop
 80023a4:	20000814 	.word	0x20000814

080023a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b084      	sub	sp, #16
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80023b0:	f7ff ffee 	bl	8002390 <HAL_GetTick>
 80023b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023c0:	d005      	beq.n	80023ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80023c2:	4b0a      	ldr	r3, [pc, #40]	; (80023ec <HAL_Delay+0x44>)
 80023c4:	781b      	ldrb	r3, [r3, #0]
 80023c6:	461a      	mov	r2, r3
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	4413      	add	r3, r2
 80023cc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80023ce:	bf00      	nop
 80023d0:	f7ff ffde 	bl	8002390 <HAL_GetTick>
 80023d4:	4602      	mov	r2, r0
 80023d6:	68bb      	ldr	r3, [r7, #8]
 80023d8:	1ad3      	subs	r3, r2, r3
 80023da:	68fa      	ldr	r2, [r7, #12]
 80023dc:	429a      	cmp	r2, r3
 80023de:	d8f7      	bhi.n	80023d0 <HAL_Delay+0x28>
  {
  }
}
 80023e0:	bf00      	nop
 80023e2:	bf00      	nop
 80023e4:	3710      	adds	r7, #16
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bd80      	pop	{r7, pc}
 80023ea:	bf00      	nop
 80023ec:	2000000c 	.word	0x2000000c

080023f0 <__NVIC_SetPriorityGrouping>:
{
 80023f0:	b480      	push	{r7}
 80023f2:	b085      	sub	sp, #20
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	f003 0307 	and.w	r3, r3, #7
 80023fe:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002400:	4b0c      	ldr	r3, [pc, #48]	; (8002434 <__NVIC_SetPriorityGrouping+0x44>)
 8002402:	68db      	ldr	r3, [r3, #12]
 8002404:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002406:	68ba      	ldr	r2, [r7, #8]
 8002408:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800240c:	4013      	ands	r3, r2
 800240e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002414:	68bb      	ldr	r3, [r7, #8]
 8002416:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002418:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800241c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002420:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002422:	4a04      	ldr	r2, [pc, #16]	; (8002434 <__NVIC_SetPriorityGrouping+0x44>)
 8002424:	68bb      	ldr	r3, [r7, #8]
 8002426:	60d3      	str	r3, [r2, #12]
}
 8002428:	bf00      	nop
 800242a:	3714      	adds	r7, #20
 800242c:	46bd      	mov	sp, r7
 800242e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002432:	4770      	bx	lr
 8002434:	e000ed00 	.word	0xe000ed00

08002438 <__NVIC_GetPriorityGrouping>:
{
 8002438:	b480      	push	{r7}
 800243a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800243c:	4b04      	ldr	r3, [pc, #16]	; (8002450 <__NVIC_GetPriorityGrouping+0x18>)
 800243e:	68db      	ldr	r3, [r3, #12]
 8002440:	0a1b      	lsrs	r3, r3, #8
 8002442:	f003 0307 	and.w	r3, r3, #7
}
 8002446:	4618      	mov	r0, r3
 8002448:	46bd      	mov	sp, r7
 800244a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244e:	4770      	bx	lr
 8002450:	e000ed00 	.word	0xe000ed00

08002454 <__NVIC_EnableIRQ>:
{
 8002454:	b480      	push	{r7}
 8002456:	b083      	sub	sp, #12
 8002458:	af00      	add	r7, sp, #0
 800245a:	4603      	mov	r3, r0
 800245c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800245e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002462:	2b00      	cmp	r3, #0
 8002464:	db0b      	blt.n	800247e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002466:	79fb      	ldrb	r3, [r7, #7]
 8002468:	f003 021f 	and.w	r2, r3, #31
 800246c:	4907      	ldr	r1, [pc, #28]	; (800248c <__NVIC_EnableIRQ+0x38>)
 800246e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002472:	095b      	lsrs	r3, r3, #5
 8002474:	2001      	movs	r0, #1
 8002476:	fa00 f202 	lsl.w	r2, r0, r2
 800247a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800247e:	bf00      	nop
 8002480:	370c      	adds	r7, #12
 8002482:	46bd      	mov	sp, r7
 8002484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002488:	4770      	bx	lr
 800248a:	bf00      	nop
 800248c:	e000e100 	.word	0xe000e100

08002490 <__NVIC_DisableIRQ>:
{
 8002490:	b480      	push	{r7}
 8002492:	b083      	sub	sp, #12
 8002494:	af00      	add	r7, sp, #0
 8002496:	4603      	mov	r3, r0
 8002498:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800249a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	db12      	blt.n	80024c8 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80024a2:	79fb      	ldrb	r3, [r7, #7]
 80024a4:	f003 021f 	and.w	r2, r3, #31
 80024a8:	490a      	ldr	r1, [pc, #40]	; (80024d4 <__NVIC_DisableIRQ+0x44>)
 80024aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024ae:	095b      	lsrs	r3, r3, #5
 80024b0:	2001      	movs	r0, #1
 80024b2:	fa00 f202 	lsl.w	r2, r0, r2
 80024b6:	3320      	adds	r3, #32
 80024b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80024bc:	f3bf 8f4f 	dsb	sy
}
 80024c0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80024c2:	f3bf 8f6f 	isb	sy
}
 80024c6:	bf00      	nop
}
 80024c8:	bf00      	nop
 80024ca:	370c      	adds	r7, #12
 80024cc:	46bd      	mov	sp, r7
 80024ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d2:	4770      	bx	lr
 80024d4:	e000e100 	.word	0xe000e100

080024d8 <__NVIC_SetPriority>:
{
 80024d8:	b480      	push	{r7}
 80024da:	b083      	sub	sp, #12
 80024dc:	af00      	add	r7, sp, #0
 80024de:	4603      	mov	r3, r0
 80024e0:	6039      	str	r1, [r7, #0]
 80024e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	db0a      	blt.n	8002502 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	b2da      	uxtb	r2, r3
 80024f0:	490c      	ldr	r1, [pc, #48]	; (8002524 <__NVIC_SetPriority+0x4c>)
 80024f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024f6:	0112      	lsls	r2, r2, #4
 80024f8:	b2d2      	uxtb	r2, r2
 80024fa:	440b      	add	r3, r1
 80024fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002500:	e00a      	b.n	8002518 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	b2da      	uxtb	r2, r3
 8002506:	4908      	ldr	r1, [pc, #32]	; (8002528 <__NVIC_SetPriority+0x50>)
 8002508:	79fb      	ldrb	r3, [r7, #7]
 800250a:	f003 030f 	and.w	r3, r3, #15
 800250e:	3b04      	subs	r3, #4
 8002510:	0112      	lsls	r2, r2, #4
 8002512:	b2d2      	uxtb	r2, r2
 8002514:	440b      	add	r3, r1
 8002516:	761a      	strb	r2, [r3, #24]
}
 8002518:	bf00      	nop
 800251a:	370c      	adds	r7, #12
 800251c:	46bd      	mov	sp, r7
 800251e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002522:	4770      	bx	lr
 8002524:	e000e100 	.word	0xe000e100
 8002528:	e000ed00 	.word	0xe000ed00

0800252c <NVIC_EncodePriority>:
{
 800252c:	b480      	push	{r7}
 800252e:	b089      	sub	sp, #36	; 0x24
 8002530:	af00      	add	r7, sp, #0
 8002532:	60f8      	str	r0, [r7, #12]
 8002534:	60b9      	str	r1, [r7, #8]
 8002536:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	f003 0307 	and.w	r3, r3, #7
 800253e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002540:	69fb      	ldr	r3, [r7, #28]
 8002542:	f1c3 0307 	rsb	r3, r3, #7
 8002546:	2b04      	cmp	r3, #4
 8002548:	bf28      	it	cs
 800254a:	2304      	movcs	r3, #4
 800254c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800254e:	69fb      	ldr	r3, [r7, #28]
 8002550:	3304      	adds	r3, #4
 8002552:	2b06      	cmp	r3, #6
 8002554:	d902      	bls.n	800255c <NVIC_EncodePriority+0x30>
 8002556:	69fb      	ldr	r3, [r7, #28]
 8002558:	3b03      	subs	r3, #3
 800255a:	e000      	b.n	800255e <NVIC_EncodePriority+0x32>
 800255c:	2300      	movs	r3, #0
 800255e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002560:	f04f 32ff 	mov.w	r2, #4294967295
 8002564:	69bb      	ldr	r3, [r7, #24]
 8002566:	fa02 f303 	lsl.w	r3, r2, r3
 800256a:	43da      	mvns	r2, r3
 800256c:	68bb      	ldr	r3, [r7, #8]
 800256e:	401a      	ands	r2, r3
 8002570:	697b      	ldr	r3, [r7, #20]
 8002572:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002574:	f04f 31ff 	mov.w	r1, #4294967295
 8002578:	697b      	ldr	r3, [r7, #20]
 800257a:	fa01 f303 	lsl.w	r3, r1, r3
 800257e:	43d9      	mvns	r1, r3
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002584:	4313      	orrs	r3, r2
}
 8002586:	4618      	mov	r0, r3
 8002588:	3724      	adds	r7, #36	; 0x24
 800258a:	46bd      	mov	sp, r7
 800258c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002590:	4770      	bx	lr

08002592 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002592:	b580      	push	{r7, lr}
 8002594:	b082      	sub	sp, #8
 8002596:	af00      	add	r7, sp, #0
 8002598:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800259a:	6878      	ldr	r0, [r7, #4]
 800259c:	f7ff ff28 	bl	80023f0 <__NVIC_SetPriorityGrouping>
}
 80025a0:	bf00      	nop
 80025a2:	3708      	adds	r7, #8
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bd80      	pop	{r7, pc}

080025a8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b086      	sub	sp, #24
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	4603      	mov	r3, r0
 80025b0:	60b9      	str	r1, [r7, #8]
 80025b2:	607a      	str	r2, [r7, #4]
 80025b4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80025b6:	2300      	movs	r3, #0
 80025b8:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80025ba:	f7ff ff3d 	bl	8002438 <__NVIC_GetPriorityGrouping>
 80025be:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80025c0:	687a      	ldr	r2, [r7, #4]
 80025c2:	68b9      	ldr	r1, [r7, #8]
 80025c4:	6978      	ldr	r0, [r7, #20]
 80025c6:	f7ff ffb1 	bl	800252c <NVIC_EncodePriority>
 80025ca:	4602      	mov	r2, r0
 80025cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025d0:	4611      	mov	r1, r2
 80025d2:	4618      	mov	r0, r3
 80025d4:	f7ff ff80 	bl	80024d8 <__NVIC_SetPriority>
}
 80025d8:	bf00      	nop
 80025da:	3718      	adds	r7, #24
 80025dc:	46bd      	mov	sp, r7
 80025de:	bd80      	pop	{r7, pc}

080025e0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b082      	sub	sp, #8
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	4603      	mov	r3, r0
 80025e8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80025ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025ee:	4618      	mov	r0, r3
 80025f0:	f7ff ff30 	bl	8002454 <__NVIC_EnableIRQ>
}
 80025f4:	bf00      	nop
 80025f6:	3708      	adds	r7, #8
 80025f8:	46bd      	mov	sp, r7
 80025fa:	bd80      	pop	{r7, pc}

080025fc <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b082      	sub	sp, #8
 8002600:	af00      	add	r7, sp, #0
 8002602:	4603      	mov	r3, r0
 8002604:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002606:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800260a:	4618      	mov	r0, r3
 800260c:	f7ff ff40 	bl	8002490 <__NVIC_DisableIRQ>
}
 8002610:	bf00      	nop
 8002612:	3708      	adds	r7, #8
 8002614:	46bd      	mov	sp, r7
 8002616:	bd80      	pop	{r7, pc}

08002618 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b082      	sub	sp, #8
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d101      	bne.n	800262a <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8002626:	2301      	movs	r3, #1
 8002628:	e0ac      	b.n	8002784 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	4618      	mov	r0, r3
 8002630:	f000 f8b2 	bl	8002798 <DFSDM_GetChannelFromInstance>
 8002634:	4603      	mov	r3, r0
 8002636:	4a55      	ldr	r2, [pc, #340]	; (800278c <HAL_DFSDM_ChannelInit+0x174>)
 8002638:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d001      	beq.n	8002644 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8002640:	2301      	movs	r3, #1
 8002642:	e09f      	b.n	8002784 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8002644:	6878      	ldr	r0, [r7, #4]
 8002646:	f7ff f975 	bl	8001934 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 800264a:	4b51      	ldr	r3, [pc, #324]	; (8002790 <HAL_DFSDM_ChannelInit+0x178>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	3301      	adds	r3, #1
 8002650:	4a4f      	ldr	r2, [pc, #316]	; (8002790 <HAL_DFSDM_ChannelInit+0x178>)
 8002652:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8002654:	4b4e      	ldr	r3, [pc, #312]	; (8002790 <HAL_DFSDM_ChannelInit+0x178>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	2b01      	cmp	r3, #1
 800265a:	d125      	bne.n	80026a8 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 800265c:	4b4d      	ldr	r3, [pc, #308]	; (8002794 <HAL_DFSDM_ChannelInit+0x17c>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4a4c      	ldr	r2, [pc, #304]	; (8002794 <HAL_DFSDM_ChannelInit+0x17c>)
 8002662:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002666:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8002668:	4b4a      	ldr	r3, [pc, #296]	; (8002794 <HAL_DFSDM_ChannelInit+0x17c>)
 800266a:	681a      	ldr	r2, [r3, #0]
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	689b      	ldr	r3, [r3, #8]
 8002670:	4948      	ldr	r1, [pc, #288]	; (8002794 <HAL_DFSDM_ChannelInit+0x17c>)
 8002672:	4313      	orrs	r3, r2
 8002674:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8002676:	4b47      	ldr	r3, [pc, #284]	; (8002794 <HAL_DFSDM_ChannelInit+0x17c>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4a46      	ldr	r2, [pc, #280]	; (8002794 <HAL_DFSDM_ChannelInit+0x17c>)
 800267c:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8002680:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	791b      	ldrb	r3, [r3, #4]
 8002686:	2b01      	cmp	r3, #1
 8002688:	d108      	bne.n	800269c <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 800268a:	4b42      	ldr	r3, [pc, #264]	; (8002794 <HAL_DFSDM_ChannelInit+0x17c>)
 800268c:	681a      	ldr	r2, [r3, #0]
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	68db      	ldr	r3, [r3, #12]
 8002692:	3b01      	subs	r3, #1
 8002694:	041b      	lsls	r3, r3, #16
 8002696:	493f      	ldr	r1, [pc, #252]	; (8002794 <HAL_DFSDM_ChannelInit+0x17c>)
 8002698:	4313      	orrs	r3, r2
 800269a:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 800269c:	4b3d      	ldr	r3, [pc, #244]	; (8002794 <HAL_DFSDM_ChannelInit+0x17c>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4a3c      	ldr	r2, [pc, #240]	; (8002794 <HAL_DFSDM_ChannelInit+0x17c>)
 80026a2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80026a6:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	681a      	ldr	r2, [r3, #0]
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 80026b6:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	6819      	ldr	r1, [r3, #0]
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80026c6:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 80026cc:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	430a      	orrs	r2, r1
 80026d4:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	681a      	ldr	r2, [r3, #0]
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f022 020f 	bic.w	r2, r2, #15
 80026e4:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	6819      	ldr	r1, [r3, #0]
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 80026f4:	431a      	orrs	r2, r3
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	430a      	orrs	r2, r1
 80026fc:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	689a      	ldr	r2, [r3, #8]
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 800270c:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	6899      	ldr	r1, [r3, #8]
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800271c:	3b01      	subs	r3, #1
 800271e:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8002720:	431a      	orrs	r2, r3
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	430a      	orrs	r2, r1
 8002728:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	685a      	ldr	r2, [r3, #4]
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f002 0207 	and.w	r2, r2, #7
 8002738:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	6859      	ldr	r1, [r3, #4]
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002744:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800274a:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 800274c:	431a      	orrs	r2, r3
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	430a      	orrs	r2, r1
 8002754:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	681a      	ldr	r2, [r3, #0]
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002764:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2201      	movs	r2, #1
 800276a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4618      	mov	r0, r3
 8002774:	f000 f810 	bl	8002798 <DFSDM_GetChannelFromInstance>
 8002778:	4602      	mov	r2, r0
 800277a:	4904      	ldr	r1, [pc, #16]	; (800278c <HAL_DFSDM_ChannelInit+0x174>)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 8002782:	2300      	movs	r3, #0
}
 8002784:	4618      	mov	r0, r3
 8002786:	3708      	adds	r7, #8
 8002788:	46bd      	mov	sp, r7
 800278a:	bd80      	pop	{r7, pc}
 800278c:	2000081c 	.word	0x2000081c
 8002790:	20000818 	.word	0x20000818
 8002794:	40016000 	.word	0x40016000

08002798 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8002798:	b480      	push	{r7}
 800279a:	b085      	sub	sp, #20
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	4a1c      	ldr	r2, [pc, #112]	; (8002814 <DFSDM_GetChannelFromInstance+0x7c>)
 80027a4:	4293      	cmp	r3, r2
 80027a6:	d102      	bne.n	80027ae <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 80027a8:	2300      	movs	r3, #0
 80027aa:	60fb      	str	r3, [r7, #12]
 80027ac:	e02b      	b.n	8002806 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	4a19      	ldr	r2, [pc, #100]	; (8002818 <DFSDM_GetChannelFromInstance+0x80>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d102      	bne.n	80027bc <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 80027b6:	2301      	movs	r3, #1
 80027b8:	60fb      	str	r3, [r7, #12]
 80027ba:	e024      	b.n	8002806 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	4a17      	ldr	r2, [pc, #92]	; (800281c <DFSDM_GetChannelFromInstance+0x84>)
 80027c0:	4293      	cmp	r3, r2
 80027c2:	d102      	bne.n	80027ca <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 80027c4:	2302      	movs	r3, #2
 80027c6:	60fb      	str	r3, [r7, #12]
 80027c8:	e01d      	b.n	8002806 <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	4a14      	ldr	r2, [pc, #80]	; (8002820 <DFSDM_GetChannelFromInstance+0x88>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d102      	bne.n	80027d8 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 80027d2:	2304      	movs	r3, #4
 80027d4:	60fb      	str	r3, [r7, #12]
 80027d6:	e016      	b.n	8002806 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	4a12      	ldr	r2, [pc, #72]	; (8002824 <DFSDM_GetChannelFromInstance+0x8c>)
 80027dc:	4293      	cmp	r3, r2
 80027de:	d102      	bne.n	80027e6 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 80027e0:	2305      	movs	r3, #5
 80027e2:	60fb      	str	r3, [r7, #12]
 80027e4:	e00f      	b.n	8002806 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	4a0f      	ldr	r2, [pc, #60]	; (8002828 <DFSDM_GetChannelFromInstance+0x90>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d102      	bne.n	80027f4 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 80027ee:	2306      	movs	r3, #6
 80027f0:	60fb      	str	r3, [r7, #12]
 80027f2:	e008      	b.n	8002806 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	4a0d      	ldr	r2, [pc, #52]	; (800282c <DFSDM_GetChannelFromInstance+0x94>)
 80027f8:	4293      	cmp	r3, r2
 80027fa:	d102      	bne.n	8002802 <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 80027fc:	2307      	movs	r3, #7
 80027fe:	60fb      	str	r3, [r7, #12]
 8002800:	e001      	b.n	8002806 <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 8002802:	2303      	movs	r3, #3
 8002804:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8002806:	68fb      	ldr	r3, [r7, #12]
}
 8002808:	4618      	mov	r0, r3
 800280a:	3714      	adds	r7, #20
 800280c:	46bd      	mov	sp, r7
 800280e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002812:	4770      	bx	lr
 8002814:	40016000 	.word	0x40016000
 8002818:	40016020 	.word	0x40016020
 800281c:	40016040 	.word	0x40016040
 8002820:	40016080 	.word	0x40016080
 8002824:	400160a0 	.word	0x400160a0
 8002828:	400160c0 	.word	0x400160c0
 800282c:	400160e0 	.word	0x400160e0

08002830 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002830:	b480      	push	{r7}
 8002832:	b085      	sub	sp, #20
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002838:	2300      	movs	r3, #0
 800283a:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002842:	b2db      	uxtb	r3, r3
 8002844:	2b02      	cmp	r3, #2
 8002846:	d008      	beq.n	800285a <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2204      	movs	r2, #4
 800284c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2200      	movs	r2, #0
 8002852:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002856:	2301      	movs	r3, #1
 8002858:	e022      	b.n	80028a0 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	681a      	ldr	r2, [r3, #0]
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f022 020e 	bic.w	r2, r2, #14
 8002868:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	681a      	ldr	r2, [r3, #0]
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f022 0201 	bic.w	r2, r2, #1
 8002878:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800287e:	f003 021c 	and.w	r2, r3, #28
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002886:	2101      	movs	r1, #1
 8002888:	fa01 f202 	lsl.w	r2, r1, r2
 800288c:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2201      	movs	r2, #1
 8002892:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2200      	movs	r2, #0
 800289a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 800289e:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80028a0:	4618      	mov	r0, r3
 80028a2:	3714      	adds	r7, #20
 80028a4:	46bd      	mov	sp, r7
 80028a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028aa:	4770      	bx	lr

080028ac <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b084      	sub	sp, #16
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80028b4:	2300      	movs	r3, #0
 80028b6:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80028be:	b2db      	uxtb	r3, r3
 80028c0:	2b02      	cmp	r3, #2
 80028c2:	d005      	beq.n	80028d0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2204      	movs	r2, #4
 80028c8:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80028ca:	2301      	movs	r3, #1
 80028cc:	73fb      	strb	r3, [r7, #15]
 80028ce:	e029      	b.n	8002924 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	681a      	ldr	r2, [r3, #0]
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f022 020e 	bic.w	r2, r2, #14
 80028de:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	681a      	ldr	r2, [r3, #0]
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f022 0201 	bic.w	r2, r2, #1
 80028ee:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028f4:	f003 021c 	and.w	r2, r3, #28
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028fc:	2101      	movs	r1, #1
 80028fe:	fa01 f202 	lsl.w	r2, r1, r2
 8002902:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2201      	movs	r2, #1
 8002908:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2200      	movs	r2, #0
 8002910:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002918:	2b00      	cmp	r3, #0
 800291a:	d003      	beq.n	8002924 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002920:	6878      	ldr	r0, [r7, #4]
 8002922:	4798      	blx	r3
    }
  }
  return status;
 8002924:	7bfb      	ldrb	r3, [r7, #15]
}
 8002926:	4618      	mov	r0, r3
 8002928:	3710      	adds	r7, #16
 800292a:	46bd      	mov	sp, r7
 800292c:	bd80      	pop	{r7, pc}
	...

08002930 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002930:	b480      	push	{r7}
 8002932:	b087      	sub	sp, #28
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
 8002938:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800293a:	2300      	movs	r3, #0
 800293c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800293e:	e17f      	b.n	8002c40 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	681a      	ldr	r2, [r3, #0]
 8002944:	2101      	movs	r1, #1
 8002946:	697b      	ldr	r3, [r7, #20]
 8002948:	fa01 f303 	lsl.w	r3, r1, r3
 800294c:	4013      	ands	r3, r2
 800294e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	2b00      	cmp	r3, #0
 8002954:	f000 8171 	beq.w	8002c3a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	2b01      	cmp	r3, #1
 800295e:	d00b      	beq.n	8002978 <HAL_GPIO_Init+0x48>
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	2b02      	cmp	r3, #2
 8002966:	d007      	beq.n	8002978 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800296c:	2b11      	cmp	r3, #17
 800296e:	d003      	beq.n	8002978 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	2b12      	cmp	r3, #18
 8002976:	d130      	bne.n	80029da <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	689b      	ldr	r3, [r3, #8]
 800297c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800297e:	697b      	ldr	r3, [r7, #20]
 8002980:	005b      	lsls	r3, r3, #1
 8002982:	2203      	movs	r2, #3
 8002984:	fa02 f303 	lsl.w	r3, r2, r3
 8002988:	43db      	mvns	r3, r3
 800298a:	693a      	ldr	r2, [r7, #16]
 800298c:	4013      	ands	r3, r2
 800298e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	68da      	ldr	r2, [r3, #12]
 8002994:	697b      	ldr	r3, [r7, #20]
 8002996:	005b      	lsls	r3, r3, #1
 8002998:	fa02 f303 	lsl.w	r3, r2, r3
 800299c:	693a      	ldr	r2, [r7, #16]
 800299e:	4313      	orrs	r3, r2
 80029a0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	693a      	ldr	r2, [r7, #16]
 80029a6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80029ae:	2201      	movs	r2, #1
 80029b0:	697b      	ldr	r3, [r7, #20]
 80029b2:	fa02 f303 	lsl.w	r3, r2, r3
 80029b6:	43db      	mvns	r3, r3
 80029b8:	693a      	ldr	r2, [r7, #16]
 80029ba:	4013      	ands	r3, r2
 80029bc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	091b      	lsrs	r3, r3, #4
 80029c4:	f003 0201 	and.w	r2, r3, #1
 80029c8:	697b      	ldr	r3, [r7, #20]
 80029ca:	fa02 f303 	lsl.w	r3, r2, r3
 80029ce:	693a      	ldr	r2, [r7, #16]
 80029d0:	4313      	orrs	r3, r2
 80029d2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	693a      	ldr	r2, [r7, #16]
 80029d8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	f003 0303 	and.w	r3, r3, #3
 80029e2:	2b03      	cmp	r3, #3
 80029e4:	d118      	bne.n	8002a18 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029ea:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80029ec:	2201      	movs	r2, #1
 80029ee:	697b      	ldr	r3, [r7, #20]
 80029f0:	fa02 f303 	lsl.w	r3, r2, r3
 80029f4:	43db      	mvns	r3, r3
 80029f6:	693a      	ldr	r2, [r7, #16]
 80029f8:	4013      	ands	r3, r2
 80029fa:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	08db      	lsrs	r3, r3, #3
 8002a02:	f003 0201 	and.w	r2, r3, #1
 8002a06:	697b      	ldr	r3, [r7, #20]
 8002a08:	fa02 f303 	lsl.w	r3, r2, r3
 8002a0c:	693a      	ldr	r2, [r7, #16]
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	693a      	ldr	r2, [r7, #16]
 8002a16:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	68db      	ldr	r3, [r3, #12]
 8002a1c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002a1e:	697b      	ldr	r3, [r7, #20]
 8002a20:	005b      	lsls	r3, r3, #1
 8002a22:	2203      	movs	r2, #3
 8002a24:	fa02 f303 	lsl.w	r3, r2, r3
 8002a28:	43db      	mvns	r3, r3
 8002a2a:	693a      	ldr	r2, [r7, #16]
 8002a2c:	4013      	ands	r3, r2
 8002a2e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	689a      	ldr	r2, [r3, #8]
 8002a34:	697b      	ldr	r3, [r7, #20]
 8002a36:	005b      	lsls	r3, r3, #1
 8002a38:	fa02 f303 	lsl.w	r3, r2, r3
 8002a3c:	693a      	ldr	r2, [r7, #16]
 8002a3e:	4313      	orrs	r3, r2
 8002a40:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	693a      	ldr	r2, [r7, #16]
 8002a46:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	2b02      	cmp	r3, #2
 8002a4e:	d003      	beq.n	8002a58 <HAL_GPIO_Init+0x128>
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	2b12      	cmp	r3, #18
 8002a56:	d123      	bne.n	8002aa0 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002a58:	697b      	ldr	r3, [r7, #20]
 8002a5a:	08da      	lsrs	r2, r3, #3
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	3208      	adds	r2, #8
 8002a60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a64:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002a66:	697b      	ldr	r3, [r7, #20]
 8002a68:	f003 0307 	and.w	r3, r3, #7
 8002a6c:	009b      	lsls	r3, r3, #2
 8002a6e:	220f      	movs	r2, #15
 8002a70:	fa02 f303 	lsl.w	r3, r2, r3
 8002a74:	43db      	mvns	r3, r3
 8002a76:	693a      	ldr	r2, [r7, #16]
 8002a78:	4013      	ands	r3, r2
 8002a7a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	691a      	ldr	r2, [r3, #16]
 8002a80:	697b      	ldr	r3, [r7, #20]
 8002a82:	f003 0307 	and.w	r3, r3, #7
 8002a86:	009b      	lsls	r3, r3, #2
 8002a88:	fa02 f303 	lsl.w	r3, r2, r3
 8002a8c:	693a      	ldr	r2, [r7, #16]
 8002a8e:	4313      	orrs	r3, r2
 8002a90:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002a92:	697b      	ldr	r3, [r7, #20]
 8002a94:	08da      	lsrs	r2, r3, #3
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	3208      	adds	r2, #8
 8002a9a:	6939      	ldr	r1, [r7, #16]
 8002a9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002aa6:	697b      	ldr	r3, [r7, #20]
 8002aa8:	005b      	lsls	r3, r3, #1
 8002aaa:	2203      	movs	r2, #3
 8002aac:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab0:	43db      	mvns	r3, r3
 8002ab2:	693a      	ldr	r2, [r7, #16]
 8002ab4:	4013      	ands	r3, r2
 8002ab6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	f003 0203 	and.w	r2, r3, #3
 8002ac0:	697b      	ldr	r3, [r7, #20]
 8002ac2:	005b      	lsls	r3, r3, #1
 8002ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac8:	693a      	ldr	r2, [r7, #16]
 8002aca:	4313      	orrs	r3, r2
 8002acc:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	693a      	ldr	r2, [r7, #16]
 8002ad2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	f000 80ac 	beq.w	8002c3a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ae2:	4b5f      	ldr	r3, [pc, #380]	; (8002c60 <HAL_GPIO_Init+0x330>)
 8002ae4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ae6:	4a5e      	ldr	r2, [pc, #376]	; (8002c60 <HAL_GPIO_Init+0x330>)
 8002ae8:	f043 0301 	orr.w	r3, r3, #1
 8002aec:	6613      	str	r3, [r2, #96]	; 0x60
 8002aee:	4b5c      	ldr	r3, [pc, #368]	; (8002c60 <HAL_GPIO_Init+0x330>)
 8002af0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002af2:	f003 0301 	and.w	r3, r3, #1
 8002af6:	60bb      	str	r3, [r7, #8]
 8002af8:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002afa:	4a5a      	ldr	r2, [pc, #360]	; (8002c64 <HAL_GPIO_Init+0x334>)
 8002afc:	697b      	ldr	r3, [r7, #20]
 8002afe:	089b      	lsrs	r3, r3, #2
 8002b00:	3302      	adds	r3, #2
 8002b02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b06:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002b08:	697b      	ldr	r3, [r7, #20]
 8002b0a:	f003 0303 	and.w	r3, r3, #3
 8002b0e:	009b      	lsls	r3, r3, #2
 8002b10:	220f      	movs	r2, #15
 8002b12:	fa02 f303 	lsl.w	r3, r2, r3
 8002b16:	43db      	mvns	r3, r3
 8002b18:	693a      	ldr	r2, [r7, #16]
 8002b1a:	4013      	ands	r3, r2
 8002b1c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002b24:	d025      	beq.n	8002b72 <HAL_GPIO_Init+0x242>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	4a4f      	ldr	r2, [pc, #316]	; (8002c68 <HAL_GPIO_Init+0x338>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d01f      	beq.n	8002b6e <HAL_GPIO_Init+0x23e>
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	4a4e      	ldr	r2, [pc, #312]	; (8002c6c <HAL_GPIO_Init+0x33c>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d019      	beq.n	8002b6a <HAL_GPIO_Init+0x23a>
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	4a4d      	ldr	r2, [pc, #308]	; (8002c70 <HAL_GPIO_Init+0x340>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d013      	beq.n	8002b66 <HAL_GPIO_Init+0x236>
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	4a4c      	ldr	r2, [pc, #304]	; (8002c74 <HAL_GPIO_Init+0x344>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d00d      	beq.n	8002b62 <HAL_GPIO_Init+0x232>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	4a4b      	ldr	r2, [pc, #300]	; (8002c78 <HAL_GPIO_Init+0x348>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d007      	beq.n	8002b5e <HAL_GPIO_Init+0x22e>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	4a4a      	ldr	r2, [pc, #296]	; (8002c7c <HAL_GPIO_Init+0x34c>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d101      	bne.n	8002b5a <HAL_GPIO_Init+0x22a>
 8002b56:	2306      	movs	r3, #6
 8002b58:	e00c      	b.n	8002b74 <HAL_GPIO_Init+0x244>
 8002b5a:	2307      	movs	r3, #7
 8002b5c:	e00a      	b.n	8002b74 <HAL_GPIO_Init+0x244>
 8002b5e:	2305      	movs	r3, #5
 8002b60:	e008      	b.n	8002b74 <HAL_GPIO_Init+0x244>
 8002b62:	2304      	movs	r3, #4
 8002b64:	e006      	b.n	8002b74 <HAL_GPIO_Init+0x244>
 8002b66:	2303      	movs	r3, #3
 8002b68:	e004      	b.n	8002b74 <HAL_GPIO_Init+0x244>
 8002b6a:	2302      	movs	r3, #2
 8002b6c:	e002      	b.n	8002b74 <HAL_GPIO_Init+0x244>
 8002b6e:	2301      	movs	r3, #1
 8002b70:	e000      	b.n	8002b74 <HAL_GPIO_Init+0x244>
 8002b72:	2300      	movs	r3, #0
 8002b74:	697a      	ldr	r2, [r7, #20]
 8002b76:	f002 0203 	and.w	r2, r2, #3
 8002b7a:	0092      	lsls	r2, r2, #2
 8002b7c:	4093      	lsls	r3, r2
 8002b7e:	693a      	ldr	r2, [r7, #16]
 8002b80:	4313      	orrs	r3, r2
 8002b82:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002b84:	4937      	ldr	r1, [pc, #220]	; (8002c64 <HAL_GPIO_Init+0x334>)
 8002b86:	697b      	ldr	r3, [r7, #20]
 8002b88:	089b      	lsrs	r3, r3, #2
 8002b8a:	3302      	adds	r3, #2
 8002b8c:	693a      	ldr	r2, [r7, #16]
 8002b8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002b92:	4b3b      	ldr	r3, [pc, #236]	; (8002c80 <HAL_GPIO_Init+0x350>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	43db      	mvns	r3, r3
 8002b9c:	693a      	ldr	r2, [r7, #16]
 8002b9e:	4013      	ands	r3, r2
 8002ba0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d003      	beq.n	8002bb6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002bae:	693a      	ldr	r2, [r7, #16]
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002bb6:	4a32      	ldr	r2, [pc, #200]	; (8002c80 <HAL_GPIO_Init+0x350>)
 8002bb8:	693b      	ldr	r3, [r7, #16]
 8002bba:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8002bbc:	4b30      	ldr	r3, [pc, #192]	; (8002c80 <HAL_GPIO_Init+0x350>)
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	43db      	mvns	r3, r3
 8002bc6:	693a      	ldr	r2, [r7, #16]
 8002bc8:	4013      	ands	r3, r2
 8002bca:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d003      	beq.n	8002be0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002bd8:	693a      	ldr	r2, [r7, #16]
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	4313      	orrs	r3, r2
 8002bde:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002be0:	4a27      	ldr	r2, [pc, #156]	; (8002c80 <HAL_GPIO_Init+0x350>)
 8002be2:	693b      	ldr	r3, [r7, #16]
 8002be4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002be6:	4b26      	ldr	r3, [pc, #152]	; (8002c80 <HAL_GPIO_Init+0x350>)
 8002be8:	689b      	ldr	r3, [r3, #8]
 8002bea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	43db      	mvns	r3, r3
 8002bf0:	693a      	ldr	r2, [r7, #16]
 8002bf2:	4013      	ands	r3, r2
 8002bf4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d003      	beq.n	8002c0a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002c02:	693a      	ldr	r2, [r7, #16]
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	4313      	orrs	r3, r2
 8002c08:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002c0a:	4a1d      	ldr	r2, [pc, #116]	; (8002c80 <HAL_GPIO_Init+0x350>)
 8002c0c:	693b      	ldr	r3, [r7, #16]
 8002c0e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002c10:	4b1b      	ldr	r3, [pc, #108]	; (8002c80 <HAL_GPIO_Init+0x350>)
 8002c12:	68db      	ldr	r3, [r3, #12]
 8002c14:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	43db      	mvns	r3, r3
 8002c1a:	693a      	ldr	r2, [r7, #16]
 8002c1c:	4013      	ands	r3, r2
 8002c1e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d003      	beq.n	8002c34 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002c2c:	693a      	ldr	r2, [r7, #16]
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	4313      	orrs	r3, r2
 8002c32:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002c34:	4a12      	ldr	r2, [pc, #72]	; (8002c80 <HAL_GPIO_Init+0x350>)
 8002c36:	693b      	ldr	r3, [r7, #16]
 8002c38:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002c3a:	697b      	ldr	r3, [r7, #20]
 8002c3c:	3301      	adds	r3, #1
 8002c3e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	681a      	ldr	r2, [r3, #0]
 8002c44:	697b      	ldr	r3, [r7, #20]
 8002c46:	fa22 f303 	lsr.w	r3, r2, r3
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	f47f ae78 	bne.w	8002940 <HAL_GPIO_Init+0x10>
  }
}
 8002c50:	bf00      	nop
 8002c52:	bf00      	nop
 8002c54:	371c      	adds	r7, #28
 8002c56:	46bd      	mov	sp, r7
 8002c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5c:	4770      	bx	lr
 8002c5e:	bf00      	nop
 8002c60:	40021000 	.word	0x40021000
 8002c64:	40010000 	.word	0x40010000
 8002c68:	48000400 	.word	0x48000400
 8002c6c:	48000800 	.word	0x48000800
 8002c70:	48000c00 	.word	0x48000c00
 8002c74:	48001000 	.word	0x48001000
 8002c78:	48001400 	.word	0x48001400
 8002c7c:	48001800 	.word	0x48001800
 8002c80:	40010400 	.word	0x40010400

08002c84 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002c84:	b480      	push	{r7}
 8002c86:	b087      	sub	sp, #28
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
 8002c8c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002c8e:	2300      	movs	r3, #0
 8002c90:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8002c92:	e0cd      	b.n	8002e30 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8002c94:	2201      	movs	r2, #1
 8002c96:	697b      	ldr	r3, [r7, #20]
 8002c98:	fa02 f303 	lsl.w	r3, r2, r3
 8002c9c:	683a      	ldr	r2, [r7, #0]
 8002c9e:	4013      	ands	r3, r2
 8002ca0:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8002ca2:	693b      	ldr	r3, [r7, #16]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	f000 80c0 	beq.w	8002e2a <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8002caa:	4a68      	ldr	r2, [pc, #416]	; (8002e4c <HAL_GPIO_DeInit+0x1c8>)
 8002cac:	697b      	ldr	r3, [r7, #20]
 8002cae:	089b      	lsrs	r3, r3, #2
 8002cb0:	3302      	adds	r3, #2
 8002cb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cb6:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8002cb8:	697b      	ldr	r3, [r7, #20]
 8002cba:	f003 0303 	and.w	r3, r3, #3
 8002cbe:	009b      	lsls	r3, r3, #2
 8002cc0:	220f      	movs	r2, #15
 8002cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc6:	68fa      	ldr	r2, [r7, #12]
 8002cc8:	4013      	ands	r3, r2
 8002cca:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002cd2:	d025      	beq.n	8002d20 <HAL_GPIO_DeInit+0x9c>
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	4a5e      	ldr	r2, [pc, #376]	; (8002e50 <HAL_GPIO_DeInit+0x1cc>)
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	d01f      	beq.n	8002d1c <HAL_GPIO_DeInit+0x98>
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	4a5d      	ldr	r2, [pc, #372]	; (8002e54 <HAL_GPIO_DeInit+0x1d0>)
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	d019      	beq.n	8002d18 <HAL_GPIO_DeInit+0x94>
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	4a5c      	ldr	r2, [pc, #368]	; (8002e58 <HAL_GPIO_DeInit+0x1d4>)
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d013      	beq.n	8002d14 <HAL_GPIO_DeInit+0x90>
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	4a5b      	ldr	r2, [pc, #364]	; (8002e5c <HAL_GPIO_DeInit+0x1d8>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d00d      	beq.n	8002d10 <HAL_GPIO_DeInit+0x8c>
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	4a5a      	ldr	r2, [pc, #360]	; (8002e60 <HAL_GPIO_DeInit+0x1dc>)
 8002cf8:	4293      	cmp	r3, r2
 8002cfa:	d007      	beq.n	8002d0c <HAL_GPIO_DeInit+0x88>
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	4a59      	ldr	r2, [pc, #356]	; (8002e64 <HAL_GPIO_DeInit+0x1e0>)
 8002d00:	4293      	cmp	r3, r2
 8002d02:	d101      	bne.n	8002d08 <HAL_GPIO_DeInit+0x84>
 8002d04:	2306      	movs	r3, #6
 8002d06:	e00c      	b.n	8002d22 <HAL_GPIO_DeInit+0x9e>
 8002d08:	2307      	movs	r3, #7
 8002d0a:	e00a      	b.n	8002d22 <HAL_GPIO_DeInit+0x9e>
 8002d0c:	2305      	movs	r3, #5
 8002d0e:	e008      	b.n	8002d22 <HAL_GPIO_DeInit+0x9e>
 8002d10:	2304      	movs	r3, #4
 8002d12:	e006      	b.n	8002d22 <HAL_GPIO_DeInit+0x9e>
 8002d14:	2303      	movs	r3, #3
 8002d16:	e004      	b.n	8002d22 <HAL_GPIO_DeInit+0x9e>
 8002d18:	2302      	movs	r3, #2
 8002d1a:	e002      	b.n	8002d22 <HAL_GPIO_DeInit+0x9e>
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	e000      	b.n	8002d22 <HAL_GPIO_DeInit+0x9e>
 8002d20:	2300      	movs	r3, #0
 8002d22:	697a      	ldr	r2, [r7, #20]
 8002d24:	f002 0203 	and.w	r2, r2, #3
 8002d28:	0092      	lsls	r2, r2, #2
 8002d2a:	4093      	lsls	r3, r2
 8002d2c:	68fa      	ldr	r2, [r7, #12]
 8002d2e:	429a      	cmp	r2, r3
 8002d30:	d132      	bne.n	8002d98 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8002d32:	4b4d      	ldr	r3, [pc, #308]	; (8002e68 <HAL_GPIO_DeInit+0x1e4>)
 8002d34:	681a      	ldr	r2, [r3, #0]
 8002d36:	693b      	ldr	r3, [r7, #16]
 8002d38:	43db      	mvns	r3, r3
 8002d3a:	494b      	ldr	r1, [pc, #300]	; (8002e68 <HAL_GPIO_DeInit+0x1e4>)
 8002d3c:	4013      	ands	r3, r2
 8002d3e:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8002d40:	4b49      	ldr	r3, [pc, #292]	; (8002e68 <HAL_GPIO_DeInit+0x1e4>)
 8002d42:	685a      	ldr	r2, [r3, #4]
 8002d44:	693b      	ldr	r3, [r7, #16]
 8002d46:	43db      	mvns	r3, r3
 8002d48:	4947      	ldr	r1, [pc, #284]	; (8002e68 <HAL_GPIO_DeInit+0x1e4>)
 8002d4a:	4013      	ands	r3, r2
 8002d4c:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8002d4e:	4b46      	ldr	r3, [pc, #280]	; (8002e68 <HAL_GPIO_DeInit+0x1e4>)
 8002d50:	689a      	ldr	r2, [r3, #8]
 8002d52:	693b      	ldr	r3, [r7, #16]
 8002d54:	43db      	mvns	r3, r3
 8002d56:	4944      	ldr	r1, [pc, #272]	; (8002e68 <HAL_GPIO_DeInit+0x1e4>)
 8002d58:	4013      	ands	r3, r2
 8002d5a:	608b      	str	r3, [r1, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 8002d5c:	4b42      	ldr	r3, [pc, #264]	; (8002e68 <HAL_GPIO_DeInit+0x1e4>)
 8002d5e:	68da      	ldr	r2, [r3, #12]
 8002d60:	693b      	ldr	r3, [r7, #16]
 8002d62:	43db      	mvns	r3, r3
 8002d64:	4940      	ldr	r1, [pc, #256]	; (8002e68 <HAL_GPIO_DeInit+0x1e4>)
 8002d66:	4013      	ands	r3, r2
 8002d68:	60cb      	str	r3, [r1, #12]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8002d6a:	697b      	ldr	r3, [r7, #20]
 8002d6c:	f003 0303 	and.w	r3, r3, #3
 8002d70:	009b      	lsls	r3, r3, #2
 8002d72:	220f      	movs	r2, #15
 8002d74:	fa02 f303 	lsl.w	r3, r2, r3
 8002d78:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8002d7a:	4a34      	ldr	r2, [pc, #208]	; (8002e4c <HAL_GPIO_DeInit+0x1c8>)
 8002d7c:	697b      	ldr	r3, [r7, #20]
 8002d7e:	089b      	lsrs	r3, r3, #2
 8002d80:	3302      	adds	r3, #2
 8002d82:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	43da      	mvns	r2, r3
 8002d8a:	4830      	ldr	r0, [pc, #192]	; (8002e4c <HAL_GPIO_DeInit+0x1c8>)
 8002d8c:	697b      	ldr	r3, [r7, #20]
 8002d8e:	089b      	lsrs	r3, r3, #2
 8002d90:	400a      	ands	r2, r1
 8002d92:	3302      	adds	r3, #2
 8002d94:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681a      	ldr	r2, [r3, #0]
 8002d9c:	697b      	ldr	r3, [r7, #20]
 8002d9e:	005b      	lsls	r3, r3, #1
 8002da0:	2103      	movs	r1, #3
 8002da2:	fa01 f303 	lsl.w	r3, r1, r3
 8002da6:	431a      	orrs	r2, r3
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8002dac:	697b      	ldr	r3, [r7, #20]
 8002dae:	08da      	lsrs	r2, r3, #3
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	3208      	adds	r2, #8
 8002db4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002db8:	697b      	ldr	r3, [r7, #20]
 8002dba:	f003 0307 	and.w	r3, r3, #7
 8002dbe:	009b      	lsls	r3, r3, #2
 8002dc0:	220f      	movs	r2, #15
 8002dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc6:	43db      	mvns	r3, r3
 8002dc8:	697a      	ldr	r2, [r7, #20]
 8002dca:	08d2      	lsrs	r2, r2, #3
 8002dcc:	4019      	ands	r1, r3
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	3208      	adds	r2, #8
 8002dd2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	689a      	ldr	r2, [r3, #8]
 8002dda:	697b      	ldr	r3, [r7, #20]
 8002ddc:	005b      	lsls	r3, r3, #1
 8002dde:	2103      	movs	r1, #3
 8002de0:	fa01 f303 	lsl.w	r3, r1, r3
 8002de4:	43db      	mvns	r3, r3
 8002de6:	401a      	ands	r2, r3
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	685a      	ldr	r2, [r3, #4]
 8002df0:	2101      	movs	r1, #1
 8002df2:	697b      	ldr	r3, [r7, #20]
 8002df4:	fa01 f303 	lsl.w	r3, r1, r3
 8002df8:	43db      	mvns	r3, r3
 8002dfa:	401a      	ands	r2, r3
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	68da      	ldr	r2, [r3, #12]
 8002e04:	697b      	ldr	r3, [r7, #20]
 8002e06:	005b      	lsls	r3, r3, #1
 8002e08:	2103      	movs	r1, #3
 8002e0a:	fa01 f303 	lsl.w	r3, r1, r3
 8002e0e:	43db      	mvns	r3, r3
 8002e10:	401a      	ands	r2, r3
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e1a:	2101      	movs	r1, #1
 8002e1c:	697b      	ldr	r3, [r7, #20]
 8002e1e:	fa01 f303 	lsl.w	r3, r1, r3
 8002e22:	43db      	mvns	r3, r3
 8002e24:	401a      	ands	r2, r3
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8002e2a:	697b      	ldr	r3, [r7, #20]
 8002e2c:	3301      	adds	r3, #1
 8002e2e:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8002e30:	683a      	ldr	r2, [r7, #0]
 8002e32:	697b      	ldr	r3, [r7, #20]
 8002e34:	fa22 f303 	lsr.w	r3, r2, r3
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	f47f af2b 	bne.w	8002c94 <HAL_GPIO_DeInit+0x10>
  }
}
 8002e3e:	bf00      	nop
 8002e40:	bf00      	nop
 8002e42:	371c      	adds	r7, #28
 8002e44:	46bd      	mov	sp, r7
 8002e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4a:	4770      	bx	lr
 8002e4c:	40010000 	.word	0x40010000
 8002e50:	48000400 	.word	0x48000400
 8002e54:	48000800 	.word	0x48000800
 8002e58:	48000c00 	.word	0x48000c00
 8002e5c:	48001000 	.word	0x48001000
 8002e60:	48001400 	.word	0x48001400
 8002e64:	48001800 	.word	0x48001800
 8002e68:	40010400 	.word	0x40010400

08002e6c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	b085      	sub	sp, #20
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
 8002e74:	460b      	mov	r3, r1
 8002e76:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	691a      	ldr	r2, [r3, #16]
 8002e7c:	887b      	ldrh	r3, [r7, #2]
 8002e7e:	4013      	ands	r3, r2
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d002      	beq.n	8002e8a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002e84:	2301      	movs	r3, #1
 8002e86:	73fb      	strb	r3, [r7, #15]
 8002e88:	e001      	b.n	8002e8e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002e8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e90:	4618      	mov	r0, r3
 8002e92:	3714      	adds	r7, #20
 8002e94:	46bd      	mov	sp, r7
 8002e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9a:	4770      	bx	lr

08002e9c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	b083      	sub	sp, #12
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
 8002ea4:	460b      	mov	r3, r1
 8002ea6:	807b      	strh	r3, [r7, #2]
 8002ea8:	4613      	mov	r3, r2
 8002eaa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002eac:	787b      	ldrb	r3, [r7, #1]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d003      	beq.n	8002eba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002eb2:	887a      	ldrh	r2, [r7, #2]
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002eb8:	e002      	b.n	8002ec0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002eba:	887a      	ldrh	r2, [r7, #2]
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002ec0:	bf00      	nop
 8002ec2:	370c      	adds	r7, #12
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eca:	4770      	bx	lr

08002ecc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b082      	sub	sp, #8
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002ed6:	4b08      	ldr	r3, [pc, #32]	; (8002ef8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002ed8:	695a      	ldr	r2, [r3, #20]
 8002eda:	88fb      	ldrh	r3, [r7, #6]
 8002edc:	4013      	ands	r3, r2
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d006      	beq.n	8002ef0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002ee2:	4a05      	ldr	r2, [pc, #20]	; (8002ef8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002ee4:	88fb      	ldrh	r3, [r7, #6]
 8002ee6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002ee8:	88fb      	ldrh	r3, [r7, #6]
 8002eea:	4618      	mov	r0, r3
 8002eec:	f7fe f8c2 	bl	8001074 <HAL_GPIO_EXTI_Callback>
  }
}
 8002ef0:	bf00      	nop
 8002ef2:	3708      	adds	r7, #8
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	bd80      	pop	{r7, pc}
 8002ef8:	40010400 	.word	0x40010400

08002efc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b082      	sub	sp, #8
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d101      	bne.n	8002f0e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	e081      	b.n	8003012 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f14:	b2db      	uxtb	r3, r3
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d106      	bne.n	8002f28 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002f22:	6878      	ldr	r0, [r7, #4]
 8002f24:	f7fe fd6a 	bl	80019fc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2224      	movs	r2, #36	; 0x24
 8002f2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	681a      	ldr	r2, [r3, #0]
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f022 0201 	bic.w	r2, r2, #1
 8002f3e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	685a      	ldr	r2, [r3, #4]
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002f4c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	689a      	ldr	r2, [r3, #8]
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002f5c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	68db      	ldr	r3, [r3, #12]
 8002f62:	2b01      	cmp	r3, #1
 8002f64:	d107      	bne.n	8002f76 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	689a      	ldr	r2, [r3, #8]
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002f72:	609a      	str	r2, [r3, #8]
 8002f74:	e006      	b.n	8002f84 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	689a      	ldr	r2, [r3, #8]
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002f82:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	68db      	ldr	r3, [r3, #12]
 8002f88:	2b02      	cmp	r3, #2
 8002f8a:	d104      	bne.n	8002f96 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002f94:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	687a      	ldr	r2, [r7, #4]
 8002f9e:	6812      	ldr	r2, [r2, #0]
 8002fa0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002fa4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002fa8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	68da      	ldr	r2, [r3, #12]
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002fb8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	691a      	ldr	r2, [r3, #16]
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	695b      	ldr	r3, [r3, #20]
 8002fc2:	ea42 0103 	orr.w	r1, r2, r3
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	699b      	ldr	r3, [r3, #24]
 8002fca:	021a      	lsls	r2, r3, #8
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	430a      	orrs	r2, r1
 8002fd2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	69d9      	ldr	r1, [r3, #28]
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6a1a      	ldr	r2, [r3, #32]
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	430a      	orrs	r2, r1
 8002fe2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	681a      	ldr	r2, [r3, #0]
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f042 0201 	orr.w	r2, r2, #1
 8002ff2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2220      	movs	r2, #32
 8002ffe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2200      	movs	r2, #0
 8003006:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2200      	movs	r2, #0
 800300c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003010:	2300      	movs	r3, #0
}
 8003012:	4618      	mov	r0, r3
 8003014:	3708      	adds	r7, #8
 8003016:	46bd      	mov	sp, r7
 8003018:	bd80      	pop	{r7, pc}

0800301a <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800301a:	b580      	push	{r7, lr}
 800301c:	b082      	sub	sp, #8
 800301e:	af00      	add	r7, sp, #0
 8003020:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2b00      	cmp	r3, #0
 8003026:	d101      	bne.n	800302c <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8003028:	2301      	movs	r3, #1
 800302a:	e021      	b.n	8003070 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2224      	movs	r2, #36	; 0x24
 8003030:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	681a      	ldr	r2, [r3, #0]
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f022 0201 	bic.w	r2, r2, #1
 8003042:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8003044:	6878      	ldr	r0, [r7, #4]
 8003046:	f7fe fd37 	bl	8001ab8 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2200      	movs	r2, #0
 800304e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2200      	movs	r2, #0
 8003054:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2200      	movs	r2, #0
 800305c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2200      	movs	r2, #0
 8003062:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2200      	movs	r2, #0
 800306a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800306e:	2300      	movs	r3, #0
}
 8003070:	4618      	mov	r0, r3
 8003072:	3708      	adds	r7, #8
 8003074:	46bd      	mov	sp, r7
 8003076:	bd80      	pop	{r7, pc}

08003078 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b088      	sub	sp, #32
 800307c:	af02      	add	r7, sp, #8
 800307e:	60f8      	str	r0, [r7, #12]
 8003080:	4608      	mov	r0, r1
 8003082:	4611      	mov	r1, r2
 8003084:	461a      	mov	r2, r3
 8003086:	4603      	mov	r3, r0
 8003088:	817b      	strh	r3, [r7, #10]
 800308a:	460b      	mov	r3, r1
 800308c:	813b      	strh	r3, [r7, #8]
 800308e:	4613      	mov	r3, r2
 8003090:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003098:	b2db      	uxtb	r3, r3
 800309a:	2b20      	cmp	r3, #32
 800309c:	f040 80f9 	bne.w	8003292 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80030a0:	6a3b      	ldr	r3, [r7, #32]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d002      	beq.n	80030ac <HAL_I2C_Mem_Write+0x34>
 80030a6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d105      	bne.n	80030b8 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80030b2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80030b4:	2301      	movs	r3, #1
 80030b6:	e0ed      	b.n	8003294 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80030be:	2b01      	cmp	r3, #1
 80030c0:	d101      	bne.n	80030c6 <HAL_I2C_Mem_Write+0x4e>
 80030c2:	2302      	movs	r3, #2
 80030c4:	e0e6      	b.n	8003294 <HAL_I2C_Mem_Write+0x21c>
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	2201      	movs	r2, #1
 80030ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80030ce:	f7ff f95f 	bl	8002390 <HAL_GetTick>
 80030d2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80030d4:	697b      	ldr	r3, [r7, #20]
 80030d6:	9300      	str	r3, [sp, #0]
 80030d8:	2319      	movs	r3, #25
 80030da:	2201      	movs	r2, #1
 80030dc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80030e0:	68f8      	ldr	r0, [r7, #12]
 80030e2:	f000 fac3 	bl	800366c <I2C_WaitOnFlagUntilTimeout>
 80030e6:	4603      	mov	r3, r0
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d001      	beq.n	80030f0 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80030ec:	2301      	movs	r3, #1
 80030ee:	e0d1      	b.n	8003294 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	2221      	movs	r2, #33	; 0x21
 80030f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	2240      	movs	r2, #64	; 0x40
 80030fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	2200      	movs	r2, #0
 8003104:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	6a3a      	ldr	r2, [r7, #32]
 800310a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003110:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	2200      	movs	r2, #0
 8003116:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003118:	88f8      	ldrh	r0, [r7, #6]
 800311a:	893a      	ldrh	r2, [r7, #8]
 800311c:	8979      	ldrh	r1, [r7, #10]
 800311e:	697b      	ldr	r3, [r7, #20]
 8003120:	9301      	str	r3, [sp, #4]
 8003122:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003124:	9300      	str	r3, [sp, #0]
 8003126:	4603      	mov	r3, r0
 8003128:	68f8      	ldr	r0, [r7, #12]
 800312a:	f000 f9d3 	bl	80034d4 <I2C_RequestMemoryWrite>
 800312e:	4603      	mov	r3, r0
 8003130:	2b00      	cmp	r3, #0
 8003132:	d005      	beq.n	8003140 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	2200      	movs	r2, #0
 8003138:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800313c:	2301      	movs	r3, #1
 800313e:	e0a9      	b.n	8003294 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003144:	b29b      	uxth	r3, r3
 8003146:	2bff      	cmp	r3, #255	; 0xff
 8003148:	d90e      	bls.n	8003168 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	22ff      	movs	r2, #255	; 0xff
 800314e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003154:	b2da      	uxtb	r2, r3
 8003156:	8979      	ldrh	r1, [r7, #10]
 8003158:	2300      	movs	r3, #0
 800315a:	9300      	str	r3, [sp, #0]
 800315c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003160:	68f8      	ldr	r0, [r7, #12]
 8003162:	f000 fba5 	bl	80038b0 <I2C_TransferConfig>
 8003166:	e00f      	b.n	8003188 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800316c:	b29a      	uxth	r2, r3
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003176:	b2da      	uxtb	r2, r3
 8003178:	8979      	ldrh	r1, [r7, #10]
 800317a:	2300      	movs	r3, #0
 800317c:	9300      	str	r3, [sp, #0]
 800317e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003182:	68f8      	ldr	r0, [r7, #12]
 8003184:	f000 fb94 	bl	80038b0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003188:	697a      	ldr	r2, [r7, #20]
 800318a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800318c:	68f8      	ldr	r0, [r7, #12]
 800318e:	f000 faad 	bl	80036ec <I2C_WaitOnTXISFlagUntilTimeout>
 8003192:	4603      	mov	r3, r0
 8003194:	2b00      	cmp	r3, #0
 8003196:	d001      	beq.n	800319c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003198:	2301      	movs	r3, #1
 800319a:	e07b      	b.n	8003294 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031a0:	781a      	ldrb	r2, [r3, #0]
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ac:	1c5a      	adds	r2, r3, #1
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031b6:	b29b      	uxth	r3, r3
 80031b8:	3b01      	subs	r3, #1
 80031ba:	b29a      	uxth	r2, r3
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031c4:	3b01      	subs	r3, #1
 80031c6:	b29a      	uxth	r2, r3
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031d0:	b29b      	uxth	r3, r3
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d034      	beq.n	8003240 <HAL_I2C_Mem_Write+0x1c8>
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d130      	bne.n	8003240 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80031de:	697b      	ldr	r3, [r7, #20]
 80031e0:	9300      	str	r3, [sp, #0]
 80031e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031e4:	2200      	movs	r2, #0
 80031e6:	2180      	movs	r1, #128	; 0x80
 80031e8:	68f8      	ldr	r0, [r7, #12]
 80031ea:	f000 fa3f 	bl	800366c <I2C_WaitOnFlagUntilTimeout>
 80031ee:	4603      	mov	r3, r0
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d001      	beq.n	80031f8 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80031f4:	2301      	movs	r3, #1
 80031f6:	e04d      	b.n	8003294 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031fc:	b29b      	uxth	r3, r3
 80031fe:	2bff      	cmp	r3, #255	; 0xff
 8003200:	d90e      	bls.n	8003220 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	22ff      	movs	r2, #255	; 0xff
 8003206:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800320c:	b2da      	uxtb	r2, r3
 800320e:	8979      	ldrh	r1, [r7, #10]
 8003210:	2300      	movs	r3, #0
 8003212:	9300      	str	r3, [sp, #0]
 8003214:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003218:	68f8      	ldr	r0, [r7, #12]
 800321a:	f000 fb49 	bl	80038b0 <I2C_TransferConfig>
 800321e:	e00f      	b.n	8003240 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003224:	b29a      	uxth	r2, r3
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800322e:	b2da      	uxtb	r2, r3
 8003230:	8979      	ldrh	r1, [r7, #10]
 8003232:	2300      	movs	r3, #0
 8003234:	9300      	str	r3, [sp, #0]
 8003236:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800323a:	68f8      	ldr	r0, [r7, #12]
 800323c:	f000 fb38 	bl	80038b0 <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003244:	b29b      	uxth	r3, r3
 8003246:	2b00      	cmp	r3, #0
 8003248:	d19e      	bne.n	8003188 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800324a:	697a      	ldr	r2, [r7, #20]
 800324c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800324e:	68f8      	ldr	r0, [r7, #12]
 8003250:	f000 fa8c 	bl	800376c <I2C_WaitOnSTOPFlagUntilTimeout>
 8003254:	4603      	mov	r3, r0
 8003256:	2b00      	cmp	r3, #0
 8003258:	d001      	beq.n	800325e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800325a:	2301      	movs	r3, #1
 800325c:	e01a      	b.n	8003294 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	2220      	movs	r2, #32
 8003264:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	6859      	ldr	r1, [r3, #4]
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681a      	ldr	r2, [r3, #0]
 8003270:	4b0a      	ldr	r3, [pc, #40]	; (800329c <HAL_I2C_Mem_Write+0x224>)
 8003272:	400b      	ands	r3, r1
 8003274:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	2220      	movs	r2, #32
 800327a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	2200      	movs	r2, #0
 8003282:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	2200      	movs	r2, #0
 800328a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800328e:	2300      	movs	r3, #0
 8003290:	e000      	b.n	8003294 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8003292:	2302      	movs	r3, #2
  }
}
 8003294:	4618      	mov	r0, r3
 8003296:	3718      	adds	r7, #24
 8003298:	46bd      	mov	sp, r7
 800329a:	bd80      	pop	{r7, pc}
 800329c:	fe00e800 	.word	0xfe00e800

080032a0 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b088      	sub	sp, #32
 80032a4:	af02      	add	r7, sp, #8
 80032a6:	60f8      	str	r0, [r7, #12]
 80032a8:	4608      	mov	r0, r1
 80032aa:	4611      	mov	r1, r2
 80032ac:	461a      	mov	r2, r3
 80032ae:	4603      	mov	r3, r0
 80032b0:	817b      	strh	r3, [r7, #10]
 80032b2:	460b      	mov	r3, r1
 80032b4:	813b      	strh	r3, [r7, #8]
 80032b6:	4613      	mov	r3, r2
 80032b8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80032c0:	b2db      	uxtb	r3, r3
 80032c2:	2b20      	cmp	r3, #32
 80032c4:	f040 80fd 	bne.w	80034c2 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80032c8:	6a3b      	ldr	r3, [r7, #32]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d002      	beq.n	80032d4 <HAL_I2C_Mem_Read+0x34>
 80032ce:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d105      	bne.n	80032e0 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80032da:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80032dc:	2301      	movs	r3, #1
 80032de:	e0f1      	b.n	80034c4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80032e6:	2b01      	cmp	r3, #1
 80032e8:	d101      	bne.n	80032ee <HAL_I2C_Mem_Read+0x4e>
 80032ea:	2302      	movs	r3, #2
 80032ec:	e0ea      	b.n	80034c4 <HAL_I2C_Mem_Read+0x224>
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	2201      	movs	r2, #1
 80032f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80032f6:	f7ff f84b 	bl	8002390 <HAL_GetTick>
 80032fa:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80032fc:	697b      	ldr	r3, [r7, #20]
 80032fe:	9300      	str	r3, [sp, #0]
 8003300:	2319      	movs	r3, #25
 8003302:	2201      	movs	r2, #1
 8003304:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003308:	68f8      	ldr	r0, [r7, #12]
 800330a:	f000 f9af 	bl	800366c <I2C_WaitOnFlagUntilTimeout>
 800330e:	4603      	mov	r3, r0
 8003310:	2b00      	cmp	r3, #0
 8003312:	d001      	beq.n	8003318 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8003314:	2301      	movs	r3, #1
 8003316:	e0d5      	b.n	80034c4 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	2222      	movs	r2, #34	; 0x22
 800331c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	2240      	movs	r2, #64	; 0x40
 8003324:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	2200      	movs	r2, #0
 800332c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	6a3a      	ldr	r2, [r7, #32]
 8003332:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003338:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	2200      	movs	r2, #0
 800333e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003340:	88f8      	ldrh	r0, [r7, #6]
 8003342:	893a      	ldrh	r2, [r7, #8]
 8003344:	8979      	ldrh	r1, [r7, #10]
 8003346:	697b      	ldr	r3, [r7, #20]
 8003348:	9301      	str	r3, [sp, #4]
 800334a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800334c:	9300      	str	r3, [sp, #0]
 800334e:	4603      	mov	r3, r0
 8003350:	68f8      	ldr	r0, [r7, #12]
 8003352:	f000 f913 	bl	800357c <I2C_RequestMemoryRead>
 8003356:	4603      	mov	r3, r0
 8003358:	2b00      	cmp	r3, #0
 800335a:	d005      	beq.n	8003368 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	2200      	movs	r2, #0
 8003360:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003364:	2301      	movs	r3, #1
 8003366:	e0ad      	b.n	80034c4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800336c:	b29b      	uxth	r3, r3
 800336e:	2bff      	cmp	r3, #255	; 0xff
 8003370:	d90e      	bls.n	8003390 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	22ff      	movs	r2, #255	; 0xff
 8003376:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800337c:	b2da      	uxtb	r2, r3
 800337e:	8979      	ldrh	r1, [r7, #10]
 8003380:	4b52      	ldr	r3, [pc, #328]	; (80034cc <HAL_I2C_Mem_Read+0x22c>)
 8003382:	9300      	str	r3, [sp, #0]
 8003384:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003388:	68f8      	ldr	r0, [r7, #12]
 800338a:	f000 fa91 	bl	80038b0 <I2C_TransferConfig>
 800338e:	e00f      	b.n	80033b0 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003394:	b29a      	uxth	r2, r3
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800339e:	b2da      	uxtb	r2, r3
 80033a0:	8979      	ldrh	r1, [r7, #10]
 80033a2:	4b4a      	ldr	r3, [pc, #296]	; (80034cc <HAL_I2C_Mem_Read+0x22c>)
 80033a4:	9300      	str	r3, [sp, #0]
 80033a6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80033aa:	68f8      	ldr	r0, [r7, #12]
 80033ac:	f000 fa80 	bl	80038b0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80033b0:	697b      	ldr	r3, [r7, #20]
 80033b2:	9300      	str	r3, [sp, #0]
 80033b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033b6:	2200      	movs	r2, #0
 80033b8:	2104      	movs	r1, #4
 80033ba:	68f8      	ldr	r0, [r7, #12]
 80033bc:	f000 f956 	bl	800366c <I2C_WaitOnFlagUntilTimeout>
 80033c0:	4603      	mov	r3, r0
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d001      	beq.n	80033ca <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80033c6:	2301      	movs	r3, #1
 80033c8:	e07c      	b.n	80034c4 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033d4:	b2d2      	uxtb	r2, r2
 80033d6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033dc:	1c5a      	adds	r2, r3, #1
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033e6:	3b01      	subs	r3, #1
 80033e8:	b29a      	uxth	r2, r3
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033f2:	b29b      	uxth	r3, r3
 80033f4:	3b01      	subs	r3, #1
 80033f6:	b29a      	uxth	r2, r3
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003400:	b29b      	uxth	r3, r3
 8003402:	2b00      	cmp	r3, #0
 8003404:	d034      	beq.n	8003470 <HAL_I2C_Mem_Read+0x1d0>
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800340a:	2b00      	cmp	r3, #0
 800340c:	d130      	bne.n	8003470 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800340e:	697b      	ldr	r3, [r7, #20]
 8003410:	9300      	str	r3, [sp, #0]
 8003412:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003414:	2200      	movs	r2, #0
 8003416:	2180      	movs	r1, #128	; 0x80
 8003418:	68f8      	ldr	r0, [r7, #12]
 800341a:	f000 f927 	bl	800366c <I2C_WaitOnFlagUntilTimeout>
 800341e:	4603      	mov	r3, r0
 8003420:	2b00      	cmp	r3, #0
 8003422:	d001      	beq.n	8003428 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003424:	2301      	movs	r3, #1
 8003426:	e04d      	b.n	80034c4 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800342c:	b29b      	uxth	r3, r3
 800342e:	2bff      	cmp	r3, #255	; 0xff
 8003430:	d90e      	bls.n	8003450 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	22ff      	movs	r2, #255	; 0xff
 8003436:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800343c:	b2da      	uxtb	r2, r3
 800343e:	8979      	ldrh	r1, [r7, #10]
 8003440:	2300      	movs	r3, #0
 8003442:	9300      	str	r3, [sp, #0]
 8003444:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003448:	68f8      	ldr	r0, [r7, #12]
 800344a:	f000 fa31 	bl	80038b0 <I2C_TransferConfig>
 800344e:	e00f      	b.n	8003470 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003454:	b29a      	uxth	r2, r3
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800345e:	b2da      	uxtb	r2, r3
 8003460:	8979      	ldrh	r1, [r7, #10]
 8003462:	2300      	movs	r3, #0
 8003464:	9300      	str	r3, [sp, #0]
 8003466:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800346a:	68f8      	ldr	r0, [r7, #12]
 800346c:	f000 fa20 	bl	80038b0 <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003474:	b29b      	uxth	r3, r3
 8003476:	2b00      	cmp	r3, #0
 8003478:	d19a      	bne.n	80033b0 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800347a:	697a      	ldr	r2, [r7, #20]
 800347c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800347e:	68f8      	ldr	r0, [r7, #12]
 8003480:	f000 f974 	bl	800376c <I2C_WaitOnSTOPFlagUntilTimeout>
 8003484:	4603      	mov	r3, r0
 8003486:	2b00      	cmp	r3, #0
 8003488:	d001      	beq.n	800348e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800348a:	2301      	movs	r3, #1
 800348c:	e01a      	b.n	80034c4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	2220      	movs	r2, #32
 8003494:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	6859      	ldr	r1, [r3, #4]
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	681a      	ldr	r2, [r3, #0]
 80034a0:	4b0b      	ldr	r3, [pc, #44]	; (80034d0 <HAL_I2C_Mem_Read+0x230>)
 80034a2:	400b      	ands	r3, r1
 80034a4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	2220      	movs	r2, #32
 80034aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	2200      	movs	r2, #0
 80034b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	2200      	movs	r2, #0
 80034ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80034be:	2300      	movs	r3, #0
 80034c0:	e000      	b.n	80034c4 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80034c2:	2302      	movs	r3, #2
  }
}
 80034c4:	4618      	mov	r0, r3
 80034c6:	3718      	adds	r7, #24
 80034c8:	46bd      	mov	sp, r7
 80034ca:	bd80      	pop	{r7, pc}
 80034cc:	80002400 	.word	0x80002400
 80034d0:	fe00e800 	.word	0xfe00e800

080034d4 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b086      	sub	sp, #24
 80034d8:	af02      	add	r7, sp, #8
 80034da:	60f8      	str	r0, [r7, #12]
 80034dc:	4608      	mov	r0, r1
 80034de:	4611      	mov	r1, r2
 80034e0:	461a      	mov	r2, r3
 80034e2:	4603      	mov	r3, r0
 80034e4:	817b      	strh	r3, [r7, #10]
 80034e6:	460b      	mov	r3, r1
 80034e8:	813b      	strh	r3, [r7, #8]
 80034ea:	4613      	mov	r3, r2
 80034ec:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80034ee:	88fb      	ldrh	r3, [r7, #6]
 80034f0:	b2da      	uxtb	r2, r3
 80034f2:	8979      	ldrh	r1, [r7, #10]
 80034f4:	4b20      	ldr	r3, [pc, #128]	; (8003578 <I2C_RequestMemoryWrite+0xa4>)
 80034f6:	9300      	str	r3, [sp, #0]
 80034f8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80034fc:	68f8      	ldr	r0, [r7, #12]
 80034fe:	f000 f9d7 	bl	80038b0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003502:	69fa      	ldr	r2, [r7, #28]
 8003504:	69b9      	ldr	r1, [r7, #24]
 8003506:	68f8      	ldr	r0, [r7, #12]
 8003508:	f000 f8f0 	bl	80036ec <I2C_WaitOnTXISFlagUntilTimeout>
 800350c:	4603      	mov	r3, r0
 800350e:	2b00      	cmp	r3, #0
 8003510:	d001      	beq.n	8003516 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8003512:	2301      	movs	r3, #1
 8003514:	e02c      	b.n	8003570 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003516:	88fb      	ldrh	r3, [r7, #6]
 8003518:	2b01      	cmp	r3, #1
 800351a:	d105      	bne.n	8003528 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800351c:	893b      	ldrh	r3, [r7, #8]
 800351e:	b2da      	uxtb	r2, r3
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	629a      	str	r2, [r3, #40]	; 0x28
 8003526:	e015      	b.n	8003554 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003528:	893b      	ldrh	r3, [r7, #8]
 800352a:	0a1b      	lsrs	r3, r3, #8
 800352c:	b29b      	uxth	r3, r3
 800352e:	b2da      	uxtb	r2, r3
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003536:	69fa      	ldr	r2, [r7, #28]
 8003538:	69b9      	ldr	r1, [r7, #24]
 800353a:	68f8      	ldr	r0, [r7, #12]
 800353c:	f000 f8d6 	bl	80036ec <I2C_WaitOnTXISFlagUntilTimeout>
 8003540:	4603      	mov	r3, r0
 8003542:	2b00      	cmp	r3, #0
 8003544:	d001      	beq.n	800354a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8003546:	2301      	movs	r3, #1
 8003548:	e012      	b.n	8003570 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800354a:	893b      	ldrh	r3, [r7, #8]
 800354c:	b2da      	uxtb	r2, r3
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003554:	69fb      	ldr	r3, [r7, #28]
 8003556:	9300      	str	r3, [sp, #0]
 8003558:	69bb      	ldr	r3, [r7, #24]
 800355a:	2200      	movs	r2, #0
 800355c:	2180      	movs	r1, #128	; 0x80
 800355e:	68f8      	ldr	r0, [r7, #12]
 8003560:	f000 f884 	bl	800366c <I2C_WaitOnFlagUntilTimeout>
 8003564:	4603      	mov	r3, r0
 8003566:	2b00      	cmp	r3, #0
 8003568:	d001      	beq.n	800356e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800356a:	2301      	movs	r3, #1
 800356c:	e000      	b.n	8003570 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800356e:	2300      	movs	r3, #0
}
 8003570:	4618      	mov	r0, r3
 8003572:	3710      	adds	r7, #16
 8003574:	46bd      	mov	sp, r7
 8003576:	bd80      	pop	{r7, pc}
 8003578:	80002000 	.word	0x80002000

0800357c <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b086      	sub	sp, #24
 8003580:	af02      	add	r7, sp, #8
 8003582:	60f8      	str	r0, [r7, #12]
 8003584:	4608      	mov	r0, r1
 8003586:	4611      	mov	r1, r2
 8003588:	461a      	mov	r2, r3
 800358a:	4603      	mov	r3, r0
 800358c:	817b      	strh	r3, [r7, #10]
 800358e:	460b      	mov	r3, r1
 8003590:	813b      	strh	r3, [r7, #8]
 8003592:	4613      	mov	r3, r2
 8003594:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003596:	88fb      	ldrh	r3, [r7, #6]
 8003598:	b2da      	uxtb	r2, r3
 800359a:	8979      	ldrh	r1, [r7, #10]
 800359c:	4b20      	ldr	r3, [pc, #128]	; (8003620 <I2C_RequestMemoryRead+0xa4>)
 800359e:	9300      	str	r3, [sp, #0]
 80035a0:	2300      	movs	r3, #0
 80035a2:	68f8      	ldr	r0, [r7, #12]
 80035a4:	f000 f984 	bl	80038b0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80035a8:	69fa      	ldr	r2, [r7, #28]
 80035aa:	69b9      	ldr	r1, [r7, #24]
 80035ac:	68f8      	ldr	r0, [r7, #12]
 80035ae:	f000 f89d 	bl	80036ec <I2C_WaitOnTXISFlagUntilTimeout>
 80035b2:	4603      	mov	r3, r0
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d001      	beq.n	80035bc <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80035b8:	2301      	movs	r3, #1
 80035ba:	e02c      	b.n	8003616 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80035bc:	88fb      	ldrh	r3, [r7, #6]
 80035be:	2b01      	cmp	r3, #1
 80035c0:	d105      	bne.n	80035ce <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80035c2:	893b      	ldrh	r3, [r7, #8]
 80035c4:	b2da      	uxtb	r2, r3
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	629a      	str	r2, [r3, #40]	; 0x28
 80035cc:	e015      	b.n	80035fa <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80035ce:	893b      	ldrh	r3, [r7, #8]
 80035d0:	0a1b      	lsrs	r3, r3, #8
 80035d2:	b29b      	uxth	r3, r3
 80035d4:	b2da      	uxtb	r2, r3
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80035dc:	69fa      	ldr	r2, [r7, #28]
 80035de:	69b9      	ldr	r1, [r7, #24]
 80035e0:	68f8      	ldr	r0, [r7, #12]
 80035e2:	f000 f883 	bl	80036ec <I2C_WaitOnTXISFlagUntilTimeout>
 80035e6:	4603      	mov	r3, r0
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d001      	beq.n	80035f0 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80035ec:	2301      	movs	r3, #1
 80035ee:	e012      	b.n	8003616 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80035f0:	893b      	ldrh	r3, [r7, #8]
 80035f2:	b2da      	uxtb	r2, r3
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80035fa:	69fb      	ldr	r3, [r7, #28]
 80035fc:	9300      	str	r3, [sp, #0]
 80035fe:	69bb      	ldr	r3, [r7, #24]
 8003600:	2200      	movs	r2, #0
 8003602:	2140      	movs	r1, #64	; 0x40
 8003604:	68f8      	ldr	r0, [r7, #12]
 8003606:	f000 f831 	bl	800366c <I2C_WaitOnFlagUntilTimeout>
 800360a:	4603      	mov	r3, r0
 800360c:	2b00      	cmp	r3, #0
 800360e:	d001      	beq.n	8003614 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003610:	2301      	movs	r3, #1
 8003612:	e000      	b.n	8003616 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003614:	2300      	movs	r3, #0
}
 8003616:	4618      	mov	r0, r3
 8003618:	3710      	adds	r7, #16
 800361a:	46bd      	mov	sp, r7
 800361c:	bd80      	pop	{r7, pc}
 800361e:	bf00      	nop
 8003620:	80002000 	.word	0x80002000

08003624 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003624:	b480      	push	{r7}
 8003626:	b083      	sub	sp, #12
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	699b      	ldr	r3, [r3, #24]
 8003632:	f003 0302 	and.w	r3, r3, #2
 8003636:	2b02      	cmp	r3, #2
 8003638:	d103      	bne.n	8003642 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	2200      	movs	r2, #0
 8003640:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	699b      	ldr	r3, [r3, #24]
 8003648:	f003 0301 	and.w	r3, r3, #1
 800364c:	2b01      	cmp	r3, #1
 800364e:	d007      	beq.n	8003660 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	699a      	ldr	r2, [r3, #24]
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f042 0201 	orr.w	r2, r2, #1
 800365e:	619a      	str	r2, [r3, #24]
  }
}
 8003660:	bf00      	nop
 8003662:	370c      	adds	r7, #12
 8003664:	46bd      	mov	sp, r7
 8003666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366a:	4770      	bx	lr

0800366c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b084      	sub	sp, #16
 8003670:	af00      	add	r7, sp, #0
 8003672:	60f8      	str	r0, [r7, #12]
 8003674:	60b9      	str	r1, [r7, #8]
 8003676:	603b      	str	r3, [r7, #0]
 8003678:	4613      	mov	r3, r2
 800367a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800367c:	e022      	b.n	80036c4 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003684:	d01e      	beq.n	80036c4 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003686:	f7fe fe83 	bl	8002390 <HAL_GetTick>
 800368a:	4602      	mov	r2, r0
 800368c:	69bb      	ldr	r3, [r7, #24]
 800368e:	1ad3      	subs	r3, r2, r3
 8003690:	683a      	ldr	r2, [r7, #0]
 8003692:	429a      	cmp	r2, r3
 8003694:	d302      	bcc.n	800369c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d113      	bne.n	80036c4 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036a0:	f043 0220 	orr.w	r2, r3, #32
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	2220      	movs	r2, #32
 80036ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	2200      	movs	r2, #0
 80036b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	2200      	movs	r2, #0
 80036bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80036c0:	2301      	movs	r3, #1
 80036c2:	e00f      	b.n	80036e4 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	699a      	ldr	r2, [r3, #24]
 80036ca:	68bb      	ldr	r3, [r7, #8]
 80036cc:	4013      	ands	r3, r2
 80036ce:	68ba      	ldr	r2, [r7, #8]
 80036d0:	429a      	cmp	r2, r3
 80036d2:	bf0c      	ite	eq
 80036d4:	2301      	moveq	r3, #1
 80036d6:	2300      	movne	r3, #0
 80036d8:	b2db      	uxtb	r3, r3
 80036da:	461a      	mov	r2, r3
 80036dc:	79fb      	ldrb	r3, [r7, #7]
 80036de:	429a      	cmp	r2, r3
 80036e0:	d0cd      	beq.n	800367e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80036e2:	2300      	movs	r3, #0
}
 80036e4:	4618      	mov	r0, r3
 80036e6:	3710      	adds	r7, #16
 80036e8:	46bd      	mov	sp, r7
 80036ea:	bd80      	pop	{r7, pc}

080036ec <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b084      	sub	sp, #16
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	60f8      	str	r0, [r7, #12]
 80036f4:	60b9      	str	r1, [r7, #8]
 80036f6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80036f8:	e02c      	b.n	8003754 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80036fa:	687a      	ldr	r2, [r7, #4]
 80036fc:	68b9      	ldr	r1, [r7, #8]
 80036fe:	68f8      	ldr	r0, [r7, #12]
 8003700:	f000 f870 	bl	80037e4 <I2C_IsAcknowledgeFailed>
 8003704:	4603      	mov	r3, r0
 8003706:	2b00      	cmp	r3, #0
 8003708:	d001      	beq.n	800370e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800370a:	2301      	movs	r3, #1
 800370c:	e02a      	b.n	8003764 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800370e:	68bb      	ldr	r3, [r7, #8]
 8003710:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003714:	d01e      	beq.n	8003754 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003716:	f7fe fe3b 	bl	8002390 <HAL_GetTick>
 800371a:	4602      	mov	r2, r0
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	1ad3      	subs	r3, r2, r3
 8003720:	68ba      	ldr	r2, [r7, #8]
 8003722:	429a      	cmp	r2, r3
 8003724:	d302      	bcc.n	800372c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003726:	68bb      	ldr	r3, [r7, #8]
 8003728:	2b00      	cmp	r3, #0
 800372a:	d113      	bne.n	8003754 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003730:	f043 0220 	orr.w	r2, r3, #32
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	2220      	movs	r2, #32
 800373c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	2200      	movs	r2, #0
 8003744:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	2200      	movs	r2, #0
 800374c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003750:	2301      	movs	r3, #1
 8003752:	e007      	b.n	8003764 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	699b      	ldr	r3, [r3, #24]
 800375a:	f003 0302 	and.w	r3, r3, #2
 800375e:	2b02      	cmp	r3, #2
 8003760:	d1cb      	bne.n	80036fa <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003762:	2300      	movs	r3, #0
}
 8003764:	4618      	mov	r0, r3
 8003766:	3710      	adds	r7, #16
 8003768:	46bd      	mov	sp, r7
 800376a:	bd80      	pop	{r7, pc}

0800376c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b084      	sub	sp, #16
 8003770:	af00      	add	r7, sp, #0
 8003772:	60f8      	str	r0, [r7, #12]
 8003774:	60b9      	str	r1, [r7, #8]
 8003776:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003778:	e028      	b.n	80037cc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800377a:	687a      	ldr	r2, [r7, #4]
 800377c:	68b9      	ldr	r1, [r7, #8]
 800377e:	68f8      	ldr	r0, [r7, #12]
 8003780:	f000 f830 	bl	80037e4 <I2C_IsAcknowledgeFailed>
 8003784:	4603      	mov	r3, r0
 8003786:	2b00      	cmp	r3, #0
 8003788:	d001      	beq.n	800378e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800378a:	2301      	movs	r3, #1
 800378c:	e026      	b.n	80037dc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800378e:	f7fe fdff 	bl	8002390 <HAL_GetTick>
 8003792:	4602      	mov	r2, r0
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	1ad3      	subs	r3, r2, r3
 8003798:	68ba      	ldr	r2, [r7, #8]
 800379a:	429a      	cmp	r2, r3
 800379c:	d302      	bcc.n	80037a4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800379e:	68bb      	ldr	r3, [r7, #8]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d113      	bne.n	80037cc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037a8:	f043 0220 	orr.w	r2, r3, #32
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	2220      	movs	r2, #32
 80037b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	2200      	movs	r2, #0
 80037bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	2200      	movs	r2, #0
 80037c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80037c8:	2301      	movs	r3, #1
 80037ca:	e007      	b.n	80037dc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	699b      	ldr	r3, [r3, #24]
 80037d2:	f003 0320 	and.w	r3, r3, #32
 80037d6:	2b20      	cmp	r3, #32
 80037d8:	d1cf      	bne.n	800377a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80037da:	2300      	movs	r3, #0
}
 80037dc:	4618      	mov	r0, r3
 80037de:	3710      	adds	r7, #16
 80037e0:	46bd      	mov	sp, r7
 80037e2:	bd80      	pop	{r7, pc}

080037e4 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b084      	sub	sp, #16
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	60f8      	str	r0, [r7, #12]
 80037ec:	60b9      	str	r1, [r7, #8]
 80037ee:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	699b      	ldr	r3, [r3, #24]
 80037f6:	f003 0310 	and.w	r3, r3, #16
 80037fa:	2b10      	cmp	r3, #16
 80037fc:	d151      	bne.n	80038a2 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80037fe:	e022      	b.n	8003846 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003800:	68bb      	ldr	r3, [r7, #8]
 8003802:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003806:	d01e      	beq.n	8003846 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003808:	f7fe fdc2 	bl	8002390 <HAL_GetTick>
 800380c:	4602      	mov	r2, r0
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	1ad3      	subs	r3, r2, r3
 8003812:	68ba      	ldr	r2, [r7, #8]
 8003814:	429a      	cmp	r2, r3
 8003816:	d302      	bcc.n	800381e <I2C_IsAcknowledgeFailed+0x3a>
 8003818:	68bb      	ldr	r3, [r7, #8]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d113      	bne.n	8003846 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003822:	f043 0220 	orr.w	r2, r3, #32
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	2220      	movs	r2, #32
 800382e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	2200      	movs	r2, #0
 8003836:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	2200      	movs	r2, #0
 800383e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8003842:	2301      	movs	r3, #1
 8003844:	e02e      	b.n	80038a4 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	699b      	ldr	r3, [r3, #24]
 800384c:	f003 0320 	and.w	r3, r3, #32
 8003850:	2b20      	cmp	r3, #32
 8003852:	d1d5      	bne.n	8003800 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	2210      	movs	r2, #16
 800385a:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	2220      	movs	r2, #32
 8003862:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003864:	68f8      	ldr	r0, [r7, #12]
 8003866:	f7ff fedd 	bl	8003624 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	6859      	ldr	r1, [r3, #4]
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681a      	ldr	r2, [r3, #0]
 8003874:	4b0d      	ldr	r3, [pc, #52]	; (80038ac <I2C_IsAcknowledgeFailed+0xc8>)
 8003876:	400b      	ands	r3, r1
 8003878:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800387e:	f043 0204 	orr.w	r2, r3, #4
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	2220      	movs	r2, #32
 800388a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	2200      	movs	r2, #0
 8003892:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	2200      	movs	r2, #0
 800389a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800389e:	2301      	movs	r3, #1
 80038a0:	e000      	b.n	80038a4 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 80038a2:	2300      	movs	r3, #0
}
 80038a4:	4618      	mov	r0, r3
 80038a6:	3710      	adds	r7, #16
 80038a8:	46bd      	mov	sp, r7
 80038aa:	bd80      	pop	{r7, pc}
 80038ac:	fe00e800 	.word	0xfe00e800

080038b0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80038b0:	b480      	push	{r7}
 80038b2:	b085      	sub	sp, #20
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	60f8      	str	r0, [r7, #12]
 80038b8:	607b      	str	r3, [r7, #4]
 80038ba:	460b      	mov	r3, r1
 80038bc:	817b      	strh	r3, [r7, #10]
 80038be:	4613      	mov	r3, r2
 80038c0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	685a      	ldr	r2, [r3, #4]
 80038c8:	69bb      	ldr	r3, [r7, #24]
 80038ca:	0d5b      	lsrs	r3, r3, #21
 80038cc:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80038d0:	4b0d      	ldr	r3, [pc, #52]	; (8003908 <I2C_TransferConfig+0x58>)
 80038d2:	430b      	orrs	r3, r1
 80038d4:	43db      	mvns	r3, r3
 80038d6:	ea02 0103 	and.w	r1, r2, r3
 80038da:	897b      	ldrh	r3, [r7, #10]
 80038dc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80038e0:	7a7b      	ldrb	r3, [r7, #9]
 80038e2:	041b      	lsls	r3, r3, #16
 80038e4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80038e8:	431a      	orrs	r2, r3
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	431a      	orrs	r2, r3
 80038ee:	69bb      	ldr	r3, [r7, #24]
 80038f0:	431a      	orrs	r2, r3
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	430a      	orrs	r2, r1
 80038f8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 80038fa:	bf00      	nop
 80038fc:	3714      	adds	r7, #20
 80038fe:	46bd      	mov	sp, r7
 8003900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003904:	4770      	bx	lr
 8003906:	bf00      	nop
 8003908:	03ff63ff 	.word	0x03ff63ff

0800390c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800390c:	b480      	push	{r7}
 800390e:	b083      	sub	sp, #12
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
 8003914:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800391c:	b2db      	uxtb	r3, r3
 800391e:	2b20      	cmp	r3, #32
 8003920:	d138      	bne.n	8003994 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003928:	2b01      	cmp	r3, #1
 800392a:	d101      	bne.n	8003930 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800392c:	2302      	movs	r3, #2
 800392e:	e032      	b.n	8003996 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2201      	movs	r2, #1
 8003934:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2224      	movs	r2, #36	; 0x24
 800393c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	681a      	ldr	r2, [r3, #0]
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f022 0201 	bic.w	r2, r2, #1
 800394e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	681a      	ldr	r2, [r3, #0]
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800395e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	6819      	ldr	r1, [r3, #0]
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	683a      	ldr	r2, [r7, #0]
 800396c:	430a      	orrs	r2, r1
 800396e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	681a      	ldr	r2, [r3, #0]
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f042 0201 	orr.w	r2, r2, #1
 800397e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2220      	movs	r2, #32
 8003984:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2200      	movs	r2, #0
 800398c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003990:	2300      	movs	r3, #0
 8003992:	e000      	b.n	8003996 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003994:	2302      	movs	r3, #2
  }
}
 8003996:	4618      	mov	r0, r3
 8003998:	370c      	adds	r7, #12
 800399a:	46bd      	mov	sp, r7
 800399c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a0:	4770      	bx	lr

080039a2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80039a2:	b480      	push	{r7}
 80039a4:	b085      	sub	sp, #20
 80039a6:	af00      	add	r7, sp, #0
 80039a8:	6078      	str	r0, [r7, #4]
 80039aa:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80039b2:	b2db      	uxtb	r3, r3
 80039b4:	2b20      	cmp	r3, #32
 80039b6:	d139      	bne.n	8003a2c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80039be:	2b01      	cmp	r3, #1
 80039c0:	d101      	bne.n	80039c6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80039c2:	2302      	movs	r3, #2
 80039c4:	e033      	b.n	8003a2e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2201      	movs	r2, #1
 80039ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2224      	movs	r2, #36	; 0x24
 80039d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	681a      	ldr	r2, [r3, #0]
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f022 0201 	bic.w	r2, r2, #1
 80039e4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80039f4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	021b      	lsls	r3, r3, #8
 80039fa:	68fa      	ldr	r2, [r7, #12]
 80039fc:	4313      	orrs	r3, r2
 80039fe:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	68fa      	ldr	r2, [r7, #12]
 8003a06:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	681a      	ldr	r2, [r3, #0]
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f042 0201 	orr.w	r2, r2, #1
 8003a16:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2220      	movs	r2, #32
 8003a1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2200      	movs	r2, #0
 8003a24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003a28:	2300      	movs	r3, #0
 8003a2a:	e000      	b.n	8003a2e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003a2c:	2302      	movs	r3, #2
  }
}
 8003a2e:	4618      	mov	r0, r3
 8003a30:	3714      	adds	r7, #20
 8003a32:	46bd      	mov	sp, r7
 8003a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a38:	4770      	bx	lr

08003a3a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003a3a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a3c:	b08f      	sub	sp, #60	; 0x3c
 8003a3e:	af0a      	add	r7, sp, #40	; 0x28
 8003a40:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d101      	bne.n	8003a4c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003a48:	2301      	movs	r3, #1
 8003a4a:	e116      	b.n	8003c7a <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8003a58:	b2db      	uxtb	r3, r3
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d106      	bne.n	8003a6c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2200      	movs	r2, #0
 8003a62:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003a66:	6878      	ldr	r0, [r7, #4]
 8003a68:	f7fe fa00 	bl	8001e6c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2203      	movs	r2, #3
 8003a70:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003a74:	68bb      	ldr	r3, [r7, #8]
 8003a76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d102      	bne.n	8003a86 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2200      	movs	r2, #0
 8003a84:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	f005 f83e 	bl	8008b0c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	603b      	str	r3, [r7, #0]
 8003a96:	687e      	ldr	r6, [r7, #4]
 8003a98:	466d      	mov	r5, sp
 8003a9a:	f106 0410 	add.w	r4, r6, #16
 8003a9e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003aa0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003aa2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003aa4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003aa6:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003aaa:	e885 0003 	stmia.w	r5, {r0, r1}
 8003aae:	1d33      	adds	r3, r6, #4
 8003ab0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003ab2:	6838      	ldr	r0, [r7, #0]
 8003ab4:	f004 fffe 	bl	8008ab4 <USB_CoreInit>
 8003ab8:	4603      	mov	r3, r0
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d005      	beq.n	8003aca <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2202      	movs	r2, #2
 8003ac2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	e0d7      	b.n	8003c7a <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	2100      	movs	r1, #0
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	f005 f82c 	bl	8008b2e <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	73fb      	strb	r3, [r7, #15]
 8003ada:	e04a      	b.n	8003b72 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003adc:	7bfa      	ldrb	r2, [r7, #15]
 8003ade:	6879      	ldr	r1, [r7, #4]
 8003ae0:	4613      	mov	r3, r2
 8003ae2:	00db      	lsls	r3, r3, #3
 8003ae4:	1a9b      	subs	r3, r3, r2
 8003ae6:	009b      	lsls	r3, r3, #2
 8003ae8:	440b      	add	r3, r1
 8003aea:	333d      	adds	r3, #61	; 0x3d
 8003aec:	2201      	movs	r2, #1
 8003aee:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003af0:	7bfa      	ldrb	r2, [r7, #15]
 8003af2:	6879      	ldr	r1, [r7, #4]
 8003af4:	4613      	mov	r3, r2
 8003af6:	00db      	lsls	r3, r3, #3
 8003af8:	1a9b      	subs	r3, r3, r2
 8003afa:	009b      	lsls	r3, r3, #2
 8003afc:	440b      	add	r3, r1
 8003afe:	333c      	adds	r3, #60	; 0x3c
 8003b00:	7bfa      	ldrb	r2, [r7, #15]
 8003b02:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003b04:	7bfa      	ldrb	r2, [r7, #15]
 8003b06:	7bfb      	ldrb	r3, [r7, #15]
 8003b08:	b298      	uxth	r0, r3
 8003b0a:	6879      	ldr	r1, [r7, #4]
 8003b0c:	4613      	mov	r3, r2
 8003b0e:	00db      	lsls	r3, r3, #3
 8003b10:	1a9b      	subs	r3, r3, r2
 8003b12:	009b      	lsls	r3, r3, #2
 8003b14:	440b      	add	r3, r1
 8003b16:	3342      	adds	r3, #66	; 0x42
 8003b18:	4602      	mov	r2, r0
 8003b1a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003b1c:	7bfa      	ldrb	r2, [r7, #15]
 8003b1e:	6879      	ldr	r1, [r7, #4]
 8003b20:	4613      	mov	r3, r2
 8003b22:	00db      	lsls	r3, r3, #3
 8003b24:	1a9b      	subs	r3, r3, r2
 8003b26:	009b      	lsls	r3, r3, #2
 8003b28:	440b      	add	r3, r1
 8003b2a:	333f      	adds	r3, #63	; 0x3f
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003b30:	7bfa      	ldrb	r2, [r7, #15]
 8003b32:	6879      	ldr	r1, [r7, #4]
 8003b34:	4613      	mov	r3, r2
 8003b36:	00db      	lsls	r3, r3, #3
 8003b38:	1a9b      	subs	r3, r3, r2
 8003b3a:	009b      	lsls	r3, r3, #2
 8003b3c:	440b      	add	r3, r1
 8003b3e:	3344      	adds	r3, #68	; 0x44
 8003b40:	2200      	movs	r2, #0
 8003b42:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003b44:	7bfa      	ldrb	r2, [r7, #15]
 8003b46:	6879      	ldr	r1, [r7, #4]
 8003b48:	4613      	mov	r3, r2
 8003b4a:	00db      	lsls	r3, r3, #3
 8003b4c:	1a9b      	subs	r3, r3, r2
 8003b4e:	009b      	lsls	r3, r3, #2
 8003b50:	440b      	add	r3, r1
 8003b52:	3348      	adds	r3, #72	; 0x48
 8003b54:	2200      	movs	r2, #0
 8003b56:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003b58:	7bfa      	ldrb	r2, [r7, #15]
 8003b5a:	6879      	ldr	r1, [r7, #4]
 8003b5c:	4613      	mov	r3, r2
 8003b5e:	00db      	lsls	r3, r3, #3
 8003b60:	1a9b      	subs	r3, r3, r2
 8003b62:	009b      	lsls	r3, r3, #2
 8003b64:	440b      	add	r3, r1
 8003b66:	3350      	adds	r3, #80	; 0x50
 8003b68:	2200      	movs	r2, #0
 8003b6a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b6c:	7bfb      	ldrb	r3, [r7, #15]
 8003b6e:	3301      	adds	r3, #1
 8003b70:	73fb      	strb	r3, [r7, #15]
 8003b72:	7bfa      	ldrb	r2, [r7, #15]
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	685b      	ldr	r3, [r3, #4]
 8003b78:	429a      	cmp	r2, r3
 8003b7a:	d3af      	bcc.n	8003adc <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	73fb      	strb	r3, [r7, #15]
 8003b80:	e044      	b.n	8003c0c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003b82:	7bfa      	ldrb	r2, [r7, #15]
 8003b84:	6879      	ldr	r1, [r7, #4]
 8003b86:	4613      	mov	r3, r2
 8003b88:	00db      	lsls	r3, r3, #3
 8003b8a:	1a9b      	subs	r3, r3, r2
 8003b8c:	009b      	lsls	r3, r3, #2
 8003b8e:	440b      	add	r3, r1
 8003b90:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8003b94:	2200      	movs	r2, #0
 8003b96:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003b98:	7bfa      	ldrb	r2, [r7, #15]
 8003b9a:	6879      	ldr	r1, [r7, #4]
 8003b9c:	4613      	mov	r3, r2
 8003b9e:	00db      	lsls	r3, r3, #3
 8003ba0:	1a9b      	subs	r3, r3, r2
 8003ba2:	009b      	lsls	r3, r3, #2
 8003ba4:	440b      	add	r3, r1
 8003ba6:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8003baa:	7bfa      	ldrb	r2, [r7, #15]
 8003bac:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003bae:	7bfa      	ldrb	r2, [r7, #15]
 8003bb0:	6879      	ldr	r1, [r7, #4]
 8003bb2:	4613      	mov	r3, r2
 8003bb4:	00db      	lsls	r3, r3, #3
 8003bb6:	1a9b      	subs	r3, r3, r2
 8003bb8:	009b      	lsls	r3, r3, #2
 8003bba:	440b      	add	r3, r1
 8003bbc:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003bc4:	7bfa      	ldrb	r2, [r7, #15]
 8003bc6:	6879      	ldr	r1, [r7, #4]
 8003bc8:	4613      	mov	r3, r2
 8003bca:	00db      	lsls	r3, r3, #3
 8003bcc:	1a9b      	subs	r3, r3, r2
 8003bce:	009b      	lsls	r3, r3, #2
 8003bd0:	440b      	add	r3, r1
 8003bd2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003bda:	7bfa      	ldrb	r2, [r7, #15]
 8003bdc:	6879      	ldr	r1, [r7, #4]
 8003bde:	4613      	mov	r3, r2
 8003be0:	00db      	lsls	r3, r3, #3
 8003be2:	1a9b      	subs	r3, r3, r2
 8003be4:	009b      	lsls	r3, r3, #2
 8003be6:	440b      	add	r3, r1
 8003be8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003bec:	2200      	movs	r2, #0
 8003bee:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003bf0:	7bfa      	ldrb	r2, [r7, #15]
 8003bf2:	6879      	ldr	r1, [r7, #4]
 8003bf4:	4613      	mov	r3, r2
 8003bf6:	00db      	lsls	r3, r3, #3
 8003bf8:	1a9b      	subs	r3, r3, r2
 8003bfa:	009b      	lsls	r3, r3, #2
 8003bfc:	440b      	add	r3, r1
 8003bfe:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003c02:	2200      	movs	r2, #0
 8003c04:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003c06:	7bfb      	ldrb	r3, [r7, #15]
 8003c08:	3301      	adds	r3, #1
 8003c0a:	73fb      	strb	r3, [r7, #15]
 8003c0c:	7bfa      	ldrb	r2, [r7, #15]
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	685b      	ldr	r3, [r3, #4]
 8003c12:	429a      	cmp	r2, r3
 8003c14:	d3b5      	bcc.n	8003b82 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	603b      	str	r3, [r7, #0]
 8003c1c:	687e      	ldr	r6, [r7, #4]
 8003c1e:	466d      	mov	r5, sp
 8003c20:	f106 0410 	add.w	r4, r6, #16
 8003c24:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003c26:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003c28:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003c2a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003c2c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003c30:	e885 0003 	stmia.w	r5, {r0, r1}
 8003c34:	1d33      	adds	r3, r6, #4
 8003c36:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003c38:	6838      	ldr	r0, [r7, #0]
 8003c3a:	f004 ffa3 	bl	8008b84 <USB_DevInit>
 8003c3e:	4603      	mov	r3, r0
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d005      	beq.n	8003c50 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2202      	movs	r2, #2
 8003c48:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003c4c:	2301      	movs	r3, #1
 8003c4e:	e014      	b.n	8003c7a <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2200      	movs	r2, #0
 8003c54:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2201      	movs	r2, #1
 8003c5c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c64:	2b01      	cmp	r3, #1
 8003c66:	d102      	bne.n	8003c6e <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003c68:	6878      	ldr	r0, [r7, #4]
 8003c6a:	f000 f80a 	bl	8003c82 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	4618      	mov	r0, r3
 8003c74:	f005 f933 	bl	8008ede <USB_DevDisconnect>

  return HAL_OK;
 8003c78:	2300      	movs	r3, #0
}
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	3714      	adds	r7, #20
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003c82 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003c82:	b480      	push	{r7}
 8003c84:	b085      	sub	sp, #20
 8003c86:	af00      	add	r7, sp, #0
 8003c88:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2201      	movs	r2, #1
 8003c94:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	699b      	ldr	r3, [r3, #24]
 8003ca4:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cb4:	f043 0303 	orr.w	r3, r3, #3
 8003cb8:	68fa      	ldr	r2, [r7, #12]
 8003cba:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8003cbc:	2300      	movs	r3, #0
}
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	3714      	adds	r7, #20
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc8:	4770      	bx	lr
	...

08003ccc <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003ccc:	b480      	push	{r7}
 8003cce:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003cd0:	4b05      	ldr	r3, [pc, #20]	; (8003ce8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	4a04      	ldr	r2, [pc, #16]	; (8003ce8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003cd6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cda:	6013      	str	r3, [r2, #0]
}
 8003cdc:	bf00      	nop
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce4:	4770      	bx	lr
 8003ce6:	bf00      	nop
 8003ce8:	40007000 	.word	0x40007000

08003cec <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003cec:	b480      	push	{r7}
 8003cee:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003cf0:	4b04      	ldr	r3, [pc, #16]	; (8003d04 <HAL_PWREx_GetVoltageRange+0x18>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d00:	4770      	bx	lr
 8003d02:	bf00      	nop
 8003d04:	40007000 	.word	0x40007000

08003d08 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003d08:	b480      	push	{r7}
 8003d0a:	b085      	sub	sp, #20
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d16:	d130      	bne.n	8003d7a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003d18:	4b23      	ldr	r3, [pc, #140]	; (8003da8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003d20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d24:	d038      	beq.n	8003d98 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003d26:	4b20      	ldr	r3, [pc, #128]	; (8003da8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003d2e:	4a1e      	ldr	r2, [pc, #120]	; (8003da8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d30:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003d34:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003d36:	4b1d      	ldr	r3, [pc, #116]	; (8003dac <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	2232      	movs	r2, #50	; 0x32
 8003d3c:	fb02 f303 	mul.w	r3, r2, r3
 8003d40:	4a1b      	ldr	r2, [pc, #108]	; (8003db0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003d42:	fba2 2303 	umull	r2, r3, r2, r3
 8003d46:	0c9b      	lsrs	r3, r3, #18
 8003d48:	3301      	adds	r3, #1
 8003d4a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003d4c:	e002      	b.n	8003d54 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	3b01      	subs	r3, #1
 8003d52:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003d54:	4b14      	ldr	r3, [pc, #80]	; (8003da8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d56:	695b      	ldr	r3, [r3, #20]
 8003d58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d60:	d102      	bne.n	8003d68 <HAL_PWREx_ControlVoltageScaling+0x60>
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d1f2      	bne.n	8003d4e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003d68:	4b0f      	ldr	r3, [pc, #60]	; (8003da8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d6a:	695b      	ldr	r3, [r3, #20]
 8003d6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d74:	d110      	bne.n	8003d98 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003d76:	2303      	movs	r3, #3
 8003d78:	e00f      	b.n	8003d9a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003d7a:	4b0b      	ldr	r3, [pc, #44]	; (8003da8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003d82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d86:	d007      	beq.n	8003d98 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003d88:	4b07      	ldr	r3, [pc, #28]	; (8003da8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003d90:	4a05      	ldr	r2, [pc, #20]	; (8003da8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d92:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003d96:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003d98:	2300      	movs	r3, #0
}
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	3714      	adds	r7, #20
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da4:	4770      	bx	lr
 8003da6:	bf00      	nop
 8003da8:	40007000 	.word	0x40007000
 8003dac:	20000004 	.word	0x20000004
 8003db0:	431bde83 	.word	0x431bde83

08003db4 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8003db4:	b480      	push	{r7}
 8003db6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8003db8:	4b05      	ldr	r3, [pc, #20]	; (8003dd0 <HAL_PWREx_EnableVddUSB+0x1c>)
 8003dba:	685b      	ldr	r3, [r3, #4]
 8003dbc:	4a04      	ldr	r2, [pc, #16]	; (8003dd0 <HAL_PWREx_EnableVddUSB+0x1c>)
 8003dbe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003dc2:	6053      	str	r3, [r2, #4]
}
 8003dc4:	bf00      	nop
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dcc:	4770      	bx	lr
 8003dce:	bf00      	nop
 8003dd0:	40007000 	.word	0x40007000

08003dd4 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b086      	sub	sp, #24
 8003dd8:	af02      	add	r7, sp, #8
 8003dda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8003ddc:	f7fe fad8 	bl	8002390 <HAL_GetTick>
 8003de0:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d101      	bne.n	8003dec <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8003de8:	2301      	movs	r3, #1
 8003dea:	e063      	b.n	8003eb4 <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003df2:	b2db      	uxtb	r3, r3
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d10b      	bne.n	8003e10 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8003e00:	6878      	ldr	r0, [r7, #4]
 8003e02:	f7fd fe7d 	bl	8001b00 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8003e06:	f241 3188 	movw	r1, #5000	; 0x1388
 8003e0a:	6878      	ldr	r0, [r7, #4]
 8003e0c:	f000 f858 	bl	8003ec0 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	689b      	ldr	r3, [r3, #8]
 8003e1e:	3b01      	subs	r3, #1
 8003e20:	021a      	lsls	r2, r3, #8
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	430a      	orrs	r2, r1
 8003e28:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e2e:	9300      	str	r3, [sp, #0]
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	2200      	movs	r2, #0
 8003e34:	2120      	movs	r1, #32
 8003e36:	6878      	ldr	r0, [r7, #4]
 8003e38:	f000 f850 	bl	8003edc <QSPI_WaitFlagStateUntilTimeout>
 8003e3c:	4603      	mov	r3, r0
 8003e3e:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8003e40:	7afb      	ldrb	r3, [r7, #11]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d131      	bne.n	8003eaa <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003e50:	f023 0310 	bic.w	r3, r3, #16
 8003e54:	687a      	ldr	r2, [r7, #4]
 8003e56:	6852      	ldr	r2, [r2, #4]
 8003e58:	0611      	lsls	r1, r2, #24
 8003e5a:	687a      	ldr	r2, [r7, #4]
 8003e5c:	68d2      	ldr	r2, [r2, #12]
 8003e5e:	4311      	orrs	r1, r2
 8003e60:	687a      	ldr	r2, [r7, #4]
 8003e62:	6812      	ldr	r2, [r2, #0]
 8003e64:	430b      	orrs	r3, r1
 8003e66:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	685a      	ldr	r2, [r3, #4]
 8003e6e:	4b13      	ldr	r3, [pc, #76]	; (8003ebc <HAL_QSPI_Init+0xe8>)
 8003e70:	4013      	ands	r3, r2
 8003e72:	687a      	ldr	r2, [r7, #4]
 8003e74:	6912      	ldr	r2, [r2, #16]
 8003e76:	0411      	lsls	r1, r2, #16
 8003e78:	687a      	ldr	r2, [r7, #4]
 8003e7a:	6952      	ldr	r2, [r2, #20]
 8003e7c:	4311      	orrs	r1, r2
 8003e7e:	687a      	ldr	r2, [r7, #4]
 8003e80:	6992      	ldr	r2, [r2, #24]
 8003e82:	4311      	orrs	r1, r2
 8003e84:	687a      	ldr	r2, [r7, #4]
 8003e86:	6812      	ldr	r2, [r2, #0]
 8003e88:	430b      	orrs	r3, r1
 8003e8a:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	681a      	ldr	r2, [r3, #0]
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f042 0201 	orr.w	r2, r2, #1
 8003e9a:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2201      	movs	r2, #1
 8003ea6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2200      	movs	r2, #0
 8003eae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 8003eb2:	7afb      	ldrb	r3, [r7, #11]
}
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	3710      	adds	r7, #16
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	bd80      	pop	{r7, pc}
 8003ebc:	ffe0f8fe 	.word	0xffe0f8fe

08003ec0 <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8003ec0:	b480      	push	{r7}
 8003ec2:	b083      	sub	sp, #12
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
 8003ec8:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	683a      	ldr	r2, [r7, #0]
 8003ece:	641a      	str	r2, [r3, #64]	; 0x40
}
 8003ed0:	bf00      	nop
 8003ed2:	370c      	adds	r7, #12
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eda:	4770      	bx	lr

08003edc <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b084      	sub	sp, #16
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	60f8      	str	r0, [r7, #12]
 8003ee4:	60b9      	str	r1, [r7, #8]
 8003ee6:	603b      	str	r3, [r7, #0]
 8003ee8:	4613      	mov	r3, r2
 8003eea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8003eec:	e01a      	b.n	8003f24 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003eee:	69bb      	ldr	r3, [r7, #24]
 8003ef0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ef4:	d016      	beq.n	8003f24 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ef6:	f7fe fa4b 	bl	8002390 <HAL_GetTick>
 8003efa:	4602      	mov	r2, r0
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	1ad3      	subs	r3, r2, r3
 8003f00:	69ba      	ldr	r2, [r7, #24]
 8003f02:	429a      	cmp	r2, r3
 8003f04:	d302      	bcc.n	8003f0c <QSPI_WaitFlagStateUntilTimeout+0x30>
 8003f06:	69bb      	ldr	r3, [r7, #24]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d10b      	bne.n	8003f24 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	2204      	movs	r2, #4
 8003f10:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f18:	f043 0201 	orr.w	r2, r3, #1
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	63da      	str	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003f20:	2301      	movs	r3, #1
 8003f22:	e00e      	b.n	8003f42 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	689a      	ldr	r2, [r3, #8]
 8003f2a:	68bb      	ldr	r3, [r7, #8]
 8003f2c:	4013      	ands	r3, r2
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	bf14      	ite	ne
 8003f32:	2301      	movne	r3, #1
 8003f34:	2300      	moveq	r3, #0
 8003f36:	b2db      	uxtb	r3, r3
 8003f38:	461a      	mov	r2, r3
 8003f3a:	79fb      	ldrb	r3, [r7, #7]
 8003f3c:	429a      	cmp	r2, r3
 8003f3e:	d1d6      	bne.n	8003eee <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003f40:	2300      	movs	r3, #0
}
 8003f42:	4618      	mov	r0, r3
 8003f44:	3710      	adds	r7, #16
 8003f46:	46bd      	mov	sp, r7
 8003f48:	bd80      	pop	{r7, pc}
	...

08003f4c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b088      	sub	sp, #32
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d101      	bne.n	8003f5e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	e3d8      	b.n	8004710 <HAL_RCC_OscConfig+0x7c4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003f5e:	4b97      	ldr	r3, [pc, #604]	; (80041bc <HAL_RCC_OscConfig+0x270>)
 8003f60:	689b      	ldr	r3, [r3, #8]
 8003f62:	f003 030c 	and.w	r3, r3, #12
 8003f66:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003f68:	4b94      	ldr	r3, [pc, #592]	; (80041bc <HAL_RCC_OscConfig+0x270>)
 8003f6a:	68db      	ldr	r3, [r3, #12]
 8003f6c:	f003 0303 	and.w	r3, r3, #3
 8003f70:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f003 0310 	and.w	r3, r3, #16
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	f000 80e4 	beq.w	8004148 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003f80:	69bb      	ldr	r3, [r7, #24]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d007      	beq.n	8003f96 <HAL_RCC_OscConfig+0x4a>
 8003f86:	69bb      	ldr	r3, [r7, #24]
 8003f88:	2b0c      	cmp	r3, #12
 8003f8a:	f040 808b 	bne.w	80040a4 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003f8e:	697b      	ldr	r3, [r7, #20]
 8003f90:	2b01      	cmp	r3, #1
 8003f92:	f040 8087 	bne.w	80040a4 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003f96:	4b89      	ldr	r3, [pc, #548]	; (80041bc <HAL_RCC_OscConfig+0x270>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f003 0302 	and.w	r3, r3, #2
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d005      	beq.n	8003fae <HAL_RCC_OscConfig+0x62>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	699b      	ldr	r3, [r3, #24]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d101      	bne.n	8003fae <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003faa:	2301      	movs	r3, #1
 8003fac:	e3b0      	b.n	8004710 <HAL_RCC_OscConfig+0x7c4>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6a1a      	ldr	r2, [r3, #32]
 8003fb2:	4b82      	ldr	r3, [pc, #520]	; (80041bc <HAL_RCC_OscConfig+0x270>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f003 0308 	and.w	r3, r3, #8
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d004      	beq.n	8003fc8 <HAL_RCC_OscConfig+0x7c>
 8003fbe:	4b7f      	ldr	r3, [pc, #508]	; (80041bc <HAL_RCC_OscConfig+0x270>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003fc6:	e005      	b.n	8003fd4 <HAL_RCC_OscConfig+0x88>
 8003fc8:	4b7c      	ldr	r3, [pc, #496]	; (80041bc <HAL_RCC_OscConfig+0x270>)
 8003fca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003fce:	091b      	lsrs	r3, r3, #4
 8003fd0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	d223      	bcs.n	8004020 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6a1b      	ldr	r3, [r3, #32]
 8003fdc:	4618      	mov	r0, r3
 8003fde:	f000 fd75 	bl	8004acc <RCC_SetFlashLatencyFromMSIRange>
 8003fe2:	4603      	mov	r3, r0
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d001      	beq.n	8003fec <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003fe8:	2301      	movs	r3, #1
 8003fea:	e391      	b.n	8004710 <HAL_RCC_OscConfig+0x7c4>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003fec:	4b73      	ldr	r3, [pc, #460]	; (80041bc <HAL_RCC_OscConfig+0x270>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	4a72      	ldr	r2, [pc, #456]	; (80041bc <HAL_RCC_OscConfig+0x270>)
 8003ff2:	f043 0308 	orr.w	r3, r3, #8
 8003ff6:	6013      	str	r3, [r2, #0]
 8003ff8:	4b70      	ldr	r3, [pc, #448]	; (80041bc <HAL_RCC_OscConfig+0x270>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6a1b      	ldr	r3, [r3, #32]
 8004004:	496d      	ldr	r1, [pc, #436]	; (80041bc <HAL_RCC_OscConfig+0x270>)
 8004006:	4313      	orrs	r3, r2
 8004008:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800400a:	4b6c      	ldr	r3, [pc, #432]	; (80041bc <HAL_RCC_OscConfig+0x270>)
 800400c:	685b      	ldr	r3, [r3, #4]
 800400e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	69db      	ldr	r3, [r3, #28]
 8004016:	021b      	lsls	r3, r3, #8
 8004018:	4968      	ldr	r1, [pc, #416]	; (80041bc <HAL_RCC_OscConfig+0x270>)
 800401a:	4313      	orrs	r3, r2
 800401c:	604b      	str	r3, [r1, #4]
 800401e:	e025      	b.n	800406c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004020:	4b66      	ldr	r3, [pc, #408]	; (80041bc <HAL_RCC_OscConfig+0x270>)
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	4a65      	ldr	r2, [pc, #404]	; (80041bc <HAL_RCC_OscConfig+0x270>)
 8004026:	f043 0308 	orr.w	r3, r3, #8
 800402a:	6013      	str	r3, [r2, #0]
 800402c:	4b63      	ldr	r3, [pc, #396]	; (80041bc <HAL_RCC_OscConfig+0x270>)
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6a1b      	ldr	r3, [r3, #32]
 8004038:	4960      	ldr	r1, [pc, #384]	; (80041bc <HAL_RCC_OscConfig+0x270>)
 800403a:	4313      	orrs	r3, r2
 800403c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800403e:	4b5f      	ldr	r3, [pc, #380]	; (80041bc <HAL_RCC_OscConfig+0x270>)
 8004040:	685b      	ldr	r3, [r3, #4]
 8004042:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	69db      	ldr	r3, [r3, #28]
 800404a:	021b      	lsls	r3, r3, #8
 800404c:	495b      	ldr	r1, [pc, #364]	; (80041bc <HAL_RCC_OscConfig+0x270>)
 800404e:	4313      	orrs	r3, r2
 8004050:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004052:	69bb      	ldr	r3, [r7, #24]
 8004054:	2b00      	cmp	r3, #0
 8004056:	d109      	bne.n	800406c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6a1b      	ldr	r3, [r3, #32]
 800405c:	4618      	mov	r0, r3
 800405e:	f000 fd35 	bl	8004acc <RCC_SetFlashLatencyFromMSIRange>
 8004062:	4603      	mov	r3, r0
 8004064:	2b00      	cmp	r3, #0
 8004066:	d001      	beq.n	800406c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8004068:	2301      	movs	r3, #1
 800406a:	e351      	b.n	8004710 <HAL_RCC_OscConfig+0x7c4>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800406c:	f000 fc38 	bl	80048e0 <HAL_RCC_GetSysClockFreq>
 8004070:	4602      	mov	r2, r0
 8004072:	4b52      	ldr	r3, [pc, #328]	; (80041bc <HAL_RCC_OscConfig+0x270>)
 8004074:	689b      	ldr	r3, [r3, #8]
 8004076:	091b      	lsrs	r3, r3, #4
 8004078:	f003 030f 	and.w	r3, r3, #15
 800407c:	4950      	ldr	r1, [pc, #320]	; (80041c0 <HAL_RCC_OscConfig+0x274>)
 800407e:	5ccb      	ldrb	r3, [r1, r3]
 8004080:	f003 031f 	and.w	r3, r3, #31
 8004084:	fa22 f303 	lsr.w	r3, r2, r3
 8004088:	4a4e      	ldr	r2, [pc, #312]	; (80041c4 <HAL_RCC_OscConfig+0x278>)
 800408a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800408c:	4b4e      	ldr	r3, [pc, #312]	; (80041c8 <HAL_RCC_OscConfig+0x27c>)
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	4618      	mov	r0, r3
 8004092:	f7fd ff87 	bl	8001fa4 <HAL_InitTick>
 8004096:	4603      	mov	r3, r0
 8004098:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800409a:	7bfb      	ldrb	r3, [r7, #15]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d052      	beq.n	8004146 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80040a0:	7bfb      	ldrb	r3, [r7, #15]
 80040a2:	e335      	b.n	8004710 <HAL_RCC_OscConfig+0x7c4>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	699b      	ldr	r3, [r3, #24]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d032      	beq.n	8004112 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80040ac:	4b43      	ldr	r3, [pc, #268]	; (80041bc <HAL_RCC_OscConfig+0x270>)
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	4a42      	ldr	r2, [pc, #264]	; (80041bc <HAL_RCC_OscConfig+0x270>)
 80040b2:	f043 0301 	orr.w	r3, r3, #1
 80040b6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80040b8:	f7fe f96a 	bl	8002390 <HAL_GetTick>
 80040bc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80040be:	e008      	b.n	80040d2 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80040c0:	f7fe f966 	bl	8002390 <HAL_GetTick>
 80040c4:	4602      	mov	r2, r0
 80040c6:	693b      	ldr	r3, [r7, #16]
 80040c8:	1ad3      	subs	r3, r2, r3
 80040ca:	2b02      	cmp	r3, #2
 80040cc:	d901      	bls.n	80040d2 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80040ce:	2303      	movs	r3, #3
 80040d0:	e31e      	b.n	8004710 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80040d2:	4b3a      	ldr	r3, [pc, #232]	; (80041bc <HAL_RCC_OscConfig+0x270>)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f003 0302 	and.w	r3, r3, #2
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d0f0      	beq.n	80040c0 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80040de:	4b37      	ldr	r3, [pc, #220]	; (80041bc <HAL_RCC_OscConfig+0x270>)
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	4a36      	ldr	r2, [pc, #216]	; (80041bc <HAL_RCC_OscConfig+0x270>)
 80040e4:	f043 0308 	orr.w	r3, r3, #8
 80040e8:	6013      	str	r3, [r2, #0]
 80040ea:	4b34      	ldr	r3, [pc, #208]	; (80041bc <HAL_RCC_OscConfig+0x270>)
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6a1b      	ldr	r3, [r3, #32]
 80040f6:	4931      	ldr	r1, [pc, #196]	; (80041bc <HAL_RCC_OscConfig+0x270>)
 80040f8:	4313      	orrs	r3, r2
 80040fa:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80040fc:	4b2f      	ldr	r3, [pc, #188]	; (80041bc <HAL_RCC_OscConfig+0x270>)
 80040fe:	685b      	ldr	r3, [r3, #4]
 8004100:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	69db      	ldr	r3, [r3, #28]
 8004108:	021b      	lsls	r3, r3, #8
 800410a:	492c      	ldr	r1, [pc, #176]	; (80041bc <HAL_RCC_OscConfig+0x270>)
 800410c:	4313      	orrs	r3, r2
 800410e:	604b      	str	r3, [r1, #4]
 8004110:	e01a      	b.n	8004148 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004112:	4b2a      	ldr	r3, [pc, #168]	; (80041bc <HAL_RCC_OscConfig+0x270>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	4a29      	ldr	r2, [pc, #164]	; (80041bc <HAL_RCC_OscConfig+0x270>)
 8004118:	f023 0301 	bic.w	r3, r3, #1
 800411c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800411e:	f7fe f937 	bl	8002390 <HAL_GetTick>
 8004122:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004124:	e008      	b.n	8004138 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004126:	f7fe f933 	bl	8002390 <HAL_GetTick>
 800412a:	4602      	mov	r2, r0
 800412c:	693b      	ldr	r3, [r7, #16]
 800412e:	1ad3      	subs	r3, r2, r3
 8004130:	2b02      	cmp	r3, #2
 8004132:	d901      	bls.n	8004138 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8004134:	2303      	movs	r3, #3
 8004136:	e2eb      	b.n	8004710 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004138:	4b20      	ldr	r3, [pc, #128]	; (80041bc <HAL_RCC_OscConfig+0x270>)
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f003 0302 	and.w	r3, r3, #2
 8004140:	2b00      	cmp	r3, #0
 8004142:	d1f0      	bne.n	8004126 <HAL_RCC_OscConfig+0x1da>
 8004144:	e000      	b.n	8004148 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004146:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f003 0301 	and.w	r3, r3, #1
 8004150:	2b00      	cmp	r3, #0
 8004152:	d074      	beq.n	800423e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004154:	69bb      	ldr	r3, [r7, #24]
 8004156:	2b08      	cmp	r3, #8
 8004158:	d005      	beq.n	8004166 <HAL_RCC_OscConfig+0x21a>
 800415a:	69bb      	ldr	r3, [r7, #24]
 800415c:	2b0c      	cmp	r3, #12
 800415e:	d10e      	bne.n	800417e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004160:	697b      	ldr	r3, [r7, #20]
 8004162:	2b03      	cmp	r3, #3
 8004164:	d10b      	bne.n	800417e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004166:	4b15      	ldr	r3, [pc, #84]	; (80041bc <HAL_RCC_OscConfig+0x270>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800416e:	2b00      	cmp	r3, #0
 8004170:	d064      	beq.n	800423c <HAL_RCC_OscConfig+0x2f0>
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	685b      	ldr	r3, [r3, #4]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d160      	bne.n	800423c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800417a:	2301      	movs	r3, #1
 800417c:	e2c8      	b.n	8004710 <HAL_RCC_OscConfig+0x7c4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	685b      	ldr	r3, [r3, #4]
 8004182:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004186:	d106      	bne.n	8004196 <HAL_RCC_OscConfig+0x24a>
 8004188:	4b0c      	ldr	r3, [pc, #48]	; (80041bc <HAL_RCC_OscConfig+0x270>)
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	4a0b      	ldr	r2, [pc, #44]	; (80041bc <HAL_RCC_OscConfig+0x270>)
 800418e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004192:	6013      	str	r3, [r2, #0]
 8004194:	e026      	b.n	80041e4 <HAL_RCC_OscConfig+0x298>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	685b      	ldr	r3, [r3, #4]
 800419a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800419e:	d115      	bne.n	80041cc <HAL_RCC_OscConfig+0x280>
 80041a0:	4b06      	ldr	r3, [pc, #24]	; (80041bc <HAL_RCC_OscConfig+0x270>)
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	4a05      	ldr	r2, [pc, #20]	; (80041bc <HAL_RCC_OscConfig+0x270>)
 80041a6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80041aa:	6013      	str	r3, [r2, #0]
 80041ac:	4b03      	ldr	r3, [pc, #12]	; (80041bc <HAL_RCC_OscConfig+0x270>)
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	4a02      	ldr	r2, [pc, #8]	; (80041bc <HAL_RCC_OscConfig+0x270>)
 80041b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041b6:	6013      	str	r3, [r2, #0]
 80041b8:	e014      	b.n	80041e4 <HAL_RCC_OscConfig+0x298>
 80041ba:	bf00      	nop
 80041bc:	40021000 	.word	0x40021000
 80041c0:	08010110 	.word	0x08010110
 80041c4:	20000004 	.word	0x20000004
 80041c8:	20000008 	.word	0x20000008
 80041cc:	4ba0      	ldr	r3, [pc, #640]	; (8004450 <HAL_RCC_OscConfig+0x504>)
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	4a9f      	ldr	r2, [pc, #636]	; (8004450 <HAL_RCC_OscConfig+0x504>)
 80041d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80041d6:	6013      	str	r3, [r2, #0]
 80041d8:	4b9d      	ldr	r3, [pc, #628]	; (8004450 <HAL_RCC_OscConfig+0x504>)
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	4a9c      	ldr	r2, [pc, #624]	; (8004450 <HAL_RCC_OscConfig+0x504>)
 80041de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80041e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	685b      	ldr	r3, [r3, #4]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d013      	beq.n	8004214 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041ec:	f7fe f8d0 	bl	8002390 <HAL_GetTick>
 80041f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80041f2:	e008      	b.n	8004206 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80041f4:	f7fe f8cc 	bl	8002390 <HAL_GetTick>
 80041f8:	4602      	mov	r2, r0
 80041fa:	693b      	ldr	r3, [r7, #16]
 80041fc:	1ad3      	subs	r3, r2, r3
 80041fe:	2b64      	cmp	r3, #100	; 0x64
 8004200:	d901      	bls.n	8004206 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004202:	2303      	movs	r3, #3
 8004204:	e284      	b.n	8004710 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004206:	4b92      	ldr	r3, [pc, #584]	; (8004450 <HAL_RCC_OscConfig+0x504>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800420e:	2b00      	cmp	r3, #0
 8004210:	d0f0      	beq.n	80041f4 <HAL_RCC_OscConfig+0x2a8>
 8004212:	e014      	b.n	800423e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004214:	f7fe f8bc 	bl	8002390 <HAL_GetTick>
 8004218:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800421a:	e008      	b.n	800422e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800421c:	f7fe f8b8 	bl	8002390 <HAL_GetTick>
 8004220:	4602      	mov	r2, r0
 8004222:	693b      	ldr	r3, [r7, #16]
 8004224:	1ad3      	subs	r3, r2, r3
 8004226:	2b64      	cmp	r3, #100	; 0x64
 8004228:	d901      	bls.n	800422e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800422a:	2303      	movs	r3, #3
 800422c:	e270      	b.n	8004710 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800422e:	4b88      	ldr	r3, [pc, #544]	; (8004450 <HAL_RCC_OscConfig+0x504>)
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004236:	2b00      	cmp	r3, #0
 8004238:	d1f0      	bne.n	800421c <HAL_RCC_OscConfig+0x2d0>
 800423a:	e000      	b.n	800423e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800423c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f003 0302 	and.w	r3, r3, #2
 8004246:	2b00      	cmp	r3, #0
 8004248:	d060      	beq.n	800430c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800424a:	69bb      	ldr	r3, [r7, #24]
 800424c:	2b04      	cmp	r3, #4
 800424e:	d005      	beq.n	800425c <HAL_RCC_OscConfig+0x310>
 8004250:	69bb      	ldr	r3, [r7, #24]
 8004252:	2b0c      	cmp	r3, #12
 8004254:	d119      	bne.n	800428a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004256:	697b      	ldr	r3, [r7, #20]
 8004258:	2b02      	cmp	r3, #2
 800425a:	d116      	bne.n	800428a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800425c:	4b7c      	ldr	r3, [pc, #496]	; (8004450 <HAL_RCC_OscConfig+0x504>)
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004264:	2b00      	cmp	r3, #0
 8004266:	d005      	beq.n	8004274 <HAL_RCC_OscConfig+0x328>
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	68db      	ldr	r3, [r3, #12]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d101      	bne.n	8004274 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004270:	2301      	movs	r3, #1
 8004272:	e24d      	b.n	8004710 <HAL_RCC_OscConfig+0x7c4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004274:	4b76      	ldr	r3, [pc, #472]	; (8004450 <HAL_RCC_OscConfig+0x504>)
 8004276:	685b      	ldr	r3, [r3, #4]
 8004278:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	691b      	ldr	r3, [r3, #16]
 8004280:	061b      	lsls	r3, r3, #24
 8004282:	4973      	ldr	r1, [pc, #460]	; (8004450 <HAL_RCC_OscConfig+0x504>)
 8004284:	4313      	orrs	r3, r2
 8004286:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004288:	e040      	b.n	800430c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	68db      	ldr	r3, [r3, #12]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d023      	beq.n	80042da <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004292:	4b6f      	ldr	r3, [pc, #444]	; (8004450 <HAL_RCC_OscConfig+0x504>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	4a6e      	ldr	r2, [pc, #440]	; (8004450 <HAL_RCC_OscConfig+0x504>)
 8004298:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800429c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800429e:	f7fe f877 	bl	8002390 <HAL_GetTick>
 80042a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80042a4:	e008      	b.n	80042b8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80042a6:	f7fe f873 	bl	8002390 <HAL_GetTick>
 80042aa:	4602      	mov	r2, r0
 80042ac:	693b      	ldr	r3, [r7, #16]
 80042ae:	1ad3      	subs	r3, r2, r3
 80042b0:	2b02      	cmp	r3, #2
 80042b2:	d901      	bls.n	80042b8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80042b4:	2303      	movs	r3, #3
 80042b6:	e22b      	b.n	8004710 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80042b8:	4b65      	ldr	r3, [pc, #404]	; (8004450 <HAL_RCC_OscConfig+0x504>)
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d0f0      	beq.n	80042a6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042c4:	4b62      	ldr	r3, [pc, #392]	; (8004450 <HAL_RCC_OscConfig+0x504>)
 80042c6:	685b      	ldr	r3, [r3, #4]
 80042c8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	691b      	ldr	r3, [r3, #16]
 80042d0:	061b      	lsls	r3, r3, #24
 80042d2:	495f      	ldr	r1, [pc, #380]	; (8004450 <HAL_RCC_OscConfig+0x504>)
 80042d4:	4313      	orrs	r3, r2
 80042d6:	604b      	str	r3, [r1, #4]
 80042d8:	e018      	b.n	800430c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80042da:	4b5d      	ldr	r3, [pc, #372]	; (8004450 <HAL_RCC_OscConfig+0x504>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	4a5c      	ldr	r2, [pc, #368]	; (8004450 <HAL_RCC_OscConfig+0x504>)
 80042e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80042e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042e6:	f7fe f853 	bl	8002390 <HAL_GetTick>
 80042ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80042ec:	e008      	b.n	8004300 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80042ee:	f7fe f84f 	bl	8002390 <HAL_GetTick>
 80042f2:	4602      	mov	r2, r0
 80042f4:	693b      	ldr	r3, [r7, #16]
 80042f6:	1ad3      	subs	r3, r2, r3
 80042f8:	2b02      	cmp	r3, #2
 80042fa:	d901      	bls.n	8004300 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80042fc:	2303      	movs	r3, #3
 80042fe:	e207      	b.n	8004710 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004300:	4b53      	ldr	r3, [pc, #332]	; (8004450 <HAL_RCC_OscConfig+0x504>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004308:	2b00      	cmp	r3, #0
 800430a:	d1f0      	bne.n	80042ee <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f003 0308 	and.w	r3, r3, #8
 8004314:	2b00      	cmp	r3, #0
 8004316:	d03c      	beq.n	8004392 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	695b      	ldr	r3, [r3, #20]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d01c      	beq.n	800435a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004320:	4b4b      	ldr	r3, [pc, #300]	; (8004450 <HAL_RCC_OscConfig+0x504>)
 8004322:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004326:	4a4a      	ldr	r2, [pc, #296]	; (8004450 <HAL_RCC_OscConfig+0x504>)
 8004328:	f043 0301 	orr.w	r3, r3, #1
 800432c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004330:	f7fe f82e 	bl	8002390 <HAL_GetTick>
 8004334:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004336:	e008      	b.n	800434a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004338:	f7fe f82a 	bl	8002390 <HAL_GetTick>
 800433c:	4602      	mov	r2, r0
 800433e:	693b      	ldr	r3, [r7, #16]
 8004340:	1ad3      	subs	r3, r2, r3
 8004342:	2b02      	cmp	r3, #2
 8004344:	d901      	bls.n	800434a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004346:	2303      	movs	r3, #3
 8004348:	e1e2      	b.n	8004710 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800434a:	4b41      	ldr	r3, [pc, #260]	; (8004450 <HAL_RCC_OscConfig+0x504>)
 800434c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004350:	f003 0302 	and.w	r3, r3, #2
 8004354:	2b00      	cmp	r3, #0
 8004356:	d0ef      	beq.n	8004338 <HAL_RCC_OscConfig+0x3ec>
 8004358:	e01b      	b.n	8004392 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800435a:	4b3d      	ldr	r3, [pc, #244]	; (8004450 <HAL_RCC_OscConfig+0x504>)
 800435c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004360:	4a3b      	ldr	r2, [pc, #236]	; (8004450 <HAL_RCC_OscConfig+0x504>)
 8004362:	f023 0301 	bic.w	r3, r3, #1
 8004366:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800436a:	f7fe f811 	bl	8002390 <HAL_GetTick>
 800436e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004370:	e008      	b.n	8004384 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004372:	f7fe f80d 	bl	8002390 <HAL_GetTick>
 8004376:	4602      	mov	r2, r0
 8004378:	693b      	ldr	r3, [r7, #16]
 800437a:	1ad3      	subs	r3, r2, r3
 800437c:	2b02      	cmp	r3, #2
 800437e:	d901      	bls.n	8004384 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004380:	2303      	movs	r3, #3
 8004382:	e1c5      	b.n	8004710 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004384:	4b32      	ldr	r3, [pc, #200]	; (8004450 <HAL_RCC_OscConfig+0x504>)
 8004386:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800438a:	f003 0302 	and.w	r3, r3, #2
 800438e:	2b00      	cmp	r3, #0
 8004390:	d1ef      	bne.n	8004372 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f003 0304 	and.w	r3, r3, #4
 800439a:	2b00      	cmp	r3, #0
 800439c:	f000 80a6 	beq.w	80044ec <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80043a0:	2300      	movs	r3, #0
 80043a2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80043a4:	4b2a      	ldr	r3, [pc, #168]	; (8004450 <HAL_RCC_OscConfig+0x504>)
 80043a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d10d      	bne.n	80043cc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80043b0:	4b27      	ldr	r3, [pc, #156]	; (8004450 <HAL_RCC_OscConfig+0x504>)
 80043b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043b4:	4a26      	ldr	r2, [pc, #152]	; (8004450 <HAL_RCC_OscConfig+0x504>)
 80043b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043ba:	6593      	str	r3, [r2, #88]	; 0x58
 80043bc:	4b24      	ldr	r3, [pc, #144]	; (8004450 <HAL_RCC_OscConfig+0x504>)
 80043be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043c4:	60bb      	str	r3, [r7, #8]
 80043c6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80043c8:	2301      	movs	r3, #1
 80043ca:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80043cc:	4b21      	ldr	r3, [pc, #132]	; (8004454 <HAL_RCC_OscConfig+0x508>)
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d118      	bne.n	800440a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80043d8:	4b1e      	ldr	r3, [pc, #120]	; (8004454 <HAL_RCC_OscConfig+0x508>)
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	4a1d      	ldr	r2, [pc, #116]	; (8004454 <HAL_RCC_OscConfig+0x508>)
 80043de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043e2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80043e4:	f7fd ffd4 	bl	8002390 <HAL_GetTick>
 80043e8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80043ea:	e008      	b.n	80043fe <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043ec:	f7fd ffd0 	bl	8002390 <HAL_GetTick>
 80043f0:	4602      	mov	r2, r0
 80043f2:	693b      	ldr	r3, [r7, #16]
 80043f4:	1ad3      	subs	r3, r2, r3
 80043f6:	2b02      	cmp	r3, #2
 80043f8:	d901      	bls.n	80043fe <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80043fa:	2303      	movs	r3, #3
 80043fc:	e188      	b.n	8004710 <HAL_RCC_OscConfig+0x7c4>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80043fe:	4b15      	ldr	r3, [pc, #84]	; (8004454 <HAL_RCC_OscConfig+0x508>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004406:	2b00      	cmp	r3, #0
 8004408:	d0f0      	beq.n	80043ec <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	689b      	ldr	r3, [r3, #8]
 800440e:	2b01      	cmp	r3, #1
 8004410:	d108      	bne.n	8004424 <HAL_RCC_OscConfig+0x4d8>
 8004412:	4b0f      	ldr	r3, [pc, #60]	; (8004450 <HAL_RCC_OscConfig+0x504>)
 8004414:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004418:	4a0d      	ldr	r2, [pc, #52]	; (8004450 <HAL_RCC_OscConfig+0x504>)
 800441a:	f043 0301 	orr.w	r3, r3, #1
 800441e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004422:	e029      	b.n	8004478 <HAL_RCC_OscConfig+0x52c>
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	689b      	ldr	r3, [r3, #8]
 8004428:	2b05      	cmp	r3, #5
 800442a:	d115      	bne.n	8004458 <HAL_RCC_OscConfig+0x50c>
 800442c:	4b08      	ldr	r3, [pc, #32]	; (8004450 <HAL_RCC_OscConfig+0x504>)
 800442e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004432:	4a07      	ldr	r2, [pc, #28]	; (8004450 <HAL_RCC_OscConfig+0x504>)
 8004434:	f043 0304 	orr.w	r3, r3, #4
 8004438:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800443c:	4b04      	ldr	r3, [pc, #16]	; (8004450 <HAL_RCC_OscConfig+0x504>)
 800443e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004442:	4a03      	ldr	r2, [pc, #12]	; (8004450 <HAL_RCC_OscConfig+0x504>)
 8004444:	f043 0301 	orr.w	r3, r3, #1
 8004448:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800444c:	e014      	b.n	8004478 <HAL_RCC_OscConfig+0x52c>
 800444e:	bf00      	nop
 8004450:	40021000 	.word	0x40021000
 8004454:	40007000 	.word	0x40007000
 8004458:	4b91      	ldr	r3, [pc, #580]	; (80046a0 <HAL_RCC_OscConfig+0x754>)
 800445a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800445e:	4a90      	ldr	r2, [pc, #576]	; (80046a0 <HAL_RCC_OscConfig+0x754>)
 8004460:	f023 0301 	bic.w	r3, r3, #1
 8004464:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004468:	4b8d      	ldr	r3, [pc, #564]	; (80046a0 <HAL_RCC_OscConfig+0x754>)
 800446a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800446e:	4a8c      	ldr	r2, [pc, #560]	; (80046a0 <HAL_RCC_OscConfig+0x754>)
 8004470:	f023 0304 	bic.w	r3, r3, #4
 8004474:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	689b      	ldr	r3, [r3, #8]
 800447c:	2b00      	cmp	r3, #0
 800447e:	d016      	beq.n	80044ae <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004480:	f7fd ff86 	bl	8002390 <HAL_GetTick>
 8004484:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004486:	e00a      	b.n	800449e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004488:	f7fd ff82 	bl	8002390 <HAL_GetTick>
 800448c:	4602      	mov	r2, r0
 800448e:	693b      	ldr	r3, [r7, #16]
 8004490:	1ad3      	subs	r3, r2, r3
 8004492:	f241 3288 	movw	r2, #5000	; 0x1388
 8004496:	4293      	cmp	r3, r2
 8004498:	d901      	bls.n	800449e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800449a:	2303      	movs	r3, #3
 800449c:	e138      	b.n	8004710 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800449e:	4b80      	ldr	r3, [pc, #512]	; (80046a0 <HAL_RCC_OscConfig+0x754>)
 80044a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044a4:	f003 0302 	and.w	r3, r3, #2
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d0ed      	beq.n	8004488 <HAL_RCC_OscConfig+0x53c>
 80044ac:	e015      	b.n	80044da <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044ae:	f7fd ff6f 	bl	8002390 <HAL_GetTick>
 80044b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80044b4:	e00a      	b.n	80044cc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80044b6:	f7fd ff6b 	bl	8002390 <HAL_GetTick>
 80044ba:	4602      	mov	r2, r0
 80044bc:	693b      	ldr	r3, [r7, #16]
 80044be:	1ad3      	subs	r3, r2, r3
 80044c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d901      	bls.n	80044cc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80044c8:	2303      	movs	r3, #3
 80044ca:	e121      	b.n	8004710 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80044cc:	4b74      	ldr	r3, [pc, #464]	; (80046a0 <HAL_RCC_OscConfig+0x754>)
 80044ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044d2:	f003 0302 	and.w	r3, r3, #2
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d1ed      	bne.n	80044b6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80044da:	7ffb      	ldrb	r3, [r7, #31]
 80044dc:	2b01      	cmp	r3, #1
 80044de:	d105      	bne.n	80044ec <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80044e0:	4b6f      	ldr	r3, [pc, #444]	; (80046a0 <HAL_RCC_OscConfig+0x754>)
 80044e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044e4:	4a6e      	ldr	r2, [pc, #440]	; (80046a0 <HAL_RCC_OscConfig+0x754>)
 80044e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80044ea:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	f000 810c 	beq.w	800470e <HAL_RCC_OscConfig+0x7c2>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044fa:	2b02      	cmp	r3, #2
 80044fc:	f040 80d4 	bne.w	80046a8 <HAL_RCC_OscConfig+0x75c>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004500:	4b67      	ldr	r3, [pc, #412]	; (80046a0 <HAL_RCC_OscConfig+0x754>)
 8004502:	68db      	ldr	r3, [r3, #12]
 8004504:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004506:	697b      	ldr	r3, [r7, #20]
 8004508:	f003 0203 	and.w	r2, r3, #3
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004510:	429a      	cmp	r2, r3
 8004512:	d130      	bne.n	8004576 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004514:	697b      	ldr	r3, [r7, #20]
 8004516:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800451e:	3b01      	subs	r3, #1
 8004520:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004522:	429a      	cmp	r2, r3
 8004524:	d127      	bne.n	8004576 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004526:	697b      	ldr	r3, [r7, #20]
 8004528:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004530:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004532:	429a      	cmp	r2, r3
 8004534:	d11f      	bne.n	8004576 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004536:	697b      	ldr	r3, [r7, #20]
 8004538:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800453c:	687a      	ldr	r2, [r7, #4]
 800453e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004540:	2a07      	cmp	r2, #7
 8004542:	bf14      	ite	ne
 8004544:	2201      	movne	r2, #1
 8004546:	2200      	moveq	r2, #0
 8004548:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800454a:	4293      	cmp	r3, r2
 800454c:	d113      	bne.n	8004576 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800454e:	697b      	ldr	r3, [r7, #20]
 8004550:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004558:	085b      	lsrs	r3, r3, #1
 800455a:	3b01      	subs	r3, #1
 800455c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800455e:	429a      	cmp	r2, r3
 8004560:	d109      	bne.n	8004576 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004562:	697b      	ldr	r3, [r7, #20]
 8004564:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800456c:	085b      	lsrs	r3, r3, #1
 800456e:	3b01      	subs	r3, #1
 8004570:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004572:	429a      	cmp	r2, r3
 8004574:	d06e      	beq.n	8004654 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004576:	69bb      	ldr	r3, [r7, #24]
 8004578:	2b0c      	cmp	r3, #12
 800457a:	d069      	beq.n	8004650 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800457c:	4b48      	ldr	r3, [pc, #288]	; (80046a0 <HAL_RCC_OscConfig+0x754>)
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004584:	2b00      	cmp	r3, #0
 8004586:	d105      	bne.n	8004594 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004588:	4b45      	ldr	r3, [pc, #276]	; (80046a0 <HAL_RCC_OscConfig+0x754>)
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004590:	2b00      	cmp	r3, #0
 8004592:	d001      	beq.n	8004598 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8004594:	2301      	movs	r3, #1
 8004596:	e0bb      	b.n	8004710 <HAL_RCC_OscConfig+0x7c4>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004598:	4b41      	ldr	r3, [pc, #260]	; (80046a0 <HAL_RCC_OscConfig+0x754>)
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	4a40      	ldr	r2, [pc, #256]	; (80046a0 <HAL_RCC_OscConfig+0x754>)
 800459e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80045a2:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80045a4:	f7fd fef4 	bl	8002390 <HAL_GetTick>
 80045a8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80045aa:	e008      	b.n	80045be <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045ac:	f7fd fef0 	bl	8002390 <HAL_GetTick>
 80045b0:	4602      	mov	r2, r0
 80045b2:	693b      	ldr	r3, [r7, #16]
 80045b4:	1ad3      	subs	r3, r2, r3
 80045b6:	2b02      	cmp	r3, #2
 80045b8:	d901      	bls.n	80045be <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80045ba:	2303      	movs	r3, #3
 80045bc:	e0a8      	b.n	8004710 <HAL_RCC_OscConfig+0x7c4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80045be:	4b38      	ldr	r3, [pc, #224]	; (80046a0 <HAL_RCC_OscConfig+0x754>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d1f0      	bne.n	80045ac <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80045ca:	4b35      	ldr	r3, [pc, #212]	; (80046a0 <HAL_RCC_OscConfig+0x754>)
 80045cc:	68da      	ldr	r2, [r3, #12]
 80045ce:	4b35      	ldr	r3, [pc, #212]	; (80046a4 <HAL_RCC_OscConfig+0x758>)
 80045d0:	4013      	ands	r3, r2
 80045d2:	687a      	ldr	r2, [r7, #4]
 80045d4:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80045d6:	687a      	ldr	r2, [r7, #4]
 80045d8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80045da:	3a01      	subs	r2, #1
 80045dc:	0112      	lsls	r2, r2, #4
 80045de:	4311      	orrs	r1, r2
 80045e0:	687a      	ldr	r2, [r7, #4]
 80045e2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80045e4:	0212      	lsls	r2, r2, #8
 80045e6:	4311      	orrs	r1, r2
 80045e8:	687a      	ldr	r2, [r7, #4]
 80045ea:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80045ec:	0852      	lsrs	r2, r2, #1
 80045ee:	3a01      	subs	r2, #1
 80045f0:	0552      	lsls	r2, r2, #21
 80045f2:	4311      	orrs	r1, r2
 80045f4:	687a      	ldr	r2, [r7, #4]
 80045f6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80045f8:	0852      	lsrs	r2, r2, #1
 80045fa:	3a01      	subs	r2, #1
 80045fc:	0652      	lsls	r2, r2, #25
 80045fe:	4311      	orrs	r1, r2
 8004600:	687a      	ldr	r2, [r7, #4]
 8004602:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004604:	0912      	lsrs	r2, r2, #4
 8004606:	0452      	lsls	r2, r2, #17
 8004608:	430a      	orrs	r2, r1
 800460a:	4925      	ldr	r1, [pc, #148]	; (80046a0 <HAL_RCC_OscConfig+0x754>)
 800460c:	4313      	orrs	r3, r2
 800460e:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004610:	4b23      	ldr	r3, [pc, #140]	; (80046a0 <HAL_RCC_OscConfig+0x754>)
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	4a22      	ldr	r2, [pc, #136]	; (80046a0 <HAL_RCC_OscConfig+0x754>)
 8004616:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800461a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800461c:	4b20      	ldr	r3, [pc, #128]	; (80046a0 <HAL_RCC_OscConfig+0x754>)
 800461e:	68db      	ldr	r3, [r3, #12]
 8004620:	4a1f      	ldr	r2, [pc, #124]	; (80046a0 <HAL_RCC_OscConfig+0x754>)
 8004622:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004626:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004628:	f7fd feb2 	bl	8002390 <HAL_GetTick>
 800462c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800462e:	e008      	b.n	8004642 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004630:	f7fd feae 	bl	8002390 <HAL_GetTick>
 8004634:	4602      	mov	r2, r0
 8004636:	693b      	ldr	r3, [r7, #16]
 8004638:	1ad3      	subs	r3, r2, r3
 800463a:	2b02      	cmp	r3, #2
 800463c:	d901      	bls.n	8004642 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800463e:	2303      	movs	r3, #3
 8004640:	e066      	b.n	8004710 <HAL_RCC_OscConfig+0x7c4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004642:	4b17      	ldr	r3, [pc, #92]	; (80046a0 <HAL_RCC_OscConfig+0x754>)
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800464a:	2b00      	cmp	r3, #0
 800464c:	d0f0      	beq.n	8004630 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800464e:	e05e      	b.n	800470e <HAL_RCC_OscConfig+0x7c2>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004650:	2301      	movs	r3, #1
 8004652:	e05d      	b.n	8004710 <HAL_RCC_OscConfig+0x7c4>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004654:	4b12      	ldr	r3, [pc, #72]	; (80046a0 <HAL_RCC_OscConfig+0x754>)
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800465c:	2b00      	cmp	r3, #0
 800465e:	d156      	bne.n	800470e <HAL_RCC_OscConfig+0x7c2>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004660:	4b0f      	ldr	r3, [pc, #60]	; (80046a0 <HAL_RCC_OscConfig+0x754>)
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	4a0e      	ldr	r2, [pc, #56]	; (80046a0 <HAL_RCC_OscConfig+0x754>)
 8004666:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800466a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800466c:	4b0c      	ldr	r3, [pc, #48]	; (80046a0 <HAL_RCC_OscConfig+0x754>)
 800466e:	68db      	ldr	r3, [r3, #12]
 8004670:	4a0b      	ldr	r2, [pc, #44]	; (80046a0 <HAL_RCC_OscConfig+0x754>)
 8004672:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004676:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004678:	f7fd fe8a 	bl	8002390 <HAL_GetTick>
 800467c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800467e:	e008      	b.n	8004692 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004680:	f7fd fe86 	bl	8002390 <HAL_GetTick>
 8004684:	4602      	mov	r2, r0
 8004686:	693b      	ldr	r3, [r7, #16]
 8004688:	1ad3      	subs	r3, r2, r3
 800468a:	2b02      	cmp	r3, #2
 800468c:	d901      	bls.n	8004692 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800468e:	2303      	movs	r3, #3
 8004690:	e03e      	b.n	8004710 <HAL_RCC_OscConfig+0x7c4>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004692:	4b03      	ldr	r3, [pc, #12]	; (80046a0 <HAL_RCC_OscConfig+0x754>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800469a:	2b00      	cmp	r3, #0
 800469c:	d0f0      	beq.n	8004680 <HAL_RCC_OscConfig+0x734>
 800469e:	e036      	b.n	800470e <HAL_RCC_OscConfig+0x7c2>
 80046a0:	40021000 	.word	0x40021000
 80046a4:	f99d808c 	.word	0xf99d808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80046a8:	69bb      	ldr	r3, [r7, #24]
 80046aa:	2b0c      	cmp	r3, #12
 80046ac:	d02d      	beq.n	800470a <HAL_RCC_OscConfig+0x7be>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046ae:	4b1a      	ldr	r3, [pc, #104]	; (8004718 <HAL_RCC_OscConfig+0x7cc>)
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	4a19      	ldr	r2, [pc, #100]	; (8004718 <HAL_RCC_OscConfig+0x7cc>)
 80046b4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80046b8:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80046ba:	4b17      	ldr	r3, [pc, #92]	; (8004718 <HAL_RCC_OscConfig+0x7cc>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d105      	bne.n	80046d2 <HAL_RCC_OscConfig+0x786>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80046c6:	4b14      	ldr	r3, [pc, #80]	; (8004718 <HAL_RCC_OscConfig+0x7cc>)
 80046c8:	68db      	ldr	r3, [r3, #12]
 80046ca:	4a13      	ldr	r2, [pc, #76]	; (8004718 <HAL_RCC_OscConfig+0x7cc>)
 80046cc:	f023 0303 	bic.w	r3, r3, #3
 80046d0:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80046d2:	4b11      	ldr	r3, [pc, #68]	; (8004718 <HAL_RCC_OscConfig+0x7cc>)
 80046d4:	68db      	ldr	r3, [r3, #12]
 80046d6:	4a10      	ldr	r2, [pc, #64]	; (8004718 <HAL_RCC_OscConfig+0x7cc>)
 80046d8:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80046dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80046e0:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046e2:	f7fd fe55 	bl	8002390 <HAL_GetTick>
 80046e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80046e8:	e008      	b.n	80046fc <HAL_RCC_OscConfig+0x7b0>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046ea:	f7fd fe51 	bl	8002390 <HAL_GetTick>
 80046ee:	4602      	mov	r2, r0
 80046f0:	693b      	ldr	r3, [r7, #16]
 80046f2:	1ad3      	subs	r3, r2, r3
 80046f4:	2b02      	cmp	r3, #2
 80046f6:	d901      	bls.n	80046fc <HAL_RCC_OscConfig+0x7b0>
          {
            return HAL_TIMEOUT;
 80046f8:	2303      	movs	r3, #3
 80046fa:	e009      	b.n	8004710 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80046fc:	4b06      	ldr	r3, [pc, #24]	; (8004718 <HAL_RCC_OscConfig+0x7cc>)
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004704:	2b00      	cmp	r3, #0
 8004706:	d1f0      	bne.n	80046ea <HAL_RCC_OscConfig+0x79e>
 8004708:	e001      	b.n	800470e <HAL_RCC_OscConfig+0x7c2>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800470a:	2301      	movs	r3, #1
 800470c:	e000      	b.n	8004710 <HAL_RCC_OscConfig+0x7c4>
      }
    }
  }
  return HAL_OK;
 800470e:	2300      	movs	r3, #0
}
 8004710:	4618      	mov	r0, r3
 8004712:	3720      	adds	r7, #32
 8004714:	46bd      	mov	sp, r7
 8004716:	bd80      	pop	{r7, pc}
 8004718:	40021000 	.word	0x40021000

0800471c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800471c:	b580      	push	{r7, lr}
 800471e:	b084      	sub	sp, #16
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
 8004724:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d101      	bne.n	8004730 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800472c:	2301      	movs	r3, #1
 800472e:	e0c8      	b.n	80048c2 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004730:	4b66      	ldr	r3, [pc, #408]	; (80048cc <HAL_RCC_ClockConfig+0x1b0>)
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f003 0307 	and.w	r3, r3, #7
 8004738:	683a      	ldr	r2, [r7, #0]
 800473a:	429a      	cmp	r2, r3
 800473c:	d910      	bls.n	8004760 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800473e:	4b63      	ldr	r3, [pc, #396]	; (80048cc <HAL_RCC_ClockConfig+0x1b0>)
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f023 0207 	bic.w	r2, r3, #7
 8004746:	4961      	ldr	r1, [pc, #388]	; (80048cc <HAL_RCC_ClockConfig+0x1b0>)
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	4313      	orrs	r3, r2
 800474c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800474e:	4b5f      	ldr	r3, [pc, #380]	; (80048cc <HAL_RCC_ClockConfig+0x1b0>)
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f003 0307 	and.w	r3, r3, #7
 8004756:	683a      	ldr	r2, [r7, #0]
 8004758:	429a      	cmp	r2, r3
 800475a:	d001      	beq.n	8004760 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800475c:	2301      	movs	r3, #1
 800475e:	e0b0      	b.n	80048c2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f003 0301 	and.w	r3, r3, #1
 8004768:	2b00      	cmp	r3, #0
 800476a:	d04c      	beq.n	8004806 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	685b      	ldr	r3, [r3, #4]
 8004770:	2b03      	cmp	r3, #3
 8004772:	d107      	bne.n	8004784 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004774:	4b56      	ldr	r3, [pc, #344]	; (80048d0 <HAL_RCC_ClockConfig+0x1b4>)
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800477c:	2b00      	cmp	r3, #0
 800477e:	d121      	bne.n	80047c4 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8004780:	2301      	movs	r3, #1
 8004782:	e09e      	b.n	80048c2 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	685b      	ldr	r3, [r3, #4]
 8004788:	2b02      	cmp	r3, #2
 800478a:	d107      	bne.n	800479c <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800478c:	4b50      	ldr	r3, [pc, #320]	; (80048d0 <HAL_RCC_ClockConfig+0x1b4>)
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004794:	2b00      	cmp	r3, #0
 8004796:	d115      	bne.n	80047c4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004798:	2301      	movs	r3, #1
 800479a:	e092      	b.n	80048c2 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	685b      	ldr	r3, [r3, #4]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d107      	bne.n	80047b4 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80047a4:	4b4a      	ldr	r3, [pc, #296]	; (80048d0 <HAL_RCC_ClockConfig+0x1b4>)
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f003 0302 	and.w	r3, r3, #2
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d109      	bne.n	80047c4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80047b0:	2301      	movs	r3, #1
 80047b2:	e086      	b.n	80048c2 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80047b4:	4b46      	ldr	r3, [pc, #280]	; (80048d0 <HAL_RCC_ClockConfig+0x1b4>)
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d101      	bne.n	80047c4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80047c0:	2301      	movs	r3, #1
 80047c2:	e07e      	b.n	80048c2 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80047c4:	4b42      	ldr	r3, [pc, #264]	; (80048d0 <HAL_RCC_ClockConfig+0x1b4>)
 80047c6:	689b      	ldr	r3, [r3, #8]
 80047c8:	f023 0203 	bic.w	r2, r3, #3
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	685b      	ldr	r3, [r3, #4]
 80047d0:	493f      	ldr	r1, [pc, #252]	; (80048d0 <HAL_RCC_ClockConfig+0x1b4>)
 80047d2:	4313      	orrs	r3, r2
 80047d4:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80047d6:	f7fd fddb 	bl	8002390 <HAL_GetTick>
 80047da:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047dc:	e00a      	b.n	80047f4 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80047de:	f7fd fdd7 	bl	8002390 <HAL_GetTick>
 80047e2:	4602      	mov	r2, r0
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	1ad3      	subs	r3, r2, r3
 80047e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80047ec:	4293      	cmp	r3, r2
 80047ee:	d901      	bls.n	80047f4 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80047f0:	2303      	movs	r3, #3
 80047f2:	e066      	b.n	80048c2 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047f4:	4b36      	ldr	r3, [pc, #216]	; (80048d0 <HAL_RCC_ClockConfig+0x1b4>)
 80047f6:	689b      	ldr	r3, [r3, #8]
 80047f8:	f003 020c 	and.w	r2, r3, #12
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	685b      	ldr	r3, [r3, #4]
 8004800:	009b      	lsls	r3, r3, #2
 8004802:	429a      	cmp	r2, r3
 8004804:	d1eb      	bne.n	80047de <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f003 0302 	and.w	r3, r3, #2
 800480e:	2b00      	cmp	r3, #0
 8004810:	d008      	beq.n	8004824 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004812:	4b2f      	ldr	r3, [pc, #188]	; (80048d0 <HAL_RCC_ClockConfig+0x1b4>)
 8004814:	689b      	ldr	r3, [r3, #8]
 8004816:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	689b      	ldr	r3, [r3, #8]
 800481e:	492c      	ldr	r1, [pc, #176]	; (80048d0 <HAL_RCC_ClockConfig+0x1b4>)
 8004820:	4313      	orrs	r3, r2
 8004822:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004824:	4b29      	ldr	r3, [pc, #164]	; (80048cc <HAL_RCC_ClockConfig+0x1b0>)
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f003 0307 	and.w	r3, r3, #7
 800482c:	683a      	ldr	r2, [r7, #0]
 800482e:	429a      	cmp	r2, r3
 8004830:	d210      	bcs.n	8004854 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004832:	4b26      	ldr	r3, [pc, #152]	; (80048cc <HAL_RCC_ClockConfig+0x1b0>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f023 0207 	bic.w	r2, r3, #7
 800483a:	4924      	ldr	r1, [pc, #144]	; (80048cc <HAL_RCC_ClockConfig+0x1b0>)
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	4313      	orrs	r3, r2
 8004840:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004842:	4b22      	ldr	r3, [pc, #136]	; (80048cc <HAL_RCC_ClockConfig+0x1b0>)
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f003 0307 	and.w	r3, r3, #7
 800484a:	683a      	ldr	r2, [r7, #0]
 800484c:	429a      	cmp	r2, r3
 800484e:	d001      	beq.n	8004854 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8004850:	2301      	movs	r3, #1
 8004852:	e036      	b.n	80048c2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f003 0304 	and.w	r3, r3, #4
 800485c:	2b00      	cmp	r3, #0
 800485e:	d008      	beq.n	8004872 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004860:	4b1b      	ldr	r3, [pc, #108]	; (80048d0 <HAL_RCC_ClockConfig+0x1b4>)
 8004862:	689b      	ldr	r3, [r3, #8]
 8004864:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	68db      	ldr	r3, [r3, #12]
 800486c:	4918      	ldr	r1, [pc, #96]	; (80048d0 <HAL_RCC_ClockConfig+0x1b4>)
 800486e:	4313      	orrs	r3, r2
 8004870:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f003 0308 	and.w	r3, r3, #8
 800487a:	2b00      	cmp	r3, #0
 800487c:	d009      	beq.n	8004892 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800487e:	4b14      	ldr	r3, [pc, #80]	; (80048d0 <HAL_RCC_ClockConfig+0x1b4>)
 8004880:	689b      	ldr	r3, [r3, #8]
 8004882:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	691b      	ldr	r3, [r3, #16]
 800488a:	00db      	lsls	r3, r3, #3
 800488c:	4910      	ldr	r1, [pc, #64]	; (80048d0 <HAL_RCC_ClockConfig+0x1b4>)
 800488e:	4313      	orrs	r3, r2
 8004890:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004892:	f000 f825 	bl	80048e0 <HAL_RCC_GetSysClockFreq>
 8004896:	4602      	mov	r2, r0
 8004898:	4b0d      	ldr	r3, [pc, #52]	; (80048d0 <HAL_RCC_ClockConfig+0x1b4>)
 800489a:	689b      	ldr	r3, [r3, #8]
 800489c:	091b      	lsrs	r3, r3, #4
 800489e:	f003 030f 	and.w	r3, r3, #15
 80048a2:	490c      	ldr	r1, [pc, #48]	; (80048d4 <HAL_RCC_ClockConfig+0x1b8>)
 80048a4:	5ccb      	ldrb	r3, [r1, r3]
 80048a6:	f003 031f 	and.w	r3, r3, #31
 80048aa:	fa22 f303 	lsr.w	r3, r2, r3
 80048ae:	4a0a      	ldr	r2, [pc, #40]	; (80048d8 <HAL_RCC_ClockConfig+0x1bc>)
 80048b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80048b2:	4b0a      	ldr	r3, [pc, #40]	; (80048dc <HAL_RCC_ClockConfig+0x1c0>)
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	4618      	mov	r0, r3
 80048b8:	f7fd fb74 	bl	8001fa4 <HAL_InitTick>
 80048bc:	4603      	mov	r3, r0
 80048be:	72fb      	strb	r3, [r7, #11]

  return status;
 80048c0:	7afb      	ldrb	r3, [r7, #11]
}
 80048c2:	4618      	mov	r0, r3
 80048c4:	3710      	adds	r7, #16
 80048c6:	46bd      	mov	sp, r7
 80048c8:	bd80      	pop	{r7, pc}
 80048ca:	bf00      	nop
 80048cc:	40022000 	.word	0x40022000
 80048d0:	40021000 	.word	0x40021000
 80048d4:	08010110 	.word	0x08010110
 80048d8:	20000004 	.word	0x20000004
 80048dc:	20000008 	.word	0x20000008

080048e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80048e0:	b480      	push	{r7}
 80048e2:	b089      	sub	sp, #36	; 0x24
 80048e4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80048e6:	2300      	movs	r3, #0
 80048e8:	61fb      	str	r3, [r7, #28]
 80048ea:	2300      	movs	r3, #0
 80048ec:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80048ee:	4b3e      	ldr	r3, [pc, #248]	; (80049e8 <HAL_RCC_GetSysClockFreq+0x108>)
 80048f0:	689b      	ldr	r3, [r3, #8]
 80048f2:	f003 030c 	and.w	r3, r3, #12
 80048f6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80048f8:	4b3b      	ldr	r3, [pc, #236]	; (80049e8 <HAL_RCC_GetSysClockFreq+0x108>)
 80048fa:	68db      	ldr	r3, [r3, #12]
 80048fc:	f003 0303 	and.w	r3, r3, #3
 8004900:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004902:	693b      	ldr	r3, [r7, #16]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d005      	beq.n	8004914 <HAL_RCC_GetSysClockFreq+0x34>
 8004908:	693b      	ldr	r3, [r7, #16]
 800490a:	2b0c      	cmp	r3, #12
 800490c:	d121      	bne.n	8004952 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	2b01      	cmp	r3, #1
 8004912:	d11e      	bne.n	8004952 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004914:	4b34      	ldr	r3, [pc, #208]	; (80049e8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f003 0308 	and.w	r3, r3, #8
 800491c:	2b00      	cmp	r3, #0
 800491e:	d107      	bne.n	8004930 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004920:	4b31      	ldr	r3, [pc, #196]	; (80049e8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004922:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004926:	0a1b      	lsrs	r3, r3, #8
 8004928:	f003 030f 	and.w	r3, r3, #15
 800492c:	61fb      	str	r3, [r7, #28]
 800492e:	e005      	b.n	800493c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004930:	4b2d      	ldr	r3, [pc, #180]	; (80049e8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	091b      	lsrs	r3, r3, #4
 8004936:	f003 030f 	and.w	r3, r3, #15
 800493a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800493c:	4a2b      	ldr	r2, [pc, #172]	; (80049ec <HAL_RCC_GetSysClockFreq+0x10c>)
 800493e:	69fb      	ldr	r3, [r7, #28]
 8004940:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004944:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004946:	693b      	ldr	r3, [r7, #16]
 8004948:	2b00      	cmp	r3, #0
 800494a:	d10d      	bne.n	8004968 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800494c:	69fb      	ldr	r3, [r7, #28]
 800494e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004950:	e00a      	b.n	8004968 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004952:	693b      	ldr	r3, [r7, #16]
 8004954:	2b04      	cmp	r3, #4
 8004956:	d102      	bne.n	800495e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004958:	4b25      	ldr	r3, [pc, #148]	; (80049f0 <HAL_RCC_GetSysClockFreq+0x110>)
 800495a:	61bb      	str	r3, [r7, #24]
 800495c:	e004      	b.n	8004968 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800495e:	693b      	ldr	r3, [r7, #16]
 8004960:	2b08      	cmp	r3, #8
 8004962:	d101      	bne.n	8004968 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004964:	4b23      	ldr	r3, [pc, #140]	; (80049f4 <HAL_RCC_GetSysClockFreq+0x114>)
 8004966:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004968:	693b      	ldr	r3, [r7, #16]
 800496a:	2b0c      	cmp	r3, #12
 800496c:	d134      	bne.n	80049d8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800496e:	4b1e      	ldr	r3, [pc, #120]	; (80049e8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004970:	68db      	ldr	r3, [r3, #12]
 8004972:	f003 0303 	and.w	r3, r3, #3
 8004976:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004978:	68bb      	ldr	r3, [r7, #8]
 800497a:	2b02      	cmp	r3, #2
 800497c:	d003      	beq.n	8004986 <HAL_RCC_GetSysClockFreq+0xa6>
 800497e:	68bb      	ldr	r3, [r7, #8]
 8004980:	2b03      	cmp	r3, #3
 8004982:	d003      	beq.n	800498c <HAL_RCC_GetSysClockFreq+0xac>
 8004984:	e005      	b.n	8004992 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004986:	4b1a      	ldr	r3, [pc, #104]	; (80049f0 <HAL_RCC_GetSysClockFreq+0x110>)
 8004988:	617b      	str	r3, [r7, #20]
      break;
 800498a:	e005      	b.n	8004998 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800498c:	4b19      	ldr	r3, [pc, #100]	; (80049f4 <HAL_RCC_GetSysClockFreq+0x114>)
 800498e:	617b      	str	r3, [r7, #20]
      break;
 8004990:	e002      	b.n	8004998 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004992:	69fb      	ldr	r3, [r7, #28]
 8004994:	617b      	str	r3, [r7, #20]
      break;
 8004996:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004998:	4b13      	ldr	r3, [pc, #76]	; (80049e8 <HAL_RCC_GetSysClockFreq+0x108>)
 800499a:	68db      	ldr	r3, [r3, #12]
 800499c:	091b      	lsrs	r3, r3, #4
 800499e:	f003 0307 	and.w	r3, r3, #7
 80049a2:	3301      	adds	r3, #1
 80049a4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80049a6:	4b10      	ldr	r3, [pc, #64]	; (80049e8 <HAL_RCC_GetSysClockFreq+0x108>)
 80049a8:	68db      	ldr	r3, [r3, #12]
 80049aa:	0a1b      	lsrs	r3, r3, #8
 80049ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80049b0:	697a      	ldr	r2, [r7, #20]
 80049b2:	fb03 f202 	mul.w	r2, r3, r2
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80049bc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80049be:	4b0a      	ldr	r3, [pc, #40]	; (80049e8 <HAL_RCC_GetSysClockFreq+0x108>)
 80049c0:	68db      	ldr	r3, [r3, #12]
 80049c2:	0e5b      	lsrs	r3, r3, #25
 80049c4:	f003 0303 	and.w	r3, r3, #3
 80049c8:	3301      	adds	r3, #1
 80049ca:	005b      	lsls	r3, r3, #1
 80049cc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80049ce:	697a      	ldr	r2, [r7, #20]
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80049d6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80049d8:	69bb      	ldr	r3, [r7, #24]
}
 80049da:	4618      	mov	r0, r3
 80049dc:	3724      	adds	r7, #36	; 0x24
 80049de:	46bd      	mov	sp, r7
 80049e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e4:	4770      	bx	lr
 80049e6:	bf00      	nop
 80049e8:	40021000 	.word	0x40021000
 80049ec:	08010128 	.word	0x08010128
 80049f0:	00f42400 	.word	0x00f42400
 80049f4:	007a1200 	.word	0x007a1200

080049f8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80049f8:	b480      	push	{r7}
 80049fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80049fc:	4b03      	ldr	r3, [pc, #12]	; (8004a0c <HAL_RCC_GetHCLKFreq+0x14>)
 80049fe:	681b      	ldr	r3, [r3, #0]
}
 8004a00:	4618      	mov	r0, r3
 8004a02:	46bd      	mov	sp, r7
 8004a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a08:	4770      	bx	lr
 8004a0a:	bf00      	nop
 8004a0c:	20000004 	.word	0x20000004

08004a10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004a10:	b580      	push	{r7, lr}
 8004a12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004a14:	f7ff fff0 	bl	80049f8 <HAL_RCC_GetHCLKFreq>
 8004a18:	4602      	mov	r2, r0
 8004a1a:	4b06      	ldr	r3, [pc, #24]	; (8004a34 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004a1c:	689b      	ldr	r3, [r3, #8]
 8004a1e:	0a1b      	lsrs	r3, r3, #8
 8004a20:	f003 0307 	and.w	r3, r3, #7
 8004a24:	4904      	ldr	r1, [pc, #16]	; (8004a38 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004a26:	5ccb      	ldrb	r3, [r1, r3]
 8004a28:	f003 031f 	and.w	r3, r3, #31
 8004a2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a30:	4618      	mov	r0, r3
 8004a32:	bd80      	pop	{r7, pc}
 8004a34:	40021000 	.word	0x40021000
 8004a38:	08010120 	.word	0x08010120

08004a3c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004a40:	f7ff ffda 	bl	80049f8 <HAL_RCC_GetHCLKFreq>
 8004a44:	4602      	mov	r2, r0
 8004a46:	4b06      	ldr	r3, [pc, #24]	; (8004a60 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004a48:	689b      	ldr	r3, [r3, #8]
 8004a4a:	0adb      	lsrs	r3, r3, #11
 8004a4c:	f003 0307 	and.w	r3, r3, #7
 8004a50:	4904      	ldr	r1, [pc, #16]	; (8004a64 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004a52:	5ccb      	ldrb	r3, [r1, r3]
 8004a54:	f003 031f 	and.w	r3, r3, #31
 8004a58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	bd80      	pop	{r7, pc}
 8004a60:	40021000 	.word	0x40021000
 8004a64:	08010120 	.word	0x08010120

08004a68 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004a68:	b480      	push	{r7}
 8004a6a:	b083      	sub	sp, #12
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
 8004a70:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	220f      	movs	r2, #15
 8004a76:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8004a78:	4b12      	ldr	r3, [pc, #72]	; (8004ac4 <HAL_RCC_GetClockConfig+0x5c>)
 8004a7a:	689b      	ldr	r3, [r3, #8]
 8004a7c:	f003 0203 	and.w	r2, r3, #3
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8004a84:	4b0f      	ldr	r3, [pc, #60]	; (8004ac4 <HAL_RCC_GetClockConfig+0x5c>)
 8004a86:	689b      	ldr	r3, [r3, #8]
 8004a88:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8004a90:	4b0c      	ldr	r3, [pc, #48]	; (8004ac4 <HAL_RCC_GetClockConfig+0x5c>)
 8004a92:	689b      	ldr	r3, [r3, #8]
 8004a94:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8004a9c:	4b09      	ldr	r3, [pc, #36]	; (8004ac4 <HAL_RCC_GetClockConfig+0x5c>)
 8004a9e:	689b      	ldr	r3, [r3, #8]
 8004aa0:	08db      	lsrs	r3, r3, #3
 8004aa2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8004aaa:	4b07      	ldr	r3, [pc, #28]	; (8004ac8 <HAL_RCC_GetClockConfig+0x60>)
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f003 0207 	and.w	r2, r3, #7
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	601a      	str	r2, [r3, #0]
}
 8004ab6:	bf00      	nop
 8004ab8:	370c      	adds	r7, #12
 8004aba:	46bd      	mov	sp, r7
 8004abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac0:	4770      	bx	lr
 8004ac2:	bf00      	nop
 8004ac4:	40021000 	.word	0x40021000
 8004ac8:	40022000 	.word	0x40022000

08004acc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b086      	sub	sp, #24
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004ad8:	4b2a      	ldr	r3, [pc, #168]	; (8004b84 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004ada:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004adc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d003      	beq.n	8004aec <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004ae4:	f7ff f902 	bl	8003cec <HAL_PWREx_GetVoltageRange>
 8004ae8:	6178      	str	r0, [r7, #20]
 8004aea:	e014      	b.n	8004b16 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004aec:	4b25      	ldr	r3, [pc, #148]	; (8004b84 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004aee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004af0:	4a24      	ldr	r2, [pc, #144]	; (8004b84 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004af2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004af6:	6593      	str	r3, [r2, #88]	; 0x58
 8004af8:	4b22      	ldr	r3, [pc, #136]	; (8004b84 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004afa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004afc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b00:	60fb      	str	r3, [r7, #12]
 8004b02:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004b04:	f7ff f8f2 	bl	8003cec <HAL_PWREx_GetVoltageRange>
 8004b08:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004b0a:	4b1e      	ldr	r3, [pc, #120]	; (8004b84 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004b0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b0e:	4a1d      	ldr	r2, [pc, #116]	; (8004b84 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004b10:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b14:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004b16:	697b      	ldr	r3, [r7, #20]
 8004b18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b1c:	d10b      	bne.n	8004b36 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2b80      	cmp	r3, #128	; 0x80
 8004b22:	d919      	bls.n	8004b58 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2ba0      	cmp	r3, #160	; 0xa0
 8004b28:	d902      	bls.n	8004b30 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004b2a:	2302      	movs	r3, #2
 8004b2c:	613b      	str	r3, [r7, #16]
 8004b2e:	e013      	b.n	8004b58 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004b30:	2301      	movs	r3, #1
 8004b32:	613b      	str	r3, [r7, #16]
 8004b34:	e010      	b.n	8004b58 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	2b80      	cmp	r3, #128	; 0x80
 8004b3a:	d902      	bls.n	8004b42 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004b3c:	2303      	movs	r3, #3
 8004b3e:	613b      	str	r3, [r7, #16]
 8004b40:	e00a      	b.n	8004b58 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2b80      	cmp	r3, #128	; 0x80
 8004b46:	d102      	bne.n	8004b4e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004b48:	2302      	movs	r3, #2
 8004b4a:	613b      	str	r3, [r7, #16]
 8004b4c:	e004      	b.n	8004b58 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	2b70      	cmp	r3, #112	; 0x70
 8004b52:	d101      	bne.n	8004b58 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004b54:	2301      	movs	r3, #1
 8004b56:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004b58:	4b0b      	ldr	r3, [pc, #44]	; (8004b88 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f023 0207 	bic.w	r2, r3, #7
 8004b60:	4909      	ldr	r1, [pc, #36]	; (8004b88 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004b62:	693b      	ldr	r3, [r7, #16]
 8004b64:	4313      	orrs	r3, r2
 8004b66:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004b68:	4b07      	ldr	r3, [pc, #28]	; (8004b88 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f003 0307 	and.w	r3, r3, #7
 8004b70:	693a      	ldr	r2, [r7, #16]
 8004b72:	429a      	cmp	r2, r3
 8004b74:	d001      	beq.n	8004b7a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004b76:	2301      	movs	r3, #1
 8004b78:	e000      	b.n	8004b7c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004b7a:	2300      	movs	r3, #0
}
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	3718      	adds	r7, #24
 8004b80:	46bd      	mov	sp, r7
 8004b82:	bd80      	pop	{r7, pc}
 8004b84:	40021000 	.word	0x40021000
 8004b88:	40022000 	.word	0x40022000

08004b8c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b086      	sub	sp, #24
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004b94:	2300      	movs	r3, #0
 8004b96:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004b98:	2300      	movs	r3, #0
 8004b9a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d041      	beq.n	8004c2c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004bac:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004bb0:	d02a      	beq.n	8004c08 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004bb2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004bb6:	d824      	bhi.n	8004c02 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004bb8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004bbc:	d008      	beq.n	8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004bbe:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004bc2:	d81e      	bhi.n	8004c02 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d00a      	beq.n	8004bde <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004bc8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004bcc:	d010      	beq.n	8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004bce:	e018      	b.n	8004c02 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004bd0:	4b86      	ldr	r3, [pc, #536]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004bd2:	68db      	ldr	r3, [r3, #12]
 8004bd4:	4a85      	ldr	r2, [pc, #532]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004bd6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004bda:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004bdc:	e015      	b.n	8004c0a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	3304      	adds	r3, #4
 8004be2:	2100      	movs	r1, #0
 8004be4:	4618      	mov	r0, r3
 8004be6:	f000 facb 	bl	8005180 <RCCEx_PLLSAI1_Config>
 8004bea:	4603      	mov	r3, r0
 8004bec:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004bee:	e00c      	b.n	8004c0a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	3320      	adds	r3, #32
 8004bf4:	2100      	movs	r1, #0
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	f000 fbb6 	bl	8005368 <RCCEx_PLLSAI2_Config>
 8004bfc:	4603      	mov	r3, r0
 8004bfe:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004c00:	e003      	b.n	8004c0a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004c02:	2301      	movs	r3, #1
 8004c04:	74fb      	strb	r3, [r7, #19]
      break;
 8004c06:	e000      	b.n	8004c0a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004c08:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004c0a:	7cfb      	ldrb	r3, [r7, #19]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d10b      	bne.n	8004c28 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004c10:	4b76      	ldr	r3, [pc, #472]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c16:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004c1e:	4973      	ldr	r1, [pc, #460]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c20:	4313      	orrs	r3, r2
 8004c22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004c26:	e001      	b.n	8004c2c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c28:	7cfb      	ldrb	r3, [r7, #19]
 8004c2a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d041      	beq.n	8004cbc <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004c3c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004c40:	d02a      	beq.n	8004c98 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8004c42:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004c46:	d824      	bhi.n	8004c92 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004c48:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004c4c:	d008      	beq.n	8004c60 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004c4e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004c52:	d81e      	bhi.n	8004c92 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d00a      	beq.n	8004c6e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004c58:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004c5c:	d010      	beq.n	8004c80 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004c5e:	e018      	b.n	8004c92 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004c60:	4b62      	ldr	r3, [pc, #392]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c62:	68db      	ldr	r3, [r3, #12]
 8004c64:	4a61      	ldr	r2, [pc, #388]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c66:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c6a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004c6c:	e015      	b.n	8004c9a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	3304      	adds	r3, #4
 8004c72:	2100      	movs	r1, #0
 8004c74:	4618      	mov	r0, r3
 8004c76:	f000 fa83 	bl	8005180 <RCCEx_PLLSAI1_Config>
 8004c7a:	4603      	mov	r3, r0
 8004c7c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004c7e:	e00c      	b.n	8004c9a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	3320      	adds	r3, #32
 8004c84:	2100      	movs	r1, #0
 8004c86:	4618      	mov	r0, r3
 8004c88:	f000 fb6e 	bl	8005368 <RCCEx_PLLSAI2_Config>
 8004c8c:	4603      	mov	r3, r0
 8004c8e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004c90:	e003      	b.n	8004c9a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004c92:	2301      	movs	r3, #1
 8004c94:	74fb      	strb	r3, [r7, #19]
      break;
 8004c96:	e000      	b.n	8004c9a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004c98:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004c9a:	7cfb      	ldrb	r3, [r7, #19]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d10b      	bne.n	8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004ca0:	4b52      	ldr	r3, [pc, #328]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ca2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ca6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004cae:	494f      	ldr	r1, [pc, #316]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004cb0:	4313      	orrs	r3, r2
 8004cb2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004cb6:	e001      	b.n	8004cbc <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cb8:	7cfb      	ldrb	r3, [r7, #19]
 8004cba:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	f000 80a0 	beq.w	8004e0a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004cca:	2300      	movs	r3, #0
 8004ccc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004cce:	4b47      	ldr	r3, [pc, #284]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004cd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d101      	bne.n	8004cde <HAL_RCCEx_PeriphCLKConfig+0x152>
 8004cda:	2301      	movs	r3, #1
 8004cdc:	e000      	b.n	8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8004cde:	2300      	movs	r3, #0
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d00d      	beq.n	8004d00 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ce4:	4b41      	ldr	r3, [pc, #260]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ce6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ce8:	4a40      	ldr	r2, [pc, #256]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004cea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004cee:	6593      	str	r3, [r2, #88]	; 0x58
 8004cf0:	4b3e      	ldr	r3, [pc, #248]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004cf2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cf4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cf8:	60bb      	str	r3, [r7, #8]
 8004cfa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004cfc:	2301      	movs	r3, #1
 8004cfe:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004d00:	4b3b      	ldr	r3, [pc, #236]	; (8004df0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	4a3a      	ldr	r2, [pc, #232]	; (8004df0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004d06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d0a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004d0c:	f7fd fb40 	bl	8002390 <HAL_GetTick>
 8004d10:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004d12:	e009      	b.n	8004d28 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d14:	f7fd fb3c 	bl	8002390 <HAL_GetTick>
 8004d18:	4602      	mov	r2, r0
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	1ad3      	subs	r3, r2, r3
 8004d1e:	2b02      	cmp	r3, #2
 8004d20:	d902      	bls.n	8004d28 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8004d22:	2303      	movs	r3, #3
 8004d24:	74fb      	strb	r3, [r7, #19]
        break;
 8004d26:	e005      	b.n	8004d34 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004d28:	4b31      	ldr	r3, [pc, #196]	; (8004df0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d0ef      	beq.n	8004d14 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004d34:	7cfb      	ldrb	r3, [r7, #19]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d15c      	bne.n	8004df4 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004d3a:	4b2c      	ldr	r3, [pc, #176]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d40:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d44:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004d46:	697b      	ldr	r3, [r7, #20]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d01f      	beq.n	8004d8c <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d52:	697a      	ldr	r2, [r7, #20]
 8004d54:	429a      	cmp	r2, r3
 8004d56:	d019      	beq.n	8004d8c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004d58:	4b24      	ldr	r3, [pc, #144]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d5e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d62:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004d64:	4b21      	ldr	r3, [pc, #132]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d6a:	4a20      	ldr	r2, [pc, #128]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d70:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004d74:	4b1d      	ldr	r3, [pc, #116]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d7a:	4a1c      	ldr	r2, [pc, #112]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d7c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d80:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004d84:	4a19      	ldr	r2, [pc, #100]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d86:	697b      	ldr	r3, [r7, #20]
 8004d88:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004d8c:	697b      	ldr	r3, [r7, #20]
 8004d8e:	f003 0301 	and.w	r3, r3, #1
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d016      	beq.n	8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d96:	f7fd fafb 	bl	8002390 <HAL_GetTick>
 8004d9a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004d9c:	e00b      	b.n	8004db6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d9e:	f7fd faf7 	bl	8002390 <HAL_GetTick>
 8004da2:	4602      	mov	r2, r0
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	1ad3      	subs	r3, r2, r3
 8004da8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004dac:	4293      	cmp	r3, r2
 8004dae:	d902      	bls.n	8004db6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004db0:	2303      	movs	r3, #3
 8004db2:	74fb      	strb	r3, [r7, #19]
            break;
 8004db4:	e006      	b.n	8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004db6:	4b0d      	ldr	r3, [pc, #52]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004db8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dbc:	f003 0302 	and.w	r3, r3, #2
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d0ec      	beq.n	8004d9e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004dc4:	7cfb      	ldrb	r3, [r7, #19]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d10c      	bne.n	8004de4 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004dca:	4b08      	ldr	r3, [pc, #32]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004dcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dd0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004dda:	4904      	ldr	r1, [pc, #16]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ddc:	4313      	orrs	r3, r2
 8004dde:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004de2:	e009      	b.n	8004df8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004de4:	7cfb      	ldrb	r3, [r7, #19]
 8004de6:	74bb      	strb	r3, [r7, #18]
 8004de8:	e006      	b.n	8004df8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8004dea:	bf00      	nop
 8004dec:	40021000 	.word	0x40021000
 8004df0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004df4:	7cfb      	ldrb	r3, [r7, #19]
 8004df6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004df8:	7c7b      	ldrb	r3, [r7, #17]
 8004dfa:	2b01      	cmp	r3, #1
 8004dfc:	d105      	bne.n	8004e0a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004dfe:	4b9e      	ldr	r3, [pc, #632]	; (8005078 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e02:	4a9d      	ldr	r2, [pc, #628]	; (8005078 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e04:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e08:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f003 0301 	and.w	r3, r3, #1
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d00a      	beq.n	8004e2c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004e16:	4b98      	ldr	r3, [pc, #608]	; (8005078 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e1c:	f023 0203 	bic.w	r2, r3, #3
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e24:	4994      	ldr	r1, [pc, #592]	; (8005078 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e26:	4313      	orrs	r3, r2
 8004e28:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f003 0302 	and.w	r3, r3, #2
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d00a      	beq.n	8004e4e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004e38:	4b8f      	ldr	r3, [pc, #572]	; (8005078 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e3e:	f023 020c 	bic.w	r2, r3, #12
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e46:	498c      	ldr	r1, [pc, #560]	; (8005078 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e48:	4313      	orrs	r3, r2
 8004e4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f003 0304 	and.w	r3, r3, #4
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d00a      	beq.n	8004e70 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004e5a:	4b87      	ldr	r3, [pc, #540]	; (8005078 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e60:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e68:	4983      	ldr	r1, [pc, #524]	; (8005078 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e6a:	4313      	orrs	r3, r2
 8004e6c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f003 0308 	and.w	r3, r3, #8
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d00a      	beq.n	8004e92 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004e7c:	4b7e      	ldr	r3, [pc, #504]	; (8005078 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e82:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e8a:	497b      	ldr	r1, [pc, #492]	; (8005078 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e8c:	4313      	orrs	r3, r2
 8004e8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f003 0310 	and.w	r3, r3, #16
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d00a      	beq.n	8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004e9e:	4b76      	ldr	r3, [pc, #472]	; (8005078 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ea0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ea4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004eac:	4972      	ldr	r1, [pc, #456]	; (8005078 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004eae:	4313      	orrs	r3, r2
 8004eb0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f003 0320 	and.w	r3, r3, #32
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d00a      	beq.n	8004ed6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004ec0:	4b6d      	ldr	r3, [pc, #436]	; (8005078 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ec2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ec6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ece:	496a      	ldr	r1, [pc, #424]	; (8005078 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ed0:	4313      	orrs	r3, r2
 8004ed2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d00a      	beq.n	8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004ee2:	4b65      	ldr	r3, [pc, #404]	; (8005078 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ee4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ee8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ef0:	4961      	ldr	r1, [pc, #388]	; (8005078 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ef2:	4313      	orrs	r3, r2
 8004ef4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d00a      	beq.n	8004f1a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004f04:	4b5c      	ldr	r3, [pc, #368]	; (8005078 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f0a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f12:	4959      	ldr	r1, [pc, #356]	; (8005078 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f14:	4313      	orrs	r3, r2
 8004f16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d00a      	beq.n	8004f3c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004f26:	4b54      	ldr	r3, [pc, #336]	; (8005078 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f2c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f34:	4950      	ldr	r1, [pc, #320]	; (8005078 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f36:	4313      	orrs	r3, r2
 8004f38:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d00a      	beq.n	8004f5e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004f48:	4b4b      	ldr	r3, [pc, #300]	; (8005078 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f4e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f56:	4948      	ldr	r1, [pc, #288]	; (8005078 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f58:	4313      	orrs	r3, r2
 8004f5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d00a      	beq.n	8004f80 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004f6a:	4b43      	ldr	r3, [pc, #268]	; (8005078 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f70:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f78:	493f      	ldr	r1, [pc, #252]	; (8005078 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f7a:	4313      	orrs	r3, r2
 8004f7c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d028      	beq.n	8004fde <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004f8c:	4b3a      	ldr	r3, [pc, #232]	; (8005078 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f92:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f9a:	4937      	ldr	r1, [pc, #220]	; (8005078 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f9c:	4313      	orrs	r3, r2
 8004f9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004fa6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004faa:	d106      	bne.n	8004fba <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004fac:	4b32      	ldr	r3, [pc, #200]	; (8005078 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004fae:	68db      	ldr	r3, [r3, #12]
 8004fb0:	4a31      	ldr	r2, [pc, #196]	; (8005078 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004fb2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004fb6:	60d3      	str	r3, [r2, #12]
 8004fb8:	e011      	b.n	8004fde <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004fbe:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004fc2:	d10c      	bne.n	8004fde <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	3304      	adds	r3, #4
 8004fc8:	2101      	movs	r1, #1
 8004fca:	4618      	mov	r0, r3
 8004fcc:	f000 f8d8 	bl	8005180 <RCCEx_PLLSAI1_Config>
 8004fd0:	4603      	mov	r3, r0
 8004fd2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004fd4:	7cfb      	ldrb	r3, [r7, #19]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d001      	beq.n	8004fde <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8004fda:	7cfb      	ldrb	r3, [r7, #19]
 8004fdc:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d028      	beq.n	800503c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004fea:	4b23      	ldr	r3, [pc, #140]	; (8005078 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004fec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ff0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ff8:	491f      	ldr	r1, [pc, #124]	; (8005078 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ffa:	4313      	orrs	r3, r2
 8004ffc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005004:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005008:	d106      	bne.n	8005018 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800500a:	4b1b      	ldr	r3, [pc, #108]	; (8005078 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800500c:	68db      	ldr	r3, [r3, #12]
 800500e:	4a1a      	ldr	r2, [pc, #104]	; (8005078 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005010:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005014:	60d3      	str	r3, [r2, #12]
 8005016:	e011      	b.n	800503c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800501c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005020:	d10c      	bne.n	800503c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	3304      	adds	r3, #4
 8005026:	2101      	movs	r1, #1
 8005028:	4618      	mov	r0, r3
 800502a:	f000 f8a9 	bl	8005180 <RCCEx_PLLSAI1_Config>
 800502e:	4603      	mov	r3, r0
 8005030:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005032:	7cfb      	ldrb	r3, [r7, #19]
 8005034:	2b00      	cmp	r3, #0
 8005036:	d001      	beq.n	800503c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8005038:	7cfb      	ldrb	r3, [r7, #19]
 800503a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005044:	2b00      	cmp	r3, #0
 8005046:	d02b      	beq.n	80050a0 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005048:	4b0b      	ldr	r3, [pc, #44]	; (8005078 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800504a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800504e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005056:	4908      	ldr	r1, [pc, #32]	; (8005078 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005058:	4313      	orrs	r3, r2
 800505a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005062:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005066:	d109      	bne.n	800507c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005068:	4b03      	ldr	r3, [pc, #12]	; (8005078 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800506a:	68db      	ldr	r3, [r3, #12]
 800506c:	4a02      	ldr	r2, [pc, #8]	; (8005078 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800506e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005072:	60d3      	str	r3, [r2, #12]
 8005074:	e014      	b.n	80050a0 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8005076:	bf00      	nop
 8005078:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005080:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005084:	d10c      	bne.n	80050a0 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	3304      	adds	r3, #4
 800508a:	2101      	movs	r1, #1
 800508c:	4618      	mov	r0, r3
 800508e:	f000 f877 	bl	8005180 <RCCEx_PLLSAI1_Config>
 8005092:	4603      	mov	r3, r0
 8005094:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005096:	7cfb      	ldrb	r3, [r7, #19]
 8005098:	2b00      	cmp	r3, #0
 800509a:	d001      	beq.n	80050a0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800509c:	7cfb      	ldrb	r3, [r7, #19]
 800509e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d02f      	beq.n	800510c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80050ac:	4b2b      	ldr	r3, [pc, #172]	; (800515c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80050ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050b2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80050ba:	4928      	ldr	r1, [pc, #160]	; (800515c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80050bc:	4313      	orrs	r3, r2
 80050be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80050c6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80050ca:	d10d      	bne.n	80050e8 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	3304      	adds	r3, #4
 80050d0:	2102      	movs	r1, #2
 80050d2:	4618      	mov	r0, r3
 80050d4:	f000 f854 	bl	8005180 <RCCEx_PLLSAI1_Config>
 80050d8:	4603      	mov	r3, r0
 80050da:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80050dc:	7cfb      	ldrb	r3, [r7, #19]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d014      	beq.n	800510c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80050e2:	7cfb      	ldrb	r3, [r7, #19]
 80050e4:	74bb      	strb	r3, [r7, #18]
 80050e6:	e011      	b.n	800510c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80050ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80050f0:	d10c      	bne.n	800510c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	3320      	adds	r3, #32
 80050f6:	2102      	movs	r1, #2
 80050f8:	4618      	mov	r0, r3
 80050fa:	f000 f935 	bl	8005368 <RCCEx_PLLSAI2_Config>
 80050fe:	4603      	mov	r3, r0
 8005100:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005102:	7cfb      	ldrb	r3, [r7, #19]
 8005104:	2b00      	cmp	r3, #0
 8005106:	d001      	beq.n	800510c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005108:	7cfb      	ldrb	r3, [r7, #19]
 800510a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005114:	2b00      	cmp	r3, #0
 8005116:	d00a      	beq.n	800512e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005118:	4b10      	ldr	r3, [pc, #64]	; (800515c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800511a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800511e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005126:	490d      	ldr	r1, [pc, #52]	; (800515c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005128:	4313      	orrs	r3, r2
 800512a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005136:	2b00      	cmp	r3, #0
 8005138:	d00b      	beq.n	8005152 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800513a:	4b08      	ldr	r3, [pc, #32]	; (800515c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800513c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005140:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800514a:	4904      	ldr	r1, [pc, #16]	; (800515c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800514c:	4313      	orrs	r3, r2
 800514e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005152:	7cbb      	ldrb	r3, [r7, #18]
}
 8005154:	4618      	mov	r0, r3
 8005156:	3718      	adds	r7, #24
 8005158:	46bd      	mov	sp, r7
 800515a:	bd80      	pop	{r7, pc}
 800515c:	40021000 	.word	0x40021000

08005160 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8005160:	b480      	push	{r7}
 8005162:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8005164:	4b05      	ldr	r3, [pc, #20]	; (800517c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	4a04      	ldr	r2, [pc, #16]	; (800517c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800516a:	f043 0304 	orr.w	r3, r3, #4
 800516e:	6013      	str	r3, [r2, #0]
}
 8005170:	bf00      	nop
 8005172:	46bd      	mov	sp, r7
 8005174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005178:	4770      	bx	lr
 800517a:	bf00      	nop
 800517c:	40021000 	.word	0x40021000

08005180 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005180:	b580      	push	{r7, lr}
 8005182:	b084      	sub	sp, #16
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
 8005188:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800518a:	2300      	movs	r3, #0
 800518c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800518e:	4b75      	ldr	r3, [pc, #468]	; (8005364 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005190:	68db      	ldr	r3, [r3, #12]
 8005192:	f003 0303 	and.w	r3, r3, #3
 8005196:	2b00      	cmp	r3, #0
 8005198:	d018      	beq.n	80051cc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800519a:	4b72      	ldr	r3, [pc, #456]	; (8005364 <RCCEx_PLLSAI1_Config+0x1e4>)
 800519c:	68db      	ldr	r3, [r3, #12]
 800519e:	f003 0203 	and.w	r2, r3, #3
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	429a      	cmp	r2, r3
 80051a8:	d10d      	bne.n	80051c6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
       ||
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d009      	beq.n	80051c6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80051b2:	4b6c      	ldr	r3, [pc, #432]	; (8005364 <RCCEx_PLLSAI1_Config+0x1e4>)
 80051b4:	68db      	ldr	r3, [r3, #12]
 80051b6:	091b      	lsrs	r3, r3, #4
 80051b8:	f003 0307 	and.w	r3, r3, #7
 80051bc:	1c5a      	adds	r2, r3, #1
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	685b      	ldr	r3, [r3, #4]
       ||
 80051c2:	429a      	cmp	r2, r3
 80051c4:	d047      	beq.n	8005256 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80051c6:	2301      	movs	r3, #1
 80051c8:	73fb      	strb	r3, [r7, #15]
 80051ca:	e044      	b.n	8005256 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	2b03      	cmp	r3, #3
 80051d2:	d018      	beq.n	8005206 <RCCEx_PLLSAI1_Config+0x86>
 80051d4:	2b03      	cmp	r3, #3
 80051d6:	d825      	bhi.n	8005224 <RCCEx_PLLSAI1_Config+0xa4>
 80051d8:	2b01      	cmp	r3, #1
 80051da:	d002      	beq.n	80051e2 <RCCEx_PLLSAI1_Config+0x62>
 80051dc:	2b02      	cmp	r3, #2
 80051de:	d009      	beq.n	80051f4 <RCCEx_PLLSAI1_Config+0x74>
 80051e0:	e020      	b.n	8005224 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80051e2:	4b60      	ldr	r3, [pc, #384]	; (8005364 <RCCEx_PLLSAI1_Config+0x1e4>)
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f003 0302 	and.w	r3, r3, #2
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d11d      	bne.n	800522a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80051ee:	2301      	movs	r3, #1
 80051f0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80051f2:	e01a      	b.n	800522a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80051f4:	4b5b      	ldr	r3, [pc, #364]	; (8005364 <RCCEx_PLLSAI1_Config+0x1e4>)
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d116      	bne.n	800522e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005200:	2301      	movs	r3, #1
 8005202:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005204:	e013      	b.n	800522e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005206:	4b57      	ldr	r3, [pc, #348]	; (8005364 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800520e:	2b00      	cmp	r3, #0
 8005210:	d10f      	bne.n	8005232 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005212:	4b54      	ldr	r3, [pc, #336]	; (8005364 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800521a:	2b00      	cmp	r3, #0
 800521c:	d109      	bne.n	8005232 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800521e:	2301      	movs	r3, #1
 8005220:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005222:	e006      	b.n	8005232 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005224:	2301      	movs	r3, #1
 8005226:	73fb      	strb	r3, [r7, #15]
      break;
 8005228:	e004      	b.n	8005234 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800522a:	bf00      	nop
 800522c:	e002      	b.n	8005234 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800522e:	bf00      	nop
 8005230:	e000      	b.n	8005234 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005232:	bf00      	nop
    }

    if(status == HAL_OK)
 8005234:	7bfb      	ldrb	r3, [r7, #15]
 8005236:	2b00      	cmp	r3, #0
 8005238:	d10d      	bne.n	8005256 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800523a:	4b4a      	ldr	r3, [pc, #296]	; (8005364 <RCCEx_PLLSAI1_Config+0x1e4>)
 800523c:	68db      	ldr	r3, [r3, #12]
 800523e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6819      	ldr	r1, [r3, #0]
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	685b      	ldr	r3, [r3, #4]
 800524a:	3b01      	subs	r3, #1
 800524c:	011b      	lsls	r3, r3, #4
 800524e:	430b      	orrs	r3, r1
 8005250:	4944      	ldr	r1, [pc, #272]	; (8005364 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005252:	4313      	orrs	r3, r2
 8005254:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005256:	7bfb      	ldrb	r3, [r7, #15]
 8005258:	2b00      	cmp	r3, #0
 800525a:	d17d      	bne.n	8005358 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800525c:	4b41      	ldr	r3, [pc, #260]	; (8005364 <RCCEx_PLLSAI1_Config+0x1e4>)
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	4a40      	ldr	r2, [pc, #256]	; (8005364 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005262:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005266:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005268:	f7fd f892 	bl	8002390 <HAL_GetTick>
 800526c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800526e:	e009      	b.n	8005284 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005270:	f7fd f88e 	bl	8002390 <HAL_GetTick>
 8005274:	4602      	mov	r2, r0
 8005276:	68bb      	ldr	r3, [r7, #8]
 8005278:	1ad3      	subs	r3, r2, r3
 800527a:	2b02      	cmp	r3, #2
 800527c:	d902      	bls.n	8005284 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800527e:	2303      	movs	r3, #3
 8005280:	73fb      	strb	r3, [r7, #15]
        break;
 8005282:	e005      	b.n	8005290 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005284:	4b37      	ldr	r3, [pc, #220]	; (8005364 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800528c:	2b00      	cmp	r3, #0
 800528e:	d1ef      	bne.n	8005270 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005290:	7bfb      	ldrb	r3, [r7, #15]
 8005292:	2b00      	cmp	r3, #0
 8005294:	d160      	bne.n	8005358 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	2b00      	cmp	r3, #0
 800529a:	d111      	bne.n	80052c0 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800529c:	4b31      	ldr	r3, [pc, #196]	; (8005364 <RCCEx_PLLSAI1_Config+0x1e4>)
 800529e:	691b      	ldr	r3, [r3, #16]
 80052a0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80052a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80052a8:	687a      	ldr	r2, [r7, #4]
 80052aa:	6892      	ldr	r2, [r2, #8]
 80052ac:	0211      	lsls	r1, r2, #8
 80052ae:	687a      	ldr	r2, [r7, #4]
 80052b0:	68d2      	ldr	r2, [r2, #12]
 80052b2:	0912      	lsrs	r2, r2, #4
 80052b4:	0452      	lsls	r2, r2, #17
 80052b6:	430a      	orrs	r2, r1
 80052b8:	492a      	ldr	r1, [pc, #168]	; (8005364 <RCCEx_PLLSAI1_Config+0x1e4>)
 80052ba:	4313      	orrs	r3, r2
 80052bc:	610b      	str	r3, [r1, #16]
 80052be:	e027      	b.n	8005310 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	2b01      	cmp	r3, #1
 80052c4:	d112      	bne.n	80052ec <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80052c6:	4b27      	ldr	r3, [pc, #156]	; (8005364 <RCCEx_PLLSAI1_Config+0x1e4>)
 80052c8:	691b      	ldr	r3, [r3, #16]
 80052ca:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80052ce:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80052d2:	687a      	ldr	r2, [r7, #4]
 80052d4:	6892      	ldr	r2, [r2, #8]
 80052d6:	0211      	lsls	r1, r2, #8
 80052d8:	687a      	ldr	r2, [r7, #4]
 80052da:	6912      	ldr	r2, [r2, #16]
 80052dc:	0852      	lsrs	r2, r2, #1
 80052de:	3a01      	subs	r2, #1
 80052e0:	0552      	lsls	r2, r2, #21
 80052e2:	430a      	orrs	r2, r1
 80052e4:	491f      	ldr	r1, [pc, #124]	; (8005364 <RCCEx_PLLSAI1_Config+0x1e4>)
 80052e6:	4313      	orrs	r3, r2
 80052e8:	610b      	str	r3, [r1, #16]
 80052ea:	e011      	b.n	8005310 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80052ec:	4b1d      	ldr	r3, [pc, #116]	; (8005364 <RCCEx_PLLSAI1_Config+0x1e4>)
 80052ee:	691b      	ldr	r3, [r3, #16]
 80052f0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80052f4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80052f8:	687a      	ldr	r2, [r7, #4]
 80052fa:	6892      	ldr	r2, [r2, #8]
 80052fc:	0211      	lsls	r1, r2, #8
 80052fe:	687a      	ldr	r2, [r7, #4]
 8005300:	6952      	ldr	r2, [r2, #20]
 8005302:	0852      	lsrs	r2, r2, #1
 8005304:	3a01      	subs	r2, #1
 8005306:	0652      	lsls	r2, r2, #25
 8005308:	430a      	orrs	r2, r1
 800530a:	4916      	ldr	r1, [pc, #88]	; (8005364 <RCCEx_PLLSAI1_Config+0x1e4>)
 800530c:	4313      	orrs	r3, r2
 800530e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005310:	4b14      	ldr	r3, [pc, #80]	; (8005364 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	4a13      	ldr	r2, [pc, #76]	; (8005364 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005316:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800531a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800531c:	f7fd f838 	bl	8002390 <HAL_GetTick>
 8005320:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005322:	e009      	b.n	8005338 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005324:	f7fd f834 	bl	8002390 <HAL_GetTick>
 8005328:	4602      	mov	r2, r0
 800532a:	68bb      	ldr	r3, [r7, #8]
 800532c:	1ad3      	subs	r3, r2, r3
 800532e:	2b02      	cmp	r3, #2
 8005330:	d902      	bls.n	8005338 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8005332:	2303      	movs	r3, #3
 8005334:	73fb      	strb	r3, [r7, #15]
          break;
 8005336:	e005      	b.n	8005344 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005338:	4b0a      	ldr	r3, [pc, #40]	; (8005364 <RCCEx_PLLSAI1_Config+0x1e4>)
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005340:	2b00      	cmp	r3, #0
 8005342:	d0ef      	beq.n	8005324 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8005344:	7bfb      	ldrb	r3, [r7, #15]
 8005346:	2b00      	cmp	r3, #0
 8005348:	d106      	bne.n	8005358 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800534a:	4b06      	ldr	r3, [pc, #24]	; (8005364 <RCCEx_PLLSAI1_Config+0x1e4>)
 800534c:	691a      	ldr	r2, [r3, #16]
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	699b      	ldr	r3, [r3, #24]
 8005352:	4904      	ldr	r1, [pc, #16]	; (8005364 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005354:	4313      	orrs	r3, r2
 8005356:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005358:	7bfb      	ldrb	r3, [r7, #15]
}
 800535a:	4618      	mov	r0, r3
 800535c:	3710      	adds	r7, #16
 800535e:	46bd      	mov	sp, r7
 8005360:	bd80      	pop	{r7, pc}
 8005362:	bf00      	nop
 8005364:	40021000 	.word	0x40021000

08005368 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005368:	b580      	push	{r7, lr}
 800536a:	b084      	sub	sp, #16
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
 8005370:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005372:	2300      	movs	r3, #0
 8005374:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005376:	4b6a      	ldr	r3, [pc, #424]	; (8005520 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005378:	68db      	ldr	r3, [r3, #12]
 800537a:	f003 0303 	and.w	r3, r3, #3
 800537e:	2b00      	cmp	r3, #0
 8005380:	d018      	beq.n	80053b4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005382:	4b67      	ldr	r3, [pc, #412]	; (8005520 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005384:	68db      	ldr	r3, [r3, #12]
 8005386:	f003 0203 	and.w	r2, r3, #3
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	429a      	cmp	r2, r3
 8005390:	d10d      	bne.n	80053ae <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
       ||
 8005396:	2b00      	cmp	r3, #0
 8005398:	d009      	beq.n	80053ae <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800539a:	4b61      	ldr	r3, [pc, #388]	; (8005520 <RCCEx_PLLSAI2_Config+0x1b8>)
 800539c:	68db      	ldr	r3, [r3, #12]
 800539e:	091b      	lsrs	r3, r3, #4
 80053a0:	f003 0307 	and.w	r3, r3, #7
 80053a4:	1c5a      	adds	r2, r3, #1
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	685b      	ldr	r3, [r3, #4]
       ||
 80053aa:	429a      	cmp	r2, r3
 80053ac:	d047      	beq.n	800543e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80053ae:	2301      	movs	r3, #1
 80053b0:	73fb      	strb	r3, [r7, #15]
 80053b2:	e044      	b.n	800543e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	2b03      	cmp	r3, #3
 80053ba:	d018      	beq.n	80053ee <RCCEx_PLLSAI2_Config+0x86>
 80053bc:	2b03      	cmp	r3, #3
 80053be:	d825      	bhi.n	800540c <RCCEx_PLLSAI2_Config+0xa4>
 80053c0:	2b01      	cmp	r3, #1
 80053c2:	d002      	beq.n	80053ca <RCCEx_PLLSAI2_Config+0x62>
 80053c4:	2b02      	cmp	r3, #2
 80053c6:	d009      	beq.n	80053dc <RCCEx_PLLSAI2_Config+0x74>
 80053c8:	e020      	b.n	800540c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80053ca:	4b55      	ldr	r3, [pc, #340]	; (8005520 <RCCEx_PLLSAI2_Config+0x1b8>)
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f003 0302 	and.w	r3, r3, #2
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d11d      	bne.n	8005412 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80053d6:	2301      	movs	r3, #1
 80053d8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80053da:	e01a      	b.n	8005412 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80053dc:	4b50      	ldr	r3, [pc, #320]	; (8005520 <RCCEx_PLLSAI2_Config+0x1b8>)
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d116      	bne.n	8005416 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80053e8:	2301      	movs	r3, #1
 80053ea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80053ec:	e013      	b.n	8005416 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80053ee:	4b4c      	ldr	r3, [pc, #304]	; (8005520 <RCCEx_PLLSAI2_Config+0x1b8>)
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d10f      	bne.n	800541a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80053fa:	4b49      	ldr	r3, [pc, #292]	; (8005520 <RCCEx_PLLSAI2_Config+0x1b8>)
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005402:	2b00      	cmp	r3, #0
 8005404:	d109      	bne.n	800541a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8005406:	2301      	movs	r3, #1
 8005408:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800540a:	e006      	b.n	800541a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800540c:	2301      	movs	r3, #1
 800540e:	73fb      	strb	r3, [r7, #15]
      break;
 8005410:	e004      	b.n	800541c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005412:	bf00      	nop
 8005414:	e002      	b.n	800541c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005416:	bf00      	nop
 8005418:	e000      	b.n	800541c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800541a:	bf00      	nop
    }

    if(status == HAL_OK)
 800541c:	7bfb      	ldrb	r3, [r7, #15]
 800541e:	2b00      	cmp	r3, #0
 8005420:	d10d      	bne.n	800543e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005422:	4b3f      	ldr	r3, [pc, #252]	; (8005520 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005424:	68db      	ldr	r3, [r3, #12]
 8005426:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	6819      	ldr	r1, [r3, #0]
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	685b      	ldr	r3, [r3, #4]
 8005432:	3b01      	subs	r3, #1
 8005434:	011b      	lsls	r3, r3, #4
 8005436:	430b      	orrs	r3, r1
 8005438:	4939      	ldr	r1, [pc, #228]	; (8005520 <RCCEx_PLLSAI2_Config+0x1b8>)
 800543a:	4313      	orrs	r3, r2
 800543c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800543e:	7bfb      	ldrb	r3, [r7, #15]
 8005440:	2b00      	cmp	r3, #0
 8005442:	d167      	bne.n	8005514 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005444:	4b36      	ldr	r3, [pc, #216]	; (8005520 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	4a35      	ldr	r2, [pc, #212]	; (8005520 <RCCEx_PLLSAI2_Config+0x1b8>)
 800544a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800544e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005450:	f7fc ff9e 	bl	8002390 <HAL_GetTick>
 8005454:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005456:	e009      	b.n	800546c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005458:	f7fc ff9a 	bl	8002390 <HAL_GetTick>
 800545c:	4602      	mov	r2, r0
 800545e:	68bb      	ldr	r3, [r7, #8]
 8005460:	1ad3      	subs	r3, r2, r3
 8005462:	2b02      	cmp	r3, #2
 8005464:	d902      	bls.n	800546c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005466:	2303      	movs	r3, #3
 8005468:	73fb      	strb	r3, [r7, #15]
        break;
 800546a:	e005      	b.n	8005478 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800546c:	4b2c      	ldr	r3, [pc, #176]	; (8005520 <RCCEx_PLLSAI2_Config+0x1b8>)
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005474:	2b00      	cmp	r3, #0
 8005476:	d1ef      	bne.n	8005458 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005478:	7bfb      	ldrb	r3, [r7, #15]
 800547a:	2b00      	cmp	r3, #0
 800547c:	d14a      	bne.n	8005514 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800547e:	683b      	ldr	r3, [r7, #0]
 8005480:	2b00      	cmp	r3, #0
 8005482:	d111      	bne.n	80054a8 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005484:	4b26      	ldr	r3, [pc, #152]	; (8005520 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005486:	695b      	ldr	r3, [r3, #20]
 8005488:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800548c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005490:	687a      	ldr	r2, [r7, #4]
 8005492:	6892      	ldr	r2, [r2, #8]
 8005494:	0211      	lsls	r1, r2, #8
 8005496:	687a      	ldr	r2, [r7, #4]
 8005498:	68d2      	ldr	r2, [r2, #12]
 800549a:	0912      	lsrs	r2, r2, #4
 800549c:	0452      	lsls	r2, r2, #17
 800549e:	430a      	orrs	r2, r1
 80054a0:	491f      	ldr	r1, [pc, #124]	; (8005520 <RCCEx_PLLSAI2_Config+0x1b8>)
 80054a2:	4313      	orrs	r3, r2
 80054a4:	614b      	str	r3, [r1, #20]
 80054a6:	e011      	b.n	80054cc <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80054a8:	4b1d      	ldr	r3, [pc, #116]	; (8005520 <RCCEx_PLLSAI2_Config+0x1b8>)
 80054aa:	695b      	ldr	r3, [r3, #20]
 80054ac:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80054b0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80054b4:	687a      	ldr	r2, [r7, #4]
 80054b6:	6892      	ldr	r2, [r2, #8]
 80054b8:	0211      	lsls	r1, r2, #8
 80054ba:	687a      	ldr	r2, [r7, #4]
 80054bc:	6912      	ldr	r2, [r2, #16]
 80054be:	0852      	lsrs	r2, r2, #1
 80054c0:	3a01      	subs	r2, #1
 80054c2:	0652      	lsls	r2, r2, #25
 80054c4:	430a      	orrs	r2, r1
 80054c6:	4916      	ldr	r1, [pc, #88]	; (8005520 <RCCEx_PLLSAI2_Config+0x1b8>)
 80054c8:	4313      	orrs	r3, r2
 80054ca:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80054cc:	4b14      	ldr	r3, [pc, #80]	; (8005520 <RCCEx_PLLSAI2_Config+0x1b8>)
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	4a13      	ldr	r2, [pc, #76]	; (8005520 <RCCEx_PLLSAI2_Config+0x1b8>)
 80054d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80054d6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054d8:	f7fc ff5a 	bl	8002390 <HAL_GetTick>
 80054dc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80054de:	e009      	b.n	80054f4 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80054e0:	f7fc ff56 	bl	8002390 <HAL_GetTick>
 80054e4:	4602      	mov	r2, r0
 80054e6:	68bb      	ldr	r3, [r7, #8]
 80054e8:	1ad3      	subs	r3, r2, r3
 80054ea:	2b02      	cmp	r3, #2
 80054ec:	d902      	bls.n	80054f4 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80054ee:	2303      	movs	r3, #3
 80054f0:	73fb      	strb	r3, [r7, #15]
          break;
 80054f2:	e005      	b.n	8005500 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80054f4:	4b0a      	ldr	r3, [pc, #40]	; (8005520 <RCCEx_PLLSAI2_Config+0x1b8>)
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d0ef      	beq.n	80054e0 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8005500:	7bfb      	ldrb	r3, [r7, #15]
 8005502:	2b00      	cmp	r3, #0
 8005504:	d106      	bne.n	8005514 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005506:	4b06      	ldr	r3, [pc, #24]	; (8005520 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005508:	695a      	ldr	r2, [r3, #20]
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	695b      	ldr	r3, [r3, #20]
 800550e:	4904      	ldr	r1, [pc, #16]	; (8005520 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005510:	4313      	orrs	r3, r2
 8005512:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005514:	7bfb      	ldrb	r3, [r7, #15]
}
 8005516:	4618      	mov	r0, r3
 8005518:	3710      	adds	r7, #16
 800551a:	46bd      	mov	sp, r7
 800551c:	bd80      	pop	{r7, pc}
 800551e:	bf00      	nop
 8005520:	40021000 	.word	0x40021000

08005524 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005524:	b580      	push	{r7, lr}
 8005526:	b084      	sub	sp, #16
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800552c:	2301      	movs	r3, #1
 800552e:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2b00      	cmp	r3, #0
 8005534:	d06c      	beq.n	8005610 <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800553c:	b2db      	uxtb	r3, r3
 800553e:	2b00      	cmp	r3, #0
 8005540:	d106      	bne.n	8005550 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	2200      	movs	r2, #0
 8005546:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800554a:	6878      	ldr	r0, [r7, #4]
 800554c:	f7fc fb1c 	bl	8001b88 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2202      	movs	r2, #2
 8005554:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	22ca      	movs	r2, #202	; 0xca
 800555e:	625a      	str	r2, [r3, #36]	; 0x24
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	2253      	movs	r2, #83	; 0x53
 8005566:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8005568:	6878      	ldr	r0, [r7, #4]
 800556a:	f000 fa49 	bl	8005a00 <RTC_EnterInitMode>
 800556e:	4603      	mov	r3, r0
 8005570:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8005572:	7bfb      	ldrb	r3, [r7, #15]
 8005574:	2b00      	cmp	r3, #0
 8005576:	d14b      	bne.n	8005610 <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	689b      	ldr	r3, [r3, #8]
 800557e:	687a      	ldr	r2, [r7, #4]
 8005580:	6812      	ldr	r2, [r2, #0]
 8005582:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005586:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800558a:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	6899      	ldr	r1, [r3, #8]
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	685a      	ldr	r2, [r3, #4]
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	691b      	ldr	r3, [r3, #16]
 800559a:	431a      	orrs	r2, r3
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	699b      	ldr	r3, [r3, #24]
 80055a0:	431a      	orrs	r2, r3
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	430a      	orrs	r2, r1
 80055a8:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	687a      	ldr	r2, [r7, #4]
 80055b0:	68d2      	ldr	r2, [r2, #12]
 80055b2:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	6919      	ldr	r1, [r3, #16]
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	689b      	ldr	r3, [r3, #8]
 80055be:	041a      	lsls	r2, r3, #16
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	430a      	orrs	r2, r1
 80055c6:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80055c8:	6878      	ldr	r0, [r7, #4]
 80055ca:	f000 fa4d 	bl	8005a68 <RTC_ExitInitMode>
 80055ce:	4603      	mov	r3, r0
 80055d0:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 80055d2:	7bfb      	ldrb	r3, [r7, #15]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d11b      	bne.n	8005610 <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f022 0203 	bic.w	r2, r2, #3
 80055e6:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	69da      	ldr	r2, [r3, #28]
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	695b      	ldr	r3, [r3, #20]
 80055f6:	431a      	orrs	r2, r3
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	430a      	orrs	r2, r1
 80055fe:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	22ff      	movs	r2, #255	; 0xff
 8005606:	625a      	str	r2, [r3, #36]	; 0x24

          hrtc->State = HAL_RTC_STATE_READY;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2201      	movs	r2, #1
 800560c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 8005610:	7bfb      	ldrb	r3, [r7, #15]
}
 8005612:	4618      	mov	r0, r3
 8005614:	3710      	adds	r7, #16
 8005616:	46bd      	mov	sp, r7
 8005618:	bd80      	pop	{r7, pc}

0800561a <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800561a:	b590      	push	{r4, r7, lr}
 800561c:	b087      	sub	sp, #28
 800561e:	af00      	add	r7, sp, #0
 8005620:	60f8      	str	r0, [r7, #12]
 8005622:	60b9      	str	r1, [r7, #8]
 8005624:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	f893 3020 	ldrb.w	r3, [r3, #32]
 800562c:	2b01      	cmp	r3, #1
 800562e:	d101      	bne.n	8005634 <HAL_RTC_SetTime+0x1a>
 8005630:	2302      	movs	r3, #2
 8005632:	e08b      	b.n	800574c <HAL_RTC_SetTime+0x132>
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	2201      	movs	r2, #1
 8005638:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	2202      	movs	r2, #2
 8005640:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	22ca      	movs	r2, #202	; 0xca
 800564a:	625a      	str	r2, [r3, #36]	; 0x24
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	2253      	movs	r2, #83	; 0x53
 8005652:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005654:	68f8      	ldr	r0, [r7, #12]
 8005656:	f000 f9d3 	bl	8005a00 <RTC_EnterInitMode>
 800565a:	4603      	mov	r3, r0
 800565c:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800565e:	7cfb      	ldrb	r3, [r7, #19]
 8005660:	2b00      	cmp	r3, #0
 8005662:	d163      	bne.n	800572c <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2b00      	cmp	r3, #0
 8005668:	d126      	bne.n	80056b8 <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	689b      	ldr	r3, [r3, #8]
 8005670:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005674:	2b00      	cmp	r3, #0
 8005676:	d102      	bne.n	800567e <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8005678:	68bb      	ldr	r3, [r7, #8]
 800567a:	2200      	movs	r2, #0
 800567c:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800567e:	68bb      	ldr	r3, [r7, #8]
 8005680:	781b      	ldrb	r3, [r3, #0]
 8005682:	4618      	mov	r0, r3
 8005684:	f000 fa2e 	bl	8005ae4 <RTC_ByteToBcd2>
 8005688:	4603      	mov	r3, r0
 800568a:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800568c:	68bb      	ldr	r3, [r7, #8]
 800568e:	785b      	ldrb	r3, [r3, #1]
 8005690:	4618      	mov	r0, r3
 8005692:	f000 fa27 	bl	8005ae4 <RTC_ByteToBcd2>
 8005696:	4603      	mov	r3, r0
 8005698:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800569a:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800569c:	68bb      	ldr	r3, [r7, #8]
 800569e:	789b      	ldrb	r3, [r3, #2]
 80056a0:	4618      	mov	r0, r3
 80056a2:	f000 fa1f 	bl	8005ae4 <RTC_ByteToBcd2>
 80056a6:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80056a8:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 80056ac:	68bb      	ldr	r3, [r7, #8]
 80056ae:	78db      	ldrb	r3, [r3, #3]
 80056b0:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80056b2:	4313      	orrs	r3, r2
 80056b4:	617b      	str	r3, [r7, #20]
 80056b6:	e018      	b.n	80056ea <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	689b      	ldr	r3, [r3, #8]
 80056be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d102      	bne.n	80056cc <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80056c6:	68bb      	ldr	r3, [r7, #8]
 80056c8:	2200      	movs	r2, #0
 80056ca:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80056cc:	68bb      	ldr	r3, [r7, #8]
 80056ce:	781b      	ldrb	r3, [r3, #0]
 80056d0:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80056d2:	68bb      	ldr	r3, [r7, #8]
 80056d4:	785b      	ldrb	r3, [r3, #1]
 80056d6:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80056d8:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80056da:	68ba      	ldr	r2, [r7, #8]
 80056dc:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80056de:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80056e0:	68bb      	ldr	r3, [r7, #8]
 80056e2:	78db      	ldrb	r3, [r3, #3]
 80056e4:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80056e6:	4313      	orrs	r3, r2
 80056e8:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	681a      	ldr	r2, [r3, #0]
 80056ee:	697b      	ldr	r3, [r7, #20]
 80056f0:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80056f4:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80056f8:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	689a      	ldr	r2, [r3, #8]
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005708:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	6899      	ldr	r1, [r3, #8]
 8005710:	68bb      	ldr	r3, [r7, #8]
 8005712:	68da      	ldr	r2, [r3, #12]
 8005714:	68bb      	ldr	r3, [r7, #8]
 8005716:	691b      	ldr	r3, [r3, #16]
 8005718:	431a      	orrs	r2, r3
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	430a      	orrs	r2, r1
 8005720:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005722:	68f8      	ldr	r0, [r7, #12]
 8005724:	f000 f9a0 	bl	8005a68 <RTC_ExitInitMode>
 8005728:	4603      	mov	r3, r0
 800572a:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	22ff      	movs	r2, #255	; 0xff
 8005732:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8005734:	7cfb      	ldrb	r3, [r7, #19]
 8005736:	2b00      	cmp	r3, #0
 8005738:	d103      	bne.n	8005742 <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	2201      	movs	r2, #1
 800573e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	2200      	movs	r2, #0
 8005746:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800574a:	7cfb      	ldrb	r3, [r7, #19]
}
 800574c:	4618      	mov	r0, r3
 800574e:	371c      	adds	r7, #28
 8005750:	46bd      	mov	sp, r7
 8005752:	bd90      	pop	{r4, r7, pc}

08005754 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005754:	b580      	push	{r7, lr}
 8005756:	b086      	sub	sp, #24
 8005758:	af00      	add	r7, sp, #0
 800575a:	60f8      	str	r0, [r7, #12]
 800575c:	60b9      	str	r1, [r7, #8]
 800575e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005766:	68bb      	ldr	r3, [r7, #8]
 8005768:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	691b      	ldr	r3, [r3, #16]
 8005770:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8005774:	68bb      	ldr	r3, [r7, #8]
 8005776:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8005782:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005786:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8005788:	697b      	ldr	r3, [r7, #20]
 800578a:	0c1b      	lsrs	r3, r3, #16
 800578c:	b2db      	uxtb	r3, r3
 800578e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005792:	b2da      	uxtb	r2, r3
 8005794:	68bb      	ldr	r3, [r7, #8]
 8005796:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8005798:	697b      	ldr	r3, [r7, #20]
 800579a:	0a1b      	lsrs	r3, r3, #8
 800579c:	b2db      	uxtb	r3, r3
 800579e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80057a2:	b2da      	uxtb	r2, r3
 80057a4:	68bb      	ldr	r3, [r7, #8]
 80057a6:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 80057a8:	697b      	ldr	r3, [r7, #20]
 80057aa:	b2db      	uxtb	r3, r3
 80057ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80057b0:	b2da      	uxtb	r2, r3
 80057b2:	68bb      	ldr	r3, [r7, #8]
 80057b4:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 80057b6:	697b      	ldr	r3, [r7, #20]
 80057b8:	0d9b      	lsrs	r3, r3, #22
 80057ba:	b2db      	uxtb	r3, r3
 80057bc:	f003 0301 	and.w	r3, r3, #1
 80057c0:	b2da      	uxtb	r2, r3
 80057c2:	68bb      	ldr	r3, [r7, #8]
 80057c4:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d11a      	bne.n	8005802 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80057cc:	68bb      	ldr	r3, [r7, #8]
 80057ce:	781b      	ldrb	r3, [r3, #0]
 80057d0:	4618      	mov	r0, r3
 80057d2:	f000 f9a7 	bl	8005b24 <RTC_Bcd2ToByte>
 80057d6:	4603      	mov	r3, r0
 80057d8:	461a      	mov	r2, r3
 80057da:	68bb      	ldr	r3, [r7, #8]
 80057dc:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80057de:	68bb      	ldr	r3, [r7, #8]
 80057e0:	785b      	ldrb	r3, [r3, #1]
 80057e2:	4618      	mov	r0, r3
 80057e4:	f000 f99e 	bl	8005b24 <RTC_Bcd2ToByte>
 80057e8:	4603      	mov	r3, r0
 80057ea:	461a      	mov	r2, r3
 80057ec:	68bb      	ldr	r3, [r7, #8]
 80057ee:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80057f0:	68bb      	ldr	r3, [r7, #8]
 80057f2:	789b      	ldrb	r3, [r3, #2]
 80057f4:	4618      	mov	r0, r3
 80057f6:	f000 f995 	bl	8005b24 <RTC_Bcd2ToByte>
 80057fa:	4603      	mov	r3, r0
 80057fc:	461a      	mov	r2, r3
 80057fe:	68bb      	ldr	r3, [r7, #8]
 8005800:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8005802:	2300      	movs	r3, #0
}
 8005804:	4618      	mov	r0, r3
 8005806:	3718      	adds	r7, #24
 8005808:	46bd      	mov	sp, r7
 800580a:	bd80      	pop	{r7, pc}

0800580c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800580c:	b590      	push	{r4, r7, lr}
 800580e:	b087      	sub	sp, #28
 8005810:	af00      	add	r7, sp, #0
 8005812:	60f8      	str	r0, [r7, #12]
 8005814:	60b9      	str	r1, [r7, #8]
 8005816:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800581e:	2b01      	cmp	r3, #1
 8005820:	d101      	bne.n	8005826 <HAL_RTC_SetDate+0x1a>
 8005822:	2302      	movs	r3, #2
 8005824:	e075      	b.n	8005912 <HAL_RTC_SetDate+0x106>
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	2201      	movs	r2, #1
 800582a:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	2202      	movs	r2, #2
 8005832:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	2b00      	cmp	r3, #0
 800583a:	d10e      	bne.n	800585a <HAL_RTC_SetDate+0x4e>
 800583c:	68bb      	ldr	r3, [r7, #8]
 800583e:	785b      	ldrb	r3, [r3, #1]
 8005840:	f003 0310 	and.w	r3, r3, #16
 8005844:	2b00      	cmp	r3, #0
 8005846:	d008      	beq.n	800585a <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8005848:	68bb      	ldr	r3, [r7, #8]
 800584a:	785b      	ldrb	r3, [r3, #1]
 800584c:	f023 0310 	bic.w	r3, r3, #16
 8005850:	b2db      	uxtb	r3, r3
 8005852:	330a      	adds	r3, #10
 8005854:	b2da      	uxtb	r2, r3
 8005856:	68bb      	ldr	r3, [r7, #8]
 8005858:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	2b00      	cmp	r3, #0
 800585e:	d11c      	bne.n	800589a <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8005860:	68bb      	ldr	r3, [r7, #8]
 8005862:	78db      	ldrb	r3, [r3, #3]
 8005864:	4618      	mov	r0, r3
 8005866:	f000 f93d 	bl	8005ae4 <RTC_ByteToBcd2>
 800586a:	4603      	mov	r3, r0
 800586c:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800586e:	68bb      	ldr	r3, [r7, #8]
 8005870:	785b      	ldrb	r3, [r3, #1]
 8005872:	4618      	mov	r0, r3
 8005874:	f000 f936 	bl	8005ae4 <RTC_ByteToBcd2>
 8005878:	4603      	mov	r3, r0
 800587a:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800587c:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 800587e:	68bb      	ldr	r3, [r7, #8]
 8005880:	789b      	ldrb	r3, [r3, #2]
 8005882:	4618      	mov	r0, r3
 8005884:	f000 f92e 	bl	8005ae4 <RTC_ByteToBcd2>
 8005888:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800588a:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 800588e:	68bb      	ldr	r3, [r7, #8]
 8005890:	781b      	ldrb	r3, [r3, #0]
 8005892:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8005894:	4313      	orrs	r3, r2
 8005896:	617b      	str	r3, [r7, #20]
 8005898:	e00e      	b.n	80058b8 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800589a:	68bb      	ldr	r3, [r7, #8]
 800589c:	78db      	ldrb	r3, [r3, #3]
 800589e:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80058a0:	68bb      	ldr	r3, [r7, #8]
 80058a2:	785b      	ldrb	r3, [r3, #1]
 80058a4:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80058a6:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 80058a8:	68ba      	ldr	r2, [r7, #8]
 80058aa:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80058ac:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80058ae:	68bb      	ldr	r3, [r7, #8]
 80058b0:	781b      	ldrb	r3, [r3, #0]
 80058b2:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80058b4:	4313      	orrs	r3, r2
 80058b6:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	22ca      	movs	r2, #202	; 0xca
 80058be:	625a      	str	r2, [r3, #36]	; 0x24
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	2253      	movs	r2, #83	; 0x53
 80058c6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80058c8:	68f8      	ldr	r0, [r7, #12]
 80058ca:	f000 f899 	bl	8005a00 <RTC_EnterInitMode>
 80058ce:	4603      	mov	r3, r0
 80058d0:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 80058d2:	7cfb      	ldrb	r3, [r7, #19]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d10c      	bne.n	80058f2 <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	681a      	ldr	r2, [r3, #0]
 80058dc:	697b      	ldr	r3, [r7, #20]
 80058de:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80058e2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80058e6:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80058e8:	68f8      	ldr	r0, [r7, #12]
 80058ea:	f000 f8bd 	bl	8005a68 <RTC_ExitInitMode>
 80058ee:	4603      	mov	r3, r0
 80058f0:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	22ff      	movs	r2, #255	; 0xff
 80058f8:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 80058fa:	7cfb      	ldrb	r3, [r7, #19]
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d103      	bne.n	8005908 <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	2201      	movs	r2, #1
 8005904:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	2200      	movs	r2, #0
 800590c:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8005910:	7cfb      	ldrb	r3, [r7, #19]
}
 8005912:	4618      	mov	r0, r3
 8005914:	371c      	adds	r7, #28
 8005916:	46bd      	mov	sp, r7
 8005918:	bd90      	pop	{r4, r7, pc}

0800591a <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800591a:	b580      	push	{r7, lr}
 800591c:	b086      	sub	sp, #24
 800591e:	af00      	add	r7, sp, #0
 8005920:	60f8      	str	r0, [r7, #12]
 8005922:	60b9      	str	r1, [r7, #8]
 8005924:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	685b      	ldr	r3, [r3, #4]
 800592c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005930:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005934:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8005936:	697b      	ldr	r3, [r7, #20]
 8005938:	0c1b      	lsrs	r3, r3, #16
 800593a:	b2da      	uxtb	r2, r3
 800593c:	68bb      	ldr	r3, [r7, #8]
 800593e:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8005940:	697b      	ldr	r3, [r7, #20]
 8005942:	0a1b      	lsrs	r3, r3, #8
 8005944:	b2db      	uxtb	r3, r3
 8005946:	f003 031f 	and.w	r3, r3, #31
 800594a:	b2da      	uxtb	r2, r3
 800594c:	68bb      	ldr	r3, [r7, #8]
 800594e:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8005950:	697b      	ldr	r3, [r7, #20]
 8005952:	b2db      	uxtb	r3, r3
 8005954:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005958:	b2da      	uxtb	r2, r3
 800595a:	68bb      	ldr	r3, [r7, #8]
 800595c:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 800595e:	697b      	ldr	r3, [r7, #20]
 8005960:	0b5b      	lsrs	r3, r3, #13
 8005962:	b2db      	uxtb	r3, r3
 8005964:	f003 0307 	and.w	r3, r3, #7
 8005968:	b2da      	uxtb	r2, r3
 800596a:	68bb      	ldr	r3, [r7, #8]
 800596c:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	2b00      	cmp	r3, #0
 8005972:	d11a      	bne.n	80059aa <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8005974:	68bb      	ldr	r3, [r7, #8]
 8005976:	78db      	ldrb	r3, [r3, #3]
 8005978:	4618      	mov	r0, r3
 800597a:	f000 f8d3 	bl	8005b24 <RTC_Bcd2ToByte>
 800597e:	4603      	mov	r3, r0
 8005980:	461a      	mov	r2, r3
 8005982:	68bb      	ldr	r3, [r7, #8]
 8005984:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8005986:	68bb      	ldr	r3, [r7, #8]
 8005988:	785b      	ldrb	r3, [r3, #1]
 800598a:	4618      	mov	r0, r3
 800598c:	f000 f8ca 	bl	8005b24 <RTC_Bcd2ToByte>
 8005990:	4603      	mov	r3, r0
 8005992:	461a      	mov	r2, r3
 8005994:	68bb      	ldr	r3, [r7, #8]
 8005996:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8005998:	68bb      	ldr	r3, [r7, #8]
 800599a:	789b      	ldrb	r3, [r3, #2]
 800599c:	4618      	mov	r0, r3
 800599e:	f000 f8c1 	bl	8005b24 <RTC_Bcd2ToByte>
 80059a2:	4603      	mov	r3, r0
 80059a4:	461a      	mov	r2, r3
 80059a6:	68bb      	ldr	r3, [r7, #8]
 80059a8:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80059aa:	2300      	movs	r3, #0
}
 80059ac:	4618      	mov	r0, r3
 80059ae:	3718      	adds	r7, #24
 80059b0:	46bd      	mov	sp, r7
 80059b2:	bd80      	pop	{r7, pc}

080059b4 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80059b4:	b580      	push	{r7, lr}
 80059b6:	b084      	sub	sp, #16
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	68da      	ldr	r2, [r3, #12]
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80059ca:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 80059cc:	f7fc fce0 	bl	8002390 <HAL_GetTick>
 80059d0:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80059d2:	e009      	b.n	80059e8 <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80059d4:	f7fc fcdc 	bl	8002390 <HAL_GetTick>
 80059d8:	4602      	mov	r2, r0
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	1ad3      	subs	r3, r2, r3
 80059de:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80059e2:	d901      	bls.n	80059e8 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 80059e4:	2303      	movs	r3, #3
 80059e6:	e007      	b.n	80059f8 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	68db      	ldr	r3, [r3, #12]
 80059ee:	f003 0320 	and.w	r3, r3, #32
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d0ee      	beq.n	80059d4 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 80059f6:	2300      	movs	r3, #0
}
 80059f8:	4618      	mov	r0, r3
 80059fa:	3710      	adds	r7, #16
 80059fc:	46bd      	mov	sp, r7
 80059fe:	bd80      	pop	{r7, pc}

08005a00 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005a00:	b580      	push	{r7, lr}
 8005a02:	b084      	sub	sp, #16
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005a08:	2300      	movs	r3, #0
 8005a0a:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	68db      	ldr	r3, [r3, #12]
 8005a12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d120      	bne.n	8005a5c <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f04f 32ff 	mov.w	r2, #4294967295
 8005a22:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8005a24:	f7fc fcb4 	bl	8002390 <HAL_GetTick>
 8005a28:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8005a2a:	e00d      	b.n	8005a48 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8005a2c:	f7fc fcb0 	bl	8002390 <HAL_GetTick>
 8005a30:	4602      	mov	r2, r0
 8005a32:	68bb      	ldr	r3, [r7, #8]
 8005a34:	1ad3      	subs	r3, r2, r3
 8005a36:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005a3a:	d905      	bls.n	8005a48 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8005a3c:	2303      	movs	r3, #3
 8005a3e:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2203      	movs	r2, #3
 8005a44:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	68db      	ldr	r3, [r3, #12]
 8005a4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d102      	bne.n	8005a5c <RTC_EnterInitMode+0x5c>
 8005a56:	7bfb      	ldrb	r3, [r7, #15]
 8005a58:	2b03      	cmp	r3, #3
 8005a5a:	d1e7      	bne.n	8005a2c <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8005a5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a5e:	4618      	mov	r0, r3
 8005a60:	3710      	adds	r7, #16
 8005a62:	46bd      	mov	sp, r7
 8005a64:	bd80      	pop	{r7, pc}
	...

08005a68 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	b084      	sub	sp, #16
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005a70:	2300      	movs	r3, #0
 8005a72:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8005a74:	4b1a      	ldr	r3, [pc, #104]	; (8005ae0 <RTC_ExitInitMode+0x78>)
 8005a76:	68db      	ldr	r3, [r3, #12]
 8005a78:	4a19      	ldr	r2, [pc, #100]	; (8005ae0 <RTC_ExitInitMode+0x78>)
 8005a7a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005a7e:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8005a80:	4b17      	ldr	r3, [pc, #92]	; (8005ae0 <RTC_ExitInitMode+0x78>)
 8005a82:	689b      	ldr	r3, [r3, #8]
 8005a84:	f003 0320 	and.w	r3, r3, #32
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d10c      	bne.n	8005aa6 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005a8c:	6878      	ldr	r0, [r7, #4]
 8005a8e:	f7ff ff91 	bl	80059b4 <HAL_RTC_WaitForSynchro>
 8005a92:	4603      	mov	r3, r0
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d01e      	beq.n	8005ad6 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2203      	movs	r2, #3
 8005a9c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8005aa0:	2303      	movs	r3, #3
 8005aa2:	73fb      	strb	r3, [r7, #15]
 8005aa4:	e017      	b.n	8005ad6 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8005aa6:	4b0e      	ldr	r3, [pc, #56]	; (8005ae0 <RTC_ExitInitMode+0x78>)
 8005aa8:	689b      	ldr	r3, [r3, #8]
 8005aaa:	4a0d      	ldr	r2, [pc, #52]	; (8005ae0 <RTC_ExitInitMode+0x78>)
 8005aac:	f023 0320 	bic.w	r3, r3, #32
 8005ab0:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005ab2:	6878      	ldr	r0, [r7, #4]
 8005ab4:	f7ff ff7e 	bl	80059b4 <HAL_RTC_WaitForSynchro>
 8005ab8:	4603      	mov	r3, r0
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d005      	beq.n	8005aca <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	2203      	movs	r2, #3
 8005ac2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8005ac6:	2303      	movs	r3, #3
 8005ac8:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8005aca:	4b05      	ldr	r3, [pc, #20]	; (8005ae0 <RTC_ExitInitMode+0x78>)
 8005acc:	689b      	ldr	r3, [r3, #8]
 8005ace:	4a04      	ldr	r2, [pc, #16]	; (8005ae0 <RTC_ExitInitMode+0x78>)
 8005ad0:	f043 0320 	orr.w	r3, r3, #32
 8005ad4:	6093      	str	r3, [r2, #8]
  }

  return status;
 8005ad6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ad8:	4618      	mov	r0, r3
 8005ada:	3710      	adds	r7, #16
 8005adc:	46bd      	mov	sp, r7
 8005ade:	bd80      	pop	{r7, pc}
 8005ae0:	40002800 	.word	0x40002800

08005ae4 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8005ae4:	b480      	push	{r7}
 8005ae6:	b085      	sub	sp, #20
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	4603      	mov	r3, r0
 8005aec:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8005aee:	2300      	movs	r3, #0
 8005af0:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 8005af2:	79fb      	ldrb	r3, [r7, #7]
 8005af4:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 8005af6:	e005      	b.n	8005b04 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	3301      	adds	r3, #1
 8005afc:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 8005afe:	7afb      	ldrb	r3, [r7, #11]
 8005b00:	3b0a      	subs	r3, #10
 8005b02:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 8005b04:	7afb      	ldrb	r3, [r7, #11]
 8005b06:	2b09      	cmp	r3, #9
 8005b08:	d8f6      	bhi.n	8005af8 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	b2db      	uxtb	r3, r3
 8005b0e:	011b      	lsls	r3, r3, #4
 8005b10:	b2da      	uxtb	r2, r3
 8005b12:	7afb      	ldrb	r3, [r7, #11]
 8005b14:	4313      	orrs	r3, r2
 8005b16:	b2db      	uxtb	r3, r3
}
 8005b18:	4618      	mov	r0, r3
 8005b1a:	3714      	adds	r7, #20
 8005b1c:	46bd      	mov	sp, r7
 8005b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b22:	4770      	bx	lr

08005b24 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8005b24:	b480      	push	{r7}
 8005b26:	b085      	sub	sp, #20
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	4603      	mov	r3, r0
 8005b2c:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 8005b2e:	79fb      	ldrb	r3, [r7, #7]
 8005b30:	091b      	lsrs	r3, r3, #4
 8005b32:	b2db      	uxtb	r3, r3
 8005b34:	461a      	mov	r2, r3
 8005b36:	0092      	lsls	r2, r2, #2
 8005b38:	4413      	add	r3, r2
 8005b3a:	005b      	lsls	r3, r3, #1
 8005b3c:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 8005b3e:	79fb      	ldrb	r3, [r7, #7]
 8005b40:	f003 030f 	and.w	r3, r3, #15
 8005b44:	b2da      	uxtb	r2, r3
 8005b46:	7bfb      	ldrb	r3, [r7, #15]
 8005b48:	4413      	add	r3, r2
 8005b4a:	b2db      	uxtb	r3, r3
}
 8005b4c:	4618      	mov	r0, r3
 8005b4e:	3714      	adds	r7, #20
 8005b50:	46bd      	mov	sp, r7
 8005b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b56:	4770      	bx	lr

08005b58 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005b58:	b580      	push	{r7, lr}
 8005b5a:	b084      	sub	sp, #16
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d101      	bne.n	8005b6a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005b66:	2301      	movs	r3, #1
 8005b68:	e095      	b.n	8005c96 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d108      	bne.n	8005b84 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	685b      	ldr	r3, [r3, #4]
 8005b76:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005b7a:	d009      	beq.n	8005b90 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2200      	movs	r2, #0
 8005b80:	61da      	str	r2, [r3, #28]
 8005b82:	e005      	b.n	8005b90 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2200      	movs	r2, #0
 8005b88:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2200      	movs	r2, #0
 8005b94:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005b9c:	b2db      	uxtb	r3, r3
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d106      	bne.n	8005bb0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005baa:	6878      	ldr	r0, [r7, #4]
 8005bac:	f7fc f81e 	bl	8001bec <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	2202      	movs	r2, #2
 8005bb4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	681a      	ldr	r2, [r3, #0]
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005bc6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	68db      	ldr	r3, [r3, #12]
 8005bcc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005bd0:	d902      	bls.n	8005bd8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005bd2:	2300      	movs	r3, #0
 8005bd4:	60fb      	str	r3, [r7, #12]
 8005bd6:	e002      	b.n	8005bde <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005bd8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005bdc:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	68db      	ldr	r3, [r3, #12]
 8005be2:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005be6:	d007      	beq.n	8005bf8 <HAL_SPI_Init+0xa0>
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	68db      	ldr	r3, [r3, #12]
 8005bec:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005bf0:	d002      	beq.n	8005bf8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	2200      	movs	r2, #0
 8005bf6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	685b      	ldr	r3, [r3, #4]
 8005bfc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	689b      	ldr	r3, [r3, #8]
 8005c04:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005c08:	431a      	orrs	r2, r3
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	691b      	ldr	r3, [r3, #16]
 8005c0e:	f003 0302 	and.w	r3, r3, #2
 8005c12:	431a      	orrs	r2, r3
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	695b      	ldr	r3, [r3, #20]
 8005c18:	f003 0301 	and.w	r3, r3, #1
 8005c1c:	431a      	orrs	r2, r3
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	699b      	ldr	r3, [r3, #24]
 8005c22:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005c26:	431a      	orrs	r2, r3
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	69db      	ldr	r3, [r3, #28]
 8005c2c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005c30:	431a      	orrs	r2, r3
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	6a1b      	ldr	r3, [r3, #32]
 8005c36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c3a:	ea42 0103 	orr.w	r1, r2, r3
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c42:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	430a      	orrs	r2, r1
 8005c4c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	699b      	ldr	r3, [r3, #24]
 8005c52:	0c1b      	lsrs	r3, r3, #16
 8005c54:	f003 0204 	and.w	r2, r3, #4
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c5c:	f003 0310 	and.w	r3, r3, #16
 8005c60:	431a      	orrs	r2, r3
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c66:	f003 0308 	and.w	r3, r3, #8
 8005c6a:	431a      	orrs	r2, r3
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	68db      	ldr	r3, [r3, #12]
 8005c70:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005c74:	ea42 0103 	orr.w	r1, r2, r3
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	430a      	orrs	r2, r1
 8005c84:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	2200      	movs	r2, #0
 8005c8a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	2201      	movs	r2, #1
 8005c90:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005c94:	2300      	movs	r3, #0
}
 8005c96:	4618      	mov	r0, r3
 8005c98:	3710      	adds	r7, #16
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	bd80      	pop	{r7, pc}

08005c9e <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8005c9e:	b580      	push	{r7, lr}
 8005ca0:	b082      	sub	sp, #8
 8005ca2:	af00      	add	r7, sp, #0
 8005ca4:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d101      	bne.n	8005cb0 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8005cac:	2301      	movs	r3, #1
 8005cae:	e01a      	b.n	8005ce6 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2202      	movs	r2, #2
 8005cb4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	681a      	ldr	r2, [r3, #0]
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005cc6:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8005cc8:	6878      	ldr	r0, [r7, #4]
 8005cca:	f7fb ffdb 	bl	8001c84 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_RESET;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2200      	movs	r2, #0
 8005cd8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2200      	movs	r2, #0
 8005ce0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  return HAL_OK;
 8005ce4:	2300      	movs	r3, #0
}
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	3708      	adds	r7, #8
 8005cea:	46bd      	mov	sp, r7
 8005cec:	bd80      	pop	{r7, pc}

08005cee <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005cee:	b580      	push	{r7, lr}
 8005cf0:	b088      	sub	sp, #32
 8005cf2:	af02      	add	r7, sp, #8
 8005cf4:	60f8      	str	r0, [r7, #12]
 8005cf6:	60b9      	str	r1, [r7, #8]
 8005cf8:	603b      	str	r3, [r7, #0]
 8005cfa:	4613      	mov	r3, r2
 8005cfc:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005cfe:	2300      	movs	r3, #0
 8005d00:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	685b      	ldr	r3, [r3, #4]
 8005d06:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005d0a:	d112      	bne.n	8005d32 <HAL_SPI_Receive+0x44>
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	689b      	ldr	r3, [r3, #8]
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d10e      	bne.n	8005d32 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	2204      	movs	r2, #4
 8005d18:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005d1c:	88fa      	ldrh	r2, [r7, #6]
 8005d1e:	683b      	ldr	r3, [r7, #0]
 8005d20:	9300      	str	r3, [sp, #0]
 8005d22:	4613      	mov	r3, r2
 8005d24:	68ba      	ldr	r2, [r7, #8]
 8005d26:	68b9      	ldr	r1, [r7, #8]
 8005d28:	68f8      	ldr	r0, [r7, #12]
 8005d2a:	f000 f910 	bl	8005f4e <HAL_SPI_TransmitReceive>
 8005d2e:	4603      	mov	r3, r0
 8005d30:	e109      	b.n	8005f46 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005d38:	2b01      	cmp	r3, #1
 8005d3a:	d101      	bne.n	8005d40 <HAL_SPI_Receive+0x52>
 8005d3c:	2302      	movs	r3, #2
 8005d3e:	e102      	b.n	8005f46 <HAL_SPI_Receive+0x258>
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	2201      	movs	r2, #1
 8005d44:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005d48:	f7fc fb22 	bl	8002390 <HAL_GetTick>
 8005d4c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005d54:	b2db      	uxtb	r3, r3
 8005d56:	2b01      	cmp	r3, #1
 8005d58:	d002      	beq.n	8005d60 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8005d5a:	2302      	movs	r3, #2
 8005d5c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005d5e:	e0e9      	b.n	8005f34 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8005d60:	68bb      	ldr	r3, [r7, #8]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d002      	beq.n	8005d6c <HAL_SPI_Receive+0x7e>
 8005d66:	88fb      	ldrh	r3, [r7, #6]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d102      	bne.n	8005d72 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8005d6c:	2301      	movs	r3, #1
 8005d6e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005d70:	e0e0      	b.n	8005f34 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	2204      	movs	r2, #4
 8005d76:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	68ba      	ldr	r2, [r7, #8]
 8005d84:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	88fa      	ldrh	r2, [r7, #6]
 8005d8a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	88fa      	ldrh	r2, [r7, #6]
 8005d92:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	2200      	movs	r2, #0
 8005d9a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	2200      	movs	r2, #0
 8005da0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	2200      	movs	r2, #0
 8005da6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	2200      	movs	r2, #0
 8005dac:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	2200      	movs	r2, #0
 8005db2:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	68db      	ldr	r3, [r3, #12]
 8005db8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005dbc:	d908      	bls.n	8005dd0 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	685a      	ldr	r2, [r3, #4]
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005dcc:	605a      	str	r2, [r3, #4]
 8005dce:	e007      	b.n	8005de0 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	685a      	ldr	r2, [r3, #4]
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005dde:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	689b      	ldr	r3, [r3, #8]
 8005de4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005de8:	d10f      	bne.n	8005e0a <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	681a      	ldr	r2, [r3, #0]
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005df8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	681a      	ldr	r2, [r3, #0]
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005e08:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e14:	2b40      	cmp	r3, #64	; 0x40
 8005e16:	d007      	beq.n	8005e28 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	681a      	ldr	r2, [r3, #0]
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005e26:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	68db      	ldr	r3, [r3, #12]
 8005e2c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005e30:	d867      	bhi.n	8005f02 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005e32:	e030      	b.n	8005e96 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	689b      	ldr	r3, [r3, #8]
 8005e3a:	f003 0301 	and.w	r3, r3, #1
 8005e3e:	2b01      	cmp	r3, #1
 8005e40:	d117      	bne.n	8005e72 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	f103 020c 	add.w	r2, r3, #12
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e4e:	7812      	ldrb	r2, [r2, #0]
 8005e50:	b2d2      	uxtb	r2, r2
 8005e52:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e58:	1c5a      	adds	r2, r3, #1
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005e64:	b29b      	uxth	r3, r3
 8005e66:	3b01      	subs	r3, #1
 8005e68:	b29a      	uxth	r2, r3
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8005e70:	e011      	b.n	8005e96 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005e72:	f7fc fa8d 	bl	8002390 <HAL_GetTick>
 8005e76:	4602      	mov	r2, r0
 8005e78:	693b      	ldr	r3, [r7, #16]
 8005e7a:	1ad3      	subs	r3, r2, r3
 8005e7c:	683a      	ldr	r2, [r7, #0]
 8005e7e:	429a      	cmp	r2, r3
 8005e80:	d803      	bhi.n	8005e8a <HAL_SPI_Receive+0x19c>
 8005e82:	683b      	ldr	r3, [r7, #0]
 8005e84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e88:	d102      	bne.n	8005e90 <HAL_SPI_Receive+0x1a2>
 8005e8a:	683b      	ldr	r3, [r7, #0]
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d102      	bne.n	8005e96 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8005e90:	2303      	movs	r3, #3
 8005e92:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005e94:	e04e      	b.n	8005f34 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005e9c:	b29b      	uxth	r3, r3
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d1c8      	bne.n	8005e34 <HAL_SPI_Receive+0x146>
 8005ea2:	e034      	b.n	8005f0e <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	689b      	ldr	r3, [r3, #8]
 8005eaa:	f003 0301 	and.w	r3, r3, #1
 8005eae:	2b01      	cmp	r3, #1
 8005eb0:	d115      	bne.n	8005ede <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	68da      	ldr	r2, [r3, #12]
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ebc:	b292      	uxth	r2, r2
 8005ebe:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ec4:	1c9a      	adds	r2, r3, #2
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005ed0:	b29b      	uxth	r3, r3
 8005ed2:	3b01      	subs	r3, #1
 8005ed4:	b29a      	uxth	r2, r3
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8005edc:	e011      	b.n	8005f02 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005ede:	f7fc fa57 	bl	8002390 <HAL_GetTick>
 8005ee2:	4602      	mov	r2, r0
 8005ee4:	693b      	ldr	r3, [r7, #16]
 8005ee6:	1ad3      	subs	r3, r2, r3
 8005ee8:	683a      	ldr	r2, [r7, #0]
 8005eea:	429a      	cmp	r2, r3
 8005eec:	d803      	bhi.n	8005ef6 <HAL_SPI_Receive+0x208>
 8005eee:	683b      	ldr	r3, [r7, #0]
 8005ef0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ef4:	d102      	bne.n	8005efc <HAL_SPI_Receive+0x20e>
 8005ef6:	683b      	ldr	r3, [r7, #0]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d102      	bne.n	8005f02 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8005efc:	2303      	movs	r3, #3
 8005efe:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005f00:	e018      	b.n	8005f34 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005f08:	b29b      	uxth	r3, r3
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d1ca      	bne.n	8005ea4 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005f0e:	693a      	ldr	r2, [r7, #16]
 8005f10:	6839      	ldr	r1, [r7, #0]
 8005f12:	68f8      	ldr	r0, [r7, #12]
 8005f14:	f000 fffe 	bl	8006f14 <SPI_EndRxTransaction>
 8005f18:	4603      	mov	r3, r0
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d002      	beq.n	8005f24 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	2220      	movs	r2, #32
 8005f22:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d002      	beq.n	8005f32 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8005f2c:	2301      	movs	r3, #1
 8005f2e:	75fb      	strb	r3, [r7, #23]
 8005f30:	e000      	b.n	8005f34 <HAL_SPI_Receive+0x246>
  }

error :
 8005f32:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	2201      	movs	r2, #1
 8005f38:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	2200      	movs	r2, #0
 8005f40:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005f44:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f46:	4618      	mov	r0, r3
 8005f48:	3718      	adds	r7, #24
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	bd80      	pop	{r7, pc}

08005f4e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005f4e:	b580      	push	{r7, lr}
 8005f50:	b08a      	sub	sp, #40	; 0x28
 8005f52:	af00      	add	r7, sp, #0
 8005f54:	60f8      	str	r0, [r7, #12]
 8005f56:	60b9      	str	r1, [r7, #8]
 8005f58:	607a      	str	r2, [r7, #4]
 8005f5a:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005f5c:	2301      	movs	r3, #1
 8005f5e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005f60:	2300      	movs	r3, #0
 8005f62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005f6c:	2b01      	cmp	r3, #1
 8005f6e:	d101      	bne.n	8005f74 <HAL_SPI_TransmitReceive+0x26>
 8005f70:	2302      	movs	r3, #2
 8005f72:	e1fb      	b.n	800636c <HAL_SPI_TransmitReceive+0x41e>
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	2201      	movs	r2, #1
 8005f78:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005f7c:	f7fc fa08 	bl	8002390 <HAL_GetTick>
 8005f80:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005f88:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	685b      	ldr	r3, [r3, #4]
 8005f8e:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8005f90:	887b      	ldrh	r3, [r7, #2]
 8005f92:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8005f94:	887b      	ldrh	r3, [r7, #2]
 8005f96:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005f98:	7efb      	ldrb	r3, [r7, #27]
 8005f9a:	2b01      	cmp	r3, #1
 8005f9c:	d00e      	beq.n	8005fbc <HAL_SPI_TransmitReceive+0x6e>
 8005f9e:	697b      	ldr	r3, [r7, #20]
 8005fa0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005fa4:	d106      	bne.n	8005fb4 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	689b      	ldr	r3, [r3, #8]
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d102      	bne.n	8005fb4 <HAL_SPI_TransmitReceive+0x66>
 8005fae:	7efb      	ldrb	r3, [r7, #27]
 8005fb0:	2b04      	cmp	r3, #4
 8005fb2:	d003      	beq.n	8005fbc <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8005fb4:	2302      	movs	r3, #2
 8005fb6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8005fba:	e1cd      	b.n	8006358 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005fbc:	68bb      	ldr	r3, [r7, #8]
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d005      	beq.n	8005fce <HAL_SPI_TransmitReceive+0x80>
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d002      	beq.n	8005fce <HAL_SPI_TransmitReceive+0x80>
 8005fc8:	887b      	ldrh	r3, [r7, #2]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d103      	bne.n	8005fd6 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8005fce:	2301      	movs	r3, #1
 8005fd0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8005fd4:	e1c0      	b.n	8006358 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005fdc:	b2db      	uxtb	r3, r3
 8005fde:	2b04      	cmp	r3, #4
 8005fe0:	d003      	beq.n	8005fea <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	2205      	movs	r2, #5
 8005fe6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	2200      	movs	r2, #0
 8005fee:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	687a      	ldr	r2, [r7, #4]
 8005ff4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	887a      	ldrh	r2, [r7, #2]
 8005ffa:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	887a      	ldrh	r2, [r7, #2]
 8006002:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	68ba      	ldr	r2, [r7, #8]
 800600a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	887a      	ldrh	r2, [r7, #2]
 8006010:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	887a      	ldrh	r2, [r7, #2]
 8006016:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	2200      	movs	r2, #0
 800601c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	2200      	movs	r2, #0
 8006022:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	68db      	ldr	r3, [r3, #12]
 8006028:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800602c:	d802      	bhi.n	8006034 <HAL_SPI_TransmitReceive+0xe6>
 800602e:	8a3b      	ldrh	r3, [r7, #16]
 8006030:	2b01      	cmp	r3, #1
 8006032:	d908      	bls.n	8006046 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	685a      	ldr	r2, [r3, #4]
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006042:	605a      	str	r2, [r3, #4]
 8006044:	e007      	b.n	8006056 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	685a      	ldr	r2, [r3, #4]
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006054:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006060:	2b40      	cmp	r3, #64	; 0x40
 8006062:	d007      	beq.n	8006074 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	681a      	ldr	r2, [r3, #0]
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006072:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	68db      	ldr	r3, [r3, #12]
 8006078:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800607c:	d97c      	bls.n	8006178 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	685b      	ldr	r3, [r3, #4]
 8006082:	2b00      	cmp	r3, #0
 8006084:	d002      	beq.n	800608c <HAL_SPI_TransmitReceive+0x13e>
 8006086:	8a7b      	ldrh	r3, [r7, #18]
 8006088:	2b01      	cmp	r3, #1
 800608a:	d169      	bne.n	8006160 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006090:	881a      	ldrh	r2, [r3, #0]
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800609c:	1c9a      	adds	r2, r3, #2
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80060a6:	b29b      	uxth	r3, r3
 80060a8:	3b01      	subs	r3, #1
 80060aa:	b29a      	uxth	r2, r3
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80060b0:	e056      	b.n	8006160 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	689b      	ldr	r3, [r3, #8]
 80060b8:	f003 0302 	and.w	r3, r3, #2
 80060bc:	2b02      	cmp	r3, #2
 80060be:	d11b      	bne.n	80060f8 <HAL_SPI_TransmitReceive+0x1aa>
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80060c4:	b29b      	uxth	r3, r3
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d016      	beq.n	80060f8 <HAL_SPI_TransmitReceive+0x1aa>
 80060ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060cc:	2b01      	cmp	r3, #1
 80060ce:	d113      	bne.n	80060f8 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060d4:	881a      	ldrh	r2, [r3, #0]
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060e0:	1c9a      	adds	r2, r3, #2
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80060ea:	b29b      	uxth	r3, r3
 80060ec:	3b01      	subs	r3, #1
 80060ee:	b29a      	uxth	r2, r3
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80060f4:	2300      	movs	r3, #0
 80060f6:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	689b      	ldr	r3, [r3, #8]
 80060fe:	f003 0301 	and.w	r3, r3, #1
 8006102:	2b01      	cmp	r3, #1
 8006104:	d11c      	bne.n	8006140 <HAL_SPI_TransmitReceive+0x1f2>
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800610c:	b29b      	uxth	r3, r3
 800610e:	2b00      	cmp	r3, #0
 8006110:	d016      	beq.n	8006140 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	68da      	ldr	r2, [r3, #12]
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800611c:	b292      	uxth	r2, r2
 800611e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006124:	1c9a      	adds	r2, r3, #2
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006130:	b29b      	uxth	r3, r3
 8006132:	3b01      	subs	r3, #1
 8006134:	b29a      	uxth	r2, r3
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800613c:	2301      	movs	r3, #1
 800613e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006140:	f7fc f926 	bl	8002390 <HAL_GetTick>
 8006144:	4602      	mov	r2, r0
 8006146:	69fb      	ldr	r3, [r7, #28]
 8006148:	1ad3      	subs	r3, r2, r3
 800614a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800614c:	429a      	cmp	r2, r3
 800614e:	d807      	bhi.n	8006160 <HAL_SPI_TransmitReceive+0x212>
 8006150:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006152:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006156:	d003      	beq.n	8006160 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8006158:	2303      	movs	r3, #3
 800615a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800615e:	e0fb      	b.n	8006358 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006164:	b29b      	uxth	r3, r3
 8006166:	2b00      	cmp	r3, #0
 8006168:	d1a3      	bne.n	80060b2 <HAL_SPI_TransmitReceive+0x164>
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006170:	b29b      	uxth	r3, r3
 8006172:	2b00      	cmp	r3, #0
 8006174:	d19d      	bne.n	80060b2 <HAL_SPI_TransmitReceive+0x164>
 8006176:	e0df      	b.n	8006338 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	685b      	ldr	r3, [r3, #4]
 800617c:	2b00      	cmp	r3, #0
 800617e:	d003      	beq.n	8006188 <HAL_SPI_TransmitReceive+0x23a>
 8006180:	8a7b      	ldrh	r3, [r7, #18]
 8006182:	2b01      	cmp	r3, #1
 8006184:	f040 80cb 	bne.w	800631e <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800618c:	b29b      	uxth	r3, r3
 800618e:	2b01      	cmp	r3, #1
 8006190:	d912      	bls.n	80061b8 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006196:	881a      	ldrh	r2, [r3, #0]
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061a2:	1c9a      	adds	r2, r3, #2
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80061ac:	b29b      	uxth	r3, r3
 80061ae:	3b02      	subs	r3, #2
 80061b0:	b29a      	uxth	r2, r3
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80061b6:	e0b2      	b.n	800631e <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	330c      	adds	r3, #12
 80061c2:	7812      	ldrb	r2, [r2, #0]
 80061c4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061ca:	1c5a      	adds	r2, r3, #1
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80061d4:	b29b      	uxth	r3, r3
 80061d6:	3b01      	subs	r3, #1
 80061d8:	b29a      	uxth	r2, r3
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80061de:	e09e      	b.n	800631e <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	689b      	ldr	r3, [r3, #8]
 80061e6:	f003 0302 	and.w	r3, r3, #2
 80061ea:	2b02      	cmp	r3, #2
 80061ec:	d134      	bne.n	8006258 <HAL_SPI_TransmitReceive+0x30a>
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80061f2:	b29b      	uxth	r3, r3
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d02f      	beq.n	8006258 <HAL_SPI_TransmitReceive+0x30a>
 80061f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061fa:	2b01      	cmp	r3, #1
 80061fc:	d12c      	bne.n	8006258 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006202:	b29b      	uxth	r3, r3
 8006204:	2b01      	cmp	r3, #1
 8006206:	d912      	bls.n	800622e <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800620c:	881a      	ldrh	r2, [r3, #0]
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006218:	1c9a      	adds	r2, r3, #2
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006222:	b29b      	uxth	r3, r3
 8006224:	3b02      	subs	r3, #2
 8006226:	b29a      	uxth	r2, r3
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800622c:	e012      	b.n	8006254 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	330c      	adds	r3, #12
 8006238:	7812      	ldrb	r2, [r2, #0]
 800623a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006240:	1c5a      	adds	r2, r3, #1
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800624a:	b29b      	uxth	r3, r3
 800624c:	3b01      	subs	r3, #1
 800624e:	b29a      	uxth	r2, r3
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006254:	2300      	movs	r3, #0
 8006256:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	689b      	ldr	r3, [r3, #8]
 800625e:	f003 0301 	and.w	r3, r3, #1
 8006262:	2b01      	cmp	r3, #1
 8006264:	d148      	bne.n	80062f8 <HAL_SPI_TransmitReceive+0x3aa>
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800626c:	b29b      	uxth	r3, r3
 800626e:	2b00      	cmp	r3, #0
 8006270:	d042      	beq.n	80062f8 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006278:	b29b      	uxth	r3, r3
 800627a:	2b01      	cmp	r3, #1
 800627c:	d923      	bls.n	80062c6 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	68da      	ldr	r2, [r3, #12]
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006288:	b292      	uxth	r2, r2
 800628a:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006290:	1c9a      	adds	r2, r3, #2
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800629c:	b29b      	uxth	r3, r3
 800629e:	3b02      	subs	r3, #2
 80062a0:	b29a      	uxth	r2, r3
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80062ae:	b29b      	uxth	r3, r3
 80062b0:	2b01      	cmp	r3, #1
 80062b2:	d81f      	bhi.n	80062f4 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	685a      	ldr	r2, [r3, #4]
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80062c2:	605a      	str	r2, [r3, #4]
 80062c4:	e016      	b.n	80062f4 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	f103 020c 	add.w	r2, r3, #12
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062d2:	7812      	ldrb	r2, [r2, #0]
 80062d4:	b2d2      	uxtb	r2, r2
 80062d6:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062dc:	1c5a      	adds	r2, r3, #1
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80062e8:	b29b      	uxth	r3, r3
 80062ea:	3b01      	subs	r3, #1
 80062ec:	b29a      	uxth	r2, r3
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80062f4:	2301      	movs	r3, #1
 80062f6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80062f8:	f7fc f84a 	bl	8002390 <HAL_GetTick>
 80062fc:	4602      	mov	r2, r0
 80062fe:	69fb      	ldr	r3, [r7, #28]
 8006300:	1ad3      	subs	r3, r2, r3
 8006302:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006304:	429a      	cmp	r2, r3
 8006306:	d803      	bhi.n	8006310 <HAL_SPI_TransmitReceive+0x3c2>
 8006308:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800630a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800630e:	d102      	bne.n	8006316 <HAL_SPI_TransmitReceive+0x3c8>
 8006310:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006312:	2b00      	cmp	r3, #0
 8006314:	d103      	bne.n	800631e <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8006316:	2303      	movs	r3, #3
 8006318:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800631c:	e01c      	b.n	8006358 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006322:	b29b      	uxth	r3, r3
 8006324:	2b00      	cmp	r3, #0
 8006326:	f47f af5b 	bne.w	80061e0 <HAL_SPI_TransmitReceive+0x292>
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006330:	b29b      	uxth	r3, r3
 8006332:	2b00      	cmp	r3, #0
 8006334:	f47f af54 	bne.w	80061e0 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006338:	69fa      	ldr	r2, [r7, #28]
 800633a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800633c:	68f8      	ldr	r0, [r7, #12]
 800633e:	f000 fe41 	bl	8006fc4 <SPI_EndRxTxTransaction>
 8006342:	4603      	mov	r3, r0
 8006344:	2b00      	cmp	r3, #0
 8006346:	d006      	beq.n	8006356 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8006348:	2301      	movs	r3, #1
 800634a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	2220      	movs	r2, #32
 8006352:	661a      	str	r2, [r3, #96]	; 0x60
 8006354:	e000      	b.n	8006358 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8006356:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	2201      	movs	r2, #1
 800635c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	2200      	movs	r2, #0
 8006364:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006368:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800636c:	4618      	mov	r0, r3
 800636e:	3728      	adds	r7, #40	; 0x28
 8006370:	46bd      	mov	sp, r7
 8006372:	bd80      	pop	{r7, pc}

08006374 <HAL_SPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8006374:	b480      	push	{r7}
 8006376:	b087      	sub	sp, #28
 8006378:	af00      	add	r7, sp, #0
 800637a:	60f8      	str	r0, [r7, #12]
 800637c:	60b9      	str	r1, [r7, #8]
 800637e:	4613      	mov	r3, r2
 8006380:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006382:	2300      	movs	r3, #0
 8006384:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800638c:	2b01      	cmp	r3, #1
 800638e:	d101      	bne.n	8006394 <HAL_SPI_Transmit_IT+0x20>
 8006390:	2302      	movs	r3, #2
 8006392:	e072      	b.n	800647a <HAL_SPI_Transmit_IT+0x106>
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	2201      	movs	r2, #1
 8006398:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if ((pData == NULL) || (Size == 0U))
 800639c:	68bb      	ldr	r3, [r7, #8]
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d002      	beq.n	80063a8 <HAL_SPI_Transmit_IT+0x34>
 80063a2:	88fb      	ldrh	r3, [r7, #6]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d102      	bne.n	80063ae <HAL_SPI_Transmit_IT+0x3a>
  {
    errorcode = HAL_ERROR;
 80063a8:	2301      	movs	r3, #1
 80063aa:	75fb      	strb	r3, [r7, #23]
    goto error;
 80063ac:	e060      	b.n	8006470 <HAL_SPI_Transmit_IT+0xfc>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80063b4:	b2db      	uxtb	r3, r3
 80063b6:	2b01      	cmp	r3, #1
 80063b8:	d002      	beq.n	80063c0 <HAL_SPI_Transmit_IT+0x4c>
  {
    errorcode = HAL_BUSY;
 80063ba:	2302      	movs	r3, #2
 80063bc:	75fb      	strb	r3, [r7, #23]
    goto error;
 80063be:	e057      	b.n	8006470 <HAL_SPI_Transmit_IT+0xfc>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	2203      	movs	r2, #3
 80063c4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	2200      	movs	r2, #0
 80063cc:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	68ba      	ldr	r2, [r7, #8]
 80063d2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	88fa      	ldrh	r2, [r7, #6]
 80063d8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	88fa      	ldrh	r2, [r7, #6]
 80063de:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	2200      	movs	r2, #0
 80063e4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	2200      	movs	r2, #0
 80063ea:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	2200      	movs	r2, #0
 80063f2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxISR       = NULL;
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	2200      	movs	r2, #0
 80063fa:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	68db      	ldr	r3, [r3, #12]
 8006400:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006404:	d903      	bls.n	800640e <HAL_SPI_Transmit_IT+0x9a>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	4a1f      	ldr	r2, [pc, #124]	; (8006488 <HAL_SPI_Transmit_IT+0x114>)
 800640a:	651a      	str	r2, [r3, #80]	; 0x50
 800640c:	e002      	b.n	8006414 <HAL_SPI_Transmit_IT+0xa0>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	4a1e      	ldr	r2, [pc, #120]	; (800648c <HAL_SPI_Transmit_IT+0x118>)
 8006412:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	689b      	ldr	r3, [r3, #8]
 8006418:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800641c:	d10f      	bne.n	800643e <HAL_SPI_Transmit_IT+0xca>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	681a      	ldr	r2, [r3, #0]
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800642c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	681a      	ldr	r2, [r3, #0]
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800643c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	685a      	ldr	r2, [r3, #4]
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
 800644c:	605a      	str	r2, [r3, #4]


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006458:	2b40      	cmp	r3, #64	; 0x40
 800645a:	d008      	beq.n	800646e <HAL_SPI_Transmit_IT+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	681a      	ldr	r2, [r3, #0]
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800646a:	601a      	str	r2, [r3, #0]
 800646c:	e000      	b.n	8006470 <HAL_SPI_Transmit_IT+0xfc>
  }

error :
 800646e:	bf00      	nop
  __HAL_UNLOCK(hspi);
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	2200      	movs	r2, #0
 8006474:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006478:	7dfb      	ldrb	r3, [r7, #23]
}
 800647a:	4618      	mov	r0, r3
 800647c:	371c      	adds	r7, #28
 800647e:	46bd      	mov	sp, r7
 8006480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006484:	4770      	bx	lr
 8006486:	bf00      	nop
 8006488:	08006c9b 	.word	0x08006c9b
 800648c:	08006c55 	.word	0x08006c55

08006490 <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8006490:	b580      	push	{r7, lr}
 8006492:	b086      	sub	sp, #24
 8006494:	af00      	add	r7, sp, #0
 8006496:	60f8      	str	r0, [r7, #12]
 8006498:	60b9      	str	r1, [r7, #8]
 800649a:	4613      	mov	r3, r2
 800649c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800649e:	2300      	movs	r3, #0
 80064a0:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	689b      	ldr	r3, [r3, #8]
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d110      	bne.n	80064cc <HAL_SPI_Receive_IT+0x3c>
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	685b      	ldr	r3, [r3, #4]
 80064ae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80064b2:	d10b      	bne.n	80064cc <HAL_SPI_Receive_IT+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	2204      	movs	r2, #4
 80064b8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 80064bc:	88fb      	ldrh	r3, [r7, #6]
 80064be:	68ba      	ldr	r2, [r7, #8]
 80064c0:	68b9      	ldr	r1, [r7, #8]
 80064c2:	68f8      	ldr	r0, [r7, #12]
 80064c4:	f000 f894 	bl	80065f0 <HAL_SPI_TransmitReceive_IT>
 80064c8:	4603      	mov	r3, r0
 80064ca:	e089      	b.n	80065e0 <HAL_SPI_Receive_IT+0x150>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80064d2:	2b01      	cmp	r3, #1
 80064d4:	d101      	bne.n	80064da <HAL_SPI_Receive_IT+0x4a>
 80064d6:	2302      	movs	r3, #2
 80064d8:	e082      	b.n	80065e0 <HAL_SPI_Receive_IT+0x150>
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	2201      	movs	r2, #1
 80064de:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80064e8:	b2db      	uxtb	r3, r3
 80064ea:	2b01      	cmp	r3, #1
 80064ec:	d002      	beq.n	80064f4 <HAL_SPI_Receive_IT+0x64>
  {
    errorcode = HAL_BUSY;
 80064ee:	2302      	movs	r3, #2
 80064f0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80064f2:	e070      	b.n	80065d6 <HAL_SPI_Receive_IT+0x146>
  }

  if ((pData == NULL) || (Size == 0U))
 80064f4:	68bb      	ldr	r3, [r7, #8]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d002      	beq.n	8006500 <HAL_SPI_Receive_IT+0x70>
 80064fa:	88fb      	ldrh	r3, [r7, #6]
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d102      	bne.n	8006506 <HAL_SPI_Receive_IT+0x76>
  {
    errorcode = HAL_ERROR;
 8006500:	2301      	movs	r3, #1
 8006502:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006504:	e067      	b.n	80065d6 <HAL_SPI_Receive_IT+0x146>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	2204      	movs	r2, #4
 800650a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	2200      	movs	r2, #0
 8006512:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	68ba      	ldr	r2, [r7, #8]
 8006518:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	88fa      	ldrh	r2, [r7, #6]
 800651e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	88fa      	ldrh	r2, [r7, #6]
 8006526:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	2200      	movs	r2, #0
 800652e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	2200      	movs	r2, #0
 8006534:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	2200      	movs	r2, #0
 800653a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	2200      	movs	r2, #0
 8006540:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check the data size to adapt Rx threshold and the set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	68db      	ldr	r3, [r3, #12]
 8006546:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800654a:	d90b      	bls.n	8006564 <HAL_SPI_Receive_IT+0xd4>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	685a      	ldr	r2, [r3, #4]
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800655a:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_16BIT;
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	4a22      	ldr	r2, [pc, #136]	; (80065e8 <HAL_SPI_Receive_IT+0x158>)
 8006560:	64da      	str	r2, [r3, #76]	; 0x4c
 8006562:	e00a      	b.n	800657a <HAL_SPI_Receive_IT+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	685a      	ldr	r2, [r3, #4]
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006572:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_8BIT;
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	4a1d      	ldr	r2, [pc, #116]	; (80065ec <HAL_SPI_Receive_IT+0x15c>)
 8006578:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	689b      	ldr	r3, [r3, #8]
 800657e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006582:	d10f      	bne.n	80065a4 <HAL_SPI_Receive_IT+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	681a      	ldr	r2, [r3, #0]
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006592:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	681a      	ldr	r2, [r3, #0]
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80065a2:	601a      	str	r2, [r3, #0]
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	685a      	ldr	r2, [r3, #4]
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 80065b2:	605a      	str	r2, [r3, #4]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065be:	2b40      	cmp	r3, #64	; 0x40
 80065c0:	d008      	beq.n	80065d4 <HAL_SPI_Receive_IT+0x144>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	681a      	ldr	r2, [r3, #0]
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80065d0:	601a      	str	r2, [r3, #0]
 80065d2:	e000      	b.n	80065d6 <HAL_SPI_Receive_IT+0x146>
  }

error :
 80065d4:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	2200      	movs	r2, #0
 80065da:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80065de:	7dfb      	ldrb	r3, [r7, #23]
}
 80065e0:	4618      	mov	r0, r3
 80065e2:	3718      	adds	r7, #24
 80065e4:	46bd      	mov	sp, r7
 80065e6:	bd80      	pop	{r7, pc}
 80065e8:	08006c09 	.word	0x08006c09
 80065ec:	08006bb9 	.word	0x08006bb9

080065f0 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 80065f0:	b480      	push	{r7}
 80065f2:	b087      	sub	sp, #28
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	60f8      	str	r0, [r7, #12]
 80065f8:	60b9      	str	r1, [r7, #8]
 80065fa:	607a      	str	r2, [r7, #4]
 80065fc:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80065fe:	2300      	movs	r3, #0
 8006600:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006608:	2b01      	cmp	r3, #1
 800660a:	d101      	bne.n	8006610 <HAL_SPI_TransmitReceive_IT+0x20>
 800660c:	2302      	movs	r3, #2
 800660e:	e091      	b.n	8006734 <HAL_SPI_TransmitReceive_IT+0x144>
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	2201      	movs	r2, #1
 8006614:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800661e:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	685b      	ldr	r3, [r3, #4]
 8006624:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006626:	7dbb      	ldrb	r3, [r7, #22]
 8006628:	2b01      	cmp	r3, #1
 800662a:	d00d      	beq.n	8006648 <HAL_SPI_TransmitReceive_IT+0x58>
 800662c:	693b      	ldr	r3, [r7, #16]
 800662e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006632:	d106      	bne.n	8006642 <HAL_SPI_TransmitReceive_IT+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	689b      	ldr	r3, [r3, #8]
 8006638:	2b00      	cmp	r3, #0
 800663a:	d102      	bne.n	8006642 <HAL_SPI_TransmitReceive_IT+0x52>
 800663c:	7dbb      	ldrb	r3, [r7, #22]
 800663e:	2b04      	cmp	r3, #4
 8006640:	d002      	beq.n	8006648 <HAL_SPI_TransmitReceive_IT+0x58>
  {
    errorcode = HAL_BUSY;
 8006642:	2302      	movs	r3, #2
 8006644:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006646:	e070      	b.n	800672a <HAL_SPI_TransmitReceive_IT+0x13a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006648:	68bb      	ldr	r3, [r7, #8]
 800664a:	2b00      	cmp	r3, #0
 800664c:	d005      	beq.n	800665a <HAL_SPI_TransmitReceive_IT+0x6a>
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	2b00      	cmp	r3, #0
 8006652:	d002      	beq.n	800665a <HAL_SPI_TransmitReceive_IT+0x6a>
 8006654:	887b      	ldrh	r3, [r7, #2]
 8006656:	2b00      	cmp	r3, #0
 8006658:	d102      	bne.n	8006660 <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_ERROR;
 800665a:	2301      	movs	r3, #1
 800665c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800665e:	e064      	b.n	800672a <HAL_SPI_TransmitReceive_IT+0x13a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006666:	b2db      	uxtb	r3, r3
 8006668:	2b04      	cmp	r3, #4
 800666a:	d003      	beq.n	8006674 <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	2205      	movs	r2, #5
 8006670:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	2200      	movs	r2, #0
 8006678:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	68ba      	ldr	r2, [r7, #8]
 800667e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	887a      	ldrh	r2, [r7, #2]
 8006684:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	887a      	ldrh	r2, [r7, #2]
 800668a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	687a      	ldr	r2, [r7, #4]
 8006690:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	887a      	ldrh	r2, [r7, #2]
 8006696:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	887a      	ldrh	r2, [r7, #2]
 800669e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	68db      	ldr	r3, [r3, #12]
 80066a6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80066aa:	d906      	bls.n	80066ba <HAL_SPI_TransmitReceive_IT+0xca>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	4a24      	ldr	r2, [pc, #144]	; (8006740 <HAL_SPI_TransmitReceive_IT+0x150>)
 80066b0:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	4a23      	ldr	r2, [pc, #140]	; (8006744 <HAL_SPI_TransmitReceive_IT+0x154>)
 80066b6:	651a      	str	r2, [r3, #80]	; 0x50
 80066b8:	e005      	b.n	80066c6 <HAL_SPI_TransmitReceive_IT+0xd6>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	4a22      	ldr	r2, [pc, #136]	; (8006748 <HAL_SPI_TransmitReceive_IT+0x158>)
 80066be:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	4a22      	ldr	r2, [pc, #136]	; (800674c <HAL_SPI_TransmitReceive_IT+0x15c>)
 80066c4:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Check if packing mode is enabled and if there is more than 2 data to receive */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	68db      	ldr	r3, [r3, #12]
 80066ca:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80066ce:	d802      	bhi.n	80066d6 <HAL_SPI_TransmitReceive_IT+0xe6>
 80066d0:	887b      	ldrh	r3, [r7, #2]
 80066d2:	2b01      	cmp	r3, #1
 80066d4:	d908      	bls.n	80066e8 <HAL_SPI_TransmitReceive_IT+0xf8>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	685a      	ldr	r2, [r3, #4]
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80066e4:	605a      	str	r2, [r3, #4]
 80066e6:	e007      	b.n	80066f8 <HAL_SPI_TransmitReceive_IT+0x108>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	685a      	ldr	r2, [r3, #4]
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80066f6:	605a      	str	r2, [r3, #4]
  }

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	685a      	ldr	r2, [r3, #4]
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 8006706:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006712:	2b40      	cmp	r3, #64	; 0x40
 8006714:	d008      	beq.n	8006728 <HAL_SPI_TransmitReceive_IT+0x138>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	681a      	ldr	r2, [r3, #0]
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006724:	601a      	str	r2, [r3, #0]
 8006726:	e000      	b.n	800672a <HAL_SPI_TransmitReceive_IT+0x13a>
  }

error :
 8006728:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	2200      	movs	r2, #0
 800672e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006732:	7dfb      	ldrb	r3, [r7, #23]
}
 8006734:	4618      	mov	r0, r3
 8006736:	371c      	adds	r7, #28
 8006738:	46bd      	mov	sp, r7
 800673a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673e:	4770      	bx	lr
 8006740:	08006af3 	.word	0x08006af3
 8006744:	08006b59 	.word	0x08006b59
 8006748:	080069a3 	.word	0x080069a3
 800674c:	08006a61 	.word	0x08006a61

08006750 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8006750:	b580      	push	{r7, lr}
 8006752:	b088      	sub	sp, #32
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	685b      	ldr	r3, [r3, #4]
 800675e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	689b      	ldr	r3, [r3, #8]
 8006766:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006768:	69bb      	ldr	r3, [r7, #24]
 800676a:	099b      	lsrs	r3, r3, #6
 800676c:	f003 0301 	and.w	r3, r3, #1
 8006770:	2b00      	cmp	r3, #0
 8006772:	d10f      	bne.n	8006794 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006774:	69bb      	ldr	r3, [r7, #24]
 8006776:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800677a:	2b00      	cmp	r3, #0
 800677c:	d00a      	beq.n	8006794 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800677e:	69fb      	ldr	r3, [r7, #28]
 8006780:	099b      	lsrs	r3, r3, #6
 8006782:	f003 0301 	and.w	r3, r3, #1
 8006786:	2b00      	cmp	r3, #0
 8006788:	d004      	beq.n	8006794 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800678e:	6878      	ldr	r0, [r7, #4]
 8006790:	4798      	blx	r3
    return;
 8006792:	e0d7      	b.n	8006944 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8006794:	69bb      	ldr	r3, [r7, #24]
 8006796:	085b      	lsrs	r3, r3, #1
 8006798:	f003 0301 	and.w	r3, r3, #1
 800679c:	2b00      	cmp	r3, #0
 800679e:	d00a      	beq.n	80067b6 <HAL_SPI_IRQHandler+0x66>
 80067a0:	69fb      	ldr	r3, [r7, #28]
 80067a2:	09db      	lsrs	r3, r3, #7
 80067a4:	f003 0301 	and.w	r3, r3, #1
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d004      	beq.n	80067b6 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80067b0:	6878      	ldr	r0, [r7, #4]
 80067b2:	4798      	blx	r3
    return;
 80067b4:	e0c6      	b.n	8006944 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80067b6:	69bb      	ldr	r3, [r7, #24]
 80067b8:	095b      	lsrs	r3, r3, #5
 80067ba:	f003 0301 	and.w	r3, r3, #1
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d10c      	bne.n	80067dc <HAL_SPI_IRQHandler+0x8c>
 80067c2:	69bb      	ldr	r3, [r7, #24]
 80067c4:	099b      	lsrs	r3, r3, #6
 80067c6:	f003 0301 	and.w	r3, r3, #1
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d106      	bne.n	80067dc <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80067ce:	69bb      	ldr	r3, [r7, #24]
 80067d0:	0a1b      	lsrs	r3, r3, #8
 80067d2:	f003 0301 	and.w	r3, r3, #1
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	f000 80b4 	beq.w	8006944 <HAL_SPI_IRQHandler+0x1f4>
 80067dc:	69fb      	ldr	r3, [r7, #28]
 80067de:	095b      	lsrs	r3, r3, #5
 80067e0:	f003 0301 	and.w	r3, r3, #1
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	f000 80ad 	beq.w	8006944 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80067ea:	69bb      	ldr	r3, [r7, #24]
 80067ec:	099b      	lsrs	r3, r3, #6
 80067ee:	f003 0301 	and.w	r3, r3, #1
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d023      	beq.n	800683e <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80067fc:	b2db      	uxtb	r3, r3
 80067fe:	2b03      	cmp	r3, #3
 8006800:	d011      	beq.n	8006826 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006806:	f043 0204 	orr.w	r2, r3, #4
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800680e:	2300      	movs	r3, #0
 8006810:	617b      	str	r3, [r7, #20]
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	68db      	ldr	r3, [r3, #12]
 8006818:	617b      	str	r3, [r7, #20]
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	689b      	ldr	r3, [r3, #8]
 8006820:	617b      	str	r3, [r7, #20]
 8006822:	697b      	ldr	r3, [r7, #20]
 8006824:	e00b      	b.n	800683e <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006826:	2300      	movs	r3, #0
 8006828:	613b      	str	r3, [r7, #16]
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	68db      	ldr	r3, [r3, #12]
 8006830:	613b      	str	r3, [r7, #16]
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	689b      	ldr	r3, [r3, #8]
 8006838:	613b      	str	r3, [r7, #16]
 800683a:	693b      	ldr	r3, [r7, #16]
        return;
 800683c:	e082      	b.n	8006944 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800683e:	69bb      	ldr	r3, [r7, #24]
 8006840:	095b      	lsrs	r3, r3, #5
 8006842:	f003 0301 	and.w	r3, r3, #1
 8006846:	2b00      	cmp	r3, #0
 8006848:	d014      	beq.n	8006874 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800684e:	f043 0201 	orr.w	r2, r3, #1
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006856:	2300      	movs	r3, #0
 8006858:	60fb      	str	r3, [r7, #12]
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	689b      	ldr	r3, [r3, #8]
 8006860:	60fb      	str	r3, [r7, #12]
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	681a      	ldr	r2, [r3, #0]
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006870:	601a      	str	r2, [r3, #0]
 8006872:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8006874:	69bb      	ldr	r3, [r7, #24]
 8006876:	0a1b      	lsrs	r3, r3, #8
 8006878:	f003 0301 	and.w	r3, r3, #1
 800687c:	2b00      	cmp	r3, #0
 800687e:	d00c      	beq.n	800689a <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006884:	f043 0208 	orr.w	r2, r3, #8
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800688c:	2300      	movs	r3, #0
 800688e:	60bb      	str	r3, [r7, #8]
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	689b      	ldr	r3, [r3, #8]
 8006896:	60bb      	str	r3, [r7, #8]
 8006898:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d04f      	beq.n	8006942 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	685a      	ldr	r2, [r3, #4]
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80068b0:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	2201      	movs	r2, #1
 80068b6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80068ba:	69fb      	ldr	r3, [r7, #28]
 80068bc:	f003 0302 	and.w	r3, r3, #2
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d104      	bne.n	80068ce <HAL_SPI_IRQHandler+0x17e>
 80068c4:	69fb      	ldr	r3, [r7, #28]
 80068c6:	f003 0301 	and.w	r3, r3, #1
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d034      	beq.n	8006938 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	685a      	ldr	r2, [r3, #4]
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	f022 0203 	bic.w	r2, r2, #3
 80068dc:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d011      	beq.n	800690a <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068ea:	4a18      	ldr	r2, [pc, #96]	; (800694c <HAL_SPI_IRQHandler+0x1fc>)
 80068ec:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068f2:	4618      	mov	r0, r3
 80068f4:	f7fb ffda 	bl	80028ac <HAL_DMA_Abort_IT>
 80068f8:	4603      	mov	r3, r0
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d005      	beq.n	800690a <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006902:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800690e:	2b00      	cmp	r3, #0
 8006910:	d016      	beq.n	8006940 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006916:	4a0d      	ldr	r2, [pc, #52]	; (800694c <HAL_SPI_IRQHandler+0x1fc>)
 8006918:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800691e:	4618      	mov	r0, r3
 8006920:	f7fb ffc4 	bl	80028ac <HAL_DMA_Abort_IT>
 8006924:	4603      	mov	r3, r0
 8006926:	2b00      	cmp	r3, #0
 8006928:	d00a      	beq.n	8006940 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800692e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8006936:	e003      	b.n	8006940 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8006938:	6878      	ldr	r0, [r7, #4]
 800693a:	f000 f813 	bl	8006964 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800693e:	e000      	b.n	8006942 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8006940:	bf00      	nop
    return;
 8006942:	bf00      	nop
  }
}
 8006944:	3720      	adds	r7, #32
 8006946:	46bd      	mov	sp, r7
 8006948:	bd80      	pop	{r7, pc}
 800694a:	bf00      	nop
 800694c:	08006979 	.word	0x08006979

08006950 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006950:	b480      	push	{r7}
 8006952:	b083      	sub	sp, #12
 8006954:	af00      	add	r7, sp, #0
 8006956:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8006958:	bf00      	nop
 800695a:	370c      	adds	r7, #12
 800695c:	46bd      	mov	sp, r7
 800695e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006962:	4770      	bx	lr

08006964 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8006964:	b480      	push	{r7}
 8006966:	b083      	sub	sp, #12
 8006968:	af00      	add	r7, sp, #0
 800696a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800696c:	bf00      	nop
 800696e:	370c      	adds	r7, #12
 8006970:	46bd      	mov	sp, r7
 8006972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006976:	4770      	bx	lr

08006978 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006978:	b580      	push	{r7, lr}
 800697a:	b084      	sub	sp, #16
 800697c:	af00      	add	r7, sp, #0
 800697e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006984:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	2200      	movs	r2, #0
 800698a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	2200      	movs	r2, #0
 8006992:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8006994:	68f8      	ldr	r0, [r7, #12]
 8006996:	f7ff ffe5 	bl	8006964 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800699a:	bf00      	nop
 800699c:	3710      	adds	r7, #16
 800699e:	46bd      	mov	sp, r7
 80069a0:	bd80      	pop	{r7, pc}

080069a2 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80069a2:	b580      	push	{r7, lr}
 80069a4:	b082      	sub	sp, #8
 80069a6:	af00      	add	r7, sp, #0
 80069a8:	6078      	str	r0, [r7, #4]
  /* Receive data in packing mode */
  if (hspi->RxXferCount > 1U)
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80069b0:	b29b      	uxth	r3, r3
 80069b2:	2b01      	cmp	r3, #1
 80069b4:	d923      	bls.n	80069fe <SPI_2linesRxISR_8BIT+0x5c>
  {
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	68da      	ldr	r2, [r3, #12]
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069c0:	b292      	uxth	r2, r2
 80069c2:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069c8:	1c9a      	adds	r2, r3, #2
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount -= 2U;
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80069d4:	b29b      	uxth	r3, r3
 80069d6:	3b02      	subs	r3, #2
 80069d8:	b29a      	uxth	r2, r3
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    if (hspi->RxXferCount == 1U)
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80069e6:	b29b      	uxth	r3, r3
 80069e8:	2b01      	cmp	r3, #1
 80069ea:	d11f      	bne.n	8006a2c <SPI_2linesRxISR_8BIT+0x8a>
    {
      /* Set RX Fifo threshold according the reception data length: 8bit */
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	685a      	ldr	r2, [r3, #4]
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80069fa:	605a      	str	r2, [r3, #4]
 80069fc:	e016      	b.n	8006a2c <SPI_2linesRxISR_8BIT+0x8a>
    }
  }
  /* Receive data in 8 Bit mode */
  else
  {
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	f103 020c 	add.w	r2, r3, #12
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a0a:	7812      	ldrb	r2, [r2, #0]
 8006a0c:	b2d2      	uxtb	r2, r2
 8006a0e:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a14:	1c5a      	adds	r2, r3, #1
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount--;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006a20:	b29b      	uxth	r3, r3
 8006a22:	3b01      	subs	r3, #1
 8006a24:	b29a      	uxth	r2, r3
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  }

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006a32:	b29b      	uxth	r3, r3
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d10f      	bne.n	8006a58 <SPI_2linesRxISR_8BIT+0xb6>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	685a      	ldr	r2, [r3, #4]
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006a46:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a4c:	b29b      	uxth	r3, r3
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d102      	bne.n	8006a58 <SPI_2linesRxISR_8BIT+0xb6>
    {
      SPI_CloseRxTx_ISR(hspi);
 8006a52:	6878      	ldr	r0, [r7, #4]
 8006a54:	f000 fafc 	bl	8007050 <SPI_CloseRxTx_ISR>
    }
  }
}
 8006a58:	bf00      	nop
 8006a5a:	3708      	adds	r7, #8
 8006a5c:	46bd      	mov	sp, r7
 8006a5e:	bd80      	pop	{r7, pc}

08006a60 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8006a60:	b580      	push	{r7, lr}
 8006a62:	b082      	sub	sp, #8
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	6078      	str	r0, [r7, #4]
  /* Transmit data in packing Bit mode */
  if (hspi->TxXferCount >= 2U)
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a6c:	b29b      	uxth	r3, r3
 8006a6e:	2b01      	cmp	r3, #1
 8006a70:	d912      	bls.n	8006a98 <SPI_2linesTxISR_8BIT+0x38>
  {
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a76:	881a      	ldrh	r2, [r3, #0]
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a82:	1c9a      	adds	r2, r3, #2
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount -= 2U;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a8c:	b29b      	uxth	r3, r3
 8006a8e:	3b02      	subs	r3, #2
 8006a90:	b29a      	uxth	r2, r3
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006a96:	e012      	b.n	8006abe <SPI_2linesTxISR_8BIT+0x5e>
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	330c      	adds	r3, #12
 8006aa2:	7812      	ldrb	r2, [r2, #0]
 8006aa4:	701a      	strb	r2, [r3, #0]
    hspi->pTxBuffPtr++;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006aaa:	1c5a      	adds	r2, r3, #1
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount--;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ab4:	b29b      	uxth	r3, r3
 8006ab6:	3b01      	subs	r3, #1
 8006ab8:	b29a      	uxth	r2, r3
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	87da      	strh	r2, [r3, #62]	; 0x3e
  }

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ac2:	b29b      	uxth	r3, r3
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d110      	bne.n	8006aea <SPI_2linesTxISR_8BIT+0x8a>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	685a      	ldr	r2, [r3, #4]
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006ad6:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006ade:	b29b      	uxth	r3, r3
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d102      	bne.n	8006aea <SPI_2linesTxISR_8BIT+0x8a>
    {
      SPI_CloseRxTx_ISR(hspi);
 8006ae4:	6878      	ldr	r0, [r7, #4]
 8006ae6:	f000 fab3 	bl	8007050 <SPI_CloseRxTx_ISR>
    }
  }
}
 8006aea:	bf00      	nop
 8006aec:	3708      	adds	r7, #8
 8006aee:	46bd      	mov	sp, r7
 8006af0:	bd80      	pop	{r7, pc}

08006af2 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8006af2:	b580      	push	{r7, lr}
 8006af4:	b082      	sub	sp, #8
 8006af6:	af00      	add	r7, sp, #0
 8006af8:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	68da      	ldr	r2, [r3, #12]
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b04:	b292      	uxth	r2, r2
 8006b06:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b0c:	1c9a      	adds	r2, r3, #2
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006b18:	b29b      	uxth	r3, r3
 8006b1a:	3b01      	subs	r3, #1
 8006b1c:	b29a      	uxth	r2, r3
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  if (hspi->RxXferCount == 0U)
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006b2a:	b29b      	uxth	r3, r3
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d10f      	bne.n	8006b50 <SPI_2linesRxISR_16BIT+0x5e>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	685a      	ldr	r2, [r3, #4]
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006b3e:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006b44:	b29b      	uxth	r3, r3
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d102      	bne.n	8006b50 <SPI_2linesRxISR_16BIT+0x5e>
    {
      SPI_CloseRxTx_ISR(hspi);
 8006b4a:	6878      	ldr	r0, [r7, #4]
 8006b4c:	f000 fa80 	bl	8007050 <SPI_CloseRxTx_ISR>
    }
  }
}
 8006b50:	bf00      	nop
 8006b52:	3708      	adds	r7, #8
 8006b54:	46bd      	mov	sp, r7
 8006b56:	bd80      	pop	{r7, pc}

08006b58 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8006b58:	b580      	push	{r7, lr}
 8006b5a:	b082      	sub	sp, #8
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b64:	881a      	ldrh	r2, [r3, #0]
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b70:	1c9a      	adds	r2, r3, #2
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006b7a:	b29b      	uxth	r3, r3
 8006b7c:	3b01      	subs	r3, #1
 8006b7e:	b29a      	uxth	r2, r3
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006b88:	b29b      	uxth	r3, r3
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d110      	bne.n	8006bb0 <SPI_2linesTxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	685a      	ldr	r2, [r3, #4]
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006b9c:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006ba4:	b29b      	uxth	r3, r3
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d102      	bne.n	8006bb0 <SPI_2linesTxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 8006baa:	6878      	ldr	r0, [r7, #4]
 8006bac:	f000 fa50 	bl	8007050 <SPI_CloseRxTx_ISR>
    }
  }
}
 8006bb0:	bf00      	nop
 8006bb2:	3708      	adds	r7, #8
 8006bb4:	46bd      	mov	sp, r7
 8006bb6:	bd80      	pop	{r7, pc}

08006bb8 <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8006bb8:	b580      	push	{r7, lr}
 8006bba:	b082      	sub	sp, #8
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	f103 020c 	add.w	r2, r3, #12
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bcc:	7812      	ldrb	r2, [r2, #0]
 8006bce:	b2d2      	uxtb	r2, r2
 8006bd0:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bd6:	1c5a      	adds	r2, r3, #1
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006be2:	b29b      	uxth	r3, r3
 8006be4:	3b01      	subs	r3, #1
 8006be6:	b29a      	uxth	r2, r3
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006bf4:	b29b      	uxth	r3, r3
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d102      	bne.n	8006c00 <SPI_RxISR_8BIT+0x48>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8006bfa:	6878      	ldr	r0, [r7, #4]
 8006bfc:	f000 fa6a 	bl	80070d4 <SPI_CloseRx_ISR>
  }
}
 8006c00:	bf00      	nop
 8006c02:	3708      	adds	r7, #8
 8006c04:	46bd      	mov	sp, r7
 8006c06:	bd80      	pop	{r7, pc}

08006c08 <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8006c08:	b580      	push	{r7, lr}
 8006c0a:	b082      	sub	sp, #8
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	68da      	ldr	r2, [r3, #12]
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c1a:	b292      	uxth	r2, r2
 8006c1c:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c22:	1c9a      	adds	r2, r3, #2
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006c2e:	b29b      	uxth	r3, r3
 8006c30:	3b01      	subs	r3, #1
 8006c32:	b29a      	uxth	r2, r3
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006c40:	b29b      	uxth	r3, r3
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d102      	bne.n	8006c4c <SPI_RxISR_16BIT+0x44>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8006c46:	6878      	ldr	r0, [r7, #4]
 8006c48:	f000 fa44 	bl	80070d4 <SPI_CloseRx_ISR>
  }
}
 8006c4c:	bf00      	nop
 8006c4e:	3708      	adds	r7, #8
 8006c50:	46bd      	mov	sp, r7
 8006c52:	bd80      	pop	{r7, pc}

08006c54 <SPI_TxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8006c54:	b580      	push	{r7, lr}
 8006c56:	b082      	sub	sp, #8
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	330c      	adds	r3, #12
 8006c66:	7812      	ldrb	r2, [r2, #0]
 8006c68:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c6e:	1c5a      	adds	r2, r3, #1
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006c78:	b29b      	uxth	r3, r3
 8006c7a:	3b01      	subs	r3, #1
 8006c7c:	b29a      	uxth	r2, r3
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->TxXferCount == 0U)
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006c86:	b29b      	uxth	r3, r3
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d102      	bne.n	8006c92 <SPI_TxISR_8BIT+0x3e>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8006c8c:	6878      	ldr	r0, [r7, #4]
 8006c8e:	f000 fa51 	bl	8007134 <SPI_CloseTx_ISR>
  }
}
 8006c92:	bf00      	nop
 8006c94:	3708      	adds	r7, #8
 8006c96:	46bd      	mov	sp, r7
 8006c98:	bd80      	pop	{r7, pc}

08006c9a <SPI_TxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8006c9a:	b580      	push	{r7, lr}
 8006c9c:	b082      	sub	sp, #8
 8006c9e:	af00      	add	r7, sp, #0
 8006ca0:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ca6:	881a      	ldrh	r2, [r3, #0]
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cb2:	1c9a      	adds	r2, r3, #2
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006cbc:	b29b      	uxth	r3, r3
 8006cbe:	3b01      	subs	r3, #1
 8006cc0:	b29a      	uxth	r2, r3
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->TxXferCount == 0U)
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006cca:	b29b      	uxth	r3, r3
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d102      	bne.n	8006cd6 <SPI_TxISR_16BIT+0x3c>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8006cd0:	6878      	ldr	r0, [r7, #4]
 8006cd2:	f000 fa2f 	bl	8007134 <SPI_CloseTx_ISR>
  }
}
 8006cd6:	bf00      	nop
 8006cd8:	3708      	adds	r7, #8
 8006cda:	46bd      	mov	sp, r7
 8006cdc:	bd80      	pop	{r7, pc}
	...

08006ce0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006ce0:	b580      	push	{r7, lr}
 8006ce2:	b088      	sub	sp, #32
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	60f8      	str	r0, [r7, #12]
 8006ce8:	60b9      	str	r1, [r7, #8]
 8006cea:	603b      	str	r3, [r7, #0]
 8006cec:	4613      	mov	r3, r2
 8006cee:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006cf0:	f7fb fb4e 	bl	8002390 <HAL_GetTick>
 8006cf4:	4602      	mov	r2, r0
 8006cf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cf8:	1a9b      	subs	r3, r3, r2
 8006cfa:	683a      	ldr	r2, [r7, #0]
 8006cfc:	4413      	add	r3, r2
 8006cfe:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006d00:	f7fb fb46 	bl	8002390 <HAL_GetTick>
 8006d04:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006d06:	4b39      	ldr	r3, [pc, #228]	; (8006dec <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	015b      	lsls	r3, r3, #5
 8006d0c:	0d1b      	lsrs	r3, r3, #20
 8006d0e:	69fa      	ldr	r2, [r7, #28]
 8006d10:	fb02 f303 	mul.w	r3, r2, r3
 8006d14:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006d16:	e054      	b.n	8006dc2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006d18:	683b      	ldr	r3, [r7, #0]
 8006d1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d1e:	d050      	beq.n	8006dc2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006d20:	f7fb fb36 	bl	8002390 <HAL_GetTick>
 8006d24:	4602      	mov	r2, r0
 8006d26:	69bb      	ldr	r3, [r7, #24]
 8006d28:	1ad3      	subs	r3, r2, r3
 8006d2a:	69fa      	ldr	r2, [r7, #28]
 8006d2c:	429a      	cmp	r2, r3
 8006d2e:	d902      	bls.n	8006d36 <SPI_WaitFlagStateUntilTimeout+0x56>
 8006d30:	69fb      	ldr	r3, [r7, #28]
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d13d      	bne.n	8006db2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	685a      	ldr	r2, [r3, #4]
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006d44:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	685b      	ldr	r3, [r3, #4]
 8006d4a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006d4e:	d111      	bne.n	8006d74 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	689b      	ldr	r3, [r3, #8]
 8006d54:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d58:	d004      	beq.n	8006d64 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	689b      	ldr	r3, [r3, #8]
 8006d5e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006d62:	d107      	bne.n	8006d74 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	681a      	ldr	r2, [r3, #0]
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006d72:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d78:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006d7c:	d10f      	bne.n	8006d9e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	681a      	ldr	r2, [r3, #0]
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006d8c:	601a      	str	r2, [r3, #0]
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	681a      	ldr	r2, [r3, #0]
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006d9c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	2201      	movs	r2, #1
 8006da2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	2200      	movs	r2, #0
 8006daa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006dae:	2303      	movs	r3, #3
 8006db0:	e017      	b.n	8006de2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8006db2:	697b      	ldr	r3, [r7, #20]
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d101      	bne.n	8006dbc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006db8:	2300      	movs	r3, #0
 8006dba:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006dbc:	697b      	ldr	r3, [r7, #20]
 8006dbe:	3b01      	subs	r3, #1
 8006dc0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	689a      	ldr	r2, [r3, #8]
 8006dc8:	68bb      	ldr	r3, [r7, #8]
 8006dca:	4013      	ands	r3, r2
 8006dcc:	68ba      	ldr	r2, [r7, #8]
 8006dce:	429a      	cmp	r2, r3
 8006dd0:	bf0c      	ite	eq
 8006dd2:	2301      	moveq	r3, #1
 8006dd4:	2300      	movne	r3, #0
 8006dd6:	b2db      	uxtb	r3, r3
 8006dd8:	461a      	mov	r2, r3
 8006dda:	79fb      	ldrb	r3, [r7, #7]
 8006ddc:	429a      	cmp	r2, r3
 8006dde:	d19b      	bne.n	8006d18 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006de0:	2300      	movs	r3, #0
}
 8006de2:	4618      	mov	r0, r3
 8006de4:	3720      	adds	r7, #32
 8006de6:	46bd      	mov	sp, r7
 8006de8:	bd80      	pop	{r7, pc}
 8006dea:	bf00      	nop
 8006dec:	20000004 	.word	0x20000004

08006df0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006df0:	b580      	push	{r7, lr}
 8006df2:	b088      	sub	sp, #32
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	60f8      	str	r0, [r7, #12]
 8006df8:	60b9      	str	r1, [r7, #8]
 8006dfa:	607a      	str	r2, [r7, #4]
 8006dfc:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8006dfe:	f7fb fac7 	bl	8002390 <HAL_GetTick>
 8006e02:	4602      	mov	r2, r0
 8006e04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e06:	1a9b      	subs	r3, r3, r2
 8006e08:	683a      	ldr	r2, [r7, #0]
 8006e0a:	4413      	add	r3, r2
 8006e0c:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006e0e:	f7fb fabf 	bl	8002390 <HAL_GetTick>
 8006e12:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006e14:	4b3e      	ldr	r3, [pc, #248]	; (8006f10 <SPI_WaitFifoStateUntilTimeout+0x120>)
 8006e16:	681a      	ldr	r2, [r3, #0]
 8006e18:	4613      	mov	r3, r2
 8006e1a:	009b      	lsls	r3, r3, #2
 8006e1c:	4413      	add	r3, r2
 8006e1e:	00da      	lsls	r2, r3, #3
 8006e20:	1ad3      	subs	r3, r2, r3
 8006e22:	0d1b      	lsrs	r3, r3, #20
 8006e24:	69fa      	ldr	r2, [r7, #28]
 8006e26:	fb02 f303 	mul.w	r3, r2, r3
 8006e2a:	613b      	str	r3, [r7, #16]

  while ((hspi->Instance->SR & Fifo) != State)
 8006e2c:	e062      	b.n	8006ef4 <SPI_WaitFifoStateUntilTimeout+0x104>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8006e2e:	68bb      	ldr	r3, [r7, #8]
 8006e30:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006e34:	d109      	bne.n	8006e4a <SPI_WaitFifoStateUntilTimeout+0x5a>
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d106      	bne.n	8006e4a <SPI_WaitFifoStateUntilTimeout+0x5a>
    {
      /* Flush Data Register by a blank read */
      tmpreg = READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	330c      	adds	r3, #12
 8006e42:	781b      	ldrb	r3, [r3, #0]
 8006e44:	b2db      	uxtb	r3, r3
 8006e46:	617b      	str	r3, [r7, #20]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 8006e48:	697b      	ldr	r3, [r7, #20]
    }

    if (Timeout != HAL_MAX_DELAY)
 8006e4a:	683b      	ldr	r3, [r7, #0]
 8006e4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e50:	d050      	beq.n	8006ef4 <SPI_WaitFifoStateUntilTimeout+0x104>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006e52:	f7fb fa9d 	bl	8002390 <HAL_GetTick>
 8006e56:	4602      	mov	r2, r0
 8006e58:	69bb      	ldr	r3, [r7, #24]
 8006e5a:	1ad3      	subs	r3, r2, r3
 8006e5c:	69fa      	ldr	r2, [r7, #28]
 8006e5e:	429a      	cmp	r2, r3
 8006e60:	d902      	bls.n	8006e68 <SPI_WaitFifoStateUntilTimeout+0x78>
 8006e62:	69fb      	ldr	r3, [r7, #28]
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d13d      	bne.n	8006ee4 <SPI_WaitFifoStateUntilTimeout+0xf4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	685a      	ldr	r2, [r3, #4]
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006e76:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	685b      	ldr	r3, [r3, #4]
 8006e7c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006e80:	d111      	bne.n	8006ea6 <SPI_WaitFifoStateUntilTimeout+0xb6>
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	689b      	ldr	r3, [r3, #8]
 8006e86:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006e8a:	d004      	beq.n	8006e96 <SPI_WaitFifoStateUntilTimeout+0xa6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	689b      	ldr	r3, [r3, #8]
 8006e90:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e94:	d107      	bne.n	8006ea6 <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	681a      	ldr	r2, [r3, #0]
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006ea4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006eaa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006eae:	d10f      	bne.n	8006ed0 <SPI_WaitFifoStateUntilTimeout+0xe0>
        {
          SPI_RESET_CRC(hspi);
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	681a      	ldr	r2, [r3, #0]
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006ebe:	601a      	str	r2, [r3, #0]
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	681a      	ldr	r2, [r3, #0]
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006ece:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	2201      	movs	r2, #1
 8006ed4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	2200      	movs	r2, #0
 8006edc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006ee0:	2303      	movs	r3, #3
 8006ee2:	e010      	b.n	8006f06 <SPI_WaitFifoStateUntilTimeout+0x116>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8006ee4:	693b      	ldr	r3, [r7, #16]
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d101      	bne.n	8006eee <SPI_WaitFifoStateUntilTimeout+0xfe>
      {
        tmp_timeout = 0U;
 8006eea:	2300      	movs	r3, #0
 8006eec:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 8006eee:	693b      	ldr	r3, [r7, #16]
 8006ef0:	3b01      	subs	r3, #1
 8006ef2:	613b      	str	r3, [r7, #16]
  while ((hspi->Instance->SR & Fifo) != State)
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	689a      	ldr	r2, [r3, #8]
 8006efa:	68bb      	ldr	r3, [r7, #8]
 8006efc:	4013      	ands	r3, r2
 8006efe:	687a      	ldr	r2, [r7, #4]
 8006f00:	429a      	cmp	r2, r3
 8006f02:	d194      	bne.n	8006e2e <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 8006f04:	2300      	movs	r3, #0
}
 8006f06:	4618      	mov	r0, r3
 8006f08:	3720      	adds	r7, #32
 8006f0a:	46bd      	mov	sp, r7
 8006f0c:	bd80      	pop	{r7, pc}
 8006f0e:	bf00      	nop
 8006f10:	20000004 	.word	0x20000004

08006f14 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006f14:	b580      	push	{r7, lr}
 8006f16:	b086      	sub	sp, #24
 8006f18:	af02      	add	r7, sp, #8
 8006f1a:	60f8      	str	r0, [r7, #12]
 8006f1c:	60b9      	str	r1, [r7, #8]
 8006f1e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	685b      	ldr	r3, [r3, #4]
 8006f24:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006f28:	d111      	bne.n	8006f4e <SPI_EndRxTransaction+0x3a>
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	689b      	ldr	r3, [r3, #8]
 8006f2e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f32:	d004      	beq.n	8006f3e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	689b      	ldr	r3, [r3, #8]
 8006f38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f3c:	d107      	bne.n	8006f4e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	681a      	ldr	r2, [r3, #0]
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006f4c:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	9300      	str	r3, [sp, #0]
 8006f52:	68bb      	ldr	r3, [r7, #8]
 8006f54:	2200      	movs	r2, #0
 8006f56:	2180      	movs	r1, #128	; 0x80
 8006f58:	68f8      	ldr	r0, [r7, #12]
 8006f5a:	f7ff fec1 	bl	8006ce0 <SPI_WaitFlagStateUntilTimeout>
 8006f5e:	4603      	mov	r3, r0
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d007      	beq.n	8006f74 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f68:	f043 0220 	orr.w	r2, r3, #32
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006f70:	2303      	movs	r3, #3
 8006f72:	e023      	b.n	8006fbc <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	685b      	ldr	r3, [r3, #4]
 8006f78:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006f7c:	d11d      	bne.n	8006fba <SPI_EndRxTransaction+0xa6>
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	689b      	ldr	r3, [r3, #8]
 8006f82:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f86:	d004      	beq.n	8006f92 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	689b      	ldr	r3, [r3, #8]
 8006f8c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f90:	d113      	bne.n	8006fba <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	9300      	str	r3, [sp, #0]
 8006f96:	68bb      	ldr	r3, [r7, #8]
 8006f98:	2200      	movs	r2, #0
 8006f9a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006f9e:	68f8      	ldr	r0, [r7, #12]
 8006fa0:	f7ff ff26 	bl	8006df0 <SPI_WaitFifoStateUntilTimeout>
 8006fa4:	4603      	mov	r3, r0
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d007      	beq.n	8006fba <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006fae:	f043 0220 	orr.w	r2, r3, #32
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8006fb6:	2303      	movs	r3, #3
 8006fb8:	e000      	b.n	8006fbc <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8006fba:	2300      	movs	r3, #0
}
 8006fbc:	4618      	mov	r0, r3
 8006fbe:	3710      	adds	r7, #16
 8006fc0:	46bd      	mov	sp, r7
 8006fc2:	bd80      	pop	{r7, pc}

08006fc4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006fc4:	b580      	push	{r7, lr}
 8006fc6:	b086      	sub	sp, #24
 8006fc8:	af02      	add	r7, sp, #8
 8006fca:	60f8      	str	r0, [r7, #12]
 8006fcc:	60b9      	str	r1, [r7, #8]
 8006fce:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	9300      	str	r3, [sp, #0]
 8006fd4:	68bb      	ldr	r3, [r7, #8]
 8006fd6:	2200      	movs	r2, #0
 8006fd8:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8006fdc:	68f8      	ldr	r0, [r7, #12]
 8006fde:	f7ff ff07 	bl	8006df0 <SPI_WaitFifoStateUntilTimeout>
 8006fe2:	4603      	mov	r3, r0
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d007      	beq.n	8006ff8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006fec:	f043 0220 	orr.w	r2, r3, #32
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006ff4:	2303      	movs	r3, #3
 8006ff6:	e027      	b.n	8007048 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	9300      	str	r3, [sp, #0]
 8006ffc:	68bb      	ldr	r3, [r7, #8]
 8006ffe:	2200      	movs	r2, #0
 8007000:	2180      	movs	r1, #128	; 0x80
 8007002:	68f8      	ldr	r0, [r7, #12]
 8007004:	f7ff fe6c 	bl	8006ce0 <SPI_WaitFlagStateUntilTimeout>
 8007008:	4603      	mov	r3, r0
 800700a:	2b00      	cmp	r3, #0
 800700c:	d007      	beq.n	800701e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007012:	f043 0220 	orr.w	r2, r3, #32
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800701a:	2303      	movs	r3, #3
 800701c:	e014      	b.n	8007048 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	9300      	str	r3, [sp, #0]
 8007022:	68bb      	ldr	r3, [r7, #8]
 8007024:	2200      	movs	r2, #0
 8007026:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800702a:	68f8      	ldr	r0, [r7, #12]
 800702c:	f7ff fee0 	bl	8006df0 <SPI_WaitFifoStateUntilTimeout>
 8007030:	4603      	mov	r3, r0
 8007032:	2b00      	cmp	r3, #0
 8007034:	d007      	beq.n	8007046 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800703a:	f043 0220 	orr.w	r2, r3, #32
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007042:	2303      	movs	r3, #3
 8007044:	e000      	b.n	8007048 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8007046:	2300      	movs	r3, #0
}
 8007048:	4618      	mov	r0, r3
 800704a:	3710      	adds	r7, #16
 800704c:	46bd      	mov	sp, r7
 800704e:	bd80      	pop	{r7, pc}

08007050 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 8007050:	b580      	push	{r7, lr}
 8007052:	b084      	sub	sp, #16
 8007054:	af00      	add	r7, sp, #0
 8007056:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007058:	f7fb f99a 	bl	8002390 <HAL_GetTick>
 800705c:	60f8      	str	r0, [r7, #12]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	685a      	ldr	r2, [r3, #4]
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	f022 0220 	bic.w	r2, r2, #32
 800706c:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800706e:	68fa      	ldr	r2, [r7, #12]
 8007070:	2164      	movs	r1, #100	; 0x64
 8007072:	6878      	ldr	r0, [r7, #4]
 8007074:	f7ff ffa6 	bl	8006fc4 <SPI_EndRxTxTransaction>
 8007078:	4603      	mov	r3, r0
 800707a:	2b00      	cmp	r3, #0
 800707c:	d005      	beq.n	800708a <SPI_CloseRxTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007082:	f043 0220 	orr.w	r2, r3, #32
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	661a      	str	r2, [r3, #96]	; 0x60
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800708e:	2b00      	cmp	r3, #0
 8007090:	d115      	bne.n	80070be <SPI_CloseRxTx_ISR+0x6e>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007098:	b2db      	uxtb	r3, r3
 800709a:	2b04      	cmp	r3, #4
 800709c:	d107      	bne.n	80070ae <SPI_CloseRxTx_ISR+0x5e>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	2201      	movs	r2, #1
 80070a2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 80070a6:	6878      	ldr	r0, [r7, #4]
 80070a8:	f003 f990 	bl	800a3cc <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 80070ac:	e00e      	b.n	80070cc <SPI_CloseRxTx_ISR+0x7c>
        hspi->State = HAL_SPI_STATE_READY;
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	2201      	movs	r2, #1
 80070b2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        HAL_SPI_TxRxCpltCallback(hspi);
 80070b6:	6878      	ldr	r0, [r7, #4]
 80070b8:	f7ff fc4a 	bl	8006950 <HAL_SPI_TxRxCpltCallback>
}
 80070bc:	e006      	b.n	80070cc <SPI_CloseRxTx_ISR+0x7c>
      hspi->State = HAL_SPI_STATE_READY;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	2201      	movs	r2, #1
 80070c2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      HAL_SPI_ErrorCallback(hspi);
 80070c6:	6878      	ldr	r0, [r7, #4]
 80070c8:	f7ff fc4c 	bl	8006964 <HAL_SPI_ErrorCallback>
}
 80070cc:	bf00      	nop
 80070ce:	3710      	adds	r7, #16
 80070d0:	46bd      	mov	sp, r7
 80070d2:	bd80      	pop	{r7, pc}

080070d4 <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 80070d4:	b580      	push	{r7, lr}
 80070d6:	b082      	sub	sp, #8
 80070d8:	af00      	add	r7, sp, #0
 80070da:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	685a      	ldr	r2, [r3, #4]
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80070ea:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 80070ec:	f7fb f950 	bl	8002390 <HAL_GetTick>
 80070f0:	4603      	mov	r3, r0
 80070f2:	461a      	mov	r2, r3
 80070f4:	2164      	movs	r1, #100	; 0x64
 80070f6:	6878      	ldr	r0, [r7, #4]
 80070f8:	f7ff ff0c 	bl	8006f14 <SPI_EndRxTransaction>
 80070fc:	4603      	mov	r3, r0
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d005      	beq.n	800710e <SPI_CloseRx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007106:	f043 0220 	orr.w	r2, r3, #32
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	661a      	str	r2, [r3, #96]	; 0x60
  }
  hspi->State = HAL_SPI_STATE_READY;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	2201      	movs	r2, #1
 8007112:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800711a:	2b00      	cmp	r3, #0
 800711c:	d103      	bne.n	8007126 <SPI_CloseRx_ISR+0x52>
    {
      /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 800711e:	6878      	ldr	r0, [r7, #4]
 8007120:	f003 f954 	bl	800a3cc <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8007124:	e002      	b.n	800712c <SPI_CloseRx_ISR+0x58>
      HAL_SPI_ErrorCallback(hspi);
 8007126:	6878      	ldr	r0, [r7, #4]
 8007128:	f7ff fc1c 	bl	8006964 <HAL_SPI_ErrorCallback>
}
 800712c:	bf00      	nop
 800712e:	3708      	adds	r7, #8
 8007130:	46bd      	mov	sp, r7
 8007132:	bd80      	pop	{r7, pc}

08007134 <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 8007134:	b580      	push	{r7, lr}
 8007136:	b084      	sub	sp, #16
 8007138:	af00      	add	r7, sp, #0
 800713a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800713c:	f7fb f928 	bl	8002390 <HAL_GetTick>
 8007140:	60f8      	str	r0, [r7, #12]

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	685a      	ldr	r2, [r3, #4]
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007150:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8007152:	68fa      	ldr	r2, [r7, #12]
 8007154:	2164      	movs	r1, #100	; 0x64
 8007156:	6878      	ldr	r0, [r7, #4]
 8007158:	f7ff ff34 	bl	8006fc4 <SPI_EndRxTxTransaction>
 800715c:	4603      	mov	r3, r0
 800715e:	2b00      	cmp	r3, #0
 8007160:	d005      	beq.n	800716e <SPI_CloseTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007166:	f043 0220 	orr.w	r2, r3, #32
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	689b      	ldr	r3, [r3, #8]
 8007172:	2b00      	cmp	r3, #0
 8007174:	d10a      	bne.n	800718c <SPI_CloseTx_ISR+0x58>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007176:	2300      	movs	r3, #0
 8007178:	60bb      	str	r3, [r7, #8]
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	68db      	ldr	r3, [r3, #12]
 8007180:	60bb      	str	r3, [r7, #8]
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	689b      	ldr	r3, [r3, #8]
 8007188:	60bb      	str	r3, [r7, #8]
 800718a:	68bb      	ldr	r3, [r7, #8]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	2201      	movs	r2, #1
 8007190:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007198:	2b00      	cmp	r3, #0
 800719a:	d003      	beq.n	80071a4 <SPI_CloseTx_ISR+0x70>
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 800719c:	6878      	ldr	r0, [r7, #4]
 800719e:	f7ff fbe1 	bl	8006964 <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 80071a2:	e002      	b.n	80071aa <SPI_CloseTx_ISR+0x76>
    HAL_SPI_TxCpltCallback(hspi);
 80071a4:	6878      	ldr	r0, [r7, #4]
 80071a6:	f003 f925 	bl	800a3f4 <HAL_SPI_TxCpltCallback>
}
 80071aa:	bf00      	nop
 80071ac:	3710      	adds	r7, #16
 80071ae:	46bd      	mov	sp, r7
 80071b0:	bd80      	pop	{r7, pc}

080071b2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80071b2:	b580      	push	{r7, lr}
 80071b4:	b082      	sub	sp, #8
 80071b6:	af00      	add	r7, sp, #0
 80071b8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d101      	bne.n	80071c4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80071c0:	2301      	movs	r3, #1
 80071c2:	e049      	b.n	8007258 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80071ca:	b2db      	uxtb	r3, r3
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d106      	bne.n	80071de <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	2200      	movs	r2, #0
 80071d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80071d8:	6878      	ldr	r0, [r7, #4]
 80071da:	f7fa fd75 	bl	8001cc8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	2202      	movs	r2, #2
 80071e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681a      	ldr	r2, [r3, #0]
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	3304      	adds	r3, #4
 80071ee:	4619      	mov	r1, r3
 80071f0:	4610      	mov	r0, r2
 80071f2:	f000 f9ed 	bl	80075d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	2201      	movs	r2, #1
 80071fa:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	2201      	movs	r2, #1
 8007202:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	2201      	movs	r2, #1
 800720a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	2201      	movs	r2, #1
 8007212:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	2201      	movs	r2, #1
 800721a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	2201      	movs	r2, #1
 8007222:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	2201      	movs	r2, #1
 800722a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	2201      	movs	r2, #1
 8007232:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	2201      	movs	r2, #1
 800723a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	2201      	movs	r2, #1
 8007242:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	2201      	movs	r2, #1
 800724a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	2201      	movs	r2, #1
 8007252:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007256:	2300      	movs	r3, #0
}
 8007258:	4618      	mov	r0, r3
 800725a:	3708      	adds	r7, #8
 800725c:	46bd      	mov	sp, r7
 800725e:	bd80      	pop	{r7, pc}

08007260 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007260:	b480      	push	{r7}
 8007262:	b085      	sub	sp, #20
 8007264:	af00      	add	r7, sp, #0
 8007266:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800726e:	b2db      	uxtb	r3, r3
 8007270:	2b01      	cmp	r3, #1
 8007272:	d001      	beq.n	8007278 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007274:	2301      	movs	r3, #1
 8007276:	e04f      	b.n	8007318 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	2202      	movs	r2, #2
 800727c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	68da      	ldr	r2, [r3, #12]
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	f042 0201 	orr.w	r2, r2, #1
 800728e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	4a23      	ldr	r2, [pc, #140]	; (8007324 <HAL_TIM_Base_Start_IT+0xc4>)
 8007296:	4293      	cmp	r3, r2
 8007298:	d01d      	beq.n	80072d6 <HAL_TIM_Base_Start_IT+0x76>
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80072a2:	d018      	beq.n	80072d6 <HAL_TIM_Base_Start_IT+0x76>
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	4a1f      	ldr	r2, [pc, #124]	; (8007328 <HAL_TIM_Base_Start_IT+0xc8>)
 80072aa:	4293      	cmp	r3, r2
 80072ac:	d013      	beq.n	80072d6 <HAL_TIM_Base_Start_IT+0x76>
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	4a1e      	ldr	r2, [pc, #120]	; (800732c <HAL_TIM_Base_Start_IT+0xcc>)
 80072b4:	4293      	cmp	r3, r2
 80072b6:	d00e      	beq.n	80072d6 <HAL_TIM_Base_Start_IT+0x76>
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	4a1c      	ldr	r2, [pc, #112]	; (8007330 <HAL_TIM_Base_Start_IT+0xd0>)
 80072be:	4293      	cmp	r3, r2
 80072c0:	d009      	beq.n	80072d6 <HAL_TIM_Base_Start_IT+0x76>
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	4a1b      	ldr	r2, [pc, #108]	; (8007334 <HAL_TIM_Base_Start_IT+0xd4>)
 80072c8:	4293      	cmp	r3, r2
 80072ca:	d004      	beq.n	80072d6 <HAL_TIM_Base_Start_IT+0x76>
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	4a19      	ldr	r2, [pc, #100]	; (8007338 <HAL_TIM_Base_Start_IT+0xd8>)
 80072d2:	4293      	cmp	r3, r2
 80072d4:	d115      	bne.n	8007302 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	689a      	ldr	r2, [r3, #8]
 80072dc:	4b17      	ldr	r3, [pc, #92]	; (800733c <HAL_TIM_Base_Start_IT+0xdc>)
 80072de:	4013      	ands	r3, r2
 80072e0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	2b06      	cmp	r3, #6
 80072e6:	d015      	beq.n	8007314 <HAL_TIM_Base_Start_IT+0xb4>
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80072ee:	d011      	beq.n	8007314 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	681a      	ldr	r2, [r3, #0]
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	f042 0201 	orr.w	r2, r2, #1
 80072fe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007300:	e008      	b.n	8007314 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	681a      	ldr	r2, [r3, #0]
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	f042 0201 	orr.w	r2, r2, #1
 8007310:	601a      	str	r2, [r3, #0]
 8007312:	e000      	b.n	8007316 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007314:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007316:	2300      	movs	r3, #0
}
 8007318:	4618      	mov	r0, r3
 800731a:	3714      	adds	r7, #20
 800731c:	46bd      	mov	sp, r7
 800731e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007322:	4770      	bx	lr
 8007324:	40012c00 	.word	0x40012c00
 8007328:	40000400 	.word	0x40000400
 800732c:	40000800 	.word	0x40000800
 8007330:	40000c00 	.word	0x40000c00
 8007334:	40013400 	.word	0x40013400
 8007338:	40014000 	.word	0x40014000
 800733c:	00010007 	.word	0x00010007

08007340 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007340:	b580      	push	{r7, lr}
 8007342:	b082      	sub	sp, #8
 8007344:	af00      	add	r7, sp, #0
 8007346:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	691b      	ldr	r3, [r3, #16]
 800734e:	f003 0302 	and.w	r3, r3, #2
 8007352:	2b02      	cmp	r3, #2
 8007354:	d122      	bne.n	800739c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	68db      	ldr	r3, [r3, #12]
 800735c:	f003 0302 	and.w	r3, r3, #2
 8007360:	2b02      	cmp	r3, #2
 8007362:	d11b      	bne.n	800739c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	f06f 0202 	mvn.w	r2, #2
 800736c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	2201      	movs	r2, #1
 8007372:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	699b      	ldr	r3, [r3, #24]
 800737a:	f003 0303 	and.w	r3, r3, #3
 800737e:	2b00      	cmp	r3, #0
 8007380:	d003      	beq.n	800738a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007382:	6878      	ldr	r0, [r7, #4]
 8007384:	f000 f905 	bl	8007592 <HAL_TIM_IC_CaptureCallback>
 8007388:	e005      	b.n	8007396 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800738a:	6878      	ldr	r0, [r7, #4]
 800738c:	f000 f8f7 	bl	800757e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007390:	6878      	ldr	r0, [r7, #4]
 8007392:	f000 f908 	bl	80075a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	2200      	movs	r2, #0
 800739a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	691b      	ldr	r3, [r3, #16]
 80073a2:	f003 0304 	and.w	r3, r3, #4
 80073a6:	2b04      	cmp	r3, #4
 80073a8:	d122      	bne.n	80073f0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	68db      	ldr	r3, [r3, #12]
 80073b0:	f003 0304 	and.w	r3, r3, #4
 80073b4:	2b04      	cmp	r3, #4
 80073b6:	d11b      	bne.n	80073f0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	f06f 0204 	mvn.w	r2, #4
 80073c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	2202      	movs	r2, #2
 80073c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	699b      	ldr	r3, [r3, #24]
 80073ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d003      	beq.n	80073de <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80073d6:	6878      	ldr	r0, [r7, #4]
 80073d8:	f000 f8db 	bl	8007592 <HAL_TIM_IC_CaptureCallback>
 80073dc:	e005      	b.n	80073ea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80073de:	6878      	ldr	r0, [r7, #4]
 80073e0:	f000 f8cd 	bl	800757e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80073e4:	6878      	ldr	r0, [r7, #4]
 80073e6:	f000 f8de 	bl	80075a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	2200      	movs	r2, #0
 80073ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	691b      	ldr	r3, [r3, #16]
 80073f6:	f003 0308 	and.w	r3, r3, #8
 80073fa:	2b08      	cmp	r3, #8
 80073fc:	d122      	bne.n	8007444 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	68db      	ldr	r3, [r3, #12]
 8007404:	f003 0308 	and.w	r3, r3, #8
 8007408:	2b08      	cmp	r3, #8
 800740a:	d11b      	bne.n	8007444 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	f06f 0208 	mvn.w	r2, #8
 8007414:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	2204      	movs	r2, #4
 800741a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	69db      	ldr	r3, [r3, #28]
 8007422:	f003 0303 	and.w	r3, r3, #3
 8007426:	2b00      	cmp	r3, #0
 8007428:	d003      	beq.n	8007432 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800742a:	6878      	ldr	r0, [r7, #4]
 800742c:	f000 f8b1 	bl	8007592 <HAL_TIM_IC_CaptureCallback>
 8007430:	e005      	b.n	800743e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007432:	6878      	ldr	r0, [r7, #4]
 8007434:	f000 f8a3 	bl	800757e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007438:	6878      	ldr	r0, [r7, #4]
 800743a:	f000 f8b4 	bl	80075a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	2200      	movs	r2, #0
 8007442:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	691b      	ldr	r3, [r3, #16]
 800744a:	f003 0310 	and.w	r3, r3, #16
 800744e:	2b10      	cmp	r3, #16
 8007450:	d122      	bne.n	8007498 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	68db      	ldr	r3, [r3, #12]
 8007458:	f003 0310 	and.w	r3, r3, #16
 800745c:	2b10      	cmp	r3, #16
 800745e:	d11b      	bne.n	8007498 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	f06f 0210 	mvn.w	r2, #16
 8007468:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	2208      	movs	r2, #8
 800746e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	69db      	ldr	r3, [r3, #28]
 8007476:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800747a:	2b00      	cmp	r3, #0
 800747c:	d003      	beq.n	8007486 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800747e:	6878      	ldr	r0, [r7, #4]
 8007480:	f000 f887 	bl	8007592 <HAL_TIM_IC_CaptureCallback>
 8007484:	e005      	b.n	8007492 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007486:	6878      	ldr	r0, [r7, #4]
 8007488:	f000 f879 	bl	800757e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800748c:	6878      	ldr	r0, [r7, #4]
 800748e:	f000 f88a 	bl	80075a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	2200      	movs	r2, #0
 8007496:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	691b      	ldr	r3, [r3, #16]
 800749e:	f003 0301 	and.w	r3, r3, #1
 80074a2:	2b01      	cmp	r3, #1
 80074a4:	d10e      	bne.n	80074c4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	68db      	ldr	r3, [r3, #12]
 80074ac:	f003 0301 	and.w	r3, r3, #1
 80074b0:	2b01      	cmp	r3, #1
 80074b2:	d107      	bne.n	80074c4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	f06f 0201 	mvn.w	r2, #1
 80074bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80074be:	6878      	ldr	r0, [r7, #4]
 80074c0:	f7fa f9f8 	bl	80018b4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	691b      	ldr	r3, [r3, #16]
 80074ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074ce:	2b80      	cmp	r3, #128	; 0x80
 80074d0:	d10e      	bne.n	80074f0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	68db      	ldr	r3, [r3, #12]
 80074d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074dc:	2b80      	cmp	r3, #128	; 0x80
 80074de:	d107      	bne.n	80074f0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80074e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80074ea:	6878      	ldr	r0, [r7, #4]
 80074ec:	f000 f99c 	bl	8007828 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	691b      	ldr	r3, [r3, #16]
 80074f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80074fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80074fe:	d10e      	bne.n	800751e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	68db      	ldr	r3, [r3, #12]
 8007506:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800750a:	2b80      	cmp	r3, #128	; 0x80
 800750c:	d107      	bne.n	800751e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007516:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007518:	6878      	ldr	r0, [r7, #4]
 800751a:	f000 f98f 	bl	800783c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	691b      	ldr	r3, [r3, #16]
 8007524:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007528:	2b40      	cmp	r3, #64	; 0x40
 800752a:	d10e      	bne.n	800754a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	68db      	ldr	r3, [r3, #12]
 8007532:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007536:	2b40      	cmp	r3, #64	; 0x40
 8007538:	d107      	bne.n	800754a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007542:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007544:	6878      	ldr	r0, [r7, #4]
 8007546:	f000 f838 	bl	80075ba <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	691b      	ldr	r3, [r3, #16]
 8007550:	f003 0320 	and.w	r3, r3, #32
 8007554:	2b20      	cmp	r3, #32
 8007556:	d10e      	bne.n	8007576 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	68db      	ldr	r3, [r3, #12]
 800755e:	f003 0320 	and.w	r3, r3, #32
 8007562:	2b20      	cmp	r3, #32
 8007564:	d107      	bne.n	8007576 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	f06f 0220 	mvn.w	r2, #32
 800756e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007570:	6878      	ldr	r0, [r7, #4]
 8007572:	f000 f94f 	bl	8007814 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007576:	bf00      	nop
 8007578:	3708      	adds	r7, #8
 800757a:	46bd      	mov	sp, r7
 800757c:	bd80      	pop	{r7, pc}

0800757e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800757e:	b480      	push	{r7}
 8007580:	b083      	sub	sp, #12
 8007582:	af00      	add	r7, sp, #0
 8007584:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007586:	bf00      	nop
 8007588:	370c      	adds	r7, #12
 800758a:	46bd      	mov	sp, r7
 800758c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007590:	4770      	bx	lr

08007592 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007592:	b480      	push	{r7}
 8007594:	b083      	sub	sp, #12
 8007596:	af00      	add	r7, sp, #0
 8007598:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800759a:	bf00      	nop
 800759c:	370c      	adds	r7, #12
 800759e:	46bd      	mov	sp, r7
 80075a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a4:	4770      	bx	lr

080075a6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80075a6:	b480      	push	{r7}
 80075a8:	b083      	sub	sp, #12
 80075aa:	af00      	add	r7, sp, #0
 80075ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80075ae:	bf00      	nop
 80075b0:	370c      	adds	r7, #12
 80075b2:	46bd      	mov	sp, r7
 80075b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b8:	4770      	bx	lr

080075ba <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80075ba:	b480      	push	{r7}
 80075bc:	b083      	sub	sp, #12
 80075be:	af00      	add	r7, sp, #0
 80075c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80075c2:	bf00      	nop
 80075c4:	370c      	adds	r7, #12
 80075c6:	46bd      	mov	sp, r7
 80075c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075cc:	4770      	bx	lr
	...

080075d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80075d0:	b480      	push	{r7}
 80075d2:	b085      	sub	sp, #20
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	6078      	str	r0, [r7, #4]
 80075d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	4a40      	ldr	r2, [pc, #256]	; (80076e4 <TIM_Base_SetConfig+0x114>)
 80075e4:	4293      	cmp	r3, r2
 80075e6:	d013      	beq.n	8007610 <TIM_Base_SetConfig+0x40>
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80075ee:	d00f      	beq.n	8007610 <TIM_Base_SetConfig+0x40>
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	4a3d      	ldr	r2, [pc, #244]	; (80076e8 <TIM_Base_SetConfig+0x118>)
 80075f4:	4293      	cmp	r3, r2
 80075f6:	d00b      	beq.n	8007610 <TIM_Base_SetConfig+0x40>
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	4a3c      	ldr	r2, [pc, #240]	; (80076ec <TIM_Base_SetConfig+0x11c>)
 80075fc:	4293      	cmp	r3, r2
 80075fe:	d007      	beq.n	8007610 <TIM_Base_SetConfig+0x40>
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	4a3b      	ldr	r2, [pc, #236]	; (80076f0 <TIM_Base_SetConfig+0x120>)
 8007604:	4293      	cmp	r3, r2
 8007606:	d003      	beq.n	8007610 <TIM_Base_SetConfig+0x40>
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	4a3a      	ldr	r2, [pc, #232]	; (80076f4 <TIM_Base_SetConfig+0x124>)
 800760c:	4293      	cmp	r3, r2
 800760e:	d108      	bne.n	8007622 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007616:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007618:	683b      	ldr	r3, [r7, #0]
 800761a:	685b      	ldr	r3, [r3, #4]
 800761c:	68fa      	ldr	r2, [r7, #12]
 800761e:	4313      	orrs	r3, r2
 8007620:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	4a2f      	ldr	r2, [pc, #188]	; (80076e4 <TIM_Base_SetConfig+0x114>)
 8007626:	4293      	cmp	r3, r2
 8007628:	d01f      	beq.n	800766a <TIM_Base_SetConfig+0x9a>
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007630:	d01b      	beq.n	800766a <TIM_Base_SetConfig+0x9a>
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	4a2c      	ldr	r2, [pc, #176]	; (80076e8 <TIM_Base_SetConfig+0x118>)
 8007636:	4293      	cmp	r3, r2
 8007638:	d017      	beq.n	800766a <TIM_Base_SetConfig+0x9a>
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	4a2b      	ldr	r2, [pc, #172]	; (80076ec <TIM_Base_SetConfig+0x11c>)
 800763e:	4293      	cmp	r3, r2
 8007640:	d013      	beq.n	800766a <TIM_Base_SetConfig+0x9a>
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	4a2a      	ldr	r2, [pc, #168]	; (80076f0 <TIM_Base_SetConfig+0x120>)
 8007646:	4293      	cmp	r3, r2
 8007648:	d00f      	beq.n	800766a <TIM_Base_SetConfig+0x9a>
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	4a29      	ldr	r2, [pc, #164]	; (80076f4 <TIM_Base_SetConfig+0x124>)
 800764e:	4293      	cmp	r3, r2
 8007650:	d00b      	beq.n	800766a <TIM_Base_SetConfig+0x9a>
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	4a28      	ldr	r2, [pc, #160]	; (80076f8 <TIM_Base_SetConfig+0x128>)
 8007656:	4293      	cmp	r3, r2
 8007658:	d007      	beq.n	800766a <TIM_Base_SetConfig+0x9a>
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	4a27      	ldr	r2, [pc, #156]	; (80076fc <TIM_Base_SetConfig+0x12c>)
 800765e:	4293      	cmp	r3, r2
 8007660:	d003      	beq.n	800766a <TIM_Base_SetConfig+0x9a>
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	4a26      	ldr	r2, [pc, #152]	; (8007700 <TIM_Base_SetConfig+0x130>)
 8007666:	4293      	cmp	r3, r2
 8007668:	d108      	bne.n	800767c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007670:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007672:	683b      	ldr	r3, [r7, #0]
 8007674:	68db      	ldr	r3, [r3, #12]
 8007676:	68fa      	ldr	r2, [r7, #12]
 8007678:	4313      	orrs	r3, r2
 800767a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007682:	683b      	ldr	r3, [r7, #0]
 8007684:	695b      	ldr	r3, [r3, #20]
 8007686:	4313      	orrs	r3, r2
 8007688:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	68fa      	ldr	r2, [r7, #12]
 800768e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007690:	683b      	ldr	r3, [r7, #0]
 8007692:	689a      	ldr	r2, [r3, #8]
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007698:	683b      	ldr	r3, [r7, #0]
 800769a:	681a      	ldr	r2, [r3, #0]
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	4a10      	ldr	r2, [pc, #64]	; (80076e4 <TIM_Base_SetConfig+0x114>)
 80076a4:	4293      	cmp	r3, r2
 80076a6:	d00f      	beq.n	80076c8 <TIM_Base_SetConfig+0xf8>
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	4a12      	ldr	r2, [pc, #72]	; (80076f4 <TIM_Base_SetConfig+0x124>)
 80076ac:	4293      	cmp	r3, r2
 80076ae:	d00b      	beq.n	80076c8 <TIM_Base_SetConfig+0xf8>
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	4a11      	ldr	r2, [pc, #68]	; (80076f8 <TIM_Base_SetConfig+0x128>)
 80076b4:	4293      	cmp	r3, r2
 80076b6:	d007      	beq.n	80076c8 <TIM_Base_SetConfig+0xf8>
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	4a10      	ldr	r2, [pc, #64]	; (80076fc <TIM_Base_SetConfig+0x12c>)
 80076bc:	4293      	cmp	r3, r2
 80076be:	d003      	beq.n	80076c8 <TIM_Base_SetConfig+0xf8>
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	4a0f      	ldr	r2, [pc, #60]	; (8007700 <TIM_Base_SetConfig+0x130>)
 80076c4:	4293      	cmp	r3, r2
 80076c6:	d103      	bne.n	80076d0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80076c8:	683b      	ldr	r3, [r7, #0]
 80076ca:	691a      	ldr	r2, [r3, #16]
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	2201      	movs	r2, #1
 80076d4:	615a      	str	r2, [r3, #20]
}
 80076d6:	bf00      	nop
 80076d8:	3714      	adds	r7, #20
 80076da:	46bd      	mov	sp, r7
 80076dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e0:	4770      	bx	lr
 80076e2:	bf00      	nop
 80076e4:	40012c00 	.word	0x40012c00
 80076e8:	40000400 	.word	0x40000400
 80076ec:	40000800 	.word	0x40000800
 80076f0:	40000c00 	.word	0x40000c00
 80076f4:	40013400 	.word	0x40013400
 80076f8:	40014000 	.word	0x40014000
 80076fc:	40014400 	.word	0x40014400
 8007700:	40014800 	.word	0x40014800

08007704 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007704:	b480      	push	{r7}
 8007706:	b085      	sub	sp, #20
 8007708:	af00      	add	r7, sp, #0
 800770a:	6078      	str	r0, [r7, #4]
 800770c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007714:	2b01      	cmp	r3, #1
 8007716:	d101      	bne.n	800771c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007718:	2302      	movs	r3, #2
 800771a:	e068      	b.n	80077ee <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	2201      	movs	r2, #1
 8007720:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	2202      	movs	r2, #2
 8007728:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	685b      	ldr	r3, [r3, #4]
 8007732:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	689b      	ldr	r3, [r3, #8]
 800773a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	4a2e      	ldr	r2, [pc, #184]	; (80077fc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8007742:	4293      	cmp	r3, r2
 8007744:	d004      	beq.n	8007750 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	4a2d      	ldr	r2, [pc, #180]	; (8007800 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800774c:	4293      	cmp	r3, r2
 800774e:	d108      	bne.n	8007762 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007756:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007758:	683b      	ldr	r3, [r7, #0]
 800775a:	685b      	ldr	r3, [r3, #4]
 800775c:	68fa      	ldr	r2, [r7, #12]
 800775e:	4313      	orrs	r3, r2
 8007760:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007768:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800776a:	683b      	ldr	r3, [r7, #0]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	68fa      	ldr	r2, [r7, #12]
 8007770:	4313      	orrs	r3, r2
 8007772:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	68fa      	ldr	r2, [r7, #12]
 800777a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	4a1e      	ldr	r2, [pc, #120]	; (80077fc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8007782:	4293      	cmp	r3, r2
 8007784:	d01d      	beq.n	80077c2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800778e:	d018      	beq.n	80077c2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	4a1b      	ldr	r2, [pc, #108]	; (8007804 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007796:	4293      	cmp	r3, r2
 8007798:	d013      	beq.n	80077c2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	4a1a      	ldr	r2, [pc, #104]	; (8007808 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80077a0:	4293      	cmp	r3, r2
 80077a2:	d00e      	beq.n	80077c2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	4a18      	ldr	r2, [pc, #96]	; (800780c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80077aa:	4293      	cmp	r3, r2
 80077ac:	d009      	beq.n	80077c2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	4a13      	ldr	r2, [pc, #76]	; (8007800 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80077b4:	4293      	cmp	r3, r2
 80077b6:	d004      	beq.n	80077c2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	4a14      	ldr	r2, [pc, #80]	; (8007810 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80077be:	4293      	cmp	r3, r2
 80077c0:	d10c      	bne.n	80077dc <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80077c2:	68bb      	ldr	r3, [r7, #8]
 80077c4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80077c8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80077ca:	683b      	ldr	r3, [r7, #0]
 80077cc:	689b      	ldr	r3, [r3, #8]
 80077ce:	68ba      	ldr	r2, [r7, #8]
 80077d0:	4313      	orrs	r3, r2
 80077d2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	68ba      	ldr	r2, [r7, #8]
 80077da:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	2201      	movs	r2, #1
 80077e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	2200      	movs	r2, #0
 80077e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80077ec:	2300      	movs	r3, #0
}
 80077ee:	4618      	mov	r0, r3
 80077f0:	3714      	adds	r7, #20
 80077f2:	46bd      	mov	sp, r7
 80077f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f8:	4770      	bx	lr
 80077fa:	bf00      	nop
 80077fc:	40012c00 	.word	0x40012c00
 8007800:	40013400 	.word	0x40013400
 8007804:	40000400 	.word	0x40000400
 8007808:	40000800 	.word	0x40000800
 800780c:	40000c00 	.word	0x40000c00
 8007810:	40014000 	.word	0x40014000

08007814 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007814:	b480      	push	{r7}
 8007816:	b083      	sub	sp, #12
 8007818:	af00      	add	r7, sp, #0
 800781a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800781c:	bf00      	nop
 800781e:	370c      	adds	r7, #12
 8007820:	46bd      	mov	sp, r7
 8007822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007826:	4770      	bx	lr

08007828 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007828:	b480      	push	{r7}
 800782a:	b083      	sub	sp, #12
 800782c:	af00      	add	r7, sp, #0
 800782e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007830:	bf00      	nop
 8007832:	370c      	adds	r7, #12
 8007834:	46bd      	mov	sp, r7
 8007836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800783a:	4770      	bx	lr

0800783c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800783c:	b480      	push	{r7}
 800783e:	b083      	sub	sp, #12
 8007840:	af00      	add	r7, sp, #0
 8007842:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007844:	bf00      	nop
 8007846:	370c      	adds	r7, #12
 8007848:	46bd      	mov	sp, r7
 800784a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800784e:	4770      	bx	lr

08007850 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007850:	b580      	push	{r7, lr}
 8007852:	b082      	sub	sp, #8
 8007854:	af00      	add	r7, sp, #0
 8007856:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	2b00      	cmp	r3, #0
 800785c:	d101      	bne.n	8007862 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800785e:	2301      	movs	r3, #1
 8007860:	e040      	b.n	80078e4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007866:	2b00      	cmp	r3, #0
 8007868:	d106      	bne.n	8007878 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	2200      	movs	r2, #0
 800786e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007872:	6878      	ldr	r0, [r7, #4]
 8007874:	f7fa fa4e 	bl	8001d14 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	2224      	movs	r2, #36	; 0x24
 800787c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	681a      	ldr	r2, [r3, #0]
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	f022 0201 	bic.w	r2, r2, #1
 800788c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800788e:	6878      	ldr	r0, [r7, #4]
 8007890:	f000 fb26 	bl	8007ee0 <UART_SetConfig>
 8007894:	4603      	mov	r3, r0
 8007896:	2b01      	cmp	r3, #1
 8007898:	d101      	bne.n	800789e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800789a:	2301      	movs	r3, #1
 800789c:	e022      	b.n	80078e4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d002      	beq.n	80078ac <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80078a6:	6878      	ldr	r0, [r7, #4]
 80078a8:	f000 fdd4 	bl	8008454 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	685a      	ldr	r2, [r3, #4]
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80078ba:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	689a      	ldr	r2, [r3, #8]
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80078ca:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	681a      	ldr	r2, [r3, #0]
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	f042 0201 	orr.w	r2, r2, #1
 80078da:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80078dc:	6878      	ldr	r0, [r7, #4]
 80078de:	f000 fe5b 	bl	8008598 <UART_CheckIdleState>
 80078e2:	4603      	mov	r3, r0
}
 80078e4:	4618      	mov	r0, r3
 80078e6:	3708      	adds	r7, #8
 80078e8:	46bd      	mov	sp, r7
 80078ea:	bd80      	pop	{r7, pc}

080078ec <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80078ec:	b580      	push	{r7, lr}
 80078ee:	b08a      	sub	sp, #40	; 0x28
 80078f0:	af02      	add	r7, sp, #8
 80078f2:	60f8      	str	r0, [r7, #12]
 80078f4:	60b9      	str	r1, [r7, #8]
 80078f6:	603b      	str	r3, [r7, #0]
 80078f8:	4613      	mov	r3, r2
 80078fa:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007900:	2b20      	cmp	r3, #32
 8007902:	f040 8082 	bne.w	8007a0a <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8007906:	68bb      	ldr	r3, [r7, #8]
 8007908:	2b00      	cmp	r3, #0
 800790a:	d002      	beq.n	8007912 <HAL_UART_Transmit+0x26>
 800790c:	88fb      	ldrh	r3, [r7, #6]
 800790e:	2b00      	cmp	r3, #0
 8007910:	d101      	bne.n	8007916 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8007912:	2301      	movs	r3, #1
 8007914:	e07a      	b.n	8007a0c <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800791c:	2b01      	cmp	r3, #1
 800791e:	d101      	bne.n	8007924 <HAL_UART_Transmit+0x38>
 8007920:	2302      	movs	r3, #2
 8007922:	e073      	b.n	8007a0c <HAL_UART_Transmit+0x120>
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	2201      	movs	r2, #1
 8007928:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	2200      	movs	r2, #0
 8007930:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	2221      	movs	r2, #33	; 0x21
 8007938:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800793a:	f7fa fd29 	bl	8002390 <HAL_GetTick>
 800793e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	88fa      	ldrh	r2, [r7, #6]
 8007944:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	88fa      	ldrh	r2, [r7, #6]
 800794c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	689b      	ldr	r3, [r3, #8]
 8007954:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007958:	d108      	bne.n	800796c <HAL_UART_Transmit+0x80>
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	691b      	ldr	r3, [r3, #16]
 800795e:	2b00      	cmp	r3, #0
 8007960:	d104      	bne.n	800796c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8007962:	2300      	movs	r3, #0
 8007964:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007966:	68bb      	ldr	r3, [r7, #8]
 8007968:	61bb      	str	r3, [r7, #24]
 800796a:	e003      	b.n	8007974 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800796c:	68bb      	ldr	r3, [r7, #8]
 800796e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007970:	2300      	movs	r3, #0
 8007972:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	2200      	movs	r2, #0
 8007978:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800797c:	e02d      	b.n	80079da <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800797e:	683b      	ldr	r3, [r7, #0]
 8007980:	9300      	str	r3, [sp, #0]
 8007982:	697b      	ldr	r3, [r7, #20]
 8007984:	2200      	movs	r2, #0
 8007986:	2180      	movs	r1, #128	; 0x80
 8007988:	68f8      	ldr	r0, [r7, #12]
 800798a:	f000 fe4e 	bl	800862a <UART_WaitOnFlagUntilTimeout>
 800798e:	4603      	mov	r3, r0
 8007990:	2b00      	cmp	r3, #0
 8007992:	d001      	beq.n	8007998 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8007994:	2303      	movs	r3, #3
 8007996:	e039      	b.n	8007a0c <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8007998:	69fb      	ldr	r3, [r7, #28]
 800799a:	2b00      	cmp	r3, #0
 800799c:	d10b      	bne.n	80079b6 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800799e:	69bb      	ldr	r3, [r7, #24]
 80079a0:	881a      	ldrh	r2, [r3, #0]
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80079aa:	b292      	uxth	r2, r2
 80079ac:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80079ae:	69bb      	ldr	r3, [r7, #24]
 80079b0:	3302      	adds	r3, #2
 80079b2:	61bb      	str	r3, [r7, #24]
 80079b4:	e008      	b.n	80079c8 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80079b6:	69fb      	ldr	r3, [r7, #28]
 80079b8:	781a      	ldrb	r2, [r3, #0]
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	b292      	uxth	r2, r2
 80079c0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80079c2:	69fb      	ldr	r3, [r7, #28]
 80079c4:	3301      	adds	r3, #1
 80079c6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80079ce:	b29b      	uxth	r3, r3
 80079d0:	3b01      	subs	r3, #1
 80079d2:	b29a      	uxth	r2, r3
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80079e0:	b29b      	uxth	r3, r3
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d1cb      	bne.n	800797e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80079e6:	683b      	ldr	r3, [r7, #0]
 80079e8:	9300      	str	r3, [sp, #0]
 80079ea:	697b      	ldr	r3, [r7, #20]
 80079ec:	2200      	movs	r2, #0
 80079ee:	2140      	movs	r1, #64	; 0x40
 80079f0:	68f8      	ldr	r0, [r7, #12]
 80079f2:	f000 fe1a 	bl	800862a <UART_WaitOnFlagUntilTimeout>
 80079f6:	4603      	mov	r3, r0
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d001      	beq.n	8007a00 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80079fc:	2303      	movs	r3, #3
 80079fe:	e005      	b.n	8007a0c <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	2220      	movs	r2, #32
 8007a04:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8007a06:	2300      	movs	r3, #0
 8007a08:	e000      	b.n	8007a0c <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8007a0a:	2302      	movs	r3, #2
  }
}
 8007a0c:	4618      	mov	r0, r3
 8007a0e:	3720      	adds	r7, #32
 8007a10:	46bd      	mov	sp, r7
 8007a12:	bd80      	pop	{r7, pc}

08007a14 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007a14:	b580      	push	{r7, lr}
 8007a16:	b084      	sub	sp, #16
 8007a18:	af00      	add	r7, sp, #0
 8007a1a:	60f8      	str	r0, [r7, #12]
 8007a1c:	60b9      	str	r1, [r7, #8]
 8007a1e:	4613      	mov	r3, r2
 8007a20:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007a26:	2b20      	cmp	r3, #32
 8007a28:	d131      	bne.n	8007a8e <HAL_UART_Receive_IT+0x7a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007a2a:	68bb      	ldr	r3, [r7, #8]
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d002      	beq.n	8007a36 <HAL_UART_Receive_IT+0x22>
 8007a30:	88fb      	ldrh	r3, [r7, #6]
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d101      	bne.n	8007a3a <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8007a36:	2301      	movs	r3, #1
 8007a38:	e02a      	b.n	8007a90 <HAL_UART_Receive_IT+0x7c>
    }

    __HAL_LOCK(huart);
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8007a40:	2b01      	cmp	r3, #1
 8007a42:	d101      	bne.n	8007a48 <HAL_UART_Receive_IT+0x34>
 8007a44:	2302      	movs	r3, #2
 8007a46:	e023      	b.n	8007a90 <HAL_UART_Receive_IT+0x7c>
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	2201      	movs	r2, #1
 8007a4c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	2200      	movs	r2, #0
 8007a54:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	4a0f      	ldr	r2, [pc, #60]	; (8007a98 <HAL_UART_Receive_IT+0x84>)
 8007a5c:	4293      	cmp	r3, r2
 8007a5e:	d00e      	beq.n	8007a7e <HAL_UART_Receive_IT+0x6a>
    {
      /* Check that USART RTOEN bit is set */
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	685b      	ldr	r3, [r3, #4]
 8007a66:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d007      	beq.n	8007a7e <HAL_UART_Receive_IT+0x6a>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	681a      	ldr	r2, [r3, #0]
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8007a7c:	601a      	str	r2, [r3, #0]
      }
    }

    return(UART_Start_Receive_IT(huart, pData, Size));
 8007a7e:	88fb      	ldrh	r3, [r7, #6]
 8007a80:	461a      	mov	r2, r3
 8007a82:	68b9      	ldr	r1, [r7, #8]
 8007a84:	68f8      	ldr	r0, [r7, #12]
 8007a86:	f000 fe4d 	bl	8008724 <UART_Start_Receive_IT>
 8007a8a:	4603      	mov	r3, r0
 8007a8c:	e000      	b.n	8007a90 <HAL_UART_Receive_IT+0x7c>
  }
  else
  {
    return HAL_BUSY;
 8007a8e:	2302      	movs	r3, #2
  }
}
 8007a90:	4618      	mov	r0, r3
 8007a92:	3710      	adds	r7, #16
 8007a94:	46bd      	mov	sp, r7
 8007a96:	bd80      	pop	{r7, pc}
 8007a98:	40008000 	.word	0x40008000

08007a9c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007a9c:	b580      	push	{r7, lr}
 8007a9e:	b088      	sub	sp, #32
 8007aa0:	af00      	add	r7, sp, #0
 8007aa2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	69db      	ldr	r3, [r3, #28]
 8007aaa:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	689b      	ldr	r3, [r3, #8]
 8007aba:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007abc:	69fa      	ldr	r2, [r7, #28]
 8007abe:	f640 030f 	movw	r3, #2063	; 0x80f
 8007ac2:	4013      	ands	r3, r2
 8007ac4:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8007ac6:	693b      	ldr	r3, [r7, #16]
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d113      	bne.n	8007af4 <HAL_UART_IRQHandler+0x58>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8007acc:	69fb      	ldr	r3, [r7, #28]
 8007ace:	f003 0320 	and.w	r3, r3, #32
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d00e      	beq.n	8007af4 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007ad6:	69bb      	ldr	r3, [r7, #24]
 8007ad8:	f003 0320 	and.w	r3, r3, #32
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d009      	beq.n	8007af4 <HAL_UART_IRQHandler+0x58>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	f000 81cf 	beq.w	8007e88 <HAL_UART_IRQHandler+0x3ec>
      {
        huart->RxISR(huart);
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007aee:	6878      	ldr	r0, [r7, #4]
 8007af0:	4798      	blx	r3
      }
      return;
 8007af2:	e1c9      	b.n	8007e88 <HAL_UART_IRQHandler+0x3ec>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8007af4:	693b      	ldr	r3, [r7, #16]
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	f000 80e8 	beq.w	8007ccc <HAL_UART_IRQHandler+0x230>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8007afc:	697b      	ldr	r3, [r7, #20]
 8007afe:	f003 0301 	and.w	r3, r3, #1
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d105      	bne.n	8007b12 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8007b06:	69ba      	ldr	r2, [r7, #24]
 8007b08:	4b6e      	ldr	r3, [pc, #440]	; (8007cc4 <HAL_UART_IRQHandler+0x228>)
 8007b0a:	4013      	ands	r3, r2
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	f000 80dd 	beq.w	8007ccc <HAL_UART_IRQHandler+0x230>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007b12:	69fb      	ldr	r3, [r7, #28]
 8007b14:	f003 0301 	and.w	r3, r3, #1
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d010      	beq.n	8007b3e <HAL_UART_IRQHandler+0xa2>
 8007b1c:	69bb      	ldr	r3, [r7, #24]
 8007b1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d00b      	beq.n	8007b3e <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	2201      	movs	r2, #1
 8007b2c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007b34:	f043 0201 	orr.w	r2, r3, #1
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007b3e:	69fb      	ldr	r3, [r7, #28]
 8007b40:	f003 0302 	and.w	r3, r3, #2
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d010      	beq.n	8007b6a <HAL_UART_IRQHandler+0xce>
 8007b48:	697b      	ldr	r3, [r7, #20]
 8007b4a:	f003 0301 	and.w	r3, r3, #1
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d00b      	beq.n	8007b6a <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	2202      	movs	r2, #2
 8007b58:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007b60:	f043 0204 	orr.w	r2, r3, #4
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007b6a:	69fb      	ldr	r3, [r7, #28]
 8007b6c:	f003 0304 	and.w	r3, r3, #4
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d010      	beq.n	8007b96 <HAL_UART_IRQHandler+0xfa>
 8007b74:	697b      	ldr	r3, [r7, #20]
 8007b76:	f003 0301 	and.w	r3, r3, #1
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d00b      	beq.n	8007b96 <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	2204      	movs	r2, #4
 8007b84:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007b8c:	f043 0202 	orr.w	r2, r3, #2
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007b96:	69fb      	ldr	r3, [r7, #28]
 8007b98:	f003 0308 	and.w	r3, r3, #8
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d015      	beq.n	8007bcc <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007ba0:	69bb      	ldr	r3, [r7, #24]
 8007ba2:	f003 0320 	and.w	r3, r3, #32
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d104      	bne.n	8007bb4 <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8007baa:	697b      	ldr	r3, [r7, #20]
 8007bac:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d00b      	beq.n	8007bcc <HAL_UART_IRQHandler+0x130>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	2208      	movs	r2, #8
 8007bba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007bc2:	f043 0208 	orr.w	r2, r3, #8
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007bcc:	69fb      	ldr	r3, [r7, #28]
 8007bce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d011      	beq.n	8007bfa <HAL_UART_IRQHandler+0x15e>
 8007bd6:	69bb      	ldr	r3, [r7, #24]
 8007bd8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d00c      	beq.n	8007bfa <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007be8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007bf0:	f043 0220 	orr.w	r2, r3, #32
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	f000 8143 	beq.w	8007e8c <HAL_UART_IRQHandler+0x3f0>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8007c06:	69fb      	ldr	r3, [r7, #28]
 8007c08:	f003 0320 	and.w	r3, r3, #32
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d00c      	beq.n	8007c2a <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007c10:	69bb      	ldr	r3, [r7, #24]
 8007c12:	f003 0320 	and.w	r3, r3, #32
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d007      	beq.n	8007c2a <HAL_UART_IRQHandler+0x18e>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d003      	beq.n	8007c2a <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007c26:	6878      	ldr	r0, [r7, #4]
 8007c28:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007c30:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	689b      	ldr	r3, [r3, #8]
 8007c38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c3c:	2b40      	cmp	r3, #64	; 0x40
 8007c3e:	d004      	beq.n	8007c4a <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d031      	beq.n	8007cae <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007c4a:	6878      	ldr	r0, [r7, #4]
 8007c4c:	f000 fdf2 	bl	8008834 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	689b      	ldr	r3, [r3, #8]
 8007c56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c5a:	2b40      	cmp	r3, #64	; 0x40
 8007c5c:	d123      	bne.n	8007ca6 <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	689a      	ldr	r2, [r3, #8]
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007c6c:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d013      	beq.n	8007c9e <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c7a:	4a13      	ldr	r2, [pc, #76]	; (8007cc8 <HAL_UART_IRQHandler+0x22c>)
 8007c7c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c82:	4618      	mov	r0, r3
 8007c84:	f7fa fe12 	bl	80028ac <HAL_DMA_Abort_IT>
 8007c88:	4603      	mov	r3, r0
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d017      	beq.n	8007cbe <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c94:	687a      	ldr	r2, [r7, #4]
 8007c96:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8007c98:	4610      	mov	r0, r2
 8007c9a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c9c:	e00f      	b.n	8007cbe <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007c9e:	6878      	ldr	r0, [r7, #4]
 8007ca0:	f000 f908 	bl	8007eb4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ca4:	e00b      	b.n	8007cbe <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007ca6:	6878      	ldr	r0, [r7, #4]
 8007ca8:	f000 f904 	bl	8007eb4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007cac:	e007      	b.n	8007cbe <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007cae:	6878      	ldr	r0, [r7, #4]
 8007cb0:	f000 f900 	bl	8007eb4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	2200      	movs	r2, #0
 8007cb8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8007cbc:	e0e6      	b.n	8007e8c <HAL_UART_IRQHandler+0x3f0>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007cbe:	bf00      	nop
    return;
 8007cc0:	e0e4      	b.n	8007e8c <HAL_UART_IRQHandler+0x3f0>
 8007cc2:	bf00      	nop
 8007cc4:	04000120 	.word	0x04000120
 8007cc8:	08008893 	.word	0x08008893

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007cd0:	2b01      	cmp	r3, #1
 8007cd2:	f040 80a5 	bne.w	8007e20 <HAL_UART_IRQHandler+0x384>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 8007cd6:	69fb      	ldr	r3, [r7, #28]
 8007cd8:	f003 0310 	and.w	r3, r3, #16
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	f000 809f 	beq.w	8007e20 <HAL_UART_IRQHandler+0x384>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8007ce2:	69bb      	ldr	r3, [r7, #24]
 8007ce4:	f003 0310 	and.w	r3, r3, #16
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	f000 8099 	beq.w	8007e20 <HAL_UART_IRQHandler+0x384>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	2210      	movs	r2, #16
 8007cf4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	689b      	ldr	r3, [r3, #8]
 8007cfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d00:	2b40      	cmp	r3, #64	; 0x40
 8007d02:	d154      	bne.n	8007dae <HAL_UART_IRQHandler+0x312>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	685b      	ldr	r3, [r3, #4]
 8007d0c:	813b      	strh	r3, [r7, #8]
      if (  (nb_remaining_rx_data > 0U)
 8007d0e:	893b      	ldrh	r3, [r7, #8]
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	f000 80bd 	beq.w	8007e90 <HAL_UART_IRQHandler+0x3f4>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007d1c:	893a      	ldrh	r2, [r7, #8]
 8007d1e:	429a      	cmp	r2, r3
 8007d20:	f080 80b6 	bcs.w	8007e90 <HAL_UART_IRQHandler+0x3f4>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	893a      	ldrh	r2, [r7, #8]
 8007d28:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	f003 0320 	and.w	r3, r3, #32
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d12a      	bne.n	8007d92 <HAL_UART_IRQHandler+0x2f6>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	681a      	ldr	r2, [r3, #0]
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007d4a:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	689a      	ldr	r2, [r3, #8]
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	f022 0201 	bic.w	r2, r2, #1
 8007d5a:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	689a      	ldr	r2, [r3, #8]
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007d6a:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	2220      	movs	r2, #32
 8007d70:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	2200      	movs	r2, #0
 8007d76:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	681a      	ldr	r2, [r3, #0]
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	f022 0210 	bic.w	r2, r2, #16
 8007d86:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d8c:	4618      	mov	r0, r3
 8007d8e:	f7fa fd4f 	bl	8002830 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007d9e:	b29b      	uxth	r3, r3
 8007da0:	1ad3      	subs	r3, r2, r3
 8007da2:	b29b      	uxth	r3, r3
 8007da4:	4619      	mov	r1, r3
 8007da6:	6878      	ldr	r0, [r7, #4]
 8007da8:	f000 f88e 	bl	8007ec8 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8007dac:	e070      	b.n	8007e90 <HAL_UART_IRQHandler+0x3f4>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007dba:	b29b      	uxth	r3, r3
 8007dbc:	1ad3      	subs	r3, r2, r3
 8007dbe:	817b      	strh	r3, [r7, #10]
      if (  (huart->RxXferCount > 0U)
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007dc6:	b29b      	uxth	r3, r3
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d063      	beq.n	8007e94 <HAL_UART_IRQHandler+0x3f8>
          &&(nb_rx_data > 0U) )
 8007dcc:	897b      	ldrh	r3, [r7, #10]
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d060      	beq.n	8007e94 <HAL_UART_IRQHandler+0x3f8>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	681a      	ldr	r2, [r3, #0]
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007de0:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	689a      	ldr	r2, [r3, #8]
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	f022 0201 	bic.w	r2, r2, #1
 8007df0:	609a      	str	r2, [r3, #8]
#endif

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	2220      	movs	r2, #32
 8007df6:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	2200      	movs	r2, #0
 8007dfc:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	2200      	movs	r2, #0
 8007e02:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	681a      	ldr	r2, [r3, #0]
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	f022 0210 	bic.w	r2, r2, #16
 8007e12:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007e14:	897b      	ldrh	r3, [r7, #10]
 8007e16:	4619      	mov	r1, r3
 8007e18:	6878      	ldr	r0, [r7, #4]
 8007e1a:	f000 f855 	bl	8007ec8 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8007e1e:	e039      	b.n	8007e94 <HAL_UART_IRQHandler+0x3f8>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007e20:	69fb      	ldr	r3, [r7, #28]
 8007e22:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d00d      	beq.n	8007e46 <HAL_UART_IRQHandler+0x3aa>
 8007e2a:	697b      	ldr	r3, [r7, #20]
 8007e2c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d008      	beq.n	8007e46 <HAL_UART_IRQHandler+0x3aa>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007e3c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007e3e:	6878      	ldr	r0, [r7, #4]
 8007e40:	f000 fe2e 	bl	8008aa0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007e44:	e029      	b.n	8007e9a <HAL_UART_IRQHandler+0x3fe>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8007e46:	69fb      	ldr	r3, [r7, #28]
 8007e48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d00d      	beq.n	8007e6c <HAL_UART_IRQHandler+0x3d0>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8007e50:	69bb      	ldr	r3, [r7, #24]
 8007e52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d008      	beq.n	8007e6c <HAL_UART_IRQHandler+0x3d0>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d01a      	beq.n	8007e98 <HAL_UART_IRQHandler+0x3fc>
    {
      huart->TxISR(huart);
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007e66:	6878      	ldr	r0, [r7, #4]
 8007e68:	4798      	blx	r3
    }
    return;
 8007e6a:	e015      	b.n	8007e98 <HAL_UART_IRQHandler+0x3fc>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007e6c:	69fb      	ldr	r3, [r7, #28]
 8007e6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d011      	beq.n	8007e9a <HAL_UART_IRQHandler+0x3fe>
 8007e76:	69bb      	ldr	r3, [r7, #24]
 8007e78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d00c      	beq.n	8007e9a <HAL_UART_IRQHandler+0x3fe>
  {
    UART_EndTransmit_IT(huart);
 8007e80:	6878      	ldr	r0, [r7, #4]
 8007e82:	f000 fd1c 	bl	80088be <UART_EndTransmit_IT>
    return;
 8007e86:	e008      	b.n	8007e9a <HAL_UART_IRQHandler+0x3fe>
      return;
 8007e88:	bf00      	nop
 8007e8a:	e006      	b.n	8007e9a <HAL_UART_IRQHandler+0x3fe>
    return;
 8007e8c:	bf00      	nop
 8007e8e:	e004      	b.n	8007e9a <HAL_UART_IRQHandler+0x3fe>
      return;
 8007e90:	bf00      	nop
 8007e92:	e002      	b.n	8007e9a <HAL_UART_IRQHandler+0x3fe>
      return;
 8007e94:	bf00      	nop
 8007e96:	e000      	b.n	8007e9a <HAL_UART_IRQHandler+0x3fe>
    return;
 8007e98:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8007e9a:	3720      	adds	r7, #32
 8007e9c:	46bd      	mov	sp, r7
 8007e9e:	bd80      	pop	{r7, pc}

08007ea0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007ea0:	b480      	push	{r7}
 8007ea2:	b083      	sub	sp, #12
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007ea8:	bf00      	nop
 8007eaa:	370c      	adds	r7, #12
 8007eac:	46bd      	mov	sp, r7
 8007eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb2:	4770      	bx	lr

08007eb4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007eb4:	b480      	push	{r7}
 8007eb6:	b083      	sub	sp, #12
 8007eb8:	af00      	add	r7, sp, #0
 8007eba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007ebc:	bf00      	nop
 8007ebe:	370c      	adds	r7, #12
 8007ec0:	46bd      	mov	sp, r7
 8007ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec6:	4770      	bx	lr

08007ec8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007ec8:	b480      	push	{r7}
 8007eca:	b083      	sub	sp, #12
 8007ecc:	af00      	add	r7, sp, #0
 8007ece:	6078      	str	r0, [r7, #4]
 8007ed0:	460b      	mov	r3, r1
 8007ed2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007ed4:	bf00      	nop
 8007ed6:	370c      	adds	r7, #12
 8007ed8:	46bd      	mov	sp, r7
 8007eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ede:	4770      	bx	lr

08007ee0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007ee0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007ee4:	b08a      	sub	sp, #40	; 0x28
 8007ee6:	af00      	add	r7, sp, #0
 8007ee8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007eea:	2300      	movs	r3, #0
 8007eec:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	689a      	ldr	r2, [r3, #8]
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	691b      	ldr	r3, [r3, #16]
 8007ef8:	431a      	orrs	r2, r3
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	695b      	ldr	r3, [r3, #20]
 8007efe:	431a      	orrs	r2, r3
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	69db      	ldr	r3, [r3, #28]
 8007f04:	4313      	orrs	r3, r2
 8007f06:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	681a      	ldr	r2, [r3, #0]
 8007f0e:	4ba4      	ldr	r3, [pc, #656]	; (80081a0 <UART_SetConfig+0x2c0>)
 8007f10:	4013      	ands	r3, r2
 8007f12:	68fa      	ldr	r2, [r7, #12]
 8007f14:	6812      	ldr	r2, [r2, #0]
 8007f16:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007f18:	430b      	orrs	r3, r1
 8007f1a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	685b      	ldr	r3, [r3, #4]
 8007f22:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	68da      	ldr	r2, [r3, #12]
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	430a      	orrs	r2, r1
 8007f30:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	699b      	ldr	r3, [r3, #24]
 8007f36:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	4a99      	ldr	r2, [pc, #612]	; (80081a4 <UART_SetConfig+0x2c4>)
 8007f3e:	4293      	cmp	r3, r2
 8007f40:	d004      	beq.n	8007f4c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	6a1b      	ldr	r3, [r3, #32]
 8007f46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f48:	4313      	orrs	r3, r2
 8007f4a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	689b      	ldr	r3, [r3, #8]
 8007f52:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f5c:	430a      	orrs	r2, r1
 8007f5e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	4a90      	ldr	r2, [pc, #576]	; (80081a8 <UART_SetConfig+0x2c8>)
 8007f66:	4293      	cmp	r3, r2
 8007f68:	d126      	bne.n	8007fb8 <UART_SetConfig+0xd8>
 8007f6a:	4b90      	ldr	r3, [pc, #576]	; (80081ac <UART_SetConfig+0x2cc>)
 8007f6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f70:	f003 0303 	and.w	r3, r3, #3
 8007f74:	2b03      	cmp	r3, #3
 8007f76:	d81b      	bhi.n	8007fb0 <UART_SetConfig+0xd0>
 8007f78:	a201      	add	r2, pc, #4	; (adr r2, 8007f80 <UART_SetConfig+0xa0>)
 8007f7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f7e:	bf00      	nop
 8007f80:	08007f91 	.word	0x08007f91
 8007f84:	08007fa1 	.word	0x08007fa1
 8007f88:	08007f99 	.word	0x08007f99
 8007f8c:	08007fa9 	.word	0x08007fa9
 8007f90:	2301      	movs	r3, #1
 8007f92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007f96:	e116      	b.n	80081c6 <UART_SetConfig+0x2e6>
 8007f98:	2302      	movs	r3, #2
 8007f9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007f9e:	e112      	b.n	80081c6 <UART_SetConfig+0x2e6>
 8007fa0:	2304      	movs	r3, #4
 8007fa2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007fa6:	e10e      	b.n	80081c6 <UART_SetConfig+0x2e6>
 8007fa8:	2308      	movs	r3, #8
 8007faa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007fae:	e10a      	b.n	80081c6 <UART_SetConfig+0x2e6>
 8007fb0:	2310      	movs	r3, #16
 8007fb2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007fb6:	e106      	b.n	80081c6 <UART_SetConfig+0x2e6>
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	4a7c      	ldr	r2, [pc, #496]	; (80081b0 <UART_SetConfig+0x2d0>)
 8007fbe:	4293      	cmp	r3, r2
 8007fc0:	d138      	bne.n	8008034 <UART_SetConfig+0x154>
 8007fc2:	4b7a      	ldr	r3, [pc, #488]	; (80081ac <UART_SetConfig+0x2cc>)
 8007fc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007fc8:	f003 030c 	and.w	r3, r3, #12
 8007fcc:	2b0c      	cmp	r3, #12
 8007fce:	d82d      	bhi.n	800802c <UART_SetConfig+0x14c>
 8007fd0:	a201      	add	r2, pc, #4	; (adr r2, 8007fd8 <UART_SetConfig+0xf8>)
 8007fd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fd6:	bf00      	nop
 8007fd8:	0800800d 	.word	0x0800800d
 8007fdc:	0800802d 	.word	0x0800802d
 8007fe0:	0800802d 	.word	0x0800802d
 8007fe4:	0800802d 	.word	0x0800802d
 8007fe8:	0800801d 	.word	0x0800801d
 8007fec:	0800802d 	.word	0x0800802d
 8007ff0:	0800802d 	.word	0x0800802d
 8007ff4:	0800802d 	.word	0x0800802d
 8007ff8:	08008015 	.word	0x08008015
 8007ffc:	0800802d 	.word	0x0800802d
 8008000:	0800802d 	.word	0x0800802d
 8008004:	0800802d 	.word	0x0800802d
 8008008:	08008025 	.word	0x08008025
 800800c:	2300      	movs	r3, #0
 800800e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008012:	e0d8      	b.n	80081c6 <UART_SetConfig+0x2e6>
 8008014:	2302      	movs	r3, #2
 8008016:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800801a:	e0d4      	b.n	80081c6 <UART_SetConfig+0x2e6>
 800801c:	2304      	movs	r3, #4
 800801e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008022:	e0d0      	b.n	80081c6 <UART_SetConfig+0x2e6>
 8008024:	2308      	movs	r3, #8
 8008026:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800802a:	e0cc      	b.n	80081c6 <UART_SetConfig+0x2e6>
 800802c:	2310      	movs	r3, #16
 800802e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008032:	e0c8      	b.n	80081c6 <UART_SetConfig+0x2e6>
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	4a5e      	ldr	r2, [pc, #376]	; (80081b4 <UART_SetConfig+0x2d4>)
 800803a:	4293      	cmp	r3, r2
 800803c:	d125      	bne.n	800808a <UART_SetConfig+0x1aa>
 800803e:	4b5b      	ldr	r3, [pc, #364]	; (80081ac <UART_SetConfig+0x2cc>)
 8008040:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008044:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008048:	2b30      	cmp	r3, #48	; 0x30
 800804a:	d016      	beq.n	800807a <UART_SetConfig+0x19a>
 800804c:	2b30      	cmp	r3, #48	; 0x30
 800804e:	d818      	bhi.n	8008082 <UART_SetConfig+0x1a2>
 8008050:	2b20      	cmp	r3, #32
 8008052:	d00a      	beq.n	800806a <UART_SetConfig+0x18a>
 8008054:	2b20      	cmp	r3, #32
 8008056:	d814      	bhi.n	8008082 <UART_SetConfig+0x1a2>
 8008058:	2b00      	cmp	r3, #0
 800805a:	d002      	beq.n	8008062 <UART_SetConfig+0x182>
 800805c:	2b10      	cmp	r3, #16
 800805e:	d008      	beq.n	8008072 <UART_SetConfig+0x192>
 8008060:	e00f      	b.n	8008082 <UART_SetConfig+0x1a2>
 8008062:	2300      	movs	r3, #0
 8008064:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008068:	e0ad      	b.n	80081c6 <UART_SetConfig+0x2e6>
 800806a:	2302      	movs	r3, #2
 800806c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008070:	e0a9      	b.n	80081c6 <UART_SetConfig+0x2e6>
 8008072:	2304      	movs	r3, #4
 8008074:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008078:	e0a5      	b.n	80081c6 <UART_SetConfig+0x2e6>
 800807a:	2308      	movs	r3, #8
 800807c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008080:	e0a1      	b.n	80081c6 <UART_SetConfig+0x2e6>
 8008082:	2310      	movs	r3, #16
 8008084:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008088:	e09d      	b.n	80081c6 <UART_SetConfig+0x2e6>
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	4a4a      	ldr	r2, [pc, #296]	; (80081b8 <UART_SetConfig+0x2d8>)
 8008090:	4293      	cmp	r3, r2
 8008092:	d125      	bne.n	80080e0 <UART_SetConfig+0x200>
 8008094:	4b45      	ldr	r3, [pc, #276]	; (80081ac <UART_SetConfig+0x2cc>)
 8008096:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800809a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800809e:	2bc0      	cmp	r3, #192	; 0xc0
 80080a0:	d016      	beq.n	80080d0 <UART_SetConfig+0x1f0>
 80080a2:	2bc0      	cmp	r3, #192	; 0xc0
 80080a4:	d818      	bhi.n	80080d8 <UART_SetConfig+0x1f8>
 80080a6:	2b80      	cmp	r3, #128	; 0x80
 80080a8:	d00a      	beq.n	80080c0 <UART_SetConfig+0x1e0>
 80080aa:	2b80      	cmp	r3, #128	; 0x80
 80080ac:	d814      	bhi.n	80080d8 <UART_SetConfig+0x1f8>
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d002      	beq.n	80080b8 <UART_SetConfig+0x1d8>
 80080b2:	2b40      	cmp	r3, #64	; 0x40
 80080b4:	d008      	beq.n	80080c8 <UART_SetConfig+0x1e8>
 80080b6:	e00f      	b.n	80080d8 <UART_SetConfig+0x1f8>
 80080b8:	2300      	movs	r3, #0
 80080ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80080be:	e082      	b.n	80081c6 <UART_SetConfig+0x2e6>
 80080c0:	2302      	movs	r3, #2
 80080c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80080c6:	e07e      	b.n	80081c6 <UART_SetConfig+0x2e6>
 80080c8:	2304      	movs	r3, #4
 80080ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80080ce:	e07a      	b.n	80081c6 <UART_SetConfig+0x2e6>
 80080d0:	2308      	movs	r3, #8
 80080d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80080d6:	e076      	b.n	80081c6 <UART_SetConfig+0x2e6>
 80080d8:	2310      	movs	r3, #16
 80080da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80080de:	e072      	b.n	80081c6 <UART_SetConfig+0x2e6>
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	4a35      	ldr	r2, [pc, #212]	; (80081bc <UART_SetConfig+0x2dc>)
 80080e6:	4293      	cmp	r3, r2
 80080e8:	d12a      	bne.n	8008140 <UART_SetConfig+0x260>
 80080ea:	4b30      	ldr	r3, [pc, #192]	; (80081ac <UART_SetConfig+0x2cc>)
 80080ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80080f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80080f4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80080f8:	d01a      	beq.n	8008130 <UART_SetConfig+0x250>
 80080fa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80080fe:	d81b      	bhi.n	8008138 <UART_SetConfig+0x258>
 8008100:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008104:	d00c      	beq.n	8008120 <UART_SetConfig+0x240>
 8008106:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800810a:	d815      	bhi.n	8008138 <UART_SetConfig+0x258>
 800810c:	2b00      	cmp	r3, #0
 800810e:	d003      	beq.n	8008118 <UART_SetConfig+0x238>
 8008110:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008114:	d008      	beq.n	8008128 <UART_SetConfig+0x248>
 8008116:	e00f      	b.n	8008138 <UART_SetConfig+0x258>
 8008118:	2300      	movs	r3, #0
 800811a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800811e:	e052      	b.n	80081c6 <UART_SetConfig+0x2e6>
 8008120:	2302      	movs	r3, #2
 8008122:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008126:	e04e      	b.n	80081c6 <UART_SetConfig+0x2e6>
 8008128:	2304      	movs	r3, #4
 800812a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800812e:	e04a      	b.n	80081c6 <UART_SetConfig+0x2e6>
 8008130:	2308      	movs	r3, #8
 8008132:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008136:	e046      	b.n	80081c6 <UART_SetConfig+0x2e6>
 8008138:	2310      	movs	r3, #16
 800813a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800813e:	e042      	b.n	80081c6 <UART_SetConfig+0x2e6>
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	4a17      	ldr	r2, [pc, #92]	; (80081a4 <UART_SetConfig+0x2c4>)
 8008146:	4293      	cmp	r3, r2
 8008148:	d13a      	bne.n	80081c0 <UART_SetConfig+0x2e0>
 800814a:	4b18      	ldr	r3, [pc, #96]	; (80081ac <UART_SetConfig+0x2cc>)
 800814c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008150:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008154:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008158:	d01a      	beq.n	8008190 <UART_SetConfig+0x2b0>
 800815a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800815e:	d81b      	bhi.n	8008198 <UART_SetConfig+0x2b8>
 8008160:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008164:	d00c      	beq.n	8008180 <UART_SetConfig+0x2a0>
 8008166:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800816a:	d815      	bhi.n	8008198 <UART_SetConfig+0x2b8>
 800816c:	2b00      	cmp	r3, #0
 800816e:	d003      	beq.n	8008178 <UART_SetConfig+0x298>
 8008170:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008174:	d008      	beq.n	8008188 <UART_SetConfig+0x2a8>
 8008176:	e00f      	b.n	8008198 <UART_SetConfig+0x2b8>
 8008178:	2300      	movs	r3, #0
 800817a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800817e:	e022      	b.n	80081c6 <UART_SetConfig+0x2e6>
 8008180:	2302      	movs	r3, #2
 8008182:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008186:	e01e      	b.n	80081c6 <UART_SetConfig+0x2e6>
 8008188:	2304      	movs	r3, #4
 800818a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800818e:	e01a      	b.n	80081c6 <UART_SetConfig+0x2e6>
 8008190:	2308      	movs	r3, #8
 8008192:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008196:	e016      	b.n	80081c6 <UART_SetConfig+0x2e6>
 8008198:	2310      	movs	r3, #16
 800819a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800819e:	e012      	b.n	80081c6 <UART_SetConfig+0x2e6>
 80081a0:	efff69f3 	.word	0xefff69f3
 80081a4:	40008000 	.word	0x40008000
 80081a8:	40013800 	.word	0x40013800
 80081ac:	40021000 	.word	0x40021000
 80081b0:	40004400 	.word	0x40004400
 80081b4:	40004800 	.word	0x40004800
 80081b8:	40004c00 	.word	0x40004c00
 80081bc:	40005000 	.word	0x40005000
 80081c0:	2310      	movs	r3, #16
 80081c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	4aa0      	ldr	r2, [pc, #640]	; (800844c <UART_SetConfig+0x56c>)
 80081cc:	4293      	cmp	r3, r2
 80081ce:	d17a      	bne.n	80082c6 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80081d0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80081d4:	2b08      	cmp	r3, #8
 80081d6:	d824      	bhi.n	8008222 <UART_SetConfig+0x342>
 80081d8:	a201      	add	r2, pc, #4	; (adr r2, 80081e0 <UART_SetConfig+0x300>)
 80081da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081de:	bf00      	nop
 80081e0:	08008205 	.word	0x08008205
 80081e4:	08008223 	.word	0x08008223
 80081e8:	0800820d 	.word	0x0800820d
 80081ec:	08008223 	.word	0x08008223
 80081f0:	08008213 	.word	0x08008213
 80081f4:	08008223 	.word	0x08008223
 80081f8:	08008223 	.word	0x08008223
 80081fc:	08008223 	.word	0x08008223
 8008200:	0800821b 	.word	0x0800821b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008204:	f7fc fc04 	bl	8004a10 <HAL_RCC_GetPCLK1Freq>
 8008208:	61f8      	str	r0, [r7, #28]
        break;
 800820a:	e010      	b.n	800822e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800820c:	4b90      	ldr	r3, [pc, #576]	; (8008450 <UART_SetConfig+0x570>)
 800820e:	61fb      	str	r3, [r7, #28]
        break;
 8008210:	e00d      	b.n	800822e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008212:	f7fc fb65 	bl	80048e0 <HAL_RCC_GetSysClockFreq>
 8008216:	61f8      	str	r0, [r7, #28]
        break;
 8008218:	e009      	b.n	800822e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800821a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800821e:	61fb      	str	r3, [r7, #28]
        break;
 8008220:	e005      	b.n	800822e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8008222:	2300      	movs	r3, #0
 8008224:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8008226:	2301      	movs	r3, #1
 8008228:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800822c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800822e:	69fb      	ldr	r3, [r7, #28]
 8008230:	2b00      	cmp	r3, #0
 8008232:	f000 80fd 	beq.w	8008430 <UART_SetConfig+0x550>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	685a      	ldr	r2, [r3, #4]
 800823a:	4613      	mov	r3, r2
 800823c:	005b      	lsls	r3, r3, #1
 800823e:	4413      	add	r3, r2
 8008240:	69fa      	ldr	r2, [r7, #28]
 8008242:	429a      	cmp	r2, r3
 8008244:	d305      	bcc.n	8008252 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	685b      	ldr	r3, [r3, #4]
 800824a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800824c:	69fa      	ldr	r2, [r7, #28]
 800824e:	429a      	cmp	r2, r3
 8008250:	d903      	bls.n	800825a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8008252:	2301      	movs	r3, #1
 8008254:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8008258:	e0ea      	b.n	8008430 <UART_SetConfig+0x550>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800825a:	69fb      	ldr	r3, [r7, #28]
 800825c:	2200      	movs	r2, #0
 800825e:	461c      	mov	r4, r3
 8008260:	4615      	mov	r5, r2
 8008262:	f04f 0200 	mov.w	r2, #0
 8008266:	f04f 0300 	mov.w	r3, #0
 800826a:	022b      	lsls	r3, r5, #8
 800826c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8008270:	0222      	lsls	r2, r4, #8
 8008272:	68f9      	ldr	r1, [r7, #12]
 8008274:	6849      	ldr	r1, [r1, #4]
 8008276:	0849      	lsrs	r1, r1, #1
 8008278:	2000      	movs	r0, #0
 800827a:	4688      	mov	r8, r1
 800827c:	4681      	mov	r9, r0
 800827e:	eb12 0a08 	adds.w	sl, r2, r8
 8008282:	eb43 0b09 	adc.w	fp, r3, r9
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	685b      	ldr	r3, [r3, #4]
 800828a:	2200      	movs	r2, #0
 800828c:	603b      	str	r3, [r7, #0]
 800828e:	607a      	str	r2, [r7, #4]
 8008290:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008294:	4650      	mov	r0, sl
 8008296:	4659      	mov	r1, fp
 8008298:	f7f7 fff2 	bl	8000280 <__aeabi_uldivmod>
 800829c:	4602      	mov	r2, r0
 800829e:	460b      	mov	r3, r1
 80082a0:	4613      	mov	r3, r2
 80082a2:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80082a4:	69bb      	ldr	r3, [r7, #24]
 80082a6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80082aa:	d308      	bcc.n	80082be <UART_SetConfig+0x3de>
 80082ac:	69bb      	ldr	r3, [r7, #24]
 80082ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80082b2:	d204      	bcs.n	80082be <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	69ba      	ldr	r2, [r7, #24]
 80082ba:	60da      	str	r2, [r3, #12]
 80082bc:	e0b8      	b.n	8008430 <UART_SetConfig+0x550>
        }
        else
        {
          ret = HAL_ERROR;
 80082be:	2301      	movs	r3, #1
 80082c0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80082c4:	e0b4      	b.n	8008430 <UART_SetConfig+0x550>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	69db      	ldr	r3, [r3, #28]
 80082ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80082ce:	d15f      	bne.n	8008390 <UART_SetConfig+0x4b0>
  {
    switch (clocksource)
 80082d0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80082d4:	2b08      	cmp	r3, #8
 80082d6:	d828      	bhi.n	800832a <UART_SetConfig+0x44a>
 80082d8:	a201      	add	r2, pc, #4	; (adr r2, 80082e0 <UART_SetConfig+0x400>)
 80082da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082de:	bf00      	nop
 80082e0:	08008305 	.word	0x08008305
 80082e4:	0800830d 	.word	0x0800830d
 80082e8:	08008315 	.word	0x08008315
 80082ec:	0800832b 	.word	0x0800832b
 80082f0:	0800831b 	.word	0x0800831b
 80082f4:	0800832b 	.word	0x0800832b
 80082f8:	0800832b 	.word	0x0800832b
 80082fc:	0800832b 	.word	0x0800832b
 8008300:	08008323 	.word	0x08008323
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008304:	f7fc fb84 	bl	8004a10 <HAL_RCC_GetPCLK1Freq>
 8008308:	61f8      	str	r0, [r7, #28]
        break;
 800830a:	e014      	b.n	8008336 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800830c:	f7fc fb96 	bl	8004a3c <HAL_RCC_GetPCLK2Freq>
 8008310:	61f8      	str	r0, [r7, #28]
        break;
 8008312:	e010      	b.n	8008336 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008314:	4b4e      	ldr	r3, [pc, #312]	; (8008450 <UART_SetConfig+0x570>)
 8008316:	61fb      	str	r3, [r7, #28]
        break;
 8008318:	e00d      	b.n	8008336 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800831a:	f7fc fae1 	bl	80048e0 <HAL_RCC_GetSysClockFreq>
 800831e:	61f8      	str	r0, [r7, #28]
        break;
 8008320:	e009      	b.n	8008336 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008322:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008326:	61fb      	str	r3, [r7, #28]
        break;
 8008328:	e005      	b.n	8008336 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800832a:	2300      	movs	r3, #0
 800832c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800832e:	2301      	movs	r3, #1
 8008330:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8008334:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008336:	69fb      	ldr	r3, [r7, #28]
 8008338:	2b00      	cmp	r3, #0
 800833a:	d079      	beq.n	8008430 <UART_SetConfig+0x550>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800833c:	69fb      	ldr	r3, [r7, #28]
 800833e:	005a      	lsls	r2, r3, #1
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	685b      	ldr	r3, [r3, #4]
 8008344:	085b      	lsrs	r3, r3, #1
 8008346:	441a      	add	r2, r3
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	685b      	ldr	r3, [r3, #4]
 800834c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008350:	b29b      	uxth	r3, r3
 8008352:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008354:	69bb      	ldr	r3, [r7, #24]
 8008356:	2b0f      	cmp	r3, #15
 8008358:	d916      	bls.n	8008388 <UART_SetConfig+0x4a8>
 800835a:	69bb      	ldr	r3, [r7, #24]
 800835c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008360:	d212      	bcs.n	8008388 <UART_SetConfig+0x4a8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008362:	69bb      	ldr	r3, [r7, #24]
 8008364:	b29b      	uxth	r3, r3
 8008366:	f023 030f 	bic.w	r3, r3, #15
 800836a:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800836c:	69bb      	ldr	r3, [r7, #24]
 800836e:	085b      	lsrs	r3, r3, #1
 8008370:	b29b      	uxth	r3, r3
 8008372:	f003 0307 	and.w	r3, r3, #7
 8008376:	b29a      	uxth	r2, r3
 8008378:	8afb      	ldrh	r3, [r7, #22]
 800837a:	4313      	orrs	r3, r2
 800837c:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	8afa      	ldrh	r2, [r7, #22]
 8008384:	60da      	str	r2, [r3, #12]
 8008386:	e053      	b.n	8008430 <UART_SetConfig+0x550>
      }
      else
      {
        ret = HAL_ERROR;
 8008388:	2301      	movs	r3, #1
 800838a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800838e:	e04f      	b.n	8008430 <UART_SetConfig+0x550>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008390:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008394:	2b08      	cmp	r3, #8
 8008396:	d828      	bhi.n	80083ea <UART_SetConfig+0x50a>
 8008398:	a201      	add	r2, pc, #4	; (adr r2, 80083a0 <UART_SetConfig+0x4c0>)
 800839a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800839e:	bf00      	nop
 80083a0:	080083c5 	.word	0x080083c5
 80083a4:	080083cd 	.word	0x080083cd
 80083a8:	080083d5 	.word	0x080083d5
 80083ac:	080083eb 	.word	0x080083eb
 80083b0:	080083db 	.word	0x080083db
 80083b4:	080083eb 	.word	0x080083eb
 80083b8:	080083eb 	.word	0x080083eb
 80083bc:	080083eb 	.word	0x080083eb
 80083c0:	080083e3 	.word	0x080083e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80083c4:	f7fc fb24 	bl	8004a10 <HAL_RCC_GetPCLK1Freq>
 80083c8:	61f8      	str	r0, [r7, #28]
        break;
 80083ca:	e014      	b.n	80083f6 <UART_SetConfig+0x516>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80083cc:	f7fc fb36 	bl	8004a3c <HAL_RCC_GetPCLK2Freq>
 80083d0:	61f8      	str	r0, [r7, #28]
        break;
 80083d2:	e010      	b.n	80083f6 <UART_SetConfig+0x516>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80083d4:	4b1e      	ldr	r3, [pc, #120]	; (8008450 <UART_SetConfig+0x570>)
 80083d6:	61fb      	str	r3, [r7, #28]
        break;
 80083d8:	e00d      	b.n	80083f6 <UART_SetConfig+0x516>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80083da:	f7fc fa81 	bl	80048e0 <HAL_RCC_GetSysClockFreq>
 80083de:	61f8      	str	r0, [r7, #28]
        break;
 80083e0:	e009      	b.n	80083f6 <UART_SetConfig+0x516>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80083e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80083e6:	61fb      	str	r3, [r7, #28]
        break;
 80083e8:	e005      	b.n	80083f6 <UART_SetConfig+0x516>
      default:
        pclk = 0U;
 80083ea:	2300      	movs	r3, #0
 80083ec:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80083ee:	2301      	movs	r3, #1
 80083f0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80083f4:	bf00      	nop
    }

    if (pclk != 0U)
 80083f6:	69fb      	ldr	r3, [r7, #28]
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d019      	beq.n	8008430 <UART_SetConfig+0x550>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	685b      	ldr	r3, [r3, #4]
 8008400:	085a      	lsrs	r2, r3, #1
 8008402:	69fb      	ldr	r3, [r7, #28]
 8008404:	441a      	add	r2, r3
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	685b      	ldr	r3, [r3, #4]
 800840a:	fbb2 f3f3 	udiv	r3, r2, r3
 800840e:	b29b      	uxth	r3, r3
 8008410:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008412:	69bb      	ldr	r3, [r7, #24]
 8008414:	2b0f      	cmp	r3, #15
 8008416:	d908      	bls.n	800842a <UART_SetConfig+0x54a>
 8008418:	69bb      	ldr	r3, [r7, #24]
 800841a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800841e:	d204      	bcs.n	800842a <UART_SetConfig+0x54a>
      {
        huart->Instance->BRR = usartdiv;
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	69ba      	ldr	r2, [r7, #24]
 8008426:	60da      	str	r2, [r3, #12]
 8008428:	e002      	b.n	8008430 <UART_SetConfig+0x550>
      }
      else
      {
        ret = HAL_ERROR;
 800842a:	2301      	movs	r3, #1
 800842c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	2200      	movs	r2, #0
 8008434:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	2200      	movs	r2, #0
 800843a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800843c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8008440:	4618      	mov	r0, r3
 8008442:	3728      	adds	r7, #40	; 0x28
 8008444:	46bd      	mov	sp, r7
 8008446:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800844a:	bf00      	nop
 800844c:	40008000 	.word	0x40008000
 8008450:	00f42400 	.word	0x00f42400

08008454 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008454:	b480      	push	{r7}
 8008456:	b083      	sub	sp, #12
 8008458:	af00      	add	r7, sp, #0
 800845a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008460:	f003 0301 	and.w	r3, r3, #1
 8008464:	2b00      	cmp	r3, #0
 8008466:	d00a      	beq.n	800847e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	685b      	ldr	r3, [r3, #4]
 800846e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	430a      	orrs	r2, r1
 800847c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008482:	f003 0302 	and.w	r3, r3, #2
 8008486:	2b00      	cmp	r3, #0
 8008488:	d00a      	beq.n	80084a0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	685b      	ldr	r3, [r3, #4]
 8008490:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	430a      	orrs	r2, r1
 800849e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084a4:	f003 0304 	and.w	r3, r3, #4
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d00a      	beq.n	80084c2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	685b      	ldr	r3, [r3, #4]
 80084b2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	430a      	orrs	r2, r1
 80084c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084c6:	f003 0308 	and.w	r3, r3, #8
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d00a      	beq.n	80084e4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	685b      	ldr	r3, [r3, #4]
 80084d4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	430a      	orrs	r2, r1
 80084e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084e8:	f003 0310 	and.w	r3, r3, #16
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d00a      	beq.n	8008506 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	689b      	ldr	r3, [r3, #8]
 80084f6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	430a      	orrs	r2, r1
 8008504:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800850a:	f003 0320 	and.w	r3, r3, #32
 800850e:	2b00      	cmp	r3, #0
 8008510:	d00a      	beq.n	8008528 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	689b      	ldr	r3, [r3, #8]
 8008518:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	430a      	orrs	r2, r1
 8008526:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800852c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008530:	2b00      	cmp	r3, #0
 8008532:	d01a      	beq.n	800856a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	685b      	ldr	r3, [r3, #4]
 800853a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	430a      	orrs	r2, r1
 8008548:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800854e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008552:	d10a      	bne.n	800856a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	685b      	ldr	r3, [r3, #4]
 800855a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	430a      	orrs	r2, r1
 8008568:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800856e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008572:	2b00      	cmp	r3, #0
 8008574:	d00a      	beq.n	800858c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	685b      	ldr	r3, [r3, #4]
 800857c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	430a      	orrs	r2, r1
 800858a:	605a      	str	r2, [r3, #4]
  }
}
 800858c:	bf00      	nop
 800858e:	370c      	adds	r7, #12
 8008590:	46bd      	mov	sp, r7
 8008592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008596:	4770      	bx	lr

08008598 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008598:	b580      	push	{r7, lr}
 800859a:	b086      	sub	sp, #24
 800859c:	af02      	add	r7, sp, #8
 800859e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	2200      	movs	r2, #0
 80085a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80085a8:	f7f9 fef2 	bl	8002390 <HAL_GetTick>
 80085ac:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	f003 0308 	and.w	r3, r3, #8
 80085b8:	2b08      	cmp	r3, #8
 80085ba:	d10e      	bne.n	80085da <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80085bc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80085c0:	9300      	str	r3, [sp, #0]
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	2200      	movs	r2, #0
 80085c6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80085ca:	6878      	ldr	r0, [r7, #4]
 80085cc:	f000 f82d 	bl	800862a <UART_WaitOnFlagUntilTimeout>
 80085d0:	4603      	mov	r3, r0
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d001      	beq.n	80085da <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80085d6:	2303      	movs	r3, #3
 80085d8:	e023      	b.n	8008622 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	f003 0304 	and.w	r3, r3, #4
 80085e4:	2b04      	cmp	r3, #4
 80085e6:	d10e      	bne.n	8008606 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80085e8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80085ec:	9300      	str	r3, [sp, #0]
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	2200      	movs	r2, #0
 80085f2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80085f6:	6878      	ldr	r0, [r7, #4]
 80085f8:	f000 f817 	bl	800862a <UART_WaitOnFlagUntilTimeout>
 80085fc:	4603      	mov	r3, r0
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d001      	beq.n	8008606 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008602:	2303      	movs	r3, #3
 8008604:	e00d      	b.n	8008622 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	2220      	movs	r2, #32
 800860a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	2220      	movs	r2, #32
 8008610:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	2200      	movs	r2, #0
 8008616:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	2200      	movs	r2, #0
 800861c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8008620:	2300      	movs	r3, #0
}
 8008622:	4618      	mov	r0, r3
 8008624:	3710      	adds	r7, #16
 8008626:	46bd      	mov	sp, r7
 8008628:	bd80      	pop	{r7, pc}

0800862a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800862a:	b580      	push	{r7, lr}
 800862c:	b084      	sub	sp, #16
 800862e:	af00      	add	r7, sp, #0
 8008630:	60f8      	str	r0, [r7, #12]
 8008632:	60b9      	str	r1, [r7, #8]
 8008634:	603b      	str	r3, [r7, #0]
 8008636:	4613      	mov	r3, r2
 8008638:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800863a:	e05e      	b.n	80086fa <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800863c:	69bb      	ldr	r3, [r7, #24]
 800863e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008642:	d05a      	beq.n	80086fa <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008644:	f7f9 fea4 	bl	8002390 <HAL_GetTick>
 8008648:	4602      	mov	r2, r0
 800864a:	683b      	ldr	r3, [r7, #0]
 800864c:	1ad3      	subs	r3, r2, r3
 800864e:	69ba      	ldr	r2, [r7, #24]
 8008650:	429a      	cmp	r2, r3
 8008652:	d302      	bcc.n	800865a <UART_WaitOnFlagUntilTimeout+0x30>
 8008654:	69bb      	ldr	r3, [r7, #24]
 8008656:	2b00      	cmp	r3, #0
 8008658:	d11b      	bne.n	8008692 <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	681a      	ldr	r2, [r3, #0]
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008668:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	689a      	ldr	r2, [r3, #8]
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	f022 0201 	bic.w	r2, r2, #1
 8008678:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	2220      	movs	r2, #32
 800867e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	2220      	movs	r2, #32
 8008684:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	2200      	movs	r2, #0
 800868a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800868e:	2303      	movs	r3, #3
 8008690:	e043      	b.n	800871a <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	f003 0304 	and.w	r3, r3, #4
 800869c:	2b00      	cmp	r3, #0
 800869e:	d02c      	beq.n	80086fa <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	69db      	ldr	r3, [r3, #28]
 80086a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80086aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80086ae:	d124      	bne.n	80086fa <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80086b8:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	681a      	ldr	r2, [r3, #0]
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80086c8:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	689a      	ldr	r2, [r3, #8]
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	f022 0201 	bic.w	r2, r2, #1
 80086d8:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	2220      	movs	r2, #32
 80086de:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	2220      	movs	r2, #32
 80086e4:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	2220      	movs	r2, #32
 80086ea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	2200      	movs	r2, #0
 80086f2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80086f6:	2303      	movs	r3, #3
 80086f8:	e00f      	b.n	800871a <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	69da      	ldr	r2, [r3, #28]
 8008700:	68bb      	ldr	r3, [r7, #8]
 8008702:	4013      	ands	r3, r2
 8008704:	68ba      	ldr	r2, [r7, #8]
 8008706:	429a      	cmp	r2, r3
 8008708:	bf0c      	ite	eq
 800870a:	2301      	moveq	r3, #1
 800870c:	2300      	movne	r3, #0
 800870e:	b2db      	uxtb	r3, r3
 8008710:	461a      	mov	r2, r3
 8008712:	79fb      	ldrb	r3, [r7, #7]
 8008714:	429a      	cmp	r2, r3
 8008716:	d091      	beq.n	800863c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008718:	2300      	movs	r3, #0
}
 800871a:	4618      	mov	r0, r3
 800871c:	3710      	adds	r7, #16
 800871e:	46bd      	mov	sp, r7
 8008720:	bd80      	pop	{r7, pc}
	...

08008724 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008724:	b480      	push	{r7}
 8008726:	b085      	sub	sp, #20
 8008728:	af00      	add	r7, sp, #0
 800872a:	60f8      	str	r0, [r7, #12]
 800872c:	60b9      	str	r1, [r7, #8]
 800872e:	4613      	mov	r3, r2
 8008730:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	68ba      	ldr	r2, [r7, #8]
 8008736:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	88fa      	ldrh	r2, [r7, #6]
 800873c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	88fa      	ldrh	r2, [r7, #6]
 8008744:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	2200      	movs	r2, #0
 800874c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	689b      	ldr	r3, [r3, #8]
 8008752:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008756:	d10e      	bne.n	8008776 <UART_Start_Receive_IT+0x52>
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	691b      	ldr	r3, [r3, #16]
 800875c:	2b00      	cmp	r3, #0
 800875e:	d105      	bne.n	800876c <UART_Start_Receive_IT+0x48>
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	f240 12ff 	movw	r2, #511	; 0x1ff
 8008766:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800876a:	e02d      	b.n	80087c8 <UART_Start_Receive_IT+0xa4>
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	22ff      	movs	r2, #255	; 0xff
 8008770:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008774:	e028      	b.n	80087c8 <UART_Start_Receive_IT+0xa4>
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	689b      	ldr	r3, [r3, #8]
 800877a:	2b00      	cmp	r3, #0
 800877c:	d10d      	bne.n	800879a <UART_Start_Receive_IT+0x76>
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	691b      	ldr	r3, [r3, #16]
 8008782:	2b00      	cmp	r3, #0
 8008784:	d104      	bne.n	8008790 <UART_Start_Receive_IT+0x6c>
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	22ff      	movs	r2, #255	; 0xff
 800878a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800878e:	e01b      	b.n	80087c8 <UART_Start_Receive_IT+0xa4>
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	227f      	movs	r2, #127	; 0x7f
 8008794:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008798:	e016      	b.n	80087c8 <UART_Start_Receive_IT+0xa4>
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	689b      	ldr	r3, [r3, #8]
 800879e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80087a2:	d10d      	bne.n	80087c0 <UART_Start_Receive_IT+0x9c>
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	691b      	ldr	r3, [r3, #16]
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d104      	bne.n	80087b6 <UART_Start_Receive_IT+0x92>
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	227f      	movs	r2, #127	; 0x7f
 80087b0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80087b4:	e008      	b.n	80087c8 <UART_Start_Receive_IT+0xa4>
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	223f      	movs	r2, #63	; 0x3f
 80087ba:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80087be:	e003      	b.n	80087c8 <UART_Start_Receive_IT+0xa4>
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	2200      	movs	r2, #0
 80087c4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	2200      	movs	r2, #0
 80087cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	2222      	movs	r2, #34	; 0x22
 80087d4:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	689a      	ldr	r2, [r3, #8]
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	f042 0201 	orr.w	r2, r2, #1
 80087e4:	609a      	str	r2, [r3, #8]
    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	689b      	ldr	r3, [r3, #8]
 80087ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80087ee:	d107      	bne.n	8008800 <UART_Start_Receive_IT+0xdc>
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	691b      	ldr	r3, [r3, #16]
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d103      	bne.n	8008800 <UART_Start_Receive_IT+0xdc>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	4a0c      	ldr	r2, [pc, #48]	; (800882c <UART_Start_Receive_IT+0x108>)
 80087fc:	665a      	str	r2, [r3, #100]	; 0x64
 80087fe:	e002      	b.n	8008806 <UART_Start_Receive_IT+0xe2>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	4a0b      	ldr	r2, [pc, #44]	; (8008830 <UART_Start_Receive_IT+0x10c>)
 8008804:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	2200      	movs	r2, #0
 800880a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	681a      	ldr	r2, [r3, #0]
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 800881c:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 800881e:	2300      	movs	r3, #0
}
 8008820:	4618      	mov	r0, r3
 8008822:	3714      	adds	r7, #20
 8008824:	46bd      	mov	sp, r7
 8008826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800882a:	4770      	bx	lr
 800882c:	080089c9 	.word	0x080089c9
 8008830:	080088f1 	.word	0x080088f1

08008834 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008834:	b480      	push	{r7}
 8008836:	b083      	sub	sp, #12
 8008838:	af00      	add	r7, sp, #0
 800883a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	681a      	ldr	r2, [r3, #0]
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800884a:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	689a      	ldr	r2, [r3, #8]
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	f022 0201 	bic.w	r2, r2, #1
 800885a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008860:	2b01      	cmp	r3, #1
 8008862:	d107      	bne.n	8008874 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	681a      	ldr	r2, [r3, #0]
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	f022 0210 	bic.w	r2, r2, #16
 8008872:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	2220      	movs	r2, #32
 8008878:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	2200      	movs	r2, #0
 800887e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	2200      	movs	r2, #0
 8008884:	665a      	str	r2, [r3, #100]	; 0x64
}
 8008886:	bf00      	nop
 8008888:	370c      	adds	r7, #12
 800888a:	46bd      	mov	sp, r7
 800888c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008890:	4770      	bx	lr

08008892 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008892:	b580      	push	{r7, lr}
 8008894:	b084      	sub	sp, #16
 8008896:	af00      	add	r7, sp, #0
 8008898:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800889e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	2200      	movs	r2, #0
 80088a4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	2200      	movs	r2, #0
 80088ac:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80088b0:	68f8      	ldr	r0, [r7, #12]
 80088b2:	f7ff faff 	bl	8007eb4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80088b6:	bf00      	nop
 80088b8:	3710      	adds	r7, #16
 80088ba:	46bd      	mov	sp, r7
 80088bc:	bd80      	pop	{r7, pc}

080088be <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80088be:	b580      	push	{r7, lr}
 80088c0:	b082      	sub	sp, #8
 80088c2:	af00      	add	r7, sp, #0
 80088c4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	681a      	ldr	r2, [r3, #0]
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80088d4:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	2220      	movs	r2, #32
 80088da:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	2200      	movs	r2, #0
 80088e0:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80088e2:	6878      	ldr	r0, [r7, #4]
 80088e4:	f7ff fadc 	bl	8007ea0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80088e8:	bf00      	nop
 80088ea:	3708      	adds	r7, #8
 80088ec:	46bd      	mov	sp, r7
 80088ee:	bd80      	pop	{r7, pc}

080088f0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80088f0:	b580      	push	{r7, lr}
 80088f2:	b084      	sub	sp, #16
 80088f4:	af00      	add	r7, sp, #0
 80088f6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80088fe:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008904:	2b22      	cmp	r3, #34	; 0x22
 8008906:	d151      	bne.n	80089ac <UART_RxISR_8BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800890e:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008910:	89bb      	ldrh	r3, [r7, #12]
 8008912:	b2d9      	uxtb	r1, r3
 8008914:	89fb      	ldrh	r3, [r7, #14]
 8008916:	b2da      	uxtb	r2, r3
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800891c:	400a      	ands	r2, r1
 800891e:	b2d2      	uxtb	r2, r2
 8008920:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008926:	1c5a      	adds	r2, r3, #1
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008932:	b29b      	uxth	r3, r3
 8008934:	3b01      	subs	r3, #1
 8008936:	b29a      	uxth	r2, r3
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008944:	b29b      	uxth	r3, r3
 8008946:	2b00      	cmp	r3, #0
 8008948:	d13a      	bne.n	80089c0 <UART_RxISR_8BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	681a      	ldr	r2, [r3, #0]
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008958:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	689a      	ldr	r2, [r3, #8]
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	f022 0201 	bic.w	r2, r2, #1
 8008968:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	2220      	movs	r2, #32
 800896e:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	2200      	movs	r2, #0
 8008974:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800897a:	2b01      	cmp	r3, #1
 800897c:	d10f      	bne.n	800899e <UART_RxISR_8BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	681a      	ldr	r2, [r3, #0]
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	f022 0210 	bic.w	r2, r2, #16
 800898c:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008994:	4619      	mov	r1, r3
 8008996:	6878      	ldr	r0, [r7, #4]
 8008998:	f7ff fa96 	bl	8007ec8 <HAL_UARTEx_RxEventCallback>
 800899c:	e002      	b.n	80089a4 <UART_RxISR_8BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800899e:	6878      	ldr	r0, [r7, #4]
 80089a0:	f7f8 fb42 	bl	8001028 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	2200      	movs	r2, #0
 80089a8:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80089aa:	e009      	b.n	80089c0 <UART_RxISR_8BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	8b1b      	ldrh	r3, [r3, #24]
 80089b2:	b29a      	uxth	r2, r3
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	f042 0208 	orr.w	r2, r2, #8
 80089bc:	b292      	uxth	r2, r2
 80089be:	831a      	strh	r2, [r3, #24]
}
 80089c0:	bf00      	nop
 80089c2:	3710      	adds	r7, #16
 80089c4:	46bd      	mov	sp, r7
 80089c6:	bd80      	pop	{r7, pc}

080089c8 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80089c8:	b580      	push	{r7, lr}
 80089ca:	b084      	sub	sp, #16
 80089cc:	af00      	add	r7, sp, #0
 80089ce:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80089d6:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80089dc:	2b22      	cmp	r3, #34	; 0x22
 80089de:	d151      	bne.n	8008a84 <UART_RxISR_16BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80089e6:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80089ec:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 80089ee:	89ba      	ldrh	r2, [r7, #12]
 80089f0:	89fb      	ldrh	r3, [r7, #14]
 80089f2:	4013      	ands	r3, r2
 80089f4:	b29a      	uxth	r2, r3
 80089f6:	68bb      	ldr	r3, [r7, #8]
 80089f8:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80089fe:	1c9a      	adds	r2, r3, #2
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008a0a:	b29b      	uxth	r3, r3
 8008a0c:	3b01      	subs	r3, #1
 8008a0e:	b29a      	uxth	r2, r3
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008a1c:	b29b      	uxth	r3, r3
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d13a      	bne.n	8008a98 <UART_RxISR_16BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	681a      	ldr	r2, [r3, #0]
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008a30:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	689a      	ldr	r2, [r3, #8]
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	f022 0201 	bic.w	r2, r2, #1
 8008a40:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	2220      	movs	r2, #32
 8008a46:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	2200      	movs	r2, #0
 8008a4c:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008a52:	2b01      	cmp	r3, #1
 8008a54:	d10f      	bne.n	8008a76 <UART_RxISR_16BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	681a      	ldr	r2, [r3, #0]
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	f022 0210 	bic.w	r2, r2, #16
 8008a64:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008a6c:	4619      	mov	r1, r3
 8008a6e:	6878      	ldr	r0, [r7, #4]
 8008a70:	f7ff fa2a 	bl	8007ec8 <HAL_UARTEx_RxEventCallback>
 8008a74:	e002      	b.n	8008a7c <UART_RxISR_16BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008a76:	6878      	ldr	r0, [r7, #4]
 8008a78:	f7f8 fad6 	bl	8001028 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	2200      	movs	r2, #0
 8008a80:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008a82:	e009      	b.n	8008a98 <UART_RxISR_16BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	8b1b      	ldrh	r3, [r3, #24]
 8008a8a:	b29a      	uxth	r2, r3
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	f042 0208 	orr.w	r2, r2, #8
 8008a94:	b292      	uxth	r2, r2
 8008a96:	831a      	strh	r2, [r3, #24]
}
 8008a98:	bf00      	nop
 8008a9a:	3710      	adds	r7, #16
 8008a9c:	46bd      	mov	sp, r7
 8008a9e:	bd80      	pop	{r7, pc}

08008aa0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008aa0:	b480      	push	{r7}
 8008aa2:	b083      	sub	sp, #12
 8008aa4:	af00      	add	r7, sp, #0
 8008aa6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008aa8:	bf00      	nop
 8008aaa:	370c      	adds	r7, #12
 8008aac:	46bd      	mov	sp, r7
 8008aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab2:	4770      	bx	lr

08008ab4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008ab4:	b084      	sub	sp, #16
 8008ab6:	b580      	push	{r7, lr}
 8008ab8:	b084      	sub	sp, #16
 8008aba:	af00      	add	r7, sp, #0
 8008abc:	6078      	str	r0, [r7, #4]
 8008abe:	f107 001c 	add.w	r0, r7, #28
 8008ac2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;


  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	68db      	ldr	r3, [r3, #12]
 8008aca:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8008ad2:	6878      	ldr	r0, [r7, #4]
 8008ad4:	f000 fa24 	bl	8008f20 <USB_CoreReset>
 8008ad8:	4603      	mov	r3, r0
 8008ada:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8008adc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d106      	bne.n	8008af0 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ae6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	639a      	str	r2, [r3, #56]	; 0x38
 8008aee:	e005      	b.n	8008afc <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008af4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 8008afc:	7bfb      	ldrb	r3, [r7, #15]
}
 8008afe:	4618      	mov	r0, r3
 8008b00:	3710      	adds	r7, #16
 8008b02:	46bd      	mov	sp, r7
 8008b04:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008b08:	b004      	add	sp, #16
 8008b0a:	4770      	bx	lr

08008b0c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008b0c:	b480      	push	{r7}
 8008b0e:	b083      	sub	sp, #12
 8008b10:	af00      	add	r7, sp, #0
 8008b12:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	689b      	ldr	r3, [r3, #8]
 8008b18:	f023 0201 	bic.w	r2, r3, #1
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008b20:	2300      	movs	r3, #0
}
 8008b22:	4618      	mov	r0, r3
 8008b24:	370c      	adds	r7, #12
 8008b26:	46bd      	mov	sp, r7
 8008b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b2c:	4770      	bx	lr

08008b2e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8008b2e:	b580      	push	{r7, lr}
 8008b30:	b082      	sub	sp, #8
 8008b32:	af00      	add	r7, sp, #0
 8008b34:	6078      	str	r0, [r7, #4]
 8008b36:	460b      	mov	r3, r1
 8008b38:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	68db      	ldr	r3, [r3, #12]
 8008b3e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008b46:	78fb      	ldrb	r3, [r7, #3]
 8008b48:	2b01      	cmp	r3, #1
 8008b4a:	d106      	bne.n	8008b5a <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	68db      	ldr	r3, [r3, #12]
 8008b50:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	60da      	str	r2, [r3, #12]
 8008b58:	e00b      	b.n	8008b72 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8008b5a:	78fb      	ldrb	r3, [r7, #3]
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d106      	bne.n	8008b6e <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	68db      	ldr	r3, [r3, #12]
 8008b64:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	60da      	str	r2, [r3, #12]
 8008b6c:	e001      	b.n	8008b72 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8008b6e:	2301      	movs	r3, #1
 8008b70:	e003      	b.n	8008b7a <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8008b72:	2032      	movs	r0, #50	; 0x32
 8008b74:	f7f9 fc18 	bl	80023a8 <HAL_Delay>

  return HAL_OK;
 8008b78:	2300      	movs	r3, #0
}
 8008b7a:	4618      	mov	r0, r3
 8008b7c:	3708      	adds	r7, #8
 8008b7e:	46bd      	mov	sp, r7
 8008b80:	bd80      	pop	{r7, pc}
	...

08008b84 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008b84:	b084      	sub	sp, #16
 8008b86:	b580      	push	{r7, lr}
 8008b88:	b086      	sub	sp, #24
 8008b8a:	af00      	add	r7, sp, #0
 8008b8c:	6078      	str	r0, [r7, #4]
 8008b8e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8008b92:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008b96:	2300      	movs	r3, #0
 8008b98:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8008b9e:	2300      	movs	r3, #0
 8008ba0:	613b      	str	r3, [r7, #16]
 8008ba2:	e009      	b.n	8008bb8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008ba4:	687a      	ldr	r2, [r7, #4]
 8008ba6:	693b      	ldr	r3, [r7, #16]
 8008ba8:	3340      	adds	r3, #64	; 0x40
 8008baa:	009b      	lsls	r3, r3, #2
 8008bac:	4413      	add	r3, r2
 8008bae:	2200      	movs	r2, #0
 8008bb0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8008bb2:	693b      	ldr	r3, [r7, #16]
 8008bb4:	3301      	adds	r3, #1
 8008bb6:	613b      	str	r3, [r7, #16]
 8008bb8:	693b      	ldr	r3, [r7, #16]
 8008bba:	2b0e      	cmp	r3, #14
 8008bbc:	d9f2      	bls.n	8008ba4 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8008bbe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d11c      	bne.n	8008bfe <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008bca:	685b      	ldr	r3, [r3, #4]
 8008bcc:	68fa      	ldr	r2, [r7, #12]
 8008bce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008bd2:	f043 0302 	orr.w	r3, r3, #2
 8008bd6:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bdc:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	601a      	str	r2, [r3, #0]
 8008bfc:	e005      	b.n	8008c0a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c02:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008c10:	461a      	mov	r2, r3
 8008c12:	2300      	movs	r3, #0
 8008c14:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c1c:	4619      	mov	r1, r3
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c24:	461a      	mov	r2, r3
 8008c26:	680b      	ldr	r3, [r1, #0]
 8008c28:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008c2a:	2103      	movs	r1, #3
 8008c2c:	6878      	ldr	r0, [r7, #4]
 8008c2e:	f000 f93d 	bl	8008eac <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008c32:	2110      	movs	r1, #16
 8008c34:	6878      	ldr	r0, [r7, #4]
 8008c36:	f000 f8f1 	bl	8008e1c <USB_FlushTxFifo>
 8008c3a:	4603      	mov	r3, r0
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d001      	beq.n	8008c44 <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 8008c40:	2301      	movs	r3, #1
 8008c42:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008c44:	6878      	ldr	r0, [r7, #4]
 8008c46:	f000 f90f 	bl	8008e68 <USB_FlushRxFifo>
 8008c4a:	4603      	mov	r3, r0
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d001      	beq.n	8008c54 <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 8008c50:	2301      	movs	r3, #1
 8008c52:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c5a:	461a      	mov	r2, r3
 8008c5c:	2300      	movs	r3, #0
 8008c5e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c66:	461a      	mov	r2, r3
 8008c68:	2300      	movs	r3, #0
 8008c6a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c72:	461a      	mov	r2, r3
 8008c74:	2300      	movs	r3, #0
 8008c76:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008c78:	2300      	movs	r3, #0
 8008c7a:	613b      	str	r3, [r7, #16]
 8008c7c:	e043      	b.n	8008d06 <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008c7e:	693b      	ldr	r3, [r7, #16]
 8008c80:	015a      	lsls	r2, r3, #5
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	4413      	add	r3, r2
 8008c86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008c90:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008c94:	d118      	bne.n	8008cc8 <USB_DevInit+0x144>
    {
      if (i == 0U)
 8008c96:	693b      	ldr	r3, [r7, #16]
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d10a      	bne.n	8008cb2 <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008c9c:	693b      	ldr	r3, [r7, #16]
 8008c9e:	015a      	lsls	r2, r3, #5
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	4413      	add	r3, r2
 8008ca4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ca8:	461a      	mov	r2, r3
 8008caa:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008cae:	6013      	str	r3, [r2, #0]
 8008cb0:	e013      	b.n	8008cda <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8008cb2:	693b      	ldr	r3, [r7, #16]
 8008cb4:	015a      	lsls	r2, r3, #5
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	4413      	add	r3, r2
 8008cba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008cbe:	461a      	mov	r2, r3
 8008cc0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008cc4:	6013      	str	r3, [r2, #0]
 8008cc6:	e008      	b.n	8008cda <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008cc8:	693b      	ldr	r3, [r7, #16]
 8008cca:	015a      	lsls	r2, r3, #5
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	4413      	add	r3, r2
 8008cd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008cd4:	461a      	mov	r2, r3
 8008cd6:	2300      	movs	r3, #0
 8008cd8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008cda:	693b      	ldr	r3, [r7, #16]
 8008cdc:	015a      	lsls	r2, r3, #5
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	4413      	add	r3, r2
 8008ce2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ce6:	461a      	mov	r2, r3
 8008ce8:	2300      	movs	r3, #0
 8008cea:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008cec:	693b      	ldr	r3, [r7, #16]
 8008cee:	015a      	lsls	r2, r3, #5
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	4413      	add	r3, r2
 8008cf4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008cf8:	461a      	mov	r2, r3
 8008cfa:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008cfe:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008d00:	693b      	ldr	r3, [r7, #16]
 8008d02:	3301      	adds	r3, #1
 8008d04:	613b      	str	r3, [r7, #16]
 8008d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d08:	693a      	ldr	r2, [r7, #16]
 8008d0a:	429a      	cmp	r2, r3
 8008d0c:	d3b7      	bcc.n	8008c7e <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008d0e:	2300      	movs	r3, #0
 8008d10:	613b      	str	r3, [r7, #16]
 8008d12:	e043      	b.n	8008d9c <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008d14:	693b      	ldr	r3, [r7, #16]
 8008d16:	015a      	lsls	r2, r3, #5
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	4413      	add	r3, r2
 8008d1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008d26:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008d2a:	d118      	bne.n	8008d5e <USB_DevInit+0x1da>
    {
      if (i == 0U)
 8008d2c:	693b      	ldr	r3, [r7, #16]
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d10a      	bne.n	8008d48 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008d32:	693b      	ldr	r3, [r7, #16]
 8008d34:	015a      	lsls	r2, r3, #5
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	4413      	add	r3, r2
 8008d3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d3e:	461a      	mov	r2, r3
 8008d40:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008d44:	6013      	str	r3, [r2, #0]
 8008d46:	e013      	b.n	8008d70 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008d48:	693b      	ldr	r3, [r7, #16]
 8008d4a:	015a      	lsls	r2, r3, #5
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	4413      	add	r3, r2
 8008d50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d54:	461a      	mov	r2, r3
 8008d56:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008d5a:	6013      	str	r3, [r2, #0]
 8008d5c:	e008      	b.n	8008d70 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8008d5e:	693b      	ldr	r3, [r7, #16]
 8008d60:	015a      	lsls	r2, r3, #5
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	4413      	add	r3, r2
 8008d66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d6a:	461a      	mov	r2, r3
 8008d6c:	2300      	movs	r3, #0
 8008d6e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008d70:	693b      	ldr	r3, [r7, #16]
 8008d72:	015a      	lsls	r2, r3, #5
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	4413      	add	r3, r2
 8008d78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d7c:	461a      	mov	r2, r3
 8008d7e:	2300      	movs	r3, #0
 8008d80:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008d82:	693b      	ldr	r3, [r7, #16]
 8008d84:	015a      	lsls	r2, r3, #5
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	4413      	add	r3, r2
 8008d8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d8e:	461a      	mov	r2, r3
 8008d90:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008d94:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008d96:	693b      	ldr	r3, [r7, #16]
 8008d98:	3301      	adds	r3, #1
 8008d9a:	613b      	str	r3, [r7, #16]
 8008d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d9e:	693a      	ldr	r2, [r7, #16]
 8008da0:	429a      	cmp	r2, r3
 8008da2:	d3b7      	bcc.n	8008d14 <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008daa:	691b      	ldr	r3, [r3, #16]
 8008dac:	68fa      	ldr	r2, [r7, #12]
 8008dae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008db2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008db6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	2200      	movs	r2, #0
 8008dbc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8008dc4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	699b      	ldr	r3, [r3, #24]
 8008dca:	f043 0210 	orr.w	r2, r3, #16
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	699a      	ldr	r2, [r3, #24]
 8008dd6:	4b10      	ldr	r3, [pc, #64]	; (8008e18 <USB_DevInit+0x294>)
 8008dd8:	4313      	orrs	r3, r2
 8008dda:	687a      	ldr	r2, [r7, #4]
 8008ddc:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008dde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d005      	beq.n	8008df0 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	699b      	ldr	r3, [r3, #24]
 8008de8:	f043 0208 	orr.w	r2, r3, #8
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8008df0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008df2:	2b01      	cmp	r3, #1
 8008df4:	d107      	bne.n	8008e06 <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	699b      	ldr	r3, [r3, #24]
 8008dfa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008dfe:	f043 0304 	orr.w	r3, r3, #4
 8008e02:	687a      	ldr	r2, [r7, #4]
 8008e04:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008e06:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e08:	4618      	mov	r0, r3
 8008e0a:	3718      	adds	r7, #24
 8008e0c:	46bd      	mov	sp, r7
 8008e0e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008e12:	b004      	add	sp, #16
 8008e14:	4770      	bx	lr
 8008e16:	bf00      	nop
 8008e18:	803c3800 	.word	0x803c3800

08008e1c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008e1c:	b480      	push	{r7}
 8008e1e:	b085      	sub	sp, #20
 8008e20:	af00      	add	r7, sp, #0
 8008e22:	6078      	str	r0, [r7, #4]
 8008e24:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8008e26:	2300      	movs	r3, #0
 8008e28:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008e2a:	683b      	ldr	r3, [r7, #0]
 8008e2c:	019b      	lsls	r3, r3, #6
 8008e2e:	f043 0220 	orr.w	r2, r3, #32
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	3301      	adds	r3, #1
 8008e3a:	60fb      	str	r3, [r7, #12]
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	4a09      	ldr	r2, [pc, #36]	; (8008e64 <USB_FlushTxFifo+0x48>)
 8008e40:	4293      	cmp	r3, r2
 8008e42:	d901      	bls.n	8008e48 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8008e44:	2303      	movs	r3, #3
 8008e46:	e006      	b.n	8008e56 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	691b      	ldr	r3, [r3, #16]
 8008e4c:	f003 0320 	and.w	r3, r3, #32
 8008e50:	2b20      	cmp	r3, #32
 8008e52:	d0f0      	beq.n	8008e36 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8008e54:	2300      	movs	r3, #0
}
 8008e56:	4618      	mov	r0, r3
 8008e58:	3714      	adds	r7, #20
 8008e5a:	46bd      	mov	sp, r7
 8008e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e60:	4770      	bx	lr
 8008e62:	bf00      	nop
 8008e64:	00030d40 	.word	0x00030d40

08008e68 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008e68:	b480      	push	{r7}
 8008e6a:	b085      	sub	sp, #20
 8008e6c:	af00      	add	r7, sp, #0
 8008e6e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8008e70:	2300      	movs	r3, #0
 8008e72:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	2210      	movs	r2, #16
 8008e78:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	3301      	adds	r3, #1
 8008e7e:	60fb      	str	r3, [r7, #12]
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	4a09      	ldr	r2, [pc, #36]	; (8008ea8 <USB_FlushRxFifo+0x40>)
 8008e84:	4293      	cmp	r3, r2
 8008e86:	d901      	bls.n	8008e8c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8008e88:	2303      	movs	r3, #3
 8008e8a:	e006      	b.n	8008e9a <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	691b      	ldr	r3, [r3, #16]
 8008e90:	f003 0310 	and.w	r3, r3, #16
 8008e94:	2b10      	cmp	r3, #16
 8008e96:	d0f0      	beq.n	8008e7a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8008e98:	2300      	movs	r3, #0
}
 8008e9a:	4618      	mov	r0, r3
 8008e9c:	3714      	adds	r7, #20
 8008e9e:	46bd      	mov	sp, r7
 8008ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ea4:	4770      	bx	lr
 8008ea6:	bf00      	nop
 8008ea8:	00030d40 	.word	0x00030d40

08008eac <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008eac:	b480      	push	{r7}
 8008eae:	b085      	sub	sp, #20
 8008eb0:	af00      	add	r7, sp, #0
 8008eb2:	6078      	str	r0, [r7, #4]
 8008eb4:	460b      	mov	r3, r1
 8008eb6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ec2:	681a      	ldr	r2, [r3, #0]
 8008ec4:	78fb      	ldrb	r3, [r7, #3]
 8008ec6:	68f9      	ldr	r1, [r7, #12]
 8008ec8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008ecc:	4313      	orrs	r3, r2
 8008ece:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008ed0:	2300      	movs	r3, #0
}
 8008ed2:	4618      	mov	r0, r3
 8008ed4:	3714      	adds	r7, #20
 8008ed6:	46bd      	mov	sp, r7
 8008ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008edc:	4770      	bx	lr

08008ede <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008ede:	b480      	push	{r7}
 8008ee0:	b085      	sub	sp, #20
 8008ee2:	af00      	add	r7, sp, #0
 8008ee4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	68fa      	ldr	r2, [r7, #12]
 8008ef4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008ef8:	f023 0303 	bic.w	r3, r3, #3
 8008efc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f04:	685b      	ldr	r3, [r3, #4]
 8008f06:	68fa      	ldr	r2, [r7, #12]
 8008f08:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008f0c:	f043 0302 	orr.w	r3, r3, #2
 8008f10:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008f12:	2300      	movs	r3, #0
}
 8008f14:	4618      	mov	r0, r3
 8008f16:	3714      	adds	r7, #20
 8008f18:	46bd      	mov	sp, r7
 8008f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f1e:	4770      	bx	lr

08008f20 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008f20:	b480      	push	{r7}
 8008f22:	b085      	sub	sp, #20
 8008f24:	af00      	add	r7, sp, #0
 8008f26:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8008f28:	2300      	movs	r3, #0
 8008f2a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	3301      	adds	r3, #1
 8008f30:	60fb      	str	r3, [r7, #12]
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	4a13      	ldr	r2, [pc, #76]	; (8008f84 <USB_CoreReset+0x64>)
 8008f36:	4293      	cmp	r3, r2
 8008f38:	d901      	bls.n	8008f3e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008f3a:	2303      	movs	r3, #3
 8008f3c:	e01b      	b.n	8008f76 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	691b      	ldr	r3, [r3, #16]
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	daf2      	bge.n	8008f2c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008f46:	2300      	movs	r3, #0
 8008f48:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	691b      	ldr	r3, [r3, #16]
 8008f4e:	f043 0201 	orr.w	r2, r3, #1
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	3301      	adds	r3, #1
 8008f5a:	60fb      	str	r3, [r7, #12]
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	4a09      	ldr	r2, [pc, #36]	; (8008f84 <USB_CoreReset+0x64>)
 8008f60:	4293      	cmp	r3, r2
 8008f62:	d901      	bls.n	8008f68 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008f64:	2303      	movs	r3, #3
 8008f66:	e006      	b.n	8008f76 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	691b      	ldr	r3, [r3, #16]
 8008f6c:	f003 0301 	and.w	r3, r3, #1
 8008f70:	2b01      	cmp	r3, #1
 8008f72:	d0f0      	beq.n	8008f56 <USB_CoreReset+0x36>

  return HAL_OK;
 8008f74:	2300      	movs	r3, #0
}
 8008f76:	4618      	mov	r0, r3
 8008f78:	3714      	adds	r7, #20
 8008f7a:	46bd      	mov	sp, r7
 8008f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f80:	4770      	bx	lr
 8008f82:	bf00      	nop
 8008f84:	00030d40 	.word	0x00030d40

08008f88 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8008f88:	b580      	push	{r7, lr}
 8008f8a:	b08a      	sub	sp, #40	; 0x28
 8008f8c:	af00      	add	r7, sp, #0
 8008f8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8008f90:	4b27      	ldr	r3, [pc, #156]	; (8009030 <I2Cx_MspInit+0xa8>)
 8008f92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008f94:	4a26      	ldr	r2, [pc, #152]	; (8009030 <I2Cx_MspInit+0xa8>)
 8008f96:	f043 0302 	orr.w	r3, r3, #2
 8008f9a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008f9c:	4b24      	ldr	r3, [pc, #144]	; (8009030 <I2Cx_MspInit+0xa8>)
 8008f9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008fa0:	f003 0302 	and.w	r3, r3, #2
 8008fa4:	613b      	str	r3, [r7, #16]
 8008fa6:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 8008fa8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8008fac:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8008fae:	2312      	movs	r3, #18
 8008fb0:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8008fb2:	2301      	movs	r3, #1
 8008fb4:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008fb6:	2303      	movs	r3, #3
 8008fb8:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 8008fba:	2304      	movs	r3, #4
 8008fbc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8008fbe:	f107 0314 	add.w	r3, r7, #20
 8008fc2:	4619      	mov	r1, r3
 8008fc4:	481b      	ldr	r0, [pc, #108]	; (8009034 <I2Cx_MspInit+0xac>)
 8008fc6:	f7f9 fcb3 	bl	8002930 <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8008fca:	f107 0314 	add.w	r3, r7, #20
 8008fce:	4619      	mov	r1, r3
 8008fd0:	4818      	ldr	r0, [pc, #96]	; (8009034 <I2Cx_MspInit+0xac>)
 8008fd2:	f7f9 fcad 	bl	8002930 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 8008fd6:	4b16      	ldr	r3, [pc, #88]	; (8009030 <I2Cx_MspInit+0xa8>)
 8008fd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008fda:	4a15      	ldr	r2, [pc, #84]	; (8009030 <I2Cx_MspInit+0xa8>)
 8008fdc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8008fe0:	6593      	str	r3, [r2, #88]	; 0x58
 8008fe2:	4b13      	ldr	r3, [pc, #76]	; (8009030 <I2Cx_MspInit+0xa8>)
 8008fe4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008fe6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008fea:	60fb      	str	r3, [r7, #12]
 8008fec:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 8008fee:	4b10      	ldr	r3, [pc, #64]	; (8009030 <I2Cx_MspInit+0xa8>)
 8008ff0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ff2:	4a0f      	ldr	r2, [pc, #60]	; (8009030 <I2Cx_MspInit+0xa8>)
 8008ff4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8008ff8:	6393      	str	r3, [r2, #56]	; 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 8008ffa:	4b0d      	ldr	r3, [pc, #52]	; (8009030 <I2Cx_MspInit+0xa8>)
 8008ffc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ffe:	4a0c      	ldr	r2, [pc, #48]	; (8009030 <I2Cx_MspInit+0xa8>)
 8009000:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8009004:	6393      	str	r3, [r2, #56]	; 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 8009006:	2200      	movs	r2, #0
 8009008:	210f      	movs	r1, #15
 800900a:	2021      	movs	r0, #33	; 0x21
 800900c:	f7f9 facc 	bl	80025a8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8009010:	2021      	movs	r0, #33	; 0x21
 8009012:	f7f9 fae5 	bl	80025e0 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 8009016:	2200      	movs	r2, #0
 8009018:	210f      	movs	r1, #15
 800901a:	2022      	movs	r0, #34	; 0x22
 800901c:	f7f9 fac4 	bl	80025a8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 8009020:	2022      	movs	r0, #34	; 0x22
 8009022:	f7f9 fadd 	bl	80025e0 <HAL_NVIC_EnableIRQ>
}
 8009026:	bf00      	nop
 8009028:	3728      	adds	r7, #40	; 0x28
 800902a:	46bd      	mov	sp, r7
 800902c:	bd80      	pop	{r7, pc}
 800902e:	bf00      	nop
 8009030:	40021000 	.word	0x40021000
 8009034:	48000400 	.word	0x48000400

08009038 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8009038:	b580      	push	{r7, lr}
 800903a:	b082      	sub	sp, #8
 800903c:	af00      	add	r7, sp, #0
 800903e:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	4a12      	ldr	r2, [pc, #72]	; (800908c <I2Cx_Init+0x54>)
 8009044:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	4a11      	ldr	r2, [pc, #68]	; (8009090 <I2Cx_Init+0x58>)
 800904a:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	2200      	movs	r2, #0
 8009050:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	2201      	movs	r2, #1
 8009056:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	2200      	movs	r2, #0
 800905c:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	2200      	movs	r2, #0
 8009062:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	2200      	movs	r2, #0
 8009068:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	2200      	movs	r2, #0
 800906e:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 8009070:	6878      	ldr	r0, [r7, #4]
 8009072:	f7ff ff89 	bl	8008f88 <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 8009076:	6878      	ldr	r0, [r7, #4]
 8009078:	f7f9 ff40 	bl	8002efc <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 800907c:	2100      	movs	r1, #0
 800907e:	6878      	ldr	r0, [r7, #4]
 8009080:	f7fa fc44 	bl	800390c <HAL_I2CEx_ConfigAnalogFilter>
}
 8009084:	bf00      	nop
 8009086:	3708      	adds	r7, #8
 8009088:	46bd      	mov	sp, r7
 800908a:	bd80      	pop	{r7, pc}
 800908c:	40005800 	.word	0x40005800
 8009090:	00702681 	.word	0x00702681

08009094 <I2Cx_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8009094:	b580      	push	{r7, lr}
 8009096:	b08a      	sub	sp, #40	; 0x28
 8009098:	af04      	add	r7, sp, #16
 800909a:	60f8      	str	r0, [r7, #12]
 800909c:	4608      	mov	r0, r1
 800909e:	4611      	mov	r1, r2
 80090a0:	461a      	mov	r2, r3
 80090a2:	4603      	mov	r3, r0
 80090a4:	72fb      	strb	r3, [r7, #11]
 80090a6:	460b      	mov	r3, r1
 80090a8:	813b      	strh	r3, [r7, #8]
 80090aa:	4613      	mov	r3, r2
 80090ac:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80090ae:	2300      	movs	r3, #0
 80090b0:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80090b2:	7afb      	ldrb	r3, [r7, #11]
 80090b4:	b299      	uxth	r1, r3
 80090b6:	88f8      	ldrh	r0, [r7, #6]
 80090b8:	893a      	ldrh	r2, [r7, #8]
 80090ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80090be:	9302      	str	r3, [sp, #8]
 80090c0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80090c2:	9301      	str	r3, [sp, #4]
 80090c4:	6a3b      	ldr	r3, [r7, #32]
 80090c6:	9300      	str	r3, [sp, #0]
 80090c8:	4603      	mov	r3, r0
 80090ca:	68f8      	ldr	r0, [r7, #12]
 80090cc:	f7fa f8e8 	bl	80032a0 <HAL_I2C_Mem_Read>
 80090d0:	4603      	mov	r3, r0
 80090d2:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 80090d4:	7dfb      	ldrb	r3, [r7, #23]
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d004      	beq.n	80090e4 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 80090da:	7afb      	ldrb	r3, [r7, #11]
 80090dc:	4619      	mov	r1, r3
 80090de:	68f8      	ldr	r0, [r7, #12]
 80090e0:	f000 f832 	bl	8009148 <I2Cx_Error>
  }
  return status;
 80090e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80090e6:	4618      	mov	r0, r3
 80090e8:	3718      	adds	r7, #24
 80090ea:	46bd      	mov	sp, r7
 80090ec:	bd80      	pop	{r7, pc}

080090ee <I2Cx_WriteMultiple>:
  * @param  Buffer  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 80090ee:	b580      	push	{r7, lr}
 80090f0:	b08a      	sub	sp, #40	; 0x28
 80090f2:	af04      	add	r7, sp, #16
 80090f4:	60f8      	str	r0, [r7, #12]
 80090f6:	4608      	mov	r0, r1
 80090f8:	4611      	mov	r1, r2
 80090fa:	461a      	mov	r2, r3
 80090fc:	4603      	mov	r3, r0
 80090fe:	72fb      	strb	r3, [r7, #11]
 8009100:	460b      	mov	r3, r1
 8009102:	813b      	strh	r3, [r7, #8]
 8009104:	4613      	mov	r3, r2
 8009106:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8009108:	2300      	movs	r3, #0
 800910a:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800910c:	7afb      	ldrb	r3, [r7, #11]
 800910e:	b299      	uxth	r1, r3
 8009110:	88f8      	ldrh	r0, [r7, #6]
 8009112:	893a      	ldrh	r2, [r7, #8]
 8009114:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8009118:	9302      	str	r3, [sp, #8]
 800911a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800911c:	9301      	str	r3, [sp, #4]
 800911e:	6a3b      	ldr	r3, [r7, #32]
 8009120:	9300      	str	r3, [sp, #0]
 8009122:	4603      	mov	r3, r0
 8009124:	68f8      	ldr	r0, [r7, #12]
 8009126:	f7f9 ffa7 	bl	8003078 <HAL_I2C_Mem_Write>
 800912a:	4603      	mov	r3, r0
 800912c:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 800912e:	7dfb      	ldrb	r3, [r7, #23]
 8009130:	2b00      	cmp	r3, #0
 8009132:	d004      	beq.n	800913e <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8009134:	7afb      	ldrb	r3, [r7, #11]
 8009136:	4619      	mov	r1, r3
 8009138:	68f8      	ldr	r0, [r7, #12]
 800913a:	f000 f805 	bl	8009148 <I2Cx_Error>
  }
  return status;
 800913e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009140:	4618      	mov	r0, r3
 8009142:	3718      	adds	r7, #24
 8009144:	46bd      	mov	sp, r7
 8009146:	bd80      	pop	{r7, pc}

08009148 <I2Cx_Error>:
  * @param  i2c_handler  I2C handler
  * @param  Addr  I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8009148:	b580      	push	{r7, lr}
 800914a:	b082      	sub	sp, #8
 800914c:	af00      	add	r7, sp, #0
 800914e:	6078      	str	r0, [r7, #4]
 8009150:	460b      	mov	r3, r1
 8009152:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8009154:	6878      	ldr	r0, [r7, #4]
 8009156:	f7f9 ff60 	bl	800301a <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 800915a:	6878      	ldr	r0, [r7, #4]
 800915c:	f7ff ff6c 	bl	8009038 <I2Cx_Init>
}
 8009160:	bf00      	nop
 8009162:	3708      	adds	r7, #8
 8009164:	46bd      	mov	sp, r7
 8009166:	bd80      	pop	{r7, pc}

08009168 <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 8009168:	b580      	push	{r7, lr}
 800916a:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 800916c:	4802      	ldr	r0, [pc, #8]	; (8009178 <SENSOR_IO_Init+0x10>)
 800916e:	f7ff ff63 	bl	8009038 <I2Cx_Init>
}
 8009172:	bf00      	nop
 8009174:	bd80      	pop	{r7, pc}
 8009176:	bf00      	nop
 8009178:	2000083c 	.word	0x2000083c

0800917c <SENSOR_IO_Write>:
  * @param  Reg  Reg address
  * @param  Value  Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 800917c:	b580      	push	{r7, lr}
 800917e:	b084      	sub	sp, #16
 8009180:	af02      	add	r7, sp, #8
 8009182:	4603      	mov	r3, r0
 8009184:	71fb      	strb	r3, [r7, #7]
 8009186:	460b      	mov	r3, r1
 8009188:	71bb      	strb	r3, [r7, #6]
 800918a:	4613      	mov	r3, r2
 800918c:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 800918e:	79bb      	ldrb	r3, [r7, #6]
 8009190:	b29a      	uxth	r2, r3
 8009192:	79f9      	ldrb	r1, [r7, #7]
 8009194:	2301      	movs	r3, #1
 8009196:	9301      	str	r3, [sp, #4]
 8009198:	1d7b      	adds	r3, r7, #5
 800919a:	9300      	str	r3, [sp, #0]
 800919c:	2301      	movs	r3, #1
 800919e:	4803      	ldr	r0, [pc, #12]	; (80091ac <SENSOR_IO_Write+0x30>)
 80091a0:	f7ff ffa5 	bl	80090ee <I2Cx_WriteMultiple>
}
 80091a4:	bf00      	nop
 80091a6:	3708      	adds	r7, #8
 80091a8:	46bd      	mov	sp, r7
 80091aa:	bd80      	pop	{r7, pc}
 80091ac:	2000083c 	.word	0x2000083c

080091b0 <SENSOR_IO_Read>:
  * @param  Addr  I2C address
  * @param  Reg  Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 80091b0:	b580      	push	{r7, lr}
 80091b2:	b086      	sub	sp, #24
 80091b4:	af02      	add	r7, sp, #8
 80091b6:	4603      	mov	r3, r0
 80091b8:	460a      	mov	r2, r1
 80091ba:	71fb      	strb	r3, [r7, #7]
 80091bc:	4613      	mov	r3, r2
 80091be:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 80091c0:	2300      	movs	r3, #0
 80091c2:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 80091c4:	79bb      	ldrb	r3, [r7, #6]
 80091c6:	b29a      	uxth	r2, r3
 80091c8:	79f9      	ldrb	r1, [r7, #7]
 80091ca:	2301      	movs	r3, #1
 80091cc:	9301      	str	r3, [sp, #4]
 80091ce:	f107 030f 	add.w	r3, r7, #15
 80091d2:	9300      	str	r3, [sp, #0]
 80091d4:	2301      	movs	r3, #1
 80091d6:	4804      	ldr	r0, [pc, #16]	; (80091e8 <SENSOR_IO_Read+0x38>)
 80091d8:	f7ff ff5c 	bl	8009094 <I2Cx_ReadMultiple>

  return read_value;
 80091dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80091de:	4618      	mov	r0, r3
 80091e0:	3710      	adds	r7, #16
 80091e2:	46bd      	mov	sp, r7
 80091e4:	bd80      	pop	{r7, pc}
 80091e6:	bf00      	nop
 80091e8:	2000083c 	.word	0x2000083c

080091ec <SENSOR_IO_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 80091ec:	b580      	push	{r7, lr}
 80091ee:	b084      	sub	sp, #16
 80091f0:	af02      	add	r7, sp, #8
 80091f2:	603a      	str	r2, [r7, #0]
 80091f4:	461a      	mov	r2, r3
 80091f6:	4603      	mov	r3, r0
 80091f8:	71fb      	strb	r3, [r7, #7]
 80091fa:	460b      	mov	r3, r1
 80091fc:	71bb      	strb	r3, [r7, #6]
 80091fe:	4613      	mov	r3, r2
 8009200:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 8009202:	79bb      	ldrb	r3, [r7, #6]
 8009204:	b29a      	uxth	r2, r3
 8009206:	79f9      	ldrb	r1, [r7, #7]
 8009208:	88bb      	ldrh	r3, [r7, #4]
 800920a:	9301      	str	r3, [sp, #4]
 800920c:	683b      	ldr	r3, [r7, #0]
 800920e:	9300      	str	r3, [sp, #0]
 8009210:	2301      	movs	r3, #1
 8009212:	4804      	ldr	r0, [pc, #16]	; (8009224 <SENSOR_IO_ReadMultiple+0x38>)
 8009214:	f7ff ff3e 	bl	8009094 <I2Cx_ReadMultiple>
 8009218:	4603      	mov	r3, r0
 800921a:	b29b      	uxth	r3, r3
}
 800921c:	4618      	mov	r0, r3
 800921e:	3708      	adds	r7, #8
 8009220:	46bd      	mov	sp, r7
 8009222:	bd80      	pop	{r7, pc}
 8009224:	2000083c 	.word	0x2000083c

08009228 <BSP_ACCELERO_Init>:
/**
  * @brief  Initialize the ACCELERO.
  * @retval ACCELERO_OK or ACCELERO_ERROR
  */
ACCELERO_StatusTypeDef BSP_ACCELERO_Init(void)
{  
 8009228:	b580      	push	{r7, lr}
 800922a:	b084      	sub	sp, #16
 800922c:	af00      	add	r7, sp, #0
  ACCELERO_StatusTypeDef ret = ACCELERO_OK;
 800922e:	2300      	movs	r3, #0
 8009230:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 8009232:	2300      	movs	r3, #0
 8009234:	81bb      	strh	r3, [r7, #12]
  ACCELERO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslAccDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 8009236:	4b19      	ldr	r3, [pc, #100]	; (800929c <BSP_ACCELERO_Init+0x74>)
 8009238:	689b      	ldr	r3, [r3, #8]
 800923a:	4798      	blx	r3
 800923c:	4603      	mov	r3, r0
 800923e:	2b6a      	cmp	r3, #106	; 0x6a
 8009240:	d002      	beq.n	8009248 <BSP_ACCELERO_Init+0x20>
  {
    ret = ACCELERO_ERROR;
 8009242:	2301      	movs	r3, #1
 8009244:	73fb      	strb	r3, [r7, #15]
 8009246:	e024      	b.n	8009292 <BSP_ACCELERO_Init+0x6a>
  }
  else
  {
    /* Initialize the ACCELERO accelerometer driver structure */
    AccelerometerDrv = &Lsm6dslAccDrv;
 8009248:	4b15      	ldr	r3, [pc, #84]	; (80092a0 <BSP_ACCELERO_Init+0x78>)
 800924a:	4a14      	ldr	r2, [pc, #80]	; (800929c <BSP_ACCELERO_Init+0x74>)
 800924c:	601a      	str	r2, [r3, #0]
  
    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the ACCELERO accelerometer structure */
    LSM6DSL_InitStructure.AccOutput_DataRate = LSM6DSL_ODR_52Hz;
 800924e:	2330      	movs	r3, #48	; 0x30
 8009250:	717b      	strb	r3, [r7, #5]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 8009252:	2300      	movs	r3, #0
 8009254:	71bb      	strb	r3, [r7, #6]
    LSM6DSL_InitStructure.AccFull_Scale = LSM6DSL_ACC_FULLSCALE_2G;
 8009256:	2300      	movs	r3, #0
 8009258:	72bb      	strb	r3, [r7, #10]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 800925a:	2340      	movs	r3, #64	; 0x40
 800925c:	723b      	strb	r3, [r7, #8]
    LSM6DSL_InitStructure.High_Resolution = 0;
 800925e:	2300      	movs	r3, #0
 8009260:	71fb      	strb	r3, [r7, #7]
    LSM6DSL_InitStructure.Communication_Mode = 0;
 8009262:	2300      	movs	r3, #0
 8009264:	72fb      	strb	r3, [r7, #11]
        
    /* Configure MEMS: data rate, full scale  */
    ctrl =  (LSM6DSL_InitStructure.AccOutput_DataRate | LSM6DSL_InitStructure.AccFull_Scale);
 8009266:	797a      	ldrb	r2, [r7, #5]
 8009268:	7abb      	ldrb	r3, [r7, #10]
 800926a:	4313      	orrs	r3, r2
 800926c:	b2db      	uxtb	r3, r3
 800926e:	81bb      	strh	r3, [r7, #12]
    
    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);
 8009270:	7a3b      	ldrb	r3, [r7, #8]
 8009272:	f043 0304 	orr.w	r3, r3, #4
 8009276:	b2db      	uxtb	r3, r3
 8009278:	021b      	lsls	r3, r3, #8
 800927a:	b21a      	sxth	r2, r3
 800927c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8009280:	4313      	orrs	r3, r2
 8009282:	b21b      	sxth	r3, r3
 8009284:	81bb      	strh	r3, [r7, #12]

    /* Configure the ACCELERO accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 8009286:	4b06      	ldr	r3, [pc, #24]	; (80092a0 <BSP_ACCELERO_Init+0x78>)
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	89ba      	ldrh	r2, [r7, #12]
 800928e:	4610      	mov	r0, r2
 8009290:	4798      	blx	r3
  }  

  return ret;
 8009292:	7bfb      	ldrb	r3, [r7, #15]
}
 8009294:	4618      	mov	r0, r3
 8009296:	3710      	adds	r7, #16
 8009298:	46bd      	mov	sp, r7
 800929a:	bd80      	pop	{r7, pc}
 800929c:	20000010 	.word	0x20000010
 80092a0:	20000888 	.word	0x20000888

080092a4 <BSP_ACCELERO_AccGetXYZ>:
  * @param  pDataXYZ Pointer on 3 angular accelerations table with  
  *                  pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis
  * @retval None
  */
void BSP_ACCELERO_AccGetXYZ(int16_t *pDataXYZ)
{
 80092a4:	b580      	push	{r7, lr}
 80092a6:	b082      	sub	sp, #8
 80092a8:	af00      	add	r7, sp, #0
 80092aa:	6078      	str	r0, [r7, #4]
  if(AccelerometerDrv != NULL)
 80092ac:	4b08      	ldr	r3, [pc, #32]	; (80092d0 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d009      	beq.n	80092c8 <BSP_ACCELERO_AccGetXYZ+0x24>
  {
    if(AccelerometerDrv->GetXYZ != NULL)
 80092b4:	4b06      	ldr	r3, [pc, #24]	; (80092d0 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d004      	beq.n	80092c8 <BSP_ACCELERO_AccGetXYZ+0x24>
    {   
      AccelerometerDrv->GetXYZ(pDataXYZ);
 80092be:	4b04      	ldr	r3, [pc, #16]	; (80092d0 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092c4:	6878      	ldr	r0, [r7, #4]
 80092c6:	4798      	blx	r3
    }
  }
}
 80092c8:	bf00      	nop
 80092ca:	3708      	adds	r7, #8
 80092cc:	46bd      	mov	sp, r7
 80092ce:	bd80      	pop	{r7, pc}
 80092d0:	20000888 	.word	0x20000888

080092d4 <LSM6DSL_AccInit>:
/**
  * @brief  Set LSM6DSL Accelerometer Initialization.
  * @param  InitStruct: Init parameters
  */
void LSM6DSL_AccInit(uint16_t InitStruct)
{  
 80092d4:	b580      	push	{r7, lr}
 80092d6:	b084      	sub	sp, #16
 80092d8:	af00      	add	r7, sp, #0
 80092da:	4603      	mov	r3, r0
 80092dc:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 80092de:	2300      	movs	r3, #0
 80092e0:	73fb      	strb	r3, [r7, #15]
  uint8_t tmp;

  /* Read CTRL1_XL */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 80092e2:	2110      	movs	r1, #16
 80092e4:	20d4      	movs	r0, #212	; 0xd4
 80092e6:	f7ff ff63 	bl	80091b0 <SENSOR_IO_Read>
 80092ea:	4603      	mov	r3, r0
 80092ec:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL1_XL register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
 80092ee:	88fb      	ldrh	r3, [r7, #6]
 80092f0:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0xFC);
 80092f2:	7bbb      	ldrb	r3, [r7, #14]
 80092f4:	f003 0303 	and.w	r3, r3, #3
 80092f8:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl;
 80092fa:	7bba      	ldrb	r2, [r7, #14]
 80092fc:	7bfb      	ldrb	r3, [r7, #15]
 80092fe:	4313      	orrs	r3, r2
 8009300:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, tmp);
 8009302:	7bbb      	ldrb	r3, [r7, #14]
 8009304:	461a      	mov	r2, r3
 8009306:	2110      	movs	r1, #16
 8009308:	20d4      	movs	r0, #212	; 0xd4
 800930a:	f7ff ff37 	bl	800917c <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 800930e:	2112      	movs	r1, #18
 8009310:	20d4      	movs	r0, #212	; 0xd4
 8009312:	f7ff ff4d 	bl	80091b0 <SENSOR_IO_Read>
 8009316:	4603      	mov	r3, r0
 8009318:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
 800931a:	88fb      	ldrh	r3, [r7, #6]
 800931c:	0a1b      	lsrs	r3, r3, #8
 800931e:	b29b      	uxth	r3, r3
 8009320:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0x44);
 8009322:	7bbb      	ldrb	r3, [r7, #14]
 8009324:	f023 0344 	bic.w	r3, r3, #68	; 0x44
 8009328:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl; 
 800932a:	7bba      	ldrb	r2, [r7, #14]
 800932c:	7bfb      	ldrb	r3, [r7, #15]
 800932e:	4313      	orrs	r3, r2
 8009330:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 8009332:	7bbb      	ldrb	r3, [r7, #14]
 8009334:	461a      	mov	r2, r3
 8009336:	2112      	movs	r1, #18
 8009338:	20d4      	movs	r0, #212	; 0xd4
 800933a:	f7ff ff1f 	bl	800917c <SENSOR_IO_Write>
}
 800933e:	bf00      	nop
 8009340:	3710      	adds	r7, #16
 8009342:	46bd      	mov	sp, r7
 8009344:	bd80      	pop	{r7, pc}

08009346 <LSM6DSL_AccDeInit>:

/**
  * @brief  LSM6DSL Accelerometer De-initialization.
  */
void LSM6DSL_AccDeInit(void)
{
 8009346:	b580      	push	{r7, lr}
 8009348:	b082      	sub	sp, #8
 800934a:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 800934c:	2300      	movs	r3, #0
 800934e:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8009350:	2110      	movs	r1, #16
 8009352:	20d4      	movs	r0, #212	; 0xd4
 8009354:	f7ff ff2c 	bl	80091b0 <SENSOR_IO_Read>
 8009358:	4603      	mov	r3, r0
 800935a:	71fb      	strb	r3, [r7, #7]

  /* Clear ODR bits */
  ctrl &= ~(LSM6DSL_ODR_BITPOSITION);
 800935c:	79fb      	ldrb	r3, [r7, #7]
 800935e:	f003 030f 	and.w	r3, r3, #15
 8009362:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, ctrl);
 8009364:	79fb      	ldrb	r3, [r7, #7]
 8009366:	461a      	mov	r2, r3
 8009368:	2110      	movs	r1, #16
 800936a:	20d4      	movs	r0, #212	; 0xd4
 800936c:	f7ff ff06 	bl	800917c <SENSOR_IO_Write>
}
 8009370:	bf00      	nop
 8009372:	3708      	adds	r7, #8
 8009374:	46bd      	mov	sp, r7
 8009376:	bd80      	pop	{r7, pc}

08009378 <LSM6DSL_AccReadID>:
/**
  * @brief  Read LSM6DSL ID.
  * @retval ID 
  */
uint8_t LSM6DSL_AccReadID(void)
{  
 8009378:	b580      	push	{r7, lr}
 800937a:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();
 800937c:	f7ff fef4 	bl	8009168 <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return (SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG));
 8009380:	210f      	movs	r1, #15
 8009382:	20d4      	movs	r0, #212	; 0xd4
 8009384:	f7ff ff14 	bl	80091b0 <SENSOR_IO_Read>
 8009388:	4603      	mov	r3, r0
}
 800938a:	4618      	mov	r0, r3
 800938c:	bd80      	pop	{r7, pc}

0800938e <LSM6DSL_AccLowPower>:
/**
  * @brief  Set/Unset Accelerometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LSM6DSL_AccLowPower(uint16_t status)
{
 800938e:	b580      	push	{r7, lr}
 8009390:	b084      	sub	sp, #16
 8009392:	af00      	add	r7, sp, #0
 8009394:	4603      	mov	r3, r0
 8009396:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8009398:	2300      	movs	r3, #0
 800939a:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL6_C value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C);
 800939c:	2115      	movs	r1, #21
 800939e:	20d4      	movs	r0, #212	; 0xd4
 80093a0:	f7ff ff06 	bl	80091b0 <SENSOR_IO_Read>
 80093a4:	4603      	mov	r3, r0
 80093a6:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x10);
 80093a8:	7bfb      	ldrb	r3, [r7, #15]
 80093aa:	f023 0310 	bic.w	r3, r3, #16
 80093ae:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 80093b0:	88fb      	ldrh	r3, [r7, #6]
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d003      	beq.n	80093be <LSM6DSL_AccLowPower+0x30>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_ENABLED;
 80093b6:	7bfb      	ldrb	r3, [r7, #15]
 80093b8:	f043 0310 	orr.w	r3, r3, #16
 80093bc:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C, ctrl);
 80093be:	7bfb      	ldrb	r3, [r7, #15]
 80093c0:	461a      	mov	r2, r3
 80093c2:	2115      	movs	r1, #21
 80093c4:	20d4      	movs	r0, #212	; 0xd4
 80093c6:	f7ff fed9 	bl	800917c <SENSOR_IO_Write>
}
 80093ca:	bf00      	nop
 80093cc:	3710      	adds	r7, #16
 80093ce:	46bd      	mov	sp, r7
 80093d0:	bd80      	pop	{r7, pc}
	...

080093d4 <LSM6DSL_AccReadXYZ>:
/**
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  */
void LSM6DSL_AccReadXYZ(int16_t* pData)
{
 80093d4:	b580      	push	{r7, lr}
 80093d6:	b088      	sub	sp, #32
 80093d8:	af00      	add	r7, sp, #0
 80093da:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlx= 0;
 80093dc:	2300      	movs	r3, #0
 80093de:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 80093e0:	2300      	movs	r3, #0
 80093e2:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 80093e4:	f04f 0300 	mov.w	r3, #0
 80093e8:	61bb      	str	r3, [r7, #24]
  
  /* Read the acceleration control register content */
  ctrlx = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 80093ea:	2110      	movs	r1, #16
 80093ec:	20d4      	movs	r0, #212	; 0xd4
 80093ee:	f7ff fedf 	bl	80091b0 <SENSOR_IO_Read>
 80093f2:	4603      	mov	r3, r0
 80093f4:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_XL, buffer, 6);
 80093f6:	f107 0208 	add.w	r2, r7, #8
 80093fa:	2306      	movs	r3, #6
 80093fc:	2128      	movs	r1, #40	; 0x28
 80093fe:	20d4      	movs	r0, #212	; 0xd4
 8009400:	f7ff fef4 	bl	80091ec <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 8009404:	2300      	movs	r3, #0
 8009406:	77fb      	strb	r3, [r7, #31]
 8009408:	e01c      	b.n	8009444 <LSM6DSL_AccReadXYZ+0x70>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 800940a:	7ffb      	ldrb	r3, [r7, #31]
 800940c:	005b      	lsls	r3, r3, #1
 800940e:	3301      	adds	r3, #1
 8009410:	3320      	adds	r3, #32
 8009412:	443b      	add	r3, r7
 8009414:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8009418:	b29b      	uxth	r3, r3
 800941a:	021b      	lsls	r3, r3, #8
 800941c:	b29a      	uxth	r2, r3
 800941e:	7ffb      	ldrb	r3, [r7, #31]
 8009420:	005b      	lsls	r3, r3, #1
 8009422:	3320      	adds	r3, #32
 8009424:	443b      	add	r3, r7
 8009426:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 800942a:	b29b      	uxth	r3, r3
 800942c:	4413      	add	r3, r2
 800942e:	b29a      	uxth	r2, r3
 8009430:	7ffb      	ldrb	r3, [r7, #31]
 8009432:	b212      	sxth	r2, r2
 8009434:	005b      	lsls	r3, r3, #1
 8009436:	3320      	adds	r3, #32
 8009438:	443b      	add	r3, r7
 800943a:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 800943e:	7ffb      	ldrb	r3, [r7, #31]
 8009440:	3301      	adds	r3, #1
 8009442:	77fb      	strb	r3, [r7, #31]
 8009444:	7ffb      	ldrb	r3, [r7, #31]
 8009446:	2b02      	cmp	r3, #2
 8009448:	d9df      	bls.n	800940a <LSM6DSL_AccReadXYZ+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL1_XL */
  switch(ctrlx & 0x0C)
 800944a:	7dfb      	ldrb	r3, [r7, #23]
 800944c:	f003 030c 	and.w	r3, r3, #12
 8009450:	2b0c      	cmp	r3, #12
 8009452:	d829      	bhi.n	80094a8 <LSM6DSL_AccReadXYZ+0xd4>
 8009454:	a201      	add	r2, pc, #4	; (adr r2, 800945c <LSM6DSL_AccReadXYZ+0x88>)
 8009456:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800945a:	bf00      	nop
 800945c:	08009491 	.word	0x08009491
 8009460:	080094a9 	.word	0x080094a9
 8009464:	080094a9 	.word	0x080094a9
 8009468:	080094a9 	.word	0x080094a9
 800946c:	080094a3 	.word	0x080094a3
 8009470:	080094a9 	.word	0x080094a9
 8009474:	080094a9 	.word	0x080094a9
 8009478:	080094a9 	.word	0x080094a9
 800947c:	08009497 	.word	0x08009497
 8009480:	080094a9 	.word	0x080094a9
 8009484:	080094a9 	.word	0x080094a9
 8009488:	080094a9 	.word	0x080094a9
 800948c:	0800949d 	.word	0x0800949d
  {
  case LSM6DSL_ACC_FULLSCALE_2G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_2G;
 8009490:	4b18      	ldr	r3, [pc, #96]	; (80094f4 <LSM6DSL_AccReadXYZ+0x120>)
 8009492:	61bb      	str	r3, [r7, #24]
    break;
 8009494:	e008      	b.n	80094a8 <LSM6DSL_AccReadXYZ+0xd4>
  case LSM6DSL_ACC_FULLSCALE_4G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_4G;
 8009496:	4b18      	ldr	r3, [pc, #96]	; (80094f8 <LSM6DSL_AccReadXYZ+0x124>)
 8009498:	61bb      	str	r3, [r7, #24]
    break;
 800949a:	e005      	b.n	80094a8 <LSM6DSL_AccReadXYZ+0xd4>
  case LSM6DSL_ACC_FULLSCALE_8G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_8G;
 800949c:	4b17      	ldr	r3, [pc, #92]	; (80094fc <LSM6DSL_AccReadXYZ+0x128>)
 800949e:	61bb      	str	r3, [r7, #24]
    break;
 80094a0:	e002      	b.n	80094a8 <LSM6DSL_AccReadXYZ+0xd4>
  case LSM6DSL_ACC_FULLSCALE_16G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_16G;
 80094a2:	4b17      	ldr	r3, [pc, #92]	; (8009500 <LSM6DSL_AccReadXYZ+0x12c>)
 80094a4:	61bb      	str	r3, [r7, #24]
    break;    
 80094a6:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 80094a8:	2300      	movs	r3, #0
 80094aa:	77fb      	strb	r3, [r7, #31]
 80094ac:	e01a      	b.n	80094e4 <LSM6DSL_AccReadXYZ+0x110>
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 80094ae:	7ffb      	ldrb	r3, [r7, #31]
 80094b0:	005b      	lsls	r3, r3, #1
 80094b2:	3320      	adds	r3, #32
 80094b4:	443b      	add	r3, r7
 80094b6:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 80094ba:	ee07 3a90 	vmov	s15, r3
 80094be:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80094c2:	edd7 7a06 	vldr	s15, [r7, #24]
 80094c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80094ca:	7ffb      	ldrb	r3, [r7, #31]
 80094cc:	005b      	lsls	r3, r3, #1
 80094ce:	687a      	ldr	r2, [r7, #4]
 80094d0:	4413      	add	r3, r2
 80094d2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80094d6:	ee17 2a90 	vmov	r2, s15
 80094da:	b212      	sxth	r2, r2
 80094dc:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 80094de:	7ffb      	ldrb	r3, [r7, #31]
 80094e0:	3301      	adds	r3, #1
 80094e2:	77fb      	strb	r3, [r7, #31]
 80094e4:	7ffb      	ldrb	r3, [r7, #31]
 80094e6:	2b02      	cmp	r3, #2
 80094e8:	d9e1      	bls.n	80094ae <LSM6DSL_AccReadXYZ+0xda>
  }
}
 80094ea:	bf00      	nop
 80094ec:	bf00      	nop
 80094ee:	3720      	adds	r7, #32
 80094f0:	46bd      	mov	sp, r7
 80094f2:	bd80      	pop	{r7, pc}
 80094f4:	3d79db23 	.word	0x3d79db23
 80094f8:	3df9db23 	.word	0x3df9db23
 80094fc:	3e79db23 	.word	0x3e79db23
 8009500:	3ef9db23 	.word	0x3ef9db23

08009504 <Hex2Num>:
  * @param  a: character to convert
  * @retval integer value.
  */

static  uint8_t Hex2Num(char a)
{
 8009504:	b480      	push	{r7}
 8009506:	b083      	sub	sp, #12
 8009508:	af00      	add	r7, sp, #0
 800950a:	4603      	mov	r3, r0
 800950c:	71fb      	strb	r3, [r7, #7]
    if (a >= '0' && a <= '9') {                             /* Char is num */
 800950e:	79fb      	ldrb	r3, [r7, #7]
 8009510:	2b2f      	cmp	r3, #47	; 0x2f
 8009512:	d906      	bls.n	8009522 <Hex2Num+0x1e>
 8009514:	79fb      	ldrb	r3, [r7, #7]
 8009516:	2b39      	cmp	r3, #57	; 0x39
 8009518:	d803      	bhi.n	8009522 <Hex2Num+0x1e>
        return a - '0';
 800951a:	79fb      	ldrb	r3, [r7, #7]
 800951c:	3b30      	subs	r3, #48	; 0x30
 800951e:	b2db      	uxtb	r3, r3
 8009520:	e014      	b.n	800954c <Hex2Num+0x48>
    } else if (a >= 'a' && a <= 'f') {                      /* Char is lowercase character A - Z (hex) */
 8009522:	79fb      	ldrb	r3, [r7, #7]
 8009524:	2b60      	cmp	r3, #96	; 0x60
 8009526:	d906      	bls.n	8009536 <Hex2Num+0x32>
 8009528:	79fb      	ldrb	r3, [r7, #7]
 800952a:	2b66      	cmp	r3, #102	; 0x66
 800952c:	d803      	bhi.n	8009536 <Hex2Num+0x32>
        return (a - 'a') + 10;
 800952e:	79fb      	ldrb	r3, [r7, #7]
 8009530:	3b57      	subs	r3, #87	; 0x57
 8009532:	b2db      	uxtb	r3, r3
 8009534:	e00a      	b.n	800954c <Hex2Num+0x48>
    } else if (a >= 'A' && a <= 'F') {                      /* Char is uppercase character A - Z (hex) */
 8009536:	79fb      	ldrb	r3, [r7, #7]
 8009538:	2b40      	cmp	r3, #64	; 0x40
 800953a:	d906      	bls.n	800954a <Hex2Num+0x46>
 800953c:	79fb      	ldrb	r3, [r7, #7]
 800953e:	2b46      	cmp	r3, #70	; 0x46
 8009540:	d803      	bhi.n	800954a <Hex2Num+0x46>
        return (a - 'A') + 10;
 8009542:	79fb      	ldrb	r3, [r7, #7]
 8009544:	3b37      	subs	r3, #55	; 0x37
 8009546:	b2db      	uxtb	r3, r3
 8009548:	e000      	b.n	800954c <Hex2Num+0x48>
    }

    return 0;
 800954a:	2300      	movs	r3, #0
}
 800954c:	4618      	mov	r0, r3
 800954e:	370c      	adds	r7, #12
 8009550:	46bd      	mov	sp, r7
 8009552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009556:	4770      	bx	lr

08009558 <ParseHexNumber>:
  * @param  ptr: pointer to string
  * @param  cnt: pointer to the number of parsed digit
  * @retval Hex value.
  */
static uint32_t ParseHexNumber(char* ptr, uint8_t* cnt)
{
 8009558:	b580      	push	{r7, lr}
 800955a:	b084      	sub	sp, #16
 800955c:	af00      	add	r7, sp, #0
 800955e:	6078      	str	r0, [r7, #4]
 8009560:	6039      	str	r1, [r7, #0]
    uint32_t sum = 0;
 8009562:	2300      	movs	r3, #0
 8009564:	60fb      	str	r3, [r7, #12]
    uint8_t i = 0;
 8009566:	2300      	movs	r3, #0
 8009568:	72fb      	strb	r3, [r7, #11]

    while (CHARISHEXNUM(*ptr)) {                    		/* Parse number */
 800956a:	e012      	b.n	8009592 <ParseHexNumber+0x3a>
        sum <<= 4;
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	011b      	lsls	r3, r3, #4
 8009570:	60fb      	str	r3, [r7, #12]
        sum += Hex2Num(*ptr);
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	781b      	ldrb	r3, [r3, #0]
 8009576:	4618      	mov	r0, r3
 8009578:	f7ff ffc4 	bl	8009504 <Hex2Num>
 800957c:	4603      	mov	r3, r0
 800957e:	461a      	mov	r2, r3
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	4413      	add	r3, r2
 8009584:	60fb      	str	r3, [r7, #12]
        ptr++;
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	3301      	adds	r3, #1
 800958a:	607b      	str	r3, [r7, #4]
        i++;
 800958c:	7afb      	ldrb	r3, [r7, #11]
 800958e:	3301      	adds	r3, #1
 8009590:	72fb      	strb	r3, [r7, #11]
    while (CHARISHEXNUM(*ptr)) {                    		/* Parse number */
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	781b      	ldrb	r3, [r3, #0]
 8009596:	2b2f      	cmp	r3, #47	; 0x2f
 8009598:	d903      	bls.n	80095a2 <ParseHexNumber+0x4a>
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	781b      	ldrb	r3, [r3, #0]
 800959e:	2b39      	cmp	r3, #57	; 0x39
 80095a0:	d9e4      	bls.n	800956c <ParseHexNumber+0x14>
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	781b      	ldrb	r3, [r3, #0]
 80095a6:	2b60      	cmp	r3, #96	; 0x60
 80095a8:	d903      	bls.n	80095b2 <ParseHexNumber+0x5a>
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	781b      	ldrb	r3, [r3, #0]
 80095ae:	2b66      	cmp	r3, #102	; 0x66
 80095b0:	d9dc      	bls.n	800956c <ParseHexNumber+0x14>
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	781b      	ldrb	r3, [r3, #0]
 80095b6:	2b40      	cmp	r3, #64	; 0x40
 80095b8:	d903      	bls.n	80095c2 <ParseHexNumber+0x6a>
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	781b      	ldrb	r3, [r3, #0]
 80095be:	2b46      	cmp	r3, #70	; 0x46
 80095c0:	d9d4      	bls.n	800956c <ParseHexNumber+0x14>
    }

    if (cnt != NULL) {                               		/* Save number of characters used for number */
 80095c2:	683b      	ldr	r3, [r7, #0]
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d002      	beq.n	80095ce <ParseHexNumber+0x76>
        *cnt = i;
 80095c8:	683b      	ldr	r3, [r7, #0]
 80095ca:	7afa      	ldrb	r2, [r7, #11]
 80095cc:	701a      	strb	r2, [r3, #0]
    }
    return sum;                                        		/* Return number */
 80095ce:	68fb      	ldr	r3, [r7, #12]
}
 80095d0:	4618      	mov	r0, r3
 80095d2:	3710      	adds	r7, #16
 80095d4:	46bd      	mov	sp, r7
 80095d6:	bd80      	pop	{r7, pc}

080095d8 <ParseNumber>:
  * @param  ptr: pointer to string
  * @param  cnt: pointer to the number of parsed digit
  * @retval integer value.
  */
static int32_t ParseNumber(char* ptr, uint8_t* cnt)
{
 80095d8:	b480      	push	{r7}
 80095da:	b085      	sub	sp, #20
 80095dc:	af00      	add	r7, sp, #0
 80095de:	6078      	str	r0, [r7, #4]
 80095e0:	6039      	str	r1, [r7, #0]
    uint8_t minus = 0, i = 0;
 80095e2:	2300      	movs	r3, #0
 80095e4:	73fb      	strb	r3, [r7, #15]
 80095e6:	2300      	movs	r3, #0
 80095e8:	73bb      	strb	r3, [r7, #14]
    int32_t sum = 0;
 80095ea:	2300      	movs	r3, #0
 80095ec:	60bb      	str	r3, [r7, #8]

    if (*ptr == '-') {                                		/* Check for minus character */
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	781b      	ldrb	r3, [r3, #0]
 80095f2:	2b2d      	cmp	r3, #45	; 0x2d
 80095f4:	d119      	bne.n	800962a <ParseNumber+0x52>
        minus = 1;
 80095f6:	2301      	movs	r3, #1
 80095f8:	73fb      	strb	r3, [r7, #15]
        ptr++;
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	3301      	adds	r3, #1
 80095fe:	607b      	str	r3, [r7, #4]
        i++;
 8009600:	7bbb      	ldrb	r3, [r7, #14]
 8009602:	3301      	adds	r3, #1
 8009604:	73bb      	strb	r3, [r7, #14]
    }
    while (CHARISNUM(*ptr)) {                        		/* Parse number */
 8009606:	e010      	b.n	800962a <ParseNumber+0x52>
        sum = 10 * sum + CHAR2NUM(*ptr);
 8009608:	68ba      	ldr	r2, [r7, #8]
 800960a:	4613      	mov	r3, r2
 800960c:	009b      	lsls	r3, r3, #2
 800960e:	4413      	add	r3, r2
 8009610:	005b      	lsls	r3, r3, #1
 8009612:	461a      	mov	r2, r3
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	781b      	ldrb	r3, [r3, #0]
 8009618:	3b30      	subs	r3, #48	; 0x30
 800961a:	4413      	add	r3, r2
 800961c:	60bb      	str	r3, [r7, #8]
        ptr++;
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	3301      	adds	r3, #1
 8009622:	607b      	str	r3, [r7, #4]
        i++;
 8009624:	7bbb      	ldrb	r3, [r7, #14]
 8009626:	3301      	adds	r3, #1
 8009628:	73bb      	strb	r3, [r7, #14]
    while (CHARISNUM(*ptr)) {                        		/* Parse number */
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	781b      	ldrb	r3, [r3, #0]
 800962e:	2b2f      	cmp	r3, #47	; 0x2f
 8009630:	d903      	bls.n	800963a <ParseNumber+0x62>
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	781b      	ldrb	r3, [r3, #0]
 8009636:	2b39      	cmp	r3, #57	; 0x39
 8009638:	d9e6      	bls.n	8009608 <ParseNumber+0x30>
    }
    if (cnt != NULL) {                                		/* Save number of characters used for number */
 800963a:	683b      	ldr	r3, [r7, #0]
 800963c:	2b00      	cmp	r3, #0
 800963e:	d002      	beq.n	8009646 <ParseNumber+0x6e>
        *cnt = i;
 8009640:	683b      	ldr	r3, [r7, #0]
 8009642:	7bba      	ldrb	r2, [r7, #14]
 8009644:	701a      	strb	r2, [r3, #0]
    }
    if (minus) {                                    		/* Minus detected */
 8009646:	7bfb      	ldrb	r3, [r7, #15]
 8009648:	2b00      	cmp	r3, #0
 800964a:	d002      	beq.n	8009652 <ParseNumber+0x7a>
        return 0 - sum;
 800964c:	68bb      	ldr	r3, [r7, #8]
 800964e:	425b      	negs	r3, r3
 8009650:	e000      	b.n	8009654 <ParseNumber+0x7c>
    }
    return sum;                                       		/* Return number */
 8009652:	68bb      	ldr	r3, [r7, #8]
}
 8009654:	4618      	mov	r0, r3
 8009656:	3714      	adds	r7, #20
 8009658:	46bd      	mov	sp, r7
 800965a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800965e:	4770      	bx	lr

08009660 <ParseMAC>:
  * @param  ptr: pointer to string
  * @param  arr: pointer to MAC array
  * @retval None.
  */
static void ParseMAC(char* ptr, uint8_t* arr)
{
 8009660:	b580      	push	{r7, lr}
 8009662:	b084      	sub	sp, #16
 8009664:	af00      	add	r7, sp, #0
 8009666:	6078      	str	r0, [r7, #4]
 8009668:	6039      	str	r1, [r7, #0]
  uint8_t hexnum = 0, hexcnt;
 800966a:	2300      	movs	r3, #0
 800966c:	73fb      	strb	r3, [r7, #15]

  while(* ptr) {
 800966e:	e019      	b.n	80096a4 <ParseMAC+0x44>
    hexcnt = 1;
 8009670:	2301      	movs	r3, #1
 8009672:	73bb      	strb	r3, [r7, #14]
    if(*ptr != ':')
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	781b      	ldrb	r3, [r3, #0]
 8009678:	2b3a      	cmp	r3, #58	; 0x3a
 800967a:	d00e      	beq.n	800969a <ParseMAC+0x3a>
    {
      arr[hexnum++] = ParseHexNumber(ptr, &hexcnt);
 800967c:	f107 030e 	add.w	r3, r7, #14
 8009680:	4619      	mov	r1, r3
 8009682:	6878      	ldr	r0, [r7, #4]
 8009684:	f7ff ff68 	bl	8009558 <ParseHexNumber>
 8009688:	4601      	mov	r1, r0
 800968a:	7bfb      	ldrb	r3, [r7, #15]
 800968c:	1c5a      	adds	r2, r3, #1
 800968e:	73fa      	strb	r2, [r7, #15]
 8009690:	461a      	mov	r2, r3
 8009692:	683b      	ldr	r3, [r7, #0]
 8009694:	4413      	add	r3, r2
 8009696:	b2ca      	uxtb	r2, r1
 8009698:	701a      	strb	r2, [r3, #0]
    }
    ptr = ptr + hexcnt;
 800969a:	7bbb      	ldrb	r3, [r7, #14]
 800969c:	461a      	mov	r2, r3
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	4413      	add	r3, r2
 80096a2:	607b      	str	r3, [r7, #4]
  while(* ptr) {
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	781b      	ldrb	r3, [r3, #0]
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d1e1      	bne.n	8009670 <ParseMAC+0x10>
  }
}
 80096ac:	bf00      	nop
 80096ae:	bf00      	nop
 80096b0:	3710      	adds	r7, #16
 80096b2:	46bd      	mov	sp, r7
 80096b4:	bd80      	pop	{r7, pc}

080096b6 <ParseIP>:
  * @param  ptr: pointer to string
  * @param  arr: pointer to IP array
  * @retval None.
  */
static  void ParseIP(char* ptr, uint8_t* arr)
{
 80096b6:	b580      	push	{r7, lr}
 80096b8:	b084      	sub	sp, #16
 80096ba:	af00      	add	r7, sp, #0
 80096bc:	6078      	str	r0, [r7, #4]
 80096be:	6039      	str	r1, [r7, #0]
  uint8_t hexnum = 0, hexcnt;
 80096c0:	2300      	movs	r3, #0
 80096c2:	73fb      	strb	r3, [r7, #15]

  while(* ptr) {
 80096c4:	e019      	b.n	80096fa <ParseIP+0x44>
    hexcnt = 1;
 80096c6:	2301      	movs	r3, #1
 80096c8:	73bb      	strb	r3, [r7, #14]
    if(*ptr != '.')
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	781b      	ldrb	r3, [r3, #0]
 80096ce:	2b2e      	cmp	r3, #46	; 0x2e
 80096d0:	d00e      	beq.n	80096f0 <ParseIP+0x3a>
    {
      arr[hexnum++] = ParseNumber(ptr, &hexcnt);
 80096d2:	f107 030e 	add.w	r3, r7, #14
 80096d6:	4619      	mov	r1, r3
 80096d8:	6878      	ldr	r0, [r7, #4]
 80096da:	f7ff ff7d 	bl	80095d8 <ParseNumber>
 80096de:	4601      	mov	r1, r0
 80096e0:	7bfb      	ldrb	r3, [r7, #15]
 80096e2:	1c5a      	adds	r2, r3, #1
 80096e4:	73fa      	strb	r2, [r7, #15]
 80096e6:	461a      	mov	r2, r3
 80096e8:	683b      	ldr	r3, [r7, #0]
 80096ea:	4413      	add	r3, r2
 80096ec:	b2ca      	uxtb	r2, r1
 80096ee:	701a      	strb	r2, [r3, #0]
    }
    ptr = ptr + hexcnt;
 80096f0:	7bbb      	ldrb	r3, [r7, #14]
 80096f2:	461a      	mov	r2, r3
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	4413      	add	r3, r2
 80096f8:	607b      	str	r3, [r7, #4]
  while(* ptr) {
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	781b      	ldrb	r3, [r3, #0]
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d1e1      	bne.n	80096c6 <ParseIP+0x10>
  }
}
 8009702:	bf00      	nop
 8009704:	bf00      	nop
 8009706:	3710      	adds	r7, #16
 8009708:	46bd      	mov	sp, r7
 800970a:	bd80      	pop	{r7, pc}

0800970c <AT_ParseInfo>:
  * @param  Obj: pointer to module handle
  * @param  ptr: pointer to string
  * @retval None.
  */
static void AT_ParseInfo(ES_WIFIObject_t *Obj,uint8_t *pdata)
{
 800970c:	b580      	push	{r7, lr}
 800970e:	b084      	sub	sp, #16
 8009710:	af00      	add	r7, sp, #0
 8009712:	6078      	str	r0, [r7, #4]
 8009714:	6039      	str	r1, [r7, #0]
  char *ptr;
  uint8_t num = 0;
 8009716:	2300      	movs	r3, #0
 8009718:	72fb      	strb	r3, [r7, #11]

  ptr = strtok((char *)pdata + 2, ",");
 800971a:	683b      	ldr	r3, [r7, #0]
 800971c:	3302      	adds	r3, #2
 800971e:	4934      	ldr	r1, [pc, #208]	; (80097f0 <AT_ParseInfo+0xe4>)
 8009720:	4618      	mov	r0, r3
 8009722:	f004 fec1 	bl	800e4a8 <strtok>
 8009726:	60f8      	str	r0, [r7, #12]

  while (ptr != NULL){
 8009728:	e05a      	b.n	80097e0 <AT_ParseInfo+0xd4>
    switch (num++) {
 800972a:	7afb      	ldrb	r3, [r7, #11]
 800972c:	1c5a      	adds	r2, r3, #1
 800972e:	72fa      	strb	r2, [r7, #11]
 8009730:	2b06      	cmp	r3, #6
 8009732:	d84f      	bhi.n	80097d4 <AT_ParseInfo+0xc8>
 8009734:	a201      	add	r2, pc, #4	; (adr r2, 800973c <AT_ParseInfo+0x30>)
 8009736:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800973a:	bf00      	nop
 800973c:	08009759 	.word	0x08009759
 8009740:	08009767 	.word	0x08009767
 8009744:	08009777 	.word	0x08009777
 8009748:	08009787 	.word	0x08009787
 800974c:	08009797 	.word	0x08009797
 8009750:	080097a7 	.word	0x080097a7
 8009754:	080097bb 	.word	0x080097bb
    case 0:
      strncpy((char *)Obj->Product_ID,  ptr, ES_WIFI_PRODUCT_ID_SIZE);
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	2220      	movs	r2, #32
 800975c:	68f9      	ldr	r1, [r7, #12]
 800975e:	4618      	mov	r0, r3
 8009760:	f004 fe79 	bl	800e456 <strncpy>
      break;
 8009764:	e037      	b.n	80097d6 <AT_ParseInfo+0xca>

    case 1:
      strncpy((char *)Obj->FW_Rev,  ptr, ES_WIFI_FW_REV_SIZE );
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	3320      	adds	r3, #32
 800976a:	2218      	movs	r2, #24
 800976c:	68f9      	ldr	r1, [r7, #12]
 800976e:	4618      	mov	r0, r3
 8009770:	f004 fe71 	bl	800e456 <strncpy>
      break;
 8009774:	e02f      	b.n	80097d6 <AT_ParseInfo+0xca>

    case 2:
      strncpy((char *)Obj->API_Rev,  ptr, ES_WIFI_API_REV_SIZE);
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	3338      	adds	r3, #56	; 0x38
 800977a:	2210      	movs	r2, #16
 800977c:	68f9      	ldr	r1, [r7, #12]
 800977e:	4618      	mov	r0, r3
 8009780:	f004 fe69 	bl	800e456 <strncpy>
      break;
 8009784:	e027      	b.n	80097d6 <AT_ParseInfo+0xca>

    case 3:
      strncpy((char *)Obj->Stack_Rev,  ptr, ES_WIFI_STACK_REV_SIZE);
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	3348      	adds	r3, #72	; 0x48
 800978a:	2210      	movs	r2, #16
 800978c:	68f9      	ldr	r1, [r7, #12]
 800978e:	4618      	mov	r0, r3
 8009790:	f004 fe61 	bl	800e456 <strncpy>
      break;
 8009794:	e01f      	b.n	80097d6 <AT_ParseInfo+0xca>

    case 4:
      strncpy((char *)Obj->RTOS_Rev,  ptr, ES_WIFI_RTOS_REV_SIZE);
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	3358      	adds	r3, #88	; 0x58
 800979a:	2210      	movs	r2, #16
 800979c:	68f9      	ldr	r1, [r7, #12]
 800979e:	4618      	mov	r0, r3
 80097a0:	f004 fe59 	bl	800e456 <strncpy>
      break;
 80097a4:	e017      	b.n	80097d6 <AT_ParseInfo+0xca>

    case 5:
      Obj->CPU_Clock = ParseNumber(ptr, NULL);
 80097a6:	2100      	movs	r1, #0
 80097a8:	68f8      	ldr	r0, [r7, #12]
 80097aa:	f7ff ff15 	bl	80095d8 <ParseNumber>
 80097ae:	4603      	mov	r3, r0
 80097b0:	461a      	mov	r2, r3
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      break;
 80097b8:	e00d      	b.n	80097d6 <AT_ParseInfo+0xca>

    case 6:
      ptr = strtok(ptr, "\r");
 80097ba:	490e      	ldr	r1, [pc, #56]	; (80097f4 <AT_ParseInfo+0xe8>)
 80097bc:	68f8      	ldr	r0, [r7, #12]
 80097be:	f004 fe73 	bl	800e4a8 <strtok>
 80097c2:	60f8      	str	r0, [r7, #12]
      strncpy((char *)Obj->Product_Name,  ptr, ES_WIFI_PRODUCT_NAME_SIZE);
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	3368      	adds	r3, #104	; 0x68
 80097c8:	2220      	movs	r2, #32
 80097ca:	68f9      	ldr	r1, [r7, #12]
 80097cc:	4618      	mov	r0, r3
 80097ce:	f004 fe42 	bl	800e456 <strncpy>
      break;
 80097d2:	e000      	b.n	80097d6 <AT_ParseInfo+0xca>

    default: break;
 80097d4:	bf00      	nop
    }
    ptr = strtok(NULL, ",");
 80097d6:	4906      	ldr	r1, [pc, #24]	; (80097f0 <AT_ParseInfo+0xe4>)
 80097d8:	2000      	movs	r0, #0
 80097da:	f004 fe65 	bl	800e4a8 <strtok>
 80097de:	60f8      	str	r0, [r7, #12]
  while (ptr != NULL){
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d1a1      	bne.n	800972a <AT_ParseInfo+0x1e>
  }
}
 80097e6:	bf00      	nop
 80097e8:	bf00      	nop
 80097ea:	3710      	adds	r7, #16
 80097ec:	46bd      	mov	sp, r7
 80097ee:	bd80      	pop	{r7, pc}
 80097f0:	0800fb10 	.word	0x0800fb10
 80097f4:	0800fb14 	.word	0x0800fb14

080097f8 <AT_ParseConnSettings>:
  * @param  NetSettings: settings
  * @param  pdata: pointer to data
  * @retval None.
  */
static void AT_ParseConnSettings(char *pdata, ES_WIFI_Network_t *NetSettings)
{
 80097f8:	b580      	push	{r7, lr}
 80097fa:	b084      	sub	sp, #16
 80097fc:	af00      	add	r7, sp, #0
 80097fe:	6078      	str	r0, [r7, #4]
 8009800:	6039      	str	r1, [r7, #0]
  uint8_t num = 0;
 8009802:	2300      	movs	r3, #0
 8009804:	73fb      	strb	r3, [r7, #15]
  char *ptr;

  ptr = strtok(pdata + 2, ",");
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	3302      	adds	r3, #2
 800980a:	4952      	ldr	r1, [pc, #328]	; (8009954 <AT_ParseConnSettings+0x15c>)
 800980c:	4618      	mov	r0, r3
 800980e:	f004 fe4b 	bl	800e4a8 <strtok>
 8009812:	60b8      	str	r0, [r7, #8]

  while (ptr != NULL) {
 8009814:	e095      	b.n	8009942 <AT_ParseConnSettings+0x14a>
    switch (num++) {
 8009816:	7bfb      	ldrb	r3, [r7, #15]
 8009818:	1c5a      	adds	r2, r3, #1
 800981a:	73fa      	strb	r2, [r7, #15]
 800981c:	2b0b      	cmp	r3, #11
 800981e:	d87f      	bhi.n	8009920 <AT_ParseConnSettings+0x128>
 8009820:	a201      	add	r2, pc, #4	; (adr r2, 8009828 <AT_ParseConnSettings+0x30>)
 8009822:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009826:	bf00      	nop
 8009828:	08009859 	.word	0x08009859
 800982c:	08009867 	.word	0x08009867
 8009830:	08009877 	.word	0x08009877
 8009834:	0800988b 	.word	0x0800988b
 8009838:	0800989f 	.word	0x0800989f
 800983c:	080098b3 	.word	0x080098b3
 8009840:	080098c1 	.word	0x080098c1
 8009844:	080098cf 	.word	0x080098cf
 8009848:	080098dd 	.word	0x080098dd
 800984c:	080098eb 	.word	0x080098eb
 8009850:	080098f9 	.word	0x080098f9
 8009854:	0800990d 	.word	0x0800990d
    case 0:
      strncpy((char *)NetSettings->SSID,  ptr, ES_WIFI_MAX_SSID_NAME_SIZE + 1);
 8009858:	683b      	ldr	r3, [r7, #0]
 800985a:	2221      	movs	r2, #33	; 0x21
 800985c:	68b9      	ldr	r1, [r7, #8]
 800985e:	4618      	mov	r0, r3
 8009860:	f004 fdf9 	bl	800e456 <strncpy>
      break;
 8009864:	e05d      	b.n	8009922 <AT_ParseConnSettings+0x12a>

    case 1:
      strncpy((char *)NetSettings->pswd,  ptr, ES_WIFI_MAX_PSWD_NAME_SIZE + 1);
 8009866:	683b      	ldr	r3, [r7, #0]
 8009868:	3321      	adds	r3, #33	; 0x21
 800986a:	2221      	movs	r2, #33	; 0x21
 800986c:	68b9      	ldr	r1, [r7, #8]
 800986e:	4618      	mov	r0, r3
 8009870:	f004 fdf1 	bl	800e456 <strncpy>
      break;
 8009874:	e055      	b.n	8009922 <AT_ParseConnSettings+0x12a>

    case 2:
        NetSettings->Security = (ES_WIFI_SecurityType_t)ParseNumber(ptr, NULL);
 8009876:	2100      	movs	r1, #0
 8009878:	68b8      	ldr	r0, [r7, #8]
 800987a:	f7ff fead 	bl	80095d8 <ParseNumber>
 800987e:	4603      	mov	r3, r0
 8009880:	b2da      	uxtb	r2, r3
 8009882:	683b      	ldr	r3, [r7, #0]
 8009884:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        break;
 8009888:	e04b      	b.n	8009922 <AT_ParseConnSettings+0x12a>

    case 3:
      NetSettings->DHCP_IsEnabled = ParseNumber(ptr, NULL);
 800988a:	2100      	movs	r1, #0
 800988c:	68b8      	ldr	r0, [r7, #8]
 800988e:	f7ff fea3 	bl	80095d8 <ParseNumber>
 8009892:	4603      	mov	r3, r0
 8009894:	b2da      	uxtb	r2, r3
 8009896:	683b      	ldr	r3, [r7, #0]
 8009898:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      break;
 800989c:	e041      	b.n	8009922 <AT_ParseConnSettings+0x12a>

    case 4:
      NetSettings->IP_Ver = (ES_WIFI_IPVer_t)ParseNumber(ptr, NULL);
 800989e:	2100      	movs	r1, #0
 80098a0:	68b8      	ldr	r0, [r7, #8]
 80098a2:	f7ff fe99 	bl	80095d8 <ParseNumber>
 80098a6:	4603      	mov	r3, r0
 80098a8:	b2da      	uxtb	r2, r3
 80098aa:	683b      	ldr	r3, [r7, #0]
 80098ac:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
      break;
 80098b0:	e037      	b.n	8009922 <AT_ParseConnSettings+0x12a>

    case 5:
      ParseIP(ptr, NetSettings->IP_Addr);
 80098b2:	683b      	ldr	r3, [r7, #0]
 80098b4:	3348      	adds	r3, #72	; 0x48
 80098b6:	4619      	mov	r1, r3
 80098b8:	68b8      	ldr	r0, [r7, #8]
 80098ba:	f7ff fefc 	bl	80096b6 <ParseIP>
      break;
 80098be:	e030      	b.n	8009922 <AT_ParseConnSettings+0x12a>

    case 6:
      ParseIP(ptr, NetSettings->IP_Mask);
 80098c0:	683b      	ldr	r3, [r7, #0]
 80098c2:	334c      	adds	r3, #76	; 0x4c
 80098c4:	4619      	mov	r1, r3
 80098c6:	68b8      	ldr	r0, [r7, #8]
 80098c8:	f7ff fef5 	bl	80096b6 <ParseIP>
      break;
 80098cc:	e029      	b.n	8009922 <AT_ParseConnSettings+0x12a>

    case 7:
      ParseIP(ptr, NetSettings->Gateway_Addr);
 80098ce:	683b      	ldr	r3, [r7, #0]
 80098d0:	3350      	adds	r3, #80	; 0x50
 80098d2:	4619      	mov	r1, r3
 80098d4:	68b8      	ldr	r0, [r7, #8]
 80098d6:	f7ff feee 	bl	80096b6 <ParseIP>
      break;
 80098da:	e022      	b.n	8009922 <AT_ParseConnSettings+0x12a>

    case 8:
      ParseIP(ptr, NetSettings->DNS1);
 80098dc:	683b      	ldr	r3, [r7, #0]
 80098de:	3354      	adds	r3, #84	; 0x54
 80098e0:	4619      	mov	r1, r3
 80098e2:	68b8      	ldr	r0, [r7, #8]
 80098e4:	f7ff fee7 	bl	80096b6 <ParseIP>
      break;
 80098e8:	e01b      	b.n	8009922 <AT_ParseConnSettings+0x12a>

    case 9:
      ParseIP(ptr, NetSettings->DNS2);
 80098ea:	683b      	ldr	r3, [r7, #0]
 80098ec:	3358      	adds	r3, #88	; 0x58
 80098ee:	4619      	mov	r1, r3
 80098f0:	68b8      	ldr	r0, [r7, #8]
 80098f2:	f7ff fee0 	bl	80096b6 <ParseIP>
      break;
 80098f6:	e014      	b.n	8009922 <AT_ParseConnSettings+0x12a>

    case 10:
      NetSettings->JoinRetries = ParseNumber(ptr, NULL);
 80098f8:	2100      	movs	r1, #0
 80098fa:	68b8      	ldr	r0, [r7, #8]
 80098fc:	f7ff fe6c 	bl	80095d8 <ParseNumber>
 8009900:	4603      	mov	r3, r0
 8009902:	b2da      	uxtb	r2, r3
 8009904:	683b      	ldr	r3, [r7, #0]
 8009906:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      break;
 800990a:	e00a      	b.n	8009922 <AT_ParseConnSettings+0x12a>

    case 11:
      NetSettings->AutoConnect = ParseNumber(ptr, NULL);
 800990c:	2100      	movs	r1, #0
 800990e:	68b8      	ldr	r0, [r7, #8]
 8009910:	f7ff fe62 	bl	80095d8 <ParseNumber>
 8009914:	4603      	mov	r3, r0
 8009916:	b2da      	uxtb	r2, r3
 8009918:	683b      	ldr	r3, [r7, #0]
 800991a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
      break;
 800991e:	e000      	b.n	8009922 <AT_ParseConnSettings+0x12a>

    default:
      break;
 8009920:	bf00      	nop
    }
    ptr = strtok(NULL, ",");
 8009922:	490c      	ldr	r1, [pc, #48]	; (8009954 <AT_ParseConnSettings+0x15c>)
 8009924:	2000      	movs	r0, #0
 8009926:	f004 fdbf 	bl	800e4a8 <strtok>
 800992a:	60b8      	str	r0, [r7, #8]
    if ((ptr != NULL) && (ptr[-1] == ','))
 800992c:	68bb      	ldr	r3, [r7, #8]
 800992e:	2b00      	cmp	r3, #0
 8009930:	d007      	beq.n	8009942 <AT_ParseConnSettings+0x14a>
 8009932:	68bb      	ldr	r3, [r7, #8]
 8009934:	3b01      	subs	r3, #1
 8009936:	781b      	ldrb	r3, [r3, #0]
 8009938:	2b2c      	cmp	r3, #44	; 0x2c
 800993a:	d102      	bne.n	8009942 <AT_ParseConnSettings+0x14a>
    { /* Ignore empty fields */
      num++;
 800993c:	7bfb      	ldrb	r3, [r7, #15]
 800993e:	3301      	adds	r3, #1
 8009940:	73fb      	strb	r3, [r7, #15]
  while (ptr != NULL) {
 8009942:	68bb      	ldr	r3, [r7, #8]
 8009944:	2b00      	cmp	r3, #0
 8009946:	f47f af66 	bne.w	8009816 <AT_ParseConnSettings+0x1e>
    }
  }
}
 800994a:	bf00      	nop
 800994c:	bf00      	nop
 800994e:	3710      	adds	r7, #16
 8009950:	46bd      	mov	sp, r7
 8009952:	bd80      	pop	{r7, pc}
 8009954:	0800fb10 	.word	0x0800fb10

08009958 <AT_ParseIsConnected>:
  * @param  pdata: pointer to data
  * @param  isConnected: pointer to result
  * @retval None.
  */
static void AT_ParseIsConnected(char *pdata, uint8_t *isConnected)
{
 8009958:	b480      	push	{r7}
 800995a:	b083      	sub	sp, #12
 800995c:	af00      	add	r7, sp, #0
 800995e:	6078      	str	r0, [r7, #4]
 8009960:	6039      	str	r1, [r7, #0]
  *isConnected = (pdata[2] == '1') ? 1 : 0;
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	3302      	adds	r3, #2
 8009966:	781b      	ldrb	r3, [r3, #0]
 8009968:	2b31      	cmp	r3, #49	; 0x31
 800996a:	bf0c      	ite	eq
 800996c:	2301      	moveq	r3, #1
 800996e:	2300      	movne	r3, #0
 8009970:	b2db      	uxtb	r3, r3
 8009972:	461a      	mov	r2, r3
 8009974:	683b      	ldr	r3, [r7, #0]
 8009976:	701a      	strb	r2, [r3, #0]
}
 8009978:	bf00      	nop
 800997a:	370c      	adds	r7, #12
 800997c:	46bd      	mov	sp, r7
 800997e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009982:	4770      	bx	lr

08009984 <AT_ExecuteCommand>:
  * @param  cmd: pointer to command string
  * @param  pdata: pointer to returned data
  * @retval Operation Status.
  */
static ES_WIFI_Status_t AT_ExecuteCommand(ES_WIFIObject_t *Obj, uint8_t* cmd, uint8_t *pdata)
{
 8009984:	b590      	push	{r4, r7, lr}
 8009986:	b087      	sub	sp, #28
 8009988:	af00      	add	r7, sp, #0
 800998a:	60f8      	str	r0, [r7, #12]
 800998c:	60b9      	str	r1, [r7, #8]
 800998e:	607a      	str	r2, [r7, #4]
  int ret = 0;
 8009990:	2300      	movs	r3, #0
 8009992:	613b      	str	r3, [r7, #16]
  int16_t recv_len = 0;
 8009994:	2300      	movs	r3, #0
 8009996:	82fb      	strh	r3, [r7, #22]
  LOCK_WIFI();

  ret = Obj->fops.IO_Send(cmd, strlen((char*)cmd), Obj->Timeout);
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	f8d3 4120 	ldr.w	r4, [r3, #288]	; 0x120
 800999e:	68b8      	ldr	r0, [r7, #8]
 80099a0:	f7f6 fc16 	bl	80001d0 <strlen>
 80099a4:	4603      	mov	r3, r0
 80099a6:	b299      	uxth	r1, r3
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	; 0x8f8
 80099ae:	461a      	mov	r2, r3
 80099b0:	68b8      	ldr	r0, [r7, #8]
 80099b2:	47a0      	blx	r4
 80099b4:	4603      	mov	r3, r0
 80099b6:	613b      	str	r3, [r7, #16]

  if( ret > 0)
 80099b8:	693b      	ldr	r3, [r7, #16]
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	dd3e      	ble.n	8009a3c <AT_ExecuteCommand+0xb8>
  {
    recv_len = Obj->fops.IO_Receive(pdata, ES_WIFI_DATA_SIZE, Obj->Timeout);
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 80099c4:	68fa      	ldr	r2, [r7, #12]
 80099c6:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	; 0x8f8
 80099ca:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 80099ce:	6878      	ldr	r0, [r7, #4]
 80099d0:	4798      	blx	r3
 80099d2:	4603      	mov	r3, r0
 80099d4:	82fb      	strh	r3, [r7, #22]
    if((recv_len > 0) && (recv_len <= ES_WIFI_DATA_SIZE))
 80099d6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80099da:	2b00      	cmp	r3, #0
 80099dc:	dd27      	ble.n	8009a2e <AT_ExecuteCommand+0xaa>
 80099de:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80099e2:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80099e6:	dc22      	bgt.n	8009a2e <AT_ExecuteCommand+0xaa>
    {
      if (recv_len == ES_WIFI_DATA_SIZE)
 80099e8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80099ec:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80099f0:	d105      	bne.n	80099fe <AT_ExecuteCommand+0x7a>
      {
        // ES_WIFI_DATA_SIZE maybe too small !!
        recv_len--;
 80099f2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80099f6:	b29b      	uxth	r3, r3
 80099f8:	3b01      	subs	r3, #1
 80099fa:	b29b      	uxth	r3, r3
 80099fc:	82fb      	strh	r3, [r7, #22]
      }
      *(pdata + recv_len) = 0;
 80099fe:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8009a02:	687a      	ldr	r2, [r7, #4]
 8009a04:	4413      	add	r3, r2
 8009a06:	2200      	movs	r2, #0
 8009a08:	701a      	strb	r2, [r3, #0]
      if(strstr((char *)pdata, AT_OK_STRING))
 8009a0a:	490f      	ldr	r1, [pc, #60]	; (8009a48 <AT_ExecuteCommand+0xc4>)
 8009a0c:	6878      	ldr	r0, [r7, #4]
 8009a0e:	f004 fd35 	bl	800e47c <strstr>
 8009a12:	4603      	mov	r3, r0
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d001      	beq.n	8009a1c <AT_ExecuteCommand+0x98>
      {
        UNLOCK_WIFI();
        return ES_WIFI_STATUS_OK;
 8009a18:	2300      	movs	r3, #0
 8009a1a:	e010      	b.n	8009a3e <AT_ExecuteCommand+0xba>
      }
      else if(strstr((char *)pdata, AT_ERROR_STRING))
 8009a1c:	490b      	ldr	r1, [pc, #44]	; (8009a4c <AT_ExecuteCommand+0xc8>)
 8009a1e:	6878      	ldr	r0, [r7, #4]
 8009a20:	f004 fd2c 	bl	800e47c <strstr>
 8009a24:	4603      	mov	r3, r0
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d001      	beq.n	8009a2e <AT_ExecuteCommand+0xaa>
      {
        UNLOCK_WIFI();
        return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 8009a2a:	2305      	movs	r3, #5
 8009a2c:	e007      	b.n	8009a3e <AT_ExecuteCommand+0xba>
      }
    }
    if (recv_len == ES_WIFI_ERROR_STUFFING_FOREVER )
 8009a2e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8009a32:	f113 0f04 	cmn.w	r3, #4
 8009a36:	d101      	bne.n	8009a3c <AT_ExecuteCommand+0xb8>
    {
      UNLOCK_WIFI();
      return ES_WIFI_STATUS_MODULE_CRASH;
 8009a38:	2306      	movs	r3, #6
 8009a3a:	e000      	b.n	8009a3e <AT_ExecuteCommand+0xba>
    }
  }
  UNLOCK_WIFI();
  return ES_WIFI_STATUS_IO_ERROR;
 8009a3c:	2304      	movs	r3, #4
}
 8009a3e:	4618      	mov	r0, r3
 8009a40:	371c      	adds	r7, #28
 8009a42:	46bd      	mov	sp, r7
 8009a44:	bd90      	pop	{r4, r7, pc}
 8009a46:	bf00      	nop
 8009a48:	0800fb24 	.word	0x0800fb24
 8009a4c:	0800fb30 	.word	0x0800fb30

08009a50 <ES_WIFI_Init>:
  * @brief  Initialize WIFI module.
  * @param  Obj: pointer to module handle
  * @retval Operation Status.
  */
ES_WIFI_Status_t  ES_WIFI_Init(ES_WIFIObject_t *Obj)
{
 8009a50:	b580      	push	{r7, lr}
 8009a52:	b084      	sub	sp, #16
 8009a54:	af00      	add	r7, sp, #0
 8009a56:	6078      	str	r0, [r7, #4]
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
 8009a58:	2302      	movs	r3, #2
 8009a5a:	73fb      	strb	r3, [r7, #15]

  LOCK_WIFI();

  Obj->Timeout = ES_WIFI_TIMEOUT;
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	f247 5230 	movw	r2, #30000	; 0x7530
 8009a62:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8

  if (Obj->fops.IO_Init(ES_WIFI_INIT) == 0)
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8009a6c:	2000      	movs	r0, #0
 8009a6e:	4798      	blx	r3
 8009a70:	4603      	mov	r3, r0
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d113      	bne.n	8009a9e <ES_WIFI_Init+0x4e>
  {
    ret = AT_ExecuteCommand(Obj,(uint8_t*)"I?\r\n", Obj->CmdData);
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8009a7c:	461a      	mov	r2, r3
 8009a7e:	490a      	ldr	r1, [pc, #40]	; (8009aa8 <ES_WIFI_Init+0x58>)
 8009a80:	6878      	ldr	r0, [r7, #4]
 8009a82:	f7ff ff7f 	bl	8009984 <AT_ExecuteCommand>
 8009a86:	4603      	mov	r3, r0
 8009a88:	73fb      	strb	r3, [r7, #15]

    if(ret == ES_WIFI_STATUS_OK)
 8009a8a:	7bfb      	ldrb	r3, [r7, #15]
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d106      	bne.n	8009a9e <ES_WIFI_Init+0x4e>
    {
      AT_ParseInfo (Obj, Obj->CmdData);
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8009a96:	4619      	mov	r1, r3
 8009a98:	6878      	ldr	r0, [r7, #4]
 8009a9a:	f7ff fe37 	bl	800970c <AT_ParseInfo>
    }
  }
  UNLOCK_WIFI();
  return ret;
 8009a9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009aa0:	4618      	mov	r0, r3
 8009aa2:	3710      	adds	r7, #16
 8009aa4:	46bd      	mov	sp, r7
 8009aa6:	bd80      	pop	{r7, pc}
 8009aa8:	0800fb40 	.word	0x0800fb40

08009aac <ES_WIFI_RegisterBusIO>:
ES_WIFI_Status_t  ES_WIFI_RegisterBusIO(ES_WIFIObject_t *Obj, IO_Init_Func IO_Init,
                                                              IO_DeInit_Func  IO_DeInit,
                                                              IO_Delay_Func   IO_Delay,
                                                              IO_Send_Func    IO_Send,
                                                              IO_Receive_Func  IO_Receive)
{
 8009aac:	b480      	push	{r7}
 8009aae:	b085      	sub	sp, #20
 8009ab0:	af00      	add	r7, sp, #0
 8009ab2:	60f8      	str	r0, [r7, #12]
 8009ab4:	60b9      	str	r1, [r7, #8]
 8009ab6:	607a      	str	r2, [r7, #4]
 8009ab8:	603b      	str	r3, [r7, #0]
  if(!Obj || !IO_Init || !IO_DeInit || !IO_Send || !IO_Receive)
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d00b      	beq.n	8009ad8 <ES_WIFI_RegisterBusIO+0x2c>
 8009ac0:	68bb      	ldr	r3, [r7, #8]
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d008      	beq.n	8009ad8 <ES_WIFI_RegisterBusIO+0x2c>
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d005      	beq.n	8009ad8 <ES_WIFI_RegisterBusIO+0x2c>
 8009acc:	69bb      	ldr	r3, [r7, #24]
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d002      	beq.n	8009ad8 <ES_WIFI_RegisterBusIO+0x2c>
 8009ad2:	69fb      	ldr	r3, [r7, #28]
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d101      	bne.n	8009adc <ES_WIFI_RegisterBusIO+0x30>
  {
    return ES_WIFI_STATUS_ERROR;
 8009ad8:	2302      	movs	r3, #2
 8009ada:	e014      	b.n	8009b06 <ES_WIFI_RegisterBusIO+0x5a>
  }

  Obj->fops.IO_Init = IO_Init;
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	68ba      	ldr	r2, [r7, #8]
 8009ae0:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
  Obj->fops.IO_DeInit = IO_DeInit;
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	687a      	ldr	r2, [r7, #4]
 8009ae8:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
  Obj->fops.IO_Send = IO_Send;
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	69ba      	ldr	r2, [r7, #24]
 8009af0:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
  Obj->fops.IO_Receive = IO_Receive;
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	69fa      	ldr	r2, [r7, #28]
 8009af8:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
  Obj->fops.IO_Delay = IO_Delay;
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	683a      	ldr	r2, [r7, #0]
 8009b00:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  return ES_WIFI_STATUS_OK;
 8009b04:	2300      	movs	r3, #0
}
 8009b06:	4618      	mov	r0, r3
 8009b08:	3714      	adds	r7, #20
 8009b0a:	46bd      	mov	sp, r7
 8009b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b10:	4770      	bx	lr
	...

08009b14 <ES_WIFI_Connect>:
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_Connect(ES_WIFIObject_t *Obj, const char* SSID,
                                         const char* Password,
                                         ES_WIFI_SecurityType_t SecType)
{
 8009b14:	b580      	push	{r7, lr}
 8009b16:	b086      	sub	sp, #24
 8009b18:	af00      	add	r7, sp, #0
 8009b1a:	60f8      	str	r0, [r7, #12]
 8009b1c:	60b9      	str	r1, [r7, #8]
 8009b1e:	607a      	str	r2, [r7, #4]
 8009b20:	70fb      	strb	r3, [r7, #3]
  ES_WIFI_Status_t ret;
  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"C1=%s\r", SSID);
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8009b28:	68ba      	ldr	r2, [r7, #8]
 8009b2a:	4932      	ldr	r1, [pc, #200]	; (8009bf4 <ES_WIFI_Connect+0xe0>)
 8009b2c:	4618      	mov	r0, r3
 8009b2e:	f004 fc2f 	bl	800e390 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8009b3e:	461a      	mov	r2, r3
 8009b40:	68f8      	ldr	r0, [r7, #12]
 8009b42:	f7ff ff1f 	bl	8009984 <AT_ExecuteCommand>
 8009b46:	4603      	mov	r3, r0
 8009b48:	75fb      	strb	r3, [r7, #23]
  if(ret == ES_WIFI_STATUS_OK)
 8009b4a:	7dfb      	ldrb	r3, [r7, #23]
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d14b      	bne.n	8009be8 <ES_WIFI_Connect+0xd4>
  {
    sprintf((char*)Obj->CmdData,"C2=%s\r", Password);
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8009b56:	687a      	ldr	r2, [r7, #4]
 8009b58:	4927      	ldr	r1, [pc, #156]	; (8009bf8 <ES_WIFI_Connect+0xe4>)
 8009b5a:	4618      	mov	r0, r3
 8009b5c:	f004 fc18 	bl	800e390 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8009b6c:	461a      	mov	r2, r3
 8009b6e:	68f8      	ldr	r0, [r7, #12]
 8009b70:	f7ff ff08 	bl	8009984 <AT_ExecuteCommand>
 8009b74:	4603      	mov	r3, r0
 8009b76:	75fb      	strb	r3, [r7, #23]

    if(ret == ES_WIFI_STATUS_OK)
 8009b78:	7dfb      	ldrb	r3, [r7, #23]
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d134      	bne.n	8009be8 <ES_WIFI_Connect+0xd4>
    {
      Obj->Security = SecType;
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	78fa      	ldrb	r2, [r7, #3]
 8009b82:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
      sprintf((char*)Obj->CmdData,"C3=%d\r", (uint8_t)SecType);
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8009b8c:	78fa      	ldrb	r2, [r7, #3]
 8009b8e:	491b      	ldr	r1, [pc, #108]	; (8009bfc <ES_WIFI_Connect+0xe8>)
 8009b90:	4618      	mov	r0, r3
 8009b92:	f004 fbfd 	bl	800e390 <siprintf>
      ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8009ba2:	461a      	mov	r2, r3
 8009ba4:	68f8      	ldr	r0, [r7, #12]
 8009ba6:	f7ff feed 	bl	8009984 <AT_ExecuteCommand>
 8009baa:	4603      	mov	r3, r0
 8009bac:	75fb      	strb	r3, [r7, #23]

      if(ret == ES_WIFI_STATUS_OK)
 8009bae:	7dfb      	ldrb	r3, [r7, #23]
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d119      	bne.n	8009be8 <ES_WIFI_Connect+0xd4>
      {
        sprintf((char*)Obj->CmdData,"C0\r");
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8009bba:	4911      	ldr	r1, [pc, #68]	; (8009c00 <ES_WIFI_Connect+0xec>)
 8009bbc:	4618      	mov	r0, r3
 8009bbe:	f004 fbe7 	bl	800e390 <siprintf>
        ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8009bce:	461a      	mov	r2, r3
 8009bd0:	68f8      	ldr	r0, [r7, #12]
 8009bd2:	f7ff fed7 	bl	8009984 <AT_ExecuteCommand>
 8009bd6:	4603      	mov	r3, r0
 8009bd8:	75fb      	strb	r3, [r7, #23]
        if(ret == ES_WIFI_STATUS_OK)
 8009bda:	7dfb      	ldrb	r3, [r7, #23]
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d103      	bne.n	8009be8 <ES_WIFI_Connect+0xd4>
        {
           Obj->NetSettings.IsConnected = 1;
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	2201      	movs	r2, #1
 8009be4:	f883 20d2 	strb.w	r2, [r3, #210]	; 0xd2
        }
      }
    }
  }
  UNLOCK_WIFI();
  return ret;
 8009be8:	7dfb      	ldrb	r3, [r7, #23]
}
 8009bea:	4618      	mov	r0, r3
 8009bec:	3718      	adds	r7, #24
 8009bee:	46bd      	mov	sp, r7
 8009bf0:	bd80      	pop	{r7, pc}
 8009bf2:	bf00      	nop
 8009bf4:	0800fb58 	.word	0x0800fb58
 8009bf8:	0800fb60 	.word	0x0800fb60
 8009bfc:	0800fb68 	.word	0x0800fb68
 8009c00:	0800fb70 	.word	0x0800fb70

08009c04 <ES_WIFI_IsConnected>:
/**
  * @brief  Check whether the module is connected to an access point.
  * @retval Operation Status.
  */
uint8_t ES_WIFI_IsConnected(ES_WIFIObject_t *Obj)
{
 8009c04:	b580      	push	{r7, lr}
 8009c06:	b084      	sub	sp, #16
 8009c08:	af00      	add	r7, sp, #0
 8009c0a:	6078      	str	r0, [r7, #4]
  ES_WIFI_Status_t ret ;
  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"CS\r");
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8009c12:	4911      	ldr	r1, [pc, #68]	; (8009c58 <ES_WIFI_IsConnected+0x54>)
 8009c14:	4618      	mov	r0, r3
 8009c16:	f004 fbbb 	bl	800e390 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8009c26:	461a      	mov	r2, r3
 8009c28:	6878      	ldr	r0, [r7, #4]
 8009c2a:	f7ff feab 	bl	8009984 <AT_ExecuteCommand>
 8009c2e:	4603      	mov	r3, r0
 8009c30:	73fb      	strb	r3, [r7, #15]
  if(ret == ES_WIFI_STATUS_OK)
 8009c32:	7bfb      	ldrb	r3, [r7, #15]
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d108      	bne.n	8009c4a <ES_WIFI_IsConnected+0x46>
  {
    AT_ParseIsConnected((char *)Obj->CmdData, &(Obj->NetSettings.IsConnected));
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	f503 7294 	add.w	r2, r3, #296	; 0x128
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	33d2      	adds	r3, #210	; 0xd2
 8009c42:	4619      	mov	r1, r3
 8009c44:	4610      	mov	r0, r2
 8009c46:	f7ff fe87 	bl	8009958 <AT_ParseIsConnected>
  }
  UNLOCK_WIFI();
  return Obj->NetSettings.IsConnected;
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	f893 30d2 	ldrb.w	r3, [r3, #210]	; 0xd2
}
 8009c50:	4618      	mov	r0, r3
 8009c52:	3710      	adds	r7, #16
 8009c54:	46bd      	mov	sp, r7
 8009c56:	bd80      	pop	{r7, pc}
 8009c58:	0800fb74 	.word	0x0800fb74

08009c5c <ES_WIFI_GetNetworkSettings>:
  * @param  Obj: pointer to module handle
  * @param  Pointer to network setting structure.
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_GetNetworkSettings(ES_WIFIObject_t *Obj)
{
 8009c5c:	b580      	push	{r7, lr}
 8009c5e:	b084      	sub	sp, #16
 8009c60:	af00      	add	r7, sp, #0
 8009c62:	6078      	str	r0, [r7, #4]
  ES_WIFI_Status_t ret;
  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"C?\r");
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8009c6a:	4910      	ldr	r1, [pc, #64]	; (8009cac <ES_WIFI_GetNetworkSettings+0x50>)
 8009c6c:	4618      	mov	r0, r3
 8009c6e:	f004 fb8f 	bl	800e390 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8009c7e:	461a      	mov	r2, r3
 8009c80:	6878      	ldr	r0, [r7, #4]
 8009c82:	f7ff fe7f 	bl	8009984 <AT_ExecuteCommand>
 8009c86:	4603      	mov	r3, r0
 8009c88:	73fb      	strb	r3, [r7, #15]

  if(ret == ES_WIFI_STATUS_OK)
 8009c8a:	7bfb      	ldrb	r3, [r7, #15]
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d108      	bne.n	8009ca2 <ES_WIFI_GetNetworkSettings+0x46>
  {
     AT_ParseConnSettings((char *)Obj->CmdData, &Obj->NetSettings);
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	f503 7294 	add.w	r2, r3, #296	; 0x128
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	338d      	adds	r3, #141	; 0x8d
 8009c9a:	4619      	mov	r1, r3
 8009c9c:	4610      	mov	r0, r2
 8009c9e:	f7ff fdab 	bl	80097f8 <AT_ParseConnSettings>
  }

  UNLOCK_WIFI();
  return ret;
 8009ca2:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ca4:	4618      	mov	r0, r3
 8009ca6:	3710      	adds	r7, #16
 8009ca8:	46bd      	mov	sp, r7
 8009caa:	bd80      	pop	{r7, pc}
 8009cac:	0800fb7c 	.word	0x0800fb7c

08009cb0 <ES_WIFI_GetMACAddress>:
  * @param  Obj: pointer to module handle
  * @param  mac: pointer to the MAC address array.
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_GetMACAddress(ES_WIFIObject_t *Obj, uint8_t *mac)
{
 8009cb0:	b580      	push	{r7, lr}
 8009cb2:	b084      	sub	sp, #16
 8009cb4:	af00      	add	r7, sp, #0
 8009cb6:	6078      	str	r0, [r7, #4]
 8009cb8:	6039      	str	r1, [r7, #0]
  ES_WIFI_Status_t ret ;
  char *ptr;
  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"Z5\r");
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8009cc0:	4912      	ldr	r1, [pc, #72]	; (8009d0c <ES_WIFI_GetMACAddress+0x5c>)
 8009cc2:	4618      	mov	r0, r3
 8009cc4:	f004 fb64 	bl	800e390 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8009cd4:	461a      	mov	r2, r3
 8009cd6:	6878      	ldr	r0, [r7, #4]
 8009cd8:	f7ff fe54 	bl	8009984 <AT_ExecuteCommand>
 8009cdc:	4603      	mov	r3, r0
 8009cde:	73fb      	strb	r3, [r7, #15]
  if(ret == ES_WIFI_STATUS_OK)
 8009ce0:	7bfb      	ldrb	r3, [r7, #15]
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d10c      	bne.n	8009d00 <ES_WIFI_GetMACAddress+0x50>
  {
    ptr = strtok((char *)(Obj->CmdData + 2), "\r\n");
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8009cec:	3302      	adds	r3, #2
 8009cee:	4908      	ldr	r1, [pc, #32]	; (8009d10 <ES_WIFI_GetMACAddress+0x60>)
 8009cf0:	4618      	mov	r0, r3
 8009cf2:	f004 fbd9 	bl	800e4a8 <strtok>
 8009cf6:	60b8      	str	r0, [r7, #8]
    ParseMAC(ptr, mac) ;
 8009cf8:	6839      	ldr	r1, [r7, #0]
 8009cfa:	68b8      	ldr	r0, [r7, #8]
 8009cfc:	f7ff fcb0 	bl	8009660 <ParseMAC>
  }
  UNLOCK_WIFI();
  return ret;
 8009d00:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d02:	4618      	mov	r0, r3
 8009d04:	3710      	adds	r7, #16
 8009d06:	46bd      	mov	sp, r7
 8009d08:	bd80      	pop	{r7, pc}
 8009d0a:	bf00      	nop
 8009d0c:	0800fbcc 	.word	0x0800fbcc
 8009d10:	0800fbd0 	.word	0x0800fbd0

08009d14 <SPI_WIFI_MspInit>:
  * @brief  Initialize SPI MSP
  * @param  hspi: SPI handle
  * @retval None
  */
void SPI_WIFI_MspInit(SPI_HandleTypeDef* hspi)
{
 8009d14:	b580      	push	{r7, lr}
 8009d16:	b08c      	sub	sp, #48	; 0x30
 8009d18:	af00      	add	r7, sp, #0
 8009d1a:	6078      	str	r0, [r7, #4]
  
  GPIO_InitTypeDef GPIO_Init;
  
  __HAL_RCC_SPI3_CLK_ENABLE();
 8009d1c:	4b56      	ldr	r3, [pc, #344]	; (8009e78 <SPI_WIFI_MspInit+0x164>)
 8009d1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009d20:	4a55      	ldr	r2, [pc, #340]	; (8009e78 <SPI_WIFI_MspInit+0x164>)
 8009d22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009d26:	6593      	str	r3, [r2, #88]	; 0x58
 8009d28:	4b53      	ldr	r3, [pc, #332]	; (8009e78 <SPI_WIFI_MspInit+0x164>)
 8009d2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009d2c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009d30:	61bb      	str	r3, [r7, #24]
 8009d32:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009d34:	4b50      	ldr	r3, [pc, #320]	; (8009e78 <SPI_WIFI_MspInit+0x164>)
 8009d36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009d38:	4a4f      	ldr	r2, [pc, #316]	; (8009e78 <SPI_WIFI_MspInit+0x164>)
 8009d3a:	f043 0302 	orr.w	r3, r3, #2
 8009d3e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009d40:	4b4d      	ldr	r3, [pc, #308]	; (8009e78 <SPI_WIFI_MspInit+0x164>)
 8009d42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009d44:	f003 0302 	and.w	r3, r3, #2
 8009d48:	617b      	str	r3, [r7, #20]
 8009d4a:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8009d4c:	4b4a      	ldr	r3, [pc, #296]	; (8009e78 <SPI_WIFI_MspInit+0x164>)
 8009d4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009d50:	4a49      	ldr	r2, [pc, #292]	; (8009e78 <SPI_WIFI_MspInit+0x164>)
 8009d52:	f043 0304 	orr.w	r3, r3, #4
 8009d56:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009d58:	4b47      	ldr	r3, [pc, #284]	; (8009e78 <SPI_WIFI_MspInit+0x164>)
 8009d5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009d5c:	f003 0304 	and.w	r3, r3, #4
 8009d60:	613b      	str	r3, [r7, #16]
 8009d62:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8009d64:	4b44      	ldr	r3, [pc, #272]	; (8009e78 <SPI_WIFI_MspInit+0x164>)
 8009d66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009d68:	4a43      	ldr	r2, [pc, #268]	; (8009e78 <SPI_WIFI_MspInit+0x164>)
 8009d6a:	f043 0310 	orr.w	r3, r3, #16
 8009d6e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009d70:	4b41      	ldr	r3, [pc, #260]	; (8009e78 <SPI_WIFI_MspInit+0x164>)
 8009d72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009d74:	f003 0310 	and.w	r3, r3, #16
 8009d78:	60fb      	str	r3, [r7, #12]
 8009d7a:	68fb      	ldr	r3, [r7, #12]
    
  /* configure Wake up pin */
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13, GPIO_PIN_RESET );
 8009d7c:	2200      	movs	r2, #0
 8009d7e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8009d82:	483e      	ldr	r0, [pc, #248]	; (8009e7c <SPI_WIFI_MspInit+0x168>)
 8009d84:	f7f9 f88a 	bl	8002e9c <HAL_GPIO_WritePin>
  GPIO_Init.Pin       = GPIO_PIN_13;
 8009d88:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009d8c:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 8009d8e:	2301      	movs	r3, #1
 8009d90:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 8009d92:	2300      	movs	r3, #0
 8009d94:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 8009d96:	2300      	movs	r3, #0
 8009d98:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_Init );
 8009d9a:	f107 031c 	add.w	r3, r7, #28
 8009d9e:	4619      	mov	r1, r3
 8009da0:	4836      	ldr	r0, [pc, #216]	; (8009e7c <SPI_WIFI_MspInit+0x168>)
 8009da2:	f7f8 fdc5 	bl	8002930 <HAL_GPIO_Init>

  /* configure Data ready pin */
  GPIO_Init.Pin       = GPIO_PIN_1;
 8009da6:	2302      	movs	r3, #2
 8009da8:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_IT_RISING;
 8009daa:	4b35      	ldr	r3, [pc, #212]	; (8009e80 <SPI_WIFI_MspInit+0x16c>)
 8009dac:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 8009dae:	2300      	movs	r3, #0
 8009db0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 8009db2:	2300      	movs	r3, #0
 8009db4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_Init );
 8009db6:	f107 031c 	add.w	r3, r7, #28
 8009dba:	4619      	mov	r1, r3
 8009dbc:	4831      	ldr	r0, [pc, #196]	; (8009e84 <SPI_WIFI_MspInit+0x170>)
 8009dbe:	f7f8 fdb7 	bl	8002930 <HAL_GPIO_Init>

  /* configure Reset pin */
  GPIO_Init.Pin       = GPIO_PIN_8;
 8009dc2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009dc6:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 8009dc8:	2301      	movs	r3, #1
 8009dca:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 8009dcc:	2300      	movs	r3, #0
 8009dce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 8009dd0:	2300      	movs	r3, #0
 8009dd2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_Init.Alternate = 0;
 8009dd4:	2300      	movs	r3, #0
 8009dd6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_Init );
 8009dd8:	f107 031c 	add.w	r3, r7, #28
 8009ddc:	4619      	mov	r1, r3
 8009dde:	4829      	ldr	r0, [pc, #164]	; (8009e84 <SPI_WIFI_MspInit+0x170>)
 8009de0:	f7f8 fda6 	bl	8002930 <HAL_GPIO_Init>
  
  /* configure SPI NSS pin pin */
  HAL_GPIO_WritePin( GPIOE , GPIO_PIN_0, GPIO_PIN_SET );
 8009de4:	2201      	movs	r2, #1
 8009de6:	2101      	movs	r1, #1
 8009de8:	4826      	ldr	r0, [pc, #152]	; (8009e84 <SPI_WIFI_MspInit+0x170>)
 8009dea:	f7f9 f857 	bl	8002e9c <HAL_GPIO_WritePin>
  GPIO_Init.Pin       =  GPIO_PIN_0;
 8009dee:	2301      	movs	r3, #1
 8009df0:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 8009df2:	2301      	movs	r3, #1
 8009df4:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 8009df6:	2300      	movs	r3, #0
 8009df8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 8009dfa:	2301      	movs	r3, #1
 8009dfc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init( GPIOE, &GPIO_Init );
 8009dfe:	f107 031c 	add.w	r3, r7, #28
 8009e02:	4619      	mov	r1, r3
 8009e04:	481f      	ldr	r0, [pc, #124]	; (8009e84 <SPI_WIFI_MspInit+0x170>)
 8009e06:	f7f8 fd93 	bl	8002930 <HAL_GPIO_Init>
  
  /* configure SPI CLK pin */
  GPIO_Init.Pin       =  GPIO_PIN_10;
 8009e0a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009e0e:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 8009e10:	2302      	movs	r3, #2
 8009e12:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 8009e14:	2300      	movs	r3, #0
 8009e16:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 8009e18:	2301      	movs	r3, #1
 8009e1a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 8009e1c:	2306      	movs	r3, #6
 8009e1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_Init );
 8009e20:	f107 031c 	add.w	r3, r7, #28
 8009e24:	4619      	mov	r1, r3
 8009e26:	4818      	ldr	r0, [pc, #96]	; (8009e88 <SPI_WIFI_MspInit+0x174>)
 8009e28:	f7f8 fd82 	bl	8002930 <HAL_GPIO_Init>
  
  /* configure SPI MOSI pin */
  GPIO_Init.Pin       = GPIO_PIN_12;
 8009e2c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009e30:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 8009e32:	2302      	movs	r3, #2
 8009e34:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 8009e36:	2300      	movs	r3, #0
 8009e38:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 8009e3a:	2301      	movs	r3, #1
 8009e3c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 8009e3e:	2306      	movs	r3, #6
 8009e40:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init( GPIOC, &GPIO_Init );
 8009e42:	f107 031c 	add.w	r3, r7, #28
 8009e46:	4619      	mov	r1, r3
 8009e48:	480f      	ldr	r0, [pc, #60]	; (8009e88 <SPI_WIFI_MspInit+0x174>)
 8009e4a:	f7f8 fd71 	bl	8002930 <HAL_GPIO_Init>
  
  /* configure SPI MISO pin */
  GPIO_Init.Pin       = GPIO_PIN_11;
 8009e4e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009e52:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 8009e54:	2302      	movs	r3, #2
 8009e56:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_PULLUP;
 8009e58:	2301      	movs	r3, #1
 8009e5a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 8009e5c:	2301      	movs	r3, #1
 8009e5e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 8009e60:	2306      	movs	r3, #6
 8009e62:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init( GPIOC,&GPIO_Init );
 8009e64:	f107 031c 	add.w	r3, r7, #28
 8009e68:	4619      	mov	r1, r3
 8009e6a:	4807      	ldr	r0, [pc, #28]	; (8009e88 <SPI_WIFI_MspInit+0x174>)
 8009e6c:	f7f8 fd60 	bl	8002930 <HAL_GPIO_Init>
}
 8009e70:	bf00      	nop
 8009e72:	3730      	adds	r7, #48	; 0x30
 8009e74:	46bd      	mov	sp, r7
 8009e76:	bd80      	pop	{r7, pc}
 8009e78:	40021000 	.word	0x40021000
 8009e7c:	48000400 	.word	0x48000400
 8009e80:	10110000 	.word	0x10110000
 8009e84:	48001000 	.word	0x48001000
 8009e88:	48000800 	.word	0x48000800

08009e8c <SPI_WIFI_Init>:
  * @brief  Initialize the SPI3
  * @param  None
  * @retval None
  */
int8_t SPI_WIFI_Init(uint16_t mode)
{
 8009e8c:	b580      	push	{r7, lr}
 8009e8e:	b084      	sub	sp, #16
 8009e90:	af00      	add	r7, sp, #0
 8009e92:	4603      	mov	r3, r0
 8009e94:	80fb      	strh	r3, [r7, #6]
  int8_t  rc=0;
 8009e96:	2300      	movs	r3, #0
 8009e98:	73fb      	strb	r3, [r7, #15]
  
  if (mode == ES_WIFI_INIT)
 8009e9a:	88fb      	ldrh	r3, [r7, #6]
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d145      	bne.n	8009f2c <SPI_WIFI_Init+0xa0>
  {
    hspi.Instance               = SPI3;
 8009ea0:	4b27      	ldr	r3, [pc, #156]	; (8009f40 <SPI_WIFI_Init+0xb4>)
 8009ea2:	4a28      	ldr	r2, [pc, #160]	; (8009f44 <SPI_WIFI_Init+0xb8>)
 8009ea4:	601a      	str	r2, [r3, #0]
    SPI_WIFI_MspInit(&hspi);
 8009ea6:	4826      	ldr	r0, [pc, #152]	; (8009f40 <SPI_WIFI_Init+0xb4>)
 8009ea8:	f7ff ff34 	bl	8009d14 <SPI_WIFI_MspInit>
  
    hspi.Init.Mode              = SPI_MODE_MASTER;
 8009eac:	4b24      	ldr	r3, [pc, #144]	; (8009f40 <SPI_WIFI_Init+0xb4>)
 8009eae:	f44f 7282 	mov.w	r2, #260	; 0x104
 8009eb2:	605a      	str	r2, [r3, #4]
    hspi.Init.Direction         = SPI_DIRECTION_2LINES;
 8009eb4:	4b22      	ldr	r3, [pc, #136]	; (8009f40 <SPI_WIFI_Init+0xb4>)
 8009eb6:	2200      	movs	r2, #0
 8009eb8:	609a      	str	r2, [r3, #8]
    hspi.Init.DataSize          = SPI_DATASIZE_16BIT;
 8009eba:	4b21      	ldr	r3, [pc, #132]	; (8009f40 <SPI_WIFI_Init+0xb4>)
 8009ebc:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 8009ec0:	60da      	str	r2, [r3, #12]
    hspi.Init.CLKPolarity       = SPI_POLARITY_LOW;
 8009ec2:	4b1f      	ldr	r3, [pc, #124]	; (8009f40 <SPI_WIFI_Init+0xb4>)
 8009ec4:	2200      	movs	r2, #0
 8009ec6:	611a      	str	r2, [r3, #16]
    hspi.Init.CLKPhase          = SPI_PHASE_1EDGE;
 8009ec8:	4b1d      	ldr	r3, [pc, #116]	; (8009f40 <SPI_WIFI_Init+0xb4>)
 8009eca:	2200      	movs	r2, #0
 8009ecc:	615a      	str	r2, [r3, #20]
    hspi.Init.NSS               = SPI_NSS_SOFT;
 8009ece:	4b1c      	ldr	r3, [pc, #112]	; (8009f40 <SPI_WIFI_Init+0xb4>)
 8009ed0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009ed4:	619a      	str	r2, [r3, #24]
    hspi.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8; /* 80/8= 10MHz (Inventek WIFI module supports up to 20MHz)*/
 8009ed6:	4b1a      	ldr	r3, [pc, #104]	; (8009f40 <SPI_WIFI_Init+0xb4>)
 8009ed8:	2210      	movs	r2, #16
 8009eda:	61da      	str	r2, [r3, #28]
    hspi.Init.FirstBit          = SPI_FIRSTBIT_MSB;
 8009edc:	4b18      	ldr	r3, [pc, #96]	; (8009f40 <SPI_WIFI_Init+0xb4>)
 8009ede:	2200      	movs	r2, #0
 8009ee0:	621a      	str	r2, [r3, #32]
    hspi.Init.TIMode            = SPI_TIMODE_DISABLE;
 8009ee2:	4b17      	ldr	r3, [pc, #92]	; (8009f40 <SPI_WIFI_Init+0xb4>)
 8009ee4:	2200      	movs	r2, #0
 8009ee6:	625a      	str	r2, [r3, #36]	; 0x24
    hspi.Init.CRCCalculation    = SPI_CRCCALCULATION_DISABLE;
 8009ee8:	4b15      	ldr	r3, [pc, #84]	; (8009f40 <SPI_WIFI_Init+0xb4>)
 8009eea:	2200      	movs	r2, #0
 8009eec:	629a      	str	r2, [r3, #40]	; 0x28
    hspi.Init.CRCPolynomial     = 0;
 8009eee:	4b14      	ldr	r3, [pc, #80]	; (8009f40 <SPI_WIFI_Init+0xb4>)
 8009ef0:	2200      	movs	r2, #0
 8009ef2:	62da      	str	r2, [r3, #44]	; 0x2c
  
    if(HAL_SPI_Init( &hspi ) != HAL_OK)
 8009ef4:	4812      	ldr	r0, [pc, #72]	; (8009f40 <SPI_WIFI_Init+0xb4>)
 8009ef6:	f7fb fe2f 	bl	8005b58 <HAL_SPI_Init>
 8009efa:	4603      	mov	r3, r0
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d002      	beq.n	8009f06 <SPI_WIFI_Init+0x7a>
    {
      return -1;
 8009f00:	f04f 33ff 	mov.w	r3, #4294967295
 8009f04:	e018      	b.n	8009f38 <SPI_WIFI_Init+0xac>
    }

     /* Enable Interrupt for Data Ready pin , GPIO_PIN1 */
     HAL_NVIC_SetPriority((IRQn_Type)EXTI1_IRQn, SPI_INTERFACE_PRIO, 0x00);
 8009f06:	2200      	movs	r2, #0
 8009f08:	2100      	movs	r1, #0
 8009f0a:	2007      	movs	r0, #7
 8009f0c:	f7f8 fb4c 	bl	80025a8 <HAL_NVIC_SetPriority>
     HAL_NVIC_EnableIRQ((IRQn_Type)EXTI1_IRQn);
 8009f10:	2007      	movs	r0, #7
 8009f12:	f7f8 fb65 	bl	80025e0 <HAL_NVIC_EnableIRQ>
     
     /* Enable Interrupt for SPI tx and rx */
     HAL_NVIC_SetPriority((IRQn_Type)SPI3_IRQn, SPI_INTERFACE_PRIO, 0);
 8009f16:	2200      	movs	r2, #0
 8009f18:	2100      	movs	r1, #0
 8009f1a:	2033      	movs	r0, #51	; 0x33
 8009f1c:	f7f8 fb44 	bl	80025a8 <HAL_NVIC_SetPriority>
     HAL_NVIC_EnableIRQ((IRQn_Type)SPI3_IRQn);
 8009f20:	2033      	movs	r0, #51	; 0x33
 8009f22:	f7f8 fb5d 	bl	80025e0 <HAL_NVIC_EnableIRQ>
    SEM_WAIT(spi_rx_sem, 1);
    SEM_WAIT(spi_tx_sem, 1);

#endif
    /* first call used for calibration */
    SPI_WIFI_DelayUs(10);
 8009f26:	200a      	movs	r0, #10
 8009f28:	f000 f9fe 	bl	800a328 <SPI_WIFI_DelayUs>
  }
  
  rc= SPI_WIFI_ResetModule();
 8009f2c:	f000 f80c 	bl	8009f48 <SPI_WIFI_ResetModule>
 8009f30:	4603      	mov	r3, r0
 8009f32:	73fb      	strb	r3, [r7, #15]

  return rc;
 8009f34:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009f38:	4618      	mov	r0, r3
 8009f3a:	3710      	adds	r7, #16
 8009f3c:	46bd      	mov	sp, r7
 8009f3e:	bd80      	pop	{r7, pc}
 8009f40:	2000088c 	.word	0x2000088c
 8009f44:	40003c00 	.word	0x40003c00

08009f48 <SPI_WIFI_ResetModule>:


int8_t SPI_WIFI_ResetModule(void)
{
 8009f48:	b580      	push	{r7, lr}
 8009f4a:	b084      	sub	sp, #16
 8009f4c:	af00      	add	r7, sp, #0
  uint32_t tickstart = HAL_GetTick();
 8009f4e:	f7f8 fa1f 	bl	8002390 <HAL_GetTick>
 8009f52:	60b8      	str	r0, [r7, #8]
  uint8_t Prompt[6];
  uint8_t count = 0;
 8009f54:	2300      	movs	r3, #0
 8009f56:	73fb      	strb	r3, [r7, #15]
  HAL_StatusTypeDef  Status;
 
  WIFI_RESET_MODULE();
 8009f58:	2200      	movs	r2, #0
 8009f5a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8009f5e:	4830      	ldr	r0, [pc, #192]	; (800a020 <SPI_WIFI_ResetModule+0xd8>)
 8009f60:	f7f8 ff9c 	bl	8002e9c <HAL_GPIO_WritePin>
 8009f64:	200a      	movs	r0, #10
 8009f66:	f7f8 fa1f 	bl	80023a8 <HAL_Delay>
 8009f6a:	2201      	movs	r2, #1
 8009f6c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8009f70:	482b      	ldr	r0, [pc, #172]	; (800a020 <SPI_WIFI_ResetModule+0xd8>)
 8009f72:	f7f8 ff93 	bl	8002e9c <HAL_GPIO_WritePin>
 8009f76:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8009f7a:	f7f8 fa15 	bl	80023a8 <HAL_Delay>
  WIFI_ENABLE_NSS(); 
 8009f7e:	2200      	movs	r2, #0
 8009f80:	2101      	movs	r1, #1
 8009f82:	4827      	ldr	r0, [pc, #156]	; (800a020 <SPI_WIFI_ResetModule+0xd8>)
 8009f84:	f7f8 ff8a 	bl	8002e9c <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(15);
 8009f88:	200f      	movs	r0, #15
 8009f8a:	f000 f9cd 	bl	800a328 <SPI_WIFI_DelayUs>
 
  while (WIFI_IS_CMDDATA_READY())
 8009f8e:	e020      	b.n	8009fd2 <SPI_WIFI_ResetModule+0x8a>
  {
    Status = HAL_SPI_Receive(&hspi , &Prompt[count], 1, 0xFFFF);
 8009f90:	7bfb      	ldrb	r3, [r7, #15]
 8009f92:	463a      	mov	r2, r7
 8009f94:	18d1      	adds	r1, r2, r3
 8009f96:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009f9a:	2201      	movs	r2, #1
 8009f9c:	4821      	ldr	r0, [pc, #132]	; (800a024 <SPI_WIFI_ResetModule+0xdc>)
 8009f9e:	f7fb fea6 	bl	8005cee <HAL_SPI_Receive>
 8009fa2:	4603      	mov	r3, r0
 8009fa4:	71fb      	strb	r3, [r7, #7]
    count += 2;
 8009fa6:	7bfb      	ldrb	r3, [r7, #15]
 8009fa8:	3302      	adds	r3, #2
 8009faa:	73fb      	strb	r3, [r7, #15]
    if(((HAL_GetTick() - tickstart ) > 0xFFFF) || (Status != HAL_OK))
 8009fac:	f7f8 f9f0 	bl	8002390 <HAL_GetTick>
 8009fb0:	4602      	mov	r2, r0
 8009fb2:	68bb      	ldr	r3, [r7, #8]
 8009fb4:	1ad3      	subs	r3, r2, r3
 8009fb6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009fba:	d202      	bcs.n	8009fc2 <SPI_WIFI_ResetModule+0x7a>
 8009fbc:	79fb      	ldrb	r3, [r7, #7]
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d007      	beq.n	8009fd2 <SPI_WIFI_ResetModule+0x8a>
    {
      WIFI_DISABLE_NSS();
 8009fc2:	2201      	movs	r2, #1
 8009fc4:	2101      	movs	r1, #1
 8009fc6:	4816      	ldr	r0, [pc, #88]	; (800a020 <SPI_WIFI_ResetModule+0xd8>)
 8009fc8:	f7f8 ff68 	bl	8002e9c <HAL_GPIO_WritePin>
      return -1;
 8009fcc:	f04f 33ff 	mov.w	r3, #4294967295
 8009fd0:	e021      	b.n	800a016 <SPI_WIFI_ResetModule+0xce>
  while (WIFI_IS_CMDDATA_READY())
 8009fd2:	2102      	movs	r1, #2
 8009fd4:	4812      	ldr	r0, [pc, #72]	; (800a020 <SPI_WIFI_ResetModule+0xd8>)
 8009fd6:	f7f8 ff49 	bl	8002e6c <HAL_GPIO_ReadPin>
 8009fda:	4603      	mov	r3, r0
 8009fdc:	2b01      	cmp	r3, #1
 8009fde:	d0d7      	beq.n	8009f90 <SPI_WIFI_ResetModule+0x48>
    }    
  }
  
  WIFI_DISABLE_NSS();
 8009fe0:	2201      	movs	r2, #1
 8009fe2:	2101      	movs	r1, #1
 8009fe4:	480e      	ldr	r0, [pc, #56]	; (800a020 <SPI_WIFI_ResetModule+0xd8>)
 8009fe6:	f7f8 ff59 	bl	8002e9c <HAL_GPIO_WritePin>
  if((Prompt[0] != 0x15) ||(Prompt[1] != 0x15) ||(Prompt[2] != '\r')||
 8009fea:	783b      	ldrb	r3, [r7, #0]
 8009fec:	2b15      	cmp	r3, #21
 8009fee:	d10e      	bne.n	800a00e <SPI_WIFI_ResetModule+0xc6>
 8009ff0:	787b      	ldrb	r3, [r7, #1]
 8009ff2:	2b15      	cmp	r3, #21
 8009ff4:	d10b      	bne.n	800a00e <SPI_WIFI_ResetModule+0xc6>
 8009ff6:	78bb      	ldrb	r3, [r7, #2]
 8009ff8:	2b0d      	cmp	r3, #13
 8009ffa:	d108      	bne.n	800a00e <SPI_WIFI_ResetModule+0xc6>
       (Prompt[3] != '\n') ||(Prompt[4] != '>') ||(Prompt[5] != ' '))
 8009ffc:	78fb      	ldrb	r3, [r7, #3]
  if((Prompt[0] != 0x15) ||(Prompt[1] != 0x15) ||(Prompt[2] != '\r')||
 8009ffe:	2b0a      	cmp	r3, #10
 800a000:	d105      	bne.n	800a00e <SPI_WIFI_ResetModule+0xc6>
       (Prompt[3] != '\n') ||(Prompt[4] != '>') ||(Prompt[5] != ' '))
 800a002:	793b      	ldrb	r3, [r7, #4]
 800a004:	2b3e      	cmp	r3, #62	; 0x3e
 800a006:	d102      	bne.n	800a00e <SPI_WIFI_ResetModule+0xc6>
 800a008:	797b      	ldrb	r3, [r7, #5]
 800a00a:	2b20      	cmp	r3, #32
 800a00c:	d002      	beq.n	800a014 <SPI_WIFI_ResetModule+0xcc>
  {
    return -1;
 800a00e:	f04f 33ff 	mov.w	r3, #4294967295
 800a012:	e000      	b.n	800a016 <SPI_WIFI_ResetModule+0xce>
  }    
  return 0;
 800a014:	2300      	movs	r3, #0
}
 800a016:	4618      	mov	r0, r3
 800a018:	3710      	adds	r7, #16
 800a01a:	46bd      	mov	sp, r7
 800a01c:	bd80      	pop	{r7, pc}
 800a01e:	bf00      	nop
 800a020:	48001000 	.word	0x48001000
 800a024:	2000088c 	.word	0x2000088c

0800a028 <SPI_WIFI_DeInit>:
  * @brief  DeInitialize the SPI
  * @param  None
  * @retval None
  */
int8_t SPI_WIFI_DeInit(void)
{
 800a028:	b580      	push	{r7, lr}
 800a02a:	af00      	add	r7, sp, #0
  HAL_SPI_DeInit( &hspi );
 800a02c:	4802      	ldr	r0, [pc, #8]	; (800a038 <SPI_WIFI_DeInit+0x10>)
 800a02e:	f7fb fe36 	bl	8005c9e <HAL_SPI_DeInit>
  osMutexDelete(es_wifi_mutex);
  osSemaphoreDelete(spi_tx_sem);
  osSemaphoreDelete(spi_rx_sem);
  osSemaphoreDelete(cmddata_rdy_rising_sem);
#endif
  return 0;
 800a032:	2300      	movs	r3, #0
}
 800a034:	4618      	mov	r0, r3
 800a036:	bd80      	pop	{r7, pc}
 800a038:	2000088c 	.word	0x2000088c

0800a03c <wait_cmddata_rdy_high>:
  * @param  timeout : send timeout in mS
  * @retval Length of received data (payload)
  */

int wait_cmddata_rdy_high(int timeout)
{
 800a03c:	b580      	push	{r7, lr}
 800a03e:	b084      	sub	sp, #16
 800a040:	af00      	add	r7, sp, #0
 800a042:	6078      	str	r0, [r7, #4]
  int tickstart = HAL_GetTick();
 800a044:	f7f8 f9a4 	bl	8002390 <HAL_GetTick>
 800a048:	4603      	mov	r3, r0
 800a04a:	60fb      	str	r3, [r7, #12]
  while (WIFI_IS_CMDDATA_READY()==0)
 800a04c:	e00a      	b.n	800a064 <wait_cmddata_rdy_high+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 800a04e:	f7f8 f99f 	bl	8002390 <HAL_GetTick>
 800a052:	4602      	mov	r2, r0
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	1ad2      	subs	r2, r2, r3
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	429a      	cmp	r2, r3
 800a05c:	d902      	bls.n	800a064 <wait_cmddata_rdy_high+0x28>
    {
      return -1;
 800a05e:	f04f 33ff 	mov.w	r3, #4294967295
 800a062:	e007      	b.n	800a074 <wait_cmddata_rdy_high+0x38>
  while (WIFI_IS_CMDDATA_READY()==0)
 800a064:	2102      	movs	r1, #2
 800a066:	4805      	ldr	r0, [pc, #20]	; (800a07c <wait_cmddata_rdy_high+0x40>)
 800a068:	f7f8 ff00 	bl	8002e6c <HAL_GPIO_ReadPin>
 800a06c:	4603      	mov	r3, r0
 800a06e:	2b01      	cmp	r3, #1
 800a070:	d1ed      	bne.n	800a04e <wait_cmddata_rdy_high+0x12>
    }
  }
  return 0;
 800a072:	2300      	movs	r3, #0
}
 800a074:	4618      	mov	r0, r3
 800a076:	3710      	adds	r7, #16
 800a078:	46bd      	mov	sp, r7
 800a07a:	bd80      	pop	{r7, pc}
 800a07c:	48001000 	.word	0x48001000

0800a080 <wait_cmddata_rdy_rising_event>:



int wait_cmddata_rdy_rising_event(int timeout)
{
 800a080:	b580      	push	{r7, lr}
 800a082:	b084      	sub	sp, #16
 800a084:	af00      	add	r7, sp, #0
 800a086:	6078      	str	r0, [r7, #4]
#ifdef SEM_WAIT
   return SEM_WAIT(cmddata_rdy_rising_sem, timeout);
#else
  int tickstart = HAL_GetTick();
 800a088:	f7f8 f982 	bl	8002390 <HAL_GetTick>
 800a08c:	4603      	mov	r3, r0
 800a08e:	60fb      	str	r3, [r7, #12]
  while (cmddata_rdy_rising_event==1)
 800a090:	e00a      	b.n	800a0a8 <wait_cmddata_rdy_rising_event+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 800a092:	f7f8 f97d 	bl	8002390 <HAL_GetTick>
 800a096:	4602      	mov	r2, r0
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	1ad2      	subs	r2, r2, r3
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	429a      	cmp	r2, r3
 800a0a0:	d902      	bls.n	800a0a8 <wait_cmddata_rdy_rising_event+0x28>
    {
      return -1;
 800a0a2:	f04f 33ff 	mov.w	r3, #4294967295
 800a0a6:	e004      	b.n	800a0b2 <wait_cmddata_rdy_rising_event+0x32>
  while (cmddata_rdy_rising_event==1)
 800a0a8:	4b04      	ldr	r3, [pc, #16]	; (800a0bc <wait_cmddata_rdy_rising_event+0x3c>)
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	2b01      	cmp	r3, #1
 800a0ae:	d0f0      	beq.n	800a092 <wait_cmddata_rdy_rising_event+0x12>
    }
  }
  return 0;
 800a0b0:	2300      	movs	r3, #0
#endif
}
 800a0b2:	4618      	mov	r0, r3
 800a0b4:	3710      	adds	r7, #16
 800a0b6:	46bd      	mov	sp, r7
 800a0b8:	bd80      	pop	{r7, pc}
 800a0ba:	bf00      	nop
 800a0bc:	200008f8 	.word	0x200008f8

0800a0c0 <wait_spi_rx_event>:

int wait_spi_rx_event(int timeout)
{
 800a0c0:	b580      	push	{r7, lr}
 800a0c2:	b084      	sub	sp, #16
 800a0c4:	af00      	add	r7, sp, #0
 800a0c6:	6078      	str	r0, [r7, #4]
#ifdef SEM_WAIT
   return SEM_WAIT(spi_rx_sem, timeout);
#else
  int tickstart = HAL_GetTick();
 800a0c8:	f7f8 f962 	bl	8002390 <HAL_GetTick>
 800a0cc:	4603      	mov	r3, r0
 800a0ce:	60fb      	str	r3, [r7, #12]
  while (spi_rx_event==1)
 800a0d0:	e00a      	b.n	800a0e8 <wait_spi_rx_event+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 800a0d2:	f7f8 f95d 	bl	8002390 <HAL_GetTick>
 800a0d6:	4602      	mov	r2, r0
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	1ad2      	subs	r2, r2, r3
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	429a      	cmp	r2, r3
 800a0e0:	d902      	bls.n	800a0e8 <wait_spi_rx_event+0x28>
    {
      return -1;
 800a0e2:	f04f 33ff 	mov.w	r3, #4294967295
 800a0e6:	e004      	b.n	800a0f2 <wait_spi_rx_event+0x32>
  while (spi_rx_event==1)
 800a0e8:	4b04      	ldr	r3, [pc, #16]	; (800a0fc <wait_spi_rx_event+0x3c>)
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	2b01      	cmp	r3, #1
 800a0ee:	d0f0      	beq.n	800a0d2 <wait_spi_rx_event+0x12>
    }
  }
  return 0;
 800a0f0:	2300      	movs	r3, #0
#endif
}
 800a0f2:	4618      	mov	r0, r3
 800a0f4:	3710      	adds	r7, #16
 800a0f6:	46bd      	mov	sp, r7
 800a0f8:	bd80      	pop	{r7, pc}
 800a0fa:	bf00      	nop
 800a0fc:	200008f0 	.word	0x200008f0

0800a100 <wait_spi_tx_event>:

int wait_spi_tx_event(int timeout)
{
 800a100:	b580      	push	{r7, lr}
 800a102:	b084      	sub	sp, #16
 800a104:	af00      	add	r7, sp, #0
 800a106:	6078      	str	r0, [r7, #4]
#ifdef SEM_WAIT
   return SEM_WAIT(spi_tx_sem, timeout);
#else
  int tickstart = HAL_GetTick();
 800a108:	f7f8 f942 	bl	8002390 <HAL_GetTick>
 800a10c:	4603      	mov	r3, r0
 800a10e:	60fb      	str	r3, [r7, #12]
  while (spi_tx_event==1)
 800a110:	e00a      	b.n	800a128 <wait_spi_tx_event+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 800a112:	f7f8 f93d 	bl	8002390 <HAL_GetTick>
 800a116:	4602      	mov	r2, r0
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	1ad2      	subs	r2, r2, r3
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	429a      	cmp	r2, r3
 800a120:	d902      	bls.n	800a128 <wait_spi_tx_event+0x28>
    {
      return -1;
 800a122:	f04f 33ff 	mov.w	r3, #4294967295
 800a126:	e004      	b.n	800a132 <wait_spi_tx_event+0x32>
  while (spi_tx_event==1)
 800a128:	4b04      	ldr	r3, [pc, #16]	; (800a13c <wait_spi_tx_event+0x3c>)
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	2b01      	cmp	r3, #1
 800a12e:	d0f0      	beq.n	800a112 <wait_spi_tx_event+0x12>
    }
  }
  return 0;
 800a130:	2300      	movs	r3, #0
#endif
}
 800a132:	4618      	mov	r0, r3
 800a134:	3710      	adds	r7, #16
 800a136:	46bd      	mov	sp, r7
 800a138:	bd80      	pop	{r7, pc}
 800a13a:	bf00      	nop
 800a13c:	200008f4 	.word	0x200008f4

0800a140 <SPI_WIFI_ReceiveData>:



int16_t SPI_WIFI_ReceiveData(uint8_t *pData, uint16_t len, uint32_t timeout)
{
 800a140:	b580      	push	{r7, lr}
 800a142:	b086      	sub	sp, #24
 800a144:	af00      	add	r7, sp, #0
 800a146:	60f8      	str	r0, [r7, #12]
 800a148:	460b      	mov	r3, r1
 800a14a:	607a      	str	r2, [r7, #4]
 800a14c:	817b      	strh	r3, [r7, #10]
  int16_t length = 0;
 800a14e:	2300      	movs	r3, #0
 800a150:	82fb      	strh	r3, [r7, #22]
  uint8_t tmp[2];
  
  WIFI_DISABLE_NSS();
 800a152:	2201      	movs	r2, #1
 800a154:	2101      	movs	r1, #1
 800a156:	4834      	ldr	r0, [pc, #208]	; (800a228 <SPI_WIFI_ReceiveData+0xe8>)
 800a158:	f7f8 fea0 	bl	8002e9c <HAL_GPIO_WritePin>
  UNLOCK_SPI();
  SPI_WIFI_DelayUs(3);
 800a15c:	2003      	movs	r0, #3
 800a15e:	f000 f8e3 	bl	800a328 <SPI_WIFI_DelayUs>


  if (wait_cmddata_rdy_rising_event(timeout)<0)
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	4618      	mov	r0, r3
 800a166:	f7ff ff8b 	bl	800a080 <wait_cmddata_rdy_rising_event>
 800a16a:	4603      	mov	r3, r0
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	da02      	bge.n	800a176 <SPI_WIFI_ReceiveData+0x36>
  {
      return ES_WIFI_ERROR_WAITING_DRDY_FALLING;
 800a170:	f06f 0302 	mvn.w	r3, #2
 800a174:	e054      	b.n	800a220 <SPI_WIFI_ReceiveData+0xe0>
  }

  LOCK_SPI();
  WIFI_ENABLE_NSS();
 800a176:	2200      	movs	r2, #0
 800a178:	2101      	movs	r1, #1
 800a17a:	482b      	ldr	r0, [pc, #172]	; (800a228 <SPI_WIFI_ReceiveData+0xe8>)
 800a17c:	f7f8 fe8e 	bl	8002e9c <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(15);
 800a180:	200f      	movs	r0, #15
 800a182:	f000 f8d1 	bl	800a328 <SPI_WIFI_DelayUs>
  while (WIFI_IS_CMDDATA_READY())
 800a186:	e03d      	b.n	800a204 <SPI_WIFI_ReceiveData+0xc4>
  {
    if((length < len) || (!len))
 800a188:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800a18c:	897b      	ldrh	r3, [r7, #10]
 800a18e:	429a      	cmp	r2, r3
 800a190:	db02      	blt.n	800a198 <SPI_WIFI_ReceiveData+0x58>
 800a192:	897b      	ldrh	r3, [r7, #10]
 800a194:	2b00      	cmp	r3, #0
 800a196:	d13c      	bne.n	800a212 <SPI_WIFI_ReceiveData+0xd2>
    {
      spi_rx_event=1;
 800a198:	4b24      	ldr	r3, [pc, #144]	; (800a22c <SPI_WIFI_ReceiveData+0xec>)
 800a19a:	2201      	movs	r2, #1
 800a19c:	601a      	str	r2, [r3, #0]
      if (HAL_SPI_Receive_IT(&hspi, tmp, 1) != HAL_OK) {
 800a19e:	f107 0314 	add.w	r3, r7, #20
 800a1a2:	2201      	movs	r2, #1
 800a1a4:	4619      	mov	r1, r3
 800a1a6:	4822      	ldr	r0, [pc, #136]	; (800a230 <SPI_WIFI_ReceiveData+0xf0>)
 800a1a8:	f7fc f972 	bl	8006490 <HAL_SPI_Receive_IT>
 800a1ac:	4603      	mov	r3, r0
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d007      	beq.n	800a1c2 <SPI_WIFI_ReceiveData+0x82>
        WIFI_DISABLE_NSS();
 800a1b2:	2201      	movs	r2, #1
 800a1b4:	2101      	movs	r1, #1
 800a1b6:	481c      	ldr	r0, [pc, #112]	; (800a228 <SPI_WIFI_ReceiveData+0xe8>)
 800a1b8:	f7f8 fe70 	bl	8002e9c <HAL_GPIO_WritePin>
        UNLOCK_SPI();
        return ES_WIFI_ERROR_SPI_FAILED;
 800a1bc:	f04f 33ff 	mov.w	r3, #4294967295
 800a1c0:	e02e      	b.n	800a220 <SPI_WIFI_ReceiveData+0xe0>
      }
  
      wait_spi_rx_event(timeout);
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	4618      	mov	r0, r3
 800a1c6:	f7ff ff7b 	bl	800a0c0 <wait_spi_rx_event>

      pData[0] = tmp[0];
 800a1ca:	7d3a      	ldrb	r2, [r7, #20]
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	701a      	strb	r2, [r3, #0]
      pData[1] = tmp[1];
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	3301      	adds	r3, #1
 800a1d4:	7d7a      	ldrb	r2, [r7, #21]
 800a1d6:	701a      	strb	r2, [r3, #0]
      length += 2;
 800a1d8:	8afb      	ldrh	r3, [r7, #22]
 800a1da:	3302      	adds	r3, #2
 800a1dc:	b29b      	uxth	r3, r3
 800a1de:	82fb      	strh	r3, [r7, #22]
      pData  += 2;
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	3302      	adds	r3, #2
 800a1e4:	60fb      	str	r3, [r7, #12]
      
      if (length >= ES_WIFI_DATA_SIZE) {
 800a1e6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800a1ea:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800a1ee:	db09      	blt.n	800a204 <SPI_WIFI_ReceiveData+0xc4>
        WIFI_DISABLE_NSS();
 800a1f0:	2201      	movs	r2, #1
 800a1f2:	2101      	movs	r1, #1
 800a1f4:	480c      	ldr	r0, [pc, #48]	; (800a228 <SPI_WIFI_ReceiveData+0xe8>)
 800a1f6:	f7f8 fe51 	bl	8002e9c <HAL_GPIO_WritePin>
        SPI_WIFI_ResetModule();
 800a1fa:	f7ff fea5 	bl	8009f48 <SPI_WIFI_ResetModule>
        UNLOCK_SPI();
        return ES_WIFI_ERROR_STUFFING_FOREVER;
 800a1fe:	f06f 0303 	mvn.w	r3, #3
 800a202:	e00d      	b.n	800a220 <SPI_WIFI_ReceiveData+0xe0>
  while (WIFI_IS_CMDDATA_READY())
 800a204:	2102      	movs	r1, #2
 800a206:	4808      	ldr	r0, [pc, #32]	; (800a228 <SPI_WIFI_ReceiveData+0xe8>)
 800a208:	f7f8 fe30 	bl	8002e6c <HAL_GPIO_ReadPin>
 800a20c:	4603      	mov	r3, r0
 800a20e:	2b01      	cmp	r3, #1
 800a210:	d0ba      	beq.n	800a188 <SPI_WIFI_ReceiveData+0x48>
    else
    {
      break;
    }
  }
  WIFI_DISABLE_NSS();
 800a212:	2201      	movs	r2, #1
 800a214:	2101      	movs	r1, #1
 800a216:	4804      	ldr	r0, [pc, #16]	; (800a228 <SPI_WIFI_ReceiveData+0xe8>)
 800a218:	f7f8 fe40 	bl	8002e9c <HAL_GPIO_WritePin>
  UNLOCK_SPI();
  return length;
 800a21c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 800a220:	4618      	mov	r0, r3
 800a222:	3718      	adds	r7, #24
 800a224:	46bd      	mov	sp, r7
 800a226:	bd80      	pop	{r7, pc}
 800a228:	48001000 	.word	0x48001000
 800a22c:	200008f0 	.word	0x200008f0
 800a230:	2000088c 	.word	0x2000088c

0800a234 <SPI_WIFI_SendData>:
  * @param  len : Data length
  * @param  timeout : send timeout in mS
  * @retval Length of sent data
  */
int16_t SPI_WIFI_SendData( uint8_t *pdata,  uint16_t len, uint32_t timeout)
{
 800a234:	b580      	push	{r7, lr}
 800a236:	b086      	sub	sp, #24
 800a238:	af00      	add	r7, sp, #0
 800a23a:	60f8      	str	r0, [r7, #12]
 800a23c:	460b      	mov	r3, r1
 800a23e:	607a      	str	r2, [r7, #4]
 800a240:	817b      	strh	r3, [r7, #10]
  uint8_t Padding[2];
  
  if (wait_cmddata_rdy_high(timeout)<0)
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	4618      	mov	r0, r3
 800a246:	f7ff fef9 	bl	800a03c <wait_cmddata_rdy_high>
 800a24a:	4603      	mov	r3, r0
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	da02      	bge.n	800a256 <SPI_WIFI_SendData+0x22>
  {
    return ES_WIFI_ERROR_SPI_FAILED;
 800a250:	f04f 33ff 	mov.w	r3, #4294967295
 800a254:	e04f      	b.n	800a2f6 <SPI_WIFI_SendData+0xc2>
  }
    
  /* arm to detect rising event */
  cmddata_rdy_rising_event=1;
 800a256:	4b2a      	ldr	r3, [pc, #168]	; (800a300 <SPI_WIFI_SendData+0xcc>)
 800a258:	2201      	movs	r2, #1
 800a25a:	601a      	str	r2, [r3, #0]
  LOCK_SPI();
  WIFI_ENABLE_NSS();
 800a25c:	2200      	movs	r2, #0
 800a25e:	2101      	movs	r1, #1
 800a260:	4828      	ldr	r0, [pc, #160]	; (800a304 <SPI_WIFI_SendData+0xd0>)
 800a262:	f7f8 fe1b 	bl	8002e9c <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(15);
 800a266:	200f      	movs	r0, #15
 800a268:	f000 f85e 	bl	800a328 <SPI_WIFI_DelayUs>
  if (len > 1)
 800a26c:	897b      	ldrh	r3, [r7, #10]
 800a26e:	2b01      	cmp	r3, #1
 800a270:	d919      	bls.n	800a2a6 <SPI_WIFI_SendData+0x72>
  {
    spi_tx_event=1;
 800a272:	4b25      	ldr	r3, [pc, #148]	; (800a308 <SPI_WIFI_SendData+0xd4>)
 800a274:	2201      	movs	r2, #1
 800a276:	601a      	str	r2, [r3, #0]
    if( HAL_SPI_Transmit_IT(&hspi, (uint8_t *)pdata , len/2) != HAL_OK)
 800a278:	897b      	ldrh	r3, [r7, #10]
 800a27a:	085b      	lsrs	r3, r3, #1
 800a27c:	b29b      	uxth	r3, r3
 800a27e:	461a      	mov	r2, r3
 800a280:	68f9      	ldr	r1, [r7, #12]
 800a282:	4822      	ldr	r0, [pc, #136]	; (800a30c <SPI_WIFI_SendData+0xd8>)
 800a284:	f7fc f876 	bl	8006374 <HAL_SPI_Transmit_IT>
 800a288:	4603      	mov	r3, r0
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d007      	beq.n	800a29e <SPI_WIFI_SendData+0x6a>
    {
      WIFI_DISABLE_NSS();
 800a28e:	2201      	movs	r2, #1
 800a290:	2101      	movs	r1, #1
 800a292:	481c      	ldr	r0, [pc, #112]	; (800a304 <SPI_WIFI_SendData+0xd0>)
 800a294:	f7f8 fe02 	bl	8002e9c <HAL_GPIO_WritePin>
      UNLOCK_SPI();
      return ES_WIFI_ERROR_SPI_FAILED;
 800a298:	f04f 33ff 	mov.w	r3, #4294967295
 800a29c:	e02b      	b.n	800a2f6 <SPI_WIFI_SendData+0xc2>
    }
    wait_spi_tx_event(timeout);
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	4618      	mov	r0, r3
 800a2a2:	f7ff ff2d 	bl	800a100 <wait_spi_tx_event>
  }
  
  if ( len & 1)
 800a2a6:	897b      	ldrh	r3, [r7, #10]
 800a2a8:	f003 0301 	and.w	r3, r3, #1
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	d020      	beq.n	800a2f2 <SPI_WIFI_SendData+0xbe>
  {
    Padding[0] = pdata[len-1];
 800a2b0:	897b      	ldrh	r3, [r7, #10]
 800a2b2:	3b01      	subs	r3, #1
 800a2b4:	68fa      	ldr	r2, [r7, #12]
 800a2b6:	4413      	add	r3, r2
 800a2b8:	781b      	ldrb	r3, [r3, #0]
 800a2ba:	753b      	strb	r3, [r7, #20]
    Padding[1] = '\n';
 800a2bc:	230a      	movs	r3, #10
 800a2be:	757b      	strb	r3, [r7, #21]

    spi_tx_event=1;
 800a2c0:	4b11      	ldr	r3, [pc, #68]	; (800a308 <SPI_WIFI_SendData+0xd4>)
 800a2c2:	2201      	movs	r2, #1
 800a2c4:	601a      	str	r2, [r3, #0]
    if( HAL_SPI_Transmit_IT(&hspi, Padding, 1) != HAL_OK)
 800a2c6:	f107 0314 	add.w	r3, r7, #20
 800a2ca:	2201      	movs	r2, #1
 800a2cc:	4619      	mov	r1, r3
 800a2ce:	480f      	ldr	r0, [pc, #60]	; (800a30c <SPI_WIFI_SendData+0xd8>)
 800a2d0:	f7fc f850 	bl	8006374 <HAL_SPI_Transmit_IT>
 800a2d4:	4603      	mov	r3, r0
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d007      	beq.n	800a2ea <SPI_WIFI_SendData+0xb6>
    {
      WIFI_DISABLE_NSS();
 800a2da:	2201      	movs	r2, #1
 800a2dc:	2101      	movs	r1, #1
 800a2de:	4809      	ldr	r0, [pc, #36]	; (800a304 <SPI_WIFI_SendData+0xd0>)
 800a2e0:	f7f8 fddc 	bl	8002e9c <HAL_GPIO_WritePin>
      UNLOCK_SPI();
      return ES_WIFI_ERROR_SPI_FAILED;
 800a2e4:	f04f 33ff 	mov.w	r3, #4294967295
 800a2e8:	e005      	b.n	800a2f6 <SPI_WIFI_SendData+0xc2>
    }  
    wait_spi_tx_event(timeout);
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	4618      	mov	r0, r3
 800a2ee:	f7ff ff07 	bl	800a100 <wait_spi_tx_event>
    
  }
  return len;
 800a2f2:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
}
 800a2f6:	4618      	mov	r0, r3
 800a2f8:	3718      	adds	r7, #24
 800a2fa:	46bd      	mov	sp, r7
 800a2fc:	bd80      	pop	{r7, pc}
 800a2fe:	bf00      	nop
 800a300:	200008f8 	.word	0x200008f8
 800a304:	48001000 	.word	0x48001000
 800a308:	200008f4 	.word	0x200008f4
 800a30c:	2000088c 	.word	0x2000088c

0800a310 <SPI_WIFI_Delay>:
  * @brief  Delay
  * @param  Delay in ms
  * @retval None
  */
void SPI_WIFI_Delay(uint32_t Delay)
{
 800a310:	b580      	push	{r7, lr}
 800a312:	b082      	sub	sp, #8
 800a314:	af00      	add	r7, sp, #0
 800a316:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800a318:	6878      	ldr	r0, [r7, #4]
 800a31a:	f7f8 f845 	bl	80023a8 <HAL_Delay>
}
 800a31e:	bf00      	nop
 800a320:	3708      	adds	r7, #8
 800a322:	46bd      	mov	sp, r7
 800a324:	bd80      	pop	{r7, pc}
	...

0800a328 <SPI_WIFI_DelayUs>:
   * @brief  Delay
  * @param  Delay in us
  * @retval None
  */
void SPI_WIFI_DelayUs(uint32_t n)
{
 800a328:	b580      	push	{r7, lr}
 800a32a:	b086      	sub	sp, #24
 800a32c:	af00      	add	r7, sp, #0
 800a32e:	6078      	str	r0, [r7, #4]
  volatile        uint32_t ct = 0;
 800a330:	2300      	movs	r3, #0
 800a332:	60bb      	str	r3, [r7, #8]
  uint32_t        loop_per_us = 0;
 800a334:	2300      	movs	r3, #0
 800a336:	617b      	str	r3, [r7, #20]
  static uint32_t cycle_per_loop = 0;

  /* calibration happen on first call for a duration of 1 ms * nbcycle per loop */
  /* 10 cycle for STM32L4 */
  if (cycle_per_loop == 0 ) 
 800a338:	4b20      	ldr	r3, [pc, #128]	; (800a3bc <SPI_WIFI_DelayUs+0x94>)
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d122      	bne.n	800a386 <SPI_WIFI_DelayUs+0x5e>
  {
     uint32_t cycle_per_ms = (SystemCoreClock/1000UL);
 800a340:	4b1f      	ldr	r3, [pc, #124]	; (800a3c0 <SPI_WIFI_DelayUs+0x98>)
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	4a1f      	ldr	r2, [pc, #124]	; (800a3c4 <SPI_WIFI_DelayUs+0x9c>)
 800a346:	fba2 2303 	umull	r2, r3, r2, r3
 800a34a:	099b      	lsrs	r3, r3, #6
 800a34c:	613b      	str	r3, [r7, #16]
     uint32_t t = 0;
 800a34e:	2300      	movs	r3, #0
 800a350:	60fb      	str	r3, [r7, #12]
     ct = cycle_per_ms;
 800a352:	693b      	ldr	r3, [r7, #16]
 800a354:	60bb      	str	r3, [r7, #8]
     t = HAL_GetTick();
 800a356:	f7f8 f81b 	bl	8002390 <HAL_GetTick>
 800a35a:	60f8      	str	r0, [r7, #12]
     while(ct) ct--;
 800a35c:	e002      	b.n	800a364 <SPI_WIFI_DelayUs+0x3c>
 800a35e:	68bb      	ldr	r3, [r7, #8]
 800a360:	3b01      	subs	r3, #1
 800a362:	60bb      	str	r3, [r7, #8]
 800a364:	68bb      	ldr	r3, [r7, #8]
 800a366:	2b00      	cmp	r3, #0
 800a368:	d1f9      	bne.n	800a35e <SPI_WIFI_DelayUs+0x36>
     cycle_per_loop = HAL_GetTick()-t;
 800a36a:	f7f8 f811 	bl	8002390 <HAL_GetTick>
 800a36e:	4602      	mov	r2, r0
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	1ad3      	subs	r3, r2, r3
 800a374:	4a11      	ldr	r2, [pc, #68]	; (800a3bc <SPI_WIFI_DelayUs+0x94>)
 800a376:	6013      	str	r3, [r2, #0]
     if (cycle_per_loop == 0) cycle_per_loop = 1;
 800a378:	4b10      	ldr	r3, [pc, #64]	; (800a3bc <SPI_WIFI_DelayUs+0x94>)
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d102      	bne.n	800a386 <SPI_WIFI_DelayUs+0x5e>
 800a380:	4b0e      	ldr	r3, [pc, #56]	; (800a3bc <SPI_WIFI_DelayUs+0x94>)
 800a382:	2201      	movs	r2, #1
 800a384:	601a      	str	r2, [r3, #0]
  }

  loop_per_us = SystemCoreClock/1000000UL/cycle_per_loop;
 800a386:	4b0e      	ldr	r3, [pc, #56]	; (800a3c0 <SPI_WIFI_DelayUs+0x98>)
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	4a0f      	ldr	r2, [pc, #60]	; (800a3c8 <SPI_WIFI_DelayUs+0xa0>)
 800a38c:	fba2 2303 	umull	r2, r3, r2, r3
 800a390:	0c9a      	lsrs	r2, r3, #18
 800a392:	4b0a      	ldr	r3, [pc, #40]	; (800a3bc <SPI_WIFI_DelayUs+0x94>)
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	fbb2 f3f3 	udiv	r3, r2, r3
 800a39a:	617b      	str	r3, [r7, #20]
  ct = n * loop_per_us;
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	697a      	ldr	r2, [r7, #20]
 800a3a0:	fb02 f303 	mul.w	r3, r2, r3
 800a3a4:	60bb      	str	r3, [r7, #8]
  while(ct) ct--;
 800a3a6:	e002      	b.n	800a3ae <SPI_WIFI_DelayUs+0x86>
 800a3a8:	68bb      	ldr	r3, [r7, #8]
 800a3aa:	3b01      	subs	r3, #1
 800a3ac:	60bb      	str	r3, [r7, #8]
 800a3ae:	68bb      	ldr	r3, [r7, #8]
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d1f9      	bne.n	800a3a8 <SPI_WIFI_DelayUs+0x80>
  return;
 800a3b4:	bf00      	nop
}
 800a3b6:	3718      	adds	r7, #24
 800a3b8:	46bd      	mov	sp, r7
 800a3ba:	bd80      	pop	{r7, pc}
 800a3bc:	200008fc 	.word	0x200008fc
 800a3c0:	20000004 	.word	0x20000004
 800a3c4:	10624dd3 	.word	0x10624dd3
 800a3c8:	431bde83 	.word	0x431bde83

0800a3cc <HAL_SPI_RxCpltCallback>:
  *               the configuration information for SPI module.
  * @retval None
  */

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800a3cc:	b480      	push	{r7}
 800a3ce:	b083      	sub	sp, #12
 800a3d0:	af00      	add	r7, sp, #0
 800a3d2:	6078      	str	r0, [r7, #4]
  if (spi_rx_event)
 800a3d4:	4b06      	ldr	r3, [pc, #24]	; (800a3f0 <HAL_SPI_RxCpltCallback+0x24>)
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d002      	beq.n	800a3e2 <HAL_SPI_RxCpltCallback+0x16>
  {
    SEM_SIGNAL(spi_rx_sem);
    spi_rx_event = 0;
 800a3dc:	4b04      	ldr	r3, [pc, #16]	; (800a3f0 <HAL_SPI_RxCpltCallback+0x24>)
 800a3de:	2200      	movs	r2, #0
 800a3e0:	601a      	str	r2, [r3, #0]
  }
}
 800a3e2:	bf00      	nop
 800a3e4:	370c      	adds	r7, #12
 800a3e6:	46bd      	mov	sp, r7
 800a3e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ec:	4770      	bx	lr
 800a3ee:	bf00      	nop
 800a3f0:	200008f0 	.word	0x200008f0

0800a3f4 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800a3f4:	b480      	push	{r7}
 800a3f6:	b083      	sub	sp, #12
 800a3f8:	af00      	add	r7, sp, #0
 800a3fa:	6078      	str	r0, [r7, #4]
  if (spi_tx_event)
 800a3fc:	4b06      	ldr	r3, [pc, #24]	; (800a418 <HAL_SPI_TxCpltCallback+0x24>)
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	2b00      	cmp	r3, #0
 800a402:	d002      	beq.n	800a40a <HAL_SPI_TxCpltCallback+0x16>
  {
    SEM_SIGNAL(spi_tx_sem);
    spi_tx_event = 0;
 800a404:	4b04      	ldr	r3, [pc, #16]	; (800a418 <HAL_SPI_TxCpltCallback+0x24>)
 800a406:	2200      	movs	r2, #0
 800a408:	601a      	str	r2, [r3, #0]
  }
}
 800a40a:	bf00      	nop
 800a40c:	370c      	adds	r7, #12
 800a40e:	46bd      	mov	sp, r7
 800a410:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a414:	4770      	bx	lr
 800a416:	bf00      	nop
 800a418:	200008f4 	.word	0x200008f4

0800a41c <SPI_WIFI_ISR>:
  * @brief  Interrupt handler for  Data RDY signal
  * @param  None
  * @retval None
  */
void    SPI_WIFI_ISR(void)
{
 800a41c:	b480      	push	{r7}
 800a41e:	af00      	add	r7, sp, #0
   if (cmddata_rdy_rising_event==1)  
 800a420:	4b05      	ldr	r3, [pc, #20]	; (800a438 <SPI_WIFI_ISR+0x1c>)
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	2b01      	cmp	r3, #1
 800a426:	d102      	bne.n	800a42e <SPI_WIFI_ISR+0x12>
   {
     SEM_SIGNAL(cmddata_rdy_rising_sem);
     cmddata_rdy_rising_event = 0;
 800a428:	4b03      	ldr	r3, [pc, #12]	; (800a438 <SPI_WIFI_ISR+0x1c>)
 800a42a:	2200      	movs	r2, #0
 800a42c:	601a      	str	r2, [r3, #0]
   }
}
 800a42e:	bf00      	nop
 800a430:	46bd      	mov	sp, r7
 800a432:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a436:	4770      	bx	lr
 800a438:	200008f8 	.word	0x200008f8

0800a43c <WIFI_Init>:
  * @brief  Initialize the WIFI core
  * @param  None
  * @retval Operation status
  */
WIFI_Status_t WIFI_Init(void)
{
 800a43c:	b580      	push	{r7, lr}
 800a43e:	b084      	sub	sp, #16
 800a440:	af02      	add	r7, sp, #8
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 800a442:	2301      	movs	r3, #1
 800a444:	71fb      	strb	r3, [r7, #7]
  
  if(ES_WIFI_RegisterBusIO(&EsWifiObj,
 800a446:	4b0d      	ldr	r3, [pc, #52]	; (800a47c <WIFI_Init+0x40>)
 800a448:	9301      	str	r3, [sp, #4]
 800a44a:	4b0d      	ldr	r3, [pc, #52]	; (800a480 <WIFI_Init+0x44>)
 800a44c:	9300      	str	r3, [sp, #0]
 800a44e:	4b0d      	ldr	r3, [pc, #52]	; (800a484 <WIFI_Init+0x48>)
 800a450:	4a0d      	ldr	r2, [pc, #52]	; (800a488 <WIFI_Init+0x4c>)
 800a452:	490e      	ldr	r1, [pc, #56]	; (800a48c <WIFI_Init+0x50>)
 800a454:	480e      	ldr	r0, [pc, #56]	; (800a490 <WIFI_Init+0x54>)
 800a456:	f7ff fb29 	bl	8009aac <ES_WIFI_RegisterBusIO>
 800a45a:	4603      	mov	r3, r0
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d107      	bne.n	800a470 <WIFI_Init+0x34>
                           SPI_WIFI_DeInit,
                           SPI_WIFI_Delay,
                           SPI_WIFI_SendData,
                           SPI_WIFI_ReceiveData) == ES_WIFI_STATUS_OK)
  {
    if(ES_WIFI_Init(&EsWifiObj) == ES_WIFI_STATUS_OK)
 800a460:	480b      	ldr	r0, [pc, #44]	; (800a490 <WIFI_Init+0x54>)
 800a462:	f7ff faf5 	bl	8009a50 <ES_WIFI_Init>
 800a466:	4603      	mov	r3, r0
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d101      	bne.n	800a470 <WIFI_Init+0x34>
    {
      ret = WIFI_STATUS_OK;
 800a46c:	2300      	movs	r3, #0
 800a46e:	71fb      	strb	r3, [r7, #7]
    }
  }
  return ret;
 800a470:	79fb      	ldrb	r3, [r7, #7]
}
 800a472:	4618      	mov	r0, r3
 800a474:	3708      	adds	r7, #8
 800a476:	46bd      	mov	sp, r7
 800a478:	bd80      	pop	{r7, pc}
 800a47a:	bf00      	nop
 800a47c:	0800a141 	.word	0x0800a141
 800a480:	0800a235 	.word	0x0800a235
 800a484:	0800a311 	.word	0x0800a311
 800a488:	0800a029 	.word	0x0800a029
 800a48c:	08009e8d 	.word	0x08009e8d
 800a490:	20000900 	.word	0x20000900

0800a494 <WIFI_Connect>:
  */
WIFI_Status_t WIFI_Connect(
                             const char* SSID,
                             const char* Password,
                             WIFI_Ecn_t ecn)
{
 800a494:	b580      	push	{r7, lr}
 800a496:	b086      	sub	sp, #24
 800a498:	af00      	add	r7, sp, #0
 800a49a:	60f8      	str	r0, [r7, #12]
 800a49c:	60b9      	str	r1, [r7, #8]
 800a49e:	4613      	mov	r3, r2
 800a4a0:	71fb      	strb	r3, [r7, #7]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 800a4a2:	2301      	movs	r3, #1
 800a4a4:	75fb      	strb	r3, [r7, #23]

  if(ES_WIFI_Connect(&EsWifiObj, SSID, Password, (ES_WIFI_SecurityType_t) ecn) == ES_WIFI_STATUS_OK)
 800a4a6:	79fb      	ldrb	r3, [r7, #7]
 800a4a8:	68ba      	ldr	r2, [r7, #8]
 800a4aa:	68f9      	ldr	r1, [r7, #12]
 800a4ac:	4809      	ldr	r0, [pc, #36]	; (800a4d4 <WIFI_Connect+0x40>)
 800a4ae:	f7ff fb31 	bl	8009b14 <ES_WIFI_Connect>
 800a4b2:	4603      	mov	r3, r0
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	d107      	bne.n	800a4c8 <WIFI_Connect+0x34>
  {
    if(ES_WIFI_GetNetworkSettings(&EsWifiObj) == ES_WIFI_STATUS_OK)
 800a4b8:	4806      	ldr	r0, [pc, #24]	; (800a4d4 <WIFI_Connect+0x40>)
 800a4ba:	f7ff fbcf 	bl	8009c5c <ES_WIFI_GetNetworkSettings>
 800a4be:	4603      	mov	r3, r0
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	d101      	bne.n	800a4c8 <WIFI_Connect+0x34>
    {
       ret = WIFI_STATUS_OK;
 800a4c4:	2300      	movs	r3, #0
 800a4c6:	75fb      	strb	r3, [r7, #23]
    }
  }
  return ret;
 800a4c8:	7dfb      	ldrb	r3, [r7, #23]
}
 800a4ca:	4618      	mov	r0, r3
 800a4cc:	3718      	adds	r7, #24
 800a4ce:	46bd      	mov	sp, r7
 800a4d0:	bd80      	pop	{r7, pc}
 800a4d2:	bf00      	nop
 800a4d4:	20000900 	.word	0x20000900

0800a4d8 <WIFI_GetMAC_Address>:
/**
  * @brief  This function retrieves the WiFi interface's MAC address.
  * @retval Operation Status.
  */
WIFI_Status_t WIFI_GetMAC_Address(uint8_t  *mac)
{
 800a4d8:	b580      	push	{r7, lr}
 800a4da:	b084      	sub	sp, #16
 800a4dc:	af00      	add	r7, sp, #0
 800a4de:	6078      	str	r0, [r7, #4]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 800a4e0:	2301      	movs	r3, #1
 800a4e2:	73fb      	strb	r3, [r7, #15]
  
  if(ES_WIFI_GetMACAddress(&EsWifiObj, mac) == ES_WIFI_STATUS_OK)
 800a4e4:	6879      	ldr	r1, [r7, #4]
 800a4e6:	4806      	ldr	r0, [pc, #24]	; (800a500 <WIFI_GetMAC_Address+0x28>)
 800a4e8:	f7ff fbe2 	bl	8009cb0 <ES_WIFI_GetMACAddress>
 800a4ec:	4603      	mov	r3, r0
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d101      	bne.n	800a4f6 <WIFI_GetMAC_Address+0x1e>
  {
    ret = WIFI_STATUS_OK;
 800a4f2:	2300      	movs	r3, #0
 800a4f4:	73fb      	strb	r3, [r7, #15]
  }
  return ret;
 800a4f6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4f8:	4618      	mov	r0, r3
 800a4fa:	3710      	adds	r7, #16
 800a4fc:	46bd      	mov	sp, r7
 800a4fe:	bd80      	pop	{r7, pc}
 800a500:	20000900 	.word	0x20000900

0800a504 <WIFI_GetIP_Address>:
/**
  * @brief  This function retrieves the WiFi interface's IP address.
  * @retval Operation Status.
  */
WIFI_Status_t WIFI_GetIP_Address (uint8_t  *ipaddr)
{
 800a504:	b580      	push	{r7, lr}
 800a506:	b084      	sub	sp, #16
 800a508:	af00      	add	r7, sp, #0
 800a50a:	6078      	str	r0, [r7, #4]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 800a50c:	2301      	movs	r3, #1
 800a50e:	73fb      	strb	r3, [r7, #15]
  
  if (ES_WIFI_IsConnected(&EsWifiObj) == 1)
 800a510:	4809      	ldr	r0, [pc, #36]	; (800a538 <WIFI_GetIP_Address+0x34>)
 800a512:	f7ff fb77 	bl	8009c04 <ES_WIFI_IsConnected>
 800a516:	4603      	mov	r3, r0
 800a518:	2b01      	cmp	r3, #1
 800a51a:	d107      	bne.n	800a52c <WIFI_GetIP_Address+0x28>
 800a51c:	4b06      	ldr	r3, [pc, #24]	; (800a538 <WIFI_GetIP_Address+0x34>)
 800a51e:	f8d3 30d5 	ldr.w	r3, [r3, #213]	; 0xd5
 800a522:	461a      	mov	r2, r3
  {
    memcpy(ipaddr, EsWifiObj.NetSettings.IP_Addr, 4);
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	601a      	str	r2, [r3, #0]
    ret = WIFI_STATUS_OK;
 800a528:	2300      	movs	r3, #0
 800a52a:	73fb      	strb	r3, [r7, #15]
  }
  return ret;
 800a52c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a52e:	4618      	mov	r0, r3
 800a530:	3710      	adds	r7, #16
 800a532:	46bd      	mov	sp, r7
 800a534:	bd80      	pop	{r7, pc}
 800a536:	bf00      	nop
 800a538:	20000900 	.word	0x20000900

0800a53c <__NVIC_SetPriority>:
{
 800a53c:	b480      	push	{r7}
 800a53e:	b083      	sub	sp, #12
 800a540:	af00      	add	r7, sp, #0
 800a542:	4603      	mov	r3, r0
 800a544:	6039      	str	r1, [r7, #0]
 800a546:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a548:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	db0a      	blt.n	800a566 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a550:	683b      	ldr	r3, [r7, #0]
 800a552:	b2da      	uxtb	r2, r3
 800a554:	490c      	ldr	r1, [pc, #48]	; (800a588 <__NVIC_SetPriority+0x4c>)
 800a556:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a55a:	0112      	lsls	r2, r2, #4
 800a55c:	b2d2      	uxtb	r2, r2
 800a55e:	440b      	add	r3, r1
 800a560:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800a564:	e00a      	b.n	800a57c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a566:	683b      	ldr	r3, [r7, #0]
 800a568:	b2da      	uxtb	r2, r3
 800a56a:	4908      	ldr	r1, [pc, #32]	; (800a58c <__NVIC_SetPriority+0x50>)
 800a56c:	79fb      	ldrb	r3, [r7, #7]
 800a56e:	f003 030f 	and.w	r3, r3, #15
 800a572:	3b04      	subs	r3, #4
 800a574:	0112      	lsls	r2, r2, #4
 800a576:	b2d2      	uxtb	r2, r2
 800a578:	440b      	add	r3, r1
 800a57a:	761a      	strb	r2, [r3, #24]
}
 800a57c:	bf00      	nop
 800a57e:	370c      	adds	r7, #12
 800a580:	46bd      	mov	sp, r7
 800a582:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a586:	4770      	bx	lr
 800a588:	e000e100 	.word	0xe000e100
 800a58c:	e000ed00 	.word	0xe000ed00

0800a590 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800a590:	b580      	push	{r7, lr}
 800a592:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800a594:	4b05      	ldr	r3, [pc, #20]	; (800a5ac <SysTick_Handler+0x1c>)
 800a596:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800a598:	f002 f986 	bl	800c8a8 <xTaskGetSchedulerState>
 800a59c:	4603      	mov	r3, r0
 800a59e:	2b01      	cmp	r3, #1
 800a5a0:	d001      	beq.n	800a5a6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800a5a2:	f003 f971 	bl	800d888 <xPortSysTickHandler>
  }
}
 800a5a6:	bf00      	nop
 800a5a8:	bd80      	pop	{r7, pc}
 800a5aa:	bf00      	nop
 800a5ac:	e000e010 	.word	0xe000e010

0800a5b0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800a5b0:	b580      	push	{r7, lr}
 800a5b2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800a5b4:	2100      	movs	r1, #0
 800a5b6:	f06f 0004 	mvn.w	r0, #4
 800a5ba:	f7ff ffbf 	bl	800a53c <__NVIC_SetPriority>
#endif
}
 800a5be:	bf00      	nop
 800a5c0:	bd80      	pop	{r7, pc}
	...

0800a5c4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800a5c4:	b480      	push	{r7}
 800a5c6:	b083      	sub	sp, #12
 800a5c8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a5ca:	f3ef 8305 	mrs	r3, IPSR
 800a5ce:	603b      	str	r3, [r7, #0]
  return(result);
 800a5d0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d003      	beq.n	800a5de <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800a5d6:	f06f 0305 	mvn.w	r3, #5
 800a5da:	607b      	str	r3, [r7, #4]
 800a5dc:	e00c      	b.n	800a5f8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800a5de:	4b0a      	ldr	r3, [pc, #40]	; (800a608 <osKernelInitialize+0x44>)
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d105      	bne.n	800a5f2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800a5e6:	4b08      	ldr	r3, [pc, #32]	; (800a608 <osKernelInitialize+0x44>)
 800a5e8:	2201      	movs	r2, #1
 800a5ea:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800a5ec:	2300      	movs	r3, #0
 800a5ee:	607b      	str	r3, [r7, #4]
 800a5f0:	e002      	b.n	800a5f8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800a5f2:	f04f 33ff 	mov.w	r3, #4294967295
 800a5f6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800a5f8:	687b      	ldr	r3, [r7, #4]
}
 800a5fa:	4618      	mov	r0, r3
 800a5fc:	370c      	adds	r7, #12
 800a5fe:	46bd      	mov	sp, r7
 800a600:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a604:	4770      	bx	lr
 800a606:	bf00      	nop
 800a608:	20001200 	.word	0x20001200

0800a60c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800a60c:	b580      	push	{r7, lr}
 800a60e:	b082      	sub	sp, #8
 800a610:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a612:	f3ef 8305 	mrs	r3, IPSR
 800a616:	603b      	str	r3, [r7, #0]
  return(result);
 800a618:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	d003      	beq.n	800a626 <osKernelStart+0x1a>
    stat = osErrorISR;
 800a61e:	f06f 0305 	mvn.w	r3, #5
 800a622:	607b      	str	r3, [r7, #4]
 800a624:	e010      	b.n	800a648 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800a626:	4b0b      	ldr	r3, [pc, #44]	; (800a654 <osKernelStart+0x48>)
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	2b01      	cmp	r3, #1
 800a62c:	d109      	bne.n	800a642 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800a62e:	f7ff ffbf 	bl	800a5b0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800a632:	4b08      	ldr	r3, [pc, #32]	; (800a654 <osKernelStart+0x48>)
 800a634:	2202      	movs	r2, #2
 800a636:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800a638:	f001 fcbc 	bl	800bfb4 <vTaskStartScheduler>
      stat = osOK;
 800a63c:	2300      	movs	r3, #0
 800a63e:	607b      	str	r3, [r7, #4]
 800a640:	e002      	b.n	800a648 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800a642:	f04f 33ff 	mov.w	r3, #4294967295
 800a646:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800a648:	687b      	ldr	r3, [r7, #4]
}
 800a64a:	4618      	mov	r0, r3
 800a64c:	3708      	adds	r7, #8
 800a64e:	46bd      	mov	sp, r7
 800a650:	bd80      	pop	{r7, pc}
 800a652:	bf00      	nop
 800a654:	20001200 	.word	0x20001200

0800a658 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800a658:	b580      	push	{r7, lr}
 800a65a:	b08e      	sub	sp, #56	; 0x38
 800a65c:	af04      	add	r7, sp, #16
 800a65e:	60f8      	str	r0, [r7, #12]
 800a660:	60b9      	str	r1, [r7, #8]
 800a662:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800a664:	2300      	movs	r3, #0
 800a666:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a668:	f3ef 8305 	mrs	r3, IPSR
 800a66c:	617b      	str	r3, [r7, #20]
  return(result);
 800a66e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800a670:	2b00      	cmp	r3, #0
 800a672:	d17e      	bne.n	800a772 <osThreadNew+0x11a>
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	2b00      	cmp	r3, #0
 800a678:	d07b      	beq.n	800a772 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800a67a:	2380      	movs	r3, #128	; 0x80
 800a67c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800a67e:	2318      	movs	r3, #24
 800a680:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800a682:	2300      	movs	r3, #0
 800a684:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800a686:	f04f 33ff 	mov.w	r3, #4294967295
 800a68a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d045      	beq.n	800a71e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	2b00      	cmp	r3, #0
 800a698:	d002      	beq.n	800a6a0 <osThreadNew+0x48>
        name = attr->name;
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	699b      	ldr	r3, [r3, #24]
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d002      	beq.n	800a6ae <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	699b      	ldr	r3, [r3, #24]
 800a6ac:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800a6ae:	69fb      	ldr	r3, [r7, #28]
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	d008      	beq.n	800a6c6 <osThreadNew+0x6e>
 800a6b4:	69fb      	ldr	r3, [r7, #28]
 800a6b6:	2b38      	cmp	r3, #56	; 0x38
 800a6b8:	d805      	bhi.n	800a6c6 <osThreadNew+0x6e>
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	685b      	ldr	r3, [r3, #4]
 800a6be:	f003 0301 	and.w	r3, r3, #1
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	d001      	beq.n	800a6ca <osThreadNew+0x72>
        return (NULL);
 800a6c6:	2300      	movs	r3, #0
 800a6c8:	e054      	b.n	800a774 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	695b      	ldr	r3, [r3, #20]
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	d003      	beq.n	800a6da <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	695b      	ldr	r3, [r3, #20]
 800a6d6:	089b      	lsrs	r3, r3, #2
 800a6d8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	689b      	ldr	r3, [r3, #8]
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d00e      	beq.n	800a700 <osThreadNew+0xa8>
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	68db      	ldr	r3, [r3, #12]
 800a6e6:	2bbf      	cmp	r3, #191	; 0xbf
 800a6e8:	d90a      	bls.n	800a700 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d006      	beq.n	800a700 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	695b      	ldr	r3, [r3, #20]
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d002      	beq.n	800a700 <osThreadNew+0xa8>
        mem = 1;
 800a6fa:	2301      	movs	r3, #1
 800a6fc:	61bb      	str	r3, [r7, #24]
 800a6fe:	e010      	b.n	800a722 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	689b      	ldr	r3, [r3, #8]
 800a704:	2b00      	cmp	r3, #0
 800a706:	d10c      	bne.n	800a722 <osThreadNew+0xca>
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	68db      	ldr	r3, [r3, #12]
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d108      	bne.n	800a722 <osThreadNew+0xca>
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	691b      	ldr	r3, [r3, #16]
 800a714:	2b00      	cmp	r3, #0
 800a716:	d104      	bne.n	800a722 <osThreadNew+0xca>
          mem = 0;
 800a718:	2300      	movs	r3, #0
 800a71a:	61bb      	str	r3, [r7, #24]
 800a71c:	e001      	b.n	800a722 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800a71e:	2300      	movs	r3, #0
 800a720:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800a722:	69bb      	ldr	r3, [r7, #24]
 800a724:	2b01      	cmp	r3, #1
 800a726:	d110      	bne.n	800a74a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800a72c:	687a      	ldr	r2, [r7, #4]
 800a72e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a730:	9202      	str	r2, [sp, #8]
 800a732:	9301      	str	r3, [sp, #4]
 800a734:	69fb      	ldr	r3, [r7, #28]
 800a736:	9300      	str	r3, [sp, #0]
 800a738:	68bb      	ldr	r3, [r7, #8]
 800a73a:	6a3a      	ldr	r2, [r7, #32]
 800a73c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a73e:	68f8      	ldr	r0, [r7, #12]
 800a740:	f001 f970 	bl	800ba24 <xTaskCreateStatic>
 800a744:	4603      	mov	r3, r0
 800a746:	613b      	str	r3, [r7, #16]
 800a748:	e013      	b.n	800a772 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800a74a:	69bb      	ldr	r3, [r7, #24]
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	d110      	bne.n	800a772 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800a750:	6a3b      	ldr	r3, [r7, #32]
 800a752:	b29a      	uxth	r2, r3
 800a754:	f107 0310 	add.w	r3, r7, #16
 800a758:	9301      	str	r3, [sp, #4]
 800a75a:	69fb      	ldr	r3, [r7, #28]
 800a75c:	9300      	str	r3, [sp, #0]
 800a75e:	68bb      	ldr	r3, [r7, #8]
 800a760:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a762:	68f8      	ldr	r0, [r7, #12]
 800a764:	f001 f9bb 	bl	800bade <xTaskCreate>
 800a768:	4603      	mov	r3, r0
 800a76a:	2b01      	cmp	r3, #1
 800a76c:	d001      	beq.n	800a772 <osThreadNew+0x11a>
            hTask = NULL;
 800a76e:	2300      	movs	r3, #0
 800a770:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800a772:	693b      	ldr	r3, [r7, #16]
}
 800a774:	4618      	mov	r0, r3
 800a776:	3728      	adds	r7, #40	; 0x28
 800a778:	46bd      	mov	sp, r7
 800a77a:	bd80      	pop	{r7, pc}

0800a77c <osThreadTerminate>:
  vTaskDelete (NULL);
#endif
  for (;;);
}

osStatus_t osThreadTerminate (osThreadId_t thread_id) {
 800a77c:	b580      	push	{r7, lr}
 800a77e:	b086      	sub	sp, #24
 800a780:	af00      	add	r7, sp, #0
 800a782:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a788:	f3ef 8305 	mrs	r3, IPSR
 800a78c:	60bb      	str	r3, [r7, #8]
  return(result);
 800a78e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;
#ifndef USE_FreeRTOS_HEAP_1
  eTaskState tstate;

  if (IS_IRQ()) {
 800a790:	2b00      	cmp	r3, #0
 800a792:	d003      	beq.n	800a79c <osThreadTerminate+0x20>
    stat = osErrorISR;
 800a794:	f06f 0305 	mvn.w	r3, #5
 800a798:	617b      	str	r3, [r7, #20]
 800a79a:	e017      	b.n	800a7cc <osThreadTerminate+0x50>
  }
  else if (hTask == NULL) {
 800a79c:	693b      	ldr	r3, [r7, #16]
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	d103      	bne.n	800a7aa <osThreadTerminate+0x2e>
    stat = osErrorParameter;
 800a7a2:	f06f 0303 	mvn.w	r3, #3
 800a7a6:	617b      	str	r3, [r7, #20]
 800a7a8:	e010      	b.n	800a7cc <osThreadTerminate+0x50>
  }
  else {
    tstate = eTaskGetState (hTask);
 800a7aa:	6938      	ldr	r0, [r7, #16]
 800a7ac:	f001 fb9c 	bl	800bee8 <eTaskGetState>
 800a7b0:	4603      	mov	r3, r0
 800a7b2:	73fb      	strb	r3, [r7, #15]

    if (tstate != eDeleted) {
 800a7b4:	7bfb      	ldrb	r3, [r7, #15]
 800a7b6:	2b04      	cmp	r3, #4
 800a7b8:	d005      	beq.n	800a7c6 <osThreadTerminate+0x4a>
      stat = osOK;
 800a7ba:	2300      	movs	r3, #0
 800a7bc:	617b      	str	r3, [r7, #20]
      vTaskDelete (hTask);
 800a7be:	6938      	ldr	r0, [r7, #16]
 800a7c0:	f001 faec 	bl	800bd9c <vTaskDelete>
 800a7c4:	e002      	b.n	800a7cc <osThreadTerminate+0x50>
    } else {
      stat = osErrorResource;
 800a7c6:	f06f 0302 	mvn.w	r3, #2
 800a7ca:	617b      	str	r3, [r7, #20]
  }
#else
  stat = osError;
#endif

  return (stat);
 800a7cc:	697b      	ldr	r3, [r7, #20]
}
 800a7ce:	4618      	mov	r0, r3
 800a7d0:	3718      	adds	r7, #24
 800a7d2:	46bd      	mov	sp, r7
 800a7d4:	bd80      	pop	{r7, pc}
	...

0800a7d8 <osThreadFlagsSet>:
  return (count);
}
#endif /* (configUSE_OS2_THREAD_ENUMERATE == 1) */

#if (configUSE_OS2_THREAD_FLAGS == 1)
uint32_t osThreadFlagsSet (osThreadId_t thread_id, uint32_t flags) {
 800a7d8:	b580      	push	{r7, lr}
 800a7da:	b088      	sub	sp, #32
 800a7dc:	af02      	add	r7, sp, #8
 800a7de:	6078      	str	r0, [r7, #4]
 800a7e0:	6039      	str	r1, [r7, #0]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	617b      	str	r3, [r7, #20]
  uint32_t rflags;
  BaseType_t yield;

  if ((hTask == NULL) || ((flags & THREAD_FLAGS_INVALID_BITS) != 0U)) {
 800a7e6:	697b      	ldr	r3, [r7, #20]
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	d002      	beq.n	800a7f2 <osThreadFlagsSet+0x1a>
 800a7ec:	683b      	ldr	r3, [r7, #0]
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	da03      	bge.n	800a7fa <osThreadFlagsSet+0x22>
    rflags = (uint32_t)osErrorParameter;
 800a7f2:	f06f 0303 	mvn.w	r3, #3
 800a7f6:	60fb      	str	r3, [r7, #12]
 800a7f8:	e035      	b.n	800a866 <osThreadFlagsSet+0x8e>
  }
  else {
    rflags = (uint32_t)osError;
 800a7fa:	f04f 33ff 	mov.w	r3, #4294967295
 800a7fe:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a800:	f3ef 8305 	mrs	r3, IPSR
 800a804:	613b      	str	r3, [r7, #16]
  return(result);
 800a806:	693b      	ldr	r3, [r7, #16]

    if (IS_IRQ()) {
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d01f      	beq.n	800a84c <osThreadFlagsSet+0x74>
      yield = pdFALSE;
 800a80c:	2300      	movs	r3, #0
 800a80e:	60bb      	str	r3, [r7, #8]

      (void)xTaskNotifyFromISR (hTask, flags, eSetBits, &yield);
 800a810:	f107 0308 	add.w	r3, r7, #8
 800a814:	9300      	str	r3, [sp, #0]
 800a816:	2300      	movs	r3, #0
 800a818:	2201      	movs	r2, #1
 800a81a:	6839      	ldr	r1, [r7, #0]
 800a81c:	6978      	ldr	r0, [r7, #20]
 800a81e:	f002 f9ed 	bl	800cbfc <xTaskGenericNotifyFromISR>
      (void)xTaskNotifyAndQueryFromISR (hTask, 0, eNoAction, &rflags, NULL);
 800a822:	f107 030c 	add.w	r3, r7, #12
 800a826:	2200      	movs	r2, #0
 800a828:	9200      	str	r2, [sp, #0]
 800a82a:	2200      	movs	r2, #0
 800a82c:	2100      	movs	r1, #0
 800a82e:	6978      	ldr	r0, [r7, #20]
 800a830:	f002 f9e4 	bl	800cbfc <xTaskGenericNotifyFromISR>

      portYIELD_FROM_ISR (yield);
 800a834:	68bb      	ldr	r3, [r7, #8]
 800a836:	2b00      	cmp	r3, #0
 800a838:	d015      	beq.n	800a866 <osThreadFlagsSet+0x8e>
 800a83a:	4b0d      	ldr	r3, [pc, #52]	; (800a870 <osThreadFlagsSet+0x98>)
 800a83c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a840:	601a      	str	r2, [r3, #0]
 800a842:	f3bf 8f4f 	dsb	sy
 800a846:	f3bf 8f6f 	isb	sy
 800a84a:	e00c      	b.n	800a866 <osThreadFlagsSet+0x8e>
    }
    else {
      (void)xTaskNotify (hTask, flags, eSetBits);
 800a84c:	2300      	movs	r3, #0
 800a84e:	2201      	movs	r2, #1
 800a850:	6839      	ldr	r1, [r7, #0]
 800a852:	6978      	ldr	r0, [r7, #20]
 800a854:	f002 f914 	bl	800ca80 <xTaskGenericNotify>
      (void)xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags);
 800a858:	f107 030c 	add.w	r3, r7, #12
 800a85c:	2200      	movs	r2, #0
 800a85e:	2100      	movs	r1, #0
 800a860:	6978      	ldr	r0, [r7, #20]
 800a862:	f002 f90d 	bl	800ca80 <xTaskGenericNotify>
    }
  }
  /* Return flags after setting */
  return (rflags);
 800a866:	68fb      	ldr	r3, [r7, #12]
}
 800a868:	4618      	mov	r0, r3
 800a86a:	3718      	adds	r7, #24
 800a86c:	46bd      	mov	sp, r7
 800a86e:	bd80      	pop	{r7, pc}
 800a870:	e000ed04 	.word	0xe000ed04

0800a874 <osThreadFlagsWait>:
  }

  return (rflags);
}

uint32_t osThreadFlagsWait (uint32_t flags, uint32_t options, uint32_t timeout) {
 800a874:	b580      	push	{r7, lr}
 800a876:	b08c      	sub	sp, #48	; 0x30
 800a878:	af00      	add	r7, sp, #0
 800a87a:	60f8      	str	r0, [r7, #12]
 800a87c:	60b9      	str	r1, [r7, #8]
 800a87e:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a880:	f3ef 8305 	mrs	r3, IPSR
 800a884:	617b      	str	r3, [r7, #20]
  return(result);
 800a886:	697b      	ldr	r3, [r7, #20]
  uint32_t rflags, nval;
  uint32_t clear;
  TickType_t t0, td, tout;
  BaseType_t rval;

  if (IS_IRQ()) {
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d003      	beq.n	800a894 <osThreadFlagsWait+0x20>
    rflags = (uint32_t)osErrorISR;
 800a88c:	f06f 0305 	mvn.w	r3, #5
 800a890:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a892:	e06b      	b.n	800a96c <osThreadFlagsWait+0xf8>
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 800a894:	68fb      	ldr	r3, [r7, #12]
 800a896:	2b00      	cmp	r3, #0
 800a898:	da03      	bge.n	800a8a2 <osThreadFlagsWait+0x2e>
    rflags = (uint32_t)osErrorParameter;
 800a89a:	f06f 0303 	mvn.w	r3, #3
 800a89e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a8a0:	e064      	b.n	800a96c <osThreadFlagsWait+0xf8>
  }
  else {
    if ((options & osFlagsNoClear) == osFlagsNoClear) {
 800a8a2:	68bb      	ldr	r3, [r7, #8]
 800a8a4:	f003 0302 	and.w	r3, r3, #2
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	d002      	beq.n	800a8b2 <osThreadFlagsWait+0x3e>
      clear = 0U;
 800a8ac:	2300      	movs	r3, #0
 800a8ae:	62bb      	str	r3, [r7, #40]	; 0x28
 800a8b0:	e001      	b.n	800a8b6 <osThreadFlagsWait+0x42>
    } else {
      clear = flags;
 800a8b2:	68fb      	ldr	r3, [r7, #12]
 800a8b4:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    rflags = 0U;
 800a8b6:	2300      	movs	r3, #0
 800a8b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    tout   = timeout;
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	627b      	str	r3, [r7, #36]	; 0x24

    t0 = xTaskGetTickCount();
 800a8be:	f001 fc97 	bl	800c1f0 <xTaskGetTickCount>
 800a8c2:	6238      	str	r0, [r7, #32]
    do {
      rval = xTaskNotifyWait (0, clear, &nval, tout);
 800a8c4:	f107 0210 	add.w	r2, r7, #16
 800a8c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8ca:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a8cc:	2000      	movs	r0, #0
 800a8ce:	f002 f877 	bl	800c9c0 <xTaskNotifyWait>
 800a8d2:	61f8      	str	r0, [r7, #28]

      if (rval == pdPASS) {
 800a8d4:	69fb      	ldr	r3, [r7, #28]
 800a8d6:	2b01      	cmp	r3, #1
 800a8d8:	d137      	bne.n	800a94a <osThreadFlagsWait+0xd6>
        rflags &= flags;
 800a8da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a8dc:	68fb      	ldr	r3, [r7, #12]
 800a8de:	4013      	ands	r3, r2
 800a8e0:	62fb      	str	r3, [r7, #44]	; 0x2c
        rflags |= nval;
 800a8e2:	693b      	ldr	r3, [r7, #16]
 800a8e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a8e6:	4313      	orrs	r3, r2
 800a8e8:	62fb      	str	r3, [r7, #44]	; 0x2c

        if ((options & osFlagsWaitAll) == osFlagsWaitAll) {
 800a8ea:	68bb      	ldr	r3, [r7, #8]
 800a8ec:	f003 0301 	and.w	r3, r3, #1
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d00c      	beq.n	800a90e <osThreadFlagsWait+0x9a>
          if ((flags & rflags) == flags) {
 800a8f4:	68fa      	ldr	r2, [r7, #12]
 800a8f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8f8:	4013      	ands	r3, r2
 800a8fa:	68fa      	ldr	r2, [r7, #12]
 800a8fc:	429a      	cmp	r2, r3
 800a8fe:	d032      	beq.n	800a966 <osThreadFlagsWait+0xf2>
            break;
          } else {
            if (timeout == 0U) {
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	2b00      	cmp	r3, #0
 800a904:	d10f      	bne.n	800a926 <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 800a906:	f06f 0302 	mvn.w	r3, #2
 800a90a:	62fb      	str	r3, [r7, #44]	; 0x2c
              break;
 800a90c:	e02e      	b.n	800a96c <osThreadFlagsWait+0xf8>
            }
          }
        }
        else {
          if ((flags & rflags) != 0) {
 800a90e:	68fa      	ldr	r2, [r7, #12]
 800a910:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a912:	4013      	ands	r3, r2
 800a914:	2b00      	cmp	r3, #0
 800a916:	d128      	bne.n	800a96a <osThreadFlagsWait+0xf6>
            break;
          } else {
            if (timeout == 0U) {
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	d103      	bne.n	800a926 <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 800a91e:	f06f 0302 	mvn.w	r3, #2
 800a922:	62fb      	str	r3, [r7, #44]	; 0x2c
              break;
 800a924:	e022      	b.n	800a96c <osThreadFlagsWait+0xf8>
            }
          }
        }

        /* Update timeout */
        td = xTaskGetTickCount() - t0;
 800a926:	f001 fc63 	bl	800c1f0 <xTaskGetTickCount>
 800a92a:	4602      	mov	r2, r0
 800a92c:	6a3b      	ldr	r3, [r7, #32]
 800a92e:	1ad3      	subs	r3, r2, r3
 800a930:	61bb      	str	r3, [r7, #24]

        if (td > tout) {
 800a932:	69ba      	ldr	r2, [r7, #24]
 800a934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a936:	429a      	cmp	r2, r3
 800a938:	d902      	bls.n	800a940 <osThreadFlagsWait+0xcc>
          tout  = 0;
 800a93a:	2300      	movs	r3, #0
 800a93c:	627b      	str	r3, [r7, #36]	; 0x24
 800a93e:	e00e      	b.n	800a95e <osThreadFlagsWait+0xea>
        } else {
          tout -= td;
 800a940:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a942:	69bb      	ldr	r3, [r7, #24]
 800a944:	1ad3      	subs	r3, r2, r3
 800a946:	627b      	str	r3, [r7, #36]	; 0x24
 800a948:	e009      	b.n	800a95e <osThreadFlagsWait+0xea>
        }
      }
      else {
        if (timeout == 0) {
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d103      	bne.n	800a958 <osThreadFlagsWait+0xe4>
          rflags = (uint32_t)osErrorResource;
 800a950:	f06f 0302 	mvn.w	r3, #2
 800a954:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a956:	e002      	b.n	800a95e <osThreadFlagsWait+0xea>
        } else {
          rflags = (uint32_t)osErrorTimeout;
 800a958:	f06f 0301 	mvn.w	r3, #1
 800a95c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
      }
    }
    while (rval != pdFAIL);
 800a95e:	69fb      	ldr	r3, [r7, #28]
 800a960:	2b00      	cmp	r3, #0
 800a962:	d1af      	bne.n	800a8c4 <osThreadFlagsWait+0x50>
 800a964:	e002      	b.n	800a96c <osThreadFlagsWait+0xf8>
            break;
 800a966:	bf00      	nop
 800a968:	e000      	b.n	800a96c <osThreadFlagsWait+0xf8>
            break;
 800a96a:	bf00      	nop
  }

  /* Return flags before clearing */
  return (rflags);
 800a96c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800a96e:	4618      	mov	r0, r3
 800a970:	3730      	adds	r7, #48	; 0x30
 800a972:	46bd      	mov	sp, r7
 800a974:	bd80      	pop	{r7, pc}

0800a976 <osDelay>:
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800a976:	b580      	push	{r7, lr}
 800a978:	b084      	sub	sp, #16
 800a97a:	af00      	add	r7, sp, #0
 800a97c:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a97e:	f3ef 8305 	mrs	r3, IPSR
 800a982:	60bb      	str	r3, [r7, #8]
  return(result);
 800a984:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a986:	2b00      	cmp	r3, #0
 800a988:	d003      	beq.n	800a992 <osDelay+0x1c>
    stat = osErrorISR;
 800a98a:	f06f 0305 	mvn.w	r3, #5
 800a98e:	60fb      	str	r3, [r7, #12]
 800a990:	e007      	b.n	800a9a2 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800a992:	2300      	movs	r3, #0
 800a994:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	2b00      	cmp	r3, #0
 800a99a:	d002      	beq.n	800a9a2 <osDelay+0x2c>
      vTaskDelay(ticks);
 800a99c:	6878      	ldr	r0, [r7, #4]
 800a99e:	f001 fa6f 	bl	800be80 <vTaskDelay>
    }
  }

  return (stat);
 800a9a2:	68fb      	ldr	r3, [r7, #12]
}
 800a9a4:	4618      	mov	r0, r3
 800a9a6:	3710      	adds	r7, #16
 800a9a8:	46bd      	mov	sp, r7
 800a9aa:	bd80      	pop	{r7, pc}

0800a9ac <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800a9ac:	b580      	push	{r7, lr}
 800a9ae:	b08a      	sub	sp, #40	; 0x28
 800a9b0:	af02      	add	r7, sp, #8
 800a9b2:	60f8      	str	r0, [r7, #12]
 800a9b4:	60b9      	str	r1, [r7, #8]
 800a9b6:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800a9b8:	2300      	movs	r3, #0
 800a9ba:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a9bc:	f3ef 8305 	mrs	r3, IPSR
 800a9c0:	613b      	str	r3, [r7, #16]
  return(result);
 800a9c2:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d15f      	bne.n	800aa88 <osMessageQueueNew+0xdc>
 800a9c8:	68fb      	ldr	r3, [r7, #12]
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	d05c      	beq.n	800aa88 <osMessageQueueNew+0xdc>
 800a9ce:	68bb      	ldr	r3, [r7, #8]
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	d059      	beq.n	800aa88 <osMessageQueueNew+0xdc>
    mem = -1;
 800a9d4:	f04f 33ff 	mov.w	r3, #4294967295
 800a9d8:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	d029      	beq.n	800aa34 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	689b      	ldr	r3, [r3, #8]
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	d012      	beq.n	800aa0e <osMessageQueueNew+0x62>
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	68db      	ldr	r3, [r3, #12]
 800a9ec:	2b4f      	cmp	r3, #79	; 0x4f
 800a9ee:	d90e      	bls.n	800aa0e <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	d00a      	beq.n	800aa0e <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	695a      	ldr	r2, [r3, #20]
 800a9fc:	68fb      	ldr	r3, [r7, #12]
 800a9fe:	68b9      	ldr	r1, [r7, #8]
 800aa00:	fb01 f303 	mul.w	r3, r1, r3
 800aa04:	429a      	cmp	r2, r3
 800aa06:	d302      	bcc.n	800aa0e <osMessageQueueNew+0x62>
        mem = 1;
 800aa08:	2301      	movs	r3, #1
 800aa0a:	61bb      	str	r3, [r7, #24]
 800aa0c:	e014      	b.n	800aa38 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	689b      	ldr	r3, [r3, #8]
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d110      	bne.n	800aa38 <osMessageQueueNew+0x8c>
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	68db      	ldr	r3, [r3, #12]
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d10c      	bne.n	800aa38 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	d108      	bne.n	800aa38 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	695b      	ldr	r3, [r3, #20]
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	d104      	bne.n	800aa38 <osMessageQueueNew+0x8c>
          mem = 0;
 800aa2e:	2300      	movs	r3, #0
 800aa30:	61bb      	str	r3, [r7, #24]
 800aa32:	e001      	b.n	800aa38 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800aa34:	2300      	movs	r3, #0
 800aa36:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800aa38:	69bb      	ldr	r3, [r7, #24]
 800aa3a:	2b01      	cmp	r3, #1
 800aa3c:	d10b      	bne.n	800aa56 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	691a      	ldr	r2, [r3, #16]
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	689b      	ldr	r3, [r3, #8]
 800aa46:	2100      	movs	r1, #0
 800aa48:	9100      	str	r1, [sp, #0]
 800aa4a:	68b9      	ldr	r1, [r7, #8]
 800aa4c:	68f8      	ldr	r0, [r7, #12]
 800aa4e:	f000 fa87 	bl	800af60 <xQueueGenericCreateStatic>
 800aa52:	61f8      	str	r0, [r7, #28]
 800aa54:	e008      	b.n	800aa68 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800aa56:	69bb      	ldr	r3, [r7, #24]
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	d105      	bne.n	800aa68 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800aa5c:	2200      	movs	r2, #0
 800aa5e:	68b9      	ldr	r1, [r7, #8]
 800aa60:	68f8      	ldr	r0, [r7, #12]
 800aa62:	f000 faf5 	bl	800b050 <xQueueGenericCreate>
 800aa66:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800aa68:	69fb      	ldr	r3, [r7, #28]
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	d00c      	beq.n	800aa88 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d003      	beq.n	800aa7c <osMessageQueueNew+0xd0>
        name = attr->name;
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	617b      	str	r3, [r7, #20]
 800aa7a:	e001      	b.n	800aa80 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800aa7c:	2300      	movs	r3, #0
 800aa7e:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800aa80:	6979      	ldr	r1, [r7, #20]
 800aa82:	69f8      	ldr	r0, [r7, #28]
 800aa84:	f000 ff70 	bl	800b968 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800aa88:	69fb      	ldr	r3, [r7, #28]
}
 800aa8a:	4618      	mov	r0, r3
 800aa8c:	3720      	adds	r7, #32
 800aa8e:	46bd      	mov	sp, r7
 800aa90:	bd80      	pop	{r7, pc}
	...

0800aa94 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800aa94:	b580      	push	{r7, lr}
 800aa96:	b088      	sub	sp, #32
 800aa98:	af00      	add	r7, sp, #0
 800aa9a:	60f8      	str	r0, [r7, #12]
 800aa9c:	60b9      	str	r1, [r7, #8]
 800aa9e:	603b      	str	r3, [r7, #0]
 800aaa0:	4613      	mov	r3, r2
 800aaa2:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800aaa8:	2300      	movs	r3, #0
 800aaaa:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800aaac:	f3ef 8305 	mrs	r3, IPSR
 800aab0:	617b      	str	r3, [r7, #20]
  return(result);
 800aab2:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d028      	beq.n	800ab0a <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800aab8:	69bb      	ldr	r3, [r7, #24]
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d005      	beq.n	800aaca <osMessageQueuePut+0x36>
 800aabe:	68bb      	ldr	r3, [r7, #8]
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	d002      	beq.n	800aaca <osMessageQueuePut+0x36>
 800aac4:	683b      	ldr	r3, [r7, #0]
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	d003      	beq.n	800aad2 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800aaca:	f06f 0303 	mvn.w	r3, #3
 800aace:	61fb      	str	r3, [r7, #28]
 800aad0:	e038      	b.n	800ab44 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800aad2:	2300      	movs	r3, #0
 800aad4:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800aad6:	f107 0210 	add.w	r2, r7, #16
 800aada:	2300      	movs	r3, #0
 800aadc:	68b9      	ldr	r1, [r7, #8]
 800aade:	69b8      	ldr	r0, [r7, #24]
 800aae0:	f000 fc12 	bl	800b308 <xQueueGenericSendFromISR>
 800aae4:	4603      	mov	r3, r0
 800aae6:	2b01      	cmp	r3, #1
 800aae8:	d003      	beq.n	800aaf2 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800aaea:	f06f 0302 	mvn.w	r3, #2
 800aaee:	61fb      	str	r3, [r7, #28]
 800aaf0:	e028      	b.n	800ab44 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800aaf2:	693b      	ldr	r3, [r7, #16]
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	d025      	beq.n	800ab44 <osMessageQueuePut+0xb0>
 800aaf8:	4b15      	ldr	r3, [pc, #84]	; (800ab50 <osMessageQueuePut+0xbc>)
 800aafa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aafe:	601a      	str	r2, [r3, #0]
 800ab00:	f3bf 8f4f 	dsb	sy
 800ab04:	f3bf 8f6f 	isb	sy
 800ab08:	e01c      	b.n	800ab44 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800ab0a:	69bb      	ldr	r3, [r7, #24]
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	d002      	beq.n	800ab16 <osMessageQueuePut+0x82>
 800ab10:	68bb      	ldr	r3, [r7, #8]
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	d103      	bne.n	800ab1e <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800ab16:	f06f 0303 	mvn.w	r3, #3
 800ab1a:	61fb      	str	r3, [r7, #28]
 800ab1c:	e012      	b.n	800ab44 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800ab1e:	2300      	movs	r3, #0
 800ab20:	683a      	ldr	r2, [r7, #0]
 800ab22:	68b9      	ldr	r1, [r7, #8]
 800ab24:	69b8      	ldr	r0, [r7, #24]
 800ab26:	f000 faf1 	bl	800b10c <xQueueGenericSend>
 800ab2a:	4603      	mov	r3, r0
 800ab2c:	2b01      	cmp	r3, #1
 800ab2e:	d009      	beq.n	800ab44 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800ab30:	683b      	ldr	r3, [r7, #0]
 800ab32:	2b00      	cmp	r3, #0
 800ab34:	d003      	beq.n	800ab3e <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800ab36:	f06f 0301 	mvn.w	r3, #1
 800ab3a:	61fb      	str	r3, [r7, #28]
 800ab3c:	e002      	b.n	800ab44 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800ab3e:	f06f 0302 	mvn.w	r3, #2
 800ab42:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800ab44:	69fb      	ldr	r3, [r7, #28]
}
 800ab46:	4618      	mov	r0, r3
 800ab48:	3720      	adds	r7, #32
 800ab4a:	46bd      	mov	sp, r7
 800ab4c:	bd80      	pop	{r7, pc}
 800ab4e:	bf00      	nop
 800ab50:	e000ed04 	.word	0xe000ed04

0800ab54 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800ab54:	b580      	push	{r7, lr}
 800ab56:	b088      	sub	sp, #32
 800ab58:	af00      	add	r7, sp, #0
 800ab5a:	60f8      	str	r0, [r7, #12]
 800ab5c:	60b9      	str	r1, [r7, #8]
 800ab5e:	607a      	str	r2, [r7, #4]
 800ab60:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800ab62:	68fb      	ldr	r3, [r7, #12]
 800ab64:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800ab66:	2300      	movs	r3, #0
 800ab68:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ab6a:	f3ef 8305 	mrs	r3, IPSR
 800ab6e:	617b      	str	r3, [r7, #20]
  return(result);
 800ab70:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	d028      	beq.n	800abc8 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800ab76:	69bb      	ldr	r3, [r7, #24]
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	d005      	beq.n	800ab88 <osMessageQueueGet+0x34>
 800ab7c:	68bb      	ldr	r3, [r7, #8]
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	d002      	beq.n	800ab88 <osMessageQueueGet+0x34>
 800ab82:	683b      	ldr	r3, [r7, #0]
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	d003      	beq.n	800ab90 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800ab88:	f06f 0303 	mvn.w	r3, #3
 800ab8c:	61fb      	str	r3, [r7, #28]
 800ab8e:	e037      	b.n	800ac00 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800ab90:	2300      	movs	r3, #0
 800ab92:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800ab94:	f107 0310 	add.w	r3, r7, #16
 800ab98:	461a      	mov	r2, r3
 800ab9a:	68b9      	ldr	r1, [r7, #8]
 800ab9c:	69b8      	ldr	r0, [r7, #24]
 800ab9e:	f000 fd2f 	bl	800b600 <xQueueReceiveFromISR>
 800aba2:	4603      	mov	r3, r0
 800aba4:	2b01      	cmp	r3, #1
 800aba6:	d003      	beq.n	800abb0 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800aba8:	f06f 0302 	mvn.w	r3, #2
 800abac:	61fb      	str	r3, [r7, #28]
 800abae:	e027      	b.n	800ac00 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800abb0:	693b      	ldr	r3, [r7, #16]
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	d024      	beq.n	800ac00 <osMessageQueueGet+0xac>
 800abb6:	4b15      	ldr	r3, [pc, #84]	; (800ac0c <osMessageQueueGet+0xb8>)
 800abb8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800abbc:	601a      	str	r2, [r3, #0]
 800abbe:	f3bf 8f4f 	dsb	sy
 800abc2:	f3bf 8f6f 	isb	sy
 800abc6:	e01b      	b.n	800ac00 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800abc8:	69bb      	ldr	r3, [r7, #24]
 800abca:	2b00      	cmp	r3, #0
 800abcc:	d002      	beq.n	800abd4 <osMessageQueueGet+0x80>
 800abce:	68bb      	ldr	r3, [r7, #8]
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	d103      	bne.n	800abdc <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800abd4:	f06f 0303 	mvn.w	r3, #3
 800abd8:	61fb      	str	r3, [r7, #28]
 800abda:	e011      	b.n	800ac00 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800abdc:	683a      	ldr	r2, [r7, #0]
 800abde:	68b9      	ldr	r1, [r7, #8]
 800abe0:	69b8      	ldr	r0, [r7, #24]
 800abe2:	f000 fc2d 	bl	800b440 <xQueueReceive>
 800abe6:	4603      	mov	r3, r0
 800abe8:	2b01      	cmp	r3, #1
 800abea:	d009      	beq.n	800ac00 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800abec:	683b      	ldr	r3, [r7, #0]
 800abee:	2b00      	cmp	r3, #0
 800abf0:	d003      	beq.n	800abfa <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800abf2:	f06f 0301 	mvn.w	r3, #1
 800abf6:	61fb      	str	r3, [r7, #28]
 800abf8:	e002      	b.n	800ac00 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800abfa:	f06f 0302 	mvn.w	r3, #2
 800abfe:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800ac00:	69fb      	ldr	r3, [r7, #28]
}
 800ac02:	4618      	mov	r0, r3
 800ac04:	3720      	adds	r7, #32
 800ac06:	46bd      	mov	sp, r7
 800ac08:	bd80      	pop	{r7, pc}
 800ac0a:	bf00      	nop
 800ac0c:	e000ed04 	.word	0xe000ed04

0800ac10 <osMessageQueueGetSpace>:
  }

  return ((uint32_t)count);
}

uint32_t osMessageQueueGetSpace (osMessageQueueId_t mq_id) {
 800ac10:	b580      	push	{r7, lr}
 800ac12:	b08a      	sub	sp, #40	; 0x28
 800ac14:	af00      	add	r7, sp, #0
 800ac16:	6078      	str	r0, [r7, #4]
  StaticQueue_t *mq = (StaticQueue_t *)mq_id;
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	623b      	str	r3, [r7, #32]
  uint32_t space;
  uint32_t isrm;

  if (mq == NULL) {
 800ac1c:	6a3b      	ldr	r3, [r7, #32]
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d102      	bne.n	800ac28 <osMessageQueueGetSpace+0x18>
    space = 0U;
 800ac22:	2300      	movs	r3, #0
 800ac24:	627b      	str	r3, [r7, #36]	; 0x24
 800ac26:	e023      	b.n	800ac70 <osMessageQueueGetSpace+0x60>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ac28:	f3ef 8305 	mrs	r3, IPSR
 800ac2c:	61bb      	str	r3, [r7, #24]
  return(result);
 800ac2e:	69bb      	ldr	r3, [r7, #24]
  }
  else if (IS_IRQ()) {
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d019      	beq.n	800ac68 <osMessageQueueGetSpace+0x58>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800ac34:	f3ef 8211 	mrs	r2, BASEPRI
 800ac38:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac3c:	f383 8811 	msr	BASEPRI, r3
 800ac40:	f3bf 8f6f 	isb	sy
 800ac44:	f3bf 8f4f 	dsb	sy
 800ac48:	613a      	str	r2, [r7, #16]
 800ac4a:	60fb      	str	r3, [r7, #12]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800ac4c:	693b      	ldr	r3, [r7, #16]
    isrm = taskENTER_CRITICAL_FROM_ISR();
 800ac4e:	61fb      	str	r3, [r7, #28]

    /* space = pxQueue->uxLength - pxQueue->uxMessagesWaiting; */
    space = mq->uxDummy4[1] - mq->uxDummy4[0];
 800ac50:	6a3b      	ldr	r3, [r7, #32]
 800ac52:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ac54:	6a3b      	ldr	r3, [r7, #32]
 800ac56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac58:	1ad3      	subs	r3, r2, r3
 800ac5a:	627b      	str	r3, [r7, #36]	; 0x24
 800ac5c:	69fb      	ldr	r3, [r7, #28]
 800ac5e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800ac60:	697b      	ldr	r3, [r7, #20]
 800ac62:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800ac66:	e003      	b.n	800ac70 <osMessageQueueGetSpace+0x60>

    taskEXIT_CRITICAL_FROM_ISR(isrm);
  }
  else {
    space = (uint32_t)uxQueueSpacesAvailable ((QueueHandle_t)mq);
 800ac68:	6a38      	ldr	r0, [r7, #32]
 800ac6a:	f000 fd49 	bl	800b700 <uxQueueSpacesAvailable>
 800ac6e:	6278      	str	r0, [r7, #36]	; 0x24
  }

  return (space);
 800ac70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ac72:	4618      	mov	r0, r3
 800ac74:	3728      	adds	r7, #40	; 0x28
 800ac76:	46bd      	mov	sp, r7
 800ac78:	bd80      	pop	{r7, pc}

0800ac7a <osMessageQueueReset>:

osStatus_t osMessageQueueReset (osMessageQueueId_t mq_id) {
 800ac7a:	b580      	push	{r7, lr}
 800ac7c:	b086      	sub	sp, #24
 800ac7e:	af00      	add	r7, sp, #0
 800ac80:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ac86:	f3ef 8305 	mrs	r3, IPSR
 800ac8a:	60fb      	str	r3, [r7, #12]
  return(result);
 800ac8c:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	d003      	beq.n	800ac9a <osMessageQueueReset+0x20>
    stat = osErrorISR;
 800ac92:	f06f 0305 	mvn.w	r3, #5
 800ac96:	617b      	str	r3, [r7, #20]
 800ac98:	e00c      	b.n	800acb4 <osMessageQueueReset+0x3a>
  }
  else if (hQueue == NULL) {
 800ac9a:	693b      	ldr	r3, [r7, #16]
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	d103      	bne.n	800aca8 <osMessageQueueReset+0x2e>
    stat = osErrorParameter;
 800aca0:	f06f 0303 	mvn.w	r3, #3
 800aca4:	617b      	str	r3, [r7, #20]
 800aca6:	e005      	b.n	800acb4 <osMessageQueueReset+0x3a>
  }
  else {
    stat = osOK;
 800aca8:	2300      	movs	r3, #0
 800acaa:	617b      	str	r3, [r7, #20]
    (void)xQueueReset (hQueue);
 800acac:	2100      	movs	r1, #0
 800acae:	6938      	ldr	r0, [r7, #16]
 800acb0:	f000 f8ee 	bl	800ae90 <xQueueGenericReset>
  }

  return (stat);
 800acb4:	697b      	ldr	r3, [r7, #20]
}
 800acb6:	4618      	mov	r0, r3
 800acb8:	3718      	adds	r7, #24
 800acba:	46bd      	mov	sp, r7
 800acbc:	bd80      	pop	{r7, pc}
	...

0800acc0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800acc0:	b480      	push	{r7}
 800acc2:	b085      	sub	sp, #20
 800acc4:	af00      	add	r7, sp, #0
 800acc6:	60f8      	str	r0, [r7, #12]
 800acc8:	60b9      	str	r1, [r7, #8]
 800acca:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800accc:	68fb      	ldr	r3, [r7, #12]
 800acce:	4a07      	ldr	r2, [pc, #28]	; (800acec <vApplicationGetIdleTaskMemory+0x2c>)
 800acd0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800acd2:	68bb      	ldr	r3, [r7, #8]
 800acd4:	4a06      	ldr	r2, [pc, #24]	; (800acf0 <vApplicationGetIdleTaskMemory+0x30>)
 800acd6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	2280      	movs	r2, #128	; 0x80
 800acdc:	601a      	str	r2, [r3, #0]
}
 800acde:	bf00      	nop
 800ace0:	3714      	adds	r7, #20
 800ace2:	46bd      	mov	sp, r7
 800ace4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ace8:	4770      	bx	lr
 800acea:	bf00      	nop
 800acec:	20001204 	.word	0x20001204
 800acf0:	200012c4 	.word	0x200012c4

0800acf4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800acf4:	b480      	push	{r7}
 800acf6:	b085      	sub	sp, #20
 800acf8:	af00      	add	r7, sp, #0
 800acfa:	60f8      	str	r0, [r7, #12]
 800acfc:	60b9      	str	r1, [r7, #8]
 800acfe:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800ad00:	68fb      	ldr	r3, [r7, #12]
 800ad02:	4a07      	ldr	r2, [pc, #28]	; (800ad20 <vApplicationGetTimerTaskMemory+0x2c>)
 800ad04:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800ad06:	68bb      	ldr	r3, [r7, #8]
 800ad08:	4a06      	ldr	r2, [pc, #24]	; (800ad24 <vApplicationGetTimerTaskMemory+0x30>)
 800ad0a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ad12:	601a      	str	r2, [r3, #0]
}
 800ad14:	bf00      	nop
 800ad16:	3714      	adds	r7, #20
 800ad18:	46bd      	mov	sp, r7
 800ad1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad1e:	4770      	bx	lr
 800ad20:	200014c4 	.word	0x200014c4
 800ad24:	20001584 	.word	0x20001584

0800ad28 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800ad28:	b480      	push	{r7}
 800ad2a:	b083      	sub	sp, #12
 800ad2c:	af00      	add	r7, sp, #0
 800ad2e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	f103 0208 	add.w	r2, r3, #8
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	f04f 32ff 	mov.w	r2, #4294967295
 800ad40:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	f103 0208 	add.w	r2, r3, #8
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	f103 0208 	add.w	r2, r3, #8
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	2200      	movs	r2, #0
 800ad5a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800ad5c:	bf00      	nop
 800ad5e:	370c      	adds	r7, #12
 800ad60:	46bd      	mov	sp, r7
 800ad62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad66:	4770      	bx	lr

0800ad68 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800ad68:	b480      	push	{r7}
 800ad6a:	b083      	sub	sp, #12
 800ad6c:	af00      	add	r7, sp, #0
 800ad6e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	2200      	movs	r2, #0
 800ad74:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800ad76:	bf00      	nop
 800ad78:	370c      	adds	r7, #12
 800ad7a:	46bd      	mov	sp, r7
 800ad7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad80:	4770      	bx	lr

0800ad82 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ad82:	b480      	push	{r7}
 800ad84:	b085      	sub	sp, #20
 800ad86:	af00      	add	r7, sp, #0
 800ad88:	6078      	str	r0, [r7, #4]
 800ad8a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	685b      	ldr	r3, [r3, #4]
 800ad90:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800ad92:	683b      	ldr	r3, [r7, #0]
 800ad94:	68fa      	ldr	r2, [r7, #12]
 800ad96:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800ad98:	68fb      	ldr	r3, [r7, #12]
 800ad9a:	689a      	ldr	r2, [r3, #8]
 800ad9c:	683b      	ldr	r3, [r7, #0]
 800ad9e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800ada0:	68fb      	ldr	r3, [r7, #12]
 800ada2:	689b      	ldr	r3, [r3, #8]
 800ada4:	683a      	ldr	r2, [r7, #0]
 800ada6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800ada8:	68fb      	ldr	r3, [r7, #12]
 800adaa:	683a      	ldr	r2, [r7, #0]
 800adac:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800adae:	683b      	ldr	r3, [r7, #0]
 800adb0:	687a      	ldr	r2, [r7, #4]
 800adb2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	681b      	ldr	r3, [r3, #0]
 800adb8:	1c5a      	adds	r2, r3, #1
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	601a      	str	r2, [r3, #0]
}
 800adbe:	bf00      	nop
 800adc0:	3714      	adds	r7, #20
 800adc2:	46bd      	mov	sp, r7
 800adc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adc8:	4770      	bx	lr

0800adca <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800adca:	b480      	push	{r7}
 800adcc:	b085      	sub	sp, #20
 800adce:	af00      	add	r7, sp, #0
 800add0:	6078      	str	r0, [r7, #4]
 800add2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800add4:	683b      	ldr	r3, [r7, #0]
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800adda:	68bb      	ldr	r3, [r7, #8]
 800addc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ade0:	d103      	bne.n	800adea <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	691b      	ldr	r3, [r3, #16]
 800ade6:	60fb      	str	r3, [r7, #12]
 800ade8:	e00c      	b.n	800ae04 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	3308      	adds	r3, #8
 800adee:	60fb      	str	r3, [r7, #12]
 800adf0:	e002      	b.n	800adf8 <vListInsert+0x2e>
 800adf2:	68fb      	ldr	r3, [r7, #12]
 800adf4:	685b      	ldr	r3, [r3, #4]
 800adf6:	60fb      	str	r3, [r7, #12]
 800adf8:	68fb      	ldr	r3, [r7, #12]
 800adfa:	685b      	ldr	r3, [r3, #4]
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	68ba      	ldr	r2, [r7, #8]
 800ae00:	429a      	cmp	r2, r3
 800ae02:	d2f6      	bcs.n	800adf2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800ae04:	68fb      	ldr	r3, [r7, #12]
 800ae06:	685a      	ldr	r2, [r3, #4]
 800ae08:	683b      	ldr	r3, [r7, #0]
 800ae0a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800ae0c:	683b      	ldr	r3, [r7, #0]
 800ae0e:	685b      	ldr	r3, [r3, #4]
 800ae10:	683a      	ldr	r2, [r7, #0]
 800ae12:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800ae14:	683b      	ldr	r3, [r7, #0]
 800ae16:	68fa      	ldr	r2, [r7, #12]
 800ae18:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800ae1a:	68fb      	ldr	r3, [r7, #12]
 800ae1c:	683a      	ldr	r2, [r7, #0]
 800ae1e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800ae20:	683b      	ldr	r3, [r7, #0]
 800ae22:	687a      	ldr	r2, [r7, #4]
 800ae24:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	1c5a      	adds	r2, r3, #1
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	601a      	str	r2, [r3, #0]
}
 800ae30:	bf00      	nop
 800ae32:	3714      	adds	r7, #20
 800ae34:	46bd      	mov	sp, r7
 800ae36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae3a:	4770      	bx	lr

0800ae3c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800ae3c:	b480      	push	{r7}
 800ae3e:	b085      	sub	sp, #20
 800ae40:	af00      	add	r7, sp, #0
 800ae42:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	691b      	ldr	r3, [r3, #16]
 800ae48:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	685b      	ldr	r3, [r3, #4]
 800ae4e:	687a      	ldr	r2, [r7, #4]
 800ae50:	6892      	ldr	r2, [r2, #8]
 800ae52:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	689b      	ldr	r3, [r3, #8]
 800ae58:	687a      	ldr	r2, [r7, #4]
 800ae5a:	6852      	ldr	r2, [r2, #4]
 800ae5c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800ae5e:	68fb      	ldr	r3, [r7, #12]
 800ae60:	685b      	ldr	r3, [r3, #4]
 800ae62:	687a      	ldr	r2, [r7, #4]
 800ae64:	429a      	cmp	r2, r3
 800ae66:	d103      	bne.n	800ae70 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	689a      	ldr	r2, [r3, #8]
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	2200      	movs	r2, #0
 800ae74:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800ae76:	68fb      	ldr	r3, [r7, #12]
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	1e5a      	subs	r2, r3, #1
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800ae80:	68fb      	ldr	r3, [r7, #12]
 800ae82:	681b      	ldr	r3, [r3, #0]
}
 800ae84:	4618      	mov	r0, r3
 800ae86:	3714      	adds	r7, #20
 800ae88:	46bd      	mov	sp, r7
 800ae8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae8e:	4770      	bx	lr

0800ae90 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800ae90:	b580      	push	{r7, lr}
 800ae92:	b084      	sub	sp, #16
 800ae94:	af00      	add	r7, sp, #0
 800ae96:	6078      	str	r0, [r7, #4]
 800ae98:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800ae9e:	68fb      	ldr	r3, [r7, #12]
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	d10a      	bne.n	800aeba <xQueueGenericReset+0x2a>
	__asm volatile
 800aea4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aea8:	f383 8811 	msr	BASEPRI, r3
 800aeac:	f3bf 8f6f 	isb	sy
 800aeb0:	f3bf 8f4f 	dsb	sy
 800aeb4:	60bb      	str	r3, [r7, #8]
}
 800aeb6:	bf00      	nop
 800aeb8:	e7fe      	b.n	800aeb8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800aeba:	f002 fc53 	bl	800d764 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800aebe:	68fb      	ldr	r3, [r7, #12]
 800aec0:	681a      	ldr	r2, [r3, #0]
 800aec2:	68fb      	ldr	r3, [r7, #12]
 800aec4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aec6:	68f9      	ldr	r1, [r7, #12]
 800aec8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800aeca:	fb01 f303 	mul.w	r3, r1, r3
 800aece:	441a      	add	r2, r3
 800aed0:	68fb      	ldr	r3, [r7, #12]
 800aed2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800aed4:	68fb      	ldr	r3, [r7, #12]
 800aed6:	2200      	movs	r2, #0
 800aed8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800aeda:	68fb      	ldr	r3, [r7, #12]
 800aedc:	681a      	ldr	r2, [r3, #0]
 800aede:	68fb      	ldr	r3, [r7, #12]
 800aee0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800aee2:	68fb      	ldr	r3, [r7, #12]
 800aee4:	681a      	ldr	r2, [r3, #0]
 800aee6:	68fb      	ldr	r3, [r7, #12]
 800aee8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aeea:	3b01      	subs	r3, #1
 800aeec:	68f9      	ldr	r1, [r7, #12]
 800aeee:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800aef0:	fb01 f303 	mul.w	r3, r1, r3
 800aef4:	441a      	add	r2, r3
 800aef6:	68fb      	ldr	r3, [r7, #12]
 800aef8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800aefa:	68fb      	ldr	r3, [r7, #12]
 800aefc:	22ff      	movs	r2, #255	; 0xff
 800aefe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800af02:	68fb      	ldr	r3, [r7, #12]
 800af04:	22ff      	movs	r2, #255	; 0xff
 800af06:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800af0a:	683b      	ldr	r3, [r7, #0]
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	d114      	bne.n	800af3a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800af10:	68fb      	ldr	r3, [r7, #12]
 800af12:	691b      	ldr	r3, [r3, #16]
 800af14:	2b00      	cmp	r3, #0
 800af16:	d01a      	beq.n	800af4e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800af18:	68fb      	ldr	r3, [r7, #12]
 800af1a:	3310      	adds	r3, #16
 800af1c:	4618      	mov	r0, r3
 800af1e:	f001 fb01 	bl	800c524 <xTaskRemoveFromEventList>
 800af22:	4603      	mov	r3, r0
 800af24:	2b00      	cmp	r3, #0
 800af26:	d012      	beq.n	800af4e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800af28:	4b0c      	ldr	r3, [pc, #48]	; (800af5c <xQueueGenericReset+0xcc>)
 800af2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800af2e:	601a      	str	r2, [r3, #0]
 800af30:	f3bf 8f4f 	dsb	sy
 800af34:	f3bf 8f6f 	isb	sy
 800af38:	e009      	b.n	800af4e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800af3a:	68fb      	ldr	r3, [r7, #12]
 800af3c:	3310      	adds	r3, #16
 800af3e:	4618      	mov	r0, r3
 800af40:	f7ff fef2 	bl	800ad28 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800af44:	68fb      	ldr	r3, [r7, #12]
 800af46:	3324      	adds	r3, #36	; 0x24
 800af48:	4618      	mov	r0, r3
 800af4a:	f7ff feed 	bl	800ad28 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800af4e:	f002 fc39 	bl	800d7c4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800af52:	2301      	movs	r3, #1
}
 800af54:	4618      	mov	r0, r3
 800af56:	3710      	adds	r7, #16
 800af58:	46bd      	mov	sp, r7
 800af5a:	bd80      	pop	{r7, pc}
 800af5c:	e000ed04 	.word	0xe000ed04

0800af60 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800af60:	b580      	push	{r7, lr}
 800af62:	b08e      	sub	sp, #56	; 0x38
 800af64:	af02      	add	r7, sp, #8
 800af66:	60f8      	str	r0, [r7, #12]
 800af68:	60b9      	str	r1, [r7, #8]
 800af6a:	607a      	str	r2, [r7, #4]
 800af6c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800af6e:	68fb      	ldr	r3, [r7, #12]
 800af70:	2b00      	cmp	r3, #0
 800af72:	d10a      	bne.n	800af8a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800af74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af78:	f383 8811 	msr	BASEPRI, r3
 800af7c:	f3bf 8f6f 	isb	sy
 800af80:	f3bf 8f4f 	dsb	sy
 800af84:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800af86:	bf00      	nop
 800af88:	e7fe      	b.n	800af88 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800af8a:	683b      	ldr	r3, [r7, #0]
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	d10a      	bne.n	800afa6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800af90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af94:	f383 8811 	msr	BASEPRI, r3
 800af98:	f3bf 8f6f 	isb	sy
 800af9c:	f3bf 8f4f 	dsb	sy
 800afa0:	627b      	str	r3, [r7, #36]	; 0x24
}
 800afa2:	bf00      	nop
 800afa4:	e7fe      	b.n	800afa4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	d002      	beq.n	800afb2 <xQueueGenericCreateStatic+0x52>
 800afac:	68bb      	ldr	r3, [r7, #8]
 800afae:	2b00      	cmp	r3, #0
 800afb0:	d001      	beq.n	800afb6 <xQueueGenericCreateStatic+0x56>
 800afb2:	2301      	movs	r3, #1
 800afb4:	e000      	b.n	800afb8 <xQueueGenericCreateStatic+0x58>
 800afb6:	2300      	movs	r3, #0
 800afb8:	2b00      	cmp	r3, #0
 800afba:	d10a      	bne.n	800afd2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800afbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afc0:	f383 8811 	msr	BASEPRI, r3
 800afc4:	f3bf 8f6f 	isb	sy
 800afc8:	f3bf 8f4f 	dsb	sy
 800afcc:	623b      	str	r3, [r7, #32]
}
 800afce:	bf00      	nop
 800afd0:	e7fe      	b.n	800afd0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	2b00      	cmp	r3, #0
 800afd6:	d102      	bne.n	800afde <xQueueGenericCreateStatic+0x7e>
 800afd8:	68bb      	ldr	r3, [r7, #8]
 800afda:	2b00      	cmp	r3, #0
 800afdc:	d101      	bne.n	800afe2 <xQueueGenericCreateStatic+0x82>
 800afde:	2301      	movs	r3, #1
 800afe0:	e000      	b.n	800afe4 <xQueueGenericCreateStatic+0x84>
 800afe2:	2300      	movs	r3, #0
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	d10a      	bne.n	800affe <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800afe8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afec:	f383 8811 	msr	BASEPRI, r3
 800aff0:	f3bf 8f6f 	isb	sy
 800aff4:	f3bf 8f4f 	dsb	sy
 800aff8:	61fb      	str	r3, [r7, #28]
}
 800affa:	bf00      	nop
 800affc:	e7fe      	b.n	800affc <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800affe:	2350      	movs	r3, #80	; 0x50
 800b000:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800b002:	697b      	ldr	r3, [r7, #20]
 800b004:	2b50      	cmp	r3, #80	; 0x50
 800b006:	d00a      	beq.n	800b01e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800b008:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b00c:	f383 8811 	msr	BASEPRI, r3
 800b010:	f3bf 8f6f 	isb	sy
 800b014:	f3bf 8f4f 	dsb	sy
 800b018:	61bb      	str	r3, [r7, #24]
}
 800b01a:	bf00      	nop
 800b01c:	e7fe      	b.n	800b01c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800b01e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b020:	683b      	ldr	r3, [r7, #0]
 800b022:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800b024:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b026:	2b00      	cmp	r3, #0
 800b028:	d00d      	beq.n	800b046 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800b02a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b02c:	2201      	movs	r2, #1
 800b02e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b032:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800b036:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b038:	9300      	str	r3, [sp, #0]
 800b03a:	4613      	mov	r3, r2
 800b03c:	687a      	ldr	r2, [r7, #4]
 800b03e:	68b9      	ldr	r1, [r7, #8]
 800b040:	68f8      	ldr	r0, [r7, #12]
 800b042:	f000 f83f 	bl	800b0c4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b046:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800b048:	4618      	mov	r0, r3
 800b04a:	3730      	adds	r7, #48	; 0x30
 800b04c:	46bd      	mov	sp, r7
 800b04e:	bd80      	pop	{r7, pc}

0800b050 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800b050:	b580      	push	{r7, lr}
 800b052:	b08a      	sub	sp, #40	; 0x28
 800b054:	af02      	add	r7, sp, #8
 800b056:	60f8      	str	r0, [r7, #12]
 800b058:	60b9      	str	r1, [r7, #8]
 800b05a:	4613      	mov	r3, r2
 800b05c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b05e:	68fb      	ldr	r3, [r7, #12]
 800b060:	2b00      	cmp	r3, #0
 800b062:	d10a      	bne.n	800b07a <xQueueGenericCreate+0x2a>
	__asm volatile
 800b064:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b068:	f383 8811 	msr	BASEPRI, r3
 800b06c:	f3bf 8f6f 	isb	sy
 800b070:	f3bf 8f4f 	dsb	sy
 800b074:	613b      	str	r3, [r7, #16]
}
 800b076:	bf00      	nop
 800b078:	e7fe      	b.n	800b078 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b07a:	68fb      	ldr	r3, [r7, #12]
 800b07c:	68ba      	ldr	r2, [r7, #8]
 800b07e:	fb02 f303 	mul.w	r3, r2, r3
 800b082:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800b084:	69fb      	ldr	r3, [r7, #28]
 800b086:	3350      	adds	r3, #80	; 0x50
 800b088:	4618      	mov	r0, r3
 800b08a:	f002 fc8d 	bl	800d9a8 <pvPortMalloc>
 800b08e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800b090:	69bb      	ldr	r3, [r7, #24]
 800b092:	2b00      	cmp	r3, #0
 800b094:	d011      	beq.n	800b0ba <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800b096:	69bb      	ldr	r3, [r7, #24]
 800b098:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b09a:	697b      	ldr	r3, [r7, #20]
 800b09c:	3350      	adds	r3, #80	; 0x50
 800b09e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800b0a0:	69bb      	ldr	r3, [r7, #24]
 800b0a2:	2200      	movs	r2, #0
 800b0a4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b0a8:	79fa      	ldrb	r2, [r7, #7]
 800b0aa:	69bb      	ldr	r3, [r7, #24]
 800b0ac:	9300      	str	r3, [sp, #0]
 800b0ae:	4613      	mov	r3, r2
 800b0b0:	697a      	ldr	r2, [r7, #20]
 800b0b2:	68b9      	ldr	r1, [r7, #8]
 800b0b4:	68f8      	ldr	r0, [r7, #12]
 800b0b6:	f000 f805 	bl	800b0c4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b0ba:	69bb      	ldr	r3, [r7, #24]
	}
 800b0bc:	4618      	mov	r0, r3
 800b0be:	3720      	adds	r7, #32
 800b0c0:	46bd      	mov	sp, r7
 800b0c2:	bd80      	pop	{r7, pc}

0800b0c4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800b0c4:	b580      	push	{r7, lr}
 800b0c6:	b084      	sub	sp, #16
 800b0c8:	af00      	add	r7, sp, #0
 800b0ca:	60f8      	str	r0, [r7, #12]
 800b0cc:	60b9      	str	r1, [r7, #8]
 800b0ce:	607a      	str	r2, [r7, #4]
 800b0d0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800b0d2:	68bb      	ldr	r3, [r7, #8]
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	d103      	bne.n	800b0e0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800b0d8:	69bb      	ldr	r3, [r7, #24]
 800b0da:	69ba      	ldr	r2, [r7, #24]
 800b0dc:	601a      	str	r2, [r3, #0]
 800b0de:	e002      	b.n	800b0e6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800b0e0:	69bb      	ldr	r3, [r7, #24]
 800b0e2:	687a      	ldr	r2, [r7, #4]
 800b0e4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800b0e6:	69bb      	ldr	r3, [r7, #24]
 800b0e8:	68fa      	ldr	r2, [r7, #12]
 800b0ea:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800b0ec:	69bb      	ldr	r3, [r7, #24]
 800b0ee:	68ba      	ldr	r2, [r7, #8]
 800b0f0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800b0f2:	2101      	movs	r1, #1
 800b0f4:	69b8      	ldr	r0, [r7, #24]
 800b0f6:	f7ff fecb 	bl	800ae90 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800b0fa:	69bb      	ldr	r3, [r7, #24]
 800b0fc:	78fa      	ldrb	r2, [r7, #3]
 800b0fe:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800b102:	bf00      	nop
 800b104:	3710      	adds	r7, #16
 800b106:	46bd      	mov	sp, r7
 800b108:	bd80      	pop	{r7, pc}
	...

0800b10c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800b10c:	b580      	push	{r7, lr}
 800b10e:	b08e      	sub	sp, #56	; 0x38
 800b110:	af00      	add	r7, sp, #0
 800b112:	60f8      	str	r0, [r7, #12]
 800b114:	60b9      	str	r1, [r7, #8]
 800b116:	607a      	str	r2, [r7, #4]
 800b118:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800b11a:	2300      	movs	r3, #0
 800b11c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b11e:	68fb      	ldr	r3, [r7, #12]
 800b120:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800b122:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b124:	2b00      	cmp	r3, #0
 800b126:	d10a      	bne.n	800b13e <xQueueGenericSend+0x32>
	__asm volatile
 800b128:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b12c:	f383 8811 	msr	BASEPRI, r3
 800b130:	f3bf 8f6f 	isb	sy
 800b134:	f3bf 8f4f 	dsb	sy
 800b138:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b13a:	bf00      	nop
 800b13c:	e7fe      	b.n	800b13c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b13e:	68bb      	ldr	r3, [r7, #8]
 800b140:	2b00      	cmp	r3, #0
 800b142:	d103      	bne.n	800b14c <xQueueGenericSend+0x40>
 800b144:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b146:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b148:	2b00      	cmp	r3, #0
 800b14a:	d101      	bne.n	800b150 <xQueueGenericSend+0x44>
 800b14c:	2301      	movs	r3, #1
 800b14e:	e000      	b.n	800b152 <xQueueGenericSend+0x46>
 800b150:	2300      	movs	r3, #0
 800b152:	2b00      	cmp	r3, #0
 800b154:	d10a      	bne.n	800b16c <xQueueGenericSend+0x60>
	__asm volatile
 800b156:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b15a:	f383 8811 	msr	BASEPRI, r3
 800b15e:	f3bf 8f6f 	isb	sy
 800b162:	f3bf 8f4f 	dsb	sy
 800b166:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b168:	bf00      	nop
 800b16a:	e7fe      	b.n	800b16a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b16c:	683b      	ldr	r3, [r7, #0]
 800b16e:	2b02      	cmp	r3, #2
 800b170:	d103      	bne.n	800b17a <xQueueGenericSend+0x6e>
 800b172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b174:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b176:	2b01      	cmp	r3, #1
 800b178:	d101      	bne.n	800b17e <xQueueGenericSend+0x72>
 800b17a:	2301      	movs	r3, #1
 800b17c:	e000      	b.n	800b180 <xQueueGenericSend+0x74>
 800b17e:	2300      	movs	r3, #0
 800b180:	2b00      	cmp	r3, #0
 800b182:	d10a      	bne.n	800b19a <xQueueGenericSend+0x8e>
	__asm volatile
 800b184:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b188:	f383 8811 	msr	BASEPRI, r3
 800b18c:	f3bf 8f6f 	isb	sy
 800b190:	f3bf 8f4f 	dsb	sy
 800b194:	623b      	str	r3, [r7, #32]
}
 800b196:	bf00      	nop
 800b198:	e7fe      	b.n	800b198 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b19a:	f001 fb85 	bl	800c8a8 <xTaskGetSchedulerState>
 800b19e:	4603      	mov	r3, r0
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	d102      	bne.n	800b1aa <xQueueGenericSend+0x9e>
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	d101      	bne.n	800b1ae <xQueueGenericSend+0xa2>
 800b1aa:	2301      	movs	r3, #1
 800b1ac:	e000      	b.n	800b1b0 <xQueueGenericSend+0xa4>
 800b1ae:	2300      	movs	r3, #0
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	d10a      	bne.n	800b1ca <xQueueGenericSend+0xbe>
	__asm volatile
 800b1b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1b8:	f383 8811 	msr	BASEPRI, r3
 800b1bc:	f3bf 8f6f 	isb	sy
 800b1c0:	f3bf 8f4f 	dsb	sy
 800b1c4:	61fb      	str	r3, [r7, #28]
}
 800b1c6:	bf00      	nop
 800b1c8:	e7fe      	b.n	800b1c8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b1ca:	f002 facb 	bl	800d764 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b1ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b1d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b1d6:	429a      	cmp	r2, r3
 800b1d8:	d302      	bcc.n	800b1e0 <xQueueGenericSend+0xd4>
 800b1da:	683b      	ldr	r3, [r7, #0]
 800b1dc:	2b02      	cmp	r3, #2
 800b1de:	d129      	bne.n	800b234 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b1e0:	683a      	ldr	r2, [r7, #0]
 800b1e2:	68b9      	ldr	r1, [r7, #8]
 800b1e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b1e6:	f000 faae 	bl	800b746 <prvCopyDataToQueue>
 800b1ea:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b1ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1f0:	2b00      	cmp	r3, #0
 800b1f2:	d010      	beq.n	800b216 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b1f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1f6:	3324      	adds	r3, #36	; 0x24
 800b1f8:	4618      	mov	r0, r3
 800b1fa:	f001 f993 	bl	800c524 <xTaskRemoveFromEventList>
 800b1fe:	4603      	mov	r3, r0
 800b200:	2b00      	cmp	r3, #0
 800b202:	d013      	beq.n	800b22c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800b204:	4b3f      	ldr	r3, [pc, #252]	; (800b304 <xQueueGenericSend+0x1f8>)
 800b206:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b20a:	601a      	str	r2, [r3, #0]
 800b20c:	f3bf 8f4f 	dsb	sy
 800b210:	f3bf 8f6f 	isb	sy
 800b214:	e00a      	b.n	800b22c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800b216:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b218:	2b00      	cmp	r3, #0
 800b21a:	d007      	beq.n	800b22c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800b21c:	4b39      	ldr	r3, [pc, #228]	; (800b304 <xQueueGenericSend+0x1f8>)
 800b21e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b222:	601a      	str	r2, [r3, #0]
 800b224:	f3bf 8f4f 	dsb	sy
 800b228:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800b22c:	f002 faca 	bl	800d7c4 <vPortExitCritical>
				return pdPASS;
 800b230:	2301      	movs	r3, #1
 800b232:	e063      	b.n	800b2fc <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	2b00      	cmp	r3, #0
 800b238:	d103      	bne.n	800b242 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b23a:	f002 fac3 	bl	800d7c4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800b23e:	2300      	movs	r3, #0
 800b240:	e05c      	b.n	800b2fc <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b242:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b244:	2b00      	cmp	r3, #0
 800b246:	d106      	bne.n	800b256 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b248:	f107 0314 	add.w	r3, r7, #20
 800b24c:	4618      	mov	r0, r3
 800b24e:	f001 f9cd 	bl	800c5ec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b252:	2301      	movs	r3, #1
 800b254:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b256:	f002 fab5 	bl	800d7c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b25a:	f000 ff1d 	bl	800c098 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b25e:	f002 fa81 	bl	800d764 <vPortEnterCritical>
 800b262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b264:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b268:	b25b      	sxtb	r3, r3
 800b26a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b26e:	d103      	bne.n	800b278 <xQueueGenericSend+0x16c>
 800b270:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b272:	2200      	movs	r2, #0
 800b274:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b278:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b27a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b27e:	b25b      	sxtb	r3, r3
 800b280:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b284:	d103      	bne.n	800b28e <xQueueGenericSend+0x182>
 800b286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b288:	2200      	movs	r2, #0
 800b28a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b28e:	f002 fa99 	bl	800d7c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b292:	1d3a      	adds	r2, r7, #4
 800b294:	f107 0314 	add.w	r3, r7, #20
 800b298:	4611      	mov	r1, r2
 800b29a:	4618      	mov	r0, r3
 800b29c:	f001 f9bc 	bl	800c618 <xTaskCheckForTimeOut>
 800b2a0:	4603      	mov	r3, r0
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	d124      	bne.n	800b2f0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800b2a6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b2a8:	f000 fb45 	bl	800b936 <prvIsQueueFull>
 800b2ac:	4603      	mov	r3, r0
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	d018      	beq.n	800b2e4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800b2b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2b4:	3310      	adds	r3, #16
 800b2b6:	687a      	ldr	r2, [r7, #4]
 800b2b8:	4611      	mov	r1, r2
 800b2ba:	4618      	mov	r0, r3
 800b2bc:	f001 f8e2 	bl	800c484 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800b2c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b2c2:	f000 fad0 	bl	800b866 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800b2c6:	f000 fef5 	bl	800c0b4 <xTaskResumeAll>
 800b2ca:	4603      	mov	r3, r0
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	f47f af7c 	bne.w	800b1ca <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800b2d2:	4b0c      	ldr	r3, [pc, #48]	; (800b304 <xQueueGenericSend+0x1f8>)
 800b2d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b2d8:	601a      	str	r2, [r3, #0]
 800b2da:	f3bf 8f4f 	dsb	sy
 800b2de:	f3bf 8f6f 	isb	sy
 800b2e2:	e772      	b.n	800b1ca <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800b2e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b2e6:	f000 fabe 	bl	800b866 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b2ea:	f000 fee3 	bl	800c0b4 <xTaskResumeAll>
 800b2ee:	e76c      	b.n	800b1ca <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800b2f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b2f2:	f000 fab8 	bl	800b866 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b2f6:	f000 fedd 	bl	800c0b4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800b2fa:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800b2fc:	4618      	mov	r0, r3
 800b2fe:	3738      	adds	r7, #56	; 0x38
 800b300:	46bd      	mov	sp, r7
 800b302:	bd80      	pop	{r7, pc}
 800b304:	e000ed04 	.word	0xe000ed04

0800b308 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800b308:	b580      	push	{r7, lr}
 800b30a:	b090      	sub	sp, #64	; 0x40
 800b30c:	af00      	add	r7, sp, #0
 800b30e:	60f8      	str	r0, [r7, #12]
 800b310:	60b9      	str	r1, [r7, #8]
 800b312:	607a      	str	r2, [r7, #4]
 800b314:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b316:	68fb      	ldr	r3, [r7, #12]
 800b318:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800b31a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	d10a      	bne.n	800b336 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800b320:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b324:	f383 8811 	msr	BASEPRI, r3
 800b328:	f3bf 8f6f 	isb	sy
 800b32c:	f3bf 8f4f 	dsb	sy
 800b330:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b332:	bf00      	nop
 800b334:	e7fe      	b.n	800b334 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b336:	68bb      	ldr	r3, [r7, #8]
 800b338:	2b00      	cmp	r3, #0
 800b33a:	d103      	bne.n	800b344 <xQueueGenericSendFromISR+0x3c>
 800b33c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b33e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b340:	2b00      	cmp	r3, #0
 800b342:	d101      	bne.n	800b348 <xQueueGenericSendFromISR+0x40>
 800b344:	2301      	movs	r3, #1
 800b346:	e000      	b.n	800b34a <xQueueGenericSendFromISR+0x42>
 800b348:	2300      	movs	r3, #0
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	d10a      	bne.n	800b364 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800b34e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b352:	f383 8811 	msr	BASEPRI, r3
 800b356:	f3bf 8f6f 	isb	sy
 800b35a:	f3bf 8f4f 	dsb	sy
 800b35e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b360:	bf00      	nop
 800b362:	e7fe      	b.n	800b362 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b364:	683b      	ldr	r3, [r7, #0]
 800b366:	2b02      	cmp	r3, #2
 800b368:	d103      	bne.n	800b372 <xQueueGenericSendFromISR+0x6a>
 800b36a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b36c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b36e:	2b01      	cmp	r3, #1
 800b370:	d101      	bne.n	800b376 <xQueueGenericSendFromISR+0x6e>
 800b372:	2301      	movs	r3, #1
 800b374:	e000      	b.n	800b378 <xQueueGenericSendFromISR+0x70>
 800b376:	2300      	movs	r3, #0
 800b378:	2b00      	cmp	r3, #0
 800b37a:	d10a      	bne.n	800b392 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800b37c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b380:	f383 8811 	msr	BASEPRI, r3
 800b384:	f3bf 8f6f 	isb	sy
 800b388:	f3bf 8f4f 	dsb	sy
 800b38c:	623b      	str	r3, [r7, #32]
}
 800b38e:	bf00      	nop
 800b390:	e7fe      	b.n	800b390 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b392:	f002 fac9 	bl	800d928 <vPortValidateInterruptPriority>
	__asm volatile
 800b396:	f3ef 8211 	mrs	r2, BASEPRI
 800b39a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b39e:	f383 8811 	msr	BASEPRI, r3
 800b3a2:	f3bf 8f6f 	isb	sy
 800b3a6:	f3bf 8f4f 	dsb	sy
 800b3aa:	61fa      	str	r2, [r7, #28]
 800b3ac:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 800b3ae:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b3b0:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b3b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b3b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b3ba:	429a      	cmp	r2, r3
 800b3bc:	d302      	bcc.n	800b3c4 <xQueueGenericSendFromISR+0xbc>
 800b3be:	683b      	ldr	r3, [r7, #0]
 800b3c0:	2b02      	cmp	r3, #2
 800b3c2:	d12f      	bne.n	800b424 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b3c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3c6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b3ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b3ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b3d2:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b3d4:	683a      	ldr	r2, [r7, #0]
 800b3d6:	68b9      	ldr	r1, [r7, #8]
 800b3d8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b3da:	f000 f9b4 	bl	800b746 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b3de:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800b3e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b3e6:	d112      	bne.n	800b40e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b3e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3ec:	2b00      	cmp	r3, #0
 800b3ee:	d016      	beq.n	800b41e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b3f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3f2:	3324      	adds	r3, #36	; 0x24
 800b3f4:	4618      	mov	r0, r3
 800b3f6:	f001 f895 	bl	800c524 <xTaskRemoveFromEventList>
 800b3fa:	4603      	mov	r3, r0
 800b3fc:	2b00      	cmp	r3, #0
 800b3fe:	d00e      	beq.n	800b41e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	2b00      	cmp	r3, #0
 800b404:	d00b      	beq.n	800b41e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	2201      	movs	r2, #1
 800b40a:	601a      	str	r2, [r3, #0]
 800b40c:	e007      	b.n	800b41e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b40e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800b412:	3301      	adds	r3, #1
 800b414:	b2db      	uxtb	r3, r3
 800b416:	b25a      	sxtb	r2, r3
 800b418:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b41a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800b41e:	2301      	movs	r3, #1
 800b420:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800b422:	e001      	b.n	800b428 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b424:	2300      	movs	r3, #0
 800b426:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b428:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b42a:	617b      	str	r3, [r7, #20]
	__asm volatile
 800b42c:	697b      	ldr	r3, [r7, #20]
 800b42e:	f383 8811 	msr	BASEPRI, r3
}
 800b432:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b434:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800b436:	4618      	mov	r0, r3
 800b438:	3740      	adds	r7, #64	; 0x40
 800b43a:	46bd      	mov	sp, r7
 800b43c:	bd80      	pop	{r7, pc}
	...

0800b440 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800b440:	b580      	push	{r7, lr}
 800b442:	b08c      	sub	sp, #48	; 0x30
 800b444:	af00      	add	r7, sp, #0
 800b446:	60f8      	str	r0, [r7, #12]
 800b448:	60b9      	str	r1, [r7, #8]
 800b44a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800b44c:	2300      	movs	r3, #0
 800b44e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b450:	68fb      	ldr	r3, [r7, #12]
 800b452:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b454:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b456:	2b00      	cmp	r3, #0
 800b458:	d10a      	bne.n	800b470 <xQueueReceive+0x30>
	__asm volatile
 800b45a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b45e:	f383 8811 	msr	BASEPRI, r3
 800b462:	f3bf 8f6f 	isb	sy
 800b466:	f3bf 8f4f 	dsb	sy
 800b46a:	623b      	str	r3, [r7, #32]
}
 800b46c:	bf00      	nop
 800b46e:	e7fe      	b.n	800b46e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b470:	68bb      	ldr	r3, [r7, #8]
 800b472:	2b00      	cmp	r3, #0
 800b474:	d103      	bne.n	800b47e <xQueueReceive+0x3e>
 800b476:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b47a:	2b00      	cmp	r3, #0
 800b47c:	d101      	bne.n	800b482 <xQueueReceive+0x42>
 800b47e:	2301      	movs	r3, #1
 800b480:	e000      	b.n	800b484 <xQueueReceive+0x44>
 800b482:	2300      	movs	r3, #0
 800b484:	2b00      	cmp	r3, #0
 800b486:	d10a      	bne.n	800b49e <xQueueReceive+0x5e>
	__asm volatile
 800b488:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b48c:	f383 8811 	msr	BASEPRI, r3
 800b490:	f3bf 8f6f 	isb	sy
 800b494:	f3bf 8f4f 	dsb	sy
 800b498:	61fb      	str	r3, [r7, #28]
}
 800b49a:	bf00      	nop
 800b49c:	e7fe      	b.n	800b49c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b49e:	f001 fa03 	bl	800c8a8 <xTaskGetSchedulerState>
 800b4a2:	4603      	mov	r3, r0
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	d102      	bne.n	800b4ae <xQueueReceive+0x6e>
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	2b00      	cmp	r3, #0
 800b4ac:	d101      	bne.n	800b4b2 <xQueueReceive+0x72>
 800b4ae:	2301      	movs	r3, #1
 800b4b0:	e000      	b.n	800b4b4 <xQueueReceive+0x74>
 800b4b2:	2300      	movs	r3, #0
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	d10a      	bne.n	800b4ce <xQueueReceive+0x8e>
	__asm volatile
 800b4b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4bc:	f383 8811 	msr	BASEPRI, r3
 800b4c0:	f3bf 8f6f 	isb	sy
 800b4c4:	f3bf 8f4f 	dsb	sy
 800b4c8:	61bb      	str	r3, [r7, #24]
}
 800b4ca:	bf00      	nop
 800b4cc:	e7fe      	b.n	800b4cc <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b4ce:	f002 f949 	bl	800d764 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b4d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b4d6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b4d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	d01f      	beq.n	800b51e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b4de:	68b9      	ldr	r1, [r7, #8]
 800b4e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b4e2:	f000 f99a 	bl	800b81a <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b4e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4e8:	1e5a      	subs	r2, r3, #1
 800b4ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4ec:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b4ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4f0:	691b      	ldr	r3, [r3, #16]
 800b4f2:	2b00      	cmp	r3, #0
 800b4f4:	d00f      	beq.n	800b516 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b4f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4f8:	3310      	adds	r3, #16
 800b4fa:	4618      	mov	r0, r3
 800b4fc:	f001 f812 	bl	800c524 <xTaskRemoveFromEventList>
 800b500:	4603      	mov	r3, r0
 800b502:	2b00      	cmp	r3, #0
 800b504:	d007      	beq.n	800b516 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b506:	4b3d      	ldr	r3, [pc, #244]	; (800b5fc <xQueueReceive+0x1bc>)
 800b508:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b50c:	601a      	str	r2, [r3, #0]
 800b50e:	f3bf 8f4f 	dsb	sy
 800b512:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b516:	f002 f955 	bl	800d7c4 <vPortExitCritical>
				return pdPASS;
 800b51a:	2301      	movs	r3, #1
 800b51c:	e069      	b.n	800b5f2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	2b00      	cmp	r3, #0
 800b522:	d103      	bne.n	800b52c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b524:	f002 f94e 	bl	800d7c4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b528:	2300      	movs	r3, #0
 800b52a:	e062      	b.n	800b5f2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b52c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b52e:	2b00      	cmp	r3, #0
 800b530:	d106      	bne.n	800b540 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b532:	f107 0310 	add.w	r3, r7, #16
 800b536:	4618      	mov	r0, r3
 800b538:	f001 f858 	bl	800c5ec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b53c:	2301      	movs	r3, #1
 800b53e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b540:	f002 f940 	bl	800d7c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b544:	f000 fda8 	bl	800c098 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b548:	f002 f90c 	bl	800d764 <vPortEnterCritical>
 800b54c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b54e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b552:	b25b      	sxtb	r3, r3
 800b554:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b558:	d103      	bne.n	800b562 <xQueueReceive+0x122>
 800b55a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b55c:	2200      	movs	r2, #0
 800b55e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b562:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b564:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b568:	b25b      	sxtb	r3, r3
 800b56a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b56e:	d103      	bne.n	800b578 <xQueueReceive+0x138>
 800b570:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b572:	2200      	movs	r2, #0
 800b574:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b578:	f002 f924 	bl	800d7c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b57c:	1d3a      	adds	r2, r7, #4
 800b57e:	f107 0310 	add.w	r3, r7, #16
 800b582:	4611      	mov	r1, r2
 800b584:	4618      	mov	r0, r3
 800b586:	f001 f847 	bl	800c618 <xTaskCheckForTimeOut>
 800b58a:	4603      	mov	r3, r0
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	d123      	bne.n	800b5d8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b590:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b592:	f000 f9ba 	bl	800b90a <prvIsQueueEmpty>
 800b596:	4603      	mov	r3, r0
 800b598:	2b00      	cmp	r3, #0
 800b59a:	d017      	beq.n	800b5cc <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b59c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b59e:	3324      	adds	r3, #36	; 0x24
 800b5a0:	687a      	ldr	r2, [r7, #4]
 800b5a2:	4611      	mov	r1, r2
 800b5a4:	4618      	mov	r0, r3
 800b5a6:	f000 ff6d 	bl	800c484 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b5aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b5ac:	f000 f95b 	bl	800b866 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b5b0:	f000 fd80 	bl	800c0b4 <xTaskResumeAll>
 800b5b4:	4603      	mov	r3, r0
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	d189      	bne.n	800b4ce <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800b5ba:	4b10      	ldr	r3, [pc, #64]	; (800b5fc <xQueueReceive+0x1bc>)
 800b5bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b5c0:	601a      	str	r2, [r3, #0]
 800b5c2:	f3bf 8f4f 	dsb	sy
 800b5c6:	f3bf 8f6f 	isb	sy
 800b5ca:	e780      	b.n	800b4ce <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800b5cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b5ce:	f000 f94a 	bl	800b866 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b5d2:	f000 fd6f 	bl	800c0b4 <xTaskResumeAll>
 800b5d6:	e77a      	b.n	800b4ce <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800b5d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b5da:	f000 f944 	bl	800b866 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b5de:	f000 fd69 	bl	800c0b4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b5e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b5e4:	f000 f991 	bl	800b90a <prvIsQueueEmpty>
 800b5e8:	4603      	mov	r3, r0
 800b5ea:	2b00      	cmp	r3, #0
 800b5ec:	f43f af6f 	beq.w	800b4ce <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b5f0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800b5f2:	4618      	mov	r0, r3
 800b5f4:	3730      	adds	r7, #48	; 0x30
 800b5f6:	46bd      	mov	sp, r7
 800b5f8:	bd80      	pop	{r7, pc}
 800b5fa:	bf00      	nop
 800b5fc:	e000ed04 	.word	0xe000ed04

0800b600 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800b600:	b580      	push	{r7, lr}
 800b602:	b08e      	sub	sp, #56	; 0x38
 800b604:	af00      	add	r7, sp, #0
 800b606:	60f8      	str	r0, [r7, #12]
 800b608:	60b9      	str	r1, [r7, #8]
 800b60a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b60c:	68fb      	ldr	r3, [r7, #12]
 800b60e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800b610:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b612:	2b00      	cmp	r3, #0
 800b614:	d10a      	bne.n	800b62c <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800b616:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b61a:	f383 8811 	msr	BASEPRI, r3
 800b61e:	f3bf 8f6f 	isb	sy
 800b622:	f3bf 8f4f 	dsb	sy
 800b626:	623b      	str	r3, [r7, #32]
}
 800b628:	bf00      	nop
 800b62a:	e7fe      	b.n	800b62a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b62c:	68bb      	ldr	r3, [r7, #8]
 800b62e:	2b00      	cmp	r3, #0
 800b630:	d103      	bne.n	800b63a <xQueueReceiveFromISR+0x3a>
 800b632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b636:	2b00      	cmp	r3, #0
 800b638:	d101      	bne.n	800b63e <xQueueReceiveFromISR+0x3e>
 800b63a:	2301      	movs	r3, #1
 800b63c:	e000      	b.n	800b640 <xQueueReceiveFromISR+0x40>
 800b63e:	2300      	movs	r3, #0
 800b640:	2b00      	cmp	r3, #0
 800b642:	d10a      	bne.n	800b65a <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800b644:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b648:	f383 8811 	msr	BASEPRI, r3
 800b64c:	f3bf 8f6f 	isb	sy
 800b650:	f3bf 8f4f 	dsb	sy
 800b654:	61fb      	str	r3, [r7, #28]
}
 800b656:	bf00      	nop
 800b658:	e7fe      	b.n	800b658 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b65a:	f002 f965 	bl	800d928 <vPortValidateInterruptPriority>
	__asm volatile
 800b65e:	f3ef 8211 	mrs	r2, BASEPRI
 800b662:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b666:	f383 8811 	msr	BASEPRI, r3
 800b66a:	f3bf 8f6f 	isb	sy
 800b66e:	f3bf 8f4f 	dsb	sy
 800b672:	61ba      	str	r2, [r7, #24]
 800b674:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800b676:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b678:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b67a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b67c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b67e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b680:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b682:	2b00      	cmp	r3, #0
 800b684:	d02f      	beq.n	800b6e6 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800b686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b688:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b68c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b690:	68b9      	ldr	r1, [r7, #8]
 800b692:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b694:	f000 f8c1 	bl	800b81a <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b698:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b69a:	1e5a      	subs	r2, r3, #1
 800b69c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b69e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800b6a0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b6a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b6a8:	d112      	bne.n	800b6d0 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b6aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6ac:	691b      	ldr	r3, [r3, #16]
 800b6ae:	2b00      	cmp	r3, #0
 800b6b0:	d016      	beq.n	800b6e0 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b6b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6b4:	3310      	adds	r3, #16
 800b6b6:	4618      	mov	r0, r3
 800b6b8:	f000 ff34 	bl	800c524 <xTaskRemoveFromEventList>
 800b6bc:	4603      	mov	r3, r0
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	d00e      	beq.n	800b6e0 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	d00b      	beq.n	800b6e0 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	2201      	movs	r2, #1
 800b6cc:	601a      	str	r2, [r3, #0]
 800b6ce:	e007      	b.n	800b6e0 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800b6d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b6d4:	3301      	adds	r3, #1
 800b6d6:	b2db      	uxtb	r3, r3
 800b6d8:	b25a      	sxtb	r2, r3
 800b6da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800b6e0:	2301      	movs	r3, #1
 800b6e2:	637b      	str	r3, [r7, #52]	; 0x34
 800b6e4:	e001      	b.n	800b6ea <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800b6e6:	2300      	movs	r3, #0
 800b6e8:	637b      	str	r3, [r7, #52]	; 0x34
 800b6ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6ec:	613b      	str	r3, [r7, #16]
	__asm volatile
 800b6ee:	693b      	ldr	r3, [r7, #16]
 800b6f0:	f383 8811 	msr	BASEPRI, r3
}
 800b6f4:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b6f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800b6f8:	4618      	mov	r0, r3
 800b6fa:	3738      	adds	r7, #56	; 0x38
 800b6fc:	46bd      	mov	sp, r7
 800b6fe:	bd80      	pop	{r7, pc}

0800b700 <uxQueueSpacesAvailable>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueSpacesAvailable( const QueueHandle_t xQueue )
{
 800b700:	b580      	push	{r7, lr}
 800b702:	b086      	sub	sp, #24
 800b704:	af00      	add	r7, sp, #0
 800b706:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 800b70c:	697b      	ldr	r3, [r7, #20]
 800b70e:	2b00      	cmp	r3, #0
 800b710:	d10a      	bne.n	800b728 <uxQueueSpacesAvailable+0x28>
	__asm volatile
 800b712:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b716:	f383 8811 	msr	BASEPRI, r3
 800b71a:	f3bf 8f6f 	isb	sy
 800b71e:	f3bf 8f4f 	dsb	sy
 800b722:	60fb      	str	r3, [r7, #12]
}
 800b724:	bf00      	nop
 800b726:	e7fe      	b.n	800b726 <uxQueueSpacesAvailable+0x26>

	taskENTER_CRITICAL();
 800b728:	f002 f81c 	bl	800d764 <vPortEnterCritical>
	{
		uxReturn = pxQueue->uxLength - pxQueue->uxMessagesWaiting;
 800b72c:	697b      	ldr	r3, [r7, #20]
 800b72e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b730:	697b      	ldr	r3, [r7, #20]
 800b732:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b734:	1ad3      	subs	r3, r2, r3
 800b736:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 800b738:	f002 f844 	bl	800d7c4 <vPortExitCritical>

	return uxReturn;
 800b73c:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800b73e:	4618      	mov	r0, r3
 800b740:	3718      	adds	r7, #24
 800b742:	46bd      	mov	sp, r7
 800b744:	bd80      	pop	{r7, pc}

0800b746 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800b746:	b580      	push	{r7, lr}
 800b748:	b086      	sub	sp, #24
 800b74a:	af00      	add	r7, sp, #0
 800b74c:	60f8      	str	r0, [r7, #12]
 800b74e:	60b9      	str	r1, [r7, #8]
 800b750:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800b752:	2300      	movs	r3, #0
 800b754:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b756:	68fb      	ldr	r3, [r7, #12]
 800b758:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b75a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800b75c:	68fb      	ldr	r3, [r7, #12]
 800b75e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b760:	2b00      	cmp	r3, #0
 800b762:	d10d      	bne.n	800b780 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b764:	68fb      	ldr	r3, [r7, #12]
 800b766:	681b      	ldr	r3, [r3, #0]
 800b768:	2b00      	cmp	r3, #0
 800b76a:	d14d      	bne.n	800b808 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b76c:	68fb      	ldr	r3, [r7, #12]
 800b76e:	689b      	ldr	r3, [r3, #8]
 800b770:	4618      	mov	r0, r3
 800b772:	f001 f8b7 	bl	800c8e4 <xTaskPriorityDisinherit>
 800b776:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800b778:	68fb      	ldr	r3, [r7, #12]
 800b77a:	2200      	movs	r2, #0
 800b77c:	609a      	str	r2, [r3, #8]
 800b77e:	e043      	b.n	800b808 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	2b00      	cmp	r3, #0
 800b784:	d119      	bne.n	800b7ba <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b786:	68fb      	ldr	r3, [r7, #12]
 800b788:	6858      	ldr	r0, [r3, #4]
 800b78a:	68fb      	ldr	r3, [r7, #12]
 800b78c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b78e:	461a      	mov	r2, r3
 800b790:	68b9      	ldr	r1, [r7, #8]
 800b792:	f002 fc16 	bl	800dfc2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b796:	68fb      	ldr	r3, [r7, #12]
 800b798:	685a      	ldr	r2, [r3, #4]
 800b79a:	68fb      	ldr	r3, [r7, #12]
 800b79c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b79e:	441a      	add	r2, r3
 800b7a0:	68fb      	ldr	r3, [r7, #12]
 800b7a2:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b7a4:	68fb      	ldr	r3, [r7, #12]
 800b7a6:	685a      	ldr	r2, [r3, #4]
 800b7a8:	68fb      	ldr	r3, [r7, #12]
 800b7aa:	689b      	ldr	r3, [r3, #8]
 800b7ac:	429a      	cmp	r2, r3
 800b7ae:	d32b      	bcc.n	800b808 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800b7b0:	68fb      	ldr	r3, [r7, #12]
 800b7b2:	681a      	ldr	r2, [r3, #0]
 800b7b4:	68fb      	ldr	r3, [r7, #12]
 800b7b6:	605a      	str	r2, [r3, #4]
 800b7b8:	e026      	b.n	800b808 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800b7ba:	68fb      	ldr	r3, [r7, #12]
 800b7bc:	68d8      	ldr	r0, [r3, #12]
 800b7be:	68fb      	ldr	r3, [r7, #12]
 800b7c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b7c2:	461a      	mov	r2, r3
 800b7c4:	68b9      	ldr	r1, [r7, #8]
 800b7c6:	f002 fbfc 	bl	800dfc2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800b7ca:	68fb      	ldr	r3, [r7, #12]
 800b7cc:	68da      	ldr	r2, [r3, #12]
 800b7ce:	68fb      	ldr	r3, [r7, #12]
 800b7d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b7d2:	425b      	negs	r3, r3
 800b7d4:	441a      	add	r2, r3
 800b7d6:	68fb      	ldr	r3, [r7, #12]
 800b7d8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b7da:	68fb      	ldr	r3, [r7, #12]
 800b7dc:	68da      	ldr	r2, [r3, #12]
 800b7de:	68fb      	ldr	r3, [r7, #12]
 800b7e0:	681b      	ldr	r3, [r3, #0]
 800b7e2:	429a      	cmp	r2, r3
 800b7e4:	d207      	bcs.n	800b7f6 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800b7e6:	68fb      	ldr	r3, [r7, #12]
 800b7e8:	689a      	ldr	r2, [r3, #8]
 800b7ea:	68fb      	ldr	r3, [r7, #12]
 800b7ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b7ee:	425b      	negs	r3, r3
 800b7f0:	441a      	add	r2, r3
 800b7f2:	68fb      	ldr	r3, [r7, #12]
 800b7f4:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	2b02      	cmp	r3, #2
 800b7fa:	d105      	bne.n	800b808 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b7fc:	693b      	ldr	r3, [r7, #16]
 800b7fe:	2b00      	cmp	r3, #0
 800b800:	d002      	beq.n	800b808 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800b802:	693b      	ldr	r3, [r7, #16]
 800b804:	3b01      	subs	r3, #1
 800b806:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b808:	693b      	ldr	r3, [r7, #16]
 800b80a:	1c5a      	adds	r2, r3, #1
 800b80c:	68fb      	ldr	r3, [r7, #12]
 800b80e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800b810:	697b      	ldr	r3, [r7, #20]
}
 800b812:	4618      	mov	r0, r3
 800b814:	3718      	adds	r7, #24
 800b816:	46bd      	mov	sp, r7
 800b818:	bd80      	pop	{r7, pc}

0800b81a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800b81a:	b580      	push	{r7, lr}
 800b81c:	b082      	sub	sp, #8
 800b81e:	af00      	add	r7, sp, #0
 800b820:	6078      	str	r0, [r7, #4]
 800b822:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b828:	2b00      	cmp	r3, #0
 800b82a:	d018      	beq.n	800b85e <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	68da      	ldr	r2, [r3, #12]
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b834:	441a      	add	r2, r3
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	68da      	ldr	r2, [r3, #12]
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	689b      	ldr	r3, [r3, #8]
 800b842:	429a      	cmp	r2, r3
 800b844:	d303      	bcc.n	800b84e <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	681a      	ldr	r2, [r3, #0]
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	68d9      	ldr	r1, [r3, #12]
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b856:	461a      	mov	r2, r3
 800b858:	6838      	ldr	r0, [r7, #0]
 800b85a:	f002 fbb2 	bl	800dfc2 <memcpy>
	}
}
 800b85e:	bf00      	nop
 800b860:	3708      	adds	r7, #8
 800b862:	46bd      	mov	sp, r7
 800b864:	bd80      	pop	{r7, pc}

0800b866 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800b866:	b580      	push	{r7, lr}
 800b868:	b084      	sub	sp, #16
 800b86a:	af00      	add	r7, sp, #0
 800b86c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800b86e:	f001 ff79 	bl	800d764 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b878:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b87a:	e011      	b.n	800b8a0 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b880:	2b00      	cmp	r3, #0
 800b882:	d012      	beq.n	800b8aa <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	3324      	adds	r3, #36	; 0x24
 800b888:	4618      	mov	r0, r3
 800b88a:	f000 fe4b 	bl	800c524 <xTaskRemoveFromEventList>
 800b88e:	4603      	mov	r3, r0
 800b890:	2b00      	cmp	r3, #0
 800b892:	d001      	beq.n	800b898 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800b894:	f000 ff22 	bl	800c6dc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800b898:	7bfb      	ldrb	r3, [r7, #15]
 800b89a:	3b01      	subs	r3, #1
 800b89c:	b2db      	uxtb	r3, r3
 800b89e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b8a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b8a4:	2b00      	cmp	r3, #0
 800b8a6:	dce9      	bgt.n	800b87c <prvUnlockQueue+0x16>
 800b8a8:	e000      	b.n	800b8ac <prvUnlockQueue+0x46>
					break;
 800b8aa:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	22ff      	movs	r2, #255	; 0xff
 800b8b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800b8b4:	f001 ff86 	bl	800d7c4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800b8b8:	f001 ff54 	bl	800d764 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b8c2:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b8c4:	e011      	b.n	800b8ea <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	691b      	ldr	r3, [r3, #16]
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	d012      	beq.n	800b8f4 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	3310      	adds	r3, #16
 800b8d2:	4618      	mov	r0, r3
 800b8d4:	f000 fe26 	bl	800c524 <xTaskRemoveFromEventList>
 800b8d8:	4603      	mov	r3, r0
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	d001      	beq.n	800b8e2 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800b8de:	f000 fefd 	bl	800c6dc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800b8e2:	7bbb      	ldrb	r3, [r7, #14]
 800b8e4:	3b01      	subs	r3, #1
 800b8e6:	b2db      	uxtb	r3, r3
 800b8e8:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b8ea:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	dce9      	bgt.n	800b8c6 <prvUnlockQueue+0x60>
 800b8f2:	e000      	b.n	800b8f6 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800b8f4:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	22ff      	movs	r2, #255	; 0xff
 800b8fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800b8fe:	f001 ff61 	bl	800d7c4 <vPortExitCritical>
}
 800b902:	bf00      	nop
 800b904:	3710      	adds	r7, #16
 800b906:	46bd      	mov	sp, r7
 800b908:	bd80      	pop	{r7, pc}

0800b90a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800b90a:	b580      	push	{r7, lr}
 800b90c:	b084      	sub	sp, #16
 800b90e:	af00      	add	r7, sp, #0
 800b910:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b912:	f001 ff27 	bl	800d764 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b91a:	2b00      	cmp	r3, #0
 800b91c:	d102      	bne.n	800b924 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800b91e:	2301      	movs	r3, #1
 800b920:	60fb      	str	r3, [r7, #12]
 800b922:	e001      	b.n	800b928 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800b924:	2300      	movs	r3, #0
 800b926:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b928:	f001 ff4c 	bl	800d7c4 <vPortExitCritical>

	return xReturn;
 800b92c:	68fb      	ldr	r3, [r7, #12]
}
 800b92e:	4618      	mov	r0, r3
 800b930:	3710      	adds	r7, #16
 800b932:	46bd      	mov	sp, r7
 800b934:	bd80      	pop	{r7, pc}

0800b936 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800b936:	b580      	push	{r7, lr}
 800b938:	b084      	sub	sp, #16
 800b93a:	af00      	add	r7, sp, #0
 800b93c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b93e:	f001 ff11 	bl	800d764 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b94a:	429a      	cmp	r2, r3
 800b94c:	d102      	bne.n	800b954 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800b94e:	2301      	movs	r3, #1
 800b950:	60fb      	str	r3, [r7, #12]
 800b952:	e001      	b.n	800b958 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800b954:	2300      	movs	r3, #0
 800b956:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b958:	f001 ff34 	bl	800d7c4 <vPortExitCritical>

	return xReturn;
 800b95c:	68fb      	ldr	r3, [r7, #12]
}
 800b95e:	4618      	mov	r0, r3
 800b960:	3710      	adds	r7, #16
 800b962:	46bd      	mov	sp, r7
 800b964:	bd80      	pop	{r7, pc}
	...

0800b968 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800b968:	b480      	push	{r7}
 800b96a:	b085      	sub	sp, #20
 800b96c:	af00      	add	r7, sp, #0
 800b96e:	6078      	str	r0, [r7, #4]
 800b970:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b972:	2300      	movs	r3, #0
 800b974:	60fb      	str	r3, [r7, #12]
 800b976:	e014      	b.n	800b9a2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800b978:	4a0f      	ldr	r2, [pc, #60]	; (800b9b8 <vQueueAddToRegistry+0x50>)
 800b97a:	68fb      	ldr	r3, [r7, #12]
 800b97c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800b980:	2b00      	cmp	r3, #0
 800b982:	d10b      	bne.n	800b99c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800b984:	490c      	ldr	r1, [pc, #48]	; (800b9b8 <vQueueAddToRegistry+0x50>)
 800b986:	68fb      	ldr	r3, [r7, #12]
 800b988:	683a      	ldr	r2, [r7, #0]
 800b98a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800b98e:	4a0a      	ldr	r2, [pc, #40]	; (800b9b8 <vQueueAddToRegistry+0x50>)
 800b990:	68fb      	ldr	r3, [r7, #12]
 800b992:	00db      	lsls	r3, r3, #3
 800b994:	4413      	add	r3, r2
 800b996:	687a      	ldr	r2, [r7, #4]
 800b998:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800b99a:	e006      	b.n	800b9aa <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b99c:	68fb      	ldr	r3, [r7, #12]
 800b99e:	3301      	adds	r3, #1
 800b9a0:	60fb      	str	r3, [r7, #12]
 800b9a2:	68fb      	ldr	r3, [r7, #12]
 800b9a4:	2b07      	cmp	r3, #7
 800b9a6:	d9e7      	bls.n	800b978 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800b9a8:	bf00      	nop
 800b9aa:	bf00      	nop
 800b9ac:	3714      	adds	r7, #20
 800b9ae:	46bd      	mov	sp, r7
 800b9b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9b4:	4770      	bx	lr
 800b9b6:	bf00      	nop
 800b9b8:	20001984 	.word	0x20001984

0800b9bc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b9bc:	b580      	push	{r7, lr}
 800b9be:	b086      	sub	sp, #24
 800b9c0:	af00      	add	r7, sp, #0
 800b9c2:	60f8      	str	r0, [r7, #12]
 800b9c4:	60b9      	str	r1, [r7, #8]
 800b9c6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800b9c8:	68fb      	ldr	r3, [r7, #12]
 800b9ca:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800b9cc:	f001 feca 	bl	800d764 <vPortEnterCritical>
 800b9d0:	697b      	ldr	r3, [r7, #20]
 800b9d2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b9d6:	b25b      	sxtb	r3, r3
 800b9d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b9dc:	d103      	bne.n	800b9e6 <vQueueWaitForMessageRestricted+0x2a>
 800b9de:	697b      	ldr	r3, [r7, #20]
 800b9e0:	2200      	movs	r2, #0
 800b9e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b9e6:	697b      	ldr	r3, [r7, #20]
 800b9e8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b9ec:	b25b      	sxtb	r3, r3
 800b9ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b9f2:	d103      	bne.n	800b9fc <vQueueWaitForMessageRestricted+0x40>
 800b9f4:	697b      	ldr	r3, [r7, #20]
 800b9f6:	2200      	movs	r2, #0
 800b9f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b9fc:	f001 fee2 	bl	800d7c4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800ba00:	697b      	ldr	r3, [r7, #20]
 800ba02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba04:	2b00      	cmp	r3, #0
 800ba06:	d106      	bne.n	800ba16 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800ba08:	697b      	ldr	r3, [r7, #20]
 800ba0a:	3324      	adds	r3, #36	; 0x24
 800ba0c:	687a      	ldr	r2, [r7, #4]
 800ba0e:	68b9      	ldr	r1, [r7, #8]
 800ba10:	4618      	mov	r0, r3
 800ba12:	f000 fd5b 	bl	800c4cc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800ba16:	6978      	ldr	r0, [r7, #20]
 800ba18:	f7ff ff25 	bl	800b866 <prvUnlockQueue>
	}
 800ba1c:	bf00      	nop
 800ba1e:	3718      	adds	r7, #24
 800ba20:	46bd      	mov	sp, r7
 800ba22:	bd80      	pop	{r7, pc}

0800ba24 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800ba24:	b580      	push	{r7, lr}
 800ba26:	b08e      	sub	sp, #56	; 0x38
 800ba28:	af04      	add	r7, sp, #16
 800ba2a:	60f8      	str	r0, [r7, #12]
 800ba2c:	60b9      	str	r1, [r7, #8]
 800ba2e:	607a      	str	r2, [r7, #4]
 800ba30:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800ba32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba34:	2b00      	cmp	r3, #0
 800ba36:	d10a      	bne.n	800ba4e <xTaskCreateStatic+0x2a>
	__asm volatile
 800ba38:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba3c:	f383 8811 	msr	BASEPRI, r3
 800ba40:	f3bf 8f6f 	isb	sy
 800ba44:	f3bf 8f4f 	dsb	sy
 800ba48:	623b      	str	r3, [r7, #32]
}
 800ba4a:	bf00      	nop
 800ba4c:	e7fe      	b.n	800ba4c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800ba4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba50:	2b00      	cmp	r3, #0
 800ba52:	d10a      	bne.n	800ba6a <xTaskCreateStatic+0x46>
	__asm volatile
 800ba54:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba58:	f383 8811 	msr	BASEPRI, r3
 800ba5c:	f3bf 8f6f 	isb	sy
 800ba60:	f3bf 8f4f 	dsb	sy
 800ba64:	61fb      	str	r3, [r7, #28]
}
 800ba66:	bf00      	nop
 800ba68:	e7fe      	b.n	800ba68 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800ba6a:	23c0      	movs	r3, #192	; 0xc0
 800ba6c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800ba6e:	693b      	ldr	r3, [r7, #16]
 800ba70:	2bc0      	cmp	r3, #192	; 0xc0
 800ba72:	d00a      	beq.n	800ba8a <xTaskCreateStatic+0x66>
	__asm volatile
 800ba74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba78:	f383 8811 	msr	BASEPRI, r3
 800ba7c:	f3bf 8f6f 	isb	sy
 800ba80:	f3bf 8f4f 	dsb	sy
 800ba84:	61bb      	str	r3, [r7, #24]
}
 800ba86:	bf00      	nop
 800ba88:	e7fe      	b.n	800ba88 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800ba8a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800ba8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba8e:	2b00      	cmp	r3, #0
 800ba90:	d01e      	beq.n	800bad0 <xTaskCreateStatic+0xac>
 800ba92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	d01b      	beq.n	800bad0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ba98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba9a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800ba9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba9e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800baa0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800baa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800baa4:	2202      	movs	r2, #2
 800baa6:	f883 20bd 	strb.w	r2, [r3, #189]	; 0xbd
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800baaa:	2300      	movs	r3, #0
 800baac:	9303      	str	r3, [sp, #12]
 800baae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bab0:	9302      	str	r3, [sp, #8]
 800bab2:	f107 0314 	add.w	r3, r7, #20
 800bab6:	9301      	str	r3, [sp, #4]
 800bab8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800baba:	9300      	str	r3, [sp, #0]
 800babc:	683b      	ldr	r3, [r7, #0]
 800babe:	687a      	ldr	r2, [r7, #4]
 800bac0:	68b9      	ldr	r1, [r7, #8]
 800bac2:	68f8      	ldr	r0, [r7, #12]
 800bac4:	f000 f850 	bl	800bb68 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800bac8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800baca:	f000 f8f7 	bl	800bcbc <prvAddNewTaskToReadyList>
 800bace:	e001      	b.n	800bad4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800bad0:	2300      	movs	r3, #0
 800bad2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800bad4:	697b      	ldr	r3, [r7, #20]
	}
 800bad6:	4618      	mov	r0, r3
 800bad8:	3728      	adds	r7, #40	; 0x28
 800bada:	46bd      	mov	sp, r7
 800badc:	bd80      	pop	{r7, pc}

0800bade <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800bade:	b580      	push	{r7, lr}
 800bae0:	b08c      	sub	sp, #48	; 0x30
 800bae2:	af04      	add	r7, sp, #16
 800bae4:	60f8      	str	r0, [r7, #12]
 800bae6:	60b9      	str	r1, [r7, #8]
 800bae8:	603b      	str	r3, [r7, #0]
 800baea:	4613      	mov	r3, r2
 800baec:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800baee:	88fb      	ldrh	r3, [r7, #6]
 800baf0:	009b      	lsls	r3, r3, #2
 800baf2:	4618      	mov	r0, r3
 800baf4:	f001 ff58 	bl	800d9a8 <pvPortMalloc>
 800baf8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800bafa:	697b      	ldr	r3, [r7, #20]
 800bafc:	2b00      	cmp	r3, #0
 800bafe:	d00e      	beq.n	800bb1e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800bb00:	20c0      	movs	r0, #192	; 0xc0
 800bb02:	f001 ff51 	bl	800d9a8 <pvPortMalloc>
 800bb06:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800bb08:	69fb      	ldr	r3, [r7, #28]
 800bb0a:	2b00      	cmp	r3, #0
 800bb0c:	d003      	beq.n	800bb16 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800bb0e:	69fb      	ldr	r3, [r7, #28]
 800bb10:	697a      	ldr	r2, [r7, #20]
 800bb12:	631a      	str	r2, [r3, #48]	; 0x30
 800bb14:	e005      	b.n	800bb22 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800bb16:	6978      	ldr	r0, [r7, #20]
 800bb18:	f002 f812 	bl	800db40 <vPortFree>
 800bb1c:	e001      	b.n	800bb22 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800bb1e:	2300      	movs	r3, #0
 800bb20:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800bb22:	69fb      	ldr	r3, [r7, #28]
 800bb24:	2b00      	cmp	r3, #0
 800bb26:	d017      	beq.n	800bb58 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800bb28:	69fb      	ldr	r3, [r7, #28]
 800bb2a:	2200      	movs	r2, #0
 800bb2c:	f883 20bd 	strb.w	r2, [r3, #189]	; 0xbd
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800bb30:	88fa      	ldrh	r2, [r7, #6]
 800bb32:	2300      	movs	r3, #0
 800bb34:	9303      	str	r3, [sp, #12]
 800bb36:	69fb      	ldr	r3, [r7, #28]
 800bb38:	9302      	str	r3, [sp, #8]
 800bb3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb3c:	9301      	str	r3, [sp, #4]
 800bb3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb40:	9300      	str	r3, [sp, #0]
 800bb42:	683b      	ldr	r3, [r7, #0]
 800bb44:	68b9      	ldr	r1, [r7, #8]
 800bb46:	68f8      	ldr	r0, [r7, #12]
 800bb48:	f000 f80e 	bl	800bb68 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800bb4c:	69f8      	ldr	r0, [r7, #28]
 800bb4e:	f000 f8b5 	bl	800bcbc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800bb52:	2301      	movs	r3, #1
 800bb54:	61bb      	str	r3, [r7, #24]
 800bb56:	e002      	b.n	800bb5e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800bb58:	f04f 33ff 	mov.w	r3, #4294967295
 800bb5c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800bb5e:	69bb      	ldr	r3, [r7, #24]
	}
 800bb60:	4618      	mov	r0, r3
 800bb62:	3720      	adds	r7, #32
 800bb64:	46bd      	mov	sp, r7
 800bb66:	bd80      	pop	{r7, pc}

0800bb68 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800bb68:	b580      	push	{r7, lr}
 800bb6a:	b088      	sub	sp, #32
 800bb6c:	af00      	add	r7, sp, #0
 800bb6e:	60f8      	str	r0, [r7, #12]
 800bb70:	60b9      	str	r1, [r7, #8]
 800bb72:	607a      	str	r2, [r7, #4]
 800bb74:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800bb76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb78:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	009b      	lsls	r3, r3, #2
 800bb7e:	461a      	mov	r2, r3
 800bb80:	21a5      	movs	r1, #165	; 0xa5
 800bb82:	f002 fa2c 	bl	800dfde <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800bb86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb88:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800bb90:	3b01      	subs	r3, #1
 800bb92:	009b      	lsls	r3, r3, #2
 800bb94:	4413      	add	r3, r2
 800bb96:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800bb98:	69bb      	ldr	r3, [r7, #24]
 800bb9a:	f023 0307 	bic.w	r3, r3, #7
 800bb9e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800bba0:	69bb      	ldr	r3, [r7, #24]
 800bba2:	f003 0307 	and.w	r3, r3, #7
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	d00a      	beq.n	800bbc0 <prvInitialiseNewTask+0x58>
	__asm volatile
 800bbaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbae:	f383 8811 	msr	BASEPRI, r3
 800bbb2:	f3bf 8f6f 	isb	sy
 800bbb6:	f3bf 8f4f 	dsb	sy
 800bbba:	617b      	str	r3, [r7, #20]
}
 800bbbc:	bf00      	nop
 800bbbe:	e7fe      	b.n	800bbbe <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800bbc0:	68bb      	ldr	r3, [r7, #8]
 800bbc2:	2b00      	cmp	r3, #0
 800bbc4:	d01f      	beq.n	800bc06 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800bbc6:	2300      	movs	r3, #0
 800bbc8:	61fb      	str	r3, [r7, #28]
 800bbca:	e012      	b.n	800bbf2 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800bbcc:	68ba      	ldr	r2, [r7, #8]
 800bbce:	69fb      	ldr	r3, [r7, #28]
 800bbd0:	4413      	add	r3, r2
 800bbd2:	7819      	ldrb	r1, [r3, #0]
 800bbd4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bbd6:	69fb      	ldr	r3, [r7, #28]
 800bbd8:	4413      	add	r3, r2
 800bbda:	3334      	adds	r3, #52	; 0x34
 800bbdc:	460a      	mov	r2, r1
 800bbde:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800bbe0:	68ba      	ldr	r2, [r7, #8]
 800bbe2:	69fb      	ldr	r3, [r7, #28]
 800bbe4:	4413      	add	r3, r2
 800bbe6:	781b      	ldrb	r3, [r3, #0]
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	d006      	beq.n	800bbfa <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800bbec:	69fb      	ldr	r3, [r7, #28]
 800bbee:	3301      	adds	r3, #1
 800bbf0:	61fb      	str	r3, [r7, #28]
 800bbf2:	69fb      	ldr	r3, [r7, #28]
 800bbf4:	2b0f      	cmp	r3, #15
 800bbf6:	d9e9      	bls.n	800bbcc <prvInitialiseNewTask+0x64>
 800bbf8:	e000      	b.n	800bbfc <prvInitialiseNewTask+0x94>
			{
				break;
 800bbfa:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800bbfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbfe:	2200      	movs	r2, #0
 800bc00:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800bc04:	e003      	b.n	800bc0e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800bc06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc08:	2200      	movs	r2, #0
 800bc0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800bc0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc10:	2b37      	cmp	r3, #55	; 0x37
 800bc12:	d901      	bls.n	800bc18 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800bc14:	2337      	movs	r3, #55	; 0x37
 800bc16:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800bc18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc1a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bc1c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800bc1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc20:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bc22:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800bc24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc26:	2200      	movs	r2, #0
 800bc28:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800bc2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc2c:	3304      	adds	r3, #4
 800bc2e:	4618      	mov	r0, r3
 800bc30:	f7ff f89a 	bl	800ad68 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800bc34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc36:	3318      	adds	r3, #24
 800bc38:	4618      	mov	r0, r3
 800bc3a:	f7ff f895 	bl	800ad68 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800bc3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bc42:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bc44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc46:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800bc4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc4c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800bc4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bc52:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 800bc54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc56:	2200      	movs	r2, #0
 800bc58:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800bc5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc5c:	2200      	movs	r2, #0
 800bc5e:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800bc62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc64:	2200      	movs	r2, #0
 800bc66:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800bc6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc6c:	3358      	adds	r3, #88	; 0x58
 800bc6e:	2260      	movs	r2, #96	; 0x60
 800bc70:	2100      	movs	r1, #0
 800bc72:	4618      	mov	r0, r3
 800bc74:	f002 f9b3 	bl	800dfde <memset>
 800bc78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc7a:	4a0d      	ldr	r2, [pc, #52]	; (800bcb0 <prvInitialiseNewTask+0x148>)
 800bc7c:	65da      	str	r2, [r3, #92]	; 0x5c
 800bc7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc80:	4a0c      	ldr	r2, [pc, #48]	; (800bcb4 <prvInitialiseNewTask+0x14c>)
 800bc82:	661a      	str	r2, [r3, #96]	; 0x60
 800bc84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc86:	4a0c      	ldr	r2, [pc, #48]	; (800bcb8 <prvInitialiseNewTask+0x150>)
 800bc88:	665a      	str	r2, [r3, #100]	; 0x64
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800bc8a:	683a      	ldr	r2, [r7, #0]
 800bc8c:	68f9      	ldr	r1, [r7, #12]
 800bc8e:	69b8      	ldr	r0, [r7, #24]
 800bc90:	f001 fc3a 	bl	800d508 <pxPortInitialiseStack>
 800bc94:	4602      	mov	r2, r0
 800bc96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc98:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800bc9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc9c:	2b00      	cmp	r3, #0
 800bc9e:	d002      	beq.n	800bca6 <prvInitialiseNewTask+0x13e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800bca0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bca2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bca4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bca6:	bf00      	nop
 800bca8:	3720      	adds	r7, #32
 800bcaa:	46bd      	mov	sp, r7
 800bcac:	bd80      	pop	{r7, pc}
 800bcae:	bf00      	nop
 800bcb0:	08010178 	.word	0x08010178
 800bcb4:	08010198 	.word	0x08010198
 800bcb8:	08010158 	.word	0x08010158

0800bcbc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800bcbc:	b580      	push	{r7, lr}
 800bcbe:	b082      	sub	sp, #8
 800bcc0:	af00      	add	r7, sp, #0
 800bcc2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800bcc4:	f001 fd4e 	bl	800d764 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800bcc8:	4b2d      	ldr	r3, [pc, #180]	; (800bd80 <prvAddNewTaskToReadyList+0xc4>)
 800bcca:	681b      	ldr	r3, [r3, #0]
 800bccc:	3301      	adds	r3, #1
 800bcce:	4a2c      	ldr	r2, [pc, #176]	; (800bd80 <prvAddNewTaskToReadyList+0xc4>)
 800bcd0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800bcd2:	4b2c      	ldr	r3, [pc, #176]	; (800bd84 <prvAddNewTaskToReadyList+0xc8>)
 800bcd4:	681b      	ldr	r3, [r3, #0]
 800bcd6:	2b00      	cmp	r3, #0
 800bcd8:	d109      	bne.n	800bcee <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800bcda:	4a2a      	ldr	r2, [pc, #168]	; (800bd84 <prvAddNewTaskToReadyList+0xc8>)
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800bce0:	4b27      	ldr	r3, [pc, #156]	; (800bd80 <prvAddNewTaskToReadyList+0xc4>)
 800bce2:	681b      	ldr	r3, [r3, #0]
 800bce4:	2b01      	cmp	r3, #1
 800bce6:	d110      	bne.n	800bd0a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800bce8:	f000 fd1c 	bl	800c724 <prvInitialiseTaskLists>
 800bcec:	e00d      	b.n	800bd0a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800bcee:	4b26      	ldr	r3, [pc, #152]	; (800bd88 <prvAddNewTaskToReadyList+0xcc>)
 800bcf0:	681b      	ldr	r3, [r3, #0]
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	d109      	bne.n	800bd0a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800bcf6:	4b23      	ldr	r3, [pc, #140]	; (800bd84 <prvAddNewTaskToReadyList+0xc8>)
 800bcf8:	681b      	ldr	r3, [r3, #0]
 800bcfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd00:	429a      	cmp	r2, r3
 800bd02:	d802      	bhi.n	800bd0a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800bd04:	4a1f      	ldr	r2, [pc, #124]	; (800bd84 <prvAddNewTaskToReadyList+0xc8>)
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800bd0a:	4b20      	ldr	r3, [pc, #128]	; (800bd8c <prvAddNewTaskToReadyList+0xd0>)
 800bd0c:	681b      	ldr	r3, [r3, #0]
 800bd0e:	3301      	adds	r3, #1
 800bd10:	4a1e      	ldr	r2, [pc, #120]	; (800bd8c <prvAddNewTaskToReadyList+0xd0>)
 800bd12:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800bd14:	4b1d      	ldr	r3, [pc, #116]	; (800bd8c <prvAddNewTaskToReadyList+0xd0>)
 800bd16:	681a      	ldr	r2, [r3, #0]
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd20:	4b1b      	ldr	r3, [pc, #108]	; (800bd90 <prvAddNewTaskToReadyList+0xd4>)
 800bd22:	681b      	ldr	r3, [r3, #0]
 800bd24:	429a      	cmp	r2, r3
 800bd26:	d903      	bls.n	800bd30 <prvAddNewTaskToReadyList+0x74>
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd2c:	4a18      	ldr	r2, [pc, #96]	; (800bd90 <prvAddNewTaskToReadyList+0xd4>)
 800bd2e:	6013      	str	r3, [r2, #0]
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd34:	4613      	mov	r3, r2
 800bd36:	009b      	lsls	r3, r3, #2
 800bd38:	4413      	add	r3, r2
 800bd3a:	009b      	lsls	r3, r3, #2
 800bd3c:	4a15      	ldr	r2, [pc, #84]	; (800bd94 <prvAddNewTaskToReadyList+0xd8>)
 800bd3e:	441a      	add	r2, r3
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	3304      	adds	r3, #4
 800bd44:	4619      	mov	r1, r3
 800bd46:	4610      	mov	r0, r2
 800bd48:	f7ff f81b 	bl	800ad82 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800bd4c:	f001 fd3a 	bl	800d7c4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800bd50:	4b0d      	ldr	r3, [pc, #52]	; (800bd88 <prvAddNewTaskToReadyList+0xcc>)
 800bd52:	681b      	ldr	r3, [r3, #0]
 800bd54:	2b00      	cmp	r3, #0
 800bd56:	d00e      	beq.n	800bd76 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800bd58:	4b0a      	ldr	r3, [pc, #40]	; (800bd84 <prvAddNewTaskToReadyList+0xc8>)
 800bd5a:	681b      	ldr	r3, [r3, #0]
 800bd5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd62:	429a      	cmp	r2, r3
 800bd64:	d207      	bcs.n	800bd76 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800bd66:	4b0c      	ldr	r3, [pc, #48]	; (800bd98 <prvAddNewTaskToReadyList+0xdc>)
 800bd68:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bd6c:	601a      	str	r2, [r3, #0]
 800bd6e:	f3bf 8f4f 	dsb	sy
 800bd72:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bd76:	bf00      	nop
 800bd78:	3708      	adds	r7, #8
 800bd7a:	46bd      	mov	sp, r7
 800bd7c:	bd80      	pop	{r7, pc}
 800bd7e:	bf00      	nop
 800bd80:	20001e98 	.word	0x20001e98
 800bd84:	200019c4 	.word	0x200019c4
 800bd88:	20001ea4 	.word	0x20001ea4
 800bd8c:	20001eb4 	.word	0x20001eb4
 800bd90:	20001ea0 	.word	0x20001ea0
 800bd94:	200019c8 	.word	0x200019c8
 800bd98:	e000ed04 	.word	0xe000ed04

0800bd9c <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 800bd9c:	b580      	push	{r7, lr}
 800bd9e:	b084      	sub	sp, #16
 800bda0:	af00      	add	r7, sp, #0
 800bda2:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800bda4:	f001 fcde 	bl	800d764 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	2b00      	cmp	r3, #0
 800bdac:	d102      	bne.n	800bdb4 <vTaskDelete+0x18>
 800bdae:	4b2c      	ldr	r3, [pc, #176]	; (800be60 <vTaskDelete+0xc4>)
 800bdb0:	681b      	ldr	r3, [r3, #0]
 800bdb2:	e000      	b.n	800bdb6 <vTaskDelete+0x1a>
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bdb8:	68fb      	ldr	r3, [r7, #12]
 800bdba:	3304      	adds	r3, #4
 800bdbc:	4618      	mov	r0, r3
 800bdbe:	f7ff f83d 	bl	800ae3c <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800bdc2:	68fb      	ldr	r3, [r7, #12]
 800bdc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bdc6:	2b00      	cmp	r3, #0
 800bdc8:	d004      	beq.n	800bdd4 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800bdca:	68fb      	ldr	r3, [r7, #12]
 800bdcc:	3318      	adds	r3, #24
 800bdce:	4618      	mov	r0, r3
 800bdd0:	f7ff f834 	bl	800ae3c <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 800bdd4:	4b23      	ldr	r3, [pc, #140]	; (800be64 <vTaskDelete+0xc8>)
 800bdd6:	681b      	ldr	r3, [r3, #0]
 800bdd8:	3301      	adds	r3, #1
 800bdda:	4a22      	ldr	r2, [pc, #136]	; (800be64 <vTaskDelete+0xc8>)
 800bddc:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 800bdde:	4b20      	ldr	r3, [pc, #128]	; (800be60 <vTaskDelete+0xc4>)
 800bde0:	681b      	ldr	r3, [r3, #0]
 800bde2:	68fa      	ldr	r2, [r7, #12]
 800bde4:	429a      	cmp	r2, r3
 800bde6:	d10b      	bne.n	800be00 <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800bde8:	68fb      	ldr	r3, [r7, #12]
 800bdea:	3304      	adds	r3, #4
 800bdec:	4619      	mov	r1, r3
 800bdee:	481e      	ldr	r0, [pc, #120]	; (800be68 <vTaskDelete+0xcc>)
 800bdf0:	f7fe ffc7 	bl	800ad82 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 800bdf4:	4b1d      	ldr	r3, [pc, #116]	; (800be6c <vTaskDelete+0xd0>)
 800bdf6:	681b      	ldr	r3, [r3, #0]
 800bdf8:	3301      	adds	r3, #1
 800bdfa:	4a1c      	ldr	r2, [pc, #112]	; (800be6c <vTaskDelete+0xd0>)
 800bdfc:	6013      	str	r3, [r2, #0]
 800bdfe:	e009      	b.n	800be14 <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 800be00:	4b1b      	ldr	r3, [pc, #108]	; (800be70 <vTaskDelete+0xd4>)
 800be02:	681b      	ldr	r3, [r3, #0]
 800be04:	3b01      	subs	r3, #1
 800be06:	4a1a      	ldr	r2, [pc, #104]	; (800be70 <vTaskDelete+0xd4>)
 800be08:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 800be0a:	68f8      	ldr	r0, [r7, #12]
 800be0c:	f000 fcf8 	bl	800c800 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 800be10:	f000 fd2a 	bl	800c868 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 800be14:	f001 fcd6 	bl	800d7c4 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 800be18:	4b16      	ldr	r3, [pc, #88]	; (800be74 <vTaskDelete+0xd8>)
 800be1a:	681b      	ldr	r3, [r3, #0]
 800be1c:	2b00      	cmp	r3, #0
 800be1e:	d01b      	beq.n	800be58 <vTaskDelete+0xbc>
		{
			if( pxTCB == pxCurrentTCB )
 800be20:	4b0f      	ldr	r3, [pc, #60]	; (800be60 <vTaskDelete+0xc4>)
 800be22:	681b      	ldr	r3, [r3, #0]
 800be24:	68fa      	ldr	r2, [r7, #12]
 800be26:	429a      	cmp	r2, r3
 800be28:	d116      	bne.n	800be58 <vTaskDelete+0xbc>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 800be2a:	4b13      	ldr	r3, [pc, #76]	; (800be78 <vTaskDelete+0xdc>)
 800be2c:	681b      	ldr	r3, [r3, #0]
 800be2e:	2b00      	cmp	r3, #0
 800be30:	d00a      	beq.n	800be48 <vTaskDelete+0xac>
	__asm volatile
 800be32:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be36:	f383 8811 	msr	BASEPRI, r3
 800be3a:	f3bf 8f6f 	isb	sy
 800be3e:	f3bf 8f4f 	dsb	sy
 800be42:	60bb      	str	r3, [r7, #8]
}
 800be44:	bf00      	nop
 800be46:	e7fe      	b.n	800be46 <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 800be48:	4b0c      	ldr	r3, [pc, #48]	; (800be7c <vTaskDelete+0xe0>)
 800be4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800be4e:	601a      	str	r2, [r3, #0]
 800be50:	f3bf 8f4f 	dsb	sy
 800be54:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800be58:	bf00      	nop
 800be5a:	3710      	adds	r7, #16
 800be5c:	46bd      	mov	sp, r7
 800be5e:	bd80      	pop	{r7, pc}
 800be60:	200019c4 	.word	0x200019c4
 800be64:	20001eb4 	.word	0x20001eb4
 800be68:	20001e6c 	.word	0x20001e6c
 800be6c:	20001e80 	.word	0x20001e80
 800be70:	20001e98 	.word	0x20001e98
 800be74:	20001ea4 	.word	0x20001ea4
 800be78:	20001ec0 	.word	0x20001ec0
 800be7c:	e000ed04 	.word	0xe000ed04

0800be80 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800be80:	b580      	push	{r7, lr}
 800be82:	b084      	sub	sp, #16
 800be84:	af00      	add	r7, sp, #0
 800be86:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800be88:	2300      	movs	r3, #0
 800be8a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	2b00      	cmp	r3, #0
 800be90:	d017      	beq.n	800bec2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800be92:	4b13      	ldr	r3, [pc, #76]	; (800bee0 <vTaskDelay+0x60>)
 800be94:	681b      	ldr	r3, [r3, #0]
 800be96:	2b00      	cmp	r3, #0
 800be98:	d00a      	beq.n	800beb0 <vTaskDelay+0x30>
	__asm volatile
 800be9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be9e:	f383 8811 	msr	BASEPRI, r3
 800bea2:	f3bf 8f6f 	isb	sy
 800bea6:	f3bf 8f4f 	dsb	sy
 800beaa:	60bb      	str	r3, [r7, #8]
}
 800beac:	bf00      	nop
 800beae:	e7fe      	b.n	800beae <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800beb0:	f000 f8f2 	bl	800c098 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800beb4:	2100      	movs	r1, #0
 800beb6:	6878      	ldr	r0, [r7, #4]
 800beb8:	f000 ff84 	bl	800cdc4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800bebc:	f000 f8fa 	bl	800c0b4 <xTaskResumeAll>
 800bec0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800bec2:	68fb      	ldr	r3, [r7, #12]
 800bec4:	2b00      	cmp	r3, #0
 800bec6:	d107      	bne.n	800bed8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800bec8:	4b06      	ldr	r3, [pc, #24]	; (800bee4 <vTaskDelay+0x64>)
 800beca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bece:	601a      	str	r2, [r3, #0]
 800bed0:	f3bf 8f4f 	dsb	sy
 800bed4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800bed8:	bf00      	nop
 800beda:	3710      	adds	r7, #16
 800bedc:	46bd      	mov	sp, r7
 800bede:	bd80      	pop	{r7, pc}
 800bee0:	20001ec0 	.word	0x20001ec0
 800bee4:	e000ed04 	.word	0xe000ed04

0800bee8 <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 800bee8:	b580      	push	{r7, lr}
 800beea:	b088      	sub	sp, #32
 800beec:	af00      	add	r7, sp, #0
 800beee:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
	const TCB_t * const pxTCB = xTask;
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	61bb      	str	r3, [r7, #24]

		configASSERT( pxTCB );
 800bef4:	69bb      	ldr	r3, [r7, #24]
 800bef6:	2b00      	cmp	r3, #0
 800bef8:	d10a      	bne.n	800bf10 <eTaskGetState+0x28>
	__asm volatile
 800befa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800befe:	f383 8811 	msr	BASEPRI, r3
 800bf02:	f3bf 8f6f 	isb	sy
 800bf06:	f3bf 8f4f 	dsb	sy
 800bf0a:	60bb      	str	r3, [r7, #8]
}
 800bf0c:	bf00      	nop
 800bf0e:	e7fe      	b.n	800bf0e <eTaskGetState+0x26>

		if( pxTCB == pxCurrentTCB )
 800bf10:	4b23      	ldr	r3, [pc, #140]	; (800bfa0 <eTaskGetState+0xb8>)
 800bf12:	681b      	ldr	r3, [r3, #0]
 800bf14:	69ba      	ldr	r2, [r7, #24]
 800bf16:	429a      	cmp	r2, r3
 800bf18:	d102      	bne.n	800bf20 <eTaskGetState+0x38>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 800bf1a:	2300      	movs	r3, #0
 800bf1c:	77fb      	strb	r3, [r7, #31]
 800bf1e:	e03a      	b.n	800bf96 <eTaskGetState+0xae>
		}
		else
		{
			taskENTER_CRITICAL();
 800bf20:	f001 fc20 	bl	800d764 <vPortEnterCritical>
			{
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 800bf24:	69bb      	ldr	r3, [r7, #24]
 800bf26:	695b      	ldr	r3, [r3, #20]
 800bf28:	617b      	str	r3, [r7, #20]
				pxDelayedList = pxDelayedTaskList;
 800bf2a:	4b1e      	ldr	r3, [pc, #120]	; (800bfa4 <eTaskGetState+0xbc>)
 800bf2c:	681b      	ldr	r3, [r3, #0]
 800bf2e:	613b      	str	r3, [r7, #16]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 800bf30:	4b1d      	ldr	r3, [pc, #116]	; (800bfa8 <eTaskGetState+0xc0>)
 800bf32:	681b      	ldr	r3, [r3, #0]
 800bf34:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 800bf36:	f001 fc45 	bl	800d7c4 <vPortExitCritical>

			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 800bf3a:	697a      	ldr	r2, [r7, #20]
 800bf3c:	693b      	ldr	r3, [r7, #16]
 800bf3e:	429a      	cmp	r2, r3
 800bf40:	d003      	beq.n	800bf4a <eTaskGetState+0x62>
 800bf42:	697a      	ldr	r2, [r7, #20]
 800bf44:	68fb      	ldr	r3, [r7, #12]
 800bf46:	429a      	cmp	r2, r3
 800bf48:	d102      	bne.n	800bf50 <eTaskGetState+0x68>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 800bf4a:	2302      	movs	r3, #2
 800bf4c:	77fb      	strb	r3, [r7, #31]
 800bf4e:	e022      	b.n	800bf96 <eTaskGetState+0xae>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 800bf50:	697b      	ldr	r3, [r7, #20]
 800bf52:	4a16      	ldr	r2, [pc, #88]	; (800bfac <eTaskGetState+0xc4>)
 800bf54:	4293      	cmp	r3, r2
 800bf56:	d112      	bne.n	800bf7e <eTaskGetState+0x96>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it blocked
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 800bf58:	69bb      	ldr	r3, [r7, #24]
 800bf5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf5c:	2b00      	cmp	r3, #0
 800bf5e:	d10b      	bne.n	800bf78 <eTaskGetState+0x90>
						{
							/* The task does not appear on the event list item of
							and of the RTOS objects, but could still be in the
							blocked state if it is waiting on its notification
							rather than waiting on an object. */
							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800bf60:	69bb      	ldr	r3, [r7, #24]
 800bf62:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 800bf66:	b2db      	uxtb	r3, r3
 800bf68:	2b01      	cmp	r3, #1
 800bf6a:	d102      	bne.n	800bf72 <eTaskGetState+0x8a>
							{
								eReturn = eBlocked;
 800bf6c:	2302      	movs	r3, #2
 800bf6e:	77fb      	strb	r3, [r7, #31]
 800bf70:	e011      	b.n	800bf96 <eTaskGetState+0xae>
							}
							else
							{
								eReturn = eSuspended;
 800bf72:	2303      	movs	r3, #3
 800bf74:	77fb      	strb	r3, [r7, #31]
 800bf76:	e00e      	b.n	800bf96 <eTaskGetState+0xae>
						}
						#endif
					}
					else
					{
						eReturn = eBlocked;
 800bf78:	2302      	movs	r3, #2
 800bf7a:	77fb      	strb	r3, [r7, #31]
 800bf7c:	e00b      	b.n	800bf96 <eTaskGetState+0xae>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 800bf7e:	697b      	ldr	r3, [r7, #20]
 800bf80:	4a0b      	ldr	r2, [pc, #44]	; (800bfb0 <eTaskGetState+0xc8>)
 800bf82:	4293      	cmp	r3, r2
 800bf84:	d002      	beq.n	800bf8c <eTaskGetState+0xa4>
 800bf86:	697b      	ldr	r3, [r7, #20]
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	d102      	bne.n	800bf92 <eTaskGetState+0xaa>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 800bf8c:	2304      	movs	r3, #4
 800bf8e:	77fb      	strb	r3, [r7, #31]
 800bf90:	e001      	b.n	800bf96 <eTaskGetState+0xae>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 800bf92:	2301      	movs	r3, #1
 800bf94:	77fb      	strb	r3, [r7, #31]
			}
		}

		return eReturn;
 800bf96:	7ffb      	ldrb	r3, [r7, #31]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 800bf98:	4618      	mov	r0, r3
 800bf9a:	3720      	adds	r7, #32
 800bf9c:	46bd      	mov	sp, r7
 800bf9e:	bd80      	pop	{r7, pc}
 800bfa0:	200019c4 	.word	0x200019c4
 800bfa4:	20001e50 	.word	0x20001e50
 800bfa8:	20001e54 	.word	0x20001e54
 800bfac:	20001e84 	.word	0x20001e84
 800bfb0:	20001e6c 	.word	0x20001e6c

0800bfb4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800bfb4:	b580      	push	{r7, lr}
 800bfb6:	b08a      	sub	sp, #40	; 0x28
 800bfb8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800bfba:	2300      	movs	r3, #0
 800bfbc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800bfbe:	2300      	movs	r3, #0
 800bfc0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800bfc2:	463a      	mov	r2, r7
 800bfc4:	1d39      	adds	r1, r7, #4
 800bfc6:	f107 0308 	add.w	r3, r7, #8
 800bfca:	4618      	mov	r0, r3
 800bfcc:	f7fe fe78 	bl	800acc0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800bfd0:	6839      	ldr	r1, [r7, #0]
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	68ba      	ldr	r2, [r7, #8]
 800bfd6:	9202      	str	r2, [sp, #8]
 800bfd8:	9301      	str	r3, [sp, #4]
 800bfda:	2300      	movs	r3, #0
 800bfdc:	9300      	str	r3, [sp, #0]
 800bfde:	2300      	movs	r3, #0
 800bfe0:	460a      	mov	r2, r1
 800bfe2:	4925      	ldr	r1, [pc, #148]	; (800c078 <vTaskStartScheduler+0xc4>)
 800bfe4:	4825      	ldr	r0, [pc, #148]	; (800c07c <vTaskStartScheduler+0xc8>)
 800bfe6:	f7ff fd1d 	bl	800ba24 <xTaskCreateStatic>
 800bfea:	4603      	mov	r3, r0
 800bfec:	4a24      	ldr	r2, [pc, #144]	; (800c080 <vTaskStartScheduler+0xcc>)
 800bfee:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800bff0:	4b23      	ldr	r3, [pc, #140]	; (800c080 <vTaskStartScheduler+0xcc>)
 800bff2:	681b      	ldr	r3, [r3, #0]
 800bff4:	2b00      	cmp	r3, #0
 800bff6:	d002      	beq.n	800bffe <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800bff8:	2301      	movs	r3, #1
 800bffa:	617b      	str	r3, [r7, #20]
 800bffc:	e001      	b.n	800c002 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800bffe:	2300      	movs	r3, #0
 800c000:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800c002:	697b      	ldr	r3, [r7, #20]
 800c004:	2b01      	cmp	r3, #1
 800c006:	d102      	bne.n	800c00e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800c008:	f000 ff30 	bl	800ce6c <xTimerCreateTimerTask>
 800c00c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800c00e:	697b      	ldr	r3, [r7, #20]
 800c010:	2b01      	cmp	r3, #1
 800c012:	d11d      	bne.n	800c050 <vTaskStartScheduler+0x9c>
	__asm volatile
 800c014:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c018:	f383 8811 	msr	BASEPRI, r3
 800c01c:	f3bf 8f6f 	isb	sy
 800c020:	f3bf 8f4f 	dsb	sy
 800c024:	613b      	str	r3, [r7, #16]
}
 800c026:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800c028:	4b16      	ldr	r3, [pc, #88]	; (800c084 <vTaskStartScheduler+0xd0>)
 800c02a:	681b      	ldr	r3, [r3, #0]
 800c02c:	3358      	adds	r3, #88	; 0x58
 800c02e:	4a16      	ldr	r2, [pc, #88]	; (800c088 <vTaskStartScheduler+0xd4>)
 800c030:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800c032:	4b16      	ldr	r3, [pc, #88]	; (800c08c <vTaskStartScheduler+0xd8>)
 800c034:	f04f 32ff 	mov.w	r2, #4294967295
 800c038:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800c03a:	4b15      	ldr	r3, [pc, #84]	; (800c090 <vTaskStartScheduler+0xdc>)
 800c03c:	2201      	movs	r2, #1
 800c03e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800c040:	4b14      	ldr	r3, [pc, #80]	; (800c094 <vTaskStartScheduler+0xe0>)
 800c042:	2200      	movs	r2, #0
 800c044:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 800c046:	f7f4 fac5 	bl	80005d4 <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800c04a:	f001 fae9 	bl	800d620 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800c04e:	e00e      	b.n	800c06e <vTaskStartScheduler+0xba>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800c050:	697b      	ldr	r3, [r7, #20]
 800c052:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c056:	d10a      	bne.n	800c06e <vTaskStartScheduler+0xba>
	__asm volatile
 800c058:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c05c:	f383 8811 	msr	BASEPRI, r3
 800c060:	f3bf 8f6f 	isb	sy
 800c064:	f3bf 8f4f 	dsb	sy
 800c068:	60fb      	str	r3, [r7, #12]
}
 800c06a:	bf00      	nop
 800c06c:	e7fe      	b.n	800c06c <vTaskStartScheduler+0xb8>
}
 800c06e:	bf00      	nop
 800c070:	3718      	adds	r7, #24
 800c072:	46bd      	mov	sp, r7
 800c074:	bd80      	pop	{r7, pc}
 800c076:	bf00      	nop
 800c078:	0800ffa4 	.word	0x0800ffa4
 800c07c:	0800c6f5 	.word	0x0800c6f5
 800c080:	20001ebc 	.word	0x20001ebc
 800c084:	200019c4 	.word	0x200019c4
 800c088:	20000048 	.word	0x20000048
 800c08c:	20001eb8 	.word	0x20001eb8
 800c090:	20001ea4 	.word	0x20001ea4
 800c094:	20001e9c 	.word	0x20001e9c

0800c098 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800c098:	b480      	push	{r7}
 800c09a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800c09c:	4b04      	ldr	r3, [pc, #16]	; (800c0b0 <vTaskSuspendAll+0x18>)
 800c09e:	681b      	ldr	r3, [r3, #0]
 800c0a0:	3301      	adds	r3, #1
 800c0a2:	4a03      	ldr	r2, [pc, #12]	; (800c0b0 <vTaskSuspendAll+0x18>)
 800c0a4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800c0a6:	bf00      	nop
 800c0a8:	46bd      	mov	sp, r7
 800c0aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0ae:	4770      	bx	lr
 800c0b0:	20001ec0 	.word	0x20001ec0

0800c0b4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800c0b4:	b580      	push	{r7, lr}
 800c0b6:	b084      	sub	sp, #16
 800c0b8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800c0ba:	2300      	movs	r3, #0
 800c0bc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800c0be:	2300      	movs	r3, #0
 800c0c0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800c0c2:	4b42      	ldr	r3, [pc, #264]	; (800c1cc <xTaskResumeAll+0x118>)
 800c0c4:	681b      	ldr	r3, [r3, #0]
 800c0c6:	2b00      	cmp	r3, #0
 800c0c8:	d10a      	bne.n	800c0e0 <xTaskResumeAll+0x2c>
	__asm volatile
 800c0ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0ce:	f383 8811 	msr	BASEPRI, r3
 800c0d2:	f3bf 8f6f 	isb	sy
 800c0d6:	f3bf 8f4f 	dsb	sy
 800c0da:	603b      	str	r3, [r7, #0]
}
 800c0dc:	bf00      	nop
 800c0de:	e7fe      	b.n	800c0de <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800c0e0:	f001 fb40 	bl	800d764 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800c0e4:	4b39      	ldr	r3, [pc, #228]	; (800c1cc <xTaskResumeAll+0x118>)
 800c0e6:	681b      	ldr	r3, [r3, #0]
 800c0e8:	3b01      	subs	r3, #1
 800c0ea:	4a38      	ldr	r2, [pc, #224]	; (800c1cc <xTaskResumeAll+0x118>)
 800c0ec:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c0ee:	4b37      	ldr	r3, [pc, #220]	; (800c1cc <xTaskResumeAll+0x118>)
 800c0f0:	681b      	ldr	r3, [r3, #0]
 800c0f2:	2b00      	cmp	r3, #0
 800c0f4:	d162      	bne.n	800c1bc <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800c0f6:	4b36      	ldr	r3, [pc, #216]	; (800c1d0 <xTaskResumeAll+0x11c>)
 800c0f8:	681b      	ldr	r3, [r3, #0]
 800c0fa:	2b00      	cmp	r3, #0
 800c0fc:	d05e      	beq.n	800c1bc <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c0fe:	e02f      	b.n	800c160 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c100:	4b34      	ldr	r3, [pc, #208]	; (800c1d4 <xTaskResumeAll+0x120>)
 800c102:	68db      	ldr	r3, [r3, #12]
 800c104:	68db      	ldr	r3, [r3, #12]
 800c106:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c108:	68fb      	ldr	r3, [r7, #12]
 800c10a:	3318      	adds	r3, #24
 800c10c:	4618      	mov	r0, r3
 800c10e:	f7fe fe95 	bl	800ae3c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c112:	68fb      	ldr	r3, [r7, #12]
 800c114:	3304      	adds	r3, #4
 800c116:	4618      	mov	r0, r3
 800c118:	f7fe fe90 	bl	800ae3c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c11c:	68fb      	ldr	r3, [r7, #12]
 800c11e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c120:	4b2d      	ldr	r3, [pc, #180]	; (800c1d8 <xTaskResumeAll+0x124>)
 800c122:	681b      	ldr	r3, [r3, #0]
 800c124:	429a      	cmp	r2, r3
 800c126:	d903      	bls.n	800c130 <xTaskResumeAll+0x7c>
 800c128:	68fb      	ldr	r3, [r7, #12]
 800c12a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c12c:	4a2a      	ldr	r2, [pc, #168]	; (800c1d8 <xTaskResumeAll+0x124>)
 800c12e:	6013      	str	r3, [r2, #0]
 800c130:	68fb      	ldr	r3, [r7, #12]
 800c132:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c134:	4613      	mov	r3, r2
 800c136:	009b      	lsls	r3, r3, #2
 800c138:	4413      	add	r3, r2
 800c13a:	009b      	lsls	r3, r3, #2
 800c13c:	4a27      	ldr	r2, [pc, #156]	; (800c1dc <xTaskResumeAll+0x128>)
 800c13e:	441a      	add	r2, r3
 800c140:	68fb      	ldr	r3, [r7, #12]
 800c142:	3304      	adds	r3, #4
 800c144:	4619      	mov	r1, r3
 800c146:	4610      	mov	r0, r2
 800c148:	f7fe fe1b 	bl	800ad82 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c14c:	68fb      	ldr	r3, [r7, #12]
 800c14e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c150:	4b23      	ldr	r3, [pc, #140]	; (800c1e0 <xTaskResumeAll+0x12c>)
 800c152:	681b      	ldr	r3, [r3, #0]
 800c154:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c156:	429a      	cmp	r2, r3
 800c158:	d302      	bcc.n	800c160 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800c15a:	4b22      	ldr	r3, [pc, #136]	; (800c1e4 <xTaskResumeAll+0x130>)
 800c15c:	2201      	movs	r2, #1
 800c15e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c160:	4b1c      	ldr	r3, [pc, #112]	; (800c1d4 <xTaskResumeAll+0x120>)
 800c162:	681b      	ldr	r3, [r3, #0]
 800c164:	2b00      	cmp	r3, #0
 800c166:	d1cb      	bne.n	800c100 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800c168:	68fb      	ldr	r3, [r7, #12]
 800c16a:	2b00      	cmp	r3, #0
 800c16c:	d001      	beq.n	800c172 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800c16e:	f000 fb7b 	bl	800c868 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800c172:	4b1d      	ldr	r3, [pc, #116]	; (800c1e8 <xTaskResumeAll+0x134>)
 800c174:	681b      	ldr	r3, [r3, #0]
 800c176:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	2b00      	cmp	r3, #0
 800c17c:	d010      	beq.n	800c1a0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800c17e:	f000 f847 	bl	800c210 <xTaskIncrementTick>
 800c182:	4603      	mov	r3, r0
 800c184:	2b00      	cmp	r3, #0
 800c186:	d002      	beq.n	800c18e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800c188:	4b16      	ldr	r3, [pc, #88]	; (800c1e4 <xTaskResumeAll+0x130>)
 800c18a:	2201      	movs	r2, #1
 800c18c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	3b01      	subs	r3, #1
 800c192:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	2b00      	cmp	r3, #0
 800c198:	d1f1      	bne.n	800c17e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800c19a:	4b13      	ldr	r3, [pc, #76]	; (800c1e8 <xTaskResumeAll+0x134>)
 800c19c:	2200      	movs	r2, #0
 800c19e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800c1a0:	4b10      	ldr	r3, [pc, #64]	; (800c1e4 <xTaskResumeAll+0x130>)
 800c1a2:	681b      	ldr	r3, [r3, #0]
 800c1a4:	2b00      	cmp	r3, #0
 800c1a6:	d009      	beq.n	800c1bc <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800c1a8:	2301      	movs	r3, #1
 800c1aa:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800c1ac:	4b0f      	ldr	r3, [pc, #60]	; (800c1ec <xTaskResumeAll+0x138>)
 800c1ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c1b2:	601a      	str	r2, [r3, #0]
 800c1b4:	f3bf 8f4f 	dsb	sy
 800c1b8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c1bc:	f001 fb02 	bl	800d7c4 <vPortExitCritical>

	return xAlreadyYielded;
 800c1c0:	68bb      	ldr	r3, [r7, #8]
}
 800c1c2:	4618      	mov	r0, r3
 800c1c4:	3710      	adds	r7, #16
 800c1c6:	46bd      	mov	sp, r7
 800c1c8:	bd80      	pop	{r7, pc}
 800c1ca:	bf00      	nop
 800c1cc:	20001ec0 	.word	0x20001ec0
 800c1d0:	20001e98 	.word	0x20001e98
 800c1d4:	20001e58 	.word	0x20001e58
 800c1d8:	20001ea0 	.word	0x20001ea0
 800c1dc:	200019c8 	.word	0x200019c8
 800c1e0:	200019c4 	.word	0x200019c4
 800c1e4:	20001eac 	.word	0x20001eac
 800c1e8:	20001ea8 	.word	0x20001ea8
 800c1ec:	e000ed04 	.word	0xe000ed04

0800c1f0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800c1f0:	b480      	push	{r7}
 800c1f2:	b083      	sub	sp, #12
 800c1f4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800c1f6:	4b05      	ldr	r3, [pc, #20]	; (800c20c <xTaskGetTickCount+0x1c>)
 800c1f8:	681b      	ldr	r3, [r3, #0]
 800c1fa:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800c1fc:	687b      	ldr	r3, [r7, #4]
}
 800c1fe:	4618      	mov	r0, r3
 800c200:	370c      	adds	r7, #12
 800c202:	46bd      	mov	sp, r7
 800c204:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c208:	4770      	bx	lr
 800c20a:	bf00      	nop
 800c20c:	20001e9c 	.word	0x20001e9c

0800c210 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800c210:	b580      	push	{r7, lr}
 800c212:	b086      	sub	sp, #24
 800c214:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800c216:	2300      	movs	r3, #0
 800c218:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c21a:	4b4f      	ldr	r3, [pc, #316]	; (800c358 <xTaskIncrementTick+0x148>)
 800c21c:	681b      	ldr	r3, [r3, #0]
 800c21e:	2b00      	cmp	r3, #0
 800c220:	f040 808f 	bne.w	800c342 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800c224:	4b4d      	ldr	r3, [pc, #308]	; (800c35c <xTaskIncrementTick+0x14c>)
 800c226:	681b      	ldr	r3, [r3, #0]
 800c228:	3301      	adds	r3, #1
 800c22a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800c22c:	4a4b      	ldr	r2, [pc, #300]	; (800c35c <xTaskIncrementTick+0x14c>)
 800c22e:	693b      	ldr	r3, [r7, #16]
 800c230:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800c232:	693b      	ldr	r3, [r7, #16]
 800c234:	2b00      	cmp	r3, #0
 800c236:	d120      	bne.n	800c27a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800c238:	4b49      	ldr	r3, [pc, #292]	; (800c360 <xTaskIncrementTick+0x150>)
 800c23a:	681b      	ldr	r3, [r3, #0]
 800c23c:	681b      	ldr	r3, [r3, #0]
 800c23e:	2b00      	cmp	r3, #0
 800c240:	d00a      	beq.n	800c258 <xTaskIncrementTick+0x48>
	__asm volatile
 800c242:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c246:	f383 8811 	msr	BASEPRI, r3
 800c24a:	f3bf 8f6f 	isb	sy
 800c24e:	f3bf 8f4f 	dsb	sy
 800c252:	603b      	str	r3, [r7, #0]
}
 800c254:	bf00      	nop
 800c256:	e7fe      	b.n	800c256 <xTaskIncrementTick+0x46>
 800c258:	4b41      	ldr	r3, [pc, #260]	; (800c360 <xTaskIncrementTick+0x150>)
 800c25a:	681b      	ldr	r3, [r3, #0]
 800c25c:	60fb      	str	r3, [r7, #12]
 800c25e:	4b41      	ldr	r3, [pc, #260]	; (800c364 <xTaskIncrementTick+0x154>)
 800c260:	681b      	ldr	r3, [r3, #0]
 800c262:	4a3f      	ldr	r2, [pc, #252]	; (800c360 <xTaskIncrementTick+0x150>)
 800c264:	6013      	str	r3, [r2, #0]
 800c266:	4a3f      	ldr	r2, [pc, #252]	; (800c364 <xTaskIncrementTick+0x154>)
 800c268:	68fb      	ldr	r3, [r7, #12]
 800c26a:	6013      	str	r3, [r2, #0]
 800c26c:	4b3e      	ldr	r3, [pc, #248]	; (800c368 <xTaskIncrementTick+0x158>)
 800c26e:	681b      	ldr	r3, [r3, #0]
 800c270:	3301      	adds	r3, #1
 800c272:	4a3d      	ldr	r2, [pc, #244]	; (800c368 <xTaskIncrementTick+0x158>)
 800c274:	6013      	str	r3, [r2, #0]
 800c276:	f000 faf7 	bl	800c868 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800c27a:	4b3c      	ldr	r3, [pc, #240]	; (800c36c <xTaskIncrementTick+0x15c>)
 800c27c:	681b      	ldr	r3, [r3, #0]
 800c27e:	693a      	ldr	r2, [r7, #16]
 800c280:	429a      	cmp	r2, r3
 800c282:	d349      	bcc.n	800c318 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c284:	4b36      	ldr	r3, [pc, #216]	; (800c360 <xTaskIncrementTick+0x150>)
 800c286:	681b      	ldr	r3, [r3, #0]
 800c288:	681b      	ldr	r3, [r3, #0]
 800c28a:	2b00      	cmp	r3, #0
 800c28c:	d104      	bne.n	800c298 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c28e:	4b37      	ldr	r3, [pc, #220]	; (800c36c <xTaskIncrementTick+0x15c>)
 800c290:	f04f 32ff 	mov.w	r2, #4294967295
 800c294:	601a      	str	r2, [r3, #0]
					break;
 800c296:	e03f      	b.n	800c318 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c298:	4b31      	ldr	r3, [pc, #196]	; (800c360 <xTaskIncrementTick+0x150>)
 800c29a:	681b      	ldr	r3, [r3, #0]
 800c29c:	68db      	ldr	r3, [r3, #12]
 800c29e:	68db      	ldr	r3, [r3, #12]
 800c2a0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800c2a2:	68bb      	ldr	r3, [r7, #8]
 800c2a4:	685b      	ldr	r3, [r3, #4]
 800c2a6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800c2a8:	693a      	ldr	r2, [r7, #16]
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	429a      	cmp	r2, r3
 800c2ae:	d203      	bcs.n	800c2b8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800c2b0:	4a2e      	ldr	r2, [pc, #184]	; (800c36c <xTaskIncrementTick+0x15c>)
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800c2b6:	e02f      	b.n	800c318 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c2b8:	68bb      	ldr	r3, [r7, #8]
 800c2ba:	3304      	adds	r3, #4
 800c2bc:	4618      	mov	r0, r3
 800c2be:	f7fe fdbd 	bl	800ae3c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c2c2:	68bb      	ldr	r3, [r7, #8]
 800c2c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c2c6:	2b00      	cmp	r3, #0
 800c2c8:	d004      	beq.n	800c2d4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c2ca:	68bb      	ldr	r3, [r7, #8]
 800c2cc:	3318      	adds	r3, #24
 800c2ce:	4618      	mov	r0, r3
 800c2d0:	f7fe fdb4 	bl	800ae3c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800c2d4:	68bb      	ldr	r3, [r7, #8]
 800c2d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c2d8:	4b25      	ldr	r3, [pc, #148]	; (800c370 <xTaskIncrementTick+0x160>)
 800c2da:	681b      	ldr	r3, [r3, #0]
 800c2dc:	429a      	cmp	r2, r3
 800c2de:	d903      	bls.n	800c2e8 <xTaskIncrementTick+0xd8>
 800c2e0:	68bb      	ldr	r3, [r7, #8]
 800c2e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c2e4:	4a22      	ldr	r2, [pc, #136]	; (800c370 <xTaskIncrementTick+0x160>)
 800c2e6:	6013      	str	r3, [r2, #0]
 800c2e8:	68bb      	ldr	r3, [r7, #8]
 800c2ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c2ec:	4613      	mov	r3, r2
 800c2ee:	009b      	lsls	r3, r3, #2
 800c2f0:	4413      	add	r3, r2
 800c2f2:	009b      	lsls	r3, r3, #2
 800c2f4:	4a1f      	ldr	r2, [pc, #124]	; (800c374 <xTaskIncrementTick+0x164>)
 800c2f6:	441a      	add	r2, r3
 800c2f8:	68bb      	ldr	r3, [r7, #8]
 800c2fa:	3304      	adds	r3, #4
 800c2fc:	4619      	mov	r1, r3
 800c2fe:	4610      	mov	r0, r2
 800c300:	f7fe fd3f 	bl	800ad82 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c304:	68bb      	ldr	r3, [r7, #8]
 800c306:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c308:	4b1b      	ldr	r3, [pc, #108]	; (800c378 <xTaskIncrementTick+0x168>)
 800c30a:	681b      	ldr	r3, [r3, #0]
 800c30c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c30e:	429a      	cmp	r2, r3
 800c310:	d3b8      	bcc.n	800c284 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800c312:	2301      	movs	r3, #1
 800c314:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c316:	e7b5      	b.n	800c284 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800c318:	4b17      	ldr	r3, [pc, #92]	; (800c378 <xTaskIncrementTick+0x168>)
 800c31a:	681b      	ldr	r3, [r3, #0]
 800c31c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c31e:	4915      	ldr	r1, [pc, #84]	; (800c374 <xTaskIncrementTick+0x164>)
 800c320:	4613      	mov	r3, r2
 800c322:	009b      	lsls	r3, r3, #2
 800c324:	4413      	add	r3, r2
 800c326:	009b      	lsls	r3, r3, #2
 800c328:	440b      	add	r3, r1
 800c32a:	681b      	ldr	r3, [r3, #0]
 800c32c:	2b01      	cmp	r3, #1
 800c32e:	d901      	bls.n	800c334 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800c330:	2301      	movs	r3, #1
 800c332:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800c334:	4b11      	ldr	r3, [pc, #68]	; (800c37c <xTaskIncrementTick+0x16c>)
 800c336:	681b      	ldr	r3, [r3, #0]
 800c338:	2b00      	cmp	r3, #0
 800c33a:	d007      	beq.n	800c34c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800c33c:	2301      	movs	r3, #1
 800c33e:	617b      	str	r3, [r7, #20]
 800c340:	e004      	b.n	800c34c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800c342:	4b0f      	ldr	r3, [pc, #60]	; (800c380 <xTaskIncrementTick+0x170>)
 800c344:	681b      	ldr	r3, [r3, #0]
 800c346:	3301      	adds	r3, #1
 800c348:	4a0d      	ldr	r2, [pc, #52]	; (800c380 <xTaskIncrementTick+0x170>)
 800c34a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800c34c:	697b      	ldr	r3, [r7, #20]
}
 800c34e:	4618      	mov	r0, r3
 800c350:	3718      	adds	r7, #24
 800c352:	46bd      	mov	sp, r7
 800c354:	bd80      	pop	{r7, pc}
 800c356:	bf00      	nop
 800c358:	20001ec0 	.word	0x20001ec0
 800c35c:	20001e9c 	.word	0x20001e9c
 800c360:	20001e50 	.word	0x20001e50
 800c364:	20001e54 	.word	0x20001e54
 800c368:	20001eb0 	.word	0x20001eb0
 800c36c:	20001eb8 	.word	0x20001eb8
 800c370:	20001ea0 	.word	0x20001ea0
 800c374:	200019c8 	.word	0x200019c8
 800c378:	200019c4 	.word	0x200019c4
 800c37c:	20001eac 	.word	0x20001eac
 800c380:	20001ea8 	.word	0x20001ea8

0800c384 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800c384:	b580      	push	{r7, lr}
 800c386:	b084      	sub	sp, #16
 800c388:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800c38a:	4b36      	ldr	r3, [pc, #216]	; (800c464 <vTaskSwitchContext+0xe0>)
 800c38c:	681b      	ldr	r3, [r3, #0]
 800c38e:	2b00      	cmp	r3, #0
 800c390:	d003      	beq.n	800c39a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800c392:	4b35      	ldr	r3, [pc, #212]	; (800c468 <vTaskSwitchContext+0xe4>)
 800c394:	2201      	movs	r2, #1
 800c396:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800c398:	e05f      	b.n	800c45a <vTaskSwitchContext+0xd6>
		xYieldPending = pdFALSE;
 800c39a:	4b33      	ldr	r3, [pc, #204]	; (800c468 <vTaskSwitchContext+0xe4>)
 800c39c:	2200      	movs	r2, #0
 800c39e:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800c3a0:	f7f4 f926 	bl	80005f0 <getRunTimeCounterValue>
 800c3a4:	4603      	mov	r3, r0
 800c3a6:	4a31      	ldr	r2, [pc, #196]	; (800c46c <vTaskSwitchContext+0xe8>)
 800c3a8:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 800c3aa:	4b30      	ldr	r3, [pc, #192]	; (800c46c <vTaskSwitchContext+0xe8>)
 800c3ac:	681a      	ldr	r2, [r3, #0]
 800c3ae:	4b30      	ldr	r3, [pc, #192]	; (800c470 <vTaskSwitchContext+0xec>)
 800c3b0:	681b      	ldr	r3, [r3, #0]
 800c3b2:	429a      	cmp	r2, r3
 800c3b4:	d909      	bls.n	800c3ca <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 800c3b6:	4b2f      	ldr	r3, [pc, #188]	; (800c474 <vTaskSwitchContext+0xf0>)
 800c3b8:	681b      	ldr	r3, [r3, #0]
 800c3ba:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800c3bc:	4a2b      	ldr	r2, [pc, #172]	; (800c46c <vTaskSwitchContext+0xe8>)
 800c3be:	6810      	ldr	r0, [r2, #0]
 800c3c0:	4a2b      	ldr	r2, [pc, #172]	; (800c470 <vTaskSwitchContext+0xec>)
 800c3c2:	6812      	ldr	r2, [r2, #0]
 800c3c4:	1a82      	subs	r2, r0, r2
 800c3c6:	440a      	add	r2, r1
 800c3c8:	655a      	str	r2, [r3, #84]	; 0x54
			ulTaskSwitchedInTime = ulTotalRunTime;
 800c3ca:	4b28      	ldr	r3, [pc, #160]	; (800c46c <vTaskSwitchContext+0xe8>)
 800c3cc:	681b      	ldr	r3, [r3, #0]
 800c3ce:	4a28      	ldr	r2, [pc, #160]	; (800c470 <vTaskSwitchContext+0xec>)
 800c3d0:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c3d2:	4b29      	ldr	r3, [pc, #164]	; (800c478 <vTaskSwitchContext+0xf4>)
 800c3d4:	681b      	ldr	r3, [r3, #0]
 800c3d6:	60fb      	str	r3, [r7, #12]
 800c3d8:	e010      	b.n	800c3fc <vTaskSwitchContext+0x78>
 800c3da:	68fb      	ldr	r3, [r7, #12]
 800c3dc:	2b00      	cmp	r3, #0
 800c3de:	d10a      	bne.n	800c3f6 <vTaskSwitchContext+0x72>
	__asm volatile
 800c3e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3e4:	f383 8811 	msr	BASEPRI, r3
 800c3e8:	f3bf 8f6f 	isb	sy
 800c3ec:	f3bf 8f4f 	dsb	sy
 800c3f0:	607b      	str	r3, [r7, #4]
}
 800c3f2:	bf00      	nop
 800c3f4:	e7fe      	b.n	800c3f4 <vTaskSwitchContext+0x70>
 800c3f6:	68fb      	ldr	r3, [r7, #12]
 800c3f8:	3b01      	subs	r3, #1
 800c3fa:	60fb      	str	r3, [r7, #12]
 800c3fc:	491f      	ldr	r1, [pc, #124]	; (800c47c <vTaskSwitchContext+0xf8>)
 800c3fe:	68fa      	ldr	r2, [r7, #12]
 800c400:	4613      	mov	r3, r2
 800c402:	009b      	lsls	r3, r3, #2
 800c404:	4413      	add	r3, r2
 800c406:	009b      	lsls	r3, r3, #2
 800c408:	440b      	add	r3, r1
 800c40a:	681b      	ldr	r3, [r3, #0]
 800c40c:	2b00      	cmp	r3, #0
 800c40e:	d0e4      	beq.n	800c3da <vTaskSwitchContext+0x56>
 800c410:	68fa      	ldr	r2, [r7, #12]
 800c412:	4613      	mov	r3, r2
 800c414:	009b      	lsls	r3, r3, #2
 800c416:	4413      	add	r3, r2
 800c418:	009b      	lsls	r3, r3, #2
 800c41a:	4a18      	ldr	r2, [pc, #96]	; (800c47c <vTaskSwitchContext+0xf8>)
 800c41c:	4413      	add	r3, r2
 800c41e:	60bb      	str	r3, [r7, #8]
 800c420:	68bb      	ldr	r3, [r7, #8]
 800c422:	685b      	ldr	r3, [r3, #4]
 800c424:	685a      	ldr	r2, [r3, #4]
 800c426:	68bb      	ldr	r3, [r7, #8]
 800c428:	605a      	str	r2, [r3, #4]
 800c42a:	68bb      	ldr	r3, [r7, #8]
 800c42c:	685a      	ldr	r2, [r3, #4]
 800c42e:	68bb      	ldr	r3, [r7, #8]
 800c430:	3308      	adds	r3, #8
 800c432:	429a      	cmp	r2, r3
 800c434:	d104      	bne.n	800c440 <vTaskSwitchContext+0xbc>
 800c436:	68bb      	ldr	r3, [r7, #8]
 800c438:	685b      	ldr	r3, [r3, #4]
 800c43a:	685a      	ldr	r2, [r3, #4]
 800c43c:	68bb      	ldr	r3, [r7, #8]
 800c43e:	605a      	str	r2, [r3, #4]
 800c440:	68bb      	ldr	r3, [r7, #8]
 800c442:	685b      	ldr	r3, [r3, #4]
 800c444:	68db      	ldr	r3, [r3, #12]
 800c446:	4a0b      	ldr	r2, [pc, #44]	; (800c474 <vTaskSwitchContext+0xf0>)
 800c448:	6013      	str	r3, [r2, #0]
 800c44a:	4a0b      	ldr	r2, [pc, #44]	; (800c478 <vTaskSwitchContext+0xf4>)
 800c44c:	68fb      	ldr	r3, [r7, #12]
 800c44e:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800c450:	4b08      	ldr	r3, [pc, #32]	; (800c474 <vTaskSwitchContext+0xf0>)
 800c452:	681b      	ldr	r3, [r3, #0]
 800c454:	3358      	adds	r3, #88	; 0x58
 800c456:	4a0a      	ldr	r2, [pc, #40]	; (800c480 <vTaskSwitchContext+0xfc>)
 800c458:	6013      	str	r3, [r2, #0]
}
 800c45a:	bf00      	nop
 800c45c:	3710      	adds	r7, #16
 800c45e:	46bd      	mov	sp, r7
 800c460:	bd80      	pop	{r7, pc}
 800c462:	bf00      	nop
 800c464:	20001ec0 	.word	0x20001ec0
 800c468:	20001eac 	.word	0x20001eac
 800c46c:	20001ec8 	.word	0x20001ec8
 800c470:	20001ec4 	.word	0x20001ec4
 800c474:	200019c4 	.word	0x200019c4
 800c478:	20001ea0 	.word	0x20001ea0
 800c47c:	200019c8 	.word	0x200019c8
 800c480:	20000048 	.word	0x20000048

0800c484 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800c484:	b580      	push	{r7, lr}
 800c486:	b084      	sub	sp, #16
 800c488:	af00      	add	r7, sp, #0
 800c48a:	6078      	str	r0, [r7, #4]
 800c48c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	2b00      	cmp	r3, #0
 800c492:	d10a      	bne.n	800c4aa <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800c494:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c498:	f383 8811 	msr	BASEPRI, r3
 800c49c:	f3bf 8f6f 	isb	sy
 800c4a0:	f3bf 8f4f 	dsb	sy
 800c4a4:	60fb      	str	r3, [r7, #12]
}
 800c4a6:	bf00      	nop
 800c4a8:	e7fe      	b.n	800c4a8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c4aa:	4b07      	ldr	r3, [pc, #28]	; (800c4c8 <vTaskPlaceOnEventList+0x44>)
 800c4ac:	681b      	ldr	r3, [r3, #0]
 800c4ae:	3318      	adds	r3, #24
 800c4b0:	4619      	mov	r1, r3
 800c4b2:	6878      	ldr	r0, [r7, #4]
 800c4b4:	f7fe fc89 	bl	800adca <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c4b8:	2101      	movs	r1, #1
 800c4ba:	6838      	ldr	r0, [r7, #0]
 800c4bc:	f000 fc82 	bl	800cdc4 <prvAddCurrentTaskToDelayedList>
}
 800c4c0:	bf00      	nop
 800c4c2:	3710      	adds	r7, #16
 800c4c4:	46bd      	mov	sp, r7
 800c4c6:	bd80      	pop	{r7, pc}
 800c4c8:	200019c4 	.word	0x200019c4

0800c4cc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c4cc:	b580      	push	{r7, lr}
 800c4ce:	b086      	sub	sp, #24
 800c4d0:	af00      	add	r7, sp, #0
 800c4d2:	60f8      	str	r0, [r7, #12]
 800c4d4:	60b9      	str	r1, [r7, #8]
 800c4d6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800c4d8:	68fb      	ldr	r3, [r7, #12]
 800c4da:	2b00      	cmp	r3, #0
 800c4dc:	d10a      	bne.n	800c4f4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800c4de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4e2:	f383 8811 	msr	BASEPRI, r3
 800c4e6:	f3bf 8f6f 	isb	sy
 800c4ea:	f3bf 8f4f 	dsb	sy
 800c4ee:	617b      	str	r3, [r7, #20]
}
 800c4f0:	bf00      	nop
 800c4f2:	e7fe      	b.n	800c4f2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c4f4:	4b0a      	ldr	r3, [pc, #40]	; (800c520 <vTaskPlaceOnEventListRestricted+0x54>)
 800c4f6:	681b      	ldr	r3, [r3, #0]
 800c4f8:	3318      	adds	r3, #24
 800c4fa:	4619      	mov	r1, r3
 800c4fc:	68f8      	ldr	r0, [r7, #12]
 800c4fe:	f7fe fc40 	bl	800ad82 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	2b00      	cmp	r3, #0
 800c506:	d002      	beq.n	800c50e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800c508:	f04f 33ff 	mov.w	r3, #4294967295
 800c50c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800c50e:	6879      	ldr	r1, [r7, #4]
 800c510:	68b8      	ldr	r0, [r7, #8]
 800c512:	f000 fc57 	bl	800cdc4 <prvAddCurrentTaskToDelayedList>
	}
 800c516:	bf00      	nop
 800c518:	3718      	adds	r7, #24
 800c51a:	46bd      	mov	sp, r7
 800c51c:	bd80      	pop	{r7, pc}
 800c51e:	bf00      	nop
 800c520:	200019c4 	.word	0x200019c4

0800c524 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800c524:	b580      	push	{r7, lr}
 800c526:	b086      	sub	sp, #24
 800c528:	af00      	add	r7, sp, #0
 800c52a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	68db      	ldr	r3, [r3, #12]
 800c530:	68db      	ldr	r3, [r3, #12]
 800c532:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800c534:	693b      	ldr	r3, [r7, #16]
 800c536:	2b00      	cmp	r3, #0
 800c538:	d10a      	bne.n	800c550 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800c53a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c53e:	f383 8811 	msr	BASEPRI, r3
 800c542:	f3bf 8f6f 	isb	sy
 800c546:	f3bf 8f4f 	dsb	sy
 800c54a:	60fb      	str	r3, [r7, #12]
}
 800c54c:	bf00      	nop
 800c54e:	e7fe      	b.n	800c54e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800c550:	693b      	ldr	r3, [r7, #16]
 800c552:	3318      	adds	r3, #24
 800c554:	4618      	mov	r0, r3
 800c556:	f7fe fc71 	bl	800ae3c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c55a:	4b1e      	ldr	r3, [pc, #120]	; (800c5d4 <xTaskRemoveFromEventList+0xb0>)
 800c55c:	681b      	ldr	r3, [r3, #0]
 800c55e:	2b00      	cmp	r3, #0
 800c560:	d11d      	bne.n	800c59e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800c562:	693b      	ldr	r3, [r7, #16]
 800c564:	3304      	adds	r3, #4
 800c566:	4618      	mov	r0, r3
 800c568:	f7fe fc68 	bl	800ae3c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800c56c:	693b      	ldr	r3, [r7, #16]
 800c56e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c570:	4b19      	ldr	r3, [pc, #100]	; (800c5d8 <xTaskRemoveFromEventList+0xb4>)
 800c572:	681b      	ldr	r3, [r3, #0]
 800c574:	429a      	cmp	r2, r3
 800c576:	d903      	bls.n	800c580 <xTaskRemoveFromEventList+0x5c>
 800c578:	693b      	ldr	r3, [r7, #16]
 800c57a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c57c:	4a16      	ldr	r2, [pc, #88]	; (800c5d8 <xTaskRemoveFromEventList+0xb4>)
 800c57e:	6013      	str	r3, [r2, #0]
 800c580:	693b      	ldr	r3, [r7, #16]
 800c582:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c584:	4613      	mov	r3, r2
 800c586:	009b      	lsls	r3, r3, #2
 800c588:	4413      	add	r3, r2
 800c58a:	009b      	lsls	r3, r3, #2
 800c58c:	4a13      	ldr	r2, [pc, #76]	; (800c5dc <xTaskRemoveFromEventList+0xb8>)
 800c58e:	441a      	add	r2, r3
 800c590:	693b      	ldr	r3, [r7, #16]
 800c592:	3304      	adds	r3, #4
 800c594:	4619      	mov	r1, r3
 800c596:	4610      	mov	r0, r2
 800c598:	f7fe fbf3 	bl	800ad82 <vListInsertEnd>
 800c59c:	e005      	b.n	800c5aa <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800c59e:	693b      	ldr	r3, [r7, #16]
 800c5a0:	3318      	adds	r3, #24
 800c5a2:	4619      	mov	r1, r3
 800c5a4:	480e      	ldr	r0, [pc, #56]	; (800c5e0 <xTaskRemoveFromEventList+0xbc>)
 800c5a6:	f7fe fbec 	bl	800ad82 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c5aa:	693b      	ldr	r3, [r7, #16]
 800c5ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c5ae:	4b0d      	ldr	r3, [pc, #52]	; (800c5e4 <xTaskRemoveFromEventList+0xc0>)
 800c5b0:	681b      	ldr	r3, [r3, #0]
 800c5b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c5b4:	429a      	cmp	r2, r3
 800c5b6:	d905      	bls.n	800c5c4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800c5b8:	2301      	movs	r3, #1
 800c5ba:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800c5bc:	4b0a      	ldr	r3, [pc, #40]	; (800c5e8 <xTaskRemoveFromEventList+0xc4>)
 800c5be:	2201      	movs	r2, #1
 800c5c0:	601a      	str	r2, [r3, #0]
 800c5c2:	e001      	b.n	800c5c8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800c5c4:	2300      	movs	r3, #0
 800c5c6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800c5c8:	697b      	ldr	r3, [r7, #20]
}
 800c5ca:	4618      	mov	r0, r3
 800c5cc:	3718      	adds	r7, #24
 800c5ce:	46bd      	mov	sp, r7
 800c5d0:	bd80      	pop	{r7, pc}
 800c5d2:	bf00      	nop
 800c5d4:	20001ec0 	.word	0x20001ec0
 800c5d8:	20001ea0 	.word	0x20001ea0
 800c5dc:	200019c8 	.word	0x200019c8
 800c5e0:	20001e58 	.word	0x20001e58
 800c5e4:	200019c4 	.word	0x200019c4
 800c5e8:	20001eac 	.word	0x20001eac

0800c5ec <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800c5ec:	b480      	push	{r7}
 800c5ee:	b083      	sub	sp, #12
 800c5f0:	af00      	add	r7, sp, #0
 800c5f2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800c5f4:	4b06      	ldr	r3, [pc, #24]	; (800c610 <vTaskInternalSetTimeOutState+0x24>)
 800c5f6:	681a      	ldr	r2, [r3, #0]
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800c5fc:	4b05      	ldr	r3, [pc, #20]	; (800c614 <vTaskInternalSetTimeOutState+0x28>)
 800c5fe:	681a      	ldr	r2, [r3, #0]
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	605a      	str	r2, [r3, #4]
}
 800c604:	bf00      	nop
 800c606:	370c      	adds	r7, #12
 800c608:	46bd      	mov	sp, r7
 800c60a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c60e:	4770      	bx	lr
 800c610:	20001eb0 	.word	0x20001eb0
 800c614:	20001e9c 	.word	0x20001e9c

0800c618 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800c618:	b580      	push	{r7, lr}
 800c61a:	b088      	sub	sp, #32
 800c61c:	af00      	add	r7, sp, #0
 800c61e:	6078      	str	r0, [r7, #4]
 800c620:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	2b00      	cmp	r3, #0
 800c626:	d10a      	bne.n	800c63e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800c628:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c62c:	f383 8811 	msr	BASEPRI, r3
 800c630:	f3bf 8f6f 	isb	sy
 800c634:	f3bf 8f4f 	dsb	sy
 800c638:	613b      	str	r3, [r7, #16]
}
 800c63a:	bf00      	nop
 800c63c:	e7fe      	b.n	800c63c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800c63e:	683b      	ldr	r3, [r7, #0]
 800c640:	2b00      	cmp	r3, #0
 800c642:	d10a      	bne.n	800c65a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800c644:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c648:	f383 8811 	msr	BASEPRI, r3
 800c64c:	f3bf 8f6f 	isb	sy
 800c650:	f3bf 8f4f 	dsb	sy
 800c654:	60fb      	str	r3, [r7, #12]
}
 800c656:	bf00      	nop
 800c658:	e7fe      	b.n	800c658 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800c65a:	f001 f883 	bl	800d764 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800c65e:	4b1d      	ldr	r3, [pc, #116]	; (800c6d4 <xTaskCheckForTimeOut+0xbc>)
 800c660:	681b      	ldr	r3, [r3, #0]
 800c662:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	685b      	ldr	r3, [r3, #4]
 800c668:	69ba      	ldr	r2, [r7, #24]
 800c66a:	1ad3      	subs	r3, r2, r3
 800c66c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800c66e:	683b      	ldr	r3, [r7, #0]
 800c670:	681b      	ldr	r3, [r3, #0]
 800c672:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c676:	d102      	bne.n	800c67e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800c678:	2300      	movs	r3, #0
 800c67a:	61fb      	str	r3, [r7, #28]
 800c67c:	e023      	b.n	800c6c6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	681a      	ldr	r2, [r3, #0]
 800c682:	4b15      	ldr	r3, [pc, #84]	; (800c6d8 <xTaskCheckForTimeOut+0xc0>)
 800c684:	681b      	ldr	r3, [r3, #0]
 800c686:	429a      	cmp	r2, r3
 800c688:	d007      	beq.n	800c69a <xTaskCheckForTimeOut+0x82>
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	685b      	ldr	r3, [r3, #4]
 800c68e:	69ba      	ldr	r2, [r7, #24]
 800c690:	429a      	cmp	r2, r3
 800c692:	d302      	bcc.n	800c69a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800c694:	2301      	movs	r3, #1
 800c696:	61fb      	str	r3, [r7, #28]
 800c698:	e015      	b.n	800c6c6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800c69a:	683b      	ldr	r3, [r7, #0]
 800c69c:	681b      	ldr	r3, [r3, #0]
 800c69e:	697a      	ldr	r2, [r7, #20]
 800c6a0:	429a      	cmp	r2, r3
 800c6a2:	d20b      	bcs.n	800c6bc <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800c6a4:	683b      	ldr	r3, [r7, #0]
 800c6a6:	681a      	ldr	r2, [r3, #0]
 800c6a8:	697b      	ldr	r3, [r7, #20]
 800c6aa:	1ad2      	subs	r2, r2, r3
 800c6ac:	683b      	ldr	r3, [r7, #0]
 800c6ae:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800c6b0:	6878      	ldr	r0, [r7, #4]
 800c6b2:	f7ff ff9b 	bl	800c5ec <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800c6b6:	2300      	movs	r3, #0
 800c6b8:	61fb      	str	r3, [r7, #28]
 800c6ba:	e004      	b.n	800c6c6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800c6bc:	683b      	ldr	r3, [r7, #0]
 800c6be:	2200      	movs	r2, #0
 800c6c0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800c6c2:	2301      	movs	r3, #1
 800c6c4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800c6c6:	f001 f87d 	bl	800d7c4 <vPortExitCritical>

	return xReturn;
 800c6ca:	69fb      	ldr	r3, [r7, #28]
}
 800c6cc:	4618      	mov	r0, r3
 800c6ce:	3720      	adds	r7, #32
 800c6d0:	46bd      	mov	sp, r7
 800c6d2:	bd80      	pop	{r7, pc}
 800c6d4:	20001e9c 	.word	0x20001e9c
 800c6d8:	20001eb0 	.word	0x20001eb0

0800c6dc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800c6dc:	b480      	push	{r7}
 800c6de:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800c6e0:	4b03      	ldr	r3, [pc, #12]	; (800c6f0 <vTaskMissedYield+0x14>)
 800c6e2:	2201      	movs	r2, #1
 800c6e4:	601a      	str	r2, [r3, #0]
}
 800c6e6:	bf00      	nop
 800c6e8:	46bd      	mov	sp, r7
 800c6ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6ee:	4770      	bx	lr
 800c6f0:	20001eac 	.word	0x20001eac

0800c6f4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800c6f4:	b580      	push	{r7, lr}
 800c6f6:	b082      	sub	sp, #8
 800c6f8:	af00      	add	r7, sp, #0
 800c6fa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800c6fc:	f000 f852 	bl	800c7a4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800c700:	4b06      	ldr	r3, [pc, #24]	; (800c71c <prvIdleTask+0x28>)
 800c702:	681b      	ldr	r3, [r3, #0]
 800c704:	2b01      	cmp	r3, #1
 800c706:	d9f9      	bls.n	800c6fc <prvIdleTask+0x8>
			{
				taskYIELD();
 800c708:	4b05      	ldr	r3, [pc, #20]	; (800c720 <prvIdleTask+0x2c>)
 800c70a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c70e:	601a      	str	r2, [r3, #0]
 800c710:	f3bf 8f4f 	dsb	sy
 800c714:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800c718:	e7f0      	b.n	800c6fc <prvIdleTask+0x8>
 800c71a:	bf00      	nop
 800c71c:	200019c8 	.word	0x200019c8
 800c720:	e000ed04 	.word	0xe000ed04

0800c724 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800c724:	b580      	push	{r7, lr}
 800c726:	b082      	sub	sp, #8
 800c728:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c72a:	2300      	movs	r3, #0
 800c72c:	607b      	str	r3, [r7, #4]
 800c72e:	e00c      	b.n	800c74a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800c730:	687a      	ldr	r2, [r7, #4]
 800c732:	4613      	mov	r3, r2
 800c734:	009b      	lsls	r3, r3, #2
 800c736:	4413      	add	r3, r2
 800c738:	009b      	lsls	r3, r3, #2
 800c73a:	4a12      	ldr	r2, [pc, #72]	; (800c784 <prvInitialiseTaskLists+0x60>)
 800c73c:	4413      	add	r3, r2
 800c73e:	4618      	mov	r0, r3
 800c740:	f7fe faf2 	bl	800ad28 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	3301      	adds	r3, #1
 800c748:	607b      	str	r3, [r7, #4]
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	2b37      	cmp	r3, #55	; 0x37
 800c74e:	d9ef      	bls.n	800c730 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800c750:	480d      	ldr	r0, [pc, #52]	; (800c788 <prvInitialiseTaskLists+0x64>)
 800c752:	f7fe fae9 	bl	800ad28 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800c756:	480d      	ldr	r0, [pc, #52]	; (800c78c <prvInitialiseTaskLists+0x68>)
 800c758:	f7fe fae6 	bl	800ad28 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800c75c:	480c      	ldr	r0, [pc, #48]	; (800c790 <prvInitialiseTaskLists+0x6c>)
 800c75e:	f7fe fae3 	bl	800ad28 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800c762:	480c      	ldr	r0, [pc, #48]	; (800c794 <prvInitialiseTaskLists+0x70>)
 800c764:	f7fe fae0 	bl	800ad28 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800c768:	480b      	ldr	r0, [pc, #44]	; (800c798 <prvInitialiseTaskLists+0x74>)
 800c76a:	f7fe fadd 	bl	800ad28 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800c76e:	4b0b      	ldr	r3, [pc, #44]	; (800c79c <prvInitialiseTaskLists+0x78>)
 800c770:	4a05      	ldr	r2, [pc, #20]	; (800c788 <prvInitialiseTaskLists+0x64>)
 800c772:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800c774:	4b0a      	ldr	r3, [pc, #40]	; (800c7a0 <prvInitialiseTaskLists+0x7c>)
 800c776:	4a05      	ldr	r2, [pc, #20]	; (800c78c <prvInitialiseTaskLists+0x68>)
 800c778:	601a      	str	r2, [r3, #0]
}
 800c77a:	bf00      	nop
 800c77c:	3708      	adds	r7, #8
 800c77e:	46bd      	mov	sp, r7
 800c780:	bd80      	pop	{r7, pc}
 800c782:	bf00      	nop
 800c784:	200019c8 	.word	0x200019c8
 800c788:	20001e28 	.word	0x20001e28
 800c78c:	20001e3c 	.word	0x20001e3c
 800c790:	20001e58 	.word	0x20001e58
 800c794:	20001e6c 	.word	0x20001e6c
 800c798:	20001e84 	.word	0x20001e84
 800c79c:	20001e50 	.word	0x20001e50
 800c7a0:	20001e54 	.word	0x20001e54

0800c7a4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800c7a4:	b580      	push	{r7, lr}
 800c7a6:	b082      	sub	sp, #8
 800c7a8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c7aa:	e019      	b.n	800c7e0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800c7ac:	f000 ffda 	bl	800d764 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c7b0:	4b10      	ldr	r3, [pc, #64]	; (800c7f4 <prvCheckTasksWaitingTermination+0x50>)
 800c7b2:	68db      	ldr	r3, [r3, #12]
 800c7b4:	68db      	ldr	r3, [r3, #12]
 800c7b6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	3304      	adds	r3, #4
 800c7bc:	4618      	mov	r0, r3
 800c7be:	f7fe fb3d 	bl	800ae3c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800c7c2:	4b0d      	ldr	r3, [pc, #52]	; (800c7f8 <prvCheckTasksWaitingTermination+0x54>)
 800c7c4:	681b      	ldr	r3, [r3, #0]
 800c7c6:	3b01      	subs	r3, #1
 800c7c8:	4a0b      	ldr	r2, [pc, #44]	; (800c7f8 <prvCheckTasksWaitingTermination+0x54>)
 800c7ca:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800c7cc:	4b0b      	ldr	r3, [pc, #44]	; (800c7fc <prvCheckTasksWaitingTermination+0x58>)
 800c7ce:	681b      	ldr	r3, [r3, #0]
 800c7d0:	3b01      	subs	r3, #1
 800c7d2:	4a0a      	ldr	r2, [pc, #40]	; (800c7fc <prvCheckTasksWaitingTermination+0x58>)
 800c7d4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800c7d6:	f000 fff5 	bl	800d7c4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800c7da:	6878      	ldr	r0, [r7, #4]
 800c7dc:	f000 f810 	bl	800c800 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c7e0:	4b06      	ldr	r3, [pc, #24]	; (800c7fc <prvCheckTasksWaitingTermination+0x58>)
 800c7e2:	681b      	ldr	r3, [r3, #0]
 800c7e4:	2b00      	cmp	r3, #0
 800c7e6:	d1e1      	bne.n	800c7ac <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800c7e8:	bf00      	nop
 800c7ea:	bf00      	nop
 800c7ec:	3708      	adds	r7, #8
 800c7ee:	46bd      	mov	sp, r7
 800c7f0:	bd80      	pop	{r7, pc}
 800c7f2:	bf00      	nop
 800c7f4:	20001e6c 	.word	0x20001e6c
 800c7f8:	20001e98 	.word	0x20001e98
 800c7fc:	20001e80 	.word	0x20001e80

0800c800 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800c800:	b580      	push	{r7, lr}
 800c802:	b084      	sub	sp, #16
 800c804:	af00      	add	r7, sp, #0
 800c806:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	3358      	adds	r3, #88	; 0x58
 800c80c:	4618      	mov	r0, r3
 800c80e:	f001 fd1f 	bl	800e250 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 800c818:	2b00      	cmp	r3, #0
 800c81a:	d108      	bne.n	800c82e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c820:	4618      	mov	r0, r3
 800c822:	f001 f98d 	bl	800db40 <vPortFree>
				vPortFree( pxTCB );
 800c826:	6878      	ldr	r0, [r7, #4]
 800c828:	f001 f98a 	bl	800db40 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800c82c:	e018      	b.n	800c860 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 800c834:	2b01      	cmp	r3, #1
 800c836:	d103      	bne.n	800c840 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800c838:	6878      	ldr	r0, [r7, #4]
 800c83a:	f001 f981 	bl	800db40 <vPortFree>
	}
 800c83e:	e00f      	b.n	800c860 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 800c846:	2b02      	cmp	r3, #2
 800c848:	d00a      	beq.n	800c860 <prvDeleteTCB+0x60>
	__asm volatile
 800c84a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c84e:	f383 8811 	msr	BASEPRI, r3
 800c852:	f3bf 8f6f 	isb	sy
 800c856:	f3bf 8f4f 	dsb	sy
 800c85a:	60fb      	str	r3, [r7, #12]
}
 800c85c:	bf00      	nop
 800c85e:	e7fe      	b.n	800c85e <prvDeleteTCB+0x5e>
	}
 800c860:	bf00      	nop
 800c862:	3710      	adds	r7, #16
 800c864:	46bd      	mov	sp, r7
 800c866:	bd80      	pop	{r7, pc}

0800c868 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800c868:	b480      	push	{r7}
 800c86a:	b083      	sub	sp, #12
 800c86c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c86e:	4b0c      	ldr	r3, [pc, #48]	; (800c8a0 <prvResetNextTaskUnblockTime+0x38>)
 800c870:	681b      	ldr	r3, [r3, #0]
 800c872:	681b      	ldr	r3, [r3, #0]
 800c874:	2b00      	cmp	r3, #0
 800c876:	d104      	bne.n	800c882 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800c878:	4b0a      	ldr	r3, [pc, #40]	; (800c8a4 <prvResetNextTaskUnblockTime+0x3c>)
 800c87a:	f04f 32ff 	mov.w	r2, #4294967295
 800c87e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800c880:	e008      	b.n	800c894 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c882:	4b07      	ldr	r3, [pc, #28]	; (800c8a0 <prvResetNextTaskUnblockTime+0x38>)
 800c884:	681b      	ldr	r3, [r3, #0]
 800c886:	68db      	ldr	r3, [r3, #12]
 800c888:	68db      	ldr	r3, [r3, #12]
 800c88a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	685b      	ldr	r3, [r3, #4]
 800c890:	4a04      	ldr	r2, [pc, #16]	; (800c8a4 <prvResetNextTaskUnblockTime+0x3c>)
 800c892:	6013      	str	r3, [r2, #0]
}
 800c894:	bf00      	nop
 800c896:	370c      	adds	r7, #12
 800c898:	46bd      	mov	sp, r7
 800c89a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c89e:	4770      	bx	lr
 800c8a0:	20001e50 	.word	0x20001e50
 800c8a4:	20001eb8 	.word	0x20001eb8

0800c8a8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800c8a8:	b480      	push	{r7}
 800c8aa:	b083      	sub	sp, #12
 800c8ac:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800c8ae:	4b0b      	ldr	r3, [pc, #44]	; (800c8dc <xTaskGetSchedulerState+0x34>)
 800c8b0:	681b      	ldr	r3, [r3, #0]
 800c8b2:	2b00      	cmp	r3, #0
 800c8b4:	d102      	bne.n	800c8bc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800c8b6:	2301      	movs	r3, #1
 800c8b8:	607b      	str	r3, [r7, #4]
 800c8ba:	e008      	b.n	800c8ce <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c8bc:	4b08      	ldr	r3, [pc, #32]	; (800c8e0 <xTaskGetSchedulerState+0x38>)
 800c8be:	681b      	ldr	r3, [r3, #0]
 800c8c0:	2b00      	cmp	r3, #0
 800c8c2:	d102      	bne.n	800c8ca <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800c8c4:	2302      	movs	r3, #2
 800c8c6:	607b      	str	r3, [r7, #4]
 800c8c8:	e001      	b.n	800c8ce <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800c8ca:	2300      	movs	r3, #0
 800c8cc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800c8ce:	687b      	ldr	r3, [r7, #4]
	}
 800c8d0:	4618      	mov	r0, r3
 800c8d2:	370c      	adds	r7, #12
 800c8d4:	46bd      	mov	sp, r7
 800c8d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8da:	4770      	bx	lr
 800c8dc:	20001ea4 	.word	0x20001ea4
 800c8e0:	20001ec0 	.word	0x20001ec0

0800c8e4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800c8e4:	b580      	push	{r7, lr}
 800c8e6:	b086      	sub	sp, #24
 800c8e8:	af00      	add	r7, sp, #0
 800c8ea:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800c8f0:	2300      	movs	r3, #0
 800c8f2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	2b00      	cmp	r3, #0
 800c8f8:	d056      	beq.n	800c9a8 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800c8fa:	4b2e      	ldr	r3, [pc, #184]	; (800c9b4 <xTaskPriorityDisinherit+0xd0>)
 800c8fc:	681b      	ldr	r3, [r3, #0]
 800c8fe:	693a      	ldr	r2, [r7, #16]
 800c900:	429a      	cmp	r2, r3
 800c902:	d00a      	beq.n	800c91a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800c904:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c908:	f383 8811 	msr	BASEPRI, r3
 800c90c:	f3bf 8f6f 	isb	sy
 800c910:	f3bf 8f4f 	dsb	sy
 800c914:	60fb      	str	r3, [r7, #12]
}
 800c916:	bf00      	nop
 800c918:	e7fe      	b.n	800c918 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800c91a:	693b      	ldr	r3, [r7, #16]
 800c91c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c91e:	2b00      	cmp	r3, #0
 800c920:	d10a      	bne.n	800c938 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800c922:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c926:	f383 8811 	msr	BASEPRI, r3
 800c92a:	f3bf 8f6f 	isb	sy
 800c92e:	f3bf 8f4f 	dsb	sy
 800c932:	60bb      	str	r3, [r7, #8]
}
 800c934:	bf00      	nop
 800c936:	e7fe      	b.n	800c936 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800c938:	693b      	ldr	r3, [r7, #16]
 800c93a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c93c:	1e5a      	subs	r2, r3, #1
 800c93e:	693b      	ldr	r3, [r7, #16]
 800c940:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c942:	693b      	ldr	r3, [r7, #16]
 800c944:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c946:	693b      	ldr	r3, [r7, #16]
 800c948:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c94a:	429a      	cmp	r2, r3
 800c94c:	d02c      	beq.n	800c9a8 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800c94e:	693b      	ldr	r3, [r7, #16]
 800c950:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c952:	2b00      	cmp	r3, #0
 800c954:	d128      	bne.n	800c9a8 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c956:	693b      	ldr	r3, [r7, #16]
 800c958:	3304      	adds	r3, #4
 800c95a:	4618      	mov	r0, r3
 800c95c:	f7fe fa6e 	bl	800ae3c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800c960:	693b      	ldr	r3, [r7, #16]
 800c962:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c964:	693b      	ldr	r3, [r7, #16]
 800c966:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c968:	693b      	ldr	r3, [r7, #16]
 800c96a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c96c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c970:	693b      	ldr	r3, [r7, #16]
 800c972:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800c974:	693b      	ldr	r3, [r7, #16]
 800c976:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c978:	4b0f      	ldr	r3, [pc, #60]	; (800c9b8 <xTaskPriorityDisinherit+0xd4>)
 800c97a:	681b      	ldr	r3, [r3, #0]
 800c97c:	429a      	cmp	r2, r3
 800c97e:	d903      	bls.n	800c988 <xTaskPriorityDisinherit+0xa4>
 800c980:	693b      	ldr	r3, [r7, #16]
 800c982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c984:	4a0c      	ldr	r2, [pc, #48]	; (800c9b8 <xTaskPriorityDisinherit+0xd4>)
 800c986:	6013      	str	r3, [r2, #0]
 800c988:	693b      	ldr	r3, [r7, #16]
 800c98a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c98c:	4613      	mov	r3, r2
 800c98e:	009b      	lsls	r3, r3, #2
 800c990:	4413      	add	r3, r2
 800c992:	009b      	lsls	r3, r3, #2
 800c994:	4a09      	ldr	r2, [pc, #36]	; (800c9bc <xTaskPriorityDisinherit+0xd8>)
 800c996:	441a      	add	r2, r3
 800c998:	693b      	ldr	r3, [r7, #16]
 800c99a:	3304      	adds	r3, #4
 800c99c:	4619      	mov	r1, r3
 800c99e:	4610      	mov	r0, r2
 800c9a0:	f7fe f9ef 	bl	800ad82 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800c9a4:	2301      	movs	r3, #1
 800c9a6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c9a8:	697b      	ldr	r3, [r7, #20]
	}
 800c9aa:	4618      	mov	r0, r3
 800c9ac:	3718      	adds	r7, #24
 800c9ae:	46bd      	mov	sp, r7
 800c9b0:	bd80      	pop	{r7, pc}
 800c9b2:	bf00      	nop
 800c9b4:	200019c4 	.word	0x200019c4
 800c9b8:	20001ea0 	.word	0x20001ea0
 800c9bc:	200019c8 	.word	0x200019c8

0800c9c0 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 800c9c0:	b580      	push	{r7, lr}
 800c9c2:	b086      	sub	sp, #24
 800c9c4:	af00      	add	r7, sp, #0
 800c9c6:	60f8      	str	r0, [r7, #12]
 800c9c8:	60b9      	str	r1, [r7, #8]
 800c9ca:	607a      	str	r2, [r7, #4]
 800c9cc:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 800c9ce:	f000 fec9 	bl	800d764 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800c9d2:	4b29      	ldr	r3, [pc, #164]	; (800ca78 <xTaskNotifyWait+0xb8>)
 800c9d4:	681b      	ldr	r3, [r3, #0]
 800c9d6:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 800c9da:	b2db      	uxtb	r3, r3
 800c9dc:	2b02      	cmp	r3, #2
 800c9de:	d01c      	beq.n	800ca1a <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 800c9e0:	4b25      	ldr	r3, [pc, #148]	; (800ca78 <xTaskNotifyWait+0xb8>)
 800c9e2:	681b      	ldr	r3, [r3, #0]
 800c9e4:	f8d3 10b8 	ldr.w	r1, [r3, #184]	; 0xb8
 800c9e8:	68fa      	ldr	r2, [r7, #12]
 800c9ea:	43d2      	mvns	r2, r2
 800c9ec:	400a      	ands	r2, r1
 800c9ee:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800c9f2:	4b21      	ldr	r3, [pc, #132]	; (800ca78 <xTaskNotifyWait+0xb8>)
 800c9f4:	681b      	ldr	r3, [r3, #0]
 800c9f6:	2201      	movs	r2, #1
 800c9f8:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc

				if( xTicksToWait > ( TickType_t ) 0 )
 800c9fc:	683b      	ldr	r3, [r7, #0]
 800c9fe:	2b00      	cmp	r3, #0
 800ca00:	d00b      	beq.n	800ca1a <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800ca02:	2101      	movs	r1, #1
 800ca04:	6838      	ldr	r0, [r7, #0]
 800ca06:	f000 f9dd 	bl	800cdc4 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800ca0a:	4b1c      	ldr	r3, [pc, #112]	; (800ca7c <xTaskNotifyWait+0xbc>)
 800ca0c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ca10:	601a      	str	r2, [r3, #0]
 800ca12:	f3bf 8f4f 	dsb	sy
 800ca16:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800ca1a:	f000 fed3 	bl	800d7c4 <vPortExitCritical>

		taskENTER_CRITICAL();
 800ca1e:	f000 fea1 	bl	800d764 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	2b00      	cmp	r3, #0
 800ca26:	d005      	beq.n	800ca34 <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 800ca28:	4b13      	ldr	r3, [pc, #76]	; (800ca78 <xTaskNotifyWait+0xb8>)
 800ca2a:	681b      	ldr	r3, [r3, #0]
 800ca2c:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800ca34:	4b10      	ldr	r3, [pc, #64]	; (800ca78 <xTaskNotifyWait+0xb8>)
 800ca36:	681b      	ldr	r3, [r3, #0]
 800ca38:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 800ca3c:	b2db      	uxtb	r3, r3
 800ca3e:	2b02      	cmp	r3, #2
 800ca40:	d002      	beq.n	800ca48 <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 800ca42:	2300      	movs	r3, #0
 800ca44:	617b      	str	r3, [r7, #20]
 800ca46:	e00a      	b.n	800ca5e <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 800ca48:	4b0b      	ldr	r3, [pc, #44]	; (800ca78 <xTaskNotifyWait+0xb8>)
 800ca4a:	681b      	ldr	r3, [r3, #0]
 800ca4c:	f8d3 10b8 	ldr.w	r1, [r3, #184]	; 0xb8
 800ca50:	68ba      	ldr	r2, [r7, #8]
 800ca52:	43d2      	mvns	r2, r2
 800ca54:	400a      	ands	r2, r1
 800ca56:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
				xReturn = pdTRUE;
 800ca5a:	2301      	movs	r3, #1
 800ca5c:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800ca5e:	4b06      	ldr	r3, [pc, #24]	; (800ca78 <xTaskNotifyWait+0xb8>)
 800ca60:	681b      	ldr	r3, [r3, #0]
 800ca62:	2200      	movs	r2, #0
 800ca64:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
		}
		taskEXIT_CRITICAL();
 800ca68:	f000 feac 	bl	800d7c4 <vPortExitCritical>

		return xReturn;
 800ca6c:	697b      	ldr	r3, [r7, #20]
	}
 800ca6e:	4618      	mov	r0, r3
 800ca70:	3718      	adds	r7, #24
 800ca72:	46bd      	mov	sp, r7
 800ca74:	bd80      	pop	{r7, pc}
 800ca76:	bf00      	nop
 800ca78:	200019c4 	.word	0x200019c4
 800ca7c:	e000ed04 	.word	0xe000ed04

0800ca80 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800ca80:	b580      	push	{r7, lr}
 800ca82:	b08a      	sub	sp, #40	; 0x28
 800ca84:	af00      	add	r7, sp, #0
 800ca86:	60f8      	str	r0, [r7, #12]
 800ca88:	60b9      	str	r1, [r7, #8]
 800ca8a:	603b      	str	r3, [r7, #0]
 800ca8c:	4613      	mov	r3, r2
 800ca8e:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 800ca90:	2301      	movs	r3, #1
 800ca92:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 800ca94:	68fb      	ldr	r3, [r7, #12]
 800ca96:	2b00      	cmp	r3, #0
 800ca98:	d10a      	bne.n	800cab0 <xTaskGenericNotify+0x30>
	__asm volatile
 800ca9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca9e:	f383 8811 	msr	BASEPRI, r3
 800caa2:	f3bf 8f6f 	isb	sy
 800caa6:	f3bf 8f4f 	dsb	sy
 800caaa:	61bb      	str	r3, [r7, #24]
}
 800caac:	bf00      	nop
 800caae:	e7fe      	b.n	800caae <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 800cab0:	68fb      	ldr	r3, [r7, #12]
 800cab2:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800cab4:	f000 fe56 	bl	800d764 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800cab8:	683b      	ldr	r3, [r7, #0]
 800caba:	2b00      	cmp	r3, #0
 800cabc:	d004      	beq.n	800cac8 <xTaskGenericNotify+0x48>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800cabe:	6a3b      	ldr	r3, [r7, #32]
 800cac0:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 800cac4:	683b      	ldr	r3, [r7, #0]
 800cac6:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800cac8:	6a3b      	ldr	r3, [r7, #32]
 800caca:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 800cace:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800cad0:	6a3b      	ldr	r3, [r7, #32]
 800cad2:	2202      	movs	r2, #2
 800cad4:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc

			switch( eAction )
 800cad8:	79fb      	ldrb	r3, [r7, #7]
 800cada:	2b04      	cmp	r3, #4
 800cadc:	d82d      	bhi.n	800cb3a <xTaskGenericNotify+0xba>
 800cade:	a201      	add	r2, pc, #4	; (adr r2, 800cae4 <xTaskGenericNotify+0x64>)
 800cae0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cae4:	0800cb5d 	.word	0x0800cb5d
 800cae8:	0800caf9 	.word	0x0800caf9
 800caec:	0800cb0b 	.word	0x0800cb0b
 800caf0:	0800cb1b 	.word	0x0800cb1b
 800caf4:	0800cb25 	.word	0x0800cb25
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800caf8:	6a3b      	ldr	r3, [r7, #32]
 800cafa:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 800cafe:	68bb      	ldr	r3, [r7, #8]
 800cb00:	431a      	orrs	r2, r3
 800cb02:	6a3b      	ldr	r3, [r7, #32]
 800cb04:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
					break;
 800cb08:	e02b      	b.n	800cb62 <xTaskGenericNotify+0xe2>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800cb0a:	6a3b      	ldr	r3, [r7, #32]
 800cb0c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800cb10:	1c5a      	adds	r2, r3, #1
 800cb12:	6a3b      	ldr	r3, [r7, #32]
 800cb14:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
					break;
 800cb18:	e023      	b.n	800cb62 <xTaskGenericNotify+0xe2>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800cb1a:	6a3b      	ldr	r3, [r7, #32]
 800cb1c:	68ba      	ldr	r2, [r7, #8]
 800cb1e:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
					break;
 800cb22:	e01e      	b.n	800cb62 <xTaskGenericNotify+0xe2>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800cb24:	7ffb      	ldrb	r3, [r7, #31]
 800cb26:	2b02      	cmp	r3, #2
 800cb28:	d004      	beq.n	800cb34 <xTaskGenericNotify+0xb4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800cb2a:	6a3b      	ldr	r3, [r7, #32]
 800cb2c:	68ba      	ldr	r2, [r7, #8]
 800cb2e:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800cb32:	e016      	b.n	800cb62 <xTaskGenericNotify+0xe2>
						xReturn = pdFAIL;
 800cb34:	2300      	movs	r3, #0
 800cb36:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 800cb38:	e013      	b.n	800cb62 <xTaskGenericNotify+0xe2>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800cb3a:	6a3b      	ldr	r3, [r7, #32]
 800cb3c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800cb40:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb44:	d00c      	beq.n	800cb60 <xTaskGenericNotify+0xe0>
	__asm volatile
 800cb46:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb4a:	f383 8811 	msr	BASEPRI, r3
 800cb4e:	f3bf 8f6f 	isb	sy
 800cb52:	f3bf 8f4f 	dsb	sy
 800cb56:	617b      	str	r3, [r7, #20]
}
 800cb58:	bf00      	nop
 800cb5a:	e7fe      	b.n	800cb5a <xTaskGenericNotify+0xda>
					break;
 800cb5c:	bf00      	nop
 800cb5e:	e000      	b.n	800cb62 <xTaskGenericNotify+0xe2>

					break;
 800cb60:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800cb62:	7ffb      	ldrb	r3, [r7, #31]
 800cb64:	2b01      	cmp	r3, #1
 800cb66:	d13a      	bne.n	800cbde <xTaskGenericNotify+0x15e>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cb68:	6a3b      	ldr	r3, [r7, #32]
 800cb6a:	3304      	adds	r3, #4
 800cb6c:	4618      	mov	r0, r3
 800cb6e:	f7fe f965 	bl	800ae3c <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800cb72:	6a3b      	ldr	r3, [r7, #32]
 800cb74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cb76:	4b1d      	ldr	r3, [pc, #116]	; (800cbec <xTaskGenericNotify+0x16c>)
 800cb78:	681b      	ldr	r3, [r3, #0]
 800cb7a:	429a      	cmp	r2, r3
 800cb7c:	d903      	bls.n	800cb86 <xTaskGenericNotify+0x106>
 800cb7e:	6a3b      	ldr	r3, [r7, #32]
 800cb80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb82:	4a1a      	ldr	r2, [pc, #104]	; (800cbec <xTaskGenericNotify+0x16c>)
 800cb84:	6013      	str	r3, [r2, #0]
 800cb86:	6a3b      	ldr	r3, [r7, #32]
 800cb88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cb8a:	4613      	mov	r3, r2
 800cb8c:	009b      	lsls	r3, r3, #2
 800cb8e:	4413      	add	r3, r2
 800cb90:	009b      	lsls	r3, r3, #2
 800cb92:	4a17      	ldr	r2, [pc, #92]	; (800cbf0 <xTaskGenericNotify+0x170>)
 800cb94:	441a      	add	r2, r3
 800cb96:	6a3b      	ldr	r3, [r7, #32]
 800cb98:	3304      	adds	r3, #4
 800cb9a:	4619      	mov	r1, r3
 800cb9c:	4610      	mov	r0, r2
 800cb9e:	f7fe f8f0 	bl	800ad82 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800cba2:	6a3b      	ldr	r3, [r7, #32]
 800cba4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cba6:	2b00      	cmp	r3, #0
 800cba8:	d00a      	beq.n	800cbc0 <xTaskGenericNotify+0x140>
	__asm volatile
 800cbaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbae:	f383 8811 	msr	BASEPRI, r3
 800cbb2:	f3bf 8f6f 	isb	sy
 800cbb6:	f3bf 8f4f 	dsb	sy
 800cbba:	613b      	str	r3, [r7, #16]
}
 800cbbc:	bf00      	nop
 800cbbe:	e7fe      	b.n	800cbbe <xTaskGenericNotify+0x13e>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800cbc0:	6a3b      	ldr	r3, [r7, #32]
 800cbc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cbc4:	4b0b      	ldr	r3, [pc, #44]	; (800cbf4 <xTaskGenericNotify+0x174>)
 800cbc6:	681b      	ldr	r3, [r3, #0]
 800cbc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cbca:	429a      	cmp	r2, r3
 800cbcc:	d907      	bls.n	800cbde <xTaskGenericNotify+0x15e>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 800cbce:	4b0a      	ldr	r3, [pc, #40]	; (800cbf8 <xTaskGenericNotify+0x178>)
 800cbd0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cbd4:	601a      	str	r2, [r3, #0]
 800cbd6:	f3bf 8f4f 	dsb	sy
 800cbda:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800cbde:	f000 fdf1 	bl	800d7c4 <vPortExitCritical>

		return xReturn;
 800cbe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800cbe4:	4618      	mov	r0, r3
 800cbe6:	3728      	adds	r7, #40	; 0x28
 800cbe8:	46bd      	mov	sp, r7
 800cbea:	bd80      	pop	{r7, pc}
 800cbec:	20001ea0 	.word	0x20001ea0
 800cbf0:	200019c8 	.word	0x200019c8
 800cbf4:	200019c4 	.word	0x200019c4
 800cbf8:	e000ed04 	.word	0xe000ed04

0800cbfc <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800cbfc:	b580      	push	{r7, lr}
 800cbfe:	b08e      	sub	sp, #56	; 0x38
 800cc00:	af00      	add	r7, sp, #0
 800cc02:	60f8      	str	r0, [r7, #12]
 800cc04:	60b9      	str	r1, [r7, #8]
 800cc06:	603b      	str	r3, [r7, #0]
 800cc08:	4613      	mov	r3, r2
 800cc0a:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 800cc0c:	2301      	movs	r3, #1
 800cc0e:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800cc10:	68fb      	ldr	r3, [r7, #12]
 800cc12:	2b00      	cmp	r3, #0
 800cc14:	d10a      	bne.n	800cc2c <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 800cc16:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc1a:	f383 8811 	msr	BASEPRI, r3
 800cc1e:	f3bf 8f6f 	isb	sy
 800cc22:	f3bf 8f4f 	dsb	sy
 800cc26:	627b      	str	r3, [r7, #36]	; 0x24
}
 800cc28:	bf00      	nop
 800cc2a:	e7fe      	b.n	800cc2a <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800cc2c:	f000 fe7c 	bl	800d928 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 800cc30:	68fb      	ldr	r3, [r7, #12]
 800cc32:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 800cc34:	f3ef 8211 	mrs	r2, BASEPRI
 800cc38:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc3c:	f383 8811 	msr	BASEPRI, r3
 800cc40:	f3bf 8f6f 	isb	sy
 800cc44:	f3bf 8f4f 	dsb	sy
 800cc48:	623a      	str	r2, [r7, #32]
 800cc4a:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 800cc4c:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800cc4e:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 800cc50:	683b      	ldr	r3, [r7, #0]
 800cc52:	2b00      	cmp	r3, #0
 800cc54:	d004      	beq.n	800cc60 <xTaskGenericNotifyFromISR+0x64>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800cc56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc58:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 800cc5c:	683b      	ldr	r3, [r7, #0]
 800cc5e:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800cc60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc62:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 800cc66:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800cc6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc6c:	2202      	movs	r2, #2
 800cc6e:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc

			switch( eAction )
 800cc72:	79fb      	ldrb	r3, [r7, #7]
 800cc74:	2b04      	cmp	r3, #4
 800cc76:	d82f      	bhi.n	800ccd8 <xTaskGenericNotifyFromISR+0xdc>
 800cc78:	a201      	add	r2, pc, #4	; (adr r2, 800cc80 <xTaskGenericNotifyFromISR+0x84>)
 800cc7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc7e:	bf00      	nop
 800cc80:	0800ccfb 	.word	0x0800ccfb
 800cc84:	0800cc95 	.word	0x0800cc95
 800cc88:	0800cca7 	.word	0x0800cca7
 800cc8c:	0800ccb7 	.word	0x0800ccb7
 800cc90:	0800ccc1 	.word	0x0800ccc1
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800cc94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc96:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 800cc9a:	68bb      	ldr	r3, [r7, #8]
 800cc9c:	431a      	orrs	r2, r3
 800cc9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cca0:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
					break;
 800cca4:	e02c      	b.n	800cd00 <xTaskGenericNotifyFromISR+0x104>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800cca6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cca8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800ccac:	1c5a      	adds	r2, r3, #1
 800ccae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccb0:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
					break;
 800ccb4:	e024      	b.n	800cd00 <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800ccb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccb8:	68ba      	ldr	r2, [r7, #8]
 800ccba:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
					break;
 800ccbe:	e01f      	b.n	800cd00 <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800ccc0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ccc4:	2b02      	cmp	r3, #2
 800ccc6:	d004      	beq.n	800ccd2 <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800ccc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccca:	68ba      	ldr	r2, [r7, #8]
 800cccc:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800ccd0:	e016      	b.n	800cd00 <xTaskGenericNotifyFromISR+0x104>
						xReturn = pdFAIL;
 800ccd2:	2300      	movs	r3, #0
 800ccd4:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 800ccd6:	e013      	b.n	800cd00 <xTaskGenericNotifyFromISR+0x104>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800ccd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccda:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800ccde:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cce2:	d00c      	beq.n	800ccfe <xTaskGenericNotifyFromISR+0x102>
	__asm volatile
 800cce4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cce8:	f383 8811 	msr	BASEPRI, r3
 800ccec:	f3bf 8f6f 	isb	sy
 800ccf0:	f3bf 8f4f 	dsb	sy
 800ccf4:	61bb      	str	r3, [r7, #24]
}
 800ccf6:	bf00      	nop
 800ccf8:	e7fe      	b.n	800ccf8 <xTaskGenericNotifyFromISR+0xfc>
					break;
 800ccfa:	bf00      	nop
 800ccfc:	e000      	b.n	800cd00 <xTaskGenericNotifyFromISR+0x104>
					break;
 800ccfe:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800cd00:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800cd04:	2b01      	cmp	r3, #1
 800cd06:	d146      	bne.n	800cd96 <xTaskGenericNotifyFromISR+0x19a>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800cd08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cd0c:	2b00      	cmp	r3, #0
 800cd0e:	d00a      	beq.n	800cd26 <xTaskGenericNotifyFromISR+0x12a>
	__asm volatile
 800cd10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd14:	f383 8811 	msr	BASEPRI, r3
 800cd18:	f3bf 8f6f 	isb	sy
 800cd1c:	f3bf 8f4f 	dsb	sy
 800cd20:	617b      	str	r3, [r7, #20]
}
 800cd22:	bf00      	nop
 800cd24:	e7fe      	b.n	800cd24 <xTaskGenericNotifyFromISR+0x128>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cd26:	4b21      	ldr	r3, [pc, #132]	; (800cdac <xTaskGenericNotifyFromISR+0x1b0>)
 800cd28:	681b      	ldr	r3, [r3, #0]
 800cd2a:	2b00      	cmp	r3, #0
 800cd2c:	d11d      	bne.n	800cd6a <xTaskGenericNotifyFromISR+0x16e>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cd2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd30:	3304      	adds	r3, #4
 800cd32:	4618      	mov	r0, r3
 800cd34:	f7fe f882 	bl	800ae3c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800cd38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cd3c:	4b1c      	ldr	r3, [pc, #112]	; (800cdb0 <xTaskGenericNotifyFromISR+0x1b4>)
 800cd3e:	681b      	ldr	r3, [r3, #0]
 800cd40:	429a      	cmp	r2, r3
 800cd42:	d903      	bls.n	800cd4c <xTaskGenericNotifyFromISR+0x150>
 800cd44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd48:	4a19      	ldr	r2, [pc, #100]	; (800cdb0 <xTaskGenericNotifyFromISR+0x1b4>)
 800cd4a:	6013      	str	r3, [r2, #0]
 800cd4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cd50:	4613      	mov	r3, r2
 800cd52:	009b      	lsls	r3, r3, #2
 800cd54:	4413      	add	r3, r2
 800cd56:	009b      	lsls	r3, r3, #2
 800cd58:	4a16      	ldr	r2, [pc, #88]	; (800cdb4 <xTaskGenericNotifyFromISR+0x1b8>)
 800cd5a:	441a      	add	r2, r3
 800cd5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd5e:	3304      	adds	r3, #4
 800cd60:	4619      	mov	r1, r3
 800cd62:	4610      	mov	r0, r2
 800cd64:	f7fe f80d 	bl	800ad82 <vListInsertEnd>
 800cd68:	e005      	b.n	800cd76 <xTaskGenericNotifyFromISR+0x17a>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800cd6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd6c:	3318      	adds	r3, #24
 800cd6e:	4619      	mov	r1, r3
 800cd70:	4811      	ldr	r0, [pc, #68]	; (800cdb8 <xTaskGenericNotifyFromISR+0x1bc>)
 800cd72:	f7fe f806 	bl	800ad82 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800cd76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cd7a:	4b10      	ldr	r3, [pc, #64]	; (800cdbc <xTaskGenericNotifyFromISR+0x1c0>)
 800cd7c:	681b      	ldr	r3, [r3, #0]
 800cd7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd80:	429a      	cmp	r2, r3
 800cd82:	d908      	bls.n	800cd96 <xTaskGenericNotifyFromISR+0x19a>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800cd84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cd86:	2b00      	cmp	r3, #0
 800cd88:	d002      	beq.n	800cd90 <xTaskGenericNotifyFromISR+0x194>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800cd8a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cd8c:	2201      	movs	r2, #1
 800cd8e:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 800cd90:	4b0b      	ldr	r3, [pc, #44]	; (800cdc0 <xTaskGenericNotifyFromISR+0x1c4>)
 800cd92:	2201      	movs	r2, #1
 800cd94:	601a      	str	r2, [r3, #0]
 800cd96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd98:	613b      	str	r3, [r7, #16]
	__asm volatile
 800cd9a:	693b      	ldr	r3, [r7, #16]
 800cd9c:	f383 8811 	msr	BASEPRI, r3
}
 800cda0:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 800cda2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 800cda4:	4618      	mov	r0, r3
 800cda6:	3738      	adds	r7, #56	; 0x38
 800cda8:	46bd      	mov	sp, r7
 800cdaa:	bd80      	pop	{r7, pc}
 800cdac:	20001ec0 	.word	0x20001ec0
 800cdb0:	20001ea0 	.word	0x20001ea0
 800cdb4:	200019c8 	.word	0x200019c8
 800cdb8:	20001e58 	.word	0x20001e58
 800cdbc:	200019c4 	.word	0x200019c4
 800cdc0:	20001eac 	.word	0x20001eac

0800cdc4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800cdc4:	b580      	push	{r7, lr}
 800cdc6:	b084      	sub	sp, #16
 800cdc8:	af00      	add	r7, sp, #0
 800cdca:	6078      	str	r0, [r7, #4]
 800cdcc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800cdce:	4b21      	ldr	r3, [pc, #132]	; (800ce54 <prvAddCurrentTaskToDelayedList+0x90>)
 800cdd0:	681b      	ldr	r3, [r3, #0]
 800cdd2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cdd4:	4b20      	ldr	r3, [pc, #128]	; (800ce58 <prvAddCurrentTaskToDelayedList+0x94>)
 800cdd6:	681b      	ldr	r3, [r3, #0]
 800cdd8:	3304      	adds	r3, #4
 800cdda:	4618      	mov	r0, r3
 800cddc:	f7fe f82e 	bl	800ae3c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cde6:	d10a      	bne.n	800cdfe <prvAddCurrentTaskToDelayedList+0x3a>
 800cde8:	683b      	ldr	r3, [r7, #0]
 800cdea:	2b00      	cmp	r3, #0
 800cdec:	d007      	beq.n	800cdfe <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800cdee:	4b1a      	ldr	r3, [pc, #104]	; (800ce58 <prvAddCurrentTaskToDelayedList+0x94>)
 800cdf0:	681b      	ldr	r3, [r3, #0]
 800cdf2:	3304      	adds	r3, #4
 800cdf4:	4619      	mov	r1, r3
 800cdf6:	4819      	ldr	r0, [pc, #100]	; (800ce5c <prvAddCurrentTaskToDelayedList+0x98>)
 800cdf8:	f7fd ffc3 	bl	800ad82 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800cdfc:	e026      	b.n	800ce4c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800cdfe:	68fa      	ldr	r2, [r7, #12]
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	4413      	add	r3, r2
 800ce04:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800ce06:	4b14      	ldr	r3, [pc, #80]	; (800ce58 <prvAddCurrentTaskToDelayedList+0x94>)
 800ce08:	681b      	ldr	r3, [r3, #0]
 800ce0a:	68ba      	ldr	r2, [r7, #8]
 800ce0c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800ce0e:	68ba      	ldr	r2, [r7, #8]
 800ce10:	68fb      	ldr	r3, [r7, #12]
 800ce12:	429a      	cmp	r2, r3
 800ce14:	d209      	bcs.n	800ce2a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ce16:	4b12      	ldr	r3, [pc, #72]	; (800ce60 <prvAddCurrentTaskToDelayedList+0x9c>)
 800ce18:	681a      	ldr	r2, [r3, #0]
 800ce1a:	4b0f      	ldr	r3, [pc, #60]	; (800ce58 <prvAddCurrentTaskToDelayedList+0x94>)
 800ce1c:	681b      	ldr	r3, [r3, #0]
 800ce1e:	3304      	adds	r3, #4
 800ce20:	4619      	mov	r1, r3
 800ce22:	4610      	mov	r0, r2
 800ce24:	f7fd ffd1 	bl	800adca <vListInsert>
}
 800ce28:	e010      	b.n	800ce4c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ce2a:	4b0e      	ldr	r3, [pc, #56]	; (800ce64 <prvAddCurrentTaskToDelayedList+0xa0>)
 800ce2c:	681a      	ldr	r2, [r3, #0]
 800ce2e:	4b0a      	ldr	r3, [pc, #40]	; (800ce58 <prvAddCurrentTaskToDelayedList+0x94>)
 800ce30:	681b      	ldr	r3, [r3, #0]
 800ce32:	3304      	adds	r3, #4
 800ce34:	4619      	mov	r1, r3
 800ce36:	4610      	mov	r0, r2
 800ce38:	f7fd ffc7 	bl	800adca <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800ce3c:	4b0a      	ldr	r3, [pc, #40]	; (800ce68 <prvAddCurrentTaskToDelayedList+0xa4>)
 800ce3e:	681b      	ldr	r3, [r3, #0]
 800ce40:	68ba      	ldr	r2, [r7, #8]
 800ce42:	429a      	cmp	r2, r3
 800ce44:	d202      	bcs.n	800ce4c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800ce46:	4a08      	ldr	r2, [pc, #32]	; (800ce68 <prvAddCurrentTaskToDelayedList+0xa4>)
 800ce48:	68bb      	ldr	r3, [r7, #8]
 800ce4a:	6013      	str	r3, [r2, #0]
}
 800ce4c:	bf00      	nop
 800ce4e:	3710      	adds	r7, #16
 800ce50:	46bd      	mov	sp, r7
 800ce52:	bd80      	pop	{r7, pc}
 800ce54:	20001e9c 	.word	0x20001e9c
 800ce58:	200019c4 	.word	0x200019c4
 800ce5c:	20001e84 	.word	0x20001e84
 800ce60:	20001e54 	.word	0x20001e54
 800ce64:	20001e50 	.word	0x20001e50
 800ce68:	20001eb8 	.word	0x20001eb8

0800ce6c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800ce6c:	b580      	push	{r7, lr}
 800ce6e:	b08a      	sub	sp, #40	; 0x28
 800ce70:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800ce72:	2300      	movs	r3, #0
 800ce74:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800ce76:	f000 fb07 	bl	800d488 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800ce7a:	4b1c      	ldr	r3, [pc, #112]	; (800ceec <xTimerCreateTimerTask+0x80>)
 800ce7c:	681b      	ldr	r3, [r3, #0]
 800ce7e:	2b00      	cmp	r3, #0
 800ce80:	d021      	beq.n	800cec6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800ce82:	2300      	movs	r3, #0
 800ce84:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800ce86:	2300      	movs	r3, #0
 800ce88:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800ce8a:	1d3a      	adds	r2, r7, #4
 800ce8c:	f107 0108 	add.w	r1, r7, #8
 800ce90:	f107 030c 	add.w	r3, r7, #12
 800ce94:	4618      	mov	r0, r3
 800ce96:	f7fd ff2d 	bl	800acf4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800ce9a:	6879      	ldr	r1, [r7, #4]
 800ce9c:	68bb      	ldr	r3, [r7, #8]
 800ce9e:	68fa      	ldr	r2, [r7, #12]
 800cea0:	9202      	str	r2, [sp, #8]
 800cea2:	9301      	str	r3, [sp, #4]
 800cea4:	2302      	movs	r3, #2
 800cea6:	9300      	str	r3, [sp, #0]
 800cea8:	2300      	movs	r3, #0
 800ceaa:	460a      	mov	r2, r1
 800ceac:	4910      	ldr	r1, [pc, #64]	; (800cef0 <xTimerCreateTimerTask+0x84>)
 800ceae:	4811      	ldr	r0, [pc, #68]	; (800cef4 <xTimerCreateTimerTask+0x88>)
 800ceb0:	f7fe fdb8 	bl	800ba24 <xTaskCreateStatic>
 800ceb4:	4603      	mov	r3, r0
 800ceb6:	4a10      	ldr	r2, [pc, #64]	; (800cef8 <xTimerCreateTimerTask+0x8c>)
 800ceb8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800ceba:	4b0f      	ldr	r3, [pc, #60]	; (800cef8 <xTimerCreateTimerTask+0x8c>)
 800cebc:	681b      	ldr	r3, [r3, #0]
 800cebe:	2b00      	cmp	r3, #0
 800cec0:	d001      	beq.n	800cec6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800cec2:	2301      	movs	r3, #1
 800cec4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800cec6:	697b      	ldr	r3, [r7, #20]
 800cec8:	2b00      	cmp	r3, #0
 800ceca:	d10a      	bne.n	800cee2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800cecc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ced0:	f383 8811 	msr	BASEPRI, r3
 800ced4:	f3bf 8f6f 	isb	sy
 800ced8:	f3bf 8f4f 	dsb	sy
 800cedc:	613b      	str	r3, [r7, #16]
}
 800cede:	bf00      	nop
 800cee0:	e7fe      	b.n	800cee0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800cee2:	697b      	ldr	r3, [r7, #20]
}
 800cee4:	4618      	mov	r0, r3
 800cee6:	3718      	adds	r7, #24
 800cee8:	46bd      	mov	sp, r7
 800ceea:	bd80      	pop	{r7, pc}
 800ceec:	20001efc 	.word	0x20001efc
 800cef0:	0800ffd4 	.word	0x0800ffd4
 800cef4:	0800d031 	.word	0x0800d031
 800cef8:	20001f00 	.word	0x20001f00

0800cefc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800cefc:	b580      	push	{r7, lr}
 800cefe:	b08a      	sub	sp, #40	; 0x28
 800cf00:	af00      	add	r7, sp, #0
 800cf02:	60f8      	str	r0, [r7, #12]
 800cf04:	60b9      	str	r1, [r7, #8]
 800cf06:	607a      	str	r2, [r7, #4]
 800cf08:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800cf0a:	2300      	movs	r3, #0
 800cf0c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800cf0e:	68fb      	ldr	r3, [r7, #12]
 800cf10:	2b00      	cmp	r3, #0
 800cf12:	d10a      	bne.n	800cf2a <xTimerGenericCommand+0x2e>
	__asm volatile
 800cf14:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf18:	f383 8811 	msr	BASEPRI, r3
 800cf1c:	f3bf 8f6f 	isb	sy
 800cf20:	f3bf 8f4f 	dsb	sy
 800cf24:	623b      	str	r3, [r7, #32]
}
 800cf26:	bf00      	nop
 800cf28:	e7fe      	b.n	800cf28 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800cf2a:	4b1a      	ldr	r3, [pc, #104]	; (800cf94 <xTimerGenericCommand+0x98>)
 800cf2c:	681b      	ldr	r3, [r3, #0]
 800cf2e:	2b00      	cmp	r3, #0
 800cf30:	d02a      	beq.n	800cf88 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800cf32:	68bb      	ldr	r3, [r7, #8]
 800cf34:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800cf3a:	68fb      	ldr	r3, [r7, #12]
 800cf3c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800cf3e:	68bb      	ldr	r3, [r7, #8]
 800cf40:	2b05      	cmp	r3, #5
 800cf42:	dc18      	bgt.n	800cf76 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800cf44:	f7ff fcb0 	bl	800c8a8 <xTaskGetSchedulerState>
 800cf48:	4603      	mov	r3, r0
 800cf4a:	2b02      	cmp	r3, #2
 800cf4c:	d109      	bne.n	800cf62 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800cf4e:	4b11      	ldr	r3, [pc, #68]	; (800cf94 <xTimerGenericCommand+0x98>)
 800cf50:	6818      	ldr	r0, [r3, #0]
 800cf52:	f107 0110 	add.w	r1, r7, #16
 800cf56:	2300      	movs	r3, #0
 800cf58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cf5a:	f7fe f8d7 	bl	800b10c <xQueueGenericSend>
 800cf5e:	6278      	str	r0, [r7, #36]	; 0x24
 800cf60:	e012      	b.n	800cf88 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800cf62:	4b0c      	ldr	r3, [pc, #48]	; (800cf94 <xTimerGenericCommand+0x98>)
 800cf64:	6818      	ldr	r0, [r3, #0]
 800cf66:	f107 0110 	add.w	r1, r7, #16
 800cf6a:	2300      	movs	r3, #0
 800cf6c:	2200      	movs	r2, #0
 800cf6e:	f7fe f8cd 	bl	800b10c <xQueueGenericSend>
 800cf72:	6278      	str	r0, [r7, #36]	; 0x24
 800cf74:	e008      	b.n	800cf88 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800cf76:	4b07      	ldr	r3, [pc, #28]	; (800cf94 <xTimerGenericCommand+0x98>)
 800cf78:	6818      	ldr	r0, [r3, #0]
 800cf7a:	f107 0110 	add.w	r1, r7, #16
 800cf7e:	2300      	movs	r3, #0
 800cf80:	683a      	ldr	r2, [r7, #0]
 800cf82:	f7fe f9c1 	bl	800b308 <xQueueGenericSendFromISR>
 800cf86:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800cf88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800cf8a:	4618      	mov	r0, r3
 800cf8c:	3728      	adds	r7, #40	; 0x28
 800cf8e:	46bd      	mov	sp, r7
 800cf90:	bd80      	pop	{r7, pc}
 800cf92:	bf00      	nop
 800cf94:	20001efc 	.word	0x20001efc

0800cf98 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800cf98:	b580      	push	{r7, lr}
 800cf9a:	b088      	sub	sp, #32
 800cf9c:	af02      	add	r7, sp, #8
 800cf9e:	6078      	str	r0, [r7, #4]
 800cfa0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cfa2:	4b22      	ldr	r3, [pc, #136]	; (800d02c <prvProcessExpiredTimer+0x94>)
 800cfa4:	681b      	ldr	r3, [r3, #0]
 800cfa6:	68db      	ldr	r3, [r3, #12]
 800cfa8:	68db      	ldr	r3, [r3, #12]
 800cfaa:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800cfac:	697b      	ldr	r3, [r7, #20]
 800cfae:	3304      	adds	r3, #4
 800cfb0:	4618      	mov	r0, r3
 800cfb2:	f7fd ff43 	bl	800ae3c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800cfb6:	697b      	ldr	r3, [r7, #20]
 800cfb8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cfbc:	f003 0304 	and.w	r3, r3, #4
 800cfc0:	2b00      	cmp	r3, #0
 800cfc2:	d022      	beq.n	800d00a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800cfc4:	697b      	ldr	r3, [r7, #20]
 800cfc6:	699a      	ldr	r2, [r3, #24]
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	18d1      	adds	r1, r2, r3
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	683a      	ldr	r2, [r7, #0]
 800cfd0:	6978      	ldr	r0, [r7, #20]
 800cfd2:	f000 f8d1 	bl	800d178 <prvInsertTimerInActiveList>
 800cfd6:	4603      	mov	r3, r0
 800cfd8:	2b00      	cmp	r3, #0
 800cfda:	d01f      	beq.n	800d01c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800cfdc:	2300      	movs	r3, #0
 800cfde:	9300      	str	r3, [sp, #0]
 800cfe0:	2300      	movs	r3, #0
 800cfe2:	687a      	ldr	r2, [r7, #4]
 800cfe4:	2100      	movs	r1, #0
 800cfe6:	6978      	ldr	r0, [r7, #20]
 800cfe8:	f7ff ff88 	bl	800cefc <xTimerGenericCommand>
 800cfec:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800cfee:	693b      	ldr	r3, [r7, #16]
 800cff0:	2b00      	cmp	r3, #0
 800cff2:	d113      	bne.n	800d01c <prvProcessExpiredTimer+0x84>
	__asm volatile
 800cff4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cff8:	f383 8811 	msr	BASEPRI, r3
 800cffc:	f3bf 8f6f 	isb	sy
 800d000:	f3bf 8f4f 	dsb	sy
 800d004:	60fb      	str	r3, [r7, #12]
}
 800d006:	bf00      	nop
 800d008:	e7fe      	b.n	800d008 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d00a:	697b      	ldr	r3, [r7, #20]
 800d00c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d010:	f023 0301 	bic.w	r3, r3, #1
 800d014:	b2da      	uxtb	r2, r3
 800d016:	697b      	ldr	r3, [r7, #20]
 800d018:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d01c:	697b      	ldr	r3, [r7, #20]
 800d01e:	6a1b      	ldr	r3, [r3, #32]
 800d020:	6978      	ldr	r0, [r7, #20]
 800d022:	4798      	blx	r3
}
 800d024:	bf00      	nop
 800d026:	3718      	adds	r7, #24
 800d028:	46bd      	mov	sp, r7
 800d02a:	bd80      	pop	{r7, pc}
 800d02c:	20001ef4 	.word	0x20001ef4

0800d030 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800d030:	b580      	push	{r7, lr}
 800d032:	b084      	sub	sp, #16
 800d034:	af00      	add	r7, sp, #0
 800d036:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800d038:	f107 0308 	add.w	r3, r7, #8
 800d03c:	4618      	mov	r0, r3
 800d03e:	f000 f857 	bl	800d0f0 <prvGetNextExpireTime>
 800d042:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800d044:	68bb      	ldr	r3, [r7, #8]
 800d046:	4619      	mov	r1, r3
 800d048:	68f8      	ldr	r0, [r7, #12]
 800d04a:	f000 f803 	bl	800d054 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800d04e:	f000 f8d5 	bl	800d1fc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800d052:	e7f1      	b.n	800d038 <prvTimerTask+0x8>

0800d054 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800d054:	b580      	push	{r7, lr}
 800d056:	b084      	sub	sp, #16
 800d058:	af00      	add	r7, sp, #0
 800d05a:	6078      	str	r0, [r7, #4]
 800d05c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800d05e:	f7ff f81b 	bl	800c098 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d062:	f107 0308 	add.w	r3, r7, #8
 800d066:	4618      	mov	r0, r3
 800d068:	f000 f866 	bl	800d138 <prvSampleTimeNow>
 800d06c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800d06e:	68bb      	ldr	r3, [r7, #8]
 800d070:	2b00      	cmp	r3, #0
 800d072:	d130      	bne.n	800d0d6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800d074:	683b      	ldr	r3, [r7, #0]
 800d076:	2b00      	cmp	r3, #0
 800d078:	d10a      	bne.n	800d090 <prvProcessTimerOrBlockTask+0x3c>
 800d07a:	687a      	ldr	r2, [r7, #4]
 800d07c:	68fb      	ldr	r3, [r7, #12]
 800d07e:	429a      	cmp	r2, r3
 800d080:	d806      	bhi.n	800d090 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800d082:	f7ff f817 	bl	800c0b4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800d086:	68f9      	ldr	r1, [r7, #12]
 800d088:	6878      	ldr	r0, [r7, #4]
 800d08a:	f7ff ff85 	bl	800cf98 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800d08e:	e024      	b.n	800d0da <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800d090:	683b      	ldr	r3, [r7, #0]
 800d092:	2b00      	cmp	r3, #0
 800d094:	d008      	beq.n	800d0a8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800d096:	4b13      	ldr	r3, [pc, #76]	; (800d0e4 <prvProcessTimerOrBlockTask+0x90>)
 800d098:	681b      	ldr	r3, [r3, #0]
 800d09a:	681b      	ldr	r3, [r3, #0]
 800d09c:	2b00      	cmp	r3, #0
 800d09e:	d101      	bne.n	800d0a4 <prvProcessTimerOrBlockTask+0x50>
 800d0a0:	2301      	movs	r3, #1
 800d0a2:	e000      	b.n	800d0a6 <prvProcessTimerOrBlockTask+0x52>
 800d0a4:	2300      	movs	r3, #0
 800d0a6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800d0a8:	4b0f      	ldr	r3, [pc, #60]	; (800d0e8 <prvProcessTimerOrBlockTask+0x94>)
 800d0aa:	6818      	ldr	r0, [r3, #0]
 800d0ac:	687a      	ldr	r2, [r7, #4]
 800d0ae:	68fb      	ldr	r3, [r7, #12]
 800d0b0:	1ad3      	subs	r3, r2, r3
 800d0b2:	683a      	ldr	r2, [r7, #0]
 800d0b4:	4619      	mov	r1, r3
 800d0b6:	f7fe fc81 	bl	800b9bc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800d0ba:	f7fe fffb 	bl	800c0b4 <xTaskResumeAll>
 800d0be:	4603      	mov	r3, r0
 800d0c0:	2b00      	cmp	r3, #0
 800d0c2:	d10a      	bne.n	800d0da <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800d0c4:	4b09      	ldr	r3, [pc, #36]	; (800d0ec <prvProcessTimerOrBlockTask+0x98>)
 800d0c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d0ca:	601a      	str	r2, [r3, #0]
 800d0cc:	f3bf 8f4f 	dsb	sy
 800d0d0:	f3bf 8f6f 	isb	sy
}
 800d0d4:	e001      	b.n	800d0da <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800d0d6:	f7fe ffed 	bl	800c0b4 <xTaskResumeAll>
}
 800d0da:	bf00      	nop
 800d0dc:	3710      	adds	r7, #16
 800d0de:	46bd      	mov	sp, r7
 800d0e0:	bd80      	pop	{r7, pc}
 800d0e2:	bf00      	nop
 800d0e4:	20001ef8 	.word	0x20001ef8
 800d0e8:	20001efc 	.word	0x20001efc
 800d0ec:	e000ed04 	.word	0xe000ed04

0800d0f0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800d0f0:	b480      	push	{r7}
 800d0f2:	b085      	sub	sp, #20
 800d0f4:	af00      	add	r7, sp, #0
 800d0f6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800d0f8:	4b0e      	ldr	r3, [pc, #56]	; (800d134 <prvGetNextExpireTime+0x44>)
 800d0fa:	681b      	ldr	r3, [r3, #0]
 800d0fc:	681b      	ldr	r3, [r3, #0]
 800d0fe:	2b00      	cmp	r3, #0
 800d100:	d101      	bne.n	800d106 <prvGetNextExpireTime+0x16>
 800d102:	2201      	movs	r2, #1
 800d104:	e000      	b.n	800d108 <prvGetNextExpireTime+0x18>
 800d106:	2200      	movs	r2, #0
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	681b      	ldr	r3, [r3, #0]
 800d110:	2b00      	cmp	r3, #0
 800d112:	d105      	bne.n	800d120 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d114:	4b07      	ldr	r3, [pc, #28]	; (800d134 <prvGetNextExpireTime+0x44>)
 800d116:	681b      	ldr	r3, [r3, #0]
 800d118:	68db      	ldr	r3, [r3, #12]
 800d11a:	681b      	ldr	r3, [r3, #0]
 800d11c:	60fb      	str	r3, [r7, #12]
 800d11e:	e001      	b.n	800d124 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800d120:	2300      	movs	r3, #0
 800d122:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800d124:	68fb      	ldr	r3, [r7, #12]
}
 800d126:	4618      	mov	r0, r3
 800d128:	3714      	adds	r7, #20
 800d12a:	46bd      	mov	sp, r7
 800d12c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d130:	4770      	bx	lr
 800d132:	bf00      	nop
 800d134:	20001ef4 	.word	0x20001ef4

0800d138 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800d138:	b580      	push	{r7, lr}
 800d13a:	b084      	sub	sp, #16
 800d13c:	af00      	add	r7, sp, #0
 800d13e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800d140:	f7ff f856 	bl	800c1f0 <xTaskGetTickCount>
 800d144:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800d146:	4b0b      	ldr	r3, [pc, #44]	; (800d174 <prvSampleTimeNow+0x3c>)
 800d148:	681b      	ldr	r3, [r3, #0]
 800d14a:	68fa      	ldr	r2, [r7, #12]
 800d14c:	429a      	cmp	r2, r3
 800d14e:	d205      	bcs.n	800d15c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800d150:	f000 f936 	bl	800d3c0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	2201      	movs	r2, #1
 800d158:	601a      	str	r2, [r3, #0]
 800d15a:	e002      	b.n	800d162 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	2200      	movs	r2, #0
 800d160:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800d162:	4a04      	ldr	r2, [pc, #16]	; (800d174 <prvSampleTimeNow+0x3c>)
 800d164:	68fb      	ldr	r3, [r7, #12]
 800d166:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800d168:	68fb      	ldr	r3, [r7, #12]
}
 800d16a:	4618      	mov	r0, r3
 800d16c:	3710      	adds	r7, #16
 800d16e:	46bd      	mov	sp, r7
 800d170:	bd80      	pop	{r7, pc}
 800d172:	bf00      	nop
 800d174:	20001f04 	.word	0x20001f04

0800d178 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800d178:	b580      	push	{r7, lr}
 800d17a:	b086      	sub	sp, #24
 800d17c:	af00      	add	r7, sp, #0
 800d17e:	60f8      	str	r0, [r7, #12]
 800d180:	60b9      	str	r1, [r7, #8]
 800d182:	607a      	str	r2, [r7, #4]
 800d184:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800d186:	2300      	movs	r3, #0
 800d188:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800d18a:	68fb      	ldr	r3, [r7, #12]
 800d18c:	68ba      	ldr	r2, [r7, #8]
 800d18e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d190:	68fb      	ldr	r3, [r7, #12]
 800d192:	68fa      	ldr	r2, [r7, #12]
 800d194:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800d196:	68ba      	ldr	r2, [r7, #8]
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	429a      	cmp	r2, r3
 800d19c:	d812      	bhi.n	800d1c4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d19e:	687a      	ldr	r2, [r7, #4]
 800d1a0:	683b      	ldr	r3, [r7, #0]
 800d1a2:	1ad2      	subs	r2, r2, r3
 800d1a4:	68fb      	ldr	r3, [r7, #12]
 800d1a6:	699b      	ldr	r3, [r3, #24]
 800d1a8:	429a      	cmp	r2, r3
 800d1aa:	d302      	bcc.n	800d1b2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800d1ac:	2301      	movs	r3, #1
 800d1ae:	617b      	str	r3, [r7, #20]
 800d1b0:	e01b      	b.n	800d1ea <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800d1b2:	4b10      	ldr	r3, [pc, #64]	; (800d1f4 <prvInsertTimerInActiveList+0x7c>)
 800d1b4:	681a      	ldr	r2, [r3, #0]
 800d1b6:	68fb      	ldr	r3, [r7, #12]
 800d1b8:	3304      	adds	r3, #4
 800d1ba:	4619      	mov	r1, r3
 800d1bc:	4610      	mov	r0, r2
 800d1be:	f7fd fe04 	bl	800adca <vListInsert>
 800d1c2:	e012      	b.n	800d1ea <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800d1c4:	687a      	ldr	r2, [r7, #4]
 800d1c6:	683b      	ldr	r3, [r7, #0]
 800d1c8:	429a      	cmp	r2, r3
 800d1ca:	d206      	bcs.n	800d1da <prvInsertTimerInActiveList+0x62>
 800d1cc:	68ba      	ldr	r2, [r7, #8]
 800d1ce:	683b      	ldr	r3, [r7, #0]
 800d1d0:	429a      	cmp	r2, r3
 800d1d2:	d302      	bcc.n	800d1da <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800d1d4:	2301      	movs	r3, #1
 800d1d6:	617b      	str	r3, [r7, #20]
 800d1d8:	e007      	b.n	800d1ea <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d1da:	4b07      	ldr	r3, [pc, #28]	; (800d1f8 <prvInsertTimerInActiveList+0x80>)
 800d1dc:	681a      	ldr	r2, [r3, #0]
 800d1de:	68fb      	ldr	r3, [r7, #12]
 800d1e0:	3304      	adds	r3, #4
 800d1e2:	4619      	mov	r1, r3
 800d1e4:	4610      	mov	r0, r2
 800d1e6:	f7fd fdf0 	bl	800adca <vListInsert>
		}
	}

	return xProcessTimerNow;
 800d1ea:	697b      	ldr	r3, [r7, #20]
}
 800d1ec:	4618      	mov	r0, r3
 800d1ee:	3718      	adds	r7, #24
 800d1f0:	46bd      	mov	sp, r7
 800d1f2:	bd80      	pop	{r7, pc}
 800d1f4:	20001ef8 	.word	0x20001ef8
 800d1f8:	20001ef4 	.word	0x20001ef4

0800d1fc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800d1fc:	b580      	push	{r7, lr}
 800d1fe:	b08e      	sub	sp, #56	; 0x38
 800d200:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d202:	e0ca      	b.n	800d39a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	2b00      	cmp	r3, #0
 800d208:	da18      	bge.n	800d23c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800d20a:	1d3b      	adds	r3, r7, #4
 800d20c:	3304      	adds	r3, #4
 800d20e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800d210:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d212:	2b00      	cmp	r3, #0
 800d214:	d10a      	bne.n	800d22c <prvProcessReceivedCommands+0x30>
	__asm volatile
 800d216:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d21a:	f383 8811 	msr	BASEPRI, r3
 800d21e:	f3bf 8f6f 	isb	sy
 800d222:	f3bf 8f4f 	dsb	sy
 800d226:	61fb      	str	r3, [r7, #28]
}
 800d228:	bf00      	nop
 800d22a:	e7fe      	b.n	800d22a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800d22c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d22e:	681b      	ldr	r3, [r3, #0]
 800d230:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d232:	6850      	ldr	r0, [r2, #4]
 800d234:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d236:	6892      	ldr	r2, [r2, #8]
 800d238:	4611      	mov	r1, r2
 800d23a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	2b00      	cmp	r3, #0
 800d240:	f2c0 80aa 	blt.w	800d398 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800d244:	68fb      	ldr	r3, [r7, #12]
 800d246:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800d248:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d24a:	695b      	ldr	r3, [r3, #20]
 800d24c:	2b00      	cmp	r3, #0
 800d24e:	d004      	beq.n	800d25a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d250:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d252:	3304      	adds	r3, #4
 800d254:	4618      	mov	r0, r3
 800d256:	f7fd fdf1 	bl	800ae3c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d25a:	463b      	mov	r3, r7
 800d25c:	4618      	mov	r0, r3
 800d25e:	f7ff ff6b 	bl	800d138 <prvSampleTimeNow>
 800d262:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	2b09      	cmp	r3, #9
 800d268:	f200 8097 	bhi.w	800d39a <prvProcessReceivedCommands+0x19e>
 800d26c:	a201      	add	r2, pc, #4	; (adr r2, 800d274 <prvProcessReceivedCommands+0x78>)
 800d26e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d272:	bf00      	nop
 800d274:	0800d29d 	.word	0x0800d29d
 800d278:	0800d29d 	.word	0x0800d29d
 800d27c:	0800d29d 	.word	0x0800d29d
 800d280:	0800d311 	.word	0x0800d311
 800d284:	0800d325 	.word	0x0800d325
 800d288:	0800d36f 	.word	0x0800d36f
 800d28c:	0800d29d 	.word	0x0800d29d
 800d290:	0800d29d 	.word	0x0800d29d
 800d294:	0800d311 	.word	0x0800d311
 800d298:	0800d325 	.word	0x0800d325
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d29c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d29e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d2a2:	f043 0301 	orr.w	r3, r3, #1
 800d2a6:	b2da      	uxtb	r2, r3
 800d2a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2aa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800d2ae:	68ba      	ldr	r2, [r7, #8]
 800d2b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2b2:	699b      	ldr	r3, [r3, #24]
 800d2b4:	18d1      	adds	r1, r2, r3
 800d2b6:	68bb      	ldr	r3, [r7, #8]
 800d2b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d2ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d2bc:	f7ff ff5c 	bl	800d178 <prvInsertTimerInActiveList>
 800d2c0:	4603      	mov	r3, r0
 800d2c2:	2b00      	cmp	r3, #0
 800d2c4:	d069      	beq.n	800d39a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d2c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2c8:	6a1b      	ldr	r3, [r3, #32]
 800d2ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d2cc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d2ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2d0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d2d4:	f003 0304 	and.w	r3, r3, #4
 800d2d8:	2b00      	cmp	r3, #0
 800d2da:	d05e      	beq.n	800d39a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800d2dc:	68ba      	ldr	r2, [r7, #8]
 800d2de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2e0:	699b      	ldr	r3, [r3, #24]
 800d2e2:	441a      	add	r2, r3
 800d2e4:	2300      	movs	r3, #0
 800d2e6:	9300      	str	r3, [sp, #0]
 800d2e8:	2300      	movs	r3, #0
 800d2ea:	2100      	movs	r1, #0
 800d2ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d2ee:	f7ff fe05 	bl	800cefc <xTimerGenericCommand>
 800d2f2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800d2f4:	6a3b      	ldr	r3, [r7, #32]
 800d2f6:	2b00      	cmp	r3, #0
 800d2f8:	d14f      	bne.n	800d39a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800d2fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2fe:	f383 8811 	msr	BASEPRI, r3
 800d302:	f3bf 8f6f 	isb	sy
 800d306:	f3bf 8f4f 	dsb	sy
 800d30a:	61bb      	str	r3, [r7, #24]
}
 800d30c:	bf00      	nop
 800d30e:	e7fe      	b.n	800d30e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d310:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d312:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d316:	f023 0301 	bic.w	r3, r3, #1
 800d31a:	b2da      	uxtb	r2, r3
 800d31c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d31e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800d322:	e03a      	b.n	800d39a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d324:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d326:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d32a:	f043 0301 	orr.w	r3, r3, #1
 800d32e:	b2da      	uxtb	r2, r3
 800d330:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d332:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800d336:	68ba      	ldr	r2, [r7, #8]
 800d338:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d33a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800d33c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d33e:	699b      	ldr	r3, [r3, #24]
 800d340:	2b00      	cmp	r3, #0
 800d342:	d10a      	bne.n	800d35a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800d344:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d348:	f383 8811 	msr	BASEPRI, r3
 800d34c:	f3bf 8f6f 	isb	sy
 800d350:	f3bf 8f4f 	dsb	sy
 800d354:	617b      	str	r3, [r7, #20]
}
 800d356:	bf00      	nop
 800d358:	e7fe      	b.n	800d358 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800d35a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d35c:	699a      	ldr	r2, [r3, #24]
 800d35e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d360:	18d1      	adds	r1, r2, r3
 800d362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d364:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d366:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d368:	f7ff ff06 	bl	800d178 <prvInsertTimerInActiveList>
					break;
 800d36c:	e015      	b.n	800d39a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800d36e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d370:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d374:	f003 0302 	and.w	r3, r3, #2
 800d378:	2b00      	cmp	r3, #0
 800d37a:	d103      	bne.n	800d384 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800d37c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d37e:	f000 fbdf 	bl	800db40 <vPortFree>
 800d382:	e00a      	b.n	800d39a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d384:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d386:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d38a:	f023 0301 	bic.w	r3, r3, #1
 800d38e:	b2da      	uxtb	r2, r3
 800d390:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d392:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800d396:	e000      	b.n	800d39a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800d398:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d39a:	4b08      	ldr	r3, [pc, #32]	; (800d3bc <prvProcessReceivedCommands+0x1c0>)
 800d39c:	681b      	ldr	r3, [r3, #0]
 800d39e:	1d39      	adds	r1, r7, #4
 800d3a0:	2200      	movs	r2, #0
 800d3a2:	4618      	mov	r0, r3
 800d3a4:	f7fe f84c 	bl	800b440 <xQueueReceive>
 800d3a8:	4603      	mov	r3, r0
 800d3aa:	2b00      	cmp	r3, #0
 800d3ac:	f47f af2a 	bne.w	800d204 <prvProcessReceivedCommands+0x8>
	}
}
 800d3b0:	bf00      	nop
 800d3b2:	bf00      	nop
 800d3b4:	3730      	adds	r7, #48	; 0x30
 800d3b6:	46bd      	mov	sp, r7
 800d3b8:	bd80      	pop	{r7, pc}
 800d3ba:	bf00      	nop
 800d3bc:	20001efc 	.word	0x20001efc

0800d3c0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800d3c0:	b580      	push	{r7, lr}
 800d3c2:	b088      	sub	sp, #32
 800d3c4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d3c6:	e048      	b.n	800d45a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d3c8:	4b2d      	ldr	r3, [pc, #180]	; (800d480 <prvSwitchTimerLists+0xc0>)
 800d3ca:	681b      	ldr	r3, [r3, #0]
 800d3cc:	68db      	ldr	r3, [r3, #12]
 800d3ce:	681b      	ldr	r3, [r3, #0]
 800d3d0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d3d2:	4b2b      	ldr	r3, [pc, #172]	; (800d480 <prvSwitchTimerLists+0xc0>)
 800d3d4:	681b      	ldr	r3, [r3, #0]
 800d3d6:	68db      	ldr	r3, [r3, #12]
 800d3d8:	68db      	ldr	r3, [r3, #12]
 800d3da:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d3dc:	68fb      	ldr	r3, [r7, #12]
 800d3de:	3304      	adds	r3, #4
 800d3e0:	4618      	mov	r0, r3
 800d3e2:	f7fd fd2b 	bl	800ae3c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d3e6:	68fb      	ldr	r3, [r7, #12]
 800d3e8:	6a1b      	ldr	r3, [r3, #32]
 800d3ea:	68f8      	ldr	r0, [r7, #12]
 800d3ec:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d3ee:	68fb      	ldr	r3, [r7, #12]
 800d3f0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d3f4:	f003 0304 	and.w	r3, r3, #4
 800d3f8:	2b00      	cmp	r3, #0
 800d3fa:	d02e      	beq.n	800d45a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800d3fc:	68fb      	ldr	r3, [r7, #12]
 800d3fe:	699b      	ldr	r3, [r3, #24]
 800d400:	693a      	ldr	r2, [r7, #16]
 800d402:	4413      	add	r3, r2
 800d404:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800d406:	68ba      	ldr	r2, [r7, #8]
 800d408:	693b      	ldr	r3, [r7, #16]
 800d40a:	429a      	cmp	r2, r3
 800d40c:	d90e      	bls.n	800d42c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800d40e:	68fb      	ldr	r3, [r7, #12]
 800d410:	68ba      	ldr	r2, [r7, #8]
 800d412:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d414:	68fb      	ldr	r3, [r7, #12]
 800d416:	68fa      	ldr	r2, [r7, #12]
 800d418:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d41a:	4b19      	ldr	r3, [pc, #100]	; (800d480 <prvSwitchTimerLists+0xc0>)
 800d41c:	681a      	ldr	r2, [r3, #0]
 800d41e:	68fb      	ldr	r3, [r7, #12]
 800d420:	3304      	adds	r3, #4
 800d422:	4619      	mov	r1, r3
 800d424:	4610      	mov	r0, r2
 800d426:	f7fd fcd0 	bl	800adca <vListInsert>
 800d42a:	e016      	b.n	800d45a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d42c:	2300      	movs	r3, #0
 800d42e:	9300      	str	r3, [sp, #0]
 800d430:	2300      	movs	r3, #0
 800d432:	693a      	ldr	r2, [r7, #16]
 800d434:	2100      	movs	r1, #0
 800d436:	68f8      	ldr	r0, [r7, #12]
 800d438:	f7ff fd60 	bl	800cefc <xTimerGenericCommand>
 800d43c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800d43e:	687b      	ldr	r3, [r7, #4]
 800d440:	2b00      	cmp	r3, #0
 800d442:	d10a      	bne.n	800d45a <prvSwitchTimerLists+0x9a>
	__asm volatile
 800d444:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d448:	f383 8811 	msr	BASEPRI, r3
 800d44c:	f3bf 8f6f 	isb	sy
 800d450:	f3bf 8f4f 	dsb	sy
 800d454:	603b      	str	r3, [r7, #0]
}
 800d456:	bf00      	nop
 800d458:	e7fe      	b.n	800d458 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d45a:	4b09      	ldr	r3, [pc, #36]	; (800d480 <prvSwitchTimerLists+0xc0>)
 800d45c:	681b      	ldr	r3, [r3, #0]
 800d45e:	681b      	ldr	r3, [r3, #0]
 800d460:	2b00      	cmp	r3, #0
 800d462:	d1b1      	bne.n	800d3c8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800d464:	4b06      	ldr	r3, [pc, #24]	; (800d480 <prvSwitchTimerLists+0xc0>)
 800d466:	681b      	ldr	r3, [r3, #0]
 800d468:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800d46a:	4b06      	ldr	r3, [pc, #24]	; (800d484 <prvSwitchTimerLists+0xc4>)
 800d46c:	681b      	ldr	r3, [r3, #0]
 800d46e:	4a04      	ldr	r2, [pc, #16]	; (800d480 <prvSwitchTimerLists+0xc0>)
 800d470:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800d472:	4a04      	ldr	r2, [pc, #16]	; (800d484 <prvSwitchTimerLists+0xc4>)
 800d474:	697b      	ldr	r3, [r7, #20]
 800d476:	6013      	str	r3, [r2, #0]
}
 800d478:	bf00      	nop
 800d47a:	3718      	adds	r7, #24
 800d47c:	46bd      	mov	sp, r7
 800d47e:	bd80      	pop	{r7, pc}
 800d480:	20001ef4 	.word	0x20001ef4
 800d484:	20001ef8 	.word	0x20001ef8

0800d488 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800d488:	b580      	push	{r7, lr}
 800d48a:	b082      	sub	sp, #8
 800d48c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800d48e:	f000 f969 	bl	800d764 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800d492:	4b15      	ldr	r3, [pc, #84]	; (800d4e8 <prvCheckForValidListAndQueue+0x60>)
 800d494:	681b      	ldr	r3, [r3, #0]
 800d496:	2b00      	cmp	r3, #0
 800d498:	d120      	bne.n	800d4dc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800d49a:	4814      	ldr	r0, [pc, #80]	; (800d4ec <prvCheckForValidListAndQueue+0x64>)
 800d49c:	f7fd fc44 	bl	800ad28 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800d4a0:	4813      	ldr	r0, [pc, #76]	; (800d4f0 <prvCheckForValidListAndQueue+0x68>)
 800d4a2:	f7fd fc41 	bl	800ad28 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800d4a6:	4b13      	ldr	r3, [pc, #76]	; (800d4f4 <prvCheckForValidListAndQueue+0x6c>)
 800d4a8:	4a10      	ldr	r2, [pc, #64]	; (800d4ec <prvCheckForValidListAndQueue+0x64>)
 800d4aa:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800d4ac:	4b12      	ldr	r3, [pc, #72]	; (800d4f8 <prvCheckForValidListAndQueue+0x70>)
 800d4ae:	4a10      	ldr	r2, [pc, #64]	; (800d4f0 <prvCheckForValidListAndQueue+0x68>)
 800d4b0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800d4b2:	2300      	movs	r3, #0
 800d4b4:	9300      	str	r3, [sp, #0]
 800d4b6:	4b11      	ldr	r3, [pc, #68]	; (800d4fc <prvCheckForValidListAndQueue+0x74>)
 800d4b8:	4a11      	ldr	r2, [pc, #68]	; (800d500 <prvCheckForValidListAndQueue+0x78>)
 800d4ba:	2110      	movs	r1, #16
 800d4bc:	200a      	movs	r0, #10
 800d4be:	f7fd fd4f 	bl	800af60 <xQueueGenericCreateStatic>
 800d4c2:	4603      	mov	r3, r0
 800d4c4:	4a08      	ldr	r2, [pc, #32]	; (800d4e8 <prvCheckForValidListAndQueue+0x60>)
 800d4c6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800d4c8:	4b07      	ldr	r3, [pc, #28]	; (800d4e8 <prvCheckForValidListAndQueue+0x60>)
 800d4ca:	681b      	ldr	r3, [r3, #0]
 800d4cc:	2b00      	cmp	r3, #0
 800d4ce:	d005      	beq.n	800d4dc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800d4d0:	4b05      	ldr	r3, [pc, #20]	; (800d4e8 <prvCheckForValidListAndQueue+0x60>)
 800d4d2:	681b      	ldr	r3, [r3, #0]
 800d4d4:	490b      	ldr	r1, [pc, #44]	; (800d504 <prvCheckForValidListAndQueue+0x7c>)
 800d4d6:	4618      	mov	r0, r3
 800d4d8:	f7fe fa46 	bl	800b968 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d4dc:	f000 f972 	bl	800d7c4 <vPortExitCritical>
}
 800d4e0:	bf00      	nop
 800d4e2:	46bd      	mov	sp, r7
 800d4e4:	bd80      	pop	{r7, pc}
 800d4e6:	bf00      	nop
 800d4e8:	20001efc 	.word	0x20001efc
 800d4ec:	20001ecc 	.word	0x20001ecc
 800d4f0:	20001ee0 	.word	0x20001ee0
 800d4f4:	20001ef4 	.word	0x20001ef4
 800d4f8:	20001ef8 	.word	0x20001ef8
 800d4fc:	20001fa8 	.word	0x20001fa8
 800d500:	20001f08 	.word	0x20001f08
 800d504:	0800ffdc 	.word	0x0800ffdc

0800d508 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800d508:	b480      	push	{r7}
 800d50a:	b085      	sub	sp, #20
 800d50c:	af00      	add	r7, sp, #0
 800d50e:	60f8      	str	r0, [r7, #12]
 800d510:	60b9      	str	r1, [r7, #8]
 800d512:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800d514:	68fb      	ldr	r3, [r7, #12]
 800d516:	3b04      	subs	r3, #4
 800d518:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800d51a:	68fb      	ldr	r3, [r7, #12]
 800d51c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800d520:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d522:	68fb      	ldr	r3, [r7, #12]
 800d524:	3b04      	subs	r3, #4
 800d526:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800d528:	68bb      	ldr	r3, [r7, #8]
 800d52a:	f023 0201 	bic.w	r2, r3, #1
 800d52e:	68fb      	ldr	r3, [r7, #12]
 800d530:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d532:	68fb      	ldr	r3, [r7, #12]
 800d534:	3b04      	subs	r3, #4
 800d536:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800d538:	4a0c      	ldr	r2, [pc, #48]	; (800d56c <pxPortInitialiseStack+0x64>)
 800d53a:	68fb      	ldr	r3, [r7, #12]
 800d53c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800d53e:	68fb      	ldr	r3, [r7, #12]
 800d540:	3b14      	subs	r3, #20
 800d542:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800d544:	687a      	ldr	r2, [r7, #4]
 800d546:	68fb      	ldr	r3, [r7, #12]
 800d548:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800d54a:	68fb      	ldr	r3, [r7, #12]
 800d54c:	3b04      	subs	r3, #4
 800d54e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800d550:	68fb      	ldr	r3, [r7, #12]
 800d552:	f06f 0202 	mvn.w	r2, #2
 800d556:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800d558:	68fb      	ldr	r3, [r7, #12]
 800d55a:	3b20      	subs	r3, #32
 800d55c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800d55e:	68fb      	ldr	r3, [r7, #12]
}
 800d560:	4618      	mov	r0, r3
 800d562:	3714      	adds	r7, #20
 800d564:	46bd      	mov	sp, r7
 800d566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d56a:	4770      	bx	lr
 800d56c:	0800d571 	.word	0x0800d571

0800d570 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800d570:	b480      	push	{r7}
 800d572:	b085      	sub	sp, #20
 800d574:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800d576:	2300      	movs	r3, #0
 800d578:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800d57a:	4b12      	ldr	r3, [pc, #72]	; (800d5c4 <prvTaskExitError+0x54>)
 800d57c:	681b      	ldr	r3, [r3, #0]
 800d57e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d582:	d00a      	beq.n	800d59a <prvTaskExitError+0x2a>
	__asm volatile
 800d584:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d588:	f383 8811 	msr	BASEPRI, r3
 800d58c:	f3bf 8f6f 	isb	sy
 800d590:	f3bf 8f4f 	dsb	sy
 800d594:	60fb      	str	r3, [r7, #12]
}
 800d596:	bf00      	nop
 800d598:	e7fe      	b.n	800d598 <prvTaskExitError+0x28>
	__asm volatile
 800d59a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d59e:	f383 8811 	msr	BASEPRI, r3
 800d5a2:	f3bf 8f6f 	isb	sy
 800d5a6:	f3bf 8f4f 	dsb	sy
 800d5aa:	60bb      	str	r3, [r7, #8]
}
 800d5ac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800d5ae:	bf00      	nop
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	2b00      	cmp	r3, #0
 800d5b4:	d0fc      	beq.n	800d5b0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800d5b6:	bf00      	nop
 800d5b8:	bf00      	nop
 800d5ba:	3714      	adds	r7, #20
 800d5bc:	46bd      	mov	sp, r7
 800d5be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5c2:	4770      	bx	lr
 800d5c4:	20000044 	.word	0x20000044
	...

0800d5d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800d5d0:	4b07      	ldr	r3, [pc, #28]	; (800d5f0 <pxCurrentTCBConst2>)
 800d5d2:	6819      	ldr	r1, [r3, #0]
 800d5d4:	6808      	ldr	r0, [r1, #0]
 800d5d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d5da:	f380 8809 	msr	PSP, r0
 800d5de:	f3bf 8f6f 	isb	sy
 800d5e2:	f04f 0000 	mov.w	r0, #0
 800d5e6:	f380 8811 	msr	BASEPRI, r0
 800d5ea:	4770      	bx	lr
 800d5ec:	f3af 8000 	nop.w

0800d5f0 <pxCurrentTCBConst2>:
 800d5f0:	200019c4 	.word	0x200019c4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800d5f4:	bf00      	nop
 800d5f6:	bf00      	nop

0800d5f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800d5f8:	4808      	ldr	r0, [pc, #32]	; (800d61c <prvPortStartFirstTask+0x24>)
 800d5fa:	6800      	ldr	r0, [r0, #0]
 800d5fc:	6800      	ldr	r0, [r0, #0]
 800d5fe:	f380 8808 	msr	MSP, r0
 800d602:	f04f 0000 	mov.w	r0, #0
 800d606:	f380 8814 	msr	CONTROL, r0
 800d60a:	b662      	cpsie	i
 800d60c:	b661      	cpsie	f
 800d60e:	f3bf 8f4f 	dsb	sy
 800d612:	f3bf 8f6f 	isb	sy
 800d616:	df00      	svc	0
 800d618:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800d61a:	bf00      	nop
 800d61c:	e000ed08 	.word	0xe000ed08

0800d620 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800d620:	b580      	push	{r7, lr}
 800d622:	b086      	sub	sp, #24
 800d624:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800d626:	4b46      	ldr	r3, [pc, #280]	; (800d740 <xPortStartScheduler+0x120>)
 800d628:	681b      	ldr	r3, [r3, #0]
 800d62a:	4a46      	ldr	r2, [pc, #280]	; (800d744 <xPortStartScheduler+0x124>)
 800d62c:	4293      	cmp	r3, r2
 800d62e:	d10a      	bne.n	800d646 <xPortStartScheduler+0x26>
	__asm volatile
 800d630:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d634:	f383 8811 	msr	BASEPRI, r3
 800d638:	f3bf 8f6f 	isb	sy
 800d63c:	f3bf 8f4f 	dsb	sy
 800d640:	613b      	str	r3, [r7, #16]
}
 800d642:	bf00      	nop
 800d644:	e7fe      	b.n	800d644 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800d646:	4b3e      	ldr	r3, [pc, #248]	; (800d740 <xPortStartScheduler+0x120>)
 800d648:	681b      	ldr	r3, [r3, #0]
 800d64a:	4a3f      	ldr	r2, [pc, #252]	; (800d748 <xPortStartScheduler+0x128>)
 800d64c:	4293      	cmp	r3, r2
 800d64e:	d10a      	bne.n	800d666 <xPortStartScheduler+0x46>
	__asm volatile
 800d650:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d654:	f383 8811 	msr	BASEPRI, r3
 800d658:	f3bf 8f6f 	isb	sy
 800d65c:	f3bf 8f4f 	dsb	sy
 800d660:	60fb      	str	r3, [r7, #12]
}
 800d662:	bf00      	nop
 800d664:	e7fe      	b.n	800d664 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800d666:	4b39      	ldr	r3, [pc, #228]	; (800d74c <xPortStartScheduler+0x12c>)
 800d668:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800d66a:	697b      	ldr	r3, [r7, #20]
 800d66c:	781b      	ldrb	r3, [r3, #0]
 800d66e:	b2db      	uxtb	r3, r3
 800d670:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800d672:	697b      	ldr	r3, [r7, #20]
 800d674:	22ff      	movs	r2, #255	; 0xff
 800d676:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800d678:	697b      	ldr	r3, [r7, #20]
 800d67a:	781b      	ldrb	r3, [r3, #0]
 800d67c:	b2db      	uxtb	r3, r3
 800d67e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800d680:	78fb      	ldrb	r3, [r7, #3]
 800d682:	b2db      	uxtb	r3, r3
 800d684:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800d688:	b2da      	uxtb	r2, r3
 800d68a:	4b31      	ldr	r3, [pc, #196]	; (800d750 <xPortStartScheduler+0x130>)
 800d68c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800d68e:	4b31      	ldr	r3, [pc, #196]	; (800d754 <xPortStartScheduler+0x134>)
 800d690:	2207      	movs	r2, #7
 800d692:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d694:	e009      	b.n	800d6aa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800d696:	4b2f      	ldr	r3, [pc, #188]	; (800d754 <xPortStartScheduler+0x134>)
 800d698:	681b      	ldr	r3, [r3, #0]
 800d69a:	3b01      	subs	r3, #1
 800d69c:	4a2d      	ldr	r2, [pc, #180]	; (800d754 <xPortStartScheduler+0x134>)
 800d69e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800d6a0:	78fb      	ldrb	r3, [r7, #3]
 800d6a2:	b2db      	uxtb	r3, r3
 800d6a4:	005b      	lsls	r3, r3, #1
 800d6a6:	b2db      	uxtb	r3, r3
 800d6a8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d6aa:	78fb      	ldrb	r3, [r7, #3]
 800d6ac:	b2db      	uxtb	r3, r3
 800d6ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d6b2:	2b80      	cmp	r3, #128	; 0x80
 800d6b4:	d0ef      	beq.n	800d696 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800d6b6:	4b27      	ldr	r3, [pc, #156]	; (800d754 <xPortStartScheduler+0x134>)
 800d6b8:	681b      	ldr	r3, [r3, #0]
 800d6ba:	f1c3 0307 	rsb	r3, r3, #7
 800d6be:	2b04      	cmp	r3, #4
 800d6c0:	d00a      	beq.n	800d6d8 <xPortStartScheduler+0xb8>
	__asm volatile
 800d6c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6c6:	f383 8811 	msr	BASEPRI, r3
 800d6ca:	f3bf 8f6f 	isb	sy
 800d6ce:	f3bf 8f4f 	dsb	sy
 800d6d2:	60bb      	str	r3, [r7, #8]
}
 800d6d4:	bf00      	nop
 800d6d6:	e7fe      	b.n	800d6d6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800d6d8:	4b1e      	ldr	r3, [pc, #120]	; (800d754 <xPortStartScheduler+0x134>)
 800d6da:	681b      	ldr	r3, [r3, #0]
 800d6dc:	021b      	lsls	r3, r3, #8
 800d6de:	4a1d      	ldr	r2, [pc, #116]	; (800d754 <xPortStartScheduler+0x134>)
 800d6e0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800d6e2:	4b1c      	ldr	r3, [pc, #112]	; (800d754 <xPortStartScheduler+0x134>)
 800d6e4:	681b      	ldr	r3, [r3, #0]
 800d6e6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800d6ea:	4a1a      	ldr	r2, [pc, #104]	; (800d754 <xPortStartScheduler+0x134>)
 800d6ec:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	b2da      	uxtb	r2, r3
 800d6f2:	697b      	ldr	r3, [r7, #20]
 800d6f4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800d6f6:	4b18      	ldr	r3, [pc, #96]	; (800d758 <xPortStartScheduler+0x138>)
 800d6f8:	681b      	ldr	r3, [r3, #0]
 800d6fa:	4a17      	ldr	r2, [pc, #92]	; (800d758 <xPortStartScheduler+0x138>)
 800d6fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800d700:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800d702:	4b15      	ldr	r3, [pc, #84]	; (800d758 <xPortStartScheduler+0x138>)
 800d704:	681b      	ldr	r3, [r3, #0]
 800d706:	4a14      	ldr	r2, [pc, #80]	; (800d758 <xPortStartScheduler+0x138>)
 800d708:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800d70c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800d70e:	f000 f8dd 	bl	800d8cc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800d712:	4b12      	ldr	r3, [pc, #72]	; (800d75c <xPortStartScheduler+0x13c>)
 800d714:	2200      	movs	r2, #0
 800d716:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800d718:	f000 f8fc 	bl	800d914 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800d71c:	4b10      	ldr	r3, [pc, #64]	; (800d760 <xPortStartScheduler+0x140>)
 800d71e:	681b      	ldr	r3, [r3, #0]
 800d720:	4a0f      	ldr	r2, [pc, #60]	; (800d760 <xPortStartScheduler+0x140>)
 800d722:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800d726:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800d728:	f7ff ff66 	bl	800d5f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800d72c:	f7fe fe2a 	bl	800c384 <vTaskSwitchContext>
	prvTaskExitError();
 800d730:	f7ff ff1e 	bl	800d570 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800d734:	2300      	movs	r3, #0
}
 800d736:	4618      	mov	r0, r3
 800d738:	3718      	adds	r7, #24
 800d73a:	46bd      	mov	sp, r7
 800d73c:	bd80      	pop	{r7, pc}
 800d73e:	bf00      	nop
 800d740:	e000ed00 	.word	0xe000ed00
 800d744:	410fc271 	.word	0x410fc271
 800d748:	410fc270 	.word	0x410fc270
 800d74c:	e000e400 	.word	0xe000e400
 800d750:	20001ff8 	.word	0x20001ff8
 800d754:	20001ffc 	.word	0x20001ffc
 800d758:	e000ed20 	.word	0xe000ed20
 800d75c:	20000044 	.word	0x20000044
 800d760:	e000ef34 	.word	0xe000ef34

0800d764 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800d764:	b480      	push	{r7}
 800d766:	b083      	sub	sp, #12
 800d768:	af00      	add	r7, sp, #0
	__asm volatile
 800d76a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d76e:	f383 8811 	msr	BASEPRI, r3
 800d772:	f3bf 8f6f 	isb	sy
 800d776:	f3bf 8f4f 	dsb	sy
 800d77a:	607b      	str	r3, [r7, #4]
}
 800d77c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800d77e:	4b0f      	ldr	r3, [pc, #60]	; (800d7bc <vPortEnterCritical+0x58>)
 800d780:	681b      	ldr	r3, [r3, #0]
 800d782:	3301      	adds	r3, #1
 800d784:	4a0d      	ldr	r2, [pc, #52]	; (800d7bc <vPortEnterCritical+0x58>)
 800d786:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800d788:	4b0c      	ldr	r3, [pc, #48]	; (800d7bc <vPortEnterCritical+0x58>)
 800d78a:	681b      	ldr	r3, [r3, #0]
 800d78c:	2b01      	cmp	r3, #1
 800d78e:	d10f      	bne.n	800d7b0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800d790:	4b0b      	ldr	r3, [pc, #44]	; (800d7c0 <vPortEnterCritical+0x5c>)
 800d792:	681b      	ldr	r3, [r3, #0]
 800d794:	b2db      	uxtb	r3, r3
 800d796:	2b00      	cmp	r3, #0
 800d798:	d00a      	beq.n	800d7b0 <vPortEnterCritical+0x4c>
	__asm volatile
 800d79a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d79e:	f383 8811 	msr	BASEPRI, r3
 800d7a2:	f3bf 8f6f 	isb	sy
 800d7a6:	f3bf 8f4f 	dsb	sy
 800d7aa:	603b      	str	r3, [r7, #0]
}
 800d7ac:	bf00      	nop
 800d7ae:	e7fe      	b.n	800d7ae <vPortEnterCritical+0x4a>
	}
}
 800d7b0:	bf00      	nop
 800d7b2:	370c      	adds	r7, #12
 800d7b4:	46bd      	mov	sp, r7
 800d7b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7ba:	4770      	bx	lr
 800d7bc:	20000044 	.word	0x20000044
 800d7c0:	e000ed04 	.word	0xe000ed04

0800d7c4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800d7c4:	b480      	push	{r7}
 800d7c6:	b083      	sub	sp, #12
 800d7c8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800d7ca:	4b12      	ldr	r3, [pc, #72]	; (800d814 <vPortExitCritical+0x50>)
 800d7cc:	681b      	ldr	r3, [r3, #0]
 800d7ce:	2b00      	cmp	r3, #0
 800d7d0:	d10a      	bne.n	800d7e8 <vPortExitCritical+0x24>
	__asm volatile
 800d7d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7d6:	f383 8811 	msr	BASEPRI, r3
 800d7da:	f3bf 8f6f 	isb	sy
 800d7de:	f3bf 8f4f 	dsb	sy
 800d7e2:	607b      	str	r3, [r7, #4]
}
 800d7e4:	bf00      	nop
 800d7e6:	e7fe      	b.n	800d7e6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800d7e8:	4b0a      	ldr	r3, [pc, #40]	; (800d814 <vPortExitCritical+0x50>)
 800d7ea:	681b      	ldr	r3, [r3, #0]
 800d7ec:	3b01      	subs	r3, #1
 800d7ee:	4a09      	ldr	r2, [pc, #36]	; (800d814 <vPortExitCritical+0x50>)
 800d7f0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800d7f2:	4b08      	ldr	r3, [pc, #32]	; (800d814 <vPortExitCritical+0x50>)
 800d7f4:	681b      	ldr	r3, [r3, #0]
 800d7f6:	2b00      	cmp	r3, #0
 800d7f8:	d105      	bne.n	800d806 <vPortExitCritical+0x42>
 800d7fa:	2300      	movs	r3, #0
 800d7fc:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d7fe:	683b      	ldr	r3, [r7, #0]
 800d800:	f383 8811 	msr	BASEPRI, r3
}
 800d804:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800d806:	bf00      	nop
 800d808:	370c      	adds	r7, #12
 800d80a:	46bd      	mov	sp, r7
 800d80c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d810:	4770      	bx	lr
 800d812:	bf00      	nop
 800d814:	20000044 	.word	0x20000044
	...

0800d820 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800d820:	f3ef 8009 	mrs	r0, PSP
 800d824:	f3bf 8f6f 	isb	sy
 800d828:	4b15      	ldr	r3, [pc, #84]	; (800d880 <pxCurrentTCBConst>)
 800d82a:	681a      	ldr	r2, [r3, #0]
 800d82c:	f01e 0f10 	tst.w	lr, #16
 800d830:	bf08      	it	eq
 800d832:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800d836:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d83a:	6010      	str	r0, [r2, #0]
 800d83c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800d840:	f04f 0050 	mov.w	r0, #80	; 0x50
 800d844:	f380 8811 	msr	BASEPRI, r0
 800d848:	f3bf 8f4f 	dsb	sy
 800d84c:	f3bf 8f6f 	isb	sy
 800d850:	f7fe fd98 	bl	800c384 <vTaskSwitchContext>
 800d854:	f04f 0000 	mov.w	r0, #0
 800d858:	f380 8811 	msr	BASEPRI, r0
 800d85c:	bc09      	pop	{r0, r3}
 800d85e:	6819      	ldr	r1, [r3, #0]
 800d860:	6808      	ldr	r0, [r1, #0]
 800d862:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d866:	f01e 0f10 	tst.w	lr, #16
 800d86a:	bf08      	it	eq
 800d86c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800d870:	f380 8809 	msr	PSP, r0
 800d874:	f3bf 8f6f 	isb	sy
 800d878:	4770      	bx	lr
 800d87a:	bf00      	nop
 800d87c:	f3af 8000 	nop.w

0800d880 <pxCurrentTCBConst>:
 800d880:	200019c4 	.word	0x200019c4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800d884:	bf00      	nop
 800d886:	bf00      	nop

0800d888 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800d888:	b580      	push	{r7, lr}
 800d88a:	b082      	sub	sp, #8
 800d88c:	af00      	add	r7, sp, #0
	__asm volatile
 800d88e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d892:	f383 8811 	msr	BASEPRI, r3
 800d896:	f3bf 8f6f 	isb	sy
 800d89a:	f3bf 8f4f 	dsb	sy
 800d89e:	607b      	str	r3, [r7, #4]
}
 800d8a0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800d8a2:	f7fe fcb5 	bl	800c210 <xTaskIncrementTick>
 800d8a6:	4603      	mov	r3, r0
 800d8a8:	2b00      	cmp	r3, #0
 800d8aa:	d003      	beq.n	800d8b4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800d8ac:	4b06      	ldr	r3, [pc, #24]	; (800d8c8 <xPortSysTickHandler+0x40>)
 800d8ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d8b2:	601a      	str	r2, [r3, #0]
 800d8b4:	2300      	movs	r3, #0
 800d8b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d8b8:	683b      	ldr	r3, [r7, #0]
 800d8ba:	f383 8811 	msr	BASEPRI, r3
}
 800d8be:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800d8c0:	bf00      	nop
 800d8c2:	3708      	adds	r7, #8
 800d8c4:	46bd      	mov	sp, r7
 800d8c6:	bd80      	pop	{r7, pc}
 800d8c8:	e000ed04 	.word	0xe000ed04

0800d8cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800d8cc:	b480      	push	{r7}
 800d8ce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800d8d0:	4b0b      	ldr	r3, [pc, #44]	; (800d900 <vPortSetupTimerInterrupt+0x34>)
 800d8d2:	2200      	movs	r2, #0
 800d8d4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800d8d6:	4b0b      	ldr	r3, [pc, #44]	; (800d904 <vPortSetupTimerInterrupt+0x38>)
 800d8d8:	2200      	movs	r2, #0
 800d8da:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800d8dc:	4b0a      	ldr	r3, [pc, #40]	; (800d908 <vPortSetupTimerInterrupt+0x3c>)
 800d8de:	681b      	ldr	r3, [r3, #0]
 800d8e0:	4a0a      	ldr	r2, [pc, #40]	; (800d90c <vPortSetupTimerInterrupt+0x40>)
 800d8e2:	fba2 2303 	umull	r2, r3, r2, r3
 800d8e6:	099b      	lsrs	r3, r3, #6
 800d8e8:	4a09      	ldr	r2, [pc, #36]	; (800d910 <vPortSetupTimerInterrupt+0x44>)
 800d8ea:	3b01      	subs	r3, #1
 800d8ec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800d8ee:	4b04      	ldr	r3, [pc, #16]	; (800d900 <vPortSetupTimerInterrupt+0x34>)
 800d8f0:	2207      	movs	r2, #7
 800d8f2:	601a      	str	r2, [r3, #0]
}
 800d8f4:	bf00      	nop
 800d8f6:	46bd      	mov	sp, r7
 800d8f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8fc:	4770      	bx	lr
 800d8fe:	bf00      	nop
 800d900:	e000e010 	.word	0xe000e010
 800d904:	e000e018 	.word	0xe000e018
 800d908:	20000004 	.word	0x20000004
 800d90c:	10624dd3 	.word	0x10624dd3
 800d910:	e000e014 	.word	0xe000e014

0800d914 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800d914:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800d924 <vPortEnableVFP+0x10>
 800d918:	6801      	ldr	r1, [r0, #0]
 800d91a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800d91e:	6001      	str	r1, [r0, #0]
 800d920:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800d922:	bf00      	nop
 800d924:	e000ed88 	.word	0xe000ed88

0800d928 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800d928:	b480      	push	{r7}
 800d92a:	b085      	sub	sp, #20
 800d92c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800d92e:	f3ef 8305 	mrs	r3, IPSR
 800d932:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800d934:	68fb      	ldr	r3, [r7, #12]
 800d936:	2b0f      	cmp	r3, #15
 800d938:	d914      	bls.n	800d964 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800d93a:	4a17      	ldr	r2, [pc, #92]	; (800d998 <vPortValidateInterruptPriority+0x70>)
 800d93c:	68fb      	ldr	r3, [r7, #12]
 800d93e:	4413      	add	r3, r2
 800d940:	781b      	ldrb	r3, [r3, #0]
 800d942:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800d944:	4b15      	ldr	r3, [pc, #84]	; (800d99c <vPortValidateInterruptPriority+0x74>)
 800d946:	781b      	ldrb	r3, [r3, #0]
 800d948:	7afa      	ldrb	r2, [r7, #11]
 800d94a:	429a      	cmp	r2, r3
 800d94c:	d20a      	bcs.n	800d964 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800d94e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d952:	f383 8811 	msr	BASEPRI, r3
 800d956:	f3bf 8f6f 	isb	sy
 800d95a:	f3bf 8f4f 	dsb	sy
 800d95e:	607b      	str	r3, [r7, #4]
}
 800d960:	bf00      	nop
 800d962:	e7fe      	b.n	800d962 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800d964:	4b0e      	ldr	r3, [pc, #56]	; (800d9a0 <vPortValidateInterruptPriority+0x78>)
 800d966:	681b      	ldr	r3, [r3, #0]
 800d968:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800d96c:	4b0d      	ldr	r3, [pc, #52]	; (800d9a4 <vPortValidateInterruptPriority+0x7c>)
 800d96e:	681b      	ldr	r3, [r3, #0]
 800d970:	429a      	cmp	r2, r3
 800d972:	d90a      	bls.n	800d98a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800d974:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d978:	f383 8811 	msr	BASEPRI, r3
 800d97c:	f3bf 8f6f 	isb	sy
 800d980:	f3bf 8f4f 	dsb	sy
 800d984:	603b      	str	r3, [r7, #0]
}
 800d986:	bf00      	nop
 800d988:	e7fe      	b.n	800d988 <vPortValidateInterruptPriority+0x60>
	}
 800d98a:	bf00      	nop
 800d98c:	3714      	adds	r7, #20
 800d98e:	46bd      	mov	sp, r7
 800d990:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d994:	4770      	bx	lr
 800d996:	bf00      	nop
 800d998:	e000e3f0 	.word	0xe000e3f0
 800d99c:	20001ff8 	.word	0x20001ff8
 800d9a0:	e000ed0c 	.word	0xe000ed0c
 800d9a4:	20001ffc 	.word	0x20001ffc

0800d9a8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800d9a8:	b580      	push	{r7, lr}
 800d9aa:	b08a      	sub	sp, #40	; 0x28
 800d9ac:	af00      	add	r7, sp, #0
 800d9ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800d9b0:	2300      	movs	r3, #0
 800d9b2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800d9b4:	f7fe fb70 	bl	800c098 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800d9b8:	4b5b      	ldr	r3, [pc, #364]	; (800db28 <pvPortMalloc+0x180>)
 800d9ba:	681b      	ldr	r3, [r3, #0]
 800d9bc:	2b00      	cmp	r3, #0
 800d9be:	d101      	bne.n	800d9c4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800d9c0:	f000 f920 	bl	800dc04 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800d9c4:	4b59      	ldr	r3, [pc, #356]	; (800db2c <pvPortMalloc+0x184>)
 800d9c6:	681a      	ldr	r2, [r3, #0]
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	4013      	ands	r3, r2
 800d9cc:	2b00      	cmp	r3, #0
 800d9ce:	f040 8093 	bne.w	800daf8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800d9d2:	687b      	ldr	r3, [r7, #4]
 800d9d4:	2b00      	cmp	r3, #0
 800d9d6:	d01d      	beq.n	800da14 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800d9d8:	2208      	movs	r2, #8
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	4413      	add	r3, r2
 800d9de:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	f003 0307 	and.w	r3, r3, #7
 800d9e6:	2b00      	cmp	r3, #0
 800d9e8:	d014      	beq.n	800da14 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	f023 0307 	bic.w	r3, r3, #7
 800d9f0:	3308      	adds	r3, #8
 800d9f2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	f003 0307 	and.w	r3, r3, #7
 800d9fa:	2b00      	cmp	r3, #0
 800d9fc:	d00a      	beq.n	800da14 <pvPortMalloc+0x6c>
	__asm volatile
 800d9fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da02:	f383 8811 	msr	BASEPRI, r3
 800da06:	f3bf 8f6f 	isb	sy
 800da0a:	f3bf 8f4f 	dsb	sy
 800da0e:	617b      	str	r3, [r7, #20]
}
 800da10:	bf00      	nop
 800da12:	e7fe      	b.n	800da12 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	2b00      	cmp	r3, #0
 800da18:	d06e      	beq.n	800daf8 <pvPortMalloc+0x150>
 800da1a:	4b45      	ldr	r3, [pc, #276]	; (800db30 <pvPortMalloc+0x188>)
 800da1c:	681b      	ldr	r3, [r3, #0]
 800da1e:	687a      	ldr	r2, [r7, #4]
 800da20:	429a      	cmp	r2, r3
 800da22:	d869      	bhi.n	800daf8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800da24:	4b43      	ldr	r3, [pc, #268]	; (800db34 <pvPortMalloc+0x18c>)
 800da26:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800da28:	4b42      	ldr	r3, [pc, #264]	; (800db34 <pvPortMalloc+0x18c>)
 800da2a:	681b      	ldr	r3, [r3, #0]
 800da2c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800da2e:	e004      	b.n	800da3a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800da30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da32:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800da34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da36:	681b      	ldr	r3, [r3, #0]
 800da38:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800da3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da3c:	685b      	ldr	r3, [r3, #4]
 800da3e:	687a      	ldr	r2, [r7, #4]
 800da40:	429a      	cmp	r2, r3
 800da42:	d903      	bls.n	800da4c <pvPortMalloc+0xa4>
 800da44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da46:	681b      	ldr	r3, [r3, #0]
 800da48:	2b00      	cmp	r3, #0
 800da4a:	d1f1      	bne.n	800da30 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800da4c:	4b36      	ldr	r3, [pc, #216]	; (800db28 <pvPortMalloc+0x180>)
 800da4e:	681b      	ldr	r3, [r3, #0]
 800da50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800da52:	429a      	cmp	r2, r3
 800da54:	d050      	beq.n	800daf8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800da56:	6a3b      	ldr	r3, [r7, #32]
 800da58:	681b      	ldr	r3, [r3, #0]
 800da5a:	2208      	movs	r2, #8
 800da5c:	4413      	add	r3, r2
 800da5e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800da60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da62:	681a      	ldr	r2, [r3, #0]
 800da64:	6a3b      	ldr	r3, [r7, #32]
 800da66:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800da68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da6a:	685a      	ldr	r2, [r3, #4]
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	1ad2      	subs	r2, r2, r3
 800da70:	2308      	movs	r3, #8
 800da72:	005b      	lsls	r3, r3, #1
 800da74:	429a      	cmp	r2, r3
 800da76:	d91f      	bls.n	800dab8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800da78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800da7a:	687b      	ldr	r3, [r7, #4]
 800da7c:	4413      	add	r3, r2
 800da7e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800da80:	69bb      	ldr	r3, [r7, #24]
 800da82:	f003 0307 	and.w	r3, r3, #7
 800da86:	2b00      	cmp	r3, #0
 800da88:	d00a      	beq.n	800daa0 <pvPortMalloc+0xf8>
	__asm volatile
 800da8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da8e:	f383 8811 	msr	BASEPRI, r3
 800da92:	f3bf 8f6f 	isb	sy
 800da96:	f3bf 8f4f 	dsb	sy
 800da9a:	613b      	str	r3, [r7, #16]
}
 800da9c:	bf00      	nop
 800da9e:	e7fe      	b.n	800da9e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800daa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800daa2:	685a      	ldr	r2, [r3, #4]
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	1ad2      	subs	r2, r2, r3
 800daa8:	69bb      	ldr	r3, [r7, #24]
 800daaa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800daac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800daae:	687a      	ldr	r2, [r7, #4]
 800dab0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800dab2:	69b8      	ldr	r0, [r7, #24]
 800dab4:	f000 f908 	bl	800dcc8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800dab8:	4b1d      	ldr	r3, [pc, #116]	; (800db30 <pvPortMalloc+0x188>)
 800daba:	681a      	ldr	r2, [r3, #0]
 800dabc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dabe:	685b      	ldr	r3, [r3, #4]
 800dac0:	1ad3      	subs	r3, r2, r3
 800dac2:	4a1b      	ldr	r2, [pc, #108]	; (800db30 <pvPortMalloc+0x188>)
 800dac4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800dac6:	4b1a      	ldr	r3, [pc, #104]	; (800db30 <pvPortMalloc+0x188>)
 800dac8:	681a      	ldr	r2, [r3, #0]
 800daca:	4b1b      	ldr	r3, [pc, #108]	; (800db38 <pvPortMalloc+0x190>)
 800dacc:	681b      	ldr	r3, [r3, #0]
 800dace:	429a      	cmp	r2, r3
 800dad0:	d203      	bcs.n	800dada <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800dad2:	4b17      	ldr	r3, [pc, #92]	; (800db30 <pvPortMalloc+0x188>)
 800dad4:	681b      	ldr	r3, [r3, #0]
 800dad6:	4a18      	ldr	r2, [pc, #96]	; (800db38 <pvPortMalloc+0x190>)
 800dad8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800dada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dadc:	685a      	ldr	r2, [r3, #4]
 800dade:	4b13      	ldr	r3, [pc, #76]	; (800db2c <pvPortMalloc+0x184>)
 800dae0:	681b      	ldr	r3, [r3, #0]
 800dae2:	431a      	orrs	r2, r3
 800dae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dae6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800dae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800daea:	2200      	movs	r2, #0
 800daec:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800daee:	4b13      	ldr	r3, [pc, #76]	; (800db3c <pvPortMalloc+0x194>)
 800daf0:	681b      	ldr	r3, [r3, #0]
 800daf2:	3301      	adds	r3, #1
 800daf4:	4a11      	ldr	r2, [pc, #68]	; (800db3c <pvPortMalloc+0x194>)
 800daf6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800daf8:	f7fe fadc 	bl	800c0b4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800dafc:	69fb      	ldr	r3, [r7, #28]
 800dafe:	f003 0307 	and.w	r3, r3, #7
 800db02:	2b00      	cmp	r3, #0
 800db04:	d00a      	beq.n	800db1c <pvPortMalloc+0x174>
	__asm volatile
 800db06:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db0a:	f383 8811 	msr	BASEPRI, r3
 800db0e:	f3bf 8f6f 	isb	sy
 800db12:	f3bf 8f4f 	dsb	sy
 800db16:	60fb      	str	r3, [r7, #12]
}
 800db18:	bf00      	nop
 800db1a:	e7fe      	b.n	800db1a <pvPortMalloc+0x172>
	return pvReturn;
 800db1c:	69fb      	ldr	r3, [r7, #28]
}
 800db1e:	4618      	mov	r0, r3
 800db20:	3728      	adds	r7, #40	; 0x28
 800db22:	46bd      	mov	sp, r7
 800db24:	bd80      	pop	{r7, pc}
 800db26:	bf00      	nop
 800db28:	20003d54 	.word	0x20003d54
 800db2c:	20003d68 	.word	0x20003d68
 800db30:	20003d58 	.word	0x20003d58
 800db34:	20003d4c 	.word	0x20003d4c
 800db38:	20003d5c 	.word	0x20003d5c
 800db3c:	20003d60 	.word	0x20003d60

0800db40 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800db40:	b580      	push	{r7, lr}
 800db42:	b086      	sub	sp, #24
 800db44:	af00      	add	r7, sp, #0
 800db46:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	2b00      	cmp	r3, #0
 800db50:	d04d      	beq.n	800dbee <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800db52:	2308      	movs	r3, #8
 800db54:	425b      	negs	r3, r3
 800db56:	697a      	ldr	r2, [r7, #20]
 800db58:	4413      	add	r3, r2
 800db5a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800db5c:	697b      	ldr	r3, [r7, #20]
 800db5e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800db60:	693b      	ldr	r3, [r7, #16]
 800db62:	685a      	ldr	r2, [r3, #4]
 800db64:	4b24      	ldr	r3, [pc, #144]	; (800dbf8 <vPortFree+0xb8>)
 800db66:	681b      	ldr	r3, [r3, #0]
 800db68:	4013      	ands	r3, r2
 800db6a:	2b00      	cmp	r3, #0
 800db6c:	d10a      	bne.n	800db84 <vPortFree+0x44>
	__asm volatile
 800db6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db72:	f383 8811 	msr	BASEPRI, r3
 800db76:	f3bf 8f6f 	isb	sy
 800db7a:	f3bf 8f4f 	dsb	sy
 800db7e:	60fb      	str	r3, [r7, #12]
}
 800db80:	bf00      	nop
 800db82:	e7fe      	b.n	800db82 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800db84:	693b      	ldr	r3, [r7, #16]
 800db86:	681b      	ldr	r3, [r3, #0]
 800db88:	2b00      	cmp	r3, #0
 800db8a:	d00a      	beq.n	800dba2 <vPortFree+0x62>
	__asm volatile
 800db8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db90:	f383 8811 	msr	BASEPRI, r3
 800db94:	f3bf 8f6f 	isb	sy
 800db98:	f3bf 8f4f 	dsb	sy
 800db9c:	60bb      	str	r3, [r7, #8]
}
 800db9e:	bf00      	nop
 800dba0:	e7fe      	b.n	800dba0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800dba2:	693b      	ldr	r3, [r7, #16]
 800dba4:	685a      	ldr	r2, [r3, #4]
 800dba6:	4b14      	ldr	r3, [pc, #80]	; (800dbf8 <vPortFree+0xb8>)
 800dba8:	681b      	ldr	r3, [r3, #0]
 800dbaa:	4013      	ands	r3, r2
 800dbac:	2b00      	cmp	r3, #0
 800dbae:	d01e      	beq.n	800dbee <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800dbb0:	693b      	ldr	r3, [r7, #16]
 800dbb2:	681b      	ldr	r3, [r3, #0]
 800dbb4:	2b00      	cmp	r3, #0
 800dbb6:	d11a      	bne.n	800dbee <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800dbb8:	693b      	ldr	r3, [r7, #16]
 800dbba:	685a      	ldr	r2, [r3, #4]
 800dbbc:	4b0e      	ldr	r3, [pc, #56]	; (800dbf8 <vPortFree+0xb8>)
 800dbbe:	681b      	ldr	r3, [r3, #0]
 800dbc0:	43db      	mvns	r3, r3
 800dbc2:	401a      	ands	r2, r3
 800dbc4:	693b      	ldr	r3, [r7, #16]
 800dbc6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800dbc8:	f7fe fa66 	bl	800c098 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800dbcc:	693b      	ldr	r3, [r7, #16]
 800dbce:	685a      	ldr	r2, [r3, #4]
 800dbd0:	4b0a      	ldr	r3, [pc, #40]	; (800dbfc <vPortFree+0xbc>)
 800dbd2:	681b      	ldr	r3, [r3, #0]
 800dbd4:	4413      	add	r3, r2
 800dbd6:	4a09      	ldr	r2, [pc, #36]	; (800dbfc <vPortFree+0xbc>)
 800dbd8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800dbda:	6938      	ldr	r0, [r7, #16]
 800dbdc:	f000 f874 	bl	800dcc8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800dbe0:	4b07      	ldr	r3, [pc, #28]	; (800dc00 <vPortFree+0xc0>)
 800dbe2:	681b      	ldr	r3, [r3, #0]
 800dbe4:	3301      	adds	r3, #1
 800dbe6:	4a06      	ldr	r2, [pc, #24]	; (800dc00 <vPortFree+0xc0>)
 800dbe8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800dbea:	f7fe fa63 	bl	800c0b4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800dbee:	bf00      	nop
 800dbf0:	3718      	adds	r7, #24
 800dbf2:	46bd      	mov	sp, r7
 800dbf4:	bd80      	pop	{r7, pc}
 800dbf6:	bf00      	nop
 800dbf8:	20003d68 	.word	0x20003d68
 800dbfc:	20003d58 	.word	0x20003d58
 800dc00:	20003d64 	.word	0x20003d64

0800dc04 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800dc04:	b480      	push	{r7}
 800dc06:	b085      	sub	sp, #20
 800dc08:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800dc0a:	f641 534c 	movw	r3, #7500	; 0x1d4c
 800dc0e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800dc10:	4b27      	ldr	r3, [pc, #156]	; (800dcb0 <prvHeapInit+0xac>)
 800dc12:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800dc14:	68fb      	ldr	r3, [r7, #12]
 800dc16:	f003 0307 	and.w	r3, r3, #7
 800dc1a:	2b00      	cmp	r3, #0
 800dc1c:	d00c      	beq.n	800dc38 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800dc1e:	68fb      	ldr	r3, [r7, #12]
 800dc20:	3307      	adds	r3, #7
 800dc22:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800dc24:	68fb      	ldr	r3, [r7, #12]
 800dc26:	f023 0307 	bic.w	r3, r3, #7
 800dc2a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800dc2c:	68ba      	ldr	r2, [r7, #8]
 800dc2e:	68fb      	ldr	r3, [r7, #12]
 800dc30:	1ad3      	subs	r3, r2, r3
 800dc32:	4a1f      	ldr	r2, [pc, #124]	; (800dcb0 <prvHeapInit+0xac>)
 800dc34:	4413      	add	r3, r2
 800dc36:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800dc38:	68fb      	ldr	r3, [r7, #12]
 800dc3a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800dc3c:	4a1d      	ldr	r2, [pc, #116]	; (800dcb4 <prvHeapInit+0xb0>)
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800dc42:	4b1c      	ldr	r3, [pc, #112]	; (800dcb4 <prvHeapInit+0xb0>)
 800dc44:	2200      	movs	r2, #0
 800dc46:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	68ba      	ldr	r2, [r7, #8]
 800dc4c:	4413      	add	r3, r2
 800dc4e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800dc50:	2208      	movs	r2, #8
 800dc52:	68fb      	ldr	r3, [r7, #12]
 800dc54:	1a9b      	subs	r3, r3, r2
 800dc56:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800dc58:	68fb      	ldr	r3, [r7, #12]
 800dc5a:	f023 0307 	bic.w	r3, r3, #7
 800dc5e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800dc60:	68fb      	ldr	r3, [r7, #12]
 800dc62:	4a15      	ldr	r2, [pc, #84]	; (800dcb8 <prvHeapInit+0xb4>)
 800dc64:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800dc66:	4b14      	ldr	r3, [pc, #80]	; (800dcb8 <prvHeapInit+0xb4>)
 800dc68:	681b      	ldr	r3, [r3, #0]
 800dc6a:	2200      	movs	r2, #0
 800dc6c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800dc6e:	4b12      	ldr	r3, [pc, #72]	; (800dcb8 <prvHeapInit+0xb4>)
 800dc70:	681b      	ldr	r3, [r3, #0]
 800dc72:	2200      	movs	r2, #0
 800dc74:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800dc76:	687b      	ldr	r3, [r7, #4]
 800dc78:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800dc7a:	683b      	ldr	r3, [r7, #0]
 800dc7c:	68fa      	ldr	r2, [r7, #12]
 800dc7e:	1ad2      	subs	r2, r2, r3
 800dc80:	683b      	ldr	r3, [r7, #0]
 800dc82:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800dc84:	4b0c      	ldr	r3, [pc, #48]	; (800dcb8 <prvHeapInit+0xb4>)
 800dc86:	681a      	ldr	r2, [r3, #0]
 800dc88:	683b      	ldr	r3, [r7, #0]
 800dc8a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800dc8c:	683b      	ldr	r3, [r7, #0]
 800dc8e:	685b      	ldr	r3, [r3, #4]
 800dc90:	4a0a      	ldr	r2, [pc, #40]	; (800dcbc <prvHeapInit+0xb8>)
 800dc92:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800dc94:	683b      	ldr	r3, [r7, #0]
 800dc96:	685b      	ldr	r3, [r3, #4]
 800dc98:	4a09      	ldr	r2, [pc, #36]	; (800dcc0 <prvHeapInit+0xbc>)
 800dc9a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800dc9c:	4b09      	ldr	r3, [pc, #36]	; (800dcc4 <prvHeapInit+0xc0>)
 800dc9e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800dca2:	601a      	str	r2, [r3, #0]
}
 800dca4:	bf00      	nop
 800dca6:	3714      	adds	r7, #20
 800dca8:	46bd      	mov	sp, r7
 800dcaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcae:	4770      	bx	lr
 800dcb0:	20002000 	.word	0x20002000
 800dcb4:	20003d4c 	.word	0x20003d4c
 800dcb8:	20003d54 	.word	0x20003d54
 800dcbc:	20003d5c 	.word	0x20003d5c
 800dcc0:	20003d58 	.word	0x20003d58
 800dcc4:	20003d68 	.word	0x20003d68

0800dcc8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800dcc8:	b480      	push	{r7}
 800dcca:	b085      	sub	sp, #20
 800dccc:	af00      	add	r7, sp, #0
 800dcce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800dcd0:	4b28      	ldr	r3, [pc, #160]	; (800dd74 <prvInsertBlockIntoFreeList+0xac>)
 800dcd2:	60fb      	str	r3, [r7, #12]
 800dcd4:	e002      	b.n	800dcdc <prvInsertBlockIntoFreeList+0x14>
 800dcd6:	68fb      	ldr	r3, [r7, #12]
 800dcd8:	681b      	ldr	r3, [r3, #0]
 800dcda:	60fb      	str	r3, [r7, #12]
 800dcdc:	68fb      	ldr	r3, [r7, #12]
 800dcde:	681b      	ldr	r3, [r3, #0]
 800dce0:	687a      	ldr	r2, [r7, #4]
 800dce2:	429a      	cmp	r2, r3
 800dce4:	d8f7      	bhi.n	800dcd6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800dce6:	68fb      	ldr	r3, [r7, #12]
 800dce8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800dcea:	68fb      	ldr	r3, [r7, #12]
 800dcec:	685b      	ldr	r3, [r3, #4]
 800dcee:	68ba      	ldr	r2, [r7, #8]
 800dcf0:	4413      	add	r3, r2
 800dcf2:	687a      	ldr	r2, [r7, #4]
 800dcf4:	429a      	cmp	r2, r3
 800dcf6:	d108      	bne.n	800dd0a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800dcf8:	68fb      	ldr	r3, [r7, #12]
 800dcfa:	685a      	ldr	r2, [r3, #4]
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	685b      	ldr	r3, [r3, #4]
 800dd00:	441a      	add	r2, r3
 800dd02:	68fb      	ldr	r3, [r7, #12]
 800dd04:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800dd06:	68fb      	ldr	r3, [r7, #12]
 800dd08:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800dd0a:	687b      	ldr	r3, [r7, #4]
 800dd0c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	685b      	ldr	r3, [r3, #4]
 800dd12:	68ba      	ldr	r2, [r7, #8]
 800dd14:	441a      	add	r2, r3
 800dd16:	68fb      	ldr	r3, [r7, #12]
 800dd18:	681b      	ldr	r3, [r3, #0]
 800dd1a:	429a      	cmp	r2, r3
 800dd1c:	d118      	bne.n	800dd50 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800dd1e:	68fb      	ldr	r3, [r7, #12]
 800dd20:	681a      	ldr	r2, [r3, #0]
 800dd22:	4b15      	ldr	r3, [pc, #84]	; (800dd78 <prvInsertBlockIntoFreeList+0xb0>)
 800dd24:	681b      	ldr	r3, [r3, #0]
 800dd26:	429a      	cmp	r2, r3
 800dd28:	d00d      	beq.n	800dd46 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	685a      	ldr	r2, [r3, #4]
 800dd2e:	68fb      	ldr	r3, [r7, #12]
 800dd30:	681b      	ldr	r3, [r3, #0]
 800dd32:	685b      	ldr	r3, [r3, #4]
 800dd34:	441a      	add	r2, r3
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800dd3a:	68fb      	ldr	r3, [r7, #12]
 800dd3c:	681b      	ldr	r3, [r3, #0]
 800dd3e:	681a      	ldr	r2, [r3, #0]
 800dd40:	687b      	ldr	r3, [r7, #4]
 800dd42:	601a      	str	r2, [r3, #0]
 800dd44:	e008      	b.n	800dd58 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800dd46:	4b0c      	ldr	r3, [pc, #48]	; (800dd78 <prvInsertBlockIntoFreeList+0xb0>)
 800dd48:	681a      	ldr	r2, [r3, #0]
 800dd4a:	687b      	ldr	r3, [r7, #4]
 800dd4c:	601a      	str	r2, [r3, #0]
 800dd4e:	e003      	b.n	800dd58 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800dd50:	68fb      	ldr	r3, [r7, #12]
 800dd52:	681a      	ldr	r2, [r3, #0]
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800dd58:	68fa      	ldr	r2, [r7, #12]
 800dd5a:	687b      	ldr	r3, [r7, #4]
 800dd5c:	429a      	cmp	r2, r3
 800dd5e:	d002      	beq.n	800dd66 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800dd60:	68fb      	ldr	r3, [r7, #12]
 800dd62:	687a      	ldr	r2, [r7, #4]
 800dd64:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800dd66:	bf00      	nop
 800dd68:	3714      	adds	r7, #20
 800dd6a:	46bd      	mov	sp, r7
 800dd6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd70:	4770      	bx	lr
 800dd72:	bf00      	nop
 800dd74:	20003d4c 	.word	0x20003d4c
 800dd78:	20003d54 	.word	0x20003d54

0800dd7c <__errno>:
 800dd7c:	4b01      	ldr	r3, [pc, #4]	; (800dd84 <__errno+0x8>)
 800dd7e:	6818      	ldr	r0, [r3, #0]
 800dd80:	4770      	bx	lr
 800dd82:	bf00      	nop
 800dd84:	20000048 	.word	0x20000048

0800dd88 <std>:
 800dd88:	2300      	movs	r3, #0
 800dd8a:	b510      	push	{r4, lr}
 800dd8c:	4604      	mov	r4, r0
 800dd8e:	e9c0 3300 	strd	r3, r3, [r0]
 800dd92:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800dd96:	6083      	str	r3, [r0, #8]
 800dd98:	8181      	strh	r1, [r0, #12]
 800dd9a:	6643      	str	r3, [r0, #100]	; 0x64
 800dd9c:	81c2      	strh	r2, [r0, #14]
 800dd9e:	6183      	str	r3, [r0, #24]
 800dda0:	4619      	mov	r1, r3
 800dda2:	2208      	movs	r2, #8
 800dda4:	305c      	adds	r0, #92	; 0x5c
 800dda6:	f000 f91a 	bl	800dfde <memset>
 800ddaa:	4b05      	ldr	r3, [pc, #20]	; (800ddc0 <std+0x38>)
 800ddac:	6263      	str	r3, [r4, #36]	; 0x24
 800ddae:	4b05      	ldr	r3, [pc, #20]	; (800ddc4 <std+0x3c>)
 800ddb0:	62a3      	str	r3, [r4, #40]	; 0x28
 800ddb2:	4b05      	ldr	r3, [pc, #20]	; (800ddc8 <std+0x40>)
 800ddb4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ddb6:	4b05      	ldr	r3, [pc, #20]	; (800ddcc <std+0x44>)
 800ddb8:	6224      	str	r4, [r4, #32]
 800ddba:	6323      	str	r3, [r4, #48]	; 0x30
 800ddbc:	bd10      	pop	{r4, pc}
 800ddbe:	bf00      	nop
 800ddc0:	0800e3d1 	.word	0x0800e3d1
 800ddc4:	0800e3f3 	.word	0x0800e3f3
 800ddc8:	0800e42b 	.word	0x0800e42b
 800ddcc:	0800e44f 	.word	0x0800e44f

0800ddd0 <_cleanup_r>:
 800ddd0:	4901      	ldr	r1, [pc, #4]	; (800ddd8 <_cleanup_r+0x8>)
 800ddd2:	f000 b8af 	b.w	800df34 <_fwalk_reent>
 800ddd6:	bf00      	nop
 800ddd8:	0800e86d 	.word	0x0800e86d

0800dddc <__sfmoreglue>:
 800dddc:	b570      	push	{r4, r5, r6, lr}
 800ddde:	2268      	movs	r2, #104	; 0x68
 800dde0:	1e4d      	subs	r5, r1, #1
 800dde2:	4355      	muls	r5, r2
 800dde4:	460e      	mov	r6, r1
 800dde6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ddea:	f000 f921 	bl	800e030 <_malloc_r>
 800ddee:	4604      	mov	r4, r0
 800ddf0:	b140      	cbz	r0, 800de04 <__sfmoreglue+0x28>
 800ddf2:	2100      	movs	r1, #0
 800ddf4:	e9c0 1600 	strd	r1, r6, [r0]
 800ddf8:	300c      	adds	r0, #12
 800ddfa:	60a0      	str	r0, [r4, #8]
 800ddfc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800de00:	f000 f8ed 	bl	800dfde <memset>
 800de04:	4620      	mov	r0, r4
 800de06:	bd70      	pop	{r4, r5, r6, pc}

0800de08 <__sfp_lock_acquire>:
 800de08:	4801      	ldr	r0, [pc, #4]	; (800de10 <__sfp_lock_acquire+0x8>)
 800de0a:	f000 b8d8 	b.w	800dfbe <__retarget_lock_acquire_recursive>
 800de0e:	bf00      	nop
 800de10:	20003d6d 	.word	0x20003d6d

0800de14 <__sfp_lock_release>:
 800de14:	4801      	ldr	r0, [pc, #4]	; (800de1c <__sfp_lock_release+0x8>)
 800de16:	f000 b8d3 	b.w	800dfc0 <__retarget_lock_release_recursive>
 800de1a:	bf00      	nop
 800de1c:	20003d6d 	.word	0x20003d6d

0800de20 <__sinit_lock_acquire>:
 800de20:	4801      	ldr	r0, [pc, #4]	; (800de28 <__sinit_lock_acquire+0x8>)
 800de22:	f000 b8cc 	b.w	800dfbe <__retarget_lock_acquire_recursive>
 800de26:	bf00      	nop
 800de28:	20003d6e 	.word	0x20003d6e

0800de2c <__sinit_lock_release>:
 800de2c:	4801      	ldr	r0, [pc, #4]	; (800de34 <__sinit_lock_release+0x8>)
 800de2e:	f000 b8c7 	b.w	800dfc0 <__retarget_lock_release_recursive>
 800de32:	bf00      	nop
 800de34:	20003d6e 	.word	0x20003d6e

0800de38 <__sinit>:
 800de38:	b510      	push	{r4, lr}
 800de3a:	4604      	mov	r4, r0
 800de3c:	f7ff fff0 	bl	800de20 <__sinit_lock_acquire>
 800de40:	69a3      	ldr	r3, [r4, #24]
 800de42:	b11b      	cbz	r3, 800de4c <__sinit+0x14>
 800de44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800de48:	f7ff bff0 	b.w	800de2c <__sinit_lock_release>
 800de4c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800de50:	6523      	str	r3, [r4, #80]	; 0x50
 800de52:	4b13      	ldr	r3, [pc, #76]	; (800dea0 <__sinit+0x68>)
 800de54:	4a13      	ldr	r2, [pc, #76]	; (800dea4 <__sinit+0x6c>)
 800de56:	681b      	ldr	r3, [r3, #0]
 800de58:	62a2      	str	r2, [r4, #40]	; 0x28
 800de5a:	42a3      	cmp	r3, r4
 800de5c:	bf04      	itt	eq
 800de5e:	2301      	moveq	r3, #1
 800de60:	61a3      	streq	r3, [r4, #24]
 800de62:	4620      	mov	r0, r4
 800de64:	f000 f820 	bl	800dea8 <__sfp>
 800de68:	6060      	str	r0, [r4, #4]
 800de6a:	4620      	mov	r0, r4
 800de6c:	f000 f81c 	bl	800dea8 <__sfp>
 800de70:	60a0      	str	r0, [r4, #8]
 800de72:	4620      	mov	r0, r4
 800de74:	f000 f818 	bl	800dea8 <__sfp>
 800de78:	2200      	movs	r2, #0
 800de7a:	60e0      	str	r0, [r4, #12]
 800de7c:	2104      	movs	r1, #4
 800de7e:	6860      	ldr	r0, [r4, #4]
 800de80:	f7ff ff82 	bl	800dd88 <std>
 800de84:	68a0      	ldr	r0, [r4, #8]
 800de86:	2201      	movs	r2, #1
 800de88:	2109      	movs	r1, #9
 800de8a:	f7ff ff7d 	bl	800dd88 <std>
 800de8e:	68e0      	ldr	r0, [r4, #12]
 800de90:	2202      	movs	r2, #2
 800de92:	2112      	movs	r1, #18
 800de94:	f7ff ff78 	bl	800dd88 <std>
 800de98:	2301      	movs	r3, #1
 800de9a:	61a3      	str	r3, [r4, #24]
 800de9c:	e7d2      	b.n	800de44 <__sinit+0xc>
 800de9e:	bf00      	nop
 800dea0:	080101b8 	.word	0x080101b8
 800dea4:	0800ddd1 	.word	0x0800ddd1

0800dea8 <__sfp>:
 800dea8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800deaa:	4607      	mov	r7, r0
 800deac:	f7ff ffac 	bl	800de08 <__sfp_lock_acquire>
 800deb0:	4b1e      	ldr	r3, [pc, #120]	; (800df2c <__sfp+0x84>)
 800deb2:	681e      	ldr	r6, [r3, #0]
 800deb4:	69b3      	ldr	r3, [r6, #24]
 800deb6:	b913      	cbnz	r3, 800debe <__sfp+0x16>
 800deb8:	4630      	mov	r0, r6
 800deba:	f7ff ffbd 	bl	800de38 <__sinit>
 800debe:	3648      	adds	r6, #72	; 0x48
 800dec0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800dec4:	3b01      	subs	r3, #1
 800dec6:	d503      	bpl.n	800ded0 <__sfp+0x28>
 800dec8:	6833      	ldr	r3, [r6, #0]
 800deca:	b30b      	cbz	r3, 800df10 <__sfp+0x68>
 800decc:	6836      	ldr	r6, [r6, #0]
 800dece:	e7f7      	b.n	800dec0 <__sfp+0x18>
 800ded0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ded4:	b9d5      	cbnz	r5, 800df0c <__sfp+0x64>
 800ded6:	4b16      	ldr	r3, [pc, #88]	; (800df30 <__sfp+0x88>)
 800ded8:	60e3      	str	r3, [r4, #12]
 800deda:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800dede:	6665      	str	r5, [r4, #100]	; 0x64
 800dee0:	f000 f86c 	bl	800dfbc <__retarget_lock_init_recursive>
 800dee4:	f7ff ff96 	bl	800de14 <__sfp_lock_release>
 800dee8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800deec:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800def0:	6025      	str	r5, [r4, #0]
 800def2:	61a5      	str	r5, [r4, #24]
 800def4:	2208      	movs	r2, #8
 800def6:	4629      	mov	r1, r5
 800def8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800defc:	f000 f86f 	bl	800dfde <memset>
 800df00:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800df04:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800df08:	4620      	mov	r0, r4
 800df0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800df0c:	3468      	adds	r4, #104	; 0x68
 800df0e:	e7d9      	b.n	800dec4 <__sfp+0x1c>
 800df10:	2104      	movs	r1, #4
 800df12:	4638      	mov	r0, r7
 800df14:	f7ff ff62 	bl	800dddc <__sfmoreglue>
 800df18:	4604      	mov	r4, r0
 800df1a:	6030      	str	r0, [r6, #0]
 800df1c:	2800      	cmp	r0, #0
 800df1e:	d1d5      	bne.n	800decc <__sfp+0x24>
 800df20:	f7ff ff78 	bl	800de14 <__sfp_lock_release>
 800df24:	230c      	movs	r3, #12
 800df26:	603b      	str	r3, [r7, #0]
 800df28:	e7ee      	b.n	800df08 <__sfp+0x60>
 800df2a:	bf00      	nop
 800df2c:	080101b8 	.word	0x080101b8
 800df30:	ffff0001 	.word	0xffff0001

0800df34 <_fwalk_reent>:
 800df34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800df38:	4606      	mov	r6, r0
 800df3a:	4688      	mov	r8, r1
 800df3c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800df40:	2700      	movs	r7, #0
 800df42:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800df46:	f1b9 0901 	subs.w	r9, r9, #1
 800df4a:	d505      	bpl.n	800df58 <_fwalk_reent+0x24>
 800df4c:	6824      	ldr	r4, [r4, #0]
 800df4e:	2c00      	cmp	r4, #0
 800df50:	d1f7      	bne.n	800df42 <_fwalk_reent+0xe>
 800df52:	4638      	mov	r0, r7
 800df54:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800df58:	89ab      	ldrh	r3, [r5, #12]
 800df5a:	2b01      	cmp	r3, #1
 800df5c:	d907      	bls.n	800df6e <_fwalk_reent+0x3a>
 800df5e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800df62:	3301      	adds	r3, #1
 800df64:	d003      	beq.n	800df6e <_fwalk_reent+0x3a>
 800df66:	4629      	mov	r1, r5
 800df68:	4630      	mov	r0, r6
 800df6a:	47c0      	blx	r8
 800df6c:	4307      	orrs	r7, r0
 800df6e:	3568      	adds	r5, #104	; 0x68
 800df70:	e7e9      	b.n	800df46 <_fwalk_reent+0x12>
	...

0800df74 <__libc_init_array>:
 800df74:	b570      	push	{r4, r5, r6, lr}
 800df76:	4d0d      	ldr	r5, [pc, #52]	; (800dfac <__libc_init_array+0x38>)
 800df78:	4c0d      	ldr	r4, [pc, #52]	; (800dfb0 <__libc_init_array+0x3c>)
 800df7a:	1b64      	subs	r4, r4, r5
 800df7c:	10a4      	asrs	r4, r4, #2
 800df7e:	2600      	movs	r6, #0
 800df80:	42a6      	cmp	r6, r4
 800df82:	d109      	bne.n	800df98 <__libc_init_array+0x24>
 800df84:	4d0b      	ldr	r5, [pc, #44]	; (800dfb4 <__libc_init_array+0x40>)
 800df86:	4c0c      	ldr	r4, [pc, #48]	; (800dfb8 <__libc_init_array+0x44>)
 800df88:	f001 fab2 	bl	800f4f0 <_init>
 800df8c:	1b64      	subs	r4, r4, r5
 800df8e:	10a4      	asrs	r4, r4, #2
 800df90:	2600      	movs	r6, #0
 800df92:	42a6      	cmp	r6, r4
 800df94:	d105      	bne.n	800dfa2 <__libc_init_array+0x2e>
 800df96:	bd70      	pop	{r4, r5, r6, pc}
 800df98:	f855 3b04 	ldr.w	r3, [r5], #4
 800df9c:	4798      	blx	r3
 800df9e:	3601      	adds	r6, #1
 800dfa0:	e7ee      	b.n	800df80 <__libc_init_array+0xc>
 800dfa2:	f855 3b04 	ldr.w	r3, [r5], #4
 800dfa6:	4798      	blx	r3
 800dfa8:	3601      	adds	r6, #1
 800dfaa:	e7f2      	b.n	800df92 <__libc_init_array+0x1e>
 800dfac:	080102a8 	.word	0x080102a8
 800dfb0:	080102a8 	.word	0x080102a8
 800dfb4:	080102a8 	.word	0x080102a8
 800dfb8:	080102ac 	.word	0x080102ac

0800dfbc <__retarget_lock_init_recursive>:
 800dfbc:	4770      	bx	lr

0800dfbe <__retarget_lock_acquire_recursive>:
 800dfbe:	4770      	bx	lr

0800dfc0 <__retarget_lock_release_recursive>:
 800dfc0:	4770      	bx	lr

0800dfc2 <memcpy>:
 800dfc2:	440a      	add	r2, r1
 800dfc4:	4291      	cmp	r1, r2
 800dfc6:	f100 33ff 	add.w	r3, r0, #4294967295
 800dfca:	d100      	bne.n	800dfce <memcpy+0xc>
 800dfcc:	4770      	bx	lr
 800dfce:	b510      	push	{r4, lr}
 800dfd0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dfd4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800dfd8:	4291      	cmp	r1, r2
 800dfda:	d1f9      	bne.n	800dfd0 <memcpy+0xe>
 800dfdc:	bd10      	pop	{r4, pc}

0800dfde <memset>:
 800dfde:	4402      	add	r2, r0
 800dfe0:	4603      	mov	r3, r0
 800dfe2:	4293      	cmp	r3, r2
 800dfe4:	d100      	bne.n	800dfe8 <memset+0xa>
 800dfe6:	4770      	bx	lr
 800dfe8:	f803 1b01 	strb.w	r1, [r3], #1
 800dfec:	e7f9      	b.n	800dfe2 <memset+0x4>
	...

0800dff0 <sbrk_aligned>:
 800dff0:	b570      	push	{r4, r5, r6, lr}
 800dff2:	4e0e      	ldr	r6, [pc, #56]	; (800e02c <sbrk_aligned+0x3c>)
 800dff4:	460c      	mov	r4, r1
 800dff6:	6831      	ldr	r1, [r6, #0]
 800dff8:	4605      	mov	r5, r0
 800dffa:	b911      	cbnz	r1, 800e002 <sbrk_aligned+0x12>
 800dffc:	f000 f984 	bl	800e308 <_sbrk_r>
 800e000:	6030      	str	r0, [r6, #0]
 800e002:	4621      	mov	r1, r4
 800e004:	4628      	mov	r0, r5
 800e006:	f000 f97f 	bl	800e308 <_sbrk_r>
 800e00a:	1c43      	adds	r3, r0, #1
 800e00c:	d00a      	beq.n	800e024 <sbrk_aligned+0x34>
 800e00e:	1cc4      	adds	r4, r0, #3
 800e010:	f024 0403 	bic.w	r4, r4, #3
 800e014:	42a0      	cmp	r0, r4
 800e016:	d007      	beq.n	800e028 <sbrk_aligned+0x38>
 800e018:	1a21      	subs	r1, r4, r0
 800e01a:	4628      	mov	r0, r5
 800e01c:	f000 f974 	bl	800e308 <_sbrk_r>
 800e020:	3001      	adds	r0, #1
 800e022:	d101      	bne.n	800e028 <sbrk_aligned+0x38>
 800e024:	f04f 34ff 	mov.w	r4, #4294967295
 800e028:	4620      	mov	r0, r4
 800e02a:	bd70      	pop	{r4, r5, r6, pc}
 800e02c:	20003d74 	.word	0x20003d74

0800e030 <_malloc_r>:
 800e030:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e034:	1ccd      	adds	r5, r1, #3
 800e036:	f025 0503 	bic.w	r5, r5, #3
 800e03a:	3508      	adds	r5, #8
 800e03c:	2d0c      	cmp	r5, #12
 800e03e:	bf38      	it	cc
 800e040:	250c      	movcc	r5, #12
 800e042:	2d00      	cmp	r5, #0
 800e044:	4607      	mov	r7, r0
 800e046:	db01      	blt.n	800e04c <_malloc_r+0x1c>
 800e048:	42a9      	cmp	r1, r5
 800e04a:	d905      	bls.n	800e058 <_malloc_r+0x28>
 800e04c:	230c      	movs	r3, #12
 800e04e:	603b      	str	r3, [r7, #0]
 800e050:	2600      	movs	r6, #0
 800e052:	4630      	mov	r0, r6
 800e054:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e058:	4e2e      	ldr	r6, [pc, #184]	; (800e114 <_malloc_r+0xe4>)
 800e05a:	f000 fcd5 	bl	800ea08 <__malloc_lock>
 800e05e:	6833      	ldr	r3, [r6, #0]
 800e060:	461c      	mov	r4, r3
 800e062:	bb34      	cbnz	r4, 800e0b2 <_malloc_r+0x82>
 800e064:	4629      	mov	r1, r5
 800e066:	4638      	mov	r0, r7
 800e068:	f7ff ffc2 	bl	800dff0 <sbrk_aligned>
 800e06c:	1c43      	adds	r3, r0, #1
 800e06e:	4604      	mov	r4, r0
 800e070:	d14d      	bne.n	800e10e <_malloc_r+0xde>
 800e072:	6834      	ldr	r4, [r6, #0]
 800e074:	4626      	mov	r6, r4
 800e076:	2e00      	cmp	r6, #0
 800e078:	d140      	bne.n	800e0fc <_malloc_r+0xcc>
 800e07a:	6823      	ldr	r3, [r4, #0]
 800e07c:	4631      	mov	r1, r6
 800e07e:	4638      	mov	r0, r7
 800e080:	eb04 0803 	add.w	r8, r4, r3
 800e084:	f000 f940 	bl	800e308 <_sbrk_r>
 800e088:	4580      	cmp	r8, r0
 800e08a:	d13a      	bne.n	800e102 <_malloc_r+0xd2>
 800e08c:	6821      	ldr	r1, [r4, #0]
 800e08e:	3503      	adds	r5, #3
 800e090:	1a6d      	subs	r5, r5, r1
 800e092:	f025 0503 	bic.w	r5, r5, #3
 800e096:	3508      	adds	r5, #8
 800e098:	2d0c      	cmp	r5, #12
 800e09a:	bf38      	it	cc
 800e09c:	250c      	movcc	r5, #12
 800e09e:	4629      	mov	r1, r5
 800e0a0:	4638      	mov	r0, r7
 800e0a2:	f7ff ffa5 	bl	800dff0 <sbrk_aligned>
 800e0a6:	3001      	adds	r0, #1
 800e0a8:	d02b      	beq.n	800e102 <_malloc_r+0xd2>
 800e0aa:	6823      	ldr	r3, [r4, #0]
 800e0ac:	442b      	add	r3, r5
 800e0ae:	6023      	str	r3, [r4, #0]
 800e0b0:	e00e      	b.n	800e0d0 <_malloc_r+0xa0>
 800e0b2:	6822      	ldr	r2, [r4, #0]
 800e0b4:	1b52      	subs	r2, r2, r5
 800e0b6:	d41e      	bmi.n	800e0f6 <_malloc_r+0xc6>
 800e0b8:	2a0b      	cmp	r2, #11
 800e0ba:	d916      	bls.n	800e0ea <_malloc_r+0xba>
 800e0bc:	1961      	adds	r1, r4, r5
 800e0be:	42a3      	cmp	r3, r4
 800e0c0:	6025      	str	r5, [r4, #0]
 800e0c2:	bf18      	it	ne
 800e0c4:	6059      	strne	r1, [r3, #4]
 800e0c6:	6863      	ldr	r3, [r4, #4]
 800e0c8:	bf08      	it	eq
 800e0ca:	6031      	streq	r1, [r6, #0]
 800e0cc:	5162      	str	r2, [r4, r5]
 800e0ce:	604b      	str	r3, [r1, #4]
 800e0d0:	4638      	mov	r0, r7
 800e0d2:	f104 060b 	add.w	r6, r4, #11
 800e0d6:	f000 fc9d 	bl	800ea14 <__malloc_unlock>
 800e0da:	f026 0607 	bic.w	r6, r6, #7
 800e0de:	1d23      	adds	r3, r4, #4
 800e0e0:	1af2      	subs	r2, r6, r3
 800e0e2:	d0b6      	beq.n	800e052 <_malloc_r+0x22>
 800e0e4:	1b9b      	subs	r3, r3, r6
 800e0e6:	50a3      	str	r3, [r4, r2]
 800e0e8:	e7b3      	b.n	800e052 <_malloc_r+0x22>
 800e0ea:	6862      	ldr	r2, [r4, #4]
 800e0ec:	42a3      	cmp	r3, r4
 800e0ee:	bf0c      	ite	eq
 800e0f0:	6032      	streq	r2, [r6, #0]
 800e0f2:	605a      	strne	r2, [r3, #4]
 800e0f4:	e7ec      	b.n	800e0d0 <_malloc_r+0xa0>
 800e0f6:	4623      	mov	r3, r4
 800e0f8:	6864      	ldr	r4, [r4, #4]
 800e0fa:	e7b2      	b.n	800e062 <_malloc_r+0x32>
 800e0fc:	4634      	mov	r4, r6
 800e0fe:	6876      	ldr	r6, [r6, #4]
 800e100:	e7b9      	b.n	800e076 <_malloc_r+0x46>
 800e102:	230c      	movs	r3, #12
 800e104:	603b      	str	r3, [r7, #0]
 800e106:	4638      	mov	r0, r7
 800e108:	f000 fc84 	bl	800ea14 <__malloc_unlock>
 800e10c:	e7a1      	b.n	800e052 <_malloc_r+0x22>
 800e10e:	6025      	str	r5, [r4, #0]
 800e110:	e7de      	b.n	800e0d0 <_malloc_r+0xa0>
 800e112:	bf00      	nop
 800e114:	20003d70 	.word	0x20003d70

0800e118 <iprintf>:
 800e118:	b40f      	push	{r0, r1, r2, r3}
 800e11a:	4b0a      	ldr	r3, [pc, #40]	; (800e144 <iprintf+0x2c>)
 800e11c:	b513      	push	{r0, r1, r4, lr}
 800e11e:	681c      	ldr	r4, [r3, #0]
 800e120:	b124      	cbz	r4, 800e12c <iprintf+0x14>
 800e122:	69a3      	ldr	r3, [r4, #24]
 800e124:	b913      	cbnz	r3, 800e12c <iprintf+0x14>
 800e126:	4620      	mov	r0, r4
 800e128:	f7ff fe86 	bl	800de38 <__sinit>
 800e12c:	ab05      	add	r3, sp, #20
 800e12e:	9a04      	ldr	r2, [sp, #16]
 800e130:	68a1      	ldr	r1, [r4, #8]
 800e132:	9301      	str	r3, [sp, #4]
 800e134:	4620      	mov	r0, r4
 800e136:	f000 fe45 	bl	800edc4 <_vfiprintf_r>
 800e13a:	b002      	add	sp, #8
 800e13c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e140:	b004      	add	sp, #16
 800e142:	4770      	bx	lr
 800e144:	20000048 	.word	0x20000048

0800e148 <_puts_r>:
 800e148:	b570      	push	{r4, r5, r6, lr}
 800e14a:	460e      	mov	r6, r1
 800e14c:	4605      	mov	r5, r0
 800e14e:	b118      	cbz	r0, 800e158 <_puts_r+0x10>
 800e150:	6983      	ldr	r3, [r0, #24]
 800e152:	b90b      	cbnz	r3, 800e158 <_puts_r+0x10>
 800e154:	f7ff fe70 	bl	800de38 <__sinit>
 800e158:	69ab      	ldr	r3, [r5, #24]
 800e15a:	68ac      	ldr	r4, [r5, #8]
 800e15c:	b913      	cbnz	r3, 800e164 <_puts_r+0x1c>
 800e15e:	4628      	mov	r0, r5
 800e160:	f7ff fe6a 	bl	800de38 <__sinit>
 800e164:	4b2c      	ldr	r3, [pc, #176]	; (800e218 <_puts_r+0xd0>)
 800e166:	429c      	cmp	r4, r3
 800e168:	d120      	bne.n	800e1ac <_puts_r+0x64>
 800e16a:	686c      	ldr	r4, [r5, #4]
 800e16c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e16e:	07db      	lsls	r3, r3, #31
 800e170:	d405      	bmi.n	800e17e <_puts_r+0x36>
 800e172:	89a3      	ldrh	r3, [r4, #12]
 800e174:	0598      	lsls	r0, r3, #22
 800e176:	d402      	bmi.n	800e17e <_puts_r+0x36>
 800e178:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e17a:	f7ff ff20 	bl	800dfbe <__retarget_lock_acquire_recursive>
 800e17e:	89a3      	ldrh	r3, [r4, #12]
 800e180:	0719      	lsls	r1, r3, #28
 800e182:	d51d      	bpl.n	800e1c0 <_puts_r+0x78>
 800e184:	6923      	ldr	r3, [r4, #16]
 800e186:	b1db      	cbz	r3, 800e1c0 <_puts_r+0x78>
 800e188:	3e01      	subs	r6, #1
 800e18a:	68a3      	ldr	r3, [r4, #8]
 800e18c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800e190:	3b01      	subs	r3, #1
 800e192:	60a3      	str	r3, [r4, #8]
 800e194:	bb39      	cbnz	r1, 800e1e6 <_puts_r+0x9e>
 800e196:	2b00      	cmp	r3, #0
 800e198:	da38      	bge.n	800e20c <_puts_r+0xc4>
 800e19a:	4622      	mov	r2, r4
 800e19c:	210a      	movs	r1, #10
 800e19e:	4628      	mov	r0, r5
 800e1a0:	f000 f9de 	bl	800e560 <__swbuf_r>
 800e1a4:	3001      	adds	r0, #1
 800e1a6:	d011      	beq.n	800e1cc <_puts_r+0x84>
 800e1a8:	250a      	movs	r5, #10
 800e1aa:	e011      	b.n	800e1d0 <_puts_r+0x88>
 800e1ac:	4b1b      	ldr	r3, [pc, #108]	; (800e21c <_puts_r+0xd4>)
 800e1ae:	429c      	cmp	r4, r3
 800e1b0:	d101      	bne.n	800e1b6 <_puts_r+0x6e>
 800e1b2:	68ac      	ldr	r4, [r5, #8]
 800e1b4:	e7da      	b.n	800e16c <_puts_r+0x24>
 800e1b6:	4b1a      	ldr	r3, [pc, #104]	; (800e220 <_puts_r+0xd8>)
 800e1b8:	429c      	cmp	r4, r3
 800e1ba:	bf08      	it	eq
 800e1bc:	68ec      	ldreq	r4, [r5, #12]
 800e1be:	e7d5      	b.n	800e16c <_puts_r+0x24>
 800e1c0:	4621      	mov	r1, r4
 800e1c2:	4628      	mov	r0, r5
 800e1c4:	f000 fa30 	bl	800e628 <__swsetup_r>
 800e1c8:	2800      	cmp	r0, #0
 800e1ca:	d0dd      	beq.n	800e188 <_puts_r+0x40>
 800e1cc:	f04f 35ff 	mov.w	r5, #4294967295
 800e1d0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e1d2:	07da      	lsls	r2, r3, #31
 800e1d4:	d405      	bmi.n	800e1e2 <_puts_r+0x9a>
 800e1d6:	89a3      	ldrh	r3, [r4, #12]
 800e1d8:	059b      	lsls	r3, r3, #22
 800e1da:	d402      	bmi.n	800e1e2 <_puts_r+0x9a>
 800e1dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e1de:	f7ff feef 	bl	800dfc0 <__retarget_lock_release_recursive>
 800e1e2:	4628      	mov	r0, r5
 800e1e4:	bd70      	pop	{r4, r5, r6, pc}
 800e1e6:	2b00      	cmp	r3, #0
 800e1e8:	da04      	bge.n	800e1f4 <_puts_r+0xac>
 800e1ea:	69a2      	ldr	r2, [r4, #24]
 800e1ec:	429a      	cmp	r2, r3
 800e1ee:	dc06      	bgt.n	800e1fe <_puts_r+0xb6>
 800e1f0:	290a      	cmp	r1, #10
 800e1f2:	d004      	beq.n	800e1fe <_puts_r+0xb6>
 800e1f4:	6823      	ldr	r3, [r4, #0]
 800e1f6:	1c5a      	adds	r2, r3, #1
 800e1f8:	6022      	str	r2, [r4, #0]
 800e1fa:	7019      	strb	r1, [r3, #0]
 800e1fc:	e7c5      	b.n	800e18a <_puts_r+0x42>
 800e1fe:	4622      	mov	r2, r4
 800e200:	4628      	mov	r0, r5
 800e202:	f000 f9ad 	bl	800e560 <__swbuf_r>
 800e206:	3001      	adds	r0, #1
 800e208:	d1bf      	bne.n	800e18a <_puts_r+0x42>
 800e20a:	e7df      	b.n	800e1cc <_puts_r+0x84>
 800e20c:	6823      	ldr	r3, [r4, #0]
 800e20e:	250a      	movs	r5, #10
 800e210:	1c5a      	adds	r2, r3, #1
 800e212:	6022      	str	r2, [r4, #0]
 800e214:	701d      	strb	r5, [r3, #0]
 800e216:	e7db      	b.n	800e1d0 <_puts_r+0x88>
 800e218:	08010178 	.word	0x08010178
 800e21c:	08010198 	.word	0x08010198
 800e220:	08010158 	.word	0x08010158

0800e224 <puts>:
 800e224:	4b02      	ldr	r3, [pc, #8]	; (800e230 <puts+0xc>)
 800e226:	4601      	mov	r1, r0
 800e228:	6818      	ldr	r0, [r3, #0]
 800e22a:	f7ff bf8d 	b.w	800e148 <_puts_r>
 800e22e:	bf00      	nop
 800e230:	20000048 	.word	0x20000048

0800e234 <cleanup_glue>:
 800e234:	b538      	push	{r3, r4, r5, lr}
 800e236:	460c      	mov	r4, r1
 800e238:	6809      	ldr	r1, [r1, #0]
 800e23a:	4605      	mov	r5, r0
 800e23c:	b109      	cbz	r1, 800e242 <cleanup_glue+0xe>
 800e23e:	f7ff fff9 	bl	800e234 <cleanup_glue>
 800e242:	4621      	mov	r1, r4
 800e244:	4628      	mov	r0, r5
 800e246:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e24a:	f000 bbe9 	b.w	800ea20 <_free_r>
	...

0800e250 <_reclaim_reent>:
 800e250:	4b2c      	ldr	r3, [pc, #176]	; (800e304 <_reclaim_reent+0xb4>)
 800e252:	681b      	ldr	r3, [r3, #0]
 800e254:	4283      	cmp	r3, r0
 800e256:	b570      	push	{r4, r5, r6, lr}
 800e258:	4604      	mov	r4, r0
 800e25a:	d051      	beq.n	800e300 <_reclaim_reent+0xb0>
 800e25c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800e25e:	b143      	cbz	r3, 800e272 <_reclaim_reent+0x22>
 800e260:	68db      	ldr	r3, [r3, #12]
 800e262:	2b00      	cmp	r3, #0
 800e264:	d14a      	bne.n	800e2fc <_reclaim_reent+0xac>
 800e266:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e268:	6819      	ldr	r1, [r3, #0]
 800e26a:	b111      	cbz	r1, 800e272 <_reclaim_reent+0x22>
 800e26c:	4620      	mov	r0, r4
 800e26e:	f000 fbd7 	bl	800ea20 <_free_r>
 800e272:	6961      	ldr	r1, [r4, #20]
 800e274:	b111      	cbz	r1, 800e27c <_reclaim_reent+0x2c>
 800e276:	4620      	mov	r0, r4
 800e278:	f000 fbd2 	bl	800ea20 <_free_r>
 800e27c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800e27e:	b111      	cbz	r1, 800e286 <_reclaim_reent+0x36>
 800e280:	4620      	mov	r0, r4
 800e282:	f000 fbcd 	bl	800ea20 <_free_r>
 800e286:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800e288:	b111      	cbz	r1, 800e290 <_reclaim_reent+0x40>
 800e28a:	4620      	mov	r0, r4
 800e28c:	f000 fbc8 	bl	800ea20 <_free_r>
 800e290:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800e292:	b111      	cbz	r1, 800e29a <_reclaim_reent+0x4a>
 800e294:	4620      	mov	r0, r4
 800e296:	f000 fbc3 	bl	800ea20 <_free_r>
 800e29a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800e29c:	b111      	cbz	r1, 800e2a4 <_reclaim_reent+0x54>
 800e29e:	4620      	mov	r0, r4
 800e2a0:	f000 fbbe 	bl	800ea20 <_free_r>
 800e2a4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800e2a6:	b111      	cbz	r1, 800e2ae <_reclaim_reent+0x5e>
 800e2a8:	4620      	mov	r0, r4
 800e2aa:	f000 fbb9 	bl	800ea20 <_free_r>
 800e2ae:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800e2b0:	b111      	cbz	r1, 800e2b8 <_reclaim_reent+0x68>
 800e2b2:	4620      	mov	r0, r4
 800e2b4:	f000 fbb4 	bl	800ea20 <_free_r>
 800e2b8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e2ba:	b111      	cbz	r1, 800e2c2 <_reclaim_reent+0x72>
 800e2bc:	4620      	mov	r0, r4
 800e2be:	f000 fbaf 	bl	800ea20 <_free_r>
 800e2c2:	69a3      	ldr	r3, [r4, #24]
 800e2c4:	b1e3      	cbz	r3, 800e300 <_reclaim_reent+0xb0>
 800e2c6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800e2c8:	4620      	mov	r0, r4
 800e2ca:	4798      	blx	r3
 800e2cc:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800e2ce:	b1b9      	cbz	r1, 800e300 <_reclaim_reent+0xb0>
 800e2d0:	4620      	mov	r0, r4
 800e2d2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e2d6:	f7ff bfad 	b.w	800e234 <cleanup_glue>
 800e2da:	5949      	ldr	r1, [r1, r5]
 800e2dc:	b941      	cbnz	r1, 800e2f0 <_reclaim_reent+0xa0>
 800e2de:	3504      	adds	r5, #4
 800e2e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e2e2:	2d80      	cmp	r5, #128	; 0x80
 800e2e4:	68d9      	ldr	r1, [r3, #12]
 800e2e6:	d1f8      	bne.n	800e2da <_reclaim_reent+0x8a>
 800e2e8:	4620      	mov	r0, r4
 800e2ea:	f000 fb99 	bl	800ea20 <_free_r>
 800e2ee:	e7ba      	b.n	800e266 <_reclaim_reent+0x16>
 800e2f0:	680e      	ldr	r6, [r1, #0]
 800e2f2:	4620      	mov	r0, r4
 800e2f4:	f000 fb94 	bl	800ea20 <_free_r>
 800e2f8:	4631      	mov	r1, r6
 800e2fa:	e7ef      	b.n	800e2dc <_reclaim_reent+0x8c>
 800e2fc:	2500      	movs	r5, #0
 800e2fe:	e7ef      	b.n	800e2e0 <_reclaim_reent+0x90>
 800e300:	bd70      	pop	{r4, r5, r6, pc}
 800e302:	bf00      	nop
 800e304:	20000048 	.word	0x20000048

0800e308 <_sbrk_r>:
 800e308:	b538      	push	{r3, r4, r5, lr}
 800e30a:	4d06      	ldr	r5, [pc, #24]	; (800e324 <_sbrk_r+0x1c>)
 800e30c:	2300      	movs	r3, #0
 800e30e:	4604      	mov	r4, r0
 800e310:	4608      	mov	r0, r1
 800e312:	602b      	str	r3, [r5, #0]
 800e314:	f7f3 ff9e 	bl	8002254 <_sbrk>
 800e318:	1c43      	adds	r3, r0, #1
 800e31a:	d102      	bne.n	800e322 <_sbrk_r+0x1a>
 800e31c:	682b      	ldr	r3, [r5, #0]
 800e31e:	b103      	cbz	r3, 800e322 <_sbrk_r+0x1a>
 800e320:	6023      	str	r3, [r4, #0]
 800e322:	bd38      	pop	{r3, r4, r5, pc}
 800e324:	20003d78 	.word	0x20003d78

0800e328 <sniprintf>:
 800e328:	b40c      	push	{r2, r3}
 800e32a:	b530      	push	{r4, r5, lr}
 800e32c:	4b17      	ldr	r3, [pc, #92]	; (800e38c <sniprintf+0x64>)
 800e32e:	1e0c      	subs	r4, r1, #0
 800e330:	681d      	ldr	r5, [r3, #0]
 800e332:	b09d      	sub	sp, #116	; 0x74
 800e334:	da08      	bge.n	800e348 <sniprintf+0x20>
 800e336:	238b      	movs	r3, #139	; 0x8b
 800e338:	602b      	str	r3, [r5, #0]
 800e33a:	f04f 30ff 	mov.w	r0, #4294967295
 800e33e:	b01d      	add	sp, #116	; 0x74
 800e340:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e344:	b002      	add	sp, #8
 800e346:	4770      	bx	lr
 800e348:	f44f 7302 	mov.w	r3, #520	; 0x208
 800e34c:	f8ad 3014 	strh.w	r3, [sp, #20]
 800e350:	bf14      	ite	ne
 800e352:	f104 33ff 	addne.w	r3, r4, #4294967295
 800e356:	4623      	moveq	r3, r4
 800e358:	9304      	str	r3, [sp, #16]
 800e35a:	9307      	str	r3, [sp, #28]
 800e35c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e360:	9002      	str	r0, [sp, #8]
 800e362:	9006      	str	r0, [sp, #24]
 800e364:	f8ad 3016 	strh.w	r3, [sp, #22]
 800e368:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800e36a:	ab21      	add	r3, sp, #132	; 0x84
 800e36c:	a902      	add	r1, sp, #8
 800e36e:	4628      	mov	r0, r5
 800e370:	9301      	str	r3, [sp, #4]
 800e372:	f000 fbfd 	bl	800eb70 <_svfiprintf_r>
 800e376:	1c43      	adds	r3, r0, #1
 800e378:	bfbc      	itt	lt
 800e37a:	238b      	movlt	r3, #139	; 0x8b
 800e37c:	602b      	strlt	r3, [r5, #0]
 800e37e:	2c00      	cmp	r4, #0
 800e380:	d0dd      	beq.n	800e33e <sniprintf+0x16>
 800e382:	9b02      	ldr	r3, [sp, #8]
 800e384:	2200      	movs	r2, #0
 800e386:	701a      	strb	r2, [r3, #0]
 800e388:	e7d9      	b.n	800e33e <sniprintf+0x16>
 800e38a:	bf00      	nop
 800e38c:	20000048 	.word	0x20000048

0800e390 <siprintf>:
 800e390:	b40e      	push	{r1, r2, r3}
 800e392:	b500      	push	{lr}
 800e394:	b09c      	sub	sp, #112	; 0x70
 800e396:	ab1d      	add	r3, sp, #116	; 0x74
 800e398:	9002      	str	r0, [sp, #8]
 800e39a:	9006      	str	r0, [sp, #24]
 800e39c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800e3a0:	4809      	ldr	r0, [pc, #36]	; (800e3c8 <siprintf+0x38>)
 800e3a2:	9107      	str	r1, [sp, #28]
 800e3a4:	9104      	str	r1, [sp, #16]
 800e3a6:	4909      	ldr	r1, [pc, #36]	; (800e3cc <siprintf+0x3c>)
 800e3a8:	f853 2b04 	ldr.w	r2, [r3], #4
 800e3ac:	9105      	str	r1, [sp, #20]
 800e3ae:	6800      	ldr	r0, [r0, #0]
 800e3b0:	9301      	str	r3, [sp, #4]
 800e3b2:	a902      	add	r1, sp, #8
 800e3b4:	f000 fbdc 	bl	800eb70 <_svfiprintf_r>
 800e3b8:	9b02      	ldr	r3, [sp, #8]
 800e3ba:	2200      	movs	r2, #0
 800e3bc:	701a      	strb	r2, [r3, #0]
 800e3be:	b01c      	add	sp, #112	; 0x70
 800e3c0:	f85d eb04 	ldr.w	lr, [sp], #4
 800e3c4:	b003      	add	sp, #12
 800e3c6:	4770      	bx	lr
 800e3c8:	20000048 	.word	0x20000048
 800e3cc:	ffff0208 	.word	0xffff0208

0800e3d0 <__sread>:
 800e3d0:	b510      	push	{r4, lr}
 800e3d2:	460c      	mov	r4, r1
 800e3d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e3d8:	f000 ffb8 	bl	800f34c <_read_r>
 800e3dc:	2800      	cmp	r0, #0
 800e3de:	bfab      	itete	ge
 800e3e0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e3e2:	89a3      	ldrhlt	r3, [r4, #12]
 800e3e4:	181b      	addge	r3, r3, r0
 800e3e6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e3ea:	bfac      	ite	ge
 800e3ec:	6563      	strge	r3, [r4, #84]	; 0x54
 800e3ee:	81a3      	strhlt	r3, [r4, #12]
 800e3f0:	bd10      	pop	{r4, pc}

0800e3f2 <__swrite>:
 800e3f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e3f6:	461f      	mov	r7, r3
 800e3f8:	898b      	ldrh	r3, [r1, #12]
 800e3fa:	05db      	lsls	r3, r3, #23
 800e3fc:	4605      	mov	r5, r0
 800e3fe:	460c      	mov	r4, r1
 800e400:	4616      	mov	r6, r2
 800e402:	d505      	bpl.n	800e410 <__swrite+0x1e>
 800e404:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e408:	2302      	movs	r3, #2
 800e40a:	2200      	movs	r2, #0
 800e40c:	f000 fa7c 	bl	800e908 <_lseek_r>
 800e410:	89a3      	ldrh	r3, [r4, #12]
 800e412:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e416:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e41a:	81a3      	strh	r3, [r4, #12]
 800e41c:	4632      	mov	r2, r6
 800e41e:	463b      	mov	r3, r7
 800e420:	4628      	mov	r0, r5
 800e422:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e426:	f000 b8ed 	b.w	800e604 <_write_r>

0800e42a <__sseek>:
 800e42a:	b510      	push	{r4, lr}
 800e42c:	460c      	mov	r4, r1
 800e42e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e432:	f000 fa69 	bl	800e908 <_lseek_r>
 800e436:	1c43      	adds	r3, r0, #1
 800e438:	89a3      	ldrh	r3, [r4, #12]
 800e43a:	bf15      	itete	ne
 800e43c:	6560      	strne	r0, [r4, #84]	; 0x54
 800e43e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e442:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e446:	81a3      	strheq	r3, [r4, #12]
 800e448:	bf18      	it	ne
 800e44a:	81a3      	strhne	r3, [r4, #12]
 800e44c:	bd10      	pop	{r4, pc}

0800e44e <__sclose>:
 800e44e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e452:	f000 b975 	b.w	800e740 <_close_r>

0800e456 <strncpy>:
 800e456:	b510      	push	{r4, lr}
 800e458:	3901      	subs	r1, #1
 800e45a:	4603      	mov	r3, r0
 800e45c:	b132      	cbz	r2, 800e46c <strncpy+0x16>
 800e45e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800e462:	f803 4b01 	strb.w	r4, [r3], #1
 800e466:	3a01      	subs	r2, #1
 800e468:	2c00      	cmp	r4, #0
 800e46a:	d1f7      	bne.n	800e45c <strncpy+0x6>
 800e46c:	441a      	add	r2, r3
 800e46e:	2100      	movs	r1, #0
 800e470:	4293      	cmp	r3, r2
 800e472:	d100      	bne.n	800e476 <strncpy+0x20>
 800e474:	bd10      	pop	{r4, pc}
 800e476:	f803 1b01 	strb.w	r1, [r3], #1
 800e47a:	e7f9      	b.n	800e470 <strncpy+0x1a>

0800e47c <strstr>:
 800e47c:	780a      	ldrb	r2, [r1, #0]
 800e47e:	b570      	push	{r4, r5, r6, lr}
 800e480:	b96a      	cbnz	r2, 800e49e <strstr+0x22>
 800e482:	bd70      	pop	{r4, r5, r6, pc}
 800e484:	429a      	cmp	r2, r3
 800e486:	d109      	bne.n	800e49c <strstr+0x20>
 800e488:	460c      	mov	r4, r1
 800e48a:	4605      	mov	r5, r0
 800e48c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800e490:	2b00      	cmp	r3, #0
 800e492:	d0f6      	beq.n	800e482 <strstr+0x6>
 800e494:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800e498:	429e      	cmp	r6, r3
 800e49a:	d0f7      	beq.n	800e48c <strstr+0x10>
 800e49c:	3001      	adds	r0, #1
 800e49e:	7803      	ldrb	r3, [r0, #0]
 800e4a0:	2b00      	cmp	r3, #0
 800e4a2:	d1ef      	bne.n	800e484 <strstr+0x8>
 800e4a4:	4618      	mov	r0, r3
 800e4a6:	e7ec      	b.n	800e482 <strstr+0x6>

0800e4a8 <strtok>:
 800e4a8:	4b16      	ldr	r3, [pc, #88]	; (800e504 <strtok+0x5c>)
 800e4aa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e4ac:	681e      	ldr	r6, [r3, #0]
 800e4ae:	6db4      	ldr	r4, [r6, #88]	; 0x58
 800e4b0:	4605      	mov	r5, r0
 800e4b2:	b9fc      	cbnz	r4, 800e4f4 <strtok+0x4c>
 800e4b4:	2050      	movs	r0, #80	; 0x50
 800e4b6:	9101      	str	r1, [sp, #4]
 800e4b8:	f000 fa9e 	bl	800e9f8 <malloc>
 800e4bc:	9901      	ldr	r1, [sp, #4]
 800e4be:	65b0      	str	r0, [r6, #88]	; 0x58
 800e4c0:	4602      	mov	r2, r0
 800e4c2:	b920      	cbnz	r0, 800e4ce <strtok+0x26>
 800e4c4:	4b10      	ldr	r3, [pc, #64]	; (800e508 <strtok+0x60>)
 800e4c6:	4811      	ldr	r0, [pc, #68]	; (800e50c <strtok+0x64>)
 800e4c8:	2157      	movs	r1, #87	; 0x57
 800e4ca:	f000 f91b 	bl	800e704 <__assert_func>
 800e4ce:	e9c0 4400 	strd	r4, r4, [r0]
 800e4d2:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800e4d6:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800e4da:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800e4de:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800e4e2:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800e4e6:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800e4ea:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800e4ee:	6184      	str	r4, [r0, #24]
 800e4f0:	7704      	strb	r4, [r0, #28]
 800e4f2:	6244      	str	r4, [r0, #36]	; 0x24
 800e4f4:	6db2      	ldr	r2, [r6, #88]	; 0x58
 800e4f6:	2301      	movs	r3, #1
 800e4f8:	4628      	mov	r0, r5
 800e4fa:	b002      	add	sp, #8
 800e4fc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e500:	f000 b806 	b.w	800e510 <__strtok_r>
 800e504:	20000048 	.word	0x20000048
 800e508:	080101bc 	.word	0x080101bc
 800e50c:	080101d3 	.word	0x080101d3

0800e510 <__strtok_r>:
 800e510:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e512:	b908      	cbnz	r0, 800e518 <__strtok_r+0x8>
 800e514:	6810      	ldr	r0, [r2, #0]
 800e516:	b188      	cbz	r0, 800e53c <__strtok_r+0x2c>
 800e518:	4604      	mov	r4, r0
 800e51a:	4620      	mov	r0, r4
 800e51c:	f814 5b01 	ldrb.w	r5, [r4], #1
 800e520:	460f      	mov	r7, r1
 800e522:	f817 6b01 	ldrb.w	r6, [r7], #1
 800e526:	b91e      	cbnz	r6, 800e530 <__strtok_r+0x20>
 800e528:	b965      	cbnz	r5, 800e544 <__strtok_r+0x34>
 800e52a:	6015      	str	r5, [r2, #0]
 800e52c:	4628      	mov	r0, r5
 800e52e:	e005      	b.n	800e53c <__strtok_r+0x2c>
 800e530:	42b5      	cmp	r5, r6
 800e532:	d1f6      	bne.n	800e522 <__strtok_r+0x12>
 800e534:	2b00      	cmp	r3, #0
 800e536:	d1f0      	bne.n	800e51a <__strtok_r+0xa>
 800e538:	6014      	str	r4, [r2, #0]
 800e53a:	7003      	strb	r3, [r0, #0]
 800e53c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e53e:	461c      	mov	r4, r3
 800e540:	e00c      	b.n	800e55c <__strtok_r+0x4c>
 800e542:	b915      	cbnz	r5, 800e54a <__strtok_r+0x3a>
 800e544:	f814 3b01 	ldrb.w	r3, [r4], #1
 800e548:	460e      	mov	r6, r1
 800e54a:	f816 5b01 	ldrb.w	r5, [r6], #1
 800e54e:	42ab      	cmp	r3, r5
 800e550:	d1f7      	bne.n	800e542 <__strtok_r+0x32>
 800e552:	2b00      	cmp	r3, #0
 800e554:	d0f3      	beq.n	800e53e <__strtok_r+0x2e>
 800e556:	2300      	movs	r3, #0
 800e558:	f804 3c01 	strb.w	r3, [r4, #-1]
 800e55c:	6014      	str	r4, [r2, #0]
 800e55e:	e7ed      	b.n	800e53c <__strtok_r+0x2c>

0800e560 <__swbuf_r>:
 800e560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e562:	460e      	mov	r6, r1
 800e564:	4614      	mov	r4, r2
 800e566:	4605      	mov	r5, r0
 800e568:	b118      	cbz	r0, 800e572 <__swbuf_r+0x12>
 800e56a:	6983      	ldr	r3, [r0, #24]
 800e56c:	b90b      	cbnz	r3, 800e572 <__swbuf_r+0x12>
 800e56e:	f7ff fc63 	bl	800de38 <__sinit>
 800e572:	4b21      	ldr	r3, [pc, #132]	; (800e5f8 <__swbuf_r+0x98>)
 800e574:	429c      	cmp	r4, r3
 800e576:	d12b      	bne.n	800e5d0 <__swbuf_r+0x70>
 800e578:	686c      	ldr	r4, [r5, #4]
 800e57a:	69a3      	ldr	r3, [r4, #24]
 800e57c:	60a3      	str	r3, [r4, #8]
 800e57e:	89a3      	ldrh	r3, [r4, #12]
 800e580:	071a      	lsls	r2, r3, #28
 800e582:	d52f      	bpl.n	800e5e4 <__swbuf_r+0x84>
 800e584:	6923      	ldr	r3, [r4, #16]
 800e586:	b36b      	cbz	r3, 800e5e4 <__swbuf_r+0x84>
 800e588:	6923      	ldr	r3, [r4, #16]
 800e58a:	6820      	ldr	r0, [r4, #0]
 800e58c:	1ac0      	subs	r0, r0, r3
 800e58e:	6963      	ldr	r3, [r4, #20]
 800e590:	b2f6      	uxtb	r6, r6
 800e592:	4283      	cmp	r3, r0
 800e594:	4637      	mov	r7, r6
 800e596:	dc04      	bgt.n	800e5a2 <__swbuf_r+0x42>
 800e598:	4621      	mov	r1, r4
 800e59a:	4628      	mov	r0, r5
 800e59c:	f000 f966 	bl	800e86c <_fflush_r>
 800e5a0:	bb30      	cbnz	r0, 800e5f0 <__swbuf_r+0x90>
 800e5a2:	68a3      	ldr	r3, [r4, #8]
 800e5a4:	3b01      	subs	r3, #1
 800e5a6:	60a3      	str	r3, [r4, #8]
 800e5a8:	6823      	ldr	r3, [r4, #0]
 800e5aa:	1c5a      	adds	r2, r3, #1
 800e5ac:	6022      	str	r2, [r4, #0]
 800e5ae:	701e      	strb	r6, [r3, #0]
 800e5b0:	6963      	ldr	r3, [r4, #20]
 800e5b2:	3001      	adds	r0, #1
 800e5b4:	4283      	cmp	r3, r0
 800e5b6:	d004      	beq.n	800e5c2 <__swbuf_r+0x62>
 800e5b8:	89a3      	ldrh	r3, [r4, #12]
 800e5ba:	07db      	lsls	r3, r3, #31
 800e5bc:	d506      	bpl.n	800e5cc <__swbuf_r+0x6c>
 800e5be:	2e0a      	cmp	r6, #10
 800e5c0:	d104      	bne.n	800e5cc <__swbuf_r+0x6c>
 800e5c2:	4621      	mov	r1, r4
 800e5c4:	4628      	mov	r0, r5
 800e5c6:	f000 f951 	bl	800e86c <_fflush_r>
 800e5ca:	b988      	cbnz	r0, 800e5f0 <__swbuf_r+0x90>
 800e5cc:	4638      	mov	r0, r7
 800e5ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e5d0:	4b0a      	ldr	r3, [pc, #40]	; (800e5fc <__swbuf_r+0x9c>)
 800e5d2:	429c      	cmp	r4, r3
 800e5d4:	d101      	bne.n	800e5da <__swbuf_r+0x7a>
 800e5d6:	68ac      	ldr	r4, [r5, #8]
 800e5d8:	e7cf      	b.n	800e57a <__swbuf_r+0x1a>
 800e5da:	4b09      	ldr	r3, [pc, #36]	; (800e600 <__swbuf_r+0xa0>)
 800e5dc:	429c      	cmp	r4, r3
 800e5de:	bf08      	it	eq
 800e5e0:	68ec      	ldreq	r4, [r5, #12]
 800e5e2:	e7ca      	b.n	800e57a <__swbuf_r+0x1a>
 800e5e4:	4621      	mov	r1, r4
 800e5e6:	4628      	mov	r0, r5
 800e5e8:	f000 f81e 	bl	800e628 <__swsetup_r>
 800e5ec:	2800      	cmp	r0, #0
 800e5ee:	d0cb      	beq.n	800e588 <__swbuf_r+0x28>
 800e5f0:	f04f 37ff 	mov.w	r7, #4294967295
 800e5f4:	e7ea      	b.n	800e5cc <__swbuf_r+0x6c>
 800e5f6:	bf00      	nop
 800e5f8:	08010178 	.word	0x08010178
 800e5fc:	08010198 	.word	0x08010198
 800e600:	08010158 	.word	0x08010158

0800e604 <_write_r>:
 800e604:	b538      	push	{r3, r4, r5, lr}
 800e606:	4d07      	ldr	r5, [pc, #28]	; (800e624 <_write_r+0x20>)
 800e608:	4604      	mov	r4, r0
 800e60a:	4608      	mov	r0, r1
 800e60c:	4611      	mov	r1, r2
 800e60e:	2200      	movs	r2, #0
 800e610:	602a      	str	r2, [r5, #0]
 800e612:	461a      	mov	r2, r3
 800e614:	f7f2 fcac 	bl	8000f70 <_write>
 800e618:	1c43      	adds	r3, r0, #1
 800e61a:	d102      	bne.n	800e622 <_write_r+0x1e>
 800e61c:	682b      	ldr	r3, [r5, #0]
 800e61e:	b103      	cbz	r3, 800e622 <_write_r+0x1e>
 800e620:	6023      	str	r3, [r4, #0]
 800e622:	bd38      	pop	{r3, r4, r5, pc}
 800e624:	20003d78 	.word	0x20003d78

0800e628 <__swsetup_r>:
 800e628:	4b32      	ldr	r3, [pc, #200]	; (800e6f4 <__swsetup_r+0xcc>)
 800e62a:	b570      	push	{r4, r5, r6, lr}
 800e62c:	681d      	ldr	r5, [r3, #0]
 800e62e:	4606      	mov	r6, r0
 800e630:	460c      	mov	r4, r1
 800e632:	b125      	cbz	r5, 800e63e <__swsetup_r+0x16>
 800e634:	69ab      	ldr	r3, [r5, #24]
 800e636:	b913      	cbnz	r3, 800e63e <__swsetup_r+0x16>
 800e638:	4628      	mov	r0, r5
 800e63a:	f7ff fbfd 	bl	800de38 <__sinit>
 800e63e:	4b2e      	ldr	r3, [pc, #184]	; (800e6f8 <__swsetup_r+0xd0>)
 800e640:	429c      	cmp	r4, r3
 800e642:	d10f      	bne.n	800e664 <__swsetup_r+0x3c>
 800e644:	686c      	ldr	r4, [r5, #4]
 800e646:	89a3      	ldrh	r3, [r4, #12]
 800e648:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e64c:	0719      	lsls	r1, r3, #28
 800e64e:	d42c      	bmi.n	800e6aa <__swsetup_r+0x82>
 800e650:	06dd      	lsls	r5, r3, #27
 800e652:	d411      	bmi.n	800e678 <__swsetup_r+0x50>
 800e654:	2309      	movs	r3, #9
 800e656:	6033      	str	r3, [r6, #0]
 800e658:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800e65c:	81a3      	strh	r3, [r4, #12]
 800e65e:	f04f 30ff 	mov.w	r0, #4294967295
 800e662:	e03e      	b.n	800e6e2 <__swsetup_r+0xba>
 800e664:	4b25      	ldr	r3, [pc, #148]	; (800e6fc <__swsetup_r+0xd4>)
 800e666:	429c      	cmp	r4, r3
 800e668:	d101      	bne.n	800e66e <__swsetup_r+0x46>
 800e66a:	68ac      	ldr	r4, [r5, #8]
 800e66c:	e7eb      	b.n	800e646 <__swsetup_r+0x1e>
 800e66e:	4b24      	ldr	r3, [pc, #144]	; (800e700 <__swsetup_r+0xd8>)
 800e670:	429c      	cmp	r4, r3
 800e672:	bf08      	it	eq
 800e674:	68ec      	ldreq	r4, [r5, #12]
 800e676:	e7e6      	b.n	800e646 <__swsetup_r+0x1e>
 800e678:	0758      	lsls	r0, r3, #29
 800e67a:	d512      	bpl.n	800e6a2 <__swsetup_r+0x7a>
 800e67c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e67e:	b141      	cbz	r1, 800e692 <__swsetup_r+0x6a>
 800e680:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e684:	4299      	cmp	r1, r3
 800e686:	d002      	beq.n	800e68e <__swsetup_r+0x66>
 800e688:	4630      	mov	r0, r6
 800e68a:	f000 f9c9 	bl	800ea20 <_free_r>
 800e68e:	2300      	movs	r3, #0
 800e690:	6363      	str	r3, [r4, #52]	; 0x34
 800e692:	89a3      	ldrh	r3, [r4, #12]
 800e694:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e698:	81a3      	strh	r3, [r4, #12]
 800e69a:	2300      	movs	r3, #0
 800e69c:	6063      	str	r3, [r4, #4]
 800e69e:	6923      	ldr	r3, [r4, #16]
 800e6a0:	6023      	str	r3, [r4, #0]
 800e6a2:	89a3      	ldrh	r3, [r4, #12]
 800e6a4:	f043 0308 	orr.w	r3, r3, #8
 800e6a8:	81a3      	strh	r3, [r4, #12]
 800e6aa:	6923      	ldr	r3, [r4, #16]
 800e6ac:	b94b      	cbnz	r3, 800e6c2 <__swsetup_r+0x9a>
 800e6ae:	89a3      	ldrh	r3, [r4, #12]
 800e6b0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e6b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e6b8:	d003      	beq.n	800e6c2 <__swsetup_r+0x9a>
 800e6ba:	4621      	mov	r1, r4
 800e6bc:	4630      	mov	r0, r6
 800e6be:	f000 f95b 	bl	800e978 <__smakebuf_r>
 800e6c2:	89a0      	ldrh	r0, [r4, #12]
 800e6c4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e6c8:	f010 0301 	ands.w	r3, r0, #1
 800e6cc:	d00a      	beq.n	800e6e4 <__swsetup_r+0xbc>
 800e6ce:	2300      	movs	r3, #0
 800e6d0:	60a3      	str	r3, [r4, #8]
 800e6d2:	6963      	ldr	r3, [r4, #20]
 800e6d4:	425b      	negs	r3, r3
 800e6d6:	61a3      	str	r3, [r4, #24]
 800e6d8:	6923      	ldr	r3, [r4, #16]
 800e6da:	b943      	cbnz	r3, 800e6ee <__swsetup_r+0xc6>
 800e6dc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800e6e0:	d1ba      	bne.n	800e658 <__swsetup_r+0x30>
 800e6e2:	bd70      	pop	{r4, r5, r6, pc}
 800e6e4:	0781      	lsls	r1, r0, #30
 800e6e6:	bf58      	it	pl
 800e6e8:	6963      	ldrpl	r3, [r4, #20]
 800e6ea:	60a3      	str	r3, [r4, #8]
 800e6ec:	e7f4      	b.n	800e6d8 <__swsetup_r+0xb0>
 800e6ee:	2000      	movs	r0, #0
 800e6f0:	e7f7      	b.n	800e6e2 <__swsetup_r+0xba>
 800e6f2:	bf00      	nop
 800e6f4:	20000048 	.word	0x20000048
 800e6f8:	08010178 	.word	0x08010178
 800e6fc:	08010198 	.word	0x08010198
 800e700:	08010158 	.word	0x08010158

0800e704 <__assert_func>:
 800e704:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e706:	4614      	mov	r4, r2
 800e708:	461a      	mov	r2, r3
 800e70a:	4b09      	ldr	r3, [pc, #36]	; (800e730 <__assert_func+0x2c>)
 800e70c:	681b      	ldr	r3, [r3, #0]
 800e70e:	4605      	mov	r5, r0
 800e710:	68d8      	ldr	r0, [r3, #12]
 800e712:	b14c      	cbz	r4, 800e728 <__assert_func+0x24>
 800e714:	4b07      	ldr	r3, [pc, #28]	; (800e734 <__assert_func+0x30>)
 800e716:	9100      	str	r1, [sp, #0]
 800e718:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e71c:	4906      	ldr	r1, [pc, #24]	; (800e738 <__assert_func+0x34>)
 800e71e:	462b      	mov	r3, r5
 800e720:	f000 f8e0 	bl	800e8e4 <fiprintf>
 800e724:	f000 fe24 	bl	800f370 <abort>
 800e728:	4b04      	ldr	r3, [pc, #16]	; (800e73c <__assert_func+0x38>)
 800e72a:	461c      	mov	r4, r3
 800e72c:	e7f3      	b.n	800e716 <__assert_func+0x12>
 800e72e:	bf00      	nop
 800e730:	20000048 	.word	0x20000048
 800e734:	08010230 	.word	0x08010230
 800e738:	0801023d 	.word	0x0801023d
 800e73c:	0801026b 	.word	0x0801026b

0800e740 <_close_r>:
 800e740:	b538      	push	{r3, r4, r5, lr}
 800e742:	4d06      	ldr	r5, [pc, #24]	; (800e75c <_close_r+0x1c>)
 800e744:	2300      	movs	r3, #0
 800e746:	4604      	mov	r4, r0
 800e748:	4608      	mov	r0, r1
 800e74a:	602b      	str	r3, [r5, #0]
 800e74c:	f7f3 fd4d 	bl	80021ea <_close>
 800e750:	1c43      	adds	r3, r0, #1
 800e752:	d102      	bne.n	800e75a <_close_r+0x1a>
 800e754:	682b      	ldr	r3, [r5, #0]
 800e756:	b103      	cbz	r3, 800e75a <_close_r+0x1a>
 800e758:	6023      	str	r3, [r4, #0]
 800e75a:	bd38      	pop	{r3, r4, r5, pc}
 800e75c:	20003d78 	.word	0x20003d78

0800e760 <__sflush_r>:
 800e760:	898a      	ldrh	r2, [r1, #12]
 800e762:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e766:	4605      	mov	r5, r0
 800e768:	0710      	lsls	r0, r2, #28
 800e76a:	460c      	mov	r4, r1
 800e76c:	d458      	bmi.n	800e820 <__sflush_r+0xc0>
 800e76e:	684b      	ldr	r3, [r1, #4]
 800e770:	2b00      	cmp	r3, #0
 800e772:	dc05      	bgt.n	800e780 <__sflush_r+0x20>
 800e774:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e776:	2b00      	cmp	r3, #0
 800e778:	dc02      	bgt.n	800e780 <__sflush_r+0x20>
 800e77a:	2000      	movs	r0, #0
 800e77c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e780:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e782:	2e00      	cmp	r6, #0
 800e784:	d0f9      	beq.n	800e77a <__sflush_r+0x1a>
 800e786:	2300      	movs	r3, #0
 800e788:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e78c:	682f      	ldr	r7, [r5, #0]
 800e78e:	602b      	str	r3, [r5, #0]
 800e790:	d032      	beq.n	800e7f8 <__sflush_r+0x98>
 800e792:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e794:	89a3      	ldrh	r3, [r4, #12]
 800e796:	075a      	lsls	r2, r3, #29
 800e798:	d505      	bpl.n	800e7a6 <__sflush_r+0x46>
 800e79a:	6863      	ldr	r3, [r4, #4]
 800e79c:	1ac0      	subs	r0, r0, r3
 800e79e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e7a0:	b10b      	cbz	r3, 800e7a6 <__sflush_r+0x46>
 800e7a2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e7a4:	1ac0      	subs	r0, r0, r3
 800e7a6:	2300      	movs	r3, #0
 800e7a8:	4602      	mov	r2, r0
 800e7aa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e7ac:	6a21      	ldr	r1, [r4, #32]
 800e7ae:	4628      	mov	r0, r5
 800e7b0:	47b0      	blx	r6
 800e7b2:	1c43      	adds	r3, r0, #1
 800e7b4:	89a3      	ldrh	r3, [r4, #12]
 800e7b6:	d106      	bne.n	800e7c6 <__sflush_r+0x66>
 800e7b8:	6829      	ldr	r1, [r5, #0]
 800e7ba:	291d      	cmp	r1, #29
 800e7bc:	d82c      	bhi.n	800e818 <__sflush_r+0xb8>
 800e7be:	4a2a      	ldr	r2, [pc, #168]	; (800e868 <__sflush_r+0x108>)
 800e7c0:	40ca      	lsrs	r2, r1
 800e7c2:	07d6      	lsls	r6, r2, #31
 800e7c4:	d528      	bpl.n	800e818 <__sflush_r+0xb8>
 800e7c6:	2200      	movs	r2, #0
 800e7c8:	6062      	str	r2, [r4, #4]
 800e7ca:	04d9      	lsls	r1, r3, #19
 800e7cc:	6922      	ldr	r2, [r4, #16]
 800e7ce:	6022      	str	r2, [r4, #0]
 800e7d0:	d504      	bpl.n	800e7dc <__sflush_r+0x7c>
 800e7d2:	1c42      	adds	r2, r0, #1
 800e7d4:	d101      	bne.n	800e7da <__sflush_r+0x7a>
 800e7d6:	682b      	ldr	r3, [r5, #0]
 800e7d8:	b903      	cbnz	r3, 800e7dc <__sflush_r+0x7c>
 800e7da:	6560      	str	r0, [r4, #84]	; 0x54
 800e7dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e7de:	602f      	str	r7, [r5, #0]
 800e7e0:	2900      	cmp	r1, #0
 800e7e2:	d0ca      	beq.n	800e77a <__sflush_r+0x1a>
 800e7e4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e7e8:	4299      	cmp	r1, r3
 800e7ea:	d002      	beq.n	800e7f2 <__sflush_r+0x92>
 800e7ec:	4628      	mov	r0, r5
 800e7ee:	f000 f917 	bl	800ea20 <_free_r>
 800e7f2:	2000      	movs	r0, #0
 800e7f4:	6360      	str	r0, [r4, #52]	; 0x34
 800e7f6:	e7c1      	b.n	800e77c <__sflush_r+0x1c>
 800e7f8:	6a21      	ldr	r1, [r4, #32]
 800e7fa:	2301      	movs	r3, #1
 800e7fc:	4628      	mov	r0, r5
 800e7fe:	47b0      	blx	r6
 800e800:	1c41      	adds	r1, r0, #1
 800e802:	d1c7      	bne.n	800e794 <__sflush_r+0x34>
 800e804:	682b      	ldr	r3, [r5, #0]
 800e806:	2b00      	cmp	r3, #0
 800e808:	d0c4      	beq.n	800e794 <__sflush_r+0x34>
 800e80a:	2b1d      	cmp	r3, #29
 800e80c:	d001      	beq.n	800e812 <__sflush_r+0xb2>
 800e80e:	2b16      	cmp	r3, #22
 800e810:	d101      	bne.n	800e816 <__sflush_r+0xb6>
 800e812:	602f      	str	r7, [r5, #0]
 800e814:	e7b1      	b.n	800e77a <__sflush_r+0x1a>
 800e816:	89a3      	ldrh	r3, [r4, #12]
 800e818:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e81c:	81a3      	strh	r3, [r4, #12]
 800e81e:	e7ad      	b.n	800e77c <__sflush_r+0x1c>
 800e820:	690f      	ldr	r7, [r1, #16]
 800e822:	2f00      	cmp	r7, #0
 800e824:	d0a9      	beq.n	800e77a <__sflush_r+0x1a>
 800e826:	0793      	lsls	r3, r2, #30
 800e828:	680e      	ldr	r6, [r1, #0]
 800e82a:	bf08      	it	eq
 800e82c:	694b      	ldreq	r3, [r1, #20]
 800e82e:	600f      	str	r7, [r1, #0]
 800e830:	bf18      	it	ne
 800e832:	2300      	movne	r3, #0
 800e834:	eba6 0807 	sub.w	r8, r6, r7
 800e838:	608b      	str	r3, [r1, #8]
 800e83a:	f1b8 0f00 	cmp.w	r8, #0
 800e83e:	dd9c      	ble.n	800e77a <__sflush_r+0x1a>
 800e840:	6a21      	ldr	r1, [r4, #32]
 800e842:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e844:	4643      	mov	r3, r8
 800e846:	463a      	mov	r2, r7
 800e848:	4628      	mov	r0, r5
 800e84a:	47b0      	blx	r6
 800e84c:	2800      	cmp	r0, #0
 800e84e:	dc06      	bgt.n	800e85e <__sflush_r+0xfe>
 800e850:	89a3      	ldrh	r3, [r4, #12]
 800e852:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e856:	81a3      	strh	r3, [r4, #12]
 800e858:	f04f 30ff 	mov.w	r0, #4294967295
 800e85c:	e78e      	b.n	800e77c <__sflush_r+0x1c>
 800e85e:	4407      	add	r7, r0
 800e860:	eba8 0800 	sub.w	r8, r8, r0
 800e864:	e7e9      	b.n	800e83a <__sflush_r+0xda>
 800e866:	bf00      	nop
 800e868:	20400001 	.word	0x20400001

0800e86c <_fflush_r>:
 800e86c:	b538      	push	{r3, r4, r5, lr}
 800e86e:	690b      	ldr	r3, [r1, #16]
 800e870:	4605      	mov	r5, r0
 800e872:	460c      	mov	r4, r1
 800e874:	b913      	cbnz	r3, 800e87c <_fflush_r+0x10>
 800e876:	2500      	movs	r5, #0
 800e878:	4628      	mov	r0, r5
 800e87a:	bd38      	pop	{r3, r4, r5, pc}
 800e87c:	b118      	cbz	r0, 800e886 <_fflush_r+0x1a>
 800e87e:	6983      	ldr	r3, [r0, #24]
 800e880:	b90b      	cbnz	r3, 800e886 <_fflush_r+0x1a>
 800e882:	f7ff fad9 	bl	800de38 <__sinit>
 800e886:	4b14      	ldr	r3, [pc, #80]	; (800e8d8 <_fflush_r+0x6c>)
 800e888:	429c      	cmp	r4, r3
 800e88a:	d11b      	bne.n	800e8c4 <_fflush_r+0x58>
 800e88c:	686c      	ldr	r4, [r5, #4]
 800e88e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e892:	2b00      	cmp	r3, #0
 800e894:	d0ef      	beq.n	800e876 <_fflush_r+0xa>
 800e896:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e898:	07d0      	lsls	r0, r2, #31
 800e89a:	d404      	bmi.n	800e8a6 <_fflush_r+0x3a>
 800e89c:	0599      	lsls	r1, r3, #22
 800e89e:	d402      	bmi.n	800e8a6 <_fflush_r+0x3a>
 800e8a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e8a2:	f7ff fb8c 	bl	800dfbe <__retarget_lock_acquire_recursive>
 800e8a6:	4628      	mov	r0, r5
 800e8a8:	4621      	mov	r1, r4
 800e8aa:	f7ff ff59 	bl	800e760 <__sflush_r>
 800e8ae:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e8b0:	07da      	lsls	r2, r3, #31
 800e8b2:	4605      	mov	r5, r0
 800e8b4:	d4e0      	bmi.n	800e878 <_fflush_r+0xc>
 800e8b6:	89a3      	ldrh	r3, [r4, #12]
 800e8b8:	059b      	lsls	r3, r3, #22
 800e8ba:	d4dd      	bmi.n	800e878 <_fflush_r+0xc>
 800e8bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e8be:	f7ff fb7f 	bl	800dfc0 <__retarget_lock_release_recursive>
 800e8c2:	e7d9      	b.n	800e878 <_fflush_r+0xc>
 800e8c4:	4b05      	ldr	r3, [pc, #20]	; (800e8dc <_fflush_r+0x70>)
 800e8c6:	429c      	cmp	r4, r3
 800e8c8:	d101      	bne.n	800e8ce <_fflush_r+0x62>
 800e8ca:	68ac      	ldr	r4, [r5, #8]
 800e8cc:	e7df      	b.n	800e88e <_fflush_r+0x22>
 800e8ce:	4b04      	ldr	r3, [pc, #16]	; (800e8e0 <_fflush_r+0x74>)
 800e8d0:	429c      	cmp	r4, r3
 800e8d2:	bf08      	it	eq
 800e8d4:	68ec      	ldreq	r4, [r5, #12]
 800e8d6:	e7da      	b.n	800e88e <_fflush_r+0x22>
 800e8d8:	08010178 	.word	0x08010178
 800e8dc:	08010198 	.word	0x08010198
 800e8e0:	08010158 	.word	0x08010158

0800e8e4 <fiprintf>:
 800e8e4:	b40e      	push	{r1, r2, r3}
 800e8e6:	b503      	push	{r0, r1, lr}
 800e8e8:	4601      	mov	r1, r0
 800e8ea:	ab03      	add	r3, sp, #12
 800e8ec:	4805      	ldr	r0, [pc, #20]	; (800e904 <fiprintf+0x20>)
 800e8ee:	f853 2b04 	ldr.w	r2, [r3], #4
 800e8f2:	6800      	ldr	r0, [r0, #0]
 800e8f4:	9301      	str	r3, [sp, #4]
 800e8f6:	f000 fa65 	bl	800edc4 <_vfiprintf_r>
 800e8fa:	b002      	add	sp, #8
 800e8fc:	f85d eb04 	ldr.w	lr, [sp], #4
 800e900:	b003      	add	sp, #12
 800e902:	4770      	bx	lr
 800e904:	20000048 	.word	0x20000048

0800e908 <_lseek_r>:
 800e908:	b538      	push	{r3, r4, r5, lr}
 800e90a:	4d07      	ldr	r5, [pc, #28]	; (800e928 <_lseek_r+0x20>)
 800e90c:	4604      	mov	r4, r0
 800e90e:	4608      	mov	r0, r1
 800e910:	4611      	mov	r1, r2
 800e912:	2200      	movs	r2, #0
 800e914:	602a      	str	r2, [r5, #0]
 800e916:	461a      	mov	r2, r3
 800e918:	f7f3 fc8e 	bl	8002238 <_lseek>
 800e91c:	1c43      	adds	r3, r0, #1
 800e91e:	d102      	bne.n	800e926 <_lseek_r+0x1e>
 800e920:	682b      	ldr	r3, [r5, #0]
 800e922:	b103      	cbz	r3, 800e926 <_lseek_r+0x1e>
 800e924:	6023      	str	r3, [r4, #0]
 800e926:	bd38      	pop	{r3, r4, r5, pc}
 800e928:	20003d78 	.word	0x20003d78

0800e92c <__swhatbuf_r>:
 800e92c:	b570      	push	{r4, r5, r6, lr}
 800e92e:	460e      	mov	r6, r1
 800e930:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e934:	2900      	cmp	r1, #0
 800e936:	b096      	sub	sp, #88	; 0x58
 800e938:	4614      	mov	r4, r2
 800e93a:	461d      	mov	r5, r3
 800e93c:	da08      	bge.n	800e950 <__swhatbuf_r+0x24>
 800e93e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800e942:	2200      	movs	r2, #0
 800e944:	602a      	str	r2, [r5, #0]
 800e946:	061a      	lsls	r2, r3, #24
 800e948:	d410      	bmi.n	800e96c <__swhatbuf_r+0x40>
 800e94a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e94e:	e00e      	b.n	800e96e <__swhatbuf_r+0x42>
 800e950:	466a      	mov	r2, sp
 800e952:	f000 fd15 	bl	800f380 <_fstat_r>
 800e956:	2800      	cmp	r0, #0
 800e958:	dbf1      	blt.n	800e93e <__swhatbuf_r+0x12>
 800e95a:	9a01      	ldr	r2, [sp, #4]
 800e95c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800e960:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800e964:	425a      	negs	r2, r3
 800e966:	415a      	adcs	r2, r3
 800e968:	602a      	str	r2, [r5, #0]
 800e96a:	e7ee      	b.n	800e94a <__swhatbuf_r+0x1e>
 800e96c:	2340      	movs	r3, #64	; 0x40
 800e96e:	2000      	movs	r0, #0
 800e970:	6023      	str	r3, [r4, #0]
 800e972:	b016      	add	sp, #88	; 0x58
 800e974:	bd70      	pop	{r4, r5, r6, pc}
	...

0800e978 <__smakebuf_r>:
 800e978:	898b      	ldrh	r3, [r1, #12]
 800e97a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e97c:	079d      	lsls	r5, r3, #30
 800e97e:	4606      	mov	r6, r0
 800e980:	460c      	mov	r4, r1
 800e982:	d507      	bpl.n	800e994 <__smakebuf_r+0x1c>
 800e984:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e988:	6023      	str	r3, [r4, #0]
 800e98a:	6123      	str	r3, [r4, #16]
 800e98c:	2301      	movs	r3, #1
 800e98e:	6163      	str	r3, [r4, #20]
 800e990:	b002      	add	sp, #8
 800e992:	bd70      	pop	{r4, r5, r6, pc}
 800e994:	ab01      	add	r3, sp, #4
 800e996:	466a      	mov	r2, sp
 800e998:	f7ff ffc8 	bl	800e92c <__swhatbuf_r>
 800e99c:	9900      	ldr	r1, [sp, #0]
 800e99e:	4605      	mov	r5, r0
 800e9a0:	4630      	mov	r0, r6
 800e9a2:	f7ff fb45 	bl	800e030 <_malloc_r>
 800e9a6:	b948      	cbnz	r0, 800e9bc <__smakebuf_r+0x44>
 800e9a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e9ac:	059a      	lsls	r2, r3, #22
 800e9ae:	d4ef      	bmi.n	800e990 <__smakebuf_r+0x18>
 800e9b0:	f023 0303 	bic.w	r3, r3, #3
 800e9b4:	f043 0302 	orr.w	r3, r3, #2
 800e9b8:	81a3      	strh	r3, [r4, #12]
 800e9ba:	e7e3      	b.n	800e984 <__smakebuf_r+0xc>
 800e9bc:	4b0d      	ldr	r3, [pc, #52]	; (800e9f4 <__smakebuf_r+0x7c>)
 800e9be:	62b3      	str	r3, [r6, #40]	; 0x28
 800e9c0:	89a3      	ldrh	r3, [r4, #12]
 800e9c2:	6020      	str	r0, [r4, #0]
 800e9c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e9c8:	81a3      	strh	r3, [r4, #12]
 800e9ca:	9b00      	ldr	r3, [sp, #0]
 800e9cc:	6163      	str	r3, [r4, #20]
 800e9ce:	9b01      	ldr	r3, [sp, #4]
 800e9d0:	6120      	str	r0, [r4, #16]
 800e9d2:	b15b      	cbz	r3, 800e9ec <__smakebuf_r+0x74>
 800e9d4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e9d8:	4630      	mov	r0, r6
 800e9da:	f000 fce3 	bl	800f3a4 <_isatty_r>
 800e9de:	b128      	cbz	r0, 800e9ec <__smakebuf_r+0x74>
 800e9e0:	89a3      	ldrh	r3, [r4, #12]
 800e9e2:	f023 0303 	bic.w	r3, r3, #3
 800e9e6:	f043 0301 	orr.w	r3, r3, #1
 800e9ea:	81a3      	strh	r3, [r4, #12]
 800e9ec:	89a0      	ldrh	r0, [r4, #12]
 800e9ee:	4305      	orrs	r5, r0
 800e9f0:	81a5      	strh	r5, [r4, #12]
 800e9f2:	e7cd      	b.n	800e990 <__smakebuf_r+0x18>
 800e9f4:	0800ddd1 	.word	0x0800ddd1

0800e9f8 <malloc>:
 800e9f8:	4b02      	ldr	r3, [pc, #8]	; (800ea04 <malloc+0xc>)
 800e9fa:	4601      	mov	r1, r0
 800e9fc:	6818      	ldr	r0, [r3, #0]
 800e9fe:	f7ff bb17 	b.w	800e030 <_malloc_r>
 800ea02:	bf00      	nop
 800ea04:	20000048 	.word	0x20000048

0800ea08 <__malloc_lock>:
 800ea08:	4801      	ldr	r0, [pc, #4]	; (800ea10 <__malloc_lock+0x8>)
 800ea0a:	f7ff bad8 	b.w	800dfbe <__retarget_lock_acquire_recursive>
 800ea0e:	bf00      	nop
 800ea10:	20003d6c 	.word	0x20003d6c

0800ea14 <__malloc_unlock>:
 800ea14:	4801      	ldr	r0, [pc, #4]	; (800ea1c <__malloc_unlock+0x8>)
 800ea16:	f7ff bad3 	b.w	800dfc0 <__retarget_lock_release_recursive>
 800ea1a:	bf00      	nop
 800ea1c:	20003d6c 	.word	0x20003d6c

0800ea20 <_free_r>:
 800ea20:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ea22:	2900      	cmp	r1, #0
 800ea24:	d044      	beq.n	800eab0 <_free_r+0x90>
 800ea26:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ea2a:	9001      	str	r0, [sp, #4]
 800ea2c:	2b00      	cmp	r3, #0
 800ea2e:	f1a1 0404 	sub.w	r4, r1, #4
 800ea32:	bfb8      	it	lt
 800ea34:	18e4      	addlt	r4, r4, r3
 800ea36:	f7ff ffe7 	bl	800ea08 <__malloc_lock>
 800ea3a:	4a1e      	ldr	r2, [pc, #120]	; (800eab4 <_free_r+0x94>)
 800ea3c:	9801      	ldr	r0, [sp, #4]
 800ea3e:	6813      	ldr	r3, [r2, #0]
 800ea40:	b933      	cbnz	r3, 800ea50 <_free_r+0x30>
 800ea42:	6063      	str	r3, [r4, #4]
 800ea44:	6014      	str	r4, [r2, #0]
 800ea46:	b003      	add	sp, #12
 800ea48:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ea4c:	f7ff bfe2 	b.w	800ea14 <__malloc_unlock>
 800ea50:	42a3      	cmp	r3, r4
 800ea52:	d908      	bls.n	800ea66 <_free_r+0x46>
 800ea54:	6825      	ldr	r5, [r4, #0]
 800ea56:	1961      	adds	r1, r4, r5
 800ea58:	428b      	cmp	r3, r1
 800ea5a:	bf01      	itttt	eq
 800ea5c:	6819      	ldreq	r1, [r3, #0]
 800ea5e:	685b      	ldreq	r3, [r3, #4]
 800ea60:	1949      	addeq	r1, r1, r5
 800ea62:	6021      	streq	r1, [r4, #0]
 800ea64:	e7ed      	b.n	800ea42 <_free_r+0x22>
 800ea66:	461a      	mov	r2, r3
 800ea68:	685b      	ldr	r3, [r3, #4]
 800ea6a:	b10b      	cbz	r3, 800ea70 <_free_r+0x50>
 800ea6c:	42a3      	cmp	r3, r4
 800ea6e:	d9fa      	bls.n	800ea66 <_free_r+0x46>
 800ea70:	6811      	ldr	r1, [r2, #0]
 800ea72:	1855      	adds	r5, r2, r1
 800ea74:	42a5      	cmp	r5, r4
 800ea76:	d10b      	bne.n	800ea90 <_free_r+0x70>
 800ea78:	6824      	ldr	r4, [r4, #0]
 800ea7a:	4421      	add	r1, r4
 800ea7c:	1854      	adds	r4, r2, r1
 800ea7e:	42a3      	cmp	r3, r4
 800ea80:	6011      	str	r1, [r2, #0]
 800ea82:	d1e0      	bne.n	800ea46 <_free_r+0x26>
 800ea84:	681c      	ldr	r4, [r3, #0]
 800ea86:	685b      	ldr	r3, [r3, #4]
 800ea88:	6053      	str	r3, [r2, #4]
 800ea8a:	4421      	add	r1, r4
 800ea8c:	6011      	str	r1, [r2, #0]
 800ea8e:	e7da      	b.n	800ea46 <_free_r+0x26>
 800ea90:	d902      	bls.n	800ea98 <_free_r+0x78>
 800ea92:	230c      	movs	r3, #12
 800ea94:	6003      	str	r3, [r0, #0]
 800ea96:	e7d6      	b.n	800ea46 <_free_r+0x26>
 800ea98:	6825      	ldr	r5, [r4, #0]
 800ea9a:	1961      	adds	r1, r4, r5
 800ea9c:	428b      	cmp	r3, r1
 800ea9e:	bf04      	itt	eq
 800eaa0:	6819      	ldreq	r1, [r3, #0]
 800eaa2:	685b      	ldreq	r3, [r3, #4]
 800eaa4:	6063      	str	r3, [r4, #4]
 800eaa6:	bf04      	itt	eq
 800eaa8:	1949      	addeq	r1, r1, r5
 800eaaa:	6021      	streq	r1, [r4, #0]
 800eaac:	6054      	str	r4, [r2, #4]
 800eaae:	e7ca      	b.n	800ea46 <_free_r+0x26>
 800eab0:	b003      	add	sp, #12
 800eab2:	bd30      	pop	{r4, r5, pc}
 800eab4:	20003d70 	.word	0x20003d70

0800eab8 <__ssputs_r>:
 800eab8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800eabc:	688e      	ldr	r6, [r1, #8]
 800eabe:	429e      	cmp	r6, r3
 800eac0:	4682      	mov	sl, r0
 800eac2:	460c      	mov	r4, r1
 800eac4:	4690      	mov	r8, r2
 800eac6:	461f      	mov	r7, r3
 800eac8:	d838      	bhi.n	800eb3c <__ssputs_r+0x84>
 800eaca:	898a      	ldrh	r2, [r1, #12]
 800eacc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ead0:	d032      	beq.n	800eb38 <__ssputs_r+0x80>
 800ead2:	6825      	ldr	r5, [r4, #0]
 800ead4:	6909      	ldr	r1, [r1, #16]
 800ead6:	eba5 0901 	sub.w	r9, r5, r1
 800eada:	6965      	ldr	r5, [r4, #20]
 800eadc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800eae0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800eae4:	3301      	adds	r3, #1
 800eae6:	444b      	add	r3, r9
 800eae8:	106d      	asrs	r5, r5, #1
 800eaea:	429d      	cmp	r5, r3
 800eaec:	bf38      	it	cc
 800eaee:	461d      	movcc	r5, r3
 800eaf0:	0553      	lsls	r3, r2, #21
 800eaf2:	d531      	bpl.n	800eb58 <__ssputs_r+0xa0>
 800eaf4:	4629      	mov	r1, r5
 800eaf6:	f7ff fa9b 	bl	800e030 <_malloc_r>
 800eafa:	4606      	mov	r6, r0
 800eafc:	b950      	cbnz	r0, 800eb14 <__ssputs_r+0x5c>
 800eafe:	230c      	movs	r3, #12
 800eb00:	f8ca 3000 	str.w	r3, [sl]
 800eb04:	89a3      	ldrh	r3, [r4, #12]
 800eb06:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800eb0a:	81a3      	strh	r3, [r4, #12]
 800eb0c:	f04f 30ff 	mov.w	r0, #4294967295
 800eb10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eb14:	6921      	ldr	r1, [r4, #16]
 800eb16:	464a      	mov	r2, r9
 800eb18:	f7ff fa53 	bl	800dfc2 <memcpy>
 800eb1c:	89a3      	ldrh	r3, [r4, #12]
 800eb1e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800eb22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800eb26:	81a3      	strh	r3, [r4, #12]
 800eb28:	6126      	str	r6, [r4, #16]
 800eb2a:	6165      	str	r5, [r4, #20]
 800eb2c:	444e      	add	r6, r9
 800eb2e:	eba5 0509 	sub.w	r5, r5, r9
 800eb32:	6026      	str	r6, [r4, #0]
 800eb34:	60a5      	str	r5, [r4, #8]
 800eb36:	463e      	mov	r6, r7
 800eb38:	42be      	cmp	r6, r7
 800eb3a:	d900      	bls.n	800eb3e <__ssputs_r+0x86>
 800eb3c:	463e      	mov	r6, r7
 800eb3e:	6820      	ldr	r0, [r4, #0]
 800eb40:	4632      	mov	r2, r6
 800eb42:	4641      	mov	r1, r8
 800eb44:	f000 fc3e 	bl	800f3c4 <memmove>
 800eb48:	68a3      	ldr	r3, [r4, #8]
 800eb4a:	1b9b      	subs	r3, r3, r6
 800eb4c:	60a3      	str	r3, [r4, #8]
 800eb4e:	6823      	ldr	r3, [r4, #0]
 800eb50:	4433      	add	r3, r6
 800eb52:	6023      	str	r3, [r4, #0]
 800eb54:	2000      	movs	r0, #0
 800eb56:	e7db      	b.n	800eb10 <__ssputs_r+0x58>
 800eb58:	462a      	mov	r2, r5
 800eb5a:	f000 fc4d 	bl	800f3f8 <_realloc_r>
 800eb5e:	4606      	mov	r6, r0
 800eb60:	2800      	cmp	r0, #0
 800eb62:	d1e1      	bne.n	800eb28 <__ssputs_r+0x70>
 800eb64:	6921      	ldr	r1, [r4, #16]
 800eb66:	4650      	mov	r0, sl
 800eb68:	f7ff ff5a 	bl	800ea20 <_free_r>
 800eb6c:	e7c7      	b.n	800eafe <__ssputs_r+0x46>
	...

0800eb70 <_svfiprintf_r>:
 800eb70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb74:	4698      	mov	r8, r3
 800eb76:	898b      	ldrh	r3, [r1, #12]
 800eb78:	061b      	lsls	r3, r3, #24
 800eb7a:	b09d      	sub	sp, #116	; 0x74
 800eb7c:	4607      	mov	r7, r0
 800eb7e:	460d      	mov	r5, r1
 800eb80:	4614      	mov	r4, r2
 800eb82:	d50e      	bpl.n	800eba2 <_svfiprintf_r+0x32>
 800eb84:	690b      	ldr	r3, [r1, #16]
 800eb86:	b963      	cbnz	r3, 800eba2 <_svfiprintf_r+0x32>
 800eb88:	2140      	movs	r1, #64	; 0x40
 800eb8a:	f7ff fa51 	bl	800e030 <_malloc_r>
 800eb8e:	6028      	str	r0, [r5, #0]
 800eb90:	6128      	str	r0, [r5, #16]
 800eb92:	b920      	cbnz	r0, 800eb9e <_svfiprintf_r+0x2e>
 800eb94:	230c      	movs	r3, #12
 800eb96:	603b      	str	r3, [r7, #0]
 800eb98:	f04f 30ff 	mov.w	r0, #4294967295
 800eb9c:	e0d1      	b.n	800ed42 <_svfiprintf_r+0x1d2>
 800eb9e:	2340      	movs	r3, #64	; 0x40
 800eba0:	616b      	str	r3, [r5, #20]
 800eba2:	2300      	movs	r3, #0
 800eba4:	9309      	str	r3, [sp, #36]	; 0x24
 800eba6:	2320      	movs	r3, #32
 800eba8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ebac:	f8cd 800c 	str.w	r8, [sp, #12]
 800ebb0:	2330      	movs	r3, #48	; 0x30
 800ebb2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800ed5c <_svfiprintf_r+0x1ec>
 800ebb6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ebba:	f04f 0901 	mov.w	r9, #1
 800ebbe:	4623      	mov	r3, r4
 800ebc0:	469a      	mov	sl, r3
 800ebc2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ebc6:	b10a      	cbz	r2, 800ebcc <_svfiprintf_r+0x5c>
 800ebc8:	2a25      	cmp	r2, #37	; 0x25
 800ebca:	d1f9      	bne.n	800ebc0 <_svfiprintf_r+0x50>
 800ebcc:	ebba 0b04 	subs.w	fp, sl, r4
 800ebd0:	d00b      	beq.n	800ebea <_svfiprintf_r+0x7a>
 800ebd2:	465b      	mov	r3, fp
 800ebd4:	4622      	mov	r2, r4
 800ebd6:	4629      	mov	r1, r5
 800ebd8:	4638      	mov	r0, r7
 800ebda:	f7ff ff6d 	bl	800eab8 <__ssputs_r>
 800ebde:	3001      	adds	r0, #1
 800ebe0:	f000 80aa 	beq.w	800ed38 <_svfiprintf_r+0x1c8>
 800ebe4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ebe6:	445a      	add	r2, fp
 800ebe8:	9209      	str	r2, [sp, #36]	; 0x24
 800ebea:	f89a 3000 	ldrb.w	r3, [sl]
 800ebee:	2b00      	cmp	r3, #0
 800ebf0:	f000 80a2 	beq.w	800ed38 <_svfiprintf_r+0x1c8>
 800ebf4:	2300      	movs	r3, #0
 800ebf6:	f04f 32ff 	mov.w	r2, #4294967295
 800ebfa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ebfe:	f10a 0a01 	add.w	sl, sl, #1
 800ec02:	9304      	str	r3, [sp, #16]
 800ec04:	9307      	str	r3, [sp, #28]
 800ec06:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ec0a:	931a      	str	r3, [sp, #104]	; 0x68
 800ec0c:	4654      	mov	r4, sl
 800ec0e:	2205      	movs	r2, #5
 800ec10:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ec14:	4851      	ldr	r0, [pc, #324]	; (800ed5c <_svfiprintf_r+0x1ec>)
 800ec16:	f7f1 fae3 	bl	80001e0 <memchr>
 800ec1a:	9a04      	ldr	r2, [sp, #16]
 800ec1c:	b9d8      	cbnz	r0, 800ec56 <_svfiprintf_r+0xe6>
 800ec1e:	06d0      	lsls	r0, r2, #27
 800ec20:	bf44      	itt	mi
 800ec22:	2320      	movmi	r3, #32
 800ec24:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ec28:	0711      	lsls	r1, r2, #28
 800ec2a:	bf44      	itt	mi
 800ec2c:	232b      	movmi	r3, #43	; 0x2b
 800ec2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ec32:	f89a 3000 	ldrb.w	r3, [sl]
 800ec36:	2b2a      	cmp	r3, #42	; 0x2a
 800ec38:	d015      	beq.n	800ec66 <_svfiprintf_r+0xf6>
 800ec3a:	9a07      	ldr	r2, [sp, #28]
 800ec3c:	4654      	mov	r4, sl
 800ec3e:	2000      	movs	r0, #0
 800ec40:	f04f 0c0a 	mov.w	ip, #10
 800ec44:	4621      	mov	r1, r4
 800ec46:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ec4a:	3b30      	subs	r3, #48	; 0x30
 800ec4c:	2b09      	cmp	r3, #9
 800ec4e:	d94e      	bls.n	800ecee <_svfiprintf_r+0x17e>
 800ec50:	b1b0      	cbz	r0, 800ec80 <_svfiprintf_r+0x110>
 800ec52:	9207      	str	r2, [sp, #28]
 800ec54:	e014      	b.n	800ec80 <_svfiprintf_r+0x110>
 800ec56:	eba0 0308 	sub.w	r3, r0, r8
 800ec5a:	fa09 f303 	lsl.w	r3, r9, r3
 800ec5e:	4313      	orrs	r3, r2
 800ec60:	9304      	str	r3, [sp, #16]
 800ec62:	46a2      	mov	sl, r4
 800ec64:	e7d2      	b.n	800ec0c <_svfiprintf_r+0x9c>
 800ec66:	9b03      	ldr	r3, [sp, #12]
 800ec68:	1d19      	adds	r1, r3, #4
 800ec6a:	681b      	ldr	r3, [r3, #0]
 800ec6c:	9103      	str	r1, [sp, #12]
 800ec6e:	2b00      	cmp	r3, #0
 800ec70:	bfbb      	ittet	lt
 800ec72:	425b      	neglt	r3, r3
 800ec74:	f042 0202 	orrlt.w	r2, r2, #2
 800ec78:	9307      	strge	r3, [sp, #28]
 800ec7a:	9307      	strlt	r3, [sp, #28]
 800ec7c:	bfb8      	it	lt
 800ec7e:	9204      	strlt	r2, [sp, #16]
 800ec80:	7823      	ldrb	r3, [r4, #0]
 800ec82:	2b2e      	cmp	r3, #46	; 0x2e
 800ec84:	d10c      	bne.n	800eca0 <_svfiprintf_r+0x130>
 800ec86:	7863      	ldrb	r3, [r4, #1]
 800ec88:	2b2a      	cmp	r3, #42	; 0x2a
 800ec8a:	d135      	bne.n	800ecf8 <_svfiprintf_r+0x188>
 800ec8c:	9b03      	ldr	r3, [sp, #12]
 800ec8e:	1d1a      	adds	r2, r3, #4
 800ec90:	681b      	ldr	r3, [r3, #0]
 800ec92:	9203      	str	r2, [sp, #12]
 800ec94:	2b00      	cmp	r3, #0
 800ec96:	bfb8      	it	lt
 800ec98:	f04f 33ff 	movlt.w	r3, #4294967295
 800ec9c:	3402      	adds	r4, #2
 800ec9e:	9305      	str	r3, [sp, #20]
 800eca0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800ed6c <_svfiprintf_r+0x1fc>
 800eca4:	7821      	ldrb	r1, [r4, #0]
 800eca6:	2203      	movs	r2, #3
 800eca8:	4650      	mov	r0, sl
 800ecaa:	f7f1 fa99 	bl	80001e0 <memchr>
 800ecae:	b140      	cbz	r0, 800ecc2 <_svfiprintf_r+0x152>
 800ecb0:	2340      	movs	r3, #64	; 0x40
 800ecb2:	eba0 000a 	sub.w	r0, r0, sl
 800ecb6:	fa03 f000 	lsl.w	r0, r3, r0
 800ecba:	9b04      	ldr	r3, [sp, #16]
 800ecbc:	4303      	orrs	r3, r0
 800ecbe:	3401      	adds	r4, #1
 800ecc0:	9304      	str	r3, [sp, #16]
 800ecc2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ecc6:	4826      	ldr	r0, [pc, #152]	; (800ed60 <_svfiprintf_r+0x1f0>)
 800ecc8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800eccc:	2206      	movs	r2, #6
 800ecce:	f7f1 fa87 	bl	80001e0 <memchr>
 800ecd2:	2800      	cmp	r0, #0
 800ecd4:	d038      	beq.n	800ed48 <_svfiprintf_r+0x1d8>
 800ecd6:	4b23      	ldr	r3, [pc, #140]	; (800ed64 <_svfiprintf_r+0x1f4>)
 800ecd8:	bb1b      	cbnz	r3, 800ed22 <_svfiprintf_r+0x1b2>
 800ecda:	9b03      	ldr	r3, [sp, #12]
 800ecdc:	3307      	adds	r3, #7
 800ecde:	f023 0307 	bic.w	r3, r3, #7
 800ece2:	3308      	adds	r3, #8
 800ece4:	9303      	str	r3, [sp, #12]
 800ece6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ece8:	4433      	add	r3, r6
 800ecea:	9309      	str	r3, [sp, #36]	; 0x24
 800ecec:	e767      	b.n	800ebbe <_svfiprintf_r+0x4e>
 800ecee:	fb0c 3202 	mla	r2, ip, r2, r3
 800ecf2:	460c      	mov	r4, r1
 800ecf4:	2001      	movs	r0, #1
 800ecf6:	e7a5      	b.n	800ec44 <_svfiprintf_r+0xd4>
 800ecf8:	2300      	movs	r3, #0
 800ecfa:	3401      	adds	r4, #1
 800ecfc:	9305      	str	r3, [sp, #20]
 800ecfe:	4619      	mov	r1, r3
 800ed00:	f04f 0c0a 	mov.w	ip, #10
 800ed04:	4620      	mov	r0, r4
 800ed06:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ed0a:	3a30      	subs	r2, #48	; 0x30
 800ed0c:	2a09      	cmp	r2, #9
 800ed0e:	d903      	bls.n	800ed18 <_svfiprintf_r+0x1a8>
 800ed10:	2b00      	cmp	r3, #0
 800ed12:	d0c5      	beq.n	800eca0 <_svfiprintf_r+0x130>
 800ed14:	9105      	str	r1, [sp, #20]
 800ed16:	e7c3      	b.n	800eca0 <_svfiprintf_r+0x130>
 800ed18:	fb0c 2101 	mla	r1, ip, r1, r2
 800ed1c:	4604      	mov	r4, r0
 800ed1e:	2301      	movs	r3, #1
 800ed20:	e7f0      	b.n	800ed04 <_svfiprintf_r+0x194>
 800ed22:	ab03      	add	r3, sp, #12
 800ed24:	9300      	str	r3, [sp, #0]
 800ed26:	462a      	mov	r2, r5
 800ed28:	4b0f      	ldr	r3, [pc, #60]	; (800ed68 <_svfiprintf_r+0x1f8>)
 800ed2a:	a904      	add	r1, sp, #16
 800ed2c:	4638      	mov	r0, r7
 800ed2e:	f3af 8000 	nop.w
 800ed32:	1c42      	adds	r2, r0, #1
 800ed34:	4606      	mov	r6, r0
 800ed36:	d1d6      	bne.n	800ece6 <_svfiprintf_r+0x176>
 800ed38:	89ab      	ldrh	r3, [r5, #12]
 800ed3a:	065b      	lsls	r3, r3, #25
 800ed3c:	f53f af2c 	bmi.w	800eb98 <_svfiprintf_r+0x28>
 800ed40:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ed42:	b01d      	add	sp, #116	; 0x74
 800ed44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ed48:	ab03      	add	r3, sp, #12
 800ed4a:	9300      	str	r3, [sp, #0]
 800ed4c:	462a      	mov	r2, r5
 800ed4e:	4b06      	ldr	r3, [pc, #24]	; (800ed68 <_svfiprintf_r+0x1f8>)
 800ed50:	a904      	add	r1, sp, #16
 800ed52:	4638      	mov	r0, r7
 800ed54:	f000 f9d4 	bl	800f100 <_printf_i>
 800ed58:	e7eb      	b.n	800ed32 <_svfiprintf_r+0x1c2>
 800ed5a:	bf00      	nop
 800ed5c:	0801026c 	.word	0x0801026c
 800ed60:	08010276 	.word	0x08010276
 800ed64:	00000000 	.word	0x00000000
 800ed68:	0800eab9 	.word	0x0800eab9
 800ed6c:	08010272 	.word	0x08010272

0800ed70 <__sfputc_r>:
 800ed70:	6893      	ldr	r3, [r2, #8]
 800ed72:	3b01      	subs	r3, #1
 800ed74:	2b00      	cmp	r3, #0
 800ed76:	b410      	push	{r4}
 800ed78:	6093      	str	r3, [r2, #8]
 800ed7a:	da08      	bge.n	800ed8e <__sfputc_r+0x1e>
 800ed7c:	6994      	ldr	r4, [r2, #24]
 800ed7e:	42a3      	cmp	r3, r4
 800ed80:	db01      	blt.n	800ed86 <__sfputc_r+0x16>
 800ed82:	290a      	cmp	r1, #10
 800ed84:	d103      	bne.n	800ed8e <__sfputc_r+0x1e>
 800ed86:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ed8a:	f7ff bbe9 	b.w	800e560 <__swbuf_r>
 800ed8e:	6813      	ldr	r3, [r2, #0]
 800ed90:	1c58      	adds	r0, r3, #1
 800ed92:	6010      	str	r0, [r2, #0]
 800ed94:	7019      	strb	r1, [r3, #0]
 800ed96:	4608      	mov	r0, r1
 800ed98:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ed9c:	4770      	bx	lr

0800ed9e <__sfputs_r>:
 800ed9e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eda0:	4606      	mov	r6, r0
 800eda2:	460f      	mov	r7, r1
 800eda4:	4614      	mov	r4, r2
 800eda6:	18d5      	adds	r5, r2, r3
 800eda8:	42ac      	cmp	r4, r5
 800edaa:	d101      	bne.n	800edb0 <__sfputs_r+0x12>
 800edac:	2000      	movs	r0, #0
 800edae:	e007      	b.n	800edc0 <__sfputs_r+0x22>
 800edb0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800edb4:	463a      	mov	r2, r7
 800edb6:	4630      	mov	r0, r6
 800edb8:	f7ff ffda 	bl	800ed70 <__sfputc_r>
 800edbc:	1c43      	adds	r3, r0, #1
 800edbe:	d1f3      	bne.n	800eda8 <__sfputs_r+0xa>
 800edc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800edc4 <_vfiprintf_r>:
 800edc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800edc8:	460d      	mov	r5, r1
 800edca:	b09d      	sub	sp, #116	; 0x74
 800edcc:	4614      	mov	r4, r2
 800edce:	4698      	mov	r8, r3
 800edd0:	4606      	mov	r6, r0
 800edd2:	b118      	cbz	r0, 800eddc <_vfiprintf_r+0x18>
 800edd4:	6983      	ldr	r3, [r0, #24]
 800edd6:	b90b      	cbnz	r3, 800eddc <_vfiprintf_r+0x18>
 800edd8:	f7ff f82e 	bl	800de38 <__sinit>
 800eddc:	4b89      	ldr	r3, [pc, #548]	; (800f004 <_vfiprintf_r+0x240>)
 800edde:	429d      	cmp	r5, r3
 800ede0:	d11b      	bne.n	800ee1a <_vfiprintf_r+0x56>
 800ede2:	6875      	ldr	r5, [r6, #4]
 800ede4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ede6:	07d9      	lsls	r1, r3, #31
 800ede8:	d405      	bmi.n	800edf6 <_vfiprintf_r+0x32>
 800edea:	89ab      	ldrh	r3, [r5, #12]
 800edec:	059a      	lsls	r2, r3, #22
 800edee:	d402      	bmi.n	800edf6 <_vfiprintf_r+0x32>
 800edf0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800edf2:	f7ff f8e4 	bl	800dfbe <__retarget_lock_acquire_recursive>
 800edf6:	89ab      	ldrh	r3, [r5, #12]
 800edf8:	071b      	lsls	r3, r3, #28
 800edfa:	d501      	bpl.n	800ee00 <_vfiprintf_r+0x3c>
 800edfc:	692b      	ldr	r3, [r5, #16]
 800edfe:	b9eb      	cbnz	r3, 800ee3c <_vfiprintf_r+0x78>
 800ee00:	4629      	mov	r1, r5
 800ee02:	4630      	mov	r0, r6
 800ee04:	f7ff fc10 	bl	800e628 <__swsetup_r>
 800ee08:	b1c0      	cbz	r0, 800ee3c <_vfiprintf_r+0x78>
 800ee0a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ee0c:	07dc      	lsls	r4, r3, #31
 800ee0e:	d50e      	bpl.n	800ee2e <_vfiprintf_r+0x6a>
 800ee10:	f04f 30ff 	mov.w	r0, #4294967295
 800ee14:	b01d      	add	sp, #116	; 0x74
 800ee16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ee1a:	4b7b      	ldr	r3, [pc, #492]	; (800f008 <_vfiprintf_r+0x244>)
 800ee1c:	429d      	cmp	r5, r3
 800ee1e:	d101      	bne.n	800ee24 <_vfiprintf_r+0x60>
 800ee20:	68b5      	ldr	r5, [r6, #8]
 800ee22:	e7df      	b.n	800ede4 <_vfiprintf_r+0x20>
 800ee24:	4b79      	ldr	r3, [pc, #484]	; (800f00c <_vfiprintf_r+0x248>)
 800ee26:	429d      	cmp	r5, r3
 800ee28:	bf08      	it	eq
 800ee2a:	68f5      	ldreq	r5, [r6, #12]
 800ee2c:	e7da      	b.n	800ede4 <_vfiprintf_r+0x20>
 800ee2e:	89ab      	ldrh	r3, [r5, #12]
 800ee30:	0598      	lsls	r0, r3, #22
 800ee32:	d4ed      	bmi.n	800ee10 <_vfiprintf_r+0x4c>
 800ee34:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ee36:	f7ff f8c3 	bl	800dfc0 <__retarget_lock_release_recursive>
 800ee3a:	e7e9      	b.n	800ee10 <_vfiprintf_r+0x4c>
 800ee3c:	2300      	movs	r3, #0
 800ee3e:	9309      	str	r3, [sp, #36]	; 0x24
 800ee40:	2320      	movs	r3, #32
 800ee42:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ee46:	f8cd 800c 	str.w	r8, [sp, #12]
 800ee4a:	2330      	movs	r3, #48	; 0x30
 800ee4c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800f010 <_vfiprintf_r+0x24c>
 800ee50:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ee54:	f04f 0901 	mov.w	r9, #1
 800ee58:	4623      	mov	r3, r4
 800ee5a:	469a      	mov	sl, r3
 800ee5c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ee60:	b10a      	cbz	r2, 800ee66 <_vfiprintf_r+0xa2>
 800ee62:	2a25      	cmp	r2, #37	; 0x25
 800ee64:	d1f9      	bne.n	800ee5a <_vfiprintf_r+0x96>
 800ee66:	ebba 0b04 	subs.w	fp, sl, r4
 800ee6a:	d00b      	beq.n	800ee84 <_vfiprintf_r+0xc0>
 800ee6c:	465b      	mov	r3, fp
 800ee6e:	4622      	mov	r2, r4
 800ee70:	4629      	mov	r1, r5
 800ee72:	4630      	mov	r0, r6
 800ee74:	f7ff ff93 	bl	800ed9e <__sfputs_r>
 800ee78:	3001      	adds	r0, #1
 800ee7a:	f000 80aa 	beq.w	800efd2 <_vfiprintf_r+0x20e>
 800ee7e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ee80:	445a      	add	r2, fp
 800ee82:	9209      	str	r2, [sp, #36]	; 0x24
 800ee84:	f89a 3000 	ldrb.w	r3, [sl]
 800ee88:	2b00      	cmp	r3, #0
 800ee8a:	f000 80a2 	beq.w	800efd2 <_vfiprintf_r+0x20e>
 800ee8e:	2300      	movs	r3, #0
 800ee90:	f04f 32ff 	mov.w	r2, #4294967295
 800ee94:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ee98:	f10a 0a01 	add.w	sl, sl, #1
 800ee9c:	9304      	str	r3, [sp, #16]
 800ee9e:	9307      	str	r3, [sp, #28]
 800eea0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800eea4:	931a      	str	r3, [sp, #104]	; 0x68
 800eea6:	4654      	mov	r4, sl
 800eea8:	2205      	movs	r2, #5
 800eeaa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eeae:	4858      	ldr	r0, [pc, #352]	; (800f010 <_vfiprintf_r+0x24c>)
 800eeb0:	f7f1 f996 	bl	80001e0 <memchr>
 800eeb4:	9a04      	ldr	r2, [sp, #16]
 800eeb6:	b9d8      	cbnz	r0, 800eef0 <_vfiprintf_r+0x12c>
 800eeb8:	06d1      	lsls	r1, r2, #27
 800eeba:	bf44      	itt	mi
 800eebc:	2320      	movmi	r3, #32
 800eebe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800eec2:	0713      	lsls	r3, r2, #28
 800eec4:	bf44      	itt	mi
 800eec6:	232b      	movmi	r3, #43	; 0x2b
 800eec8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800eecc:	f89a 3000 	ldrb.w	r3, [sl]
 800eed0:	2b2a      	cmp	r3, #42	; 0x2a
 800eed2:	d015      	beq.n	800ef00 <_vfiprintf_r+0x13c>
 800eed4:	9a07      	ldr	r2, [sp, #28]
 800eed6:	4654      	mov	r4, sl
 800eed8:	2000      	movs	r0, #0
 800eeda:	f04f 0c0a 	mov.w	ip, #10
 800eede:	4621      	mov	r1, r4
 800eee0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800eee4:	3b30      	subs	r3, #48	; 0x30
 800eee6:	2b09      	cmp	r3, #9
 800eee8:	d94e      	bls.n	800ef88 <_vfiprintf_r+0x1c4>
 800eeea:	b1b0      	cbz	r0, 800ef1a <_vfiprintf_r+0x156>
 800eeec:	9207      	str	r2, [sp, #28]
 800eeee:	e014      	b.n	800ef1a <_vfiprintf_r+0x156>
 800eef0:	eba0 0308 	sub.w	r3, r0, r8
 800eef4:	fa09 f303 	lsl.w	r3, r9, r3
 800eef8:	4313      	orrs	r3, r2
 800eefa:	9304      	str	r3, [sp, #16]
 800eefc:	46a2      	mov	sl, r4
 800eefe:	e7d2      	b.n	800eea6 <_vfiprintf_r+0xe2>
 800ef00:	9b03      	ldr	r3, [sp, #12]
 800ef02:	1d19      	adds	r1, r3, #4
 800ef04:	681b      	ldr	r3, [r3, #0]
 800ef06:	9103      	str	r1, [sp, #12]
 800ef08:	2b00      	cmp	r3, #0
 800ef0a:	bfbb      	ittet	lt
 800ef0c:	425b      	neglt	r3, r3
 800ef0e:	f042 0202 	orrlt.w	r2, r2, #2
 800ef12:	9307      	strge	r3, [sp, #28]
 800ef14:	9307      	strlt	r3, [sp, #28]
 800ef16:	bfb8      	it	lt
 800ef18:	9204      	strlt	r2, [sp, #16]
 800ef1a:	7823      	ldrb	r3, [r4, #0]
 800ef1c:	2b2e      	cmp	r3, #46	; 0x2e
 800ef1e:	d10c      	bne.n	800ef3a <_vfiprintf_r+0x176>
 800ef20:	7863      	ldrb	r3, [r4, #1]
 800ef22:	2b2a      	cmp	r3, #42	; 0x2a
 800ef24:	d135      	bne.n	800ef92 <_vfiprintf_r+0x1ce>
 800ef26:	9b03      	ldr	r3, [sp, #12]
 800ef28:	1d1a      	adds	r2, r3, #4
 800ef2a:	681b      	ldr	r3, [r3, #0]
 800ef2c:	9203      	str	r2, [sp, #12]
 800ef2e:	2b00      	cmp	r3, #0
 800ef30:	bfb8      	it	lt
 800ef32:	f04f 33ff 	movlt.w	r3, #4294967295
 800ef36:	3402      	adds	r4, #2
 800ef38:	9305      	str	r3, [sp, #20]
 800ef3a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800f020 <_vfiprintf_r+0x25c>
 800ef3e:	7821      	ldrb	r1, [r4, #0]
 800ef40:	2203      	movs	r2, #3
 800ef42:	4650      	mov	r0, sl
 800ef44:	f7f1 f94c 	bl	80001e0 <memchr>
 800ef48:	b140      	cbz	r0, 800ef5c <_vfiprintf_r+0x198>
 800ef4a:	2340      	movs	r3, #64	; 0x40
 800ef4c:	eba0 000a 	sub.w	r0, r0, sl
 800ef50:	fa03 f000 	lsl.w	r0, r3, r0
 800ef54:	9b04      	ldr	r3, [sp, #16]
 800ef56:	4303      	orrs	r3, r0
 800ef58:	3401      	adds	r4, #1
 800ef5a:	9304      	str	r3, [sp, #16]
 800ef5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ef60:	482c      	ldr	r0, [pc, #176]	; (800f014 <_vfiprintf_r+0x250>)
 800ef62:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ef66:	2206      	movs	r2, #6
 800ef68:	f7f1 f93a 	bl	80001e0 <memchr>
 800ef6c:	2800      	cmp	r0, #0
 800ef6e:	d03f      	beq.n	800eff0 <_vfiprintf_r+0x22c>
 800ef70:	4b29      	ldr	r3, [pc, #164]	; (800f018 <_vfiprintf_r+0x254>)
 800ef72:	bb1b      	cbnz	r3, 800efbc <_vfiprintf_r+0x1f8>
 800ef74:	9b03      	ldr	r3, [sp, #12]
 800ef76:	3307      	adds	r3, #7
 800ef78:	f023 0307 	bic.w	r3, r3, #7
 800ef7c:	3308      	adds	r3, #8
 800ef7e:	9303      	str	r3, [sp, #12]
 800ef80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ef82:	443b      	add	r3, r7
 800ef84:	9309      	str	r3, [sp, #36]	; 0x24
 800ef86:	e767      	b.n	800ee58 <_vfiprintf_r+0x94>
 800ef88:	fb0c 3202 	mla	r2, ip, r2, r3
 800ef8c:	460c      	mov	r4, r1
 800ef8e:	2001      	movs	r0, #1
 800ef90:	e7a5      	b.n	800eede <_vfiprintf_r+0x11a>
 800ef92:	2300      	movs	r3, #0
 800ef94:	3401      	adds	r4, #1
 800ef96:	9305      	str	r3, [sp, #20]
 800ef98:	4619      	mov	r1, r3
 800ef9a:	f04f 0c0a 	mov.w	ip, #10
 800ef9e:	4620      	mov	r0, r4
 800efa0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800efa4:	3a30      	subs	r2, #48	; 0x30
 800efa6:	2a09      	cmp	r2, #9
 800efa8:	d903      	bls.n	800efb2 <_vfiprintf_r+0x1ee>
 800efaa:	2b00      	cmp	r3, #0
 800efac:	d0c5      	beq.n	800ef3a <_vfiprintf_r+0x176>
 800efae:	9105      	str	r1, [sp, #20]
 800efb0:	e7c3      	b.n	800ef3a <_vfiprintf_r+0x176>
 800efb2:	fb0c 2101 	mla	r1, ip, r1, r2
 800efb6:	4604      	mov	r4, r0
 800efb8:	2301      	movs	r3, #1
 800efba:	e7f0      	b.n	800ef9e <_vfiprintf_r+0x1da>
 800efbc:	ab03      	add	r3, sp, #12
 800efbe:	9300      	str	r3, [sp, #0]
 800efc0:	462a      	mov	r2, r5
 800efc2:	4b16      	ldr	r3, [pc, #88]	; (800f01c <_vfiprintf_r+0x258>)
 800efc4:	a904      	add	r1, sp, #16
 800efc6:	4630      	mov	r0, r6
 800efc8:	f3af 8000 	nop.w
 800efcc:	4607      	mov	r7, r0
 800efce:	1c78      	adds	r0, r7, #1
 800efd0:	d1d6      	bne.n	800ef80 <_vfiprintf_r+0x1bc>
 800efd2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800efd4:	07d9      	lsls	r1, r3, #31
 800efd6:	d405      	bmi.n	800efe4 <_vfiprintf_r+0x220>
 800efd8:	89ab      	ldrh	r3, [r5, #12]
 800efda:	059a      	lsls	r2, r3, #22
 800efdc:	d402      	bmi.n	800efe4 <_vfiprintf_r+0x220>
 800efde:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800efe0:	f7fe ffee 	bl	800dfc0 <__retarget_lock_release_recursive>
 800efe4:	89ab      	ldrh	r3, [r5, #12]
 800efe6:	065b      	lsls	r3, r3, #25
 800efe8:	f53f af12 	bmi.w	800ee10 <_vfiprintf_r+0x4c>
 800efec:	9809      	ldr	r0, [sp, #36]	; 0x24
 800efee:	e711      	b.n	800ee14 <_vfiprintf_r+0x50>
 800eff0:	ab03      	add	r3, sp, #12
 800eff2:	9300      	str	r3, [sp, #0]
 800eff4:	462a      	mov	r2, r5
 800eff6:	4b09      	ldr	r3, [pc, #36]	; (800f01c <_vfiprintf_r+0x258>)
 800eff8:	a904      	add	r1, sp, #16
 800effa:	4630      	mov	r0, r6
 800effc:	f000 f880 	bl	800f100 <_printf_i>
 800f000:	e7e4      	b.n	800efcc <_vfiprintf_r+0x208>
 800f002:	bf00      	nop
 800f004:	08010178 	.word	0x08010178
 800f008:	08010198 	.word	0x08010198
 800f00c:	08010158 	.word	0x08010158
 800f010:	0801026c 	.word	0x0801026c
 800f014:	08010276 	.word	0x08010276
 800f018:	00000000 	.word	0x00000000
 800f01c:	0800ed9f 	.word	0x0800ed9f
 800f020:	08010272 	.word	0x08010272

0800f024 <_printf_common>:
 800f024:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f028:	4616      	mov	r6, r2
 800f02a:	4699      	mov	r9, r3
 800f02c:	688a      	ldr	r2, [r1, #8]
 800f02e:	690b      	ldr	r3, [r1, #16]
 800f030:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f034:	4293      	cmp	r3, r2
 800f036:	bfb8      	it	lt
 800f038:	4613      	movlt	r3, r2
 800f03a:	6033      	str	r3, [r6, #0]
 800f03c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f040:	4607      	mov	r7, r0
 800f042:	460c      	mov	r4, r1
 800f044:	b10a      	cbz	r2, 800f04a <_printf_common+0x26>
 800f046:	3301      	adds	r3, #1
 800f048:	6033      	str	r3, [r6, #0]
 800f04a:	6823      	ldr	r3, [r4, #0]
 800f04c:	0699      	lsls	r1, r3, #26
 800f04e:	bf42      	ittt	mi
 800f050:	6833      	ldrmi	r3, [r6, #0]
 800f052:	3302      	addmi	r3, #2
 800f054:	6033      	strmi	r3, [r6, #0]
 800f056:	6825      	ldr	r5, [r4, #0]
 800f058:	f015 0506 	ands.w	r5, r5, #6
 800f05c:	d106      	bne.n	800f06c <_printf_common+0x48>
 800f05e:	f104 0a19 	add.w	sl, r4, #25
 800f062:	68e3      	ldr	r3, [r4, #12]
 800f064:	6832      	ldr	r2, [r6, #0]
 800f066:	1a9b      	subs	r3, r3, r2
 800f068:	42ab      	cmp	r3, r5
 800f06a:	dc26      	bgt.n	800f0ba <_printf_common+0x96>
 800f06c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800f070:	1e13      	subs	r3, r2, #0
 800f072:	6822      	ldr	r2, [r4, #0]
 800f074:	bf18      	it	ne
 800f076:	2301      	movne	r3, #1
 800f078:	0692      	lsls	r2, r2, #26
 800f07a:	d42b      	bmi.n	800f0d4 <_printf_common+0xb0>
 800f07c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f080:	4649      	mov	r1, r9
 800f082:	4638      	mov	r0, r7
 800f084:	47c0      	blx	r8
 800f086:	3001      	adds	r0, #1
 800f088:	d01e      	beq.n	800f0c8 <_printf_common+0xa4>
 800f08a:	6823      	ldr	r3, [r4, #0]
 800f08c:	68e5      	ldr	r5, [r4, #12]
 800f08e:	6832      	ldr	r2, [r6, #0]
 800f090:	f003 0306 	and.w	r3, r3, #6
 800f094:	2b04      	cmp	r3, #4
 800f096:	bf08      	it	eq
 800f098:	1aad      	subeq	r5, r5, r2
 800f09a:	68a3      	ldr	r3, [r4, #8]
 800f09c:	6922      	ldr	r2, [r4, #16]
 800f09e:	bf0c      	ite	eq
 800f0a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f0a4:	2500      	movne	r5, #0
 800f0a6:	4293      	cmp	r3, r2
 800f0a8:	bfc4      	itt	gt
 800f0aa:	1a9b      	subgt	r3, r3, r2
 800f0ac:	18ed      	addgt	r5, r5, r3
 800f0ae:	2600      	movs	r6, #0
 800f0b0:	341a      	adds	r4, #26
 800f0b2:	42b5      	cmp	r5, r6
 800f0b4:	d11a      	bne.n	800f0ec <_printf_common+0xc8>
 800f0b6:	2000      	movs	r0, #0
 800f0b8:	e008      	b.n	800f0cc <_printf_common+0xa8>
 800f0ba:	2301      	movs	r3, #1
 800f0bc:	4652      	mov	r2, sl
 800f0be:	4649      	mov	r1, r9
 800f0c0:	4638      	mov	r0, r7
 800f0c2:	47c0      	blx	r8
 800f0c4:	3001      	adds	r0, #1
 800f0c6:	d103      	bne.n	800f0d0 <_printf_common+0xac>
 800f0c8:	f04f 30ff 	mov.w	r0, #4294967295
 800f0cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f0d0:	3501      	adds	r5, #1
 800f0d2:	e7c6      	b.n	800f062 <_printf_common+0x3e>
 800f0d4:	18e1      	adds	r1, r4, r3
 800f0d6:	1c5a      	adds	r2, r3, #1
 800f0d8:	2030      	movs	r0, #48	; 0x30
 800f0da:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f0de:	4422      	add	r2, r4
 800f0e0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f0e4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f0e8:	3302      	adds	r3, #2
 800f0ea:	e7c7      	b.n	800f07c <_printf_common+0x58>
 800f0ec:	2301      	movs	r3, #1
 800f0ee:	4622      	mov	r2, r4
 800f0f0:	4649      	mov	r1, r9
 800f0f2:	4638      	mov	r0, r7
 800f0f4:	47c0      	blx	r8
 800f0f6:	3001      	adds	r0, #1
 800f0f8:	d0e6      	beq.n	800f0c8 <_printf_common+0xa4>
 800f0fa:	3601      	adds	r6, #1
 800f0fc:	e7d9      	b.n	800f0b2 <_printf_common+0x8e>
	...

0800f100 <_printf_i>:
 800f100:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f104:	7e0f      	ldrb	r7, [r1, #24]
 800f106:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800f108:	2f78      	cmp	r7, #120	; 0x78
 800f10a:	4691      	mov	r9, r2
 800f10c:	4680      	mov	r8, r0
 800f10e:	460c      	mov	r4, r1
 800f110:	469a      	mov	sl, r3
 800f112:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800f116:	d807      	bhi.n	800f128 <_printf_i+0x28>
 800f118:	2f62      	cmp	r7, #98	; 0x62
 800f11a:	d80a      	bhi.n	800f132 <_printf_i+0x32>
 800f11c:	2f00      	cmp	r7, #0
 800f11e:	f000 80d8 	beq.w	800f2d2 <_printf_i+0x1d2>
 800f122:	2f58      	cmp	r7, #88	; 0x58
 800f124:	f000 80a3 	beq.w	800f26e <_printf_i+0x16e>
 800f128:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f12c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800f130:	e03a      	b.n	800f1a8 <_printf_i+0xa8>
 800f132:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800f136:	2b15      	cmp	r3, #21
 800f138:	d8f6      	bhi.n	800f128 <_printf_i+0x28>
 800f13a:	a101      	add	r1, pc, #4	; (adr r1, 800f140 <_printf_i+0x40>)
 800f13c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f140:	0800f199 	.word	0x0800f199
 800f144:	0800f1ad 	.word	0x0800f1ad
 800f148:	0800f129 	.word	0x0800f129
 800f14c:	0800f129 	.word	0x0800f129
 800f150:	0800f129 	.word	0x0800f129
 800f154:	0800f129 	.word	0x0800f129
 800f158:	0800f1ad 	.word	0x0800f1ad
 800f15c:	0800f129 	.word	0x0800f129
 800f160:	0800f129 	.word	0x0800f129
 800f164:	0800f129 	.word	0x0800f129
 800f168:	0800f129 	.word	0x0800f129
 800f16c:	0800f2b9 	.word	0x0800f2b9
 800f170:	0800f1dd 	.word	0x0800f1dd
 800f174:	0800f29b 	.word	0x0800f29b
 800f178:	0800f129 	.word	0x0800f129
 800f17c:	0800f129 	.word	0x0800f129
 800f180:	0800f2db 	.word	0x0800f2db
 800f184:	0800f129 	.word	0x0800f129
 800f188:	0800f1dd 	.word	0x0800f1dd
 800f18c:	0800f129 	.word	0x0800f129
 800f190:	0800f129 	.word	0x0800f129
 800f194:	0800f2a3 	.word	0x0800f2a3
 800f198:	682b      	ldr	r3, [r5, #0]
 800f19a:	1d1a      	adds	r2, r3, #4
 800f19c:	681b      	ldr	r3, [r3, #0]
 800f19e:	602a      	str	r2, [r5, #0]
 800f1a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f1a4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f1a8:	2301      	movs	r3, #1
 800f1aa:	e0a3      	b.n	800f2f4 <_printf_i+0x1f4>
 800f1ac:	6820      	ldr	r0, [r4, #0]
 800f1ae:	6829      	ldr	r1, [r5, #0]
 800f1b0:	0606      	lsls	r6, r0, #24
 800f1b2:	f101 0304 	add.w	r3, r1, #4
 800f1b6:	d50a      	bpl.n	800f1ce <_printf_i+0xce>
 800f1b8:	680e      	ldr	r6, [r1, #0]
 800f1ba:	602b      	str	r3, [r5, #0]
 800f1bc:	2e00      	cmp	r6, #0
 800f1be:	da03      	bge.n	800f1c8 <_printf_i+0xc8>
 800f1c0:	232d      	movs	r3, #45	; 0x2d
 800f1c2:	4276      	negs	r6, r6
 800f1c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f1c8:	485e      	ldr	r0, [pc, #376]	; (800f344 <_printf_i+0x244>)
 800f1ca:	230a      	movs	r3, #10
 800f1cc:	e019      	b.n	800f202 <_printf_i+0x102>
 800f1ce:	680e      	ldr	r6, [r1, #0]
 800f1d0:	602b      	str	r3, [r5, #0]
 800f1d2:	f010 0f40 	tst.w	r0, #64	; 0x40
 800f1d6:	bf18      	it	ne
 800f1d8:	b236      	sxthne	r6, r6
 800f1da:	e7ef      	b.n	800f1bc <_printf_i+0xbc>
 800f1dc:	682b      	ldr	r3, [r5, #0]
 800f1de:	6820      	ldr	r0, [r4, #0]
 800f1e0:	1d19      	adds	r1, r3, #4
 800f1e2:	6029      	str	r1, [r5, #0]
 800f1e4:	0601      	lsls	r1, r0, #24
 800f1e6:	d501      	bpl.n	800f1ec <_printf_i+0xec>
 800f1e8:	681e      	ldr	r6, [r3, #0]
 800f1ea:	e002      	b.n	800f1f2 <_printf_i+0xf2>
 800f1ec:	0646      	lsls	r6, r0, #25
 800f1ee:	d5fb      	bpl.n	800f1e8 <_printf_i+0xe8>
 800f1f0:	881e      	ldrh	r6, [r3, #0]
 800f1f2:	4854      	ldr	r0, [pc, #336]	; (800f344 <_printf_i+0x244>)
 800f1f4:	2f6f      	cmp	r7, #111	; 0x6f
 800f1f6:	bf0c      	ite	eq
 800f1f8:	2308      	moveq	r3, #8
 800f1fa:	230a      	movne	r3, #10
 800f1fc:	2100      	movs	r1, #0
 800f1fe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f202:	6865      	ldr	r5, [r4, #4]
 800f204:	60a5      	str	r5, [r4, #8]
 800f206:	2d00      	cmp	r5, #0
 800f208:	bfa2      	ittt	ge
 800f20a:	6821      	ldrge	r1, [r4, #0]
 800f20c:	f021 0104 	bicge.w	r1, r1, #4
 800f210:	6021      	strge	r1, [r4, #0]
 800f212:	b90e      	cbnz	r6, 800f218 <_printf_i+0x118>
 800f214:	2d00      	cmp	r5, #0
 800f216:	d04d      	beq.n	800f2b4 <_printf_i+0x1b4>
 800f218:	4615      	mov	r5, r2
 800f21a:	fbb6 f1f3 	udiv	r1, r6, r3
 800f21e:	fb03 6711 	mls	r7, r3, r1, r6
 800f222:	5dc7      	ldrb	r7, [r0, r7]
 800f224:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800f228:	4637      	mov	r7, r6
 800f22a:	42bb      	cmp	r3, r7
 800f22c:	460e      	mov	r6, r1
 800f22e:	d9f4      	bls.n	800f21a <_printf_i+0x11a>
 800f230:	2b08      	cmp	r3, #8
 800f232:	d10b      	bne.n	800f24c <_printf_i+0x14c>
 800f234:	6823      	ldr	r3, [r4, #0]
 800f236:	07de      	lsls	r6, r3, #31
 800f238:	d508      	bpl.n	800f24c <_printf_i+0x14c>
 800f23a:	6923      	ldr	r3, [r4, #16]
 800f23c:	6861      	ldr	r1, [r4, #4]
 800f23e:	4299      	cmp	r1, r3
 800f240:	bfde      	ittt	le
 800f242:	2330      	movle	r3, #48	; 0x30
 800f244:	f805 3c01 	strble.w	r3, [r5, #-1]
 800f248:	f105 35ff 	addle.w	r5, r5, #4294967295
 800f24c:	1b52      	subs	r2, r2, r5
 800f24e:	6122      	str	r2, [r4, #16]
 800f250:	f8cd a000 	str.w	sl, [sp]
 800f254:	464b      	mov	r3, r9
 800f256:	aa03      	add	r2, sp, #12
 800f258:	4621      	mov	r1, r4
 800f25a:	4640      	mov	r0, r8
 800f25c:	f7ff fee2 	bl	800f024 <_printf_common>
 800f260:	3001      	adds	r0, #1
 800f262:	d14c      	bne.n	800f2fe <_printf_i+0x1fe>
 800f264:	f04f 30ff 	mov.w	r0, #4294967295
 800f268:	b004      	add	sp, #16
 800f26a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f26e:	4835      	ldr	r0, [pc, #212]	; (800f344 <_printf_i+0x244>)
 800f270:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800f274:	6829      	ldr	r1, [r5, #0]
 800f276:	6823      	ldr	r3, [r4, #0]
 800f278:	f851 6b04 	ldr.w	r6, [r1], #4
 800f27c:	6029      	str	r1, [r5, #0]
 800f27e:	061d      	lsls	r5, r3, #24
 800f280:	d514      	bpl.n	800f2ac <_printf_i+0x1ac>
 800f282:	07df      	lsls	r7, r3, #31
 800f284:	bf44      	itt	mi
 800f286:	f043 0320 	orrmi.w	r3, r3, #32
 800f28a:	6023      	strmi	r3, [r4, #0]
 800f28c:	b91e      	cbnz	r6, 800f296 <_printf_i+0x196>
 800f28e:	6823      	ldr	r3, [r4, #0]
 800f290:	f023 0320 	bic.w	r3, r3, #32
 800f294:	6023      	str	r3, [r4, #0]
 800f296:	2310      	movs	r3, #16
 800f298:	e7b0      	b.n	800f1fc <_printf_i+0xfc>
 800f29a:	6823      	ldr	r3, [r4, #0]
 800f29c:	f043 0320 	orr.w	r3, r3, #32
 800f2a0:	6023      	str	r3, [r4, #0]
 800f2a2:	2378      	movs	r3, #120	; 0x78
 800f2a4:	4828      	ldr	r0, [pc, #160]	; (800f348 <_printf_i+0x248>)
 800f2a6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800f2aa:	e7e3      	b.n	800f274 <_printf_i+0x174>
 800f2ac:	0659      	lsls	r1, r3, #25
 800f2ae:	bf48      	it	mi
 800f2b0:	b2b6      	uxthmi	r6, r6
 800f2b2:	e7e6      	b.n	800f282 <_printf_i+0x182>
 800f2b4:	4615      	mov	r5, r2
 800f2b6:	e7bb      	b.n	800f230 <_printf_i+0x130>
 800f2b8:	682b      	ldr	r3, [r5, #0]
 800f2ba:	6826      	ldr	r6, [r4, #0]
 800f2bc:	6961      	ldr	r1, [r4, #20]
 800f2be:	1d18      	adds	r0, r3, #4
 800f2c0:	6028      	str	r0, [r5, #0]
 800f2c2:	0635      	lsls	r5, r6, #24
 800f2c4:	681b      	ldr	r3, [r3, #0]
 800f2c6:	d501      	bpl.n	800f2cc <_printf_i+0x1cc>
 800f2c8:	6019      	str	r1, [r3, #0]
 800f2ca:	e002      	b.n	800f2d2 <_printf_i+0x1d2>
 800f2cc:	0670      	lsls	r0, r6, #25
 800f2ce:	d5fb      	bpl.n	800f2c8 <_printf_i+0x1c8>
 800f2d0:	8019      	strh	r1, [r3, #0]
 800f2d2:	2300      	movs	r3, #0
 800f2d4:	6123      	str	r3, [r4, #16]
 800f2d6:	4615      	mov	r5, r2
 800f2d8:	e7ba      	b.n	800f250 <_printf_i+0x150>
 800f2da:	682b      	ldr	r3, [r5, #0]
 800f2dc:	1d1a      	adds	r2, r3, #4
 800f2de:	602a      	str	r2, [r5, #0]
 800f2e0:	681d      	ldr	r5, [r3, #0]
 800f2e2:	6862      	ldr	r2, [r4, #4]
 800f2e4:	2100      	movs	r1, #0
 800f2e6:	4628      	mov	r0, r5
 800f2e8:	f7f0 ff7a 	bl	80001e0 <memchr>
 800f2ec:	b108      	cbz	r0, 800f2f2 <_printf_i+0x1f2>
 800f2ee:	1b40      	subs	r0, r0, r5
 800f2f0:	6060      	str	r0, [r4, #4]
 800f2f2:	6863      	ldr	r3, [r4, #4]
 800f2f4:	6123      	str	r3, [r4, #16]
 800f2f6:	2300      	movs	r3, #0
 800f2f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f2fc:	e7a8      	b.n	800f250 <_printf_i+0x150>
 800f2fe:	6923      	ldr	r3, [r4, #16]
 800f300:	462a      	mov	r2, r5
 800f302:	4649      	mov	r1, r9
 800f304:	4640      	mov	r0, r8
 800f306:	47d0      	blx	sl
 800f308:	3001      	adds	r0, #1
 800f30a:	d0ab      	beq.n	800f264 <_printf_i+0x164>
 800f30c:	6823      	ldr	r3, [r4, #0]
 800f30e:	079b      	lsls	r3, r3, #30
 800f310:	d413      	bmi.n	800f33a <_printf_i+0x23a>
 800f312:	68e0      	ldr	r0, [r4, #12]
 800f314:	9b03      	ldr	r3, [sp, #12]
 800f316:	4298      	cmp	r0, r3
 800f318:	bfb8      	it	lt
 800f31a:	4618      	movlt	r0, r3
 800f31c:	e7a4      	b.n	800f268 <_printf_i+0x168>
 800f31e:	2301      	movs	r3, #1
 800f320:	4632      	mov	r2, r6
 800f322:	4649      	mov	r1, r9
 800f324:	4640      	mov	r0, r8
 800f326:	47d0      	blx	sl
 800f328:	3001      	adds	r0, #1
 800f32a:	d09b      	beq.n	800f264 <_printf_i+0x164>
 800f32c:	3501      	adds	r5, #1
 800f32e:	68e3      	ldr	r3, [r4, #12]
 800f330:	9903      	ldr	r1, [sp, #12]
 800f332:	1a5b      	subs	r3, r3, r1
 800f334:	42ab      	cmp	r3, r5
 800f336:	dcf2      	bgt.n	800f31e <_printf_i+0x21e>
 800f338:	e7eb      	b.n	800f312 <_printf_i+0x212>
 800f33a:	2500      	movs	r5, #0
 800f33c:	f104 0619 	add.w	r6, r4, #25
 800f340:	e7f5      	b.n	800f32e <_printf_i+0x22e>
 800f342:	bf00      	nop
 800f344:	0801027d 	.word	0x0801027d
 800f348:	0801028e 	.word	0x0801028e

0800f34c <_read_r>:
 800f34c:	b538      	push	{r3, r4, r5, lr}
 800f34e:	4d07      	ldr	r5, [pc, #28]	; (800f36c <_read_r+0x20>)
 800f350:	4604      	mov	r4, r0
 800f352:	4608      	mov	r0, r1
 800f354:	4611      	mov	r1, r2
 800f356:	2200      	movs	r2, #0
 800f358:	602a      	str	r2, [r5, #0]
 800f35a:	461a      	mov	r2, r3
 800f35c:	f7f2 ff28 	bl	80021b0 <_read>
 800f360:	1c43      	adds	r3, r0, #1
 800f362:	d102      	bne.n	800f36a <_read_r+0x1e>
 800f364:	682b      	ldr	r3, [r5, #0]
 800f366:	b103      	cbz	r3, 800f36a <_read_r+0x1e>
 800f368:	6023      	str	r3, [r4, #0]
 800f36a:	bd38      	pop	{r3, r4, r5, pc}
 800f36c:	20003d78 	.word	0x20003d78

0800f370 <abort>:
 800f370:	b508      	push	{r3, lr}
 800f372:	2006      	movs	r0, #6
 800f374:	f000 f898 	bl	800f4a8 <raise>
 800f378:	2001      	movs	r0, #1
 800f37a:	f7f2 ff0f 	bl	800219c <_exit>
	...

0800f380 <_fstat_r>:
 800f380:	b538      	push	{r3, r4, r5, lr}
 800f382:	4d07      	ldr	r5, [pc, #28]	; (800f3a0 <_fstat_r+0x20>)
 800f384:	2300      	movs	r3, #0
 800f386:	4604      	mov	r4, r0
 800f388:	4608      	mov	r0, r1
 800f38a:	4611      	mov	r1, r2
 800f38c:	602b      	str	r3, [r5, #0]
 800f38e:	f7f2 ff38 	bl	8002202 <_fstat>
 800f392:	1c43      	adds	r3, r0, #1
 800f394:	d102      	bne.n	800f39c <_fstat_r+0x1c>
 800f396:	682b      	ldr	r3, [r5, #0]
 800f398:	b103      	cbz	r3, 800f39c <_fstat_r+0x1c>
 800f39a:	6023      	str	r3, [r4, #0]
 800f39c:	bd38      	pop	{r3, r4, r5, pc}
 800f39e:	bf00      	nop
 800f3a0:	20003d78 	.word	0x20003d78

0800f3a4 <_isatty_r>:
 800f3a4:	b538      	push	{r3, r4, r5, lr}
 800f3a6:	4d06      	ldr	r5, [pc, #24]	; (800f3c0 <_isatty_r+0x1c>)
 800f3a8:	2300      	movs	r3, #0
 800f3aa:	4604      	mov	r4, r0
 800f3ac:	4608      	mov	r0, r1
 800f3ae:	602b      	str	r3, [r5, #0]
 800f3b0:	f7f2 ff37 	bl	8002222 <_isatty>
 800f3b4:	1c43      	adds	r3, r0, #1
 800f3b6:	d102      	bne.n	800f3be <_isatty_r+0x1a>
 800f3b8:	682b      	ldr	r3, [r5, #0]
 800f3ba:	b103      	cbz	r3, 800f3be <_isatty_r+0x1a>
 800f3bc:	6023      	str	r3, [r4, #0]
 800f3be:	bd38      	pop	{r3, r4, r5, pc}
 800f3c0:	20003d78 	.word	0x20003d78

0800f3c4 <memmove>:
 800f3c4:	4288      	cmp	r0, r1
 800f3c6:	b510      	push	{r4, lr}
 800f3c8:	eb01 0402 	add.w	r4, r1, r2
 800f3cc:	d902      	bls.n	800f3d4 <memmove+0x10>
 800f3ce:	4284      	cmp	r4, r0
 800f3d0:	4623      	mov	r3, r4
 800f3d2:	d807      	bhi.n	800f3e4 <memmove+0x20>
 800f3d4:	1e43      	subs	r3, r0, #1
 800f3d6:	42a1      	cmp	r1, r4
 800f3d8:	d008      	beq.n	800f3ec <memmove+0x28>
 800f3da:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f3de:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f3e2:	e7f8      	b.n	800f3d6 <memmove+0x12>
 800f3e4:	4402      	add	r2, r0
 800f3e6:	4601      	mov	r1, r0
 800f3e8:	428a      	cmp	r2, r1
 800f3ea:	d100      	bne.n	800f3ee <memmove+0x2a>
 800f3ec:	bd10      	pop	{r4, pc}
 800f3ee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f3f2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f3f6:	e7f7      	b.n	800f3e8 <memmove+0x24>

0800f3f8 <_realloc_r>:
 800f3f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f3fc:	4680      	mov	r8, r0
 800f3fe:	4614      	mov	r4, r2
 800f400:	460e      	mov	r6, r1
 800f402:	b921      	cbnz	r1, 800f40e <_realloc_r+0x16>
 800f404:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f408:	4611      	mov	r1, r2
 800f40a:	f7fe be11 	b.w	800e030 <_malloc_r>
 800f40e:	b92a      	cbnz	r2, 800f41c <_realloc_r+0x24>
 800f410:	f7ff fb06 	bl	800ea20 <_free_r>
 800f414:	4625      	mov	r5, r4
 800f416:	4628      	mov	r0, r5
 800f418:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f41c:	f000 f860 	bl	800f4e0 <_malloc_usable_size_r>
 800f420:	4284      	cmp	r4, r0
 800f422:	4607      	mov	r7, r0
 800f424:	d802      	bhi.n	800f42c <_realloc_r+0x34>
 800f426:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800f42a:	d812      	bhi.n	800f452 <_realloc_r+0x5a>
 800f42c:	4621      	mov	r1, r4
 800f42e:	4640      	mov	r0, r8
 800f430:	f7fe fdfe 	bl	800e030 <_malloc_r>
 800f434:	4605      	mov	r5, r0
 800f436:	2800      	cmp	r0, #0
 800f438:	d0ed      	beq.n	800f416 <_realloc_r+0x1e>
 800f43a:	42bc      	cmp	r4, r7
 800f43c:	4622      	mov	r2, r4
 800f43e:	4631      	mov	r1, r6
 800f440:	bf28      	it	cs
 800f442:	463a      	movcs	r2, r7
 800f444:	f7fe fdbd 	bl	800dfc2 <memcpy>
 800f448:	4631      	mov	r1, r6
 800f44a:	4640      	mov	r0, r8
 800f44c:	f7ff fae8 	bl	800ea20 <_free_r>
 800f450:	e7e1      	b.n	800f416 <_realloc_r+0x1e>
 800f452:	4635      	mov	r5, r6
 800f454:	e7df      	b.n	800f416 <_realloc_r+0x1e>

0800f456 <_raise_r>:
 800f456:	291f      	cmp	r1, #31
 800f458:	b538      	push	{r3, r4, r5, lr}
 800f45a:	4604      	mov	r4, r0
 800f45c:	460d      	mov	r5, r1
 800f45e:	d904      	bls.n	800f46a <_raise_r+0x14>
 800f460:	2316      	movs	r3, #22
 800f462:	6003      	str	r3, [r0, #0]
 800f464:	f04f 30ff 	mov.w	r0, #4294967295
 800f468:	bd38      	pop	{r3, r4, r5, pc}
 800f46a:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800f46c:	b112      	cbz	r2, 800f474 <_raise_r+0x1e>
 800f46e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f472:	b94b      	cbnz	r3, 800f488 <_raise_r+0x32>
 800f474:	4620      	mov	r0, r4
 800f476:	f000 f831 	bl	800f4dc <_getpid_r>
 800f47a:	462a      	mov	r2, r5
 800f47c:	4601      	mov	r1, r0
 800f47e:	4620      	mov	r0, r4
 800f480:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f484:	f000 b818 	b.w	800f4b8 <_kill_r>
 800f488:	2b01      	cmp	r3, #1
 800f48a:	d00a      	beq.n	800f4a2 <_raise_r+0x4c>
 800f48c:	1c59      	adds	r1, r3, #1
 800f48e:	d103      	bne.n	800f498 <_raise_r+0x42>
 800f490:	2316      	movs	r3, #22
 800f492:	6003      	str	r3, [r0, #0]
 800f494:	2001      	movs	r0, #1
 800f496:	e7e7      	b.n	800f468 <_raise_r+0x12>
 800f498:	2400      	movs	r4, #0
 800f49a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800f49e:	4628      	mov	r0, r5
 800f4a0:	4798      	blx	r3
 800f4a2:	2000      	movs	r0, #0
 800f4a4:	e7e0      	b.n	800f468 <_raise_r+0x12>
	...

0800f4a8 <raise>:
 800f4a8:	4b02      	ldr	r3, [pc, #8]	; (800f4b4 <raise+0xc>)
 800f4aa:	4601      	mov	r1, r0
 800f4ac:	6818      	ldr	r0, [r3, #0]
 800f4ae:	f7ff bfd2 	b.w	800f456 <_raise_r>
 800f4b2:	bf00      	nop
 800f4b4:	20000048 	.word	0x20000048

0800f4b8 <_kill_r>:
 800f4b8:	b538      	push	{r3, r4, r5, lr}
 800f4ba:	4d07      	ldr	r5, [pc, #28]	; (800f4d8 <_kill_r+0x20>)
 800f4bc:	2300      	movs	r3, #0
 800f4be:	4604      	mov	r4, r0
 800f4c0:	4608      	mov	r0, r1
 800f4c2:	4611      	mov	r1, r2
 800f4c4:	602b      	str	r3, [r5, #0]
 800f4c6:	f7f2 fe59 	bl	800217c <_kill>
 800f4ca:	1c43      	adds	r3, r0, #1
 800f4cc:	d102      	bne.n	800f4d4 <_kill_r+0x1c>
 800f4ce:	682b      	ldr	r3, [r5, #0]
 800f4d0:	b103      	cbz	r3, 800f4d4 <_kill_r+0x1c>
 800f4d2:	6023      	str	r3, [r4, #0]
 800f4d4:	bd38      	pop	{r3, r4, r5, pc}
 800f4d6:	bf00      	nop
 800f4d8:	20003d78 	.word	0x20003d78

0800f4dc <_getpid_r>:
 800f4dc:	f7f2 be46 	b.w	800216c <_getpid>

0800f4e0 <_malloc_usable_size_r>:
 800f4e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f4e4:	1f18      	subs	r0, r3, #4
 800f4e6:	2b00      	cmp	r3, #0
 800f4e8:	bfbc      	itt	lt
 800f4ea:	580b      	ldrlt	r3, [r1, r0]
 800f4ec:	18c0      	addlt	r0, r0, r3
 800f4ee:	4770      	bx	lr

0800f4f0 <_init>:
 800f4f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f4f2:	bf00      	nop
 800f4f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f4f6:	bc08      	pop	{r3}
 800f4f8:	469e      	mov	lr, r3
 800f4fa:	4770      	bx	lr

0800f4fc <_fini>:
 800f4fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f4fe:	bf00      	nop
 800f500:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f502:	bc08      	pop	{r3}
 800f504:	469e      	mov	lr, r3
 800f506:	4770      	bx	lr
