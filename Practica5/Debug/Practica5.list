
Practica5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cf78  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000069c  0800d108  0800d108  0001d108  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d7a4  0800d7a4  000200ac  2**0
                  CONTENTS
  4 .ARM          00000008  0800d7a4  0800d7a4  0001d7a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d7ac  0800d7ac  000200ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d7ac  0800d7ac  0001d7ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d7b0  0800d7b0  0001d7b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000ac  20000000  0800d7b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002d80  200000ac  0800d860  000200ac  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002e2c  0800d860  00022e2c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003094e  00000000  00000000  000200dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005999  00000000  00000000  00050a2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002828  00000000  00000000  000563c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000025f0  00000000  00000000  00058bf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002aee5  00000000  00000000  0005b1e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002d0b7  00000000  00000000  000860c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00114f59  00000000  00000000  000b317c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001c80d5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000b5bc  00000000  00000000  001c8128  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000ac 	.word	0x200000ac
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800d0f0 	.word	0x0800d0f0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000b0 	.word	0x200000b0
 80001cc:	0800d0f0 	.word	0x0800d0f0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000584:	b480      	push	{r7}
 8000586:	b083      	sub	sp, #12
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800058c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000590:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000594:	f003 0301 	and.w	r3, r3, #1
 8000598:	2b00      	cmp	r3, #0
 800059a:	d013      	beq.n	80005c4 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 800059c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005a0:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80005a4:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d00b      	beq.n	80005c4 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80005ac:	e000      	b.n	80005b0 <ITM_SendChar+0x2c>
    {
      __NOP();
 80005ae:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80005b0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d0f9      	beq.n	80005ae <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80005ba:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005be:	687a      	ldr	r2, [r7, #4]
 80005c0:	b2d2      	uxtb	r2, r2
 80005c2:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80005c4:	687b      	ldr	r3, [r7, #4]
}
 80005c6:	4618      	mov	r0, r3
 80005c8:	370c      	adds	r7, #12
 80005ca:	46bd      	mov	sp, r7
 80005cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d0:	4770      	bx	lr
	...

080005d4 <configureTimerForRunTimeStats>:
void temporizador_func(void *argument);
void sendMQTT_func(void *argument);

/* USER CODE BEGIN PFP */
volatile unsigned long ulHighFrequencyTimerTicks;
void configureTimerForRunTimeStats(void) {
 80005d4:	b580      	push	{r7, lr}
 80005d6:	af00      	add	r7, sp, #0
	ulHighFrequencyTimerTicks = 0;
 80005d8:	4b03      	ldr	r3, [pc, #12]	; (80005e8 <configureTimerForRunTimeStats+0x14>)
 80005da:	2200      	movs	r2, #0
 80005dc:	601a      	str	r2, [r3, #0]
	HAL_TIM_Base_Start_IT(&htim7);
 80005de:	4803      	ldr	r0, [pc, #12]	; (80005ec <configureTimerForRunTimeStats+0x18>)
 80005e0:	f005 faee 	bl	8005bc0 <HAL_TIM_Base_Start_IT>
}
 80005e4:	bf00      	nop
 80005e6:	bd80      	pop	{r7, pc}
 80005e8:	200007b0 	.word	0x200007b0
 80005ec:	20000218 	.word	0x20000218

080005f0 <getRunTimeCounterValue>:
unsigned long getRunTimeCounterValue(void) {
 80005f0:	b480      	push	{r7}
 80005f2:	af00      	add	r7, sp, #0
	return ulHighFrequencyTimerTicks;
 80005f4:	4b03      	ldr	r3, [pc, #12]	; (8000604 <getRunTimeCounterValue+0x14>)
 80005f6:	681b      	ldr	r3, [r3, #0]

}
 80005f8:	4618      	mov	r0, r3
 80005fa:	46bd      	mov	sp, r7
 80005fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000600:	4770      	bx	lr
 8000602:	bf00      	nop
 8000604:	200007b0 	.word	0x200007b0

08000608 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800060c:	f001 fd7b 	bl	8002106 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000610:	f000 f8a0 	bl	8000754 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000614:	f000 fafc 	bl	8000c10 <MX_GPIO_Init>
  MX_DFSDM1_Init();
 8000618:	f000 f900 	bl	800081c <MX_DFSDM1_Init>
  MX_I2C2_Init();
 800061c:	f000 f936 	bl	800088c <MX_I2C2_Init>
  MX_QUADSPI_Init();
 8000620:	f000 f972 	bl	8000908 <MX_QUADSPI_Init>
  MX_SPI3_Init();
 8000624:	f000 f9f2 	bl	8000a0c <MX_SPI3_Init>
  MX_USART1_UART_Init();
 8000628:	f000 fa64 	bl	8000af4 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 800062c:	f000 fa92 	bl	8000b54 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000630:	f000 fac0 	bl	8000bb4 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM7_Init();
 8000634:	f000 fa28 	bl	8000a88 <MX_TIM7_Init>
  MX_RTC_Init();
 8000638:	f000 f98c 	bl	8000954 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  status_acc = BSP_ACCELERO_Init_INT();
 800063c:	f000 fc9e 	bl	8000f7c <BSP_ACCELERO_Init_INT>
 8000640:	4603      	mov	r3, r0
 8000642:	461a      	mov	r2, r3
 8000644:	4b29      	ldr	r3, [pc, #164]	; (80006ec <main+0xe4>)
 8000646:	701a      	strb	r2, [r3, #0]
  if (status_acc == ACCELERO_OK){
 8000648:	4b28      	ldr	r3, [pc, #160]	; (80006ec <main+0xe4>)
 800064a:	781b      	ldrb	r3, [r3, #0]
 800064c:	2b00      	cmp	r3, #0
 800064e:	d102      	bne.n	8000656 <main+0x4e>
	  printf("Acelerometro inicializado\r\n");
 8000650:	4827      	ldr	r0, [pc, #156]	; (80006f0 <main+0xe8>)
 8000652:	f00b fd0f 	bl	800c074 <puts>
  }

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000656:	f007 fedb 	bl	8008410 <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of print_queue */
  print_queueHandle = osMessageQueueNew (15, sizeof(uintptr_t), &print_queue_attributes);
 800065a:	4a26      	ldr	r2, [pc, #152]	; (80006f4 <main+0xec>)
 800065c:	2104      	movs	r1, #4
 800065e:	200f      	movs	r0, #15
 8000660:	f008 f8ca 	bl	80087f8 <osMessageQueueNew>
 8000664:	4603      	mov	r3, r0
 8000666:	4a24      	ldr	r2, [pc, #144]	; (80006f8 <main+0xf0>)
 8000668:	6013      	str	r3, [r2, #0]

  /* creation of receive_queue */
  receive_queueHandle = osMessageQueueNew (3, sizeof(uint8_t), &receive_queue_attributes);
 800066a:	4a24      	ldr	r2, [pc, #144]	; (80006fc <main+0xf4>)
 800066c:	2101      	movs	r1, #1
 800066e:	2003      	movs	r0, #3
 8000670:	f008 f8c2 	bl	80087f8 <osMessageQueueNew>
 8000674:	4603      	mov	r3, r0
 8000676:	4a22      	ldr	r2, [pc, #136]	; (8000700 <main+0xf8>)
 8000678:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of RTC_set */
  RTC_setHandle = osThreadNew(RTC_set_func, NULL, &RTC_set_attributes);
 800067a:	4a22      	ldr	r2, [pc, #136]	; (8000704 <main+0xfc>)
 800067c:	2100      	movs	r1, #0
 800067e:	4822      	ldr	r0, [pc, #136]	; (8000708 <main+0x100>)
 8000680:	f007 ff10 	bl	80084a4 <osThreadNew>
 8000684:	4603      	mov	r3, r0
 8000686:	4a21      	ldr	r2, [pc, #132]	; (800070c <main+0x104>)
 8000688:	6013      	str	r3, [r2, #0]

  /* creation of readAccel */
  readAccelHandle = osThreadNew(readAccel_func, NULL, &readAccel_attributes);
 800068a:	4a21      	ldr	r2, [pc, #132]	; (8000710 <main+0x108>)
 800068c:	2100      	movs	r1, #0
 800068e:	4821      	ldr	r0, [pc, #132]	; (8000714 <main+0x10c>)
 8000690:	f007 ff08 	bl	80084a4 <osThreadNew>
 8000694:	4603      	mov	r3, r0
 8000696:	4a20      	ldr	r2, [pc, #128]	; (8000718 <main+0x110>)
 8000698:	6013      	str	r3, [r2, #0]

  /* creation of printTask */
  printTaskHandle = osThreadNew(printTask_func, NULL, &printTask_attributes);
 800069a:	4a20      	ldr	r2, [pc, #128]	; (800071c <main+0x114>)
 800069c:	2100      	movs	r1, #0
 800069e:	4820      	ldr	r0, [pc, #128]	; (8000720 <main+0x118>)
 80006a0:	f007 ff00 	bl	80084a4 <osThreadNew>
 80006a4:	4603      	mov	r3, r0
 80006a6:	4a1f      	ldr	r2, [pc, #124]	; (8000724 <main+0x11c>)
 80006a8:	6013      	str	r3, [r2, #0]

  /* creation of tarea_UART */
  tarea_UARTHandle = osThreadNew(tarea_UART_func, NULL, &tarea_UART_attributes);
 80006aa:	4a1f      	ldr	r2, [pc, #124]	; (8000728 <main+0x120>)
 80006ac:	2100      	movs	r1, #0
 80006ae:	481f      	ldr	r0, [pc, #124]	; (800072c <main+0x124>)
 80006b0:	f007 fef8 	bl	80084a4 <osThreadNew>
 80006b4:	4603      	mov	r3, r0
 80006b6:	4a1e      	ldr	r2, [pc, #120]	; (8000730 <main+0x128>)
 80006b8:	6013      	str	r3, [r2, #0]

  /* creation of temporizador */
  temporizadorHandle = osThreadNew(temporizador_func, NULL, &temporizador_attributes);
 80006ba:	4a1e      	ldr	r2, [pc, #120]	; (8000734 <main+0x12c>)
 80006bc:	2100      	movs	r1, #0
 80006be:	481e      	ldr	r0, [pc, #120]	; (8000738 <main+0x130>)
 80006c0:	f007 fef0 	bl	80084a4 <osThreadNew>
 80006c4:	4603      	mov	r3, r0
 80006c6:	4a1d      	ldr	r2, [pc, #116]	; (800073c <main+0x134>)
 80006c8:	6013      	str	r3, [r2, #0]

  /* creation of sendMQTT */
  sendMQTTHandle = osThreadNew(sendMQTT_func, NULL, &sendMQTT_attributes);
 80006ca:	4a1d      	ldr	r2, [pc, #116]	; (8000740 <main+0x138>)
 80006cc:	2100      	movs	r1, #0
 80006ce:	481d      	ldr	r0, [pc, #116]	; (8000744 <main+0x13c>)
 80006d0:	f007 fee8 	bl	80084a4 <osThreadNew>
 80006d4:	4603      	mov	r3, r0
 80006d6:	4a1c      	ldr	r2, [pc, #112]	; (8000748 <main+0x140>)
 80006d8:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  HAL_UART_Receive_IT(&huart1,&rec_data,1);
 80006da:	2201      	movs	r2, #1
 80006dc:	491b      	ldr	r1, [pc, #108]	; (800074c <main+0x144>)
 80006de:	481c      	ldr	r0, [pc, #112]	; (8000750 <main+0x148>)
 80006e0:	f005 fe48 	bl	8006374 <HAL_UART_Receive_IT>
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80006e4:	f007 feb8 	bl	8008458 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006e8:	e7fe      	b.n	80006e8 <main+0xe0>
 80006ea:	bf00      	nop
 80006ec:	200007ac 	.word	0x200007ac
 80006f0:	0800d1d4 	.word	0x0800d1d4
 80006f4:	0800d694 	.word	0x0800d694
 80006f8:	2000078c 	.word	0x2000078c
 80006fc:	0800d6ac 	.word	0x0800d6ac
 8000700:	20000790 	.word	0x20000790
 8000704:	0800d5bc 	.word	0x0800d5bc
 8000708:	08001095 	.word	0x08001095
 800070c:	20000774 	.word	0x20000774
 8000710:	0800d5e0 	.word	0x0800d5e0
 8000714:	080013ad 	.word	0x080013ad
 8000718:	20000778 	.word	0x20000778
 800071c:	0800d604 	.word	0x0800d604
 8000720:	08001589 	.word	0x08001589
 8000724:	2000077c 	.word	0x2000077c
 8000728:	0800d628 	.word	0x0800d628
 800072c:	080015f1 	.word	0x080015f1
 8000730:	20000780 	.word	0x20000780
 8000734:	0800d64c 	.word	0x0800d64c
 8000738:	08001641 	.word	0x08001641
 800073c:	20000784 	.word	0x20000784
 8000740:	0800d670 	.word	0x0800d670
 8000744:	08001679 	.word	0x08001679
 8000748:	20000788 	.word	0x20000788
 800074c:	200007b4 	.word	0x200007b4
 8000750:	20000264 	.word	0x20000264

08000754 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b096      	sub	sp, #88	; 0x58
 8000758:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800075a:	f107 0314 	add.w	r3, r7, #20
 800075e:	2244      	movs	r2, #68	; 0x44
 8000760:	2100      	movs	r1, #0
 8000762:	4618      	mov	r0, r3
 8000764:	f00b fb63 	bl	800be2e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000768:	463b      	mov	r3, r7
 800076a:	2200      	movs	r2, #0
 800076c:	601a      	str	r2, [r3, #0]
 800076e:	605a      	str	r2, [r3, #4]
 8000770:	609a      	str	r2, [r3, #8]
 8000772:	60da      	str	r2, [r3, #12]
 8000774:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000776:	f44f 7000 	mov.w	r0, #512	; 0x200
 800077a:	f003 f9ed 	bl	8003b58 <HAL_PWREx_ControlVoltageScaling>
 800077e:	4603      	mov	r3, r0
 8000780:	2b00      	cmp	r3, #0
 8000782:	d001      	beq.n	8000788 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000784:	f000 ffe2 	bl	800174c <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000788:	f003 f9c8 	bl	8003b1c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800078c:	4b22      	ldr	r3, [pc, #136]	; (8000818 <SystemClock_Config+0xc4>)
 800078e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000792:	4a21      	ldr	r2, [pc, #132]	; (8000818 <SystemClock_Config+0xc4>)
 8000794:	f023 0318 	bic.w	r3, r3, #24
 8000798:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_LSE
 800079c:	231c      	movs	r3, #28
 800079e:	617b      	str	r3, [r7, #20]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80007a0:	2301      	movs	r3, #1
 80007a2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80007a4:	2301      	movs	r3, #1
 80007a6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80007a8:	2301      	movs	r3, #1
 80007aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80007ac:	2300      	movs	r3, #0
 80007ae:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80007b0:	2360      	movs	r3, #96	; 0x60
 80007b2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007b4:	2302      	movs	r3, #2
 80007b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80007b8:	2301      	movs	r3, #1
 80007ba:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80007bc:	2301      	movs	r3, #1
 80007be:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 80007c0:	2328      	movs	r3, #40	; 0x28
 80007c2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80007c4:	2307      	movs	r3, #7
 80007c6:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80007c8:	2302      	movs	r3, #2
 80007ca:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80007cc:	2302      	movs	r3, #2
 80007ce:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007d0:	f107 0314 	add.w	r3, r7, #20
 80007d4:	4618      	mov	r0, r3
 80007d6:	f003 fae1 	bl	8003d9c <HAL_RCC_OscConfig>
 80007da:	4603      	mov	r3, r0
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d001      	beq.n	80007e4 <SystemClock_Config+0x90>
  {
    Error_Handler();
 80007e0:	f000 ffb4 	bl	800174c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007e4:	230f      	movs	r3, #15
 80007e6:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007e8:	2303      	movs	r3, #3
 80007ea:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007ec:	2300      	movs	r3, #0
 80007ee:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007f0:	2300      	movs	r3, #0
 80007f2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007f4:	2300      	movs	r3, #0
 80007f6:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80007f8:	463b      	mov	r3, r7
 80007fa:	2104      	movs	r1, #4
 80007fc:	4618      	mov	r0, r3
 80007fe:	f003 fea9 	bl	8004554 <HAL_RCC_ClockConfig>
 8000802:	4603      	mov	r3, r0
 8000804:	2b00      	cmp	r3, #0
 8000806:	d001      	beq.n	800080c <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8000808:	f000 ffa0 	bl	800174c <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 800080c:	f004 fbe2 	bl	8004fd4 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000810:	bf00      	nop
 8000812:	3758      	adds	r7, #88	; 0x58
 8000814:	46bd      	mov	sp, r7
 8000816:	bd80      	pop	{r7, pc}
 8000818:	40021000 	.word	0x40021000

0800081c <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 8000820:	4b18      	ldr	r3, [pc, #96]	; (8000884 <MX_DFSDM1_Init+0x68>)
 8000822:	4a19      	ldr	r2, [pc, #100]	; (8000888 <MX_DFSDM1_Init+0x6c>)
 8000824:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 8000826:	4b17      	ldr	r3, [pc, #92]	; (8000884 <MX_DFSDM1_Init+0x68>)
 8000828:	2201      	movs	r2, #1
 800082a:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 800082c:	4b15      	ldr	r3, [pc, #84]	; (8000884 <MX_DFSDM1_Init+0x68>)
 800082e:	2200      	movs	r2, #0
 8000830:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 8000832:	4b14      	ldr	r3, [pc, #80]	; (8000884 <MX_DFSDM1_Init+0x68>)
 8000834:	2202      	movs	r2, #2
 8000836:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000838:	4b12      	ldr	r3, [pc, #72]	; (8000884 <MX_DFSDM1_Init+0x68>)
 800083a:	2200      	movs	r2, #0
 800083c:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 800083e:	4b11      	ldr	r3, [pc, #68]	; (8000884 <MX_DFSDM1_Init+0x68>)
 8000840:	2200      	movs	r2, #0
 8000842:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 8000844:	4b0f      	ldr	r3, [pc, #60]	; (8000884 <MX_DFSDM1_Init+0x68>)
 8000846:	f44f 7280 	mov.w	r2, #256	; 0x100
 800084a:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 800084c:	4b0d      	ldr	r3, [pc, #52]	; (8000884 <MX_DFSDM1_Init+0x68>)
 800084e:	2200      	movs	r2, #0
 8000850:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8000852:	4b0c      	ldr	r3, [pc, #48]	; (8000884 <MX_DFSDM1_Init+0x68>)
 8000854:	2204      	movs	r2, #4
 8000856:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000858:	4b0a      	ldr	r3, [pc, #40]	; (8000884 <MX_DFSDM1_Init+0x68>)
 800085a:	2200      	movs	r2, #0
 800085c:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 800085e:	4b09      	ldr	r3, [pc, #36]	; (8000884 <MX_DFSDM1_Init+0x68>)
 8000860:	2201      	movs	r2, #1
 8000862:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 8000864:	4b07      	ldr	r3, [pc, #28]	; (8000884 <MX_DFSDM1_Init+0x68>)
 8000866:	2200      	movs	r2, #0
 8000868:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 800086a:	4b06      	ldr	r3, [pc, #24]	; (8000884 <MX_DFSDM1_Init+0x68>)
 800086c:	2200      	movs	r2, #0
 800086e:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 8000870:	4804      	ldr	r0, [pc, #16]	; (8000884 <MX_DFSDM1_Init+0x68>)
 8000872:	f001 fd87 	bl	8002384 <HAL_DFSDM_ChannelInit>
 8000876:	4603      	mov	r3, r0
 8000878:	2b00      	cmp	r3, #0
 800087a:	d001      	beq.n	8000880 <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 800087c:	f000 ff66 	bl	800174c <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8000880:	bf00      	nop
 8000882:	bd80      	pop	{r7, pc}
 8000884:	200000c8 	.word	0x200000c8
 8000888:	40016020 	.word	0x40016020

0800088c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000890:	4b1b      	ldr	r3, [pc, #108]	; (8000900 <MX_I2C2_Init+0x74>)
 8000892:	4a1c      	ldr	r2, [pc, #112]	; (8000904 <MX_I2C2_Init+0x78>)
 8000894:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00000E14;
 8000896:	4b1a      	ldr	r3, [pc, #104]	; (8000900 <MX_I2C2_Init+0x74>)
 8000898:	f640 6214 	movw	r2, #3604	; 0xe14
 800089c:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800089e:	4b18      	ldr	r3, [pc, #96]	; (8000900 <MX_I2C2_Init+0x74>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008a4:	4b16      	ldr	r3, [pc, #88]	; (8000900 <MX_I2C2_Init+0x74>)
 80008a6:	2201      	movs	r2, #1
 80008a8:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008aa:	4b15      	ldr	r3, [pc, #84]	; (8000900 <MX_I2C2_Init+0x74>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80008b0:	4b13      	ldr	r3, [pc, #76]	; (8000900 <MX_I2C2_Init+0x74>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80008b6:	4b12      	ldr	r3, [pc, #72]	; (8000900 <MX_I2C2_Init+0x74>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008bc:	4b10      	ldr	r3, [pc, #64]	; (8000900 <MX_I2C2_Init+0x74>)
 80008be:	2200      	movs	r2, #0
 80008c0:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008c2:	4b0f      	ldr	r3, [pc, #60]	; (8000900 <MX_I2C2_Init+0x74>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80008c8:	480d      	ldr	r0, [pc, #52]	; (8000900 <MX_I2C2_Init+0x74>)
 80008ca:	f002 f9b5 	bl	8002c38 <HAL_I2C_Init>
 80008ce:	4603      	mov	r3, r0
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d001      	beq.n	80008d8 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80008d4:	f000 ff3a 	bl	800174c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80008d8:	2100      	movs	r1, #0
 80008da:	4809      	ldr	r0, [pc, #36]	; (8000900 <MX_I2C2_Init+0x74>)
 80008dc:	f002 ff3e 	bl	800375c <HAL_I2CEx_ConfigAnalogFilter>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d001      	beq.n	80008ea <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 80008e6:	f000 ff31 	bl	800174c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80008ea:	2100      	movs	r1, #0
 80008ec:	4804      	ldr	r0, [pc, #16]	; (8000900 <MX_I2C2_Init+0x74>)
 80008ee:	f002 ff80 	bl	80037f2 <HAL_I2CEx_ConfigDigitalFilter>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d001      	beq.n	80008fc <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 80008f8:	f000 ff28 	bl	800174c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80008fc:	bf00      	nop
 80008fe:	bd80      	pop	{r7, pc}
 8000900:	20000100 	.word	0x20000100
 8000904:	40005800 	.word	0x40005800

08000908 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 800090c:	4b0f      	ldr	r3, [pc, #60]	; (800094c <MX_QUADSPI_Init+0x44>)
 800090e:	4a10      	ldr	r2, [pc, #64]	; (8000950 <MX_QUADSPI_Init+0x48>)
 8000910:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 2;
 8000912:	4b0e      	ldr	r3, [pc, #56]	; (800094c <MX_QUADSPI_Init+0x44>)
 8000914:	2202      	movs	r2, #2
 8000916:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8000918:	4b0c      	ldr	r3, [pc, #48]	; (800094c <MX_QUADSPI_Init+0x44>)
 800091a:	2204      	movs	r2, #4
 800091c:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 800091e:	4b0b      	ldr	r3, [pc, #44]	; (800094c <MX_QUADSPI_Init+0x44>)
 8000920:	2210      	movs	r2, #16
 8000922:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 8000924:	4b09      	ldr	r3, [pc, #36]	; (800094c <MX_QUADSPI_Init+0x44>)
 8000926:	2217      	movs	r2, #23
 8000928:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 800092a:	4b08      	ldr	r3, [pc, #32]	; (800094c <MX_QUADSPI_Init+0x44>)
 800092c:	2200      	movs	r2, #0
 800092e:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000930:	4b06      	ldr	r3, [pc, #24]	; (800094c <MX_QUADSPI_Init+0x44>)
 8000932:	2200      	movs	r2, #0
 8000934:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000936:	4805      	ldr	r0, [pc, #20]	; (800094c <MX_QUADSPI_Init+0x44>)
 8000938:	f003 f974 	bl	8003c24 <HAL_QSPI_Init>
 800093c:	4603      	mov	r3, r0
 800093e:	2b00      	cmp	r3, #0
 8000940:	d001      	beq.n	8000946 <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 8000942:	f000 ff03 	bl	800174c <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8000946:	bf00      	nop
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	2000014c 	.word	0x2000014c
 8000950:	a0001000 	.word	0xa0001000

08000954 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b086      	sub	sp, #24
 8000958:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800095a:	1d3b      	adds	r3, r7, #4
 800095c:	2200      	movs	r2, #0
 800095e:	601a      	str	r2, [r3, #0]
 8000960:	605a      	str	r2, [r3, #4]
 8000962:	609a      	str	r2, [r3, #8]
 8000964:	60da      	str	r2, [r3, #12]
 8000966:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000968:	2300      	movs	r3, #0
 800096a:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800096c:	4b25      	ldr	r3, [pc, #148]	; (8000a04 <MX_RTC_Init+0xb0>)
 800096e:	4a26      	ldr	r2, [pc, #152]	; (8000a08 <MX_RTC_Init+0xb4>)
 8000970:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000972:	4b24      	ldr	r3, [pc, #144]	; (8000a04 <MX_RTC_Init+0xb0>)
 8000974:	2200      	movs	r2, #0
 8000976:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000978:	4b22      	ldr	r3, [pc, #136]	; (8000a04 <MX_RTC_Init+0xb0>)
 800097a:	227f      	movs	r2, #127	; 0x7f
 800097c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800097e:	4b21      	ldr	r3, [pc, #132]	; (8000a04 <MX_RTC_Init+0xb0>)
 8000980:	22ff      	movs	r2, #255	; 0xff
 8000982:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000984:	4b1f      	ldr	r3, [pc, #124]	; (8000a04 <MX_RTC_Init+0xb0>)
 8000986:	2200      	movs	r2, #0
 8000988:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800098a:	4b1e      	ldr	r3, [pc, #120]	; (8000a04 <MX_RTC_Init+0xb0>)
 800098c:	2200      	movs	r2, #0
 800098e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000990:	4b1c      	ldr	r3, [pc, #112]	; (8000a04 <MX_RTC_Init+0xb0>)
 8000992:	2200      	movs	r2, #0
 8000994:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000996:	4b1b      	ldr	r3, [pc, #108]	; (8000a04 <MX_RTC_Init+0xb0>)
 8000998:	2200      	movs	r2, #0
 800099a:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800099c:	4819      	ldr	r0, [pc, #100]	; (8000a04 <MX_RTC_Init+0xb0>)
 800099e:	f004 fcfb 	bl	8005398 <HAL_RTC_Init>
 80009a2:	4603      	mov	r3, r0
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d001      	beq.n	80009ac <MX_RTC_Init+0x58>
  {
    Error_Handler();
 80009a8:	f000 fed0 	bl	800174c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 13;
 80009ac:	230d      	movs	r3, #13
 80009ae:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 1;
 80009b0:	2301      	movs	r3, #1
 80009b2:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0;
 80009b4:	2300      	movs	r3, #0
 80009b6:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80009b8:	2300      	movs	r3, #0
 80009ba:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80009bc:	2300      	movs	r3, #0
 80009be:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 80009c0:	1d3b      	adds	r3, r7, #4
 80009c2:	2200      	movs	r2, #0
 80009c4:	4619      	mov	r1, r3
 80009c6:	480f      	ldr	r0, [pc, #60]	; (8000a04 <MX_RTC_Init+0xb0>)
 80009c8:	f004 fd61 	bl	800548e <HAL_RTC_SetTime>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d001      	beq.n	80009d6 <MX_RTC_Init+0x82>
  {
    Error_Handler();
 80009d2:	f000 febb 	bl	800174c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80009d6:	2301      	movs	r3, #1
 80009d8:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 80009da:	2301      	movs	r3, #1
 80009dc:	707b      	strb	r3, [r7, #1]
  sDate.Date = 1;
 80009de:	2301      	movs	r3, #1
 80009e0:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0;
 80009e2:	2300      	movs	r3, #0
 80009e4:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 80009e6:	463b      	mov	r3, r7
 80009e8:	2200      	movs	r2, #0
 80009ea:	4619      	mov	r1, r3
 80009ec:	4805      	ldr	r0, [pc, #20]	; (8000a04 <MX_RTC_Init+0xb0>)
 80009ee:	f004 fe47 	bl	8005680 <HAL_RTC_SetDate>
 80009f2:	4603      	mov	r3, r0
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d001      	beq.n	80009fc <MX_RTC_Init+0xa8>
  {
    Error_Handler();
 80009f8:	f000 fea8 	bl	800174c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80009fc:	bf00      	nop
 80009fe:	3718      	adds	r7, #24
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bd80      	pop	{r7, pc}
 8000a04:	20000190 	.word	0x20000190
 8000a08:	40002800 	.word	0x40002800

08000a0c <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000a10:	4b1b      	ldr	r3, [pc, #108]	; (8000a80 <MX_SPI3_Init+0x74>)
 8000a12:	4a1c      	ldr	r2, [pc, #112]	; (8000a84 <MX_SPI3_Init+0x78>)
 8000a14:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000a16:	4b1a      	ldr	r3, [pc, #104]	; (8000a80 <MX_SPI3_Init+0x74>)
 8000a18:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000a1c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000a1e:	4b18      	ldr	r3, [pc, #96]	; (8000a80 <MX_SPI3_Init+0x74>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8000a24:	4b16      	ldr	r3, [pc, #88]	; (8000a80 <MX_SPI3_Init+0x74>)
 8000a26:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000a2a:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a2c:	4b14      	ldr	r3, [pc, #80]	; (8000a80 <MX_SPI3_Init+0x74>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a32:	4b13      	ldr	r3, [pc, #76]	; (8000a80 <MX_SPI3_Init+0x74>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000a38:	4b11      	ldr	r3, [pc, #68]	; (8000a80 <MX_SPI3_Init+0x74>)
 8000a3a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a3e:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000a40:	4b0f      	ldr	r3, [pc, #60]	; (8000a80 <MX_SPI3_Init+0x74>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a46:	4b0e      	ldr	r3, [pc, #56]	; (8000a80 <MX_SPI3_Init+0x74>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a4c:	4b0c      	ldr	r3, [pc, #48]	; (8000a80 <MX_SPI3_Init+0x74>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a52:	4b0b      	ldr	r3, [pc, #44]	; (8000a80 <MX_SPI3_Init+0x74>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000a58:	4b09      	ldr	r3, [pc, #36]	; (8000a80 <MX_SPI3_Init+0x74>)
 8000a5a:	2207      	movs	r2, #7
 8000a5c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000a5e:	4b08      	ldr	r3, [pc, #32]	; (8000a80 <MX_SPI3_Init+0x74>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000a64:	4b06      	ldr	r3, [pc, #24]	; (8000a80 <MX_SPI3_Init+0x74>)
 8000a66:	2208      	movs	r2, #8
 8000a68:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000a6a:	4805      	ldr	r0, [pc, #20]	; (8000a80 <MX_SPI3_Init+0x74>)
 8000a6c:	f004 ffae 	bl	80059cc <HAL_SPI_Init>
 8000a70:	4603      	mov	r3, r0
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d001      	beq.n	8000a7a <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000a76:	f000 fe69 	bl	800174c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000a7a:	bf00      	nop
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	200001b4 	.word	0x200001b4
 8000a84:	40003c00 	.word	0x40003c00

08000a88 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b084      	sub	sp, #16
 8000a8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a8e:	1d3b      	adds	r3, r7, #4
 8000a90:	2200      	movs	r2, #0
 8000a92:	601a      	str	r2, [r3, #0]
 8000a94:	605a      	str	r2, [r3, #4]
 8000a96:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8000a98:	4b14      	ldr	r3, [pc, #80]	; (8000aec <MX_TIM7_Init+0x64>)
 8000a9a:	4a15      	ldr	r2, [pc, #84]	; (8000af0 <MX_TIM7_Init+0x68>)
 8000a9c:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 8000a9e:	4b13      	ldr	r3, [pc, #76]	; (8000aec <MX_TIM7_Init+0x64>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000aa4:	4b11      	ldr	r3, [pc, #68]	; (8000aec <MX_TIM7_Init+0x64>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 799;
 8000aaa:	4b10      	ldr	r3, [pc, #64]	; (8000aec <MX_TIM7_Init+0x64>)
 8000aac:	f240 321f 	movw	r2, #799	; 0x31f
 8000ab0:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ab2:	4b0e      	ldr	r3, [pc, #56]	; (8000aec <MX_TIM7_Init+0x64>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000ab8:	480c      	ldr	r0, [pc, #48]	; (8000aec <MX_TIM7_Init+0x64>)
 8000aba:	f005 f82a 	bl	8005b12 <HAL_TIM_Base_Init>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d001      	beq.n	8000ac8 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8000ac4:	f000 fe42 	bl	800174c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000acc:	2300      	movs	r3, #0
 8000ace:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000ad0:	1d3b      	adds	r3, r7, #4
 8000ad2:	4619      	mov	r1, r3
 8000ad4:	4805      	ldr	r0, [pc, #20]	; (8000aec <MX_TIM7_Init+0x64>)
 8000ad6:	f005 fac5 	bl	8006064 <HAL_TIMEx_MasterConfigSynchronization>
 8000ada:	4603      	mov	r3, r0
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d001      	beq.n	8000ae4 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8000ae0:	f000 fe34 	bl	800174c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8000ae4:	bf00      	nop
 8000ae6:	3710      	adds	r7, #16
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bd80      	pop	{r7, pc}
 8000aec:	20000218 	.word	0x20000218
 8000af0:	40001400 	.word	0x40001400

08000af4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000af8:	4b14      	ldr	r3, [pc, #80]	; (8000b4c <MX_USART1_UART_Init+0x58>)
 8000afa:	4a15      	ldr	r2, [pc, #84]	; (8000b50 <MX_USART1_UART_Init+0x5c>)
 8000afc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000afe:	4b13      	ldr	r3, [pc, #76]	; (8000b4c <MX_USART1_UART_Init+0x58>)
 8000b00:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b04:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b06:	4b11      	ldr	r3, [pc, #68]	; (8000b4c <MX_USART1_UART_Init+0x58>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000b0c:	4b0f      	ldr	r3, [pc, #60]	; (8000b4c <MX_USART1_UART_Init+0x58>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000b12:	4b0e      	ldr	r3, [pc, #56]	; (8000b4c <MX_USART1_UART_Init+0x58>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000b18:	4b0c      	ldr	r3, [pc, #48]	; (8000b4c <MX_USART1_UART_Init+0x58>)
 8000b1a:	220c      	movs	r2, #12
 8000b1c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b1e:	4b0b      	ldr	r3, [pc, #44]	; (8000b4c <MX_USART1_UART_Init+0x58>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b24:	4b09      	ldr	r3, [pc, #36]	; (8000b4c <MX_USART1_UART_Init+0x58>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b2a:	4b08      	ldr	r3, [pc, #32]	; (8000b4c <MX_USART1_UART_Init+0x58>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b30:	4b06      	ldr	r3, [pc, #24]	; (8000b4c <MX_USART1_UART_Init+0x58>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000b36:	4805      	ldr	r0, [pc, #20]	; (8000b4c <MX_USART1_UART_Init+0x58>)
 8000b38:	f005 fb3a 	bl	80061b0 <HAL_UART_Init>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d001      	beq.n	8000b46 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000b42:	f000 fe03 	bl	800174c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000b46:	bf00      	nop
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	20000264 	.word	0x20000264
 8000b50:	40013800 	.word	0x40013800

08000b54 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000b58:	4b14      	ldr	r3, [pc, #80]	; (8000bac <MX_USART3_UART_Init+0x58>)
 8000b5a:	4a15      	ldr	r2, [pc, #84]	; (8000bb0 <MX_USART3_UART_Init+0x5c>)
 8000b5c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000b5e:	4b13      	ldr	r3, [pc, #76]	; (8000bac <MX_USART3_UART_Init+0x58>)
 8000b60:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b64:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000b66:	4b11      	ldr	r3, [pc, #68]	; (8000bac <MX_USART3_UART_Init+0x58>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000b6c:	4b0f      	ldr	r3, [pc, #60]	; (8000bac <MX_USART3_UART_Init+0x58>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000b72:	4b0e      	ldr	r3, [pc, #56]	; (8000bac <MX_USART3_UART_Init+0x58>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000b78:	4b0c      	ldr	r3, [pc, #48]	; (8000bac <MX_USART3_UART_Init+0x58>)
 8000b7a:	220c      	movs	r2, #12
 8000b7c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b7e:	4b0b      	ldr	r3, [pc, #44]	; (8000bac <MX_USART3_UART_Init+0x58>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b84:	4b09      	ldr	r3, [pc, #36]	; (8000bac <MX_USART3_UART_Init+0x58>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b8a:	4b08      	ldr	r3, [pc, #32]	; (8000bac <MX_USART3_UART_Init+0x58>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b90:	4b06      	ldr	r3, [pc, #24]	; (8000bac <MX_USART3_UART_Init+0x58>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000b96:	4805      	ldr	r0, [pc, #20]	; (8000bac <MX_USART3_UART_Init+0x58>)
 8000b98:	f005 fb0a 	bl	80061b0 <HAL_UART_Init>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d001      	beq.n	8000ba6 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000ba2:	f000 fdd3 	bl	800174c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000ba6:	bf00      	nop
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	200002e8 	.word	0x200002e8
 8000bb0:	40004800 	.word	0x40004800

08000bb4 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000bb8:	4b14      	ldr	r3, [pc, #80]	; (8000c0c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000bba:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000bbe:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000bc0:	4b12      	ldr	r3, [pc, #72]	; (8000c0c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000bc2:	2206      	movs	r2, #6
 8000bc4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000bc6:	4b11      	ldr	r3, [pc, #68]	; (8000c0c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000bc8:	2202      	movs	r2, #2
 8000bca:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000bcc:	4b0f      	ldr	r3, [pc, #60]	; (8000c0c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000bce:	2202      	movs	r2, #2
 8000bd0:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000bd2:	4b0e      	ldr	r3, [pc, #56]	; (8000c0c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000bd8:	4b0c      	ldr	r3, [pc, #48]	; (8000c0c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000bde:	4b0b      	ldr	r3, [pc, #44]	; (8000c0c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8000be4:	4b09      	ldr	r3, [pc, #36]	; (8000c0c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000bea:	4b08      	ldr	r3, [pc, #32]	; (8000c0c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8000bf0:	4b06      	ldr	r3, [pc, #24]	; (8000c0c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000bf6:	4805      	ldr	r0, [pc, #20]	; (8000c0c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000bf8:	f002 fe47 	bl	800388a <HAL_PCD_Init>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d001      	beq.n	8000c06 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000c02:	f000 fda3 	bl	800174c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000c06:	bf00      	nop
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	2000036c 	.word	0x2000036c

08000c10 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b08a      	sub	sp, #40	; 0x28
 8000c14:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c16:	f107 0314 	add.w	r3, r7, #20
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	601a      	str	r2, [r3, #0]
 8000c1e:	605a      	str	r2, [r3, #4]
 8000c20:	609a      	str	r2, [r3, #8]
 8000c22:	60da      	str	r2, [r3, #12]
 8000c24:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c26:	4bbb      	ldr	r3, [pc, #748]	; (8000f14 <MX_GPIO_Init+0x304>)
 8000c28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c2a:	4aba      	ldr	r2, [pc, #744]	; (8000f14 <MX_GPIO_Init+0x304>)
 8000c2c:	f043 0310 	orr.w	r3, r3, #16
 8000c30:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c32:	4bb8      	ldr	r3, [pc, #736]	; (8000f14 <MX_GPIO_Init+0x304>)
 8000c34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c36:	f003 0310 	and.w	r3, r3, #16
 8000c3a:	613b      	str	r3, [r7, #16]
 8000c3c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c3e:	4bb5      	ldr	r3, [pc, #724]	; (8000f14 <MX_GPIO_Init+0x304>)
 8000c40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c42:	4ab4      	ldr	r2, [pc, #720]	; (8000f14 <MX_GPIO_Init+0x304>)
 8000c44:	f043 0304 	orr.w	r3, r3, #4
 8000c48:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c4a:	4bb2      	ldr	r3, [pc, #712]	; (8000f14 <MX_GPIO_Init+0x304>)
 8000c4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c4e:	f003 0304 	and.w	r3, r3, #4
 8000c52:	60fb      	str	r3, [r7, #12]
 8000c54:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c56:	4baf      	ldr	r3, [pc, #700]	; (8000f14 <MX_GPIO_Init+0x304>)
 8000c58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c5a:	4aae      	ldr	r2, [pc, #696]	; (8000f14 <MX_GPIO_Init+0x304>)
 8000c5c:	f043 0301 	orr.w	r3, r3, #1
 8000c60:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c62:	4bac      	ldr	r3, [pc, #688]	; (8000f14 <MX_GPIO_Init+0x304>)
 8000c64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c66:	f003 0301 	and.w	r3, r3, #1
 8000c6a:	60bb      	str	r3, [r7, #8]
 8000c6c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c6e:	4ba9      	ldr	r3, [pc, #676]	; (8000f14 <MX_GPIO_Init+0x304>)
 8000c70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c72:	4aa8      	ldr	r2, [pc, #672]	; (8000f14 <MX_GPIO_Init+0x304>)
 8000c74:	f043 0302 	orr.w	r3, r3, #2
 8000c78:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c7a:	4ba6      	ldr	r3, [pc, #664]	; (8000f14 <MX_GPIO_Init+0x304>)
 8000c7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c7e:	f003 0302 	and.w	r3, r3, #2
 8000c82:	607b      	str	r3, [r7, #4]
 8000c84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c86:	4ba3      	ldr	r3, [pc, #652]	; (8000f14 <MX_GPIO_Init+0x304>)
 8000c88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c8a:	4aa2      	ldr	r2, [pc, #648]	; (8000f14 <MX_GPIO_Init+0x304>)
 8000c8c:	f043 0308 	orr.w	r3, r3, #8
 8000c90:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c92:	4ba0      	ldr	r3, [pc, #640]	; (8000f14 <MX_GPIO_Init+0x304>)
 8000c94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c96:	f003 0308 	and.w	r3, r3, #8
 8000c9a:	603b      	str	r3, [r7, #0]
 8000c9c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	f44f 718a 	mov.w	r1, #276	; 0x114
 8000ca4:	489c      	ldr	r0, [pc, #624]	; (8000f18 <MX_GPIO_Init+0x308>)
 8000ca6:	f001 ff97 	bl	8002bd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|LED1_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 8000caa:	2200      	movs	r2, #0
 8000cac:	f248 1124 	movw	r1, #33060	; 0x8124
 8000cb0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cb4:	f001 ff90 	bl	8002bd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000cb8:	2200      	movs	r2, #0
 8000cba:	f24f 0114 	movw	r1, #61460	; 0xf014
 8000cbe:	4897      	ldr	r0, [pc, #604]	; (8000f1c <MX_GPIO_Init+0x30c>)
 8000cc0:	f001 ff8a 	bl	8002bd8 <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	f241 0181 	movw	r1, #4225	; 0x1081
 8000cca:	4895      	ldr	r0, [pc, #596]	; (8000f20 <MX_GPIO_Init+0x310>)
 8000ccc:	f001 ff84 	bl	8002bd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000cd0:	2201      	movs	r2, #1
 8000cd2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000cd6:	4892      	ldr	r0, [pc, #584]	; (8000f20 <MX_GPIO_Init+0x310>)
 8000cd8:	f001 ff7e 	bl	8002bd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8000cdc:	2200      	movs	r2, #0
 8000cde:	f44f 7110 	mov.w	r1, #576	; 0x240
 8000ce2:	4890      	ldr	r0, [pc, #576]	; (8000f24 <MX_GPIO_Init+0x314>)
 8000ce4:	f001 ff78 	bl	8002bd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000ce8:	2201      	movs	r2, #1
 8000cea:	2101      	movs	r1, #1
 8000cec:	488a      	ldr	r0, [pc, #552]	; (8000f18 <MX_GPIO_Init+0x308>)
 8000cee:	f001 ff73 	bl	8002bd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8000cf2:	f240 1315 	movw	r3, #277	; 0x115
 8000cf6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cf8:	2301      	movs	r3, #1
 8000cfa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d00:	2300      	movs	r3, #0
 8000d02:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d04:	f107 0314 	add.w	r3, r7, #20
 8000d08:	4619      	mov	r1, r3
 8000d0a:	4883      	ldr	r0, [pc, #524]	; (8000f18 <MX_GPIO_Init+0x308>)
 8000d0c:	f001 fcc6 	bl	800269c <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 8000d10:	236a      	movs	r3, #106	; 0x6a
 8000d12:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d14:	4b84      	ldr	r3, [pc, #528]	; (8000f28 <MX_GPIO_Init+0x318>)
 8000d16:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d1c:	f107 0314 	add.w	r3, r7, #20
 8000d20:	4619      	mov	r1, r3
 8000d22:	487d      	ldr	r0, [pc, #500]	; (8000f18 <MX_GPIO_Init+0x308>)
 8000d24:	f001 fcba 	bl	800269c <HAL_GPIO_Init>

  /*Configure GPIO pins : BOTON_Pin VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = BOTON_Pin|VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8000d28:	f44f 5306 	mov.w	r3, #8576	; 0x2180
 8000d2c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d2e:	4b7e      	ldr	r3, [pc, #504]	; (8000f28 <MX_GPIO_Init+0x318>)
 8000d30:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d32:	2300      	movs	r3, #0
 8000d34:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d36:	f107 0314 	add.w	r3, r7, #20
 8000d3a:	4619      	mov	r1, r3
 8000d3c:	4879      	ldr	r0, [pc, #484]	; (8000f24 <MX_GPIO_Init+0x314>)
 8000d3e:	f001 fcad 	bl	800269c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 8000d42:	233f      	movs	r3, #63	; 0x3f
 8000d44:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000d46:	230b      	movs	r3, #11
 8000d48:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d4e:	f107 0314 	add.w	r3, r7, #20
 8000d52:	4619      	mov	r1, r3
 8000d54:	4873      	ldr	r0, [pc, #460]	; (8000f24 <MX_GPIO_Init+0x314>)
 8000d56:	f001 fca1 	bl	800269c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8000d5a:	2303      	movs	r3, #3
 8000d5c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d5e:	2302      	movs	r3, #2
 8000d60:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d62:	2300      	movs	r3, #0
 8000d64:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d66:	2303      	movs	r3, #3
 8000d68:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000d6a:	2308      	movs	r3, #8
 8000d6c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d6e:	f107 0314 	add.w	r3, r7, #20
 8000d72:	4619      	mov	r1, r3
 8000d74:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d78:	f001 fc90 	bl	800269c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin LED1_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|LED1_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 8000d7c:	f248 1324 	movw	r3, #33060	; 0x8124
 8000d80:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d82:	2301      	movs	r3, #1
 8000d84:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d86:	2300      	movs	r3, #0
 8000d88:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d8e:	f107 0314 	add.w	r3, r7, #20
 8000d92:	4619      	mov	r1, r3
 8000d94:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d98:	f001 fc80 	bl	800269c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 8000d9c:	2308      	movs	r3, #8
 8000d9e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000da0:	2302      	movs	r3, #2
 8000da2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da4:	2300      	movs	r3, #0
 8000da6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000da8:	2300      	movs	r3, #0
 8000daa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000dac:	2301      	movs	r3, #1
 8000dae:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 8000db0:	f107 0314 	add.w	r3, r7, #20
 8000db4:	4619      	mov	r1, r3
 8000db6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dba:	f001 fc6f 	bl	800269c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D7_Pin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 8000dbe:	2310      	movs	r3, #16
 8000dc0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000dc2:	230b      	movs	r3, #11
 8000dc4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 8000dca:	f107 0314 	add.w	r3, r7, #20
 8000dce:	4619      	mov	r1, r3
 8000dd0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dd4:	f001 fc62 	bl	800269c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D12_Pin|ARD_D11_Pin;
 8000dd8:	23c0      	movs	r3, #192	; 0xc0
 8000dda:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ddc:	2302      	movs	r3, #2
 8000dde:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de0:	2300      	movs	r3, #0
 8000de2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000de4:	2303      	movs	r3, #3
 8000de6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000de8:	2305      	movs	r3, #5
 8000dea:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dec:	f107 0314 	add.w	r3, r7, #20
 8000df0:	4619      	mov	r1, r3
 8000df2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000df6:	f001 fc51 	bl	800269c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8000dfa:	2301      	movs	r3, #1
 8000dfc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000dfe:	4b4a      	ldr	r3, [pc, #296]	; (8000f28 <MX_GPIO_Init+0x318>)
 8000e00:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e02:	2300      	movs	r3, #0
 8000e04:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8000e06:	f107 0314 	add.w	r3, r7, #20
 8000e0a:	4619      	mov	r1, r3
 8000e0c:	4843      	ldr	r0, [pc, #268]	; (8000f1c <MX_GPIO_Init+0x30c>)
 8000e0e:	f001 fc45 	bl	800269c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8000e12:	2302      	movs	r3, #2
 8000e14:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000e16:	230b      	movs	r3, #11
 8000e18:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8000e1e:	f107 0314 	add.w	r3, r7, #20
 8000e22:	4619      	mov	r1, r3
 8000e24:	483d      	ldr	r0, [pc, #244]	; (8000f1c <MX_GPIO_Init+0x30c>)
 8000e26:	f001 fc39 	bl	800269c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000e2a:	f24f 0314 	movw	r3, #61460	; 0xf014
 8000e2e:	617b      	str	r3, [r7, #20]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e30:	2301      	movs	r3, #1
 8000e32:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e34:	2300      	movs	r3, #0
 8000e36:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e3c:	f107 0314 	add.w	r3, r7, #20
 8000e40:	4619      	mov	r1, r3
 8000e42:	4836      	ldr	r0, [pc, #216]	; (8000f1c <MX_GPIO_Init+0x30c>)
 8000e44:	f001 fc2a 	bl	800269c <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 8000e48:	f64c 4304 	movw	r3, #52228	; 0xcc04
 8000e4c:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e4e:	4b36      	ldr	r3, [pc, #216]	; (8000f28 <MX_GPIO_Init+0x318>)
 8000e50:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e52:	2300      	movs	r3, #0
 8000e54:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e56:	f107 0314 	add.w	r3, r7, #20
 8000e5a:	4619      	mov	r1, r3
 8000e5c:	4830      	ldr	r0, [pc, #192]	; (8000f20 <MX_GPIO_Init+0x310>)
 8000e5e:	f001 fc1d 	bl	800269c <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 8000e62:	f243 0381 	movw	r3, #12417	; 0x3081
 8000e66:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e68:	2301      	movs	r3, #1
 8000e6a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e70:	2300      	movs	r3, #0
 8000e72:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e74:	f107 0314 	add.w	r3, r7, #20
 8000e78:	4619      	mov	r1, r3
 8000e7a:	4829      	ldr	r0, [pc, #164]	; (8000f20 <MX_GPIO_Init+0x310>)
 8000e7c:	f001 fc0e 	bl	800269c <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8000e80:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000e84:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e86:	2301      	movs	r3, #1
 8000e88:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e92:	f107 0314 	add.w	r3, r7, #20
 8000e96:	4619      	mov	r1, r3
 8000e98:	4822      	ldr	r0, [pc, #136]	; (8000f24 <MX_GPIO_Init+0x314>)
 8000e9a:	f001 fbff 	bl	800269c <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 8000e9e:	2302      	movs	r3, #2
 8000ea0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ea2:	2302      	movs	r3, #2
 8000ea4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eaa:	2303      	movs	r3, #3
 8000eac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000eae:	2305      	movs	r3, #5
 8000eb0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8000eb2:	f107 0314 	add.w	r3, r7, #20
 8000eb6:	4619      	mov	r1, r3
 8000eb8:	4819      	ldr	r0, [pc, #100]	; (8000f20 <MX_GPIO_Init+0x310>)
 8000eba:	f001 fbef 	bl	800269c <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8000ebe:	2378      	movs	r3, #120	; 0x78
 8000ec0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ec2:	2302      	movs	r3, #2
 8000ec4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eca:	2303      	movs	r3, #3
 8000ecc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ece:	2307      	movs	r3, #7
 8000ed0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ed2:	f107 0314 	add.w	r3, r7, #20
 8000ed6:	4619      	mov	r1, r3
 8000ed8:	4811      	ldr	r0, [pc, #68]	; (8000f20 <MX_GPIO_Init+0x310>)
 8000eda:	f001 fbdf 	bl	800269c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8000ede:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000ee2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ee4:	2312      	movs	r3, #18
 8000ee6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eec:	2303      	movs	r3, #3
 8000eee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000ef0:	2304      	movs	r3, #4
 8000ef2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ef4:	f107 0314 	add.w	r3, r7, #20
 8000ef8:	4619      	mov	r1, r3
 8000efa:	4808      	ldr	r0, [pc, #32]	; (8000f1c <MX_GPIO_Init+0x30c>)
 8000efc:	f001 fbce 	bl	800269c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8000f00:	2200      	movs	r2, #0
 8000f02:	2105      	movs	r1, #5
 8000f04:	2017      	movs	r0, #23
 8000f06:	f001 fa13 	bl	8002330 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000f0a:	2017      	movs	r0, #23
 8000f0c:	f001 fa2c 	bl	8002368 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000f10:	2200      	movs	r2, #0
 8000f12:	e00b      	b.n	8000f2c <MX_GPIO_Init+0x31c>
 8000f14:	40021000 	.word	0x40021000
 8000f18:	48001000 	.word	0x48001000
 8000f1c:	48000400 	.word	0x48000400
 8000f20:	48000c00 	.word	0x48000c00
 8000f24:	48000800 	.word	0x48000800
 8000f28:	10110000 	.word	0x10110000
 8000f2c:	2105      	movs	r1, #5
 8000f2e:	2028      	movs	r0, #40	; 0x28
 8000f30:	f001 f9fe 	bl	8002330 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000f34:	2028      	movs	r0, #40	; 0x28
 8000f36:	f001 fa17 	bl	8002368 <HAL_NVIC_EnableIRQ>

}
 8000f3a:	bf00      	nop
 8000f3c:	3728      	adds	r7, #40	; 0x28
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop

08000f44 <_write>:

/* USER CODE BEGIN 4 */

int _write(int file, char *ptr, int len)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b086      	sub	sp, #24
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	60f8      	str	r0, [r7, #12]
 8000f4c:	60b9      	str	r1, [r7, #8]
 8000f4e:	607a      	str	r2, [r7, #4]
	int DataIdx;
	for(DataIdx=0; DataIdx<len; DataIdx++)
 8000f50:	2300      	movs	r3, #0
 8000f52:	617b      	str	r3, [r7, #20]
 8000f54:	e009      	b.n	8000f6a <_write+0x26>
	{
		ITM_SendChar(*ptr++);
 8000f56:	68bb      	ldr	r3, [r7, #8]
 8000f58:	1c5a      	adds	r2, r3, #1
 8000f5a:	60ba      	str	r2, [r7, #8]
 8000f5c:	781b      	ldrb	r3, [r3, #0]
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f7ff fb10 	bl	8000584 <ITM_SendChar>
	for(DataIdx=0; DataIdx<len; DataIdx++)
 8000f64:	697b      	ldr	r3, [r7, #20]
 8000f66:	3301      	adds	r3, #1
 8000f68:	617b      	str	r3, [r7, #20]
 8000f6a:	697a      	ldr	r2, [r7, #20]
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	429a      	cmp	r2, r3
 8000f70:	dbf1      	blt.n	8000f56 <_write+0x12>
	}
	return len;
 8000f72:	687b      	ldr	r3, [r7, #4]
}
 8000f74:	4618      	mov	r0, r3
 8000f76:	3718      	adds	r7, #24
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}

08000f7c <BSP_ACCELERO_Init_INT>:

ACCELERO_StatusTypeDef BSP_ACCELERO_Init_INT(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b082      	sub	sp, #8
 8000f80:	af00      	add	r7, sp, #0
	ACCELERO_StatusTypeDef ret;
	ret = BSP_ACCELERO_Init();
 8000f82:	f007 f893 	bl	80080ac <BSP_ACCELERO_Init>
 8000f86:	4603      	mov	r3, r0
 8000f88:	71fb      	strb	r3, [r7, #7]
	if (ret == ACCELERO_OK)
 8000f8a:	79fb      	ldrb	r3, [r7, #7]
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d12f      	bne.n	8000ff0 <BSP_ACCELERO_Init_INT+0x74>
	{
		/* Initialize interruption*/
		uint8_t tmp;
		tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_DRDY_PULSE_CFG_G);
 8000f90:	210b      	movs	r1, #11
 8000f92:	20d4      	movs	r0, #212	; 0xd4
 8000f94:	f007 f84e 	bl	8008034 <SENSOR_IO_Read>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	71bb      	strb	r3, [r7, #6]
		tmp |=0b10000000;
 8000f9c:	79bb      	ldrb	r3, [r7, #6]
 8000f9e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000fa2:	71bb      	strb	r3, [r7, #6]
		SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_DRDY_PULSE_CFG_G, tmp);
 8000fa4:	79bb      	ldrb	r3, [r7, #6]
 8000fa6:	461a      	mov	r2, r3
 8000fa8:	210b      	movs	r1, #11
 8000faa:	20d4      	movs	r0, #212	; 0xd4
 8000fac:	f007 f828 	bl	8008000 <SENSOR_IO_Write>
		tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_INT1_CTRL);
 8000fb0:	210d      	movs	r1, #13
 8000fb2:	20d4      	movs	r0, #212	; 0xd4
 8000fb4:	f007 f83e 	bl	8008034 <SENSOR_IO_Read>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	71bb      	strb	r3, [r7, #6]
		tmp |=0b00000001;
 8000fbc:	79bb      	ldrb	r3, [r7, #6]
 8000fbe:	f043 0301 	orr.w	r3, r3, #1
 8000fc2:	71bb      	strb	r3, [r7, #6]
		SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_INT1_CTRL, tmp);
 8000fc4:	79bb      	ldrb	r3, [r7, #6]
 8000fc6:	461a      	mov	r2, r3
 8000fc8:	210d      	movs	r1, #13
 8000fca:	20d4      	movs	r0, #212	; 0xd4
 8000fcc:	f007 f818 	bl	8008000 <SENSOR_IO_Write>
		tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_MASTER_CONFIG);
 8000fd0:	211a      	movs	r1, #26
 8000fd2:	20d4      	movs	r0, #212	; 0xd4
 8000fd4:	f007 f82e 	bl	8008034 <SENSOR_IO_Read>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	71bb      	strb	r3, [r7, #6]
		tmp |=0b10000000;
 8000fdc:	79bb      	ldrb	r3, [r7, #6]
 8000fde:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000fe2:	71bb      	strb	r3, [r7, #6]
		SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_MASTER_CONFIG, tmp);
 8000fe4:	79bb      	ldrb	r3, [r7, #6]
 8000fe6:	461a      	mov	r2, r3
 8000fe8:	211a      	movs	r1, #26
 8000fea:	20d4      	movs	r0, #212	; 0xd4
 8000fec:	f007 f808 	bl	8008000 <SENSOR_IO_Write>
	}
	return ret;
 8000ff0:	79fb      	ldrb	r3, [r7, #7]
}
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	3708      	adds	r7, #8
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}
	...

08000ffc <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b082      	sub	sp, #8
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]

	static osStatus_t estado;
	if (huart == &huart1)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	4a0c      	ldr	r2, [pc, #48]	; (8001038 <HAL_UART_RxCpltCallback+0x3c>)
 8001008:	4293      	cmp	r3, r2
 800100a:	d110      	bne.n	800102e <HAL_UART_RxCpltCallback+0x32>
	{
		HAL_UART_Receive_IT(&huart1,&rec_data,1);
 800100c:	2201      	movs	r2, #1
 800100e:	490b      	ldr	r1, [pc, #44]	; (800103c <HAL_UART_RxCpltCallback+0x40>)
 8001010:	4809      	ldr	r0, [pc, #36]	; (8001038 <HAL_UART_RxCpltCallback+0x3c>)
 8001012:	f005 f9af 	bl	8006374 <HAL_UART_Receive_IT>
		printf("Recibido: %d\r\n",rec_data);
 8001016:	4b09      	ldr	r3, [pc, #36]	; (800103c <HAL_UART_RxCpltCallback+0x40>)
 8001018:	781b      	ldrb	r3, [r3, #0]
 800101a:	4619      	mov	r1, r3
 800101c:	4808      	ldr	r0, [pc, #32]	; (8001040 <HAL_UART_RxCpltCallback+0x44>)
 800101e:	f00a ffa3 	bl	800bf68 <iprintf>
		osThreadFlagsSet(tarea_UARTHandle,0x0002U);
 8001022:	4b08      	ldr	r3, [pc, #32]	; (8001044 <HAL_UART_RxCpltCallback+0x48>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	2102      	movs	r1, #2
 8001028:	4618      	mov	r0, r3
 800102a:	f007 fafb 	bl	8008624 <osThreadFlagsSet>
			printf("Estado: ok\r\n");
		else
			printf("Algo no va bien\r\n");
			*/
	}
}
 800102e:	bf00      	nop
 8001030:	3708      	adds	r7, #8
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	20000264 	.word	0x20000264
 800103c:	200007b4 	.word	0x200007b4
 8001040:	0800d1f0 	.word	0x0800d1f0
 8001044:	20000780 	.word	0x20000780

08001048 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0
 800104e:	4603      	mov	r3, r0
 8001050:	80fb      	strh	r3, [r7, #6]
	switch (GPIO_Pin)
 8001052:	88fb      	ldrh	r3, [r7, #6]
 8001054:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001058:	d003      	beq.n	8001062 <HAL_GPIO_EXTI_Callback+0x1a>
 800105a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800105e:	d007      	beq.n	8001070 <HAL_GPIO_EXTI_Callback+0x28>
			osThreadFlagsSet(readAccelHandle,0x0002U);
			break;
		}
		default:
		{
		  break;
 8001060:	e010      	b.n	8001084 <HAL_GPIO_EXTI_Callback+0x3c>
			osThreadFlagsSet(readAccelHandle,0x0001U);
 8001062:	4b0a      	ldr	r3, [pc, #40]	; (800108c <HAL_GPIO_EXTI_Callback+0x44>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	2101      	movs	r1, #1
 8001068:	4618      	mov	r0, r3
 800106a:	f007 fadb 	bl	8008624 <osThreadFlagsSet>
			break;
 800106e:	e009      	b.n	8001084 <HAL_GPIO_EXTI_Callback+0x3c>
			printf("Ha pulsado el boton\r\n");
 8001070:	4807      	ldr	r0, [pc, #28]	; (8001090 <HAL_GPIO_EXTI_Callback+0x48>)
 8001072:	f00a ffff 	bl	800c074 <puts>
			osThreadFlagsSet(readAccelHandle,0x0002U);
 8001076:	4b05      	ldr	r3, [pc, #20]	; (800108c <HAL_GPIO_EXTI_Callback+0x44>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	2102      	movs	r1, #2
 800107c:	4618      	mov	r0, r3
 800107e:	f007 fad1 	bl	8008624 <osThreadFlagsSet>
			break;
 8001082:	bf00      	nop
		}
	}
}
 8001084:	bf00      	nop
 8001086:	3708      	adds	r7, #8
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}
 800108c:	20000778 	.word	0x20000778
 8001090:	0800d200 	.word	0x0800d200

08001094 <RTC_set_func>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_RTC_set_func */
void RTC_set_func(void *argument)
{
 8001094:	b5b0      	push	{r4, r5, r7, lr}
 8001096:	b09e      	sub	sp, #120	; 0x78
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	uint8_t recibido[3];
	//uint32_t flag_rec;
	osStatus_t estado;
	uint32_t return_wait = 0U;
 800109c:	2300      	movs	r3, #0
 800109e:	66bb      	str	r3, [r7, #104]	; 0x68

	uint16_t num_usuario;
	uint8_t to_change[6];
	const char* msg_hora_ok = "\r\nHora cambiada correctamente\r\n";
 80010a0:	4bae      	ldr	r3, [pc, #696]	; (800135c <RTC_set_func+0x2c8>)
 80010a2:	657b      	str	r3, [r7, #84]	; 0x54
	const char* msg_fecha_ok = "Fecha cambiada correctamente\r\n";
 80010a4:	4bae      	ldr	r3, [pc, #696]	; (8001360 <RTC_set_func+0x2cc>)
 80010a6:	653b      	str	r3, [r7, #80]	; 0x50
	const char* msg_error = "\r\nERROR: Valor no válido\r\n";
 80010a8:	4bae      	ldr	r3, [pc, #696]	; (8001364 <RTC_set_func+0x2d0>)
 80010aa:	64fb      	str	r3, [r7, #76]	; 0x4c
	const char* msg_rtc1 = "\r\n\r\n========================\r\n"
 80010ac:	4bae      	ldr	r3, [pc, #696]	; (8001368 <RTC_set_func+0x2d4>)
 80010ae:	64bb      	str	r3, [r7, #72]	; 0x48
	"| Configurar rtc |\r\n"
	"========================\r\n\r\n";
	const char* msg[6] = {
 80010b0:	4bae      	ldr	r3, [pc, #696]	; (800136c <RTC_set_func+0x2d8>)
 80010b2:	f107 0430 	add.w	r4, r7, #48	; 0x30
 80010b6:	461d      	mov	r5, r3
 80010b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010bc:	e895 0003 	ldmia.w	r5, {r0, r1}
 80010c0:	e884 0003 	stmia.w	r4, {r0, r1}
	"Hora (0-23): ", "\r\nMinuto (0-59): ","\r\nSegundo (0-59): ","\r\nDía (1-31): ","\r\nMes (1-12): ",
	"\r\nAño (0-99): "};
	uint8_t limit[6][2] = {{0,23},{0,59},{0,59},{1,31},{1,12},{0,99}};
 80010c4:	4aaa      	ldr	r2, [pc, #680]	; (8001370 <RTC_set_func+0x2dc>)
 80010c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010ca:	ca07      	ldmia	r2, {r0, r1, r2}
 80010cc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	//uint8_t *toChange[6] = {&GetTime.Hours, &GetTime.Minutes, &GetTime.Seconds, &GetDate.Date,&GetDate.Month, &GetDate.Year};

	printf("Empieza el bucle\r\n");
 80010d0:	48a8      	ldr	r0, [pc, #672]	; (8001374 <RTC_set_func+0x2e0>)
 80010d2:	f00a ffcf 	bl	800c074 <puts>
	estado = osMessageQueuePut(print_queueHandle, &msg_rtc1, 0, pdMS_TO_TICKS(500));
 80010d6:	4ba8      	ldr	r3, [pc, #672]	; (8001378 <RTC_set_func+0x2e4>)
 80010d8:	6818      	ldr	r0, [r3, #0]
 80010da:	f107 0148 	add.w	r1, r7, #72	; 0x48
 80010de:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80010e2:	2200      	movs	r2, #0
 80010e4:	f007 fbfc 	bl	80088e0 <osMessageQueuePut>
 80010e8:	6678      	str	r0, [r7, #100]	; 0x64
	int i,j = 0;
 80010ea:	2300      	movs	r3, #0
 80010ec:	66fb      	str	r3, [r7, #108]	; 0x6c
	for (i=0;i<6;){
 80010ee:	2300      	movs	r3, #0
 80010f0:	673b      	str	r3, [r7, #112]	; 0x70
 80010f2:	e0d8      	b.n	80012a6 <RTC_set_func+0x212>
		estado = osMessageQueuePut(print_queueHandle, &msg[i], 0, pdMS_TO_TICKS(500));
 80010f4:	4ba0      	ldr	r3, [pc, #640]	; (8001378 <RTC_set_func+0x2e4>)
 80010f6:	6818      	ldr	r0, [r3, #0]
 80010f8:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80010fc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80010fe:	009b      	lsls	r3, r3, #2
 8001100:	18d1      	adds	r1, r2, r3
 8001102:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001106:	2200      	movs	r2, #0
 8001108:	f007 fbea 	bl	80088e0 <osMessageQueuePut>
 800110c:	6678      	str	r0, [r7, #100]	; 0x64
		printf("Esperando a que ser reciba el dato\r\n");
 800110e:	489b      	ldr	r0, [pc, #620]	; (800137c <RTC_set_func+0x2e8>)
 8001110:	f00a ffb0 	bl	800c074 <puts>

		for (j=0;j<3;j++){
 8001114:	2300      	movs	r3, #0
 8001116:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001118:	e022      	b.n	8001160 <RTC_set_func+0xcc>
			estado = osMessageQueueGet(receive_queueHandle, &recibido[j], NULL, osWaitForever);
 800111a:	4b99      	ldr	r3, [pc, #612]	; (8001380 <RTC_set_func+0x2ec>)
 800111c:	6818      	ldr	r0, [r3, #0]
 800111e:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001122:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001124:	18d1      	adds	r1, r2, r3
 8001126:	f04f 33ff 	mov.w	r3, #4294967295
 800112a:	2200      	movs	r2, #0
 800112c:	f007 fc38 	bl	80089a0 <osMessageQueueGet>
 8001130:	6678      	str	r0, [r7, #100]	; 0x64
			printf("De la cola: %c\r\n",recibido[j]);
 8001132:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001136:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001138:	4413      	add	r3, r2
 800113a:	781b      	ldrb	r3, [r3, #0]
 800113c:	4619      	mov	r1, r3
 800113e:	4891      	ldr	r0, [pc, #580]	; (8001384 <RTC_set_func+0x2f0>)
 8001140:	f00a ff12 	bl	800bf68 <iprintf>
			if(recibido[j]==13){
 8001144:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001148:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800114a:	4413      	add	r3, r2
 800114c:	781b      	ldrb	r3, [r3, #0]
 800114e:	2b0d      	cmp	r3, #13
 8001150:	d103      	bne.n	800115a <RTC_set_func+0xc6>
				printf("Ha pulsado intro\r\n");
 8001152:	488d      	ldr	r0, [pc, #564]	; (8001388 <RTC_set_func+0x2f4>)
 8001154:	f00a ff8e 	bl	800c074 <puts>
				break;
 8001158:	e005      	b.n	8001166 <RTC_set_func+0xd2>
		for (j=0;j<3;j++){
 800115a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800115c:	3301      	adds	r3, #1
 800115e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001160:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001162:	2b02      	cmp	r3, #2
 8001164:	ddd9      	ble.n	800111a <RTC_set_func+0x86>
			}
		}
		printf("%d\r\n",j);
 8001166:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8001168:	4888      	ldr	r0, [pc, #544]	; (800138c <RTC_set_func+0x2f8>)
 800116a:	f00a fefd 	bl	800bf68 <iprintf>
		switch(j){
 800116e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001170:	2b03      	cmp	r3, #3
 8001172:	d84a      	bhi.n	800120a <RTC_set_func+0x176>
 8001174:	a201      	add	r2, pc, #4	; (adr r2, 800117c <RTC_set_func+0xe8>)
 8001176:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800117a:	bf00      	nop
 800117c:	0800118d 	.word	0x0800118d
 8001180:	08001195 	.word	0x08001195
 8001184:	080011a3 	.word	0x080011a3
 8001188:	080011c7 	.word	0x080011c7
		case 0:
			num_usuario=0;
 800118c:	2300      	movs	r3, #0
 800118e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
			break;
 8001192:	e03a      	b.n	800120a <RTC_set_func+0x176>
		case 1:
			num_usuario = recibido[0]-48;
 8001194:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 8001198:	b29b      	uxth	r3, r3
 800119a:	3b30      	subs	r3, #48	; 0x30
 800119c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
			//i++;
			break;
 80011a0:	e033      	b.n	800120a <RTC_set_func+0x176>
		case 2:
			num_usuario = 10*(recibido[0]-48)+recibido[1]-48;
 80011a2:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 80011a6:	3b30      	subs	r3, #48	; 0x30
 80011a8:	b29b      	uxth	r3, r3
 80011aa:	461a      	mov	r2, r3
 80011ac:	0092      	lsls	r2, r2, #2
 80011ae:	4413      	add	r3, r2
 80011b0:	005b      	lsls	r3, r3, #1
 80011b2:	b29a      	uxth	r2, r3
 80011b4:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
 80011b8:	b29b      	uxth	r3, r3
 80011ba:	4413      	add	r3, r2
 80011bc:	b29b      	uxth	r3, r3
 80011be:	3b30      	subs	r3, #48	; 0x30
 80011c0:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
			//i++;
			break;
 80011c4:	e021      	b.n	800120a <RTC_set_func+0x176>
		case 3:
			num_usuario = 100*(recibido[0]-48)+10*(recibido[1]-48)+recibido[2]-48;
 80011c6:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 80011ca:	3b30      	subs	r3, #48	; 0x30
 80011cc:	b29b      	uxth	r3, r3
 80011ce:	461a      	mov	r2, r3
 80011d0:	0092      	lsls	r2, r2, #2
 80011d2:	4413      	add	r3, r2
 80011d4:	461a      	mov	r2, r3
 80011d6:	0091      	lsls	r1, r2, #2
 80011d8:	461a      	mov	r2, r3
 80011da:	460b      	mov	r3, r1
 80011dc:	4413      	add	r3, r2
 80011de:	009b      	lsls	r3, r3, #2
 80011e0:	b29a      	uxth	r2, r3
 80011e2:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
 80011e6:	3b30      	subs	r3, #48	; 0x30
 80011e8:	b29b      	uxth	r3, r3
 80011ea:	4619      	mov	r1, r3
 80011ec:	0089      	lsls	r1, r1, #2
 80011ee:	440b      	add	r3, r1
 80011f0:	005b      	lsls	r3, r3, #1
 80011f2:	b29b      	uxth	r3, r3
 80011f4:	4413      	add	r3, r2
 80011f6:	b29a      	uxth	r2, r3
 80011f8:	f897 3062 	ldrb.w	r3, [r7, #98]	; 0x62
 80011fc:	b29b      	uxth	r3, r3
 80011fe:	4413      	add	r3, r2
 8001200:	b29b      	uxth	r3, r3
 8001202:	3b30      	subs	r3, #48	; 0x30
 8001204:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
			break;
 8001208:	bf00      	nop
		}
		printf("Numero: %d\r\n",num_usuario);
 800120a:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 800120e:	4619      	mov	r1, r3
 8001210:	485f      	ldr	r0, [pc, #380]	; (8001390 <RTC_set_func+0x2fc>)
 8001212:	f00a fea9 	bl	800bf68 <iprintf>
		printf("Rango: %d-%d\r\n",limit[i][0],limit[i][1]);
 8001216:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001218:	005b      	lsls	r3, r3, #1
 800121a:	3378      	adds	r3, #120	; 0x78
 800121c:	443b      	add	r3, r7
 800121e:	f813 3c54 	ldrb.w	r3, [r3, #-84]
 8001222:	4619      	mov	r1, r3
 8001224:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001226:	005b      	lsls	r3, r3, #1
 8001228:	3378      	adds	r3, #120	; 0x78
 800122a:	443b      	add	r3, r7
 800122c:	f813 3c53 	ldrb.w	r3, [r3, #-83]
 8001230:	461a      	mov	r2, r3
 8001232:	4858      	ldr	r0, [pc, #352]	; (8001394 <RTC_set_func+0x300>)
 8001234:	f00a fe98 	bl	800bf68 <iprintf>
		if (num_usuario<limit[i][0] || num_usuario>limit[i][1]){
 8001238:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800123a:	005b      	lsls	r3, r3, #1
 800123c:	3378      	adds	r3, #120	; 0x78
 800123e:	443b      	add	r3, r7
 8001240:	f813 3c54 	ldrb.w	r3, [r3, #-84]
 8001244:	b29b      	uxth	r3, r3
 8001246:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800124a:	429a      	cmp	r2, r3
 800124c:	d30a      	bcc.n	8001264 <RTC_set_func+0x1d0>
 800124e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001250:	005b      	lsls	r3, r3, #1
 8001252:	3378      	adds	r3, #120	; 0x78
 8001254:	443b      	add	r3, r7
 8001256:	f813 3c53 	ldrb.w	r3, [r3, #-83]
 800125a:	b29b      	uxth	r3, r3
 800125c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8001260:	429a      	cmp	r2, r3
 8001262:	d914      	bls.n	800128e <RTC_set_func+0x1fa>
			estado = osMessageQueuePut(print_queueHandle, &msg_error, 0, pdMS_TO_TICKS(500));
 8001264:	4b44      	ldr	r3, [pc, #272]	; (8001378 <RTC_set_func+0x2e4>)
 8001266:	6818      	ldr	r0, [r3, #0]
 8001268:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 800126c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001270:	2200      	movs	r2, #0
 8001272:	f007 fb35 	bl	80088e0 <osMessageQueuePut>
 8001276:	6678      	str	r0, [r7, #100]	; 0x64
			if (estado == osOK)
 8001278:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800127a:	2b00      	cmp	r3, #0
 800127c:	d103      	bne.n	8001286 <RTC_set_func+0x1f2>
				printf("Enviado valor erroneo\r\n");
 800127e:	4846      	ldr	r0, [pc, #280]	; (8001398 <RTC_set_func+0x304>)
 8001280:	f00a fef8 	bl	800c074 <puts>
 8001284:	e00f      	b.n	80012a6 <RTC_set_func+0x212>
			else
				printf("Algo no va bien\r\n");
 8001286:	4845      	ldr	r0, [pc, #276]	; (800139c <RTC_set_func+0x308>)
 8001288:	f00a fef4 	bl	800c074 <puts>
			if (estado == osOK)
 800128c:	e00b      	b.n	80012a6 <RTC_set_func+0x212>
		}else{
			to_change[i]=num_usuario;
 800128e:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8001292:	b2d9      	uxtb	r1, r3
 8001294:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8001298:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800129a:	4413      	add	r3, r2
 800129c:	460a      	mov	r2, r1
 800129e:	701a      	strb	r2, [r3, #0]
			i++;
 80012a0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80012a2:	3301      	adds	r3, #1
 80012a4:	673b      	str	r3, [r7, #112]	; 0x70
	for (i=0;i<6;){
 80012a6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80012a8:	2b05      	cmp	r3, #5
 80012aa:	f77f af23 	ble.w	80010f4 <RTC_set_func+0x60>
		}

	}

	RTC_TimeTypeDef sTime = {0};
 80012ae:	f107 0310 	add.w	r3, r7, #16
 80012b2:	2200      	movs	r2, #0
 80012b4:	601a      	str	r2, [r3, #0]
 80012b6:	605a      	str	r2, [r3, #4]
 80012b8:	609a      	str	r2, [r3, #8]
 80012ba:	60da      	str	r2, [r3, #12]
 80012bc:	611a      	str	r2, [r3, #16]
	RTC_DateTypeDef sDate = {0};
 80012be:	2300      	movs	r3, #0
 80012c0:	60fb      	str	r3, [r7, #12]

	sTime.Hours = to_change[0];
 80012c2:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 80012c6:	743b      	strb	r3, [r7, #16]
	sTime.Minutes = to_change[1];
 80012c8:	f897 3059 	ldrb.w	r3, [r7, #89]	; 0x59
 80012cc:	747b      	strb	r3, [r7, #17]
	sTime.Seconds = to_change[2];
 80012ce:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 80012d2:	74bb      	strb	r3, [r7, #18]

	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 80012d4:	f107 0310 	add.w	r3, r7, #16
 80012d8:	2200      	movs	r2, #0
 80012da:	4619      	mov	r1, r3
 80012dc:	4830      	ldr	r0, [pc, #192]	; (80013a0 <RTC_set_func+0x30c>)
 80012de:	f004 f8d6 	bl	800548e <HAL_RTC_SetTime>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d001      	beq.n	80012ec <RTC_set_func+0x258>
	  {
	    Error_Handler();
 80012e8:	f000 fa30 	bl	800174c <Error_Handler>
	  }

	osMessageQueuePut(print_queueHandle, &msg_hora_ok, 0, pdMS_TO_TICKS(500));
 80012ec:	4b22      	ldr	r3, [pc, #136]	; (8001378 <RTC_set_func+0x2e4>)
 80012ee:	6818      	ldr	r0, [r3, #0]
 80012f0:	f107 0154 	add.w	r1, r7, #84	; 0x54
 80012f4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80012f8:	2200      	movs	r2, #0
 80012fa:	f007 faf1 	bl	80088e0 <osMessageQueuePut>

	sDate.Date = to_change[3];
 80012fe:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8001302:	73bb      	strb	r3, [r7, #14]
	sDate.Month = to_change[4];
 8001304:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8001308:	737b      	strb	r3, [r7, #13]
	sDate.Year = to_change[5];
 800130a:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 800130e:	73fb      	strb	r3, [r7, #15]
	printf("Anio: %d\r\n",to_change[5]);
 8001310:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 8001314:	4619      	mov	r1, r3
 8001316:	4823      	ldr	r0, [pc, #140]	; (80013a4 <RTC_set_func+0x310>)
 8001318:	f00a fe26 	bl	800bf68 <iprintf>
	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 800131c:	f107 030c 	add.w	r3, r7, #12
 8001320:	2200      	movs	r2, #0
 8001322:	4619      	mov	r1, r3
 8001324:	481e      	ldr	r0, [pc, #120]	; (80013a0 <RTC_set_func+0x30c>)
 8001326:	f004 f9ab 	bl	8005680 <HAL_RTC_SetDate>
 800132a:	4603      	mov	r3, r0
 800132c:	2b00      	cmp	r3, #0
 800132e:	d001      	beq.n	8001334 <RTC_set_func+0x2a0>
	{
		Error_Handler();
 8001330:	f000 fa0c 	bl	800174c <Error_Handler>
	}

	osMessageQueuePut(print_queueHandle, &msg_fecha_ok, 0, pdMS_TO_TICKS(500));
 8001334:	4b10      	ldr	r3, [pc, #64]	; (8001378 <RTC_set_func+0x2e4>)
 8001336:	6818      	ldr	r0, [r3, #0]
 8001338:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800133c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001340:	2200      	movs	r2, #0
 8001342:	f007 facd 	bl	80088e0 <osMessageQueuePut>

	osThreadFlagsSet(readAccelHandle,0x0002U);
 8001346:	4b18      	ldr	r3, [pc, #96]	; (80013a8 <RTC_set_func+0x314>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	2102      	movs	r1, #2
 800134c:	4618      	mov	r0, r3
 800134e:	f007 f969 	bl	8008624 <osThreadFlagsSet>

  /* Infinite loop */
  for(;;)
  {

	  osDelay(pdMS_TO_TICKS(1000));
 8001352:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001356:	f007 fa34 	bl	80087c2 <osDelay>
 800135a:	e7fa      	b.n	8001352 <RTC_set_func+0x2be>
 800135c:	0800d218 	.word	0x0800d218
 8001360:	0800d238 	.word	0x0800d238
 8001364:	0800d258 	.word	0x0800d258
 8001368:	0800d274 	.word	0x0800d274
 800136c:	0800d384 	.word	0x0800d384
 8001370:	0800d39c 	.word	0x0800d39c
 8001374:	0800d2c4 	.word	0x0800d2c4
 8001378:	2000078c 	.word	0x2000078c
 800137c:	0800d2d8 	.word	0x0800d2d8
 8001380:	20000790 	.word	0x20000790
 8001384:	0800d2fc 	.word	0x0800d2fc
 8001388:	0800d310 	.word	0x0800d310
 800138c:	0800d324 	.word	0x0800d324
 8001390:	0800d32c 	.word	0x0800d32c
 8001394:	0800d33c 	.word	0x0800d33c
 8001398:	0800d34c 	.word	0x0800d34c
 800139c:	0800d364 	.word	0x0800d364
 80013a0:	20000190 	.word	0x20000190
 80013a4:	0800d378 	.word	0x0800d378
 80013a8:	20000778 	.word	0x20000778

080013ac <readAccel_func>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_readAccel_func */
void readAccel_func(void *argument)
{
 80013ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013ae:	b0b1      	sub	sp, #196	; 0xc4
 80013b0:	af08      	add	r7, sp, #32
 80013b2:	60f8      	str	r0, [r7, #12]
  /* USER CODE BEGIN readAccel_func */
	osStatus_t estado;
  //char mensaje[]  = "Hola mundo\r\n";
	char mensaje[100];
	char *p_mensaje = mensaje;
 80013b4:	f107 0320 	add.w	r3, r7, #32
 80013b8:	61fb      	str	r3, [r7, #28]

	//uint32_t nticks = 0;
	int16_t DataXYZ[3];
	int16_t *pDataXYZ = DataXYZ;
 80013ba:	f107 0314 	add.w	r3, r7, #20
 80013be:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98


	uint8_t horas,minutos,segundos,dia,mes,anio = 0;
 80013c2:	2300      	movs	r3, #0
 80013c4:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
	uint32_t return_wait = 0U;
 80013c8:	2300      	movs	r3, #0
 80013ca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

	uint16_t iter; // Se usa para iterar en 64 o 1024 aceleraciones
	uint16_t max_iter;

	printf("ReadAccel task esperando\r\n");
 80013ce:	485f      	ldr	r0, [pc, #380]	; (800154c <readAccel_func+0x1a0>)
 80013d0:	f00a fe50 	bl	800c074 <puts>
	// Esperamos que el usuario configure el RTC y que el acelerometro este activo
	return_wait = osThreadFlagsWait(0x0003U, osFlagsWaitAll, osWaitForever);
 80013d4:	f04f 32ff 	mov.w	r2, #4294967295
 80013d8:	2101      	movs	r1, #1
 80013da:	2003      	movs	r0, #3
 80013dc:	f007 f970 	bl	80086c0 <osThreadFlagsWait>
 80013e0:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90

	//Activamos el temporizador
	osThreadFlagsSet(temporizadorHandle,0x0001U);
 80013e4:	4b5a      	ldr	r3, [pc, #360]	; (8001550 <readAccel_func+0x1a4>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	2101      	movs	r1, #1
 80013ea:	4618      	mov	r0, r3
 80013ec:	f007 f91a 	bl	8008624 <osThreadFlagsSet>

	//Terminamos la tarea de configuracion del RTC
	osThreadTerminate(RTC_setHandle);
 80013f0:	4b58      	ldr	r3, [pc, #352]	; (8001554 <readAccel_func+0x1a8>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	4618      	mov	r0, r3
 80013f6:	f007 f8e7 	bl	80085c8 <osThreadTerminate>
	osThreadTerminate(printTaskHandle);
 80013fa:	4b57      	ldr	r3, [pc, #348]	; (8001558 <readAccel_func+0x1ac>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	4618      	mov	r0, r3
 8001400:	f007 f8e2 	bl	80085c8 <osThreadTerminate>
	osMessageQueueReset(print_queueHandle);
 8001404:	4b55      	ldr	r3, [pc, #340]	; (800155c <readAccel_func+0x1b0>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	4618      	mov	r0, r3
 800140a:	f007 fb5c 	bl	8008ac6 <osMessageQueueReset>

	printf("ReadAccel task se inicia\r\n");
 800140e:	4854      	ldr	r0, [pc, #336]	; (8001560 <readAccel_func+0x1b4>)
 8001410:	f00a fe30 	bl	800c074 <puts>


	/* Infinite loop */
	for(;;)
	{
		if (modo_continuo){
 8001414:	4b53      	ldr	r3, [pc, #332]	; (8001564 <readAccel_func+0x1b8>)
 8001416:	781b      	ldrb	r3, [r3, #0]
 8001418:	2b00      	cmp	r3, #0
 800141a:	d00a      	beq.n	8001432 <readAccel_func+0x86>
			max_iter = MUESTRAS_CONTINUO;
 800141c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001420:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
			osThreadFlagsSet(sendMQTTHandle,MODO_CONTINUO);
 8001424:	4b50      	ldr	r3, [pc, #320]	; (8001568 <readAccel_func+0x1bc>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	2102      	movs	r1, #2
 800142a:	4618      	mov	r0, r3
 800142c:	f007 f8fa 	bl	8008624 <osThreadFlagsSet>
 8001430:	e008      	b.n	8001444 <readAccel_func+0x98>
		}else{
			max_iter = MUESTRAS_NORMAL;
 8001432:	2340      	movs	r3, #64	; 0x40
 8001434:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
			osThreadFlagsSet(sendMQTTHandle,MODO_NORMAL);
 8001438:	4b4b      	ldr	r3, [pc, #300]	; (8001568 <readAccel_func+0x1bc>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	2101      	movs	r1, #1
 800143e:	4618      	mov	r0, r3
 8001440:	f007 f8f0 	bl	8008624 <osThreadFlagsSet>
		}

		for (iter=0 ; iter<max_iter ; iter++){
 8001444:	2300      	movs	r3, #0
 8001446:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
 800144a:	e060      	b.n	800150e <readAccel_func+0x162>
			BSP_ACCELERO_AccGetXYZ(pDataXYZ);
 800144c:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 8001450:	f006 fe6a 	bl	8008128 <BSP_ACCELERO_AccGetXYZ>
			//printf("Tick: %ld	Eje x: %d	Eje y: %d	Eje z: %d\r\n",nticks,DataXYZ[0],DataXYZ[1],DataXYZ[2]);

			//printf("Lectura accel realizada\r\n");
			HAL_RTC_GetTime(&hrtc, &GetTime, RTC_FORMAT_BIN);
 8001454:	2200      	movs	r2, #0
 8001456:	4945      	ldr	r1, [pc, #276]	; (800156c <readAccel_func+0x1c0>)
 8001458:	4845      	ldr	r0, [pc, #276]	; (8001570 <readAccel_func+0x1c4>)
 800145a:	f004 f8b5 	bl	80055c8 <HAL_RTC_GetTime>
			horas = GetTime.Hours;
 800145e:	4b43      	ldr	r3, [pc, #268]	; (800156c <readAccel_func+0x1c0>)
 8001460:	781b      	ldrb	r3, [r3, #0]
 8001462:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
			minutos = GetTime.Minutes;
 8001466:	4b41      	ldr	r3, [pc, #260]	; (800156c <readAccel_func+0x1c0>)
 8001468:	785b      	ldrb	r3, [r3, #1]
 800146a:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
			segundos = GetTime.Seconds;
 800146e:	4b3f      	ldr	r3, [pc, #252]	; (800156c <readAccel_func+0x1c0>)
 8001470:	789b      	ldrb	r3, [r3, #2]
 8001472:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d

			HAL_RTC_GetDate(&hrtc, &GetDate, RTC_FORMAT_BIN);
 8001476:	2200      	movs	r2, #0
 8001478:	493e      	ldr	r1, [pc, #248]	; (8001574 <readAccel_func+0x1c8>)
 800147a:	483d      	ldr	r0, [pc, #244]	; (8001570 <readAccel_func+0x1c4>)
 800147c:	f004 f987 	bl	800578e <HAL_RTC_GetDate>
			anio = GetDate.Year;
 8001480:	4b3c      	ldr	r3, [pc, #240]	; (8001574 <readAccel_func+0x1c8>)
 8001482:	78db      	ldrb	r3, [r3, #3]
 8001484:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
			dia = GetDate.Date;
 8001488:	4b3a      	ldr	r3, [pc, #232]	; (8001574 <readAccel_func+0x1c8>)
 800148a:	789b      	ldrb	r3, [r3, #2]
 800148c:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
			mes = GetDate.Month;
 8001490:	4b38      	ldr	r3, [pc, #224]	; (8001574 <readAccel_func+0x1c8>)
 8001492:	785b      	ldrb	r3, [r3, #1]
 8001494:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b


			//printf("Anio: %d\r\n",anio);
			//printf("Lectura fecha realizada\r\n");
			//printf("fecha: %d/%d/%d hora: %d:%d:%d temp: %d.%02d grados\r\n",dia,mes,anio,horas,minutos,segundos,tmpInt1,tmpInt2);
			snprintf(mensaje,100,"fecha: %d/%d/%d hora: %d:%d:%d Eje x: %d	Eje y: %d	Eje z: %d\r\n",dia,mes,anio+2000,horas,minutos,segundos,DataXYZ[0],DataXYZ[1],DataXYZ[2]);
 8001498:	f897 608c 	ldrb.w	r6, [r7, #140]	; 0x8c
 800149c:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 80014a0:	60bb      	str	r3, [r7, #8]
 80014a2:	f897 2097 	ldrb.w	r2, [r7, #151]	; 0x97
 80014a6:	f502 62fa 	add.w	r2, r2, #2000	; 0x7d0
 80014aa:	f897 108f 	ldrb.w	r1, [r7, #143]	; 0x8f
 80014ae:	f897 008e 	ldrb.w	r0, [r7, #142]	; 0x8e
 80014b2:	f897 408d 	ldrb.w	r4, [r7, #141]	; 0x8d
 80014b6:	f9b7 5014 	ldrsh.w	r5, [r7, #20]
 80014ba:	607d      	str	r5, [r7, #4]
 80014bc:	f9b7 5016 	ldrsh.w	r5, [r7, #22]
 80014c0:	603d      	str	r5, [r7, #0]
 80014c2:	f9b7 5018 	ldrsh.w	r5, [r7, #24]
 80014c6:	462b      	mov	r3, r5
 80014c8:	f107 0520 	add.w	r5, r7, #32
 80014cc:	9307      	str	r3, [sp, #28]
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	9306      	str	r3, [sp, #24]
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	9305      	str	r3, [sp, #20]
 80014d6:	9404      	str	r4, [sp, #16]
 80014d8:	9003      	str	r0, [sp, #12]
 80014da:	9102      	str	r1, [sp, #8]
 80014dc:	9201      	str	r2, [sp, #4]
 80014de:	68bb      	ldr	r3, [r7, #8]
 80014e0:	9300      	str	r3, [sp, #0]
 80014e2:	4633      	mov	r3, r6
 80014e4:	4a24      	ldr	r2, [pc, #144]	; (8001578 <readAccel_func+0x1cc>)
 80014e6:	2164      	movs	r1, #100	; 0x64
 80014e8:	4628      	mov	r0, r5
 80014ea:	f00a fe45 	bl	800c178 <sniprintf>



			//printf("MENSAJE: %s\r\n",mensaje);
			estado = osMessageQueuePut(print_queueHandle, &p_mensaje, 0, pdMS_TO_TICKS(500));
 80014ee:	4b1b      	ldr	r3, [pc, #108]	; (800155c <readAccel_func+0x1b0>)
 80014f0:	6818      	ldr	r0, [r3, #0]
 80014f2:	f107 011c 	add.w	r1, r7, #28
 80014f6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80014fa:	2200      	movs	r2, #0
 80014fc:	f007 f9f0 	bl	80088e0 <osMessageQueuePut>
 8001500:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
		for (iter=0 ; iter<max_iter ; iter++){
 8001504:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8001508:	3301      	adds	r3, #1
 800150a:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
 800150e:	f8b7 209e 	ldrh.w	r2, [r7, #158]	; 0x9e
 8001512:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8001516:	429a      	cmp	r2, r3
 8001518:	d398      	bcc.n	800144c <readAccel_func+0xa0>
				printf("Timeout agotado 1\r\n");
			}*/

		}

		printf("Se han enviado todas las aceleraciones, esperamos media hora o hasta que alguien pulse el boton\r\n");
 800151a:	4818      	ldr	r0, [pc, #96]	; (800157c <readAccel_func+0x1d0>)
 800151c:	f00a fdaa 	bl	800c074 <puts>
		return_wait = osThreadFlagsWait(0x0006U, osFlagsWaitAny, osWaitForever); //espera media hora o que alguien pulse el boton
 8001520:	f04f 32ff 	mov.w	r2, #4294967295
 8001524:	2100      	movs	r1, #0
 8001526:	2006      	movs	r0, #6
 8001528:	f007 f8ca 	bl	80086c0 <osThreadFlagsWait>
 800152c:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
		if(return_wait == osFlagsErrorTimeout){
 8001530:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001534:	f113 0f02 	cmn.w	r3, #2
 8001538:	d103      	bne.n	8001542 <readAccel_func+0x196>
			printf("Ha pasado media hora\r\n");
 800153a:	4811      	ldr	r0, [pc, #68]	; (8001580 <readAccel_func+0x1d4>)
 800153c:	f00a fd9a 	bl	800c074 <puts>
 8001540:	e768      	b.n	8001414 <readAccel_func+0x68>
		}
		else {
			printf("El usuario quiere enviar aceleraciones\r\n");
 8001542:	4810      	ldr	r0, [pc, #64]	; (8001584 <readAccel_func+0x1d8>)
 8001544:	f00a fd96 	bl	800c074 <puts>
		if (modo_continuo){
 8001548:	e764      	b.n	8001414 <readAccel_func+0x68>
 800154a:	bf00      	nop
 800154c:	0800d3a8 	.word	0x0800d3a8
 8001550:	20000784 	.word	0x20000784
 8001554:	20000774 	.word	0x20000774
 8001558:	2000077c 	.word	0x2000077c
 800155c:	2000078c 	.word	0x2000078c
 8001560:	0800d3c4 	.word	0x0800d3c4
 8001564:	20000000 	.word	0x20000000
 8001568:	20000788 	.word	0x20000788
 800156c:	20000798 	.word	0x20000798
 8001570:	20000190 	.word	0x20000190
 8001574:	20000794 	.word	0x20000794
 8001578:	0800d3e0 	.word	0x0800d3e0
 800157c:	0800d420 	.word	0x0800d420
 8001580:	0800d484 	.word	0x0800d484
 8001584:	0800d49c 	.word	0x0800d49c

08001588 <printTask_func>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_printTask_func */
void printTask_func(void *argument)
{
 8001588:	b590      	push	{r4, r7, lr}
 800158a:	b085      	sub	sp, #20
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
	uintptr_t mensaje;
	osStatus_t estado;
  /* Infinite loop */
  for(;;)
  {
	  estado = osMessageQueueGet(print_queueHandle, &mensaje, NULL, osWaitForever);
 8001590:	4b13      	ldr	r3, [pc, #76]	; (80015e0 <printTask_func+0x58>)
 8001592:	6818      	ldr	r0, [r3, #0]
 8001594:	f107 0108 	add.w	r1, r7, #8
 8001598:	f04f 33ff 	mov.w	r3, #4294967295
 800159c:	2200      	movs	r2, #0
 800159e:	f007 f9ff 	bl	80089a0 <osMessageQueueGet>
 80015a2:	60f8      	str	r0, [r7, #12]
	  //printf("Se ha recibido algo en print task\r\n");
	  //printf("Mensaje print task: %s\r\n",mensaje);
	  //printf("Longitud: %d",strlen((char*)mensaje));
	  if (estado == osOK)
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d10d      	bne.n	80015c6 <printTask_func+0x3e>
	  {
		  //printf("%s",(char*)mensaje);
		  HAL_UART_Transmit(&huart1, (uint8_t*)mensaje, strlen(mensaje),10);
 80015aa:	68bb      	ldr	r3, [r7, #8]
 80015ac:	461c      	mov	r4, r3
 80015ae:	68bb      	ldr	r3, [r7, #8]
 80015b0:	4618      	mov	r0, r3
 80015b2:	f7fe fe0d 	bl	80001d0 <strlen>
 80015b6:	4603      	mov	r3, r0
 80015b8:	b29a      	uxth	r2, r3
 80015ba:	230a      	movs	r3, #10
 80015bc:	4621      	mov	r1, r4
 80015be:	4809      	ldr	r0, [pc, #36]	; (80015e4 <printTask_func+0x5c>)
 80015c0:	f004 fe44 	bl	800624c <HAL_UART_Transmit>
 80015c4:	e7e4      	b.n	8001590 <printTask_func+0x8>
	  }
	  else if (estado == osErrorTimeout)
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	f113 0f02 	cmn.w	r3, #2
 80015cc:	d103      	bne.n	80015d6 <printTask_func+0x4e>
	  {
		  printf("Timeout printTask\r\n");
 80015ce:	4806      	ldr	r0, [pc, #24]	; (80015e8 <printTask_func+0x60>)
 80015d0:	f00a fd50 	bl	800c074 <puts>
 80015d4:	e7dc      	b.n	8001590 <printTask_func+0x8>
	  }
	  else
	  {
		  printf("Error en la tarea print\r\n");
 80015d6:	4805      	ldr	r0, [pc, #20]	; (80015ec <printTask_func+0x64>)
 80015d8:	f00a fd4c 	bl	800c074 <puts>
	  estado = osMessageQueueGet(print_queueHandle, &mensaje, NULL, osWaitForever);
 80015dc:	e7d8      	b.n	8001590 <printTask_func+0x8>
 80015de:	bf00      	nop
 80015e0:	2000078c 	.word	0x2000078c
 80015e4:	20000264 	.word	0x20000264
 80015e8:	0800d4c4 	.word	0x0800d4c4
 80015ec:	0800d4d8 	.word	0x0800d4d8

080015f0 <tarea_UART_func>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_tarea_UART_func */
void tarea_UART_func(void *argument)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b084      	sub	sp, #16
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN tarea_UART_func */
	osStatus_t estado;
	uint32_t return_wait = 0U;
 80015f8:	2300      	movs	r3, #0
 80015fa:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
	  return_wait = osThreadFlagsWait(0x0002U, osFlagsWaitAny, osWaitForever);
 80015fc:	f04f 32ff 	mov.w	r2, #4294967295
 8001600:	2100      	movs	r1, #0
 8001602:	2002      	movs	r0, #2
 8001604:	f007 f85c 	bl	80086c0 <osThreadFlagsWait>
 8001608:	60f8      	str	r0, [r7, #12]
	  estado = osMessageQueuePut(receive_queueHandle, &rec_data,0,pdMS_TO_TICKS(200));
 800160a:	4b09      	ldr	r3, [pc, #36]	; (8001630 <tarea_UART_func+0x40>)
 800160c:	6818      	ldr	r0, [r3, #0]
 800160e:	23c8      	movs	r3, #200	; 0xc8
 8001610:	2200      	movs	r2, #0
 8001612:	4908      	ldr	r1, [pc, #32]	; (8001634 <tarea_UART_func+0x44>)
 8001614:	f007 f964 	bl	80088e0 <osMessageQueuePut>
 8001618:	60b8      	str	r0, [r7, #8]
	  if (estado == osOK)
 800161a:	68bb      	ldr	r3, [r7, #8]
 800161c:	2b00      	cmp	r3, #0
 800161e:	d103      	bne.n	8001628 <tarea_UART_func+0x38>
		  printf("Estado: ok\r\n");
 8001620:	4805      	ldr	r0, [pc, #20]	; (8001638 <tarea_UART_func+0x48>)
 8001622:	f00a fd27 	bl	800c074 <puts>
 8001626:	e7e9      	b.n	80015fc <tarea_UART_func+0xc>
	  else
		  printf("Algo no va bien\r\n");
 8001628:	4804      	ldr	r0, [pc, #16]	; (800163c <tarea_UART_func+0x4c>)
 800162a:	f00a fd23 	bl	800c074 <puts>
	  return_wait = osThreadFlagsWait(0x0002U, osFlagsWaitAny, osWaitForever);
 800162e:	e7e5      	b.n	80015fc <tarea_UART_func+0xc>
 8001630:	20000790 	.word	0x20000790
 8001634:	200007b4 	.word	0x200007b4
 8001638:	0800d4f4 	.word	0x0800d4f4
 800163c:	0800d364 	.word	0x0800d364

08001640 <temporizador_func>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_temporizador_func */
void temporizador_func(void *argument)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b082      	sub	sp, #8
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN temporizador_func */
	osThreadFlagsWait(0x0001U, osFlagsWaitAll, osWaitForever);
 8001648:	f04f 32ff 	mov.w	r2, #4294967295
 800164c:	2101      	movs	r1, #1
 800164e:	2001      	movs	r0, #1
 8001650:	f007 f836 	bl	80086c0 <osThreadFlagsWait>
	printf("Temporizador activado\r\n");
 8001654:	4806      	ldr	r0, [pc, #24]	; (8001670 <temporizador_func+0x30>)
 8001656:	f00a fd0d 	bl	800c074 <puts>
  /* Infinite loop */
  for(;;)
  {
    osDelay(pdMS_TO_TICKS(10000)); //Periodo en ms con el que se mandan las aceleraciones
 800165a:	f242 7010 	movw	r0, #10000	; 0x2710
 800165e:	f007 f8b0 	bl	80087c2 <osDelay>
    osThreadFlagsSet(readAccelHandle,0x0004U);
 8001662:	4b04      	ldr	r3, [pc, #16]	; (8001674 <temporizador_func+0x34>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	2104      	movs	r1, #4
 8001668:	4618      	mov	r0, r3
 800166a:	f006 ffdb 	bl	8008624 <osThreadFlagsSet>
    osDelay(pdMS_TO_TICKS(10000)); //Periodo en ms con el que se mandan las aceleraciones
 800166e:	e7f4      	b.n	800165a <temporizador_func+0x1a>
 8001670:	0800d500 	.word	0x0800d500
 8001674:	20000778 	.word	0x20000778

08001678 <sendMQTT_func>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_sendMQTT_func */
void sendMQTT_func(void *argument)
{
 8001678:	b590      	push	{r4, r7, lr}
 800167a:	b087      	sub	sp, #28
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN sendMQTT_func */
	uint32_t return_wait = 0U;
 8001680:	2300      	movs	r3, #0
 8001682:	613b      	str	r3, [r7, #16]
	uint16_t iter;
	uint16_t max_iter;
  /* Infinite loop */
  for(;;)
  {
	  return_wait = osThreadFlagsWait(MODO_NORMAL | MODO_CONTINUO, osFlagsWaitAny, osWaitForever);
 8001684:	f04f 32ff 	mov.w	r2, #4294967295
 8001688:	2100      	movs	r1, #0
 800168a:	2003      	movs	r0, #3
 800168c:	f007 f818 	bl	80086c0 <osThreadFlagsWait>
 8001690:	6138      	str	r0, [r7, #16]
	  if(return_wait == MODO_NORMAL){
 8001692:	693b      	ldr	r3, [r7, #16]
 8001694:	2b01      	cmp	r3, #1
 8001696:	d105      	bne.n	80016a4 <sendMQTT_func+0x2c>
		  printf("Vamos a recibir 64 aceleraciones\r\n");
 8001698:	481e      	ldr	r0, [pc, #120]	; (8001714 <sendMQTT_func+0x9c>)
 800169a:	f00a fceb 	bl	800c074 <puts>
		  max_iter = MUESTRAS_NORMAL;
 800169e:	2340      	movs	r3, #64	; 0x40
 80016a0:	82bb      	strh	r3, [r7, #20]
 80016a2:	e008      	b.n	80016b6 <sendMQTT_func+0x3e>

	  }
	  else if(return_wait == MODO_CONTINUO){
 80016a4:	693b      	ldr	r3, [r7, #16]
 80016a6:	2b02      	cmp	r3, #2
 80016a8:	d105      	bne.n	80016b6 <sendMQTT_func+0x3e>
		  printf("Vamos a recibir 1024 aceleraciones\r\n");
 80016aa:	481b      	ldr	r0, [pc, #108]	; (8001718 <sendMQTT_func+0xa0>)
 80016ac:	f00a fce2 	bl	800c074 <puts>
		  max_iter = MUESTRAS_CONTINUO;
 80016b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80016b4:	82bb      	strh	r3, [r7, #20]
	  }
	  for (iter=0;iter<max_iter;iter++){
 80016b6:	2300      	movs	r3, #0
 80016b8:	82fb      	strh	r3, [r7, #22]
 80016ba:	e01c      	b.n	80016f6 <sendMQTT_func+0x7e>
		  estado = osMessageQueueGet(print_queueHandle, &mensaje, NULL, osWaitForever);
 80016bc:	4b17      	ldr	r3, [pc, #92]	; (800171c <sendMQTT_func+0xa4>)
 80016be:	6818      	ldr	r0, [r3, #0]
 80016c0:	f107 0108 	add.w	r1, r7, #8
 80016c4:	f04f 33ff 	mov.w	r3, #4294967295
 80016c8:	2200      	movs	r2, #0
 80016ca:	f007 f969 	bl	80089a0 <osMessageQueueGet>
 80016ce:	60f8      	str	r0, [r7, #12]

		  if (estado == osOK)
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d10c      	bne.n	80016f0 <sendMQTT_func+0x78>
		  {
			  //printf("%s",(char*)mensaje);
			  HAL_UART_Transmit(&huart1, (uint8_t*)mensaje, strlen(mensaje),10);
 80016d6:	68bb      	ldr	r3, [r7, #8]
 80016d8:	461c      	mov	r4, r3
 80016da:	68bb      	ldr	r3, [r7, #8]
 80016dc:	4618      	mov	r0, r3
 80016de:	f7fe fd77 	bl	80001d0 <strlen>
 80016e2:	4603      	mov	r3, r0
 80016e4:	b29a      	uxth	r2, r3
 80016e6:	230a      	movs	r3, #10
 80016e8:	4621      	mov	r1, r4
 80016ea:	480d      	ldr	r0, [pc, #52]	; (8001720 <sendMQTT_func+0xa8>)
 80016ec:	f004 fdae 	bl	800624c <HAL_UART_Transmit>
	  for (iter=0;iter<max_iter;iter++){
 80016f0:	8afb      	ldrh	r3, [r7, #22]
 80016f2:	3301      	adds	r3, #1
 80016f4:	82fb      	strh	r3, [r7, #22]
 80016f6:	8afa      	ldrh	r2, [r7, #22]
 80016f8:	8abb      	ldrh	r3, [r7, #20]
 80016fa:	429a      	cmp	r2, r3
 80016fc:	d3de      	bcc.n	80016bc <sendMQTT_func+0x44>
		  }
	  }
	  printf("Espacio en la cola: %d\r\n",osMessageQueueGetSpace(print_queueHandle));
 80016fe:	4b07      	ldr	r3, [pc, #28]	; (800171c <sendMQTT_func+0xa4>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	4618      	mov	r0, r3
 8001704:	f007 f9aa 	bl	8008a5c <osMessageQueueGetSpace>
 8001708:	4603      	mov	r3, r0
 800170a:	4619      	mov	r1, r3
 800170c:	4805      	ldr	r0, [pc, #20]	; (8001724 <sendMQTT_func+0xac>)
 800170e:	f00a fc2b 	bl	800bf68 <iprintf>
	  return_wait = osThreadFlagsWait(MODO_NORMAL | MODO_CONTINUO, osFlagsWaitAny, osWaitForever);
 8001712:	e7b7      	b.n	8001684 <sendMQTT_func+0xc>
 8001714:	0800d518 	.word	0x0800d518
 8001718:	0800d53c 	.word	0x0800d53c
 800171c:	2000078c 	.word	0x2000078c
 8001720:	20000264 	.word	0x20000264
 8001724:	0800d560 	.word	0x0800d560

08001728 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b082      	sub	sp, #8
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	4a04      	ldr	r2, [pc, #16]	; (8001748 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001736:	4293      	cmp	r3, r2
 8001738:	d101      	bne.n	800173e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800173a:	f000 fcfd 	bl	8002138 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800173e:	bf00      	nop
 8001740:	3708      	adds	r7, #8
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	40001000 	.word	0x40001000

0800174c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800174c:	b480      	push	{r7}
 800174e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001750:	b672      	cpsid	i
}
 8001752:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001754:	e7fe      	b.n	8001754 <Error_Handler+0x8>
	...

08001758 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b082      	sub	sp, #8
 800175c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800175e:	4b11      	ldr	r3, [pc, #68]	; (80017a4 <HAL_MspInit+0x4c>)
 8001760:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001762:	4a10      	ldr	r2, [pc, #64]	; (80017a4 <HAL_MspInit+0x4c>)
 8001764:	f043 0301 	orr.w	r3, r3, #1
 8001768:	6613      	str	r3, [r2, #96]	; 0x60
 800176a:	4b0e      	ldr	r3, [pc, #56]	; (80017a4 <HAL_MspInit+0x4c>)
 800176c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800176e:	f003 0301 	and.w	r3, r3, #1
 8001772:	607b      	str	r3, [r7, #4]
 8001774:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001776:	4b0b      	ldr	r3, [pc, #44]	; (80017a4 <HAL_MspInit+0x4c>)
 8001778:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800177a:	4a0a      	ldr	r2, [pc, #40]	; (80017a4 <HAL_MspInit+0x4c>)
 800177c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001780:	6593      	str	r3, [r2, #88]	; 0x58
 8001782:	4b08      	ldr	r3, [pc, #32]	; (80017a4 <HAL_MspInit+0x4c>)
 8001784:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001786:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800178a:	603b      	str	r3, [r7, #0]
 800178c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800178e:	2200      	movs	r2, #0
 8001790:	210f      	movs	r1, #15
 8001792:	f06f 0001 	mvn.w	r0, #1
 8001796:	f000 fdcb 	bl	8002330 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800179a:	bf00      	nop
 800179c:	3708      	adds	r7, #8
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	bf00      	nop
 80017a4:	40021000 	.word	0x40021000

080017a8 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b0ac      	sub	sp, #176	; 0xb0
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017b0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80017b4:	2200      	movs	r2, #0
 80017b6:	601a      	str	r2, [r3, #0]
 80017b8:	605a      	str	r2, [r3, #4]
 80017ba:	609a      	str	r2, [r3, #8]
 80017bc:	60da      	str	r2, [r3, #12]
 80017be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80017c0:	f107 0314 	add.w	r3, r7, #20
 80017c4:	2288      	movs	r2, #136	; 0x88
 80017c6:	2100      	movs	r1, #0
 80017c8:	4618      	mov	r0, r3
 80017ca:	f00a fb30 	bl	800be2e <memset>
  if(DFSDM1_Init == 0)
 80017ce:	4b25      	ldr	r3, [pc, #148]	; (8001864 <HAL_DFSDM_ChannelMspInit+0xbc>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d142      	bne.n	800185c <HAL_DFSDM_ChannelMspInit+0xb4>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 80017d6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80017da:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 80017dc:	2300      	movs	r3, #0
 80017de:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80017e2:	f107 0314 	add.w	r3, r7, #20
 80017e6:	4618      	mov	r0, r3
 80017e8:	f003 f90a 	bl	8004a00 <HAL_RCCEx_PeriphCLKConfig>
 80017ec:	4603      	mov	r3, r0
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d001      	beq.n	80017f6 <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 80017f2:	f7ff ffab 	bl	800174c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 80017f6:	4b1c      	ldr	r3, [pc, #112]	; (8001868 <HAL_DFSDM_ChannelMspInit+0xc0>)
 80017f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017fa:	4a1b      	ldr	r2, [pc, #108]	; (8001868 <HAL_DFSDM_ChannelMspInit+0xc0>)
 80017fc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001800:	6613      	str	r3, [r2, #96]	; 0x60
 8001802:	4b19      	ldr	r3, [pc, #100]	; (8001868 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001804:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001806:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800180a:	613b      	str	r3, [r7, #16]
 800180c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800180e:	4b16      	ldr	r3, [pc, #88]	; (8001868 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001810:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001812:	4a15      	ldr	r2, [pc, #84]	; (8001868 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001814:	f043 0310 	orr.w	r3, r3, #16
 8001818:	64d3      	str	r3, [r2, #76]	; 0x4c
 800181a:	4b13      	ldr	r3, [pc, #76]	; (8001868 <HAL_DFSDM_ChannelMspInit+0xc0>)
 800181c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800181e:	f003 0310 	and.w	r3, r3, #16
 8001822:	60fb      	str	r3, [r7, #12]
 8001824:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 8001826:	f44f 7320 	mov.w	r3, #640	; 0x280
 800182a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800182e:	2302      	movs	r3, #2
 8001830:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001834:	2300      	movs	r3, #0
 8001836:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800183a:	2300      	movs	r3, #0
 800183c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8001840:	2306      	movs	r3, #6
 8001842:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001846:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800184a:	4619      	mov	r1, r3
 800184c:	4807      	ldr	r0, [pc, #28]	; (800186c <HAL_DFSDM_ChannelMspInit+0xc4>)
 800184e:	f000 ff25 	bl	800269c <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8001852:	4b04      	ldr	r3, [pc, #16]	; (8001864 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	3301      	adds	r3, #1
 8001858:	4a02      	ldr	r2, [pc, #8]	; (8001864 <HAL_DFSDM_ChannelMspInit+0xbc>)
 800185a:	6013      	str	r3, [r2, #0]
  }

}
 800185c:	bf00      	nop
 800185e:	37b0      	adds	r7, #176	; 0xb0
 8001860:	46bd      	mov	sp, r7
 8001862:	bd80      	pop	{r7, pc}
 8001864:	200007b8 	.word	0x200007b8
 8001868:	40021000 	.word	0x40021000
 800186c:	48001000 	.word	0x48001000

08001870 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b0ac      	sub	sp, #176	; 0xb0
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001878:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800187c:	2200      	movs	r2, #0
 800187e:	601a      	str	r2, [r3, #0]
 8001880:	605a      	str	r2, [r3, #4]
 8001882:	609a      	str	r2, [r3, #8]
 8001884:	60da      	str	r2, [r3, #12]
 8001886:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001888:	f107 0314 	add.w	r3, r7, #20
 800188c:	2288      	movs	r2, #136	; 0x88
 800188e:	2100      	movs	r1, #0
 8001890:	4618      	mov	r0, r3
 8001892:	f00a facc 	bl	800be2e <memset>
  if(hi2c->Instance==I2C2)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	4a21      	ldr	r2, [pc, #132]	; (8001920 <HAL_I2C_MspInit+0xb0>)
 800189c:	4293      	cmp	r3, r2
 800189e:	d13b      	bne.n	8001918 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80018a0:	2380      	movs	r3, #128	; 0x80
 80018a2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80018a4:	2300      	movs	r3, #0
 80018a6:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80018a8:	f107 0314 	add.w	r3, r7, #20
 80018ac:	4618      	mov	r0, r3
 80018ae:	f003 f8a7 	bl	8004a00 <HAL_RCCEx_PeriphCLKConfig>
 80018b2:	4603      	mov	r3, r0
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d001      	beq.n	80018bc <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80018b8:	f7ff ff48 	bl	800174c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018bc:	4b19      	ldr	r3, [pc, #100]	; (8001924 <HAL_I2C_MspInit+0xb4>)
 80018be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018c0:	4a18      	ldr	r2, [pc, #96]	; (8001924 <HAL_I2C_MspInit+0xb4>)
 80018c2:	f043 0302 	orr.w	r3, r3, #2
 80018c6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018c8:	4b16      	ldr	r3, [pc, #88]	; (8001924 <HAL_I2C_MspInit+0xb4>)
 80018ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018cc:	f003 0302 	and.w	r3, r3, #2
 80018d0:	613b      	str	r3, [r7, #16]
 80018d2:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 80018d4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80018d8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80018dc:	2312      	movs	r3, #18
 80018de:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80018e2:	2301      	movs	r3, #1
 80018e4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018e8:	2303      	movs	r3, #3
 80018ea:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80018ee:	2304      	movs	r3, #4
 80018f0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018f4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80018f8:	4619      	mov	r1, r3
 80018fa:	480b      	ldr	r0, [pc, #44]	; (8001928 <HAL_I2C_MspInit+0xb8>)
 80018fc:	f000 fece 	bl	800269c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001900:	4b08      	ldr	r3, [pc, #32]	; (8001924 <HAL_I2C_MspInit+0xb4>)
 8001902:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001904:	4a07      	ldr	r2, [pc, #28]	; (8001924 <HAL_I2C_MspInit+0xb4>)
 8001906:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800190a:	6593      	str	r3, [r2, #88]	; 0x58
 800190c:	4b05      	ldr	r3, [pc, #20]	; (8001924 <HAL_I2C_MspInit+0xb4>)
 800190e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001910:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001914:	60fb      	str	r3, [r7, #12]
 8001916:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001918:	bf00      	nop
 800191a:	37b0      	adds	r7, #176	; 0xb0
 800191c:	46bd      	mov	sp, r7
 800191e:	bd80      	pop	{r7, pc}
 8001920:	40005800 	.word	0x40005800
 8001924:	40021000 	.word	0x40021000
 8001928:	48000400 	.word	0x48000400

0800192c <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b082      	sub	sp, #8
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C2)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4a0b      	ldr	r2, [pc, #44]	; (8001968 <HAL_I2C_MspDeInit+0x3c>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d10f      	bne.n	800195e <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 800193e:	4b0b      	ldr	r3, [pc, #44]	; (800196c <HAL_I2C_MspDeInit+0x40>)
 8001940:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001942:	4a0a      	ldr	r2, [pc, #40]	; (800196c <HAL_I2C_MspDeInit+0x40>)
 8001944:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001948:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    HAL_GPIO_DeInit(INTERNAL_I2C2_SCL_GPIO_Port, INTERNAL_I2C2_SCL_Pin);
 800194a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800194e:	4808      	ldr	r0, [pc, #32]	; (8001970 <HAL_I2C_MspDeInit+0x44>)
 8001950:	f001 f84e 	bl	80029f0 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(INTERNAL_I2C2_SDA_GPIO_Port, INTERNAL_I2C2_SDA_Pin);
 8001954:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001958:	4805      	ldr	r0, [pc, #20]	; (8001970 <HAL_I2C_MspDeInit+0x44>)
 800195a:	f001 f849 	bl	80029f0 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 800195e:	bf00      	nop
 8001960:	3708      	adds	r7, #8
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}
 8001966:	bf00      	nop
 8001968:	40005800 	.word	0x40005800
 800196c:	40021000 	.word	0x40021000
 8001970:	48000400 	.word	0x48000400

08001974 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b08a      	sub	sp, #40	; 0x28
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800197c:	f107 0314 	add.w	r3, r7, #20
 8001980:	2200      	movs	r2, #0
 8001982:	601a      	str	r2, [r3, #0]
 8001984:	605a      	str	r2, [r3, #4]
 8001986:	609a      	str	r2, [r3, #8]
 8001988:	60da      	str	r2, [r3, #12]
 800198a:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4a17      	ldr	r2, [pc, #92]	; (80019f0 <HAL_QSPI_MspInit+0x7c>)
 8001992:	4293      	cmp	r3, r2
 8001994:	d128      	bne.n	80019e8 <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001996:	4b17      	ldr	r3, [pc, #92]	; (80019f4 <HAL_QSPI_MspInit+0x80>)
 8001998:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800199a:	4a16      	ldr	r2, [pc, #88]	; (80019f4 <HAL_QSPI_MspInit+0x80>)
 800199c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019a0:	6513      	str	r3, [r2, #80]	; 0x50
 80019a2:	4b14      	ldr	r3, [pc, #80]	; (80019f4 <HAL_QSPI_MspInit+0x80>)
 80019a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80019a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019aa:	613b      	str	r3, [r7, #16]
 80019ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80019ae:	4b11      	ldr	r3, [pc, #68]	; (80019f4 <HAL_QSPI_MspInit+0x80>)
 80019b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019b2:	4a10      	ldr	r2, [pc, #64]	; (80019f4 <HAL_QSPI_MspInit+0x80>)
 80019b4:	f043 0310 	orr.w	r3, r3, #16
 80019b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019ba:	4b0e      	ldr	r3, [pc, #56]	; (80019f4 <HAL_QSPI_MspInit+0x80>)
 80019bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019be:	f003 0310 	and.w	r3, r3, #16
 80019c2:	60fb      	str	r3, [r7, #12]
 80019c4:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 80019c6:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 80019ca:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019cc:	2302      	movs	r3, #2
 80019ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d0:	2300      	movs	r3, #0
 80019d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019d4:	2303      	movs	r3, #3
 80019d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80019d8:	230a      	movs	r3, #10
 80019da:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80019dc:	f107 0314 	add.w	r3, r7, #20
 80019e0:	4619      	mov	r1, r3
 80019e2:	4805      	ldr	r0, [pc, #20]	; (80019f8 <HAL_QSPI_MspInit+0x84>)
 80019e4:	f000 fe5a 	bl	800269c <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 80019e8:	bf00      	nop
 80019ea:	3728      	adds	r7, #40	; 0x28
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bd80      	pop	{r7, pc}
 80019f0:	a0001000 	.word	0xa0001000
 80019f4:	40021000 	.word	0x40021000
 80019f8:	48001000 	.word	0x48001000

080019fc <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b0a4      	sub	sp, #144	; 0x90
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a04:	f107 0308 	add.w	r3, r7, #8
 8001a08:	2288      	movs	r2, #136	; 0x88
 8001a0a:	2100      	movs	r1, #0
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	f00a fa0e 	bl	800be2e <memset>
  if(hrtc->Instance==RTC)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4a10      	ldr	r2, [pc, #64]	; (8001a58 <HAL_RTC_MspInit+0x5c>)
 8001a18:	4293      	cmp	r3, r2
 8001a1a:	d118      	bne.n	8001a4e <HAL_RTC_MspInit+0x52>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001a1c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a20:	60bb      	str	r3, [r7, #8]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001a22:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a26:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a2a:	f107 0308 	add.w	r3, r7, #8
 8001a2e:	4618      	mov	r0, r3
 8001a30:	f002 ffe6 	bl	8004a00 <HAL_RCCEx_PeriphCLKConfig>
 8001a34:	4603      	mov	r3, r0
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d001      	beq.n	8001a3e <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8001a3a:	f7ff fe87 	bl	800174c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001a3e:	4b07      	ldr	r3, [pc, #28]	; (8001a5c <HAL_RTC_MspInit+0x60>)
 8001a40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a44:	4a05      	ldr	r2, [pc, #20]	; (8001a5c <HAL_RTC_MspInit+0x60>)
 8001a46:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a4a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001a4e:	bf00      	nop
 8001a50:	3790      	adds	r7, #144	; 0x90
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	bf00      	nop
 8001a58:	40002800 	.word	0x40002800
 8001a5c:	40021000 	.word	0x40021000

08001a60 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b08a      	sub	sp, #40	; 0x28
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a68:	f107 0314 	add.w	r3, r7, #20
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	601a      	str	r2, [r3, #0]
 8001a70:	605a      	str	r2, [r3, #4]
 8001a72:	609a      	str	r2, [r3, #8]
 8001a74:	60da      	str	r2, [r3, #12]
 8001a76:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4a17      	ldr	r2, [pc, #92]	; (8001adc <HAL_SPI_MspInit+0x7c>)
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	d128      	bne.n	8001ad4 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001a82:	4b17      	ldr	r3, [pc, #92]	; (8001ae0 <HAL_SPI_MspInit+0x80>)
 8001a84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a86:	4a16      	ldr	r2, [pc, #88]	; (8001ae0 <HAL_SPI_MspInit+0x80>)
 8001a88:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a8c:	6593      	str	r3, [r2, #88]	; 0x58
 8001a8e:	4b14      	ldr	r3, [pc, #80]	; (8001ae0 <HAL_SPI_MspInit+0x80>)
 8001a90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a92:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001a96:	613b      	str	r3, [r7, #16]
 8001a98:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a9a:	4b11      	ldr	r3, [pc, #68]	; (8001ae0 <HAL_SPI_MspInit+0x80>)
 8001a9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a9e:	4a10      	ldr	r2, [pc, #64]	; (8001ae0 <HAL_SPI_MspInit+0x80>)
 8001aa0:	f043 0304 	orr.w	r3, r3, #4
 8001aa4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001aa6:	4b0e      	ldr	r3, [pc, #56]	; (8001ae0 <HAL_SPI_MspInit+0x80>)
 8001aa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aaa:	f003 0304 	and.w	r3, r3, #4
 8001aae:	60fb      	str	r3, [r7, #12]
 8001ab0:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 8001ab2:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001ab6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ab8:	2302      	movs	r3, #2
 8001aba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001abc:	2300      	movs	r3, #0
 8001abe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ac0:	2303      	movs	r3, #3
 8001ac2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001ac4:	2306      	movs	r3, #6
 8001ac6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ac8:	f107 0314 	add.w	r3, r7, #20
 8001acc:	4619      	mov	r1, r3
 8001ace:	4805      	ldr	r0, [pc, #20]	; (8001ae4 <HAL_SPI_MspInit+0x84>)
 8001ad0:	f000 fde4 	bl	800269c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001ad4:	bf00      	nop
 8001ad6:	3728      	adds	r7, #40	; 0x28
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bd80      	pop	{r7, pc}
 8001adc:	40003c00 	.word	0x40003c00
 8001ae0:	40021000 	.word	0x40021000
 8001ae4:	48000800 	.word	0x48000800

08001ae8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b084      	sub	sp, #16
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4a0d      	ldr	r2, [pc, #52]	; (8001b2c <HAL_TIM_Base_MspInit+0x44>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d113      	bne.n	8001b22 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001afa:	4b0d      	ldr	r3, [pc, #52]	; (8001b30 <HAL_TIM_Base_MspInit+0x48>)
 8001afc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001afe:	4a0c      	ldr	r2, [pc, #48]	; (8001b30 <HAL_TIM_Base_MspInit+0x48>)
 8001b00:	f043 0320 	orr.w	r3, r3, #32
 8001b04:	6593      	str	r3, [r2, #88]	; 0x58
 8001b06:	4b0a      	ldr	r3, [pc, #40]	; (8001b30 <HAL_TIM_Base_MspInit+0x48>)
 8001b08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b0a:	f003 0320 	and.w	r3, r3, #32
 8001b0e:	60fb      	str	r3, [r7, #12]
 8001b10:	68fb      	ldr	r3, [r7, #12]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 5, 0);
 8001b12:	2200      	movs	r2, #0
 8001b14:	2105      	movs	r1, #5
 8001b16:	2037      	movs	r0, #55	; 0x37
 8001b18:	f000 fc0a 	bl	8002330 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001b1c:	2037      	movs	r0, #55	; 0x37
 8001b1e:	f000 fc23 	bl	8002368 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8001b22:	bf00      	nop
 8001b24:	3710      	adds	r7, #16
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}
 8001b2a:	bf00      	nop
 8001b2c:	40001400 	.word	0x40001400
 8001b30:	40021000 	.word	0x40021000

08001b34 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b0ae      	sub	sp, #184	; 0xb8
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b3c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001b40:	2200      	movs	r2, #0
 8001b42:	601a      	str	r2, [r3, #0]
 8001b44:	605a      	str	r2, [r3, #4]
 8001b46:	609a      	str	r2, [r3, #8]
 8001b48:	60da      	str	r2, [r3, #12]
 8001b4a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b4c:	f107 031c 	add.w	r3, r7, #28
 8001b50:	2288      	movs	r2, #136	; 0x88
 8001b52:	2100      	movs	r1, #0
 8001b54:	4618      	mov	r0, r3
 8001b56:	f00a f96a 	bl	800be2e <memset>
  if(huart->Instance==USART1)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4a46      	ldr	r2, [pc, #280]	; (8001c78 <HAL_UART_MspInit+0x144>)
 8001b60:	4293      	cmp	r3, r2
 8001b62:	d143      	bne.n	8001bec <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001b64:	2301      	movs	r3, #1
 8001b66:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b6c:	f107 031c 	add.w	r3, r7, #28
 8001b70:	4618      	mov	r0, r3
 8001b72:	f002 ff45 	bl	8004a00 <HAL_RCCEx_PeriphCLKConfig>
 8001b76:	4603      	mov	r3, r0
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d001      	beq.n	8001b80 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001b7c:	f7ff fde6 	bl	800174c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001b80:	4b3e      	ldr	r3, [pc, #248]	; (8001c7c <HAL_UART_MspInit+0x148>)
 8001b82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b84:	4a3d      	ldr	r2, [pc, #244]	; (8001c7c <HAL_UART_MspInit+0x148>)
 8001b86:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b8a:	6613      	str	r3, [r2, #96]	; 0x60
 8001b8c:	4b3b      	ldr	r3, [pc, #236]	; (8001c7c <HAL_UART_MspInit+0x148>)
 8001b8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b90:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b94:	61bb      	str	r3, [r7, #24]
 8001b96:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b98:	4b38      	ldr	r3, [pc, #224]	; (8001c7c <HAL_UART_MspInit+0x148>)
 8001b9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b9c:	4a37      	ldr	r2, [pc, #220]	; (8001c7c <HAL_UART_MspInit+0x148>)
 8001b9e:	f043 0302 	orr.w	r3, r3, #2
 8001ba2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ba4:	4b35      	ldr	r3, [pc, #212]	; (8001c7c <HAL_UART_MspInit+0x148>)
 8001ba6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ba8:	f003 0302 	and.w	r3, r3, #2
 8001bac:	617b      	str	r3, [r7, #20]
 8001bae:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 8001bb0:	23c0      	movs	r3, #192	; 0xc0
 8001bb2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bb6:	2302      	movs	r3, #2
 8001bb8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bc2:	2303      	movs	r3, #3
 8001bc4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001bc8:	2307      	movs	r3, #7
 8001bca:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bce:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001bd2:	4619      	mov	r1, r3
 8001bd4:	482a      	ldr	r0, [pc, #168]	; (8001c80 <HAL_UART_MspInit+0x14c>)
 8001bd6:	f000 fd61 	bl	800269c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8001bda:	2200      	movs	r2, #0
 8001bdc:	2105      	movs	r1, #5
 8001bde:	2025      	movs	r0, #37	; 0x25
 8001be0:	f000 fba6 	bl	8002330 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001be4:	2025      	movs	r0, #37	; 0x25
 8001be6:	f000 fbbf 	bl	8002368 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001bea:	e040      	b.n	8001c6e <HAL_UART_MspInit+0x13a>
  else if(huart->Instance==USART3)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a24      	ldr	r2, [pc, #144]	; (8001c84 <HAL_UART_MspInit+0x150>)
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d13b      	bne.n	8001c6e <HAL_UART_MspInit+0x13a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001bf6:	2304      	movs	r3, #4
 8001bf8:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001bfe:	f107 031c 	add.w	r3, r7, #28
 8001c02:	4618      	mov	r0, r3
 8001c04:	f002 fefc 	bl	8004a00 <HAL_RCCEx_PeriphCLKConfig>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d001      	beq.n	8001c12 <HAL_UART_MspInit+0xde>
      Error_Handler();
 8001c0e:	f7ff fd9d 	bl	800174c <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001c12:	4b1a      	ldr	r3, [pc, #104]	; (8001c7c <HAL_UART_MspInit+0x148>)
 8001c14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c16:	4a19      	ldr	r2, [pc, #100]	; (8001c7c <HAL_UART_MspInit+0x148>)
 8001c18:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c1c:	6593      	str	r3, [r2, #88]	; 0x58
 8001c1e:	4b17      	ldr	r3, [pc, #92]	; (8001c7c <HAL_UART_MspInit+0x148>)
 8001c20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c22:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c26:	613b      	str	r3, [r7, #16]
 8001c28:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c2a:	4b14      	ldr	r3, [pc, #80]	; (8001c7c <HAL_UART_MspInit+0x148>)
 8001c2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c2e:	4a13      	ldr	r2, [pc, #76]	; (8001c7c <HAL_UART_MspInit+0x148>)
 8001c30:	f043 0308 	orr.w	r3, r3, #8
 8001c34:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c36:	4b11      	ldr	r3, [pc, #68]	; (8001c7c <HAL_UART_MspInit+0x148>)
 8001c38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c3a:	f003 0308 	and.w	r3, r3, #8
 8001c3e:	60fb      	str	r3, [r7, #12]
 8001c40:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 8001c42:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001c46:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c4a:	2302      	movs	r3, #2
 8001c4c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c50:	2300      	movs	r3, #0
 8001c52:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c56:	2303      	movs	r3, #3
 8001c58:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001c5c:	2307      	movs	r3, #7
 8001c5e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c62:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001c66:	4619      	mov	r1, r3
 8001c68:	4807      	ldr	r0, [pc, #28]	; (8001c88 <HAL_UART_MspInit+0x154>)
 8001c6a:	f000 fd17 	bl	800269c <HAL_GPIO_Init>
}
 8001c6e:	bf00      	nop
 8001c70:	37b8      	adds	r7, #184	; 0xb8
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}
 8001c76:	bf00      	nop
 8001c78:	40013800 	.word	0x40013800
 8001c7c:	40021000 	.word	0x40021000
 8001c80:	48000400 	.word	0x48000400
 8001c84:	40004800 	.word	0x40004800
 8001c88:	48000c00 	.word	0x48000c00

08001c8c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b0ac      	sub	sp, #176	; 0xb0
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c94:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001c98:	2200      	movs	r2, #0
 8001c9a:	601a      	str	r2, [r3, #0]
 8001c9c:	605a      	str	r2, [r3, #4]
 8001c9e:	609a      	str	r2, [r3, #8]
 8001ca0:	60da      	str	r2, [r3, #12]
 8001ca2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001ca4:	f107 0314 	add.w	r3, r7, #20
 8001ca8:	2288      	movs	r2, #136	; 0x88
 8001caa:	2100      	movs	r1, #0
 8001cac:	4618      	mov	r0, r3
 8001cae:	f00a f8be 	bl	800be2e <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001cba:	d17c      	bne.n	8001db6 <HAL_PCD_MspInit+0x12a>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001cbc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001cc0:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8001cc2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001cc6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8001cca:	2301      	movs	r3, #1
 8001ccc:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8001cd2:	2318      	movs	r3, #24
 8001cd4:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001cd6:	2307      	movs	r3, #7
 8001cd8:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001cda:	2302      	movs	r3, #2
 8001cdc:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001cde:	2302      	movs	r3, #2
 8001ce0:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8001ce2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001ce6:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ce8:	f107 0314 	add.w	r3, r7, #20
 8001cec:	4618      	mov	r0, r3
 8001cee:	f002 fe87 	bl	8004a00 <HAL_RCCEx_PeriphCLKConfig>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d001      	beq.n	8001cfc <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 8001cf8:	f7ff fd28 	bl	800174c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cfc:	4b30      	ldr	r3, [pc, #192]	; (8001dc0 <HAL_PCD_MspInit+0x134>)
 8001cfe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d00:	4a2f      	ldr	r2, [pc, #188]	; (8001dc0 <HAL_PCD_MspInit+0x134>)
 8001d02:	f043 0301 	orr.w	r3, r3, #1
 8001d06:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d08:	4b2d      	ldr	r3, [pc, #180]	; (8001dc0 <HAL_PCD_MspInit+0x134>)
 8001d0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d0c:	f003 0301 	and.w	r3, r3, #1
 8001d10:	613b      	str	r3, [r7, #16]
 8001d12:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 8001d14:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001d18:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d22:	2300      	movs	r3, #0
 8001d24:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001d28:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001d2c:	4619      	mov	r1, r3
 8001d2e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d32:	f000 fcb3 	bl	800269c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8001d36:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001d3a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d3e:	2302      	movs	r3, #2
 8001d40:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d44:	2300      	movs	r3, #0
 8001d46:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d4a:	2303      	movs	r3, #3
 8001d4c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001d50:	230a      	movs	r3, #10
 8001d52:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d56:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001d5a:	4619      	mov	r1, r3
 8001d5c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d60:	f000 fc9c 	bl	800269c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001d64:	4b16      	ldr	r3, [pc, #88]	; (8001dc0 <HAL_PCD_MspInit+0x134>)
 8001d66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d68:	4a15      	ldr	r2, [pc, #84]	; (8001dc0 <HAL_PCD_MspInit+0x134>)
 8001d6a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001d6e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d70:	4b13      	ldr	r3, [pc, #76]	; (8001dc0 <HAL_PCD_MspInit+0x134>)
 8001d72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d74:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d78:	60fb      	str	r3, [r7, #12]
 8001d7a:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d7c:	4b10      	ldr	r3, [pc, #64]	; (8001dc0 <HAL_PCD_MspInit+0x134>)
 8001d7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d114      	bne.n	8001db2 <HAL_PCD_MspInit+0x126>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d88:	4b0d      	ldr	r3, [pc, #52]	; (8001dc0 <HAL_PCD_MspInit+0x134>)
 8001d8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d8c:	4a0c      	ldr	r2, [pc, #48]	; (8001dc0 <HAL_PCD_MspInit+0x134>)
 8001d8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d92:	6593      	str	r3, [r2, #88]	; 0x58
 8001d94:	4b0a      	ldr	r3, [pc, #40]	; (8001dc0 <HAL_PCD_MspInit+0x134>)
 8001d96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d9c:	60bb      	str	r3, [r7, #8]
 8001d9e:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8001da0:	f001 ff30 	bl	8003c04 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001da4:	4b06      	ldr	r3, [pc, #24]	; (8001dc0 <HAL_PCD_MspInit+0x134>)
 8001da6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001da8:	4a05      	ldr	r2, [pc, #20]	; (8001dc0 <HAL_PCD_MspInit+0x134>)
 8001daa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001dae:	6593      	str	r3, [r2, #88]	; 0x58
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001db0:	e001      	b.n	8001db6 <HAL_PCD_MspInit+0x12a>
      HAL_PWREx_EnableVddUSB();
 8001db2:	f001 ff27 	bl	8003c04 <HAL_PWREx_EnableVddUSB>
}
 8001db6:	bf00      	nop
 8001db8:	37b0      	adds	r7, #176	; 0xb0
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}
 8001dbe:	bf00      	nop
 8001dc0:	40021000 	.word	0x40021000

08001dc4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b08e      	sub	sp, #56	; 0x38
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001dd2:	4b34      	ldr	r3, [pc, #208]	; (8001ea4 <HAL_InitTick+0xe0>)
 8001dd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dd6:	4a33      	ldr	r2, [pc, #204]	; (8001ea4 <HAL_InitTick+0xe0>)
 8001dd8:	f043 0310 	orr.w	r3, r3, #16
 8001ddc:	6593      	str	r3, [r2, #88]	; 0x58
 8001dde:	4b31      	ldr	r3, [pc, #196]	; (8001ea4 <HAL_InitTick+0xe0>)
 8001de0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001de2:	f003 0310 	and.w	r3, r3, #16
 8001de6:	60fb      	str	r3, [r7, #12]
 8001de8:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001dea:	f107 0210 	add.w	r2, r7, #16
 8001dee:	f107 0314 	add.w	r3, r7, #20
 8001df2:	4611      	mov	r1, r2
 8001df4:	4618      	mov	r0, r3
 8001df6:	f002 fd71 	bl	80048dc <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001dfa:	6a3b      	ldr	r3, [r7, #32]
 8001dfc:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001dfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d103      	bne.n	8001e0c <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001e04:	f002 fd3e 	bl	8004884 <HAL_RCC_GetPCLK1Freq>
 8001e08:	6378      	str	r0, [r7, #52]	; 0x34
 8001e0a:	e004      	b.n	8001e16 <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001e0c:	f002 fd3a 	bl	8004884 <HAL_RCC_GetPCLK1Freq>
 8001e10:	4603      	mov	r3, r0
 8001e12:	005b      	lsls	r3, r3, #1
 8001e14:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001e16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e18:	4a23      	ldr	r2, [pc, #140]	; (8001ea8 <HAL_InitTick+0xe4>)
 8001e1a:	fba2 2303 	umull	r2, r3, r2, r3
 8001e1e:	0c9b      	lsrs	r3, r3, #18
 8001e20:	3b01      	subs	r3, #1
 8001e22:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001e24:	4b21      	ldr	r3, [pc, #132]	; (8001eac <HAL_InitTick+0xe8>)
 8001e26:	4a22      	ldr	r2, [pc, #136]	; (8001eb0 <HAL_InitTick+0xec>)
 8001e28:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001e2a:	4b20      	ldr	r3, [pc, #128]	; (8001eac <HAL_InitTick+0xe8>)
 8001e2c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001e30:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001e32:	4a1e      	ldr	r2, [pc, #120]	; (8001eac <HAL_InitTick+0xe8>)
 8001e34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e36:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001e38:	4b1c      	ldr	r3, [pc, #112]	; (8001eac <HAL_InitTick+0xe8>)
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e3e:	4b1b      	ldr	r3, [pc, #108]	; (8001eac <HAL_InitTick+0xe8>)
 8001e40:	2200      	movs	r2, #0
 8001e42:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e44:	4b19      	ldr	r3, [pc, #100]	; (8001eac <HAL_InitTick+0xe8>)
 8001e46:	2200      	movs	r2, #0
 8001e48:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001e4a:	4818      	ldr	r0, [pc, #96]	; (8001eac <HAL_InitTick+0xe8>)
 8001e4c:	f003 fe61 	bl	8005b12 <HAL_TIM_Base_Init>
 8001e50:	4603      	mov	r3, r0
 8001e52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001e56:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d11b      	bne.n	8001e96 <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001e5e:	4813      	ldr	r0, [pc, #76]	; (8001eac <HAL_InitTick+0xe8>)
 8001e60:	f003 feae 	bl	8005bc0 <HAL_TIM_Base_Start_IT>
 8001e64:	4603      	mov	r3, r0
 8001e66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001e6a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d111      	bne.n	8001e96 <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001e72:	2036      	movs	r0, #54	; 0x36
 8001e74:	f000 fa78 	bl	8002368 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2b0f      	cmp	r3, #15
 8001e7c:	d808      	bhi.n	8001e90 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001e7e:	2200      	movs	r2, #0
 8001e80:	6879      	ldr	r1, [r7, #4]
 8001e82:	2036      	movs	r0, #54	; 0x36
 8001e84:	f000 fa54 	bl	8002330 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001e88:	4a0a      	ldr	r2, [pc, #40]	; (8001eb4 <HAL_InitTick+0xf0>)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6013      	str	r3, [r2, #0]
 8001e8e:	e002      	b.n	8001e96 <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8001e90:	2301      	movs	r3, #1
 8001e92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001e96:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	3738      	adds	r7, #56	; 0x38
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}
 8001ea2:	bf00      	nop
 8001ea4:	40021000 	.word	0x40021000
 8001ea8:	431bde83 	.word	0x431bde83
 8001eac:	200007bc 	.word	0x200007bc
 8001eb0:	40001000 	.word	0x40001000
 8001eb4:	20000008 	.word	0x20000008

08001eb8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ebc:	e7fe      	b.n	8001ebc <NMI_Handler+0x4>

08001ebe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ebe:	b480      	push	{r7}
 8001ec0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ec2:	e7fe      	b.n	8001ec2 <HardFault_Handler+0x4>

08001ec4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ec8:	e7fe      	b.n	8001ec8 <MemManage_Handler+0x4>

08001eca <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001eca:	b480      	push	{r7}
 8001ecc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ece:	e7fe      	b.n	8001ece <BusFault_Handler+0x4>

08001ed0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ed4:	e7fe      	b.n	8001ed4 <UsageFault_Handler+0x4>

08001ed6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ed6:	b480      	push	{r7}
 8001ed8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001eda:	bf00      	nop
 8001edc:	46bd      	mov	sp, r7
 8001ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee2:	4770      	bx	lr

08001ee4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 8001ee8:	2020      	movs	r0, #32
 8001eea:	f000 fe8d 	bl	8002c08 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SPBTLE_RF_IRQ_EXTI6_Pin);
 8001eee:	2040      	movs	r0, #64	; 0x40
 8001ef0:	f000 fe8a 	bl	8002c08 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 8001ef4:	2080      	movs	r0, #128	; 0x80
 8001ef6:	f000 fe87 	bl	8002c08 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 8001efa:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001efe:	f000 fe83 	bl	8002c08 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001f02:	bf00      	nop
 8001f04:	bd80      	pop	{r7, pc}
	...

08001f08 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001f0c:	4802      	ldr	r0, [pc, #8]	; (8001f18 <USART1_IRQHandler+0x10>)
 8001f0e:	f004 fa87 	bl	8006420 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001f12:	bf00      	nop
 8001f14:	bd80      	pop	{r7, pc}
 8001f16:	bf00      	nop
 8001f18:	20000264 	.word	0x20000264

08001f1c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI0_Pin);
 8001f20:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001f24:	f000 fe70 	bl	8002c08 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 8001f28:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001f2c:	f000 fe6c 	bl	8002c08 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BOTON_Pin);
 8001f30:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001f34:	f000 fe68 	bl	8002c08 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 8001f38:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001f3c:	f000 fe64 	bl	8002c08 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 8001f40:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001f44:	f000 fe60 	bl	8002c08 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001f48:	bf00      	nop
 8001f4a:	bd80      	pop	{r7, pc}

08001f4c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001f50:	4802      	ldr	r0, [pc, #8]	; (8001f5c <TIM6_DAC_IRQHandler+0x10>)
 8001f52:	f003 fea5 	bl	8005ca0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001f56:	bf00      	nop
 8001f58:	bd80      	pop	{r7, pc}
 8001f5a:	bf00      	nop
 8001f5c:	200007bc 	.word	0x200007bc

08001f60 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */
  ulHighFrequencyTimerTicks++;
 8001f64:	4b04      	ldr	r3, [pc, #16]	; (8001f78 <TIM7_IRQHandler+0x18>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	3301      	adds	r3, #1
 8001f6a:	4a03      	ldr	r2, [pc, #12]	; (8001f78 <TIM7_IRQHandler+0x18>)
 8001f6c:	6013      	str	r3, [r2, #0]
  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001f6e:	4803      	ldr	r0, [pc, #12]	; (8001f7c <TIM7_IRQHandler+0x1c>)
 8001f70:	f003 fe96 	bl	8005ca0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001f74:	bf00      	nop
 8001f76:	bd80      	pop	{r7, pc}
 8001f78:	200007b0 	.word	0x200007b0
 8001f7c:	20000218 	.word	0x20000218

08001f80 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b086      	sub	sp, #24
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	60f8      	str	r0, [r7, #12]
 8001f88:	60b9      	str	r1, [r7, #8]
 8001f8a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	617b      	str	r3, [r7, #20]
 8001f90:	e00a      	b.n	8001fa8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001f92:	f3af 8000 	nop.w
 8001f96:	4601      	mov	r1, r0
 8001f98:	68bb      	ldr	r3, [r7, #8]
 8001f9a:	1c5a      	adds	r2, r3, #1
 8001f9c:	60ba      	str	r2, [r7, #8]
 8001f9e:	b2ca      	uxtb	r2, r1
 8001fa0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fa2:	697b      	ldr	r3, [r7, #20]
 8001fa4:	3301      	adds	r3, #1
 8001fa6:	617b      	str	r3, [r7, #20]
 8001fa8:	697a      	ldr	r2, [r7, #20]
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	429a      	cmp	r2, r3
 8001fae:	dbf0      	blt.n	8001f92 <_read+0x12>
  }

  return len;
 8001fb0:	687b      	ldr	r3, [r7, #4]
}
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	3718      	adds	r7, #24
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}

08001fba <_close>:
  }
  return len;
}

int _close(int file)
{
 8001fba:	b480      	push	{r7}
 8001fbc:	b083      	sub	sp, #12
 8001fbe:	af00      	add	r7, sp, #0
 8001fc0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001fc2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	370c      	adds	r7, #12
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd0:	4770      	bx	lr

08001fd2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001fd2:	b480      	push	{r7}
 8001fd4:	b083      	sub	sp, #12
 8001fd6:	af00      	add	r7, sp, #0
 8001fd8:	6078      	str	r0, [r7, #4]
 8001fda:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001fe2:	605a      	str	r2, [r3, #4]
  return 0;
 8001fe4:	2300      	movs	r3, #0
}
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	370c      	adds	r7, #12
 8001fea:	46bd      	mov	sp, r7
 8001fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff0:	4770      	bx	lr

08001ff2 <_isatty>:

int _isatty(int file)
{
 8001ff2:	b480      	push	{r7}
 8001ff4:	b083      	sub	sp, #12
 8001ff6:	af00      	add	r7, sp, #0
 8001ff8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001ffa:	2301      	movs	r3, #1
}
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	370c      	adds	r7, #12
 8002000:	46bd      	mov	sp, r7
 8002002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002006:	4770      	bx	lr

08002008 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002008:	b480      	push	{r7}
 800200a:	b085      	sub	sp, #20
 800200c:	af00      	add	r7, sp, #0
 800200e:	60f8      	str	r0, [r7, #12]
 8002010:	60b9      	str	r1, [r7, #8]
 8002012:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002014:	2300      	movs	r3, #0
}
 8002016:	4618      	mov	r0, r3
 8002018:	3714      	adds	r7, #20
 800201a:	46bd      	mov	sp, r7
 800201c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002020:	4770      	bx	lr
	...

08002024 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b086      	sub	sp, #24
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800202c:	4a14      	ldr	r2, [pc, #80]	; (8002080 <_sbrk+0x5c>)
 800202e:	4b15      	ldr	r3, [pc, #84]	; (8002084 <_sbrk+0x60>)
 8002030:	1ad3      	subs	r3, r2, r3
 8002032:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002034:	697b      	ldr	r3, [r7, #20]
 8002036:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002038:	4b13      	ldr	r3, [pc, #76]	; (8002088 <_sbrk+0x64>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	2b00      	cmp	r3, #0
 800203e:	d102      	bne.n	8002046 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002040:	4b11      	ldr	r3, [pc, #68]	; (8002088 <_sbrk+0x64>)
 8002042:	4a12      	ldr	r2, [pc, #72]	; (800208c <_sbrk+0x68>)
 8002044:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002046:	4b10      	ldr	r3, [pc, #64]	; (8002088 <_sbrk+0x64>)
 8002048:	681a      	ldr	r2, [r3, #0]
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	4413      	add	r3, r2
 800204e:	693a      	ldr	r2, [r7, #16]
 8002050:	429a      	cmp	r2, r3
 8002052:	d207      	bcs.n	8002064 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002054:	f009 fdba 	bl	800bbcc <__errno>
 8002058:	4603      	mov	r3, r0
 800205a:	220c      	movs	r2, #12
 800205c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800205e:	f04f 33ff 	mov.w	r3, #4294967295
 8002062:	e009      	b.n	8002078 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002064:	4b08      	ldr	r3, [pc, #32]	; (8002088 <_sbrk+0x64>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800206a:	4b07      	ldr	r3, [pc, #28]	; (8002088 <_sbrk+0x64>)
 800206c:	681a      	ldr	r2, [r3, #0]
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	4413      	add	r3, r2
 8002072:	4a05      	ldr	r2, [pc, #20]	; (8002088 <_sbrk+0x64>)
 8002074:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002076:	68fb      	ldr	r3, [r7, #12]
}
 8002078:	4618      	mov	r0, r3
 800207a:	3718      	adds	r7, #24
 800207c:	46bd      	mov	sp, r7
 800207e:	bd80      	pop	{r7, pc}
 8002080:	20018000 	.word	0x20018000
 8002084:	00000400 	.word	0x00000400
 8002088:	20000808 	.word	0x20000808
 800208c:	20002e30 	.word	0x20002e30

08002090 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002090:	b480      	push	{r7}
 8002092:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002094:	4b06      	ldr	r3, [pc, #24]	; (80020b0 <SystemInit+0x20>)
 8002096:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800209a:	4a05      	ldr	r2, [pc, #20]	; (80020b0 <SystemInit+0x20>)
 800209c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80020a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80020a4:	bf00      	nop
 80020a6:	46bd      	mov	sp, r7
 80020a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ac:	4770      	bx	lr
 80020ae:	bf00      	nop
 80020b0:	e000ed00 	.word	0xe000ed00

080020b4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80020b4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80020ec <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80020b8:	f7ff ffea 	bl	8002090 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80020bc:	480c      	ldr	r0, [pc, #48]	; (80020f0 <LoopForever+0x6>)
  ldr r1, =_edata
 80020be:	490d      	ldr	r1, [pc, #52]	; (80020f4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80020c0:	4a0d      	ldr	r2, [pc, #52]	; (80020f8 <LoopForever+0xe>)
  movs r3, #0
 80020c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80020c4:	e002      	b.n	80020cc <LoopCopyDataInit>

080020c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80020c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80020c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80020ca:	3304      	adds	r3, #4

080020cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80020cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80020ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80020d0:	d3f9      	bcc.n	80020c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80020d2:	4a0a      	ldr	r2, [pc, #40]	; (80020fc <LoopForever+0x12>)
  ldr r4, =_ebss
 80020d4:	4c0a      	ldr	r4, [pc, #40]	; (8002100 <LoopForever+0x16>)
  movs r3, #0
 80020d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80020d8:	e001      	b.n	80020de <LoopFillZerobss>

080020da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80020da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80020dc:	3204      	adds	r2, #4

080020de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80020de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80020e0:	d3fb      	bcc.n	80020da <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80020e2:	f009 fe6f 	bl	800bdc4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80020e6:	f7fe fa8f 	bl	8000608 <main>

080020ea <LoopForever>:

LoopForever:
    b LoopForever
 80020ea:	e7fe      	b.n	80020ea <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80020ec:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80020f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80020f4:	200000ac 	.word	0x200000ac
  ldr r2, =_sidata
 80020f8:	0800d7b4 	.word	0x0800d7b4
  ldr r2, =_sbss
 80020fc:	200000ac 	.word	0x200000ac
  ldr r4, =_ebss
 8002100:	20002e2c 	.word	0x20002e2c

08002104 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002104:	e7fe      	b.n	8002104 <ADC1_2_IRQHandler>

08002106 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002106:	b580      	push	{r7, lr}
 8002108:	b082      	sub	sp, #8
 800210a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800210c:	2300      	movs	r3, #0
 800210e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002110:	2003      	movs	r0, #3
 8002112:	f000 f902 	bl	800231a <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002116:	200f      	movs	r0, #15
 8002118:	f7ff fe54 	bl	8001dc4 <HAL_InitTick>
 800211c:	4603      	mov	r3, r0
 800211e:	2b00      	cmp	r3, #0
 8002120:	d002      	beq.n	8002128 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002122:	2301      	movs	r3, #1
 8002124:	71fb      	strb	r3, [r7, #7]
 8002126:	e001      	b.n	800212c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002128:	f7ff fb16 	bl	8001758 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800212c:	79fb      	ldrb	r3, [r7, #7]
}
 800212e:	4618      	mov	r0, r3
 8002130:	3708      	adds	r7, #8
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}
	...

08002138 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002138:	b480      	push	{r7}
 800213a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800213c:	4b06      	ldr	r3, [pc, #24]	; (8002158 <HAL_IncTick+0x20>)
 800213e:	781b      	ldrb	r3, [r3, #0]
 8002140:	461a      	mov	r2, r3
 8002142:	4b06      	ldr	r3, [pc, #24]	; (800215c <HAL_IncTick+0x24>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4413      	add	r3, r2
 8002148:	4a04      	ldr	r2, [pc, #16]	; (800215c <HAL_IncTick+0x24>)
 800214a:	6013      	str	r3, [r2, #0]
}
 800214c:	bf00      	nop
 800214e:	46bd      	mov	sp, r7
 8002150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002154:	4770      	bx	lr
 8002156:	bf00      	nop
 8002158:	2000000c 	.word	0x2000000c
 800215c:	2000080c 	.word	0x2000080c

08002160 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002160:	b480      	push	{r7}
 8002162:	af00      	add	r7, sp, #0
  return uwTick;
 8002164:	4b03      	ldr	r3, [pc, #12]	; (8002174 <HAL_GetTick+0x14>)
 8002166:	681b      	ldr	r3, [r3, #0]
}
 8002168:	4618      	mov	r0, r3
 800216a:	46bd      	mov	sp, r7
 800216c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002170:	4770      	bx	lr
 8002172:	bf00      	nop
 8002174:	2000080c 	.word	0x2000080c

08002178 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b084      	sub	sp, #16
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002180:	f7ff ffee 	bl	8002160 <HAL_GetTick>
 8002184:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002190:	d005      	beq.n	800219e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002192:	4b0a      	ldr	r3, [pc, #40]	; (80021bc <HAL_Delay+0x44>)
 8002194:	781b      	ldrb	r3, [r3, #0]
 8002196:	461a      	mov	r2, r3
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	4413      	add	r3, r2
 800219c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800219e:	bf00      	nop
 80021a0:	f7ff ffde 	bl	8002160 <HAL_GetTick>
 80021a4:	4602      	mov	r2, r0
 80021a6:	68bb      	ldr	r3, [r7, #8]
 80021a8:	1ad3      	subs	r3, r2, r3
 80021aa:	68fa      	ldr	r2, [r7, #12]
 80021ac:	429a      	cmp	r2, r3
 80021ae:	d8f7      	bhi.n	80021a0 <HAL_Delay+0x28>
  {
  }
}
 80021b0:	bf00      	nop
 80021b2:	bf00      	nop
 80021b4:	3710      	adds	r7, #16
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd80      	pop	{r7, pc}
 80021ba:	bf00      	nop
 80021bc:	2000000c 	.word	0x2000000c

080021c0 <__NVIC_SetPriorityGrouping>:
{
 80021c0:	b480      	push	{r7}
 80021c2:	b085      	sub	sp, #20
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	f003 0307 	and.w	r3, r3, #7
 80021ce:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80021d0:	4b0c      	ldr	r3, [pc, #48]	; (8002204 <__NVIC_SetPriorityGrouping+0x44>)
 80021d2:	68db      	ldr	r3, [r3, #12]
 80021d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021d6:	68ba      	ldr	r2, [r7, #8]
 80021d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80021dc:	4013      	ands	r3, r2
 80021de:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021e4:	68bb      	ldr	r3, [r7, #8]
 80021e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80021e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80021ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80021f2:	4a04      	ldr	r2, [pc, #16]	; (8002204 <__NVIC_SetPriorityGrouping+0x44>)
 80021f4:	68bb      	ldr	r3, [r7, #8]
 80021f6:	60d3      	str	r3, [r2, #12]
}
 80021f8:	bf00      	nop
 80021fa:	3714      	adds	r7, #20
 80021fc:	46bd      	mov	sp, r7
 80021fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002202:	4770      	bx	lr
 8002204:	e000ed00 	.word	0xe000ed00

08002208 <__NVIC_GetPriorityGrouping>:
{
 8002208:	b480      	push	{r7}
 800220a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800220c:	4b04      	ldr	r3, [pc, #16]	; (8002220 <__NVIC_GetPriorityGrouping+0x18>)
 800220e:	68db      	ldr	r3, [r3, #12]
 8002210:	0a1b      	lsrs	r3, r3, #8
 8002212:	f003 0307 	and.w	r3, r3, #7
}
 8002216:	4618      	mov	r0, r3
 8002218:	46bd      	mov	sp, r7
 800221a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221e:	4770      	bx	lr
 8002220:	e000ed00 	.word	0xe000ed00

08002224 <__NVIC_EnableIRQ>:
{
 8002224:	b480      	push	{r7}
 8002226:	b083      	sub	sp, #12
 8002228:	af00      	add	r7, sp, #0
 800222a:	4603      	mov	r3, r0
 800222c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800222e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002232:	2b00      	cmp	r3, #0
 8002234:	db0b      	blt.n	800224e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002236:	79fb      	ldrb	r3, [r7, #7]
 8002238:	f003 021f 	and.w	r2, r3, #31
 800223c:	4907      	ldr	r1, [pc, #28]	; (800225c <__NVIC_EnableIRQ+0x38>)
 800223e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002242:	095b      	lsrs	r3, r3, #5
 8002244:	2001      	movs	r0, #1
 8002246:	fa00 f202 	lsl.w	r2, r0, r2
 800224a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800224e:	bf00      	nop
 8002250:	370c      	adds	r7, #12
 8002252:	46bd      	mov	sp, r7
 8002254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002258:	4770      	bx	lr
 800225a:	bf00      	nop
 800225c:	e000e100 	.word	0xe000e100

08002260 <__NVIC_SetPriority>:
{
 8002260:	b480      	push	{r7}
 8002262:	b083      	sub	sp, #12
 8002264:	af00      	add	r7, sp, #0
 8002266:	4603      	mov	r3, r0
 8002268:	6039      	str	r1, [r7, #0]
 800226a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800226c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002270:	2b00      	cmp	r3, #0
 8002272:	db0a      	blt.n	800228a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	b2da      	uxtb	r2, r3
 8002278:	490c      	ldr	r1, [pc, #48]	; (80022ac <__NVIC_SetPriority+0x4c>)
 800227a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800227e:	0112      	lsls	r2, r2, #4
 8002280:	b2d2      	uxtb	r2, r2
 8002282:	440b      	add	r3, r1
 8002284:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002288:	e00a      	b.n	80022a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	b2da      	uxtb	r2, r3
 800228e:	4908      	ldr	r1, [pc, #32]	; (80022b0 <__NVIC_SetPriority+0x50>)
 8002290:	79fb      	ldrb	r3, [r7, #7]
 8002292:	f003 030f 	and.w	r3, r3, #15
 8002296:	3b04      	subs	r3, #4
 8002298:	0112      	lsls	r2, r2, #4
 800229a:	b2d2      	uxtb	r2, r2
 800229c:	440b      	add	r3, r1
 800229e:	761a      	strb	r2, [r3, #24]
}
 80022a0:	bf00      	nop
 80022a2:	370c      	adds	r7, #12
 80022a4:	46bd      	mov	sp, r7
 80022a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022aa:	4770      	bx	lr
 80022ac:	e000e100 	.word	0xe000e100
 80022b0:	e000ed00 	.word	0xe000ed00

080022b4 <NVIC_EncodePriority>:
{
 80022b4:	b480      	push	{r7}
 80022b6:	b089      	sub	sp, #36	; 0x24
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	60f8      	str	r0, [r7, #12]
 80022bc:	60b9      	str	r1, [r7, #8]
 80022be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	f003 0307 	and.w	r3, r3, #7
 80022c6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022c8:	69fb      	ldr	r3, [r7, #28]
 80022ca:	f1c3 0307 	rsb	r3, r3, #7
 80022ce:	2b04      	cmp	r3, #4
 80022d0:	bf28      	it	cs
 80022d2:	2304      	movcs	r3, #4
 80022d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022d6:	69fb      	ldr	r3, [r7, #28]
 80022d8:	3304      	adds	r3, #4
 80022da:	2b06      	cmp	r3, #6
 80022dc:	d902      	bls.n	80022e4 <NVIC_EncodePriority+0x30>
 80022de:	69fb      	ldr	r3, [r7, #28]
 80022e0:	3b03      	subs	r3, #3
 80022e2:	e000      	b.n	80022e6 <NVIC_EncodePriority+0x32>
 80022e4:	2300      	movs	r3, #0
 80022e6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022e8:	f04f 32ff 	mov.w	r2, #4294967295
 80022ec:	69bb      	ldr	r3, [r7, #24]
 80022ee:	fa02 f303 	lsl.w	r3, r2, r3
 80022f2:	43da      	mvns	r2, r3
 80022f4:	68bb      	ldr	r3, [r7, #8]
 80022f6:	401a      	ands	r2, r3
 80022f8:	697b      	ldr	r3, [r7, #20]
 80022fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022fc:	f04f 31ff 	mov.w	r1, #4294967295
 8002300:	697b      	ldr	r3, [r7, #20]
 8002302:	fa01 f303 	lsl.w	r3, r1, r3
 8002306:	43d9      	mvns	r1, r3
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800230c:	4313      	orrs	r3, r2
}
 800230e:	4618      	mov	r0, r3
 8002310:	3724      	adds	r7, #36	; 0x24
 8002312:	46bd      	mov	sp, r7
 8002314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002318:	4770      	bx	lr

0800231a <HAL_NVIC_SetPriorityGrouping>:
  *                                    0 bit  for subpriority
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
 800231a:	b580      	push	{r7, lr}
 800231c:	b082      	sub	sp, #8
 800231e:	af00      	add	r7, sp, #0
 8002320:	6078      	str	r0, [r7, #4]
{
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
 8002322:	6878      	ldr	r0, [r7, #4]
 8002324:	f7ff ff4c 	bl	80021c0 <__NVIC_SetPriorityGrouping>
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002328:	bf00      	nop
 800232a:	3708      	adds	r7, #8
 800232c:	46bd      	mov	sp, r7
 800232e:	bd80      	pop	{r7, pc}

08002330 <HAL_NVIC_SetPriority>:
  * @param  SubPriority: the subpriority level for the IRQ channel.
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
 8002330:	b580      	push	{r7, lr}
 8002332:	b086      	sub	sp, #24
 8002334:	af00      	add	r7, sp, #0
 8002336:	4603      	mov	r3, r0
 8002338:	60b9      	str	r1, [r7, #8]
 800233a:	607a      	str	r2, [r7, #4]
 800233c:	73fb      	strb	r3, [r7, #15]
{
 800233e:	2300      	movs	r3, #0
 8002340:	617b      	str	r3, [r7, #20]
  uint32_t prioritygroup = 0x00;

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

 8002342:	f7ff ff61 	bl	8002208 <__NVIC_GetPriorityGrouping>
 8002346:	6178      	str	r0, [r7, #20]
  prioritygroup = NVIC_GetPriorityGrouping();

 8002348:	687a      	ldr	r2, [r7, #4]
 800234a:	68b9      	ldr	r1, [r7, #8]
 800234c:	6978      	ldr	r0, [r7, #20]
 800234e:	f7ff ffb1 	bl	80022b4 <NVIC_EncodePriority>
 8002352:	4602      	mov	r2, r0
 8002354:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002358:	4611      	mov	r1, r2
 800235a:	4618      	mov	r0, r3
 800235c:	f7ff ff80 	bl	8002260 <__NVIC_SetPriority>
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002360:	bf00      	nop
 8002362:	3718      	adds	r7, #24
 8002364:	46bd      	mov	sp, r7
 8002366:	bd80      	pop	{r7, pc}

08002368 <HAL_NVIC_EnableIRQ>:
  * @param  IRQn External interrupt number.
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
 8002368:	b580      	push	{r7, lr}
 800236a:	b082      	sub	sp, #8
 800236c:	af00      	add	r7, sp, #0
 800236e:	4603      	mov	r3, r0
 8002370:	71fb      	strb	r3, [r7, #7]
{
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
 8002372:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002376:	4618      	mov	r0, r3
 8002378:	f7ff ff54 	bl	8002224 <__NVIC_EnableIRQ>
  NVIC_EnableIRQ(IRQn);
 800237c:	bf00      	nop
 800237e:	3708      	adds	r7, #8
 8002380:	46bd      	mov	sp, r7
 8002382:	bd80      	pop	{r7, pc}

08002384 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b082      	sub	sp, #8
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d101      	bne.n	8002396 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8002392:	2301      	movs	r3, #1
 8002394:	e0ac      	b.n	80024f0 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	4618      	mov	r0, r3
 800239c:	f000 f8b2 	bl	8002504 <DFSDM_GetChannelFromInstance>
 80023a0:	4603      	mov	r3, r0
 80023a2:	4a55      	ldr	r2, [pc, #340]	; (80024f8 <HAL_DFSDM_ChannelInit+0x174>)
 80023a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d001      	beq.n	80023b0 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 80023ac:	2301      	movs	r3, #1
 80023ae:	e09f      	b.n	80024f0 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 80023b0:	6878      	ldr	r0, [r7, #4]
 80023b2:	f7ff f9f9 	bl	80017a8 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 80023b6:	4b51      	ldr	r3, [pc, #324]	; (80024fc <HAL_DFSDM_ChannelInit+0x178>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	3301      	adds	r3, #1
 80023bc:	4a4f      	ldr	r2, [pc, #316]	; (80024fc <HAL_DFSDM_ChannelInit+0x178>)
 80023be:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 80023c0:	4b4e      	ldr	r3, [pc, #312]	; (80024fc <HAL_DFSDM_ChannelInit+0x178>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	2b01      	cmp	r3, #1
 80023c6:	d125      	bne.n	8002414 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 80023c8:	4b4d      	ldr	r3, [pc, #308]	; (8002500 <HAL_DFSDM_ChannelInit+0x17c>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	4a4c      	ldr	r2, [pc, #304]	; (8002500 <HAL_DFSDM_ChannelInit+0x17c>)
 80023ce:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80023d2:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 80023d4:	4b4a      	ldr	r3, [pc, #296]	; (8002500 <HAL_DFSDM_ChannelInit+0x17c>)
 80023d6:	681a      	ldr	r2, [r3, #0]
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	689b      	ldr	r3, [r3, #8]
 80023dc:	4948      	ldr	r1, [pc, #288]	; (8002500 <HAL_DFSDM_ChannelInit+0x17c>)
 80023de:	4313      	orrs	r3, r2
 80023e0:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 80023e2:	4b47      	ldr	r3, [pc, #284]	; (8002500 <HAL_DFSDM_ChannelInit+0x17c>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	4a46      	ldr	r2, [pc, #280]	; (8002500 <HAL_DFSDM_ChannelInit+0x17c>)
 80023e8:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 80023ec:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	791b      	ldrb	r3, [r3, #4]
 80023f2:	2b01      	cmp	r3, #1
 80023f4:	d108      	bne.n	8002408 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 80023f6:	4b42      	ldr	r3, [pc, #264]	; (8002500 <HAL_DFSDM_ChannelInit+0x17c>)
 80023f8:	681a      	ldr	r2, [r3, #0]
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	68db      	ldr	r3, [r3, #12]
 80023fe:	3b01      	subs	r3, #1
 8002400:	041b      	lsls	r3, r3, #16
 8002402:	493f      	ldr	r1, [pc, #252]	; (8002500 <HAL_DFSDM_ChannelInit+0x17c>)
 8002404:	4313      	orrs	r3, r2
 8002406:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8002408:	4b3d      	ldr	r3, [pc, #244]	; (8002500 <HAL_DFSDM_ChannelInit+0x17c>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a3c      	ldr	r2, [pc, #240]	; (8002500 <HAL_DFSDM_ChannelInit+0x17c>)
 800240e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002412:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	681a      	ldr	r2, [r3, #0]
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 8002422:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	6819      	ldr	r1, [r3, #0]
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8002432:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8002438:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	430a      	orrs	r2, r1
 8002440:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	681a      	ldr	r2, [r3, #0]
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f022 020f 	bic.w	r2, r2, #15
 8002450:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	6819      	ldr	r1, [r3, #0]
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8002460:	431a      	orrs	r2, r3
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	430a      	orrs	r2, r1
 8002468:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	689a      	ldr	r2, [r3, #8]
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8002478:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	6899      	ldr	r1, [r3, #8]
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002488:	3b01      	subs	r3, #1
 800248a:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 800248c:	431a      	orrs	r2, r3
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	430a      	orrs	r2, r1
 8002494:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	685a      	ldr	r2, [r3, #4]
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f002 0207 	and.w	r2, r2, #7
 80024a4:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	6859      	ldr	r1, [r3, #4]
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024b0:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024b6:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 80024b8:	431a      	orrs	r2, r3
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	430a      	orrs	r2, r1
 80024c0:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	681a      	ldr	r2, [r3, #0]
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80024d0:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	2201      	movs	r2, #1
 80024d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	4618      	mov	r0, r3
 80024e0:	f000 f810 	bl	8002504 <DFSDM_GetChannelFromInstance>
 80024e4:	4602      	mov	r2, r0
 80024e6:	4904      	ldr	r1, [pc, #16]	; (80024f8 <HAL_DFSDM_ChannelInit+0x174>)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 80024ee:	2300      	movs	r3, #0
}
 80024f0:	4618      	mov	r0, r3
 80024f2:	3708      	adds	r7, #8
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bd80      	pop	{r7, pc}
 80024f8:	20000814 	.word	0x20000814
 80024fc:	20000810 	.word	0x20000810
 8002500:	40016000 	.word	0x40016000

08002504 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8002504:	b480      	push	{r7}
 8002506:	b085      	sub	sp, #20
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	4a1c      	ldr	r2, [pc, #112]	; (8002580 <DFSDM_GetChannelFromInstance+0x7c>)
 8002510:	4293      	cmp	r3, r2
 8002512:	d102      	bne.n	800251a <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8002514:	2300      	movs	r3, #0
 8002516:	60fb      	str	r3, [r7, #12]
 8002518:	e02b      	b.n	8002572 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	4a19      	ldr	r2, [pc, #100]	; (8002584 <DFSDM_GetChannelFromInstance+0x80>)
 800251e:	4293      	cmp	r3, r2
 8002520:	d102      	bne.n	8002528 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8002522:	2301      	movs	r3, #1
 8002524:	60fb      	str	r3, [r7, #12]
 8002526:	e024      	b.n	8002572 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	4a17      	ldr	r2, [pc, #92]	; (8002588 <DFSDM_GetChannelFromInstance+0x84>)
 800252c:	4293      	cmp	r3, r2
 800252e:	d102      	bne.n	8002536 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8002530:	2302      	movs	r3, #2
 8002532:	60fb      	str	r3, [r7, #12]
 8002534:	e01d      	b.n	8002572 <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	4a14      	ldr	r2, [pc, #80]	; (800258c <DFSDM_GetChannelFromInstance+0x88>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d102      	bne.n	8002544 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 800253e:	2304      	movs	r3, #4
 8002540:	60fb      	str	r3, [r7, #12]
 8002542:	e016      	b.n	8002572 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	4a12      	ldr	r2, [pc, #72]	; (8002590 <DFSDM_GetChannelFromInstance+0x8c>)
 8002548:	4293      	cmp	r3, r2
 800254a:	d102      	bne.n	8002552 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 800254c:	2305      	movs	r3, #5
 800254e:	60fb      	str	r3, [r7, #12]
 8002550:	e00f      	b.n	8002572 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	4a0f      	ldr	r2, [pc, #60]	; (8002594 <DFSDM_GetChannelFromInstance+0x90>)
 8002556:	4293      	cmp	r3, r2
 8002558:	d102      	bne.n	8002560 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 800255a:	2306      	movs	r3, #6
 800255c:	60fb      	str	r3, [r7, #12]
 800255e:	e008      	b.n	8002572 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	4a0d      	ldr	r2, [pc, #52]	; (8002598 <DFSDM_GetChannelFromInstance+0x94>)
 8002564:	4293      	cmp	r3, r2
 8002566:	d102      	bne.n	800256e <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8002568:	2307      	movs	r3, #7
 800256a:	60fb      	str	r3, [r7, #12]
 800256c:	e001      	b.n	8002572 <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 800256e:	2303      	movs	r3, #3
 8002570:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8002572:	68fb      	ldr	r3, [r7, #12]
}
 8002574:	4618      	mov	r0, r3
 8002576:	3714      	adds	r7, #20
 8002578:	46bd      	mov	sp, r7
 800257a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257e:	4770      	bx	lr
 8002580:	40016000 	.word	0x40016000
 8002584:	40016020 	.word	0x40016020
 8002588:	40016040 	.word	0x40016040
 800258c:	40016080 	.word	0x40016080
 8002590:	400160a0 	.word	0x400160a0
 8002594:	400160c0 	.word	0x400160c0
 8002598:	400160e0 	.word	0x400160e0

0800259c <HAL_DMA_Abort>:
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;
 800259c:	b480      	push	{r7}
 800259e:	b085      	sub	sp, #20
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]

 80025a4:	2300      	movs	r3, #0
 80025a6:	73fb      	strb	r3, [r7, #15]
  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
  {
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80025ae:	b2db      	uxtb	r3, r3
 80025b0:	2b02      	cmp	r3, #2
 80025b2:	d008      	beq.n	80025c6 <HAL_DMA_Abort+0x2a>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;

 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2204      	movs	r2, #4
 80025b8:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);

 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2200      	movs	r2, #0
 80025be:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    return HAL_ERROR;
  }
 80025c2:	2301      	movs	r3, #1
 80025c4:	e022      	b.n	800260c <HAL_DMA_Abort+0x70>
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));

 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	681a      	ldr	r2, [r3, #0]
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f022 020e 	bic.w	r2, r2, #14
 80025d4:	601a      	str	r2, [r3, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);

 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	681a      	ldr	r2, [r3, #0]
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f022 0201 	bic.w	r2, r2, #1
 80025e4:	601a      	str	r2, [r3, #0]
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));

 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025ea:	f003 021c 	and.w	r2, r3, #28
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f2:	2101      	movs	r1, #1
 80025f4:	fa01 f202 	lsl.w	r2, r1, r2
 80025f8:	605a      	str	r2, [r3, #4]

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;

 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	2201      	movs	r2, #1
 80025fe:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);

 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2200      	movs	r2, #0
 8002606:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    return status;
  }
 800260a:	7bfb      	ldrb	r3, [r7, #15]
}

 800260c:	4618      	mov	r0, r3
 800260e:	3714      	adds	r7, #20
 8002610:	46bd      	mov	sp, r7
 8002612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002616:	4770      	bx	lr

08002618 <HAL_DMA_Abort_IT>:
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;
 8002618:	b580      	push	{r7, lr}
 800261a:	b084      	sub	sp, #16
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]

 8002620:	2300      	movs	r3, #0
 8002622:	73fb      	strb	r3, [r7, #15]
  if(HAL_DMA_STATE_BUSY != hdma->State)
  {
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800262a:	b2db      	uxtb	r3, r3
 800262c:	2b02      	cmp	r3, #2
 800262e:	d005      	beq.n	800263c <HAL_DMA_Abort_IT+0x24>
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;

 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2204      	movs	r2, #4
 8002634:	63da      	str	r2, [r3, #60]	; 0x3c
    status = HAL_ERROR;
  }
 8002636:	2301      	movs	r3, #1
 8002638:	73fb      	strb	r3, [r7, #15]
 800263a:	e029      	b.n	8002690 <HAL_DMA_Abort_IT+0x78>
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));

 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	681a      	ldr	r2, [r3, #0]
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f022 020e 	bic.w	r2, r2, #14
 800264a:	601a      	str	r2, [r3, #0]
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);

 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	681a      	ldr	r2, [r3, #0]
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f022 0201 	bic.w	r2, r2, #1
 800265a:	601a      	str	r2, [r3, #0]
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#endif /* DMAMUX1 */
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002660:	f003 021c 	and.w	r2, r3, #28
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002668:	2101      	movs	r1, #1
 800266a:	fa01 f202 	lsl.w	r2, r1, r2
 800266e:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;

 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2201      	movs	r2, #1
 8002674:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);

 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2200      	movs	r2, #0
 800267c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
    {
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002684:	2b00      	cmp	r3, #0
 8002686:	d003      	beq.n	8002690 <HAL_DMA_Abort_IT+0x78>
      hdma->XferAbortCallback(hdma);
    }
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800268c:	6878      	ldr	r0, [r7, #4]
 800268e:	4798      	blx	r3
  }
  return status;
}
 8002690:	7bfb      	ldrb	r3, [r7, #15]

 8002692:	4618      	mov	r0, r3
 8002694:	3710      	adds	r7, #16
 8002696:	46bd      	mov	sp, r7
 8002698:	bd80      	pop	{r7, pc}
	...

0800269c <HAL_GPIO_Init>:
 ===============================================================================

@endverbatim
  * @{
  */

 800269c:	b480      	push	{r7}
 800269e:	b087      	sub	sp, #28
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
 80026a4:	6039      	str	r1, [r7, #0]
/**
 80026a6:	2300      	movs	r3, #0
 80026a8:	617b      	str	r3, [r7, #20]
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
  uint32_t position = 0x00u;
  uint32_t iocurrent;
 80026aa:	e17f      	b.n	80029ac <HAL_GPIO_Init+0x310>
  uint32_t temp;

  /* Check the parameters */
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	681a      	ldr	r2, [r3, #0]
 80026b0:	2101      	movs	r1, #1
 80026b2:	697b      	ldr	r3, [r7, #20]
 80026b4:	fa01 f303 	lsl.w	r3, r1, r3
 80026b8:	4013      	ands	r3, r2
 80026ba:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	f000 8171 	beq.w	80029a6 <HAL_GPIO_Init+0x30a>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	f003 0303 	and.w	r3, r3, #3
 80026cc:	2b01      	cmp	r3, #1
 80026ce:	d005      	beq.n	80026dc <HAL_GPIO_Init+0x40>
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	f003 0303 	and.w	r3, r3, #3
 80026d8:	2b02      	cmp	r3, #2
 80026da:	d130      	bne.n	800273e <HAL_GPIO_Init+0xa2>
  while (((GPIO_Init->Pin) >> position) != 0x00u)
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);

    if (iocurrent != 0x00u)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	689b      	ldr	r3, [r3, #8]
 80026e0:	613b      	str	r3, [r7, #16]
    {
 80026e2:	697b      	ldr	r3, [r7, #20]
 80026e4:	005b      	lsls	r3, r3, #1
 80026e6:	2203      	movs	r2, #3
 80026e8:	fa02 f303 	lsl.w	r3, r2, r3
 80026ec:	43db      	mvns	r3, r3
 80026ee:	693a      	ldr	r2, [r7, #16]
 80026f0:	4013      	ands	r3, r2
 80026f2:	613b      	str	r3, [r7, #16]
      /*--------------------- GPIO Mode Configuration ------------------------*/
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	68da      	ldr	r2, [r3, #12]
 80026f8:	697b      	ldr	r3, [r7, #20]
 80026fa:	005b      	lsls	r3, r3, #1
 80026fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002700:	693a      	ldr	r2, [r7, #16]
 8002702:	4313      	orrs	r3, r2
 8002704:	613b      	str	r3, [r7, #16]
      /* In case of Output or Alternate function mode selection */
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	693a      	ldr	r2, [r7, #16]
 800270a:	609a      	str	r2, [r3, #8]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
      {
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	613b      	str	r3, [r7, #16]
        /* Check the Speed parameter */
 8002712:	2201      	movs	r2, #1
 8002714:	697b      	ldr	r3, [r7, #20]
 8002716:	fa02 f303 	lsl.w	r3, r2, r3
 800271a:	43db      	mvns	r3, r3
 800271c:	693a      	ldr	r2, [r7, #16]
 800271e:	4013      	ands	r3, r2
 8002720:	613b      	str	r3, [r7, #16]
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	685b      	ldr	r3, [r3, #4]
 8002726:	091b      	lsrs	r3, r3, #4
 8002728:	f003 0201 	and.w	r2, r3, #1
 800272c:	697b      	ldr	r3, [r7, #20]
 800272e:	fa02 f303 	lsl.w	r3, r2, r3
 8002732:	693a      	ldr	r2, [r7, #16]
 8002734:	4313      	orrs	r3, r2
 8002736:	613b      	str	r3, [r7, #16]
        /* Configure the IO Speed */
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	693a      	ldr	r2, [r7, #16]
 800273c:	605a      	str	r2, [r3, #4]
        temp = GPIOx->OSPEEDR;
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
        temp |= (GPIO_Init->Speed << (position * 2u));
        GPIOx->OSPEEDR = temp;

        /* Configure the IO Output Type */
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	f003 0303 	and.w	r3, r3, #3
 8002746:	2b03      	cmp	r3, #3
 8002748:	d118      	bne.n	800277c <HAL_GPIO_Init+0xe0>
        temp = GPIOx->OTYPER;
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800274e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002750:	2201      	movs	r2, #1
 8002752:	697b      	ldr	r3, [r7, #20]
 8002754:	fa02 f303 	lsl.w	r3, r2, r3
 8002758:	43db      	mvns	r3, r3
 800275a:	693a      	ldr	r2, [r7, #16]
 800275c:	4013      	ands	r3, r2
 800275e:	613b      	str	r3, [r7, #16]
      }
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	08db      	lsrs	r3, r3, #3
 8002766:	f003 0201 	and.w	r2, r3, #1
 800276a:	697b      	ldr	r3, [r7, #20]
 800276c:	fa02 f303 	lsl.w	r3, r2, r3
 8002770:	693a      	ldr	r2, [r7, #16]
 8002772:	4313      	orrs	r3, r2
 8002774:	613b      	str	r3, [r7, #16]

 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	693a      	ldr	r2, [r7, #16]
 800277a:	62da      	str	r2, [r3, #44]	; 0x2c
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
      {
        /* Configure the IO Output Type */
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	f003 0303 	and.w	r3, r3, #3
 8002784:	2b03      	cmp	r3, #3
 8002786:	d017      	beq.n	80027b8 <HAL_GPIO_Init+0x11c>
        temp = GPIOx->ASCR;
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
        GPIOx->ASCR = temp;
      }
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	68db      	ldr	r3, [r3, #12]
 800278c:	613b      	str	r3, [r7, #16]

 800278e:	697b      	ldr	r3, [r7, #20]
 8002790:	005b      	lsls	r3, r3, #1
 8002792:	2203      	movs	r2, #3
 8002794:	fa02 f303 	lsl.w	r3, r2, r3
 8002798:	43db      	mvns	r3, r3
 800279a:	693a      	ldr	r2, [r7, #16]
 800279c:	4013      	ands	r3, r2
 800279e:	613b      	str	r3, [r7, #16]
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	689a      	ldr	r2, [r3, #8]
 80027a4:	697b      	ldr	r3, [r7, #20]
 80027a6:	005b      	lsls	r3, r3, #1
 80027a8:	fa02 f303 	lsl.w	r3, r2, r3
 80027ac:	693a      	ldr	r2, [r7, #16]
 80027ae:	4313      	orrs	r3, r2
 80027b0:	613b      	str	r3, [r7, #16]

 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	693a      	ldr	r2, [r7, #16]
 80027b6:	60da      	str	r2, [r3, #12]
      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	f003 0303 	and.w	r3, r3, #3
 80027c0:	2b02      	cmp	r3, #2
 80027c2:	d123      	bne.n	800280c <HAL_GPIO_Init+0x170>

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
      {
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 80027c4:	697b      	ldr	r3, [r7, #20]
 80027c6:	08da      	lsrs	r2, r3, #3
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	3208      	adds	r2, #8
 80027cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027d0:	613b      	str	r3, [r7, #16]
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 80027d2:	697b      	ldr	r3, [r7, #20]
 80027d4:	f003 0307 	and.w	r3, r3, #7
 80027d8:	009b      	lsls	r3, r3, #2
 80027da:	220f      	movs	r2, #15
 80027dc:	fa02 f303 	lsl.w	r3, r2, r3
 80027e0:	43db      	mvns	r3, r3
 80027e2:	693a      	ldr	r2, [r7, #16]
 80027e4:	4013      	ands	r3, r2
 80027e6:	613b      	str	r3, [r7, #16]

 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	691a      	ldr	r2, [r3, #16]
 80027ec:	697b      	ldr	r3, [r7, #20]
 80027ee:	f003 0307 	and.w	r3, r3, #7
 80027f2:	009b      	lsls	r3, r3, #2
 80027f4:	fa02 f303 	lsl.w	r3, r2, r3
 80027f8:	693a      	ldr	r2, [r7, #16]
 80027fa:	4313      	orrs	r3, r2
 80027fc:	613b      	str	r3, [r7, #16]
        /* Configure Alternate function mapped with the current IO */
 80027fe:	697b      	ldr	r3, [r7, #20]
 8002800:	08da      	lsrs	r2, r3, #3
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	3208      	adds	r2, #8
 8002806:	6939      	ldr	r1, [r7, #16]
 8002808:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        temp = GPIOx->AFR[position >> 3u];
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
        GPIOx->AFR[position >> 3u] = temp;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	613b      	str	r3, [r7, #16]
      }
 8002812:	697b      	ldr	r3, [r7, #20]
 8002814:	005b      	lsls	r3, r3, #1
 8002816:	2203      	movs	r2, #3
 8002818:	fa02 f303 	lsl.w	r3, r2, r3
 800281c:	43db      	mvns	r3, r3
 800281e:	693a      	ldr	r2, [r7, #16]
 8002820:	4013      	ands	r3, r2
 8002822:	613b      	str	r3, [r7, #16]

 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	f003 0203 	and.w	r2, r3, #3
 800282c:	697b      	ldr	r3, [r7, #20]
 800282e:	005b      	lsls	r3, r3, #1
 8002830:	fa02 f303 	lsl.w	r3, r2, r3
 8002834:	693a      	ldr	r2, [r7, #16]
 8002836:	4313      	orrs	r3, r2
 8002838:	613b      	str	r3, [r7, #16]
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	693a      	ldr	r2, [r7, #16]
 800283e:	601a      	str	r2, [r3, #0]
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
      GPIOx->MODER = temp;
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002848:	2b00      	cmp	r3, #0
 800284a:	f000 80ac 	beq.w	80029a6 <HAL_GPIO_Init+0x30a>

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
 800284e:	4b5f      	ldr	r3, [pc, #380]	; (80029cc <HAL_GPIO_Init+0x330>)
 8002850:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002852:	4a5e      	ldr	r2, [pc, #376]	; (80029cc <HAL_GPIO_Init+0x330>)
 8002854:	f043 0301 	orr.w	r3, r3, #1
 8002858:	6613      	str	r3, [r2, #96]	; 0x60
 800285a:	4b5c      	ldr	r3, [pc, #368]	; (80029cc <HAL_GPIO_Init+0x330>)
 800285c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800285e:	f003 0301 	and.w	r3, r3, #1
 8002862:	60bb      	str	r3, [r7, #8]
 8002864:	68bb      	ldr	r3, [r7, #8]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
 8002866:	4a5a      	ldr	r2, [pc, #360]	; (80029d0 <HAL_GPIO_Init+0x334>)
 8002868:	697b      	ldr	r3, [r7, #20]
 800286a:	089b      	lsrs	r3, r3, #2
 800286c:	3302      	adds	r3, #2
 800286e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002872:	613b      	str	r3, [r7, #16]
        /* Enable SYSCFG Clock */
 8002874:	697b      	ldr	r3, [r7, #20]
 8002876:	f003 0303 	and.w	r3, r3, #3
 800287a:	009b      	lsls	r3, r3, #2
 800287c:	220f      	movs	r2, #15
 800287e:	fa02 f303 	lsl.w	r3, r2, r3
 8002882:	43db      	mvns	r3, r3
 8002884:	693a      	ldr	r2, [r7, #16]
 8002886:	4013      	ands	r3, r2
 8002888:	613b      	str	r3, [r7, #16]
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002890:	d025      	beq.n	80028de <HAL_GPIO_Init+0x242>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	4a4f      	ldr	r2, [pc, #316]	; (80029d4 <HAL_GPIO_Init+0x338>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d01f      	beq.n	80028da <HAL_GPIO_Init+0x23e>
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	4a4e      	ldr	r2, [pc, #312]	; (80029d8 <HAL_GPIO_Init+0x33c>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d019      	beq.n	80028d6 <HAL_GPIO_Init+0x23a>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	4a4d      	ldr	r2, [pc, #308]	; (80029dc <HAL_GPIO_Init+0x340>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d013      	beq.n	80028d2 <HAL_GPIO_Init+0x236>
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	4a4c      	ldr	r2, [pc, #304]	; (80029e0 <HAL_GPIO_Init+0x344>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d00d      	beq.n	80028ce <HAL_GPIO_Init+0x232>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	4a4b      	ldr	r2, [pc, #300]	; (80029e4 <HAL_GPIO_Init+0x348>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d007      	beq.n	80028ca <HAL_GPIO_Init+0x22e>
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	4a4a      	ldr	r2, [pc, #296]	; (80029e8 <HAL_GPIO_Init+0x34c>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d101      	bne.n	80028c6 <HAL_GPIO_Init+0x22a>
 80028c2:	2306      	movs	r3, #6
 80028c4:	e00c      	b.n	80028e0 <HAL_GPIO_Init+0x244>
 80028c6:	2307      	movs	r3, #7
 80028c8:	e00a      	b.n	80028e0 <HAL_GPIO_Init+0x244>
 80028ca:	2305      	movs	r3, #5
 80028cc:	e008      	b.n	80028e0 <HAL_GPIO_Init+0x244>
 80028ce:	2304      	movs	r3, #4
 80028d0:	e006      	b.n	80028e0 <HAL_GPIO_Init+0x244>
 80028d2:	2303      	movs	r3, #3
 80028d4:	e004      	b.n	80028e0 <HAL_GPIO_Init+0x244>
 80028d6:	2302      	movs	r3, #2
 80028d8:	e002      	b.n	80028e0 <HAL_GPIO_Init+0x244>
 80028da:	2301      	movs	r3, #1
 80028dc:	e000      	b.n	80028e0 <HAL_GPIO_Init+0x244>
 80028de:	2300      	movs	r3, #0
 80028e0:	697a      	ldr	r2, [r7, #20]
 80028e2:	f002 0203 	and.w	r2, r2, #3
 80028e6:	0092      	lsls	r2, r2, #2
 80028e8:	4093      	lsls	r3, r2
 80028ea:	693a      	ldr	r2, [r7, #16]
 80028ec:	4313      	orrs	r3, r2
 80028ee:	613b      	str	r3, [r7, #16]

 80028f0:	4937      	ldr	r1, [pc, #220]	; (80029d0 <HAL_GPIO_Init+0x334>)
 80028f2:	697b      	ldr	r3, [r7, #20]
 80028f4:	089b      	lsrs	r3, r3, #2
 80028f6:	3302      	adds	r3, #2
 80028f8:	693a      	ldr	r2, [r7, #16]
 80028fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        temp = SYSCFG->EXTICR[position >> 2u];
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80028fe:	4b3b      	ldr	r3, [pc, #236]	; (80029ec <HAL_GPIO_Init+0x350>)
 8002900:	689b      	ldr	r3, [r3, #8]
 8002902:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	43db      	mvns	r3, r3
 8002908:	693a      	ldr	r2, [r7, #16]
 800290a:	4013      	ands	r3, r2
 800290c:	613b      	str	r3, [r7, #16]

 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002916:	2b00      	cmp	r3, #0
 8002918:	d003      	beq.n	8002922 <HAL_GPIO_Init+0x286>
        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800291a:	693a      	ldr	r2, [r7, #16]
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	4313      	orrs	r3, r2
 8002920:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002922:	4a32      	ldr	r2, [pc, #200]	; (80029ec <HAL_GPIO_Init+0x350>)
 8002924:	693b      	ldr	r3, [r7, #16]
 8002926:	6093      	str	r3, [r2, #8]
        {
          temp |= iocurrent;
 8002928:	4b30      	ldr	r3, [pc, #192]	; (80029ec <HAL_GPIO_Init+0x350>)
 800292a:	68db      	ldr	r3, [r3, #12]
 800292c:	613b      	str	r3, [r7, #16]
        }
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	43db      	mvns	r3, r3
 8002932:	693a      	ldr	r2, [r7, #16]
 8002934:	4013      	ands	r3, r2
 8002936:	613b      	str	r3, [r7, #16]
        EXTI->IMR1 = temp;
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002940:	2b00      	cmp	r3, #0
 8002942:	d003      	beq.n	800294c <HAL_GPIO_Init+0x2b0>

        temp = EXTI->EMR1;
 8002944:	693a      	ldr	r2, [r7, #16]
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	4313      	orrs	r3, r2
 800294a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800294c:	4a27      	ldr	r2, [pc, #156]	; (80029ec <HAL_GPIO_Init+0x350>)
 800294e:	693b      	ldr	r3, [r7, #16]
 8002950:	60d3      	str	r3, [r2, #12]
        {
          temp |= iocurrent;
        }
 8002952:	4b26      	ldr	r3, [pc, #152]	; (80029ec <HAL_GPIO_Init+0x350>)
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	613b      	str	r3, [r7, #16]
        EXTI->EMR1 = temp;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	43db      	mvns	r3, r3
 800295c:	693a      	ldr	r2, [r7, #16]
 800295e:	4013      	ands	r3, r2
 8002960:	613b      	str	r3, [r7, #16]

 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	685b      	ldr	r3, [r3, #4]
 8002966:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800296a:	2b00      	cmp	r3, #0
 800296c:	d003      	beq.n	8002976 <HAL_GPIO_Init+0x2da>
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800296e:	693a      	ldr	r2, [r7, #16]
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	4313      	orrs	r3, r2
 8002974:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002976:	4a1d      	ldr	r2, [pc, #116]	; (80029ec <HAL_GPIO_Init+0x350>)
 8002978:	693b      	ldr	r3, [r7, #16]
 800297a:	6053      	str	r3, [r2, #4]
        {
          temp |= iocurrent;
 800297c:	4b1b      	ldr	r3, [pc, #108]	; (80029ec <HAL_GPIO_Init+0x350>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	613b      	str	r3, [r7, #16]
        }
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	43db      	mvns	r3, r3
 8002986:	693a      	ldr	r2, [r7, #16]
 8002988:	4013      	ands	r3, r2
 800298a:	613b      	str	r3, [r7, #16]
        EXTI->RTSR1 = temp;
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002994:	2b00      	cmp	r3, #0
 8002996:	d003      	beq.n	80029a0 <HAL_GPIO_Init+0x304>

        temp = EXTI->FTSR1;
 8002998:	693a      	ldr	r2, [r7, #16]
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	4313      	orrs	r3, r2
 800299e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80029a0:	4a12      	ldr	r2, [pc, #72]	; (80029ec <HAL_GPIO_Init+0x350>)
 80029a2:	693b      	ldr	r3, [r7, #16]
 80029a4:	6013      	str	r3, [r2, #0]
        {
          temp |= iocurrent;
        }
        EXTI->FTSR1 = temp;
 80029a6:	697b      	ldr	r3, [r7, #20]
 80029a8:	3301      	adds	r3, #1
 80029aa:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent;
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	681a      	ldr	r2, [r3, #0]
 80029b0:	697b      	ldr	r3, [r7, #20]
 80029b2:	fa22 f303 	lsr.w	r3, r2, r3
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	f47f ae78 	bne.w	80026ac <HAL_GPIO_Init+0x10>
      }
    }
 80029bc:	bf00      	nop
 80029be:	bf00      	nop
 80029c0:	371c      	adds	r7, #28
 80029c2:	46bd      	mov	sp, r7
 80029c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c8:	4770      	bx	lr
 80029ca:	bf00      	nop
 80029cc:	40021000 	.word	0x40021000
 80029d0:	40010000 	.word	0x40010000
 80029d4:	48000400 	.word	0x48000400
 80029d8:	48000800 	.word	0x48000800
 80029dc:	48000c00 	.word	0x48000c00
 80029e0:	48001000 	.word	0x48001000
 80029e4:	48001400 	.word	0x48001400
 80029e8:	48001800 	.word	0x48001800
 80029ec:	40010400 	.word	0x40010400

080029f0 <HAL_GPIO_DeInit>:

/**
  * @brief  De-initialize the GPIOx peripheral registers to their default reset values.
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
 80029f0:	b480      	push	{r7}
 80029f2:	b087      	sub	sp, #28
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
 80029f8:	6039      	str	r1, [r7, #0]
  * @retval None
 80029fa:	2300      	movs	r3, #0
 80029fc:	617b      	str	r3, [r7, #20]
  uint32_t position = 0x00u;
  uint32_t iocurrent;
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 80029fe:	e0cd      	b.n	8002b9c <HAL_GPIO_DeInit+0x1ac>
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
 8002a00:	2201      	movs	r2, #1
 8002a02:	697b      	ldr	r3, [r7, #20]
 8002a04:	fa02 f303 	lsl.w	r3, r2, r3
 8002a08:	683a      	ldr	r2, [r7, #0]
 8002a0a:	4013      	ands	r3, r2
 8002a0c:	613b      	str	r3, [r7, #16]
  while ((GPIO_Pin >> position) != 0x00u)
  {
 8002a0e:	693b      	ldr	r3, [r7, #16]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	f000 80c0 	beq.w	8002b96 <HAL_GPIO_DeInit+0x1a6>
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);

    if (iocurrent != 0x00u)
    {
 8002a16:	4a68      	ldr	r2, [pc, #416]	; (8002bb8 <HAL_GPIO_DeInit+0x1c8>)
 8002a18:	697b      	ldr	r3, [r7, #20]
 8002a1a:	089b      	lsrs	r3, r3, #2
 8002a1c:	3302      	adds	r3, #2
 8002a1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a22:	60fb      	str	r3, [r7, #12]
      /*------------------------- EXTI Mode Configuration --------------------*/
 8002a24:	697b      	ldr	r3, [r7, #20]
 8002a26:	f003 0303 	and.w	r3, r3, #3
 8002a2a:	009b      	lsls	r3, r3, #2
 8002a2c:	220f      	movs	r2, #15
 8002a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a32:	68fa      	ldr	r2, [r7, #12]
 8002a34:	4013      	ands	r3, r2
 8002a36:	60fb      	str	r3, [r7, #12]
      /* Clear the External Interrupt or Event for the current IO */
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002a3e:	d025      	beq.n	8002a8c <HAL_GPIO_DeInit+0x9c>
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	4a5e      	ldr	r2, [pc, #376]	; (8002bbc <HAL_GPIO_DeInit+0x1cc>)
 8002a44:	4293      	cmp	r3, r2
 8002a46:	d01f      	beq.n	8002a88 <HAL_GPIO_DeInit+0x98>
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	4a5d      	ldr	r2, [pc, #372]	; (8002bc0 <HAL_GPIO_DeInit+0x1d0>)
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	d019      	beq.n	8002a84 <HAL_GPIO_DeInit+0x94>
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	4a5c      	ldr	r2, [pc, #368]	; (8002bc4 <HAL_GPIO_DeInit+0x1d4>)
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d013      	beq.n	8002a80 <HAL_GPIO_DeInit+0x90>
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	4a5b      	ldr	r2, [pc, #364]	; (8002bc8 <HAL_GPIO_DeInit+0x1d8>)
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d00d      	beq.n	8002a7c <HAL_GPIO_DeInit+0x8c>
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	4a5a      	ldr	r2, [pc, #360]	; (8002bcc <HAL_GPIO_DeInit+0x1dc>)
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d007      	beq.n	8002a78 <HAL_GPIO_DeInit+0x88>
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	4a59      	ldr	r2, [pc, #356]	; (8002bd0 <HAL_GPIO_DeInit+0x1e0>)
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d101      	bne.n	8002a74 <HAL_GPIO_DeInit+0x84>
 8002a70:	2306      	movs	r3, #6
 8002a72:	e00c      	b.n	8002a8e <HAL_GPIO_DeInit+0x9e>
 8002a74:	2307      	movs	r3, #7
 8002a76:	e00a      	b.n	8002a8e <HAL_GPIO_DeInit+0x9e>
 8002a78:	2305      	movs	r3, #5
 8002a7a:	e008      	b.n	8002a8e <HAL_GPIO_DeInit+0x9e>
 8002a7c:	2304      	movs	r3, #4
 8002a7e:	e006      	b.n	8002a8e <HAL_GPIO_DeInit+0x9e>
 8002a80:	2303      	movs	r3, #3
 8002a82:	e004      	b.n	8002a8e <HAL_GPIO_DeInit+0x9e>
 8002a84:	2302      	movs	r3, #2
 8002a86:	e002      	b.n	8002a8e <HAL_GPIO_DeInit+0x9e>
 8002a88:	2301      	movs	r3, #1
 8002a8a:	e000      	b.n	8002a8e <HAL_GPIO_DeInit+0x9e>
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	697a      	ldr	r2, [r7, #20]
 8002a90:	f002 0203 	and.w	r2, r2, #3
 8002a94:	0092      	lsls	r2, r2, #2
 8002a96:	4093      	lsls	r3, r2
 8002a98:	68fa      	ldr	r2, [r7, #12]
 8002a9a:	429a      	cmp	r2, r3
 8002a9c:	d132      	bne.n	8002b04 <HAL_GPIO_DeInit+0x114>

      tmp = SYSCFG->EXTICR[position >> 2u];
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8002a9e:	4b4d      	ldr	r3, [pc, #308]	; (8002bd4 <HAL_GPIO_DeInit+0x1e4>)
 8002aa0:	681a      	ldr	r2, [r3, #0]
 8002aa2:	693b      	ldr	r3, [r7, #16]
 8002aa4:	43db      	mvns	r3, r3
 8002aa6:	494b      	ldr	r1, [pc, #300]	; (8002bd4 <HAL_GPIO_DeInit+0x1e4>)
 8002aa8:	4013      	ands	r3, r2
 8002aaa:	600b      	str	r3, [r1, #0]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8002aac:	4b49      	ldr	r3, [pc, #292]	; (8002bd4 <HAL_GPIO_DeInit+0x1e4>)
 8002aae:	685a      	ldr	r2, [r3, #4]
 8002ab0:	693b      	ldr	r3, [r7, #16]
 8002ab2:	43db      	mvns	r3, r3
 8002ab4:	4947      	ldr	r1, [pc, #284]	; (8002bd4 <HAL_GPIO_DeInit+0x1e4>)
 8002ab6:	4013      	ands	r3, r2
 8002ab8:	604b      	str	r3, [r1, #4]
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8002aba:	4b46      	ldr	r3, [pc, #280]	; (8002bd4 <HAL_GPIO_DeInit+0x1e4>)
 8002abc:	68da      	ldr	r2, [r3, #12]
 8002abe:	693b      	ldr	r3, [r7, #16]
 8002ac0:	43db      	mvns	r3, r3
 8002ac2:	4944      	ldr	r1, [pc, #272]	; (8002bd4 <HAL_GPIO_DeInit+0x1e4>)
 8002ac4:	4013      	ands	r3, r2
 8002ac6:	60cb      	str	r3, [r1, #12]
        EXTI->EMR1 &= ~(iocurrent);
 8002ac8:	4b42      	ldr	r3, [pc, #264]	; (8002bd4 <HAL_GPIO_DeInit+0x1e4>)
 8002aca:	689a      	ldr	r2, [r3, #8]
 8002acc:	693b      	ldr	r3, [r7, #16]
 8002ace:	43db      	mvns	r3, r3
 8002ad0:	4940      	ldr	r1, [pc, #256]	; (8002bd4 <HAL_GPIO_DeInit+0x1e4>)
 8002ad2:	4013      	ands	r3, r2
 8002ad4:	608b      	str	r3, [r1, #8]

        /* Clear Rising Falling edge configuration */
 8002ad6:	697b      	ldr	r3, [r7, #20]
 8002ad8:	f003 0303 	and.w	r3, r3, #3
 8002adc:	009b      	lsls	r3, r3, #2
 8002ade:	220f      	movs	r2, #15
 8002ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae4:	60fb      	str	r3, [r7, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8002ae6:	4a34      	ldr	r2, [pc, #208]	; (8002bb8 <HAL_GPIO_DeInit+0x1c8>)
 8002ae8:	697b      	ldr	r3, [r7, #20]
 8002aea:	089b      	lsrs	r3, r3, #2
 8002aec:	3302      	adds	r3, #2
 8002aee:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	43da      	mvns	r2, r3
 8002af6:	4830      	ldr	r0, [pc, #192]	; (8002bb8 <HAL_GPIO_DeInit+0x1c8>)
 8002af8:	697b      	ldr	r3, [r7, #20]
 8002afa:	089b      	lsrs	r3, r3, #2
 8002afc:	400a      	ands	r2, r1
 8002afe:	3302      	adds	r3, #2
 8002b00:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
        EXTI->FTSR1 &= ~(iocurrent);

        tmp = 0x0FuL << (4u * (position & 0x03u));
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
      }
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681a      	ldr	r2, [r3, #0]
 8002b08:	697b      	ldr	r3, [r7, #20]
 8002b0a:	005b      	lsls	r3, r3, #1
 8002b0c:	2103      	movs	r1, #3
 8002b0e:	fa01 f303 	lsl.w	r3, r1, r3
 8002b12:	431a      	orrs	r2, r3
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	601a      	str	r2, [r3, #0]

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
 8002b18:	697b      	ldr	r3, [r7, #20]
 8002b1a:	08da      	lsrs	r2, r3, #3
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	3208      	adds	r2, #8
 8002b20:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002b24:	697b      	ldr	r3, [r7, #20]
 8002b26:	f003 0307 	and.w	r3, r3, #7
 8002b2a:	009b      	lsls	r3, r3, #2
 8002b2c:	220f      	movs	r2, #15
 8002b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b32:	43db      	mvns	r3, r3
 8002b34:	697a      	ldr	r2, [r7, #20]
 8002b36:	08d2      	lsrs	r2, r2, #3
 8002b38:	4019      	ands	r1, r3
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	3208      	adds	r2, #8
 8002b3e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));

      /* Configure the default Alternate Function in current IO */
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	689a      	ldr	r2, [r3, #8]
 8002b46:	697b      	ldr	r3, [r7, #20]
 8002b48:	005b      	lsls	r3, r3, #1
 8002b4a:	2103      	movs	r1, #3
 8002b4c:	fa01 f303 	lsl.w	r3, r1, r3
 8002b50:	43db      	mvns	r3, r3
 8002b52:	401a      	ands	r2, r3
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	609a      	str	r2, [r3, #8]
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;

      /* Configure the default value for IO Speed */
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	685a      	ldr	r2, [r3, #4]
 8002b5c:	2101      	movs	r1, #1
 8002b5e:	697b      	ldr	r3, [r7, #20]
 8002b60:	fa01 f303 	lsl.w	r3, r1, r3
 8002b64:	43db      	mvns	r3, r3
 8002b66:	401a      	ands	r2, r3
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	605a      	str	r2, [r3, #4]
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));

      /* Configure the default value IO Output Type */
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	68da      	ldr	r2, [r3, #12]
 8002b70:	697b      	ldr	r3, [r7, #20]
 8002b72:	005b      	lsls	r3, r3, #1
 8002b74:	2103      	movs	r1, #3
 8002b76:	fa01 f303 	lsl.w	r3, r1, r3
 8002b7a:	43db      	mvns	r3, r3
 8002b7c:	401a      	ands	r2, r3
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	60da      	str	r2, [r3, #12]
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b86:	2101      	movs	r1, #1
 8002b88:	697b      	ldr	r3, [r7, #20]
 8002b8a:	fa01 f303 	lsl.w	r3, r1, r3
 8002b8e:	43db      	mvns	r3, r3
 8002b90:	401a      	ands	r2, r3
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 8002b96:	697b      	ldr	r3, [r7, #20]
 8002b98:	3301      	adds	r3, #1
 8002b9a:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8002b9c:	683a      	ldr	r2, [r7, #0]
 8002b9e:	697b      	ldr	r3, [r7, #20]
 8002ba0:	fa22 f303 	lsr.w	r3, r2, r3
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	f47f af2b 	bne.w	8002a00 <HAL_GPIO_DeInit+0x10>
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }
 8002baa:	bf00      	nop
 8002bac:	bf00      	nop
 8002bae:	371c      	adds	r7, #28
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb6:	4770      	bx	lr
 8002bb8:	40010000 	.word	0x40010000
 8002bbc:	48000400 	.word	0x48000400
 8002bc0:	48000800 	.word	0x48000800
 8002bc4:	48000c00 	.word	0x48000c00
 8002bc8:	48001000 	.word	0x48001000
 8002bcc:	48001400 	.word	0x48001400
 8002bd0:	48001800 	.word	0x48001800
 8002bd4:	40010400 	.word	0x40010400

08002bd8 <HAL_GPIO_WritePin>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @param  PinState specifies the value to be written to the selected bit.
  *         This parameter can be one of the GPIO_PinState enum values:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
 8002bd8:	b480      	push	{r7}
 8002bda:	b083      	sub	sp, #12
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
 8002be0:	460b      	mov	r3, r1
 8002be2:	807b      	strh	r3, [r7, #2]
 8002be4:	4613      	mov	r3, r2
 8002be6:	707b      	strb	r3, [r7, #1]
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
  /* Check the parameters */
 8002be8:	787b      	ldrb	r3, [r7, #1]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d003      	beq.n	8002bf6 <HAL_GPIO_WritePin+0x1e>
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8002bee:	887a      	ldrh	r2, [r7, #2]
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	619a      	str	r2, [r3, #24]

  if(PinState != GPIO_PIN_RESET)
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
  else
 8002bf4:	e002      	b.n	8002bfc <HAL_GPIO_WritePin+0x24>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002bf6:	887a      	ldrh	r2, [r7, #2]
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	629a      	str	r2, [r3, #40]	; 0x28
  else
 8002bfc:	bf00      	nop
 8002bfe:	370c      	adds	r7, #12
 8002c00:	46bd      	mov	sp, r7
 8002c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c06:	4770      	bx	lr

08002c08 <HAL_GPIO_EXTI_IRQHandler>:
  }
}

/**
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b082      	sub	sp, #8
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	4603      	mov	r3, r0
 8002c10:	80fb      	strh	r3, [r7, #6]
  * @retval None
  */
 8002c12:	4b08      	ldr	r3, [pc, #32]	; (8002c34 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002c14:	695a      	ldr	r2, [r3, #20]
 8002c16:	88fb      	ldrh	r3, [r7, #6]
 8002c18:	4013      	ands	r3, r2
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d006      	beq.n	8002c2c <HAL_GPIO_EXTI_IRQHandler+0x24>
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002c1e:	4a05      	ldr	r2, [pc, #20]	; (8002c34 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002c20:	88fb      	ldrh	r3, [r7, #6]
 8002c22:	6153      	str	r3, [r2, #20]
  /* EXTI line interrupt detected */
 8002c24:	88fb      	ldrh	r3, [r7, #6]
 8002c26:	4618      	mov	r0, r3
 8002c28:	f7fe fa0e 	bl	8001048 <HAL_GPIO_EXTI_Callback>
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
  {
 8002c2c:	bf00      	nop
 8002c2e:	3708      	adds	r7, #8
 8002c30:	46bd      	mov	sp, r7
 8002c32:	bd80      	pop	{r7, pc}
 8002c34:	40010400 	.word	0x40010400

08002c38 <HAL_I2C_Init>:

  hi2c->State = HAL_I2C_STATE_BUSY;

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);

 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b082      	sub	sp, #8
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d101      	bne.n	8002c4a <HAL_I2C_Init+0x12>
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;

 8002c46:	2301      	movs	r3, #1
 8002c48:	e081      	b.n	8002d4e <HAL_I2C_Init+0x116>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
  }
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c50:	b2db      	uxtb	r3, r3
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d106      	bne.n	8002c64 <HAL_I2C_Init+0x2c>

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2200      	movs	r2, #0
 8002c5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
  hi2c->State = HAL_I2C_STATE_READY;
  hi2c->PreviousState = I2C_STATE_NONE;
 8002c5e:	6878      	ldr	r0, [r7, #4]
 8002c60:	f7fe fe06 	bl	8001870 <HAL_I2C_MspInit>
  hi2c->Mode = HAL_I2C_MODE_NONE;

  return HAL_OK;
}
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2224      	movs	r2, #36	; 0x24
 8002c68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

/**
  * @brief  DeInitialize the I2C peripheral.
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	681a      	ldr	r2, [r3, #0]
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f022 0201 	bic.w	r2, r2, #1
 8002c7a:	601a      	str	r2, [r3, #0]
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	685a      	ldr	r2, [r3, #4]
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002c88:	611a      	str	r2, [r3, #16]
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	689a      	ldr	r2, [r3, #8]
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002c98:	609a      	str	r2, [r3, #8]
  {
    return HAL_ERROR;
  }
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	68db      	ldr	r3, [r3, #12]
 8002c9e:	2b01      	cmp	r3, #1
 8002ca0:	d107      	bne.n	8002cb2 <HAL_I2C_Init+0x7a>

  /* Check the parameters */
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	689a      	ldr	r2, [r3, #8]
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002cae:	609a      	str	r2, [r3, #8]
 8002cb0:	e006      	b.n	8002cc0 <HAL_I2C_Init+0x88>
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;

 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	689a      	ldr	r2, [r3, #8]
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002cbe:	609a      	str	r2, [r3, #8]
  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  if (hi2c->MspDeInitCallback == NULL)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	68db      	ldr	r3, [r3, #12]
 8002cc4:	2b02      	cmp	r3, #2
 8002cc6:	d104      	bne.n	8002cd2 <HAL_I2C_Init+0x9a>
  {
    hi2c->MspDeInitCallback = HAL_I2C_MspDeInit; /* Legacy weak MspDeInit  */
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002cd0:	605a      	str	r2, [r3, #4]
  }

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	687a      	ldr	r2, [r7, #4]
 8002cda:	6812      	ldr	r2, [r2, #0]
 8002cdc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002ce0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ce4:	6053      	str	r3, [r2, #4]
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	68da      	ldr	r2, [r3, #12]
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002cf4:	60da      	str	r2, [r3, #12]
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	691a      	ldr	r2, [r3, #16]
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	695b      	ldr	r3, [r3, #20]
 8002cfe:	ea42 0103 	orr.w	r1, r2, r3
  hi2c->State = HAL_I2C_STATE_RESET;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	699b      	ldr	r3, [r3, #24]
 8002d06:	021a      	lsls	r2, r3, #8
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	430a      	orrs	r2, r1
 8002d0e:	60da      	str	r2, [r3, #12]
  hi2c->PreviousState = I2C_STATE_NONE;
  hi2c->Mode = HAL_I2C_MODE_NONE;

  /* Release Lock */
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	69d9      	ldr	r1, [r3, #28]
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6a1a      	ldr	r2, [r3, #32]
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	430a      	orrs	r2, r1
 8002d1e:	601a      	str	r2, [r3, #0]
  __HAL_UNLOCK(hi2c);

  return HAL_OK;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	681a      	ldr	r2, [r3, #0]
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f042 0201 	orr.w	r2, r2, #1
 8002d2e:	601a      	str	r2, [r3, #0]
}

 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2200      	movs	r2, #0
 8002d34:	645a      	str	r2, [r3, #68]	; 0x44
/**
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2220      	movs	r2, #32
 8002d3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  * @brief Initialize the I2C MSP.
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2200      	movs	r2, #0
 8002d42:	631a      	str	r2, [r3, #48]	; 0x30
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2200      	movs	r2, #0
 8002d48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  *                the configuration information for the specified I2C.
  * @retval None
 8002d4c:	2300      	movs	r3, #0
  */
 8002d4e:	4618      	mov	r0, r3
 8002d50:	3708      	adds	r7, #8
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bd80      	pop	{r7, pc}

08002d56 <HAL_I2C_DeInit>:
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8002d56:	b580      	push	{r7, lr}
 8002d58:	b082      	sub	sp, #8
 8002d5a:	af00      	add	r7, sp, #0
 8002d5c:	6078      	str	r0, [r7, #4]

/**
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d101      	bne.n	8002d68 <HAL_I2C_DeInit+0x12>
  * @brief DeInitialize the I2C MSP.
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
 8002d64:	2301      	movs	r3, #1
 8002d66:	e021      	b.n	8002dac <HAL_I2C_DeInit+0x56>
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
  /* Prevent unused argument(s) compilation warning */
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2224      	movs	r2, #36	; 0x24
 8002d6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	681a      	ldr	r2, [r3, #0]
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f022 0201 	bic.w	r2, r2, #1
 8002d7e:	601a      	str	r2, [r3, #0]
  * @brief  Register a User I2C Callback
  *         To be used instead of the weak predefined callback
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @param  CallbackID ID of the callback to be registered
  *         This parameter can be one of the following values:
 8002d80:	6878      	ldr	r0, [r7, #4]
 8002d82:	f7fe fdd3 	bl	800192c <HAL_I2C_MspDeInit>
  *          @arg @ref HAL_I2C_MASTER_TX_COMPLETE_CB_ID Master Tx Transfer completed callback ID
  *          @arg @ref HAL_I2C_MASTER_RX_COMPLETE_CB_ID Master Rx Transfer completed callback ID
  *          @arg @ref HAL_I2C_SLAVE_TX_COMPLETE_CB_ID Slave Tx Transfer completed callback ID
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2200      	movs	r2, #0
 8002d8a:	645a      	str	r2, [r3, #68]	; 0x44
  *          @arg @ref HAL_I2C_SLAVE_RX_COMPLETE_CB_ID Slave Rx Transfer completed callback ID
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2200      	movs	r2, #0
 8002d90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  *          @arg @ref HAL_I2C_LISTEN_COMPLETE_CB_ID Listen Complete callback ID
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2200      	movs	r2, #0
 8002d98:	631a      	str	r2, [r3, #48]	; 0x30
  *          @arg @ref HAL_I2C_MEM_TX_COMPLETE_CB_ID Memory Tx Transfer callback ID
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  *          @arg @ref HAL_I2C_MEM_RX_COMPLETE_CB_ID Memory Rx Transfer completed callback ID
  *          @arg @ref HAL_I2C_ERROR_CB_ID Error callback ID
  *          @arg @ref HAL_I2C_ABORT_CB_ID Abort callback ID
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	2200      	movs	r2, #0
 8002da6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  *          @arg @ref HAL_I2C_MSPINIT_CB_ID MspInit callback ID
  *          @arg @ref HAL_I2C_MSPDEINIT_CB_ID MspDeInit callback ID
 8002daa:	2300      	movs	r3, #0
  * @param  pCallback pointer to the Callback function
 8002dac:	4618      	mov	r0, r3
 8002dae:	3708      	adds	r7, #8
 8002db0:	46bd      	mov	sp, r7
 8002db2:	bd80      	pop	{r7, pc}

08002db4 <HAL_I2C_Mem_Write>:
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
        }
        else
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b088      	sub	sp, #32
 8002db8:	af02      	add	r7, sp, #8
 8002dba:	60f8      	str	r0, [r7, #12]
 8002dbc:	4608      	mov	r0, r1
 8002dbe:	4611      	mov	r1, r2
 8002dc0:	461a      	mov	r2, r3
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	817b      	strh	r3, [r7, #10]
 8002dc6:	460b      	mov	r3, r1
 8002dc8:	813b      	strh	r3, [r7, #8]
 8002dca:	4613      	mov	r3, r2
 8002dcc:	80fb      	strh	r3, [r7, #6]
        {
          hi2c->XferSize = hi2c->XferCount;
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
        }
      }

 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002dd4:	b2db      	uxtb	r3, r3
 8002dd6:	2b20      	cmp	r3, #32
 8002dd8:	f040 80f9 	bne.w	8002fce <HAL_I2C_Mem_Write+0x21a>
    } while (hi2c->XferCount > 0U);

 8002ddc:	6a3b      	ldr	r3, [r7, #32]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d002      	beq.n	8002de8 <HAL_I2C_Mem_Write+0x34>
 8002de2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d105      	bne.n	8002df4 <HAL_I2C_Mem_Write+0x40>
    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002dee:	645a      	str	r2, [r3, #68]	; 0x44
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002df0:	2301      	movs	r3, #1
 8002df2:	e0ed      	b.n	8002fd0 <HAL_I2C_Mem_Write+0x21c>
    {
      return HAL_ERROR;
    }

 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002dfa:	2b01      	cmp	r3, #1
 8002dfc:	d101      	bne.n	8002e02 <HAL_I2C_Mem_Write+0x4e>
 8002dfe:	2302      	movs	r3, #2
 8002e00:	e0e6      	b.n	8002fd0 <HAL_I2C_Mem_Write+0x21c>
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	2201      	movs	r2, #1
 8002e06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);

 8002e0a:	f7ff f9a9 	bl	8002160 <HAL_GetTick>
 8002e0e:	6178      	str	r0, [r7, #20]
    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002e10:	697b      	ldr	r3, [r7, #20]
 8002e12:	9300      	str	r3, [sp, #0]
 8002e14:	2319      	movs	r3, #25
 8002e16:	2201      	movs	r2, #1
 8002e18:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002e1c:	68f8      	ldr	r0, [r7, #12]
 8002e1e:	f000 fac3 	bl	80033a8 <I2C_WaitOnFlagUntilTimeout>
 8002e22:	4603      	mov	r3, r0
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d001      	beq.n	8002e2c <HAL_I2C_Mem_Write+0x78>

    hi2c->State = HAL_I2C_STATE_READY;
 8002e28:	2301      	movs	r3, #1
 8002e2a:	e0d1      	b.n	8002fd0 <HAL_I2C_Mem_Write+0x21c>
    hi2c->Mode  = HAL_I2C_MODE_NONE;

    /* Process Unlocked */
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	2221      	movs	r2, #33	; 0x21
 8002e30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	2240      	movs	r2, #64	; 0x40
 8002e38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	2200      	movs	r2, #0
 8002e40:	645a      	str	r2, [r3, #68]	; 0x44
    return HAL_OK;
  }
  else
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	6a3a      	ldr	r2, [r7, #32]
 8002e46:	625a      	str	r2, [r3, #36]	; 0x24
  {
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002e4c:	855a      	strh	r2, [r3, #42]	; 0x2a
    return HAL_BUSY;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	2200      	movs	r2, #0
 8002e52:	635a      	str	r2, [r3, #52]	; 0x34
  }
}

 8002e54:	88f8      	ldrh	r0, [r7, #6]
 8002e56:	893a      	ldrh	r2, [r7, #8]
 8002e58:	8979      	ldrh	r1, [r7, #10]
 8002e5a:	697b      	ldr	r3, [r7, #20]
 8002e5c:	9301      	str	r3, [sp, #4]
 8002e5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e60:	9300      	str	r3, [sp, #0]
 8002e62:	4603      	mov	r3, r0
 8002e64:	68f8      	ldr	r0, [r7, #12]
 8002e66:	f000 f9d3 	bl	8003210 <I2C_RequestMemoryWrite>
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d005      	beq.n	8002e7c <HAL_I2C_Mem_Write+0xc8>
/**
  * @brief  Read an amount of data in blocking mode from a specific memory address
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	2200      	movs	r2, #0
 8002e74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  *                the configuration information for the specified I2C.
 8002e78:	2301      	movs	r3, #1
 8002e7a:	e0a9      	b.n	8002fd0 <HAL_I2C_Mem_Write+0x21c>
  * @param  DevAddress Target device address: The device 7 bits address value
  *         in datasheet must be shifted to the left before calling the interface
  * @param  MemAddress Internal memory address
  * @param  MemAddSize Size of internal memory address
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e80:	b29b      	uxth	r3, r3
 8002e82:	2bff      	cmp	r3, #255	; 0xff
 8002e84:	d90e      	bls.n	8002ea4 <HAL_I2C_Mem_Write+0xf0>
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	22ff      	movs	r2, #255	; 0xff
 8002e8a:	851a      	strh	r2, [r3, #40]	; 0x28
  * @param  Timeout Timeout duration
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e90:	b2da      	uxtb	r2, r3
 8002e92:	8979      	ldrh	r1, [r7, #10]
 8002e94:	2300      	movs	r3, #0
 8002e96:	9300      	str	r3, [sp, #0]
 8002e98:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002e9c:	68f8      	ldr	r0, [r7, #12]
 8002e9e:	f000 fc2b 	bl	80036f8 <I2C_TransferConfig>
 8002ea2:	e00f      	b.n	8002ec4 <HAL_I2C_Mem_Write+0x110>
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ea8:	b29a      	uxth	r2, r3
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	851a      	strh	r2, [r3, #40]	; 0x28
{
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002eb2:	b2da      	uxtb	r2, r3
 8002eb4:	8979      	ldrh	r1, [r7, #10]
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	9300      	str	r3, [sp, #0]
 8002eba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002ebe:	68f8      	ldr	r0, [r7, #12]
 8002ec0:	f000 fc1a 	bl	80036f8 <I2C_TransferConfig>
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ec4:	697a      	ldr	r2, [r7, #20]
 8002ec6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002ec8:	68f8      	ldr	r0, [r7, #12]
 8002eca:	f000 faad 	bl	8003428 <I2C_WaitOnTXISFlagUntilTimeout>
 8002ece:	4603      	mov	r3, r0
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d001      	beq.n	8002ed8 <HAL_I2C_Mem_Write+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	e07b      	b.n	8002fd0 <HAL_I2C_Mem_Write+0x21c>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
      return  HAL_ERROR;
    }
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002edc:	781a      	ldrb	r2, [r3, #0]
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ee8:	1c5a      	adds	r2, r3, #1
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	625a      	str	r2, [r3, #36]	; 0x24

    /* Init tickstart for timeout management*/
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ef2:	b29b      	uxth	r3, r3
 8002ef4:	3b01      	subs	r3, #1
 8002ef6:	b29a      	uxth	r2, r3
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	855a      	strh	r2, [r3, #42]	; 0x2a
    tickstart = HAL_GetTick();
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f00:	3b01      	subs	r3, #1
 8002f02:	b29a      	uxth	r2, r3
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	851a      	strh	r2, [r3, #40]	; 0x28

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f0c:	b29b      	uxth	r3, r3
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d034      	beq.n	8002f7c <HAL_I2C_Mem_Write+0x1c8>
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d130      	bne.n	8002f7c <HAL_I2C_Mem_Write+0x1c8>
    {
      return HAL_ERROR;
    }
 8002f1a:	697b      	ldr	r3, [r7, #20]
 8002f1c:	9300      	str	r3, [sp, #0]
 8002f1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f20:	2200      	movs	r2, #0
 8002f22:	2180      	movs	r1, #128	; 0x80
 8002f24:	68f8      	ldr	r0, [r7, #12]
 8002f26:	f000 fa3f 	bl	80033a8 <I2C_WaitOnFlagUntilTimeout>
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d001      	beq.n	8002f34 <HAL_I2C_Mem_Write+0x180>

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002f30:	2301      	movs	r3, #1
 8002f32:	e04d      	b.n	8002fd0 <HAL_I2C_Mem_Write+0x21c>
    hi2c->Mode      = HAL_I2C_MODE_MEM;
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;

 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f38:	b29b      	uxth	r3, r3
 8002f3a:	2bff      	cmp	r3, #255	; 0xff
 8002f3c:	d90e      	bls.n	8002f5c <HAL_I2C_Mem_Write+0x1a8>
    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	22ff      	movs	r2, #255	; 0xff
 8002f42:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount = Size;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f48:	b2da      	uxtb	r2, r3
 8002f4a:	8979      	ldrh	r1, [r7, #10]
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	9300      	str	r3, [sp, #0]
 8002f50:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002f54:	68f8      	ldr	r0, [r7, #12]
 8002f56:	f000 fbcf 	bl	80036f8 <I2C_TransferConfig>
 8002f5a:	e00f      	b.n	8002f7c <HAL_I2C_Mem_Write+0x1c8>
    hi2c->XferISR   = NULL;

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
    {
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f60:	b29a      	uxth	r2, r3
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	851a      	strh	r2, [r3, #40]	; 0x28
      /* Process Unlocked */
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f6a:	b2da      	uxtb	r2, r3
 8002f6c:	8979      	ldrh	r1, [r7, #10]
 8002f6e:	2300      	movs	r3, #0
 8002f70:	9300      	str	r3, [sp, #0]
 8002f72:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002f76:	68f8      	ldr	r0, [r7, #12]
 8002f78:	f000 fbbe 	bl	80036f8 <I2C_TransferConfig>
      __HAL_UNLOCK(hi2c);
      return HAL_ERROR;
    }

    /* Send Slave Address */
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f80:	b29b      	uxth	r3, r3
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d19e      	bne.n	8002ec4 <HAL_I2C_Mem_Write+0x110>
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002f86:	697a      	ldr	r2, [r7, #20]
 8002f88:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002f8a:	68f8      	ldr	r0, [r7, #12]
 8002f8c:	f000 fa8c 	bl	80034a8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002f90:	4603      	mov	r3, r0
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d001      	beq.n	8002f9a <HAL_I2C_Mem_Write+0x1e6>
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
    }
 8002f96:	2301      	movs	r3, #1
 8002f98:	e01a      	b.n	8002fd0 <HAL_I2C_Mem_Write+0x21c>
    else
    {
      hi2c->XferSize = hi2c->XferCount;
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	2220      	movs	r2, #32
 8002fa0:	61da      	str	r2, [r3, #28]
    }

    do
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	6859      	ldr	r1, [r3, #4]
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681a      	ldr	r2, [r3, #0]
 8002fac:	4b0a      	ldr	r3, [pc, #40]	; (8002fd8 <HAL_I2C_Mem_Write+0x224>)
 8002fae:	400b      	ands	r3, r1
 8002fb0:	6053      	str	r3, [r2, #4]
    {
      /* Wait until RXNE flag is set */
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	2220      	movs	r2, #32
 8002fb6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      {
        return HAL_ERROR;
      }
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Read data from RXDR */
 8002fca:	2300      	movs	r3, #0
 8002fcc:	e000      	b.n	8002fd0 <HAL_I2C_Mem_Write+0x21c>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002fce:	2302      	movs	r3, #2

      hi2c->XferSize--;
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	3718      	adds	r7, #24
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	bd80      	pop	{r7, pc}
 8002fd8:	fe00e800 	.word	0xfe00e800

08002fdc <HAL_I2C_Mem_Read>:
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
        }
        else
        {
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b088      	sub	sp, #32
 8002fe0:	af02      	add	r7, sp, #8
 8002fe2:	60f8      	str	r0, [r7, #12]
 8002fe4:	4608      	mov	r0, r1
 8002fe6:	4611      	mov	r1, r2
 8002fe8:	461a      	mov	r2, r3
 8002fea:	4603      	mov	r3, r0
 8002fec:	817b      	strh	r3, [r7, #10]
 8002fee:	460b      	mov	r3, r1
 8002ff0:	813b      	strh	r3, [r7, #8]
 8002ff2:	4613      	mov	r3, r2
 8002ff4:	80fb      	strh	r3, [r7, #6]
          hi2c->XferSize = hi2c->XferCount;
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);

 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ffc:	b2db      	uxtb	r3, r3
 8002ffe:	2b20      	cmp	r3, #32
 8003000:	f040 80fd 	bne.w	80031fe <HAL_I2C_Mem_Read+0x222>
    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
 8003004:	6a3b      	ldr	r3, [r7, #32]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d002      	beq.n	8003010 <HAL_I2C_Mem_Read+0x34>
 800300a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800300c:	2b00      	cmp	r3, #0
 800300e:	d105      	bne.n	800301c <HAL_I2C_Mem_Read+0x40>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
    {
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003016:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8003018:	2301      	movs	r3, #1
 800301a:	e0f1      	b.n	8003200 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003022:	2b01      	cmp	r3, #1
 8003024:	d101      	bne.n	800302a <HAL_I2C_Mem_Read+0x4e>
 8003026:	2302      	movs	r3, #2
 8003028:	e0ea      	b.n	8003200 <HAL_I2C_Mem_Read+0x224>
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	2201      	movs	r2, #1
 800302e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003032:	f7ff f895 	bl	8002160 <HAL_GetTick>
 8003036:	6178      	str	r0, [r7, #20]

    hi2c->State = HAL_I2C_STATE_READY;
 8003038:	697b      	ldr	r3, [r7, #20]
 800303a:	9300      	str	r3, [sp, #0]
 800303c:	2319      	movs	r3, #25
 800303e:	2201      	movs	r2, #1
 8003040:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003044:	68f8      	ldr	r0, [r7, #12]
 8003046:	f000 f9af 	bl	80033a8 <I2C_WaitOnFlagUntilTimeout>
 800304a:	4603      	mov	r3, r0
 800304c:	2b00      	cmp	r3, #0
 800304e:	d001      	beq.n	8003054 <HAL_I2C_Mem_Read+0x78>
    hi2c->Mode  = HAL_I2C_MODE_NONE;

 8003050:	2301      	movs	r3, #1
 8003052:	e0d5      	b.n	8003200 <HAL_I2C_Mem_Read+0x224>
    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);

 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	2222      	movs	r2, #34	; 0x22
 8003058:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    return HAL_OK;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	2240      	movs	r2, #64	; 0x40
 8003060:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	2200      	movs	r2, #0
 8003068:	645a      	str	r2, [r3, #68]	; 0x44
  else
  {
    return HAL_BUSY;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	6a3a      	ldr	r2, [r7, #32]
 800306e:	625a      	str	r2, [r3, #36]	; 0x24
  }
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003074:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	2200      	movs	r2, #0
 800307a:	635a      	str	r2, [r3, #52]	; 0x34
/**
  * @brief  Write an amount of data in non-blocking mode with Interrupt to a specific memory address
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
 800307c:	88f8      	ldrh	r0, [r7, #6]
 800307e:	893a      	ldrh	r2, [r7, #8]
 8003080:	8979      	ldrh	r1, [r7, #10]
 8003082:	697b      	ldr	r3, [r7, #20]
 8003084:	9301      	str	r3, [sp, #4]
 8003086:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003088:	9300      	str	r3, [sp, #0]
 800308a:	4603      	mov	r3, r0
 800308c:	68f8      	ldr	r0, [r7, #12]
 800308e:	f000 f913 	bl	80032b8 <I2C_RequestMemoryRead>
 8003092:	4603      	mov	r3, r0
 8003094:	2b00      	cmp	r3, #0
 8003096:	d005      	beq.n	80030a4 <HAL_I2C_Mem_Read+0xc8>
  *                the configuration information for the specified I2C.
  * @param  DevAddress Target device address: The device 7 bits address value
  *         in datasheet must be shifted to the left before calling the interface
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	2200      	movs	r2, #0
 800309c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  * @param  MemAddress Internal memory address
 80030a0:	2301      	movs	r3, #1
 80030a2:	e0ad      	b.n	8003200 <HAL_I2C_Mem_Read+0x224>
  * @param  MemAddSize Size of internal memory address
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030a8:	b29b      	uxth	r3, r3
 80030aa:	2bff      	cmp	r3, #255	; 0xff
 80030ac:	d90e      	bls.n	80030cc <HAL_I2C_Mem_Read+0xf0>
HAL_StatusTypeDef HAL_I2C_Mem_Write_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                       uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	22ff      	movs	r2, #255	; 0xff
 80030b2:	851a      	strh	r2, [r3, #40]	; 0x28
{
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030b8:	b2da      	uxtb	r2, r3
 80030ba:	8979      	ldrh	r1, [r7, #10]
 80030bc:	4b52      	ldr	r3, [pc, #328]	; (8003208 <HAL_I2C_Mem_Read+0x22c>)
 80030be:	9300      	str	r3, [sp, #0]
 80030c0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80030c4:	68f8      	ldr	r0, [r7, #12]
 80030c6:	f000 fb17 	bl	80036f8 <I2C_TransferConfig>
 80030ca:	e00f      	b.n	80030ec <HAL_I2C_Mem_Read+0x110>
  uint32_t tickstart;
  uint32_t xfermode;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030d0:	b29a      	uxth	r2, r3
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	851a      	strh	r2, [r3, #40]	; 0x28

 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030da:	b2da      	uxtb	r2, r3
 80030dc:	8979      	ldrh	r1, [r7, #10]
 80030de:	4b4a      	ldr	r3, [pc, #296]	; (8003208 <HAL_I2C_Mem_Read+0x22c>)
 80030e0:	9300      	str	r3, [sp, #0]
 80030e2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80030e6:	68f8      	ldr	r0, [r7, #12]
 80030e8:	f000 fb06 	bl	80036f8 <I2C_TransferConfig>
  {
    if ((pData == NULL) || (Size == 0U))
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
      return  HAL_ERROR;
    }
 80030ec:	697b      	ldr	r3, [r7, #20]
 80030ee:	9300      	str	r3, [sp, #0]
 80030f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030f2:	2200      	movs	r2, #0
 80030f4:	2104      	movs	r1, #4
 80030f6:	68f8      	ldr	r0, [r7, #12]
 80030f8:	f000 f956 	bl	80033a8 <I2C_WaitOnFlagUntilTimeout>
 80030fc:	4603      	mov	r3, r0
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d001      	beq.n	8003106 <HAL_I2C_Mem_Read+0x12a>

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8003102:	2301      	movs	r3, #1
 8003104:	e07c      	b.n	8003200 <HAL_I2C_Mem_Read+0x224>
    {
      return HAL_BUSY;
    }

 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003110:	b2d2      	uxtb	r2, r2
 8003112:	701a      	strb	r2, [r3, #0]
    /* Process Locked */
    __HAL_LOCK(hi2c);

 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003118:	1c5a      	adds	r2, r3, #1
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	625a      	str	r2, [r3, #36]	; 0x24
    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003122:	3b01      	subs	r3, #1
 8003124:	b29a      	uxth	r2, r3
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	851a      	strh	r2, [r3, #40]	; 0x28

 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800312e:	b29b      	uxth	r3, r3
 8003130:	3b01      	subs	r3, #1
 8003132:	b29a      	uxth	r2, r3
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800313c:	b29b      	uxth	r3, r3
 800313e:	2b00      	cmp	r3, #0
 8003140:	d034      	beq.n	80031ac <HAL_I2C_Mem_Read+0x1d0>
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003146:	2b00      	cmp	r3, #0
 8003148:	d130      	bne.n	80031ac <HAL_I2C_Mem_Read+0x1d0>
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;

    /* Prepare transfer parameters */
 800314a:	697b      	ldr	r3, [r7, #20]
 800314c:	9300      	str	r3, [sp, #0]
 800314e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003150:	2200      	movs	r2, #0
 8003152:	2180      	movs	r1, #128	; 0x80
 8003154:	68f8      	ldr	r0, [r7, #12]
 8003156:	f000 f927 	bl	80033a8 <I2C_WaitOnFlagUntilTimeout>
 800315a:	4603      	mov	r3, r0
 800315c:	2b00      	cmp	r3, #0
 800315e:	d001      	beq.n	8003164 <HAL_I2C_Mem_Read+0x188>
    hi2c->pBuffPtr    = pData;
    hi2c->XferCount   = Size;
 8003160:	2301      	movs	r3, #1
 8003162:	e04d      	b.n	8003200 <HAL_I2C_Mem_Read+0x224>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
    hi2c->XferISR     = I2C_Master_ISR_IT;

 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003168:	b29b      	uxth	r3, r3
 800316a:	2bff      	cmp	r3, #255	; 0xff
 800316c:	d90e      	bls.n	800318c <HAL_I2C_Mem_Read+0x1b0>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
    {
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	22ff      	movs	r2, #255	; 0xff
 8003172:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003178:	b2da      	uxtb	r2, r3
 800317a:	8979      	ldrh	r1, [r7, #10]
 800317c:	2300      	movs	r3, #0
 800317e:	9300      	str	r3, [sp, #0]
 8003180:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003184:	68f8      	ldr	r0, [r7, #12]
 8003186:	f000 fab7 	bl	80036f8 <I2C_TransferConfig>
 800318a:	e00f      	b.n	80031ac <HAL_I2C_Mem_Read+0x1d0>
      xfermode = I2C_RELOAD_MODE;
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003190:	b29a      	uxth	r2, r3
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800319a:	b2da      	uxtb	r2, r3
 800319c:	8979      	ldrh	r1, [r7, #10]
 800319e:	2300      	movs	r3, #0
 80031a0:	9300      	str	r3, [sp, #0]
 80031a2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80031a6:	68f8      	ldr	r0, [r7, #12]
 80031a8:	f000 faa6 	bl	80036f8 <I2C_TransferConfig>
    }

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031b0:	b29b      	uxth	r3, r3
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d19a      	bne.n	80030ec <HAL_I2C_Mem_Read+0x110>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
      return HAL_ERROR;
 80031b6:	697a      	ldr	r2, [r7, #20]
 80031b8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80031ba:	68f8      	ldr	r0, [r7, #12]
 80031bc:	f000 f974 	bl	80034a8 <I2C_WaitOnSTOPFlagUntilTimeout>
 80031c0:	4603      	mov	r3, r0
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d001      	beq.n	80031ca <HAL_I2C_Mem_Read+0x1ee>
    }

 80031c6:	2301      	movs	r3, #1
 80031c8:	e01a      	b.n	8003200 <HAL_I2C_Mem_Read+0x224>
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);

    /* Process Unlocked */
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	2220      	movs	r2, #32
 80031d0:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);

    /* Note : The I2C interrupts must be enabled after unlocking current process
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	6859      	ldr	r1, [r3, #4]
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681a      	ldr	r2, [r3, #0]
 80031dc:	4b0b      	ldr	r3, [pc, #44]	; (800320c <HAL_I2C_Mem_Read+0x230>)
 80031de:	400b      	ands	r3, r1
 80031e0:	6053      	str	r3, [r2, #4]
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	2220      	movs	r2, #32
 80031e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	2200      	movs	r2, #0
 80031ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI| I2C_IT_STOPI| I2C_IT_NACKI | I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	2200      	movs	r2, #0
 80031f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);

 80031fa:	2300      	movs	r3, #0
 80031fc:	e000      	b.n	8003200 <HAL_I2C_Mem_Read+0x224>
    return HAL_OK;
  }
  else
  {
 80031fe:	2302      	movs	r3, #2
    return HAL_BUSY;
  }
 8003200:	4618      	mov	r0, r3
 8003202:	3718      	adds	r7, #24
 8003204:	46bd      	mov	sp, r7
 8003206:	bd80      	pop	{r7, pc}
 8003208:	80002400 	.word	0x80002400
 800320c:	fe00e800 	.word	0xfe00e800

08003210 <I2C_RequestMemoryWrite>:
      hi2c->Mode = HAL_I2C_MODE_NONE;

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);

      /* Call the corresponding callback to inform upper layer of End of Transfer */
 8003210:	b580      	push	{r7, lr}
 8003212:	b086      	sub	sp, #24
 8003214:	af02      	add	r7, sp, #8
 8003216:	60f8      	str	r0, [r7, #12]
 8003218:	4608      	mov	r0, r1
 800321a:	4611      	mov	r1, r2
 800321c:	461a      	mov	r2, r3
 800321e:	4603      	mov	r3, r0
 8003220:	817b      	strh	r3, [r7, #10]
 8003222:	460b      	mov	r3, r1
 8003224:	813b      	strh	r3, [r7, #8]
 8003226:	4613      	mov	r3, r2
 8003228:	80fb      	strh	r3, [r7, #6]
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
 800322a:	88fb      	ldrh	r3, [r7, #6]
 800322c:	b2da      	uxtb	r2, r3
 800322e:	8979      	ldrh	r1, [r7, #10]
 8003230:	4b20      	ldr	r3, [pc, #128]	; (80032b4 <I2C_RequestMemoryWrite+0xa4>)
 8003232:	9300      	str	r3, [sp, #0]
 8003234:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003238:	68f8      	ldr	r0, [r7, #12]
 800323a:	f000 fa5d 	bl	80036f8 <I2C_TransferConfig>
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800323e:	69fa      	ldr	r2, [r7, #28]
 8003240:	69b9      	ldr	r1, [r7, #24]
 8003242:	68f8      	ldr	r0, [r7, #12]
 8003244:	f000 f8f0 	bl	8003428 <I2C_WaitOnTXISFlagUntilTimeout>
 8003248:	4603      	mov	r3, r0
 800324a:	2b00      	cmp	r3, #0
 800324c:	d001      	beq.n	8003252 <I2C_RequestMemoryWrite+0x42>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
 800324e:	2301      	movs	r3, #1
 8003250:	e02c      	b.n	80032ac <I2C_RequestMemoryWrite+0x9c>
  }
  /* hi2c->State == HAL_I2C_STATE_BUSY_RX */
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
  {
 8003252:	88fb      	ldrh	r3, [r7, #6]
 8003254:	2b01      	cmp	r3, #1
 8003256:	d105      	bne.n	8003264 <I2C_RequestMemoryWrite+0x54>
    hi2c->State = HAL_I2C_STATE_READY;
    hi2c->PreviousState = I2C_STATE_NONE;

 8003258:	893b      	ldrh	r3, [r7, #8]
 800325a:	b2da      	uxtb	r2, r3
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	629a      	str	r2, [r3, #40]	; 0x28
 8003262:	e015      	b.n	8003290 <I2C_RequestMemoryWrite+0x80>
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
    {
      hi2c->Mode = HAL_I2C_MODE_NONE;

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003264:	893b      	ldrh	r3, [r7, #8]
 8003266:	0a1b      	lsrs	r3, r3, #8
 8003268:	b29b      	uxth	r3, r3
 800326a:	b2da      	uxtb	r2, r3
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	629a      	str	r2, [r3, #40]	; 0x28

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
 8003272:	69fa      	ldr	r2, [r7, #28]
 8003274:	69b9      	ldr	r1, [r7, #24]
 8003276:	68f8      	ldr	r0, [r7, #12]
 8003278:	f000 f8d6 	bl	8003428 <I2C_WaitOnTXISFlagUntilTimeout>
 800327c:	4603      	mov	r3, r0
 800327e:	2b00      	cmp	r3, #0
 8003280:	d001      	beq.n	8003286 <I2C_RequestMemoryWrite+0x76>
      hi2c->MemRxCpltCallback(hi2c);
#else
 8003282:	2301      	movs	r3, #1
 8003284:	e012      	b.n	80032ac <I2C_RequestMemoryWrite+0x9c>
      HAL_I2C_MemRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else
 8003286:	893b      	ldrh	r3, [r7, #8]
 8003288:	b2da      	uxtb	r2, r3
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	629a      	str	r2, [r3, #40]	; 0x28
    {
      hi2c->Mode = HAL_I2C_MODE_NONE;

      /* Process Unlocked */
 8003290:	69fb      	ldr	r3, [r7, #28]
 8003292:	9300      	str	r3, [sp, #0]
 8003294:	69bb      	ldr	r3, [r7, #24]
 8003296:	2200      	movs	r2, #0
 8003298:	2180      	movs	r1, #128	; 0x80
 800329a:	68f8      	ldr	r0, [r7, #12]
 800329c:	f000 f884 	bl	80033a8 <I2C_WaitOnFlagUntilTimeout>
 80032a0:	4603      	mov	r3, r0
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d001      	beq.n	80032aa <I2C_RequestMemoryWrite+0x9a>
      __HAL_UNLOCK(hi2c);

 80032a6:	2301      	movs	r3, #1
 80032a8:	e000      	b.n	80032ac <I2C_RequestMemoryWrite+0x9c>
      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterRxCpltCallback(hi2c);
 80032aa:	2300      	movs	r3, #0
#else
 80032ac:	4618      	mov	r0, r3
 80032ae:	3710      	adds	r7, #16
 80032b0:	46bd      	mov	sp, r7
 80032b2:	bd80      	pop	{r7, pc}
 80032b4:	80002000 	.word	0x80002000

080032b8 <I2C_RequestMemoryRead>:
  * @brief  I2C Slave complete process.
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b086      	sub	sp, #24
 80032bc:	af02      	add	r7, sp, #8
 80032be:	60f8      	str	r0, [r7, #12]
 80032c0:	4608      	mov	r0, r1
 80032c2:	4611      	mov	r1, r2
 80032c4:	461a      	mov	r2, r3
 80032c6:	4603      	mov	r3, r0
 80032c8:	817b      	strh	r3, [r7, #10]
 80032ca:	460b      	mov	r3, r1
 80032cc:	813b      	strh	r3, [r7, #8]
 80032ce:	4613      	mov	r3, r2
 80032d0:	80fb      	strh	r3, [r7, #6]
{
 80032d2:	88fb      	ldrh	r3, [r7, #6]
 80032d4:	b2da      	uxtb	r2, r3
 80032d6:	8979      	ldrh	r1, [r7, #10]
 80032d8:	4b20      	ldr	r3, [pc, #128]	; (800335c <I2C_RequestMemoryRead+0xa4>)
 80032da:	9300      	str	r3, [sp, #0]
 80032dc:	2300      	movs	r3, #0
 80032de:	68f8      	ldr	r0, [r7, #12]
 80032e0:	f000 fa0a 	bl	80036f8 <I2C_TransferConfig>
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
  uint32_t tmpITFlags = ITFlags;
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80032e4:	69fa      	ldr	r2, [r7, #28]
 80032e6:	69b9      	ldr	r1, [r7, #24]
 80032e8:	68f8      	ldr	r0, [r7, #12]
 80032ea:	f000 f89d 	bl	8003428 <I2C_WaitOnTXISFlagUntilTimeout>
 80032ee:	4603      	mov	r3, r0
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d001      	beq.n	80032f8 <I2C_RequestMemoryRead+0x40>

  /* Clear STOP Flag */
 80032f4:	2301      	movs	r3, #1
 80032f6:	e02c      	b.n	8003352 <I2C_RequestMemoryRead+0x9a>
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80032f8:	88fb      	ldrh	r3, [r7, #6]
 80032fa:	2b01      	cmp	r3, #1
 80032fc:	d105      	bne.n	800330a <I2C_RequestMemoryRead+0x52>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80032fe:	893b      	ldrh	r3, [r7, #8]
 8003300:	b2da      	uxtb	r2, r3
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	629a      	str	r2, [r3, #40]	; 0x28
 8003308:	e015      	b.n	8003336 <I2C_RequestMemoryRead+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
  }
 800330a:	893b      	ldrh	r3, [r7, #8]
 800330c:	0a1b      	lsrs	r3, r3, #8
 800330e:	b29b      	uxth	r3, r3
 8003310:	b2da      	uxtb	r2, r3
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	629a      	str	r2, [r3, #40]	; 0x28
  else
  {
    /* Do nothing */
 8003318:	69fa      	ldr	r2, [r7, #28]
 800331a:	69b9      	ldr	r1, [r7, #24]
 800331c:	68f8      	ldr	r0, [r7, #12]
 800331e:	f000 f883 	bl	8003428 <I2C_WaitOnTXISFlagUntilTimeout>
 8003322:	4603      	mov	r3, r0
 8003324:	2b00      	cmp	r3, #0
 8003326:	d001      	beq.n	800332c <I2C_RequestMemoryRead+0x74>
  }

 8003328:	2301      	movs	r3, #1
 800332a:	e012      	b.n	8003352 <I2C_RequestMemoryRead+0x9a>
  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;

  /* Clear Configuration Register 2 */
 800332c:	893b      	ldrh	r3, [r7, #8]
 800332e:	b2da      	uxtb	r2, r3
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	629a      	str	r2, [r3, #40]	; 0x28
  I2C_RESET_CR2(hi2c);

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8003336:	69fb      	ldr	r3, [r7, #28]
 8003338:	9300      	str	r3, [sp, #0]
 800333a:	69bb      	ldr	r3, [r7, #24]
 800333c:	2200      	movs	r2, #0
 800333e:	2140      	movs	r1, #64	; 0x40
 8003340:	68f8      	ldr	r0, [r7, #12]
 8003342:	f000 f831 	bl	80033a8 <I2C_WaitOnFlagUntilTimeout>
 8003346:	4603      	mov	r3, r0
 8003348:	2b00      	cmp	r3, #0
 800334a:	d001      	beq.n	8003350 <I2C_RequestMemoryRead+0x98>

  /* If a DMA is ongoing, Update handle size context */
 800334c:	2301      	movs	r3, #1
 800334e:	e000      	b.n	8003352 <I2C_RequestMemoryRead+0x9a>
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
  {
    /* Disable DMA Request */
 8003350:	2300      	movs	r3, #0
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003352:	4618      	mov	r0, r3
 8003354:	3710      	adds	r7, #16
 8003356:	46bd      	mov	sp, r7
 8003358:	bd80      	pop	{r7, pc}
 800335a:	bf00      	nop
 800335c:	80002000 	.word	0x80002000

08003360 <I2C_Flush_TXDR>:

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003360:	b480      	push	{r7}
 8003362:	b083      	sub	sp, #12
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	699b      	ldr	r3, [r3, #24]
 800336e:	f003 0302 	and.w	r3, r3, #2
 8003372:	2b02      	cmp	r3, #2
 8003374:	d103      	bne.n	800337e <I2C_Flush_TXDR+0x1e>

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	2200      	movs	r2, #0
 800337c:	629a      	str	r2, [r3, #40]	; 0x28
    hi2c->State = HAL_I2C_STATE_READY;
    hi2c->Mode = HAL_I2C_MODE_NONE;

    /* Process Unlocked */
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	699b      	ldr	r3, [r3, #24]
 8003384:	f003 0301 	and.w	r3, r3, #1
 8003388:	2b01      	cmp	r3, #1
 800338a:	d007      	beq.n	800339c <I2C_Flush_TXDR+0x3c>
    __HAL_UNLOCK(hi2c);

 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	699a      	ldr	r2, [r3, #24]
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f042 0201 	orr.w	r2, r2, #1
 800339a:	619a      	str	r2, [r3, #24]
    return HAL_ERROR;
  }
 800339c:	bf00      	nop
 800339e:	370c      	adds	r7, #12
 80033a0:	46bd      	mov	sp, r7
 80033a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a6:	4770      	bx	lr

080033a8 <I2C_WaitOnFlagUntilTimeout>:
#endif /* HAL_I2C_MODULE_ENABLED */
/**
  * @}
  */

/**
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b084      	sub	sp, #16
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	60f8      	str	r0, [r7, #12]
 80033b0:	60b9      	str	r1, [r7, #8]
 80033b2:	603b      	str	r3, [r7, #0]
 80033b4:	4613      	mov	r3, r2
 80033b6:	71fb      	strb	r3, [r7, #7]
  * @}
 80033b8:	e022      	b.n	8003400 <I2C_WaitOnFlagUntilTimeout+0x58>
  */

/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033c0:	d01e      	beq.n	8003400 <I2C_WaitOnFlagUntilTimeout+0x58>
 80033c2:	f7fe fecd 	bl	8002160 <HAL_GetTick>
 80033c6:	4602      	mov	r2, r0
 80033c8:	69bb      	ldr	r3, [r7, #24]
 80033ca:	1ad3      	subs	r3, r2, r3
 80033cc:	683a      	ldr	r2, [r7, #0]
 80033ce:	429a      	cmp	r2, r3
 80033d0:	d302      	bcc.n	80033d8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d113      	bne.n	8003400 <I2C_WaitOnFlagUntilTimeout+0x58>
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033dc:	f043 0220 	orr.w	r2, r3, #32
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	645a      	str	r2, [r3, #68]	; 0x44
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	2220      	movs	r2, #32
 80033e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	2200      	movs	r2, #0
 80033f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	2200      	movs	r2, #0
 80033f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80033fc:	2301      	movs	r3, #1
 80033fe:	e00f      	b.n	8003420 <I2C_WaitOnFlagUntilTimeout+0x78>
  * @}
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	699a      	ldr	r2, [r3, #24]
 8003406:	68bb      	ldr	r3, [r7, #8]
 8003408:	4013      	ands	r3, r2
 800340a:	68ba      	ldr	r2, [r7, #8]
 800340c:	429a      	cmp	r2, r3
 800340e:	bf0c      	ite	eq
 8003410:	2301      	moveq	r3, #1
 8003412:	2300      	movne	r3, #0
 8003414:	b2db      	uxtb	r3, r3
 8003416:	461a      	mov	r2, r3
 8003418:	79fb      	ldrb	r3, [r7, #7]
 800341a:	429a      	cmp	r2, r3
 800341c:	d0cd      	beq.n	80033ba <I2C_WaitOnFlagUntilTimeout+0x12>
 800341e:	2300      	movs	r3, #0
 8003420:	4618      	mov	r0, r3
 8003422:	3710      	adds	r7, #16
 8003424:	46bd      	mov	sp, r7
 8003426:	bd80      	pop	{r7, pc}

08003428 <I2C_WaitOnTXISFlagUntilTimeout>:
 8003428:	b580      	push	{r7, lr}
 800342a:	b084      	sub	sp, #16
 800342c:	af00      	add	r7, sp, #0
 800342e:	60f8      	str	r0, [r7, #12]
 8003430:	60b9      	str	r1, [r7, #8]
 8003432:	607a      	str	r2, [r7, #4]
 8003434:	e02c      	b.n	8003490 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
 8003436:	687a      	ldr	r2, [r7, #4]
 8003438:	68b9      	ldr	r1, [r7, #8]
 800343a:	68f8      	ldr	r0, [r7, #12]
 800343c:	f000 f870 	bl	8003520 <I2C_IsErrorOccurred>
 8003440:	4603      	mov	r3, r0
 8003442:	2b00      	cmp	r3, #0
 8003444:	d001      	beq.n	800344a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
 8003446:	2301      	movs	r3, #1
 8003448:	e02a      	b.n	80034a0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
 800344a:	68bb      	ldr	r3, [r7, #8]
 800344c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003450:	d01e      	beq.n	8003490 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
 8003452:	f7fe fe85 	bl	8002160 <HAL_GetTick>
 8003456:	4602      	mov	r2, r0
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	1ad3      	subs	r3, r2, r3
 800345c:	68ba      	ldr	r2, [r7, #8]
 800345e:	429a      	cmp	r2, r3
 8003460:	d302      	bcc.n	8003468 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003462:	68bb      	ldr	r3, [r7, #8]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d113      	bne.n	8003490 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800346c:	f043 0220 	orr.w	r2, r3, #32
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	645a      	str	r2, [r3, #68]	; 0x44
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	2220      	movs	r2, #32
 8003478:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	2200      	movs	r2, #0
 8003480:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	2200      	movs	r2, #0
 8003488:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800348c:	2301      	movs	r3, #1
 800348e:	e007      	b.n	80034a0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	699b      	ldr	r3, [r3, #24]
 8003496:	f003 0302 	and.w	r3, r3, #2
 800349a:	2b02      	cmp	r3, #2
 800349c:	d1cb      	bne.n	8003436 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
 800349e:	2300      	movs	r3, #0
 80034a0:	4618      	mov	r0, r3
 80034a2:	3710      	adds	r7, #16
 80034a4:	46bd      	mov	sp, r7
 80034a6:	bd80      	pop	{r7, pc}

080034a8 <I2C_WaitOnSTOPFlagUntilTimeout>:
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b084      	sub	sp, #16
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	60f8      	str	r0, [r7, #12]
 80034b0:	60b9      	str	r1, [r7, #8]
 80034b2:	607a      	str	r2, [r7, #4]
 80034b4:	e028      	b.n	8003508 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
 80034b6:	687a      	ldr	r2, [r7, #4]
 80034b8:	68b9      	ldr	r1, [r7, #8]
 80034ba:	68f8      	ldr	r0, [r7, #12]
 80034bc:	f000 f830 	bl	8003520 <I2C_IsErrorOccurred>
 80034c0:	4603      	mov	r3, r0
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d001      	beq.n	80034ca <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
 80034c6:	2301      	movs	r3, #1
 80034c8:	e026      	b.n	8003518 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
 80034ca:	f7fe fe49 	bl	8002160 <HAL_GetTick>
 80034ce:	4602      	mov	r2, r0
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	1ad3      	subs	r3, r2, r3
 80034d4:	68ba      	ldr	r2, [r7, #8]
 80034d6:	429a      	cmp	r2, r3
 80034d8:	d302      	bcc.n	80034e0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80034da:	68bb      	ldr	r3, [r7, #8]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d113      	bne.n	8003508 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034e4:	f043 0220 	orr.w	r2, r3, #32
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	645a      	str	r2, [r3, #68]	; 0x44
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	2220      	movs	r2, #32
 80034f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	2200      	movs	r2, #0
 80034f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	2200      	movs	r2, #0
 8003500:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003504:	2301      	movs	r3, #1
 8003506:	e007      	b.n	8003518 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	699b      	ldr	r3, [r3, #24]
 800350e:	f003 0320 	and.w	r3, r3, #32
 8003512:	2b20      	cmp	r3, #32
 8003514:	d1cf      	bne.n	80034b6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
 8003516:	2300      	movs	r3, #0
 8003518:	4618      	mov	r0, r3
 800351a:	3710      	adds	r7, #16
 800351c:	46bd      	mov	sp, r7
 800351e:	bd80      	pop	{r7, pc}

08003520 <I2C_IsErrorOccurred>:
 8003520:	b580      	push	{r7, lr}
 8003522:	b08a      	sub	sp, #40	; 0x28
 8003524:	af00      	add	r7, sp, #0
 8003526:	60f8      	str	r0, [r7, #12]
 8003528:	60b9      	str	r1, [r7, #8]
 800352a:	607a      	str	r2, [r7, #4]
 800352c:	2300      	movs	r3, #0
 800352e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	699b      	ldr	r3, [r3, #24]
 8003538:	61bb      	str	r3, [r7, #24]
 800353a:	2300      	movs	r3, #0
 800353c:	623b      	str	r3, [r7, #32]
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	61fb      	str	r3, [r7, #28]
 8003542:	69bb      	ldr	r3, [r7, #24]
 8003544:	f003 0310 	and.w	r3, r3, #16
 8003548:	2b00      	cmp	r3, #0
 800354a:	d075      	beq.n	8003638 <I2C_IsErrorOccurred+0x118>
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	2210      	movs	r2, #16
 8003552:	61da      	str	r2, [r3, #28]
 8003554:	e056      	b.n	8003604 <I2C_IsErrorOccurred+0xe4>
 8003556:	68bb      	ldr	r3, [r7, #8]
 8003558:	f1b3 3fff 	cmp.w	r3, #4294967295
 800355c:	d052      	beq.n	8003604 <I2C_IsErrorOccurred+0xe4>
 800355e:	f7fe fdff 	bl	8002160 <HAL_GetTick>
 8003562:	4602      	mov	r2, r0
 8003564:	69fb      	ldr	r3, [r7, #28]
 8003566:	1ad3      	subs	r3, r2, r3
 8003568:	68ba      	ldr	r2, [r7, #8]
 800356a:	429a      	cmp	r2, r3
 800356c:	d302      	bcc.n	8003574 <I2C_IsErrorOccurred+0x54>
 800356e:	68bb      	ldr	r3, [r7, #8]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d147      	bne.n	8003604 <I2C_IsErrorOccurred+0xe4>
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	685b      	ldr	r3, [r3, #4]
 800357a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800357e:	617b      	str	r3, [r7, #20]
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003586:	74fb      	strb	r3, [r7, #19]
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	699b      	ldr	r3, [r3, #24]
 800358e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003592:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003596:	d12e      	bne.n	80035f6 <I2C_IsErrorOccurred+0xd6>
 8003598:	697b      	ldr	r3, [r7, #20]
 800359a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800359e:	d02a      	beq.n	80035f6 <I2C_IsErrorOccurred+0xd6>
 80035a0:	7cfb      	ldrb	r3, [r7, #19]
 80035a2:	2b20      	cmp	r3, #32
 80035a4:	d027      	beq.n	80035f6 <I2C_IsErrorOccurred+0xd6>
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	685a      	ldr	r2, [r3, #4]
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80035b4:	605a      	str	r2, [r3, #4]
 80035b6:	f7fe fdd3 	bl	8002160 <HAL_GetTick>
 80035ba:	61f8      	str	r0, [r7, #28]
 80035bc:	e01b      	b.n	80035f6 <I2C_IsErrorOccurred+0xd6>
 80035be:	f7fe fdcf 	bl	8002160 <HAL_GetTick>
 80035c2:	4602      	mov	r2, r0
 80035c4:	69fb      	ldr	r3, [r7, #28]
 80035c6:	1ad3      	subs	r3, r2, r3
 80035c8:	2b19      	cmp	r3, #25
 80035ca:	d914      	bls.n	80035f6 <I2C_IsErrorOccurred+0xd6>
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035d0:	f043 0220 	orr.w	r2, r3, #32
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	645a      	str	r2, [r3, #68]	; 0x44
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	2220      	movs	r2, #32
 80035dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	2200      	movs	r2, #0
 80035e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	2200      	movs	r2, #0
 80035ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80035f0:	2301      	movs	r3, #1
 80035f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	699b      	ldr	r3, [r3, #24]
 80035fc:	f003 0320 	and.w	r3, r3, #32
 8003600:	2b20      	cmp	r3, #32
 8003602:	d1dc      	bne.n	80035be <I2C_IsErrorOccurred+0x9e>
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	699b      	ldr	r3, [r3, #24]
 800360a:	f003 0320 	and.w	r3, r3, #32
 800360e:	2b20      	cmp	r3, #32
 8003610:	d003      	beq.n	800361a <I2C_IsErrorOccurred+0xfa>
 8003612:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003616:	2b00      	cmp	r3, #0
 8003618:	d09d      	beq.n	8003556 <I2C_IsErrorOccurred+0x36>
 800361a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800361e:	2b00      	cmp	r3, #0
 8003620:	d103      	bne.n	800362a <I2C_IsErrorOccurred+0x10a>
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	2220      	movs	r2, #32
 8003628:	61da      	str	r2, [r3, #28]
 800362a:	6a3b      	ldr	r3, [r7, #32]
 800362c:	f043 0304 	orr.w	r3, r3, #4
 8003630:	623b      	str	r3, [r7, #32]
 8003632:	2301      	movs	r3, #1
 8003634:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	699b      	ldr	r3, [r3, #24]
 800363e:	61bb      	str	r3, [r7, #24]
 8003640:	69bb      	ldr	r3, [r7, #24]
 8003642:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003646:	2b00      	cmp	r3, #0
 8003648:	d00b      	beq.n	8003662 <I2C_IsErrorOccurred+0x142>
 800364a:	6a3b      	ldr	r3, [r7, #32]
 800364c:	f043 0301 	orr.w	r3, r3, #1
 8003650:	623b      	str	r3, [r7, #32]
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f44f 7280 	mov.w	r2, #256	; 0x100
 800365a:	61da      	str	r2, [r3, #28]
 800365c:	2301      	movs	r3, #1
 800365e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003662:	69bb      	ldr	r3, [r7, #24]
 8003664:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003668:	2b00      	cmp	r3, #0
 800366a:	d00b      	beq.n	8003684 <I2C_IsErrorOccurred+0x164>
 800366c:	6a3b      	ldr	r3, [r7, #32]
 800366e:	f043 0308 	orr.w	r3, r3, #8
 8003672:	623b      	str	r3, [r7, #32]
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800367c:	61da      	str	r2, [r3, #28]
 800367e:	2301      	movs	r3, #1
 8003680:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003684:	69bb      	ldr	r3, [r7, #24]
 8003686:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800368a:	2b00      	cmp	r3, #0
 800368c:	d00b      	beq.n	80036a6 <I2C_IsErrorOccurred+0x186>
 800368e:	6a3b      	ldr	r3, [r7, #32]
 8003690:	f043 0302 	orr.w	r3, r3, #2
 8003694:	623b      	str	r3, [r7, #32]
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800369e:	61da      	str	r2, [r3, #28]
 80036a0:	2301      	movs	r3, #1
 80036a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80036a6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d01c      	beq.n	80036e8 <I2C_IsErrorOccurred+0x1c8>
 80036ae:	68f8      	ldr	r0, [r7, #12]
 80036b0:	f7ff fe56 	bl	8003360 <I2C_Flush_TXDR>
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	6859      	ldr	r1, [r3, #4]
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681a      	ldr	r2, [r3, #0]
 80036be:	4b0d      	ldr	r3, [pc, #52]	; (80036f4 <I2C_IsErrorOccurred+0x1d4>)
 80036c0:	400b      	ands	r3, r1
 80036c2:	6053      	str	r3, [r2, #4]
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80036c8:	6a3b      	ldr	r3, [r7, #32]
 80036ca:	431a      	orrs	r2, r3
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	645a      	str	r2, [r3, #68]	; 0x44
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	2220      	movs	r2, #32
 80036d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	2200      	movs	r2, #0
 80036dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	2200      	movs	r2, #0
 80036e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80036e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80036ec:	4618      	mov	r0, r3
 80036ee:	3728      	adds	r7, #40	; 0x28
 80036f0:	46bd      	mov	sp, r7
 80036f2:	bd80      	pop	{r7, pc}
 80036f4:	fe00e800 	.word	0xfe00e800

080036f8 <I2C_TransferConfig>:
 80036f8:	b480      	push	{r7}
 80036fa:	b087      	sub	sp, #28
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	60f8      	str	r0, [r7, #12]
 8003700:	607b      	str	r3, [r7, #4]
 8003702:	460b      	mov	r3, r1
 8003704:	817b      	strh	r3, [r7, #10]
 8003706:	4613      	mov	r3, r2
 8003708:	727b      	strb	r3, [r7, #9]
 800370a:	897b      	ldrh	r3, [r7, #10]
 800370c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003710:	7a7b      	ldrb	r3, [r7, #9]
 8003712:	041b      	lsls	r3, r3, #16
 8003714:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003718:	431a      	orrs	r2, r3
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	431a      	orrs	r2, r3
 800371e:	6a3b      	ldr	r3, [r7, #32]
 8003720:	4313      	orrs	r3, r2
 8003722:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003726:	617b      	str	r3, [r7, #20]
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	685a      	ldr	r2, [r3, #4]
 800372e:	6a3b      	ldr	r3, [r7, #32]
 8003730:	0d5b      	lsrs	r3, r3, #21
 8003732:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003736:	4b08      	ldr	r3, [pc, #32]	; (8003758 <I2C_TransferConfig+0x60>)
 8003738:	430b      	orrs	r3, r1
 800373a:	43db      	mvns	r3, r3
 800373c:	ea02 0103 	and.w	r1, r2, r3
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	697a      	ldr	r2, [r7, #20]
 8003746:	430a      	orrs	r2, r1
 8003748:	605a      	str	r2, [r3, #4]
 800374a:	bf00      	nop
 800374c:	371c      	adds	r7, #28
 800374e:	46bd      	mov	sp, r7
 8003750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003754:	4770      	bx	lr
 8003756:	bf00      	nop
 8003758:	03ff63ff 	.word	0x03ff63ff

0800375c <HAL_I2CEx_ConfigAnalogFilter>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
 800375c:	b480      	push	{r7}
 800375e:	b083      	sub	sp, #12
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
 8003764:	6039      	str	r1, [r7, #0]
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800376c:	b2db      	uxtb	r3, r3
 800376e:	2b20      	cmp	r3, #32
 8003770:	d138      	bne.n	80037e4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  if (hi2c->State == HAL_I2C_STATE_READY)
  {
    /* Process Locked */
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003778:	2b01      	cmp	r3, #1
 800377a:	d101      	bne.n	8003780 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800377c:	2302      	movs	r3, #2
 800377e:	e032      	b.n	80037e6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2201      	movs	r2, #1
 8003784:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    __HAL_LOCK(hi2c);

 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2224      	movs	r2, #36	; 0x24
 800378c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	681a      	ldr	r2, [r3, #0]
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f022 0201 	bic.w	r2, r2, #1
 800379e:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE(hi2c);

    /* Reset I2Cx ANOFF bit */
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	681a      	ldr	r2, [r3, #0]
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80037ae:	601a      	str	r2, [r3, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);

    /* Set analog filter bit*/
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	6819      	ldr	r1, [r3, #0]
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	683a      	ldr	r2, [r7, #0]
 80037bc:	430a      	orrs	r2, r1
 80037be:	601a      	str	r2, [r3, #0]
    hi2c->Instance->CR1 |= AnalogFilter;

 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	681a      	ldr	r2, [r3, #0]
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f042 0201 	orr.w	r2, r2, #1
 80037ce:	601a      	str	r2, [r3, #0]
    __HAL_I2C_ENABLE(hi2c);

 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2220      	movs	r2, #32
 80037d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2200      	movs	r2, #0
 80037dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    __HAL_UNLOCK(hi2c);

 80037e0:	2300      	movs	r3, #0
 80037e2:	e000      	b.n	80037e6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
    return HAL_OK;
  }
  else
  {
 80037e4:	2302      	movs	r3, #2
    return HAL_BUSY;
  }
 80037e6:	4618      	mov	r0, r3
 80037e8:	370c      	adds	r7, #12
 80037ea:	46bd      	mov	sp, r7
 80037ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f0:	4770      	bx	lr

080037f2 <HAL_I2CEx_ConfigDigitalFilter>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
 80037f2:	b480      	push	{r7}
 80037f4:	b085      	sub	sp, #20
 80037f6:	af00      	add	r7, sp, #0
 80037f8:	6078      	str	r0, [r7, #4]
 80037fa:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg;

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003802:	b2db      	uxtb	r3, r3
 8003804:	2b20      	cmp	r3, #32
 8003806:	d139      	bne.n	800387c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  if (hi2c->State == HAL_I2C_STATE_READY)
  {
    /* Process Locked */
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800380e:	2b01      	cmp	r3, #1
 8003810:	d101      	bne.n	8003816 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003812:	2302      	movs	r3, #2
 8003814:	e033      	b.n	800387e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2201      	movs	r2, #1
 800381a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    __HAL_LOCK(hi2c);

 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2224      	movs	r2, #36	; 0x24
 8003822:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	681a      	ldr	r2, [r3, #0]
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f022 0201 	bic.w	r2, r2, #1
 8003834:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE(hi2c);

    /* Get the old register value */
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	60fb      	str	r3, [r7, #12]
    tmpreg = hi2c->Instance->CR1;

    /* Reset I2Cx DNF bits [11:8] */
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003844:	60fb      	str	r3, [r7, #12]
    tmpreg &= ~(I2C_CR1_DNF);

    /* Set I2Cx DNF coefficient */
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	021b      	lsls	r3, r3, #8
 800384a:	68fa      	ldr	r2, [r7, #12]
 800384c:	4313      	orrs	r3, r2
 800384e:	60fb      	str	r3, [r7, #12]
    tmpreg |= DigitalFilter << 8U;

    /* Store the new register value */
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	68fa      	ldr	r2, [r7, #12]
 8003856:	601a      	str	r2, [r3, #0]
    hi2c->Instance->CR1 = tmpreg;

 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	681a      	ldr	r2, [r3, #0]
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f042 0201 	orr.w	r2, r2, #1
 8003866:	601a      	str	r2, [r3, #0]
    __HAL_I2C_ENABLE(hi2c);

 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2220      	movs	r2, #32
 800386c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2200      	movs	r2, #0
 8003874:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    __HAL_UNLOCK(hi2c);

 8003878:	2300      	movs	r3, #0
 800387a:	e000      	b.n	800387e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
    return HAL_OK;
  }
  else
  {
 800387c:	2302      	movs	r3, #2
    return HAL_BUSY;
  }
 800387e:	4618      	mov	r0, r3
 8003880:	3714      	adds	r7, #20
 8003882:	46bd      	mov	sp, r7
 8003884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003888:	4770      	bx	lr

0800388a <HAL_PCD_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx;
 800388a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800388c:	b08f      	sub	sp, #60	; 0x3c
 800388e:	af0a      	add	r7, sp, #40	; 0x28
 8003890:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
  {
    return HAL_ERROR;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d101      	bne.n	800389c <HAL_PCD_Init+0x12>
  }

 8003898:	2301      	movs	r3, #1
 800389a:	e116      	b.n	8003aca <HAL_PCD_Init+0x240>
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	60bb      	str	r3, [r7, #8]
  if (hpcd->State == HAL_PCD_STATE_RESET)
  {
    /* Allocate lock resource and initialize it */
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80038a8:	b2db      	uxtb	r3, r3
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d106      	bne.n	80038bc <HAL_PCD_Init+0x32>
    hpcd->Lock = HAL_UNLOCKED;

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2200      	movs	r2, #0
 80038b2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }
 80038b6:	6878      	ldr	r0, [r7, #4]
 80038b8:	f7fe f9e8 	bl	8001c8c <HAL_PCD_MspInit>

  hpcd->State = HAL_PCD_STATE_BUSY;

#if defined (USB_OTG_FS)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2203      	movs	r2, #3
 80038c0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
  {
    hpcd->Init.dma_enable = 0U;
 80038c4:	68bb      	ldr	r3, [r7, #8]
 80038c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d102      	bne.n	80038d6 <HAL_PCD_Init+0x4c>
  }
#endif /* defined (USB_OTG_FS) */
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2200      	movs	r2, #0
 80038d4:	611a      	str	r2, [r3, #16]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);

  /*Init the Core (common init.) */
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	4618      	mov	r0, r3
 80038dc:	f004 f80d 	bl	80078fa <USB_DisableGlobalInt>
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	603b      	str	r3, [r7, #0]
 80038e6:	687e      	ldr	r6, [r7, #4]
 80038e8:	466d      	mov	r5, sp
 80038ea:	f106 0410 	add.w	r4, r6, #16
 80038ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80038f0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80038f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80038f4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80038f6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80038fa:	e885 0003 	stmia.w	r5, {r0, r1}
 80038fe:	1d33      	adds	r3, r6, #4
 8003900:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003902:	6838      	ldr	r0, [r7, #0]
 8003904:	f003 ffcd 	bl	80078a2 <USB_CoreInit>
 8003908:	4603      	mov	r3, r0
 800390a:	2b00      	cmp	r3, #0
 800390c:	d005      	beq.n	800391a <HAL_PCD_Init+0x90>
    return HAL_ERROR;
  }
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2202      	movs	r2, #2
 8003912:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

 8003916:	2301      	movs	r3, #1
 8003918:	e0d7      	b.n	8003aca <HAL_PCD_Init+0x240>
  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);

  /* Init endpoints structures */
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	2100      	movs	r1, #0
 8003920:	4618      	mov	r0, r3
 8003922:	f003 fffb 	bl	800791c <USB_SetCurrentMode>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
  {
    /* Init ep structure */
 8003926:	2300      	movs	r3, #0
 8003928:	73fb      	strb	r3, [r7, #15]
 800392a:	e04a      	b.n	80039c2 <HAL_PCD_Init+0x138>
    hpcd->IN_ep[i].is_in = 1U;
    hpcd->IN_ep[i].num = i;
    hpcd->IN_ep[i].tx_fifo_num = i;
 800392c:	7bfa      	ldrb	r2, [r7, #15]
 800392e:	6879      	ldr	r1, [r7, #4]
 8003930:	4613      	mov	r3, r2
 8003932:	00db      	lsls	r3, r3, #3
 8003934:	4413      	add	r3, r2
 8003936:	009b      	lsls	r3, r3, #2
 8003938:	440b      	add	r3, r1
 800393a:	333d      	adds	r3, #61	; 0x3d
 800393c:	2201      	movs	r2, #1
 800393e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
 8003940:	7bfa      	ldrb	r2, [r7, #15]
 8003942:	6879      	ldr	r1, [r7, #4]
 8003944:	4613      	mov	r3, r2
 8003946:	00db      	lsls	r3, r3, #3
 8003948:	4413      	add	r3, r2
 800394a:	009b      	lsls	r3, r3, #2
 800394c:	440b      	add	r3, r1
 800394e:	333c      	adds	r3, #60	; 0x3c
 8003950:	7bfa      	ldrb	r2, [r7, #15]
 8003952:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003954:	7bfa      	ldrb	r2, [r7, #15]
 8003956:	7bfb      	ldrb	r3, [r7, #15]
 8003958:	b298      	uxth	r0, r3
 800395a:	6879      	ldr	r1, [r7, #4]
 800395c:	4613      	mov	r3, r2
 800395e:	00db      	lsls	r3, r3, #3
 8003960:	4413      	add	r3, r2
 8003962:	009b      	lsls	r3, r3, #2
 8003964:	440b      	add	r3, r1
 8003966:	3344      	adds	r3, #68	; 0x44
 8003968:	4602      	mov	r2, r0
 800396a:	801a      	strh	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
    hpcd->IN_ep[i].xfer_buff = 0U;
 800396c:	7bfa      	ldrb	r2, [r7, #15]
 800396e:	6879      	ldr	r1, [r7, #4]
 8003970:	4613      	mov	r3, r2
 8003972:	00db      	lsls	r3, r3, #3
 8003974:	4413      	add	r3, r2
 8003976:	009b      	lsls	r3, r3, #2
 8003978:	440b      	add	r3, r1
 800397a:	3340      	adds	r3, #64	; 0x40
 800397c:	2200      	movs	r2, #0
 800397e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003980:	7bfa      	ldrb	r2, [r7, #15]
 8003982:	6879      	ldr	r1, [r7, #4]
 8003984:	4613      	mov	r3, r2
 8003986:	00db      	lsls	r3, r3, #3
 8003988:	4413      	add	r3, r2
 800398a:	009b      	lsls	r3, r3, #2
 800398c:	440b      	add	r3, r1
 800398e:	3348      	adds	r3, #72	; 0x48
 8003990:	2200      	movs	r2, #0
 8003992:	601a      	str	r2, [r3, #0]
  }
 8003994:	7bfa      	ldrb	r2, [r7, #15]
 8003996:	6879      	ldr	r1, [r7, #4]
 8003998:	4613      	mov	r3, r2
 800399a:	00db      	lsls	r3, r3, #3
 800399c:	4413      	add	r3, r2
 800399e:	009b      	lsls	r3, r3, #2
 80039a0:	440b      	add	r3, r1
 80039a2:	334c      	adds	r3, #76	; 0x4c
 80039a4:	2200      	movs	r2, #0
 80039a6:	601a      	str	r2, [r3, #0]

 80039a8:	7bfa      	ldrb	r2, [r7, #15]
 80039aa:	6879      	ldr	r1, [r7, #4]
 80039ac:	4613      	mov	r3, r2
 80039ae:	00db      	lsls	r3, r3, #3
 80039b0:	4413      	add	r3, r2
 80039b2:	009b      	lsls	r3, r3, #2
 80039b4:	440b      	add	r3, r1
 80039b6:	3354      	adds	r3, #84	; 0x54
 80039b8:	2200      	movs	r2, #0
 80039ba:	601a      	str	r2, [r3, #0]
    /* Init ep structure */
 80039bc:	7bfb      	ldrb	r3, [r7, #15]
 80039be:	3301      	adds	r3, #1
 80039c0:	73fb      	strb	r3, [r7, #15]
 80039c2:	7bfa      	ldrb	r2, [r7, #15]
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	685b      	ldr	r3, [r3, #4]
 80039c8:	429a      	cmp	r2, r3
 80039ca:	d3af      	bcc.n	800392c <HAL_PCD_Init+0xa2>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80039cc:	2300      	movs	r3, #0
 80039ce:	73fb      	strb	r3, [r7, #15]
 80039d0:	e044      	b.n	8003a5c <HAL_PCD_Init+0x1d2>
    hpcd->OUT_ep[i].num = i;
    /* Control until ep is activated */
 80039d2:	7bfa      	ldrb	r2, [r7, #15]
 80039d4:	6879      	ldr	r1, [r7, #4]
 80039d6:	4613      	mov	r3, r2
 80039d8:	00db      	lsls	r3, r3, #3
 80039da:	4413      	add	r3, r2
 80039dc:	009b      	lsls	r3, r3, #2
 80039de:	440b      	add	r3, r1
 80039e0:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80039e4:	2200      	movs	r2, #0
 80039e6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80039e8:	7bfa      	ldrb	r2, [r7, #15]
 80039ea:	6879      	ldr	r1, [r7, #4]
 80039ec:	4613      	mov	r3, r2
 80039ee:	00db      	lsls	r3, r3, #3
 80039f0:	4413      	add	r3, r2
 80039f2:	009b      	lsls	r3, r3, #2
 80039f4:	440b      	add	r3, r1
 80039f6:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80039fa:	7bfa      	ldrb	r2, [r7, #15]
 80039fc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80039fe:	7bfa      	ldrb	r2, [r7, #15]
 8003a00:	6879      	ldr	r1, [r7, #4]
 8003a02:	4613      	mov	r3, r2
 8003a04:	00db      	lsls	r3, r3, #3
 8003a06:	4413      	add	r3, r2
 8003a08:	009b      	lsls	r3, r3, #2
 8003a0a:	440b      	add	r3, r1
 8003a0c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003a10:	2200      	movs	r2, #0
 8003a12:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003a14:	7bfa      	ldrb	r2, [r7, #15]
 8003a16:	6879      	ldr	r1, [r7, #4]
 8003a18:	4613      	mov	r3, r2
 8003a1a:	00db      	lsls	r3, r3, #3
 8003a1c:	4413      	add	r3, r2
 8003a1e:	009b      	lsls	r3, r3, #2
 8003a20:	440b      	add	r3, r1
 8003a22:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8003a26:	2200      	movs	r2, #0
 8003a28:	601a      	str	r2, [r3, #0]
  }
 8003a2a:	7bfa      	ldrb	r2, [r7, #15]
 8003a2c:	6879      	ldr	r1, [r7, #4]
 8003a2e:	4613      	mov	r3, r2
 8003a30:	00db      	lsls	r3, r3, #3
 8003a32:	4413      	add	r3, r2
 8003a34:	009b      	lsls	r3, r3, #2
 8003a36:	440b      	add	r3, r1
 8003a38:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	601a      	str	r2, [r3, #0]

 8003a40:	7bfa      	ldrb	r2, [r7, #15]
 8003a42:	6879      	ldr	r1, [r7, #4]
 8003a44:	4613      	mov	r3, r2
 8003a46:	00db      	lsls	r3, r3, #3
 8003a48:	4413      	add	r3, r2
 8003a4a:	009b      	lsls	r3, r3, #2
 8003a4c:	440b      	add	r3, r1
 8003a4e:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003a52:	2200      	movs	r2, #0
 8003a54:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].is_in = 0U;
 8003a56:	7bfb      	ldrb	r3, [r7, #15]
 8003a58:	3301      	adds	r3, #1
 8003a5a:	73fb      	strb	r3, [r7, #15]
 8003a5c:	7bfa      	ldrb	r2, [r7, #15]
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	685b      	ldr	r3, [r3, #4]
 8003a62:	429a      	cmp	r2, r3
 8003a64:	d3b5      	bcc.n	80039d2 <HAL_PCD_Init+0x148>
  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	603b      	str	r3, [r7, #0]
 8003a6c:	687e      	ldr	r6, [r7, #4]
 8003a6e:	466d      	mov	r5, sp
 8003a70:	f106 0410 	add.w	r4, r6, #16
 8003a74:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003a76:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003a78:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003a7a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003a7c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003a80:	e885 0003 	stmia.w	r5, {r0, r1}
 8003a84:	1d33      	adds	r3, r6, #4
 8003a86:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003a88:	6838      	ldr	r0, [r7, #0]
 8003a8a:	f003 ff93 	bl	80079b4 <USB_DevInit>
 8003a8e:	4603      	mov	r3, r0
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d005      	beq.n	8003aa0 <HAL_PCD_Init+0x216>
    return HAL_ERROR;
  }
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2202      	movs	r2, #2
 8003a98:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

 8003a9c:	2301      	movs	r3, #1
 8003a9e:	e014      	b.n	8003aca <HAL_PCD_Init+0x240>
  hpcd->USB_Address = 0U;
  hpcd->State = HAL_PCD_STATE_READY;
  
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  /* Activate LPM */
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2201      	movs	r2, #1
 8003aac:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ab4:	2b01      	cmp	r3, #1
 8003ab6:	d102      	bne.n	8003abe <HAL_PCD_Init+0x234>
  }

 8003ab8:	6878      	ldr	r0, [r7, #4]
 8003aba:	f000 f80a 	bl	8003ad2 <HAL_PCDEx_ActivateLPM>
  (void)USB_DevDisconnect(hpcd->Instance);

  return HAL_OK;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	f004 f93f 	bl	8007d46 <USB_DevDisconnect>
}

 8003ac8:	2300      	movs	r3, #0
/**
 8003aca:	4618      	mov	r0, r3
 8003acc:	3714      	adds	r7, #20
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003ad2 <HAL_PCDEx_ActivateLPM>:
/**
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
 8003ad2:	b480      	push	{r7}
 8003ad4:	b085      	sub	sp, #20
 8003ad6:	af00      	add	r7, sp, #0
 8003ad8:	6078      	str	r0, [r7, #4]
{
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	60fb      	str	r3, [r7, #12]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;

 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2201      	movs	r2, #1
 8003ae4:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->lpm_active = 1U;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2200      	movs	r2, #0
 8003aec:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  hpcd->LPM_State = LPM_L0;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	699b      	ldr	r3, [r3, #24]
 8003af4:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	619a      	str	r2, [r3, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b04:	f043 0303 	orr.w	r3, r3, #3
 8003b08:	68fa      	ldr	r2, [r7, #12]
 8003b0a:	6553      	str	r3, [r2, #84]	; 0x54
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);

 8003b0c:	2300      	movs	r3, #0
  return HAL_OK;
 8003b0e:	4618      	mov	r0, r3
 8003b10:	3714      	adds	r7, #20
 8003b12:	46bd      	mov	sp, r7
 8003b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b18:	4770      	bx	lr
	...

08003b1c <HAL_PWR_EnableBkUpAccess>:
  *        disabled.
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
 8003b1c:	b480      	push	{r7}
 8003b1e:	af00      	add	r7, sp, #0
{
 8003b20:	4b05      	ldr	r3, [pc, #20]	; (8003b38 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	4a04      	ldr	r2, [pc, #16]	; (8003b38 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003b26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b2a:	6013      	str	r3, [r2, #0]
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003b2c:	bf00      	nop
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b34:	4770      	bx	lr
 8003b36:	bf00      	nop
 8003b38:	40007000 	.word	0x40007000

08003b3c <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
 8003b3c:	b480      	push	{r7}
 8003b3e:	af00      	add	r7, sp, #0
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
 8003b40:	4b04      	ldr	r3, [pc, #16]	; (8003b54 <HAL_PWREx_GetVoltageRange+0x18>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
 8003b48:	4618      	mov	r0, r3
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b50:	4770      	bx	lr
 8003b52:	bf00      	nop
 8003b54:	40007000 	.word	0x40007000

08003b58 <HAL_PWREx_ControlVoltageScaling>:
  * @note  When moving from Range 2 to Range 1, the API waits for VOSF flag to be
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
 8003b58:	b480      	push	{r7}
 8003b5a:	b085      	sub	sp, #20
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

#else

  /* If Set Range 1 */
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b66:	d130      	bne.n	8003bca <HAL_PWREx_ControlVoltageScaling+0x72>
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
  {
 8003b68:	4b23      	ldr	r3, [pc, #140]	; (8003bf8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003b70:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b74:	d038      	beq.n	8003be8 <HAL_PWREx_ControlVoltageScaling+0x90>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
    {
      /* Set Range 1 */
 8003b76:	4b20      	ldr	r3, [pc, #128]	; (8003bf8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003b7e:	4a1e      	ldr	r2, [pc, #120]	; (8003bf8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003b80:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003b84:	6013      	str	r3, [r2, #0]
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);

      /* Wait until VOSF is cleared */
 8003b86:	4b1d      	ldr	r3, [pc, #116]	; (8003bfc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	2232      	movs	r2, #50	; 0x32
 8003b8c:	fb02 f303 	mul.w	r3, r2, r3
 8003b90:	4a1b      	ldr	r2, [pc, #108]	; (8003c00 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003b92:	fba2 2303 	umull	r2, r3, r2, r3
 8003b96:	0c9b      	lsrs	r3, r3, #18
 8003b98:	3301      	adds	r3, #1
 8003b9a:	60fb      	str	r3, [r7, #12]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003b9c:	e002      	b.n	8003ba4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
      {
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	3b01      	subs	r3, #1
 8003ba2:	60fb      	str	r3, [r7, #12]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003ba4:	4b14      	ldr	r3, [pc, #80]	; (8003bf8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003ba6:	695b      	ldr	r3, [r3, #20]
 8003ba8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bb0:	d102      	bne.n	8003bb8 <HAL_PWREx_ControlVoltageScaling+0x60>
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d1f2      	bne.n	8003b9e <HAL_PWREx_ControlVoltageScaling+0x46>
        wait_loop_index--;
      }
 8003bb8:	4b0f      	ldr	r3, [pc, #60]	; (8003bf8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003bba:	695b      	ldr	r3, [r3, #20]
 8003bbc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bc0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bc4:	d110      	bne.n	8003be8 <HAL_PWREx_ControlVoltageScaling+0x90>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
      {
 8003bc6:	2303      	movs	r3, #3
 8003bc8:	e00f      	b.n	8003bea <HAL_PWREx_ControlVoltageScaling+0x92>
        return HAL_TIMEOUT;
      }
    }
  }
  else
  {
 8003bca:	4b0b      	ldr	r3, [pc, #44]	; (8003bf8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003bd2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bd6:	d007      	beq.n	8003be8 <HAL_PWREx_ControlVoltageScaling+0x90>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
    {
      /* Set Range 2 */
 8003bd8:	4b07      	ldr	r3, [pc, #28]	; (8003bf8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003be0:	4a05      	ldr	r2, [pc, #20]	; (8003bf8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003be2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003be6:	6013      	str	r3, [r2, #0]
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

 8003be8:	2300      	movs	r3, #0
  return HAL_OK;
 8003bea:	4618      	mov	r0, r3
 8003bec:	3714      	adds	r7, #20
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf4:	4770      	bx	lr
 8003bf6:	bf00      	nop
 8003bf8:	40007000 	.word	0x40007000
 8003bfc:	20000004 	.word	0x20000004
 8003c00:	431bde83 	.word	0x431bde83

08003c04 <HAL_PWREx_EnableVddUSB>:
/**
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
 8003c04:	b480      	push	{r7}
 8003c06:	af00      	add	r7, sp, #0
{
 8003c08:	4b05      	ldr	r3, [pc, #20]	; (8003c20 <HAL_PWREx_EnableVddUSB+0x1c>)
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	4a04      	ldr	r2, [pc, #16]	; (8003c20 <HAL_PWREx_EnableVddUSB+0x1c>)
 8003c0e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003c12:	6053      	str	r3, [r2, #4]
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8003c14:	bf00      	nop
 8003c16:	46bd      	mov	sp, r7
 8003c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1c:	4770      	bx	lr
 8003c1e:	bf00      	nop
 8003c20:	40007000 	.word	0x40007000

08003c24 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b086      	sub	sp, #24
 8003c28:	af02      	add	r7, sp, #8
 8003c2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8003c2c:	f7fe fa98 	bl	8002160 <HAL_GetTick>
 8003c30:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d101      	bne.n	8003c3c <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8003c38:	2301      	movs	r3, #1
 8003c3a:	e063      	b.n	8003d04 <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003c42:	b2db      	uxtb	r3, r3
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d10b      	bne.n	8003c60 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8003c50:	6878      	ldr	r0, [r7, #4]
 8003c52:	f7fd fe8f 	bl	8001974 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8003c56:	f241 3188 	movw	r1, #5000	; 0x1388
 8003c5a:	6878      	ldr	r0, [r7, #4]
 8003c5c:	f000 f858 	bl	8003d10 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	689b      	ldr	r3, [r3, #8]
 8003c6e:	3b01      	subs	r3, #1
 8003c70:	021a      	lsls	r2, r3, #8
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	430a      	orrs	r2, r1
 8003c78:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c7e:	9300      	str	r3, [sp, #0]
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	2200      	movs	r2, #0
 8003c84:	2120      	movs	r1, #32
 8003c86:	6878      	ldr	r0, [r7, #4]
 8003c88:	f000 f850 	bl	8003d2c <QSPI_WaitFlagStateUntilTimeout>
 8003c8c:	4603      	mov	r3, r0
 8003c8e:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8003c90:	7afb      	ldrb	r3, [r7, #11]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d131      	bne.n	8003cfa <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003ca0:	f023 0310 	bic.w	r3, r3, #16
 8003ca4:	687a      	ldr	r2, [r7, #4]
 8003ca6:	6852      	ldr	r2, [r2, #4]
 8003ca8:	0611      	lsls	r1, r2, #24
 8003caa:	687a      	ldr	r2, [r7, #4]
 8003cac:	68d2      	ldr	r2, [r2, #12]
 8003cae:	4311      	orrs	r1, r2
 8003cb0:	687a      	ldr	r2, [r7, #4]
 8003cb2:	6812      	ldr	r2, [r2, #0]
 8003cb4:	430b      	orrs	r3, r1
 8003cb6:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	685a      	ldr	r2, [r3, #4]
 8003cbe:	4b13      	ldr	r3, [pc, #76]	; (8003d0c <HAL_QSPI_Init+0xe8>)
 8003cc0:	4013      	ands	r3, r2
 8003cc2:	687a      	ldr	r2, [r7, #4]
 8003cc4:	6912      	ldr	r2, [r2, #16]
 8003cc6:	0411      	lsls	r1, r2, #16
 8003cc8:	687a      	ldr	r2, [r7, #4]
 8003cca:	6952      	ldr	r2, [r2, #20]
 8003ccc:	4311      	orrs	r1, r2
 8003cce:	687a      	ldr	r2, [r7, #4]
 8003cd0:	6992      	ldr	r2, [r2, #24]
 8003cd2:	4311      	orrs	r1, r2
 8003cd4:	687a      	ldr	r2, [r7, #4]
 8003cd6:	6812      	ldr	r2, [r2, #0]
 8003cd8:	430b      	orrs	r3, r1
 8003cda:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	681a      	ldr	r2, [r3, #0]
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f042 0201 	orr.w	r2, r2, #1
 8003cea:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2200      	movs	r2, #0
 8003cf0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	2201      	movs	r2, #1
 8003cf6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 8003d02:	7afb      	ldrb	r3, [r7, #11]
}
 8003d04:	4618      	mov	r0, r3
 8003d06:	3710      	adds	r7, #16
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	bd80      	pop	{r7, pc}
 8003d0c:	ffe0f8fe 	.word	0xffe0f8fe

08003d10 <HAL_QSPI_SetTimeout>:
  HAL_StatusTypeDef status = HAL_OK;

  /* Process locked */
  __HAL_LOCK(hqspi);

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8003d10:	b480      	push	{r7}
 8003d12:	b083      	sub	sp, #12
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
 8003d18:	6039      	str	r1, [r7, #0]
  {
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	683a      	ldr	r2, [r7, #0]
 8003d1e:	641a      	str	r2, [r3, #64]	; 0x40
    /* Synchronize init structure with new FIFO threshold value */
 8003d20:	bf00      	nop
 8003d22:	370c      	adds	r7, #12
 8003d24:	46bd      	mov	sp, r7
 8003d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2a:	4770      	bx	lr

08003d2c <QSPI_WaitFlagStateUntilTimeout>:

        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b084      	sub	sp, #16
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	60f8      	str	r0, [r7, #12]
 8003d34:	60b9      	str	r1, [r7, #8]
 8003d36:	603b      	str	r3, [r7, #0]
 8003d38:	4613      	mov	r3, r2
 8003d3a:	71fb      	strb	r3, [r7, #7]
}

 8003d3c:	e01a      	b.n	8003d74 <QSPI_WaitFlagStateUntilTimeout+0x48>
/**
  * @brief  Configure the communication registers.
  * @param  hqspi : QSPI handle
 8003d3e:	69bb      	ldr	r3, [r7, #24]
 8003d40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d44:	d016      	beq.n	8003d74 <QSPI_WaitFlagStateUntilTimeout+0x48>
  * @param  cmd : structure that contains the command configuration information
  * @param  FunctionalMode : functional mode to configured
 8003d46:	f7fe fa0b 	bl	8002160 <HAL_GetTick>
 8003d4a:	4602      	mov	r2, r0
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	1ad3      	subs	r3, r2, r3
 8003d50:	69ba      	ldr	r2, [r7, #24]
 8003d52:	429a      	cmp	r2, r3
 8003d54:	d302      	bcc.n	8003d5c <QSPI_WaitFlagStateUntilTimeout+0x30>
 8003d56:	69bb      	ldr	r3, [r7, #24]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d10b      	bne.n	8003d74 <QSPI_WaitFlagStateUntilTimeout+0x48>
  *           This parameter can be one of the following values:
  *            @arg QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE: Indirect write mode
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	2204      	movs	r2, #4
 8003d60:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  *            @arg QSPI_FUNCTIONAL_MODE_INDIRECT_READ: Indirect read mode
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d68:	f043 0201 	orr.w	r2, r3, #1
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	63da      	str	r2, [r3, #60]	; 0x3c
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
 8003d70:	2301      	movs	r3, #1
 8003d72:	e00e      	b.n	8003d92 <QSPI_WaitFlagStateUntilTimeout+0x66>

 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	689a      	ldr	r2, [r3, #8]
 8003d7a:	68bb      	ldr	r3, [r7, #8]
 8003d7c:	4013      	ands	r3, r2
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	bf14      	ite	ne
 8003d82:	2301      	movne	r3, #1
 8003d84:	2300      	moveq	r3, #0
 8003d86:	b2db      	uxtb	r3, r3
 8003d88:	461a      	mov	r2, r3
 8003d8a:	79fb      	ldrb	r3, [r7, #7]
 8003d8c:	429a      	cmp	r2, r3
 8003d8e:	d1d6      	bne.n	8003d3e <QSPI_WaitFlagStateUntilTimeout+0x12>
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 8003d90:	2300      	movs	r3, #0
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));
 8003d92:	4618      	mov	r0, r3
 8003d94:	3710      	adds	r7, #16
 8003d96:	46bd      	mov	sp, r7
 8003d98:	bd80      	pop	{r7, pc}
	...

08003d9c <HAL_RCC_OscConfig>:
  *         first and then LSE On or LSE Bypass.
  * @note   Transition HSE Bypass to HSE On and HSE On to HSE Bypass are not
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b088      	sub	sp, #32
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d101      	bne.n	8003dae <HAL_RCC_OscConfig+0x12>
  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003daa:	2301      	movs	r3, #1
 8003dac:	e3ca      	b.n	8004544 <HAL_RCC_OscConfig+0x7a8>
  {
    return HAL_ERROR;
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8003dae:	4b97      	ldr	r3, [pc, #604]	; (800400c <HAL_RCC_OscConfig+0x270>)
 8003db0:	689b      	ldr	r3, [r3, #8]
 8003db2:	f003 030c 	and.w	r3, r3, #12
 8003db6:	61bb      	str	r3, [r7, #24]

 8003db8:	4b94      	ldr	r3, [pc, #592]	; (800400c <HAL_RCC_OscConfig+0x270>)
 8003dba:	68db      	ldr	r3, [r3, #12]
 8003dbc:	f003 0303 	and.w	r3, r3, #3
 8003dc0:	617b      	str	r3, [r7, #20]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();

 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f003 0310 	and.w	r3, r3, #16
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	f000 80e4 	beq.w	8003f98 <HAL_RCC_OscConfig+0x1fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

 8003dd0:	69bb      	ldr	r3, [r7, #24]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d007      	beq.n	8003de6 <HAL_RCC_OscConfig+0x4a>
 8003dd6:	69bb      	ldr	r3, [r7, #24]
 8003dd8:	2b0c      	cmp	r3, #12
 8003dda:	f040 808b 	bne.w	8003ef4 <HAL_RCC_OscConfig+0x158>
    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
 8003dde:	697b      	ldr	r3, [r7, #20]
 8003de0:	2b01      	cmp	r3, #1
 8003de2:	f040 8087 	bne.w	8003ef4 <HAL_RCC_OscConfig+0x158>
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003de6:	4b89      	ldr	r3, [pc, #548]	; (800400c <HAL_RCC_OscConfig+0x270>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f003 0302 	and.w	r3, r3, #2
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d005      	beq.n	8003dfe <HAL_RCC_OscConfig+0x62>
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	699b      	ldr	r3, [r3, #24]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d101      	bne.n	8003dfe <HAL_RCC_OscConfig+0x62>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	e3a2      	b.n	8004544 <HAL_RCC_OscConfig+0x7a8>

       /* Otherwise, just the calibration and MSI range change are allowed */
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6a1a      	ldr	r2, [r3, #32]
 8003e02:	4b82      	ldr	r3, [pc, #520]	; (800400c <HAL_RCC_OscConfig+0x270>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f003 0308 	and.w	r3, r3, #8
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d004      	beq.n	8003e18 <HAL_RCC_OscConfig+0x7c>
 8003e0e:	4b7f      	ldr	r3, [pc, #508]	; (800400c <HAL_RCC_OscConfig+0x270>)
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e16:	e005      	b.n	8003e24 <HAL_RCC_OscConfig+0x88>
 8003e18:	4b7c      	ldr	r3, [pc, #496]	; (800400c <HAL_RCC_OscConfig+0x270>)
 8003e1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e1e:	091b      	lsrs	r3, r3, #4
 8003e20:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e24:	4293      	cmp	r3, r2
 8003e26:	d223      	bcs.n	8003e70 <HAL_RCC_OscConfig+0xd4>
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
        {
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6a1b      	ldr	r3, [r3, #32]
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	f000 fd87 	bl	8004940 <RCC_SetFlashLatencyFromMSIRange>
 8003e32:	4603      	mov	r3, r0
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d001      	beq.n	8003e3c <HAL_RCC_OscConfig+0xa0>
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003e38:	2301      	movs	r3, #1
 8003e3a:	e383      	b.n	8004544 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_ERROR;
          }

 8003e3c:	4b73      	ldr	r3, [pc, #460]	; (800400c <HAL_RCC_OscConfig+0x270>)
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	4a72      	ldr	r2, [pc, #456]	; (800400c <HAL_RCC_OscConfig+0x270>)
 8003e42:	f043 0308 	orr.w	r3, r3, #8
 8003e46:	6013      	str	r3, [r2, #0]
 8003e48:	4b70      	ldr	r3, [pc, #448]	; (800400c <HAL_RCC_OscConfig+0x270>)
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6a1b      	ldr	r3, [r3, #32]
 8003e54:	496d      	ldr	r1, [pc, #436]	; (800400c <HAL_RCC_OscConfig+0x270>)
 8003e56:	4313      	orrs	r3, r2
 8003e58:	600b      	str	r3, [r1, #0]
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003e5a:	4b6c      	ldr	r3, [pc, #432]	; (800400c <HAL_RCC_OscConfig+0x270>)
 8003e5c:	685b      	ldr	r3, [r3, #4]
 8003e5e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	69db      	ldr	r3, [r3, #28]
 8003e66:	021b      	lsls	r3, r3, #8
 8003e68:	4968      	ldr	r1, [pc, #416]	; (800400c <HAL_RCC_OscConfig+0x270>)
 8003e6a:	4313      	orrs	r3, r2
 8003e6c:	604b      	str	r3, [r1, #4]
 8003e6e:	e025      	b.n	8003ebc <HAL_RCC_OscConfig+0x120>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
 8003e70:	4b66      	ldr	r3, [pc, #408]	; (800400c <HAL_RCC_OscConfig+0x270>)
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	4a65      	ldr	r2, [pc, #404]	; (800400c <HAL_RCC_OscConfig+0x270>)
 8003e76:	f043 0308 	orr.w	r3, r3, #8
 8003e7a:	6013      	str	r3, [r2, #0]
 8003e7c:	4b63      	ldr	r3, [pc, #396]	; (800400c <HAL_RCC_OscConfig+0x270>)
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6a1b      	ldr	r3, [r3, #32]
 8003e88:	4960      	ldr	r1, [pc, #384]	; (800400c <HAL_RCC_OscConfig+0x270>)
 8003e8a:	4313      	orrs	r3, r2
 8003e8c:	600b      	str	r3, [r1, #0]
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003e8e:	4b5f      	ldr	r3, [pc, #380]	; (800400c <HAL_RCC_OscConfig+0x270>)
 8003e90:	685b      	ldr	r3, [r3, #4]
 8003e92:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	69db      	ldr	r3, [r3, #28]
 8003e9a:	021b      	lsls	r3, r3, #8
 8003e9c:	495b      	ldr	r1, [pc, #364]	; (800400c <HAL_RCC_OscConfig+0x270>)
 8003e9e:	4313      	orrs	r3, r2
 8003ea0:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);

          /* Decrease number of wait states update if necessary */
 8003ea2:	69bb      	ldr	r3, [r7, #24]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d109      	bne.n	8003ebc <HAL_RCC_OscConfig+0x120>
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6a1b      	ldr	r3, [r3, #32]
 8003eac:	4618      	mov	r0, r3
 8003eae:	f000 fd47 	bl	8004940 <RCC_SetFlashLatencyFromMSIRange>
 8003eb2:	4603      	mov	r3, r0
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d001      	beq.n	8003ebc <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003eb8:	2301      	movs	r3, #1
 8003eba:	e343      	b.n	8004544 <HAL_RCC_OscConfig+0x7a8>
            {
              return HAL_ERROR;
            }
          }
        }

 8003ebc:	f000 fc4a 	bl	8004754 <HAL_RCC_GetSysClockFreq>
 8003ec0:	4602      	mov	r2, r0
 8003ec2:	4b52      	ldr	r3, [pc, #328]	; (800400c <HAL_RCC_OscConfig+0x270>)
 8003ec4:	689b      	ldr	r3, [r3, #8]
 8003ec6:	091b      	lsrs	r3, r3, #4
 8003ec8:	f003 030f 	and.w	r3, r3, #15
 8003ecc:	4950      	ldr	r1, [pc, #320]	; (8004010 <HAL_RCC_OscConfig+0x274>)
 8003ece:	5ccb      	ldrb	r3, [r1, r3]
 8003ed0:	f003 031f 	and.w	r3, r3, #31
 8003ed4:	fa22 f303 	lsr.w	r3, r2, r3
 8003ed8:	4a4e      	ldr	r2, [pc, #312]	; (8004014 <HAL_RCC_OscConfig+0x278>)
 8003eda:	6013      	str	r3, [r2, #0]
        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);

 8003edc:	4b4e      	ldr	r3, [pc, #312]	; (8004018 <HAL_RCC_OscConfig+0x27c>)
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	f7fd ff6f 	bl	8001dc4 <HAL_InitTick>
 8003ee6:	4603      	mov	r3, r0
 8003ee8:	73fb      	strb	r3, [r7, #15]
        /* Configure the source of time base considering new system clocks settings*/
 8003eea:	7bfb      	ldrb	r3, [r7, #15]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d052      	beq.n	8003f96 <HAL_RCC_OscConfig+0x1fa>
        status = HAL_InitTick(uwTickPrio);
        if(status != HAL_OK)
 8003ef0:	7bfb      	ldrb	r3, [r7, #15]
 8003ef2:	e327      	b.n	8004544 <HAL_RCC_OscConfig+0x7a8>
          return status;
        }
      }
    }
    else
    {
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	699b      	ldr	r3, [r3, #24]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d032      	beq.n	8003f62 <HAL_RCC_OscConfig+0x1c6>
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
      {
 8003efc:	4b43      	ldr	r3, [pc, #268]	; (800400c <HAL_RCC_OscConfig+0x270>)
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	4a42      	ldr	r2, [pc, #264]	; (800400c <HAL_RCC_OscConfig+0x270>)
 8003f02:	f043 0301 	orr.w	r3, r3, #1
 8003f06:	6013      	str	r3, [r2, #0]
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();

 8003f08:	f7fe f92a 	bl	8002160 <HAL_GetTick>
 8003f0c:	6138      	str	r0, [r7, #16]
        /* Get timeout */
        tickstart = HAL_GetTick();

 8003f0e:	e008      	b.n	8003f22 <HAL_RCC_OscConfig+0x186>
        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003f10:	f7fe f926 	bl	8002160 <HAL_GetTick>
 8003f14:	4602      	mov	r2, r0
 8003f16:	693b      	ldr	r3, [r7, #16]
 8003f18:	1ad3      	subs	r3, r2, r3
 8003f1a:	2b02      	cmp	r3, #2
 8003f1c:	d901      	bls.n	8003f22 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003f1e:	2303      	movs	r3, #3
 8003f20:	e310      	b.n	8004544 <HAL_RCC_OscConfig+0x7a8>

 8003f22:	4b3a      	ldr	r3, [pc, #232]	; (800400c <HAL_RCC_OscConfig+0x270>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f003 0302 	and.w	r3, r3, #2
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d0f0      	beq.n	8003f10 <HAL_RCC_OscConfig+0x174>
          {
            return HAL_TIMEOUT;
          }
        }
 8003f2e:	4b37      	ldr	r3, [pc, #220]	; (800400c <HAL_RCC_OscConfig+0x270>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	4a36      	ldr	r2, [pc, #216]	; (800400c <HAL_RCC_OscConfig+0x270>)
 8003f34:	f043 0308 	orr.w	r3, r3, #8
 8003f38:	6013      	str	r3, [r2, #0]
 8003f3a:	4b34      	ldr	r3, [pc, #208]	; (800400c <HAL_RCC_OscConfig+0x270>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6a1b      	ldr	r3, [r3, #32]
 8003f46:	4931      	ldr	r1, [pc, #196]	; (800400c <HAL_RCC_OscConfig+0x270>)
 8003f48:	4313      	orrs	r3, r2
 8003f4a:	600b      	str	r3, [r1, #0]
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003f4c:	4b2f      	ldr	r3, [pc, #188]	; (800400c <HAL_RCC_OscConfig+0x270>)
 8003f4e:	685b      	ldr	r3, [r3, #4]
 8003f50:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	69db      	ldr	r3, [r3, #28]
 8003f58:	021b      	lsls	r3, r3, #8
 8003f5a:	492c      	ldr	r1, [pc, #176]	; (800400c <HAL_RCC_OscConfig+0x270>)
 8003f5c:	4313      	orrs	r3, r2
 8003f5e:	604b      	str	r3, [r1, #4]
 8003f60:	e01a      	b.n	8003f98 <HAL_RCC_OscConfig+0x1fc>
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);

      }
      else
      {
 8003f62:	4b2a      	ldr	r3, [pc, #168]	; (800400c <HAL_RCC_OscConfig+0x270>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	4a29      	ldr	r2, [pc, #164]	; (800400c <HAL_RCC_OscConfig+0x270>)
 8003f68:	f023 0301 	bic.w	r3, r3, #1
 8003f6c:	6013      	str	r3, [r2, #0]
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();

 8003f6e:	f7fe f8f7 	bl	8002160 <HAL_GetTick>
 8003f72:	6138      	str	r0, [r7, #16]
        /* Get timeout */
        tickstart = HAL_GetTick();

 8003f74:	e008      	b.n	8003f88 <HAL_RCC_OscConfig+0x1ec>
        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003f76:	f7fe f8f3 	bl	8002160 <HAL_GetTick>
 8003f7a:	4602      	mov	r2, r0
 8003f7c:	693b      	ldr	r3, [r7, #16]
 8003f7e:	1ad3      	subs	r3, r2, r3
 8003f80:	2b02      	cmp	r3, #2
 8003f82:	d901      	bls.n	8003f88 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003f84:	2303      	movs	r3, #3
 8003f86:	e2dd      	b.n	8004544 <HAL_RCC_OscConfig+0x7a8>

 8003f88:	4b20      	ldr	r3, [pc, #128]	; (800400c <HAL_RCC_OscConfig+0x270>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f003 0302 	and.w	r3, r3, #2
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d1f0      	bne.n	8003f76 <HAL_RCC_OscConfig+0x1da>
 8003f94:	e000      	b.n	8003f98 <HAL_RCC_OscConfig+0x1fc>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003f96:	bf00      	nop
            return HAL_TIMEOUT;
          }
        }
      }
    }
  }
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f003 0301 	and.w	r3, r3, #1
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d074      	beq.n	800408e <HAL_RCC_OscConfig+0x2f2>
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

 8003fa4:	69bb      	ldr	r3, [r7, #24]
 8003fa6:	2b08      	cmp	r3, #8
 8003fa8:	d005      	beq.n	8003fb6 <HAL_RCC_OscConfig+0x21a>
 8003faa:	69bb      	ldr	r3, [r7, #24]
 8003fac:	2b0c      	cmp	r3, #12
 8003fae:	d10e      	bne.n	8003fce <HAL_RCC_OscConfig+0x232>
    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
 8003fb0:	697b      	ldr	r3, [r7, #20]
 8003fb2:	2b03      	cmp	r3, #3
 8003fb4:	d10b      	bne.n	8003fce <HAL_RCC_OscConfig+0x232>
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003fb6:	4b15      	ldr	r3, [pc, #84]	; (800400c <HAL_RCC_OscConfig+0x270>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d064      	beq.n	800408c <HAL_RCC_OscConfig+0x2f0>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	685b      	ldr	r3, [r3, #4]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d160      	bne.n	800408c <HAL_RCC_OscConfig+0x2f0>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fca:	2301      	movs	r3, #1
 8003fcc:	e2ba      	b.n	8004544 <HAL_RCC_OscConfig+0x7a8>
      {
        return HAL_ERROR;
      }
    }
    else
    {
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	685b      	ldr	r3, [r3, #4]
 8003fd2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fd6:	d106      	bne.n	8003fe6 <HAL_RCC_OscConfig+0x24a>
 8003fd8:	4b0c      	ldr	r3, [pc, #48]	; (800400c <HAL_RCC_OscConfig+0x270>)
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	4a0b      	ldr	r2, [pc, #44]	; (800400c <HAL_RCC_OscConfig+0x270>)
 8003fde:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fe2:	6013      	str	r3, [r2, #0]
 8003fe4:	e026      	b.n	8004034 <HAL_RCC_OscConfig+0x298>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	685b      	ldr	r3, [r3, #4]
 8003fea:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003fee:	d115      	bne.n	800401c <HAL_RCC_OscConfig+0x280>
 8003ff0:	4b06      	ldr	r3, [pc, #24]	; (800400c <HAL_RCC_OscConfig+0x270>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	4a05      	ldr	r2, [pc, #20]	; (800400c <HAL_RCC_OscConfig+0x270>)
 8003ff6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003ffa:	6013      	str	r3, [r2, #0]
 8003ffc:	4b03      	ldr	r3, [pc, #12]	; (800400c <HAL_RCC_OscConfig+0x270>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4a02      	ldr	r2, [pc, #8]	; (800400c <HAL_RCC_OscConfig+0x270>)
 8004002:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004006:	6013      	str	r3, [r2, #0]
 8004008:	e014      	b.n	8004034 <HAL_RCC_OscConfig+0x298>
 800400a:	bf00      	nop
 800400c:	40021000 	.word	0x40021000
 8004010:	0800d6c4 	.word	0x0800d6c4
 8004014:	20000004 	.word	0x20000004
 8004018:	20000008 	.word	0x20000008
 800401c:	4ba0      	ldr	r3, [pc, #640]	; (80042a0 <HAL_RCC_OscConfig+0x504>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4a9f      	ldr	r2, [pc, #636]	; (80042a0 <HAL_RCC_OscConfig+0x504>)
 8004022:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004026:	6013      	str	r3, [r2, #0]
 8004028:	4b9d      	ldr	r3, [pc, #628]	; (80042a0 <HAL_RCC_OscConfig+0x504>)
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	4a9c      	ldr	r2, [pc, #624]	; (80042a0 <HAL_RCC_OscConfig+0x504>)
 800402e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004032:	6013      	str	r3, [r2, #0]
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);

 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	685b      	ldr	r3, [r3, #4]
 8004038:	2b00      	cmp	r3, #0
 800403a:	d013      	beq.n	8004064 <HAL_RCC_OscConfig+0x2c8>
      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
 800403c:	f7fe f890 	bl	8002160 <HAL_GetTick>
 8004040:	6138      	str	r0, [r7, #16]
        /* Get Start Tick*/
        tickstart = HAL_GetTick();

 8004042:	e008      	b.n	8004056 <HAL_RCC_OscConfig+0x2ba>
        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004044:	f7fe f88c 	bl	8002160 <HAL_GetTick>
 8004048:	4602      	mov	r2, r0
 800404a:	693b      	ldr	r3, [r7, #16]
 800404c:	1ad3      	subs	r3, r2, r3
 800404e:	2b64      	cmp	r3, #100	; 0x64
 8004050:	d901      	bls.n	8004056 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004052:	2303      	movs	r3, #3
 8004054:	e276      	b.n	8004544 <HAL_RCC_OscConfig+0x7a8>

 8004056:	4b92      	ldr	r3, [pc, #584]	; (80042a0 <HAL_RCC_OscConfig+0x504>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800405e:	2b00      	cmp	r3, #0
 8004060:	d0f0      	beq.n	8004044 <HAL_RCC_OscConfig+0x2a8>
 8004062:	e014      	b.n	800408e <HAL_RCC_OscConfig+0x2f2>
            return HAL_TIMEOUT;
          }
        }
      }
      else
      {
 8004064:	f7fe f87c 	bl	8002160 <HAL_GetTick>
 8004068:	6138      	str	r0, [r7, #16]
        /* Get Start Tick*/
        tickstart = HAL_GetTick();

 800406a:	e008      	b.n	800407e <HAL_RCC_OscConfig+0x2e2>
        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800406c:	f7fe f878 	bl	8002160 <HAL_GetTick>
 8004070:	4602      	mov	r2, r0
 8004072:	693b      	ldr	r3, [r7, #16]
 8004074:	1ad3      	subs	r3, r2, r3
 8004076:	2b64      	cmp	r3, #100	; 0x64
 8004078:	d901      	bls.n	800407e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800407a:	2303      	movs	r3, #3
 800407c:	e262      	b.n	8004544 <HAL_RCC_OscConfig+0x7a8>

 800407e:	4b88      	ldr	r3, [pc, #544]	; (80042a0 <HAL_RCC_OscConfig+0x504>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004086:	2b00      	cmp	r3, #0
 8004088:	d1f0      	bne.n	800406c <HAL_RCC_OscConfig+0x2d0>
 800408a:	e000      	b.n	800408e <HAL_RCC_OscConfig+0x2f2>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800408c:	bf00      	nop
            return HAL_TIMEOUT;
          }
        }
      }
    }
  }
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f003 0302 	and.w	r3, r3, #2
 8004096:	2b00      	cmp	r3, #0
 8004098:	d060      	beq.n	800415c <HAL_RCC_OscConfig+0x3c0>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

 800409a:	69bb      	ldr	r3, [r7, #24]
 800409c:	2b04      	cmp	r3, #4
 800409e:	d005      	beq.n	80040ac <HAL_RCC_OscConfig+0x310>
 80040a0:	69bb      	ldr	r3, [r7, #24]
 80040a2:	2b0c      	cmp	r3, #12
 80040a4:	d119      	bne.n	80040da <HAL_RCC_OscConfig+0x33e>
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
 80040a6:	697b      	ldr	r3, [r7, #20]
 80040a8:	2b02      	cmp	r3, #2
 80040aa:	d116      	bne.n	80040da <HAL_RCC_OscConfig+0x33e>
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
    {
 80040ac:	4b7c      	ldr	r3, [pc, #496]	; (80042a0 <HAL_RCC_OscConfig+0x504>)
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d005      	beq.n	80040c4 <HAL_RCC_OscConfig+0x328>
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	68db      	ldr	r3, [r3, #12]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d101      	bne.n	80040c4 <HAL_RCC_OscConfig+0x328>
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80040c0:	2301      	movs	r3, #1
 80040c2:	e23f      	b.n	8004544 <HAL_RCC_OscConfig+0x7a8>
      {
        return HAL_ERROR;
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
 80040c4:	4b76      	ldr	r3, [pc, #472]	; (80042a0 <HAL_RCC_OscConfig+0x504>)
 80040c6:	685b      	ldr	r3, [r3, #4]
 80040c8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	691b      	ldr	r3, [r3, #16]
 80040d0:	061b      	lsls	r3, r3, #24
 80040d2:	4973      	ldr	r1, [pc, #460]	; (80042a0 <HAL_RCC_OscConfig+0x504>)
 80040d4:	4313      	orrs	r3, r2
 80040d6:	604b      	str	r3, [r1, #4]
    {
 80040d8:	e040      	b.n	800415c <HAL_RCC_OscConfig+0x3c0>
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
      }
    }
    else
    {
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	68db      	ldr	r3, [r3, #12]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d023      	beq.n	800412a <HAL_RCC_OscConfig+0x38e>
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
      {
 80040e2:	4b6f      	ldr	r3, [pc, #444]	; (80042a0 <HAL_RCC_OscConfig+0x504>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	4a6e      	ldr	r2, [pc, #440]	; (80042a0 <HAL_RCC_OscConfig+0x504>)
 80040e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040ec:	6013      	str	r3, [r2, #0]
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();

 80040ee:	f7fe f837 	bl	8002160 <HAL_GetTick>
 80040f2:	6138      	str	r0, [r7, #16]
        /* Get Start Tick*/
        tickstart = HAL_GetTick();

 80040f4:	e008      	b.n	8004108 <HAL_RCC_OscConfig+0x36c>
        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80040f6:	f7fe f833 	bl	8002160 <HAL_GetTick>
 80040fa:	4602      	mov	r2, r0
 80040fc:	693b      	ldr	r3, [r7, #16]
 80040fe:	1ad3      	subs	r3, r2, r3
 8004100:	2b02      	cmp	r3, #2
 8004102:	d901      	bls.n	8004108 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004104:	2303      	movs	r3, #3
 8004106:	e21d      	b.n	8004544 <HAL_RCC_OscConfig+0x7a8>

 8004108:	4b65      	ldr	r3, [pc, #404]	; (80042a0 <HAL_RCC_OscConfig+0x504>)
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004110:	2b00      	cmp	r3, #0
 8004112:	d0f0      	beq.n	80040f6 <HAL_RCC_OscConfig+0x35a>
          {
            return HAL_TIMEOUT;
          }
        }

 8004114:	4b62      	ldr	r3, [pc, #392]	; (80042a0 <HAL_RCC_OscConfig+0x504>)
 8004116:	685b      	ldr	r3, [r3, #4]
 8004118:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	691b      	ldr	r3, [r3, #16]
 8004120:	061b      	lsls	r3, r3, #24
 8004122:	495f      	ldr	r1, [pc, #380]	; (80042a0 <HAL_RCC_OscConfig+0x504>)
 8004124:	4313      	orrs	r3, r2
 8004126:	604b      	str	r3, [r1, #4]
 8004128:	e018      	b.n	800415c <HAL_RCC_OscConfig+0x3c0>
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
      }
      else
      {
 800412a:	4b5d      	ldr	r3, [pc, #372]	; (80042a0 <HAL_RCC_OscConfig+0x504>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	4a5c      	ldr	r2, [pc, #368]	; (80042a0 <HAL_RCC_OscConfig+0x504>)
 8004130:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004134:	6013      	str	r3, [r2, #0]
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();

 8004136:	f7fe f813 	bl	8002160 <HAL_GetTick>
 800413a:	6138      	str	r0, [r7, #16]
        /* Get Start Tick*/
        tickstart = HAL_GetTick();

 800413c:	e008      	b.n	8004150 <HAL_RCC_OscConfig+0x3b4>
        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800413e:	f7fe f80f 	bl	8002160 <HAL_GetTick>
 8004142:	4602      	mov	r2, r0
 8004144:	693b      	ldr	r3, [r7, #16]
 8004146:	1ad3      	subs	r3, r2, r3
 8004148:	2b02      	cmp	r3, #2
 800414a:	d901      	bls.n	8004150 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800414c:	2303      	movs	r3, #3
 800414e:	e1f9      	b.n	8004544 <HAL_RCC_OscConfig+0x7a8>

 8004150:	4b53      	ldr	r3, [pc, #332]	; (80042a0 <HAL_RCC_OscConfig+0x504>)
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004158:	2b00      	cmp	r3, #0
 800415a:	d1f0      	bne.n	800413e <HAL_RCC_OscConfig+0x3a2>
            return HAL_TIMEOUT;
          }
        }
      }
    }
  }
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f003 0308 	and.w	r3, r3, #8
 8004164:	2b00      	cmp	r3, #0
 8004166:	d03c      	beq.n	80041e2 <HAL_RCC_OscConfig+0x446>
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	695b      	ldr	r3, [r3, #20]
 800416c:	2b00      	cmp	r3, #0
 800416e:	d01c      	beq.n	80041aa <HAL_RCC_OscConfig+0x40e>

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

 8004170:	4b4b      	ldr	r3, [pc, #300]	; (80042a0 <HAL_RCC_OscConfig+0x504>)
 8004172:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004176:	4a4a      	ldr	r2, [pc, #296]	; (80042a0 <HAL_RCC_OscConfig+0x504>)
 8004178:	f043 0301 	orr.w	r3, r3, #1
 800417c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();

 8004180:	f7fd ffee 	bl	8002160 <HAL_GetTick>
 8004184:	6138      	str	r0, [r7, #16]
      /* Get Start Tick*/
      tickstart = HAL_GetTick();

 8004186:	e008      	b.n	800419a <HAL_RCC_OscConfig+0x3fe>
      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004188:	f7fd ffea 	bl	8002160 <HAL_GetTick>
 800418c:	4602      	mov	r2, r0
 800418e:	693b      	ldr	r3, [r7, #16]
 8004190:	1ad3      	subs	r3, r2, r3
 8004192:	2b02      	cmp	r3, #2
 8004194:	d901      	bls.n	800419a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004196:	2303      	movs	r3, #3
 8004198:	e1d4      	b.n	8004544 <HAL_RCC_OscConfig+0x7a8>

 800419a:	4b41      	ldr	r3, [pc, #260]	; (80042a0 <HAL_RCC_OscConfig+0x504>)
 800419c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041a0:	f003 0302 	and.w	r3, r3, #2
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d0ef      	beq.n	8004188 <HAL_RCC_OscConfig+0x3ec>
 80041a8:	e01b      	b.n	80041e2 <HAL_RCC_OscConfig+0x446>
          return HAL_TIMEOUT;
        }
      }
    }
    else
    {
 80041aa:	4b3d      	ldr	r3, [pc, #244]	; (80042a0 <HAL_RCC_OscConfig+0x504>)
 80041ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041b0:	4a3b      	ldr	r2, [pc, #236]	; (80042a0 <HAL_RCC_OscConfig+0x504>)
 80041b2:	f023 0301 	bic.w	r3, r3, #1
 80041b6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();

 80041ba:	f7fd ffd1 	bl	8002160 <HAL_GetTick>
 80041be:	6138      	str	r0, [r7, #16]
      /* Get Start Tick*/
      tickstart = HAL_GetTick();

 80041c0:	e008      	b.n	80041d4 <HAL_RCC_OscConfig+0x438>
      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80041c2:	f7fd ffcd 	bl	8002160 <HAL_GetTick>
 80041c6:	4602      	mov	r2, r0
 80041c8:	693b      	ldr	r3, [r7, #16]
 80041ca:	1ad3      	subs	r3, r2, r3
 80041cc:	2b02      	cmp	r3, #2
 80041ce:	d901      	bls.n	80041d4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80041d0:	2303      	movs	r3, #3
 80041d2:	e1b7      	b.n	8004544 <HAL_RCC_OscConfig+0x7a8>

 80041d4:	4b32      	ldr	r3, [pc, #200]	; (80042a0 <HAL_RCC_OscConfig+0x504>)
 80041d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041da:	f003 0302 	and.w	r3, r3, #2
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d1ef      	bne.n	80041c2 <HAL_RCC_OscConfig+0x426>
        {
          return HAL_TIMEOUT;
        }
      }
    }
  }
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f003 0304 	and.w	r3, r3, #4
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	f000 80a6 	beq.w	800433c <HAL_RCC_OscConfig+0x5a0>
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80041f0:	2300      	movs	r3, #0
 80041f2:	77fb      	strb	r3, [r7, #31]
    FlagStatus       pwrclkchanged = RESET;

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
 80041f4:	4b2a      	ldr	r3, [pc, #168]	; (80042a0 <HAL_RCC_OscConfig+0x504>)
 80041f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d10d      	bne.n	800421c <HAL_RCC_OscConfig+0x480>
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004200:	4b27      	ldr	r3, [pc, #156]	; (80042a0 <HAL_RCC_OscConfig+0x504>)
 8004202:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004204:	4a26      	ldr	r2, [pc, #152]	; (80042a0 <HAL_RCC_OscConfig+0x504>)
 8004206:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800420a:	6593      	str	r3, [r2, #88]	; 0x58
 800420c:	4b24      	ldr	r3, [pc, #144]	; (80042a0 <HAL_RCC_OscConfig+0x504>)
 800420e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004210:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004214:	60bb      	str	r3, [r7, #8]
 8004216:	68bb      	ldr	r3, [r7, #8]
    {
 8004218:	2301      	movs	r3, #1
 800421a:	77fb      	strb	r3, [r7, #31]
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }
 800421c:	4b21      	ldr	r3, [pc, #132]	; (80042a4 <HAL_RCC_OscConfig+0x508>)
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004224:	2b00      	cmp	r3, #0
 8004226:	d118      	bne.n	800425a <HAL_RCC_OscConfig+0x4be>

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
    {
 8004228:	4b1e      	ldr	r3, [pc, #120]	; (80042a4 <HAL_RCC_OscConfig+0x508>)
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	4a1d      	ldr	r2, [pc, #116]	; (80042a4 <HAL_RCC_OscConfig+0x508>)
 800422e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004232:	6013      	str	r3, [r2, #0]
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);

 8004234:	f7fd ff94 	bl	8002160 <HAL_GetTick>
 8004238:	6138      	str	r0, [r7, #16]
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800423a:	e008      	b.n	800424e <HAL_RCC_OscConfig+0x4b2>

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800423c:	f7fd ff90 	bl	8002160 <HAL_GetTick>
 8004240:	4602      	mov	r2, r0
 8004242:	693b      	ldr	r3, [r7, #16]
 8004244:	1ad3      	subs	r3, r2, r3
 8004246:	2b02      	cmp	r3, #2
 8004248:	d901      	bls.n	800424e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800424a:	2303      	movs	r3, #3
 800424c:	e17a      	b.n	8004544 <HAL_RCC_OscConfig+0x7a8>
      tickstart = HAL_GetTick();
 800424e:	4b15      	ldr	r3, [pc, #84]	; (80042a4 <HAL_RCC_OscConfig+0x508>)
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004256:	2b00      	cmp	r3, #0
 8004258:	d0f0      	beq.n	800423c <HAL_RCC_OscConfig+0x4a0>
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	689b      	ldr	r3, [r3, #8]
 800425e:	2b01      	cmp	r3, #1
 8004260:	d108      	bne.n	8004274 <HAL_RCC_OscConfig+0x4d8>
 8004262:	4b0f      	ldr	r3, [pc, #60]	; (80042a0 <HAL_RCC_OscConfig+0x504>)
 8004264:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004268:	4a0d      	ldr	r2, [pc, #52]	; (80042a0 <HAL_RCC_OscConfig+0x504>)
 800426a:	f043 0301 	orr.w	r3, r3, #1
 800426e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004272:	e029      	b.n	80042c8 <HAL_RCC_OscConfig+0x52c>
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	689b      	ldr	r3, [r3, #8]
 8004278:	2b05      	cmp	r3, #5
 800427a:	d115      	bne.n	80042a8 <HAL_RCC_OscConfig+0x50c>
 800427c:	4b08      	ldr	r3, [pc, #32]	; (80042a0 <HAL_RCC_OscConfig+0x504>)
 800427e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004282:	4a07      	ldr	r2, [pc, #28]	; (80042a0 <HAL_RCC_OscConfig+0x504>)
 8004284:	f043 0304 	orr.w	r3, r3, #4
 8004288:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800428c:	4b04      	ldr	r3, [pc, #16]	; (80042a0 <HAL_RCC_OscConfig+0x504>)
 800428e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004292:	4a03      	ldr	r2, [pc, #12]	; (80042a0 <HAL_RCC_OscConfig+0x504>)
 8004294:	f043 0301 	orr.w	r3, r3, #1
 8004298:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800429c:	e014      	b.n	80042c8 <HAL_RCC_OscConfig+0x52c>
 800429e:	bf00      	nop
 80042a0:	40021000 	.word	0x40021000
 80042a4:	40007000 	.word	0x40007000
 80042a8:	4b9c      	ldr	r3, [pc, #624]	; (800451c <HAL_RCC_OscConfig+0x780>)
 80042aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042ae:	4a9b      	ldr	r2, [pc, #620]	; (800451c <HAL_RCC_OscConfig+0x780>)
 80042b0:	f023 0301 	bic.w	r3, r3, #1
 80042b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80042b8:	4b98      	ldr	r3, [pc, #608]	; (800451c <HAL_RCC_OscConfig+0x780>)
 80042ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042be:	4a97      	ldr	r2, [pc, #604]	; (800451c <HAL_RCC_OscConfig+0x780>)
 80042c0:	f023 0304 	bic.w	r3, r3, #4
 80042c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	689b      	ldr	r3, [r3, #8]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d016      	beq.n	80042fe <HAL_RCC_OscConfig+0x562>
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
    {
 80042d0:	f7fd ff46 	bl	8002160 <HAL_GetTick>
 80042d4:	6138      	str	r0, [r7, #16]
      /* Get Start Tick*/
      tickstart = HAL_GetTick();

 80042d6:	e00a      	b.n	80042ee <HAL_RCC_OscConfig+0x552>
      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80042d8:	f7fd ff42 	bl	8002160 <HAL_GetTick>
 80042dc:	4602      	mov	r2, r0
 80042de:	693b      	ldr	r3, [r7, #16]
 80042e0:	1ad3      	subs	r3, r2, r3
 80042e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80042e6:	4293      	cmp	r3, r2
 80042e8:	d901      	bls.n	80042ee <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042ea:	2303      	movs	r3, #3
 80042ec:	e12a      	b.n	8004544 <HAL_RCC_OscConfig+0x7a8>

 80042ee:	4b8b      	ldr	r3, [pc, #556]	; (800451c <HAL_RCC_OscConfig+0x780>)
 80042f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042f4:	f003 0302 	and.w	r3, r3, #2
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d0ed      	beq.n	80042d8 <HAL_RCC_OscConfig+0x53c>
 80042fc:	e015      	b.n	800432a <HAL_RCC_OscConfig+0x58e>
          return HAL_TIMEOUT;
        }
      }
    }
    else
    {
 80042fe:	f7fd ff2f 	bl	8002160 <HAL_GetTick>
 8004302:	6138      	str	r0, [r7, #16]
      /* Get Start Tick*/
      tickstart = HAL_GetTick();

 8004304:	e00a      	b.n	800431c <HAL_RCC_OscConfig+0x580>
      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004306:	f7fd ff2b 	bl	8002160 <HAL_GetTick>
 800430a:	4602      	mov	r2, r0
 800430c:	693b      	ldr	r3, [r7, #16]
 800430e:	1ad3      	subs	r3, r2, r3
 8004310:	f241 3288 	movw	r2, #5000	; 0x1388
 8004314:	4293      	cmp	r3, r2
 8004316:	d901      	bls.n	800431c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004318:	2303      	movs	r3, #3
 800431a:	e113      	b.n	8004544 <HAL_RCC_OscConfig+0x7a8>

 800431c:	4b7f      	ldr	r3, [pc, #508]	; (800451c <HAL_RCC_OscConfig+0x780>)
 800431e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004322:	f003 0302 	and.w	r3, r3, #2
 8004326:	2b00      	cmp	r3, #0
 8004328:	d1ed      	bne.n	8004306 <HAL_RCC_OscConfig+0x56a>
#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

 800432a:	7ffb      	ldrb	r3, [r7, #31]
 800432c:	2b01      	cmp	r3, #1
 800432e:	d105      	bne.n	800433c <HAL_RCC_OscConfig+0x5a0>
    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004330:	4b7a      	ldr	r3, [pc, #488]	; (800451c <HAL_RCC_OscConfig+0x780>)
 8004332:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004334:	4a79      	ldr	r2, [pc, #484]	; (800451c <HAL_RCC_OscConfig+0x780>)
 8004336:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800433a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004340:	2b00      	cmp	r3, #0
 8004342:	f000 80fe 	beq.w	8004542 <HAL_RCC_OscConfig+0x7a6>

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
  {
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800434a:	2b02      	cmp	r3, #2
 800434c:	f040 80d0 	bne.w	80044f0 <HAL_RCC_OscConfig+0x754>
#if defined(RCC_PLLP_SUPPORT)
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

 8004350:	4b72      	ldr	r3, [pc, #456]	; (800451c <HAL_RCC_OscConfig+0x780>)
 8004352:	68db      	ldr	r3, [r3, #12]
 8004354:	617b      	str	r3, [r7, #20]
      /* Do nothing if PLL configuration is the unchanged */
 8004356:	697b      	ldr	r3, [r7, #20]
 8004358:	f003 0203 	and.w	r2, r3, #3
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004360:	429a      	cmp	r2, r3
 8004362:	d130      	bne.n	80043c6 <HAL_RCC_OscConfig+0x62a>
      pll_config = RCC->PLLCFGR;
 8004364:	697b      	ldr	r3, [r7, #20]
 8004366:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800436e:	3b01      	subs	r3, #1
 8004370:	011b      	lsls	r3, r3, #4
      /* Do nothing if PLL configuration is the unchanged */
 8004372:	429a      	cmp	r2, r3
 8004374:	d127      	bne.n	80043c6 <HAL_RCC_OscConfig+0x62a>
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004376:	697b      	ldr	r3, [r7, #20]
 8004378:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004380:	021b      	lsls	r3, r3, #8
      pll_config = RCC->PLLCFGR;
 8004382:	429a      	cmp	r2, r3
 8004384:	d11f      	bne.n	80043c6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004386:	697b      	ldr	r3, [r7, #20]
 8004388:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800438c:	687a      	ldr	r2, [r7, #4]
 800438e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004390:	2a07      	cmp	r2, #7
 8004392:	bf14      	ite	ne
 8004394:	2201      	movne	r2, #1
 8004396:	2200      	moveq	r2, #0
 8004398:	b2d2      	uxtb	r2, r2
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800439a:	4293      	cmp	r3, r2
 800439c:	d113      	bne.n	80043c6 <HAL_RCC_OscConfig+0x62a>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
 800439e:	697b      	ldr	r3, [r7, #20]
 80043a0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043a8:	085b      	lsrs	r3, r3, #1
 80043aa:	3b01      	subs	r3, #1
 80043ac:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80043ae:	429a      	cmp	r2, r3
 80043b0:	d109      	bne.n	80043c6 <HAL_RCC_OscConfig+0x62a>
#endif
 80043b2:	697b      	ldr	r3, [r7, #20]
 80043b4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043bc:	085b      	lsrs	r3, r3, #1
 80043be:	3b01      	subs	r3, #1
 80043c0:	065b      	lsls	r3, r3, #25
#endif
 80043c2:	429a      	cmp	r2, r3
 80043c4:	d06e      	beq.n	80044a4 <HAL_RCC_OscConfig+0x708>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
      {
 80043c6:	69bb      	ldr	r3, [r7, #24]
 80043c8:	2b0c      	cmp	r3, #12
 80043ca:	d069      	beq.n	80044a0 <HAL_RCC_OscConfig+0x704>
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
 80043cc:	4b53      	ldr	r3, [pc, #332]	; (800451c <HAL_RCC_OscConfig+0x780>)
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d105      	bne.n	80043e4 <HAL_RCC_OscConfig+0x648>
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80043d8:	4b50      	ldr	r3, [pc, #320]	; (800451c <HAL_RCC_OscConfig+0x780>)
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d001      	beq.n	80043e8 <HAL_RCC_OscConfig+0x64c>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
 80043e4:	2301      	movs	r3, #1
 80043e6:	e0ad      	b.n	8004544 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_ERROR;
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
 80043e8:	4b4c      	ldr	r3, [pc, #304]	; (800451c <HAL_RCC_OscConfig+0x780>)
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	4a4b      	ldr	r2, [pc, #300]	; (800451c <HAL_RCC_OscConfig+0x780>)
 80043ee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80043f2:	6013      	str	r3, [r2, #0]
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();

 80043f4:	f7fd feb4 	bl	8002160 <HAL_GetTick>
 80043f8:	6138      	str	r0, [r7, #16]
            /* Get Start Tick*/
            tickstart = HAL_GetTick();

 80043fa:	e008      	b.n	800440e <HAL_RCC_OscConfig+0x672>
            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80043fc:	f7fd feb0 	bl	8002160 <HAL_GetTick>
 8004400:	4602      	mov	r2, r0
 8004402:	693b      	ldr	r3, [r7, #16]
 8004404:	1ad3      	subs	r3, r2, r3
 8004406:	2b02      	cmp	r3, #2
 8004408:	d901      	bls.n	800440e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800440a:	2303      	movs	r3, #3
 800440c:	e09a      	b.n	8004544 <HAL_RCC_OscConfig+0x7a8>

 800440e:	4b43      	ldr	r3, [pc, #268]	; (800451c <HAL_RCC_OscConfig+0x780>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004416:	2b00      	cmp	r3, #0
 8004418:	d1f0      	bne.n	80043fc <HAL_RCC_OscConfig+0x660>
              {
                return HAL_TIMEOUT;
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
 800441a:	4b40      	ldr	r3, [pc, #256]	; (800451c <HAL_RCC_OscConfig+0x780>)
 800441c:	68da      	ldr	r2, [r3, #12]
 800441e:	4b40      	ldr	r3, [pc, #256]	; (8004520 <HAL_RCC_OscConfig+0x784>)
 8004420:	4013      	ands	r3, r2
 8004422:	687a      	ldr	r2, [r7, #4]
 8004424:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004426:	687a      	ldr	r2, [r7, #4]
 8004428:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800442a:	3a01      	subs	r2, #1
 800442c:	0112      	lsls	r2, r2, #4
 800442e:	4311      	orrs	r1, r2
 8004430:	687a      	ldr	r2, [r7, #4]
 8004432:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004434:	0212      	lsls	r2, r2, #8
 8004436:	4311      	orrs	r1, r2
 8004438:	687a      	ldr	r2, [r7, #4]
 800443a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800443c:	0852      	lsrs	r2, r2, #1
 800443e:	3a01      	subs	r2, #1
 8004440:	0552      	lsls	r2, r2, #21
 8004442:	4311      	orrs	r1, r2
 8004444:	687a      	ldr	r2, [r7, #4]
 8004446:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004448:	0852      	lsrs	r2, r2, #1
 800444a:	3a01      	subs	r2, #1
 800444c:	0652      	lsls	r2, r2, #25
 800444e:	4311      	orrs	r1, r2
 8004450:	687a      	ldr	r2, [r7, #4]
 8004452:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004454:	0912      	lsrs	r2, r2, #4
 8004456:	0452      	lsls	r2, r2, #17
 8004458:	430a      	orrs	r2, r1
 800445a:	4930      	ldr	r1, [pc, #192]	; (800451c <HAL_RCC_OscConfig+0x780>)
 800445c:	4313      	orrs	r3, r2
 800445e:	60cb      	str	r3, [r1, #12]
            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);

 8004460:	4b2e      	ldr	r3, [pc, #184]	; (800451c <HAL_RCC_OscConfig+0x780>)
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	4a2d      	ldr	r2, [pc, #180]	; (800451c <HAL_RCC_OscConfig+0x780>)
 8004466:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800446a:	6013      	str	r3, [r2, #0]
            /* Get Start Tick*/
            tickstart = HAL_GetTick();

 800446c:	4b2b      	ldr	r3, [pc, #172]	; (800451c <HAL_RCC_OscConfig+0x780>)
 800446e:	68db      	ldr	r3, [r3, #12]
 8004470:	4a2a      	ldr	r2, [pc, #168]	; (800451c <HAL_RCC_OscConfig+0x780>)
 8004472:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004476:	60d3      	str	r3, [r2, #12]
            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
            {
 8004478:	f7fd fe72 	bl	8002160 <HAL_GetTick>
 800447c:	6138      	str	r0, [r7, #16]
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
              {
                return HAL_TIMEOUT;
 800447e:	e008      	b.n	8004492 <HAL_RCC_OscConfig+0x6f6>
              }
            }
 8004480:	f7fd fe6e 	bl	8002160 <HAL_GetTick>
 8004484:	4602      	mov	r2, r0
 8004486:	693b      	ldr	r3, [r7, #16]
 8004488:	1ad3      	subs	r3, r2, r3
 800448a:	2b02      	cmp	r3, #2
 800448c:	d901      	bls.n	8004492 <HAL_RCC_OscConfig+0x6f6>
          }
        }
 800448e:	2303      	movs	r3, #3
 8004490:	e058      	b.n	8004544 <HAL_RCC_OscConfig+0x7a8>
                return HAL_TIMEOUT;
 8004492:	4b22      	ldr	r3, [pc, #136]	; (800451c <HAL_RCC_OscConfig+0x780>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800449a:	2b00      	cmp	r3, #0
 800449c:	d0f0      	beq.n	8004480 <HAL_RCC_OscConfig+0x6e4>
      {
 800449e:	e050      	b.n	8004542 <HAL_RCC_OscConfig+0x7a6>
          /* PLL is already used as System core clock */
          return HAL_ERROR;
        }
      }
      else
      {
 80044a0:	2301      	movs	r3, #1
 80044a2:	e04f      	b.n	8004544 <HAL_RCC_OscConfig+0x7a8>
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();

 80044a4:	4b1d      	ldr	r3, [pc, #116]	; (800451c <HAL_RCC_OscConfig+0x780>)
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d148      	bne.n	8004542 <HAL_RCC_OscConfig+0x7a6>
          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);

 80044b0:	4b1a      	ldr	r3, [pc, #104]	; (800451c <HAL_RCC_OscConfig+0x780>)
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	4a19      	ldr	r2, [pc, #100]	; (800451c <HAL_RCC_OscConfig+0x780>)
 80044b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80044ba:	6013      	str	r3, [r2, #0]
          /* Get Start Tick*/
          tickstart = HAL_GetTick();

 80044bc:	4b17      	ldr	r3, [pc, #92]	; (800451c <HAL_RCC_OscConfig+0x780>)
 80044be:	68db      	ldr	r3, [r3, #12]
 80044c0:	4a16      	ldr	r2, [pc, #88]	; (800451c <HAL_RCC_OscConfig+0x780>)
 80044c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80044c6:	60d3      	str	r3, [r2, #12]
          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
          {
 80044c8:	f7fd fe4a 	bl	8002160 <HAL_GetTick>
 80044cc:	6138      	str	r0, [r7, #16]
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
            {
              return HAL_TIMEOUT;
 80044ce:	e008      	b.n	80044e2 <HAL_RCC_OscConfig+0x746>
            }
          }
 80044d0:	f7fd fe46 	bl	8002160 <HAL_GetTick>
 80044d4:	4602      	mov	r2, r0
 80044d6:	693b      	ldr	r3, [r7, #16]
 80044d8:	1ad3      	subs	r3, r2, r3
 80044da:	2b02      	cmp	r3, #2
 80044dc:	d901      	bls.n	80044e2 <HAL_RCC_OscConfig+0x746>
        }
      }
 80044de:	2303      	movs	r3, #3
 80044e0:	e030      	b.n	8004544 <HAL_RCC_OscConfig+0x7a8>
              return HAL_TIMEOUT;
 80044e2:	4b0e      	ldr	r3, [pc, #56]	; (800451c <HAL_RCC_OscConfig+0x780>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d0f0      	beq.n	80044d0 <HAL_RCC_OscConfig+0x734>
 80044ee:	e028      	b.n	8004542 <HAL_RCC_OscConfig+0x7a6>
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

 80044f0:	69bb      	ldr	r3, [r7, #24]
 80044f2:	2b0c      	cmp	r3, #12
 80044f4:	d023      	beq.n	800453e <HAL_RCC_OscConfig+0x7a2>
        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80044f6:	4b09      	ldr	r3, [pc, #36]	; (800451c <HAL_RCC_OscConfig+0x780>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	4a08      	ldr	r2, [pc, #32]	; (800451c <HAL_RCC_OscConfig+0x780>)
 80044fc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004500:	6013      	str	r3, [r2, #0]
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
 8004502:	f7fd fe2d 	bl	8002160 <HAL_GetTick>
 8004506:	6138      	str	r0, [r7, #16]
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
        {
 8004508:	e00c      	b.n	8004524 <HAL_RCC_OscConfig+0x788>
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
 800450a:	f7fd fe29 	bl	8002160 <HAL_GetTick>
 800450e:	4602      	mov	r2, r0
 8004510:	693b      	ldr	r3, [r7, #16]
 8004512:	1ad3      	subs	r3, r2, r3
 8004514:	2b02      	cmp	r3, #2
 8004516:	d905      	bls.n	8004524 <HAL_RCC_OscConfig+0x788>
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004518:	2303      	movs	r3, #3
 800451a:	e013      	b.n	8004544 <HAL_RCC_OscConfig+0x7a8>
 800451c:	40021000 	.word	0x40021000
 8004520:	f99d808c 	.word	0xf99d808c
        {
 8004524:	4b09      	ldr	r3, [pc, #36]	; (800454c <HAL_RCC_OscConfig+0x7b0>)
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800452c:	2b00      	cmp	r3, #0
 800452e:	d1ec      	bne.n	800450a <HAL_RCC_OscConfig+0x76e>
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
 8004530:	4b06      	ldr	r3, [pc, #24]	; (800454c <HAL_RCC_OscConfig+0x7b0>)
 8004532:	68da      	ldr	r2, [r3, #12]
 8004534:	4905      	ldr	r1, [pc, #20]	; (800454c <HAL_RCC_OscConfig+0x7b0>)
 8004536:	4b06      	ldr	r3, [pc, #24]	; (8004550 <HAL_RCC_OscConfig+0x7b4>)
 8004538:	4013      	ands	r3, r2
 800453a:	60cb      	str	r3, [r1, #12]
 800453c:	e001      	b.n	8004542 <HAL_RCC_OscConfig+0x7a6>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800453e:	2301      	movs	r3, #1
 8004540:	e000      	b.n	8004544 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
          {
            return HAL_TIMEOUT;
 8004542:	2300      	movs	r3, #0
          }
 8004544:	4618      	mov	r0, r3
 8004546:	3720      	adds	r7, #32
 8004548:	46bd      	mov	sp, r7
 800454a:	bd80      	pop	{r7, pc}
 800454c:	40021000 	.word	0x40021000
 8004550:	feeefffc 	.word	0xfeeefffc

08004554 <HAL_RCC_ClockConfig>:
  *         as system clock (if the Clock Security System CSS is enabled).
  *
  * @note   A switch from one clock source to another occurs only if the target
  *         clock source is ready (clock stable after startup delay or PLL locked).
  *         If a clock source which is not yet ready is selected, the switch will
  *         occur when the clock source is ready.
 8004554:	b580      	push	{r7, lr}
 8004556:	b084      	sub	sp, #16
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
 800455c:	6039      	str	r1, [r7, #0]
  *
  * @note   Depending on the device voltage range, the software has to set correctly
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	2b00      	cmp	r3, #0
 8004562:	d101      	bne.n	8004568 <HAL_RCC_ClockConfig+0x14>
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004564:	2301      	movs	r3, #1
 8004566:	e0e7      	b.n	8004738 <HAL_RCC_ClockConfig+0x1e4>

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
  {
    return HAL_ERROR;
  }
 8004568:	4b75      	ldr	r3, [pc, #468]	; (8004740 <HAL_RCC_ClockConfig+0x1ec>)
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f003 0307 	and.w	r3, r3, #7
 8004570:	683a      	ldr	r2, [r7, #0]
 8004572:	429a      	cmp	r2, r3
 8004574:	d910      	bls.n	8004598 <HAL_RCC_ClockConfig+0x44>

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8004576:	4b72      	ldr	r3, [pc, #456]	; (8004740 <HAL_RCC_ClockConfig+0x1ec>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f023 0207 	bic.w	r2, r3, #7
 800457e:	4970      	ldr	r1, [pc, #448]	; (8004740 <HAL_RCC_ClockConfig+0x1ec>)
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	4313      	orrs	r3, r2
 8004584:	600b      	str	r3, [r1, #0]
  assert_param(IS_FLASH_LATENCY(FLatency));

  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
 8004586:	4b6e      	ldr	r3, [pc, #440]	; (8004740 <HAL_RCC_ClockConfig+0x1ec>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f003 0307 	and.w	r3, r3, #7
 800458e:	683a      	ldr	r2, [r7, #0]
 8004590:	429a      	cmp	r2, r3
 8004592:	d001      	beq.n	8004598 <HAL_RCC_ClockConfig+0x44>
    (HCLK) and the supply voltage of the device. */

 8004594:	2301      	movs	r3, #1
 8004596:	e0cf      	b.n	8004738 <HAL_RCC_ClockConfig+0x1e4>
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);

 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f003 0302 	and.w	r3, r3, #2
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d010      	beq.n	80045c6 <HAL_RCC_ClockConfig+0x72>
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
    {
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	689a      	ldr	r2, [r3, #8]
 80045a8:	4b66      	ldr	r3, [pc, #408]	; (8004744 <HAL_RCC_ClockConfig+0x1f0>)
 80045aa:	689b      	ldr	r3, [r3, #8]
 80045ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80045b0:	429a      	cmp	r2, r3
 80045b2:	d908      	bls.n	80045c6 <HAL_RCC_ClockConfig+0x72>
      return HAL_ERROR;
    }
 80045b4:	4b63      	ldr	r3, [pc, #396]	; (8004744 <HAL_RCC_ClockConfig+0x1f0>)
 80045b6:	689b      	ldr	r3, [r3, #8]
 80045b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	689b      	ldr	r3, [r3, #8]
 80045c0:	4960      	ldr	r1, [pc, #384]	; (8004744 <HAL_RCC_ClockConfig+0x1f0>)
 80045c2:	4313      	orrs	r3, r2
 80045c4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
  {
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f003 0301 	and.w	r3, r3, #1
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d04c      	beq.n	800466c <HAL_RCC_ClockConfig+0x118>
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
    {
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	685b      	ldr	r3, [r3, #4]
 80045d6:	2b03      	cmp	r3, #3
 80045d8:	d107      	bne.n	80045ea <HAL_RCC_ClockConfig+0x96>
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
      {
 80045da:	4b5a      	ldr	r3, [pc, #360]	; (8004744 <HAL_RCC_ClockConfig+0x1f0>)
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d121      	bne.n	800462a <HAL_RCC_ClockConfig+0xd6>
        return HAL_ERROR;
      }
 80045e6:	2301      	movs	r3, #1
 80045e8:	e0a6      	b.n	8004738 <HAL_RCC_ClockConfig+0x1e4>
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
          hpre = RCC_SYSCLK_DIV2;
        }
        else
        {
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	685b      	ldr	r3, [r3, #4]
 80045ee:	2b02      	cmp	r3, #2
 80045f0:	d107      	bne.n	8004602 <HAL_RCC_ClockConfig+0xae>
          /* nothing to do */
        }
      }
 80045f2:	4b54      	ldr	r3, [pc, #336]	; (8004744 <HAL_RCC_ClockConfig+0x1f0>)
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d115      	bne.n	800462a <HAL_RCC_ClockConfig+0xd6>
#endif
    }
 80045fe:	2301      	movs	r3, #1
 8004600:	e09a      	b.n	8004738 <HAL_RCC_ClockConfig+0x1e4>
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	685b      	ldr	r3, [r3, #4]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d107      	bne.n	800461a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800460a:	4b4e      	ldr	r3, [pc, #312]	; (8004744 <HAL_RCC_ClockConfig+0x1f0>)
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f003 0302 	and.w	r3, r3, #2
 8004612:	2b00      	cmp	r3, #0
 8004614:	d109      	bne.n	800462a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004616:	2301      	movs	r3, #1
 8004618:	e08e      	b.n	8004738 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800461a:	4b4a      	ldr	r3, [pc, #296]	; (8004744 <HAL_RCC_ClockConfig+0x1f0>)
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004622:	2b00      	cmp	r3, #0
 8004624:	d101      	bne.n	800462a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004626:	2301      	movs	r3, #1
 8004628:	e086      	b.n	8004738 <HAL_RCC_ClockConfig+0x1e4>
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
      {
        /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
        hpre = RCC_SYSCLK_DIV2;
 800462a:	4b46      	ldr	r3, [pc, #280]	; (8004744 <HAL_RCC_ClockConfig+0x1f0>)
 800462c:	689b      	ldr	r3, [r3, #8]
 800462e:	f023 0203 	bic.w	r2, r3, #3
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	685b      	ldr	r3, [r3, #4]
 8004636:	4943      	ldr	r1, [pc, #268]	; (8004744 <HAL_RCC_ClockConfig+0x1f0>)
 8004638:	4313      	orrs	r3, r2
 800463a:	608b      	str	r3, [r1, #8]
      }
#endif

 800463c:	f7fd fd90 	bl	8002160 <HAL_GetTick>
 8004640:	60f8      	str	r0, [r7, #12]
    }

 8004642:	e00a      	b.n	800465a <HAL_RCC_ClockConfig+0x106>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);

 8004644:	f7fd fd8c 	bl	8002160 <HAL_GetTick>
 8004648:	4602      	mov	r2, r0
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	1ad3      	subs	r3, r2, r3
 800464e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004652:	4293      	cmp	r3, r2
 8004654:	d901      	bls.n	800465a <HAL_RCC_ClockConfig+0x106>
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004656:	2303      	movs	r3, #3
 8004658:	e06e      	b.n	8004738 <HAL_RCC_ClockConfig+0x1e4>

 800465a:	4b3a      	ldr	r3, [pc, #232]	; (8004744 <HAL_RCC_ClockConfig+0x1f0>)
 800465c:	689b      	ldr	r3, [r3, #8]
 800465e:	f003 020c 	and.w	r2, r3, #12
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	685b      	ldr	r3, [r3, #4]
 8004666:	009b      	lsls	r3, r3, #2
 8004668:	429a      	cmp	r2, r3
 800466a:	d1eb      	bne.n	8004644 <HAL_RCC_ClockConfig+0xf0>
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
  }
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f003 0302 	and.w	r3, r3, #2
 8004674:	2b00      	cmp	r3, #0
 8004676:	d010      	beq.n	800469a <HAL_RCC_ClockConfig+0x146>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	689a      	ldr	r2, [r3, #8]
 800467c:	4b31      	ldr	r3, [pc, #196]	; (8004744 <HAL_RCC_ClockConfig+0x1f0>)
 800467e:	689b      	ldr	r3, [r3, #8]
 8004680:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004684:	429a      	cmp	r2, r3
 8004686:	d208      	bcs.n	800469a <HAL_RCC_ClockConfig+0x146>
  else
  {
 8004688:	4b2e      	ldr	r3, [pc, #184]	; (8004744 <HAL_RCC_ClockConfig+0x1f0>)
 800468a:	689b      	ldr	r3, [r3, #8]
 800468c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	689b      	ldr	r3, [r3, #8]
 8004694:	492b      	ldr	r1, [pc, #172]	; (8004744 <HAL_RCC_ClockConfig+0x1f0>)
 8004696:	4313      	orrs	r3, r2
 8004698:	608b      	str	r3, [r1, #8]
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
    }
 800469a:	4b29      	ldr	r3, [pc, #164]	; (8004740 <HAL_RCC_ClockConfig+0x1ec>)
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f003 0307 	and.w	r3, r3, #7
 80046a2:	683a      	ldr	r2, [r7, #0]
 80046a4:	429a      	cmp	r2, r3
 80046a6:	d210      	bcs.n	80046ca <HAL_RCC_ClockConfig+0x176>
  }
#endif

 80046a8:	4b25      	ldr	r3, [pc, #148]	; (8004740 <HAL_RCC_ClockConfig+0x1ec>)
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f023 0207 	bic.w	r2, r3, #7
 80046b0:	4923      	ldr	r1, [pc, #140]	; (8004740 <HAL_RCC_ClockConfig+0x1ec>)
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	4313      	orrs	r3, r2
 80046b6:	600b      	str	r3, [r1, #0]
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
 80046b8:	4b21      	ldr	r3, [pc, #132]	; (8004740 <HAL_RCC_ClockConfig+0x1ec>)
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f003 0307 	and.w	r3, r3, #7
 80046c0:	683a      	ldr	r2, [r7, #0]
 80046c2:	429a      	cmp	r2, r3
 80046c4:	d001      	beq.n	80046ca <HAL_RCC_ClockConfig+0x176>
    __HAL_FLASH_SET_LATENCY(FLatency);

 80046c6:	2301      	movs	r3, #1
 80046c8:	e036      	b.n	8004738 <HAL_RCC_ClockConfig+0x1e4>
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
    {
      return HAL_ERROR;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f003 0304 	and.w	r3, r3, #4
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d008      	beq.n	80046e8 <HAL_RCC_ClockConfig+0x194>
    }
  }

 80046d6:	4b1b      	ldr	r3, [pc, #108]	; (8004744 <HAL_RCC_ClockConfig+0x1f0>)
 80046d8:	689b      	ldr	r3, [r3, #8]
 80046da:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	68db      	ldr	r3, [r3, #12]
 80046e2:	4918      	ldr	r1, [pc, #96]	; (8004744 <HAL_RCC_ClockConfig+0x1f0>)
 80046e4:	4313      	orrs	r3, r2
 80046e6:	608b      	str	r3, [r1, #8]
  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f003 0308 	and.w	r3, r3, #8
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d009      	beq.n	8004708 <HAL_RCC_ClockConfig+0x1b4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
  }

 80046f4:	4b13      	ldr	r3, [pc, #76]	; (8004744 <HAL_RCC_ClockConfig+0x1f0>)
 80046f6:	689b      	ldr	r3, [r3, #8]
 80046f8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	691b      	ldr	r3, [r3, #16]
 8004700:	00db      	lsls	r3, r3, #3
 8004702:	4910      	ldr	r1, [pc, #64]	; (8004744 <HAL_RCC_ClockConfig+0x1f0>)
 8004704:	4313      	orrs	r3, r2
 8004706:	608b      	str	r3, [r1, #8]
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8004708:	f000 f824 	bl	8004754 <HAL_RCC_GetSysClockFreq>
 800470c:	4602      	mov	r2, r0
 800470e:	4b0d      	ldr	r3, [pc, #52]	; (8004744 <HAL_RCC_ClockConfig+0x1f0>)
 8004710:	689b      	ldr	r3, [r3, #8]
 8004712:	091b      	lsrs	r3, r3, #4
 8004714:	f003 030f 	and.w	r3, r3, #15
 8004718:	490b      	ldr	r1, [pc, #44]	; (8004748 <HAL_RCC_ClockConfig+0x1f4>)
 800471a:	5ccb      	ldrb	r3, [r1, r3]
 800471c:	f003 031f 	and.w	r3, r3, #31
 8004720:	fa22 f303 	lsr.w	r3, r2, r3
 8004724:	4a09      	ldr	r2, [pc, #36]	; (800474c <HAL_RCC_ClockConfig+0x1f8>)
 8004726:	6013      	str	r3, [r2, #0]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
  }

 8004728:	4b09      	ldr	r3, [pc, #36]	; (8004750 <HAL_RCC_ClockConfig+0x1fc>)
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	4618      	mov	r0, r3
 800472e:	f7fd fb49 	bl	8001dc4 <HAL_InitTick>
 8004732:	4603      	mov	r3, r0
 8004734:	72fb      	strb	r3, [r7, #11]
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004736:	7afb      	ldrb	r3, [r7, #11]

 8004738:	4618      	mov	r0, r3
 800473a:	3710      	adds	r7, #16
 800473c:	46bd      	mov	sp, r7
 800473e:	bd80      	pop	{r7, pc}
 8004740:	40022000 	.word	0x40022000
 8004744:	40021000 	.word	0x40021000
 8004748:	0800d6c4 	.word	0x0800d6c4
 800474c:	20000004 	.word	0x20000004
 8004750:	20000008 	.word	0x20000008

08004754 <HAL_RCC_GetSysClockFreq>:
  * @note   This function can be used by the user application to compute the
  *         baudrate for the communication peripherals or configure other parameters.
  *
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
 8004754:	b480      	push	{r7}
 8004756:	b089      	sub	sp, #36	; 0x24
 8004758:	af00      	add	r7, sp, #0
  *
 800475a:	2300      	movs	r3, #0
 800475c:	61fb      	str	r3, [r7, #28]
 800475e:	2300      	movs	r3, #0
 8004760:	61bb      	str	r3, [r7, #24]
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004762:	4b3e      	ldr	r3, [pc, #248]	; (800485c <HAL_RCC_GetSysClockFreq+0x108>)
 8004764:	689b      	ldr	r3, [r3, #8]
 8004766:	f003 030c 	and.w	r3, r3, #12
 800476a:	613b      	str	r3, [r7, #16]
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800476c:	4b3b      	ldr	r3, [pc, #236]	; (800485c <HAL_RCC_GetSysClockFreq+0x108>)
 800476e:	68db      	ldr	r3, [r3, #12]
 8004770:	f003 0303 	and.w	r3, r3, #3
 8004774:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;
 8004776:	693b      	ldr	r3, [r7, #16]
 8004778:	2b00      	cmp	r3, #0
 800477a:	d005      	beq.n	8004788 <HAL_RCC_GetSysClockFreq+0x34>
 800477c:	693b      	ldr	r3, [r7, #16]
 800477e:	2b0c      	cmp	r3, #12
 8004780:	d121      	bne.n	80047c6 <HAL_RCC_GetSysClockFreq+0x72>

 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	2b01      	cmp	r3, #1
 8004786:	d11e      	bne.n	80047c6 <HAL_RCC_GetSysClockFreq+0x72>
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004788:	4b34      	ldr	r3, [pc, #208]	; (800485c <HAL_RCC_GetSysClockFreq+0x108>)
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f003 0308 	and.w	r3, r3, #8
 8004790:	2b00      	cmp	r3, #0
 8004792:	d107      	bne.n	80047a4 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* MSI or PLL with MSI source used as system clock source */
 8004794:	4b31      	ldr	r3, [pc, #196]	; (800485c <HAL_RCC_GetSysClockFreq+0x108>)
 8004796:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800479a:	0a1b      	lsrs	r3, r3, #8
 800479c:	f003 030f 	and.w	r3, r3, #15
 80047a0:	61fb      	str	r3, [r7, #28]
 80047a2:	e005      	b.n	80047b0 <HAL_RCC_GetSysClockFreq+0x5c>

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
    { /* MSISRANGE from RCC_CSR applies */
 80047a4:	4b2d      	ldr	r3, [pc, #180]	; (800485c <HAL_RCC_GetSysClockFreq+0x108>)
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	091b      	lsrs	r3, r3, #4
 80047aa:	f003 030f 	and.w	r3, r3, #15
 80047ae:	61fb      	str	r3, [r7, #28]
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
    }
    else
 80047b0:	4a2b      	ldr	r2, [pc, #172]	; (8004860 <HAL_RCC_GetSysClockFreq+0x10c>)
 80047b2:	69fb      	ldr	r3, [r7, #28]
 80047b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80047b8:	61fb      	str	r3, [r7, #28]
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80047ba:	693b      	ldr	r3, [r7, #16]
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d10d      	bne.n	80047dc <HAL_RCC_GetSysClockFreq+0x88>
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80047c0:	69fb      	ldr	r3, [r7, #28]
 80047c2:	61bb      	str	r3, [r7, #24]
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80047c4:	e00a      	b.n	80047dc <HAL_RCC_GetSysClockFreq+0x88>

    if(sysclk_source == RCC_CFGR_SWS_MSI)
    {
 80047c6:	693b      	ldr	r3, [r7, #16]
 80047c8:	2b04      	cmp	r3, #4
 80047ca:	d102      	bne.n	80047d2 <HAL_RCC_GetSysClockFreq+0x7e>
      /* MSI used as system clock source */
      sysclockfreq = msirange;
    }
 80047cc:	4b25      	ldr	r3, [pc, #148]	; (8004864 <HAL_RCC_GetSysClockFreq+0x110>)
 80047ce:	61bb      	str	r3, [r7, #24]
 80047d0:	e004      	b.n	80047dc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80047d2:	693b      	ldr	r3, [r7, #16]
 80047d4:	2b08      	cmp	r3, #8
 80047d6:	d101      	bne.n	80047dc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80047d8:	4b23      	ldr	r3, [pc, #140]	; (8004868 <HAL_RCC_GetSysClockFreq+0x114>)
 80047da:	61bb      	str	r3, [r7, #24]
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
  }
  else
 80047dc:	693b      	ldr	r3, [r7, #16]
 80047de:	2b0c      	cmp	r3, #12
 80047e0:	d134      	bne.n	800484c <HAL_RCC_GetSysClockFreq+0xf8>
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
  {
    /* PLL used as system clock  source */
 80047e2:	4b1e      	ldr	r3, [pc, #120]	; (800485c <HAL_RCC_GetSysClockFreq+0x108>)
 80047e4:	68db      	ldr	r3, [r3, #12]
 80047e6:	f003 0303 	and.w	r3, r3, #3
 80047ea:	60bb      	str	r3, [r7, #8]

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
 80047ec:	68bb      	ldr	r3, [r7, #8]
 80047ee:	2b02      	cmp	r3, #2
 80047f0:	d003      	beq.n	80047fa <HAL_RCC_GetSysClockFreq+0xa6>
 80047f2:	68bb      	ldr	r3, [r7, #8]
 80047f4:	2b03      	cmp	r3, #3
 80047f6:	d003      	beq.n	8004800 <HAL_RCC_GetSysClockFreq+0xac>
 80047f8:	e005      	b.n	8004806 <HAL_RCC_GetSysClockFreq+0xb2>
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80047fa:	4b1a      	ldr	r3, [pc, #104]	; (8004864 <HAL_RCC_GetSysClockFreq+0x110>)
 80047fc:	617b      	str	r3, [r7, #20]

 80047fe:	e005      	b.n	800480c <HAL_RCC_GetSysClockFreq+0xb8>
    switch (pllsource)
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
 8004800:	4b19      	ldr	r3, [pc, #100]	; (8004868 <HAL_RCC_GetSysClockFreq+0x114>)
 8004802:	617b      	str	r3, [r7, #20]
      pllvco = HSI_VALUE;
 8004804:	e002      	b.n	800480c <HAL_RCC_GetSysClockFreq+0xb8>
      break;

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004806:	69fb      	ldr	r3, [r7, #28]
 8004808:	617b      	str	r3, [r7, #20]
      break;
 800480a:	bf00      	nop

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
 800480c:	4b13      	ldr	r3, [pc, #76]	; (800485c <HAL_RCC_GetSysClockFreq+0x108>)
 800480e:	68db      	ldr	r3, [r3, #12]
 8004810:	091b      	lsrs	r3, r3, #4
 8004812:	f003 0307 	and.w	r3, r3, #7
 8004816:	3301      	adds	r3, #1
 8004818:	607b      	str	r3, [r7, #4]
    default:
 800481a:	4b10      	ldr	r3, [pc, #64]	; (800485c <HAL_RCC_GetSysClockFreq+0x108>)
 800481c:	68db      	ldr	r3, [r3, #12]
 800481e:	0a1b      	lsrs	r3, r3, #8
 8004820:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004824:	697a      	ldr	r2, [r7, #20]
 8004826:	fb03 f202 	mul.w	r2, r3, r2
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004830:	617b      	str	r3, [r7, #20]
      pllvco = msirange;
 8004832:	4b0a      	ldr	r3, [pc, #40]	; (800485c <HAL_RCC_GetSysClockFreq+0x108>)
 8004834:	68db      	ldr	r3, [r3, #12]
 8004836:	0e5b      	lsrs	r3, r3, #25
 8004838:	f003 0303 	and.w	r3, r3, #3
 800483c:	3301      	adds	r3, #1
 800483e:	005b      	lsls	r3, r3, #1
 8004840:	603b      	str	r3, [r7, #0]
      break;
 8004842:	697a      	ldr	r2, [r7, #20]
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	fbb2 f3f3 	udiv	r3, r2, r3
 800484a:	61bb      	str	r3, [r7, #24]
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800484c:	69bb      	ldr	r3, [r7, #24]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800484e:	4618      	mov	r0, r3
 8004850:	3724      	adds	r7, #36	; 0x24
 8004852:	46bd      	mov	sp, r7
 8004854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004858:	4770      	bx	lr
 800485a:	bf00      	nop
 800485c:	40021000 	.word	0x40021000
 8004860:	0800d6dc 	.word	0x0800d6dc
 8004864:	00f42400 	.word	0x00f42400
 8004868:	007a1200 	.word	0x007a1200

0800486c <HAL_RCC_GetHCLKFreq>:

/**
  * @brief  Return the HCLK frequency.
  * @note   Each time HCLK changes, this function must be called to update the
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
 800486c:	b480      	push	{r7}
 800486e:	af00      	add	r7, sp, #0
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
 8004870:	4b03      	ldr	r3, [pc, #12]	; (8004880 <HAL_RCC_GetHCLKFreq+0x14>)
 8004872:	681b      	ldr	r3, [r3, #0]
  * @retval HCLK frequency in Hz
 8004874:	4618      	mov	r0, r3
 8004876:	46bd      	mov	sp, r7
 8004878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487c:	4770      	bx	lr
 800487e:	bf00      	nop
 8004880:	20000004 	.word	0x20000004

08004884 <HAL_RCC_GetPCLK1Freq>:
  return SystemCoreClock;
}

/**
  * @brief  Return the PCLK1 frequency.
  * @note   Each time PCLK1 changes, this function must be called to update the
 8004884:	b580      	push	{r7, lr}
 8004886:	af00      	add	r7, sp, #0
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
 8004888:	f7ff fff0 	bl	800486c <HAL_RCC_GetHCLKFreq>
 800488c:	4602      	mov	r2, r0
 800488e:	4b06      	ldr	r3, [pc, #24]	; (80048a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004890:	689b      	ldr	r3, [r3, #8]
 8004892:	0a1b      	lsrs	r3, r3, #8
 8004894:	f003 0307 	and.w	r3, r3, #7
 8004898:	4904      	ldr	r1, [pc, #16]	; (80048ac <HAL_RCC_GetPCLK1Freq+0x28>)
 800489a:	5ccb      	ldrb	r3, [r1, r3]
 800489c:	f003 031f 	and.w	r3, r3, #31
 80048a0:	fa22 f303 	lsr.w	r3, r2, r3
  */
 80048a4:	4618      	mov	r0, r3
 80048a6:	bd80      	pop	{r7, pc}
 80048a8:	40021000 	.word	0x40021000
 80048ac:	0800d6d4 	.word	0x0800d6d4

080048b0 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
}

/**
  * @brief  Return the PCLK2 frequency.
  * @note   Each time PCLK2 changes, this function must be called to update the
 80048b0:	b580      	push	{r7, lr}
 80048b2:	af00      	add	r7, sp, #0
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
 80048b4:	f7ff ffda 	bl	800486c <HAL_RCC_GetHCLKFreq>
 80048b8:	4602      	mov	r2, r0
 80048ba:	4b06      	ldr	r3, [pc, #24]	; (80048d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80048bc:	689b      	ldr	r3, [r3, #8]
 80048be:	0adb      	lsrs	r3, r3, #11
 80048c0:	f003 0307 	and.w	r3, r3, #7
 80048c4:	4904      	ldr	r1, [pc, #16]	; (80048d8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80048c6:	5ccb      	ldrb	r3, [r1, r3]
 80048c8:	f003 031f 	and.w	r3, r3, #31
 80048cc:	fa22 f303 	lsr.w	r3, r2, r3
  */
 80048d0:	4618      	mov	r0, r3
 80048d2:	bd80      	pop	{r7, pc}
 80048d4:	40021000 	.word	0x40021000
 80048d8:	0800d6d4 	.word	0x0800d6d4

080048dc <HAL_RCC_GetClockConfig>:

/**
  * @brief  Configure the RCC_ClkInitStruct according to the internal
  *         RCC configuration registers.
  * @param  RCC_ClkInitStruct  pointer to an RCC_ClkInitTypeDef structure that
  *         will be configured.
 80048dc:	b480      	push	{r7}
 80048de:	b083      	sub	sp, #12
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
 80048e4:	6039      	str	r1, [r7, #0]
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Check the parameters */
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	220f      	movs	r2, #15
 80048ea:	601a      	str	r2, [r3, #0]
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

 80048ec:	4b12      	ldr	r3, [pc, #72]	; (8004938 <HAL_RCC_GetClockConfig+0x5c>)
 80048ee:	689b      	ldr	r3, [r3, #8]
 80048f0:	f003 0203 	and.w	r2, r3, #3
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	605a      	str	r2, [r3, #4]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;

 80048f8:	4b0f      	ldr	r3, [pc, #60]	; (8004938 <HAL_RCC_GetClockConfig+0x5c>)
 80048fa:	689b      	ldr	r3, [r3, #8]
 80048fc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	609a      	str	r2, [r3, #8]
  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);

 8004904:	4b0c      	ldr	r3, [pc, #48]	; (8004938 <HAL_RCC_GetClockConfig+0x5c>)
 8004906:	689b      	ldr	r3, [r3, #8]
 8004908:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	60da      	str	r2, [r3, #12]
  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);

 8004910:	4b09      	ldr	r3, [pc, #36]	; (8004938 <HAL_RCC_GetClockConfig+0x5c>)
 8004912:	689b      	ldr	r3, [r3, #8]
 8004914:	08db      	lsrs	r3, r3, #3
 8004916:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	611a      	str	r2, [r3, #16]
  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);

 800491e:	4b07      	ldr	r3, [pc, #28]	; (800493c <HAL_RCC_GetClockConfig+0x60>)
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f003 0207 	and.w	r2, r3, #7
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	601a      	str	r2, [r3, #0]
  /* Get the APB2 configuration ----------------------------------------------*/
 800492a:	bf00      	nop
 800492c:	370c      	adds	r7, #12
 800492e:	46bd      	mov	sp, r7
 8004930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004934:	4770      	bx	lr
 8004936:	bf00      	nop
 8004938:	40021000 	.word	0x40021000
 800493c:	40022000 	.word	0x40022000

08004940 <RCC_SetFlashLatencyFromMSIRange>:
  {
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

 8004940:	b580      	push	{r7, lr}
 8004942:	b086      	sub	sp, #24
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
  {
 8004948:	2300      	movs	r3, #0
 800494a:	613b      	str	r3, [r7, #16]
    if(msirange > RCC_MSIRANGE_8)
    {
 800494c:	4b2a      	ldr	r3, [pc, #168]	; (80049f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800494e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004950:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004954:	2b00      	cmp	r3, #0
 8004956:	d003      	beq.n	8004960 <RCC_SetFlashLatencyFromMSIRange+0x20>
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004958:	f7ff f8f0 	bl	8003b3c <HAL_PWREx_GetVoltageRange>
 800495c:	6178      	str	r0, [r7, #20]
 800495e:	e014      	b.n	800498a <RCC_SetFlashLatencyFromMSIRange+0x4a>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
      }
 8004960:	4b25      	ldr	r3, [pc, #148]	; (80049f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004962:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004964:	4a24      	ldr	r2, [pc, #144]	; (80049f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004966:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800496a:	6593      	str	r3, [r2, #88]	; 0x58
 800496c:	4b22      	ldr	r3, [pc, #136]	; (80049f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800496e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004970:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004974:	60fb      	str	r3, [r7, #12]
 8004976:	68fb      	ldr	r3, [r7, #12]
      else
 8004978:	f7ff f8e0 	bl	8003b3c <HAL_PWREx_GetVoltageRange>
 800497c:	6178      	str	r0, [r7, #20]
      {
 800497e:	4b1e      	ldr	r3, [pc, #120]	; (80049f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004980:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004982:	4a1d      	ldr	r2, [pc, #116]	; (80049f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004984:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004988:	6593      	str	r3, [r2, #88]	; 0x58
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
      }
 800498a:	697b      	ldr	r3, [r7, #20]
 800498c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004990:	d10b      	bne.n	80049aa <RCC_SetFlashLatencyFromMSIRange+0x6a>
    }
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	2b80      	cmp	r3, #128	; 0x80
 8004996:	d919      	bls.n	80049cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
  }
  else
  {
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2ba0      	cmp	r3, #160	; 0xa0
 800499c:	d902      	bls.n	80049a4 <RCC_SetFlashLatencyFromMSIRange+0x64>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 800499e:	2302      	movs	r3, #2
 80049a0:	613b      	str	r3, [r7, #16]
 80049a2:	e013      	b.n	80049cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
    }
    else
 80049a4:	2301      	movs	r3, #1
 80049a6:	613b      	str	r3, [r7, #16]
 80049a8:	e010      	b.n	80049cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else if(msirange == RCC_MSIRANGE_7)
      {
        /* MSI 8Mhz */
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2b80      	cmp	r3, #128	; 0x80
 80049ae:	d902      	bls.n	80049b6 <RCC_SetFlashLatencyFromMSIRange+0x76>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
 80049b0:	2303      	movs	r3, #3
 80049b2:	613b      	str	r3, [r7, #16]
 80049b4:	e00a      	b.n	80049cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
#endif
  }

 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	2b80      	cmp	r3, #128	; 0x80
 80049ba:	d102      	bne.n	80049c2 <RCC_SetFlashLatencyFromMSIRange+0x82>
  __HAL_FLASH_SET_LATENCY(latency);

  /* Check that the new number of wait states is taken into account to access the Flash
 80049bc:	2302      	movs	r3, #2
 80049be:	613b      	str	r3, [r7, #16]
 80049c0:	e004      	b.n	80049cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	2b70      	cmp	r3, #112	; 0x70
 80049c6:	d101      	bne.n	80049cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
  {
    return HAL_ERROR;
  }
 80049c8:	2301      	movs	r3, #1
 80049ca:	613b      	str	r3, [r7, #16]
  return HAL_OK;
}

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
/**
 80049cc:	4b0b      	ldr	r3, [pc, #44]	; (80049fc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f023 0207 	bic.w	r2, r3, #7
 80049d4:	4909      	ldr	r1, [pc, #36]	; (80049fc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80049d6:	693b      	ldr	r3, [r7, #16]
 80049d8:	4313      	orrs	r3, r2
 80049da:	600b      	str	r3, [r1, #0]
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
 80049dc:	4b07      	ldr	r3, [pc, #28]	; (80049fc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f003 0307 	and.w	r3, r3, #7
 80049e4:	693a      	ldr	r2, [r7, #16]
 80049e6:	429a      	cmp	r2, r3
 80049e8:	d001      	beq.n	80049ee <RCC_SetFlashLatencyFromMSIRange+0xae>
{
  uint32_t msirange = 0U;
 80049ea:	2301      	movs	r3, #1
 80049ec:	e000      	b.n	80049f0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 80049ee:	2300      	movs	r3, #0
  {
 80049f0:	4618      	mov	r0, r3
 80049f2:	3718      	adds	r7, #24
 80049f4:	46bd      	mov	sp, r7
 80049f6:	bd80      	pop	{r7, pc}
 80049f8:	40021000 	.word	0x40021000
 80049fc:	40022000 	.word	0x40022000

08004a00 <HAL_RCCEx_PeriphCLKConfig>:
  *
  * @note   Care must be taken when HAL_RCCEx_PeriphCLKConfig() is used to select
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
 8004a00:	b580      	push	{r7, lr}
 8004a02:	b086      	sub	sp, #24
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004a08:	2300      	movs	r3, #0
 8004a0a:	74fb      	strb	r3, [r7, #19]
  uint32_t tmpregister, tickstart;     /* no init needed */
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d041      	beq.n	8004aa0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004a20:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004a24:	d02a      	beq.n	8004a7c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004a26:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004a2a:	d824      	bhi.n	8004a76 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004a2c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004a30:	d008      	beq.n	8004a44 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004a32:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004a36:	d81e      	bhi.n	8004a76 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d00a      	beq.n	8004a52 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004a3c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004a40:	d010      	beq.n	8004a64 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004a42:	e018      	b.n	8004a76 <HAL_RCCEx_PeriphCLKConfig+0x76>

    switch(PeriphClkInit->Sai1ClockSelection)
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
 8004a44:	4b86      	ldr	r3, [pc, #536]	; (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a46:	68db      	ldr	r3, [r3, #12]
 8004a48:	4a85      	ldr	r2, [pc, #532]	; (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a4a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a4e:	60d3      	str	r3, [r2, #12]
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
 8004a50:	e015      	b.n	8004a7e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* SAI1 clock source config set later after clock selection check */
      break;

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	3304      	adds	r3, #4
 8004a56:	2100      	movs	r1, #0
 8004a58:	4618      	mov	r0, r3
 8004a5a:	f000 facb 	bl	8004ff4 <RCCEx_PLLSAI1_Config>
 8004a5e:	4603      	mov	r3, r0
 8004a60:	74fb      	strb	r3, [r7, #19]
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004a62:	e00c      	b.n	8004a7e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* SAI1 clock source config set later after clock selection check */
      break;

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	3320      	adds	r3, #32
 8004a68:	2100      	movs	r1, #0
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	f000 fbb6 	bl	80051dc <RCCEx_PLLSAI2_Config>
 8004a70:	4603      	mov	r3, r0
 8004a72:	74fb      	strb	r3, [r7, #19]
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004a74:	e003      	b.n	8004a7e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

 8004a76:	2301      	movs	r3, #1
 8004a78:	74fb      	strb	r3, [r7, #19]
    default:
 8004a7a:	e000      	b.n	8004a7e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
 8004a7c:	bf00      	nop
      ret = HAL_ERROR;
      break;
    }
 8004a7e:	7cfb      	ldrb	r3, [r7, #19]
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d10b      	bne.n	8004a9c <HAL_RCCEx_PeriphCLKConfig+0x9c>

    if(ret == HAL_OK)
    {
 8004a84:	4b76      	ldr	r3, [pc, #472]	; (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a8a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004a92:	4973      	ldr	r1, [pc, #460]	; (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a94:	4313      	orrs	r3, r2
 8004a96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004a9a:	e001      	b.n	8004aa0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
    }
    else
    {
 8004a9c:	7cfb      	ldrb	r3, [r7, #19]
 8004a9e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SAI1 */

#if defined(SAI2)

 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d041      	beq.n	8004b30 <HAL_RCCEx_PeriphCLKConfig+0x130>
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004ab0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004ab4:	d02a      	beq.n	8004b0c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8004ab6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004aba:	d824      	bhi.n	8004b06 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004abc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004ac0:	d008      	beq.n	8004ad4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004ac2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004ac6:	d81e      	bhi.n	8004b06 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d00a      	beq.n	8004ae2 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004acc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004ad0:	d010      	beq.n	8004af4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004ad2:	e018      	b.n	8004b06 <HAL_RCCEx_PeriphCLKConfig+0x106>

    switch(PeriphClkInit->Sai2ClockSelection)
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
 8004ad4:	4b62      	ldr	r3, [pc, #392]	; (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ad6:	68db      	ldr	r3, [r3, #12]
 8004ad8:	4a61      	ldr	r2, [pc, #388]	; (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ada:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ade:	60d3      	str	r3, [r2, #12]
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004ae0:	e015      	b.n	8004b0e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      /* SAI2 clock source config set later after clock selection check */
      break;

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	3304      	adds	r3, #4
 8004ae6:	2100      	movs	r1, #0
 8004ae8:	4618      	mov	r0, r3
 8004aea:	f000 fa83 	bl	8004ff4 <RCCEx_PLLSAI1_Config>
 8004aee:	4603      	mov	r3, r0
 8004af0:	74fb      	strb	r3, [r7, #19]
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004af2:	e00c      	b.n	8004b0e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      /* SAI2 clock source config set later after clock selection check */
      break;

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	3320      	adds	r3, #32
 8004af8:	2100      	movs	r1, #0
 8004afa:	4618      	mov	r0, r3
 8004afc:	f000 fb6e 	bl	80051dc <RCCEx_PLLSAI2_Config>
 8004b00:	4603      	mov	r3, r0
 8004b02:	74fb      	strb	r3, [r7, #19]
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004b04:	e003      	b.n	8004b0e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

 8004b06:	2301      	movs	r3, #1
 8004b08:	74fb      	strb	r3, [r7, #19]
    default:
 8004b0a:	e000      	b.n	8004b0e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
 8004b0c:	bf00      	nop
      ret = HAL_ERROR;
      break;
    }
 8004b0e:	7cfb      	ldrb	r3, [r7, #19]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d10b      	bne.n	8004b2c <HAL_RCCEx_PeriphCLKConfig+0x12c>

    if(ret == HAL_OK)
    {
 8004b14:	4b52      	ldr	r3, [pc, #328]	; (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b1a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004b22:	494f      	ldr	r1, [pc, #316]	; (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b24:	4313      	orrs	r3, r2
 8004b26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004b2a:	e001      	b.n	8004b30 <HAL_RCCEx_PeriphCLKConfig+0x130>
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
    }
    else
    {
 8004b2c:	7cfb      	ldrb	r3, [r7, #19]
 8004b2e:	74bb      	strb	r3, [r7, #18]
      /* set overall return value */
      status = ret;
    }
  }
#endif /* SAI2 */

 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	f000 80a0 	beq.w	8004c7e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004b3e:	2300      	movs	r3, #0
 8004b40:	747b      	strb	r3, [r7, #17]
  {
    FlagStatus       pwrclkchanged = RESET;

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

 8004b42:	4b47      	ldr	r3, [pc, #284]	; (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d101      	bne.n	8004b52 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8004b4e:	2301      	movs	r3, #1
 8004b50:	e000      	b.n	8004b54 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8004b52:	2300      	movs	r3, #0
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d00d      	beq.n	8004b74 <HAL_RCCEx_PeriphCLKConfig+0x174>
    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004b58:	4b41      	ldr	r3, [pc, #260]	; (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b5c:	4a40      	ldr	r2, [pc, #256]	; (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b62:	6593      	str	r3, [r2, #88]	; 0x58
 8004b64:	4b3e      	ldr	r3, [pc, #248]	; (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b6c:	60bb      	str	r3, [r7, #8]
 8004b6e:	68bb      	ldr	r3, [r7, #8]
    {
 8004b70:	2301      	movs	r3, #1
 8004b72:	747b      	strb	r3, [r7, #17]
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

 8004b74:	4b3b      	ldr	r3, [pc, #236]	; (8004c64 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	4a3a      	ldr	r2, [pc, #232]	; (8004c64 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004b7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b7e:	6013      	str	r3, [r2, #0]
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);

 8004b80:	f7fd faee 	bl	8002160 <HAL_GetTick>
 8004b84:	60f8      	str	r0, [r7, #12]
    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004b86:	e009      	b.n	8004b9c <HAL_RCCEx_PeriphCLKConfig+0x19c>

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004b88:	f7fd faea 	bl	8002160 <HAL_GetTick>
 8004b8c:	4602      	mov	r2, r0
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	1ad3      	subs	r3, r2, r3
 8004b92:	2b02      	cmp	r3, #2
 8004b94:	d902      	bls.n	8004b9c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b96:	2303      	movs	r3, #3
 8004b98:	74fb      	strb	r3, [r7, #19]
      {
 8004b9a:	e005      	b.n	8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    tickstart = HAL_GetTick();
 8004b9c:	4b31      	ldr	r3, [pc, #196]	; (8004c64 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d0ef      	beq.n	8004b88 <HAL_RCCEx_PeriphCLKConfig+0x188>
        ret = HAL_TIMEOUT;
        break;
      }
    }
 8004ba8:	7cfb      	ldrb	r3, [r7, #19]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d15c      	bne.n	8004c68 <HAL_RCCEx_PeriphCLKConfig+0x268>

    if(ret == HAL_OK)
    {
 8004bae:	4b2c      	ldr	r3, [pc, #176]	; (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004bb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bb4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004bb8:	617b      	str	r3, [r7, #20]
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004bba:	697b      	ldr	r3, [r7, #20]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d01f      	beq.n	8004c00 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004bc6:	697a      	ldr	r2, [r7, #20]
 8004bc8:	429a      	cmp	r2, r3
 8004bca:	d019      	beq.n	8004c00 <HAL_RCCEx_PeriphCLKConfig+0x200>

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
      {
 8004bcc:	4b24      	ldr	r3, [pc, #144]	; (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004bce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bd2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004bd6:	617b      	str	r3, [r7, #20]
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004bd8:	4b21      	ldr	r3, [pc, #132]	; (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004bda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bde:	4a20      	ldr	r2, [pc, #128]	; (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004be0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004be4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
 8004be8:	4b1d      	ldr	r3, [pc, #116]	; (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004bea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bee:	4a1c      	ldr	r2, [pc, #112]	; (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004bf0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004bf4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_FORCE();
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004bf8:	4a19      	ldr	r2, [pc, #100]	; (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004bfa:	697b      	ldr	r3, [r7, #20]
 8004bfc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
      }

 8004c00:	697b      	ldr	r3, [r7, #20]
 8004c02:	f003 0301 	and.w	r3, r3, #1
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d016      	beq.n	8004c38 <HAL_RCCEx_PeriphCLKConfig+0x238>
      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
      {
 8004c0a:	f7fd faa9 	bl	8002160 <HAL_GetTick>
 8004c0e:	60f8      	str	r0, [r7, #12]
        /* Get Start Tick*/
        tickstart = HAL_GetTick();

 8004c10:	e00b      	b.n	8004c2a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004c12:	f7fd faa5 	bl	8002160 <HAL_GetTick>
 8004c16:	4602      	mov	r2, r0
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	1ad3      	subs	r3, r2, r3
 8004c1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c20:	4293      	cmp	r3, r2
 8004c22:	d902      	bls.n	8004c2a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c24:	2303      	movs	r3, #3
 8004c26:	74fb      	strb	r3, [r7, #19]
          {
 8004c28:	e006      	b.n	8004c38 <HAL_RCCEx_PeriphCLKConfig+0x238>

 8004c2a:	4b0d      	ldr	r3, [pc, #52]	; (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c30:	f003 0302 	and.w	r3, r3, #2
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d0ec      	beq.n	8004c12 <HAL_RCCEx_PeriphCLKConfig+0x212>
            ret = HAL_TIMEOUT;
            break;
          }
        }
      }
 8004c38:	7cfb      	ldrb	r3, [r7, #19]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d10c      	bne.n	8004c58 <HAL_RCCEx_PeriphCLKConfig+0x258>

      if(ret == HAL_OK)
      {
 8004c3e:	4b08      	ldr	r3, [pc, #32]	; (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c44:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c4e:	4904      	ldr	r1, [pc, #16]	; (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c50:	4313      	orrs	r3, r2
 8004c52:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004c56:	e009      	b.n	8004c6c <HAL_RCCEx_PeriphCLKConfig+0x26c>
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
      }
      else
      {
 8004c58:	7cfb      	ldrb	r3, [r7, #19]
 8004c5a:	74bb      	strb	r3, [r7, #18]
 8004c5c:	e006      	b.n	8004c6c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8004c5e:	bf00      	nop
 8004c60:	40021000 	.word	0x40021000
 8004c64:	40007000 	.word	0x40007000
        /* set overall return value */
        status = ret;
      }
    }
    else
    {
 8004c68:	7cfb      	ldrb	r3, [r7, #19]
 8004c6a:	74bb      	strb	r3, [r7, #18]
      /* set overall return value */
      status = ret;
    }

 8004c6c:	7c7b      	ldrb	r3, [r7, #17]
 8004c6e:	2b01      	cmp	r3, #1
 8004c70:	d105      	bne.n	8004c7e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004c72:	4b9e      	ldr	r3, [pc, #632]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c76:	4a9d      	ldr	r2, [pc, #628]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c78:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c7c:	6593      	str	r3, [r2, #88]	; 0x58
    {
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f003 0301 	and.w	r3, r3, #1
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d00a      	beq.n	8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

 8004c8a:	4b98      	ldr	r3, [pc, #608]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c90:	f023 0203 	bic.w	r2, r3, #3
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c98:	4994      	ldr	r1, [pc, #592]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c9a:	4313      	orrs	r3, r2
 8004c9c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
  }

 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f003 0302 	and.w	r3, r3, #2
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d00a      	beq.n	8004cc2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

 8004cac:	4b8f      	ldr	r3, [pc, #572]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cb2:	f023 020c 	bic.w	r2, r3, #12
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cba:	498c      	ldr	r1, [pc, #560]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cbc:	4313      	orrs	r3, r2
 8004cbe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
  }

#if defined(USART3)

 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f003 0304 	and.w	r3, r3, #4
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d00a      	beq.n	8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

 8004cce:	4b87      	ldr	r3, [pc, #540]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cd4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cdc:	4983      	ldr	r1, [pc, #524]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cde:	4313      	orrs	r3, r2
 8004ce0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* USART3 */

#if defined(UART4)

 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f003 0308 	and.w	r3, r3, #8
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d00a      	beq.n	8004d06 <HAL_RCCEx_PeriphCLKConfig+0x306>
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

 8004cf0:	4b7e      	ldr	r3, [pc, #504]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cf6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cfe:	497b      	ldr	r1, [pc, #492]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d00:	4313      	orrs	r3, r2
 8004d02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART4 */

#if defined(UART5)

 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f003 0310 	and.w	r3, r3, #16
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d00a      	beq.n	8004d28 <HAL_RCCEx_PeriphCLKConfig+0x328>
  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

 8004d12:	4b76      	ldr	r3, [pc, #472]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d18:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d20:	4972      	ldr	r1, [pc, #456]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d22:	4313      	orrs	r3, r2
 8004d24:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
  }

#endif /* UART5 */

 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f003 0320 	and.w	r3, r3, #32
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d00a      	beq.n	8004d4a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

 8004d34:	4b6d      	ldr	r3, [pc, #436]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d3a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d42:	496a      	ldr	r1, [pc, #424]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d44:	4313      	orrs	r3, r2
 8004d46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
  }

 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d00a      	beq.n	8004d6c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
  {
 8004d56:	4b65      	ldr	r3, [pc, #404]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d5c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d64:	4961      	ldr	r1, [pc, #388]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d66:	4313      	orrs	r3, r2
 8004d68:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
  }

 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d00a      	beq.n	8004d8e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
  {
 8004d78:	4b5c      	ldr	r3, [pc, #368]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d7e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d86:	4959      	ldr	r1, [pc, #356]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d88:	4313      	orrs	r3, r2
 8004d8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }

 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d00a      	beq.n	8004db0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

 8004d9a:	4b54      	ldr	r3, [pc, #336]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004da0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004da8:	4950      	ldr	r1, [pc, #320]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004daa:	4313      	orrs	r3, r2
 8004dac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
  }

#if defined(I2C2)

 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d00a      	beq.n	8004dd2 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

 8004dbc:	4b4b      	ldr	r3, [pc, #300]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004dbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dc2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dca:	4948      	ldr	r1, [pc, #288]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004dcc:	4313      	orrs	r3, r2
 8004dce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
  }

#endif /* I2C2 */

 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d00a      	beq.n	8004df4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

 8004dde:	4b43      	ldr	r3, [pc, #268]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004de0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004de4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004dec:	493f      	ldr	r1, [pc, #252]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004dee:	4313      	orrs	r3, r2
 8004df0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d028      	beq.n	8004e52 <HAL_RCCEx_PeriphCLKConfig+0x452>
  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
  {
 8004e00:	4b3a      	ldr	r3, [pc, #232]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e06:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e0e:	4937      	ldr	r1, [pc, #220]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e10:	4313      	orrs	r3, r2
 8004e12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e1a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004e1e:	d106      	bne.n	8004e2e <HAL_RCCEx_PeriphCLKConfig+0x42e>

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
    {
 8004e20:	4b32      	ldr	r3, [pc, #200]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e22:	68db      	ldr	r3, [r3, #12]
 8004e24:	4a31      	ldr	r2, [pc, #196]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e26:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004e2a:	60d3      	str	r3, [r2, #12]
 8004e2c:	e011      	b.n	8004e52 <HAL_RCCEx_PeriphCLKConfig+0x452>
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
    }
    else
    {
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e32:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004e36:	d10c      	bne.n	8004e52 <HAL_RCCEx_PeriphCLKConfig+0x452>
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
      {
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	3304      	adds	r3, #4
 8004e3c:	2101      	movs	r1, #1
 8004e3e:	4618      	mov	r0, r3
 8004e40:	f000 f8d8 	bl	8004ff4 <RCCEx_PLLSAI1_Config>
 8004e44:	4603      	mov	r3, r0
 8004e46:	74fb      	strb	r3, [r7, #19]
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004e48:	7cfb      	ldrb	r3, [r7, #19]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d001      	beq.n	8004e52 <HAL_RCCEx_PeriphCLKConfig+0x452>

        if(ret != HAL_OK)
        {
 8004e4e:	7cfb      	ldrb	r3, [r7, #19]
 8004e50:	74bb      	strb	r3, [r7, #18]
  }

#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d028      	beq.n	8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
  {
 8004e5e:	4b23      	ldr	r3, [pc, #140]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e64:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e6c:	491f      	ldr	r1, [pc, #124]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e6e:	4313      	orrs	r3, r2
 8004e70:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e78:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004e7c:	d106      	bne.n	8004e8c <HAL_RCCEx_PeriphCLKConfig+0x48c>

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
    {
 8004e7e:	4b1b      	ldr	r3, [pc, #108]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e80:	68db      	ldr	r3, [r3, #12]
 8004e82:	4a1a      	ldr	r2, [pc, #104]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e84:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004e88:	60d3      	str	r3, [r2, #12]
 8004e8a:	e011      	b.n	8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e90:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004e94:	d10c      	bne.n	8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
    {
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	3304      	adds	r3, #4
 8004e9a:	2101      	movs	r1, #1
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	f000 f8a9 	bl	8004ff4 <RCCEx_PLLSAI1_Config>
 8004ea2:	4603      	mov	r3, r0
 8004ea4:	74fb      	strb	r3, [r7, #19]
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004ea6:	7cfb      	ldrb	r3, [r7, #19]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d001      	beq.n	8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>

      if(ret != HAL_OK)
      {
 8004eac:	7cfb      	ldrb	r3, [r7, #19]
 8004eae:	74bb      	strb	r3, [r7, #18]
      /* nothing to do */
    }
  }

#endif /* SDMMC1 */

 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d02b      	beq.n	8004f14 <HAL_RCCEx_PeriphCLKConfig+0x514>
  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
  {
 8004ebc:	4b0b      	ldr	r3, [pc, #44]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ebe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ec2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004eca:	4908      	ldr	r1, [pc, #32]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ecc:	4313      	orrs	r3, r2
 8004ece:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ed6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004eda:	d109      	bne.n	8004ef0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
    {
 8004edc:	4b03      	ldr	r3, [pc, #12]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ede:	68db      	ldr	r3, [r3, #12]
 8004ee0:	4a02      	ldr	r2, [pc, #8]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ee2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004ee6:	60d3      	str	r3, [r2, #12]
 8004ee8:	e014      	b.n	8004f14 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004eea:	bf00      	nop
 8004eec:	40021000 	.word	0x40021000
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
    }
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ef4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004ef8:	d10c      	bne.n	8004f14 <HAL_RCCEx_PeriphCLKConfig+0x514>
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
    {
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	3304      	adds	r3, #4
 8004efe:	2101      	movs	r1, #1
 8004f00:	4618      	mov	r0, r3
 8004f02:	f000 f877 	bl	8004ff4 <RCCEx_PLLSAI1_Config>
 8004f06:	4603      	mov	r3, r0
 8004f08:	74fb      	strb	r3, [r7, #19]
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004f0a:	7cfb      	ldrb	r3, [r7, #19]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d001      	beq.n	8004f14 <HAL_RCCEx_PeriphCLKConfig+0x514>

      if(ret != HAL_OK)
      {
 8004f10:	7cfb      	ldrb	r3, [r7, #19]
 8004f12:	74bb      	strb	r3, [r7, #18]
    {
      /* nothing to do */
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d02f      	beq.n	8004f80 <HAL_RCCEx_PeriphCLKConfig+0x580>
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

 8004f20:	4b2b      	ldr	r3, [pc, #172]	; (8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004f22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f26:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004f2e:	4928      	ldr	r1, [pc, #160]	; (8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004f30:	4313      	orrs	r3, r2
 8004f32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);

 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004f3a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004f3e:	d10d      	bne.n	8004f5c <HAL_RCCEx_PeriphCLKConfig+0x55c>
#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
    {
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	3304      	adds	r3, #4
 8004f44:	2102      	movs	r1, #2
 8004f46:	4618      	mov	r0, r3
 8004f48:	f000 f854 	bl	8004ff4 <RCCEx_PLLSAI1_Config>
 8004f4c:	4603      	mov	r3, r0
 8004f4e:	74fb      	strb	r3, [r7, #19]
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004f50:	7cfb      	ldrb	r3, [r7, #19]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d014      	beq.n	8004f80 <HAL_RCCEx_PeriphCLKConfig+0x580>

      if(ret != HAL_OK)
      {
 8004f56:	7cfb      	ldrb	r3, [r7, #19]
 8004f58:	74bb      	strb	r3, [r7, #18]
 8004f5a:	e011      	b.n	8004f80 <HAL_RCCEx_PeriphCLKConfig+0x580>
        status = ret;
      }
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004f60:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004f64:	d10c      	bne.n	8004f80 <HAL_RCCEx_PeriphCLKConfig+0x580>

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
    {
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	3320      	adds	r3, #32
 8004f6a:	2102      	movs	r1, #2
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	f000 f935 	bl	80051dc <RCCEx_PLLSAI2_Config>
 8004f72:	4603      	mov	r3, r0
 8004f74:	74fb      	strb	r3, [r7, #19]
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004f76:	7cfb      	ldrb	r3, [r7, #19]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d001      	beq.n	8004f80 <HAL_RCCEx_PeriphCLKConfig+0x580>

      if(ret != HAL_OK)
      {
 8004f7c:	7cfb      	ldrb	r3, [r7, #19]
 8004f7e:	74bb      	strb	r3, [r7, #18]

  }
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d00a      	beq.n	8004fa2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

 8004f8c:	4b10      	ldr	r3, [pc, #64]	; (8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004f8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f92:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004f9a:	490d      	ldr	r1, [pc, #52]	; (8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004f9c:	4313      	orrs	r3, r2
 8004f9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d00b      	beq.n	8004fc6 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

 8004fae:	4b08      	ldr	r3, [pc, #32]	; (8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004fb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fb4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004fbe:	4904      	ldr	r1, [pc, #16]	; (8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004fc0:	4313      	orrs	r3, r2
 8004fc2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */
 8004fc6:	7cbb      	ldrb	r3, [r7, #18]

 8004fc8:	4618      	mov	r0, r3
 8004fca:	3718      	adds	r7, #24
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	bd80      	pop	{r7, pc}
 8004fd0:	40021000 	.word	0x40021000

08004fd4 <HAL_RCCEx_EnableMSIPLLMode>:
/**
  * @brief  Enable the PLL-mode of the MSI.
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
 8004fd4:	b480      	push	{r7}
 8004fd6:	af00      	add	r7, sp, #0
void HAL_RCCEx_EnableMSIPLLMode(void)
 8004fd8:	4b05      	ldr	r3, [pc, #20]	; (8004ff0 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	4a04      	ldr	r2, [pc, #16]	; (8004ff0 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004fde:	f043 0304 	orr.w	r3, r3, #4
 8004fe2:	6013      	str	r3, [r2, #0]
{
 8004fe4:	bf00      	nop
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fec:	4770      	bx	lr
 8004fee:	bf00      	nop
 8004ff0:	40021000 	.word	0x40021000

08004ff4 <RCCEx_PLLSAI1_Config>:
  * @param  Divider  divider parameter to be updated
  *
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	b084      	sub	sp, #16
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
 8004ffc:	6039      	str	r1, [r7, #0]
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004ffe:	2300      	movs	r3, #0
 8005000:	73fb      	strb	r3, [r7, #15]
  /* P, Q and R dividers are verified in each specific divider case below */
  assert_param(IS_RCC_PLLSAI1SOURCE(PllSai1->PLLSAI1Source));
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

 8005002:	4b75      	ldr	r3, [pc, #468]	; (80051d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005004:	68db      	ldr	r3, [r3, #12]
 8005006:	f003 0303 	and.w	r3, r3, #3
 800500a:	2b00      	cmp	r3, #0
 800500c:	d018      	beq.n	8005040 <RCCEx_PLLSAI1_Config+0x4c>
  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
  {
 800500e:	4b72      	ldr	r3, [pc, #456]	; (80051d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005010:	68db      	ldr	r3, [r3, #12]
 8005012:	f003 0203 	and.w	r2, r3, #3
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	429a      	cmp	r2, r3
 800501c:	d10d      	bne.n	800503a <RCCEx_PLLSAI1_Config+0x46>
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
    /* PLL clock source and divider M already set, check that no request for change  */
 8005022:	2b00      	cmp	r3, #0
 8005024:	d009      	beq.n	800503a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
 8005026:	4b6c      	ldr	r3, [pc, #432]	; (80051d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005028:	68db      	ldr	r3, [r3, #12]
 800502a:	091b      	lsrs	r3, r3, #4
 800502c:	f003 0307 	and.w	r3, r3, #7
 8005030:	1c5a      	adds	r2, r3, #1
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	685b      	ldr	r3, [r3, #4]
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005036:	429a      	cmp	r2, r3
 8005038:	d047      	beq.n	80050ca <RCCEx_PLLSAI1_Config+0xd6>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
 800503a:	2301      	movs	r3, #1
 800503c:	73fb      	strb	r3, [r7, #15]
 800503e:	e044      	b.n	80050ca <RCCEx_PLLSAI1_Config+0xd6>
    {
      status = HAL_ERROR;
    }
  }
  else
  {
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	2b03      	cmp	r3, #3
 8005046:	d018      	beq.n	800507a <RCCEx_PLLSAI1_Config+0x86>
 8005048:	2b03      	cmp	r3, #3
 800504a:	d825      	bhi.n	8005098 <RCCEx_PLLSAI1_Config+0xa4>
 800504c:	2b01      	cmp	r3, #1
 800504e:	d002      	beq.n	8005056 <RCCEx_PLLSAI1_Config+0x62>
 8005050:	2b02      	cmp	r3, #2
 8005052:	d009      	beq.n	8005068 <RCCEx_PLLSAI1_Config+0x74>
 8005054:	e020      	b.n	8005098 <RCCEx_PLLSAI1_Config+0xa4>
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
    {
 8005056:	4b60      	ldr	r3, [pc, #384]	; (80051d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f003 0302 	and.w	r3, r3, #2
 800505e:	2b00      	cmp	r3, #0
 8005060:	d11d      	bne.n	800509e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005062:	2301      	movs	r3, #1
 8005064:	73fb      	strb	r3, [r7, #15]
      {
        status = HAL_ERROR;
 8005066:	e01a      	b.n	800509e <RCCEx_PLLSAI1_Config+0xaa>
      }
      break;
 8005068:	4b5b      	ldr	r3, [pc, #364]	; (80051d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005070:	2b00      	cmp	r3, #0
 8005072:	d116      	bne.n	80050a2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005074:	2301      	movs	r3, #1
 8005076:	73fb      	strb	r3, [r7, #15]
      {
        status = HAL_ERROR;
 8005078:	e013      	b.n	80050a2 <RCCEx_PLLSAI1_Config+0xae>
      }
      break;
 800507a:	4b57      	ldr	r3, [pc, #348]	; (80051d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005082:	2b00      	cmp	r3, #0
 8005084:	d10f      	bne.n	80050a6 <RCCEx_PLLSAI1_Config+0xb2>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005086:	4b54      	ldr	r3, [pc, #336]	; (80051d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800508e:	2b00      	cmp	r3, #0
 8005090:	d109      	bne.n	80050a6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005092:	2301      	movs	r3, #1
 8005094:	73fb      	strb	r3, [r7, #15]
        {
          status = HAL_ERROR;
        }
 8005096:	e006      	b.n	80050a6 <RCCEx_PLLSAI1_Config+0xb2>
      }
      break;
 8005098:	2301      	movs	r3, #1
 800509a:	73fb      	strb	r3, [r7, #15]
    default:
 800509c:	e004      	b.n	80050a8 <RCCEx_PLLSAI1_Config+0xb4>
        status = HAL_ERROR;
 800509e:	bf00      	nop
 80050a0:	e002      	b.n	80050a8 <RCCEx_PLLSAI1_Config+0xb4>
        status = HAL_ERROR;
 80050a2:	bf00      	nop
 80050a4:	e000      	b.n	80050a8 <RCCEx_PLLSAI1_Config+0xb4>
        }
 80050a6:	bf00      	nop
      status = HAL_ERROR;
      break;
    }
 80050a8:	7bfb      	ldrb	r3, [r7, #15]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d10d      	bne.n	80050ca <RCCEx_PLLSAI1_Config+0xd6>
    if(status == HAL_OK)
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
 80050ae:	4b4a      	ldr	r3, [pc, #296]	; (80051d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80050b0:	68db      	ldr	r3, [r3, #12]
 80050b2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6819      	ldr	r1, [r3, #0]
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	685b      	ldr	r3, [r3, #4]
 80050be:	3b01      	subs	r3, #1
 80050c0:	011b      	lsls	r3, r3, #4
 80050c2:	430b      	orrs	r3, r1
 80050c4:	4944      	ldr	r1, [pc, #272]	; (80051d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80050c6:	4313      	orrs	r3, r2
 80050c8:	60cb      	str	r3, [r1, #12]
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }
 80050ca:	7bfb      	ldrb	r3, [r7, #15]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d17d      	bne.n	80051cc <RCCEx_PLLSAI1_Config+0x1d8>

  if(status == HAL_OK)
  {
 80050d0:	4b41      	ldr	r3, [pc, #260]	; (80051d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	4a40      	ldr	r2, [pc, #256]	; (80051d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80050d6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80050da:	6013      	str	r3, [r2, #0]
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();

 80050dc:	f7fd f840 	bl	8002160 <HAL_GetTick>
 80050e0:	60b8      	str	r0, [r7, #8]
    /* Get Start Tick*/
    tickstart = HAL_GetTick();

 80050e2:	e009      	b.n	80050f8 <RCCEx_PLLSAI1_Config+0x104>
    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80050e4:	f7fd f83c 	bl	8002160 <HAL_GetTick>
 80050e8:	4602      	mov	r2, r0
 80050ea:	68bb      	ldr	r3, [r7, #8]
 80050ec:	1ad3      	subs	r3, r2, r3
 80050ee:	2b02      	cmp	r3, #2
 80050f0:	d902      	bls.n	80050f8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80050f2:	2303      	movs	r3, #3
 80050f4:	73fb      	strb	r3, [r7, #15]
      {
 80050f6:	e005      	b.n	8005104 <RCCEx_PLLSAI1_Config+0x110>

 80050f8:	4b37      	ldr	r3, [pc, #220]	; (80051d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005100:	2b00      	cmp	r3, #0
 8005102:	d1ef      	bne.n	80050e4 <RCCEx_PLLSAI1_Config+0xf0>
        status = HAL_TIMEOUT;
        break;
      }
    }
 8005104:	7bfb      	ldrb	r3, [r7, #15]
 8005106:	2b00      	cmp	r3, #0
 8005108:	d160      	bne.n	80051cc <RCCEx_PLLSAI1_Config+0x1d8>

    if(status == HAL_OK)
 800510a:	683b      	ldr	r3, [r7, #0]
 800510c:	2b00      	cmp	r3, #0
 800510e:	d111      	bne.n	8005134 <RCCEx_PLLSAI1_Config+0x140>
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
 8005110:	4b31      	ldr	r3, [pc, #196]	; (80051d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005112:	691b      	ldr	r3, [r3, #16]
 8005114:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005118:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800511c:	687a      	ldr	r2, [r7, #4]
 800511e:	6892      	ldr	r2, [r2, #8]
 8005120:	0211      	lsls	r1, r2, #8
 8005122:	687a      	ldr	r2, [r7, #4]
 8005124:	68d2      	ldr	r2, [r2, #12]
 8005126:	0912      	lsrs	r2, r2, #4
 8005128:	0452      	lsls	r2, r2, #17
 800512a:	430a      	orrs	r2, r1
 800512c:	492a      	ldr	r1, [pc, #168]	; (80051d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800512e:	4313      	orrs	r3, r2
 8005130:	610b      	str	r3, [r1, #16]
 8005132:	e027      	b.n	8005184 <RCCEx_PLLSAI1_Config+0x190>
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1P,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	2b01      	cmp	r3, #1
 8005138:	d112      	bne.n	8005160 <RCCEx_PLLSAI1_Config+0x16c>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1Q | RCC_PLLSAI1CFGR_PLLSAI1M,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
 800513a:	4b27      	ldr	r3, [pc, #156]	; (80051d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800513c:	691b      	ldr	r3, [r3, #16]
 800513e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8005142:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005146:	687a      	ldr	r2, [r7, #4]
 8005148:	6892      	ldr	r2, [r2, #8]
 800514a:	0211      	lsls	r1, r2, #8
 800514c:	687a      	ldr	r2, [r7, #4]
 800514e:	6912      	ldr	r2, [r2, #16]
 8005150:	0852      	lsrs	r2, r2, #1
 8005152:	3a01      	subs	r2, #1
 8005154:	0552      	lsls	r2, r2, #21
 8005156:	430a      	orrs	r2, r1
 8005158:	491f      	ldr	r1, [pc, #124]	; (80051d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800515a:	4313      	orrs	r3, r2
 800515c:	610b      	str	r3, [r1, #16]
 800515e:	e011      	b.n	8005184 <RCCEx_PLLSAI1_Config+0x190>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1R | RCC_PLLSAI1CFGR_PLLSAI1M,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
 8005160:	4b1d      	ldr	r3, [pc, #116]	; (80051d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005162:	691b      	ldr	r3, [r3, #16]
 8005164:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005168:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800516c:	687a      	ldr	r2, [r7, #4]
 800516e:	6892      	ldr	r2, [r2, #8]
 8005170:	0211      	lsls	r1, r2, #8
 8005172:	687a      	ldr	r2, [r7, #4]
 8005174:	6952      	ldr	r2, [r2, #20]
 8005176:	0852      	lsrs	r2, r2, #1
 8005178:	3a01      	subs	r2, #1
 800517a:	0652      	lsls	r2, r2, #25
 800517c:	430a      	orrs	r2, r1
 800517e:	4916      	ldr	r1, [pc, #88]	; (80051d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005180:	4313      	orrs	r3, r2
 8005182:	610b      	str	r3, [r1, #16]
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1R,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

 8005184:	4b14      	ldr	r3, [pc, #80]	; (80051d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	4a13      	ldr	r2, [pc, #76]	; (80051d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800518a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800518e:	6013      	str	r3, [r2, #0]
      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();

 8005190:	f7fc ffe6 	bl	8002160 <HAL_GetTick>
 8005194:	60b8      	str	r0, [r7, #8]
      /* Get Start Tick*/
      tickstart = HAL_GetTick();

 8005196:	e009      	b.n	80051ac <RCCEx_PLLSAI1_Config+0x1b8>
      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005198:	f7fc ffe2 	bl	8002160 <HAL_GetTick>
 800519c:	4602      	mov	r2, r0
 800519e:	68bb      	ldr	r3, [r7, #8]
 80051a0:	1ad3      	subs	r3, r2, r3
 80051a2:	2b02      	cmp	r3, #2
 80051a4:	d902      	bls.n	80051ac <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80051a6:	2303      	movs	r3, #3
 80051a8:	73fb      	strb	r3, [r7, #15]
        {
 80051aa:	e005      	b.n	80051b8 <RCCEx_PLLSAI1_Config+0x1c4>

 80051ac:	4b0a      	ldr	r3, [pc, #40]	; (80051d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d0ef      	beq.n	8005198 <RCCEx_PLLSAI1_Config+0x1a4>
          status = HAL_TIMEOUT;
          break;
        }
      }
 80051b8:	7bfb      	ldrb	r3, [r7, #15]
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d106      	bne.n	80051cc <RCCEx_PLLSAI1_Config+0x1d8>

      if(status == HAL_OK)
      {
 80051be:	4b06      	ldr	r3, [pc, #24]	; (80051d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80051c0:	691a      	ldr	r2, [r3, #16]
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	699b      	ldr	r3, [r3, #24]
 80051c6:	4904      	ldr	r1, [pc, #16]	; (80051d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80051c8:	4313      	orrs	r3, r2
 80051ca:	610b      	str	r3, [r1, #16]
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
      }
    }
  }
 80051cc:	7bfb      	ldrb	r3, [r7, #15]

 80051ce:	4618      	mov	r0, r3
 80051d0:	3710      	adds	r7, #16
 80051d2:	46bd      	mov	sp, r7
 80051d4:	bd80      	pop	{r7, pc}
 80051d6:	bf00      	nop
 80051d8:	40021000 	.word	0x40021000

080051dc <RCCEx_PLLSAI2_Config>:
  * @param  Divider  divider parameter to be updated
  *
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
 80051dc:	b580      	push	{r7, lr}
 80051de:	b084      	sub	sp, #16
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
 80051e4:	6039      	str	r1, [r7, #0]
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80051e6:	2300      	movs	r3, #0
 80051e8:	73fb      	strb	r3, [r7, #15]
  /* P, Q and R dividers are verified in each specific divider case below */
  assert_param(IS_RCC_PLLSAI2SOURCE(PllSai2->PLLSAI2Source));
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

 80051ea:	4b6a      	ldr	r3, [pc, #424]	; (8005394 <RCCEx_PLLSAI2_Config+0x1b8>)
 80051ec:	68db      	ldr	r3, [r3, #12]
 80051ee:	f003 0303 	and.w	r3, r3, #3
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d018      	beq.n	8005228 <RCCEx_PLLSAI2_Config+0x4c>
  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
  {
 80051f6:	4b67      	ldr	r3, [pc, #412]	; (8005394 <RCCEx_PLLSAI2_Config+0x1b8>)
 80051f8:	68db      	ldr	r3, [r3, #12]
 80051fa:	f003 0203 	and.w	r2, r3, #3
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	429a      	cmp	r2, r3
 8005204:	d10d      	bne.n	8005222 <RCCEx_PLLSAI2_Config+0x46>
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
    /* PLL clock source and divider M already set, check that no request for change  */
 800520a:	2b00      	cmp	r3, #0
 800520c:	d009      	beq.n	8005222 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
 800520e:	4b61      	ldr	r3, [pc, #388]	; (8005394 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005210:	68db      	ldr	r3, [r3, #12]
 8005212:	091b      	lsrs	r3, r3, #4
 8005214:	f003 0307 	and.w	r3, r3, #7
 8005218:	1c5a      	adds	r2, r3, #1
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	685b      	ldr	r3, [r3, #4]
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800521e:	429a      	cmp	r2, r3
 8005220:	d047      	beq.n	80052b2 <RCCEx_PLLSAI2_Config+0xd6>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
 8005222:	2301      	movs	r3, #1
 8005224:	73fb      	strb	r3, [r7, #15]
 8005226:	e044      	b.n	80052b2 <RCCEx_PLLSAI2_Config+0xd6>
    {
      status = HAL_ERROR;
    }
  }
  else
  {
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	2b03      	cmp	r3, #3
 800522e:	d018      	beq.n	8005262 <RCCEx_PLLSAI2_Config+0x86>
 8005230:	2b03      	cmp	r3, #3
 8005232:	d825      	bhi.n	8005280 <RCCEx_PLLSAI2_Config+0xa4>
 8005234:	2b01      	cmp	r3, #1
 8005236:	d002      	beq.n	800523e <RCCEx_PLLSAI2_Config+0x62>
 8005238:	2b02      	cmp	r3, #2
 800523a:	d009      	beq.n	8005250 <RCCEx_PLLSAI2_Config+0x74>
 800523c:	e020      	b.n	8005280 <RCCEx_PLLSAI2_Config+0xa4>
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
    {
 800523e:	4b55      	ldr	r3, [pc, #340]	; (8005394 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f003 0302 	and.w	r3, r3, #2
 8005246:	2b00      	cmp	r3, #0
 8005248:	d11d      	bne.n	8005286 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800524a:	2301      	movs	r3, #1
 800524c:	73fb      	strb	r3, [r7, #15]
      {
        status = HAL_ERROR;
 800524e:	e01a      	b.n	8005286 <RCCEx_PLLSAI2_Config+0xaa>
      }
      break;
 8005250:	4b50      	ldr	r3, [pc, #320]	; (8005394 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005258:	2b00      	cmp	r3, #0
 800525a:	d116      	bne.n	800528a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800525c:	2301      	movs	r3, #1
 800525e:	73fb      	strb	r3, [r7, #15]
      {
        status = HAL_ERROR;
 8005260:	e013      	b.n	800528a <RCCEx_PLLSAI2_Config+0xae>
      }
      break;
 8005262:	4b4c      	ldr	r3, [pc, #304]	; (8005394 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800526a:	2b00      	cmp	r3, #0
 800526c:	d10f      	bne.n	800528e <RCCEx_PLLSAI2_Config+0xb2>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800526e:	4b49      	ldr	r3, [pc, #292]	; (8005394 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005276:	2b00      	cmp	r3, #0
 8005278:	d109      	bne.n	800528e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800527a:	2301      	movs	r3, #1
 800527c:	73fb      	strb	r3, [r7, #15]
        {
          status = HAL_ERROR;
        }
 800527e:	e006      	b.n	800528e <RCCEx_PLLSAI2_Config+0xb2>
      }
      break;
 8005280:	2301      	movs	r3, #1
 8005282:	73fb      	strb	r3, [r7, #15]
    default:
 8005284:	e004      	b.n	8005290 <RCCEx_PLLSAI2_Config+0xb4>
        status = HAL_ERROR;
 8005286:	bf00      	nop
 8005288:	e002      	b.n	8005290 <RCCEx_PLLSAI2_Config+0xb4>
        status = HAL_ERROR;
 800528a:	bf00      	nop
 800528c:	e000      	b.n	8005290 <RCCEx_PLLSAI2_Config+0xb4>
        }
 800528e:	bf00      	nop
      status = HAL_ERROR;
      break;
    }
 8005290:	7bfb      	ldrb	r3, [r7, #15]
 8005292:	2b00      	cmp	r3, #0
 8005294:	d10d      	bne.n	80052b2 <RCCEx_PLLSAI2_Config+0xd6>
    if(status == HAL_OK)
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
 8005296:	4b3f      	ldr	r3, [pc, #252]	; (8005394 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005298:	68db      	ldr	r3, [r3, #12]
 800529a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6819      	ldr	r1, [r3, #0]
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	685b      	ldr	r3, [r3, #4]
 80052a6:	3b01      	subs	r3, #1
 80052a8:	011b      	lsls	r3, r3, #4
 80052aa:	430b      	orrs	r3, r1
 80052ac:	4939      	ldr	r1, [pc, #228]	; (8005394 <RCCEx_PLLSAI2_Config+0x1b8>)
 80052ae:	4313      	orrs	r3, r2
 80052b0:	60cb      	str	r3, [r1, #12]
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }
 80052b2:	7bfb      	ldrb	r3, [r7, #15]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d167      	bne.n	8005388 <RCCEx_PLLSAI2_Config+0x1ac>

  if(status == HAL_OK)
  {
 80052b8:	4b36      	ldr	r3, [pc, #216]	; (8005394 <RCCEx_PLLSAI2_Config+0x1b8>)
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	4a35      	ldr	r2, [pc, #212]	; (8005394 <RCCEx_PLLSAI2_Config+0x1b8>)
 80052be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80052c2:	6013      	str	r3, [r2, #0]
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();

 80052c4:	f7fc ff4c 	bl	8002160 <HAL_GetTick>
 80052c8:	60b8      	str	r0, [r7, #8]
    /* Get Start Tick*/
    tickstart = HAL_GetTick();

 80052ca:	e009      	b.n	80052e0 <RCCEx_PLLSAI2_Config+0x104>
    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80052cc:	f7fc ff48 	bl	8002160 <HAL_GetTick>
 80052d0:	4602      	mov	r2, r0
 80052d2:	68bb      	ldr	r3, [r7, #8]
 80052d4:	1ad3      	subs	r3, r2, r3
 80052d6:	2b02      	cmp	r3, #2
 80052d8:	d902      	bls.n	80052e0 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80052da:	2303      	movs	r3, #3
 80052dc:	73fb      	strb	r3, [r7, #15]
      {
 80052de:	e005      	b.n	80052ec <RCCEx_PLLSAI2_Config+0x110>

 80052e0:	4b2c      	ldr	r3, [pc, #176]	; (8005394 <RCCEx_PLLSAI2_Config+0x1b8>)
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d1ef      	bne.n	80052cc <RCCEx_PLLSAI2_Config+0xf0>
        status = HAL_TIMEOUT;
        break;
      }
    }
 80052ec:	7bfb      	ldrb	r3, [r7, #15]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d14a      	bne.n	8005388 <RCCEx_PLLSAI2_Config+0x1ac>

    if(status == HAL_OK)
 80052f2:	683b      	ldr	r3, [r7, #0]
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d111      	bne.n	800531c <RCCEx_PLLSAI2_Config+0x140>
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
 80052f8:	4b26      	ldr	r3, [pc, #152]	; (8005394 <RCCEx_PLLSAI2_Config+0x1b8>)
 80052fa:	695b      	ldr	r3, [r3, #20]
 80052fc:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005300:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005304:	687a      	ldr	r2, [r7, #4]
 8005306:	6892      	ldr	r2, [r2, #8]
 8005308:	0211      	lsls	r1, r2, #8
 800530a:	687a      	ldr	r2, [r7, #4]
 800530c:	68d2      	ldr	r2, [r2, #12]
 800530e:	0912      	lsrs	r2, r2, #4
 8005310:	0452      	lsls	r2, r2, #17
 8005312:	430a      	orrs	r2, r1
 8005314:	491f      	ldr	r1, [pc, #124]	; (8005394 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005316:	4313      	orrs	r3, r2
 8005318:	614b      	str	r3, [r1, #20]
 800531a:	e011      	b.n	8005340 <RCCEx_PLLSAI2_Config+0x164>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2R | RCC_PLLSAI2CFGR_PLLSAI2M,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
 800531c:	4b1d      	ldr	r3, [pc, #116]	; (8005394 <RCCEx_PLLSAI2_Config+0x1b8>)
 800531e:	695b      	ldr	r3, [r3, #20]
 8005320:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005324:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005328:	687a      	ldr	r2, [r7, #4]
 800532a:	6892      	ldr	r2, [r2, #8]
 800532c:	0211      	lsls	r1, r2, #8
 800532e:	687a      	ldr	r2, [r7, #4]
 8005330:	6912      	ldr	r2, [r2, #16]
 8005332:	0852      	lsrs	r2, r2, #1
 8005334:	3a01      	subs	r2, #1
 8005336:	0652      	lsls	r2, r2, #25
 8005338:	430a      	orrs	r2, r1
 800533a:	4916      	ldr	r1, [pc, #88]	; (8005394 <RCCEx_PLLSAI2_Config+0x1b8>)
 800533c:	4313      	orrs	r3, r2
 800533e:	614b      	str	r3, [r1, #20]
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2R,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

 8005340:	4b14      	ldr	r3, [pc, #80]	; (8005394 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	4a13      	ldr	r2, [pc, #76]	; (8005394 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005346:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800534a:	6013      	str	r3, [r2, #0]
      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();

 800534c:	f7fc ff08 	bl	8002160 <HAL_GetTick>
 8005350:	60b8      	str	r0, [r7, #8]
      /* Get Start Tick*/
      tickstart = HAL_GetTick();

 8005352:	e009      	b.n	8005368 <RCCEx_PLLSAI2_Config+0x18c>
      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005354:	f7fc ff04 	bl	8002160 <HAL_GetTick>
 8005358:	4602      	mov	r2, r0
 800535a:	68bb      	ldr	r3, [r7, #8]
 800535c:	1ad3      	subs	r3, r2, r3
 800535e:	2b02      	cmp	r3, #2
 8005360:	d902      	bls.n	8005368 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005362:	2303      	movs	r3, #3
 8005364:	73fb      	strb	r3, [r7, #15]
        {
 8005366:	e005      	b.n	8005374 <RCCEx_PLLSAI2_Config+0x198>

 8005368:	4b0a      	ldr	r3, [pc, #40]	; (8005394 <RCCEx_PLLSAI2_Config+0x1b8>)
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005370:	2b00      	cmp	r3, #0
 8005372:	d0ef      	beq.n	8005354 <RCCEx_PLLSAI2_Config+0x178>
          status = HAL_TIMEOUT;
          break;
        }
      }
 8005374:	7bfb      	ldrb	r3, [r7, #15]
 8005376:	2b00      	cmp	r3, #0
 8005378:	d106      	bne.n	8005388 <RCCEx_PLLSAI2_Config+0x1ac>

      if(status == HAL_OK)
      {
 800537a:	4b06      	ldr	r3, [pc, #24]	; (8005394 <RCCEx_PLLSAI2_Config+0x1b8>)
 800537c:	695a      	ldr	r2, [r3, #20]
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	695b      	ldr	r3, [r3, #20]
 8005382:	4904      	ldr	r1, [pc, #16]	; (8005394 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005384:	4313      	orrs	r3, r2
 8005386:	614b      	str	r3, [r1, #20]
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
      }
    }
  }
 8005388:	7bfb      	ldrb	r3, [r7, #15]

 800538a:	4618      	mov	r0, r3
 800538c:	3710      	adds	r7, #16
 800538e:	46bd      	mov	sp, r7
 8005390:	bd80      	pop	{r7, pc}
 8005392:	bf00      	nop
 8005394:	40021000 	.word	0x40021000

08005398 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005398:	b580      	push	{r7, lr}
 800539a:	b084      	sub	sp, #16
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80053a0:	2301      	movs	r3, #1
 80053a2:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d06c      	beq.n	8005484 <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80053b0:	b2db      	uxtb	r3, r3
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d106      	bne.n	80053c4 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	2200      	movs	r2, #0
 80053ba:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 80053be:	6878      	ldr	r0, [r7, #4]
 80053c0:	f7fc fb1c 	bl	80019fc <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2202      	movs	r2, #2
 80053c8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	22ca      	movs	r2, #202	; 0xca
 80053d2:	625a      	str	r2, [r3, #36]	; 0x24
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	2253      	movs	r2, #83	; 0x53
 80053da:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80053dc:	6878      	ldr	r0, [r7, #4]
 80053de:	f000 fa49 	bl	8005874 <RTC_EnterInitMode>
 80053e2:	4603      	mov	r3, r0
 80053e4:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 80053e6:	7bfb      	ldrb	r3, [r7, #15]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d14b      	bne.n	8005484 <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	689b      	ldr	r3, [r3, #8]
 80053f2:	687a      	ldr	r2, [r7, #4]
 80053f4:	6812      	ldr	r2, [r2, #0]
 80053f6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80053fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80053fe:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	6899      	ldr	r1, [r3, #8]
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	685a      	ldr	r2, [r3, #4]
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	691b      	ldr	r3, [r3, #16]
 800540e:	431a      	orrs	r2, r3
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	699b      	ldr	r3, [r3, #24]
 8005414:	431a      	orrs	r2, r3
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	430a      	orrs	r2, r1
 800541c:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	687a      	ldr	r2, [r7, #4]
 8005424:	68d2      	ldr	r2, [r2, #12]
 8005426:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	6919      	ldr	r1, [r3, #16]
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	689b      	ldr	r3, [r3, #8]
 8005432:	041a      	lsls	r2, r3, #16
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	430a      	orrs	r2, r1
 800543a:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800543c:	6878      	ldr	r0, [r7, #4]
 800543e:	f000 fa4d 	bl	80058dc <RTC_ExitInitMode>
 8005442:	4603      	mov	r3, r0
 8005444:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8005446:	7bfb      	ldrb	r3, [r7, #15]
 8005448:	2b00      	cmp	r3, #0
 800544a:	d11b      	bne.n	8005484 <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f022 0203 	bic.w	r2, r2, #3
 800545a:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	69da      	ldr	r2, [r3, #28]
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	695b      	ldr	r3, [r3, #20]
 800546a:	431a      	orrs	r2, r3
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	430a      	orrs	r2, r1
 8005472:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	22ff      	movs	r2, #255	; 0xff
 800547a:	625a      	str	r2, [r3, #36]	; 0x24

          hrtc->State = HAL_RTC_STATE_READY;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2201      	movs	r2, #1
 8005480:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 8005484:	7bfb      	ldrb	r3, [r7, #15]
}
 8005486:	4618      	mov	r0, r3
 8005488:	3710      	adds	r7, #16
 800548a:	46bd      	mov	sp, r7
 800548c:	bd80      	pop	{r7, pc}

0800548e <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800548e:	b590      	push	{r4, r7, lr}
 8005490:	b087      	sub	sp, #28
 8005492:	af00      	add	r7, sp, #0
 8005494:	60f8      	str	r0, [r7, #12]
 8005496:	60b9      	str	r1, [r7, #8]
 8005498:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	f893 3020 	ldrb.w	r3, [r3, #32]
 80054a0:	2b01      	cmp	r3, #1
 80054a2:	d101      	bne.n	80054a8 <HAL_RTC_SetTime+0x1a>
 80054a4:	2302      	movs	r3, #2
 80054a6:	e08b      	b.n	80055c0 <HAL_RTC_SetTime+0x132>
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	2201      	movs	r2, #1
 80054ac:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	2202      	movs	r2, #2
 80054b4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	22ca      	movs	r2, #202	; 0xca
 80054be:	625a      	str	r2, [r3, #36]	; 0x24
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	2253      	movs	r2, #83	; 0x53
 80054c6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80054c8:	68f8      	ldr	r0, [r7, #12]
 80054ca:	f000 f9d3 	bl	8005874 <RTC_EnterInitMode>
 80054ce:	4603      	mov	r3, r0
 80054d0:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 80054d2:	7cfb      	ldrb	r3, [r7, #19]
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d163      	bne.n	80055a0 <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d126      	bne.n	800552c <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	689b      	ldr	r3, [r3, #8]
 80054e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d102      	bne.n	80054f2 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80054ec:	68bb      	ldr	r3, [r7, #8]
 80054ee:	2200      	movs	r2, #0
 80054f0:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80054f2:	68bb      	ldr	r3, [r7, #8]
 80054f4:	781b      	ldrb	r3, [r3, #0]
 80054f6:	4618      	mov	r0, r3
 80054f8:	f000 fa2e 	bl	8005958 <RTC_ByteToBcd2>
 80054fc:	4603      	mov	r3, r0
 80054fe:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005500:	68bb      	ldr	r3, [r7, #8]
 8005502:	785b      	ldrb	r3, [r3, #1]
 8005504:	4618      	mov	r0, r3
 8005506:	f000 fa27 	bl	8005958 <RTC_ByteToBcd2>
 800550a:	4603      	mov	r3, r0
 800550c:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800550e:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8005510:	68bb      	ldr	r3, [r7, #8]
 8005512:	789b      	ldrb	r3, [r3, #2]
 8005514:	4618      	mov	r0, r3
 8005516:	f000 fa1f 	bl	8005958 <RTC_ByteToBcd2>
 800551a:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800551c:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8005520:	68bb      	ldr	r3, [r7, #8]
 8005522:	78db      	ldrb	r3, [r3, #3]
 8005524:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005526:	4313      	orrs	r3, r2
 8005528:	617b      	str	r3, [r7, #20]
 800552a:	e018      	b.n	800555e <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	689b      	ldr	r3, [r3, #8]
 8005532:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005536:	2b00      	cmp	r3, #0
 8005538:	d102      	bne.n	8005540 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800553a:	68bb      	ldr	r3, [r7, #8]
 800553c:	2200      	movs	r2, #0
 800553e:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005540:	68bb      	ldr	r3, [r7, #8]
 8005542:	781b      	ldrb	r3, [r3, #0]
 8005544:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005546:	68bb      	ldr	r3, [r7, #8]
 8005548:	785b      	ldrb	r3, [r3, #1]
 800554a:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800554c:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800554e:	68ba      	ldr	r2, [r7, #8]
 8005550:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005552:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8005554:	68bb      	ldr	r3, [r7, #8]
 8005556:	78db      	ldrb	r3, [r3, #3]
 8005558:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800555a:	4313      	orrs	r3, r2
 800555c:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	681a      	ldr	r2, [r3, #0]
 8005562:	697b      	ldr	r3, [r7, #20]
 8005564:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8005568:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800556c:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	689a      	ldr	r2, [r3, #8]
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800557c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	6899      	ldr	r1, [r3, #8]
 8005584:	68bb      	ldr	r3, [r7, #8]
 8005586:	68da      	ldr	r2, [r3, #12]
 8005588:	68bb      	ldr	r3, [r7, #8]
 800558a:	691b      	ldr	r3, [r3, #16]
 800558c:	431a      	orrs	r2, r3
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	430a      	orrs	r2, r1
 8005594:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005596:	68f8      	ldr	r0, [r7, #12]
 8005598:	f000 f9a0 	bl	80058dc <RTC_ExitInitMode>
 800559c:	4603      	mov	r3, r0
 800559e:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	22ff      	movs	r2, #255	; 0xff
 80055a6:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 80055a8:	7cfb      	ldrb	r3, [r7, #19]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d103      	bne.n	80055b6 <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	2201      	movs	r2, #1
 80055b2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	2200      	movs	r2, #0
 80055ba:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 80055be:	7cfb      	ldrb	r3, [r7, #19]
}
 80055c0:	4618      	mov	r0, r3
 80055c2:	371c      	adds	r7, #28
 80055c4:	46bd      	mov	sp, r7
 80055c6:	bd90      	pop	{r4, r7, pc}

080055c8 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80055c8:	b580      	push	{r7, lr}
 80055ca:	b086      	sub	sp, #24
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	60f8      	str	r0, [r7, #12]
 80055d0:	60b9      	str	r1, [r7, #8]
 80055d2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80055da:	68bb      	ldr	r3, [r7, #8]
 80055dc:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	691b      	ldr	r3, [r3, #16]
 80055e4:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80055e8:	68bb      	ldr	r3, [r7, #8]
 80055ea:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80055f6:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80055fa:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 80055fc:	697b      	ldr	r3, [r7, #20]
 80055fe:	0c1b      	lsrs	r3, r3, #16
 8005600:	b2db      	uxtb	r3, r3
 8005602:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005606:	b2da      	uxtb	r2, r3
 8005608:	68bb      	ldr	r3, [r7, #8]
 800560a:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800560c:	697b      	ldr	r3, [r7, #20]
 800560e:	0a1b      	lsrs	r3, r3, #8
 8005610:	b2db      	uxtb	r3, r3
 8005612:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005616:	b2da      	uxtb	r2, r3
 8005618:	68bb      	ldr	r3, [r7, #8]
 800561a:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 800561c:	697b      	ldr	r3, [r7, #20]
 800561e:	b2db      	uxtb	r3, r3
 8005620:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005624:	b2da      	uxtb	r2, r3
 8005626:	68bb      	ldr	r3, [r7, #8]
 8005628:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 800562a:	697b      	ldr	r3, [r7, #20]
 800562c:	0d9b      	lsrs	r3, r3, #22
 800562e:	b2db      	uxtb	r3, r3
 8005630:	f003 0301 	and.w	r3, r3, #1
 8005634:	b2da      	uxtb	r2, r3
 8005636:	68bb      	ldr	r3, [r7, #8]
 8005638:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	2b00      	cmp	r3, #0
 800563e:	d11a      	bne.n	8005676 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8005640:	68bb      	ldr	r3, [r7, #8]
 8005642:	781b      	ldrb	r3, [r3, #0]
 8005644:	4618      	mov	r0, r3
 8005646:	f000 f9a7 	bl	8005998 <RTC_Bcd2ToByte>
 800564a:	4603      	mov	r3, r0
 800564c:	461a      	mov	r2, r3
 800564e:	68bb      	ldr	r3, [r7, #8]
 8005650:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8005652:	68bb      	ldr	r3, [r7, #8]
 8005654:	785b      	ldrb	r3, [r3, #1]
 8005656:	4618      	mov	r0, r3
 8005658:	f000 f99e 	bl	8005998 <RTC_Bcd2ToByte>
 800565c:	4603      	mov	r3, r0
 800565e:	461a      	mov	r2, r3
 8005660:	68bb      	ldr	r3, [r7, #8]
 8005662:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8005664:	68bb      	ldr	r3, [r7, #8]
 8005666:	789b      	ldrb	r3, [r3, #2]
 8005668:	4618      	mov	r0, r3
 800566a:	f000 f995 	bl	8005998 <RTC_Bcd2ToByte>
 800566e:	4603      	mov	r3, r0
 8005670:	461a      	mov	r2, r3
 8005672:	68bb      	ldr	r3, [r7, #8]
 8005674:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8005676:	2300      	movs	r3, #0
}
 8005678:	4618      	mov	r0, r3
 800567a:	3718      	adds	r7, #24
 800567c:	46bd      	mov	sp, r7
 800567e:	bd80      	pop	{r7, pc}

08005680 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005680:	b590      	push	{r4, r7, lr}
 8005682:	b087      	sub	sp, #28
 8005684:	af00      	add	r7, sp, #0
 8005686:	60f8      	str	r0, [r7, #12]
 8005688:	60b9      	str	r1, [r7, #8]
 800568a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005692:	2b01      	cmp	r3, #1
 8005694:	d101      	bne.n	800569a <HAL_RTC_SetDate+0x1a>
 8005696:	2302      	movs	r3, #2
 8005698:	e075      	b.n	8005786 <HAL_RTC_SetDate+0x106>
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	2201      	movs	r2, #1
 800569e:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	2202      	movs	r2, #2
 80056a6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d10e      	bne.n	80056ce <HAL_RTC_SetDate+0x4e>
 80056b0:	68bb      	ldr	r3, [r7, #8]
 80056b2:	785b      	ldrb	r3, [r3, #1]
 80056b4:	f003 0310 	and.w	r3, r3, #16
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d008      	beq.n	80056ce <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80056bc:	68bb      	ldr	r3, [r7, #8]
 80056be:	785b      	ldrb	r3, [r3, #1]
 80056c0:	f023 0310 	bic.w	r3, r3, #16
 80056c4:	b2db      	uxtb	r3, r3
 80056c6:	330a      	adds	r3, #10
 80056c8:	b2da      	uxtb	r2, r3
 80056ca:	68bb      	ldr	r3, [r7, #8]
 80056cc:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d11c      	bne.n	800570e <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80056d4:	68bb      	ldr	r3, [r7, #8]
 80056d6:	78db      	ldrb	r3, [r3, #3]
 80056d8:	4618      	mov	r0, r3
 80056da:	f000 f93d 	bl	8005958 <RTC_ByteToBcd2>
 80056de:	4603      	mov	r3, r0
 80056e0:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80056e2:	68bb      	ldr	r3, [r7, #8]
 80056e4:	785b      	ldrb	r3, [r3, #1]
 80056e6:	4618      	mov	r0, r3
 80056e8:	f000 f936 	bl	8005958 <RTC_ByteToBcd2>
 80056ec:	4603      	mov	r3, r0
 80056ee:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80056f0:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 80056f2:	68bb      	ldr	r3, [r7, #8]
 80056f4:	789b      	ldrb	r3, [r3, #2]
 80056f6:	4618      	mov	r0, r3
 80056f8:	f000 f92e 	bl	8005958 <RTC_ByteToBcd2>
 80056fc:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80056fe:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8005702:	68bb      	ldr	r3, [r7, #8]
 8005704:	781b      	ldrb	r3, [r3, #0]
 8005706:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8005708:	4313      	orrs	r3, r2
 800570a:	617b      	str	r3, [r7, #20]
 800570c:	e00e      	b.n	800572c <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800570e:	68bb      	ldr	r3, [r7, #8]
 8005710:	78db      	ldrb	r3, [r3, #3]
 8005712:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8005714:	68bb      	ldr	r3, [r7, #8]
 8005716:	785b      	ldrb	r3, [r3, #1]
 8005718:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800571a:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 800571c:	68ba      	ldr	r2, [r7, #8]
 800571e:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8005720:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8005722:	68bb      	ldr	r3, [r7, #8]
 8005724:	781b      	ldrb	r3, [r3, #0]
 8005726:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8005728:	4313      	orrs	r3, r2
 800572a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	22ca      	movs	r2, #202	; 0xca
 8005732:	625a      	str	r2, [r3, #36]	; 0x24
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	2253      	movs	r2, #83	; 0x53
 800573a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800573c:	68f8      	ldr	r0, [r7, #12]
 800573e:	f000 f899 	bl	8005874 <RTC_EnterInitMode>
 8005742:	4603      	mov	r3, r0
 8005744:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8005746:	7cfb      	ldrb	r3, [r7, #19]
 8005748:	2b00      	cmp	r3, #0
 800574a:	d10c      	bne.n	8005766 <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	681a      	ldr	r2, [r3, #0]
 8005750:	697b      	ldr	r3, [r7, #20]
 8005752:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005756:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800575a:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800575c:	68f8      	ldr	r0, [r7, #12]
 800575e:	f000 f8bd 	bl	80058dc <RTC_ExitInitMode>
 8005762:	4603      	mov	r3, r0
 8005764:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	22ff      	movs	r2, #255	; 0xff
 800576c:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800576e:	7cfb      	ldrb	r3, [r7, #19]
 8005770:	2b00      	cmp	r3, #0
 8005772:	d103      	bne.n	800577c <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	2201      	movs	r2, #1
 8005778:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	2200      	movs	r2, #0
 8005780:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8005784:	7cfb      	ldrb	r3, [r7, #19]
}
 8005786:	4618      	mov	r0, r3
 8005788:	371c      	adds	r7, #28
 800578a:	46bd      	mov	sp, r7
 800578c:	bd90      	pop	{r4, r7, pc}

0800578e <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800578e:	b580      	push	{r7, lr}
 8005790:	b086      	sub	sp, #24
 8005792:	af00      	add	r7, sp, #0
 8005794:	60f8      	str	r0, [r7, #12]
 8005796:	60b9      	str	r1, [r7, #8]
 8005798:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	685b      	ldr	r3, [r3, #4]
 80057a0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80057a4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80057a8:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80057aa:	697b      	ldr	r3, [r7, #20]
 80057ac:	0c1b      	lsrs	r3, r3, #16
 80057ae:	b2da      	uxtb	r2, r3
 80057b0:	68bb      	ldr	r3, [r7, #8]
 80057b2:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80057b4:	697b      	ldr	r3, [r7, #20]
 80057b6:	0a1b      	lsrs	r3, r3, #8
 80057b8:	b2db      	uxtb	r3, r3
 80057ba:	f003 031f 	and.w	r3, r3, #31
 80057be:	b2da      	uxtb	r2, r3
 80057c0:	68bb      	ldr	r3, [r7, #8]
 80057c2:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 80057c4:	697b      	ldr	r3, [r7, #20]
 80057c6:	b2db      	uxtb	r3, r3
 80057c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80057cc:	b2da      	uxtb	r2, r3
 80057ce:	68bb      	ldr	r3, [r7, #8]
 80057d0:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 80057d2:	697b      	ldr	r3, [r7, #20]
 80057d4:	0b5b      	lsrs	r3, r3, #13
 80057d6:	b2db      	uxtb	r3, r3
 80057d8:	f003 0307 	and.w	r3, r3, #7
 80057dc:	b2da      	uxtb	r2, r3
 80057de:	68bb      	ldr	r3, [r7, #8]
 80057e0:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d11a      	bne.n	800581e <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80057e8:	68bb      	ldr	r3, [r7, #8]
 80057ea:	78db      	ldrb	r3, [r3, #3]
 80057ec:	4618      	mov	r0, r3
 80057ee:	f000 f8d3 	bl	8005998 <RTC_Bcd2ToByte>
 80057f2:	4603      	mov	r3, r0
 80057f4:	461a      	mov	r2, r3
 80057f6:	68bb      	ldr	r3, [r7, #8]
 80057f8:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80057fa:	68bb      	ldr	r3, [r7, #8]
 80057fc:	785b      	ldrb	r3, [r3, #1]
 80057fe:	4618      	mov	r0, r3
 8005800:	f000 f8ca 	bl	8005998 <RTC_Bcd2ToByte>
 8005804:	4603      	mov	r3, r0
 8005806:	461a      	mov	r2, r3
 8005808:	68bb      	ldr	r3, [r7, #8]
 800580a:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800580c:	68bb      	ldr	r3, [r7, #8]
 800580e:	789b      	ldrb	r3, [r3, #2]
 8005810:	4618      	mov	r0, r3
 8005812:	f000 f8c1 	bl	8005998 <RTC_Bcd2ToByte>
 8005816:	4603      	mov	r3, r0
 8005818:	461a      	mov	r2, r3
 800581a:	68bb      	ldr	r3, [r7, #8]
 800581c:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800581e:	2300      	movs	r3, #0
}
 8005820:	4618      	mov	r0, r3
 8005822:	3718      	adds	r7, #24
 8005824:	46bd      	mov	sp, r7
 8005826:	bd80      	pop	{r7, pc}

08005828 <HAL_RTC_WaitForSynchro>:
  * @note   To read the calendar through the shadow registers after Calendar
  *         initialization, calendar update or after wakeup from low power modes
  *         the software must first clear the RSF flag.
  *         The software must then wait until it is set again before reading
  *         the calendar, which means that the calendar registers have been
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
 8005828:	b580      	push	{r7, lr}
 800582a:	b084      	sub	sp, #16
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
  uint32_t tickstart;

 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	68da      	ldr	r2, [r3, #12]
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800583e:	60da      	str	r2, [r3, #12]
  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
 8005840:	f7fc fc8e 	bl	8002160 <HAL_GetTick>
 8005844:	60f8      	str	r0, [r7, #12]
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
#endif

  tickstart = HAL_GetTick();

 8005846:	e009      	b.n	800585c <HAL_RTC_WaitForSynchro+0x34>
  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8005848:	f7fc fc8a 	bl	8002160 <HAL_GetTick>
 800584c:	4602      	mov	r2, r0
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	1ad3      	subs	r3, r2, r3
 8005852:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005856:	d901      	bls.n	800585c <HAL_RTC_WaitForSynchro+0x34>
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005858:	2303      	movs	r3, #3
 800585a:	e007      	b.n	800586c <HAL_RTC_WaitForSynchro+0x44>

 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	68db      	ldr	r3, [r3, #12]
 8005862:	f003 0320 	and.w	r3, r3, #32
 8005866:	2b00      	cmp	r3, #0
 8005868:	d0ee      	beq.n	8005848 <HAL_RTC_WaitForSynchro+0x20>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
    {
 800586a:	2300      	movs	r3, #0
      return HAL_TIMEOUT;
 800586c:	4618      	mov	r0, r3
 800586e:	3710      	adds	r7, #16
 8005870:	46bd      	mov	sp, r7
 8005872:	bd80      	pop	{r7, pc}

08005874 <RTC_EnterInitMode>:
  * @{
  */
/**
  * @brief  Enter the RTC Initialization mode.
  * @note   The RTC Initialization mode is write protected, use the
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
 8005874:	b580      	push	{r7, lr}
 8005876:	b084      	sub	sp, #16
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]
  * @param  hrtc RTC handle
  * @retval HAL status
 800587c:	2300      	movs	r3, #0
 800587e:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
      {
        status = HAL_TIMEOUT;
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	68db      	ldr	r3, [r3, #12]
 8005886:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800588a:	2b00      	cmp	r3, #0
 800588c:	d120      	bne.n	80058d0 <RTC_EnterInitMode+0x5c>
      }
    }
  }
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f04f 32ff 	mov.w	r2, #4294967295
 8005896:	60da      	str	r2, [r3, #12]
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8005898:	f7fc fc62 	bl	8002160 <HAL_GetTick>
 800589c:	60b8      	str	r0, [r7, #8]
  {
    /* Set the Initialization mode */
 800589e:	e00d      	b.n	80058bc <RTC_EnterInitMode+0x48>
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;

 80058a0:	f7fc fc5e 	bl	8002160 <HAL_GetTick>
 80058a4:	4602      	mov	r2, r0
 80058a6:	68bb      	ldr	r3, [r7, #8]
 80058a8:	1ad3      	subs	r3, r2, r3
 80058aa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80058ae:	d905      	bls.n	80058bc <RTC_EnterInitMode+0x48>
    tickstart = HAL_GetTick();
    /* Wait till RTC is in INIT state and if Time out is reached exit */
 80058b0:	2303      	movs	r3, #3
 80058b2:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2203      	movs	r2, #3
 80058b8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    /* Set the Initialization mode */
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	68db      	ldr	r3, [r3, #12]
 80058c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d102      	bne.n	80058d0 <RTC_EnterInitMode+0x5c>
 80058ca:	7bfb      	ldrb	r3, [r7, #15]
 80058cc:	2b03      	cmp	r3, #3
 80058ce:	d1e7      	bne.n	80058a0 <RTC_EnterInitMode+0x2c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
      {
        status = HAL_TIMEOUT;
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
 80058d0:	7bfb      	ldrb	r3, [r7, #15]
    }
 80058d2:	4618      	mov	r0, r3
 80058d4:	3710      	adds	r7, #16
 80058d6:	46bd      	mov	sp, r7
 80058d8:	bd80      	pop	{r7, pc}
	...

080058dc <RTC_ExitInitMode>:

  return status;
}

/**
  * @brief  Exit the RTC Initialization mode.
 80058dc:	b580      	push	{r7, lr}
 80058de:	b084      	sub	sp, #16
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	6078      	str	r0, [r7, #4]
  * @param  hrtc RTC handle
 80058e4:	2300      	movs	r3, #0
 80058e6:	73fb      	strb	r3, [r7, #15]
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
  HAL_StatusTypeDef status = HAL_OK;

  /* Exit Initialization mode */
 80058e8:	4b1a      	ldr	r3, [pc, #104]	; (8005954 <RTC_ExitInitMode+0x78>)
 80058ea:	68db      	ldr	r3, [r3, #12]
 80058ec:	4a19      	ldr	r2, [pc, #100]	; (8005954 <RTC_ExitInitMode+0x78>)
 80058ee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80058f2:	60d3      	str	r3, [r2, #12]
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
 80058f4:	4b17      	ldr	r3, [pc, #92]	; (8005954 <RTC_ExitInitMode+0x78>)
 80058f6:	689b      	ldr	r3, [r3, #8]
 80058f8:	f003 0320 	and.w	r3, r3, #32
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d10c      	bne.n	800591a <RTC_ExitInitMode+0x3e>
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
#endif
 8005900:	6878      	ldr	r0, [r7, #4]
 8005902:	f7ff ff91 	bl	8005828 <HAL_RTC_WaitForSynchro>
 8005906:	4603      	mov	r3, r0
 8005908:	2b00      	cmp	r3, #0
 800590a:	d01e      	beq.n	800594a <RTC_ExitInitMode+0x6e>

  /* If CR_BYPSHAD bit = 0, wait for synchro */
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2203      	movs	r2, #3
 8005910:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8005914:	2303      	movs	r3, #3
 8005916:	73fb      	strb	r3, [r7, #15]
 8005918:	e017      	b.n	800594a <RTC_ExitInitMode+0x6e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
      status = HAL_TIMEOUT;
    }
 800591a:	4b0e      	ldr	r3, [pc, #56]	; (8005954 <RTC_ExitInitMode+0x78>)
 800591c:	689b      	ldr	r3, [r3, #8]
 800591e:	4a0d      	ldr	r2, [pc, #52]	; (8005954 <RTC_ExitInitMode+0x78>)
 8005920:	f023 0320 	bic.w	r3, r3, #32
 8005924:	6093      	str	r3, [r2, #8]
  }
 8005926:	6878      	ldr	r0, [r7, #4]
 8005928:	f7ff ff7e 	bl	8005828 <HAL_RTC_WaitForSynchro>
 800592c:	4603      	mov	r3, r0
 800592e:	2b00      	cmp	r3, #0
 8005930:	d005      	beq.n	800593e <RTC_ExitInitMode+0x62>
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	2203      	movs	r2, #3
 8005936:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    /* Clear BYPSHAD bit */
 800593a:	2303      	movs	r3, #3
 800593c:	73fb      	strb	r3, [r7, #15]
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
    {
 800593e:	4b05      	ldr	r3, [pc, #20]	; (8005954 <RTC_ExitInitMode+0x78>)
 8005940:	689b      	ldr	r3, [r3, #8]
 8005942:	4a04      	ldr	r2, [pc, #16]	; (8005954 <RTC_ExitInitMode+0x78>)
 8005944:	f043 0320 	orr.w	r3, r3, #32
 8005948:	6093      	str	r3, [r2, #8]
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
      status = HAL_TIMEOUT;
    }
 800594a:	7bfb      	ldrb	r3, [r7, #15]
    /* Restore BYPSHAD bit */
 800594c:	4618      	mov	r0, r3
 800594e:	3710      	adds	r7, #16
 8005950:	46bd      	mov	sp, r7
 8005952:	bd80      	pop	{r7, pc}
 8005954:	40002800 	.word	0x40002800

08005958 <RTC_ByteToBcd2>:
}



/**
  * @brief  Convert a 2 digit decimal to BCD format.
 8005958:	b480      	push	{r7}
 800595a:	b085      	sub	sp, #20
 800595c:	af00      	add	r7, sp, #0
 800595e:	4603      	mov	r3, r0
 8005960:	71fb      	strb	r3, [r7, #7]
  * @param  Value Byte to be converted
 8005962:	2300      	movs	r3, #0
 8005964:	60fb      	str	r3, [r7, #12]
  * @retval Converted byte
 8005966:	79fb      	ldrb	r3, [r7, #7]
 8005968:	72fb      	strb	r3, [r7, #11]
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
 800596a:	e005      	b.n	8005978 <RTC_ByteToBcd2+0x20>
{
  uint32_t bcdhigh = 0U;
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	3301      	adds	r3, #1
 8005970:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 8005972:	7afb      	ldrb	r3, [r7, #11]
 8005974:	3b0a      	subs	r3, #10
 8005976:	72fb      	strb	r3, [r7, #11]
uint8_t RTC_ByteToBcd2(uint8_t Value)
 8005978:	7afb      	ldrb	r3, [r7, #11]
 800597a:	2b09      	cmp	r3, #9
 800597c:	d8f6      	bhi.n	800596c <RTC_ByteToBcd2+0x14>

  while (temp >= 10U)
  {
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	b2db      	uxtb	r3, r3
 8005982:	011b      	lsls	r3, r3, #4
 8005984:	b2da      	uxtb	r2, r3
 8005986:	7afb      	ldrb	r3, [r7, #11]
 8005988:	4313      	orrs	r3, r2
 800598a:	b2db      	uxtb	r3, r3
    bcdhigh++;
 800598c:	4618      	mov	r0, r3
 800598e:	3714      	adds	r7, #20
 8005990:	46bd      	mov	sp, r7
 8005992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005996:	4770      	bx	lr

08005998 <RTC_Bcd2ToByte>:

  return ((uint8_t)(bcdhigh << 4U) | temp);
}

/**
  * @brief  Convert from 2 digit BCD to Binary.
 8005998:	b480      	push	{r7}
 800599a:	b085      	sub	sp, #20
 800599c:	af00      	add	r7, sp, #0
 800599e:	4603      	mov	r3, r0
 80059a0:	71fb      	strb	r3, [r7, #7]
  * @param  Value BCD value to be converted
  * @retval Converted word
 80059a2:	79fb      	ldrb	r3, [r7, #7]
 80059a4:	091b      	lsrs	r3, r3, #4
 80059a6:	b2db      	uxtb	r3, r3
 80059a8:	461a      	mov	r2, r3
 80059aa:	0092      	lsls	r2, r2, #2
 80059ac:	4413      	add	r3, r2
 80059ae:	005b      	lsls	r3, r3, #1
 80059b0:	73fb      	strb	r3, [r7, #15]
  */
 80059b2:	79fb      	ldrb	r3, [r7, #7]
 80059b4:	f003 030f 	and.w	r3, r3, #15
 80059b8:	b2da      	uxtb	r2, r3
 80059ba:	7bfb      	ldrb	r3, [r7, #15]
 80059bc:	4413      	add	r3, r2
 80059be:	b2db      	uxtb	r3, r3
uint8_t RTC_Bcd2ToByte(uint8_t Value)
 80059c0:	4618      	mov	r0, r3
 80059c2:	3714      	adds	r7, #20
 80059c4:	46bd      	mov	sp, r7
 80059c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ca:	4770      	bx	lr

080059cc <HAL_SPI_Init>:
  * @brief  Initialize the SPI according to the specified parameters
  *         in the SPI_InitTypeDef and initialize the associated handle.
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
 80059cc:	b580      	push	{r7, lr}
 80059ce:	b084      	sub	sp, #16
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
  uint32_t frxth;

 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d101      	bne.n	80059de <HAL_SPI_Init+0x12>
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80059da:	2301      	movs	r3, #1
 80059dc:	e095      	b.n	8005b0a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d108      	bne.n	80059f8 <HAL_SPI_Init+0x2c>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	685b      	ldr	r3, [r3, #4]
 80059ea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80059ee:	d009      	beq.n	8005a04 <HAL_SPI_Init+0x38>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
    {
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2200      	movs	r2, #0
 80059f4:	61da      	str	r2, [r3, #28]
 80059f6:	e005      	b.n	8005a04 <HAL_SPI_Init+0x38>
    }
  }
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	2200      	movs	r2, #0
 80059fc:	611a      	str	r2, [r3, #16]
    /* Force polarity and phase to TI protocaol requirements */
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	2200      	movs	r2, #0
 8005a02:	615a      	str	r2, [r3, #20]
  assert_param(IS_SPI_CRC_CALCULATION(hspi->Init.CRCCalculation));
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2200      	movs	r2, #0
 8005a08:	629a      	str	r2, [r3, #40]	; 0x28
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
#endif /* USE_SPI_CRC */
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005a10:	b2db      	uxtb	r3, r3
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d106      	bne.n	8005a24 <HAL_SPI_Init+0x58>

  if (hspi->State == HAL_SPI_STATE_RESET)
  {
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	2200      	movs	r2, #0
 8005a1a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
      hspi->MspInitCallback = HAL_SPI_MspInit; /* Legacy weak MspInit  */
    }

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
 8005a1e:	6878      	ldr	r0, [r7, #4]
 8005a20:	f7fc f81e 	bl	8001a60 <HAL_SPI_MspInit>
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2202      	movs	r2, #2
 8005a28:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  hspi->State = HAL_SPI_STATE_BUSY;

 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	681a      	ldr	r2, [r3, #0]
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005a3a:	601a      	str	r2, [r3, #0]
  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);

 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	68db      	ldr	r3, [r3, #12]
 8005a40:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005a44:	d902      	bls.n	8005a4c <HAL_SPI_Init+0x80>
  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005a46:	2300      	movs	r3, #0
 8005a48:	60fb      	str	r3, [r7, #12]
 8005a4a:	e002      	b.n	8005a52 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
  }
  else
 8005a4c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005a50:	60fb      	str	r3, [r7, #12]
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
  }

 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	68db      	ldr	r3, [r3, #12]
 8005a56:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005a5a:	d007      	beq.n	8005a6c <HAL_SPI_Init+0xa0>
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	68db      	ldr	r3, [r3, #12]
 8005a60:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005a64:	d002      	beq.n	8005a6c <HAL_SPI_Init+0xa0>
  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
  {
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	2200      	movs	r2, #0
 8005a6a:	629a      	str	r2, [r3, #40]	; 0x28
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	685b      	ldr	r3, [r3, #4]
 8005a70:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	689b      	ldr	r3, [r3, #8]
 8005a78:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005a7c:	431a      	orrs	r2, r3
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	691b      	ldr	r3, [r3, #16]
 8005a82:	f003 0302 	and.w	r3, r3, #2
 8005a86:	431a      	orrs	r2, r3
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	695b      	ldr	r3, [r3, #20]
 8005a8c:	f003 0301 	and.w	r3, r3, #1
 8005a90:	431a      	orrs	r2, r3
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	699b      	ldr	r3, [r3, #24]
 8005a96:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005a9a:	431a      	orrs	r2, r3
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	69db      	ldr	r3, [r3, #28]
 8005aa0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005aa4:	431a      	orrs	r2, r3
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	6a1b      	ldr	r3, [r3, #32]
 8005aaa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005aae:	ea42 0103 	orr.w	r1, r2, r3
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ab6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	430a      	orrs	r2, r1
 8005ac0:	601a      	str	r2, [r3, #0]
    {
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCL);
    }
  }
#endif /* USE_SPI_CRC */

 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	699b      	ldr	r3, [r3, #24]
 8005ac6:	0c1b      	lsrs	r3, r3, #16
 8005ac8:	f003 0204 	and.w	r2, r3, #4
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ad0:	f003 0310 	and.w	r3, r3, #16
 8005ad4:	431a      	orrs	r2, r3
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ada:	f003 0308 	and.w	r3, r3, #8
 8005ade:	431a      	orrs	r2, r3
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	68db      	ldr	r3, [r3, #12]
 8005ae4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005ae8:	ea42 0103 	orr.w	r1, r2, r3
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	430a      	orrs	r2, r1
 8005af8:	605a      	str	r2, [r3, #4]
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	2200      	movs	r2, #0
 8005afe:	661a      	str	r2, [r3, #96]	; 0x60

 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2201      	movs	r2, #1
 8005b04:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
  hspi->State     = HAL_SPI_STATE_READY;
 8005b08:	2300      	movs	r3, #0

 8005b0a:	4618      	mov	r0, r3
 8005b0c:	3710      	adds	r7, #16
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	bd80      	pop	{r7, pc}

08005b12 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005b12:	b580      	push	{r7, lr}
 8005b14:	b082      	sub	sp, #8
 8005b16:	af00      	add	r7, sp, #0
 8005b18:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d101      	bne.n	8005b24 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005b20:	2301      	movs	r3, #1
 8005b22:	e049      	b.n	8005bb8 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
  {
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b2a:	b2db      	uxtb	r3, r3
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d106      	bne.n	8005b3e <HAL_TIM_Base_Init+0x2c>
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;

 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	2200      	movs	r2, #0
 8005b34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
 8005b38:	6878      	ldr	r0, [r7, #4]
 8005b3a:	f7fb ffd5 	bl	8001ae8 <HAL_TIM_Base_MspInit>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;

 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	2202      	movs	r2, #2
 8005b42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);

 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681a      	ldr	r2, [r3, #0]
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	3304      	adds	r3, #4
 8005b4e:	4619      	mov	r1, r3
 8005b50:	4610      	mov	r0, r2
 8005b52:	f000 f9ed 	bl	8005f30 <TIM_Base_SetConfig>
  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;

 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	2201      	movs	r2, #1
 8005b5a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	2201      	movs	r2, #1
 8005b62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	2201      	movs	r2, #1
 8005b6a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	2201      	movs	r2, #1
 8005b72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	2201      	movs	r2, #1
 8005b7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	2201      	movs	r2, #1
 8005b82:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	2201      	movs	r2, #1
 8005b8a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	2201      	movs	r2, #1
 8005b92:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	2201      	movs	r2, #1
 8005b9a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	2201      	movs	r2, #1
 8005ba2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	2201      	movs	r2, #1
 8005baa:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;

 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	2201      	movs	r2, #1
 8005bb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  return HAL_OK;
}
 8005bb6:	2300      	movs	r3, #0

 8005bb8:	4618      	mov	r0, r3
 8005bba:	3708      	adds	r7, #8
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	bd80      	pop	{r7, pc}

08005bc0 <HAL_TIM_Base_Start_IT>:
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
  uint32_t tmpsmcr;
 8005bc0:	b480      	push	{r7}
 8005bc2:	b085      	sub	sp, #20
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
  {
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005bce:	b2db      	uxtb	r3, r3
 8005bd0:	2b01      	cmp	r3, #1
 8005bd2:	d001      	beq.n	8005bd8 <HAL_TIM_Base_Start_IT+0x18>
    return HAL_ERROR;
  }
 8005bd4:	2301      	movs	r3, #1
 8005bd6:	e04f      	b.n	8005c78 <HAL_TIM_Base_Start_IT+0xb8>

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;

 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	2202      	movs	r2, #2
 8005bdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);

 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	68da      	ldr	r2, [r3, #12]
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	f042 0201 	orr.w	r2, r2, #1
 8005bee:	60da      	str	r2, [r3, #12]
  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
  {
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	4a23      	ldr	r2, [pc, #140]	; (8005c84 <HAL_TIM_Base_Start_IT+0xc4>)
 8005bf6:	4293      	cmp	r3, r2
 8005bf8:	d01d      	beq.n	8005c36 <HAL_TIM_Base_Start_IT+0x76>
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c02:	d018      	beq.n	8005c36 <HAL_TIM_Base_Start_IT+0x76>
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	4a1f      	ldr	r2, [pc, #124]	; (8005c88 <HAL_TIM_Base_Start_IT+0xc8>)
 8005c0a:	4293      	cmp	r3, r2
 8005c0c:	d013      	beq.n	8005c36 <HAL_TIM_Base_Start_IT+0x76>
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	4a1e      	ldr	r2, [pc, #120]	; (8005c8c <HAL_TIM_Base_Start_IT+0xcc>)
 8005c14:	4293      	cmp	r3, r2
 8005c16:	d00e      	beq.n	8005c36 <HAL_TIM_Base_Start_IT+0x76>
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	4a1c      	ldr	r2, [pc, #112]	; (8005c90 <HAL_TIM_Base_Start_IT+0xd0>)
 8005c1e:	4293      	cmp	r3, r2
 8005c20:	d009      	beq.n	8005c36 <HAL_TIM_Base_Start_IT+0x76>
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	4a1b      	ldr	r2, [pc, #108]	; (8005c94 <HAL_TIM_Base_Start_IT+0xd4>)
 8005c28:	4293      	cmp	r3, r2
 8005c2a:	d004      	beq.n	8005c36 <HAL_TIM_Base_Start_IT+0x76>
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	4a19      	ldr	r2, [pc, #100]	; (8005c98 <HAL_TIM_Base_Start_IT+0xd8>)
 8005c32:	4293      	cmp	r3, r2
 8005c34:	d115      	bne.n	8005c62 <HAL_TIM_Base_Start_IT+0xa2>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	689a      	ldr	r2, [r3, #8]
 8005c3c:	4b17      	ldr	r3, [pc, #92]	; (8005c9c <HAL_TIM_Base_Start_IT+0xdc>)
 8005c3e:	4013      	ands	r3, r2
 8005c40:	60fb      	str	r3, [r7, #12]
    {
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	2b06      	cmp	r3, #6
 8005c46:	d015      	beq.n	8005c74 <HAL_TIM_Base_Start_IT+0xb4>
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c4e:	d011      	beq.n	8005c74 <HAL_TIM_Base_Start_IT+0xb4>
      __HAL_TIM_ENABLE(htim);
    }
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	681a      	ldr	r2, [r3, #0]
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f042 0201 	orr.w	r2, r2, #1
 8005c5e:	601a      	str	r2, [r3, #0]
    {
 8005c60:	e008      	b.n	8005c74 <HAL_TIM_Base_Start_IT+0xb4>
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
  }
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	681a      	ldr	r2, [r3, #0]
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	f042 0201 	orr.w	r2, r2, #1
 8005c70:	601a      	str	r2, [r3, #0]
 8005c72:	e000      	b.n	8005c76 <HAL_TIM_Base_Start_IT+0xb6>
    {
 8005c74:	bf00      	nop

  /* Return function status */
  return HAL_OK;
}
 8005c76:	2300      	movs	r3, #0

 8005c78:	4618      	mov	r0, r3
 8005c7a:	3714      	adds	r7, #20
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c82:	4770      	bx	lr
 8005c84:	40012c00 	.word	0x40012c00
 8005c88:	40000400 	.word	0x40000400
 8005c8c:	40000800 	.word	0x40000800
 8005c90:	40000c00 	.word	0x40000c00
 8005c94:	40013400 	.word	0x40013400
 8005c98:	40014000 	.word	0x40014000
 8005c9c:	00010007 	.word	0x00010007

08005ca0 <HAL_TIM_IRQHandler>:
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
    }
  }
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	b082      	sub	sp, #8
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	691b      	ldr	r3, [r3, #16]
 8005cae:	f003 0302 	and.w	r3, r3, #2
 8005cb2:	2b02      	cmp	r3, #2
 8005cb4:	d122      	bne.n	8005cfc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	68db      	ldr	r3, [r3, #12]
 8005cbc:	f003 0302 	and.w	r3, r3, #2
 8005cc0:	2b02      	cmp	r3, #2
 8005cc2:	d11b      	bne.n	8005cfc <HAL_TIM_IRQHandler+0x5c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	f06f 0202 	mvn.w	r2, #2
 8005ccc:	611a      	str	r2, [r3, #16]
      /* Input capture event */
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	2201      	movs	r2, #1
 8005cd2:	771a      	strb	r2, [r3, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	699b      	ldr	r3, [r3, #24]
 8005cda:	f003 0303 	and.w	r3, r3, #3
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d003      	beq.n	8005cea <HAL_TIM_IRQHandler+0x4a>
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
 8005ce2:	6878      	ldr	r0, [r7, #4]
 8005ce4:	f000 f905 	bl	8005ef2 <HAL_TIM_IC_CaptureCallback>
 8005ce8:	e005      	b.n	8005cf6 <HAL_TIM_IRQHandler+0x56>
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
 8005cea:	6878      	ldr	r0, [r7, #4]
 8005cec:	f000 f8f7 	bl	8005ede <HAL_TIM_OC_DelayElapsedCallback>
      }
 8005cf0:	6878      	ldr	r0, [r7, #4]
 8005cf2:	f000 f908 	bl	8005f06 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
    }
  }
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	2200      	movs	r2, #0
 8005cfa:	771a      	strb	r2, [r3, #28]
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
    {
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	691b      	ldr	r3, [r3, #16]
 8005d02:	f003 0304 	and.w	r3, r3, #4
 8005d06:	2b04      	cmp	r3, #4
 8005d08:	d122      	bne.n	8005d50 <HAL_TIM_IRQHandler+0xb0>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	68db      	ldr	r3, [r3, #12]
 8005d10:	f003 0304 	and.w	r3, r3, #4
 8005d14:	2b04      	cmp	r3, #4
 8005d16:	d11b      	bne.n	8005d50 <HAL_TIM_IRQHandler+0xb0>
      htim->PeriodElapsedCallback(htim);
#else
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f06f 0204 	mvn.w	r2, #4
 8005d20:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	2202      	movs	r2, #2
 8005d26:	771a      	strb	r2, [r3, #28]
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	699b      	ldr	r3, [r3, #24]
 8005d2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d003      	beq.n	8005d3e <HAL_TIM_IRQHandler+0x9e>
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005d36:	6878      	ldr	r0, [r7, #4]
 8005d38:	f000 f8db 	bl	8005ef2 <HAL_TIM_IC_CaptureCallback>
 8005d3c:	e005      	b.n	8005d4a <HAL_TIM_IRQHandler+0xaa>
#else
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
 8005d3e:	6878      	ldr	r0, [r7, #4]
 8005d40:	f000 f8cd 	bl	8005ede <HAL_TIM_OC_DelayElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005d44:	6878      	ldr	r0, [r7, #4]
 8005d46:	f000 f8de 	bl	8005f06 <HAL_TIM_PWM_PulseFinishedCallback>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
    {
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	2200      	movs	r2, #0
 8005d4e:	771a      	strb	r2, [r3, #28]
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	691b      	ldr	r3, [r3, #16]
 8005d56:	f003 0308 	and.w	r3, r3, #8
 8005d5a:	2b08      	cmp	r3, #8
 8005d5c:	d122      	bne.n	8005da4 <HAL_TIM_IRQHandler+0x104>
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	68db      	ldr	r3, [r3, #12]
 8005d64:	f003 0308 	and.w	r3, r3, #8
 8005d68:	2b08      	cmp	r3, #8
 8005d6a:	d11b      	bne.n	8005da4 <HAL_TIM_IRQHandler+0x104>
    }
  }
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	f06f 0208 	mvn.w	r2, #8
 8005d74:	611a      	str	r2, [r3, #16]
  /* TIM Trigger detection event */
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	2204      	movs	r2, #4
 8005d7a:	771a      	strb	r2, [r3, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
  {
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	69db      	ldr	r3, [r3, #28]
 8005d82:	f003 0303 	and.w	r3, r3, #3
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d003      	beq.n	8005d92 <HAL_TIM_IRQHandler+0xf2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 8005d8a:	6878      	ldr	r0, [r7, #4]
 8005d8c:	f000 f8b1 	bl	8005ef2 <HAL_TIM_IC_CaptureCallback>
 8005d90:	e005      	b.n	8005d9e <HAL_TIM_IRQHandler+0xfe>
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
    {
 8005d92:	6878      	ldr	r0, [r7, #4]
 8005d94:	f000 f8a3 	bl	8005ede <HAL_TIM_OC_DelayElapsedCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005d98:	6878      	ldr	r0, [r7, #4]
 8005d9a:	f000 f8b4 	bl	8005f06 <HAL_TIM_PWM_PulseFinishedCallback>
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	2200      	movs	r2, #0
 8005da2:	771a      	strb	r2, [r3, #28]
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	691b      	ldr	r3, [r3, #16]
 8005daa:	f003 0310 	and.w	r3, r3, #16
 8005dae:	2b10      	cmp	r3, #16
 8005db0:	d122      	bne.n	8005df8 <HAL_TIM_IRQHandler+0x158>
}

 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	68db      	ldr	r3, [r3, #12]
 8005db8:	f003 0310 	and.w	r3, r3, #16
 8005dbc:	2b10      	cmp	r3, #16
 8005dbe:	d11b      	bne.n	8005df8 <HAL_TIM_IRQHandler+0x158>
/**
  * @}
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	f06f 0210 	mvn.w	r2, #16
 8005dc8:	611a      	str	r2, [r3, #16]
  */
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	2208      	movs	r2, #8
 8005dce:	771a      	strb	r2, [r3, #28]

/** @defgroup TIM_Exported_Functions_Group8 TIM Peripheral Control functions
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	69db      	ldr	r3, [r3, #28]
 8005dd6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d003      	beq.n	8005de6 <HAL_TIM_IRQHandler+0x146>
  *  @brief    TIM Peripheral Control functions
  *
@verbatim
  ==============================================================================
                   ##### Peripheral Control functions #####
 8005dde:	6878      	ldr	r0, [r7, #4]
 8005de0:	f000 f887 	bl	8005ef2 <HAL_TIM_IC_CaptureCallback>
 8005de4:	e005      	b.n	8005df2 <HAL_TIM_IRQHandler+0x152>
      (+) Configure External Clock source.
      (+) Configure Complementary channels, break features and dead time.
      (+) Configure Master and the Slave synchronization.
      (+) Configure the DMA Burst Mode.

@endverbatim
 8005de6:	6878      	ldr	r0, [r7, #4]
 8005de8:	f000 f879 	bl	8005ede <HAL_TIM_OC_DelayElapsedCallback>
  * @{
 8005dec:	6878      	ldr	r0, [r7, #4]
 8005dee:	f000 f88a 	bl	8005f06 <HAL_TIM_PWM_PulseFinishedCallback>
  */

/**
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	2200      	movs	r2, #0
 8005df6:	771a      	strb	r2, [r3, #28]
  * @brief  Initializes the TIM Output Compare Channels according to the specified
  *         parameters in the TIM_OC_InitTypeDef.
  * @param  htim TIM Output Compare handle
  * @param  sConfig TIM Output Compare configuration structure
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	691b      	ldr	r3, [r3, #16]
 8005dfe:	f003 0301 	and.w	r3, r3, #1
 8005e02:	2b01      	cmp	r3, #1
 8005e04:	d10e      	bne.n	8005e24 <HAL_TIM_IRQHandler+0x184>
  * @param  Channel TIM Channels to configure
  *          This parameter can be one of the following values:
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	68db      	ldr	r3, [r3, #12]
 8005e0c:	f003 0301 	and.w	r3, r3, #1
 8005e10:	2b01      	cmp	r3, #1
 8005e12:	d107      	bne.n	8005e24 <HAL_TIM_IRQHandler+0x184>
  *            @arg TIM_CHANNEL_1: TIM Channel 1 selected
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f06f 0201 	mvn.w	r2, #1
 8005e1c:	611a      	str	r2, [r3, #16]
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
 8005e1e:	6878      	ldr	r0, [r7, #4]
 8005e20:	f7fb fc82 	bl	8001728 <HAL_TIM_PeriodElapsedCallback>
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	691b      	ldr	r3, [r3, #16]
 8005e2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e2e:	2b80      	cmp	r3, #128	; 0x80
 8005e30:	d10e      	bne.n	8005e50 <HAL_TIM_IRQHandler+0x1b0>
{
  /* Check the parameters */
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	68db      	ldr	r3, [r3, #12]
 8005e38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e3c:	2b80      	cmp	r3, #128	; 0x80
 8005e3e:	d107      	bne.n	8005e50 <HAL_TIM_IRQHandler+0x1b0>
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005e48:	611a      	str	r2, [r3, #16]
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005e4a:	6878      	ldr	r0, [r7, #4]
 8005e4c:	f000 f99c 	bl	8006188 <HAL_TIMEx_BreakCallback>

  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	691b      	ldr	r3, [r3, #16]
 8005e56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e5e:	d10e      	bne.n	8005e7e <HAL_TIM_IRQHandler+0x1de>
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	68db      	ldr	r3, [r3, #12]
 8005e66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e6a:	2b80      	cmp	r3, #128	; 0x80
 8005e6c:	d107      	bne.n	8005e7e <HAL_TIM_IRQHandler+0x1de>

      /* Configure the TIM Channel 1 in Output Compare */
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005e76:	611a      	str	r2, [r3, #16]
      TIM_OC1_SetConfig(htim->Instance, sConfig);
      break;
    }

 8005e78:	6878      	ldr	r0, [r7, #4]
 8005e7a:	f000 f98f 	bl	800619c <HAL_TIMEx_Break2Callback>
    case TIM_CHANNEL_2:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	691b      	ldr	r3, [r3, #16]
 8005e84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e88:	2b40      	cmp	r3, #64	; 0x40
 8005e8a:	d10e      	bne.n	8005eaa <HAL_TIM_IRQHandler+0x20a>
      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	68db      	ldr	r3, [r3, #12]
 8005e92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e96:	2b40      	cmp	r3, #64	; 0x40
 8005e98:	d107      	bne.n	8005eaa <HAL_TIM_IRQHandler+0x20a>
      break;
    }
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005ea2:	611a      	str	r2, [r3, #16]

    case TIM_CHANNEL_3:
    {
      /* Check the parameters */
 8005ea4:	6878      	ldr	r0, [r7, #4]
 8005ea6:	f000 f838 	bl	8005f1a <HAL_TIM_TriggerCallback>
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
      break;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	691b      	ldr	r3, [r3, #16]
 8005eb0:	f003 0320 	and.w	r3, r3, #32
 8005eb4:	2b20      	cmp	r3, #32
 8005eb6:	d10e      	bne.n	8005ed6 <HAL_TIM_IRQHandler+0x236>
    }

 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	68db      	ldr	r3, [r3, #12]
 8005ebe:	f003 0320 	and.w	r3, r3, #32
 8005ec2:	2b20      	cmp	r3, #32
 8005ec4:	d107      	bne.n	8005ed6 <HAL_TIM_IRQHandler+0x236>
    case TIM_CHANNEL_4:
    {
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	f06f 0220 	mvn.w	r2, #32
 8005ece:	611a      	str	r2, [r3, #16]
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
 8005ed0:	6878      	ldr	r0, [r7, #4]
 8005ed2:	f000 f94f 	bl	8006174 <HAL_TIMEx_CommutCallback>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
      break;
    }

 8005ed6:	bf00      	nop
 8005ed8:	3708      	adds	r7, #8
 8005eda:	46bd      	mov	sp, r7
 8005edc:	bd80      	pop	{r7, pc}

08005ede <HAL_TIM_OC_DelayElapsedCallback>:
{
  HAL_StatusTypeDef status = HAL_OK;

  if (pCallback == NULL)
  {
    return HAL_ERROR;
 8005ede:	b480      	push	{r7}
 8005ee0:	b083      	sub	sp, #12
 8005ee2:	af00      	add	r7, sp, #0
 8005ee4:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(htim);

  if (htim->State == HAL_TIM_STATE_READY)
  {
    switch (CallbackID)
 8005ee6:	bf00      	nop
 8005ee8:	370c      	adds	r7, #12
 8005eea:	46bd      	mov	sp, r7
 8005eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef0:	4770      	bx	lr

08005ef2 <HAL_TIM_IC_CaptureCallback>:
        htim->Base_MspInitCallback                 = pCallback;
        break;

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
        break;
 8005ef2:	b480      	push	{r7}
 8005ef4:	b083      	sub	sp, #12
 8005ef6:	af00      	add	r7, sp, #0
 8005ef8:	6078      	str	r0, [r7, #4]
      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
        break;

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 8005efa:	bf00      	nop
 8005efc:	370c      	adds	r7, #12
 8005efe:	46bd      	mov	sp, r7
 8005f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f04:	4770      	bx	lr

08005f06 <HAL_TIM_PWM_PulseFinishedCallback>:

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
        break;

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
 8005f06:	b480      	push	{r7}
 8005f08:	b083      	sub	sp, #12
 8005f0a:	af00      	add	r7, sp, #0
 8005f0c:	6078      	str	r0, [r7, #4]
        break;

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
        break;

 8005f0e:	bf00      	nop
 8005f10:	370c      	adds	r7, #12
 8005f12:	46bd      	mov	sp, r7
 8005f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f18:	4770      	bx	lr

08005f1a <HAL_TIM_TriggerCallback>:
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
        break;

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
        break;
 8005f1a:	b480      	push	{r7}
 8005f1c:	b083      	sub	sp, #12
 8005f1e:	af00      	add	r7, sp, #0
 8005f20:	6078      	str	r0, [r7, #4]
      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
        break;

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 8005f22:	bf00      	nop
 8005f24:	370c      	adds	r7, #12
 8005f26:	46bd      	mov	sp, r7
 8005f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2c:	4770      	bx	lr
	...

08005f30 <TIM_Base_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
  uint32_t tmpccmrx;
 8005f30:	b480      	push	{r7}
 8005f32:	b085      	sub	sp, #20
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
 8005f38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccer;
  uint32_t tmpcr2;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	60fb      	str	r3, [r7, #12]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	4a40      	ldr	r2, [pc, #256]	; (8006044 <TIM_Base_SetConfig+0x114>)
 8005f44:	4293      	cmp	r3, r2
 8005f46:	d013      	beq.n	8005f70 <TIM_Base_SetConfig+0x40>
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f4e:	d00f      	beq.n	8005f70 <TIM_Base_SetConfig+0x40>
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	4a3d      	ldr	r2, [pc, #244]	; (8006048 <TIM_Base_SetConfig+0x118>)
 8005f54:	4293      	cmp	r3, r2
 8005f56:	d00b      	beq.n	8005f70 <TIM_Base_SetConfig+0x40>
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	4a3c      	ldr	r2, [pc, #240]	; (800604c <TIM_Base_SetConfig+0x11c>)
 8005f5c:	4293      	cmp	r3, r2
 8005f5e:	d007      	beq.n	8005f70 <TIM_Base_SetConfig+0x40>
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	4a3b      	ldr	r2, [pc, #236]	; (8006050 <TIM_Base_SetConfig+0x120>)
 8005f64:	4293      	cmp	r3, r2
 8005f66:	d003      	beq.n	8005f70 <TIM_Base_SetConfig+0x40>
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	4a3a      	ldr	r2, [pc, #232]	; (8006054 <TIM_Base_SetConfig+0x124>)
 8005f6c:	4293      	cmp	r3, r2
 8005f6e:	d108      	bne.n	8005f82 <TIM_Base_SetConfig+0x52>

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f76:	60fb      	str	r3, [r7, #12]
  /* Get the TIMx CR2 register value */
 8005f78:	683b      	ldr	r3, [r7, #0]
 8005f7a:	685b      	ldr	r3, [r3, #4]
 8005f7c:	68fa      	ldr	r2, [r7, #12]
 8005f7e:	4313      	orrs	r3, r2
 8005f80:	60fb      	str	r3, [r7, #12]
  tmpcr2 =  TIMx->CR2;

  /* Get the TIMx CCMR2 register value */
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	4a2f      	ldr	r2, [pc, #188]	; (8006044 <TIM_Base_SetConfig+0x114>)
 8005f86:	4293      	cmp	r3, r2
 8005f88:	d01f      	beq.n	8005fca <TIM_Base_SetConfig+0x9a>
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f90:	d01b      	beq.n	8005fca <TIM_Base_SetConfig+0x9a>
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	4a2c      	ldr	r2, [pc, #176]	; (8006048 <TIM_Base_SetConfig+0x118>)
 8005f96:	4293      	cmp	r3, r2
 8005f98:	d017      	beq.n	8005fca <TIM_Base_SetConfig+0x9a>
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	4a2b      	ldr	r2, [pc, #172]	; (800604c <TIM_Base_SetConfig+0x11c>)
 8005f9e:	4293      	cmp	r3, r2
 8005fa0:	d013      	beq.n	8005fca <TIM_Base_SetConfig+0x9a>
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	4a2a      	ldr	r2, [pc, #168]	; (8006050 <TIM_Base_SetConfig+0x120>)
 8005fa6:	4293      	cmp	r3, r2
 8005fa8:	d00f      	beq.n	8005fca <TIM_Base_SetConfig+0x9a>
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	4a29      	ldr	r2, [pc, #164]	; (8006054 <TIM_Base_SetConfig+0x124>)
 8005fae:	4293      	cmp	r3, r2
 8005fb0:	d00b      	beq.n	8005fca <TIM_Base_SetConfig+0x9a>
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	4a28      	ldr	r2, [pc, #160]	; (8006058 <TIM_Base_SetConfig+0x128>)
 8005fb6:	4293      	cmp	r3, r2
 8005fb8:	d007      	beq.n	8005fca <TIM_Base_SetConfig+0x9a>
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	4a27      	ldr	r2, [pc, #156]	; (800605c <TIM_Base_SetConfig+0x12c>)
 8005fbe:	4293      	cmp	r3, r2
 8005fc0:	d003      	beq.n	8005fca <TIM_Base_SetConfig+0x9a>
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	4a26      	ldr	r2, [pc, #152]	; (8006060 <TIM_Base_SetConfig+0x130>)
 8005fc6:	4293      	cmp	r3, r2
 8005fc8:	d108      	bne.n	8005fdc <TIM_Base_SetConfig+0xac>
  tmpccmrx = TIMx->CCMR2;

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005fd0:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005fd2:	683b      	ldr	r3, [r7, #0]
 8005fd4:	68db      	ldr	r3, [r3, #12]
 8005fd6:	68fa      	ldr	r2, [r7, #12]
 8005fd8:	4313      	orrs	r3, r2
 8005fda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;

 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005fe2:	683b      	ldr	r3, [r7, #0]
 8005fe4:	695b      	ldr	r3, [r3, #20]
 8005fe6:	4313      	orrs	r3, r2
 8005fe8:	60fb      	str	r3, [r7, #12]
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	68fa      	ldr	r2, [r7, #12]
 8005fee:	601a      	str	r2, [r3, #0]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);

 8005ff0:	683b      	ldr	r3, [r7, #0]
 8005ff2:	689a      	ldr	r2, [r3, #8]
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8005ff8:	683b      	ldr	r3, [r7, #0]
 8005ffa:	681a      	ldr	r2, [r3, #0]
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	629a      	str	r2, [r3, #40]	; 0x28

    /* Reset the Output N Polarity level */
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	4a10      	ldr	r2, [pc, #64]	; (8006044 <TIM_Base_SetConfig+0x114>)
 8006004:	4293      	cmp	r3, r2
 8006006:	d00f      	beq.n	8006028 <TIM_Base_SetConfig+0xf8>
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	4a12      	ldr	r2, [pc, #72]	; (8006054 <TIM_Base_SetConfig+0x124>)
 800600c:	4293      	cmp	r3, r2
 800600e:	d00b      	beq.n	8006028 <TIM_Base_SetConfig+0xf8>
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	4a11      	ldr	r2, [pc, #68]	; (8006058 <TIM_Base_SetConfig+0x128>)
 8006014:	4293      	cmp	r3, r2
 8006016:	d007      	beq.n	8006028 <TIM_Base_SetConfig+0xf8>
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	4a10      	ldr	r2, [pc, #64]	; (800605c <TIM_Base_SetConfig+0x12c>)
 800601c:	4293      	cmp	r3, r2
 800601e:	d003      	beq.n	8006028 <TIM_Base_SetConfig+0xf8>
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	4a0f      	ldr	r2, [pc, #60]	; (8006060 <TIM_Base_SetConfig+0x130>)
 8006024:	4293      	cmp	r3, r2
 8006026:	d103      	bne.n	8006030 <TIM_Base_SetConfig+0x100>
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006028:	683b      	ldr	r3, [r7, #0]
 800602a:	691a      	ldr	r2, [r3, #16]
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	631a      	str	r2, [r3, #48]	; 0x30
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	2201      	movs	r2, #1
 8006034:	615a      	str	r2, [r3, #20]
  {
 8006036:	bf00      	nop
 8006038:	3714      	adds	r7, #20
 800603a:	46bd      	mov	sp, r7
 800603c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006040:	4770      	bx	lr
 8006042:	bf00      	nop
 8006044:	40012c00 	.word	0x40012c00
 8006048:	40000400 	.word	0x40000400
 800604c:	40000800 	.word	0x40000800
 8006050:	40000c00 	.word	0x40000c00
 8006054:	40013400 	.word	0x40013400
 8006058:	40014000 	.word	0x40014000
 800605c:	40014400 	.word	0x40014400
 8006060:	40014800 	.word	0x40014800

08006064 <HAL_TIMEx_MasterConfigSynchronization>:

  return HAL_OK;
}

/**
  * @brief  Configures the Break feature, dead time, Lock level, OSSI/OSSR State
 8006064:	b480      	push	{r7}
 8006066:	b085      	sub	sp, #20
 8006068:	af00      	add	r7, sp, #0
 800606a:	6078      	str	r0, [r7, #4]
 800606c:	6039      	str	r1, [r7, #0]
  * @note   Interrupts can be generated when an active level is detected on the
  *         break input, the break 2 input or the system break input. Break
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006074:	2b01      	cmp	r3, #1
 8006076:	d101      	bne.n	800607c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006078:	2302      	movs	r3, #2
 800607a:	e068      	b.n	800614e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	2201      	movs	r2, #1
 8006080:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	2202      	movs	r2, #2
 8006088:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  uint32_t tmpbdtr = 0U;

  /* Check the parameters */
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	685b      	ldr	r3, [r3, #4]
 8006092:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_INSTANCE(htim->Instance));
  assert_param(IS_TIM_OSSR_STATE(sBreakDeadTimeConfig->OffStateRunMode));
  assert_param(IS_TIM_OSSI_STATE(sBreakDeadTimeConfig->OffStateIDLEMode));
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	689b      	ldr	r3, [r3, #8]
 800609a:	60bb      	str	r3, [r7, #8]
  assert_param(IS_TIM_LOCK_LEVEL(sBreakDeadTimeConfig->LockLevel));
  assert_param(IS_TIM_DEADTIME(sBreakDeadTimeConfig->DeadTime));
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	4a2e      	ldr	r2, [pc, #184]	; (800615c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80060a2:	4293      	cmp	r3, r2
 80060a4:	d004      	beq.n	80060b0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	4a2d      	ldr	r2, [pc, #180]	; (8006160 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80060ac:	4293      	cmp	r3, r2
 80060ae:	d108      	bne.n	80060c2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80060b6:	60fb      	str	r3, [r7, #12]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
 80060b8:	683b      	ldr	r3, [r7, #0]
 80060ba:	685b      	ldr	r3, [r3, #4]
 80060bc:	68fa      	ldr	r2, [r7, #12]
 80060be:	4313      	orrs	r3, r2
 80060c0:	60fb      	str	r3, [r7, #12]
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80060ca:	683b      	ldr	r3, [r7, #0]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	68fa      	ldr	r2, [r7, #12]
 80060d0:	4313      	orrs	r3, r2
 80060d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	68fa      	ldr	r2, [r7, #12]
 80060da:	605a      	str	r2, [r3, #4]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	4a1e      	ldr	r2, [pc, #120]	; (800615c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80060e2:	4293      	cmp	r3, r2
 80060e4:	d01d      	beq.n	8006122 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060ee:	d018      	beq.n	8006122 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	4a1b      	ldr	r2, [pc, #108]	; (8006164 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80060f6:	4293      	cmp	r3, r2
 80060f8:	d013      	beq.n	8006122 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	4a1a      	ldr	r2, [pc, #104]	; (8006168 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006100:	4293      	cmp	r3, r2
 8006102:	d00e      	beq.n	8006122 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	4a18      	ldr	r2, [pc, #96]	; (800616c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800610a:	4293      	cmp	r3, r2
 800610c:	d009      	beq.n	8006122 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	4a13      	ldr	r2, [pc, #76]	; (8006160 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006114:	4293      	cmp	r3, r2
 8006116:	d004      	beq.n	8006122 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	4a14      	ldr	r2, [pc, #80]	; (8006170 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800611e:	4293      	cmp	r3, r2
 8006120:	d10c      	bne.n	800613c <HAL_TIMEx_MasterConfigSynchronization+0xd8>

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
  {
 8006122:	68bb      	ldr	r3, [r7, #8]
 8006124:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006128:	60bb      	str	r3, [r7, #8]
    /* Check the parameters */
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
 800612a:	683b      	ldr	r3, [r7, #0]
 800612c:	689b      	ldr	r3, [r3, #8]
 800612e:	68ba      	ldr	r2, [r7, #8]
 8006130:	4313      	orrs	r3, r2
 8006132:	60bb      	str	r3, [r7, #8]
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	68ba      	ldr	r2, [r7, #8]
 800613a:	609a      	str	r2, [r3, #8]
    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	2201      	movs	r2, #1
 8006140:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	2200      	movs	r2, #0
 8006148:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800614c:	2300      	movs	r3, #0

 800614e:	4618      	mov	r0, r3
 8006150:	3714      	adds	r7, #20
 8006152:	46bd      	mov	sp, r7
 8006154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006158:	4770      	bx	lr
 800615a:	bf00      	nop
 800615c:	40012c00 	.word	0x40012c00
 8006160:	40013400 	.word	0x40013400
 8006164:	40000400 	.word	0x40000400
 8006168:	40000800 	.word	0x40000800
 800616c:	40000c00 	.word	0x40000c00
 8006170:	40014000 	.word	0x40014000

08006174 <HAL_TIMEx_CommutCallback>:
  *
@verbatim
  ==============================================================================
                ##### Extended Peripheral State functions #####
  ==============================================================================
  [..]
 8006174:	b480      	push	{r7}
 8006176:	b083      	sub	sp, #12
 8006178:	af00      	add	r7, sp, #0
 800617a:	6078      	str	r0, [r7, #4]
    and the data flow.

@endverbatim
  * @{
  */

 800617c:	bf00      	nop
 800617e:	370c      	adds	r7, #12
 8006180:	46bd      	mov	sp, r7
 8006182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006186:	4770      	bx	lr

08006188 <HAL_TIMEx_BreakCallback>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2
  *            @arg TIM_CHANNEL_3: TIM Channel 3
  * @retval TIM Complementary channel state
  */
HAL_TIM_ChannelStateTypeDef HAL_TIMEx_GetChannelNState(TIM_HandleTypeDef *htim,  uint32_t ChannelN)
{
 8006188:	b480      	push	{r7}
 800618a:	b083      	sub	sp, #12
 800618c:	af00      	add	r7, sp, #0
 800618e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, ChannelN));

  channel_state = TIM_CHANNEL_N_STATE_GET(htim, ChannelN);

 8006190:	bf00      	nop
 8006192:	370c      	adds	r7, #12
 8006194:	46bd      	mov	sp, r7
 8006196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619a:	4770      	bx	lr

0800619c <HAL_TIMEx_Break2Callback>:
/**
  * @}
  */

/**
  * @}
 800619c:	b480      	push	{r7}
 800619e:	b083      	sub	sp, #12
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]

/* Private functions ---------------------------------------------------------*/
/** @defgroup TIMEx_Private_Functions TIMEx Private Functions
  * @{
  */

 80061a4:	bf00      	nop
 80061a6:	370c      	adds	r7, #12
 80061a8:	46bd      	mov	sp, r7
 80061aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ae:	4770      	bx	lr

080061b0 <HAL_UART_Init>:
  /* Check the UART handle allocation */
  if (huart == NULL)
  {
    return HAL_ERROR;
  }

 80061b0:	b580      	push	{r7, lr}
 80061b2:	b082      	sub	sp, #8
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	6078      	str	r0, [r7, #4]
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
  {
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d101      	bne.n	80061c2 <HAL_UART_Init+0x12>
    /* Check the parameters */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 80061be:	2301      	movs	r3, #1
 80061c0:	e040      	b.n	8006244 <HAL_UART_Init+0x94>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d106      	bne.n	80061d8 <HAL_UART_Init+0x28>

    if (huart->MspInitCallback == NULL)
    {
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	2200      	movs	r2, #0
 80061ce:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;

  __HAL_UART_DISABLE(huart);
 80061d2:	6878      	ldr	r0, [r7, #4]
 80061d4:	f7fb fcae 	bl	8001b34 <HAL_UART_MspInit>

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
  {
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	2224      	movs	r2, #36	; 0x24
 80061dc:	679a      	str	r2, [r3, #120]	; 0x78
    return HAL_ERROR;
  }
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	681a      	ldr	r2, [r3, #0]
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	f022 0201 	bic.w	r2, r2, #1
 80061ec:	601a      	str	r2, [r3, #0]

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
  {
 80061ee:	6878      	ldr	r0, [r7, #4]
 80061f0:	f000 fc18 	bl	8006a24 <UART_SetConfig>
 80061f4:	4603      	mov	r3, r0
 80061f6:	2b01      	cmp	r3, #1
 80061f8:	d101      	bne.n	80061fe <HAL_UART_Init+0x4e>
    UART_AdvFeatureConfig(huart);
  }
 80061fa:	2301      	movs	r3, #1
 80061fc:	e022      	b.n	8006244 <HAL_UART_Init+0x94>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006202:	2b00      	cmp	r3, #0
 8006204:	d002      	beq.n	800620c <HAL_UART_Init+0x5c>
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006206:	6878      	ldr	r0, [r7, #4]
 8006208:	f000 fec4 	bl	8006f94 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));

  __HAL_UART_ENABLE(huart);

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	685a      	ldr	r2, [r3, #4]
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800621a:	605a      	str	r2, [r3, #4]
}
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	689a      	ldr	r2, [r3, #8]
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800622a:	609a      	str	r2, [r3, #8]

/**
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	681a      	ldr	r2, [r3, #0]
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	f042 0201 	orr.w	r2, r2, #1
 800623a:	601a      	str	r2, [r3, #0]
  * @brief Initialize the half-duplex mode according to the specified
  *        parameters in the UART_InitTypeDef and creates the associated handle.
  * @param huart UART handle.
 800623c:	6878      	ldr	r0, [r7, #4]
 800623e:	f000 ff4b 	bl	80070d8 <UART_CheckIdleState>
 8006242:	4603      	mov	r3, r0
  * @retval HAL status
 8006244:	4618      	mov	r0, r3
 8006246:	3708      	adds	r7, #8
 8006248:	46bd      	mov	sp, r7
 800624a:	bd80      	pop	{r7, pc}

0800624c <HAL_UART_Transmit>:
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
  {
 800624c:	b580      	push	{r7, lr}
 800624e:	b08a      	sub	sp, #40	; 0x28
 8006250:	af02      	add	r7, sp, #8
 8006252:	60f8      	str	r0, [r7, #12]
 8006254:	60b9      	str	r1, [r7, #8]
 8006256:	603b      	str	r3, [r7, #0]
 8006258:	4613      	mov	r3, r2
 800625a:	80fb      	strh	r3, [r7, #6]
    if ((pData == NULL) || (Size == 0U))
    {
      return  HAL_ERROR;
    }

    __HAL_LOCK(huart);
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006260:	2b20      	cmp	r3, #32
 8006262:	f040 8082 	bne.w	800636a <HAL_UART_Transmit+0x11e>

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006266:	68bb      	ldr	r3, [r7, #8]
 8006268:	2b00      	cmp	r3, #0
 800626a:	d002      	beq.n	8006272 <HAL_UART_Transmit+0x26>
 800626c:	88fb      	ldrh	r3, [r7, #6]
 800626e:	2b00      	cmp	r3, #0
 8006270:	d101      	bne.n	8006276 <HAL_UART_Transmit+0x2a>
    huart->gState = HAL_UART_STATE_BUSY_TX;

 8006272:	2301      	movs	r3, #1
 8006274:	e07a      	b.n	800636c <HAL_UART_Transmit+0x120>
    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();

 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800627c:	2b01      	cmp	r3, #1
 800627e:	d101      	bne.n	8006284 <HAL_UART_Transmit+0x38>
 8006280:	2302      	movs	r3, #2
 8006282:	e073      	b.n	800636c <HAL_UART_Transmit+0x120>
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	2201      	movs	r2, #1
 8006288:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
    huart->TxXferSize  = Size;
    huart->TxXferCount = Size;
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	2200      	movs	r2, #0
 8006290:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	2221      	movs	r2, #33	; 0x21
 8006298:	679a      	str	r2, [r3, #120]	; 0x78
    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
    {
 800629a:	f7fb ff61 	bl	8002160 <HAL_GetTick>
 800629e:	6178      	str	r0, [r7, #20]
      pdata8bits  = NULL;
      pdata16bits = (uint16_t *) pData;
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	88fa      	ldrh	r2, [r7, #6]
 80062a4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    }
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	88fa      	ldrh	r2, [r7, #6]
 80062ac:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    else
    {
      pdata8bits  = pData;
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	689b      	ldr	r3, [r3, #8]
 80062b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80062b8:	d108      	bne.n	80062cc <HAL_UART_Transmit+0x80>
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	691b      	ldr	r3, [r3, #16]
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d104      	bne.n	80062cc <HAL_UART_Transmit+0x80>
      pdata16bits = NULL;
    }
 80062c2:	2300      	movs	r3, #0
 80062c4:	61fb      	str	r3, [r7, #28]

 80062c6:	68bb      	ldr	r3, [r7, #8]
 80062c8:	61bb      	str	r3, [r7, #24]
 80062ca:	e003      	b.n	80062d4 <HAL_UART_Transmit+0x88>
    __HAL_UNLOCK(huart);

    while (huart->TxXferCount > 0U)
    {
 80062cc:	68bb      	ldr	r3, [r7, #8]
 80062ce:	61fb      	str	r3, [r7, #28]
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80062d0:	2300      	movs	r3, #0
 80062d2:	61bb      	str	r3, [r7, #24]
      {
        return HAL_TIMEOUT;
      }
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	2200      	movs	r2, #0
 80062d8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
      if (pdata8bits == NULL)
      {
 80062dc:	e02d      	b.n	800633a <HAL_UART_Transmit+0xee>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
        pdata16bits++;
 80062de:	683b      	ldr	r3, [r7, #0]
 80062e0:	9300      	str	r3, [sp, #0]
 80062e2:	697b      	ldr	r3, [r7, #20]
 80062e4:	2200      	movs	r2, #0
 80062e6:	2180      	movs	r1, #128	; 0x80
 80062e8:	68f8      	ldr	r0, [r7, #12]
 80062ea:	f000 ff3e 	bl	800716a <UART_WaitOnFlagUntilTimeout>
 80062ee:	4603      	mov	r3, r0
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d001      	beq.n	80062f8 <HAL_UART_Transmit+0xac>
      }
      else
 80062f4:	2303      	movs	r3, #3
 80062f6:	e039      	b.n	800636c <HAL_UART_Transmit+0x120>
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80062f8:	69fb      	ldr	r3, [r7, #28]
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d10b      	bne.n	8006316 <HAL_UART_Transmit+0xca>
        pdata8bits++;
      }
 80062fe:	69bb      	ldr	r3, [r7, #24]
 8006300:	881a      	ldrh	r2, [r3, #0]
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800630a:	b292      	uxth	r2, r2
 800630c:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->TxXferCount--;
 800630e:	69bb      	ldr	r3, [r7, #24]
 8006310:	3302      	adds	r3, #2
 8006312:	61bb      	str	r3, [r7, #24]
 8006314:	e008      	b.n	8006328 <HAL_UART_Transmit+0xdc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
    {
 8006316:	69fb      	ldr	r3, [r7, #28]
 8006318:	781a      	ldrb	r2, [r3, #0]
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	b292      	uxth	r2, r2
 8006320:	851a      	strh	r2, [r3, #40]	; 0x28
      return HAL_TIMEOUT;
 8006322:	69fb      	ldr	r3, [r7, #28]
 8006324:	3301      	adds	r3, #1
 8006326:	61fb      	str	r3, [r7, #28]
    }

 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800632e:	b29b      	uxth	r3, r3
 8006330:	3b01      	subs	r3, #1
 8006332:	b29a      	uxth	r2, r3
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
      {
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006340:	b29b      	uxth	r3, r3
 8006342:	2b00      	cmp	r3, #0
 8006344:	d1cb      	bne.n	80062de <HAL_UART_Transmit+0x92>
    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;

 8006346:	683b      	ldr	r3, [r7, #0]
 8006348:	9300      	str	r3, [sp, #0]
 800634a:	697b      	ldr	r3, [r7, #20]
 800634c:	2200      	movs	r2, #0
 800634e:	2140      	movs	r1, #64	; 0x40
 8006350:	68f8      	ldr	r0, [r7, #12]
 8006352:	f000 ff0a 	bl	800716a <UART_WaitOnFlagUntilTimeout>
 8006356:	4603      	mov	r3, r0
 8006358:	2b00      	cmp	r3, #0
 800635a:	d001      	beq.n	8006360 <HAL_UART_Transmit+0x114>
    return HAL_OK;
  }
 800635c:	2303      	movs	r3, #3
 800635e:	e005      	b.n	800636c <HAL_UART_Transmit+0x120>
  else
  {
    return HAL_BUSY;
  }
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	2220      	movs	r2, #32
 8006364:	679a      	str	r2, [r3, #120]	; 0x78
}

 8006366:	2300      	movs	r3, #0
 8006368:	e000      	b.n	800636c <HAL_UART_Transmit+0x120>
/**
  * @brief Receive an amount of data in blocking mode.
  * @note   When UART parity is not enabled (PCE = 0), and Word Length is configured to 9 bits (M1-M0 = 01),
  *         the received data is handled as a set of u16. In this case, Size must indicate the number
 800636a:	2302      	movs	r3, #2
  *         of u16 available through pData.
  * @note When FIFO mode is enabled, the RXFNE flag is set as long as the RXFIFO
 800636c:	4618      	mov	r0, r3
 800636e:	3720      	adds	r7, #32
 8006370:	46bd      	mov	sp, r7
 8006372:	bd80      	pop	{r7, pc}

08006374 <HAL_UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_READY)
  {
    if ((pData == NULL) || (Size == 0U))
    {
      return HAL_ERROR;
    }
 8006374:	b580      	push	{r7, lr}
 8006376:	b08a      	sub	sp, #40	; 0x28
 8006378:	af00      	add	r7, sp, #0
 800637a:	60f8      	str	r0, [r7, #12]
 800637c:	60b9      	str	r1, [r7, #8]
 800637e:	4613      	mov	r3, r2
 8006380:	80fb      	strh	r3, [r7, #6]

    __HAL_LOCK(huart);
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006386:	2b20      	cmp	r3, #32
 8006388:	d142      	bne.n	8006410 <HAL_UART_Receive_IT+0x9c>

    /* Set Reception type to Standard reception */
 800638a:	68bb      	ldr	r3, [r7, #8]
 800638c:	2b00      	cmp	r3, #0
 800638e:	d002      	beq.n	8006396 <HAL_UART_Receive_IT+0x22>
 8006390:	88fb      	ldrh	r3, [r7, #6]
 8006392:	2b00      	cmp	r3, #0
 8006394:	d101      	bne.n	800639a <HAL_UART_Receive_IT+0x26>
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;

 8006396:	2301      	movs	r3, #1
 8006398:	e03b      	b.n	8006412 <HAL_UART_Receive_IT+0x9e>
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
    {
      /* Check that USART RTOEN bit is set */
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80063a0:	2b01      	cmp	r3, #1
 80063a2:	d101      	bne.n	80063a8 <HAL_UART_Receive_IT+0x34>
 80063a4:	2302      	movs	r3, #2
 80063a6:	e034      	b.n	8006412 <HAL_UART_Receive_IT+0x9e>
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	2201      	movs	r2, #1
 80063ac:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
      {
        /* Enable the UART Receiver Timeout Interrupt */
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	2200      	movs	r2, #0
 80063b4:	661a      	str	r2, [r3, #96]	; 0x60
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
      }
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	4a18      	ldr	r2, [pc, #96]	; (800641c <HAL_UART_Receive_IT+0xa8>)
 80063bc:	4293      	cmp	r3, r2
 80063be:	d01f      	beq.n	8006400 <HAL_UART_Receive_IT+0x8c>
    }

    return(UART_Start_Receive_IT(huart, pData, Size));
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	685b      	ldr	r3, [r3, #4]
 80063c6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d018      	beq.n	8006400 <HAL_UART_Receive_IT+0x8c>
  }
  else
  {
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063d4:	697b      	ldr	r3, [r7, #20]
 80063d6:	e853 3f00 	ldrex	r3, [r3]
 80063da:	613b      	str	r3, [r7, #16]
   return(result);
 80063dc:	693b      	ldr	r3, [r7, #16]
 80063de:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80063e2:	627b      	str	r3, [r7, #36]	; 0x24
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	461a      	mov	r2, r3
 80063ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063ec:	623b      	str	r3, [r7, #32]
 80063ee:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063f0:	69f9      	ldr	r1, [r7, #28]
 80063f2:	6a3a      	ldr	r2, [r7, #32]
 80063f4:	e841 2300 	strex	r3, r2, [r1]
 80063f8:	61bb      	str	r3, [r7, #24]
   return(result);
 80063fa:	69bb      	ldr	r3, [r7, #24]
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d1e6      	bne.n	80063ce <HAL_UART_Receive_IT+0x5a>
    return HAL_BUSY;
  }
}

 8006400:	88fb      	ldrh	r3, [r7, #6]
 8006402:	461a      	mov	r2, r3
 8006404:	68b9      	ldr	r1, [r7, #8]
 8006406:	68f8      	ldr	r0, [r7, #12]
 8006408:	f000 ff74 	bl	80072f4 <UART_Start_Receive_IT>
 800640c:	4603      	mov	r3, r0
 800640e:	e000      	b.n	8006412 <HAL_UART_Receive_IT+0x9e>
/**
  * @brief Send an amount of data in DMA mode.
  * @note   When UART parity is not enabled (PCE = 0), and Word Length is configured to 9 bits (M1-M0 = 01),
  *         the sent data is handled as a set of u16. In this case, Size must indicate the number
 8006410:	2302      	movs	r3, #2
  *         of u16 provided through pData.
  * @param huart UART handle.
 8006412:	4618      	mov	r0, r3
 8006414:	3728      	adds	r7, #40	; 0x28
 8006416:	46bd      	mov	sp, r7
 8006418:	bd80      	pop	{r7, pc}
 800641a:	bf00      	nop
 800641c:	40008000 	.word	0x40008000

08006420 <HAL_UART_IRQHandler>:
    /* UART in mode Receiver ---------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
 8006420:	b580      	push	{r7, lr}
 8006422:	b0ba      	sub	sp, #232	; 0xe8
 8006424:	af00      	add	r7, sp, #0
 8006426:	6078      	str	r0, [r7, #4]
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	69db      	ldr	r3, [r3, #28]
 800642e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
#endif /* USART_CR1_FIFOEN */
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	689b      	ldr	r3, [r3, #8]
 8006442:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    {
      if (huart->RxISR != NULL)
      {
        huart->RxISR(huart);
      }
      return;
 8006446:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800644a:	f640 030f 	movw	r3, #2063	; 0x80f
 800644e:	4013      	ands	r3, r2
 8006450:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    }
 8006454:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006458:	2b00      	cmp	r3, #0
 800645a:	d115      	bne.n	8006488 <HAL_UART_IRQHandler+0x68>
  /* If some errors occur */
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
 800645c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006460:	f003 0320 	and.w	r3, r3, #32
 8006464:	2b00      	cmp	r3, #0
 8006466:	d00f      	beq.n	8006488 <HAL_UART_IRQHandler+0x68>
  if ((errorflags != 0U)
 8006468:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800646c:	f003 0320 	and.w	r3, r3, #32
 8006470:	2b00      	cmp	r3, #0
 8006472:	d009      	beq.n	8006488 <HAL_UART_IRQHandler+0x68>
      && (((cr3its & USART_CR3_EIE) != 0U)
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
#endif /* USART_CR1_FIFOEN */
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006478:	2b00      	cmp	r3, #0
 800647a:	f000 82a6 	beq.w	80069ca <HAL_UART_IRQHandler+0x5aa>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006482:	6878      	ldr	r0, [r7, #4]
 8006484:	4798      	blx	r3
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
    {
 8006486:	e2a0      	b.n	80069ca <HAL_UART_IRQHandler+0x5aa>

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);

 8006488:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800648c:	2b00      	cmp	r3, #0
 800648e:	f000 8117 	beq.w	80066c0 <HAL_UART_IRQHandler+0x2a0>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006492:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006496:	f003 0301 	and.w	r3, r3, #1
 800649a:	2b00      	cmp	r3, #0
 800649c:	d106      	bne.n	80064ac <HAL_UART_IRQHandler+0x8c>
    }
 800649e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80064a2:	4b85      	ldr	r3, [pc, #532]	; (80066b8 <HAL_UART_IRQHandler+0x298>)
 80064a4:	4013      	ands	r3, r2
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	f000 810a 	beq.w	80066c0 <HAL_UART_IRQHandler+0x2a0>

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
    {
 80064ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064b0:	f003 0301 	and.w	r3, r3, #1
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d011      	beq.n	80064dc <HAL_UART_IRQHandler+0xbc>
 80064b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80064bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d00b      	beq.n	80064dc <HAL_UART_IRQHandler+0xbc>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);

 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	2201      	movs	r2, #1
 80064ca:	621a      	str	r2, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
    }
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80064d2:	f043 0201 	orr.w	r2, r3, #1
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* UART Over-Run interrupt occurred -----------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
 80064dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064e0:	f003 0302 	and.w	r3, r3, #2
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d011      	beq.n	800650c <HAL_UART_IRQHandler+0xec>
 80064e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80064ec:	f003 0301 	and.w	r3, r3, #1
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d00b      	beq.n	800650c <HAL_UART_IRQHandler+0xec>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	2202      	movs	r2, #2
 80064fa:	621a      	str	r2, [r3, #32]
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006502:	f043 0204 	orr.w	r2, r3, #4
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
            ((cr3its & USART_CR3_EIE) != 0U)))
#endif /* USART_CR1_FIFOEN */
    {
 800650c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006510:	f003 0304 	and.w	r3, r3, #4
 8006514:	2b00      	cmp	r3, #0
 8006516:	d011      	beq.n	800653c <HAL_UART_IRQHandler+0x11c>
 8006518:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800651c:	f003 0301 	and.w	r3, r3, #1
 8006520:	2b00      	cmp	r3, #0
 8006522:	d00b      	beq.n	800653c <HAL_UART_IRQHandler+0x11c>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);

 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	2204      	movs	r2, #4
 800652a:	621a      	str	r2, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
    }
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006532:	f043 0202 	orr.w	r2, r3, #2
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
    }

 800653c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006540:	f003 0308 	and.w	r3, r3, #8
 8006544:	2b00      	cmp	r3, #0
 8006546:	d017      	beq.n	8006578 <HAL_UART_IRQHandler+0x158>
    /* Call UART Error Call back function if need be ----------------------------*/
 8006548:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800654c:	f003 0320 	and.w	r3, r3, #32
 8006550:	2b00      	cmp	r3, #0
 8006552:	d105      	bne.n	8006560 <HAL_UART_IRQHandler+0x140>
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006554:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006558:	f003 0301 	and.w	r3, r3, #1
    /* Call UART Error Call back function if need be ----------------------------*/
 800655c:	2b00      	cmp	r3, #0
 800655e:	d00b      	beq.n	8006578 <HAL_UART_IRQHandler+0x158>
    {
      /* UART in mode Receiver --------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	2208      	movs	r2, #8
 8006566:	621a      	str	r2, [r3, #32]
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800656e:	f043 0208 	orr.w	r2, r3, #8
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006578:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800657c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006580:	2b00      	cmp	r3, #0
 8006582:	d012      	beq.n	80065aa <HAL_UART_IRQHandler+0x18a>
 8006584:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006588:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800658c:	2b00      	cmp	r3, #0
 800658e:	d00c      	beq.n	80065aa <HAL_UART_IRQHandler+0x18a>
#endif /* USART_CR1_FIFOEN */
      {
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006598:	621a      	str	r2, [r3, #32]
        if (huart->RxISR != NULL)
        {
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80065a0:	f043 0220 	orr.w	r2, r3, #32
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxISR(huart);
        }
      }

 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	f000 820c 	beq.w	80069ce <HAL_UART_IRQHandler+0x5ae>
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80065b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80065ba:	f003 0320 	and.w	r3, r3, #32
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d00d      	beq.n	80065de <HAL_UART_IRQHandler+0x1be>
      {
 80065c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80065c6:	f003 0320 	and.w	r3, r3, #32
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d007      	beq.n	80065de <HAL_UART_IRQHandler+0x1be>
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d003      	beq.n	80065de <HAL_UART_IRQHandler+0x1be>
        UART_EndRxTransfer(huart);

 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80065da:	6878      	ldr	r0, [r7, #4]
 80065dc:	4798      	blx	r3
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
          {
            /* Set the UART DMA Abort callback :
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80065e4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	689b      	ldr	r3, [r3, #8]
 80065ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065f2:	2b40      	cmp	r3, #64	; 0x40
 80065f4:	d005      	beq.n	8006602 <HAL_UART_IRQHandler+0x1e2>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80065f6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80065fa:	f003 0328 	and.w	r3, r3, #40	; 0x28
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d04f      	beq.n	80066a2 <HAL_UART_IRQHandler+0x282>

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
 8006602:	6878      	ldr	r0, [r7, #4]
 8006604:	f000 ff40 	bl	8007488 <UART_EndRxTransfer>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
            }
          }
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	689b      	ldr	r3, [r3, #8]
 800660e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006612:	2b40      	cmp	r3, #64	; 0x40
 8006614:	d141      	bne.n	800669a <HAL_UART_IRQHandler+0x27a>
          else
          {
            /* Call user error callback */
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	3308      	adds	r3, #8
 800661c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006620:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006624:	e853 3f00 	ldrex	r3, [r3]
 8006628:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800662c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006630:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006634:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	3308      	adds	r3, #8
 800663e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006642:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006646:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800664a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800664e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006652:	e841 2300 	strex	r3, r2, [r1]
 8006656:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800665a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800665e:	2b00      	cmp	r3, #0
 8006660:	d1d9      	bne.n	8006616 <HAL_UART_IRQHandler+0x1f6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006666:	2b00      	cmp	r3, #0
 8006668:	d013      	beq.n	8006692 <HAL_UART_IRQHandler+0x272>
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800666e:	4a13      	ldr	r2, [pc, #76]	; (80066bc <HAL_UART_IRQHandler+0x29c>)
 8006670:	639a      	str	r2, [r3, #56]	; 0x38

          }
        }
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006676:	4618      	mov	r0, r3
 8006678:	f7fb ffce 	bl	8002618 <HAL_DMA_Abort_IT>
 800667c:	4603      	mov	r3, r0
 800667e:	2b00      	cmp	r3, #0
 8006680:	d017      	beq.n	80066b2 <HAL_UART_IRQHandler+0x292>
        else
        {
          /* Call user error callback */
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006686:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006688:	687a      	ldr	r2, [r7, #4]
 800668a:	6f12      	ldr	r2, [r2, #112]	; 0x70
 800668c:	4610      	mov	r0, r2
 800668e:	4798      	blx	r3
          }
 8006690:	e00f      	b.n	80066b2 <HAL_UART_IRQHandler+0x292>
          HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
      }
      else
      {
 8006692:	6878      	ldr	r0, [r7, #4]
 8006694:	f000 f9b0 	bl	80069f8 <HAL_UART_ErrorCallback>
          }
 8006698:	e00b      	b.n	80066b2 <HAL_UART_IRQHandler+0x292>
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
      }
    }
    return;
 800669a:	6878      	ldr	r0, [r7, #4]
 800669c:	f000 f9ac 	bl	80069f8 <HAL_UART_ErrorCallback>
          }
 80066a0:	e007      	b.n	80066b2 <HAL_UART_IRQHandler+0x292>
      &&((cr1its & USART_ISR_IDLE) != 0U))
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066a2:	6878      	ldr	r0, [r7, #4]
 80066a4:	f000 f9a8 	bl	80069f8 <HAL_UART_ErrorCallback>
    {
      /* DMA mode enabled */
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	2200      	movs	r2, #0
 80066ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
 80066b0:	e18d      	b.n	80069ce <HAL_UART_IRQHandler+0x5ae>
          }
 80066b2:	bf00      	nop
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
 80066b4:	e18b      	b.n	80069ce <HAL_UART_IRQHandler+0x5ae>
 80066b6:	bf00      	nop
 80066b8:	04000120 	.word	0x04000120
 80066bc:	0800754f 	.word	0x0800754f
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
      if (  (nb_remaining_rx_data > 0U)
          &&(nb_remaining_rx_data < huart->RxXferSize))
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80066c4:	2b01      	cmp	r3, #1
 80066c6:	f040 8146 	bne.w	8006956 <HAL_UART_IRQHandler+0x536>

 80066ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066ce:	f003 0310 	and.w	r3, r3, #16
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	f000 813f 	beq.w	8006956 <HAL_UART_IRQHandler+0x536>
        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
 80066d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80066dc:	f003 0310 	and.w	r3, r3, #16
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	f000 8138 	beq.w	8006956 <HAL_UART_IRQHandler+0x536>
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
        {
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	2210      	movs	r2, #16
 80066ec:	621a      	str	r2, [r3, #32]
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	689b      	ldr	r3, [r3, #8]
 80066f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066f8:	2b40      	cmp	r3, #64	; 0x40
 80066fa:	f040 80b4 	bne.w	8006866 <HAL_UART_IRQHandler+0x446>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);

          /* At end of Rx process, restore huart->RxState to Ready */
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	685b      	ldr	r3, [r3, #4]
 8006706:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
          huart->RxState = HAL_UART_STATE_READY;
 800670a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800670e:	2b00      	cmp	r3, #0
 8006710:	f000 815f 	beq.w	80069d2 <HAL_UART_IRQHandler+0x5b2>
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800671a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800671e:	429a      	cmp	r2, r3
 8006720:	f080 8157 	bcs.w	80069d2 <HAL_UART_IRQHandler+0x5b2>

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);

 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800672a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
        }
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	f003 0320 	and.w	r3, r3, #32
 800673a:	2b00      	cmp	r3, #0
 800673c:	f040 8085 	bne.w	800684a <HAL_UART_IRQHandler+0x42a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006748:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800674c:	e853 3f00 	ldrex	r3, [r3]
 8006750:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006754:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006758:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800675c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	461a      	mov	r2, r3
 8006766:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800676a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800676e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006772:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006776:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800677a:	e841 2300 	strex	r3, r2, [r1]
 800677e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006782:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006786:	2b00      	cmp	r3, #0
 8006788:	d1da      	bne.n	8006740 <HAL_UART_IRQHandler+0x320>
#else
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	3308      	adds	r3, #8
 8006790:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006792:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006794:	e853 3f00 	ldrex	r3, [r3]
 8006798:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800679a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800679c:	f023 0301 	bic.w	r3, r3, #1
 80067a0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	3308      	adds	r3, #8
 80067aa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80067ae:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80067b2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067b4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80067b6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80067ba:	e841 2300 	strex	r3, r2, [r1]
 80067be:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80067c0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d1e1      	bne.n	800678a <HAL_UART_IRQHandler+0x36a>
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif
      }
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	3308      	adds	r3, #8
 80067cc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067ce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80067d0:	e853 3f00 	ldrex	r3, [r3]
 80067d4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80067d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80067d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80067dc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	3308      	adds	r3, #8
 80067e6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80067ea:	66fa      	str	r2, [r7, #108]	; 0x6c
 80067ec:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067ee:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80067f0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80067f2:	e841 2300 	strex	r3, r2, [r1]
 80067f6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80067f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d1e3      	bne.n	80067c6 <HAL_UART_IRQHandler+0x3a6>
      return;
    }
    else
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	2220      	movs	r2, #32
 8006802:	67da      	str	r2, [r3, #124]	; 0x7c
    {
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	2200      	movs	r2, #0
 8006808:	661a      	str	r2, [r3, #96]	; 0x60
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006810:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006812:	e853 3f00 	ldrex	r3, [r3]
 8006816:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006818:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800681a:	f023 0310 	bic.w	r3, r3, #16
 800681e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	461a      	mov	r2, r3
 8006828:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800682c:	65bb      	str	r3, [r7, #88]	; 0x58
 800682e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006830:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006832:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006834:	e841 2300 	strex	r3, r2, [r1]
 8006838:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800683a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800683c:	2b00      	cmp	r3, #0
 800683e:	d1e4      	bne.n	800680a <HAL_UART_IRQHandler+0x3ea>
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
      if (  (huart->RxXferCount > 0U)
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006844:	4618      	mov	r0, r3
 8006846:	f7fb fea9 	bl	800259c <HAL_DMA_Abort>
      {
#if defined(USART_CR1_FIFOEN)
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006856:	b29b      	uxth	r3, r3
 8006858:	1ad3      	subs	r3, r2, r3
 800685a:	b29b      	uxth	r3, r3
 800685c:	4619      	mov	r1, r3
 800685e:	6878      	ldr	r0, [r7, #4]
 8006860:	f000 f8d4 	bl	8006a0c <HAL_UARTEx_RxEventCallback>
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
 8006864:	e0b5      	b.n	80069d2 <HAL_UART_IRQHandler+0x5b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif

        /* Rx process is completed, restore huart->RxState to Ready */
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006872:	b29b      	uxth	r3, r3
 8006874:	1ad3      	subs	r3, r2, r3
 8006876:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
        huart->RxState = HAL_UART_STATE_READY;
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006880:	b29b      	uxth	r3, r3
 8006882:	2b00      	cmp	r3, #0
 8006884:	f000 80a7 	beq.w	80069d6 <HAL_UART_IRQHandler+0x5b6>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006888:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800688c:	2b00      	cmp	r3, #0
 800688e:	f000 80a2 	beq.w	80069d6 <HAL_UART_IRQHandler+0x5b6>
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006898:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800689a:	e853 3f00 	ldrex	r3, [r3]
 800689e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80068a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068a2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80068a6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	461a      	mov	r2, r3
 80068b0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80068b4:	647b      	str	r3, [r7, #68]	; 0x44
 80068b6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068b8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80068ba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80068bc:	e841 2300 	strex	r3, r2, [r1]
 80068c0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80068c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d1e4      	bne.n	8006892 <HAL_UART_IRQHandler+0x472>
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif
      }
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	3308      	adds	r3, #8
 80068ce:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068d2:	e853 3f00 	ldrex	r3, [r3]
 80068d6:	623b      	str	r3, [r7, #32]
   return(result);
 80068d8:	6a3b      	ldr	r3, [r7, #32]
 80068da:	f023 0301 	bic.w	r3, r3, #1
 80068de:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	3308      	adds	r3, #8
 80068e8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80068ec:	633a      	str	r2, [r7, #48]	; 0x30
 80068ee:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068f0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80068f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80068f4:	e841 2300 	strex	r3, r2, [r1]
 80068f8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80068fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d1e3      	bne.n	80068c8 <HAL_UART_IRQHandler+0x4a8>
      return;
    }
  }

 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	2220      	movs	r2, #32
 8006904:	67da      	str	r2, [r3, #124]	; 0x7c
  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	2200      	movs	r2, #0
 800690a:	661a      	str	r2, [r3, #96]	; 0x60
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2200      	movs	r2, #0
 8006910:	665a      	str	r2, [r3, #100]	; 0x64

    /* UART Rx state is not reset as a reception process might be ongoing.
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006918:	693b      	ldr	r3, [r7, #16]
 800691a:	e853 3f00 	ldrex	r3, [r3]
 800691e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	f023 0310 	bic.w	r3, r3, #16
 8006926:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	461a      	mov	r2, r3
 8006930:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006934:	61fb      	str	r3, [r7, #28]
 8006936:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006938:	69b9      	ldr	r1, [r7, #24]
 800693a:	69fa      	ldr	r2, [r7, #28]
 800693c:	e841 2300 	strex	r3, r2, [r1]
 8006940:	617b      	str	r3, [r7, #20]
   return(result);
 8006942:	697b      	ldr	r3, [r7, #20]
 8006944:	2b00      	cmp	r3, #0
 8006946:	d1e4      	bne.n	8006912 <HAL_UART_IRQHandler+0x4f2>
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
 8006948:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800694c:	4619      	mov	r1, r3
 800694e:	6878      	ldr	r0, [r7, #4]
 8006950:	f000 f85c 	bl	8006a0c <HAL_UARTEx_RxEventCallback>
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
 8006954:	e03f      	b.n	80069d6 <HAL_UART_IRQHandler+0x5b6>
    return;
  }

  /* UART in mode Transmitter ------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
 8006956:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800695a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800695e:	2b00      	cmp	r3, #0
 8006960:	d00e      	beq.n	8006980 <HAL_UART_IRQHandler+0x560>
 8006962:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006966:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800696a:	2b00      	cmp	r3, #0
 800696c:	d008      	beq.n	8006980 <HAL_UART_IRQHandler+0x560>
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006976:	621a      	str	r2, [r3, #32]
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
    {
      huart->TxISR(huart);
    }
 8006978:	6878      	ldr	r0, [r7, #4]
 800697a:	f000 ff88 	bl	800788e <HAL_UARTEx_WakeupCallback>
    return;
  }
 800697e:	e02d      	b.n	80069dc <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
    return;
  }

#if defined(USART_CR1_FIFOEN)
 8006980:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006984:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006988:	2b00      	cmp	r3, #0
 800698a:	d00e      	beq.n	80069aa <HAL_UART_IRQHandler+0x58a>
  /* UART TX Fifo Empty occurred ----------------------------------------------*/
 800698c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006990:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006994:	2b00      	cmp	r3, #0
 8006996:	d008      	beq.n	80069aa <HAL_UART_IRQHandler+0x58a>
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800699c:	2b00      	cmp	r3, #0
 800699e:	d01c      	beq.n	80069da <HAL_UART_IRQHandler+0x5ba>
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80069a4:	6878      	ldr	r0, [r7, #4]
 80069a6:	4798      	blx	r3
#else
    /* Call legacy weak Tx Fifo Empty Callback */
 80069a8:	e017      	b.n	80069da <HAL_UART_IRQHandler+0x5ba>
    HAL_UARTEx_TxFifoEmptyCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
 80069aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80069ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d012      	beq.n	80069dc <HAL_UART_IRQHandler+0x5bc>
 80069b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80069ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d00c      	beq.n	80069dc <HAL_UART_IRQHandler+0x5bc>

  /* UART RX Fifo Full occurred ----------------------------------------------*/
 80069c2:	6878      	ldr	r0, [r7, #4]
 80069c4:	f000 fdd9 	bl	800757a <UART_EndTransmit_IT>
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80069c8:	e008      	b.n	80069dc <HAL_UART_IRQHandler+0x5bc>
    {
 80069ca:	bf00      	nop
 80069cc:	e006      	b.n	80069dc <HAL_UART_IRQHandler+0x5bc>
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
 80069ce:	bf00      	nop
 80069d0:	e004      	b.n	80069dc <HAL_UART_IRQHandler+0x5bc>
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
 80069d2:	bf00      	nop
 80069d4:	e002      	b.n	80069dc <HAL_UART_IRQHandler+0x5bc>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
 80069d6:	bf00      	nop
 80069d8:	e000      	b.n	80069dc <HAL_UART_IRQHandler+0x5bc>
    /* Call legacy weak Tx Fifo Empty Callback */
 80069da:	bf00      	nop
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}

/**
  * @brief  Tx Half Transfer completed callback.
 80069dc:	37e8      	adds	r7, #232	; 0xe8
 80069de:	46bd      	mov	sp, r7
 80069e0:	bd80      	pop	{r7, pc}
 80069e2:	bf00      	nop

080069e4 <HAL_UART_TxCpltCallback>:
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

 80069e4:	b480      	push	{r7}
 80069e6:	b083      	sub	sp, #12
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	6078      	str	r0, [r7, #4]
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}

/**
  * @brief  Rx Transfer completed callback.
 80069ec:	bf00      	nop
 80069ee:	370c      	adds	r7, #12
 80069f0:	46bd      	mov	sp, r7
 80069f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f6:	4770      	bx	lr

080069f8 <HAL_UART_ErrorCallback>:
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

 80069f8:	b480      	push	{r7}
 80069fa:	b083      	sub	sp, #12
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	6078      	str	r0, [r7, #4]
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}

/**
  * @brief  UART Abort Complete callback.
 8006a00:	bf00      	nop
 8006a02:	370c      	adds	r7, #12
 8006a04:	46bd      	mov	sp, r7
 8006a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a0a:	4770      	bx	lr

08006a0c <HAL_UARTEx_RxEventCallback>:

/** @defgroup UART_Exported_Functions_Group3 Peripheral Control functions
  *  @brief   UART control functions
  *
@verbatim
 ===============================================================================
 8006a0c:	b480      	push	{r7}
 8006a0e:	b083      	sub	sp, #12
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	6078      	str	r0, [r7, #4]
 8006a14:	460b      	mov	r3, r1
 8006a16:	807b      	strh	r3, [r7, #2]
    [..]
    This subsection provides a set of functions allowing to control the UART.
     (+) HAL_UART_ReceiverTimeout_Config() API allows to configure the receiver timeout value on the fly
     (+) HAL_UART_EnableReceiverTimeout() API enables the receiver timeout feature
     (+) HAL_UART_DisableReceiverTimeout() API disables the receiver timeout feature
     (+) HAL_MultiProcessor_EnableMuteMode() API enables mute mode
 8006a18:	bf00      	nop
 8006a1a:	370c      	adds	r7, #12
 8006a1c:	46bd      	mov	sp, r7
 8006a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a22:	4770      	bx	lr

08006a24 <UART_SetConfig>:
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
  {
    assert_param(IS_LPUART_STOPBITS(huart->Init.StopBits));
  }
  else
 8006a24:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006a28:	b08a      	sub	sp, #40	; 0x28
 8006a2a:	af00      	add	r7, sp, #0
 8006a2c:	60f8      	str	r0, [r7, #12]
  {
    assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
    assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
  }

 8006a2e:	2300      	movs	r3, #0
 8006a30:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	689a      	ldr	r2, [r3, #8]
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	691b      	ldr	r3, [r3, #16]
 8006a3c:	431a      	orrs	r2, r3
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	695b      	ldr	r3, [r3, #20]
 8006a42:	431a      	orrs	r2, r3
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	69db      	ldr	r3, [r3, #28]
 8006a48:	4313      	orrs	r3, r2
 8006a4a:	627b      	str	r3, [r7, #36]	; 0x24
  }
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	681a      	ldr	r2, [r3, #0]
 8006a52:	4ba4      	ldr	r3, [pc, #656]	; (8006ce4 <UART_SetConfig+0x2c0>)
 8006a54:	4013      	ands	r3, r2
 8006a56:	68fa      	ldr	r2, [r7, #12]
 8006a58:	6812      	ldr	r2, [r2, #0]
 8006a5a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006a5c:	430b      	orrs	r3, r1
 8006a5e:	6013      	str	r3, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	685b      	ldr	r3, [r3, #4]
 8006a66:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	68da      	ldr	r2, [r3, #12]
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	430a      	orrs	r2, r1
 8006a74:	605a      	str	r2, [r3, #4]
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);

  /* Check LPUART instance */
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	699b      	ldr	r3, [r3, #24]
 8006a7a:	627b      	str	r3, [r7, #36]	; 0x24
  if (UART_INSTANCE_LOWPOWER(huart))
  {
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	4a99      	ldr	r2, [pc, #612]	; (8006ce8 <UART_SetConfig+0x2c4>)
 8006a82:	4293      	cmp	r3, r2
 8006a84:	d004      	beq.n	8006a90 <UART_SetConfig+0x6c>
    /* Retrieve frequency clock */
    switch (clocksource)
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	6a1b      	ldr	r3, [r3, #32]
 8006a8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a8c:	4313      	orrs	r3, r2
 8006a8e:	627b      	str	r3, [r7, #36]	; 0x24
    {
      case UART_CLOCKSOURCE_PCLK1:
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	689b      	ldr	r3, [r3, #8]
 8006a96:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006aa0:	430a      	orrs	r2, r1
 8006aa2:	609a      	str	r2, [r3, #8]
        break;
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
        break;
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	4a90      	ldr	r2, [pc, #576]	; (8006cec <UART_SetConfig+0x2c8>)
 8006aaa:	4293      	cmp	r3, r2
 8006aac:	d126      	bne.n	8006afc <UART_SetConfig+0xd8>
 8006aae:	4b90      	ldr	r3, [pc, #576]	; (8006cf0 <UART_SetConfig+0x2cc>)
 8006ab0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ab4:	f003 0303 	and.w	r3, r3, #3
 8006ab8:	2b03      	cmp	r3, #3
 8006aba:	d81b      	bhi.n	8006af4 <UART_SetConfig+0xd0>
 8006abc:	a201      	add	r2, pc, #4	; (adr r2, 8006ac4 <UART_SetConfig+0xa0>)
 8006abe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ac2:	bf00      	nop
 8006ac4:	08006ad5 	.word	0x08006ad5
 8006ac8:	08006ae5 	.word	0x08006ae5
 8006acc:	08006add 	.word	0x08006add
 8006ad0:	08006aed 	.word	0x08006aed
 8006ad4:	2301      	movs	r3, #1
 8006ad6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006ada:	e116      	b.n	8006d0a <UART_SetConfig+0x2e6>
 8006adc:	2302      	movs	r3, #2
 8006ade:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006ae2:	e112      	b.n	8006d0a <UART_SetConfig+0x2e6>
 8006ae4:	2304      	movs	r3, #4
 8006ae6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006aea:	e10e      	b.n	8006d0a <UART_SetConfig+0x2e6>
 8006aec:	2308      	movs	r3, #8
 8006aee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006af2:	e10a      	b.n	8006d0a <UART_SetConfig+0x2e6>
 8006af4:	2310      	movs	r3, #16
 8006af6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006afa:	e106      	b.n	8006d0a <UART_SetConfig+0x2e6>
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	4a7c      	ldr	r2, [pc, #496]	; (8006cf4 <UART_SetConfig+0x2d0>)
 8006b02:	4293      	cmp	r3, r2
 8006b04:	d138      	bne.n	8006b78 <UART_SetConfig+0x154>
 8006b06:	4b7a      	ldr	r3, [pc, #488]	; (8006cf0 <UART_SetConfig+0x2cc>)
 8006b08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b0c:	f003 030c 	and.w	r3, r3, #12
 8006b10:	2b0c      	cmp	r3, #12
 8006b12:	d82d      	bhi.n	8006b70 <UART_SetConfig+0x14c>
 8006b14:	a201      	add	r2, pc, #4	; (adr r2, 8006b1c <UART_SetConfig+0xf8>)
 8006b16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b1a:	bf00      	nop
 8006b1c:	08006b51 	.word	0x08006b51
 8006b20:	08006b71 	.word	0x08006b71
 8006b24:	08006b71 	.word	0x08006b71
 8006b28:	08006b71 	.word	0x08006b71
 8006b2c:	08006b61 	.word	0x08006b61
 8006b30:	08006b71 	.word	0x08006b71
 8006b34:	08006b71 	.word	0x08006b71
 8006b38:	08006b71 	.word	0x08006b71
 8006b3c:	08006b59 	.word	0x08006b59
 8006b40:	08006b71 	.word	0x08006b71
 8006b44:	08006b71 	.word	0x08006b71
 8006b48:	08006b71 	.word	0x08006b71
 8006b4c:	08006b69 	.word	0x08006b69
 8006b50:	2300      	movs	r3, #0
 8006b52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b56:	e0d8      	b.n	8006d0a <UART_SetConfig+0x2e6>
 8006b58:	2302      	movs	r3, #2
 8006b5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b5e:	e0d4      	b.n	8006d0a <UART_SetConfig+0x2e6>
 8006b60:	2304      	movs	r3, #4
 8006b62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b66:	e0d0      	b.n	8006d0a <UART_SetConfig+0x2e6>
 8006b68:	2308      	movs	r3, #8
 8006b6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b6e:	e0cc      	b.n	8006d0a <UART_SetConfig+0x2e6>
 8006b70:	2310      	movs	r3, #16
 8006b72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b76:	e0c8      	b.n	8006d0a <UART_SetConfig+0x2e6>
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	4a5e      	ldr	r2, [pc, #376]	; (8006cf8 <UART_SetConfig+0x2d4>)
 8006b7e:	4293      	cmp	r3, r2
 8006b80:	d125      	bne.n	8006bce <UART_SetConfig+0x1aa>
 8006b82:	4b5b      	ldr	r3, [pc, #364]	; (8006cf0 <UART_SetConfig+0x2cc>)
 8006b84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b88:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006b8c:	2b30      	cmp	r3, #48	; 0x30
 8006b8e:	d016      	beq.n	8006bbe <UART_SetConfig+0x19a>
 8006b90:	2b30      	cmp	r3, #48	; 0x30
 8006b92:	d818      	bhi.n	8006bc6 <UART_SetConfig+0x1a2>
 8006b94:	2b20      	cmp	r3, #32
 8006b96:	d00a      	beq.n	8006bae <UART_SetConfig+0x18a>
 8006b98:	2b20      	cmp	r3, #32
 8006b9a:	d814      	bhi.n	8006bc6 <UART_SetConfig+0x1a2>
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d002      	beq.n	8006ba6 <UART_SetConfig+0x182>
 8006ba0:	2b10      	cmp	r3, #16
 8006ba2:	d008      	beq.n	8006bb6 <UART_SetConfig+0x192>
 8006ba4:	e00f      	b.n	8006bc6 <UART_SetConfig+0x1a2>
 8006ba6:	2300      	movs	r3, #0
 8006ba8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006bac:	e0ad      	b.n	8006d0a <UART_SetConfig+0x2e6>
 8006bae:	2302      	movs	r3, #2
 8006bb0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006bb4:	e0a9      	b.n	8006d0a <UART_SetConfig+0x2e6>
 8006bb6:	2304      	movs	r3, #4
 8006bb8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006bbc:	e0a5      	b.n	8006d0a <UART_SetConfig+0x2e6>
 8006bbe:	2308      	movs	r3, #8
 8006bc0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006bc4:	e0a1      	b.n	8006d0a <UART_SetConfig+0x2e6>
 8006bc6:	2310      	movs	r3, #16
 8006bc8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006bcc:	e09d      	b.n	8006d0a <UART_SetConfig+0x2e6>
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	4a4a      	ldr	r2, [pc, #296]	; (8006cfc <UART_SetConfig+0x2d8>)
 8006bd4:	4293      	cmp	r3, r2
 8006bd6:	d125      	bne.n	8006c24 <UART_SetConfig+0x200>
 8006bd8:	4b45      	ldr	r3, [pc, #276]	; (8006cf0 <UART_SetConfig+0x2cc>)
 8006bda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006bde:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006be2:	2bc0      	cmp	r3, #192	; 0xc0
 8006be4:	d016      	beq.n	8006c14 <UART_SetConfig+0x1f0>
 8006be6:	2bc0      	cmp	r3, #192	; 0xc0
 8006be8:	d818      	bhi.n	8006c1c <UART_SetConfig+0x1f8>
 8006bea:	2b80      	cmp	r3, #128	; 0x80
 8006bec:	d00a      	beq.n	8006c04 <UART_SetConfig+0x1e0>
 8006bee:	2b80      	cmp	r3, #128	; 0x80
 8006bf0:	d814      	bhi.n	8006c1c <UART_SetConfig+0x1f8>
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d002      	beq.n	8006bfc <UART_SetConfig+0x1d8>
 8006bf6:	2b40      	cmp	r3, #64	; 0x40
 8006bf8:	d008      	beq.n	8006c0c <UART_SetConfig+0x1e8>
 8006bfa:	e00f      	b.n	8006c1c <UART_SetConfig+0x1f8>
 8006bfc:	2300      	movs	r3, #0
 8006bfe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c02:	e082      	b.n	8006d0a <UART_SetConfig+0x2e6>
 8006c04:	2302      	movs	r3, #2
 8006c06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c0a:	e07e      	b.n	8006d0a <UART_SetConfig+0x2e6>
 8006c0c:	2304      	movs	r3, #4
 8006c0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c12:	e07a      	b.n	8006d0a <UART_SetConfig+0x2e6>
 8006c14:	2308      	movs	r3, #8
 8006c16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c1a:	e076      	b.n	8006d0a <UART_SetConfig+0x2e6>
 8006c1c:	2310      	movs	r3, #16
 8006c1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c22:	e072      	b.n	8006d0a <UART_SetConfig+0x2e6>
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	4a35      	ldr	r2, [pc, #212]	; (8006d00 <UART_SetConfig+0x2dc>)
 8006c2a:	4293      	cmp	r3, r2
 8006c2c:	d12a      	bne.n	8006c84 <UART_SetConfig+0x260>
 8006c2e:	4b30      	ldr	r3, [pc, #192]	; (8006cf0 <UART_SetConfig+0x2cc>)
 8006c30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c34:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c38:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006c3c:	d01a      	beq.n	8006c74 <UART_SetConfig+0x250>
 8006c3e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006c42:	d81b      	bhi.n	8006c7c <UART_SetConfig+0x258>
 8006c44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006c48:	d00c      	beq.n	8006c64 <UART_SetConfig+0x240>
 8006c4a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006c4e:	d815      	bhi.n	8006c7c <UART_SetConfig+0x258>
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d003      	beq.n	8006c5c <UART_SetConfig+0x238>
 8006c54:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006c58:	d008      	beq.n	8006c6c <UART_SetConfig+0x248>
 8006c5a:	e00f      	b.n	8006c7c <UART_SetConfig+0x258>
 8006c5c:	2300      	movs	r3, #0
 8006c5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c62:	e052      	b.n	8006d0a <UART_SetConfig+0x2e6>
 8006c64:	2302      	movs	r3, #2
 8006c66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c6a:	e04e      	b.n	8006d0a <UART_SetConfig+0x2e6>
 8006c6c:	2304      	movs	r3, #4
 8006c6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c72:	e04a      	b.n	8006d0a <UART_SetConfig+0x2e6>
 8006c74:	2308      	movs	r3, #8
 8006c76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c7a:	e046      	b.n	8006d0a <UART_SetConfig+0x2e6>
 8006c7c:	2310      	movs	r3, #16
 8006c7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c82:	e042      	b.n	8006d0a <UART_SetConfig+0x2e6>
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	4a17      	ldr	r2, [pc, #92]	; (8006ce8 <UART_SetConfig+0x2c4>)
 8006c8a:	4293      	cmp	r3, r2
 8006c8c:	d13a      	bne.n	8006d04 <UART_SetConfig+0x2e0>
 8006c8e:	4b18      	ldr	r3, [pc, #96]	; (8006cf0 <UART_SetConfig+0x2cc>)
 8006c90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c94:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006c98:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006c9c:	d01a      	beq.n	8006cd4 <UART_SetConfig+0x2b0>
 8006c9e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006ca2:	d81b      	bhi.n	8006cdc <UART_SetConfig+0x2b8>
 8006ca4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006ca8:	d00c      	beq.n	8006cc4 <UART_SetConfig+0x2a0>
 8006caa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006cae:	d815      	bhi.n	8006cdc <UART_SetConfig+0x2b8>
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d003      	beq.n	8006cbc <UART_SetConfig+0x298>
 8006cb4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006cb8:	d008      	beq.n	8006ccc <UART_SetConfig+0x2a8>
 8006cba:	e00f      	b.n	8006cdc <UART_SetConfig+0x2b8>
 8006cbc:	2300      	movs	r3, #0
 8006cbe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006cc2:	e022      	b.n	8006d0a <UART_SetConfig+0x2e6>
 8006cc4:	2302      	movs	r3, #2
 8006cc6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006cca:	e01e      	b.n	8006d0a <UART_SetConfig+0x2e6>
 8006ccc:	2304      	movs	r3, #4
 8006cce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006cd2:	e01a      	b.n	8006d0a <UART_SetConfig+0x2e6>
 8006cd4:	2308      	movs	r3, #8
 8006cd6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006cda:	e016      	b.n	8006d0a <UART_SetConfig+0x2e6>
 8006cdc:	2310      	movs	r3, #16
 8006cde:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006ce2:	e012      	b.n	8006d0a <UART_SetConfig+0x2e6>
 8006ce4:	efff69f3 	.word	0xefff69f3
 8006ce8:	40008000 	.word	0x40008000
 8006cec:	40013800 	.word	0x40013800
 8006cf0:	40021000 	.word	0x40021000
 8006cf4:	40004400 	.word	0x40004400
 8006cf8:	40004800 	.word	0x40004800
 8006cfc:	40004c00 	.word	0x40004c00
 8006d00:	40005000 	.word	0x40005000
 8006d04:	2310      	movs	r3, #16
 8006d06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        break;
      default:
        pclk = 0U;
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	4a9f      	ldr	r2, [pc, #636]	; (8006f8c <UART_SetConfig+0x568>)
 8006d10:	4293      	cmp	r3, r2
 8006d12:	d17a      	bne.n	8006e0a <UART_SetConfig+0x3e6>
        ret = HAL_ERROR;
        break;
    }
 8006d14:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006d18:	2b08      	cmp	r3, #8
 8006d1a:	d824      	bhi.n	8006d66 <UART_SetConfig+0x342>
 8006d1c:	a201      	add	r2, pc, #4	; (adr r2, 8006d24 <UART_SetConfig+0x300>)
 8006d1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d22:	bf00      	nop
 8006d24:	08006d49 	.word	0x08006d49
 8006d28:	08006d67 	.word	0x08006d67
 8006d2c:	08006d51 	.word	0x08006d51
 8006d30:	08006d67 	.word	0x08006d67
 8006d34:	08006d57 	.word	0x08006d57
 8006d38:	08006d67 	.word	0x08006d67
 8006d3c:	08006d67 	.word	0x08006d67
 8006d40:	08006d67 	.word	0x08006d67
 8006d44:	08006d5f 	.word	0x08006d5f

    /* If proper clock source reported */
    if (pclk != 0U)
 8006d48:	f7fd fd9c 	bl	8004884 <HAL_RCC_GetPCLK1Freq>
 8006d4c:	61f8      	str	r0, [r7, #28]
    {
 8006d4e:	e010      	b.n	8006d72 <UART_SetConfig+0x34e>
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
 8006d50:	4b8f      	ldr	r3, [pc, #572]	; (8006f90 <UART_SetConfig+0x56c>)
 8006d52:	61fb      	str	r3, [r7, #28]
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006d54:	e00d      	b.n	8006d72 <UART_SetConfig+0x34e>

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
 8006d56:	f7fd fcfd 	bl	8004754 <HAL_RCC_GetSysClockFreq>
 8006d5a:	61f8      	str	r0, [r7, #28]
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006d5c:	e009      	b.n	8006d72 <UART_SetConfig+0x34e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
      {
 8006d5e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006d62:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006d64:	e005      	b.n	8006d72 <UART_SetConfig+0x34e>
      }
      else
 8006d66:	2300      	movs	r3, #0
 8006d68:	61fb      	str	r3, [r7, #28]
      {
 8006d6a:	2301      	movs	r3, #1
 8006d6c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        /* Check computed UsartDiv value is in allocated range
 8006d70:	bf00      	nop
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
        {
 8006d72:	69fb      	ldr	r3, [r7, #28]
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	f000 80fb 	beq.w	8006f70 <UART_SetConfig+0x54c>
        {
          ret = HAL_ERROR;
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	685a      	ldr	r2, [r3, #4]
 8006d7e:	4613      	mov	r3, r2
 8006d80:	005b      	lsls	r3, r3, #1
 8006d82:	4413      	add	r3, r2
 8006d84:	69fa      	ldr	r2, [r7, #28]
 8006d86:	429a      	cmp	r2, r3
 8006d88:	d305      	bcc.n	8006d96 <UART_SetConfig+0x372>
  }
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	685b      	ldr	r3, [r3, #4]
 8006d8e:	031b      	lsls	r3, r3, #12
    } /* if (pclk != 0) */
 8006d90:	69fa      	ldr	r2, [r7, #28]
 8006d92:	429a      	cmp	r2, r3
 8006d94:	d903      	bls.n	8006d9e <UART_SetConfig+0x37a>
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006d96:	2301      	movs	r3, #1
 8006d98:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006d9c:	e0e8      	b.n	8006f70 <UART_SetConfig+0x54c>
  {
    switch (clocksource)
    {
      case UART_CLOCKSOURCE_PCLK1:
 8006d9e:	69fb      	ldr	r3, [r7, #28]
 8006da0:	2200      	movs	r2, #0
 8006da2:	461c      	mov	r4, r3
 8006da4:	4615      	mov	r5, r2
 8006da6:	f04f 0200 	mov.w	r2, #0
 8006daa:	f04f 0300 	mov.w	r3, #0
 8006dae:	022b      	lsls	r3, r5, #8
 8006db0:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8006db4:	0222      	lsls	r2, r4, #8
 8006db6:	68f9      	ldr	r1, [r7, #12]
 8006db8:	6849      	ldr	r1, [r1, #4]
 8006dba:	0849      	lsrs	r1, r1, #1
 8006dbc:	2000      	movs	r0, #0
 8006dbe:	4688      	mov	r8, r1
 8006dc0:	4681      	mov	r9, r0
 8006dc2:	eb12 0a08 	adds.w	sl, r2, r8
 8006dc6:	eb43 0b09 	adc.w	fp, r3, r9
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	685b      	ldr	r3, [r3, #4]
 8006dce:	2200      	movs	r2, #0
 8006dd0:	603b      	str	r3, [r7, #0]
 8006dd2:	607a      	str	r2, [r7, #4]
 8006dd4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006dd8:	4650      	mov	r0, sl
 8006dda:	4659      	mov	r1, fp
 8006ddc:	f7f9 fa50 	bl	8000280 <__aeabi_uldivmod>
 8006de0:	4602      	mov	r2, r0
 8006de2:	460b      	mov	r3, r1
 8006de4:	4613      	mov	r3, r2
 8006de6:	61bb      	str	r3, [r7, #24]
        pclk = HAL_RCC_GetPCLK1Freq();
 8006de8:	69bb      	ldr	r3, [r7, #24]
 8006dea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006dee:	d308      	bcc.n	8006e02 <UART_SetConfig+0x3de>
 8006df0:	69bb      	ldr	r3, [r7, #24]
 8006df2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006df6:	d204      	bcs.n	8006e02 <UART_SetConfig+0x3de>
        break;
      case UART_CLOCKSOURCE_PCLK2:
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	69ba      	ldr	r2, [r7, #24]
 8006dfe:	60da      	str	r2, [r3, #12]
 8006e00:	e0b6      	b.n	8006f70 <UART_SetConfig+0x54c>
        pclk = HAL_RCC_GetPCLK2Freq();
        break;
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006e02:	2301      	movs	r3, #1
 8006e04:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006e08:	e0b2      	b.n	8006f70 <UART_SetConfig+0x54c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
        break;
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
        break;
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	69db      	ldr	r3, [r3, #28]
 8006e0e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006e12:	d15e      	bne.n	8006ed2 <UART_SetConfig+0x4ae>
      default:
        pclk = 0U;
 8006e14:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006e18:	2b08      	cmp	r3, #8
 8006e1a:	d828      	bhi.n	8006e6e <UART_SetConfig+0x44a>
 8006e1c:	a201      	add	r2, pc, #4	; (adr r2, 8006e24 <UART_SetConfig+0x400>)
 8006e1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e22:	bf00      	nop
 8006e24:	08006e49 	.word	0x08006e49
 8006e28:	08006e51 	.word	0x08006e51
 8006e2c:	08006e59 	.word	0x08006e59
 8006e30:	08006e6f 	.word	0x08006e6f
 8006e34:	08006e5f 	.word	0x08006e5f
 8006e38:	08006e6f 	.word	0x08006e6f
 8006e3c:	08006e6f 	.word	0x08006e6f
 8006e40:	08006e6f 	.word	0x08006e6f
 8006e44:	08006e67 	.word	0x08006e67
        ret = HAL_ERROR;
        break;
    }
 8006e48:	f7fd fd1c 	bl	8004884 <HAL_RCC_GetPCLK1Freq>
 8006e4c:	61f8      	str	r0, [r7, #28]

 8006e4e:	e014      	b.n	8006e7a <UART_SetConfig+0x456>
    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006e50:	f7fd fd2e 	bl	80048b0 <HAL_RCC_GetPCLK2Freq>
 8006e54:	61f8      	str	r0, [r7, #28]
    {
 8006e56:	e010      	b.n	8006e7a <UART_SetConfig+0x456>
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006e58:	4b4d      	ldr	r3, [pc, #308]	; (8006f90 <UART_SetConfig+0x56c>)
 8006e5a:	61fb      	str	r3, [r7, #28]
#else
 8006e5c:	e00d      	b.n	8006e7a <UART_SetConfig+0x456>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
 8006e5e:	f7fd fc79 	bl	8004754 <HAL_RCC_GetSysClockFreq>
 8006e62:	61f8      	str	r0, [r7, #28]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006e64:	e009      	b.n	8006e7a <UART_SetConfig+0x456>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006e66:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006e6a:	61fb      	str	r3, [r7, #28]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006e6c:	e005      	b.n	8006e7a <UART_SetConfig+0x456>
        huart->Instance->BRR = brrtemp;
      }
 8006e6e:	2300      	movs	r3, #0
 8006e70:	61fb      	str	r3, [r7, #28]
      else
 8006e72:	2301      	movs	r3, #1
 8006e74:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
      {
 8006e78:	bf00      	nop
        ret = HAL_ERROR;
      }
    }
  }
 8006e7a:	69fb      	ldr	r3, [r7, #28]
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d077      	beq.n	8006f70 <UART_SetConfig+0x54c>
  else
  {
    switch (clocksource)
    {
      case UART_CLOCKSOURCE_PCLK1:
 8006e80:	69fb      	ldr	r3, [r7, #28]
 8006e82:	005a      	lsls	r2, r3, #1
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	685b      	ldr	r3, [r3, #4]
 8006e88:	085b      	lsrs	r3, r3, #1
 8006e8a:	441a      	add	r2, r3
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	685b      	ldr	r3, [r3, #4]
 8006e90:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e94:	61bb      	str	r3, [r7, #24]
        pclk = HAL_RCC_GetPCLK1Freq();
        break;
 8006e96:	69bb      	ldr	r3, [r7, #24]
 8006e98:	2b0f      	cmp	r3, #15
 8006e9a:	d916      	bls.n	8006eca <UART_SetConfig+0x4a6>
 8006e9c:	69bb      	ldr	r3, [r7, #24]
 8006e9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ea2:	d212      	bcs.n	8006eca <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006ea4:	69bb      	ldr	r3, [r7, #24]
 8006ea6:	b29b      	uxth	r3, r3
 8006ea8:	f023 030f 	bic.w	r3, r3, #15
 8006eac:	82fb      	strh	r3, [r7, #22]
        break;
 8006eae:	69bb      	ldr	r3, [r7, #24]
 8006eb0:	085b      	lsrs	r3, r3, #1
 8006eb2:	b29b      	uxth	r3, r3
 8006eb4:	f003 0307 	and.w	r3, r3, #7
 8006eb8:	b29a      	uxth	r2, r3
 8006eba:	8afb      	ldrh	r3, [r7, #22]
 8006ebc:	4313      	orrs	r3, r2
 8006ebe:	82fb      	strh	r3, [r7, #22]
      case UART_CLOCKSOURCE_HSI:
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	8afa      	ldrh	r2, [r7, #22]
 8006ec6:	60da      	str	r2, [r3, #12]
 8006ec8:	e052      	b.n	8006f70 <UART_SetConfig+0x54c>
        pclk = (uint32_t) HSI_VALUE;
        break;
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006eca:	2301      	movs	r3, #1
 8006ecc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006ed0:	e04e      	b.n	8006f70 <UART_SetConfig+0x54c>
        break;
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
        break;
      default:
        pclk = 0U;
 8006ed2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006ed6:	2b08      	cmp	r3, #8
 8006ed8:	d827      	bhi.n	8006f2a <UART_SetConfig+0x506>
 8006eda:	a201      	add	r2, pc, #4	; (adr r2, 8006ee0 <UART_SetConfig+0x4bc>)
 8006edc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ee0:	08006f05 	.word	0x08006f05
 8006ee4:	08006f0d 	.word	0x08006f0d
 8006ee8:	08006f15 	.word	0x08006f15
 8006eec:	08006f2b 	.word	0x08006f2b
 8006ef0:	08006f1b 	.word	0x08006f1b
 8006ef4:	08006f2b 	.word	0x08006f2b
 8006ef8:	08006f2b 	.word	0x08006f2b
 8006efc:	08006f2b 	.word	0x08006f2b
 8006f00:	08006f23 	.word	0x08006f23
        ret = HAL_ERROR;
        break;
    }
 8006f04:	f7fd fcbe 	bl	8004884 <HAL_RCC_GetPCLK1Freq>
 8006f08:	61f8      	str	r0, [r7, #28]

 8006f0a:	e014      	b.n	8006f36 <UART_SetConfig+0x512>
    if (pclk != 0U)
    {
 8006f0c:	f7fd fcd0 	bl	80048b0 <HAL_RCC_GetPCLK2Freq>
 8006f10:	61f8      	str	r0, [r7, #28]
      /* USARTDIV must be greater than or equal to 0d16 */
 8006f12:	e010      	b.n	8006f36 <UART_SetConfig+0x512>
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006f14:	4b1e      	ldr	r3, [pc, #120]	; (8006f90 <UART_SetConfig+0x56c>)
 8006f16:	61fb      	str	r3, [r7, #28]
#else
 8006f18:	e00d      	b.n	8006f36 <UART_SetConfig+0x512>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
 8006f1a:	f7fd fc1b 	bl	8004754 <HAL_RCC_GetSysClockFreq>
 8006f1e:	61f8      	str	r0, [r7, #28]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006f20:	e009      	b.n	8006f36 <UART_SetConfig+0x512>
      {
        huart->Instance->BRR = usartdiv;
 8006f22:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006f26:	61fb      	str	r3, [r7, #28]
      }
 8006f28:	e005      	b.n	8006f36 <UART_SetConfig+0x512>
      else
      {
 8006f2a:	2300      	movs	r3, #0
 8006f2c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006f2e:	2301      	movs	r3, #1
 8006f30:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
      }
 8006f34:	bf00      	nop
    }
  }

 8006f36:	69fb      	ldr	r3, [r7, #28]
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d019      	beq.n	8006f70 <UART_SetConfig+0x54c>
#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	685b      	ldr	r3, [r3, #4]
 8006f40:	085a      	lsrs	r2, r3, #1
 8006f42:	69fb      	ldr	r3, [r7, #28]
 8006f44:	441a      	add	r2, r3
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	685b      	ldr	r3, [r3, #4]
 8006f4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f4e:	61bb      	str	r3, [r7, #24]
  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006f50:	69bb      	ldr	r3, [r7, #24]
 8006f52:	2b0f      	cmp	r3, #15
 8006f54:	d909      	bls.n	8006f6a <UART_SetConfig+0x546>
 8006f56:	69bb      	ldr	r3, [r7, #24]
 8006f58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f5c:	d205      	bcs.n	8006f6a <UART_SetConfig+0x546>
  huart->TxISR = NULL;

 8006f5e:	69bb      	ldr	r3, [r7, #24]
 8006f60:	b29a      	uxth	r2, r3
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	60da      	str	r2, [r3, #12]
 8006f68:	e002      	b.n	8006f70 <UART_SetConfig+0x54c>
  return ret;
}

/**
 8006f6a:	2301      	movs	r3, #1
 8006f6c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
  {
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	2200      	movs	r2, #0
 8006f74:	665a      	str	r2, [r3, #100]	; 0x64
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	2200      	movs	r2, #0
 8006f7a:	669a      	str	r2, [r3, #104]	; 0x68
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
  }
 8006f7c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22

 8006f80:	4618      	mov	r0, r3
 8006f82:	3728      	adds	r7, #40	; 0x28
 8006f84:	46bd      	mov	sp, r7
 8006f86:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006f8a:	bf00      	nop
 8006f8c:	40008000 	.word	0x40008000
 8006f90:	00f42400 	.word	0x00f42400

08006f94 <UART_AdvFeatureConfig>:
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
  }

  /* if required, configure data inversion */
 8006f94:	b480      	push	{r7}
 8006f96:	b083      	sub	sp, #12
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	6078      	str	r0, [r7, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
  }
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fa0:	f003 0301 	and.w	r3, r3, #1
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d00a      	beq.n	8006fbe <UART_AdvFeatureConfig+0x2a>

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	685b      	ldr	r3, [r3, #4]
 8006fae:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	430a      	orrs	r2, r1
 8006fbc:	605a      	str	r2, [r3, #4]
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
  }
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fc2:	f003 0302 	and.w	r3, r3, #2
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d00a      	beq.n	8006fe0 <UART_AdvFeatureConfig+0x4c>

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	685b      	ldr	r3, [r3, #4]
 8006fd0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	430a      	orrs	r2, r1
 8006fde:	605a      	str	r2, [r3, #4]
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
  }
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fe4:	f003 0304 	and.w	r3, r3, #4
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d00a      	beq.n	8007002 <UART_AdvFeatureConfig+0x6e>

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	685b      	ldr	r3, [r3, #4]
 8006ff2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	430a      	orrs	r2, r1
 8007000:	605a      	str	r2, [r3, #4]
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
  }
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007006:	f003 0308 	and.w	r3, r3, #8
 800700a:	2b00      	cmp	r3, #0
 800700c:	d00a      	beq.n	8007024 <UART_AdvFeatureConfig+0x90>

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	685b      	ldr	r3, [r3, #4]
 8007014:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	430a      	orrs	r2, r1
 8007022:	605a      	str	r2, [r3, #4]
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007028:	f003 0310 	and.w	r3, r3, #16
 800702c:	2b00      	cmp	r3, #0
 800702e:	d00a      	beq.n	8007046 <UART_AdvFeatureConfig+0xb2>
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
    {
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	689b      	ldr	r3, [r3, #8]
 8007036:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	430a      	orrs	r2, r1
 8007044:	609a      	str	r2, [r3, #8]
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
    }
  }
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800704a:	f003 0320 	and.w	r3, r3, #32
 800704e:	2b00      	cmp	r3, #0
 8007050:	d00a      	beq.n	8007068 <UART_AdvFeatureConfig+0xd4>

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	689b      	ldr	r3, [r3, #8]
 8007058:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	430a      	orrs	r2, r1
 8007066:	609a      	str	r2, [r3, #8]
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
  }
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800706c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007070:	2b00      	cmp	r3, #0
 8007072:	d01a      	beq.n	80070aa <UART_AdvFeatureConfig+0x116>
}

/**
  * @brief Check the UART Idle State.
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	685b      	ldr	r3, [r3, #4]
 800707a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	430a      	orrs	r2, r1
 8007088:	605a      	str	r2, [r3, #4]
  * @param huart UART handle.
  * @retval HAL status
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800708e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007092:	d10a      	bne.n	80070aa <UART_AdvFeatureConfig+0x116>
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	685b      	ldr	r3, [r3, #4]
 800709a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	430a      	orrs	r2, r1
 80070a8:	605a      	str	r2, [r3, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;

 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d00a      	beq.n	80070cc <UART_AdvFeatureConfig+0x138>
  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();

 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	685b      	ldr	r3, [r3, #4]
 80070bc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	430a      	orrs	r2, r1
 80070ca:	605a      	str	r2, [r3, #4]
  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80070cc:	bf00      	nop
 80070ce:	370c      	adds	r7, #12
 80070d0:	46bd      	mov	sp, r7
 80070d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d6:	4770      	bx	lr

080070d8 <UART_CheckIdleState>:
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
    }
  }
 80070d8:	b580      	push	{r7, lr}
 80070da:	b086      	sub	sp, #24
 80070dc:	af02      	add	r7, sp, #8
 80070de:	6078      	str	r0, [r7, #4]

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
  {
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	2200      	movs	r2, #0
 80070e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
    {
 80070e8:	f7fb f83a 	bl	8002160 <HAL_GetTick>
 80070ec:	60f8      	str	r0, [r7, #12]
      /* Timeout occurred */
      return HAL_TIMEOUT;
    }
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	f003 0308 	and.w	r3, r3, #8
 80070f8:	2b08      	cmp	r3, #8
 80070fa:	d10e      	bne.n	800711a <UART_CheckIdleState+0x42>
  }

  /* Initialize the UART State */
 80070fc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007100:	9300      	str	r3, [sp, #0]
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	2200      	movs	r2, #0
 8007106:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800710a:	6878      	ldr	r0, [r7, #4]
 800710c:	f000 f82d 	bl	800716a <UART_WaitOnFlagUntilTimeout>
 8007110:	4603      	mov	r3, r0
 8007112:	2b00      	cmp	r3, #0
 8007114:	d001      	beq.n	800711a <UART_CheckIdleState+0x42>
  huart->gState = HAL_UART_STATE_READY;
  huart->RxState = HAL_UART_STATE_READY;
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007116:	2303      	movs	r3, #3
 8007118:	e023      	b.n	8007162 <UART_CheckIdleState+0x8a>

  __HAL_UNLOCK(huart);

  return HAL_OK;
}
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	f003 0304 	and.w	r3, r3, #4
 8007124:	2b04      	cmp	r3, #4
 8007126:	d10e      	bne.n	8007146 <UART_CheckIdleState+0x6e>

/**
  * @brief  Handle UART Communication Timeout.
 8007128:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800712c:	9300      	str	r3, [sp, #0]
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	2200      	movs	r2, #0
 8007132:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007136:	6878      	ldr	r0, [r7, #4]
 8007138:	f000 f817 	bl	800716a <UART_WaitOnFlagUntilTimeout>
 800713c:	4603      	mov	r3, r0
 800713e:	2b00      	cmp	r3, #0
 8007140:	d001      	beq.n	8007146 <UART_CheckIdleState+0x6e>
  * @param huart     UART handle.
  * @param Flag      Specifies the UART flag to check
  * @param Status    Flag status (SET or RESET)
 8007142:	2303      	movs	r3, #3
 8007144:	e00d      	b.n	8007162 <UART_CheckIdleState+0x8a>
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	2220      	movs	r2, #32
 800714a:	679a      	str	r2, [r3, #120]	; 0x78
                                              uint32_t Tickstart, uint32_t Timeout)
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	2220      	movs	r2, #32
 8007150:	67da      	str	r2, [r3, #124]	; 0x7c
{
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	2200      	movs	r2, #0
 8007156:	661a      	str	r2, [r3, #96]	; 0x60
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	2200      	movs	r2, #0
 800715c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
  {
    /* Check for the Timeout */
 8007160:	2300      	movs	r3, #0
    if (Timeout != HAL_MAX_DELAY)
 8007162:	4618      	mov	r0, r3
 8007164:	3710      	adds	r7, #16
 8007166:	46bd      	mov	sp, r7
 8007168:	bd80      	pop	{r7, pc}

0800716a <UART_WaitOnFlagUntilTimeout>:
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);

        huart->gState = HAL_UART_STATE_READY;
        huart->RxState = HAL_UART_STATE_READY;
 800716a:	b580      	push	{r7, lr}
 800716c:	b09c      	sub	sp, #112	; 0x70
 800716e:	af00      	add	r7, sp, #0
 8007170:	60f8      	str	r0, [r7, #12]
 8007172:	60b9      	str	r1, [r7, #8]
 8007174:	603b      	str	r3, [r7, #0]
 8007176:	4613      	mov	r3, r2
 8007178:	71fb      	strb	r3, [r7, #7]

        __HAL_UNLOCK(huart);
 800717a:	e0a5      	b.n	80072c8 <UART_WaitOnFlagUntilTimeout+0x15e>

        return HAL_TIMEOUT;
      }
 800717c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800717e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007182:	f000 80a1 	beq.w	80072c8 <UART_WaitOnFlagUntilTimeout+0x15e>

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007186:	f7fa ffeb 	bl	8002160 <HAL_GetTick>
 800718a:	4602      	mov	r2, r0
 800718c:	683b      	ldr	r3, [r7, #0]
 800718e:	1ad3      	subs	r3, r2, r3
 8007190:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007192:	429a      	cmp	r2, r3
 8007194:	d302      	bcc.n	800719c <UART_WaitOnFlagUntilTimeout+0x32>
 8007196:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007198:	2b00      	cmp	r3, #0
 800719a:	d13e      	bne.n	800721a <UART_WaitOnFlagUntilTimeout+0xb0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80071a4:	e853 3f00 	ldrex	r3, [r3]
 80071a8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80071aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80071ac:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80071b0:	667b      	str	r3, [r7, #100]	; 0x64
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	461a      	mov	r2, r3
 80071b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80071ba:	65fb      	str	r3, [r7, #92]	; 0x5c
 80071bc:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071be:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80071c0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80071c2:	e841 2300 	strex	r3, r2, [r1]
 80071c6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80071c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d1e6      	bne.n	800719c <UART_WaitOnFlagUntilTimeout+0x32>
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	3308      	adds	r3, #8
 80071d4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80071d8:	e853 3f00 	ldrex	r3, [r3]
 80071dc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80071de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071e0:	f023 0301 	bic.w	r3, r3, #1
 80071e4:	663b      	str	r3, [r7, #96]	; 0x60
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	3308      	adds	r3, #8
 80071ec:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80071ee:	64ba      	str	r2, [r7, #72]	; 0x48
 80071f0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071f2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80071f4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80071f6:	e841 2300 	strex	r3, r2, [r1]
 80071fa:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80071fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d1e5      	bne.n	80071ce <UART_WaitOnFlagUntilTimeout+0x64>
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	2220      	movs	r2, #32
 8007206:	679a      	str	r2, [r3, #120]	; 0x78
#endif
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	2220      	movs	r2, #32
 800720c:	67da      	str	r2, [r3, #124]	; 0x7c
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);

 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	2200      	movs	r2, #0
 8007212:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
          huart->gState = HAL_UART_STATE_READY;
          huart->RxState = HAL_UART_STATE_READY;
 8007216:	2303      	movs	r3, #3
 8007218:	e067      	b.n	80072ea <UART_WaitOnFlagUntilTimeout+0x180>
          huart->ErrorCode = HAL_UART_ERROR_RTO;

          /* Process Unlocked */
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	f003 0304 	and.w	r3, r3, #4
 8007224:	2b00      	cmp	r3, #0
 8007226:	d04f      	beq.n	80072c8 <UART_WaitOnFlagUntilTimeout+0x15e>
          __HAL_UNLOCK(huart);

 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	69db      	ldr	r3, [r3, #28]
 800722e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007232:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007236:	d147      	bne.n	80072c8 <UART_WaitOnFlagUntilTimeout+0x15e>
          return HAL_TIMEOUT;
        }
      }
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007240:	621a      	str	r2, [r3, #32]
  return HAL_OK;
}

/**
  * @brief  Start Receive operation in interrupt mode.
  * @note   This function could be called by all HAL UART API providing reception in Interrupt mode.
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007248:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800724a:	e853 3f00 	ldrex	r3, [r3]
 800724e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007252:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007256:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	461a      	mov	r2, r3
 800725e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007260:	637b      	str	r3, [r7, #52]	; 0x34
 8007262:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007264:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007266:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007268:	e841 2300 	strex	r3, r2, [r1]
 800726c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800726e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007270:	2b00      	cmp	r3, #0
 8007272:	d1e6      	bne.n	8007242 <UART_WaitOnFlagUntilTimeout+0xd8>
  * @note   When calling this function, parameters validity is considered as already checked,
  *         i.e. Rx State, buffer address, ...
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	3308      	adds	r3, #8
 800727a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800727c:	697b      	ldr	r3, [r7, #20]
 800727e:	e853 3f00 	ldrex	r3, [r3]
 8007282:	613b      	str	r3, [r7, #16]
   return(result);
 8007284:	693b      	ldr	r3, [r7, #16]
 8007286:	f023 0301 	bic.w	r3, r3, #1
 800728a:	66bb      	str	r3, [r7, #104]	; 0x68
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	3308      	adds	r3, #8
 8007292:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007294:	623a      	str	r2, [r7, #32]
 8007296:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007298:	69f9      	ldr	r1, [r7, #28]
 800729a:	6a3a      	ldr	r2, [r7, #32]
 800729c:	e841 2300 	strex	r3, r2, [r1]
 80072a0:	61bb      	str	r3, [r7, #24]
   return(result);
 80072a2:	69bb      	ldr	r3, [r7, #24]
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d1e5      	bne.n	8007274 <UART_WaitOnFlagUntilTimeout+0x10a>
  *         UART Handle is assumed as Locked.
  * @param  huart UART handle.
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	2220      	movs	r2, #32
 80072ac:	679a      	str	r2, [r3, #120]	; 0x78
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	2220      	movs	r2, #32
 80072b2:	67da      	str	r2, [r3, #124]	; 0x7c
  * @param  Size  Amount of data elements (u8 or u16) to be received.
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	2220      	movs	r2, #32
 80072b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	2200      	movs	r2, #0
 80072c0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
{
  huart->pRxBuffPtr  = pData;
 80072c4:	2303      	movs	r3, #3
 80072c6:	e010      	b.n	80072ea <UART_WaitOnFlagUntilTimeout+0x180>
        __HAL_UNLOCK(huart);
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	69da      	ldr	r2, [r3, #28]
 80072ce:	68bb      	ldr	r3, [r7, #8]
 80072d0:	4013      	ands	r3, r2
 80072d2:	68ba      	ldr	r2, [r7, #8]
 80072d4:	429a      	cmp	r2, r3
 80072d6:	bf0c      	ite	eq
 80072d8:	2301      	moveq	r3, #1
 80072da:	2300      	movne	r3, #0
 80072dc:	b2db      	uxtb	r3, r3
 80072de:	461a      	mov	r2, r3
 80072e0:	79fb      	ldrb	r3, [r7, #7]
 80072e2:	429a      	cmp	r2, r3
 80072e4:	f43f af4a 	beq.w	800717c <UART_WaitOnFlagUntilTimeout+0x12>
  huart->RxXferSize  = Size;
  huart->RxXferCount = Size;
  huart->RxISR       = NULL;

  /* Computation of UART mask to apply to RDR register */
 80072e8:	2300      	movs	r3, #0
  UART_MASK_COMPUTATION(huart);
 80072ea:	4618      	mov	r0, r3
 80072ec:	3770      	adds	r7, #112	; 0x70
 80072ee:	46bd      	mov	sp, r7
 80072f0:	bd80      	pop	{r7, pc}
	...

080072f4 <UART_Start_Receive_IT>:
  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
    {
 80072f4:	b480      	push	{r7}
 80072f6:	b097      	sub	sp, #92	; 0x5c
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	60f8      	str	r0, [r7, #12]
 80072fc:	60b9      	str	r1, [r7, #8]
 80072fe:	4613      	mov	r3, r2
 8007300:	80fb      	strh	r3, [r7, #6]
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	68ba      	ldr	r2, [r7, #8]
 8007306:	655a      	str	r2, [r3, #84]	; 0x54
    }
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	88fa      	ldrh	r2, [r7, #6]
 800730c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    else
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	88fa      	ldrh	r2, [r7, #6]
 8007314:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    {
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	2200      	movs	r2, #0
 800731c:	665a      	str	r2, [r3, #100]	; 0x64
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
    }

 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	689b      	ldr	r3, [r3, #8]
 8007322:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007326:	d10e      	bne.n	8007346 <UART_Start_Receive_IT+0x52>
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	691b      	ldr	r3, [r3, #16]
 800732c:	2b00      	cmp	r3, #0
 800732e:	d105      	bne.n	800733c <UART_Start_Receive_IT+0x48>
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	f240 12ff 	movw	r2, #511	; 0x1ff
 8007336:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800733a:	e02d      	b.n	8007398 <UART_Start_Receive_IT+0xa4>
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	22ff      	movs	r2, #255	; 0xff
 8007340:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007344:	e028      	b.n	8007398 <UART_Start_Receive_IT+0xa4>
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	689b      	ldr	r3, [r3, #8]
 800734a:	2b00      	cmp	r3, #0
 800734c:	d10d      	bne.n	800736a <UART_Start_Receive_IT+0x76>
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	691b      	ldr	r3, [r3, #16]
 8007352:	2b00      	cmp	r3, #0
 8007354:	d104      	bne.n	8007360 <UART_Start_Receive_IT+0x6c>
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	22ff      	movs	r2, #255	; 0xff
 800735a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800735e:	e01b      	b.n	8007398 <UART_Start_Receive_IT+0xa4>
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	227f      	movs	r2, #127	; 0x7f
 8007364:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007368:	e016      	b.n	8007398 <UART_Start_Receive_IT+0xa4>
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	689b      	ldr	r3, [r3, #8]
 800736e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007372:	d10d      	bne.n	8007390 <UART_Start_Receive_IT+0x9c>
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	691b      	ldr	r3, [r3, #16]
 8007378:	2b00      	cmp	r3, #0
 800737a:	d104      	bne.n	8007386 <UART_Start_Receive_IT+0x92>
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	227f      	movs	r2, #127	; 0x7f
 8007380:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007384:	e008      	b.n	8007398 <UART_Start_Receive_IT+0xa4>
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	223f      	movs	r2, #63	; 0x3f
 800738a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800738e:	e003      	b.n	8007398 <UART_Start_Receive_IT+0xa4>
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	2200      	movs	r2, #0
 8007394:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    __HAL_UNLOCK(huart);

 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	2200      	movs	r2, #0
 800739c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	2222      	movs	r2, #34	; 0x22
 80073a4:	67da      	str	r2, [r3, #124]	; 0x7c
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
    SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
  }
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	3308      	adds	r3, #8
 80073ac:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80073b0:	e853 3f00 	ldrex	r3, [r3]
 80073b4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80073b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073b8:	f043 0301 	orr.w	r3, r3, #1
 80073bc:	657b      	str	r3, [r7, #84]	; 0x54
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	3308      	adds	r3, #8
 80073c4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80073c6:	64ba      	str	r2, [r7, #72]	; 0x48
 80073c8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073ca:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80073cc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80073ce:	e841 2300 	strex	r3, r2, [r1]
 80073d2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80073d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d1e5      	bne.n	80073a6 <UART_Start_Receive_IT+0xb2>
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
  huart->pRxBuffPtr = pData;
  huart->RxXferSize = Size;
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	689b      	ldr	r3, [r3, #8]
 80073de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80073e2:	d107      	bne.n	80073f4 <UART_Start_Receive_IT+0x100>
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	691b      	ldr	r3, [r3, #16]
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d103      	bne.n	80073f4 <UART_Start_Receive_IT+0x100>

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	4a24      	ldr	r2, [pc, #144]	; (8007480 <UART_Start_Receive_IT+0x18c>)
 80073f0:	665a      	str	r2, [r3, #100]	; 0x64
 80073f2:	e002      	b.n	80073fa <UART_Start_Receive_IT+0x106>
  huart->RxState = HAL_UART_STATE_BUSY_RX;

  if (huart->hdmarx != NULL)
  {
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	4a23      	ldr	r2, [pc, #140]	; (8007484 <UART_Start_Receive_IT+0x190>)
 80073f8:	665a      	str	r2, [r3, #100]	; 0x64
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;

 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	2200      	movs	r2, #0
 80073fe:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;

 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	691b      	ldr	r3, [r3, #16]
 8007406:	2b00      	cmp	r3, #0
 8007408:	d019      	beq.n	800743e <UART_Start_Receive_IT+0x14a>
    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007410:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007412:	e853 3f00 	ldrex	r3, [r3]
 8007416:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800741a:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800741e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	461a      	mov	r2, r3
 8007426:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007428:	637b      	str	r3, [r7, #52]	; 0x34
 800742a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800742c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800742e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007430:	e841 2300 	strex	r3, r2, [r1]
 8007434:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007436:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007438:	2b00      	cmp	r3, #0
 800743a:	d1e6      	bne.n	800740a <UART_Start_Receive_IT+0x116>
 800743c:	e018      	b.n	8007470 <UART_Start_Receive_IT+0x17c>

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;

 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007444:	697b      	ldr	r3, [r7, #20]
 8007446:	e853 3f00 	ldrex	r3, [r3]
 800744a:	613b      	str	r3, [r7, #16]
   return(result);
 800744c:	693b      	ldr	r3, [r7, #16]
 800744e:	f043 0320 	orr.w	r3, r3, #32
 8007452:	653b      	str	r3, [r7, #80]	; 0x50
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	461a      	mov	r2, r3
 800745a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800745c:	623b      	str	r3, [r7, #32]
 800745e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007460:	69f9      	ldr	r1, [r7, #28]
 8007462:	6a3a      	ldr	r2, [r7, #32]
 8007464:	e841 2300 	strex	r3, r2, [r1]
 8007468:	61bb      	str	r3, [r7, #24]
   return(result);
 800746a:	69bb      	ldr	r3, [r7, #24]
 800746c:	2b00      	cmp	r3, #0
 800746e:	d1e6      	bne.n	800743e <UART_Start_Receive_IT+0x14a>
    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
    {
 8007470:	2300      	movs	r3, #0
      /* Set error code to DMA */
 8007472:	4618      	mov	r0, r3
 8007474:	375c      	adds	r7, #92	; 0x5c
 8007476:	46bd      	mov	sp, r7
 8007478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800747c:	4770      	bx	lr
 800747e:	bf00      	nop
 8007480:	0800772f 	.word	0x0800772f
 8007484:	080075cf 	.word	0x080075cf

08007488 <UART_EndRxTransfer>:
  {
    huart->TxXferCount = 0U;

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007488:	b480      	push	{r7}
 800748a:	b095      	sub	sp, #84	; 0x54
 800748c:	af00      	add	r7, sp, #0
 800748e:	6078      	str	r0, [r7, #4]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
  }
  /* DMA Circular mode */
  else
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007496:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007498:	e853 3f00 	ldrex	r3, [r3]
 800749c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800749e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074a0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80074a4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	461a      	mov	r2, r3
 80074ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80074ae:	643b      	str	r3, [r7, #64]	; 0x40
 80074b0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074b2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80074b4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80074b6:	e841 2300 	strex	r3, r2, [r1]
 80074ba:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80074bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d1e6      	bne.n	8007490 <UART_EndRxTransfer+0x8>
  {
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	3308      	adds	r3, #8
 80074c8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074ca:	6a3b      	ldr	r3, [r7, #32]
 80074cc:	e853 3f00 	ldrex	r3, [r3]
 80074d0:	61fb      	str	r3, [r7, #28]
   return(result);
 80074d2:	69fb      	ldr	r3, [r7, #28]
 80074d4:	f023 0301 	bic.w	r3, r3, #1
 80074d8:	64bb      	str	r3, [r7, #72]	; 0x48
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	3308      	adds	r3, #8
 80074e0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80074e2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80074e4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074e6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80074e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80074ea:	e841 2300 	strex	r3, r2, [r1]
 80074ee:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80074f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d1e5      	bne.n	80074c2 <UART_EndRxTransfer+0x3a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Tx complete callback*/
    huart->TxCpltCallback(huart);
#else
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80074fa:	2b01      	cmp	r3, #1
 80074fc:	d118      	bne.n	8007530 <UART_EndRxTransfer+0xa8>
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	e853 3f00 	ldrex	r3, [r3]
 800750a:	60bb      	str	r3, [r7, #8]
   return(result);
 800750c:	68bb      	ldr	r3, [r7, #8]
 800750e:	f023 0310 	bic.w	r3, r3, #16
 8007512:	647b      	str	r3, [r7, #68]	; 0x44
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	461a      	mov	r2, r3
 800751a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800751c:	61bb      	str	r3, [r7, #24]
 800751e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007520:	6979      	ldr	r1, [r7, #20]
 8007522:	69ba      	ldr	r2, [r7, #24]
 8007524:	e841 2300 	strex	r3, r2, [r1]
 8007528:	613b      	str	r3, [r7, #16]
   return(result);
 800752a:	693b      	ldr	r3, [r7, #16]
 800752c:	2b00      	cmp	r3, #0
 800752e:	d1e6      	bne.n	80074fe <UART_EndRxTransfer+0x76>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}

 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	2220      	movs	r2, #32
 8007534:	67da      	str	r2, [r3, #124]	; 0x7c
/**
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	2200      	movs	r2, #0
 800753a:	661a      	str	r2, [r3, #96]	; 0x60
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	2200      	movs	r2, #0
 8007540:	665a      	str	r2, [r3, #100]	; 0x64
  */
 8007542:	bf00      	nop
 8007544:	3754      	adds	r7, #84	; 0x54
 8007546:	46bd      	mov	sp, r7
 8007548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800754c:	4770      	bx	lr

0800754e <UART_DMAAbortOnError>:

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0U;
  huart->RxXferCount = 0U;

  /* Reset errorCode */
 800754e:	b580      	push	{r7, lr}
 8007550:	b084      	sub	sp, #16
 8007552:	af00      	add	r7, sp, #0
 8007554:	6078      	str	r0, [r7, #4]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800755a:	60fb      	str	r3, [r7, #12]

 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	2200      	movs	r2, #0
 8007560:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  /* Clear the Error flags in the ICR register */
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	2200      	movs	r2, #0
 8007568:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

#if defined(USART_CR1_FIFOEN)
  /* Flush the whole TX FIFO (if needed) */
  if (huart->FifoMode == UART_FIFOMODE_ENABLE)
  {
    __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
 800756c:	68f8      	ldr	r0, [r7, #12]
 800756e:	f7ff fa43 	bl	80069f8 <HAL_UART_ErrorCallback>
  }
#endif /* USART_CR1_FIFOEN */
 8007572:	bf00      	nop
 8007574:	3710      	adds	r7, #16
 8007576:	46bd      	mov	sp, r7
 8007578:	bd80      	pop	{r7, pc}

0800757a <UART_EndTransmit_IT>:

    if (huart->RxXferCount == 0U)
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800757a:	b580      	push	{r7, lr}
 800757c:	b088      	sub	sp, #32
 800757e:	af00      	add	r7, sp, #0
 8007580:	6078      	str	r0, [r7, #4]
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	e853 3f00 	ldrex	r3, [r3]
 800758e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007590:	68bb      	ldr	r3, [r7, #8]
 8007592:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007596:	61fb      	str	r3, [r7, #28]
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	461a      	mov	r2, r3
 800759e:	69fb      	ldr	r3, [r7, #28]
 80075a0:	61bb      	str	r3, [r7, #24]
 80075a2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075a4:	6979      	ldr	r1, [r7, #20]
 80075a6:	69ba      	ldr	r2, [r7, #24]
 80075a8:	e841 2300 	strex	r3, r2, [r1]
 80075ac:	613b      	str	r3, [r7, #16]
   return(result);
 80075ae:	693b      	ldr	r3, [r7, #16]
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d1e6      	bne.n	8007582 <UART_EndTransmit_IT+0x8>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	2220      	movs	r2, #32
 80075b8:	679a      	str	r2, [r3, #120]	; 0x78
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);

      /* Rx process is completed, restore huart->RxState to Ready */
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	2200      	movs	r2, #0
 80075be:	669a      	str	r2, [r3, #104]	; 0x68

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
 80075c0:	6878      	ldr	r0, [r7, #4]
 80075c2:	f7ff fa0f 	bl	80069e4 <HAL_UART_TxCpltCallback>
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
      {
 80075c6:	bf00      	nop
 80075c8:	3720      	adds	r7, #32
 80075ca:	46bd      	mov	sp, r7
 80075cc:	bd80      	pop	{r7, pc}

080075ce <UART_RxISR_8BIT>:

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
 80075ce:	b580      	push	{r7, lr}
 80075d0:	b096      	sub	sp, #88	; 0x58
 80075d2:	af00      	add	r7, sp, #0
 80075d4:	6078      	str	r0, [r7, #4]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80075dc:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
#endif
      }
      else
      {
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80075e4:	2b22      	cmp	r3, #34	; 0x22
 80075e6:	f040 8094 	bne.w	8007712 <UART_RxISR_8BIT+0x144>
        /* Standard reception API called */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80075f0:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
        /*Call registered Rx complete callback*/
 80075f4:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80075f8:	b2d9      	uxtb	r1, r3
 80075fa:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80075fe:	b2da      	uxtb	r2, r3
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007604:	400a      	ands	r2, r1
 8007606:	b2d2      	uxtb	r2, r2
 8007608:	701a      	strb	r2, [r3, #0]
        huart->RxCpltCallback(huart);
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800760e:	1c5a      	adds	r2, r3, #1
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	655a      	str	r2, [r3, #84]	; 0x54
#else
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800761a:	b29b      	uxth	r3, r3
 800761c:	3b01      	subs	r3, #1
 800761e:	b29a      	uxth	r2, r3
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800762c:	b29b      	uxth	r3, r3
 800762e:	2b00      	cmp	r3, #0
 8007630:	d179      	bne.n	8007726 <UART_RxISR_8BIT+0x158>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
    }
  }
  else
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007638:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800763a:	e853 3f00 	ldrex	r3, [r3]
 800763e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007640:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007642:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007646:	653b      	str	r3, [r7, #80]	; 0x50
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	461a      	mov	r2, r3
 800764e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007650:	647b      	str	r3, [r7, #68]	; 0x44
 8007652:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007654:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007656:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007658:	e841 2300 	strex	r3, r2, [r1]
 800765c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800765e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007660:	2b00      	cmp	r3, #0
 8007662:	d1e6      	bne.n	8007632 <UART_RxISR_8BIT+0x64>
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	3308      	adds	r3, #8
 800766a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800766c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800766e:	e853 3f00 	ldrex	r3, [r3]
 8007672:	623b      	str	r3, [r7, #32]
   return(result);
 8007674:	6a3b      	ldr	r3, [r7, #32]
 8007676:	f023 0301 	bic.w	r3, r3, #1
 800767a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	3308      	adds	r3, #8
 8007682:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007684:	633a      	str	r2, [r7, #48]	; 0x30
 8007686:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007688:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800768a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800768c:	e841 2300 	strex	r3, r2, [r1]
 8007690:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007692:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007694:	2b00      	cmp	r3, #0
 8007696:	d1e5      	bne.n	8007664 <UART_RxISR_8BIT+0x96>
}

/**
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	2220      	movs	r2, #32
 800769c:	67da      	str	r2, [r3, #124]	; 0x7c
  * @brief RX interrupt handler for 9 bits data word length .
  * @note   Function is called under interruption only, once
  *         interruptions have been enabled by HAL_UART_Receive_IT()
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	2200      	movs	r2, #0
 80076a2:	665a      	str	r2, [r3, #100]	; 0x64
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80076a8:	2b01      	cmp	r3, #1
 80076aa:	d12e      	bne.n	800770a <UART_RxISR_8BIT+0x13c>
{
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	2200      	movs	r2, #0
 80076b0:	661a      	str	r2, [r3, #96]	; 0x60
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076b8:	693b      	ldr	r3, [r7, #16]
 80076ba:	e853 3f00 	ldrex	r3, [r3]
 80076be:	60fb      	str	r3, [r7, #12]
   return(result);
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	f023 0310 	bic.w	r3, r3, #16
 80076c6:	64bb      	str	r3, [r7, #72]	; 0x48
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	461a      	mov	r2, r3
 80076ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80076d0:	61fb      	str	r3, [r7, #28]
 80076d2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076d4:	69b9      	ldr	r1, [r7, #24]
 80076d6:	69fa      	ldr	r2, [r7, #28]
 80076d8:	e841 2300 	strex	r3, r2, [r1]
 80076dc:	617b      	str	r3, [r7, #20]
   return(result);
 80076de:	697b      	ldr	r3, [r7, #20]
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d1e6      	bne.n	80076b2 <UART_RxISR_8BIT+0xe4>
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
  {
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	69db      	ldr	r3, [r3, #28]
 80076ea:	f003 0310 	and.w	r3, r3, #16
 80076ee:	2b10      	cmp	r3, #16
 80076f0:	d103      	bne.n	80076fa <UART_RxISR_8BIT+0x12c>
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
    tmp = (uint16_t *) huart->pRxBuffPtr ;
    *tmp = (uint16_t)(uhdata & uhMask);
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	2210      	movs	r2, #16
 80076f8:	621a      	str	r2, [r3, #32]
    huart->RxXferCount--;

    if (huart->RxXferCount == 0U)
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007700:	4619      	mov	r1, r3
 8007702:	6878      	ldr	r0, [r7, #4]
 8007704:	f7ff f982 	bl	8006a0c <HAL_UARTEx_RxEventCallback>
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);

 8007708:	e00d      	b.n	8007726 <UART_RxISR_8BIT+0x158>

 800770a:	6878      	ldr	r0, [r7, #4]
 800770c:	f7f9 fc76 	bl	8000ffc <HAL_UART_RxCpltCallback>

 8007710:	e009      	b.n	8007726 <UART_RxISR_8BIT+0x158>
        /* Disable IDLE interrupt */
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	8b1b      	ldrh	r3, [r3, #24]
 8007718:	b29a      	uxth	r2, r3
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	f042 0208 	orr.w	r2, r2, #8
 8007722:	b292      	uxth	r2, r2
 8007724:	831a      	strh	r2, [r3, #24]

 8007726:	bf00      	nop
 8007728:	3758      	adds	r7, #88	; 0x58
 800772a:	46bd      	mov	sp, r7
 800772c:	bd80      	pop	{r7, pc}

0800772e <UART_RxISR_16BIT>:
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif
      }
      else
      {
 800772e:	b580      	push	{r7, lr}
 8007730:	b096      	sub	sp, #88	; 0x58
 8007732:	af00      	add	r7, sp, #0
 8007734:	6078      	str	r0, [r7, #4]
        /* Standard reception API called */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800773c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007744:	2b22      	cmp	r3, #34	; 0x22
 8007746:	f040 8094 	bne.w	8007872 <UART_RxISR_16BIT+0x144>
        HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007750:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
      }
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007758:	653b      	str	r3, [r7, #80]	; 0x50
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800775a:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800775e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8007762:	4013      	ands	r3, r2
 8007764:	b29a      	uxth	r2, r3
 8007766:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007768:	801a      	strh	r2, [r3, #0]
    }
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800776e:	1c9a      	adds	r2, r3, #2
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	655a      	str	r2, [r3, #84]	; 0x54
  }
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800777a:	b29b      	uxth	r3, r3
 800777c:	3b01      	subs	r3, #1
 800777e:	b29a      	uxth	r2, r3
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  else
  {
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800778c:	b29b      	uxth	r3, r3
 800778e:	2b00      	cmp	r3, #0
 8007790:	d179      	bne.n	8007886 <UART_RxISR_16BIT+0x158>
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}

#if defined(USART_CR1_FIFOEN)
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007798:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800779a:	e853 3f00 	ldrex	r3, [r3]
 800779e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80077a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077a2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80077a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	461a      	mov	r2, r3
 80077ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80077b0:	643b      	str	r3, [r7, #64]	; 0x40
 80077b2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077b4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80077b6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80077b8:	e841 2300 	strex	r3, r2, [r1]
 80077bc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80077be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d1e6      	bne.n	8007792 <UART_RxISR_16BIT+0x64>
/**
  * @brief RX interrupt handler for 7 or 8  bits data word length and FIFO mode is enabled.
  * @note   Function is called under interruption only, once
  *         interruptions have been enabled by HAL_UART_Receive_IT()
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	3308      	adds	r3, #8
 80077ca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077cc:	6a3b      	ldr	r3, [r7, #32]
 80077ce:	e853 3f00 	ldrex	r3, [r3]
 80077d2:	61fb      	str	r3, [r7, #28]
   return(result);
 80077d4:	69fb      	ldr	r3, [r7, #28]
 80077d6:	f023 0301 	bic.w	r3, r3, #1
 80077da:	64bb      	str	r3, [r7, #72]	; 0x48
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	3308      	adds	r3, #8
 80077e2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80077e4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80077e6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077e8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80077ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80077ec:	e841 2300 	strex	r3, r2, [r1]
 80077f0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80077f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d1e5      	bne.n	80077c4 <UART_RxISR_16BIT+0x96>
  * @param huart UART handle.
  * @retval None
  */
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	2220      	movs	r2, #32
 80077fc:	67da      	str	r2, [r3, #124]	; 0x7c
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
  uint16_t  uhMask = huart->Mask;
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	2200      	movs	r2, #0
 8007802:	665a      	str	r2, [r3, #100]	; 0x64
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007808:	2b01      	cmp	r3, #1
 800780a:	d12e      	bne.n	800786a <UART_RxISR_16BIT+0x13c>
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);

 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	2200      	movs	r2, #0
 8007810:	661a      	str	r2, [r3, #96]	; 0x60
  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
  {
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	e853 3f00 	ldrex	r3, [r3]
 800781e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007820:	68bb      	ldr	r3, [r7, #8]
 8007822:	f023 0310 	bic.w	r3, r3, #16
 8007826:	647b      	str	r3, [r7, #68]	; 0x44
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	461a      	mov	r2, r3
 800782e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007830:	61bb      	str	r3, [r7, #24]
 8007832:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007834:	6979      	ldr	r1, [r7, #20]
 8007836:	69ba      	ldr	r2, [r7, #24]
 8007838:	e841 2300 	strex	r3, r2, [r1]
 800783c:	613b      	str	r3, [r7, #16]
   return(result);
 800783e:	693b      	ldr	r3, [r7, #16]
 8007840:	2b00      	cmp	r3, #0
 8007842:	d1e6      	bne.n	8007812 <UART_RxISR_16BIT+0xe4>
    nb_rx_data = huart->NbRxDataToProcess;
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	69db      	ldr	r3, [r3, #28]
 800784a:	f003 0310 	and.w	r3, r3, #16
 800784e:	2b10      	cmp	r3, #16
 8007850:	d103      	bne.n	800785a <UART_RxISR_16BIT+0x12c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	2210      	movs	r2, #16
 8007858:	621a      	str	r2, [r3, #32]
      huart->RxXferCount--;
      isrflags = READ_REG(huart->Instance->ISR);

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
      {
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007860:	4619      	mov	r1, r3
 8007862:	6878      	ldr	r0, [r7, #4]
 8007864:	f7ff f8d2 	bl	8006a0c <HAL_UARTEx_RxEventCallback>

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);

 8007868:	e00d      	b.n	8007886 <UART_RxISR_16BIT+0x158>
        {
 800786a:	6878      	ldr	r0, [r7, #4]
 800786c:	f7f9 fbc6 	bl	8000ffc <HAL_UART_RxCpltCallback>

 8007870:	e009      	b.n	8007886 <UART_RxISR_16BIT+0x158>
        {
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	8b1b      	ldrh	r3, [r3, #24]
 8007878:	b29a      	uxth	r2, r3
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	f042 0208 	orr.w	r2, r2, #8
 8007882:	b292      	uxth	r2, r2
 8007884:	831a      	strh	r2, [r3, #24]

 8007886:	bf00      	nop
 8007888:	3758      	adds	r7, #88	; 0x58
 800788a:	46bd      	mov	sp, r7
 800788c:	bd80      	pop	{r7, pc}

0800788e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800788e:	b480      	push	{r7}
 8007890:	b083      	sub	sp, #12
 8007892:	af00      	add	r7, sp, #0
 8007894:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007896:	bf00      	nop
 8007898:	370c      	adds	r7, #12
 800789a:	46bd      	mov	sp, r7
 800789c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a0:	4770      	bx	lr

080078a2 <USB_CoreInit>:
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
  HAL_StatusTypeDef ret;
 80078a2:	b084      	sub	sp, #16
 80078a4:	b580      	push	{r7, lr}
 80078a6:	b084      	sub	sp, #16
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	6078      	str	r0, [r7, #4]
 80078ac:	f107 001c 	add.w	r0, r7, #28
 80078b0:	e880 000e 	stmia.w	r0, {r1, r2, r3}


  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	68db      	ldr	r3, [r3, #12]
 80078b8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 80078c0:	6878      	ldr	r0, [r7, #4]
 80078c2:	f000 fa6f 	bl	8007da4 <USB_CoreReset>
 80078c6:	4603      	mov	r3, r0
 80078c8:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 80078ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d106      	bne.n	80078de <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078d4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	639a      	str	r2, [r3, #56]	; 0x38
 80078dc:	e005      	b.n	80078ea <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078e2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 80078ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80078ec:	4618      	mov	r0, r3
 80078ee:	3710      	adds	r7, #16
 80078f0:	46bd      	mov	sp, r7
 80078f2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80078f6:	b004      	add	sp, #16
 80078f8:	4770      	bx	lr

080078fa <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80078fa:	b480      	push	{r7}
 80078fc:	b083      	sub	sp, #12
 80078fe:	af00      	add	r7, sp, #0
 8007900:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	689b      	ldr	r3, [r3, #8]
 8007906:	f023 0201 	bic.w	r2, r3, #1
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800790e:	2300      	movs	r3, #0
}
 8007910:	4618      	mov	r0, r3
 8007912:	370c      	adds	r7, #12
 8007914:	46bd      	mov	sp, r7
 8007916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800791a:	4770      	bx	lr

0800791c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 800791c:	b580      	push	{r7, lr}
 800791e:	b084      	sub	sp, #16
 8007920:	af00      	add	r7, sp, #0
 8007922:	6078      	str	r0, [r7, #4]
 8007924:	460b      	mov	r3, r1
 8007926:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007928:	2300      	movs	r3, #0
 800792a:	60fb      	str	r3, [r7, #12]

  if (mode == USB_HOST_MODE)
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	68db      	ldr	r3, [r3, #12]
 8007930:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	60da      	str	r2, [r3, #12]
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007938:	78fb      	ldrb	r3, [r7, #3]
 800793a:	2b01      	cmp	r3, #1
 800793c:	d115      	bne.n	800796a <USB_SetCurrentMode+0x4e>
  }
  else if (mode == USB_DEVICE_MODE)
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	68db      	ldr	r3, [r3, #12]
 8007942:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	60da      	str	r2, [r3, #12]
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
  }
  else
 800794a:	2001      	movs	r0, #1
 800794c:	f7fa fc14 	bl	8002178 <HAL_Delay>
  {
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	3301      	adds	r3, #1
 8007954:	60fb      	str	r3, [r7, #12]
    return HAL_ERROR;
 8007956:	6878      	ldr	r0, [r7, #4]
 8007958:	f000 fa16 	bl	8007d88 <USB_GetMode>
 800795c:	4603      	mov	r3, r0
 800795e:	2b01      	cmp	r3, #1
 8007960:	d01e      	beq.n	80079a0 <USB_SetCurrentMode+0x84>
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	2b31      	cmp	r3, #49	; 0x31
 8007966:	d9f0      	bls.n	800794a <USB_SetCurrentMode+0x2e>
 8007968:	e01a      	b.n	80079a0 <USB_SetCurrentMode+0x84>
  }
  HAL_Delay(50U);
 800796a:	78fb      	ldrb	r3, [r7, #3]
 800796c:	2b00      	cmp	r3, #0
 800796e:	d115      	bne.n	800799c <USB_SetCurrentMode+0x80>

  return HAL_OK;
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	68db      	ldr	r3, [r3, #12]
 8007974:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	60da      	str	r2, [r3, #12]
}

/**
  * @brief  USB_DevInit Initializes the USB_OTG controller registers
 800797c:	2001      	movs	r0, #1
 800797e:	f7fa fbfb 	bl	8002178 <HAL_Delay>
  *         for device mode
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	3301      	adds	r3, #1
 8007986:	60fb      	str	r3, [r7, #12]
  * @param  USBx  Selected device
 8007988:	6878      	ldr	r0, [r7, #4]
 800798a:	f000 f9fd 	bl	8007d88 <USB_GetMode>
 800798e:	4603      	mov	r3, r0
 8007990:	2b00      	cmp	r3, #0
 8007992:	d005      	beq.n	80079a0 <USB_SetCurrentMode+0x84>
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	2b31      	cmp	r3, #49	; 0x31
 8007998:	d9f0      	bls.n	800797c <USB_SetCurrentMode+0x60>
 800799a:	e001      	b.n	80079a0 <USB_SetCurrentMode+0x84>
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
 800799c:	2301      	movs	r3, #1
 800799e:	e005      	b.n	80079ac <USB_SetCurrentMode+0x90>
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
  HAL_StatusTypeDef ret = HAL_OK;
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	2b32      	cmp	r3, #50	; 0x32
 80079a4:	d101      	bne.n	80079aa <USB_SetCurrentMode+0x8e>
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t i;
 80079a6:	2301      	movs	r3, #1
 80079a8:	e000      	b.n	80079ac <USB_SetCurrentMode+0x90>

  for (i = 0U; i < 15U; i++)
  {
 80079aa:	2300      	movs	r3, #0
    USBx->DIEPTXF[i] = 0U;
 80079ac:	4618      	mov	r0, r3
 80079ae:	3710      	adds	r7, #16
 80079b0:	46bd      	mov	sp, r7
 80079b2:	bd80      	pop	{r7, pc}

080079b4 <USB_DevInit>:
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;

    /* B-peripheral session valid override enable */
 80079b4:	b084      	sub	sp, #16
 80079b6:	b580      	push	{r7, lr}
 80079b8:	b086      	sub	sp, #24
 80079ba:	af00      	add	r7, sp, #0
 80079bc:	6078      	str	r0, [r7, #4]
 80079be:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80079c2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80079c6:	2300      	movs	r3, #0
 80079c8:	75fb      	strb	r3, [r7, #23]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	60fb      	str	r3, [r7, #12]
  }
  else
  {
 80079ce:	2300      	movs	r3, #0
 80079d0:	613b      	str	r3, [r7, #16]
 80079d2:	e009      	b.n	80079e8 <USB_DevInit+0x34>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80079d4:	687a      	ldr	r2, [r7, #4]
 80079d6:	693b      	ldr	r3, [r7, #16]
 80079d8:	3340      	adds	r3, #64	; 0x40
 80079da:	009b      	lsls	r3, r3, #2
 80079dc:	4413      	add	r3, r2
 80079de:	2200      	movs	r2, #0
 80079e0:	605a      	str	r2, [r3, #4]
  {
 80079e2:	693b      	ldr	r3, [r7, #16]
 80079e4:	3301      	adds	r3, #1
 80079e6:	613b      	str	r3, [r7, #16]
 80079e8:	693b      	ldr	r3, [r7, #16]
 80079ea:	2b0e      	cmp	r3, #14
 80079ec:	d9f2      	bls.n	80079d4 <USB_DevInit+0x20>
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80079ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d11c      	bne.n	8007a2e <USB_DevInit+0x7a>

  /* Device mode configuration */
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079fa:	685b      	ldr	r3, [r3, #4]
 80079fc:	68fa      	ldr	r2, [r7, #12]
 80079fe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007a02:	f043 0302 	orr.w	r3, r3, #2
 8007a06:	6053      	str	r3, [r2, #4]
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;

  /* Set Core speed to Full speed mode */
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a0c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	639a      	str	r2, [r3, #56]	; 0x38
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);

  /* Flush the FIFOs */
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	601a      	str	r2, [r3, #0]
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	601a      	str	r2, [r3, #0]
 8007a2c:	e005      	b.n	8007a3a <USB_DevInit+0x86>
  {
    ret = HAL_ERROR;
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a32:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	639a      	str	r2, [r3, #56]	; 0x38
  {
    ret = HAL_ERROR;
  }

 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007a40:	461a      	mov	r2, r3
 8007a42:	2300      	movs	r3, #0
 8007a44:	6013      	str	r3, [r2, #0]
  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
  USBx_DEVICE->DOEPMSK = 0U;
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a4c:	4619      	mov	r1, r3
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a54:	461a      	mov	r2, r3
 8007a56:	680b      	ldr	r3, [r1, #0]
 8007a58:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DAINTMSK = 0U;

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007a5a:	2103      	movs	r1, #3
 8007a5c:	6878      	ldr	r0, [r7, #4]
 8007a5e:	f000 f959 	bl	8007d14 <USB_SetDevSpeed>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
    {
 8007a62:	2110      	movs	r1, #16
 8007a64:	6878      	ldr	r0, [r7, #4]
 8007a66:	f000 f8f1 	bl	8007c4c <USB_FlushTxFifo>
 8007a6a:	4603      	mov	r3, r0
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d001      	beq.n	8007a74 <USB_DevInit+0xc0>
      if (i == 0U)
      {
 8007a70:	2301      	movs	r3, #1
 8007a72:	75fb      	strb	r3, [r7, #23]
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
      }
      else
 8007a74:	6878      	ldr	r0, [r7, #4]
 8007a76:	f000 f91d 	bl	8007cb4 <USB_FlushRxFifo>
 8007a7a:	4603      	mov	r3, r0
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d001      	beq.n	8007a84 <USB_DevInit+0xd0>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007a80:	2301      	movs	r3, #1
 8007a82:	75fb      	strb	r3, [r7, #23]
      }
    }
    else
    {
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a8a:	461a      	mov	r2, r3
 8007a8c:	2300      	movs	r3, #0
 8007a8e:	6113      	str	r3, [r2, #16]
      USBx_INEP(i)->DIEPCTL = 0U;
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a96:	461a      	mov	r2, r3
 8007a98:	2300      	movs	r3, #0
 8007a9a:	6153      	str	r3, [r2, #20]
    }
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007aa2:	461a      	mov	r2, r3
 8007aa4:	2300      	movs	r3, #0
 8007aa6:	61d3      	str	r3, [r2, #28]

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007aa8:	2300      	movs	r3, #0
 8007aaa:	613b      	str	r3, [r7, #16]
 8007aac:	e043      	b.n	8007b36 <USB_DevInit+0x182>
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
  }
 8007aae:	693b      	ldr	r3, [r7, #16]
 8007ab0:	015a      	lsls	r2, r3, #5
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	4413      	add	r3, r2
 8007ab6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007ac0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007ac4:	d118      	bne.n	8007af8 <USB_DevInit+0x144>

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007ac6:	693b      	ldr	r3, [r7, #16]
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d10a      	bne.n	8007ae2 <USB_DevInit+0x12e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007acc:	693b      	ldr	r3, [r7, #16]
 8007ace:	015a      	lsls	r2, r3, #5
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	4413      	add	r3, r2
 8007ad4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ad8:	461a      	mov	r2, r3
 8007ada:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007ade:	6013      	str	r3, [r2, #0]
 8007ae0:	e013      	b.n	8007b0a <USB_DevInit+0x156>
    {
      if (i == 0U)
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007ae2:	693b      	ldr	r3, [r7, #16]
 8007ae4:	015a      	lsls	r2, r3, #5
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	4413      	add	r3, r2
 8007aea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007aee:	461a      	mov	r2, r3
 8007af0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007af4:	6013      	str	r3, [r2, #0]
 8007af6:	e008      	b.n	8007b0a <USB_DevInit+0x156>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
      }
 8007af8:	693b      	ldr	r3, [r7, #16]
 8007afa:	015a      	lsls	r2, r3, #5
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	4413      	add	r3, r2
 8007b00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b04:	461a      	mov	r2, r3
 8007b06:	2300      	movs	r3, #0
 8007b08:	6013      	str	r3, [r2, #0]
    }
    else
    {
 8007b0a:	693b      	ldr	r3, [r7, #16]
 8007b0c:	015a      	lsls	r2, r3, #5
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	4413      	add	r3, r2
 8007b12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b16:	461a      	mov	r2, r3
 8007b18:	2300      	movs	r3, #0
 8007b1a:	6113      	str	r3, [r2, #16]
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007b1c:	693b      	ldr	r3, [r7, #16]
 8007b1e:	015a      	lsls	r2, r3, #5
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	4413      	add	r3, r2
 8007b24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b28:	461a      	mov	r2, r3
 8007b2a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007b2e:	6093      	str	r3, [r2, #8]
    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007b30:	693b      	ldr	r3, [r7, #16]
 8007b32:	3301      	adds	r3, #1
 8007b34:	613b      	str	r3, [r7, #16]
 8007b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b38:	693a      	ldr	r2, [r7, #16]
 8007b3a:	429a      	cmp	r2, r3
 8007b3c:	d3b7      	bcc.n	8007aae <USB_DevInit+0xfa>
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007b3e:	2300      	movs	r3, #0
 8007b40:	613b      	str	r3, [r7, #16]
 8007b42:	e043      	b.n	8007bcc <USB_DevInit+0x218>
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
  }
 8007b44:	693b      	ldr	r3, [r7, #16]
 8007b46:	015a      	lsls	r2, r3, #5
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	4413      	add	r3, r2
 8007b4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007b56:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007b5a:	d118      	bne.n	8007b8e <USB_DevInit+0x1da>

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007b5c:	693b      	ldr	r3, [r7, #16]
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d10a      	bne.n	8007b78 <USB_DevInit+0x1c4>

  /* Disable all interrupts. */
 8007b62:	693b      	ldr	r3, [r7, #16]
 8007b64:	015a      	lsls	r2, r3, #5
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	4413      	add	r3, r2
 8007b6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b6e:	461a      	mov	r2, r3
 8007b70:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007b74:	6013      	str	r3, [r2, #0]
 8007b76:	e013      	b.n	8007ba0 <USB_DevInit+0x1ec>
  USBx->GINTMSK = 0U;

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007b78:	693b      	ldr	r3, [r7, #16]
 8007b7a:	015a      	lsls	r2, r3, #5
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	4413      	add	r3, r2
 8007b80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b84:	461a      	mov	r2, r3
 8007b86:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007b8a:	6013      	str	r3, [r2, #0]
 8007b8c:	e008      	b.n	8007ba0 <USB_DevInit+0x1ec>

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;

  /* Enable interrupts matching to the Device mode ONLY */
 8007b8e:	693b      	ldr	r3, [r7, #16]
 8007b90:	015a      	lsls	r2, r3, #5
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	4413      	add	r3, r2
 8007b96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b9a:	461a      	mov	r2, r3
 8007b9c:	2300      	movs	r3, #0
 8007b9e:	6013      	str	r3, [r2, #0]
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
 8007ba0:	693b      	ldr	r3, [r7, #16]
 8007ba2:	015a      	lsls	r2, r3, #5
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	4413      	add	r3, r2
 8007ba8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007bac:	461a      	mov	r2, r3
 8007bae:	2300      	movs	r3, #0
 8007bb0:	6113      	str	r3, [r2, #16]
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;
 8007bb2:	693b      	ldr	r3, [r7, #16]
 8007bb4:	015a      	lsls	r2, r3, #5
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	4413      	add	r3, r2
 8007bba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007bbe:	461a      	mov	r2, r3
 8007bc0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007bc4:	6093      	str	r3, [r2, #8]
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007bc6:	693b      	ldr	r3, [r7, #16]
 8007bc8:	3301      	adds	r3, #1
 8007bca:	613b      	str	r3, [r7, #16]
 8007bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bce:	693a      	ldr	r2, [r7, #16]
 8007bd0:	429a      	cmp	r2, r3
 8007bd2:	d3b7      	bcc.n	8007b44 <USB_DevInit+0x190>

  if (cfg.Sof_enable != 0U)
  {
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007bda:	691b      	ldr	r3, [r3, #16]
 8007bdc:	68fa      	ldr	r2, [r7, #12]
 8007bde:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007be2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007be6:	6113      	str	r3, [r2, #16]
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
  }

 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	2200      	movs	r2, #0
 8007bec:	619a      	str	r2, [r3, #24]
  if (cfg.vbus_sensing_enable == 1U)
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8007bf4:	615a      	str	r2, [r3, #20]
  }

  return ret;
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	699b      	ldr	r3, [r3, #24]
 8007bfa:	f043 0210 	orr.w	r2, r3, #16
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	619a      	str	r2, [r3, #24]
}

/**
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	699a      	ldr	r2, [r3, #24]
 8007c06:	4b10      	ldr	r3, [pc, #64]	; (8007c48 <USB_DevInit+0x294>)
 8007c08:	4313      	orrs	r3, r2
 8007c0a:	687a      	ldr	r2, [r7, #4]
 8007c0c:	6193      	str	r3, [r2, #24]
  * @brief  USB_OTG_FlushTxFifo : Flush a Tx FIFO
  * @param  USBx  Selected device
  * @param  num  FIFO number
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
 8007c0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d005      	beq.n	8007c20 <USB_DevInit+0x26c>
  * @retval HAL status
  */
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	699b      	ldr	r3, [r3, #24]
 8007c18:	f043 0208 	orr.w	r2, r3, #8
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	619a      	str	r2, [r3, #24]
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
  uint32_t count = 0U;
 8007c20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007c22:	2b01      	cmp	r3, #1
 8007c24:	d107      	bne.n	8007c36 <USB_DevInit+0x282>

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	699b      	ldr	r3, [r3, #24]
 8007c2a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007c2e:	f043 0304 	orr.w	r3, r3, #4
 8007c32:	687a      	ldr	r2, [r7, #4]
 8007c34:	6193      	str	r3, [r2, #24]

  do
  {
 8007c36:	7dfb      	ldrb	r3, [r7, #23]
    if (++count > 200000U)
 8007c38:	4618      	mov	r0, r3
 8007c3a:	3718      	adds	r7, #24
 8007c3c:	46bd      	mov	sp, r7
 8007c3e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007c42:	b004      	add	sp, #16
 8007c44:	4770      	bx	lr
 8007c46:	bf00      	nop
 8007c48:	803c3800 	.word	0x803c3800

08007c4c <USB_FlushTxFifo>:
  return HAL_OK;
}

/**
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
 8007c4c:	b480      	push	{r7}
 8007c4e:	b085      	sub	sp, #20
 8007c50:	af00      	add	r7, sp, #0
 8007c52:	6078      	str	r0, [r7, #4]
 8007c54:	6039      	str	r1, [r7, #0]
  * @retval HAL status
 8007c56:	2300      	movs	r3, #0
 8007c58:	60fb      	str	r3, [r7, #12]
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t count = 0;

 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	3301      	adds	r3, #1
 8007c5e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;

 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	4a13      	ldr	r2, [pc, #76]	; (8007cb0 <USB_FlushTxFifo+0x64>)
 8007c64:	4293      	cmp	r3, r2
 8007c66:	d901      	bls.n	8007c6c <USB_FlushTxFifo+0x20>
  do
  {
 8007c68:	2303      	movs	r3, #3
 8007c6a:	e01b      	b.n	8007ca4 <USB_FlushTxFifo+0x58>
    if (++count > 200000U)
    {
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	691b      	ldr	r3, [r3, #16]
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	daf2      	bge.n	8007c5a <USB_FlushTxFifo+0xe>
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007c74:	2300      	movs	r3, #0
 8007c76:	60fb      	str	r3, [r7, #12]

 8007c78:	683b      	ldr	r3, [r7, #0]
 8007c7a:	019b      	lsls	r3, r3, #6
 8007c7c:	f043 0220 	orr.w	r2, r3, #32
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	611a      	str	r2, [r3, #16]
  return HAL_OK;
}

/**
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	3301      	adds	r3, #1
 8007c88:	60fb      	str	r3, [r7, #12]
  * @brief  USB_SetDevSpeed  Initializes the DevSpd field of DCFG register
  *         depending the PHY type and the enumeration speed of the device.
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	4a08      	ldr	r2, [pc, #32]	; (8007cb0 <USB_FlushTxFifo+0x64>)
 8007c8e:	4293      	cmp	r3, r2
 8007c90:	d901      	bls.n	8007c96 <USB_FlushTxFifo+0x4a>
  * @param  USBx  Selected device
  * @param  speed  device speed
 8007c92:	2303      	movs	r3, #3
 8007c94:	e006      	b.n	8007ca4 <USB_FlushTxFifo+0x58>
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	691b      	ldr	r3, [r3, #16]
 8007c9a:	f003 0320 	and.w	r3, r3, #32
 8007c9e:	2b20      	cmp	r3, #32
 8007ca0:	d0f0      	beq.n	8007c84 <USB_FlushTxFifo+0x38>
  * @retval  Hal status
  */
 8007ca2:	2300      	movs	r3, #0
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
 8007ca4:	4618      	mov	r0, r3
 8007ca6:	3714      	adds	r7, #20
 8007ca8:	46bd      	mov	sp, r7
 8007caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cae:	4770      	bx	lr
 8007cb0:	00030d40 	.word	0x00030d40

08007cb4 <USB_FlushRxFifo>:

  USBx_DEVICE->DCFG |= speed;
  return HAL_OK;
}

/**
 8007cb4:	b480      	push	{r7}
 8007cb6:	b085      	sub	sp, #20
 8007cb8:	af00      	add	r7, sp, #0
 8007cba:	6078      	str	r0, [r7, #4]
  * @brief  USB_GetDevSpeed  Return the Dev Speed
 8007cbc:	2300      	movs	r3, #0
 8007cbe:	60fb      	str	r3, [r7, #12]
  * @param  USBx  Selected device
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg USBD_FS_SPEED: Full speed mode
  */
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	3301      	adds	r3, #1
 8007cc4:	60fb      	str	r3, [r7, #12]
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	4a11      	ldr	r2, [pc, #68]	; (8007d10 <USB_FlushRxFifo+0x5c>)
 8007cca:	4293      	cmp	r3, r2
 8007ccc:	d901      	bls.n	8007cd2 <USB_FlushRxFifo+0x1e>
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint8_t speed;
 8007cce:	2303      	movs	r3, #3
 8007cd0:	e018      	b.n	8007d04 <USB_FlushRxFifo+0x50>
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;

 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	691b      	ldr	r3, [r3, #16]
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	daf2      	bge.n	8007cc0 <USB_FlushRxFifo+0xc>
  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
 8007cda:	2300      	movs	r3, #0
 8007cdc:	60fb      	str	r3, [r7, #12]
    speed = USBD_FS_SPEED;
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	2210      	movs	r2, #16
 8007ce2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    speed = 0xFU;
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	3301      	adds	r3, #1
 8007ce8:	60fb      	str	r3, [r7, #12]
  }

 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	4a08      	ldr	r2, [pc, #32]	; (8007d10 <USB_FlushRxFifo+0x5c>)
 8007cee:	4293      	cmp	r3, r2
 8007cf0:	d901      	bls.n	8007cf6 <USB_FlushRxFifo+0x42>
  return speed;
}
 8007cf2:	2303      	movs	r3, #3
 8007cf4:	e006      	b.n	8007d04 <USB_FlushRxFifo+0x50>

/**
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	691b      	ldr	r3, [r3, #16]
 8007cfa:	f003 0310 	and.w	r3, r3, #16
 8007cfe:	2b10      	cmp	r3, #16
 8007d00:	d0f0      	beq.n	8007ce4 <USB_FlushRxFifo+0x30>
  * @brief  Activate and configure an endpoint
  * @param  USBx  Selected device
 8007d02:	2300      	movs	r3, #0
  * @param  ep pointer to endpoint structure
 8007d04:	4618      	mov	r0, r3
 8007d06:	3714      	adds	r7, #20
 8007d08:	46bd      	mov	sp, r7
 8007d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d0e:	4770      	bx	lr
 8007d10:	00030d40 	.word	0x00030d40

08007d14 <USB_SetDevSpeed>:

  if (ep->is_in == 1U)
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8007d14:	b480      	push	{r7}
 8007d16:	b085      	sub	sp, #20
 8007d18:	af00      	add	r7, sp, #0
 8007d1a:	6078      	str	r0, [r7, #4]
 8007d1c:	460b      	mov	r3, r1
 8007d1e:	70fb      	strb	r3, [r7, #3]
    {
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	60fb      	str	r3, [r7, #12]
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d2a:	681a      	ldr	r2, [r3, #0]
 8007d2c:	78fb      	ldrb	r3, [r7, #3]
 8007d2e:	68f9      	ldr	r1, [r7, #12]
 8007d30:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007d34:	4313      	orrs	r3, r2
 8007d36:	600b      	str	r3, [r1, #0]
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
 8007d38:	2300      	movs	r3, #0
                                   USB_OTG_DIEPCTL_USBAEP;
 8007d3a:	4618      	mov	r0, r3
 8007d3c:	3714      	adds	r7, #20
 8007d3e:	46bd      	mov	sp, r7
 8007d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d44:	4770      	bx	lr

08007d46 <USB_DevDisconnect>:
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;

  return HAL_OK;
}

/**
 8007d46:	b480      	push	{r7}
 8007d48:	b085      	sub	sp, #20
 8007d4a:	af00      	add	r7, sp, #0
 8007d4c:	6078      	str	r0, [r7, #4]
  * @brief  Prepare the EP0 to start the first control setup
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	60fb      	str	r3, [r7, #12]
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	68fa      	ldr	r2, [r7, #12]
 8007d5c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007d60:	f023 0303 	bic.w	r3, r3, #3
 8007d64:	6013      	str	r3, [r2, #0]
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d6c:	685b      	ldr	r3, [r3, #4]
 8007d6e:	68fa      	ldr	r2, [r7, #12]
 8007d70:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007d74:	f043 0302 	orr.w	r3, r3, #2
 8007d78:	6053      	str	r3, [r2, #4]
{
  UNUSED(psetup);
 8007d7a:	2300      	movs	r3, #0
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d7c:	4618      	mov	r0, r3
 8007d7e:	3714      	adds	r7, #20
 8007d80:	46bd      	mov	sp, r7
 8007d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d86:	4770      	bx	lr

08007d88 <USB_GetMode>:
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);
 8007d88:	b480      	push	{r7}
 8007d8a:	b083      	sub	sp, #12
 8007d8c:	af00      	add	r7, sp, #0
 8007d8e:	6078      	str	r0, [r7, #4]

 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	695b      	ldr	r3, [r3, #20]
 8007d94:	f003 0301 	and.w	r3, r3, #1
  return HAL_OK;
 8007d98:	4618      	mov	r0, r3
 8007d9a:	370c      	adds	r7, #12
 8007d9c:	46bd      	mov	sp, r7
 8007d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da2:	4770      	bx	lr

08007da4 <USB_CoreReset>:

  hprt0 = USBx_HPRT0;

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

 8007da4:	b480      	push	{r7}
 8007da6:	b085      	sub	sp, #20
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	6078      	str	r0, [r7, #4]
  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8007dac:	2300      	movs	r3, #0
 8007dae:	60fb      	str	r3, [r7, #12]
  HAL_Delay(100U);                                 /* See Note #1 */
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
  HAL_Delay(10U);

  return HAL_OK;
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	3301      	adds	r3, #1
 8007db4:	60fb      	str	r3, [r7, #12]
}

 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	4a13      	ldr	r2, [pc, #76]	; (8007e08 <USB_CoreReset+0x64>)
 8007dba:	4293      	cmp	r3, r2
 8007dbc:	d901      	bls.n	8007dc2 <USB_CoreReset+0x1e>
/**
  * @brief  USB_DriveVbus : activate or de-activate vbus
 8007dbe:	2303      	movs	r3, #3
 8007dc0:	e01b      	b.n	8007dfa <USB_CoreReset+0x56>
  * @param  state  VBUS state
  *          This parameter can be one of these values:
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	691b      	ldr	r3, [r3, #16]
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	daf2      	bge.n	8007db0 <USB_CoreReset+0xc>
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
 8007dca:	2300      	movs	r3, #0
 8007dcc:	60fb      	str	r3, [r7, #12]
  */
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	691b      	ldr	r3, [r3, #16]
 8007dd2:	f043 0201 	orr.w	r2, r3, #1
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	611a      	str	r2, [r3, #16]
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
  uint32_t USBx_BASE = (uint32_t)USBx;
  __IO uint32_t hprt0 = 0U;
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	3301      	adds	r3, #1
 8007dde:	60fb      	str	r3, [r7, #12]

  hprt0 = USBx_HPRT0;
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	4a09      	ldr	r2, [pc, #36]	; (8007e08 <USB_CoreReset+0x64>)
 8007de4:	4293      	cmp	r3, r2
 8007de6:	d901      	bls.n	8007dec <USB_CoreReset+0x48>

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8007de8:	2303      	movs	r3, #3
 8007dea:	e006      	b.n	8007dfa <USB_CoreReset+0x56>
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	691b      	ldr	r3, [r3, #16]
 8007df0:	f003 0301 	and.w	r3, r3, #1
 8007df4:	2b01      	cmp	r3, #1
 8007df6:	d0f0      	beq.n	8007dda <USB_CoreReset+0x36>
  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
  {
 8007df8:	2300      	movs	r3, #0
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8007dfa:	4618      	mov	r0, r3
 8007dfc:	3714      	adds	r7, #20
 8007dfe:	46bd      	mov	sp, r7
 8007e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e04:	4770      	bx	lr
 8007e06:	bf00      	nop
 8007e08:	00030d40 	.word	0x00030d40

08007e0c <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8007e0c:	b580      	push	{r7, lr}
 8007e0e:	b08a      	sub	sp, #40	; 0x28
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8007e14:	4b27      	ldr	r3, [pc, #156]	; (8007eb4 <I2Cx_MspInit+0xa8>)
 8007e16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e18:	4a26      	ldr	r2, [pc, #152]	; (8007eb4 <I2Cx_MspInit+0xa8>)
 8007e1a:	f043 0302 	orr.w	r3, r3, #2
 8007e1e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007e20:	4b24      	ldr	r3, [pc, #144]	; (8007eb4 <I2Cx_MspInit+0xa8>)
 8007e22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e24:	f003 0302 	and.w	r3, r3, #2
 8007e28:	613b      	str	r3, [r7, #16]
 8007e2a:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 8007e2c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8007e30:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8007e32:	2312      	movs	r3, #18
 8007e34:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8007e36:	2301      	movs	r3, #1
 8007e38:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007e3a:	2303      	movs	r3, #3
 8007e3c:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 8007e3e:	2304      	movs	r3, #4
 8007e40:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8007e42:	f107 0314 	add.w	r3, r7, #20
 8007e46:	4619      	mov	r1, r3
 8007e48:	481b      	ldr	r0, [pc, #108]	; (8007eb8 <I2Cx_MspInit+0xac>)
 8007e4a:	f7fa fc27 	bl	800269c <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8007e4e:	f107 0314 	add.w	r3, r7, #20
 8007e52:	4619      	mov	r1, r3
 8007e54:	4818      	ldr	r0, [pc, #96]	; (8007eb8 <I2Cx_MspInit+0xac>)
 8007e56:	f7fa fc21 	bl	800269c <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 8007e5a:	4b16      	ldr	r3, [pc, #88]	; (8007eb4 <I2Cx_MspInit+0xa8>)
 8007e5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e5e:	4a15      	ldr	r2, [pc, #84]	; (8007eb4 <I2Cx_MspInit+0xa8>)
 8007e60:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007e64:	6593      	str	r3, [r2, #88]	; 0x58
 8007e66:	4b13      	ldr	r3, [pc, #76]	; (8007eb4 <I2Cx_MspInit+0xa8>)
 8007e68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007e6e:	60fb      	str	r3, [r7, #12]
 8007e70:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 8007e72:	4b10      	ldr	r3, [pc, #64]	; (8007eb4 <I2Cx_MspInit+0xa8>)
 8007e74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e76:	4a0f      	ldr	r2, [pc, #60]	; (8007eb4 <I2Cx_MspInit+0xa8>)
 8007e78:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007e7c:	6393      	str	r3, [r2, #56]	; 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 8007e7e:	4b0d      	ldr	r3, [pc, #52]	; (8007eb4 <I2Cx_MspInit+0xa8>)
 8007e80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e82:	4a0c      	ldr	r2, [pc, #48]	; (8007eb4 <I2Cx_MspInit+0xa8>)
 8007e84:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8007e88:	6393      	str	r3, [r2, #56]	; 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 8007e8a:	2200      	movs	r2, #0
 8007e8c:	210f      	movs	r1, #15
 8007e8e:	2021      	movs	r0, #33	; 0x21
 8007e90:	f7fa fa4e 	bl	8002330 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8007e94:	2021      	movs	r0, #33	; 0x21
 8007e96:	f7fa fa67 	bl	8002368 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 8007e9a:	2200      	movs	r2, #0
 8007e9c:	210f      	movs	r1, #15
 8007e9e:	2022      	movs	r0, #34	; 0x22
 8007ea0:	f7fa fa46 	bl	8002330 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 8007ea4:	2022      	movs	r0, #34	; 0x22
 8007ea6:	f7fa fa5f 	bl	8002368 <HAL_NVIC_EnableIRQ>
}
 8007eaa:	bf00      	nop
 8007eac:	3728      	adds	r7, #40	; 0x28
 8007eae:	46bd      	mov	sp, r7
 8007eb0:	bd80      	pop	{r7, pc}
 8007eb2:	bf00      	nop
 8007eb4:	40021000 	.word	0x40021000
 8007eb8:	48000400 	.word	0x48000400

08007ebc <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8007ebc:	b580      	push	{r7, lr}
 8007ebe:	b082      	sub	sp, #8
 8007ec0:	af00      	add	r7, sp, #0
 8007ec2:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	4a12      	ldr	r2, [pc, #72]	; (8007f10 <I2Cx_Init+0x54>)
 8007ec8:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	4a11      	ldr	r2, [pc, #68]	; (8007f14 <I2Cx_Init+0x58>)
 8007ece:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	2200      	movs	r2, #0
 8007ed4:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	2201      	movs	r2, #1
 8007eda:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	2200      	movs	r2, #0
 8007ee0:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	2200      	movs	r2, #0
 8007ee6:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	2200      	movs	r2, #0
 8007eec:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	2200      	movs	r2, #0
 8007ef2:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 8007ef4:	6878      	ldr	r0, [r7, #4]
 8007ef6:	f7ff ff89 	bl	8007e0c <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 8007efa:	6878      	ldr	r0, [r7, #4]
 8007efc:	f7fa fe9c 	bl	8002c38 <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 8007f00:	2100      	movs	r1, #0
 8007f02:	6878      	ldr	r0, [r7, #4]
 8007f04:	f7fb fc2a 	bl	800375c <HAL_I2CEx_ConfigAnalogFilter>
}
 8007f08:	bf00      	nop
 8007f0a:	3708      	adds	r7, #8
 8007f0c:	46bd      	mov	sp, r7
 8007f0e:	bd80      	pop	{r7, pc}
 8007f10:	40005800 	.word	0x40005800
 8007f14:	00702681 	.word	0x00702681

08007f18 <I2Cx_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8007f18:	b580      	push	{r7, lr}
 8007f1a:	b08a      	sub	sp, #40	; 0x28
 8007f1c:	af04      	add	r7, sp, #16
 8007f1e:	60f8      	str	r0, [r7, #12]
 8007f20:	4608      	mov	r0, r1
 8007f22:	4611      	mov	r1, r2
 8007f24:	461a      	mov	r2, r3
 8007f26:	4603      	mov	r3, r0
 8007f28:	72fb      	strb	r3, [r7, #11]
 8007f2a:	460b      	mov	r3, r1
 8007f2c:	813b      	strh	r3, [r7, #8]
 8007f2e:	4613      	mov	r3, r2
 8007f30:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8007f32:	2300      	movs	r3, #0
 8007f34:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8007f36:	7afb      	ldrb	r3, [r7, #11]
 8007f38:	b299      	uxth	r1, r3
 8007f3a:	88f8      	ldrh	r0, [r7, #6]
 8007f3c:	893a      	ldrh	r2, [r7, #8]
 8007f3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007f42:	9302      	str	r3, [sp, #8]
 8007f44:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007f46:	9301      	str	r3, [sp, #4]
 8007f48:	6a3b      	ldr	r3, [r7, #32]
 8007f4a:	9300      	str	r3, [sp, #0]
 8007f4c:	4603      	mov	r3, r0
 8007f4e:	68f8      	ldr	r0, [r7, #12]
 8007f50:	f7fb f844 	bl	8002fdc <HAL_I2C_Mem_Read>
 8007f54:	4603      	mov	r3, r0
 8007f56:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8007f58:	7dfb      	ldrb	r3, [r7, #23]
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d004      	beq.n	8007f68 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 8007f5e:	7afb      	ldrb	r3, [r7, #11]
 8007f60:	4619      	mov	r1, r3
 8007f62:	68f8      	ldr	r0, [r7, #12]
 8007f64:	f000 f832 	bl	8007fcc <I2Cx_Error>
  }
  return status;
 8007f68:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f6a:	4618      	mov	r0, r3
 8007f6c:	3718      	adds	r7, #24
 8007f6e:	46bd      	mov	sp, r7
 8007f70:	bd80      	pop	{r7, pc}

08007f72 <I2Cx_WriteMultiple>:
  * @param  Buffer  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8007f72:	b580      	push	{r7, lr}
 8007f74:	b08a      	sub	sp, #40	; 0x28
 8007f76:	af04      	add	r7, sp, #16
 8007f78:	60f8      	str	r0, [r7, #12]
 8007f7a:	4608      	mov	r0, r1
 8007f7c:	4611      	mov	r1, r2
 8007f7e:	461a      	mov	r2, r3
 8007f80:	4603      	mov	r3, r0
 8007f82:	72fb      	strb	r3, [r7, #11]
 8007f84:	460b      	mov	r3, r1
 8007f86:	813b      	strh	r3, [r7, #8]
 8007f88:	4613      	mov	r3, r2
 8007f8a:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8007f8c:	2300      	movs	r3, #0
 8007f8e:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8007f90:	7afb      	ldrb	r3, [r7, #11]
 8007f92:	b299      	uxth	r1, r3
 8007f94:	88f8      	ldrh	r0, [r7, #6]
 8007f96:	893a      	ldrh	r2, [r7, #8]
 8007f98:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007f9c:	9302      	str	r3, [sp, #8]
 8007f9e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007fa0:	9301      	str	r3, [sp, #4]
 8007fa2:	6a3b      	ldr	r3, [r7, #32]
 8007fa4:	9300      	str	r3, [sp, #0]
 8007fa6:	4603      	mov	r3, r0
 8007fa8:	68f8      	ldr	r0, [r7, #12]
 8007faa:	f7fa ff03 	bl	8002db4 <HAL_I2C_Mem_Write>
 8007fae:	4603      	mov	r3, r0
 8007fb0:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8007fb2:	7dfb      	ldrb	r3, [r7, #23]
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d004      	beq.n	8007fc2 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8007fb8:	7afb      	ldrb	r3, [r7, #11]
 8007fba:	4619      	mov	r1, r3
 8007fbc:	68f8      	ldr	r0, [r7, #12]
 8007fbe:	f000 f805 	bl	8007fcc <I2Cx_Error>
  }
  return status;
 8007fc2:	7dfb      	ldrb	r3, [r7, #23]
}
 8007fc4:	4618      	mov	r0, r3
 8007fc6:	3718      	adds	r7, #24
 8007fc8:	46bd      	mov	sp, r7
 8007fca:	bd80      	pop	{r7, pc}

08007fcc <I2Cx_Error>:
  * @param  i2c_handler  I2C handler
  * @param  Addr  I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8007fcc:	b580      	push	{r7, lr}
 8007fce:	b082      	sub	sp, #8
 8007fd0:	af00      	add	r7, sp, #0
 8007fd2:	6078      	str	r0, [r7, #4]
 8007fd4:	460b      	mov	r3, r1
 8007fd6:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8007fd8:	6878      	ldr	r0, [r7, #4]
 8007fda:	f7fa febc 	bl	8002d56 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8007fde:	6878      	ldr	r0, [r7, #4]
 8007fe0:	f7ff ff6c 	bl	8007ebc <I2Cx_Init>
}
 8007fe4:	bf00      	nop
 8007fe6:	3708      	adds	r7, #8
 8007fe8:	46bd      	mov	sp, r7
 8007fea:	bd80      	pop	{r7, pc}

08007fec <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 8007fec:	b580      	push	{r7, lr}
 8007fee:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 8007ff0:	4802      	ldr	r0, [pc, #8]	; (8007ffc <SENSOR_IO_Init+0x10>)
 8007ff2:	f7ff ff63 	bl	8007ebc <I2Cx_Init>
}
 8007ff6:	bf00      	nop
 8007ff8:	bd80      	pop	{r7, pc}
 8007ffa:	bf00      	nop
 8007ffc:	20000834 	.word	0x20000834

08008000 <SENSOR_IO_Write>:
  * @param  Reg  Reg address
  * @param  Value  Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8008000:	b580      	push	{r7, lr}
 8008002:	b084      	sub	sp, #16
 8008004:	af02      	add	r7, sp, #8
 8008006:	4603      	mov	r3, r0
 8008008:	71fb      	strb	r3, [r7, #7]
 800800a:	460b      	mov	r3, r1
 800800c:	71bb      	strb	r3, [r7, #6]
 800800e:	4613      	mov	r3, r2
 8008010:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8008012:	79bb      	ldrb	r3, [r7, #6]
 8008014:	b29a      	uxth	r2, r3
 8008016:	79f9      	ldrb	r1, [r7, #7]
 8008018:	2301      	movs	r3, #1
 800801a:	9301      	str	r3, [sp, #4]
 800801c:	1d7b      	adds	r3, r7, #5
 800801e:	9300      	str	r3, [sp, #0]
 8008020:	2301      	movs	r3, #1
 8008022:	4803      	ldr	r0, [pc, #12]	; (8008030 <SENSOR_IO_Write+0x30>)
 8008024:	f7ff ffa5 	bl	8007f72 <I2Cx_WriteMultiple>
}
 8008028:	bf00      	nop
 800802a:	3708      	adds	r7, #8
 800802c:	46bd      	mov	sp, r7
 800802e:	bd80      	pop	{r7, pc}
 8008030:	20000834 	.word	0x20000834

08008034 <SENSOR_IO_Read>:
  * @param  Addr  I2C address
  * @param  Reg  Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8008034:	b580      	push	{r7, lr}
 8008036:	b086      	sub	sp, #24
 8008038:	af02      	add	r7, sp, #8
 800803a:	4603      	mov	r3, r0
 800803c:	460a      	mov	r2, r1
 800803e:	71fb      	strb	r3, [r7, #7]
 8008040:	4613      	mov	r3, r2
 8008042:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 8008044:	2300      	movs	r3, #0
 8008046:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8008048:	79bb      	ldrb	r3, [r7, #6]
 800804a:	b29a      	uxth	r2, r3
 800804c:	79f9      	ldrb	r1, [r7, #7]
 800804e:	2301      	movs	r3, #1
 8008050:	9301      	str	r3, [sp, #4]
 8008052:	f107 030f 	add.w	r3, r7, #15
 8008056:	9300      	str	r3, [sp, #0]
 8008058:	2301      	movs	r3, #1
 800805a:	4804      	ldr	r0, [pc, #16]	; (800806c <SENSOR_IO_Read+0x38>)
 800805c:	f7ff ff5c 	bl	8007f18 <I2Cx_ReadMultiple>

  return read_value;
 8008060:	7bfb      	ldrb	r3, [r7, #15]
}
 8008062:	4618      	mov	r0, r3
 8008064:	3710      	adds	r7, #16
 8008066:	46bd      	mov	sp, r7
 8008068:	bd80      	pop	{r7, pc}
 800806a:	bf00      	nop
 800806c:	20000834 	.word	0x20000834

08008070 <SENSOR_IO_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 8008070:	b580      	push	{r7, lr}
 8008072:	b084      	sub	sp, #16
 8008074:	af02      	add	r7, sp, #8
 8008076:	603a      	str	r2, [r7, #0]
 8008078:	461a      	mov	r2, r3
 800807a:	4603      	mov	r3, r0
 800807c:	71fb      	strb	r3, [r7, #7]
 800807e:	460b      	mov	r3, r1
 8008080:	71bb      	strb	r3, [r7, #6]
 8008082:	4613      	mov	r3, r2
 8008084:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 8008086:	79bb      	ldrb	r3, [r7, #6]
 8008088:	b29a      	uxth	r2, r3
 800808a:	79f9      	ldrb	r1, [r7, #7]
 800808c:	88bb      	ldrh	r3, [r7, #4]
 800808e:	9301      	str	r3, [sp, #4]
 8008090:	683b      	ldr	r3, [r7, #0]
 8008092:	9300      	str	r3, [sp, #0]
 8008094:	2301      	movs	r3, #1
 8008096:	4804      	ldr	r0, [pc, #16]	; (80080a8 <SENSOR_IO_ReadMultiple+0x38>)
 8008098:	f7ff ff3e 	bl	8007f18 <I2Cx_ReadMultiple>
 800809c:	4603      	mov	r3, r0
 800809e:	b29b      	uxth	r3, r3
}
 80080a0:	4618      	mov	r0, r3
 80080a2:	3708      	adds	r7, #8
 80080a4:	46bd      	mov	sp, r7
 80080a6:	bd80      	pop	{r7, pc}
 80080a8:	20000834 	.word	0x20000834

080080ac <BSP_ACCELERO_Init>:
/**
  * @brief  Initialize the ACCELERO.
  * @retval ACCELERO_OK or ACCELERO_ERROR
  */
ACCELERO_StatusTypeDef BSP_ACCELERO_Init(void)
{  
 80080ac:	b580      	push	{r7, lr}
 80080ae:	b084      	sub	sp, #16
 80080b0:	af00      	add	r7, sp, #0
  ACCELERO_StatusTypeDef ret = ACCELERO_OK;
 80080b2:	2300      	movs	r3, #0
 80080b4:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 80080b6:	2300      	movs	r3, #0
 80080b8:	81bb      	strh	r3, [r7, #12]
  ACCELERO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslAccDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 80080ba:	4b19      	ldr	r3, [pc, #100]	; (8008120 <BSP_ACCELERO_Init+0x74>)
 80080bc:	689b      	ldr	r3, [r3, #8]
 80080be:	4798      	blx	r3
 80080c0:	4603      	mov	r3, r0
 80080c2:	2b6a      	cmp	r3, #106	; 0x6a
 80080c4:	d002      	beq.n	80080cc <BSP_ACCELERO_Init+0x20>
  {
    ret = ACCELERO_ERROR;
 80080c6:	2301      	movs	r3, #1
 80080c8:	73fb      	strb	r3, [r7, #15]
 80080ca:	e024      	b.n	8008116 <BSP_ACCELERO_Init+0x6a>
  }
  else
  {
    /* Initialize the ACCELERO accelerometer driver structure */
    AccelerometerDrv = &Lsm6dslAccDrv;
 80080cc:	4b15      	ldr	r3, [pc, #84]	; (8008124 <BSP_ACCELERO_Init+0x78>)
 80080ce:	4a14      	ldr	r2, [pc, #80]	; (8008120 <BSP_ACCELERO_Init+0x74>)
 80080d0:	601a      	str	r2, [r3, #0]
  
    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the ACCELERO accelerometer structure */
    LSM6DSL_InitStructure.AccOutput_DataRate = LSM6DSL_ODR_52Hz;
 80080d2:	2330      	movs	r3, #48	; 0x30
 80080d4:	717b      	strb	r3, [r7, #5]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 80080d6:	2300      	movs	r3, #0
 80080d8:	71bb      	strb	r3, [r7, #6]
    LSM6DSL_InitStructure.AccFull_Scale = LSM6DSL_ACC_FULLSCALE_2G;
 80080da:	2300      	movs	r3, #0
 80080dc:	72bb      	strb	r3, [r7, #10]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 80080de:	2340      	movs	r3, #64	; 0x40
 80080e0:	723b      	strb	r3, [r7, #8]
    LSM6DSL_InitStructure.High_Resolution = 0;
 80080e2:	2300      	movs	r3, #0
 80080e4:	71fb      	strb	r3, [r7, #7]
    LSM6DSL_InitStructure.Communication_Mode = 0;
 80080e6:	2300      	movs	r3, #0
 80080e8:	72fb      	strb	r3, [r7, #11]
        
    /* Configure MEMS: data rate, full scale  */
    ctrl =  (LSM6DSL_InitStructure.AccOutput_DataRate | LSM6DSL_InitStructure.AccFull_Scale);
 80080ea:	797a      	ldrb	r2, [r7, #5]
 80080ec:	7abb      	ldrb	r3, [r7, #10]
 80080ee:	4313      	orrs	r3, r2
 80080f0:	b2db      	uxtb	r3, r3
 80080f2:	81bb      	strh	r3, [r7, #12]
    
    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);
 80080f4:	7a3b      	ldrb	r3, [r7, #8]
 80080f6:	f043 0304 	orr.w	r3, r3, #4
 80080fa:	b2db      	uxtb	r3, r3
 80080fc:	021b      	lsls	r3, r3, #8
 80080fe:	b21a      	sxth	r2, r3
 8008100:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8008104:	4313      	orrs	r3, r2
 8008106:	b21b      	sxth	r3, r3
 8008108:	81bb      	strh	r3, [r7, #12]

    /* Configure the ACCELERO accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 800810a:	4b06      	ldr	r3, [pc, #24]	; (8008124 <BSP_ACCELERO_Init+0x78>)
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	89ba      	ldrh	r2, [r7, #12]
 8008112:	4610      	mov	r0, r2
 8008114:	4798      	blx	r3
  }  

  return ret;
 8008116:	7bfb      	ldrb	r3, [r7, #15]
}
 8008118:	4618      	mov	r0, r3
 800811a:	3710      	adds	r7, #16
 800811c:	46bd      	mov	sp, r7
 800811e:	bd80      	pop	{r7, pc}
 8008120:	20000010 	.word	0x20000010
 8008124:	20000888 	.word	0x20000888

08008128 <BSP_ACCELERO_AccGetXYZ>:
  * @param  pDataXYZ Pointer on 3 angular accelerations table with  
  *                  pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis
  * @retval None
  */
void BSP_ACCELERO_AccGetXYZ(int16_t *pDataXYZ)
{
 8008128:	b580      	push	{r7, lr}
 800812a:	b082      	sub	sp, #8
 800812c:	af00      	add	r7, sp, #0
 800812e:	6078      	str	r0, [r7, #4]
  if(AccelerometerDrv != NULL)
 8008130:	4b08      	ldr	r3, [pc, #32]	; (8008154 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	2b00      	cmp	r3, #0
 8008136:	d009      	beq.n	800814c <BSP_ACCELERO_AccGetXYZ+0x24>
  {
    if(AccelerometerDrv->GetXYZ != NULL)
 8008138:	4b06      	ldr	r3, [pc, #24]	; (8008154 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800813e:	2b00      	cmp	r3, #0
 8008140:	d004      	beq.n	800814c <BSP_ACCELERO_AccGetXYZ+0x24>
    {   
      AccelerometerDrv->GetXYZ(pDataXYZ);
 8008142:	4b04      	ldr	r3, [pc, #16]	; (8008154 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008148:	6878      	ldr	r0, [r7, #4]
 800814a:	4798      	blx	r3
    }
  }
}
 800814c:	bf00      	nop
 800814e:	3708      	adds	r7, #8
 8008150:	46bd      	mov	sp, r7
 8008152:	bd80      	pop	{r7, pc}
 8008154:	20000888 	.word	0x20000888

08008158 <LSM6DSL_AccInit>:
/**
  * @brief  Set LSM6DSL Accelerometer Initialization.
  * @param  InitStruct: Init parameters
  */
void LSM6DSL_AccInit(uint16_t InitStruct)
{  
 8008158:	b580      	push	{r7, lr}
 800815a:	b084      	sub	sp, #16
 800815c:	af00      	add	r7, sp, #0
 800815e:	4603      	mov	r3, r0
 8008160:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8008162:	2300      	movs	r3, #0
 8008164:	73fb      	strb	r3, [r7, #15]
  uint8_t tmp;

  /* Read CTRL1_XL */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8008166:	2110      	movs	r1, #16
 8008168:	20d4      	movs	r0, #212	; 0xd4
 800816a:	f7ff ff63 	bl	8008034 <SENSOR_IO_Read>
 800816e:	4603      	mov	r3, r0
 8008170:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL1_XL register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
 8008172:	88fb      	ldrh	r3, [r7, #6]
 8008174:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0xFC);
 8008176:	7bbb      	ldrb	r3, [r7, #14]
 8008178:	f003 0303 	and.w	r3, r3, #3
 800817c:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl;
 800817e:	7bba      	ldrb	r2, [r7, #14]
 8008180:	7bfb      	ldrb	r3, [r7, #15]
 8008182:	4313      	orrs	r3, r2
 8008184:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, tmp);
 8008186:	7bbb      	ldrb	r3, [r7, #14]
 8008188:	461a      	mov	r2, r3
 800818a:	2110      	movs	r1, #16
 800818c:	20d4      	movs	r0, #212	; 0xd4
 800818e:	f7ff ff37 	bl	8008000 <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 8008192:	2112      	movs	r1, #18
 8008194:	20d4      	movs	r0, #212	; 0xd4
 8008196:	f7ff ff4d 	bl	8008034 <SENSOR_IO_Read>
 800819a:	4603      	mov	r3, r0
 800819c:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
 800819e:	88fb      	ldrh	r3, [r7, #6]
 80081a0:	0a1b      	lsrs	r3, r3, #8
 80081a2:	b29b      	uxth	r3, r3
 80081a4:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0x44);
 80081a6:	7bbb      	ldrb	r3, [r7, #14]
 80081a8:	f023 0344 	bic.w	r3, r3, #68	; 0x44
 80081ac:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl; 
 80081ae:	7bba      	ldrb	r2, [r7, #14]
 80081b0:	7bfb      	ldrb	r3, [r7, #15]
 80081b2:	4313      	orrs	r3, r2
 80081b4:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 80081b6:	7bbb      	ldrb	r3, [r7, #14]
 80081b8:	461a      	mov	r2, r3
 80081ba:	2112      	movs	r1, #18
 80081bc:	20d4      	movs	r0, #212	; 0xd4
 80081be:	f7ff ff1f 	bl	8008000 <SENSOR_IO_Write>
}
 80081c2:	bf00      	nop
 80081c4:	3710      	adds	r7, #16
 80081c6:	46bd      	mov	sp, r7
 80081c8:	bd80      	pop	{r7, pc}

080081ca <LSM6DSL_AccDeInit>:

/**
  * @brief  LSM6DSL Accelerometer De-initialization.
  */
void LSM6DSL_AccDeInit(void)
{
 80081ca:	b580      	push	{r7, lr}
 80081cc:	b082      	sub	sp, #8
 80081ce:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 80081d0:	2300      	movs	r3, #0
 80081d2:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 80081d4:	2110      	movs	r1, #16
 80081d6:	20d4      	movs	r0, #212	; 0xd4
 80081d8:	f7ff ff2c 	bl	8008034 <SENSOR_IO_Read>
 80081dc:	4603      	mov	r3, r0
 80081de:	71fb      	strb	r3, [r7, #7]

  /* Clear ODR bits */
  ctrl &= ~(LSM6DSL_ODR_BITPOSITION);
 80081e0:	79fb      	ldrb	r3, [r7, #7]
 80081e2:	f003 030f 	and.w	r3, r3, #15
 80081e6:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, ctrl);
 80081e8:	79fb      	ldrb	r3, [r7, #7]
 80081ea:	461a      	mov	r2, r3
 80081ec:	2110      	movs	r1, #16
 80081ee:	20d4      	movs	r0, #212	; 0xd4
 80081f0:	f7ff ff06 	bl	8008000 <SENSOR_IO_Write>
}
 80081f4:	bf00      	nop
 80081f6:	3708      	adds	r7, #8
 80081f8:	46bd      	mov	sp, r7
 80081fa:	bd80      	pop	{r7, pc}

080081fc <LSM6DSL_AccReadID>:
/**
  * @brief  Read LSM6DSL ID.
  * @retval ID 
  */
uint8_t LSM6DSL_AccReadID(void)
{  
 80081fc:	b580      	push	{r7, lr}
 80081fe:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();
 8008200:	f7ff fef4 	bl	8007fec <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return (SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG));
 8008204:	210f      	movs	r1, #15
 8008206:	20d4      	movs	r0, #212	; 0xd4
 8008208:	f7ff ff14 	bl	8008034 <SENSOR_IO_Read>
 800820c:	4603      	mov	r3, r0
}
 800820e:	4618      	mov	r0, r3
 8008210:	bd80      	pop	{r7, pc}

08008212 <LSM6DSL_AccLowPower>:
/**
  * @brief  Set/Unset Accelerometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LSM6DSL_AccLowPower(uint16_t status)
{
 8008212:	b580      	push	{r7, lr}
 8008214:	b084      	sub	sp, #16
 8008216:	af00      	add	r7, sp, #0
 8008218:	4603      	mov	r3, r0
 800821a:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 800821c:	2300      	movs	r3, #0
 800821e:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL6_C value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C);
 8008220:	2115      	movs	r1, #21
 8008222:	20d4      	movs	r0, #212	; 0xd4
 8008224:	f7ff ff06 	bl	8008034 <SENSOR_IO_Read>
 8008228:	4603      	mov	r3, r0
 800822a:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x10);
 800822c:	7bfb      	ldrb	r3, [r7, #15]
 800822e:	f023 0310 	bic.w	r3, r3, #16
 8008232:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 8008234:	88fb      	ldrh	r3, [r7, #6]
 8008236:	2b00      	cmp	r3, #0
 8008238:	d003      	beq.n	8008242 <LSM6DSL_AccLowPower+0x30>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_ENABLED;
 800823a:	7bfb      	ldrb	r3, [r7, #15]
 800823c:	f043 0310 	orr.w	r3, r3, #16
 8008240:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C, ctrl);
 8008242:	7bfb      	ldrb	r3, [r7, #15]
 8008244:	461a      	mov	r2, r3
 8008246:	2115      	movs	r1, #21
 8008248:	20d4      	movs	r0, #212	; 0xd4
 800824a:	f7ff fed9 	bl	8008000 <SENSOR_IO_Write>
}
 800824e:	bf00      	nop
 8008250:	3710      	adds	r7, #16
 8008252:	46bd      	mov	sp, r7
 8008254:	bd80      	pop	{r7, pc}
	...

08008258 <LSM6DSL_AccReadXYZ>:
/**
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  */
void LSM6DSL_AccReadXYZ(int16_t* pData)
{
 8008258:	b580      	push	{r7, lr}
 800825a:	b088      	sub	sp, #32
 800825c:	af00      	add	r7, sp, #0
 800825e:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlx= 0;
 8008260:	2300      	movs	r3, #0
 8008262:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 8008264:	2300      	movs	r3, #0
 8008266:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 8008268:	f04f 0300 	mov.w	r3, #0
 800826c:	61bb      	str	r3, [r7, #24]
  
  /* Read the acceleration control register content */
  ctrlx = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 800826e:	2110      	movs	r1, #16
 8008270:	20d4      	movs	r0, #212	; 0xd4
 8008272:	f7ff fedf 	bl	8008034 <SENSOR_IO_Read>
 8008276:	4603      	mov	r3, r0
 8008278:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_XL, buffer, 6);
 800827a:	f107 0208 	add.w	r2, r7, #8
 800827e:	2306      	movs	r3, #6
 8008280:	2128      	movs	r1, #40	; 0x28
 8008282:	20d4      	movs	r0, #212	; 0xd4
 8008284:	f7ff fef4 	bl	8008070 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 8008288:	2300      	movs	r3, #0
 800828a:	77fb      	strb	r3, [r7, #31]
 800828c:	e01c      	b.n	80082c8 <LSM6DSL_AccReadXYZ+0x70>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 800828e:	7ffb      	ldrb	r3, [r7, #31]
 8008290:	005b      	lsls	r3, r3, #1
 8008292:	3301      	adds	r3, #1
 8008294:	3320      	adds	r3, #32
 8008296:	443b      	add	r3, r7
 8008298:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 800829c:	b29b      	uxth	r3, r3
 800829e:	021b      	lsls	r3, r3, #8
 80082a0:	b29a      	uxth	r2, r3
 80082a2:	7ffb      	ldrb	r3, [r7, #31]
 80082a4:	005b      	lsls	r3, r3, #1
 80082a6:	3320      	adds	r3, #32
 80082a8:	443b      	add	r3, r7
 80082aa:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80082ae:	b29b      	uxth	r3, r3
 80082b0:	4413      	add	r3, r2
 80082b2:	b29a      	uxth	r2, r3
 80082b4:	7ffb      	ldrb	r3, [r7, #31]
 80082b6:	b212      	sxth	r2, r2
 80082b8:	005b      	lsls	r3, r3, #1
 80082ba:	3320      	adds	r3, #32
 80082bc:	443b      	add	r3, r7
 80082be:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 80082c2:	7ffb      	ldrb	r3, [r7, #31]
 80082c4:	3301      	adds	r3, #1
 80082c6:	77fb      	strb	r3, [r7, #31]
 80082c8:	7ffb      	ldrb	r3, [r7, #31]
 80082ca:	2b02      	cmp	r3, #2
 80082cc:	d9df      	bls.n	800828e <LSM6DSL_AccReadXYZ+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL1_XL */
  switch(ctrlx & 0x0C)
 80082ce:	7dfb      	ldrb	r3, [r7, #23]
 80082d0:	f003 030c 	and.w	r3, r3, #12
 80082d4:	2b0c      	cmp	r3, #12
 80082d6:	d829      	bhi.n	800832c <LSM6DSL_AccReadXYZ+0xd4>
 80082d8:	a201      	add	r2, pc, #4	; (adr r2, 80082e0 <LSM6DSL_AccReadXYZ+0x88>)
 80082da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082de:	bf00      	nop
 80082e0:	08008315 	.word	0x08008315
 80082e4:	0800832d 	.word	0x0800832d
 80082e8:	0800832d 	.word	0x0800832d
 80082ec:	0800832d 	.word	0x0800832d
 80082f0:	08008327 	.word	0x08008327
 80082f4:	0800832d 	.word	0x0800832d
 80082f8:	0800832d 	.word	0x0800832d
 80082fc:	0800832d 	.word	0x0800832d
 8008300:	0800831b 	.word	0x0800831b
 8008304:	0800832d 	.word	0x0800832d
 8008308:	0800832d 	.word	0x0800832d
 800830c:	0800832d 	.word	0x0800832d
 8008310:	08008321 	.word	0x08008321
  {
  case LSM6DSL_ACC_FULLSCALE_2G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_2G;
 8008314:	4b18      	ldr	r3, [pc, #96]	; (8008378 <LSM6DSL_AccReadXYZ+0x120>)
 8008316:	61bb      	str	r3, [r7, #24]
    break;
 8008318:	e008      	b.n	800832c <LSM6DSL_AccReadXYZ+0xd4>
  case LSM6DSL_ACC_FULLSCALE_4G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_4G;
 800831a:	4b18      	ldr	r3, [pc, #96]	; (800837c <LSM6DSL_AccReadXYZ+0x124>)
 800831c:	61bb      	str	r3, [r7, #24]
    break;
 800831e:	e005      	b.n	800832c <LSM6DSL_AccReadXYZ+0xd4>
  case LSM6DSL_ACC_FULLSCALE_8G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_8G;
 8008320:	4b17      	ldr	r3, [pc, #92]	; (8008380 <LSM6DSL_AccReadXYZ+0x128>)
 8008322:	61bb      	str	r3, [r7, #24]
    break;
 8008324:	e002      	b.n	800832c <LSM6DSL_AccReadXYZ+0xd4>
  case LSM6DSL_ACC_FULLSCALE_16G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_16G;
 8008326:	4b17      	ldr	r3, [pc, #92]	; (8008384 <LSM6DSL_AccReadXYZ+0x12c>)
 8008328:	61bb      	str	r3, [r7, #24]
    break;    
 800832a:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 800832c:	2300      	movs	r3, #0
 800832e:	77fb      	strb	r3, [r7, #31]
 8008330:	e01a      	b.n	8008368 <LSM6DSL_AccReadXYZ+0x110>
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 8008332:	7ffb      	ldrb	r3, [r7, #31]
 8008334:	005b      	lsls	r3, r3, #1
 8008336:	3320      	adds	r3, #32
 8008338:	443b      	add	r3, r7
 800833a:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 800833e:	ee07 3a90 	vmov	s15, r3
 8008342:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008346:	edd7 7a06 	vldr	s15, [r7, #24]
 800834a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800834e:	7ffb      	ldrb	r3, [r7, #31]
 8008350:	005b      	lsls	r3, r3, #1
 8008352:	687a      	ldr	r2, [r7, #4]
 8008354:	4413      	add	r3, r2
 8008356:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800835a:	ee17 2a90 	vmov	r2, s15
 800835e:	b212      	sxth	r2, r2
 8008360:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 8008362:	7ffb      	ldrb	r3, [r7, #31]
 8008364:	3301      	adds	r3, #1
 8008366:	77fb      	strb	r3, [r7, #31]
 8008368:	7ffb      	ldrb	r3, [r7, #31]
 800836a:	2b02      	cmp	r3, #2
 800836c:	d9e1      	bls.n	8008332 <LSM6DSL_AccReadXYZ+0xda>
  }
}
 800836e:	bf00      	nop
 8008370:	bf00      	nop
 8008372:	3720      	adds	r7, #32
 8008374:	46bd      	mov	sp, r7
 8008376:	bd80      	pop	{r7, pc}
 8008378:	3d79db23 	.word	0x3d79db23
 800837c:	3df9db23 	.word	0x3df9db23
 8008380:	3e79db23 	.word	0x3e79db23
 8008384:	3ef9db23 	.word	0x3ef9db23

08008388 <__NVIC_SetPriority>:
{
 8008388:	b480      	push	{r7}
 800838a:	b083      	sub	sp, #12
 800838c:	af00      	add	r7, sp, #0
 800838e:	4603      	mov	r3, r0
 8008390:	6039      	str	r1, [r7, #0]
 8008392:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008394:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008398:	2b00      	cmp	r3, #0
 800839a:	db0a      	blt.n	80083b2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800839c:	683b      	ldr	r3, [r7, #0]
 800839e:	b2da      	uxtb	r2, r3
 80083a0:	490c      	ldr	r1, [pc, #48]	; (80083d4 <__NVIC_SetPriority+0x4c>)
 80083a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80083a6:	0112      	lsls	r2, r2, #4
 80083a8:	b2d2      	uxtb	r2, r2
 80083aa:	440b      	add	r3, r1
 80083ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80083b0:	e00a      	b.n	80083c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80083b2:	683b      	ldr	r3, [r7, #0]
 80083b4:	b2da      	uxtb	r2, r3
 80083b6:	4908      	ldr	r1, [pc, #32]	; (80083d8 <__NVIC_SetPriority+0x50>)
 80083b8:	79fb      	ldrb	r3, [r7, #7]
 80083ba:	f003 030f 	and.w	r3, r3, #15
 80083be:	3b04      	subs	r3, #4
 80083c0:	0112      	lsls	r2, r2, #4
 80083c2:	b2d2      	uxtb	r2, r2
 80083c4:	440b      	add	r3, r1
 80083c6:	761a      	strb	r2, [r3, #24]
}
 80083c8:	bf00      	nop
 80083ca:	370c      	adds	r7, #12
 80083cc:	46bd      	mov	sp, r7
 80083ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d2:	4770      	bx	lr
 80083d4:	e000e100 	.word	0xe000e100
 80083d8:	e000ed00 	.word	0xe000ed00

080083dc <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80083dc:	b580      	push	{r7, lr}
 80083de:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80083e0:	4b05      	ldr	r3, [pc, #20]	; (80083f8 <SysTick_Handler+0x1c>)
 80083e2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80083e4:	f002 f986 	bl	800a6f4 <xTaskGetSchedulerState>
 80083e8:	4603      	mov	r3, r0
 80083ea:	2b01      	cmp	r3, #1
 80083ec:	d001      	beq.n	80083f2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80083ee:	f003 f973 	bl	800b6d8 <xPortSysTickHandler>
  }
}
 80083f2:	bf00      	nop
 80083f4:	bd80      	pop	{r7, pc}
 80083f6:	bf00      	nop
 80083f8:	e000e010 	.word	0xe000e010

080083fc <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80083fc:	b580      	push	{r7, lr}
 80083fe:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8008400:	2100      	movs	r1, #0
 8008402:	f06f 0004 	mvn.w	r0, #4
 8008406:	f7ff ffbf 	bl	8008388 <__NVIC_SetPriority>
#endif
}
 800840a:	bf00      	nop
 800840c:	bd80      	pop	{r7, pc}
	...

08008410 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8008410:	b480      	push	{r7}
 8008412:	b083      	sub	sp, #12
 8008414:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008416:	f3ef 8305 	mrs	r3, IPSR
 800841a:	603b      	str	r3, [r7, #0]
  return(result);
 800841c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800841e:	2b00      	cmp	r3, #0
 8008420:	d003      	beq.n	800842a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8008422:	f06f 0305 	mvn.w	r3, #5
 8008426:	607b      	str	r3, [r7, #4]
 8008428:	e00c      	b.n	8008444 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800842a:	4b0a      	ldr	r3, [pc, #40]	; (8008454 <osKernelInitialize+0x44>)
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	2b00      	cmp	r3, #0
 8008430:	d105      	bne.n	800843e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8008432:	4b08      	ldr	r3, [pc, #32]	; (8008454 <osKernelInitialize+0x44>)
 8008434:	2201      	movs	r2, #1
 8008436:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8008438:	2300      	movs	r3, #0
 800843a:	607b      	str	r3, [r7, #4]
 800843c:	e002      	b.n	8008444 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800843e:	f04f 33ff 	mov.w	r3, #4294967295
 8008442:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008444:	687b      	ldr	r3, [r7, #4]
}
 8008446:	4618      	mov	r0, r3
 8008448:	370c      	adds	r7, #12
 800844a:	46bd      	mov	sp, r7
 800844c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008450:	4770      	bx	lr
 8008452:	bf00      	nop
 8008454:	2000088c 	.word	0x2000088c

08008458 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8008458:	b580      	push	{r7, lr}
 800845a:	b082      	sub	sp, #8
 800845c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800845e:	f3ef 8305 	mrs	r3, IPSR
 8008462:	603b      	str	r3, [r7, #0]
  return(result);
 8008464:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008466:	2b00      	cmp	r3, #0
 8008468:	d003      	beq.n	8008472 <osKernelStart+0x1a>
    stat = osErrorISR;
 800846a:	f06f 0305 	mvn.w	r3, #5
 800846e:	607b      	str	r3, [r7, #4]
 8008470:	e010      	b.n	8008494 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8008472:	4b0b      	ldr	r3, [pc, #44]	; (80084a0 <osKernelStart+0x48>)
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	2b01      	cmp	r3, #1
 8008478:	d109      	bne.n	800848e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800847a:	f7ff ffbf 	bl	80083fc <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800847e:	4b08      	ldr	r3, [pc, #32]	; (80084a0 <osKernelStart+0x48>)
 8008480:	2202      	movs	r2, #2
 8008482:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8008484:	f001 fcbc 	bl	8009e00 <vTaskStartScheduler>
      stat = osOK;
 8008488:	2300      	movs	r3, #0
 800848a:	607b      	str	r3, [r7, #4]
 800848c:	e002      	b.n	8008494 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800848e:	f04f 33ff 	mov.w	r3, #4294967295
 8008492:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008494:	687b      	ldr	r3, [r7, #4]
}
 8008496:	4618      	mov	r0, r3
 8008498:	3708      	adds	r7, #8
 800849a:	46bd      	mov	sp, r7
 800849c:	bd80      	pop	{r7, pc}
 800849e:	bf00      	nop
 80084a0:	2000088c 	.word	0x2000088c

080084a4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80084a4:	b580      	push	{r7, lr}
 80084a6:	b08e      	sub	sp, #56	; 0x38
 80084a8:	af04      	add	r7, sp, #16
 80084aa:	60f8      	str	r0, [r7, #12]
 80084ac:	60b9      	str	r1, [r7, #8]
 80084ae:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80084b0:	2300      	movs	r3, #0
 80084b2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80084b4:	f3ef 8305 	mrs	r3, IPSR
 80084b8:	617b      	str	r3, [r7, #20]
  return(result);
 80084ba:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d17e      	bne.n	80085be <osThreadNew+0x11a>
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d07b      	beq.n	80085be <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80084c6:	2380      	movs	r3, #128	; 0x80
 80084c8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80084ca:	2318      	movs	r3, #24
 80084cc:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80084ce:	2300      	movs	r3, #0
 80084d0:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80084d2:	f04f 33ff 	mov.w	r3, #4294967295
 80084d6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d045      	beq.n	800856a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d002      	beq.n	80084ec <osThreadNew+0x48>
        name = attr->name;
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	699b      	ldr	r3, [r3, #24]
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d002      	beq.n	80084fa <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	699b      	ldr	r3, [r3, #24]
 80084f8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80084fa:	69fb      	ldr	r3, [r7, #28]
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d008      	beq.n	8008512 <osThreadNew+0x6e>
 8008500:	69fb      	ldr	r3, [r7, #28]
 8008502:	2b38      	cmp	r3, #56	; 0x38
 8008504:	d805      	bhi.n	8008512 <osThreadNew+0x6e>
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	685b      	ldr	r3, [r3, #4]
 800850a:	f003 0301 	and.w	r3, r3, #1
 800850e:	2b00      	cmp	r3, #0
 8008510:	d001      	beq.n	8008516 <osThreadNew+0x72>
        return (NULL);
 8008512:	2300      	movs	r3, #0
 8008514:	e054      	b.n	80085c0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	695b      	ldr	r3, [r3, #20]
 800851a:	2b00      	cmp	r3, #0
 800851c:	d003      	beq.n	8008526 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	695b      	ldr	r3, [r3, #20]
 8008522:	089b      	lsrs	r3, r3, #2
 8008524:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	689b      	ldr	r3, [r3, #8]
 800852a:	2b00      	cmp	r3, #0
 800852c:	d00e      	beq.n	800854c <osThreadNew+0xa8>
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	68db      	ldr	r3, [r3, #12]
 8008532:	2bbf      	cmp	r3, #191	; 0xbf
 8008534:	d90a      	bls.n	800854c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800853a:	2b00      	cmp	r3, #0
 800853c:	d006      	beq.n	800854c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	695b      	ldr	r3, [r3, #20]
 8008542:	2b00      	cmp	r3, #0
 8008544:	d002      	beq.n	800854c <osThreadNew+0xa8>
        mem = 1;
 8008546:	2301      	movs	r3, #1
 8008548:	61bb      	str	r3, [r7, #24]
 800854a:	e010      	b.n	800856e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	689b      	ldr	r3, [r3, #8]
 8008550:	2b00      	cmp	r3, #0
 8008552:	d10c      	bne.n	800856e <osThreadNew+0xca>
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	68db      	ldr	r3, [r3, #12]
 8008558:	2b00      	cmp	r3, #0
 800855a:	d108      	bne.n	800856e <osThreadNew+0xca>
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	691b      	ldr	r3, [r3, #16]
 8008560:	2b00      	cmp	r3, #0
 8008562:	d104      	bne.n	800856e <osThreadNew+0xca>
          mem = 0;
 8008564:	2300      	movs	r3, #0
 8008566:	61bb      	str	r3, [r7, #24]
 8008568:	e001      	b.n	800856e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800856a:	2300      	movs	r3, #0
 800856c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800856e:	69bb      	ldr	r3, [r7, #24]
 8008570:	2b01      	cmp	r3, #1
 8008572:	d110      	bne.n	8008596 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8008578:	687a      	ldr	r2, [r7, #4]
 800857a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800857c:	9202      	str	r2, [sp, #8]
 800857e:	9301      	str	r3, [sp, #4]
 8008580:	69fb      	ldr	r3, [r7, #28]
 8008582:	9300      	str	r3, [sp, #0]
 8008584:	68bb      	ldr	r3, [r7, #8]
 8008586:	6a3a      	ldr	r2, [r7, #32]
 8008588:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800858a:	68f8      	ldr	r0, [r7, #12]
 800858c:	f001 f970 	bl	8009870 <xTaskCreateStatic>
 8008590:	4603      	mov	r3, r0
 8008592:	613b      	str	r3, [r7, #16]
 8008594:	e013      	b.n	80085be <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8008596:	69bb      	ldr	r3, [r7, #24]
 8008598:	2b00      	cmp	r3, #0
 800859a:	d110      	bne.n	80085be <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800859c:	6a3b      	ldr	r3, [r7, #32]
 800859e:	b29a      	uxth	r2, r3
 80085a0:	f107 0310 	add.w	r3, r7, #16
 80085a4:	9301      	str	r3, [sp, #4]
 80085a6:	69fb      	ldr	r3, [r7, #28]
 80085a8:	9300      	str	r3, [sp, #0]
 80085aa:	68bb      	ldr	r3, [r7, #8]
 80085ac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80085ae:	68f8      	ldr	r0, [r7, #12]
 80085b0:	f001 f9bb 	bl	800992a <xTaskCreate>
 80085b4:	4603      	mov	r3, r0
 80085b6:	2b01      	cmp	r3, #1
 80085b8:	d001      	beq.n	80085be <osThreadNew+0x11a>
            hTask = NULL;
 80085ba:	2300      	movs	r3, #0
 80085bc:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80085be:	693b      	ldr	r3, [r7, #16]
}
 80085c0:	4618      	mov	r0, r3
 80085c2:	3728      	adds	r7, #40	; 0x28
 80085c4:	46bd      	mov	sp, r7
 80085c6:	bd80      	pop	{r7, pc}

080085c8 <osThreadTerminate>:
  vTaskDelete (NULL);
#endif
  for (;;);
}

osStatus_t osThreadTerminate (osThreadId_t thread_id) {
 80085c8:	b580      	push	{r7, lr}
 80085ca:	b086      	sub	sp, #24
 80085cc:	af00      	add	r7, sp, #0
 80085ce:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80085d4:	f3ef 8305 	mrs	r3, IPSR
 80085d8:	60bb      	str	r3, [r7, #8]
  return(result);
 80085da:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;
#ifndef USE_FreeRTOS_HEAP_1
  eTaskState tstate;

  if (IS_IRQ()) {
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d003      	beq.n	80085e8 <osThreadTerminate+0x20>
    stat = osErrorISR;
 80085e0:	f06f 0305 	mvn.w	r3, #5
 80085e4:	617b      	str	r3, [r7, #20]
 80085e6:	e017      	b.n	8008618 <osThreadTerminate+0x50>
  }
  else if (hTask == NULL) {
 80085e8:	693b      	ldr	r3, [r7, #16]
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d103      	bne.n	80085f6 <osThreadTerminate+0x2e>
    stat = osErrorParameter;
 80085ee:	f06f 0303 	mvn.w	r3, #3
 80085f2:	617b      	str	r3, [r7, #20]
 80085f4:	e010      	b.n	8008618 <osThreadTerminate+0x50>
  }
  else {
    tstate = eTaskGetState (hTask);
 80085f6:	6938      	ldr	r0, [r7, #16]
 80085f8:	f001 fb9c 	bl	8009d34 <eTaskGetState>
 80085fc:	4603      	mov	r3, r0
 80085fe:	73fb      	strb	r3, [r7, #15]

    if (tstate != eDeleted) {
 8008600:	7bfb      	ldrb	r3, [r7, #15]
 8008602:	2b04      	cmp	r3, #4
 8008604:	d005      	beq.n	8008612 <osThreadTerminate+0x4a>
      stat = osOK;
 8008606:	2300      	movs	r3, #0
 8008608:	617b      	str	r3, [r7, #20]
      vTaskDelete (hTask);
 800860a:	6938      	ldr	r0, [r7, #16]
 800860c:	f001 faec 	bl	8009be8 <vTaskDelete>
 8008610:	e002      	b.n	8008618 <osThreadTerminate+0x50>
    } else {
      stat = osErrorResource;
 8008612:	f06f 0302 	mvn.w	r3, #2
 8008616:	617b      	str	r3, [r7, #20]
  }
#else
  stat = osError;
#endif

  return (stat);
 8008618:	697b      	ldr	r3, [r7, #20]
}
 800861a:	4618      	mov	r0, r3
 800861c:	3718      	adds	r7, #24
 800861e:	46bd      	mov	sp, r7
 8008620:	bd80      	pop	{r7, pc}
	...

08008624 <osThreadFlagsSet>:
  return (count);
}
#endif /* (configUSE_OS2_THREAD_ENUMERATE == 1) */

#if (configUSE_OS2_THREAD_FLAGS == 1)
uint32_t osThreadFlagsSet (osThreadId_t thread_id, uint32_t flags) {
 8008624:	b580      	push	{r7, lr}
 8008626:	b088      	sub	sp, #32
 8008628:	af02      	add	r7, sp, #8
 800862a:	6078      	str	r0, [r7, #4]
 800862c:	6039      	str	r1, [r7, #0]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	617b      	str	r3, [r7, #20]
  uint32_t rflags;
  BaseType_t yield;

  if ((hTask == NULL) || ((flags & THREAD_FLAGS_INVALID_BITS) != 0U)) {
 8008632:	697b      	ldr	r3, [r7, #20]
 8008634:	2b00      	cmp	r3, #0
 8008636:	d002      	beq.n	800863e <osThreadFlagsSet+0x1a>
 8008638:	683b      	ldr	r3, [r7, #0]
 800863a:	2b00      	cmp	r3, #0
 800863c:	da03      	bge.n	8008646 <osThreadFlagsSet+0x22>
    rflags = (uint32_t)osErrorParameter;
 800863e:	f06f 0303 	mvn.w	r3, #3
 8008642:	60fb      	str	r3, [r7, #12]
 8008644:	e035      	b.n	80086b2 <osThreadFlagsSet+0x8e>
  }
  else {
    rflags = (uint32_t)osError;
 8008646:	f04f 33ff 	mov.w	r3, #4294967295
 800864a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800864c:	f3ef 8305 	mrs	r3, IPSR
 8008650:	613b      	str	r3, [r7, #16]
  return(result);
 8008652:	693b      	ldr	r3, [r7, #16]

    if (IS_IRQ()) {
 8008654:	2b00      	cmp	r3, #0
 8008656:	d01f      	beq.n	8008698 <osThreadFlagsSet+0x74>
      yield = pdFALSE;
 8008658:	2300      	movs	r3, #0
 800865a:	60bb      	str	r3, [r7, #8]

      (void)xTaskNotifyFromISR (hTask, flags, eSetBits, &yield);
 800865c:	f107 0308 	add.w	r3, r7, #8
 8008660:	9300      	str	r3, [sp, #0]
 8008662:	2300      	movs	r3, #0
 8008664:	2201      	movs	r2, #1
 8008666:	6839      	ldr	r1, [r7, #0]
 8008668:	6978      	ldr	r0, [r7, #20]
 800866a:	f002 f9ed 	bl	800aa48 <xTaskGenericNotifyFromISR>
      (void)xTaskNotifyAndQueryFromISR (hTask, 0, eNoAction, &rflags, NULL);
 800866e:	f107 030c 	add.w	r3, r7, #12
 8008672:	2200      	movs	r2, #0
 8008674:	9200      	str	r2, [sp, #0]
 8008676:	2200      	movs	r2, #0
 8008678:	2100      	movs	r1, #0
 800867a:	6978      	ldr	r0, [r7, #20]
 800867c:	f002 f9e4 	bl	800aa48 <xTaskGenericNotifyFromISR>

      portYIELD_FROM_ISR (yield);
 8008680:	68bb      	ldr	r3, [r7, #8]
 8008682:	2b00      	cmp	r3, #0
 8008684:	d015      	beq.n	80086b2 <osThreadFlagsSet+0x8e>
 8008686:	4b0d      	ldr	r3, [pc, #52]	; (80086bc <osThreadFlagsSet+0x98>)
 8008688:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800868c:	601a      	str	r2, [r3, #0]
 800868e:	f3bf 8f4f 	dsb	sy
 8008692:	f3bf 8f6f 	isb	sy
 8008696:	e00c      	b.n	80086b2 <osThreadFlagsSet+0x8e>
    }
    else {
      (void)xTaskNotify (hTask, flags, eSetBits);
 8008698:	2300      	movs	r3, #0
 800869a:	2201      	movs	r2, #1
 800869c:	6839      	ldr	r1, [r7, #0]
 800869e:	6978      	ldr	r0, [r7, #20]
 80086a0:	f002 f914 	bl	800a8cc <xTaskGenericNotify>
      (void)xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags);
 80086a4:	f107 030c 	add.w	r3, r7, #12
 80086a8:	2200      	movs	r2, #0
 80086aa:	2100      	movs	r1, #0
 80086ac:	6978      	ldr	r0, [r7, #20]
 80086ae:	f002 f90d 	bl	800a8cc <xTaskGenericNotify>
    }
  }
  /* Return flags after setting */
  return (rflags);
 80086b2:	68fb      	ldr	r3, [r7, #12]
}
 80086b4:	4618      	mov	r0, r3
 80086b6:	3718      	adds	r7, #24
 80086b8:	46bd      	mov	sp, r7
 80086ba:	bd80      	pop	{r7, pc}
 80086bc:	e000ed04 	.word	0xe000ed04

080086c0 <osThreadFlagsWait>:
  }

  return (rflags);
}

uint32_t osThreadFlagsWait (uint32_t flags, uint32_t options, uint32_t timeout) {
 80086c0:	b580      	push	{r7, lr}
 80086c2:	b08c      	sub	sp, #48	; 0x30
 80086c4:	af00      	add	r7, sp, #0
 80086c6:	60f8      	str	r0, [r7, #12]
 80086c8:	60b9      	str	r1, [r7, #8]
 80086ca:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80086cc:	f3ef 8305 	mrs	r3, IPSR
 80086d0:	617b      	str	r3, [r7, #20]
  return(result);
 80086d2:	697b      	ldr	r3, [r7, #20]
  uint32_t rflags, nval;
  uint32_t clear;
  TickType_t t0, td, tout;
  BaseType_t rval;

  if (IS_IRQ()) {
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d003      	beq.n	80086e0 <osThreadFlagsWait+0x20>
    rflags = (uint32_t)osErrorISR;
 80086d8:	f06f 0305 	mvn.w	r3, #5
 80086dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80086de:	e06b      	b.n	80087b8 <osThreadFlagsWait+0xf8>
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	da03      	bge.n	80086ee <osThreadFlagsWait+0x2e>
    rflags = (uint32_t)osErrorParameter;
 80086e6:	f06f 0303 	mvn.w	r3, #3
 80086ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 80086ec:	e064      	b.n	80087b8 <osThreadFlagsWait+0xf8>
  }
  else {
    if ((options & osFlagsNoClear) == osFlagsNoClear) {
 80086ee:	68bb      	ldr	r3, [r7, #8]
 80086f0:	f003 0302 	and.w	r3, r3, #2
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d002      	beq.n	80086fe <osThreadFlagsWait+0x3e>
      clear = 0U;
 80086f8:	2300      	movs	r3, #0
 80086fa:	62bb      	str	r3, [r7, #40]	; 0x28
 80086fc:	e001      	b.n	8008702 <osThreadFlagsWait+0x42>
    } else {
      clear = flags;
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    rflags = 0U;
 8008702:	2300      	movs	r3, #0
 8008704:	62fb      	str	r3, [r7, #44]	; 0x2c
    tout   = timeout;
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	627b      	str	r3, [r7, #36]	; 0x24

    t0 = xTaskGetTickCount();
 800870a:	f001 fc97 	bl	800a03c <xTaskGetTickCount>
 800870e:	6238      	str	r0, [r7, #32]
    do {
      rval = xTaskNotifyWait (0, clear, &nval, tout);
 8008710:	f107 0210 	add.w	r2, r7, #16
 8008714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008716:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008718:	2000      	movs	r0, #0
 800871a:	f002 f877 	bl	800a80c <xTaskNotifyWait>
 800871e:	61f8      	str	r0, [r7, #28]

      if (rval == pdPASS) {
 8008720:	69fb      	ldr	r3, [r7, #28]
 8008722:	2b01      	cmp	r3, #1
 8008724:	d137      	bne.n	8008796 <osThreadFlagsWait+0xd6>
        rflags &= flags;
 8008726:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	4013      	ands	r3, r2
 800872c:	62fb      	str	r3, [r7, #44]	; 0x2c
        rflags |= nval;
 800872e:	693b      	ldr	r3, [r7, #16]
 8008730:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008732:	4313      	orrs	r3, r2
 8008734:	62fb      	str	r3, [r7, #44]	; 0x2c

        if ((options & osFlagsWaitAll) == osFlagsWaitAll) {
 8008736:	68bb      	ldr	r3, [r7, #8]
 8008738:	f003 0301 	and.w	r3, r3, #1
 800873c:	2b00      	cmp	r3, #0
 800873e:	d00c      	beq.n	800875a <osThreadFlagsWait+0x9a>
          if ((flags & rflags) == flags) {
 8008740:	68fa      	ldr	r2, [r7, #12]
 8008742:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008744:	4013      	ands	r3, r2
 8008746:	68fa      	ldr	r2, [r7, #12]
 8008748:	429a      	cmp	r2, r3
 800874a:	d032      	beq.n	80087b2 <osThreadFlagsWait+0xf2>
            break;
          } else {
            if (timeout == 0U) {
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	2b00      	cmp	r3, #0
 8008750:	d10f      	bne.n	8008772 <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 8008752:	f06f 0302 	mvn.w	r3, #2
 8008756:	62fb      	str	r3, [r7, #44]	; 0x2c
              break;
 8008758:	e02e      	b.n	80087b8 <osThreadFlagsWait+0xf8>
            }
          }
        }
        else {
          if ((flags & rflags) != 0) {
 800875a:	68fa      	ldr	r2, [r7, #12]
 800875c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800875e:	4013      	ands	r3, r2
 8008760:	2b00      	cmp	r3, #0
 8008762:	d128      	bne.n	80087b6 <osThreadFlagsWait+0xf6>
            break;
          } else {
            if (timeout == 0U) {
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	2b00      	cmp	r3, #0
 8008768:	d103      	bne.n	8008772 <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 800876a:	f06f 0302 	mvn.w	r3, #2
 800876e:	62fb      	str	r3, [r7, #44]	; 0x2c
              break;
 8008770:	e022      	b.n	80087b8 <osThreadFlagsWait+0xf8>
            }
          }
        }

        /* Update timeout */
        td = xTaskGetTickCount() - t0;
 8008772:	f001 fc63 	bl	800a03c <xTaskGetTickCount>
 8008776:	4602      	mov	r2, r0
 8008778:	6a3b      	ldr	r3, [r7, #32]
 800877a:	1ad3      	subs	r3, r2, r3
 800877c:	61bb      	str	r3, [r7, #24]

        if (td > tout) {
 800877e:	69ba      	ldr	r2, [r7, #24]
 8008780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008782:	429a      	cmp	r2, r3
 8008784:	d902      	bls.n	800878c <osThreadFlagsWait+0xcc>
          tout  = 0;
 8008786:	2300      	movs	r3, #0
 8008788:	627b      	str	r3, [r7, #36]	; 0x24
 800878a:	e00e      	b.n	80087aa <osThreadFlagsWait+0xea>
        } else {
          tout -= td;
 800878c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800878e:	69bb      	ldr	r3, [r7, #24]
 8008790:	1ad3      	subs	r3, r2, r3
 8008792:	627b      	str	r3, [r7, #36]	; 0x24
 8008794:	e009      	b.n	80087aa <osThreadFlagsWait+0xea>
        }
      }
      else {
        if (timeout == 0) {
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	2b00      	cmp	r3, #0
 800879a:	d103      	bne.n	80087a4 <osThreadFlagsWait+0xe4>
          rflags = (uint32_t)osErrorResource;
 800879c:	f06f 0302 	mvn.w	r3, #2
 80087a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80087a2:	e002      	b.n	80087aa <osThreadFlagsWait+0xea>
        } else {
          rflags = (uint32_t)osErrorTimeout;
 80087a4:	f06f 0301 	mvn.w	r3, #1
 80087a8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
      }
    }
    while (rval != pdFAIL);
 80087aa:	69fb      	ldr	r3, [r7, #28]
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d1af      	bne.n	8008710 <osThreadFlagsWait+0x50>
 80087b0:	e002      	b.n	80087b8 <osThreadFlagsWait+0xf8>
            break;
 80087b2:	bf00      	nop
 80087b4:	e000      	b.n	80087b8 <osThreadFlagsWait+0xf8>
            break;
 80087b6:	bf00      	nop
  }

  /* Return flags before clearing */
  return (rflags);
 80087b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80087ba:	4618      	mov	r0, r3
 80087bc:	3730      	adds	r7, #48	; 0x30
 80087be:	46bd      	mov	sp, r7
 80087c0:	bd80      	pop	{r7, pc}

080087c2 <osDelay>:
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80087c2:	b580      	push	{r7, lr}
 80087c4:	b084      	sub	sp, #16
 80087c6:	af00      	add	r7, sp, #0
 80087c8:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80087ca:	f3ef 8305 	mrs	r3, IPSR
 80087ce:	60bb      	str	r3, [r7, #8]
  return(result);
 80087d0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d003      	beq.n	80087de <osDelay+0x1c>
    stat = osErrorISR;
 80087d6:	f06f 0305 	mvn.w	r3, #5
 80087da:	60fb      	str	r3, [r7, #12]
 80087dc:	e007      	b.n	80087ee <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80087de:	2300      	movs	r3, #0
 80087e0:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d002      	beq.n	80087ee <osDelay+0x2c>
      vTaskDelay(ticks);
 80087e8:	6878      	ldr	r0, [r7, #4]
 80087ea:	f001 fa6f 	bl	8009ccc <vTaskDelay>
    }
  }

  return (stat);
 80087ee:	68fb      	ldr	r3, [r7, #12]
}
 80087f0:	4618      	mov	r0, r3
 80087f2:	3710      	adds	r7, #16
 80087f4:	46bd      	mov	sp, r7
 80087f6:	bd80      	pop	{r7, pc}

080087f8 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80087f8:	b580      	push	{r7, lr}
 80087fa:	b08a      	sub	sp, #40	; 0x28
 80087fc:	af02      	add	r7, sp, #8
 80087fe:	60f8      	str	r0, [r7, #12]
 8008800:	60b9      	str	r1, [r7, #8]
 8008802:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8008804:	2300      	movs	r3, #0
 8008806:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008808:	f3ef 8305 	mrs	r3, IPSR
 800880c:	613b      	str	r3, [r7, #16]
  return(result);
 800880e:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8008810:	2b00      	cmp	r3, #0
 8008812:	d15f      	bne.n	80088d4 <osMessageQueueNew+0xdc>
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	2b00      	cmp	r3, #0
 8008818:	d05c      	beq.n	80088d4 <osMessageQueueNew+0xdc>
 800881a:	68bb      	ldr	r3, [r7, #8]
 800881c:	2b00      	cmp	r3, #0
 800881e:	d059      	beq.n	80088d4 <osMessageQueueNew+0xdc>
    mem = -1;
 8008820:	f04f 33ff 	mov.w	r3, #4294967295
 8008824:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	2b00      	cmp	r3, #0
 800882a:	d029      	beq.n	8008880 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	689b      	ldr	r3, [r3, #8]
 8008830:	2b00      	cmp	r3, #0
 8008832:	d012      	beq.n	800885a <osMessageQueueNew+0x62>
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	68db      	ldr	r3, [r3, #12]
 8008838:	2b4f      	cmp	r3, #79	; 0x4f
 800883a:	d90e      	bls.n	800885a <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8008840:	2b00      	cmp	r3, #0
 8008842:	d00a      	beq.n	800885a <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	695a      	ldr	r2, [r3, #20]
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	68b9      	ldr	r1, [r7, #8]
 800884c:	fb01 f303 	mul.w	r3, r1, r3
 8008850:	429a      	cmp	r2, r3
 8008852:	d302      	bcc.n	800885a <osMessageQueueNew+0x62>
        mem = 1;
 8008854:	2301      	movs	r3, #1
 8008856:	61bb      	str	r3, [r7, #24]
 8008858:	e014      	b.n	8008884 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	689b      	ldr	r3, [r3, #8]
 800885e:	2b00      	cmp	r3, #0
 8008860:	d110      	bne.n	8008884 <osMessageQueueNew+0x8c>
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	68db      	ldr	r3, [r3, #12]
 8008866:	2b00      	cmp	r3, #0
 8008868:	d10c      	bne.n	8008884 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800886e:	2b00      	cmp	r3, #0
 8008870:	d108      	bne.n	8008884 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	695b      	ldr	r3, [r3, #20]
 8008876:	2b00      	cmp	r3, #0
 8008878:	d104      	bne.n	8008884 <osMessageQueueNew+0x8c>
          mem = 0;
 800887a:	2300      	movs	r3, #0
 800887c:	61bb      	str	r3, [r7, #24]
 800887e:	e001      	b.n	8008884 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8008880:	2300      	movs	r3, #0
 8008882:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8008884:	69bb      	ldr	r3, [r7, #24]
 8008886:	2b01      	cmp	r3, #1
 8008888:	d10b      	bne.n	80088a2 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	691a      	ldr	r2, [r3, #16]
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	689b      	ldr	r3, [r3, #8]
 8008892:	2100      	movs	r1, #0
 8008894:	9100      	str	r1, [sp, #0]
 8008896:	68b9      	ldr	r1, [r7, #8]
 8008898:	68f8      	ldr	r0, [r7, #12]
 800889a:	f000 fa87 	bl	8008dac <xQueueGenericCreateStatic>
 800889e:	61f8      	str	r0, [r7, #28]
 80088a0:	e008      	b.n	80088b4 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 80088a2:	69bb      	ldr	r3, [r7, #24]
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d105      	bne.n	80088b4 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 80088a8:	2200      	movs	r2, #0
 80088aa:	68b9      	ldr	r1, [r7, #8]
 80088ac:	68f8      	ldr	r0, [r7, #12]
 80088ae:	f000 faf5 	bl	8008e9c <xQueueGenericCreate>
 80088b2:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80088b4:	69fb      	ldr	r3, [r7, #28]
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d00c      	beq.n	80088d4 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d003      	beq.n	80088c8 <osMessageQueueNew+0xd0>
        name = attr->name;
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	617b      	str	r3, [r7, #20]
 80088c6:	e001      	b.n	80088cc <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 80088c8:	2300      	movs	r3, #0
 80088ca:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 80088cc:	6979      	ldr	r1, [r7, #20]
 80088ce:	69f8      	ldr	r0, [r7, #28]
 80088d0:	f000 ff70 	bl	80097b4 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80088d4:	69fb      	ldr	r3, [r7, #28]
}
 80088d6:	4618      	mov	r0, r3
 80088d8:	3720      	adds	r7, #32
 80088da:	46bd      	mov	sp, r7
 80088dc:	bd80      	pop	{r7, pc}
	...

080088e0 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80088e0:	b580      	push	{r7, lr}
 80088e2:	b088      	sub	sp, #32
 80088e4:	af00      	add	r7, sp, #0
 80088e6:	60f8      	str	r0, [r7, #12]
 80088e8:	60b9      	str	r1, [r7, #8]
 80088ea:	603b      	str	r3, [r7, #0]
 80088ec:	4613      	mov	r3, r2
 80088ee:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80088f4:	2300      	movs	r3, #0
 80088f6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80088f8:	f3ef 8305 	mrs	r3, IPSR
 80088fc:	617b      	str	r3, [r7, #20]
  return(result);
 80088fe:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8008900:	2b00      	cmp	r3, #0
 8008902:	d028      	beq.n	8008956 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008904:	69bb      	ldr	r3, [r7, #24]
 8008906:	2b00      	cmp	r3, #0
 8008908:	d005      	beq.n	8008916 <osMessageQueuePut+0x36>
 800890a:	68bb      	ldr	r3, [r7, #8]
 800890c:	2b00      	cmp	r3, #0
 800890e:	d002      	beq.n	8008916 <osMessageQueuePut+0x36>
 8008910:	683b      	ldr	r3, [r7, #0]
 8008912:	2b00      	cmp	r3, #0
 8008914:	d003      	beq.n	800891e <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8008916:	f06f 0303 	mvn.w	r3, #3
 800891a:	61fb      	str	r3, [r7, #28]
 800891c:	e038      	b.n	8008990 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800891e:	2300      	movs	r3, #0
 8008920:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8008922:	f107 0210 	add.w	r2, r7, #16
 8008926:	2300      	movs	r3, #0
 8008928:	68b9      	ldr	r1, [r7, #8]
 800892a:	69b8      	ldr	r0, [r7, #24]
 800892c:	f000 fc12 	bl	8009154 <xQueueGenericSendFromISR>
 8008930:	4603      	mov	r3, r0
 8008932:	2b01      	cmp	r3, #1
 8008934:	d003      	beq.n	800893e <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8008936:	f06f 0302 	mvn.w	r3, #2
 800893a:	61fb      	str	r3, [r7, #28]
 800893c:	e028      	b.n	8008990 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800893e:	693b      	ldr	r3, [r7, #16]
 8008940:	2b00      	cmp	r3, #0
 8008942:	d025      	beq.n	8008990 <osMessageQueuePut+0xb0>
 8008944:	4b15      	ldr	r3, [pc, #84]	; (800899c <osMessageQueuePut+0xbc>)
 8008946:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800894a:	601a      	str	r2, [r3, #0]
 800894c:	f3bf 8f4f 	dsb	sy
 8008950:	f3bf 8f6f 	isb	sy
 8008954:	e01c      	b.n	8008990 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8008956:	69bb      	ldr	r3, [r7, #24]
 8008958:	2b00      	cmp	r3, #0
 800895a:	d002      	beq.n	8008962 <osMessageQueuePut+0x82>
 800895c:	68bb      	ldr	r3, [r7, #8]
 800895e:	2b00      	cmp	r3, #0
 8008960:	d103      	bne.n	800896a <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8008962:	f06f 0303 	mvn.w	r3, #3
 8008966:	61fb      	str	r3, [r7, #28]
 8008968:	e012      	b.n	8008990 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800896a:	2300      	movs	r3, #0
 800896c:	683a      	ldr	r2, [r7, #0]
 800896e:	68b9      	ldr	r1, [r7, #8]
 8008970:	69b8      	ldr	r0, [r7, #24]
 8008972:	f000 faf1 	bl	8008f58 <xQueueGenericSend>
 8008976:	4603      	mov	r3, r0
 8008978:	2b01      	cmp	r3, #1
 800897a:	d009      	beq.n	8008990 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800897c:	683b      	ldr	r3, [r7, #0]
 800897e:	2b00      	cmp	r3, #0
 8008980:	d003      	beq.n	800898a <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8008982:	f06f 0301 	mvn.w	r3, #1
 8008986:	61fb      	str	r3, [r7, #28]
 8008988:	e002      	b.n	8008990 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800898a:	f06f 0302 	mvn.w	r3, #2
 800898e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8008990:	69fb      	ldr	r3, [r7, #28]
}
 8008992:	4618      	mov	r0, r3
 8008994:	3720      	adds	r7, #32
 8008996:	46bd      	mov	sp, r7
 8008998:	bd80      	pop	{r7, pc}
 800899a:	bf00      	nop
 800899c:	e000ed04 	.word	0xe000ed04

080089a0 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80089a0:	b580      	push	{r7, lr}
 80089a2:	b088      	sub	sp, #32
 80089a4:	af00      	add	r7, sp, #0
 80089a6:	60f8      	str	r0, [r7, #12]
 80089a8:	60b9      	str	r1, [r7, #8]
 80089aa:	607a      	str	r2, [r7, #4]
 80089ac:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80089b2:	2300      	movs	r3, #0
 80089b4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80089b6:	f3ef 8305 	mrs	r3, IPSR
 80089ba:	617b      	str	r3, [r7, #20]
  return(result);
 80089bc:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d028      	beq.n	8008a14 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80089c2:	69bb      	ldr	r3, [r7, #24]
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d005      	beq.n	80089d4 <osMessageQueueGet+0x34>
 80089c8:	68bb      	ldr	r3, [r7, #8]
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d002      	beq.n	80089d4 <osMessageQueueGet+0x34>
 80089ce:	683b      	ldr	r3, [r7, #0]
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d003      	beq.n	80089dc <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 80089d4:	f06f 0303 	mvn.w	r3, #3
 80089d8:	61fb      	str	r3, [r7, #28]
 80089da:	e037      	b.n	8008a4c <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 80089dc:	2300      	movs	r3, #0
 80089de:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80089e0:	f107 0310 	add.w	r3, r7, #16
 80089e4:	461a      	mov	r2, r3
 80089e6:	68b9      	ldr	r1, [r7, #8]
 80089e8:	69b8      	ldr	r0, [r7, #24]
 80089ea:	f000 fd2f 	bl	800944c <xQueueReceiveFromISR>
 80089ee:	4603      	mov	r3, r0
 80089f0:	2b01      	cmp	r3, #1
 80089f2:	d003      	beq.n	80089fc <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 80089f4:	f06f 0302 	mvn.w	r3, #2
 80089f8:	61fb      	str	r3, [r7, #28]
 80089fa:	e027      	b.n	8008a4c <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 80089fc:	693b      	ldr	r3, [r7, #16]
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d024      	beq.n	8008a4c <osMessageQueueGet+0xac>
 8008a02:	4b15      	ldr	r3, [pc, #84]	; (8008a58 <osMessageQueueGet+0xb8>)
 8008a04:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a08:	601a      	str	r2, [r3, #0]
 8008a0a:	f3bf 8f4f 	dsb	sy
 8008a0e:	f3bf 8f6f 	isb	sy
 8008a12:	e01b      	b.n	8008a4c <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8008a14:	69bb      	ldr	r3, [r7, #24]
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d002      	beq.n	8008a20 <osMessageQueueGet+0x80>
 8008a1a:	68bb      	ldr	r3, [r7, #8]
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d103      	bne.n	8008a28 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8008a20:	f06f 0303 	mvn.w	r3, #3
 8008a24:	61fb      	str	r3, [r7, #28]
 8008a26:	e011      	b.n	8008a4c <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8008a28:	683a      	ldr	r2, [r7, #0]
 8008a2a:	68b9      	ldr	r1, [r7, #8]
 8008a2c:	69b8      	ldr	r0, [r7, #24]
 8008a2e:	f000 fc2d 	bl	800928c <xQueueReceive>
 8008a32:	4603      	mov	r3, r0
 8008a34:	2b01      	cmp	r3, #1
 8008a36:	d009      	beq.n	8008a4c <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8008a38:	683b      	ldr	r3, [r7, #0]
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d003      	beq.n	8008a46 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8008a3e:	f06f 0301 	mvn.w	r3, #1
 8008a42:	61fb      	str	r3, [r7, #28]
 8008a44:	e002      	b.n	8008a4c <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8008a46:	f06f 0302 	mvn.w	r3, #2
 8008a4a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8008a4c:	69fb      	ldr	r3, [r7, #28]
}
 8008a4e:	4618      	mov	r0, r3
 8008a50:	3720      	adds	r7, #32
 8008a52:	46bd      	mov	sp, r7
 8008a54:	bd80      	pop	{r7, pc}
 8008a56:	bf00      	nop
 8008a58:	e000ed04 	.word	0xe000ed04

08008a5c <osMessageQueueGetSpace>:
  }

  return ((uint32_t)count);
}

uint32_t osMessageQueueGetSpace (osMessageQueueId_t mq_id) {
 8008a5c:	b580      	push	{r7, lr}
 8008a5e:	b08a      	sub	sp, #40	; 0x28
 8008a60:	af00      	add	r7, sp, #0
 8008a62:	6078      	str	r0, [r7, #4]
  StaticQueue_t *mq = (StaticQueue_t *)mq_id;
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	623b      	str	r3, [r7, #32]
  uint32_t space;
  uint32_t isrm;

  if (mq == NULL) {
 8008a68:	6a3b      	ldr	r3, [r7, #32]
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d102      	bne.n	8008a74 <osMessageQueueGetSpace+0x18>
    space = 0U;
 8008a6e:	2300      	movs	r3, #0
 8008a70:	627b      	str	r3, [r7, #36]	; 0x24
 8008a72:	e023      	b.n	8008abc <osMessageQueueGetSpace+0x60>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008a74:	f3ef 8305 	mrs	r3, IPSR
 8008a78:	61bb      	str	r3, [r7, #24]
  return(result);
 8008a7a:	69bb      	ldr	r3, [r7, #24]
  }
  else if (IS_IRQ()) {
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d019      	beq.n	8008ab4 <osMessageQueueGetSpace+0x58>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008a80:	f3ef 8211 	mrs	r2, BASEPRI
 8008a84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a88:	f383 8811 	msr	BASEPRI, r3
 8008a8c:	f3bf 8f6f 	isb	sy
 8008a90:	f3bf 8f4f 	dsb	sy
 8008a94:	613a      	str	r2, [r7, #16]
 8008a96:	60fb      	str	r3, [r7, #12]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008a98:	693b      	ldr	r3, [r7, #16]
    isrm = taskENTER_CRITICAL_FROM_ISR();
 8008a9a:	61fb      	str	r3, [r7, #28]

    /* space = pxQueue->uxLength - pxQueue->uxMessagesWaiting; */
    space = mq->uxDummy4[1] - mq->uxDummy4[0];
 8008a9c:	6a3b      	ldr	r3, [r7, #32]
 8008a9e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008aa0:	6a3b      	ldr	r3, [r7, #32]
 8008aa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008aa4:	1ad3      	subs	r3, r2, r3
 8008aa6:	627b      	str	r3, [r7, #36]	; 0x24
 8008aa8:	69fb      	ldr	r3, [r7, #28]
 8008aaa:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008aac:	697b      	ldr	r3, [r7, #20]
 8008aae:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008ab2:	e003      	b.n	8008abc <osMessageQueueGetSpace+0x60>

    taskEXIT_CRITICAL_FROM_ISR(isrm);
  }
  else {
    space = (uint32_t)uxQueueSpacesAvailable ((QueueHandle_t)mq);
 8008ab4:	6a38      	ldr	r0, [r7, #32]
 8008ab6:	f000 fd49 	bl	800954c <uxQueueSpacesAvailable>
 8008aba:	6278      	str	r0, [r7, #36]	; 0x24
  }

  return (space);
 8008abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008abe:	4618      	mov	r0, r3
 8008ac0:	3728      	adds	r7, #40	; 0x28
 8008ac2:	46bd      	mov	sp, r7
 8008ac4:	bd80      	pop	{r7, pc}

08008ac6 <osMessageQueueReset>:

osStatus_t osMessageQueueReset (osMessageQueueId_t mq_id) {
 8008ac6:	b580      	push	{r7, lr}
 8008ac8:	b086      	sub	sp, #24
 8008aca:	af00      	add	r7, sp, #0
 8008acc:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008ad2:	f3ef 8305 	mrs	r3, IPSR
 8008ad6:	60fb      	str	r3, [r7, #12]
  return(result);
 8008ad8:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d003      	beq.n	8008ae6 <osMessageQueueReset+0x20>
    stat = osErrorISR;
 8008ade:	f06f 0305 	mvn.w	r3, #5
 8008ae2:	617b      	str	r3, [r7, #20]
 8008ae4:	e00c      	b.n	8008b00 <osMessageQueueReset+0x3a>
  }
  else if (hQueue == NULL) {
 8008ae6:	693b      	ldr	r3, [r7, #16]
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d103      	bne.n	8008af4 <osMessageQueueReset+0x2e>
    stat = osErrorParameter;
 8008aec:	f06f 0303 	mvn.w	r3, #3
 8008af0:	617b      	str	r3, [r7, #20]
 8008af2:	e005      	b.n	8008b00 <osMessageQueueReset+0x3a>
  }
  else {
    stat = osOK;
 8008af4:	2300      	movs	r3, #0
 8008af6:	617b      	str	r3, [r7, #20]
    (void)xQueueReset (hQueue);
 8008af8:	2100      	movs	r1, #0
 8008afa:	6938      	ldr	r0, [r7, #16]
 8008afc:	f000 f8ee 	bl	8008cdc <xQueueGenericReset>
  }

  return (stat);
 8008b00:	697b      	ldr	r3, [r7, #20]
}
 8008b02:	4618      	mov	r0, r3
 8008b04:	3718      	adds	r7, #24
 8008b06:	46bd      	mov	sp, r7
 8008b08:	bd80      	pop	{r7, pc}
	...

08008b0c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8008b0c:	b480      	push	{r7}
 8008b0e:	b085      	sub	sp, #20
 8008b10:	af00      	add	r7, sp, #0
 8008b12:	60f8      	str	r0, [r7, #12]
 8008b14:	60b9      	str	r1, [r7, #8]
 8008b16:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	4a07      	ldr	r2, [pc, #28]	; (8008b38 <vApplicationGetIdleTaskMemory+0x2c>)
 8008b1c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8008b1e:	68bb      	ldr	r3, [r7, #8]
 8008b20:	4a06      	ldr	r2, [pc, #24]	; (8008b3c <vApplicationGetIdleTaskMemory+0x30>)
 8008b22:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	2280      	movs	r2, #128	; 0x80
 8008b28:	601a      	str	r2, [r3, #0]
}
 8008b2a:	bf00      	nop
 8008b2c:	3714      	adds	r7, #20
 8008b2e:	46bd      	mov	sp, r7
 8008b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b34:	4770      	bx	lr
 8008b36:	bf00      	nop
 8008b38:	20000890 	.word	0x20000890
 8008b3c:	20000950 	.word	0x20000950

08008b40 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8008b40:	b480      	push	{r7}
 8008b42:	b085      	sub	sp, #20
 8008b44:	af00      	add	r7, sp, #0
 8008b46:	60f8      	str	r0, [r7, #12]
 8008b48:	60b9      	str	r1, [r7, #8]
 8008b4a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	4a07      	ldr	r2, [pc, #28]	; (8008b6c <vApplicationGetTimerTaskMemory+0x2c>)
 8008b50:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8008b52:	68bb      	ldr	r3, [r7, #8]
 8008b54:	4a06      	ldr	r2, [pc, #24]	; (8008b70 <vApplicationGetTimerTaskMemory+0x30>)
 8008b56:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008b5e:	601a      	str	r2, [r3, #0]
}
 8008b60:	bf00      	nop
 8008b62:	3714      	adds	r7, #20
 8008b64:	46bd      	mov	sp, r7
 8008b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b6a:	4770      	bx	lr
 8008b6c:	20000b50 	.word	0x20000b50
 8008b70:	20000c10 	.word	0x20000c10

08008b74 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008b74:	b480      	push	{r7}
 8008b76:	b083      	sub	sp, #12
 8008b78:	af00      	add	r7, sp, #0
 8008b7a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	f103 0208 	add.w	r2, r3, #8
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	f04f 32ff 	mov.w	r2, #4294967295
 8008b8c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	f103 0208 	add.w	r2, r3, #8
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	f103 0208 	add.w	r2, r3, #8
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	2200      	movs	r2, #0
 8008ba6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008ba8:	bf00      	nop
 8008baa:	370c      	adds	r7, #12
 8008bac:	46bd      	mov	sp, r7
 8008bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb2:	4770      	bx	lr

08008bb4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008bb4:	b480      	push	{r7}
 8008bb6:	b083      	sub	sp, #12
 8008bb8:	af00      	add	r7, sp, #0
 8008bba:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	2200      	movs	r2, #0
 8008bc0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008bc2:	bf00      	nop
 8008bc4:	370c      	adds	r7, #12
 8008bc6:	46bd      	mov	sp, r7
 8008bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bcc:	4770      	bx	lr

08008bce <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008bce:	b480      	push	{r7}
 8008bd0:	b085      	sub	sp, #20
 8008bd2:	af00      	add	r7, sp, #0
 8008bd4:	6078      	str	r0, [r7, #4]
 8008bd6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	685b      	ldr	r3, [r3, #4]
 8008bdc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008bde:	683b      	ldr	r3, [r7, #0]
 8008be0:	68fa      	ldr	r2, [r7, #12]
 8008be2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	689a      	ldr	r2, [r3, #8]
 8008be8:	683b      	ldr	r3, [r7, #0]
 8008bea:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	689b      	ldr	r3, [r3, #8]
 8008bf0:	683a      	ldr	r2, [r7, #0]
 8008bf2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	683a      	ldr	r2, [r7, #0]
 8008bf8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008bfa:	683b      	ldr	r3, [r7, #0]
 8008bfc:	687a      	ldr	r2, [r7, #4]
 8008bfe:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	1c5a      	adds	r2, r3, #1
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	601a      	str	r2, [r3, #0]
}
 8008c0a:	bf00      	nop
 8008c0c:	3714      	adds	r7, #20
 8008c0e:	46bd      	mov	sp, r7
 8008c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c14:	4770      	bx	lr

08008c16 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008c16:	b480      	push	{r7}
 8008c18:	b085      	sub	sp, #20
 8008c1a:	af00      	add	r7, sp, #0
 8008c1c:	6078      	str	r0, [r7, #4]
 8008c1e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008c20:	683b      	ldr	r3, [r7, #0]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008c26:	68bb      	ldr	r3, [r7, #8]
 8008c28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c2c:	d103      	bne.n	8008c36 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	691b      	ldr	r3, [r3, #16]
 8008c32:	60fb      	str	r3, [r7, #12]
 8008c34:	e00c      	b.n	8008c50 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	3308      	adds	r3, #8
 8008c3a:	60fb      	str	r3, [r7, #12]
 8008c3c:	e002      	b.n	8008c44 <vListInsert+0x2e>
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	685b      	ldr	r3, [r3, #4]
 8008c42:	60fb      	str	r3, [r7, #12]
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	685b      	ldr	r3, [r3, #4]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	68ba      	ldr	r2, [r7, #8]
 8008c4c:	429a      	cmp	r2, r3
 8008c4e:	d2f6      	bcs.n	8008c3e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	685a      	ldr	r2, [r3, #4]
 8008c54:	683b      	ldr	r3, [r7, #0]
 8008c56:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008c58:	683b      	ldr	r3, [r7, #0]
 8008c5a:	685b      	ldr	r3, [r3, #4]
 8008c5c:	683a      	ldr	r2, [r7, #0]
 8008c5e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008c60:	683b      	ldr	r3, [r7, #0]
 8008c62:	68fa      	ldr	r2, [r7, #12]
 8008c64:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	683a      	ldr	r2, [r7, #0]
 8008c6a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008c6c:	683b      	ldr	r3, [r7, #0]
 8008c6e:	687a      	ldr	r2, [r7, #4]
 8008c70:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	1c5a      	adds	r2, r3, #1
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	601a      	str	r2, [r3, #0]
}
 8008c7c:	bf00      	nop
 8008c7e:	3714      	adds	r7, #20
 8008c80:	46bd      	mov	sp, r7
 8008c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c86:	4770      	bx	lr

08008c88 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008c88:	b480      	push	{r7}
 8008c8a:	b085      	sub	sp, #20
 8008c8c:	af00      	add	r7, sp, #0
 8008c8e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	691b      	ldr	r3, [r3, #16]
 8008c94:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	685b      	ldr	r3, [r3, #4]
 8008c9a:	687a      	ldr	r2, [r7, #4]
 8008c9c:	6892      	ldr	r2, [r2, #8]
 8008c9e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	689b      	ldr	r3, [r3, #8]
 8008ca4:	687a      	ldr	r2, [r7, #4]
 8008ca6:	6852      	ldr	r2, [r2, #4]
 8008ca8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	685b      	ldr	r3, [r3, #4]
 8008cae:	687a      	ldr	r2, [r7, #4]
 8008cb0:	429a      	cmp	r2, r3
 8008cb2:	d103      	bne.n	8008cbc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	689a      	ldr	r2, [r3, #8]
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	2200      	movs	r2, #0
 8008cc0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	1e5a      	subs	r2, r3, #1
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	681b      	ldr	r3, [r3, #0]
}
 8008cd0:	4618      	mov	r0, r3
 8008cd2:	3714      	adds	r7, #20
 8008cd4:	46bd      	mov	sp, r7
 8008cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cda:	4770      	bx	lr

08008cdc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008cdc:	b580      	push	{r7, lr}
 8008cde:	b084      	sub	sp, #16
 8008ce0:	af00      	add	r7, sp, #0
 8008ce2:	6078      	str	r0, [r7, #4]
 8008ce4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d10a      	bne.n	8008d06 <xQueueGenericReset+0x2a>
	__asm volatile
 8008cf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cf4:	f383 8811 	msr	BASEPRI, r3
 8008cf8:	f3bf 8f6f 	isb	sy
 8008cfc:	f3bf 8f4f 	dsb	sy
 8008d00:	60bb      	str	r3, [r7, #8]
}
 8008d02:	bf00      	nop
 8008d04:	e7fe      	b.n	8008d04 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8008d06:	f002 fc55 	bl	800b5b4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	681a      	ldr	r2, [r3, #0]
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d12:	68f9      	ldr	r1, [r7, #12]
 8008d14:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008d16:	fb01 f303 	mul.w	r3, r1, r3
 8008d1a:	441a      	add	r2, r3
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	2200      	movs	r2, #0
 8008d24:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	681a      	ldr	r2, [r3, #0]
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	681a      	ldr	r2, [r3, #0]
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d36:	3b01      	subs	r3, #1
 8008d38:	68f9      	ldr	r1, [r7, #12]
 8008d3a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008d3c:	fb01 f303 	mul.w	r3, r1, r3
 8008d40:	441a      	add	r2, r3
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	22ff      	movs	r2, #255	; 0xff
 8008d4a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	22ff      	movs	r2, #255	; 0xff
 8008d52:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8008d56:	683b      	ldr	r3, [r7, #0]
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d114      	bne.n	8008d86 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	691b      	ldr	r3, [r3, #16]
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d01a      	beq.n	8008d9a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	3310      	adds	r3, #16
 8008d68:	4618      	mov	r0, r3
 8008d6a:	f001 fb01 	bl	800a370 <xTaskRemoveFromEventList>
 8008d6e:	4603      	mov	r3, r0
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d012      	beq.n	8008d9a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008d74:	4b0c      	ldr	r3, [pc, #48]	; (8008da8 <xQueueGenericReset+0xcc>)
 8008d76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008d7a:	601a      	str	r2, [r3, #0]
 8008d7c:	f3bf 8f4f 	dsb	sy
 8008d80:	f3bf 8f6f 	isb	sy
 8008d84:	e009      	b.n	8008d9a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	3310      	adds	r3, #16
 8008d8a:	4618      	mov	r0, r3
 8008d8c:	f7ff fef2 	bl	8008b74 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	3324      	adds	r3, #36	; 0x24
 8008d94:	4618      	mov	r0, r3
 8008d96:	f7ff feed 	bl	8008b74 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008d9a:	f002 fc3b 	bl	800b614 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008d9e:	2301      	movs	r3, #1
}
 8008da0:	4618      	mov	r0, r3
 8008da2:	3710      	adds	r7, #16
 8008da4:	46bd      	mov	sp, r7
 8008da6:	bd80      	pop	{r7, pc}
 8008da8:	e000ed04 	.word	0xe000ed04

08008dac <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008dac:	b580      	push	{r7, lr}
 8008dae:	b08e      	sub	sp, #56	; 0x38
 8008db0:	af02      	add	r7, sp, #8
 8008db2:	60f8      	str	r0, [r7, #12]
 8008db4:	60b9      	str	r1, [r7, #8]
 8008db6:	607a      	str	r2, [r7, #4]
 8008db8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d10a      	bne.n	8008dd6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8008dc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dc4:	f383 8811 	msr	BASEPRI, r3
 8008dc8:	f3bf 8f6f 	isb	sy
 8008dcc:	f3bf 8f4f 	dsb	sy
 8008dd0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008dd2:	bf00      	nop
 8008dd4:	e7fe      	b.n	8008dd4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008dd6:	683b      	ldr	r3, [r7, #0]
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d10a      	bne.n	8008df2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8008ddc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008de0:	f383 8811 	msr	BASEPRI, r3
 8008de4:	f3bf 8f6f 	isb	sy
 8008de8:	f3bf 8f4f 	dsb	sy
 8008dec:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008dee:	bf00      	nop
 8008df0:	e7fe      	b.n	8008df0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d002      	beq.n	8008dfe <xQueueGenericCreateStatic+0x52>
 8008df8:	68bb      	ldr	r3, [r7, #8]
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d001      	beq.n	8008e02 <xQueueGenericCreateStatic+0x56>
 8008dfe:	2301      	movs	r3, #1
 8008e00:	e000      	b.n	8008e04 <xQueueGenericCreateStatic+0x58>
 8008e02:	2300      	movs	r3, #0
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d10a      	bne.n	8008e1e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8008e08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e0c:	f383 8811 	msr	BASEPRI, r3
 8008e10:	f3bf 8f6f 	isb	sy
 8008e14:	f3bf 8f4f 	dsb	sy
 8008e18:	623b      	str	r3, [r7, #32]
}
 8008e1a:	bf00      	nop
 8008e1c:	e7fe      	b.n	8008e1c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d102      	bne.n	8008e2a <xQueueGenericCreateStatic+0x7e>
 8008e24:	68bb      	ldr	r3, [r7, #8]
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d101      	bne.n	8008e2e <xQueueGenericCreateStatic+0x82>
 8008e2a:	2301      	movs	r3, #1
 8008e2c:	e000      	b.n	8008e30 <xQueueGenericCreateStatic+0x84>
 8008e2e:	2300      	movs	r3, #0
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d10a      	bne.n	8008e4a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8008e34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e38:	f383 8811 	msr	BASEPRI, r3
 8008e3c:	f3bf 8f6f 	isb	sy
 8008e40:	f3bf 8f4f 	dsb	sy
 8008e44:	61fb      	str	r3, [r7, #28]
}
 8008e46:	bf00      	nop
 8008e48:	e7fe      	b.n	8008e48 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008e4a:	2350      	movs	r3, #80	; 0x50
 8008e4c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008e4e:	697b      	ldr	r3, [r7, #20]
 8008e50:	2b50      	cmp	r3, #80	; 0x50
 8008e52:	d00a      	beq.n	8008e6a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8008e54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e58:	f383 8811 	msr	BASEPRI, r3
 8008e5c:	f3bf 8f6f 	isb	sy
 8008e60:	f3bf 8f4f 	dsb	sy
 8008e64:	61bb      	str	r3, [r7, #24]
}
 8008e66:	bf00      	nop
 8008e68:	e7fe      	b.n	8008e68 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008e6a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008e6c:	683b      	ldr	r3, [r7, #0]
 8008e6e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8008e70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d00d      	beq.n	8008e92 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008e76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e78:	2201      	movs	r2, #1
 8008e7a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008e7e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8008e82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e84:	9300      	str	r3, [sp, #0]
 8008e86:	4613      	mov	r3, r2
 8008e88:	687a      	ldr	r2, [r7, #4]
 8008e8a:	68b9      	ldr	r1, [r7, #8]
 8008e8c:	68f8      	ldr	r0, [r7, #12]
 8008e8e:	f000 f83f 	bl	8008f10 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008e92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8008e94:	4618      	mov	r0, r3
 8008e96:	3730      	adds	r7, #48	; 0x30
 8008e98:	46bd      	mov	sp, r7
 8008e9a:	bd80      	pop	{r7, pc}

08008e9c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8008e9c:	b580      	push	{r7, lr}
 8008e9e:	b08a      	sub	sp, #40	; 0x28
 8008ea0:	af02      	add	r7, sp, #8
 8008ea2:	60f8      	str	r0, [r7, #12]
 8008ea4:	60b9      	str	r1, [r7, #8]
 8008ea6:	4613      	mov	r3, r2
 8008ea8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d10a      	bne.n	8008ec6 <xQueueGenericCreate+0x2a>
	__asm volatile
 8008eb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008eb4:	f383 8811 	msr	BASEPRI, r3
 8008eb8:	f3bf 8f6f 	isb	sy
 8008ebc:	f3bf 8f4f 	dsb	sy
 8008ec0:	613b      	str	r3, [r7, #16]
}
 8008ec2:	bf00      	nop
 8008ec4:	e7fe      	b.n	8008ec4 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	68ba      	ldr	r2, [r7, #8]
 8008eca:	fb02 f303 	mul.w	r3, r2, r3
 8008ece:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8008ed0:	69fb      	ldr	r3, [r7, #28]
 8008ed2:	3350      	adds	r3, #80	; 0x50
 8008ed4:	4618      	mov	r0, r3
 8008ed6:	f002 fc8f 	bl	800b7f8 <pvPortMalloc>
 8008eda:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8008edc:	69bb      	ldr	r3, [r7, #24]
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d011      	beq.n	8008f06 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8008ee2:	69bb      	ldr	r3, [r7, #24]
 8008ee4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008ee6:	697b      	ldr	r3, [r7, #20]
 8008ee8:	3350      	adds	r3, #80	; 0x50
 8008eea:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8008eec:	69bb      	ldr	r3, [r7, #24]
 8008eee:	2200      	movs	r2, #0
 8008ef0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008ef4:	79fa      	ldrb	r2, [r7, #7]
 8008ef6:	69bb      	ldr	r3, [r7, #24]
 8008ef8:	9300      	str	r3, [sp, #0]
 8008efa:	4613      	mov	r3, r2
 8008efc:	697a      	ldr	r2, [r7, #20]
 8008efe:	68b9      	ldr	r1, [r7, #8]
 8008f00:	68f8      	ldr	r0, [r7, #12]
 8008f02:	f000 f805 	bl	8008f10 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008f06:	69bb      	ldr	r3, [r7, #24]
	}
 8008f08:	4618      	mov	r0, r3
 8008f0a:	3720      	adds	r7, #32
 8008f0c:	46bd      	mov	sp, r7
 8008f0e:	bd80      	pop	{r7, pc}

08008f10 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008f10:	b580      	push	{r7, lr}
 8008f12:	b084      	sub	sp, #16
 8008f14:	af00      	add	r7, sp, #0
 8008f16:	60f8      	str	r0, [r7, #12]
 8008f18:	60b9      	str	r1, [r7, #8]
 8008f1a:	607a      	str	r2, [r7, #4]
 8008f1c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008f1e:	68bb      	ldr	r3, [r7, #8]
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d103      	bne.n	8008f2c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008f24:	69bb      	ldr	r3, [r7, #24]
 8008f26:	69ba      	ldr	r2, [r7, #24]
 8008f28:	601a      	str	r2, [r3, #0]
 8008f2a:	e002      	b.n	8008f32 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008f2c:	69bb      	ldr	r3, [r7, #24]
 8008f2e:	687a      	ldr	r2, [r7, #4]
 8008f30:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008f32:	69bb      	ldr	r3, [r7, #24]
 8008f34:	68fa      	ldr	r2, [r7, #12]
 8008f36:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008f38:	69bb      	ldr	r3, [r7, #24]
 8008f3a:	68ba      	ldr	r2, [r7, #8]
 8008f3c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008f3e:	2101      	movs	r1, #1
 8008f40:	69b8      	ldr	r0, [r7, #24]
 8008f42:	f7ff fecb 	bl	8008cdc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8008f46:	69bb      	ldr	r3, [r7, #24]
 8008f48:	78fa      	ldrb	r2, [r7, #3]
 8008f4a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008f4e:	bf00      	nop
 8008f50:	3710      	adds	r7, #16
 8008f52:	46bd      	mov	sp, r7
 8008f54:	bd80      	pop	{r7, pc}
	...

08008f58 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008f58:	b580      	push	{r7, lr}
 8008f5a:	b08e      	sub	sp, #56	; 0x38
 8008f5c:	af00      	add	r7, sp, #0
 8008f5e:	60f8      	str	r0, [r7, #12]
 8008f60:	60b9      	str	r1, [r7, #8]
 8008f62:	607a      	str	r2, [r7, #4]
 8008f64:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008f66:	2300      	movs	r3, #0
 8008f68:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008f6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d10a      	bne.n	8008f8a <xQueueGenericSend+0x32>
	__asm volatile
 8008f74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f78:	f383 8811 	msr	BASEPRI, r3
 8008f7c:	f3bf 8f6f 	isb	sy
 8008f80:	f3bf 8f4f 	dsb	sy
 8008f84:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008f86:	bf00      	nop
 8008f88:	e7fe      	b.n	8008f88 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008f8a:	68bb      	ldr	r3, [r7, #8]
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d103      	bne.n	8008f98 <xQueueGenericSend+0x40>
 8008f90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d101      	bne.n	8008f9c <xQueueGenericSend+0x44>
 8008f98:	2301      	movs	r3, #1
 8008f9a:	e000      	b.n	8008f9e <xQueueGenericSend+0x46>
 8008f9c:	2300      	movs	r3, #0
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d10a      	bne.n	8008fb8 <xQueueGenericSend+0x60>
	__asm volatile
 8008fa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fa6:	f383 8811 	msr	BASEPRI, r3
 8008faa:	f3bf 8f6f 	isb	sy
 8008fae:	f3bf 8f4f 	dsb	sy
 8008fb2:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008fb4:	bf00      	nop
 8008fb6:	e7fe      	b.n	8008fb6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008fb8:	683b      	ldr	r3, [r7, #0]
 8008fba:	2b02      	cmp	r3, #2
 8008fbc:	d103      	bne.n	8008fc6 <xQueueGenericSend+0x6e>
 8008fbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008fc2:	2b01      	cmp	r3, #1
 8008fc4:	d101      	bne.n	8008fca <xQueueGenericSend+0x72>
 8008fc6:	2301      	movs	r3, #1
 8008fc8:	e000      	b.n	8008fcc <xQueueGenericSend+0x74>
 8008fca:	2300      	movs	r3, #0
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d10a      	bne.n	8008fe6 <xQueueGenericSend+0x8e>
	__asm volatile
 8008fd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fd4:	f383 8811 	msr	BASEPRI, r3
 8008fd8:	f3bf 8f6f 	isb	sy
 8008fdc:	f3bf 8f4f 	dsb	sy
 8008fe0:	623b      	str	r3, [r7, #32]
}
 8008fe2:	bf00      	nop
 8008fe4:	e7fe      	b.n	8008fe4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008fe6:	f001 fb85 	bl	800a6f4 <xTaskGetSchedulerState>
 8008fea:	4603      	mov	r3, r0
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d102      	bne.n	8008ff6 <xQueueGenericSend+0x9e>
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d101      	bne.n	8008ffa <xQueueGenericSend+0xa2>
 8008ff6:	2301      	movs	r3, #1
 8008ff8:	e000      	b.n	8008ffc <xQueueGenericSend+0xa4>
 8008ffa:	2300      	movs	r3, #0
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d10a      	bne.n	8009016 <xQueueGenericSend+0xbe>
	__asm volatile
 8009000:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009004:	f383 8811 	msr	BASEPRI, r3
 8009008:	f3bf 8f6f 	isb	sy
 800900c:	f3bf 8f4f 	dsb	sy
 8009010:	61fb      	str	r3, [r7, #28]
}
 8009012:	bf00      	nop
 8009014:	e7fe      	b.n	8009014 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009016:	f002 facd 	bl	800b5b4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800901a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800901c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800901e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009020:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009022:	429a      	cmp	r2, r3
 8009024:	d302      	bcc.n	800902c <xQueueGenericSend+0xd4>
 8009026:	683b      	ldr	r3, [r7, #0]
 8009028:	2b02      	cmp	r3, #2
 800902a:	d129      	bne.n	8009080 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800902c:	683a      	ldr	r2, [r7, #0]
 800902e:	68b9      	ldr	r1, [r7, #8]
 8009030:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009032:	f000 faae 	bl	8009592 <prvCopyDataToQueue>
 8009036:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009038:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800903a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800903c:	2b00      	cmp	r3, #0
 800903e:	d010      	beq.n	8009062 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009040:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009042:	3324      	adds	r3, #36	; 0x24
 8009044:	4618      	mov	r0, r3
 8009046:	f001 f993 	bl	800a370 <xTaskRemoveFromEventList>
 800904a:	4603      	mov	r3, r0
 800904c:	2b00      	cmp	r3, #0
 800904e:	d013      	beq.n	8009078 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009050:	4b3f      	ldr	r3, [pc, #252]	; (8009150 <xQueueGenericSend+0x1f8>)
 8009052:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009056:	601a      	str	r2, [r3, #0]
 8009058:	f3bf 8f4f 	dsb	sy
 800905c:	f3bf 8f6f 	isb	sy
 8009060:	e00a      	b.n	8009078 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8009062:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009064:	2b00      	cmp	r3, #0
 8009066:	d007      	beq.n	8009078 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009068:	4b39      	ldr	r3, [pc, #228]	; (8009150 <xQueueGenericSend+0x1f8>)
 800906a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800906e:	601a      	str	r2, [r3, #0]
 8009070:	f3bf 8f4f 	dsb	sy
 8009074:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009078:	f002 facc 	bl	800b614 <vPortExitCritical>
				return pdPASS;
 800907c:	2301      	movs	r3, #1
 800907e:	e063      	b.n	8009148 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	2b00      	cmp	r3, #0
 8009084:	d103      	bne.n	800908e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009086:	f002 fac5 	bl	800b614 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800908a:	2300      	movs	r3, #0
 800908c:	e05c      	b.n	8009148 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800908e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009090:	2b00      	cmp	r3, #0
 8009092:	d106      	bne.n	80090a2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009094:	f107 0314 	add.w	r3, r7, #20
 8009098:	4618      	mov	r0, r3
 800909a:	f001 f9cd 	bl	800a438 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800909e:	2301      	movs	r3, #1
 80090a0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80090a2:	f002 fab7 	bl	800b614 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80090a6:	f000 ff1d 	bl	8009ee4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80090aa:	f002 fa83 	bl	800b5b4 <vPortEnterCritical>
 80090ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090b0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80090b4:	b25b      	sxtb	r3, r3
 80090b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090ba:	d103      	bne.n	80090c4 <xQueueGenericSend+0x16c>
 80090bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090be:	2200      	movs	r2, #0
 80090c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80090c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090c6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80090ca:	b25b      	sxtb	r3, r3
 80090cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090d0:	d103      	bne.n	80090da <xQueueGenericSend+0x182>
 80090d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090d4:	2200      	movs	r2, #0
 80090d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80090da:	f002 fa9b 	bl	800b614 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80090de:	1d3a      	adds	r2, r7, #4
 80090e0:	f107 0314 	add.w	r3, r7, #20
 80090e4:	4611      	mov	r1, r2
 80090e6:	4618      	mov	r0, r3
 80090e8:	f001 f9bc 	bl	800a464 <xTaskCheckForTimeOut>
 80090ec:	4603      	mov	r3, r0
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d124      	bne.n	800913c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80090f2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80090f4:	f000 fb45 	bl	8009782 <prvIsQueueFull>
 80090f8:	4603      	mov	r3, r0
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d018      	beq.n	8009130 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80090fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009100:	3310      	adds	r3, #16
 8009102:	687a      	ldr	r2, [r7, #4]
 8009104:	4611      	mov	r1, r2
 8009106:	4618      	mov	r0, r3
 8009108:	f001 f8e2 	bl	800a2d0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800910c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800910e:	f000 fad0 	bl	80096b2 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8009112:	f000 fef5 	bl	8009f00 <xTaskResumeAll>
 8009116:	4603      	mov	r3, r0
 8009118:	2b00      	cmp	r3, #0
 800911a:	f47f af7c 	bne.w	8009016 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800911e:	4b0c      	ldr	r3, [pc, #48]	; (8009150 <xQueueGenericSend+0x1f8>)
 8009120:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009124:	601a      	str	r2, [r3, #0]
 8009126:	f3bf 8f4f 	dsb	sy
 800912a:	f3bf 8f6f 	isb	sy
 800912e:	e772      	b.n	8009016 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009130:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009132:	f000 fabe 	bl	80096b2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009136:	f000 fee3 	bl	8009f00 <xTaskResumeAll>
 800913a:	e76c      	b.n	8009016 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800913c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800913e:	f000 fab8 	bl	80096b2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009142:	f000 fedd 	bl	8009f00 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8009146:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8009148:	4618      	mov	r0, r3
 800914a:	3738      	adds	r7, #56	; 0x38
 800914c:	46bd      	mov	sp, r7
 800914e:	bd80      	pop	{r7, pc}
 8009150:	e000ed04 	.word	0xe000ed04

08009154 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009154:	b580      	push	{r7, lr}
 8009156:	b090      	sub	sp, #64	; 0x40
 8009158:	af00      	add	r7, sp, #0
 800915a:	60f8      	str	r0, [r7, #12]
 800915c:	60b9      	str	r1, [r7, #8]
 800915e:	607a      	str	r2, [r7, #4]
 8009160:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8009166:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009168:	2b00      	cmp	r3, #0
 800916a:	d10a      	bne.n	8009182 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800916c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009170:	f383 8811 	msr	BASEPRI, r3
 8009174:	f3bf 8f6f 	isb	sy
 8009178:	f3bf 8f4f 	dsb	sy
 800917c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800917e:	bf00      	nop
 8009180:	e7fe      	b.n	8009180 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009182:	68bb      	ldr	r3, [r7, #8]
 8009184:	2b00      	cmp	r3, #0
 8009186:	d103      	bne.n	8009190 <xQueueGenericSendFromISR+0x3c>
 8009188:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800918a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800918c:	2b00      	cmp	r3, #0
 800918e:	d101      	bne.n	8009194 <xQueueGenericSendFromISR+0x40>
 8009190:	2301      	movs	r3, #1
 8009192:	e000      	b.n	8009196 <xQueueGenericSendFromISR+0x42>
 8009194:	2300      	movs	r3, #0
 8009196:	2b00      	cmp	r3, #0
 8009198:	d10a      	bne.n	80091b0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800919a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800919e:	f383 8811 	msr	BASEPRI, r3
 80091a2:	f3bf 8f6f 	isb	sy
 80091a6:	f3bf 8f4f 	dsb	sy
 80091aa:	627b      	str	r3, [r7, #36]	; 0x24
}
 80091ac:	bf00      	nop
 80091ae:	e7fe      	b.n	80091ae <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80091b0:	683b      	ldr	r3, [r7, #0]
 80091b2:	2b02      	cmp	r3, #2
 80091b4:	d103      	bne.n	80091be <xQueueGenericSendFromISR+0x6a>
 80091b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80091ba:	2b01      	cmp	r3, #1
 80091bc:	d101      	bne.n	80091c2 <xQueueGenericSendFromISR+0x6e>
 80091be:	2301      	movs	r3, #1
 80091c0:	e000      	b.n	80091c4 <xQueueGenericSendFromISR+0x70>
 80091c2:	2300      	movs	r3, #0
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d10a      	bne.n	80091de <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80091c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091cc:	f383 8811 	msr	BASEPRI, r3
 80091d0:	f3bf 8f6f 	isb	sy
 80091d4:	f3bf 8f4f 	dsb	sy
 80091d8:	623b      	str	r3, [r7, #32]
}
 80091da:	bf00      	nop
 80091dc:	e7fe      	b.n	80091dc <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80091de:	f002 facb 	bl	800b778 <vPortValidateInterruptPriority>
	__asm volatile
 80091e2:	f3ef 8211 	mrs	r2, BASEPRI
 80091e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091ea:	f383 8811 	msr	BASEPRI, r3
 80091ee:	f3bf 8f6f 	isb	sy
 80091f2:	f3bf 8f4f 	dsb	sy
 80091f6:	61fa      	str	r2, [r7, #28]
 80091f8:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 80091fa:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80091fc:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80091fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009200:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009202:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009204:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009206:	429a      	cmp	r2, r3
 8009208:	d302      	bcc.n	8009210 <xQueueGenericSendFromISR+0xbc>
 800920a:	683b      	ldr	r3, [r7, #0]
 800920c:	2b02      	cmp	r3, #2
 800920e:	d12f      	bne.n	8009270 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009210:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009212:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009216:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800921a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800921c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800921e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009220:	683a      	ldr	r2, [r7, #0]
 8009222:	68b9      	ldr	r1, [r7, #8]
 8009224:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009226:	f000 f9b4 	bl	8009592 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800922a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800922e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009232:	d112      	bne.n	800925a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009234:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009238:	2b00      	cmp	r3, #0
 800923a:	d016      	beq.n	800926a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800923c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800923e:	3324      	adds	r3, #36	; 0x24
 8009240:	4618      	mov	r0, r3
 8009242:	f001 f895 	bl	800a370 <xTaskRemoveFromEventList>
 8009246:	4603      	mov	r3, r0
 8009248:	2b00      	cmp	r3, #0
 800924a:	d00e      	beq.n	800926a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	2b00      	cmp	r3, #0
 8009250:	d00b      	beq.n	800926a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	2201      	movs	r2, #1
 8009256:	601a      	str	r2, [r3, #0]
 8009258:	e007      	b.n	800926a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800925a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800925e:	3301      	adds	r3, #1
 8009260:	b2db      	uxtb	r3, r3
 8009262:	b25a      	sxtb	r2, r3
 8009264:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009266:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800926a:	2301      	movs	r3, #1
 800926c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800926e:	e001      	b.n	8009274 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009270:	2300      	movs	r3, #0
 8009272:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009274:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009276:	617b      	str	r3, [r7, #20]
	__asm volatile
 8009278:	697b      	ldr	r3, [r7, #20]
 800927a:	f383 8811 	msr	BASEPRI, r3
}
 800927e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009280:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8009282:	4618      	mov	r0, r3
 8009284:	3740      	adds	r7, #64	; 0x40
 8009286:	46bd      	mov	sp, r7
 8009288:	bd80      	pop	{r7, pc}
	...

0800928c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800928c:	b580      	push	{r7, lr}
 800928e:	b08c      	sub	sp, #48	; 0x30
 8009290:	af00      	add	r7, sp, #0
 8009292:	60f8      	str	r0, [r7, #12]
 8009294:	60b9      	str	r1, [r7, #8]
 8009296:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8009298:	2300      	movs	r3, #0
 800929a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80092a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d10a      	bne.n	80092bc <xQueueReceive+0x30>
	__asm volatile
 80092a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092aa:	f383 8811 	msr	BASEPRI, r3
 80092ae:	f3bf 8f6f 	isb	sy
 80092b2:	f3bf 8f4f 	dsb	sy
 80092b6:	623b      	str	r3, [r7, #32]
}
 80092b8:	bf00      	nop
 80092ba:	e7fe      	b.n	80092ba <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80092bc:	68bb      	ldr	r3, [r7, #8]
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d103      	bne.n	80092ca <xQueueReceive+0x3e>
 80092c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d101      	bne.n	80092ce <xQueueReceive+0x42>
 80092ca:	2301      	movs	r3, #1
 80092cc:	e000      	b.n	80092d0 <xQueueReceive+0x44>
 80092ce:	2300      	movs	r3, #0
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d10a      	bne.n	80092ea <xQueueReceive+0x5e>
	__asm volatile
 80092d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092d8:	f383 8811 	msr	BASEPRI, r3
 80092dc:	f3bf 8f6f 	isb	sy
 80092e0:	f3bf 8f4f 	dsb	sy
 80092e4:	61fb      	str	r3, [r7, #28]
}
 80092e6:	bf00      	nop
 80092e8:	e7fe      	b.n	80092e8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80092ea:	f001 fa03 	bl	800a6f4 <xTaskGetSchedulerState>
 80092ee:	4603      	mov	r3, r0
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d102      	bne.n	80092fa <xQueueReceive+0x6e>
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d101      	bne.n	80092fe <xQueueReceive+0x72>
 80092fa:	2301      	movs	r3, #1
 80092fc:	e000      	b.n	8009300 <xQueueReceive+0x74>
 80092fe:	2300      	movs	r3, #0
 8009300:	2b00      	cmp	r3, #0
 8009302:	d10a      	bne.n	800931a <xQueueReceive+0x8e>
	__asm volatile
 8009304:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009308:	f383 8811 	msr	BASEPRI, r3
 800930c:	f3bf 8f6f 	isb	sy
 8009310:	f3bf 8f4f 	dsb	sy
 8009314:	61bb      	str	r3, [r7, #24]
}
 8009316:	bf00      	nop
 8009318:	e7fe      	b.n	8009318 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800931a:	f002 f94b 	bl	800b5b4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800931e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009320:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009322:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009326:	2b00      	cmp	r3, #0
 8009328:	d01f      	beq.n	800936a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800932a:	68b9      	ldr	r1, [r7, #8]
 800932c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800932e:	f000 f99a 	bl	8009666 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009334:	1e5a      	subs	r2, r3, #1
 8009336:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009338:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800933a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800933c:	691b      	ldr	r3, [r3, #16]
 800933e:	2b00      	cmp	r3, #0
 8009340:	d00f      	beq.n	8009362 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009342:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009344:	3310      	adds	r3, #16
 8009346:	4618      	mov	r0, r3
 8009348:	f001 f812 	bl	800a370 <xTaskRemoveFromEventList>
 800934c:	4603      	mov	r3, r0
 800934e:	2b00      	cmp	r3, #0
 8009350:	d007      	beq.n	8009362 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009352:	4b3d      	ldr	r3, [pc, #244]	; (8009448 <xQueueReceive+0x1bc>)
 8009354:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009358:	601a      	str	r2, [r3, #0]
 800935a:	f3bf 8f4f 	dsb	sy
 800935e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009362:	f002 f957 	bl	800b614 <vPortExitCritical>
				return pdPASS;
 8009366:	2301      	movs	r3, #1
 8009368:	e069      	b.n	800943e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	2b00      	cmp	r3, #0
 800936e:	d103      	bne.n	8009378 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009370:	f002 f950 	bl	800b614 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009374:	2300      	movs	r3, #0
 8009376:	e062      	b.n	800943e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009378:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800937a:	2b00      	cmp	r3, #0
 800937c:	d106      	bne.n	800938c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800937e:	f107 0310 	add.w	r3, r7, #16
 8009382:	4618      	mov	r0, r3
 8009384:	f001 f858 	bl	800a438 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009388:	2301      	movs	r3, #1
 800938a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800938c:	f002 f942 	bl	800b614 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009390:	f000 fda8 	bl	8009ee4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009394:	f002 f90e 	bl	800b5b4 <vPortEnterCritical>
 8009398:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800939a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800939e:	b25b      	sxtb	r3, r3
 80093a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093a4:	d103      	bne.n	80093ae <xQueueReceive+0x122>
 80093a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093a8:	2200      	movs	r2, #0
 80093aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80093ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093b0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80093b4:	b25b      	sxtb	r3, r3
 80093b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093ba:	d103      	bne.n	80093c4 <xQueueReceive+0x138>
 80093bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093be:	2200      	movs	r2, #0
 80093c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80093c4:	f002 f926 	bl	800b614 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80093c8:	1d3a      	adds	r2, r7, #4
 80093ca:	f107 0310 	add.w	r3, r7, #16
 80093ce:	4611      	mov	r1, r2
 80093d0:	4618      	mov	r0, r3
 80093d2:	f001 f847 	bl	800a464 <xTaskCheckForTimeOut>
 80093d6:	4603      	mov	r3, r0
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d123      	bne.n	8009424 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80093dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80093de:	f000 f9ba 	bl	8009756 <prvIsQueueEmpty>
 80093e2:	4603      	mov	r3, r0
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d017      	beq.n	8009418 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80093e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093ea:	3324      	adds	r3, #36	; 0x24
 80093ec:	687a      	ldr	r2, [r7, #4]
 80093ee:	4611      	mov	r1, r2
 80093f0:	4618      	mov	r0, r3
 80093f2:	f000 ff6d 	bl	800a2d0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80093f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80093f8:	f000 f95b 	bl	80096b2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80093fc:	f000 fd80 	bl	8009f00 <xTaskResumeAll>
 8009400:	4603      	mov	r3, r0
 8009402:	2b00      	cmp	r3, #0
 8009404:	d189      	bne.n	800931a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8009406:	4b10      	ldr	r3, [pc, #64]	; (8009448 <xQueueReceive+0x1bc>)
 8009408:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800940c:	601a      	str	r2, [r3, #0]
 800940e:	f3bf 8f4f 	dsb	sy
 8009412:	f3bf 8f6f 	isb	sy
 8009416:	e780      	b.n	800931a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8009418:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800941a:	f000 f94a 	bl	80096b2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800941e:	f000 fd6f 	bl	8009f00 <xTaskResumeAll>
 8009422:	e77a      	b.n	800931a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8009424:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009426:	f000 f944 	bl	80096b2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800942a:	f000 fd69 	bl	8009f00 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800942e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009430:	f000 f991 	bl	8009756 <prvIsQueueEmpty>
 8009434:	4603      	mov	r3, r0
 8009436:	2b00      	cmp	r3, #0
 8009438:	f43f af6f 	beq.w	800931a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800943c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800943e:	4618      	mov	r0, r3
 8009440:	3730      	adds	r7, #48	; 0x30
 8009442:	46bd      	mov	sp, r7
 8009444:	bd80      	pop	{r7, pc}
 8009446:	bf00      	nop
 8009448:	e000ed04 	.word	0xe000ed04

0800944c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800944c:	b580      	push	{r7, lr}
 800944e:	b08e      	sub	sp, #56	; 0x38
 8009450:	af00      	add	r7, sp, #0
 8009452:	60f8      	str	r0, [r7, #12]
 8009454:	60b9      	str	r1, [r7, #8]
 8009456:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800945c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800945e:	2b00      	cmp	r3, #0
 8009460:	d10a      	bne.n	8009478 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8009462:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009466:	f383 8811 	msr	BASEPRI, r3
 800946a:	f3bf 8f6f 	isb	sy
 800946e:	f3bf 8f4f 	dsb	sy
 8009472:	623b      	str	r3, [r7, #32]
}
 8009474:	bf00      	nop
 8009476:	e7fe      	b.n	8009476 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009478:	68bb      	ldr	r3, [r7, #8]
 800947a:	2b00      	cmp	r3, #0
 800947c:	d103      	bne.n	8009486 <xQueueReceiveFromISR+0x3a>
 800947e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009482:	2b00      	cmp	r3, #0
 8009484:	d101      	bne.n	800948a <xQueueReceiveFromISR+0x3e>
 8009486:	2301      	movs	r3, #1
 8009488:	e000      	b.n	800948c <xQueueReceiveFromISR+0x40>
 800948a:	2300      	movs	r3, #0
 800948c:	2b00      	cmp	r3, #0
 800948e:	d10a      	bne.n	80094a6 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8009490:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009494:	f383 8811 	msr	BASEPRI, r3
 8009498:	f3bf 8f6f 	isb	sy
 800949c:	f3bf 8f4f 	dsb	sy
 80094a0:	61fb      	str	r3, [r7, #28]
}
 80094a2:	bf00      	nop
 80094a4:	e7fe      	b.n	80094a4 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80094a6:	f002 f967 	bl	800b778 <vPortValidateInterruptPriority>
	__asm volatile
 80094aa:	f3ef 8211 	mrs	r2, BASEPRI
 80094ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094b2:	f383 8811 	msr	BASEPRI, r3
 80094b6:	f3bf 8f6f 	isb	sy
 80094ba:	f3bf 8f4f 	dsb	sy
 80094be:	61ba      	str	r2, [r7, #24]
 80094c0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80094c2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80094c4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80094c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094ca:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80094cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d02f      	beq.n	8009532 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80094d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094d4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80094d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80094dc:	68b9      	ldr	r1, [r7, #8]
 80094de:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80094e0:	f000 f8c1 	bl	8009666 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80094e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094e6:	1e5a      	subs	r2, r3, #1
 80094e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094ea:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80094ec:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80094f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094f4:	d112      	bne.n	800951c <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80094f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094f8:	691b      	ldr	r3, [r3, #16]
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d016      	beq.n	800952c <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80094fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009500:	3310      	adds	r3, #16
 8009502:	4618      	mov	r0, r3
 8009504:	f000 ff34 	bl	800a370 <xTaskRemoveFromEventList>
 8009508:	4603      	mov	r3, r0
 800950a:	2b00      	cmp	r3, #0
 800950c:	d00e      	beq.n	800952c <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	2b00      	cmp	r3, #0
 8009512:	d00b      	beq.n	800952c <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	2201      	movs	r2, #1
 8009518:	601a      	str	r2, [r3, #0]
 800951a:	e007      	b.n	800952c <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800951c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009520:	3301      	adds	r3, #1
 8009522:	b2db      	uxtb	r3, r3
 8009524:	b25a      	sxtb	r2, r3
 8009526:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009528:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800952c:	2301      	movs	r3, #1
 800952e:	637b      	str	r3, [r7, #52]	; 0x34
 8009530:	e001      	b.n	8009536 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8009532:	2300      	movs	r3, #0
 8009534:	637b      	str	r3, [r7, #52]	; 0x34
 8009536:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009538:	613b      	str	r3, [r7, #16]
	__asm volatile
 800953a:	693b      	ldr	r3, [r7, #16]
 800953c:	f383 8811 	msr	BASEPRI, r3
}
 8009540:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009542:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8009544:	4618      	mov	r0, r3
 8009546:	3738      	adds	r7, #56	; 0x38
 8009548:	46bd      	mov	sp, r7
 800954a:	bd80      	pop	{r7, pc}

0800954c <uxQueueSpacesAvailable>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueSpacesAvailable( const QueueHandle_t xQueue )
{
 800954c:	b580      	push	{r7, lr}
 800954e:	b086      	sub	sp, #24
 8009550:	af00      	add	r7, sp, #0
 8009552:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 8009558:	697b      	ldr	r3, [r7, #20]
 800955a:	2b00      	cmp	r3, #0
 800955c:	d10a      	bne.n	8009574 <uxQueueSpacesAvailable+0x28>
	__asm volatile
 800955e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009562:	f383 8811 	msr	BASEPRI, r3
 8009566:	f3bf 8f6f 	isb	sy
 800956a:	f3bf 8f4f 	dsb	sy
 800956e:	60fb      	str	r3, [r7, #12]
}
 8009570:	bf00      	nop
 8009572:	e7fe      	b.n	8009572 <uxQueueSpacesAvailable+0x26>

	taskENTER_CRITICAL();
 8009574:	f002 f81e 	bl	800b5b4 <vPortEnterCritical>
	{
		uxReturn = pxQueue->uxLength - pxQueue->uxMessagesWaiting;
 8009578:	697b      	ldr	r3, [r7, #20]
 800957a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800957c:	697b      	ldr	r3, [r7, #20]
 800957e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009580:	1ad3      	subs	r3, r2, r3
 8009582:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 8009584:	f002 f846 	bl	800b614 <vPortExitCritical>

	return uxReturn;
 8009588:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800958a:	4618      	mov	r0, r3
 800958c:	3718      	adds	r7, #24
 800958e:	46bd      	mov	sp, r7
 8009590:	bd80      	pop	{r7, pc}

08009592 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009592:	b580      	push	{r7, lr}
 8009594:	b086      	sub	sp, #24
 8009596:	af00      	add	r7, sp, #0
 8009598:	60f8      	str	r0, [r7, #12]
 800959a:	60b9      	str	r1, [r7, #8]
 800959c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800959e:	2300      	movs	r3, #0
 80095a0:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095a6:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d10d      	bne.n	80095cc <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d14d      	bne.n	8009654 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	689b      	ldr	r3, [r3, #8]
 80095bc:	4618      	mov	r0, r3
 80095be:	f001 f8b7 	bl	800a730 <xTaskPriorityDisinherit>
 80095c2:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	2200      	movs	r2, #0
 80095c8:	609a      	str	r2, [r3, #8]
 80095ca:	e043      	b.n	8009654 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d119      	bne.n	8009606 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	6858      	ldr	r0, [r3, #4]
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095da:	461a      	mov	r2, r3
 80095dc:	68b9      	ldr	r1, [r7, #8]
 80095de:	f002 fc18 	bl	800be12 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	685a      	ldr	r2, [r3, #4]
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095ea:	441a      	add	r2, r3
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	685a      	ldr	r2, [r3, #4]
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	689b      	ldr	r3, [r3, #8]
 80095f8:	429a      	cmp	r2, r3
 80095fa:	d32b      	bcc.n	8009654 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	681a      	ldr	r2, [r3, #0]
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	605a      	str	r2, [r3, #4]
 8009604:	e026      	b.n	8009654 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	68d8      	ldr	r0, [r3, #12]
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800960e:	461a      	mov	r2, r3
 8009610:	68b9      	ldr	r1, [r7, #8]
 8009612:	f002 fbfe 	bl	800be12 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	68da      	ldr	r2, [r3, #12]
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800961e:	425b      	negs	r3, r3
 8009620:	441a      	add	r2, r3
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	68da      	ldr	r2, [r3, #12]
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	429a      	cmp	r2, r3
 8009630:	d207      	bcs.n	8009642 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	689a      	ldr	r2, [r3, #8]
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800963a:	425b      	negs	r3, r3
 800963c:	441a      	add	r2, r3
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	2b02      	cmp	r3, #2
 8009646:	d105      	bne.n	8009654 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009648:	693b      	ldr	r3, [r7, #16]
 800964a:	2b00      	cmp	r3, #0
 800964c:	d002      	beq.n	8009654 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800964e:	693b      	ldr	r3, [r7, #16]
 8009650:	3b01      	subs	r3, #1
 8009652:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009654:	693b      	ldr	r3, [r7, #16]
 8009656:	1c5a      	adds	r2, r3, #1
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800965c:	697b      	ldr	r3, [r7, #20]
}
 800965e:	4618      	mov	r0, r3
 8009660:	3718      	adds	r7, #24
 8009662:	46bd      	mov	sp, r7
 8009664:	bd80      	pop	{r7, pc}

08009666 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009666:	b580      	push	{r7, lr}
 8009668:	b082      	sub	sp, #8
 800966a:	af00      	add	r7, sp, #0
 800966c:	6078      	str	r0, [r7, #4]
 800966e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009674:	2b00      	cmp	r3, #0
 8009676:	d018      	beq.n	80096aa <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	68da      	ldr	r2, [r3, #12]
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009680:	441a      	add	r2, r3
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	68da      	ldr	r2, [r3, #12]
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	689b      	ldr	r3, [r3, #8]
 800968e:	429a      	cmp	r2, r3
 8009690:	d303      	bcc.n	800969a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	681a      	ldr	r2, [r3, #0]
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	68d9      	ldr	r1, [r3, #12]
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096a2:	461a      	mov	r2, r3
 80096a4:	6838      	ldr	r0, [r7, #0]
 80096a6:	f002 fbb4 	bl	800be12 <memcpy>
	}
}
 80096aa:	bf00      	nop
 80096ac:	3708      	adds	r7, #8
 80096ae:	46bd      	mov	sp, r7
 80096b0:	bd80      	pop	{r7, pc}

080096b2 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80096b2:	b580      	push	{r7, lr}
 80096b4:	b084      	sub	sp, #16
 80096b6:	af00      	add	r7, sp, #0
 80096b8:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80096ba:	f001 ff7b 	bl	800b5b4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80096c4:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80096c6:	e011      	b.n	80096ec <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d012      	beq.n	80096f6 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	3324      	adds	r3, #36	; 0x24
 80096d4:	4618      	mov	r0, r3
 80096d6:	f000 fe4b 	bl	800a370 <xTaskRemoveFromEventList>
 80096da:	4603      	mov	r3, r0
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d001      	beq.n	80096e4 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80096e0:	f000 ff22 	bl	800a528 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80096e4:	7bfb      	ldrb	r3, [r7, #15]
 80096e6:	3b01      	subs	r3, #1
 80096e8:	b2db      	uxtb	r3, r3
 80096ea:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80096ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	dce9      	bgt.n	80096c8 <prvUnlockQueue+0x16>
 80096f4:	e000      	b.n	80096f8 <prvUnlockQueue+0x46>
					break;
 80096f6:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	22ff      	movs	r2, #255	; 0xff
 80096fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8009700:	f001 ff88 	bl	800b614 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009704:	f001 ff56 	bl	800b5b4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800970e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009710:	e011      	b.n	8009736 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	691b      	ldr	r3, [r3, #16]
 8009716:	2b00      	cmp	r3, #0
 8009718:	d012      	beq.n	8009740 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	3310      	adds	r3, #16
 800971e:	4618      	mov	r0, r3
 8009720:	f000 fe26 	bl	800a370 <xTaskRemoveFromEventList>
 8009724:	4603      	mov	r3, r0
 8009726:	2b00      	cmp	r3, #0
 8009728:	d001      	beq.n	800972e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800972a:	f000 fefd 	bl	800a528 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800972e:	7bbb      	ldrb	r3, [r7, #14]
 8009730:	3b01      	subs	r3, #1
 8009732:	b2db      	uxtb	r3, r3
 8009734:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009736:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800973a:	2b00      	cmp	r3, #0
 800973c:	dce9      	bgt.n	8009712 <prvUnlockQueue+0x60>
 800973e:	e000      	b.n	8009742 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009740:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	22ff      	movs	r2, #255	; 0xff
 8009746:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800974a:	f001 ff63 	bl	800b614 <vPortExitCritical>
}
 800974e:	bf00      	nop
 8009750:	3710      	adds	r7, #16
 8009752:	46bd      	mov	sp, r7
 8009754:	bd80      	pop	{r7, pc}

08009756 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009756:	b580      	push	{r7, lr}
 8009758:	b084      	sub	sp, #16
 800975a:	af00      	add	r7, sp, #0
 800975c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800975e:	f001 ff29 	bl	800b5b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009766:	2b00      	cmp	r3, #0
 8009768:	d102      	bne.n	8009770 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800976a:	2301      	movs	r3, #1
 800976c:	60fb      	str	r3, [r7, #12]
 800976e:	e001      	b.n	8009774 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009770:	2300      	movs	r3, #0
 8009772:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009774:	f001 ff4e 	bl	800b614 <vPortExitCritical>

	return xReturn;
 8009778:	68fb      	ldr	r3, [r7, #12]
}
 800977a:	4618      	mov	r0, r3
 800977c:	3710      	adds	r7, #16
 800977e:	46bd      	mov	sp, r7
 8009780:	bd80      	pop	{r7, pc}

08009782 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009782:	b580      	push	{r7, lr}
 8009784:	b084      	sub	sp, #16
 8009786:	af00      	add	r7, sp, #0
 8009788:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800978a:	f001 ff13 	bl	800b5b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009796:	429a      	cmp	r2, r3
 8009798:	d102      	bne.n	80097a0 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800979a:	2301      	movs	r3, #1
 800979c:	60fb      	str	r3, [r7, #12]
 800979e:	e001      	b.n	80097a4 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80097a0:	2300      	movs	r3, #0
 80097a2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80097a4:	f001 ff36 	bl	800b614 <vPortExitCritical>

	return xReturn;
 80097a8:	68fb      	ldr	r3, [r7, #12]
}
 80097aa:	4618      	mov	r0, r3
 80097ac:	3710      	adds	r7, #16
 80097ae:	46bd      	mov	sp, r7
 80097b0:	bd80      	pop	{r7, pc}
	...

080097b4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80097b4:	b480      	push	{r7}
 80097b6:	b085      	sub	sp, #20
 80097b8:	af00      	add	r7, sp, #0
 80097ba:	6078      	str	r0, [r7, #4]
 80097bc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80097be:	2300      	movs	r3, #0
 80097c0:	60fb      	str	r3, [r7, #12]
 80097c2:	e014      	b.n	80097ee <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80097c4:	4a0f      	ldr	r2, [pc, #60]	; (8009804 <vQueueAddToRegistry+0x50>)
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d10b      	bne.n	80097e8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80097d0:	490c      	ldr	r1, [pc, #48]	; (8009804 <vQueueAddToRegistry+0x50>)
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	683a      	ldr	r2, [r7, #0]
 80097d6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80097da:	4a0a      	ldr	r2, [pc, #40]	; (8009804 <vQueueAddToRegistry+0x50>)
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	00db      	lsls	r3, r3, #3
 80097e0:	4413      	add	r3, r2
 80097e2:	687a      	ldr	r2, [r7, #4]
 80097e4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80097e6:	e006      	b.n	80097f6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	3301      	adds	r3, #1
 80097ec:	60fb      	str	r3, [r7, #12]
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	2b07      	cmp	r3, #7
 80097f2:	d9e7      	bls.n	80097c4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80097f4:	bf00      	nop
 80097f6:	bf00      	nop
 80097f8:	3714      	adds	r7, #20
 80097fa:	46bd      	mov	sp, r7
 80097fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009800:	4770      	bx	lr
 8009802:	bf00      	nop
 8009804:	20001010 	.word	0x20001010

08009808 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009808:	b580      	push	{r7, lr}
 800980a:	b086      	sub	sp, #24
 800980c:	af00      	add	r7, sp, #0
 800980e:	60f8      	str	r0, [r7, #12]
 8009810:	60b9      	str	r1, [r7, #8]
 8009812:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009818:	f001 fecc 	bl	800b5b4 <vPortEnterCritical>
 800981c:	697b      	ldr	r3, [r7, #20]
 800981e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009822:	b25b      	sxtb	r3, r3
 8009824:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009828:	d103      	bne.n	8009832 <vQueueWaitForMessageRestricted+0x2a>
 800982a:	697b      	ldr	r3, [r7, #20]
 800982c:	2200      	movs	r2, #0
 800982e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009832:	697b      	ldr	r3, [r7, #20]
 8009834:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009838:	b25b      	sxtb	r3, r3
 800983a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800983e:	d103      	bne.n	8009848 <vQueueWaitForMessageRestricted+0x40>
 8009840:	697b      	ldr	r3, [r7, #20]
 8009842:	2200      	movs	r2, #0
 8009844:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009848:	f001 fee4 	bl	800b614 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800984c:	697b      	ldr	r3, [r7, #20]
 800984e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009850:	2b00      	cmp	r3, #0
 8009852:	d106      	bne.n	8009862 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009854:	697b      	ldr	r3, [r7, #20]
 8009856:	3324      	adds	r3, #36	; 0x24
 8009858:	687a      	ldr	r2, [r7, #4]
 800985a:	68b9      	ldr	r1, [r7, #8]
 800985c:	4618      	mov	r0, r3
 800985e:	f000 fd5b 	bl	800a318 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8009862:	6978      	ldr	r0, [r7, #20]
 8009864:	f7ff ff25 	bl	80096b2 <prvUnlockQueue>
	}
 8009868:	bf00      	nop
 800986a:	3718      	adds	r7, #24
 800986c:	46bd      	mov	sp, r7
 800986e:	bd80      	pop	{r7, pc}

08009870 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009870:	b580      	push	{r7, lr}
 8009872:	b08e      	sub	sp, #56	; 0x38
 8009874:	af04      	add	r7, sp, #16
 8009876:	60f8      	str	r0, [r7, #12]
 8009878:	60b9      	str	r1, [r7, #8]
 800987a:	607a      	str	r2, [r7, #4]
 800987c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800987e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009880:	2b00      	cmp	r3, #0
 8009882:	d10a      	bne.n	800989a <xTaskCreateStatic+0x2a>
	__asm volatile
 8009884:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009888:	f383 8811 	msr	BASEPRI, r3
 800988c:	f3bf 8f6f 	isb	sy
 8009890:	f3bf 8f4f 	dsb	sy
 8009894:	623b      	str	r3, [r7, #32]
}
 8009896:	bf00      	nop
 8009898:	e7fe      	b.n	8009898 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800989a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800989c:	2b00      	cmp	r3, #0
 800989e:	d10a      	bne.n	80098b6 <xTaskCreateStatic+0x46>
	__asm volatile
 80098a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098a4:	f383 8811 	msr	BASEPRI, r3
 80098a8:	f3bf 8f6f 	isb	sy
 80098ac:	f3bf 8f4f 	dsb	sy
 80098b0:	61fb      	str	r3, [r7, #28]
}
 80098b2:	bf00      	nop
 80098b4:	e7fe      	b.n	80098b4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80098b6:	23c0      	movs	r3, #192	; 0xc0
 80098b8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80098ba:	693b      	ldr	r3, [r7, #16]
 80098bc:	2bc0      	cmp	r3, #192	; 0xc0
 80098be:	d00a      	beq.n	80098d6 <xTaskCreateStatic+0x66>
	__asm volatile
 80098c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098c4:	f383 8811 	msr	BASEPRI, r3
 80098c8:	f3bf 8f6f 	isb	sy
 80098cc:	f3bf 8f4f 	dsb	sy
 80098d0:	61bb      	str	r3, [r7, #24]
}
 80098d2:	bf00      	nop
 80098d4:	e7fe      	b.n	80098d4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80098d6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80098d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d01e      	beq.n	800991c <xTaskCreateStatic+0xac>
 80098de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d01b      	beq.n	800991c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80098e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098e6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80098e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80098ec:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80098ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098f0:	2202      	movs	r2, #2
 80098f2:	f883 20bd 	strb.w	r2, [r3, #189]	; 0xbd
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80098f6:	2300      	movs	r3, #0
 80098f8:	9303      	str	r3, [sp, #12]
 80098fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098fc:	9302      	str	r3, [sp, #8]
 80098fe:	f107 0314 	add.w	r3, r7, #20
 8009902:	9301      	str	r3, [sp, #4]
 8009904:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009906:	9300      	str	r3, [sp, #0]
 8009908:	683b      	ldr	r3, [r7, #0]
 800990a:	687a      	ldr	r2, [r7, #4]
 800990c:	68b9      	ldr	r1, [r7, #8]
 800990e:	68f8      	ldr	r0, [r7, #12]
 8009910:	f000 f850 	bl	80099b4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009914:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009916:	f000 f8f7 	bl	8009b08 <prvAddNewTaskToReadyList>
 800991a:	e001      	b.n	8009920 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800991c:	2300      	movs	r3, #0
 800991e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009920:	697b      	ldr	r3, [r7, #20]
	}
 8009922:	4618      	mov	r0, r3
 8009924:	3728      	adds	r7, #40	; 0x28
 8009926:	46bd      	mov	sp, r7
 8009928:	bd80      	pop	{r7, pc}

0800992a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800992a:	b580      	push	{r7, lr}
 800992c:	b08c      	sub	sp, #48	; 0x30
 800992e:	af04      	add	r7, sp, #16
 8009930:	60f8      	str	r0, [r7, #12]
 8009932:	60b9      	str	r1, [r7, #8]
 8009934:	603b      	str	r3, [r7, #0]
 8009936:	4613      	mov	r3, r2
 8009938:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800993a:	88fb      	ldrh	r3, [r7, #6]
 800993c:	009b      	lsls	r3, r3, #2
 800993e:	4618      	mov	r0, r3
 8009940:	f001 ff5a 	bl	800b7f8 <pvPortMalloc>
 8009944:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009946:	697b      	ldr	r3, [r7, #20]
 8009948:	2b00      	cmp	r3, #0
 800994a:	d00e      	beq.n	800996a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800994c:	20c0      	movs	r0, #192	; 0xc0
 800994e:	f001 ff53 	bl	800b7f8 <pvPortMalloc>
 8009952:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009954:	69fb      	ldr	r3, [r7, #28]
 8009956:	2b00      	cmp	r3, #0
 8009958:	d003      	beq.n	8009962 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800995a:	69fb      	ldr	r3, [r7, #28]
 800995c:	697a      	ldr	r2, [r7, #20]
 800995e:	631a      	str	r2, [r3, #48]	; 0x30
 8009960:	e005      	b.n	800996e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009962:	6978      	ldr	r0, [r7, #20]
 8009964:	f002 f814 	bl	800b990 <vPortFree>
 8009968:	e001      	b.n	800996e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800996a:	2300      	movs	r3, #0
 800996c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800996e:	69fb      	ldr	r3, [r7, #28]
 8009970:	2b00      	cmp	r3, #0
 8009972:	d017      	beq.n	80099a4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009974:	69fb      	ldr	r3, [r7, #28]
 8009976:	2200      	movs	r2, #0
 8009978:	f883 20bd 	strb.w	r2, [r3, #189]	; 0xbd
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800997c:	88fa      	ldrh	r2, [r7, #6]
 800997e:	2300      	movs	r3, #0
 8009980:	9303      	str	r3, [sp, #12]
 8009982:	69fb      	ldr	r3, [r7, #28]
 8009984:	9302      	str	r3, [sp, #8]
 8009986:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009988:	9301      	str	r3, [sp, #4]
 800998a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800998c:	9300      	str	r3, [sp, #0]
 800998e:	683b      	ldr	r3, [r7, #0]
 8009990:	68b9      	ldr	r1, [r7, #8]
 8009992:	68f8      	ldr	r0, [r7, #12]
 8009994:	f000 f80e 	bl	80099b4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009998:	69f8      	ldr	r0, [r7, #28]
 800999a:	f000 f8b5 	bl	8009b08 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800999e:	2301      	movs	r3, #1
 80099a0:	61bb      	str	r3, [r7, #24]
 80099a2:	e002      	b.n	80099aa <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80099a4:	f04f 33ff 	mov.w	r3, #4294967295
 80099a8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80099aa:	69bb      	ldr	r3, [r7, #24]
	}
 80099ac:	4618      	mov	r0, r3
 80099ae:	3720      	adds	r7, #32
 80099b0:	46bd      	mov	sp, r7
 80099b2:	bd80      	pop	{r7, pc}

080099b4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80099b4:	b580      	push	{r7, lr}
 80099b6:	b088      	sub	sp, #32
 80099b8:	af00      	add	r7, sp, #0
 80099ba:	60f8      	str	r0, [r7, #12]
 80099bc:	60b9      	str	r1, [r7, #8]
 80099be:	607a      	str	r2, [r7, #4]
 80099c0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80099c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099c4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	009b      	lsls	r3, r3, #2
 80099ca:	461a      	mov	r2, r3
 80099cc:	21a5      	movs	r1, #165	; 0xa5
 80099ce:	f002 fa2e 	bl	800be2e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80099d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80099dc:	3b01      	subs	r3, #1
 80099de:	009b      	lsls	r3, r3, #2
 80099e0:	4413      	add	r3, r2
 80099e2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80099e4:	69bb      	ldr	r3, [r7, #24]
 80099e6:	f023 0307 	bic.w	r3, r3, #7
 80099ea:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80099ec:	69bb      	ldr	r3, [r7, #24]
 80099ee:	f003 0307 	and.w	r3, r3, #7
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d00a      	beq.n	8009a0c <prvInitialiseNewTask+0x58>
	__asm volatile
 80099f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099fa:	f383 8811 	msr	BASEPRI, r3
 80099fe:	f3bf 8f6f 	isb	sy
 8009a02:	f3bf 8f4f 	dsb	sy
 8009a06:	617b      	str	r3, [r7, #20]
}
 8009a08:	bf00      	nop
 8009a0a:	e7fe      	b.n	8009a0a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009a0c:	68bb      	ldr	r3, [r7, #8]
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d01f      	beq.n	8009a52 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009a12:	2300      	movs	r3, #0
 8009a14:	61fb      	str	r3, [r7, #28]
 8009a16:	e012      	b.n	8009a3e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009a18:	68ba      	ldr	r2, [r7, #8]
 8009a1a:	69fb      	ldr	r3, [r7, #28]
 8009a1c:	4413      	add	r3, r2
 8009a1e:	7819      	ldrb	r1, [r3, #0]
 8009a20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009a22:	69fb      	ldr	r3, [r7, #28]
 8009a24:	4413      	add	r3, r2
 8009a26:	3334      	adds	r3, #52	; 0x34
 8009a28:	460a      	mov	r2, r1
 8009a2a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009a2c:	68ba      	ldr	r2, [r7, #8]
 8009a2e:	69fb      	ldr	r3, [r7, #28]
 8009a30:	4413      	add	r3, r2
 8009a32:	781b      	ldrb	r3, [r3, #0]
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d006      	beq.n	8009a46 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009a38:	69fb      	ldr	r3, [r7, #28]
 8009a3a:	3301      	adds	r3, #1
 8009a3c:	61fb      	str	r3, [r7, #28]
 8009a3e:	69fb      	ldr	r3, [r7, #28]
 8009a40:	2b0f      	cmp	r3, #15
 8009a42:	d9e9      	bls.n	8009a18 <prvInitialiseNewTask+0x64>
 8009a44:	e000      	b.n	8009a48 <prvInitialiseNewTask+0x94>
			{
				break;
 8009a46:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009a48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a4a:	2200      	movs	r2, #0
 8009a4c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009a50:	e003      	b.n	8009a5a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009a52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a54:	2200      	movs	r2, #0
 8009a56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009a5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a5c:	2b37      	cmp	r3, #55	; 0x37
 8009a5e:	d901      	bls.n	8009a64 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009a60:	2337      	movs	r3, #55	; 0x37
 8009a62:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009a64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a66:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009a68:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009a6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a6c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009a6e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8009a70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a72:	2200      	movs	r2, #0
 8009a74:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009a76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a78:	3304      	adds	r3, #4
 8009a7a:	4618      	mov	r0, r3
 8009a7c:	f7ff f89a 	bl	8008bb4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009a80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a82:	3318      	adds	r3, #24
 8009a84:	4618      	mov	r0, r3
 8009a86:	f7ff f895 	bl	8008bb4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009a8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009a8e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009a90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a92:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009a96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a98:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009a9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009a9e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 8009aa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009aa2:	2200      	movs	r2, #0
 8009aa4:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009aa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009aa8:	2200      	movs	r2, #0
 8009aaa:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009aae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ab0:	2200      	movs	r2, #0
 8009ab2:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8009ab6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ab8:	3358      	adds	r3, #88	; 0x58
 8009aba:	2260      	movs	r2, #96	; 0x60
 8009abc:	2100      	movs	r1, #0
 8009abe:	4618      	mov	r0, r3
 8009ac0:	f002 f9b5 	bl	800be2e <memset>
 8009ac4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ac6:	4a0d      	ldr	r2, [pc, #52]	; (8009afc <prvInitialiseNewTask+0x148>)
 8009ac8:	65da      	str	r2, [r3, #92]	; 0x5c
 8009aca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009acc:	4a0c      	ldr	r2, [pc, #48]	; (8009b00 <prvInitialiseNewTask+0x14c>)
 8009ace:	661a      	str	r2, [r3, #96]	; 0x60
 8009ad0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ad2:	4a0c      	ldr	r2, [pc, #48]	; (8009b04 <prvInitialiseNewTask+0x150>)
 8009ad4:	665a      	str	r2, [r3, #100]	; 0x64
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009ad6:	683a      	ldr	r2, [r7, #0]
 8009ad8:	68f9      	ldr	r1, [r7, #12]
 8009ada:	69b8      	ldr	r0, [r7, #24]
 8009adc:	f001 fc3a 	bl	800b354 <pxPortInitialiseStack>
 8009ae0:	4602      	mov	r2, r0
 8009ae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ae4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009ae6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d002      	beq.n	8009af2 <prvInitialiseNewTask+0x13e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009aec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009aee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009af0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009af2:	bf00      	nop
 8009af4:	3720      	adds	r7, #32
 8009af6:	46bd      	mov	sp, r7
 8009af8:	bd80      	pop	{r7, pc}
 8009afa:	bf00      	nop
 8009afc:	0800d72c 	.word	0x0800d72c
 8009b00:	0800d74c 	.word	0x0800d74c
 8009b04:	0800d70c 	.word	0x0800d70c

08009b08 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009b08:	b580      	push	{r7, lr}
 8009b0a:	b082      	sub	sp, #8
 8009b0c:	af00      	add	r7, sp, #0
 8009b0e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009b10:	f001 fd50 	bl	800b5b4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009b14:	4b2d      	ldr	r3, [pc, #180]	; (8009bcc <prvAddNewTaskToReadyList+0xc4>)
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	3301      	adds	r3, #1
 8009b1a:	4a2c      	ldr	r2, [pc, #176]	; (8009bcc <prvAddNewTaskToReadyList+0xc4>)
 8009b1c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009b1e:	4b2c      	ldr	r3, [pc, #176]	; (8009bd0 <prvAddNewTaskToReadyList+0xc8>)
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d109      	bne.n	8009b3a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009b26:	4a2a      	ldr	r2, [pc, #168]	; (8009bd0 <prvAddNewTaskToReadyList+0xc8>)
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009b2c:	4b27      	ldr	r3, [pc, #156]	; (8009bcc <prvAddNewTaskToReadyList+0xc4>)
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	2b01      	cmp	r3, #1
 8009b32:	d110      	bne.n	8009b56 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009b34:	f000 fd1c 	bl	800a570 <prvInitialiseTaskLists>
 8009b38:	e00d      	b.n	8009b56 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009b3a:	4b26      	ldr	r3, [pc, #152]	; (8009bd4 <prvAddNewTaskToReadyList+0xcc>)
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d109      	bne.n	8009b56 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009b42:	4b23      	ldr	r3, [pc, #140]	; (8009bd0 <prvAddNewTaskToReadyList+0xc8>)
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b4c:	429a      	cmp	r2, r3
 8009b4e:	d802      	bhi.n	8009b56 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009b50:	4a1f      	ldr	r2, [pc, #124]	; (8009bd0 <prvAddNewTaskToReadyList+0xc8>)
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009b56:	4b20      	ldr	r3, [pc, #128]	; (8009bd8 <prvAddNewTaskToReadyList+0xd0>)
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	3301      	adds	r3, #1
 8009b5c:	4a1e      	ldr	r2, [pc, #120]	; (8009bd8 <prvAddNewTaskToReadyList+0xd0>)
 8009b5e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009b60:	4b1d      	ldr	r3, [pc, #116]	; (8009bd8 <prvAddNewTaskToReadyList+0xd0>)
 8009b62:	681a      	ldr	r2, [r3, #0]
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b6c:	4b1b      	ldr	r3, [pc, #108]	; (8009bdc <prvAddNewTaskToReadyList+0xd4>)
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	429a      	cmp	r2, r3
 8009b72:	d903      	bls.n	8009b7c <prvAddNewTaskToReadyList+0x74>
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b78:	4a18      	ldr	r2, [pc, #96]	; (8009bdc <prvAddNewTaskToReadyList+0xd4>)
 8009b7a:	6013      	str	r3, [r2, #0]
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b80:	4613      	mov	r3, r2
 8009b82:	009b      	lsls	r3, r3, #2
 8009b84:	4413      	add	r3, r2
 8009b86:	009b      	lsls	r3, r3, #2
 8009b88:	4a15      	ldr	r2, [pc, #84]	; (8009be0 <prvAddNewTaskToReadyList+0xd8>)
 8009b8a:	441a      	add	r2, r3
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	3304      	adds	r3, #4
 8009b90:	4619      	mov	r1, r3
 8009b92:	4610      	mov	r0, r2
 8009b94:	f7ff f81b 	bl	8008bce <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009b98:	f001 fd3c 	bl	800b614 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009b9c:	4b0d      	ldr	r3, [pc, #52]	; (8009bd4 <prvAddNewTaskToReadyList+0xcc>)
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d00e      	beq.n	8009bc2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009ba4:	4b0a      	ldr	r3, [pc, #40]	; (8009bd0 <prvAddNewTaskToReadyList+0xc8>)
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bae:	429a      	cmp	r2, r3
 8009bb0:	d207      	bcs.n	8009bc2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009bb2:	4b0c      	ldr	r3, [pc, #48]	; (8009be4 <prvAddNewTaskToReadyList+0xdc>)
 8009bb4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009bb8:	601a      	str	r2, [r3, #0]
 8009bba:	f3bf 8f4f 	dsb	sy
 8009bbe:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009bc2:	bf00      	nop
 8009bc4:	3708      	adds	r7, #8
 8009bc6:	46bd      	mov	sp, r7
 8009bc8:	bd80      	pop	{r7, pc}
 8009bca:	bf00      	nop
 8009bcc:	20001524 	.word	0x20001524
 8009bd0:	20001050 	.word	0x20001050
 8009bd4:	20001530 	.word	0x20001530
 8009bd8:	20001540 	.word	0x20001540
 8009bdc:	2000152c 	.word	0x2000152c
 8009be0:	20001054 	.word	0x20001054
 8009be4:	e000ed04 	.word	0xe000ed04

08009be8 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8009be8:	b580      	push	{r7, lr}
 8009bea:	b084      	sub	sp, #16
 8009bec:	af00      	add	r7, sp, #0
 8009bee:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8009bf0:	f001 fce0 	bl	800b5b4 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d102      	bne.n	8009c00 <vTaskDelete+0x18>
 8009bfa:	4b2c      	ldr	r3, [pc, #176]	; (8009cac <vTaskDelete+0xc4>)
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	e000      	b.n	8009c02 <vTaskDelete+0x1a>
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	3304      	adds	r3, #4
 8009c08:	4618      	mov	r0, r3
 8009c0a:	f7ff f83d 	bl	8008c88 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d004      	beq.n	8009c20 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	3318      	adds	r3, #24
 8009c1a:	4618      	mov	r0, r3
 8009c1c:	f7ff f834 	bl	8008c88 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8009c20:	4b23      	ldr	r3, [pc, #140]	; (8009cb0 <vTaskDelete+0xc8>)
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	3301      	adds	r3, #1
 8009c26:	4a22      	ldr	r2, [pc, #136]	; (8009cb0 <vTaskDelete+0xc8>)
 8009c28:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8009c2a:	4b20      	ldr	r3, [pc, #128]	; (8009cac <vTaskDelete+0xc4>)
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	68fa      	ldr	r2, [r7, #12]
 8009c30:	429a      	cmp	r2, r3
 8009c32:	d10b      	bne.n	8009c4c <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	3304      	adds	r3, #4
 8009c38:	4619      	mov	r1, r3
 8009c3a:	481e      	ldr	r0, [pc, #120]	; (8009cb4 <vTaskDelete+0xcc>)
 8009c3c:	f7fe ffc7 	bl	8008bce <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8009c40:	4b1d      	ldr	r3, [pc, #116]	; (8009cb8 <vTaskDelete+0xd0>)
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	3301      	adds	r3, #1
 8009c46:	4a1c      	ldr	r2, [pc, #112]	; (8009cb8 <vTaskDelete+0xd0>)
 8009c48:	6013      	str	r3, [r2, #0]
 8009c4a:	e009      	b.n	8009c60 <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8009c4c:	4b1b      	ldr	r3, [pc, #108]	; (8009cbc <vTaskDelete+0xd4>)
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	3b01      	subs	r3, #1
 8009c52:	4a1a      	ldr	r2, [pc, #104]	; (8009cbc <vTaskDelete+0xd4>)
 8009c54:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 8009c56:	68f8      	ldr	r0, [r7, #12]
 8009c58:	f000 fcf8 	bl	800a64c <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8009c5c:	f000 fd2a 	bl	800a6b4 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 8009c60:	f001 fcd8 	bl	800b614 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8009c64:	4b16      	ldr	r3, [pc, #88]	; (8009cc0 <vTaskDelete+0xd8>)
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d01b      	beq.n	8009ca4 <vTaskDelete+0xbc>
		{
			if( pxTCB == pxCurrentTCB )
 8009c6c:	4b0f      	ldr	r3, [pc, #60]	; (8009cac <vTaskDelete+0xc4>)
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	68fa      	ldr	r2, [r7, #12]
 8009c72:	429a      	cmp	r2, r3
 8009c74:	d116      	bne.n	8009ca4 <vTaskDelete+0xbc>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8009c76:	4b13      	ldr	r3, [pc, #76]	; (8009cc4 <vTaskDelete+0xdc>)
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d00a      	beq.n	8009c94 <vTaskDelete+0xac>
	__asm volatile
 8009c7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c82:	f383 8811 	msr	BASEPRI, r3
 8009c86:	f3bf 8f6f 	isb	sy
 8009c8a:	f3bf 8f4f 	dsb	sy
 8009c8e:	60bb      	str	r3, [r7, #8]
}
 8009c90:	bf00      	nop
 8009c92:	e7fe      	b.n	8009c92 <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 8009c94:	4b0c      	ldr	r3, [pc, #48]	; (8009cc8 <vTaskDelete+0xe0>)
 8009c96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009c9a:	601a      	str	r2, [r3, #0]
 8009c9c:	f3bf 8f4f 	dsb	sy
 8009ca0:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009ca4:	bf00      	nop
 8009ca6:	3710      	adds	r7, #16
 8009ca8:	46bd      	mov	sp, r7
 8009caa:	bd80      	pop	{r7, pc}
 8009cac:	20001050 	.word	0x20001050
 8009cb0:	20001540 	.word	0x20001540
 8009cb4:	200014f8 	.word	0x200014f8
 8009cb8:	2000150c 	.word	0x2000150c
 8009cbc:	20001524 	.word	0x20001524
 8009cc0:	20001530 	.word	0x20001530
 8009cc4:	2000154c 	.word	0x2000154c
 8009cc8:	e000ed04 	.word	0xe000ed04

08009ccc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009ccc:	b580      	push	{r7, lr}
 8009cce:	b084      	sub	sp, #16
 8009cd0:	af00      	add	r7, sp, #0
 8009cd2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009cd4:	2300      	movs	r3, #0
 8009cd6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d017      	beq.n	8009d0e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009cde:	4b13      	ldr	r3, [pc, #76]	; (8009d2c <vTaskDelay+0x60>)
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d00a      	beq.n	8009cfc <vTaskDelay+0x30>
	__asm volatile
 8009ce6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cea:	f383 8811 	msr	BASEPRI, r3
 8009cee:	f3bf 8f6f 	isb	sy
 8009cf2:	f3bf 8f4f 	dsb	sy
 8009cf6:	60bb      	str	r3, [r7, #8]
}
 8009cf8:	bf00      	nop
 8009cfa:	e7fe      	b.n	8009cfa <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8009cfc:	f000 f8f2 	bl	8009ee4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009d00:	2100      	movs	r1, #0
 8009d02:	6878      	ldr	r0, [r7, #4]
 8009d04:	f000 ff84 	bl	800ac10 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009d08:	f000 f8fa 	bl	8009f00 <xTaskResumeAll>
 8009d0c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d107      	bne.n	8009d24 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8009d14:	4b06      	ldr	r3, [pc, #24]	; (8009d30 <vTaskDelay+0x64>)
 8009d16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009d1a:	601a      	str	r2, [r3, #0]
 8009d1c:	f3bf 8f4f 	dsb	sy
 8009d20:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009d24:	bf00      	nop
 8009d26:	3710      	adds	r7, #16
 8009d28:	46bd      	mov	sp, r7
 8009d2a:	bd80      	pop	{r7, pc}
 8009d2c:	2000154c 	.word	0x2000154c
 8009d30:	e000ed04 	.word	0xe000ed04

08009d34 <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 8009d34:	b580      	push	{r7, lr}
 8009d36:	b088      	sub	sp, #32
 8009d38:	af00      	add	r7, sp, #0
 8009d3a:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
	const TCB_t * const pxTCB = xTask;
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	61bb      	str	r3, [r7, #24]

		configASSERT( pxTCB );
 8009d40:	69bb      	ldr	r3, [r7, #24]
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d10a      	bne.n	8009d5c <eTaskGetState+0x28>
	__asm volatile
 8009d46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d4a:	f383 8811 	msr	BASEPRI, r3
 8009d4e:	f3bf 8f6f 	isb	sy
 8009d52:	f3bf 8f4f 	dsb	sy
 8009d56:	60bb      	str	r3, [r7, #8]
}
 8009d58:	bf00      	nop
 8009d5a:	e7fe      	b.n	8009d5a <eTaskGetState+0x26>

		if( pxTCB == pxCurrentTCB )
 8009d5c:	4b23      	ldr	r3, [pc, #140]	; (8009dec <eTaskGetState+0xb8>)
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	69ba      	ldr	r2, [r7, #24]
 8009d62:	429a      	cmp	r2, r3
 8009d64:	d102      	bne.n	8009d6c <eTaskGetState+0x38>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 8009d66:	2300      	movs	r3, #0
 8009d68:	77fb      	strb	r3, [r7, #31]
 8009d6a:	e03a      	b.n	8009de2 <eTaskGetState+0xae>
		}
		else
		{
			taskENTER_CRITICAL();
 8009d6c:	f001 fc22 	bl	800b5b4 <vPortEnterCritical>
			{
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 8009d70:	69bb      	ldr	r3, [r7, #24]
 8009d72:	695b      	ldr	r3, [r3, #20]
 8009d74:	617b      	str	r3, [r7, #20]
				pxDelayedList = pxDelayedTaskList;
 8009d76:	4b1e      	ldr	r3, [pc, #120]	; (8009df0 <eTaskGetState+0xbc>)
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	613b      	str	r3, [r7, #16]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 8009d7c:	4b1d      	ldr	r3, [pc, #116]	; (8009df4 <eTaskGetState+0xc0>)
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 8009d82:	f001 fc47 	bl	800b614 <vPortExitCritical>

			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 8009d86:	697a      	ldr	r2, [r7, #20]
 8009d88:	693b      	ldr	r3, [r7, #16]
 8009d8a:	429a      	cmp	r2, r3
 8009d8c:	d003      	beq.n	8009d96 <eTaskGetState+0x62>
 8009d8e:	697a      	ldr	r2, [r7, #20]
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	429a      	cmp	r2, r3
 8009d94:	d102      	bne.n	8009d9c <eTaskGetState+0x68>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 8009d96:	2302      	movs	r3, #2
 8009d98:	77fb      	strb	r3, [r7, #31]
 8009d9a:	e022      	b.n	8009de2 <eTaskGetState+0xae>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 8009d9c:	697b      	ldr	r3, [r7, #20]
 8009d9e:	4a16      	ldr	r2, [pc, #88]	; (8009df8 <eTaskGetState+0xc4>)
 8009da0:	4293      	cmp	r3, r2
 8009da2:	d112      	bne.n	8009dca <eTaskGetState+0x96>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it blocked
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 8009da4:	69bb      	ldr	r3, [r7, #24]
 8009da6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d10b      	bne.n	8009dc4 <eTaskGetState+0x90>
						{
							/* The task does not appear on the event list item of
							and of the RTOS objects, but could still be in the
							blocked state if it is waiting on its notification
							rather than waiting on an object. */
							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8009dac:	69bb      	ldr	r3, [r7, #24]
 8009dae:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 8009db2:	b2db      	uxtb	r3, r3
 8009db4:	2b01      	cmp	r3, #1
 8009db6:	d102      	bne.n	8009dbe <eTaskGetState+0x8a>
							{
								eReturn = eBlocked;
 8009db8:	2302      	movs	r3, #2
 8009dba:	77fb      	strb	r3, [r7, #31]
 8009dbc:	e011      	b.n	8009de2 <eTaskGetState+0xae>
							}
							else
							{
								eReturn = eSuspended;
 8009dbe:	2303      	movs	r3, #3
 8009dc0:	77fb      	strb	r3, [r7, #31]
 8009dc2:	e00e      	b.n	8009de2 <eTaskGetState+0xae>
						}
						#endif
					}
					else
					{
						eReturn = eBlocked;
 8009dc4:	2302      	movs	r3, #2
 8009dc6:	77fb      	strb	r3, [r7, #31]
 8009dc8:	e00b      	b.n	8009de2 <eTaskGetState+0xae>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 8009dca:	697b      	ldr	r3, [r7, #20]
 8009dcc:	4a0b      	ldr	r2, [pc, #44]	; (8009dfc <eTaskGetState+0xc8>)
 8009dce:	4293      	cmp	r3, r2
 8009dd0:	d002      	beq.n	8009dd8 <eTaskGetState+0xa4>
 8009dd2:	697b      	ldr	r3, [r7, #20]
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	d102      	bne.n	8009dde <eTaskGetState+0xaa>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 8009dd8:	2304      	movs	r3, #4
 8009dda:	77fb      	strb	r3, [r7, #31]
 8009ddc:	e001      	b.n	8009de2 <eTaskGetState+0xae>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 8009dde:	2301      	movs	r3, #1
 8009de0:	77fb      	strb	r3, [r7, #31]
			}
		}

		return eReturn;
 8009de2:	7ffb      	ldrb	r3, [r7, #31]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8009de4:	4618      	mov	r0, r3
 8009de6:	3720      	adds	r7, #32
 8009de8:	46bd      	mov	sp, r7
 8009dea:	bd80      	pop	{r7, pc}
 8009dec:	20001050 	.word	0x20001050
 8009df0:	200014dc 	.word	0x200014dc
 8009df4:	200014e0 	.word	0x200014e0
 8009df8:	20001510 	.word	0x20001510
 8009dfc:	200014f8 	.word	0x200014f8

08009e00 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009e00:	b580      	push	{r7, lr}
 8009e02:	b08a      	sub	sp, #40	; 0x28
 8009e04:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009e06:	2300      	movs	r3, #0
 8009e08:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009e0a:	2300      	movs	r3, #0
 8009e0c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009e0e:	463a      	mov	r2, r7
 8009e10:	1d39      	adds	r1, r7, #4
 8009e12:	f107 0308 	add.w	r3, r7, #8
 8009e16:	4618      	mov	r0, r3
 8009e18:	f7fe fe78 	bl	8008b0c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009e1c:	6839      	ldr	r1, [r7, #0]
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	68ba      	ldr	r2, [r7, #8]
 8009e22:	9202      	str	r2, [sp, #8]
 8009e24:	9301      	str	r3, [sp, #4]
 8009e26:	2300      	movs	r3, #0
 8009e28:	9300      	str	r3, [sp, #0]
 8009e2a:	2300      	movs	r3, #0
 8009e2c:	460a      	mov	r2, r1
 8009e2e:	4925      	ldr	r1, [pc, #148]	; (8009ec4 <vTaskStartScheduler+0xc4>)
 8009e30:	4825      	ldr	r0, [pc, #148]	; (8009ec8 <vTaskStartScheduler+0xc8>)
 8009e32:	f7ff fd1d 	bl	8009870 <xTaskCreateStatic>
 8009e36:	4603      	mov	r3, r0
 8009e38:	4a24      	ldr	r2, [pc, #144]	; (8009ecc <vTaskStartScheduler+0xcc>)
 8009e3a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009e3c:	4b23      	ldr	r3, [pc, #140]	; (8009ecc <vTaskStartScheduler+0xcc>)
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d002      	beq.n	8009e4a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009e44:	2301      	movs	r3, #1
 8009e46:	617b      	str	r3, [r7, #20]
 8009e48:	e001      	b.n	8009e4e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009e4a:	2300      	movs	r3, #0
 8009e4c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8009e4e:	697b      	ldr	r3, [r7, #20]
 8009e50:	2b01      	cmp	r3, #1
 8009e52:	d102      	bne.n	8009e5a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8009e54:	f000 ff30 	bl	800acb8 <xTimerCreateTimerTask>
 8009e58:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009e5a:	697b      	ldr	r3, [r7, #20]
 8009e5c:	2b01      	cmp	r3, #1
 8009e5e:	d11d      	bne.n	8009e9c <vTaskStartScheduler+0x9c>
	__asm volatile
 8009e60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e64:	f383 8811 	msr	BASEPRI, r3
 8009e68:	f3bf 8f6f 	isb	sy
 8009e6c:	f3bf 8f4f 	dsb	sy
 8009e70:	613b      	str	r3, [r7, #16]
}
 8009e72:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009e74:	4b16      	ldr	r3, [pc, #88]	; (8009ed0 <vTaskStartScheduler+0xd0>)
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	3358      	adds	r3, #88	; 0x58
 8009e7a:	4a16      	ldr	r2, [pc, #88]	; (8009ed4 <vTaskStartScheduler+0xd4>)
 8009e7c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009e7e:	4b16      	ldr	r3, [pc, #88]	; (8009ed8 <vTaskStartScheduler+0xd8>)
 8009e80:	f04f 32ff 	mov.w	r2, #4294967295
 8009e84:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009e86:	4b15      	ldr	r3, [pc, #84]	; (8009edc <vTaskStartScheduler+0xdc>)
 8009e88:	2201      	movs	r2, #1
 8009e8a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009e8c:	4b14      	ldr	r3, [pc, #80]	; (8009ee0 <vTaskStartScheduler+0xe0>)
 8009e8e:	2200      	movs	r2, #0
 8009e90:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 8009e92:	f7f6 fb9f 	bl	80005d4 <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009e96:	f001 faeb 	bl	800b470 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009e9a:	e00e      	b.n	8009eba <vTaskStartScheduler+0xba>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009e9c:	697b      	ldr	r3, [r7, #20]
 8009e9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ea2:	d10a      	bne.n	8009eba <vTaskStartScheduler+0xba>
	__asm volatile
 8009ea4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ea8:	f383 8811 	msr	BASEPRI, r3
 8009eac:	f3bf 8f6f 	isb	sy
 8009eb0:	f3bf 8f4f 	dsb	sy
 8009eb4:	60fb      	str	r3, [r7, #12]
}
 8009eb6:	bf00      	nop
 8009eb8:	e7fe      	b.n	8009eb8 <vTaskStartScheduler+0xb8>
}
 8009eba:	bf00      	nop
 8009ebc:	3718      	adds	r7, #24
 8009ebe:	46bd      	mov	sp, r7
 8009ec0:	bd80      	pop	{r7, pc}
 8009ec2:	bf00      	nop
 8009ec4:	0800d57c 	.word	0x0800d57c
 8009ec8:	0800a541 	.word	0x0800a541
 8009ecc:	20001548 	.word	0x20001548
 8009ed0:	20001050 	.word	0x20001050
 8009ed4:	20000048 	.word	0x20000048
 8009ed8:	20001544 	.word	0x20001544
 8009edc:	20001530 	.word	0x20001530
 8009ee0:	20001528 	.word	0x20001528

08009ee4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009ee4:	b480      	push	{r7}
 8009ee6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8009ee8:	4b04      	ldr	r3, [pc, #16]	; (8009efc <vTaskSuspendAll+0x18>)
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	3301      	adds	r3, #1
 8009eee:	4a03      	ldr	r2, [pc, #12]	; (8009efc <vTaskSuspendAll+0x18>)
 8009ef0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8009ef2:	bf00      	nop
 8009ef4:	46bd      	mov	sp, r7
 8009ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009efa:	4770      	bx	lr
 8009efc:	2000154c 	.word	0x2000154c

08009f00 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009f00:	b580      	push	{r7, lr}
 8009f02:	b084      	sub	sp, #16
 8009f04:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009f06:	2300      	movs	r3, #0
 8009f08:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009f0a:	2300      	movs	r3, #0
 8009f0c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009f0e:	4b42      	ldr	r3, [pc, #264]	; (800a018 <xTaskResumeAll+0x118>)
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d10a      	bne.n	8009f2c <xTaskResumeAll+0x2c>
	__asm volatile
 8009f16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f1a:	f383 8811 	msr	BASEPRI, r3
 8009f1e:	f3bf 8f6f 	isb	sy
 8009f22:	f3bf 8f4f 	dsb	sy
 8009f26:	603b      	str	r3, [r7, #0]
}
 8009f28:	bf00      	nop
 8009f2a:	e7fe      	b.n	8009f2a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009f2c:	f001 fb42 	bl	800b5b4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009f30:	4b39      	ldr	r3, [pc, #228]	; (800a018 <xTaskResumeAll+0x118>)
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	3b01      	subs	r3, #1
 8009f36:	4a38      	ldr	r2, [pc, #224]	; (800a018 <xTaskResumeAll+0x118>)
 8009f38:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009f3a:	4b37      	ldr	r3, [pc, #220]	; (800a018 <xTaskResumeAll+0x118>)
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d162      	bne.n	800a008 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009f42:	4b36      	ldr	r3, [pc, #216]	; (800a01c <xTaskResumeAll+0x11c>)
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d05e      	beq.n	800a008 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009f4a:	e02f      	b.n	8009fac <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009f4c:	4b34      	ldr	r3, [pc, #208]	; (800a020 <xTaskResumeAll+0x120>)
 8009f4e:	68db      	ldr	r3, [r3, #12]
 8009f50:	68db      	ldr	r3, [r3, #12]
 8009f52:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	3318      	adds	r3, #24
 8009f58:	4618      	mov	r0, r3
 8009f5a:	f7fe fe95 	bl	8008c88 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	3304      	adds	r3, #4
 8009f62:	4618      	mov	r0, r3
 8009f64:	f7fe fe90 	bl	8008c88 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f6c:	4b2d      	ldr	r3, [pc, #180]	; (800a024 <xTaskResumeAll+0x124>)
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	429a      	cmp	r2, r3
 8009f72:	d903      	bls.n	8009f7c <xTaskResumeAll+0x7c>
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f78:	4a2a      	ldr	r2, [pc, #168]	; (800a024 <xTaskResumeAll+0x124>)
 8009f7a:	6013      	str	r3, [r2, #0]
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f80:	4613      	mov	r3, r2
 8009f82:	009b      	lsls	r3, r3, #2
 8009f84:	4413      	add	r3, r2
 8009f86:	009b      	lsls	r3, r3, #2
 8009f88:	4a27      	ldr	r2, [pc, #156]	; (800a028 <xTaskResumeAll+0x128>)
 8009f8a:	441a      	add	r2, r3
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	3304      	adds	r3, #4
 8009f90:	4619      	mov	r1, r3
 8009f92:	4610      	mov	r0, r2
 8009f94:	f7fe fe1b 	bl	8008bce <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f9c:	4b23      	ldr	r3, [pc, #140]	; (800a02c <xTaskResumeAll+0x12c>)
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fa2:	429a      	cmp	r2, r3
 8009fa4:	d302      	bcc.n	8009fac <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8009fa6:	4b22      	ldr	r3, [pc, #136]	; (800a030 <xTaskResumeAll+0x130>)
 8009fa8:	2201      	movs	r2, #1
 8009faa:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009fac:	4b1c      	ldr	r3, [pc, #112]	; (800a020 <xTaskResumeAll+0x120>)
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d1cb      	bne.n	8009f4c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	d001      	beq.n	8009fbe <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009fba:	f000 fb7b 	bl	800a6b4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8009fbe:	4b1d      	ldr	r3, [pc, #116]	; (800a034 <xTaskResumeAll+0x134>)
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d010      	beq.n	8009fec <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009fca:	f000 f847 	bl	800a05c <xTaskIncrementTick>
 8009fce:	4603      	mov	r3, r0
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d002      	beq.n	8009fda <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8009fd4:	4b16      	ldr	r3, [pc, #88]	; (800a030 <xTaskResumeAll+0x130>)
 8009fd6:	2201      	movs	r2, #1
 8009fd8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	3b01      	subs	r3, #1
 8009fde:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d1f1      	bne.n	8009fca <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8009fe6:	4b13      	ldr	r3, [pc, #76]	; (800a034 <xTaskResumeAll+0x134>)
 8009fe8:	2200      	movs	r2, #0
 8009fea:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009fec:	4b10      	ldr	r3, [pc, #64]	; (800a030 <xTaskResumeAll+0x130>)
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d009      	beq.n	800a008 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009ff4:	2301      	movs	r3, #1
 8009ff6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009ff8:	4b0f      	ldr	r3, [pc, #60]	; (800a038 <xTaskResumeAll+0x138>)
 8009ffa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009ffe:	601a      	str	r2, [r3, #0]
 800a000:	f3bf 8f4f 	dsb	sy
 800a004:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a008:	f001 fb04 	bl	800b614 <vPortExitCritical>

	return xAlreadyYielded;
 800a00c:	68bb      	ldr	r3, [r7, #8]
}
 800a00e:	4618      	mov	r0, r3
 800a010:	3710      	adds	r7, #16
 800a012:	46bd      	mov	sp, r7
 800a014:	bd80      	pop	{r7, pc}
 800a016:	bf00      	nop
 800a018:	2000154c 	.word	0x2000154c
 800a01c:	20001524 	.word	0x20001524
 800a020:	200014e4 	.word	0x200014e4
 800a024:	2000152c 	.word	0x2000152c
 800a028:	20001054 	.word	0x20001054
 800a02c:	20001050 	.word	0x20001050
 800a030:	20001538 	.word	0x20001538
 800a034:	20001534 	.word	0x20001534
 800a038:	e000ed04 	.word	0xe000ed04

0800a03c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800a03c:	b480      	push	{r7}
 800a03e:	b083      	sub	sp, #12
 800a040:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800a042:	4b05      	ldr	r3, [pc, #20]	; (800a058 <xTaskGetTickCount+0x1c>)
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800a048:	687b      	ldr	r3, [r7, #4]
}
 800a04a:	4618      	mov	r0, r3
 800a04c:	370c      	adds	r7, #12
 800a04e:	46bd      	mov	sp, r7
 800a050:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a054:	4770      	bx	lr
 800a056:	bf00      	nop
 800a058:	20001528 	.word	0x20001528

0800a05c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a05c:	b580      	push	{r7, lr}
 800a05e:	b086      	sub	sp, #24
 800a060:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a062:	2300      	movs	r3, #0
 800a064:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a066:	4b4f      	ldr	r3, [pc, #316]	; (800a1a4 <xTaskIncrementTick+0x148>)
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	f040 808f 	bne.w	800a18e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a070:	4b4d      	ldr	r3, [pc, #308]	; (800a1a8 <xTaskIncrementTick+0x14c>)
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	3301      	adds	r3, #1
 800a076:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a078:	4a4b      	ldr	r2, [pc, #300]	; (800a1a8 <xTaskIncrementTick+0x14c>)
 800a07a:	693b      	ldr	r3, [r7, #16]
 800a07c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a07e:	693b      	ldr	r3, [r7, #16]
 800a080:	2b00      	cmp	r3, #0
 800a082:	d120      	bne.n	800a0c6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800a084:	4b49      	ldr	r3, [pc, #292]	; (800a1ac <xTaskIncrementTick+0x150>)
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d00a      	beq.n	800a0a4 <xTaskIncrementTick+0x48>
	__asm volatile
 800a08e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a092:	f383 8811 	msr	BASEPRI, r3
 800a096:	f3bf 8f6f 	isb	sy
 800a09a:	f3bf 8f4f 	dsb	sy
 800a09e:	603b      	str	r3, [r7, #0]
}
 800a0a0:	bf00      	nop
 800a0a2:	e7fe      	b.n	800a0a2 <xTaskIncrementTick+0x46>
 800a0a4:	4b41      	ldr	r3, [pc, #260]	; (800a1ac <xTaskIncrementTick+0x150>)
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	60fb      	str	r3, [r7, #12]
 800a0aa:	4b41      	ldr	r3, [pc, #260]	; (800a1b0 <xTaskIncrementTick+0x154>)
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	4a3f      	ldr	r2, [pc, #252]	; (800a1ac <xTaskIncrementTick+0x150>)
 800a0b0:	6013      	str	r3, [r2, #0]
 800a0b2:	4a3f      	ldr	r2, [pc, #252]	; (800a1b0 <xTaskIncrementTick+0x154>)
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	6013      	str	r3, [r2, #0]
 800a0b8:	4b3e      	ldr	r3, [pc, #248]	; (800a1b4 <xTaskIncrementTick+0x158>)
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	3301      	adds	r3, #1
 800a0be:	4a3d      	ldr	r2, [pc, #244]	; (800a1b4 <xTaskIncrementTick+0x158>)
 800a0c0:	6013      	str	r3, [r2, #0]
 800a0c2:	f000 faf7 	bl	800a6b4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a0c6:	4b3c      	ldr	r3, [pc, #240]	; (800a1b8 <xTaskIncrementTick+0x15c>)
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	693a      	ldr	r2, [r7, #16]
 800a0cc:	429a      	cmp	r2, r3
 800a0ce:	d349      	bcc.n	800a164 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a0d0:	4b36      	ldr	r3, [pc, #216]	; (800a1ac <xTaskIncrementTick+0x150>)
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d104      	bne.n	800a0e4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a0da:	4b37      	ldr	r3, [pc, #220]	; (800a1b8 <xTaskIncrementTick+0x15c>)
 800a0dc:	f04f 32ff 	mov.w	r2, #4294967295
 800a0e0:	601a      	str	r2, [r3, #0]
					break;
 800a0e2:	e03f      	b.n	800a164 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a0e4:	4b31      	ldr	r3, [pc, #196]	; (800a1ac <xTaskIncrementTick+0x150>)
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	68db      	ldr	r3, [r3, #12]
 800a0ea:	68db      	ldr	r3, [r3, #12]
 800a0ec:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a0ee:	68bb      	ldr	r3, [r7, #8]
 800a0f0:	685b      	ldr	r3, [r3, #4]
 800a0f2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a0f4:	693a      	ldr	r2, [r7, #16]
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	429a      	cmp	r2, r3
 800a0fa:	d203      	bcs.n	800a104 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a0fc:	4a2e      	ldr	r2, [pc, #184]	; (800a1b8 <xTaskIncrementTick+0x15c>)
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a102:	e02f      	b.n	800a164 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a104:	68bb      	ldr	r3, [r7, #8]
 800a106:	3304      	adds	r3, #4
 800a108:	4618      	mov	r0, r3
 800a10a:	f7fe fdbd 	bl	8008c88 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a10e:	68bb      	ldr	r3, [r7, #8]
 800a110:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a112:	2b00      	cmp	r3, #0
 800a114:	d004      	beq.n	800a120 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a116:	68bb      	ldr	r3, [r7, #8]
 800a118:	3318      	adds	r3, #24
 800a11a:	4618      	mov	r0, r3
 800a11c:	f7fe fdb4 	bl	8008c88 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a120:	68bb      	ldr	r3, [r7, #8]
 800a122:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a124:	4b25      	ldr	r3, [pc, #148]	; (800a1bc <xTaskIncrementTick+0x160>)
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	429a      	cmp	r2, r3
 800a12a:	d903      	bls.n	800a134 <xTaskIncrementTick+0xd8>
 800a12c:	68bb      	ldr	r3, [r7, #8]
 800a12e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a130:	4a22      	ldr	r2, [pc, #136]	; (800a1bc <xTaskIncrementTick+0x160>)
 800a132:	6013      	str	r3, [r2, #0]
 800a134:	68bb      	ldr	r3, [r7, #8]
 800a136:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a138:	4613      	mov	r3, r2
 800a13a:	009b      	lsls	r3, r3, #2
 800a13c:	4413      	add	r3, r2
 800a13e:	009b      	lsls	r3, r3, #2
 800a140:	4a1f      	ldr	r2, [pc, #124]	; (800a1c0 <xTaskIncrementTick+0x164>)
 800a142:	441a      	add	r2, r3
 800a144:	68bb      	ldr	r3, [r7, #8]
 800a146:	3304      	adds	r3, #4
 800a148:	4619      	mov	r1, r3
 800a14a:	4610      	mov	r0, r2
 800a14c:	f7fe fd3f 	bl	8008bce <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a150:	68bb      	ldr	r3, [r7, #8]
 800a152:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a154:	4b1b      	ldr	r3, [pc, #108]	; (800a1c4 <xTaskIncrementTick+0x168>)
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a15a:	429a      	cmp	r2, r3
 800a15c:	d3b8      	bcc.n	800a0d0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800a15e:	2301      	movs	r3, #1
 800a160:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a162:	e7b5      	b.n	800a0d0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a164:	4b17      	ldr	r3, [pc, #92]	; (800a1c4 <xTaskIncrementTick+0x168>)
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a16a:	4915      	ldr	r1, [pc, #84]	; (800a1c0 <xTaskIncrementTick+0x164>)
 800a16c:	4613      	mov	r3, r2
 800a16e:	009b      	lsls	r3, r3, #2
 800a170:	4413      	add	r3, r2
 800a172:	009b      	lsls	r3, r3, #2
 800a174:	440b      	add	r3, r1
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	2b01      	cmp	r3, #1
 800a17a:	d901      	bls.n	800a180 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800a17c:	2301      	movs	r3, #1
 800a17e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800a180:	4b11      	ldr	r3, [pc, #68]	; (800a1c8 <xTaskIncrementTick+0x16c>)
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	2b00      	cmp	r3, #0
 800a186:	d007      	beq.n	800a198 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800a188:	2301      	movs	r3, #1
 800a18a:	617b      	str	r3, [r7, #20]
 800a18c:	e004      	b.n	800a198 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800a18e:	4b0f      	ldr	r3, [pc, #60]	; (800a1cc <xTaskIncrementTick+0x170>)
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	3301      	adds	r3, #1
 800a194:	4a0d      	ldr	r2, [pc, #52]	; (800a1cc <xTaskIncrementTick+0x170>)
 800a196:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800a198:	697b      	ldr	r3, [r7, #20]
}
 800a19a:	4618      	mov	r0, r3
 800a19c:	3718      	adds	r7, #24
 800a19e:	46bd      	mov	sp, r7
 800a1a0:	bd80      	pop	{r7, pc}
 800a1a2:	bf00      	nop
 800a1a4:	2000154c 	.word	0x2000154c
 800a1a8:	20001528 	.word	0x20001528
 800a1ac:	200014dc 	.word	0x200014dc
 800a1b0:	200014e0 	.word	0x200014e0
 800a1b4:	2000153c 	.word	0x2000153c
 800a1b8:	20001544 	.word	0x20001544
 800a1bc:	2000152c 	.word	0x2000152c
 800a1c0:	20001054 	.word	0x20001054
 800a1c4:	20001050 	.word	0x20001050
 800a1c8:	20001538 	.word	0x20001538
 800a1cc:	20001534 	.word	0x20001534

0800a1d0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a1d0:	b580      	push	{r7, lr}
 800a1d2:	b084      	sub	sp, #16
 800a1d4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a1d6:	4b36      	ldr	r3, [pc, #216]	; (800a2b0 <vTaskSwitchContext+0xe0>)
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d003      	beq.n	800a1e6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a1de:	4b35      	ldr	r3, [pc, #212]	; (800a2b4 <vTaskSwitchContext+0xe4>)
 800a1e0:	2201      	movs	r2, #1
 800a1e2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a1e4:	e05f      	b.n	800a2a6 <vTaskSwitchContext+0xd6>
		xYieldPending = pdFALSE;
 800a1e6:	4b33      	ldr	r3, [pc, #204]	; (800a2b4 <vTaskSwitchContext+0xe4>)
 800a1e8:	2200      	movs	r2, #0
 800a1ea:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800a1ec:	f7f6 fa00 	bl	80005f0 <getRunTimeCounterValue>
 800a1f0:	4603      	mov	r3, r0
 800a1f2:	4a31      	ldr	r2, [pc, #196]	; (800a2b8 <vTaskSwitchContext+0xe8>)
 800a1f4:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 800a1f6:	4b30      	ldr	r3, [pc, #192]	; (800a2b8 <vTaskSwitchContext+0xe8>)
 800a1f8:	681a      	ldr	r2, [r3, #0]
 800a1fa:	4b30      	ldr	r3, [pc, #192]	; (800a2bc <vTaskSwitchContext+0xec>)
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	429a      	cmp	r2, r3
 800a200:	d909      	bls.n	800a216 <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 800a202:	4b2f      	ldr	r3, [pc, #188]	; (800a2c0 <vTaskSwitchContext+0xf0>)
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800a208:	4a2b      	ldr	r2, [pc, #172]	; (800a2b8 <vTaskSwitchContext+0xe8>)
 800a20a:	6810      	ldr	r0, [r2, #0]
 800a20c:	4a2b      	ldr	r2, [pc, #172]	; (800a2bc <vTaskSwitchContext+0xec>)
 800a20e:	6812      	ldr	r2, [r2, #0]
 800a210:	1a82      	subs	r2, r0, r2
 800a212:	440a      	add	r2, r1
 800a214:	655a      	str	r2, [r3, #84]	; 0x54
			ulTaskSwitchedInTime = ulTotalRunTime;
 800a216:	4b28      	ldr	r3, [pc, #160]	; (800a2b8 <vTaskSwitchContext+0xe8>)
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	4a28      	ldr	r2, [pc, #160]	; (800a2bc <vTaskSwitchContext+0xec>)
 800a21c:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a21e:	4b29      	ldr	r3, [pc, #164]	; (800a2c4 <vTaskSwitchContext+0xf4>)
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	60fb      	str	r3, [r7, #12]
 800a224:	e010      	b.n	800a248 <vTaskSwitchContext+0x78>
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	2b00      	cmp	r3, #0
 800a22a:	d10a      	bne.n	800a242 <vTaskSwitchContext+0x72>
	__asm volatile
 800a22c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a230:	f383 8811 	msr	BASEPRI, r3
 800a234:	f3bf 8f6f 	isb	sy
 800a238:	f3bf 8f4f 	dsb	sy
 800a23c:	607b      	str	r3, [r7, #4]
}
 800a23e:	bf00      	nop
 800a240:	e7fe      	b.n	800a240 <vTaskSwitchContext+0x70>
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	3b01      	subs	r3, #1
 800a246:	60fb      	str	r3, [r7, #12]
 800a248:	491f      	ldr	r1, [pc, #124]	; (800a2c8 <vTaskSwitchContext+0xf8>)
 800a24a:	68fa      	ldr	r2, [r7, #12]
 800a24c:	4613      	mov	r3, r2
 800a24e:	009b      	lsls	r3, r3, #2
 800a250:	4413      	add	r3, r2
 800a252:	009b      	lsls	r3, r3, #2
 800a254:	440b      	add	r3, r1
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d0e4      	beq.n	800a226 <vTaskSwitchContext+0x56>
 800a25c:	68fa      	ldr	r2, [r7, #12]
 800a25e:	4613      	mov	r3, r2
 800a260:	009b      	lsls	r3, r3, #2
 800a262:	4413      	add	r3, r2
 800a264:	009b      	lsls	r3, r3, #2
 800a266:	4a18      	ldr	r2, [pc, #96]	; (800a2c8 <vTaskSwitchContext+0xf8>)
 800a268:	4413      	add	r3, r2
 800a26a:	60bb      	str	r3, [r7, #8]
 800a26c:	68bb      	ldr	r3, [r7, #8]
 800a26e:	685b      	ldr	r3, [r3, #4]
 800a270:	685a      	ldr	r2, [r3, #4]
 800a272:	68bb      	ldr	r3, [r7, #8]
 800a274:	605a      	str	r2, [r3, #4]
 800a276:	68bb      	ldr	r3, [r7, #8]
 800a278:	685a      	ldr	r2, [r3, #4]
 800a27a:	68bb      	ldr	r3, [r7, #8]
 800a27c:	3308      	adds	r3, #8
 800a27e:	429a      	cmp	r2, r3
 800a280:	d104      	bne.n	800a28c <vTaskSwitchContext+0xbc>
 800a282:	68bb      	ldr	r3, [r7, #8]
 800a284:	685b      	ldr	r3, [r3, #4]
 800a286:	685a      	ldr	r2, [r3, #4]
 800a288:	68bb      	ldr	r3, [r7, #8]
 800a28a:	605a      	str	r2, [r3, #4]
 800a28c:	68bb      	ldr	r3, [r7, #8]
 800a28e:	685b      	ldr	r3, [r3, #4]
 800a290:	68db      	ldr	r3, [r3, #12]
 800a292:	4a0b      	ldr	r2, [pc, #44]	; (800a2c0 <vTaskSwitchContext+0xf0>)
 800a294:	6013      	str	r3, [r2, #0]
 800a296:	4a0b      	ldr	r2, [pc, #44]	; (800a2c4 <vTaskSwitchContext+0xf4>)
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a29c:	4b08      	ldr	r3, [pc, #32]	; (800a2c0 <vTaskSwitchContext+0xf0>)
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	3358      	adds	r3, #88	; 0x58
 800a2a2:	4a0a      	ldr	r2, [pc, #40]	; (800a2cc <vTaskSwitchContext+0xfc>)
 800a2a4:	6013      	str	r3, [r2, #0]
}
 800a2a6:	bf00      	nop
 800a2a8:	3710      	adds	r7, #16
 800a2aa:	46bd      	mov	sp, r7
 800a2ac:	bd80      	pop	{r7, pc}
 800a2ae:	bf00      	nop
 800a2b0:	2000154c 	.word	0x2000154c
 800a2b4:	20001538 	.word	0x20001538
 800a2b8:	20001554 	.word	0x20001554
 800a2bc:	20001550 	.word	0x20001550
 800a2c0:	20001050 	.word	0x20001050
 800a2c4:	2000152c 	.word	0x2000152c
 800a2c8:	20001054 	.word	0x20001054
 800a2cc:	20000048 	.word	0x20000048

0800a2d0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a2d0:	b580      	push	{r7, lr}
 800a2d2:	b084      	sub	sp, #16
 800a2d4:	af00      	add	r7, sp, #0
 800a2d6:	6078      	str	r0, [r7, #4]
 800a2d8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d10a      	bne.n	800a2f6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800a2e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2e4:	f383 8811 	msr	BASEPRI, r3
 800a2e8:	f3bf 8f6f 	isb	sy
 800a2ec:	f3bf 8f4f 	dsb	sy
 800a2f0:	60fb      	str	r3, [r7, #12]
}
 800a2f2:	bf00      	nop
 800a2f4:	e7fe      	b.n	800a2f4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a2f6:	4b07      	ldr	r3, [pc, #28]	; (800a314 <vTaskPlaceOnEventList+0x44>)
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	3318      	adds	r3, #24
 800a2fc:	4619      	mov	r1, r3
 800a2fe:	6878      	ldr	r0, [r7, #4]
 800a300:	f7fe fc89 	bl	8008c16 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a304:	2101      	movs	r1, #1
 800a306:	6838      	ldr	r0, [r7, #0]
 800a308:	f000 fc82 	bl	800ac10 <prvAddCurrentTaskToDelayedList>
}
 800a30c:	bf00      	nop
 800a30e:	3710      	adds	r7, #16
 800a310:	46bd      	mov	sp, r7
 800a312:	bd80      	pop	{r7, pc}
 800a314:	20001050 	.word	0x20001050

0800a318 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a318:	b580      	push	{r7, lr}
 800a31a:	b086      	sub	sp, #24
 800a31c:	af00      	add	r7, sp, #0
 800a31e:	60f8      	str	r0, [r7, #12]
 800a320:	60b9      	str	r1, [r7, #8]
 800a322:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	2b00      	cmp	r3, #0
 800a328:	d10a      	bne.n	800a340 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800a32a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a32e:	f383 8811 	msr	BASEPRI, r3
 800a332:	f3bf 8f6f 	isb	sy
 800a336:	f3bf 8f4f 	dsb	sy
 800a33a:	617b      	str	r3, [r7, #20]
}
 800a33c:	bf00      	nop
 800a33e:	e7fe      	b.n	800a33e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a340:	4b0a      	ldr	r3, [pc, #40]	; (800a36c <vTaskPlaceOnEventListRestricted+0x54>)
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	3318      	adds	r3, #24
 800a346:	4619      	mov	r1, r3
 800a348:	68f8      	ldr	r0, [r7, #12]
 800a34a:	f7fe fc40 	bl	8008bce <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	2b00      	cmp	r3, #0
 800a352:	d002      	beq.n	800a35a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800a354:	f04f 33ff 	mov.w	r3, #4294967295
 800a358:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800a35a:	6879      	ldr	r1, [r7, #4]
 800a35c:	68b8      	ldr	r0, [r7, #8]
 800a35e:	f000 fc57 	bl	800ac10 <prvAddCurrentTaskToDelayedList>
	}
 800a362:	bf00      	nop
 800a364:	3718      	adds	r7, #24
 800a366:	46bd      	mov	sp, r7
 800a368:	bd80      	pop	{r7, pc}
 800a36a:	bf00      	nop
 800a36c:	20001050 	.word	0x20001050

0800a370 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a370:	b580      	push	{r7, lr}
 800a372:	b086      	sub	sp, #24
 800a374:	af00      	add	r7, sp, #0
 800a376:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	68db      	ldr	r3, [r3, #12]
 800a37c:	68db      	ldr	r3, [r3, #12]
 800a37e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a380:	693b      	ldr	r3, [r7, #16]
 800a382:	2b00      	cmp	r3, #0
 800a384:	d10a      	bne.n	800a39c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800a386:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a38a:	f383 8811 	msr	BASEPRI, r3
 800a38e:	f3bf 8f6f 	isb	sy
 800a392:	f3bf 8f4f 	dsb	sy
 800a396:	60fb      	str	r3, [r7, #12]
}
 800a398:	bf00      	nop
 800a39a:	e7fe      	b.n	800a39a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a39c:	693b      	ldr	r3, [r7, #16]
 800a39e:	3318      	adds	r3, #24
 800a3a0:	4618      	mov	r0, r3
 800a3a2:	f7fe fc71 	bl	8008c88 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a3a6:	4b1e      	ldr	r3, [pc, #120]	; (800a420 <xTaskRemoveFromEventList+0xb0>)
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d11d      	bne.n	800a3ea <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a3ae:	693b      	ldr	r3, [r7, #16]
 800a3b0:	3304      	adds	r3, #4
 800a3b2:	4618      	mov	r0, r3
 800a3b4:	f7fe fc68 	bl	8008c88 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a3b8:	693b      	ldr	r3, [r7, #16]
 800a3ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a3bc:	4b19      	ldr	r3, [pc, #100]	; (800a424 <xTaskRemoveFromEventList+0xb4>)
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	429a      	cmp	r2, r3
 800a3c2:	d903      	bls.n	800a3cc <xTaskRemoveFromEventList+0x5c>
 800a3c4:	693b      	ldr	r3, [r7, #16]
 800a3c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3c8:	4a16      	ldr	r2, [pc, #88]	; (800a424 <xTaskRemoveFromEventList+0xb4>)
 800a3ca:	6013      	str	r3, [r2, #0]
 800a3cc:	693b      	ldr	r3, [r7, #16]
 800a3ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a3d0:	4613      	mov	r3, r2
 800a3d2:	009b      	lsls	r3, r3, #2
 800a3d4:	4413      	add	r3, r2
 800a3d6:	009b      	lsls	r3, r3, #2
 800a3d8:	4a13      	ldr	r2, [pc, #76]	; (800a428 <xTaskRemoveFromEventList+0xb8>)
 800a3da:	441a      	add	r2, r3
 800a3dc:	693b      	ldr	r3, [r7, #16]
 800a3de:	3304      	adds	r3, #4
 800a3e0:	4619      	mov	r1, r3
 800a3e2:	4610      	mov	r0, r2
 800a3e4:	f7fe fbf3 	bl	8008bce <vListInsertEnd>
 800a3e8:	e005      	b.n	800a3f6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a3ea:	693b      	ldr	r3, [r7, #16]
 800a3ec:	3318      	adds	r3, #24
 800a3ee:	4619      	mov	r1, r3
 800a3f0:	480e      	ldr	r0, [pc, #56]	; (800a42c <xTaskRemoveFromEventList+0xbc>)
 800a3f2:	f7fe fbec 	bl	8008bce <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a3f6:	693b      	ldr	r3, [r7, #16]
 800a3f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a3fa:	4b0d      	ldr	r3, [pc, #52]	; (800a430 <xTaskRemoveFromEventList+0xc0>)
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a400:	429a      	cmp	r2, r3
 800a402:	d905      	bls.n	800a410 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a404:	2301      	movs	r3, #1
 800a406:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a408:	4b0a      	ldr	r3, [pc, #40]	; (800a434 <xTaskRemoveFromEventList+0xc4>)
 800a40a:	2201      	movs	r2, #1
 800a40c:	601a      	str	r2, [r3, #0]
 800a40e:	e001      	b.n	800a414 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800a410:	2300      	movs	r3, #0
 800a412:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800a414:	697b      	ldr	r3, [r7, #20]
}
 800a416:	4618      	mov	r0, r3
 800a418:	3718      	adds	r7, #24
 800a41a:	46bd      	mov	sp, r7
 800a41c:	bd80      	pop	{r7, pc}
 800a41e:	bf00      	nop
 800a420:	2000154c 	.word	0x2000154c
 800a424:	2000152c 	.word	0x2000152c
 800a428:	20001054 	.word	0x20001054
 800a42c:	200014e4 	.word	0x200014e4
 800a430:	20001050 	.word	0x20001050
 800a434:	20001538 	.word	0x20001538

0800a438 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a438:	b480      	push	{r7}
 800a43a:	b083      	sub	sp, #12
 800a43c:	af00      	add	r7, sp, #0
 800a43e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a440:	4b06      	ldr	r3, [pc, #24]	; (800a45c <vTaskInternalSetTimeOutState+0x24>)
 800a442:	681a      	ldr	r2, [r3, #0]
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a448:	4b05      	ldr	r3, [pc, #20]	; (800a460 <vTaskInternalSetTimeOutState+0x28>)
 800a44a:	681a      	ldr	r2, [r3, #0]
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	605a      	str	r2, [r3, #4]
}
 800a450:	bf00      	nop
 800a452:	370c      	adds	r7, #12
 800a454:	46bd      	mov	sp, r7
 800a456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a45a:	4770      	bx	lr
 800a45c:	2000153c 	.word	0x2000153c
 800a460:	20001528 	.word	0x20001528

0800a464 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a464:	b580      	push	{r7, lr}
 800a466:	b088      	sub	sp, #32
 800a468:	af00      	add	r7, sp, #0
 800a46a:	6078      	str	r0, [r7, #4]
 800a46c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	2b00      	cmp	r3, #0
 800a472:	d10a      	bne.n	800a48a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800a474:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a478:	f383 8811 	msr	BASEPRI, r3
 800a47c:	f3bf 8f6f 	isb	sy
 800a480:	f3bf 8f4f 	dsb	sy
 800a484:	613b      	str	r3, [r7, #16]
}
 800a486:	bf00      	nop
 800a488:	e7fe      	b.n	800a488 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800a48a:	683b      	ldr	r3, [r7, #0]
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d10a      	bne.n	800a4a6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800a490:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a494:	f383 8811 	msr	BASEPRI, r3
 800a498:	f3bf 8f6f 	isb	sy
 800a49c:	f3bf 8f4f 	dsb	sy
 800a4a0:	60fb      	str	r3, [r7, #12]
}
 800a4a2:	bf00      	nop
 800a4a4:	e7fe      	b.n	800a4a4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800a4a6:	f001 f885 	bl	800b5b4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a4aa:	4b1d      	ldr	r3, [pc, #116]	; (800a520 <xTaskCheckForTimeOut+0xbc>)
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	685b      	ldr	r3, [r3, #4]
 800a4b4:	69ba      	ldr	r2, [r7, #24]
 800a4b6:	1ad3      	subs	r3, r2, r3
 800a4b8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a4ba:	683b      	ldr	r3, [r7, #0]
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a4c2:	d102      	bne.n	800a4ca <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a4c4:	2300      	movs	r3, #0
 800a4c6:	61fb      	str	r3, [r7, #28]
 800a4c8:	e023      	b.n	800a512 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	681a      	ldr	r2, [r3, #0]
 800a4ce:	4b15      	ldr	r3, [pc, #84]	; (800a524 <xTaskCheckForTimeOut+0xc0>)
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	429a      	cmp	r2, r3
 800a4d4:	d007      	beq.n	800a4e6 <xTaskCheckForTimeOut+0x82>
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	685b      	ldr	r3, [r3, #4]
 800a4da:	69ba      	ldr	r2, [r7, #24]
 800a4dc:	429a      	cmp	r2, r3
 800a4de:	d302      	bcc.n	800a4e6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a4e0:	2301      	movs	r3, #1
 800a4e2:	61fb      	str	r3, [r7, #28]
 800a4e4:	e015      	b.n	800a512 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a4e6:	683b      	ldr	r3, [r7, #0]
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	697a      	ldr	r2, [r7, #20]
 800a4ec:	429a      	cmp	r2, r3
 800a4ee:	d20b      	bcs.n	800a508 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a4f0:	683b      	ldr	r3, [r7, #0]
 800a4f2:	681a      	ldr	r2, [r3, #0]
 800a4f4:	697b      	ldr	r3, [r7, #20]
 800a4f6:	1ad2      	subs	r2, r2, r3
 800a4f8:	683b      	ldr	r3, [r7, #0]
 800a4fa:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a4fc:	6878      	ldr	r0, [r7, #4]
 800a4fe:	f7ff ff9b 	bl	800a438 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a502:	2300      	movs	r3, #0
 800a504:	61fb      	str	r3, [r7, #28]
 800a506:	e004      	b.n	800a512 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800a508:	683b      	ldr	r3, [r7, #0]
 800a50a:	2200      	movs	r2, #0
 800a50c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a50e:	2301      	movs	r3, #1
 800a510:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a512:	f001 f87f 	bl	800b614 <vPortExitCritical>

	return xReturn;
 800a516:	69fb      	ldr	r3, [r7, #28]
}
 800a518:	4618      	mov	r0, r3
 800a51a:	3720      	adds	r7, #32
 800a51c:	46bd      	mov	sp, r7
 800a51e:	bd80      	pop	{r7, pc}
 800a520:	20001528 	.word	0x20001528
 800a524:	2000153c 	.word	0x2000153c

0800a528 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a528:	b480      	push	{r7}
 800a52a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a52c:	4b03      	ldr	r3, [pc, #12]	; (800a53c <vTaskMissedYield+0x14>)
 800a52e:	2201      	movs	r2, #1
 800a530:	601a      	str	r2, [r3, #0]
}
 800a532:	bf00      	nop
 800a534:	46bd      	mov	sp, r7
 800a536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a53a:	4770      	bx	lr
 800a53c:	20001538 	.word	0x20001538

0800a540 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a540:	b580      	push	{r7, lr}
 800a542:	b082      	sub	sp, #8
 800a544:	af00      	add	r7, sp, #0
 800a546:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a548:	f000 f852 	bl	800a5f0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a54c:	4b06      	ldr	r3, [pc, #24]	; (800a568 <prvIdleTask+0x28>)
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	2b01      	cmp	r3, #1
 800a552:	d9f9      	bls.n	800a548 <prvIdleTask+0x8>
			{
				taskYIELD();
 800a554:	4b05      	ldr	r3, [pc, #20]	; (800a56c <prvIdleTask+0x2c>)
 800a556:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a55a:	601a      	str	r2, [r3, #0]
 800a55c:	f3bf 8f4f 	dsb	sy
 800a560:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a564:	e7f0      	b.n	800a548 <prvIdleTask+0x8>
 800a566:	bf00      	nop
 800a568:	20001054 	.word	0x20001054
 800a56c:	e000ed04 	.word	0xe000ed04

0800a570 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a570:	b580      	push	{r7, lr}
 800a572:	b082      	sub	sp, #8
 800a574:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a576:	2300      	movs	r3, #0
 800a578:	607b      	str	r3, [r7, #4]
 800a57a:	e00c      	b.n	800a596 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a57c:	687a      	ldr	r2, [r7, #4]
 800a57e:	4613      	mov	r3, r2
 800a580:	009b      	lsls	r3, r3, #2
 800a582:	4413      	add	r3, r2
 800a584:	009b      	lsls	r3, r3, #2
 800a586:	4a12      	ldr	r2, [pc, #72]	; (800a5d0 <prvInitialiseTaskLists+0x60>)
 800a588:	4413      	add	r3, r2
 800a58a:	4618      	mov	r0, r3
 800a58c:	f7fe faf2 	bl	8008b74 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	3301      	adds	r3, #1
 800a594:	607b      	str	r3, [r7, #4]
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	2b37      	cmp	r3, #55	; 0x37
 800a59a:	d9ef      	bls.n	800a57c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a59c:	480d      	ldr	r0, [pc, #52]	; (800a5d4 <prvInitialiseTaskLists+0x64>)
 800a59e:	f7fe fae9 	bl	8008b74 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a5a2:	480d      	ldr	r0, [pc, #52]	; (800a5d8 <prvInitialiseTaskLists+0x68>)
 800a5a4:	f7fe fae6 	bl	8008b74 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a5a8:	480c      	ldr	r0, [pc, #48]	; (800a5dc <prvInitialiseTaskLists+0x6c>)
 800a5aa:	f7fe fae3 	bl	8008b74 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a5ae:	480c      	ldr	r0, [pc, #48]	; (800a5e0 <prvInitialiseTaskLists+0x70>)
 800a5b0:	f7fe fae0 	bl	8008b74 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a5b4:	480b      	ldr	r0, [pc, #44]	; (800a5e4 <prvInitialiseTaskLists+0x74>)
 800a5b6:	f7fe fadd 	bl	8008b74 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a5ba:	4b0b      	ldr	r3, [pc, #44]	; (800a5e8 <prvInitialiseTaskLists+0x78>)
 800a5bc:	4a05      	ldr	r2, [pc, #20]	; (800a5d4 <prvInitialiseTaskLists+0x64>)
 800a5be:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a5c0:	4b0a      	ldr	r3, [pc, #40]	; (800a5ec <prvInitialiseTaskLists+0x7c>)
 800a5c2:	4a05      	ldr	r2, [pc, #20]	; (800a5d8 <prvInitialiseTaskLists+0x68>)
 800a5c4:	601a      	str	r2, [r3, #0]
}
 800a5c6:	bf00      	nop
 800a5c8:	3708      	adds	r7, #8
 800a5ca:	46bd      	mov	sp, r7
 800a5cc:	bd80      	pop	{r7, pc}
 800a5ce:	bf00      	nop
 800a5d0:	20001054 	.word	0x20001054
 800a5d4:	200014b4 	.word	0x200014b4
 800a5d8:	200014c8 	.word	0x200014c8
 800a5dc:	200014e4 	.word	0x200014e4
 800a5e0:	200014f8 	.word	0x200014f8
 800a5e4:	20001510 	.word	0x20001510
 800a5e8:	200014dc 	.word	0x200014dc
 800a5ec:	200014e0 	.word	0x200014e0

0800a5f0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a5f0:	b580      	push	{r7, lr}
 800a5f2:	b082      	sub	sp, #8
 800a5f4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a5f6:	e019      	b.n	800a62c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a5f8:	f000 ffdc 	bl	800b5b4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a5fc:	4b10      	ldr	r3, [pc, #64]	; (800a640 <prvCheckTasksWaitingTermination+0x50>)
 800a5fe:	68db      	ldr	r3, [r3, #12]
 800a600:	68db      	ldr	r3, [r3, #12]
 800a602:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	3304      	adds	r3, #4
 800a608:	4618      	mov	r0, r3
 800a60a:	f7fe fb3d 	bl	8008c88 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a60e:	4b0d      	ldr	r3, [pc, #52]	; (800a644 <prvCheckTasksWaitingTermination+0x54>)
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	3b01      	subs	r3, #1
 800a614:	4a0b      	ldr	r2, [pc, #44]	; (800a644 <prvCheckTasksWaitingTermination+0x54>)
 800a616:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a618:	4b0b      	ldr	r3, [pc, #44]	; (800a648 <prvCheckTasksWaitingTermination+0x58>)
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	3b01      	subs	r3, #1
 800a61e:	4a0a      	ldr	r2, [pc, #40]	; (800a648 <prvCheckTasksWaitingTermination+0x58>)
 800a620:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a622:	f000 fff7 	bl	800b614 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a626:	6878      	ldr	r0, [r7, #4]
 800a628:	f000 f810 	bl	800a64c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a62c:	4b06      	ldr	r3, [pc, #24]	; (800a648 <prvCheckTasksWaitingTermination+0x58>)
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	2b00      	cmp	r3, #0
 800a632:	d1e1      	bne.n	800a5f8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a634:	bf00      	nop
 800a636:	bf00      	nop
 800a638:	3708      	adds	r7, #8
 800a63a:	46bd      	mov	sp, r7
 800a63c:	bd80      	pop	{r7, pc}
 800a63e:	bf00      	nop
 800a640:	200014f8 	.word	0x200014f8
 800a644:	20001524 	.word	0x20001524
 800a648:	2000150c 	.word	0x2000150c

0800a64c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a64c:	b580      	push	{r7, lr}
 800a64e:	b084      	sub	sp, #16
 800a650:	af00      	add	r7, sp, #0
 800a652:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	3358      	adds	r3, #88	; 0x58
 800a658:	4618      	mov	r0, r3
 800a65a:	f001 fd21 	bl	800c0a0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 800a664:	2b00      	cmp	r3, #0
 800a666:	d108      	bne.n	800a67a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a66c:	4618      	mov	r0, r3
 800a66e:	f001 f98f 	bl	800b990 <vPortFree>
				vPortFree( pxTCB );
 800a672:	6878      	ldr	r0, [r7, #4]
 800a674:	f001 f98c 	bl	800b990 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a678:	e018      	b.n	800a6ac <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 800a680:	2b01      	cmp	r3, #1
 800a682:	d103      	bne.n	800a68c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800a684:	6878      	ldr	r0, [r7, #4]
 800a686:	f001 f983 	bl	800b990 <vPortFree>
	}
 800a68a:	e00f      	b.n	800a6ac <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 800a692:	2b02      	cmp	r3, #2
 800a694:	d00a      	beq.n	800a6ac <prvDeleteTCB+0x60>
	__asm volatile
 800a696:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a69a:	f383 8811 	msr	BASEPRI, r3
 800a69e:	f3bf 8f6f 	isb	sy
 800a6a2:	f3bf 8f4f 	dsb	sy
 800a6a6:	60fb      	str	r3, [r7, #12]
}
 800a6a8:	bf00      	nop
 800a6aa:	e7fe      	b.n	800a6aa <prvDeleteTCB+0x5e>
	}
 800a6ac:	bf00      	nop
 800a6ae:	3710      	adds	r7, #16
 800a6b0:	46bd      	mov	sp, r7
 800a6b2:	bd80      	pop	{r7, pc}

0800a6b4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a6b4:	b480      	push	{r7}
 800a6b6:	b083      	sub	sp, #12
 800a6b8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a6ba:	4b0c      	ldr	r3, [pc, #48]	; (800a6ec <prvResetNextTaskUnblockTime+0x38>)
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	d104      	bne.n	800a6ce <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a6c4:	4b0a      	ldr	r3, [pc, #40]	; (800a6f0 <prvResetNextTaskUnblockTime+0x3c>)
 800a6c6:	f04f 32ff 	mov.w	r2, #4294967295
 800a6ca:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a6cc:	e008      	b.n	800a6e0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a6ce:	4b07      	ldr	r3, [pc, #28]	; (800a6ec <prvResetNextTaskUnblockTime+0x38>)
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	68db      	ldr	r3, [r3, #12]
 800a6d4:	68db      	ldr	r3, [r3, #12]
 800a6d6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	685b      	ldr	r3, [r3, #4]
 800a6dc:	4a04      	ldr	r2, [pc, #16]	; (800a6f0 <prvResetNextTaskUnblockTime+0x3c>)
 800a6de:	6013      	str	r3, [r2, #0]
}
 800a6e0:	bf00      	nop
 800a6e2:	370c      	adds	r7, #12
 800a6e4:	46bd      	mov	sp, r7
 800a6e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ea:	4770      	bx	lr
 800a6ec:	200014dc 	.word	0x200014dc
 800a6f0:	20001544 	.word	0x20001544

0800a6f4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a6f4:	b480      	push	{r7}
 800a6f6:	b083      	sub	sp, #12
 800a6f8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a6fa:	4b0b      	ldr	r3, [pc, #44]	; (800a728 <xTaskGetSchedulerState+0x34>)
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d102      	bne.n	800a708 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a702:	2301      	movs	r3, #1
 800a704:	607b      	str	r3, [r7, #4]
 800a706:	e008      	b.n	800a71a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a708:	4b08      	ldr	r3, [pc, #32]	; (800a72c <xTaskGetSchedulerState+0x38>)
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d102      	bne.n	800a716 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a710:	2302      	movs	r3, #2
 800a712:	607b      	str	r3, [r7, #4]
 800a714:	e001      	b.n	800a71a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a716:	2300      	movs	r3, #0
 800a718:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a71a:	687b      	ldr	r3, [r7, #4]
	}
 800a71c:	4618      	mov	r0, r3
 800a71e:	370c      	adds	r7, #12
 800a720:	46bd      	mov	sp, r7
 800a722:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a726:	4770      	bx	lr
 800a728:	20001530 	.word	0x20001530
 800a72c:	2000154c 	.word	0x2000154c

0800a730 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a730:	b580      	push	{r7, lr}
 800a732:	b086      	sub	sp, #24
 800a734:	af00      	add	r7, sp, #0
 800a736:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a73c:	2300      	movs	r3, #0
 800a73e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	2b00      	cmp	r3, #0
 800a744:	d056      	beq.n	800a7f4 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a746:	4b2e      	ldr	r3, [pc, #184]	; (800a800 <xTaskPriorityDisinherit+0xd0>)
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	693a      	ldr	r2, [r7, #16]
 800a74c:	429a      	cmp	r2, r3
 800a74e:	d00a      	beq.n	800a766 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800a750:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a754:	f383 8811 	msr	BASEPRI, r3
 800a758:	f3bf 8f6f 	isb	sy
 800a75c:	f3bf 8f4f 	dsb	sy
 800a760:	60fb      	str	r3, [r7, #12]
}
 800a762:	bf00      	nop
 800a764:	e7fe      	b.n	800a764 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800a766:	693b      	ldr	r3, [r7, #16]
 800a768:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	d10a      	bne.n	800a784 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800a76e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a772:	f383 8811 	msr	BASEPRI, r3
 800a776:	f3bf 8f6f 	isb	sy
 800a77a:	f3bf 8f4f 	dsb	sy
 800a77e:	60bb      	str	r3, [r7, #8]
}
 800a780:	bf00      	nop
 800a782:	e7fe      	b.n	800a782 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800a784:	693b      	ldr	r3, [r7, #16]
 800a786:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a788:	1e5a      	subs	r2, r3, #1
 800a78a:	693b      	ldr	r3, [r7, #16]
 800a78c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a78e:	693b      	ldr	r3, [r7, #16]
 800a790:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a792:	693b      	ldr	r3, [r7, #16]
 800a794:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a796:	429a      	cmp	r2, r3
 800a798:	d02c      	beq.n	800a7f4 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a79a:	693b      	ldr	r3, [r7, #16]
 800a79c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	d128      	bne.n	800a7f4 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a7a2:	693b      	ldr	r3, [r7, #16]
 800a7a4:	3304      	adds	r3, #4
 800a7a6:	4618      	mov	r0, r3
 800a7a8:	f7fe fa6e 	bl	8008c88 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a7ac:	693b      	ldr	r3, [r7, #16]
 800a7ae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a7b0:	693b      	ldr	r3, [r7, #16]
 800a7b2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a7b4:	693b      	ldr	r3, [r7, #16]
 800a7b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7b8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a7bc:	693b      	ldr	r3, [r7, #16]
 800a7be:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a7c0:	693b      	ldr	r3, [r7, #16]
 800a7c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a7c4:	4b0f      	ldr	r3, [pc, #60]	; (800a804 <xTaskPriorityDisinherit+0xd4>)
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	429a      	cmp	r2, r3
 800a7ca:	d903      	bls.n	800a7d4 <xTaskPriorityDisinherit+0xa4>
 800a7cc:	693b      	ldr	r3, [r7, #16]
 800a7ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7d0:	4a0c      	ldr	r2, [pc, #48]	; (800a804 <xTaskPriorityDisinherit+0xd4>)
 800a7d2:	6013      	str	r3, [r2, #0]
 800a7d4:	693b      	ldr	r3, [r7, #16]
 800a7d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a7d8:	4613      	mov	r3, r2
 800a7da:	009b      	lsls	r3, r3, #2
 800a7dc:	4413      	add	r3, r2
 800a7de:	009b      	lsls	r3, r3, #2
 800a7e0:	4a09      	ldr	r2, [pc, #36]	; (800a808 <xTaskPriorityDisinherit+0xd8>)
 800a7e2:	441a      	add	r2, r3
 800a7e4:	693b      	ldr	r3, [r7, #16]
 800a7e6:	3304      	adds	r3, #4
 800a7e8:	4619      	mov	r1, r3
 800a7ea:	4610      	mov	r0, r2
 800a7ec:	f7fe f9ef 	bl	8008bce <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a7f0:	2301      	movs	r3, #1
 800a7f2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a7f4:	697b      	ldr	r3, [r7, #20]
	}
 800a7f6:	4618      	mov	r0, r3
 800a7f8:	3718      	adds	r7, #24
 800a7fa:	46bd      	mov	sp, r7
 800a7fc:	bd80      	pop	{r7, pc}
 800a7fe:	bf00      	nop
 800a800:	20001050 	.word	0x20001050
 800a804:	2000152c 	.word	0x2000152c
 800a808:	20001054 	.word	0x20001054

0800a80c <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 800a80c:	b580      	push	{r7, lr}
 800a80e:	b086      	sub	sp, #24
 800a810:	af00      	add	r7, sp, #0
 800a812:	60f8      	str	r0, [r7, #12]
 800a814:	60b9      	str	r1, [r7, #8]
 800a816:	607a      	str	r2, [r7, #4]
 800a818:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 800a81a:	f000 fecb 	bl	800b5b4 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800a81e:	4b29      	ldr	r3, [pc, #164]	; (800a8c4 <xTaskNotifyWait+0xb8>)
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 800a826:	b2db      	uxtb	r3, r3
 800a828:	2b02      	cmp	r3, #2
 800a82a:	d01c      	beq.n	800a866 <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 800a82c:	4b25      	ldr	r3, [pc, #148]	; (800a8c4 <xTaskNotifyWait+0xb8>)
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	f8d3 10b8 	ldr.w	r1, [r3, #184]	; 0xb8
 800a834:	68fa      	ldr	r2, [r7, #12]
 800a836:	43d2      	mvns	r2, r2
 800a838:	400a      	ands	r2, r1
 800a83a:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800a83e:	4b21      	ldr	r3, [pc, #132]	; (800a8c4 <xTaskNotifyWait+0xb8>)
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	2201      	movs	r2, #1
 800a844:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc

				if( xTicksToWait > ( TickType_t ) 0 )
 800a848:	683b      	ldr	r3, [r7, #0]
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d00b      	beq.n	800a866 <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a84e:	2101      	movs	r1, #1
 800a850:	6838      	ldr	r0, [r7, #0]
 800a852:	f000 f9dd 	bl	800ac10 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800a856:	4b1c      	ldr	r3, [pc, #112]	; (800a8c8 <xTaskNotifyWait+0xbc>)
 800a858:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a85c:	601a      	str	r2, [r3, #0]
 800a85e:	f3bf 8f4f 	dsb	sy
 800a862:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800a866:	f000 fed5 	bl	800b614 <vPortExitCritical>

		taskENTER_CRITICAL();
 800a86a:	f000 fea3 	bl	800b5b4 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	2b00      	cmp	r3, #0
 800a872:	d005      	beq.n	800a880 <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 800a874:	4b13      	ldr	r3, [pc, #76]	; (800a8c4 <xTaskNotifyWait+0xb8>)
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800a880:	4b10      	ldr	r3, [pc, #64]	; (800a8c4 <xTaskNotifyWait+0xb8>)
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 800a888:	b2db      	uxtb	r3, r3
 800a88a:	2b02      	cmp	r3, #2
 800a88c:	d002      	beq.n	800a894 <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 800a88e:	2300      	movs	r3, #0
 800a890:	617b      	str	r3, [r7, #20]
 800a892:	e00a      	b.n	800a8aa <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 800a894:	4b0b      	ldr	r3, [pc, #44]	; (800a8c4 <xTaskNotifyWait+0xb8>)
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	f8d3 10b8 	ldr.w	r1, [r3, #184]	; 0xb8
 800a89c:	68ba      	ldr	r2, [r7, #8]
 800a89e:	43d2      	mvns	r2, r2
 800a8a0:	400a      	ands	r2, r1
 800a8a2:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
				xReturn = pdTRUE;
 800a8a6:	2301      	movs	r3, #1
 800a8a8:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a8aa:	4b06      	ldr	r3, [pc, #24]	; (800a8c4 <xTaskNotifyWait+0xb8>)
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	2200      	movs	r2, #0
 800a8b0:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
		}
		taskEXIT_CRITICAL();
 800a8b4:	f000 feae 	bl	800b614 <vPortExitCritical>

		return xReturn;
 800a8b8:	697b      	ldr	r3, [r7, #20]
	}
 800a8ba:	4618      	mov	r0, r3
 800a8bc:	3718      	adds	r7, #24
 800a8be:	46bd      	mov	sp, r7
 800a8c0:	bd80      	pop	{r7, pc}
 800a8c2:	bf00      	nop
 800a8c4:	20001050 	.word	0x20001050
 800a8c8:	e000ed04 	.word	0xe000ed04

0800a8cc <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800a8cc:	b580      	push	{r7, lr}
 800a8ce:	b08a      	sub	sp, #40	; 0x28
 800a8d0:	af00      	add	r7, sp, #0
 800a8d2:	60f8      	str	r0, [r7, #12]
 800a8d4:	60b9      	str	r1, [r7, #8]
 800a8d6:	603b      	str	r3, [r7, #0]
 800a8d8:	4613      	mov	r3, r2
 800a8da:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 800a8dc:	2301      	movs	r3, #1
 800a8de:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	d10a      	bne.n	800a8fc <xTaskGenericNotify+0x30>
	__asm volatile
 800a8e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8ea:	f383 8811 	msr	BASEPRI, r3
 800a8ee:	f3bf 8f6f 	isb	sy
 800a8f2:	f3bf 8f4f 	dsb	sy
 800a8f6:	61bb      	str	r3, [r7, #24]
}
 800a8f8:	bf00      	nop
 800a8fa:	e7fe      	b.n	800a8fa <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800a900:	f000 fe58 	bl	800b5b4 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800a904:	683b      	ldr	r3, [r7, #0]
 800a906:	2b00      	cmp	r3, #0
 800a908:	d004      	beq.n	800a914 <xTaskGenericNotify+0x48>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800a90a:	6a3b      	ldr	r3, [r7, #32]
 800a90c:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 800a910:	683b      	ldr	r3, [r7, #0]
 800a912:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800a914:	6a3b      	ldr	r3, [r7, #32]
 800a916:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 800a91a:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800a91c:	6a3b      	ldr	r3, [r7, #32]
 800a91e:	2202      	movs	r2, #2
 800a920:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc

			switch( eAction )
 800a924:	79fb      	ldrb	r3, [r7, #7]
 800a926:	2b04      	cmp	r3, #4
 800a928:	d82d      	bhi.n	800a986 <xTaskGenericNotify+0xba>
 800a92a:	a201      	add	r2, pc, #4	; (adr r2, 800a930 <xTaskGenericNotify+0x64>)
 800a92c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a930:	0800a9a9 	.word	0x0800a9a9
 800a934:	0800a945 	.word	0x0800a945
 800a938:	0800a957 	.word	0x0800a957
 800a93c:	0800a967 	.word	0x0800a967
 800a940:	0800a971 	.word	0x0800a971
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800a944:	6a3b      	ldr	r3, [r7, #32]
 800a946:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 800a94a:	68bb      	ldr	r3, [r7, #8]
 800a94c:	431a      	orrs	r2, r3
 800a94e:	6a3b      	ldr	r3, [r7, #32]
 800a950:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
					break;
 800a954:	e02b      	b.n	800a9ae <xTaskGenericNotify+0xe2>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800a956:	6a3b      	ldr	r3, [r7, #32]
 800a958:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800a95c:	1c5a      	adds	r2, r3, #1
 800a95e:	6a3b      	ldr	r3, [r7, #32]
 800a960:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
					break;
 800a964:	e023      	b.n	800a9ae <xTaskGenericNotify+0xe2>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800a966:	6a3b      	ldr	r3, [r7, #32]
 800a968:	68ba      	ldr	r2, [r7, #8]
 800a96a:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
					break;
 800a96e:	e01e      	b.n	800a9ae <xTaskGenericNotify+0xe2>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800a970:	7ffb      	ldrb	r3, [r7, #31]
 800a972:	2b02      	cmp	r3, #2
 800a974:	d004      	beq.n	800a980 <xTaskGenericNotify+0xb4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800a976:	6a3b      	ldr	r3, [r7, #32]
 800a978:	68ba      	ldr	r2, [r7, #8]
 800a97a:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800a97e:	e016      	b.n	800a9ae <xTaskGenericNotify+0xe2>
						xReturn = pdFAIL;
 800a980:	2300      	movs	r3, #0
 800a982:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 800a984:	e013      	b.n	800a9ae <xTaskGenericNotify+0xe2>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800a986:	6a3b      	ldr	r3, [r7, #32]
 800a988:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800a98c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a990:	d00c      	beq.n	800a9ac <xTaskGenericNotify+0xe0>
	__asm volatile
 800a992:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a996:	f383 8811 	msr	BASEPRI, r3
 800a99a:	f3bf 8f6f 	isb	sy
 800a99e:	f3bf 8f4f 	dsb	sy
 800a9a2:	617b      	str	r3, [r7, #20]
}
 800a9a4:	bf00      	nop
 800a9a6:	e7fe      	b.n	800a9a6 <xTaskGenericNotify+0xda>
					break;
 800a9a8:	bf00      	nop
 800a9aa:	e000      	b.n	800a9ae <xTaskGenericNotify+0xe2>

					break;
 800a9ac:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800a9ae:	7ffb      	ldrb	r3, [r7, #31]
 800a9b0:	2b01      	cmp	r3, #1
 800a9b2:	d13a      	bne.n	800aa2a <xTaskGenericNotify+0x15e>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a9b4:	6a3b      	ldr	r3, [r7, #32]
 800a9b6:	3304      	adds	r3, #4
 800a9b8:	4618      	mov	r0, r3
 800a9ba:	f7fe f965 	bl	8008c88 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800a9be:	6a3b      	ldr	r3, [r7, #32]
 800a9c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a9c2:	4b1d      	ldr	r3, [pc, #116]	; (800aa38 <xTaskGenericNotify+0x16c>)
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	429a      	cmp	r2, r3
 800a9c8:	d903      	bls.n	800a9d2 <xTaskGenericNotify+0x106>
 800a9ca:	6a3b      	ldr	r3, [r7, #32]
 800a9cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9ce:	4a1a      	ldr	r2, [pc, #104]	; (800aa38 <xTaskGenericNotify+0x16c>)
 800a9d0:	6013      	str	r3, [r2, #0]
 800a9d2:	6a3b      	ldr	r3, [r7, #32]
 800a9d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a9d6:	4613      	mov	r3, r2
 800a9d8:	009b      	lsls	r3, r3, #2
 800a9da:	4413      	add	r3, r2
 800a9dc:	009b      	lsls	r3, r3, #2
 800a9de:	4a17      	ldr	r2, [pc, #92]	; (800aa3c <xTaskGenericNotify+0x170>)
 800a9e0:	441a      	add	r2, r3
 800a9e2:	6a3b      	ldr	r3, [r7, #32]
 800a9e4:	3304      	adds	r3, #4
 800a9e6:	4619      	mov	r1, r3
 800a9e8:	4610      	mov	r0, r2
 800a9ea:	f7fe f8f0 	bl	8008bce <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800a9ee:	6a3b      	ldr	r3, [r7, #32]
 800a9f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d00a      	beq.n	800aa0c <xTaskGenericNotify+0x140>
	__asm volatile
 800a9f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9fa:	f383 8811 	msr	BASEPRI, r3
 800a9fe:	f3bf 8f6f 	isb	sy
 800aa02:	f3bf 8f4f 	dsb	sy
 800aa06:	613b      	str	r3, [r7, #16]
}
 800aa08:	bf00      	nop
 800aa0a:	e7fe      	b.n	800aa0a <xTaskGenericNotify+0x13e>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800aa0c:	6a3b      	ldr	r3, [r7, #32]
 800aa0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa10:	4b0b      	ldr	r3, [pc, #44]	; (800aa40 <xTaskGenericNotify+0x174>)
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa16:	429a      	cmp	r2, r3
 800aa18:	d907      	bls.n	800aa2a <xTaskGenericNotify+0x15e>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 800aa1a:	4b0a      	ldr	r3, [pc, #40]	; (800aa44 <xTaskGenericNotify+0x178>)
 800aa1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aa20:	601a      	str	r2, [r3, #0]
 800aa22:	f3bf 8f4f 	dsb	sy
 800aa26:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800aa2a:	f000 fdf3 	bl	800b614 <vPortExitCritical>

		return xReturn;
 800aa2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800aa30:	4618      	mov	r0, r3
 800aa32:	3728      	adds	r7, #40	; 0x28
 800aa34:	46bd      	mov	sp, r7
 800aa36:	bd80      	pop	{r7, pc}
 800aa38:	2000152c 	.word	0x2000152c
 800aa3c:	20001054 	.word	0x20001054
 800aa40:	20001050 	.word	0x20001050
 800aa44:	e000ed04 	.word	0xe000ed04

0800aa48 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800aa48:	b580      	push	{r7, lr}
 800aa4a:	b08e      	sub	sp, #56	; 0x38
 800aa4c:	af00      	add	r7, sp, #0
 800aa4e:	60f8      	str	r0, [r7, #12]
 800aa50:	60b9      	str	r1, [r7, #8]
 800aa52:	603b      	str	r3, [r7, #0]
 800aa54:	4613      	mov	r3, r2
 800aa56:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 800aa58:	2301      	movs	r3, #1
 800aa5a:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	d10a      	bne.n	800aa78 <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 800aa62:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa66:	f383 8811 	msr	BASEPRI, r3
 800aa6a:	f3bf 8f6f 	isb	sy
 800aa6e:	f3bf 8f4f 	dsb	sy
 800aa72:	627b      	str	r3, [r7, #36]	; 0x24
}
 800aa74:	bf00      	nop
 800aa76:	e7fe      	b.n	800aa76 <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800aa78:	f000 fe7e 	bl	800b778 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 800aa7c:	68fb      	ldr	r3, [r7, #12]
 800aa7e:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 800aa80:	f3ef 8211 	mrs	r2, BASEPRI
 800aa84:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa88:	f383 8811 	msr	BASEPRI, r3
 800aa8c:	f3bf 8f6f 	isb	sy
 800aa90:	f3bf 8f4f 	dsb	sy
 800aa94:	623a      	str	r2, [r7, #32]
 800aa96:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 800aa98:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800aa9a:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 800aa9c:	683b      	ldr	r3, [r7, #0]
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d004      	beq.n	800aaac <xTaskGenericNotifyFromISR+0x64>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800aaa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aaa4:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 800aaa8:	683b      	ldr	r3, [r7, #0]
 800aaaa:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800aaac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aaae:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 800aab2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800aab6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aab8:	2202      	movs	r2, #2
 800aaba:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc

			switch( eAction )
 800aabe:	79fb      	ldrb	r3, [r7, #7]
 800aac0:	2b04      	cmp	r3, #4
 800aac2:	d82f      	bhi.n	800ab24 <xTaskGenericNotifyFromISR+0xdc>
 800aac4:	a201      	add	r2, pc, #4	; (adr r2, 800aacc <xTaskGenericNotifyFromISR+0x84>)
 800aac6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aaca:	bf00      	nop
 800aacc:	0800ab47 	.word	0x0800ab47
 800aad0:	0800aae1 	.word	0x0800aae1
 800aad4:	0800aaf3 	.word	0x0800aaf3
 800aad8:	0800ab03 	.word	0x0800ab03
 800aadc:	0800ab0d 	.word	0x0800ab0d
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800aae0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aae2:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 800aae6:	68bb      	ldr	r3, [r7, #8]
 800aae8:	431a      	orrs	r2, r3
 800aaea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aaec:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
					break;
 800aaf0:	e02c      	b.n	800ab4c <xTaskGenericNotifyFromISR+0x104>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800aaf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aaf4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800aaf8:	1c5a      	adds	r2, r3, #1
 800aafa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aafc:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
					break;
 800ab00:	e024      	b.n	800ab4c <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800ab02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab04:	68ba      	ldr	r2, [r7, #8]
 800ab06:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
					break;
 800ab0a:	e01f      	b.n	800ab4c <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800ab0c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ab10:	2b02      	cmp	r3, #2
 800ab12:	d004      	beq.n	800ab1e <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800ab14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab16:	68ba      	ldr	r2, [r7, #8]
 800ab18:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800ab1c:	e016      	b.n	800ab4c <xTaskGenericNotifyFromISR+0x104>
						xReturn = pdFAIL;
 800ab1e:	2300      	movs	r3, #0
 800ab20:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 800ab22:	e013      	b.n	800ab4c <xTaskGenericNotifyFromISR+0x104>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800ab24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab26:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800ab2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab2e:	d00c      	beq.n	800ab4a <xTaskGenericNotifyFromISR+0x102>
	__asm volatile
 800ab30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab34:	f383 8811 	msr	BASEPRI, r3
 800ab38:	f3bf 8f6f 	isb	sy
 800ab3c:	f3bf 8f4f 	dsb	sy
 800ab40:	61bb      	str	r3, [r7, #24]
}
 800ab42:	bf00      	nop
 800ab44:	e7fe      	b.n	800ab44 <xTaskGenericNotifyFromISR+0xfc>
					break;
 800ab46:	bf00      	nop
 800ab48:	e000      	b.n	800ab4c <xTaskGenericNotifyFromISR+0x104>
					break;
 800ab4a:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800ab4c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ab50:	2b01      	cmp	r3, #1
 800ab52:	d146      	bne.n	800abe2 <xTaskGenericNotifyFromISR+0x19a>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800ab54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	d00a      	beq.n	800ab72 <xTaskGenericNotifyFromISR+0x12a>
	__asm volatile
 800ab5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab60:	f383 8811 	msr	BASEPRI, r3
 800ab64:	f3bf 8f6f 	isb	sy
 800ab68:	f3bf 8f4f 	dsb	sy
 800ab6c:	617b      	str	r3, [r7, #20]
}
 800ab6e:	bf00      	nop
 800ab70:	e7fe      	b.n	800ab70 <xTaskGenericNotifyFromISR+0x128>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ab72:	4b21      	ldr	r3, [pc, #132]	; (800abf8 <xTaskGenericNotifyFromISR+0x1b0>)
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d11d      	bne.n	800abb6 <xTaskGenericNotifyFromISR+0x16e>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ab7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab7c:	3304      	adds	r3, #4
 800ab7e:	4618      	mov	r0, r3
 800ab80:	f7fe f882 	bl	8008c88 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800ab84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab88:	4b1c      	ldr	r3, [pc, #112]	; (800abfc <xTaskGenericNotifyFromISR+0x1b4>)
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	429a      	cmp	r2, r3
 800ab8e:	d903      	bls.n	800ab98 <xTaskGenericNotifyFromISR+0x150>
 800ab90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab94:	4a19      	ldr	r2, [pc, #100]	; (800abfc <xTaskGenericNotifyFromISR+0x1b4>)
 800ab96:	6013      	str	r3, [r2, #0]
 800ab98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab9c:	4613      	mov	r3, r2
 800ab9e:	009b      	lsls	r3, r3, #2
 800aba0:	4413      	add	r3, r2
 800aba2:	009b      	lsls	r3, r3, #2
 800aba4:	4a16      	ldr	r2, [pc, #88]	; (800ac00 <xTaskGenericNotifyFromISR+0x1b8>)
 800aba6:	441a      	add	r2, r3
 800aba8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abaa:	3304      	adds	r3, #4
 800abac:	4619      	mov	r1, r3
 800abae:	4610      	mov	r0, r2
 800abb0:	f7fe f80d 	bl	8008bce <vListInsertEnd>
 800abb4:	e005      	b.n	800abc2 <xTaskGenericNotifyFromISR+0x17a>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800abb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abb8:	3318      	adds	r3, #24
 800abba:	4619      	mov	r1, r3
 800abbc:	4811      	ldr	r0, [pc, #68]	; (800ac04 <xTaskGenericNotifyFromISR+0x1bc>)
 800abbe:	f7fe f806 	bl	8008bce <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800abc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800abc6:	4b10      	ldr	r3, [pc, #64]	; (800ac08 <xTaskGenericNotifyFromISR+0x1c0>)
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abcc:	429a      	cmp	r2, r3
 800abce:	d908      	bls.n	800abe2 <xTaskGenericNotifyFromISR+0x19a>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800abd0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	d002      	beq.n	800abdc <xTaskGenericNotifyFromISR+0x194>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800abd6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800abd8:	2201      	movs	r2, #1
 800abda:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 800abdc:	4b0b      	ldr	r3, [pc, #44]	; (800ac0c <xTaskGenericNotifyFromISR+0x1c4>)
 800abde:	2201      	movs	r2, #1
 800abe0:	601a      	str	r2, [r3, #0]
 800abe2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abe4:	613b      	str	r3, [r7, #16]
	__asm volatile
 800abe6:	693b      	ldr	r3, [r7, #16]
 800abe8:	f383 8811 	msr	BASEPRI, r3
}
 800abec:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 800abee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 800abf0:	4618      	mov	r0, r3
 800abf2:	3738      	adds	r7, #56	; 0x38
 800abf4:	46bd      	mov	sp, r7
 800abf6:	bd80      	pop	{r7, pc}
 800abf8:	2000154c 	.word	0x2000154c
 800abfc:	2000152c 	.word	0x2000152c
 800ac00:	20001054 	.word	0x20001054
 800ac04:	200014e4 	.word	0x200014e4
 800ac08:	20001050 	.word	0x20001050
 800ac0c:	20001538 	.word	0x20001538

0800ac10 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800ac10:	b580      	push	{r7, lr}
 800ac12:	b084      	sub	sp, #16
 800ac14:	af00      	add	r7, sp, #0
 800ac16:	6078      	str	r0, [r7, #4]
 800ac18:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800ac1a:	4b21      	ldr	r3, [pc, #132]	; (800aca0 <prvAddCurrentTaskToDelayedList+0x90>)
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ac20:	4b20      	ldr	r3, [pc, #128]	; (800aca4 <prvAddCurrentTaskToDelayedList+0x94>)
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	3304      	adds	r3, #4
 800ac26:	4618      	mov	r0, r3
 800ac28:	f7fe f82e 	bl	8008c88 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac32:	d10a      	bne.n	800ac4a <prvAddCurrentTaskToDelayedList+0x3a>
 800ac34:	683b      	ldr	r3, [r7, #0]
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	d007      	beq.n	800ac4a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ac3a:	4b1a      	ldr	r3, [pc, #104]	; (800aca4 <prvAddCurrentTaskToDelayedList+0x94>)
 800ac3c:	681b      	ldr	r3, [r3, #0]
 800ac3e:	3304      	adds	r3, #4
 800ac40:	4619      	mov	r1, r3
 800ac42:	4819      	ldr	r0, [pc, #100]	; (800aca8 <prvAddCurrentTaskToDelayedList+0x98>)
 800ac44:	f7fd ffc3 	bl	8008bce <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800ac48:	e026      	b.n	800ac98 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800ac4a:	68fa      	ldr	r2, [r7, #12]
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	4413      	add	r3, r2
 800ac50:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800ac52:	4b14      	ldr	r3, [pc, #80]	; (800aca4 <prvAddCurrentTaskToDelayedList+0x94>)
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	68ba      	ldr	r2, [r7, #8]
 800ac58:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800ac5a:	68ba      	ldr	r2, [r7, #8]
 800ac5c:	68fb      	ldr	r3, [r7, #12]
 800ac5e:	429a      	cmp	r2, r3
 800ac60:	d209      	bcs.n	800ac76 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ac62:	4b12      	ldr	r3, [pc, #72]	; (800acac <prvAddCurrentTaskToDelayedList+0x9c>)
 800ac64:	681a      	ldr	r2, [r3, #0]
 800ac66:	4b0f      	ldr	r3, [pc, #60]	; (800aca4 <prvAddCurrentTaskToDelayedList+0x94>)
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	3304      	adds	r3, #4
 800ac6c:	4619      	mov	r1, r3
 800ac6e:	4610      	mov	r0, r2
 800ac70:	f7fd ffd1 	bl	8008c16 <vListInsert>
}
 800ac74:	e010      	b.n	800ac98 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ac76:	4b0e      	ldr	r3, [pc, #56]	; (800acb0 <prvAddCurrentTaskToDelayedList+0xa0>)
 800ac78:	681a      	ldr	r2, [r3, #0]
 800ac7a:	4b0a      	ldr	r3, [pc, #40]	; (800aca4 <prvAddCurrentTaskToDelayedList+0x94>)
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	3304      	adds	r3, #4
 800ac80:	4619      	mov	r1, r3
 800ac82:	4610      	mov	r0, r2
 800ac84:	f7fd ffc7 	bl	8008c16 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800ac88:	4b0a      	ldr	r3, [pc, #40]	; (800acb4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	68ba      	ldr	r2, [r7, #8]
 800ac8e:	429a      	cmp	r2, r3
 800ac90:	d202      	bcs.n	800ac98 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800ac92:	4a08      	ldr	r2, [pc, #32]	; (800acb4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800ac94:	68bb      	ldr	r3, [r7, #8]
 800ac96:	6013      	str	r3, [r2, #0]
}
 800ac98:	bf00      	nop
 800ac9a:	3710      	adds	r7, #16
 800ac9c:	46bd      	mov	sp, r7
 800ac9e:	bd80      	pop	{r7, pc}
 800aca0:	20001528 	.word	0x20001528
 800aca4:	20001050 	.word	0x20001050
 800aca8:	20001510 	.word	0x20001510
 800acac:	200014e0 	.word	0x200014e0
 800acb0:	200014dc 	.word	0x200014dc
 800acb4:	20001544 	.word	0x20001544

0800acb8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800acb8:	b580      	push	{r7, lr}
 800acba:	b08a      	sub	sp, #40	; 0x28
 800acbc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800acbe:	2300      	movs	r3, #0
 800acc0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800acc2:	f000 fb07 	bl	800b2d4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800acc6:	4b1c      	ldr	r3, [pc, #112]	; (800ad38 <xTimerCreateTimerTask+0x80>)
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	2b00      	cmp	r3, #0
 800accc:	d021      	beq.n	800ad12 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800acce:	2300      	movs	r3, #0
 800acd0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800acd2:	2300      	movs	r3, #0
 800acd4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800acd6:	1d3a      	adds	r2, r7, #4
 800acd8:	f107 0108 	add.w	r1, r7, #8
 800acdc:	f107 030c 	add.w	r3, r7, #12
 800ace0:	4618      	mov	r0, r3
 800ace2:	f7fd ff2d 	bl	8008b40 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800ace6:	6879      	ldr	r1, [r7, #4]
 800ace8:	68bb      	ldr	r3, [r7, #8]
 800acea:	68fa      	ldr	r2, [r7, #12]
 800acec:	9202      	str	r2, [sp, #8]
 800acee:	9301      	str	r3, [sp, #4]
 800acf0:	2302      	movs	r3, #2
 800acf2:	9300      	str	r3, [sp, #0]
 800acf4:	2300      	movs	r3, #0
 800acf6:	460a      	mov	r2, r1
 800acf8:	4910      	ldr	r1, [pc, #64]	; (800ad3c <xTimerCreateTimerTask+0x84>)
 800acfa:	4811      	ldr	r0, [pc, #68]	; (800ad40 <xTimerCreateTimerTask+0x88>)
 800acfc:	f7fe fdb8 	bl	8009870 <xTaskCreateStatic>
 800ad00:	4603      	mov	r3, r0
 800ad02:	4a10      	ldr	r2, [pc, #64]	; (800ad44 <xTimerCreateTimerTask+0x8c>)
 800ad04:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800ad06:	4b0f      	ldr	r3, [pc, #60]	; (800ad44 <xTimerCreateTimerTask+0x8c>)
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	d001      	beq.n	800ad12 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800ad0e:	2301      	movs	r3, #1
 800ad10:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800ad12:	697b      	ldr	r3, [r7, #20]
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	d10a      	bne.n	800ad2e <xTimerCreateTimerTask+0x76>
	__asm volatile
 800ad18:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad1c:	f383 8811 	msr	BASEPRI, r3
 800ad20:	f3bf 8f6f 	isb	sy
 800ad24:	f3bf 8f4f 	dsb	sy
 800ad28:	613b      	str	r3, [r7, #16]
}
 800ad2a:	bf00      	nop
 800ad2c:	e7fe      	b.n	800ad2c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800ad2e:	697b      	ldr	r3, [r7, #20]
}
 800ad30:	4618      	mov	r0, r3
 800ad32:	3718      	adds	r7, #24
 800ad34:	46bd      	mov	sp, r7
 800ad36:	bd80      	pop	{r7, pc}
 800ad38:	20001588 	.word	0x20001588
 800ad3c:	0800d5ac 	.word	0x0800d5ac
 800ad40:	0800ae7d 	.word	0x0800ae7d
 800ad44:	2000158c 	.word	0x2000158c

0800ad48 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800ad48:	b580      	push	{r7, lr}
 800ad4a:	b08a      	sub	sp, #40	; 0x28
 800ad4c:	af00      	add	r7, sp, #0
 800ad4e:	60f8      	str	r0, [r7, #12]
 800ad50:	60b9      	str	r1, [r7, #8]
 800ad52:	607a      	str	r2, [r7, #4]
 800ad54:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800ad56:	2300      	movs	r3, #0
 800ad58:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800ad5a:	68fb      	ldr	r3, [r7, #12]
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	d10a      	bne.n	800ad76 <xTimerGenericCommand+0x2e>
	__asm volatile
 800ad60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad64:	f383 8811 	msr	BASEPRI, r3
 800ad68:	f3bf 8f6f 	isb	sy
 800ad6c:	f3bf 8f4f 	dsb	sy
 800ad70:	623b      	str	r3, [r7, #32]
}
 800ad72:	bf00      	nop
 800ad74:	e7fe      	b.n	800ad74 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800ad76:	4b1a      	ldr	r3, [pc, #104]	; (800ade0 <xTimerGenericCommand+0x98>)
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	d02a      	beq.n	800add4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800ad7e:	68bb      	ldr	r3, [r7, #8]
 800ad80:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800ad86:	68fb      	ldr	r3, [r7, #12]
 800ad88:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800ad8a:	68bb      	ldr	r3, [r7, #8]
 800ad8c:	2b05      	cmp	r3, #5
 800ad8e:	dc18      	bgt.n	800adc2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800ad90:	f7ff fcb0 	bl	800a6f4 <xTaskGetSchedulerState>
 800ad94:	4603      	mov	r3, r0
 800ad96:	2b02      	cmp	r3, #2
 800ad98:	d109      	bne.n	800adae <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800ad9a:	4b11      	ldr	r3, [pc, #68]	; (800ade0 <xTimerGenericCommand+0x98>)
 800ad9c:	6818      	ldr	r0, [r3, #0]
 800ad9e:	f107 0110 	add.w	r1, r7, #16
 800ada2:	2300      	movs	r3, #0
 800ada4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ada6:	f7fe f8d7 	bl	8008f58 <xQueueGenericSend>
 800adaa:	6278      	str	r0, [r7, #36]	; 0x24
 800adac:	e012      	b.n	800add4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800adae:	4b0c      	ldr	r3, [pc, #48]	; (800ade0 <xTimerGenericCommand+0x98>)
 800adb0:	6818      	ldr	r0, [r3, #0]
 800adb2:	f107 0110 	add.w	r1, r7, #16
 800adb6:	2300      	movs	r3, #0
 800adb8:	2200      	movs	r2, #0
 800adba:	f7fe f8cd 	bl	8008f58 <xQueueGenericSend>
 800adbe:	6278      	str	r0, [r7, #36]	; 0x24
 800adc0:	e008      	b.n	800add4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800adc2:	4b07      	ldr	r3, [pc, #28]	; (800ade0 <xTimerGenericCommand+0x98>)
 800adc4:	6818      	ldr	r0, [r3, #0]
 800adc6:	f107 0110 	add.w	r1, r7, #16
 800adca:	2300      	movs	r3, #0
 800adcc:	683a      	ldr	r2, [r7, #0]
 800adce:	f7fe f9c1 	bl	8009154 <xQueueGenericSendFromISR>
 800add2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800add4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800add6:	4618      	mov	r0, r3
 800add8:	3728      	adds	r7, #40	; 0x28
 800adda:	46bd      	mov	sp, r7
 800addc:	bd80      	pop	{r7, pc}
 800adde:	bf00      	nop
 800ade0:	20001588 	.word	0x20001588

0800ade4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800ade4:	b580      	push	{r7, lr}
 800ade6:	b088      	sub	sp, #32
 800ade8:	af02      	add	r7, sp, #8
 800adea:	6078      	str	r0, [r7, #4]
 800adec:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800adee:	4b22      	ldr	r3, [pc, #136]	; (800ae78 <prvProcessExpiredTimer+0x94>)
 800adf0:	681b      	ldr	r3, [r3, #0]
 800adf2:	68db      	ldr	r3, [r3, #12]
 800adf4:	68db      	ldr	r3, [r3, #12]
 800adf6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800adf8:	697b      	ldr	r3, [r7, #20]
 800adfa:	3304      	adds	r3, #4
 800adfc:	4618      	mov	r0, r3
 800adfe:	f7fd ff43 	bl	8008c88 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ae02:	697b      	ldr	r3, [r7, #20]
 800ae04:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ae08:	f003 0304 	and.w	r3, r3, #4
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	d022      	beq.n	800ae56 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800ae10:	697b      	ldr	r3, [r7, #20]
 800ae12:	699a      	ldr	r2, [r3, #24]
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	18d1      	adds	r1, r2, r3
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	683a      	ldr	r2, [r7, #0]
 800ae1c:	6978      	ldr	r0, [r7, #20]
 800ae1e:	f000 f8d1 	bl	800afc4 <prvInsertTimerInActiveList>
 800ae22:	4603      	mov	r3, r0
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	d01f      	beq.n	800ae68 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ae28:	2300      	movs	r3, #0
 800ae2a:	9300      	str	r3, [sp, #0]
 800ae2c:	2300      	movs	r3, #0
 800ae2e:	687a      	ldr	r2, [r7, #4]
 800ae30:	2100      	movs	r1, #0
 800ae32:	6978      	ldr	r0, [r7, #20]
 800ae34:	f7ff ff88 	bl	800ad48 <xTimerGenericCommand>
 800ae38:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800ae3a:	693b      	ldr	r3, [r7, #16]
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	d113      	bne.n	800ae68 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800ae40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae44:	f383 8811 	msr	BASEPRI, r3
 800ae48:	f3bf 8f6f 	isb	sy
 800ae4c:	f3bf 8f4f 	dsb	sy
 800ae50:	60fb      	str	r3, [r7, #12]
}
 800ae52:	bf00      	nop
 800ae54:	e7fe      	b.n	800ae54 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ae56:	697b      	ldr	r3, [r7, #20]
 800ae58:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ae5c:	f023 0301 	bic.w	r3, r3, #1
 800ae60:	b2da      	uxtb	r2, r3
 800ae62:	697b      	ldr	r3, [r7, #20]
 800ae64:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ae68:	697b      	ldr	r3, [r7, #20]
 800ae6a:	6a1b      	ldr	r3, [r3, #32]
 800ae6c:	6978      	ldr	r0, [r7, #20]
 800ae6e:	4798      	blx	r3
}
 800ae70:	bf00      	nop
 800ae72:	3718      	adds	r7, #24
 800ae74:	46bd      	mov	sp, r7
 800ae76:	bd80      	pop	{r7, pc}
 800ae78:	20001580 	.word	0x20001580

0800ae7c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800ae7c:	b580      	push	{r7, lr}
 800ae7e:	b084      	sub	sp, #16
 800ae80:	af00      	add	r7, sp, #0
 800ae82:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ae84:	f107 0308 	add.w	r3, r7, #8
 800ae88:	4618      	mov	r0, r3
 800ae8a:	f000 f857 	bl	800af3c <prvGetNextExpireTime>
 800ae8e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800ae90:	68bb      	ldr	r3, [r7, #8]
 800ae92:	4619      	mov	r1, r3
 800ae94:	68f8      	ldr	r0, [r7, #12]
 800ae96:	f000 f803 	bl	800aea0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800ae9a:	f000 f8d5 	bl	800b048 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ae9e:	e7f1      	b.n	800ae84 <prvTimerTask+0x8>

0800aea0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800aea0:	b580      	push	{r7, lr}
 800aea2:	b084      	sub	sp, #16
 800aea4:	af00      	add	r7, sp, #0
 800aea6:	6078      	str	r0, [r7, #4]
 800aea8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800aeaa:	f7ff f81b 	bl	8009ee4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800aeae:	f107 0308 	add.w	r3, r7, #8
 800aeb2:	4618      	mov	r0, r3
 800aeb4:	f000 f866 	bl	800af84 <prvSampleTimeNow>
 800aeb8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800aeba:	68bb      	ldr	r3, [r7, #8]
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	d130      	bne.n	800af22 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800aec0:	683b      	ldr	r3, [r7, #0]
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	d10a      	bne.n	800aedc <prvProcessTimerOrBlockTask+0x3c>
 800aec6:	687a      	ldr	r2, [r7, #4]
 800aec8:	68fb      	ldr	r3, [r7, #12]
 800aeca:	429a      	cmp	r2, r3
 800aecc:	d806      	bhi.n	800aedc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800aece:	f7ff f817 	bl	8009f00 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800aed2:	68f9      	ldr	r1, [r7, #12]
 800aed4:	6878      	ldr	r0, [r7, #4]
 800aed6:	f7ff ff85 	bl	800ade4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800aeda:	e024      	b.n	800af26 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800aedc:	683b      	ldr	r3, [r7, #0]
 800aede:	2b00      	cmp	r3, #0
 800aee0:	d008      	beq.n	800aef4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800aee2:	4b13      	ldr	r3, [pc, #76]	; (800af30 <prvProcessTimerOrBlockTask+0x90>)
 800aee4:	681b      	ldr	r3, [r3, #0]
 800aee6:	681b      	ldr	r3, [r3, #0]
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	d101      	bne.n	800aef0 <prvProcessTimerOrBlockTask+0x50>
 800aeec:	2301      	movs	r3, #1
 800aeee:	e000      	b.n	800aef2 <prvProcessTimerOrBlockTask+0x52>
 800aef0:	2300      	movs	r3, #0
 800aef2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800aef4:	4b0f      	ldr	r3, [pc, #60]	; (800af34 <prvProcessTimerOrBlockTask+0x94>)
 800aef6:	6818      	ldr	r0, [r3, #0]
 800aef8:	687a      	ldr	r2, [r7, #4]
 800aefa:	68fb      	ldr	r3, [r7, #12]
 800aefc:	1ad3      	subs	r3, r2, r3
 800aefe:	683a      	ldr	r2, [r7, #0]
 800af00:	4619      	mov	r1, r3
 800af02:	f7fe fc81 	bl	8009808 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800af06:	f7fe fffb 	bl	8009f00 <xTaskResumeAll>
 800af0a:	4603      	mov	r3, r0
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	d10a      	bne.n	800af26 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800af10:	4b09      	ldr	r3, [pc, #36]	; (800af38 <prvProcessTimerOrBlockTask+0x98>)
 800af12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800af16:	601a      	str	r2, [r3, #0]
 800af18:	f3bf 8f4f 	dsb	sy
 800af1c:	f3bf 8f6f 	isb	sy
}
 800af20:	e001      	b.n	800af26 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800af22:	f7fe ffed 	bl	8009f00 <xTaskResumeAll>
}
 800af26:	bf00      	nop
 800af28:	3710      	adds	r7, #16
 800af2a:	46bd      	mov	sp, r7
 800af2c:	bd80      	pop	{r7, pc}
 800af2e:	bf00      	nop
 800af30:	20001584 	.word	0x20001584
 800af34:	20001588 	.word	0x20001588
 800af38:	e000ed04 	.word	0xe000ed04

0800af3c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800af3c:	b480      	push	{r7}
 800af3e:	b085      	sub	sp, #20
 800af40:	af00      	add	r7, sp, #0
 800af42:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800af44:	4b0e      	ldr	r3, [pc, #56]	; (800af80 <prvGetNextExpireTime+0x44>)
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	d101      	bne.n	800af52 <prvGetNextExpireTime+0x16>
 800af4e:	2201      	movs	r2, #1
 800af50:	e000      	b.n	800af54 <prvGetNextExpireTime+0x18>
 800af52:	2200      	movs	r2, #0
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	681b      	ldr	r3, [r3, #0]
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d105      	bne.n	800af6c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800af60:	4b07      	ldr	r3, [pc, #28]	; (800af80 <prvGetNextExpireTime+0x44>)
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	68db      	ldr	r3, [r3, #12]
 800af66:	681b      	ldr	r3, [r3, #0]
 800af68:	60fb      	str	r3, [r7, #12]
 800af6a:	e001      	b.n	800af70 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800af6c:	2300      	movs	r3, #0
 800af6e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800af70:	68fb      	ldr	r3, [r7, #12]
}
 800af72:	4618      	mov	r0, r3
 800af74:	3714      	adds	r7, #20
 800af76:	46bd      	mov	sp, r7
 800af78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af7c:	4770      	bx	lr
 800af7e:	bf00      	nop
 800af80:	20001580 	.word	0x20001580

0800af84 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800af84:	b580      	push	{r7, lr}
 800af86:	b084      	sub	sp, #16
 800af88:	af00      	add	r7, sp, #0
 800af8a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800af8c:	f7ff f856 	bl	800a03c <xTaskGetTickCount>
 800af90:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800af92:	4b0b      	ldr	r3, [pc, #44]	; (800afc0 <prvSampleTimeNow+0x3c>)
 800af94:	681b      	ldr	r3, [r3, #0]
 800af96:	68fa      	ldr	r2, [r7, #12]
 800af98:	429a      	cmp	r2, r3
 800af9a:	d205      	bcs.n	800afa8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800af9c:	f000 f936 	bl	800b20c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	2201      	movs	r2, #1
 800afa4:	601a      	str	r2, [r3, #0]
 800afa6:	e002      	b.n	800afae <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	2200      	movs	r2, #0
 800afac:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800afae:	4a04      	ldr	r2, [pc, #16]	; (800afc0 <prvSampleTimeNow+0x3c>)
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800afb4:	68fb      	ldr	r3, [r7, #12]
}
 800afb6:	4618      	mov	r0, r3
 800afb8:	3710      	adds	r7, #16
 800afba:	46bd      	mov	sp, r7
 800afbc:	bd80      	pop	{r7, pc}
 800afbe:	bf00      	nop
 800afc0:	20001590 	.word	0x20001590

0800afc4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800afc4:	b580      	push	{r7, lr}
 800afc6:	b086      	sub	sp, #24
 800afc8:	af00      	add	r7, sp, #0
 800afca:	60f8      	str	r0, [r7, #12]
 800afcc:	60b9      	str	r1, [r7, #8]
 800afce:	607a      	str	r2, [r7, #4]
 800afd0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800afd2:	2300      	movs	r3, #0
 800afd4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800afd6:	68fb      	ldr	r3, [r7, #12]
 800afd8:	68ba      	ldr	r2, [r7, #8]
 800afda:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800afdc:	68fb      	ldr	r3, [r7, #12]
 800afde:	68fa      	ldr	r2, [r7, #12]
 800afe0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800afe2:	68ba      	ldr	r2, [r7, #8]
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	429a      	cmp	r2, r3
 800afe8:	d812      	bhi.n	800b010 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800afea:	687a      	ldr	r2, [r7, #4]
 800afec:	683b      	ldr	r3, [r7, #0]
 800afee:	1ad2      	subs	r2, r2, r3
 800aff0:	68fb      	ldr	r3, [r7, #12]
 800aff2:	699b      	ldr	r3, [r3, #24]
 800aff4:	429a      	cmp	r2, r3
 800aff6:	d302      	bcc.n	800affe <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800aff8:	2301      	movs	r3, #1
 800affa:	617b      	str	r3, [r7, #20]
 800affc:	e01b      	b.n	800b036 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800affe:	4b10      	ldr	r3, [pc, #64]	; (800b040 <prvInsertTimerInActiveList+0x7c>)
 800b000:	681a      	ldr	r2, [r3, #0]
 800b002:	68fb      	ldr	r3, [r7, #12]
 800b004:	3304      	adds	r3, #4
 800b006:	4619      	mov	r1, r3
 800b008:	4610      	mov	r0, r2
 800b00a:	f7fd fe04 	bl	8008c16 <vListInsert>
 800b00e:	e012      	b.n	800b036 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800b010:	687a      	ldr	r2, [r7, #4]
 800b012:	683b      	ldr	r3, [r7, #0]
 800b014:	429a      	cmp	r2, r3
 800b016:	d206      	bcs.n	800b026 <prvInsertTimerInActiveList+0x62>
 800b018:	68ba      	ldr	r2, [r7, #8]
 800b01a:	683b      	ldr	r3, [r7, #0]
 800b01c:	429a      	cmp	r2, r3
 800b01e:	d302      	bcc.n	800b026 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800b020:	2301      	movs	r3, #1
 800b022:	617b      	str	r3, [r7, #20]
 800b024:	e007      	b.n	800b036 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b026:	4b07      	ldr	r3, [pc, #28]	; (800b044 <prvInsertTimerInActiveList+0x80>)
 800b028:	681a      	ldr	r2, [r3, #0]
 800b02a:	68fb      	ldr	r3, [r7, #12]
 800b02c:	3304      	adds	r3, #4
 800b02e:	4619      	mov	r1, r3
 800b030:	4610      	mov	r0, r2
 800b032:	f7fd fdf0 	bl	8008c16 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800b036:	697b      	ldr	r3, [r7, #20]
}
 800b038:	4618      	mov	r0, r3
 800b03a:	3718      	adds	r7, #24
 800b03c:	46bd      	mov	sp, r7
 800b03e:	bd80      	pop	{r7, pc}
 800b040:	20001584 	.word	0x20001584
 800b044:	20001580 	.word	0x20001580

0800b048 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800b048:	b580      	push	{r7, lr}
 800b04a:	b08e      	sub	sp, #56	; 0x38
 800b04c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b04e:	e0ca      	b.n	800b1e6 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	2b00      	cmp	r3, #0
 800b054:	da18      	bge.n	800b088 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800b056:	1d3b      	adds	r3, r7, #4
 800b058:	3304      	adds	r3, #4
 800b05a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800b05c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b05e:	2b00      	cmp	r3, #0
 800b060:	d10a      	bne.n	800b078 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800b062:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b066:	f383 8811 	msr	BASEPRI, r3
 800b06a:	f3bf 8f6f 	isb	sy
 800b06e:	f3bf 8f4f 	dsb	sy
 800b072:	61fb      	str	r3, [r7, #28]
}
 800b074:	bf00      	nop
 800b076:	e7fe      	b.n	800b076 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800b078:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b07e:	6850      	ldr	r0, [r2, #4]
 800b080:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b082:	6892      	ldr	r2, [r2, #8]
 800b084:	4611      	mov	r1, r2
 800b086:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	f2c0 80aa 	blt.w	800b1e4 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800b090:	68fb      	ldr	r3, [r7, #12]
 800b092:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800b094:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b096:	695b      	ldr	r3, [r3, #20]
 800b098:	2b00      	cmp	r3, #0
 800b09a:	d004      	beq.n	800b0a6 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b09c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b09e:	3304      	adds	r3, #4
 800b0a0:	4618      	mov	r0, r3
 800b0a2:	f7fd fdf1 	bl	8008c88 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b0a6:	463b      	mov	r3, r7
 800b0a8:	4618      	mov	r0, r3
 800b0aa:	f7ff ff6b 	bl	800af84 <prvSampleTimeNow>
 800b0ae:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	2b09      	cmp	r3, #9
 800b0b4:	f200 8097 	bhi.w	800b1e6 <prvProcessReceivedCommands+0x19e>
 800b0b8:	a201      	add	r2, pc, #4	; (adr r2, 800b0c0 <prvProcessReceivedCommands+0x78>)
 800b0ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0be:	bf00      	nop
 800b0c0:	0800b0e9 	.word	0x0800b0e9
 800b0c4:	0800b0e9 	.word	0x0800b0e9
 800b0c8:	0800b0e9 	.word	0x0800b0e9
 800b0cc:	0800b15d 	.word	0x0800b15d
 800b0d0:	0800b171 	.word	0x0800b171
 800b0d4:	0800b1bb 	.word	0x0800b1bb
 800b0d8:	0800b0e9 	.word	0x0800b0e9
 800b0dc:	0800b0e9 	.word	0x0800b0e9
 800b0e0:	0800b15d 	.word	0x0800b15d
 800b0e4:	0800b171 	.word	0x0800b171
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b0e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0ea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b0ee:	f043 0301 	orr.w	r3, r3, #1
 800b0f2:	b2da      	uxtb	r2, r3
 800b0f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0f6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800b0fa:	68ba      	ldr	r2, [r7, #8]
 800b0fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0fe:	699b      	ldr	r3, [r3, #24]
 800b100:	18d1      	adds	r1, r2, r3
 800b102:	68bb      	ldr	r3, [r7, #8]
 800b104:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b106:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b108:	f7ff ff5c 	bl	800afc4 <prvInsertTimerInActiveList>
 800b10c:	4603      	mov	r3, r0
 800b10e:	2b00      	cmp	r3, #0
 800b110:	d069      	beq.n	800b1e6 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b112:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b114:	6a1b      	ldr	r3, [r3, #32]
 800b116:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b118:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b11a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b11c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b120:	f003 0304 	and.w	r3, r3, #4
 800b124:	2b00      	cmp	r3, #0
 800b126:	d05e      	beq.n	800b1e6 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800b128:	68ba      	ldr	r2, [r7, #8]
 800b12a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b12c:	699b      	ldr	r3, [r3, #24]
 800b12e:	441a      	add	r2, r3
 800b130:	2300      	movs	r3, #0
 800b132:	9300      	str	r3, [sp, #0]
 800b134:	2300      	movs	r3, #0
 800b136:	2100      	movs	r1, #0
 800b138:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b13a:	f7ff fe05 	bl	800ad48 <xTimerGenericCommand>
 800b13e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800b140:	6a3b      	ldr	r3, [r7, #32]
 800b142:	2b00      	cmp	r3, #0
 800b144:	d14f      	bne.n	800b1e6 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800b146:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b14a:	f383 8811 	msr	BASEPRI, r3
 800b14e:	f3bf 8f6f 	isb	sy
 800b152:	f3bf 8f4f 	dsb	sy
 800b156:	61bb      	str	r3, [r7, #24]
}
 800b158:	bf00      	nop
 800b15a:	e7fe      	b.n	800b15a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b15c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b15e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b162:	f023 0301 	bic.w	r3, r3, #1
 800b166:	b2da      	uxtb	r2, r3
 800b168:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b16a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800b16e:	e03a      	b.n	800b1e6 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b170:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b172:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b176:	f043 0301 	orr.w	r3, r3, #1
 800b17a:	b2da      	uxtb	r2, r3
 800b17c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b17e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800b182:	68ba      	ldr	r2, [r7, #8]
 800b184:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b186:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800b188:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b18a:	699b      	ldr	r3, [r3, #24]
 800b18c:	2b00      	cmp	r3, #0
 800b18e:	d10a      	bne.n	800b1a6 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800b190:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b194:	f383 8811 	msr	BASEPRI, r3
 800b198:	f3bf 8f6f 	isb	sy
 800b19c:	f3bf 8f4f 	dsb	sy
 800b1a0:	617b      	str	r3, [r7, #20]
}
 800b1a2:	bf00      	nop
 800b1a4:	e7fe      	b.n	800b1a4 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800b1a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1a8:	699a      	ldr	r2, [r3, #24]
 800b1aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1ac:	18d1      	adds	r1, r2, r3
 800b1ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b1b2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b1b4:	f7ff ff06 	bl	800afc4 <prvInsertTimerInActiveList>
					break;
 800b1b8:	e015      	b.n	800b1e6 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800b1ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1bc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b1c0:	f003 0302 	and.w	r3, r3, #2
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	d103      	bne.n	800b1d0 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800b1c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b1ca:	f000 fbe1 	bl	800b990 <vPortFree>
 800b1ce:	e00a      	b.n	800b1e6 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b1d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1d2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b1d6:	f023 0301 	bic.w	r3, r3, #1
 800b1da:	b2da      	uxtb	r2, r3
 800b1dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1de:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800b1e2:	e000      	b.n	800b1e6 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800b1e4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b1e6:	4b08      	ldr	r3, [pc, #32]	; (800b208 <prvProcessReceivedCommands+0x1c0>)
 800b1e8:	681b      	ldr	r3, [r3, #0]
 800b1ea:	1d39      	adds	r1, r7, #4
 800b1ec:	2200      	movs	r2, #0
 800b1ee:	4618      	mov	r0, r3
 800b1f0:	f7fe f84c 	bl	800928c <xQueueReceive>
 800b1f4:	4603      	mov	r3, r0
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	f47f af2a 	bne.w	800b050 <prvProcessReceivedCommands+0x8>
	}
}
 800b1fc:	bf00      	nop
 800b1fe:	bf00      	nop
 800b200:	3730      	adds	r7, #48	; 0x30
 800b202:	46bd      	mov	sp, r7
 800b204:	bd80      	pop	{r7, pc}
 800b206:	bf00      	nop
 800b208:	20001588 	.word	0x20001588

0800b20c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800b20c:	b580      	push	{r7, lr}
 800b20e:	b088      	sub	sp, #32
 800b210:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b212:	e048      	b.n	800b2a6 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b214:	4b2d      	ldr	r3, [pc, #180]	; (800b2cc <prvSwitchTimerLists+0xc0>)
 800b216:	681b      	ldr	r3, [r3, #0]
 800b218:	68db      	ldr	r3, [r3, #12]
 800b21a:	681b      	ldr	r3, [r3, #0]
 800b21c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b21e:	4b2b      	ldr	r3, [pc, #172]	; (800b2cc <prvSwitchTimerLists+0xc0>)
 800b220:	681b      	ldr	r3, [r3, #0]
 800b222:	68db      	ldr	r3, [r3, #12]
 800b224:	68db      	ldr	r3, [r3, #12]
 800b226:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b228:	68fb      	ldr	r3, [r7, #12]
 800b22a:	3304      	adds	r3, #4
 800b22c:	4618      	mov	r0, r3
 800b22e:	f7fd fd2b 	bl	8008c88 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b232:	68fb      	ldr	r3, [r7, #12]
 800b234:	6a1b      	ldr	r3, [r3, #32]
 800b236:	68f8      	ldr	r0, [r7, #12]
 800b238:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b23a:	68fb      	ldr	r3, [r7, #12]
 800b23c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b240:	f003 0304 	and.w	r3, r3, #4
 800b244:	2b00      	cmp	r3, #0
 800b246:	d02e      	beq.n	800b2a6 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800b248:	68fb      	ldr	r3, [r7, #12]
 800b24a:	699b      	ldr	r3, [r3, #24]
 800b24c:	693a      	ldr	r2, [r7, #16]
 800b24e:	4413      	add	r3, r2
 800b250:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800b252:	68ba      	ldr	r2, [r7, #8]
 800b254:	693b      	ldr	r3, [r7, #16]
 800b256:	429a      	cmp	r2, r3
 800b258:	d90e      	bls.n	800b278 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800b25a:	68fb      	ldr	r3, [r7, #12]
 800b25c:	68ba      	ldr	r2, [r7, #8]
 800b25e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b260:	68fb      	ldr	r3, [r7, #12]
 800b262:	68fa      	ldr	r2, [r7, #12]
 800b264:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b266:	4b19      	ldr	r3, [pc, #100]	; (800b2cc <prvSwitchTimerLists+0xc0>)
 800b268:	681a      	ldr	r2, [r3, #0]
 800b26a:	68fb      	ldr	r3, [r7, #12]
 800b26c:	3304      	adds	r3, #4
 800b26e:	4619      	mov	r1, r3
 800b270:	4610      	mov	r0, r2
 800b272:	f7fd fcd0 	bl	8008c16 <vListInsert>
 800b276:	e016      	b.n	800b2a6 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b278:	2300      	movs	r3, #0
 800b27a:	9300      	str	r3, [sp, #0]
 800b27c:	2300      	movs	r3, #0
 800b27e:	693a      	ldr	r2, [r7, #16]
 800b280:	2100      	movs	r1, #0
 800b282:	68f8      	ldr	r0, [r7, #12]
 800b284:	f7ff fd60 	bl	800ad48 <xTimerGenericCommand>
 800b288:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	d10a      	bne.n	800b2a6 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800b290:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b294:	f383 8811 	msr	BASEPRI, r3
 800b298:	f3bf 8f6f 	isb	sy
 800b29c:	f3bf 8f4f 	dsb	sy
 800b2a0:	603b      	str	r3, [r7, #0]
}
 800b2a2:	bf00      	nop
 800b2a4:	e7fe      	b.n	800b2a4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b2a6:	4b09      	ldr	r3, [pc, #36]	; (800b2cc <prvSwitchTimerLists+0xc0>)
 800b2a8:	681b      	ldr	r3, [r3, #0]
 800b2aa:	681b      	ldr	r3, [r3, #0]
 800b2ac:	2b00      	cmp	r3, #0
 800b2ae:	d1b1      	bne.n	800b214 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800b2b0:	4b06      	ldr	r3, [pc, #24]	; (800b2cc <prvSwitchTimerLists+0xc0>)
 800b2b2:	681b      	ldr	r3, [r3, #0]
 800b2b4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800b2b6:	4b06      	ldr	r3, [pc, #24]	; (800b2d0 <prvSwitchTimerLists+0xc4>)
 800b2b8:	681b      	ldr	r3, [r3, #0]
 800b2ba:	4a04      	ldr	r2, [pc, #16]	; (800b2cc <prvSwitchTimerLists+0xc0>)
 800b2bc:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800b2be:	4a04      	ldr	r2, [pc, #16]	; (800b2d0 <prvSwitchTimerLists+0xc4>)
 800b2c0:	697b      	ldr	r3, [r7, #20]
 800b2c2:	6013      	str	r3, [r2, #0]
}
 800b2c4:	bf00      	nop
 800b2c6:	3718      	adds	r7, #24
 800b2c8:	46bd      	mov	sp, r7
 800b2ca:	bd80      	pop	{r7, pc}
 800b2cc:	20001580 	.word	0x20001580
 800b2d0:	20001584 	.word	0x20001584

0800b2d4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800b2d4:	b580      	push	{r7, lr}
 800b2d6:	b082      	sub	sp, #8
 800b2d8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800b2da:	f000 f96b 	bl	800b5b4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800b2de:	4b15      	ldr	r3, [pc, #84]	; (800b334 <prvCheckForValidListAndQueue+0x60>)
 800b2e0:	681b      	ldr	r3, [r3, #0]
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	d120      	bne.n	800b328 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800b2e6:	4814      	ldr	r0, [pc, #80]	; (800b338 <prvCheckForValidListAndQueue+0x64>)
 800b2e8:	f7fd fc44 	bl	8008b74 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800b2ec:	4813      	ldr	r0, [pc, #76]	; (800b33c <prvCheckForValidListAndQueue+0x68>)
 800b2ee:	f7fd fc41 	bl	8008b74 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800b2f2:	4b13      	ldr	r3, [pc, #76]	; (800b340 <prvCheckForValidListAndQueue+0x6c>)
 800b2f4:	4a10      	ldr	r2, [pc, #64]	; (800b338 <prvCheckForValidListAndQueue+0x64>)
 800b2f6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800b2f8:	4b12      	ldr	r3, [pc, #72]	; (800b344 <prvCheckForValidListAndQueue+0x70>)
 800b2fa:	4a10      	ldr	r2, [pc, #64]	; (800b33c <prvCheckForValidListAndQueue+0x68>)
 800b2fc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800b2fe:	2300      	movs	r3, #0
 800b300:	9300      	str	r3, [sp, #0]
 800b302:	4b11      	ldr	r3, [pc, #68]	; (800b348 <prvCheckForValidListAndQueue+0x74>)
 800b304:	4a11      	ldr	r2, [pc, #68]	; (800b34c <prvCheckForValidListAndQueue+0x78>)
 800b306:	2110      	movs	r1, #16
 800b308:	200a      	movs	r0, #10
 800b30a:	f7fd fd4f 	bl	8008dac <xQueueGenericCreateStatic>
 800b30e:	4603      	mov	r3, r0
 800b310:	4a08      	ldr	r2, [pc, #32]	; (800b334 <prvCheckForValidListAndQueue+0x60>)
 800b312:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800b314:	4b07      	ldr	r3, [pc, #28]	; (800b334 <prvCheckForValidListAndQueue+0x60>)
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	2b00      	cmp	r3, #0
 800b31a:	d005      	beq.n	800b328 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800b31c:	4b05      	ldr	r3, [pc, #20]	; (800b334 <prvCheckForValidListAndQueue+0x60>)
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	490b      	ldr	r1, [pc, #44]	; (800b350 <prvCheckForValidListAndQueue+0x7c>)
 800b322:	4618      	mov	r0, r3
 800b324:	f7fe fa46 	bl	80097b4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b328:	f000 f974 	bl	800b614 <vPortExitCritical>
}
 800b32c:	bf00      	nop
 800b32e:	46bd      	mov	sp, r7
 800b330:	bd80      	pop	{r7, pc}
 800b332:	bf00      	nop
 800b334:	20001588 	.word	0x20001588
 800b338:	20001558 	.word	0x20001558
 800b33c:	2000156c 	.word	0x2000156c
 800b340:	20001580 	.word	0x20001580
 800b344:	20001584 	.word	0x20001584
 800b348:	20001634 	.word	0x20001634
 800b34c:	20001594 	.word	0x20001594
 800b350:	0800d5b4 	.word	0x0800d5b4

0800b354 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b354:	b480      	push	{r7}
 800b356:	b085      	sub	sp, #20
 800b358:	af00      	add	r7, sp, #0
 800b35a:	60f8      	str	r0, [r7, #12]
 800b35c:	60b9      	str	r1, [r7, #8]
 800b35e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b360:	68fb      	ldr	r3, [r7, #12]
 800b362:	3b04      	subs	r3, #4
 800b364:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b366:	68fb      	ldr	r3, [r7, #12]
 800b368:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800b36c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b36e:	68fb      	ldr	r3, [r7, #12]
 800b370:	3b04      	subs	r3, #4
 800b372:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b374:	68bb      	ldr	r3, [r7, #8]
 800b376:	f023 0201 	bic.w	r2, r3, #1
 800b37a:	68fb      	ldr	r3, [r7, #12]
 800b37c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b37e:	68fb      	ldr	r3, [r7, #12]
 800b380:	3b04      	subs	r3, #4
 800b382:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b384:	4a0c      	ldr	r2, [pc, #48]	; (800b3b8 <pxPortInitialiseStack+0x64>)
 800b386:	68fb      	ldr	r3, [r7, #12]
 800b388:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b38a:	68fb      	ldr	r3, [r7, #12]
 800b38c:	3b14      	subs	r3, #20
 800b38e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b390:	687a      	ldr	r2, [r7, #4]
 800b392:	68fb      	ldr	r3, [r7, #12]
 800b394:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b396:	68fb      	ldr	r3, [r7, #12]
 800b398:	3b04      	subs	r3, #4
 800b39a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b39c:	68fb      	ldr	r3, [r7, #12]
 800b39e:	f06f 0202 	mvn.w	r2, #2
 800b3a2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b3a4:	68fb      	ldr	r3, [r7, #12]
 800b3a6:	3b20      	subs	r3, #32
 800b3a8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b3aa:	68fb      	ldr	r3, [r7, #12]
}
 800b3ac:	4618      	mov	r0, r3
 800b3ae:	3714      	adds	r7, #20
 800b3b0:	46bd      	mov	sp, r7
 800b3b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3b6:	4770      	bx	lr
 800b3b8:	0800b3bd 	.word	0x0800b3bd

0800b3bc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b3bc:	b480      	push	{r7}
 800b3be:	b085      	sub	sp, #20
 800b3c0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800b3c2:	2300      	movs	r3, #0
 800b3c4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b3c6:	4b12      	ldr	r3, [pc, #72]	; (800b410 <prvTaskExitError+0x54>)
 800b3c8:	681b      	ldr	r3, [r3, #0]
 800b3ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b3ce:	d00a      	beq.n	800b3e6 <prvTaskExitError+0x2a>
	__asm volatile
 800b3d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3d4:	f383 8811 	msr	BASEPRI, r3
 800b3d8:	f3bf 8f6f 	isb	sy
 800b3dc:	f3bf 8f4f 	dsb	sy
 800b3e0:	60fb      	str	r3, [r7, #12]
}
 800b3e2:	bf00      	nop
 800b3e4:	e7fe      	b.n	800b3e4 <prvTaskExitError+0x28>
	__asm volatile
 800b3e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3ea:	f383 8811 	msr	BASEPRI, r3
 800b3ee:	f3bf 8f6f 	isb	sy
 800b3f2:	f3bf 8f4f 	dsb	sy
 800b3f6:	60bb      	str	r3, [r7, #8]
}
 800b3f8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b3fa:	bf00      	nop
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	d0fc      	beq.n	800b3fc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b402:	bf00      	nop
 800b404:	bf00      	nop
 800b406:	3714      	adds	r7, #20
 800b408:	46bd      	mov	sp, r7
 800b40a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b40e:	4770      	bx	lr
 800b410:	20000044 	.word	0x20000044
	...

0800b420 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b420:	4b07      	ldr	r3, [pc, #28]	; (800b440 <pxCurrentTCBConst2>)
 800b422:	6819      	ldr	r1, [r3, #0]
 800b424:	6808      	ldr	r0, [r1, #0]
 800b426:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b42a:	f380 8809 	msr	PSP, r0
 800b42e:	f3bf 8f6f 	isb	sy
 800b432:	f04f 0000 	mov.w	r0, #0
 800b436:	f380 8811 	msr	BASEPRI, r0
 800b43a:	4770      	bx	lr
 800b43c:	f3af 8000 	nop.w

0800b440 <pxCurrentTCBConst2>:
 800b440:	20001050 	.word	0x20001050
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b444:	bf00      	nop
 800b446:	bf00      	nop

0800b448 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b448:	4808      	ldr	r0, [pc, #32]	; (800b46c <prvPortStartFirstTask+0x24>)
 800b44a:	6800      	ldr	r0, [r0, #0]
 800b44c:	6800      	ldr	r0, [r0, #0]
 800b44e:	f380 8808 	msr	MSP, r0
 800b452:	f04f 0000 	mov.w	r0, #0
 800b456:	f380 8814 	msr	CONTROL, r0
 800b45a:	b662      	cpsie	i
 800b45c:	b661      	cpsie	f
 800b45e:	f3bf 8f4f 	dsb	sy
 800b462:	f3bf 8f6f 	isb	sy
 800b466:	df00      	svc	0
 800b468:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b46a:	bf00      	nop
 800b46c:	e000ed08 	.word	0xe000ed08

0800b470 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b470:	b580      	push	{r7, lr}
 800b472:	b086      	sub	sp, #24
 800b474:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b476:	4b46      	ldr	r3, [pc, #280]	; (800b590 <xPortStartScheduler+0x120>)
 800b478:	681b      	ldr	r3, [r3, #0]
 800b47a:	4a46      	ldr	r2, [pc, #280]	; (800b594 <xPortStartScheduler+0x124>)
 800b47c:	4293      	cmp	r3, r2
 800b47e:	d10a      	bne.n	800b496 <xPortStartScheduler+0x26>
	__asm volatile
 800b480:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b484:	f383 8811 	msr	BASEPRI, r3
 800b488:	f3bf 8f6f 	isb	sy
 800b48c:	f3bf 8f4f 	dsb	sy
 800b490:	613b      	str	r3, [r7, #16]
}
 800b492:	bf00      	nop
 800b494:	e7fe      	b.n	800b494 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b496:	4b3e      	ldr	r3, [pc, #248]	; (800b590 <xPortStartScheduler+0x120>)
 800b498:	681b      	ldr	r3, [r3, #0]
 800b49a:	4a3f      	ldr	r2, [pc, #252]	; (800b598 <xPortStartScheduler+0x128>)
 800b49c:	4293      	cmp	r3, r2
 800b49e:	d10a      	bne.n	800b4b6 <xPortStartScheduler+0x46>
	__asm volatile
 800b4a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4a4:	f383 8811 	msr	BASEPRI, r3
 800b4a8:	f3bf 8f6f 	isb	sy
 800b4ac:	f3bf 8f4f 	dsb	sy
 800b4b0:	60fb      	str	r3, [r7, #12]
}
 800b4b2:	bf00      	nop
 800b4b4:	e7fe      	b.n	800b4b4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b4b6:	4b39      	ldr	r3, [pc, #228]	; (800b59c <xPortStartScheduler+0x12c>)
 800b4b8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b4ba:	697b      	ldr	r3, [r7, #20]
 800b4bc:	781b      	ldrb	r3, [r3, #0]
 800b4be:	b2db      	uxtb	r3, r3
 800b4c0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b4c2:	697b      	ldr	r3, [r7, #20]
 800b4c4:	22ff      	movs	r2, #255	; 0xff
 800b4c6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b4c8:	697b      	ldr	r3, [r7, #20]
 800b4ca:	781b      	ldrb	r3, [r3, #0]
 800b4cc:	b2db      	uxtb	r3, r3
 800b4ce:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b4d0:	78fb      	ldrb	r3, [r7, #3]
 800b4d2:	b2db      	uxtb	r3, r3
 800b4d4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800b4d8:	b2da      	uxtb	r2, r3
 800b4da:	4b31      	ldr	r3, [pc, #196]	; (800b5a0 <xPortStartScheduler+0x130>)
 800b4dc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b4de:	4b31      	ldr	r3, [pc, #196]	; (800b5a4 <xPortStartScheduler+0x134>)
 800b4e0:	2207      	movs	r2, #7
 800b4e2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b4e4:	e009      	b.n	800b4fa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800b4e6:	4b2f      	ldr	r3, [pc, #188]	; (800b5a4 <xPortStartScheduler+0x134>)
 800b4e8:	681b      	ldr	r3, [r3, #0]
 800b4ea:	3b01      	subs	r3, #1
 800b4ec:	4a2d      	ldr	r2, [pc, #180]	; (800b5a4 <xPortStartScheduler+0x134>)
 800b4ee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b4f0:	78fb      	ldrb	r3, [r7, #3]
 800b4f2:	b2db      	uxtb	r3, r3
 800b4f4:	005b      	lsls	r3, r3, #1
 800b4f6:	b2db      	uxtb	r3, r3
 800b4f8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b4fa:	78fb      	ldrb	r3, [r7, #3]
 800b4fc:	b2db      	uxtb	r3, r3
 800b4fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b502:	2b80      	cmp	r3, #128	; 0x80
 800b504:	d0ef      	beq.n	800b4e6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b506:	4b27      	ldr	r3, [pc, #156]	; (800b5a4 <xPortStartScheduler+0x134>)
 800b508:	681b      	ldr	r3, [r3, #0]
 800b50a:	f1c3 0307 	rsb	r3, r3, #7
 800b50e:	2b04      	cmp	r3, #4
 800b510:	d00a      	beq.n	800b528 <xPortStartScheduler+0xb8>
	__asm volatile
 800b512:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b516:	f383 8811 	msr	BASEPRI, r3
 800b51a:	f3bf 8f6f 	isb	sy
 800b51e:	f3bf 8f4f 	dsb	sy
 800b522:	60bb      	str	r3, [r7, #8]
}
 800b524:	bf00      	nop
 800b526:	e7fe      	b.n	800b526 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b528:	4b1e      	ldr	r3, [pc, #120]	; (800b5a4 <xPortStartScheduler+0x134>)
 800b52a:	681b      	ldr	r3, [r3, #0]
 800b52c:	021b      	lsls	r3, r3, #8
 800b52e:	4a1d      	ldr	r2, [pc, #116]	; (800b5a4 <xPortStartScheduler+0x134>)
 800b530:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b532:	4b1c      	ldr	r3, [pc, #112]	; (800b5a4 <xPortStartScheduler+0x134>)
 800b534:	681b      	ldr	r3, [r3, #0]
 800b536:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b53a:	4a1a      	ldr	r2, [pc, #104]	; (800b5a4 <xPortStartScheduler+0x134>)
 800b53c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	b2da      	uxtb	r2, r3
 800b542:	697b      	ldr	r3, [r7, #20]
 800b544:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b546:	4b18      	ldr	r3, [pc, #96]	; (800b5a8 <xPortStartScheduler+0x138>)
 800b548:	681b      	ldr	r3, [r3, #0]
 800b54a:	4a17      	ldr	r2, [pc, #92]	; (800b5a8 <xPortStartScheduler+0x138>)
 800b54c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b550:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b552:	4b15      	ldr	r3, [pc, #84]	; (800b5a8 <xPortStartScheduler+0x138>)
 800b554:	681b      	ldr	r3, [r3, #0]
 800b556:	4a14      	ldr	r2, [pc, #80]	; (800b5a8 <xPortStartScheduler+0x138>)
 800b558:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800b55c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b55e:	f000 f8dd 	bl	800b71c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b562:	4b12      	ldr	r3, [pc, #72]	; (800b5ac <xPortStartScheduler+0x13c>)
 800b564:	2200      	movs	r2, #0
 800b566:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b568:	f000 f8fc 	bl	800b764 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b56c:	4b10      	ldr	r3, [pc, #64]	; (800b5b0 <xPortStartScheduler+0x140>)
 800b56e:	681b      	ldr	r3, [r3, #0]
 800b570:	4a0f      	ldr	r2, [pc, #60]	; (800b5b0 <xPortStartScheduler+0x140>)
 800b572:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800b576:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b578:	f7ff ff66 	bl	800b448 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b57c:	f7fe fe28 	bl	800a1d0 <vTaskSwitchContext>
	prvTaskExitError();
 800b580:	f7ff ff1c 	bl	800b3bc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b584:	2300      	movs	r3, #0
}
 800b586:	4618      	mov	r0, r3
 800b588:	3718      	adds	r7, #24
 800b58a:	46bd      	mov	sp, r7
 800b58c:	bd80      	pop	{r7, pc}
 800b58e:	bf00      	nop
 800b590:	e000ed00 	.word	0xe000ed00
 800b594:	410fc271 	.word	0x410fc271
 800b598:	410fc270 	.word	0x410fc270
 800b59c:	e000e400 	.word	0xe000e400
 800b5a0:	20001684 	.word	0x20001684
 800b5a4:	20001688 	.word	0x20001688
 800b5a8:	e000ed20 	.word	0xe000ed20
 800b5ac:	20000044 	.word	0x20000044
 800b5b0:	e000ef34 	.word	0xe000ef34

0800b5b4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b5b4:	b480      	push	{r7}
 800b5b6:	b083      	sub	sp, #12
 800b5b8:	af00      	add	r7, sp, #0
	__asm volatile
 800b5ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5be:	f383 8811 	msr	BASEPRI, r3
 800b5c2:	f3bf 8f6f 	isb	sy
 800b5c6:	f3bf 8f4f 	dsb	sy
 800b5ca:	607b      	str	r3, [r7, #4]
}
 800b5cc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b5ce:	4b0f      	ldr	r3, [pc, #60]	; (800b60c <vPortEnterCritical+0x58>)
 800b5d0:	681b      	ldr	r3, [r3, #0]
 800b5d2:	3301      	adds	r3, #1
 800b5d4:	4a0d      	ldr	r2, [pc, #52]	; (800b60c <vPortEnterCritical+0x58>)
 800b5d6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b5d8:	4b0c      	ldr	r3, [pc, #48]	; (800b60c <vPortEnterCritical+0x58>)
 800b5da:	681b      	ldr	r3, [r3, #0]
 800b5dc:	2b01      	cmp	r3, #1
 800b5de:	d10f      	bne.n	800b600 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b5e0:	4b0b      	ldr	r3, [pc, #44]	; (800b610 <vPortEnterCritical+0x5c>)
 800b5e2:	681b      	ldr	r3, [r3, #0]
 800b5e4:	b2db      	uxtb	r3, r3
 800b5e6:	2b00      	cmp	r3, #0
 800b5e8:	d00a      	beq.n	800b600 <vPortEnterCritical+0x4c>
	__asm volatile
 800b5ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5ee:	f383 8811 	msr	BASEPRI, r3
 800b5f2:	f3bf 8f6f 	isb	sy
 800b5f6:	f3bf 8f4f 	dsb	sy
 800b5fa:	603b      	str	r3, [r7, #0]
}
 800b5fc:	bf00      	nop
 800b5fe:	e7fe      	b.n	800b5fe <vPortEnterCritical+0x4a>
	}
}
 800b600:	bf00      	nop
 800b602:	370c      	adds	r7, #12
 800b604:	46bd      	mov	sp, r7
 800b606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b60a:	4770      	bx	lr
 800b60c:	20000044 	.word	0x20000044
 800b610:	e000ed04 	.word	0xe000ed04

0800b614 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b614:	b480      	push	{r7}
 800b616:	b083      	sub	sp, #12
 800b618:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b61a:	4b12      	ldr	r3, [pc, #72]	; (800b664 <vPortExitCritical+0x50>)
 800b61c:	681b      	ldr	r3, [r3, #0]
 800b61e:	2b00      	cmp	r3, #0
 800b620:	d10a      	bne.n	800b638 <vPortExitCritical+0x24>
	__asm volatile
 800b622:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b626:	f383 8811 	msr	BASEPRI, r3
 800b62a:	f3bf 8f6f 	isb	sy
 800b62e:	f3bf 8f4f 	dsb	sy
 800b632:	607b      	str	r3, [r7, #4]
}
 800b634:	bf00      	nop
 800b636:	e7fe      	b.n	800b636 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800b638:	4b0a      	ldr	r3, [pc, #40]	; (800b664 <vPortExitCritical+0x50>)
 800b63a:	681b      	ldr	r3, [r3, #0]
 800b63c:	3b01      	subs	r3, #1
 800b63e:	4a09      	ldr	r2, [pc, #36]	; (800b664 <vPortExitCritical+0x50>)
 800b640:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b642:	4b08      	ldr	r3, [pc, #32]	; (800b664 <vPortExitCritical+0x50>)
 800b644:	681b      	ldr	r3, [r3, #0]
 800b646:	2b00      	cmp	r3, #0
 800b648:	d105      	bne.n	800b656 <vPortExitCritical+0x42>
 800b64a:	2300      	movs	r3, #0
 800b64c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b64e:	683b      	ldr	r3, [r7, #0]
 800b650:	f383 8811 	msr	BASEPRI, r3
}
 800b654:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800b656:	bf00      	nop
 800b658:	370c      	adds	r7, #12
 800b65a:	46bd      	mov	sp, r7
 800b65c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b660:	4770      	bx	lr
 800b662:	bf00      	nop
 800b664:	20000044 	.word	0x20000044
	...

0800b670 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b670:	f3ef 8009 	mrs	r0, PSP
 800b674:	f3bf 8f6f 	isb	sy
 800b678:	4b15      	ldr	r3, [pc, #84]	; (800b6d0 <pxCurrentTCBConst>)
 800b67a:	681a      	ldr	r2, [r3, #0]
 800b67c:	f01e 0f10 	tst.w	lr, #16
 800b680:	bf08      	it	eq
 800b682:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b686:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b68a:	6010      	str	r0, [r2, #0]
 800b68c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b690:	f04f 0050 	mov.w	r0, #80	; 0x50
 800b694:	f380 8811 	msr	BASEPRI, r0
 800b698:	f3bf 8f4f 	dsb	sy
 800b69c:	f3bf 8f6f 	isb	sy
 800b6a0:	f7fe fd96 	bl	800a1d0 <vTaskSwitchContext>
 800b6a4:	f04f 0000 	mov.w	r0, #0
 800b6a8:	f380 8811 	msr	BASEPRI, r0
 800b6ac:	bc09      	pop	{r0, r3}
 800b6ae:	6819      	ldr	r1, [r3, #0]
 800b6b0:	6808      	ldr	r0, [r1, #0]
 800b6b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6b6:	f01e 0f10 	tst.w	lr, #16
 800b6ba:	bf08      	it	eq
 800b6bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b6c0:	f380 8809 	msr	PSP, r0
 800b6c4:	f3bf 8f6f 	isb	sy
 800b6c8:	4770      	bx	lr
 800b6ca:	bf00      	nop
 800b6cc:	f3af 8000 	nop.w

0800b6d0 <pxCurrentTCBConst>:
 800b6d0:	20001050 	.word	0x20001050
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b6d4:	bf00      	nop
 800b6d6:	bf00      	nop

0800b6d8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b6d8:	b580      	push	{r7, lr}
 800b6da:	b082      	sub	sp, #8
 800b6dc:	af00      	add	r7, sp, #0
	__asm volatile
 800b6de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6e2:	f383 8811 	msr	BASEPRI, r3
 800b6e6:	f3bf 8f6f 	isb	sy
 800b6ea:	f3bf 8f4f 	dsb	sy
 800b6ee:	607b      	str	r3, [r7, #4]
}
 800b6f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b6f2:	f7fe fcb3 	bl	800a05c <xTaskIncrementTick>
 800b6f6:	4603      	mov	r3, r0
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	d003      	beq.n	800b704 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b6fc:	4b06      	ldr	r3, [pc, #24]	; (800b718 <xPortSysTickHandler+0x40>)
 800b6fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b702:	601a      	str	r2, [r3, #0]
 800b704:	2300      	movs	r3, #0
 800b706:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b708:	683b      	ldr	r3, [r7, #0]
 800b70a:	f383 8811 	msr	BASEPRI, r3
}
 800b70e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800b710:	bf00      	nop
 800b712:	3708      	adds	r7, #8
 800b714:	46bd      	mov	sp, r7
 800b716:	bd80      	pop	{r7, pc}
 800b718:	e000ed04 	.word	0xe000ed04

0800b71c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b71c:	b480      	push	{r7}
 800b71e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b720:	4b0b      	ldr	r3, [pc, #44]	; (800b750 <vPortSetupTimerInterrupt+0x34>)
 800b722:	2200      	movs	r2, #0
 800b724:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b726:	4b0b      	ldr	r3, [pc, #44]	; (800b754 <vPortSetupTimerInterrupt+0x38>)
 800b728:	2200      	movs	r2, #0
 800b72a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b72c:	4b0a      	ldr	r3, [pc, #40]	; (800b758 <vPortSetupTimerInterrupt+0x3c>)
 800b72e:	681b      	ldr	r3, [r3, #0]
 800b730:	4a0a      	ldr	r2, [pc, #40]	; (800b75c <vPortSetupTimerInterrupt+0x40>)
 800b732:	fba2 2303 	umull	r2, r3, r2, r3
 800b736:	099b      	lsrs	r3, r3, #6
 800b738:	4a09      	ldr	r2, [pc, #36]	; (800b760 <vPortSetupTimerInterrupt+0x44>)
 800b73a:	3b01      	subs	r3, #1
 800b73c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b73e:	4b04      	ldr	r3, [pc, #16]	; (800b750 <vPortSetupTimerInterrupt+0x34>)
 800b740:	2207      	movs	r2, #7
 800b742:	601a      	str	r2, [r3, #0]
}
 800b744:	bf00      	nop
 800b746:	46bd      	mov	sp, r7
 800b748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b74c:	4770      	bx	lr
 800b74e:	bf00      	nop
 800b750:	e000e010 	.word	0xe000e010
 800b754:	e000e018 	.word	0xe000e018
 800b758:	20000004 	.word	0x20000004
 800b75c:	10624dd3 	.word	0x10624dd3
 800b760:	e000e014 	.word	0xe000e014

0800b764 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b764:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800b774 <vPortEnableVFP+0x10>
 800b768:	6801      	ldr	r1, [r0, #0]
 800b76a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800b76e:	6001      	str	r1, [r0, #0]
 800b770:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b772:	bf00      	nop
 800b774:	e000ed88 	.word	0xe000ed88

0800b778 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b778:	b480      	push	{r7}
 800b77a:	b085      	sub	sp, #20
 800b77c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b77e:	f3ef 8305 	mrs	r3, IPSR
 800b782:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b784:	68fb      	ldr	r3, [r7, #12]
 800b786:	2b0f      	cmp	r3, #15
 800b788:	d914      	bls.n	800b7b4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b78a:	4a17      	ldr	r2, [pc, #92]	; (800b7e8 <vPortValidateInterruptPriority+0x70>)
 800b78c:	68fb      	ldr	r3, [r7, #12]
 800b78e:	4413      	add	r3, r2
 800b790:	781b      	ldrb	r3, [r3, #0]
 800b792:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b794:	4b15      	ldr	r3, [pc, #84]	; (800b7ec <vPortValidateInterruptPriority+0x74>)
 800b796:	781b      	ldrb	r3, [r3, #0]
 800b798:	7afa      	ldrb	r2, [r7, #11]
 800b79a:	429a      	cmp	r2, r3
 800b79c:	d20a      	bcs.n	800b7b4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800b79e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7a2:	f383 8811 	msr	BASEPRI, r3
 800b7a6:	f3bf 8f6f 	isb	sy
 800b7aa:	f3bf 8f4f 	dsb	sy
 800b7ae:	607b      	str	r3, [r7, #4]
}
 800b7b0:	bf00      	nop
 800b7b2:	e7fe      	b.n	800b7b2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b7b4:	4b0e      	ldr	r3, [pc, #56]	; (800b7f0 <vPortValidateInterruptPriority+0x78>)
 800b7b6:	681b      	ldr	r3, [r3, #0]
 800b7b8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800b7bc:	4b0d      	ldr	r3, [pc, #52]	; (800b7f4 <vPortValidateInterruptPriority+0x7c>)
 800b7be:	681b      	ldr	r3, [r3, #0]
 800b7c0:	429a      	cmp	r2, r3
 800b7c2:	d90a      	bls.n	800b7da <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800b7c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7c8:	f383 8811 	msr	BASEPRI, r3
 800b7cc:	f3bf 8f6f 	isb	sy
 800b7d0:	f3bf 8f4f 	dsb	sy
 800b7d4:	603b      	str	r3, [r7, #0]
}
 800b7d6:	bf00      	nop
 800b7d8:	e7fe      	b.n	800b7d8 <vPortValidateInterruptPriority+0x60>
	}
 800b7da:	bf00      	nop
 800b7dc:	3714      	adds	r7, #20
 800b7de:	46bd      	mov	sp, r7
 800b7e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7e4:	4770      	bx	lr
 800b7e6:	bf00      	nop
 800b7e8:	e000e3f0 	.word	0xe000e3f0
 800b7ec:	20001684 	.word	0x20001684
 800b7f0:	e000ed0c 	.word	0xe000ed0c
 800b7f4:	20001688 	.word	0x20001688

0800b7f8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b7f8:	b580      	push	{r7, lr}
 800b7fa:	b08a      	sub	sp, #40	; 0x28
 800b7fc:	af00      	add	r7, sp, #0
 800b7fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b800:	2300      	movs	r3, #0
 800b802:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b804:	f7fe fb6e 	bl	8009ee4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b808:	4b5b      	ldr	r3, [pc, #364]	; (800b978 <pvPortMalloc+0x180>)
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	d101      	bne.n	800b814 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b810:	f000 f920 	bl	800ba54 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b814:	4b59      	ldr	r3, [pc, #356]	; (800b97c <pvPortMalloc+0x184>)
 800b816:	681a      	ldr	r2, [r3, #0]
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	4013      	ands	r3, r2
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	f040 8093 	bne.w	800b948 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	2b00      	cmp	r3, #0
 800b826:	d01d      	beq.n	800b864 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800b828:	2208      	movs	r2, #8
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	4413      	add	r3, r2
 800b82e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	f003 0307 	and.w	r3, r3, #7
 800b836:	2b00      	cmp	r3, #0
 800b838:	d014      	beq.n	800b864 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	f023 0307 	bic.w	r3, r3, #7
 800b840:	3308      	adds	r3, #8
 800b842:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	f003 0307 	and.w	r3, r3, #7
 800b84a:	2b00      	cmp	r3, #0
 800b84c:	d00a      	beq.n	800b864 <pvPortMalloc+0x6c>
	__asm volatile
 800b84e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b852:	f383 8811 	msr	BASEPRI, r3
 800b856:	f3bf 8f6f 	isb	sy
 800b85a:	f3bf 8f4f 	dsb	sy
 800b85e:	617b      	str	r3, [r7, #20]
}
 800b860:	bf00      	nop
 800b862:	e7fe      	b.n	800b862 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	2b00      	cmp	r3, #0
 800b868:	d06e      	beq.n	800b948 <pvPortMalloc+0x150>
 800b86a:	4b45      	ldr	r3, [pc, #276]	; (800b980 <pvPortMalloc+0x188>)
 800b86c:	681b      	ldr	r3, [r3, #0]
 800b86e:	687a      	ldr	r2, [r7, #4]
 800b870:	429a      	cmp	r2, r3
 800b872:	d869      	bhi.n	800b948 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b874:	4b43      	ldr	r3, [pc, #268]	; (800b984 <pvPortMalloc+0x18c>)
 800b876:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b878:	4b42      	ldr	r3, [pc, #264]	; (800b984 <pvPortMalloc+0x18c>)
 800b87a:	681b      	ldr	r3, [r3, #0]
 800b87c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b87e:	e004      	b.n	800b88a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800b880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b882:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b886:	681b      	ldr	r3, [r3, #0]
 800b888:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b88a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b88c:	685b      	ldr	r3, [r3, #4]
 800b88e:	687a      	ldr	r2, [r7, #4]
 800b890:	429a      	cmp	r2, r3
 800b892:	d903      	bls.n	800b89c <pvPortMalloc+0xa4>
 800b894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b896:	681b      	ldr	r3, [r3, #0]
 800b898:	2b00      	cmp	r3, #0
 800b89a:	d1f1      	bne.n	800b880 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b89c:	4b36      	ldr	r3, [pc, #216]	; (800b978 <pvPortMalloc+0x180>)
 800b89e:	681b      	ldr	r3, [r3, #0]
 800b8a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b8a2:	429a      	cmp	r2, r3
 800b8a4:	d050      	beq.n	800b948 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b8a6:	6a3b      	ldr	r3, [r7, #32]
 800b8a8:	681b      	ldr	r3, [r3, #0]
 800b8aa:	2208      	movs	r2, #8
 800b8ac:	4413      	add	r3, r2
 800b8ae:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b8b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8b2:	681a      	ldr	r2, [r3, #0]
 800b8b4:	6a3b      	ldr	r3, [r7, #32]
 800b8b6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b8b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8ba:	685a      	ldr	r2, [r3, #4]
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	1ad2      	subs	r2, r2, r3
 800b8c0:	2308      	movs	r3, #8
 800b8c2:	005b      	lsls	r3, r3, #1
 800b8c4:	429a      	cmp	r2, r3
 800b8c6:	d91f      	bls.n	800b908 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b8c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	4413      	add	r3, r2
 800b8ce:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b8d0:	69bb      	ldr	r3, [r7, #24]
 800b8d2:	f003 0307 	and.w	r3, r3, #7
 800b8d6:	2b00      	cmp	r3, #0
 800b8d8:	d00a      	beq.n	800b8f0 <pvPortMalloc+0xf8>
	__asm volatile
 800b8da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8de:	f383 8811 	msr	BASEPRI, r3
 800b8e2:	f3bf 8f6f 	isb	sy
 800b8e6:	f3bf 8f4f 	dsb	sy
 800b8ea:	613b      	str	r3, [r7, #16]
}
 800b8ec:	bf00      	nop
 800b8ee:	e7fe      	b.n	800b8ee <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b8f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8f2:	685a      	ldr	r2, [r3, #4]
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	1ad2      	subs	r2, r2, r3
 800b8f8:	69bb      	ldr	r3, [r7, #24]
 800b8fa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b8fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8fe:	687a      	ldr	r2, [r7, #4]
 800b900:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b902:	69b8      	ldr	r0, [r7, #24]
 800b904:	f000 f908 	bl	800bb18 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b908:	4b1d      	ldr	r3, [pc, #116]	; (800b980 <pvPortMalloc+0x188>)
 800b90a:	681a      	ldr	r2, [r3, #0]
 800b90c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b90e:	685b      	ldr	r3, [r3, #4]
 800b910:	1ad3      	subs	r3, r2, r3
 800b912:	4a1b      	ldr	r2, [pc, #108]	; (800b980 <pvPortMalloc+0x188>)
 800b914:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b916:	4b1a      	ldr	r3, [pc, #104]	; (800b980 <pvPortMalloc+0x188>)
 800b918:	681a      	ldr	r2, [r3, #0]
 800b91a:	4b1b      	ldr	r3, [pc, #108]	; (800b988 <pvPortMalloc+0x190>)
 800b91c:	681b      	ldr	r3, [r3, #0]
 800b91e:	429a      	cmp	r2, r3
 800b920:	d203      	bcs.n	800b92a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b922:	4b17      	ldr	r3, [pc, #92]	; (800b980 <pvPortMalloc+0x188>)
 800b924:	681b      	ldr	r3, [r3, #0]
 800b926:	4a18      	ldr	r2, [pc, #96]	; (800b988 <pvPortMalloc+0x190>)
 800b928:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b92a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b92c:	685a      	ldr	r2, [r3, #4]
 800b92e:	4b13      	ldr	r3, [pc, #76]	; (800b97c <pvPortMalloc+0x184>)
 800b930:	681b      	ldr	r3, [r3, #0]
 800b932:	431a      	orrs	r2, r3
 800b934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b936:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b93a:	2200      	movs	r2, #0
 800b93c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800b93e:	4b13      	ldr	r3, [pc, #76]	; (800b98c <pvPortMalloc+0x194>)
 800b940:	681b      	ldr	r3, [r3, #0]
 800b942:	3301      	adds	r3, #1
 800b944:	4a11      	ldr	r2, [pc, #68]	; (800b98c <pvPortMalloc+0x194>)
 800b946:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b948:	f7fe fada 	bl	8009f00 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b94c:	69fb      	ldr	r3, [r7, #28]
 800b94e:	f003 0307 	and.w	r3, r3, #7
 800b952:	2b00      	cmp	r3, #0
 800b954:	d00a      	beq.n	800b96c <pvPortMalloc+0x174>
	__asm volatile
 800b956:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b95a:	f383 8811 	msr	BASEPRI, r3
 800b95e:	f3bf 8f6f 	isb	sy
 800b962:	f3bf 8f4f 	dsb	sy
 800b966:	60fb      	str	r3, [r7, #12]
}
 800b968:	bf00      	nop
 800b96a:	e7fe      	b.n	800b96a <pvPortMalloc+0x172>
	return pvReturn;
 800b96c:	69fb      	ldr	r3, [r7, #28]
}
 800b96e:	4618      	mov	r0, r3
 800b970:	3728      	adds	r7, #40	; 0x28
 800b972:	46bd      	mov	sp, r7
 800b974:	bd80      	pop	{r7, pc}
 800b976:	bf00      	nop
 800b978:	20002e04 	.word	0x20002e04
 800b97c:	20002e18 	.word	0x20002e18
 800b980:	20002e08 	.word	0x20002e08
 800b984:	20002dfc 	.word	0x20002dfc
 800b988:	20002e0c 	.word	0x20002e0c
 800b98c:	20002e10 	.word	0x20002e10

0800b990 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b990:	b580      	push	{r7, lr}
 800b992:	b086      	sub	sp, #24
 800b994:	af00      	add	r7, sp, #0
 800b996:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	2b00      	cmp	r3, #0
 800b9a0:	d04d      	beq.n	800ba3e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b9a2:	2308      	movs	r3, #8
 800b9a4:	425b      	negs	r3, r3
 800b9a6:	697a      	ldr	r2, [r7, #20]
 800b9a8:	4413      	add	r3, r2
 800b9aa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b9ac:	697b      	ldr	r3, [r7, #20]
 800b9ae:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b9b0:	693b      	ldr	r3, [r7, #16]
 800b9b2:	685a      	ldr	r2, [r3, #4]
 800b9b4:	4b24      	ldr	r3, [pc, #144]	; (800ba48 <vPortFree+0xb8>)
 800b9b6:	681b      	ldr	r3, [r3, #0]
 800b9b8:	4013      	ands	r3, r2
 800b9ba:	2b00      	cmp	r3, #0
 800b9bc:	d10a      	bne.n	800b9d4 <vPortFree+0x44>
	__asm volatile
 800b9be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9c2:	f383 8811 	msr	BASEPRI, r3
 800b9c6:	f3bf 8f6f 	isb	sy
 800b9ca:	f3bf 8f4f 	dsb	sy
 800b9ce:	60fb      	str	r3, [r7, #12]
}
 800b9d0:	bf00      	nop
 800b9d2:	e7fe      	b.n	800b9d2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b9d4:	693b      	ldr	r3, [r7, #16]
 800b9d6:	681b      	ldr	r3, [r3, #0]
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	d00a      	beq.n	800b9f2 <vPortFree+0x62>
	__asm volatile
 800b9dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9e0:	f383 8811 	msr	BASEPRI, r3
 800b9e4:	f3bf 8f6f 	isb	sy
 800b9e8:	f3bf 8f4f 	dsb	sy
 800b9ec:	60bb      	str	r3, [r7, #8]
}
 800b9ee:	bf00      	nop
 800b9f0:	e7fe      	b.n	800b9f0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b9f2:	693b      	ldr	r3, [r7, #16]
 800b9f4:	685a      	ldr	r2, [r3, #4]
 800b9f6:	4b14      	ldr	r3, [pc, #80]	; (800ba48 <vPortFree+0xb8>)
 800b9f8:	681b      	ldr	r3, [r3, #0]
 800b9fa:	4013      	ands	r3, r2
 800b9fc:	2b00      	cmp	r3, #0
 800b9fe:	d01e      	beq.n	800ba3e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800ba00:	693b      	ldr	r3, [r7, #16]
 800ba02:	681b      	ldr	r3, [r3, #0]
 800ba04:	2b00      	cmp	r3, #0
 800ba06:	d11a      	bne.n	800ba3e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ba08:	693b      	ldr	r3, [r7, #16]
 800ba0a:	685a      	ldr	r2, [r3, #4]
 800ba0c:	4b0e      	ldr	r3, [pc, #56]	; (800ba48 <vPortFree+0xb8>)
 800ba0e:	681b      	ldr	r3, [r3, #0]
 800ba10:	43db      	mvns	r3, r3
 800ba12:	401a      	ands	r2, r3
 800ba14:	693b      	ldr	r3, [r7, #16]
 800ba16:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800ba18:	f7fe fa64 	bl	8009ee4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ba1c:	693b      	ldr	r3, [r7, #16]
 800ba1e:	685a      	ldr	r2, [r3, #4]
 800ba20:	4b0a      	ldr	r3, [pc, #40]	; (800ba4c <vPortFree+0xbc>)
 800ba22:	681b      	ldr	r3, [r3, #0]
 800ba24:	4413      	add	r3, r2
 800ba26:	4a09      	ldr	r2, [pc, #36]	; (800ba4c <vPortFree+0xbc>)
 800ba28:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ba2a:	6938      	ldr	r0, [r7, #16]
 800ba2c:	f000 f874 	bl	800bb18 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800ba30:	4b07      	ldr	r3, [pc, #28]	; (800ba50 <vPortFree+0xc0>)
 800ba32:	681b      	ldr	r3, [r3, #0]
 800ba34:	3301      	adds	r3, #1
 800ba36:	4a06      	ldr	r2, [pc, #24]	; (800ba50 <vPortFree+0xc0>)
 800ba38:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800ba3a:	f7fe fa61 	bl	8009f00 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800ba3e:	bf00      	nop
 800ba40:	3718      	adds	r7, #24
 800ba42:	46bd      	mov	sp, r7
 800ba44:	bd80      	pop	{r7, pc}
 800ba46:	bf00      	nop
 800ba48:	20002e18 	.word	0x20002e18
 800ba4c:	20002e08 	.word	0x20002e08
 800ba50:	20002e14 	.word	0x20002e14

0800ba54 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800ba54:	b480      	push	{r7}
 800ba56:	b085      	sub	sp, #20
 800ba58:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ba5a:	f241 7370 	movw	r3, #6000	; 0x1770
 800ba5e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ba60:	4b27      	ldr	r3, [pc, #156]	; (800bb00 <prvHeapInit+0xac>)
 800ba62:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ba64:	68fb      	ldr	r3, [r7, #12]
 800ba66:	f003 0307 	and.w	r3, r3, #7
 800ba6a:	2b00      	cmp	r3, #0
 800ba6c:	d00c      	beq.n	800ba88 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ba6e:	68fb      	ldr	r3, [r7, #12]
 800ba70:	3307      	adds	r3, #7
 800ba72:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ba74:	68fb      	ldr	r3, [r7, #12]
 800ba76:	f023 0307 	bic.w	r3, r3, #7
 800ba7a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ba7c:	68ba      	ldr	r2, [r7, #8]
 800ba7e:	68fb      	ldr	r3, [r7, #12]
 800ba80:	1ad3      	subs	r3, r2, r3
 800ba82:	4a1f      	ldr	r2, [pc, #124]	; (800bb00 <prvHeapInit+0xac>)
 800ba84:	4413      	add	r3, r2
 800ba86:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ba88:	68fb      	ldr	r3, [r7, #12]
 800ba8a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ba8c:	4a1d      	ldr	r2, [pc, #116]	; (800bb04 <prvHeapInit+0xb0>)
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ba92:	4b1c      	ldr	r3, [pc, #112]	; (800bb04 <prvHeapInit+0xb0>)
 800ba94:	2200      	movs	r2, #0
 800ba96:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	68ba      	ldr	r2, [r7, #8]
 800ba9c:	4413      	add	r3, r2
 800ba9e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800baa0:	2208      	movs	r2, #8
 800baa2:	68fb      	ldr	r3, [r7, #12]
 800baa4:	1a9b      	subs	r3, r3, r2
 800baa6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800baa8:	68fb      	ldr	r3, [r7, #12]
 800baaa:	f023 0307 	bic.w	r3, r3, #7
 800baae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800bab0:	68fb      	ldr	r3, [r7, #12]
 800bab2:	4a15      	ldr	r2, [pc, #84]	; (800bb08 <prvHeapInit+0xb4>)
 800bab4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800bab6:	4b14      	ldr	r3, [pc, #80]	; (800bb08 <prvHeapInit+0xb4>)
 800bab8:	681b      	ldr	r3, [r3, #0]
 800baba:	2200      	movs	r2, #0
 800babc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800babe:	4b12      	ldr	r3, [pc, #72]	; (800bb08 <prvHeapInit+0xb4>)
 800bac0:	681b      	ldr	r3, [r3, #0]
 800bac2:	2200      	movs	r2, #0
 800bac4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800baca:	683b      	ldr	r3, [r7, #0]
 800bacc:	68fa      	ldr	r2, [r7, #12]
 800bace:	1ad2      	subs	r2, r2, r3
 800bad0:	683b      	ldr	r3, [r7, #0]
 800bad2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800bad4:	4b0c      	ldr	r3, [pc, #48]	; (800bb08 <prvHeapInit+0xb4>)
 800bad6:	681a      	ldr	r2, [r3, #0]
 800bad8:	683b      	ldr	r3, [r7, #0]
 800bada:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800badc:	683b      	ldr	r3, [r7, #0]
 800bade:	685b      	ldr	r3, [r3, #4]
 800bae0:	4a0a      	ldr	r2, [pc, #40]	; (800bb0c <prvHeapInit+0xb8>)
 800bae2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bae4:	683b      	ldr	r3, [r7, #0]
 800bae6:	685b      	ldr	r3, [r3, #4]
 800bae8:	4a09      	ldr	r2, [pc, #36]	; (800bb10 <prvHeapInit+0xbc>)
 800baea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800baec:	4b09      	ldr	r3, [pc, #36]	; (800bb14 <prvHeapInit+0xc0>)
 800baee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800baf2:	601a      	str	r2, [r3, #0]
}
 800baf4:	bf00      	nop
 800baf6:	3714      	adds	r7, #20
 800baf8:	46bd      	mov	sp, r7
 800bafa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bafe:	4770      	bx	lr
 800bb00:	2000168c 	.word	0x2000168c
 800bb04:	20002dfc 	.word	0x20002dfc
 800bb08:	20002e04 	.word	0x20002e04
 800bb0c:	20002e0c 	.word	0x20002e0c
 800bb10:	20002e08 	.word	0x20002e08
 800bb14:	20002e18 	.word	0x20002e18

0800bb18 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800bb18:	b480      	push	{r7}
 800bb1a:	b085      	sub	sp, #20
 800bb1c:	af00      	add	r7, sp, #0
 800bb1e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800bb20:	4b28      	ldr	r3, [pc, #160]	; (800bbc4 <prvInsertBlockIntoFreeList+0xac>)
 800bb22:	60fb      	str	r3, [r7, #12]
 800bb24:	e002      	b.n	800bb2c <prvInsertBlockIntoFreeList+0x14>
 800bb26:	68fb      	ldr	r3, [r7, #12]
 800bb28:	681b      	ldr	r3, [r3, #0]
 800bb2a:	60fb      	str	r3, [r7, #12]
 800bb2c:	68fb      	ldr	r3, [r7, #12]
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	687a      	ldr	r2, [r7, #4]
 800bb32:	429a      	cmp	r2, r3
 800bb34:	d8f7      	bhi.n	800bb26 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800bb36:	68fb      	ldr	r3, [r7, #12]
 800bb38:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800bb3a:	68fb      	ldr	r3, [r7, #12]
 800bb3c:	685b      	ldr	r3, [r3, #4]
 800bb3e:	68ba      	ldr	r2, [r7, #8]
 800bb40:	4413      	add	r3, r2
 800bb42:	687a      	ldr	r2, [r7, #4]
 800bb44:	429a      	cmp	r2, r3
 800bb46:	d108      	bne.n	800bb5a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800bb48:	68fb      	ldr	r3, [r7, #12]
 800bb4a:	685a      	ldr	r2, [r3, #4]
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	685b      	ldr	r3, [r3, #4]
 800bb50:	441a      	add	r2, r3
 800bb52:	68fb      	ldr	r3, [r7, #12]
 800bb54:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800bb56:	68fb      	ldr	r3, [r7, #12]
 800bb58:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	685b      	ldr	r3, [r3, #4]
 800bb62:	68ba      	ldr	r2, [r7, #8]
 800bb64:	441a      	add	r2, r3
 800bb66:	68fb      	ldr	r3, [r7, #12]
 800bb68:	681b      	ldr	r3, [r3, #0]
 800bb6a:	429a      	cmp	r2, r3
 800bb6c:	d118      	bne.n	800bba0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800bb6e:	68fb      	ldr	r3, [r7, #12]
 800bb70:	681a      	ldr	r2, [r3, #0]
 800bb72:	4b15      	ldr	r3, [pc, #84]	; (800bbc8 <prvInsertBlockIntoFreeList+0xb0>)
 800bb74:	681b      	ldr	r3, [r3, #0]
 800bb76:	429a      	cmp	r2, r3
 800bb78:	d00d      	beq.n	800bb96 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	685a      	ldr	r2, [r3, #4]
 800bb7e:	68fb      	ldr	r3, [r7, #12]
 800bb80:	681b      	ldr	r3, [r3, #0]
 800bb82:	685b      	ldr	r3, [r3, #4]
 800bb84:	441a      	add	r2, r3
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800bb8a:	68fb      	ldr	r3, [r7, #12]
 800bb8c:	681b      	ldr	r3, [r3, #0]
 800bb8e:	681a      	ldr	r2, [r3, #0]
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	601a      	str	r2, [r3, #0]
 800bb94:	e008      	b.n	800bba8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800bb96:	4b0c      	ldr	r3, [pc, #48]	; (800bbc8 <prvInsertBlockIntoFreeList+0xb0>)
 800bb98:	681a      	ldr	r2, [r3, #0]
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	601a      	str	r2, [r3, #0]
 800bb9e:	e003      	b.n	800bba8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800bba0:	68fb      	ldr	r3, [r7, #12]
 800bba2:	681a      	ldr	r2, [r3, #0]
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800bba8:	68fa      	ldr	r2, [r7, #12]
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	429a      	cmp	r2, r3
 800bbae:	d002      	beq.n	800bbb6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800bbb0:	68fb      	ldr	r3, [r7, #12]
 800bbb2:	687a      	ldr	r2, [r7, #4]
 800bbb4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bbb6:	bf00      	nop
 800bbb8:	3714      	adds	r7, #20
 800bbba:	46bd      	mov	sp, r7
 800bbbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbc0:	4770      	bx	lr
 800bbc2:	bf00      	nop
 800bbc4:	20002dfc 	.word	0x20002dfc
 800bbc8:	20002e04 	.word	0x20002e04

0800bbcc <__errno>:
 800bbcc:	4b01      	ldr	r3, [pc, #4]	; (800bbd4 <__errno+0x8>)
 800bbce:	6818      	ldr	r0, [r3, #0]
 800bbd0:	4770      	bx	lr
 800bbd2:	bf00      	nop
 800bbd4:	20000048 	.word	0x20000048

0800bbd8 <std>:
 800bbd8:	2300      	movs	r3, #0
 800bbda:	b510      	push	{r4, lr}
 800bbdc:	4604      	mov	r4, r0
 800bbde:	e9c0 3300 	strd	r3, r3, [r0]
 800bbe2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bbe6:	6083      	str	r3, [r0, #8]
 800bbe8:	8181      	strh	r1, [r0, #12]
 800bbea:	6643      	str	r3, [r0, #100]	; 0x64
 800bbec:	81c2      	strh	r2, [r0, #14]
 800bbee:	6183      	str	r3, [r0, #24]
 800bbf0:	4619      	mov	r1, r3
 800bbf2:	2208      	movs	r2, #8
 800bbf4:	305c      	adds	r0, #92	; 0x5c
 800bbf6:	f000 f91a 	bl	800be2e <memset>
 800bbfa:	4b05      	ldr	r3, [pc, #20]	; (800bc10 <std+0x38>)
 800bbfc:	6263      	str	r3, [r4, #36]	; 0x24
 800bbfe:	4b05      	ldr	r3, [pc, #20]	; (800bc14 <std+0x3c>)
 800bc00:	62a3      	str	r3, [r4, #40]	; 0x28
 800bc02:	4b05      	ldr	r3, [pc, #20]	; (800bc18 <std+0x40>)
 800bc04:	62e3      	str	r3, [r4, #44]	; 0x2c
 800bc06:	4b05      	ldr	r3, [pc, #20]	; (800bc1c <std+0x44>)
 800bc08:	6224      	str	r4, [r4, #32]
 800bc0a:	6323      	str	r3, [r4, #48]	; 0x30
 800bc0c:	bd10      	pop	{r4, pc}
 800bc0e:	bf00      	nop
 800bc10:	0800c1e1 	.word	0x0800c1e1
 800bc14:	0800c203 	.word	0x0800c203
 800bc18:	0800c23b 	.word	0x0800c23b
 800bc1c:	0800c25f 	.word	0x0800c25f

0800bc20 <_cleanup_r>:
 800bc20:	4901      	ldr	r1, [pc, #4]	; (800bc28 <_cleanup_r+0x8>)
 800bc22:	f000 b8af 	b.w	800bd84 <_fwalk_reent>
 800bc26:	bf00      	nop
 800bc28:	0800c539 	.word	0x0800c539

0800bc2c <__sfmoreglue>:
 800bc2c:	b570      	push	{r4, r5, r6, lr}
 800bc2e:	2268      	movs	r2, #104	; 0x68
 800bc30:	1e4d      	subs	r5, r1, #1
 800bc32:	4355      	muls	r5, r2
 800bc34:	460e      	mov	r6, r1
 800bc36:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800bc3a:	f000 f921 	bl	800be80 <_malloc_r>
 800bc3e:	4604      	mov	r4, r0
 800bc40:	b140      	cbz	r0, 800bc54 <__sfmoreglue+0x28>
 800bc42:	2100      	movs	r1, #0
 800bc44:	e9c0 1600 	strd	r1, r6, [r0]
 800bc48:	300c      	adds	r0, #12
 800bc4a:	60a0      	str	r0, [r4, #8]
 800bc4c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800bc50:	f000 f8ed 	bl	800be2e <memset>
 800bc54:	4620      	mov	r0, r4
 800bc56:	bd70      	pop	{r4, r5, r6, pc}

0800bc58 <__sfp_lock_acquire>:
 800bc58:	4801      	ldr	r0, [pc, #4]	; (800bc60 <__sfp_lock_acquire+0x8>)
 800bc5a:	f000 b8d8 	b.w	800be0e <__retarget_lock_acquire_recursive>
 800bc5e:	bf00      	nop
 800bc60:	20002e1d 	.word	0x20002e1d

0800bc64 <__sfp_lock_release>:
 800bc64:	4801      	ldr	r0, [pc, #4]	; (800bc6c <__sfp_lock_release+0x8>)
 800bc66:	f000 b8d3 	b.w	800be10 <__retarget_lock_release_recursive>
 800bc6a:	bf00      	nop
 800bc6c:	20002e1d 	.word	0x20002e1d

0800bc70 <__sinit_lock_acquire>:
 800bc70:	4801      	ldr	r0, [pc, #4]	; (800bc78 <__sinit_lock_acquire+0x8>)
 800bc72:	f000 b8cc 	b.w	800be0e <__retarget_lock_acquire_recursive>
 800bc76:	bf00      	nop
 800bc78:	20002e1e 	.word	0x20002e1e

0800bc7c <__sinit_lock_release>:
 800bc7c:	4801      	ldr	r0, [pc, #4]	; (800bc84 <__sinit_lock_release+0x8>)
 800bc7e:	f000 b8c7 	b.w	800be10 <__retarget_lock_release_recursive>
 800bc82:	bf00      	nop
 800bc84:	20002e1e 	.word	0x20002e1e

0800bc88 <__sinit>:
 800bc88:	b510      	push	{r4, lr}
 800bc8a:	4604      	mov	r4, r0
 800bc8c:	f7ff fff0 	bl	800bc70 <__sinit_lock_acquire>
 800bc90:	69a3      	ldr	r3, [r4, #24]
 800bc92:	b11b      	cbz	r3, 800bc9c <__sinit+0x14>
 800bc94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bc98:	f7ff bff0 	b.w	800bc7c <__sinit_lock_release>
 800bc9c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800bca0:	6523      	str	r3, [r4, #80]	; 0x50
 800bca2:	4b13      	ldr	r3, [pc, #76]	; (800bcf0 <__sinit+0x68>)
 800bca4:	4a13      	ldr	r2, [pc, #76]	; (800bcf4 <__sinit+0x6c>)
 800bca6:	681b      	ldr	r3, [r3, #0]
 800bca8:	62a2      	str	r2, [r4, #40]	; 0x28
 800bcaa:	42a3      	cmp	r3, r4
 800bcac:	bf04      	itt	eq
 800bcae:	2301      	moveq	r3, #1
 800bcb0:	61a3      	streq	r3, [r4, #24]
 800bcb2:	4620      	mov	r0, r4
 800bcb4:	f000 f820 	bl	800bcf8 <__sfp>
 800bcb8:	6060      	str	r0, [r4, #4]
 800bcba:	4620      	mov	r0, r4
 800bcbc:	f000 f81c 	bl	800bcf8 <__sfp>
 800bcc0:	60a0      	str	r0, [r4, #8]
 800bcc2:	4620      	mov	r0, r4
 800bcc4:	f000 f818 	bl	800bcf8 <__sfp>
 800bcc8:	2200      	movs	r2, #0
 800bcca:	60e0      	str	r0, [r4, #12]
 800bccc:	2104      	movs	r1, #4
 800bcce:	6860      	ldr	r0, [r4, #4]
 800bcd0:	f7ff ff82 	bl	800bbd8 <std>
 800bcd4:	68a0      	ldr	r0, [r4, #8]
 800bcd6:	2201      	movs	r2, #1
 800bcd8:	2109      	movs	r1, #9
 800bcda:	f7ff ff7d 	bl	800bbd8 <std>
 800bcde:	68e0      	ldr	r0, [r4, #12]
 800bce0:	2202      	movs	r2, #2
 800bce2:	2112      	movs	r1, #18
 800bce4:	f7ff ff78 	bl	800bbd8 <std>
 800bce8:	2301      	movs	r3, #1
 800bcea:	61a3      	str	r3, [r4, #24]
 800bcec:	e7d2      	b.n	800bc94 <__sinit+0xc>
 800bcee:	bf00      	nop
 800bcf0:	0800d76c 	.word	0x0800d76c
 800bcf4:	0800bc21 	.word	0x0800bc21

0800bcf8 <__sfp>:
 800bcf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bcfa:	4607      	mov	r7, r0
 800bcfc:	f7ff ffac 	bl	800bc58 <__sfp_lock_acquire>
 800bd00:	4b1e      	ldr	r3, [pc, #120]	; (800bd7c <__sfp+0x84>)
 800bd02:	681e      	ldr	r6, [r3, #0]
 800bd04:	69b3      	ldr	r3, [r6, #24]
 800bd06:	b913      	cbnz	r3, 800bd0e <__sfp+0x16>
 800bd08:	4630      	mov	r0, r6
 800bd0a:	f7ff ffbd 	bl	800bc88 <__sinit>
 800bd0e:	3648      	adds	r6, #72	; 0x48
 800bd10:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800bd14:	3b01      	subs	r3, #1
 800bd16:	d503      	bpl.n	800bd20 <__sfp+0x28>
 800bd18:	6833      	ldr	r3, [r6, #0]
 800bd1a:	b30b      	cbz	r3, 800bd60 <__sfp+0x68>
 800bd1c:	6836      	ldr	r6, [r6, #0]
 800bd1e:	e7f7      	b.n	800bd10 <__sfp+0x18>
 800bd20:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800bd24:	b9d5      	cbnz	r5, 800bd5c <__sfp+0x64>
 800bd26:	4b16      	ldr	r3, [pc, #88]	; (800bd80 <__sfp+0x88>)
 800bd28:	60e3      	str	r3, [r4, #12]
 800bd2a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800bd2e:	6665      	str	r5, [r4, #100]	; 0x64
 800bd30:	f000 f86c 	bl	800be0c <__retarget_lock_init_recursive>
 800bd34:	f7ff ff96 	bl	800bc64 <__sfp_lock_release>
 800bd38:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800bd3c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800bd40:	6025      	str	r5, [r4, #0]
 800bd42:	61a5      	str	r5, [r4, #24]
 800bd44:	2208      	movs	r2, #8
 800bd46:	4629      	mov	r1, r5
 800bd48:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800bd4c:	f000 f86f 	bl	800be2e <memset>
 800bd50:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800bd54:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800bd58:	4620      	mov	r0, r4
 800bd5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bd5c:	3468      	adds	r4, #104	; 0x68
 800bd5e:	e7d9      	b.n	800bd14 <__sfp+0x1c>
 800bd60:	2104      	movs	r1, #4
 800bd62:	4638      	mov	r0, r7
 800bd64:	f7ff ff62 	bl	800bc2c <__sfmoreglue>
 800bd68:	4604      	mov	r4, r0
 800bd6a:	6030      	str	r0, [r6, #0]
 800bd6c:	2800      	cmp	r0, #0
 800bd6e:	d1d5      	bne.n	800bd1c <__sfp+0x24>
 800bd70:	f7ff ff78 	bl	800bc64 <__sfp_lock_release>
 800bd74:	230c      	movs	r3, #12
 800bd76:	603b      	str	r3, [r7, #0]
 800bd78:	e7ee      	b.n	800bd58 <__sfp+0x60>
 800bd7a:	bf00      	nop
 800bd7c:	0800d76c 	.word	0x0800d76c
 800bd80:	ffff0001 	.word	0xffff0001

0800bd84 <_fwalk_reent>:
 800bd84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bd88:	4606      	mov	r6, r0
 800bd8a:	4688      	mov	r8, r1
 800bd8c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800bd90:	2700      	movs	r7, #0
 800bd92:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800bd96:	f1b9 0901 	subs.w	r9, r9, #1
 800bd9a:	d505      	bpl.n	800bda8 <_fwalk_reent+0x24>
 800bd9c:	6824      	ldr	r4, [r4, #0]
 800bd9e:	2c00      	cmp	r4, #0
 800bda0:	d1f7      	bne.n	800bd92 <_fwalk_reent+0xe>
 800bda2:	4638      	mov	r0, r7
 800bda4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bda8:	89ab      	ldrh	r3, [r5, #12]
 800bdaa:	2b01      	cmp	r3, #1
 800bdac:	d907      	bls.n	800bdbe <_fwalk_reent+0x3a>
 800bdae:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800bdb2:	3301      	adds	r3, #1
 800bdb4:	d003      	beq.n	800bdbe <_fwalk_reent+0x3a>
 800bdb6:	4629      	mov	r1, r5
 800bdb8:	4630      	mov	r0, r6
 800bdba:	47c0      	blx	r8
 800bdbc:	4307      	orrs	r7, r0
 800bdbe:	3568      	adds	r5, #104	; 0x68
 800bdc0:	e7e9      	b.n	800bd96 <_fwalk_reent+0x12>
	...

0800bdc4 <__libc_init_array>:
 800bdc4:	b570      	push	{r4, r5, r6, lr}
 800bdc6:	4d0d      	ldr	r5, [pc, #52]	; (800bdfc <__libc_init_array+0x38>)
 800bdc8:	4c0d      	ldr	r4, [pc, #52]	; (800be00 <__libc_init_array+0x3c>)
 800bdca:	1b64      	subs	r4, r4, r5
 800bdcc:	10a4      	asrs	r4, r4, #2
 800bdce:	2600      	movs	r6, #0
 800bdd0:	42a6      	cmp	r6, r4
 800bdd2:	d109      	bne.n	800bde8 <__libc_init_array+0x24>
 800bdd4:	4d0b      	ldr	r5, [pc, #44]	; (800be04 <__libc_init_array+0x40>)
 800bdd6:	4c0c      	ldr	r4, [pc, #48]	; (800be08 <__libc_init_array+0x44>)
 800bdd8:	f001 f98a 	bl	800d0f0 <_init>
 800bddc:	1b64      	subs	r4, r4, r5
 800bdde:	10a4      	asrs	r4, r4, #2
 800bde0:	2600      	movs	r6, #0
 800bde2:	42a6      	cmp	r6, r4
 800bde4:	d105      	bne.n	800bdf2 <__libc_init_array+0x2e>
 800bde6:	bd70      	pop	{r4, r5, r6, pc}
 800bde8:	f855 3b04 	ldr.w	r3, [r5], #4
 800bdec:	4798      	blx	r3
 800bdee:	3601      	adds	r6, #1
 800bdf0:	e7ee      	b.n	800bdd0 <__libc_init_array+0xc>
 800bdf2:	f855 3b04 	ldr.w	r3, [r5], #4
 800bdf6:	4798      	blx	r3
 800bdf8:	3601      	adds	r6, #1
 800bdfa:	e7f2      	b.n	800bde2 <__libc_init_array+0x1e>
 800bdfc:	0800d7ac 	.word	0x0800d7ac
 800be00:	0800d7ac 	.word	0x0800d7ac
 800be04:	0800d7ac 	.word	0x0800d7ac
 800be08:	0800d7b0 	.word	0x0800d7b0

0800be0c <__retarget_lock_init_recursive>:
 800be0c:	4770      	bx	lr

0800be0e <__retarget_lock_acquire_recursive>:
 800be0e:	4770      	bx	lr

0800be10 <__retarget_lock_release_recursive>:
 800be10:	4770      	bx	lr

0800be12 <memcpy>:
 800be12:	440a      	add	r2, r1
 800be14:	4291      	cmp	r1, r2
 800be16:	f100 33ff 	add.w	r3, r0, #4294967295
 800be1a:	d100      	bne.n	800be1e <memcpy+0xc>
 800be1c:	4770      	bx	lr
 800be1e:	b510      	push	{r4, lr}
 800be20:	f811 4b01 	ldrb.w	r4, [r1], #1
 800be24:	f803 4f01 	strb.w	r4, [r3, #1]!
 800be28:	4291      	cmp	r1, r2
 800be2a:	d1f9      	bne.n	800be20 <memcpy+0xe>
 800be2c:	bd10      	pop	{r4, pc}

0800be2e <memset>:
 800be2e:	4402      	add	r2, r0
 800be30:	4603      	mov	r3, r0
 800be32:	4293      	cmp	r3, r2
 800be34:	d100      	bne.n	800be38 <memset+0xa>
 800be36:	4770      	bx	lr
 800be38:	f803 1b01 	strb.w	r1, [r3], #1
 800be3c:	e7f9      	b.n	800be32 <memset+0x4>
	...

0800be40 <sbrk_aligned>:
 800be40:	b570      	push	{r4, r5, r6, lr}
 800be42:	4e0e      	ldr	r6, [pc, #56]	; (800be7c <sbrk_aligned+0x3c>)
 800be44:	460c      	mov	r4, r1
 800be46:	6831      	ldr	r1, [r6, #0]
 800be48:	4605      	mov	r5, r0
 800be4a:	b911      	cbnz	r1, 800be52 <sbrk_aligned+0x12>
 800be4c:	f000 f984 	bl	800c158 <_sbrk_r>
 800be50:	6030      	str	r0, [r6, #0]
 800be52:	4621      	mov	r1, r4
 800be54:	4628      	mov	r0, r5
 800be56:	f000 f97f 	bl	800c158 <_sbrk_r>
 800be5a:	1c43      	adds	r3, r0, #1
 800be5c:	d00a      	beq.n	800be74 <sbrk_aligned+0x34>
 800be5e:	1cc4      	adds	r4, r0, #3
 800be60:	f024 0403 	bic.w	r4, r4, #3
 800be64:	42a0      	cmp	r0, r4
 800be66:	d007      	beq.n	800be78 <sbrk_aligned+0x38>
 800be68:	1a21      	subs	r1, r4, r0
 800be6a:	4628      	mov	r0, r5
 800be6c:	f000 f974 	bl	800c158 <_sbrk_r>
 800be70:	3001      	adds	r0, #1
 800be72:	d101      	bne.n	800be78 <sbrk_aligned+0x38>
 800be74:	f04f 34ff 	mov.w	r4, #4294967295
 800be78:	4620      	mov	r0, r4
 800be7a:	bd70      	pop	{r4, r5, r6, pc}
 800be7c:	20002e24 	.word	0x20002e24

0800be80 <_malloc_r>:
 800be80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800be84:	1ccd      	adds	r5, r1, #3
 800be86:	f025 0503 	bic.w	r5, r5, #3
 800be8a:	3508      	adds	r5, #8
 800be8c:	2d0c      	cmp	r5, #12
 800be8e:	bf38      	it	cc
 800be90:	250c      	movcc	r5, #12
 800be92:	2d00      	cmp	r5, #0
 800be94:	4607      	mov	r7, r0
 800be96:	db01      	blt.n	800be9c <_malloc_r+0x1c>
 800be98:	42a9      	cmp	r1, r5
 800be9a:	d905      	bls.n	800bea8 <_malloc_r+0x28>
 800be9c:	230c      	movs	r3, #12
 800be9e:	603b      	str	r3, [r7, #0]
 800bea0:	2600      	movs	r6, #0
 800bea2:	4630      	mov	r0, r6
 800bea4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bea8:	4e2e      	ldr	r6, [pc, #184]	; (800bf64 <_malloc_r+0xe4>)
 800beaa:	f000 fbf9 	bl	800c6a0 <__malloc_lock>
 800beae:	6833      	ldr	r3, [r6, #0]
 800beb0:	461c      	mov	r4, r3
 800beb2:	bb34      	cbnz	r4, 800bf02 <_malloc_r+0x82>
 800beb4:	4629      	mov	r1, r5
 800beb6:	4638      	mov	r0, r7
 800beb8:	f7ff ffc2 	bl	800be40 <sbrk_aligned>
 800bebc:	1c43      	adds	r3, r0, #1
 800bebe:	4604      	mov	r4, r0
 800bec0:	d14d      	bne.n	800bf5e <_malloc_r+0xde>
 800bec2:	6834      	ldr	r4, [r6, #0]
 800bec4:	4626      	mov	r6, r4
 800bec6:	2e00      	cmp	r6, #0
 800bec8:	d140      	bne.n	800bf4c <_malloc_r+0xcc>
 800beca:	6823      	ldr	r3, [r4, #0]
 800becc:	4631      	mov	r1, r6
 800bece:	4638      	mov	r0, r7
 800bed0:	eb04 0803 	add.w	r8, r4, r3
 800bed4:	f000 f940 	bl	800c158 <_sbrk_r>
 800bed8:	4580      	cmp	r8, r0
 800beda:	d13a      	bne.n	800bf52 <_malloc_r+0xd2>
 800bedc:	6821      	ldr	r1, [r4, #0]
 800bede:	3503      	adds	r5, #3
 800bee0:	1a6d      	subs	r5, r5, r1
 800bee2:	f025 0503 	bic.w	r5, r5, #3
 800bee6:	3508      	adds	r5, #8
 800bee8:	2d0c      	cmp	r5, #12
 800beea:	bf38      	it	cc
 800beec:	250c      	movcc	r5, #12
 800beee:	4629      	mov	r1, r5
 800bef0:	4638      	mov	r0, r7
 800bef2:	f7ff ffa5 	bl	800be40 <sbrk_aligned>
 800bef6:	3001      	adds	r0, #1
 800bef8:	d02b      	beq.n	800bf52 <_malloc_r+0xd2>
 800befa:	6823      	ldr	r3, [r4, #0]
 800befc:	442b      	add	r3, r5
 800befe:	6023      	str	r3, [r4, #0]
 800bf00:	e00e      	b.n	800bf20 <_malloc_r+0xa0>
 800bf02:	6822      	ldr	r2, [r4, #0]
 800bf04:	1b52      	subs	r2, r2, r5
 800bf06:	d41e      	bmi.n	800bf46 <_malloc_r+0xc6>
 800bf08:	2a0b      	cmp	r2, #11
 800bf0a:	d916      	bls.n	800bf3a <_malloc_r+0xba>
 800bf0c:	1961      	adds	r1, r4, r5
 800bf0e:	42a3      	cmp	r3, r4
 800bf10:	6025      	str	r5, [r4, #0]
 800bf12:	bf18      	it	ne
 800bf14:	6059      	strne	r1, [r3, #4]
 800bf16:	6863      	ldr	r3, [r4, #4]
 800bf18:	bf08      	it	eq
 800bf1a:	6031      	streq	r1, [r6, #0]
 800bf1c:	5162      	str	r2, [r4, r5]
 800bf1e:	604b      	str	r3, [r1, #4]
 800bf20:	4638      	mov	r0, r7
 800bf22:	f104 060b 	add.w	r6, r4, #11
 800bf26:	f000 fbc1 	bl	800c6ac <__malloc_unlock>
 800bf2a:	f026 0607 	bic.w	r6, r6, #7
 800bf2e:	1d23      	adds	r3, r4, #4
 800bf30:	1af2      	subs	r2, r6, r3
 800bf32:	d0b6      	beq.n	800bea2 <_malloc_r+0x22>
 800bf34:	1b9b      	subs	r3, r3, r6
 800bf36:	50a3      	str	r3, [r4, r2]
 800bf38:	e7b3      	b.n	800bea2 <_malloc_r+0x22>
 800bf3a:	6862      	ldr	r2, [r4, #4]
 800bf3c:	42a3      	cmp	r3, r4
 800bf3e:	bf0c      	ite	eq
 800bf40:	6032      	streq	r2, [r6, #0]
 800bf42:	605a      	strne	r2, [r3, #4]
 800bf44:	e7ec      	b.n	800bf20 <_malloc_r+0xa0>
 800bf46:	4623      	mov	r3, r4
 800bf48:	6864      	ldr	r4, [r4, #4]
 800bf4a:	e7b2      	b.n	800beb2 <_malloc_r+0x32>
 800bf4c:	4634      	mov	r4, r6
 800bf4e:	6876      	ldr	r6, [r6, #4]
 800bf50:	e7b9      	b.n	800bec6 <_malloc_r+0x46>
 800bf52:	230c      	movs	r3, #12
 800bf54:	603b      	str	r3, [r7, #0]
 800bf56:	4638      	mov	r0, r7
 800bf58:	f000 fba8 	bl	800c6ac <__malloc_unlock>
 800bf5c:	e7a1      	b.n	800bea2 <_malloc_r+0x22>
 800bf5e:	6025      	str	r5, [r4, #0]
 800bf60:	e7de      	b.n	800bf20 <_malloc_r+0xa0>
 800bf62:	bf00      	nop
 800bf64:	20002e20 	.word	0x20002e20

0800bf68 <iprintf>:
 800bf68:	b40f      	push	{r0, r1, r2, r3}
 800bf6a:	4b0a      	ldr	r3, [pc, #40]	; (800bf94 <iprintf+0x2c>)
 800bf6c:	b513      	push	{r0, r1, r4, lr}
 800bf6e:	681c      	ldr	r4, [r3, #0]
 800bf70:	b124      	cbz	r4, 800bf7c <iprintf+0x14>
 800bf72:	69a3      	ldr	r3, [r4, #24]
 800bf74:	b913      	cbnz	r3, 800bf7c <iprintf+0x14>
 800bf76:	4620      	mov	r0, r4
 800bf78:	f7ff fe86 	bl	800bc88 <__sinit>
 800bf7c:	ab05      	add	r3, sp, #20
 800bf7e:	9a04      	ldr	r2, [sp, #16]
 800bf80:	68a1      	ldr	r1, [r4, #8]
 800bf82:	9301      	str	r3, [sp, #4]
 800bf84:	4620      	mov	r0, r4
 800bf86:	f000 fd69 	bl	800ca5c <_vfiprintf_r>
 800bf8a:	b002      	add	sp, #8
 800bf8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bf90:	b004      	add	sp, #16
 800bf92:	4770      	bx	lr
 800bf94:	20000048 	.word	0x20000048

0800bf98 <_puts_r>:
 800bf98:	b570      	push	{r4, r5, r6, lr}
 800bf9a:	460e      	mov	r6, r1
 800bf9c:	4605      	mov	r5, r0
 800bf9e:	b118      	cbz	r0, 800bfa8 <_puts_r+0x10>
 800bfa0:	6983      	ldr	r3, [r0, #24]
 800bfa2:	b90b      	cbnz	r3, 800bfa8 <_puts_r+0x10>
 800bfa4:	f7ff fe70 	bl	800bc88 <__sinit>
 800bfa8:	69ab      	ldr	r3, [r5, #24]
 800bfaa:	68ac      	ldr	r4, [r5, #8]
 800bfac:	b913      	cbnz	r3, 800bfb4 <_puts_r+0x1c>
 800bfae:	4628      	mov	r0, r5
 800bfb0:	f7ff fe6a 	bl	800bc88 <__sinit>
 800bfb4:	4b2c      	ldr	r3, [pc, #176]	; (800c068 <_puts_r+0xd0>)
 800bfb6:	429c      	cmp	r4, r3
 800bfb8:	d120      	bne.n	800bffc <_puts_r+0x64>
 800bfba:	686c      	ldr	r4, [r5, #4]
 800bfbc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bfbe:	07db      	lsls	r3, r3, #31
 800bfc0:	d405      	bmi.n	800bfce <_puts_r+0x36>
 800bfc2:	89a3      	ldrh	r3, [r4, #12]
 800bfc4:	0598      	lsls	r0, r3, #22
 800bfc6:	d402      	bmi.n	800bfce <_puts_r+0x36>
 800bfc8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bfca:	f7ff ff20 	bl	800be0e <__retarget_lock_acquire_recursive>
 800bfce:	89a3      	ldrh	r3, [r4, #12]
 800bfd0:	0719      	lsls	r1, r3, #28
 800bfd2:	d51d      	bpl.n	800c010 <_puts_r+0x78>
 800bfd4:	6923      	ldr	r3, [r4, #16]
 800bfd6:	b1db      	cbz	r3, 800c010 <_puts_r+0x78>
 800bfd8:	3e01      	subs	r6, #1
 800bfda:	68a3      	ldr	r3, [r4, #8]
 800bfdc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800bfe0:	3b01      	subs	r3, #1
 800bfe2:	60a3      	str	r3, [r4, #8]
 800bfe4:	bb39      	cbnz	r1, 800c036 <_puts_r+0x9e>
 800bfe6:	2b00      	cmp	r3, #0
 800bfe8:	da38      	bge.n	800c05c <_puts_r+0xc4>
 800bfea:	4622      	mov	r2, r4
 800bfec:	210a      	movs	r1, #10
 800bfee:	4628      	mov	r0, r5
 800bff0:	f000 f93a 	bl	800c268 <__swbuf_r>
 800bff4:	3001      	adds	r0, #1
 800bff6:	d011      	beq.n	800c01c <_puts_r+0x84>
 800bff8:	250a      	movs	r5, #10
 800bffa:	e011      	b.n	800c020 <_puts_r+0x88>
 800bffc:	4b1b      	ldr	r3, [pc, #108]	; (800c06c <_puts_r+0xd4>)
 800bffe:	429c      	cmp	r4, r3
 800c000:	d101      	bne.n	800c006 <_puts_r+0x6e>
 800c002:	68ac      	ldr	r4, [r5, #8]
 800c004:	e7da      	b.n	800bfbc <_puts_r+0x24>
 800c006:	4b1a      	ldr	r3, [pc, #104]	; (800c070 <_puts_r+0xd8>)
 800c008:	429c      	cmp	r4, r3
 800c00a:	bf08      	it	eq
 800c00c:	68ec      	ldreq	r4, [r5, #12]
 800c00e:	e7d5      	b.n	800bfbc <_puts_r+0x24>
 800c010:	4621      	mov	r1, r4
 800c012:	4628      	mov	r0, r5
 800c014:	f000 f98c 	bl	800c330 <__swsetup_r>
 800c018:	2800      	cmp	r0, #0
 800c01a:	d0dd      	beq.n	800bfd8 <_puts_r+0x40>
 800c01c:	f04f 35ff 	mov.w	r5, #4294967295
 800c020:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c022:	07da      	lsls	r2, r3, #31
 800c024:	d405      	bmi.n	800c032 <_puts_r+0x9a>
 800c026:	89a3      	ldrh	r3, [r4, #12]
 800c028:	059b      	lsls	r3, r3, #22
 800c02a:	d402      	bmi.n	800c032 <_puts_r+0x9a>
 800c02c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c02e:	f7ff feef 	bl	800be10 <__retarget_lock_release_recursive>
 800c032:	4628      	mov	r0, r5
 800c034:	bd70      	pop	{r4, r5, r6, pc}
 800c036:	2b00      	cmp	r3, #0
 800c038:	da04      	bge.n	800c044 <_puts_r+0xac>
 800c03a:	69a2      	ldr	r2, [r4, #24]
 800c03c:	429a      	cmp	r2, r3
 800c03e:	dc06      	bgt.n	800c04e <_puts_r+0xb6>
 800c040:	290a      	cmp	r1, #10
 800c042:	d004      	beq.n	800c04e <_puts_r+0xb6>
 800c044:	6823      	ldr	r3, [r4, #0]
 800c046:	1c5a      	adds	r2, r3, #1
 800c048:	6022      	str	r2, [r4, #0]
 800c04a:	7019      	strb	r1, [r3, #0]
 800c04c:	e7c5      	b.n	800bfda <_puts_r+0x42>
 800c04e:	4622      	mov	r2, r4
 800c050:	4628      	mov	r0, r5
 800c052:	f000 f909 	bl	800c268 <__swbuf_r>
 800c056:	3001      	adds	r0, #1
 800c058:	d1bf      	bne.n	800bfda <_puts_r+0x42>
 800c05a:	e7df      	b.n	800c01c <_puts_r+0x84>
 800c05c:	6823      	ldr	r3, [r4, #0]
 800c05e:	250a      	movs	r5, #10
 800c060:	1c5a      	adds	r2, r3, #1
 800c062:	6022      	str	r2, [r4, #0]
 800c064:	701d      	strb	r5, [r3, #0]
 800c066:	e7db      	b.n	800c020 <_puts_r+0x88>
 800c068:	0800d72c 	.word	0x0800d72c
 800c06c:	0800d74c 	.word	0x0800d74c
 800c070:	0800d70c 	.word	0x0800d70c

0800c074 <puts>:
 800c074:	4b02      	ldr	r3, [pc, #8]	; (800c080 <puts+0xc>)
 800c076:	4601      	mov	r1, r0
 800c078:	6818      	ldr	r0, [r3, #0]
 800c07a:	f7ff bf8d 	b.w	800bf98 <_puts_r>
 800c07e:	bf00      	nop
 800c080:	20000048 	.word	0x20000048

0800c084 <cleanup_glue>:
 800c084:	b538      	push	{r3, r4, r5, lr}
 800c086:	460c      	mov	r4, r1
 800c088:	6809      	ldr	r1, [r1, #0]
 800c08a:	4605      	mov	r5, r0
 800c08c:	b109      	cbz	r1, 800c092 <cleanup_glue+0xe>
 800c08e:	f7ff fff9 	bl	800c084 <cleanup_glue>
 800c092:	4621      	mov	r1, r4
 800c094:	4628      	mov	r0, r5
 800c096:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c09a:	f000 bb0d 	b.w	800c6b8 <_free_r>
	...

0800c0a0 <_reclaim_reent>:
 800c0a0:	4b2c      	ldr	r3, [pc, #176]	; (800c154 <_reclaim_reent+0xb4>)
 800c0a2:	681b      	ldr	r3, [r3, #0]
 800c0a4:	4283      	cmp	r3, r0
 800c0a6:	b570      	push	{r4, r5, r6, lr}
 800c0a8:	4604      	mov	r4, r0
 800c0aa:	d051      	beq.n	800c150 <_reclaim_reent+0xb0>
 800c0ac:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800c0ae:	b143      	cbz	r3, 800c0c2 <_reclaim_reent+0x22>
 800c0b0:	68db      	ldr	r3, [r3, #12]
 800c0b2:	2b00      	cmp	r3, #0
 800c0b4:	d14a      	bne.n	800c14c <_reclaim_reent+0xac>
 800c0b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c0b8:	6819      	ldr	r1, [r3, #0]
 800c0ba:	b111      	cbz	r1, 800c0c2 <_reclaim_reent+0x22>
 800c0bc:	4620      	mov	r0, r4
 800c0be:	f000 fafb 	bl	800c6b8 <_free_r>
 800c0c2:	6961      	ldr	r1, [r4, #20]
 800c0c4:	b111      	cbz	r1, 800c0cc <_reclaim_reent+0x2c>
 800c0c6:	4620      	mov	r0, r4
 800c0c8:	f000 faf6 	bl	800c6b8 <_free_r>
 800c0cc:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800c0ce:	b111      	cbz	r1, 800c0d6 <_reclaim_reent+0x36>
 800c0d0:	4620      	mov	r0, r4
 800c0d2:	f000 faf1 	bl	800c6b8 <_free_r>
 800c0d6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800c0d8:	b111      	cbz	r1, 800c0e0 <_reclaim_reent+0x40>
 800c0da:	4620      	mov	r0, r4
 800c0dc:	f000 faec 	bl	800c6b8 <_free_r>
 800c0e0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800c0e2:	b111      	cbz	r1, 800c0ea <_reclaim_reent+0x4a>
 800c0e4:	4620      	mov	r0, r4
 800c0e6:	f000 fae7 	bl	800c6b8 <_free_r>
 800c0ea:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800c0ec:	b111      	cbz	r1, 800c0f4 <_reclaim_reent+0x54>
 800c0ee:	4620      	mov	r0, r4
 800c0f0:	f000 fae2 	bl	800c6b8 <_free_r>
 800c0f4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800c0f6:	b111      	cbz	r1, 800c0fe <_reclaim_reent+0x5e>
 800c0f8:	4620      	mov	r0, r4
 800c0fa:	f000 fadd 	bl	800c6b8 <_free_r>
 800c0fe:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800c100:	b111      	cbz	r1, 800c108 <_reclaim_reent+0x68>
 800c102:	4620      	mov	r0, r4
 800c104:	f000 fad8 	bl	800c6b8 <_free_r>
 800c108:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c10a:	b111      	cbz	r1, 800c112 <_reclaim_reent+0x72>
 800c10c:	4620      	mov	r0, r4
 800c10e:	f000 fad3 	bl	800c6b8 <_free_r>
 800c112:	69a3      	ldr	r3, [r4, #24]
 800c114:	b1e3      	cbz	r3, 800c150 <_reclaim_reent+0xb0>
 800c116:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800c118:	4620      	mov	r0, r4
 800c11a:	4798      	blx	r3
 800c11c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800c11e:	b1b9      	cbz	r1, 800c150 <_reclaim_reent+0xb0>
 800c120:	4620      	mov	r0, r4
 800c122:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c126:	f7ff bfad 	b.w	800c084 <cleanup_glue>
 800c12a:	5949      	ldr	r1, [r1, r5]
 800c12c:	b941      	cbnz	r1, 800c140 <_reclaim_reent+0xa0>
 800c12e:	3504      	adds	r5, #4
 800c130:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c132:	2d80      	cmp	r5, #128	; 0x80
 800c134:	68d9      	ldr	r1, [r3, #12]
 800c136:	d1f8      	bne.n	800c12a <_reclaim_reent+0x8a>
 800c138:	4620      	mov	r0, r4
 800c13a:	f000 fabd 	bl	800c6b8 <_free_r>
 800c13e:	e7ba      	b.n	800c0b6 <_reclaim_reent+0x16>
 800c140:	680e      	ldr	r6, [r1, #0]
 800c142:	4620      	mov	r0, r4
 800c144:	f000 fab8 	bl	800c6b8 <_free_r>
 800c148:	4631      	mov	r1, r6
 800c14a:	e7ef      	b.n	800c12c <_reclaim_reent+0x8c>
 800c14c:	2500      	movs	r5, #0
 800c14e:	e7ef      	b.n	800c130 <_reclaim_reent+0x90>
 800c150:	bd70      	pop	{r4, r5, r6, pc}
 800c152:	bf00      	nop
 800c154:	20000048 	.word	0x20000048

0800c158 <_sbrk_r>:
 800c158:	b538      	push	{r3, r4, r5, lr}
 800c15a:	4d06      	ldr	r5, [pc, #24]	; (800c174 <_sbrk_r+0x1c>)
 800c15c:	2300      	movs	r3, #0
 800c15e:	4604      	mov	r4, r0
 800c160:	4608      	mov	r0, r1
 800c162:	602b      	str	r3, [r5, #0]
 800c164:	f7f5 ff5e 	bl	8002024 <_sbrk>
 800c168:	1c43      	adds	r3, r0, #1
 800c16a:	d102      	bne.n	800c172 <_sbrk_r+0x1a>
 800c16c:	682b      	ldr	r3, [r5, #0]
 800c16e:	b103      	cbz	r3, 800c172 <_sbrk_r+0x1a>
 800c170:	6023      	str	r3, [r4, #0]
 800c172:	bd38      	pop	{r3, r4, r5, pc}
 800c174:	20002e28 	.word	0x20002e28

0800c178 <sniprintf>:
 800c178:	b40c      	push	{r2, r3}
 800c17a:	b530      	push	{r4, r5, lr}
 800c17c:	4b17      	ldr	r3, [pc, #92]	; (800c1dc <sniprintf+0x64>)
 800c17e:	1e0c      	subs	r4, r1, #0
 800c180:	681d      	ldr	r5, [r3, #0]
 800c182:	b09d      	sub	sp, #116	; 0x74
 800c184:	da08      	bge.n	800c198 <sniprintf+0x20>
 800c186:	238b      	movs	r3, #139	; 0x8b
 800c188:	602b      	str	r3, [r5, #0]
 800c18a:	f04f 30ff 	mov.w	r0, #4294967295
 800c18e:	b01d      	add	sp, #116	; 0x74
 800c190:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c194:	b002      	add	sp, #8
 800c196:	4770      	bx	lr
 800c198:	f44f 7302 	mov.w	r3, #520	; 0x208
 800c19c:	f8ad 3014 	strh.w	r3, [sp, #20]
 800c1a0:	bf14      	ite	ne
 800c1a2:	f104 33ff 	addne.w	r3, r4, #4294967295
 800c1a6:	4623      	moveq	r3, r4
 800c1a8:	9304      	str	r3, [sp, #16]
 800c1aa:	9307      	str	r3, [sp, #28]
 800c1ac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c1b0:	9002      	str	r0, [sp, #8]
 800c1b2:	9006      	str	r0, [sp, #24]
 800c1b4:	f8ad 3016 	strh.w	r3, [sp, #22]
 800c1b8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800c1ba:	ab21      	add	r3, sp, #132	; 0x84
 800c1bc:	a902      	add	r1, sp, #8
 800c1be:	4628      	mov	r0, r5
 800c1c0:	9301      	str	r3, [sp, #4]
 800c1c2:	f000 fb21 	bl	800c808 <_svfiprintf_r>
 800c1c6:	1c43      	adds	r3, r0, #1
 800c1c8:	bfbc      	itt	lt
 800c1ca:	238b      	movlt	r3, #139	; 0x8b
 800c1cc:	602b      	strlt	r3, [r5, #0]
 800c1ce:	2c00      	cmp	r4, #0
 800c1d0:	d0dd      	beq.n	800c18e <sniprintf+0x16>
 800c1d2:	9b02      	ldr	r3, [sp, #8]
 800c1d4:	2200      	movs	r2, #0
 800c1d6:	701a      	strb	r2, [r3, #0]
 800c1d8:	e7d9      	b.n	800c18e <sniprintf+0x16>
 800c1da:	bf00      	nop
 800c1dc:	20000048 	.word	0x20000048

0800c1e0 <__sread>:
 800c1e0:	b510      	push	{r4, lr}
 800c1e2:	460c      	mov	r4, r1
 800c1e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c1e8:	f000 fefc 	bl	800cfe4 <_read_r>
 800c1ec:	2800      	cmp	r0, #0
 800c1ee:	bfab      	itete	ge
 800c1f0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c1f2:	89a3      	ldrhlt	r3, [r4, #12]
 800c1f4:	181b      	addge	r3, r3, r0
 800c1f6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c1fa:	bfac      	ite	ge
 800c1fc:	6563      	strge	r3, [r4, #84]	; 0x54
 800c1fe:	81a3      	strhlt	r3, [r4, #12]
 800c200:	bd10      	pop	{r4, pc}

0800c202 <__swrite>:
 800c202:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c206:	461f      	mov	r7, r3
 800c208:	898b      	ldrh	r3, [r1, #12]
 800c20a:	05db      	lsls	r3, r3, #23
 800c20c:	4605      	mov	r5, r0
 800c20e:	460c      	mov	r4, r1
 800c210:	4616      	mov	r6, r2
 800c212:	d505      	bpl.n	800c220 <__swrite+0x1e>
 800c214:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c218:	2302      	movs	r3, #2
 800c21a:	2200      	movs	r2, #0
 800c21c:	f000 f9c8 	bl	800c5b0 <_lseek_r>
 800c220:	89a3      	ldrh	r3, [r4, #12]
 800c222:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c226:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c22a:	81a3      	strh	r3, [r4, #12]
 800c22c:	4632      	mov	r2, r6
 800c22e:	463b      	mov	r3, r7
 800c230:	4628      	mov	r0, r5
 800c232:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c236:	f000 b869 	b.w	800c30c <_write_r>

0800c23a <__sseek>:
 800c23a:	b510      	push	{r4, lr}
 800c23c:	460c      	mov	r4, r1
 800c23e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c242:	f000 f9b5 	bl	800c5b0 <_lseek_r>
 800c246:	1c43      	adds	r3, r0, #1
 800c248:	89a3      	ldrh	r3, [r4, #12]
 800c24a:	bf15      	itete	ne
 800c24c:	6560      	strne	r0, [r4, #84]	; 0x54
 800c24e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c252:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c256:	81a3      	strheq	r3, [r4, #12]
 800c258:	bf18      	it	ne
 800c25a:	81a3      	strhne	r3, [r4, #12]
 800c25c:	bd10      	pop	{r4, pc}

0800c25e <__sclose>:
 800c25e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c262:	f000 b8d3 	b.w	800c40c <_close_r>
	...

0800c268 <__swbuf_r>:
 800c268:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c26a:	460e      	mov	r6, r1
 800c26c:	4614      	mov	r4, r2
 800c26e:	4605      	mov	r5, r0
 800c270:	b118      	cbz	r0, 800c27a <__swbuf_r+0x12>
 800c272:	6983      	ldr	r3, [r0, #24]
 800c274:	b90b      	cbnz	r3, 800c27a <__swbuf_r+0x12>
 800c276:	f7ff fd07 	bl	800bc88 <__sinit>
 800c27a:	4b21      	ldr	r3, [pc, #132]	; (800c300 <__swbuf_r+0x98>)
 800c27c:	429c      	cmp	r4, r3
 800c27e:	d12b      	bne.n	800c2d8 <__swbuf_r+0x70>
 800c280:	686c      	ldr	r4, [r5, #4]
 800c282:	69a3      	ldr	r3, [r4, #24]
 800c284:	60a3      	str	r3, [r4, #8]
 800c286:	89a3      	ldrh	r3, [r4, #12]
 800c288:	071a      	lsls	r2, r3, #28
 800c28a:	d52f      	bpl.n	800c2ec <__swbuf_r+0x84>
 800c28c:	6923      	ldr	r3, [r4, #16]
 800c28e:	b36b      	cbz	r3, 800c2ec <__swbuf_r+0x84>
 800c290:	6923      	ldr	r3, [r4, #16]
 800c292:	6820      	ldr	r0, [r4, #0]
 800c294:	1ac0      	subs	r0, r0, r3
 800c296:	6963      	ldr	r3, [r4, #20]
 800c298:	b2f6      	uxtb	r6, r6
 800c29a:	4283      	cmp	r3, r0
 800c29c:	4637      	mov	r7, r6
 800c29e:	dc04      	bgt.n	800c2aa <__swbuf_r+0x42>
 800c2a0:	4621      	mov	r1, r4
 800c2a2:	4628      	mov	r0, r5
 800c2a4:	f000 f948 	bl	800c538 <_fflush_r>
 800c2a8:	bb30      	cbnz	r0, 800c2f8 <__swbuf_r+0x90>
 800c2aa:	68a3      	ldr	r3, [r4, #8]
 800c2ac:	3b01      	subs	r3, #1
 800c2ae:	60a3      	str	r3, [r4, #8]
 800c2b0:	6823      	ldr	r3, [r4, #0]
 800c2b2:	1c5a      	adds	r2, r3, #1
 800c2b4:	6022      	str	r2, [r4, #0]
 800c2b6:	701e      	strb	r6, [r3, #0]
 800c2b8:	6963      	ldr	r3, [r4, #20]
 800c2ba:	3001      	adds	r0, #1
 800c2bc:	4283      	cmp	r3, r0
 800c2be:	d004      	beq.n	800c2ca <__swbuf_r+0x62>
 800c2c0:	89a3      	ldrh	r3, [r4, #12]
 800c2c2:	07db      	lsls	r3, r3, #31
 800c2c4:	d506      	bpl.n	800c2d4 <__swbuf_r+0x6c>
 800c2c6:	2e0a      	cmp	r6, #10
 800c2c8:	d104      	bne.n	800c2d4 <__swbuf_r+0x6c>
 800c2ca:	4621      	mov	r1, r4
 800c2cc:	4628      	mov	r0, r5
 800c2ce:	f000 f933 	bl	800c538 <_fflush_r>
 800c2d2:	b988      	cbnz	r0, 800c2f8 <__swbuf_r+0x90>
 800c2d4:	4638      	mov	r0, r7
 800c2d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c2d8:	4b0a      	ldr	r3, [pc, #40]	; (800c304 <__swbuf_r+0x9c>)
 800c2da:	429c      	cmp	r4, r3
 800c2dc:	d101      	bne.n	800c2e2 <__swbuf_r+0x7a>
 800c2de:	68ac      	ldr	r4, [r5, #8]
 800c2e0:	e7cf      	b.n	800c282 <__swbuf_r+0x1a>
 800c2e2:	4b09      	ldr	r3, [pc, #36]	; (800c308 <__swbuf_r+0xa0>)
 800c2e4:	429c      	cmp	r4, r3
 800c2e6:	bf08      	it	eq
 800c2e8:	68ec      	ldreq	r4, [r5, #12]
 800c2ea:	e7ca      	b.n	800c282 <__swbuf_r+0x1a>
 800c2ec:	4621      	mov	r1, r4
 800c2ee:	4628      	mov	r0, r5
 800c2f0:	f000 f81e 	bl	800c330 <__swsetup_r>
 800c2f4:	2800      	cmp	r0, #0
 800c2f6:	d0cb      	beq.n	800c290 <__swbuf_r+0x28>
 800c2f8:	f04f 37ff 	mov.w	r7, #4294967295
 800c2fc:	e7ea      	b.n	800c2d4 <__swbuf_r+0x6c>
 800c2fe:	bf00      	nop
 800c300:	0800d72c 	.word	0x0800d72c
 800c304:	0800d74c 	.word	0x0800d74c
 800c308:	0800d70c 	.word	0x0800d70c

0800c30c <_write_r>:
 800c30c:	b538      	push	{r3, r4, r5, lr}
 800c30e:	4d07      	ldr	r5, [pc, #28]	; (800c32c <_write_r+0x20>)
 800c310:	4604      	mov	r4, r0
 800c312:	4608      	mov	r0, r1
 800c314:	4611      	mov	r1, r2
 800c316:	2200      	movs	r2, #0
 800c318:	602a      	str	r2, [r5, #0]
 800c31a:	461a      	mov	r2, r3
 800c31c:	f7f4 fe12 	bl	8000f44 <_write>
 800c320:	1c43      	adds	r3, r0, #1
 800c322:	d102      	bne.n	800c32a <_write_r+0x1e>
 800c324:	682b      	ldr	r3, [r5, #0]
 800c326:	b103      	cbz	r3, 800c32a <_write_r+0x1e>
 800c328:	6023      	str	r3, [r4, #0]
 800c32a:	bd38      	pop	{r3, r4, r5, pc}
 800c32c:	20002e28 	.word	0x20002e28

0800c330 <__swsetup_r>:
 800c330:	4b32      	ldr	r3, [pc, #200]	; (800c3fc <__swsetup_r+0xcc>)
 800c332:	b570      	push	{r4, r5, r6, lr}
 800c334:	681d      	ldr	r5, [r3, #0]
 800c336:	4606      	mov	r6, r0
 800c338:	460c      	mov	r4, r1
 800c33a:	b125      	cbz	r5, 800c346 <__swsetup_r+0x16>
 800c33c:	69ab      	ldr	r3, [r5, #24]
 800c33e:	b913      	cbnz	r3, 800c346 <__swsetup_r+0x16>
 800c340:	4628      	mov	r0, r5
 800c342:	f7ff fca1 	bl	800bc88 <__sinit>
 800c346:	4b2e      	ldr	r3, [pc, #184]	; (800c400 <__swsetup_r+0xd0>)
 800c348:	429c      	cmp	r4, r3
 800c34a:	d10f      	bne.n	800c36c <__swsetup_r+0x3c>
 800c34c:	686c      	ldr	r4, [r5, #4]
 800c34e:	89a3      	ldrh	r3, [r4, #12]
 800c350:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c354:	0719      	lsls	r1, r3, #28
 800c356:	d42c      	bmi.n	800c3b2 <__swsetup_r+0x82>
 800c358:	06dd      	lsls	r5, r3, #27
 800c35a:	d411      	bmi.n	800c380 <__swsetup_r+0x50>
 800c35c:	2309      	movs	r3, #9
 800c35e:	6033      	str	r3, [r6, #0]
 800c360:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c364:	81a3      	strh	r3, [r4, #12]
 800c366:	f04f 30ff 	mov.w	r0, #4294967295
 800c36a:	e03e      	b.n	800c3ea <__swsetup_r+0xba>
 800c36c:	4b25      	ldr	r3, [pc, #148]	; (800c404 <__swsetup_r+0xd4>)
 800c36e:	429c      	cmp	r4, r3
 800c370:	d101      	bne.n	800c376 <__swsetup_r+0x46>
 800c372:	68ac      	ldr	r4, [r5, #8]
 800c374:	e7eb      	b.n	800c34e <__swsetup_r+0x1e>
 800c376:	4b24      	ldr	r3, [pc, #144]	; (800c408 <__swsetup_r+0xd8>)
 800c378:	429c      	cmp	r4, r3
 800c37a:	bf08      	it	eq
 800c37c:	68ec      	ldreq	r4, [r5, #12]
 800c37e:	e7e6      	b.n	800c34e <__swsetup_r+0x1e>
 800c380:	0758      	lsls	r0, r3, #29
 800c382:	d512      	bpl.n	800c3aa <__swsetup_r+0x7a>
 800c384:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c386:	b141      	cbz	r1, 800c39a <__swsetup_r+0x6a>
 800c388:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c38c:	4299      	cmp	r1, r3
 800c38e:	d002      	beq.n	800c396 <__swsetup_r+0x66>
 800c390:	4630      	mov	r0, r6
 800c392:	f000 f991 	bl	800c6b8 <_free_r>
 800c396:	2300      	movs	r3, #0
 800c398:	6363      	str	r3, [r4, #52]	; 0x34
 800c39a:	89a3      	ldrh	r3, [r4, #12]
 800c39c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c3a0:	81a3      	strh	r3, [r4, #12]
 800c3a2:	2300      	movs	r3, #0
 800c3a4:	6063      	str	r3, [r4, #4]
 800c3a6:	6923      	ldr	r3, [r4, #16]
 800c3a8:	6023      	str	r3, [r4, #0]
 800c3aa:	89a3      	ldrh	r3, [r4, #12]
 800c3ac:	f043 0308 	orr.w	r3, r3, #8
 800c3b0:	81a3      	strh	r3, [r4, #12]
 800c3b2:	6923      	ldr	r3, [r4, #16]
 800c3b4:	b94b      	cbnz	r3, 800c3ca <__swsetup_r+0x9a>
 800c3b6:	89a3      	ldrh	r3, [r4, #12]
 800c3b8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c3bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c3c0:	d003      	beq.n	800c3ca <__swsetup_r+0x9a>
 800c3c2:	4621      	mov	r1, r4
 800c3c4:	4630      	mov	r0, r6
 800c3c6:	f000 f92b 	bl	800c620 <__smakebuf_r>
 800c3ca:	89a0      	ldrh	r0, [r4, #12]
 800c3cc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c3d0:	f010 0301 	ands.w	r3, r0, #1
 800c3d4:	d00a      	beq.n	800c3ec <__swsetup_r+0xbc>
 800c3d6:	2300      	movs	r3, #0
 800c3d8:	60a3      	str	r3, [r4, #8]
 800c3da:	6963      	ldr	r3, [r4, #20]
 800c3dc:	425b      	negs	r3, r3
 800c3de:	61a3      	str	r3, [r4, #24]
 800c3e0:	6923      	ldr	r3, [r4, #16]
 800c3e2:	b943      	cbnz	r3, 800c3f6 <__swsetup_r+0xc6>
 800c3e4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c3e8:	d1ba      	bne.n	800c360 <__swsetup_r+0x30>
 800c3ea:	bd70      	pop	{r4, r5, r6, pc}
 800c3ec:	0781      	lsls	r1, r0, #30
 800c3ee:	bf58      	it	pl
 800c3f0:	6963      	ldrpl	r3, [r4, #20]
 800c3f2:	60a3      	str	r3, [r4, #8]
 800c3f4:	e7f4      	b.n	800c3e0 <__swsetup_r+0xb0>
 800c3f6:	2000      	movs	r0, #0
 800c3f8:	e7f7      	b.n	800c3ea <__swsetup_r+0xba>
 800c3fa:	bf00      	nop
 800c3fc:	20000048 	.word	0x20000048
 800c400:	0800d72c 	.word	0x0800d72c
 800c404:	0800d74c 	.word	0x0800d74c
 800c408:	0800d70c 	.word	0x0800d70c

0800c40c <_close_r>:
 800c40c:	b538      	push	{r3, r4, r5, lr}
 800c40e:	4d06      	ldr	r5, [pc, #24]	; (800c428 <_close_r+0x1c>)
 800c410:	2300      	movs	r3, #0
 800c412:	4604      	mov	r4, r0
 800c414:	4608      	mov	r0, r1
 800c416:	602b      	str	r3, [r5, #0]
 800c418:	f7f5 fdcf 	bl	8001fba <_close>
 800c41c:	1c43      	adds	r3, r0, #1
 800c41e:	d102      	bne.n	800c426 <_close_r+0x1a>
 800c420:	682b      	ldr	r3, [r5, #0]
 800c422:	b103      	cbz	r3, 800c426 <_close_r+0x1a>
 800c424:	6023      	str	r3, [r4, #0]
 800c426:	bd38      	pop	{r3, r4, r5, pc}
 800c428:	20002e28 	.word	0x20002e28

0800c42c <__sflush_r>:
 800c42c:	898a      	ldrh	r2, [r1, #12]
 800c42e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c432:	4605      	mov	r5, r0
 800c434:	0710      	lsls	r0, r2, #28
 800c436:	460c      	mov	r4, r1
 800c438:	d458      	bmi.n	800c4ec <__sflush_r+0xc0>
 800c43a:	684b      	ldr	r3, [r1, #4]
 800c43c:	2b00      	cmp	r3, #0
 800c43e:	dc05      	bgt.n	800c44c <__sflush_r+0x20>
 800c440:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c442:	2b00      	cmp	r3, #0
 800c444:	dc02      	bgt.n	800c44c <__sflush_r+0x20>
 800c446:	2000      	movs	r0, #0
 800c448:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c44c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c44e:	2e00      	cmp	r6, #0
 800c450:	d0f9      	beq.n	800c446 <__sflush_r+0x1a>
 800c452:	2300      	movs	r3, #0
 800c454:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c458:	682f      	ldr	r7, [r5, #0]
 800c45a:	602b      	str	r3, [r5, #0]
 800c45c:	d032      	beq.n	800c4c4 <__sflush_r+0x98>
 800c45e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c460:	89a3      	ldrh	r3, [r4, #12]
 800c462:	075a      	lsls	r2, r3, #29
 800c464:	d505      	bpl.n	800c472 <__sflush_r+0x46>
 800c466:	6863      	ldr	r3, [r4, #4]
 800c468:	1ac0      	subs	r0, r0, r3
 800c46a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c46c:	b10b      	cbz	r3, 800c472 <__sflush_r+0x46>
 800c46e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c470:	1ac0      	subs	r0, r0, r3
 800c472:	2300      	movs	r3, #0
 800c474:	4602      	mov	r2, r0
 800c476:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c478:	6a21      	ldr	r1, [r4, #32]
 800c47a:	4628      	mov	r0, r5
 800c47c:	47b0      	blx	r6
 800c47e:	1c43      	adds	r3, r0, #1
 800c480:	89a3      	ldrh	r3, [r4, #12]
 800c482:	d106      	bne.n	800c492 <__sflush_r+0x66>
 800c484:	6829      	ldr	r1, [r5, #0]
 800c486:	291d      	cmp	r1, #29
 800c488:	d82c      	bhi.n	800c4e4 <__sflush_r+0xb8>
 800c48a:	4a2a      	ldr	r2, [pc, #168]	; (800c534 <__sflush_r+0x108>)
 800c48c:	40ca      	lsrs	r2, r1
 800c48e:	07d6      	lsls	r6, r2, #31
 800c490:	d528      	bpl.n	800c4e4 <__sflush_r+0xb8>
 800c492:	2200      	movs	r2, #0
 800c494:	6062      	str	r2, [r4, #4]
 800c496:	04d9      	lsls	r1, r3, #19
 800c498:	6922      	ldr	r2, [r4, #16]
 800c49a:	6022      	str	r2, [r4, #0]
 800c49c:	d504      	bpl.n	800c4a8 <__sflush_r+0x7c>
 800c49e:	1c42      	adds	r2, r0, #1
 800c4a0:	d101      	bne.n	800c4a6 <__sflush_r+0x7a>
 800c4a2:	682b      	ldr	r3, [r5, #0]
 800c4a4:	b903      	cbnz	r3, 800c4a8 <__sflush_r+0x7c>
 800c4a6:	6560      	str	r0, [r4, #84]	; 0x54
 800c4a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c4aa:	602f      	str	r7, [r5, #0]
 800c4ac:	2900      	cmp	r1, #0
 800c4ae:	d0ca      	beq.n	800c446 <__sflush_r+0x1a>
 800c4b0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c4b4:	4299      	cmp	r1, r3
 800c4b6:	d002      	beq.n	800c4be <__sflush_r+0x92>
 800c4b8:	4628      	mov	r0, r5
 800c4ba:	f000 f8fd 	bl	800c6b8 <_free_r>
 800c4be:	2000      	movs	r0, #0
 800c4c0:	6360      	str	r0, [r4, #52]	; 0x34
 800c4c2:	e7c1      	b.n	800c448 <__sflush_r+0x1c>
 800c4c4:	6a21      	ldr	r1, [r4, #32]
 800c4c6:	2301      	movs	r3, #1
 800c4c8:	4628      	mov	r0, r5
 800c4ca:	47b0      	blx	r6
 800c4cc:	1c41      	adds	r1, r0, #1
 800c4ce:	d1c7      	bne.n	800c460 <__sflush_r+0x34>
 800c4d0:	682b      	ldr	r3, [r5, #0]
 800c4d2:	2b00      	cmp	r3, #0
 800c4d4:	d0c4      	beq.n	800c460 <__sflush_r+0x34>
 800c4d6:	2b1d      	cmp	r3, #29
 800c4d8:	d001      	beq.n	800c4de <__sflush_r+0xb2>
 800c4da:	2b16      	cmp	r3, #22
 800c4dc:	d101      	bne.n	800c4e2 <__sflush_r+0xb6>
 800c4de:	602f      	str	r7, [r5, #0]
 800c4e0:	e7b1      	b.n	800c446 <__sflush_r+0x1a>
 800c4e2:	89a3      	ldrh	r3, [r4, #12]
 800c4e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c4e8:	81a3      	strh	r3, [r4, #12]
 800c4ea:	e7ad      	b.n	800c448 <__sflush_r+0x1c>
 800c4ec:	690f      	ldr	r7, [r1, #16]
 800c4ee:	2f00      	cmp	r7, #0
 800c4f0:	d0a9      	beq.n	800c446 <__sflush_r+0x1a>
 800c4f2:	0793      	lsls	r3, r2, #30
 800c4f4:	680e      	ldr	r6, [r1, #0]
 800c4f6:	bf08      	it	eq
 800c4f8:	694b      	ldreq	r3, [r1, #20]
 800c4fa:	600f      	str	r7, [r1, #0]
 800c4fc:	bf18      	it	ne
 800c4fe:	2300      	movne	r3, #0
 800c500:	eba6 0807 	sub.w	r8, r6, r7
 800c504:	608b      	str	r3, [r1, #8]
 800c506:	f1b8 0f00 	cmp.w	r8, #0
 800c50a:	dd9c      	ble.n	800c446 <__sflush_r+0x1a>
 800c50c:	6a21      	ldr	r1, [r4, #32]
 800c50e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c510:	4643      	mov	r3, r8
 800c512:	463a      	mov	r2, r7
 800c514:	4628      	mov	r0, r5
 800c516:	47b0      	blx	r6
 800c518:	2800      	cmp	r0, #0
 800c51a:	dc06      	bgt.n	800c52a <__sflush_r+0xfe>
 800c51c:	89a3      	ldrh	r3, [r4, #12]
 800c51e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c522:	81a3      	strh	r3, [r4, #12]
 800c524:	f04f 30ff 	mov.w	r0, #4294967295
 800c528:	e78e      	b.n	800c448 <__sflush_r+0x1c>
 800c52a:	4407      	add	r7, r0
 800c52c:	eba8 0800 	sub.w	r8, r8, r0
 800c530:	e7e9      	b.n	800c506 <__sflush_r+0xda>
 800c532:	bf00      	nop
 800c534:	20400001 	.word	0x20400001

0800c538 <_fflush_r>:
 800c538:	b538      	push	{r3, r4, r5, lr}
 800c53a:	690b      	ldr	r3, [r1, #16]
 800c53c:	4605      	mov	r5, r0
 800c53e:	460c      	mov	r4, r1
 800c540:	b913      	cbnz	r3, 800c548 <_fflush_r+0x10>
 800c542:	2500      	movs	r5, #0
 800c544:	4628      	mov	r0, r5
 800c546:	bd38      	pop	{r3, r4, r5, pc}
 800c548:	b118      	cbz	r0, 800c552 <_fflush_r+0x1a>
 800c54a:	6983      	ldr	r3, [r0, #24]
 800c54c:	b90b      	cbnz	r3, 800c552 <_fflush_r+0x1a>
 800c54e:	f7ff fb9b 	bl	800bc88 <__sinit>
 800c552:	4b14      	ldr	r3, [pc, #80]	; (800c5a4 <_fflush_r+0x6c>)
 800c554:	429c      	cmp	r4, r3
 800c556:	d11b      	bne.n	800c590 <_fflush_r+0x58>
 800c558:	686c      	ldr	r4, [r5, #4]
 800c55a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c55e:	2b00      	cmp	r3, #0
 800c560:	d0ef      	beq.n	800c542 <_fflush_r+0xa>
 800c562:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c564:	07d0      	lsls	r0, r2, #31
 800c566:	d404      	bmi.n	800c572 <_fflush_r+0x3a>
 800c568:	0599      	lsls	r1, r3, #22
 800c56a:	d402      	bmi.n	800c572 <_fflush_r+0x3a>
 800c56c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c56e:	f7ff fc4e 	bl	800be0e <__retarget_lock_acquire_recursive>
 800c572:	4628      	mov	r0, r5
 800c574:	4621      	mov	r1, r4
 800c576:	f7ff ff59 	bl	800c42c <__sflush_r>
 800c57a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c57c:	07da      	lsls	r2, r3, #31
 800c57e:	4605      	mov	r5, r0
 800c580:	d4e0      	bmi.n	800c544 <_fflush_r+0xc>
 800c582:	89a3      	ldrh	r3, [r4, #12]
 800c584:	059b      	lsls	r3, r3, #22
 800c586:	d4dd      	bmi.n	800c544 <_fflush_r+0xc>
 800c588:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c58a:	f7ff fc41 	bl	800be10 <__retarget_lock_release_recursive>
 800c58e:	e7d9      	b.n	800c544 <_fflush_r+0xc>
 800c590:	4b05      	ldr	r3, [pc, #20]	; (800c5a8 <_fflush_r+0x70>)
 800c592:	429c      	cmp	r4, r3
 800c594:	d101      	bne.n	800c59a <_fflush_r+0x62>
 800c596:	68ac      	ldr	r4, [r5, #8]
 800c598:	e7df      	b.n	800c55a <_fflush_r+0x22>
 800c59a:	4b04      	ldr	r3, [pc, #16]	; (800c5ac <_fflush_r+0x74>)
 800c59c:	429c      	cmp	r4, r3
 800c59e:	bf08      	it	eq
 800c5a0:	68ec      	ldreq	r4, [r5, #12]
 800c5a2:	e7da      	b.n	800c55a <_fflush_r+0x22>
 800c5a4:	0800d72c 	.word	0x0800d72c
 800c5a8:	0800d74c 	.word	0x0800d74c
 800c5ac:	0800d70c 	.word	0x0800d70c

0800c5b0 <_lseek_r>:
 800c5b0:	b538      	push	{r3, r4, r5, lr}
 800c5b2:	4d07      	ldr	r5, [pc, #28]	; (800c5d0 <_lseek_r+0x20>)
 800c5b4:	4604      	mov	r4, r0
 800c5b6:	4608      	mov	r0, r1
 800c5b8:	4611      	mov	r1, r2
 800c5ba:	2200      	movs	r2, #0
 800c5bc:	602a      	str	r2, [r5, #0]
 800c5be:	461a      	mov	r2, r3
 800c5c0:	f7f5 fd22 	bl	8002008 <_lseek>
 800c5c4:	1c43      	adds	r3, r0, #1
 800c5c6:	d102      	bne.n	800c5ce <_lseek_r+0x1e>
 800c5c8:	682b      	ldr	r3, [r5, #0]
 800c5ca:	b103      	cbz	r3, 800c5ce <_lseek_r+0x1e>
 800c5cc:	6023      	str	r3, [r4, #0]
 800c5ce:	bd38      	pop	{r3, r4, r5, pc}
 800c5d0:	20002e28 	.word	0x20002e28

0800c5d4 <__swhatbuf_r>:
 800c5d4:	b570      	push	{r4, r5, r6, lr}
 800c5d6:	460e      	mov	r6, r1
 800c5d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c5dc:	2900      	cmp	r1, #0
 800c5de:	b096      	sub	sp, #88	; 0x58
 800c5e0:	4614      	mov	r4, r2
 800c5e2:	461d      	mov	r5, r3
 800c5e4:	da08      	bge.n	800c5f8 <__swhatbuf_r+0x24>
 800c5e6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800c5ea:	2200      	movs	r2, #0
 800c5ec:	602a      	str	r2, [r5, #0]
 800c5ee:	061a      	lsls	r2, r3, #24
 800c5f0:	d410      	bmi.n	800c614 <__swhatbuf_r+0x40>
 800c5f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c5f6:	e00e      	b.n	800c616 <__swhatbuf_r+0x42>
 800c5f8:	466a      	mov	r2, sp
 800c5fa:	f000 fd05 	bl	800d008 <_fstat_r>
 800c5fe:	2800      	cmp	r0, #0
 800c600:	dbf1      	blt.n	800c5e6 <__swhatbuf_r+0x12>
 800c602:	9a01      	ldr	r2, [sp, #4]
 800c604:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c608:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c60c:	425a      	negs	r2, r3
 800c60e:	415a      	adcs	r2, r3
 800c610:	602a      	str	r2, [r5, #0]
 800c612:	e7ee      	b.n	800c5f2 <__swhatbuf_r+0x1e>
 800c614:	2340      	movs	r3, #64	; 0x40
 800c616:	2000      	movs	r0, #0
 800c618:	6023      	str	r3, [r4, #0]
 800c61a:	b016      	add	sp, #88	; 0x58
 800c61c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800c620 <__smakebuf_r>:
 800c620:	898b      	ldrh	r3, [r1, #12]
 800c622:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c624:	079d      	lsls	r5, r3, #30
 800c626:	4606      	mov	r6, r0
 800c628:	460c      	mov	r4, r1
 800c62a:	d507      	bpl.n	800c63c <__smakebuf_r+0x1c>
 800c62c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c630:	6023      	str	r3, [r4, #0]
 800c632:	6123      	str	r3, [r4, #16]
 800c634:	2301      	movs	r3, #1
 800c636:	6163      	str	r3, [r4, #20]
 800c638:	b002      	add	sp, #8
 800c63a:	bd70      	pop	{r4, r5, r6, pc}
 800c63c:	ab01      	add	r3, sp, #4
 800c63e:	466a      	mov	r2, sp
 800c640:	f7ff ffc8 	bl	800c5d4 <__swhatbuf_r>
 800c644:	9900      	ldr	r1, [sp, #0]
 800c646:	4605      	mov	r5, r0
 800c648:	4630      	mov	r0, r6
 800c64a:	f7ff fc19 	bl	800be80 <_malloc_r>
 800c64e:	b948      	cbnz	r0, 800c664 <__smakebuf_r+0x44>
 800c650:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c654:	059a      	lsls	r2, r3, #22
 800c656:	d4ef      	bmi.n	800c638 <__smakebuf_r+0x18>
 800c658:	f023 0303 	bic.w	r3, r3, #3
 800c65c:	f043 0302 	orr.w	r3, r3, #2
 800c660:	81a3      	strh	r3, [r4, #12]
 800c662:	e7e3      	b.n	800c62c <__smakebuf_r+0xc>
 800c664:	4b0d      	ldr	r3, [pc, #52]	; (800c69c <__smakebuf_r+0x7c>)
 800c666:	62b3      	str	r3, [r6, #40]	; 0x28
 800c668:	89a3      	ldrh	r3, [r4, #12]
 800c66a:	6020      	str	r0, [r4, #0]
 800c66c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c670:	81a3      	strh	r3, [r4, #12]
 800c672:	9b00      	ldr	r3, [sp, #0]
 800c674:	6163      	str	r3, [r4, #20]
 800c676:	9b01      	ldr	r3, [sp, #4]
 800c678:	6120      	str	r0, [r4, #16]
 800c67a:	b15b      	cbz	r3, 800c694 <__smakebuf_r+0x74>
 800c67c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c680:	4630      	mov	r0, r6
 800c682:	f000 fcd3 	bl	800d02c <_isatty_r>
 800c686:	b128      	cbz	r0, 800c694 <__smakebuf_r+0x74>
 800c688:	89a3      	ldrh	r3, [r4, #12]
 800c68a:	f023 0303 	bic.w	r3, r3, #3
 800c68e:	f043 0301 	orr.w	r3, r3, #1
 800c692:	81a3      	strh	r3, [r4, #12]
 800c694:	89a0      	ldrh	r0, [r4, #12]
 800c696:	4305      	orrs	r5, r0
 800c698:	81a5      	strh	r5, [r4, #12]
 800c69a:	e7cd      	b.n	800c638 <__smakebuf_r+0x18>
 800c69c:	0800bc21 	.word	0x0800bc21

0800c6a0 <__malloc_lock>:
 800c6a0:	4801      	ldr	r0, [pc, #4]	; (800c6a8 <__malloc_lock+0x8>)
 800c6a2:	f7ff bbb4 	b.w	800be0e <__retarget_lock_acquire_recursive>
 800c6a6:	bf00      	nop
 800c6a8:	20002e1c 	.word	0x20002e1c

0800c6ac <__malloc_unlock>:
 800c6ac:	4801      	ldr	r0, [pc, #4]	; (800c6b4 <__malloc_unlock+0x8>)
 800c6ae:	f7ff bbaf 	b.w	800be10 <__retarget_lock_release_recursive>
 800c6b2:	bf00      	nop
 800c6b4:	20002e1c 	.word	0x20002e1c

0800c6b8 <_free_r>:
 800c6b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c6ba:	2900      	cmp	r1, #0
 800c6bc:	d044      	beq.n	800c748 <_free_r+0x90>
 800c6be:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c6c2:	9001      	str	r0, [sp, #4]
 800c6c4:	2b00      	cmp	r3, #0
 800c6c6:	f1a1 0404 	sub.w	r4, r1, #4
 800c6ca:	bfb8      	it	lt
 800c6cc:	18e4      	addlt	r4, r4, r3
 800c6ce:	f7ff ffe7 	bl	800c6a0 <__malloc_lock>
 800c6d2:	4a1e      	ldr	r2, [pc, #120]	; (800c74c <_free_r+0x94>)
 800c6d4:	9801      	ldr	r0, [sp, #4]
 800c6d6:	6813      	ldr	r3, [r2, #0]
 800c6d8:	b933      	cbnz	r3, 800c6e8 <_free_r+0x30>
 800c6da:	6063      	str	r3, [r4, #4]
 800c6dc:	6014      	str	r4, [r2, #0]
 800c6de:	b003      	add	sp, #12
 800c6e0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c6e4:	f7ff bfe2 	b.w	800c6ac <__malloc_unlock>
 800c6e8:	42a3      	cmp	r3, r4
 800c6ea:	d908      	bls.n	800c6fe <_free_r+0x46>
 800c6ec:	6825      	ldr	r5, [r4, #0]
 800c6ee:	1961      	adds	r1, r4, r5
 800c6f0:	428b      	cmp	r3, r1
 800c6f2:	bf01      	itttt	eq
 800c6f4:	6819      	ldreq	r1, [r3, #0]
 800c6f6:	685b      	ldreq	r3, [r3, #4]
 800c6f8:	1949      	addeq	r1, r1, r5
 800c6fa:	6021      	streq	r1, [r4, #0]
 800c6fc:	e7ed      	b.n	800c6da <_free_r+0x22>
 800c6fe:	461a      	mov	r2, r3
 800c700:	685b      	ldr	r3, [r3, #4]
 800c702:	b10b      	cbz	r3, 800c708 <_free_r+0x50>
 800c704:	42a3      	cmp	r3, r4
 800c706:	d9fa      	bls.n	800c6fe <_free_r+0x46>
 800c708:	6811      	ldr	r1, [r2, #0]
 800c70a:	1855      	adds	r5, r2, r1
 800c70c:	42a5      	cmp	r5, r4
 800c70e:	d10b      	bne.n	800c728 <_free_r+0x70>
 800c710:	6824      	ldr	r4, [r4, #0]
 800c712:	4421      	add	r1, r4
 800c714:	1854      	adds	r4, r2, r1
 800c716:	42a3      	cmp	r3, r4
 800c718:	6011      	str	r1, [r2, #0]
 800c71a:	d1e0      	bne.n	800c6de <_free_r+0x26>
 800c71c:	681c      	ldr	r4, [r3, #0]
 800c71e:	685b      	ldr	r3, [r3, #4]
 800c720:	6053      	str	r3, [r2, #4]
 800c722:	4421      	add	r1, r4
 800c724:	6011      	str	r1, [r2, #0]
 800c726:	e7da      	b.n	800c6de <_free_r+0x26>
 800c728:	d902      	bls.n	800c730 <_free_r+0x78>
 800c72a:	230c      	movs	r3, #12
 800c72c:	6003      	str	r3, [r0, #0]
 800c72e:	e7d6      	b.n	800c6de <_free_r+0x26>
 800c730:	6825      	ldr	r5, [r4, #0]
 800c732:	1961      	adds	r1, r4, r5
 800c734:	428b      	cmp	r3, r1
 800c736:	bf04      	itt	eq
 800c738:	6819      	ldreq	r1, [r3, #0]
 800c73a:	685b      	ldreq	r3, [r3, #4]
 800c73c:	6063      	str	r3, [r4, #4]
 800c73e:	bf04      	itt	eq
 800c740:	1949      	addeq	r1, r1, r5
 800c742:	6021      	streq	r1, [r4, #0]
 800c744:	6054      	str	r4, [r2, #4]
 800c746:	e7ca      	b.n	800c6de <_free_r+0x26>
 800c748:	b003      	add	sp, #12
 800c74a:	bd30      	pop	{r4, r5, pc}
 800c74c:	20002e20 	.word	0x20002e20

0800c750 <__ssputs_r>:
 800c750:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c754:	688e      	ldr	r6, [r1, #8]
 800c756:	429e      	cmp	r6, r3
 800c758:	4682      	mov	sl, r0
 800c75a:	460c      	mov	r4, r1
 800c75c:	4690      	mov	r8, r2
 800c75e:	461f      	mov	r7, r3
 800c760:	d838      	bhi.n	800c7d4 <__ssputs_r+0x84>
 800c762:	898a      	ldrh	r2, [r1, #12]
 800c764:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c768:	d032      	beq.n	800c7d0 <__ssputs_r+0x80>
 800c76a:	6825      	ldr	r5, [r4, #0]
 800c76c:	6909      	ldr	r1, [r1, #16]
 800c76e:	eba5 0901 	sub.w	r9, r5, r1
 800c772:	6965      	ldr	r5, [r4, #20]
 800c774:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c778:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c77c:	3301      	adds	r3, #1
 800c77e:	444b      	add	r3, r9
 800c780:	106d      	asrs	r5, r5, #1
 800c782:	429d      	cmp	r5, r3
 800c784:	bf38      	it	cc
 800c786:	461d      	movcc	r5, r3
 800c788:	0553      	lsls	r3, r2, #21
 800c78a:	d531      	bpl.n	800c7f0 <__ssputs_r+0xa0>
 800c78c:	4629      	mov	r1, r5
 800c78e:	f7ff fb77 	bl	800be80 <_malloc_r>
 800c792:	4606      	mov	r6, r0
 800c794:	b950      	cbnz	r0, 800c7ac <__ssputs_r+0x5c>
 800c796:	230c      	movs	r3, #12
 800c798:	f8ca 3000 	str.w	r3, [sl]
 800c79c:	89a3      	ldrh	r3, [r4, #12]
 800c79e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c7a2:	81a3      	strh	r3, [r4, #12]
 800c7a4:	f04f 30ff 	mov.w	r0, #4294967295
 800c7a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c7ac:	6921      	ldr	r1, [r4, #16]
 800c7ae:	464a      	mov	r2, r9
 800c7b0:	f7ff fb2f 	bl	800be12 <memcpy>
 800c7b4:	89a3      	ldrh	r3, [r4, #12]
 800c7b6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c7ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c7be:	81a3      	strh	r3, [r4, #12]
 800c7c0:	6126      	str	r6, [r4, #16]
 800c7c2:	6165      	str	r5, [r4, #20]
 800c7c4:	444e      	add	r6, r9
 800c7c6:	eba5 0509 	sub.w	r5, r5, r9
 800c7ca:	6026      	str	r6, [r4, #0]
 800c7cc:	60a5      	str	r5, [r4, #8]
 800c7ce:	463e      	mov	r6, r7
 800c7d0:	42be      	cmp	r6, r7
 800c7d2:	d900      	bls.n	800c7d6 <__ssputs_r+0x86>
 800c7d4:	463e      	mov	r6, r7
 800c7d6:	6820      	ldr	r0, [r4, #0]
 800c7d8:	4632      	mov	r2, r6
 800c7da:	4641      	mov	r1, r8
 800c7dc:	f000 fc36 	bl	800d04c <memmove>
 800c7e0:	68a3      	ldr	r3, [r4, #8]
 800c7e2:	1b9b      	subs	r3, r3, r6
 800c7e4:	60a3      	str	r3, [r4, #8]
 800c7e6:	6823      	ldr	r3, [r4, #0]
 800c7e8:	4433      	add	r3, r6
 800c7ea:	6023      	str	r3, [r4, #0]
 800c7ec:	2000      	movs	r0, #0
 800c7ee:	e7db      	b.n	800c7a8 <__ssputs_r+0x58>
 800c7f0:	462a      	mov	r2, r5
 800c7f2:	f000 fc45 	bl	800d080 <_realloc_r>
 800c7f6:	4606      	mov	r6, r0
 800c7f8:	2800      	cmp	r0, #0
 800c7fa:	d1e1      	bne.n	800c7c0 <__ssputs_r+0x70>
 800c7fc:	6921      	ldr	r1, [r4, #16]
 800c7fe:	4650      	mov	r0, sl
 800c800:	f7ff ff5a 	bl	800c6b8 <_free_r>
 800c804:	e7c7      	b.n	800c796 <__ssputs_r+0x46>
	...

0800c808 <_svfiprintf_r>:
 800c808:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c80c:	4698      	mov	r8, r3
 800c80e:	898b      	ldrh	r3, [r1, #12]
 800c810:	061b      	lsls	r3, r3, #24
 800c812:	b09d      	sub	sp, #116	; 0x74
 800c814:	4607      	mov	r7, r0
 800c816:	460d      	mov	r5, r1
 800c818:	4614      	mov	r4, r2
 800c81a:	d50e      	bpl.n	800c83a <_svfiprintf_r+0x32>
 800c81c:	690b      	ldr	r3, [r1, #16]
 800c81e:	b963      	cbnz	r3, 800c83a <_svfiprintf_r+0x32>
 800c820:	2140      	movs	r1, #64	; 0x40
 800c822:	f7ff fb2d 	bl	800be80 <_malloc_r>
 800c826:	6028      	str	r0, [r5, #0]
 800c828:	6128      	str	r0, [r5, #16]
 800c82a:	b920      	cbnz	r0, 800c836 <_svfiprintf_r+0x2e>
 800c82c:	230c      	movs	r3, #12
 800c82e:	603b      	str	r3, [r7, #0]
 800c830:	f04f 30ff 	mov.w	r0, #4294967295
 800c834:	e0d1      	b.n	800c9da <_svfiprintf_r+0x1d2>
 800c836:	2340      	movs	r3, #64	; 0x40
 800c838:	616b      	str	r3, [r5, #20]
 800c83a:	2300      	movs	r3, #0
 800c83c:	9309      	str	r3, [sp, #36]	; 0x24
 800c83e:	2320      	movs	r3, #32
 800c840:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c844:	f8cd 800c 	str.w	r8, [sp, #12]
 800c848:	2330      	movs	r3, #48	; 0x30
 800c84a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800c9f4 <_svfiprintf_r+0x1ec>
 800c84e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c852:	f04f 0901 	mov.w	r9, #1
 800c856:	4623      	mov	r3, r4
 800c858:	469a      	mov	sl, r3
 800c85a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c85e:	b10a      	cbz	r2, 800c864 <_svfiprintf_r+0x5c>
 800c860:	2a25      	cmp	r2, #37	; 0x25
 800c862:	d1f9      	bne.n	800c858 <_svfiprintf_r+0x50>
 800c864:	ebba 0b04 	subs.w	fp, sl, r4
 800c868:	d00b      	beq.n	800c882 <_svfiprintf_r+0x7a>
 800c86a:	465b      	mov	r3, fp
 800c86c:	4622      	mov	r2, r4
 800c86e:	4629      	mov	r1, r5
 800c870:	4638      	mov	r0, r7
 800c872:	f7ff ff6d 	bl	800c750 <__ssputs_r>
 800c876:	3001      	adds	r0, #1
 800c878:	f000 80aa 	beq.w	800c9d0 <_svfiprintf_r+0x1c8>
 800c87c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c87e:	445a      	add	r2, fp
 800c880:	9209      	str	r2, [sp, #36]	; 0x24
 800c882:	f89a 3000 	ldrb.w	r3, [sl]
 800c886:	2b00      	cmp	r3, #0
 800c888:	f000 80a2 	beq.w	800c9d0 <_svfiprintf_r+0x1c8>
 800c88c:	2300      	movs	r3, #0
 800c88e:	f04f 32ff 	mov.w	r2, #4294967295
 800c892:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c896:	f10a 0a01 	add.w	sl, sl, #1
 800c89a:	9304      	str	r3, [sp, #16]
 800c89c:	9307      	str	r3, [sp, #28]
 800c89e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c8a2:	931a      	str	r3, [sp, #104]	; 0x68
 800c8a4:	4654      	mov	r4, sl
 800c8a6:	2205      	movs	r2, #5
 800c8a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c8ac:	4851      	ldr	r0, [pc, #324]	; (800c9f4 <_svfiprintf_r+0x1ec>)
 800c8ae:	f7f3 fc97 	bl	80001e0 <memchr>
 800c8b2:	9a04      	ldr	r2, [sp, #16]
 800c8b4:	b9d8      	cbnz	r0, 800c8ee <_svfiprintf_r+0xe6>
 800c8b6:	06d0      	lsls	r0, r2, #27
 800c8b8:	bf44      	itt	mi
 800c8ba:	2320      	movmi	r3, #32
 800c8bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c8c0:	0711      	lsls	r1, r2, #28
 800c8c2:	bf44      	itt	mi
 800c8c4:	232b      	movmi	r3, #43	; 0x2b
 800c8c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c8ca:	f89a 3000 	ldrb.w	r3, [sl]
 800c8ce:	2b2a      	cmp	r3, #42	; 0x2a
 800c8d0:	d015      	beq.n	800c8fe <_svfiprintf_r+0xf6>
 800c8d2:	9a07      	ldr	r2, [sp, #28]
 800c8d4:	4654      	mov	r4, sl
 800c8d6:	2000      	movs	r0, #0
 800c8d8:	f04f 0c0a 	mov.w	ip, #10
 800c8dc:	4621      	mov	r1, r4
 800c8de:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c8e2:	3b30      	subs	r3, #48	; 0x30
 800c8e4:	2b09      	cmp	r3, #9
 800c8e6:	d94e      	bls.n	800c986 <_svfiprintf_r+0x17e>
 800c8e8:	b1b0      	cbz	r0, 800c918 <_svfiprintf_r+0x110>
 800c8ea:	9207      	str	r2, [sp, #28]
 800c8ec:	e014      	b.n	800c918 <_svfiprintf_r+0x110>
 800c8ee:	eba0 0308 	sub.w	r3, r0, r8
 800c8f2:	fa09 f303 	lsl.w	r3, r9, r3
 800c8f6:	4313      	orrs	r3, r2
 800c8f8:	9304      	str	r3, [sp, #16]
 800c8fa:	46a2      	mov	sl, r4
 800c8fc:	e7d2      	b.n	800c8a4 <_svfiprintf_r+0x9c>
 800c8fe:	9b03      	ldr	r3, [sp, #12]
 800c900:	1d19      	adds	r1, r3, #4
 800c902:	681b      	ldr	r3, [r3, #0]
 800c904:	9103      	str	r1, [sp, #12]
 800c906:	2b00      	cmp	r3, #0
 800c908:	bfbb      	ittet	lt
 800c90a:	425b      	neglt	r3, r3
 800c90c:	f042 0202 	orrlt.w	r2, r2, #2
 800c910:	9307      	strge	r3, [sp, #28]
 800c912:	9307      	strlt	r3, [sp, #28]
 800c914:	bfb8      	it	lt
 800c916:	9204      	strlt	r2, [sp, #16]
 800c918:	7823      	ldrb	r3, [r4, #0]
 800c91a:	2b2e      	cmp	r3, #46	; 0x2e
 800c91c:	d10c      	bne.n	800c938 <_svfiprintf_r+0x130>
 800c91e:	7863      	ldrb	r3, [r4, #1]
 800c920:	2b2a      	cmp	r3, #42	; 0x2a
 800c922:	d135      	bne.n	800c990 <_svfiprintf_r+0x188>
 800c924:	9b03      	ldr	r3, [sp, #12]
 800c926:	1d1a      	adds	r2, r3, #4
 800c928:	681b      	ldr	r3, [r3, #0]
 800c92a:	9203      	str	r2, [sp, #12]
 800c92c:	2b00      	cmp	r3, #0
 800c92e:	bfb8      	it	lt
 800c930:	f04f 33ff 	movlt.w	r3, #4294967295
 800c934:	3402      	adds	r4, #2
 800c936:	9305      	str	r3, [sp, #20]
 800c938:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800ca04 <_svfiprintf_r+0x1fc>
 800c93c:	7821      	ldrb	r1, [r4, #0]
 800c93e:	2203      	movs	r2, #3
 800c940:	4650      	mov	r0, sl
 800c942:	f7f3 fc4d 	bl	80001e0 <memchr>
 800c946:	b140      	cbz	r0, 800c95a <_svfiprintf_r+0x152>
 800c948:	2340      	movs	r3, #64	; 0x40
 800c94a:	eba0 000a 	sub.w	r0, r0, sl
 800c94e:	fa03 f000 	lsl.w	r0, r3, r0
 800c952:	9b04      	ldr	r3, [sp, #16]
 800c954:	4303      	orrs	r3, r0
 800c956:	3401      	adds	r4, #1
 800c958:	9304      	str	r3, [sp, #16]
 800c95a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c95e:	4826      	ldr	r0, [pc, #152]	; (800c9f8 <_svfiprintf_r+0x1f0>)
 800c960:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c964:	2206      	movs	r2, #6
 800c966:	f7f3 fc3b 	bl	80001e0 <memchr>
 800c96a:	2800      	cmp	r0, #0
 800c96c:	d038      	beq.n	800c9e0 <_svfiprintf_r+0x1d8>
 800c96e:	4b23      	ldr	r3, [pc, #140]	; (800c9fc <_svfiprintf_r+0x1f4>)
 800c970:	bb1b      	cbnz	r3, 800c9ba <_svfiprintf_r+0x1b2>
 800c972:	9b03      	ldr	r3, [sp, #12]
 800c974:	3307      	adds	r3, #7
 800c976:	f023 0307 	bic.w	r3, r3, #7
 800c97a:	3308      	adds	r3, #8
 800c97c:	9303      	str	r3, [sp, #12]
 800c97e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c980:	4433      	add	r3, r6
 800c982:	9309      	str	r3, [sp, #36]	; 0x24
 800c984:	e767      	b.n	800c856 <_svfiprintf_r+0x4e>
 800c986:	fb0c 3202 	mla	r2, ip, r2, r3
 800c98a:	460c      	mov	r4, r1
 800c98c:	2001      	movs	r0, #1
 800c98e:	e7a5      	b.n	800c8dc <_svfiprintf_r+0xd4>
 800c990:	2300      	movs	r3, #0
 800c992:	3401      	adds	r4, #1
 800c994:	9305      	str	r3, [sp, #20]
 800c996:	4619      	mov	r1, r3
 800c998:	f04f 0c0a 	mov.w	ip, #10
 800c99c:	4620      	mov	r0, r4
 800c99e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c9a2:	3a30      	subs	r2, #48	; 0x30
 800c9a4:	2a09      	cmp	r2, #9
 800c9a6:	d903      	bls.n	800c9b0 <_svfiprintf_r+0x1a8>
 800c9a8:	2b00      	cmp	r3, #0
 800c9aa:	d0c5      	beq.n	800c938 <_svfiprintf_r+0x130>
 800c9ac:	9105      	str	r1, [sp, #20]
 800c9ae:	e7c3      	b.n	800c938 <_svfiprintf_r+0x130>
 800c9b0:	fb0c 2101 	mla	r1, ip, r1, r2
 800c9b4:	4604      	mov	r4, r0
 800c9b6:	2301      	movs	r3, #1
 800c9b8:	e7f0      	b.n	800c99c <_svfiprintf_r+0x194>
 800c9ba:	ab03      	add	r3, sp, #12
 800c9bc:	9300      	str	r3, [sp, #0]
 800c9be:	462a      	mov	r2, r5
 800c9c0:	4b0f      	ldr	r3, [pc, #60]	; (800ca00 <_svfiprintf_r+0x1f8>)
 800c9c2:	a904      	add	r1, sp, #16
 800c9c4:	4638      	mov	r0, r7
 800c9c6:	f3af 8000 	nop.w
 800c9ca:	1c42      	adds	r2, r0, #1
 800c9cc:	4606      	mov	r6, r0
 800c9ce:	d1d6      	bne.n	800c97e <_svfiprintf_r+0x176>
 800c9d0:	89ab      	ldrh	r3, [r5, #12]
 800c9d2:	065b      	lsls	r3, r3, #25
 800c9d4:	f53f af2c 	bmi.w	800c830 <_svfiprintf_r+0x28>
 800c9d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c9da:	b01d      	add	sp, #116	; 0x74
 800c9dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c9e0:	ab03      	add	r3, sp, #12
 800c9e2:	9300      	str	r3, [sp, #0]
 800c9e4:	462a      	mov	r2, r5
 800c9e6:	4b06      	ldr	r3, [pc, #24]	; (800ca00 <_svfiprintf_r+0x1f8>)
 800c9e8:	a904      	add	r1, sp, #16
 800c9ea:	4638      	mov	r0, r7
 800c9ec:	f000 f9d4 	bl	800cd98 <_printf_i>
 800c9f0:	e7eb      	b.n	800c9ca <_svfiprintf_r+0x1c2>
 800c9f2:	bf00      	nop
 800c9f4:	0800d770 	.word	0x0800d770
 800c9f8:	0800d77a 	.word	0x0800d77a
 800c9fc:	00000000 	.word	0x00000000
 800ca00:	0800c751 	.word	0x0800c751
 800ca04:	0800d776 	.word	0x0800d776

0800ca08 <__sfputc_r>:
 800ca08:	6893      	ldr	r3, [r2, #8]
 800ca0a:	3b01      	subs	r3, #1
 800ca0c:	2b00      	cmp	r3, #0
 800ca0e:	b410      	push	{r4}
 800ca10:	6093      	str	r3, [r2, #8]
 800ca12:	da08      	bge.n	800ca26 <__sfputc_r+0x1e>
 800ca14:	6994      	ldr	r4, [r2, #24]
 800ca16:	42a3      	cmp	r3, r4
 800ca18:	db01      	blt.n	800ca1e <__sfputc_r+0x16>
 800ca1a:	290a      	cmp	r1, #10
 800ca1c:	d103      	bne.n	800ca26 <__sfputc_r+0x1e>
 800ca1e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ca22:	f7ff bc21 	b.w	800c268 <__swbuf_r>
 800ca26:	6813      	ldr	r3, [r2, #0]
 800ca28:	1c58      	adds	r0, r3, #1
 800ca2a:	6010      	str	r0, [r2, #0]
 800ca2c:	7019      	strb	r1, [r3, #0]
 800ca2e:	4608      	mov	r0, r1
 800ca30:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ca34:	4770      	bx	lr

0800ca36 <__sfputs_r>:
 800ca36:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca38:	4606      	mov	r6, r0
 800ca3a:	460f      	mov	r7, r1
 800ca3c:	4614      	mov	r4, r2
 800ca3e:	18d5      	adds	r5, r2, r3
 800ca40:	42ac      	cmp	r4, r5
 800ca42:	d101      	bne.n	800ca48 <__sfputs_r+0x12>
 800ca44:	2000      	movs	r0, #0
 800ca46:	e007      	b.n	800ca58 <__sfputs_r+0x22>
 800ca48:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ca4c:	463a      	mov	r2, r7
 800ca4e:	4630      	mov	r0, r6
 800ca50:	f7ff ffda 	bl	800ca08 <__sfputc_r>
 800ca54:	1c43      	adds	r3, r0, #1
 800ca56:	d1f3      	bne.n	800ca40 <__sfputs_r+0xa>
 800ca58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ca5c <_vfiprintf_r>:
 800ca5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca60:	460d      	mov	r5, r1
 800ca62:	b09d      	sub	sp, #116	; 0x74
 800ca64:	4614      	mov	r4, r2
 800ca66:	4698      	mov	r8, r3
 800ca68:	4606      	mov	r6, r0
 800ca6a:	b118      	cbz	r0, 800ca74 <_vfiprintf_r+0x18>
 800ca6c:	6983      	ldr	r3, [r0, #24]
 800ca6e:	b90b      	cbnz	r3, 800ca74 <_vfiprintf_r+0x18>
 800ca70:	f7ff f90a 	bl	800bc88 <__sinit>
 800ca74:	4b89      	ldr	r3, [pc, #548]	; (800cc9c <_vfiprintf_r+0x240>)
 800ca76:	429d      	cmp	r5, r3
 800ca78:	d11b      	bne.n	800cab2 <_vfiprintf_r+0x56>
 800ca7a:	6875      	ldr	r5, [r6, #4]
 800ca7c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ca7e:	07d9      	lsls	r1, r3, #31
 800ca80:	d405      	bmi.n	800ca8e <_vfiprintf_r+0x32>
 800ca82:	89ab      	ldrh	r3, [r5, #12]
 800ca84:	059a      	lsls	r2, r3, #22
 800ca86:	d402      	bmi.n	800ca8e <_vfiprintf_r+0x32>
 800ca88:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ca8a:	f7ff f9c0 	bl	800be0e <__retarget_lock_acquire_recursive>
 800ca8e:	89ab      	ldrh	r3, [r5, #12]
 800ca90:	071b      	lsls	r3, r3, #28
 800ca92:	d501      	bpl.n	800ca98 <_vfiprintf_r+0x3c>
 800ca94:	692b      	ldr	r3, [r5, #16]
 800ca96:	b9eb      	cbnz	r3, 800cad4 <_vfiprintf_r+0x78>
 800ca98:	4629      	mov	r1, r5
 800ca9a:	4630      	mov	r0, r6
 800ca9c:	f7ff fc48 	bl	800c330 <__swsetup_r>
 800caa0:	b1c0      	cbz	r0, 800cad4 <_vfiprintf_r+0x78>
 800caa2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800caa4:	07dc      	lsls	r4, r3, #31
 800caa6:	d50e      	bpl.n	800cac6 <_vfiprintf_r+0x6a>
 800caa8:	f04f 30ff 	mov.w	r0, #4294967295
 800caac:	b01d      	add	sp, #116	; 0x74
 800caae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cab2:	4b7b      	ldr	r3, [pc, #492]	; (800cca0 <_vfiprintf_r+0x244>)
 800cab4:	429d      	cmp	r5, r3
 800cab6:	d101      	bne.n	800cabc <_vfiprintf_r+0x60>
 800cab8:	68b5      	ldr	r5, [r6, #8]
 800caba:	e7df      	b.n	800ca7c <_vfiprintf_r+0x20>
 800cabc:	4b79      	ldr	r3, [pc, #484]	; (800cca4 <_vfiprintf_r+0x248>)
 800cabe:	429d      	cmp	r5, r3
 800cac0:	bf08      	it	eq
 800cac2:	68f5      	ldreq	r5, [r6, #12]
 800cac4:	e7da      	b.n	800ca7c <_vfiprintf_r+0x20>
 800cac6:	89ab      	ldrh	r3, [r5, #12]
 800cac8:	0598      	lsls	r0, r3, #22
 800caca:	d4ed      	bmi.n	800caa8 <_vfiprintf_r+0x4c>
 800cacc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cace:	f7ff f99f 	bl	800be10 <__retarget_lock_release_recursive>
 800cad2:	e7e9      	b.n	800caa8 <_vfiprintf_r+0x4c>
 800cad4:	2300      	movs	r3, #0
 800cad6:	9309      	str	r3, [sp, #36]	; 0x24
 800cad8:	2320      	movs	r3, #32
 800cada:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cade:	f8cd 800c 	str.w	r8, [sp, #12]
 800cae2:	2330      	movs	r3, #48	; 0x30
 800cae4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800cca8 <_vfiprintf_r+0x24c>
 800cae8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800caec:	f04f 0901 	mov.w	r9, #1
 800caf0:	4623      	mov	r3, r4
 800caf2:	469a      	mov	sl, r3
 800caf4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800caf8:	b10a      	cbz	r2, 800cafe <_vfiprintf_r+0xa2>
 800cafa:	2a25      	cmp	r2, #37	; 0x25
 800cafc:	d1f9      	bne.n	800caf2 <_vfiprintf_r+0x96>
 800cafe:	ebba 0b04 	subs.w	fp, sl, r4
 800cb02:	d00b      	beq.n	800cb1c <_vfiprintf_r+0xc0>
 800cb04:	465b      	mov	r3, fp
 800cb06:	4622      	mov	r2, r4
 800cb08:	4629      	mov	r1, r5
 800cb0a:	4630      	mov	r0, r6
 800cb0c:	f7ff ff93 	bl	800ca36 <__sfputs_r>
 800cb10:	3001      	adds	r0, #1
 800cb12:	f000 80aa 	beq.w	800cc6a <_vfiprintf_r+0x20e>
 800cb16:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cb18:	445a      	add	r2, fp
 800cb1a:	9209      	str	r2, [sp, #36]	; 0x24
 800cb1c:	f89a 3000 	ldrb.w	r3, [sl]
 800cb20:	2b00      	cmp	r3, #0
 800cb22:	f000 80a2 	beq.w	800cc6a <_vfiprintf_r+0x20e>
 800cb26:	2300      	movs	r3, #0
 800cb28:	f04f 32ff 	mov.w	r2, #4294967295
 800cb2c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cb30:	f10a 0a01 	add.w	sl, sl, #1
 800cb34:	9304      	str	r3, [sp, #16]
 800cb36:	9307      	str	r3, [sp, #28]
 800cb38:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cb3c:	931a      	str	r3, [sp, #104]	; 0x68
 800cb3e:	4654      	mov	r4, sl
 800cb40:	2205      	movs	r2, #5
 800cb42:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cb46:	4858      	ldr	r0, [pc, #352]	; (800cca8 <_vfiprintf_r+0x24c>)
 800cb48:	f7f3 fb4a 	bl	80001e0 <memchr>
 800cb4c:	9a04      	ldr	r2, [sp, #16]
 800cb4e:	b9d8      	cbnz	r0, 800cb88 <_vfiprintf_r+0x12c>
 800cb50:	06d1      	lsls	r1, r2, #27
 800cb52:	bf44      	itt	mi
 800cb54:	2320      	movmi	r3, #32
 800cb56:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cb5a:	0713      	lsls	r3, r2, #28
 800cb5c:	bf44      	itt	mi
 800cb5e:	232b      	movmi	r3, #43	; 0x2b
 800cb60:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cb64:	f89a 3000 	ldrb.w	r3, [sl]
 800cb68:	2b2a      	cmp	r3, #42	; 0x2a
 800cb6a:	d015      	beq.n	800cb98 <_vfiprintf_r+0x13c>
 800cb6c:	9a07      	ldr	r2, [sp, #28]
 800cb6e:	4654      	mov	r4, sl
 800cb70:	2000      	movs	r0, #0
 800cb72:	f04f 0c0a 	mov.w	ip, #10
 800cb76:	4621      	mov	r1, r4
 800cb78:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cb7c:	3b30      	subs	r3, #48	; 0x30
 800cb7e:	2b09      	cmp	r3, #9
 800cb80:	d94e      	bls.n	800cc20 <_vfiprintf_r+0x1c4>
 800cb82:	b1b0      	cbz	r0, 800cbb2 <_vfiprintf_r+0x156>
 800cb84:	9207      	str	r2, [sp, #28]
 800cb86:	e014      	b.n	800cbb2 <_vfiprintf_r+0x156>
 800cb88:	eba0 0308 	sub.w	r3, r0, r8
 800cb8c:	fa09 f303 	lsl.w	r3, r9, r3
 800cb90:	4313      	orrs	r3, r2
 800cb92:	9304      	str	r3, [sp, #16]
 800cb94:	46a2      	mov	sl, r4
 800cb96:	e7d2      	b.n	800cb3e <_vfiprintf_r+0xe2>
 800cb98:	9b03      	ldr	r3, [sp, #12]
 800cb9a:	1d19      	adds	r1, r3, #4
 800cb9c:	681b      	ldr	r3, [r3, #0]
 800cb9e:	9103      	str	r1, [sp, #12]
 800cba0:	2b00      	cmp	r3, #0
 800cba2:	bfbb      	ittet	lt
 800cba4:	425b      	neglt	r3, r3
 800cba6:	f042 0202 	orrlt.w	r2, r2, #2
 800cbaa:	9307      	strge	r3, [sp, #28]
 800cbac:	9307      	strlt	r3, [sp, #28]
 800cbae:	bfb8      	it	lt
 800cbb0:	9204      	strlt	r2, [sp, #16]
 800cbb2:	7823      	ldrb	r3, [r4, #0]
 800cbb4:	2b2e      	cmp	r3, #46	; 0x2e
 800cbb6:	d10c      	bne.n	800cbd2 <_vfiprintf_r+0x176>
 800cbb8:	7863      	ldrb	r3, [r4, #1]
 800cbba:	2b2a      	cmp	r3, #42	; 0x2a
 800cbbc:	d135      	bne.n	800cc2a <_vfiprintf_r+0x1ce>
 800cbbe:	9b03      	ldr	r3, [sp, #12]
 800cbc0:	1d1a      	adds	r2, r3, #4
 800cbc2:	681b      	ldr	r3, [r3, #0]
 800cbc4:	9203      	str	r2, [sp, #12]
 800cbc6:	2b00      	cmp	r3, #0
 800cbc8:	bfb8      	it	lt
 800cbca:	f04f 33ff 	movlt.w	r3, #4294967295
 800cbce:	3402      	adds	r4, #2
 800cbd0:	9305      	str	r3, [sp, #20]
 800cbd2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800ccb8 <_vfiprintf_r+0x25c>
 800cbd6:	7821      	ldrb	r1, [r4, #0]
 800cbd8:	2203      	movs	r2, #3
 800cbda:	4650      	mov	r0, sl
 800cbdc:	f7f3 fb00 	bl	80001e0 <memchr>
 800cbe0:	b140      	cbz	r0, 800cbf4 <_vfiprintf_r+0x198>
 800cbe2:	2340      	movs	r3, #64	; 0x40
 800cbe4:	eba0 000a 	sub.w	r0, r0, sl
 800cbe8:	fa03 f000 	lsl.w	r0, r3, r0
 800cbec:	9b04      	ldr	r3, [sp, #16]
 800cbee:	4303      	orrs	r3, r0
 800cbf0:	3401      	adds	r4, #1
 800cbf2:	9304      	str	r3, [sp, #16]
 800cbf4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cbf8:	482c      	ldr	r0, [pc, #176]	; (800ccac <_vfiprintf_r+0x250>)
 800cbfa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cbfe:	2206      	movs	r2, #6
 800cc00:	f7f3 faee 	bl	80001e0 <memchr>
 800cc04:	2800      	cmp	r0, #0
 800cc06:	d03f      	beq.n	800cc88 <_vfiprintf_r+0x22c>
 800cc08:	4b29      	ldr	r3, [pc, #164]	; (800ccb0 <_vfiprintf_r+0x254>)
 800cc0a:	bb1b      	cbnz	r3, 800cc54 <_vfiprintf_r+0x1f8>
 800cc0c:	9b03      	ldr	r3, [sp, #12]
 800cc0e:	3307      	adds	r3, #7
 800cc10:	f023 0307 	bic.w	r3, r3, #7
 800cc14:	3308      	adds	r3, #8
 800cc16:	9303      	str	r3, [sp, #12]
 800cc18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cc1a:	443b      	add	r3, r7
 800cc1c:	9309      	str	r3, [sp, #36]	; 0x24
 800cc1e:	e767      	b.n	800caf0 <_vfiprintf_r+0x94>
 800cc20:	fb0c 3202 	mla	r2, ip, r2, r3
 800cc24:	460c      	mov	r4, r1
 800cc26:	2001      	movs	r0, #1
 800cc28:	e7a5      	b.n	800cb76 <_vfiprintf_r+0x11a>
 800cc2a:	2300      	movs	r3, #0
 800cc2c:	3401      	adds	r4, #1
 800cc2e:	9305      	str	r3, [sp, #20]
 800cc30:	4619      	mov	r1, r3
 800cc32:	f04f 0c0a 	mov.w	ip, #10
 800cc36:	4620      	mov	r0, r4
 800cc38:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cc3c:	3a30      	subs	r2, #48	; 0x30
 800cc3e:	2a09      	cmp	r2, #9
 800cc40:	d903      	bls.n	800cc4a <_vfiprintf_r+0x1ee>
 800cc42:	2b00      	cmp	r3, #0
 800cc44:	d0c5      	beq.n	800cbd2 <_vfiprintf_r+0x176>
 800cc46:	9105      	str	r1, [sp, #20]
 800cc48:	e7c3      	b.n	800cbd2 <_vfiprintf_r+0x176>
 800cc4a:	fb0c 2101 	mla	r1, ip, r1, r2
 800cc4e:	4604      	mov	r4, r0
 800cc50:	2301      	movs	r3, #1
 800cc52:	e7f0      	b.n	800cc36 <_vfiprintf_r+0x1da>
 800cc54:	ab03      	add	r3, sp, #12
 800cc56:	9300      	str	r3, [sp, #0]
 800cc58:	462a      	mov	r2, r5
 800cc5a:	4b16      	ldr	r3, [pc, #88]	; (800ccb4 <_vfiprintf_r+0x258>)
 800cc5c:	a904      	add	r1, sp, #16
 800cc5e:	4630      	mov	r0, r6
 800cc60:	f3af 8000 	nop.w
 800cc64:	4607      	mov	r7, r0
 800cc66:	1c78      	adds	r0, r7, #1
 800cc68:	d1d6      	bne.n	800cc18 <_vfiprintf_r+0x1bc>
 800cc6a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cc6c:	07d9      	lsls	r1, r3, #31
 800cc6e:	d405      	bmi.n	800cc7c <_vfiprintf_r+0x220>
 800cc70:	89ab      	ldrh	r3, [r5, #12]
 800cc72:	059a      	lsls	r2, r3, #22
 800cc74:	d402      	bmi.n	800cc7c <_vfiprintf_r+0x220>
 800cc76:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cc78:	f7ff f8ca 	bl	800be10 <__retarget_lock_release_recursive>
 800cc7c:	89ab      	ldrh	r3, [r5, #12]
 800cc7e:	065b      	lsls	r3, r3, #25
 800cc80:	f53f af12 	bmi.w	800caa8 <_vfiprintf_r+0x4c>
 800cc84:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cc86:	e711      	b.n	800caac <_vfiprintf_r+0x50>
 800cc88:	ab03      	add	r3, sp, #12
 800cc8a:	9300      	str	r3, [sp, #0]
 800cc8c:	462a      	mov	r2, r5
 800cc8e:	4b09      	ldr	r3, [pc, #36]	; (800ccb4 <_vfiprintf_r+0x258>)
 800cc90:	a904      	add	r1, sp, #16
 800cc92:	4630      	mov	r0, r6
 800cc94:	f000 f880 	bl	800cd98 <_printf_i>
 800cc98:	e7e4      	b.n	800cc64 <_vfiprintf_r+0x208>
 800cc9a:	bf00      	nop
 800cc9c:	0800d72c 	.word	0x0800d72c
 800cca0:	0800d74c 	.word	0x0800d74c
 800cca4:	0800d70c 	.word	0x0800d70c
 800cca8:	0800d770 	.word	0x0800d770
 800ccac:	0800d77a 	.word	0x0800d77a
 800ccb0:	00000000 	.word	0x00000000
 800ccb4:	0800ca37 	.word	0x0800ca37
 800ccb8:	0800d776 	.word	0x0800d776

0800ccbc <_printf_common>:
 800ccbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ccc0:	4616      	mov	r6, r2
 800ccc2:	4699      	mov	r9, r3
 800ccc4:	688a      	ldr	r2, [r1, #8]
 800ccc6:	690b      	ldr	r3, [r1, #16]
 800ccc8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800cccc:	4293      	cmp	r3, r2
 800ccce:	bfb8      	it	lt
 800ccd0:	4613      	movlt	r3, r2
 800ccd2:	6033      	str	r3, [r6, #0]
 800ccd4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ccd8:	4607      	mov	r7, r0
 800ccda:	460c      	mov	r4, r1
 800ccdc:	b10a      	cbz	r2, 800cce2 <_printf_common+0x26>
 800ccde:	3301      	adds	r3, #1
 800cce0:	6033      	str	r3, [r6, #0]
 800cce2:	6823      	ldr	r3, [r4, #0]
 800cce4:	0699      	lsls	r1, r3, #26
 800cce6:	bf42      	ittt	mi
 800cce8:	6833      	ldrmi	r3, [r6, #0]
 800ccea:	3302      	addmi	r3, #2
 800ccec:	6033      	strmi	r3, [r6, #0]
 800ccee:	6825      	ldr	r5, [r4, #0]
 800ccf0:	f015 0506 	ands.w	r5, r5, #6
 800ccf4:	d106      	bne.n	800cd04 <_printf_common+0x48>
 800ccf6:	f104 0a19 	add.w	sl, r4, #25
 800ccfa:	68e3      	ldr	r3, [r4, #12]
 800ccfc:	6832      	ldr	r2, [r6, #0]
 800ccfe:	1a9b      	subs	r3, r3, r2
 800cd00:	42ab      	cmp	r3, r5
 800cd02:	dc26      	bgt.n	800cd52 <_printf_common+0x96>
 800cd04:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800cd08:	1e13      	subs	r3, r2, #0
 800cd0a:	6822      	ldr	r2, [r4, #0]
 800cd0c:	bf18      	it	ne
 800cd0e:	2301      	movne	r3, #1
 800cd10:	0692      	lsls	r2, r2, #26
 800cd12:	d42b      	bmi.n	800cd6c <_printf_common+0xb0>
 800cd14:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800cd18:	4649      	mov	r1, r9
 800cd1a:	4638      	mov	r0, r7
 800cd1c:	47c0      	blx	r8
 800cd1e:	3001      	adds	r0, #1
 800cd20:	d01e      	beq.n	800cd60 <_printf_common+0xa4>
 800cd22:	6823      	ldr	r3, [r4, #0]
 800cd24:	68e5      	ldr	r5, [r4, #12]
 800cd26:	6832      	ldr	r2, [r6, #0]
 800cd28:	f003 0306 	and.w	r3, r3, #6
 800cd2c:	2b04      	cmp	r3, #4
 800cd2e:	bf08      	it	eq
 800cd30:	1aad      	subeq	r5, r5, r2
 800cd32:	68a3      	ldr	r3, [r4, #8]
 800cd34:	6922      	ldr	r2, [r4, #16]
 800cd36:	bf0c      	ite	eq
 800cd38:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800cd3c:	2500      	movne	r5, #0
 800cd3e:	4293      	cmp	r3, r2
 800cd40:	bfc4      	itt	gt
 800cd42:	1a9b      	subgt	r3, r3, r2
 800cd44:	18ed      	addgt	r5, r5, r3
 800cd46:	2600      	movs	r6, #0
 800cd48:	341a      	adds	r4, #26
 800cd4a:	42b5      	cmp	r5, r6
 800cd4c:	d11a      	bne.n	800cd84 <_printf_common+0xc8>
 800cd4e:	2000      	movs	r0, #0
 800cd50:	e008      	b.n	800cd64 <_printf_common+0xa8>
 800cd52:	2301      	movs	r3, #1
 800cd54:	4652      	mov	r2, sl
 800cd56:	4649      	mov	r1, r9
 800cd58:	4638      	mov	r0, r7
 800cd5a:	47c0      	blx	r8
 800cd5c:	3001      	adds	r0, #1
 800cd5e:	d103      	bne.n	800cd68 <_printf_common+0xac>
 800cd60:	f04f 30ff 	mov.w	r0, #4294967295
 800cd64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cd68:	3501      	adds	r5, #1
 800cd6a:	e7c6      	b.n	800ccfa <_printf_common+0x3e>
 800cd6c:	18e1      	adds	r1, r4, r3
 800cd6e:	1c5a      	adds	r2, r3, #1
 800cd70:	2030      	movs	r0, #48	; 0x30
 800cd72:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800cd76:	4422      	add	r2, r4
 800cd78:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800cd7c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800cd80:	3302      	adds	r3, #2
 800cd82:	e7c7      	b.n	800cd14 <_printf_common+0x58>
 800cd84:	2301      	movs	r3, #1
 800cd86:	4622      	mov	r2, r4
 800cd88:	4649      	mov	r1, r9
 800cd8a:	4638      	mov	r0, r7
 800cd8c:	47c0      	blx	r8
 800cd8e:	3001      	adds	r0, #1
 800cd90:	d0e6      	beq.n	800cd60 <_printf_common+0xa4>
 800cd92:	3601      	adds	r6, #1
 800cd94:	e7d9      	b.n	800cd4a <_printf_common+0x8e>
	...

0800cd98 <_printf_i>:
 800cd98:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cd9c:	7e0f      	ldrb	r7, [r1, #24]
 800cd9e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800cda0:	2f78      	cmp	r7, #120	; 0x78
 800cda2:	4691      	mov	r9, r2
 800cda4:	4680      	mov	r8, r0
 800cda6:	460c      	mov	r4, r1
 800cda8:	469a      	mov	sl, r3
 800cdaa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800cdae:	d807      	bhi.n	800cdc0 <_printf_i+0x28>
 800cdb0:	2f62      	cmp	r7, #98	; 0x62
 800cdb2:	d80a      	bhi.n	800cdca <_printf_i+0x32>
 800cdb4:	2f00      	cmp	r7, #0
 800cdb6:	f000 80d8 	beq.w	800cf6a <_printf_i+0x1d2>
 800cdba:	2f58      	cmp	r7, #88	; 0x58
 800cdbc:	f000 80a3 	beq.w	800cf06 <_printf_i+0x16e>
 800cdc0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cdc4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800cdc8:	e03a      	b.n	800ce40 <_printf_i+0xa8>
 800cdca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800cdce:	2b15      	cmp	r3, #21
 800cdd0:	d8f6      	bhi.n	800cdc0 <_printf_i+0x28>
 800cdd2:	a101      	add	r1, pc, #4	; (adr r1, 800cdd8 <_printf_i+0x40>)
 800cdd4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800cdd8:	0800ce31 	.word	0x0800ce31
 800cddc:	0800ce45 	.word	0x0800ce45
 800cde0:	0800cdc1 	.word	0x0800cdc1
 800cde4:	0800cdc1 	.word	0x0800cdc1
 800cde8:	0800cdc1 	.word	0x0800cdc1
 800cdec:	0800cdc1 	.word	0x0800cdc1
 800cdf0:	0800ce45 	.word	0x0800ce45
 800cdf4:	0800cdc1 	.word	0x0800cdc1
 800cdf8:	0800cdc1 	.word	0x0800cdc1
 800cdfc:	0800cdc1 	.word	0x0800cdc1
 800ce00:	0800cdc1 	.word	0x0800cdc1
 800ce04:	0800cf51 	.word	0x0800cf51
 800ce08:	0800ce75 	.word	0x0800ce75
 800ce0c:	0800cf33 	.word	0x0800cf33
 800ce10:	0800cdc1 	.word	0x0800cdc1
 800ce14:	0800cdc1 	.word	0x0800cdc1
 800ce18:	0800cf73 	.word	0x0800cf73
 800ce1c:	0800cdc1 	.word	0x0800cdc1
 800ce20:	0800ce75 	.word	0x0800ce75
 800ce24:	0800cdc1 	.word	0x0800cdc1
 800ce28:	0800cdc1 	.word	0x0800cdc1
 800ce2c:	0800cf3b 	.word	0x0800cf3b
 800ce30:	682b      	ldr	r3, [r5, #0]
 800ce32:	1d1a      	adds	r2, r3, #4
 800ce34:	681b      	ldr	r3, [r3, #0]
 800ce36:	602a      	str	r2, [r5, #0]
 800ce38:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ce3c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ce40:	2301      	movs	r3, #1
 800ce42:	e0a3      	b.n	800cf8c <_printf_i+0x1f4>
 800ce44:	6820      	ldr	r0, [r4, #0]
 800ce46:	6829      	ldr	r1, [r5, #0]
 800ce48:	0606      	lsls	r6, r0, #24
 800ce4a:	f101 0304 	add.w	r3, r1, #4
 800ce4e:	d50a      	bpl.n	800ce66 <_printf_i+0xce>
 800ce50:	680e      	ldr	r6, [r1, #0]
 800ce52:	602b      	str	r3, [r5, #0]
 800ce54:	2e00      	cmp	r6, #0
 800ce56:	da03      	bge.n	800ce60 <_printf_i+0xc8>
 800ce58:	232d      	movs	r3, #45	; 0x2d
 800ce5a:	4276      	negs	r6, r6
 800ce5c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ce60:	485e      	ldr	r0, [pc, #376]	; (800cfdc <_printf_i+0x244>)
 800ce62:	230a      	movs	r3, #10
 800ce64:	e019      	b.n	800ce9a <_printf_i+0x102>
 800ce66:	680e      	ldr	r6, [r1, #0]
 800ce68:	602b      	str	r3, [r5, #0]
 800ce6a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800ce6e:	bf18      	it	ne
 800ce70:	b236      	sxthne	r6, r6
 800ce72:	e7ef      	b.n	800ce54 <_printf_i+0xbc>
 800ce74:	682b      	ldr	r3, [r5, #0]
 800ce76:	6820      	ldr	r0, [r4, #0]
 800ce78:	1d19      	adds	r1, r3, #4
 800ce7a:	6029      	str	r1, [r5, #0]
 800ce7c:	0601      	lsls	r1, r0, #24
 800ce7e:	d501      	bpl.n	800ce84 <_printf_i+0xec>
 800ce80:	681e      	ldr	r6, [r3, #0]
 800ce82:	e002      	b.n	800ce8a <_printf_i+0xf2>
 800ce84:	0646      	lsls	r6, r0, #25
 800ce86:	d5fb      	bpl.n	800ce80 <_printf_i+0xe8>
 800ce88:	881e      	ldrh	r6, [r3, #0]
 800ce8a:	4854      	ldr	r0, [pc, #336]	; (800cfdc <_printf_i+0x244>)
 800ce8c:	2f6f      	cmp	r7, #111	; 0x6f
 800ce8e:	bf0c      	ite	eq
 800ce90:	2308      	moveq	r3, #8
 800ce92:	230a      	movne	r3, #10
 800ce94:	2100      	movs	r1, #0
 800ce96:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ce9a:	6865      	ldr	r5, [r4, #4]
 800ce9c:	60a5      	str	r5, [r4, #8]
 800ce9e:	2d00      	cmp	r5, #0
 800cea0:	bfa2      	ittt	ge
 800cea2:	6821      	ldrge	r1, [r4, #0]
 800cea4:	f021 0104 	bicge.w	r1, r1, #4
 800cea8:	6021      	strge	r1, [r4, #0]
 800ceaa:	b90e      	cbnz	r6, 800ceb0 <_printf_i+0x118>
 800ceac:	2d00      	cmp	r5, #0
 800ceae:	d04d      	beq.n	800cf4c <_printf_i+0x1b4>
 800ceb0:	4615      	mov	r5, r2
 800ceb2:	fbb6 f1f3 	udiv	r1, r6, r3
 800ceb6:	fb03 6711 	mls	r7, r3, r1, r6
 800ceba:	5dc7      	ldrb	r7, [r0, r7]
 800cebc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800cec0:	4637      	mov	r7, r6
 800cec2:	42bb      	cmp	r3, r7
 800cec4:	460e      	mov	r6, r1
 800cec6:	d9f4      	bls.n	800ceb2 <_printf_i+0x11a>
 800cec8:	2b08      	cmp	r3, #8
 800ceca:	d10b      	bne.n	800cee4 <_printf_i+0x14c>
 800cecc:	6823      	ldr	r3, [r4, #0]
 800cece:	07de      	lsls	r6, r3, #31
 800ced0:	d508      	bpl.n	800cee4 <_printf_i+0x14c>
 800ced2:	6923      	ldr	r3, [r4, #16]
 800ced4:	6861      	ldr	r1, [r4, #4]
 800ced6:	4299      	cmp	r1, r3
 800ced8:	bfde      	ittt	le
 800ceda:	2330      	movle	r3, #48	; 0x30
 800cedc:	f805 3c01 	strble.w	r3, [r5, #-1]
 800cee0:	f105 35ff 	addle.w	r5, r5, #4294967295
 800cee4:	1b52      	subs	r2, r2, r5
 800cee6:	6122      	str	r2, [r4, #16]
 800cee8:	f8cd a000 	str.w	sl, [sp]
 800ceec:	464b      	mov	r3, r9
 800ceee:	aa03      	add	r2, sp, #12
 800cef0:	4621      	mov	r1, r4
 800cef2:	4640      	mov	r0, r8
 800cef4:	f7ff fee2 	bl	800ccbc <_printf_common>
 800cef8:	3001      	adds	r0, #1
 800cefa:	d14c      	bne.n	800cf96 <_printf_i+0x1fe>
 800cefc:	f04f 30ff 	mov.w	r0, #4294967295
 800cf00:	b004      	add	sp, #16
 800cf02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cf06:	4835      	ldr	r0, [pc, #212]	; (800cfdc <_printf_i+0x244>)
 800cf08:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800cf0c:	6829      	ldr	r1, [r5, #0]
 800cf0e:	6823      	ldr	r3, [r4, #0]
 800cf10:	f851 6b04 	ldr.w	r6, [r1], #4
 800cf14:	6029      	str	r1, [r5, #0]
 800cf16:	061d      	lsls	r5, r3, #24
 800cf18:	d514      	bpl.n	800cf44 <_printf_i+0x1ac>
 800cf1a:	07df      	lsls	r7, r3, #31
 800cf1c:	bf44      	itt	mi
 800cf1e:	f043 0320 	orrmi.w	r3, r3, #32
 800cf22:	6023      	strmi	r3, [r4, #0]
 800cf24:	b91e      	cbnz	r6, 800cf2e <_printf_i+0x196>
 800cf26:	6823      	ldr	r3, [r4, #0]
 800cf28:	f023 0320 	bic.w	r3, r3, #32
 800cf2c:	6023      	str	r3, [r4, #0]
 800cf2e:	2310      	movs	r3, #16
 800cf30:	e7b0      	b.n	800ce94 <_printf_i+0xfc>
 800cf32:	6823      	ldr	r3, [r4, #0]
 800cf34:	f043 0320 	orr.w	r3, r3, #32
 800cf38:	6023      	str	r3, [r4, #0]
 800cf3a:	2378      	movs	r3, #120	; 0x78
 800cf3c:	4828      	ldr	r0, [pc, #160]	; (800cfe0 <_printf_i+0x248>)
 800cf3e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800cf42:	e7e3      	b.n	800cf0c <_printf_i+0x174>
 800cf44:	0659      	lsls	r1, r3, #25
 800cf46:	bf48      	it	mi
 800cf48:	b2b6      	uxthmi	r6, r6
 800cf4a:	e7e6      	b.n	800cf1a <_printf_i+0x182>
 800cf4c:	4615      	mov	r5, r2
 800cf4e:	e7bb      	b.n	800cec8 <_printf_i+0x130>
 800cf50:	682b      	ldr	r3, [r5, #0]
 800cf52:	6826      	ldr	r6, [r4, #0]
 800cf54:	6961      	ldr	r1, [r4, #20]
 800cf56:	1d18      	adds	r0, r3, #4
 800cf58:	6028      	str	r0, [r5, #0]
 800cf5a:	0635      	lsls	r5, r6, #24
 800cf5c:	681b      	ldr	r3, [r3, #0]
 800cf5e:	d501      	bpl.n	800cf64 <_printf_i+0x1cc>
 800cf60:	6019      	str	r1, [r3, #0]
 800cf62:	e002      	b.n	800cf6a <_printf_i+0x1d2>
 800cf64:	0670      	lsls	r0, r6, #25
 800cf66:	d5fb      	bpl.n	800cf60 <_printf_i+0x1c8>
 800cf68:	8019      	strh	r1, [r3, #0]
 800cf6a:	2300      	movs	r3, #0
 800cf6c:	6123      	str	r3, [r4, #16]
 800cf6e:	4615      	mov	r5, r2
 800cf70:	e7ba      	b.n	800cee8 <_printf_i+0x150>
 800cf72:	682b      	ldr	r3, [r5, #0]
 800cf74:	1d1a      	adds	r2, r3, #4
 800cf76:	602a      	str	r2, [r5, #0]
 800cf78:	681d      	ldr	r5, [r3, #0]
 800cf7a:	6862      	ldr	r2, [r4, #4]
 800cf7c:	2100      	movs	r1, #0
 800cf7e:	4628      	mov	r0, r5
 800cf80:	f7f3 f92e 	bl	80001e0 <memchr>
 800cf84:	b108      	cbz	r0, 800cf8a <_printf_i+0x1f2>
 800cf86:	1b40      	subs	r0, r0, r5
 800cf88:	6060      	str	r0, [r4, #4]
 800cf8a:	6863      	ldr	r3, [r4, #4]
 800cf8c:	6123      	str	r3, [r4, #16]
 800cf8e:	2300      	movs	r3, #0
 800cf90:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cf94:	e7a8      	b.n	800cee8 <_printf_i+0x150>
 800cf96:	6923      	ldr	r3, [r4, #16]
 800cf98:	462a      	mov	r2, r5
 800cf9a:	4649      	mov	r1, r9
 800cf9c:	4640      	mov	r0, r8
 800cf9e:	47d0      	blx	sl
 800cfa0:	3001      	adds	r0, #1
 800cfa2:	d0ab      	beq.n	800cefc <_printf_i+0x164>
 800cfa4:	6823      	ldr	r3, [r4, #0]
 800cfa6:	079b      	lsls	r3, r3, #30
 800cfa8:	d413      	bmi.n	800cfd2 <_printf_i+0x23a>
 800cfaa:	68e0      	ldr	r0, [r4, #12]
 800cfac:	9b03      	ldr	r3, [sp, #12]
 800cfae:	4298      	cmp	r0, r3
 800cfb0:	bfb8      	it	lt
 800cfb2:	4618      	movlt	r0, r3
 800cfb4:	e7a4      	b.n	800cf00 <_printf_i+0x168>
 800cfb6:	2301      	movs	r3, #1
 800cfb8:	4632      	mov	r2, r6
 800cfba:	4649      	mov	r1, r9
 800cfbc:	4640      	mov	r0, r8
 800cfbe:	47d0      	blx	sl
 800cfc0:	3001      	adds	r0, #1
 800cfc2:	d09b      	beq.n	800cefc <_printf_i+0x164>
 800cfc4:	3501      	adds	r5, #1
 800cfc6:	68e3      	ldr	r3, [r4, #12]
 800cfc8:	9903      	ldr	r1, [sp, #12]
 800cfca:	1a5b      	subs	r3, r3, r1
 800cfcc:	42ab      	cmp	r3, r5
 800cfce:	dcf2      	bgt.n	800cfb6 <_printf_i+0x21e>
 800cfd0:	e7eb      	b.n	800cfaa <_printf_i+0x212>
 800cfd2:	2500      	movs	r5, #0
 800cfd4:	f104 0619 	add.w	r6, r4, #25
 800cfd8:	e7f5      	b.n	800cfc6 <_printf_i+0x22e>
 800cfda:	bf00      	nop
 800cfdc:	0800d781 	.word	0x0800d781
 800cfe0:	0800d792 	.word	0x0800d792

0800cfe4 <_read_r>:
 800cfe4:	b538      	push	{r3, r4, r5, lr}
 800cfe6:	4d07      	ldr	r5, [pc, #28]	; (800d004 <_read_r+0x20>)
 800cfe8:	4604      	mov	r4, r0
 800cfea:	4608      	mov	r0, r1
 800cfec:	4611      	mov	r1, r2
 800cfee:	2200      	movs	r2, #0
 800cff0:	602a      	str	r2, [r5, #0]
 800cff2:	461a      	mov	r2, r3
 800cff4:	f7f4 ffc4 	bl	8001f80 <_read>
 800cff8:	1c43      	adds	r3, r0, #1
 800cffa:	d102      	bne.n	800d002 <_read_r+0x1e>
 800cffc:	682b      	ldr	r3, [r5, #0]
 800cffe:	b103      	cbz	r3, 800d002 <_read_r+0x1e>
 800d000:	6023      	str	r3, [r4, #0]
 800d002:	bd38      	pop	{r3, r4, r5, pc}
 800d004:	20002e28 	.word	0x20002e28

0800d008 <_fstat_r>:
 800d008:	b538      	push	{r3, r4, r5, lr}
 800d00a:	4d07      	ldr	r5, [pc, #28]	; (800d028 <_fstat_r+0x20>)
 800d00c:	2300      	movs	r3, #0
 800d00e:	4604      	mov	r4, r0
 800d010:	4608      	mov	r0, r1
 800d012:	4611      	mov	r1, r2
 800d014:	602b      	str	r3, [r5, #0]
 800d016:	f7f4 ffdc 	bl	8001fd2 <_fstat>
 800d01a:	1c43      	adds	r3, r0, #1
 800d01c:	d102      	bne.n	800d024 <_fstat_r+0x1c>
 800d01e:	682b      	ldr	r3, [r5, #0]
 800d020:	b103      	cbz	r3, 800d024 <_fstat_r+0x1c>
 800d022:	6023      	str	r3, [r4, #0]
 800d024:	bd38      	pop	{r3, r4, r5, pc}
 800d026:	bf00      	nop
 800d028:	20002e28 	.word	0x20002e28

0800d02c <_isatty_r>:
 800d02c:	b538      	push	{r3, r4, r5, lr}
 800d02e:	4d06      	ldr	r5, [pc, #24]	; (800d048 <_isatty_r+0x1c>)
 800d030:	2300      	movs	r3, #0
 800d032:	4604      	mov	r4, r0
 800d034:	4608      	mov	r0, r1
 800d036:	602b      	str	r3, [r5, #0]
 800d038:	f7f4 ffdb 	bl	8001ff2 <_isatty>
 800d03c:	1c43      	adds	r3, r0, #1
 800d03e:	d102      	bne.n	800d046 <_isatty_r+0x1a>
 800d040:	682b      	ldr	r3, [r5, #0]
 800d042:	b103      	cbz	r3, 800d046 <_isatty_r+0x1a>
 800d044:	6023      	str	r3, [r4, #0]
 800d046:	bd38      	pop	{r3, r4, r5, pc}
 800d048:	20002e28 	.word	0x20002e28

0800d04c <memmove>:
 800d04c:	4288      	cmp	r0, r1
 800d04e:	b510      	push	{r4, lr}
 800d050:	eb01 0402 	add.w	r4, r1, r2
 800d054:	d902      	bls.n	800d05c <memmove+0x10>
 800d056:	4284      	cmp	r4, r0
 800d058:	4623      	mov	r3, r4
 800d05a:	d807      	bhi.n	800d06c <memmove+0x20>
 800d05c:	1e43      	subs	r3, r0, #1
 800d05e:	42a1      	cmp	r1, r4
 800d060:	d008      	beq.n	800d074 <memmove+0x28>
 800d062:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d066:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d06a:	e7f8      	b.n	800d05e <memmove+0x12>
 800d06c:	4402      	add	r2, r0
 800d06e:	4601      	mov	r1, r0
 800d070:	428a      	cmp	r2, r1
 800d072:	d100      	bne.n	800d076 <memmove+0x2a>
 800d074:	bd10      	pop	{r4, pc}
 800d076:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d07a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d07e:	e7f7      	b.n	800d070 <memmove+0x24>

0800d080 <_realloc_r>:
 800d080:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d084:	4680      	mov	r8, r0
 800d086:	4614      	mov	r4, r2
 800d088:	460e      	mov	r6, r1
 800d08a:	b921      	cbnz	r1, 800d096 <_realloc_r+0x16>
 800d08c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d090:	4611      	mov	r1, r2
 800d092:	f7fe bef5 	b.w	800be80 <_malloc_r>
 800d096:	b92a      	cbnz	r2, 800d0a4 <_realloc_r+0x24>
 800d098:	f7ff fb0e 	bl	800c6b8 <_free_r>
 800d09c:	4625      	mov	r5, r4
 800d09e:	4628      	mov	r0, r5
 800d0a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d0a4:	f000 f81b 	bl	800d0de <_malloc_usable_size_r>
 800d0a8:	4284      	cmp	r4, r0
 800d0aa:	4607      	mov	r7, r0
 800d0ac:	d802      	bhi.n	800d0b4 <_realloc_r+0x34>
 800d0ae:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d0b2:	d812      	bhi.n	800d0da <_realloc_r+0x5a>
 800d0b4:	4621      	mov	r1, r4
 800d0b6:	4640      	mov	r0, r8
 800d0b8:	f7fe fee2 	bl	800be80 <_malloc_r>
 800d0bc:	4605      	mov	r5, r0
 800d0be:	2800      	cmp	r0, #0
 800d0c0:	d0ed      	beq.n	800d09e <_realloc_r+0x1e>
 800d0c2:	42bc      	cmp	r4, r7
 800d0c4:	4622      	mov	r2, r4
 800d0c6:	4631      	mov	r1, r6
 800d0c8:	bf28      	it	cs
 800d0ca:	463a      	movcs	r2, r7
 800d0cc:	f7fe fea1 	bl	800be12 <memcpy>
 800d0d0:	4631      	mov	r1, r6
 800d0d2:	4640      	mov	r0, r8
 800d0d4:	f7ff faf0 	bl	800c6b8 <_free_r>
 800d0d8:	e7e1      	b.n	800d09e <_realloc_r+0x1e>
 800d0da:	4635      	mov	r5, r6
 800d0dc:	e7df      	b.n	800d09e <_realloc_r+0x1e>

0800d0de <_malloc_usable_size_r>:
 800d0de:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d0e2:	1f18      	subs	r0, r3, #4
 800d0e4:	2b00      	cmp	r3, #0
 800d0e6:	bfbc      	itt	lt
 800d0e8:	580b      	ldrlt	r3, [r1, r0]
 800d0ea:	18c0      	addlt	r0, r0, r3
 800d0ec:	4770      	bx	lr
	...

0800d0f0 <_init>:
 800d0f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d0f2:	bf00      	nop
 800d0f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d0f6:	bc08      	pop	{r3}
 800d0f8:	469e      	mov	lr, r3
 800d0fa:	4770      	bx	lr

0800d0fc <_fini>:
 800d0fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d0fe:	bf00      	nop
 800d100:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d102:	bc08      	pop	{r3}
 800d104:	469e      	mov	lr, r3
 800d106:	4770      	bx	lr
